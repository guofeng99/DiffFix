[
  {
    "oid": "db58f00c0fe0f129611d654291f2177de55dc9ff",
    "message": "[ISSUE #7169] Change metadataThreadPoolQueueCapacity to 100000 (#7170)",
    "date": "2023-08-11T11:18:30Z",
    "url": "https://github.com/apache/rocketmq/commit/db58f00c0fe0f129611d654291f2177de55dc9ff",
    "details": {
      "sha": "39caaa0d91db0f7a90c280581379cd5e657854ab",
      "filename": "proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/db58f00c0fe0f129611d654291f2177de55dc9ff/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fconfig%2FProxyConfig.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/db58f00c0fe0f129611d654291f2177de55dc9ff/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fconfig%2FProxyConfig.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fconfig%2FProxyConfig.java?ref=db58f00c0fe0f129611d654291f2177de55dc9ff",
      "patch": "@@ -165,7 +165,7 @@ public class ProxyConfig implements ConfigFile {\n     private int subscriptionGroupConfigCacheExpiredInSeconds = 20;\n     private int subscriptionGroupConfigCacheMaxNum = 20000;\n     private int metadataThreadPoolNums = 3;\n-    private int metadataThreadPoolQueueCapacity = 1000;\n+    private int metadataThreadPoolQueueCapacity = 100000;\n \n     private int transactionHeartbeatThreadPoolNums = 20;\n     private int transactionHeartbeatThreadPoolQueueCapacity = 200;",
      "parent_sha": "f534501855f8edbcb58f5b856973bf1027b5cf3a"
    }
  },
  {
    "oid": "44736c3760b9caa0aad21b8df7a3e53bebfd07b8",
    "message": "fix Multiple instances in the same application share MQClientInstance",
    "date": "2021-03-16T04:21:32Z",
    "url": "https://github.com/apache/rocketmq/commit/44736c3760b9caa0aad21b8df7a3e53bebfd07b8",
    "details": {
      "sha": "bcd3f9b205263375701ad815f7d1baa7898a5330",
      "filename": "client/src/main/java/org/apache/rocketmq/client/ClientConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/44736c3760b9caa0aad21b8df7a3e53bebfd07b8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2FClientConfig.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/44736c3760b9caa0aad21b8df7a3e53bebfd07b8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2FClientConfig.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2FClientConfig.java?ref=44736c3760b9caa0aad21b8df7a3e53bebfd07b8",
      "patch": "@@ -94,7 +94,7 @@ public void setInstanceName(String instanceName) {\n \n     public void changeInstanceNameToPID() {\n         if (this.instanceName.equals(\"DEFAULT\")) {\n-            this.instanceName = String.valueOf(UtilAll.getPid());\n+            this.instanceName = UtilAll.getPid()+ \"#\" + System.nanoTime();\n         }\n     }\n ",
      "parent_sha": "e9b2d8522df084a0f8c19eb56e91d6d61bcb673b"
    }
  },
  {
    "oid": "ededeb67aff530ee45c2c872a9f77a485ba89f59",
    "message": "[ISSUE #3371] Part A: Fix stack overflow exception when set message mode #3372\n\nCo-authored-by: zhangxu16 <zhangxu16@xiaomi.com>",
    "date": "2021-09-28T05:56:55Z",
    "url": "https://github.com/apache/rocketmq/commit/ededeb67aff530ee45c2c872a9f77a485ba89f59",
    "details": {
      "sha": "b5472bc214043573a8d7ad22511a915febd149b0",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/loadbalance/MessageRequestModeManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/ededeb67aff530ee45c2c872a9f77a485ba89f59/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Floadbalance%2FMessageRequestModeManager.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/ededeb67aff530ee45c2c872a9f77a485ba89f59/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Floadbalance%2FMessageRequestModeManager.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Floadbalance%2FMessageRequestModeManager.java?ref=ededeb67aff530ee45c2c872a9f77a485ba89f59",
      "patch": "@@ -26,7 +26,7 @@\n \n public class MessageRequestModeManager extends ConfigManager {\n \n-    private BrokerController brokerController;\n+    private transient BrokerController brokerController;\n \n     private ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>>\n             messageRequestModeMap = new ConcurrentHashMap<String, ConcurrentHashMap<String, SetMessageRequestModeRequestBody>>();",
      "parent_sha": "dd09ba1ec869acb1538d2c73f98d44066bbbb00f"
    }
  },
  {
    "oid": "dce1165451c5224004230e14b52a35e5fabfbcbe",
    "message": "Issue #118 update updateBrokerConfig",
    "date": "2016-09-09T07:02:03Z",
    "url": "https://github.com/apache/rocketmq/commit/dce1165451c5224004230e14b52a35e5fabfbcbe",
    "details": {
      "sha": "86938a7b8bf62cae80e6ca12d12e1b101d64a4ac",
      "filename": "rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/broker/UpdateBrokerConfigSubCommand.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/rocketmq/blob/dce1165451c5224004230e14b52a35e5fabfbcbe/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fbroker%2FUpdateBrokerConfigSubCommand.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/dce1165451c5224004230e14b52a35e5fabfbcbe/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fbroker%2FUpdateBrokerConfigSubCommand.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fbroker%2FUpdateBrokerConfigSubCommand.java?ref=dce1165451c5224004230e14b52a35e5fabfbcbe",
      "patch": "@@ -97,8 +97,12 @@ public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) {\n                 Set<String> masterSet =\n                         CommandUtil.fetchMasterAddrByClusterName(defaultMQAdminExt, clusterName);\n                 for (String brokerAddr : masterSet) {\n-                    defaultMQAdminExt.updateBrokerConfig(brokerAddr, properties);\n-                    System.out.printf(\"update broker config success, %s\\n\", brokerAddr);\n+                    try {\n+                        defaultMQAdminExt.updateBrokerConfig(brokerAddr, properties);\n+                        System.out.printf(\"update broker config success, %s\\n\", brokerAddr);\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n                 }\n                 return;\n             }",
      "parent_sha": "8337cb21c41fe605d7b08cc86ccb8f1737bbf2ce"
    }
  },
  {
    "oid": "c3ea4f2bc2e2f04ea62cd4447c8beb1f12ada708",
    "message": "linux\u8981\u589e\u52a0sh",
    "date": "2014-05-01T11:44:26Z",
    "url": "https://github.com/apache/rocketmq/commit/c3ea4f2bc2e2f04ea62cd4447c8beb1f12ada708",
    "details": {
      "sha": "8e1f387f51289f29137f447269eb5e9f6da8c604",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/filtersrv/FilterServerManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/rocketmq/blob/c3ea4f2bc2e2f04ea62cd4447c8beb1f12ada708/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ffiltersrv%2FFilterServerManager.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/c3ea4f2bc2e2f04ea62cd4447c8beb1f12ada708/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ffiltersrv%2FFilterServerManager.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ffiltersrv%2FFilterServerManager.java?ref=c3ea4f2bc2e2f04ea62cd4447c8beb1f12ada708",
      "patch": "@@ -77,7 +77,7 @@ public void run() {\n                     log.error(\"\", e);\n                 }\n             }\n-        }, 1000 * 10, 1000 * 10, TimeUnit.MILLISECONDS);\n+        }, 1000 * 5, 1000 * 30, TimeUnit.MILLISECONDS);\n     }\n \n \n@@ -97,12 +97,12 @@ private String buildStartCommand() {\n         }\n \n         if (RemotingUtil.isWindowsPlatform()) {\n-            return String.format(\"start /b %s\\\\bin\\\\mqfiltersrv %s\", //\n+            return String.format(\"start /b %s\\\\bin\\\\mqfiltersrv.exe %s\", //\n                 this.brokerController.getBrokerConfig().getRocketmqHome(),//\n                 config);\n         }\n         else {\n-            return String.format(\"nohup %s/bin/mqfiltersrv %s&\", //\n+            return String.format(\"nohup sh %s/bin/mqfiltersrv %s&\", //\n                 this.brokerController.getBrokerConfig().getRocketmqHome(),//\n                 config);\n         }",
      "parent_sha": "b03493c0fd69e7f4cfcb0b3479a174336fa556a2"
    }
  },
  {
    "oid": "ab09e213aa5d14a4043c858b0631996c0fec9ca7",
    "message": "[#1540] add comment",
    "date": "2019-10-18T06:17:52Z",
    "url": "https://github.com/apache/rocketmq/commit/ab09e213aa5d14a4043c858b0631996c0fec9ca7",
    "details": {
      "sha": "c49853e943c46ecc57c5529d50b6760af8f391e5",
      "filename": "client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/ab09e213aa5d14a4043c858b0631996c0fec9ca7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Fproducer%2FDefaultMQProducerImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/ab09e213aa5d14a4043c858b0631996c0fec9ca7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Fproducer%2FDefaultMQProducerImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Fproducer%2FDefaultMQProducerImpl.java?ref=ab09e213aa5d14a4043c858b0631996c0fec9ca7",
      "patch": "@@ -1180,7 +1180,7 @@ public TransactionSendResult sendMessageInTransaction(final Message msg,\n             throw new MQClientException(\"tranExecutor is null\", null);\n         }\n \n-        // \u4e8b\u52a1\u6d88\u606f\u5c4f\u853dDelayTimeLevel\u53c2\u6570\n+        // ignore DelayTimeLevel parameter\n         if(msg.getDelayTimeLevel() != 0) {\n             MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_DELAY_TIME_LEVEL);\n         }",
      "parent_sha": "45043e2571609347b37641c1683d14e86eeee873"
    }
  },
  {
    "oid": "f8eb4d80a2d56d6147add795963f4931fa0fa424",
    "message": "[#1568] rocketmq need enhance stability when commitlog broken\n\u589e\u52a0\u975e\u7a7a\u5224\u65ad\uff0c\u9632\u6b62\u7a7a\u6307\u9488\u5f02\u5e38,\u5bfc\u81f4\u5faa\u73af\u4e8b\u52a1 check,\u589e\u52a0test\u8986\u76d6\uff0c\u4fee\u590d\u7f16\u7801\u683c\u5f0f\n\u539f\u56e0\uff0c\u6d88\u606f\u592a\u957f\u538b\u7f29\u540e\u91cd\u590d\u89e3\u538b",
    "date": "2019-11-05T06:08:47Z",
    "url": "https://github.com/apache/rocketmq/commit/f8eb4d80a2d56d6147add795963f4931fa0fa424",
    "details": {
      "sha": "45699032f9d798711b5b5b24032ebcb5b12adfde",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/f8eb4d80a2d56d6147add795963f4931fa0fa424/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Ftransaction%2Fqueue%2FTransactionalMessageBridge.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/f8eb4d80a2d56d6147add795963f4931fa0fa424/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Ftransaction%2Fqueue%2FTransactionalMessageBridge.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Ftransaction%2Fqueue%2FTransactionalMessageBridge.java?ref=f8eb4d80a2d56d6147add795963f4931fa0fa424",
      "patch": "@@ -178,7 +178,7 @@ private List<MessageExt> decodeMsgList(GetMessageResult getMessageResult) {\n         try {\n             List<ByteBuffer> messageBufferList = getMessageResult.getMessageBufferList();\n             for (ByteBuffer bb : messageBufferList) {\n-                MessageExt msgExt = MessageDecoder.decode(bb);\n+                MessageExt msgExt = MessageDecoder.decode(bb, true, false);\n                 if (msgExt != null) {\n                     foundList.add(msgExt);\n                 }",
      "parent_sha": "903783f9b99374414c036061e762f1db0ed161ee"
    }
  },
  {
    "oid": "337bdb8a4370d3a39ce5b2b203c27382b4e11386",
    "message": "\u589e\u52a0\u6e05\u7406\u4e8b\u52a1Redolog\u7684\u529f\u80fd",
    "date": "2013-05-18T07:43:29Z",
    "url": "https://github.com/apache/rocketmq/commit/337bdb8a4370d3a39ce5b2b203c27382b4e11386",
    "details": {
      "sha": "40d6b94cd272571aaa4810be4d8a7de34ddd9442",
      "filename": "rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apache/rocketmq/blob/337bdb8a4370d3a39ce5b2b203c27382b4e11386/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/337bdb8a4370d3a39ce5b2b203c27382b4e11386/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java?ref=337bdb8a4370d3a39ce5b2b203c27382b4e11386",
      "patch": "@@ -334,10 +334,13 @@ private void deleteExpiredFiles() {\n                         }\n                     }\n                 }\n-            }\n \n-            // \u027e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n-            DefaultMessageStore.this.indexService.deleteExpiredFile(minOffset);\n+                // \u027e\ufffd\ufffd\ufffd\ufffd\u05beRedoLog\n+                DefaultMessageStore.this.transactionStateService.getTranRedoLog().deleteExpiredFile(minOffset);\n+\n+                // \u027e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n+                DefaultMessageStore.this.indexService.deleteExpiredFile(minOffset);\n+            }\n         }\n \n ",
      "parent_sha": "366c4d2bc1641feaff5656630a4f5c72a213e5ed"
    }
  },
  {
    "oid": "6d247cb3c6bbe77166ad2fb3b7f9a953b57940f9",
    "message": "[ISSUE 3585] [Part J] Use MappedByteBuffer instead of FileChannel to write consume queue and slave commitlog. (#3657)\n\nThis commit improve reput performance and speed up consume qps greatly. In our test, produce about 200,000 tps.\r\n72 queue consume qps: from about 70,000 to 200,000\r\n600 queue consume qps: from about 70,000 to 110,000",
    "date": "2021-12-27T12:02:57Z",
    "url": "https://github.com/apache/rocketmq/commit/6d247cb3c6bbe77166ad2fb3b7f9a953b57940f9",
    "details": {
      "sha": "774896bb90c0aac2715023c7626de7496d2ea5cf",
      "filename": "store/src/main/java/org/apache/rocketmq/store/MappedFile.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/apache/rocketmq/blob/6d247cb3c6bbe77166ad2fb3b7f9a953b57940f9/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFile.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/6d247cb3c6bbe77166ad2fb3b7f9a953b57940f9/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFile.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFile.java?ref=6d247cb3c6bbe77166ad2fb3b7f9a953b57940f9",
      "patch": "@@ -236,8 +236,9 @@ public boolean appendMessage(final byte[] data) {\n \n         if ((currentPos + data.length) <= this.fileSize) {\n             try {\n-                this.fileChannel.position(currentPos);\n-                this.fileChannel.write(ByteBuffer.wrap(data));\n+                ByteBuffer buf = this.mappedByteBuffer.slice();\n+                buf.position(currentPos);\n+                buf.put(data);\n             } catch (Throwable e) {\n                 log.error(\"Error occurred when append message to mappedFile.\", e);\n             }\n@@ -259,8 +260,9 @@ public boolean appendMessage(final byte[] data, final int offset, final int leng\n \n         if ((currentPos + length) <= this.fileSize) {\n             try {\n-                this.fileChannel.position(currentPos);\n-                this.fileChannel.write(ByteBuffer.wrap(data, offset, length));\n+                ByteBuffer buf = this.mappedByteBuffer.slice();\n+                buf.position(currentPos);\n+                buf.put(data, offset, length);\n             } catch (Throwable e) {\n                 log.error(\"Error occurred when append message to mappedFile.\", e);\n             }",
      "parent_sha": "75557b8700bef395002a6b5b7c2bb083c120b632"
    }
  },
  {
    "oid": "d2615fad24c701e2f1b3dd261c670a1213e9e6b0",
    "message": "#253 \u4e3a\u96c6\u7fa4\u547d\u4ee4\u589e\u52a0tps\u8f93\u51fa",
    "date": "2013-10-20T03:26:12Z",
    "url": "https://github.com/apache/rocketmq/commit/d2615fad24c701e2f1b3dd261c670a1213e9e6b0",
    "details": {
      "sha": "5581830cc2953c6d34f9629dfe750a5073068e05",
      "filename": "rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/ClusterListSubCommand.java",
      "status": "modified",
      "additions": 18,
      "deletions": 13,
      "changes": 31,
      "blob_url": "https://github.com/apache/rocketmq/blob/d2615fad24c701e2f1b3dd261c670a1213e9e6b0/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fcluster%2FClusterListSubCommand.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/d2615fad24c701e2f1b3dd261c670a1213e9e6b0/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fcluster%2FClusterListSubCommand.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fcluster%2FClusterListSubCommand.java?ref=d2615fad24c701e2f1b3dd261c670a1213e9e6b0",
      "patch": "@@ -90,25 +90,30 @@ public void execute(final CommandLine commandLine, final Options options) {\n                                 brokerData.getBrokerAddrs().entrySet().iterator();\n                         while (itAddr.hasNext()) {\n                             Map.Entry<Long, String> next1 = itAddr.next();\n-\n-                            KVTable kvTable = defaultMQAdminExt.fetchBrokerRuntimeStats(next1.getValue());\n-                            String putTps = kvTable.getTable().get(\"putTps\");\n-                            String getTransferedTps = kvTable.getTable().get(\"getTransferedTps\");\n                             long in = 0;\n                             long out = 0;\n-                            {\n-                                String[] tpss = putTps.split(\" \");\n-                                if (tpss != null && tpss.length > 0) {\n-                                    in = (long) Double.parseDouble(tpss[0]);\n+\n+                            try {\n+                                KVTable kvTable = defaultMQAdminExt.fetchBrokerRuntimeStats(next1.getValue());\n+                                String putTps = kvTable.getTable().get(\"putTps\");\n+                                String getTransferedTps = kvTable.getTable().get(\"getTransferedTps\");\n+\n+                                {\n+                                    String[] tpss = putTps.split(\" \");\n+                                    if (tpss != null && tpss.length > 0) {\n+                                        in = (long) Double.parseDouble(tpss[0]);\n+                                    }\n                                 }\n-                            }\n \n-                            {\n-                                String[] tpss = getTransferedTps.split(\" \");\n-                                if (tpss != null && tpss.length > 0) {\n-                                    out = (long) Double.parseDouble(tpss[0]);\n+                                {\n+                                    String[] tpss = getTransferedTps.split(\" \");\n+                                    if (tpss != null && tpss.length > 0) {\n+                                        out = (long) Double.parseDouble(tpss[0]);\n+                                    }\n                                 }\n                             }\n+                            catch (Exception e) {\n+                            }\n \n                             System.out.printf(\"%-16s  %-32s  %-4s  %-22s %-8d %-8d\\n\",//\n                                 clusterName,//",
      "parent_sha": "7625627b656cd9d610423754c7c3c725c5fdab7a"
    }
  },
  {
    "oid": "d5b4d8431c32e443e2fea3feaed391acecf951eb",
    "message": "Update AsyncTraceDispatcher.java (#4509)\n\nfix issue 4507",
    "date": "2022-06-25T03:50:12Z",
    "url": "https://github.com/apache/rocketmq/commit/d5b4d8431c32e443e2fea3feaed391acecf951eb",
    "details": {
      "sha": "96043db95c7950feb240176686a2a3cf79c4a604",
      "filename": "client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/d5b4d8431c32e443e2fea3feaed391acecf951eb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Ftrace%2FAsyncTraceDispatcher.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/d5b4d8431c32e443e2fea3feaed391acecf951eb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Ftrace%2FAsyncTraceDispatcher.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Ftrace%2FAsyncTraceDispatcher.java?ref=d5b4d8431c32e443e2fea3feaed391acecf951eb",
      "patch": "@@ -165,7 +165,7 @@ private DefaultMQProducer getAndCreateTraceProducer(RPCHook rpcHook) {\n             traceProducerInstance.setSendMsgTimeout(5000);\n             traceProducerInstance.setVipChannelEnabled(false);\n             // The max size of message is 128K\n-            traceProducerInstance.setMaxMessageSize(maxMsgSize - 10 * 1000);\n+            traceProducerInstance.setMaxMessageSize(maxMsgSize);\n         }\n         return traceProducerInstance;\n     }\n@@ -324,7 +324,7 @@ public void addTraceTransferBean(TraceTransferBean traceTransferBean) {\n             initFirstBeanAddTime();\n             this.traceTransferBeanList.add(traceTransferBean);\n             this.currentMsgSize += traceTransferBean.getTransData().length();\n-            if (currentMsgSize >= traceProducer.getMaxMessageSize()) {\n+            if (currentMsgSize >= traceProducer.getMaxMessageSize() - 10 * 1000) {\n                 List<TraceTransferBean> dataToSend = new ArrayList(traceTransferBeanList);\n                 AsyncDataSendTask asyncDataSendTask = new AsyncDataSendTask(traceTopicName, regionId, dataToSend);\n                 traceExecutor.submit(asyncDataSendTask);",
      "parent_sha": "c204199e1d4bcc59985197d084ba7655518a7dd3"
    }
  },
  {
    "oid": "797024f3f8cb51fbe6352832afd38c44f451cf38",
    "message": "fix update user not valid bug (#8926)",
    "date": "2024-11-15T02:35:37Z",
    "url": "https://github.com/apache/rocketmq/commit/797024f3f8cb51fbe6352832afd38c44f451cf38",
    "details": {
      "sha": "ac882e94ab0a31635158a0eac481e66852487028",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/797024f3f8cb51fbe6352832afd38c44f451cf38/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fprocessor%2FAdminBrokerProcessor.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/797024f3f8cb51fbe6352832afd38c44f451cf38/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fprocessor%2FAdminBrokerProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fprocessor%2FAdminBrokerProcessor.java?ref=797024f3f8cb51fbe6352832afd38c44f451cf38",
      "patch": "@@ -3113,7 +3113,7 @@ private RemotingCommand updateUser(ChannelHandlerContext ctx,\n                 if (old.getUserType() == UserType.SUPER && isNotSuperUserLogin(request)) {\n                     throw new AuthenticationException(\"The super user can only be update by super user\");\n                 }\n-                return this.brokerController.getAuthenticationMetadataManager().updateUser(old);\n+                return this.brokerController.getAuthenticationMetadataManager().updateUser(user);\n             }).thenAccept(nil -> response.setCode(ResponseCode.SUCCESS))\n             .exceptionally(ex -> {\n                 LOGGER.error(\"update user {} error\", requestHeader.getUsername(), ex);",
      "parent_sha": "60e68dadd9197730642ce55b1237e6f6f0401aa5"
    }
  },
  {
    "oid": "516e0d727b9efcda7802a0581337f34e71b8fafb",
    "message": "[ISSUE #4936] Remove useless log output after the master and slave broker are started on the empty disk in controller mode (#4944)\n\n* Fix invalid log output after the master and slave broker are started on the empty disk in controller mode\r\n\r\n* Remove useless log output after the master and slave broker are started on the empty disk in controller mode",
    "date": "2022-08-31T08:07:12Z",
    "url": "https://github.com/apache/rocketmq/commit/516e0d727b9efcda7802a0581337f34e71b8fafb",
    "details": {
      "sha": "53b27c6651c27d3baa40af6db177e03b857a5cec",
      "filename": "store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/apache/rocketmq/blob/516e0d727b9efcda7802a0581337f34e71b8fafb/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2Fha%2Fautoswitch%2FAutoSwitchHAConnection.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/516e0d727b9efcda7802a0581337f34e71b8fafb/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2Fha%2Fautoswitch%2FAutoSwitchHAConnection.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2Fha%2Fautoswitch%2FAutoSwitchHAConnection.java?ref=516e0d727b9efcda7802a0581337f34e71b8fafb",
      "patch": "@@ -509,9 +509,16 @@ private boolean handshakeWithSlave() throws IOException {\n \n         // Normal transfer method\n         private void buildTransferHeaderBuffer(long nextOffset, int bodySize) {\n+\n             EpochEntry entry = AutoSwitchHAConnection.this.epochCache.getEntry(AutoSwitchHAConnection.this.currentTransferEpoch);\n+\n             if (entry == null) {\n-                LOGGER.error(\"Failed to find epochEntry with epoch {} when build msg header\", AutoSwitchHAConnection.this.currentTransferEpoch);\n+\n+                // If broker is started on empty disk and no message entered (nextOffset = -1 and currentTransferEpoch = -1), do not output error log when sending heartbeat\n+                if (nextOffset != -1 || currentTransferEpoch != -1 || bodySize > 0) {\n+                    LOGGER.error(\"Failed to find epochEntry with epoch {} when build msg header\", AutoSwitchHAConnection.this.currentTransferEpoch);\n+                }\n+\n                 if (bodySize > 0) {\n                     return;\n                 }",
      "parent_sha": "f1f8bcbc8b3235deed6b6431bf90c063e3c45ea8"
    }
  },
  {
    "oid": "7a5bb64e84b435429d018969c544268fa1d86fc1",
    "message": "\u589e\u52a0consumer\u6d4b\u8bd5\u7528\u4f8b",
    "date": "2013-05-29T10:08:59Z",
    "url": "https://github.com/apache/rocketmq/commit/7a5bb64e84b435429d018969c544268fa1d86fc1",
    "details": {
      "sha": "b4e966017df66dac2c61aeff1b50d29667cde4e1",
      "filename": "rocketmq-example/src/main/java/com/alibaba/rocketmq/example/simple/PullConsumer.java",
      "status": "modified",
      "additions": 86,
      "deletions": 85,
      "changes": 171,
      "blob_url": "https://github.com/apache/rocketmq/blob/7a5bb64e84b435429d018969c544268fa1d86fc1/rocketmq-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fexample%2Fsimple%2FPullConsumer.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/7a5bb64e84b435429d018969c544268fa1d86fc1/rocketmq-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fexample%2Fsimple%2FPullConsumer.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fexample%2Fsimple%2FPullConsumer.java?ref=7a5bb64e84b435429d018969c544268fa1d86fc1",
      "patch": "@@ -1,85 +1,86 @@\n-/**\n- * $Id: PullConsumer.java 1831 2013-05-16 01:39:51Z shijia.wxr $\n- */\n-package com.alibaba.rocketmq.example.simple;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer;\n-import com.alibaba.rocketmq.client.consumer.MQPullConsumer;\n-import com.alibaba.rocketmq.client.consumer.PullResult;\n-import com.alibaba.rocketmq.client.exception.MQBrokerException;\n-import com.alibaba.rocketmq.client.exception.MQClientException;\n-import com.alibaba.rocketmq.common.MessageQueue;\n-import com.alibaba.rocketmq.remoting.exception.RemotingException;\n-\n-\n-/**\n- * \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u03e2\ufffd\ufffd\u02bd\ufffd\ufffdConsumer\n- * \n- * @author shijia.wxr<vintage.wang@gmail.com>\n- * \n- */\n-public class PullConsumer {\n-    private static Map<MessageQueue, Long> offseTable = new HashMap<MessageQueue, Long>();\n-\n-\n-    private static long getMessageQueueOffset(MessageQueue mq) {\n-        Long offset = offseTable.get(mq);\n-        if (offset != null)\n-            return offset;\n-\n-        return 0;\n-    }\n-\n-\n-    private static void putMessageQueueOffset(MessageQueue mq, long offset) {\n-        offseTable.put(mq, offset);\n-    }\n-\n-\n-    public static void main(String[] args) {\n-        try {\n-            MQPullConsumer consumer = new DefaultMQPullConsumer(\"example.consumer.active\");\n-\n-            consumer.start();\n-\n-            List<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues(\"TopicTest\");\n-            for (MessageQueue mq : mqs) {\n-                System.out.println(\"Consume from the queue: \" + mq);\n-                PullResult pullResult = consumer.pullBlockIfNotFound(mq, null, getMessageQueueOffset(mq), 32);\n-                System.out.println(pullResult);\n-                switch (pullResult.getPullStatus()) {\n-                case FOUND:\n-                    break;\n-                case NO_MATCHED_MSG:\n-                    break;\n-                case NO_NEW_MSG:\n-                    break;\n-                case OFFSET_ILLEGAL:\n-                    break;\n-                default:\n-                    break;\n-                }\n-\n-                putMessageQueueOffset(mq, pullResult.getNextBeginOffset());\n-            }\n-\n-            consumer.shutdown();\n-        }\n-        catch (MQClientException e) {\n-            e.printStackTrace();\n-        }\n-        catch (RemotingException e) {\n-            e.printStackTrace();\n-        }\n-        catch (MQBrokerException e) {\n-            e.printStackTrace();\n-        }\n-        catch (InterruptedException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-}\n+/**\r\n+ * $Id: PullConsumer.java 1831 2013-05-16 01:39:51Z shijia.wxr $\r\n+ */\r\n+package com.alibaba.rocketmq.example.simple;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import com.alibaba.rocketmq.client.consumer.DefaultMQPullConsumer;\r\n+import com.alibaba.rocketmq.client.consumer.MQPullConsumer;\r\n+import com.alibaba.rocketmq.client.consumer.PullResult;\r\n+import com.alibaba.rocketmq.client.exception.MQBrokerException;\r\n+import com.alibaba.rocketmq.client.exception.MQClientException;\r\n+import com.alibaba.rocketmq.common.MessageQueue;\r\n+import com.alibaba.rocketmq.remoting.exception.RemotingException;\r\n+\r\n+\r\n+/**\r\n+ * \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u03e2\ufffd\ufffd\u02bd\ufffd\ufffdConsumer\r\n+ * \r\n+ * @author shijia.wxr<vintage.wang@gmail.com>\r\n+ * \r\n+ */\r\n+public class PullConsumer {\r\n+    private static Map<MessageQueue, Long> offseTable = new HashMap<MessageQueue, Long>();\r\n+\r\n+\r\n+    private static long getMessageQueueOffset(MessageQueue mq) {\r\n+        Long offset = offseTable.get(mq);\r\n+        if (offset != null)\r\n+            return offset;\r\n+\r\n+        return 0;\r\n+    }\r\n+\r\n+\r\n+    private static void putMessageQueueOffset(MessageQueue mq, long offset) {\r\n+        offseTable.put(mq, offset);\r\n+    }\r\n+\r\n+\r\n+    public static void main(String[] args) {\r\n+        try {\r\n+            MQPullConsumer consumer = new DefaultMQPullConsumer(\"example.consumer.active\");\r\n+\r\n+            consumer.start();\r\n+\r\n+            List<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues(\"TopicTest\");\r\n+            for (MessageQueue mq : mqs) {\r\n+                System.out.println(\"Consume from the queue: \" + mq);\r\n+                PullResult pullResult = consumer.pullBlockIfNotFound(mq, null, getMessageQueueOffset(mq), 32);\r\n+                System.out.println(pullResult);\r\n+                switch (pullResult.getPullStatus()) {\r\n+                case FOUND:\r\n+                    break;\r\n+                case NO_MATCHED_MSG:\r\n+                    break;\r\n+                case NO_NEW_MSG:\r\n+                    break;\r\n+                case OFFSET_ILLEGAL:\r\n+                    break;\r\n+                default:\r\n+                    break;\r\n+                }\r\n+\r\n+                putMessageQueueOffset(mq, pullResult.getNextBeginOffset());\r\n+            }\r\n+\r\n+            consumer.shutdown();\r\n+        }\r\n+        catch (MQClientException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        catch (RemotingException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        catch (MQBrokerException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        catch (InterruptedException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+    }\r\n+    \r\n+}\r",
      "parent_sha": "5707baeabb9a7d0bac61d336a6be112efc9744b9"
    }
  },
  {
    "oid": "782a69da2c33c9527d84c7d50c8659c80d9e28da",
    "message": "\u53bb\u9664\u4e71\u7801\u7684\u4e2d\u6587\u6ce8\u91ca\u3002",
    "date": "2015-04-01T07:42:02Z",
    "url": "https://github.com/apache/rocketmq/commit/782a69da2c33c9527d84c7d50c8659c80d9e28da",
    "details": {
      "sha": "1deffe3fb8a505a6854f53ca0e0e75dbcf5d00a6",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/AbstractSendMessageProcessor.java",
      "status": "modified",
      "additions": 57,
      "deletions": 72,
      "changes": 129,
      "blob_url": "https://github.com/apache/rocketmq/blob/782a69da2c33c9527d84c7d50c8659c80d9e28da/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FAbstractSendMessageProcessor.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/782a69da2c33c9527d84c7d50c8659c80d9e28da/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FAbstractSendMessageProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FAbstractSendMessageProcessor.java?ref=782a69da2c33c9527d84c7d50c8659c80d9e28da",
      "patch": "@@ -53,8 +53,6 @@\n \n \n /**\n- * \u6fb6\u52ed\u608a\u7039\u3221\u57db\u7ed4\ue21a\u5f42\u95ab\u4f79\u79f7\u93ad\ue21c\u6b91\u7487\u950b\u7730\n- * \n  * @author shijia.wxr<vintage.wang@gmail.com>\n  * @since 2013-7-26\n  */\n@@ -75,22 +73,24 @@ public AbstractSendMessageProcessor(final BrokerController brokerController) {\n     }\n \n \n-   \n+    protected SendMessageContext buildMsgContext(ChannelHandlerContext ctx,\n+            SendMessageRequestHeader requestHeader) {\n+        if (!this.hasSendMessageHook()) {\n+            return null;\n+        }\n+        SendMessageContext mqtraceContext;\n+        mqtraceContext = new SendMessageContext();\n+        mqtraceContext.setProducerGroup(requestHeader.getProducerGroup());\n+        mqtraceContext.setTopic(requestHeader.getTopic());\n+        mqtraceContext.setMsgProps(requestHeader.getProperties());\n+        mqtraceContext.setBornHost(RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        mqtraceContext.setBrokerAddr(this.brokerController.getBrokerAddr());\n+        return mqtraceContext;\n+    }\n+\n \n-\tprotected SendMessageContext buildMsgContext(ChannelHandlerContext ctx, SendMessageRequestHeader requestHeader) {\n-\t\tif (!this.hasSendMessageHook()) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tSendMessageContext mqtraceContext;\n-\t\tmqtraceContext = new SendMessageContext();\n-\t\tmqtraceContext.setProducerGroup(requestHeader.getProducerGroup());\n-\t\tmqtraceContext.setTopic(requestHeader.getTopic());\n-\t\tmqtraceContext.setMsgProps(requestHeader.getProperties());\n-\t\tmqtraceContext.setBornHost(RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n-\t\tmqtraceContext.setBrokerAddr(this.brokerController.getBrokerAddr());\n-\t\treturn mqtraceContext;\n-\t}\n-    protected SendMessageRequestHeader parseRequestHeader(RemotingCommand request) throws RemotingCommandException {\n+    protected SendMessageRequestHeader parseRequestHeader(RemotingCommand request)\n+            throws RemotingCommandException {\n \n         SendMessageRequestHeaderV2 requestHeaderV2 = null;\n         SendMessageRequestHeader requestHeader = null;\n@@ -112,20 +112,17 @@ protected SendMessageRequestHeader parseRequestHeader(RemotingCommand request) t\n             break;\n         }\n         return requestHeader;\n-\t}\n-\n-    protected MessageExtBrokerInner buildInnerMsg(\n-\t\t\tfinal ChannelHandlerContext ctx,\n-\t\t\tfinal SendMessageRequestHeader requestHeader, final byte[] body,\n-\t\t\tTopicConfig topicConfig) {\n-        int queueIdInt=requestHeader.getQueueId();\n-\t\t// \u95c5\u5fd4\u6e80\u93b8\u56e7\u757e\u6d93\ufffd\u6d93\ue048\u69e6\u9352\ufffd\n+    }\n+\n+\n+    protected MessageExtBrokerInner buildInnerMsg(final ChannelHandlerContext ctx,\n+            final SendMessageRequestHeader requestHeader, final byte[] body, TopicConfig topicConfig) {\n+        int queueIdInt = requestHeader.getQueueId();\n         if (queueIdInt < 0) {\n             queueIdInt = Math.abs(this.random.nextInt() % 99999999) % topicConfig.getWriteQueueNums();\n         }\n-\t\tint sysFlag = requestHeader.getSysFlag();\n-\t\t\n-        // \u6fb6\u6c2d\u7223\u7edb\u6350\u7e43\u5a4a\u3089\u6e36\u7455\u4f7a\u7586\u6d63\ufffd\n+        int sysFlag = requestHeader.getSysFlag();\n+\n         if (TopicFilterType.MULTI_TAG == topicConfig.getTopicFilterType()) {\n             sysFlag |= MessageSysFlag.MultiTagsFlag;\n         }\n@@ -147,42 +144,44 @@ protected MessageExtBrokerInner buildInnerMsg(\n         msgInner.setStoreHost(this.getStoreHost());\n         msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == null ? 0 : requestHeader\n             .getReconsumeTimes());\n-\t\treturn msgInner;\n-\t}\n-    protected RemotingCommand msgContentCheck(final ChannelHandlerContext ctx,final SendMessageRequestHeader requestHeader,RemotingCommand request,\n-\t\t\tfinal RemotingCommand response) {\n-        // message topic\u957f\u5ea6\u6821\u9a8c\n+        return msgInner;\n+    }\n+\n+\n+    protected RemotingCommand msgContentCheck(final ChannelHandlerContext ctx,\n+            final SendMessageRequestHeader requestHeader, RemotingCommand request,\n+            final RemotingCommand response) {\n         if (requestHeader.getTopic().length() > Byte.MAX_VALUE) {\n             log.warn(\"putMessage message topic length too long \" + requestHeader.getTopic().length());\n             response.setCode(ResponseCode.MESSAGE_ILLEGAL);\n             return response;\n         }\n-        // message properties\u957f\u5ea6\u6821\u9a8c\n         if (requestHeader.getProperties() != null && requestHeader.getProperties().length() > Short.MAX_VALUE) {\n-            log.warn(\"putMessage message properties length too long \" + requestHeader.getProperties().length());\n+            log.warn(\"putMessage message properties length too long \"\n+                    + requestHeader.getProperties().length());\n             response.setCode(ResponseCode.MESSAGE_ILLEGAL);\n             return response;\n         }\n         if (request.getBody().length > DBMsgConstants.maxBodySize) {\n-            log.warn(\" topic {}  msg body size {}  from {}\", requestHeader.getTopic(), request.getBody().length, ChannelUtil.getRemoteIp(ctx.channel()));\n+            log.warn(\" topic {}  msg body size {}  from {}\", requestHeader.getTopic(),\n+                request.getBody().length, ChannelUtil.getRemoteIp(ctx.channel()));\n             response.setRemark(\"msg body must be less 64KB\");\n             response.setCode(ResponseCode.MESSAGE_ILLEGAL);\n             return response;\n         }\n         return response;\n     }\n \n-\tprotected RemotingCommand msgCheck(final ChannelHandlerContext ctx,final SendMessageRequestHeader requestHeader,\n-\t\t\tfinal RemotingCommand response) {\n-\t\t// \u59ab\ufffd\u93cc\ue648roker\u93c9\u51ae\u6aba, \u6924\u54c4\u7c2d\u5a11\u581f\u4f05\u7ec2\u4f78\u5553\u951b\u6da2\u6f6a\u6924\u54c4\u7c2d\u5a11\u581f\u4f05\u95ab\u6c33\u7e43 nameserver \u95ab\u6c31\u7161\u7039\u3221\u57db\u7ed4\ue21a\u58a7\u95c4\u3087\ue6e6\u9350\u6b0f\u578e\u9356\ufffd\n+\n+    protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,\n+            final SendMessageRequestHeader requestHeader, final RemotingCommand response) {\n         if (!PermName.isWriteable(this.brokerController.getBrokerConfig().getBrokerPermission())\n                 && this.brokerController.getTopicConfigManager().isOrderTopic(requestHeader.getTopic())) {\n             response.setCode(ResponseCode.NO_PERMISSION);\n             response.setRemark(\"the broker[\" + this.brokerController.getBrokerConfig().getBrokerIP1()\n                     + \"] sending message is forbidden\");\n             return response;\n         }\n-        // Topic\u935a\u5d85\u74e7\u93c4\ue21a\u60c1\u6d93\u5e9d\u7e5a\u9423\u6b0f\u74e7\u5a08\u975b\u557f\u7ed0\ufffd\n         if (!this.brokerController.getTopicConfigManager().isTopicCanSendMessage(requestHeader.getTopic())) {\n             String errorMsg =\n                     \"the topic[\" + requestHeader.getTopic() + \"] is conflict with system reserved words.\";\n@@ -192,11 +191,9 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,final SendMes\n             return response;\n         }\n \n-        // \u59ab\ufffd\u93cc\ue67aopic\u93c4\ue21a\u60c1\u701b\u6a3a\u6e6a\n         TopicConfig topicConfig =\n                 this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());\n         if (null == topicConfig) {\n-            // \u6fe1\u509b\u7049\u93c4\ue21a\u5d1f\u934f\u51a8\u5bf2\u59af\u2033\u7d21\u951b\u5c7d\u57af\u7035\ufffd topic \u6769\u6d9c\ue511\u7481\u5267\u7586\n             int topicSysFlag = 0;\n             if (requestHeader.isUnitMode()) {\n                 if (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n@@ -215,7 +212,6 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,final SendMes\n                 RemotingHelper.parseChannelRemoteAddr(ctx.channel()), //\n                 requestHeader.getDefaultTopicQueueNums(), topicSysFlag);\n \n-            // \u704f\u6fca\u762f\u942a\u5b29\u7b05\u93c4\ue21a\u60c1\u93c4\ue21a\u3051\u7490\u30e6\u79f7\u93ad\ue21a\u5f42\u9365\ufffd\n             if (null == topicConfig) {\n                 if (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n                     topicConfig =\n@@ -233,18 +229,6 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,final SendMes\n             }\n         }\n \n-        /**\n-         * Broker\u93c8\ue103\u97e9\u6d93\u5d85\u4edbTopic\u9428\u52ec\u6f48\u95c4\u6130\u7359\u7487\u4f8a\u7d1d\u9422\u76e2ame Server\u7490\u71bb\u77d7\u95ab\u6c31\u7161Client\u6fb6\u52ed\u608a\n-         */\n-        // // \u59ab\ufffd\u93cc\ue67aopic\u93c9\u51ae\u6aba\n-        // if (!PermName.isWriteable(topicConfig.getPerm())) {\n-        // response.setCode(ResponseCode.NO_PERMISSION);\n-        // response.setRemark(\"the topic[\" + requestHeader.getOriginTopic() +\n-        // \"] sending message is forbidden\");\n-        // return response;\n-        // }\n-\n-        // \u59ab\ufffd\u93cc\u30e9\u69e6\u9352\u6941\u6e41\u93c1\u581f\ufffd\ufffd\n         int queueIdInt = requestHeader.getQueueId();\n         int idValid = Math.max(topicConfig.getWriteQueueNums(), topicConfig.getReadQueueNums());\n         if (queueIdInt >= idValid) {\n@@ -260,16 +244,13 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,final SendMes\n             return response;\n         }\n         return response;\n-\t}\n+    }\n \n \n     public SocketAddress getStoreHost() {\n         return storeHost;\n     }\n \n-    /**\n-     * \u9359\u6226\ufffd\u4f79\u7621\u93c9\u2103\u79f7\u93ad\ue219\u7d30\u9365\u70b6\u769f\n-     */\n     private List<SendMessageHook> sendMessageHookList;\n \n \n@@ -281,17 +262,22 @@ public boolean hasSendMessageHook() {\n     public void registerSendMessageHook(List<SendMessageHook> sendMessageHookList) {\n         this.sendMessageHookList = sendMessageHookList;\n     }\n-\tprotected void doResponse(ChannelHandlerContext ctx, RemotingCommand request, final RemotingCommand response) {\n-\t\tif (!request.isOnewayRPC()) {\n-\t\t\ttry {\n-\t\t\t\tctx.writeAndFlush(response);\n-\t\t\t} catch (Throwable e) {\n-\t\t\t\tlog.error(\"SendMessageProcessor process request over, but response failed\", e);\n-\t\t\t\tlog.error(request.toString());\n-\t\t\t\tlog.error(response.toString());\n-\t\t\t}\n-\t\t}\n-\t}\n+\n+\n+    protected void doResponse(ChannelHandlerContext ctx, RemotingCommand request,\n+            final RemotingCommand response) {\n+        if (!request.isOnewayRPC()) {\n+            try {\n+                ctx.writeAndFlush(response);\n+            }\n+            catch (Throwable e) {\n+                log.error(\"SendMessageProcessor process request over, but response failed\", e);\n+                log.error(request.toString());\n+                log.error(response.toString());\n+            }\n+        }\n+    }\n+\n \n     public void executeSendMessageHookBefore(final ChannelHandlerContext ctx, final RemotingCommand request,\n             SendMessageContext context) {\n@@ -334,11 +320,10 @@ public void executeSendMessageHookAfter(final RemotingCommand response, final Se\n                     hook.sendMessageAfter(context);\n                 }\n                 catch (Throwable e) {\n-                \t\n+\n                 }\n             }\n         }\n     }\n \n-   \n }",
      "parent_sha": "655fee0bd77c63718d36692f42f907fe76be6d3b"
    }
  },
  {
    "oid": "d606fd07deff8f797c88725ac6070a3f2683cbed",
    "message": "#4 \u4fee\u6539\u6536\u53d1\u6d88\u606f\u7ebf\u7a0b\u6570\n    private int sendMessageThreadPoolNums = 32 + Runtime.getRuntime().availableProcessors() * 4;\n    private int pullMessageThreadPoolNums = 32 + Runtime.getRuntime().availableProcessors() * 4;",
    "date": "2013-07-06T07:38:40Z",
    "url": "https://github.com/apache/rocketmq/commit/d606fd07deff8f797c88725ac6070a3f2683cbed",
    "details": {
      "sha": "d4129213d496cd5f5918ef306dc07fd0c81081bd",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/BrokerConfig.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/d606fd07deff8f797c88725ac6070a3f2683cbed/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FBrokerConfig.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/d606fd07deff8f797c88725ac6070a3f2683cbed/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FBrokerConfig.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FBrokerConfig.java?ref=d606fd07deff8f797c88725ac6070a3f2683cbed",
      "patch": "@@ -35,8 +35,8 @@ public class BrokerConfig {\n     // \ufffd\u0536\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u9e66\ufffd\ufffd\ufffd\u01f7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u03fd\ufffd\ufffd\ufffd\u0631\u0563\ufffd\n     private boolean autoCreateSubscriptionGroup = true;\n \n-    private int sendMessageThreadPoolNums = Runtime.getRuntime().availableProcessors() * 6;\n-    private int pullMessageThreadPoolNums = Runtime.getRuntime().availableProcessors() * 6;\n+    private int sendMessageThreadPoolNums = 32 + Runtime.getRuntime().availableProcessors() * 4;\n+    private int pullMessageThreadPoolNums = 32 + Runtime.getRuntime().availableProcessors() * 4;\n     private int adminBrokerThreadPoolNums = 8;\n \n     private String topicConfigPath = System.getProperty(\"user.home\") + File.separator + \"store\"",
      "parent_sha": "576ebfe8b74964d3a4d9f9a3519ad890a3a09216"
    }
  },
  {
    "oid": "3ac5c73cd1fbd715525bff6e6aa9f4bfe768ca30",
    "message": "[ISSUE #8281] Optimize pop log level (#8282)\n\n* change pop log level to debug when all the revive messages are handled",
    "date": "2024-06-13T06:48:12Z",
    "url": "https://github.com/apache/rocketmq/commit/3ac5c73cd1fbd715525bff6e6aa9f4bfe768ca30",
    "details": {
      "sha": "e3ba492f2805a530a95288a8ed4ad1106056723b",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/3ac5c73cd1fbd715525bff6e6aa9f4bfe768ca30/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fprocessor%2FPopReviveService.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/3ac5c73cd1fbd715525bff6e6aa9f4bfe768ca30/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fprocessor%2FPopReviveService.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fprocessor%2FPopReviveService.java?ref=3ac5c73cd1fbd715525bff6e6aa9f4bfe768ca30",
      "patch": "@@ -322,7 +322,7 @@ protected void consumeReviveMessage(ConsumeReviveObj consumeReviveObj) {\n                 if (endTime != 0 && System.currentTimeMillis() - endTime > 3 * PopAckConstants.SECOND && timerDelay <= 0 && commitLogDelay <= 0) {\n                     endTime = System.currentTimeMillis();\n                 }\n-                POP_LOGGER.info(\"reviveQueueId={}, offset is {}, can not get new msg, old endTime {}, new endTime {}, timerDelay={}, commitLogDelay={} \",\n+                POP_LOGGER.debug(\"reviveQueueId={}, offset is {}, can not get new msg, old endTime {}, new endTime {}, timerDelay={}, commitLogDelay={} \",\n                     queueId, offset, old, endTime, timerDelay, commitLogDelay);\n                 if (endTime - firstRt > PopAckConstants.ackTimeInterval + PopAckConstants.SECOND) {\n                     break;\n@@ -528,7 +528,7 @@ private void reviveMsgFromCk(PopCheckPoint popCheckPoint) {\n                     GetMessageStatus getMessageStatus = resultPair.getObject1();\n                     MessageExt message = resultPair.getObject2();\n                     if (message == null) {\n-                        POP_LOGGER.warn(\"reviveQueueId={}, can not get biz msg topic is {}, offset is {}, then continue\",\n+                        POP_LOGGER.debug(\"reviveQueueId={}, can not get biz msg topic is {}, offset is {}, then continue\",\n                             queueId, popCheckPoint.getTopic(), msgOffset);\n                         switch (getMessageStatus) {\n                             case MESSAGE_WAS_REMOVING:",
      "parent_sha": "017b7537d2d02fc9a5815eac1f19b8060003fcf4"
    }
  },
  {
    "oid": "75bcb6a59b4d9b36260ae3d392067d2ae46638cf",
    "message": "\u589e\u52a0\u6ce8\u91ca",
    "date": "2014-06-24T13:06:16Z",
    "url": "https://github.com/apache/rocketmq/commit/75bcb6a59b4d9b36260ae3d392067d2ae46638cf",
    "details": {
      "sha": "cffc3687e4d4c94dcc80b5d7f38e0552b25a0773",
      "filename": "rocketmq-store/src/main/java/com/alibaba/rocketmq/store/CommitLog.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/75bcb6a59b4d9b36260ae3d392067d2ae46638cf/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FCommitLog.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/75bcb6a59b4d9b36260ae3d392067d2ae46638cf/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FCommitLog.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FCommitLog.java?ref=75bcb6a59b4d9b36260ae3d392067d2ae46638cf",
      "patch": "@@ -597,7 +597,7 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n                 // XXX: warn and notify me\n                 log.warn(\"putMessage in lock eclipse time(ms) \" + eclipseTime);\n             }\n-        }\n+        } // end of synchronized\n \n         // \u8fd4\u56de\u7ed3\u679c\n         PutMessageResult putMessageResult = new PutMessageResult(PutMessageStatus.PUT_OK, result);",
      "parent_sha": "bce7df82c29c88656def61b6a8d476c33517acb6"
    }
  },
  {
    "oid": "389d5ca009fe2492b53bf5cf30bf78739c205d28",
    "message": "#272 load\u4e4b\u524d\u542f\u52a8IndexService",
    "date": "2013-10-20T15:30:37Z",
    "url": "https://github.com/apache/rocketmq/commit/389d5ca009fe2492b53bf5cf30bf78739c205d28",
    "details": {
      "sha": "a0ed716dc379745f974ff175be622641194bcbf0",
      "filename": "rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/apache/rocketmq/blob/389d5ca009fe2492b53bf5cf30bf78739c205d28/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/389d5ca009fe2492b53bf5cf30bf78739c205d28/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java?ref=389d5ca009fe2492b53bf5cf30bf78739c205d28",
      "patch": "@@ -186,6 +186,9 @@ public boolean load() {\n \n                 this.indexService.load(lastExitOK);\n \n+                // \u56e0\u4e3a\u4e0b\u9762\u7684recover\u4f1a\u5206\u53d1\u8bf7\u6c42\u5230\u7d22\u5f15\u670d\u52a1\uff0c\u5982\u679c\u4e0d\u542f\u52a8\uff0c\u5206\u53d1\u8fc7\u7a0b\u4f1a\u88ab\u6d41\u63a7\n+                this.indexService.start();\n+\n                 // \u5c1d\u8bd5\u6062\u590d\u6570\u636e\n                 this.recover(lastExitOK);\n \n@@ -213,7 +216,9 @@ public boolean load() {\n     public void start() throws Exception {\n         this.cleanCommitLogService.start();\n         this.cleanConsumeQueueService.start();\n-        this.indexService.start();\n+\n+        // \u5728load\u65b9\u6cd5\u4e2d\u5df2\u7ecfstart\u4e86\n+        // this.indexService.start();\n         // \u5728\u6784\u9020\u51fd\u6570\u5df2\u7ecfstart\u4e86\u3002\n         // this.dispatchMessageService.start();\n         this.flushConsumeQueueService.start();",
      "parent_sha": "1a78e06564d410f094d29d1c11b30408ddfc5428"
    }
  },
  {
    "oid": "07478ca1c471a951a93ccfe09f964656c4938845",
    "message": "[ISSUE #9331] Found one info log lose parameters during proxy startup (#9332)",
    "date": "2025-04-16T03:25:02Z",
    "url": "https://github.com/apache/rocketmq/commit/07478ca1c471a951a93ccfe09f964656c4938845",
    "details": {
      "sha": "50c1b57d80d26ff29db3c53f50b3d4e06dcc7d79",
      "filename": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/GrpcServerBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/07478ca1c471a951a93ccfe09f964656c4938845/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2FGrpcServerBuilder.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/07478ca1c471a951a93ccfe09f964656c4938845/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2FGrpcServerBuilder.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2FGrpcServerBuilder.java?ref=07478ca1c471a951a93ccfe09f964656c4938845",
      "patch": "@@ -75,9 +75,7 @@ protected GrpcServerBuilder(ThreadPoolExecutor executor, int port) {\n         serverBuilder.maxInboundMessageSize(maxInboundMessageSize)\n                 .maxConnectionIdle(idleTimeMills, TimeUnit.MILLISECONDS);\n \n-        log.info(\n-            \"grpc server has built. port: {}, tlsKeyPath: {}, tlsCertPath: {}, threadPool: {}, queueCapacity: {}, \"\n-                + \"boosLoop: {}, workerLoop: {}, maxInboundMessageSize: {}\",\n+        log.info(\"grpc server has built. port: {}, bossLoopNum: {}, workerLoopNum: {}, maxInboundMessageSize: {}\",\n             port, bossLoopNum, workerLoopNum, maxInboundMessageSize);\n     }\n ",
      "parent_sha": "775eb64b877f6eb20b76e02e78c3ea14119806d9"
    }
  },
  {
    "oid": "b3ab98db9c6407cf9cf97796a4df5a000011638e",
    "message": "fixed #179 \u4fee\u590dcloneOffsetTable\u4e00\u5904bug\uff0c\u8fd9\u4e2abug\u5bfc\u81f4Broker\u65e0\u6cd5\u6b63\u5e38\u6253\u5370\u5404\u4e2a\u8ba2\u9605\u7ec4\u7684\u6d88\u8d39TPS\uff0c@bitisony Thankyou",
    "date": "2013-07-29T11:20:19Z",
    "url": "https://github.com/apache/rocketmq/commit/b3ab98db9c6407cf9cf97796a4df5a000011638e",
    "details": {
      "sha": "e404d51f9b62c16168005cc5b964403836b160fc",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/offset/ConsumerOffsetManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/b3ab98db9c6407cf9cf97796a4df5a000011638e/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Foffset%2FConsumerOffsetManager.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/b3ab98db9c6407cf9cf97796a4df5a000011638e/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Foffset%2FConsumerOffsetManager.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Foffset%2FConsumerOffsetManager.java?ref=b3ab98db9c6407cf9cf97796a4df5a000011638e",
      "patch": "@@ -66,7 +66,7 @@ private static ConcurrentHashMap<String, ConcurrentHashMap<Integer, Long>> clone\n                     Long offset = map.get(queueId);\n                     Integer queueIdNew = new Integer(queueId.intValue());\n                     Long offsetNew = new Long(offset.longValue());\n-                    map.put(queueIdNew, offsetNew);\n+                    mapNew.put(queueIdNew, offsetNew);\n                 }\n \n                 String topicgroupNew = new String(topicgroup);",
      "parent_sha": "bf31ee195119660991a473ed36d44c50f645ea12"
    }
  },
  {
    "oid": "de1867dd7b15e9db0e131e173c6485355b7ee687",
    "message": "#1 \u5f00\u53d1push consumer\uff0cRebalance\u5b8c\u6210\u540e\uff0c\u7acb\u523b\u6267\u884cpull\u64cd\u4f5c",
    "date": "2013-06-13T07:52:25Z",
    "url": "https://github.com/apache/rocketmq/commit/de1867dd7b15e9db0e131e173c6485355b7ee687",
    "details": {
      "sha": "2ff9882945dd8406104b13a8a35c79c4d898fea3",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/rocketmq/blob/de1867dd7b15e9db0e131e173c6485355b7ee687/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FDefaultMQPushConsumerImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/de1867dd7b15e9db0e131e173c6485355b7ee687/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FDefaultMQPushConsumerImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FDefaultMQPushConsumerImpl.java?ref=de1867dd7b15e9db0e131e173c6485355b7ee687",
      "patch": "@@ -481,7 +481,6 @@ private void updateProcessQueueTableInRebalance(final String topic, final Set<Me\n \n         // \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0136\ufffd\ufffd\ufffd\n         List<PullRequest> pullRequestList = new ArrayList<PullRequest>();\n-\n         for (MessageQueue mq : mqSet) {\n             ProcessQueue pq = this.processQueueTable.get(mq);\n             if (null == pq) {\n@@ -492,12 +491,17 @@ private void updateProcessQueueTableInRebalance(final String topic, final Set<Me\n \n                 // TODO \ufffd\ufffd\ufffd\ufffd\ufffd\u04aa\ufffd\ufffd\ufffd\u0772\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n                 pullRequest.setNextOffset(0L);\n-\n+                pullRequestList.add(pullRequest);\n                 this.processQueueTable.put(mq, pullRequest.getProcessQueue());\n                 log.info(\"[{}] doRebalance, add a new mq, {}\", this.defaultMQPushConsumer.getConsumerGroup(), mq);\n             }\n         }\n \n+        // \ufffd\u0277\ufffdPullRequest\n+        for (PullRequest pullRequest : pullRequestList) {\n+            this.executePullRequestImmediately(pullRequest);\n+            log.info(\"add a new pull request {}\", pullRequest);\n+        }\n     }\n \n ",
      "parent_sha": "be0798f8c4c956a5c8a2d714e1d6740fa6b07b4b"
    }
  },
  {
    "oid": "9563683c2d70c17e5b88f49cf4043949905678ee",
    "message": "[ISSUE #4155] fix acl test",
    "date": "2022-04-13T01:14:28Z",
    "url": "https://github.com/apache/rocketmq/commit/9563683c2d70c17e5b88f49cf4043949905678ee",
    "details": {
      "sha": "739f4d2cf369c51b3eb970db48c18c567839de40",
      "filename": "acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessValidatorTest.java",
      "status": "modified",
      "additions": 20,
      "deletions": 14,
      "changes": 34,
      "blob_url": "https://github.com/apache/rocketmq/blob/9563683c2d70c17e5b88f49cf4043949905678ee/acl%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainAccessValidatorTest.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/9563683c2d70c17e5b88f49cf4043949905678ee/acl%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainAccessValidatorTest.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainAccessValidatorTest.java?ref=9563683c2d70c17e5b88f49cf4043949905678ee",
      "patch": "@@ -16,18 +16,6 @@\n  */\n package org.apache.rocketmq.acl.plain;\n \n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n import org.apache.rocketmq.acl.common.AclClientRPCHook;\n import org.apache.rocketmq.acl.common.AclConstants;\n import org.apache.rocketmq.acl.common.AclException;\n@@ -56,6 +44,19 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n public class PlainAccessValidatorTest {\n \n     private PlainAccessValidator plainAccessValidator;\n@@ -906,15 +907,20 @@ public void updateAccessConfigEmptyWhiteRemoteAddressTest() {\n \n     @Test\n     public void deleteAccessAclToEmptyTest() {\n-        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/empty.yml\");\n+        final String bakAclFileProp = System.getProperty(\"rocketmq.acl.plain.file\");\n+        System.setProperty(\"rocketmq.acl.plain.file\", \"conf/empty.yml\");\n         PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n         plainAccessConfig.setAccessKey(\"deleteAccessAclToEmpty\");\n         plainAccessConfig.setSecretKey(\"12345678\");\n \n         PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n         plainAccessValidator.updateAccessConfig(plainAccessConfig);\n         boolean success = plainAccessValidator.deleteAccessConfig(\"deleteAccessAclToEmpty\");\n-        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl.yml\");\n+        if (null != bakAclFileProp) {\n+            System.setProperty(\"rocketmq.acl.plain.file\", bakAclFileProp);\n+        } else {\n+            System.clearProperty(\"rocketmq.acl.plain.file\");\n+        }\n         Assert.assertTrue(success);\n     }\n ",
      "parent_sha": "ead6274b3e8016ee2fa75cf0dc201b5581ee7a34"
    }
  },
  {
    "oid": "a9b21a4db0dc75b0523b6ba8e410e228050e8f89",
    "message": "#227 SendResult\u4e2d\u6e05\u9664 projectGroup \u4fe1\u606f\u3002",
    "date": "2013-08-28T15:29:13Z",
    "url": "https://github.com/apache/rocketmq/commit/a9b21a4db0dc75b0523b6ba8e410e228050e8f89",
    "details": {
      "sha": "b1787f38978073929b2f3190bf9dd34b3d3a7e3c",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/producer/SendResult.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/apache/rocketmq/blob/a9b21a4db0dc75b0523b6ba8e410e228050e8f89/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fproducer%2FSendResult.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/a9b21a4db0dc75b0523b6ba8e410e228050e8f89/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fproducer%2FSendResult.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fproducer%2FSendResult.java?ref=a9b21a4db0dc75b0523b6ba8e410e228050e8f89",
      "patch": "@@ -15,6 +15,8 @@\n  */\n package com.alibaba.rocketmq.client.producer;\n \n+import com.alibaba.rocketmq.client.VirtualEnvUtil;\n+import com.alibaba.rocketmq.common.UtilALl;\n import com.alibaba.rocketmq.common.message.MessageQueue;\n \n \n@@ -35,11 +37,17 @@ public SendResult() {\n     }\n \n \n-    public SendResult(SendStatus sendStatus, String msgId, MessageQueue messageQueue, long queueOffset) {\n+    public SendResult(SendStatus sendStatus, String msgId, MessageQueue messageQueue, long queueOffset,\n+            String projectGroupPrefix) {\n         this.sendStatus = sendStatus;\n         this.msgId = msgId;\n         this.messageQueue = messageQueue;\n         this.queueOffset = queueOffset;\n+\t    // \u6e05\u9664\u865a\u62df\u8fd0\u884c\u73af\u5883\u76f8\u5173\u7684projectGroupPrefix\n+        if (!UtilALl.isBlank(projectGroupPrefix)) {\n+            this.messageQueue.setTopic(VirtualEnvUtil.clearProjectGroup(this.messageQueue.getTopic(),\n+                projectGroupPrefix));\n+        }\n     }\n \n ",
      "parent_sha": "05946400864b9085d4d7d45b4347d5f608ba440a"
    }
  },
  {
    "oid": "0767a9d5f926f6295509e409228b4d95e8094cb5",
    "message": "\u4fee\u590dissue556 EpollEventLoopGroup\u542f\u52a8\u5931\u8d25\u7684bug",
    "date": "2019-01-15T13:28:33Z",
    "url": "https://github.com/apache/rocketmq/commit/0767a9d5f926f6295509e409228b4d95e8094cb5",
    "details": {
      "sha": "c9691bada06b101191682de28db341ac68331b3d",
      "filename": "remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java",
      "status": "modified",
      "additions": 17,
      "deletions": 8,
      "changes": 25,
      "blob_url": "https://github.com/apache/rocketmq/blob/0767a9d5f926f6295509e409228b4d95e8094cb5/remoting%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingServer.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/0767a9d5f926f6295509e409228b4d95e8094cb5/remoting%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingServer.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/remoting%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingServer.java?ref=0767a9d5f926f6295509e409228b4d95e8094cb5",
      "patch": "@@ -108,16 +108,16 @@ public Thread newThread(Runnable r) {\n             }\n         });\n \n-        this.eventLoopGroupBoss = new NioEventLoopGroup(1, new ThreadFactory() {\n-            private AtomicInteger threadIndex = new AtomicInteger(0);\n+        if (useEpoll()) {\n+            this.eventLoopGroupBoss = new EpollEventLoopGroup(1, new ThreadFactory() {\n+                private AtomicInteger threadIndex = new AtomicInteger(0);\n \n-            @Override\n-            public Thread newThread(Runnable r) {\n-                return new Thread(r, String.format(\"NettyBoss_%d\", this.threadIndex.incrementAndGet()));\n-            }\n-        });\n+                @Override\n+                public Thread newThread(Runnable r) {\n+                    return new Thread(r, String.format(\"NettyEPOLLBoss_%d\", this.threadIndex.incrementAndGet()));\n+                }\n+            });\n \n-        if (useEpoll()) {\n             this.eventLoopGroupSelector = new EpollEventLoopGroup(nettyServerConfig.getServerSelectorThreads(), new ThreadFactory() {\n                 private AtomicInteger threadIndex = new AtomicInteger(0);\n                 private int threadTotal = nettyServerConfig.getServerSelectorThreads();\n@@ -128,6 +128,15 @@ public Thread newThread(Runnable r) {\n                 }\n             });\n         } else {\n+            this.eventLoopGroupBoss = new NioEventLoopGroup(1, new ThreadFactory() {\n+                private AtomicInteger threadIndex = new AtomicInteger(0);\n+\n+                @Override\n+                public Thread newThread(Runnable r) {\n+                    return new Thread(r, String.format(\"NettyNIOBoss_%d\", this.threadIndex.incrementAndGet()));\n+                }\n+            });\n+\n             this.eventLoopGroupSelector = new NioEventLoopGroup(nettyServerConfig.getServerSelectorThreads(), new ThreadFactory() {\n                 private AtomicInteger threadIndex = new AtomicInteger(0);\n                 private int threadTotal = nettyServerConfig.getServerSelectorThreads();",
      "parent_sha": "d434a3afb39c0c0c20fcd663368b8d4a90c3fcd3"
    }
  },
  {
    "oid": "7107040e1f177f858cda2b81305fff97f4dbae24",
    "message": "\u9488\u5bf9\u53d1\u9001\u5931\u8d25\u7684\u6d88\u606f\uff0c\u7edf\u8ba1\u65f6\uff0c\u7ea0\u6b63Topic",
    "date": "2014-07-01T08:48:03Z",
    "url": "https://github.com/apache/rocketmq/commit/7107040e1f177f858cda2b81305fff97f4dbae24",
    "details": {
      "sha": "0210b810ca0851c7c56e5d3a953d040b78cd22b8",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/SendMessageProcessor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/apache/rocketmq/blob/7107040e1f177f858cda2b81305fff97f4dbae24/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FSendMessageProcessor.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/7107040e1f177f858cda2b81305fff97f4dbae24/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FSendMessageProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FSendMessageProcessor.java?ref=7107040e1f177f858cda2b81305fff97f4dbae24",
      "patch": "@@ -204,8 +204,13 @@ private RemotingCommand consumerSendMsgBack(final ChannelHandlerContext ctx, fin\n             switch (putMessageResult.getPutMessageStatus()) {\n             case PUT_OK:\n                 // \u7edf\u8ba1\n+                String backTopic = msgExt.getTopic();\n+                String realTopic = msgExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);\n+                if (backTopic != null) {\n+                    backTopic = realTopic;\n+                }\n                 this.brokerController.getBrokerStatsManager().incSendBackNums(requestHeader.getGroup(),\n-                    msgExt.getTopic());\n+                    backTopic);\n \n                 response.setCode(ResponseCode.SUCCESS);\n                 response.setRemark(null);",
      "parent_sha": "6715218fe95405bdfc5776f753480e8b6b93e67c"
    }
  },
  {
    "oid": "6775f52e5c6179e750476dfef519a958b5973d58",
    "message": "\u4fee\u6539\u5b58\u50a8\u5c42\u914d\u7f6e\uff0c\u5b9a\u65f6\u5237\u76d8\u4f5c\u4e3a\u91cd\u8981\u914d\u7f6e\u6253\u5370",
    "date": "2014-06-07T04:37:57Z",
    "url": "https://github.com/apache/rocketmq/commit/6775f52e5c6179e750476dfef519a958b5973d58",
    "details": {
      "sha": "3273429d501ae94fe6c7e53f6e01308ec8fc6fbf",
      "filename": "rocketmq-store/src/main/java/com/alibaba/rocketmq/store/config/MessageStoreConfig.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/6775f52e5c6179e750476dfef519a958b5973d58/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2Fconfig%2FMessageStoreConfig.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/6775f52e5c6179e750476dfef519a958b5973d58/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2Fconfig%2FMessageStoreConfig.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2Fconfig%2FMessageStoreConfig.java?ref=6775f52e5c6179e750476dfef519a958b5973d58",
      "patch": "@@ -43,8 +43,10 @@ public class MessageStoreConfig {\n     // ConsumeQueue\u6bcf\u4e2a\u6587\u4ef6\u5927\u5c0f \u9ed8\u8ba4\u5b58\u50a830W\u6761\u6d88\u606f\n     private int mapedFileSizeConsumeQueue = 300000 * ConsumeQueue.CQStoreUnitSize;\n     // CommitLog\u5237\u76d8\u95f4\u9694\u65f6\u95f4\uff08\u5355\u4f4d\u6beb\u79d2\uff09\n+    @ImportantField\n     private int flushIntervalCommitLog = 1000;\n     // \u662f\u5426\u5b9a\u65f6\u65b9\u5f0f\u5237\u76d8\uff0c\u9ed8\u8ba4\u662f\u5b9e\u65f6\u5237\u76d8\n+    @ImportantField\n     private boolean flushCommitLogTimed = false;\n     // ConsumeQueue\u5237\u76d8\u95f4\u9694\u65f6\u95f4\uff08\u5355\u4f4d\u6beb\u79d2\uff09\n     private int flushIntervalConsumeQueue = 1000;\n@@ -65,7 +67,7 @@ public class MessageStoreConfig {\n     private int diskMaxUsedSpaceRatio = 75;\n     // \u6587\u4ef6\u4fdd\u7559\u65f6\u95f4\uff08\u5355\u4f4d\u5c0f\u65f6\uff09\n     @ImportantField\n-    private int fileReservedTime = 48;\n+    private int fileReservedTime = 72;\n     // \u5199\u6d88\u606f\u7d22\u5f15\u5230ConsumeQueue\uff0c\u7f13\u51b2\u533a\u9ad8\u6c34\u4f4d\uff0c\u8d85\u8fc7\u5219\u5f00\u59cb\u6d41\u63a7\n     private int putMsgIndexHightWater = 600000;\n     // \u6700\u5927\u6d88\u606f\u5927\u5c0f\uff0c\u9ed8\u8ba4512K",
      "parent_sha": "e84e68a6edfa883e1f7751057ecef2b5222dd510"
    }
  },
  {
    "oid": "0708c0e7e088bd80244b4e6e348030e5baa596d5",
    "message": "Issue #147 benchmark \u6dfb\u52a0\u6307\u5b9a group",
    "date": "2016-10-31T05:49:05Z",
    "url": "https://github.com/apache/rocketmq/commit/0708c0e7e088bd80244b4e6e348030e5baa596d5",
    "details": {
      "sha": "31c9f257f8c6bf58c1f6f86ceb7c0d1f3da11916",
      "filename": "rocketmq-example/src/main/java/com/alibaba/rocketmq/example/benchmark/Consumer.java",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/apache/rocketmq/blob/0708c0e7e088bd80244b4e6e348030e5baa596d5/rocketmq-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fexample%2Fbenchmark%2FConsumer.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/0708c0e7e088bd80244b4e6e348030e5baa596d5/rocketmq-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fexample%2Fbenchmark%2FConsumer.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fexample%2Fbenchmark%2FConsumer.java?ref=0708c0e7e088bd80244b4e6e348030e5baa596d5",
      "patch": "@@ -45,8 +45,10 @@ public static void main(String[] args) throws MQClientException {\n         }\n \n         final String topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : \"BenchmarkTest\";\n+        final String groupPrefix = commandLine.hasOption('g') ? commandLine.getOptionValue('g').trim() : \"benchmark_consumer\";\n+        final String group = groupPrefix + \"_\" + Long.toString(System.currentTimeMillis() % 100);\n \n-        System.out.printf(\"topic %s%n\", topic);\n+        System.out.printf(\"topic %s group %s %n\", topic, group);\n \n         final StatsBenchmarkConsumer statsBenchmarkConsumer = new StatsBenchmarkConsumer();\n \n@@ -97,12 +99,10 @@ public void run() {\n             }\n         }, 10000, 10000);\n \n-        DefaultMQPushConsumer consumer =\n-                new DefaultMQPushConsumer(\"benchmark_consumer_\"\n-                        + Long.toString(System.currentTimeMillis() % 100));\n+        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(group);\n         consumer.setInstanceName(Long.toString(System.currentTimeMillis()));\n \n-        consumer.subscribe(\"BenchmarkTest\", \"*\");\n+        consumer.subscribe(topic, \"*\");\n \n         consumer.registerMessageListener(new MessageListenerConcurrently() {\n             @Override\n@@ -142,6 +142,10 @@ public static Options buildCommandlineOptions(final Options options) {\n         opt.setRequired(false);\n         options.addOption(opt);\n \n+        opt = new Option(\"g\", \"group\", true, \"Consumer group name, Default: BenchmarkTest\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n+\n         return options;\n     }\n ",
      "parent_sha": "98fcaf1c9353eb7e0ce2a30fdd33d68020126ea7"
    }
  },
  {
    "oid": "f56c3ab2a960351014def032e7ab294e7a8db9e9",
    "message": "#227 \u4fee\u6539 namespace",
    "date": "2013-08-30T12:03:02Z",
    "url": "https://github.com/apache/rocketmq/commit/f56c3ab2a960351014def032e7ab294e7a8db9e9",
    "details": {
      "sha": "84f696c9dac37db48e53b212ec8e01bba5f25a42",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/namesrv/NamesrvUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/f56c3ab2a960351014def032e7ab294e7a8db9e9/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fnamesrv%2FNamesrvUtil.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/f56c3ab2a960351014def032e7ab294e7a8db9e9/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fnamesrv%2FNamesrvUtil.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fnamesrv%2FNamesrvUtil.java?ref=f56c3ab2a960351014def032e7ab294e7a8db9e9",
      "patch": "@@ -6,5 +6,5 @@\n  */\n public class NamesrvUtil {\n     public static final String NAMESPACE_ORDER_TOPIC_CONFIG = \"ORDER_TOPIC_CONFIG\";\n-    public static final String NAMESPACE_VIRTUAL_ENV_CONFIG = \"VIRTUAL_ENV_CONFIG\";\n+    public static final String NAMESPACE_PROJECT_CONFIG = \"PROJECT_CONFIG\";\n }",
      "parent_sha": "728322518b18c968b3ab2b264d73a1d200023efc"
    }
  },
  {
    "oid": "bdfb5d464e7e9b35c5436d3a236b990fac578713",
    "message": "\u542f\u52a8\u8fc7\u7a0b\u589e\u52a0\u5f02\u5e38\u6253\u5370",
    "date": "2013-12-17T08:59:50Z",
    "url": "https://github.com/apache/rocketmq/commit/bdfb5d464e7e9b35c5436d3a236b990fac578713",
    "details": {
      "sha": "5eb6a76779e53d262dd28cd51fd46a22002d84d8",
      "filename": "rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/bdfb5d464e7e9b35c5436d3a236b990fac578713/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/bdfb5d464e7e9b35c5436d3a236b990fac578713/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java?ref=bdfb5d464e7e9b35c5436d3a236b990fac578713",
      "patch": "@@ -195,7 +195,7 @@ public boolean load() {\n             }\n         }\n         catch (Exception e) {\n-            e.printStackTrace();\n+            log.error(\"load exception\", e);\n             result = false;\n         }\n ",
      "parent_sha": "5a0934df622c1d2721af97cfd5098a09a6168b8b"
    }
  },
  {
    "oid": "018d6dd5dbd381d45e669facf090840733386ef5",
    "message": "#4 \u4fee\u6539\u5f02\u5e38\u4fe1\u606f\u5e2e\u52a9\u63d0\u793a\u683c\u5f0f\u3002",
    "date": "2013-07-18T01:58:05Z",
    "url": "https://github.com/apache/rocketmq/commit/018d6dd5dbd381d45e669facf090840733386ef5",
    "details": {
      "sha": "3930337a74b78e8c2ed8d6d017d8c79fe54e4e67",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/help/FAQUrl.java",
      "status": "modified",
      "additions": 70,
      "deletions": 68,
      "changes": 138,
      "blob_url": "https://github.com/apache/rocketmq/blob/018d6dd5dbd381d45e669facf090840733386ef5/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fhelp%2FFAQUrl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/018d6dd5dbd381d45e669facf090840733386ef5/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fhelp%2FFAQUrl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fhelp%2FFAQUrl.java?ref=018d6dd5dbd381d45e669facf090840733386ef5",
      "patch": "@@ -1,68 +1,70 @@\n-package com.alibaba.rocketmq.common.help;\n-\n-/**\n- * \ufffd\ufffd\u00bc\u04bb\u0429\ufffd\ufffd\ufffd\ufffd\ufffd\u04e6\ufffd\u013d\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0674\ufffd\ufffd\u0279\ufffd\ufffd\ufffd\ufffd\ufffd\n- * \n- * @author shijia.wxr<vintage.wang@gmail.com>\n- */\n-public class FAQUrl {\n-    // FAQ: Topic\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u03bd\ufffd\ufffd\n-    public static final String APPLY_TOPIC_URL = //\n-            \"https://github.com/alibaba/RocketMQ/issues/55\";\n-\n-    // FAQ: \u036c\u04bb\u0328\ufffd\ufffd\ufffd\ufffd\ufffd\u07b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u02b5\ufffd\ufffd\ufffd\ufffd\ufffd\u06b6\ufffd\ufffdJVM\ufffd\ufffd\ufffd\ufffd\ufffd\u0423\ufffd\n-    public static final String CLIENT_INSTACNCE_NAME_DUPLICATE_URL = //\n-            \"https://github.com/alibaba/RocketMQ/issues/56\";\n-\n-    // FAQ: Name Server\ufffd\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n-    public static final String NAME_SERVER_ADDR_NOT_EXIST_URL = //\n-            \"https://github.com/alibaba/RocketMQ/issues/57\";\n-\n-    // FAQ: \ufffd\ufffd\ufffd\ufffdProducer\ufffd\ufffdConsumer\u02a7\ufffd\u0723\ufffdGroup Name\ufffd\u0638\ufffd\n-    public static final String GROUP_NAME_DUPLICATE_URL = //\n-            \"https://github.com/alibaba/RocketMQ/issues/63\";\n-\n-    // FAQ: \ufffd\u037b\ufffd\ufffd\u02f6\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0423\ufffd\ufffd\u03f7\ufffd\ufffd\ufffd\n-    public static final String CLIENT_PARAMETER_CHECK_URL = //\n-            \"https://github.com/alibaba/RocketMQ/issues/73\";\n-\n-    // FAQ: \ufffd\ufffd\ufffd\ufffd\ufffd\u9cbb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u03bd\ufffd\ufffd\n-    public static final String SUBSCRIPTION_GROUP_NOT_EXIST = //\n-            \"https://github.com/alibaba/RocketMQ/issues/75\";\n-\n-    //\n-    // FAQ: \u03b4\ufffd\ufffd\u00bc\ufffd\ucce3\ufffd\ufffd\ufffd\ufffd\ufffd\ucde8\n-    //\n-    public static final String UNEXPECTED_EXCEPTION_URL = //\n-            \"https://github.com/alibaba/RocketMQ/issues/64\";\n-\n-    private static final String TipString = \"\\nFor more infomation, please visit the url, \";\n-\n-\n-    public static String suggestTodo(final String url) {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(TipString);\n-        sb.append(url);\n-        return sb.toString();\n-    }\n-\n-\n-    /**\n-     * \ufffd\ufffd\ufffd\ufffd\u00fb\ufffd\ufffd\u03b4\ufffd\ucce3\u052d\ufffd\ufffd\u05b8\ufffd\ufffdFAQ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05f7\ufffd\ufffd\u012c\ufffd\ufffdFAQ\n-     */\n-    public static String attachDefaultURL(final String errorMessage) {\n-        if (errorMessage != null) {\n-            int index = errorMessage.indexOf(TipString);\n-            if (-1 == index) {\n-                StringBuilder sb = new StringBuilder();\n-                sb.append(errorMessage);\n-                sb.append(\"\\n\");\n-                sb.append(\"For inquiries, please visit the url, \");\n-                sb.append(UNEXPECTED_EXCEPTION_URL);\n-                return sb.toString();\n-            }\n-        }\n-\n-        return errorMessage;\n-    }\n-}\n+package com.alibaba.rocketmq.common.help;\r\n+\r\n+/**\r\n+ * \ufffd\ufffd\u00bc\u04bb\u0429\ufffd\ufffd\ufffd\ufffd\ufffd\u04e6\ufffd\u013d\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0674\ufffd\ufffd\u0279\ufffd\ufffd\ufffd\ufffd\ufffd\r\n+ * \r\n+ * @author shijia.wxr<vintage.wang@gmail.com>\r\n+ */\r\n+public class FAQUrl {\r\n+    // FAQ: Topic\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u03bd\ufffd\ufffd\r\n+    public static final String APPLY_TOPIC_URL = //\r\n+            \"https://github.com/alibaba/RocketMQ/issues/55\";\r\n+\r\n+    // FAQ: \u036c\u04bb\u0328\ufffd\ufffd\ufffd\ufffd\ufffd\u07b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u02b5\ufffd\ufffd\ufffd\ufffd\ufffd\u06b6\ufffd\ufffdJVM\ufffd\ufffd\ufffd\ufffd\ufffd\u0423\ufffd\r\n+    public static final String CLIENT_INSTACNCE_NAME_DUPLICATE_URL = //\r\n+            \"https://github.com/alibaba/RocketMQ/issues/56\";\r\n+\r\n+    // FAQ: Name Server\ufffd\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n+    public static final String NAME_SERVER_ADDR_NOT_EXIST_URL = //\r\n+            \"https://github.com/alibaba/RocketMQ/issues/57\";\r\n+\r\n+    // FAQ: \ufffd\ufffd\ufffd\ufffdProducer\ufffd\ufffdConsumer\u02a7\ufffd\u0723\ufffdGroup Name\ufffd\u0638\ufffd\r\n+    public static final String GROUP_NAME_DUPLICATE_URL = //\r\n+            \"https://github.com/alibaba/RocketMQ/issues/63\";\r\n+\r\n+    // FAQ: \ufffd\u037b\ufffd\ufffd\u02f6\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0423\ufffd\ufffd\u03f7\ufffd\ufffd\ufffd\r\n+    public static final String CLIENT_PARAMETER_CHECK_URL = //\r\n+            \"https://github.com/alibaba/RocketMQ/issues/73\";\r\n+\r\n+    // FAQ: \ufffd\ufffd\ufffd\ufffd\ufffd\u9cbb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u03bd\ufffd\ufffd\r\n+    public static final String SUBSCRIPTION_GROUP_NOT_EXIST = //\r\n+            \"https://github.com/alibaba/RocketMQ/issues/75\";\r\n+\r\n+    //\r\n+    // FAQ: \u03b4\ufffd\ufffd\u00bc\ufffd\ucce3\ufffd\ufffd\ufffd\ufffd\ufffd\ucde8\r\n+    //\r\n+    public static final String UNEXPECTED_EXCEPTION_URL = //\r\n+            \"https://github.com/alibaba/RocketMQ/issues/64\";\r\n+\r\n+    private static final String TipStringBegin = \"\\nSee \";\r\n+    private static final String TipStringEnd = \" for further details.\";\r\n+\r\n+\r\n+    public static String suggestTodo(final String url) {\r\n+        StringBuilder sb = new StringBuilder();\r\n+        sb.append(TipStringBegin);\r\n+        sb.append(url);\r\n+        sb.append(TipStringEnd);\r\n+        return sb.toString();\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * \ufffd\ufffd\ufffd\ufffd\u00fb\ufffd\ufffd\u03b4\ufffd\ucce3\u052d\ufffd\ufffd\u05b8\ufffd\ufffdFAQ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05f7\ufffd\ufffd\u012c\ufffd\ufffdFAQ\r\n+     */\r\n+    public static String attachDefaultURL(final String errorMessage) {\r\n+        if (errorMessage != null) {\r\n+            int index = errorMessage.indexOf(TipStringBegin);\r\n+            if (-1 == index) {\r\n+                StringBuilder sb = new StringBuilder();\r\n+                sb.append(errorMessage);\r\n+                sb.append(\"\\n\");\r\n+                sb.append(\"For inquiries, please visit the url, \");\r\n+                sb.append(UNEXPECTED_EXCEPTION_URL);\r\n+                return sb.toString();\r\n+            }\r\n+        }\r\n+\r\n+        return errorMessage;\r\n+    }\r\n+}\r",
      "parent_sha": "1dbb600f242763ff10a077139a3867a3124603ee"
    }
  },
  {
    "oid": "68362151a272cce4e318238138b5e5de5344220f",
    "message": "[ISSUE #6396] Fix DefaultMQPushConsumer javadoc typo (#6397)",
    "date": "2023-03-20T02:59:15Z",
    "url": "https://github.com/apache/rocketmq/commit/68362151a272cce4e318238138b5e5de5344220f",
    "details": {
      "sha": "c11a3c642ea1e55d1bf730dae26466f6c6ce356c",
      "filename": "client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/rocketmq/blob/68362151a272cce4e318238138b5e5de5344220f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumer.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/68362151a272cce4e318238138b5e5de5344220f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumer.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumer.java?ref=68362151a272cce4e318238138b5e5de5344220f",
      "patch": "@@ -198,8 +198,8 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume\n     /**\n      * Flow control threshold on topic level, default value is -1(Unlimited)\n      * <p>\n-     * The value of {@code pullThresholdForQueue} will be overwrote and calculated based on\n-     * {@code pullThresholdForTopic} if it is't unlimited\n+     * The value of {@code pullThresholdForQueue} will be overwritten and calculated based on\n+     * {@code pullThresholdForTopic} if it isn't unlimited\n      * <p>\n      * For example, if the value of pullThresholdForTopic is 1000 and 10 message queues are assigned to this consumer,\n      * then pullThresholdForQueue will be set to 100\n@@ -209,8 +209,8 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume\n     /**\n      * Limit the cached message size on topic level, default value is -1 MiB(Unlimited)\n      * <p>\n-     * The value of {@code pullThresholdSizeForQueue} will be overwrote and calculated based on\n-     * {@code pullThresholdSizeForTopic} if it is't unlimited\n+     * The value of {@code pullThresholdSizeForQueue} will be overwritten and calculated based on\n+     * {@code pullThresholdSizeForTopic} if it isn't unlimited\n      * <p>\n      * For example, if the value of pullThresholdSizeForTopic is 1000 MiB and 10 message queues are\n      * assigned to this consumer, then pullThresholdSizeForQueue will be set to 100 MiB",
      "parent_sha": "3f8cf890ffddb13dd7deeb031054ddb7abbac757"
    }
  },
  {
    "oid": "4f09b1eea7c986c987e1dac88eafc2707e314580",
    "message": "[ISSUE #3949] Add addResourceAndPerm method",
    "date": "2022-07-13T03:33:00Z",
    "url": "https://github.com/apache/rocketmq/commit/4f09b1eea7c986c987e1dac88eafc2707e314580",
    "details": {
      "sha": "009cbe39493325cca42575fe819fdb8b9a1b073f",
      "filename": "acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java",
      "status": "modified",
      "additions": 15,
      "deletions": 27,
      "changes": 42,
      "blob_url": "https://github.com/apache/rocketmq/blob/4f09b1eea7c986c987e1dac88eafc2707e314580/acl%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainAccessResource.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/4f09b1eea7c986c987e1dac88eafc2707e314580/acl%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainAccessResource.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainAccessResource.java?ref=4f09b1eea7c986c987e1dac88eafc2707e314580",
      "patch": "@@ -35,8 +35,8 @@\n import org.apache.rocketmq.acl.AccessResource;\n import org.apache.rocketmq.acl.common.AclException;\n import org.apache.rocketmq.acl.common.AclUtils;\n-import org.apache.rocketmq.acl.common.AuthorizationHeader;\n import org.apache.rocketmq.acl.common.AuthenticationHeader;\n+import org.apache.rocketmq.acl.common.AuthorizationHeader;\n import org.apache.rocketmq.acl.common.Permission;\n import org.apache.rocketmq.acl.common.SessionCredentials;\n import org.apache.rocketmq.common.MixAll;\n@@ -196,9 +196,7 @@ public static PlainAccessResource parse(GeneratedMessageV3 messageV3, Authentica\n             if (HeartbeatRequest.getDescriptor().getFullName().equals(rpcFullName)) {\n                 HeartbeatRequest request = (HeartbeatRequest) messageV3;\n                 if (request.hasGroup()) {\n-                    Resource group = request.getGroup();\n-                    String groupName = NamespaceUtil.wrapNamespace(group.getResourceNamespace(), group.getName());\n-                    accessResource.addResourceAndPerm(groupName, Permission.SUB);\n+                    accessResource.addResourceAndPerm(request.getGroup(), Permission.SUB);\n                 }\n             } else if (SendMessageRequest.getDescriptor().getFullName().equals(rpcFullName)) {\n                 SendMessageRequest request = (SendMessageRequest) messageV3;\n@@ -211,44 +209,34 @@ public static PlainAccessResource parse(GeneratedMessageV3 messageV3, Authentica\n                         throw new AclException(\"SendMessageRequest, messages' topic is not consistent\", ResponseCode.MESSAGE_ILLEGAL);\n                     }\n                 }\n-                String topicName = NamespaceUtil.wrapNamespace(topic.getResourceNamespace(), topic.getName());\n-                accessResource.addResourceAndPerm(topicName, Permission.PUB);\n+                accessResource.addResourceAndPerm(topic, Permission.PUB);\n             } else if (ReceiveMessageRequest.getDescriptor().getFullName().equals(rpcFullName)) {\n                 ReceiveMessageRequest request = (ReceiveMessageRequest) messageV3;\n-                Resource group = request.getGroup();\n-                String groupName = NamespaceUtil.wrapNamespace(group.getResourceNamespace(), group.getName());\n-                accessResource.addResourceAndPerm(groupName, Permission.SUB);\n-                Resource topic = request.getMessageQueue().getTopic();\n-                String topicName = NamespaceUtil.wrapNamespace(topic.getResourceNamespace(), topic.getName());\n-                accessResource.addResourceAndPerm(topicName, Permission.SUB);\n+                accessResource.addResourceAndPerm(request.getGroup(), Permission.SUB);\n+                accessResource.addResourceAndPerm(request.getMessageQueue().getTopic(), Permission.SUB);\n             } else if (AckMessageRequest.getDescriptor().getFullName().equals(rpcFullName)) {\n                 AckMessageRequest request = (AckMessageRequest) messageV3;\n-                Resource group = request.getGroup();\n-                String groupName = NamespaceUtil.wrapNamespace(group.getResourceNamespace(), group.getName());\n-                accessResource.addResourceAndPerm(groupName, Permission.SUB);\n-                Resource topic = request.getTopic();\n-                String topicName = NamespaceUtil.wrapNamespace(topic.getResourceNamespace(), topic.getName());\n-                accessResource.addResourceAndPerm(topicName, Permission.SUB);\n+                accessResource.addResourceAndPerm(request.getGroup(), Permission.SUB);\n+                accessResource.addResourceAndPerm(request.getTopic(), Permission.SUB);\n             } else if (ForwardMessageToDeadLetterQueueRequest.getDescriptor().getFullName().equals(rpcFullName)) {\n                 ForwardMessageToDeadLetterQueueRequest request = (ForwardMessageToDeadLetterQueueRequest) messageV3;\n-                Resource group = request.getGroup();\n-                String groupName = NamespaceUtil.wrapNamespace(group.getResourceNamespace(), group.getName());\n-                accessResource.addResourceAndPerm(groupName, Permission.SUB);\n-                Resource topic = request.getTopic();\n-                String topicName = NamespaceUtil.wrapNamespace(topic.getResourceNamespace(), topic.getName());\n-                accessResource.addResourceAndPerm(topicName, Permission.SUB);\n+                accessResource.addResourceAndPerm(request.getGroup(), Permission.SUB);\n+                accessResource.addResourceAndPerm(request.getTopic(), Permission.SUB);\n             } else if (EndTransactionRequest.getDescriptor().getFullName().equals(rpcFullName)) {\n                 EndTransactionRequest request = (EndTransactionRequest) messageV3;\n-                Resource topic = request.getTopic();\n-                String topicName = NamespaceUtil.wrapNamespace(topic.getResourceNamespace(), topic.getName());\n-                accessResource.addResourceAndPerm(topicName, Permission.PUB);\n+                accessResource.addResourceAndPerm(request.getTopic(), Permission.PUB);\n             }\n         } catch (Throwable t) {\n             throw new AclException(t.getMessage(), t);\n         }\n         return accessResource;\n     }\n \n+    private void addResourceAndPerm(Resource resource, byte permission) {\n+        String resourceName = NamespaceUtil.wrapNamespace(resource.getResourceNamespace(), resource.getName());\n+        addResourceAndPerm(resourceName, permission);\n+    }\n+\n     public static PlainAccessResource build(PlainAccessConfig plainAccessConfig, RemoteAddressStrategy remoteAddressStrategy) {\n         PlainAccessResource plainAccessResource = new PlainAccessResource();\n         plainAccessResource.setAccessKey(plainAccessConfig.getAccessKey());",
      "parent_sha": "4749dbc0c338d2a7aaf1c8f60385d439df7b0817"
    }
  },
  {
    "oid": "66e7f5125eab33ed33c3fbab8f2172b148c59b15",
    "message": "release 3.1.4",
    "date": "2014-06-23T03:06:17Z",
    "url": "https://github.com/apache/rocketmq/commit/66e7f5125eab33ed33c3fbab8f2172b148c59b15",
    "details": {
      "sha": "52db0874c268848cc70771319b6d32e05777aca6",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/66e7f5125eab33ed33c3fbab8f2172b148c59b15/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/66e7f5125eab33ed33c3fbab8f2172b148c59b15/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java?ref=66e7f5125eab33ed33c3fbab8f2172b148c59b15",
      "patch": "@@ -22,7 +22,7 @@\n  */\n public class MQVersion {\n     // TODO \u6bcf\u6b21\u53d1\u5e03\u7248\u672c\u90fd\u8981\u4fee\u6539\u6b64\u5904\u7248\u672c\u53f7\n-    public static final int CurrentVersion = Version.V3_1_4_SNAPSHOT.ordinal();\n+    public static final int CurrentVersion = Version.V3_1_4.ordinal();\n \n \n     public static String getVersionDesc(int value) {",
      "parent_sha": "43aef77728597297a376460a1d94577f513ef608"
    }
  },
  {
    "oid": "2298d9bf08975a142d3b079267935ff1eebe3576",
    "message": "[ISSUE #5040] Optimize AutoSwitchHAService#truncateInvalidMsg logic (#5041)",
    "date": "2022-09-13T12:15:32Z",
    "url": "https://github.com/apache/rocketmq/commit/2298d9bf08975a142d3b079267935ff1eebe3576",
    "details": {
      "sha": "e0ba59369b41dbab8f4185f256850e3362593d19",
      "filename": "store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/apache/rocketmq/blob/2298d9bf08975a142d3b079267935ff1eebe3576/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2Fha%2Fautoswitch%2FAutoSwitchHAService.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/2298d9bf08975a142d3b079267935ff1eebe3576/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2Fha%2Fautoswitch%2FAutoSwitchHAService.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2Fha%2Fautoswitch%2FAutoSwitchHAService.java?ref=2298d9bf08975a142d3b079267935ff1eebe3576",
      "patch": "@@ -354,10 +354,9 @@ public long truncateInvalidMsg() {\n             return -1;\n         }\n \n-        long reputFromOffset = this.defaultMessageStore.getMaxPhyOffset() - dispatchBehind;\n-\n         boolean doNext = true;\n-        while (reputFromOffset < this.defaultMessageStore.getMaxPhyOffset() && doNext) {\n+        long reputFromOffset = this.defaultMessageStore.getMaxPhyOffset() - dispatchBehind;\n+        do {\n             SelectMappedBufferResult result = this.defaultMessageStore.getCommitLog().getData(reputFromOffset);\n             if (result == null) {\n                 break;\n@@ -369,10 +368,8 @@ public long truncateInvalidMsg() {\n                 int readSize = 0;\n                 while (readSize < result.getSize()) {\n                     DispatchRequest dispatchRequest = this.defaultMessageStore.getCommitLog().checkMessageAndReturnSize(result.getByteBuffer(), false, false);\n-\n-                    int size = dispatchRequest.getMsgSize();\n-\n                     if (dispatchRequest.isSuccess()) {\n+                        int size = dispatchRequest.getMsgSize();\n                         if (size > 0) {\n                             reputFromOffset += size;\n                             readSize += size;\n@@ -388,7 +385,7 @@ public long truncateInvalidMsg() {\n             } finally {\n                 result.release();\n             }\n-        }\n+        } while (reputFromOffset < this.defaultMessageStore.getMaxPhyOffset() && doNext);\n \n         LOGGER.info(\"Truncate commitLog to {}\", reputFromOffset);\n         this.defaultMessageStore.truncateDirtyFiles(reputFromOffset);",
      "parent_sha": "c820a68296d976e865238465f9e474b382ecefe0"
    }
  },
  {
    "oid": "04922095daaae2a7d0d465993a1ac3f111c2d121",
    "message": "\u4fee\u6539 \u6d88\u8d39\u8fdb\u5ea6\u9ed8\u8ba4\u503c",
    "date": "2013-07-18T09:50:22Z",
    "url": "https://github.com/apache/rocketmq/commit/04922095daaae2a7d0d465993a1ac3f111c2d121",
    "details": {
      "sha": "85ef39e5846b42d1c31e9ae8bf9d20f287ff1f06",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/DefaultMQPushConsumer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/04922095daaae2a7d0d465993a1ac3f111c2d121/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumer.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/04922095daaae2a7d0d465993a1ac3f111c2d121/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumer.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumer.java?ref=04922095daaae2a7d0d465993a1ac3f111c2d121",
      "patch": "@@ -41,7 +41,7 @@ public class DefaultMQPushConsumer extends ClientConfig implements MQPushConsume\n     /**\n      * Consumer\ufffd\ufffd\ufffd\ufffd\u02b1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\uffea\u02bc\ufffd\ufffd\ufffd\ufffd\n      */\n-    private ConsumeFromWhere consumeFromWhere = ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;\n+    private ConsumeFromWhere consumeFromWhere = ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET_AND_FROM_MIN_WHEN_BOOT_FIRST;\n     /**\n      * \ufffd\ufffd\ufffd\u0437\ufffd\ufffd\ufffd\ufffd\u3de8\ufffd\ufffd\u04e6\ufffd\u00ff\ufffd\ufffd\ufffd\u0434\n      */",
      "parent_sha": "415d74d282c53f83a82aba73c9f90837d11a70c0"
    }
  },
  {
    "oid": "bfc19a1673222df9d4d37260385befee70386359",
    "message": "Fix typo",
    "date": "2017-01-16T07:16:34Z",
    "url": "https://github.com/apache/rocketmq/commit/bfc19a1673222df9d4d37260385befee70386359",
    "details": {
      "sha": "cd4b57b8b347d8a9f6606384fed15df8a59fb48f",
      "filename": "store/src/main/java/org/apache/rocketmq/store/MappedFile.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/bfc19a1673222df9d4d37260385befee70386359/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFile.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/bfc19a1673222df9d4d37260385befee70386359/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFile.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFile.java?ref=bfc19a1673222df9d4d37260385befee70386359",
      "patch": "@@ -486,11 +486,11 @@ public void warmMappedFile(FlushDiskType type, int pages) {\n \n         // force flush when prepare load finished\n         if (type == FlushDiskType.SYNC_FLUSH) {\n-            log.info(\"mapped file worm up done, force to disk, mappedFile={}, costTime={}\",\n+            log.info(\"mapped file warm-up done, force to disk, mappedFile={}, costTime={}\",\n                 this.getFileName(), System.currentTimeMillis() - beginTime);\n             mappedByteBuffer.force();\n         }\n-        log.info(\"mapped file worm up done. mappedFile={}, costTime={}\", this.getFileName(),\n+        log.info(\"mapped file warm-up done. mappedFile={}, costTime={}\", this.getFileName(),\n             System.currentTimeMillis() - beginTime);\n \n         this.mlock();",
      "parent_sha": "75d337d18810c1e591f8f67b8c4f80c64334461d"
    }
  },
  {
    "oid": "c1ea7ef21865051f1263fa0a28c75e359d12ac38",
    "message": "#397 \u4f18\u5316\u6b63\u5219\u8868\u8fbe\u5f0f",
    "date": "2014-04-22T09:15:21Z",
    "url": "https://github.com/apache/rocketmq/commit/c1ea7ef21865051f1263fa0a28c75e359d12ac38",
    "details": {
      "sha": "11a88d9094db6cb25ca66b38c136ac8f244fa80e",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/Validators.java",
      "status": "modified",
      "additions": 9,
      "deletions": 12,
      "changes": 21,
      "blob_url": "https://github.com/apache/rocketmq/blob/c1ea7ef21865051f1263fa0a28c75e359d12ac38/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2FValidators.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/c1ea7ef21865051f1263fa0a28c75e359d12ac38/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2FValidators.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2FValidators.java?ref=c1ea7ef21865051f1263fa0a28c75e359d12ac38",
      "patch": "@@ -17,25 +17,22 @@\n  * @since 2013-8-28\n  */\n public class Validators {\n-    public static final String validPatternStr = \"^[a-zA-Z0-9_-]+$\";\n+    public static final String VALID_PATTERN_STR = \"^[a-zA-Z0-9_-]+$\";\n+    public static final Pattern PATTERN = Pattern.compile(VALID_PATTERN_STR);\n     public static final int CHARACTER_MAX_LENGTH = 255;\n \n \n     /**\n      * \u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5b57\u7b26\u5339\u914d\n      * \n      * @param origin\n-     * @param patternStr\n+     * @param pattern\n      * @return\n      */\n-    public static boolean regularExpressionMatcher(String origin, String patternStr) {\n-        if (UtilAll.isBlank(origin)) {\n-            return false;\n-        }\n-        if (UtilAll.isBlank(patternStr)) {\n+    public static boolean regularExpressionMatcher(String origin, Pattern pattern) {\n+        if (pattern == null) {\n             return true;\n         }\n-        Pattern pattern = Pattern.compile(patternStr);\n         Matcher matcher = pattern.matcher(origin);\n         return matcher.matches();\n     }\n@@ -68,10 +65,10 @@ public static void checkTopic(String topic) throws MQClientException {\n         if (UtilAll.isBlank(topic)) {\n             throw new MQClientException(\"the specified topic is blank\", null);\n         }\n-        if (!regularExpressionMatcher(topic, validPatternStr)) {\n+        if (!regularExpressionMatcher(topic, PATTERN)) {\n             throw new MQClientException(String.format(\n                 \"the specified topic[%s] contains illegal characters, allowing only %s\", topic,\n-                validPatternStr), null);\n+                VALID_PATTERN_STR), null);\n         }\n         if (topic.length() > CHARACTER_MAX_LENGTH) {\n             throw new MQClientException(\"the specified topic is longer than topic max length 255.\", null);\n@@ -95,10 +92,10 @@ public static void checkGroup(String group) throws MQClientException {\n         if (UtilAll.isBlank(group)) {\n             throw new MQClientException(\"the specified group is blank\", null);\n         }\n-        if (!regularExpressionMatcher(group, validPatternStr)) {\n+        if (!regularExpressionMatcher(group, PATTERN)) {\n             throw new MQClientException(String.format(\n                 \"the specified group[%s] contains illegal characters, allowing only %s\", group,\n-                validPatternStr), null);\n+                VALID_PATTERN_STR), null);\n         }\n         if (group.length() > CHARACTER_MAX_LENGTH) {\n             throw new MQClientException(\"the specified group is longer than group max length 255.\", null);",
      "parent_sha": "6a1d174f82fa5c173d079a0d4cac371df85aa282"
    }
  },
  {
    "oid": "9b5ee5d757c354fac28e669ef7c31c51d08340e0",
    "message": "#4 \u670d\u52a1\u5668\u6253\u5370\u4e8b\u52a1\u65e5\u5fd7\u4f18\u5316\uff0c\u53bb\u9664\u91cd\u590d\u7684MessageId\u6253\u5370",
    "date": "2013-05-27T09:54:35Z",
    "url": "https://github.com/apache/rocketmq/commit/9b5ee5d757c354fac28e669ef7c31c51d08340e0",
    "details": {
      "sha": "dbc303edbff8d406477098e9d752f3ed60fc3f0c",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/EndTransactionProcessor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/apache/rocketmq/blob/9b5ee5d757c354fac28e669ef7c31c51d08340e0/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FEndTransactionProcessor.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/9b5ee5d757c354fac28e669ef7c31c51d08340e0/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FEndTransactionProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FEndTransactionProcessor.java?ref=9b5ee5d757c354fac28e669ef7c31c51d08340e0",
      "patch": "@@ -88,19 +88,17 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand\n             // \ufffd\ufffd\ufffd\u1f7b\u04b2\ufffd\ufffd\ufffd\u0639\ufffd\n             case MessageSysFlag.TransactionNotType: {\n                 logTransaction.warn(\"check producer[{}] transaction state, but it's pending status.\\n\"//\n-                        + \"MsgID: {} RequestHeader: {} Remark: {}\",//\n+                        + \"RequestHeader: {} Remark: {}\",//\n                     RemotingHelper.parseChannelRemoteAddr(ctx.channel()), //\n-                    requestHeader.getMsgId(),//\n                     requestHeader.toString(),//\n                     request.getRemark());\n                 return null;\n             }\n             // \ufffd\u1f7b\n             case MessageSysFlag.TransactionCommitType: {\n                 logTransaction.warn(\"check producer[{}] transaction state, the producer commit the message.\\n\"//\n-                        + \"MsgID: {} RequestHeader: {} Remark: {}\",\n+                        + \"RequestHeader: {} Remark: {}\",//\n                     RemotingHelper.parseChannelRemoteAddr(ctx.channel()), //\n-                    requestHeader.getMsgId(),//\n                     requestHeader.toString(),//\n                     request.getRemark());\n \n@@ -109,9 +107,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand\n             // \ufffd\u0639\ufffd\n             case MessageSysFlag.TransactionRollbackType: {\n                 logTransaction.warn(\"check producer[{}] transaction state, the producer rollback the message.\\n\"//\n-                        + \"MsgID: {} RequestHeader: {} Remark: {}\",\n+                        + \"RequestHeader: {} Remark: {}\",//\n                     RemotingHelper.parseChannelRemoteAddr(ctx.channel()), //\n-                    requestHeader.getMsgId(),//\n                     requestHeader.toString(),//\n                     request.getRemark());\n                 break;\n@@ -127,9 +124,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand\n             case MessageSysFlag.TransactionNotType: {\n                 logTransaction.warn(\n                     \"the producer[{}] end transaction in sending message,  and it's pending status.\\n\"//\n-                            + \"MsgID: {} RequestHeader: {} Remark: {}\",\n+                            + \"RequestHeader: {} Remark: {}\",//\n                     RemotingHelper.parseChannelRemoteAddr(ctx.channel()), //\n-                    requestHeader.getMsgId(),//\n                     requestHeader.toString(),//\n                     request.getRemark());\n                 return null;\n@@ -141,9 +137,8 @@ public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand\n             // \ufffd\u0639\ufffd\n             case MessageSysFlag.TransactionRollbackType: {\n                 logTransaction.warn(\"the producer[{}] end transaction in sending message, rollback the message.\\n\"//\n-                        + \"MsgID: {} RequestHeader: {} Remark: {}\",\n+                        + \"RequestHeader: {} Remark: {}\",//\n                     RemotingHelper.parseChannelRemoteAddr(ctx.channel()), //\n-                    requestHeader.getMsgId(),//\n                     requestHeader.toString(),//\n                     request.getRemark());\n                 break;",
      "parent_sha": "14307f4276fed63e132b390903ab84ab44025017"
    }
  },
  {
    "oid": "7c77f4c324c01638f5ffb89c211d996a2464f3a6",
    "message": "[ISSUE #3949] AddHeader in AuthenticationInterceptor",
    "date": "2022-07-13T03:29:32Z",
    "url": "https://github.com/apache/rocketmq/commit/7c77f4c324c01638f5ffb89c211d996a2464f3a6",
    "details": {
      "sha": "a3b75034b15d792d013c87ad43ef03116ee801ff",
      "filename": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/interceptor/AuthenticationInterceptor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/rocketmq/blob/7c77f4c324c01638f5ffb89c211d996a2464f3a6/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Finterceptor%2FAuthenticationInterceptor.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/7c77f4c324c01638f5ffb89c211d996a2464f3a6/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Finterceptor%2FAuthenticationInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Finterceptor%2FAuthenticationInterceptor.java?ref=7c77f4c324c01638f5ffb89c211d996a2464f3a6",
      "patch": "@@ -59,16 +59,16 @@ public void onMessage(R message) {\n                     .build();\n                 for (AccessValidator accessValidator : accessValidatorList) {\n                     AccessResource accessResource = accessValidator.parse(messageV3, metadataHeader);\n-                    addHeader(headers, messageV3.getDescriptorForType().getFullName(), accessResource);\n                     accessValidator.validate(accessResource);\n+                    addHeader(headers, messageV3, accessResource);\n                 }\n                 super.onMessage(message);\n             }\n         };\n     }\n \n-    protected void addHeader(Metadata headers, String rpcName, AccessResource accessResource) {\n-        headers.put(InterceptorConstants.RPC_NAME, rpcName);\n+    protected void addHeader(Metadata headers, GeneratedMessageV3 messageV3, AccessResource accessResource) {\n+        headers.put(InterceptorConstants.RPC_NAME, messageV3.getDescriptorForType().getFullName());\n         if (accessResource instanceof PlainAccessResource) {\n             PlainAccessResource plainAccessResource = (PlainAccessResource) accessResource;\n             headers.put(InterceptorConstants.AUTHORIZATION_AK, plainAccessResource.getAccessKey());",
      "parent_sha": "835714666e2c5a790769d8222dbf8cab2bc7b138"
    }
  },
  {
    "oid": "a8ef6d61149457088e55d9c260d7e5d5f5b1dd3a",
    "message": "Minor fix for log typo",
    "date": "2018-04-27T03:33:25Z",
    "url": "https://github.com/apache/rocketmq/commit/a8ef6d61149457088e55d9c260d7e5d5f5b1dd3a",
    "details": {
      "sha": "42b7436940101b10aa096d4d1ea9bb24dba7ed4c",
      "filename": "client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/a8ef6d61149457088e55d9c260d7e5d5f5b1dd3a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientInstance.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/a8ef6d61149457088e55d9c260d7e5d5f5b1dd3a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientInstance.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientInstance.java?ref=a8ef6d61149457088e55d9c260d7e5d5f5b1dd3a",
      "patch": "@@ -149,7 +149,7 @@ public MQClientInstance(ClientConfig clientConfig, int instanceIndex, String cli\n \n         this.consumerStatsManager = new ConsumerStatsManager(this.scheduledExecutorService);\n \n-        log.info(\"created a new client Instance, FactoryIndex: {} ClinetID: {} {} {}, serializeType={}\",\n+        log.info(\"Created a new client Instance, InstanceIndex:{}, ClientID:{}, ClientConfig:{}, ClientVersion:{}, SerializerType:{}\",\n             this.instanceIndex,\n             this.clientId,\n             this.clientConfig,",
      "parent_sha": "117d690e5089b98ee0ba7caa1ac92f7f5e9a5257"
    }
  },
  {
    "oid": "bb9f106e31c01e7b38f0c0f130d211da5a4f31cb",
    "message": "[ISSUE #1904] Print log when flush timeout (#1903)\n\n* rollback my code\r\n\r\n* avoid log when disk flush\r\n\r\n* when msg is in next file, flushOK value may be wrong",
    "date": "2020-12-04T07:43:29Z",
    "url": "https://github.com/apache/rocketmq/commit/bb9f106e31c01e7b38f0c0f130d211da5a4f31cb",
    "details": {
      "sha": "cce6481b8daa119def971b3c4c2f95d4b3e6502a",
      "filename": "store/src/main/java/org/apache/rocketmq/store/CommitLog.java",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/apache/rocketmq/blob/bb9f106e31c01e7b38f0c0f130d211da5a4f31cb/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FCommitLog.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/bb9f106e31c01e7b38f0c0f130d211da5a4f31cb/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FCommitLog.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FCommitLog.java?ref=bb9f106e31c01e7b38f0c0f130d211da5a4f31cb",
      "patch": "@@ -661,14 +661,18 @@ public CompletableFuture<PutMessageResult> asyncPutMessage(final MessageExtBroke\n         storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).incrementAndGet();\n         storeStatsService.getSinglePutMessageTopicSizeTotal(topic).addAndGet(result.getWroteBytes());\n \n-        CompletableFuture<PutMessageStatus> flushResultFuture = submitFlushRequest(result, putMessageResult, msg);\n-        CompletableFuture<PutMessageStatus> replicaResultFuture = submitReplicaRequest(result, putMessageResult, msg);\n+        CompletableFuture<PutMessageStatus> flushResultFuture = submitFlushRequest(result, msg);\n+        CompletableFuture<PutMessageStatus> replicaResultFuture = submitReplicaRequest(result, msg);\n         return flushResultFuture.thenCombine(replicaResultFuture, (flushStatus, replicaStatus) -> {\n             if (flushStatus != PutMessageStatus.PUT_OK) {\n-                putMessageResult.setPutMessageStatus(PutMessageStatus.FLUSH_DISK_TIMEOUT);\n+                putMessageResult.setPutMessageStatus(flushStatus);\n             }\n             if (replicaStatus != PutMessageStatus.PUT_OK) {\n                 putMessageResult.setPutMessageStatus(replicaStatus);\n+                if (replicaStatus == PutMessageStatus.FLUSH_SLAVE_TIMEOUT) {\n+                    log.error(\"do sync transfer other node, wait return, but failed, topic: {} tags: {} client address: {}\",\n+                            msg.getTopic(), msg.getTags(), msg.getBornHostNameString());\n+                }\n             }\n             return putMessageResult;\n         });\n@@ -762,15 +766,18 @@ public CompletableFuture<PutMessageResult> asyncPutMessages(final MessageExtBatc\n         storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).addAndGet(result.getMsgNum());\n         storeStatsService.getSinglePutMessageTopicSizeTotal(messageExtBatch.getTopic()).addAndGet(result.getWroteBytes());\n \n-        CompletableFuture<PutMessageStatus> flushOKFuture = submitFlushRequest(result, putMessageResult, messageExtBatch);\n-        CompletableFuture<PutMessageStatus> replicaOKFuture = submitReplicaRequest(result, putMessageResult, messageExtBatch);\n+        CompletableFuture<PutMessageStatus> flushOKFuture = submitFlushRequest(result, messageExtBatch);\n+        CompletableFuture<PutMessageStatus> replicaOKFuture = submitReplicaRequest(result, messageExtBatch);\n         return flushOKFuture.thenCombine(replicaOKFuture, (flushStatus, replicaStatus) -> {\n             if (flushStatus != PutMessageStatus.PUT_OK) {\n-                putMessageResult.setPutMessageStatus(PutMessageStatus.FLUSH_DISK_TIMEOUT);\n+                putMessageResult.setPutMessageStatus(flushStatus);\n             }\n-\n             if (replicaStatus != PutMessageStatus.PUT_OK) {\n                 putMessageResult.setPutMessageStatus(replicaStatus);\n+                if (replicaStatus == PutMessageStatus.FLUSH_SLAVE_TIMEOUT) {\n+                    log.error(\"do sync transfer other node, wait return, but failed, topic: {} client address: {}\",\n+                            messageExtBatch.getTopic(), messageExtBatch.getBornHostNameString());\n+                }\n             }\n             return putMessageResult;\n         });\n@@ -900,8 +907,7 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n         return putMessageResult;\n     }\n \n-    public CompletableFuture<PutMessageStatus> submitFlushRequest(AppendMessageResult result, PutMessageResult putMessageResult,\n-                                                                  MessageExt messageExt) {\n+    public CompletableFuture<PutMessageStatus> submitFlushRequest(AppendMessageResult result, MessageExt messageExt) {\n         // Synchronization flush\n         if (FlushDiskType.SYNC_FLUSH == this.defaultMessageStore.getMessageStoreConfig().getFlushDiskType()) {\n             final GroupCommitService service = (GroupCommitService) this.flushCommitLogService;\n@@ -926,8 +932,7 @@ public CompletableFuture<PutMessageStatus> submitFlushRequest(AppendMessageResul\n         }\n     }\n \n-    public CompletableFuture<PutMessageStatus> submitReplicaRequest(AppendMessageResult result, PutMessageResult putMessageResult,\n-                                                        MessageExt messageExt) {\n+    public CompletableFuture<PutMessageStatus> submitReplicaRequest(AppendMessageResult result, MessageExt messageExt) {\n         if (BrokerRole.SYNC_MASTER == this.defaultMessageStore.getMessageStoreConfig().getBrokerRole()) {\n             HAService service = this.defaultMessageStore.getHaService();\n             if (messageExt.isWaitStoreMsgOK()) {\n@@ -1420,13 +1425,10 @@ private void doCommit() {\n                     for (GroupCommitRequest req : this.requestsRead) {\n                         // There may be a message in the next file, so a maximum of\n                         // two times the flush\n-                        boolean flushOK = false;\n+                        boolean flushOK = CommitLog.this.mappedFileQueue.getFlushedWhere() >= req.getNextOffset();\n                         for (int i = 0; i < 2 && !flushOK; i++) {\n+                            CommitLog.this.mappedFileQueue.flush(0);\n                             flushOK = CommitLog.this.mappedFileQueue.getFlushedWhere() >= req.getNextOffset();\n-\n-                            if (!flushOK) {\n-                                CommitLog.this.mappedFileQueue.flush(0);\n-                            }\n                         }\n \n                         req.wakeupCustomer(flushOK ? PutMessageStatus.PUT_OK : PutMessageStatus.FLUSH_DISK_TIMEOUT);",
      "parent_sha": "912cedaf3f14d6fd045ba93d450d5fef547b4482"
    }
  },
  {
    "oid": "af6a95f4c5b9bc468e2d152e225935c2f1e6309c",
    "message": "[ISSUE #6627] Fix ConsumerLagCalculator#processAllGroup retry topic NPE (#6628)",
    "date": "2023-04-21T07:50:41Z",
    "url": "https://github.com/apache/rocketmq/commit/af6a95f4c5b9bc468e2d152e225935c2f1e6309c",
    "details": {
      "sha": "a1afe7e57e3f84f4ee1c39472cf9ef006fb9e00a",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/apache/rocketmq/blob/af6a95f4c5b9bc468e2d152e225935c2f1e6309c/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fmetrics%2FConsumerLagCalculator.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/af6a95f4c5b9bc468e2d152e225935c2f1e6309c/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fmetrics%2FConsumerLagCalculator.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fmetrics%2FConsumerLagCalculator.java?ref=af6a95f4c5b9bc468e2d152e225935c2f1e6309c",
      "patch": "@@ -177,12 +177,14 @@ private void processAllGroup(Consumer<ProcessGroupInfo> consumer) {\n                 if (isPop) {\n                     String retryTopic = KeyBuilder.buildPopRetryTopic(topic, group);\n                     TopicConfig retryTopicConfig = topicConfigManager.selectTopicConfig(retryTopic);\n-                    int retryTopicPerm = retryTopicConfig.getPerm() & brokerConfig.getBrokerPermission();\n-                    if (PermName.isReadable(retryTopicPerm) || PermName.isWriteable(retryTopicPerm)) {\n-                        consumer.accept(new ProcessGroupInfo(group, topic, true, retryTopic));\n-                    } else {\n-                        consumer.accept(new ProcessGroupInfo(group, topic, true, null));\n+                    if (retryTopicConfig != null) {\n+                        int retryTopicPerm = retryTopicConfig.getPerm() & brokerConfig.getBrokerPermission();\n+                        if (PermName.isReadable(retryTopicPerm) || PermName.isWriteable(retryTopicPerm)) {\n+                            consumer.accept(new ProcessGroupInfo(group, topic, true, retryTopic));\n+                            continue;\n+                        }\n                     }\n+                    consumer.accept(new ProcessGroupInfo(group, topic, true, null));\n                 } else {\n                     consumer.accept(new ProcessGroupInfo(group, topic, false, null));\n                 }",
      "parent_sha": "ea8b9d9f7a96a83d12006fd89c90356db658ef2e"
    }
  },
  {
    "oid": "06416b00f8f1a1871d234cde7129d373b3e3de5b",
    "message": "Changed list creation at DynaCode() to a singleton.",
    "date": "2017-06-06T03:37:29Z",
    "url": "https://github.com/apache/rocketmq/commit/06416b00f8f1a1871d234cde7129d373b3e3de5b",
    "details": {
      "sha": "e0a94d70afeb8c81ac867eeee65e33126e105e4b",
      "filename": "filtersrv/src/main/java/org/apache/rocketmq/filtersrv/filter/DynaCode.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/apache/rocketmq/blob/06416b00f8f1a1871d234cde7129d373b3e3de5b/filtersrv%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ffiltersrv%2Ffilter%2FDynaCode.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/06416b00f8f1a1871d234cde7129d373b3e3de5b/filtersrv%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ffiltersrv%2Ffilter%2FDynaCode.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/filtersrv%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ffiltersrv%2Ffilter%2FDynaCode.java?ref=06416b00f8f1a1871d234cde7129d373b3e3de5b",
      "patch": "@@ -28,7 +28,7 @@\n import java.net.URLClassLoader;\n import java.net.URLDecoder;\n import java.util.ArrayList;\n-import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -71,9 +71,8 @@ public class DynaCode {\n \n     private String target;\n \n-    @SuppressWarnings(\"unchecked\")\n     public DynaCode(String code) {\n-        this(Thread.currentThread().getContextClassLoader(), Arrays.asList(code));\n+        this(Thread.currentThread().getContextClassLoader(), Collections.singletonList(code));\n     }\n \n     public DynaCode(ClassLoader parentClassLoader, List<String> codeStrs) {",
      "parent_sha": "0224f93d0201411be72735336f1f0e25809ffe6f"
    }
  },
  {
    "oid": "87af62f2d8ae75870e41b3e16f650517350fd0df",
    "message": "\u4fee\u590d\u542f\u52a8\u8fc7\u7a0b\u4e2d\u6253\u5370fastjson\u7248\u672c\u7684\u95ee\u9898",
    "date": "2015-02-10T07:49:11Z",
    "url": "https://github.com/apache/rocketmq/commit/87af62f2d8ae75870e41b3e16f650517350fd0df",
    "details": {
      "sha": "efd5ecc78b6c740ec0585386c77f697556adb239",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/conflict/PackageConflictDetect.java",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/apache/rocketmq/blob/87af62f2d8ae75870e41b3e16f650517350fd0df/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fconflict%2FPackageConflictDetect.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/87af62f2d8ae75870e41b3e16f650517350fd0df/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fconflict%2FPackageConflictDetect.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fconflict%2FPackageConflictDetect.java?ref=87af62f2d8ae75870e41b3e16f650517350fd0df",
      "patch": "@@ -1,9 +1,5 @@\n package com.alibaba.rocketmq.common.conflict;\n \n-\n-import java.net.URL;\n-import java.util.Enumeration;\n-\n /**\n  * \u7528\u6765\u68c0\u6d4b\u5305\u51b2\u7a81\u95ee\u9898\uff0c\u5982\u679c\u4f4e\u4e8e\u67d0\u4e2a\u7248\u672c\uff0c\u5219\u8981\u6c42\u7528\u6237\u5347\u7ea7\n  */\n@@ -20,10 +16,6 @@ public static void detectFastjson() {\n             final String fastjsonVersion = \"1.2.3\";\n             boolean conflict = false;\n             try {\n-                Enumeration<URL> resources = PackageConflictDetect.class.getClassLoader().getResources(\"com/alibaba/fastjson/JSON.class\");\n-                while(resources.hasMoreElements()){\n-                    System.out.println(\"fastjson --> \"+resources.nextElement());\n-                }\n                 String version = com.alibaba.fastjson.JSON.VERSION;\n                 int code = version.compareTo(fastjsonVersion);\n                 // \u8bf4\u660e\u4f9d\u8d56\u7684\u7248\u672c\u6bd4\u8981\u6c42\u7684\u7248\u672c\u4f4e\n@@ -36,9 +28,11 @@ public static void detectFastjson() {\n             }\n \n             if (conflict) {\n-                throw new RuntimeException(String.format(\n-                    \"Your fastjson version is too low, or no fastjson, RocketMQ minimum version required: %s\",//\n-                    fastjsonVersion));\n+                throw new RuntimeException(\n+                    String\n+                        .format(\n+                            \"Your fastjson version is too low, or no fastjson, RocketMQ minimum version required: %s\",//\n+                            fastjsonVersion));\n             }\n         }\n     }",
      "parent_sha": "50ef10fcc79f9bd15430196bc31196da5f91c5e1"
    }
  },
  {
    "oid": "3d16a7d522b9e7ed8b1209f1cae5f748a444e2df",
    "message": "fix compile error",
    "date": "2016-07-14T10:46:08Z",
    "url": "https://github.com/apache/rocketmq/commit/3d16a7d522b9e7ed8b1209f1cae5f748a444e2df",
    "details": {
      "sha": "5ef75ede6bcdb8372f0c3ec8ab3aef66659b2cf7",
      "filename": "rocketmq-client/src/test/java/com/alibaba/rocketmq/client/consumer/loadbalance/AllocateMessageQueueAveragelyTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/apache/rocketmq/blob/3d16a7d522b9e7ed8b1209f1cae5f748a444e2df/rocketmq-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2Floadbalance%2FAllocateMessageQueueAveragelyTest.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/3d16a7d522b9e7ed8b1209f1cae5f748a444e2df/rocketmq-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2Floadbalance%2FAllocateMessageQueueAveragelyTest.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2Floadbalance%2FAllocateMessageQueueAveragelyTest.java?ref=3d16a7d522b9e7ed8b1209f1cae5f748a444e2df",
      "patch": "@@ -50,7 +50,7 @@ public void init() {\n     }\n \n     @Test\n-    public void testConsumer1() { 1\n+    public void testConsumer1() {\n         currentCID = \"0\";\n         createConsumerIdList(1);\n         createMessageQueueList(5);\n@@ -95,7 +95,7 @@ public void setMessageQueueList(List<MessageQueue> messageQueueList) {\n     }\n \n     @Test\n-    public void testConsumer2() { 2\n+    public void testConsumer2() {\n         currentCID = \"1\";\n         createConsumerIdList(2);\n         createMessageQueueList(5);\n@@ -108,7 +108,7 @@ public void testConsumer2() { 2\n     }\n \n     @Test\n-    public void testConsumer3CurrentCID0() { 3\n+    public void testConsumer3CurrentCID0() {\n         currentCID = \"0\";\n         createConsumerIdList(3);\n         createMessageQueueList(5);\n@@ -120,7 +120,7 @@ public void testConsumer3CurrentCID0() { 3\n     }\n \n     @Test\n-    public void testConsumer3CurrentCID1() { 3\n+    public void testConsumer3CurrentCID1() {\n         currentCID = \"1\";\n         createConsumerIdList(3);\n         createMessageQueueList(5);\n@@ -132,7 +132,7 @@ public void testConsumer3CurrentCID1() { 3\n     }\n \n     @Test\n-    public void testConsumer3CurrentCID2() { 3\n+    public void testConsumer3CurrentCID2() {\n         currentCID = \"2\";\n         createConsumerIdList(3);\n         createMessageQueueList(5);\n@@ -144,7 +144,7 @@ public void testConsumer3CurrentCID2() { 3\n     }\n \n     @Test\n-    public void testConsumer4() { 4\n+    public void testConsumer4() {\n         currentCID = \"1\";\n         createConsumerIdList(4);\n         createMessageQueueList(5);\n@@ -156,7 +156,7 @@ public void testConsumer4() { 4\n     }\n \n     @Test\n-    public void testConsumer5() { 5\n+    public void testConsumer5() {\n         currentCID = \"1\";\n         createConsumerIdList(5);\n         createMessageQueueList(5);\n@@ -168,7 +168,7 @@ public void testConsumer5() { 5\n     }\n \n     @Test\n-    public void testConsumer6() { 6\n+    public void testConsumer6() {\n         currentCID = \"1\";\n         createConsumerIdList(2);\n         createMessageQueueList(6);",
      "parent_sha": "4783338897e37eae0f300e711c656454f78c2711"
    }
  },
  {
    "oid": "499b7dbe844558b95567f8467c01c0ac3fccc873",
    "message": "[ISSUE #4171]Fix tryQueryAssignment() in RebalanceImpl",
    "date": "2022-04-15T06:36:01Z",
    "url": "https://github.com/apache/rocketmq/commit/499b7dbe844558b95567f8467c01c0ac3fccc873",
    "details": {
      "sha": "dff7efd637cf09f48cafa753f73cef342fe6631f",
      "filename": "client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java",
      "status": "modified",
      "additions": 13,
      "deletions": 25,
      "changes": 38,
      "blob_url": "https://github.com/apache/rocketmq/blob/499b7dbe844558b95567f8467c01c0ac3fccc873/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/499b7dbe844558b95567f8467c01c0ac3fccc873/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java?ref=499b7dbe844558b95567f8467c01c0ac3fccc873",
      "patch": "@@ -273,40 +273,28 @@ private boolean tryQueryAssignment(String topic) {\n         if (topicBrokerRebalance.containsKey(topic)) {\n             return true;\n         }\n-\n         String strategyName = allocateMessageQueueStrategy != null ? allocateMessageQueueStrategy.getName() : null;\n-\n-        boolean success = false;\n-        int i = 0;\n-        int timeOut = 0;\n-        while (i++ < TIMEOUT_CHECK_TIMES) {\n+        int retryTimes = 0;\n+        while (retryTimes++ < TIMEOUT_CHECK_TIMES) {\n             try {\n                 Set<MessageQueueAssignment> resultSet = mQClientFactory.queryAssignment(topic, consumerGroup,\n-                    strategyName, messageModel, QUERY_ASSIGNMENT_TIMEOUT / TIMEOUT_CHECK_TIMES * i);\n-                success = true;\n-                break;\n+                    strategyName, messageModel, QUERY_ASSIGNMENT_TIMEOUT / TIMEOUT_CHECK_TIMES * retryTimes);\n+                topicBrokerRebalance.put(topic, topic);\n+                return true;\n             } catch (Throwable t) {\n-                if (t instanceof RemotingTimeoutException) {\n-                    timeOut++;\n-                } else {\n+                if (!(t instanceof RemotingTimeoutException)) {\n                     log.error(\"tryQueryAssignment error.\", t);\n-                    break;\n+                    topicClientRebalance.put(topic, topic);\n+                    return false;\n                 }\n             }\n         }\n-\n-        if (success) {\n-            topicBrokerRebalance.put(topic, topic);\n-            return true;\n-        } else {\n-            if (timeOut >= TIMEOUT_CHECK_TIMES) {\n-                // if never success before and timeout exceed TIMEOUT_CHECK_TIMES, force client rebalance\n-                topicClientRebalance.put(topic, topic);\n-                return false;\n-            } else {\n-                return true;\n-            }\n+        if (retryTimes >= TIMEOUT_CHECK_TIMES) {\n+            // if never success before and timeout exceed TIMEOUT_CHECK_TIMES, force client rebalance\n+            topicClientRebalance.put(topic, topic);\n+            return false;\n         }\n+        return true;\n     }\n \n     public ConcurrentMap<String, SubscriptionData> getSubscriptionInner() {",
      "parent_sha": "61e0f0cae9323572196a66b4d38ae4e8ed51f50f"
    }
  },
  {
    "oid": "bb4f664c6994eaf796745e306f389211a3356c17",
    "message": "#272 load\u4e4b\u524d\u542f\u52a8IndexService",
    "date": "2013-10-20T15:30:37Z",
    "url": "https://github.com/apache/rocketmq/commit/bb4f664c6994eaf796745e306f389211a3356c17",
    "details": {
      "sha": "a0ed716dc379745f974ff175be622641194bcbf0",
      "filename": "rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/apache/rocketmq/blob/bb4f664c6994eaf796745e306f389211a3356c17/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/bb4f664c6994eaf796745e306f389211a3356c17/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java?ref=bb4f664c6994eaf796745e306f389211a3356c17",
      "patch": "@@ -186,6 +186,9 @@ public boolean load() {\n \n                 this.indexService.load(lastExitOK);\n \n+                // \u56e0\u4e3a\u4e0b\u9762\u7684recover\u4f1a\u5206\u53d1\u8bf7\u6c42\u5230\u7d22\u5f15\u670d\u52a1\uff0c\u5982\u679c\u4e0d\u542f\u52a8\uff0c\u5206\u53d1\u8fc7\u7a0b\u4f1a\u88ab\u6d41\u63a7\n+                this.indexService.start();\n+\n                 // \u5c1d\u8bd5\u6062\u590d\u6570\u636e\n                 this.recover(lastExitOK);\n \n@@ -213,7 +216,9 @@ public boolean load() {\n     public void start() throws Exception {\n         this.cleanCommitLogService.start();\n         this.cleanConsumeQueueService.start();\n-        this.indexService.start();\n+\n+        // \u5728load\u65b9\u6cd5\u4e2d\u5df2\u7ecfstart\u4e86\n+        // this.indexService.start();\n         // \u5728\u6784\u9020\u51fd\u6570\u5df2\u7ecfstart\u4e86\u3002\n         // this.dispatchMessageService.start();\n         this.flushConsumeQueueService.start();",
      "parent_sha": "4f8edf67cbde1550882fab4f9493278b44413365"
    }
  },
  {
    "oid": "b87c0e854965b561f1a417a0cb6ef6122b71d0a9",
    "message": "#4 \u4e3aRebalance\u8fc7\u7a0b\u589e\u52a0\u8be6\u7ec6\u65e5\u5fd7",
    "date": "2013-08-05T03:03:21Z",
    "url": "https://github.com/apache/rocketmq/commit/b87c0e854965b561f1a417a0cb6ef6122b71d0a9",
    "details": {
      "sha": "9ddcffa42b0b8613bb2e9a2fdffb171835bc45f1",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalanceImpl.java",
      "status": "modified",
      "additions": 37,
      "deletions": 38,
      "changes": 75,
      "blob_url": "https://github.com/apache/rocketmq/blob/b87c0e854965b561f1a417a0cb6ef6122b71d0a9/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/b87c0e854965b561f1a417a0cb6ef6122b71d0a9/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java?ref=b87c0e854965b561f1a417a0cb6ef6122b71d0a9",
      "patch": "@@ -41,19 +41,15 @@\n  */\n public abstract class RebalanceImpl {\n     protected static final Logger log = ClientLogger.getLog();\n-\n     // \u5206\u914d\u597d\u7684\u961f\u5217\uff0c\u6d88\u606f\u5b58\u50a8\u4e5f\u5728\u8fd9\u91cc\n     protected final ConcurrentHashMap<MessageQueue, ProcessQueue> processQueueTable =\n             new ConcurrentHashMap<MessageQueue, ProcessQueue>(64);\n-\n     // \u53ef\u4ee5\u8ba2\u9605\u7684\u6240\u6709\u961f\u5217\uff08\u5b9a\u65f6\u4eceName Server\u66f4\u65b0\u6700\u65b0\u7248\u672c\uff09\n     protected final ConcurrentHashMap<String/* topic */, Set<MessageQueue>> topicSubscribeInfoTable =\n             new ConcurrentHashMap<String, Set<MessageQueue>>();\n-\n     // \u8ba2\u9605\u5173\u7cfb\uff0c\u7528\u6237\u914d\u7f6e\u7684\u539f\u59cb\u6570\u636e\n     protected final ConcurrentHashMap<String /* topic */, SubscriptionData> subscriptionInner =\n             new ConcurrentHashMap<String, SubscriptionData>();\n-\n     protected String consumerGroup;\n     protected MessageModel messageModel;\n     protected AllocateMessageQueueStrategy allocateMessageQueueStrategy;\n@@ -69,19 +65,6 @@ public RebalanceImpl(String consumerGroup, MessageModel messageModel,\n     }\n \n \n-    public abstract void removeUnnecessaryMessageQueue(final MessageQueue mq, final ProcessQueue pq);\n-\n-\n-    public abstract void dispatchPullRequest(final List<PullRequest> pullRequestList);\n-\n-\n-    public abstract long computePullFromWhere(final MessageQueue mq);\n-\n-\n-    public abstract void messageQueueChanged(final String topic, final Set<MessageQueue> mqAll,\n-            final Set<MessageQueue> mqDivided);\n-\n-\n     public void unlock(final MessageQueue mq, final boolean oneway) {\n         FindBrokerResult findBrokerResult =\n                 this.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(), MixAll.MASTER_ID, true);\n@@ -140,6 +123,22 @@ public void unlockAll(final boolean oneway) {\n     }\n \n \n+    private HashMap<String/* brokerName */, Set<MessageQueue>> buildProcessQueueTableByBrokerName() {\n+        HashMap<String, Set<MessageQueue>> result = new HashMap<String, Set<MessageQueue>>();\n+        for (MessageQueue mq : this.processQueueTable.keySet()) {\n+            Set<MessageQueue> mqs = result.get(mq.getBrokerName());\n+            if (null == mqs) {\n+                mqs = new HashSet<MessageQueue>();\n+                result.put(mq.getBrokerName(), mqs);\n+            }\n+\n+            mqs.add(mq);\n+        }\n+\n+        return result;\n+    }\n+\n+\n     public boolean lock(final MessageQueue mq) {\n         FindBrokerResult findBrokerResult =\n                 this.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(), MixAll.MASTER_ID, true);\n@@ -177,22 +176,6 @@ public boolean lock(final MessageQueue mq) {\n     }\n \n \n-    private HashMap<String/* brokerName */, Set<MessageQueue>> buildProcessQueueTableByBrokerName() {\n-        HashMap<String, Set<MessageQueue>> result = new HashMap<String, Set<MessageQueue>>();\n-        for (MessageQueue mq : this.processQueueTable.keySet()) {\n-            Set<MessageQueue> mqs = result.get(mq.getBrokerName());\n-            if (null == mqs) {\n-                mqs = new HashSet<MessageQueue>();\n-                result.put(mq.getBrokerName(), mqs);\n-            }\n-\n-            mqs.add(mq);\n-        }\n-\n-        return result;\n-    }\n-\n-\n     public void lockAll() {\n         HashMap<String, Set<MessageQueue>> brokerMqs = this.buildProcessQueueTableByBrokerName();\n \n@@ -336,6 +319,9 @@ private void rebalanceByTopic(final String topic) {\n                         topic,//\n                         mqSet,//\n                         allocateResultSet);\n+\n+                    log.info(\"messageQueueChanged consumerIdList: {}\",//\n+                        cidAll);\n                 }\n             }\n             break;\n@@ -346,6 +332,10 @@ private void rebalanceByTopic(final String topic) {\n     }\n \n \n+    public abstract void messageQueueChanged(final String topic, final Set<MessageQueue> mqAll,\n+            final Set<MessageQueue> mqDivided);\n+\n+\n     private boolean updateProcessQueueTableInRebalance(final String topic, final Set<MessageQueue> mqSet) {\n         boolean changed = false;\n \n@@ -395,6 +385,15 @@ private boolean updateProcessQueueTableInRebalance(final String topic, final Set\n     }\n \n \n+    public abstract void removeUnnecessaryMessageQueue(final MessageQueue mq, final ProcessQueue pq);\n+\n+\n+    public abstract void dispatchPullRequest(final List<PullRequest> pullRequestList);\n+\n+\n+    public abstract long computePullFromWhere(final MessageQueue mq);\n+\n+\n     private void truncateMessageQueueNotMyTopic() {\n         Map<String, SubscriptionData> subTable = this.getSubscriptionInner();\n \n@@ -411,6 +410,11 @@ private void truncateMessageQueueNotMyTopic() {\n     }\n \n \n+    public ConcurrentHashMap<String, SubscriptionData> getSubscriptionInner() {\n+        return subscriptionInner;\n+    }\n+\n+\n     public ConcurrentHashMap<MessageQueue, ProcessQueue> getProcessQueueTable() {\n         return processQueueTable;\n     }\n@@ -421,11 +425,6 @@ public ConcurrentHashMap<String, Set<MessageQueue>> getTopicSubscribeInfoTable()\n     }\n \n \n-    public ConcurrentHashMap<String, SubscriptionData> getSubscriptionInner() {\n-        return subscriptionInner;\n-    }\n-\n-\n     public String getConsumerGroup() {\n         return consumerGroup;\n     }",
      "parent_sha": "49866cf0b8671126632bf6230a638cffa9464e44"
    }
  },
  {
    "oid": "87c0a03162bc9ee52c6ba920b27eb7d42b02fb8d",
    "message": "Refactor LOGGER.warn()",
    "date": "2023-02-14T05:50:47Z",
    "url": "https://github.com/apache/rocketmq/commit/87c0a03162bc9ee52c6ba920b27eb7d42b02fb8d",
    "details": {
      "sha": "baa71e1bab48340e9fb48c8db3716efca3db8034",
      "filename": "store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/87c0a03162bc9ee52c6ba920b27eb7d42b02fb8d/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/87c0a03162bc9ee52c6ba920b27eb7d42b02fb8d/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FDefaultMessageStore.java?ref=87c0a03162bc9ee52c6ba920b27eb7d42b02fb8d",
      "patch": "@@ -2889,7 +2889,7 @@ private void pollBatchDispatchRequest() {\n                     batchDispatchRequestQueue.poll();\n                 }\n             } catch (Exception e) {\n-                LOGGER.warn(e.getMessage());\n+                DefaultMessageStore.LOGGER.warn(this.getServiceName() + \" service has exception. \", e);\n             }\n         }\n ",
      "parent_sha": "d211e8664d78713ac3dd5424440b1e119d418b14"
    }
  },
  {
    "oid": "edab18a32ad64b6bd1fbc75f91a635a65f893367",
    "message": "[ISSUE #3949] v2 support",
    "date": "2022-07-13T03:29:20Z",
    "url": "https://github.com/apache/rocketmq/commit/edab18a32ad64b6bd1fbc75f91a635a65f893367",
    "details": {
      "sha": "73a9d0d246ff47dccb0170601a3bb01f1ba10095",
      "filename": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/service/cluster/ConsumerService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/rocketmq/blob/edab18a32ad64b6bd1fbc75f91a635a65f893367/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fservice%2Fcluster%2FConsumerService.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/edab18a32ad64b6bd1fbc75f91a635a65f893367/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fservice%2Fcluster%2FConsumerService.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fservice%2Fcluster%2FConsumerService.java?ref=edab18a32ad64b6bd1fbc75f91a635a65f893367",
      "patch": "@@ -132,7 +132,8 @@ public CompletableFuture<ReceiveMessageResponse> receiveMessage(Context ctx, Rec\n \n     protected PopMessageRequestHeader buildPopMessageRequestHeader(Context ctx, ReceiveMessageRequest request) {\n         checkSubscriptionData(request.getMessageQueue().getTopic(), request.getFilterExpression());\n-        boolean fifo = grpcClientManager.getClientSettings(ctx).getSubscription().getFifo();\n+        // TODO: get fifo config from subscriptionGroupManager\n+        boolean fifo = false;\n         return GrpcConverter.buildPopMessageRequestHeader(request, GrpcConverter.buildPollTimeFromContext(ctx), fifo);\n     }\n ",
      "parent_sha": "051fcb87da69250ba6b736384a3cd62f2b2b34bd"
    }
  },
  {
    "oid": "0f153b9dcfec0dd272d995ba578acd2ccd412e68",
    "message": "Update CountDownLatch2.java",
    "date": "2018-11-06T11:42:19Z",
    "url": "https://github.com/apache/rocketmq/commit/0f153b9dcfec0dd272d995ba578acd2ccd412e68",
    "details": {
      "sha": "9c95fff7bbac57d14f271f483e405182a9c14ec8",
      "filename": "common/src/main/java/org/apache/rocketmq/common/CountDownLatch2.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/0f153b9dcfec0dd272d995ba578acd2ccd412e68/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fcommon%2FCountDownLatch2.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/0f153b9dcfec0dd272d995ba578acd2ccd412e68/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fcommon%2FCountDownLatch2.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fcommon%2FCountDownLatch2.java?ref=0f153b9dcfec0dd272d995ba578acd2ccd412e68",
      "patch": "@@ -21,7 +21,7 @@\n import java.util.concurrent.locks.AbstractQueuedSynchronizer;\n \n /**\n- * Add reset feature for @see java.util.concurrent.CountDownLatch2\n+ * Add reset feature for @see java.util.concurrent.CountDownLatch\n  */\n public class CountDownLatch2 {\n     private final Sync sync;",
      "parent_sha": "ec407e939df76a4bdf84fe150f52945c13d8768a"
    }
  },
  {
    "oid": "19cd1420dc02e3c2440da1caa9818a1d850da582",
    "message": "#247 \u6d88\u606f\u91cd\u8bd5\u65f6 %RETRY% \u4f5c\u4e3a\u524d\u7f00\u6807\u8bc6\uff0c\u4e0e\u540c\u662f\u865a\u62df\u9879\u76ee\u5206\u7ec4\u524d\u7f00\u7684 %PROJECT_% \u51b2\u7a81\u3002\u5c06 %PROJECT_% \u6539\u6210\u540e\u7f00\u53ef\u5feb\u901f\u89e3\u51b3\uff0c\u4e0d\u9700\u8981\u505a %RETRY% \u65f6\u7684\u7279\u6b8a\u5904\u7406\u3002",
    "date": "2013-09-11T09:25:29Z",
    "url": "https://github.com/apache/rocketmq/commit/19cd1420dc02e3c2440da1caa9818a1d850da582",
    "details": {
      "sha": "36bf44cb24e88bdba9872a2de2f88fc6311c8ca9",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/VirtualEnvUtil.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/apache/rocketmq/blob/19cd1420dc02e3c2440da1caa9818a1d850da582/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2FVirtualEnvUtil.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/19cd1420dc02e3c2440da1caa9818a1d850da582/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2FVirtualEnvUtil.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2FVirtualEnvUtil.java?ref=19cd1420dc02e3c2440da1caa9818a1d850da582",
      "patch": "@@ -23,8 +23,8 @@ public class VirtualEnvUtil {\n     public static String buildWithProjectGroup(String origin, String projectGroup) {\n         if (!UtilALl.isBlank(projectGroup)) {\n             String prefix = String.format(VIRTUAL_APPGROUP_PREFIX, projectGroup);\n-            if (!origin.startsWith(prefix)) {\n-                return prefix + origin;\n+            if (!origin.endsWith(prefix)) {\n+                return origin + prefix;\n             }\n             else {\n                 return origin;\n@@ -45,8 +45,8 @@ public static String buildWithProjectGroup(String origin, String projectGroup) {\n      */\n     public static String clearProjectGroup(String origin, String projectGroup) {\n         String prefix = String.format(VIRTUAL_APPGROUP_PREFIX, projectGroup);\n-        if (!UtilALl.isBlank(prefix) && origin.startsWith(prefix)) {\n-            return origin.substring(prefix.length());\n+        if (!UtilALl.isBlank(prefix) && origin.endsWith(prefix)) {\n+            return origin.substring(0, origin.lastIndexOf(prefix));\n         }\n         else {\n             return origin;\n@@ -55,7 +55,9 @@ public static String clearProjectGroup(String origin, String projectGroup) {\n \n \n     public static void main(String[] args) {\n-        String str = \"%PROJECT_AAA%bbbb\";\n-        System.out.println(clearProjectGroup(str, \"AAA\"));\n+        String ori = \"bbbb\";\n+        String str = buildWithProjectGroup(ori, \"AAA\");\n+        System.out.println(\"build=\" + str);\n+        System.out.println(\"ori=\" + clearProjectGroup(str, \"AAA\"));\n     }\n }",
      "parent_sha": "632260f48d32f37046bb98d4c57ab4e49346e03d"
    }
  },
  {
    "oid": "073344257d6b29a75d74a53230365a1848296b31",
    "message": "\u4fee\u590d\u65e0\u6cd5\u4ecejar\u5305\u8bfb\u53d6\u8fc7\u6ee4\u7c7b\u7684\u95ee\u9898",
    "date": "2014-05-23T03:06:00Z",
    "url": "https://github.com/apache/rocketmq/commit/073344257d6b29a75d74a53230365a1848296b31",
    "details": {
      "sha": "3f8b4c8ee107832dae7c1306156853be68ec78cd",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java",
      "status": "modified",
      "additions": 21,
      "deletions": 6,
      "changes": 27,
      "blob_url": "https://github.com/apache/rocketmq/blob/073344257d6b29a75d74a53230365a1848296b31/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMixAll.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/073344257d6b29a75d74a53230365a1848296b31/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMixAll.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMixAll.java?ref=073344257d6b29a75d74a53230365a1848296b31",
      "patch": "@@ -30,8 +30,8 @@\n import java.net.InetSocketAddress;\n import java.net.NetworkInterface;\n import java.net.SocketException;\n-import java.net.URISyntaxException;\n import java.net.URL;\n+import java.net.URLConnection;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n@@ -60,11 +60,11 @@ public class MixAll {\n     public static final String NAMESRV_ADDR_PROPERTY = \"rocketmq.namesrv.addr\";\n     public static final String MESSAGE_COMPRESS_LEVEL = \"rocketmq.message.compressLevel\";\n     public static final String WS_DOMAIN_NAME = System.getProperty(\"rocketmq.namesrv.domain\",\n-        \"jmenv.tbsite.net\");\n+        \"jmenv.tbsite.net:8080\");\n     public static final String WS_DOMAIN_SUBGROUP = System.getProperty(\"rocketmq.namesrv.domain.subgroup\",\n         \"nsaddr\");\n     // http://jmenv.tbsite.net:8080/rocketmq/nsaddr\n-    public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n+    public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \"/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n     public static final String DEFAULT_TOPIC = \"TBW102\";\n     public static final String BENCHMARK_TOPIC = \"BenchmarkTest\";\n     public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\";\n@@ -181,11 +181,26 @@ public static final String file2String(final String fileName) {\n \n \n     public static final String file2String(final URL url) {\n+        InputStream in = null;\n         try {\n-            File file = new File(url.toURI());\n-            return file2String(file);\n+            URLConnection urlConnection = url.openConnection();\n+            urlConnection.setUseCaches(false);\n+            in = urlConnection.getInputStream();\n+            int len = in.available();\n+            byte[] data = new byte[len];\n+            in.read(data, 0, len);\n+            return new String(data, \"UTF-8\");\n         }\n-        catch (URISyntaxException e) {\n+        catch (Exception e) {\n+        }\n+        finally {\n+            if (null != in) {\n+                try {\n+                    in.close();\n+                }\n+                catch (IOException e) {\n+                }\n+            }\n         }\n \n         return null;",
      "parent_sha": "f7405653a10dfafe8a3f4ed0de15429f2068fa1a"
    }
  },
  {
    "oid": "8c22bcad481f180c64295131997063cd3ed65c6c",
    "message": "[ISSUE #4941] Producer example add the default NamesrvAddr (#5032)",
    "date": "2022-09-13T12:36:06Z",
    "url": "https://github.com/apache/rocketmq/commit/8c22bcad481f180c64295131997063cd3ed65c6c",
    "details": {
      "sha": "2b838a2eb5a74de05f01acec9e05101e72a8a15a",
      "filename": "example/src/main/java/org/apache/rocketmq/example/simple/Producer.java",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/apache/rocketmq/blob/8c22bcad481f180c64295131997063cd3ed65c6c/example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fexample%2Fsimple%2FProducer.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/8c22bcad481f180c64295131997063cd3ed65c6c/example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fexample%2Fsimple%2FProducer.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fexample%2Fsimple%2FProducer.java?ref=8c22bcad481f180c64295131997063cd3ed65c6c",
      "patch": "@@ -23,22 +23,25 @@\n import org.apache.rocketmq.remoting.common.RemotingHelper;\n \n public class Producer {\n+\n+    public static final String PRODUCER_GROUP = \"ProducerGroupName\";\n+    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n+    public static final String TOPIC = \"TopicTest\";\n+    public static final String TAG = \"TagA\";\n+\n     public static void main(String[] args) throws MQClientException, InterruptedException {\n \n-        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n-        producer.start();\n+        DefaultMQProducer producer = new DefaultMQProducer(PRODUCER_GROUP);\n \n+        // Uncomment the following line while debugging, namesrvAddr should be set to your local address\n+        //producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n+\n+        producer.start();\n         for (int i = 0; i < 128; i++)\n             try {\n-                {\n-                    Message msg = new Message(\"TopicTest\",\n-                        \"TagA\",\n-                        \"OrderID188\",\n-                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n-                    SendResult sendResult = producer.send(msg);\n-                    System.out.printf(\"%s%n\", sendResult);\n-                }\n-\n+                Message msg = new Message(TOPIC, TAG, \"OrderID188\", \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n+                SendResult sendResult = producer.send(msg);\n+                System.out.printf(\"%s%n\", sendResult);\n             } catch (Exception e) {\n                 e.printStackTrace();\n             }",
      "parent_sha": "7067305aa69abc0dcd8f4c06656859899dce3a85"
    }
  },
  {
    "oid": "7722ce78eef7864eb5bcae125b538be980f0569e",
    "message": "[ISSUE #9080] Not hold final message store config in fetcher (#9086)",
    "date": "2024-12-30T07:21:25Z",
    "url": "https://github.com/apache/rocketmq/commit/7722ce78eef7864eb5bcae125b538be980f0569e",
    "details": {
      "sha": "bc347bd5b47e71e84fddc99ace11f25b8f92f1b4",
      "filename": "tieredstore/src/main/java/org/apache/rocketmq/tieredstore/core/MessageStoreFetcherImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/apache/rocketmq/blob/7722ce78eef7864eb5bcae125b538be980f0569e/tieredstore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ftieredstore%2Fcore%2FMessageStoreFetcherImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/7722ce78eef7864eb5bcae125b538be980f0569e/tieredstore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ftieredstore%2Fcore%2FMessageStoreFetcherImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tieredstore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ftieredstore%2Fcore%2FMessageStoreFetcherImpl.java?ref=7722ce78eef7864eb5bcae125b538be980f0569e",
      "patch": "@@ -56,7 +56,6 @@ public class MessageStoreFetcherImpl implements MessageStoreFetcher {\n     private final String brokerName;\n     private final MetadataStore metadataStore;\n     private final MessageStoreConfig storeConfig;\n-    private final org.apache.rocketmq.store.config.MessageStoreConfig messageStoreConfig;\n     private final TieredMessageStore messageStore;\n     private final IndexService indexService;\n     private final FlatFileStore flatFileStore;\n@@ -72,7 +71,6 @@ public MessageStoreFetcherImpl(TieredMessageStore messageStore, MessageStoreConf\n         FlatFileStore flatFileStore, IndexService indexService) {\n \n         this.storeConfig = storeConfig;\n-        this.messageStoreConfig = messageStore.getMessageStoreConfig();\n         this.brokerName = storeConfig.getBrokerName();\n         this.flatFileStore = flatFileStore;\n         this.messageStore = messageStore;\n@@ -150,7 +148,8 @@ protected GetMessageResultExt getMessageFromCache(\n             if (result.getMessageCount() == maxCount) {\n                 break;\n             }\n-            if (result.getBufferTotalSize() >= messageStoreConfig.getMaxTransferBytesOnMessageInMemory()) {\n+            long maxTransferBytes = messageStore.getMessageStoreConfig().getMaxTransferBytesOnMessageInMemory();\n+            if (result.getBufferTotalSize() >= maxTransferBytes) {\n                 break;\n             }\n         }",
      "parent_sha": "19393e047515db3d65e898bb254c1f16d62ffcd3"
    }
  },
  {
    "oid": "d15234c683216db9e0f77578d4adffd3e42406eb",
    "message": "Improve exception handle of transaction check service (#1783)",
    "date": "2020-02-24T01:01:31Z",
    "url": "https://github.com/apache/rocketmq/commit/d15234c683216db9e0f77578d4adffd3e42406eb",
    "details": {
      "sha": "f7ba2e38a47fa09463faf1fd2b69f1bcfb2c6bab",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/rocketmq/blob/d15234c683216db9e0f77578d4adffd3e42406eb/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Ftransaction%2Fqueue%2FTransactionalMessageServiceImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/d15234c683216db9e0f77578d4adffd3e42406eb/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Ftransaction%2Fqueue%2FTransactionalMessageServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Ftransaction%2Fqueue%2FTransactionalMessageServiceImpl.java?ref=d15234c683216db9e0f77578d4adffd3e42406eb",
      "patch": "@@ -240,8 +240,7 @@ public void check(long transactionTimeout, int transactionCheckMax,\n                     transactionalMessageBridge.updateConsumeOffset(opQueue, newOpOffset);\n                 }\n             }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+        } catch (Throwable e) {\n             log.error(\"Check error\", e);\n         }\n ",
      "parent_sha": "35c38888e0d5678fb4aaad5ba8534b7552d9a9a0"
    }
  },
  {
    "oid": "4d63c43730d86840ae1998b8ee34c2abe6b461f8",
    "message": "\u4e3aMQVersion\u589e\u52a0\u5404\u4e2a\u7248\u672c\u3002",
    "date": "2014-05-13T05:28:04Z",
    "url": "https://github.com/apache/rocketmq/commit/4d63c43730d86840ae1998b8ee34c2abe6b461f8",
    "details": {
      "sha": "6ada38be856b4b69d347c1ef3bd1e86548bb5f87",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/apache/rocketmq/blob/4d63c43730d86840ae1998b8ee34c2abe6b461f8/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/4d63c43730d86840ae1998b8ee34c2abe6b461f8/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java?ref=4d63c43730d86840ae1998b8ee34c2abe6b461f8",
      "patch": "@@ -87,16 +87,35 @@ public static enum Version {\n \n         V3_0_15_SNAPSHOT,\n         V3_0_15,\n-        V3_1_0,\n+\n         V3_1_0_SNAPSHOT,\n+        V3_1_0,\n+\n+        V3_1_1_SNAPSHOT,\n         V3_1_1,\n+\n+        V3_1_2_SNAPSHOT,\n         V3_1_2,\n+\n+        V3_1_3_SNAPSHOT,\n         V3_1_3,\n+\n+        V3_1_4_SNAPSHOT,\n         V3_1_4,\n+\n+        V3_1_5_SNAPSHOT,\n         V3_1_5,\n+\n+        V3_1_6_SNAPSHOT,\n         V3_1_6,\n+\n+        V3_1_7_SNAPSHOT,\n         V3_1_7,\n+\n+        V3_1_8_SNAPSHOT,\n         V3_1_8,\n+\n+        V3_1_9_SNAPSHOT,\n         V3_1_9,\n     }\n }",
      "parent_sha": "8e6478455a9abd0854a26298cfae249902cee8c2"
    }
  },
  {
    "oid": "acc51efaff4eff5a862e6c9a92d0619d02eee06d",
    "message": "#253 \u4f18\u5316\u6d88\u8d39\u8fdb\u5ea6\u67e5\u8be2\u547d\u4ee4",
    "date": "2013-10-20T10:03:11Z",
    "url": "https://github.com/apache/rocketmq/commit/acc51efaff4eff5a862e6c9a92d0619d02eee06d",
    "details": {
      "sha": "104149c1bfa143a9873b800b6d4ee0dd88c931ac",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/body/ConsumerConnection.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/acc51efaff4eff5a862e6c9a92d0619d02eee06d/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fprotocol%2Fbody%2FConsumerConnection.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/acc51efaff4eff5a862e6c9a92d0619d02eee06d/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fprotocol%2Fbody%2FConsumerConnection.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fprotocol%2Fbody%2FConsumerConnection.java?ref=acc51efaff4eff5a862e6c9a92d0619d02eee06d",
      "patch": "@@ -26,7 +26,7 @@ public class ConsumerConnection extends RemotingSerializable {\n \n \n     public int computeMinVersion() {\n-        int minVersion = Integer.MIN_VALUE;\n+        int minVersion = Integer.MAX_VALUE;\n         for (Connection c : this.connectionSet) {\n             if (c.getVersion() < minVersion) {\n                 minVersion = c.getVersion();",
      "parent_sha": "7ea1ace26783d509724888cf9f5e494e914fbbac"
    }
  },
  {
    "oid": "3a5cdfa59a4674b8e742433f096a07c280b8c9c3",
    "message": "[ISSUE #3624]DefaultMQPushConsumerTest.testPullMessage_ExceptionOccursWhenComputePullFromWhere throws RejectedExecution (#3626)",
    "date": "2021-12-11T06:06:54Z",
    "url": "https://github.com/apache/rocketmq/commit/3a5cdfa59a4674b8e742433f096a07c280b8c9c3",
    "details": {
      "sha": "df87932b2ed8a55ea651f702727749920a103e19",
      "filename": "client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/apache/rocketmq/blob/3a5cdfa59a4674b8e742433f096a07c280b8c9c3/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumerTest.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/3a5cdfa59a4674b8e742433f096a07c280b8c9c3/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumerTest.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumerTest.java?ref=3a5cdfa59a4674b8e742433f096a07c280b8c9c3",
      "patch": "@@ -57,7 +57,7 @@\n import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;\n import org.apache.rocketmq.remoting.RPCHook;\n import org.apache.rocketmq.remoting.exception.RemotingException;\n-import org.junit.After;\n+import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -75,7 +75,6 @@\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.nullable;\n import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n \n@@ -90,7 +89,7 @@ public class DefaultMQPushConsumerTest {\n     private MQClientAPIImpl mQClientAPIImpl;\n     private RebalanceImpl rebalanceImpl;\n     private RebalancePushImpl rebalancePushImpl;\n-    private DefaultMQPushConsumer pushConsumer;\n+    private static DefaultMQPushConsumer pushConsumer;\n \n     @Before\n     public void init() throws Exception {\n@@ -157,8 +156,8 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n         pushConsumer.start();\n     }\n \n-    @After\n-    public void terminate() {\n+    @AfterClass\n+    public static void terminate() {\n         pushConsumer.shutdown();\n     }\n ",
      "parent_sha": "67225fdabee62700e28f7ef911bb72daaac081e3"
    }
  },
  {
    "oid": "50436cf56c0e94ce930fe0634a15b7d590c3d09a",
    "message": "\u8c03\u6574name server\u7684\u5f02\u5e38\u65e5\u5fd7",
    "date": "2014-05-06T08:05:13Z",
    "url": "https://github.com/apache/rocketmq/commit/50436cf56c0e94ce930fe0634a15b7d590c3d09a",
    "details": {
      "sha": "9fd2b64486c9cee22aa6a08163e61710d45da419",
      "filename": "rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/routeinfo/RouteInfoManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/50436cf56c0e94ce930fe0634a15b7d590c3d09a/rocketmq-namesrv%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fnamesrv%2Frouteinfo%2FRouteInfoManager.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/50436cf56c0e94ce930fe0634a15b7d590c3d09a/rocketmq-namesrv%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fnamesrv%2Frouteinfo%2FRouteInfoManager.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-namesrv%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fnamesrv%2Frouteinfo%2FRouteInfoManager.java?ref=50436cf56c0e94ce930fe0634a15b7d590c3d09a",
      "patch": "@@ -519,10 +519,12 @@ public void onChannelDestroy(String remoteAddr, Channel channel) {\n         if (null == brokerAddrFound) {\n             brokerAddrFound = remoteAddr;\n         }\n+        else {\n+            log.info(\"the broker's channel destroyed, {}, clean it's data structure at once\", brokerAddrFound);\n+        }\n \n         // \u52a0\u5199\u9501\uff0c\u5220\u9664\u76f8\u5173\u6570\u636e\u7ed3\u6784\n         if (brokerAddrFound != null && brokerAddrFound.length() > 0) {\n-            log.info(\"the broker's channel destroyed, {}, clean it's data structure at once\", brokerAddrFound);\n \n             try {\n                 try {",
      "parent_sha": "c4cd745d5189600e60d1d8cb137ad351d3fc8071"
    }
  },
  {
    "oid": "6323754621826fee50b8912f9feae0c46a91766b",
    "message": "[ISSUE #2698] TopicRouteSubCommand enhancement",
    "date": "2021-03-07T05:02:53Z",
    "url": "https://github.com/apache/rocketmq/commit/6323754621826fee50b8912f9feae0c46a91766b",
    "details": {
      "sha": "1b6979b8e653dc5009b7c3b059c350723d0360cb",
      "filename": "tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/rocketmq/blob/6323754621826fee50b8912f9feae0c46a91766b/tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ftools%2Fcommand%2Ftopic%2FTopicRouteSubCommand.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/6323754621826fee50b8912f9feae0c46a91766b/tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ftools%2Fcommand%2Ftopic%2FTopicRouteSubCommand.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Ftools%2Fcommand%2Ftopic%2FTopicRouteSubCommand.java?ref=6323754621826fee50b8912f9feae0c46a91766b",
      "patch": "@@ -34,7 +34,7 @@\n \n public class TopicRouteSubCommand implements SubCommand {\n \n-    private static final String FORMAT = \"%-45s %-32s %-50s %-10s %-11s %-5s\\n\";\n+    private static final String FORMAT = \"%-45s %-32s %-50s %-10s %-11s %-5s%n\";\n \n     @Override\n     public String commandName() {\n@@ -80,7 +80,7 @@ public void execute(final CommandLine commandLine, final Options options,\n \n     private void printData(TopicRouteData topicRouteData, boolean useListFormat) {\n         if (!useListFormat) {\n-            System.out.printf(\"%s\\n\", topicRouteData.toJson(true));\n+            System.out.printf(\"%s%n\", topicRouteData.toJson(true));\n             return;\n         }\n \n@@ -109,7 +109,7 @@ private void printData(TopicRouteData topicRouteData, boolean useListFormat) {\n         for (int i = 0; i < 158; i++) {\n             System.out.print(\"-\");\n         }\n-        System.out.print(\"\\n\");\n+        System.out.print(\"%n\");\n         System.out.printf(FORMAT, \"Total:\", map.keySet().size(), \"\", totalReadQueue, totalWriteQueue, \"\");\n     }\n }\n\\ No newline at end of file",
      "parent_sha": "40d4a22e324a2fd4cf71ccc95fe877b01cf2c503"
    }
  },
  {
    "oid": "edcb83c8b366604548f4fb305c90a609dbfa0f55",
    "message": "fixed #95 \u8bbf\u95eeNamesrv\u7684\u57df\u540d\u652f\u6301\u901a\u8fc7Java -D\u8bbe\u7f6e",
    "date": "2013-07-03T10:31:33Z",
    "url": "https://github.com/apache/rocketmq/commit/edcb83c8b366604548f4fb305c90a609dbfa0f55",
    "details": {
      "sha": "9a59ddae3705f18852e5142bbdd95c28f586fc6a",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/rocketmq/blob/edcb83c8b366604548f4fb305c90a609dbfa0f55/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMixAll.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/edcb83c8b366604548f4fb305c90a609dbfa0f55/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMixAll.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMixAll.java?ref=edcb83c8b366604548f4fb305c90a609dbfa0f55",
      "patch": "@@ -52,7 +52,8 @@ public class MixAll {\n     public static final String NAMESRV_ADDR_ENV = \"NAMESRV_ADDR\";\r\n     public static final String NAMESRV_ADDR_PROPERTY = \"rocketmq.namesrv.addr\";\r\n \r\n-    public static final String WS_DOMAIN_NAME = \"jmenv.tbsite.net\";\r\n+    public static final String WS_DOMAIN_NAME = System.getProperty(\"rocketmq.namesrv.domain\",\r\n+        \"jmenv.tbsite.net\");\r\n     // http://jmenv.tbsite.net:8080/rocketmq/nsaddr\r\n     public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/nsaddr\";\r\n     public static final String DEFAULT_TOPIC = \"TBW102\";\r",
      "parent_sha": "c8c9d5fcc3817813c590a702f3357101dfa18f56"
    }
  },
  {
    "oid": "5bc16ec1cbb2695393ca3e48a677a86cb3cc20f7",
    "message": "#317 \u4fee\u6539\u65e5\u5fd7\u3002",
    "date": "2013-12-25T02:44:32Z",
    "url": "https://github.com/apache/rocketmq/commit/5bc16ec1cbb2695393ca3e48a677a86cb3cc20f7",
    "details": {
      "sha": "1bffc23d8e395cabe74c283b4e4cb3b51cf1dbc9",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/consumer/RebalanceImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/5bc16ec1cbb2695393ca3e48a677a86cb3cc20f7/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/5bc16ec1cbb2695393ca3e48a677a86cb3cc20f7/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Fconsumer%2FRebalanceImpl.java?ref=5bc16ec1cbb2695393ca3e48a677a86cb3cc20f7",
      "patch": "@@ -324,8 +324,8 @@ private void rebalanceByTopic(final String topic) {\n                 // \u66f4\u65b0\u672c\u5730\u961f\u5217\n                 boolean changed = this.updateProcessQueueTableInRebalance(topic, allocateResultSet);\n                 if (changed) {\n-                    log.info(\"reblance result is [{}], ConsumerId is [{}], mqAll is[{}], cidAll is [{}]\",\n-                        allocateResult, this.mQClientFactory.getClientId(), mqAll, cidAll);\n+                    log.info(\"rebalanced result changed. mqSet={}, ConsumerId={}, mqSize={}, cidSize={}\",\n+                        allocateResult, this.mQClientFactory.getClientId(), mqAll.size(), cidAll.size());\n \n                     this.messageQueueChanged(topic, mqSet, allocateResultSet);\n                     log.info(\"messageQueueChanged {} {} {} {}\",//",
      "parent_sha": "867acd87766374e502dc607b8afe67212dfcfce2"
    }
  },
  {
    "oid": "2477c5a8abc7d7419a3a26904a96551b84249518",
    "message": "#4 \u4fee\u6539\u6837\u5f0f\uff0c\u589e\u52a0\u4f5c\u8005\u4fe1\u606f",
    "date": "2013-07-30T11:43:54Z",
    "url": "https://github.com/apache/rocketmq/commit/2477c5a8abc7d7419a3a26904a96551b84249518",
    "details": {
      "sha": "d3c071ce8ca6501919ae0567738e66a0492b9b22",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragely.java",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/apache/rocketmq/blob/2477c5a8abc7d7419a3a26904a96551b84249518/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2Frebalance%2FAllocateMessageQueueAveragely.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/2477c5a8abc7d7419a3a26904a96551b84249518/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2Frebalance%2FAllocateMessageQueueAveragely.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fconsumer%2Frebalance%2FAllocateMessageQueueAveragely.java?ref=2477c5a8abc7d7419a3a26904a96551b84249518",
      "patch": "@@ -25,7 +25,8 @@\n /**\n  * \u5e73\u5747\u5206\u914d\u961f\u5217\u7b97\u6cd5\n  * \n- * @author shijia.wxr<vintage.wang@gmail.com>\n+ * @author fuchong<yubao.fyb@alibaba-inc.com>\n+ * @author manhong.yqd<manhong.yqd@taobao.com>\n  * @since 2013-7-24\n  */\n public class AllocateMessageQueueAveragely implements AllocateMessageQueueStrategy {\n@@ -46,14 +47,14 @@ public List<MessageQueue> allocate(String currentCID, List<MessageQueue> mqAll,\n             return result;\n         }\n \n-\t    int index = cidAll.indexOf(currentCID);\n-\t    int averageSize = (mqAll.size() <= cidAll.size()) ? 1 : mqAll.size() / cidAll.size();\n-\t    int mod = mqAll.size() % cidAll.size();\n-\t    int startIndex = index * averageSize;\n-\t    int endIndex = Math.min((index + 1) * averageSize, mqAll.size());\n-\t    for (int i = startIndex; i < endIndex; i++) {\n-\t\t    result.add(mqAll.get(i % mqAll.size()));\n-\t    }\n+        int index = cidAll.indexOf(currentCID);\n+        int averageSize = (mqAll.size() <= cidAll.size()) ? 1 : mqAll.size() / cidAll.size();\n+        int mod = mqAll.size() % cidAll.size();\n+        int startIndex = index * averageSize;\n+        int endIndex = Math.min((index + 1) * averageSize, mqAll.size());\n+        for (int i = startIndex; i < endIndex; i++) {\n+            result.add(mqAll.get(i % mqAll.size()));\n+        }\n \n         // \u5982\u679c\u5f53\u524d\u7684consumerId\u6700\u540e\u4e00\u4e2a\u4e14\u8fd8\u6709\u5269\u4e0b\u7684\u961f\u5217\uff0c\u5e94\u8be5\u628a\u6700\u540e\u961f\u5217\u90fd\u653e\u5230\u5f53\u524dconsumerId\u961f\u5217\u91cc\n         boolean isAddRemainQueue = (index == cidAll.size() - 1) && mod > 0;",
      "parent_sha": "bae9f3cf92efee568c04cb6836e21af06b06f47a"
    }
  },
  {
    "oid": "91fdc35db305e4db86894a195b86c6102853ae72",
    "message": "Fix the permission check for retry topic to get topic route. (#9073)",
    "date": "2024-12-20T07:39:46Z",
    "url": "https://github.com/apache/rocketmq/commit/91fdc35db305e4db86894a195b86c6102853ae72",
    "details": {
      "sha": "fababc0ee7143395b63f727f573ce2b76f7f12da",
      "filename": "auth/src/main/java/org/apache/rocketmq/auth/authorization/builder/DefaultAuthorizationContextBuilder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/apache/rocketmq/blob/91fdc35db305e4db86894a195b86c6102853ae72/auth%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fauth%2Fauthorization%2Fbuilder%2FDefaultAuthorizationContextBuilder.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/91fdc35db305e4db86894a195b86c6102853ae72/auth%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fauth%2Fauthorization%2Fbuilder%2FDefaultAuthorizationContextBuilder.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/auth%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fauth%2Fauthorization%2Fbuilder%2FDefaultAuthorizationContextBuilder.java?ref=91fdc35db305e4db86894a195b86c6102853ae72",
      "patch": "@@ -182,8 +182,13 @@ public List<DefaultAuthorizationContext> build(ChannelHandlerContext context, Re\n             Resource group;\n             switch (command.getCode()) {\n                 case RequestCode.GET_ROUTEINFO_BY_TOPIC:\n-                    topic = Resource.ofTopic(fields.get(TOPIC));\n-                    result.add(DefaultAuthorizationContext.of(subject, topic, Arrays.asList(Action.PUB, Action.SUB, Action.GET), sourceIp));\n+                    if (NamespaceUtil.isRetryTopic(fields.get(TOPIC))) {\n+                        group = Resource.ofGroup(fields.get(TOPIC));\n+                        result.add(DefaultAuthorizationContext.of(subject, group, Arrays.asList(Action.SUB, Action.GET), sourceIp));\n+                    } else {\n+                        topic = Resource.ofTopic(fields.get(TOPIC));\n+                        result.add(DefaultAuthorizationContext.of(subject, topic, Arrays.asList(Action.PUB, Action.SUB, Action.GET), sourceIp));\n+                    }\n                     break;\n                 case RequestCode.SEND_MESSAGE:\n                     if (NamespaceUtil.isRetryTopic(fields.get(TOPIC))) {",
      "parent_sha": "16b6e53263477794125a49d9f31a994a510970b7"
    }
  },
  {
    "oid": "5c8374c4315e9aada369d163eadc1f790f6b1304",
    "message": "[ISSUE #3949] Add unit test",
    "date": "2022-07-13T03:29:12Z",
    "url": "https://github.com/apache/rocketmq/commit/5c8374c4315e9aada369d163eadc1f790f6b1304",
    "details": {
      "sha": "093b0a47a674b873708adb1a0ab6de15d4d1236c",
      "filename": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/service/LocalGrpcServiceTest.java",
      "status": "modified",
      "additions": 390,
      "deletions": 32,
      "changes": 422,
      "blob_url": "https://github.com/apache/rocketmq/blob/5c8374c4315e9aada369d163eadc1f790f6b1304/proxy%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fservice%2FLocalGrpcServiceTest.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/5c8374c4315e9aada369d163eadc1f790f6b1304/proxy%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fservice%2FLocalGrpcServiceTest.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fservice%2FLocalGrpcServiceTest.java?ref=5c8374c4315e9aada369d163eadc1f790f6b1304",
      "patch": "@@ -17,14 +17,35 @@\n \n package org.apache.rocketmq.proxy.grpc.service;\n \n+import apache.rocketmq.v1.AckMessageRequest;\n+import apache.rocketmq.v1.AckMessageResponse;\n+import apache.rocketmq.v1.ChangeInvisibleDurationRequest;\n+import apache.rocketmq.v1.ChangeInvisibleDurationResponse;\n+import apache.rocketmq.v1.ConsumerData;\n+import apache.rocketmq.v1.EndTransactionRequest;\n+import apache.rocketmq.v1.EndTransactionResponse;\n+import apache.rocketmq.v1.ForwardMessageToDeadLetterQueueRequest;\n+import apache.rocketmq.v1.ForwardMessageToDeadLetterQueueResponse;\n import apache.rocketmq.v1.HeartbeatRequest;\n import apache.rocketmq.v1.HeartbeatResponse;\n import apache.rocketmq.v1.Message;\n+import apache.rocketmq.v1.NackMessageRequest;\n+import apache.rocketmq.v1.NackMessageResponse;\n+import apache.rocketmq.v1.NotifyClientTerminationRequest;\n+import apache.rocketmq.v1.Partition;\n+import apache.rocketmq.v1.ProducerData;\n+import apache.rocketmq.v1.PullMessageRequest;\n+import apache.rocketmq.v1.PullMessageResponse;\n+import apache.rocketmq.v1.QueryOffsetPolicy;\n+import apache.rocketmq.v1.QueryOffsetRequest;\n+import apache.rocketmq.v1.QueryOffsetResponse;\n import apache.rocketmq.v1.ReceiveMessageRequest;\n import apache.rocketmq.v1.ReceiveMessageResponse;\n+import apache.rocketmq.v1.Resource;\n import apache.rocketmq.v1.SendMessageRequest;\n import apache.rocketmq.v1.SendMessageResponse;\n import apache.rocketmq.v1.SystemAttribute;\n+import com.google.protobuf.Timestamp;\n import com.google.protobuf.util.Durations;\n import com.google.rpc.Code;\n import io.grpc.Context;\n@@ -33,22 +54,34 @@\n import java.net.InetSocketAddress;\n import java.nio.charset.StandardCharsets;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import org.apache.rocketmq.broker.BrokerController;\n+import org.apache.rocketmq.broker.processor.AckMessageProcessor;\n+import org.apache.rocketmq.broker.processor.ChangeInvisibleTimeProcessor;\n import org.apache.rocketmq.broker.processor.ClientManageProcessor;\n+import org.apache.rocketmq.broker.processor.EndTransactionProcessor;\n import org.apache.rocketmq.broker.processor.PopMessageProcessor;\n+import org.apache.rocketmq.broker.processor.PullMessageProcessor;\n import org.apache.rocketmq.broker.processor.SendMessageProcessor;\n+import org.apache.rocketmq.common.BrokerConfig;\n import org.apache.rocketmq.common.ThreadFactoryImpl;\n+import org.apache.rocketmq.common.consumer.ReceiptHandle;\n import org.apache.rocketmq.common.message.MessageDecoder;\n import org.apache.rocketmq.common.message.MessageExt;\n+import org.apache.rocketmq.common.protocol.RequestCode;\n import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.common.protocol.header.ChangeInvisibleTimeResponseHeader;\n import org.apache.rocketmq.common.protocol.header.PopMessageResponseHeader;\n+import org.apache.rocketmq.common.protocol.header.PullMessageResponseHeader;\n import org.apache.rocketmq.proxy.config.InitConfigAndLoggerTest;\n+import org.apache.rocketmq.proxy.connector.transaction.TransactionId;\n import org.apache.rocketmq.proxy.grpc.common.Converter;\n import org.apache.rocketmq.proxy.grpc.common.InterceptorConstants;\n import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+import org.apache.rocketmq.store.MessageStore;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -57,6 +90,7 @@\n import org.mockito.junit.MockitoJUnitRunner;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n @RunWith(MockitoJUnitRunner.class)\n public class LocalGrpcServiceTest extends InitConfigAndLoggerTest {\n@@ -66,6 +100,8 @@ public class LocalGrpcServiceTest extends InitConfigAndLoggerTest {\n     @Mock\n     private PopMessageProcessor popMessageProcessorMock;\n     @Mock\n+    private PullMessageProcessor pullMessageProcessorMock;\n+    @Mock\n     private BrokerController brokerControllerMock;\n \n     private Metadata metadata;\n@@ -75,6 +111,8 @@ public void setUp() throws Exception {\n         super.before();\n         Mockito.when(brokerControllerMock.getSendMessageProcessor()).thenReturn(sendMessageProcessorMock);\n         Mockito.when(brokerControllerMock.getPopMessageProcessor()).thenReturn(popMessageProcessorMock);\n+        Mockito.when(brokerControllerMock.getPullMessageProcessor()).thenReturn(pullMessageProcessorMock);\n+        Mockito.when(brokerControllerMock.getBrokerConfig()).thenReturn(new BrokerConfig());\n         localGrpcService = new LocalGrpcService(brokerControllerMock);\n         metadata = new Metadata();\n         metadata.put(InterceptorConstants.REMOTE_ADDRESS, \"1.1.1.1\");\n@@ -83,25 +121,51 @@ public void setUp() throws Exception {\n     }\n \n     @Test\n-    public void testHeartbeat() {\n+    public void testHeartbeatProducerData() throws Exception {\n         RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, null);\n         ClientManageProcessor clientManageProcessorMock = Mockito.mock(ClientManageProcessor.class);\n         Mockito.when(clientManageProcessorMock.heartBeat(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n             .thenReturn(response);\n         Mockito.when(brokerControllerMock.getClientManageProcessor()).thenReturn(clientManageProcessorMock);\n-        HeartbeatRequest request = HeartbeatRequest.newBuilder().getDefaultInstanceForType();\n+        HeartbeatRequest request = HeartbeatRequest.newBuilder()\n+            .setClientId(\"test-client\")\n+            .setProducerData(ProducerData.newBuilder()\n+                .setGroup(Resource.newBuilder()\n+                    .setName(\"group\")\n+                    .build())\n+                .build())\n+            .build();\n+        CompletableFuture<HeartbeatResponse> grpcFuture = localGrpcService.heartbeat(\n+            Context.current().withValue(InterceptorConstants.METADATA, metadata).attach(), request);\n+        HeartbeatResponse r =  grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode())\n+            .isEqualTo(Code.OK.getNumber());\n+    }\n+\n+    @Test\n+    public void testHeartbeatConsumerData() throws Exception {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, null);\n+        ClientManageProcessor clientManageProcessorMock = Mockito.mock(ClientManageProcessor.class);\n+        Mockito.when(clientManageProcessorMock.heartBeat(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n+            .thenReturn(response);\n+        Mockito.when(brokerControllerMock.getClientManageProcessor()).thenReturn(clientManageProcessorMock);\n+        HeartbeatRequest request = HeartbeatRequest.newBuilder()\n+            .setClientId(\"test-client\")\n+            .setConsumerData(ConsumerData.newBuilder()\n+                .setGroup(Resource.newBuilder()\n+                    .setName(\"group\")\n+                    .build())\n+                .build())\n+            .build();\n         CompletableFuture<HeartbeatResponse> grpcFuture = localGrpcService.heartbeat(\n             Context.current().withValue(InterceptorConstants.METADATA, metadata).attach(), request);\n-        grpcFuture.thenAccept(r -> {\n-            assertThat(r.getCommon().getStatus().getCode())\n-                .isEqualTo(Code.OK.getNumber());\n-            assertThat(r.getCommon().getStatus().getMessage())\n-                .isEqualTo(null);\n-        });\n+        HeartbeatResponse r =  grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode())\n+            .isEqualTo(Code.OK.getNumber());\n     }\n \n     @Test\n-    public void testSendMessageError() throws RemotingCommandException {\n+    public void testSendMessageError() throws Exception {\n         String remark = \"store putMessage return null\";\n         RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SYSTEM_ERROR, remark);\n         CompletableFuture<RemotingCommand> future = CompletableFuture.completedFuture(response);\n@@ -117,16 +181,13 @@ public void testSendMessageError() throws RemotingCommandException {\n \n         CompletableFuture<SendMessageResponse> grpcFuture = localGrpcService.sendMessage(\n             Context.current().withValue(InterceptorConstants.METADATA, metadata).attach(), request);\n-        grpcFuture.thenAccept(r -> {\n-            assertThat(r.getCommon().getStatus().getCode())\n-                .isEqualTo(Code.INTERNAL.getNumber());\n-            assertThat(r.getCommon().getStatus().getMessage())\n-                .isEqualTo(remark);\n-        });\n+        SendMessageResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode())\n+            .isEqualTo(Code.INTERNAL.getNumber());\n     }\n \n     @Test\n-    public void testSendMessageWriteAndFlush() throws RemotingCommandException {\n+    public void testSendMessageWriteAndFlush() throws Exception {\n         CompletableFuture<RemotingCommand> future = CompletableFuture.completedFuture(null);\n         Mockito.when(sendMessageProcessorMock.asyncProcessRequest(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n             .thenReturn(future);\n@@ -140,11 +201,11 @@ public void testSendMessageWriteAndFlush() throws RemotingCommandException {\n \n         CompletableFuture<SendMessageResponse> grpcFuture = localGrpcService.sendMessage(\n             Context.current().withValue(InterceptorConstants.METADATA, metadata).attach(), request);\n-        grpcFuture.thenAccept(r -> assertThat(r).isNull());\n+        assertThat(grpcFuture.isDone()).isFalse();\n     }\n \n     @Test\n-    public void testSendMessageWithException() throws RemotingCommandException {\n+    public void testSendMessageWithException() throws Exception {\n         Mockito.when(sendMessageProcessorMock.asyncProcessRequest(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n             .thenThrow(new RemotingCommandException(\"test\"));\n         SendMessageRequest request = SendMessageRequest.newBuilder()\n@@ -157,10 +218,13 @@ public void testSendMessageWithException() throws RemotingCommandException {\n \n         CompletableFuture<SendMessageResponse> grpcFuture = localGrpcService.sendMessage(\n             Context.current().withValue(InterceptorConstants.METADATA, metadata).attach(), request);\n-        grpcFuture.thenAccept(r -> assertThat(r).isNull()).exceptionally(e -> {\n-            assertThat(e).isInstanceOf(RemotingCommandException.class);\n-            return null;\n-        });\n+        assertThatThrownBy(() -> {\n+            try {\n+                grpcFuture.get();\n+            } catch (ExecutionException e) {\n+                throw e.getCause();\n+            }\n+        }).isInstanceOf(RemotingCommandException.class);\n     }\n \n     @Test\n@@ -177,25 +241,30 @@ public void testReceiveMessageSuccess() throws Exception {\n         messageExt.putUserProperty(\"key\", \"value\");\n         PopMessageResponseHeader responseHeader = new PopMessageResponseHeader();\n         responseHeader.setInvisibleTime(invisibleTime);\n-        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(ResponseCode.SUCCESS, responseHeader);\n+        RemotingCommand remotingCommand = RemotingCommand.createResponseCommandWithHeader(ResponseCode.SUCCESS, responseHeader);\n         remotingCommand.setBody(MessageDecoder.encode(messageExt, true));\n         remotingCommand.makeCustomHeaderToNet();\n         Mockito.when(popMessageProcessorMock.processRequest(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n             .thenReturn(remotingCommand);\n-        ReceiveMessageRequest request = ReceiveMessageRequest.newBuilder().getDefaultInstanceForType();\n+        ReceiveMessageRequest request = ReceiveMessageRequest.newBuilder()\n+            .setPartition(Partition.newBuilder()\n+                .setTopic(Resource.newBuilder()\n+                    .setName(topic)\n+                    .build())\n+                .build())\n+            .build();\n         CompletableFuture<ReceiveMessageResponse> grpcFuture = localGrpcService.receiveMessage(\n             Context.current()\n                 .withValue(InterceptorConstants.METADATA, metadata)\n                 .withDeadlineAfter(20, TimeUnit.SECONDS, Executors.newSingleThreadScheduledExecutor(\n                     new ThreadFactoryImpl(\"test\")))\n                 .attach(), request);\n-        grpcFuture.thenAccept(r -> {\n-            assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n-            assertThat(r.getMessagesCount()).isEqualTo(0);\n-            assertThat(Durations.toMillis(r.getInvisibleDuration())).isEqualTo(invisibleTime);\n-            assertThat(Converter.getResourceNameWithNamespace(r.getMessages(0).getTopic())).isEqualTo(topic);\n-            assertThat(r.getMessages(0).getBody().toByteArray()).isEqualTo(body);\n-        });\n+        ReceiveMessageResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+        assertThat(r.getMessagesCount()).isEqualTo(1);\n+        assertThat(Durations.toMillis(r.getInvisibleDuration())).isEqualTo(invisibleTime);\n+        assertThat(Converter.getResourceNameWithNamespace(r.getMessages(0).getTopic())).isEqualTo(topic);\n+        assertThat(r.getMessages(0).getBody().toByteArray()).isEqualTo(body);\n     }\n \n     @Test\n@@ -209,6 +278,295 @@ public void testReceiveMessageSuccessWriteAndFlush() throws Exception {\n                 .withDeadlineAfter(20, TimeUnit.SECONDS, Executors.newSingleThreadScheduledExecutor(\n                     new ThreadFactoryImpl(\"test\")))\n                 .attach(), request);\n-        grpcFuture.thenAccept(r -> assertThat(r).isNull());\n+        assertThat(grpcFuture.isDone()).isFalse();\n+    }\n+\n+    @Test\n+    public void testAckMessage() throws Exception {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, null);\n+        AckMessageProcessor ackMessageProcessorMock = Mockito.mock(AckMessageProcessor.class);\n+        Mockito.when(brokerControllerMock.getAckMessageProcessor()).thenReturn(ackMessageProcessorMock);\n+        Mockito.when(ackMessageProcessorMock.processRequest(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n+            .thenReturn(response);\n+        AckMessageRequest request = AckMessageRequest.newBuilder().setReceiptHandle(\n+            ReceiptHandle.builder()\n+                .startOffset(0L)\n+                .retrieveTime(0L)\n+                .invisibleTime(1000L)\n+                .nextVisibleTime(1000L)\n+                .reviveQueueId(0)\n+                .topic(\"topic\")\n+                .brokerName(\"brokerName\")\n+                .queueId(0)\n+                .offset(0L)\n+                .build().encode()\n+        ).build();\n+        CompletableFuture<AckMessageResponse> grpcFuture = localGrpcService.ackMessage(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        AckMessageResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+    }\n+\n+    @Test\n+    public void testNackMessage() throws Exception {\n+        ChangeInvisibleTimeResponseHeader responseHeader = new ChangeInvisibleTimeResponseHeader();\n+        responseHeader.setInvisibleTime(1000L);\n+        responseHeader.setPopTime(0L);\n+        responseHeader.setReviveQid(0);\n+        RemotingCommand response = RemotingCommand.createResponseCommandWithHeader(ResponseCode.SUCCESS, responseHeader);\n+\n+        ChangeInvisibleTimeProcessor changeInvisibleTimeProcessor = Mockito.mock(ChangeInvisibleTimeProcessor.class);\n+        Mockito.when(brokerControllerMock.getChangeInvisibleTimeProcessor()).thenReturn(changeInvisibleTimeProcessor);\n+        Mockito.when(changeInvisibleTimeProcessor.processRequest(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n+            .thenReturn(response);\n+        NackMessageRequest request = NackMessageRequest.newBuilder().setReceiptHandle(\n+            ReceiptHandle.builder()\n+                .startOffset(0L)\n+                .retrieveTime(0L)\n+                .invisibleTime(1000L)\n+                .nextVisibleTime(1000L)\n+                .reviveQueueId(0)\n+                .topic(\"topic\")\n+                .brokerName(\"brokerName\")\n+                .queueId(0)\n+                .offset(0L)\n+                .build().encode()\n+        ).build();\n+        CompletableFuture<NackMessageResponse> grpcFuture = localGrpcService.nackMessage(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        NackMessageResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+    }\n+\n+    @Test\n+    public void testForwardMessageToDeadLetterQueue() throws Exception {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, null);\n+        CompletableFuture<RemotingCommand> future = CompletableFuture.completedFuture(response);\n+        Mockito.when(brokerControllerMock.getSendMessageProcessor()).thenReturn(sendMessageProcessorMock);\n+        Mockito.when(sendMessageProcessorMock.asyncProcessRequest(Mockito.any(ChannelHandlerContext.class),\n+            Mockito.argThat(argument -> argument.getCode() == RequestCode.CONSUMER_SEND_MSG_BACK)))\n+            .thenReturn(future);\n+        ForwardMessageToDeadLetterQueueRequest request = ForwardMessageToDeadLetterQueueRequest.newBuilder()\n+            .setReceiptHandle(ReceiptHandle.builder()\n+                .startOffset(0L)\n+                .retrieveTime(0L)\n+                .invisibleTime(1000L)\n+                .nextVisibleTime(1000L)\n+                .reviveQueueId(0)\n+                .topic(\"topic\")\n+                .brokerName(\"brokerName\")\n+                .queueId(0)\n+                .offset(0L)\n+                .build().encode())\n+            .build();\n+        CompletableFuture<ForwardMessageToDeadLetterQueueResponse> grpcFuture = localGrpcService.forwardMessageToDeadLetterQueue(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        ForwardMessageToDeadLetterQueueResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+    }\n+\n+    @Test\n+    public void testEndTransaction() throws Exception {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, null);\n+\n+        EndTransactionProcessor endTransactionProcessor = Mockito.mock(EndTransactionProcessor.class);\n+        Mockito.when(brokerControllerMock.getEndTransactionProcessor()).thenReturn(endTransactionProcessor);\n+        Mockito.when(endTransactionProcessor.processRequest(Mockito.any(ChannelHandlerContext.class),\n+            Mockito.any(RemotingCommand.class)))\n+            .thenReturn(response);\n+        EndTransactionRequest request = EndTransactionRequest.newBuilder()\n+            .setMessageId(\"123\")\n+            .setTransactionId(TransactionId.genFromBrokerTransactionId(\n+                new InetSocketAddress(\"0.0.0.0\", 80), \"123\", 123, 123\n+                ).getProxyTransactionId()\n+            )\n+            .build();\n+        CompletableFuture<EndTransactionResponse> grpcFuture = localGrpcService.endTransaction(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        EndTransactionResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+    }\n+\n+    @Test\n+    public void testQueryOffset() throws Exception {\n+        String topic = \"test-topic\";\n+        int queueId = 1;\n+\n+        long maxOffset = 10L;\n+        long timeOffset = 5L;\n+        MessageStore messageStore = Mockito.mock(MessageStore.class);\n+        Mockito.when(brokerControllerMock.getMessageStore()).thenReturn(messageStore);\n+        Mockito.when(messageStore.getMaxOffsetInQueue(Mockito.eq(topic), Mockito.eq(queueId))).thenReturn(maxOffset);\n+        Mockito.when(messageStore.getOffsetInQueueByTime(Mockito.eq(topic), Mockito.eq(queueId), Mockito.anyLong())).thenReturn(timeOffset);\n+\n+        QueryOffsetRequest request = QueryOffsetRequest.newBuilder()\n+            .setPartition(Partition.newBuilder()\n+                .setTopic(Resource.newBuilder()\n+                    .setName(topic)\n+                    .build())\n+                .setId(queueId)\n+                .build())\n+            .setPolicy(QueryOffsetPolicy.BEGINNING)\n+            .build();\n+        CompletableFuture<QueryOffsetResponse> grpcFuture = localGrpcService.queryOffset(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        QueryOffsetResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+        assertThat(r.getOffset()).isEqualTo(0);\n+\n+        request = QueryOffsetRequest.newBuilder()\n+            .setPartition(Partition.newBuilder()\n+                .setTopic(Resource.newBuilder()\n+                    .setName(topic)\n+                    .build())\n+                .setId(queueId)\n+                .build())\n+            .setPolicy(QueryOffsetPolicy.END)\n+            .build();\n+        grpcFuture = localGrpcService.queryOffset(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+        assertThat(r.getOffset()).isEqualTo(maxOffset);\n+\n+        request = QueryOffsetRequest.newBuilder()\n+            .setPartition(Partition.newBuilder()\n+                .setTopic(Resource.newBuilder()\n+                    .setName(topic)\n+                    .build())\n+                .setId(queueId)\n+                .build())\n+            .setTimePoint(Timestamp.newBuilder()\n+                .setSeconds(1000L)\n+                .build())\n+            .setPolicy(QueryOffsetPolicy.TIME_POINT)\n+            .build();\n+        grpcFuture = localGrpcService.queryOffset(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+        assertThat(r.getOffset()).isEqualTo(timeOffset);\n+    }\n+\n+    @Test\n+    public void testReportThreadStackTrace() throws Exception {\n+\n+    }\n+\n+    @Test\n+    public void testNotifyClientTermination() throws Exception {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, null);\n+\n+        ClientManageProcessor clientManageProcessor = Mockito.mock(ClientManageProcessor.class);\n+        Mockito.when(brokerControllerMock.getClientManageProcessor()).thenReturn(clientManageProcessor);\n+        Mockito.when(clientManageProcessor.unregisterClient(Mockito.any(ChannelHandlerContext.class),\n+            Mockito.any(RemotingCommand.class)))\n+            .thenReturn(response);\n+        NotifyClientTerminationRequest request = NotifyClientTerminationRequest.newBuilder()\n+            .setProducerGroup(Resource.newBuilder()\n+                .setName(\"group\")\n+                .build())\n+            .build();\n+        localGrpcService.notifyClientTermination(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        Mockito.verify(clientManageProcessor, Mockito.times(1))\n+            .unregisterClient(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class));\n+    }\n+\n+    @Test\n+    public void testChangeInvisibleDuration() throws Exception {\n+        long invisibleTime = 1000L;\n+        int queueId = 1;\n+        long offset = 123L;\n+        ChangeInvisibleTimeResponseHeader responseHeader = new ChangeInvisibleTimeResponseHeader();\n+        responseHeader.setInvisibleTime(1000L);\n+        responseHeader.setPopTime(0L);\n+        responseHeader.setReviveQid(0);\n+        RemotingCommand response = RemotingCommand.createResponseCommandWithHeader(ResponseCode.SUCCESS, responseHeader);\n+\n+        ChangeInvisibleTimeProcessor changeInvisibleTimeProcessor = Mockito.mock(ChangeInvisibleTimeProcessor.class);\n+        Mockito.when(brokerControllerMock.getChangeInvisibleTimeProcessor()).thenReturn(changeInvisibleTimeProcessor);\n+        Mockito.when(changeInvisibleTimeProcessor.processRequest(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n+            .thenReturn(response);\n+        ChangeInvisibleDurationRequest request = ChangeInvisibleDurationRequest.newBuilder().setReceiptHandle(\n+            ReceiptHandle.builder()\n+                .startOffset(0L)\n+                .retrieveTime(0L)\n+                .invisibleTime(invisibleTime)\n+                .nextVisibleTime(1000L)\n+                .reviveQueueId(0)\n+                .topic(\"topic\")\n+                .brokerName(\"brokerName\")\n+                .queueId(queueId)\n+                .offset(offset)\n+                .build().encode()\n+        ).build();\n+        CompletableFuture<ChangeInvisibleDurationResponse> grpcFuture = localGrpcService.changeInvisibleDuration(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .attach(), request);\n+        ChangeInvisibleDurationResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+        ReceiptHandle handle = ReceiptHandle.decode(r.getReceiptHandle());\n+        assertThat(handle.getInvisibleTime()).isEqualTo(invisibleTime);\n+        assertThat(handle.getQueueId()).isEqualTo(queueId);\n+        assertThat(handle.getOffset()).isEqualTo(offset);\n+    }\n+\n+    @Test\n+    public void testPullMessageSuccess() throws Exception {\n+        String topic = \"topic\";\n+        byte[] body = \"123\".getBytes(StandardCharsets.UTF_8);\n+        MessageExt messageExt = new MessageExt();\n+        messageExt.setTopic(topic);\n+        messageExt.setQueueOffset(0L);\n+        messageExt.setBornHost(new InetSocketAddress(\"127.0.0.1\", 10911));\n+        messageExt.setStoreHost(new InetSocketAddress(\"127.0.0.1\", 10911));\n+        messageExt.setBody(body);\n+        messageExt.putUserProperty(\"key\", \"value\");\n+\n+        long minOffset = 1L;\n+        long nextOffset = 3L;\n+        long maxOffset = 10L;\n+        PullMessageResponseHeader responseHeader = new PullMessageResponseHeader();\n+        responseHeader.setMinOffset(minOffset);\n+        responseHeader.setNextBeginOffset(nextOffset);\n+        responseHeader.setMaxOffset(maxOffset);\n+        RemotingCommand remotingCommand = RemotingCommand.createResponseCommandWithHeader(ResponseCode.SUCCESS, responseHeader);\n+        remotingCommand.setBody(MessageDecoder.encode(messageExt, true));\n+        remotingCommand.makeCustomHeaderToNet();\n+        Mockito.when(pullMessageProcessorMock.processRequest(Mockito.any(ChannelHandlerContext.class), Mockito.any(RemotingCommand.class)))\n+            .thenReturn(remotingCommand);\n+        PullMessageRequest request = PullMessageRequest.newBuilder().getDefaultInstanceForType();\n+        CompletableFuture<PullMessageResponse> grpcFuture = localGrpcService.pullMessage(\n+            Context.current()\n+                .withValue(InterceptorConstants.METADATA, metadata)\n+                .withDeadlineAfter(20, TimeUnit.SECONDS, Executors.newSingleThreadScheduledExecutor(\n+                    new ThreadFactoryImpl(\"test\")))\n+                .attach(), request);\n+        PullMessageResponse r = grpcFuture.get();\n+        assertThat(r.getCommon().getStatus().getCode()).isEqualTo(Code.OK.getNumber());\n+        assertThat(r.getMessagesCount()).isEqualTo(1);\n+        assertThat(Converter.getResourceNameWithNamespace(r.getMessages(0).getTopic())).isEqualTo(topic);\n+        assertThat(r.getMessages(0).getBody().toByteArray()).isEqualTo(body);\n+        assertThat(r.getMinOffset()).isEqualTo(minOffset);\n+        assertThat(r.getNextOffset()).isEqualTo(nextOffset);\n+        assertThat(r.getMaxOffset()).isEqualTo(maxOffset);\n     }\n }\n\\ No newline at end of file",
      "parent_sha": "afc2aeab63b3cf13ed7c781c1e46f76288284f4b"
    }
  },
  {
    "oid": "4f7e83128fb12d6ab98460029972728ad62d8e0e",
    "message": "[ISSUE #2708] Fix unit test",
    "date": "2021-05-26T02:18:10Z",
    "url": "https://github.com/apache/rocketmq/commit/4f7e83128fb12d6ab98460029972728ad62d8e0e",
    "details": {
      "sha": "20efd6647819f893328636cb8fc71a4583fe80e5",
      "filename": "client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java",
      "status": "modified",
      "additions": 60,
      "deletions": 36,
      "changes": 96,
      "blob_url": "https://github.com/apache/rocketmq/blob/4f7e83128fb12d6ab98460029972728ad62d8e0e/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumerTest.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/4f7e83128fb12d6ab98460029972728ad62d8e0e/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumerTest.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Fconsumer%2FDefaultMQPushConsumerTest.java?ref=4f7e83128fb12d6ab98460029972728ad62d8e0e",
      "patch": "@@ -16,17 +16,6 @@\n  */\n package org.apache.rocketmq.client.consumer;\n \n-import java.io.ByteArrayOutputStream;\n-import java.net.InetSocketAddress;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.reflect.FieldUtils;\n import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\n import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\n@@ -48,6 +37,7 @@\n import org.apache.rocketmq.client.impl.consumer.PullRequest;\n import org.apache.rocketmq.client.impl.consumer.PullResultExt;\n import org.apache.rocketmq.client.impl.consumer.RebalanceImpl;\n+import org.apache.rocketmq.client.impl.consumer.RebalancePushImpl;\n import org.apache.rocketmq.client.impl.factory.MQClientInstance;\n import org.apache.rocketmq.common.message.MessageClientExt;\n import org.apache.rocketmq.common.message.MessageDecoder;\n@@ -66,6 +56,18 @@\n import org.mockito.junit.MockitoJUnitRunner;\n import org.mockito.stubbing.Answer;\n \n+import java.io.ByteArrayOutputStream;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;\n import static org.mockito.ArgumentMatchers.any;\n@@ -74,6 +76,7 @@\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.nullable;\n import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n \n@@ -87,6 +90,7 @@ public class DefaultMQPushConsumerTest {\n     @Mock\n     private MQClientAPIImpl mQClientAPIImpl;\n     private RebalanceImpl rebalanceImpl;\n+    private RebalancePushImpl rebalancePushImpl;\n     private DefaultMQPushConsumer pushConsumer;\n \n     @Before\n@@ -96,24 +100,24 @@ public void init() throws Exception {\n         factoryTable.clear();\n \n         when(mQClientAPIImpl.pullMessage(anyString(), any(PullMessageRequestHeader.class),\n-            anyLong(), any(CommunicationMode.class), nullable(PullCallback.class)))\n-            .thenAnswer(new Answer<PullResult>() {\n-                @Override\n-                public PullResult answer(InvocationOnMock mock) throws Throwable {\n-                    PullMessageRequestHeader requestHeader = mock.getArgument(1);\n-                    MessageClientExt messageClientExt = new MessageClientExt();\n-                    messageClientExt.setTopic(topic);\n-                    messageClientExt.setQueueId(0);\n-                    messageClientExt.setMsgId(\"123\");\n-                    messageClientExt.setBody(new byte[] {'a'});\n-                    messageClientExt.setOffsetMsgId(\"234\");\n-                    messageClientExt.setBornHost(new InetSocketAddress(8080));\n-                    messageClientExt.setStoreHost(new InetSocketAddress(8080));\n-                    PullResult pullResult = createPullResult(requestHeader, PullStatus.FOUND, Collections.<MessageExt>singletonList(messageClientExt));\n-                    ((PullCallback) mock.getArgument(4)).onSuccess(pullResult);\n-                    return pullResult;\n-                }\n-            });\n+                anyLong(), any(CommunicationMode.class), nullable(PullCallback.class)))\n+                .thenAnswer(new Answer<PullResult>() {\n+                    @Override\n+                    public PullResult answer(InvocationOnMock mock) throws Throwable {\n+                        PullMessageRequestHeader requestHeader = mock.getArgument(1);\n+                        MessageClientExt messageClientExt = new MessageClientExt();\n+                        messageClientExt.setTopic(topic);\n+                        messageClientExt.setQueueId(0);\n+                        messageClientExt.setMsgId(\"123\");\n+                        messageClientExt.setBody(new byte[]{'a'});\n+                        messageClientExt.setOffsetMsgId(\"234\");\n+                        messageClientExt.setBornHost(new InetSocketAddress(8080));\n+                        messageClientExt.setStoreHost(new InetSocketAddress(8080));\n+                        PullResult pullResult = createPullResult(requestHeader, PullStatus.FOUND, Collections.<MessageExt>singletonList(messageClientExt));\n+                        ((PullCallback) mock.getArgument(4)).onSuccess(pullResult);\n+                        return pullResult;\n+                    }\n+                });\n \n \n         consumerGroup = \"FooBarGroup\" + System.currentTimeMillis();\n@@ -124,12 +128,13 @@ public PullResult answer(InvocationOnMock mock) throws Throwable {\n         pushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n             @Override\n             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n-                ConsumeConcurrentlyContext context) {\n+                                                            ConsumeConcurrentlyContext context) {\n                 return null;\n             }\n         });\n \n         DefaultMQPushConsumerImpl pushConsumerImpl = pushConsumer.getDefaultMQPushConsumerImpl();\n+        rebalancePushImpl = spy(new RebalancePushImpl(pushConsumer.getDefaultMQPushConsumerImpl()));\n \n         // suppress updateTopicRouteInfoFromNameServer\n         pushConsumer.changeInstanceNameToPID();\n@@ -142,7 +147,8 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n         doReturn(new FindBrokerResult(\"127.0.0.1:10911\", false)).when(mQClientFactory).findBrokerAddressInSubscribe(anyString(), anyLong(), anyBoolean());\n \n         rebalanceImpl = spy(pushConsumerImpl.getRebalanceImpl());\n-        doReturn(123L).when(rebalanceImpl).computePullFromWhere(any(MessageQueue.class));\n+        // doReturn(123L).when(rebalancePushImpl).computePullFromWhere(any(MessageQueue.class));\n+        doReturn(123L).when(rebalanceImpl).computePullFromWhereWithException(any(MessageQueue.class));\n         FieldUtils.writeDeclaredField(pushConsumerImpl, \"rebalanceImpl\", rebalanceImpl, true);\n \n         Set<MessageQueue> messageQueueSet = new HashSet<MessageQueue>();\n@@ -170,7 +176,7 @@ public void testPullMessage_Success() throws InterruptedException, RemotingExcep\n         pushConsumer.getDefaultMQPushConsumerImpl().setConsumeMessageService(new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(), new MessageListenerConcurrently() {\n             @Override\n             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n-                ConsumeConcurrentlyContext context) {\n+                                                            ConsumeConcurrentlyContext context) {\n                 messageAtomic.set(msgs.get(0));\n                 countDownLatch.countDown();\n                 return null;\n@@ -183,7 +189,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n         MessageExt msg = messageAtomic.get();\n         assertThat(msg).isNotNull();\n         assertThat(msg.getTopic()).isEqualTo(topic);\n-        assertThat(msg.getBody()).isEqualTo(new byte[] {'a'});\n+        assertThat(msg.getBody()).isEqualTo(new byte[]{'a'});\n     }\n \n     @Test\n@@ -210,7 +216,7 @@ public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderly\n         MessageExt msg = messageAtomic.get();\n         assertThat(msg).isNotNull();\n         assertThat(msg.getTopic()).isEqualTo(topic);\n-        assertThat(msg.getBody()).isEqualTo(new byte[] {'a'});\n+        assertThat(msg.getBody()).isEqualTo(new byte[]{'a'});\n     }\n \n     @Test\n@@ -287,7 +293,7 @@ private DefaultMQPushConsumer createPushConsumer() {\n         pushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n             @Override\n             public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n-                ConsumeConcurrentlyContext context) {\n+                                                            ConsumeConcurrentlyContext context) {\n                 return null;\n             }\n         });\n@@ -313,11 +319,29 @@ private PullRequest createPullRequest() {\n     }\n \n     private PullResultExt createPullResult(PullMessageRequestHeader requestHeader, PullStatus pullStatus,\n-        List<MessageExt> messageExtList) throws Exception {\n+                                           List<MessageExt> messageExtList) throws Exception {\n         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n         for (MessageExt messageExt : messageExtList) {\n             outputStream.write(MessageDecoder.encode(messageExt, false));\n         }\n         return new PullResultExt(pullStatus, requestHeader.getQueueOffset() + messageExtList.size(), 123, 2048, messageExtList, 0, outputStream.toByteArray());\n     }\n+\n+    @Test\n+    public void testPullMessage_ExceptionOccursWhenComputePullFromWhere() throws MQClientException {\n+        doThrow(MQClientException.class).when(rebalancePushImpl).computePullFromWhereWithException(any(MessageQueue.class));\n+        final CountDownLatch countDownLatch = new CountDownLatch(1);\n+        final MessageExt[] messageExts = new MessageExt[1];\n+        pushConsumer.getDefaultMQPushConsumerImpl().setConsumeMessageService(\n+                new ConsumeMessageConcurrentlyService(pushConsumer.getDefaultMQPushConsumerImpl(),\n+                        (msgs, context) -> {\n+                            messageExts[0] = msgs.get(0);\n+                            return null;\n+                        }));\n+\n+        pushConsumer.getDefaultMQPushConsumerImpl().setConsumeOrderly(true);\n+        PullMessageService pullMessageService = mQClientFactory.getPullMessageService();\n+        pullMessageService.executePullRequestImmediately(createPullRequest());\n+        assertThat(messageExts[0]).isNull();\n+    }\n }",
      "parent_sha": "707d1b85d2443361d3cbc89e6d798a67b7a79b76"
    }
  },
  {
    "oid": "970d9bfe7ac4f0561a504a9632113483de9b89ef",
    "message": "Issue #16 \u5f02\u6b65\u53d1\u9001\u6d88\u606f\u5b58\u5728NPE\u95ee\u9898",
    "date": "2016-02-18T06:40:39Z",
    "url": "https://github.com/apache/rocketmq/commit/970d9bfe7ac4f0561a504a9632113483de9b89ef",
    "details": {
      "sha": "245102e298c8007d8b620f32b8551897d7257a72",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apache/rocketmq/blob/970d9bfe7ac4f0561a504a9632113483de9b89ef/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FMQClientAPIImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/970d9bfe7ac4f0561a504a9632113483de9b89ef/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FMQClientAPIImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FMQClientAPIImpl.java?ref=970d9bfe7ac4f0561a504a9632113483de9b89ef",
      "patch": "@@ -316,9 +316,12 @@ public void operationComplete(ResponseFuture responseFuture) {\n                 if (response != null) {\n                     try {\n                         SendResult sendResult = MQClientAPIImpl.this.processSendResponse(brokerName, msg, response);\n-                        assert sendResult != null&&context!=null;\n-                        context.setSendResult(sendResult);\n-                        context.getProducer().executeSendMessageHookAfter(context);\n+                        assert sendResult != null;\n+                        //context\u5728\u6ca1\u6709sendMessagehook\u65f6\u4e3anull\n+                        if(context != null){\n+                            context.setSendResult(sendResult);\n+                            context.getProducer().executeSendMessageHookAfter(context);\n+                        }\n                         sendCallback.onSuccess(sendResult);\n                     }\n                     catch (Exception e) {",
      "parent_sha": "633950876e1f5efee3994d41f967ecf3d87bf0cb"
    }
  },
  {
    "oid": "548dddc1305c9c69383f7426b261b0c98b3c1328",
    "message": "\u6062\u590dremoting\u53ef\u80fd\u7684\u8d85\u65f6\u95ee\u9898\u3002",
    "date": "2015-04-30T08:00:20Z",
    "url": "https://github.com/apache/rocketmq/commit/548dddc1305c9c69383f7426b261b0c98b3c1328",
    "details": {
      "sha": "d91011df72c0926fa5770138fc75e24635c69d2f",
      "filename": "rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyRemotingAbstract.java",
      "status": "modified",
      "additions": 15,
      "deletions": 20,
      "changes": 35,
      "blob_url": "https://github.com/apache/rocketmq/blob/548dddc1305c9c69383f7426b261b0c98b3c1328/rocketmq-remoting%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingAbstract.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/548dddc1305c9c69383f7426b261b0c98b3c1328/rocketmq-remoting%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingAbstract.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-remoting%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingAbstract.java?ref=548dddc1305c9c69383f7426b261b0c98b3c1328",
      "patch": "@@ -15,24 +15,6 @@\n  */\n package com.alibaba.rocketmq.remoting.netty;\n \n-import io.netty.channel.Channel;\n-import io.netty.channel.ChannelFuture;\n-import io.netty.channel.ChannelFutureListener;\n-import io.netty.channel.ChannelHandlerContext;\n-\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map.Entry;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.LinkedBlockingQueue;\n-import java.util.concurrent.RejectedExecutionException;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import com.alibaba.rocketmq.remoting.ChannelEventListener;\n import com.alibaba.rocketmq.remoting.InvokeCallback;\n import com.alibaba.rocketmq.remoting.RPCHook;\n@@ -45,6 +27,17 @@\n import com.alibaba.rocketmq.remoting.exception.RemotingTooMuchRequestException;\n import com.alibaba.rocketmq.remoting.protocol.RemotingCommand;\n import com.alibaba.rocketmq.remoting.protocol.RemotingSysResponseCode;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+import java.util.concurrent.*;\n \n \n /**\n@@ -250,8 +243,8 @@ public void processResponseCommand(ChannelHandlerContext ctx, RemotingCommand cm\n \n             responseFuture.release();\n \n-            // \u5728\u56de\u8c03\u4e4b\u524d\u5220\u9664\u53ef\u4ee5\u89e3\u51b3\u7528\u6237\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u540c\u4e00\u4e2aRemotingCommand\u5bf9\u8c61\u53d1\u9001\u591a\u4e2arpc\u8bf7\u6c42\u4ea7\u751f\u7684\u8d85\u65f6\u95ee\u9898\u3002\n-            responseTable.remove(cmd.getOpaque());\n+//            // \u5728\u56de\u8c03\u4e4b\u524d\u5220\u9664\u53ef\u4ee5\u89e3\u51b3\u7528\u6237\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u540c\u4e00\u4e2aRemotingCommand\u5bf9\u8c61\u53d1\u9001\u591a\u4e2arpc\u8bf7\u6c42\u4ea7\u751f\u7684\u8d85\u65f6\u95ee\u9898\u3002\n+//            responseTable.remove(cmd.getOpaque());\n \n             if (responseFuture.getInvokeCallback() != null) {\n                 boolean runInThisThread = false;\n@@ -297,6 +290,8 @@ public void run() {\n                     + RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n             plog.warn(cmd.toString());\n         }\n+\n+        responseTable.remove(cmd.getOpaque());\n     }\n \n ",
      "parent_sha": "1ae93f8590f05a711758a94330f6881be92d85d1"
    }
  },
  {
    "oid": "fad3dece7b88bc62c5beae1a492917bfd85d87ed",
    "message": "[ISSUE #6537] Fix bug MessageStoreConfig.haListenPort item config not\u2026 (#6538)\n\n* [ISSUE #6537] Fix bug MessageStoreConfig.haListenPort item config not effective\r\n\r\n* rerun\r\n\r\n* [ISSUE #6537] fix bug, if user not config haListenPort, then safe set haListenPort value as listenPort +1\r\n\r\n* rerun",
    "date": "2023-04-25T09:16:34Z",
    "url": "https://github.com/apache/rocketmq/commit/fad3dece7b88bc62c5beae1a492917bfd85d87ed",
    "details": {
      "sha": "3151683161d50677fafad2787435a54fef5a312c",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/rocketmq/blob/fad3dece7b88bc62c5beae1a492917bfd85d87ed/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2FBrokerStartup.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/fad3dece7b88bc62c5beae1a492917bfd85d87ed/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2FBrokerStartup.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2FBrokerStartup.java?ref=fad3dece7b88bc62c5beae1a492917bfd85d87ed",
      "patch": "@@ -87,6 +87,7 @@ public static BrokerController buildBrokerController(String[] args) throws Excep\n         final NettyClientConfig nettyClientConfig = new NettyClientConfig();\n         final MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n         nettyServerConfig.setListenPort(10911);\n+        messageStoreConfig.setHaListenPort(0);\n \n         Options options = ServerUtil.buildCommandlineOptions(new Options());\n         CommandLine commandLine = ServerUtil.parseCmdLine(\n@@ -167,7 +168,10 @@ public static BrokerController buildBrokerController(String[] args) throws Excep\n             System.exit(-4);\n         }\n \n-        messageStoreConfig.setHaListenPort(nettyServerConfig.getListenPort() + 1);\n+        if (messageStoreConfig.getHaListenPort() <= 0) {\n+            messageStoreConfig.setHaListenPort(nettyServerConfig.getListenPort() + 1);\n+        }\n+\n         brokerConfig.setInBrokerContainer(false);\n \n         System.setProperty(\"brokerLogDir\", \"\");",
      "parent_sha": "652f5bbba951e5b61dc1493751c44ceae3e5318e"
    }
  },
  {
    "oid": "895489ddb6dcca74229bdf3f44af937e13f1597f",
    "message": "[ISSUE #9282] Optimize BrokerController#printWaterMark (#9283)",
    "date": "2025-03-31T02:49:24Z",
    "url": "https://github.com/apache/rocketmq/commit/895489ddb6dcca74229bdf3f44af937e13f1597f",
    "details": {
      "sha": "c6163499a99c0896681b11a4ec815203b044afa0",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java",
      "status": "modified",
      "additions": 30,
      "deletions": 9,
      "changes": 39,
      "blob_url": "https://github.com/apache/rocketmq/blob/895489ddb6dcca74229bdf3f44af937e13f1597f/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2FBrokerController.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/895489ddb6dcca74229bdf3f44af937e13f1597f/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2FBrokerController.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2FBrokerController.java?ref=895489ddb6dcca74229bdf3f44af937e13f1597f",
      "patch": "@@ -40,6 +40,7 @@\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.function.Function;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import org.apache.rocketmq.acl.AccessValidator;\n import org.apache.rocketmq.acl.plain.PlainAccessValidator;\n@@ -1284,16 +1285,36 @@ public long headSlowTimeMills4AckThreadPoolQueue() {\n         return this.headSlowTimeMills(this.ackThreadPoolQueue);\n     }\n \n+    public long headSlowTimeMills4EndTransactionThreadPoolQueue() {\n+        return this.headSlowTimeMills(this.endTransactionThreadPoolQueue);\n+    }\n+\n+    public long headSlowTimeMills4ClientManagerThreadPoolQueue() {\n+        return this.headSlowTimeMills(this.clientManagerThreadPoolQueue);\n+    }\n+\n+    public long headSlowTimeMills4HeartbeatThreadPoolQueue() {\n+        return this.headSlowTimeMills(this.heartbeatThreadPoolQueue);\n+    }\n+\n+    public long headSlowTimeMills4AdminBrokerThreadPoolQueue() {\n+        return this.headSlowTimeMills(this.adminBrokerThreadPoolQueue);\n+    }\n+\n     public void printWaterMark() {\n-        LOG_WATER_MARK.info(\"[WATERMARK] Send Queue Size: {} SlowTimeMills: {}\", this.sendThreadPoolQueue.size(), headSlowTimeMills4SendThreadPoolQueue());\n-        LOG_WATER_MARK.info(\"[WATERMARK] Pull Queue Size: {} SlowTimeMills: {}\", this.pullThreadPoolQueue.size(), headSlowTimeMills4PullThreadPoolQueue());\n-        LOG_WATER_MARK.info(\"[WATERMARK] Query Queue Size: {} SlowTimeMills: {}\", this.queryThreadPoolQueue.size(), headSlowTimeMills4QueryThreadPoolQueue());\n-        LOG_WATER_MARK.info(\"[WATERMARK] Lite Pull Queue Size: {} SlowTimeMills: {}\", this.litePullThreadPoolQueue.size(), headSlowTimeMills4LitePullThreadPoolQueue());\n-        LOG_WATER_MARK.info(\"[WATERMARK] Transaction Queue Size: {} SlowTimeMills: {}\", this.endTransactionThreadPoolQueue.size(), headSlowTimeMills(this.endTransactionThreadPoolQueue));\n-        LOG_WATER_MARK.info(\"[WATERMARK] ClientManager Queue Size: {} SlowTimeMills: {}\", this.clientManagerThreadPoolQueue.size(), this.headSlowTimeMills(this.clientManagerThreadPoolQueue));\n-        LOG_WATER_MARK.info(\"[WATERMARK] Heartbeat Queue Size: {} SlowTimeMills: {}\", this.heartbeatThreadPoolQueue.size(), this.headSlowTimeMills(this.heartbeatThreadPoolQueue));\n-        LOG_WATER_MARK.info(\"[WATERMARK] Ack Queue Size: {} SlowTimeMills: {}\", this.ackThreadPoolQueue.size(), headSlowTimeMills(this.ackThreadPoolQueue));\n-        LOG_WATER_MARK.info(\"[WATERMARK] Admin Queue Size: {} SlowTimeMills: {}\", this.adminBrokerThreadPoolQueue.size(), headSlowTimeMills(this.adminBrokerThreadPoolQueue));\n+        logWaterMarkQueueInfo(\"Send\", this.sendThreadPoolQueue, this::headSlowTimeMills4SendThreadPoolQueue);\n+        logWaterMarkQueueInfo(\"Pull\", this.pullThreadPoolQueue, this::headSlowTimeMills4PullThreadPoolQueue);\n+        logWaterMarkQueueInfo(\"Query\", this.queryThreadPoolQueue, this::headSlowTimeMills4QueryThreadPoolQueue);\n+        logWaterMarkQueueInfo(\"Lite Pull\", this.litePullThreadPoolQueue, this::headSlowTimeMills4LitePullThreadPoolQueue);\n+        logWaterMarkQueueInfo(\"Transaction\", this.endTransactionThreadPoolQueue, this::headSlowTimeMills4EndTransactionThreadPoolQueue);\n+        logWaterMarkQueueInfo(\"ClientManager\", this.clientManagerThreadPoolQueue, this::headSlowTimeMills4ClientManagerThreadPoolQueue);\n+        logWaterMarkQueueInfo(\"Heartbeat\", this.heartbeatThreadPoolQueue, this::headSlowTimeMills4HeartbeatThreadPoolQueue);\n+        logWaterMarkQueueInfo(\"Ack\", this.ackThreadPoolQueue, this::headSlowTimeMills4AckThreadPoolQueue);\n+        logWaterMarkQueueInfo(\"Admin\", this.adminBrokerThreadPoolQueue, this::headSlowTimeMills4AdminBrokerThreadPoolQueue);\n+    }\n+\n+    private void logWaterMarkQueueInfo(String queueName, BlockingQueue<?> queue, Supplier<Long> slowTimeSupplier) {\n+        LOG_WATER_MARK.info(\"[WATERMARK] {} Queue Size: {} SlowTimeMills: {}\", queueName, queue.size(), slowTimeSupplier.get());\n     }\n \n     public MessageStore getMessageStore() {",
      "parent_sha": "729275c0c775a722d2f04fea4b81e251c18bb323"
    }
  },
  {
    "oid": "2d104a94ee9be2adcababfff8e5537c5530600b5",
    "message": "\u6587\u4ef6\u6821\u9a8c\u5de5\u5177",
    "date": "2014-06-26T11:17:44Z",
    "url": "https://github.com/apache/rocketmq/commit/2d104a94ee9be2adcababfff8e5537c5530600b5",
    "details": {
      "sha": "c876eb05c72a2582d221b9ae4cc5952d5b71deef",
      "filename": "rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/msgcheck/Store.java",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/apache/rocketmq/blob/2d104a94ee9be2adcababfff8e5537c5530600b5/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fmsgcheck%2FStore.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/2d104a94ee9be2adcababfff8e5537c5530600b5/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fmsgcheck%2FStore.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fmsgcheck%2FStore.java?ref=2d104a94ee9be2adcababfff8e5537c5530600b5",
      "patch": "@@ -2,6 +2,7 @@\n \n import java.io.File;\n import java.nio.ByteBuffer;\n+import java.util.Date;\n import java.util.List;\n import java.util.concurrent.ConcurrentHashMap;\n \n@@ -202,10 +203,13 @@ public void traval(boolean openAll) {\n                 byteBuffer.get(bytesContent, 0, topicLen);\n                 String topic = new String(bytesContent, 0, topicLen);\n \n+                Date storeTime = new Date(storeTimestamp);\n+\n                 // \u8ba1\u7b97\u51fa\u6765\u5f53\u524d\u6d88\u606f\u7684\u504f\u79fb\u91cf\n                 long currentPhyOffset = startOffset + position;\n                 if (physicOffset != currentPhyOffset) {\n-                    System.out.println(\"[fetal error] physicOffset != currentPhyOffset. position=\" + position\n+                    System.out.println(storeTime\n+                            + \" [fetal error] physicOffset != currentPhyOffset. position=\" + position\n                             + \", msgCount=\" + msgCount + \", physicOffset=\" + physicOffset\n                             + \", currentPhyOffset=\" + currentPhyOffset);\n                     errorCount++;\n@@ -221,19 +225,19 @@ public void traval(boolean openAll) {\n                     long offsetPy = smb.getByteBuffer().getLong();\n                     int sizePy = smb.getByteBuffer().getInt();\n                     if (physicOffset != offsetPy) {\n-                        System.out.println(\"[fetal error] physicOffset != offsetPy. position=\" + position\n-                                + \", msgCount=\" + msgCount + \", physicOffset=\" + physicOffset + \", offsetPy=\"\n-                                + offsetPy);\n+                        System.out.println(storeTime + \" [fetal error] physicOffset != offsetPy. position=\"\n+                                + position + \", msgCount=\" + msgCount + \", physicOffset=\" + physicOffset\n+                                + \", offsetPy=\" + offsetPy);\n                         errorCount++;\n                         if (!openAll) {\n                             success = false;\n                             break ALL;\n                         }\n                     }\n                     if (totalSize != sizePy) {\n-                        System.out.println(\"[fetal error] totalSize != sizePy. position=\" + position\n-                                + \", msgCount=\" + msgCount + \", totalSize=\" + totalSize + \", sizePy=\"\n-                                + sizePy);\n+                        System.out.println(storeTime + \" [fetal error] totalSize != sizePy. position=\"\n+                                + position + \", msgCount=\" + msgCount + \", totalSize=\" + totalSize\n+                                + \", sizePy=\" + sizePy);\n                         errorCount++;\n                         if (!openAll) {\n                             success = false;",
      "parent_sha": "04e3c6f4764b8b9df0ecd8589ddb658874f6cd4e"
    }
  },
  {
    "oid": "7a1ea328539a1e1f8e2258d226577287434a23ae",
    "message": "#3 Broker\u5f00\u53d1\u5b8c\u6210\u8c03\u7528Producer\u6d41\u7a0b",
    "date": "2013-05-20T13:21:33Z",
    "url": "https://github.com/apache/rocketmq/commit/7a1ea328539a1e1f8e2258d226577287434a23ae",
    "details": {
      "sha": "464499fa999179fd0989347134de99aa16fb6c8f",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/transaction/DefaultTransactionCheckExecuter.java",
      "status": "modified",
      "additions": 44,
      "deletions": 2,
      "changes": 46,
      "blob_url": "https://github.com/apache/rocketmq/blob/7a1ea328539a1e1f8e2258d226577287434a23ae/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ftransaction%2FDefaultTransactionCheckExecuter.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/7a1ea328539a1e1f8e2258d226577287434a23ae/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ftransaction%2FDefaultTransactionCheckExecuter.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ftransaction%2FDefaultTransactionCheckExecuter.java?ref=7a1ea328539a1e1f8e2258d226577287434a23ae",
      "patch": "@@ -1,11 +1,20 @@\n package com.alibaba.rocketmq.broker.transaction;\n \n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.FileRegion;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.alibaba.rocketmq.broker.BrokerController;\n import com.alibaba.rocketmq.broker.client.ClientChannelInfo;\n+import com.alibaba.rocketmq.broker.pagecache.OneMessageTransfer;\n import com.alibaba.rocketmq.common.MixAll;\n+import com.alibaba.rocketmq.common.protocol.MQProtos.MQRequestCode;\n+import com.alibaba.rocketmq.common.protocol.header.CheckTransactionStateRequestHeader;\n+import com.alibaba.rocketmq.remoting.protocol.RemotingCommand;\n import com.alibaba.rocketmq.store.SelectMapedBufferResult;\n import com.alibaba.rocketmq.store.transaction.TransactionCheckExecuter;\n \n@@ -25,6 +34,36 @@ public DefaultTransactionCheckExecuter(final BrokerController brokerController)\n     }\n \n \n+    private void invokeProducer(//\n+            final Channel channel,//\n+            final CheckTransactionStateRequestHeader requestHeader,//\n+            final SelectMapedBufferResult selectMapedBufferResult//\n+    ) {\n+        RemotingCommand request =\n+                RemotingCommand.createRequestCommand(MQRequestCode.CHECK_TRANSACTION_STATE_VALUE, requestHeader);\n+        request.markOnewayRPC();\n+\n+        try {\n+            FileRegion fileRegion =\n+                    new OneMessageTransfer(request.encodeHeader(selectMapedBufferResult.getSize()),\n+                        selectMapedBufferResult);\n+            channel.sendFile(fileRegion).addListener(new ChannelFutureListener() {\n+                @Override\n+                public void operationComplete(ChannelFuture future) throws Exception {\n+                    selectMapedBufferResult.release();\n+                    if (!future.isSuccess()) {\n+                        log.error(\"invokeProducer failed,\", future.cause());\n+                    }\n+                }\n+            });\n+        }\n+        catch (Throwable e) {\n+            log.error(\"invokeProducer exception\", e);\n+            selectMapedBufferResult.release();\n+        }\n+    }\n+\n+\n     @Override\n     public void gotoCheck(int producerGroupHashCode, long tranStateTableOffset, long commitLogOffset, int msgSize) {\n         // \ufffd\ufffd\u04bb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u046fProducer\n@@ -43,8 +82,11 @@ public void gotoCheck(int producerGroupHashCode, long tranStateTableOffset, long\n                 commitLogOffset, msgSize);\n             return;\n         }\n-        // \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdProducer\ufffd\ufffd\ufffd\ufffd\ufffd\uccbdRPC\ufffd\ufffd\ufffd\ufffd\n \n-        // \ufffd\ufffd\ufffd\u0132\ufffd\ufffd\ufffd\ufffd\u0575\ufffd\ufffd\uccbd\u04e6\ufffd\ufffd\udb4e\udf3f\ufffd\u02bc\ufffd\ufffd\ufffd\ufffd\u04e6\ufffd\ufffd\ufffd\ufffd\n+        // \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdProducer\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n+        final CheckTransactionStateRequestHeader requestHeader = new CheckTransactionStateRequestHeader();\n+        requestHeader.setCommitLogOffset(commitLogOffset);\n+        requestHeader.setTranStateTableOffset(tranStateTableOffset);\n+        this.invokeProducer(clientChannelInfo.getChannel(), requestHeader, selectMapedBufferResult);\n     }\n }",
      "parent_sha": "3cecb2cd863a4694259d8a6c9dd13621f2dde0a4"
    }
  },
  {
    "oid": "3ccf0cf11414323f5688c0c1932548dd1d8c5f67",
    "message": "SLAVE: \u4fee\u590d\u4ece\u7269\u7406\u961f\u5217Load\u6d88\u606f\u53d1\u5230\u5404\u4e2a\u903b\u8f91\u961f\u5217\u65f6\u7684 offset",
    "date": "2014-10-14T09:25:39Z",
    "url": "https://github.com/apache/rocketmq/commit/3ccf0cf11414323f5688c0c1932548dd1d8c5f67",
    "details": {
      "sha": "c8262e6fa460d9f58198c02bb8ef9ad17efffc7f",
      "filename": "rocketmq-store/src/main/java/com/alibaba/rocketmq/store/DefaultMessageStore.java",
      "status": "modified",
      "additions": 18,
      "deletions": 17,
      "changes": 35,
      "blob_url": "https://github.com/apache/rocketmq/blob/3ccf0cf11414323f5688c0c1932548dd1d8c5f67/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/3ccf0cf11414323f5688c0c1932548dd1d8c5f67/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FDefaultMessageStore.java?ref=3ccf0cf11414323f5688c0c1932548dd1d8c5f67",
      "patch": "@@ -15,6 +15,23 @@\n  */\n package com.alibaba.rocketmq.store;\n \n+import static com.alibaba.rocketmq.store.config.BrokerRole.SLAVE;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import com.alibaba.rocketmq.common.ServiceThread;\n import com.alibaba.rocketmq.common.SystemClock;\n import com.alibaba.rocketmq.common.ThreadFactoryImpl;\n@@ -34,22 +51,6 @@\n import com.alibaba.rocketmq.store.index.QueryOffsetResult;\n import com.alibaba.rocketmq.store.schedule.ScheduleMessageService;\n import com.alibaba.rocketmq.store.stats.BrokerStatsManager;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.SocketAddress;\n-import java.nio.ByteBuffer;\n-import java.util.*;\n-import java.util.Map.Entry;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n-\n-import static com.alibaba.rocketmq.store.config.BrokerRole.SLAVE;\n \n \n /**\n@@ -1728,7 +1729,7 @@ private void doReput() {\n                             if (size > 0) {\n                                 DefaultMessageStore.this.putDispatchRequest(dispatchRequest);\n \n-                                this.reputFromOffset += result.getStartOffset() + size;\n+                                this.reputFromOffset = result.getStartOffset() + size;\n                                 readSize += size;\n                                 DefaultMessageStore.this.storeStatsService\n                                     .getSinglePutMessageTopicTimesTotal(dispatchRequest.getTopic())",
      "parent_sha": "77f1f6e560d45310f4c2f970460f1cab8d029444"
    }
  },
  {
    "oid": "4e09a9cfe9eb47cac4302f6e2ca6b40e9ec04470",
    "message": "[ISSUE #6904] Fix fail to start broker if mapped file size is 0 (#6903)",
    "date": "2023-06-22T15:43:59Z",
    "url": "https://github.com/apache/rocketmq/commit/4e09a9cfe9eb47cac4302f6e2ca6b40e9ec04470",
    "details": {
      "sha": "0bc70642fe976ec017fa2ffbed5235974d0596b4",
      "filename": "store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/apache/rocketmq/blob/4e09a9cfe9eb47cac4302f6e2ca6b40e9ec04470/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFileQueue.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/4e09a9cfe9eb47cac4302f6e2ca6b40e9ec04470/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFileQueue.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/store%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fstore%2FMappedFileQueue.java?ref=4e09a9cfe9eb47cac4302f6e2ca6b40e9ec04470",
      "patch": "@@ -247,11 +247,18 @@ public boolean doLoad(List<File> files) {\n         // ascending order\n         files.sort(Comparator.comparing(File::getName));\n \n-        for (File file : files) {\n+        for (int i = 0; i < files.size(); i++) {\n+            File file = files.get(i);\n             if (file.isDirectory()) {\n                 continue;\n             }\n \n+            if (file.length() == 0 && i == files.size() - 1) {\n+                boolean ok = file.delete();\n+                log.warn(\"{} size is 0, auto delete. is_ok: {}\", file, ok);\n+                continue;\n+            }\n+\n             if (file.length() != this.mappedFileSize) {\n                 log.warn(file + \"\\t\" + file.length()\n                         + \" length not matched message store config value, please check it manually\");",
      "parent_sha": "1f0cdc88f86ff0293db0b67168d50950e76aeb5a"
    }
  },
  {
    "oid": "b58eefc1a6c272726f17c16b4bb0c2a2666578fa",
    "message": "[ISSUE #8182] Modify variable names to enhance readability #8182",
    "date": "2024-05-23T12:15:20Z",
    "url": "https://github.com/apache/rocketmq/commit/b58eefc1a6c272726f17c16b4bb0c2a2666578fa",
    "details": {
      "sha": "378a976997597b153e8b215d918e0c11e9545f49",
      "filename": "example/src/main/java/org/apache/rocketmq/example/operation/Consumer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/rocketmq/blob/b58eefc1a6c272726f17c16b4bb0c2a2666578fa/example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fexample%2Foperation%2FConsumer.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/b58eefc1a6c272726f17c16b4bb0c2a2666578fa/example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fexample%2Foperation%2FConsumer.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/example%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fexample%2Foperation%2FConsumer.java?ref=b58eefc1a6c272726f17c16b4bb0c2a2666578fa",
      "patch": "@@ -36,15 +36,15 @@ public class Consumer {\n     public static void main(String[] args) throws MQClientException {\n         CommandLine commandLine = buildCommandline(args);\n         if (commandLine != null) {\n-            String group = commandLine.getOptionValue('g');\n+            String subGroup = commandLine.getOptionValue('g');\n             String topic = commandLine.getOptionValue('t');\n-            String subscription = commandLine.getOptionValue('s');\n+            String subExpression = commandLine.getOptionValue('s');\n             final String returnFailedHalf = commandLine.getOptionValue('f');\n \n-            DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(group);\n+            DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(subGroup);\n             consumer.setInstanceName(Long.toString(System.currentTimeMillis()));\n \n-            consumer.subscribe(topic, subscription);\n+            consumer.subscribe(topic, subExpression);\n \n             consumer.registerMessageListener(new MessageListenerConcurrently() {\n                 AtomicLong consumeTimes = new AtomicLong(0);",
      "parent_sha": "dcc88c65f1f29b392fbb300001b386dbf1901afc"
    }
  },
  {
    "oid": "330d56b2cf93d63fa602f7c24dcad955783266f3",
    "message": "[ISSUE#6595] Fix NPE and repeat access key log (#6596)\n\n* [ISSUE#6595] fix NPE and repeat access key log\r\n\r\n* optimize code",
    "date": "2023-05-26T00:38:59Z",
    "url": "https://github.com/apache/rocketmq/commit/330d56b2cf93d63fa602f7c24dcad955783266f3",
    "details": {
      "sha": "f6699fa13bca6da832fd19c436b9a616b7cfa12f",
      "filename": "acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/apache/rocketmq/blob/330d56b2cf93d63fa602f7c24dcad955783266f3/acl%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainPermissionManager.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/330d56b2cf93d63fa602f7c24dcad955783266f3/acl%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainPermissionManager.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/acl%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Facl%2Fplain%2FPlainPermissionManager.java?ref=330d56b2cf93d63fa602f7c24dcad955783266f3",
      "patch": "@@ -243,6 +243,8 @@ public void load(String aclFilePath) {\n                 if (oldPath == null || aclFilePath.equals(oldPath)) {\n                     plainAccessResourceMap.put(plainAccessResource.getAccessKey(), plainAccessResource);\n                     this.accessKeyTable.put(plainAccessResource.getAccessKey(), aclFilePath);\n+                } else {\n+                    log.warn(\"The accessKey {} is repeated in multiple ACL files\", plainAccessResource.getAccessKey());\n                 }\n             }\n         }\n@@ -613,8 +615,8 @@ public void validate(PlainAccessResource plainAccessResource) {\n \n         // Check the white addr for accessKey\n         String aclFileName = accessKeyTable.get(plainAccessResource.getAccessKey());\n-        PlainAccessResource ownedAccess = aclPlainAccessResourceMap.get(aclFileName).get(plainAccessResource.getAccessKey());\n-        if (null == ownedAccess) {\n+        PlainAccessResource ownedAccess = aclPlainAccessResourceMap.getOrDefault(aclFileName, new HashMap<>()).get(plainAccessResource.getAccessKey());\n+        if (ownedAccess == null) {\n             throw new AclException(String.format(\"No PlainAccessResource for accessKey=%s\", plainAccessResource.getAccessKey()));\n         }\n         if (ownedAccess.getRemoteAddressStrategy().match(plainAccessResource)) {",
      "parent_sha": "224d660670b62d276fb95fda137e748a326e1d68"
    }
  },
  {
    "oid": "cc222fffa88c8389737d8c432c7e6f77fac16b9e",
    "message": "#258 update log.",
    "date": "2013-09-24T08:46:35Z",
    "url": "https://github.com/apache/rocketmq/commit/cc222fffa88c8389737d8c432c7e6f77fac16b9e",
    "details": {
      "sha": "8ca6671fc5178929eee8255469ad465766dca2bb",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/cc222fffa88c8389737d8c432c7e6f77fac16b9e/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fclient%2FConsumerManager.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/cc222fffa88c8389737d8c432c7e6f77fac16b9e/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fclient%2FConsumerManager.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fclient%2FConsumerManager.java?ref=cc222fffa88c8389737d8c432c7e6f77fac16b9e",
      "patch": "@@ -124,7 +124,7 @@ public void scanNotActiveChannel() {\n                     long diff = System.currentTimeMillis() - clientChannelInfo.getLastUpdateTimestamp();\n                     if (diff > ChannelExpiredTimeout) {\n                         log.warn(\n-                            \"SCAN: remove expired channel from ConsumerManager consumerTable, producer group hash code: {}. channel={}, consumerGroup={}\",\n+                            \"SCAN: remove expired channel from ConsumerManager consumerTable. channel={}, consumerGroup={}\",\n                             RemotingHelper.parseChannelRemoteAddr(entry.getKey()), group);\n                         RemotingUtil.closeChannel(clientChannelInfo.getChannel());\n                         info.getChannelInfoTable().remove(entry.getKey());",
      "parent_sha": "4d96925c1ff2d9c67dd7699b5a709dfda46d0dd5"
    }
  },
  {
    "oid": "0ab88ebdef94fae46b4a21da73333362493f5253",
    "message": "#4 \u589e\u52a0\u65e5\u5fd7",
    "date": "2013-07-22T09:29:14Z",
    "url": "https://github.com/apache/rocketmq/commit/0ab88ebdef94fae46b4a21da73333362493f5253",
    "details": {
      "sha": "b7227390e30582593a4c97d57e5e2ed20170aec6",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/ClientRemotingProcessor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/rocketmq/blob/0ab88ebdef94fae46b4a21da73333362493f5253/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FClientRemotingProcessor.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/0ab88ebdef94fae46b4a21da73333362493f5253/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FClientRemotingProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FClientRemotingProcessor.java?ref=0ab88ebdef94fae46b4a21da73333362493f5253",
      "patch": "@@ -75,7 +75,8 @@ public RemotingCommand notifyConsumerIdsChanged(ChannelHandlerContext ctx, Remot\n         final NotifyConsumerIdsChangedRequestHeader requestHeader =\n                 (NotifyConsumerIdsChangedRequestHeader) request\n                     .decodeCommandCustomHeader(NotifyConsumerIdsChangedRequestHeader.class);\n-        log.info(\"receive broker's notification, the consumer group: {} changed, rebalance immediately\",\n+        log.info(\"receive broker's notification[{}], the consumer group: {} changed, rebalance immediately\",//\n+            RemotingHelper.parseChannelRemoteAddr(ctx.channel()),//\n             requestHeader.getConsumerGroup());\n         this.mqClientFactory.rebalanceImmediately();\n         return null;",
      "parent_sha": "94a5d2655e1eef7cd83f27036d7b060609cdbe62"
    }
  },
  {
    "oid": "d7516ebb12f4f051585e92a788a3674f22691349",
    "message": "Store\u7684error\u65e5\u5fd7\u5355\u72ec\u6253\u5370\uff0c\u65b9\u4fbf\u6392\u67e5\u95ee\u9898\u3002",
    "date": "2014-06-24T12:10:06Z",
    "url": "https://github.com/apache/rocketmq/commit/d7516ebb12f4f051585e92a788a3674f22691349",
    "details": {
      "sha": "acc88e3c992429b91f284f8bcbca2f33386311ea",
      "filename": "rocketmq-store/src/main/java/com/alibaba/rocketmq/store/MapedFileQueue.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/apache/rocketmq/blob/d7516ebb12f4f051585e92a788a3674f22691349/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FMapedFileQueue.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/d7516ebb12f4f051585e92a788a3674f22691349/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FMapedFileQueue.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-store%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fstore%2FMapedFileQueue.java?ref=d7516ebb12f4f051585e92a788a3674f22691349",
      "patch": "@@ -39,6 +39,7 @@\n  */\n public class MapedFileQueue {\n     private static final Logger log = LoggerFactory.getLogger(LoggerName.StoreLoggerName);\n+    private static final Logger logError = LoggerFactory.getLogger(LoggerName.StoreErrorLoggerName);\n     // \u6bcf\u6b21\u89e6\u53d1\u5220\u9664\u6587\u4ef6\uff0c\u6700\u591a\u5220\u9664\u591a\u5c11\u4e2a\u6587\u4ef6\n     private static final int DeleteFilesBatchMax = 30;\n     // \u6587\u4ef6\u5b58\u50a8\u4f4d\u7f6e\n@@ -463,13 +464,14 @@ public MapedFile findMapedFileByOffset(final long offset, final boolean returnFi\n                 int index =\n                         (int) ((offset / this.mapedFileSize) - (mapedFile.getFileFromOffset() / this.mapedFileSize));\n                 if (index < 0 || index >= this.mapedFiles.size()) {\n-                    log.warn(\n-                        \"findMapedFileByOffset offset not matched, request Offset: {}, index: {}, mapedFileSize: {}, mapedFiles count: {}, StackTrace: {}\",//\n-                        offset,//\n-                        index,//\n-                        this.mapedFileSize,//\n-                        this.mapedFiles.size(),//\n-                        UtilAll.currentStackTrace());\n+                    logError\n+                        .warn(\n+                            \"findMapedFileByOffset offset not matched, request Offset: {}, index: {}, mapedFileSize: {}, mapedFiles count: {}, StackTrace: {}\",//\n+                            offset,//\n+                            index,//\n+                            this.mapedFileSize,//\n+                            this.mapedFiles.size(),//\n+                            UtilAll.currentStackTrace());\n                 }\n \n                 try {",
      "parent_sha": "161aef1e94a8c82572e1bf28bbcf20ac8de58399"
    }
  },
  {
    "oid": "1132af05f69b7c94623a2f575d230798b63b8b61",
    "message": "Issue #50 \u6d88\u8d39\u4f4d\u70b9\u91cd\u7f6e\uff0c\u5bfc\u81f4\u6d88\u606f\u5927\u91cf\u91cd\u590d",
    "date": "2016-06-23T06:30:43Z",
    "url": "https://github.com/apache/rocketmq/commit/1132af05f69b7c94623a2f575d230798b63b8b61",
    "details": {
      "sha": "2a5b541a7190ac296e525e40ebf2f250449f5b88",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientInstance.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/1132af05f69b7c94623a2f575d230798b63b8b61/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientInstance.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/1132af05f69b7c94623a2f575d230798b63b8b61/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientInstance.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientInstance.java?ref=1132af05f69b7c94623a2f575d230798b63b8b61",
      "patch": "@@ -1037,7 +1037,7 @@ public void resetOffset(String topic, String group, Map<MessageQueue, Long> offs\n             Iterator<MessageQueue> iterator = processQueueTable.keySet().iterator();\n             processQueueTable = consumer.getRebalanceImpl().getProcessQueueTable();\n             while (iterator.hasNext()) {\n-                MessageQueue mq = itr.next();\n+                MessageQueue mq = iterator.next();\n                 if (topic.equals(mq.getTopic())) {\n                     consumer.updateConsumeOffset(mq, offsetTable.get(mq));\n                     consumer.getRebalanceImpl().removeUnnecessaryMessageQueue(mq, processQueueTable.get(mq));",
      "parent_sha": "1ef500e94e7546b78a70505f770f9e67c775aa3d"
    }
  },
  {
    "oid": "c9686ff9d7f0f894e82808da6337e1a30d3ccac9",
    "message": "\u589e\u52a0slaver\u5730\u5740",
    "date": "2013-07-01T09:56:38Z",
    "url": "https://github.com/apache/rocketmq/commit/c9686ff9d7f0f894e82808da6337e1a30d3ccac9",
    "details": {
      "sha": "3746b8a338f4bc95a4538e3eec842e13c4b4c0c8",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/MQClientAPIImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/c9686ff9d7f0f894e82808da6337e1a30d3ccac9/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FMQClientAPIImpl.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/c9686ff9d7f0f894e82808da6337e1a30d3ccac9/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FMQClientAPIImpl.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2FMQClientAPIImpl.java?ref=c9686ff9d7f0f894e82808da6337e1a30d3ccac9",
      "patch": "@@ -891,7 +891,7 @@ public TopicRouteData getTopicRouteInfoFromNameServer(final String topic, final\n         HashMap<Long/* brokerId */, String/* broker address */> brokerAddrs = new HashMap<Long, String>();\r\n         // brokerAddrs.put(0L, \"10.235.170.21:10911\");\r\n         brokerAddrs.put(0L, \"127.0.0.1:10911\");\r\n-\r\n+        brokerAddrs.put(1L, \"127.0.0.1:10913\");\r\n         bd.setBrokerName(\"dev170021.sqa.cm6\");\r\n         bd.setBrokerAddrs(brokerAddrs);\r\n \r",
      "parent_sha": "198ae4703757c578ee3e89578a23df80bf25df1e"
    }
  },
  {
    "oid": "46766a90b55ec0411cb6548d691943a73bb963b9",
    "message": "\u4fee\u590d\u542f\u52a8filter server\u8fdb\u7a0b\u88ab\u5361\u4e3b\u7684\u60c5\u51b5",
    "date": "2015-01-05T08:41:34Z",
    "url": "https://github.com/apache/rocketmq/commit/46766a90b55ec0411cb6548d691943a73bb963b9",
    "details": {
      "sha": "1699526c72bbc966570bb9def44eaae26a26e64d",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/filtersrv/FilterServerUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 27,
      "changes": 28,
      "blob_url": "https://github.com/apache/rocketmq/blob/46766a90b55ec0411cb6548d691943a73bb963b9/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ffiltersrv%2FFilterServerUtil.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/46766a90b55ec0411cb6548d691943a73bb963b9/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ffiltersrv%2FFilterServerUtil.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Ffiltersrv%2FFilterServerUtil.java?ref=46766a90b55ec0411cb6548d691943a73bb963b9",
      "patch": "@@ -1,15 +1,9 @@\n package com.alibaba.rocketmq.broker.filtersrv;\n \n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-\n import org.slf4j.Logger;\n \n \n public class FilterServerUtil {\n-\n     private static String[] splitShellString(final String shellString) {\n         String[] split = shellString.split(\" \");\n         return split;\n@@ -21,27 +15,7 @@ public static void callShell(final String shellString, final Logger log) {\n         try {\n             String[] cmdArray = splitShellString(shellString);\n             process = Runtime.getRuntime().exec(cmdArray);\n-            final InputStream is1 = process.getInputStream();\n-            new Thread(new Runnable() {\n-                public void run() {\n-                    BufferedReader br = new BufferedReader(new InputStreamReader(is1));\n-                    try {\n-                        while (br.readLine() != null)\n-                            ;\n-                    }\n-                    catch (IOException e) {\n-                        log.error(\"callShell: readLine IOException, \" + shellString, e);\n-                    }\n-                }\n-            }).start(); // \u542f\u52a8\u5355\u72ec\u7684\u7ebf\u7a0b\u6765\u6e05\u7a7aprocess.getInputStream()\u7684\u7f13\u51b2\u533a\n-\n-            InputStream is2 = process.getErrorStream();\n-            BufferedReader br2 = new BufferedReader(new InputStreamReader(is2));\n-            StringBuilder buf = new StringBuilder(); // \u4fdd\u5b58\u8f93\u51fa\u7ed3\u679c\u6d41\n-            String line = null;\n-            while ((line = br2.readLine()) != null)\n-                buf.append(line); // \u5faa\u73af\u7b49\u5f85ffmpeg\u8fdb\u7a0b\u7ed3\u675f\n-\n+            process.waitFor();\n             log.info(\"callShell: <{}> OK\", shellString);\n         }\n         catch (Throwable e) {",
      "parent_sha": "78e432e131136757706ec3f717f63f98822a5358"
    }
  },
  {
    "oid": "78501c746123ce21622e18a3b6490220ace535d5",
    "message": "[ISSUE #9007] Fix client connection local ip is null in RemotingClient (#9008)",
    "date": "2024-12-02T07:13:05Z",
    "url": "https://github.com/apache/rocketmq/commit/78501c746123ce21622e18a3b6490220ace535d5",
    "details": {
      "sha": "6ac54aed6d23ffae409d5094a6221bc61c002819",
      "filename": "remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/rocketmq/blob/78501c746123ce21622e18a3b6490220ace535d5/remoting%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingClient.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/78501c746123ce21622e18a3b6490220ace535d5/remoting%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingClient.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/remoting%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fremoting%2Fnetty%2FNettyRemotingClient.java?ref=78501c746123ce21622e18a3b6490220ace535d5",
      "patch": "@@ -74,6 +74,7 @@\n import org.apache.rocketmq.common.ThreadFactoryImpl;\n import org.apache.rocketmq.common.constant.LoggerName;\n import org.apache.rocketmq.common.utils.FutureUtils;\n+import org.apache.rocketmq.common.utils.NetworkUtil;\n import org.apache.rocketmq.common.utils.ThreadUtils;\n import org.apache.rocketmq.logging.org.slf4j.Logger;\n import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n@@ -1130,7 +1131,7 @@ class NettyConnectManageHandler extends ChannelDuplexHandler {\n         @Override\n         public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,\n             ChannelPromise promise) throws Exception {\n-            final String local = localAddress == null ? \"UNKNOWN\" : RemotingHelper.parseSocketAddressAddr(localAddress);\n+            final String local = localAddress == null ? NetworkUtil.getLocalAddress() : RemotingHelper.parseSocketAddressAddr(localAddress);\n             final String remote = remoteAddress == null ? \"UNKNOWN\" : RemotingHelper.parseSocketAddressAddr(remoteAddress);\n             LOGGER.info(\"NETTY CLIENT PIPELINE: CONNECT  {} => {}\", local, remote);\n ",
      "parent_sha": "9a891f1d49af0cfe4e384bc28a0bf0eeed02587f"
    }
  },
  {
    "oid": "60fab89c22a216de365c42238928b4da4532303d",
    "message": "[ISSUE #9294] Proxy compatible batch message (#9295)",
    "date": "2025-04-11T06:37:54Z",
    "url": "https://github.com/apache/rocketmq/commit/60fab89c22a216de365c42238928b4da4532303d",
    "details": {
      "sha": "f3d8fb6e3141fa5cf50b4a850fd0f255cb80d509",
      "filename": "proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/AbstractRemotingActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/60fab89c22a216de365c42238928b4da4532303d/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fremoting%2Factivity%2FAbstractRemotingActivity.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/60fab89c22a216de365c42238928b4da4532303d/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fremoting%2Factivity%2FAbstractRemotingActivity.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fremoting%2Factivity%2FAbstractRemotingActivity.java?ref=60fab89c22a216de365c42238928b4da4532303d",
      "patch": "@@ -63,7 +63,7 @@ public AbstractRemotingActivity(RequestPipeline requestPipeline, MessagingProces\n     protected RemotingCommand request(ChannelHandlerContext ctx, RemotingCommand request,\n         ProxyContext context, long timeoutMillis) throws Exception {\n         String brokerName;\n-        if (request.getCode() == RequestCode.SEND_MESSAGE_V2) {\n+        if (request.getCode() == RequestCode.SEND_MESSAGE_V2 || request.getCode() == RequestCode.SEND_BATCH_MESSAGE) {\n             if (request.getExtFields().get(BROKER_NAME_FIELD_FOR_SEND_MESSAGE_V2) == null) {\n                 return RemotingCommand.buildErrorResponse(ResponseCode.VERSION_NOT_SUPPORTED,\n                     \"Request doesn't have field bname\");",
      "parent_sha": "f86fb4090442ecdb0dda7583c5edbc6cd87c22cd"
    }
  },
  {
    "oid": "5a0da0260b213bd22129fd3119459edfce92b036",
    "message": "changed 'item' to 'items' (#3563)",
    "date": "2021-12-01T05:56:30Z",
    "url": "https://github.com/apache/rocketmq/commit/5a0da0260b213bd22129fd3119459edfce92b036",
    "details": {
      "sha": "f6a26d6888b9cee0b61bf76420a2891db81d70f7",
      "filename": "namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/5a0da0260b213bd22129fd3119459edfce92b036/namesrv%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fnamesrv%2FNamesrvStartup.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/5a0da0260b213bd22129fd3119459edfce92b036/namesrv%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fnamesrv%2FNamesrvStartup.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/namesrv%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fnamesrv%2FNamesrvStartup.java?ref=5a0da0260b213bd22129fd3119459edfce92b036",
      "patch": "@@ -165,7 +165,7 @@ public static Options buildCommandlineOptions(final Options options) {\n         opt.setRequired(false);\n         options.addOption(opt);\n \n-        opt = new Option(\"p\", \"printConfigItem\", false, \"Print all config item\");\n+        opt = new Option(\"p\", \"printConfigItem\", false, \"Print all config items\");\n         opt.setRequired(false);\n         options.addOption(opt);\n ",
      "parent_sha": "a82306853d5a5902a180ed07f660e45e4bab588e"
    }
  },
  {
    "oid": "16369e200c3d76dc5b93df763b972b083f241924",
    "message": "[ISSUE #4897] Increase the retry interval of registration failure to prevent frequent log output",
    "date": "2022-08-26T09:16:02Z",
    "url": "https://github.com/apache/rocketmq/commit/16369e200c3d76dc5b93df763b972b083f241924",
    "details": {
      "sha": "dd0aaa5636e4389c02749a748727fee25243de97",
      "filename": "broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/rocketmq/blob/16369e200c3d76dc5b93df763b972b083f241924/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fcontroller%2FReplicasManager.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/16369e200c3d76dc5b93df763b972b083f241924/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fcontroller%2FReplicasManager.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fbroker%2Fcontroller%2FReplicasManager.java?ref=16369e200c3d76dc5b93df763b972b083f241924",
      "patch": "@@ -57,6 +57,8 @@\n public class ReplicasManager {\n     private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n \n+    private static final int RETRY_INTERVAL_SECOND = 5;\n+\n     private final ScheduledExecutorService scheduledService;\n     private final ExecutorService executorService;\n     private final BrokerController brokerController;\n@@ -112,7 +114,7 @@ public void start() {\n                 int retryTimes = 0;\n                 do {\n                     try {\n-                        TimeUnit.SECONDS.sleep(1);\n+                        TimeUnit.SECONDS.sleep(RETRY_INTERVAL_SECOND);\n                     } catch (InterruptedException ignored) {\n \n                     }",
      "parent_sha": "c4117138367234d6cfbddcbac733ef1c34ab0aa3"
    }
  },
  {
    "oid": "9e58a00f1289d6c35d98d389dc500c69dba5821d",
    "message": "#253 \u4f18\u5316\u6d88\u8d39\u8fdb\u5ea6\u67e5\u8be2\u547d\u4ee4",
    "date": "2013-10-20T10:03:11Z",
    "url": "https://github.com/apache/rocketmq/commit/9e58a00f1289d6c35d98d389dc500c69dba5821d",
    "details": {
      "sha": "104149c1bfa143a9873b800b6d4ee0dd88c931ac",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/protocol/body/ConsumerConnection.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/9e58a00f1289d6c35d98d389dc500c69dba5821d/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fprotocol%2Fbody%2FConsumerConnection.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/9e58a00f1289d6c35d98d389dc500c69dba5821d/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fprotocol%2Fbody%2FConsumerConnection.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Fprotocol%2Fbody%2FConsumerConnection.java?ref=9e58a00f1289d6c35d98d389dc500c69dba5821d",
      "patch": "@@ -26,7 +26,7 @@ public class ConsumerConnection extends RemotingSerializable {\n \n \n     public int computeMinVersion() {\n-        int minVersion = Integer.MIN_VALUE;\n+        int minVersion = Integer.MAX_VALUE;\n         for (Connection c : this.connectionSet) {\n             if (c.getVersion() < minVersion) {\n                 minVersion = c.getVersion();",
      "parent_sha": "816c068621f046f8cdcd1c86a68a46130aaafc51"
    }
  },
  {
    "oid": "7bcf919d88731689c34b5c808598d40c9e33822f",
    "message": "[ISSUE #9128] Fix NPE when grpc client ack message immediately after changing proxy (#9129)",
    "date": "2025-01-14T08:01:28Z",
    "url": "https://github.com/apache/rocketmq/commit/7bcf919d88731689c34b5c808598d40c9e33822f",
    "details": {
      "sha": "76019a1ca94303789332ddd36cba530eb156fe28",
      "filename": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/apache/rocketmq/blob/7bcf919d88731689c34b5c808598d40c9e33822f/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fconsumer%2FAckMessageActivity.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/7bcf919d88731689c34b5c808598d40c9e33822f/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fconsumer%2FAckMessageActivity.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fconsumer%2FAckMessageActivity.java?ref=7bcf919d88731689c34b5c808598d40c9e33822f",
      "patch": "@@ -34,6 +34,7 @@\n import org.apache.rocketmq.proxy.config.ConfigurationManager;\n import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;\n import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;\n+import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcClientChannel;\n import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;\n import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;\n import org.apache.rocketmq.proxy.processor.BatchAckResult;\n@@ -193,10 +194,12 @@ protected void setAckResponseStatus(AckMessageResponse.Builder responseBuilder,\n \n     protected String getHandleString(ProxyContext ctx, String group, AckMessageRequest request, AckMessageEntry ackMessageEntry) {\n         String handleString = ackMessageEntry.getReceiptHandle();\n-\n-        MessageReceiptHandle messageReceiptHandle = messagingProcessor.removeReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());\n-        if (messageReceiptHandle != null) {\n-            handleString = messageReceiptHandle.getReceiptHandleStr();\n+        GrpcClientChannel channel = grpcChannelManager.getChannel(ctx.getClientID());\n+        if (channel != null) {\n+            MessageReceiptHandle messageReceiptHandle = messagingProcessor.removeReceiptHandle(ctx, channel, group, ackMessageEntry.getMessageId(), ackMessageEntry.getReceiptHandle());\n+            if (messageReceiptHandle != null) {\n+                handleString = messageReceiptHandle.getReceiptHandleStr();\n+            }\n         }\n         return handleString;\n     }",
      "parent_sha": "94d9185f2c80bcfb9ffca03a65080f48060f0a39"
    }
  },
  {
    "oid": "3b94ff7f8d116052d2d94132fb8c426c4498a920",
    "message": "\u4fee\u6539\u65e5\u5fd7\u6253\u5370",
    "date": "2013-09-30T12:54:03Z",
    "url": "https://github.com/apache/rocketmq/commit/3b94ff7f8d116052d2d94132fb8c426c4498a920",
    "details": {
      "sha": "39e142448cd8a828cc3c779719c29accc4644dbd",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/processor/ClientManageProcessor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/apache/rocketmq/blob/3b94ff7f8d116052d2d94132fb8c426c4498a920/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FClientManageProcessor.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/3b94ff7f8d116052d2d94132fb8c426c4498a920/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FClientManageProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fprocessor%2FClientManageProcessor.java?ref=3b94ff7f8d116052d2d94132fb8c426c4498a920",
      "patch": "@@ -184,11 +184,12 @@ public RemotingCommand heartBeat(ChannelHandlerContext ctx, RemotingCommand requ\n                 data.getSubscriptionDataSet()//\n                 );\n \n-            log.debug(\"registerConsumer {} {} CHANGED: {}\",//\n-                data.toString(),//\n-                RemotingHelper.parseChannelRemoteAddr(ctx.channel()),//\n-                changed//\n-            );\n+            if (changed) {\n+                log.info(\"registerConsumer info changed {} {}\",//\n+                    data.toString(),//\n+                    RemotingHelper.parseChannelRemoteAddr(ctx.channel())//\n+                );\n+            }\n         }\n \n         // \u6ce8\u518cProducer",
      "parent_sha": "f4692c71caf8ba5f5b10f88025db04323807942a"
    }
  },
  {
    "oid": "c8ed34727b480a01c84409f82c028e99416047fd",
    "message": "\u5ef6\u957f\u8d85\u65f6\u65f6\u95f4\u3002",
    "date": "2014-04-01T03:51:49Z",
    "url": "https://github.com/apache/rocketmq/commit/c8ed34727b480a01c84409f82c028e99416047fd",
    "details": {
      "sha": "5092dbfb660d7897d3d212cbe5004db00d0aee1a",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/utils/HttpTinyClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/c8ed34727b480a01c84409f82c028e99416047fd/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Futils%2FHttpTinyClient.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/c8ed34727b480a01c84409f82c028e99416047fd/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Futils%2FHttpTinyClient.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2Futils%2FHttpTinyClient.java?ref=c8ed34727b480a01c84409f82c028e99416047fd",
      "patch": "@@ -31,7 +31,7 @@ static public HttpResult httpGet(String url, List<String> headers, List<String>\n         try {\n             conn = (HttpURLConnection) new URL(url).openConnection();\n             conn.setRequestMethod(\"GET\");\n-            conn.setConnectTimeout(100);\n+            conn.setConnectTimeout(500);\n             conn.setReadTimeout((int) readTimeoutMs);\n             setHeaders(conn, headers, encoding);\n ",
      "parent_sha": "8a6f61e64e0a5483e5484243a6cebef12fee1311"
    }
  },
  {
    "oid": "6ff00ed0530bbd94e6ed9cc444b0a2fdb57c7ba3",
    "message": "[ISSUE #4000]Fix the warn log input in command tools (#4001)\n\nCo-authored-by: zhangjidi <zhangjidi@cmss.chinamobile.com>",
    "date": "2022-03-19T09:56:56Z",
    "url": "https://github.com/apache/rocketmq/commit/6ff00ed0530bbd94e6ed9cc444b0a2fdb57c7ba3",
    "details": {
      "sha": "7ee2ebaa4b06150a1eea3ecb7d67eabe3a5fcb6e",
      "filename": "client/src/main/java/org/apache/rocketmq/client/log/ClientLogger.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/apache/rocketmq/blob/6ff00ed0530bbd94e6ed9cc444b0a2fdb57c7ba3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Flog%2FClientLogger.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/6ff00ed0530bbd94e6ed9cc444b0a2fdb57c7ba3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Flog%2FClientLogger.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fclient%2Flog%2FClientLogger.java?ref=6ff00ed0530bbd94e6ed9cc444b0a2fdb57c7ba3",
      "patch": "@@ -44,6 +44,8 @@ public class ClientLogger {\n \n     private static final boolean CLIENT_USE_SLF4J;\n \n+    private static Appender appenderProxy = new AppenderProxy();\n+\n     //private static Appender rocketmqClientAppender = null;\n \n     static {\n@@ -53,6 +55,7 @@ public class ClientLogger {\n             CLIENT_LOGGER = createLogger(LoggerName.CLIENT_LOGGER_NAME);\n             createLogger(LoggerName.COMMON_LOGGER_NAME);\n             createLogger(RemotingHelper.ROCKETMQ_REMOTING);\n+            Logger.getRootLogger().addAppender(appenderProxy);\n         } else {\n             CLIENT_LOGGER = InternalLoggerFactory.getLogger(LoggerName.CLIENT_LOGGER_NAME);\n         }\n@@ -76,7 +79,6 @@ private static synchronized Appender createClientAppender() {\n             .withRollingFileAppender(logFileName, maxFileSize, maxFileIndex)\n             .withAsync(false, queueSize).withName(ROCKETMQ_CLIENT_APPENDER_NAME).withLayout(layout).build();\n \n-        Logger.getRootLogger().addAppender(rocketmqClientAppender);\n         return rocketmqClientAppender;\n     }\n \n@@ -91,7 +93,7 @@ private static InternalLogger createLogger(final String loggerName) {\n         //   createClientAppender();\n         //}\n \n-        realLogger.addAppender(new AppenderProxy());\n+        realLogger.addAppender(appenderProxy);\n         realLogger.setLevel(Level.toLevel(clientLogLevel));\n         realLogger.setAdditivity(additive);\n         return logger;",
      "parent_sha": "c1aeca291ea686a2b7f01ffec30132f5a370a2ab"
    }
  },
  {
    "oid": "afb89da5818c6acb10e443f15971bbc75b62ceaa",
    "message": "[ISSUE #3949] set maxAttempts to retryMaxTimes + 1",
    "date": "2022-07-13T03:32:59Z",
    "url": "https://github.com/apache/rocketmq/commit/afb89da5818c6acb10e443f15971bbc75b62ceaa",
    "details": {
      "sha": "14ddede7006243d546533cf36293a2bebe204f1e",
      "filename": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/afb89da5818c6acb10e443f15971bbc75b62ceaa/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fcommon%2FGrpcClientSettingsManager.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/afb89da5818c6acb10e443f15971bbc75b62ceaa/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fcommon%2FGrpcClientSettingsManager.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fcommon%2FGrpcClientSettingsManager.java?ref=afb89da5818c6acb10e443f15971bbc75b62ceaa",
      "patch": "@@ -98,7 +98,7 @@ protected static Settings mergeSubscriptionData(Settings settings, SubscriptionG\n \n         resultSettingsBuilder.getSubscriptionBuilder().setFifo(config.isConsumeMessageOrderly());\n \n-        resultSettingsBuilder.getBackoffPolicyBuilder().setMaxAttempts(config.getRetryMaxTimes());\n+        resultSettingsBuilder.getBackoffPolicyBuilder().setMaxAttempts(config.getRetryMaxTimes() + 1);\n \n         GroupRetryPolicy groupRetryPolicy = config.getGroupRetryPolicy();\n         if (groupRetryPolicy.getType().equals(GroupRetryPolicyType.EXPONENTIAL)) {",
      "parent_sha": "cc996007c23e7eff6a6fd7f1f22f12160e6b60ca"
    }
  },
  {
    "oid": "fe0351baea97ab6742a6a7d6b2b638c465b60be6",
    "message": "#325 \u4fee\u590d\u6ce8\u9500\u8ba2\u9605\u5173\u7cfb\u7684\u903b\u8f91\u9519\u8bef\u3002",
    "date": "2014-01-07T06:34:34Z",
    "url": "https://github.com/apache/rocketmq/commit/fe0351baea97ab6742a6a7d6b2b638c465b60be6",
    "details": {
      "sha": "85249653ff9ae3a2234bb8ae6316c49eb7cac9be",
      "filename": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/client/ConsumerGroupInfo.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/apache/rocketmq/blob/fe0351baea97ab6742a6a7d6b2b638c465b60be6/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fclient%2FConsumerGroupInfo.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/fe0351baea97ab6742a6a7d6b2b638c465b60be6/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fclient%2FConsumerGroupInfo.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-broker%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fbroker%2Fclient%2FConsumerGroupInfo.java?ref=fe0351baea97ab6742a6a7d6b2b638c465b60be6",
      "patch": "@@ -178,7 +178,16 @@ else if (sub.getSubVersion() > old.getSubVersion()) {\n         while (it.hasNext()) {\n             Entry<String, SubscriptionData> next = it.next();\n             String oldTopic = next.getKey();\n-            if (!subList.contains(oldTopic)) {\n+\n+            boolean exist = false;\n+            for (SubscriptionData sub : subList) {\n+                if (sub.getTopic().equals(oldTopic)) {\n+                    exist = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!exist) {\n                 log.warn(\"subscription changed, group: {} remove topic {} {}\", //\n                     this.groupName,//\n                     oldTopic,//",
      "parent_sha": "0b049a6805eb07377fab575545cf28d3844d94cf"
    }
  },
  {
    "oid": "aec128263e820b84ef77ce4663a4b64a87c4861c",
    "message": "serverWorkerThreads\u9ed8\u8ba4\u6570\u91cf\u6539\u5c0f\u3002",
    "date": "2014-07-18T07:28:48Z",
    "url": "https://github.com/apache/rocketmq/commit/aec128263e820b84ef77ce4663a4b64a87c4861c",
    "details": {
      "sha": "7c5efe947747df6e8c330beff12f5beea1ebecea",
      "filename": "rocketmq-remoting/src/main/java/com/alibaba/rocketmq/remoting/netty/NettyServerConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/aec128263e820b84ef77ce4663a4b64a87c4861c/rocketmq-remoting%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fremoting%2Fnetty%2FNettyServerConfig.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/aec128263e820b84ef77ce4663a4b64a87c4861c/rocketmq-remoting%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fremoting%2Fnetty%2FNettyServerConfig.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-remoting%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fremoting%2Fnetty%2FNettyServerConfig.java?ref=aec128263e820b84ef77ce4663a4b64a87c4861c",
      "patch": "@@ -23,7 +23,7 @@\n  */\n public class NettyServerConfig {\n     private int listenPort = 8888;\n-    private int serverWorkerThreads = 32;\n+    private int serverWorkerThreads = 8;\n     private int serverCallbackExecutorThreads = 0;\n     private int serverSelectorThreads = 3;\n     private int serverOnewaySemaphoreValue = 32;",
      "parent_sha": "171e349fe4c4593892cb0b02553c45cb6c44aa5d"
    }
  },
  {
    "oid": "be00fdc98c7539448d423754bdd0a96ad03d0a00",
    "message": "#253 \u4fee\u6539\u96c6\u7fa4tps \u6253\u5370\u683c\u5f0f",
    "date": "2013-10-20T12:32:03Z",
    "url": "https://github.com/apache/rocketmq/commit/be00fdc98c7539448d423754bdd0a96ad03d0a00",
    "details": {
      "sha": "2952e0461dfaeaf6a04b1b8b573fd5cd137cdb4b",
      "filename": "rocketmq-tools/src/main/java/com/alibaba/rocketmq/tools/command/cluster/ClusterListSubCommand.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/apache/rocketmq/blob/be00fdc98c7539448d423754bdd0a96ad03d0a00/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fcluster%2FClusterListSubCommand.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/be00fdc98c7539448d423754bdd0a96ad03d0a00/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fcluster%2FClusterListSubCommand.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Ftools%2Fcommand%2Fcluster%2FClusterListSubCommand.java?ref=be00fdc98c7539448d423754bdd0a96ad03d0a00",
      "patch": "@@ -67,7 +67,7 @@ public void execute(final CommandLine commandLine, final Options options) {\n \n             ClusterInfo clusterInfoSerializeWrapper = defaultMQAdminExt.examineBrokerClusterInfo();\n \n-            System.out.printf(\"%-16s  %-32s  %-4s  %-22s %-8s %-8s\\n\",//\n+            System.out.printf(\"%-16s  %-32s  %-4s  %-22s %-11s %-11s\\n\",//\n                 \"#Cluster Name\",//\n                 \"#Broker Name\",//\n                 \"#BID\",//\n@@ -92,8 +92,8 @@ public void execute(final CommandLine commandLine, final Options options) {\n                                 brokerData.getBrokerAddrs().entrySet().iterator();\n                         while (itAddr.hasNext()) {\n                             Map.Entry<Long, String> next1 = itAddr.next();\n-                            long in = 0;\n-                            long out = 0;\n+                            double in = 0;\n+                            double out = 0;\n \n                             try {\n                                 KVTable kvTable = defaultMQAdminExt.fetchBrokerRuntimeStats(next1.getValue());\n@@ -103,21 +103,21 @@ public void execute(final CommandLine commandLine, final Options options) {\n                                 {\n                                     String[] tpss = putTps.split(\" \");\n                                     if (tpss != null && tpss.length > 0) {\n-                                        in = (long) Double.parseDouble(tpss[0]);\n+                                        in = Double.parseDouble(tpss[0]);\n                                     }\n                                 }\n \n                                 {\n                                     String[] tpss = getTransferedTps.split(\" \");\n                                     if (tpss != null && tpss.length > 0) {\n-                                        out = (long) Double.parseDouble(tpss[0]);\n+                                        out = Double.parseDouble(tpss[0]);\n                                     }\n                                 }\n                             }\n                             catch (Exception e) {\n                             }\n \n-                            System.out.printf(\"%-16s  %-32s  %-4s  %-22s %-8d %-8d\\n\",//\n+                            System.out.printf(\"%-16s  %-32s  %-4s  %-22s %8.2f %8.2f\\n\",//\n                                 clusterName,//\n                                 brokerName,//\n                                 next1.getKey().longValue(),//",
      "parent_sha": "e2d427abef23ecea9ca6fe693e519a53d0975c06"
    }
  },
  {
    "oid": "509ff0c2c4b4239b27e4e7fe93c304bfc4dc7aa7",
    "message": "release 3.1.4",
    "date": "2014-06-23T03:06:17Z",
    "url": "https://github.com/apache/rocketmq/commit/509ff0c2c4b4239b27e4e7fe93c304bfc4dc7aa7",
    "details": {
      "sha": "52db0874c268848cc70771319b6d32e05777aca6",
      "filename": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MQVersion.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/509ff0c2c4b4239b27e4e7fe93c304bfc4dc7aa7/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/509ff0c2c4b4239b27e4e7fe93c304bfc4dc7aa7/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fcommon%2FMQVersion.java?ref=509ff0c2c4b4239b27e4e7fe93c304bfc4dc7aa7",
      "patch": "@@ -22,7 +22,7 @@\n  */\n public class MQVersion {\n     // TODO \u6bcf\u6b21\u53d1\u5e03\u7248\u672c\u90fd\u8981\u4fee\u6539\u6b64\u5904\u7248\u672c\u53f7\n-    public static final int CurrentVersion = Version.V3_1_4_SNAPSHOT.ordinal();\n+    public static final int CurrentVersion = Version.V3_1_4.ordinal();\n \n \n     public static String getVersionDesc(int value) {",
      "parent_sha": "a455868d68ddc41169f90cd9f23bc2e77bf94904"
    }
  },
  {
    "oid": "a0560f7a97da8241d50943037d002793cb8db43d",
    "message": "\u542f\u52a8factory\u5bf9\u8c61\uff0c\u589e\u52a0\u65e5\u5fd7\u6253\u5370\u3002",
    "date": "2014-03-07T06:42:58Z",
    "url": "https://github.com/apache/rocketmq/commit/a0560f7a97da8241d50943037d002793cb8db43d",
    "details": {
      "sha": "8b3924f5869973eda779d955d311a7e11670f805",
      "filename": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/impl/factory/MQClientFactory.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/apache/rocketmq/blob/a0560f7a97da8241d50943037d002793cb8db43d/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientFactory.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/a0560f7a97da8241d50943037d002793cb8db43d/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientFactory.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/rocketmq-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Frocketmq%2Fclient%2Fimpl%2Ffactory%2FMQClientFactory.java?ref=a0560f7a97da8241d50943037d002793cb8db43d",
      "patch": "@@ -55,6 +55,7 @@\n import com.alibaba.rocketmq.client.impl.producer.TopicPublishInfo;\n import com.alibaba.rocketmq.client.log.ClientLogger;\n import com.alibaba.rocketmq.client.producer.DefaultMQProducer;\n+import com.alibaba.rocketmq.common.MQVersion;\n import com.alibaba.rocketmq.common.MixAll;\n import com.alibaba.rocketmq.common.ServiceState;\n import com.alibaba.rocketmq.common.constant.PermName;\n@@ -154,10 +155,11 @@ public MQClientFactory(ClientConfig clientConfig, int factoryIndex, String clien\n         this.defaultMQProducer = new DefaultMQProducer(MixAll.CLIENT_INNER_PRODUCER_GROUP);\n         this.defaultMQProducer.resetClientConfig(clientConfig);\n \n-        log.info(\"created a new client fatory, FactoryIndex: {} ClinetID: {} {}\",//\n+        log.info(\"created a new client fatory, FactoryIndex: {} ClinetID: {} {} {}\",//\n             this.factoryIndex, //\n             this.clientId, //\n-            this.clientConfig);\n+            this.clientConfig, //\n+            MQVersion.getVersionDesc(MQVersion.CurrentVersion));\n     }\n \n ",
      "parent_sha": "722db37d43399993e26e573a14aa758a335f7466"
    }
  },
  {
    "oid": "99b39a35f29e491862296d56b7938a995d153974",
    "message": "[ISSUE #7115] Fix grpc response message NPE (#7116)",
    "date": "2023-08-10T03:28:39Z",
    "url": "https://github.com/apache/rocketmq/commit/99b39a35f29e491862296d56b7938a995d153974",
    "details": {
      "sha": "efa879a9cbd06af1161949bd20af95a203feada6",
      "filename": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/ResponseBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/rocketmq/blob/99b39a35f29e491862296d56b7938a995d153974/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fcommon%2FResponseBuilder.java",
      "raw_url": "https://github.com/apache/rocketmq/raw/99b39a35f29e491862296d56b7938a995d153974/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fcommon%2FResponseBuilder.java",
      "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/proxy%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Frocketmq%2Fproxy%2Fgrpc%2Fv2%2Fcommon%2FResponseBuilder.java?ref=99b39a35f29e491862296d56b7938a995d153974",
      "patch": "@@ -92,7 +92,7 @@ public Status buildStatus(Throwable t) {\n     public Status buildStatus(Code code, String message) {\n         return Status.newBuilder()\n             .setCode(code)\n-            .setMessage(message)\n+            .setMessage(message != null ? message : code.name())\n             .build();\n     }\n ",
      "parent_sha": "b2deef179dbc6a9eb1a2b6dd7b652d95cb768295"
    }
  }
]