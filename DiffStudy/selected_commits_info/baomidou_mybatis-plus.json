[
  {
    "oid": "60b6413fcd0098a25232df56baf94bf68eda070d",
    "message": "code fix",
    "date": "2023-05-22T03:47:52Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/60b6413fcd0098a25232df56baf94bf68eda070d",
    "details": {
      "sha": "4e4240bb312fd9294bee4e270ef31c620da51d72",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/OptimisticLockerInnerInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/60b6413fcd0098a25232df56baf94bf68eda070d/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FOptimisticLockerInnerInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/60b6413fcd0098a25232df56baf94bf68eda070d/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FOptimisticLockerInnerInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FOptimisticLockerInnerInterceptor.java?ref=60b6413fcd0098a25232df56baf94bf68eda070d",
      "patch": "@@ -295,7 +295,7 @@ protected Object getUpdatedVersionVal(Class<?> clazz, Object originalVersionVal)\n         } else if (LocalDateTime.class.equals(clazz)) {\n             return LocalDateTime.now();\n         } else if (Instant.class.equals(clazz)) {\n-            return LocalDateTime.now();\n+            return Instant.now();\n         }\n         //not supported type, return original val.\n         return originalVersionVal;",
      "parent_sha": "b26ed4fe59e509cdceb2c8be224d9112e4ab7d4a"
    }
  },
  {
    "oid": "ae30d7fee3174c2f2b79066bfced2869f13c183b",
    "message": "fixed  an junit test method for H2 DB",
    "date": "2018-07-18T14:25:05Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/ae30d7fee3174c2f2b79066bfced2869f13c183b",
    "details": {
      "sha": "3e889388dc17b1c82cda07bdefa91cf0b0318c8d",
      "filename": "mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2UserTest.java",
      "status": "modified",
      "additions": 10,
      "deletions": 11,
      "changes": 21,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/ae30d7fee3174c2f2b79066bfced2869f13c183b/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2FH2UserTest.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/ae30d7fee3174c2f2b79066bfced2869f13c183b/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2FH2UserTest.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2FH2UserTest.java?ref=ae30d7fee3174c2f2b79066bfced2869f13c183b",
      "patch": "@@ -1,11 +1,9 @@\n package com.baomidou.mybatisplus.test.h2;\n \n-import java.io.IOException;\n-import java.sql.SQLException;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n+import com.baomidou.mybatisplus.test.h2.config.H2Db;\n+import com.baomidou.mybatisplus.test.h2.entity.persistent.H2User;\n+import com.baomidou.mybatisplus.test.h2.service.IH2UserService;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -14,10 +12,11 @@\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n-import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\n-import com.baomidou.mybatisplus.test.h2.config.H2Db;\n-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2User;\n-import com.baomidou.mybatisplus.test.h2.service.IH2UserService;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * <p>\n@@ -67,7 +66,7 @@ public void testInsertObjectWithoutParam() {\n     public void testEntityWrapperSelectSql() {\n         QueryWrapper<H2User> ew = new QueryWrapper<>();\n         ew.select(\"test_id as id, name, age\");\n-        List<H2User> list = userService.selectList(ew);\n+        List<H2User> list = userService.list(ew);\n         for (H2User u : list) {\n             Assert.assertNotNull(u.getTestId());\n             Assert.assertNotNull(u.getName());",
      "parent_sha": "190a16f1b2cefda650d7de5936661000a2dd6810"
    }
  },
  {
    "oid": "046c6c89bdd6f5c297e85eca8e0adbfb10db4c2a",
    "message": "\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\u53cd\u89e3id\u7684\u65f6\u95f4\u6233\u90e8\u5206\u65b9\u6cd5\u7684\u4ee3\u7801",
    "date": "2022-12-16T14:54:36Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/046c6c89bdd6f5c297e85eca8e0adbfb10db4c2a",
    "details": {
      "sha": "3407b7c7d06093b07ee2d489c6071bb1d225b2ea",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/Sequence.java",
      "status": "modified",
      "additions": 1,
      "deletions": 11,
      "changes": 12,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/046c6c89bdd6f5c297e85eca8e0adbfb10db4c2a/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FSequence.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/046c6c89bdd6f5c297e85eca8e0adbfb10db4c2a/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FSequence.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FSequence.java?ref=046c6c89bdd6f5c297e85eca8e0adbfb10db4c2a",
      "patch": "@@ -203,16 +203,6 @@ protected long timeGen() {\n      * \u53cd\u89e3id\u7684\u65f6\u95f4\u6233\u90e8\u5206\n      */\n     public static long parseIdTimestamp(long id) {\n-        String s = Long.toBinaryString(id);\n-        int x = 64 - s.length();\n-        StringBuilder b = new StringBuilder();\n-        for (int i = 0; i < x; i++) {\n-            b.append(\"0\");\n-        }\n-        s = b + s;\n-        s = s.substring(1, 42);\n-        long l = Long.parseUnsignedLong(s, 2);\n-        l += twepoch;\n-        return l;\n+        return (id>>22)+twepoch;\n     }\n }",
      "parent_sha": "da0d9f0ba48b401c61413b6bbdeda6a743314326"
    }
  },
  {
    "oid": "cd6708a9b0997f8653d14fa692b2f138b315cb52",
    "message": "\u5148\u53ef\u4ee5\u7528",
    "date": "2016-10-12T01:43:36Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/cd6708a9b0997f8653d14fa692b2f138b315cb52",
    "details": {
      "sha": "5d95ba5c7f480c5ef55507cd1dc39ecbad0e49aa",
      "filename": "mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/activerecord/ActiveRecordTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/cd6708a9b0997f8653d14fa692b2f138b315cb52/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Factiverecord%2FActiveRecordTest.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/cd6708a9b0997f8653d14fa692b2f138b315cb52/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Factiverecord%2FActiveRecordTest.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Factiverecord%2FActiveRecordTest.java?ref=cd6708a9b0997f8653d14fa692b2f138b315cb52",
      "patch": "@@ -35,7 +35,7 @@ public class ActiveRecordTest {\n \tpublic static void main(String[] args) {\n \t\tTableInfoHelper.initTableInfo(Test.class);\n \t\tDB db = DB.open(\"jdbc:mysql://localhost/mybatis-plus\", \"root\", \"123456\");\n-\t\tList<Record> test = db.active(\"test1\").select().all();\n+\t\tList<Record> test = db.active(\"test\").select().all();\n \t\tSystem.out.println(test);\n \n \t\t/* \u672a\u627e\u5230\u5f02\u5e38 */",
      "parent_sha": "e45cf6d75d7986327a0e2f6be74a4670b4f51a57"
    }
  },
  {
    "oid": "8ec17d8f95569683c7ec221874257c358aa0eb87",
    "message": "ext: \u62bd\u8c61\u539f\u751f\u679a\u4e3e\u5904\u7406\u7c7b\u6ce8\u518c\uff0c\u65b9\u4fbf\u6269\u5c55",
    "date": "2018-09-11T06:17:05Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/8ec17d8f95569683c7ec221874257c358aa0eb87",
    "details": {
      "sha": "7c6f3376a4f6073048bf779b51943e466ba6bb73",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/spring/MybatisSqlSessionFactoryBean.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/8ec17d8f95569683c7ec221874257c358aa0eb87/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspring%2FMybatisSqlSessionFactoryBean.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/8ec17d8f95569683c7ec221874257c358aa0eb87/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspring%2FMybatisSqlSessionFactoryBean.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspring%2FMybatisSqlSessionFactoryBean.java?ref=8ec17d8f95569683c7ec221874257c358aa0eb87",
      "patch": "@@ -519,7 +519,7 @@ protected SqlSessionFactory buildSqlSessionFactory() throws Exception {\n                             typeHandlerRegistry.register(cls, EnumAnnotationTypeHandler.class);\n                         } else {\n                             // \u539f\u751f\u65b9\u5f0f\n-                            typeHandlerRegistry.register(cls, EnumOrdinalTypeHandler.class);\n+                            registerOriginalEnumTypeHandler(typeHandlerRegistry, cls);\n                         }\n                     }\n                 }\n@@ -668,6 +668,16 @@ protected Class<?> dealEnumType(Class<?> clazz) {\n         return null;\n     }\n \n+    /**\n+     * \u5bf9\u539f\u751f\u679a\u4e3e\u7684\u5904\u7406\u7c7b\uff0c\u9ed8\u8ba4{@link EnumOrdinalTypeHandler}\n+     *\n+     * @param typeHandlerRegistry\n+     * @param enumClazz\n+     */\n+    protected void registerOriginalEnumTypeHandler(TypeHandlerRegistry typeHandlerRegistry, Class<?> enumClazz) {\n+        typeHandlerRegistry.register(enumClazz, EnumOrdinalTypeHandler.class);\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */",
      "parent_sha": "94dbeb5d388f68b15f6a8c623b1a008ef34f8d3c"
    }
  },
  {
    "oid": "59f8607458cc2fc73f6b9c580034311bc6a88585",
    "message": "\u589e\u52a0\u65b9\u6cd5StrategyConfig.setSuperServiceImplClass(java.lang.Class<?>).",
    "date": "2020-05-28T09:10:05Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/59f8607458cc2fc73f6b9c580034311bc6a88585",
    "details": {
      "sha": "36cd7f0a2e4624b879eda16aaba9fd5c202eaa82",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/StrategyConfig.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/59f8607458cc2fc73f6b9c580034311bc6a88585/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FStrategyConfig.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/59f8607458cc2fc73f6b9c580034311bc6a88585/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FStrategyConfig.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FStrategyConfig.java?ref=59f8607458cc2fc73f6b9c580034311bc6a88585",
      "patch": "@@ -297,7 +297,17 @@ public StrategyConfig setSuperServiceClass(String superServiceClass) {\n         this.superServiceClass = superServiceClass;\n         return this;\n     }\n-\n+    \n+    public StrategyConfig setSuperServiceImplClass(Class<?> clazz) {\n+        this.superServiceImplClass = clazz.getName();\n+        return this;\n+    }\n+    \n+    public StrategyConfig setSuperServiceImplClass(String superServiceImplClass) {\n+        this.superServiceImplClass = superServiceImplClass;\n+        return this;\n+    }\n+    \n     public StrategyConfig setSuperControllerClass(Class<?> clazz) {\n         this.superControllerClass = clazz.getName();\n         return this;",
      "parent_sha": "0939b00abe5d9f42333376c238c2b5d9593e7842"
    }
  },
  {
    "oid": "d7b394bf219e453b7fa85baad4b26e137655b49c",
    "message": "\u53bb\u6389\u4e00\u4e2a\u7a7a\u683c",
    "date": "2016-12-12T06:31:19Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/d7b394bf219e453b7fa85baad4b26e137655b49c",
    "details": {
      "sha": "36bb78a6efa6572d2956e91500543d4d61034a1f",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/entity/GlobalConfiguration.java",
      "status": "modified",
      "additions": 309,
      "deletions": 309,
      "changes": 618,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/d7b394bf219e453b7fa85baad4b26e137655b49c/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fentity%2FGlobalConfiguration.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/d7b394bf219e453b7fa85baad4b26e137655b49c/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fentity%2FGlobalConfiguration.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fentity%2FGlobalConfiguration.java?ref=d7b394bf219e453b7fa85baad4b26e137655b49c",
      "patch": "@@ -1,309 +1,309 @@\n-/**\n- * Copyright (c) 2011-2014, hubin (jobob@qq.com).\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.baomidou.mybatisplus.entity;\n-\n-import com.baomidou.mybatisplus.enums.DBType;\n-import com.baomidou.mybatisplus.enums.FieldStrategy;\n-import com.baomidou.mybatisplus.enums.IdType;\n-import com.baomidou.mybatisplus.exceptions.MybatisPlusException;\n-import com.baomidou.mybatisplus.mapper.AutoSqlInjector;\n-import com.baomidou.mybatisplus.mapper.IMetaObjectHandler;\n-import com.baomidou.mybatisplus.mapper.ISqlInjector;\n-import com.baomidou.mybatisplus.toolkit.JdbcUtils;\n-import com.baomidou.mybatisplus.toolkit.TableInfoHelper;\n-import org.apache.ibatis.logging.Log;\n-import org.apache.ibatis.logging.LogFactory;\n-import org.apache.ibatis.session.Configuration;\n-import org.apache.ibatis.session.SqlSessionFactory;\n-\n-import java.io.Serializable;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentSkipListSet;\n-\n-/**\n- * <p>\n- * Mybatis\u5168\u5c40\u7f13\u5b58\n- * </p>\n- *\n- * @author Caratacus\n- * @Date 2016-12-06\n- */\n-@SuppressWarnings(\"serial\")\n-public class GlobalConfiguration implements Cloneable, Serializable {\n-\n-\t// \u65e5\u5fd7\n-\tprivate static final Log logger = LogFactory.getLog(GlobalConfiguration.class);\n-\t/**\n-\t * \u7f13\u5b58\u5168\u5c40\u4fe1\u606f\n-\t */\n-\tprivate static final Map<String, GlobalConfiguration> GLOBAL_CONFIG = new ConcurrentHashMap<String, GlobalConfiguration>();\n-\t/**\n-\t * \u9ed8\u8ba4\u53c2\u6570\n-\t */\n-\tpublic static final GlobalConfiguration DEFAULT = new GlobalConfiguration(new AutoSqlInjector());\n-\n-\t// \u6570\u636e\u5e93\u7c7b\u578b\uff08\u9ed8\u8ba4 MySql\uff09\n-\tprivate DBType dbType = DBType.MYSQL;\n-\t// \u4e3b\u952e\u7c7b\u578b\uff08\u9ed8\u8ba4 ID_WORKER\uff09\n-\tprivate IdType idType = IdType.ID_WORKER;\n-\t// \u8868\u5b57\u6bb5\u4f7f\u7528\u4e0b\u5212\u7ebf\u547d\u540d\uff08\u9ed8\u8ba4 false\uff09\n-\tprivate boolean dbColumnUnderline = false;\n-\t// SQL\u6ce8\u5165\u5668\n-\tprivate ISqlInjector sqlInjector;\n-\t// \u5143\u5bf9\u8c61\u5b57\u6bb5\u586b\u5145\u63a7\u5236\u5668\n-\tprivate IMetaObjectHandler metaObjectHandler = null;\n-\t// \u5b57\u6bb5\u9a8c\u8bc1\u7b56\u7565\n-\tprivate FieldStrategy fieldStrategy = FieldStrategy.NOT_NULL;\n-\t// \u662f\u5426\u5237\u65b0mapper\n-\tprivate boolean isRefresh = false;\n-\t// \u662f\u5426\u81ea\u52a8\u83b7\u53d6DBType\n-\tprivate boolean isAutoSetDbType = true;\n-\t// \u662f\u5426\u5927\u5199\u547d\u540d\n-\tprivate boolean isCapitalMode = false;\n-\t// \u7f13\u5b58\u5f53\u524dConfiguration\u7684SqlSessionFactory\n-\tprivate SqlSessionFactory sqlSessionFactory;\n-\n-\tprivate Set<String> mapperRegistryCache = new ConcurrentSkipListSet<String>();\n-\n-\tpublic GlobalConfiguration() {\n-\t\t// TODO\n-\t}\n-\n-\tpublic GlobalConfiguration(ISqlInjector sqlInjector) {\n-\t\tthis.sqlInjector = sqlInjector;\n-\t}\n-\n-\tpublic DBType getDbType() {\n-\t\treturn dbType;\n-\t}\n-\n-\tpublic void setDbType(String dbType) {\n-\t\tthis.dbType = DBType.getDBType(dbType);\n-\t\tthis.isAutoSetDbType = false;\n-\t}\n-\n-\tpublic void setDbTypeByJdbcUrl(String jdbcUrl) {\n-\t\tthis.dbType = JdbcUtils.getDbType(jdbcUrl);\n-\t}\n-\n-\tpublic IdType getIdType() {\n-\t\treturn idType;\n-\t}\n-\n-\tpublic void setIdType(int idType) {\n-\t\tthis.idType = IdType.getIdType(idType);\n-\t}\n-\n-\tpublic boolean isDbColumnUnderline() {\n-\t\treturn dbColumnUnderline;\n-\t}\n-\n-\tpublic void setDbColumnUnderline(boolean dbColumnUnderline) {\n-\t\tthis.dbColumnUnderline = dbColumnUnderline;\n-\t}\n-\n-\tpublic ISqlInjector getSqlInjector() {\n-\t\treturn sqlInjector;\n-\t}\n-\n-\tpublic void setSqlInjector(ISqlInjector sqlInjector) {\n-\t\tthis.sqlInjector = sqlInjector;\n-\t}\n-\n-\tpublic IMetaObjectHandler getMetaObjectHandler() {\n-\t\treturn metaObjectHandler;\n-\t}\n-\n-\tpublic void setMetaObjectHandler(IMetaObjectHandler metaObjectHandler) {\n-\t\tthis.metaObjectHandler = metaObjectHandler;\n-\t}\n-\n-\tpublic FieldStrategy getFieldStrategy() {\n-\t\treturn fieldStrategy;\n-\t}\n-\n-\tpublic void setFieldStrategy(int fieldStrategy) {\n-\t\tthis.fieldStrategy = FieldStrategy.getFieldStrategy(fieldStrategy);\n-\t}\n-\n-\tpublic boolean isRefresh() {\n-\t\treturn isRefresh;\n-\t}\n-\n-\tpublic void setRefresh(boolean refresh) {\n-\t\tthis.isRefresh = refresh;\n-\t}\n-\n-\tpublic boolean isAutoSetDbType() {\n-\t\treturn isAutoSetDbType;\n-\t}\n-\n-\tpublic void setAutoSetDbType(boolean autoSetDbType) {\n-\t\tthis.isAutoSetDbType = autoSetDbType;\n-\t}\n-\n-\tpublic Set<String> getMapperRegistryCache() {\n-\t\treturn mapperRegistryCache;\n-\t}\n-\n-\tpublic void setMapperRegistryCache(Set<String> mapperRegistryCache) {\n-\t\tthis.mapperRegistryCache = mapperRegistryCache;\n-\t}\n-\n-\tpublic SqlSessionFactory getSqlSessionFactory() {\n-\t\treturn sqlSessionFactory;\n-\t}\n-\n-\tpublic void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {\n-\t\tthis.sqlSessionFactory = sqlSessionFactory;\n-\t}\n-\n-\t@Override\n-\tprotected GlobalConfiguration clone() throws CloneNotSupportedException {\n-\t\treturn (GlobalConfiguration) super.clone();\n-\t}\n-\n-\t/**\n-\t * \u83b7\u53d6\u5f53\u524d\u7684SqlSessionFactory\n-\t * \n-\t * @param clazz\n-\t * @return\n-\t */\n-\tpublic static SqlSessionFactory currentSessionFactory(Class<?> clazz) {\n-\t\tString configMark = TableInfoHelper.getTableInfo(clazz).getConfigMark();\n-\t\tGlobalConfiguration mybatisGlobalConfig = GlobalConfiguration.GlobalConfig(configMark);\n-\t\treturn mybatisGlobalConfig.getSqlSessionFactory();\n-\t}\n-\n-\t/**\n-\t * \u83b7\u53d6\u9ed8\u8ba4MybatisGlobalConfig\n-\t * \n-\t * @return\n-\t */\n-\tpublic static GlobalConfiguration defaults() {\n-\t\ttry {\n-\t\t\treturn DEFAULT.clone();\n-\t\t} catch (CloneNotSupportedException e) {\n-\t\t\tthrow new MybatisPlusException(\"ERROR: CLONE MybatisGlobalConfig DEFAULT FAIL !  Cause:\" + e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * <p>\n-\t * \u8bbe\u7f6e\u5168\u5c40\u8bbe\u7f6e(\u4ee5configuration\u5730\u5740\u503c\u4f5c\u4e3aKey)\n-\t * <p/>\n-\t *\n-\t * @param configuration\n-\t * @param mybatisGlobalConfig\n-\t * @return\n-\t */\n-\tpublic static void setGlobalConfig(Configuration configuration, GlobalConfiguration mybatisGlobalConfig) {\n-\t\tif (configuration == null || mybatisGlobalConfig == null) {\n-\t\t\tnew MybatisPlusException(\"Error:  Could not setGlobalConfig\");\n-\t\t}\n-\t\t// \u8bbe\u7f6e\u5168\u5c40\u8bbe\u7f6e\n-\t\tGLOBAL_CONFIG.put(configuration.toString(), mybatisGlobalConfig);\n-\t}\n-\n-\t/**\n-\t * <p>\n-\t * \u8bbe\u7f6e\u5168\u5c40\u8bbe\u7f6e (\u7edf\u4e00\u6240\u6709\u5165\u53e3)\n-\t * <p/>\n-\t *\n-\t * @param configuration\n-\t * @return\n-\t */\n-\tpublic void setGlobalConfig(Configuration configuration) {\n-\t\tsetGlobalConfig(configuration, this);\n-\t}\n-\n-\t/**\n-\t * \u83b7\u53d6MybatisGlobalConfig (\u7edf\u4e00\u6240\u6709\u5165\u53e3)\n-\t * \n-\t * @param configuration\n-\t * @return\n-\t */\n-\tpublic static GlobalConfiguration GlobalConfig(Configuration configuration) {\n-\t\tif (configuration == null) {\n-\t\t\tthrow new MybatisPlusException(\"Error: You need Initialize MybatisConfiguration !\");\n-\t\t}\n-\t\treturn GlobalConfig(configuration.toString());\n-\t}\n-\n-\t/**\n-\t * \u83b7\u53d6MybatisGlobalConfig (\u7edf\u4e00\u6240\u6709\u5165\u53e3)\n-\t * \n-\t * @param configMark\n-\t * @return\n-\t */\n-\tpublic static GlobalConfiguration GlobalConfig(String configMark) {\n-\t\tGlobalConfiguration cache = GLOBAL_CONFIG.get(configMark);\n-\t\tif (cache == null) {\n-\t\t\t// \u6ca1\u6709\u83b7\u53d6\u5168\u5c40\u914d\u7f6e\u521d\u59cb\u5168\u5c40\u914d\u7f6e\n-\t\t\tlogger.warn(\"Warn: Not getting global configuration ! global configuration Initializing !\");\n-\t\t\tGLOBAL_CONFIG.put(configMark, DEFAULT);\n-\t\t\treturn DEFAULT;\n-\t\t}\n-\t\treturn cache;\n-\t}\n-\n-\tpublic static DBType getDbType(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).getDbType();\n-\t}\n-\n-\tpublic static IdType getIdType(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).getIdType();\n-\t}\n-\n-\tpublic static boolean isDbColumnUnderline(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).isDbColumnUnderline();\n-\t}\n-\n-\tpublic static ISqlInjector getSqlInjector(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).getSqlInjector();\n-\t}\n-\n-\tpublic static IMetaObjectHandler getMetaObjectHandler(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).getMetaObjectHandler();\n-\t}\n-\n-\tpublic static FieldStrategy getFieldStrategy(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).getFieldStrategy();\n-\t}\n-\n-\tpublic static boolean isRefresh(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).isRefresh();\n-\t}\n-\n-\tpublic static boolean isAutoSetDbType(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).isAutoSetDbType();\n-\t}\n-\n-\tpublic static Set<String> getMapperRegistryCache(Configuration configuration) {\n-\t\treturn GlobalConfig(configuration).getMapperRegistryCache();\n-\t}\n-\n-\tpublic boolean isCapitalMode() {\n-\t\treturn isCapitalMode;\n-\t}\n-\n-\tpublic void setCapitalMode(boolean isCapitalMode) {\n-\t\tthis.isCapitalMode = isCapitalMode;\n-\t}\n-\n-}\n+/**\r\n+ * Copyright (c) 2011-2014, hubin (jobob@qq.com).\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\n+ * use this file except in compliance with the License. You may obtain a copy of\r\n+ * the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\n+ * License for the specific language governing permissions and limitations under\r\n+ * the License.\r\n+ */\r\n+package com.baomidou.mybatisplus.entity;\r\n+\r\n+import com.baomidou.mybatisplus.enums.DBType;\r\n+import com.baomidou.mybatisplus.enums.FieldStrategy;\r\n+import com.baomidou.mybatisplus.enums.IdType;\r\n+import com.baomidou.mybatisplus.exceptions.MybatisPlusException;\r\n+import com.baomidou.mybatisplus.mapper.AutoSqlInjector;\r\n+import com.baomidou.mybatisplus.mapper.IMetaObjectHandler;\r\n+import com.baomidou.mybatisplus.mapper.ISqlInjector;\r\n+import com.baomidou.mybatisplus.toolkit.JdbcUtils;\r\n+import com.baomidou.mybatisplus.toolkit.TableInfoHelper;\r\n+import org.apache.ibatis.logging.Log;\r\n+import org.apache.ibatis.logging.LogFactory;\r\n+import org.apache.ibatis.session.Configuration;\r\n+import org.apache.ibatis.session.SqlSessionFactory;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ConcurrentSkipListSet;\r\n+\r\n+/**\r\n+ * <p>\r\n+ * Mybatis\u5168\u5c40\u7f13\u5b58\r\n+ * </p>\r\n+ *\r\n+ * @author Caratacus\r\n+ * @Date 2016-12-06\r\n+ */\r\n+@SuppressWarnings(\"serial\")\r\n+public class GlobalConfiguration implements Cloneable, Serializable {\r\n+\r\n+\t// \u65e5\u5fd7\r\n+\tprivate static final Log logger = LogFactory.getLog(GlobalConfiguration.class);\r\n+\t/**\r\n+\t * \u7f13\u5b58\u5168\u5c40\u4fe1\u606f\r\n+\t */\r\n+\tprivate static final Map<String, GlobalConfiguration> GLOBAL_CONFIG = new ConcurrentHashMap<String, GlobalConfiguration>();\r\n+\t/**\r\n+\t * \u9ed8\u8ba4\u53c2\u6570\r\n+\t */\r\n+\tpublic static final GlobalConfiguration DEFAULT = new GlobalConfiguration(new AutoSqlInjector());\r\n+\r\n+\t// \u6570\u636e\u5e93\u7c7b\u578b\uff08\u9ed8\u8ba4 MySql\uff09\r\n+\tprivate DBType dbType = DBType.MYSQL;\r\n+\t// \u4e3b\u952e\u7c7b\u578b\uff08\u9ed8\u8ba4 ID_WORKER\uff09\r\n+\tprivate IdType idType = IdType.ID_WORKER;\r\n+\t// \u8868\u5b57\u6bb5\u4f7f\u7528\u4e0b\u5212\u7ebf\u547d\u540d\uff08\u9ed8\u8ba4 false\uff09\r\n+\tprivate boolean dbColumnUnderline = false;\r\n+\t// SQL\u6ce8\u5165\u5668\r\n+\tprivate ISqlInjector sqlInjector;\r\n+\t// \u5143\u5bf9\u8c61\u5b57\u6bb5\u586b\u5145\u63a7\u5236\u5668\r\n+\tprivate IMetaObjectHandler metaObjectHandler = null;\r\n+\t// \u5b57\u6bb5\u9a8c\u8bc1\u7b56\u7565\r\n+\tprivate FieldStrategy fieldStrategy = FieldStrategy.NOT_NULL;\r\n+\t// \u662f\u5426\u5237\u65b0mapper\r\n+\tprivate boolean isRefresh = false;\r\n+\t// \u662f\u5426\u81ea\u52a8\u83b7\u53d6DBType\r\n+\tprivate boolean isAutoSetDbType = true;\r\n+\t// \u662f\u5426\u5927\u5199\u547d\u540d\r\n+\tprivate boolean isCapitalMode = false;\r\n+\t// \u7f13\u5b58\u5f53\u524dConfiguration\u7684SqlSessionFactory\r\n+\tprivate SqlSessionFactory sqlSessionFactory;\r\n+\r\n+\tprivate Set<String> mapperRegistryCache = new ConcurrentSkipListSet<String>();\r\n+\r\n+\tpublic GlobalConfiguration() {\r\n+\t\t// TODO\r\n+\t}\r\n+\r\n+\tpublic GlobalConfiguration(ISqlInjector sqlInjector) {\r\n+\t\tthis.sqlInjector = sqlInjector;\r\n+\t}\r\n+\r\n+\tpublic DBType getDbType() {\r\n+\t\treturn dbType;\r\n+\t}\r\n+\r\n+\tpublic void setDbType(String dbType) {\r\n+\t\tthis.dbType = DBType.getDBType(dbType);\r\n+\t\tthis.isAutoSetDbType = false;\r\n+\t}\r\n+\r\n+\tpublic void setDbTypeByJdbcUrl(String jdbcUrl) {\r\n+\t\tthis.dbType = JdbcUtils.getDbType(jdbcUrl);\r\n+\t}\r\n+\r\n+\tpublic IdType getIdType() {\r\n+\t\treturn idType;\r\n+\t}\r\n+\r\n+\tpublic void setIdType(int idType) {\r\n+\t\tthis.idType = IdType.getIdType(idType);\r\n+\t}\r\n+\r\n+\tpublic boolean isDbColumnUnderline() {\r\n+\t\treturn dbColumnUnderline;\r\n+\t}\r\n+\r\n+\tpublic void setDbColumnUnderline(boolean dbColumnUnderline) {\r\n+\t\tthis.dbColumnUnderline = dbColumnUnderline;\r\n+\t}\r\n+\r\n+\tpublic ISqlInjector getSqlInjector() {\r\n+\t\treturn sqlInjector;\r\n+\t}\r\n+\r\n+\tpublic void setSqlInjector(ISqlInjector sqlInjector) {\r\n+\t\tthis.sqlInjector = sqlInjector;\r\n+\t}\r\n+\r\n+\tpublic IMetaObjectHandler getMetaObjectHandler() {\r\n+\t\treturn metaObjectHandler;\r\n+\t}\r\n+\r\n+\tpublic void setMetaObjectHandler(IMetaObjectHandler metaObjectHandler) {\r\n+\t\tthis.metaObjectHandler = metaObjectHandler;\r\n+\t}\r\n+\r\n+\tpublic FieldStrategy getFieldStrategy() {\r\n+\t\treturn fieldStrategy;\r\n+\t}\r\n+\r\n+\tpublic void setFieldStrategy(int fieldStrategy) {\r\n+\t\tthis.fieldStrategy = FieldStrategy.getFieldStrategy(fieldStrategy);\r\n+\t}\r\n+\r\n+\tpublic boolean isRefresh() {\r\n+\t\treturn isRefresh;\r\n+\t}\r\n+\r\n+\tpublic void setRefresh(boolean refresh) {\r\n+\t\tthis.isRefresh = refresh;\r\n+\t}\r\n+\r\n+\tpublic boolean isAutoSetDbType() {\r\n+\t\treturn isAutoSetDbType;\r\n+\t}\r\n+\r\n+\tpublic void setAutoSetDbType(boolean autoSetDbType) {\r\n+\t\tthis.isAutoSetDbType = autoSetDbType;\r\n+\t}\r\n+\r\n+\tpublic Set<String> getMapperRegistryCache() {\r\n+\t\treturn mapperRegistryCache;\r\n+\t}\r\n+\r\n+\tpublic void setMapperRegistryCache(Set<String> mapperRegistryCache) {\r\n+\t\tthis.mapperRegistryCache = mapperRegistryCache;\r\n+\t}\r\n+\r\n+\tpublic SqlSessionFactory getSqlSessionFactory() {\r\n+\t\treturn sqlSessionFactory;\r\n+\t}\r\n+\r\n+\tpublic void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {\r\n+\t\tthis.sqlSessionFactory = sqlSessionFactory;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected GlobalConfiguration clone() throws CloneNotSupportedException {\r\n+\t\treturn (GlobalConfiguration) super.clone();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \u83b7\u53d6\u5f53\u524d\u7684SqlSessionFactory\r\n+\t * \r\n+\t * @param clazz\r\n+\t * @return\r\n+\t */\r\n+\tpublic static SqlSessionFactory currentSessionFactory(Class<?> clazz) {\r\n+\t\tString configMark = TableInfoHelper.getTableInfo(clazz).getConfigMark();\r\n+\t\tGlobalConfiguration mybatisGlobalConfig = GlobalConfiguration.GlobalConfig(configMark);\r\n+\t\treturn mybatisGlobalConfig.getSqlSessionFactory();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \u83b7\u53d6\u9ed8\u8ba4MybatisGlobalConfig\r\n+\t * \r\n+\t * @return\r\n+\t */\r\n+\tpublic static GlobalConfiguration defaults() {\r\n+\t\ttry {\r\n+\t\t\treturn DEFAULT.clone();\r\n+\t\t} catch (CloneNotSupportedException e) {\r\n+\t\t\tthrow new MybatisPlusException(\"ERROR: CLONE MybatisGlobalConfig DEFAULT FAIL !  Cause:\" + e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * <p>\r\n+\t * \u8bbe\u7f6e\u5168\u5c40\u8bbe\u7f6e(\u4ee5configuration\u5730\u5740\u503c\u4f5c\u4e3aKey)\r\n+\t * <p/>\r\n+\t *\r\n+\t * @param configuration\r\n+\t * @param mybatisGlobalConfig\r\n+\t * @return\r\n+\t */\r\n+\tpublic static void setGlobalConfig(Configuration configuration, GlobalConfiguration mybatisGlobalConfig) {\r\n+\t\tif (configuration == null || mybatisGlobalConfig == null) {\r\n+\t\t\tnew MybatisPlusException(\"Error: Could not setGlobalConfig\");\r\n+\t\t}\r\n+\t\t// \u8bbe\u7f6e\u5168\u5c40\u8bbe\u7f6e\r\n+\t\tGLOBAL_CONFIG.put(configuration.toString(), mybatisGlobalConfig);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * <p>\r\n+\t * \u8bbe\u7f6e\u5168\u5c40\u8bbe\u7f6e (\u7edf\u4e00\u6240\u6709\u5165\u53e3)\r\n+\t * <p/>\r\n+\t *\r\n+\t * @param configuration\r\n+\t * @return\r\n+\t */\r\n+\tpublic void setGlobalConfig(Configuration configuration) {\r\n+\t\tsetGlobalConfig(configuration, this);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \u83b7\u53d6MybatisGlobalConfig (\u7edf\u4e00\u6240\u6709\u5165\u53e3)\r\n+\t * \r\n+\t * @param configuration\r\n+\t * @return\r\n+\t */\r\n+\tpublic static GlobalConfiguration GlobalConfig(Configuration configuration) {\r\n+\t\tif (configuration == null) {\r\n+\t\t\tthrow new MybatisPlusException(\"Error: You need Initialize MybatisConfiguration !\");\r\n+\t\t}\r\n+\t\treturn GlobalConfig(configuration.toString());\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \u83b7\u53d6MybatisGlobalConfig (\u7edf\u4e00\u6240\u6709\u5165\u53e3)\r\n+\t * \r\n+\t * @param configMark\r\n+\t * @return\r\n+\t */\r\n+\tpublic static GlobalConfiguration GlobalConfig(String configMark) {\r\n+\t\tGlobalConfiguration cache = GLOBAL_CONFIG.get(configMark);\r\n+\t\tif (cache == null) {\r\n+\t\t\t// \u6ca1\u6709\u83b7\u53d6\u5168\u5c40\u914d\u7f6e\u521d\u59cb\u5168\u5c40\u914d\u7f6e\r\n+\t\t\tlogger.warn(\"Warn: Not getting global configuration ! global configuration Initializing !\");\r\n+\t\t\tGLOBAL_CONFIG.put(configMark, DEFAULT);\r\n+\t\t\treturn DEFAULT;\r\n+\t\t}\r\n+\t\treturn cache;\r\n+\t}\r\n+\r\n+\tpublic static DBType getDbType(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).getDbType();\r\n+\t}\r\n+\r\n+\tpublic static IdType getIdType(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).getIdType();\r\n+\t}\r\n+\r\n+\tpublic static boolean isDbColumnUnderline(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).isDbColumnUnderline();\r\n+\t}\r\n+\r\n+\tpublic static ISqlInjector getSqlInjector(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).getSqlInjector();\r\n+\t}\r\n+\r\n+\tpublic static IMetaObjectHandler getMetaObjectHandler(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).getMetaObjectHandler();\r\n+\t}\r\n+\r\n+\tpublic static FieldStrategy getFieldStrategy(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).getFieldStrategy();\r\n+\t}\r\n+\r\n+\tpublic static boolean isRefresh(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).isRefresh();\r\n+\t}\r\n+\r\n+\tpublic static boolean isAutoSetDbType(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).isAutoSetDbType();\r\n+\t}\r\n+\r\n+\tpublic static Set<String> getMapperRegistryCache(Configuration configuration) {\r\n+\t\treturn GlobalConfig(configuration).getMapperRegistryCache();\r\n+\t}\r\n+\r\n+\tpublic boolean isCapitalMode() {\r\n+\t\treturn isCapitalMode;\r\n+\t}\r\n+\r\n+\tpublic void setCapitalMode(boolean isCapitalMode) {\r\n+\t\tthis.isCapitalMode = isCapitalMode;\r\n+\t}\r\n+\r\n+}\r",
      "parent_sha": "bbb664e20e16c3d6b4c7a303fdaa93c0f18b5132"
    }
  },
  {
    "oid": "779abadbcb9a5d3149a3d843dc8ade527977017f",
    "message": "SQL\u5206\u9875\u4ee3\u7801\u9519\u8bef",
    "date": "2018-07-25T06:32:33Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/779abadbcb9a5d3149a3d843dc8ade527977017f",
    "details": {
      "sha": "2d370ef34ca353ae20d99252277201db472396bd",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/SQLServer2005Dialect.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/779abadbcb9a5d3149a3d843dc8ade527977017f/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Fpagination%2Fdialects%2FSQLServer2005Dialect.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/779abadbcb9a5d3149a3d843dc8ade527977017f/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Fpagination%2Fdialects%2FSQLServer2005Dialect.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Fpagination%2Fdialects%2FSQLServer2005Dialect.java?ref=779abadbcb9a5d3149a3d843dc8ade527977017f",
      "patch": "@@ -62,9 +62,9 @@ public String buildPaginationSql(String originalSql, long offset, long limit) {\n         }\n \n         StringBuilder sql = new StringBuilder();\n-        sql.append(\"WITH select AS (SELECT \").append(distinctStr).append(\"TOP 100 PERCENT \")\n+        sql.append(\"WITH selectTemp AS (SELECT \").append(distinctStr).append(\"TOP 100 PERCENT \")\n             .append(\" ROW_NUMBER() OVER (\").append(orderby).append(\") as __row_number__, \").append(pagingBuilder)\n-            .append(\") SELECT * FROM select WHERE __row_number__ BETWEEN \")\n+            .append(\") SELECT * FROM selectTemp WHERE __row_number__ BETWEEN \")\n             //FIX#299\uff1a\u539f\u56e0\uff1amysql\u4e2dlimit 10(offset,size) \u662f\u4ece\u7b2c10\u5f00\u59cb\uff08\u4e0d\u5305\u542b10\uff09,\uff1b\u800c\u8fd9\u91cc\u7528\u7684BETWEEN\u662f\u4e24\u8fb9\u90fd\u5305\u542b\uff0c\u6240\u4ee5\u6539\u4e3aoffset+1\n             .append(offset + 1)\n             .append(\" AND \")",
      "parent_sha": "3634cc2468d25126ee2a098c74662138fdab5442"
    }
  },
  {
    "oid": "5aa774602372c8167d5bb99cde4acdc1425d5881",
    "message": "\u4fee\u6539\u6ce8\u91ca",
    "date": "2018-09-27T02:11:46Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/5aa774602372c8167d5bb99cde4acdc1425d5881",
    "details": {
      "sha": "073153c1247790c18ca5612e2c5a71fbf3587e5e",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/GlobalConfig.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/5aa774602372c8167d5bb99cde4acdc1425d5881/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FGlobalConfig.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/5aa774602372c8167d5bb99cde4acdc1425d5881/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FGlobalConfig.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FGlobalConfig.java?ref=5aa774602372c8167d5bb99cde4acdc1425d5881",
      "patch": "@@ -88,7 +88,8 @@ public class GlobalConfig {\n      */\n     private boolean baseColumnList = false;\n     /**\n-     * \u5404\u5c42\u6587\u4ef6\u540d\u79f0\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a %Action \u751f\u6210 UserAction\n+     * \u5404\u5c42\u6587\u4ef6\u540d\u79f0\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a %sAction \u751f\u6210 UserAction\n+     * %s \u4e3a\u5360\u4f4d\u7b26\n      */\n     private String entityName;\n     private String mapperName;",
      "parent_sha": "a83fc5e8d318409b00dac95667bae2367fcf44e5"
    }
  },
  {
    "oid": "198be7e538aec7b2d1391c8911e69f0da831853e",
    "message": "\u4fee\u590dselectObjs\u6cdb\u578b\u9519\u8bef\u95ee\u9898",
    "date": "2018-11-19T10:07:29Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/198be7e538aec7b2d1391c8911e69f0da831853e",
    "details": {
      "sha": "b472177697b5abdcde00febd6f2c1a066f3fb42d",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/198be7e538aec7b2d1391c8911e69f0da831853e/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/198be7e538aec7b2d1391c8911e69f0da831853e/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java?ref=198be7e538aec7b2d1391c8911e69f0da831853e",
      "patch": "@@ -20,6 +20,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n import org.apache.ibatis.binding.MapperMethod;\n@@ -302,8 +303,8 @@ public List<Map<String, Object>> listMaps(Wrapper<T> queryWrapper) {\n     }\n \n     @Override\n-    public List<Object> listObjs(Wrapper<T> queryWrapper) {\n-        return baseMapper.selectObjs(queryWrapper).stream().filter(Objects::nonNull).collect(Collectors.toList());\n+    public <V> List<V> listObjs(Wrapper<T> queryWrapper, Function<? super Object, V> mapper) {\n+        return baseMapper.selectObjs(queryWrapper).stream().filter(Objects::nonNull).map(mapper).collect(Collectors.toList());\n     }\n \n     @Override",
      "parent_sha": "e0dde28c53440696c4e10659251a3370e6bdefe3"
    }
  },
  {
    "oid": "9da5765957ed56882b5653aadcc7fdc73e14c410",
    "message": "\u4fee\u6539if\u6807\u7b7e\u5c5e\u6027\u751f\u6210.\n\nhttps://github.com/baomidou/mybatis-plus/issues/1705",
    "date": "2019-10-17T07:27:17Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/9da5765957ed56882b5653aadcc7fdc73e14c410",
    "details": {
      "sha": "0058337e8080d6f640bbfb29bfe435cf2743ca2b",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableFieldInfo.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/9da5765957ed56882b5653aadcc7fdc73e14c410/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/9da5765957ed56882b5653aadcc7fdc73e14c410/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java?ref=9da5765957ed56882b5653aadcc7fdc73e14c410",
      "patch": "@@ -410,7 +410,11 @@ public String getSqlSet(final boolean ignoreIf, final String prefix) {\n             // \u4e0d\u8fdb\u884c if \u5305\u88f9\n             return sqlSet;\n         }\n-        return convertIf(sqlSet, newPrefix + property, updateStrategy);\n+        return convertIf(sqlSet, convertIfProperty(prefix, property), updateStrategy);\n+    }\n+\n+    private String convertIfProperty(String prefix, String property) {\n+        return StringUtils.isNotEmpty(prefix) ? prefix.substring(0, prefix.length() - 1) + \"['\" + property + \"']\" : property;\n     }\n \n     /**\n@@ -424,7 +428,7 @@ public String getSqlWhere(final String prefix) {\n         // \u9ed8\u8ba4:  AND column=#{prefix + el}\n         String sqlScript = \" AND \" + String.format(condition, column, newPrefix + el);\n         // \u67e5\u8be2\u7684\u65f6\u5019\u53ea\u5224\u975e\u7a7a\n-        return convertIf(sqlScript, newPrefix + property, whereStrategy);\n+        return convertIf(sqlScript, convertIfProperty(newPrefix, property), whereStrategy);\n     }\n \n     /**",
      "parent_sha": "c8882dd5f963c6f188d36ea77f1a0b14bac05d66"
    }
  },
  {
    "oid": "736064bca3fd4ef144facfa1516779f828ab1f88",
    "message": "fix: \u5b57\u6bb5\u6709`TableField`\u6ce8\u89e3\u4f46\u672a\u6307\u5b9a`value`\u503c\u4e0b\u5168\u5c40`columnFormat`\u672a\u751f\u6548\u95ee\u9898",
    "date": "2024-10-28T10:32:00Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/736064bca3fd4ef144facfa1516779f828ab1f88",
    "details": {
      "sha": "1f448fcff9185be0d45dd7d81bdd8ff18f9ba2a9",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableFieldInfo.java",
      "status": "modified",
      "additions": 14,
      "deletions": 24,
      "changes": 38,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/736064bca3fd4ef144facfa1516779f828ab1f88/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/736064bca3fd4ef144facfa1516779f828ab1f88/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java?ref=736064bca3fd4ef144facfa1516779f828ab1f88",
      "patch": "@@ -15,32 +15,18 @@\n  */\n package com.baomidou.mybatisplus.core.metadata;\n \n-import com.baomidou.mybatisplus.annotation.FieldFill;\n-import com.baomidou.mybatisplus.annotation.FieldStrategy;\n-import com.baomidou.mybatisplus.annotation.OrderBy;\n-import com.baomidou.mybatisplus.annotation.SqlCondition;\n-import com.baomidou.mybatisplus.annotation.TableField;\n-import com.baomidou.mybatisplus.annotation.TableLogic;\n-import com.baomidou.mybatisplus.annotation.Version;\n+import com.baomidou.mybatisplus.annotation.*;\n import com.baomidou.mybatisplus.core.config.GlobalConfig;\n import com.baomidou.mybatisplus.core.handlers.IJsonTypeHandler;\n import com.baomidou.mybatisplus.core.toolkit.Constants;\n import com.baomidou.mybatisplus.core.toolkit.MybatisUtils;\n import com.baomidou.mybatisplus.core.toolkit.StringUtils;\n import com.baomidou.mybatisplus.core.toolkit.sql.SqlScriptUtils;\n-import lombok.AccessLevel;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.ToString;\n+import lombok.*;\n import org.apache.ibatis.mapping.ResultMapping;\n import org.apache.ibatis.reflection.Reflector;\n import org.apache.ibatis.session.Configuration;\n-import org.apache.ibatis.type.JdbcType;\n-import org.apache.ibatis.type.TypeAliasRegistry;\n-import org.apache.ibatis.type.TypeHandler;\n-import org.apache.ibatis.type.TypeHandlerRegistry;\n-import org.apache.ibatis.type.UnknownTypeHandler;\n+import org.apache.ibatis.type.*;\n \n import java.lang.reflect.Field;\n import java.util.Map;\n@@ -273,12 +259,16 @@ public TableFieldInfo(GlobalConfig globalConfig, TableInfo tableInfo, Field fiel\n                 /* \u5f00\u542f\u5b57\u6bb5\u5168\u5927\u5199\u7533\u660e */\n                 column = column.toUpperCase();\n             }\n+            String columnFormat = dbConfig.getColumnFormat();\n+            if (StringUtils.isNotBlank(columnFormat)) {\n+                column = String.format(columnFormat, column);\n+            }\n+        } else {\n+            String columnFormat = dbConfig.getColumnFormat();\n+            if (StringUtils.isNotBlank(columnFormat) && tableField.keepGlobalFormat()) {\n+                column = String.format(columnFormat, column);\n+            }\n         }\n-        String columnFormat = dbConfig.getColumnFormat();\n-        if (StringUtils.isNotBlank(columnFormat) && tableField.keepGlobalFormat()) {\n-            column = String.format(columnFormat, column);\n-        }\n-\n         this.column = column;\n         this.sqlSelect = column;\n         if (needAs) {\n@@ -384,7 +374,7 @@ public TableFieldInfo(GlobalConfig globalConfig, TableInfo tableInfo, Field fiel\n      * \u6392\u5e8f\u521d\u59cb\u5316\n      *\n      * @param tableInfo \u8868\u4fe1\u606f\n-     * @param orderBy \u6392\u5e8f\u6ce8\u89e3\n+     * @param orderBy   \u6392\u5e8f\u6ce8\u89e3\n      */\n     private void initOrderBy(TableInfo tableInfo, OrderBy orderBy) {\n         if (null != orderBy) {\n@@ -401,7 +391,7 @@ private void initOrderBy(TableInfo tableInfo, OrderBy orderBy) {\n      * \u903b\u8f91\u5220\u9664\u521d\u59cb\u5316\n      *\n      * @param globalConfig \u5168\u5c40\u914d\u7f6e\n-     * @param field    \u5b57\u6bb5\u5c5e\u6027\u5bf9\u8c61\n+     * @param field        \u5b57\u6bb5\u5c5e\u6027\u5bf9\u8c61\n      */\n     private void initLogicDelete(GlobalConfig globalConfig, Field field, boolean existTableLogic) {\n         GlobalConfig.DbConfig dbConfig = globalConfig.getDbConfig();",
      "parent_sha": "bbf2b671b5ad2492033a2b03a4c99b56c02d7701"
    }
  },
  {
    "oid": "03a46d259f20afa12d058535632c9b7412e51977",
    "message": "\u4e0d\u53c2\u4e0e\u5355\u5143\u6d4b\u8bd5.",
    "date": "2017-06-20T06:20:33Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/03a46d259f20afa12d058535632c9b7412e51977",
    "details": {
      "sha": "10238731517a8db54e00feb6c497b223bc38df47",
      "filename": "src/test/java/com/baomidou/mybatisplus/test/MybatisMapperRefreshTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 11,
      "changes": 13,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/03a46d259f20afa12d058535632c9b7412e51977/src%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2FMybatisMapperRefreshTest.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/03a46d259f20afa12d058535632c9b7412e51977/src%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2FMybatisMapperRefreshTest.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/src%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2FMybatisMapperRefreshTest.java?ref=03a46d259f20afa12d058535632c9b7412e51977",
      "patch": "@@ -17,11 +17,9 @@\n \n import org.apache.ibatis.session.SqlSession;\n import org.apache.ibatis.session.SqlSessionFactory;\n-import org.junit.Test;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n-import com.baomidou.mybatisplus.entity.GlobalConfiguration;\n import com.baomidou.mybatisplus.plugins.pagination.Pagination;\n import com.baomidou.mybatisplus.spring.MybatisMapperRefresh;\n import com.baomidou.mybatisplus.test.mysql.mapper.UserMapper;\n@@ -39,20 +37,13 @@\n  */\n public class MybatisMapperRefreshTest extends CrudTest {\n \n-    @Override\n-    public GlobalConfiguration globalConfiguration() {\n-        GlobalConfiguration gc = super.globalConfiguration();\n-        // to do nothing\n-        return gc;\n-    }\n \n     /**\n      * \u6d4b\u8bd5 Mybatis XML \u4fee\u6539\u81ea\u52a8\u5237\u65b0\n      */\n-    @Test\n-    public void test() throws Exception {\n+    public static void main(String[] args) throws Exception {\n         Resource[] resource = new ClassPathResource[]{new ClassPathResource(\"mysql/UserMapper.xml\")};\n-        SqlSessionFactory sessionFactory = this.sqlSessionFactory();\n+        SqlSessionFactory sessionFactory = new CrudTest().sqlSessionFactory();\n         new MybatisMapperRefresh(sessionFactory, 0, 5, true);\n         boolean isReturn = false;\n         SqlSession session = null;",
      "parent_sha": "111c211343ce3015b2ba9d3c8eff7fd093726fee"
    }
  },
  {
    "oid": "8cb54a0593a000e2bd637845979eec5eaa4af912",
    "message": "\u4ee3\u7801\u751f\u6210\u5668\u547d\u540d\u7b56\u7565\u8c03\u6574.",
    "date": "2020-03-13T06:28:34Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/8cb54a0593a000e2bd637845979eec5eaa4af912",
    "details": {
      "sha": "254f7af38e2f9f24a2012d207a1b4b6a98de3b9a",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java",
      "status": "modified",
      "additions": 16,
      "deletions": 5,
      "changes": 21,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/8cb54a0593a000e2bd637845979eec5eaa4af912/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fbuilder%2FConfigBuilder.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/8cb54a0593a000e2bd637845979eec5eaa4af912/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fbuilder%2FConfigBuilder.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fbuilder%2FConfigBuilder.java?ref=8cb54a0593a000e2bd637845979eec5eaa4af912",
      "patch": "@@ -316,17 +316,28 @@ private void processTypes(StrategyConfig config) {\n         superEntityClass = config.getSuperEntityClass();\n         superControllerClass = config.getSuperControllerClass();\n     }\n-\n-\n+    \n     /**\n      * \u5904\u7406\u8868\u5bf9\u5e94\u7684\u7c7b\u540d\u79f0\n      *\n      * @param tableList \u8868\u540d\u79f0\n-     * @param strategy  \u547d\u540d\u7b56\u7565\n      * @param config    \u7b56\u7565\u914d\u7f6e\u9879\n      * @return \u8865\u5145\u5b8c\u6574\u4fe1\u606f\u540e\u7684\u8868\n+     * @deprecated 3.3.2\n      */\n+    @Deprecated\n     private List<TableInfo> processTable(List<TableInfo> tableList, NamingStrategy strategy, StrategyConfig config) {\n+        return processTable(tableList, config);\n+    }\n+\n+    /**\n+     * \u5904\u7406\u8868\u5bf9\u5e94\u7684\u7c7b\u540d\u79f0\n+     *\n+     * @param tableList \u8868\u540d\u79f0\n+     * @param config    \u7b56\u7565\u914d\u7f6e\u9879\n+     * @return \u8865\u5145\u5b8c\u6574\u4fe1\u606f\u540e\u7684\u8868\n+     */\n+    private List<TableInfo> processTable(List<TableInfo> tableList, StrategyConfig config) {\n         String[] tablePrefix = config.getTablePrefix();\n         for (TableInfo tableInfo : tableList) {\n             String entityName;\n@@ -335,7 +346,7 @@ private List<TableInfo> processTable(List<TableInfo> tableList, NamingStrategy s\n                 // \u81ea\u5b9a\u4e49\u5904\u7406\u5b9e\u4f53\u540d\u79f0\n                 entityName = nameConvert.entityNameConvert(tableInfo);\n             } else {\n-                entityName = NamingStrategy.capitalFirst(processName(tableInfo.getName(), strategy, tablePrefix));\n+                entityName = NamingStrategy.capitalFirst(processName(tableInfo.getName(), config.getNaming(), tablePrefix));\n             }\n             if (StringUtils.isNotBlank(globalConfig.getEntityName())) {\n                 tableInfo.setConvert(true);\n@@ -546,7 +557,7 @@ else if (DbType.ORACLE == this.dbType) {\n         } catch (SQLException e) {\n             e.printStackTrace();\n         }\n-        return processTable(includeTableList, config.getColumnNaming(), config);\n+        return processTable(includeTableList, config);\n     }\n \n ",
      "parent_sha": "3c669ce51bd0647994ea1107ee97d631f308fe56"
    }
  },
  {
    "oid": "921a8e06c5b8236f93806a2e98b33c4d9190ad4d",
    "message": "\u4fee\u590d\u9ad8\u65af\u6570\u636e\u5e93\u751f\u6210\u9519\u8bef.\n\nhttps://github.com/baomidou/generator/issues/11",
    "date": "2020-10-29T04:05:18Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/921a8e06c5b8236f93806a2e98b33c4d9190ad4d",
    "details": {
      "sha": "c950f0e4ff6025bf9c867039e6393c26564b77ad",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/GaussQuery.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/921a8e06c5b8236f93806a2e98b33c4d9190ad4d/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FGaussQuery.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/921a8e06c5b8236f93806a2e98b33c4d9190ad4d/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FGaussQuery.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FGaussQuery.java?ref=921a8e06c5b8236f93806a2e98b33c4d9190ad4d",
      "patch": "@@ -25,8 +25,8 @@ public class GaussQuery extends AbstractDbQuery {\n \n     @Override\n     public String tablesSql() {\n-        return \"SELECT DISTINCT T1.TABLE_NAME,T2.COMMENTS AS TABLE_COMMENT FROM USER_TAB_COLUMNS T1 \" +\n-            \"LEFT JOIN USER_TAB_COMMENTS T2 ON T1.TABLE_NAME = T2.TABLE_NAME WHERE 1=1 \";\n+        return \"SELECT * FROM (SELECT DISTINCT T1.TABLE_NAME,T2.COMMENTS AS TABLE_COMMENT FROM USER_TAB_COLUMNS T1 \" +\n+            \"LEFT JOIN USER_TAB_COMMENTS T2 ON T1.TABLE_NAME = T2.TABLE_NAME ) a WHERE 1=1 \";\n     }\n \n     @Override",
      "parent_sha": "ee10601c8fe44a7d5c05a6bdb63e8ccc13f3702e"
    }
  },
  {
    "oid": "f344c5a210d8cfd9c008785ece098783c2f2bccd",
    "message": "\u589e\u52a0first\u4e0ecomment\u65b9\u6cd5\u6ce8\u91ca.",
    "date": "2024-03-04T16:03:34Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/f344c5a210d8cfd9c008785ece098783c2f2bccd",
    "details": {
      "sha": "12f4c68b59b9847c09e30e6bd40f374ad306b63b",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/interfaces/Join.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/f344c5a210d8cfd9c008785ece098783c2f2bccd/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2Finterfaces%2FJoin.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/f344c5a210d8cfd9c008785ece098783c2f2bccd/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2Finterfaces%2FJoin.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2Finterfaces%2FJoin.java?ref=f344c5a210d8cfd9c008785ece098783c2f2bccd",
      "patch": "@@ -97,8 +97,11 @@ default Children last(String lastSql) {\n \n     /**\n      * sql \u6ce8\u91ca(\u4f1a\u62fc\u63a5\u5728 sql \u7684\u6700\u540e\u9762)\n+     * <p>\n+     * \u81ea3.5.6\u5f00\u59cb,\u9ed8\u8ba4\u4e0d\u5904\u7406\u8f6c\u4e49\u5b57\u7b26,\u5982\u6709\u9700\u8981,\u8c03\u7528{@link com.baomidou.mybatisplus.core.toolkit.sql.StringEscape#escapeRawString(String)}\n+     * </p>\n      *\n-     * @param comment   sql\u6ce8\u91ca\n+     * @param comment sql\u6ce8\u91ca\n      * @return children\n      */\n     default Children comment(String comment) {\n@@ -107,6 +110,9 @@ default Children comment(String comment) {\n \n     /**\n      * sql \u6ce8\u91ca(\u4f1a\u62fc\u63a5\u5728 sql \u7684\u6700\u540e\u9762)\n+     * <p>\n+     * \u81ea3.5.6\u5f00\u59cb,\u9ed8\u8ba4\u4e0d\u5904\u7406\u8f6c\u4e49\u5b57\u7b26,\u5982\u6709\u9700\u8981,\u8c03\u7528{@link com.baomidou.mybatisplus.core.toolkit.sql.StringEscape#escapeRawString(String)}\n+     * </p>\n      *\n      * @param condition \u6267\u884c\u6761\u4ef6\n      * @param comment   sql\u6ce8\u91ca\n@@ -116,8 +122,11 @@ default Children comment(String comment) {\n \n     /**\n      * sql \u8d77\u59cb\u53e5\uff08\u4f1a\u62fc\u63a5\u5728SQL\u8bed\u53e5\u7684\u8d77\u59cb\u5904\uff09\n+     * <p>\n+     * \u81ea3.5.6\u5f00\u59cb,\u9ed8\u8ba4\u4e0d\u5904\u7406\u8f6c\u4e49\u5b57\u7b26,\u5982\u6709\u9700\u8981,\u8c03\u7528{@link com.baomidou.mybatisplus.core.toolkit.sql.StringEscape#escapeRawString(String)}\n+     * </p>\n      *\n-     * @param firstSql  \u8d77\u59cb\u8bed\u53e5\n+     * @param firstSql \u8d77\u59cb\u8bed\u53e5\n      * @return children\n      */\n     default Children first(String firstSql) {\n@@ -126,6 +135,9 @@ default Children first(String firstSql) {\n \n     /**\n      * sql \u8d77\u59cb\u53e5\uff08\u4f1a\u62fc\u63a5\u5728SQL\u8bed\u53e5\u7684\u8d77\u59cb\u5904\uff09\n+     * <p>\n+     * \u81ea3.5.6\u5f00\u59cb,\u9ed8\u8ba4\u4e0d\u5904\u7406\u8f6c\u4e49\u5b57\u7b26,\u5982\u6709\u9700\u8981,\u8c03\u7528{@link com.baomidou.mybatisplus.core.toolkit.sql.StringEscape#escapeRawString(String)}\n+     * </p>\n      *\n      * @param condition \u6267\u884c\u6761\u4ef6\n      * @param firstSql  \u8d77\u59cb\u8bed\u53e5",
      "parent_sha": "cbb2f72d2d6bff331ac3fc47f952737461d1ee2b"
    }
  },
  {
    "oid": "0dbc6af07a839d41954775aacd4149a55e240381",
    "message": "\u4fee\u6539\u63d0\u793a",
    "date": "2016-09-25T11:59:15Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/0dbc6af07a839d41954775aacd4149a55e240381",
    "details": {
      "sha": "ddc803a1bc1cb0255b8c760db398e0b754f5e7bd",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/MybatisPulsMapperRegistry.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/0dbc6af07a839d41954775aacd4149a55e240381/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2FMybatisPulsMapperRegistry.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/0dbc6af07a839d41954775aacd4149a55e240381/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2FMybatisPulsMapperRegistry.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2FMybatisPulsMapperRegistry.java?ref=0dbc6af07a839d41954775aacd4149a55e240381",
      "patch": "@@ -51,7 +51,7 @@ public MybatisPulsMapperRegistry(Configuration config) {\n \tpublic <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n \t\tfinal MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);\n \t\tif (mapperProxyFactory == null) {\n-\t\t\tthrow new BindingException(\"Type \" + type + \" is not known to the MapperRegistry.\");\n+\t\t\tthrow new BindingException(\"Type \" + type + \" is not known to the MybatisPlusMapperRegistry.\");\n \t\t}\n \t\ttry {\n \t\t\treturn mapperProxyFactory.newInstance(sqlSession);\n@@ -67,7 +67,7 @@ public <T> boolean hasMapper(Class<T> type) {\n \tpublic <T> void addMapper(Class<T> type) {\n \t\tif (type.isInterface()) {\n \t\t\tif (hasMapper(type)) {\n-\t\t\t\tthrow new BindingException(\"Type \" + type + \" is already known to the MapperRegistry.\");\n+\t\t\t\tthrow new BindingException(\"Type \" + type + \" is already known to the MybatisPlusMapperRegistry.\");\n \t\t\t}\n \t\t\tboolean loadCompleted = false;\n \t\t\ttry {",
      "parent_sha": "90d76f4c54465221af22b45986cadaaa62f8807b"
    }
  },
  {
    "oid": "b868305785a89d37c4a2782d122d15835908ba66",
    "message": "\u7cbe\u7b80\u6cdb\u578b",
    "date": "2022-03-30T14:53:07Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/b868305785a89d37c4a2782d122d15835908ba66",
    "details": {
      "sha": "2bec5cae077dce3fc79b7c84f85a879603396335",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/SimpleQuery.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/b868305785a89d37c4a2782d122d15835908ba66/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Ftoolkit%2FSimpleQuery.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/b868305785a89d37c4a2782d122d15835908ba66/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Ftoolkit%2FSimpleQuery.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Ftoolkit%2FSimpleQuery.java?ref=b868305785a89d37c4a2782d122d15835908ba66",
      "patch": "@@ -105,7 +105,7 @@ public static <T, K> Map<K, List<T>> group(LambdaQueryWrapper<T> wrapper, SFunct\n      * ignore\n      */\n     @SafeVarargs\n-    public static <T, K, D, A, M extends Map<K, D>> M group(LambdaQueryWrapper<T> wrapper, SFunction<T, K> sFunction, Collector<? super T, A, D> downstream, Consumer<T>... peeks) {\n+    public static <T, K, D, A, M extends Map<K, D>> M group(LambdaQueryWrapper<T> wrapper, SFunction<T, K> sFunction, Collector<T, A, D> downstream, Consumer<T>... peeks) {\n         return listGroupBy(selectList(getType(sFunction), wrapper), sFunction, downstream, false, peeks);\n     }\n \n@@ -125,7 +125,7 @@ public static <T, K, D, A, M extends Map<K, D>> M group(LambdaQueryWrapper<T> wr\n      * @return Map<\u5b9e\u4f53\u4e2d\u7684\u5c5e\u6027, List < \u5b9e\u4f53>>\n      */\n     @SafeVarargs\n-    public static <T, K, D, A, M extends Map<K, D>> M group(LambdaQueryWrapper<T> wrapper, SFunction<T, K> sFunction, Collector<? super T, A, D> downstream, boolean isParallel, Consumer<T>... peeks) {\n+    public static <T, K, D, A, M extends Map<K, D>> M group(LambdaQueryWrapper<T> wrapper, SFunction<T, K> sFunction, Collector<T, A, D> downstream, boolean isParallel, Consumer<T>... peeks) {\n         return listGroupBy(selectList(getType(sFunction), wrapper), sFunction, downstream, isParallel, peeks);\n     }\n \n@@ -195,7 +195,7 @@ public static <K, T> Map<K, List<T>> listGroupBy(List<T> list, SFunction<T, K> s\n      * ignore\n      */\n     @SafeVarargs\n-    public static <T, K, D, A, M extends Map<K, D>> M listGroupBy(List<T> list, SFunction<T, K> sFunction, Collector<? super T, A, D> downstream, Consumer<T>... peeks) {\n+    public static <T, K, D, A, M extends Map<K, D>> M listGroupBy(List<T> list, SFunction<T, K> sFunction, Collector<T, A, D> downstream, Consumer<T>... peeks) {\n         return listGroupBy(list, sFunction, downstream, false, peeks);\n     }\n \n@@ -216,7 +216,7 @@ public static <T, K, D, A, M extends Map<K, D>> M listGroupBy(List<T> list, SFun\n      */\n     @SafeVarargs\n     @SuppressWarnings(\"unchecked\")\n-    public static <T, K, D, A, M extends Map<K, D>> M listGroupBy(List<T> list, SFunction<T, K> sFunction, Collector<? super T, A, D> downstream, boolean isParallel, Consumer<T>... peeks) {\n+    public static <T, K, D, A, M extends Map<K, D>> M listGroupBy(List<T> list, SFunction<T, K> sFunction, Collector<T, A, D> downstream, boolean isParallel, Consumer<T>... peeks) {\n         boolean hasFinished = downstream.characteristics().contains(Collector.Characteristics.IDENTITY_FINISH);\n         return peekStream(list, isParallel, peeks).collect(new Collector<T, HashMap<K, A>, M>() {\n             @Override",
      "parent_sha": "6c6d1860d7ec71a17f640207363d8a1595ac7a04"
    }
  },
  {
    "oid": "c266ca692d39f84009f016f1893bdd1ddae6116c",
    "message": "fix typo",
    "date": "2017-03-12T03:21:51Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/c266ca692d39f84009f016f1893bdd1ddae6116c",
    "details": {
      "sha": "88cab1ac1cad53899a5aab15fbbdfd4d553e7f4c",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/c266ca692d39f84009f016f1893bdd1ddae6116c/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/c266ca692d39f84009f016f1893bdd1ddae6116c/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java?ref=c266ca692d39f84009f016f1893bdd1ddae6116c",
      "patch": "@@ -57,7 +57,9 @@\n  * @Date 2016-09-09\n  */\n public class AutoSqlInjector implements ISqlInjector {\n+\n \tprivate static final Log logger = LogFactory.getLog(AutoSqlInjector.class);\n+\n \tprotected Configuration configuration;\n \tprotected LanguageDriver languageDriver;\n \tprotected MapperBuilderAssistant builderAssistant;\n@@ -876,7 +878,7 @@ private void createUpdateMappedStatement(String mappedStatement, SqlSource sqlSo\n \t */\n \tprivate void initSelectList() {\n \t\tif (hasMappedStatement(SqlRunner.SELECT_LIST)) {\n-\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.SelectList' Aalready Exists\");\n+\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.SelectList' Already Exists\");\n \t\t\treturn;\n \t\t}\n \t\tSqlSource sqlSource = languageDriver.createSqlSource(configuration, SqlRunner.SQLScript, Map.class);\n@@ -888,7 +890,7 @@ private void initSelectList() {\n \t */\n \tprivate void initSelectObjs() {\n \t\tif (hasMappedStatement(SqlRunner.SELECT_OBJS)) {\n-\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.SelectObjs' Aalready Exists\");\n+\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.SelectObjs' Already Exists\");\n \t\t\treturn;\n \t\t}\n \t\tSqlSource sqlSource = languageDriver.createSqlSource(configuration, SqlRunner.SQLScript, Object.class);\n@@ -900,7 +902,7 @@ private void initSelectObjs() {\n \t */\n \tprivate void initCount() {\n \t\tif (hasMappedStatement(SqlRunner.COUNT)) {\n-\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.Count' Aalready Exists\");\n+\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.Count' Already Exists\");\n \t\t\treturn;\n \t\t}\n \t\tSqlSource sqlSource = languageDriver.createSqlSource(configuration, SqlRunner.SQLScript, Map.class);\n@@ -912,7 +914,7 @@ private void initCount() {\n \t */\n \tprivate void initInsert() {\n \t\tif (hasMappedStatement(SqlRunner.INSERT)) {\n-\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.Insert' Aalready Exists\");\n+\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.Insert' Already Exists\");\n \t\t\treturn;\n \t\t}\n \t\tSqlSource sqlSource = languageDriver.createSqlSource(configuration, SqlRunner.SQLScript, Map.class);\n@@ -924,7 +926,7 @@ private void initInsert() {\n \t */\n \tprivate void initUpdate() {\n \t\tif (hasMappedStatement(SqlRunner.UPDATE)) {\n-\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.Update' Aalready Exists\");\n+\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.Update' Already Exists\");\n \t\t\treturn;\n \t\t}\n \t\tSqlSource sqlSource = languageDriver.createSqlSource(configuration, SqlRunner.SQLScript, Map.class);\n@@ -936,7 +938,7 @@ private void initUpdate() {\n \t */\n \tprivate void initDelete() {\n \t\tif (hasMappedStatement(SqlRunner.DELETE)) {\n-\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.Delete' Aalready Exists\");\n+\t\t\tlogger.warn(\"MappedStatement 'SqlRunner.Delete' Already Exists\");\n \t\t\treturn;\n \t\t}\n \t\tSqlSource sqlSource = languageDriver.createSqlSource(configuration, SqlRunner.SQLScript, Map.class);",
      "parent_sha": "3fdd2697472241701d4cf8b3997e60f2a82c69bb"
    }
  },
  {
    "oid": "55444b69982c97b7bb637d5d4b5d6dc56f1c83c8",
    "message": "\u6d4b\u8bd5\u7528\u4f8b el",
    "date": "2018-08-08T09:28:59Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/55444b69982c97b7bb637d5d4b5d6dc56f1c83c8",
    "details": {
      "sha": "7a65cd67e342b3e70c6c1229e3dd77b206b8ef36",
      "filename": "mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/base/entity/PgTestData.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/55444b69982c97b7bb637d5d4b5d6dc56f1c83c8/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fbase%2Fentity%2FPgTestData.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/55444b69982c97b7bb637d5d4b5d6dc56f1c83c8/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fbase%2Fentity%2FPgTestData.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fbase%2Fentity%2FPgTestData.java?ref=55444b69982c97b7bb637d5d4b5d6dc56f1c83c8",
      "patch": "@@ -21,7 +21,7 @@\n @TableName(value = \"tb_only_pg_test_data\")\n public class PgTestData extends BaseEntity {\n \n-    @TableField(value = \"age\")\n+    @TableField(value = \"age\", el = \"age, jdbcType=integer\")\n     private Integer dataAge;\n     @TableField(value = \"c_datetime\", fill = FieldFill.INSERT)\n     private LocalDateTime createDatetime;",
      "parent_sha": "7ba8016de1594af215ac964b45731228abc8cc11"
    }
  },
  {
    "oid": "3c2eff549e5e9cd746c25815cdefc25fa4ecb0a8",
    "message": "\u589e\u52a0\u624b\u52a8\u6307\u5b9aCompatibleSet\u5b9e\u73b0\u65b9\u6cd5.",
    "date": "2025-03-31T14:04:58Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/3c2eff549e5e9cd746c25815cdefc25fa4ecb0a8",
    "details": {
      "sha": "9be343d3fe6472c3b415e037b76652a27efa32ac",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/spi/CompatibleHelper.java",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/3c2eff549e5e9cd746c25815cdefc25fa4ecb0a8/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspi%2FCompatibleHelper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/3c2eff549e5e9cd746c25815cdefc25fa4ecb0a8/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspi%2FCompatibleHelper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspi%2FCompatibleHelper.java?ref=3c2eff549e5e9cd746c25815cdefc25fa4ecb0a8",
      "patch": "@@ -23,6 +23,7 @@\n \n /**\n  * \u517c\u5bb9\u5904\u7406\u8f85\u52a9\u7c7b\n+ * <p>\u9ed8\u8ba4\u52a0\u8f7d\u4f7f\u7528SPI\u5b9e\u73b0,\u9700\u8981\u624b\u52a8\u6307\u5b9a\u8bf7\u4f7f\u7528{@link #setCompatibleSet(CompatibleSet)}</p>\n  */\n public class CompatibleHelper {\n \n@@ -46,21 +47,32 @@ public class CompatibleHelper {\n     /**\n      * \u5224\u65ad\u662f\u5426\u5b58\u5728 {@link com.baomidou.mybatisplus.extension.spi.CompatibleSet} \u5b9e\u4f8b\n      *\n-     * @return \u662f\u5426\u5b58\u5728\n+     * @return \u662f\u5426\u5b58\u5728 (\u5b58\u5728\u8fd4\u56detrue,\u4e3a\u7a7a\u8fd4\u56defalse)\n      * @since 3.5.12\n      */\n     public static boolean hasCompatibleSet() {\n         return COMPATIBLE_SET != null;\n     }\n \n+    /**\n+     * \u624b\u52a8\u6307\u5b9a {@link com.baomidou.mybatisplus.extension.spi.CompatibleSet} \u5b9e\u4f8b\n+     *\n+     * @param compatibleSet {@link com.baomidou.mybatisplus.extension.spi.CompatibleSet} \u5b9e\u4f8b\n+     * @since 3.5.12\n+     */\n+    public static void setCompatibleSet(CompatibleSet compatibleSet) {\n+        COMPATIBLE_SET = compatibleSet;\n+    }\n+\n     /**\n      * \u83b7\u53d6{@link com.baomidou.mybatisplus.extension.spi.CompatibleSet}\u5b9e\u4f8b\n-     * <p>\u5f53\u4e3a\u7a7a\u662f\u4f1a\u629b\u51fa\u5f02\u5e38,\u9700\u8981\u68c0\u67e5\u662f\u5426\u8bf7\u4f7f\u7528{@link #hasCompatibleSet()}</p>\n+     * <p>\u5f53\u4e3a\u7a7a\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38,\u9700\u8981\u68c0\u67e5\u662f\u5426\u4e3a\u7a7a\u8bf7\u4f7f\u7528{@link #hasCompatibleSet()}</p>\n      *\n      * @return {@link com.baomidou.mybatisplus.extension.spi.CompatibleSet}\n+     * @see #setCompatibleSet(CompatibleSet)\n      */\n     public static CompatibleSet getCompatibleSet() {\n-        Assert.notNull(COMPATIBLE_SET, \"Please add specific implementation dependencies\");\n+        Assert.isTrue(hasCompatibleSet(), \"Please add specific implementation dependencies or use the setCompatibleSet method to specify\");\n         return COMPATIBLE_SET;\n     }\n ",
      "parent_sha": "c257d24488f7f7fa3dcbe7ebf33a7addc003b30e"
    }
  },
  {
    "oid": "7585d4e40f8ccf81e4d8139e90d5daba7af11cfe",
    "message": "\u518d\u518d\u6b21\u7cbe\u7b80\u4ee3\u7801(\u4f7f\u7528 java8)",
    "date": "2018-05-08T07:03:00Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/7585d4e40f8ccf81e4d8139e90d5daba7af11cfe",
    "details": {
      "sha": "2b9bcedf1b44594d6ef603dba7ed5b40621a51ee",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/tenant/TenantSqlParser.java",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/7585d4e40f8ccf81e4d8139e90d5daba7af11cfe/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Ftenant%2FTenantSqlParser.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/7585d4e40f8ccf81e4d8139e90d5daba7af11cfe/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Ftenant%2FTenantSqlParser.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Ftenant%2FTenantSqlParser.java?ref=7585d4e40f8ccf81e4d8139e90d5daba7af11cfe",
      "patch": "@@ -83,10 +83,7 @@ public void processInsert(Insert insert) {\n             // fixed github pull/295\n             ItemsList itemsList = insert.getItemsList();\n             if (itemsList instanceof MultiExpressionList) {\n-                List<ExpressionList> exprList = ((MultiExpressionList) itemsList).getExprList();\n-                for (ExpressionList el : exprList) {\n-                    el.getExpressions().add(tenantHandler.getTenantId());\n-                }\n+                ((MultiExpressionList) itemsList).getExprList().forEach(el -> el.getExpressions().add(tenantHandler.getTenantId()));\n             } else {\n                 ((ExpressionList) insert.getItemsList()).getExpressions().add(tenantHandler.getTenantId());\n             }\n@@ -180,10 +177,10 @@ protected void processPlainSelect(PlainSelect plainSelect, boolean addColumn) {\n         }\n         List<Join> joins = plainSelect.getJoins();\n         if (joins != null && joins.size() > 0) {\n-            for (Join join : joins) {\n-                processJoin(join);\n-                processFromItem(join.getRightItem());\n-            }\n+            joins.forEach(j -> {\n+                processJoin(j);\n+                processFromItem(j.getRightItem());\n+            });\n         }\n     }\n ",
      "parent_sha": "7e1c2c4e7abd991e6f52206a00260925e4ba50a9"
    }
  },
  {
    "oid": "f39d4d146c6a70b8d860be119d58ad77811f889c",
    "message": "MybatisPlusProperties lombok \u5316",
    "date": "2019-04-14T15:19:29Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/f39d4d146c6a70b8d860be119d58ad77811f889c",
    "details": {
      "sha": "85239562373d22b14bd6b9a267121821b69c2756",
      "filename": "mybatis-plus-boot-starter/src/main/java/com/baomidou/mybatisplus/autoconfigure/MybatisPlusProperties.java",
      "status": "modified",
      "additions": 8,
      "deletions": 110,
      "changes": 118,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/f39d4d146c6a70b8d860be119d58ad77811f889c/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusProperties.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/f39d4d146c6a70b8d860be119d58ad77811f889c/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusProperties.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusProperties.java?ref=f39d4d146c6a70b8d860be119d58ad77811f889c",
      "patch": "@@ -18,6 +18,7 @@\n import com.baomidou.mybatisplus.core.MybatisConfiguration;\n import com.baomidou.mybatisplus.core.config.GlobalConfig;\n import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;\n+import lombok.Data;\n import org.apache.ibatis.session.ExecutorType;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.NestedConfigurationProperty;\n@@ -36,6 +37,7 @@\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @author Kazuki Shimizu\n  */\n+@Data\n @ConfigurationProperties(prefix = MybatisPlusProperties.MYBATIS_PREFIX)\n public class MybatisPlusProperties {\n \n@@ -69,11 +71,6 @@ public class MybatisPlusProperties {\n      */\n     private String typeHandlersPackage;\n \n-    /**\n-     * \u679a\u4e3e\u5305\u626b\u63cf\n-     */\n-    private String typeEnumsPackage;\n-\n     /**\n      * Indicates whether perform presence check of the MyBatis xml config file.\n      */\n@@ -92,121 +89,22 @@ public class MybatisPlusProperties {\n     /**\n      * A Configuration object for customize default settings. If {@link #configLocation}\n      * is specified, this property is not used.\n+     * TODO \u4f7f\u7528 MybatisConfiguration\n      */\n     @NestedConfigurationProperty\n     private MybatisConfiguration configuration;\n \n     /**\n-     * \u5168\u5c40\u914d\u7f6e\n-     */\n-    @NestedConfigurationProperty\n-    private GlobalConfig globalConfig = GlobalConfigUtils.defaults();\n-\n-    /**\n-     * @since 1.1.0\n-     */\n-    public String getConfigLocation() {\n-        return this.configLocation;\n-    }\n-\n-    /**\n-     * @since 1.1.0\n+     * TODO \u679a\u4e3e\u5305\u626b\u63cf\n      */\n-    public void setConfigLocation(String configLocation) {\n-        this.configLocation = configLocation;\n-    }\n-\n-    public String[] getMapperLocations() {\n-        return this.mapperLocations;\n-    }\n-\n-    public void setMapperLocations(String[] mapperLocations) {\n-        this.mapperLocations = mapperLocations;\n-    }\n-\n-    public String getTypeHandlersPackage() {\n-        return this.typeHandlersPackage;\n-    }\n-\n-    public void setTypeHandlersPackage(String typeHandlersPackage) {\n-        this.typeHandlersPackage = typeHandlersPackage;\n-    }\n-\n-    public String getTypeEnumsPackage() {\n-        return typeEnumsPackage;\n-    }\n-\n-    public void setTypeEnumsPackage(String typeEnumsPackage) {\n-        this.typeEnumsPackage = typeEnumsPackage;\n-    }\n-\n-    public String getTypeAliasesPackage() {\n-        return this.typeAliasesPackage;\n-    }\n-\n-    public void setTypeAliasesPackage(String typeAliasesPackage) {\n-        this.typeAliasesPackage = typeAliasesPackage;\n-    }\n-\n-    /**\n-     * @since 1.3.3\n-     */\n-    public Class<?> getTypeAliasesSuperType() {\n-        return typeAliasesSuperType;\n-    }\n-\n-    /**\n-     * @since 1.3.3\n-     */\n-    public void setTypeAliasesSuperType(Class<?> typeAliasesSuperType) {\n-        this.typeAliasesSuperType = typeAliasesSuperType;\n-    }\n-\n-    public boolean isCheckConfigLocation() {\n-        return this.checkConfigLocation;\n-    }\n-\n-    public void setCheckConfigLocation(boolean checkConfigLocation) {\n-        this.checkConfigLocation = checkConfigLocation;\n-    }\n-\n-    public ExecutorType getExecutorType() {\n-        return this.executorType;\n-    }\n-\n-    public void setExecutorType(ExecutorType executorType) {\n-        this.executorType = executorType;\n-    }\n-\n-    /**\n-     * @since 1.2.0\n-     */\n-    public Properties getConfigurationProperties() {\n-        return configurationProperties;\n-    }\n+    private String typeEnumsPackage;\n \n     /**\n-     * @since 1.2.0\n+     * TODO \u5168\u5c40\u914d\u7f6e\n      */\n-    public void setConfigurationProperties(Properties configurationProperties) {\n-        this.configurationProperties = configurationProperties;\n-    }\n-\n-    public MybatisConfiguration getConfiguration() {\n-        return configuration;\n-    }\n-\n-    public void setConfiguration(MybatisConfiguration configuration) {\n-        this.configuration = configuration;\n-    }\n-\n-    public GlobalConfig getGlobalConfig() {\n-        return globalConfig;\n-    }\n+    @NestedConfigurationProperty\n+    private GlobalConfig globalConfig = GlobalConfigUtils.defaults();\n \n-    public void setGlobalConfig(GlobalConfig globalConfig) {\n-        this.globalConfig = globalConfig;\n-    }\n \n     public Resource[] resolveMapperLocations() {\n         return Stream.of(Optional.ofNullable(this.mapperLocations).orElse(new String[0]))",
      "parent_sha": "cf4be7a4558b7dcaf047fdf5243bbe7b98bc55b2"
    }
  },
  {
    "oid": "39bef17bc9afaeb2107a78e489b07339d7efef96",
    "message": "\u5206\u9875sql",
    "date": "2017-02-09T07:02:56Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/39bef17bc9afaeb2107a78e489b07339d7efef96",
    "details": {
      "sha": "d292d2850776e3700fc966462fdfff590efb83c0",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/SqlLogInterceptor.java",
      "status": "modified",
      "additions": 42,
      "deletions": 6,
      "changes": 48,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/39bef17bc9afaeb2107a78e489b07339d7efef96/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FSqlLogInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/39bef17bc9afaeb2107a78e489b07339d7efef96/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FSqlLogInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FSqlLogInterceptor.java?ref=39bef17bc9afaeb2107a78e489b07339d7efef96",
      "patch": "@@ -1,6 +1,11 @@\n package com.baomidou.mybatisplus.plugins;\n \n \n+import com.baomidou.mybatisplus.entity.CountOptimize;\n+import com.baomidou.mybatisplus.entity.GlobalConfiguration;\n+import com.baomidou.mybatisplus.plugins.pagination.DialectFactory;\n+import com.baomidou.mybatisplus.plugins.pagination.Pagination;\n+import com.baomidou.mybatisplus.toolkit.SqlUtils;\n import org.apache.ibatis.executor.Executor;\n import org.apache.ibatis.logging.Log;\n import org.apache.ibatis.logging.LogFactory;\n@@ -30,20 +35,43 @@ public class SqlLogInterceptor implements Interceptor {\n \n     private static final Log logger = LogFactory.getLog(SqlLogInterceptor.class);\n \n+    private String optimizeType = \"default\";\n+\n     private Properties properties;\n \n     @Override\n     public Object intercept(Invocation invocation) throws Throwable {\n         MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[0];\n-        Object parameter = null;\n-        if (invocation.getArgs().length > 1) {\n-            parameter = invocation.getArgs()[1];\n+        Object parameter = invocation.getArgs()[1];;\n+        RowBounds rowBounds = null;\n+        Pagination pagination = null;\n+        boolean isPageSql = false;\n+        if(invocation.getMethod().getName().equals(\"query\")){\n+            rowBounds = (RowBounds) invocation.getArgs()[2];\n+            if(rowBounds instanceof Pagination){\n+                isPageSql = true;\n+                Pagination page = (Pagination) rowBounds;\n+                pagination = new Pagination(page.getCurrent(),page.getLimit());\n+            }\n         }\n         BoundSql boundSql = mappedStatement.getBoundSql(parameter);\n         Configuration configuration = mappedStatement.getConfiguration();\n-        Object returnValue;\n-        returnValue = invocation.proceed();\n-        String sql = getSql(configuration, boundSql);\n+        Object returnValue = invocation.proceed();\n+        String sql;\n+        if(isPageSql){\n+            Pagination page = (Pagination) rowBounds;\n+            boolean orderBy = true;\n+            String dbType = GlobalConfiguration.getDbType(configuration).getDb();\n+            if (page.isSearchCount()) {\n+                CountOptimize countOptimize = SqlUtils.getCountOptimize(boundSql.getSql(), optimizeType, dbType,\n+                        page.isOptimizeCount());\n+                orderBy = countOptimize.isOrderBy();\n+            }\n+            String buildSql = SqlUtils.concatOrderBy(boundSql.getSql(), page, orderBy);\n+            sql = DialectFactory.buildPaginationSql(pagination, buildSql, dbType, null).replaceAll(\"[\\\\s]+\", \" \");;\n+        }else {\n+            sql = getSql(configuration, boundSql);\n+        }\n         if(logger.isDebugEnabled()){\n             logger.debug(\"\\n\\n Run SQL: \"+sql+\"\\n\");\n         }\n@@ -101,4 +129,12 @@ public Object plugin(Object target) {\n     public void setProperties(Properties properties) {\n         this.properties = properties;\n     }\n+\n+    public String getOptimizeType() {\n+        return optimizeType;\n+    }\n+\n+    public void setOptimizeType(String optimizeType) {\n+        this.optimizeType = optimizeType;\n+    }\n }",
      "parent_sha": "180b257f8e1798ebdee126728fa6cb7c3e53e387"
    }
  },
  {
    "oid": "a23e88e5933ae485e00c1b9d69db4981216cae11",
    "message": "\u4f18\u5316\u6ce8\u5165\u65b9\u6cd5",
    "date": "2019-04-02T06:52:02Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/a23e88e5933ae485e00c1b9d69db4981216cae11",
    "details": {
      "sha": "8a53c31a9bb4817166c61e3d47a238ddf84fb6f9",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/AbstractSqlInjector.java",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/a23e88e5933ae485e00c1b9d69db4981216cae11/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2FAbstractSqlInjector.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/a23e88e5933ae485e00c1b9d69db4981216cae11/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2FAbstractSqlInjector.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2FAbstractSqlInjector.java?ref=a23e88e5933ae485e00c1b9d69db4981216cae11",
      "patch": "@@ -15,25 +15,25 @@\n  */\n package com.baomidou.mybatisplus.core.injector;\n \n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.lang.reflect.TypeVariable;\n-import java.lang.reflect.WildcardType;\n-import java.util.List;\n-import java.util.Set;\n-\n-import org.apache.ibatis.builder.MapperBuilderAssistant;\n-import org.apache.ibatis.logging.Log;\n-import org.apache.ibatis.logging.LogFactory;\n-import org.apache.ibatis.session.Configuration;\n-\n import com.baomidou.mybatisplus.core.metadata.TableInfo;\n import com.baomidou.mybatisplus.core.parser.SqlParserHelper;\n import com.baomidou.mybatisplus.core.toolkit.ArrayUtils;\n import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\n import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;\n import com.baomidou.mybatisplus.core.toolkit.TableInfoHelper;\n \n+import org.apache.ibatis.builder.MapperBuilderAssistant;\n+import org.apache.ibatis.logging.Log;\n+import org.apache.ibatis.logging.LogFactory;\n+import org.apache.ibatis.session.Configuration;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n+import java.lang.reflect.WildcardType;\n+import java.util.List;\n+import java.util.Set;\n+\n \n /**\n  * SQL \u81ea\u52a8\u6ce8\u5165\u5668\n@@ -47,16 +47,18 @@ public abstract class AbstractSqlInjector implements ISqlInjector {\n \n     @Override\n     public void inspectInject(MapperBuilderAssistant builderAssistant, Class<?> mapperClass) {\n-        List<AbstractMethod> methodList = this.getMethodList(builderAssistant, mapperClass);\n-        if (CollectionUtils.isNotEmpty(methodList)) {\n+        Class<?> modelClass = extractModelClass(mapperClass);\n+        if (modelClass != null) {\n             String className = mapperClass.toString();\n             Set<String> mapperRegistryCache = GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());\n             if (!mapperRegistryCache.contains(className)) {\n-                // \u5faa\u73af\u6ce8\u5165\u81ea\u5b9a\u4e49\u65b9\u6cd5\n-                Class<?> modelClass = extractModelClass(mapperClass);\n-                if (modelClass != null) {\n+                List<AbstractMethod> methodList = this.getMethodList(builderAssistant, mapperClass);\n+                if (CollectionUtils.isNotEmpty(methodList)) {\n                     TableInfo tableInfo = TableInfoHelper.initTableInfo(builderAssistant, modelClass);\n+                    // \u5faa\u73af\u6ce8\u5165\u81ea\u5b9a\u4e49\u65b9\u6cd5\n                     methodList.forEach(m -> m.inject(builderAssistant, mapperClass, modelClass, tableInfo));\n+                } else {\n+                    logger.debug(mapperClass.toString() + \", No effective injection method was found.\");\n                 }\n                 mapperRegistryCache.add(className);\n                 /*\n@@ -66,8 +68,6 @@ public void inspectInject(MapperBuilderAssistant builderAssistant, Class<?> mapp\n                     SqlParserHelper.initSqlParserInfoCache(mapperClass);\n                 }\n             }\n-        } else {\n-            logger.debug(mapperClass.toString() + \", No effective injection method was found.\");\n         }\n     }\n ",
      "parent_sha": "7f8d8b5f5061ad2bd7d4383f6d4cf743b3a6f1c0"
    }
  },
  {
    "oid": "b69bf56807692da9b27b9fd502cb18aabd444f3c",
    "message": "\u5904\u7406Condition.EMPTY\u7c7b\u578b\u5f3a\u8f6cWrapper\u51fa\u9519\u7684\u95ee\u9898,\u4f7f\u7528Condition.empty()\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898",
    "date": "2018-01-09T07:19:11Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/b69bf56807692da9b27b9fd502cb18aabd444f3c",
    "details": {
      "sha": "d82756c12b8255af0e3bd355ca0bc98c6603cc36",
      "filename": "mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/Condition.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/b69bf56807692da9b27b9fd502cb18aabd444f3c/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FCondition.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/b69bf56807692da9b27b9fd502cb18aabd444f3c/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FCondition.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FCondition.java?ref=b69bf56807692da9b27b9fd502cb18aabd444f3c",
      "patch": "@@ -31,8 +31,12 @@ public class Condition extends Wrapper {\n     /**\n      * \u6784\u5efa\u4e00\u4e2aEmpty\u6761\u4ef6\u6784\u9020 \u907f\u514d\u4f20\u9012\u53c2\u6570\u4f7f\u7528null\n      */\n-    public static final Condition EMPTY = Condition.create();\n-\n+    public static final Wrapper EMPTY = new Wrapper() {\n+        @Override\n+        public String getSqlSegment() {\n+            return null;\n+        }\n+    };\n \n     /**\n      * \u83b7\u53d6\u5b9e\u4f8b\n@@ -62,4 +66,9 @@ public String getSqlSegment() {\n         return isWhere != null ? (isWhere ? sqlWhere : sqlWhere.replaceFirst(\"WHERE\", AND_OR)) : sqlWhere.replaceFirst(\"WHERE\", AND_OR);\n \n     }\n+\n+    public static <T> Wrapper<T> empty() {\n+        return (Wrapper<T>) EMPTY;\n+    }\n+\n }",
      "parent_sha": "3bce346bc8e4eb4dcdcc0ec6a1f0e6c80cbd6f83"
    }
  },
  {
    "oid": "1ddfdfe5df7d4f8b6b1054014d866610a07f3559",
    "message": "\u5ffd\u7565\u4fee\u6539",
    "date": "2017-12-09T07:33:31Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/1ddfdfe5df7d4f8b6b1054014d866610a07f3559",
    "details": {
      "sha": "9c9781a65ae61bed5337000d4fb5c9f3657c1a7f",
      "filename": "mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/plugins/pagination/Pagination.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/1ddfdfe5df7d4f8b6b1054014d866610a07f3559/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2Fpagination%2FPagination.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/1ddfdfe5df7d4f8b6b1054014d866610a07f3559/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2Fpagination%2FPagination.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2Fpagination%2FPagination.java?ref=1ddfdfe5df7d4f8b6b1054014d866610a07f3559",
      "patch": "@@ -55,7 +55,7 @@ public class Pagination extends RowBounds implements Serializable {\n     /**\n      * \u6bcf\u9875\u663e\u793a\u6761\u6570\uff0c\u9ed8\u8ba4 10\n      */\n-    private transient int size = 10;\n+    private int size = 10;\n \n     /**\n      * \u603b\u9875\u6570\n@@ -93,7 +93,7 @@ public class Pagination extends RowBounds implements Serializable {\n     /**\n      * \u662f\u5426\u4e3a\u5347\u5e8f ASC\uff08 \u9ed8\u8ba4\uff1a true \uff09\n      */\n-    private transient boolean isAsc = true;\n+    private transient boolean asc = true;\n \n     public Pagination() {\n         super();\n@@ -212,11 +212,11 @@ public Pagination setOpenSort(boolean openSort) {\n     }\n \n     public boolean isAsc() {\n-        return isAsc;\n+        return asc;\n     }\n \n-    public Pagination setAsc(boolean isAsc) {\n-        this.isAsc = isAsc;\n+    public Pagination setAsc(boolean asc) {\n+        this.asc = asc;\n         return this;\n     }\n ",
      "parent_sha": "af1c35d808e0424b671d14e09c50c0188af005de"
    }
  },
  {
    "oid": "fa4293b13f121b784d37cacd110f7ef7c2f2325d",
    "message": "\u53bb\u6389\u8f6c\u4e49 oracle",
    "date": "2017-09-16T06:42:42Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/fa4293b13f121b784d37cacd110f7ef7c2f2325d",
    "details": {
      "sha": "eb806ae956db0e409f34ba9577b89d96adc6c1f6",
      "filename": "src/main/java/com/baomidou/mybatisplus/enums/DBType.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/fa4293b13f121b784d37cacd110f7ef7c2f2325d/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fenums%2FDBType.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/fa4293b13f121b784d37cacd110f7ef7c2f2325d/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fenums%2FDBType.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fenums%2FDBType.java?ref=fa4293b13f121b784d37cacd110f7ef7c2f2325d",
      "patch": "@@ -33,7 +33,7 @@ public enum DBType {\n     /**\n      * ORACLE\n      */\n-    ORACLE(\"oracle\", \"\\\"%s\\\"\", \"Oracle\u6570\u636e\u5e93\"),\n+    ORACLE(\"oracle\", null, \"Oracle\u6570\u636e\u5e93\"),\n     /**\n      * DB2\n      */",
      "parent_sha": "509396569470c0dc9e373cc4059b899b5b9fb068"
    }
  },
  {
    "oid": "f14c2b4fbe2e009ac5f8beee890539cfea44fd82",
    "message": "update mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/TableNameParser.java.",
    "date": "2021-06-17T05:42:22Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/f14c2b4fbe2e009ac5f8beee890539cfea44fd82",
    "details": {
      "sha": "85fc5b74f586bf821b5e313eae9e32358b34609c",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/TableNameParser.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/f14c2b4fbe2e009ac5f8beee890539cfea44fd82/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FTableNameParser.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/f14c2b4fbe2e009ac5f8beee890539cfea44fd82/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FTableNameParser.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FTableNameParser.java?ref=f14c2b4fbe2e009ac5f8beee890539cfea44fd82",
      "patch": "@@ -151,10 +151,10 @@ protected List<SqlToken> fetchAllTokens(String sql) {\n      * @return \u5224\u65ad\u662f\u4e0d\u662f Oracle \u7279\u6b8a\u7684\u5220\u9664\u624b\u6cd5\n      */\n     private static boolean isOracleSpecialDelete(String current, List<SqlToken> tokens, int index) {\n-        if (TOKEN_DELETE.equals(current)) {\n+        if (TOKEN_DELETE.equalsIgnoreCase(current)) {\n             if (hasMoreTokens(tokens, index++)) {\n                 String next = tokens.get(index).getValue();\n-                return !KEYWORD_FROM.equals(next) && !TOKEN_ALL.equals(next);\n+                return !KEYWORD_FROM.equalsIgnoreCase(next) && !TOKEN_ALL.equals(next);\n             }\n         }\n         return false;",
      "parent_sha": "883dd0d3dc6ddaf8ec64522163d6824c0a87c347"
    }
  },
  {
    "oid": "b05e62e5f9c9b7ebd21ca80f9991ca745d0bacc4",
    "message": "doc",
    "date": "2020-06-18T08:26:28Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/b05e62e5f9c9b7ebd21ca80f9991ca745d0bacc4",
    "details": {
      "sha": "4092239aeb142c9ba273f47a3a632c8017bfe032",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/MybatisPlusInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/b05e62e5f9c9b7ebd21ca80f9991ca745d0bacc4/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2FMybatisPlusInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/b05e62e5f9c9b7ebd21ca80f9991ca745d0bacc4/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2FMybatisPlusInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2FMybatisPlusInterceptor.java?ref=b05e62e5f9c9b7ebd21ca80f9991ca745d0bacc4",
      "patch": "@@ -41,7 +41,7 @@ public Object intercept(Invocation invocation) throws Throwable {\n         if (args.length == 4) {\n             boundSql = ms.getBoundSql(parameter);\n         } else {\n-            // \u51e0\u4e4e\u4e0d\u53ef\u80fd\u8d70\u8fdb\u8fd9\u91cc\u9762\n+            // \u51e0\u4e4e\u4e0d\u53ef\u80fd\u8d70\u8fdb\u8fd9\u91cc\u9762,\u9664\u975e\u4f7f\u7528Executor\u7684\u4ee3\u7406\u5bf9\u8c61\u8c03\u7528query[args[6]]\n             boundSql = (BoundSql) args[5];\n         }\n         for (BeforeQuery query : beforeQueries) {",
      "parent_sha": "28fd705f6a826ac4695b085410c9236169ccbcd3"
    }
  },
  {
    "oid": "68d7dbc242888a49a3509688c57810509b6baf28",
    "message": "fix github/issues/2500",
    "date": "2020-05-22T09:28:38Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/68d7dbc242888a49a3509688c57810509b6baf28",
    "details": {
      "sha": "26d3901e6aba7b7bb7e076eb6904ec97bf59909a",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/api/Assert.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/68d7dbc242888a49a3509688c57810509b6baf28/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fapi%2FAssert.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/68d7dbc242888a49a3509688c57810509b6baf28/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fapi%2FAssert.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fapi%2FAssert.java?ref=68d7dbc242888a49a3509688c57810509b6baf28",
      "patch": "@@ -179,7 +179,7 @@ public static void noNullElements(Object[] array, IErrorCode errorCode) {\n     }\n \n     public static void notEmpty(Collection<?> collection, IErrorCode errorCode) {\n-        if (CollectionUtils.isNotEmpty(collection)) {\n+        if (CollectionUtils.isEmpty(collection)) {\n             fail(errorCode);\n         }\n     }",
      "parent_sha": "e0c1aa4de121e160c1a1ebe9e5464495015037ae"
    }
  },
  {
    "oid": "611aa5ca712f9bd942ab77cea4fdf075fe4653fb",
    "message": "\u6ce8\u91ca\u4fee\u590d.",
    "date": "2020-06-18T08:13:03Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/611aa5ca712f9bd942ab77cea4fdf075fe4653fb",
    "details": {
      "sha": "8b058b71eb7e487cdbd7e54f01496bb551219c4d",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/IDbQuery.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/611aa5ca712f9bd942ab77cea4fdf075fe4653fb/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FIDbQuery.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/611aa5ca712f9bd942ab77cea4fdf075fe4653fb/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FIDbQuery.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FIDbQuery.java?ref=611aa5ca712f9bd942ab77cea4fdf075fe4653fb",
      "patch": "@@ -88,7 +88,7 @@ default DbType dbType() {\n \n \n     /**\n-     * \u5224\u65ad\u4e3b\u952e\u662f\u5426\u4e3aidentity\uff0c\u76ee\u524d\u4ec5\u5bf9mysql\u8fdb\u884c\u68c0\u67e5\n+     * \u5224\u65ad\u4e3b\u952e\u662f\u5426\u4e3aidentity\n      *\n      * @param results ResultSet\n      * @return \u4e3b\u952e\u662f\u5426\u4e3aidentity",
      "parent_sha": "d0c8e2abe98f000eef89235976ff3f6cd66362ec"
    }
  },
  {
    "oid": "781e7082816aebcaed71d50d8e0320ac32d4e911",
    "message": "test",
    "date": "2020-01-02T09:05:55Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/781e7082816aebcaed71d50d8e0320ac32d4e911",
    "details": {
      "sha": "8230370e07b29eaa63849327cac2910d760589a0",
      "filename": "mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/test/WrapperTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/781e7082816aebcaed71d50d8e0320ac32d4e911/mybatis-plus-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftest%2FWrapperTest.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/781e7082816aebcaed71d50d8e0320ac32d4e911/mybatis-plus-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftest%2FWrapperTest.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftest%2FWrapperTest.java?ref=781e7082816aebcaed71d50d8e0320ac32d4e911",
      "patch": "@@ -122,7 +122,7 @@ void testQueryWrapper() {\n \n         logSqlSegment(\"\u5d4c\u5957,\u591a\u5c42\u5d4c\u5957\", new QueryWrapper<User>()\n                 .and(i -> i.eq(\"id\", 1).and(j -> j.eq(\"id\", 2))),\n-            \"((id = ?) AND (id = ?))\");\n+            \"((id = ? AND (id = ?)))\");\n \n         logSqlSegment(\"\u5d4c\u5957,\u7b2c\u4e00\u4e2a\u5957\u5916\u7684 or \u81ea\u52a8\u6d88\u9664\", new QueryWrapper<User>()\n                 .or(i -> i.eq(\"id\", 1)).eq(\"id\", 1),",
      "parent_sha": "543f54aeb51495f276742b779de751f0752edff0"
    }
  },
  {
    "oid": "266c74a98087f9e7d14b1834f237b3a48af17a20",
    "message": "\u4f18\u5316\u65b9\u6cd5\u5165\u53c2\u6cdb\u578b\uff0c\u652f\u6301\u66f4\u591a\u7c7b\u578b\n\u66f4\u65b0\uff1a\r\n1. mapToBean\uff1a\u65b9\u6cd5\u5165\u53c2\u539f\u4e3aMap<String, Object>\uff0c\u53ea\u652f\u6301\u4e00\u79cd\u7c7b\u578b\uff0c\u800c\u50cf\u5165\u53c2\u4e3aMap<String, String>\u5c31\u4e0d\u652f\u6301\uff0c\u6539\u7528\u6cdb\u578b\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\r\n2. mapsToBeans\uff1a\u540c\u4e0a\r\n3. \u6ce8\u91ca\u52d8\u8bef",
    "date": "2020-05-28T09:10:06Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/266c74a98087f9e7d14b1834f237b3a48af17a20",
    "details": {
      "sha": "e79f82ac73ee5fafebfb62365bf1f894099008a3",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/BeanUtils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/266c74a98087f9e7d14b1834f237b3a48af17a20/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FBeanUtils.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/266c74a98087f9e7d14b1834f237b3a48af17a20/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FBeanUtils.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FBeanUtils.java?ref=266c74a98087f9e7d14b1834f237b3a48af17a20",
      "patch": "@@ -47,13 +47,13 @@ public static Map<String, Object> beanToMap(Object bean) {\n     }\n \n     /**\n-     * map \u88c5\u6362\u4e3a java bean \u5bf9\u8c61\n+     * map \u8f6c\u6362\u4e3a java bean \u5bf9\u8c61\n      *\n      * @param map   \u8f6c\u6362 MAP\n      * @param clazz \u5bf9\u8c61 Class\n      * @return \u8fd4\u56de bean \u5bf9\u8c61\n      */\n-    public static <T> T mapToBean(Map<String, Object> map, Class<T> clazz) {\n+    public static <T> T mapToBean(Map<String, ?> map, Class<T> clazz) {\n         T bean = ClassUtils.newInstance(clazz);\n         BeanMap.create(bean).putAll(map);\n         return bean;\n@@ -79,7 +79,7 @@ public static <T> List<Map<String, Object>> beansToMaps(List<T> beans) {\n      * @param clazz \u5bf9\u8c61 Class\n      * @return \u8fd4\u56de\u8f6c\u6362\u540e\u7684 bean \u96c6\u5408\n      */\n-    public static <T> List<T> mapsToBeans(List<Map<String, Object>> maps, Class<T> clazz) {\n+    public static <T> List<T> mapsToBeans(List<? extends Map<String, ?>> maps, Class<T> clazz) {\n         if (CollectionUtils.isEmpty(maps)) {\n             return Collections.emptyList();\n         }",
      "parent_sha": "54448281d8988af5d5cd045a2d1803298c8eda16"
    }
  },
  {
    "oid": "ccaeb221729d9e7bb95db73aea2732eca57dbdf7",
    "message": "\u4fee\u590dEntityWrapper\u7ee7\u627f\u5173\u7cfbbug",
    "date": "2017-05-23T02:46:43Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/ccaeb221729d9e7bb95db73aea2732eca57dbdf7",
    "details": {
      "sha": "01b3a8e7ca83b8283c98ef30fb7f6a247bdc3fd4",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/ReflectionKit.java",
      "status": "modified",
      "additions": 36,
      "deletions": 9,
      "changes": 45,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/ccaeb221729d9e7bb95db73aea2732eca57dbdf7/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftoolkit%2FReflectionKit.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/ccaeb221729d9e7bb95db73aea2732eca57dbdf7/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftoolkit%2FReflectionKit.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftoolkit%2FReflectionKit.java?ref=ccaeb221729d9e7bb95db73aea2732eca57dbdf7",
      "patch": "@@ -15,15 +15,26 @@\n  */\n package com.baomidou.mybatisplus.toolkit;\n \n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.ibatis.logging.Log;\n+import org.apache.ibatis.logging.LogFactory;\n+\n import com.baomidou.mybatisplus.entity.TableFieldInfo;\n import com.baomidou.mybatisplus.entity.TableInfo;\n import com.baomidou.mybatisplus.enums.FieldStrategy;\n import com.baomidou.mybatisplus.exceptions.MybatisPlusException;\n-import org.apache.ibatis.logging.Log;\n-import org.apache.ibatis.logging.LogFactory;\n-\n-import java.lang.reflect.*;\n-import java.util.*;\n \n \n /**\n@@ -106,10 +117,7 @@ public static boolean checkFieldValueNotNull(Object bean) {\n             return false;\n         }\n         Class<?> cls = bean.getClass();\n-        TableInfo tableInfo = TableInfoHelper.getTableInfo(cls);\n-        if (null == tableInfo) {\n-            throw new MybatisPlusException(String.format(\"Error: Could Not find %s in TableInfo Cache. \", cls.getSimpleName()));\n-        }\n+        TableInfo tableInfo = getTableInfoAsSuperClass(cls);\n         boolean result = false;\n         List<TableFieldInfo> fieldList = tableInfo.getFieldList();\n         for (TableFieldInfo tableFieldInfo : fieldList) {\n@@ -231,4 +239,23 @@ public static List<Field> excludeOverrideSuperField(List<Field> fieldList, List<\n         return fieldList;\n     }\n \n+    /**\n+     * \u9012\u5f52\u81ea\u8eab\u7684class,\u83b7\u53d6TableInfo\n+     *\n+     * @param cls\n+     * @return TableInfo\n+     * @throws MybatisPlusException\n+     */\n+    private static TableInfo getTableInfoAsSuperClass(Class<?> cls) {\n+        TableInfo tableInfo = TableInfoHelper.getTableInfo(cls);\n+        if (tableInfo == null) {\n+            if (Object.class.equals(cls)) {\n+                throw new MybatisPlusException(String.format(\"Error: Could Not find %s in TableInfo Cache. \", cls.getSimpleName()));\n+            } else {\n+                tableInfo = getTableInfoAsSuperClass(cls.getSuperclass());\n+            }\n+        }\n+        return tableInfo;\n+    }\n+\n }",
      "parent_sha": "64bd9867c56f2721564a6cddd8460527d37916d1"
    }
  },
  {
    "oid": "13b0028bb297b74a41cc6e82c5548e5cddfab053",
    "message": "[\u4f18\u5316] \u683c\u5f0f\u5316\u4ee3\u7801",
    "date": "2019-01-22T07:30:56Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/13b0028bb297b74a41cc6e82c5548e5cddfab053",
    "details": {
      "sha": "b5439f7bcbf313f0d6dd21e07cde19bc36f1e6b9",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/spring/MybatisSqlSessionFactoryBean.java",
      "status": "modified",
      "additions": 339,
      "deletions": 361,
      "changes": 700,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/13b0028bb297b74a41cc6e82c5548e5cddfab053/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspring%2FMybatisSqlSessionFactoryBean.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/13b0028bb297b74a41cc6e82c5548e5cddfab053/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspring%2FMybatisSqlSessionFactoryBean.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fspring%2FMybatisSqlSessionFactoryBean.java?ref=13b0028bb297b74a41cc6e82c5548e5cddfab053",
      "patch": "@@ -21,18 +21,13 @@\n import com.baomidou.mybatisplus.core.MybatisXMLConfigBuilder;\n import com.baomidou.mybatisplus.core.config.GlobalConfig;\n import com.baomidou.mybatisplus.core.enums.IEnum;\n-import com.baomidou.mybatisplus.core.toolkit.ArrayUtils;\n-import com.baomidou.mybatisplus.core.toolkit.Assert;\n-import com.baomidou.mybatisplus.core.toolkit.ExceptionUtils;\n-import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;\n-import com.baomidou.mybatisplus.core.toolkit.StringPool;\n+import com.baomidou.mybatisplus.core.toolkit.*;\n import com.baomidou.mybatisplus.extension.handlers.EnumAnnotationTypeHandler;\n import com.baomidou.mybatisplus.extension.handlers.EnumTypeHandler;\n import com.baomidou.mybatisplus.extension.toolkit.AopUtils;\n import com.baomidou.mybatisplus.extension.toolkit.JdbcUtils;\n import com.baomidou.mybatisplus.extension.toolkit.PackageHelper;\n import com.baomidou.mybatisplus.extension.toolkit.SqlHelper;\n-\n import org.apache.ibatis.builder.xml.XMLMapperBuilder;\n import org.apache.ibatis.cache.Cache;\n import org.apache.ibatis.executor.ErrorContext;\n@@ -63,21 +58,14 @@\n import org.springframework.core.io.Resource;\n import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;\n \n+import javax.sql.DataSource;\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.sql.Connection;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Properties;\n-import java.util.Set;\n+import java.util.*;\n import java.util.stream.Stream;\n \n-import javax.sql.DataSource;\n-\n import static org.springframework.util.Assert.notNull;\n import static org.springframework.util.Assert.state;\n import static org.springframework.util.ObjectUtils.isEmpty;\n@@ -154,173 +142,167 @@ public void setGlobalConfig(GlobalConfig globalConfig) {\n     /**\n      * Sets the ObjectFactory.\n      *\n-     * @since 1.1.2\n      * @param objectFactory a custom ObjectFactory\n+     * @since 1.1.2\n      */\n     public void setObjectFactory(ObjectFactory objectFactory) {\n         this.objectFactory = objectFactory;\n     }\n \n-  /**\n-   * Sets the ObjectWrapperFactory.\n-   *\n-   * @since 1.1.2\n-   * @param objectWrapperFactory a specified ObjectWrapperFactory\n-   */\n-  public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n-    this.objectWrapperFactory = objectWrapperFactory;\n-  }\n-\n-  /**\n-   * Gets the DatabaseIdProvider\n-   *\n-   * @since 1.1.0\n-   * @return a specified DatabaseIdProvider\n-   */\n-  public DatabaseIdProvider getDatabaseIdProvider() {\n-    return databaseIdProvider;\n-  }\n-\n-  /**\n-   * Sets the DatabaseIdProvider.\n-   * As of version 1.2.2 this variable is not initialized by default.\n-   *\n-   * @since 1.1.0\n-   * @param databaseIdProvider a DatabaseIdProvider\n-   */\n-  public void setDatabaseIdProvider(DatabaseIdProvider databaseIdProvider) {\n-    this.databaseIdProvider = databaseIdProvider;\n-  }\n-\n-  /**\n-   * Gets the VFS.\n-   * @return a specified VFS\n-   */\n-  public Class<? extends VFS> getVfs() {\n-    return this.vfs;\n-  }\n-\n-  /**\n-   * Sets the VFS.\n-   * @param vfs a VFS\n-   */\n-  public void setVfs(Class<? extends VFS> vfs) {\n-    this.vfs = vfs;\n-  }\n-\n-  /**\n-   * Gets the Cache.\n-   * @return a specified Cache\n-   */\n-  public Cache getCache() {\n-    return this.cache;\n-  }\n-\n-  /**\n-   * Sets the Cache.\n-   * @param cache a Cache\n-   */\n-  public void setCache(Cache cache) {\n-    this.cache = cache;\n-  }\n-\n-  /**\n-   * Mybatis plugin list.\n-   *\n-   * @since 1.0.1\n-   *\n-   * @param plugins list of plugins\n-   *\n-   */\n-  public void setPlugins(Interceptor[] plugins) {\n-    this.plugins = plugins;\n-  }\n-\n-  /**\n-   * Packages to search for type aliases.\n-   * \u652f\u6301 typeAliasesPackage \u591a\u9879\u6bcf\u9879\u90fd\u6709\u901a\u914d\u7b26 com.a.b.*.po, com.c.*.po ISSUE https://gitee.com/baomidou/mybatis-plus/issues/IKJ48\n-   * @since 1.0.1\n-   *\n-   * @param typeAliasesPackage package to scan for domain objects\n-   *\n-   */\n-  public void setTypeAliasesPackage(String typeAliasesPackage) {\n-    this.typeAliasesPackage = typeAliasesPackage;\n-  }\n+    /**\n+     * Sets the ObjectWrapperFactory.\n+     *\n+     * @param objectWrapperFactory a specified ObjectWrapperFactory\n+     * @since 1.1.2\n+     */\n+    public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n+        this.objectWrapperFactory = objectWrapperFactory;\n+    }\n+\n+    /**\n+     * Gets the DatabaseIdProvider\n+     *\n+     * @return a specified DatabaseIdProvider\n+     * @since 1.1.0\n+     */\n+    public DatabaseIdProvider getDatabaseIdProvider() {\n+        return databaseIdProvider;\n+    }\n+\n+    /**\n+     * Sets the DatabaseIdProvider.\n+     * As of version 1.2.2 this variable is not initialized by default.\n+     *\n+     * @param databaseIdProvider a DatabaseIdProvider\n+     * @since 1.1.0\n+     */\n+    public void setDatabaseIdProvider(DatabaseIdProvider databaseIdProvider) {\n+        this.databaseIdProvider = databaseIdProvider;\n+    }\n+\n+    /**\n+     * Gets the VFS.\n+     *\n+     * @return a specified VFS\n+     */\n+    public Class<? extends VFS> getVfs() {\n+        return this.vfs;\n+    }\n+\n+    /**\n+     * Sets the VFS.\n+     *\n+     * @param vfs a VFS\n+     */\n+    public void setVfs(Class<? extends VFS> vfs) {\n+        this.vfs = vfs;\n+    }\n+\n+    /**\n+     * Gets the Cache.\n+     *\n+     * @return a specified Cache\n+     */\n+    public Cache getCache() {\n+        return this.cache;\n+    }\n+\n+    /**\n+     * Sets the Cache.\n+     *\n+     * @param cache a Cache\n+     */\n+    public void setCache(Cache cache) {\n+        this.cache = cache;\n+    }\n+\n+    /**\n+     * Mybatis plugin list.\n+     *\n+     * @param plugins list of plugins\n+     * @since 1.0.1\n+     */\n+    public void setPlugins(Interceptor[] plugins) {\n+        this.plugins = plugins;\n+    }\n+\n+    /**\n+     * Packages to search for type aliases.\n+     * \u652f\u6301 typeAliasesPackage \u591a\u9879\u6bcf\u9879\u90fd\u6709\u901a\u914d\u7b26 com.a.b.*.po, com.c.*.po ISSUE https://gitee.com/baomidou/mybatis-plus/issues/IKJ48\n+     *\n+     * @param typeAliasesPackage package to scan for domain objects\n+     * @since 1.0.1\n+     */\n+    public void setTypeAliasesPackage(String typeAliasesPackage) {\n+        this.typeAliasesPackage = typeAliasesPackage;\n+    }\n \n     public void setTypeEnumsPackage(String typeEnumsPackage) {\n         this.typeEnumsPackage = typeEnumsPackage;\n     }\n \n-  /**\n-   * Super class which domain objects have to extend to have a type alias created.\n-   * No effect if there is no package to scan configured.\n-   *\n-   * @since 1.1.2\n-   *\n-   * @param typeAliasesSuperType super class for domain objects\n-   *\n-   */\n-  public void setTypeAliasesSuperType(Class<?> typeAliasesSuperType) {\n-    this.typeAliasesSuperType = typeAliasesSuperType;\n-  }\n-\n-  /**\n-   * Packages to search for type handlers.\n-   *\n-   * @since 1.0.1\n-   *\n-   * @param typeHandlersPackage package to scan for type handlers\n-   *\n-   */\n-  public void setTypeHandlersPackage(String typeHandlersPackage) {\n-    this.typeHandlersPackage = typeHandlersPackage;\n-  }\n-\n-  /**\n-   * Set type handlers. They must be annotated with {@code MappedTypes} and optionally with {@code MappedJdbcTypes}\n-   *\n-   * @since 1.0.1\n-   *\n-   * @param typeHandlers Type handler list\n-   */\n-  public void setTypeHandlers(TypeHandler<?>[] typeHandlers) {\n-    this.typeHandlers = typeHandlers;\n-  }\n-\n-  /**\n-   * List of type aliases to register. They can be annotated with {@code Alias}\n-   *\n-   * @since 1.0.1\n-   *\n-   * @param typeAliases Type aliases list\n-   */\n-  public void setTypeAliases(Class<?>[] typeAliases) {\n-    this.typeAliases = typeAliases;\n-  }\n-\n-  /**\n-   * If true, a final check is done on Configuration to assure that all mapped\n-   * statements are fully loaded and there is no one still pending to resolve\n-   * includes. Defaults to false.\n-   *\n-   * @since 1.0.1\n-   *\n-   * @param failFast enable failFast\n-   */\n-  public void setFailFast(boolean failFast) {\n-    this.failFast = failFast;\n-  }\n-\n-  /**\n-   * Set the location of the MyBatis {@code SqlSessionFactory} config file. A typical value is\n-   * \"WEB-INF/mybatis-configuration.xml\".\n-   *\n-   * @param configLocation a location the MyBatis config file\n-   */\n-  public void setConfigLocation(Resource configLocation) {\n-    this.configLocation = configLocation;\n-  }\n+    /**\n+     * Super class which domain objects have to extend to have a type alias created.\n+     * No effect if there is no package to scan configured.\n+     *\n+     * @param typeAliasesSuperType super class for domain objects\n+     * @since 1.1.2\n+     */\n+    public void setTypeAliasesSuperType(Class<?> typeAliasesSuperType) {\n+        this.typeAliasesSuperType = typeAliasesSuperType;\n+    }\n+\n+    /**\n+     * Packages to search for type handlers.\n+     *\n+     * @param typeHandlersPackage package to scan for type handlers\n+     * @since 1.0.1\n+     */\n+    public void setTypeHandlersPackage(String typeHandlersPackage) {\n+        this.typeHandlersPackage = typeHandlersPackage;\n+    }\n+\n+    /**\n+     * Set type handlers. They must be annotated with {@code MappedTypes} and optionally with {@code MappedJdbcTypes}\n+     *\n+     * @param typeHandlers Type handler list\n+     * @since 1.0.1\n+     */\n+    public void setTypeHandlers(TypeHandler<?>[] typeHandlers) {\n+        this.typeHandlers = typeHandlers;\n+    }\n+\n+    /**\n+     * List of type aliases to register. They can be annotated with {@code Alias}\n+     *\n+     * @param typeAliases Type aliases list\n+     * @since 1.0.1\n+     */\n+    public void setTypeAliases(Class<?>[] typeAliases) {\n+        this.typeAliases = typeAliases;\n+    }\n+\n+    /**\n+     * If true, a final check is done on Configuration to assure that all mapped\n+     * statements are fully loaded and there is no one still pending to resolve\n+     * includes. Defaults to false.\n+     *\n+     * @param failFast enable failFast\n+     * @since 1.0.1\n+     */\n+    public void setFailFast(boolean failFast) {\n+        this.failFast = failFast;\n+    }\n+\n+    /**\n+     * Set the location of the MyBatis {@code SqlSessionFactory} config file. A typical value is\n+     * \"WEB-INF/mybatis-configuration.xml\".\n+     *\n+     * @param configLocation a location the MyBatis config file\n+     */\n+    public void setConfigLocation(Resource configLocation) {\n+        this.configLocation = configLocation;\n+    }\n \n     /**\n      * Set a customized MyBatis configuration.\n@@ -332,114 +314,112 @@ public void setConfiguration(MybatisConfiguration configuration) {\n         this.configuration = configuration;\n     }\n \n-  /**\n-   * Set locations of MyBatis mapper files that are going to be merged into the {@code SqlSessionFactory}\n-   * configuration at runtime.\n-   *\n-   * This is an alternative to specifying \"&lt;sqlmapper&gt;\" entries in an MyBatis config file.\n-   * This property being based on Spring's resource abstraction also allows for specifying\n-   * resource patterns here: e.g. \"classpath*:sqlmap/*-mapper.xml\".\n-   *\n-   * @param mapperLocations location of MyBatis mapper files\n-   */\n-  public void setMapperLocations(Resource[] mapperLocations) {\n-    this.mapperLocations = mapperLocations;\n-  }\n-\n-  /**\n-   * Set optional properties to be passed into the SqlSession configuration, as alternative to a\n-   * {@code &lt;properties&gt;} tag in the configuration xml file. This will be used to\n-   * resolve placeholders in the config file.\n-   *\n-   * @param  sqlSessionFactoryProperties optional properties for the SqlSessionFactory\n-   */\n-  public void setConfigurationProperties(Properties sqlSessionFactoryProperties) {\n-    this.configurationProperties = sqlSessionFactoryProperties;\n-  }\n-\n-  /**\n-   * Set the JDBC {@code DataSource} that this instance should manage transactions for. The {@code DataSource}\n-   * should match the one used by the {@code SqlSessionFactory}: for example, you could specify the same\n-   * JNDI DataSource for both.\n-   *\n-   * A transactional JDBC {@code Connection} for this {@code DataSource} will be provided to application code\n-   * accessing this {@code DataSource} directly via {@code DataSourceUtils} or {@code DataSourceTransactionManager}.\n-   *\n-   * The {@code DataSource} specified here should be the target {@code DataSource} to manage transactions for, not\n-   * a {@code TransactionAwareDataSourceProxy}. Only data access code may work with\n-   * {@code TransactionAwareDataSourceProxy}, while the transaction manager needs to work on the\n-   * underlying target {@code DataSource}. If there's nevertheless a {@code TransactionAwareDataSourceProxy}\n-   * passed in, it will be unwrapped to extract its target {@code DataSource}.\n-   *\n-   * @param dataSource a JDBC {@code DataSource}\n-   *\n-   */\n-  public void setDataSource(DataSource dataSource) {\n-    if (dataSource instanceof TransactionAwareDataSourceProxy) {\n-      // If we got a TransactionAwareDataSourceProxy, we need to perform\n-      // transactions for its underlying target DataSource, else data\n-      // access code won't see properly exposed transactions (i.e.\n-      // transactions for the target DataSource).\n-      this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();\n-    } else {\n-      this.dataSource = dataSource;\n-    }\n-  }\n-\n-  /**\n-   * Sets the {@code SqlSessionFactoryBuilder} to use when creating the {@code SqlSessionFactory}.\n-   *\n-   * This is mainly meant for testing so that mock SqlSessionFactory classes can be injected. By\n-   * default, {@code SqlSessionFactoryBuilder} creates {@code DefaultSqlSessionFactory} instances.\n-   *\n-   * @param sqlSessionFactoryBuilder a SqlSessionFactoryBuilder\n-   *\n-   */\n-  public void setSqlSessionFactoryBuilder(SqlSessionFactoryBuilder sqlSessionFactoryBuilder) {\n-    this.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;\n-  }\n-\n-  /**\n-   * Set the MyBatis TransactionFactory to use. Default is {@code SpringManagedTransactionFactory}\n-   *\n-   * The default {@code SpringManagedTransactionFactory} should be appropriate for all cases:\n-   * be it Spring transaction management, EJB CMT or plain JTA. If there is no active transaction,\n-   * SqlSession operations will execute SQL statements non-transactionally.\n-   *\n-   * <b>It is strongly recommended to use the default {@code TransactionFactory}.</b> If not used, any\n-   * attempt at getting an SqlSession through Spring's MyBatis framework will throw an exception if\n-   * a transaction is active.\n-   *\n-   * @see SpringManagedTransactionFactory\n-   * @param transactionFactory the MyBatis TransactionFactory\n-   */\n-  public void setTransactionFactory(TransactionFactory transactionFactory) {\n-    this.transactionFactory = transactionFactory;\n-  }\n-\n-  /**\n-   * <b>NOTE:</b> This class <em>overrides</em> any {@code Environment} you have set in the MyBatis\n-   * config file. This is used only as a placeholder name. The default value is\n-   * {@code SqlSessionFactoryBean.class.getSimpleName()}.\n-   *\n-   * @param environment the environment name\n-   */\n-  public void setEnvironment(String environment) {\n-    this.environment = environment;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public void afterPropertiesSet() throws Exception {\n-    notNull(dataSource, \"Property 'dataSource' is required\");\n-    notNull(sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n-    state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null),\n-              \"Property 'configuration' and 'configLocation' can not specified with together\");\n-\n-    this.sqlSessionFactory = buildSqlSessionFactory();\n-  }\n+    /**\n+     * Set locations of MyBatis mapper files that are going to be merged into the {@code SqlSessionFactory}\n+     * configuration at runtime.\n+     * <p>\n+     * This is an alternative to specifying \"&lt;sqlmapper&gt;\" entries in an MyBatis config file.\n+     * This property being based on Spring's resource abstraction also allows for specifying\n+     * resource patterns here: e.g. \"classpath*:sqlmap/*-mapper.xml\".\n+     *\n+     * @param mapperLocations location of MyBatis mapper files\n+     */\n+    public void setMapperLocations(Resource[] mapperLocations) {\n+        this.mapperLocations = mapperLocations;\n+    }\n+\n+    /**\n+     * Set optional properties to be passed into the SqlSession configuration, as alternative to a\n+     * {@code &lt;properties&gt;} tag in the configuration xml file. This will be used to\n+     * resolve placeholders in the config file.\n+     *\n+     * @param sqlSessionFactoryProperties optional properties for the SqlSessionFactory\n+     */\n+    public void setConfigurationProperties(Properties sqlSessionFactoryProperties) {\n+        this.configurationProperties = sqlSessionFactoryProperties;\n+    }\n+\n+    /**\n+     * Set the JDBC {@code DataSource} that this instance should manage transactions for. The {@code DataSource}\n+     * should match the one used by the {@code SqlSessionFactory}: for example, you could specify the same\n+     * JNDI DataSource for both.\n+     * <p>\n+     * A transactional JDBC {@code Connection} for this {@code DataSource} will be provided to application code\n+     * accessing this {@code DataSource} directly via {@code DataSourceUtils} or {@code DataSourceTransactionManager}.\n+     * <p>\n+     * The {@code DataSource} specified here should be the target {@code DataSource} to manage transactions for, not\n+     * a {@code TransactionAwareDataSourceProxy}. Only data access code may work with\n+     * {@code TransactionAwareDataSourceProxy}, while the transaction manager needs to work on the\n+     * underlying target {@code DataSource}. If there's nevertheless a {@code TransactionAwareDataSourceProxy}\n+     * passed in, it will be unwrapped to extract its target {@code DataSource}.\n+     *\n+     * @param dataSource a JDBC {@code DataSource}\n+     */\n+    public void setDataSource(DataSource dataSource) {\n+        if (dataSource instanceof TransactionAwareDataSourceProxy) {\n+            // If we got a TransactionAwareDataSourceProxy, we need to perform\n+            // transactions for its underlying target DataSource, else data\n+            // access code won't see properly exposed transactions (i.e.\n+            // transactions for the target DataSource).\n+            this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();\n+        } else {\n+            this.dataSource = dataSource;\n+        }\n+    }\n+\n+    /**\n+     * Sets the {@code SqlSessionFactoryBuilder} to use when creating the {@code SqlSessionFactory}.\n+     * <p>\n+     * This is mainly meant for testing so that mock SqlSessionFactory classes can be injected. By\n+     * default, {@code SqlSessionFactoryBuilder} creates {@code DefaultSqlSessionFactory} instances.\n+     *\n+     * @param sqlSessionFactoryBuilder a SqlSessionFactoryBuilder\n+     */\n+    public void setSqlSessionFactoryBuilder(SqlSessionFactoryBuilder sqlSessionFactoryBuilder) {\n+        this.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;\n+    }\n+\n+    /**\n+     * Set the MyBatis TransactionFactory to use. Default is {@code SpringManagedTransactionFactory}\n+     * <p>\n+     * The default {@code SpringManagedTransactionFactory} should be appropriate for all cases:\n+     * be it Spring transaction management, EJB CMT or plain JTA. If there is no active transaction,\n+     * SqlSession operations will execute SQL statements non-transactionally.\n+     *\n+     * <b>It is strongly recommended to use the default {@code TransactionFactory}.</b> If not used, any\n+     * attempt at getting an SqlSession through Spring's MyBatis framework will throw an exception if\n+     * a transaction is active.\n+     *\n+     * @param transactionFactory the MyBatis TransactionFactory\n+     * @see SpringManagedTransactionFactory\n+     */\n+    public void setTransactionFactory(TransactionFactory transactionFactory) {\n+        this.transactionFactory = transactionFactory;\n+    }\n+\n+    /**\n+     * <b>NOTE:</b> This class <em>overrides</em> any {@code Environment} you have set in the MyBatis\n+     * config file. This is used only as a placeholder name. The default value is\n+     * {@code SqlSessionFactoryBean.class.getSimpleName()}.\n+     *\n+     * @param environment the environment name\n+     */\n+    public void setEnvironment(String environment) {\n+        this.environment = environment;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        notNull(dataSource, \"Property 'dataSource' is required\");\n+        notNull(sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n+        state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null),\n+            \"Property 'configuration' and 'configLocation' can not specified with together\");\n+\n+        this.sqlSessionFactory = buildSqlSessionFactory();\n+    }\n \n     /**\n      * Build a {@code SqlSessionFactory} instance.\n@@ -570,56 +550,56 @@ protected SqlSessionFactory buildSqlSessionFactory() throws Exception {\n             }\n         }\n \n-    if (!isEmpty(this.typeAliases)) {\n-      Stream.of(this.typeAliases).forEach(typeAlias -> {\n-        configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n-        LOGGER.debug(() -> \"Registered type alias: '\" + typeAlias + \"'\");\n-      });\n-    }\n+        if (!isEmpty(this.typeAliases)) {\n+            Stream.of(this.typeAliases).forEach(typeAlias -> {\n+                configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n+                LOGGER.debug(() -> \"Registered type alias: '\" + typeAlias + \"'\");\n+            });\n+        }\n \n-    if (!isEmpty(this.plugins)) {\n-      Stream.of(this.plugins).forEach(plugin -> {\n-          configuration.addInterceptor(plugin);\n-        LOGGER.debug(() -> \"Registered plugin: '\" + plugin + \"'\");\n-      });\n-    }\n+        if (!isEmpty(this.plugins)) {\n+            Stream.of(this.plugins).forEach(plugin -> {\n+                configuration.addInterceptor(plugin);\n+                LOGGER.debug(() -> \"Registered plugin: '\" + plugin + \"'\");\n+            });\n+        }\n \n-    if (hasLength(this.typeHandlersPackage)) {\n-      String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,\n-          ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n-      Stream.of(typeHandlersPackageArray).forEach(packageToScan -> {\n-          configuration.getTypeHandlerRegistry().register(packageToScan);\n-        LOGGER.debug(() -> \"Scanned package: '\" + packageToScan + \"' for type handlers\");\n-      });\n-    }\n+        if (hasLength(this.typeHandlersPackage)) {\n+            String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,\n+                ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n+            Stream.of(typeHandlersPackageArray).forEach(packageToScan -> {\n+                configuration.getTypeHandlerRegistry().register(packageToScan);\n+                LOGGER.debug(() -> \"Scanned package: '\" + packageToScan + \"' for type handlers\");\n+            });\n+        }\n \n-    if (!isEmpty(this.typeHandlers)) {\n-      Stream.of(this.typeHandlers).forEach(typeHandler -> {\n-          configuration.getTypeHandlerRegistry().register(typeHandler);\n-        LOGGER.debug(() -> \"Registered type handler: '\" + typeHandler + \"'\");\n-      });\n-    }\n+        if (!isEmpty(this.typeHandlers)) {\n+            Stream.of(this.typeHandlers).forEach(typeHandler -> {\n+                configuration.getTypeHandlerRegistry().register(typeHandler);\n+                LOGGER.debug(() -> \"Registered type handler: '\" + typeHandler + \"'\");\n+            });\n+        }\n \n-    if (this.databaseIdProvider != null) {//fix #64 set databaseId before parse mapper xmls\n-      try {\n-          configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n-      } catch (SQLException e) {\n-        throw new NestedIOException(\"Failed getting a databaseId\", e);\n-      }\n-    }\n+        if (this.databaseIdProvider != null) {//fix #64 set databaseId before parse mapper xmls\n+            try {\n+                configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n+            } catch (SQLException e) {\n+                throw new NestedIOException(\"Failed getting a databaseId\", e);\n+            }\n+        }\n \n-    Optional.ofNullable(this.cache).ifPresent(configuration::addCache);\n+        Optional.ofNullable(this.cache).ifPresent(configuration::addCache);\n \n-    if (xmlConfigBuilder != null) {\n-      try {\n-        xmlConfigBuilder.parse();\n-        LOGGER.debug(() -> \"Parsed configuration file: '\" + this.configLocation + \"'\");\n-      } catch (Exception ex) {\n-        throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n-      } finally {\n-        ErrorContext.instance().reset();\n-      }\n-    }\n+        if (xmlConfigBuilder != null) {\n+            try {\n+                xmlConfigBuilder.parse();\n+                LOGGER.debug(() -> \"Parsed configuration file: '\" + this.configLocation + \"'\");\n+            } catch (Exception ex) {\n+                throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n+            } finally {\n+                ErrorContext.instance().reset();\n+            }\n+        }\n \n         if (this.transactionFactory == null) {\n             this.transactionFactory = new SpringManagedTransactionFactory();\n@@ -697,43 +677,41 @@ protected void registerOriginalEnumTypeHandler(TypeHandlerRegistry typeHandlerRe\n         typeHandlerRegistry.register(enumClazz, EnumOrdinalTypeHandler.class);\n     }\n \n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public SqlSessionFactory getObject() throws Exception {\n-    if (this.sqlSessionFactory == null) {\n-      afterPropertiesSet();\n-    }\n-\n-    return this.sqlSessionFactory;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public Class<? extends SqlSessionFactory> getObjectType() {\n-    return this.sqlSessionFactory == null ? SqlSessionFactory.class : this.sqlSessionFactory.getClass();\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public boolean isSingleton() {\n-    return true;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public void onApplicationEvent(ApplicationEvent event) {\n-    if (failFast && event instanceof ContextRefreshedEvent) {\n-      // fail-fast -> check all statements are completed\n-      this.sqlSessionFactory.getConfiguration().getMappedStatementNames();\n-    }\n-  }\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public SqlSessionFactory getObject() throws Exception {\n+        if (this.sqlSessionFactory == null) {\n+            afterPropertiesSet();\n+        }\n+        return this.sqlSessionFactory;\n+    }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Class<? extends SqlSessionFactory> getObjectType() {\n+        return this.sqlSessionFactory == null ? SqlSessionFactory.class : this.sqlSessionFactory.getClass();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isSingleton() {\n+        return true;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void onApplicationEvent(ApplicationEvent event) {\n+        if (failFast && event instanceof ContextRefreshedEvent) {\n+            // fail-fast -> check all statements are completed\n+            this.sqlSessionFactory.getConfiguration().getMappedStatementNames();\n+        }\n+    }\n }",
      "parent_sha": "3eb9519d37c0413bf27c921a1c6d715863aa4b85"
    }
  },
  {
    "oid": "96621c606aeba06db71ed82a0dded6b7994acb79",
    "message": "\u4fee\u6539\u751f\u6210\u6e90\u7801\u7c7b",
    "date": "2016-03-24T05:04:00Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/96621c606aeba06db71ed82a0dded6b7994acb79",
    "details": {
      "sha": "6b7b6d3684610c643808b4ee31131afddba29fc6",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/96621c606aeba06db71ed82a0dded6b7994acb79/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2FAutoGenerator.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/96621c606aeba06db71ed82a0dded6b7994acb79/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2FAutoGenerator.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2FAutoGenerator.java?ref=96621c606aeba06db71ed82a0dded6b7994acb79",
      "patch": "@@ -159,6 +159,7 @@ public void generate() {\n \t\t\t\tList<String> columns = new ArrayList<String>();\n \t\t\t\tList<String> types = new ArrayList<String>();\n \t\t\t\tList<String> comments = new ArrayList<String>();\n+\t\t\t\tString idType = \"Long\";\n \t\t\t\tMap<String, IdInfo> idMap = new HashMap<String, IdInfo>();\n \t\t\t\tResultSet results = conn.prepareStatement(\"show full fields from \" + table).executeQuery();\n \t\t\t\twhile (results.next()) {\n@@ -172,6 +173,7 @@ public void generate() {\n \t\t\t\t\t\t\tautoIncrement = true;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tidMap.put(results.getString(\"FIELD\"), new IdInfo(key, autoIncrement));\n+\t\t\t\t\t\tidType = processType(results.getString(\"TYPE\"));\n \t\t\t\t\t}\n \t\t\t\t}\n \n@@ -182,7 +184,7 @@ public void generate() {\n \t\t\t\t * \u751f\u6210\u6620\u5c04\u6587\u4ef6\n \t\t\t\t */\n \t\t\t\tbuildEntityBean(columns, types, comments, tableComments.get(table), idMap, table, beanName);\n-\t\t\t\tbuildMapper(beanName, mapperName);\n+\t\t\t\tbuildMapper(beanName, mapperName, idType);\n \t\t\t\tbuildMapperXml(columns, types, comments, mapperName);\n \t\t\t}\n \t\t} catch (Exception e) {\n@@ -484,10 +486,13 @@ public String toIdType(){\n \t/**\n \t * \n \t * \u6784\u5efaMapper\u6587\u4ef6\n-\t *\n+\t * \n+\t * @param beanName\n+\t * @param mapperName\n+\t * @param idType\n \t * @throws IOException\n \t */\n-\tprivate void buildMapper(String beanName, String mapperName) throws IOException {\n+\tprivate void buildMapper(String beanName, String mapperName, String idType) throws IOException {\n \t\tFile mapperFile = new File(PATH_MAPPER, mapperName + \".java\");\n \t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(mapperFile), \"utf-8\"));\n \t\tbw.write(\"package \" + config.getMapperPackage() + \";\");\n@@ -500,7 +505,7 @@ private void buildMapper(String beanName, String mapperName) throws IOException\n \n \t\tbw = buildClassComment(bw, mapperName + \"\u6570\u636e\u5e93\u64cd\u4f5c\u63a5\u53e3\u7c7b\");\n \t\tbw.newLine();\n-\t\tbw.write(\"public interface \" + mapperName + \" extends AutoMapper<\" + beanName + \"> {\");\n+\t\tbw.write(\"public interface \" + mapperName + \" extends AutoMapper<\" + beanName + \", \" + idType + \"> {\");\n \t\tbw.newLine();\n \t\tbw.newLine();\n ",
      "parent_sha": "9ddf73cde248bb64bb202d716b6d19aa4dadf4e3"
    }
  },
  {
    "oid": "022d98400f69833d8bdc0f6a1e68b6477baf87c4",
    "message": "\u89e3\u51b3\u8b66\u544a\uff0c\u4f7f\u7528\u5bf9\u8c61\u526f\u672c\uff0c\u5f02\u5e38\u5904\u7406\u65b9\u5f0f\u5904\u7406\u3002",
    "date": "2017-04-06T01:47:27Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/022d98400f69833d8bdc0f6a1e68b6477baf87c4",
    "details": {
      "sha": "7636a42e532ecd40c18bef153362739b08626ca4",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/spring/MybatisMapperRefresh.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/022d98400f69833d8bdc0f6a1e68b6477baf87c4/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fspring%2FMybatisMapperRefresh.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/022d98400f69833d8bdc0f6a1e68b6477baf87c4/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fspring%2FMybatisMapperRefresh.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fspring%2FMybatisMapperRefresh.java?ref=022d98400f69833d8bdc0f6a1e68b6477baf87c4",
      "patch": "@@ -37,7 +37,6 @@\n import org.apache.ibatis.parsing.XPathParser;\r\n import org.apache.ibatis.session.Configuration;\r\n import org.apache.ibatis.session.SqlSessionFactory;\r\n-import org.springframework.core.NestedIOException;\r\n import org.springframework.core.io.FileSystemResource;\r\n import org.springframework.core.io.Resource;\r\n import org.springframework.core.io.UrlResource;\r\n@@ -86,7 +85,7 @@ public class MybatisMapperRefresh implements Runnable {\n \r\n     public MybatisMapperRefresh(Resource[] mapperLocations, SqlSessionFactory sqlSessionFactory, int delaySeconds,\r\n                                 int sleepSeconds, boolean enabled) {\r\n-        this.mapperLocations = mapperLocations;\r\n+        this.mapperLocations = mapperLocations.clone();\r\n         this.sqlSessionFactory = sqlSessionFactory;\r\n         this.delaySeconds = delaySeconds;\r\n         this.enabled = enabled;\r\n@@ -96,7 +95,7 @@ public MybatisMapperRefresh(Resource[] mapperLocations, SqlSessionFactory sqlSes\n     }\r\n \r\n     public MybatisMapperRefresh(Resource[] mapperLocations, SqlSessionFactory sqlSessionFactory, boolean enabled) {\r\n-        this.mapperLocations = mapperLocations;\r\n+        this.mapperLocations = mapperLocations.clone();\r\n         this.sqlSessionFactory = sqlSessionFactory;\r\n         this.enabled = enabled;\r\n         this.configuration = sqlSessionFactory.getConfiguration();\r\n@@ -183,7 +182,7 @@ public void run() {\n      * @throws Exception\r\n      */\r\n     @SuppressWarnings(\"rawtypes\")\r\n-    private void refresh(Resource resource) throws Exception {\r\n+    private void refresh(Resource resource) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\r\n         this.configuration = sqlSessionFactory.getConfiguration();\r\n         boolean isSupper = configuration.getClass().getSuperclass() == Configuration.class;\r\n         try {\r\n@@ -210,9 +209,9 @@ private void refresh(Resource resource) throws Exception {\n                     resource.toString(), sqlSessionFactory.getConfiguration().getSqlFragments());\r\n             xmlMapperBuilder.parse();\r\n             logger.debug(\"refresh: '\" + resource + \"', success!\");\r\n-        } catch (Exception e) {\r\n-            throw new NestedIOException(\"Failed to parse mapping resource: '\" + resource + \"'\", e);\r\n-        } finally {\r\n+        } catch (IOException e) {\r\n+            logger.error(\"Refresh IOException :\"+e.getMessage());\r\n+        }finally {\r\n             ErrorContext.instance().reset();\r\n         }\r\n     }\r",
      "parent_sha": "4558762de2331967055be127c75d094778b2a73f"
    }
  },
  {
    "oid": "4b7f06abfcdc5131fe585c626ebb45c3a130a91b",
    "message": "ServiceImpl\u4f18\u5316",
    "date": "2018-11-16T07:56:11Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/4b7f06abfcdc5131fe585c626ebb45c3a130a91b",
    "details": {
      "sha": "fdd798255a19da6bf354f8d6214ac36e800daf80",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/4b7f06abfcdc5131fe585c626ebb45c3a130a91b/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/4b7f06abfcdc5131fe585c626ebb45c3a130a91b/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java?ref=4b7f06abfcdc5131fe585c626ebb45c3a130a91b",
      "patch": "@@ -163,15 +163,11 @@ public boolean saveOrUpdateBatch(Collection<T> entityList, int batchSize) {\n         if (CollectionUtils.isEmpty(entityList)) {\n             throw new IllegalArgumentException(\"Error: entityList must not be empty\");\n         }\n-        Class<?> cls = null;\n-        TableInfo tableInfo = null;\n+        Class<?> cls = currentModelClass();\n+        TableInfo tableInfo = TableInfoHelper.getTableInfo(cls);\n         int i = 0;\n         try (SqlSession batchSqlSession = sqlSessionBatch()) {\n             for (T anEntityList : entityList) {\n-                if (i == 0) {\n-                    cls = anEntityList.getClass();\n-                    tableInfo = TableInfoHelper.getTableInfo(cls);\n-                }\n                 if (null != tableInfo && StringUtils.isNotEmpty(tableInfo.getKeyProperty())) {\n                     Object idVal = ReflectionKit.getMethodValue(cls, anEntityList, tableInfo.getKeyProperty());\n                     if (StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal))) {",
      "parent_sha": "55bf6278a7d41dee793d318cb814858ca2610b1b"
    }
  },
  {
    "oid": "114d0c6e85bff6f90c37fdc29a13c8194a9a6c84",
    "message": "\u5173\u95ed\u8d44\u6e90\u524d\u589e\u52a0\u975e\u7a7a\u5224\u65ad,\u907f\u514d\u9519\u8befsql\u5f15\u8d77\u7684\u7a7a\u6307\u9488\u9519\u8bef,\u5220\u9664\u591a\u4f59\u7684current>pages\u5224\u65ad",
    "date": "2016-08-25T09:28:49Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/114d0c6e85bff6f90c37fdc29a13c8194a9a6c84",
    "details": {
      "sha": "5d88fb837887eede0cfdbdff27c6cbe66f258214",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/PaginationInterceptor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/114d0c6e85bff6f90c37fdc29a13c8194a9a6c84/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPaginationInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/114d0c6e85bff6f90c37fdc29a13c8194a9a6c84/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPaginationInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPaginationInterceptor.java?ref=114d0c6e85bff6f90c37fdc29a13c8194a9a6c84",
      "patch": "@@ -176,20 +176,17 @@ public Pagination count(String sql, Connection connection, MappedStatement mappe\n \t\t\t\ttotal = rs.getInt(1);\r\n \t\t\t}\r\n \t\t\tpage.setTotal(total);\r\n-\t\t\t/**\r\n-\t\t\t * \u5f53\u524d\u9875\u5927\u4e8e\u603b\u9875\u6570\uff0c\u5f53\u524d\u9875\u8bbe\u7f6e\u4e3a\u7b2c\u4e00\u9875\r\n-\t\t\t */\r\n-\t\t\tif(page.getCurrent() > page.getPages()){\r\n-\t\t\t\tpage = new Pagination(1, page.getSize());\r\n-\t\t\t\tpage.setTotal(total);\r\n-\t\t\t}\r\n \t\t} catch (SQLException e) {\r\n \t\t\te.printStackTrace();\r\n \t\t} finally {\r\n \t\t\ttry {\r\n-\t\t\t\trs.close();\r\n-\t\t\t\tpstmt.close();\r\n-\t\t\t} catch (SQLException e) {\r\n+                if (rs != null) {\r\n+                    rs.close();\r\n+                }\r\n+                if (pstmt != null) {\r\n+                    pstmt.close();\r\n+                }\r\n+            } catch (SQLException e) {\r\n \t\t\t\te.printStackTrace();\r\n \t\t\t}\r\n \t\t}\r",
      "parent_sha": "349cd9ad11d62a6ded72ba4be014b9193e2b3ad6"
    }
  },
  {
    "oid": "f51364ee24935e7f2292dd449a46b8db0f57880a",
    "message": "fix \u5f3a\u8f6c\u5f02\u5e38",
    "date": "2020-08-18T05:47:19Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/f51364ee24935e7f2292dd449a46b8db0f57880a",
    "details": {
      "sha": "ff02254d2f87e251eea32815656a7a50ad140540",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/conditions/AbstractChainWrapper.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/f51364ee24935e7f2292dd449a46b8db0f57880a/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fconditions%2FAbstractChainWrapper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/f51364ee24935e7f2292dd449a46b8db0f57880a/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fconditions%2FAbstractChainWrapper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fconditions%2FAbstractChainWrapper.java?ref=f51364ee24935e7f2292dd449a46b8db0f57880a",
      "patch": "@@ -208,7 +208,9 @@ public Children having(boolean condition, String sqlHaving, Object... params) {\n \n     @Override\n     public Children func(boolean condition, Consumer<Children> consumer) {\n-        getWrapper().func(condition, consumer);\n+        if (condition) {\n+            consumer.accept(typedThis);\n+        }\n         return typedThis;\n     }\n ",
      "parent_sha": "76bead19cd66488c42d73c03be12a71ee1d82e3f"
    }
  },
  {
    "oid": "3832c4c962aacf23c802a5e4d7cb90f8867c041f",
    "message": "\u8c03\u6574\u4ee3\u7801\u903b\u8f91",
    "date": "2021-12-26T15:16:28Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/3832c4c962aacf23c802a5e4d7cb90f8867c041f",
    "details": {
      "sha": "20a581aafd2c07ba1684727858ad701d1491fc5a",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteBatchByIds.java",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/3832c4c962aacf23c802a5e4d7cb90f8867c041f/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2Fmethods%2FDeleteBatchByIds.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/3832c4c962aacf23c802a5e4d7cb90f8867c041f/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2Fmethods%2FDeleteBatchByIds.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2Fmethods%2FDeleteBatchByIds.java?ref=3832c4c962aacf23c802a5e4d7cb90f8867c041f",
      "patch": "@@ -45,14 +45,12 @@ public DeleteBatchByIds(String name) {\n     @Override\n     public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> modelClass, TableInfo tableInfo) {\n         String sql;\n-        SqlMethod sqlMethod = SqlMethod.LOGIC_DELETE_BATCH_BY_IDS;\n         if (tableInfo.isWithLogicDelete()) {\n             sql = logicDeleteScript(tableInfo);\n             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);\n             return addUpdateMappedStatement(mapperClass, modelClass, this.name, sqlSource);\n         } else {\n-            sqlMethod = SqlMethod.DELETE_BATCH_BY_IDS;\n-            sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),\n+            sql = String.format(SqlMethod.DELETE_BATCH_BY_IDS.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),\n                 SqlScriptUtils.convertForeach(\n                     SqlScriptUtils.convertChoose(\"@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())\",\n                         \"#{item}\", \"#{item.\" + tableInfo.getKeyProperty() + \"}\"),\n@@ -68,14 +66,11 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode\n      * @since 3.5.0\n      */\n     public String logicDeleteScript(TableInfo tableInfo) {\n-        SqlMethod sqlMethod = SqlMethod.LOGIC_DELETE_BATCH_BY_IDS;\n-        return String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlLogicSet(tableInfo),\n-            tableInfo.getKeyColumn(),\n-            SqlScriptUtils.convertForeach(\n+        return String.format(SqlMethod.LOGIC_DELETE_BATCH_BY_IDS.getSql(), tableInfo.getTableName(),\n+            sqlLogicSet(tableInfo), tableInfo.getKeyColumn(), SqlScriptUtils.convertForeach(\n                 SqlScriptUtils.convertChoose(\"@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())\",\n                     \"#{item}\", \"#{item.\" + tableInfo.getKeyProperty() + \"}\"),\n                 COLLECTION, null, \"item\", COMMA),\n             tableInfo.getLogicDeleteSql(true, true));\n     }\n-\n }",
      "parent_sha": "0333570211f3d7550ddc9f535f3ec204d57b90ca"
    }
  },
  {
    "oid": "20ee6c158b3d83bfba4326f58f0fbd5276801fd9",
    "message": "isAsc \u6539\u4e3a ascSort \u4e0d\u5ffd\u7565 size",
    "date": "2017-12-09T07:39:27Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/20ee6c158b3d83bfba4326f58f0fbd5276801fd9",
    "details": {
      "sha": "ee33eccd7bd675f6c206a7a5b45a52c158d637fd",
      "filename": "mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/plugins/pagination/Pagination.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/20ee6c158b3d83bfba4326f58f0fbd5276801fd9/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2Fpagination%2FPagination.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/20ee6c158b3d83bfba4326f58f0fbd5276801fd9/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2Fpagination%2FPagination.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2Fpagination%2FPagination.java?ref=20ee6c158b3d83bfba4326f58f0fbd5276801fd9",
      "patch": "@@ -57,7 +57,7 @@ public class Pagination extends RowBounds implements Serializable {\n     /**\n      * \u6bcf\u9875\u663e\u793a\u6761\u6570\uff0c\u9ed8\u8ba4 10\n      */\n-    private transient int size = 10;\n+    private int size = 10;\n \n     /**\n      * \u603b\u9875\u6570\n@@ -101,7 +101,7 @@ public class Pagination extends RowBounds implements Serializable {\n      * @see #asc\n      * @see #desc\n      */\n-    private transient boolean isAsc = true;\n+    private transient boolean ascSort = true;\n \n     /**\n      * <p>\n@@ -243,7 +243,7 @@ public Pagination setOpenSort(boolean openSort) {\n     }\n \n     public List<String> getAsc() {\n-        return orders(isAsc, asc);\n+        return orders(ascSort, asc);\n     }\n \n     private List<String> orders(boolean condition, List<String> columns) {\n@@ -276,15 +276,15 @@ public void setDesc(List<String> desc) {\n      */\n     @Deprecated\n     public boolean isAsc() {\n-        return isAsc;\n+        return ascSort;\n     }\n \n     /**\n      * @see #asc\n      * @see #desc\n      */\n-    public Pagination setAsc(boolean isAsc) {\n-        this.isAsc = isAsc;\n+    public Pagination setAsc(boolean ascSort) {\n+        this.ascSort = ascSort;\n         return this;\n     }\n ",
      "parent_sha": "d1d8e42e4e70605a704f93454a1c8533c34788c3"
    }
  },
  {
    "oid": "7d95630852f256b513840830b08ed8473a1c962f",
    "message": "[\u683c\u5f0f] \u6d4b\u8bd5\u4ee3\u7801\u683c\u5f0f",
    "date": "2019-01-02T14:29:58Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/7d95630852f256b513840830b08ed8473a1c962f",
    "details": {
      "sha": "f1c3b6a3c68cc25d0d698aad2769d22d4864f4e2",
      "filename": "mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/service/impl/H2UserServiceImpl.java",
      "status": "modified",
      "additions": 24,
      "deletions": 29,
      "changes": 53,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/7d95630852f256b513840830b08ed8473a1c962f/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2Fservice%2Fimpl%2FH2UserServiceImpl.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/7d95630852f256b513840830b08ed8473a1c962f/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2Fservice%2Fimpl%2FH2UserServiceImpl.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2Fservice%2Fimpl%2FH2UserServiceImpl.java?ref=7d95630852f256b513840830b08ed8473a1c962f",
      "patch": "@@ -15,21 +15,19 @@\n  */\n package com.baomidou.mybatisplus.test.h2.service.impl;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-\n import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n import com.baomidou.mybatisplus.core.metadata.IPage;\n import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n import com.baomidou.mybatisplus.test.h2.entity.mapper.H2UserMapper;\n import com.baomidou.mybatisplus.test.h2.entity.persistent.H2User;\n import com.baomidou.mybatisplus.test.h2.service.IH2UserService;\n+import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n /**\n  * <p>\n  * Service\u5c42\u6d4b\u8bd5\n@@ -41,38 +39,35 @@\n @Service\n public class H2UserServiceImpl extends ServiceImpl<H2UserMapper, H2User> implements IH2UserService {\n \n-    @Autowired\n-    private H2UserMapper userMapper;\n-    \n     @Override\n     public int myInsert(String name, int version) {\n-        return userMapper.myInsertWithNameVersion(name, version);\n+        return baseMapper.myInsertWithNameVersion(name, version);\n     }\n \n     @Override\n     public int myInsertWithParam(String name, int version) {\n         H2User user = new H2User();\n         user.setName(name);\n         user.setVersion(version);\n-        return userMapper.myInsertWithParam(user);\n+        return baseMapper.myInsertWithParam(user);\n     }\n \n     @Override\n     public int myInsertWithoutParam(String name, int version) {\n         H2User user = new H2User();\n         user.setName(name);\n         user.setVersion(version);\n-        return userMapper.myInsertWithoutParam(user);\n+        return baseMapper.myInsertWithoutParam(user);\n     }\n \n     @Override\n     public int myUpdate(Long id, String name) {\n-        return userMapper.myUpdateWithNameId(id, name);\n+        return baseMapper.myUpdateWithNameId(id, name);\n     }\n \n     @Override\n     public List<H2User> queryWithParamInSelectStatememt(Map<String, Object> param) {\n-        return userMapper.selectUserWithParamInSelectStatememt(param);\n+        return baseMapper.selectUserWithParamInSelectStatememt(param);\n     }\n \n     @Override\n@@ -84,45 +79,45 @@ public IPage<H2User> queryWithParamInSelectStatememt4Page(Map<String, Object> pa\n \n     @Override\n     public int selectCountWithParamInSelectItems(Map<String, Object> param) {\n-        return userMapper.selectCountWithParamInSelectItems(param);\n+        return baseMapper.selectCountWithParamInSelectItems(param);\n     }\n \n     @Override\n     public List<Map> mySelectMaps() {\n-        return userMapper.mySelectMaps();\n+        return baseMapper.mySelectMaps();\n     }\n \n     @Override\n     @Transactional(rollbackFor = RuntimeException.class)\n     public void testBatchTransactional() {\n-        saveBatch(Arrays.asList(new H2User(\"batch1\",0),new H2User(\"batch2\",0),new H2User(\"batch3\",0)));\n-        saveBatch(Arrays.asList(new H2User(\"batch4\",0),new H2User(\"batch5\",0),new H2User(\"batch6\",0)));\n+        saveBatch(Arrays.asList(new H2User(\"batch1\", 0), new H2User(\"batch2\", 0), new H2User(\"batch3\", 0)));\n+        saveBatch(Arrays.asList(new H2User(\"batch4\", 0), new H2User(\"batch5\", 0), new H2User(\"batch6\", 0)));\n         throw new MybatisPlusException(\"\u6d4b\u8bd5\u6279\u91cf\u63d2\u5165\u4e8b\u52a1\u56de\u6eda\");\n     }\n \n     @Override\n     @Transactional(rollbackFor = RuntimeException.class)\n     public void testSimpleTransactional() {\n-        save(new H2User(\"simple1\",0));\n-        save(new H2User(\"simple2\",0));\n+        save(new H2User(\"simple1\", 0));\n+        save(new H2User(\"simple2\", 0));\n         throw new MybatisPlusException(\"\u6d4b\u8bd5\u666e\u901a\u63d2\u5165\u4e8b\u52a1\u56de\u6eda\");\n     }\n-    \n-    \n+\n+\n     @Override\n     @Transactional(rollbackFor = RuntimeException.class)\n     public void testSaveOrUpdateBatchTransactional() {\n-        saveOrUpdateBatch(Arrays.asList(new H2User(\"savOrUpdate1\",0),new H2User(\"savOrUpdate2\",0),new H2User(\"savOrUpdate3\",0)),1);\n-        saveOrUpdateBatch(Arrays.asList(new H2User(\"savOrUpdate4\",0),new H2User(\"savOrUpdate5\",0),new H2User(\"savOrUpdate6\",0)),1);\n+        saveOrUpdateBatch(Arrays.asList(new H2User(\"savOrUpdate1\", 0), new H2User(\"savOrUpdate2\", 0), new H2User(\"savOrUpdate3\", 0)), 1);\n+        saveOrUpdateBatch(Arrays.asList(new H2User(\"savOrUpdate4\", 0), new H2User(\"savOrUpdate5\", 0), new H2User(\"savOrUpdate6\", 0)), 1);\n         throw new MybatisPlusException(\"\u6d4b\u8bd5\u666e\u901a\u63d2\u5165\u4e8b\u52a1\u56de\u6eda\");\n     }\n-    \n+\n     @Override\n     @Transactional(rollbackFor = RuntimeException.class)\n     public void testSimpleAndBatchTransactional() {\n-        save(new H2User(\"simpleAndBatchTx1\",0));\n-        saveBatch(Arrays.asList(new H2User(\"simpleAndBatchTx2\",0),new H2User(\"simpleAndBatchTx3\",0),new H2User(\"simpleAndBatchTx4\",0)),1);\n-        saveOrUpdateBatch(Arrays.asList(new H2User(\"simpleAndBatchTx5\",0),new H2User(\"simpleAndBatchTx6\",0),new H2User(\"simpleAndBatchTx7\",0)),1);\n+        save(new H2User(\"simpleAndBatchTx1\", 0));\n+        saveBatch(Arrays.asList(new H2User(\"simpleAndBatchTx2\", 0), new H2User(\"simpleAndBatchTx3\", 0), new H2User(\"simpleAndBatchTx4\", 0)), 1);\n+        saveOrUpdateBatch(Arrays.asList(new H2User(\"simpleAndBatchTx5\", 0), new H2User(\"simpleAndBatchTx6\", 0), new H2User(\"simpleAndBatchTx7\", 0)), 1);\n         throw new MybatisPlusException(\"\u6d4b\u8bd5\u4e8b\u52a1\u56de\u6eda\");\n     }\n }",
      "parent_sha": "1a72587dda4daa51763998b1a2567d7d1f9c91ef"
    }
  },
  {
    "oid": "5ca013fd15bc5fa6aa57e56a7ad8fd0e2c02a4c7",
    "message": ":sparkles: \u81ea\u52a8\u5224\u65ad\u6570\u636e\u5e93\u7c7b\u578b\u9002\u914d\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\n\nFix https://github.com/baomidou/mybatis-plus/pull/811",
    "date": "2019-02-09T15:21:22Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/5ca013fd15bc5fa6aa57e56a7ad8fd0e2c02a4c7",
    "details": {
      "sha": "7505eaf3f055a495d09d43a09d3711ff175d4753",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/DataSourceConfig.java",
      "status": "modified",
      "additions": 41,
      "deletions": 35,
      "changes": 76,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/5ca013fd15bc5fa6aa57e56a7ad8fd0e2c02a4c7/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FDataSourceConfig.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/5ca013fd15bc5fa6aa57e56a7ad8fd0e2c02a4c7/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FDataSourceConfig.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FDataSourceConfig.java?ref=5ca013fd15bc5fa6aa57e56a7ad8fd0e2c02a4c7",
      "patch": "@@ -15,28 +15,17 @@\n  */\n package com.baomidou.mybatisplus.generator.config;\n \n-import java.sql.Connection;\n-import java.sql.DriverManager;\n-import java.sql.SQLException;\n-\n import com.baomidou.mybatisplus.annotation.DbType;\n import com.baomidou.mybatisplus.core.toolkit.ExceptionUtils;\n-import com.baomidou.mybatisplus.generator.config.converts.DB2TypeConvert;\n-import com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;\n-import com.baomidou.mybatisplus.generator.config.converts.OracleTypeConvert;\n-import com.baomidou.mybatisplus.generator.config.converts.PostgreSqlTypeConvert;\n-import com.baomidou.mybatisplus.generator.config.converts.SqlServerTypeConvert;\n-import com.baomidou.mybatisplus.generator.config.querys.DB2Query;\n-import com.baomidou.mybatisplus.generator.config.querys.H2Query;\n-import com.baomidou.mybatisplus.generator.config.querys.MariadbQuery;\n-import com.baomidou.mybatisplus.generator.config.querys.MySqlQuery;\n-import com.baomidou.mybatisplus.generator.config.querys.OracleQuery;\n-import com.baomidou.mybatisplus.generator.config.querys.PostgreSqlQuery;\n-import com.baomidou.mybatisplus.generator.config.querys.SqlServerQuery;\n-\n+import com.baomidou.mybatisplus.generator.config.converts.*;\n+import com.baomidou.mybatisplus.generator.config.querys.*;\n import lombok.Data;\n import lombok.experimental.Accessors;\n \n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+\n /**\n  * \u6570\u636e\u5e93\u914d\u7f6e\n  *\n@@ -116,26 +105,43 @@ public IDbQuery getDbQuery() {\n      * @return \u7c7b\u578b\u679a\u4e3e\u503c\n      */\n     public DbType getDbType() {\n-        if (null == dbType) {\n-            if (driverName.contains(\"mysql\")) {\n-                dbType = DbType.MYSQL;\n-            } else if (driverName.contains(\"oracle\")) {\n-                dbType = DbType.ORACLE;\n-            } else if (driverName.contains(\"postgresql\")) {\n-                dbType = DbType.POSTGRE_SQL;\n-            } else if (driverName.contains(\"sqlserver\")) {\n-                dbType = DbType.SQL_SERVER;\n-            } else if (driverName.contains(\"db2\")) {\n-                dbType = DbType.DB2;\n-            } else if (driverName.contains(\"mariadb\")) {\n-                dbType = DbType.MARIADB;\n-            } else if(driverName.contains(\"h2\")){\n-                dbType = DbType.H2;\n-            }else {\n-                throw ExceptionUtils.mpe(\"Unknown type of database!\");\n+        if (null == this.dbType) {\n+            this.dbType = this.getDbType(this.driverName);\n+            if (null == this.dbType) {\n+                this.dbType = this.getDbType(this.url.toLowerCase());\n+                if (null == this.dbType) {\n+                    throw ExceptionUtils.mpe(\"Unknown type of database!\");\n+                }\n             }\n         }\n-        return dbType;\n+\n+        return this.dbType;\n+    }\n+\n+    /**\n+     * \u5224\u65ad\u6570\u636e\u5e93\u7c7b\u578b\n+     *\n+     * @param str \u7528\u4e8e\u5bfb\u627e\u7279\u5f81\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f driverName \u6216\u5c0f\u5199\u540e\u7684 url\n+     * @return \u7c7b\u578b\u679a\u4e3e\u503c\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u5219\u8fd4\u56de null\n+     */\n+    private DbType getDbType(String str) {\n+        if (str.contains(\"mysql\")) {\n+            return DbType.MYSQL;\n+        } else if (str.contains(\"oracle\")) {\n+            return DbType.ORACLE;\n+        } else if (str.contains(\"postgresql\")) {\n+            return DbType.POSTGRE_SQL;\n+        } else if (str.contains(\"sqlserver\")) {\n+            return DbType.SQL_SERVER;\n+        } else if (str.contains(\"db2\")) {\n+            return DbType.DB2;\n+        } else if (str.contains(\"mariadb\")) {\n+            return DbType.MARIADB;\n+        } else if (str.contains(\"h2\")) {\n+            return DbType.H2;\n+        } else {\n+            return null;\n+        }\n     }\n \n     public ITypeConvert getTypeConvert() {",
      "parent_sha": "b320495a115765961514f16fece60b708cf66169"
    }
  },
  {
    "oid": "e29caf943410f898ae8c5fe91e5bfdcfbaae33b3",
    "message": "\u8c03\u6574\u4e00\u4e0b\u5f15\u5165\u5305",
    "date": "2018-06-15T07:45:17Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/e29caf943410f898ae8c5fe91e5bfdcfbaae33b3",
    "details": {
      "sha": "319ef3226caa31a2642c6c5e6d39869fbda3a71d",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/e29caf943410f898ae8c5fe91e5bfdcfbaae33b3/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/e29caf943410f898ae8c5fe91e5bfdcfbaae33b3/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java?ref=e29caf943410f898ae8c5fe91e5bfdcfbaae33b3",
      "patch": "@@ -36,6 +36,7 @@\n import static com.baomidou.mybatisplus.core.enums.SqlKeyword.OR;\n import static com.baomidou.mybatisplus.core.enums.SqlKeyword.ORDER_BY;\n import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n \n import java.io.Serializable;\n import java.util.ArrayList;\n@@ -46,7 +47,6 @@\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Function;\n-import java.util.stream.Collectors;\n \n import com.baomidou.mybatisplus.core.conditions.interfaces.Compare;\n import com.baomidou.mybatisplus.core.conditions.interfaces.Func;\n@@ -520,8 +520,7 @@ public String getParamAlias() {\n \n     @Override\n     public String getSqlSegment() {\n-        String temp = String.join(\" \", expression.stream().map(ISqlSegment::getSqlSegment)\n-            .collect(Collectors.toList()));\n+        String temp = String.join(\" \", expression.stream().map(ISqlSegment::getSqlSegment).collect(toList()));\n         if (temp.startsWith(SqlKeyword.ORDER_BY.getSqlSegment())) {\n             return \" 1=1 \" + temp;\n         }",
      "parent_sha": "bab4d7e864d38a6e5790d7c931d9c4824a6c880f"
    }
  },
  {
    "oid": "6e528b3e595e94b6a714d5cfa4528b4a42aa2fad",
    "message": "\u4f18\u5316 insertOrUpdate",
    "date": "2017-01-13T03:16:11Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/6e528b3e595e94b6a714d5cfa4528b4a42aa2fad",
    "details": {
      "sha": "811e7b8014c1f59a0880cdb981660ec6c771740a",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/service/impl/ServiceImpl.java",
      "status": "modified",
      "additions": 16,
      "deletions": 18,
      "changes": 34,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/6e528b3e595e94b6a714d5cfa4528b4a42aa2fad/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fservice%2Fimpl%2FServiceImpl.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/6e528b3e595e94b6a714d5cfa4528b4a42aa2fad/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fservice%2Fimpl%2FServiceImpl.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fservice%2Fimpl%2FServiceImpl.java?ref=6e528b3e595e94b6a714d5cfa4528b4a42aa2fad",
      "patch": "@@ -15,8 +15,16 @@\n  */\n package com.baomidou.mybatisplus.service.impl;\n \n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.ibatis.logging.Log;\n+import org.apache.ibatis.logging.LogFactory;\n+import org.apache.ibatis.session.SqlSession;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n import com.baomidou.mybatisplus.entity.TableInfo;\n-import com.baomidou.mybatisplus.enums.IdType;\n import com.baomidou.mybatisplus.exceptions.MybatisPlusException;\n import com.baomidou.mybatisplus.mapper.BaseMapper;\n import com.baomidou.mybatisplus.mapper.SqlHelper;\n@@ -28,14 +36,6 @@\n import com.baomidou.mybatisplus.toolkit.ReflectionKit;\n import com.baomidou.mybatisplus.toolkit.StringUtils;\n import com.baomidou.mybatisplus.toolkit.TableInfoHelper;\n-import org.apache.ibatis.logging.Log;\n-import org.apache.ibatis.logging.LogFactory;\n-import org.apache.ibatis.session.SqlSession;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import java.io.Serializable;\n-import java.util.List;\n-import java.util.Map;\n \n /**\n  * <p>\n@@ -100,16 +100,14 @@ public boolean insertOrUpdate(T entity) {\n \t\t\t\tif (StringUtils.checkValNull(idVal)) {\n \t\t\t\t\treturn insert(entity);\n \t\t\t\t} else {\n-\t\t\t\t\t/* \u7279\u6b8a\u5904\u7406 INPUT \u4e3b\u952e\u7b56\u7565\u903b\u8f91 */\n-\t\t\t\t\tif (IdType.INPUT == tableInfo.getIdType()) {\n-\t\t\t\t\t\tT entityValue = selectById((Serializable) idVal);\n-\t\t\t\t\t\tif (null != entityValue) {\n-\t\t\t\t\t\t\treturn updateById(entity);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\treturn insert(entity);\n-\t\t\t\t\t\t}\n+\t\t\t\t\t/*\n+\t\t\t\t\t * \u66f4\u65b0\u6210\u529f\u76f4\u63a5\u8fd4\u56de\uff0c\u5931\u8d25\u6267\u884c\u63d2\u5165\u903b\u8f91\n+\t\t\t\t\t */\n+\t\t\t\t\tboolean rlt = updateById(entity);\n+\t\t\t\t\tif (!rlt) {\n+\t\t\t\t\t\treturn insert(entity);\n \t\t\t\t\t}\n-\t\t\t\t\treturn updateById(entity);\n+\t\t\t\t\treturn rlt;\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tthrow new MybatisPlusException(\"Error:  Can not execute. Could not find @TableId.\");",
      "parent_sha": "138eed3c55f0971d5ac670aaeb8b345571fdce86"
    }
  },
  {
    "oid": "7418181fd1cf8c0821b0dfed0f3f91f9b84264e9",
    "message": "id \u81ea\u589e\u652f\u6301\u6307\u5b9a\u503c\uff0c\u4f18\u5316\u8c03\u6574",
    "date": "2021-06-07T04:39:55Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/7418181fd1cf8c0821b0dfed0f3f91f9b84264e9",
    "details": {
      "sha": "4b7d26d5caa2cdd4cadb238eaccd40652c17dd6f",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/7418181fd1cf8c0821b0dfed0f3f91f9b84264e9/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableInfo.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/7418181fd1cf8c0821b0dfed0f3f91f9b84264e9/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableInfo.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableInfo.java?ref=7418181fd1cf8c0821b0dfed0f3f91f9b84264e9",
      "patch": "@@ -273,10 +273,11 @@ public String chooseSelect(Predicate<TableFieldInfo> predicate) {\n     public String getKeyInsertSqlProperty(final String prefix, final boolean newLine) {\n         final String newPrefix = prefix == null ? EMPTY : prefix;\n         if (havePK()) {\n+            String keyColumn = SqlScriptUtils.safeParam(newPrefix + keyProperty) + COMMA;\n             if (idType == IdType.AUTO) {\n-                return SqlScriptUtils.convertIf(SqlScriptUtils.safeParam(keyProperty) + COMMA, String.format(\"%s != null\", keyProperty), false);\n+                return SqlScriptUtils.convertIf(keyColumn, String.format(\"%s != null\", keyProperty), newLine);\n             }\n-            return SqlScriptUtils.safeParam(newPrefix + keyProperty) + COMMA + (newLine ? NEWLINE : EMPTY);\n+            return keyColumn + (newLine ? NEWLINE : EMPTY);\n         }\n         return EMPTY;\n     }\n@@ -291,7 +292,7 @@ public String getKeyInsertSqlProperty(final String prefix, final boolean newLine\n     public String getKeyInsertSqlColumn(final boolean newLine) {\n         if (havePK()) {\n             if (idType == IdType.AUTO) {\n-                return SqlScriptUtils.convertIf(keyColumn + COMMA, String.format(\"%s != null\", keyProperty), newLine) ;\n+                return SqlScriptUtils.convertIf(keyColumn + COMMA, String.format(\"%s != null\", keyProperty), newLine);\n             }\n             return keyColumn + COMMA + (newLine ? NEWLINE : EMPTY);\n         }",
      "parent_sha": "bcba617a8ad969667150b0ad678c4112bff7b931"
    }
  },
  {
    "oid": "7b114469ae9eed0d0f00017bb26df8079d2ea7cc",
    "message": "\u5141\u8bb8\u6ce8\u5165\u81ea\u5b9a\u4e49\u4e8b\u52a1\u5de5\u5382 TransactionFactory",
    "date": "2021-09-20T19:59:35Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/7b114469ae9eed0d0f00017bb26df8079d2ea7cc",
    "details": {
      "sha": "06e8bd319a612b6fec73d5fc9b886c897a9dabb5",
      "filename": "mybatis-plus-boot-starter/src/main/java/com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/7b114469ae9eed0d0f00017bb26df8079d2ea7cc/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusAutoConfiguration.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/7b114469ae9eed0d0f00017bb26df8079d2ea7cc/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusAutoConfiguration.java?ref=7b114469ae9eed0d0f00017bb26df8079d2ea7cc",
      "patch": "@@ -43,6 +43,7 @@\n import org.springframework.beans.factory.BeanFactoryAware;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n import org.springframework.boot.autoconfigure.AutoConfigurationPackages;\n@@ -156,10 +157,13 @@ private void checkConfigFileExists() {\n     @SuppressWarnings(\"SpringJavaInjectionPointsAutowiringInspection\")\n     @Bean\n     @ConditionalOnMissingBean\n-    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n+    public SqlSessionFactory sqlSessionFactory(DataSource dataSource, @Autowired(required = false) TransactionFactory transactionFactory) throws Exception {\n         // TODO \u4f7f\u7528 MybatisSqlSessionFactoryBean \u800c\u4e0d\u662f SqlSessionFactoryBean\n         MybatisSqlSessionFactoryBean factory = new MybatisSqlSessionFactoryBean();\n         factory.setDataSource(dataSource);\n+        if (null != transactionFactory) {\n+            factory.setTransactionFactory(transactionFactory);\n+        }\n         factory.setVfs(SpringBootVFS.class);\n         if (StringUtils.hasText(this.properties.getConfigLocation())) {\n             factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));",
      "parent_sha": "130cda90a22df5e11c2c576744a98c8fa72f93eb"
    }
  },
  {
    "oid": "2c0de14ef285cd2bed22f4fb36608d02427a5edc",
    "message": "\u4fee\u6b63\u53cd\u5411\u5224\u65ad",
    "date": "2019-10-31T07:09:04Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/2c0de14ef285cd2bed22f4fb36608d02427a5edc",
    "details": {
      "sha": "2738de8fccc90e5607ce60a06f2342e5382a89dc",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableFieldInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/2c0de14ef285cd2bed22f4fb36608d02427a5edc/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/2c0de14ef285cd2bed22f4fb36608d02427a5edc/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmetadata%2FTableFieldInfo.java?ref=2c0de14ef285cd2bed22f4fb36608d02427a5edc",
      "patch": "@@ -175,7 +175,7 @@ public TableFieldInfo(GlobalConfig.DbConfig dbConfig, TableInfo tableInfo, Field\n             column = String.format(columnFormat, column);\n         }\n         this.column = column;\n-        if (TableInfoHelper.checkRelated(tableInfo.isUnderCamel(), this.property, this.column)) {\n+        if (!TableInfoHelper.checkRelated(tableInfo.isUnderCamel(), this.property, this.column)) {\n             this.sqlSelect = column;\n         } else {\n             String propertyFormat = dbConfig.getPropertyFormat();\n@@ -250,7 +250,7 @@ public TableFieldInfo(GlobalConfig.DbConfig dbConfig, TableInfo tableInfo, Field\n         }\n \n         this.column = column;\n-        if (TableInfoHelper.checkRelated(tableInfo.isUnderCamel(), this.property, this.column)) {\n+        if (!TableInfoHelper.checkRelated(tableInfo.isUnderCamel(), this.property, this.column)) {\n             this.sqlSelect = column;\n         } else {\n             String propertyFormat = dbConfig.getPropertyFormat();",
      "parent_sha": "39219c9a3b4e57416964f6a30440c926a5fb589b"
    }
  },
  {
    "oid": "183d0f6360eb6e8ce25bda881b76a2074aeedf0f",
    "message": "\u7b80\u5316.",
    "date": "2020-05-07T00:48:48Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/183d0f6360eb6e8ce25bda881b76a2074aeedf0f",
    "details": {
      "sha": "2871d6f60343d34fafa339f088d977903196349b",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/LambdaUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/183d0f6360eb6e8ce25bda881b76a2074aeedf0f/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FLambdaUtils.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/183d0f6360eb6e8ce25bda881b76a2074aeedf0f/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FLambdaUtils.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FLambdaUtils.java?ref=183d0f6360eb6e8ce25bda881b76a2074aeedf0f",
      "patch": "@@ -24,7 +24,6 @@\n import java.lang.ref.WeakReference;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n \n import static java.util.Locale.ENGLISH;\n@@ -59,13 +58,10 @@ public final class LambdaUtils {\n     public static <T> SerializedLambda resolve(SFunction<T, ?> func) {\n         Class<?> clazz = func.getClass();\n         String canonicalName = clazz.getCanonicalName();\n-        return Optional.ofNullable(FUNC_CACHE.get(canonicalName))\n-            .map(WeakReference::get)\n-            .orElseGet(() -> {\n-                SerializedLambda lambda = SerializedLambda.resolve(func);\n-                FUNC_CACHE.put(canonicalName, new WeakReference<>(lambda));\n-                return lambda;\n-            });\n+        return FUNC_CACHE.computeIfAbsent(canonicalName, (k) -> {\n+            SerializedLambda lambda = SerializedLambda.resolve(func);\n+            return new WeakReference<>(lambda);\n+        }).get();\n     }\n \n     /**",
      "parent_sha": "c2ee43980c6a6160694dedb143b85c3f39dacbb1"
    }
  },
  {
    "oid": "c12b843a3b6f58363681331a84a99f17846f3aa3",
    "message": "\u517c\u5bb9\u4e00\u4e0b",
    "date": "2018-11-20T08:58:53Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/c12b843a3b6f58363681331a84a99f17846f3aa3",
    "details": {
      "sha": "5c139c015b63971a8d0caebfc4ee832e7960c5ab",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java",
      "status": "modified",
      "additions": 36,
      "deletions": 17,
      "changes": 53,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/c12b843a3b6f58363681331a84a99f17846f3aa3/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2FIService.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/c12b843a3b6f58363681331a84a99f17846f3aa3/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2FIService.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2FIService.java?ref=c12b843a3b6f58363681331a84a99f17846f3aa3",
      "patch": "@@ -15,17 +15,17 @@\n  */\n package com.baomidou.mybatisplus.extension.service;\n \n+import com.baomidou.mybatisplus.core.conditions.Wrapper;\n+import com.baomidou.mybatisplus.core.metadata.IPage;\n+import com.baomidou.mybatisplus.core.toolkit.Wrappers;\n+import com.baomidou.mybatisplus.extension.toolkit.SqlHelper;\n+\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n \n-import com.baomidou.mybatisplus.core.conditions.Wrapper;\n-import com.baomidou.mybatisplus.core.metadata.IPage;\n-import com.baomidou.mybatisplus.core.toolkit.Wrappers;\n-import com.baomidou.mybatisplus.extension.toolkit.SqlHelper;\n-\n /**\n  * <p>\n  * \u9876\u7ea7 Service\n@@ -258,7 +258,7 @@ default <V> V getObj(Wrapper<T> queryWrapper, Function<? super Object, V> mapper\n      * @see Wrappers#emptyWrapper()\n      */\n     default int count() {\n-        return count(Wrappers.<T>emptyWrapper());\n+        return count(Wrappers.emptyWrapper());\n     }\n \n     /**\n@@ -278,7 +278,7 @@ default int count() {\n      * @see Wrappers#emptyWrapper()\n      */\n     default List<T> list() {\n-        return list(Wrappers.<T>emptyWrapper());\n+        return list(Wrappers.emptyWrapper());\n     }\n \n     /**\n@@ -300,7 +300,7 @@ default List<T> list() {\n      * @see Wrappers#emptyWrapper()\n      */\n     default IPage<T> page(IPage<T> page) {\n-        return page(page, Wrappers.<T>emptyWrapper());\n+        return page(page, Wrappers.emptyWrapper());\n     }\n \n     /**\n@@ -320,31 +320,50 @@ default IPage<T> page(IPage<T> page) {\n      * @see Wrappers#emptyWrapper()\n      */\n     default List<Map<String, Object>> listMaps() {\n-        return listMaps(Wrappers.<T>emptyWrapper());\n+        return listMaps(Wrappers.emptyWrapper());\n     }\n \n     /**\n      * <p>\n-     * \u6839\u636e Wrapper \u6761\u4ef6\uff0c\u67e5\u8be2\u5168\u90e8\u8bb0\u5f55\n+     * \u67e5\u8be2\u5168\u90e8\u8bb0\u5f55\n      * </p>\n-     *\n-     * @param queryWrapper \u5b9e\u4f53\u5bf9\u8c61\u5c01\u88c5\u64cd\u4f5c\u7c7b {@link com.baomidou.mybatisplus.core.conditions.query.QueryWrapper}\n-     * @param mapper       \u8f6c\u6362\u51fd\u6570\n      */\n-    <V> List<V> listObjs(Wrapper<T> queryWrapper, Function<? super Object, V> mapper);\n+    default List<Object> listObjs() {\n+        return listObjs(Function.identity());\n+    }\n \n     /**\n      * <p>\n      * \u67e5\u8be2\u5168\u90e8\u8bb0\u5f55\n      * </p>\n      *\n      * @param mapper \u8f6c\u6362\u51fd\u6570\n-     * @see Wrappers#emptyWrapper()\n      */\n     default <V> List<V> listObjs(Function<? super Object, V> mapper) {\n-        return listObjs(Wrappers.<T>emptyWrapper(), mapper);\n+        return listObjs(Wrappers.emptyWrapper(), mapper);\n     }\n \n+    /**\n+     * <p>\n+     * \u6839\u636e Wrapper \u6761\u4ef6\uff0c\u67e5\u8be2\u5168\u90e8\u8bb0\u5f55\n+     * </p>\n+     *\n+     * @param queryWrapper \u5b9e\u4f53\u5bf9\u8c61\u5c01\u88c5\u64cd\u4f5c\u7c7b {@link com.baomidou.mybatisplus.core.conditions.query.QueryWrapper}\n+     */\n+    default List<Object> listObjs(Wrapper<T> queryWrapper) {\n+        return listObjs(Wrappers.emptyWrapper(), Function.identity());\n+    }\n+\n+    /**\n+     * <p>\n+     * \u6839\u636e Wrapper \u6761\u4ef6\uff0c\u67e5\u8be2\u5168\u90e8\u8bb0\u5f55\n+     * </p>\n+     *\n+     * @param queryWrapper \u5b9e\u4f53\u5bf9\u8c61\u5c01\u88c5\u64cd\u4f5c\u7c7b {@link com.baomidou.mybatisplus.core.conditions.query.QueryWrapper}\n+     * @param mapper       \u8f6c\u6362\u51fd\u6570\n+     */\n+    <V> List<V> listObjs(Wrapper<T> queryWrapper, Function<? super Object, V> mapper);\n+\n     /**\n      * <p>\n      * \u7ffb\u9875\u67e5\u8be2\n@@ -364,6 +383,6 @@ default <V> List<V> listObjs(Function<? super Object, V> mapper) {\n      * @see Wrappers#emptyWrapper()\n      */\n     default IPage<Map<String, Object>> pageMaps(IPage<T> page) {\n-        return pageMaps(page, Wrappers.<T>emptyWrapper());\n+        return pageMaps(page, Wrappers.emptyWrapper());\n     }\n }",
      "parent_sha": "75fd1feb01fa74fda20c57ab30c8cca7cd21c6dc"
    }
  },
  {
    "oid": "38511538bfa6309ef64f9b51548a777c10a3e8ca",
    "message": "Enhance test case\n\n\u8ba9\u522b\u4eba\u77e5\u9053\u600e\u4e48\u7528sqlSelect",
    "date": "2017-07-25T09:50:39Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/38511538bfa6309ef64f9b51548a777c10a3e8ca",
    "details": {
      "sha": "8fa1fbaf41ce07797452918f83ac8e48c4a44ff1",
      "filename": "src/test/java/com/baomidou/mybatisplus/test/h2/H2UserTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/38511538bfa6309ef64f9b51548a777c10a3e8ca/src%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2FH2UserTest.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/38511538bfa6309ef64f9b51548a777c10a3e8ca/src%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2FH2UserTest.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/src%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fh2%2FH2UserTest.java?ref=38511538bfa6309ef64f9b51548a777c10a3e8ca",
      "patch": "@@ -184,7 +184,7 @@ public void testUpdateAllColumnByIdOptLock() {\n \n     @Test\n     public void testUpdateByEntityWrapperOptLock() {\n-        Long id = 992L;\n+        Long id = 1992L;\n         H2User user = new H2User();\n         user.setId(id);\n         user.setName(\"992\");\n@@ -414,4 +414,17 @@ public void testCondition() {\n \n     }\n \n+\n+    @Test\n+    public void testEntityWrapperSelectSql(){\n+        EntityWrapper<H2User> ew = new EntityWrapper<>();\n+        ew.setSqlSelect(\"test_id as id, name, age\");\n+        List<H2User> list = userService.selectList(ew);\n+        for(H2User u:list){\n+            Assert.assertNotNull(u.getId());\n+            Assert.assertNotNull(u.getName());\n+            Assert.assertNull(u.getPrice());\n+        }\n+\n+    }\n }",
      "parent_sha": "708c96a3dd8941adf60df695e004d142ababf27a"
    }
  },
  {
    "oid": "8172827e7d853d92c59cc7686b08ecd877fcafff",
    "message": "Optimize  Connection",
    "date": "2017-03-15T07:25:32Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/8172827e7d853d92c59cc7686b08ecd877fcafff",
    "details": {
      "sha": "89cb69d56633287f9d2c3af34f2eb80bdeb3a97e",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/CachePaginationInterceptor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 15,
      "changes": 22,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/8172827e7d853d92c59cc7686b08ecd877fcafff/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FCachePaginationInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/8172827e7d853d92c59cc7686b08ecd877fcafff/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FCachePaginationInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FCachePaginationInterceptor.java?ref=8172827e7d853d92c59cc7686b08ecd877fcafff",
      "patch": "@@ -18,7 +18,6 @@\n import com.baomidou.mybatisplus.entity.CountOptimize;\n import com.baomidou.mybatisplus.plugins.pagination.DialectFactory;\n import com.baomidou.mybatisplus.plugins.pagination.Pagination;\n-import com.baomidou.mybatisplus.toolkit.IOUtils;\n import com.baomidou.mybatisplus.toolkit.PluginUtils;\n import com.baomidou.mybatisplus.toolkit.SqlUtils;\n import com.baomidou.mybatisplus.toolkit.StringUtils;\n@@ -114,24 +113,17 @@ public Object intercept(Invocation invocation) throws Throwable {\n \t\t\tString originalSql = (String) boundSql.getSql();\n \n \t\t\tif (rowBounds instanceof Pagination) {\n-\t\t\t\tConnection connection = null;\n-\t\t\t\ttry {\n-\t\t\t\t\tPagination page = (Pagination) rowBounds;\n-\t\t\t\t\tif (page.isSearchCount()) {\n-\t\t\t\t\t\tconnection = mappedStatement.getConfiguration().getEnvironment().getDataSource().getConnection();\n-\t\t\t\t\t\tCountOptimize countOptimize = SqlUtils.getCountOptimize(originalSql, optimizeType, dialectType,\n-\t\t\t\t\t\t\t\tpage.isOptimizeCount());\n-\t\t\t\t\t\tsuper.count(countOptimize.getCountSQL(), mappedStatement, boundSql, page);\n-\t\t\t\t\t\tif (page.getTotal() <= 0) {\n-\t\t\t\t\t\t\treturn invocation.proceed();\n-\t\t\t\t\t\t}\n+\t\t\t\tPagination page = (Pagination) rowBounds;\n+\t\t\t\tif (page.isSearchCount()) {\n+\t\t\t\t\tCountOptimize countOptimize = SqlUtils.getCountOptimize(originalSql, optimizeType, dialectType,\n+\t\t\t\t\t\t\tpage.isOptimizeCount());\n+\t\t\t\t\tsuper.count(countOptimize.getCountSQL(), mappedStatement, boundSql, page);\n+\t\t\t\t\tif (page.getTotal() <= 0) {\n+\t\t\t\t\t\treturn invocation.proceed();\n \t\t\t\t\t}\n-\t\t\t\t} finally {\n-\t\t\t\t\tIOUtils.closeQuietly(connection);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\n \t\treturn invocation.proceed();\n \n \t}",
      "parent_sha": "21d938a10b2fc56c21e81042eda56049776b7f97"
    }
  },
  {
    "oid": "c10ab59714f0d968f0176fe43524041318d9cc17",
    "message": "\u591a\u6761\u8bb0\u5f55\u76f4\u63a5\u629b\u51fa\u5f02\u5e38",
    "date": "2021-06-18T05:57:02Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/c10ab59714f0d968f0176fe43524041318d9cc17",
    "details": {
      "sha": "7fad17614842b274a63e5d858151f1218207c2ed",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/c10ab59714f0d968f0176fe43524041318d9cc17/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmapper%2FBaseMapper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/c10ab59714f0d968f0176fe43524041318d9cc17/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmapper%2FBaseMapper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fmapper%2FBaseMapper.java?ref=c10ab59714f0d968f0176fe43524041318d9cc17",
      "patch": "@@ -19,6 +19,7 @@\n import com.baomidou.mybatisplus.core.metadata.IPage;\n import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\n import com.baomidou.mybatisplus.core.toolkit.Constants;\n+import com.baomidou.mybatisplus.core.toolkit.ExceptionUtils;\n import org.apache.ibatis.annotations.Param;\n \n import java.io.Serializable;\n@@ -163,7 +164,9 @@ public interface BaseMapper<T> extends Mapper<T> {\n     default T selectOne(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper) {\n         List<T> ts = this.selectList(queryWrapper);\n         if (CollectionUtils.isNotEmpty(ts)) {\n-            System.err.println(\"One record is expected, but the query result is multiple records\");\n+            if (ts.size() > 1) {\n+                throw ExceptionUtils.mpe(\"One record is expected, but the query result is multiple records\");\n+            }\n             return ts.get(0);\n         }\n         return null;",
      "parent_sha": "60d20f3aa4b56da1b44d963d220d97c9fbf3b3a6"
    }
  },
  {
    "oid": "8cd7bc5808fd920ef45969d2e3998667d60d0c59",
    "message": "\u79cb\u79cb cv \u9519\u4e86",
    "date": "2019-03-25T07:31:42Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/8cd7bc5808fd920ef45969d2e3998667d60d0c59",
    "details": {
      "sha": "79e40e48120d07e278a41c43d94f7da4f1400a2e",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/UpdateById.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/8cd7bc5808fd920ef45969d2e3998667d60d0c59/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2Fmethods%2FUpdateById.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/8cd7bc5808fd920ef45969d2e3998667d60d0c59/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2Fmethods%2FUpdateById.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2Fmethods%2FUpdateById.java?ref=8cd7bc5808fd920ef45969d2e3998667d60d0c59",
      "patch": "@@ -38,7 +38,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode\n         StringBuilder append = new StringBuilder(\"<if test=\\\"et instanceof java.util.Map\\\">\")\n             .append(\"<if test=\\\"et.\").append(\"MP_OPTLOCK_VERSION_ORIGINAL\").append(\"!=null\\\">\")\n             .append(\" AND ${et.\").append(\"MP_OPTLOCK_VERSION_COLUMN\")\n-            .append(\"}=#{et.\").append(\"MP_OPTLOCK_ET_ORIGINAL\").append(StringPool.RIGHT_BRACE)\n+            .append(\"}=#{et.\").append(\"MP_OPTLOCK_VERSION_ORIGINAL\").append(StringPool.RIGHT_BRACE)\n             .append(\"</if></if>\");\n         if (logicDelete) {\n             append.append(tableInfo.getLogicDeleteSql(true, false));",
      "parent_sha": "ff4e28ca48b8fe3350e9027bae5993ba9892e075"
    }
  },
  {
    "oid": "16a25ccc37b9b5885aa3a9b9e9a8f98d030f0817",
    "message": "\u4fee\u6539Idwork\u6d4b\u8bd5",
    "date": "2017-05-10T03:00:15Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/16a25ccc37b9b5885aa3a9b9e9a8f98d030f0817",
    "details": {
      "sha": "e34979be0a5756bf081605b0eb4080d3acfb0d67",
      "filename": "mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/IdWorkerTest.java",
      "status": "modified",
      "additions": 52,
      "deletions": 28,
      "changes": 80,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/16a25ccc37b9b5885aa3a9b9e9a8f98d030f0817/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2FIdWorkerTest.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/16a25ccc37b9b5885aa3a9b9e9a8f98d030f0817/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2FIdWorkerTest.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2FIdWorkerTest.java?ref=16a25ccc37b9b5885aa3a9b9e9a8f98d030f0817",
      "patch": "@@ -1,7 +1,16 @@\n package com.baomidou.mybatisplus.test;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.ExecutorCompletionService;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n \n import com.baomidou.mybatisplus.toolkit.IdWorker;\n \n@@ -31,34 +40,49 @@\n  */\n public class IdWorkerTest {\n \n-    /**\n-     * \u6d4b\u8bd5\n-     */\n-    public static void main(String[] args) {\n-        int count = 1000;\n-        ExecutorService executorService = Executors.newFixedThreadPool(count);\n-        for (int i = 0; i < count; i++) {\n-            executorService.execute(new IdWorkerTest().new Task());\n-        }\n-        executorService.shutdown();\n-        while (!executorService.isTerminated()) {\n-            try {\n-                Thread.sleep(10);\n-            } catch (InterruptedException e) {\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n+\t@Test\n+\tpublic void test() throws Exception {\n+\t\tint count = 1000;\n+\t\tExecutorService executorService = Executors.newFixedThreadPool(20);\n+\t\tfinal List<Long> results = new ArrayList<>();\n+\t\tCompletionService<Long> cs = new ExecutorCompletionService<Long>(executorService);\n+\n+\t\tfor (int i = 1; i < count; i++) {\n+\t\t\tcs.submit(new Callable<Long>() {\n+\t\t\t\tpublic Long call() throws Exception {\n+\t\t\t\t\treturn IdWorker.getId();\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\tfor (int i = 0; i < count; i++) {\n+\t\t\tFuture<Long> future = executorService.submit(new Callable<Long>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic Long call() throws Exception {\n+\t\t\t\t\treturn IdWorker.getId();\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tresults.add(future.get());\n+\t\t}\n+\t\texecutorService.shutdown();\n+\t\tint odd = 0;\n+\t\tint even = 0;\n+\t\tList<Long> ttt = new ArrayList<>();\n+\t\tfor (Long id : results) {\n \n-    public class Task implements Runnable {\n+\t\t\tif (ttt.contains(id)) {\n+\t\t\t\tSystem.err.println(\"ssss\");\n+\t\t\t}\n+\t\t\tttt.add(id);\n+\t\t\tif (id % 2 != 0) {\n+\t\t\t\todd++;\n+\t\t\t} else {\n+\t\t\t\teven++;\n+\t\t\t}\n+\t\t}\n+\t\tSystem.err.println(\"\u5947\u6570:\" + odd);\n+\t\tSystem.err.println(\"\u5076\u6570:\" + even);\n+\t\tAssert.assertTrue(odd >= 450 && odd <= 550);\n+\t\tAssert.assertTrue(even >= 450 && even <= 550);\n+\t}\n \n-        public void run() {\n-            try {\n-                long id = IdWorker.getId();\n-                System.err.println(id);\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n }",
      "parent_sha": "8a413f276c8f513ba4b4e67c7d7d0eb6db84278b"
    }
  },
  {
    "oid": "d59c771621e63f3e10b213d50695de91c8312852",
    "message": "\u4fee\u590d\u5206\u9875\u9519\u8bef",
    "date": "2016-11-13T11:52:51Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/d59c771621e63f3e10b213d50695de91c8312852",
    "details": {
      "sha": "1ac923c74011d74ec38556eb81d82872398aa540",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/PaginationInterceptor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/d59c771621e63f3e10b213d50695de91c8312852/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPaginationInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/d59c771621e63f3e10b213d50695de91c8312852/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPaginationInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPaginationInterceptor.java?ref=d59c771621e63f3e10b213d50695de91c8312852",
      "patch": "@@ -127,21 +127,21 @@ public Object intercept(Invocation invocation) throws Throwable {\n \t\t\t\t\tStringBuffer countSql = new StringBuffer(\"SELECT COUNT(1) AS TOTAL \");\r\n \t\t\t\t\tif (page.isOptimizeCount()) {\r\n \t\t\t\t\t\tString tempSql = originalSql.replaceAll(\"(?i)ORDER[\\\\s]+BY\", \"ORDER BY\");\r\n-\t\t\t\t\t\tString indexOfSql = originalSql.toUpperCase();\r\n+\t\t\t\t\t\tString indexOfSql = tempSql.toUpperCase();\r\n \t\t\t\t\t\tif (!indexOfSql.contains(\"DISTINCT\")) {\r\n \t\t\t\t\t\t\tint formIndex = indexOfSql.indexOf(\"FROM\");\r\n \t\t\t\t\t\t\tint orderByIndex = indexOfSql.lastIndexOf(\"ORDER BY\");\r\n \t\t\t\t\t\t\tif (formIndex > -1) {\r\n \t\t\t\t\t\t\t\t// \u65e0\u6392\u5e8f\u60c5\u51b5\u5904\u7406\r\n \t\t\t\t\t\t\t\tif (orderByIndex > -1) {\r\n-\t\t\t\t\t\t\t\t\ttempSql = originalSql.substring(0, orderByIndex);\r\n+\t\t\t\t\t\t\t\t\ttempSql = tempSql.substring(0, orderByIndex);\r\n \t\t\t\t\t\t\t\t\tcountSql.append(tempSql.substring(formIndex));\r\n \t\t\t\t\t\t\t\t\torderBy = false;\r\n \t\t\t\t\t\t\t\t} else {\r\n-\t\t\t\t\t\t\t\t\tcountSql.append(originalSql.substring(formIndex));\r\n+\t\t\t\t\t\t\t\t\tcountSql.append(tempSql.substring(formIndex));\r\n \t\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\t} else {\r\n-\t\t\t\t\t\t\t\tcountSql.append(\"FROM (\").append(tempSql).append(\") A\");\r\n+\t\t\t\t\t\t\t\tcountSql.append(\"FROM (\").append(originalSql).append(\") A\");\r\n \t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t} else {\r\n \t\t\t\t\t\t\tcountSql.append(\"FROM (\").append(originalSql).append(\") A\");\r",
      "parent_sha": "48f678d73abcc8e51ebf337723dd54856aaecadc"
    }
  },
  {
    "oid": "879c5a3bea9345ebe1be4064f5dc068acb0b5b31",
    "message": "\u4fee\u590d\u9017\u53f7\u5199\u7684bug",
    "date": "2019-04-03T11:29:22Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/879c5a3bea9345ebe1be4064f5dc068acb0b5b31",
    "details": {
      "sha": "7fbb7e4d27b3ebb12adf37cc1ced29b629e4fb38",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/TableInfoHelper.java",
      "status": "modified",
      "additions": 36,
      "deletions": 14,
      "changes": 50,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/879c5a3bea9345ebe1be4064f5dc068acb0b5b31/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FTableInfoHelper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/879c5a3bea9345ebe1be4064f5dc068acb0b5b31/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FTableInfoHelper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FTableInfoHelper.java?ref=879c5a3bea9345ebe1be4064f5dc068acb0b5b31",
      "patch": "@@ -166,27 +166,26 @@ private static void initTableName(Class<?> clazz, GlobalConfig globalConfig, Tab\n         String prefix = null;\n \n         if (table != null) {\n-            if (StringUtils.isNotEmpty(table.value())) tableName = table.value();\n-            if (StringUtils.isNotEmpty(table.prefix())) prefix = table.prefix();\n+            if (StringUtils.isNotEmpty(table.value())) {\n+                tableName = table.value();\n+            } else {\n+                tableName = initTableNameWithDbConfig(tableName, dbConfig);\n+            }\n+            if (StringUtils.isNotEmpty(table.prefix())) {\n+                prefix = table.prefix();\n+            }\n             /* \u8868\u7ed3\u679c\u96c6\u6620\u5c04 */\n             if (StringUtils.isNotEmpty(table.resultMap())) {\n                 tableInfo.setResultMap(table.resultMap());\n             }\n         } else {\n-            // \u5f00\u542f\u8868\u540d\u4e0b\u5212\u7ebf\u7533\u660e\n-            if (dbConfig.isTableUnderline()) {\n-                tableName = StringUtils.camelToUnderline(tableName);\n-            }\n-            // \u5927\u5199\u547d\u540d\u5224\u65ad\n-            if (dbConfig.isCapitalMode()) {\n-                tableName = tableName.toUpperCase();\n-            } else {\n-                // \u9996\u5b57\u6bcd\u5c0f\u5199\n-                tableName = StringUtils.firstToLowerCase(tableName);\n-            }\n+            tableName = initTableNameWithDbConfig(tableName, dbConfig);\n+        }\n+\n+        if (StringUtils.isEmpty(prefix)) {\n+            prefix = dbConfig.getTablePrefix();\n         }\n \n-        if (StringUtils.isEmpty(prefix)) prefix = dbConfig.getTablePrefix();\n         tableInfo.setTableName(StringUtils.isEmpty(prefix) ? tableName : (prefix + StringPool.DOT + tableName));\n \n         /* \u5f00\u542f\u4e86\u81ea\u5b9a\u4e49 KEY \u751f\u6210\u5668 */\n@@ -195,6 +194,29 @@ private static void initTableName(Class<?> clazz, GlobalConfig globalConfig, Tab\n         }\n     }\n \n+    /**\n+     * \u6839\u636e DbConfig \u521d\u59cb\u5316 \u8868\u540d\n+     *\n+     * @param className \u7c7b\u540d\n+     * @param dbConfig  DbConfig\n+     * @return \u8868\u540d\n+     */\n+    private static String initTableNameWithDbConfig(String className, GlobalConfig.DbConfig dbConfig) {\n+        String tableName = className;\n+        // \u5f00\u542f\u8868\u540d\u4e0b\u5212\u7ebf\u7533\u660e\n+        if (dbConfig.isTableUnderline()) {\n+            tableName = StringUtils.camelToUnderline(tableName);\n+        }\n+        // \u5927\u5199\u547d\u540d\u5224\u65ad\n+        if (dbConfig.isCapitalMode()) {\n+            tableName = tableName.toUpperCase();\n+        } else {\n+            // \u9996\u5b57\u6bcd\u5c0f\u5199\n+            tableName = StringUtils.firstToLowerCase(tableName);\n+        }\n+        return tableName;\n+    }\n+\n     /**\n      * <p>\n      * \u521d\u59cb\u5316 \u8868\u4e3b\u952e,\u8868\u5b57\u6bb5",
      "parent_sha": "9a209f1b85996b3e7c80b3ee2d7b08586abb77c8"
    }
  },
  {
    "oid": "13145ab814e31a0254d437b97e5f8b8bdd614695",
    "message": "test",
    "date": "2024-12-26T07:59:23Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/13145ab814e31a0254d437b97e5f8b8bdd614695",
    "details": {
      "sha": "e5713ab96bc411b8a124f0e4548785121f582abf",
      "filename": "mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/test/metadata/TableInfoHelperTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/13145ab814e31a0254d437b97e5f8b8bdd614695/mybatis-plus-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fmetadata%2FTableInfoHelperTest.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/13145ab814e31a0254d437b97e5f8b8bdd614695/mybatis-plus-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fmetadata%2FTableInfoHelperTest.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fmetadata%2FTableInfoHelperTest.java?ref=13145ab814e31a0254d437b97e5f8b8bdd614695",
      "patch": "@@ -167,7 +167,7 @@ void testIsExistTableId() {\n \n     @Data\n     @EqualsAndHashCode(callSuper = true)\n-    @TableName(properties = {\"id\", \"name\"}, excludeProperty = {\"id\", \"name\"})\n+    @TableName(properties = {\"id\", \"name\"}, excludeProperty = {\"sex\", \"test\"})\n     private static class ModelFour2 extends BaseModel {\n \n         private String sex;",
      "parent_sha": "4587dbb9002a7f237b53850faa789551b3078f1c"
    }
  },
  {
    "oid": "b4156d247eeb08f1fae5e68941426ee68ffd68d0",
    "message": "\u4f18\u5316OptimisticLockerInnerInterceptor\u4e2d\u83b7\u53d6\u66f4\u65b0\u540e\u7248\u672c\u53f7\u4ee3\u7801",
    "date": "2023-11-21T03:46:24Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/b4156d247eeb08f1fae5e68941426ee68ffd68d0",
    "details": {
      "sha": "62e47507f78a26d3b445c52de3e160fe2a283274",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/OptimisticLockerInnerInterceptor.java",
      "status": "modified",
      "additions": 31,
      "deletions": 15,
      "changes": 46,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/b4156d247eeb08f1fae5e68941426ee68ffd68d0/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FOptimisticLockerInnerInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/b4156d247eeb08f1fae5e68941426ee68ffd68d0/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FOptimisticLockerInnerInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FOptimisticLockerInnerInterceptor.java?ref=b4156d247eeb08f1fae5e68941426ee68ffd68d0",
      "patch": "@@ -41,9 +41,11 @@\n import java.time.Instant;\n import java.time.LocalDateTime;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -276,6 +278,34 @@ private boolean find(Wrapper<?> wrapper) {\n         }\n     }\n \n+    private static class VersionFactory {\n+\n+        /**\n+         * \u5b58\u653e\u7248\u672c\u53f7\u7c7b\u578b\u4e0e\u83b7\u53d6\u66f4\u65b0\u540e\u7248\u672c\u53f7\u7684map\n+         */\n+        private static final Map<Class<?>, Function<Object, Object>> VERSION_FUNCTION_MAP = new HashMap<>();\n+\n+        static {\n+            VERSION_FUNCTION_MAP.put(long.class, version -> (long) version + 1);\n+            VERSION_FUNCTION_MAP.put(Long.class, version -> (long) version + 1);\n+            VERSION_FUNCTION_MAP.put(int.class, version -> (int) version + 1);\n+            VERSION_FUNCTION_MAP.put(Integer.class, version -> (int) version + 1);\n+            VERSION_FUNCTION_MAP.put(Date.class, version -> new Date());\n+            VERSION_FUNCTION_MAP.put(Timestamp.class, version -> new Timestamp(System.currentTimeMillis()));\n+            VERSION_FUNCTION_MAP.put(LocalDateTime.class, version -> LocalDateTime.now());\n+            VERSION_FUNCTION_MAP.put(Instant.class, version -> Instant.now());\n+        }\n+\n+        public static Object getUpdatedVersionVal(Class<?> clazz, Object originalVersionVal) {\n+            Function<Object, Object> versionFunction = VERSION_FUNCTION_MAP.get(clazz);\n+            if (versionFunction == null) {\n+                // not supported type, return original val.\n+                return originalVersionVal;\n+            }\n+            return versionFunction.apply(originalVersionVal);\n+        }\n+    }\n+\n     /**\n      * This method provides the control for version value.<BR>\n      * Returned value type must be the same as original one.\n@@ -284,20 +314,6 @@ private boolean find(Wrapper<?> wrapper) {\n      * @return updated version val\n      */\n     protected Object getUpdatedVersionVal(Class<?> clazz, Object originalVersionVal) {\n-        if (long.class.equals(clazz) || Long.class.equals(clazz)) {\n-            return ((long) originalVersionVal) + 1;\n-        } else if (int.class.equals(clazz) || Integer.class.equals(clazz)) {\n-            return ((int) originalVersionVal) + 1;\n-        } else if (Date.class.equals(clazz)) {\n-            return new Date();\n-        } else if (Timestamp.class.equals(clazz)) {\n-            return new Timestamp(System.currentTimeMillis());\n-        } else if (LocalDateTime.class.equals(clazz)) {\n-            return LocalDateTime.now();\n-        } else if (Instant.class.equals(clazz)) {\n-            return Instant.now();\n-        }\n-        //not supported type, return original val.\n-        return originalVersionVal;\n+        return VersionFactory.getUpdatedVersionVal(clazz, originalVersionVal);\n     }\n }",
      "parent_sha": "7d265e14a0916e196191c150a03fdf7f485aa40c"
    }
  },
  {
    "oid": "eb2295b7dec9e0b426b967557ef04c7d3244bb44",
    "message": "\u6d88\u9664\u8b66\u544a",
    "date": "2018-06-15T06:11:45Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/eb2295b7dec9e0b426b967557ef04c7d3244bb44",
    "details": {
      "sha": "2802ad6b1fa8ab01c8a8206cd205f4492196668b",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/eb2295b7dec9e0b426b967557ef04c7d3244bb44/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/eb2295b7dec9e0b426b967557ef04c7d3244bb44/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java?ref=eb2295b7dec9e0b426b967557ef04c7d3244bb44",
      "patch": "@@ -66,6 +66,7 @@\n  * @author hubin miemie HCL\n  * @since 2017-05-26\n  */\n+@SuppressWarnings(\"unchecked,serial\")\n public abstract class AbstractWrapper<T, R, This extends AbstractWrapper<T, R, This>> extends Wrapper<T>\n     implements Compare<This, R>, Nested<This>, Join<This>, Func<This, R>, Serializable {\n \n@@ -350,7 +351,6 @@ public This groupBy(boolean condition, R... columns) {\n         return doIt(condition, GROUP_BY, () -> columnsToString(columns));\n     }\n \n-    @SuppressWarnings(\"all\")\n     @Override\n     public This orderBy(boolean condition, boolean isAsc, R... columns) {\n         if (ArrayUtils.isEmpty(columns)) {\n@@ -369,9 +369,7 @@ public This orderBy(boolean condition, boolean isAsc, R... columns) {\n      * </p>\n      *\n      * @param columns \u591a\u5b57\u6bb5\n-     * @return\n      */\n-    @SuppressWarnings(\"all\")\n     protected String columnsToString(R... columns) {\n         return Arrays.stream(columns).map(this::columnToString).collect(joining(\",\"));\n     }\n@@ -400,7 +398,6 @@ protected This not(boolean condition) {\n      * @param column     \u5c5e\u6027\n      * @param sqlKeyword SQL \u5173\u952e\u8bcd\n      * @param val        \u6761\u4ef6\u503c\n-     * @return this\n      */\n     protected This addCondition(boolean condition, R column, SqlKeyword sqlKeyword, Object val) {\n         return doIt(condition, () -> columnToString(column), sqlKeyword, () -> formatSql(\"{0}\", val));\n@@ -413,7 +410,6 @@ protected This addCondition(boolean condition, R column, SqlKeyword sqlKeyword,\n      *\n      * @param val        \u67e5\u8be2\u6761\u4ef6\u503c\n      * @param sqlKeyword SQL \u5173\u952e\u8bcd\n-     * @return this\n      */\n     protected This addNestedCondition(boolean condition, String val, SqlKeyword sqlKeyword) {\n         return doIt(condition, sqlKeyword, () -> formatSql(\"({0})\", val));\n@@ -425,7 +421,6 @@ protected This addNestedCondition(boolean condition, String val, SqlKeyword sqlK\n      * </p>\n      *\n      * @param condition \u67e5\u8be2\u6761\u4ef6\u503c\n-     * @return this\n      */\n     protected This addNestedCondition(boolean condition, Function<This, This> func) {\n         return doIt(condition, () -> \"(\",",
      "parent_sha": "7b352a686fbf730083a40507797627e122806d42"
    }
  },
  {
    "oid": "676bc48d6c9ba37fe79c0b0ec1a5aa1af1e465b4",
    "message": "\u589e\u52a0superControllerClassPacket\u9a8c\u8bc1",
    "date": "2019-08-31T07:23:30Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/676bc48d6c9ba37fe79c0b0ec1a5aa1af1e465b4",
    "details": {
      "sha": "af06a5729aaa391a26b8e8ed580b1f4aeea2a43b",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/676bc48d6c9ba37fe79c0b0ec1a5aa1af1e465b4/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fengine%2FAbstractTemplateEngine.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/676bc48d6c9ba37fe79c0b0ec1a5aa1af1e465b4/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fengine%2FAbstractTemplateEngine.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fengine%2FAbstractTemplateEngine.java?ref=676bc48d6c9ba37fe79c0b0ec1a5aa1af1e465b4",
      "patch": "@@ -227,11 +227,14 @@ public Map<String, Object> getObjectMap(TableInfo tableInfo) {\n         objectMap.put(\"superServiceClass\", getSuperClassName(config.getSuperServiceClass()));\n         objectMap.put(\"superServiceImplClassPackage\", config.getSuperServiceImplClass());\n         objectMap.put(\"superServiceImplClass\", getSuperClassName(config.getSuperServiceImplClass()));\n-        objectMap.put(\"superControllerClassPackage\", config.getSuperControllerClass());\n+        objectMap.put(\"superControllerClassPackage\", verifyClassPacket(config.getSuperControllerClass()));\n         objectMap.put(\"superControllerClass\", getSuperClassName(config.getSuperControllerClass()));\n         return Objects.isNull(config.getInjectionConfig()) ? objectMap : config.getInjectionConfig().prepareObjectMap(objectMap);\n     }\n \n+    private String verifyClassPacket(String classPacket) {\n+        return StringUtils.isEmpty(classPacket) ? null : classPacket;\n+    }\n \n     /**\n      * \u83b7\u53d6\u7c7b\u540d",
      "parent_sha": "99fe5dbdacf19f0067d68e93797434ebc3f20807"
    }
  },
  {
    "oid": "672b98ff235dba4ae7e39e2206e1e04446a1823a",
    "message": "\u89e3\u51b3DataChangeRecorderInnerInterceptor\u51fa\u73b0\u683c\u5f0f\u8f6c\u6362\u9519\u8beforg.postgresql.util.PSQLException: conversion to class (#6416)",
    "date": "2024-08-20T07:49:22Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/672b98ff235dba4ae7e39e2206e1e04446a1823a",
    "details": {
      "sha": "9ed0f28dcb6b7b114c03c228fbd297d793cbde68",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/DataChangeRecorderInnerInterceptor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/672b98ff235dba4ae7e39e2206e1e04446a1823a/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FDataChangeRecorderInnerInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/672b98ff235dba4ae7e39e2206e1e04446a1823a/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FDataChangeRecorderInnerInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Finner%2FDataChangeRecorderInnerInterceptor.java?ref=672b98ff235dba4ae7e39e2206e1e04446a1823a",
      "patch": "@@ -350,7 +350,7 @@ protected Map<String, Object> getUpdatedColumnDatas(String tableName, BoundSql u\n                     }\n                 } else {\n                     if (columnName != null) {\n-                        columnNameValMap.put(columnName, String.valueOf(metaObject.getValue(propertyName)));\n+                        columnNameValMap.put(columnName, metaObject.getValue(propertyName));\n                     }\n                 }\n             } catch (Exception e) {\n@@ -430,7 +430,7 @@ private void dealWithUpdateWrapper(Map<Integer, String> columnSetIndexMap, Map<S\n                         if (setVal instanceof IEnum) {\n                             columnNameValMap.put(setColName, String.valueOf(((IEnum<?>) setVal).getValue()));\n                         } else {\n-                            columnNameValMap.put(setColName, String.valueOf(setVal));\n+                            columnNameValMap.put(setColName, setVal);\n                         }\n                     }\n                 }",
      "parent_sha": "345262cc7adc2514859654876d724ef2e36b6469"
    }
  },
  {
    "oid": "73878eb755a6695c718fc03d8866318824129991",
    "message": "\u4f18\u5316\u6279\u91cf\u64cd\u4f5c\u65b9\u6cd5.",
    "date": "2020-01-06T13:00:45Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/73878eb755a6695c718fc03d8866318824129991",
    "details": {
      "sha": "fff52cb39105cee584f34761e039570d0ed55143",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java",
      "status": "modified",
      "additions": 17,
      "deletions": 56,
      "changes": 73,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/73878eb755a6695c718fc03d8866318824129991/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/73878eb755a6695c718fc03d8866318824129991/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java?ref=73878eb755a6695c718fc03d8866318824129991",
      "patch": "@@ -161,7 +161,7 @@ public boolean saveOrUpdateBatch(Collection<T> entityList, int batchSize) {\n         Assert.notNull(tableInfo, \"error: can not execute. because can not find cache of TableInfo for entity!\");\n         String keyProperty = tableInfo.getKeyProperty();\n         Assert.notEmpty(keyProperty, \"error: can not execute. because can not find column for id from entity!\");\n-        return executeBatch(entityList, batchSize, ((sqlSession, entity) -> {\n+        return executeBatch(entityList, batchSize, (sqlSession, entity) -> {\n             Object idVal = ReflectionKit.getMethodValue(cls, entity, keyProperty);\n             if (StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal))) {\n                 sqlSession.insert(sqlStatement(SqlMethod.INSERT_ONE), entity);\n@@ -170,7 +170,7 @@ public boolean saveOrUpdateBatch(Collection<T> entityList, int batchSize) {\n                 param.put(Constants.ENTITY, entity);\n                 sqlSession.update(sqlStatement(SqlMethod.UPDATE_BY_ID), param);\n             }\n-        }));\n+        });\n     }\n \n     @Override\n@@ -212,11 +212,11 @@ public boolean update(T entity, Wrapper<T> updateWrapper) {\n     public boolean updateBatchById(Collection<T> entityList, int batchSize) {\n         Assert.notEmpty(entityList, \"error: entityList must not be empty\");\n         String sqlStatement = sqlStatement(SqlMethod.UPDATE_BY_ID);\n-        return executeBatch(entityList, batchSize, ((sqlSession, entity) -> {\n+        return executeBatch(entityList, batchSize, (sqlSession, entity) -> {\n             MapperMethod.ParamMap<T> param = new MapperMethod.ParamMap<>();\n             param.put(Constants.ENTITY, entity);\n             sqlSession.update(sqlStatement, param);\n-        }));\n+        });\n     }\n \n     @Override\n@@ -287,7 +287,7 @@ public <V> V getObj(Wrapper<T> queryWrapper, Function<? super Object, V> mapper)\n      *\n      * @param fun fun\n      * @since 3.3.0\n-     * @deprecated 3.3.1\n+     * @deprecated \u540e\u9762\u6211\u6253\u7b97\u79fb\u9664\u6389 {@link #executeBatch(Collection, int, BiConsumer)} }.\n      */\n     @Deprecated\n     protected boolean executeBatch(Consumer<SqlSession> fun) {\n@@ -324,22 +324,18 @@ protected boolean executeBatch(Consumer<SqlSession> fun) {\n         }\n     }\n \n+    /**\n+     * \u6267\u884c\u6279\u91cf\u64cd\u4f5c\n+     *\n+     * @param entityList \u6570\u636e\u96c6\u5408\n+     * @param batchSize  \u6279\u91cf\u5927\u5c0f\n+     * @param consumer   \u6267\u884c\u65b9\u6cd5\n+     * @param <E>        \u6cdb\u578b\n+     * @return \u64cd\u4f5c\u7ed3\u679c\n+     * @since 3.3.1\n+     */\n     protected <E> boolean executeBatch(Collection<E> entityList, int batchSize, BiConsumer<SqlSession, E> consumer) {\n-        Class<T> tClass = currentModelClass();\n-        SqlSessionFactory sqlSessionFactory = SqlHelper.sqlSessionFactory(tClass);\n-        SqlSessionHolder sqlSessionHolder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sqlSessionFactory);\n-        boolean transaction = TransactionSynchronizationManager.isSynchronizationActive();\n-        if (sqlSessionHolder != null) {\n-            SqlSession sqlSession = sqlSessionHolder.getSqlSession();\n-            //\u539f\u751f\u65e0\u6cd5\u652f\u6301\u6267\u884c\u5668\u5207\u6362\uff0c\u5f53\u5b58\u5728\u6279\u91cf\u64cd\u4f5c\u65f6\uff0c\u4f1a\u5d4c\u5957\u4e24\u4e2asession\u7684\uff0c\u4f18\u5148commit\u4e0a\u4e00\u4e2asession\n-            //\u6309\u9053\u7406\u6765\u8bf4\uff0c\u8fd9\u91cc\u7684\u503c\u5e94\u8be5\u4e00\u76f4\u4e3afalse\u3002\n-            sqlSession.commit(!transaction);\n-        }\n-        SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);\n-        if (!transaction) {\n-            log.warn(\"SqlSession [\" + sqlSession + \"] was not registered for synchronization because DataSource is not transactional\");\n-        }\n-        try {\n+        return executeBatch(sqlSession -> {\n             int size = entityList.size();\n             int i = 1;\n             for (E entity : entityList) {\n@@ -349,42 +345,7 @@ protected <E> boolean executeBatch(Collection<E> entityList, int batchSize, BiCo\n                 }\n                 i++;\n             }\n-            //\u975e\u4e8b\u7269\u60c5\u51b5\u4e0b\uff0c\u5f3a\u5236commit\u3002\n-            sqlSession.commit(!transaction);\n-            return true;\n-        } catch (Throwable t) {\n-            sqlSession.rollback();\n-            Throwable unwrapped = ExceptionUtil.unwrapThrowable(t);\n-            if (unwrapped instanceof RuntimeException) {\n-                MyBatisExceptionTranslator myBatisExceptionTranslator\n-                    = new MyBatisExceptionTranslator(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), true);\n-                throw Objects.requireNonNull(myBatisExceptionTranslator.translateExceptionIfPossible((RuntimeException) unwrapped));\n-            }\n-            throw ExceptionUtils.mpe(unwrapped);\n-        } finally {\n-            sqlSession.close();\n-        }\n+        });\n     }\n \n-    /**\n-     * \u6267\u884c\u6279\u91cf\u64cd\u4f5c\n-     *\n-     * @param sqlSession sqlSession\n-     * @param entityList \u6570\u636e\u96c6\u5408\n-     * @param batchSize  \u6279\u91cf\u5927\u5c0f\n-     * @param consumer   \u6267\u884c\u65b9\u6cd5\n-     * @since 3.3.1\n-     */\n-    @Deprecated\n-    protected <E> void execute(SqlSession sqlSession, Collection<E> entityList, int batchSize, Consumer<E> consumer) {\n-        int size = entityList.size();\n-        int i = 1;\n-        for (E entity : entityList) {\n-            consumer.accept(entity);\n-            if ((i % batchSize == 0) || i == size) {\n-                sqlSession.flushStatements();\n-            }\n-            i++;\n-        }\n-    }\n }",
      "parent_sha": "1e78257dec4dbf1a2cb009aaefa33e4c8e56cb6d"
    }
  },
  {
    "oid": "82a54ada7f6b2446207efd8c39159e972856e30f",
    "message": "fix bug",
    "date": "2020-08-20T13:29:36Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/82a54ada7f6b2446207efd8c39159e972856e30f",
    "details": {
      "sha": "b617923f7c2970d2f03939d68bac7b1fc18cc978",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/FirebirdQuery.java",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/82a54ada7f6b2446207efd8c39159e972856e30f/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FFirebirdQuery.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/82a54ada7f6b2446207efd8c39159e972856e30f/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FFirebirdQuery.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FFirebirdQuery.java?ref=82a54ada7f6b2446207efd8c39159e972856e30f",
      "patch": "@@ -28,7 +28,7 @@ public class FirebirdQuery extends AbstractDbQuery {\n \n     @Override\n     public String tablesSql() {\n-        return \"select rdb$relation_name as NAME \" +\n+        return \"select trim(rdb$relation_name) as rdb$relation_name \" +\n             \"from rdb$relations \" +\n             \"where rdb$view_blr is null \" +\n             \"and (rdb$system_flag is null or rdb$system_flag = 0)\";\n@@ -37,28 +37,29 @@ public String tablesSql() {\n \n     @Override\n     public String tableFieldsSql() {\n-        return \"select f.rdb$relation_name AS NAME, f.rdb$field_name AS FIELD, t.rdb$type_name AS  TYPE \" +\n+        return \"select trim(f.rdb$relation_name) AS rdb$relation_name, \" +\n+            \"trim(f.rdb$field_name) AS FIELD, t.rdb$type_name AS  TYPE, '' AS PK \" +\n             \"from rdb$relation_fields f \" +\n             \"join rdb$relations r on f.rdb$relation_name = r.rdb$relation_name \" +\n             \"JOIN rdb$fields fs ON f.rdb$field_source = fs.rdb$field_name \" +\n             \"JOIN rdb$types  t ON fs.rdb$field_type = t.rdb$type \" +\n             \"and r.rdb$view_blr is NULL \" +\n             \"AND t.rdb$field_name = 'RDB$FIELD_TYPE' \" +\n             \"and (r.rdb$system_flag is null or r.rdb$system_flag = 0) \" +\n-            \"AND f.rdb$relation_name = `%s` \" +\n+            \"AND f.rdb$relation_name = '%s' \" +\n             \"order by 1, f.rdb$field_position\";\n     }\n \n \n     @Override\n     public String tableName() {\n-        return \"NAME\";\n+        return \"rdb$relation_name\";\n     }\n \n \n     @Override\n     public String tableComment() {\n-        return \"COMMENT\";\n+        return \"\";\n     }\n \n \n@@ -76,13 +77,13 @@ public String fieldType() {\n \n     @Override\n     public String fieldComment() {\n-        return \"COMMENT\";\n+        return \"\";\n     }\n \n \n     @Override\n     public String fieldKey() {\n-        return \"KEY\";\n+        return \"PK\";\n     }\n \n }",
      "parent_sha": "8ec3fa5528e980ac62e8b060eb9467822dda4b2a"
    }
  },
  {
    "oid": "32d92d2b9340bf417e8bcfee3fa0f9147ed6586a",
    "message": "selectOne\u7ed3\u679c\u96c6\u4e0d\u552f\u4e00\u65f6,\u6dfb\u52a0\u8b66\u544a\u63d0\u793a",
    "date": "2016-10-11T09:29:38Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/32d92d2b9340bf417e8bcfee3fa0f9147ed6586a",
    "details": {
      "sha": "e0c792450cc6901bd5164e9c888bfbf897a24ac5",
      "filename": "mybatis-plus/src/main/java/com/baomidou/framework/service/impl/ServiceImpl.java",
      "status": "modified",
      "additions": 23,
      "deletions": 10,
      "changes": 33,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/32d92d2b9340bf417e8bcfee3fa0f9147ed6586a/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fservice%2Fimpl%2FServiceImpl.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/32d92d2b9340bf417e8bcfee3fa0f9147ed6586a/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fservice%2Fimpl%2FServiceImpl.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fservice%2Fimpl%2FServiceImpl.java?ref=32d92d2b9340bf417e8bcfee3fa0f9147ed6586a",
      "patch": "@@ -25,6 +25,8 @@\n import com.baomidou.mybatisplus.toolkit.ReflectionKit;\n import com.baomidou.mybatisplus.toolkit.TableInfo;\n import com.baomidou.mybatisplus.toolkit.TableInfoHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -41,6 +43,10 @@\n  * @Date 2016-04-20\n  */\n public class ServiceImpl<M extends BaseMapper<T, PK>, T, PK extends Serializable> implements IService<T, PK> {\n+\t/**\n+\t * \u5b50\u7c7b\u4e0d\u7528\u518d\u5b9a\u4e49logger\u5bf9\u8c61\n+\t */\n+\tprivate Logger logger = LoggerFactory.getLogger(getClass());\n \n \t@Autowired\n \tprotected M baseMapper;\n@@ -179,18 +185,25 @@ public T selectOne(T entity) {\n \t\treturn baseMapper.selectOne(entity);\n \t}\n \n-    public T selectOne(EntityWrapper<T> entityWrapper) {\n-        List<T> list = baseMapper.selectList(entityWrapper);\n-        return CollectionUtil.isNotEmpty(list) ? list.get(0) : null;\n-    }\n+\tpublic T selectOne(EntityWrapper<T> entityWrapper) {\n+\t\tList<T> list = baseMapper.selectList(entityWrapper);\n+\t\tif (CollectionUtil.isNotEmpty(list)) {\n+\t\t\tint size = list.size();\n+\t\t\tif (size > 1) {\n+\t\t\t\tlogger.warn(\"Warn: selectOne Method There are \" + size + \" results.\");\n+\t\t\t}\n+\t\t\treturn list.get(0);\n+\t\t}\n+\t\treturn null;\n+\t}\n \n-    public int selectCount(T entity) {\n-        return baseMapper.selectCount(entity);\n-    }\n+\tpublic int selectCount(T entity) {\n+\t\treturn baseMapper.selectCount(entity);\n+\t}\n \n-    public int selectCount(EntityWrapper<T> entityWrapper) {\n-        return baseMapper.selectCountByEw(entityWrapper);\n-    }\n+\tpublic int selectCount(EntityWrapper<T> entityWrapper) {\n+\t\treturn baseMapper.selectCountByEw(entityWrapper);\n+\t}\n \n \tpublic List<T> selectList(EntityWrapper<T> entityWrapper) {\n \t\treturn baseMapper.selectList(entityWrapper);",
      "parent_sha": "98699691d9fd2b2e6a3c04eea121c4271c6708a1"
    }
  },
  {
    "oid": "1b535ce28303e8069b71796367351f206f6c78cd",
    "message": "\u4fee\u6b63",
    "date": "2018-09-14T06:57:51Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/1b535ce28303e8069b71796367351f206f6c78cd",
    "details": {
      "sha": "bb51a4ed90a8855b93f8b18a8da6fe048e5d8af6",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/LogicDeleteByIdWithFill.java",
      "status": "modified",
      "additions": 10,
      "deletions": 11,
      "changes": 21,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/1b535ce28303e8069b71796367351f206f6c78cd/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Finjector%2Fmethods%2FLogicDeleteByIdWithFill.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/1b535ce28303e8069b71796367351f206f6c78cd/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Finjector%2Fmethods%2FLogicDeleteByIdWithFill.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Finjector%2Fmethods%2FLogicDeleteByIdWithFill.java?ref=1b535ce28303e8069b71796367351f206f6c78cd",
      "patch": "@@ -1,21 +1,19 @@\n package com.baomidou.mybatisplus.extension.injector.methods;\n \n-import static java.util.stream.Collectors.joining;\n-import static java.util.stream.Collectors.toList;\n-\n-import java.util.List;\n-\n-import org.apache.ibatis.mapping.MappedStatement;\n-import org.apache.ibatis.mapping.SqlSource;\n-\n import com.baomidou.mybatisplus.annotation.FieldFill;\n import com.baomidou.mybatisplus.core.enums.SqlMethod;\n import com.baomidou.mybatisplus.core.metadata.TableFieldInfo;\n import com.baomidou.mybatisplus.core.metadata.TableInfo;\n import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\n import com.baomidou.mybatisplus.core.toolkit.StringPool;\n-import com.baomidou.mybatisplus.core.toolkit.sql.SqlScriptUtils;\n import com.baomidou.mybatisplus.extension.injector.AbstractLogicMethod;\n+import org.apache.ibatis.mapping.MappedStatement;\n+import org.apache.ibatis.mapping.SqlSource;\n+\n+import java.util.List;\n+\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n \n /**\n  * <p>\n@@ -42,8 +40,9 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode\n                 .filter(i -> i.getFieldFill() == FieldFill.UPDATE || i.getFieldFill() == FieldFill.INSERT_UPDATE)\n                 .collect(toList());\n             if (CollectionUtils.isNotEmpty(fieldInfos)) {\n-                String sqlSet = SqlScriptUtils.convertTrim(fieldInfos.stream().map(i -> i.getSqlSet(StringPool.EMPTY))\n-                    .collect(joining(StringPool.EMPTY)), \"SET\", null, null, StringPool.COMMA);\n+                String sqlSet = \"SET \" + fieldInfos.stream().map(i -> i.getSqlSet(StringPool.EMPTY))\n+                    .collect(joining(StringPool.EMPTY)) +\n+                    tableInfo.getLogicDeleteSql(false, true);\n                 sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlSet,\n                     tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),\n                     tableInfo.getLogicDeleteSql(true, false));",
      "parent_sha": "7d768c3e68bd76c2d16e19601e95996581e86bfc"
    }
  },
  {
    "oid": "5d53503ab4286ef56b2e8390484d7411b3b3123b",
    "message": "\u4f18\u5316\u4e00\u4e0b\u6027\u80fd",
    "date": "2018-06-26T07:24:57Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/5d53503ab4286ef56b2e8390484d7411b3b3123b",
    "details": {
      "sha": "48f0e37f1feda1ffdafa5985fb1ff068c305e4a1",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ISqlSegmentList.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/5d53503ab4286ef56b2e8390484d7411b3b3123b/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FISqlSegmentList.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/5d53503ab4286ef56b2e8390484d7411b3b3123b/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FISqlSegmentList.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FISqlSegmentList.java?ref=5d53503ab4286ef56b2e8390484d7411b3b3123b",
      "patch": "@@ -57,10 +57,12 @@ public boolean addAll(Collection<? extends ISqlSegment> c) {\n                     if (isEmpty()) { //sqlSegment\u662f and \u6216\u8005 or \u5e76\u4e14\u5728\u7b2c\u4e00\u4f4d,\u4e0d\u7ee7\u7eed\u6267\u884c\n                         return false;\n                     }\n-                    if (match(predicateAll, lastValue)) {//\u4e0a\u6b21\u6700\u540e\u4e00\u4e2a\u503c\u662f and \u6216\u8005 or\n-                        if (match(predicateAnd, lastValue) && match(predicateAnd, sqlSegment)) {\n+                    boolean matchLastAnd = match(predicateAnd, lastValue);\n+                    boolean matchLastOr = match(predicateOr, lastValue);\n+                    if (matchLastAnd || matchLastOr) {//\u4e0a\u6b21\u6700\u540e\u4e00\u4e2a\u503c\u662f and \u6216\u8005 or\n+                        if (matchLastAnd && match(predicateAnd, sqlSegment)) {\n                             return false;\n-                        } else if (match(predicateOr, sqlSegment) && match(predicateOr, lastValue)) {\n+                        } else if (matchLastOr || match(predicateOr, sqlSegment)) {\n                             return false;\n                         } else {//\u548c\u4e0a\u6b21\u7684\u4e0d\u4e00\u6837\n                             removeLast();",
      "parent_sha": "c2a1cebe4099fdc9e386cda306fabb29fd32e720"
    }
  },
  {
    "oid": "34a0595a410b377ee0550835f9c77485d250eb6a",
    "message": "fix:import",
    "date": "2021-01-21T12:13:31Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/34a0595a410b377ee0550835f9c77485d250eb6a",
    "details": {
      "sha": "1ab92feb876602ba958504383a2b341cbf1ecf12",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 23,
      "changes": 24,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/34a0595a410b377ee0550835f9c77485d250eb6a/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/34a0595a410b377ee0550835f9c77485d250eb6a/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java?ref=34a0595a410b377ee0550835f9c77485d250eb6a",
      "patch": "@@ -39,29 +39,7 @@\n import java.util.function.BiPredicate;\n import java.util.function.Consumer;\n \n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.AND;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.ASC;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.BETWEEN;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.DESC;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.EQ;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.EXISTS;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.GE;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.GROUP_BY;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.GT;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.HAVING;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.IN;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.IS_NOT_NULL;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.IS_NULL;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.LE;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.LIKE;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.LT;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.NE;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.NOT;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.NOT_BETWEEN;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.NOT_IN;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.NOT_LIKE;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.OR;\n-import static com.baomidou.mybatisplus.core.enums.SqlKeyword.ORDER_BY;\n+import static com.baomidou.mybatisplus.core.enums.SqlKeyword.*;\n import static com.baomidou.mybatisplus.core.enums.WrapperKeyword.APPLY;\n import static java.util.stream.Collectors.joining;\n ",
      "parent_sha": "63734a058397c7d175584fa633227a3156f39d33"
    }
  },
  {
    "oid": "67ac26cbecc56da74686556b44b97c364787a749",
    "message": "fixed gitee issues/IL7W4",
    "date": "2018-07-13T02:10:12Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/67ac26cbecc56da74686556b44b97c364787a749",
    "details": {
      "sha": "7e57b54bbe773da60a2f2dbac7809b023e824d18",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/sql/SqlHelper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/67ac26cbecc56da74686556b44b97c364787a749/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2Fsql%2FSqlHelper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/67ac26cbecc56da74686556b44b97c364787a749/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2Fsql%2FSqlHelper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2Fsql%2FSqlHelper.java?ref=67ac26cbecc56da74686556b44b97c364787a749",
      "patch": "@@ -212,7 +212,7 @@ public static Wrapper<?> fillWrapper(IPage<?> page, Wrapper<?> wrapper) {\n             qw.orderByDesc(page.descs());\n         }\n         // MAP \u53c2\u6570\u67e5\u8be2\n-        if (ObjectUtils.isEmpty(page.condition())) {\n+        if (ObjectUtils.isNotEmpty(page.condition())) {\n             qw.allEq(page.condition());\n         }\n         return qw;",
      "parent_sha": "31ddd820edd75af10dfa7a2e5301431f7d6dedc7"
    }
  },
  {
    "oid": "903be85368b8920a7c12c5644b95cdd6094b509a",
    "message": "add map not null",
    "date": "2016-10-27T03:23:00Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/903be85368b8920a7c12c5644b95cdd6094b509a",
    "details": {
      "sha": "be0e25323afd8169ea2977f720e89fba00197f1f",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/903be85368b8920a7c12c5644b95cdd6094b509a/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/903be85368b8920a7c12c5644b95cdd6094b509a/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java?ref=903be85368b8920a7c12c5644b95cdd6094b509a",
      "patch": "@@ -670,7 +670,7 @@ protected String sqlWhere(TableInfo table, boolean space) {\n \t */\r\n \tprotected String sqlWhereByMap() {\r\n \t\tStringBuilder where = new StringBuilder();\r\n-\t\twhere.append(\"\\n<if test=\\\"cm!=null\\\">\");\r\n+\t\twhere.append(\"\\n<if test=\\\"cm!=null and !cm.isEmpty\\\">\");\r\n \t\twhere.append(\"\\n WHERE \");\r\n \t\twhere.append(\"\\n<foreach collection=\\\"cm.keys\\\" item=\\\"k\\\" separator=\\\"AND\\\"> \");\r\n \t\twhere.append(\"\\n${k}=#{cm[${k}]}\");\r",
      "parent_sha": "2db86f22d454e832016fbf18cca722be5d13d232"
    }
  },
  {
    "oid": "549a991f3bf43459c63075d38a9a65088a2380d7",
    "message": "\u4f18\u5316\u52a8\u6001 SQL \u811a\u672c\u6267\u884c\u65b9\u6cd5",
    "date": "2023-08-14T10:33:27Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/549a991f3bf43459c63075d38a9a65088a2380d7",
    "details": {
      "sha": "b326e267eb430c892af3ff7cb8de730cec7bbac6",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/ddl/DdlScript.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/549a991f3bf43459c63075d38a9a65088a2380d7/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fddl%2FDdlScript.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/549a991f3bf43459c63075d38a9a65088a2380d7/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fddl%2FDdlScript.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fddl%2FDdlScript.java?ref=549a991f3bf43459c63075d38a9a65088a2380d7",
      "patch": "@@ -90,16 +90,20 @@ public void run(Reader reader, boolean autoCommit) throws Exception {\n         this.run(reader, autoCommit, null);\n     }\n \n+    public void run(Reader reader, boolean autoCommit, String delimiter) throws Exception {\n+        this.run(this.dataSource.getConnection(), reader, autoCommit, delimiter);\n+    }\n+\n     /**\n      * \u6267\u884c SQL \u811a\u672c\n      *\n+     * @param connection {@link Connection}\n      * @param reader     SQL \u811a\u672c\u5185\u5bb9\n      * @param autoCommit \u81ea\u52a8\u63d0\u4ea4\u4e8b\u52a1\n      * @param delimiter  \u6267\u884c SQL \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4 ; \u7b26\u53f7\u7ed3\u675f\u6267\u884c\n-     * @throws Exception\n      */\n-    public void run(Reader reader, boolean autoCommit, String delimiter) throws Exception {\n-        ScriptRunner scriptRunner = DdlHelper.getScriptRunner(dataSource.getConnection(), autoCommit);\n+    public void run(Connection connection, Reader reader, boolean autoCommit, String delimiter) {\n+        ScriptRunner scriptRunner = DdlHelper.getScriptRunner(connection, autoCommit);\n         // \u8bbe\u7f6e\u81ea\u5b9a\u4e49 SQL \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4 ; \u7b26\u53f7\u5206\u5272\n         if (StringUtils.isNotBlank(delimiter)) {\n             scriptRunner.setDelimiter(delimiter);\n@@ -132,7 +136,7 @@ public boolean execute(final String driverClassName, final String url, final Str\n             Class.forName(driverClassName);\n             connection = DriverManager.getConnection(url, user, password);\n             // \u6267\u884c SQL \u811a\u672c\n-            this.run(sql, delimiter);\n+            this.run(connection, new StringReader(sql), this.autoCommit, delimiter);\n             return true;\n         } catch (Exception e) {\n             if (null != connection) {",
      "parent_sha": "86d3d347e4e5a89628ef3463843e5ec2cbe68ed2"
    }
  },
  {
    "oid": "c5e0edb978db287a9818c525b756ad279054c4f2",
    "message": "\u4f18\u5316",
    "date": "2018-08-12T07:55:26Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/c5e0edb978db287a9818c525b756ad279054c4f2",
    "details": {
      "sha": "965ef77ab5fad26684d9e1b2b7ee201114d2f989",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/AbstractMethod.java",
      "status": "modified",
      "additions": 15,
      "deletions": 21,
      "changes": 36,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/c5e0edb978db287a9818c525b756ad279054c4f2/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2FAbstractMethod.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/c5e0edb978db287a9818c525b756ad279054c4f2/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2FAbstractMethod.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Finjector%2FAbstractMethod.java?ref=c5e0edb978db287a9818c525b756ad279054c4f2",
      "patch": "@@ -15,13 +15,14 @@\n  */\n package com.baomidou.mybatisplus.core.injector;\n \n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.lang.reflect.TypeVariable;\n-import java.lang.reflect.WildcardType;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n+import com.baomidou.mybatisplus.annotation.DbType;\n+import com.baomidou.mybatisplus.annotation.FieldFill;\n+import com.baomidou.mybatisplus.annotation.FieldStrategy;\n+import com.baomidou.mybatisplus.core.config.GlobalConfig;\n+import com.baomidou.mybatisplus.core.metadata.TableFieldInfo;\n+import com.baomidou.mybatisplus.core.metadata.TableInfo;\n+import com.baomidou.mybatisplus.core.parser.SqlParserHelper;\n+import com.baomidou.mybatisplus.core.toolkit.*;\n import org.apache.ibatis.builder.MapperBuilderAssistant;\n import org.apache.ibatis.executor.keygen.KeyGenerator;\n import org.apache.ibatis.executor.keygen.NoKeyGenerator;\n@@ -32,19 +33,12 @@\n import org.apache.ibatis.scripting.LanguageDriver;\n import org.apache.ibatis.session.Configuration;\n \n-import com.baomidou.mybatisplus.annotation.DbType;\n-import com.baomidou.mybatisplus.annotation.FieldFill;\n-import com.baomidou.mybatisplus.annotation.FieldStrategy;\n-import com.baomidou.mybatisplus.core.config.GlobalConfig;\n-import com.baomidou.mybatisplus.core.metadata.TableFieldInfo;\n-import com.baomidou.mybatisplus.core.metadata.TableInfo;\n-import com.baomidou.mybatisplus.core.parser.SqlParserHelper;\n-import com.baomidou.mybatisplus.core.toolkit.ArrayUtils;\n-import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\n-import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;\n-import com.baomidou.mybatisplus.core.toolkit.StringPool;\n-import com.baomidou.mybatisplus.core.toolkit.StringUtils;\n-import com.baomidou.mybatisplus.core.toolkit.TableInfoHelper;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n+import java.lang.reflect.WildcardType;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * <p>\n@@ -266,7 +260,7 @@ protected String sqlSelectColumns(TableInfo table, boolean entityWrapper) {\n \n             if (size >= 1) {\n                 // \u5b57\u6bb5\u5904\u7406\n-                columns.append(fieldList.stream().filter(i -> i.isSelect()).map(i -> {\n+                columns.append(fieldList.stream().filter(TableFieldInfo::isSelect).map(i -> {\n                     String v = sqlWordConvert(dbType, i.getColumn(), true);\n                     if (i.isRelated()) {\n                         v += (\" AS \" + sqlWordConvert(dbType, i.getProperty(), false));",
      "parent_sha": "b9e660b1d3230c3b336fe0c3dbdf4142da786502"
    }
  },
  {
    "oid": "15c0f1a36c71b71e52ae9ac5087911cd1a6f6b81",
    "message": "\u6dfb\u52a0\u6ce8\u91ca",
    "date": "2016-03-25T08:25:54Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/15c0f1a36c71b71e52ae9ac5087911cd1a6f6b81",
    "details": {
      "sha": "58e3dc6a0c444b71c6888ccf47beecac84675995",
      "filename": "mybatis-plus/src/main/java/com/baomidou/framework/spring/DataLoadingInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/15c0f1a36c71b71e52ae9ac5087911cd1a6f6b81/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fspring%2FDataLoadingInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/15c0f1a36c71b71e52ae9ac5087911cd1a6f6b81/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fspring%2FDataLoadingInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fspring%2FDataLoadingInterceptor.java?ref=15c0f1a36c71b71e52ae9ac5087911cd1a6f6b81",
      "patch": "@@ -18,7 +18,7 @@\n  *  <br>\r\n  *  //2\u3001\u914d\u7f6e\u6570\u636e\u52a0\u8f7d\u62e6\u622a\r\n  * \t<mvc:interceptors>\r\n- *   \t<bean class=\"com.dongdongxiaoyuan.common.DataLoadingInterceptor\" />\r\n+ *   \t<bean class=\"com.baomidou.framework.spring.DataLoadingInterceptor\" />\r\n  *  </mvc:interceptors>\r\n  * </p>\r\n  * \r",
      "parent_sha": "7ad78ad3494c83414b3ffba87d1f9f97dabb0107"
    }
  },
  {
    "oid": "eedb4f88b3d739eed3008508533a2896b4435f37",
    "message": "setSuperController chain\u5199\u6cd5",
    "date": "2019-12-12T07:04:34Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/eedb4f88b3d739eed3008508533a2896b4435f37",
    "details": {
      "sha": "2e3b56ed550e324bde13b4f528bca1bee4e04928",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/StrategyConfig.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/eedb4f88b3d739eed3008508533a2896b4435f37/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FStrategyConfig.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/eedb4f88b3d739eed3008508533a2896b4435f37/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FStrategyConfig.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FStrategyConfig.java?ref=eedb4f88b3d739eed3008508533a2896b4435f37",
      "patch": "@@ -290,12 +290,14 @@ public StrategyConfig setSuperEntityClass(Class<?> clazz, NamingStrategy columnN\n         return this;\n     }\n \n-    public void setSuperControllerClass(Class<?> clazz) {\n+    public StrategyConfig setSuperControllerClass(Class<?> clazz) {\n         this.superControllerClass = clazz.getName();\n+        return this;\n     }\n \n-    public void setSuperControllerClass(String superControllerClass) {\n+    public StrategyConfig setSuperControllerClass(String superControllerClass) {\n         this.superControllerClass = superControllerClass;\n+        return this;\n     }\n \n     /**",
      "parent_sha": "5d498ac8d25127281c5ed109e168b35fe611f6e7"
    }
  },
  {
    "oid": "029b55af21b1fe42654b6e18b0f27bed08c8b6b5",
    "message": "\u7edf\u4e00\u9ed8\u8ba4\u6279\u91cf\u63d0\u4ea4\u6570\u91cf\u503c\u53d8\u91cf",
    "date": "2022-12-08T06:54:53Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/029b55af21b1fe42654b6e18b0f27bed08c8b6b5",
    "details": {
      "sha": "68b57d074dad79dfe1b886ca57c9afe75f758bad",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/Db.java",
      "status": "modified",
      "additions": 12,
      "deletions": 26,
      "changes": 38,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/029b55af21b1fe42654b6e18b0f27bed08c8b6b5/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Ftoolkit%2FDb.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/029b55af21b1fe42654b6e18b0f27bed08c8b6b5/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Ftoolkit%2FDb.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Ftoolkit%2FDb.java?ref=029b55af21b1fe42654b6e18b0f27bed08c8b6b5",
      "patch": "@@ -1,34 +1,24 @@\n package com.baomidou.mybatisplus.extension.toolkit;\n \n-import java.io.Serializable;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import org.apache.ibatis.binding.MapperMethod;\n-import org.apache.ibatis.logging.Log;\n-import org.apache.ibatis.logging.LogFactory;\n-\n import com.baomidou.mybatisplus.core.conditions.AbstractWrapper;\n import com.baomidou.mybatisplus.core.enums.SqlMethod;\n import com.baomidou.mybatisplus.core.metadata.IPage;\n import com.baomidou.mybatisplus.core.metadata.TableInfo;\n import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;\n-import com.baomidou.mybatisplus.core.toolkit.Assert;\n-import com.baomidou.mybatisplus.core.toolkit.ClassUtils;\n-import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\n-import com.baomidou.mybatisplus.core.toolkit.Constants;\n-import com.baomidou.mybatisplus.core.toolkit.ExceptionUtils;\n-import com.baomidou.mybatisplus.core.toolkit.StringUtils;\n-import com.baomidou.mybatisplus.core.toolkit.Wrappers;\n+import com.baomidou.mybatisplus.core.toolkit.*;\n import com.baomidou.mybatisplus.core.toolkit.support.SFunction;\n import com.baomidou.mybatisplus.extension.conditions.query.LambdaQueryChainWrapper;\n import com.baomidou.mybatisplus.extension.conditions.query.QueryChainWrapper;\n import com.baomidou.mybatisplus.extension.conditions.update.LambdaUpdateChainWrapper;\n import com.baomidou.mybatisplus.extension.conditions.update.UpdateChainWrapper;\n+import com.baomidou.mybatisplus.extension.service.IService;\n+import org.apache.ibatis.binding.MapperMethod;\n+import org.apache.ibatis.logging.Log;\n+import org.apache.ibatis.logging.LogFactory;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n \n /**\n  * \u4ee5\u9759\u6001\u65b9\u5f0f\u8c03\u7528Service\u4e2d\u7684\u51fd\u6570\n@@ -38,10 +28,6 @@\n  */\n public class Db {\n \n-    /**\n-     * \u9ed8\u8ba4\u6279\u6b21\u63d0\u4ea4\u6570\u91cf\n-     */\n-    public static final int DEFAULT_BATCH_SIZE = 1000;\n     private static final Log log = LogFactory.getLog(Db.class);\n \n     private Db() {\n@@ -69,7 +55,7 @@ public static <T> boolean save(T entity) {\n      * @param entityList \u5b9e\u4f53\u5bf9\u8c61\u96c6\u5408\n      */\n     public static <T> boolean saveBatch(Collection<T> entityList) {\n-        return saveBatch(entityList, DEFAULT_BATCH_SIZE);\n+        return saveBatch(entityList, IService.DEFAULT_BATCH_SIZE);\n     }\n \n     /**\n@@ -94,7 +80,7 @@ public static <T> boolean saveBatch(Collection<T> entityList, int batchSize) {\n      * @param entityList \u5b9e\u4f53\u5bf9\u8c61\u96c6\u5408\n      */\n     public static <T> boolean saveOrUpdateBatch(Collection<T> entityList) {\n-        return saveOrUpdateBatch(entityList, DEFAULT_BATCH_SIZE);\n+        return saveOrUpdateBatch(entityList, IService.DEFAULT_BATCH_SIZE);\n     }\n \n     /**\n@@ -195,7 +181,7 @@ public static <T> boolean update(T entity, AbstractWrapper<T, ?, ?> updateWrappe\n      * @param entityList \u5b9e\u4f53\u5bf9\u8c61\u96c6\u5408\n      */\n     public static <T> boolean updateBatchById(Collection<T> entityList) {\n-        return updateBatchById(entityList, DEFAULT_BATCH_SIZE);\n+        return updateBatchById(entityList, IService.DEFAULT_BATCH_SIZE);\n     }\n \n     /**",
      "parent_sha": "eca0d603595cb714b23f4c38ac444bb2aa8162be"
    }
  },
  {
    "oid": "bebae64a5d619db334320db98d95547da4e76f4a",
    "message": "bugfix for metaObj handler set val which not included in entity when update;\n\u89e3\u51b3\u516c\u5171\u586b\u5145\u5668\u5728update\u65f6\uff0c\u5b9e\u4f53\u6ca1\u6709\u7684\u5b57\u6bb5\u4e5f\u585e\u4e86\u503c\u7684\u95ee\u9898",
    "date": "2017-11-09T08:23:13Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/bebae64a5d619db334320db98d95547da4e76f4a",
    "details": {
      "sha": "3d934796548d49760f2adad2641631160e7f7bc0",
      "filename": "src/main/java/com/baomidou/mybatisplus/mapper/MetaObjectHandler.java",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/bebae64a5d619db334320db98d95547da4e76f4a/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FMetaObjectHandler.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/bebae64a5d619db334320db98d95547da4e76f4a/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FMetaObjectHandler.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FMetaObjectHandler.java?ref=bebae64a5d619db334320db98d95547da4e76f4a",
      "patch": "@@ -16,8 +16,7 @@\n package com.baomidou.mybatisplus.mapper;\n \n import org.apache.ibatis.reflection.MetaObject;\n-\n-import com.baomidou.mybatisplus.toolkit.StringUtils;\n+import org.apache.ibatis.reflection.SystemMetaObject;\n \n /**\n  * <p>\n@@ -64,13 +63,16 @@ public abstract class MetaObjectHandler {\n      * @param metaObject meta object parameter\n      */\n     public MetaObjectHandler setFieldValByName(String fieldName, Object fieldVal, MetaObject metaObject) {\n-        if (metaObject.hasSetter(fieldName) &&\n-                metaObject.hasGetter(fieldName)) {\n+        if (metaObject.hasSetter(fieldName) && metaObject.hasGetter(fieldName)) {\n             metaObject.setValue(fieldName, fieldVal);\n-        } else if (metaObject.hasGetter(META_OBJ_PREFIX) &&\n-                StringUtils.checkValNotNull(metaObject.getValue(META_OBJ_PREFIX)) &&\n-                metaObject.hasSetter(META_OBJ_PREFIX + \".\" + fieldName)) {\n-            metaObject.setValue(META_OBJ_PREFIX + \".\" + fieldName, fieldVal);\n+        } else if (metaObject.hasGetter(META_OBJ_PREFIX)) {\n+            Object et = metaObject.getValue(META_OBJ_PREFIX);\n+            if (et != null) {\n+                MetaObject etMeta = SystemMetaObject.forObject(et);\n+                if (etMeta.hasSetter(fieldName)) {\n+                    etMeta.setValue(fieldName, fieldVal);\n+                }\n+            }\n         }\n         return this;\n     }",
      "parent_sha": "c7408d5719d1f8d0c8165b2cc49fd6c6730c810f"
    }
  },
  {
    "oid": "671c1090afbef63e02ddd6a6ca05cce0d4b1d78c",
    "message": "code style",
    "date": "2020-07-25T05:45:45Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/671c1090afbef63e02ddd6a6ca05cce0d4b1d78c",
    "details": {
      "sha": "efc8ff6aa6c54d9d8d04089ea54eefad8df21c73",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/OscarDialect.java",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/671c1090afbef63e02ddd6a6ca05cce0d4b1d78c/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Fpagination%2Fdialects%2FOscarDialect.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/671c1090afbef63e02ddd6a6ca05cce0d4b1d78c/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Fpagination%2Fdialects%2FOscarDialect.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2Fpagination%2Fdialects%2FOscarDialect.java?ref=671c1090afbef63e02ddd6a6ca05cce0d4b1d78c",
      "patch": "@@ -15,19 +15,11 @@\n  */\n package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;\n \n-import com.baomidou.mybatisplus.extension.plugins.pagination.DialectModel;\n-\n /**\n  * \u795e\u901a\u6570\u636e\u5206\u9875\u65b9\u8a00\n  *\n  * @author wangheli\n  * @since 2020-07-25 9:13\n  */\n-public class OscarDialect implements IDialect {\n-\n-    @Override\n-    public DialectModel buildPaginationSql(String originalSql, long offset, long limit) {\n-        String sql = originalSql + \" LIMIT \" + FIRST_MARK + \" OFFSET \" + SECOND_MARK;\n-        return new DialectModel(sql, offset, limit).setConsumerChain();\n-    }\n+public class OscarDialect extends MySqlDialect {\n }",
      "parent_sha": "f5a1bce3a35d40a2fa53867b3aaa1c87e9974083"
    }
  },
  {
    "oid": "8ca4447e69f969ed2c5aba36299bd38dbd5aedba",
    "message": "bugfix(mybatis-plus-generator):SQL\u7c7b\u578b\u8fd4\u56de\u9519\u8bef\u95ee\u9898\n\nhttps://gitee.com/baomidou/mybatis-plus/issues/I1APRW",
    "date": "2020-05-28T09:10:05Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/8ca4447e69f969ed2c5aba36299bd38dbd5aedba",
    "details": {
      "sha": "add0faa1e844aba27fc2b06b0600909cc27821d5",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/DataSourceConfig.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/8ca4447e69f969ed2c5aba36299bd38dbd5aedba/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FDataSourceConfig.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/8ca4447e69f969ed2c5aba36299bd38dbd5aedba/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FDataSourceConfig.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2FDataSourceConfig.java?ref=8ca4447e69f969ed2c5aba36299bd38dbd5aedba",
      "patch": "@@ -30,7 +30,7 @@\n /**\n  * \u6570\u636e\u5e93\u914d\u7f6e\n  *\n- * @author YangHu\n+ * @author YangHu, hcl\n  * @since 2016/8/30\n  */\n @Data\n@@ -75,7 +75,8 @@ public IDbQuery getDbQuery() {\n             DbType dbType = getDbType();\n             DbQueryRegistry dbQueryRegistry = new DbQueryRegistry();\n             // \u9ed8\u8ba4 MYSQL\n-            dbQuery = Optional.ofNullable(dbQueryRegistry.getDbQuery(dbType)).orElseGet(() -> dbQueryRegistry.getDbQuery(DbType.MYSQL));\n+            dbQuery = Optional.ofNullable(dbQueryRegistry.getDbQuery(dbType))\n+                    .orElseGet(() -> dbQueryRegistry.getDbQuery(DbType.MYSQL));\n         }\n         return dbQuery;\n     }\n@@ -119,13 +120,13 @@ private DbType getDbType(String str) {\n         } else if (str.contains(\"mariadb\")) {\n             return DbType.MARIADB;\n         } else if (str.contains(\"sqlite\")) {\n-            return DbType.MARIADB;\n+            return DbType.SQLITE;\n         } else if (str.contains(\"h2\")) {\n             return DbType.H2;\n         } else if (str.contains(\"kingbase\") || str.contains(\"kingbase8\")) {\n             return DbType.KINGBASE_ES;\n         } else {\n-            return null;\n+            return DbType.OTHER;\n         }\n     }\n ",
      "parent_sha": "0ea5988b7c41fed94ed1a00161f316eb02740a73"
    }
  },
  {
    "oid": "a27ea77aea8f92cee6f32da5d443aa0283def7e7",
    "message": "[\u4fee\u590d] \u903b\u8f91\u5220\u9664SelectObjs\u6ce8\u5165\u65b9\u6cd5\u6cdb\u578b\u9519\u8bef",
    "date": "2018-11-26T11:22:01Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/a27ea77aea8f92cee6f32da5d443aa0283def7e7",
    "details": {
      "sha": "c8d851caad5c145f65f4539183a751a2e612965d",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/LogicSelectObjs.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/a27ea77aea8f92cee6f32da5d443aa0283def7e7/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Finjector%2Fmethods%2FLogicSelectObjs.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/a27ea77aea8f92cee6f32da5d443aa0283def7e7/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Finjector%2Fmethods%2FLogicSelectObjs.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Finjector%2Fmethods%2FLogicSelectObjs.java?ref=a27ea77aea8f92cee6f32da5d443aa0283def7e7",
      "patch": "@@ -15,11 +15,12 @@\n  */\n package com.baomidou.mybatisplus.extension.injector.methods;\n \n+import org.apache.ibatis.mapping.MappedStatement;\n+import org.apache.ibatis.mapping.SqlSource;\n+\n import com.baomidou.mybatisplus.core.enums.SqlMethod;\n import com.baomidou.mybatisplus.core.metadata.TableInfo;\n import com.baomidou.mybatisplus.extension.injector.AbstractLogicMethod;\n-import org.apache.ibatis.mapping.MappedStatement;\n-import org.apache.ibatis.mapping.SqlSource;\n \n /**\n  * <p>\n@@ -37,6 +38,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode\n         String sql = String.format(sqlMethod.getSql(), sqlSelectObjsColumns(tableInfo),\n             tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo));\n         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);\n-        return addSelectMappedStatement(mapperClass, sqlMethod.getMethod(), sqlSource, modelClass, tableInfo);\n+        return addSelectMappedStatement(mapperClass, sqlMethod.getMethod(), sqlSource, Object.class, tableInfo);\n     }\n }",
      "parent_sha": "62dd29b1c9b8fb5d474ab9ee77a4acd46470f372"
    }
  },
  {
    "oid": "96cbf8f778124ac7582036a8329884754c6a8ec2",
    "message": "\u4fee\u590d\u5728\u9ad8\u7248\u672cJDK\u4e0b\u6a21\u5757\u53cd\u5c04\u5f02\u5e38.\n\nhttps://github.com/baomidou/mybatis-plus/issues/5514",
    "date": "2023-08-02T14:37:58Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/96cbf8f778124ac7582036a8329884754c6a8ec2",
    "details": {
      "sha": "3c152e3db38dcbc934f5c8ce1a36b17273a646fd",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/PluginUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/96cbf8f778124ac7582036a8329884754c6a8ec2/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FPluginUtils.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/96cbf8f778124ac7582036a8329884754c6a8ec2/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FPluginUtils.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FPluginUtils.java?ref=96cbf8f778124ac7582036a8329884754c6a8ec2",
      "patch": "@@ -21,6 +21,7 @@\n import org.apache.ibatis.mapping.BoundSql;\n import org.apache.ibatis.mapping.MappedStatement;\n import org.apache.ibatis.mapping.ParameterMapping;\n+import org.apache.ibatis.plugin.Plugin;\n import org.apache.ibatis.reflection.DefaultReflectorFactory;\n import org.apache.ibatis.reflection.MetaObject;\n import org.apache.ibatis.reflection.SystemMetaObject;\n@@ -55,8 +56,9 @@ public abstract class PluginUtils {\n     @SuppressWarnings(\"unchecked\")\n     public static <T> T realTarget(Object target) {\n         if (Proxy.isProxyClass(target.getClass())) {\n-            MetaObject metaObject = getMetaObject(target);\n-            return realTarget(metaObject.getValue(\"h.target\"));\n+            Plugin plugin = (Plugin) Proxy.getInvocationHandler(target);\n+            MetaObject metaObject = getMetaObject(plugin);\n+            return realTarget(metaObject.getValue(\"target\"));\n         }\n         return (T) target;\n     }",
      "parent_sha": "b0593e73865c7d7c2f6c171cf2680e881479c2f5"
    }
  },
  {
    "oid": "6ecd41cbc27959b5d36a948c367101d09abebb15",
    "message": "SQL\u8f93\u51fa\u62e6\u622a\u5668 \u5927\u6539\u52a8",
    "date": "2017-03-10T04:18:32Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/6ecd41cbc27959b5d36a948c367101d09abebb15",
    "details": {
      "sha": "857cae1cc7dcebe9ac4f56f99236d1f23bac7b14",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/PerformanceInterceptor.java",
      "status": "modified",
      "additions": 32,
      "deletions": 102,
      "changes": 134,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/6ecd41cbc27959b5d36a948c367101d09abebb15/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPerformanceInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/6ecd41cbc27959b5d36a948c367101d09abebb15/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPerformanceInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fplugins%2FPerformanceInterceptor.java?ref=6ecd41cbc27959b5d36a948c367101d09abebb15",
      "patch": "@@ -15,47 +15,38 @@\n  */\n package com.baomidou.mybatisplus.plugins;\n \n-import com.baomidou.mybatisplus.entity.CountOptimize;\n-import com.baomidou.mybatisplus.entity.GlobalConfiguration;\n-import com.baomidou.mybatisplus.exceptions.MybatisPlusException;\n-import com.baomidou.mybatisplus.plugins.pagination.DialectFactory;\n-import com.baomidou.mybatisplus.plugins.pagination.Pagination;\n-import com.baomidou.mybatisplus.toolkit.SqlUtils;\n-import com.baomidou.mybatisplus.toolkit.StringUtils;\n-import com.baomidou.mybatisplus.toolkit.SystemClock;\n-import org.apache.ibatis.executor.Executor;\n-import org.apache.ibatis.mapping.BoundSql;\n+import java.lang.reflect.Proxy;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+import org.apache.ibatis.executor.statement.StatementHandler;\n import org.apache.ibatis.mapping.MappedStatement;\n-import org.apache.ibatis.mapping.ParameterMapping;\n import org.apache.ibatis.plugin.Interceptor;\n import org.apache.ibatis.plugin.Intercepts;\n import org.apache.ibatis.plugin.Invocation;\n import org.apache.ibatis.plugin.Plugin;\n import org.apache.ibatis.plugin.Signature;\n import org.apache.ibatis.reflection.MetaObject;\n-import org.apache.ibatis.session.Configuration;\n+import org.apache.ibatis.reflection.SystemMetaObject;\n import org.apache.ibatis.session.ResultHandler;\n-import org.apache.ibatis.session.RowBounds;\n-import org.apache.ibatis.type.TypeHandlerRegistry;\n \n-import java.text.DateFormat;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Properties;\n+import com.baomidou.mybatisplus.exceptions.MybatisPlusException;\n+import com.baomidou.mybatisplus.toolkit.PluginUtils;\n+import com.baomidou.mybatisplus.toolkit.SqlUtils;\n+import com.baomidou.mybatisplus.toolkit.StringUtils;\n+import com.baomidou.mybatisplus.toolkit.SystemClock;\n \n /**\n  * <p>\n  * \u6027\u80fd\u5206\u6790\u62e6\u622a\u5668\uff0c\u7528\u4e8e\u8f93\u51fa\u6bcf\u6761 SQL \u8bed\u53e5\u53ca\u5176\u6267\u884c\u65f6\u95f4\n  * </p>\n  * \n- * @author hubin nieqiurong\n+ * @author hubin nieqiurong TaoYu\n  * @Date 2016-07-07\n  */\n-@Intercepts({\n-\t\t@Signature(type = Executor.class, method = \"query\", args = { MappedStatement.class, Object.class, RowBounds.class,\n-\t\t\t\tResultHandler.class }),\n-\t\t@Signature(type = Executor.class, method = \"update\", args = { MappedStatement.class, Object.class }) })\n+@Intercepts({ @Signature(type = StatementHandler.class, method = \"query\", args = { Statement.class, ResultHandler.class }),\n+\t\t@Signature(type = StatementHandler.class, method = \"update\", args = { Statement.class }),\n+\t\t@Signature(type = StatementHandler.class, method = \"batch\", args = { Statement.class }) })\n public class PerformanceInterceptor implements Interceptor {\n \n \t/**\n@@ -70,97 +61,36 @@ public class PerformanceInterceptor implements Interceptor {\n \tprivate String optimizeType = \"default\";\n \n \tpublic Object intercept(Invocation invocation) throws Throwable {\n-\t\tMappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[0];\n-\t\tObject parameterObject = invocation.getArgs()[1];\n-\t\tRowBounds rowBounds = null;\n-\t\tPagination pagination = null;\n-\t\tboolean isPageSql = false;\n-\t\tif (\"query\".equals(invocation.getMethod().getName())) {\n-\t\t\trowBounds = (RowBounds) invocation.getArgs()[2];\n-\t\t\tif (rowBounds instanceof Pagination) {\n-\t\t\t\tisPageSql = true;\n-\t\t\t\tPagination page = (Pagination) rowBounds;\n-\t\t\t\tpagination = new Pagination(page.getCurrent(), page.getLimit());\n-\t\t\t}\n-\t\t}\n-\t\tBoundSql boundSql = mappedStatement.getBoundSql(parameterObject);\n-\t\tConfiguration configuration = mappedStatement.getConfiguration();\n-\t\tStringBuilder sqlBuilder = new StringBuilder();\n-\t\tif (isPageSql) {\n-\t\t\tPagination page = (Pagination) rowBounds;\n-\t\t\tboolean orderBy = true;\n-\t\t\tString dbType = GlobalConfiguration.getDbType(configuration).getDb();\n-\t\t\tif (page.isSearchCount()) {\n-\t\t\t\tCountOptimize countOptimize = SqlUtils.getCountOptimize(boundSql.getSql(), optimizeType, dbType,\n-\t\t\t\t\t\tpage.isOptimizeCount());\n-\t\t\t\torderBy = countOptimize.isOrderBy();\n-\t\t\t}\n-\t\t\tString sql = DialectFactory.buildPaginationSql(pagination, SqlUtils.concatOrderBy(boundSql.getSql(), page, orderBy),\n-\t\t\t\t\tdbType, null).replaceAll(\"[\\\\s]+\", \" \");\n-\t\t\tsqlBuilder.append(getSql(configuration, boundSql, sql));\n+\t\tStatement statement;\n+\t\tObject firstArg = invocation.getArgs()[0];\n+\t\tif (Proxy.isProxyClass(firstArg.getClass())) {\n+\t\t\tstatement = (Statement) SystemMetaObject.forObject(firstArg).getValue(\"h.statement\");\n \t\t} else {\n-\t\t\tsqlBuilder.append(getSql(configuration, boundSql, boundSql.getSql()));\n+\t\t\tstatement = (Statement) firstArg;\n+\t\t}\n+\t\tString originalSql = statement.toString();\n+\t\tint index = originalSql.indexOf(':');\n+\t\tString sql = originalSql;\n+\t\tif (index > 0) {\n+\t\t\tsql = originalSql.substring(index + 1, originalSql.length());\n \t\t}\n-\t\tString statementId = mappedStatement.getId();\n \t\tlong start = SystemClock.now();\n \t\tObject result = invocation.proceed();\n \t\tlong end = SystemClock.now();\n \t\tlong timing = end - start;\n-\t\tString sql = SqlUtils.sqlFormat(sqlBuilder.toString(), format);\n-\t\tSystem.err.println(\" Time\uff1a\" + timing + \" ms\" + \" - ID\uff1a\" + statementId + \"\\n Execute SQL\uff1a\" + sql + \"\\n\");\n+\t\tString formatSql = SqlUtils.sqlFormat(sql, format);\n+\t\tObject target = PluginUtils.realTarget(invocation.getTarget());\n+\t\tMetaObject metaObject = SystemMetaObject.forObject(target);\n+\t\tMappedStatement ms = (MappedStatement) metaObject.getValue(\"delegate.mappedStatement\");\n+\t\tSystem.err.println(\" Time\uff1a\" + timing + \" ms\" + \" - ID\uff1a\" + ms.getId() + \"\\n Execute SQL\uff1a\" + formatSql + \"\\n\");\n \t\tif (maxTime >= 1 && timing > maxTime) {\n \t\t\tthrow new MybatisPlusException(\" The SQL execution time is too large, please optimize ! \");\n \t\t}\n \t\treturn result;\n \t}\n \n-\tpublic static String getSql(Configuration configuration, BoundSql boundSql, String sql) {\n-\t\tObject parameterObject = boundSql.getParameterObject();\n-\t\tList<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n-\t\tString targetSql = sql.replaceAll(\"[\\\\s]+\", \" \");\n-\t\tif (parameterMappings != null && !parameterMappings.isEmpty() && parameterObject != null) {\n-\t\t\tTypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();\n-\t\t\tif (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n-\t\t\t\ttargetSql = targetSql.replaceFirst(\"\\\\?\", getParameterValue(parameterObject));\n-\t\t\t} else {\n-\t\t\t\tMetaObject metaObject = configuration.newMetaObject(parameterObject);\n-\t\t\t\tfor (ParameterMapping parameterMapping : parameterMappings) {\n-\t\t\t\t\tString propertyName = parameterMapping.getProperty();\n-\t\t\t\t\tif (metaObject.hasGetter(propertyName)) {\n-\t\t\t\t\t\tObject obj = metaObject.getValue(propertyName);\n-\t\t\t\t\t\ttargetSql = targetSql.replaceFirst(\"\\\\?\", getParameterValue(obj));\n-\t\t\t\t\t} else if (boundSql.hasAdditionalParameter(propertyName)) {\n-\t\t\t\t\t\tObject obj = boundSql.getAdditionalParameter(propertyName);\n-\t\t\t\t\t\ttargetSql = targetSql.replaceFirst(\"\\\\?\", getParameterValue(obj));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn targetSql;\n-\t}\n-\n-\tprivate static String getParameterValue(Object obj) {\n-\t\tif (StringUtils.checkValNull(obj)) {\n-\t\t\treturn StringUtils.EMPTY;\n-\t\t}\n-\t\tString value;\n-\t\tif (obj instanceof String) {\n-\t\t\tvalue = \"'\" + obj.toString() + \"'\";\n-\t\t} else if (obj instanceof Date) {\n-\t\t\tif (obj instanceof java.sql.Date) {\n-\t\t\t\tvalue = \"'\" + obj.toString() + \"'\";\n-\t\t\t} else {\n-\t\t\t\tDateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.CHINA);\n-\t\t\t\tvalue = \"'\" + formatter.format(obj) + \"'\";\n-\t\t\t}\n-\t\t} else {\n-\t\t\tvalue = obj.toString();\n-\t\t}\n-\t\treturn value;\n-\t}\n-\n \tpublic Object plugin(Object target) {\n-\t\tif (target instanceof Executor) {\n+\t\tif (target instanceof StatementHandler) {\n \t\t\treturn Plugin.wrap(target, this);\n \t\t}\n \t\treturn target;",
      "parent_sha": "2f3e82f783d5776af7082a28d611daa266b10bf3"
    }
  },
  {
    "oid": "ca6a5bdca3cd641af08a805cbde9d8d5262e7463",
    "message": "\u4f18\u5316\u4e0b\u6279\u91cf\u64cd\u4f5c\u53cd\u5c04\u65b9\u6cd5\u903b\u8f91",
    "date": "2016-10-26T07:44:15Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/ca6a5bdca3cd641af08a805cbde9d8d5262e7463",
    "details": {
      "sha": "bbd1eb18b14f360567de1d409df9f3d9367400bf",
      "filename": "mybatis-plus/src/main/java/com/baomidou/framework/service/impl/ServiceImpl.java",
      "status": "modified",
      "additions": 19,
      "deletions": 13,
      "changes": 32,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/ca6a5bdca3cd641af08a805cbde9d8d5262e7463/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fservice%2Fimpl%2FServiceImpl.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/ca6a5bdca3cd641af08a805cbde9d8d5262e7463/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fservice%2Fimpl%2FServiceImpl.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fframework%2Fservice%2Fimpl%2FServiceImpl.java?ref=ca6a5bdca3cd641af08a805cbde9d8d5262e7463",
      "patch": "@@ -15,6 +15,17 @@\n  */\n package com.baomidou.framework.service.impl;\n \n+import java.io.Serializable;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import org.apache.ibatis.session.ExecutorType;\n+import org.apache.ibatis.session.SqlSession;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n import com.baomidou.framework.service.IService;\n import com.baomidou.mybatisplus.activerecord.Model;\n import com.baomidou.mybatisplus.activerecord.Table;\n@@ -27,15 +38,6 @@\n import com.baomidou.mybatisplus.toolkit.ReflectionKit;\n import com.baomidou.mybatisplus.toolkit.TableInfo;\n import com.baomidou.mybatisplus.toolkit.TableInfoHelper;\n-import org.apache.ibatis.session.ExecutorType;\n-import org.apache.ibatis.session.SqlSession;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import java.io.Serializable;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.logging.Logger;\n \n /**\n  * <p>\n@@ -47,8 +49,6 @@\n  */\n public class ServiceImpl<M extends BaseMapper<T>, T> implements IService<T> {\n \n-\tprotected Class<T> modleClass = ReflectionKit.getSuperClassGenricType(getClass(), 1);\n-\n \tprotected static final Logger logger = Logger.getLogger(\"ServiceImpl\");\n \n \t@Autowired\n@@ -146,13 +146,14 @@ protected boolean insertBatch(List<T> entityList, int batchSize, boolean isSelec\n \t\tif (null == entityList) {\n \t\t\tthrow new IllegalArgumentException(\"entityList must not be empty\");\n \t\t}\n-\t\tTableInfo tableInfo = TableInfoHelper.getTableInfo(modleClass);\n+\t\tTableInfo tableInfo = TableInfoHelper.getTableInfo(currentModleClass());\n \t\tif (null == tableInfo) {\n \t\t\tthrow new MybatisPlusException(\"Error: insertBatch Fail, ClassGenricType not found .\");\n \t\t}\n \t\tSqlSession batchSqlSession = tableInfo.getSqlSessionFactory().openSession(ExecutorType.BATCH, false);\n \t\ttry {\n-\t\t\tfor (int i = 0; i < entityList.size(); i++) {\n+\t\t\tint size = entityList.size();\n+\t\t\tfor (int i = 0; i < size; i++) {\n \t\t\t\tif (isSelective) {\n \t\t\t\t\tbaseMapper.insertSelective(entityList.get(0));\n \t\t\t\t} else {\n@@ -171,6 +172,11 @@ protected boolean insertBatch(List<T> entityList, int batchSize, boolean isSelec\n \n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tprotected Class<T> currentModleClass() {\n+\t\treturn ReflectionKit.getSuperClassGenricType(getClass(), 1);\n+\t}\n+\n \tpublic boolean insertBatchSelective(List<T> entityList) {\n \t\tif (null == entityList) {\n \t\t\tthrow new IllegalArgumentException(\"entityList must not be empty\");",
      "parent_sha": "1113b4e8a15418d1ad4c292d79115f0e2207f880"
    }
  },
  {
    "oid": "fc6770310023a85fdb8ba81fe87fd7090986473b",
    "message": "fixed github issues/MYSQL\u8868\u540d\u542b\u6709\u4fdd\u7559\u5b57\u4ee3\u7801\u751f\u6210\u65f6\u62a5\u9519 #124",
    "date": "2017-09-05T08:02:03Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/fc6770310023a85fdb8ba81fe87fd7090986473b",
    "details": {
      "sha": "eb220f0fef58af92a1fcca7840af942463c1fa45",
      "filename": "src/main/java/com/baomidou/mybatisplus/generator/config/rules/QuerySQL.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/fc6770310023a85fdb8ba81fe87fd7090986473b/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Frules%2FQuerySQL.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/fc6770310023a85fdb8ba81fe87fd7090986473b/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Frules%2FQuerySQL.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/src%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Frules%2FQuerySQL.java?ref=fc6770310023a85fdb8ba81fe87fd7090986473b",
      "patch": "@@ -24,7 +24,7 @@\n  * @since 2016-04-25\n  */\n public enum QuerySQL {\n-    MYSQL(\"mysql\", \"show tables\", \"show table status\", \"show full fields from %s\", \"NAME\", \"COMMENT\", \"FIELD\", \"TYPE\",\n+    MYSQL(\"mysql\", \"show tables\", \"show table status\", \"show full fields from `%s`\", \"NAME\", \"COMMENT\", \"FIELD\", \"TYPE\",\n             \"COMMENT\", \"KEY\"),\n \n     ORACLE(\"oracle\", \"SELECT * FROM USER_TABLES\", \"SELECT * FROM USER_TAB_COMMENTS\",",
      "parent_sha": "fb152bf95b396808f6e29485eaab75afa81501c9"
    }
  },
  {
    "oid": "a824986139157a64793fb9dad02eef1cbe07cc53",
    "message": "\u6362\u4e2a\u4f4d\u7f6e",
    "date": "2018-11-01T03:45:33Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/a824986139157a64793fb9dad02eef1cbe07cc53",
    "details": {
      "sha": "a0c05b3d417f3167ff9f6232cd1fb9613b058cfd",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/PaginationInterceptor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/a824986139157a64793fb9dad02eef1cbe07cc53/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2FPaginationInterceptor.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/a824986139157a64793fb9dad02eef1cbe07cc53/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2FPaginationInterceptor.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fplugins%2FPaginationInterceptor.java?ref=a824986139157a64793fb9dad02eef1cbe07cc53",
      "patch": "@@ -171,19 +171,20 @@ public Object intercept(Invocation invocation) throws Throwable {\n                 return invocation.proceed();\n             }\n         }\n+\n         String buildSql = concatOrderBy(originalSql, page, orderBy);\n         DialectModel model = DialectFactory.buildPaginationSql(page, buildSql, dbType, dialectClazz);\n-\n         Configuration configuration = mappedStatement.getConfiguration();\n         List<ParameterMapping> mappings = new ArrayList<>(boundSql.getParameterMappings());\n         model.consumers(mappings, configuration);\n+        metaObject.setValue(\"delegate.boundSql.sql\", model.getDialectSql());\n         metaObject.setValue(\"delegate.boundSql.parameterMappings\", mappings);\n         metaObject.setValue(\"delegate.boundSql.additionalParameters\", model.getDialectMap());\n+\n         /*\n          * <p> \u7981\u7528\u5185\u5b58\u5206\u9875 </p>\n          * <p> \u5185\u5b58\u5206\u9875\u4f1a\u67e5\u8be2\u6240\u6709\u7ed3\u679c\u51fa\u6765\u5904\u7406\uff08\u8fd9\u4e2a\u5f88\u5413\u4eba\u7684\uff09\uff0c\u5982\u679c\u7ed3\u679c\u53d8\u5316\u9891\u7e41\u8fd9\u4e2a\u6570\u636e\u8fd8\u4f1a\u4e0d\u51c6\u3002</p>\n          */\n-        metaObject.setValue(\"delegate.boundSql.sql\", model.getDialectSql());\n         metaObject.setValue(\"delegate.rowBounds.offset\", RowBounds.NO_ROW_OFFSET);\n         metaObject.setValue(\"delegate.rowBounds.limit\", RowBounds.NO_ROW_LIMIT);\n         return invocation.proceed();",
      "parent_sha": "64fca831a300ae8a3edab213e6d26d2924b715fc"
    }
  },
  {
    "oid": "0db49c60736e349e9c5cd30544a67cfff6022597",
    "message": "\u53bb\u6389\u591a\u4f59\u65b9\u6cd5",
    "date": "2016-11-02T02:57:28Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/0db49c60736e349e9c5cd30544a67cfff6022597",
    "details": {
      "sha": "5754954fe1f7b7e160a5c4e6a147958adefcc444",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java",
      "status": "modified",
      "additions": 17,
      "deletions": 30,
      "changes": 47,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/0db49c60736e349e9c5cd30544a67cfff6022597/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/0db49c60736e349e9c5cd30544a67cfff6022597/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FAutoSqlInjector.java?ref=0db49c60736e349e9c5cd30544a67cfff6022597",
      "patch": "@@ -15,13 +15,16 @@\n  */\r\n package com.baomidou.mybatisplus.mapper;\r\n \r\n-import com.baomidou.mybatisplus.MybatisConfiguration;\r\n-import com.baomidou.mybatisplus.activerecord.DB;\r\n-import com.baomidou.mybatisplus.annotations.FieldStrategy;\r\n-import com.baomidou.mybatisplus.annotations.IdType;\r\n-import com.baomidou.mybatisplus.toolkit.TableFieldInfo;\r\n-import com.baomidou.mybatisplus.toolkit.TableInfo;\r\n-import com.baomidou.mybatisplus.toolkit.TableInfoHelper;\r\n+import java.lang.reflect.ParameterizedType;\r\n+import java.lang.reflect.Type;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.logging.Logger;\r\n+\r\n+import javax.sql.DataSource;\r\n+\r\n import org.apache.ibatis.builder.MapperBuilderAssistant;\r\n import org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator;\r\n import org.apache.ibatis.executor.keygen.KeyGenerator;\r\n@@ -36,14 +39,13 @@\n import org.apache.ibatis.scripting.defaults.RawSqlSource;\r\n import org.apache.ibatis.session.Configuration;\r\n \r\n-import javax.sql.DataSource;\r\n-import java.lang.reflect.ParameterizedType;\r\n-import java.lang.reflect.Type;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-import java.util.logging.Logger;\r\n+import com.baomidou.mybatisplus.MybatisConfiguration;\r\n+import com.baomidou.mybatisplus.activerecord.DB;\r\n+import com.baomidou.mybatisplus.annotations.FieldStrategy;\r\n+import com.baomidou.mybatisplus.annotations.IdType;\r\n+import com.baomidou.mybatisplus.toolkit.TableFieldInfo;\r\n+import com.baomidou.mybatisplus.toolkit.TableInfo;\r\n+import com.baomidou.mybatisplus.toolkit.TableInfoHelper;\r\n \r\n /**\r\n  * <p>\r\n@@ -807,21 +809,6 @@ public void injectOfSql(Configuration configuration) {\n \t\tinitDelete();\r\n \t}\r\n \r\n-\t/**\r\n-\t * \u521b\u5efaMSID\r\n-\t *\r\n-\t * @param sql\r\n-\t *            \u6267\u884c\u7684sql\r\n-\t * @param sql\r\n-\t *            \u6267\u884c\u7684sqlCommandType\r\n-\t * @return\r\n-\t */\r\n-\tprivate String newMsId(String sql, SqlCommandType sqlCommandType) {\r\n-\t\tStringBuilder msIdBuilder = new StringBuilder(sqlCommandType.toString());\r\n-\t\tmsIdBuilder.append(\".\").append(sql.hashCode());\r\n-\t\treturn msIdBuilder.toString();\r\n-\t}\r\n-\r\n \t/**\r\n \t * \u662f\u5426\u5df2\u7ecf\u5b58\u5728\u8be5ID\r\n \t *\r",
      "parent_sha": "75994b96ca29f7f8480c58c3f40938f2754448c2"
    }
  },
  {
    "oid": "190daf4467b994cb9e8d8fa7fb1c8c37b8d09fb3",
    "message": "LogicSqlInjector\u903b\u8f91\u5220\u9664\uff0c \u662f\u5426\u7528\u66f4\u65b0\u6765\u66ff\u6362\u5220\u9664 \u63a5\u53e3\uff0c\u52a0\u4e00\u4e2a\u5f00\u5173\u6765\u63a7\u5236\uff0c\u6ee1\u8db3\u66f4\u591a\u7684\u9700\u6c42",
    "date": "2017-04-27T14:20:10Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/190daf4467b994cb9e8d8fa7fb1c8c37b8d09fb3",
    "details": {
      "sha": "28f08bdad1237cd675a02cfdda3afb1d4ff0efdf",
      "filename": "mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/LogicSqlInjector.java",
      "status": "modified",
      "additions": 22,
      "deletions": 3,
      "changes": 25,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/190daf4467b994cb9e8d8fa7fb1c8c37b8d09fb3/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FLogicSqlInjector.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/190daf4467b994cb9e8d8fa7fb1c8c37b8d09fb3/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FLogicSqlInjector.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FLogicSqlInjector.java?ref=190daf4467b994cb9e8d8fa7fb1c8c37b8d09fb3",
      "patch": "@@ -38,12 +38,22 @@\n  */\n public class LogicSqlInjector extends AutoSqlInjector {\n \n+\t/**\n+\t * \u662f\u5426\u7528\u66f4\u65b0\u6765\u66ff\u6362\u5220\u9664\uff0c\u9ed8\u8ba4\u66ff\u6362\n+\t */\n+\tprivate boolean updateReplaceDelete = true;\n+\t\n+\t\n+\tpublic LogicSqlInjector(boolean updateReplaceDelete) {\n+\t\tthis.updateReplaceDelete = updateReplaceDelete;\n+\t}\n+\n \t/**\n \t * \u6839\u636e ID \u5220\u9664\n \t */\n \t@Override\n \tprotected void injectDeleteByIdSql(boolean batch, Class<?> mapperClass, Class<?> modelClass, TableInfo table) {\n-\t\tif (table.isLogicDelete()) {\n+\t\tif (table.isLogicDelete() && updateReplaceDelete) {\n \t\t\t// \u903b\u8f91\u5220\u9664\u6ce8\u5165\n \t\t\tSqlMethod sqlMethod = SqlMethod.LOGIC_DELETE_BY_ID;\n \t\t\tSqlSource sqlSource;\n@@ -71,7 +81,7 @@ protected void injectDeleteByIdSql(boolean batch, Class<?> mapperClass, Class<?>\n \t */\n \t@Override\n \tprotected void injectDeleteSql(Class<?> mapperClass, Class<?> modelClass, TableInfo table) {\n-\t\tif (table.isLogicDelete()) {\n+\t\tif (table.isLogicDelete()  && updateReplaceDelete) {\n \t\t\t// \u903b\u8f91\u5220\u9664\u6ce8\u5165\n \t\t\tSqlMethod sqlMethod = SqlMethod.LOGIC_DELETE;\n \t\t\tString sql = String.format(sqlMethod.getSql(), table.getTableName(), sqlLogicSet(table),\n@@ -89,7 +99,7 @@ protected void injectDeleteSql(Class<?> mapperClass, Class<?> modelClass, TableI\n \t */\n \t@Override\n \tprotected void injectDeleteByMapSql(Class<?> mapperClass, TableInfo table) {\n-\t\tif (table.isLogicDelete()) {\n+\t\tif (table.isLogicDelete()  && updateReplaceDelete) {\n \t\t\t// \u903b\u8f91\u5220\u9664\u6ce8\u5165\n \t\t\tSqlMethod sqlMethod = SqlMethod.LOGIC_DELETE_BY_MAP;\n \t\t\tString sql = String.format(sqlMethod.getSql(), table.getTableName(), sqlLogicSet(table),\n@@ -295,4 +305,13 @@ protected String sqlWhereByMap(TableInfo table) {\n \t\treturn super.sqlWhereByMap(table);\n \t}\n \n+\tpublic boolean isUpdateReplaceDelete() {\n+\t\treturn updateReplaceDelete;\n+\t}\n+\n+\tpublic void setUpdateReplaceDelete(boolean updateReplaceDelete) {\n+\t\tthis.updateReplaceDelete = updateReplaceDelete;\n+\t}\n+\n+\t\n }",
      "parent_sha": "af565d679e811ccd797861363f07d98b33d51123"
    }
  },
  {
    "oid": "09df56f2bd7433efb2f611f2222e5db925c56015",
    "message": "\u60f3\u4e86\u4e00\u4e0b,\u8fd8\u662f\u4e0d\u90a3\u4e48\u73a9,\u53ea\u4f18\u5316\u4e00\u4e0b",
    "date": "2018-08-02T10:39:24Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/09df56f2bd7433efb2f611f2222e5db925c56015",
    "details": {
      "sha": "ca64762114f03e012946c0fc883b385f6a91e6a7",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/handlers/MetaObjectHandler.java",
      "status": "modified",
      "additions": 8,
      "deletions": 32,
      "changes": 40,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/09df56f2bd7433efb2f611f2222e5db925c56015/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fhandlers%2FMetaObjectHandler.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/09df56f2bd7433efb2f611f2222e5db925c56015/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fhandlers%2FMetaObjectHandler.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fhandlers%2FMetaObjectHandler.java?ref=09df56f2bd7433efb2f611f2222e5db925c56015",
      "patch": "@@ -15,8 +15,6 @@\n  */\n package com.baomidou.mybatisplus.core.handlers;\n \n-import java.util.function.Supplier;\n-\n import org.apache.ibatis.reflection.MetaObject;\n import org.apache.ibatis.reflection.SystemMetaObject;\n \n@@ -53,42 +51,20 @@ public interface MetaObjectHandler {\n      * <p>\n      * \u5982\u679c\u5305\u542b\u524d\u7f00 et \u4f7f\u7528\u8be5\u65b9\u6cd5\uff0c\u5426\u5219\u53ef\u4ee5\u76f4\u63a5 metaObject.setValue(fieldName, fieldVal);\n      * </p>\n-     * <p>\n-     * \u4ee5\u540e\u4f1a\u5220\u9664\u8fd9\u4e2a\u65b9\u6cd5,\u8bf7\u8f6c\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\n-     * </p>\n      *\n      * @param fieldName  java bean property name\n      * @param fieldVal   java bean property value\n      * @param metaObject meta object parameter\n      */\n-    @Deprecated\n     default MetaObjectHandler setFieldValByName(String fieldName, Object fieldVal, MetaObject metaObject) {\n-        return setFieldValByName(() -> fieldVal, metaObject, fieldName);\n-    }\n-\n-    /**\n-     * <p>\n-     * Common method to set value for java bean.\n-     * </p>\n-     * <p>\n-     * \u5982\u679c\u5305\u542b\u524d\u7f00 et \u4f7f\u7528\u8be5\u65b9\u6cd5\uff0c\u5426\u5219\u53ef\u4ee5\u76f4\u63a5 metaObject.setValue(fieldName, fieldVal);\n-     * </p>\n-     *\n-     * @param fieldVal   java bean property value\n-     * @param metaObject meta object parameter\n-     * @param fieldNames java bean property names\n-     */\n-    default MetaObjectHandler setFieldValByName(Supplier<Object> fieldVal, MetaObject metaObject, String... fieldNames) {\n-        for (String fieldName : fieldNames) {\n-            if (metaObject.hasSetter(fieldName) && metaObject.hasGetter(fieldName)) {\n-                metaObject.setValue(fieldName, fieldVal.get());\n-            } else if (metaObject.hasGetter(Constants.ENTITY)) {\n-                Object et = metaObject.getValue(Constants.ENTITY);\n-                if (et != null) {\n-                    MetaObject etMeta = SystemMetaObject.forObject(et);\n-                    if (etMeta.hasSetter(fieldName)) {\n-                        etMeta.setValue(fieldName, fieldVal.get());\n-                    }\n+        if (metaObject.hasSetter(fieldName)) {\n+            metaObject.setValue(fieldName, fieldVal);\n+        } else if (metaObject.hasGetter(Constants.ENTITY)) {\n+            Object et = metaObject.getValue(Constants.ENTITY);\n+            if (et != null) {\n+                MetaObject etMeta = SystemMetaObject.forObject(et);\n+                if (etMeta.hasSetter(fieldName)) {\n+                    etMeta.setValue(fieldName, fieldVal);\n                 }\n             }\n         }",
      "parent_sha": "539c06780f4ebb3b659bf7b6be1fc6ac7368864c"
    }
  },
  {
    "oid": "53e1a815c8411f739f7ae550b82f0e50b9be1356",
    "message": "\u4f18\u5316",
    "date": "2019-07-09T11:32:00Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/53e1a815c8411f739f7ae550b82f0e50b9be1356",
    "details": {
      "sha": "a5de79af55f270c5eaefc1d49b9c21ea2494bcf1",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/53e1a815c8411f739f7ae550b82f0e50b9be1356/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/53e1a815c8411f739f7ae550b82f0e50b9be1356/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java?ref=53e1a815c8411f739f7ae550b82f0e50b9be1356",
      "patch": "@@ -57,11 +57,11 @@ public abstract class AbstractWrapper<T, R, Children extends AbstractWrapper<T,\n      */\n     protected AtomicInteger paramNameSeq;\n     protected Map<String, Object> paramNameValuePairs;\n-    protected SharedString lastSql;\n+    protected SharedString lastSql = new SharedString();\n     /**\n      * SQL\u6ce8\u91ca\n      */\n-    protected SharedString sqlComment;\n+    protected SharedString sqlComment = new SharedString();\n     /**\n      * \u6570\u636e\u5e93\u8868\u6620\u5c04\u5b9e\u4f53\u7c7b\n      */\n@@ -217,15 +217,15 @@ public Children apply(boolean condition, String applySql, Object... value) {\n     @Override\n     public Children last(boolean condition, String lastSql) {\n         if (condition) {\n-            this.lastSql = new SharedString(StringPool.SPACE + lastSql);\n+            this.lastSql.setStringValue(\" \" + StringPool.SPACE + lastSql);\n         }\n         return typedThis;\n     }\n \n     @Override\n     public Children comment(boolean condition, String comment) {\n         if (condition) {\n-            this.sqlComment = new SharedString(comment);\n+            this.sqlComment.setStringValue(comment);\n         }\n         return typedThis;\n     }",
      "parent_sha": "64b23f4123a5432bcb6c9b13167d696e17d2fab9"
    }
  },
  {
    "oid": "f0ec6c14f7e7f8d93a36ad92028d650e0ff0bafd",
    "message": "\u4ee3\u7801\u751f\u6210\u5668\u83b7\u53d6\u81ea\u5b9a\u4e49\u5185\u5bb9\u5931\u8d25.",
    "date": "2018-01-31T01:31:42Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/f0ec6c14f7e7f8d93a36ad92028d650e0ff0bafd",
    "details": {
      "sha": "0b589ac29ddc142c24a5badfb3c7fbc4cbaaea92",
      "filename": "mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/f0ec6c14f7e7f8d93a36ad92028d650e0ff0bafd/mybatis-plus-generate%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fengine%2FAbstractTemplateEngine.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/f0ec6c14f7e7f8d93a36ad92028d650e0ff0bafd/mybatis-plus-generate%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fengine%2FAbstractTemplateEngine.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generate%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fengine%2FAbstractTemplateEngine.java?ref=f0ec6c14f7e7f8d93a36ad92028d650e0ff0bafd",
      "patch": "@@ -23,6 +23,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.baomidou.mybatisplus.generator.InjectionConfig;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -120,8 +121,11 @@ public AbstractTemplateEngine batchOutput() {\n                     }\n                 }\n                 // \u81ea\u5b9a\u4e49\u5185\u5bb9\n-                if (null != this.getConfigBuilder().getInjectionConfig()) {\n-                    List<FileOutConfig> focList = this.getConfigBuilder().getInjectionConfig().getFileOutConfigList();\n+                InjectionConfig injectionConfig = this.getConfigBuilder().getInjectionConfig();\n+                if (null != injectionConfig) {\n+                    injectionConfig.initMap();\n+                    objectMap.put(\"cfg\",injectionConfig.getMap());\n+                    List<FileOutConfig> focList = injectionConfig.getFileOutConfigList();\n                     if (CollectionUtils.isNotEmpty(focList)) {\n                         for (FileOutConfig foc : focList) {\n                             if (this.isCreate(foc.outputFile(tableInfo))) {",
      "parent_sha": "00068847c357f7a05dfb9daea3e8148edd466f4b"
    }
  },
  {
    "oid": "7b671191c5ba8ccfdd542d76bae427ba8abdf169",
    "message": "fix: \u4fee\u590dSqlServerQuery\u67e5\u8be2\u8868\u63cf\u8ff0\u4e71\u7801\uff0c\u5df2\u5728SqlServer2017\u548cSqlServer2019\u7248\u672c\u4e0a\u9762\u9a8c\u8bc1\u901a\u8fc7. (#6439)\n\nhttps://github.com/baomidou/mybatis-plus/issues/6334",
    "date": "2024-08-26T10:16:31Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/7b671191c5ba8ccfdd542d76bae427ba8abdf169",
    "details": {
      "sha": "b2c2b7b44216f41cea71f370542a9751b5bfab09",
      "filename": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/SqlServerQuery.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/7b671191c5ba8ccfdd542d76bae427ba8abdf169/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FSqlServerQuery.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/7b671191c5ba8ccfdd542d76bae427ba8abdf169/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FSqlServerQuery.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fgenerator%2Fconfig%2Fquerys%2FSqlServerQuery.java?ref=7b671191c5ba8ccfdd542d76bae427ba8abdf169",
      "patch": "@@ -29,7 +29,7 @@ public class SqlServerQuery extends AbstractDbQuery {\n     @Override\n     public String tablesSql() {\n         return \"select * from (select cast(so.name as varchar(500)) as TABLE_NAME, \" +\n-            \"cast(sep.value as varchar(500)) as COMMENTS from sysobjects so \" +\n+            \"cast(sep.value as nvarchar(500)) as COMMENTS from sysobjects so \" +\n             \"left JOIN sys.extended_properties sep on sep.major_id=so.id and sep.minor_id=0 \" +\n             \"where (xtype='U' or xtype='v')) a where 1=1 \";\n     }",
      "parent_sha": "acbe9a2d80e3a9aea78790d4b9f2398d1d1c0406"
    }
  },
  {
    "oid": "1bf7bb81bbccfd4a2787240ab77d105ad5b8ce2c",
    "message": "fix miao",
    "date": "2021-09-22T03:16:07Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/1bf7bb81bbccfd4a2787240ab77d105ad5b8ce2c",
    "details": {
      "sha": "77cab1aa9224d8e33b69da44fb3ac8c1abfc88a8",
      "filename": "mybatis-plus-boot-starter/src/main/java/com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/1bf7bb81bbccfd4a2787240ab77d105ad5b8ce2c/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusAutoConfiguration.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/1bf7bb81bbccfd4a2787240ab77d105ad5b8ce2c/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-boot-starter%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fautoconfigure%2FMybatisPlusAutoConfiguration.java?ref=1bf7bb81bbccfd4a2787240ab77d105ad5b8ce2c",
      "patch": "@@ -43,7 +43,6 @@\n import org.springframework.beans.factory.BeanFactoryAware;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.ObjectProvider;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n import org.springframework.boot.autoconfigure.AutoConfigurationPackages;\n@@ -115,6 +114,8 @@ public class MybatisPlusAutoConfiguration implements InitializingBean {\n \n     private final List<MybatisPlusPropertiesCustomizer> mybatisPlusPropertiesCustomizers;\n \n+    private final TransactionFactory transactionFactory;\n+\n     private final ApplicationContext applicationContext;\n \n \n@@ -126,6 +127,7 @@ public MybatisPlusAutoConfiguration(MybatisPlusProperties properties,\n                                         ObjectProvider<DatabaseIdProvider> databaseIdProvider,\n                                         ObjectProvider<List<ConfigurationCustomizer>> configurationCustomizersProvider,\n                                         ObjectProvider<List<MybatisPlusPropertiesCustomizer>> mybatisPlusPropertiesCustomizerProvider,\n+                                        ObjectProvider<TransactionFactory> transactionFactoryProvider,\n                                         ApplicationContext applicationContext) {\n         this.properties = properties;\n         this.interceptors = interceptorsProvider.getIfAvailable();\n@@ -135,6 +137,7 @@ public MybatisPlusAutoConfiguration(MybatisPlusProperties properties,\n         this.databaseIdProvider = databaseIdProvider.getIfAvailable();\n         this.configurationCustomizers = configurationCustomizersProvider.getIfAvailable();\n         this.mybatisPlusPropertiesCustomizers = mybatisPlusPropertiesCustomizerProvider.getIfAvailable();\n+        this.transactionFactory = transactionFactoryProvider.getIfAvailable();\n         this.applicationContext = applicationContext;\n     }\n \n@@ -157,7 +160,7 @@ private void checkConfigFileExists() {\n     @SuppressWarnings(\"SpringJavaInjectionPointsAutowiringInspection\")\n     @Bean\n     @ConditionalOnMissingBean\n-    public SqlSessionFactory sqlSessionFactory(DataSource dataSource, @Autowired(required = false) TransactionFactory transactionFactory) throws Exception {\n+    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n         // TODO \u4f7f\u7528 MybatisSqlSessionFactoryBean \u800c\u4e0d\u662f SqlSessionFactoryBean\n         MybatisSqlSessionFactoryBean factory = new MybatisSqlSessionFactoryBean();\n         factory.setDataSource(dataSource);",
      "parent_sha": "42f434ec621a5e051942be76f43d2bb090f2992e"
    }
  },
  {
    "oid": "aef2e74ed7a60c01d830a64cf75cb1fedcd3da53",
    "message": "3.0.1-SNAPSHOT \u8d70\u8d77\uff01\uff01",
    "date": "2018-06-15T07:15:41Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/aef2e74ed7a60c01d830a64cf75cb1fedcd3da53",
    "details": {
      "sha": "9cabfc2ace7320f9ebc3f814235797a93010a4f1",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/aef2e74ed7a60c01d830a64cf75cb1fedcd3da53/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/aef2e74ed7a60c01d830a64cf75cb1fedcd3da53/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Fconditions%2FAbstractWrapper.java?ref=aef2e74ed7a60c01d830a64cf75cb1fedcd3da53",
      "patch": "@@ -520,7 +520,11 @@ public String getParamAlias() {\n \n     @Override\n     public String getSqlSegment() {\n-        return String.join(\" \", expression.stream().map(ISqlSegment::getSqlSegment).collect(Collectors.toList()));\n+        String temp = String.join(\" \", expression.stream().map(ISqlSegment::getSqlSegment).collect(Collectors.toList()));\n+        if (null != temp && temp.indexOf(SqlKeyword.ORDER_BY.getSqlSegment()) == 0) {\n+            return \" 1=1 \" + temp;\n+        }\n+        return temp;\n     }\n \n     public Map<String, Object> getParamNameValuePairs() {",
      "parent_sha": "eb2295b7dec9e0b426b967557ef04c7d3244bb44"
    }
  },
  {
    "oid": "e36e8571dc7f34c89cdce556b4aeff35c1b1c84c",
    "message": "\u4fee\u6539\u53d8\u91cf\u540d\uff0c\u9632\u6b62\u4ea7\u751f\u6b67\u4e49.",
    "date": "2020-01-07T12:18:23Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/e36e8571dc7f34c89cdce556b4aeff35c1b1c84c",
    "details": {
      "sha": "7d93ae8d22e14eb78788fea6996b3b46126345f0",
      "filename": "mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/e36e8571dc7f34c89cdce556b4aeff35c1b1c84c/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/e36e8571dc7f34c89cdce556b4aeff35c1b1c84c/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-extension%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fextension%2Fservice%2Fimpl%2FServiceImpl.java?ref=e36e8571dc7f34c89cdce556b4aeff35c1b1c84c",
      "patch": "@@ -285,12 +285,12 @@ public <V> V getObj(Wrapper<T> queryWrapper, Function<? super Object, V> mapper)\n     /**\n      * \u6267\u884c\u6279\u91cf\u64cd\u4f5c\n      *\n-     * @param fun fun\n+     * @param consumer consumer\n      * @since 3.3.0\n-     * @deprecated \u540e\u9762\u6211\u6253\u7b97\u79fb\u9664\u6389 {@link #executeBatch(Collection, int, BiConsumer)} }.\n+     * @deprecated 3.3.1 \u540e\u9762\u6211\u6253\u7b97\u79fb\u9664\u6389 {@link #executeBatch(Collection, int, BiConsumer)} }.\n      */\n     @Deprecated\n-    protected boolean executeBatch(Consumer<SqlSession> fun) {\n+    protected boolean executeBatch(Consumer<SqlSession> consumer) {\n         Class<T> tClass = currentModelClass();\n         SqlSessionFactory sqlSessionFactory = SqlHelper.sqlSessionFactory(tClass);\n         SqlSessionHolder sqlSessionHolder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sqlSessionFactory);\n@@ -306,7 +306,7 @@ protected boolean executeBatch(Consumer<SqlSession> fun) {\n             log.warn(\"SqlSession [\" + sqlSession + \"] was not registered for synchronization because DataSource is not transactional\");\n         }\n         try {\n-            fun.accept(sqlSession);\n+            consumer.accept(sqlSession);\n             //\u975e\u4e8b\u7269\u60c5\u51b5\u4e0b\uff0c\u5f3a\u5236commit\u3002\n             sqlSession.commit(!transaction);\n             return true;\n@@ -327,19 +327,19 @@ protected boolean executeBatch(Consumer<SqlSession> fun) {\n     /**\n      * \u6267\u884c\u6279\u91cf\u64cd\u4f5c\n      *\n-     * @param entityList \u6570\u636e\u96c6\u5408\n-     * @param batchSize  \u6279\u91cf\u5927\u5c0f\n-     * @param consumer   \u6267\u884c\u65b9\u6cd5\n-     * @param <E>        \u6cdb\u578b\n+     * @param list      \u6570\u636e\u96c6\u5408\n+     * @param batchSize \u6279\u91cf\u5927\u5c0f\n+     * @param consumer  \u6267\u884c\u65b9\u6cd5\n+     * @param <E>       \u6cdb\u578b\n      * @return \u64cd\u4f5c\u7ed3\u679c\n      * @since 3.3.1\n      */\n-    protected <E> boolean executeBatch(Collection<E> entityList, int batchSize, BiConsumer<SqlSession, E> consumer) {\n+    protected <E> boolean executeBatch(Collection<E> list, int batchSize, BiConsumer<SqlSession, E> consumer) {\n         return executeBatch(sqlSession -> {\n-            int size = entityList.size();\n+            int size = list.size();\n             int i = 1;\n-            for (E entity : entityList) {\n-                consumer.accept(sqlSession, entity);\n+            for (E element : list) {\n+                consumer.accept(sqlSession, element);\n                 if ((i % batchSize == 0) || i == size) {\n                     sqlSession.flushStatements();\n                 }",
      "parent_sha": "73878eb755a6695c718fc03d8866318824129991"
    }
  },
  {
    "oid": "e9187a3bd2cc6c2bb5612d0180712a4f3a30dabf",
    "message": "\u652f\u6301 WHERE \u5b9e\u4f53\u6761\u4ef6\u81ea\u5b9a\u4e49\u8fd0\u7b97\u89c4\u5219",
    "date": "2018-01-05T15:45:29Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/e9187a3bd2cc6c2bb5612d0180712a4f3a30dabf",
    "details": {
      "sha": "e9dc2fb74216e29449f04b79a67ce965fa7d087c",
      "filename": "mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/SqlCondition.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/e9187a3bd2cc6c2bb5612d0180712a4f3a30dabf/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FSqlCondition.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/e9187a3bd2cc6c2bb5612d0180712a4f3a30dabf/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FSqlCondition.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-support%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fmapper%2FSqlCondition.java?ref=e9187a3bd2cc6c2bb5612d0180712a4f3a30dabf",
      "patch": "@@ -40,7 +40,7 @@ public class SqlCondition {\n     /**\n      * % \u5de6\n      */\n-    public static final String LIKE_LEFT = \"%s LIKE CONCAT('%',#{%s}\";\n+    public static final String LIKE_LEFT = \"%s LIKE CONCAT('%',#{%s})\";\n     /**\n      * \u53f3 %\n      */",
      "parent_sha": "2e693208fbd1476de6adfa4c3c1677dc58c07b9d"
    }
  },
  {
    "oid": "959ca8c9529698cda49647c7a497c8fdc3ca0dcb",
    "message": "\u518d\u6b21\u6539\u9020\u4e3ajava8\u65b0\u7279\u6027",
    "date": "2018-05-13T08:22:52Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/959ca8c9529698cda49647c7a497c8fdc3ca0dcb",
    "details": {
      "sha": "46c77dc1ccb15a2465cedbb971fd4454cc2ce6fb",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ReflectionKit.java",
      "status": "modified",
      "additions": 9,
      "deletions": 21,
      "changes": 30,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/959ca8c9529698cda49647c7a497c8fdc3ca0dcb/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FReflectionKit.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/959ca8c9529698cda49647c7a497c8fdc3ca0dcb/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FReflectionKit.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FReflectionKit.java?ref=959ca8c9529698cda49647c7a497c8fdc3ca0dcb",
      "patch": "@@ -15,24 +15,15 @@\n  */\n package com.baomidou.mybatisplus.core.toolkit;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Stream;\n-\n+import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;\n import org.apache.ibatis.logging.Log;\n import org.apache.ibatis.logging.LogFactory;\n \n-import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;\n+import java.lang.reflect.*;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n \n /**\n@@ -164,12 +155,10 @@ public static List<Field> getFieldList(Class<?> clazz) {\n         if (null == clazz) {\n             return null;\n         }\n-        List<Field> fieldList = new LinkedList<>();\n-        Field[] fields = clazz.getDeclaredFields();\n-        Stream.of(fields)\n+        List<Field> fieldList = Stream.of(clazz.getDeclaredFields())\n             .filter(field -> !Modifier.isStatic(field.getModifiers())/* \u8fc7\u6ee4\u9759\u6001\u5c5e\u6027 */)\n             .filter(field -> !Modifier.isTransient(field.getModifiers())/* \u8fc7\u6ee4 transient\u5173\u952e\u5b57\u4fee\u9970\u7684\u5c5e\u6027 */)\n-            .forEach(fieldList::add);\n+            .collect(Collectors.toCollection(LinkedList::new));\n         /* \u5904\u7406\u7236\u7c7b\u5b57\u6bb5 */\n         Class<?> superClass = clazz.getSuperclass();\n         if (superClass.equals(Object.class)) {\n@@ -189,8 +178,7 @@ public static List<Field> getFieldList(Class<?> clazz) {\n      */\n     public static List<Field> excludeOverrideSuperField(List<Field> fieldList, List<Field> superFieldList) {\n         // \u5b50\u7c7b\u5c5e\u6027\n-        Map<String, Field> fieldMap = new HashMap<>();\n-        fieldList.forEach(field -> fieldMap.put(field.getName(), field));\n+        Map<String, Field> fieldMap = fieldList.stream().collect(Collectors.toMap(Field::getName, Function.identity()));\n         superFieldList.stream().filter(field -> fieldMap.get(field.getName()) == null).forEach(fieldList::add);\n         return fieldList;\n     }",
      "parent_sha": "3e58b0fbca92600d9eeeec6d501acef7c2711e7f"
    }
  },
  {
    "oid": "c057bf44521261e185d463755b1c01a332fb017f",
    "message": "\u4f18\u5316\u4e00\u4e0b",
    "date": "2018-06-12T11:41:17Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/c057bf44521261e185d463755b1c01a332fb017f",
    "details": {
      "sha": "8d22abf5c5ba84b12fe721a83b5f9acd0faefdd7",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/BeanUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/c057bf44521261e185d463755b1c01a332fb017f/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FBeanUtils.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/c057bf44521261e185d463755b1c01a332fb017f/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FBeanUtils.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Ftoolkit%2FBeanUtils.java?ref=c057bf44521261e185d463755b1c01a332fb017f",
      "patch": "@@ -71,7 +71,7 @@ public static <T> List<Map<String, Object>> beansToMaps(List<T> beanList) {\n         if (CollectionUtils.isEmpty(beanList)) {\n             return null;\n         }\n-        return beanList.stream().map(e -> beanToMap(e)).collect(toList());\n+        return beanList.stream().map(BeanUtils::beanToMap).collect(toList());\n     }\n \n     /**",
      "parent_sha": "55fe023abd42764a302d3396244a7b91c7b286c2"
    }
  },
  {
    "oid": "cb85b5918439fd4dd9ce8e01d9c8cf4ccd3c71d8",
    "message": "\u6f0f\u6539,\u591a\u6267\u884c\u4e86\u4e00\u6b21.",
    "date": "2019-09-12T09:32:07Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/cb85b5918439fd4dd9ce8e01d9c8cf4ccd3c71d8",
    "details": {
      "sha": "a9ed4a58a94b59fcd9c93f4cc665830b5ed2204a",
      "filename": "mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/override/MybatisMapperMethod.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/cb85b5918439fd4dd9ce8e01d9c8cf4ccd3c71d8/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Foverride%2FMybatisMapperMethod.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/cb85b5918439fd4dd9ce8e01d9c8cf4ccd3c71d8/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Foverride%2FMybatisMapperMethod.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Fcore%2Foverride%2FMybatisMapperMethod.java?ref=cb85b5918439fd4dd9ce8e01d9c8cf4ccd3c71d8",
      "patch": "@@ -51,6 +51,7 @@ public MybatisMapperMethod(Class<?> mapperInterface, Method method, Configuratio\n         this.method = new MapperMethod.MethodSignature(config, mapperInterface, method);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public Object execute(SqlSession sqlSession, Object[] args) {\n         Object result;\n         switch (command.getType()) {\n@@ -89,7 +90,8 @@ public Object execute(SqlSession sqlSession, Object[] args) {\n                             CachePage cachePage = (CachePage) result;\n                             result = cachePage.getPage();\n                         } else {\n-                            result = ((IPage<?>) args[0]).setRecords(executeForIPage(sqlSession, args));\n+                            List list = (List<Object>) result;\n+                            result = ((IPage<?>) args[0]).setRecords(list);\n                         }\n                         // TODO \u8fd9\u91cc\u4e0a\u9762\u6539\u4e86\n                     } else {",
      "parent_sha": "8d5609ac6771773468f811d29a015ce99d0fb9cd"
    }
  },
  {
    "oid": "7f8d8b5f5061ad2bd7d4383f6d4cf743b3a6f1c0",
    "message": "support customer sqlInjector",
    "date": "2019-04-02T06:01:56Z",
    "url": "https://github.com/baomidou/mybatis-plus/commit/7f8d8b5f5061ad2bd7d4383f6d4cf743b3a6f1c0",
    "details": {
      "sha": "49d70a993dab7b78f1f6ce4b3e7ce20528100f65",
      "filename": "mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/mysql/config/MybatisPlusConfig.java",
      "status": "modified",
      "additions": 16,
      "deletions": 12,
      "changes": 28,
      "blob_url": "https://github.com/baomidou/mybatis-plus/blob/7f8d8b5f5061ad2bd7d4383f6d4cf743b3a6f1c0/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fmysql%2Fconfig%2FMybatisPlusConfig.java",
      "raw_url": "https://github.com/baomidou/mybatis-plus/raw/7f8d8b5f5061ad2bd7d4383f6d4cf743b3a6f1c0/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fmysql%2Fconfig%2FMybatisPlusConfig.java",
      "contents_url": "https://api.github.com/repos/baomidou/mybatis-plus/contents/mybatis-plus%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbaomidou%2Fmybatisplus%2Ftest%2Fmysql%2Fconfig%2FMybatisPlusConfig.java?ref=7f8d8b5f5061ad2bd7d4383f6d4cf743b3a6f1c0",
      "patch": "@@ -15,6 +15,19 @@\n  */\n package com.baomidou.mybatisplus.test.mysql.config;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.sql.DataSource;\n+\n+import org.apache.ibatis.builder.MapperBuilderAssistant;\n+import org.apache.ibatis.session.SqlSessionFactory;\n+import org.apache.ibatis.type.JdbcType;\n+import org.mybatis.spring.annotation.MapperScan;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+\n import com.baomidou.mybatisplus.annotation.FieldFill;\n import com.baomidou.mybatisplus.core.MybatisConfiguration;\n import com.baomidou.mybatisplus.core.config.GlobalConfig;\n@@ -29,18 +42,9 @@\n import com.baomidou.mybatisplus.extension.plugins.tenant.TenantSqlParser;\n import com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;\n import com.baomidou.mybatisplus.test.mysql.MysqlMetaObjectHandler;\n+\n import net.sf.jsqlparser.expression.Expression;\n import net.sf.jsqlparser.expression.LongValue;\n-import org.apache.ibatis.session.SqlSessionFactory;\n-import org.apache.ibatis.type.JdbcType;\n-import org.mybatis.spring.annotation.MapperScan;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n-\n-import javax.sql.DataSource;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * Mybatis Plus Config\n@@ -89,8 +93,8 @@ public GlobalConfig globalConfig() {\n              * \u6ce8\u5165\u81ea\u5b9a\u4e49\u5168\u5c40\u65b9\u6cd5\n              */\n             @Override\n-            public List<AbstractMethod> getMethodList(Class<?> mapperClass) {\n-                List<AbstractMethod> methodList = super.getMethodList(mapperClass);\n+            public List<AbstractMethod> getMethodList(MapperBuilderAssistant builderAssistant, Class<?> mapperClass) {\n+                List<AbstractMethod> methodList = super.getMethodList(builderAssistant, mapperClass);\n                 methodList.add(new LogicDeleteByIdWithFill());\n                 methodList.add(new InsertBatchSomeColumn(t -> !(t.getFieldFill() == FieldFill.UPDATE\n                     || t.isLogicDelete() || t.getProperty().equals(\"version\"))));",
      "parent_sha": "38c25afc8236a089a0a242ba188eb9b5b7352785"
    }
  }
]