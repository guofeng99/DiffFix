[
  {
    "oid": "43b03201aa46e6acbce74754816af11a58f11bc8",
    "message": "Example: Use ImageLoader.loadImage(...) for widget",
    "date": "2012-09-29T17:21:25Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/43b03201aa46e6acbce74754816af11a58f11bc8",
    "details": {
      "sha": "4f4b2ccbcd4cd2e4795fe1585275bd053160796b",
      "filename": "UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/widget/UILWidgetProvider.java",
      "status": "modified",
      "additions": 15,
      "deletions": 8,
      "changes": 23,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/43b03201aa46e6acbce74754816af11a58f11bc8/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2Fwidget%2FUILWidgetProvider.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/43b03201aa46e6acbce74754816af11a58f11bc8/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2Fwidget%2FUILWidgetProvider.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2Fwidget%2FUILWidgetProvider.java?ref=43b03201aa46e6acbce74754816af11a58f11bc8",
      "patch": "@@ -4,22 +4,32 @@\n import android.appwidget.AppWidgetProvider;\n import android.content.Context;\n import android.graphics.Bitmap;\n-import android.view.ViewGroup.LayoutParams;\n-import android.widget.ImageView;\n import android.widget.RemoteViews;\n \n import com.nostra13.example.universalimageloader.R;\n import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;\n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n import com.nostra13.universalimageloader.core.ImageLoader;\n import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;\n+import com.nostra13.universalimageloader.core.assist.ImageSize;\n import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;\n+import com.nostra13.universalimageloader.core.display.FakeBitmapDisplayer;\n \n /**\n  * Example widget provider\n  * \n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\n  */\n public class UILWidgetProvider extends AppWidgetProvider {\n+\n+\tprivate static DisplayImageOptions optionsWithFakeDisplayer;\n+\n+\tstatic {\n+\t\toptionsWithFakeDisplayer = new DisplayImageOptions.Builder()\n+\t\t\t\t.displayer(new FakeBitmapDisplayer())\n+\t\t\t\t.build();\n+\t}\n+\n \t@Override\n \tpublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n \t\t// Initialize ImageLoader with configuration.\n@@ -44,19 +54,16 @@ static void updateAppWidget(Context context, final AppWidgetManager appWidgetMan\n \t\tfinal RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget);\n \n \t\tString[] imageUrls = context.getResources().getStringArray(R.array.heavy_images);\n-\t\tImageView tempImageView1 = new ImageView(context);\n-\t\tImageView tempImageView2 = new ImageView(context);\n-\t\ttempImageView1.setLayoutParams(new LayoutParams(70, 70)); // 70 - approximate size of ImageView in widget\n-\t\ttempImageView2.setLayoutParams(new LayoutParams(70, 70)); // 70 - approximate size of ImageView in widget\n \n-\t\tImageLoader.getInstance().displayImage(imageUrls[0], tempImageView1, new SimpleImageLoadingListener() {\n+\t\tImageSize minImageSize = new ImageSize(70, 70); // 70 - approximate size of ImageView in widget\n+\t\tImageLoader.getInstance().loadImage(context, imageUrls[0], minImageSize, optionsWithFakeDisplayer, new SimpleImageLoadingListener() {\n \t\t\t@Override\n \t\t\tpublic void onLoadingComplete(Bitmap loadedImage) {\n \t\t\t\tviews.setImageViewBitmap(R.id.image_left, loadedImage);\n \t\t\t\tappWidgetManager.updateAppWidget(appWidgetId, views);\n \t\t\t}\n \t\t});\n-\t\tImageLoader.getInstance().displayImage(imageUrls[1], tempImageView2, new SimpleImageLoadingListener() {\n+\t\tImageLoader.getInstance().loadImage(context, imageUrls[1], minImageSize, optionsWithFakeDisplayer, new SimpleImageLoadingListener() {\n \t\t\t@Override\n \t\t\tpublic void onLoadingComplete(Bitmap loadedImage) {\n \t\t\t\tviews.setImageViewBitmap(R.id.image_right, loadedImage);",
      "parent_sha": "786f45a55d9466b731eb658f4d4ddbfbc7057fd2"
    }
  },
  {
    "oid": "c4dbf64cbf6bbd6e9aaacfddeba0f5cdf8c53e98",
    "message": "New methods in StorageUtils",
    "date": "2015-03-06T21:56:36Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/c4dbf64cbf6bbd6e9aaacfddeba0f5cdf8c53e98",
    "details": {
      "sha": "f516a61eb18bce78d596c1b9a43abfae30f07460",
      "filename": "library/src/com/nostra13/universalimageloader/utils/StorageUtils.java",
      "status": "modified",
      "additions": 35,
      "deletions": 3,
      "changes": 38,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/c4dbf64cbf6bbd6e9aaacfddeba0f5cdf8c53e98/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/c4dbf64cbf6bbd6e9aaacfddeba0f5cdf8c53e98/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java?ref=c4dbf64cbf6bbd6e9aaacfddeba0f5cdf8c53e98",
      "patch": "@@ -94,11 +94,24 @@ public static File getCacheDirectory(Context context, boolean preferExternal) {\n \t * @return Cache {@link File directory}\n \t */\n \tpublic static File getIndividualCacheDirectory(Context context) {\n-\t\tFile cacheDir = getCacheDirectory(context);\n-\t\tFile individualCacheDir = new File(cacheDir, INDIVIDUAL_DIR_NAME);\n+\t\treturn getIndividualCacheDirectory(context, INDIVIDUAL_DIR_NAME);\n+\t}\n+\n+\t/**\n+\t * Returns individual application cache directory (for only image caching from ImageLoader). Cache directory will be\n+\t * created on SD card <i>(\"/Android/data/[app_package_name]/cache/uil-images\")</i> if card is mounted and app has\n+\t * appropriate permission. Else - Android defines cache directory on device's file system.\n+\t *\n+\t * @param context Application context\n+\t * @param cacheDir Cache directory path (e.g.: \"AppCacheDir\", \"AppDir/cache/images\")\n+\t * @return Cache {@link File directory}\n+\t */\n+\tpublic static File getIndividualCacheDirectory(Context context, String cacheDir) {\n+\t\tFile appCacheDir = getCacheDirectory(context);\n+\t\tFile individualCacheDir = new File(appCacheDir, cacheDir);\n \t\tif (!individualCacheDir.exists()) {\n \t\t\tif (!individualCacheDir.mkdir()) {\n-\t\t\t\tindividualCacheDir = cacheDir;\n+\t\t\t\tindividualCacheDir = appCacheDir;\n \t\t\t}\n \t\t}\n \t\treturn individualCacheDir;\n@@ -123,6 +136,25 @@ public static File getOwnCacheDirectory(Context context, String cacheDir) {\n \t\treturn appCacheDir;\n \t}\n \n+\t/**\n+\t * Returns specified application cache directory. Cache directory will be created on SD card by defined path if card\n+\t * is mounted and app has appropriate permission. Else - Android defines cache directory on device's file system.\n+\t *\n+\t * @param context  Application context\n+\t * @param cacheDir Cache directory path (e.g.: \"AppCacheDir\", \"AppDir/cache/images\")\n+\t * @return Cache {@link File directory}\n+\t */\n+\tpublic static File getOwnCacheDirectory(Context context, String cacheDir, boolean preferExternal) {\n+\t\tFile appCacheDir = null;\n+\t\tif (preferExternal && MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) && hasExternalStoragePermission(context)) {\n+\t\t\tappCacheDir = new File(Environment.getExternalStorageDirectory(), cacheDir);\n+\t\t}\n+\t\tif (appCacheDir == null || (!appCacheDir.exists() && !appCacheDir.mkdirs())) {\n+\t\t\tappCacheDir = context.getCacheDir();\n+\t\t}\n+\t\treturn appCacheDir;\n+\t}\n+\n \tprivate static File getExternalCacheDir(Context context) {\n \t\tFile dataDir = new File(new File(Environment.getExternalStorageDirectory(), \"Android\"), \"data\");\n \t\tFile appCacheDir = new File(new File(dataDir, context.getPackageName()), \"cache\");",
      "parent_sha": "a424895f6223c86578128280eb4065e4e8057f5d"
    }
  },
  {
    "oid": "260e115529d79de56cf6d9279d536d29fbd897e6",
    "message": "Issue #38 - Bug \"Divide by zero\"",
    "date": "2012-07-15T12:01:46Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/260e115529d79de56cf6d9279d536d29fbd897e6",
    "details": {
      "sha": "f6f2ec0d3efb81e5c4c3690a2ae65cacb224d12d",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/260e115529d79de56cf6d9279d536d29fbd897e6/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/260e115529d79de56cf6d9279d536d29fbd897e6/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=260e115529d79de56cf6d9279d536d29fbd897e6",
      "patch": "@@ -311,14 +311,14 @@ private ImageSize getImageSizeScaleTo(ImageView imageView) {\n \t\t\tLog.e(TAG, e.getMessage(), e);\r\n \t\t}\r\n \r\n-\t\tif (width < 0 && height < 0) {\r\n+\t\tif (width <= 0 && height <= 0) {\r\n \t\t\t// Get layout width and height parameters\r\n \t\t\tLayoutParams params = imageView.getLayoutParams();\r\n \t\t\twidth = params.width;\r\n \t\t\theight = params.height;\r\n \t\t}\r\n \r\n-\t\tif (width < 0 && height < 0) {\r\n+\t\tif (width <= 0 && height <= 0) {\r\n \t\t\t// Get device screen dimensions\r\n \t\t\twidth = configuration.maxImageWidthForMemoryCache;\r\n \t\t\theight = configuration.maxImageHeightForMemoryCache;\r",
      "parent_sha": "12a2317512d6c53d5c71a1faa3f3493ccb919630"
    }
  },
  {
    "oid": "a6d6695a781310e76c9f681e4d3ca86c890af517",
    "message": "Issue #247 - Prevent image decoding if image is reused",
    "date": "2013-04-13T17:35:55Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/a6d6695a781310e76c9f681e4d3ca86c890af517",
    "details": {
      "sha": "3db641ed6517b115ec801611916c1a023792eec4",
      "filename": "library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/a6d6695a781310e76c9f681e4d3ca86c890af517/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/a6d6695a781310e76c9f681e4d3ca86c890af517/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java?ref=a6d6695a781310e76c9f681e4d3ca86c890af517",
      "patch": "@@ -220,9 +220,8 @@ public void run() {\n \t\t\t\t\tlistener.onLoadingCancelled(uri, imageView);\n \t\t\t\t}\n \t\t\t});\n+\t\t\tlog(LOG_TASK_CANCELLED);\n \t\t}\n-\n-\t\tif (imageViewWasReused) log(LOG_TASK_CANCELLED);\n \t\treturn imageViewWasReused;\n \t}\n \n@@ -247,9 +246,11 @@ private Bitmap tryLoadBitmap() {\n \t\t\t\tlog(LOG_LOAD_IMAGE_FROM_NETWORK);\n \n \t\t\t\tString imageUriForDecoding = options.isCacheOnDisc() ? tryCacheImageOnDisc(imageFile) : uri;\n-\t\t\t\tbitmap = decodeImage(imageUriForDecoding);\n-\t\t\t\tif (bitmap == null) {\n-\t\t\t\t\tfireImageLoadingFailedEvent(FailType.DECODING_ERROR, null);\n+\t\t\t\tif (!checkTaskIsNotActual()) {\n+\t\t\t\t\tbitmap = decodeImage(imageUriForDecoding);\n+\t\t\t\t\tif (bitmap == null) {\n+\t\t\t\t\t\tfireImageLoadingFailedEvent(FailType.DECODING_ERROR, null);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (IllegalStateException e) {",
      "parent_sha": "0f5beaa2c22936d45fbbabac3151205f218b1883"
    }
  },
  {
    "oid": "1a2f798516c9ba4180b31d8dfffe45cebdedf025",
    "message": "Catch OOM while create rounded bitmap",
    "date": "2012-09-30T19:23:31Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/1a2f798516c9ba4180b31d8dfffe45cebdedf025",
    "details": {
      "sha": "3437e85595f5283525ef261099d93fab9457ea97",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/1a2f798516c9ba4180b31d8dfffe45cebdedf025/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/1a2f798516c9ba4180b31d8dfffe45cebdedf025/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java?ref=1a2f798516c9ba4180b31d8dfffe45cebdedf025",
      "patch": "@@ -1,5 +1,7 @@\n package com.nostra13.universalimageloader.core.display;\r\n \r\n+import com.nostra13.universalimageloader.core.ImageLoader;\r\n+\r\n import android.graphics.Bitmap;\r\n import android.graphics.Bitmap.Config;\r\n import android.graphics.Canvas;\r\n@@ -8,6 +10,7 @@\n import android.graphics.PorterDuffXfermode;\r\n import android.graphics.Rect;\r\n import android.graphics.RectF;\r\n+import android.util.Log;\r\n import android.widget.ImageView;\r\n \r\n /**\r\n@@ -25,7 +28,13 @@ public RoundedBitmapDisplayer(int roundPixels) {\n \r\n \t@Override\r\n \tpublic Bitmap display(Bitmap bitmap, ImageView imageView) {\r\n-\t\tBitmap roundBitmap = getRoundedCornerBitmap(bitmap);\r\n+\t\tBitmap roundBitmap;\r\n+\t\ttry {\r\n+\t\t\troundBitmap = getRoundedCornerBitmap(bitmap);\r\n+\t\t} catch (OutOfMemoryError e) {\r\n+\t\t\tLog.e(ImageLoader.TAG, \"Can't create bitmap with rounded corners. Not enough memory.\", e);\r\n+\t\t\troundBitmap = bitmap;\r\n+\t\t}\r\n \t\timageView.setImageBitmap(roundBitmap);\r\n \t\treturn roundBitmap;\r\n \t}\r",
      "parent_sha": "ffbf126e81493f473110287f023e523ede46ecb2"
    }
  },
  {
    "oid": "3e9f9ad2138dfee51efda469e9cc8888c4a50d79",
    "message": "Image copying: check if total == 0, use default total size",
    "date": "2014-05-30T23:02:39Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/3e9f9ad2138dfee51efda469e9cc8888c4a50d79",
    "details": {
      "sha": "fb900fb1fb183851a52f1b34a431079fb3e74cd8",
      "filename": "library/src/com/nostra13/universalimageloader/utils/IoUtils.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/3e9f9ad2138dfee51efda469e9cc8888c4a50d79/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FIoUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/3e9f9ad2138dfee51efda469e9cc8888c4a50d79/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FIoUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FIoUtils.java?ref=3e9f9ad2138dfee51efda469e9cc8888c4a50d79",
      "patch": "@@ -31,6 +31,8 @@ public final class IoUtils {\n \t/** {@value} */\n \tpublic static final int DEFAULT_BUFFER_SIZE = 32 * 1024; // 32 KB\n \t/** {@value} */\n+\tpublic static final int DEFAULT_IMAGE_TOTAL_SIZE = 500 * 1024; // 500 Kb\n+\t/** {@value} */\n \tpublic static final int CONTINUE_LOADING_PERCENTAGE = 75;\n \n \tprivate IoUtils() {\n@@ -64,7 +66,10 @@ public static boolean copyStream(InputStream is, OutputStream os, CopyListener l\n \tpublic static boolean copyStream(InputStream is, OutputStream os, CopyListener listener, int bufferSize)\n \t\t\tthrows IOException {\n \t\tint current = 0;\n-\t\tfinal int total = is.available();\n+\t\tint total = is.available();\n+\t\tif (total <= 0) {\n+\t\t\ttotal = DEFAULT_IMAGE_TOTAL_SIZE;\n+\t\t}\n \n \t\tfinal byte[] bytes = new byte[bufferSize];\n \t\tint count;",
      "parent_sha": "199f203fc7ab2f09ffd0825c6e79521c8e1047a3"
    }
  },
  {
    "oid": "71cc118448af982b0e8f4d4ffdf0d1f9dc3c4572",
    "message": "Fixed bug \"double displaying\" if image is cached in memory",
    "date": "2012-10-28T13:28:28Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/71cc118448af982b0e8f4d4ffdf0d1f9dc3c4572",
    "details": {
      "sha": "b87fa0809d938f956104cd5cdbefeb8a9ebeafe9",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/71cc118448af982b0e8f4d4ffdf0d1f9dc3c4572/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/71cc118448af982b0e8f4d4ffdf0d1f9dc3c4572/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=71cc118448af982b0e8f4d4ffdf0d1f9dc3c4572",
      "patch": "@@ -198,8 +198,7 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op\n \t\tif (bmp != null && !bmp.isRecycled()) {\r\n \t\t\tif (configuration.loggingEnabled) Log.i(TAG, String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey));\r\n \t\t\tlistener.onLoadingStarted();\r\n-\t\t\tBitmap displayedBitmap = options.getDisplayer().display(bmp, imageView);\r\n-\t\t\timageView.setImageBitmap(displayedBitmap);\r\n+\t\t\toptions.getDisplayer().display(bmp, imageView);\r\n \t\t\tlistener.onLoadingComplete(bmp);\r\n \t\t} else {\r\n \t\t\tlistener.onLoadingStarted();\r",
      "parent_sha": "b4c19fc12373703f89f2c9a2d0f6d562eaa5acaf"
    }
  },
  {
    "oid": "e5b004f711c1662cae8cb8b0ca447d9bcc0eed7e",
    "message": "Returned missed contacts photo considering",
    "date": "2014-07-17T19:25:39Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/e5b004f711c1662cae8cb8b0ca447d9bcc0eed7e",
    "details": {
      "sha": "964b51cef3c6b740b9c77662019ce21b9016bf46",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/e5b004f711c1662cae8cb8b0ca447d9bcc0eed7e/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/e5b004f711c1662cae8cb8b0ca447d9bcc0eed7e/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java?ref=e5b004f711c1662cae8cb8b0ca447d9bcc0eed7e",
      "patch": "@@ -20,6 +20,7 @@\n import android.graphics.Bitmap;\n import android.graphics.Bitmap.CompressFormat;\n import android.net.Uri;\n+import android.provider.ContactsContract;\n import android.provider.MediaStore;\n import com.nostra13.universalimageloader.core.DisplayImageOptions;\n import com.nostra13.universalimageloader.core.assist.ContentLengthInputStream;\n@@ -173,7 +174,7 @@ protected InputStream getStreamFromContent(String imageUri, Object extra) throws\n \t\tContentResolver res = context.getContentResolver();\n \n \t\tUri uri = Uri.parse(imageUri);\n-\t\tif (isVideoUri(uri)) {\n+\t\tif (isVideoUri(uri)) { // video thumbnail\n \t\t\tLong origId = Long.valueOf(uri.getLastPathSegment());\n \t\t\tBitmap bitmap = MediaStore.Video.Thumbnails\n \t\t\t\t\t.getThumbnail(res, origId, MediaStore.Images.Thumbnails.MINI_KIND, null);\n@@ -182,6 +183,8 @@ protected InputStream getStreamFromContent(String imageUri, Object extra) throws\n \t\t\t\tbitmap.compress(CompressFormat.PNG, 0, bos);\n \t\t\t\treturn new ByteArrayInputStream(bos.toByteArray());\n \t\t\t}\n+\t\t} else if (imageUri.startsWith(CONTENT_CONTACTS_URI_PREFIX)) { // contacts photo\n+\t\t\treturn ContactsContract.Contacts.openContactPhotoInputStream(res, uri);\n \t\t}\n \n \t\treturn res.openInputStream(uri);",
      "parent_sha": "56363055af5806d640398250c08afd9c695137ac"
    }
  },
  {
    "oid": "a59c813036d3d19af5da113e5ea18e0c1eaaa3ed",
    "message": "Java docs fix",
    "date": "2011-12-15T17:13:28Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/a59c813036d3d19af5da113e5ea18e0c1eaaa3ed",
    "details": {
      "sha": "aa2ee94ba4c6be3c2981f39aee4a89bccf8f562d",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/imageloader/ImageDecoder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/a59c813036d3d19af5da113e5ea18e0c1eaaa3ed/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageDecoder.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/a59c813036d3d19af5da113e5ea18e0c1eaaa3ed/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageDecoder.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageDecoder.java?ref=a59c813036d3d19af5da113e5ea18e0c1eaaa3ed",
      "patch": "@@ -10,7 +10,7 @@\n import android.util.Log;\r\n \r\n /**\r\n- * Decodes image from URL (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\") into {@link Bitmap}\r\n+ * Decodes images to {@link Bitmap}\r\n  * \r\n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\r\n  */\r\n@@ -22,11 +22,11 @@ private ImageDecoder() {\n \t}\r\n \r\n \t/**\r\n-\t * Decodes image to {@link Bitmap}. Image is scaled close to incoming {@link ImageSize image size} during decoding.\r\n-\t * Initial image size is reduced by the power of 2 (according Android recommendations)\r\n+\t * Decodes image from URL into {@link Bitmap}. Image is scaled close to incoming {@link ImageSize image size} during\r\n+\t * decoding. Initial image size is reduced by the power of 2 (according Android recommendations)\r\n \t * \r\n \t * @param imageUrl\r\n-\t *            Image URL\r\n+\t *            Image URL (<b>i.e.:</b> \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\r\n \t * @param targetImageSize\r\n \t *            Image size to scale to during decoding\r\n \t * @return Decoded bitmap\r",
      "parent_sha": "228ebcb1c55f5bb0c1953c76be4191161402fa79"
    }
  },
  {
    "oid": "b6f760790c0862c89e88117dd82e0e88ee2a23fc",
    "message": "Issue #229 - ConcurrentModificationException",
    "date": "2013-04-05T21:29:10Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/b6f760790c0862c89e88117dd82e0e88ee2a23fc",
    "details": {
      "sha": "04d14e2a1fc1c8412f4f0e9b956973a9758ceb08",
      "filename": "library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/b6f760790c0862c89e88117dd82e0e88ee2a23fc/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2FBaseMemoryCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/b6f760790c0862c89e88117dd82e0e88ee2a23fc/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2FBaseMemoryCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2FBaseMemoryCache.java?ref=b6f760790c0862c89e88117dd82e0e88ee2a23fc",
      "patch": "@@ -57,7 +57,9 @@ public void remove(K key) {\n \n \t@Override\n \tpublic Collection<K> keys() {\n-\t\treturn new HashSet<K>(softMap.keySet());\n+\t\tsynchronized (softMap) {\n+\t\t\treturn new HashSet<K>(softMap.keySet());\n+\t\t}\n \t}\n \n \t@Override",
      "parent_sha": "38e631b6e0fec39fc5b2440d4b77dce2fdddc700"
    }
  },
  {
    "oid": "927953e95a9025887c7f4c282faf5d0f6ac59415",
    "message": "Not process images from FTP by default.",
    "date": "2013-02-03T17:57:46Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/927953e95a9025887c7f4c282faf5d0f6ac59415",
    "details": {
      "sha": "b32779f30b87215d3832edf115e85a6e8042485e",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/ImageDownloader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/927953e95a9025887c7f4c282faf5d0f6ac59415/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/927953e95a9025887c7f4c282faf5d0f6ac59415/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java?ref=927953e95a9025887c7f4c282faf5d0f6ac59415",
      "patch": "@@ -23,7 +23,7 @@ public abstract class ImageDownloader {\n \t/** Retrieves {@link InputStream} of image by URI. Image can be located as in the network and on local file system. */\n \tpublic InputStream getStream(URI imageUri) throws IOException {\n \t\tString scheme = imageUri.getScheme();\n-\t\tif (SCHEME_HTTP.equals(scheme) || SCHEME_HTTPS.equals(scheme) || SCHEME_FTP.equals(scheme)) {\n+\t\tif (SCHEME_HTTP.equals(scheme) || SCHEME_HTTPS.equals(scheme)) {\n \t\t\treturn getStreamFromNetwork(imageUri);\n \t\t} else if (SCHEME_FILE.equals(scheme)) {\n \t\t\treturn getStreamFromFile(imageUri);",
      "parent_sha": "0f62261c32eb895fa21d237540783af4ee36ad3d"
    }
  },
  {
    "oid": "a3b4f8e3678aa65042c2ee7286c432967d82a7bf",
    "message": "Added StorageUtils.getOwnCacheDirectory(context, dirPath) for creation\nof own cache folder at SD card's root",
    "date": "2012-05-31T18:33:06Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/a3b4f8e3678aa65042c2ee7286c432967d82a7bf",
    "details": {
      "sha": "5f9c728994a4a3a758d2f5e976fd1d98e8bf868d",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/utils/StorageUtils.java",
      "status": "modified",
      "additions": 24,
      "deletions": 3,
      "changes": 27,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/a3b4f8e3678aa65042c2ee7286c432967d82a7bf/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/a3b4f8e3678aa65042c2ee7286c432967d82a7bf/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java?ref=a3b4f8e3678aa65042c2ee7286c432967d82a7bf",
      "patch": "@@ -3,12 +3,12 @@\n import java.io.File;\r\n import java.io.IOException;\r\n \r\n-import com.nostra13.universalimageloader.core.ImageLoader;\r\n-\r\n import android.content.Context;\r\n import android.os.Environment;\r\n import android.util.Log;\r\n \r\n+import com.nostra13.universalimageloader.core.ImageLoader;\r\n+\r\n /**\r\n  * Provides application storage paths\r\n  * \r\n@@ -23,7 +23,7 @@ private StorageUtils() {\n \r\n \t/**\r\n \t * Returns application cache directory. Cache directory will be created on SD card\r\n-\t * <i>(\"/Android/[app_package_name]/cache\")</i> if card is mounted. Else - Android defines cache directory on\r\n+\t * <i>(\"/Android/data/[app_package_name]/cache\")</i> if card is mounted. Else - Android defines cache directory on\r\n \t * device's file system.\r\n \t * \r\n \t * @param context\r\n@@ -61,6 +61,27 @@ public static File getIndividualCacheDirectory(Context context) {\n \t\treturn individualCacheDir;\r\n \t}\r\n \r\n+\t/**\r\n+\t * Returns specified application cache directory. Cache directory will be created on SD card by defined path if card\r\n+\t * is mounted. Else - Android defines cache directory on device's file system.\r\n+\t * \r\n+\t * @param context\r\n+\t *            Application context\r\n+\t * @param cacheDir\r\n+\t *            Cache directory path (e.g.: \"AppCacheDir\", \"AppDir/cache/images\")\r\n+\t * @return Cache {@link File directory}\r\n+\t */\r\n+\tpublic static File getOwnCacheDirectory(Context context, String cacheDir) {\r\n+\t\tFile appCacheDir = null;\r\n+\t\tif (Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\r\n+\t\t\tappCacheDir = new File(Environment.getExternalStorageDirectory(), cacheDir);\r\n+\t\t}\r\n+\t\tif (!appCacheDir.mkdirs()) {\r\n+\t\t\tappCacheDir = context.getCacheDir();\r\n+\t\t}\r\n+\t\treturn appCacheDir;\r\n+\t}\r\n+\r\n \tprivate static File getExternalCacheDir(Context context) {\r\n \t\tFile dataDir = new File(new File(Environment.getExternalStorageDirectory(), \"Android\"), \"data\");\r\n \t\tFile appCacheDir = new File(new File(dataDir, context.getPackageName()), \"cache\");\r",
      "parent_sha": "8a82b7c668dc7c6b93ec115794353447a0d82cd4"
    }
  },
  {
    "oid": "d928b4e81e2f80d5b0a13c3ade8efef5ce8b059a",
    "message": "Prevented possible \"division by zero\". Refactored getImageSizeScaleTo()\nmethod.",
    "date": "2012-07-17T20:07:18Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/d928b4e81e2f80d5b0a13c3ade8efef5ce8b059a",
    "details": {
      "sha": "01b25f5adc72671c9298a671b93ff0d2554d9655",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 30,
      "deletions": 40,
      "changes": 70,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/d928b4e81e2f80d5b0a13c3ade8efef5ce8b059a/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/d928b4e81e2f80d5b0a13c3ade8efef5ce8b059a/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=d928b4e81e2f80d5b0a13c3ade8efef5ce8b059a",
      "patch": "@@ -284,54 +284,44 @@ public void stop() {\n \t/**\r\n \t * Defines image size for loading at memory (for memory economy) by {@link ImageView} parameters.<br />\r\n \t * Size computing algorithm:<br />\r\n-\t * 1) Get <b>maxWidth</b> and <b>maxHeight</b>. If both of them are not set then go to step #2.<br />\r\n-\t * 2) Get <b>layout_width</b> and <b>layout_height</b>. If both of them haven't exact value then go to step #3.</br>\r\n+\t * 1) Get <b>layout_width</b> and <b>layout_height</b>. If both of them haven't exact value then go to step #2.</br>\r\n+\t * 2) Get <b>maxWidth</b> and <b>maxHeight</b>. If both of them are not set then go to step #3.<br />\r\n \t * 3) Get device screen dimensions.\r\n \t */\r\n \tprivate ImageSize getImageSizeScaleTo(ImageView imageView) {\r\n-\t\tint width = -1;\r\n-\t\tint height = -1;\r\n+\t\tLayoutParams params = imageView.getLayoutParams();\r\n+\t\tint width = params.width; // Get layout width parameter\r\n+\t\tif (width <= 0) width = getFieldValue(imageView, \"mMaxWidth\"); // Check maxWidth parameter\r\n+\t\tif (width <= 0) width = configuration.maxImageWidthForMemoryCache;\r\n+\r\n+\t\tint height = params.height; // Get layout height parameter\r\n+\t\tif (height <= 0) height = getFieldValue(imageView, \"mMaxHeight\"); // Check maxHeight parameter\r\n+\t\tif (height <= 0) height = configuration.maxImageHeightForMemoryCache;\r\n+\r\n+\t\t// Consider device screen orientation\r\n+\t\tint screenOrientation = imageView.getContext().getResources().getConfiguration().orientation;\r\n+\t\tif ((screenOrientation == Configuration.ORIENTATION_PORTRAIT && width > height)\r\n+\t\t\t\t|| (screenOrientation == Configuration.ORIENTATION_LANDSCAPE && width < height)) {\r\n+\t\t\tint tmp = width;\r\n+\t\t\twidth = height;\r\n+\t\t\theight = tmp;\r\n+\t\t}\r\n+\r\n+\t\treturn new ImageSize(width, height);\r\n+\t}\r\n \r\n-\t\t// Check maxWidth and maxHeight parameters\r\n+\tprivate int getFieldValue(Object object, String fieldName) {\r\n+\t\tint value = 0;\r\n \t\ttry {\r\n-\t\t\tField maxWidthField = ImageView.class.getDeclaredField(\"mMaxWidth\");\r\n-\t\t\tField maxHeightField = ImageView.class.getDeclaredField(\"mMaxHeight\");\r\n-\t\t\tmaxWidthField.setAccessible(true);\r\n-\t\t\tmaxHeightField.setAccessible(true);\r\n-\t\t\tint maxWidth = (Integer) maxWidthField.get(imageView);\r\n-\t\t\tint maxHeight = (Integer) maxHeightField.get(imageView);\r\n-\r\n-\t\t\tif (maxWidth >= 0 && maxWidth < Integer.MAX_VALUE) {\r\n-\t\t\t\twidth = maxWidth;\r\n-\t\t\t}\r\n-\t\t\tif (maxHeight >= 0 && maxHeight < Integer.MAX_VALUE) {\r\n-\t\t\t\theight = maxHeight;\r\n+\t\t\tField field = ImageView.class.getDeclaredField(fieldName);\r\n+\t\t\tfield.setAccessible(true);\r\n+\t\t\tint fieldValue = (Integer) field.get(object);\r\n+\t\t\tif (fieldValue > 0 && fieldValue < Integer.MAX_VALUE) {\r\n+\t\t\t\tvalue = fieldValue;\r\n \t\t\t}\r\n \t\t} catch (Exception e) {\r\n \t\t\tLog.e(TAG, e.getMessage(), e);\r\n \t\t}\r\n-\r\n-\t\tif (width <= 0 && height <= 0) {\r\n-\t\t\t// Get layout width and height parameters\r\n-\t\t\tLayoutParams params = imageView.getLayoutParams();\r\n-\t\t\twidth = params.width;\r\n-\t\t\theight = params.height;\r\n-\t\t}\r\n-\r\n-\t\tif (width <= 0 && height <= 0) {\r\n-\t\t\t// Get device screen dimensions\r\n-\t\t\twidth = configuration.maxImageWidthForMemoryCache;\r\n-\t\t\theight = configuration.maxImageHeightForMemoryCache;\r\n-\r\n-\t\t\t// Consider device screen orientation\r\n-\t\t\tint screenOrientation = imageView.getContext().getResources().getConfiguration().orientation;\r\n-\t\t\tif ((screenOrientation == Configuration.ORIENTATION_PORTRAIT && width > height)\r\n-\t\t\t\t\t|| (screenOrientation == Configuration.ORIENTATION_LANDSCAPE && width < height)) {\r\n-\t\t\t\tint tmp = width;\r\n-\t\t\t\twidth = height;\r\n-\t\t\t\theight = tmp;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn new ImageSize(width, height);\r\n+\t\treturn value;\r\n \t}\r\n }\r",
      "parent_sha": "27340e72d1b6af52f412bc12f9e16e26eeb068f3"
    }
  },
  {
    "oid": "5abd0e59191fb44f8ab56d9f877d14342b8a1fa1",
    "message": "Speed up image downloading",
    "date": "2011-12-20T12:57:49Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/5abd0e59191fb44f8ab56d9f877d14342b8a1fa1",
    "details": {
      "sha": "c7d3d5b5f35827ddfd412faaf9a77248826f02d0",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/5abd0e59191fb44f8ab56d9f877d14342b8a1fa1/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/5abd0e59191fb44f8ab56d9f877d14342b8a1fa1/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=5abd0e59191fb44f8ab56d9f877d14342b8a1fa1",
      "patch": "@@ -1,9 +1,9 @@\n package com.nostra13.universalimageloader.imageloader;\r\n \r\n+import java.io.BufferedInputStream;\r\n import java.io.File;\r\n import java.io.FileOutputStream;\r\n import java.io.IOException;\r\n-import java.io.InputStream;\r\n import java.io.OutputStream;\r\n import java.lang.reflect.Field;\r\n import java.net.HttpURLConnection;\r\n@@ -362,11 +362,14 @@ private void saveImageOnDisc(String imageUrl, File targetFile) throws MalformedU\n \t\t\tHttpURLConnection conn = (HttpURLConnection) new URL(imageUrl).openConnection();\r\n \t\t\tconn.setConnectTimeout(configuration.httpConnectTimeout);\r\n \t\t\tconn.setReadTimeout(configuration.httpReadTimeout);\r\n-\t\t\tInputStream is = conn.getInputStream();\r\n+\t\t\tBufferedInputStream is = new BufferedInputStream(conn.getInputStream());\r\n \t\t\ttry {\r\n \t\t\t\tOutputStream os = new FileOutputStream(targetFile);\r\n \t\t\t\ttry {\r\n+\t\t\t\t\tlong start = System.currentTimeMillis();\r\n \t\t\t\t\tFileUtils.copyStream(is, os);\r\n+\t\t\t\t\tlong finish = System.currentTimeMillis();\r\n+\t\t\t\t\tLog.i(\"NOSTRA\", finish - start + \" ms\");\r\n \t\t\t\t} finally {\r\n \t\t\t\t\tos.close();\r\n \t\t\t\t}\r",
      "parent_sha": "416bfe5c08886215a324f06169059bbf8ed27cb3"
    }
  },
  {
    "oid": "a299f48d8f3492578c3706e1de65b83c5f606491",
    "message": "Clean code",
    "date": "2013-06-27T17:40:42Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/a299f48d8f3492578c3706e1de65b83c5f606491",
    "details": {
      "sha": "62cc8d675f429e97a957d1cdd9e030d3f0e8f75b",
      "filename": "library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/a299f48d8f3492578c3706e1de65b83c5f606491/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/a299f48d8f3492578c3706e1de65b83c5f606491/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java?ref=a299f48d8f3492578c3706e1de65b83c5f606491",
      "patch": "@@ -29,15 +29,15 @@\n /**\n  * Abstract disc cache limited by some parameter. If cache exceeds specified limit then file with the most oldest last\n  * usage date will be deleted.\n- * \n+ *\n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\n  * @since 1.0.0\n  * @see BaseDiscCache\n  * @see FileNameGenerator\n  */\n public abstract class LimitedDiscCache extends BaseDiscCache {\n \n-\tprivate static final int INVALID_READ_SIZE = -1;\n+\tprivate static final int INVALID_SIZE = -1;\n \n \tprivate final AtomicInteger cacheSize;\n \n@@ -93,7 +93,7 @@ public void put(String key, File file) {\n \n \t\twhile (curCacheSize + valueSize > sizeLimit) {\n \t\t\tint freedSize = removeNext();\n-\t\t\tif (freedSize == INVALID_READ_SIZE ) break; // cache is empty (have nothing to delete)\n+\t\t\tif (freedSize == INVALID_SIZE) break; // cache is empty (have nothing to delete)\n \t\t\tcurCacheSize = cacheSize.addAndGet(-freedSize);\n \t\t}\n \t\tcacheSize.addAndGet(valueSize);\n@@ -124,7 +124,7 @@ public void clear() {\n \t/** Remove next file and returns it's size */\n \tprivate int removeNext() {\n \t\tif (lastUsageDates.isEmpty()) {\n-\t\t\treturn INVALID_READ_SIZE;\n+\t\t\treturn INVALID_SIZE;\n \t\t}\n \t\tLong oldestUsage = null;\n \t\tFile mostLongUsedFile = null;\n@@ -144,15 +144,16 @@ private int removeNext() {\n \t\t\t}\n \t\t}\n \n-\t\tint fileSize = getSize(mostLongUsedFile);\n-\t\t\n-\t\tif (!mostLongUsedFile.exists()) {\n-\t\t\tlastUsageDates.remove(mostLongUsedFile);\n-\t\t\treturn 0;\n-\t\t}\n-\t\t\n-\t\tif ( mostLongUsedFile.delete()) {\n-\t\t\tlastUsageDates.remove(mostLongUsedFile);\n+\t\tint fileSize = 0;\n+\t\tif (mostLongUsedFile != null) {\n+\t\t\tif (mostLongUsedFile.exists()) {\n+\t\t\t\tfileSize = getSize(mostLongUsedFile);\n+\t\t\t\tif (mostLongUsedFile.delete()) {\n+\t\t\t\t\tlastUsageDates.remove(mostLongUsedFile);\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlastUsageDates.remove(mostLongUsedFile);\n+\t\t\t}\n \t\t}\n \t\treturn fileSize;\n \t}",
      "parent_sha": "7e4d0026598dff7a8f1cf663b1a176a93d6c2d30"
    }
  },
  {
    "oid": "784432dee08ce93d4a7b797166dc434a47ce3659",
    "message": "fix download  unknow  scheme like \"HTTP\"",
    "date": "2013-07-27T08:36:45Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/784432dee08ce93d4a7b797166dc434a47ce3659",
    "details": {
      "sha": "389c7bb6af1eb1cecdcef11bdc50fc98a3d5e8bf",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/ImageDownloader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/784432dee08ce93d4a7b797166dc434a47ce3659/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/784432dee08ce93d4a7b797166dc434a47ce3659/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java?ref=784432dee08ce93d4a7b797166dc434a47ce3659",
      "patch": "@@ -19,6 +19,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Locale;\n \n /**\n  * Provides retrieving of {@link InputStream} of image by URI.<br />\n@@ -70,7 +71,7 @@ public static Scheme ofUri(String uri) {\n \t\t}\n \n \t\tprivate boolean belongsTo(String uri) {\n-\t\t\treturn uri.startsWith(uriPrefix);\n+\t\t\treturn uri.toLowerCase(Locale.getDefault()).startsWith(uriPrefix);\n \t\t}\n \n \t\t/** Appends scheme to incoming path */",
      "parent_sha": "077a22f88b2204581f7a2ca19c575e09c98cfe45"
    }
  },
  {
    "oid": "81eb4299432f6f52b6b83252267d245ddaa0a03f",
    "message": "[#1084] Used \"cached images\" executor for local files (assets, drawables).",
    "date": "2020-04-06T20:51:55Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/81eb4299432f6f52b6b83252267d245ddaa0a03f",
    "details": {
      "sha": "57831af6c28e22136ebb5a192bd43be2c2294060",
      "filename": "library/src/main/java/com/nostra13/universalimageloader/core/ImageLoaderEngine.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/81eb4299432f6f52b6b83252267d245ddaa0a03f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderEngine.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/81eb4299432f6f52b6b83252267d245ddaa0a03f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderEngine.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderEngine.java?ref=81eb4299432f6f52b6b83252267d245ddaa0a03f",
      "patch": "@@ -31,6 +31,8 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import static com.nostra13.universalimageloader.core.download.ImageDownloader.*;\n+\n /**\n  * {@link ImageLoader} engine which responsible for {@linkplain LoadAndDisplayImageTask display task} execution.\n  *\n@@ -70,7 +72,8 @@ void submit(final LoadAndDisplayImageTask task) {\n \t\t\t@Override\n \t\t\tpublic void run() {\n \t\t\t\tFile image = configuration.diskCache.get(task.getLoadingUri());\n-\t\t\t\tboolean isImageCachedOnDisk = image != null && image.exists();\n+\t\t\t\tboolean isImageCachedOnDisk = image != null && image.exists()\n+\t\t\t\t\t\t|| isLocalUri(task.getLoadingUri());\n \t\t\t\tinitExecutorsIfNeed();\n \t\t\t\tif (isImageCachedOnDisk) {\n \t\t\t\t\ttaskExecutorForCachedImages.execute(task);\n@@ -87,6 +90,11 @@ void submit(ProcessAndDisplayImageTask task) {\n \t\ttaskExecutorForCachedImages.execute(task);\n \t}\n \n+\tprivate boolean isLocalUri(String uri) {\n+\t\tScheme scheme = Scheme.ofUri(uri);\n+\t\treturn scheme == Scheme.ASSETS || scheme == Scheme.FILE || scheme == Scheme.DRAWABLE;\n+\t}\n+\n \tprivate void initExecutorsIfNeed() {\n \t\tif (!configuration.customExecutor && ((ExecutorService) taskExecutor).isShutdown()) {\n \t\t\ttaskExecutor = createTaskExecutor();",
      "parent_sha": "da742a392e24e158de26fe0640bdd2582a6d60a3"
    }
  },
  {
    "oid": "8d97acd12df02f57b30246ac09605d4077731fe7",
    "message": "Issue #174 - Concurrent Modification Synchronization issue",
    "date": "2013-02-24T18:46:59Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/8d97acd12df02f57b30246ac09605d4077731fe7",
    "details": {
      "sha": "19153332709beac5eb603680c71ac7aec24c0db3",
      "filename": "library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/8d97acd12df02f57b30246ac09605d4077731fe7/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2FBaseMemoryCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/8d97acd12df02f57b30246ac09605d4077731fe7/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2FBaseMemoryCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2FBaseMemoryCache.java?ref=8d97acd12df02f57b30246ac09605d4077731fe7",
      "patch": "@@ -19,6 +19,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n \n /**\n@@ -56,7 +57,7 @@ public void remove(K key) {\n \n \t@Override\n \tpublic Collection<K> keys() {\n-\t\treturn softMap.keySet();\n+\t\treturn new HashSet<K>(softMap.keySet());\n \t}\n \n \t@Override",
      "parent_sha": "9cacbe549b9f0c9dffb806356167362859532c20"
    }
  },
  {
    "oid": "923b0939c669901069979939625d34b300454b0b",
    "message": "Issue #4 - Refactor PhotosQueue.clean()\nAdded queue synchronization",
    "date": "2011-12-09T22:30:18Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/923b0939c669901069979939625d34b300454b0b",
    "details": {
      "sha": "f1e4702a2d9955ae7d303a35337c3c97e52886e4",
      "filename": "src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/923b0939c669901069979939625d34b300454b0b/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/923b0939c669901069979939625d34b300454b0b/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=923b0939c669901069979939625d34b300454b0b",
      "patch": "@@ -9,6 +9,7 @@\n import java.net.HttpURLConnection;\r\n import java.net.MalformedURLException;\r\n import java.net.URL;\r\n+import java.util.Iterator;\r\n import java.util.LinkedList;\r\n import java.util.List;\r\n \r\n@@ -135,7 +136,9 @@ private void queuePhoto(PhotoToLoad photoToLoad) {\n \t\t}\r\n \r\n \t\t// This ImageView may be used for other images before. So there may be some old tasks in the queue. We need to discard them.\r\n-\t\tremoveFromQueue(photoToLoad.imageView);\r\n+\t\tsynchronized (photoToLoadQueue) {\r\n+\t\t\tremoveFromQueue(photoToLoad.imageView);\r\n+\t\t}\r\n \r\n \t\t// If image was cached on disc we put load image task in front of the queue. \r\n \t\t// If not - we put load image task in the end of the queue.\r\n@@ -174,13 +177,12 @@ private File getLocalImageFile(String imageUrl) {\n \t\treturn new File(cacheDir, fileName);\r\n \t}\r\n \r\n-\t// Removes all instances of this ImageView\r\n \tpublic void removeFromQueue(ImageView image) {\r\n-\t\tfor (int j = 0; j < photoToLoadQueue.size();) {\r\n-\t\t\tif (photoToLoadQueue.get(j).imageView == image) {\r\n-\t\t\t\tphotoToLoadQueue.remove(j);\r\n-\t\t\t} else {\r\n-\t\t\t\t++j;\r\n+\t\tIterator<PhotoToLoad> it = photoToLoadQueue.iterator();\r\n+\t\twhile (it.hasNext()) {\r\n+\t\t\tPhotoToLoad photo = it.next();\r\n+\t\t\tif (photo.imageView == image) {\r\n+\t\t\t\tit.remove();\r\n \t\t\t}\r\n \t\t}\r\n \t}\r",
      "parent_sha": "d3a9f6620694cbbaa52421a693e3bced290d3a46"
    }
  },
  {
    "oid": "035f3bfb2a58361c8c51c58343634dc33df12fb2",
    "message": "Sample: constants",
    "date": "2014-09-16T15:07:36Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/035f3bfb2a58361c8c51c58343634dc33df12fb2",
    "details": {
      "sha": "15dbb9ef6759eff5c8f80975c1fc6ec71bad01f9",
      "filename": "sample/src/com/nostra13/universalimageloader/sample/Constants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/035f3bfb2a58361c8c51c58343634dc33df12fb2/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FConstants.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/035f3bfb2a58361c8c51c58343634dc33df12fb2/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FConstants.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FConstants.java?ref=035f3bfb2a58361c8c51c58343634dc33df12fb2",
      "patch": "@@ -22,7 +22,6 @@ public final class Constants {\n \n \tpublic static final String[] IMAGES = new String[] {\n \t\t\t// Heavy images\n-\t\t\t\"http://www.ioncannon.net/wp-content/uploads/2011/06/test9.webp\",\n \t\t\t\"https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s1024/A%252520Photographer.jpg\",\n \t\t\t\"https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s1024/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg\",\n \t\t\t\"https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s1024/Another%252520Rockaway%252520Sunset.jpg\",\n@@ -149,6 +148,7 @@ public final class Constants {\n \t\t\t\"http://macprovid.vo.llnwd.net/o43/hub/media/1090/6882/01_headline_Muse.jpg\",\n \t\t\t// Special cases\n \t\t\t\"http://cdn.urbanislandz.com/wp-content/uploads/2011/10/MMSposter-large.jpg\", // Very large image\n+\t\t\t\"http://www.ioncannon.net/wp-content/uploads/2011/06/test9.webp\", // WebP image\n \t\t\t\"http://4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg\", // Image with \"Mark has been invalidated\" problem\n \t\t\t\"file:///sdcard/Universal Image Loader @#&=+-_.,!()~'%20.png\", // Image from SD card with encoded symbols\n \t\t\t\"assets://Living Things @#&=+-_.,!()~'%20.jpg\", // Image from assets",
      "parent_sha": "d872c24654d4ea4281cd19e4015251da91ed8fb2"
    }
  },
  {
    "oid": "ea207757b845bb5f0c3c9d06b218f89861029efe",
    "message": "Sample: New image URLs",
    "date": "2013-10-08T16:49:44Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/ea207757b845bb5f0c3c9d06b218f89861029efe",
    "details": {
      "sha": "fc91844677ec2604e20f118f78ea8c75cd70e1ff",
      "filename": "sample/src/com/nostra13/example/universalimageloader/Constants.java",
      "status": "modified",
      "additions": 101,
      "deletions": 40,
      "changes": 141,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/ea207757b845bb5f0c3c9d06b218f89861029efe/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FConstants.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/ea207757b845bb5f0c3c9d06b218f89861029efe/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FConstants.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FConstants.java?ref=ea207757b845bb5f0c3c9d06b218f89861029efe",
      "patch": "@@ -22,45 +22,105 @@ public final class Constants {\n \n \tpublic static final String[] IMAGES = new String[] {\n \t\t\t// Heavy images\n-\t\t\t\"https://lh6.googleusercontent.com/-jZgveEqb6pg/T3R4kXScycI/AAAAAAAAAE0/xQ7CvpfXDzc/s1024/sample_image_01.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-K2FMuOozxU0/T3R4lRAiBTI/AAAAAAAAAE8/a3Eh9JvnnzI/s1024/sample_image_02.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-SCS5C646rxM/T3R4l7QB6xI/AAAAAAAAAFE/xLcuVv3CUyA/s1024/sample_image_03.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-f0NJR6-_Thg/T3R4mNex2wI/AAAAAAAAAFI/45oug4VE8MI/s1024/sample_image_04.jpg\",\n-\t\t\t\"https://lh3.googleusercontent.com/-n-xcJmiI0pg/T3R4mkSchHI/AAAAAAAAAFU/EoiNNb7kk3A/s1024/sample_image_05.jpg\",\n-\t\t\t\"https://lh3.googleusercontent.com/-X43vAudm7f4/T3R4nGSChJI/AAAAAAAAAFk/3bna6D-2EE8/s1024/sample_image_06.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-MpZneqIyjXU/T3R4nuGO1aI/AAAAAAAAAFg/r09OPjLx1ZY/s1024/sample_image_07.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-ql3YNfdClJo/T3XvW9apmFI/AAAAAAAAAL4/_6HFDzbahc4/s1024/sample_image_08.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-Pxa7eqF4cyc/T3R4oasvPEI/AAAAAAAAAF0/-uYDH92h8LA/s1024/sample_image_09.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-Li-rjhFEuaI/T3R4o-VUl4I/AAAAAAAAAF8/5E5XdMnP1oE/s1024/sample_image_10.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-_HU4fImgFhA/T3R4pPVIwWI/AAAAAAAAAGA/0RfK_Vkgth4/s1024/sample_image_11.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-0gnNrVjwa0Y/T3R4peGYJwI/AAAAAAAAAGU/uX_9wvRPM9I/s1024/sample_image_12.jpg\",\n-\t\t\t\"https://lh3.googleusercontent.com/-HBxuzALS_Zs/T3R4qERykaI/AAAAAAAAAGQ/_qQ16FaZ1q0/s1024/sample_image_13.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-cKojDrARNjQ/T3R4qfWSGPI/AAAAAAAAAGY/MR5dnbNaPyY/s1024/sample_image_14.jpg\",\n-\t\t\t\"https://lh3.googleusercontent.com/-WujkdYfcyZ8/T3R4qrIMGUI/AAAAAAAAAGk/277LIdgvnjg/s1024/sample_image_15.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-FMHR7Vy3PgI/T3R4rOXlEKI/AAAAAAAAAGs/VeXrDNDBkaw/s1024/sample_image_16.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-mrR0AJyNTH0/T3R4rZs6CuI/AAAAAAAAAG0/UE1wQqCOqLA/s1024/sample_image_17.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-z77w0eh3cow/T3R4rnLn05I/AAAAAAAAAG4/BaerfWoNucU/s1024/sample_image_18.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-aWVwh1OU5Bk/T3R4sAWw0yI/AAAAAAAAAHE/4_KAvJttFwA/s1024/sample_image_19.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-q-js52DMnWQ/T3R4tZhY2sI/AAAAAAAAAHM/A8kjp2Ivdqg/s1024/sample_image_20.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-_jIzvvzXKn4/T3R4t7xpdVI/AAAAAAAAAHU/7QC6eZ10jgs/s1024/sample_image_21.jpg\",\n-\t\t\t\"https://lh3.googleusercontent.com/-lnGi4IMLpwU/T3R4uCMa7vI/AAAAAAAAAHc/1zgzzz6qTpk/s1024/sample_image_22.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-fFCzKjFPsPc/T3R4u0SZPFI/AAAAAAAAAHk/sbgjzrktOK0/s1024/sample_image_23.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-8TqoW5gBE_Y/T3R4vBS3NPI/AAAAAAAAAHs/EZYvpNsaNXk/s1024/sample_image_24.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-gc4eQ3ySdzs/T3R4vafoA7I/AAAAAAAAAH4/yKii5P6tqDE/s1024/sample_image_25.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/--NYOPCylU7Q/T3R4vjAiWkI/AAAAAAAAAH8/IPNx5q3ptRA/s1024/sample_image_26.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-9IJM8so4vCI/T3R4vwJO2yI/AAAAAAAAAIE/ljlr-cwuqZM/s1024/sample_image_27.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-KW6QwOHfhBs/T3R4w0RsQiI/AAAAAAAAAIM/uEFLVgHPFCk/s1024/sample_image_28.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-z2557Ec1ctY/T3R4x3QA2hI/AAAAAAAAAIk/9-GzPL1lTWE/s1024/sample_image_29.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-LaKXAn4Kr1c/T3R4yc5b4lI/AAAAAAAAAIY/fMgcOVQfmD0/s1024/sample_image_30.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-F9LRToJoQdo/T3R4yrLtyQI/AAAAAAAAAIg/ri9uUCWuRmo/s1024/sample_image_31.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-6X-xBwP-QpI/T3R4zGVboII/AAAAAAAAAIs/zYH4PjjngY0/s1024/sample_image_32.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-VdLRjbW4LAs/T3R4zXu3gUI/AAAAAAAAAIw/9aFp9t7mCPg/s1024/sample_image_33.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-gL6R17_fDJU/T3R4zpIXGjI/AAAAAAAAAI8/Q2Vjx-L9X20/s1024/sample_image_34.jpg\",\n-\t\t\t\"https://lh3.googleusercontent.com/-1fGH4YJXEzo/T3R40Y1B7KI/AAAAAAAAAJE/MnTsa77g-nk/s1024/sample_image_35.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-Ql0jHSrea-A/T3R403mUfFI/AAAAAAAAAJM/qzI4SkcH9tY/s1024/sample_image_36.jpg\",\n-\t\t\t\"https://lh5.googleusercontent.com/-BL5FIBR_tzI/T3R41DA0AKI/AAAAAAAAAJk/GZfeeb-SLM0/s1024/sample_image_37.jpg\",\n-\t\t\t\"https://lh4.googleusercontent.com/-wF2Vc9YDutw/T3R41fR2BCI/AAAAAAAAAJc/JdU1sHdMRAk/s1024/sample_image_38.jpg\",\n-\t\t\t\"https://lh6.googleusercontent.com/-ZWHiPehwjTI/T3R41zuaKCI/AAAAAAAAAJg/hR3QJ1v3REg/s1024/sample_image_39.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s1024/A%252520Photographer.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s1024/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s1024/Another%252520Rockaway%252520Sunset.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s1024/Antelope%252520Butte.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s1024/Antelope%252520Hallway.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s1024/Antelope%252520Walls.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s1024/Apre%2525CC%252580s%252520la%252520Pluie.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s1024/Backlit%252520Cloud.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s1024/Bee%252520and%252520Flower.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s1024/Bonzai%252520Rock%252520Sunset.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s1024/Caterpillar.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s1024/Chess.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-WVpRptWH8Yw/URqugh-QmDI/AAAAAAAAAbs/E-MgBgtlUWU/s1024/Chihuly.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-0BDXkYmckbo/URquhKFW84I/AAAAAAAAAbs/ogQtHCTk2JQ/s1024/Closed%252520Door.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-PyggXXZRykM/URquh-kVvoI/AAAAAAAAAbs/hFtDwhtrHHQ/s1024/Colorado%252520River%252520Sunset.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-ZAs4dNZtALc/URquikvOCWI/AAAAAAAAAbs/DXz4h3dll1Y/s1024/Colors%252520of%252520Autumn.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-GztnWEIiMz8/URqukVCU7bI/AAAAAAAAAbs/jo2Hjv6MZ6M/s1024/Countryside.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-bEg9EZ9QoiM/URquklz3FGI/AAAAAAAAAbs/UUuv8Ac2BaE/s1024/Death%252520Valley%252520-%252520Dunes.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-ijQJ8W68tEE/URqulGkvFEI/AAAAAAAAAbs/zPXvIwi_rFw/s1024/Delicate%252520Arch.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-Oh8mMy2ieng/URqullDwehI/AAAAAAAAAbs/TbdeEfsaIZY/s1024/Despair.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-gl0y4UiAOlk/URqumC_KjBI/AAAAAAAAAbs/PM1eT7dn4oo/s1024/Eagle%252520Fall%252520Sunrise.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-hYYHd2_vXPQ/URqumtJa9eI/AAAAAAAAAbs/wAalXVkbSh0/s1024/Electric%252520Storm.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-PyY_yiyjPTo/URqunUOhHFI/AAAAAAAAAbs/azZoULNuJXc/s1024/False%252520Kiva.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-PYvLVdvXywk/URqunwd8hfI/AAAAAAAAAbs/qiMwgkFvf6I/s1024/Fitzgerald%252520Streaks.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-KIR_UobIIqY/URquoCZ9SlI/AAAAAAAAAbs/Y4d4q8sXu4c/s1024/Foggy%252520Sunset.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-9lzOk_OWZH0/URquoo4xYoI/AAAAAAAAAbs/AwgzHtNVCwU/s1024/Frantic.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-0X3JNaKaz48/URqupH78wpI/AAAAAAAAAbs/lHXxu_zbH8s/s1024/Golden%252520Gate%252520Afternoon.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-95sb5ag7ABc/URqupl95RDI/AAAAAAAAAbs/g73R20iVTRA/s1024/Golden%252520Gate%252520Fog.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-JB9v6rtgHhk/URqup21F-zI/AAAAAAAAAbs/64Fb8qMZWXk/s1024/Golden%252520Grass.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-EIBGfnuLtII/URquqVHwaRI/AAAAAAAAAbs/FA4McV2u8VE/s1024/Grand%252520Teton.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-WoMxZvmN9nY/URquq1v2AoI/AAAAAAAAAbs/grj5uMhL6NA/s1024/Grass%252520Closeup.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-6hZiEHXx64Q/URqurxvNdqI/AAAAAAAAAbs/kWMXM3o5OVI/s1024/Green%252520Grass.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-6LVb9OXtQ60/URquteBFuKI/AAAAAAAAAbs/4F4kRgecwFs/s1024/Hanging%252520Leaf.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-zAvf__52ONk/URqutT_IuxI/AAAAAAAAAbs/D_bcuc0thoU/s1024/Highway%2525201.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-H4SrUg615rA/URquuL27fXI/AAAAAAAAAbs/4aEqJfiMsOU/s1024/Horseshoe%252520Bend%252520Sunset.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-JhFi4fb_Pqw/URquuX-QXbI/AAAAAAAAAbs/IXpYUxuweYM/s1024/Horseshoe%252520Bend.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-UGgssvFRJ7g/URquueyJzGI/AAAAAAAAAbs/yYIBlLT0toM/s1024/Into%252520the%252520Blue.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-CH7KoupI7uI/URquu0FF__I/AAAAAAAAAbs/R7GDmI7v_G0/s1024/Jelly%252520Fish%2525202.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-pwuuw6yhg8U/URquvPxR3FI/AAAAAAAAAbs/VNGk6f-tsGE/s1024/Jelly%252520Fish%2525203.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-GoUQVw1fnFw/URquv6xbC0I/AAAAAAAAAbs/zEUVTQQ43Zc/s1024/Kauai.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-8QdYYQEpYjw/URquwvdh88I/AAAAAAAAAbs/cktDy-ysfHo/s1024/Kyoto%252520Sunset.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-vPeekyDjOE0/URquwzJ28qI/AAAAAAAAAbs/qxcyXULsZrg/s1024/Lake%252520Tahoe%252520Colors.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-xBPxWpD4yxU/URquxWHk8AI/AAAAAAAAAbs/ARDPeDYPiMY/s1024/Lava%252520from%252520the%252520Sky.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-897VXrJB6RE/URquxxxd-5I/AAAAAAAAAbs/j-Cz4T4YvIw/s1024/Leica%25252050mm%252520Summilux.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-qSJ4D4iXzGo/URquyDWiJ1I/AAAAAAAAAbs/k2pBXeWehOA/s1024/Leica%25252050mm%252520Summilux.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-dwlPg83vzLg/URquylTVuFI/AAAAAAAAAbs/G6SyQ8b4YsI/s1024/Leica%252520M8%252520%252528Front%252529.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-R3_EYAyJvfk/URquzQBv8eI/AAAAAAAAAbs/b9xhpUM3pEI/s1024/Light%252520to%252520Sand.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-fHY5h67QPi0/URqu0Cp4J1I/AAAAAAAAAbs/0lG6m94Z6vM/s1024/Little%252520Bit%252520of%252520Paradise.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-TzF_LwrCnRM/URqu0RddPOI/AAAAAAAAAbs/gaj2dLiuX0s/s1024/Lone%252520Pine%252520Sunset.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-4HdpJ4_DXU4/URqu046dJ9I/AAAAAAAAAbs/eBOodtk2_uk/s1024/Lonely%252520Rock.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-erbF--z-W4s/URqu1ajSLkI/AAAAAAAAAbs/xjDCDO1INzM/s1024/Longue%252520Vue.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-0CXJRdJaqvc/URqu1opNZNI/AAAAAAAAAbs/PFB2oPUU7Lk/s1024/Look%252520Me%252520in%252520the%252520Eye.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-D_5lNxnDN6g/URqu2Tk7HVI/AAAAAAAAAbs/p0ddca9W__Y/s1024/Lost%252520in%252520a%252520Field.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-flsqwMrIk2Q/URqu24PcmjI/AAAAAAAAAbs/5ocIH85XofM/s1024/Marshall%252520Beach%252520Sunset.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-Y4lgryEVTmU/URqu28kG3gI/AAAAAAAAAbs/OjXpekqtbJ4/s1024/Mono%252520Lake%252520Blue.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-AaHAJPmcGYA/URqu3PIldHI/AAAAAAAAAbs/lcTqk1SIcRs/s1024/Monument%252520Valley%252520Overlook.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-vKxfdQ83dQA/URqu31Yq_BI/AAAAAAAAAbs/OUoGk_2AyfM/s1024/Moving%252520Rock.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-CG62QiPpWXg/URqu4ia4vRI/AAAAAAAAAbs/0YOdqLAlcAc/s1024/Napali%252520Coast.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-wdGrP5PMmJQ/URqu5PZvn7I/AAAAAAAAAbs/m0abEcdPXe4/s1024/One%252520Wheel.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-6WS5DoCGuOA/URqu5qx1UgI/AAAAAAAAAbs/giMw2ixPvrY/s1024/Open%252520Sky.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-u8EHKj8G8GQ/URqu55sM6yI/AAAAAAAAAbs/lIXX_GlTdmI/s1024/Orange%252520Sunset.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-74Z5qj4bTDE/URqu6LSrJrI/AAAAAAAAAbs/XzmVkw90szQ/s1024/Orchid.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-lEQE4h6TePE/URqu6t_lSkI/AAAAAAAAAbs/zvGYKOea_qY/s1024/Over%252520there.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-cauH-53JH2M/URqu66v_USI/AAAAAAAAAbs/EucwwqclfKQ/s1024/Plumes.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-eDLT2jHDoy4/URqu7axzkAI/AAAAAAAAAbs/iVZE-xJ7lZs/s1024/Rainbokeh.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-j1NLqEFIyco/URqu8L1CGcI/AAAAAAAAAbs/aqZkgX66zlI/s1024/Rainbow.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-DRnqmK0t4VU/URqu8XYN9yI/AAAAAAAAAbs/LgvF_592WLU/s1024/Rice%252520Fields.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-hwh1v3EOGcQ/URqu8qOaKwI/AAAAAAAAAbs/IljRJRnbJGw/s1024/Rockaway%252520Fire%252520Sky.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-wjV6FQk7tlk/URqu9jCQ8sI/AAAAAAAAAbs/RyYUpdo-c9o/s1024/Rockaway%252520Flow.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-6cAXNfo7D20/URqu-BdzgPI/AAAAAAAAAbs/OmsYllzJqwo/s1024/Rockaway%252520Sunset%252520Sky.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-sl8fpGPS-RE/URqu_BOkfgI/AAAAAAAAAbs/Dg2Fv-JxOeg/s1024/Russian%252520Ridge%252520Sunset.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-gVtY36mMBIg/URqu_q91lkI/AAAAAAAAAbs/3CiFMBcy5MA/s1024/Rust%252520Knot.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-GHeImuHqJBE/URqu_FKfVLI/AAAAAAAAAbs/axuEJeqam7Q/s1024/Sailing%252520Stones.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-hBbYZjTOwGc/URqu_ycpIrI/AAAAAAAAAbs/nAdJUXnGJYE/s1024/Seahorse.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-Iwi6-i6IexY/URqvAYZHsVI/AAAAAAAAAbs/5ETWl4qXsFE/s1024/Shinjuku%252520Street.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-amhnySTM_MY/URqvAlb5KoI/AAAAAAAAAbs/pFCFgzlKsn0/s1024/Sierra%252520Heavens.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-dJgjepFrYSo/URqvBVJZrAI/AAAAAAAAAbs/v-F5QWpYO6s/s1024/Sierra%252520Sunset.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-Z4zGiC5nWdc/URqvBdEwivI/AAAAAAAAAbs/ZRZR1VJ84QA/s1024/Sin%252520Lights.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-_0cYiWW8ccY/URqvBz3iM4I/AAAAAAAAAbs/9N_Wq8MhLTY/s1024/Starry%252520Lake.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-A9LMoRyuQUA/URqvCYx_JoI/AAAAAAAAAbs/s7sde1Bz9cI/s1024/Starry%252520Night.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-KtLJ3k858eY/URqvC_2h_bI/AAAAAAAAAbs/zzEBImwDA_g/s1024/Stream.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-dFB7Lad6RcA/URqvDUftwWI/AAAAAAAAAbs/BrhoUtXTN7o/s1024/Strip%252520Sunset.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-at6apgFiN20/URqvDyffUZI/AAAAAAAAAbs/clABCx171bE/s1024/Sunset%252520Hills.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-7-EHhtQthII/URqvEYTk4vI/AAAAAAAAAbs/QSJZoB3YjVg/s1024/Tenaya%252520Lake%2525202.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-8MrjV_a-Pok/URqvFC5repI/AAAAAAAAAbs/9inKTg9fbCE/s1024/Tenaya%252520Lake.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-B1HW-z4zwao/URqvFWYRwUI/AAAAAAAAAbs/8Peli53Bs8I/s1024/The%252520Cave%252520BW.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-PO4E-xZKAnQ/URqvGRqjYkI/AAAAAAAAAbs/42nyADFsXag/s1024/The%252520Fisherman.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-iLyZlzfdy7s/URqvG0YScdI/AAAAAAAAAbs/1J9eDKmkXtk/s1024/The%252520Night%252520is%252520Coming.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-G-k7YkkUco0/URqvHhah6fI/AAAAAAAAAbs/_taQQG7t0vo/s1024/The%252520Road.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-h-ALJt7kSus/URqvIThqYfI/AAAAAAAAAbs/ejiv35olWS8/s1024/Tokyo%252520Heights.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-Hy9k-TbS7xg/URqvIjQMOxI/AAAAAAAAAbs/RSpmmOATSkg/s1024/Tokyo%252520Highway.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-83oOvMb4OZs/URqvJL0T7lI/AAAAAAAAAbs/c5TECZ6RONM/s1024/Tokyo%252520Smog.jpg\",\n+\t\t\t\"https://lh3.googleusercontent.com/-FB-jfgREEfI/URqvJI3EXAI/AAAAAAAAAbs/XfyweiRF4v8/s1024/Tufa%252520at%252520Night.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-vngKD5Z1U8w/URqvJUCEgPI/AAAAAAAAAbs/ulxCMVcU6EU/s1024/Valley%252520Sunset.jpg\",\n+\t\t\t\"https://lh6.googleusercontent.com/-DOz5I2E2oMQ/URqvKMND1kI/AAAAAAAAAbs/Iqf0IsInleo/s1024/Windmill%252520Sunrise.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-biyiyWcJ9MU/URqvKculiAI/AAAAAAAAAbs/jyPsCplJOpE/s1024/Windmill.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-PDT167_xRdA/URqvK36mLcI/AAAAAAAAAbs/oi2ik9QseMI/s1024/Windmills.jpg\",\n+\t\t\t\"https://lh5.googleusercontent.com/-kI_QdYx7VlU/URqvLXCB6gI/AAAAAAAAAbs/N31vlZ6u89o/s1024/Yet%252520Another%252520Rockaway%252520Sunset.jpg\",\n+\t\t\t\"https://lh4.googleusercontent.com/-e9NHZ5k5MSs/URqvMIBZjtI/AAAAAAAAAbs/1fV810rDNfQ/s1024/Yosemite%252520Tree.jpg\",\n \t\t\t// Light images\n \t\t\t\"http://tabletpcssource.com/wp-content/uploads/2011/05/android-logo.png\",\n \t\t\t\"http://simpozia.com/pages/images/stories/windows-icon.png\",\n@@ -89,7 +149,8 @@ public final class Constants {\n \t\t\t\"http://c.wrzuta.pl/wm16596/a32f1a47002ab3a949afeb4f\",\n \t\t\t\"http://macprovid.vo.llnwd.net/o43/hub/media/1090/6882/01_headline_Muse.jpg\",\n \t\t\t// Special cases\n-\t\t\t\"http://cdn.urbanislandz.com/wp-content/uploads/2011/10/MMSposter-large.jpg\", // very large image\n+\t\t\t\"http://cdn.urbanislandz.com/wp-content/uploads/2011/10/MMSposter-large.jpg\", // Very large image\n+\t\t\t\"http://4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg\", // Image with \"Mark has been invalidated\" problem\n \t\t\t\"file:///sdcard/Universal Image Loader @#&=+-_.,!()~'%20.png\", // Image from SD card with encoded symbols\n \t\t\t\"assets://Living Things @#&=+-_.,!()~'%20.jpg\", // Image from assets\n \t\t\t\"drawable://\" + R.drawable.ic_launcher, // Image from drawables",
      "parent_sha": "e2d62fd53a5825fe0c6584333afc0822086132b0"
    }
  },
  {
    "oid": "340576295ffc5d71dbcf745a76ac068ec07d70e2",
    "message": "Prevent 0-length files problem",
    "date": "2015-02-26T18:29:39Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/340576295ffc5d71dbcf745a76ac068ec07d70e2",
    "details": {
      "sha": "90a737b41b86e3d0153c2ebc7be0ae8c31a787fd",
      "filename": "library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/340576295ffc5d71dbcf745a76ac068ec07d70e2/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/340576295ffc5d71dbcf745a76ac068ec07d70e2/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java?ref=340576295ffc5d71dbcf745a76ac068ec07d70e2",
      "patch": "@@ -215,7 +215,7 @@ private Bitmap tryLoadBitmap() throws TaskCancelledException {\n \t\tBitmap bitmap = null;\n \t\ttry {\n \t\t\tFile imageFile = configuration.diskCache.get(uri);\n-\t\t\tif (imageFile != null && imageFile.exists()) {\n+\t\t\tif (imageFile != null && imageFile.exists() && imageFile.length() > 0) {\n \t\t\t\tL.d(LOG_LOAD_IMAGE_FROM_DISK_CACHE, memoryCacheKey);\n \t\t\t\tloadedFrom = LoadedFrom.DISC_CACHE;\n ",
      "parent_sha": "4902f20b991a9a66a9e42a4163c49d6298939406"
    }
  },
  {
    "oid": "87e0f140d03299c7e2d2b75bdd12332800bfdedd",
    "message": "Joined loading stacks (for cached and for not cached images) into one\nstack.\nCached images are pushed onto the top of the stack.\nNot cached images are pushed into the bottom of the stack.",
    "date": "2011-12-05T16:29:12Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/87e0f140d03299c7e2d2b75bdd12332800bfdedd",
    "details": {
      "sha": "a5c16e9b67525a3167887310c0c9dc2d77fdcc6b",
      "filename": "src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 32,
      "deletions": 46,
      "changes": 78,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/87e0f140d03299c7e2d2b75bdd12332800bfdedd/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/87e0f140d03299c7e2d2b75bdd12332800bfdedd/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=87e0f140d03299c7e2d2b75bdd12332800bfdedd",
      "patch": "@@ -36,6 +36,7 @@ public final class ImageLoader {\n \r\n \tprivate final PhotosQueue photosQueue = new PhotosQueue();\r\n \tprivate final PhotosLoader photoLoaderThread = new PhotosLoader();\r\n+\tprivate final DisplayImageOptions defaultOptions = DisplayImageOptions.createForListView();\r\n \r\n \tprivate static ImageLoader instance = null;\r\n \r\n@@ -60,19 +61,19 @@ private ImageLoader(Context context) {\n \t * appropriated for ListViews will be used}.\r\n \t * \r\n \t * @param url\r\n-\t *            Image URI (i.e. \"http://site.com/image.png\", \"file://mnt/sdcard/image.png\")\r\n+\t *            Image URL (i.e. \"http://site.com/image.png\", \"file://mnt/sdcard/image.png\")\r\n \t * @param imageView\r\n \t *            {@link ImageView} which should display image\r\n \t */\r\n \tpublic void displayImage(String url, ImageView imageView) {\r\n-\t\tdisplayImage(url, imageView, DisplayImageOptions.createForListView(), null);\r\n+\t\tdisplayImage(url, imageView, defaultOptions, null);\r\n \t}\r\n \r\n \t/**\r\n \t * Add display image task to queue. Image will be set to ImageView when it's turn.\r\n \t * \r\n \t * @param url\r\n-\t *            Image URI (i.e. \"http://site.com/image.png\", \"file://mnt/sdcard/image.png\")\r\n+\t *            Image URL (i.e. \"http://site.com/image.png\", \"file://mnt/sdcard/image.png\")\r\n \t * @param imageView\r\n \t *            {@link ImageView} which should display image\r\n \t * @param options\r\n@@ -86,15 +87,15 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op\n \t * Add display image task to queue. Image will be set to ImageView when it's turn.\r\n \t * \r\n \t * @param url\r\n-\t *            Image URI (i.e. \"http://site.com/image.png\", \"file://mnt/sdcard/image.png\")\r\n+\t *            Image URL (i.e. \"http://site.com/image.png\", \"file://mnt/sdcard/image.png\")\r\n \t * @param imageView\r\n \t *            {@link ImageView} which should display image\r\n \t * @param options\r\n \t *            {@link DisplayImageOptions Display options} for image displaying\r\n \t * @param listener\r\n-\t *            {@link ImageLoadingListener Listener} for image loading process. Listener fire events only if there is\r\n-\t *            no image for loading in memory cache. If there is image for loading in memory cache then image is\r\n-\t *            displayed at ImageView but listener does not fire any event.\r\n+\t *            {@link ImageLoadingListener Listener} for image loading process. Listener fires events only if there\r\n+\t *            is no image for loading in memory cache. If there is image for loading in memory cache then image is\r\n+\t *            displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\r\n \t */\r\n \tpublic void displayImage(String url, ImageView imageView, DisplayImageOptions options, ImageLoadingListener listener) {\r\n \t\tif (url == null || url.length() == 0) {\r\n@@ -130,19 +131,18 @@ private void queuePhoto(PhotoToLoad photoToLoad) {\n \t\t// some old tasks in the queue. We need to discard them.\r\n \t\tphotosQueue.clean(photoToLoad.imageView);\r\n \r\n-\t\t// Make a two queues for split loading of cached on file system images and loading from web\r\n-\t\t// It will reduce the time of waiting to display cached images (they will be displayed first)\r\n-\t\tif (isCachedImage(photoToLoad.url)) {\r\n-\t\t\tsynchronized (photosQueue.photosToLoadCached) {\r\n-\t\t\t\tphotosQueue.photosToLoadCached.push(photoToLoad);\r\n-\t\t\t}\r\n-\t\t} else {\r\n-\t\t\tsynchronized (photosQueue.photosToLoad) {\r\n+\t\t// If image was cached on disc we push load image task onto the top of the stack. \r\n+\t\t// If not - we push load image task to the bottom of the stack.\r\n+\t\t// Images loaded from the top of the stack. So it will reduce the time of waiting \r\n+\t\t// to display cached images (they will be displayed first)\r\n+\t\tboolean isCachedOnDisc = isCachedOnDisc(photoToLoad.url);\r\n+\t\tsynchronized (photosQueue.photosToLoad) {\r\n+\t\t\tif (isCachedOnDisc) {\r\n \t\t\t\tphotosQueue.photosToLoad.push(photoToLoad);\r\n+\t\t\t} else {\r\n+\t\t\t\tphotosQueue.photosToLoad.add(0, photoToLoad);\r\n \t\t\t}\r\n-\t\t}\r\n-\t\tsynchronized (photosQueue.lock) {\r\n-\t\t\tphotosQueue.lock.notifyAll();\r\n+\t\t\tphotosQueue.photosToLoad.notifyAll();\r\n \t\t}\r\n \r\n \t\t// Start thread if it's not started yet\r\n@@ -151,7 +151,7 @@ private void queuePhoto(PhotoToLoad photoToLoad) {\n \t\t}\r\n \t}\r\n \r\n-\tprivate boolean isCachedImage(String url) {\r\n+\tprivate boolean isCachedOnDisc(String url) {\r\n \t\tboolean result = false;\r\n \t\tFile f = getLocalImageFile(url);\r\n \r\n@@ -171,7 +171,7 @@ private File getLocalImageFile(String imageUrl) {\n \tprivate Bitmap getBitmap(String imageUrl, ImageSize targetImageSize, boolean cacheImageOnDisc) {\r\n \t\tFile f = getLocalImageFile(imageUrl);\r\n \r\n-\t\t// try to load from SD cache\r\n+\t\t// Try to load image from disc cache\r\n \t\ttry {\r\n \t\t\tif (f.exists()) {\r\n \t\t\t\tBitmap b = ImageDecoder.decodeFile(f.toURL(), targetImageSize);\r\n@@ -180,11 +180,10 @@ private Bitmap getBitmap(String imageUrl, ImageSize targetImageSize, boolean cac\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t} catch (IOException e) {\r\n-\t\t\t// no image in SD cache\r\n-\t\t\t// Do nothing\r\n+\t\t\t// There is no image in disc cache. Do nothing\r\n \t\t}\r\n \r\n-\t\t// from web\r\n+\t\t// Load image from Web\r\n \t\tBitmap bitmap = null;\r\n \t\ttry {\r\n \t\t\tURL imageUrlForDecoding = null;\r\n@@ -276,14 +275,12 @@ public PhotoToLoad(String url, ImageView imageView, DisplayImageOptions options,\n \t\t}\r\n \t}\r\n \r\n-\t// stores list of photos to download\r\n+\t/** Stores list of images to download */\r\n \tclass PhotosQueue {\r\n-\t\tprivate Object lock = new Object();\r\n \r\n \t\tprivate final Stack<PhotoToLoad> photosToLoad = new Stack<PhotoToLoad>();\r\n-\t\tprivate final Stack<PhotoToLoad> photosToLoadCached = new Stack<PhotoToLoad>();\r\n \r\n-\t\t// removes all instances of this ImageView\r\n+\t\t// Removes all instances of this ImageView\r\n \t\tpublic void clean(ImageView image) {\r\n \t\t\tfor (int j = 0; j < photosToLoad.size();) {\r\n \t\t\t\tif (photosToLoad.get(j).imageView == image) {\r\n@@ -292,14 +289,6 @@ public void clean(ImageView image) {\n \t\t\t\t\t++j;\r\n \t\t\t\t}\r\n \t\t\t}\r\n-\r\n-\t\t\tfor (int j = 0; j < photosToLoadCached.size();) {\r\n-\t\t\t\tif (photosToLoadCached.get(j).imageView == image) {\r\n-\t\t\t\t\tphotosToLoadCached.remove(j);\r\n-\t\t\t\t} else {\r\n-\t\t\t\t\t++j;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n \t\t}\r\n \t}\r\n \r\n@@ -310,17 +299,13 @@ public void run() {\n \t\t\t\tPhotoToLoad photoToLoad = null;\r\n \t\t\t\tBitmap bmp = null;\r\n \t\t\t\ttry {\r\n-\t\t\t\t\t// thread waits until there are any images to load in the\r\n-\t\t\t\t\t// queue\r\n-\t\t\t\t\tif (photosQueue.photosToLoad.isEmpty() && photosQueue.photosToLoadCached.isEmpty())\r\n-\t\t\t\t\t\tsynchronized (photosQueue.lock) {\r\n-\t\t\t\t\t\t\tphotosQueue.lock.wait();\r\n-\t\t\t\t\t\t}\r\n-\t\t\t\t\tif (!photosQueue.photosToLoadCached.isEmpty()) {\r\n-\t\t\t\t\t\tsynchronized (photosQueue.photosToLoadCached) {\r\n-\t\t\t\t\t\t\tphotoToLoad = photosQueue.photosToLoadCached.pop();\r\n+\t\t\t\t\t// thread waits until there are any images to load in the queue\r\n+\t\t\t\t\tif (photosQueue.photosToLoad.isEmpty()) {\r\n+\t\t\t\t\t\tsynchronized (photosQueue.photosToLoad) {\r\n+\t\t\t\t\t\t\tphotosQueue.photosToLoad.wait();\r\n \t\t\t\t\t\t}\r\n-\t\t\t\t\t} else if (!photosQueue.photosToLoad.isEmpty()) {\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tif (!photosQueue.photosToLoad.isEmpty()) {\r\n \t\t\t\t\t\tsynchronized (photosQueue.photosToLoad) {\r\n \t\t\t\t\t\t\tphotoToLoad = photosQueue.photosToLoad.pop();\r\n \t\t\t\t\t\t}\r\n@@ -343,7 +328,7 @@ public void run() {\n \t\t\t\t\t\tbreak;\r\n \t\t\t\t\t}\r\n \t\t\t\t} catch (InterruptedException e) {\r\n-\t\t\t\t\tLog.e(TAG, \"\" + e.getMessage());\r\n+\t\t\t\t\tLog.e(TAG, e.getMessage(), e);\r\n \t\t\t\t} finally {\r\n \t\t\t\t\tif (photoToLoad != null) {\r\n \t\t\t\t\t\tBitmapDisplayer bd = new BitmapDisplayer(photoToLoad, bmp);\r\n@@ -370,6 +355,7 @@ public void run() {\n \r\n \t\t\tif (photoToLoad != null && tag != null && tag.equals(photoToLoad.url) && bitmap != null) {\r\n \t\t\t\tphotoToLoad.imageView.setImageBitmap(bitmap);\r\n+\r\n \t\t\t\tif (photoToLoad.listener != null) {\r\n \t\t\t\t\tphotoToLoad.listener.onLoadingComplete();\r\n \t\t\t\t}\r",
      "parent_sha": "96ed5dd69a26aa47b7beacedf67aa03552f36d27"
    }
  },
  {
    "oid": "89670489b98d05275866728aefe77109b9e77600",
    "message": "Issue #74 - Callbacks are still fired after ImageLoader.stop()\nCheck if load&display task was interrupted. Prevent callback firing and\ndisplaying image in view if so.",
    "date": "2012-09-30T20:35:30Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/89670489b98d05275866728aefe77109b9e77600",
    "details": {
      "sha": "194887efb9657c96b330019ad02f865f645515c1",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/89670489b98d05275866728aefe77109b9e77600/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/89670489b98d05275866728aefe77109b9e77600/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java?ref=89670489b98d05275866728aefe77109b9e77600",
      "patch": "@@ -86,7 +86,7 @@ public void run() {\n \t\t\timageLoadingInfo.loadFromUriLock.unlock();\r\n \t\t}\r\n \r\n-\t\tif (checkTaskIsNotActual()) return;\r\n+\t\tif (Thread.interrupted() || checkTaskIsNotActual()) return;\r\n \t\tif (configuration.loggingEnabled) Log.i(ImageLoader.TAG, String.format(LOG_DISPLAY_IMAGE_IN_IMAGEVIEW, imageLoadingInfo.memoryCacheKey));\r\n \r\n \t\tDisplayBitmapTask displayBitmapTask = new DisplayBitmapTask(bmp, imageLoadingInfo.imageView, imageLoadingInfo.options.getDisplayer(),\r\n@@ -242,11 +242,13 @@ private void saveImageOnDisc(File targetFile) throws IOException, URISyntaxExcep\n \t}\r\n \r\n \tprivate void fireImageLoadingFailedEvent(final FailReason failReason) {\r\n-\t\thandler.post(new Runnable() {\r\n-\t\t\t@Override\r\n-\t\t\tpublic void run() {\r\n-\t\t\t\timageLoadingInfo.listener.onLoadingFailed(failReason);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\tif (!Thread.interrupted()) {\r\n+\t\t\thandler.post(new Runnable() {\r\n+\t\t\t\t@Override\r\n+\t\t\t\tpublic void run() {\r\n+\t\t\t\t\timageLoadingInfo.listener.onLoadingFailed(failReason);\r\n+\t\t\t\t}\r\n+\t\t\t});\r\n+\t\t}\r\n \t}\r\n }\r",
      "parent_sha": "4f3d5a159ada96e30c5ca47649beda206178fbce"
    }
  },
  {
    "oid": "9178cfa0dedb77dcbfead34cb6a9d6da524ea947",
    "message": "Throw IllegalArgumentException in DIO",
    "date": "2013-06-29T21:47:56Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/9178cfa0dedb77dcbfead34cb6a9d6da524ea947",
    "details": {
      "sha": "75aab6ad32e64e49dd006206d32b918cf16525e3",
      "filename": "library/src/com/nostra13/universalimageloader/core/DisplayImageOptions.java",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/9178cfa0dedb77dcbfead34cb6a9d6da524ea947/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDisplayImageOptions.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/9178cfa0dedb77dcbfead34cb6a9d6da524ea947/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDisplayImageOptions.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDisplayImageOptions.java?ref=9178cfa0dedb77dcbfead34cb6a9d6da524ea947",
      "patch": "@@ -19,7 +19,6 @@\n import android.graphics.BitmapFactory.Options;\n import android.os.Handler;\n import android.widget.ImageView;\n-\n import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;\n import com.nostra13.universalimageloader.core.assist.ImageScaleType;\n import com.nostra13.universalimageloader.core.display.BitmapDisplayer;\n@@ -44,7 +43,7 @@\n  * <li>post-processor for image Bitmap (after caching in memory, before displaying)</li>\n  * <li>how decoded {@link Bitmap} will be displayed</li>\n  * </ul>\n- * \n+ * <p/>\n  * You can create instance:\n  * <ul>\n  * <li>with {@link Builder}:<br />\n@@ -53,7 +52,7 @@\n  * {@link Builder#showStubImage(int) showStubImage()}.{@link Builder#build() build()}</code><br />\n  * </li>\n  * <li>or by static method: {@link #createSimple()}</li> <br />\n- * \n+ *\n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\n  * @since 1.0.0\n  */\n@@ -173,7 +172,7 @@ public Handler getHandler() {\n \n \t/**\n \t * Builder for {@link DisplayImageOptions}\n-\t * \n+\t *\n \t * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\n \t */\n \tpublic static class Builder {\n@@ -199,7 +198,7 @@ public Builder() {\n \n \t\t/**\n \t\t * Stub image will be displayed in {@link android.widget.ImageView ImageView} during image loading\n-\t\t * \n+\t\t *\n \t\t * @param stubImageRes Stub image resource\n \t\t */\n \t\tpublic Builder showStubImage(int stubImageRes) {\n@@ -210,7 +209,7 @@ public Builder showStubImage(int stubImageRes) {\n \t\t/**\n \t\t * Incoming image will be displayed in {@link android.widget.ImageView ImageView} if empty URI (null or empty\n \t\t * string) will be passed to <b>ImageLoader.displayImage(...)</b> method.\n-\t\t * \n+\t\t *\n \t\t * @param imageRes Image resource\n \t\t */\n \t\tpublic Builder showImageForEmptyUri(int imageRes) {\n@@ -221,7 +220,7 @@ public Builder showImageForEmptyUri(int imageRes) {\n \t\t/**\n \t\t * Incoming image will be displayed in {@link android.widget.ImageView ImageView} if some error occurs during\n \t\t * requested image loading/decoding.\n-\t\t * \n+\t\t *\n \t\t * @param imageRes Image resource\n \t\t */\n \t\tpublic Builder showImageOnFail(int imageRes) {\n@@ -288,6 +287,7 @@ public Builder imageScaleType(ImageScaleType imageScaleType) {\n \n \t\t/** Sets {@link Bitmap.Config bitmap config} for image decoding. Default value - {@link Bitmap.Config#ARGB_8888} */\n \t\tpublic Builder bitmapConfig(Bitmap.Config bitmapConfig) {\n+\t\t\tif (bitmapConfig == null) throw new IllegalArgumentException(\"bitmapConfig can't be null\");\n \t\t\tdecodingOptions.inPreferredConfig = bitmapConfig;\n \t\t\treturn this;\n \t\t}\n@@ -301,6 +301,7 @@ public Builder bitmapConfig(Bitmap.Config bitmapConfig) {\n \t\t * option.\n \t\t */\n \t\tpublic Builder decodingOptions(Options decodingOptions) {\n+\t\t\tif (decodingOptions == null) throw new IllegalArgumentException(\"decodingOptions can't be null\");\n \t\t\tthis.decodingOptions = decodingOptions;\n \t\t\treturn this;\n \t\t}\n@@ -341,6 +342,7 @@ public Builder postProcessor(BitmapProcessor postProcessor) {\n \t\t * {@link DefaultConfigurationFactory#createBitmapDisplayer()}\n \t\t */\n \t\tpublic Builder displayer(BitmapDisplayer displayer) {\n+\t\t\tif (displayer == null) throw new IllegalArgumentException(\"displayer can't be null\");\n \t\t\tthis.displayer = displayer;\n \t\t\treturn this;\n \t\t}\n@@ -389,7 +391,7 @@ public DisplayImageOptions build() {\n \t * <li>{@link Bitmap.Config#ARGB_8888} bitmap config will be used for image decoding</li>\n \t * <li>{@link SimpleBitmapDisplayer} will be used for image displaying</li>\n \t * </ul>\n-\t * \n+\t * <p/>\n \t * These option are appropriate for simple single-use image (from drawables or from Internet) displaying.\n \t */\n \tpublic static DisplayImageOptions createSimple() {",
      "parent_sha": "97e9c6ec38cf2b29cbe7a7b32f1ec1ef0acfb800"
    }
  },
  {
    "oid": "0b823e94a520880f3f1dc792d627e949ca308f2f",
    "message": "Sample: Fixed warnings",
    "date": "2013-11-19T00:03:56Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/0b823e94a520880f3f1dc792d627e949ca308f2f",
    "details": {
      "sha": "e8e7c3436100202b4b7c363a4369e6977df90606",
      "filename": "sample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/0b823e94a520880f3f1dc792d627e949ca308f2f/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/0b823e94a520880f3f1dc792d627e949ca308f2f/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java?ref=0b823e94a520880f3f1dc792d627e949ca308f2f",
      "patch": "@@ -50,6 +50,7 @@ public void onCreate(Bundle savedInstanceState) {\n \t\tsetContentView(R.layout.ac_image_pager);\n \n \t\tBundle bundle = getIntent().getExtras();\n+\t\tassert bundle != null;\n \t\tString[] imageUrls = bundle.getStringArray(Extra.IMAGES);\n \t\tint pagerPosition = bundle.getInt(Extra.IMAGE_POSITION, 0);\n \n@@ -89,11 +90,7 @@ private class ImagePagerAdapter extends PagerAdapter {\n \n \t\t@Override\n \t\tpublic void destroyItem(ViewGroup container, int position, Object object) {\n-\t\t\t((ViewPager) container).removeView((View) object);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void finishUpdate(View container) {\n+\t\t\tcontainer.removeView((View) object);\n \t\t}\n \n \t\t@Override\n@@ -104,6 +101,7 @@ public int getCount() {\n \t\t@Override\n \t\tpublic Object instantiateItem(ViewGroup view, int position) {\n \t\t\tView imageLayout = inflater.inflate(R.layout.item_pager_image, view, false);\n+\t\t\tassert imageLayout != null;\n \t\t\tImageView imageView = (ImageView) imageLayout.findViewById(R.id.image);\n \t\t\tfinal ProgressBar spinner = (ProgressBar) imageLayout.findViewById(R.id.loading);\n \n@@ -144,7 +142,7 @@ public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n \t\t\t\t}\n \t\t\t});\n \n-\t\t\t((ViewPager) view).addView(imageLayout, 0);\n+\t\t\tview.addView(imageLayout, 0);\n \t\t\treturn imageLayout;\n \t\t}\n \n@@ -161,9 +159,5 @@ public void restoreState(Parcelable state, ClassLoader loader) {\n \t\tpublic Parcelable saveState() {\n \t\t\treturn null;\n \t\t}\n-\n-\t\t@Override\n-\t\tpublic void startUpdate(View container) {\n-\t\t}\n \t}\n }\n\\ No newline at end of file",
      "parent_sha": "edd90e8a614992da546f6f871caa44581af17a14"
    }
  },
  {
    "oid": "82bc48706fb410e091aadd0b45824a7e9c78f299",
    "message": "Simplified BaseImageDownloader.getStreamFromDrawable()",
    "date": "2014-04-19T20:53:41Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/82bc48706fb410e091aadd0b45824a7e9c78f299",
    "details": {
      "sha": "0f83df3d5935a1f4a1c21df18be5b79113a16666",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 12,
      "changes": 15,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/82bc48706fb410e091aadd0b45824a7e9c78f299/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/82bc48706fb410e091aadd0b45824a7e9c78f299/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java?ref=82bc48706fb410e091aadd0b45824a7e9c78f299",
      "patch": "@@ -17,18 +17,14 @@\n \n import android.content.ContentResolver;\n import android.content.Context;\n-import android.graphics.Bitmap;\n-import android.graphics.Bitmap.CompressFormat;\n-import android.graphics.drawable.BitmapDrawable;\n import android.net.Uri;\n import android.provider.ContactsContract;\n+\n import com.nostra13.universalimageloader.core.DisplayImageOptions;\n import com.nostra13.universalimageloader.core.assist.ContentLengthInputStream;\n import com.nostra13.universalimageloader.utils.IoUtils;\n \n import java.io.BufferedInputStream;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n@@ -59,7 +55,7 @@ public class BaseImageDownloader implements ImageDownloader {\n \n \tprotected static final int MAX_REDIRECT_COUNT = 5;\n \n-\tprotected  static final String CONTENT_CONTACTS_URI_PREFIX = \"content://com.android.contacts/\";\n+\tprotected static final String CONTENT_CONTACTS_URI_PREFIX = \"content://com.android.contacts/\";\n \n \tprivate static final String ERROR_UNSUPPORTED_SCHEME = \"UIL doesn't support scheme(protocol) by default [%s]. \"\n \t\t\t+ \"You should implement this support yourself (BaseImageDownloader.getStreamFromOtherSource(...))\";\n@@ -207,12 +203,7 @@ protected InputStream getStreamFromAssets(String imageUri, Object extra) throws\n \tprotected InputStream getStreamFromDrawable(String imageUri, Object extra) {\n \t\tString drawableIdString = Scheme.DRAWABLE.crop(imageUri);\n \t\tint drawableId = Integer.parseInt(drawableIdString);\n-\t\tBitmapDrawable drawable = (BitmapDrawable) context.getResources().getDrawable(drawableId);\n-\t\tBitmap bitmap = drawable.getBitmap();\n-\n-\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n-\t\tbitmap.compress(CompressFormat.PNG, 0, os);\n-\t\treturn new ByteArrayInputStream(os.toByteArray());\n+\t\treturn context.getResources().openRawResource(drawableId);\n \t}\n \n \t/**",
      "parent_sha": "cf81669871a5a2dd78a3bd28d740693e255051ed"
    }
  },
  {
    "oid": "a36933a4af0b2568acbf4a83a023d26a614ef159",
    "message": "Init LimitedDiscCache asynchronously, prevent long I/O operation on UI\nthread",
    "date": "2013-03-30T20:02:38Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/a36933a4af0b2568acbf4a83a023d26a614ef159",
    "details": {
      "sha": "4b2bc65bad4eefc37f4e295d199ed8079ae110a5",
      "filename": "library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/a36933a4af0b2568acbf4a83a023d26a614ef159/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/a36933a4af0b2568acbf4a83a023d26a614ef159/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java?ref=a36933a4af0b2568acbf4a83a023d26a614ef159",
      "patch": "@@ -68,13 +68,18 @@ public LimitedDiscCache(File cacheDir, FileNameGenerator fileNameGenerator, int\n \t}\n \n \tprivate void calculateCacheSizeAndFillUsageMap() {\n-\t\tint size = 0;\n-\t\tFile[] cachedFiles = cacheDir.listFiles();\n-\t\tfor (File cachedFile : cachedFiles) {\n-\t\t\tsize += getSize(cachedFile);\n-\t\t\tlastUsageDates.put(cachedFile, cachedFile.lastModified());\n-\t\t}\n-\t\tcacheSize.set(size);\n+\t\tnew Thread(new Runnable() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tint size = 0;\n+\t\t\t\tFile[] cachedFiles = cacheDir.listFiles();\n+\t\t\t\tfor (File cachedFile : cachedFiles) {\n+\t\t\t\t\tsize += getSize(cachedFile);\n+\t\t\t\t\tlastUsageDates.put(cachedFile, cachedFile.lastModified());\n+\t\t\t\t}\n+\t\t\t\tcacheSize.set(size);\n+\t\t\t}\n+\t\t}).start();\n \t}\n \n \t@Override",
      "parent_sha": "ce36f1ee1eb76c057dec6da426d4f5eeaac943b6"
    }
  },
  {
    "oid": "c4c3adc1c59f0ffd9a5aab37407c2b132d8430da",
    "message": "Java docs fix",
    "date": "2011-12-15T18:25:04Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/c4c3adc1c59f0ffd9a5aab37407c2b132d8430da",
    "details": {
      "sha": "907ca3576cf0bfae0cc848b22259c834801a9f70",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/c4c3adc1c59f0ffd9a5aab37407c2b132d8430da/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/c4c3adc1c59f0ffd9a5aab37407c2b132d8430da/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=c4c3adc1c59f0ffd9a5aab37407c2b132d8430da",
      "patch": "@@ -76,8 +76,9 @@ public void displayImage(String url, ImageView imageView) {\n \t * @param imageView\r\n \t *            {@link ImageView} which should display image\r\n \t * @param options\r\n-\t *            {@link DisplayImageOptions Display image options} for image displaying. If <b>null</b> - default\r\n-\t *            {@linkplain DisplayImageOptions display image options} from {@linkplain ImageLoaderConfiguration\r\n+\t *            {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - default\r\n+\t *            display image options\r\n+\t *            {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) from\r\n \t *            configuration} will be used.\r\n \t */\r\n \tpublic void displayImage(String url, ImageView imageView, DisplayImageOptions options) {\r\n@@ -92,13 +93,15 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op\n \t * @param imageView\r\n \t *            {@link ImageView} which should display image\r\n \t * @param options\r\n-\t *            {@link DisplayImageOptions Display image options} for image displaying. If <b>null</b> - default\r\n-\t *            {@linkplain DisplayImageOptions display image options} from {@linkplain ImageLoaderConfiguration\r\n+\t *            {@linkplain DisplayImageOptions Display image options} for image displaying. If <b>null</b> - default\r\n+\t *            display image options\r\n+\t *            {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) from\r\n \t *            configuration} will be used.\r\n \t * @param listener\r\n-\t *            {@link ImageLoadingListener Listener} for image loading process. Listener fires events only if there\r\n-\t *            is no image for loading in memory cache. If there is image for loading in memory cache then image is\r\n-\t *            displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\r\n+\t *            {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires events only if\r\n+\t *            there is no image for loading in memory cache. If there is image for loading in memory cache then\r\n+\t *            image is displayed at ImageView but listener does not fire any event. Listener fires events on UI\r\n+\t *            thread.\r\n \t */\r\n \tpublic void displayImage(String url, ImageView imageView, DisplayImageOptions options, ImageLoadingListener listener) {\r\n \t\tif (url == null || url.length() == 0 || imageView == null) {\r",
      "parent_sha": "a4e9b8b4e78969489f70f87f8405fcdeff02276d"
    }
  },
  {
    "oid": "7f105dc6725d3156a1d9b712f00a5b32b3915beb",
    "message": "Check for illegal Bitmap",
    "date": "2013-04-28T20:11:09Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/7f105dc6725d3156a1d9b712f00a5b32b3915beb",
    "details": {
      "sha": "ef5575af1f31e60d41c29b690b4e83a54b162344",
      "filename": "library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/7f105dc6725d3156a1d9b712f00a5b32b3915beb/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/7f105dc6725d3156a1d9b712f00a5b32b3915beb/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java?ref=7f105dc6725d3156a1d9b712f00a5b32b3915beb",
      "patch": "@@ -242,13 +242,13 @@ private Bitmap tryLoadBitmap() {\n \n \t\t\t\tbitmap = decodeImage(Scheme.FILE.wrap(imageFile.getAbsolutePath()));\n \t\t\t}\n-\t\t\tif (bitmap == null) {\n+\t\t\tif (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {\n \t\t\t\tlog(LOG_LOAD_IMAGE_FROM_NETWORK);\n \n \t\t\t\tString imageUriForDecoding = options.isCacheOnDisc() ? tryCacheImageOnDisc(imageFile) : uri;\n \t\t\t\tif (!checkTaskIsNotActual()) {\n \t\t\t\t\tbitmap = decodeImage(imageUriForDecoding);\n-\t\t\t\t\tif (bitmap == null) {\n+\t\t\t\t\tif (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {\n \t\t\t\t\t\tfireImageLoadingFailedEvent(FailType.DECODING_ERROR, null);\n \t\t\t\t\t}\n \t\t\t\t}",
      "parent_sha": "c0604b9b3fcd77d86c154a46f9078cec6ec67838"
    }
  },
  {
    "oid": "416bfe5c08886215a324f06169059bbf8ed27cb3",
    "message": "Rename EmptyListener -> EmptyImageLoadingListener",
    "date": "2011-12-20T12:12:55Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/416bfe5c08886215a324f06169059bbf8ed27cb3",
    "details": {
      "sha": "0c0de6a2e083a3b7b3663e4ec4ee9feb4b0d2ace",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/416bfe5c08886215a324f06169059bbf8ed27cb3/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/416bfe5c08886215a324f06169059bbf8ed27cb3/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=416bfe5c08886215a324f06169059bbf8ed27cb3",
      "patch": "@@ -71,7 +71,7 @@ public synchronized void init(ImageLoaderConfiguration configuration) {\n \t\tif (this.configuration == null) {\r\n \t\t\tthis.configuration = configuration;\r\n \t\t\timageLoadingExecutor = Executors.newFixedThreadPool(configuration.threadPoolSize);\r\n-\t\t\temptyListener = new EmptyImageLoadingListener();\r\n+\t\t\temptyListener = new EmptyListener();\r\n \t\t}\r\n \t}\r\n \r\n@@ -394,7 +394,7 @@ public void run() {\n \t\t}\r\n \t}\r\n \r\n-\tprivate class EmptyImageLoadingListener implements ImageLoadingListener {\r\n+\tprivate class EmptyListener implements ImageLoadingListener {\r\n \t\t@Override\r\n \t\tpublic void onLoadingStarted() {\r\n \t\t}\r",
      "parent_sha": "80e00e2abddf1c693f1ed77a4fa9e3a7566bf58c"
    }
  },
  {
    "oid": "32de445919abdc578d843dcede7cd5e6579e066e",
    "message": "Prevent RejectedExecutionException",
    "date": "2011-12-12T18:51:43Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/32de445919abdc578d843dcede7cd5e6579e066e",
    "details": {
      "sha": "e8e52b70bc977e0b097ffc808b6c77c5e7f28a52",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/32de445919abdc578d843dcede7cd5e6579e066e/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/32de445919abdc578d843dcede7cd5e6579e066e/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=32de445919abdc578d843dcede7cd5e6579e066e",
      "patch": "@@ -119,6 +119,9 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op\n \t\t\t\tlistener.onLoadingStarted();\r\n \t\t\t}\r\n \t\t\tImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(url, imageView, options, listener);\r\n+\t\t\tif (imageLoadingExecutor.isShutdown()) {\r\n+\t\t\t\timageLoadingExecutor = Executors.newFixedThreadPool(Constants.THREAD_POOL_SIZE);\r\n+\t\t\t}\r\n \t\t\timageLoadingExecutor.submit(new DisplayImageTask(imageLoadingInfo));\r\n \r\n \t\t\tif (options.isShowStubImage()) {\r\n@@ -321,7 +324,6 @@ public DisplayBitmapTask(ImageLoadingInfo imageLoadingInfo, Bitmap bitmap) {\n \t\t}\r\n \r\n \t\tpublic void run() {\r\n-\t\t\tLog.e(\"NOSTRA\", \"#3\");\r\n \t\t\tif (imageLoadingInfo.isConsistent()) {\r\n \t\t\t\timageLoadingInfo.imageView.setImageBitmap(bitmap);\r\n \t\t\t\t// Notify listener\r",
      "parent_sha": "2a4322499a762495d4f2a4033f5ee4a7f05e62bf"
    }
  },
  {
    "oid": "761632c00c559cec2bc74845b69322f25fac04d6",
    "message": "Fixed DiskLruCache file naming",
    "date": "2015-12-12T21:01:03Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/761632c00c559cec2bc74845b69322f25fac04d6",
    "details": {
      "sha": "6e18f31ff21dbac69e41e81f1604a4721ad67374",
      "filename": "library/src/main/java/com/nostra13/universalimageloader/cache/disc/impl/ext/DiskLruCache.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/761632c00c559cec2bc74845b69322f25fac04d6/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2Fext%2FDiskLruCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/761632c00c559cec2bc74845b69322f25fac04d6/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2Fext%2FDiskLruCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2Fext%2FDiskLruCache.java?ref=761632c00c559cec2bc74845b69322f25fac04d6",
      "patch": "@@ -964,11 +964,11 @@ private IOException invalidLengths(String[] strings) throws IOException {\n \t\t}\n \n \t\tpublic File getCleanFile(int i) {\n-\t\t\treturn new File(directory, key + \"\" + i);\n+\t\t\treturn new File(directory, key + \".\" + i);\n \t\t}\n \n \t\tpublic File getDirtyFile(int i) {\n-\t\t\treturn new File(directory, key + \"\" + i + \".tmp\");\n+\t\t\treturn new File(directory, key + \".\" + i + \".tmp\");\n \t\t}\n \t}\n }",
      "parent_sha": "5362cdb3234be8b8e6b2d050bc013f586e9f9ea8"
    }
  },
  {
    "oid": "cd91558a7d39642a30b05749dee272e2228788f7",
    "message": "Clean code",
    "date": "2013-02-09T09:03:10Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/cd91558a7d39642a30b05749dee272e2228788f7",
    "details": {
      "sha": "1587d4e86b23a431d87e4f36882cc6a188cb6cbd",
      "filename": "library/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/cd91558a7d39642a30b05749dee272e2228788f7/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/cd91558a7d39642a30b05749dee272e2228788f7/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=cd91558a7d39642a30b05749dee272e2228788f7",
      "patch": "@@ -285,7 +285,7 @@ public void loadImage(String uri, DisplayImageOptions options, ImageLoadingListe\n \t * <b>NOTE:</b> {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n \t * \n \t * @param uri Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n-\t * @param minImageSize Minimal size for {@link Bitmap} which will be returned in\n+\t * @param targetImageSize Minimal size for {@link Bitmap} which will be returned in\n \t *            {@linkplain ImageLoadingListener#onLoadingComplete(Bitmap) callback}. Downloaded image will be decoded\n \t *            and scaled to {@link Bitmap} of the size which is <b>equal or larger</b> (usually a bit larger) than\n \t *            incoming minImageSize .\n@@ -299,10 +299,10 @@ public void loadImage(String uri, DisplayImageOptions options, ImageLoadingListe\n \t * \n \t * @throws IllegalStateException if {@link #init(ImageLoaderConfiguration)} method wasn't called before\n \t */\n-\tpublic void loadImage(String uri, ImageSize minImageSize, DisplayImageOptions options, ImageLoadingListener listener) {\n+\tpublic void loadImage(String uri, ImageSize targetImageSize, DisplayImageOptions options, ImageLoadingListener listener) {\n \t\tcheckConfiguration();\n-\t\tif (minImageSize == null) {\n-\t\t\tminImageSize = new ImageSize(configuration.maxImageWidthForMemoryCache, configuration.maxImageHeightForMemoryCache);\n+\t\tif (targetImageSize == null) {\n+\t\t\ttargetImageSize = new ImageSize(configuration.maxImageWidthForMemoryCache, configuration.maxImageHeightForMemoryCache);\n \t\t}\n \t\tif (options == null) {\n \t\t\toptions = configuration.defaultDisplayImageOptions;\n@@ -316,7 +316,7 @@ public void loadImage(String uri, ImageSize minImageSize, DisplayImageOptions op\n \t\t}\n \n \t\tImageView fakeImage = new ImageView(configuration.context);\n-\t\tfakeImage.setLayoutParams(new LayoutParams(minImageSize.getWidth(), minImageSize.getHeight()));\n+\t\tfakeImage.setLayoutParams(new LayoutParams(targetImageSize.getWidth(), targetImageSize.getHeight()));\n \t\tfakeImage.setScaleType(ScaleType.CENTER_CROP);\n \n \t\tdisplayImage(uri, fakeImage, optionsWithFakeDisplayer, listener);",
      "parent_sha": "286dc01d30df49fee66198bd7de99cbd39dc13b5"
    }
  },
  {
    "oid": "2e38d7ac48de9f4f03a0fd4149cb682bc9516292",
    "message": "Sample: Set memory cache depending on Android version",
    "date": "2013-03-03T13:27:47Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/2e38d7ac48de9f4f03a0fd4149cb682bc9516292",
    "details": {
      "sha": "ae87a6ffac64a0349b9d324787c6573820d048d9",
      "filename": "sample/src/com/nostra13/example/universalimageloader/UILApplication.java",
      "status": "modified",
      "additions": 17,
      "deletions": 13,
      "changes": 30,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/2e38d7ac48de9f4f03a0fd4149cb682bc9516292/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FUILApplication.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/2e38d7ac48de9f4f03a0fd4149cb682bc9516292/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FUILApplication.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FUILApplication.java?ref=2e38d7ac48de9f4f03a0fd4149cb682bc9516292",
      "patch": "@@ -15,14 +15,17 @@\n  *******************************************************************************/\n package com.nostra13.example.universalimageloader;\n \n-import android.app.ActivityManager;\n import android.app.Application;\n import android.content.Context;\n+import android.graphics.Bitmap;\n import android.os.Build;\n import android.os.StrictMode;\n \n import com.nostra13.example.universalimageloader.Constants.Config;\n import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;\n+import com.nostra13.universalimageloader.cache.memory.MemoryCacheAware;\n+import com.nostra13.universalimageloader.cache.memory.impl.LRULimitedMemoryCache;\n+import com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache;\n import com.nostra13.universalimageloader.core.ImageLoader;\n import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;\n import com.nostra13.universalimageloader.core.assist.QueueProcessingType;\n@@ -45,26 +48,27 @@ public void onCreate() {\n \t}\n \n \tpublic static void initImageLoader(Context context) {\n-\t\tint memoryCacheSize;\n-\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ECLAIR) {\n-\t\t\tint memClass = ((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();\n-\t\t\tmemoryCacheSize = (memClass / 8) * 1024 * 1024; // 1/8 of app memory limit \n+\t\tint memoryCacheSize = (int) (Runtime.getRuntime().maxMemory() / 8);\n+\n+\t\tMemoryCacheAware<String, Bitmap> memoryCache;\n+\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {\n+\t\t\tmemoryCache = new LruMemoryCache(memoryCacheSize);\n \t\t} else {\n-\t\t\tmemoryCacheSize = 2 * 1024 * 1024;\n+\t\t\tmemoryCache = new LRULimitedMemoryCache(memoryCacheSize);\n \t\t}\n \n \t\t// This configuration tuning is custom. You can tune every option, you may tune some of them, \n \t\t// or you can create default configuration by\n \t\t//  ImageLoaderConfiguration.createDefault(this);\n \t\t// method.\n \t\tImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)\n-\t\t\t.threadPriority(Thread.NORM_PRIORITY - 2)\n-\t\t\t.memoryCacheSize(memoryCacheSize)\n-\t\t\t.denyCacheImageMultipleSizesInMemory()\n-\t\t\t.discCacheFileNameGenerator(new Md5FileNameGenerator())\n-\t\t\t.tasksProcessingOrder(QueueProcessingType.LIFO)\n-\t\t\t.enableLogging() // Not necessary in common\n-\t\t\t.build();\n+\t\t\t\t.threadPriority(Thread.NORM_PRIORITY - 2)\n+\t\t\t\t.memoryCache(memoryCache)\n+\t\t\t\t.denyCacheImageMultipleSizesInMemory()\n+\t\t\t\t.discCacheFileNameGenerator(new Md5FileNameGenerator())\n+\t\t\t\t.tasksProcessingOrder(QueueProcessingType.LIFO)\n+\t\t\t\t.enableLogging() // Not necessary in common\n+\t\t\t\t.build();\n \t\t// Initialize ImageLoader with configuration.\n \t\tImageLoader.getInstance().init(config);\n \t}",
      "parent_sha": "e7b3eb00852006780324d515bdb3880bef694864"
    }
  },
  {
    "oid": "fec71ee8f36193f988f4cd2b5da6c91f65abab0e",
    "message": "do not used bitmap from memory cache if the bitmap is recycled",
    "date": "2014-05-06T12:39:57Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/fec71ee8f36193f988f4cd2b5da6c91f65abab0e",
    "details": {
      "sha": "1224930431a0ef64d2e835b445e556a7666ae2f6",
      "filename": "library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/fec71ee8f36193f988f4cd2b5da6c91f65abab0e/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/fec71ee8f36193f988f4cd2b5da6c91f65abab0e/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java?ref=fec71ee8f36193f988f4cd2b5da6c91f65abab0e",
      "patch": "@@ -131,7 +131,7 @@ public void run() {\n \t\t\tcheckTaskNotActual();\n \n \t\t\tbmp = configuration.memoryCache.get(memoryCacheKey);\n-\t\t\tif (bmp == null) {\n+\t\t\tif (bmp == null || bmp.isRecycled()) {\n \t\t\t\tbmp = tryLoadBitmap();\n \t\t\t\tif (bmp == null) return; // listener callback already was fired\n ",
      "parent_sha": "5221b421a18e9fec97e5d3e19343662b79347069"
    }
  },
  {
    "oid": "2ad7174f355df775ca7b791865d979cbbd2e8d2e",
    "message": "Sample: Save position for pager on screen rotation",
    "date": "2013-02-24T17:52:31Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/2ad7174f355df775ca7b791865d979cbbd2e8d2e",
    "details": {
      "sha": "7b3f7b2f54fd4e2743d4f45df47ca0741dfb3210",
      "filename": "sample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/2ad7174f355df775ca7b791865d979cbbd2e8d2e/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/2ad7174f355df775ca7b791865d979cbbd2e8d2e/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java?ref=2ad7174f355df775ca7b791865d979cbbd2e8d2e",
      "patch": "@@ -39,8 +39,12 @@\n  */\n public class ImagePagerActivity extends BaseActivity {\n \n+\tprivate static final String STATE_POSITION = \"STATE_POSITION\";\n+\n \tDisplayImageOptions options;\n \n+\tViewPager pager;\n+\n \tpublic void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n \t\tsetContentView(R.layout.ac_image_pager);\n@@ -49,6 +53,10 @@ public void onCreate(Bundle savedInstanceState) {\n \t\tString[] imageUrls = bundle.getStringArray(Extra.IMAGES);\n \t\tint pagerPosition = bundle.getInt(Extra.IMAGE_POSITION, 0);\n \n+\t\tif (savedInstanceState != null) {\n+\t\t\tpagerPosition = savedInstanceState.getInt(STATE_POSITION);\n+\t\t}\n+\n \t\toptions = new DisplayImageOptions.Builder()\n \t\t\t.showImageForEmptyUri(R.drawable.ic_empty)\n \t\t\t.showImageOnFail(R.drawable.ic_error)\n@@ -59,11 +67,16 @@ public void onCreate(Bundle savedInstanceState) {\n \t\t\t.displayer(new FadeInBitmapDisplayer(300))\n \t\t\t.build();\n \n-\t\tViewPager pager = (ViewPager) findViewById(R.id.pager);\n+\t\tpager = (ViewPager) findViewById(R.id.pager);\n \t\tpager.setAdapter(new ImagePagerAdapter(imageUrls));\n \t\tpager.setCurrentItem(pagerPosition);\n \t}\n \n+\t@Override\n+\tpublic void onSaveInstanceState(Bundle outState) {\n+\t\toutState.putInt(STATE_POSITION, pager.getCurrentItem());\n+\t}\n+\n \tprivate class ImagePagerAdapter extends PagerAdapter {\n \n \t\tprivate String[] images;",
      "parent_sha": "39558a3d69f4d297258e8035e0f9c17801c726d7"
    }
  },
  {
    "oid": "b1999ad67c53c9dd201f3e9fd7dbbf273e569631",
    "message": "Clean code",
    "date": "2015-08-08T22:52:29Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/b1999ad67c53c9dd201f3e9fd7dbbf273e569631",
    "details": {
      "sha": "30cc9ce6ffcde32743b60abbca8d575fdb76a524",
      "filename": "library/src/main/java/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/b1999ad67c53c9dd201f3e9fd7dbbf273e569631/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/b1999ad67c53c9dd201f3e9fd7dbbf273e569631/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=b1999ad67c53c9dd201f3e9fd7dbbf273e569631",
      "patch": "@@ -21,6 +21,7 @@\n import android.text.TextUtils;\n import android.view.View;\n import android.widget.ImageView;\n+\n import com.nostra13.universalimageloader.cache.disc.DiskCache;\n import com.nostra13.universalimageloader.cache.memory.MemoryCache;\n import com.nostra13.universalimageloader.core.assist.FailReason;\n@@ -204,8 +205,8 @@ public void displayImage(String uri, ImageAware imageAware, DisplayImageOptions\n \t * @throws IllegalArgumentException if passed <b>imageAware</b> is null\n \t */\n \tpublic void displayImage(String uri, ImageAware imageAware, DisplayImageOptions options,\n-\t\t\t\t\t\t\t ImageLoadingListener listener, ImageLoadingProgressListener progressListener) {\n-\t\tdisplayImage(uri,imageAware,options,null,listener,progressListener);\n+\t\t\tImageLoadingListener listener, ImageLoadingProgressListener progressListener) {\n+\t\tdisplayImage(uri, imageAware, options, null, listener, progressListener);\n \t}\n \n \t/**\n@@ -219,7 +220,7 @@ public void displayImage(String uri, ImageAware imageAware, DisplayImageOptions\n \t *                         decoding and displaying. If <b>null</b> - default display image options\n \t *                         {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions)\n \t *                         from configuration} will be used.\n-\t * @param targetImageSize \t   {@linkplain ImageSize} Image target size. If <b>null</b> - size will depend on the view\n+\t * @param targetSize       {@linkplain ImageSize} Image target size. If <b>null</b> - size will depend on the view\n \t * @param listener         {@linkplain ImageLoadingListener Listener} for image loading process. Listener fires\n \t *                         events on UI thread if this method is called on UI thread.\n \t * @param progressListener {@linkplain com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener\n@@ -231,8 +232,7 @@ public void displayImage(String uri, ImageAware imageAware, DisplayImageOptions\n \t * @throws IllegalArgumentException if passed <b>imageAware</b> is null\n \t */\n \tpublic void displayImage(String uri, ImageAware imageAware, DisplayImageOptions options,\n-\t\t\t\t\t\t\t ImageSize targetImageSize,\n-\t\t\tImageLoadingListener listener, ImageLoadingProgressListener progressListener) {\n+\t\t\tImageSize targetSize, ImageLoadingListener listener, ImageLoadingProgressListener progressListener) {\n \t\tcheckConfiguration();\n \t\tif (imageAware == null) {\n \t\t\tthrow new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n@@ -256,10 +256,7 @@ public void displayImage(String uri, ImageAware imageAware, DisplayImageOptions\n \t\t\treturn;\n \t\t}\n \n-\t\tImageSize targetSize;\n-\t\tif (targetImageSize != null) {\n-\t\t\ttargetSize = targetImageSize;\n-\t\t}else {\n+\t\tif (targetSize == null) {\n \t\t\ttargetSize = ImageSizeUtils.defineTargetSizeForView(imageAware, configuration.getMaxImageSize());\n \t\t}\n \t\tString memoryCacheKey = MemoryCacheUtils.generateKey(uri, targetSize);\n@@ -333,6 +330,7 @@ public void displayImage(String uri, ImageView imageView) {\n \tpublic void displayImage(String uri, ImageView imageView, ImageSize targetImageSize) {\n \t\tdisplayImage(uri, new ImageViewAware(imageView), null, targetImageSize, null, null);\n \t}\n+\n \t/**\n \t * Adds display image task to execution pool. Image will be set to ImageView when it's turn.<br />\n \t * <b>NOTE:</b> {@link #init(ImageLoaderConfiguration)} method must be called before this method call",
      "parent_sha": "5cea0acb4b5899845866d292a1fa5b6f4faf2870"
    }
  },
  {
    "oid": "5233d06c44850cb21878f36afc03defa2eac6e2f",
    "message": "Pass extra into protected createConnection(...)",
    "date": "2013-07-31T12:41:53Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/5233d06c44850cb21878f36afc03defa2eac6e2f",
    "details": {
      "sha": "6070f3b0114bd74e9b5543a16f2d04917ebc8900",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/5233d06c44850cb21878f36afc03defa2eac6e2f/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/5233d06c44850cb21878f36afc03defa2eac6e2f/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java?ref=5233d06c44850cb21878f36afc03defa2eac6e2f",
      "patch": "@@ -99,11 +99,11 @@ public InputStream getStream(String imageUri, Object extra) throws IOException {\n \t *                     URL.\n \t */\n \tprotected InputStream getStreamFromNetwork(String imageUri, Object extra) throws IOException {\n-\t\tHttpURLConnection conn = createConnection(imageUri);\n+\t\tHttpURLConnection conn = createConnection(imageUri, extra);\n \n \t\tint redirectCount = 0;\n \t\twhile (conn.getResponseCode() / 100 == 3 && redirectCount < MAX_REDIRECT_COUNT) {\n-\t\t\tconn = createConnection(conn.getHeaderField(\"Location\"));\n+\t\t\tconn = createConnection(conn.getHeaderField(\"Location\"), extra);\n \t\t\tredirectCount++;\n \t\t}\n \n@@ -113,13 +113,14 @@ protected InputStream getStreamFromNetwork(String imageUri, Object extra) throws\n \t/**\n \t * Create {@linkplain HttpURLConnection HTTP connection} for incoming URL\n \t *\n-\t * @param url URL to connect to\n-\t * @return {@linkplain HttpURLConnection Connection} for incoming URL. Connection isn't established so it still\n-\t *         configurable.\n+\t * @param url   URL to connect to\n+\t * @param extra Auxiliary object which was passed to {@link DisplayImageOptions.Builder#extraForDownloader(Object)\n+\t *              DisplayImageOptions.extraForDownloader(Object)}; can be null\n+\t * @return {@linkplain HttpURLConnection Connection} for incoming URL. Connection isn't established so it still configurable.\n \t * @throws IOException if some I/O error occurs during network request or if no InputStream could be created for\n \t *                     URL.\n \t */\n-\tprotected HttpURLConnection createConnection(String url) throws IOException {\n+\tprotected HttpURLConnection createConnection(String url, Object extra) throws IOException {\n \t\tString encodedUrl = Uri.encode(url, ALLOWED_URI_CHARS);\n \t\tHttpURLConnection conn = (HttpURLConnection) new URL(encodedUrl).openConnection();\n \t\tconn.setConnectTimeout(connectTimeout);",
      "parent_sha": "752f8bdfb0a188f1d932372280689fd66f9db2d0"
    }
  },
  {
    "oid": "d4a57bdb04cb0fd4599e5676c93a13d9f8474ad5",
    "message": "fix imageResOnLoading. wrong variable :)",
    "date": "2013-11-19T22:37:13Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/d4a57bdb04cb0fd4599e5676c93a13d9f8474ad5",
    "details": {
      "sha": "798e67f84f67fd64529c6ff16e2d31b557231743",
      "filename": "library/src/com/nostra13/universalimageloader/core/DisplayImageOptions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/d4a57bdb04cb0fd4599e5676c93a13d9f8474ad5/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDisplayImageOptions.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/d4a57bdb04cb0fd4599e5676c93a13d9f8474ad5/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDisplayImageOptions.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDisplayImageOptions.java?ref=d4a57bdb04cb0fd4599e5676c93a13d9f8474ad5",
      "patch": "@@ -131,7 +131,7 @@ public boolean shouldDelayBeforeLoading() {\n \t}\n \n \tpublic Drawable getImageOnLoading(Resources res) {\n-\t\treturn imageResOnFail != 0 ? res.getDrawable(imageResOnLoading) : imageOnLoading;\n+\t\treturn imageResOnLoading != 0 ? res.getDrawable(imageResOnLoading) : imageOnLoading;\n \t}\n \n \tpublic Drawable getImageForEmptyUri(Resources res) {",
      "parent_sha": "b331f82f0f2842d7ea749c2ccd550ca8d1a5a538"
    }
  },
  {
    "oid": "59c025536fc14f97dc62fe8af5e07832da6608f6",
    "message": "Refactored LoadAndDisplayImageTask. Changed logic for size-limited images in disc cache: download, then resize.",
    "date": "2013-12-09T21:58:31Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/59c025536fc14f97dc62fe8af5e07832da6608f6",
    "details": {
      "sha": "83e7df24dfb52508dd5e0657d7e84628ecffc509",
      "filename": "library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java",
      "status": "modified",
      "additions": 158,
      "deletions": 109,
      "changes": 267,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/59c025536fc14f97dc62fe8af5e07832da6608f6/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/59c025536fc14f97dc62fe8af5e07832da6608f6/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java?ref=59c025536fc14f97dc62fe8af5e07832da6608f6",
      "patch": "@@ -18,8 +18,13 @@\n import android.graphics.Bitmap;\n import android.os.Handler;\n import com.nostra13.universalimageloader.cache.disc.DiscCacheAware;\n-import com.nostra13.universalimageloader.core.assist.*;\n+import com.nostra13.universalimageloader.core.assist.FailReason;\n import com.nostra13.universalimageloader.core.assist.FailReason.FailType;\n+import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;\n+import com.nostra13.universalimageloader.core.assist.ImageScaleType;\n+import com.nostra13.universalimageloader.core.assist.ImageSize;\n+import com.nostra13.universalimageloader.core.assist.LoadedFrom;\n+import com.nostra13.universalimageloader.core.assist.ViewScaleType;\n import com.nostra13.universalimageloader.core.decode.ImageDecoder;\n import com.nostra13.universalimageloader.core.decode.ImageDecodingInfo;\n import com.nostra13.universalimageloader.core.download.ImageDownloader;\n@@ -28,7 +33,12 @@\n import com.nostra13.universalimageloader.utils.IoUtils;\n import com.nostra13.universalimageloader.utils.L;\n \n-import java.io.*;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.locks.ReentrantLock;\n \n@@ -51,6 +61,7 @@ final class LoadAndDisplayImageTask implements Runnable {\n \tprivate static final String LOG_GET_IMAGE_FROM_MEMORY_CACHE_AFTER_WAITING = \"...Get cached bitmap from memory after waiting. [%s]\";\n \tprivate static final String LOG_LOAD_IMAGE_FROM_NETWORK = \"Load image from network [%s]\";\n \tprivate static final String LOG_LOAD_IMAGE_FROM_DISC_CACHE = \"Load image from disc cache [%s]\";\n+\tprivate static final String LOG_RESIZE_CACHED_IMAGE_FILE = \"Resize image in disc cache [%s]\";\n \tprivate static final String LOG_PREPROCESS_IMAGE = \"PreProcess image before caching in memory [%s]\";\n \tprivate static final String LOG_POSTPROCESS_IMAGE = \"PostProcess image before displaying [%s]\";\n \tprivate static final String LOG_CACHE_IMAGE_IN_MEMORY = \"Cache image in memory [%s]\";\n@@ -86,7 +97,6 @@ final class LoadAndDisplayImageTask implements Runnable {\n \n \t// State vars\n \tprivate LoadedFrom loadedFrom = LoadedFrom.NETWORK;\n-\tprivate boolean imageAwareCollected = false;\n \n \tpublic LoadAndDisplayImageTask(ImageLoaderEngine engine, ImageLoadingInfo imageLoadingInfo, Handler handler) {\n \t\tthis.engine = engine;\n@@ -121,21 +131,21 @@ public void run() {\n \t\tloadFromUriLock.lock();\n \t\tBitmap bmp;\n \t\ttry {\n-\t\t\tif (checkTaskIsNotActual()) return;\n+\t\t\tcheckTaskNotActual();\n \n \t\t\tbmp = configuration.memoryCache.get(memoryCacheKey);\n \t\t\tif (bmp == null) {\n \t\t\t\tbmp = tryLoadBitmap();\n-\t\t\t\tif (imageAwareCollected) return; // listener callback already was fired\n \t\t\t\tif (bmp == null) return; // listener callback already was fired\n \n-\t\t\t\tif (checkTaskIsNotActual() || checkTaskIsInterrupted()) return;\n+\t\t\t\tcheckTaskNotActual();\n+\t\t\t\tcheckTaskInterrupted();\n \n \t\t\t\tif (options.shouldPreProcess()) {\n \t\t\t\t\tlog(LOG_PREPROCESS_IMAGE);\n \t\t\t\t\tbmp = options.getPreProcessor().process(bmp);\n \t\t\t\t\tif (bmp == null) {\n-\t\t\t\t\t\tL.e(ERROR_PRE_PROCESSOR_NULL);\n+\t\t\t\t\t\tL.e(ERROR_PRE_PROCESSOR_NULL, memoryCacheKey);\n \t\t\t\t\t}\n \t\t\t\t}\n \n@@ -155,12 +165,15 @@ public void run() {\n \t\t\t\t\tL.e(ERROR_POST_PROCESSOR_NULL, memoryCacheKey);\n \t\t\t\t}\n \t\t\t}\n+\t\t\tcheckTaskNotActual();\n+\t\t\tcheckTaskInterrupted();\n+\t\t} catch (TaskCancelledException e) {\n+\t\t\tfireCancelEvent();\n+\t\t\treturn;\n \t\t} finally {\n \t\t\tloadFromUriLock.unlock();\n \t\t}\n \n-\t\tif (checkTaskIsNotActual() || checkTaskIsInterrupted()) return;\n-\n \t\tDisplayBitmapTask displayBitmapTask = new DisplayBitmapTask(bmp, imageLoadingInfo, engine, loadedFrom);\n \t\tdisplayBitmapTask.setLoggingEnabled(writeLogs);\n \t\tif (options.isSyncLoading()) {\n@@ -185,7 +198,7 @@ private boolean waitIfPaused() {\n \t\t\t\tlog(LOG_RESUME_AFTER_PAUSE);\n \t\t\t}\n \t\t}\n-\t\treturn checkTaskIsNotActual();\n+\t\treturn isTaskNotActual();\n \t}\n \n \t/** @return true - if task should be interrupted; false - otherwise */\n@@ -198,76 +211,42 @@ private boolean delayIfNeed() {\n \t\t\t\tL.e(LOG_TASK_INTERRUPTED, memoryCacheKey);\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\treturn checkTaskIsNotActual();\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Check whether target ImageAware wasn't collected by GC and the image URI of this task matches to image URI which is actual\n-\t * for current ImageAware at this moment and fire {@link ImageLoadingListener#onLoadingCancelled(String, android.view.View)}}\n-\t * event if it doesn't.\n-\t */\n-\tprivate boolean checkTaskIsNotActual() {\n-\t\treturn checkViewCollected() || checkViewReused();\n-\t}\n-\n-\tprivate boolean checkViewCollected() {\n-\t\tif (imageAware.isCollected()) {\n-\t\t\timageAwareCollected = true;\n-\t\t\tlog(LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED);\n-\t\t\tfireCancelEvent();\n-\t\t\treturn true;\n+\t\t\treturn isTaskNotActual();\n \t\t}\n \t\treturn false;\n \t}\n \n-\tprivate boolean checkViewReused() {\n-\t\tString currentCacheKey = engine.getLoadingUriForView(imageAware);\n-\t\t// Check whether memory cache key (image URI) for current ImageAware is actual.\n-\t\t// If ImageAware is reused for another task then current task should be cancelled.\n-\t\tboolean imageAwareWasReused = !memoryCacheKey.equals(currentCacheKey);\n-\t\tif (imageAwareWasReused) {\n-\t\t\tlog(LOG_TASK_CANCELLED_IMAGEAWARE_REUSED);\n-\t\t\tfireCancelEvent();\n-\t\t}\n-\t\treturn imageAwareWasReused;\n-\t}\n-\n-\t/** Check whether the current task was interrupted */\n-\tprivate boolean checkTaskIsInterrupted() {\n-\t\tboolean interrupted = Thread.interrupted();\n-\t\tif (interrupted) log(LOG_TASK_INTERRUPTED);\n-\t\treturn interrupted;\n-\t}\n-\n-\tprivate Bitmap tryLoadBitmap() {\n+\tprivate Bitmap tryLoadBitmap() throws TaskCancelledException {\n \t\tFile imageFile = getImageFileInDiscCache();\n \n \t\tBitmap bitmap = null;\n \t\ttry {\n+\t\t\tString cacheFileUri = Scheme.FILE.wrap(imageFile.getAbsolutePath());\n \t\t\tif (imageFile.exists()) {\n \t\t\t\tlog(LOG_LOAD_IMAGE_FROM_DISC_CACHE);\n-\n \t\t\t\tloadedFrom = LoadedFrom.DISC_CACHE;\n-\t\t\t\tbitmap = decodeImage(Scheme.FILE.wrap(imageFile.getAbsolutePath()));\n-\t\t\t\tif (imageAwareCollected) return null;\n+\n+\t\t\t\tcheckTaskNotActual();\n+\t\t\t\tbitmap = decodeImage(cacheFileUri);\n \t\t\t}\n \t\t\tif (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {\n \t\t\t\tlog(LOG_LOAD_IMAGE_FROM_NETWORK);\n-\n \t\t\t\tloadedFrom = LoadedFrom.NETWORK;\n-\t\t\t\tString imageUriForDecoding = options.isCacheOnDisc() ? tryCacheImageOnDisc(imageFile) : uri;\n-\t\t\t\tif (!checkTaskIsNotActual()) {\n-\t\t\t\t\tbitmap = decodeImage(imageUriForDecoding);\n-\t\t\t\t\tif (imageAwareCollected) return null;\n-\t\t\t\t\tif (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {\n-\t\t\t\t\t\tfireFailEvent(FailType.DECODING_ERROR, null);\n-\t\t\t\t\t}\n+\n+\t\t\t\tString imageUriForDecoding = options.isCacheOnDisc() && tryCacheImageOnDisc(\n+\t\t\t\t\t\timageFile) ? cacheFileUri : uri;\n+\n+\t\t\t\tcheckTaskNotActual();\n+\t\t\t\tbitmap = decodeImage(imageUriForDecoding);\n+\n+\t\t\t\tif (bitmap == null || bitmap.getWidth() <= 0 || bitmap.getHeight() <= 0) {\n+\t\t\t\t\tfireFailEvent(FailType.DECODING_ERROR, null);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (IllegalStateException e) {\n \t\t\tfireFailEvent(FailType.NETWORK_DENIED, null);\n+\t\t} catch (TaskCancelledException e) {\n+\t\t\tthrow e;\n \t\t} catch (IOException e) {\n \t\t\tL.e(e);\n \t\t\tfireFailEvent(FailType.IO_ERROR, e);\n@@ -299,68 +278,68 @@ private File getImageFileInDiscCache() {\n \t}\n \n \tprivate Bitmap decodeImage(String imageUri) throws IOException {\n-\t\tif (checkViewCollected()) return null;\n-\n \t\tViewScaleType viewScaleType = imageAware.getScaleType();\n-\t\tif (viewScaleType == null) return null;\n-\t\tImageDecodingInfo decodingInfo = new ImageDecodingInfo(memoryCacheKey, imageUri, targetSize, viewScaleType, getDownloader(), options);\n+\t\tImageDecodingInfo decodingInfo = new ImageDecodingInfo(memoryCacheKey, imageUri, targetSize, viewScaleType,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   getDownloader(), options);\n \t\treturn decoder.decode(decodingInfo);\n \t}\n \n-\t/** @return Cached image URI; or original image URI if caching failed */\n-\tprivate String tryCacheImageOnDisc(File targetFile) {\n+\t/** @return <b>true</b> - if image was downloaded successfully; <b>false</b> - otherwise */\n+\tprivate boolean tryCacheImageOnDisc(File targetFile) throws TaskCancelledException {\n \t\tlog(LOG_CACHE_IMAGE_ON_DISC);\n \n \t\ttry {\n+\t\t\tdownloadImage(targetFile);\n+\n \t\t\tint width = configuration.maxImageWidthForDiscCache;\n \t\t\tint height = configuration.maxImageHeightForDiscCache;\n-\t\t\tboolean saved = false;\n \t\t\tif (width > 0 || height > 0) {\n-\t\t\t\tsaved = downloadSizedImage(targetFile, width, height);\n-\t\t\t}\n-\t\t\tif (!saved) {\n-\t\t\t\tdownloadImage(targetFile);\n+\t\t\t\tlog(LOG_RESIZE_CACHED_IMAGE_FILE);\n+\t\t\t\tresizeAndSaveImage(targetFile, width, height);\n \t\t\t}\n \n \t\t\tconfiguration.discCache.put(uri, targetFile);\n-\t\t\treturn Scheme.FILE.wrap(targetFile.getAbsolutePath());\n \t\t} catch (IOException e) {\n \t\t\tL.e(e);\n \t\t\tif (targetFile.exists()) {\n \t\t\t\ttargetFile.delete();\n \t\t\t}\n-\t\t\treturn uri;\n+\t\t\treturn false;\n \t\t}\n+\t\treturn true;\n \t}\n \n-\tprivate boolean downloadSizedImage(File targetFile, int maxWidth, int maxHeight) throws IOException {\n-\t\t// Download, decode, compress and save image\n+\t/** Decodes image file into Bitmap, resize it and save it back */\n+\tprivate void resizeAndSaveImage(File targetFile, int maxWidth, int maxHeight) throws IOException {\n+\t\t// Decode image file, compress and re-save it\n \t\tImageSize targetImageSize = new ImageSize(maxWidth, maxHeight);\n-\t\tDisplayImageOptions specialOptions = new DisplayImageOptions.Builder().cloneFrom(options)\n-\t\t\t\t.imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();\n-\t\tImageDecodingInfo decodingInfo = new ImageDecodingInfo(memoryCacheKey, uri, targetImageSize, ViewScaleType.FIT_INSIDE, getDownloader(), specialOptions);\n+\t\tDisplayImageOptions specialOptions = new DisplayImageOptions.Builder()\n+\t\t\t\t.cloneFrom(options)\n+\t\t\t\t.imageScaleType(ImageScaleType.IN_SAMPLE_INT)\n+\t\t\t\t.build();\n+\t\tImageDecodingInfo decodingInfo = new ImageDecodingInfo(memoryCacheKey,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   Scheme.FILE.wrap(targetFile.getAbsolutePath()),\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   targetImageSize, ViewScaleType.FIT_INSIDE,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   getDownloader(), specialOptions);\n \t\tBitmap bmp = decoder.decode(decodingInfo);\n-\t\tif (bmp == null) return false;\n+\t\tif (bmp == null) return;\n \n \t\tif (configuration.processorForDiscCache != null) {\n \t\t\tlog(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISC);\n \t\t\tbmp = configuration.processorForDiscCache.process(bmp);\n \t\t\tif (bmp == null) {\n \t\t\t\tL.e(ERROR_PROCESSOR_FOR_DISC_CACHE_NULL, memoryCacheKey);\n-\t\t\t\treturn false;\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \n \t\tOutputStream os = new BufferedOutputStream(new FileOutputStream(targetFile), BUFFER_SIZE);\n-\t\tboolean savedSuccessfully;\n \t\ttry {\n-\t\t\tsavedSuccessfully = bmp\n-\t\t\t\t\t.compress(configuration.imageCompressFormatForDiscCache, configuration.imageQualityForDiscCache, os);\n+\t\t\tbmp.compress(configuration.imageCompressFormatForDiscCache, configuration.imageQualityForDiscCache, os);\n \t\t} finally {\n \t\t\tIoUtils.closeSilently(os);\n \t\t}\n \t\tbmp.recycle();\n-\t\treturn savedSuccessfully;\n \t}\n \n \tprivate void downloadImage(File targetFile) throws IOException {\n@@ -378,36 +357,26 @@ private void downloadImage(File targetFile) throws IOException {\n \t}\n \n \tprivate void fireFailEvent(final FailType failType, final Throwable failCause) {\n-\t\tif (!Thread.interrupted()) {\n-\t\t\tif (options.isSyncLoading()) {\n+\t\tif (options.isSyncLoading() || isTaskInterrupted() || isTaskNotActual()) return;\n+\t\thandler.post(new Runnable() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tif (options.shouldShowImageOnFail()) {\n+\t\t\t\t\timageAware.setImageDrawable(options.getImageOnFail(configuration.resources));\n+\t\t\t\t}\n \t\t\t\tlistener.onLoadingFailed(uri, imageAware.getWrappedView(), new FailReason(failType, failCause));\n-\t\t\t} else {\n-\t\t\t\thandler.post(new Runnable() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\tif (options.shouldShowImageOnFail()) {\n-\t\t\t\t\t\t\timageAware.setImageDrawable(options.getImageOnFail(configuration.resources));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlistener.onLoadingFailed(uri, imageAware.getWrappedView(), new FailReason(failType, failCause));\n-\t\t\t\t\t}\n-\t\t\t\t});\n \t\t\t}\n-\t\t}\n+\t\t});\n \t}\n \n \tprivate void fireCancelEvent() {\n-\t\tif (!Thread.interrupted()) {\n-\t\t\tif (options.isSyncLoading()) {\n+\t\tif (options.isSyncLoading() || isTaskInterrupted()) return;\n+\t\thandler.post(new Runnable() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n \t\t\t\tlistener.onLoadingCancelled(uri, imageAware.getWrappedView());\n-\t\t\t} else {\n-\t\t\t\thandler.post(new Runnable() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\tlistener.onLoadingCancelled(uri, imageAware.getWrappedView());\n-\t\t\t\t\t}\n-\t\t\t\t});\n \t\t\t}\n-\t\t}\n+\t\t});\n \t}\n \n \tprivate ImageDownloader getDownloader() {\n@@ -422,6 +391,76 @@ private ImageDownloader getDownloader() {\n \t\treturn d;\n \t}\n \n+\t/**\n+\t * @throws TaskCancelledException if task is not actual (target ImageAware is collected by GC or the image URI of\n+\t *                                this task doesn't match to image URI which is actual for current ImageAware at\n+\t *                                this moment)\n+\t */\n+\tprivate void checkTaskNotActual() throws TaskCancelledException {\n+\t\tcheckViewCollected();\n+\t\tcheckViewReused();\n+\t}\n+\n+\t/**\n+\t * @return <b>true</b> - if task is not actual (target ImageAware is collected by GC or the image URI of this task\n+\t * doesn't match to image URI which is actual for current ImageAware at this moment)); <b>false</b> - otherwise\n+\t */\n+\tprivate boolean isTaskNotActual() {\n+\t\treturn isViewCollected() || isViewReused();\n+\t}\n+\n+\t/** @throws TaskCancelledException if target ImageAware is collected */\n+\tprivate void checkViewCollected() throws TaskCancelledException {\n+\t\tif (isViewCollected()) {\n+\t\t\tthrow new TaskCancelledException();\n+\t\t}\n+\t}\n+\n+\t/** @return <b>true</b> - if target ImageAware is collected by GC; <b>false</b> - otherwise */\n+\tprivate boolean isViewCollected() {\n+\t\tif (imageAware.isCollected()) {\n+\t\t\tlog(LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED);\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/** @throws TaskCancelledException if target ImageAware is collected by GC */\n+\tprivate void checkViewReused() throws TaskCancelledException {\n+\t\tif (isViewReused()) {\n+\t\t\tthrow new TaskCancelledException();\n+\t\t}\n+\t}\n+\n+\t/** @return <b>true</b> - if current ImageAware is reused for displaying another image; <b>false</b> - otherwise */\n+\tprivate boolean isViewReused() {\n+\t\tString currentCacheKey = engine.getLoadingUriForView(imageAware);\n+\t\t// Check whether memory cache key (image URI) for current ImageAware is actual.\n+\t\t// If ImageAware is reused for another task then current task should be cancelled.\n+\t\tboolean imageAwareWasReused = !memoryCacheKey.equals(currentCacheKey);\n+\t\tif (imageAwareWasReused) {\n+\t\t\tlog(LOG_TASK_CANCELLED_IMAGEAWARE_REUSED);\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/** @throws TaskCancelledException if current task was interrupted */\n+\tprivate void checkTaskInterrupted() throws TaskCancelledException {\n+\t\tif (isTaskInterrupted()) {\n+\t\t\tthrow new TaskCancelledException();\n+\t\t}\n+\t}\n+\n+\t/** @return <b>true</b> - if current task was interrupted; <b>false</b> - otherwise */\n+\tprivate boolean isTaskInterrupted() {\n+\t\tif (Thread.interrupted()) {\n+\t\t\tlog(LOG_TASK_INTERRUPTED);\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n \tString getLoadingUri() {\n \t\treturn uri;\n \t}\n@@ -433,4 +472,14 @@ private void log(String message) {\n \tprivate void log(String message, Object... args) {\n \t\tif (writeLogs) L.d(message, args);\n \t}\n-}\n+\n+\t/**\n+\t * Exceptions for case when task is cancelled (thread is interrupted, image view is reused for another task, view is\n+\t * collected by GC).\n+\t *\n+\t * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\n+\t * @since 1.9.1\n+\t */\n+\tclass TaskCancelledException extends Exception {\n+\t}\n+}\n\\ No newline at end of file",
      "parent_sha": "18012793891c498ce9863484ce88d92c885f86d2"
    }
  },
  {
    "oid": "0d5ae92662f669447fb2447f31853f3a3f0d981d",
    "message": "Cleaned ContentLengthInputStream",
    "date": "2014-03-19T20:11:16Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/0d5ae92662f669447fb2447f31853f3a3f0d981d",
    "details": {
      "sha": "786b2d5aaa3496225de51befd647077f5aee4d25",
      "filename": "library/src/com/nostra13/universalimageloader/core/assist/ContentLengthInputStream.java",
      "status": "modified",
      "additions": 18,
      "deletions": 19,
      "changes": 37,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/0d5ae92662f669447fb2447f31853f3a3f0d981d/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fassist%2FContentLengthInputStream.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/0d5ae92662f669447fb2447f31853f3a3f0d981d/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fassist%2FContentLengthInputStream.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fassist%2FContentLengthInputStream.java?ref=0d5ae92662f669447fb2447f31853f3a3f0d981d",
      "patch": "@@ -19,26 +19,25 @@\n import java.io.InputStream;\n \n /**\n- *\n+ * Decorator for {@link java.io.InputStream InputStream}. Provides possibility to return defined stream length by\n+ * {@link #available()} method.\n  *\n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com), Mariotaku\n  * @since 1.9.1\n  */\n public class ContentLengthInputStream extends InputStream {\n \n \tprivate final InputStream stream;\n-\tprivate final long length;\n-\n-\tprivate long pos;\n+\tprivate final int length;\n \n-\tpublic ContentLengthInputStream(InputStream stream, long length) {\n+\tpublic ContentLengthInputStream(InputStream stream, int length) {\n \t\tthis.stream = stream;\n \t\tthis.length = length;\n \t}\n \n \t@Override\n-\tpublic synchronized int available() {\n-\t\treturn (int) (length - pos);\n+\tpublic int available() {\n+\t\treturn length;\n \t}\n \n \t@Override\n@@ -47,37 +46,37 @@ public void close() throws IOException {\n \t}\n \n \t@Override\n-\tpublic void mark(final int readlimit) {\n-\t\tpos = readlimit;\n-\t\tstream.mark(readlimit);\n+\tpublic void mark(int readLimit) {\n+\t\tstream.mark(readLimit);\n \t}\n \n \t@Override\n \tpublic int read() throws IOException {\n-\t\tpos++;\n \t\treturn stream.read();\n \t}\n \n \t@Override\n-\tpublic int read(final byte[] buffer) throws IOException {\n-\t\treturn read(buffer, 0, buffer.length);\n+\tpublic int read(byte[] buffer) throws IOException {\n+\t\treturn stream.read(buffer);\n \t}\n \n \t@Override\n-\tpublic int read(final byte[] buffer, final int byteOffset, final int byteCount) throws IOException {\n-\t\tpos += byteCount;\n+\tpublic int read(byte[] buffer, int byteOffset, int byteCount) throws IOException {\n \t\treturn stream.read(buffer, byteOffset, byteCount);\n \t}\n \n \t@Override\n-\tpublic synchronized void reset() throws IOException {\n-\t\tpos = 0;\n+\tpublic void reset() throws IOException {\n \t\tstream.reset();\n \t}\n \n \t@Override\n-\tpublic long skip(final long byteCount) throws IOException {\n-\t\tpos += byteCount;\n+\tpublic long skip(long byteCount) throws IOException {\n \t\treturn stream.skip(byteCount);\n \t}\n+\n+\t@Override\n+\tpublic boolean markSupported() {\n+\t\treturn stream.markSupported();\n+\t}\n }\n\\ No newline at end of file",
      "parent_sha": "69aabb4f7b1834c09106c9983f99b648fab65791"
    }
  },
  {
    "oid": "cb7462ddaa2e25d7efa663aaef2c7e744b2afb8a",
    "message": "Sample: Clean code",
    "date": "2015-03-06T22:04:45Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/cb7462ddaa2e25d7efa663aaef2c7e744b2afb8a",
    "details": {
      "sha": "2122bdd7dc782743ed5573c9d28ea74a23a8771b",
      "filename": "sample/src/com/nostra13/universalimageloader/sample/UILApplication.java",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/cb7462ddaa2e25d7efa663aaef2c7e744b2afb8a/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FUILApplication.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/cb7462ddaa2e25d7efa663aaef2c7e744b2afb8a/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FUILApplication.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FUILApplication.java?ref=cb7462ddaa2e25d7efa663aaef2c7e744b2afb8a",
      "patch": "@@ -48,15 +48,15 @@ public static void initImageLoader(Context context) {\n \t\t// or you can create default configuration by\n \t\t//  ImageLoaderConfiguration.createDefault(this);\n \t\t// method.\n-\t\tImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)\n-\t\t\t\t.threadPriority(Thread.NORM_PRIORITY - 2)\n-\t\t\t\t.denyCacheImageMultipleSizesInMemory()\n-\t\t\t\t.diskCacheFileNameGenerator(new Md5FileNameGenerator())\n-\t\t\t\t.diskCacheSize(50 * 1024 * 1024) // 50 Mb\n-\t\t\t\t.tasksProcessingOrder(QueueProcessingType.LIFO)\n-\t\t\t\t.writeDebugLogs() // Remove for release app\n-\t\t\t\t.build();\n+\t\tImageLoaderConfiguration.Builder config = new ImageLoaderConfiguration.Builder(context);\n+\t\tconfig.threadPriority(Thread.NORM_PRIORITY - 2);\n+\t\tconfig.denyCacheImageMultipleSizesInMemory();\n+\t\tconfig.diskCacheFileNameGenerator(new Md5FileNameGenerator());\n+\t\tconfig.diskCacheSize(50 * 1024 * 1024); // 50 MiB\n+\t\tconfig.tasksProcessingOrder(QueueProcessingType.LIFO);\n+\t\tconfig.writeDebugLogs(); // Remove for release app\n+\n \t\t// Initialize ImageLoader with configuration.\n-\t\tImageLoader.getInstance().init(config);\n+\t\tImageLoader.getInstance().init(config.build());\n \t}\n }\n\\ No newline at end of file",
      "parent_sha": "095aa1f3bab11f95e4724b208419b7e975006d72"
    }
  },
  {
    "oid": "625fdf61de9a4c4a6749725ae9387f65122b1997",
    "message": "0D0A",
    "date": "2013-01-31T16:45:01Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/625fdf61de9a4c4a6749725ae9387f65122b1997",
    "details": {
      "sha": "21d284cfb763c7cd723eec03a155508f5ed40611",
      "filename": "library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java",
      "status": "modified",
      "additions": 68,
      "deletions": 68,
      "changes": 136,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/625fdf61de9a4c4a6749725ae9387f65122b1997/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/625fdf61de9a4c4a6749725ae9387f65122b1997/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java?ref=625fdf61de9a4c4a6749725ae9387f65122b1997",
      "patch": "@@ -1,68 +1,68 @@\n-package com.nostra13.universalimageloader.core;\r\n-\r\n-import java.io.File;\r\n-\r\n-import android.content.Context;\r\n-import android.graphics.Bitmap;\r\n-\r\n-import com.nostra13.universalimageloader.cache.disc.DiscCacheAware;\r\n-import com.nostra13.universalimageloader.cache.disc.impl.FileCountLimitedDiscCache;\r\n-import com.nostra13.universalimageloader.cache.disc.impl.TotalSizeLimitedDiscCache;\r\n-import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;\r\n-import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;\r\n-import com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator;\r\n-import com.nostra13.universalimageloader.cache.memory.MemoryCacheAware;\r\n-import com.nostra13.universalimageloader.cache.memory.impl.FuzzyKeyMemoryCache;\r\n-import com.nostra13.universalimageloader.cache.memory.impl.UsingFreqLimitedMemoryCache;\r\n-import com.nostra13.universalimageloader.core.assist.MemoryCacheUtil;\r\n-import com.nostra13.universalimageloader.core.display.BitmapDisplayer;\r\n-import com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer;\r\n-import com.nostra13.universalimageloader.core.download.ImageDownloader;\r\n-import com.nostra13.universalimageloader.core.download.URLConnectionImageDownloader;\r\n-import com.nostra13.universalimageloader.utils.StorageUtils;\r\n-\r\n-/**\r\n- * Factory for providing of default options for {@linkplain ImageLoaderConfiguration configuration}\r\n- * \r\n- * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\r\n- */\r\n-public class DefaultConfigurationFactory {\r\n-\r\n-\t/** Create {@linkplain HashCodeFileNameGenerator default implementation} of FileNameGenerator */\r\n-\tpublic static FileNameGenerator createFileNameGenerator() {\r\n-\t\treturn new HashCodeFileNameGenerator();\r\n-\t}\r\n-\r\n-\t/** Create default implementation of {@link DisckCacheAware} depends on incoming parameters */\r\n-\tpublic static DiscCacheAware createDiscCache(Context context, FileNameGenerator discCacheFileNameGenerator, int discCacheSize, int discCacheFileCount) {\r\n-\t\tif (discCacheSize > 0) {\r\n-\t\t\tFile individualCacheDir = StorageUtils.getIndividualCacheDirectory(context);\r\n-\t\t\treturn new TotalSizeLimitedDiscCache(individualCacheDir, discCacheFileNameGenerator, discCacheSize);\r\n-\t\t} else if (discCacheFileCount > 0) {\r\n-\t\t\tFile individualCacheDir = StorageUtils.getIndividualCacheDirectory(context);\r\n-\t\t\treturn new FileCountLimitedDiscCache(individualCacheDir, discCacheFileNameGenerator, discCacheFileCount);\r\n-\t\t} else {\r\n-\t\t\tFile cacheDir = StorageUtils.getCacheDirectory(context);\r\n-\t\t\treturn new UnlimitedDiscCache(cacheDir, discCacheFileNameGenerator);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/** Create default implementation of {@link MemoryCacheAware} depends on incoming parameters */\r\n-\tpublic static MemoryCacheAware<String, Bitmap> createMemoryCache(int memoryCacheSize, boolean denyCacheImageMultipleSizesInMemory) {\r\n-\t\tMemoryCacheAware<String, Bitmap> memoryCache = new UsingFreqLimitedMemoryCache(memoryCacheSize);\r\n-\t\tif (denyCacheImageMultipleSizesInMemory) {\r\n-\t\t\tmemoryCache = new FuzzyKeyMemoryCache<String, Bitmap>(memoryCache, MemoryCacheUtil.createFuzzyKeyComparator());\r\n-\t\t}\r\n-\t\treturn memoryCache;\r\n-\t}\r\n-\r\n-\t/** Create default implementation of {@link ImageDownloader} */\r\n-\tpublic static ImageDownloader createImageDownloader() {\r\n-\t\treturn new URLConnectionImageDownloader();\r\n-\t}\r\n-\r\n-\t/** Create default implementation of {@link BitmapDisplayer} */\r\n-\tpublic static BitmapDisplayer createBitmapDisplayer() {\r\n-\t\treturn new SimpleBitmapDisplayer();\r\n-\t}\r\n-}\r\n+package com.nostra13.universalimageloader.core;\n+\n+import java.io.File;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+\n+import com.nostra13.universalimageloader.cache.disc.DiscCacheAware;\n+import com.nostra13.universalimageloader.cache.disc.impl.FileCountLimitedDiscCache;\n+import com.nostra13.universalimageloader.cache.disc.impl.TotalSizeLimitedDiscCache;\n+import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;\n+import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;\n+import com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator;\n+import com.nostra13.universalimageloader.cache.memory.MemoryCacheAware;\n+import com.nostra13.universalimageloader.cache.memory.impl.FuzzyKeyMemoryCache;\n+import com.nostra13.universalimageloader.cache.memory.impl.UsingFreqLimitedMemoryCache;\n+import com.nostra13.universalimageloader.core.assist.MemoryCacheUtil;\n+import com.nostra13.universalimageloader.core.display.BitmapDisplayer;\n+import com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer;\n+import com.nostra13.universalimageloader.core.download.ImageDownloader;\n+import com.nostra13.universalimageloader.core.download.URLConnectionImageDownloader;\n+import com.nostra13.universalimageloader.utils.StorageUtils;\n+\n+/**\n+ * Factory for providing of default options for {@linkplain ImageLoaderConfiguration configuration}\n+ * \n+ * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\n+ */\n+public class DefaultConfigurationFactory {\n+\n+\t/** Create {@linkplain HashCodeFileNameGenerator default implementation} of FileNameGenerator */\n+\tpublic static FileNameGenerator createFileNameGenerator() {\n+\t\treturn new HashCodeFileNameGenerator();\n+\t}\n+\n+\t/** Create default implementation of {@link DisckCacheAware} depends on incoming parameters */\n+\tpublic static DiscCacheAware createDiscCache(Context context, FileNameGenerator discCacheFileNameGenerator, int discCacheSize, int discCacheFileCount) {\n+\t\tif (discCacheSize > 0) {\n+\t\t\tFile individualCacheDir = StorageUtils.getIndividualCacheDirectory(context);\n+\t\t\treturn new TotalSizeLimitedDiscCache(individualCacheDir, discCacheFileNameGenerator, discCacheSize);\n+\t\t} else if (discCacheFileCount > 0) {\n+\t\t\tFile individualCacheDir = StorageUtils.getIndividualCacheDirectory(context);\n+\t\t\treturn new FileCountLimitedDiscCache(individualCacheDir, discCacheFileNameGenerator, discCacheFileCount);\n+\t\t} else {\n+\t\t\tFile cacheDir = StorageUtils.getCacheDirectory(context);\n+\t\t\treturn new UnlimitedDiscCache(cacheDir, discCacheFileNameGenerator);\n+\t\t}\n+\t}\n+\n+\t/** Create default implementation of {@link MemoryCacheAware} depends on incoming parameters */\n+\tpublic static MemoryCacheAware<String, Bitmap> createMemoryCache(int memoryCacheSize, boolean denyCacheImageMultipleSizesInMemory) {\n+\t\tMemoryCacheAware<String, Bitmap> memoryCache = new UsingFreqLimitedMemoryCache(memoryCacheSize);\n+\t\tif (denyCacheImageMultipleSizesInMemory) {\n+\t\t\tmemoryCache = new FuzzyKeyMemoryCache<String, Bitmap>(memoryCache, MemoryCacheUtil.createFuzzyKeyComparator());\n+\t\t}\n+\t\treturn memoryCache;\n+\t}\n+\n+\t/** Create default implementation of {@link ImageDownloader} */\n+\tpublic static ImageDownloader createImageDownloader() {\n+\t\treturn new URLConnectionImageDownloader();\n+\t}\n+\n+\t/** Create default implementation of {@link BitmapDisplayer} */\n+\tpublic static BitmapDisplayer createBitmapDisplayer() {\n+\t\treturn new SimpleBitmapDisplayer();\n+\t}\n+}",
      "parent_sha": "74926cac1fa3ecdb0829c462e90f6177b8a66c9a"
    }
  },
  {
    "oid": "abf92bbdd35d78d5e113f9291c4a3ee603b6b4b4",
    "message": "Fixed compile error",
    "date": "2014-09-06T22:29:57Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/abf92bbdd35d78d5e113f9291c4a3ee603b6b4b4",
    "details": {
      "sha": "a2dd88313e6768f3323740bbdbf5e8798b4dac95",
      "filename": "sample/src/com/nostra13/universalimageloader/sample/Constants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/abf92bbdd35d78d5e113f9291c4a3ee603b6b4b4/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FConstants.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/abf92bbdd35d78d5e113f9291c4a3ee603b6b4b4/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FConstants.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fsample%2FConstants.java?ref=abf92bbdd35d78d5e113f9291c4a3ee603b6b4b4",
      "patch": "@@ -151,7 +151,7 @@ public final class Constants {\n \t\t\t\"http://4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg\", // Image with \"Mark has been invalidated\" problem\n \t\t\t\"file:///sdcard/Universal Image Loader @#&=+-_.,!()~'%20.png\", // Image from SD card with encoded symbols\n \t\t\t\"assets://Living Things @#&=+-_.,!()~'%20.jpg\", // Image from assets\n-\t\t\t\"drawable://\" + com.nostra13.universalimageloader.R.drawable.ic_launcher, // Image from drawables\n+\t\t\t\"drawable://\" + R.drawable.ic_launcher, // Image from drawables\n \t\t\t\"http://upload.wikimedia.org/wikipedia/ru/b/b6/\u041a\u0430\u043a_\u043a\u043e\u0442_\u0441_\u043c\u044b\u0448\u0430\u043c\u0438_\u0432\u043e\u0435\u0432\u0430\u043b.png\", // Link with UTF-8\n \t\t\t\"https://www.eff.org/sites/default/files/chrome150_0.jpg\", // Image from HTTPS\n \t\t\t\"http://bit.ly/soBiXr\", // Redirect link",
      "parent_sha": "29b7a27ebc73a7feb23cc8e3242904bf043f5a34"
    }
  },
  {
    "oid": "f21a6fd0ddee13f337e8a9ab201daad0523ba922",
    "message": "Example: Use renamed image scale type",
    "date": "2012-09-30T19:59:01Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/f21a6fd0ddee13f337e8a9ab201daad0523ba922",
    "details": {
      "sha": "1012b9ccef7a35a29c67dffd52c26503a9993185",
      "filename": "UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/f21a6fd0ddee13f337e8a9ab201daad0523ba922/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/f21a6fd0ddee13f337e8a9ab201daad0523ba922/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java?ref=f21a6fd0ddee13f337e8a9ab201daad0523ba922",
      "patch": "@@ -38,7 +38,7 @@ public void onCreate(Bundle savedInstanceState) {\n \t\toptions = new DisplayImageOptions.Builder()\n \t\t\t.showImageForEmptyUri(R.drawable.image_for_empty_url)\n \t\t\t.cacheOnDisc()\n-\t\t\t.imageScaleType(ImageScaleType.EXACT)\n+\t\t\t.imageScaleType(ImageScaleType.IN_SAMPLE_INT)\n \t\t\t.build();\n \n \t\tpager = (ViewPager) findViewById(R.id.pager);",
      "parent_sha": "fe4fdee0ae74b939e354172e3e727147ec4043df"
    }
  },
  {
    "oid": "8c57c220c9fb395ad0aa603a1fb5b7c321dfa4e6",
    "message": "Issue #179 - De/Encoding for File URI image load problem\nHandled local files with encoded symbols in file name",
    "date": "2013-03-09T22:18:47Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/8c57c220c9fb395ad0aa603a1fb5b7c321dfa4e6",
    "details": {
      "sha": "8574a977eb8a9ef1dc9f07e3d3dd14b58ef599a3",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/8c57c220c9fb395ad0aa603a1fb5b7c321dfa4e6/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/8c57c220c9fb395ad0aa603a1fb5b7c321dfa4e6/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java?ref=8c57c220c9fb395ad0aa603a1fb5b7c321dfa4e6",
      "patch": "@@ -18,6 +18,7 @@\n import java.io.BufferedInputStream;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -137,7 +138,7 @@ private HttpURLConnection connectTo(String url) throws IOException {\n \t * @throws IOException if some I/O error occurs reading from file system\n \t */\n \tprotected InputStream getStreamFromFile(URI imageUri, Object extra) throws IOException {\n-\t\treturn new BufferedInputStream(imageUri.toURL().openStream(), BUFFER_SIZE);\n+\t\treturn new BufferedInputStream(new FileInputStream(imageUri.getRawPath()), BUFFER_SIZE);\n \t}\n \n \t/**",
      "parent_sha": "300a0ea2f23b836dedeaf92774a2586e98e720b9"
    }
  },
  {
    "oid": "bf910d35e25788c4f12dbe85c906df13047c0b74",
    "message": "Issue #12 - Crash on clear cache",
    "date": "2012-01-07T11:53:21Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/bf910d35e25788c4f12dbe85c906df13047c0b74",
    "details": {
      "sha": "25949df94bdb4dcc59ff8f395b9c49f903c3fe4d",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/DiscCache.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/bf910d35e25788c4f12dbe85c906df13047c0b74/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FDiscCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/bf910d35e25788c4f12dbe85c906df13047c0b74/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FDiscCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FDiscCache.java?ref=bf910d35e25788c4f12dbe85c906df13047c0b74",
      "patch": "@@ -25,8 +25,10 @@ public DiscCache(File cacheDir) {\n \t/** Clears cache directory */\n \tpublic void clear() {\n \t\tFile[] files = cacheDir.listFiles();\n-\t\tfor (File f : files) {\n-\t\t\tf.delete();\n+\t\tif (files != null) {\n+\t\t\tfor (File f : files) {\n+\t\t\t\tf.delete();\n+\t\t\t}\n \t\t}\n \t}\n ",
      "parent_sha": "8fcdf2b211e0145998453ebbfb62b15866f08207"
    }
  },
  {
    "oid": "cc4ecc76fe45c11275222f1f87b56fecb2fc3112",
    "message": "Protected imageViewRef in ImageViewAware",
    "date": "2013-11-19T13:37:23Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/cc4ecc76fe45c11275222f1f87b56fecb2fc3112",
    "details": {
      "sha": "eab1a1c64c10e3159d91a605788da1e1931ae77f",
      "filename": "library/src/com/nostra13/universalimageloader/core/imageaware/ImageViewAware.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/cc4ecc76fe45c11275222f1f87b56fecb2fc3112/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fimageaware%2FImageViewAware.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/cc4ecc76fe45c11275222f1f87b56fecb2fc3112/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fimageaware%2FImageViewAware.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fimageaware%2FImageViewAware.java?ref=cc4ecc76fe45c11275222f1f87b56fecb2fc3112",
      "patch": "@@ -35,7 +35,7 @@\n  */\n public class ImageViewAware implements ImageAware {\n \n-\tprivate Reference<ImageView> imageViewRef;\n+\tprotected Reference<ImageView> imageViewRef;\n \n \tpublic ImageViewAware(ImageView imageView) {\n \t\tthis.imageViewRef = new WeakReference<ImageView>(imageView);",
      "parent_sha": "b6b8412fd504ab02a5c71065581f0712cd0565c0"
    }
  },
  {
    "oid": "33332bf889477a1a3f0d10a77042bdbc17d55b63",
    "message": "LimitedCache : FIFO -> the most long used",
    "date": "2011-12-12T20:23:49Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/33332bf889477a1a3f0d10a77042bdbc17d55b63",
    "details": {
      "sha": "d5903d146dd15d49439ffc034a9df1e7cffa9535",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/cache/LimitedCache.java",
      "status": "modified",
      "additions": 41,
      "deletions": 7,
      "changes": 48,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/33332bf889477a1a3f0d10a77042bdbc17d55b63/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FLimitedCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/33332bf889477a1a3f0d10a77042bdbc17d55b63/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FLimitedCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FLimitedCache.java?ref=33332bf889477a1a3f0d10a77042bdbc17d55b63",
      "patch": "@@ -1,7 +1,9 @@\n package com.nostra13.universalimageloader.cache;\n \n import java.lang.ref.Reference;\n-import java.util.LinkedList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n \n /**\n  * Limited cache. Provides objects storing. Object has size ({@link #getSize(Object)}), size of all stored object will\n@@ -19,33 +21,65 @@ public abstract class LimitedCache<K, V> extends Cache<K, V> {\n \tprivate int cacheSize = 0;\n \n \t/**\n-\t * Contains strong references to stored objects. Each next object is added first. If hard cache size will exceed\n-\t * limit then last object is deleted (but it continue exist at {@link #softMap} and can be collected by GC at any\n-\t * time)\n+\t * Contains strong references to stored objects (keys) and last object usage date (in milliseconds). If hard cache\n+\t * size will exceed limit then object with the oldest last usage date is deleted (but it continue exist at\n+\t * {@link #softMap} and can be collected by GC at any time)\n \t */\n-\tprivate final LinkedList<V> hardCache = new LinkedList<V>();\n+\tprivate final Map<V, Long> hardCache = new HashMap<V, Long>();\n \n \tpublic void put(K key, V value) {\n \t\tint valueSize = getSize(value);\n \t\tint sizeLimit = getSizeLimit();\n \t\t// add to hard cache\n \t\tif (valueSize < sizeLimit) {\n \t\t\twhile (cacheSize + valueSize > sizeLimit) {\n-\t\t\t\tcacheSize -= getSize(hardCache.removeLast());\n+\t\t\t\tcacheSize -= getSize(removeMostLongUsed());\n \t\t\t}\n-\t\t\thardCache.addFirst(value);\n+\t\t\thardCache.put(value, System.currentTimeMillis());\n \t\t\tcacheSize += valueSize;\n \t\t}\n \t\t// add to soft cache\n \t\tsuper.put(key, value);\n \t}\n \n+\tpublic V get(K key) {\n+\t\tV value = super.get(key);\n+\t\t// Save current usage date for value if value is contained in hardCahe\n+\t\tif (value != null) {\n+\t\t\tLong lastUsage = hardCache.get(value);\n+\t\t\tif (lastUsage != null) {\n+\t\t\t\thardCache.put(value, System.currentTimeMillis());\n+\t\t\t}\n+\t\t}\n+\t\treturn value;\n+\t}\n+\n \tpublic void clear() {\n \t\thardCache.clear();\n \t\tcacheSize = 0;\n \t\tsuper.clear();\n \t}\n \n+\t// TODO : Implement different logic variants for element removing (FIFO, remove the biggest)\n+\tprivate V removeMostLongUsed() {\n+\t\tLong oldestUsage = null;\n+\t\tV leastUsedValue = null;\n+\t\tfor (Entry<V, Long> entry : hardCache.entrySet()) {\n+\t\t\tif (leastUsedValue == null) {\n+\t\t\t\tleastUsedValue = entry.getKey();\n+\t\t\t\toldestUsage = entry.getValue();\n+\t\t\t} else {\n+\t\t\t\tLong lastValueUsage = entry.getValue();\n+\t\t\t\tif (lastValueUsage < oldestUsage) {\n+\t\t\t\t\toldestUsage = lastValueUsage;\n+\t\t\t\t\tleastUsedValue = entry.getKey();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\thardCache.remove(leastUsedValue);\n+\t\treturn leastUsedValue;\n+\t}\n+\n \tprotected abstract Reference<V> createReference(V value);\n \n \tprotected abstract int getSize(V value);",
      "parent_sha": "fc836bd54dd4f621bafdd3aae29644248fd693b1"
    }
  },
  {
    "oid": "fc836bd54dd4f621bafdd3aae29644248fd693b1",
    "message": "Reduce ImageDecoder class visibility",
    "date": "2011-12-12T18:53:19Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/fc836bd54dd4f621bafdd3aae29644248fd693b1",
    "details": {
      "sha": "70796004092fc5bb9827cd3e2eee560909b27269",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/imageloader/ImageDecoder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/fc836bd54dd4f621bafdd3aae29644248fd693b1/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageDecoder.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/fc836bd54dd4f621bafdd3aae29644248fd693b1/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageDecoder.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageDecoder.java?ref=fc836bd54dd4f621bafdd3aae29644248fd693b1",
      "patch": "@@ -14,7 +14,7 @@\n  * \r\n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\r\n  */\r\n-public final class ImageDecoder {\r\n+final class ImageDecoder {\r\n \r\n \tprivate static final String TAG = ImageDecoder.class.getSimpleName();\r\n \r",
      "parent_sha": "32de445919abdc578d843dcede7cd5e6579e066e"
    }
  },
  {
    "oid": "062e3e2a3a6ce7329de28df77d19b849625ee11b",
    "message": "Issue #92 - Multiple ImageLoader instances",
    "date": "2012-11-01T22:24:21Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/062e3e2a3a6ce7329de28df77d19b849625ee11b",
    "details": {
      "sha": "989755dea458cba8933987d64365a298740a1f0c",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/062e3e2a3a6ce7329de28df77d19b849625ee11b/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/062e3e2a3a6ce7329de28df77d19b849625ee11b/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=062e3e2a3a6ce7329de28df77d19b849625ee11b",
      "patch": "@@ -69,7 +69,7 @@ public static ImageLoader getInstance() {\n \t\treturn instance;\r\n \t}\r\n \r\n-\tprivate ImageLoader() {\r\n+\tprotected ImageLoader() {\r\n \t}\r\n \r\n \t/**\r",
      "parent_sha": "8c365c54e532254611c382589d8bdca5e4587812"
    }
  },
  {
    "oid": "9a5546af893eb49edd75e0fe60a963f0cda80aa9",
    "message": "Adjusted allowed characters string",
    "date": "2012-08-21T19:25:52Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/9a5546af893eb49edd75e0fe60a963f0cda80aa9",
    "details": {
      "sha": "ec63b679fc2eb121d485bc1a7478056b4b7ae05c",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoadingInfo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/9a5546af893eb49edd75e0fe60a963f0cda80aa9/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoadingInfo.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/9a5546af893eb49edd75e0fe60a963f0cda80aa9/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoadingInfo.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoadingInfo.java?ref=9a5546af893eb49edd75e0fe60a963f0cda80aa9",
      "patch": "@@ -25,7 +25,7 @@ final class ImageLoadingInfo {\n \tfinal ImageLoadingListener listener;\r\n \r\n \tpublic ImageLoadingInfo(String uri, ImageView imageView, ImageSize targetSize, DisplayImageOptions options, ImageLoadingListener listener) {\r\n-\t\tthis.uri = Uri.encode(uri, \":/-_%|+?#=&$,.;@\");\r\n+\t\tthis.uri = Uri.encode(uri, \"@#&=+-_.,:?()/%\");\r\n \t\tthis.imageView = imageView;\r\n \t\tthis.targetSize = targetSize;\r\n \t\tthis.options = options;\r",
      "parent_sha": "b5bc24e6440b17a8c4c09cf6ce0ea6038bc7bcbb"
    }
  },
  {
    "oid": "e33bcb459fec45e16ba1e73708c85c9c533cb646",
    "message": "Replaced queue cleaning with regular PhotoToLoad consistency check",
    "date": "2011-12-10T11:14:11Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/e33bcb459fec45e16ba1e73708c85c9c533cb646",
    "details": {
      "sha": "38d6b1bea9e25333df3f89aded790649a1d610f1",
      "filename": "src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 18,
      "deletions": 26,
      "changes": 44,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/e33bcb459fec45e16ba1e73708c85c9c533cb646/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/e33bcb459fec45e16ba1e73708c85c9c533cb646/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=e33bcb459fec45e16ba1e73708c85c9c533cb646",
      "patch": "@@ -9,7 +9,6 @@\n import java.net.HttpURLConnection;\r\n import java.net.MalformedURLException;\r\n import java.net.URL;\r\n-import java.util.Iterator;\r\n import java.util.LinkedList;\r\n import java.util.List;\r\n \r\n@@ -106,11 +105,10 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op\n \t *            displayed at ImageView but listener does not fire any event. Listener fires events on UI thread.\r\n \t */\r\n \tpublic void displayImage(String url, ImageView imageView, DisplayImageOptions options, ImageLoadingListener listener) {\r\n-\t\tif (url == null || url.length() == 0) {\r\n+\t\tif (url == null || url.length() == 0 || imageView == null) {\r\n \t\t\treturn;\r\n \t\t}\r\n-\t\timageView.setTag(Constants.IMAGE_LOADER_TAG_KEY, url);\r\n-\r\n+\t\t\r\n \t\tPhotoToLoad photoToLoad = new PhotoToLoad(url, imageView, options, listener);\r\n \r\n \t\tBitmap image = null;\r\n@@ -135,11 +133,6 @@ private void queuePhoto(PhotoToLoad photoToLoad) {\n \t\t\tphotoToLoad.listener.onLoadingStarted();\r\n \t\t}\r\n \r\n-\t\t// This ImageView may be used for other images before. So there may be some old tasks in the queue. We need to discard them.\r\n-\t\tsynchronized (photoToLoadQueue) {\r\n-\t\t\tremoveFromQueue(photoToLoad.imageView);\r\n-\t\t}\r\n-\r\n \t\t// If image was cached on disc we put load image task in front of the queue. \r\n \t\t// If not - we put load image task in the end of the queue.\r\n \t\t// Images are loaded from the queue beginning. So it will reduce the time of waiting \r\n@@ -177,16 +170,6 @@ private File getLocalImageFile(String imageUrl) {\n \t\treturn new File(cacheDir, fileName);\r\n \t}\r\n \r\n-\tpublic void removeFromQueue(ImageView image) {\r\n-\t\tIterator<PhotoToLoad> it = photoToLoadQueue.iterator();\r\n-\t\twhile (it.hasNext()) {\r\n-\t\t\tPhotoToLoad photo = it.next();\r\n-\t\t\tif (photo.imageView == image) {\r\n-\t\t\t\tit.remove();\r\n-\t\t\t}\r\n-\t\t}\r\n-\t}\r\n-\r\n \tprivate Bitmap getBitmap(String imageUrl, ImageSize targetImageSize, boolean cacheImageOnDisc) {\r\n \t\tFile f = getLocalImageFile(imageUrl);\r\n \r\n@@ -302,12 +285,17 @@ private class PhotoToLoad {\n \t\tprivate DisplayImageOptions options;\r\n \t\tprivate ImageLoadingListener listener;\r\n \r\n-\t\tpublic PhotoToLoad(String url, ImageView imageView, DisplayImageOptions options, ImageLoadingListener listener) {\r\n+\t\tPhotoToLoad(String url, ImageView imageView, DisplayImageOptions options, ImageLoadingListener listener) {\r\n+\t\t\timageView.setTag(Constants.IMAGE_LOADER_TAG_KEY, url);\r\n \t\t\tthis.url = url;\r\n \t\t\tthis.imageView = imageView;\r\n \t\t\tthis.options = options;\r\n \t\t\tthis.listener = listener;\r\n \t\t}\r\n+\r\n+\t\tboolean isConsistent() {\r\n+\t\t\treturn url != null && url.equals(imageView.getTag(Constants.IMAGE_LOADER_TAG_KEY));\r\n+\t\t}\r\n \t}\r\n \r\n \tclass PhotosLoader extends Thread {\r\n@@ -330,11 +318,17 @@ public void run() {\n \t\t\t\t\t}\r\n \r\n \t\t\t\t\tif (photoToLoad != null) {\r\n+\t\t\t\t\t\tif (!photoToLoad.isConsistent()) {\r\n+\t\t\t\t\t\t\tcontinue;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t// Load bitmap\t\t\t\t\t\t\r\n \t\t\t\t\t\tImageSize targetImageSize = getImageSizeScaleTo(photoToLoad.imageView);\r\n \t\t\t\t\t\tbmp = getBitmap(photoToLoad.url, targetImageSize, photoToLoad.options.isCacheOnDisc());\r\n-\t\t\t\t\t\tif (bmp == null) {\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\tif (!photoToLoad.isConsistent() || bmp == null) {\r\n \t\t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t\t}\r\n+\t\t\t\t\t\t// Cache bitmap in memory\r\n \t\t\t\t\t\tif (photoToLoad.options.isCacheInMemory()) {\r\n \t\t\t\t\t\t\tsynchronized (bitmapCache) {\r\n \t\t\t\t\t\t\t\tbitmapCache.put(photoToLoad.url, bmp);\r\n@@ -348,7 +342,7 @@ public void run() {\n \t\t\t\t} catch (InterruptedException e) {\r\n \t\t\t\t\tLog.e(TAG, e.getMessage(), e);\r\n \t\t\t\t} finally {\r\n-\t\t\t\t\tif (photoToLoad != null) {\r\n+\t\t\t\t\tif (photoToLoad != null && bmp != null) {\r\n \t\t\t\t\t\tBitmapDisplayer bd = new BitmapDisplayer(photoToLoad, bmp);\r\n \t\t\t\t\t\tActivity a = (Activity) photoToLoad.imageView.getContext();\r\n \t\t\t\t\t\ta.runOnUiThread(bd);\r\n@@ -369,11 +363,9 @@ public BitmapDisplayer(PhotoToLoad photoToLoad, Bitmap bitmap) {\n \t\t}\r\n \r\n \t\tpublic void run() {\r\n-\t\t\tString tag = (String) photoToLoad.imageView.getTag(Constants.IMAGE_LOADER_TAG_KEY);\r\n-\r\n-\t\t\tif (photoToLoad != null && tag != null && tag.equals(photoToLoad.url) && bitmap != null) {\r\n+\t\t\tif (photoToLoad.isConsistent()) {\r\n \t\t\t\tphotoToLoad.imageView.setImageBitmap(bitmap);\r\n-\r\n+\t\t\t\t// Notify listener\r\n \t\t\t\tif (photoToLoad.listener != null) {\r\n \t\t\t\t\tphotoToLoad.listener.onLoadingComplete();\r\n \t\t\t\t}\r",
      "parent_sha": "8ff88cde097abcd2b5a0722a454fa7bb8b9f8e0a"
    }
  },
  {
    "oid": "599eb41d38dcef13c7221b9cb9baeb5686eee485",
    "message": "Minor change in ImageSizeUtils",
    "date": "2013-05-16T21:58:17Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/599eb41d38dcef13c7221b9cb9baeb5686eee485",
    "details": {
      "sha": "8b3cfa1971d2a0082846c7a6163325c455e91f63",
      "filename": "library/src/com/nostra13/universalimageloader/utils/ImageSizeUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/599eb41d38dcef13c7221b9cb9baeb5686eee485/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FImageSizeUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/599eb41d38dcef13c7221b9cb9baeb5686eee485/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FImageSizeUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FImageSizeUtils.java?ref=599eb41d38dcef13c7221b9cb9baeb5686eee485",
      "patch": "@@ -53,13 +53,13 @@ public static ImageSize defineTargetSizeForView(ImageView imageView, int maxImag\n \n \t\tfinal LayoutParams params = imageView.getLayoutParams();\n \t\tint width = (params != null && params.width == LayoutParams.WRAP_CONTENT) ? 0 : imageView.getWidth(); // Get actual image width\n-\t\tif (width <= 0) width = (params != null) ? params.width : width; // Get layout width parameter\n+\t\tif (width <= 0 && params != null) width = params.width; // Get layout width parameter\n \t\tif (width <= 0) width = getImageViewFieldValue(imageView, \"mMaxWidth\"); // Check maxWidth parameter\n \t\tif (width <= 0) width = maxImageWidth;\n \t\tif (width <= 0) width = displayMetrics.widthPixels;\n \n \t\tint height = (params != null && params.height == LayoutParams.WRAP_CONTENT) ? 0 : imageView.getHeight(); // Get actual image height\n-\t\tif (height <= 0) height = (params != null) ?  params.height : height; // Get layout height parameter\n+\t\tif (height <= 0 && params != null) height = params.height; // Get layout height parameter\n \t\tif (height <= 0) height = getImageViewFieldValue(imageView, \"mMaxHeight\"); // Check maxHeight parameter\n \t\tif (height <= 0) height = maxImageHeight;\n \t\tif (height <= 0) height = displayMetrics.heightPixels;",
      "parent_sha": "e582e41cadc8f4d51de2924143a39b4554bd7cac"
    }
  },
  {
    "oid": "6ac850d377d7369fdc60a53ee17e44a989915d21",
    "message": "Removed unnecessary method",
    "date": "2011-12-05T22:02:09Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/6ac850d377d7369fdc60a53ee17e44a989915d21",
    "details": {
      "sha": "5a401bc42f836707dce2b4811b8dd715ca7d9b16",
      "filename": "src/com/nostra13/universalimageloader/cache/Cache.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/6ac850d377d7369fdc60a53ee17e44a989915d21/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/6ac850d377d7369fdc60a53ee17e44a989915d21/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FCache.java?ref=6ac850d377d7369fdc60a53ee17e44a989915d21",
      "patch": "@@ -22,7 +22,7 @@ public abstract class Cache<K, V> {\n \tprotected final Map<K, Reference<V>> softMap = new HashMap<K, Reference<V>>();\r\n \r\n \tpublic V get(K key) {\r\n-\t\tif (containsKey(key)) {\r\n+\t\tif (softMap.containsKey(key)) {\r\n \t\t\tReference<V> reference = softMap.get(key);\r\n \t\t\treturn reference.get();\r\n \t\t} else {\r\n@@ -38,9 +38,5 @@ public void clear() {\n \t\tsoftMap.clear();\r\n \t}\r\n \r\n-\tpublic boolean containsKey(K key) {\r\n-\t\treturn softMap.containsKey(key);\r\n-\t}\r\n-\r\n \tprotected abstract Reference<V> createReference(V value);\r\n }\r",
      "parent_sha": "87e0f140d03299c7e2d2b75bdd12332800bfdedd"
    }
  },
  {
    "oid": "d4184857c88ef8db7d36393084853ee6af661065",
    "message": "  Issue #326 - Fixed unexpected NPE for Environment.getExternalStorageState()",
    "date": "2013-07-12T21:17:05Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/d4184857c88ef8db7d36393084853ee6af661065",
    "details": {
      "sha": "3636f5baf6e91f15d3a25200b4f46848bf325152",
      "filename": "library/src/com/nostra13/universalimageloader/utils/StorageUtils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/d4184857c88ef8db7d36393084853ee6af661065/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/d4184857c88ef8db7d36393084853ee6af661065/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java?ref=d4184857c88ef8db7d36393084853ee6af661065",
      "patch": "@@ -48,15 +48,14 @@ private StorageUtils() {\n \t */\n \tpublic static File getCacheDirectory(Context context) {\n \t\tFile appCacheDir = null;\n-\t\tif (Environment.getExternalStorageState().equals(MEDIA_MOUNTED) && hasExternalStoragePermission(context)) {\n+\t\tif (MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) && hasExternalStoragePermission(context)) {\n \t\t\tappCacheDir = getExternalCacheDir(context);\n \t\t}\n \t\tif (appCacheDir == null) {\n \t\t\tappCacheDir = context.getCacheDir();\n \t\t}\n \t\tif (appCacheDir == null) {\n-\t\t\tL.w(\"Can't define system cache directory!\");\n-\t\t\tappCacheDir = context.getCacheDir(); // retry\n+\t\t\tL.w(\"Can't define system cache directory! The app should be re-installed.\");\n \t\t}\n \t\treturn appCacheDir;\n \t}\n@@ -90,7 +89,7 @@ public static File getIndividualCacheDirectory(Context context) {\n \t */\n \tpublic static File getOwnCacheDirectory(Context context, String cacheDir) {\n \t\tFile appCacheDir = null;\n-\t\tif (Environment.getExternalStorageState().equals(MEDIA_MOUNTED) && hasExternalStoragePermission(context)) {\n+\t\tif (MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) && hasExternalStoragePermission(context)) {\n \t\t\tappCacheDir = new File(Environment.getExternalStorageDirectory(), cacheDir);\n \t\t}\n \t\tif (appCacheDir == null || (!appCacheDir.exists() && !appCacheDir.mkdirs())) {",
      "parent_sha": "e509d54325b6bd5e6492006d2b287dd19d16a379"
    }
  },
  {
    "oid": "906beecdb8c45d4bb56da3fa40bdd2acdbe4370a",
    "message": "Correct some comment of LargestLimitedMemoryCache. The comment which\ndescribes LargestLimitedMemoryCache was the same as\nUsingFreqLimitedMemoryCache's.",
    "date": "2013-10-02T10:17:27Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/906beecdb8c45d4bb56da3fa40bdd2acdbe4370a",
    "details": {
      "sha": "d7be081dc4e20b6ab0260cce4a89638d26d0fab1",
      "filename": "library/src/com/nostra13/universalimageloader/cache/memory/impl/LargestLimitedMemoryCache.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/906beecdb8c45d4bb56da3fa40bdd2acdbe4370a/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2Fimpl%2FLargestLimitedMemoryCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/906beecdb8c45d4bb56da3fa40bdd2acdbe4370a/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2Fimpl%2FLargestLimitedMemoryCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2Fimpl%2FLargestLimitedMemoryCache.java?ref=906beecdb8c45d4bb56da3fa40bdd2acdbe4370a",
      "patch": "@@ -28,7 +28,7 @@\n \n /**\n  * Limited {@link Bitmap bitmap} cache. Provides {@link Bitmap bitmaps} storing. Size of all stored bitmaps will not to\n- * exceed size limit. When cache reaches limit size then the bitmap which used the least frequently is deleted from\n+ * exceed size limit. When cache reaches limit size then the bitmap which has the largest size is deleted from\n  * cache.<br />\n  * <br />\n  * <b>NOTE:</b> This cache uses strong and weak references for stored Bitmaps. Strong references - for limited count of\n@@ -39,8 +39,8 @@\n  */\n public class LargestLimitedMemoryCache extends LimitedMemoryCache<String, Bitmap> {\n \t/**\n-\t * Contains strong references to stored objects (keys) and last object usage date (in milliseconds). If hard cache\n-\t * size will exceed limit then object with the least frequently usage is deleted (but it continue exist at\n+\t * Contains strong references to stored objects (keys) and sizes of the objects. If hard cache\n+\t * size will exceed limit then object with the largest size is deleted (but it continue exist at\n \t * {@link #softMap} and can be collected by GC at any time)\n \t */\n \tprivate final Map<Bitmap, Integer> valueSizes = Collections.synchronizedMap(new HashMap<Bitmap, Integer>());",
      "parent_sha": "24ca7dd0dbaee8a011aad6195f33e840793e7df9"
    }
  },
  {
    "oid": "3f61478dfb0cdfac9c538ebe90823a2e2f8f9a98",
    "message": "Renamed DiscCacheUtils -> DiskCacheUtils",
    "date": "2014-05-23T22:25:17Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/3f61478dfb0cdfac9c538ebe90823a2e2f8f9a98",
    "details": {
      "sha": "2522cd6b4cebc4c9a63f682cca0ce15b475b0fec",
      "filename": "library/src/com/nostra13/universalimageloader/utils/DiskCacheUtils.java",
      "status": "renamed",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/3f61478dfb0cdfac9c538ebe90823a2e2f8f9a98/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FDiskCacheUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/3f61478dfb0cdfac9c538ebe90823a2e2f8f9a98/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FDiskCacheUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FDiskCacheUtils.java?ref=3f61478dfb0cdfac9c538ebe90823a2e2f8f9a98",
      "patch": "@@ -26,9 +26,9 @@\n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\n  * @since 1.8.0\n  */\n-public final class DiscCacheUtils {\n+public final class DiskCacheUtils {\n \n-\tprivate DiscCacheUtils() {\n+\tprivate DiskCacheUtils() {\n \t}\n \n \t/** Returns {@link File} of cached image or <b>null</b> if image was not cached in disk cache */",
      "previous_filename": "library/src/com/nostra13/universalimageloader/utils/DiscCacheUtils.java",
      "parent_sha": "b7b58fde4d30a2ab7b23cd5aa9fd12959079474d"
    }
  },
  {
    "oid": "5636a6e953047a5fb8da0ee5e2d3f49ae446cfdd",
    "message": "Sample: Clean code",
    "date": "2013-02-09T13:38:56Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/5636a6e953047a5fb8da0ee5e2d3f49ae446cfdd",
    "details": {
      "sha": "e2159b890dd02d789fb41d9be6b4d52e52b15262",
      "filename": "sample/src/com/nostra13/example/universalimageloader/ImageListActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/5636a6e953047a5fb8da0ee5e2d3f49ae446cfdd/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImageListActivity.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/5636a6e953047a5fb8da0ee5e2d3f49ae446cfdd/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImageListActivity.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImageListActivity.java?ref=5636a6e953047a5fb8da0ee5e2d3f49ae446cfdd",
      "patch": "@@ -115,9 +115,7 @@ public View getView(final int position, View convertView, ViewGroup parent) {\n \n \t\t\tholder.text.setText(\"Item \" + (position + 1));\n \n-\t\t\tfinal String imageUri = imageUrls[position];\n-\t\t\tfinal ImageView imageView = holder.image;\n-\t\t\timageLoader.displayImage(imageUri, imageView, options, animateFirstListener);\n+\t\t\timageLoader.displayImage(imageUrls[position], holder.image, options, animateFirstListener);\n \n \t\t\treturn view;\n \t\t}",
      "parent_sha": "dc8b00842aee7707f1df946460a4a3be062fe2f6"
    }
  },
  {
    "oid": "2e78a6631dd0d0be6fa076a7895aa605a9a9660c",
    "message": "Example: recycle Bitmaps for destroyed items in ViewPager",
    "date": "2013-01-12T21:43:08Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/2e78a6631dd0d0be6fa076a7895aa605a9a9660c",
    "details": {
      "sha": "e26c15671343062129a1465169a1d7dd9ba1b450",
      "filename": "UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/2e78a6631dd0d0be6fa076a7895aa605a9a9660c/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/2e78a6631dd0d0be6fa076a7895aa605a9a9660c/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImagePagerActivity.java?ref=2e78a6631dd0d0be6fa076a7895aa605a9a9660c",
      "patch": "@@ -1,5 +1,6 @@\n package com.nostra13.example.universalimageloader;\n import android.graphics.Bitmap;\n+import android.graphics.drawable.BitmapDrawable;\n import android.os.Bundle;\n import android.os.Parcelable;\n import android.support.v4.view.PagerAdapter;\n@@ -58,7 +59,17 @@ private class ImagePagerAdapter extends PagerAdapter {\n \n \t\t@Override\n \t\tpublic void destroyItem(View container, int position, Object object) {\n-\t\t\t((ViewPager) container).removeView((View) object);\n+\t\t\tView rootView = (View) object;\n+\t\t\tImageView imageView = (ImageView) rootView.findViewById(R.id.image);\n+\t\t\tBitmapDrawable drawable = (BitmapDrawable) imageView.getDrawable();\n+\t\t\tif (drawable != null) {\n+\t\t\t\tBitmap bitmap = drawable.getBitmap();\n+\t\t\t\tif (bitmap != null) {\n+\t\t\t\t\tbitmap.recycle();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t((ViewPager) container).removeView(rootView);\n \t\t}\n \n \t\t@Override",
      "parent_sha": "dfee81fd4c0720b750f222048c6220e7779e46b2"
    }
  },
  {
    "oid": "9a8a12803102bb48c1b4dd9c92ab62a3d3ade646",
    "message": "Refactored StorageUtils",
    "date": "2013-06-26T22:42:29Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/9a8a12803102bb48c1b4dd9c92ab62a3d3ade646",
    "details": {
      "sha": "799fed30aa9dee6ccb020b7aab5f2de1ecf9f3f1",
      "filename": "library/src/com/nostra13/universalimageloader/utils/StorageUtils.java",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/9a8a12803102bb48c1b4dd9c92ab62a3d3ade646/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/9a8a12803102bb48c1b4dd9c92ab62a3d3ade646/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java?ref=9a8a12803102bb48c1b4dd9c92ab62a3d3ade646",
      "patch": "@@ -15,6 +15,8 @@\n  *******************************************************************************/\n package com.nostra13.universalimageloader.utils;\n \n+import static android.os.Environment.MEDIA_MOUNTED;\n+\n import java.io.File;\n import java.io.IOException;\n \n@@ -30,22 +32,23 @@\n  */\n public final class StorageUtils {\n \n+\tprivate static final String EXTERNAL_STORAGE_PERMISSION = \"android.permission.WRITE_EXTERNAL_STORAGE\";\n \tprivate static final String INDIVIDUAL_DIR_NAME = \"uil-images\";\n \n \tprivate StorageUtils() {\n \t}\n \n \t/**\n \t * Returns application cache directory. Cache directory will be created on SD card\n-\t * <i>(\"/Android/data/[app_package_name]/cache\")</i> if card is mounted. Else - Android defines cache directory on\n-\t * device's file system.\n+\t * <i>(\"/Android/data/[app_package_name]/cache\")</i> if card is mounted and app has appropriate permission. Else -\n+\t * Android defines cache directory on device's file system.\n \t * \n \t * @param context Application context\n \t * @return Cache {@link File directory}\n \t */\n \tpublic static File getCacheDirectory(Context context) {\n \t\tFile appCacheDir = null;\n-\t\tif (Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED) && hasExternalPermission(context)) {\n+\t\tif (Environment.getExternalStorageState().equals(MEDIA_MOUNTED) && hasExternalStoragePermission(context)) {\n \t\t\tappCacheDir = getExternalCacheDir(context);\n \t\t}\n \t\tif (appCacheDir == null) {\n@@ -60,8 +63,8 @@ public static File getCacheDirectory(Context context) {\n \n \t/**\n \t * Returns individual application cache directory (for only image caching from ImageLoader). Cache directory will be\n-\t * created on SD card <i>(\"/Android/data/[app_package_name]/cache/uil-images\")</i> if card is mounted. Else -\n-\t * Android defines cache directory on device's file system.\n+\t * created on SD card <i>(\"/Android/data/[app_package_name]/cache/uil-images\")</i> if card is mounted and app has\n+\t * appropriate permission. Else - Android defines cache directory on device's file system.\n \t * \n \t * @param context Application context\n \t * @return Cache {@link File directory}\n@@ -79,15 +82,15 @@ public static File getIndividualCacheDirectory(Context context) {\n \n \t/**\n \t * Returns specified application cache directory. Cache directory will be created on SD card by defined path if card\n-\t * is mounted. Else - Android defines cache directory on device's file system.\n+\t * is mounted and app has appropriate permission. Else - Android defines cache directory on device's file system.\n \t * \n \t * @param context Application context\n \t * @param cacheDir Cache directory path (e.g.: \"AppCacheDir\", \"AppDir/cache/images\")\n \t * @return Cache {@link File directory}\n \t */\n \tpublic static File getOwnCacheDirectory(Context context, String cacheDir) {\n \t\tFile appCacheDir = null;\n-\t\tif (Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED) && hasExternalPermission(context)) {\n+\t\tif (Environment.getExternalStorageState().equals(MEDIA_MOUNTED) && hasExternalStoragePermission(context)) {\n \t\t\tappCacheDir = new File(Environment.getExternalStorageDirectory(), cacheDir);\n \t\t}\n \t\tif (appCacheDir == null || (!appCacheDir.exists() && !appCacheDir.mkdirs())) {\n@@ -112,11 +115,9 @@ private static File getExternalCacheDir(Context context) {\n \t\t}\n \t\treturn appCacheDir;\n \t}\n-\t\n-\tprivate static boolean hasExternalPermission(Context cxt)\n-\t{\n-\t    String permission = \"android.permission.WRITE_EXTERNAL_STORAGE\";\n-\t    int res = cxt.checkCallingOrSelfPermission(permission);\n-\t    return (res == PackageManager.PERMISSION_GRANTED);            \n+\n+\tprivate static boolean hasExternalStoragePermission(Context context) {\n+\t\tint perm = context.checkCallingOrSelfPermission(EXTERNAL_STORAGE_PERMISSION);\n+\t\treturn perm == PackageManager.PERMISSION_GRANTED;\n \t}\n }",
      "parent_sha": "95984f5620e1795a7ad2b04f75902d2e1b22259f"
    }
  },
  {
    "oid": "1f865317002715d6702f48f28ac76e6a853e713d",
    "message": "Clear redundant synchronization of uriLocks map",
    "date": "2012-11-25T10:41:16Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/1f865317002715d6702f48f28ac76e6a853e713d",
    "details": {
      "sha": "2a71646f88ca36e64b88d614b784da217b8b9f22",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/1f865317002715d6702f48f28ac76e6a853e713d/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/1f865317002715d6702f48f28ac76e6a853e713d/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=1f865317002715d6702f48f28ac76e6a853e713d",
      "patch": "@@ -54,7 +54,7 @@ public class ImageLoader {\n \tprivate BitmapDisplayer fakeBitmapDisplayer;\r\n \r\n \tprivate Map<Integer, String> cacheKeysForImageViews = Collections.synchronizedMap(new HashMap<Integer, String>());\r\n-\tprivate Map<String, ReentrantLock> uriLocks = Collections.synchronizedMap(new WeakHashMap<String, ReentrantLock>());\r\n+\tprivate Map<String, ReentrantLock> uriLocks = new WeakHashMap<String, ReentrantLock>();\r\n \r\n \tprivate volatile static ImageLoader instance;\r\n \r\n@@ -452,13 +452,11 @@ private int getFieldValue(Object object, String fieldName) {\n \t}\r\n \r\n \tprivate ReentrantLock getLockForUri(String uri) {\r\n-\t\tsynchronized (uriLocks) {\r\n-\t\t\tReentrantLock lock = uriLocks.get(uri);\r\n-\t\t\tif (lock == null) {\r\n-\t\t\t\tlock = new ReentrantLock();\r\n-\t\t\t\turiLocks.put(uri, lock);\r\n-\t\t\t}\r\n-\t\t\treturn lock;\r\n+\t\tReentrantLock lock = uriLocks.get(uri);\r\n+\t\tif (lock == null) {\r\n+\t\t\tlock = new ReentrantLock();\r\n+\t\t\turiLocks.put(uri, lock);\r\n \t\t}\r\n+\t\treturn lock;\r\n \t}\r\n }\r",
      "parent_sha": "12778d31c9cc34c91527ec80ebf6f63479bcbfbe"
    }
  },
  {
    "oid": "cf9e779dc15baef93ff5d439e7cfe0e1ede9fc93",
    "message": "Issue #2 - Field softMap in Cache visibility",
    "date": "2011-12-09T18:49:58Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/cf9e779dc15baef93ff5d439e7cfe0e1ede9fc93",
    "details": {
      "sha": "f3327d18ec4977171e6647d9460cb8d5b763366f",
      "filename": "src/com/nostra13/universalimageloader/cache/Cache.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/cf9e779dc15baef93ff5d439e7cfe0e1ede9fc93/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/cf9e779dc15baef93ff5d439e7cfe0e1ede9fc93/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FCache.java?ref=cf9e779dc15baef93ff5d439e7cfe0e1ede9fc93",
      "patch": "@@ -19,7 +19,7 @@ public abstract class Cache<K, V> {\n \t/**\r\n \t * Stores not strong references to objects.\r\n \t */\r\n-\tprotected final Map<K, Reference<V>> softMap = new HashMap<K, Reference<V>>();\r\n+\tprivate final Map<K, Reference<V>> softMap = new HashMap<K, Reference<V>>();\r\n \r\n \tpublic V get(K key) {\r\n \t\tV result = null;\r",
      "parent_sha": "a43849557a06e09741b17b047d8ee8a1844b63c8"
    }
  },
  {
    "oid": "6f39b40ff540378dd883c2e813f54e98072f95db",
    "message": "Fixed ImageSizeUtils.defineTargetSizeForView() NPE crash with standalone\nImageViews.",
    "date": "2013-05-02T23:57:10Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/6f39b40ff540378dd883c2e813f54e98072f95db",
    "details": {
      "sha": "ed6127db9e37025ea88e2562aa1f2d6874128166",
      "filename": "library/src/com/nostra13/universalimageloader/utils/ImageSizeUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/6f39b40ff540378dd883c2e813f54e98072f95db/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FImageSizeUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/6f39b40ff540378dd883c2e813f54e98072f95db/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FImageSizeUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FImageSizeUtils.java?ref=6f39b40ff540378dd883c2e813f54e98072f95db",
      "patch": "@@ -52,14 +52,14 @@ public static ImageSize defineTargetSizeForView(ImageView imageView, int maxImag\n \t\tfinal DisplayMetrics displayMetrics = imageView.getContext().getResources().getDisplayMetrics();\n \n \t\tfinal LayoutParams params = imageView.getLayoutParams();\n-\t\tint width = params.width == LayoutParams.WRAP_CONTENT ? 0 : imageView.getWidth(); // Get actual image width\n-\t\tif (width <= 0) width = params.width; // Get layout width parameter\n+\t\tint width = (params != null && params.width == LayoutParams.WRAP_CONTENT) ? 0 : imageView.getWidth(); // Get actual image width\n+\t\tif (width <= 0) width = (params != null) ? params.width : width; // Get layout width parameter\n \t\tif (width <= 0) width = getImageViewFieldValue(imageView, \"mMaxWidth\"); // Check maxWidth parameter\n \t\tif (width <= 0) width = maxImageWidth;\n \t\tif (width <= 0) width = displayMetrics.widthPixels;\n \n-\t\tint height = params.height == LayoutParams.WRAP_CONTENT ? 0 : imageView.getHeight(); // Get actual image height\n-\t\tif (height <= 0) height = params.height; // Get layout height parameter\n+\t\tint height = (params != null && params.height == LayoutParams.WRAP_CONTENT) ? 0 : imageView.getHeight(); // Get actual image height\n+\t\tif (height <= 0) height = (params != null) ?  params.height : height; // Get layout height parameter\n \t\tif (height <= 0) height = getImageViewFieldValue(imageView, \"mMaxHeight\"); // Check maxHeight parameter\n \t\tif (height <= 0) height = maxImageHeight;\n \t\tif (height <= 0) height = displayMetrics.heightPixels;",
      "parent_sha": "7f105dc6725d3156a1d9b712f00a5b32b3915beb"
    }
  },
  {
    "oid": "3acca4ab599a816d88f46d91fd4d325bf08b8c3f",
    "message": "Issue #1026 - Check markSupported()",
    "date": "2015-07-02T17:10:23Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/3acca4ab599a816d88f46d91fd4d325bf08b8c3f",
    "details": {
      "sha": "8ff05559ae2c56f009da5de5195e2386ad6dfac1",
      "filename": "library/src/main/java/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/3acca4ab599a816d88f46d91fd4d325bf08b8c3f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdecode%2FBaseImageDecoder.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/3acca4ab599a816d88f46d91fd4d325bf08b8c3f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdecode%2FBaseImageDecoder.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdecode%2FBaseImageDecoder.java?ref=3acca4ab599a816d88f46d91fd4d325bf08b8c3f",
      "patch": "@@ -174,13 +174,15 @@ protected Options prepareDecodingOptions(ImageSize imageSize, ImageDecodingInfo\n \t}\n \n \tprotected InputStream resetStream(InputStream imageStream, ImageDecodingInfo decodingInfo) throws IOException {\n-\t\ttry {\n-\t\t\timageStream.reset();\n-\t\t} catch (IOException e) {\n-\t\t\tIoUtils.closeSilently(imageStream);\n-\t\t\timageStream = getImageStream(decodingInfo);\n+\t\tif (imageStream.markSupported()) {\n+\t\t\ttry {\n+\t\t\t\timageStream.reset();\n+\t\t\t\treturn imageStream;\n+\t\t\t} catch (IOException ignored) {\n+\t\t\t}\n \t\t}\n-\t\treturn imageStream;\n+\t\tIoUtils.closeSilently(imageStream);\n+\t\treturn getImageStream(decodingInfo);\n \t}\n \n \tprotected Bitmap considerExactScaleAndOrientatiton(Bitmap subsampledBitmap, ImageDecodingInfo decodingInfo,\n@@ -247,4 +249,4 @@ protected ImageFileInfo(ImageSize imageSize, ExifInfo exif) {\n \t\t\tthis.exif = exif;\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "a91f2f33dbfd5712ae6d026540d69915029464d8"
    }
  },
  {
    "oid": "4e839dac1804f005a1d0f1aace03740a402348d0",
    "message": "Issue #81 - Stop using memory cache with weak references by default for Android < 2.3. Always use LryMemoryCache on strong references.",
    "date": "2013-12-24T22:39:51Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/4e839dac1804f005a1d0f1aace03740a402348d0",
    "details": {
      "sha": "191b74ca059824bf946993e13ef07aadf5cfcf6d",
      "filename": "library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java",
      "status": "modified",
      "additions": 8,
      "deletions": 12,
      "changes": 20,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/4e839dac1804f005a1d0f1aace03740a402348d0/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/4e839dac1804f005a1d0f1aace03740a402348d0/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java?ref=4e839dac1804f005a1d0f1aace03740a402348d0",
      "patch": "@@ -17,15 +17,13 @@\n \n import android.content.Context;\n import android.graphics.Bitmap;\n-import android.os.Build;\n import com.nostra13.universalimageloader.cache.disc.DiscCacheAware;\n import com.nostra13.universalimageloader.cache.disc.impl.FileCountLimitedDiscCache;\n import com.nostra13.universalimageloader.cache.disc.impl.TotalSizeLimitedDiscCache;\n import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;\n import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;\n import com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator;\n import com.nostra13.universalimageloader.cache.memory.MemoryCacheAware;\n-import com.nostra13.universalimageloader.cache.memory.impl.LRULimitedMemoryCache;\n import com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache;\n import com.nostra13.universalimageloader.core.assist.QueueProcessingType;\n import com.nostra13.universalimageloader.core.assist.deque.LIFOLinkedBlockingDeque;\n@@ -38,7 +36,12 @@\n import com.nostra13.universalimageloader.utils.StorageUtils;\n \n import java.io.File;\n-import java.util.concurrent.*;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n@@ -85,21 +88,14 @@ public static DiscCacheAware createReserveDiscCache(File cacheDir) {\n \t}\n \n \t/**\n-\t * Creates default implementation of {@link MemoryCacheAware} depends on incoming parameters: <br />\n-\t * {@link LruMemoryCache} (for API >= 9) or {@link LRULimitedMemoryCache} (for API < 9).<br />\n+\t * Creates default implementation of {@link MemoryCacheAware} - {@link LruMemoryCache}<br />\n \t * Default cache size = 1/8 of available app memory.\n \t */\n \tpublic static MemoryCacheAware<String, Bitmap> createMemoryCache(int memoryCacheSize) {\n \t\tif (memoryCacheSize == 0) {\n \t\t\tmemoryCacheSize = (int) (Runtime.getRuntime().maxMemory() / 8);\n \t\t}\n-\t\tMemoryCacheAware<String, Bitmap> memoryCache;\n-\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {\n-\t\t\tmemoryCache = new LruMemoryCache(memoryCacheSize);\n-\t\t} else {\n-\t\t\tmemoryCache = new LRULimitedMemoryCache(memoryCacheSize);\n-\t\t}\n-\t\treturn memoryCache;\n+\t\treturn new LruMemoryCache(memoryCacheSize);\n \t}\n \n \t/** Creates default implementation of {@link ImageDownloader} - {@link BaseImageDownloader} */",
      "parent_sha": "66ae8d31857444a35b510801f7ccdc75c4406d84"
    }
  },
  {
    "oid": "bcefb18584a7f0a0f8bc7c335a5ad1d5aa46328b",
    "message": "use Runtime.getRuntime().maxMemory() instead of memoryclass",
    "date": "2013-05-23T10:56:34Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/bcefb18584a7f0a0f8bc7c335a5ad1d5aa46328b",
    "details": {
      "sha": "74e8278cb6a44fb2271b87452dc23f4fa1b6d15c",
      "filename": "library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/bcefb18584a7f0a0f8bc7c335a5ad1d5aa46328b/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderConfiguration.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/bcefb18584a7f0a0f8bc7c335a5ad1d5aa46328b/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderConfiguration.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderConfiguration.java?ref=bcefb18584a7f0a0f8bc7c335a5ad1d5aa46328b",
      "patch": "@@ -365,15 +365,10 @@ public Builder memoryCachePercent(int memoryCachePercent) {\n                 L.w(WARNING_OVERLAP_MEMORY_CACHE);\n             }\n \n-            int memClass = ((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();\n-\n-            if (memClass == 0) {\n-                memClass = 12;\n-            }\n             if (memoryCachePercent > 80) {\n                 memoryCachePercent = 80;\n             }\n-            int capacity = (1024 * 1024 * (memClass * memoryCachePercent)) / 100;\n+            int capacity = (int) ((Runtime.getRuntime().maxMemory() * (memoryCachePercent / 100)));\n             if (capacity > 0) {\n                 this.memoryCacheSize = capacity;\n             }",
      "parent_sha": "142ac6eb7792b5585660dd62c8886538b0941d8d"
    }
  },
  {
    "oid": "d3a9f6620694cbbaa52421a693e3bced290d3a46",
    "message": "Abolished PhotoQueue class. Stack -> LinkedList",
    "date": "2011-12-09T21:52:28Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/d3a9f6620694cbbaa52421a693e3bced290d3a46",
    "details": {
      "sha": "133e531e2a301e69fceea486f0558752c8ff22d5",
      "filename": "src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 28,
      "deletions": 35,
      "changes": 63,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/d3a9f6620694cbbaa52421a693e3bced290d3a46/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/d3a9f6620694cbbaa52421a693e3bced290d3a46/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=d3a9f6620694cbbaa52421a693e3bced290d3a46",
      "patch": "@@ -9,9 +9,8 @@\n import java.net.HttpURLConnection;\r\n import java.net.MalformedURLException;\r\n import java.net.URL;\r\n-import java.util.Stack;\r\n-\r\n-import org.apache.http.HttpConnection;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n \r\n import android.app.Activity;\r\n import android.content.Context;\r\n@@ -38,7 +37,7 @@ public final class ImageLoader {\n \tprivate final Cache<String, Bitmap> bitmapCache = new ImageCache(Constants.MEMORY_CACHE_SIZE);\r\n \tprivate final File cacheDir;\r\n \r\n-\tprivate final PhotosQueue photosQueue = new PhotosQueue();\r\n+\tprivate final List<PhotoToLoad> photoToLoadQueue = new LinkedList<ImageLoader.PhotoToLoad>();\r\n \tprivate final PhotosLoader photoLoaderThread = new PhotosLoader();\r\n \tprivate final DisplayImageOptions defaultOptions = DisplayImageOptions.createSimple();\r\n \r\n@@ -136,20 +135,20 @@ private void queuePhoto(PhotoToLoad photoToLoad) {\n \t\t}\r\n \r\n \t\t// This ImageView may be used for other images before. So there may be some old tasks in the queue. We need to discard them.\r\n-\t\tphotosQueue.clean(photoToLoad.imageView);\r\n+\t\tremoveFromQueue(photoToLoad.imageView);\r\n \r\n-\t\t// If image was cached on disc we push load image task onto the top of the stack. \r\n-\t\t// If not - we push load image task to the bottom of the stack.\r\n-\t\t// Images are loaded from the top of the stack. So it will reduce the time of waiting \r\n+\t\t// If image was cached on disc we put load image task in front of the queue. \r\n+\t\t// If not - we put load image task in the end of the queue.\r\n+\t\t// Images are loaded from the queue beginning. So it will reduce the time of waiting \r\n \t\t// to display cached images (they will be displayed first)\r\n \t\tboolean isCachedOnDisc = isCachedOnDisc(photoToLoad.url);\r\n-\t\tsynchronized (photosQueue.photosToLoad) {\r\n+\t\tsynchronized (photoToLoadQueue) {\r\n \t\t\tif (isCachedOnDisc) {\r\n-\t\t\t\tphotosQueue.photosToLoad.push(photoToLoad);\r\n+\t\t\t\tphotoToLoadQueue.add(0, photoToLoad);\r\n \t\t\t} else {\r\n-\t\t\t\tphotosQueue.photosToLoad.add(0, photoToLoad);\r\n+\t\t\t\tphotoToLoadQueue.add(photoToLoad);\r\n \t\t\t}\r\n-\t\t\tphotosQueue.photosToLoad.notifyAll();\r\n+\t\t\tphotoToLoadQueue.notifyAll();\r\n \t\t}\r\n \r\n \t\t// Start thread if it's not started yet\r\n@@ -175,6 +174,17 @@ private File getLocalImageFile(String imageUrl) {\n \t\treturn new File(cacheDir, fileName);\r\n \t}\r\n \r\n+\t// Removes all instances of this ImageView\r\n+\tpublic void removeFromQueue(ImageView image) {\r\n+\t\tfor (int j = 0; j < photoToLoadQueue.size();) {\r\n+\t\t\tif (photoToLoadQueue.get(j).imageView == image) {\r\n+\t\t\t\tphotoToLoadQueue.remove(j);\r\n+\t\t\t} else {\r\n+\t\t\t\t++j;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n \tprivate Bitmap getBitmap(String imageUrl, ImageSize targetImageSize, boolean cacheImageOnDisc) {\r\n \t\tFile f = getLocalImageFile(imageUrl);\r\n \r\n@@ -298,23 +308,6 @@ public PhotoToLoad(String url, ImageView imageView, DisplayImageOptions options,\n \t\t}\r\n \t}\r\n \r\n-\t/** Stores list of images to download */\r\n-\tclass PhotosQueue {\r\n-\r\n-\t\tprivate final Stack<PhotoToLoad> photosToLoad = new Stack<PhotoToLoad>();\r\n-\r\n-\t\t// Removes all instances of this ImageView\r\n-\t\tpublic void clean(ImageView image) {\r\n-\t\t\tfor (int j = 0; j < photosToLoad.size();) {\r\n-\t\t\t\tif (photosToLoad.get(j).imageView == image) {\r\n-\t\t\t\t\tphotosToLoad.remove(j);\r\n-\t\t\t\t} else {\r\n-\t\t\t\t\t++j;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t}\r\n-\r\n \tclass PhotosLoader extends Thread {\r\n \t\t@Override\r\n \t\tpublic void run() {\r\n@@ -323,14 +316,14 @@ public void run() {\n \t\t\t\tBitmap bmp = null;\r\n \t\t\t\ttry {\r\n \t\t\t\t\t// thread waits until there are any images to load in the queue\r\n-\t\t\t\t\tif (photosQueue.photosToLoad.isEmpty()) {\r\n-\t\t\t\t\t\tsynchronized (photosQueue.photosToLoad) {\r\n-\t\t\t\t\t\t\tphotosQueue.photosToLoad.wait();\r\n+\t\t\t\t\tif (photoToLoadQueue.isEmpty()) {\r\n+\t\t\t\t\t\tsynchronized (photoToLoadQueue) {\r\n+\t\t\t\t\t\t\tphotoToLoadQueue.wait();\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n-\t\t\t\t\tif (!photosQueue.photosToLoad.isEmpty()) {\r\n-\t\t\t\t\t\tsynchronized (photosQueue.photosToLoad) {\r\n-\t\t\t\t\t\t\tphotoToLoad = photosQueue.photosToLoad.pop();\r\n+\t\t\t\t\tif (!photoToLoadQueue.isEmpty()) {\r\n+\t\t\t\t\t\tsynchronized (photoToLoadQueue) {\r\n+\t\t\t\t\t\t\tphotoToLoad = photoToLoadQueue.remove(0);\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n \r",
      "parent_sha": "0daf326ed07f00ac52bf84e277cf9f2a7794498d"
    }
  },
  {
    "oid": "94c527f58420a1d0316e9b8ec73bbaa4d6e04052",
    "message": "Sample: Removed wrong URLs",
    "date": "2014-02-04T22:39:51Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/94c527f58420a1d0316e9b8ec73bbaa4d6e04052",
    "details": {
      "sha": "58132f5b413013d7b4efe22f00618b296a02b2ad",
      "filename": "sample/src/com/nostra13/example/universalimageloader/Constants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/94c527f58420a1d0316e9b8ec73bbaa4d6e04052/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FConstants.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/94c527f58420a1d0316e9b8ec73bbaa4d6e04052/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FConstants.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FConstants.java?ref=94c527f58420a1d0316e9b8ec73bbaa4d6e04052",
      "patch": "@@ -22,6 +22,7 @@ public final class Constants {\n \n \tpublic static final String[] IMAGES = new String[] {\n \t\t\t// Heavy images\n+            \"http://image.donga.com/mlbpark/fileUpload/201401/52dde15113c53b01da3b.jpg\",\n \t\t\t\"https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s1024/A%252520Photographer.jpg\",\n \t\t\t\"https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s1024/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg\",\n \t\t\t\"https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s1024/Another%252520Rockaway%252520Sunset.jpg\",\n@@ -124,8 +125,6 @@ public final class Constants {\n \t\t\t// Light images\n \t\t\t\"http://tabletpcssource.com/wp-content/uploads/2011/05/android-logo.png\",\n \t\t\t\"http://simpozia.com/pages/images/stories/windows-icon.png\",\n-\t\t\t\"https://si0.twimg.com/profile_images/1135218951/gmail_profile_icon3_normal.png\",\n-\t\t\t\"http://www.krify.net/wp-content/uploads/2011/09/Macromedia_Flash_dock_icon.png\",\n \t\t\t\"http://radiotray.sourceforge.net/radio.png\",\n \t\t\t\"http://www.bandwidthblog.com/wp-content/uploads/2011/11/twitter-logo.png\",\n \t\t\t\"http://weloveicons.s3.amazonaws.com/icons/100907_itunes1.png\",",
      "parent_sha": "45e5f67683430d55b5a6ea65130307d6b45ded67"
    }
  },
  {
    "oid": "a8134e9d18332b145e6cc7ec6b4f4437abeb6e85",
    "message": "Return mistakenly replaced weak reference",
    "date": "2011-12-08T08:00:12Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/a8134e9d18332b145e6cc7ec6b4f4437abeb6e85",
    "details": {
      "sha": "953e608c618cca2b21a19477b6f17a4d9ec6c378",
      "filename": "src/com/nostra13/universalimageloader/cache/ImageCache.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/a8134e9d18332b145e6cc7ec6b4f4437abeb6e85/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FImageCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/a8134e9d18332b145e6cc7ec6b4f4437abeb6e85/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FImageCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2FImageCache.java?ref=a8134e9d18332b145e6cc7ec6b4f4437abeb6e85",
      "patch": "@@ -1,7 +1,7 @@\n package com.nostra13.universalimageloader.cache;\n \n import java.lang.ref.Reference;\n-import java.lang.ref.SoftReference;\n+import java.lang.ref.WeakReference;\n \n import android.graphics.Bitmap;\n \n@@ -31,6 +31,6 @@ protected int getSizeLimit() {\n \n \t@Override\n \tprotected Reference<Bitmap> createReference(Bitmap value) {\n-\t\treturn new SoftReference<Bitmap>(value);\n+\t\treturn new WeakReference<Bitmap>(value);\n \t}\n }",
      "parent_sha": "5c7daad2b1401d84ffb9c376b1bab061184e1e0f"
    }
  },
  {
    "oid": "dcb5e7982e71f76bf5aac5830e18c713839ff478",
    "message": "  Issue #440 - Thread pool threads  should use proper names",
    "date": "2013-11-17T20:29:22Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/dcb5e7982e71f76bf5aac5830e18c713839ff478",
    "details": {
      "sha": "9e23724fef674b6f236409384f44ce1945064d26",
      "filename": "library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/dcb5e7982e71f76bf5aac5830e18c713839ff478/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/dcb5e7982e71f76bf5aac5830e18c713839ff478/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FDefaultConfigurationFactory.java?ref=dcb5e7982e71f76bf5aac5830e18c713839ff478",
      "patch": "@@ -136,9 +136,10 @@ private static class DefaultThreadFactory implements ThreadFactory {\n \t\t\tthis.threadPriority = threadPriority;\n \t\t\tSecurityManager s = System.getSecurityManager();\n \t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t\tnamePrefix = \"pool-\" + poolNumber.getAndIncrement() + \"-thread-\";\n+\t\t\tnamePrefix = \"uil-pool-\" + poolNumber.getAndIncrement() + \"-thread-\";\n \t\t}\n \n+\t\t@Override\n \t\tpublic Thread newThread(Runnable r) {\n \t\t\tThread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);\n \t\t\tif (t.isDaemon()) t.setDaemon(false);",
      "parent_sha": "beb466a38c12d696f4dbf13c5943c67dab913f41"
    }
  },
  {
    "oid": "022f4e22082d375d3b8487d2560aae519e6b5b6a",
    "message": "ILC.memoryCachePercent() -> memoryCacheSizePercentage(), refactored\nmethod",
    "date": "2013-06-26T21:02:24Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/022f4e22082d375d3b8487d2560aae519e6b5b6a",
    "details": {
      "sha": "0058f5c8abf39869da237c9727be99373614b2d9",
      "filename": "library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java",
      "status": "modified",
      "additions": 21,
      "deletions": 24,
      "changes": 45,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/022f4e22082d375d3b8487d2560aae519e6b5b6a/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderConfiguration.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/022f4e22082d375d3b8487d2560aae519e6b5b6a/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderConfiguration.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoaderConfiguration.java?ref=022f4e22082d375d3b8487d2560aae519e6b5b6a",
      "patch": "@@ -349,30 +349,27 @@ public Builder memoryCacheSize(int memoryCacheSize) {\n \t\t\treturn this;\n \t\t}\n \n-        /**\n-         * Sets maximum memory cache size percent in system memory for {@link android.graphics.Bitmap bitmaps} (in bytes).<br />\n-         * Default value - 1/8 of available app memory.<br />\n-         * <b>NOTE:</b> If you use this method then\n-         * {@link com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache LruMemoryCache} will be used as\n-         * memory cache. You can use {@link #memoryCache(MemoryCacheAware)} method to set your own implementation of\n-         * {@link MemoryCacheAware}.\n-         */\n-        public Builder memoryCachePercent(int memoryCachePercent) {\n-            if (memoryCachePercent <= 0) throw new IllegalArgumentException(\"memoryCacheSize must be a positive number\");\n-\n-            if (memoryCache != null) {\n-                L.w(WARNING_OVERLAP_MEMORY_CACHE);\n-            }\n-\n-            if (memoryCachePercent > 80) {\n-                memoryCachePercent = 80;\n-            }\n-            int capacity = (int) ((Runtime.getRuntime().maxMemory() * (memoryCachePercent / 100f)));\n-            if (capacity > 0) {\n-                this.memoryCacheSize = capacity;\n-            }\n-            return this;\n-        }\n+\t\t/**\n+\t\t * Sets maximum memory cache size (in percent of available app memory) for {@link android.graphics.Bitmap\n+\t\t * bitmaps}.<br />\n+\t\t * Default value - 1/8 of available app memory.<br />\n+\t\t * <b>NOTE:</b> If you use this method then\n+\t\t * {@link com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache LruMemoryCache} will be used as\n+\t\t * memory cache. You can use {@link #memoryCache(MemoryCacheAware)} method to set your own implementation of\n+\t\t * {@link MemoryCacheAware}.\n+\t\t */\n+\t\tpublic Builder memoryCacheSizePercentage(int avaialbleMemoryPercent) {\n+\t\t\tif (avaialbleMemoryPercent <= 0 || avaialbleMemoryPercent >= 100)\n+\t\t\t\tthrow new IllegalArgumentException(\"avaialbleMemoryPercent must be in range (0 < % < 100)\");\n+\n+\t\t\tif (memoryCache != null) {\n+\t\t\t\tL.w(WARNING_OVERLAP_MEMORY_CACHE);\n+\t\t\t}\n+\n+\t\t\tlong availableMemory = Runtime.getRuntime().maxMemory();\n+\t\t\tmemoryCacheSize = (int) (availableMemory * (avaialbleMemoryPercent / 100f));\n+\t\t\treturn this;\n+\t\t}\n \n \t\t/**\n \t\t * Sets memory cache for {@link android.graphics.Bitmap bitmaps}.<br />",
      "parent_sha": "e67fe18461a796fd98d62b3f7410e89bf737a0a5"
    }
  },
  {
    "oid": "7637abf7df1394f71dbc04644be86791959d1313",
    "message": "#511 - Prevent broken image files, load into temp file first",
    "date": "2014-02-13T22:24:54Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/7637abf7df1394f71dbc04644be86791959d1313",
    "details": {
      "sha": "55acd051942c5fa88347f89c46381a002c14b6de",
      "filename": "library/src/com/nostra13/universalimageloader/cache/disc/impl/BaseDiscCache.java",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/7637abf7df1394f71dbc04644be86791959d1313/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2FBaseDiscCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/7637abf7df1394f71dbc04644be86791959d1313/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2FBaseDiscCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2FBaseDiscCache.java?ref=7637abf7df1394f71dbc04644be86791959d1313",
      "patch": "@@ -44,6 +44,8 @@ public class BaseDiscCache implements DiscCacheAware {\n \t/** {@value */\n \tpublic static final int DEFAULT_COMPRESS_QUALITY = 100;\n \n+\tprivate static final String TEMP_IMAGE_POSTFIX = \".tmp\";\n+\n \tprivate static final String ERROR_ARG_NULL = \"\\\"%s\\\" argument must be not null\";\n \n \tprotected final File cacheDir;\n@@ -101,18 +103,22 @@ public File get(String imageUri) {\n \t@Override\n \tpublic boolean save(String imageUri, InputStream imageStream, IoUtils.CopyListener listener) throws IOException {\n \t\tFile imageFile = getFile(imageUri);\n+\t\tFile tmpFile = new File(imageFile.getAbsolutePath() + TEMP_IMAGE_POSTFIX);\n \t\tboolean loaded = false;\n \t\ttry {\n-\t\t\tOutputStream os = new BufferedOutputStream(new FileOutputStream(imageFile), bufferSize);\n+\t\t\tOutputStream os = new BufferedOutputStream(new FileOutputStream(tmpFile), bufferSize);\n \t\t\ttry {\n \t\t\t\tloaded = IoUtils.copyStream(imageStream, os, listener, bufferSize);\n \t\t\t} finally {\n \t\t\t\tIoUtils.closeSilently(os);\n \t\t\t}\n \t\t} finally {\n \t\t\tIoUtils.closeSilently(imageStream);\n+\t\t\tif (loaded && !tmpFile.renameTo(imageFile)) {\n+\t\t\t\tloaded = false;\n+\t\t\t}\n \t\t\tif (!loaded) {\n-\t\t\t\timageFile.delete();\n+\t\t\t\ttmpFile.delete();\n \t\t\t}\n \t\t}\n \t\treturn loaded;\n@@ -121,12 +127,19 @@ public boolean save(String imageUri, InputStream imageStream, IoUtils.CopyListen\n \t@Override\n \tpublic boolean save(String imageUri, Bitmap bitmap) throws IOException {\n \t\tFile imageFile = getFile(imageUri);\n-\t\tOutputStream os = new BufferedOutputStream(new FileOutputStream(imageFile), bufferSize);\n-\t\tboolean savedSuccessfully;\n+\t\tFile tmpFile = new File(imageFile.getAbsolutePath() + TEMP_IMAGE_POSTFIX);\n+\t\tOutputStream os = new BufferedOutputStream(new FileOutputStream(tmpFile), bufferSize);\n+\t\tboolean savedSuccessfully = false;\n \t\ttry {\n \t\t\tsavedSuccessfully = bitmap.compress(compressFormat, compressQuality, os);\n \t\t} finally {\n \t\t\tIoUtils.closeSilently(os);\n+\t\t\tif (savedSuccessfully && !tmpFile.renameTo(imageFile)) {\n+\t\t\t\tsavedSuccessfully = false;\n+\t\t\t}\n+\t\t\tif (!savedSuccessfully) {\n+\t\t\t\ttmpFile.delete();\n+\t\t\t}\n \t\t}\n \t\tbitmap.recycle();\n \t\treturn savedSuccessfully;",
      "parent_sha": "9ad887a19a575e2edcde24e44f5bde940f6c1833"
    }
  },
  {
    "oid": "2b13bdda219bd2bb5abb231beb3279847d763f92",
    "message": "Fixed LruDiscCache: close steam, recreate cache after delete().",
    "date": "2014-02-17T22:07:54Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/2b13bdda219bd2bb5abb231beb3279847d763f92",
    "details": {
      "sha": "69f0c6ea88b5c02c5ca9f92b9bdc650e9e99f9b1",
      "filename": "library/src/com/nostra13/universalimageloader/cache/disc/impl/LruDiscCache.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/2b13bdda219bd2bb5abb231beb3279847d763f92/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2FLruDiscCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/2b13bdda219bd2bb5abb231beb3279847d763f92/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2FLruDiscCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2Fimpl%2FLruDiscCache.java?ref=2b13bdda219bd2bb5abb231beb3279847d763f92",
      "patch": "@@ -23,7 +23,7 @@ public class LruDiscCache implements DiscCacheAware {\n \t/** {@value */\n \tpublic static final int DEFAULT_COMPRESS_QUALITY = 100;\n \n-\tprivate static final String ERROR_ARG_NULL = \"\\\"%s\\\" argument must be not null\";\n+\tprivate static final String ERROR_ARG_NULL = \" argument must be not null\";\n \n \tprivate DiskLruCache cache;\n \n@@ -48,7 +48,7 @@ public LruDiscCache(File cacheDir, int cacheMaxSize, FileNameGenerator fileNameG\n \n \t\tthis.fileNameGenerator = fileNameGenerator;\n \t\ttry {\n-\t\t\tthis.cache = DiskLruCache.open(cacheDir, 1, 1, cacheMaxSize);\n+\t\t\tcache = DiskLruCache.open(cacheDir, 1, 1, cacheMaxSize);\n \t\t} catch (IOException e) {\n \t\t\tL.e(e);\n \t\t}\n@@ -78,7 +78,12 @@ public boolean save(String imageUri, InputStream imageStream, IoUtils.CopyListen\n \t\t}\n \n \t\tOutputStream os = new BufferedOutputStream(editor.newOutputStream(0), bufferSize);\n-\t\tboolean copied = IoUtils.copyStream(imageStream, os, listener, bufferSize);\n+\t\tboolean copied;\n+\t\ttry {\n+\t\t\tcopied = IoUtils.copyStream(imageStream, os, listener, bufferSize);\n+\t\t} finally {\n+\t\t\tIoUtils.closeSilently(os);\n+\t\t}\n \t\teditor.commit();\n \t\treturn copied;\n \t}\n@@ -119,6 +124,7 @@ public boolean remove(String imageUri) {\n \tpublic void clear() {\n \t\ttry {\n \t\t\tcache.delete();\n+\t\t\tcache = DiskLruCache.open(cache.getDirectory(), 1, 1, cache.getMaxSize());\n \t\t} catch (IOException e) {\n \t\t\tL.e(e);\n \t\t}",
      "parent_sha": "c6aeeba89ba9020d26dbb956a54ec193967e75c3"
    }
  },
  {
    "oid": "0d6162c848b967bdf563ea61bdde5d1e51aa4d83",
    "message": "Update ImageDownloader.java\n\nAdded an schema to support video of sdcard and it will be used to get video thumnail from the sdcard video path i.e. /storage/emulated/0/Video/VID_20141015_184740.mp4 or video of any folder",
    "date": "2014-10-16T05:22:07Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/0d6162c848b967bdf563ea61bdde5d1e51aa4d83",
    "details": {
      "sha": "764ff1ce1d6ab562fe03876dcae4aec50e149b8d",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/ImageDownloader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/0d6162c848b967bdf563ea61bdde5d1e51aa4d83/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/0d6162c848b967bdf563ea61bdde5d1e51aa4d83/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FImageDownloader.java?ref=0d6162c848b967bdf563ea61bdde5d1e51aa4d83",
      "patch": "@@ -43,7 +43,7 @@ public interface ImageDownloader {\n \n \t/** Represents supported schemes(protocols) of URI. Provides convenient methods for work with schemes and URIs. */\n \tpublic enum Scheme {\n-\t\tHTTP(\"http\"), HTTPS(\"https\"), FILE(\"file\"), CONTENT(\"content\"), ASSETS(\"assets\"), DRAWABLE(\"drawable\"), UNKNOWN(\"\");\n+\t\tHTTP(\"http\"), HTTPS(\"https\"), FILE(\"file\"), CONTENT(\"content\"), ASSETS(\"assets\"), DRAWABLE(\"drawable\"), VIDEO(\"video\"), UNKNOWN(\"\");\n \n \t\tprivate String scheme;\n \t\tprivate String uriPrefix;",
      "parent_sha": "b9f10064768707bbdc3c0e27ec5e0ac62bcc533e"
    }
  },
  {
    "oid": "1f469de63cb2eff85f2f983d0fbf1a539b9a3f98",
    "message": "Issue #636 - Fixed loadImageSync(...) (caching on disk didn't work)",
    "date": "2014-05-31T19:58:46Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/1f469de63cb2eff85f2f983d0fbf1a539b9a3f98",
    "details": {
      "sha": "24cbc497f2ca9b39250f2e4048194944746eae83",
      "filename": "library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/1f469de63cb2eff85f2f983d0fbf1a539b9a3f98/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/1f469de63cb2eff85f2f983d0fbf1a539b9a3f98/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java?ref=1f469de63cb2eff85f2f983d0fbf1a539b9a3f98",
      "patch": "@@ -321,12 +321,12 @@ private boolean resizeAndSaveImage(int maxWidth, int maxHeight) throws IOExcepti\n \n \t@Override\n \tpublic boolean onBytesCopied(int current, int total) {\n-\t\treturn fireProgressEvent(current, total);\n+\t\treturn syncLoading || fireProgressEvent(current, total);\n \t}\n \n \t/** @return <b>true</b> - if loading should be continued; <b>false</b> - if loading should be interrupted */\n \tprivate boolean fireProgressEvent(final int current, final int total) {\n-\t\tif (syncLoading || isTaskInterrupted() || isTaskNotActual()) return false;\n+\t\tif (isTaskInterrupted() || isTaskNotActual()) return false;\n \t\tif (progressListener != null) {\n \t\t\tRunnable r = new Runnable() {\n \t\t\t\t@Override",
      "parent_sha": "3e9f9ad2138dfee51efda469e9cc8888c4a50d79"
    }
  },
  {
    "oid": "8f36a417b17224753bc47581e80ddaab04bfece1",
    "message": "Issue #265 - ConcurrentModificationException in LruMemoryCache",
    "date": "2013-05-16T20:41:20Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/8f36a417b17224753bc47581e80ddaab04bfece1",
    "details": {
      "sha": "1acada2ce303937b7d9fe075eb4f6c9b8f797369",
      "filename": "library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/8f36a417b17224753bc47581e80ddaab04bfece1/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2Fimpl%2FLruMemoryCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/8f36a417b17224753bc47581e80ddaab04bfece1/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2Fimpl%2FLruMemoryCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fmemory%2Fimpl%2FLruMemoryCache.java?ref=8f36a417b17224753bc47581e80ddaab04bfece1",
      "patch": "@@ -121,7 +121,9 @@ public final void remove(String key) {\n \n \t@Override\n \tpublic Collection<String> keys() {\n-\t\treturn new HashSet<String>(map.keySet());\n+\t\tsynchronized (this) {\n+\t\t\treturn new HashSet<String>(map.keySet());\n+\t\t}\n \t}\n \n \t@Override",
      "parent_sha": "7f105dc6725d3156a1d9b712f00a5b32b3915beb"
    }
  },
  {
    "oid": "0d00ffe1bc9400c19899ff76b15bdaf15fb5c6d7",
    "message": "Special logic for Contact photos",
    "date": "2014-03-19T20:20:43Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/0d00ffe1bc9400c19899ff76b15bdaf15fb5c6d7",
    "details": {
      "sha": "8e48fe1f7f055b8751693faebda23a5d9496c0a7",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/0d00ffe1bc9400c19899ff76b15bdaf15fb5c6d7/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/0d00ffe1bc9400c19899ff76b15bdaf15fb5c6d7/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java?ref=0d00ffe1bc9400c19899ff76b15bdaf15fb5c6d7",
      "patch": "@@ -21,6 +21,7 @@\n import android.graphics.Bitmap.CompressFormat;\n import android.graphics.drawable.BitmapDrawable;\n import android.net.Uri;\n+import android.provider.ContactsContract;\n import com.nostra13.universalimageloader.core.DisplayImageOptions;\n import com.nostra13.universalimageloader.core.assist.ContentLengthInputStream;\n import com.nostra13.universalimageloader.utils.IoUtils;\n@@ -58,6 +59,8 @@ public class BaseImageDownloader implements ImageDownloader {\n \n \tprotected static final int MAX_REDIRECT_COUNT = 5;\n \n+\tprotected  static final String CONTENT_CONTACTS_URI_PREFIX = \"content://com.android.contacts/\";\n+\n \tprivate static final String ERROR_UNSUPPORTED_SCHEME = \"UIL doesn't support scheme(protocol) by default [%s]. \"\n \t\t\t+ \"You should implement this support yourself (BaseImageDownloader.getStreamFromOtherSource(...))\";\n \n@@ -157,7 +160,7 @@ protected HttpURLConnection createConnection(String url, Object extra) throws IO\n \tprotected InputStream getStreamFromFile(String imageUri, Object extra) throws IOException {\n \t\tString filePath = Scheme.FILE.crop(imageUri);\n \t\treturn new ContentLengthInputStream(new BufferedInputStream(new FileInputStream(filePath), BUFFER_SIZE),\n-\t\t\t\tnew File(filePath).length());\n+\t\t\t\t(int) new File(filePath).length());\n \t}\n \n \t/**\n@@ -172,7 +175,11 @@ protected InputStream getStreamFromFile(String imageUri, Object extra) throws IO\n \tprotected InputStream getStreamFromContent(String imageUri, Object extra) throws FileNotFoundException {\n \t\tContentResolver res = context.getContentResolver();\n \t\tUri uri = Uri.parse(imageUri);\n-\t\treturn res.openInputStream(uri);\n+\t\tif (imageUri.startsWith(CONTENT_CONTACTS_URI_PREFIX)) {\n+\t\t\treturn ContactsContract.Contacts.openContactPhotoInputStream(res, uri);\n+\t\t} else {\n+\t\t\treturn res.openInputStream(uri);\n+\t\t}\n \t}\n \n \t/**",
      "parent_sha": "aa9117ca86ac28bbb0a7cc76a8273ab77c909a69"
    }
  },
  {
    "oid": "9be540f97ad91be5a89cacae04429a7db8ca16cd",
    "message": "Corrected comments",
    "date": "2011-12-10T16:47:27Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/9be540f97ad91be5a89cacae04429a7db8ca16cd",
    "details": {
      "sha": "94ceb8601dc9cc1067b5947ed8fe7ac238d80b5f",
      "filename": "src/com/nostra13/universalimageloader/Constants.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/9be540f97ad91be5a89cacae04429a7db8ca16cd/src%2Fcom%2Fnostra13%2Funiversalimageloader%2FConstants.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/9be540f97ad91be5a89cacae04429a7db8ca16cd/src%2Fcom%2Fnostra13%2Funiversalimageloader%2FConstants.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2FConstants.java?ref=9be540f97ad91be5a89cacae04429a7db8ca16cd",
      "patch": "@@ -18,9 +18,9 @@ private Constants() {\n \r\n \tpublic static final int STUB_IMAGE = R.drawable.stub_image;\r\n \tpublic static final int TAG_KEY = R.id.tag_image_loader;\r\n-\tpublic static final int MEMORY_CACHE_SIZE = 2000000; // 2 Mb\r\n-\tpublic static final int THREAD_POOL_SIZE = 5;\r\n+\tpublic static final int MEMORY_CACHE_SIZE = 2000000; // bytes\r\n+\tpublic static final int THREAD_POOL_SIZE = 3; \r\n \r\n-\tpublic static final int HTTP_CONNECT_TIMEOUT = 20000; // 20 s\r\n-\tpublic static final int HTTP_READ_TIMEOUT = 30000; // 30 s\r\n+\tpublic static final int HTTP_CONNECT_TIMEOUT = 5000; // milliseconds\r\n+\tpublic static final int HTTP_READ_TIMEOUT = 20000; // milliseconds\r\n }\r",
      "parent_sha": "24c55dd1e9d6685429345d0bd3f1cb06a57c0898"
    }
  },
  {
    "oid": "d5325debaab63d5a878ebd71b9a5aeca89960a14",
    "message": "Issue #17 - ImageLoader log message not formatted",
    "date": "2012-02-02T19:34:37Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/d5325debaab63d5a878ebd71b9a5aeca89960a14",
    "details": {
      "sha": "fe5155688196b7db0339d2cde58639214b2ef391",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/d5325debaab63d5a878ebd71b9a5aeca89960a14/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/d5325debaab63d5a878ebd71b9a5aeca89960a14/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=d5325debaab63d5a878ebd71b9a5aeca89960a14",
      "patch": "@@ -190,7 +190,7 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op\n \r\n \t\tBitmap bmp = configuration.memoryCache.get(memoryCacheKey);\r\n \t\tif (bmp != null && !bmp.isRecycled()) {\r\n-\t\t\tLog.i(TAG, LOG_LOAD_IMAGE_FROM_MEMORY_CACHE);\r\n+\t\t\tLog.i(TAG, String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey));\r\n \t\t\timageView.setImageBitmap(bmp);\r\n \t\t} else {\r\n \t\t\tlistener.onLoadingStarted();\r",
      "parent_sha": "eadff1445250bf860cc5da62f5523220b6f482bb"
    }
  },
  {
    "oid": "c7c48137fdb3d7a10d2d3e2ac5aa67a295986661",
    "message": "Simplify example",
    "date": "2011-12-15T20:27:27Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/c7c48137fdb3d7a10d2d3e2ac5aa67a295986661",
    "details": {
      "sha": "8c9b3e1b6cb88d339a3e3ad1be0f803fc6c54d32",
      "filename": "UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/UILActivity.java",
      "status": "modified",
      "additions": 11,
      "deletions": 15,
      "changes": 26,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/c7c48137fdb3d7a10d2d3e2ac5aa67a295986661/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FUILActivity.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/c7c48137fdb3d7a10d2d3e2ac5aa67a295986661/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FUILActivity.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoaderExample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FUILActivity.java?ref=c7c48137fdb3d7a10d2d3e2ac5aa67a295986661",
      "patch": "@@ -1,6 +1,5 @@\n package com.nostra13.example.universalimageloader;\n \n-import java.io.File;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n@@ -17,17 +16,16 @@\n import android.widget.ListView;\n import android.widget.TextView;\n \n-import com.nostra13.universalimageloader.cache.disc.impl.DefaultDiscCache;\n-import com.nostra13.universalimageloader.cache.memory.impl.FIFOLimitedCache;\n import com.nostra13.universalimageloader.imageloader.DisplayImageOptions;\n import com.nostra13.universalimageloader.imageloader.ImageLoader;\n import com.nostra13.universalimageloader.imageloader.ImageLoaderConfiguration;\n import com.nostra13.universalimageloader.imageloader.ImageLoadingListener;\n-import com.nostra13.universalimageloader.utils.StorageUtils;\n \n /** Activity for {@link ImageLoader} testing */\n public class UILActivity extends ListActivity {\n \n+\tprivate static final int IMAGE_LOADER_THREAD_POOL_SIZE = 3;\n+\t\n \tpublic ImageLoader imageLoader;\n \n \t@Override\n@@ -36,21 +34,15 @@ public void onCreate(Bundle savedInstanceState) {\n \t\tsetContentView(R.layout.main);\n \n \t\tDisplayMetrics displayMetrics = getApplicationContext().getResources().getDisplayMetrics();\n-\t\tFile cacheDir = StorageUtils.getCacheDirectory(getApplicationContext(), \"UniversalImageLoader/Cache\");\n \n-\t\t// This configuration tuning is full. You don't have to tune every option. \n-\t\t// You may tune some of them or create default configuration by \n+\t\t// This configuration tuning is custom. You can tune every option, you may tune some of them, \n+\t\t// or you can create default configuration by\n \t\t//  ImageLoaderConfiguration.createDefault()\n \t\t// method.\n \t\tImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())\n \t\t\t.maxImageWidthForMemoryCache(displayMetrics.widthPixels)\n \t\t\t.maxImageHeightForMemoryCache(displayMetrics.heightPixels)\n-\t\t\t.httpConnectTimeout(5000)\n-\t\t\t.httpReadTimeout(30000)\n-\t\t\t.threadPoolSize(5)\n-\t\t\t.memoryCache(new FIFOLimitedCache(2000000))\n-\t\t\t.discCache(new DefaultDiscCache(cacheDir))\n-\t\t\t.defaultDisplayImageOptions(DisplayImageOptions.createSimple())\n+\t\t\t.threadPoolSize(IMAGE_LOADER_THREAD_POOL_SIZE)\n \t\t\t.build();\n \t\timageLoader = ImageLoader.getInstance(config);\n \n@@ -127,12 +119,16 @@ public View getView(final int position, View convertView, ViewGroup parent) {\n \t\t\t\tholder = (ViewHolder) view.getTag();\n \n \t\t\tholder.text.setText(\"Item \" + position);\n-\t\t\t\n+\n \t\t\t// Full \"displayImage\" method using.\n \t\t\t// You can use simple call:\n \t\t\t//  imageLoader.displayImage(imageUrls.get(position), holder.image);\n \t\t\t// instead of.\n-\t\t\tDisplayImageOptions options = new DisplayImageOptions.Builder().showStubImage(R.drawable.stub_image).cacheInMemory().cacheOnDisc().build();\n+\t\t\tDisplayImageOptions options = new DisplayImageOptions.Builder()\n+\t\t\t\t.showStubImage(R.drawable.stub_image)\n+\t\t\t\t.cacheInMemory()\n+\t\t\t\t.cacheOnDisc()\n+\t\t\t\t.build();\n \t\t\timageLoader.displayImage(imageUrls.get(position), holder.image, options, new ImageLoadingListener() {\n \t\t\t\t@Override\n \t\t\t\tpublic void onLoadingStarted() {",
      "parent_sha": "d4501709e196bbf5ef3c2b6fb51bb7b19989e22c"
    }
  },
  {
    "oid": "54a9038d7cc13fd46a922ce1c059610d0690115d",
    "message": "Issue #660 - Catch Android NPE in Environment.getExternalStorageState()",
    "date": "2014-07-08T14:49:03Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/54a9038d7cc13fd46a922ce1c059610d0690115d",
    "details": {
      "sha": "ac57eefece6b633a2771e5acf0edc17bdcfdc517",
      "filename": "library/src/com/nostra13/universalimageloader/utils/StorageUtils.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/54a9038d7cc13fd46a922ce1c059610d0690115d/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/54a9038d7cc13fd46a922ce1c059610d0690115d/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Futils%2FStorageUtils.java?ref=54a9038d7cc13fd46a922ce1c059610d0690115d",
      "patch": "@@ -65,8 +65,13 @@ public static File getCacheDirectory(Context context) {\n \t */\n \tpublic static File getCacheDirectory(Context context, boolean preferExternal) {\n \t\tFile appCacheDir = null;\n-\t\tif (preferExternal && MEDIA_MOUNTED\n-\t\t\t\t.equals(Environment.getExternalStorageState()) && hasExternalStoragePermission(context)) {\n+\t\tString externalStorageState;\n+\t\ttry {\n+\t\t\texternalStorageState = Environment.getExternalStorageState();\n+\t\t} catch (NullPointerException e) { // (sh)it happens (Issue #660)\n+\t\t\texternalStorageState = \"\";\n+\t\t}\n+\t\tif (preferExternal && MEDIA_MOUNTED.equals(externalStorageState) && hasExternalStoragePermission(context)) {\n \t\t\tappCacheDir = getExternalCacheDir(context);\n \t\t}\n \t\tif (appCacheDir == null) {",
      "parent_sha": "e56bc0de9ea8d76b25e45a1d23d6bf370a58d735"
    }
  },
  {
    "oid": "6ac23aa86a0543e6101ad4689910bbbc756b8332",
    "message": "ImageViewAware Java docs",
    "date": "2013-12-17T23:44:22Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/6ac23aa86a0543e6101ad4689910bbbc756b8332",
    "details": {
      "sha": "afa720f1bacf68b31a17410827fd75563da6054f",
      "filename": "library/src/com/nostra13/universalimageloader/core/imageaware/ImageViewAware.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/6ac23aa86a0543e6101ad4689910bbbc756b8332/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fimageaware%2FImageViewAware.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/6ac23aa86a0543e6101ad4689910bbbc756b8332/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fimageaware%2FImageViewAware.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fimageaware%2FImageViewAware.java?ref=6ac23aa86a0543e6101ad4689910bbbc756b8332",
      "patch": "@@ -39,7 +39,7 @@ public class ImageViewAware implements ImageAware {\n \tprotected boolean checkActualViewSize;\n \n \t/**\n-\t * Constructor.\n+\t * Constructor. <br />\n \t * References {@link #ImageViewAware(android.widget.ImageView, boolean) ImageViewAware(imageView, true)}.\n \t *\n \t * @param imageView {@link android.widget.ImageView ImageView} to work with\n@@ -59,7 +59,11 @@ public ImageViewAware(ImageView imageView) {\n \t *                            general) size.\n \t *                            <p/>\n \t *                            <b>false</b> - then {@link #getWidth()} and {@link #getHeight()} will <b>NOT</b>\n-\t *                            consider actual size of ImageView, just layout parameters.\n+\t *                            consider actual size of ImageView, just layout parameters. <br /> If you set 'false'\n+\t *                            it's recommended 'android:layout_width' and 'android:layout_height' (or\n+\t *                            'android:maxWidth' and 'android:maxHeight') are set with concrete values. It helps to\n+\t *                            save memory.\n+\t *                            <p/>\n \t */\n \tpublic ImageViewAware(ImageView imageView, boolean checkActualViewSize) {\n \t\tthis.imageViewRef = new WeakReference<ImageView>(imageView);",
      "parent_sha": "d828a9c1d8108e585f889a6273e020e10281ff5b"
    }
  },
  {
    "oid": "d3ead7a00413c56635ae345a3da9746cdfbd87e5",
    "message": "Issue #393 - Fixed RoundedBitmapDisplayer for the case when view isn't drawn yet and size is unknown. Use ImageViewAware instead of ImageView.\nChanged API: RoundedBitmapDisplayer.roundCorners(Bitmap, ImageView, int) -> .roundCorners(Bitmap, ImageViewAware, int)",
    "date": "2013-11-19T11:07:38Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/d3ead7a00413c56635ae345a3da9746cdfbd87e5",
    "details": {
      "sha": "8494f149130a7881245c66aee6a3e1b8caf6642e",
      "filename": "library/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/d3ead7a00413c56635ae345a3da9746cdfbd87e5/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/d3ead7a00413c56635ae345a3da9746cdfbd87e5/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java?ref=d3ead7a00413c56635ae345a3da9746cdfbd87e5",
      "patch": "@@ -17,14 +17,14 @@\n \n import android.graphics.*;\n import android.graphics.Bitmap.Config;\n-import android.view.View;\n import android.widget.ImageView;\n import com.nostra13.universalimageloader.core.assist.LoadedFrom;\n import com.nostra13.universalimageloader.core.imageaware.ImageAware;\n+import com.nostra13.universalimageloader.core.imageaware.ImageViewAware;\n import com.nostra13.universalimageloader.utils.L;\n \n /**\n- * Displays bitmap with rounded corners. <br />\n+ * Displays bitmap with rounded corners. This implementation works only with ImageViews wrapped in ImageViewAware.<br />\n  * <b>NOTE:</b> It's strongly recommended your {@link ImageView} has defined width (<i>layout_width</i>) and height\n  * (<i>layout_height</i>) .<br />\n  * <b>NOTE:</b> New {@link Bitmap} object is created for displaying. So this class needs more memory and can cause\n@@ -43,36 +43,38 @@ public RoundedBitmapDisplayer(int roundPixels) {\n \n \t@Override\n \tpublic Bitmap display(Bitmap bitmap, ImageAware imageAware, LoadedFrom loadedFrom) {\n-\t\tView imageView = imageAware.getWrappedView();\n-\t\tif (!(imageView instanceof ImageView)) {\n+\t\tif (!(imageAware instanceof ImageViewAware)) {\n \t\t\tthrow new IllegalArgumentException(\"ImageAware should wrap ImageView. ImageViewAware is expected.\");\n \t\t}\n-\t\tBitmap roundedBitmap = roundCorners(bitmap, (ImageView) imageView, roundPixels);\n+\t\tBitmap roundedBitmap = roundCorners(bitmap, (ImageViewAware) imageAware, roundPixels);\n \t\timageAware.setImageBitmap(roundedBitmap);\n \t\treturn roundedBitmap;\n \t}\n \n \t/**\n-\t * Process incoming {@linkplain Bitmap} to make rounded corners according to target {@link ImageView}.<br />\n+\t * Process incoming {@linkplain Bitmap} to make rounded corners according to target\n+\t * {@link com.nostra13.universalimageloader.core.imageaware.ImageViewAware}.<br />\n \t * This method <b>doesn't display</b> result bitmap in {@link ImageView}\n \t *\n \t * @param bitmap      Incoming Bitmap to process\n-\t * @param imageView   Target {@link ImageView} to display bitmap in\n+\t * @param imageAware  Target {@link com.nostra13.universalimageloader.core.imageaware.ImageAware ImageAware} to\n+\t *                    display bitmap in\n \t * @param roundPixels Rounded pixels of corner\n \t * @return Result bitmap with rounded corners\n \t */\n-\tpublic static Bitmap roundCorners(Bitmap bitmap, ImageView imageView, int roundPixels) {\n+\tpublic static Bitmap roundCorners(Bitmap bitmap, ImageViewAware imageAware, int roundPixels) {\n+\t\tImageView imageView = imageAware.getWrappedView();\n \t\tif (imageView == null) {\n-\t\t\tL.w(\"View is collected probably. Can't round bitmap corners without view parameters.\");\n+\t\t\tL.w(\"View is collected probably. Can't round bitmap corners without view properties.\");\n \t\t\treturn bitmap;\n \t\t}\n \n \t\tBitmap roundBitmap;\n \n \t\tint bw = bitmap.getWidth();\n \t\tint bh = bitmap.getHeight();\n-\t\tint vw = imageView.getWidth();\n-\t\tint vh = imageView.getHeight();\n+\t\tint vw = imageAware.getWidth();\n+\t\tint vh = imageAware.getHeight();\n \t\tif (vw <= 0) vw = bw;\n \t\tif (vh <= 0) vh = bh;\n ",
      "parent_sha": "35025265f9c9059588f7ba2cfd8e9075d64ec07c"
    }
  },
  {
    "oid": "c2be1ef7cfb01167de8ca3ec9a2d76c2782a93cd",
    "message": "Clean code",
    "date": "2013-08-20T23:12:16Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/c2be1ef7cfb01167de8ca3ec9a2d76c2782a93cd",
    "details": {
      "sha": "5f00d2b2d1d840cf37d25669ef5a44b826d89245",
      "filename": "library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/c2be1ef7cfb01167de8ca3ec9a2d76c2782a93cd/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdecode%2FBaseImageDecoder.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/c2be1ef7cfb01167de8ca3ec9a2d76c2782a93cd/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdecode%2FBaseImageDecoder.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdecode%2FBaseImageDecoder.java?ref=c2be1ef7cfb01167de8ca3ec9a2d76c2782a93cd",
      "patch": "@@ -15,23 +15,22 @@\n  *******************************************************************************/\n package com.nostra13.universalimageloader.core.decode;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n import android.graphics.BitmapFactory.Options;\n import android.graphics.Matrix;\n import android.media.ExifInterface;\n import android.os.Build;\n-\n import com.nostra13.universalimageloader.core.assist.ImageScaleType;\n import com.nostra13.universalimageloader.core.assist.ImageSize;\n import com.nostra13.universalimageloader.core.download.ImageDownloader.Scheme;\n import com.nostra13.universalimageloader.utils.ImageSizeUtils;\n import com.nostra13.universalimageloader.utils.IoUtils;\n import com.nostra13.universalimageloader.utils.L;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+\n /**\n  * Decodes images to {@link Bitmap}, scales them to needed size\n  *\n@@ -69,7 +68,6 @@ public Bitmap decode(ImageDecodingInfo decodingInfo) throws IOException {\n \t\tInputStream imageStream = getImageStream(decodingInfo);\n \t\tImageFileInfo imageInfo = defineImageSizeAndRotation(imageStream, decodingInfo.getImageUri());\n \t\tOptions decodingOptions = prepareDecodingOptions(imageInfo.imageSize, decodingInfo);\n-\t\t\n \t\tBitmap decodedBitmap = decodeStream(imageStream, decodingOptions);\n \t\tif (decodedBitmap == null) {\n \t\t\tL.e(ERROR_CANT_DECODE_IMAGE, decodingInfo.getImageKey());\n@@ -87,15 +85,14 @@ protected ImageFileInfo defineImageSizeAndRotation(InputStream imageStream, Stri\n \t\tOptions options = new Options();\n \t\toptions.inJustDecodeBounds = true;\n \t\tBitmapFactory.decodeStream(imageStream, null, options);\n+\t\timageStream.reset();\n \n \t\tExifInfo exif;\n \t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ECLAIR) {\n \t\t\texif = defineExifOrientation(imageUri, options.outMimeType);\n \t\t} else {\n \t\t\texif = new ExifInfo();\n \t\t}\n-\t\t\n-\t\timageStream.reset();\n \t\treturn new ImageFileInfo(new ImageSize(options.outWidth, options.outHeight, exif.rotation), exif);\n \t}\n ",
      "parent_sha": "4871eaa8dc8fa9a74f445774902c743c6f8b4dad"
    }
  },
  {
    "oid": "3c1fedd8d6062cab94c417475062ece142ed89a3",
    "message": "Java docs",
    "date": "2013-02-05T21:55:32Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/3c1fedd8d6062cab94c417475062ece142ed89a3",
    "details": {
      "sha": "1c441bf915c139226a9035a93f64cae7f5e1cecf",
      "filename": "library/src/com/nostra13/universalimageloader/core/process/BitmapProcessor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/3c1fedd8d6062cab94c417475062ece142ed89a3/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fprocess%2FBitmapProcessor.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/3c1fedd8d6062cab94c417475062ece142ed89a3/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fprocess%2FBitmapProcessor.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fprocess%2FBitmapProcessor.java?ref=3c1fedd8d6062cab94c417475062ece142ed89a3",
      "patch": "@@ -1,5 +1,7 @@\n package com.nostra13.universalimageloader.core.process;\n \n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n+\n import android.graphics.Bitmap;\n import android.widget.ImageView;\n \n@@ -14,7 +16,8 @@ public interface BitmapProcessor {\n \t/**\n \t * Makes some processing of incoming bitmap.<br />\n \t * This method is executing on additional thread (not on UI thread).<br />\n-\t * Don't forget {@linkplain Bitmap#recycle() to recycle} incoming bitmap if you return a new created one.\n+\t * If this processor is used as {@linkplain DisplayImageOptions.Builder#preProcessor(BitmapProcessor) pre-processor}\n+\t * then don't forget {@linkplain Bitmap#recycle() to recycle} incoming bitmap if you return a new created one.\n \t * \n \t * @param bitmap Original {@linkplain Bitmap bitmap}\n \t * @param imageView {@linkplain ImageView} which result bitmap will be displayed in",
      "parent_sha": "ecd546c2d1e4e5c766335431b9325f3cd23ae43c"
    }
  },
  {
    "oid": "dc6fb95d26842d9d63b7221c4bb6357a689b1091",
    "message": "There was an issue where \"lastUsageDates\" in LimitedDiscCache had some\ncache files that were not in cache directory, so LimitedDiscCache wasn't\nremoving the cache files. \n\nIt usually happened in ListView, so to solve this issue, I modified\nremoveNext() method in LimitedDiscCache.",
    "date": "2013-06-26T06:10:40Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/dc6fb95d26842d9d63b7221c4bb6357a689b1091",
    "details": {
      "sha": "358777ccfeef197fdf6cc436633bc1efb7bc73cd",
      "filename": "library/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/dc6fb95d26842d9d63b7221c4bb6357a689b1091/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/dc6fb95d26842d9d63b7221c4bb6357a689b1091/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FLimitedDiscCache.java?ref=dc6fb95d26842d9d63b7221c4bb6357a689b1091",
      "patch": "@@ -37,6 +37,8 @@\n  */\n public abstract class LimitedDiscCache extends BaseDiscCache {\n \n+\tprivate static final int INVALID_READ_SIZE = -1;\n+\n \tprivate final AtomicInteger cacheSize;\n \n \tprivate final int sizeLimit;\n@@ -88,9 +90,10 @@ public void run() {\n \tpublic void put(String key, File file) {\n \t\tint valueSize = getSize(file);\n \t\tint curCacheSize = cacheSize.get();\n+\n \t\twhile (curCacheSize + valueSize > sizeLimit) {\n \t\t\tint freedSize = removeNext();\n-\t\t\tif (freedSize == 0) break; // cache is empty (have nothing to delete)\n+\t\t\tif (freedSize == INVALID_READ_SIZE ) break; // cache is empty (have nothing to delete)\n \t\t\tcurCacheSize = cacheSize.addAndGet(-freedSize);\n \t\t}\n \t\tcacheSize.addAndGet(valueSize);\n@@ -121,9 +124,8 @@ public void clear() {\n \t/** Remove next file and returns it's size */\n \tprivate int removeNext() {\n \t\tif (lastUsageDates.isEmpty()) {\n-\t\t\treturn 0;\n+\t\t\treturn INVALID_READ_SIZE;\n \t\t}\n-\n \t\tLong oldestUsage = null;\n \t\tFile mostLongUsedFile = null;\n \t\tSet<Entry<File, Long>> entries = lastUsageDates.entrySet();\n@@ -143,11 +145,17 @@ private int removeNext() {\n \t\t}\n \n \t\tint fileSize = getSize(mostLongUsedFile);\n-\t\tif (mostLongUsedFile.delete()) {\n+\t\t\n+\t\tif (!mostLongUsedFile.exists()) {\n+\t\t\tlastUsageDates.remove(mostLongUsedFile);\n+\t\t\treturn 0;\n+\t\t}\n+\t\t\n+\t\tif ( mostLongUsedFile.delete()) {\n \t\t\tlastUsageDates.remove(mostLongUsedFile);\n \t\t}\n \t\treturn fileSize;\n \t}\n \n \tprotected abstract int getSize(File file);\n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "665c3de2d458eadaebcb862b13ce6274b699f874"
    }
  },
  {
    "oid": "3172d50c0fd46520fc7402c31a5c22b187586745",
    "message": "Use Handler instead of runOnUiThread()",
    "date": "2012-05-09T21:10:12Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/3172d50c0fd46520fc7402c31a5c22b187586745",
    "details": {
      "sha": "95d7015c00d9607b23222a24ad0a8c4a7918d73f",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 10,
      "deletions": 21,
      "changes": 31,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/3172d50c0fd46520fc7402c31a5c22b187586745/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/3172d50c0fd46520fc7402c31a5c22b187586745/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=3172d50c0fd46520fc7402c31a5c22b187586745",
      "patch": "@@ -15,10 +15,9 @@\n import java.util.concurrent.ExecutorService;\r\n import java.util.concurrent.Executors;\r\n \r\n-import android.app.Activity;\r\n-import android.content.Context;\r\n import android.content.res.Configuration;\r\n import android.graphics.Bitmap;\r\n+import android.os.Handler;\r\n import android.util.Log;\r\n import android.view.ViewGroup.LayoutParams;\r\n import android.widget.ImageView;\r\n@@ -38,8 +37,6 @@ public class ImageLoader {\n \tprivate static final String ERROR_WRONG_ARGUMENTS = \"Wrong arguments were passed to displayImage() method (ImageView reference are required)\";\r\n \tprivate static final String ERROR_NOT_INIT = \"ImageLoader must be init with configuration before using\";\r\n \tprivate static final String ERROR_INIT_CONFIG_WITH_NULL = \"ImageLoader configuration can not be initialized with null\";\r\n-\tprivate static final String ERROR_IMAGEVIEW_CONTEXT = \"ImageView context must be of Activity type\"\r\n-\t\t\t+ \"If you create ImageView in code you must pass your current activity in ImageView constructor (e.g. new ImageView(MyActivity.this); or new ImageView(getActivity())).\";\r\n \r\n \tprivate static final String LOG_START_DISPLAY_IMAGE_TASK = \"Start display image task [%s]\";\r\n \tprivate static final String LOG_LOAD_IMAGE_FROM_INTERNET = \"Load image from Internet [%s]\";\r\n@@ -216,7 +213,7 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op\n \t\t\tcheckExecutors();\r\n \r\n \t\t\tImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(url, imageView, targetSize, options, listener);\r\n-\t\t\tDisplayImageTask displayImageTask = new DisplayImageTask(imageLoadingInfo);\r\n+\t\t\tDisplayImageTask displayImageTask = new DisplayImageTask(imageLoadingInfo, new Handler());\r\n \t\t\tif (displayImageTask.isImageCachedOnDisc()) {\r\n \t\t\t\tcachedImageLoadingExecutor.submit(displayImageTask);\r\n \t\t\t} else {\r\n@@ -372,9 +369,11 @@ boolean isConsistent() {\n \tprivate class DisplayImageTask implements Runnable {\r\n \r\n \t\tprivate final ImageLoadingInfo imageLoadingInfo;\r\n+\t\tprivate final Handler handler;\r\n \r\n-\t\tpublic DisplayImageTask(ImageLoadingInfo imageLoadingInfo) {\r\n+\t\tpublic DisplayImageTask(ImageLoadingInfo imageLoadingInfo, Handler handler) {\r\n \t\t\tthis.imageLoadingInfo = imageLoadingInfo;\r\n+\t\t\tthis.handler = handler;\r\n \t\t}\r\n \r\n \t\t@Override\r\n@@ -398,7 +397,7 @@ public void run() {\n \t\t\t}\r\n \r\n \t\t\tDisplayBitmapTask displayBitmapTask = new DisplayBitmapTask(imageLoadingInfo, bmp);\r\n-\t\t\ttryRunOnUiThread(displayBitmapTask);\r\n+\t\t\thandler.post(displayBitmapTask);\r\n \t\t}\r\n \r\n \t\tprivate Bitmap loadBitmap() {\r\n@@ -449,14 +448,14 @@ private boolean isImageCachedOnDisc() {\n \t\tprivate Bitmap decodeImage(URL imageUrl) throws IOException {\r\n \t\t\tBitmap bmp = null;\r\n \t\t\tImageDecoder decoder = new ImageDecoder(imageUrl, imageLoadingInfo.targetSize, imageLoadingInfo.options.getDecodingType());\r\n-\t\t\t\r\n+\r\n \t\t\tfor (int attempt = 1; attempt <= ATTEMPT_COUNT_TO_DECODE_BITMAP; attempt++) {\r\n \t\t\t\ttry {\r\n \t\t\t\t\tbmp = decoder.decodeFile();\r\n \t\t\t\t\tbreak;\r\n \t\t\t\t} catch (OutOfMemoryError e) {\r\n \t\t\t\t\tLog.e(TAG, e.getMessage(), e);\r\n-\t\t\t\t\t\r\n+\r\n \t\t\t\t\tswitch (attempt) {\r\n \t\t\t\t\t\tcase 1:\r\n \t\t\t\t\t\t\tSystem.gc();\r\n@@ -476,7 +475,7 @@ private Bitmap decodeImage(URL imageUrl) throws IOException {\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n-\t\t\t\r\n+\r\n \t\t\tdecoder = null;\r\n \t\t\treturn bmp;\r\n \t\t}\r\n@@ -499,23 +498,13 @@ private void saveImageOnDisc(File targetFile) throws MalformedURLException, IOEx\n \t\t}\r\n \r\n \t\tprivate void fireImageLoadingFailedEvent() {\r\n-\t\t\ttryRunOnUiThread(new Runnable() {\r\n+\t\t\thandler.post(new Runnable() {\r\n \t\t\t\t@Override\r\n \t\t\t\tpublic void run() {\r\n \t\t\t\t\timageLoadingInfo.listener.onLoadingFailed();\r\n \t\t\t\t}\r\n \t\t\t});\r\n \t\t}\r\n-\r\n-\t\tprivate void tryRunOnUiThread(Runnable runnable) {\r\n-\t\t\tContext context = imageLoadingInfo.imageView.getContext();\r\n-\t\t\tif (context instanceof Activity) {\r\n-\t\t\t\t((Activity) context).runOnUiThread(runnable);\r\n-\t\t\t} else {\r\n-\t\t\t\tLog.e(TAG, ERROR_IMAGEVIEW_CONTEXT);\r\n-\t\t\t\timageLoadingInfo.listener.onLoadingFailed();\r\n-\t\t\t}\r\n-\t\t}\r\n \t}\r\n \r\n \t/** Used to display bitmap in {@link ImageView}. Must be called on UI thread. */\r",
      "parent_sha": "57e512af7272cf813b960746fa51c5451ce5b975"
    }
  },
  {
    "oid": "3945afc216896ebc0d3ecf634f30040bc2c4d87d",
    "message": "Sample: Fade in images only on first display",
    "date": "2013-02-07T21:43:11Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/3945afc216896ebc0d3ecf634f30040bc2c4d87d",
    "details": {
      "sha": "af0d190ba28c2b5847e9fa505c5c1e30388aabd5",
      "filename": "sample/src/com/nostra13/example/universalimageloader/ImageListActivity.java",
      "status": "modified",
      "additions": 42,
      "deletions": 1,
      "changes": 43,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/3945afc216896ebc0d3ecf634f30040bc2c4d87d/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImageListActivity.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/3945afc216896ebc0d3ecf634f30040bc2c4d87d/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImageListActivity.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2FImageListActivity.java?ref=3945afc216896ebc0d3ecf634f30040bc2c4d87d",
      "patch": "@@ -1,6 +1,11 @@\n package com.nostra13.example.universalimageloader;\n \n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n import android.content.Intent;\n+import android.graphics.Bitmap;\n import android.os.Bundle;\n import android.view.View;\n import android.view.ViewGroup;\n@@ -14,6 +19,8 @@\n import com.nostra13.example.universalimageloader.Constants.Extra;\n import com.nostra13.universalimageloader.core.DisplayImageOptions;\n import com.nostra13.universalimageloader.core.assist.PauseOnScrollListener;\n+import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;\n+import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;\n import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;\n \n /**\n@@ -53,6 +60,12 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)\n \t\tlistView.setOnScrollListener(new PauseOnScrollListener(imageLoader, false, true));\n \t}\n \n+\t@Override\n+\tpublic void onBackPressed() {\n+\t\tAnimateFirstDisplayListener.displayedImages.clear();\n+\t\tsuper.onBackPressed();\n+\t}\n+\n \tprivate void startImagePagerActivity(int position) {\n \t\tIntent intent = new Intent(this, ImagePagerActivity.class);\n \t\tintent.putExtra(Extra.IMAGES, imageUrls);\n@@ -98,9 +111,37 @@ public View getView(final int position, View convertView, ViewGroup parent) {\n \n \t\t\tholder.text.setText(\"Item \" + (position + 1));\n \n-\t\t\timageLoader.displayImage(imageUrls[position], holder.image, options);\n+\t\t\tfinal String imageUri = imageUrls[position];\n+\t\t\tfinal ImageView imageView = holder.image;\n+\t\t\timageLoader.displayImage(imageUri, imageView, options, new AnimateFirstDisplayListener(imageUri, imageView));\n \n \t\t\treturn view;\n \t\t}\n \t}\n+\n+\tprivate static class AnimateFirstDisplayListener extends SimpleImageLoadingListener {\n+\n+\t\tstatic final List<String> displayedImages = Collections.synchronizedList(new LinkedList<String>());\n+\n+\t\tprivate final String imageUri;\n+\t\tprivate final ImageView imageView;\n+\n+\t\tAnimateFirstDisplayListener(String imageUri, ImageView imageView) {\n+\t\t\tthis.imageUri = imageUri;\n+\t\t\tthis.imageView = imageView;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onLoadingComplete(Bitmap loadedImage) {\n+\t\t\tif (loadedImage != null) {\n+\t\t\t\tboolean firstDisplay = !displayedImages.contains(imageUri);\n+\t\t\t\tif (firstDisplay) {\n+\t\t\t\t\tFadeInBitmapDisplayer.animate(imageView, 500);\n+\t\t\t\t} else {\n+\t\t\t\t\timageView.setImageBitmap(loadedImage);\n+\t\t\t\t}\n+\t\t\t\tdisplayedImages.add(imageUri);\n+\t\t\t}\n+\t\t}\n+\t}\n }\n\\ No newline at end of file",
      "parent_sha": "eadb4b7555e7f1e3a29ad916211f2ef7ca70f27a"
    }
  },
  {
    "oid": "f49a5a0e50d5b817c1c531abed3b7945f8a7ff42",
    "message": "Public RoundedDrawable",
    "date": "2014-02-06T14:03:19Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/f49a5a0e50d5b817c1c531abed3b7945f8a7ff42",
    "details": {
      "sha": "d90ffed83bffec1f1be9e8277c08b9ce0559bfaa",
      "filename": "library/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/f49a5a0e50d5b817c1c531abed3b7945f8a7ff42/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/f49a5a0e50d5b817c1c531abed3b7945f8a7ff42/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java?ref=f49a5a0e50d5b817c1c531abed3b7945f8a7ff42",
      "patch": "@@ -60,7 +60,7 @@ public void display(Bitmap bitmap, ImageAware imageAware, LoadedFrom loadedFrom)\n \t\timageAware.setImageDrawable(new RoundedDrawable(bitmap, cornerRadius, margin));\n \t}\n \n-\tprotected static class RoundedDrawable extends Drawable {\n+\tpublic static class RoundedDrawable extends Drawable {\n \n \t\tprotected final float cornerRadius;\n \t\tprotected final int margin;\n@@ -70,7 +70,7 @@ protected static class RoundedDrawable extends Drawable {\n \t\tprotected final BitmapShader bitmapShader;\n \t\tprotected final Paint paint;\n \n-\t\tRoundedDrawable(Bitmap bitmap, int cornerRadius, int margin) {\n+\t\tpublic RoundedDrawable(Bitmap bitmap, int cornerRadius, int margin) {\n \t\t\tthis.cornerRadius = cornerRadius;\n \t\t\tthis.margin = margin;\n ",
      "parent_sha": "33ce825a127be1dfdee2a00af691b38892a33333"
    }
  },
  {
    "oid": "8bc281a5b4b65f3e8e08b1de835c8940a1b6de38",
    "message": "fix error messages when checking null objects.",
    "date": "2013-07-17T06:18:12Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/8bc281a5b4b65f3e8e08b1de835c8940a1b6de38",
    "details": {
      "sha": "ebb19dbfee8aaa88c344819d2b0748360178e631",
      "filename": "library/src/com/nostra13/universalimageloader/cache/disc/BaseDiscCache.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/8bc281a5b4b65f3e8e08b1de835c8940a1b6de38/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FBaseDiscCache.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/8bc281a5b4b65f3e8e08b1de835c8940a1b6de38/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FBaseDiscCache.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcache%2Fdisc%2FBaseDiscCache.java?ref=8bc281a5b4b65f3e8e08b1de835c8940a1b6de38",
      "patch": "@@ -42,10 +42,10 @@ public BaseDiscCache(File cacheDir) {\n \n \tpublic BaseDiscCache(File cacheDir, FileNameGenerator fileNameGenerator) {\n \t\tif (cacheDir == null) {\n-\t\t\tthrow new IllegalArgumentException(\"cacheDir\" + ERROR_ARG_NULL);\n+\t\t\tthrow new IllegalArgumentException(String.format(ERROR_ARG_NULL, \"cacheDir\"));\n \t\t}\n \t\tif (fileNameGenerator == null) {\n-\t\t\tthrow new IllegalArgumentException(\"fileNameGenerator\" + ERROR_ARG_NULL);\n+\t\t\tthrow new IllegalArgumentException(String.format(ERROR_ARG_NULL, \"fileNameGenerator\"));\n \t\t}\n \n \t\tthis.cacheDir = cacheDir;",
      "parent_sha": "d4184857c88ef8db7d36393084853ee6af661065"
    }
  },
  {
    "oid": "0f5beaa2c22936d45fbbabac3151205f218b1883",
    "message": "Fixed ImageSize.toString() (wrong logs)",
    "date": "2013-04-13T14:04:50Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/0f5beaa2c22936d45fbbabac3151205f218b1883",
    "details": {
      "sha": "12d9623622c0d7e92df7ea0e5f8669689196101f",
      "filename": "library/src/com/nostra13/universalimageloader/core/assist/ImageSize.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/0f5beaa2c22936d45fbbabac3151205f218b1883/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fassist%2FImageSize.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/0f5beaa2c22936d45fbbabac3151205f218b1883/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fassist%2FImageSize.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fassist%2FImageSize.java?ref=0f5beaa2c22936d45fbbabac3151205f218b1883",
      "patch": "@@ -23,6 +23,7 @@\n  */\n public class ImageSize {\n \n+\tprivate static final int TO_STRING_MAX_LENGHT = 9; // \"9999x9999\".length()\n \tprivate static final String SEPARATOR = \"x\";\n \n \tprivate final int width;\n@@ -63,6 +64,6 @@ public ImageSize scale(float scale) {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn new StringBuilder(width).append(SEPARATOR).append(height).toString();\n+\t\treturn new StringBuilder(TO_STRING_MAX_LENGHT).append(width).append(SEPARATOR).append(height).toString();\n \t}\n }",
      "parent_sha": "ea6931448b95ef6211deee0a0e7ba657f97a3785"
    }
  },
  {
    "oid": "edd90e8a614992da546f6f871caa44581af17a14",
    "message": "Sample: No need in FakeBitmapDisplayer",
    "date": "2013-11-19T00:03:29Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/edd90e8a614992da546f6f871caa44581af17a14",
    "details": {
      "sha": "a2f9ab94e0d4ac2976e8c03a6b0667fa12fa2f0f",
      "filename": "sample/src/com/nostra13/example/universalimageloader/widget/UILWidgetProvider.java",
      "status": "modified",
      "additions": 21,
      "deletions": 21,
      "changes": 42,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/edd90e8a614992da546f6f871caa44581af17a14/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2Fwidget%2FUILWidgetProvider.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/edd90e8a614992da546f6f871caa44581af17a14/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2Fwidget%2FUILWidgetProvider.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/sample%2Fsrc%2Fcom%2Fnostra13%2Fexample%2Funiversalimageloader%2Fwidget%2FUILWidgetProvider.java?ref=edd90e8a614992da546f6f871caa44581af17a14",
      "patch": "@@ -15,34 +15,32 @@\n  *******************************************************************************/\n package com.nostra13.example.universalimageloader.widget;\n \n-import static com.nostra13.example.universalimageloader.Constants.IMAGES;\n-\n import android.appwidget.AppWidgetManager;\n import android.appwidget.AppWidgetProvider;\n import android.content.Context;\n import android.graphics.Bitmap;\n import android.view.View;\n import android.widget.RemoteViews;\n-\n import com.nostra13.example.universalimageloader.R;\n import com.nostra13.example.universalimageloader.UILApplication;\n import com.nostra13.universalimageloader.core.DisplayImageOptions;\n import com.nostra13.universalimageloader.core.ImageLoader;\n import com.nostra13.universalimageloader.core.assist.ImageSize;\n import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;\n-import com.nostra13.universalimageloader.core.display.FakeBitmapDisplayer;\n+\n+import static com.nostra13.example.universalimageloader.Constants.IMAGES;\n \n /**\n  * Example widget provider\n- * \n+ *\n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\n  */\n public class UILWidgetProvider extends AppWidgetProvider {\n \n-\tprivate static DisplayImageOptions optionsWithFakeDisplayer;\n+\tprivate static DisplayImageOptions displayOptions;\n \n \tstatic {\n-\t\toptionsWithFakeDisplayer = new DisplayImageOptions.Builder().displayer(new FakeBitmapDisplayer()).build();\n+\t\tdisplayOptions = DisplayImageOptions.createSimple();\n \t}\n \n \t@Override\n@@ -60,19 +58,21 @@ static void updateAppWidget(Context context, final AppWidgetManager appWidgetMan\n \t\tfinal RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget);\n \n \t\tImageSize minImageSize = new ImageSize(70, 70); // 70 - approximate size of ImageView in widget\n-\t\tImageLoader.getInstance().loadImage(IMAGES[0], minImageSize, optionsWithFakeDisplayer, new SimpleImageLoadingListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n-\t\t\t\tviews.setImageViewBitmap(R.id.image_left, loadedImage);\n-\t\t\t\tappWidgetManager.updateAppWidget(appWidgetId, views);\n-\t\t\t}\n-\t\t});\n-\t\tImageLoader.getInstance().loadImage(IMAGES[1], minImageSize, optionsWithFakeDisplayer, new SimpleImageLoadingListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n-\t\t\t\tviews.setImageViewBitmap(R.id.image_right, loadedImage);\n-\t\t\t\tappWidgetManager.updateAppWidget(appWidgetId, views);\n-\t\t\t}\n-\t\t});\n+\t\tImageLoader.getInstance()\n+\t\t\t\t.loadImage(IMAGES[0], minImageSize, displayOptions, new SimpleImageLoadingListener() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n+\t\t\t\t\t\tviews.setImageViewBitmap(R.id.image_left, loadedImage);\n+\t\t\t\t\t\tappWidgetManager.updateAppWidget(appWidgetId, views);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\tImageLoader.getInstance()\n+\t\t\t\t.loadImage(IMAGES[1], minImageSize, displayOptions, new SimpleImageLoadingListener() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n+\t\t\t\t\t\tviews.setImageViewBitmap(R.id.image_right, loadedImage);\n+\t\t\t\t\t\tappWidgetManager.updateAppWidget(appWidgetId, views);\n+\t\t\t\t\t}\n+\t\t\t\t});\n \t}\n }",
      "parent_sha": "4ddda6dc10428b80ee3cdb313b244e047f2f4c77"
    }
  },
  {
    "oid": "1caa472c3b5051f958303b3d2846fc99936d9b85",
    "message": "Clean code",
    "date": "2011-12-10T19:03:55Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/1caa472c3b5051f958303b3d2846fc99936d9b85",
    "details": {
      "sha": "7e8b94df8565b034dad35840ed2ed762501e8d24",
      "filename": "src/com/nostra13/universalimageloader/imageloader/ImageLoader.java",
      "status": "modified",
      "additions": 113,
      "deletions": 118,
      "changes": 231,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/1caa472c3b5051f958303b3d2846fc99936d9b85/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/1caa472c3b5051f958303b3d2846fc99936d9b85/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/src%2Fcom%2Fnostra13%2Funiversalimageloader%2Fimageloader%2FImageLoader.java?ref=1caa472c3b5051f958303b3d2846fc99936d9b85",
      "patch": "@@ -105,17 +105,20 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op\n \t\t\treturn;\r\n \t\t}\r\n \r\n-\t\tImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(url, imageView, options, listener);\r\n-\r\n-\t\tBitmap image = null;\r\n+\t\tBitmap bmp = null;\r\n \t\tsynchronized (bitmapCache) {\r\n-\t\t\timage = bitmapCache.get(url);\r\n+\t\t\tbmp = bitmapCache.get(url);\r\n \t\t}\r\n \r\n-\t\tif (image != null && !image.isRecycled()) {\r\n-\t\t\timageView.setImageBitmap(image);\r\n+\t\tif (bmp != null && !bmp.isRecycled()) {\r\n+\t\t\timageView.setImageBitmap(bmp);\r\n \t\t} else {\r\n-\t\t\tsubmitDisplayImageTask(imageLoadingInfo);\r\n+\t\t\tif (listener != null) {\r\n+\t\t\t\tlistener.onLoadingStarted();\r\n+\t\t\t}\r\n+\t\t\tImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(url, imageView, options, listener);\r\n+\t\t\timageLoadingExecutor.submit(new DisplayImageTask(imageLoadingInfo));\r\n+\r\n \t\t\tif (options.isShowStubImage()) {\r\n \t\t\t\timageView.setImageResource(options.getStubImage());\r\n \t\t\t} else {\r\n@@ -144,117 +147,6 @@ public void clearDiscCache() {\n \t\t}\r\n \t}\r\n \r\n-\tprivate void submitDisplayImageTask(ImageLoadingInfo imageLoadingInfo) {\r\n-\t\tif (imageLoadingInfo.listener != null) {\r\n-\t\t\timageLoadingInfo.listener.onLoadingStarted();\r\n-\t\t}\r\n-\r\n-\t\timageLoadingExecutor.submit(new DisplayImageTask(imageLoadingInfo));\r\n-\t}\r\n-\r\n-\tprivate File getLocalImageFile(String imageUrl) {\r\n-\t\tString fileName = String.valueOf(imageUrl.hashCode());\r\n-\t\treturn new File(cacheDir, fileName);\r\n-\t}\r\n-\r\n-\tprivate Bitmap getBitmap(String imageUrl, ImageSize targetImageSize, boolean cacheImageOnDisc) {\r\n-\t\tFile f = getLocalImageFile(imageUrl);\r\n-\r\n-\t\t// Try to load image from disc cache\r\n-\t\ttry {\r\n-\t\t\tif (f.exists()) {\r\n-\t\t\t\tBitmap b = ImageDecoder.decodeFile(f.toURL(), targetImageSize);\r\n-\t\t\t\tif (b != null) {\r\n-\t\t\t\t\treturn b;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t} catch (IOException e) {\r\n-\t\t\t// There is no image in disc cache. Do nothing\r\n-\t\t}\r\n-\r\n-\t\t// Load image from Web\r\n-\t\tBitmap bitmap = null;\r\n-\t\ttry {\r\n-\t\t\tURL imageUrlForDecoding = null;\r\n-\t\t\tif (cacheImageOnDisc) {\r\n-\t\t\t\tsaveImageFromUrl(imageUrl, f);\r\n-\t\t\t\timageUrlForDecoding = f.toURL();\r\n-\t\t\t} else {\r\n-\t\t\t\timageUrlForDecoding = new URL(imageUrl);\r\n-\t\t\t}\r\n-\r\n-\t\t\tbitmap = ImageDecoder.decodeFile(imageUrlForDecoding, targetImageSize);\r\n-\t\t} catch (Exception ex) {\r\n-\t\t\tLog.e(TAG, String.format(\"Exception while loading bitmap from URL=%s : %s\", imageUrl, ex.getMessage()), ex);\r\n-\t\t\tif (f.exists()) {\r\n-\t\t\t\tf.delete();\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn bitmap;\r\n-\t}\r\n-\r\n-\tprivate void saveImageFromUrl(String imageUrl, File targetFile) throws MalformedURLException, IOException {\r\n-\t\tHttpURLConnection conn = (HttpURLConnection) new URL(imageUrl).openConnection();\r\n-\t\tconn.setConnectTimeout(Constants.HTTP_CONNECT_TIMEOUT);\r\n-\t\tconn.setReadTimeout(Constants.HTTP_READ_TIMEOUT);\r\n-\t\tInputStream is = conn.getInputStream();\r\n-\t\ttry {\r\n-\t\t\tOutputStream os = new FileOutputStream(targetFile);\r\n-\t\t\ttry {\r\n-\t\t\t\tFileUtils.copyStream(is, os);\r\n-\t\t\t} finally {\r\n-\t\t\t\tos.close();\r\n-\t\t\t}\r\n-\t\t} finally {\r\n-\t\t\tis.close();\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Defines image size for loading at memory (for memory economy) by {@link ImageView} parameters.<br />\r\n-\t * Size computing algorithm:<br />\r\n-\t * 1) Get <b>maxWidth</b> and <b>maxHeight</b>. If both of them are not set then go to step #2.<br />\r\n-\t * 2) Get <b>layout_width</b> and <b>layout_height</b>. If both of them haven't exact value then go to step #3.</br>\r\n-\t * 3) Get device screen dimensions.\r\n-\t */\r\n-\tprivate ImageSize getImageSizeScaleTo(ImageView imageView) {\r\n-\t\tint width = -1;\r\n-\t\tint height = -1;\r\n-\r\n-\t\t// Check maxWidth and maxHeight parameters\r\n-\t\ttry {\r\n-\t\t\tField maxWidthField = ImageView.class.getDeclaredField(\"mMaxWidth\");\r\n-\t\t\tField maxHeightField = ImageView.class.getDeclaredField(\"mMaxHeight\");\r\n-\t\t\tmaxWidthField.setAccessible(true);\r\n-\t\t\tmaxHeightField.setAccessible(true);\r\n-\t\t\tint maxWidth = (Integer) maxWidthField.get(imageView);\r\n-\t\t\tint maxHeight = (Integer) maxHeightField.get(imageView);\r\n-\r\n-\t\t\tif (maxWidth >= 0 && maxWidth < Integer.MAX_VALUE) {\r\n-\t\t\t\twidth = maxWidth;\r\n-\t\t\t}\r\n-\t\t\tif (maxHeight >= 0 && maxHeight < Integer.MAX_VALUE) {\r\n-\t\t\t\theight = maxHeight;\r\n-\t\t\t}\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tLog.e(TAG, e.getMessage(), e);\r\n-\t\t}\r\n-\r\n-\t\tif (width < 0 && height < 0) {\r\n-\t\t\t// Get layout width and height parameters\r\n-\t\t\tLayoutParams params = imageView.getLayoutParams();\r\n-\t\t\twidth = params.width;\r\n-\t\t\theight = params.height;\r\n-\t\t}\r\n-\r\n-\t\t// Get device screen dimensions\r\n-\t\tif (width < 0 && height < 0) {\r\n-\t\t\twidth = Constants.SCREEN_WIDTH;\r\n-\t\t\theight = Constants.SCREEN_HEIGHT;\r\n-\t\t}\r\n-\t\treturn new ImageSize(width, height);\r\n-\t}\r\n-\r\n \t/** Information about display image task */\r\n \tprivate final class ImageLoadingInfo {\r\n \t\tprivate final String url;\r\n@@ -313,6 +205,109 @@ public void run() {\n \t\t\tActivity activity = (Activity) imageLoadingInfo.imageView.getContext();\r\n \t\t\tactivity.runOnUiThread(displayBitmapTask);\r\n \t\t}\r\n+\r\n+\t\t/**\r\n+\t\t * Defines image size for loading at memory (for memory economy) by {@link ImageView} parameters.<br />\r\n+\t\t * Size computing algorithm:<br />\r\n+\t\t * 1) Get <b>maxWidth</b> and <b>maxHeight</b>. If both of them are not set then go to step #2.<br />\r\n+\t\t * 2) Get <b>layout_width</b> and <b>layout_height</b>. If both of them haven't exact value then go to step\r\n+\t\t * #3.</br> 3) Get device screen dimensions.\r\n+\t\t */\r\n+\t\tprivate ImageSize getImageSizeScaleTo(ImageView imageView) {\r\n+\t\t\tint width = -1;\r\n+\t\t\tint height = -1;\r\n+\r\n+\t\t\t// Check maxWidth and maxHeight parameters\r\n+\t\t\ttry {\r\n+\t\t\t\tField maxWidthField = ImageView.class.getDeclaredField(\"mMaxWidth\");\r\n+\t\t\t\tField maxHeightField = ImageView.class.getDeclaredField(\"mMaxHeight\");\r\n+\t\t\t\tmaxWidthField.setAccessible(true);\r\n+\t\t\t\tmaxHeightField.setAccessible(true);\r\n+\t\t\t\tint maxWidth = (Integer) maxWidthField.get(imageView);\r\n+\t\t\t\tint maxHeight = (Integer) maxHeightField.get(imageView);\r\n+\r\n+\t\t\t\tif (maxWidth >= 0 && maxWidth < Integer.MAX_VALUE) {\r\n+\t\t\t\t\twidth = maxWidth;\r\n+\t\t\t\t}\r\n+\t\t\t\tif (maxHeight >= 0 && maxHeight < Integer.MAX_VALUE) {\r\n+\t\t\t\t\theight = maxHeight;\r\n+\t\t\t\t}\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tLog.e(TAG, e.getMessage(), e);\r\n+\t\t\t}\r\n+\r\n+\t\t\tif (width < 0 && height < 0) {\r\n+\t\t\t\t// Get layout width and height parameters\r\n+\t\t\t\tLayoutParams params = imageView.getLayoutParams();\r\n+\t\t\t\twidth = params.width;\r\n+\t\t\t\theight = params.height;\r\n+\t\t\t}\r\n+\r\n+\t\t\t// Get device screen dimensions\r\n+\t\t\tif (width < 0 && height < 0) {\r\n+\t\t\t\twidth = Constants.SCREEN_WIDTH;\r\n+\t\t\t\theight = Constants.SCREEN_HEIGHT;\r\n+\t\t\t}\r\n+\t\t\treturn new ImageSize(width, height);\r\n+\t\t}\r\n+\r\n+\t\tprivate Bitmap getBitmap(String imageUrl, ImageSize targetImageSize, boolean cacheImageOnDisc) {\r\n+\t\t\tFile f = getLocalImageFile(imageUrl);\r\n+\r\n+\t\t\t// Try to load image from disc cache\r\n+\t\t\ttry {\r\n+\t\t\t\tif (f.exists()) {\r\n+\t\t\t\t\tBitmap b = ImageDecoder.decodeFile(f.toURL(), targetImageSize);\r\n+\t\t\t\t\tif (b != null) {\r\n+\t\t\t\t\t\treturn b;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t} catch (IOException e) {\r\n+\t\t\t\t// There is no image in disc cache. Do nothing\r\n+\t\t\t}\r\n+\r\n+\t\t\t// Load image from Web\r\n+\t\t\tBitmap bitmap = null;\r\n+\t\t\ttry {\r\n+\t\t\t\tURL imageUrlForDecoding = null;\r\n+\t\t\t\tif (cacheImageOnDisc) {\r\n+\t\t\t\t\tsaveImageFromUrl(imageUrl, f);\r\n+\t\t\t\t\timageUrlForDecoding = f.toURL();\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\timageUrlForDecoding = new URL(imageUrl);\r\n+\t\t\t\t}\r\n+\r\n+\t\t\t\tbitmap = ImageDecoder.decodeFile(imageUrlForDecoding, targetImageSize);\r\n+\t\t\t} catch (Exception ex) {\r\n+\t\t\t\tLog.e(TAG, String.format(\"Exception while loading bitmap from URL=%s : %s\", imageUrl, ex.getMessage()), ex);\r\n+\t\t\t\tif (f.exists()) {\r\n+\t\t\t\t\tf.delete();\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\treturn bitmap;\r\n+\t\t}\r\n+\r\n+\t\tprivate File getLocalImageFile(String imageUrl) {\r\n+\t\t\tString fileName = String.valueOf(imageUrl.hashCode());\r\n+\t\t\treturn new File(cacheDir, fileName);\r\n+\t\t}\r\n+\r\n+\t\tprivate void saveImageFromUrl(String imageUrl, File targetFile) throws MalformedURLException, IOException {\r\n+\t\t\tHttpURLConnection conn = (HttpURLConnection) new URL(imageUrl).openConnection();\r\n+\t\t\tconn.setConnectTimeout(Constants.HTTP_CONNECT_TIMEOUT);\r\n+\t\t\tconn.setReadTimeout(Constants.HTTP_READ_TIMEOUT);\r\n+\t\t\tInputStream is = conn.getInputStream();\r\n+\t\t\ttry {\r\n+\t\t\t\tOutputStream os = new FileOutputStream(targetFile);\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tFileUtils.copyStream(is, os);\r\n+\t\t\t\t} finally {\r\n+\t\t\t\t\tos.close();\r\n+\t\t\t\t}\r\n+\t\t\t} finally {\r\n+\t\t\t\tis.close();\r\n+\t\t\t}\r\n+\t\t}\r\n \t}\r\n \r\n \t/** Used to display bitmap in {@link ImageView}. Must be called on UI thread. */\r",
      "parent_sha": "4c4875a4d15ab12670eb8e2c579695a5e025a20a"
    }
  },
  {
    "oid": "0bd259d8fae38be3abe2dacbb62e71884eef8408",
    "message": "1.Modify log error.",
    "date": "2013-12-16T08:49:40Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/0bd259d8fae38be3abe2dacbb62e71884eef8408",
    "details": {
      "sha": "d76b0298b7afb9f08a5ebfb2ffee201dbe3f22b7",
      "filename": "library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/0bd259d8fae38be3abe2dacbb62e71884eef8408/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/0bd259d8fae38be3abe2dacbb62e71884eef8408/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FLoadAndDisplayImageTask.java?ref=0bd259d8fae38be3abe2dacbb62e71884eef8408",
      "patch": "@@ -73,7 +73,7 @@ final class LoadAndDisplayImageTask implements Runnable, IoUtils.CopyListener {\n \tprivate static final String LOG_TASK_INTERRUPTED = \"Task was interrupted [%s]\";\n \n \tprivate static final String ERROR_PRE_PROCESSOR_NULL = \"Pre-processor returned null [%s]\";\n-\tprivate static final String ERROR_POST_PROCESSOR_NULL = \"Pre-processor returned null [%s]\";\n+\tprivate static final String ERROR_POST_PROCESSOR_NULL = \"Post-processor returned null [%s]\";\n \tprivate static final String ERROR_PROCESSOR_FOR_DISC_CACHE_NULL = \"Bitmap processor for disc cache returned null [%s]\";\n \n \tprivate static final int BUFFER_SIZE = 32 * 1024; // 32 Kb",
      "parent_sha": "8e7a413866907a63018e28c6db221157baa82afa"
    }
  },
  {
    "oid": "ff6988c751f879be28a5e5d11c1ea409763f3832",
    "message": "Handle redirects (HTTP <-> HTTPS)",
    "date": "2013-03-08T11:12:51Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/ff6988c751f879be28a5e5d11c1ea409763f3832",
    "details": {
      "sha": "3e21e276f502fe75364d36dac4839c19f030ee64",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/ff6988c751f879be28a5e5d11c1ea409763f3832/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/ff6988c751f879be28a5e5d11c1ea409763f3832/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java?ref=ff6988c751f879be28a5e5d11c1ea409763f3832",
      "patch": "@@ -23,6 +23,7 @@\n import java.io.InputStream;\n import java.net.HttpURLConnection;\n import java.net.URI;\n+import java.net.URL;\n import java.net.URLConnection;\n \n import android.content.ContentResolver;\n@@ -53,6 +54,8 @@ public class BaseImageDownloader implements ImageDownloader {\n \t/** {@value} */\n \tprotected static final int BUFFER_SIZE = 8 * 1024; // 8 Kb\n \n+\tprivate static final int MAX_REDIRECT_COUNT = 5;\n+\n \tprivate static final String ERROR_UNSUPPORTED_SCHEME = \"UIL doesn't support scheme(protocol) [%s] by default. \"\n \t\t\t+ \"You should implement this support yourself (BaseImageDownloader.getStreamFromOtherSource(...))\";\n \n@@ -106,10 +109,23 @@ public InputStream getStream(URI imageUri, Object extra) throws IOException {\n \t *             URI.\n \t */\n \tprotected InputStream getStreamFromNetwork(URI imageUri, Object extra) throws IOException {\n-\t\tHttpURLConnection conn = (HttpURLConnection) imageUri.toURL().openConnection();\n+\t\tHttpURLConnection conn = connectTo(imageUri.toString());\n+\n+\t\tint redirectCount = 0;\n+\t\twhile (conn.getResponseCode() / 100 == 3 && redirectCount < MAX_REDIRECT_COUNT) {\n+\t\t\tconn = connectTo(conn.getHeaderField(\"Location\"));\n+\t\t\tredirectCount++;\n+\t\t}\n+\n+\t\treturn new FlushedInputStream(conn.getInputStream(), BUFFER_SIZE);\n+\t}\n+\n+\tprivate HttpURLConnection connectTo(String url) throws IOException {\n+\t\tHttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n \t\tconn.setConnectTimeout(connectTimeout);\n \t\tconn.setReadTimeout(readTimeout);\n-\t\treturn new FlushedInputStream(conn.getInputStream(), BUFFER_SIZE);\n+\t\tconn.connect();\n+\t\treturn conn;\n \t}\n \n \t/**",
      "parent_sha": "32908596436fb5b331088b3219da2ac722ac1916"
    }
  },
  {
    "oid": "eb794c306c1707a6cce80764b01f52109d5b9056",
    "message": "Clean code",
    "date": "2014-11-16T14:06:15Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/eb794c306c1707a6cce80764b01f52109d5b9056",
    "details": {
      "sha": "42bb7916776d4c8248ca8c6e907eae5ed5f34b49",
      "filename": "library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java",
      "status": "modified",
      "additions": 17,
      "deletions": 10,
      "changes": 27,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/eb794c306c1707a6cce80764b01f52109d5b9056/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/eb794c306c1707a6cce80764b01f52109d5b9056/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdownload%2FBaseImageDownloader.java?ref=eb794c306c1707a6cce80764b01f52109d5b9056",
      "patch": "@@ -69,20 +69,15 @@ public class BaseImageDownloader implements ImageDownloader {\n \tprotected final Context context;\n \tprotected final int connectTimeout;\n \tprotected final int readTimeout;\n-\t/**\n-\t * Whether read stream if server returned non-200 response\n-\t */\n-\tprotected final boolean readOnError;\n \n \tpublic BaseImageDownloader(Context context) {\n-\t\tthis(context.getApplicationContext(), DEFAULT_HTTP_CONNECT_TIMEOUT, DEFAULT_HTTP_READ_TIMEOUT, false);\n+\t\tthis(context, DEFAULT_HTTP_CONNECT_TIMEOUT, DEFAULT_HTTP_READ_TIMEOUT);\n \t}\n \n-\tpublic BaseImageDownloader(Context context, int connectTimeout, int readTimeout, boolean readOnError) {\n+\tpublic BaseImageDownloader(Context context, int connectTimeout, int readTimeout) {\n \t\tthis.context = context.getApplicationContext();\n \t\tthis.connectTimeout = connectTimeout;\n \t\tthis.readTimeout = readTimeout;\n-\t\tthis.readOnError = readOnError;\n \t}\n \n \t@Override\n@@ -126,18 +121,30 @@ protected InputStream getStreamFromNetwork(String imageUri, Object extra) throws\n \n \t\tInputStream imageStream;\n \t\ttry {\n-\t\t\tif (conn.getResponseCode() != 200 && !readOnError) {\n-\t\t\t\tthrow new IOException(\"Unable to retrieve image. Response code: \" + conn.getResponseCode());\n-\t\t\t}\n \t\t\timageStream = conn.getInputStream();\n \t\t} catch (IOException e) {\n \t\t\t// Read all data to allow reuse connection (http://bit.ly/1ad35PY)\n \t\t\tIoUtils.readAndCloseStream(conn.getErrorStream());\n \t\t\tthrow e;\n \t\t}\n+\t\tif (!shouldBeProcessed(conn)) {\n+\t\t\tIoUtils.closeSilently(imageStream);\n+\t\t\tthrow new IOException(\"Image request failed with response code \" + conn.getResponseCode());\n+\t\t}\n+\n \t\treturn new ContentLengthInputStream(new BufferedInputStream(imageStream, BUFFER_SIZE), conn.getContentLength());\n \t}\n \n+\t/**\n+\t * @param conn Opened request connection (response code is available)\n+\t * @return <b>true</b> - if data from connection is correct and should be read and processed;\n+\t *         <b>false</b> - if response contains irrelevant data and shouldn't be processed\n+\t * @throws IOException\n+\t */\n+\tprotected boolean shouldBeProcessed(HttpURLConnection conn) throws IOException {\n+\t\treturn conn.getResponseCode() == 200;\n+\t}\n+\n \t/**\n \t * Create {@linkplain HttpURLConnection HTTP connection} for incoming URL\n \t *",
      "parent_sha": "dae133f09a43949b6ee68156a93a5c0da5285e55"
    }
  },
  {
    "oid": "3455237583b64dd931a2cc6dacbbed256d39bbdc",
    "message": "Clean code",
    "date": "2011-12-15T18:27:17Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/3455237583b64dd931a2cc6dacbbed256d39bbdc",
    "details": {
      "sha": "5606c700c3c6bb9673bff98d9df3302375a366f3",
      "filename": "UniversalImageLoader/src/com/nostra13/universalimageloader/Constants.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/3455237583b64dd931a2cc6dacbbed256d39bbdc/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2FConstants.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/3455237583b64dd931a2cc6dacbbed256d39bbdc/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2FConstants.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/UniversalImageLoader%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2FConstants.java?ref=3455237583b64dd931a2cc6dacbbed256d39bbdc",
      "patch": "@@ -5,7 +5,11 @@\n  * \r\n  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)\r\n  */\r\n-public class Constants {\r\n+public final class Constants {\r\n+\r\n+\tprivate Constants() {\r\n+\t}\r\n+\r\n \t// Default values of ImageLoaderConfiguration\r\n \t/** {@value} pixels*/\r\n \tpublic static final int DEFAULT_MAX_IMAGE_WIDTH = 800;\r",
      "parent_sha": "c4c3adc1c59f0ffd9a5aab37407c2b132d8430da"
    }
  },
  {
    "oid": "1fe8bc41e92f815db3266ebe6d525dc85ef9f007",
    "message": "Returned ImageLoader.getLoadingUriForView(ImageView) and .cancelDisplayTask(ImageView)",
    "date": "2013-11-20T21:21:13Z",
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/commit/1fe8bc41e92f815db3266ebe6d525dc85ef9f007",
    "details": {
      "sha": "de64c5bcdeff9668e821f8fa473a44f43f71031e",
      "filename": "library/src/com/nostra13/universalimageloader/core/ImageLoader.java",
      "status": "modified",
      "additions": 22,
      "deletions": 3,
      "changes": 25,
      "blob_url": "https://github.com/nostra13/Android-Universal-Image-Loader/blob/1fe8bc41e92f815db3266ebe6d525dc85ef9f007/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "raw_url": "https://github.com/nostra13/Android-Universal-Image-Loader/raw/1fe8bc41e92f815db3266ebe6d525dc85ef9f007/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/contents/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2FImageLoader.java?ref=1fe8bc41e92f815db3266ebe6d525dc85ef9f007",
      "patch": "@@ -513,22 +513,41 @@ public void clearDiscCache() {\n \n \t/**\n \t * Returns URI of image which is loading at this moment into passed\n-\t * {@link com.nostra13.universalimageloader.core.imageaware.ImageAware}\n+\t * {@link com.nostra13.universalimageloader.core.imageaware.ImageAware ImageAware}\n \t */\n \tpublic String getLoadingUriForView(ImageAware imageAware) {\n \t\treturn engine.getLoadingUriForView(imageAware);\n \t}\n \n+\t/**\n+\t * Returns URI of image which is loading at this moment into passed\n+\t * {@link android.widget.ImageView ImageView}\n+\t */\n+\tpublic String getLoadingUriForView(ImageView imageView) {\n+\t\treturn engine.getLoadingUriForView(new ImageViewAware(imageView));\n+\t}\n+\n \t/**\n \t * Cancel the task of loading and displaying image for passed\n-\t * {@link com.nostra13.universalimageloader.core.imageaware.ImageAware}.\n+\t * {@link com.nostra13.universalimageloader.core.imageaware.ImageAware ImageAware}.\n \t *\n-\t * @param imageAware {@link ImageView} for which display task will be cancelled\n+\t * @param imageAware {@link com.nostra13.universalimageloader.core.imageaware.ImageAware ImageAware} for\n+\t *                   which display task will be cancelled\n \t */\n \tpublic void cancelDisplayTask(ImageAware imageAware) {\n \t\tengine.cancelDisplayTaskFor(imageAware);\n \t}\n \n+\t/**\n+\t * Cancel the task of loading and displaying image for passed\n+\t * {@link android.widget.ImageView ImageView}.\n+\t *\n+\t * @param imageView {@link android.widget.ImageView ImageView} for which display task will be cancelled\n+\t */\n+\tpublic void cancelDisplayTask(ImageView imageView) {\n+\t\tengine.cancelDisplayTaskFor(new ImageViewAware(imageView));\n+\t}\n+\n \t/**\n \t * Denies or allows ImageLoader to download images from the network.<br />\n \t * <br />",
      "parent_sha": "d7d9a8b188204a83e7de7f73fcdc47fe7945b8ad"
    }
  }
]