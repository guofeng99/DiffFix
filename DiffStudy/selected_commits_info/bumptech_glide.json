[
  {
    "oid": "0e613e2b3cfa1e5029ff6c58ea588a291242b128",
    "message": "Apply migrations from Robolectric 3.2 to 3.3:\n  http://robolectric.org/migrating/#migrating-from-32-to-33\n\nCL automatically created by replace_string.\n\nFinishing up stragglers after LSC here: https://docs.google.com/document/d/1wFs1C4fOK9BKfeIZOuPp7RsUE4F-7BHkadxwtDkY-Vg\n\nTested:\n    TAP --sample for global presubmit queue\n    []\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=152067245",
    "date": "2017-04-04T15:45:29Z",
    "url": "https://github.com/bumptech/glide/commit/0e613e2b3cfa1e5029ff6c58ea588a291242b128",
    "details": {
      "sha": "98c4b8371404bd186a1af395df805512033c4c6e",
      "filename": "library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bumptech/glide/blob/0e613e2b3cfa1e5029ff6c58ea588a291242b128/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fcache%2FMemorySizeCalculatorTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/0e613e2b3cfa1e5029ff6c58ea588a291242b128/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fcache%2FMemorySizeCalculatorTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fcache%2FMemorySizeCalculatorTest.java?ref=0e613e2b3cfa1e5029ff6c58ea588a291242b128",
      "patch": "@@ -20,7 +20,7 @@\n import org.robolectric.annotation.Config;\n import org.robolectric.annotation.Implementation;\n import org.robolectric.annotation.Implements;\n-import org.robolectric.internal.ShadowExtractor;\n+import org.robolectric.shadow.api.Shadow;\n import org.robolectric.shadows.ShadowActivityManager;\n \n @RunWith(RobolectricTestRunner.class)\n@@ -139,7 +139,7 @@ public void testCumulativePoolAndMemoryCacheSizesAreSmallerOnLowMemoryDevices()\n   @Test\n   public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {\n     LowRamActivityManager activityManager =\n-        (LowRamActivityManager) ShadowExtractor.extract(harness.activityManager);\n+        (LowRamActivityManager) Shadow.extract(harness.activityManager);\n     Util.setSdkVersionInt(19);\n     activityManager.setMemoryClass(getLargeEnoughMemoryClass());\n     activityManager.setIsLowRam(true);",
      "parent_sha": "7a03bbafb690f6d7100b6088a618f27991f51f2c"
    }
  },
  {
    "oid": "b0c9aecd54f1801e8582fe16f93f3dd725a5c6dd",
    "message": "Add hardware Bitmap notes to PREFER_ARGB_8888 docs.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=186016913",
    "date": "2018-02-21T17:29:04Z",
    "url": "https://github.com/bumptech/glide/commit/b0c9aecd54f1801e8582fe16f93f3dd725a5c6dd",
    "details": {
      "sha": "8cf2058f58c0a4906fa2dd209faa863aceeffc30",
      "filename": "library/src/main/java/com/bumptech/glide/load/DecodeFormat.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bumptech/glide/blob/b0c9aecd54f1801e8582fe16f93f3dd725a5c6dd/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2FDecodeFormat.java",
      "raw_url": "https://github.com/bumptech/glide/raw/b0c9aecd54f1801e8582fe16f93f3dd725a5c6dd/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2FDecodeFormat.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2FDecodeFormat.java?ref=b0c9aecd54f1801e8582fe16f93f3dd725a5c6dd",
      "patch": "@@ -16,7 +16,9 @@ public enum DecodeFormat {\n    * {@link android.graphics.Bitmap#getConfig()} when possible.\n    *\n    * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use\n-   * {@link android.graphics.Bitmap.Config#HARDWARE}.\n+   * {@link android.graphics.Bitmap.Config#HARDWARE}. More information is available about hardware\n+   * Bitmaps here: https://goo.gl/tn2A6k. If you need to disable hardware Bitmaps for a particular\n+   * request, use {@link com.bumptech.glide.request.RequestOptions#disallowHardwareConfig()}.\n    *\n    * <p> GIF images decoded by {@link android.graphics.BitmapFactory} currently use an internal\n    * hidden format that is returned as null from {@link android.graphics.Bitmap#getConfig()}. Since",
      "parent_sha": "cd08c4b9615df462584055de5e304c0bf5f945fb"
    }
  },
  {
    "oid": "f8a7681e186c37c2eeaebc4f2f216a377112ad2c",
    "message": "Don't use a special downsampler in ImageManager\n\nIt doesn't work for non exact sizing.",
    "date": "2014-03-15T01:44:15Z",
    "url": "https://github.com/bumptech/glide/commit/f8a7681e186c37c2eeaebc4f2f216a377112ad2c",
    "details": {
      "sha": "718425f3daaad7d925b3fd16be3fac442cec9b51",
      "filename": "library/src/com/bumptech/glide/resize/ImageManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 18,
      "changes": 19,
      "blob_url": "https://github.com/bumptech/glide/blob/f8a7681e186c37c2eeaebc4f2f216a377112ad2c/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/f8a7681e186c37c2eeaebc4f2f216a377112ad2c/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java?ref=f8a7681e186c37c2eeaebc4f2f216a377112ad2c",
      "patch": "@@ -80,23 +80,6 @@ public class ImageManager {\n     private final DiskCache diskCache;\n     private final SafeKeyGenerator safeKeyGenerator = new SafeKeyGenerator();\n \n-    //special downsampler that doesn't check exif, and assumes inWidth and inHeight == outWidth and outHeight so it\n-    //doesn't need to read the image header for size information\n-    private static Downsampler DISK_CACHE_DOWNSAMPLER = new Downsampler() {\n-\n-        @Override\n-        public Bitmap downsample(RecyclableBufferedInputStream bis, BitmapFactory.Options options, BitmapPool pool,\n-                int outWidth, int outHeight) {\n-            return downsampleWithSize(bis, options, pool, outWidth, outHeight, 1);\n-        }\n-\n-        @Override\n-        protected int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight) {\n-            return 0;\n-        }\n-    };\n-\n-\n     /**\n      * Get the maximum safe memory cache size for this particular device based on the # of mb allocated to each app.\n      * This is a conservative estimate that has been safe for 2.2+ devices consistently. It is probably rather small\n@@ -620,7 +603,7 @@ private Bitmap getFromDiskCache(String key) {\n             Bitmap result = null;\n             final InputStream is = diskCache.get(key);\n             if (is != null) {\n-                result = resizer.load(is, width, height, DISK_CACHE_DOWNSAMPLER);\n+                result = resizer.load(is, width, height, Downsampler.NONE);\n                 if (result == null) {\n                     diskCache.delete(key); //the image must have been corrupted\n                 }",
      "parent_sha": "680eb4dca0cfa186b8a6ac7304130b0b6be60869"
    }
  },
  {
    "oid": "f354773890c2e745f5143572ae9891fb36aa7d7c",
    "message": "Fix using global rather than request options\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=88447621",
    "date": "2015-03-12T16:50:42Z",
    "url": "https://github.com/bumptech/glide/commit/f354773890c2e745f5143572ae9891fb36aa7d7c",
    "details": {
      "sha": "296488c7a61df61bb741232045801bdc28d13cb2",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/RequestContext.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bumptech/glide/blob/f354773890c2e745f5143572ae9891fb36aa7d7c/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FRequestContext.java",
      "raw_url": "https://github.com/bumptech/glide/raw/f354773890c2e745f5143572ae9891fb36aa7d7c/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FRequestContext.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FRequestContext.java?ref=f354773890c2e745f5143572ae9891fb36aa7d7c",
      "patch": "@@ -101,7 +101,7 @@ synchronized LoadDataSet<Model> getLoadDataSet() {\n     }\n     if (loadDataSet == null) {\n       loadDataSet = glideContext.getRegistry().getLoadDataSet(model, width, height,\n-          glideContext.getOptions().getOptions());\n+          requestOptions.getOptions());\n     }\n     return loadDataSet;\n   }\n@@ -164,7 +164,7 @@ <X> Encoder<X> getSourceEncoder(X data) throws Registry.NoSourceEncoderAvailable\n   LoadDataSet<File> getDataFetchers(File file, int width, int height)\n       throws Registry.NoModelLoaderAvailableException {\n     return glideContext.getRegistry().getLoadDataSet(file, width, height,\n-        glideContext.getOptions().getOptions());\n+        requestOptions.getOptions());\n   }\n \n   public int getOverrideWidth() {",
      "parent_sha": "abc2dbb1d142144a16888a61369542bb9345c3b7"
    }
  },
  {
    "oid": "15db37e4e7fd1a44ce43999bdcc403e624048f50",
    "message": "Use SSL for Flickr api urls.\n\nFixes #86.",
    "date": "2014-08-10T16:25:14Z",
    "url": "https://github.com/bumptech/glide/commit/15db37e4e7fd1a44ce43999bdcc403e624048f50",
    "details": {
      "sha": "0d80597ee449732c889b2c4116b2f13a487f3bc1",
      "filename": "samples/flickr/src/com/bumptech/glide/samples/flickr/api/Api.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/15db37e4e7fd1a44ce43999bdcc403e624048f50/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fflickr%2Fapi%2FApi.java",
      "raw_url": "https://github.com/bumptech/glide/raw/15db37e4e7fd1a44ce43999bdcc403e624048f50/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fflickr%2Fapi%2FApi.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fflickr%2Fapi%2FApi.java?ref=15db37e4e7fd1a44ce43999bdcc403e624048f50",
      "patch": "@@ -21,7 +21,7 @@ public class Api {\n     private static Api API;\n     private static final String TAG = \"FlickrApi\";\n     private static final String API_KEY = \"f0e6fbb5fdf1f3842294a1d21f84e8a6\";\n-    private static final String SIGNED_API_URL = \"http://api.flickr.com/services/rest/?method=%s&format=json&api_key=\"\n+    private static final String SIGNED_API_URL = \"https://api.flickr.com/services/rest/?method=%s&format=json&api_key=\"\n             + API_KEY;\n     //incomplete size independent url for photos that can be cached per photo\n     private static final String CACHEABLE_PHOTO_URL = \"http://farm%s.staticflickr.com/%s/%s_%s_\";",
      "parent_sha": "66e337a1c5829b66fccc4655e5071be3a9f93f52"
    }
  },
  {
    "oid": "1bd2d5372f3fc12172bc6dbf1edd84f86931dae3",
    "message": "Log when DecodeJobs throw runtime exceptions.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=91619973",
    "date": "2015-04-24T23:16:06Z",
    "url": "https://github.com/bumptech/glide/commit/1bd2d5372f3fc12172bc6dbf1edd84f86931dae3",
    "details": {
      "sha": "9cbb38cc83389d24e988d6f94e7d85fd28160607",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bumptech/glide/blob/1bd2d5372f3fc12172bc6dbf1edd84f86931dae3/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java",
      "raw_url": "https://github.com/bumptech/glide/raw/1bd2d5372f3fc12172bc6dbf1edd84f86931dae3/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java?ref=1bd2d5372f3fc12172bc6dbf1edd84f86931dae3",
      "patch": "@@ -24,6 +24,7 @@\n class DecodeJob<R> implements DataFetcherGenerator.FetcherReadyCallback,\n     Runnable,\n     Prioritized {\n+  private static final String TAG = \"DecodeJob\";\n \n   private final RequestContext<?, R> requestContext;\n   private final EngineKey loadKey;\n@@ -101,7 +102,22 @@ public int getPriority() {\n \n   @Override\n   public void run() {\n-    switch (runReason) {\n+    // This should be much more fine grained, but since Java's thread pool implementation silently\n+    // swallows all otherwise fatal exceptions, this will at least make it obvious to developers\n+    // that something is failing.\n+    try {\n+      runWrapped();\n+    } catch (RuntimeException e) {\n+      if (Log.isLoggable(TAG, Log.ERROR)) {\n+        Log.e(TAG, \"DecodeJob threw unexpectedly\", e);\n+      }\n+      callback.onLoadFailed();\n+      throw e;\n+    }\n+  }\n+\n+  private void runWrapped() {\n+     switch (runReason) {\n       case INITIALIZE:\n         stage = getNextStage(Stage.INITIALIZE);\n         generator = getNextGenerator();",
      "parent_sha": "999847b348e1682443537f3f7cd67bde72251efb"
    }
  },
  {
    "oid": "d51b5772ba2e8dcfe44814f2400ac051cb78431d",
    "message": "Fix error message (#2439)",
    "date": "2017-10-02T21:04:37Z",
    "url": "https://github.com/bumptech/glide/commit/d51b5772ba2e8dcfe44814f2400ac051cb78431d",
    "details": {
      "sha": "a1661734830a7bb244712716fae7169dcbb8a4ab",
      "filename": "library/src/main/java/com/bumptech/glide/Glide.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/d51b5772ba2e8dcfe44814f2400ac051cb78431d/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlide.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d51b5772ba2e8dcfe44814f2400ac051cb78431d/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlide.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlide.java?ref=d51b5772ba2e8dcfe44814f2400ac051cb78431d",
      "patch": "@@ -249,7 +249,7 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {\n     } catch (ClassNotFoundException e) {\n       if (Log.isLoggable(TAG, Log.WARN)) {\n         Log.w(TAG, \"Failed to find GeneratedAppGlideModule. You should include an\"\n-            + \" annotationProcessor compile dependency on com.github.bumptech.glide:glide:compiler\"\n+            + \" annotationProcessor compile dependency on com.github.bumptech.glide:compiler\"\n             + \" in your application and a @GlideModule annotated AppGlideModule implementation or\"\n             + \" LibraryGlideModules will be silently ignored\");\n       }",
      "parent_sha": "818f591e6243b9890c46000f0d7f365971ab6259"
    }
  },
  {
    "oid": "3d6d038f7341dc71872d076b42d74492fec197b9",
    "message": "Allow host app to provide a way to clear all resources onStop() (#5145)\n\n* * Integrated a way in glide to allow host app to provide a way to clear resources onStop().\r\n\r\n* * Clear targetTracker only in case clearOnStop is true\r\n\r\n* * Extracted a clearRequests() and re-used it in onStop() and onDestroy()",
    "date": "2023-07-01T18:27:48Z",
    "url": "https://github.com/bumptech/glide/commit/3d6d038f7341dc71872d076b42d74492fec197b9",
    "details": {
      "sha": "5b3ed2c3fd1ea0e7e427557521a19c3a93431d78",
      "filename": "library/src/main/java/com/bumptech/glide/RequestManager.java",
      "status": "modified",
      "additions": 28,
      "deletions": 6,
      "changes": 34,
      "blob_url": "https://github.com/bumptech/glide/blob/3d6d038f7341dc71872d076b42d74492fec197b9/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/3d6d038f7341dc71872d076b42d74492fec197b9/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java?ref=3d6d038f7341dc71872d076b42d74492fec197b9",
      "patch": "@@ -95,6 +95,8 @@ public void run() {\n \n   private boolean pauseAllRequestsOnTrimMemoryModerate;\n \n+  private boolean clearOnStop;\n+\n   public RequestManager(\n       @NonNull Glide glide,\n       @NonNull Lifecycle lifecycle,\n@@ -203,6 +205,17 @@ public synchronized RequestManager setDefaultRequestOptions(\n     return this;\n   }\n \n+  /**\n+   * Clear all resources when onStop() from {@link LifecycleListener} is called.\n+   *\n+   * @return This request manager.\n+   */\n+  @NonNull\n+  public synchronized RequestManager clearOnStop() {\n+    clearOnStop = true;\n+    return this;\n+  }\n+\n   /**\n    * Adds a default {@link RequestListener} that will be added to every request started with this\n    * {@link RequestManager}.\n@@ -354,12 +367,17 @@ public synchronized void onStart() {\n \n   /**\n    * Lifecycle callback that unregisters for connectivity events (if the\n-   * android.permission.ACCESS_NETWORK_STATE permission is present) and pauses in progress loads.\n+   * android.permission.ACCESS_NETWORK_STATE permission is present) and pauses in progress loads\n+   * and clears all resources if {@link #clearOnStop()} is called.\n    */\n   @Override\n   public synchronized void onStop() {\n-    pauseRequests();\n     targetTracker.onStop();\n+    if (clearOnStop) {\n+      clearRequests();\n+    } else {\n+      pauseRequests();\n+    }\n   }\n \n   /**\n@@ -369,10 +387,7 @@ public synchronized void onStop() {\n   @Override\n   public synchronized void onDestroy() {\n     targetTracker.onDestroy();\n-    for (Target<?> target : targetTracker.getAll()) {\n-      clear(target);\n-    }\n-    targetTracker.clear();\n+    clearRequests();\n     requestTracker.clearRequests();\n     lifecycle.removeListener(this);\n     lifecycle.removeListener(connectivityMonitor);\n@@ -703,6 +718,13 @@ public void onLowMemory() {\n     // Nothing to add conditionally. See Glide#onTrimMemory for unconditional behavior.\n   }\n \n+  private synchronized void clearRequests() {\n+    for (Target<?> target : targetTracker.getAll()) {\n+      clear(target);\n+    }\n+    targetTracker.clear();\n+  }\n+\n   @Override\n   public void onConfigurationChanged(Configuration newConfig) {}\n ",
      "parent_sha": "993e59d575a1f97cb70dd6ae1cd2e405ec4c40b6"
    }
  },
  {
    "oid": "c8d927e2871275ab8f544e218cb53c65d3d54f88",
    "message": "Remove scope annotations from Dagger modules",
    "date": "2018-01-17T16:50:33Z",
    "url": "https://github.com/bumptech/glide/commit/c8d927e2871275ab8f544e218cb53c65d3d54f88",
    "details": {
      "sha": "7a70c6dc34481ff1b90f6d53fa930e469c1048df",
      "filename": "samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ApiModule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bumptech/glide/blob/c8d927e2871275ab8f544e218cb53c65d3d54f88/samples%2Fimgur%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fimgur%2Fapi%2FApiModule.java",
      "raw_url": "https://github.com/bumptech/glide/raw/c8d927e2871275ab8f544e218cb53c65d3d54f88/samples%2Fimgur%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fimgur%2Fapi%2FApiModule.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fimgur%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fimgur%2Fapi%2FApiModule.java?ref=c8d927e2871275ab8f544e218cb53c65d3d54f88",
      "patch": "@@ -14,10 +14,7 @@\n import retrofit2.converter.gson.GsonConverterFactory;\n import rx.Observable;\n \n-/**\n- * Provides classes related to the Imgur API via Dagger.\n- */\n-@Singleton\n+/** Provides classes related to the Imgur API via Dagger. */\n @Module\n public final class ApiModule {\n ",
      "parent_sha": "2cd953c63cf266bae37293ce536de4fb04b8e7e0"
    }
  },
  {
    "oid": "c162dba708c010a651c4e7ad13190ba048bd3dcd",
    "message": "Handle preloading with empty data in Gallery sample app.\n\nFixes #3457",
    "date": "2018-12-21T18:44:54Z",
    "url": "https://github.com/bumptech/glide/commit/c162dba708c010a651c4e7ad13190ba048bd3dcd",
    "details": {
      "sha": "53698d6ddd43f55fb8be0918429c3998cccb9c71",
      "filename": "samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/c162dba708c010a651c4e7ad13190ba048bd3dcd/samples%2Fgallery%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgallery%2FRecyclerAdapter.java",
      "raw_url": "https://github.com/bumptech/glide/raw/c162dba708c010a651c4e7ad13190ba048bd3dcd/samples%2Fgallery%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgallery%2FRecyclerAdapter.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fgallery%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgallery%2FRecyclerAdapter.java?ref=c162dba708c010a651c4e7ad13190ba048bd3dcd",
      "patch": "@@ -43,8 +43,9 @@ class RecyclerAdapter extends RecyclerView.Adapter<RecyclerAdapter.ListViewHolde\n     screenWidth = getScreenWidth(context);\n   }\n \n+  @NonNull\n   @Override\n-  public ListViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {\n+  public ListViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {\n     LayoutInflater inflater = LayoutInflater.from(viewGroup.getContext());\n     final View view = inflater.inflate(R.layout.recycler_item, viewGroup, false);\n     view.getLayoutParams().width = screenWidth;\n@@ -66,7 +67,7 @@ public boolean onPreDraw() {\n   }\n \n   @Override\n-  public void onBindViewHolder(ListViewHolder viewHolder, int position) {\n+  public void onBindViewHolder(@NonNull ListViewHolder viewHolder, int position) {\n     MediaStoreData current = data.get(position);\n \n     Key signature =\n@@ -97,7 +98,9 @@ public int getItemViewType(int position) {\n   @NonNull\n   @Override\n   public List<MediaStoreData> getPreloadItems(int position) {\n-    return Collections.singletonList(data.get(position));\n+    return data.isEmpty()\n+            ? Collections.<MediaStoreData>emptyList()\n+            : Collections.singletonList(data.get(position));\n   }\n \n   @Nullable",
      "parent_sha": "f083d87409d13e1db2081a8156816441fe7e5830"
    }
  },
  {
    "oid": "17dde9a3d83e706bffe46cc65036e0b37880ad38",
    "message": "Fix gallery sample app on Q.",
    "date": "2019-11-14T21:18:47Z",
    "url": "https://github.com/bumptech/glide/commit/17dde9a3d83e706bffe46cc65036e0b37880ad38",
    "details": {
      "sha": "a9aa8583aae3280a6cd0feac6dfb1f8dbd89e213",
      "filename": "samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MediaStoreDataLoader.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bumptech/glide/blob/17dde9a3d83e706bffe46cc65036e0b37880ad38/samples%2Fgallery%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgallery%2FMediaStoreDataLoader.java",
      "raw_url": "https://github.com/bumptech/glide/raw/17dde9a3d83e706bffe46cc65036e0b37880ad38/samples%2Fgallery%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgallery%2FMediaStoreDataLoader.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fgallery%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgallery%2FMediaStoreDataLoader.java?ref=17dde9a3d83e706bffe46cc65036e0b37880ad38",
      "patch": "@@ -4,6 +4,7 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.net.Uri;\n+import android.os.Build;\n import android.provider.MediaStore;\n import androidx.loader.content.AsyncTaskLoader;\n import java.util.ArrayList;\n@@ -14,6 +15,10 @@\n /** Loads metadata from the media store for images and videos. */\n @SuppressWarnings(\"InlinedApi\")\n public class MediaStoreDataLoader extends AsyncTaskLoader<List<MediaStoreData>> {\n+  private static final String VIDEO_ORIENTATION_COLUMN =\n+      Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q\n+          ? MediaStore.Video.VideoColumns.ORIENTATION\n+          : \"0 AS \" + MediaStore.Images.ImageColumns.ORIENTATION;\n   private static final String[] IMAGE_PROJECTION =\n       new String[] {\n         MediaStore.Images.ImageColumns._ID,\n@@ -29,7 +34,7 @@ public class MediaStoreDataLoader extends AsyncTaskLoader<List<MediaStoreData>>\n         MediaStore.Video.VideoColumns.DATE_TAKEN,\n         MediaStore.Video.VideoColumns.DATE_MODIFIED,\n         MediaStore.Video.VideoColumns.MIME_TYPE,\n-        \"0 AS \" + MediaStore.Images.ImageColumns.ORIENTATION,\n+        VIDEO_ORIENTATION_COLUMN,\n       };\n \n   private List<MediaStoreData> cached;",
      "parent_sha": "03271581e93fe551f38d713d1c30ef2070a6c035"
    }
  },
  {
    "oid": "5212e953ff8fb0db390214eafb5a89b826884142",
    "message": "Respect theme when loading Drawables while AppCompat is present (#2999)",
    "date": "2018-03-30T15:42:25Z",
    "url": "https://github.com/bumptech/glide/commit/5212e953ff8fb0db390214eafb5a89b826884142",
    "details": {
      "sha": "f136936703496afd7200d8d898d4bf58ba7e81f1",
      "filename": "library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/5212e953ff8fb0db390214eafb5a89b826884142/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fdrawable%2FDrawableDecoderCompat.java",
      "raw_url": "https://github.com/bumptech/glide/raw/5212e953ff8fb0db390214eafb5a89b826884142/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fdrawable%2FDrawableDecoderCompat.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fdrawable%2FDrawableDecoderCompat.java?ref=5212e953ff8fb0db390214eafb5a89b826884142",
      "patch": "@@ -8,6 +8,7 @@\n import android.support.annotation.Nullable;\n import android.support.v4.content.res.ResourcesCompat;\n import android.support.v7.content.res.AppCompatResources;\n+import android.support.v7.view.ContextThemeWrapper;\n \n /**\n  * Handles decoding Drawables with the v7 support library if present and falling back to the v4\n@@ -38,7 +39,7 @@ public static Drawable getDrawable(Context context, @DrawableRes int id, @Nullab\n       // Race conditions may cause us to attempt to load using v7 more than once. That's ok since\n       // this check is a modest optimization and the output will be correct anyway.\n       if (shouldCallAppCompatResources) {\n-        return loadDrawableV7(context, id);\n+        return loadDrawableV7(context, id, theme);\n       }\n     } catch (NoClassDefFoundError error) {\n       shouldCallAppCompatResources = false;\n@@ -50,8 +51,10 @@ public static Drawable getDrawable(Context context, @DrawableRes int id, @Nullab\n     return loadDrawableV4(context, id, theme != null ? theme : context.getTheme());\n   }\n \n-  private static Drawable loadDrawableV7(Context context, @DrawableRes int id) {\n-    return AppCompatResources.getDrawable(context, id);\n+  private static Drawable loadDrawableV7(Context context, @DrawableRes int id,\n+      @Nullable Theme theme) {\n+    Context resourceContext = theme != null ? new ContextThemeWrapper(context, theme) : context;\n+    return AppCompatResources.getDrawable(resourceContext, id);\n   }\n \n   private static Drawable loadDrawableV4(",
      "parent_sha": "dd7fe186e0eb4ea2b17f8611317a2714b81ff03b"
    }
  },
  {
    "oid": "afeb674b6db45fc45d0383a743d07d2b869b8c18",
    "message": "Clean up some redundant code in AsFilesTest.",
    "date": "2018-05-29T20:52:35Z",
    "url": "https://github.com/bumptech/glide/commit/afeb674b6db45fc45d0383a743d07d2b869b8c18",
    "details": {
      "sha": "6a47f43b5d47aaf5994ff856f31f71411756e4b3",
      "filename": "instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 20,
      "changes": 31,
      "blob_url": "https://github.com/bumptech/glide/blob/afeb674b6db45fc45d0383a743d07d2b869b8c18/instrumentation%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FAsFileTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/afeb674b6db45fc45d0383a743d07d2b869b8c18/instrumentation%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FAsFileTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/instrumentation%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FAsFileTest.java?ref=afeb674b6db45fc45d0383a743d07d2b869b8c18",
      "patch": "@@ -18,59 +18,54 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n @RunWith(AndroidJUnit4.class)\n public class AsFileTest {\n+  private static final String URL = \"https://imgs.xkcd.com/comics/mc_hammer_age.png\";\n   @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();\n   private final ConcurrencyHelper concurrency = new ConcurrencyHelper();\n   private final Context context = InstrumentationRegistry.getTargetContext();\n \n+  @Before\n+  public void setUp() {\n+    MockModelLoader.mock(URL, getData());\n+  }\n+\n   @Test\n   public void asFile_withUrl_succeeds() {\n-    String url = \"https://www.w3schools.com/howto/img_fjords.jpg\";\n-\n-    MockModelLoader.mock(url, getData());\n-\n     File file =\n         concurrency.get(\n             GlideApp.with(context)\n                 .asFile()\n-                .load(\"https://www.w3schools.com/howto/img_fjords.jpg\")\n+                .load(URL)\n                 .submit());\n     assertThat(file).isNotNull();\n   }\n \n   @Test\n   public void asFile_withUrlAndDiskCacheStrategyData_succeeds() {\n-    String url = \"https://www.w3schools.com/howto/img_fjords.jpg\";\n-\n-    MockModelLoader.mock(url, getData());\n-\n     File file =\n         concurrency.get(\n             GlideApp.with(context)\n                 .asFile()\n                 .diskCacheStrategy(DiskCacheStrategy.DATA)\n-                .load(\"https://www.w3schools.com/howto/img_fjords.jpg\")\n+                .load(URL)\n                 .submit());\n     assertThat(file).isNotNull();\n   }\n \n   @Test\n   public void asFile_withUrlAndDiskCacheStrategyResource_fails() {\n-    String url = \"https://www.w3schools.com/howto/img_fjords.jpg\";\n-\n-    MockModelLoader.mock(url, getData());\n-\n     try {\n       concurrency.get(\n           GlideApp.with(context)\n               .asFile()\n               .diskCacheStrategy(DiskCacheStrategy.RESOURCE)\n-              .load(\"https://www.w3schools.com/howto/img_fjords.jpg\")\n+              .load(URL)\n               .submit());\n       fail();\n     } catch (RuntimeException e) {\n@@ -80,16 +75,12 @@ public void asFile_withUrlAndDiskCacheStrategyResource_fails() {\n \n   @Test\n   public void asFile_withUrlAndDiskCacheStrategyAll_fails() {\n-    String url = \"https://www.w3schools.com/howto/img_fjords.jpg\";\n-\n-    MockModelLoader.mock(url, getData());\n-\n     try {\n       concurrency.get(\n           GlideApp.with(context)\n               .asFile()\n               .diskCacheStrategy(DiskCacheStrategy.ALL)\n-              .load(\"https://www.w3schools.com/howto/img_fjords.jpg\")\n+              .load(URL)\n               .submit());\n       fail();\n     } catch (RuntimeException e) {",
      "parent_sha": "0aa75aef353f9ee9569c12a86c18733f7520e46d"
    }
  },
  {
    "oid": "b949d0011eba88fdb31cf6028306cf48d70ded69",
    "message": "Carry through @Nullable annotations from Target interface.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153365074",
    "date": "2017-04-24T16:03:49Z",
    "url": "https://github.com/bumptech/glide/commit/b949d0011eba88fdb31cf6028306cf48d70ded69",
    "details": {
      "sha": "792de64a3b274243ce2b3c6046037306f6092877",
      "filename": "library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bumptech/glide/blob/b949d0011eba88fdb31cf6028306cf48d70ded69/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FBaseTarget.java",
      "raw_url": "https://github.com/bumptech/glide/raw/b949d0011eba88fdb31cf6028306cf48d70ded69/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FBaseTarget.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FBaseTarget.java?ref=b949d0011eba88fdb31cf6028306cf48d70ded69",
      "patch": "@@ -1,6 +1,7 @@\n package com.bumptech.glide.request.target;\n \n import android.graphics.drawable.Drawable;\n+import android.support.annotation.Nullable;\n import com.bumptech.glide.request.Request;\n \n /**\n@@ -22,27 +23,28 @@ public abstract class BaseTarget<Z> implements Target<Z> {\n   private Request request;\n \n   @Override\n-  public void setRequest(Request request) {\n+  public void setRequest(@Nullable Request request) {\n     this.request = request;\n   }\n \n   @Override\n+  @Nullable\n   public Request getRequest() {\n     return request;\n   }\n \n   @Override\n-  public void onLoadCleared(Drawable placeholder) {\n+  public void onLoadCleared(@Nullable Drawable placeholder) {\n     // Do nothing.\n   }\n \n   @Override\n-  public void onLoadStarted(Drawable placeholder) {\n+  public void onLoadStarted(@Nullable Drawable placeholder) {\n     // Do nothing.\n   }\n \n   @Override\n-  public void onLoadFailed(Drawable errorDrawable) {\n+  public void onLoadFailed(@Nullable Drawable errorDrawable) {\n     // Do nothing.\n   }\n ",
      "parent_sha": "c6e837ba47934d9136d8a5b5075d81b98dec4105"
    }
  },
  {
    "oid": "e0239113cb498388e7c46664df6490335de6bb84",
    "message": "Fix NPE in gif sample.",
    "date": "2014-09-10T01:57:14Z",
    "url": "https://github.com/bumptech/glide/commit/e0239113cb498388e7c46664df6490335de6bb84",
    "details": {
      "sha": "38dc755015ef374b1a864a15f6b9bcf07aacb4f6",
      "filename": "samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bumptech/glide/blob/e0239113cb498388e7c46664df6490335de6bb84/samples%2Fgiphy%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgiphy%2FMainActivity.java",
      "raw_url": "https://github.com/bumptech/glide/raw/e0239113cb498388e7c46664df6490335de6bb84/samples%2Fgiphy%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgiphy%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fgiphy%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fgiphy%2FMainActivity.java?ref=e0239113cb498388e7c46664df6490335de6bb84",
      "patch": "@@ -37,7 +37,7 @@ protected void onCreate(Bundle savedInstanceState) {\n                 .into(giphyLogoView);\n \n         ListView gifList = (ListView) findViewById(R.id.gif_list);\n-        adapter = new GifAdapter();\n+        adapter = new GifAdapter(this);\n         gifList.setAdapter(adapter);\n     }\n \n@@ -58,12 +58,22 @@ public void onSearchComplete(Api.SearchResult result) {\n         adapter.setResults(result.data);\n     }\n \n-    private class GifAdapter extends BaseAdapter {\n+    private static class GifAdapter extends BaseAdapter {\n+        private static final Api.GifResult[] EMPTY_RESULTS = new Api.GifResult[0];\n \n-        private Api.GifResult[] results = new Api.GifResult[0];\n+        private Api.GifResult[] results = EMPTY_RESULTS;\n+        private Activity activity;\n+\n+        public GifAdapter(Activity activity) {\n+            this.activity = activity;\n+        }\n \n         public void setResults(Api.GifResult[] results) {\n-            this.results = results;\n+            if (results != null) {\n+                this.results = results;\n+            } else {\n+                this.results = EMPTY_RESULTS;\n+            }\n             notifyDataSetChanged();\n         }\n \n@@ -85,7 +95,7 @@ public long getItemId(int i) {\n         @Override\n         public View getView(int position, View convertView, ViewGroup parent) {\n             if (convertView == null) {\n-                convertView = getLayoutInflater().inflate(R.layout.gif_list_item, parent, false);\n+                convertView = activity.getLayoutInflater().inflate(R.layout.gif_list_item, parent, false);\n             }\n \n             Api.GifResult result = results[position];\n@@ -94,7 +104,7 @@ public View getView(int position, View convertView, ViewGroup parent) {\n             }\n             ImageView gifView = (ImageView) convertView.findViewById(R.id.gif_view);\n \n-            Glide.with(MainActivity.this)\n+            Glide.with(activity)\n                     .load(result)\n                     .fitCenter()\n                     .into(gifView);",
      "parent_sha": "4679c6e171b7bb59ed13aac862d32a8dee9a09d1"
    }
  },
  {
    "oid": "e9bb38b983ede3ce22220af5de3ba803c50248c8",
    "message": "Fix a memory leak when bitmaps not released",
    "date": "2013-08-08T20:50:52Z",
    "url": "https://github.com/bumptech/glide/commit/e9bb38b983ede3ce22220af5de3ba803c50248c8",
    "details": {
      "sha": "ea70972753aafb570cd88be3535c1d50a791915e",
      "filename": "library/src/com/bumptech/glide/resize/bitmap_recycle/SerialBitmapReferenceCounter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bumptech/glide/blob/e9bb38b983ede3ce22220af5de3ba803c50248c8/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2Fbitmap_recycle%2FSerialBitmapReferenceCounter.java",
      "raw_url": "https://github.com/bumptech/glide/raw/e9bb38b983ede3ce22220af5de3ba803c50248c8/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2Fbitmap_recycle%2FSerialBitmapReferenceCounter.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2Fbitmap_recycle%2FSerialBitmapReferenceCounter.java?ref=e9bb38b983ede3ce22220af5de3ba803c50248c8",
      "patch": "@@ -5,6 +5,7 @@\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.Map;\n+import java.util.WeakHashMap;\n \n public class SerialBitmapReferenceCounter implements BitmapReferenceCounter {\n \n@@ -50,7 +51,7 @@ public void markPending() {\n         }\n     }\n \n-    private final Map<Bitmap, InnerTracker> counter = new HashMap<Bitmap, InnerTracker>();\n+    private final Map<Bitmap, InnerTracker> counter = new WeakHashMap<Bitmap, InnerTracker>();\n     private final BitmapPool target;\n     private final InnerTrackerPool pool = new InnerTrackerPool();\n ",
      "parent_sha": "75172f25fc3a44af74e164f18449e45db68ac485"
    }
  },
  {
    "oid": "878ad09942bf74517a761cc80815038bdbed7b06",
    "message": "Add retries to flickr search in sample project",
    "date": "2013-07-31T00:30:11Z",
    "url": "https://github.com/bumptech/glide/commit/878ad09942bf74517a761cc80815038bdbed7b06",
    "details": {
      "sha": "0d526cbbc58425576b8bdf393cbfc73cfe1dd122",
      "filename": "samples/flickr/src/com/bumptech/flickr/api/Api.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/878ad09942bf74517a761cc80815038bdbed7b06/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FApi.java",
      "raw_url": "https://github.com/bumptech/glide/raw/878ad09942bf74517a761cc80815038bdbed7b06/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FApi.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FApi.java?ref=878ad09942bf74517a761cc80815038bdbed7b06",
      "patch": "@@ -1,6 +1,7 @@\n package com.bumptech.flickr.api;\n \n import android.content.Context;\n+import com.android.volley.DefaultRetryPolicy;\n import com.android.volley.Request;\n import com.android.volley.RequestQueue;\n import com.android.volley.Response;\n@@ -94,12 +95,12 @@ private static String getPhotoUrl(Photo photo, String sizeKey) {\n     }\n \n     public void search(String text, final SearchCallback cb) {\n-        requestQueue.add(new StringRequest(Request.Method.GET, getSearchUrl(text), new Response.Listener<String>() {\n+        StringRequest request = new StringRequest(Request.Method.GET, getSearchUrl(text), new Response.Listener<String>() {\n             @Override\n             public void onResponse(String response) {\n                 try {\n                     //cut out initial flickJsonApi(\n-                    JSONObject searchResults = new JSONObject(response.substring(14, response.length()-1));\n+                    JSONObject searchResults = new JSONObject(response.substring(14, response.length() - 1));\n                     JSONArray photos = searchResults.getJSONObject(\"photos\").getJSONArray(\"photo\");\n                     List<Photo> results = new ArrayList<Photo>(photos.length());\n                     for (int i = 0; i < photos.length(); i++) {\n@@ -116,6 +117,8 @@ public void onResponse(String response) {\n             public void onErrorResponse(VolleyError error) {\n                 cb.onSearchFailed(error);\n             }\n-        }));\n+        });\n+        request.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS, 3, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));\n+        requestQueue.add(request);\n     }\n }",
      "parent_sha": "11fad2185c246aecb8438f8aff9c200607dd96db"
    }
  },
  {
    "oid": "8dfb63e05b320e07789562d12b4744864d323dba",
    "message": "Add more detailed logging about formats in BitmapEncoder.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=157282639",
    "date": "2017-06-13T14:00:37Z",
    "url": "https://github.com/bumptech/glide/commit/8dfb63e05b320e07789562d12b4744864d323dba",
    "details": {
      "sha": "8a2fdf327332ce4409fa1d2c58ef6cd5864fde37",
      "filename": "library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/8dfb63e05b320e07789562d12b4744864d323dba/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FBitmapEncoder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/8dfb63e05b320e07789562d12b4744864d323dba/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FBitmapEncoder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FBitmapEncoder.java?ref=8dfb63e05b320e07789562d12b4744864d323dba",
      "patch": "@@ -52,10 +52,11 @@ public class BitmapEncoder implements ResourceEncoder<Bitmap> {\n   @Override\n   public boolean encode(Resource<Bitmap> resource, File file, Options options) {\n     final Bitmap bitmap = resource.get();\n-    TraceCompat.beginSection(\"encode: [\" + bitmap.getWidth() + \"x\" + bitmap.getHeight() + \"]\");\n+    Bitmap.CompressFormat format = getFormat(bitmap, options);\n+    TraceCompat.beginSection(\n+        \"encode: [\" + bitmap.getWidth() + \"x\" + bitmap.getHeight() + \"] \" + format);\n     try {\n       long start = LogTime.getLogTime();\n-      Bitmap.CompressFormat format = getFormat(bitmap, options);\n       int quality = options.get(COMPRESSION_QUALITY);\n \n       boolean success = false;\n@@ -81,7 +82,9 @@ public boolean encode(Resource<Bitmap> resource, File file, Options options) {\n \n       if (Log.isLoggable(TAG, Log.VERBOSE)) {\n         Log.v(TAG, \"Compressed with type: \" + format + \" of size \" + Util.getBitmapByteSize(bitmap)\n-            + \" in \" + LogTime.getElapsedMillis(start));\n+            + \" in \" + LogTime.getElapsedMillis(start)\n+            + \", options format: \" + options.get(COMPRESSION_FORMAT)\n+            + \", hasAlpha: \" + bitmap.hasAlpha());\n       }\n       return success;\n     } finally {",
      "parent_sha": "6e753fc0d0419a85f70112a9f0cb6f3b839a27b3"
    }
  },
  {
    "oid": "fd96de2dd20541c46b3eee24e312969830bc17fb",
    "message": "Increment ROBOLECTRIC_SDK to 19 from 18.\n\nA future version of Robolectric will drop support\nfor SDK 18.\n\nTested via gradle test testDebugUnitTest.",
    "date": "2023-07-07T02:15:47Z",
    "url": "https://github.com/bumptech/glide/commit/fd96de2dd20541c46b3eee24e312969830bc17fb",
    "details": {
      "sha": "d65d57a1138db361f631f14182920c9d91a79c53",
      "filename": "library/test/src/test/java/com/bumptech/glide/RobolectricConstants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/fd96de2dd20541c46b3eee24e312969830bc17fb/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRobolectricConstants.java",
      "raw_url": "https://github.com/bumptech/glide/raw/fd96de2dd20541c46b3eee24e312969830bc17fb/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRobolectricConstants.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRobolectricConstants.java?ref=fd96de2dd20541c46b3eee24e312969830bc17fb",
      "patch": "@@ -2,5 +2,5 @@\n \n public class RobolectricConstants {\n   /** The default SDK used for Robolectric tests */\n-  public static final int ROBOLECTRIC_SDK = 18;\n+  public static final int ROBOLECTRIC_SDK = 19;\n }",
      "parent_sha": "e9b8758b63ec905d54b4cabec08e16cf588bcb38"
    }
  },
  {
    "oid": "48ca6482e88f2f4d2f8b460ca79bc792ea29c1ac",
    "message": "Remove ternary from logic to get compress format",
    "date": "2013-10-20T17:08:12Z",
    "url": "https://github.com/bumptech/glide/commit/48ca6482e88f2f4d2f8b460ca79bc792ea29c1ac",
    "details": {
      "sha": "2b124872c5b377e5158d47555a3ffa729a7ad417",
      "filename": "library/src/com/bumptech/glide/resize/ImageManager.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bumptech/glide/blob/48ca6482e88f2f4d2f8b460ca79bc792ea29c1ac/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/48ca6482e88f2f4d2f8b460ca79bc792ea29c1ac/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java?ref=48ca6482e88f2f4d2f8b460ca79bc792ea29c1ac",
      "patch": "@@ -609,9 +609,14 @@ private void putInDiskCache(String key, final Bitmap bitmap) {\n         diskCache.put(key, new DiskCache.Writer() {\n             @Override\n             public void write(OutputStream os) {\n-                Bitmap.Config config = bitmap.getConfig();\n-                bitmap.compress(config == null || config == Bitmap.Config.ARGB_8888 || config == Bitmap.Config.ARGB_4444 \n-                    ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG, bitmapCompressQuality, os);\n+                final Bitmap.Config config = bitmap.getConfig();\n+                final Bitmap.CompressFormat format;\n+                if (config == null || config == Bitmap.Config.ARGB_4444 || config == Bitmap.Config.ARGB_8888) {\n+                    format = Bitmap.CompressFormat.PNG;\n+                } else {\n+                    format = Bitmap.CompressFormat.JPEG;\n+                }\n+                bitmap.compress(format, bitmapCompressQuality, os);\n             }\n         });\n ",
      "parent_sha": "683b2a58778182ab1f864a6131898d1c641a21ec"
    }
  },
  {
    "oid": "69700c4c2cc6b5b44877b403ed6540014df7af4a",
    "message": "Use EquivalenceTester in SingleRequestTest.",
    "date": "2017-10-18T05:26:57Z",
    "url": "https://github.com/bumptech/glide/commit/69700c4c2cc6b5b44877b403ed6540014df7af4a",
    "details": {
      "sha": "86c73fa8285ba755409a3134a2cf05cf418bc174",
      "filename": "library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java",
      "status": "modified",
      "additions": 50,
      "deletions": 49,
      "changes": 99,
      "blob_url": "https://github.com/bumptech/glide/blob/69700c4c2cc6b5b44877b403ed6540014df7af4a/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FSingleRequestTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/69700c4c2cc6b5b44877b403ed6540014df7af4a/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FSingleRequestTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FSingleRequestTest.java?ref=69700c4c2cc6b5b44877b403ed6540014df7af4a",
      "patch": "@@ -20,6 +20,7 @@\n import android.graphics.Color;\n import android.graphics.drawable.ColorDrawable;\n import android.graphics.drawable.Drawable;\n+import android.support.annotation.NonNull;\n import com.bumptech.glide.GlideContext;\n import com.bumptech.glide.Priority;\n import com.bumptech.glide.load.DataSource;\n@@ -34,6 +35,9 @@\n import com.bumptech.glide.request.target.Target;\n import com.bumptech.glide.request.transition.Transition;\n import com.bumptech.glide.request.transition.TransitionFactory;\n+import com.bumptech.glide.signature.ObjectKey;\n+import com.google.common.base.Equivalence;\n+import com.google.common.testing.EquivalenceTester;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -832,56 +836,53 @@ public void testCallsSourceExecutorEngineIfOptionsIsSet() {\n   }\n \n   @Test\n+  // Varargs\n+  @SuppressWarnings(\"unchecked\")\n   public void testIsEquivalentTo() {\n-    SingleRequest<List> originalRequest1 = builder.build();\n-    SingleRequest<List> originalRequest2 = builder.build();\n-    assertTrue(originalRequest1.isEquivalentTo(originalRequest2));\n-\n-    builder = new SingleRequestBuilder();\n-    builder.overrideWidth = builder.overrideWidth * 2;\n-    SingleRequest<List> widthRequest = builder.build();\n-    assertTrue(widthRequest.isEquivalentTo(widthRequest));\n-    assertFalse(widthRequest.isEquivalentTo(originalRequest1));\n-    assertFalse(originalRequest1.isEquivalentTo(widthRequest));\n-\n-    builder = new SingleRequestBuilder();\n-    builder.overrideHeight = builder.overrideHeight * 2;\n-    SingleRequest<List> heightRequest = builder.build();\n-    assertTrue(heightRequest.isEquivalentTo(heightRequest));\n-    assertFalse(heightRequest.isEquivalentTo(originalRequest1));\n-    assertFalse(originalRequest1.isEquivalentTo(heightRequest));\n-\n-    builder = new SingleRequestBuilder();\n-    builder.model = 12345679;\n-    SingleRequest<List> modelRequest = builder.build();\n-    assertTrue(modelRequest.isEquivalentTo(modelRequest));\n-    assertFalse(modelRequest.isEquivalentTo(originalRequest1));\n-    assertFalse(originalRequest1.isEquivalentTo(modelRequest));\n-\n-    builder = new SingleRequestBuilder();\n-    builder.model = null;\n-    SingleRequest<List> nullModelRequest = builder.build();\n-    assertTrue(nullModelRequest.isEquivalentTo(nullModelRequest));\n-    assertFalse(nullModelRequest.isEquivalentTo(originalRequest1));\n-    assertFalse(originalRequest1.isEquivalentTo(nullModelRequest));\n-\n-    builder = new SingleRequestBuilder();\n-    builder.errorDrawable = new ColorDrawable(Color.GRAY);\n-    SingleRequest<List> errorRequest = builder.build();\n-    assertTrue(errorRequest.isEquivalentTo(errorRequest));\n-    assertFalse(errorRequest.isEquivalentTo(originalRequest1));\n-    assertFalse(originalRequest1.isEquivalentTo(errorRequest));\n-\n-    builder = new SingleRequestBuilder();\n-    builder.priority = Priority.LOW;\n-    SingleRequest<List> priorityRequest = builder.build();\n-    assertTrue(priorityRequest.isEquivalentTo(priorityRequest));\n-    assertFalse(priorityRequest.isEquivalentTo(originalRequest1));\n-    assertFalse(originalRequest1.isEquivalentTo(priorityRequest));\n-  }\n-\n-  static class SingleRequestBuilder {\n+    EquivalenceTester<SingleRequestBuilder> tester = EquivalenceTester\n+        .of(new Equivalence<SingleRequestBuilder>() {\n+          @Override\n+          protected boolean doEquivalent(\n+              @NonNull SingleRequestBuilder a, @NonNull SingleRequestBuilder b) {\n+            return a.build().isEquivalentTo(b.build()) && b.build().isEquivalentTo(a.build());\n+          }\n \n+          @Override\n+          protected int doHash(@NonNull SingleRequestBuilder listSingleRequest) {\n+            return 0;\n+          }\n+        });\n+    tester\n+        .addEquivalenceGroup(\n+            new SingleRequestBuilder(),\n+            new SingleRequestBuilder(),\n+            // Non-null request listeners are treated as equivalent, even if they're not equal.\n+            new SingleRequestBuilder().setRequestListener(mock(RequestListener.class)))\n+        .addEquivalenceGroup(\n+            new SingleRequestBuilder().setRequestListener(null),\n+            new SingleRequestBuilder().setRequestListener(null))\n+        .addEquivalenceGroup(\n+            new SingleRequestBuilder().setOverrideHeight(500),\n+            new SingleRequestBuilder().setOverrideHeight(500))\n+        .addEquivalenceGroup(\n+            new SingleRequestBuilder().setOverrideWidth(500),\n+            new SingleRequestBuilder().setOverrideWidth(500))\n+        .addEquivalenceGroup(\n+            new SingleRequestBuilder().setModel(12345),\n+            new SingleRequestBuilder().setModel(12345))\n+        .addEquivalenceGroup(\n+            new SingleRequestBuilder().setModel(null),\n+            new SingleRequestBuilder().setModel(null))\n+        .addEquivalenceGroup(\n+            new SingleRequestBuilder().setErrorDrawable(new ColorDrawable(Color.GRAY)),\n+            new SingleRequestBuilder().setErrorDrawable(new ColorDrawable(Color.GRAY)))\n+        .addEquivalenceGroup(\n+            new SingleRequestBuilder().setPriority(Priority.LOW),\n+            new SingleRequestBuilder().setPriority(Priority.LOW))\n+        .test();\n+  }\n+\n+  static final class SingleRequestBuilder {\n     private Engine engine = mock(Engine.class);\n     private Number model = 123456;\n     @SuppressWarnings(\"unchecked\")\n@@ -899,7 +900,7 @@ static class SingleRequestBuilder {\n     private int overrideHeight = -1;\n     private List<?> result = new ArrayList<>();\n     private GlideContext glideContext = mock(GlideContext.class);\n-    private Key signature = mock(Key.class);\n+    private Key signature = new ObjectKey(12345);\n     private Priority priority = Priority.HIGH;\n     private boolean useUnlimitedSourceGeneratorsPool = false;\n     private Class<List> transcodeClass = List.class;",
      "parent_sha": "0b3e84bb91a5216541a89aa98e0ef6fa6db4e4c6"
    }
  },
  {
    "oid": "8856168e303b108a5e0c5f1554573670083349e6",
    "message": "Fix bitmap recycling bug",
    "date": "2013-07-11T18:44:03Z",
    "url": "https://github.com/bumptech/glide/commit/8856168e303b108a5e0c5f1554573670083349e6",
    "details": {
      "sha": "b783e48096174a89bf73066bf5284b824e40c576",
      "filename": "library/src/com/bumptech/photos/resize/ImageManager.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bumptech/glide/blob/8856168e303b108a5e0c5f1554573670083349e6/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/8856168e303b108a5e0c5f1554573670083349e6/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java?ref=8856168e303b108a5e0c5f1554573670083349e6",
      "patch": "@@ -659,7 +659,15 @@ public void run() {\n \n \n     private void putInMemoryCache(int key, Bitmap bitmap) {\n-        if (memoryCache.put(key, bitmap) != bitmap) {\n+        final boolean inCache;\n+        synchronized (memoryCache) {\n+            inCache = memoryCache.contains(key);\n+            if (!inCache) {\n+                memoryCache.put(key, bitmap);\n+            }\n+        }\n+\n+        if (!inCache) {\n             acquireBitmap(bitmap);\n             bitmapReferenceCounter.markPending(bitmap);\n         }",
      "parent_sha": "939a18deade2490d0693f62ee86bdccbc9485127"
    }
  },
  {
    "oid": "36db20745f9e19858647f754a6caf2785b23e781",
    "message": "Remove unnecessary code in SafeKeyGenerator",
    "date": "2014-03-26T15:07:37Z",
    "url": "https://github.com/bumptech/glide/commit/36db20745f9e19858647f754a6caf2785b23e781",
    "details": {
      "sha": "20d01f29e0bd6c6b25cd7e4ce20dd331d5f51f1c",
      "filename": "library/src/com/bumptech/glide/resize/SafeKeyGenerator.java",
      "status": "modified",
      "additions": 6,
      "deletions": 73,
      "changes": 79,
      "blob_url": "https://github.com/bumptech/glide/blob/36db20745f9e19858647f754a6caf2785b23e781/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FSafeKeyGenerator.java",
      "raw_url": "https://github.com/bumptech/glide/raw/36db20745f9e19858647f754a6caf2785b23e781/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FSafeKeyGenerator.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FSafeKeyGenerator.java?ref=36db20745f9e19858647f754a6caf2785b23e781",
      "patch": "@@ -1,96 +1,29 @@\n package com.bumptech.glide.resize;\n \n-import android.annotation.TargetApi;\n-import android.os.Build;\n import com.bumptech.glide.util.LruCache;\n import com.bumptech.glide.util.Util;\n \n import java.io.UnsupportedEncodingException;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.util.ArrayDeque;\n-import java.util.LinkedList;\n-import java.util.Queue;\n \n public class SafeKeyGenerator {\n-    private final LruCache<LoadId, String> loadIdToSafeHash = new LruCache<LoadId, String>(250);\n-    private final LoadIdPool loadIdPool = new LoadIdPool();\n+    private final LruCache<String, String> loadIdToSafeHash = new LruCache<String, String>(250);\n \n     public String getSafeKey(BitmapLoad task) {\n-        LoadId loadId = loadIdPool.get(task.getId());\n-        String safeKey = loadIdToSafeHash.get(loadId);\n+        final String id = task.getId();\n+        String safeKey = loadIdToSafeHash.get(id);\n         if (safeKey == null) {\n             try {\n-                safeKey = loadId.generateSafeKey();\n+                MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\n+                messageDigest.update(id.getBytes(\"UTF-8\"));\n+                safeKey = Util.sha256BytesToHex(messageDigest.digest());\n             } catch (UnsupportedEncodingException e) {\n                 e.printStackTrace();\n             } catch (NoSuchAlgorithmException e) {\n                 e.printStackTrace();\n             }\n-            loadIdToSafeHash.put(loadId, safeKey);\n-        } else {\n-            loadIdPool.offer(loadId);\n         }\n         return safeKey;\n     }\n-\n-    private class LoadIdPool {\n-        private static final int MAX_SIZE = 20;\n-        private Queue<LoadId> loadIdQueue;\n-\n-        @TargetApi(9)\n-        public LoadIdPool() {\n-            if (Build.VERSION.SDK_INT >= 9) {\n-                loadIdQueue = new ArrayDeque<LoadId>(MAX_SIZE);\n-            } else {\n-                loadIdQueue = new LinkedList<LoadId>();\n-            }\n-        }\n-\n-        public LoadId get(String id) {\n-            LoadId loadId = loadIdQueue.poll();\n-            if (loadId == null) {\n-                loadId = new LoadId();\n-            }\n-            loadId.init(id);\n-            return loadId;\n-        }\n-\n-        public void offer(LoadId loadId) {\n-            if (loadIdQueue.size() < MAX_SIZE) {\n-                loadIdQueue.offer(loadId);\n-            }\n-        }\n-    }\n-\n-    private class LoadId {\n-        private String id;\n-\n-        public void init(String id) {\n-            this.id = id;\n-        }\n-\n-        public String generateSafeKey() throws UnsupportedEncodingException, NoSuchAlgorithmException {\n-            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\n-            messageDigest.update(id.getBytes(\"UTF-8\"));\n-            return Util.sha256BytesToHex(messageDigest.digest());\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-\n-            LoadId loadId = (LoadId) o;\n-\n-            if (!id.equals(loadId.id)) return false;\n-\n-            return true;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return id.hashCode();\n-        }\n-    }\n }",
      "parent_sha": "9aa6dd1e9e9497e54d38a8f5f686dd510b224ee1"
    }
  },
  {
    "oid": "82e98eefdf8d3c867f98b138236914e7267a97dc",
    "message": "Increaes the size of the bitmap cache",
    "date": "2012-12-29T03:24:26Z",
    "url": "https://github.com/bumptech/glide/commit/82e98eefdf8d3c867f98b138236914e7267a97dc",
    "details": {
      "sha": "4ed03112b45edd4a9d60f15cbed36d6ef0689278",
      "filename": "src/com/bumptech/photos/cache/SizedBitmapCache.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/82e98eefdf8d3c867f98b138236914e7267a97dc/src%2Fcom%2Fbumptech%2Fphotos%2Fcache%2FSizedBitmapCache.java",
      "raw_url": "https://github.com/bumptech/glide/raw/82e98eefdf8d3c867f98b138236914e7267a97dc/src%2Fcom%2Fbumptech%2Fphotos%2Fcache%2FSizedBitmapCache.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/src%2Fcom%2Fbumptech%2Fphotos%2Fcache%2FSizedBitmapCache.java?ref=82e98eefdf8d3c867f98b138236914e7267a97dc",
      "patch": "@@ -19,7 +19,7 @@\n  * To change this template use File | Settings | File Templates.\n  */\n public class SizedBitmapCache {\n-    private static final int MAX_PER_SIZE = 8;\n+    private static final int MAX_PER_SIZE = 10;\n     private Map<String, Queue<Bitmap>> availableBitmaps = new HashMap<String, Queue<Bitmap>>();\n \n     public void put(Bitmap bitmap) {",
      "parent_sha": "7d123344ca35c80e24868f9a9f969c80683e80ec"
    }
  },
  {
    "oid": "64b6d88e922b1818976a45ed30754b18e9b9e6e7",
    "message": "Fix flickr api return url for incorrect image size\n\nHashMap.keySet is not ordered :(",
    "date": "2013-07-15T18:41:33Z",
    "url": "https://github.com/bumptech/glide/commit/64b6d88e922b1818976a45ed30754b18e9b9e6e7",
    "details": {
      "sha": "1755d44fb23c221e0efbaca4c368c8b48abd4e45",
      "filename": "samples/flickr/src/com/bumptech/flickr/api/Api.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bumptech/glide/blob/64b6d88e922b1818976a45ed30754b18e9b9e6e7/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FApi.java",
      "raw_url": "https://github.com/bumptech/glide/raw/64b6d88e922b1818976a45ed30754b18e9b9e6e7/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FApi.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FApi.java?ref=64b6d88e922b1818976a45ed30754b18e9b9e6e7",
      "patch": "@@ -10,6 +10,7 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -37,20 +38,25 @@ public class Api {\n         put(150, \"q\");\n         put(240, \"m\");\n         put(320, \"n\");\n-        put(500, \"-\");\n         put(640, \"z\");\n         put(1024, \"b\");\n-        put(Integer.MAX_VALUE, \"o\");\n     }};\n+\n+    private static final List<Integer> SORTED_SIZE_KEYS = new ArrayList<Integer>(EDGE_TO_SIZE_KEY.size());\n+    static {\n+        SORTED_SIZE_KEYS.addAll(EDGE_TO_SIZE_KEY.keySet());\n+        Collections.sort(SORTED_SIZE_KEYS);\n+    }\n     private final String sizeKey;\n \n     private static String getSizeKey(int width, int height) {\n-        final int largestEdge = width > height ? width : height;\n+        final int largestEdge = Math.max(width, height);\n \n-        final String result = EDGE_TO_SIZE_KEY.get(Integer.MAX_VALUE);\n-        for (int edge : EDGE_TO_SIZE_KEY.keySet()) {\n+        String result = EDGE_TO_SIZE_KEY.get(SORTED_SIZE_KEYS.get(SORTED_SIZE_KEYS.size() - 1));\n+        for (int edge : SORTED_SIZE_KEYS) {\n             if (largestEdge <= edge) {\n-                return EDGE_TO_SIZE_KEY.get(edge);\n+                result = EDGE_TO_SIZE_KEY.get(edge);\n+                break;\n             }\n         }\n         return result;",
      "parent_sha": "806522ed49bab96c11780a7986bd16767d1a0226"
    }
  },
  {
    "oid": "5580e517d05d178946369e178eb16022224dd362",
    "message": "External storage exists but not writable (#2641)\n\n* Some phones (like Huawei P9) are detecting external storage as available, but it's not writable.",
    "date": "2017-11-24T18:34:51Z",
    "url": "https://github.com/bumptech/glide/commit/5580e517d05d178946369e178eb16022224dd362",
    "details": {
      "sha": "4f2743b1eacf09ce3818c8586518f939e8afc0a3",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/5580e517d05d178946369e178eb16022224dd362/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fcache%2FExternalPreferredCacheDiskCacheFactory.java",
      "raw_url": "https://github.com/bumptech/glide/raw/5580e517d05d178946369e178eb16022224dd362/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fcache%2FExternalPreferredCacheDiskCacheFactory.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fcache%2FExternalPreferredCacheDiskCacheFactory.java?ref=5580e517d05d178946369e178eb16022224dd362",
      "patch": "@@ -52,7 +52,7 @@ public File getCacheDirectory() {\n         File cacheDirectory = context.getExternalCacheDir();\n \n         // Shared storage is not available.\n-        if (cacheDirectory == null) {\n+        if ((cacheDirectory == null) || (!cacheDirectory.canWrite())) {\n           return internalCacheDirectory;\n         }\n         if (diskCacheName != null) {",
      "parent_sha": "d466c51d575fb6a7141ca96ae888a933652c6556"
    }
  },
  {
    "oid": "e52b12cbd7528e8c483115f271bb891cc64d3ab3",
    "message": "update VolleyModelLoader to remove repeated code",
    "date": "2013-07-20T15:16:56Z",
    "url": "https://github.com/bumptech/glide/commit/e52b12cbd7528e8c483115f271bb891cc64d3ab3",
    "details": {
      "sha": "b4649a00e93a30e76e5f122af9fa006d89c9c107",
      "filename": "library/src/com/bumptech/glide/loader/model/VolleyModelLoader.java",
      "status": "modified",
      "additions": 13,
      "deletions": 19,
      "changes": 32,
      "blob_url": "https://github.com/bumptech/glide/blob/e52b12cbd7528e8c483115f271bb891cc64d3ab3/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Floader%2Fmodel%2FVolleyModelLoader.java",
      "raw_url": "https://github.com/bumptech/glide/raw/e52b12cbd7528e8c483115f271bb891cc64d3ab3/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Floader%2Fmodel%2FVolleyModelLoader.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Floader%2Fmodel%2FVolleyModelLoader.java?ref=e52b12cbd7528e8c483115f271bb891cc64d3ab3",
      "patch": "@@ -5,34 +5,28 @@\n import com.bumptech.glide.loader.stream.VolleyStreamLoader;\n \n /**\n- * Created with IntelliJ IDEA.\n- * User: sam\n- * Date: 7/19/13\n- * Time: 5:34 PM\n- * To change this template use File | Settings | File Templates.\n+ * A base ModelLoader for using Volley to fetch an image from a model that\n+ * can readily be converted into a url\n  */\n-public abstract class VolleyModelLoader<T> implements ModelLoader<T>{\n+public abstract class VolleyModelLoader<T> extends BaseModelLoader<T> {\n     private final RequestQueue requestQueue;\n-    private VolleyStreamLoader current = null;\n \n     public VolleyModelLoader(RequestQueue requestQueue) {\n         this.requestQueue = requestQueue;\n     }\n \n     @Override\n-    public StreamLoader getStreamOpener(T model, int width, int height) {\n-        clear();\n-        current = new VolleyStreamLoader(requestQueue, getUrl(model, width, height));\n-        return current;\n-    }\n-\n-    @Override\n-    public void clear() {\n-        if (current != null) {\n-            current.cancel();\n-            current = null;\n-        }\n+    protected StreamLoader buildStreamOpener(T model, int width, int height) {\n+        return new VolleyStreamLoader(requestQueue, getUrl(model, width, height));\n     }\n \n+    /**\n+     * Get the url to load the image from\n+     *\n+     * @param model The model representing the image\n+     * @param width The width of the view where the image will be displayed\n+     * @param height The height of the view where the image will be displayed\n+     * @return A String url\n+     */\n     protected abstract String getUrl(T model, int width, int height);\n }",
      "parent_sha": "b76f0ab40cb6c420eea98f0e22aefb84595e2c43"
    }
  },
  {
    "oid": "6dc03d84d5a009e6a4535381f5b3ec8aeced2912",
    "message": "Avoid holding a lock while calling other RequestManagers in clear().\n\nPiperOrigin-RevId: 260756583",
    "date": "2019-07-30T18:19:30Z",
    "url": "https://github.com/bumptech/glide/commit/6dc03d84d5a009e6a4535381f5b3ec8aeced2912",
    "details": {
      "sha": "a33e2b9ec476f5ed6fda6ac11c47c1764d6ad250",
      "filename": "library/src/main/java/com/bumptech/glide/RequestManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bumptech/glide/blob/6dc03d84d5a009e6a4535381f5b3ec8aeced2912/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/6dc03d84d5a009e6a4535381f5b3ec8aeced2912/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java?ref=6dc03d84d5a009e6a4535381f5b3ec8aeced2912",
      "patch": "@@ -590,7 +590,7 @@ public void clear(@NonNull View view) {\n    *\n    * @param target The Target to cancel loads for.\n    */\n-  public synchronized void clear(@Nullable final Target<?> target) {\n+  public void clear(@Nullable final Target<?> target) {\n     if (target == null) {\n       return;\n     }\n@@ -617,8 +617,8 @@ private void untrackOrDelegate(@NonNull Target<?> target) {\n     // the corresponding Activity or Fragment is destroyed because retaining any reference to the\n     // RequestManager leaks memory. It's possible that there's some brief period of time during or\n     // immediately after onDestroy where this is reasonable, but I can't think of why.\n-    if (!isOwnedByUs && !glide.removeFromManagers(target) && target.getRequest() != null) {\n-      Request request = target.getRequest();\n+    Request request = target.getRequest();\n+    if (!isOwnedByUs && !glide.removeFromManagers(target) && request != null) {\n       target.setRequest(null);\n       request.clear();\n     }",
      "parent_sha": "0ac450c614ffb8db021c0c43a84a02fa2a2f951f"
    }
  },
  {
    "oid": "df5ba684898ad99c7b4c7b6dd4f11ba6656cddfa",
    "message": "DownloadWorker->MemoryDownloadWorker",
    "date": "2013-01-10T02:38:18Z",
    "url": "https://github.com/bumptech/glide/commit/df5ba684898ad99c7b4c7b6dd4f11ba6656cddfa",
    "details": {
      "sha": "4545bd87fe677024e093a7e36c29aa8510336ad1",
      "filename": "samples/flickr/src/com/bumptech/flickr/api/Downloader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bumptech/glide/blob/df5ba684898ad99c7b4c7b6dd4f11ba6656cddfa/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FDownloader.java",
      "raw_url": "https://github.com/bumptech/glide/raw/df5ba684898ad99c7b4c7b6dd4f11ba6656cddfa/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FDownloader.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fflickr%2Fapi%2FDownloader.java?ref=df5ba684898ad99c7b4c7b6dd4f11ba6656cddfa",
      "patch": "@@ -2,7 +2,6 @@\n \n import android.os.Handler;\n import android.os.HandlerThread;\n-import com.bumptech.photos.util.Log;\n \n import java.io.BufferedInputStream;\n import java.io.File;\n@@ -57,7 +56,7 @@ private void post(Runnable runnable) {\n     }\n \n     public void download(String url, MemoryCallback cb) {\n-        post(new DownloadWorker(url, cb));\n+        post(new MemoryDownloadWorker(url, cb));\n     }\n \n     public void download(String url, File out, DiskCallback cb) {\n@@ -77,7 +76,6 @@ public DiskDownloadWorker(String url, File output, DiskCallback cb) {\n \n         @Override\n         public void run() {\n-            Log.d(\"Downloader: run\");\n             HttpURLConnection urlConnection = null;\n             try {\n                 final URL targetUrl = new URL(url);\n@@ -111,12 +109,12 @@ private void writeToOutput(InputStream in, OutputStream out) throws IOException\n         }\n     }\n \n-    private class DownloadWorker implements Runnable {\n+    private class MemoryDownloadWorker implements Runnable {\n \n         private final String url;\n         private final MemoryCallback cb;\n \n-        public DownloadWorker(String url, MemoryCallback cb) {\n+        public MemoryDownloadWorker(String url, MemoryCallback cb) {\n             this.url = url;\n             this.cb = cb;\n         }",
      "parent_sha": "5a82c4f602293960de89aa1065b2e4cfb84aafb3"
    }
  },
  {
    "oid": "75a875cec2a817841ea688a46ec4f1414d0c0202",
    "message": "Add comments to ImageManager builder",
    "date": "2013-07-08T22:54:21Z",
    "url": "https://github.com/bumptech/glide/commit/75a875cec2a817841ea688a46ec4f1414d0c0202",
    "details": {
      "sha": "458062d7c9403c506461a57d4b68ed4c0f7e1bc2",
      "filename": "library/src/com/bumptech/photos/resize/ImageManager.java",
      "status": "modified",
      "additions": 85,
      "deletions": 10,
      "changes": 95,
      "blob_url": "https://github.com/bumptech/glide/blob/75a875cec2a817841ea688a46ec4f1414d0c0202/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/75a875cec2a817841ea688a46ec4f1414d0c0202/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java?ref=75a875cec2a817841ea688a46ec4f1414d0c0202",
      "patch": "@@ -75,7 +75,7 @@ private enum ResizeType {\n      * for newer devices.\n      *\n      * @param context\n-     * @return the maximum safe size for the memory cache for this devices in bytes\n+     * @return The maximum safe size for the memory cache for this devices in bytes\n      */\n     public static int getSafeMemoryCacheSize(Context context){\n         final ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n@@ -85,11 +85,22 @@ public static int getSafeMemoryCacheSize(Context context){\n     /**\n      * Try to get the external cache directory if available and default to the internal. Use a default name for the\n      * cache directory if no name is provided\n+     *\n+     * @param context A context\n+     * @return A File representing the default disk cache directory\n      */\n     public static File getPhotoCacheDir(Context context) {\n         return getPhotoCacheDir(context, DEFAULT_DISK_CACHE_DIR);\n     }\n \n+    /**\n+     * Try to get the external cache directory if available and default to the internal. Use a default name for the\n+     * cache directory if no name is provided\n+     *\n+     * @param context A context\n+     * @param cacheName The name of the subdirectory in which to store the cache\n+     * @return A File representing the default disk cache directory\n+     */\n     public static File getPhotoCacheDir(Context context, String cacheName) {\n         String cachePath = null;\n \n@@ -143,55 +154,119 @@ public static class Builder {\n \n         public BitmapFactory.Options decodeBitmapOptions = ImageResizer.getDefaultOptions();\n \n+        /**\n+         * Create a new builder. No options are required. By default will create an lru memory cache, an lru disk\n+         * cache, and will recycle bitmaps if the device sdk version allows it.\n+         *\n+         * @param context Any context (will not be retained after build)\n+         */\n         public Builder(Context context) {\n             this.context = context;\n         }\n \n+        /**\n+         * Builds an ImageManager. Any defaults that haven't been set will be set\n+         *\n+         * @return A new ImageManager\n+         */\n         public ImageManager build() {\n             setDefaults();\n \n             return new ImageManager(this);\n         }\n \n+        /**\n+         * Sets the service that will be used to load and resize images not yet in the disk cache.\n+         *\n+         * Defaults to a fixed thread pool with the number of threads equal to the number of available processors\n+         * where every thread is run at min priority.\n+         *\n+         * @param resizeService The executor service to use to resize images\n+         * @return This Builder\n+         */\n         public Builder setResizeService(ExecutorService resizeService) {\n             this.resizeService = resizeService;\n             return this;\n         }\n \n+        /**\n+         * Sets the format that will be used to write bitmaps to disk in the disk cache (if one is present). Defaults\n+         * to JPEG. Set to PNG if you need transparency\n+         *\n+         * @param bitmapCompressFormat The format to pass to\n+         *  {@link Bitmap#compress(android.graphics.Bitmap.CompressFormat, int, java.io.OutputStream)} when saving\n+         *  to the disk cache\n+         * @return This Builder\n+         */\n         public Builder setBitmapCompressFormat(Bitmap.CompressFormat bitmapCompressFormat) {\n             this.bitmapCompressFormat = bitmapCompressFormat;\n             return this;\n         }\n \n+        /**\n+         * Set whether or not to recycle bitmaps. Defaults to enabled. If enabled, devices with SDK < 11 will not\n+         * recycle bitmaps while those with SDK >= 11 will recycle bitmaps. See also\n+         * {@link ImageManager.Builder#setMaxBitmapsPerSize(int)}\n+         *\n+         * @param recycleBitmaps True to enable recycling bitmaps, false otherwise.\n+         * @return This Builder\n+         */\n         public Builder setRecycleBitmaps(boolean recycleBitmaps) {\n             this.recycleBitmaps = recycleBitmaps && CAN_RECYCLE;\n             return this;\n         }\n \n+        /**\n+         * Set the memory cache implementation. See also\n+         * {@link com.bumptech.photos.resize.ImageManager.Builder#disableMemoryCache()}\n+         *\n+         * @param memoryCache The memory cache implementation to use\n+         * @return This Builder\n+         */\n         public Builder setMemoryCache(MemoryCache memoryCache) {\n             this.memoryCache = memoryCache;\n             return this;\n         }\n \n+        /**\n+         * Call to prevent the ImageManager from using a memory cache.\n+         *\n+         * @return This Builder\n+         */\n         public Builder disableMemoryCache() {\n-            if (memoryCache != null) {\n-                throw new IllegalArgumentException(\"Can't disable memory cache after setting it\");\n-            }\n-            memoryCache = new MemoryCacheAdapter();\n-            return this;\n+            return setMemoryCache(new MemoryCacheAdapter());\n         }\n \n+        /**\n+         * Set the disk cache implementation. See also\n+         *  {@link com.bumptech.photos.resize.ImageManager.Builder#disableDiskCache()}\n+         *\n+         * @param diskCache The disk cache implementation to use\n+         * @return This Builder\n+         */\n         public Builder setDiskCache(DiskCache diskCache) {\n             this.diskCache = diskCache;\n             return this;\n         }\n \n+        /**\n+         * Call to prevent the ImageManager from using a disk cache\n+         * @return\n+         */\n         public Builder disableDiskCache() {\n-            diskCache = new DiskCacheAdapter();\n-            return this;\n+            return setDiskCache(new DiskCacheAdapter());\n         }\n \n-\n+        /**\n+         * Set the maximum number of bitmaps for a given size to store in memory at one time. Defaults to 20. The larger\n+         * the number, the more memory will be used to store recycled bitmaps but the smoother scrolling will be. Set\n+         * this * number larger when loading lots of smaller photos and/or when you expect your users to scroll rapidly.\n+         * Set this number smaller when loading larger images and/or a lot of different sizes of images and/or when you\n+         * expect your users to scroll relatively slowly.\n+         *\n+         * @param maxBitmapsPerSize The maximum number of bitmaps of any given size to keep in the recycle pool\n+         * @return This Builder\n+         */\n         public Builder setMaxBitmapsPerSize(int maxBitmapsPerSize) {\n             this.maxBitmapsPerSize = maxBitmapsPerSize;\n             return this;\n@@ -219,7 +294,7 @@ public Thread newThread(Runnable runnable) {\n         }\n     }\n \n-    public ImageManager(Builder builder) {\n+    private ImageManager(Builder builder) {\n         HandlerThread bgThread = new HandlerThread(\"bg_thread\");\n         bgThread.start();\n         bgHandler = new Handler(bgThread.getLooper());",
      "parent_sha": "e87f04030d4bd0570551ae9333085c4d8710a443"
    }
  },
  {
    "oid": "9840c91e1b2d358d9c9367654eacd4b4719ed849",
    "message": "Disable ParcelFileDescriptor rewinding for Robolectric tests as Os#lseek does not work in Robolectric.\n\nPiperOrigin-RevId: 437780484",
    "date": "2022-03-28T16:39:17Z",
    "url": "https://github.com/bumptech/glide/commit/9840c91e1b2d358d9c9367654eacd4b4719ed849",
    "details": {
      "sha": "0f7c5f3c2c795be0c1f34a7eedf2fc921b703643",
      "filename": "library/src/main/java/com/bumptech/glide/load/data/ParcelFileDescriptorRewinder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bumptech/glide/blob/9840c91e1b2d358d9c9367654eacd4b4719ed849/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FParcelFileDescriptorRewinder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/9840c91e1b2d358d9c9367654eacd4b4719ed849/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FParcelFileDescriptorRewinder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FParcelFileDescriptorRewinder.java?ref=9840c91e1b2d358d9c9367654eacd4b4719ed849",
      "patch": "@@ -18,8 +18,9 @@ public final class ParcelFileDescriptorRewinder implements DataRewinder<ParcelFi\n   private final InternalRewinder rewinder;\n \n   public static boolean isSupported() {\n-    // Os.lseek() is only supported on API 21+.\n-    return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;\n+    // Os.lseek() is only supported on API 21+ and does not work in Robolectric.\n+    return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP\n+        && !\"robolectric\".equals(Build.FINGERPRINT);\n   }\n \n   @RequiresApi(Build.VERSION_CODES.LOLLIPOP)",
      "parent_sha": "50702ef9a90968349051856c5d3b692987b38cbf"
    }
  },
  {
    "oid": "118ddef77f1493f4516c15402ce2c9edf93b60af",
    "message": "Don' acquire bitmap for memory cache when not used",
    "date": "2013-01-31T17:00:37Z",
    "url": "https://github.com/bumptech/glide/commit/118ddef77f1493f4516c15402ce2c9edf93b60af",
    "details": {
      "sha": "9fe5b233283b90d95e15e706439690b1dc3a97b2",
      "filename": "library/src/com/bumptech/photos/resize/ImageManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/118ddef77f1493f4516c15402ce2c9edf93b60af/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/118ddef77f1493f4516c15402ce2c9edf93b60af/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java?ref=118ddef77f1493f4516c15402ce2c9edf93b60af",
      "patch": "@@ -528,7 +528,6 @@ public void run() {\n                 mainHandler.post(new Runnable() {\n                     @Override\n                     public void run() {\n-                        acquireBitmap(finalResult);\n                         putInMemoryCache(key, finalResult);\n                         cb.onLoadCompleted(finalResult);\n                     }\n@@ -565,6 +564,7 @@ private Bitmap getFromMemoryCache(int key) {\n \n     private void putInMemoryCache(int key, Bitmap bitmap) {\n         if (memoryCache != null) {\n+            acquireBitmap(bitmap);\n             memoryCache.put(key, bitmap);\n         }\n     }",
      "parent_sha": "81d2ccfbb0bf21224db07b2f85942d034e72e163"
    }
  },
  {
    "oid": "edbf8bbbb43547470a3675112f177fdeef9fcc95",
    "message": "Convert DiskCacheStrategy to an abstract class.\n\nWe're using an abstract class rather than an \ninterface so that it is possible to make changes\nwithout breaking existing users.",
    "date": "2015-06-05T02:02:23Z",
    "url": "https://github.com/bumptech/glide/commit/edbf8bbbb43547470a3675112f177fdeef9fcc95",
    "details": {
      "sha": "0633c1c1695083d025ab44ac53ab05ef297ff549",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java",
      "status": "modified",
      "additions": 75,
      "deletions": 25,
      "changes": 100,
      "blob_url": "https://github.com/bumptech/glide/blob/edbf8bbbb43547470a3675112f177fdeef9fcc95/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDiskCacheStrategy.java",
      "raw_url": "https://github.com/bumptech/glide/raw/edbf8bbbb43547470a3675112f177fdeef9fcc95/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDiskCacheStrategy.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDiskCacheStrategy.java?ref=edbf8bbbb43547470a3675112f177fdeef9fcc95",
      "patch": "@@ -6,13 +6,13 @@\n /**\n  * Set of available caching strategies for media.\n  */\n-public enum DiskCacheStrategy {\n+public abstract class DiskCacheStrategy {\n \n   /**\n    * Caches remote data with both {@link #DATA} and {@link #RESOURCE}, and local data with\n    * {@link #RESOURCE} only.\n    */\n-  ALL(true /*decodeCachedData*/, true /*decodeCachedResource*/) {\n+  public static final DiskCacheStrategy ALL = new DiskCacheStrategy() {\n     @Override\n     public boolean isDataCacheable(DataSource dataSource) {\n       return dataSource == DataSource.REMOTE;\n@@ -23,11 +23,22 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d\n         EncodeStrategy encodeStrategy) {\n       return dataSource != DataSource.RESOURCE_DISK_CACHE && dataSource != DataSource.MEMORY_CACHE;\n     }\n-  },\n+\n+    @Override\n+    public boolean decodeCachedResource() {\n+      return true;\n+    }\n+\n+    @Override\n+    public boolean decodeCachedData() {\n+      return true;\n+    }\n+  };\n+\n   /**\n    * Saves no data to cache.\n    */\n-  NONE(false /*decodeCachedData*/, false /*decodeCachedResource*/) {\n+  public static final DiskCacheStrategy NONE = new DiskCacheStrategy() {\n     @Override\n     public boolean isDataCacheable(DataSource dataSource) {\n       return false;\n@@ -38,11 +49,22 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d\n         EncodeStrategy encodeStrategy) {\n       return false;\n     }\n-  },\n+\n+    @Override\n+    public boolean decodeCachedResource() {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean decodeCachedData() {\n+      return false;\n+    }\n+  };\n+\n   /**\n    * Writes retrieved data directly to the disk cache before it's decoded.\n    */\n-  DATA(true /*decodeCachedData*/, false /*decodeCachedResource*/) {\n+  public static final DiskCacheStrategy DATA = new DiskCacheStrategy() {\n     @Override\n     public boolean isDataCacheable(DataSource dataSource) {\n       return dataSource != DataSource.DATA_DISK_CACHE && dataSource != DataSource.MEMORY_CACHE;\n@@ -53,30 +75,52 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d\n         EncodeStrategy encodeStrategy) {\n       return false;\n     }\n-  },\n+\n+    @Override\n+    public boolean decodeCachedResource() {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean decodeCachedData() {\n+      return true;\n+    }\n+  };\n+\n   /**\n    * Writes resources to disk after they've been decoded.\n    */\n-  RESOURCE(false /*decodeCachedData*/, true /*decodeCachedResource*/) {\n+  public static final DiskCacheStrategy RESOURCE = new DiskCacheStrategy() {\n     @Override\n     public boolean isDataCacheable(DataSource dataSource) {\n-      return false;\n+      return true;\n     }\n \n     @Override\n     public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,\n         EncodeStrategy encodeStrategy) {\n       return dataSource != DataSource.RESOURCE_DISK_CACHE && dataSource != DataSource.MEMORY_CACHE;\n     }\n-  },\n+\n+    @Override\n+    public boolean decodeCachedResource() {\n+      return true;\n+    }\n+\n+    @Override\n+    public boolean decodeCachedData() {\n+      return false;\n+    }\n+  };\n+\n   /**\n    * Tries to intelligently choose a strategy based on the data source of the\n    * {@link com.bumptech.glide.load.data.DataFetcher} and the\n    * {@link com.bumptech.glide.load.EncodeStrategy} of the\n    * {@link com.bumptech.glide.load.ResourceEncoder} (if an\n    * {@link com.bumptech.glide.load.ResourceEncoder} is available).\n    */\n-  AUTOMATIC(true /*decodeCachedData*/, true /*decodeCachedResource*/) {\n+  public static final DiskCacheStrategy AUTOMATIC = new DiskCacheStrategy() {\n     @Override\n     public boolean isDataCacheable(DataSource dataSource) {\n       return dataSource == DataSource.REMOTE;\n@@ -89,39 +133,45 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d\n           || dataSource == DataSource.LOCAL)\n           && encodeStrategy == EncodeStrategy.TRANSFORMED;\n     }\n-  };\n \n-  private final boolean decodeCachedData;\n-  private final boolean decodeCachedResource;\n+    @Override\n+    public boolean decodeCachedResource() {\n+      return true;\n+    }\n \n-  DiskCacheStrategy(boolean decodeCachedData,\n-      boolean decodeCachedResource) {\n-    this.decodeCachedData = decodeCachedData;\n-    this.decodeCachedResource = decodeCachedResource;\n-  }\n+    @Override\n+    public boolean decodeCachedData() {\n+      return true;\n+    }\n+  };\n \n   /**\n    * Returns true if this request should cache the original unmodified data.\n+   *\n+   * @param dataSource Indicates where the data was originally retrieved.\n    */\n   public abstract boolean isDataCacheable(DataSource dataSource);\n \n   /**\n    * Returns true if this request should cache the final transformed resource.\n+   *\n+   * @param isFromAlternateCacheKey {@code true} if the resource we've decoded was loaded using an\n+   *                                alternative, rather than the primary, cache key.\n+   * @param dataSource Indicates where the data used to decode the resource was originally\n+   *                   retrieved.\n+   * @param encodeStrategy The {@link EncodeStrategy} the {@link\n+   * com.bumptech.glide.load.ResourceEncoder} will use to encode the resource.\n    */\n   public abstract boolean isResourceCacheable(boolean isFromAlternateCacheKey,\n       DataSource dataSource, EncodeStrategy encodeStrategy);\n \n   /**\n    * Returns true if this request should attempt to decode cached resource data.\n    */\n-  public boolean decodeCachedResource() {\n-    return decodeCachedResource;\n-  }\n+  public abstract boolean decodeCachedResource();\n \n   /**\n    * Returns true if this request should attempt to decode cached source data.\n    */\n-  public boolean decodeCachedData() {\n-    return decodeCachedData;\n-  }\n+  public abstract boolean decodeCachedData();\n }",
      "parent_sha": "86a3afa40b56bad2f0d1d51a2a148d897a912b89"
    }
  },
  {
    "oid": "ac93fe4d2a2f691809434d9e854bcf9be64ba365",
    "message": "Makes decoding a very low-pri foreground task but slightly more important than a background task.\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=117496655",
    "date": "2016-05-17T15:44:48Z",
    "url": "https://github.com/bumptech/glide/commit/ac93fe4d2a2f691809434d9e854bcf9be64ba365",
    "details": {
      "sha": "72abcdf651fef8ee32c447b778741b9aa0d93c87",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bumptech/glide/blob/ac93fe4d2a2f691809434d9e854bcf9be64ba365/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fexecutor%2FGlideExecutor.java",
      "raw_url": "https://github.com/bumptech/glide/raw/ac93fe4d2a2f691809434d9e854bcf9be64ba365/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fexecutor%2FGlideExecutor.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fexecutor%2FGlideExecutor.java?ref=ac93fe4d2a2f691809434d9e854bcf9be64ba365",
      "patch": "@@ -303,7 +303,7 @@ protected void handle(Throwable t) {\n   }\n \n   /**\n-   * A {@link java.util.concurrent.ThreadFactory} that builds threads with priority {@link\n+   * A {@link java.util.concurrent.ThreadFactory} that builds threads slightly above priority {@link\n    * android.os.Process#THREAD_PRIORITY_BACKGROUND}.\n    */\n   private static final class DefaultThreadFactory implements ThreadFactory {\n@@ -324,7 +324,9 @@ public synchronized Thread newThread(@NonNull Runnable runnable) {\n       final Thread result = new Thread(runnable, \"glide-\" + name + \"-thread-\" + threadNum) {\n         @Override\n         public void run() {\n-          android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);\n+          android.os.Process.setThreadPriority(\n+              android.os.Process.THREAD_PRIORITY_BACKGROUND\n+              + android.os.Process.THREAD_PRIORITY_MORE_FAVORABLE);\n           if (preventNetworkOperations) {\n             StrictMode.setThreadPolicy(\n                 new ThreadPolicy.Builder()",
      "parent_sha": "c64847a168e49260c40853a6da97307a0305c316"
    }
  },
  {
    "oid": "3c1ebe277614f9e7cb2712892122e74e5e0e2d85",
    "message": "Deprecate #load(URL)\n\nFixes #176.",
    "date": "2014-10-13T01:19:19Z",
    "url": "https://github.com/bumptech/glide/commit/3c1ebe277614f9e7cb2712892122e74e5e0e2d85",
    "details": {
      "sha": "65d216c66ad43761c3893af9db042919e05419f3",
      "filename": "library/src/main/java/com/bumptech/glide/RequestManager.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bumptech/glide/blob/3c1ebe277614f9e7cb2712892122e74e5e0e2d85/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/3c1ebe277614f9e7cb2712892122e74e5e0e2d85/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java?ref=3c1ebe277614f9e7cb2712892122e74e5e0e2d85",
      "patch": "@@ -394,24 +394,28 @@ public DrawableTypeRequest<Integer> load(Integer resourceId) {\n      *\n      * @see #using(StreamModelLoader)\n      *\n+     * @deprecated The {@link java.net.URL} class has\n+     * <a href=\"http://goo.gl/c4hHNu\">a number of performance problems</a> and should generally be avoided when\n+     * possible. Prefer {@link #load(android.net.Uri)} or {@link #load(String)}.\n      * @param url The URL representing the image.\n      */\n+    @Deprecated\n     public DrawableTypeRequest<URL> load(URL url) {\n         return loadGeneric(url);\n     }\n \n     /**\n      * Returns a request builder that uses a {@link StreamByteArrayLoader} to load an image from the given byte array.\n      *\n-     * @deprecated Use {@link #load(byte[])} along with\n-     * {@link com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key)}} instead.\n      *\n      * <p>\n      *     Note - This method does not cache results in either the disk cache or the memory cache.\n      * </p>\n      *\n      * @see #load(byte[])\n      *\n+     * @deprecated Use {@link #load(byte[])} along with\n+     * {@link com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key)} instead.\n      * @param model The data to load.\n      * @param id A unique id that identifies the image represented by the model suitable for use as a cache key\n      *           (url, filepath etc). If there is no suitable id, use {@link #load(byte[])} instead.",
      "parent_sha": "b6bec7733c633f7923467a30c31689fe8b6b7666"
    }
  },
  {
    "oid": "204659778850fbac6421e125d8e18176cb4d61cb",
    "message": "Update the non-Bitmap Drawable javadoc for load(Integer).",
    "date": "2017-10-31T14:54:54Z",
    "url": "https://github.com/bumptech/glide/commit/204659778850fbac6421e125d8e18176cb4d61cb",
    "details": {
      "sha": "e8d44d0f3683e1bffe2e61169a9fd51ade83997d",
      "filename": "library/src/main/java/com/bumptech/glide/RequestBuilder.java",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bumptech/glide/blob/204659778850fbac6421e125d8e18176cb4d61cb/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/204659778850fbac6421e125d8e18176cb4d61cb/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java?ref=204659778850fbac6421e125d8e18176cb4d61cb",
      "patch": "@@ -13,6 +13,7 @@\n import android.support.annotation.Nullable;\n import android.support.annotation.RawRes;\n import android.widget.ImageView;\n+import com.bumptech.glide.load.Transformation;\n import com.bumptech.glide.load.engine.DiskCacheStrategy;\n import com.bumptech.glide.request.ErrorRequestCoordinator;\n import com.bumptech.glide.request.FutureTarget;\n@@ -452,10 +453,17 @@ public RequestBuilder<TranscodeType> load(@Nullable File file) {\n    * {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESOURCE} for release builds.\n    *\n    * <p>This method will load non-{@link android.graphics.Bitmap} resources like\n-   * {@link android.graphics.drawable.VectorDrawable}s, but most common options including\n-   * default {@link com.bumptech.glide.load.Transformation}s will not <em>NOT</em> work on\n-   * non-{@link android.graphics.Bitmap} resources. As a result, functionality for\n-   * non-{@link android.graphics.Bitmap} resources may be limited.\n+   * {@link android.graphics.drawable.VectorDrawable}s. Although Glide makes a best effort to apply\n+   * {@link com.bumptech.glide.load.Transformation}s to these {@link Drawable}s by either extracting\n+   * the underlying {@link Bitmap} or by converting the {@link Drawable} to a {@link Bitmap}, Glide\n+   * is still not able to transform all types of resources. Animated {@link Drawable}s cannot be\n+   * transformed (other than {@link com.bumptech.glide.load.resource.gif.GifDrawable}). To avoid\n+   * load failures if a {@link Drawable} can't be transformed, use the optional transformation\n+   * methods like {@link RequestOptions#optionalTransform(Class, Transformation)}.\n+   *\n+   * <p>In some cases converting {@link Drawable}s to {@link Bitmap}s may be inefficient. Use this\n+   * method, especially in conjunction with {@link com.bumptech.glide.load.Transformation}s with\n+   * caution for non-{@link Bitmap} {@link Drawable}s.\n    *\n    * @see #load(Integer)\n    * @see com.bumptech.glide.signature.ApplicationVersionSignature",
      "parent_sha": "90b3b9f054072a7c3625926caa150277352b92dd"
    }
  },
  {
    "oid": "d197fe7c0b908b0ab337c2cbd23b038f247f426b",
    "message": "modify LocalUriFetcher",
    "date": "2020-09-24T00:30:56Z",
    "url": "https://github.com/bumptech/glide/commit/d197fe7c0b908b0ab337c2cbd23b038f247f426b",
    "details": {
      "sha": "bd22c8016ff7e3fb0488a843f6c536f98c509aa2",
      "filename": "library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bumptech/glide/blob/d197fe7c0b908b0ab337c2cbd23b038f247f426b/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FLocalUriFetcher.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d197fe7c0b908b0ab337c2cbd23b038f247f426b/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FLocalUriFetcher.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FLocalUriFetcher.java?ref=d197fe7c0b908b0ab337c2cbd23b038f247f426b",
      "patch": "@@ -42,14 +42,13 @@ public final void loadData(\n       @NonNull Priority priority, @NonNull DataCallback<? super T> callback) {\n     try {\n       data = loadResource(uri, contentResolver);\n+      callback.onDataReady(data);\n     } catch (FileNotFoundException e) {\n       if (Log.isLoggable(TAG, Log.DEBUG)) {\n         Log.d(TAG, \"Failed to open Uri\", e);\n       }\n       callback.onLoadFailed(e);\n-      return;\n     }\n-    callback.onDataReady(data);\n   }\n \n   @Override",
      "parent_sha": "95b7ca95f6c1b69de7fd287a37600013dd02c52a"
    }
  },
  {
    "oid": "8f770797ef3cd99f6a7eae99f7441f1cba266127",
    "message": "s/RuntimeEnvironment.application/ApplicationProvider.getApplicationContext()/g\n\nPiperOrigin-RevId: 351185422",
    "date": "2021-01-11T18:36:35Z",
    "url": "https://github.com/bumptech/glide/commit/8f770797ef3cd99f6a7eae99f7441f1cba266127",
    "details": {
      "sha": "c83f104787c4e5269550668da98e6f5b4db358a3",
      "filename": "library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bumptech/glide/blob/8f770797ef3cd99f6a7eae99f7441f1cba266127/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDrawableTransformationTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/8f770797ef3cd99f6a7eae99f7441f1cba266127/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDrawableTransformationTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDrawableTransformationTest.java?ref=8f770797ef3cd99f6a7eae99f7441f1cba266127",
      "patch": "@@ -15,6 +15,7 @@\n import android.graphics.drawable.BitmapDrawable;\n import android.graphics.drawable.ColorDrawable;\n import android.graphics.drawable.Drawable;\n+import androidx.test.core.app.ApplicationProvider;\n import com.bumptech.glide.Glide;\n import com.bumptech.glide.GlideBuilder;\n import com.bumptech.glide.load.Transformation;\n@@ -35,7 +36,6 @@\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.robolectric.RobolectricTestRunner;\n-import org.robolectric.RuntimeEnvironment;\n import org.robolectric.annotation.Config;\n \n @RunWith(RobolectricTestRunner.class)\n@@ -51,7 +51,7 @@ public class DrawableTransformationTest {\n   public void setUp() {\n     MockitoAnnotations.initMocks(this);\n     transformation = new DrawableTransformation(bitmapTransformation, /*isRequired=*/ true);\n-    context = RuntimeEnvironment.application;\n+    context = ApplicationProvider.getApplicationContext();\n     bitmapPool = new BitmapPoolAdapter();\n     Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));\n   }",
      "parent_sha": "e2a467ddb71d76e9da84933a6bce65b30f86c494"
    }
  },
  {
    "oid": "2ea14abf8d5ca50e88b16385d817cfee77a5c52a",
    "message": "Add an explicit null check to Util.getSnapshot.\n\nExplicitly checking for null avoids our previous implicit expectation \nthat the iterator of the provided Collection would do the null checking \nfor us. This expectation is valid in Glide right now because we only \npass WeakHashMaps to this method, but it seems like a dangerous \nassumption to make in a utility method.\n\nWe can\u2019t require a WeakHashMap directly because all of our usages are\nwrapped in Collections.newSetFromMap.",
    "date": "2017-11-16T16:01:38Z",
    "url": "https://github.com/bumptech/glide/commit/2ea14abf8d5ca50e88b16385d817cfee77a5c52a",
    "details": {
      "sha": "3eccad550adce69364601cc685a673c3fa7c6db1",
      "filename": "library/src/main/java/com/bumptech/glide/util/Util.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bumptech/glide/blob/2ea14abf8d5ca50e88b16385d817cfee77a5c52a/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Futil%2FUtil.java",
      "raw_url": "https://github.com/bumptech/glide/raw/2ea14abf8d5ca50e88b16385d817cfee77a5c52a/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Futil%2FUtil.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Futil%2FUtil.java?ref=2ea14abf8d5ca50e88b16385d817cfee77a5c52a",
      "patch": "@@ -170,14 +170,19 @@ public static <T> Queue<T> createQueue(int size) {\n    * Returns a copy of the given list that is safe to iterate over and perform actions that may\n    * modify the original list.\n    *\n-   * <p> See #303 and #375. </p>\n+   * <p>See #303, #375, #322, #2262.\n    */\n+  @SuppressWarnings(\"UseBulkOperation\")\n   public static <T> List<T> getSnapshot(Collection<T> other) {\n-    // toArray creates a new ArrayList internally and this way we can guarantee entries will not\n-    // be null. See #322.\n-    List<T> result = new ArrayList<T>(other.size());\n+    // toArray creates a new ArrayList internally and does not guarantee that the values it contains\n+    // are non-null. Collections.addAll in ArrayList uses toArray internally and therefore also\n+    // doesn't guarantee that entries are non-null. WeakHashMap's iterator does avoid returning null\n+    // and is therefore safe to use. See #322, #2262.\n+    List<T> result = new ArrayList<>(other.size());\n     for (T item : other) {\n-      result.add(item);\n+      if (item != null) {\n+        result.add(item);\n+      }\n     }\n     return result;\n   }",
      "parent_sha": "1a4e1b4672c2a50c454d086f22c1aec631ab1bb7"
    }
  },
  {
    "oid": "86e472d436382531fe076854bbadaad37c24bedc",
    "message": "Use PackageManager#checkPermission to check for network state.\n\nFixes #2121.",
    "date": "2017-08-01T14:18:05Z",
    "url": "https://github.com/bumptech/glide/commit/86e472d436382531fe076854bbadaad37c24bedc",
    "details": {
      "sha": "2d6702e53edefe2ec9f8fd332859d35f90df1bd4",
      "filename": "library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactory.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bumptech/glide/blob/86e472d436382531fe076854bbadaad37c24bedc/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FDefaultConnectivityMonitorFactory.java",
      "raw_url": "https://github.com/bumptech/glide/raw/86e472d436382531fe076854bbadaad37c24bedc/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FDefaultConnectivityMonitorFactory.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FDefaultConnectivityMonitorFactory.java?ref=86e472d436382531fe076854bbadaad37c24bedc",
      "patch": "@@ -3,6 +3,7 @@\n import android.content.Context;\n import android.content.pm.PackageManager;\n import android.support.annotation.NonNull;\n+import android.support.v4.content.ContextCompat;\n \n /**\n  * A factory class that produces a functional {@link com.bumptech.glide.manager.ConnectivityMonitor}\n@@ -11,17 +12,15 @@\n  * the required permission.\n  */\n public class DefaultConnectivityMonitorFactory implements ConnectivityMonitorFactory {\n+  private static final String NETWORK_PERMISSION = \"android.permission.ACCESS_NETWORK_STATE\";\n \n   @NonNull\n   public ConnectivityMonitor build(\n       @NonNull Context context,\n       @NonNull ConnectivityMonitor.ConnectivityListener listener) {\n-    final int res = context.checkCallingOrSelfPermission(\"android.permission.ACCESS_NETWORK_STATE\");\n-    final boolean hasPermission = res == PackageManager.PERMISSION_GRANTED;\n-    if (hasPermission) {\n-      return new DefaultConnectivityMonitor(context, listener);\n-    } else {\n-      return new NullConnectivityMonitor();\n-    }\n+    int permissionResult = ContextCompat.checkSelfPermission(context, NETWORK_PERMISSION);\n+    boolean hasPermission = permissionResult == PackageManager.PERMISSION_GRANTED;\n+    return hasPermission\n+        ? new DefaultConnectivityMonitor(context, listener) : new NullConnectivityMonitor();\n   }\n }",
      "parent_sha": "60cfcc538cc94564785826bf8dd09667b7ea25d2"
    }
  },
  {
    "oid": "414b9705377c57427feed760f6b0794ecd24edac",
    "message": "Internal Code Change\n\nPiperOrigin-RevId: 514648987",
    "date": "2023-03-07T08:32:55Z",
    "url": "https://github.com/bumptech/glide/commit/414b9705377c57427feed760f6b0794ecd24edac",
    "details": {
      "sha": "10722901aa9ee5c6a8f2a3011f9f917f8a3aa016",
      "filename": "library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/414b9705377c57427feed760f6b0794ecd24edac/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fprefill%2FBitmapPreFillerTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/414b9705377c57427feed760f6b0794ecd24edac/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fprefill%2FBitmapPreFillerTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Ftest%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fprefill%2FBitmapPreFillerTest.java?ref=414b9705377c57427feed760f6b0794ecd24edac",
      "patch": "@@ -184,7 +184,8 @@ public void testAllocationOrderSplitsEvenlyBetweenEqualSizesWithEqualWeights() {\n             .build();\n     PreFillQueue allocationOrder = bitmapPreFiller.generateAllocationOrder(smallWidth, smallHeight);\n \n-    int numSmallWidth = 0, numSmallHeight = 0;\n+    int numSmallWidth = 0;\n+    int numSmallHeight = 0;\n     while (!allocationOrder.isEmpty()) {\n       PreFillType current = allocationOrder.remove();\n       if (smallWidth.equals(current)) {\n@@ -211,7 +212,8 @@ public void testAllocationOrderSplitsByteSizeEvenlyBetweenUnEqualSizesWithEqualW\n             .build();\n     PreFillQueue allocationOrder = bitmapPreFiller.generateAllocationOrder(smallWidth, normal);\n \n-    int numSmallWidth = 0, numNormal = 0;\n+    int numSmallWidth = 0;\n+    int numNormal = 0;\n     while (!allocationOrder.isEmpty()) {\n       PreFillType current = allocationOrder.remove();\n       if (smallWidth.equals(current)) {\n@@ -239,7 +241,8 @@ public void testAllocationOrderSplitsByteSizeUnevenlyBetweenEqualSizesWithUnequa\n             .build();\n     PreFillQueue allocationOrder = bitmapPreFiller.generateAllocationOrder(doubleWeight, normal);\n \n-    int numDoubleWeight = 0, numNormal = 0;\n+    int numDoubleWeight = 0;\n+    int numNormal = 0;\n     while (!allocationOrder.isEmpty()) {\n       PreFillType current = allocationOrder.remove();\n       if (doubleWeight.equals(current)) {",
      "parent_sha": "69e1bdaa7745e0fef443988ac8f03c62b6a60c5b"
    }
  },
  {
    "oid": "69e1bdaa7745e0fef443988ac8f03c62b6a60c5b",
    "message": "Internal Code Change\n\nPiperOrigin-RevId: 514634289",
    "date": "2023-03-07T06:56:38Z",
    "url": "https://github.com/bumptech/glide/commit/69e1bdaa7745e0fef443988ac8f03c62b6a60c5b",
    "details": {
      "sha": "c320dc7723e3082573bc9c7f4a0a003b8e89848b",
      "filename": "integration/cronet/src/main/java/com/bumptech/glide/integration/cronet/BufferQueue.java",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bumptech/glide/blob/69e1bdaa7745e0fef443988ac8f03c62b6a60c5b/integration%2Fcronet%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fcronet%2FBufferQueue.java",
      "raw_url": "https://github.com/bumptech/glide/raw/69e1bdaa7745e0fef443988ac8f03c62b6a60c5b/integration%2Fcronet%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fcronet%2FBufferQueue.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/integration%2Fcronet%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fcronet%2FBufferQueue.java?ref=69e1bdaa7745e0fef443988ac8f03c62b6a60c5b",
      "patch": "@@ -15,8 +15,8 @@\n final class BufferQueue {\n   public static final String CONTENT_LENGTH = \"content-length\";\n   public static final String CONTENT_ENCODING = \"content-encoding\";\n-  private final Queue<ByteBuffer> mBuffers;\n-  private final AtomicBoolean mIsCoalesced = new AtomicBoolean(false);\n+  private final Queue<ByteBuffer> buffers;\n+  private final AtomicBoolean isCoalesced = new AtomicBoolean(false);\n \n   public static Builder builder() {\n     return new Builder();\n@@ -32,18 +32,18 @@ public static Builder builder() {\n    * request.read(builder.getNextBuffer(buffer)); } }\n    */\n   public static final class Builder {\n-    private ArrayDeque<ByteBuffer> mBuffers = new ArrayDeque<>();\n+    private ArrayDeque<ByteBuffer> buffers = new ArrayDeque<>();\n     private RuntimeException whenClosed;\n \n     private Builder() {}\n \n     /** Returns the next buffer to write data into. */\n     public ByteBuffer getNextBuffer(ByteBuffer lastBuffer) {\n-      if (mBuffers == null) {\n+      if (buffers == null) {\n         throw new RuntimeException(whenClosed);\n       }\n-      if (lastBuffer != mBuffers.peekLast()) {\n-        mBuffers.addLast(lastBuffer);\n+      if (lastBuffer != buffers.peekLast()) {\n+        buffers.addLast(lastBuffer);\n       }\n       if (lastBuffer.hasRemaining()) {\n         return lastBuffer;\n@@ -92,42 +92,42 @@ private static long bufferSizeHeuristic(UrlResponseInfo info) {\n \n     public BufferQueue build() {\n       whenClosed = new RuntimeException();\n-      final ArrayDeque<ByteBuffer> buffers = mBuffers;\n-      mBuffers = null;\n+      final ArrayDeque<ByteBuffer> buffers = this.buffers;\n+      this.buffers = null;\n       return new BufferQueue(buffers);\n     }\n   }\n \n   private BufferQueue(Queue<ByteBuffer> buffers) {\n-    mBuffers = buffers;\n-    for (ByteBuffer buffer : mBuffers) {\n+    this.buffers = buffers;\n+    for (ByteBuffer buffer : this.buffers) {\n       buffer.flip();\n     }\n   }\n \n   /** Returns the response body as a single contiguous buffer. */\n   public ByteBuffer coalesceToBuffer() {\n     markCoalesced();\n-    if (mBuffers.size() == 0) {\n+    if (buffers.size() == 0) {\n       return ByteBuffer.allocateDirect(0);\n-    } else if (mBuffers.size() == 1) {\n-      return mBuffers.remove();\n+    } else if (buffers.size() == 1) {\n+      return buffers.remove();\n     } else {\n       int size = 0;\n-      for (ByteBuffer buffer : mBuffers) {\n+      for (ByteBuffer buffer : buffers) {\n         size += buffer.remaining();\n       }\n       ByteBuffer result = ByteBuffer.allocateDirect(size);\n-      while (!mBuffers.isEmpty()) {\n-        result.put(mBuffers.remove());\n+      while (!buffers.isEmpty()) {\n+        result.put(buffers.remove());\n       }\n       result.flip();\n       return result;\n     }\n   }\n \n   private void markCoalesced() {\n-    if (!mIsCoalesced.compareAndSet(false, true)) {\n+    if (!isCoalesced.compareAndSet(false, true)) {\n       throw new IllegalStateException(\"This BufferQueue has already been consumed\");\n     }\n   }",
      "parent_sha": "462416b88df5714f883c75c74eff9ed2af1b0a29"
    }
  },
  {
    "oid": "217da78d74c0045848383c323efdd8b8f495ca6e",
    "message": "Make ImageManager final",
    "date": "2014-04-27T23:53:32Z",
    "url": "https://github.com/bumptech/glide/commit/217da78d74c0045848383c323efdd8b8f495ca6e",
    "details": {
      "sha": "222ba9717acffe46e1dfee48d7038cf225b118c1",
      "filename": "library/src/com/bumptech/glide/Glide.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/217da78d74c0045848383c323efdd8b8f495ca6e/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2FGlide.java",
      "raw_url": "https://github.com/bumptech/glide/raw/217da78d74c0045848383c323efdd8b8f495ca6e/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2FGlide.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2FGlide.java?ref=217da78d74c0045848383c323efdd8b8f495ca6e",
      "patch": "@@ -61,7 +61,7 @@ public class Glide {\n     private static Glide GLIDE;\n     private final GenericLoaderFactory loaderFactory = new GenericLoaderFactory();\n     private final RequestQueue requestQueue;\n-    private ImageManager imageManager = null;\n+    private final ImageManager imageManager;\n \n     /**\n      * A class for monitoring the status of a request while images load.",
      "parent_sha": "9f0bef767aca7d0e40f9eba8c1ea52159bed2091"
    }
  },
  {
    "oid": "d38ffe98d9194c02eb3cf114c48d043ae7337aae",
    "message": "Remove redundant call in RequestOptions#dontAnimate.",
    "date": "2017-10-16T16:33:13Z",
    "url": "https://github.com/bumptech/glide/commit/d38ffe98d9194c02eb3cf114c48d043ae7337aae",
    "details": {
      "sha": "fc06b89084a293effc32435ad5339422b04895ad",
      "filename": "library/src/main/java/com/bumptech/glide/request/RequestOptions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bumptech/glide/blob/d38ffe98d9194c02eb3cf114c48d043ae7337aae/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FRequestOptions.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d38ffe98d9194c02eb3cf114c48d043ae7337aae/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FRequestOptions.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FRequestOptions.java?ref=d38ffe98d9194c02eb3cf114c48d043ae7337aae",
      "patch": "@@ -1252,13 +1252,7 @@ public RequestOptions dontTransform() {\n   @SuppressWarnings(\"CheckResult\")\n   @CheckResult\n   public RequestOptions dontAnimate() {\n-    if (isAutoCloneEnabled) {\n-      return clone().dontAnimate();\n-    }\n-\n-    set(GifOptions.DISABLE_ANIMATION, true);\n-    set(GifOptions.DISABLE_ANIMATION, true);\n-    return selfOrThrowIfLocked();\n+    return set(GifOptions.DISABLE_ANIMATION, true);\n   }\n \n   @CheckResult",
      "parent_sha": "70f11dc2cdb022ea959068ff61a7e05ae793727e"
    }
  },
  {
    "oid": "1d5dd90f4a8f85ee34fe4249b94018139e57de95",
    "message": "Increase odds of recycled bitmaps being available\n\nOccasionally loads seemd to be happening before\nthe corresponding loader's release of its previous\nbitmaps which lead to lots more allocing then\nwe expected",
    "date": "2013-01-17T23:21:27Z",
    "url": "https://github.com/bumptech/glide/commit/1d5dd90f4a8f85ee34fe4249b94018139e57de95",
    "details": {
      "sha": "6cf10b501f7dfa592bfe9ae00ff1ba71d90c6628",
      "filename": "library/src/com/bumptech/photos/resize/ImageManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/1d5dd90f4a8f85ee34fe4249b94018139e57de95/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/1d5dd90f4a8f85ee34fe4249b94018139e57de95/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java?ref=1d5dd90f4a8f85ee34fe4249b94018139e57de95",
      "patch": "@@ -406,7 +406,7 @@ public void releaseBitmap(final Bitmap b) {\n         if (currentCount == 0) {\n             bitmapReferenceCounter.remove(b.hashCode());\n             //can only put or take from bitmap cache on one thread\n-            bgHandler.post(new Runnable() {\n+            bgHandler.postAtFrontOfQueue(new Runnable() {\n                 @Override\n                 public void run() {\n                     bitmapCache.put(b);",
      "parent_sha": "c519db07159591f47d21e3a183540e755ea6c2af"
    }
  },
  {
    "oid": "64adebd766cd6aa97ee95861c52a80e0578491d3",
    "message": "Re-add empty resource class assertion to ResourceCacheGenerator\n\nb/73882030 is now fixed.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=210140993",
    "date": "2018-08-30T15:38:28Z",
    "url": "https://github.com/bumptech/glide/commit/64adebd766cd6aa97ee95861c52a80e0578491d3",
    "details": {
      "sha": "aee163a330c908e2bfeb2e747a1d1e0e6f77c344",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/64adebd766cd6aa97ee95861c52a80e0578491d3/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FResourceCacheGenerator.java",
      "raw_url": "https://github.com/bumptech/glide/raw/64adebd766cd6aa97ee95861c52a80e0578491d3/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FResourceCacheGenerator.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FResourceCacheGenerator.java?ref=64adebd766cd6aa97ee95861c52a80e0578491d3",
      "patch": "@@ -50,12 +50,9 @@ public boolean startNext() {\n       if (File.class.equals(helper.getTranscodeClass())) {\n         return false;\n       }\n-      // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes\n-      // all loads to fail. Without this assertion it causes loads to miss the disk cache\n-      // unnecessarily\n-      // throw new IllegalStateException(\n-      //    \"Failed to find any load path from \" + helper.getModelClass() + \" to \"\n-      //        + helper.getTranscodeClass());\n+      throw new IllegalStateException(\n+         \"Failed to find any load path from \" + helper.getModelClass() + \" to \"\n+             + helper.getTranscodeClass());\n     }\n     while (modelLoaders == null || !hasNextModelLoader()) {\n       resourceClassIndex++;",
      "parent_sha": "cad83d2988c569ef5c22811c59886588814b4c6c"
    }
  },
  {
    "oid": "9b52d0a0e4c989fbdc5909cef033bc9197a8d19f",
    "message": "Fix spelling error in ResourceTranscoder",
    "date": "2015-08-18T00:23:40Z",
    "url": "https://github.com/bumptech/glide/commit/9b52d0a0e4c989fbdc5909cef033bc9197a8d19f",
    "details": {
      "sha": "ad1c55c6e6659638999fd865a019759338072f01",
      "filename": "library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/9b52d0a0e4c989fbdc5909cef033bc9197a8d19f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Ftranscode%2FResourceTranscoder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/9b52d0a0e4c989fbdc5909cef033bc9197a8d19f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Ftranscode%2FResourceTranscoder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Ftranscode%2FResourceTranscoder.java?ref=9b52d0a0e4c989fbdc5909cef033bc9197a8d19f",
      "patch": "@@ -11,7 +11,7 @@\n public interface ResourceTranscoder<Z, R> {\n \n   /**\n-   * Transcodes the given resource to the new resource type and returns the wew resource.\n+   * Transcodes the given resource to the new resource type and returns the new resource.\n    *\n    * @param toTranscode The resource to transcode.\n    */",
      "parent_sha": "4f8d43e113f83ac9ff44221e102fc96817721cd9"
    }
  },
  {
    "oid": "dc6b7737ecc118c4ee0fcb580920d469ffcc6fd9",
    "message": "Don't use a weak ref in LocalUriFetcher.",
    "date": "2014-09-25T14:39:17Z",
    "url": "https://github.com/bumptech/glide/commit/dc6b7737ecc118c4ee0fcb580920d469ffcc6fd9",
    "details": {
      "sha": "0036da96e5caf9984248980d8c6e3c8f35264612",
      "filename": "library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/dc6b7737ecc118c4ee0fcb580920d469ffcc6fd9/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FLocalUriFetcher.java",
      "raw_url": "https://github.com/bumptech/glide/raw/dc6b7737ecc118c4ee0fcb580920d469ffcc6fd9/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FLocalUriFetcher.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2FLocalUriFetcher.java?ref=dc6b7737ecc118c4ee0fcb580920d469ffcc6fd9",
      "patch": "@@ -9,7 +9,6 @@\n import java.io.Closeable;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.lang.ref.WeakReference;\n \n /**\n  * A DataFetcher that uses an {@link android.content.ContentResolver} to load data from a {@link android.net.Uri}\n@@ -20,8 +19,8 @@\n  */\n public abstract class LocalUriFetcher<T extends Closeable> implements DataFetcher<T> {\n     private static final String TAG = \"LocalUriFetcher\";\n-    private final WeakReference<Context> contextRef;\n     private final Uri uri;\n+    private final Context context;\n     private T data;\n \n     /**\n@@ -35,16 +34,12 @@ public abstract class LocalUriFetcher<T extends Closeable> implements DataFetche\n      *            {@link ContentResolver#openInputStream(android.net.Uri)}\n      */\n     public LocalUriFetcher(Context context, Uri uri) {\n-        contextRef = new WeakReference<Context>(context);\n+        this.context = context.getApplicationContext();\n         this.uri = uri;\n     }\n \n     @Override\n     public final T loadData(Priority priority) throws Exception {\n-        Context context = contextRef.get();\n-        if (context == null) {\n-            throw new NullPointerException(\"Context has been cleared in LocalUriFetcher uri: \" + uri);\n-        }\n         ContentResolver contentResolver = context.getContentResolver();\n         data = loadResource(uri, contentResolver);\n         return data;",
      "parent_sha": "f2285a83d5ac3e79383278b91aa21b0a87603cd1"
    }
  },
  {
    "oid": "cf259cdbbefd58b91404296c18115c48c8b06f6e",
    "message": "Fix PMD error in DrawableCrossFadeFactory.",
    "date": "2016-05-19T20:30:00Z",
    "url": "https://github.com/bumptech/glide/commit/cf259cdbbefd58b91404296c18115c48c8b06f6e",
    "details": {
      "sha": "166c34b0894e03553a91d7c17f74ab2f3958b819",
      "filename": "library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bumptech/glide/blob/cf259cdbbefd58b91404296c18115c48c8b06f6e/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftransition%2FDrawableCrossFadeFactory.java",
      "raw_url": "https://github.com/bumptech/glide/raw/cf259cdbbefd58b91404296c18115c48c8b06f6e/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftransition%2FDrawableCrossFadeFactory.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftransition%2FDrawableCrossFadeFactory.java?ref=cf259cdbbefd58b91404296c18115c48c8b06f6e",
      "patch": "@@ -85,7 +85,7 @@ public Animation build(Context context) {\n    */\n   public static class Builder {\n     private static final int DEFAULT_DURATION_MS = 300;\n-    private int durationMillis = DEFAULT_DURATION_MS;\n+    private int durationMillis;\n     private ViewAnimationFactory<Drawable> factory;\n     private boolean isCrossFadeEnabled;\n \n@@ -101,6 +101,7 @@ public Builder() {\n      *     {@link #setDefaultAnimationFactory(ViewAnimationFactory)} is called.\n      */\n     public Builder(int durationMillis) {\n+      this.durationMillis = durationMillis;\n       factory = new ViewAnimationFactory<>(\n           new DefaultViewTransitionAnimationFactory(durationMillis));\n     }",
      "parent_sha": "4aa684fa9a303bb614536a565fa1b7506253ae88"
    }
  },
  {
    "oid": "444b1f3e2f6cf30f820ddd8a239f3859188982c5",
    "message": "Migrate org.mockito.Matchers#any* to org.mockito.ArgumentMatchers\n\nThe former is deprecated and replaced by the latter in Mockito 2. However, there is a\nfunctional difference: ArgumentMatchers will reject `null` and check the type\nif the matcher specified a type (e.g. `any(Class)` or `anyInt()`). `any()` will\nremain to accept anything.\n\nPiperOrigin-RevId: 260496316",
    "date": "2019-07-29T14:41:26Z",
    "url": "https://github.com/bumptech/glide/commit/444b1f3e2f6cf30f820ddd8a239f3859188982c5",
    "details": {
      "sha": "2d8b5010207d0edbe53e7308250a6e835e1f2b04",
      "filename": "library/src/test/java/com/bumptech/glide/request/target/CustomViewTargetTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/444b1f3e2f6cf30f820ddd8a239f3859188982c5/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FCustomViewTargetTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/444b1f3e2f6cf30f820ddd8a239f3859188982c5/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FCustomViewTargetTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FCustomViewTargetTest.java?ref=444b1f3e2f6cf30f820ddd8a239f3859188982c5",
      "patch": "@@ -4,7 +4,7 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNull;\n-import static org.mockito.Matchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;",
      "parent_sha": "525e7ba82ec883fb518087879269836f888bd584"
    }
  },
  {
    "oid": "027d670699fac100fc9a547f577b5c470c348109",
    "message": "Use correct any... matchers for primitive numeric parameters\n\nMore Information: []\nMockito relies on Java type checking to ensure that the matchers are used in a\ntype safe manner. While that works for the most part it does not work well\nfor primitive numeric parameters as Java will do widening conversions if the\ntypes are not exact, which means that anyInt() can be used for long parameters.\nThat has no effect in the current version of Mockito as it does not do type\nchecking for the any... matchers. However, future versions do type check and\nexpect exact match on type for primitive matchers.\n\nThis CL fixes the incorrect usages of the any... matchers. The change was made\nusing an Error Prone BugChecker and once all the incorrect usages have been\nfixed it will be enabled to prevent any other incorrect usages being added in\nfuture.\n\nCleanup change automatically generated by error-prone refactoring third_party/java_src/mockito/v1_9_5:mockito_any_incorrect_primitive_type on targets <stripped>\n\nTested:\n    TAP --sample for global presubmit queue\n    []\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=153880222",
    "date": "2017-04-24T16:03:49Z",
    "url": "https://github.com/bumptech/glide/commit/027d670699fac100fc9a547f577b5c470c348109",
    "details": {
      "sha": "d00b0319331c5f8f6f19573bb71f6250f40dc1b5",
      "filename": "library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/027d670699fac100fc9a547f577b5c470c348109/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fprefill%2FBitmapPreFillRunnerTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/027d670699fac100fc9a547f577b5c470c348109/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fprefill%2FBitmapPreFillRunnerTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fprefill%2FBitmapPreFillRunnerTest.java?ref=027d670699fac100fc9a547f577b5c470c348109",
      "patch": "@@ -129,7 +129,7 @@ public void testStopsAllocatingBitmapsUntilNextIdleCallIfAllocationsTakeLongerTh\n   public void testPreFillHandlerDoesNotPostIfHasNoBitmapsToAllocate() {\n     BitmapPreFillRunner handler = getHandler(new HashMap<PreFillType, Integer>());\n     handler.run();\n-    verify(mainHandler, never()).postDelayed(any(Runnable.class), anyInt());\n+    verify(mainHandler, never()).postDelayed(any(Runnable.class), anyLong());\n   }\n \n   @Test",
      "parent_sha": "00bbbaf1c31fa7583e346351b67983a3363d7189"
    }
  },
  {
    "oid": "4c418a5bf6eee0f7eb855ee09e84914f76ffdf1f",
    "message": "fix bug of DiskCacheStrategy.RESOURCE\n\nThis bug will cache source data at DiskCacheStrategy.RESOURCE.",
    "date": "2015-12-31T09:44:20Z",
    "url": "https://github.com/bumptech/glide/commit/4c418a5bf6eee0f7eb855ee09e84914f76ffdf1f",
    "details": {
      "sha": "b110e31210134da9dc9ebb9c0997bb51290a84e3",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/4c418a5bf6eee0f7eb855ee09e84914f76ffdf1f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDiskCacheStrategy.java",
      "raw_url": "https://github.com/bumptech/glide/raw/4c418a5bf6eee0f7eb855ee09e84914f76ffdf1f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDiskCacheStrategy.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDiskCacheStrategy.java?ref=4c418a5bf6eee0f7eb855ee09e84914f76ffdf1f",
      "patch": "@@ -93,7 +93,7 @@ public boolean decodeCachedData() {\n   public static final DiskCacheStrategy RESOURCE = new DiskCacheStrategy() {\n     @Override\n     public boolean isDataCacheable(DataSource dataSource) {\n-      return true;\n+      return false;\n     }\n \n     @Override",
      "parent_sha": "28859ec29420788d35da69606db96f3a94c9e4e8"
    }
  },
  {
    "oid": "5a2292b67fb8a9765e20782141705cdff8d46228",
    "message": "Make compression quality to diskcache configurable\n\nAlso decrease the default from 100 to 90.",
    "date": "2013-07-20T16:12:03Z",
    "url": "https://github.com/bumptech/glide/commit/5a2292b67fb8a9765e20782141705cdff8d46228",
    "details": {
      "sha": "7dc31c16109f206d66c87fbe26f80a19d09f3031",
      "filename": "library/src/com/bumptech/glide/resize/ImageManager.java",
      "status": "modified",
      "additions": 25,
      "deletions": 1,
      "changes": 26,
      "blob_url": "https://github.com/bumptech/glide/blob/5a2292b67fb8a9765e20782141705cdff8d46228/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/5a2292b67fb8a9765e20782141705cdff8d46228/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java?ref=5a2292b67fb8a9765e20782141705cdff8d46228",
      "patch": "@@ -51,10 +51,12 @@\n public class ImageManager {\n     private static final String DEFAULT_DISK_CACHE_DIR = \"image_manager_disk_cache\";\n     private static final int DEFAULT_DISK_CACHE_SIZE = 30 * 1024 * 1024;\n+    private static final int DEFAULT_BITMAP_COMPRESS_QUALITY = 90;\n     private static final float MEMORY_SIZE_RATIO = 1f/10f;\n     public static final boolean CAN_RECYCLE = Build.VERSION.SDK_INT >= 11;\n \n     private final BitmapReferenceCounter bitmapReferenceCounter;\n+    private final int bitmapCompressQuality;\n     private boolean shutdown = false;\n \n     private final Handler mainHandler = new Handler();\n@@ -145,6 +147,7 @@ public static class Builder {\n         public BitmapFactory.Options decodeBitmapOptions = ImageResizer.getDefaultOptions();\n         private BitmapPool bitmapPool;\n         private BitmapReferenceCounter bitmapReferenceCounter;\n+        private int bitmapCompressQuality = DEFAULT_BITMAP_COMPRESS_QUALITY;\n \n         /**\n          * Create a new builder. No options are required. By default will create an lru memory cache, an lru disk\n@@ -188,6 +191,8 @@ public Builder setResizeService(ExecutorService resizeService) {\n          * Sets the format that will be used to write bitmaps to disk in the disk cache (if one is present). Defaults\n          * to JPEG. Set to PNG if you need transparency\n          *\n+         * @see {@link Bitmap#compress(android.graphics.Bitmap.CompressFormat, int, java.io.OutputStream)}\n+         *\n          * @param bitmapCompressFormat The format to pass to\n          *  {@link Bitmap#compress(android.graphics.Bitmap.CompressFormat, int, java.io.OutputStream)} when saving\n          *  to the disk cache\n@@ -198,6 +203,24 @@ public Builder setBitmapCompressFormat(Bitmap.CompressFormat bitmapCompressForma\n             return this;\n         }\n \n+        /**\n+         * Set the compression quality for Bitmaps when writing them out to the disk cache.\n+         *\n+         * @see {@link Bitmap#compress(android.graphics.Bitmap.CompressFormat, int, java.io.OutputStream)}\n+         * @see {@link #setBitmapCompressFormat(android.graphics.Bitmap.CompressFormat)}\n+         *\n+         * @param quality Hint for compression in range 0-100 with 0 being lowest and 100 being highest quality. Will\n+         *                only be applied for certain lossy compression formats\n+         * @return This Builder\n+         */\n+        public Builder setBitmapCompressQuality(int quality) {\n+            if (quality < 0) {\n+                throw new IllegalArgumentException(\"Bitmap compression quality must be >= 0\");\n+            }\n+            this.bitmapCompressQuality = quality;\n+            return this;\n+        }\n+\n         /**\n          * Set the implementation of a {@link BitmapPool} to use to store and retrieve recycled bitmaps based on their\n          * width and height. Should be thread safe and size limited in some way to avoid OOM exceptions.\n@@ -307,6 +330,7 @@ private ImageManager(Builder builder) {\n         bgHandler = new Handler(bgThread.getLooper());\n         executor = builder.resizeService;\n         bitmapCompressFormat = builder.bitmapCompressFormat;\n+        bitmapCompressQuality = builder.bitmapCompressQuality;\n         memoryCache = builder.memoryCache;\n         diskCache = builder.diskCache;\n         bitmapReferenceCounter = builder.bitmapReferenceCounter;\n@@ -612,7 +636,7 @@ private void finishResize(final Bitmap result, boolean isInDiskCache) {\n                     diskCache.put(String.valueOf(key), new DiskCache.Writer() {\n                         @Override\n                         public void write(OutputStream os) {\n-                            result.compress(bitmapCompressFormat, 100, os);\n+                            result.compress(bitmapCompressFormat, bitmapCompressQuality, os);\n                         }\n                     });\n                 }",
      "parent_sha": "cce6b7feba2da45e9b4506ad8da78bcd93d7f3b1"
    }
  },
  {
    "oid": "332807aed4641967ef47cf3a1a61e57b0689aa17",
    "message": "Add missing mutable instance variables to RequestBuilder#clone\n\nPiperOrigin-RevId: 345719582",
    "date": "2020-12-04T19:27:55Z",
    "url": "https://github.com/bumptech/glide/commit/332807aed4641967ef47cf3a1a61e57b0689aa17",
    "details": {
      "sha": "9a4e2d3c15d68a8f919d2a01105044f969c936f0",
      "filename": "library/src/main/java/com/bumptech/glide/RequestBuilder.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bumptech/glide/blob/332807aed4641967ef47cf3a1a61e57b0689aa17/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/332807aed4641967ef47cf3a1a61e57b0689aa17/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java?ref=332807aed4641967ef47cf3a1a61e57b0689aa17",
      "patch": "@@ -645,7 +645,6 @@ public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {\n    * arguments, the current model is not copied so changes to the model will affect both builders.\n    */\n   @SuppressWarnings({\n-    \"unchecked\",\n     // we don't want to throw to be user friendly\n     \"PMD.CloneThrowsCloneNotSupportedException\"\n   })\n@@ -654,6 +653,15 @@ public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {\n   public RequestBuilder<TranscodeType> clone() {\n     RequestBuilder<TranscodeType> result = super.clone();\n     result.transitionOptions = result.transitionOptions.clone();\n+    if (result.requestListeners != null) {\n+      result.requestListeners = new ArrayList<>(result.requestListeners);\n+    }\n+    if (result.thumbnailBuilder != null) {\n+      result.thumbnailBuilder = result.thumbnailBuilder.clone();\n+    }\n+    if (result.errorBuilder != null) {\n+      result.errorBuilder = result.errorBuilder.clone();\n+    }\n     return result;\n   }\n ",
      "parent_sha": "e464e01e0511e96ce78d4049e4110b79da8f5876"
    }
  },
  {
    "oid": "7ff3bdeed52d6047e8e9f879ccb3f67afe50fa2d",
    "message": "Reduce the overhead of Engine log statements.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=187506205",
    "date": "2018-03-06T21:46:36Z",
    "url": "https://github.com/bumptech/glide/commit/7ff3bdeed52d6047e8e9f879ccb3f67afe50fa2d",
    "details": {
      "sha": "d7844ff170bdcdcdc77bdb633e8dd8a7d9c2ffdf",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/Engine.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/7ff3bdeed52d6047e8e9f879ccb3f67afe50fa2d/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngine.java",
      "raw_url": "https://github.com/bumptech/glide/raw/7ff3bdeed52d6047e8e9f879ccb3f67afe50fa2d/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngine.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngine.java?ref=7ff3bdeed52d6047e8e9f879ccb3f67afe50fa2d",
      "patch": "@@ -33,6 +33,7 @@ public class Engine implements EngineJobListener,\n     EngineResource.ResourceListener {\n   private static final String TAG = \"Engine\";\n   private static final int JOB_POOL_SIZE = 150;\n+  private static final boolean VERBOSE_IS_LOGGABLE = Log.isLoggable(TAG, Log.VERBOSE);\n   private final Jobs jobs;\n   private final EngineKeyFactory keyFactory;\n   private final MemoryCache cache;\n@@ -173,7 +174,7 @@ public <R> LoadStatus load(\n     EngineResource<?> active = loadFromActiveResources(key, isMemoryCacheable);\n     if (active != null) {\n       cb.onResourceReady(active, DataSource.MEMORY_CACHE);\n-      if (Log.isLoggable(TAG, Log.VERBOSE)) {\n+      if (VERBOSE_IS_LOGGABLE) {\n         logWithTimeAndKey(\"Loaded resource from active resources\", startTime, key);\n       }\n       return null;\n@@ -182,7 +183,7 @@ public <R> LoadStatus load(\n     EngineResource<?> cached = loadFromCache(key, isMemoryCacheable);\n     if (cached != null) {\n       cb.onResourceReady(cached, DataSource.MEMORY_CACHE);\n-      if (Log.isLoggable(TAG, Log.VERBOSE)) {\n+      if (VERBOSE_IS_LOGGABLE) {\n         logWithTimeAndKey(\"Loaded resource from cache\", startTime, key);\n       }\n       return null;\n@@ -191,7 +192,7 @@ public <R> LoadStatus load(\n     EngineJob<?> current = jobs.get(key, onlyRetrieveFromCache);\n     if (current != null) {\n       current.addCallback(cb);\n-      if (Log.isLoggable(TAG, Log.VERBOSE)) {\n+      if (VERBOSE_IS_LOGGABLE) {\n         logWithTimeAndKey(\"Added to existing load\", startTime, key);\n       }\n       return new LoadStatus(cb, current);\n@@ -229,7 +230,7 @@ public <R> LoadStatus load(\n     engineJob.addCallback(cb);\n     engineJob.start(decodeJob);\n \n-    if (Log.isLoggable(TAG, Log.VERBOSE)) {\n+    if (VERBOSE_IS_LOGGABLE) {\n       logWithTimeAndKey(\"Started new load\", startTime, key);\n     }\n     return new LoadStatus(cb, engineJob);",
      "parent_sha": "5e45539453e386b85ae08c65725fdb71b81538a5"
    }
  },
  {
    "oid": "0c001203beadf5130eb36f72180583f797af7709",
    "message": "Store exactly resized images in the disk cache\n\nDoing so seems to noticably increase the speed\nand smoothness of image loads, presumably because\nof the simpler bitmap format we use?",
    "date": "2013-06-06T20:02:27Z",
    "url": "https://github.com/bumptech/glide/commit/0c001203beadf5130eb36f72180583f797af7709",
    "details": {
      "sha": "a60b63ab99695033b227584471f68b9342dec68b",
      "filename": "library/src/com/bumptech/photos/resize/ImageManager.java",
      "status": "modified",
      "additions": 27,
      "deletions": 36,
      "changes": 63,
      "blob_url": "https://github.com/bumptech/glide/blob/0c001203beadf5130eb36f72180583f797af7709/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/0c001203beadf5130eb36f72180583f797af7709/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java?ref=0c001203beadf5130eb36f72180583f797af7709",
      "patch": "@@ -350,7 +350,7 @@ protected Bitmap resizeIfNotFound() throws FileNotFoundException {\n      */\n     public Object getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {\n         final int key = getKey(path, width, height, ResizeType.AS_IS);\n-        return runJob(key, cb, new ImageManagerJob(key, cb, false) {\n+        return runJob(key, cb, new ImageManagerJob(key, cb) {\n             @Override\n             protected Bitmap resizeIfNotFound() throws FileNotFoundException{\n                 return resizer.loadAsIs(path, width, height);\n@@ -360,7 +360,7 @@ protected Bitmap resizeIfNotFound() throws FileNotFoundException{\n \n     public Object getImageExact(final InputStream is, final int width, final int height, String id, LoadedCallback cb) {\n         final int key = getKey(id, width, height, ResizeType.AS_IS);\n-        return runJob(key, cb, new ImageManagerJob(key, cb, false) {\n+        return runJob(key, cb, new ImageManagerJob(key, cb) {\n             @Override\n             protected Bitmap resizeIfNotFound() throws FileNotFoundException {\n                 return resizer.loadAsIs(is, width, height);\n@@ -397,7 +397,6 @@ protected Bitmap resizeIfNotFound() throws FileNotFoundException {\n         });\n     }\n \n-\n     /**\n      * Loads the image for the given path , resizes it to be exactly width pixels wide keeping proportions,\n      * and then returns a section from the center of image exactly height pixels tall.\n@@ -494,12 +493,11 @@ public void shutdown() {\n         bgHandler.getLooper().quit();\n     }\n \n-    private Object runJob(int key,final LoadedCallback cb, final ImageManagerJob job) {\n-        final Object token = job;\n+    private Object runJob(int key, final LoadedCallback cb, final ImageManagerJob job) {\n         if (!returnFromCache(key, cb)) {\n             job.execute();\n         }\n-        return token;\n+        return job;\n     }\n \n     private boolean returnFromCache(int key, LoadedCallback cb) {\n@@ -548,46 +546,39 @@ public void cancel() {\n         public void run() {\n             if (cancelled) return;\n \n-            final boolean isInDiskCache;\n             String path = null;\n             if (useDiskCache) {\n                 path = diskCache.get(String.valueOf(key));\n             }\n \n-            isInDiskCache = path != null;\n+            if (cancelled) return;\n \n-            Bitmap result = null;\n-            if (isInDiskCache) {\n-                try {\n-                    result = resizer.loadAsIs(path);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n+            try {\n+                if (path != null) {\n+                    finishResize(resizer.loadAsIs(path), true);\n+                } else {\n+                    resizeWithPool();\n                 }\n+            } catch (Exception e) {\n+                cb.onLoadFailed(e);\n             }\n+        }\n \n-            if (result == null) {\n-                if (cancelled) return;\n-                try {\n-                    future = executor.submit(new Runnable() {\n-                        @Override\n-                        public void run() {\n-                            try {\n-                                Bitmap result = resizeIfNotFound();\n-                                finishResize(result, isInDiskCache);\n-                            } catch (Exception e) {\n-                                cb.onLoadFailed(e);\n-                            }\n-                        }\n-                    });\n-                //in almost every case will be because of race after calling shutdown. Not much we can do\n-                //either way\n-                } catch (RejectedExecutionException e) {\n-                    e.printStackTrace();\n-                    cb.onLoadFailed(e);\n+        //in almost every case exception will be because of race after calling shutdown. Not much we can do\n+        //either way\n+        private void resizeWithPool() throws RejectedExecutionException {\n+            future = executor.submit(new Runnable() {\n+                @Override\n+                public void run() {\n+                    if (cancelled) return;\n+\n+                    try {\n+                        finishResize(resizeIfNotFound(), false);\n+                    } catch (Exception e) {\n+                        cb.onLoadFailed(e);\n+                    }\n                 }\n-            } else {\n-                finishResize(result, isInDiskCache);\n-            }\n+            });\n         }\n \n         private void finishResize(final Bitmap result, boolean isInDiskCache) {",
      "parent_sha": "d1066dce39cc2d2dfd5e95b6a1adb5ca717b8c3b"
    }
  },
  {
    "oid": "92d8cc401aedab8118a3b91763c029be66588222",
    "message": "Fix a deadlock in EngineResource/Engine.\n\nEngine acquires it's lock, then the EngineResource lock when it loads\nresources from cache or active resources. EngineResource acquires its\nlock, then the EngineLock, when a resource is cleared. This conflicting\nlock order leads to deadlock.\n\nThe fix is similar to the fix applied in ActiveResources. We always make\nsure that the Engine (listener) lock is acquired before the\nEngineResource lock.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=233861929",
    "date": "2019-02-14T18:19:18Z",
    "url": "https://github.com/bumptech/glide/commit/92d8cc401aedab8118a3b91763c029be66588222",
    "details": {
      "sha": "2ff397bdcffc846cc444c69cffb4590424eef680",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java",
      "status": "modified",
      "additions": 17,
      "deletions": 7,
      "changes": 24,
      "blob_url": "https://github.com/bumptech/glide/blob/92d8cc401aedab8118a3b91763c029be66588222/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngineResource.java",
      "raw_url": "https://github.com/bumptech/glide/raw/92d8cc401aedab8118a3b91763c029be66588222/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngineResource.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngineResource.java?ref=92d8cc401aedab8118a3b91763c029be66588222",
      "patch": "@@ -13,11 +13,12 @@\n class EngineResource<Z> implements Resource<Z> {\n   private final boolean isCacheable;\n   private final boolean isRecyclable;\n+  private final Resource<Z> resource;\n+\n   private ResourceListener listener;\n   private Key key;\n   private int acquired;\n   private boolean isRecycled;\n-  private final Resource<Z> resource;\n \n   interface ResourceListener {\n     void onResourceReleased(Key key, EngineResource<?> resource);\n@@ -97,12 +98,21 @@ synchronized void acquire() {\n    * done with the resource. Generally external users should never call this method, the framework\n    * will take care of this for you.\n    */\n-  synchronized void release() {\n-    if (acquired <= 0) {\n-      throw new IllegalStateException(\"Cannot release a recycled or not yet acquired resource\");\n-    }\n-    if (--acquired == 0) {\n-      listener.onResourceReleased(key, this);\n+  // listener is effectively final.\n+  @SuppressWarnings(\"SynchronizeOnNonFinalField\")\n+  void release() {\n+    // To avoid deadlock, always acquire the listener lock before our lock so that the locking\n+    // scheme is consistent (Engine -> EngineResource). Violating this order leads to deadlock\n+    // (b/123646037).\n+    synchronized (listener) {\n+      synchronized (this) {\n+        if (acquired <= 0) {\n+          throw new IllegalStateException(\"Cannot release a recycled or not yet acquired resource\");\n+        }\n+        if (--acquired == 0) {\n+          listener.onResourceReleased(key, this);\n+        }\n+      }\n     }\n   }\n ",
      "parent_sha": "a16a1baa140c9b87b9a68a2a3b91047fd60ba5d8"
    }
  },
  {
    "oid": "a84deb3f6a0bff59b967cf1f2eb8d8c80d805ac2",
    "message": "Avoid calling setDataSource twice for videos\n\nIt's pretty expensive to do, so we're wasting time for videos. If\nsetDataSource is called with a non-video, it will throw an exception\nwhich in turn will cause us to move on to the next decoder, so the\nbehavior shouldn't change.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=168390557",
    "date": "2017-09-15T15:48:14Z",
    "url": "https://github.com/bumptech/glide/commit/a84deb3f6a0bff59b967cf1f2eb8d8c80d805ac2",
    "details": {
      "sha": "7be917bf2a3767e4741eedd66c045e18efe874a5",
      "filename": "library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/bumptech/glide/blob/a84deb3f6a0bff59b967cf1f2eb8d8c80d805ac2/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FVideoBitmapDecoder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/a84deb3f6a0bff59b967cf1f2eb8d8c80d805ac2/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FVideoBitmapDecoder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FVideoBitmapDecoder.java?ref=a84deb3f6a0bff59b967cf1f2eb8d8c80d805ac2",
      "patch": "@@ -101,16 +101,10 @@ public VideoBitmapDecoder(BitmapPool bitmapPool) {\n \n   @Override\n   public boolean handles(ParcelFileDescriptor data, Options options) {\n-    MediaMetadataRetriever retriever = factory.build();\n-    try {\n-      retriever.setDataSource(data.getFileDescriptor());\n-      return true;\n-    } catch (RuntimeException e) {\n-      // Throws a generic runtime exception when given invalid data.\n-      return false;\n-    } finally {\n-      retriever.release();\n-    }\n+    // Calling setDataSource is expensive so avoid doing so unless we're actually called.\n+    // For non-videos this isn't any cheaper, but for videos it safes the redundant call and\n+    // 50-100ms.\n+    return true;\n   }\n \n   @Override\n@@ -134,6 +128,9 @@ public Resource<Bitmap> decode(ParcelFileDescriptor resource, int outWidth, int\n       } else {\n         result = mediaMetadataRetriever.getFrameAtTime(frameTimeMicros, frameOption);\n       }\n+    } catch (RuntimeException e) {\n+      // MediaMetadataRetriever APIs throw generic runtime exceptions when given invalid data.\n+      throw new IOException(e);\n     } finally {\n       mediaMetadataRetriever.release();\n     }",
      "parent_sha": "c2eeb90b70245fe2559428f88411d86cc053c240"
    }
  },
  {
    "oid": "d2d5c4e473505ef3b8d7f391f4749ed3236c72aa",
    "message": "Explain how to obtain Contexts in ModelLoaderFactory\n\nFixes #3061.",
    "date": "2018-05-15T01:11:20Z",
    "url": "https://github.com/bumptech/glide/commit/d2d5c4e473505ef3b8d7f391f4749ed3236c72aa",
    "details": {
      "sha": "921d4c4888ee820a1eca34dd6586353e14ca2f5e",
      "filename": "library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bumptech/glide/blob/d2d5c4e473505ef3b8d7f391f4749ed3236c72aa/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fmodel%2FModelLoaderFactory.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d2d5c4e473505ef3b8d7f391f4749ed3236c72aa/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fmodel%2FModelLoaderFactory.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fmodel%2FModelLoaderFactory.java?ref=d2d5c4e473505ef3b8d7f391f4749ed3236c72aa",
      "patch": "@@ -2,12 +2,18 @@\n \n import android.content.Context;\n import android.support.annotation.NonNull;\n+import com.bumptech.glide.Glide;\n+import com.bumptech.glide.Registry;\n \n /**\n- * An interface for creating a {@link ModelLoader} for a given model type. Will be retained\n- * statically so should not retain {@link Context} or any other objects that cannot be retained for\n- * the life of the application. ModelLoaders will not be retained statically so it is safe for any\n- * ModelLoader built by this factory to retain a reference to a {@link Context}.\n+ * An interface for creating a {@link ModelLoader} for a given model type.\n+ *\n+ * <p>The application {@link android.content.Context} can be passed in to the constructor of the\n+ * factory when necessary. It's unsafe to retain {@link android.app.Activity}\n+ * {@link android.content.Context}s in factories. The {@link android.content.Context} can be\n+ * obtained from\n+ * {@link com.bumptech.glide.module.LibraryGlideModule#registerComponents(Context, Glide, Registry)}\n+ * in most cases.\n  *\n  * @param <T> The type of the model the {@link com.bumptech.glide.load.model.ModelLoader}s built by\n  *            this factory can handle",
      "parent_sha": "ff463d779ef8bccffc224e3647dbaf6dbc27fd57"
    }
  },
  {
    "oid": "1efc7900b0e0f6e745fd843b1a1a2ddf452f5bfa",
    "message": "Post release() in EngineJob#reschedule.\n\nPrevents a race condition where the key is nulled\nout on a background thread while simultaneously\nbeing used to remove the job from Engine's list\nof active jobs. As a result of this race, the job\nmay not be removed from the Engine's list, and so\nthe Engine may later try to add a new callback to\nthe now recycled job, triggering an assertion.",
    "date": "2015-05-31T19:00:34Z",
    "url": "https://github.com/bumptech/glide/commit/1efc7900b0e0f6e745fd843b1a1a2ddf452f5bfa",
    "details": {
      "sha": "a4b1feec2d33355ebacdf2dab01e6366caa42387",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java",
      "status": "modified",
      "additions": 89,
      "deletions": 26,
      "changes": 115,
      "blob_url": "https://github.com/bumptech/glide/blob/1efc7900b0e0f6e745fd843b1a1a2ddf452f5bfa/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngineJob.java",
      "raw_url": "https://github.com/bumptech/glide/raw/1efc7900b0e0f6e745fd843b1a1a2ddf452f5bfa/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngineJob.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngineJob.java?ref=1efc7900b0e0f6e745fd843b1a1a2ddf452f5bfa",
      "patch": "@@ -24,17 +24,20 @@ class EngineJob<R> implements DecodeJob.Callback<R> {\n \n   private static final int MSG_COMPLETE = 1;\n   private static final int MSG_EXCEPTION = 2;\n+  // Used when we realize we're cancelled on a background thread in reschedule and can recycle\n+  // immediately rather than waiting for a result or an error.\n+  private static final int MSG_CANCELLED = 3;\n \n   private final List<ResourceCallback> cbs = new ArrayList<>(2);\n+  private final StateVerifier stateVerifier = new DefaultStateVerifier();\n   private final Pools.Pool<EngineJob<?>> pool;\n   private final EngineResourceFactory engineResourceFactory;\n   private final EngineJobListener listener;\n   private final GlideExecutor diskCacheExecutor;\n   private final GlideExecutor sourceExecutor;\n+\n   private Key key;\n   private boolean isCacheable;\n-\n-  private boolean isCancelled;\n   private Resource<?> resource;\n   private boolean hasResource;\n   private GlideException exception;\n@@ -43,9 +46,10 @@ class EngineJob<R> implements DecodeJob.Callback<R> {\n   // status.\n   private List<ResourceCallback> ignoredCallbacks;\n   private EngineResource<?> engineResource;\n-\n   private DecodeJob<R> decodeJob;\n-  private boolean isReleased;\n+\n+  // Checked primarily on the main thread, but also on other threads in reschedule.\n+  private volatile boolean isCancelled;\n \n   EngineJob(GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor,\n       EngineJobListener listener, Pools.Pool<EngineJob<?>> pool) {\n@@ -67,7 +71,7 @@ class EngineJob<R> implements DecodeJob.Callback<R> {\n   EngineJob<R> init(Key key, boolean isCacheable) {\n     this.key = key;\n     this.isCacheable = isCacheable;\n-    isReleased = false;\n+    stateVerifier.setRecycled(false /*isReleased*/);\n     return this;\n   }\n \n@@ -77,10 +81,8 @@ public void start(DecodeJob<R> decodeJob) {\n   }\n \n   public void addCallback(ResourceCallback cb) {\n-    if (isReleased) {\n-      throw new RuntimeException(\"Already released\");\n-    }\n     Util.assertMainThread();\n+    stateVerifier.throwIfRecycled();\n     if (hasResource) {\n       cb.onResourceReady(engineResource);\n     } else if (hasLoadFailed) {\n@@ -91,10 +93,8 @@ public void addCallback(ResourceCallback cb) {\n   }\n \n   public void removeCallback(ResourceCallback cb) {\n-    if (isReleased) {\n-      throw new RuntimeException(\"Already released\");\n-    }\n     Util.assertMainThread();\n+    stateVerifier.throwIfRecycled();\n     if (hasResource || hasLoadFailed) {\n       addIgnoredCallback(cb);\n     } else {\n@@ -146,15 +146,15 @@ boolean isCancelled() {\n   }\n \n   private void handleResultOnMainThread() {\n-    if (isReleased) {\n-      throw new RuntimeException(\"Already released\");\n-    }\n+    stateVerifier.throwIfRecycled();\n     if (isCancelled) {\n       resource.recycle();\n       release();\n       return;\n     } else if (cbs.isEmpty()) {\n       throw new IllegalStateException(\"Received a resource without any callbacks to notify\");\n+    } else if (hasResource) {\n+      throw new IllegalStateException(\"Already have resource\");\n     }\n     engineResource = engineResourceFactory.build(resource, isCacheable);\n     hasResource = true;\n@@ -176,8 +176,18 @@ private void handleResultOnMainThread() {\n     release();\n   }\n \n+  private void handleCancelledOnMainThread() {\n+    stateVerifier.throwIfRecycled();\n+    if (!isCancelled) {\n+      throw new IllegalStateException(\"Not cancelled\");\n+    }\n+    listener.onEngineJobCancelled(this, key);\n+    release();\n+  }\n+\n   private void release() {\n-    isReleased = true;\n+    Util.assertMainThread();\n+    stateVerifier.setRecycled(true /*isReleased*/);\n     cbs.clear();\n     key = null;\n     engineResource = null;\n@@ -209,21 +219,21 @@ public void onLoadFailed(GlideException e) {\n   @Override\n   public void reschedule(DecodeJob<?> job) {\n     if (isCancelled) {\n-      release();\n+      MAIN_THREAD_HANDLER.obtainMessage(MSG_CANCELLED, this).sendToTarget();\n     } else {\n       sourceExecutor.execute(job);\n     }\n   }\n \n   private void handleExceptionOnMainThread() {\n-    if (isReleased) {\n-      throw new RuntimeException(\"Already released\");\n-    }\n+    stateVerifier.throwIfRecycled();\n     if (isCancelled) {\n       release();\n       return;\n     } else if (cbs.isEmpty()) {\n       throw new IllegalStateException(\"Received an exception without any callbacks to notify\");\n+    } else if (hasLoadFailed) {\n+      throw new IllegalStateException(\"Already failed once\");\n     }\n     hasLoadFailed = true;\n \n@@ -249,17 +259,70 @@ private static class MainThreadCallback implements Handler.Callback {\n \n     @Override\n     public boolean handleMessage(Message message) {\n-      if (MSG_COMPLETE == message.what || MSG_EXCEPTION == message.what) {\n-        EngineJob job = (EngineJob) message.obj;\n-        if (MSG_COMPLETE == message.what) {\n+      EngineJob job = (EngineJob) message.obj;\n+      switch (message.what) {\n+        case MSG_COMPLETE:\n           job.handleResultOnMainThread();\n-        } else {\n+          break;\n+        case MSG_EXCEPTION:\n           job.handleExceptionOnMainThread();\n-        }\n-        return true;\n+          break;\n+        case MSG_CANCELLED:\n+          job.handleCancelledOnMainThread();\n+          break;\n+        default:\n+          throw new IllegalStateException(\"Unrecognized message: \" + message.what);\n+      }\n+      return true;\n+    }\n+  }\n+\n+  /**\n+   * Verifies that the job is not in the recycled state.\n+   */\n+  private interface StateVerifier {\n+    void throwIfRecycled();\n+    void setRecycled(boolean isRecycled);\n+  }\n+\n+  private static class DefaultStateVerifier implements StateVerifier {\n+\n+    private boolean isReleased;\n+\n+    @Override\n+    public void throwIfRecycled() {\n+      if (isReleased) {\n+        throw new IllegalStateException(\"Already released\");\n       }\n+    }\n \n-      return false;\n+    @Override\n+    public void setRecycled(boolean isRecycled) {\n+      this.isReleased = isRecycled;\n+    }\n+  }\n+\n+  // Used for debugging.\n+  @SuppressWarnings(\"unused\")\n+  private static class DebugStateVerifier implements StateVerifier {\n+\n+    // Keeps track of the stack trace where our state was set to recycled.\n+    private RuntimeException recycledAtStackTraceException;\n+\n+    @Override\n+    public void throwIfRecycled() {\n+      if (recycledAtStackTraceException != null) {\n+        throw new IllegalStateException(\"Already released\", recycledAtStackTraceException);\n+      }\n+    }\n+\n+    @Override\n+    public void setRecycled(boolean isRecycled) {\n+      if (isRecycled) {\n+        this.recycledAtStackTraceException = new RuntimeException(\"Released\");\n+      } else {\n+        this.recycledAtStackTraceException = null;\n+      }\n     }\n   }\n }",
      "parent_sha": "c5aa232b3947169cfa184c87d1e9edb78257a175"
    }
  },
  {
    "oid": "36993b8334ebac3e2bc77f1cd3b9681b7d07ac5f",
    "message": "Fix GIF frame delays accidentally reverted in []\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=95042250",
    "date": "2015-06-02T21:23:52Z",
    "url": "https://github.com/bumptech/glide/commit/36993b8334ebac3e2bc77f1cd3b9681b7d07ac5f",
    "details": {
      "sha": "5b2705fca32d1a3cf09344f17e36f9afb0e8dbf9",
      "filename": "library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bumptech/glide/blob/36993b8334ebac3e2bc77f1cd3b9681b7d07ac5f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fgif%2FGifFrameLoader.java",
      "raw_url": "https://github.com/bumptech/glide/raw/36993b8334ebac3e2bc77f1cd3b9681b7d07ac5f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fgif%2FGifFrameLoader.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fgif%2FGifFrameLoader.java?ref=36993b8334ebac3e2bc77f1cd3b9681b7d07ac5f",
      "patch": "@@ -181,9 +181,12 @@ private void loadNextFrame() {\n       return;\n     }\n     isLoadPending = true;\n+    // Get the delay before incrementing the pointer because the delay indicates the amount of time\n+    // we want to spend on the current frame.\n+    int delay = gifDecoder.getNextDelay();\n+    long targetTime = SystemClock.uptimeMillis() + delay;\n \n     gifDecoder.advance();\n-    long targetTime = SystemClock.uptimeMillis() + gifDecoder.getNextDelay();\n     next = new DelayTarget(handler, gifDecoder.getCurrentFrameIndex(), targetTime);\n     requestBuilder.clone().apply(signatureOf(new FrameSignature())).load(gifDecoder).into(next);\n   }",
      "parent_sha": "8720e161169e228ae4dc1e78affa937f87a561c2"
    }
  },
  {
    "oid": "0290100538abe33ac07ac7d83f09565a79231f24",
    "message": "Avoid overriding status if cleared in Target.\n\nFixes #385.",
    "date": "2015-03-31T13:55:27Z",
    "url": "https://github.com/bumptech/glide/commit/0290100538abe33ac07ac7d83f09565a79231f24",
    "details": {
      "sha": "33366d020865ec71a65afa6dde471661d9899c00",
      "filename": "library/src/main/java/com/bumptech/glide/request/GenericRequest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bumptech/glide/blob/0290100538abe33ac07ac7d83f09565a79231f24/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FGenericRequest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/0290100538abe33ac07ac7d83f09565a79231f24/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FGenericRequest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2FGenericRequest.java?ref=0290100538abe33ac07ac7d83f09565a79231f24",
      "patch": "@@ -493,14 +493,15 @@ public void onResourceReady(Resource<?> resource) {\n      * @param result object returned by {@link Resource#get()}, checked for type and never <code>null</code>\n      */\n     private void onResourceReady(Resource<?> resource, R result) {\n+        status = Status.COMPLETE;\n+        this.resource = resource;\n+\n         if (requestListener == null || !requestListener.onResourceReady(result, model, target, loadedFromMemoryCache,\n                 isFirstReadyResource())) {\n             GlideAnimation<R> animation = animationFactory.build(loadedFromMemoryCache, isFirstReadyResource());\n             target.onResourceReady(result, animation);\n         }\n \n-        status = Status.COMPLETE;\n-        this.resource = resource;\n         notifyLoadSuccess();\n \n         if (Log.isLoggable(TAG, Log.VERBOSE)) {",
      "parent_sha": "91466bbf06b7a797b7320dc4efe3d83f6e850b9a"
    }
  },
  {
    "oid": "d40198ec7ca9ae47188dcffcbf718a36d8db11e9",
    "message": "Roll back \"Improve handling of EOF in DefaultImageHeaderParser.Reader\" as it unexpectedly broke some tests downstream\n\nPiperOrigin-RevId: 278525850",
    "date": "2019-11-05T04:13:25Z",
    "url": "https://github.com/bumptech/glide/commit/d40198ec7ca9ae47188dcffcbf718a36d8db11e9",
    "details": {
      "sha": "f81f548cafbb9455299c46ff32ba7108686692e2",
      "filename": "library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java",
      "status": "modified",
      "additions": 105,
      "deletions": 152,
      "changes": 257,
      "blob_url": "https://github.com/bumptech/glide/blob/d40198ec7ca9ae47188dcffcbf718a36d8db11e9/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDefaultImageHeaderParser.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d40198ec7ca9ae47188dcffcbf718a36d8db11e9/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDefaultImageHeaderParser.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDefaultImageHeaderParser.java?ref=d40198ec7ca9ae47188dcffcbf718a36d8db11e9",
      "patch": "@@ -85,72 +85,58 @@ public int getOrientation(@NonNull ByteBuffer byteBuffer, @NonNull ArrayPool byt\n \n   @NonNull\n   private ImageType getType(Reader reader) throws IOException {\n-    try {\n-      final int firstTwoBytes = reader.getUInt16();\n-      // JPEG.\n-      if (firstTwoBytes == EXIF_MAGIC_NUMBER) {\n-        return JPEG;\n-      }\n+    final int firstTwoBytes = reader.getUInt16();\n \n-      final int firstThreeBytes = (firstTwoBytes << 8) | reader.getUInt8();\n-      if (firstThreeBytes == GIF_HEADER) {\n-        return GIF;\n-      }\n+    // JPEG.\n+    if (firstTwoBytes == EXIF_MAGIC_NUMBER) {\n+      return JPEG;\n+    }\n \n-      final int firstFourBytes = (firstThreeBytes << 8) | reader.getUInt8();\n-      // PNG.\n-      if (firstFourBytes == PNG_HEADER) {\n-        // See: http://stackoverflow.com/questions/2057923/how-to-check-a-png-for-grayscale-alpha\n-        // -color-type\n-        reader.skip(25 - 4);\n-        try {\n-          int alpha = reader.getUInt8();\n-          // A RGB indexed PNG can also have transparency. Better safe than sorry!\n-          return alpha >= 3 ? PNG_A : PNG;\n-        } catch (Reader.EndOfFileException e) {\n-          if (Log.isLoggable(TAG, Log.ERROR)) {\n-            Log.e(TAG, \"Unexpected EOF, assuming no alpha\", e);\n-          }\n-          return PNG;\n-        }\n-      }\n+    final int firstFourBytes = (firstTwoBytes << 16 & 0xFFFF0000) | (reader.getUInt16() & 0xFFFF);\n+    // PNG.\n+    if (firstFourBytes == PNG_HEADER) {\n+      // See: http://stackoverflow.com/questions/2057923/how-to-check-a-png-for-grayscale-alpha\n+      // -color-type\n+      reader.skip(25 - 4);\n+      int alpha = reader.getByte();\n+      // A RGB indexed PNG can also have transparency. Better safe than sorry!\n+      return alpha >= 3 ? PNG_A : PNG;\n+    }\n \n-      // WebP (reads up to 21 bytes).\n-      // See https://developers.google.com/speed/webp/docs/riff_container for details.\n-      if (firstFourBytes != RIFF_HEADER) {\n-        return UNKNOWN;\n-      }\n+    // GIF from first 3 bytes.\n+    if (firstFourBytes >> 8 == GIF_HEADER) {\n+      return GIF;\n+    }\n \n-      // Bytes 4 - 7 contain length information. Skip these.\n-      reader.skip(4);\n-      final int thirdFourBytes = (reader.getUInt16() << 16) | reader.getUInt16();\n-      if (thirdFourBytes != WEBP_HEADER) {\n-        return UNKNOWN;\n-      }\n-      final int fourthFourBytes = (reader.getUInt16() << 16) | reader.getUInt16();\n-      if ((fourthFourBytes & VP8_HEADER_MASK) != VP8_HEADER) {\n-        return UNKNOWN;\n-      }\n-      if ((fourthFourBytes & VP8_HEADER_TYPE_MASK) == VP8_HEADER_TYPE_EXTENDED) {\n-        // Skip some more length bytes and check for transparency/alpha flag.\n-        reader.skip(4);\n-        short flags = reader.getUInt8();\n-        return (flags & WEBP_EXTENDED_ALPHA_FLAG) != 0 ? ImageType.WEBP_A : ImageType.WEBP;\n-      }\n-      if ((fourthFourBytes & VP8_HEADER_TYPE_MASK) == VP8_HEADER_TYPE_LOSSLESS) {\n-        // See chromium.googlesource.com/webm/libwebp/+/master/doc/webp-lossless-bitstream-spec.txt\n-        // for more info.\n-        reader.skip(4);\n-        short flags = reader.getUInt8();\n-        return (flags & WEBP_LOSSLESS_ALPHA_FLAG) != 0 ? ImageType.WEBP_A : ImageType.WEBP;\n-      }\n-      return ImageType.WEBP;\n-    } catch (Reader.EndOfFileException e) {\n-      if (Log.isLoggable(TAG, Log.ERROR)) {\n-        Log.e(TAG, \"Unexpected EOF\", e);\n-      }\n+    // WebP (reads up to 21 bytes). See https://developers.google.com/speed/webp/docs/riff_container\n+    // for details.\n+    if (firstFourBytes != RIFF_HEADER) {\n       return UNKNOWN;\n     }\n+    // Bytes 4 - 7 contain length information. Skip these.\n+    reader.skip(4);\n+    final int thirdFourBytes =\n+        (reader.getUInt16() << 16 & 0xFFFF0000) | (reader.getUInt16() & 0xFFFF);\n+    if (thirdFourBytes != WEBP_HEADER) {\n+      return UNKNOWN;\n+    }\n+    final int fourthFourBytes =\n+        (reader.getUInt16() << 16 & 0xFFFF0000) | (reader.getUInt16() & 0xFFFF);\n+    if ((fourthFourBytes & VP8_HEADER_MASK) != VP8_HEADER) {\n+      return UNKNOWN;\n+    }\n+    if ((fourthFourBytes & VP8_HEADER_TYPE_MASK) == VP8_HEADER_TYPE_EXTENDED) {\n+      // Skip some more length bytes and check for transparency/alpha flag.\n+      reader.skip(4);\n+      return (reader.getByte() & WEBP_EXTENDED_ALPHA_FLAG) != 0 ? ImageType.WEBP_A : ImageType.WEBP;\n+    }\n+    if ((fourthFourBytes & VP8_HEADER_TYPE_MASK) == VP8_HEADER_TYPE_LOSSLESS) {\n+      // See chromium.googlesource.com/webm/libwebp/+/master/doc/webp-lossless-bitstream-spec.txt\n+      // for more info.\n+      reader.skip(4);\n+      return (reader.getByte() & WEBP_LOSSLESS_ALPHA_FLAG) != 0 ? ImageType.WEBP_A : ImageType.WEBP;\n+    }\n+    return ImageType.WEBP;\n   }\n \n   /**\n@@ -161,35 +147,28 @@ private ImageType getType(Reader reader) throws IOException {\n    *     contain an orientation\n    */\n   private int getOrientation(Reader reader, ArrayPool byteArrayPool) throws IOException {\n-    try {\n-      final int magicNumber = reader.getUInt16();\n+    final int magicNumber = reader.getUInt16();\n \n-      if (!handles(magicNumber)) {\n+    if (!handles(magicNumber)) {\n+      if (Log.isLoggable(TAG, Log.DEBUG)) {\n+        Log.d(TAG, \"Parser doesn't handle magic number: \" + magicNumber);\n+      }\n+      return UNKNOWN_ORIENTATION;\n+    } else {\n+      int exifSegmentLength = moveToExifSegmentAndGetLength(reader);\n+      if (exifSegmentLength == -1) {\n         if (Log.isLoggable(TAG, Log.DEBUG)) {\n-          Log.d(TAG, \"Parser doesn't handle magic number: \" + magicNumber);\n+          Log.d(TAG, \"Failed to parse exif segment length, or exif segment not found\");\n         }\n         return UNKNOWN_ORIENTATION;\n-      } else {\n-        int exifSegmentLength = moveToExifSegmentAndGetLength(reader);\n-        if (exifSegmentLength == -1) {\n-          if (Log.isLoggable(TAG, Log.DEBUG)) {\n-            Log.d(TAG, \"Failed to parse exif segment length, or exif segment not found\");\n-          }\n-          return UNKNOWN_ORIENTATION;\n-        }\n-\n-        byte[] exifData = byteArrayPool.get(exifSegmentLength, byte[].class);\n-        try {\n-          return parseExifSegment(reader, exifData, exifSegmentLength);\n-        } finally {\n-          byteArrayPool.put(exifData);\n-        }\n       }\n-    } catch (Reader.EndOfFileException e) {\n-      if (Log.isLoggable(TAG, Log.ERROR)) {\n-        Log.e(TAG, \"Unexpected EOF\", e);\n+\n+      byte[] exifData = byteArrayPool.get(exifSegmentLength, byte[].class);\n+      try {\n+        return parseExifSegment(reader, exifData, exifSegmentLength);\n+      } finally {\n+        byteArrayPool.put(exifData);\n       }\n-      return UNKNOWN_ORIENTATION;\n     }\n   }\n \n@@ -258,27 +237,26 @@ private int moveToExifSegmentAndGetLength(Reader reader) throws IOException {\n         return -1;\n       }\n \n-      int segmentLength = reader.getUInt16();\n-      // A segment includes the bytes that specify its length.\n-      int segmentContentsLength = segmentLength - 2;\n+      // Segment length includes bytes for segment length.\n+      int segmentLength = reader.getUInt16() - 2;\n       if (segmentType != EXIF_SEGMENT_TYPE) {\n-        long skipped = reader.skip(segmentContentsLength);\n-        if (skipped != segmentContentsLength) {\n+        long skipped = reader.skip(segmentLength);\n+        if (skipped != segmentLength) {\n           if (Log.isLoggable(TAG, Log.DEBUG)) {\n             Log.d(\n                 TAG,\n                 \"Unable to skip enough data\"\n                     + \", type: \"\n                     + segmentType\n                     + \", wanted to skip: \"\n-                    + segmentContentsLength\n+                    + segmentLength\n                     + \", but actually skipped: \"\n                     + skipped);\n           }\n           return -1;\n         }\n       } else {\n-        return segmentContentsLength;\n+        return segmentLength;\n       }\n     }\n   }\n@@ -415,39 +393,15 @@ private boolean isAvailable(int offset, int byteSize) {\n   }\n \n   private interface Reader {\n-\n-    /**\n-     * Reads and returns a 8-bit unsigned integer.\n-     *\n-     * <p>Throws an {@link EndOfFileException} if an EOF is reached.\n-     */\n-    short getUInt8() throws IOException;\n-\n-    /**\n-     * Reads and returns a 16-bit unsigned integer.\n-     *\n-     * <p>Throws an {@link EndOfFileException} if an EOF is reached.\n-     */\n     int getUInt16() throws IOException;\n \n-    /**\n-     * Reads and returns a byte array.\n-     *\n-     * <p>Throws an {@link EndOfFileException} if an EOF is reached before anything was read.\n-     */\n-    int read(byte[] buffer, int byteCount) throws IOException;\n+    short getUInt8() throws IOException;\n \n     long skip(long total) throws IOException;\n \n-    // TODO(timurrrr): Stop inheriting from IOException, and make sure all attempts to read from\n-    //   a Reader correctly handle EOFs.\n-    final class EndOfFileException extends IOException {\n-      private static final long serialVersionUID = 1L;\n+    int read(byte[] buffer, int byteCount) throws IOException;\n \n-      EndOfFileException() {\n-        super(\"Unexpectedly reached end of a file\");\n-      }\n-    }\n+    int getByte() throws IOException;\n   }\n \n   private static final class ByteBufferReader implements Reader {\n@@ -460,16 +414,20 @@ private static final class ByteBufferReader implements Reader {\n     }\n \n     @Override\n-    public short getUInt8() throws EndOfFileException {\n-      if (byteBuffer.remaining() < 1) {\n-        throw new EndOfFileException();\n-      }\n-      return (short) (byteBuffer.get() & 0xFF);\n+    public int getUInt16() {\n+      return (getByte() << 8 & 0xFF00) | (getByte() & 0xFF);\n     }\n \n     @Override\n-    public int getUInt16() throws EndOfFileException {\n-      return ((int) getUInt8() << 8) | getUInt8();\n+    public short getUInt8() {\n+      return (short) (getByte() & 0xFF);\n+    }\n+\n+    @Override\n+    public long skip(long total) {\n+      int toSkip = (int) Math.min(byteBuffer.remaining(), total);\n+      byteBuffer.position(byteBuffer.position() + toSkip);\n+      return toSkip;\n     }\n \n     @Override\n@@ -483,10 +441,11 @@ public int read(byte[] buffer, int byteCount) {\n     }\n \n     @Override\n-    public long skip(long total) {\n-      int toSkip = (int) Math.min(byteBuffer.remaining(), total);\n-      byteBuffer.position(byteBuffer.position() + toSkip);\n-      return toSkip;\n+    public int getByte() {\n+      if (byteBuffer.remaining() < 1) {\n+        return -1;\n+      }\n+      return byteBuffer.get();\n     }\n   }\n \n@@ -498,35 +457,14 @@ private static final class StreamReader implements Reader {\n       this.is = is;\n     }\n \n-    @Override\n-    public short getUInt8() throws IOException {\n-      int readResult = is.read();\n-      if (readResult == -1) {\n-        throw new EndOfFileException();\n-      }\n-\n-      return (short) readResult;\n-    }\n-\n     @Override\n     public int getUInt16() throws IOException {\n-      return ((int) getUInt8() << 8) | getUInt8();\n+      return (is.read() << 8 & 0xFF00) | (is.read() & 0xFF);\n     }\n \n     @Override\n-    public int read(byte[] buffer, int byteCount) throws IOException {\n-      int numBytesRead = 0;\n-      int lastReadResult = 0;\n-      while (numBytesRead < byteCount\n-          && ((lastReadResult = is.read(buffer, numBytesRead, byteCount - numBytesRead)) != -1)) {\n-        numBytesRead += lastReadResult;\n-      }\n-\n-      if (numBytesRead == 0 && lastReadResult == -1) {\n-        throw new EndOfFileException();\n-      }\n-\n-      return numBytesRead;\n+    public short getUInt8() throws IOException {\n+      return (short) (is.read() & 0xFF);\n     }\n \n     @Override\n@@ -555,5 +493,20 @@ public long skip(long total) throws IOException {\n       }\n       return total - toSkip;\n     }\n+\n+    @Override\n+    public int read(byte[] buffer, int byteCount) throws IOException {\n+      int toRead = byteCount;\n+      int read;\n+      while (toRead > 0 && ((read = is.read(buffer, byteCount - toRead, toRead)) != -1)) {\n+        toRead -= read;\n+      }\n+      return byteCount - toRead;\n+    }\n+\n+    @Override\n+    public int getByte() throws IOException {\n+      return is.read();\n+    }\n   }\n }",
      "parent_sha": "2522398e75300b4248c41110dd2469dcab44ce20"
    }
  },
  {
    "oid": "258305660c0b78cc39f8cdb49078e2175a5335e6",
    "message": "Start lifecycles not RequestManagers in RequestManagerRetriever.\n\nThis was originally added to fix a memory leak when we registered the connectivity receiver globally, but not the RequestManager. We've since started registering the RequestManager globally, so this fix no longer works. Neither fix should be necessary if we can make sure we use the correct Fragment here anyway, which I think we've done.\n\nPiperOrigin-RevId: 410075941",
    "date": "2021-11-15T22:08:49Z",
    "url": "https://github.com/bumptech/glide/commit/258305660c0b78cc39f8cdb49078e2175a5335e6",
    "details": {
      "sha": "2a26a8ef5d6a5e411fab63ad43767140ba56724f",
      "filename": "library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/bumptech/glide/blob/258305660c0b78cc39f8cdb49078e2175a5335e6/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestManagerRetriever.java",
      "raw_url": "https://github.com/bumptech/glide/raw/258305660c0b78cc39f8cdb49078e2175a5335e6/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestManagerRetriever.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestManagerRetriever.java?ref=258305660c0b78cc39f8cdb49078e2175a5335e6",
      "patch": "@@ -419,11 +419,8 @@ private RequestManager fragmentGet(\n       requestManager =\n           factory.build(\n               glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);\n-      // This is a bit of hack, we're going to start the RequestManager, but not the\n-      // corresponding Lifecycle. It's safe to start the RequestManager, but starting the\n-      // Lifecycle might trigger memory leaks. See b/154405040\n       if (isParentVisible) {\n-        requestManager.onStart();\n+        current.getGlideLifecycle().onStart();\n       }\n       current.setRequestManager(requestManager);\n     }\n@@ -474,11 +471,8 @@ private RequestManager supportFragmentGet(\n       requestManager =\n           factory.build(\n               glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);\n-      // This is a bit of hack, we're going to start the RequestManager, but not the\n-      // corresponding Lifecycle. It's safe to start the RequestManager, but starting the\n-      // Lifecycle might trigger memory leaks. See b/154405040\n       if (isParentVisible) {\n-        requestManager.onStart();\n+        current.getGlideLifecycle().onStart();\n       }\n       current.setRequestManager(requestManager);\n     }",
      "parent_sha": "f40cc137d86bb251367b3c7747af9b08795dca8a"
    }
  },
  {
    "oid": "c5d8fb140b19287943a0b67d7a766f51178d3813",
    "message": "do bitmap ref management on a bg thread\n\nReduces the number of locks the main thread needs\nto acquire and the amount of time they need to be\nheld (as well as the contention for said locks)",
    "date": "2013-07-17T21:40:56Z",
    "url": "https://github.com/bumptech/glide/commit/c5d8fb140b19287943a0b67d7a766f51178d3813",
    "details": {
      "sha": "99366d0152f9856b76a95ebafaddc115c664247d",
      "filename": "library/src/com/bumptech/glide/resize/ImageManager.java",
      "status": "modified",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/bumptech/glide/blob/c5d8fb140b19287943a0b67d7a766f51178d3813/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/c5d8fb140b19287943a0b67d7a766f51178d3813/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java?ref=c5d8fb140b19287943a0b67d7a766f51178d3813",
      "patch": "@@ -433,7 +433,12 @@ protected Bitmap resizeIfNotFound(InputStream is) throws FileNotFoundException{\n      * @param b The rejected Bitmap\n      */\n     public void rejectBitmap(final Bitmap b) {\n-        bitmapReferenceCounter.rejectBitmap(b);\n+        bgHandler.post(new Runnable() {\n+            @Override\n+            public void run() {\n+                bitmapReferenceCounter.rejectBitmap(b);\n+            }\n+        });\n     }\n \n     /**\n@@ -444,8 +449,13 @@ public void rejectBitmap(final Bitmap b) {\n      *\n      * @param b The acquired Bitmap\n      */\n-    public void acquireBitmap(Bitmap b) {\n-        bitmapReferenceCounter.acquireBitmap(b);\n+    public void acquireBitmap(final Bitmap b) {\n+        bgHandler.post(new Runnable() {\n+            @Override\n+            public void run() {\n+                bitmapReferenceCounter.acquireBitmap(b);\n+            }\n+        });\n     }\n \n     /**\n@@ -457,7 +467,12 @@ public void acquireBitmap(Bitmap b) {\n      * @param b The releasedBitmap\n      */\n     public void releaseBitmap(final Bitmap b) {\n-        bitmapReferenceCounter.releaseBitmap(b);\n+        bgHandler.post(new Runnable() {\n+            @Override\n+            public void run() {\n+                bitmapReferenceCounter.releaseBitmap(b);\n+            }\n+        });\n     }\n \n     /**",
      "parent_sha": "924d7d1fe10924e1a56bf00e84910eb658de4fbf"
    }
  },
  {
    "oid": "45013968bf451ac3219febd6f0794321916e62c0",
    "message": "Do not use MediaStore thumbnail when size is SIZE_ORIGINAL.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=170774550",
    "date": "2017-10-03T14:28:31Z",
    "url": "https://github.com/bumptech/glide/commit/45013968bf451ac3219febd6f0794321916e62c0",
    "details": {
      "sha": "d7f7e44af33d6694ddbcb1caf1231967ac44f988",
      "filename": "library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bumptech/glide/blob/45013968bf451ac3219febd6f0794321916e62c0/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2Fmediastore%2FMediaStoreUtil.java",
      "raw_url": "https://github.com/bumptech/glide/raw/45013968bf451ac3219febd6f0794321916e62c0/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2Fmediastore%2FMediaStoreUtil.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fdata%2Fmediastore%2FMediaStoreUtil.java?ref=45013968bf451ac3219febd6f0794321916e62c0",
      "patch": "@@ -3,6 +3,7 @@\n import android.content.ContentResolver;\n import android.net.Uri;\n import android.provider.MediaStore;\n+import com.bumptech.glide.request.target.Target;\n \n /**\n  * Utility classes for interacting with the media store.\n@@ -33,6 +34,9 @@ public static boolean isMediaStoreImageUri(Uri uri) {\n   }\n \n   public static boolean isThumbnailSize(int width, int height) {\n-    return width <= MINI_THUMB_WIDTH && height <= MINI_THUMB_HEIGHT;\n+    return width != Target.SIZE_ORIGINAL\n+        && height != Target.SIZE_ORIGINAL\n+        && width <= MINI_THUMB_WIDTH\n+        && height <= MINI_THUMB_HEIGHT;\n   }\n }",
      "parent_sha": "8a90f542145f82f51fb8b7718f2a5c3fd9ce1bb9"
    }
  },
  {
    "oid": "ccbd7f71c71731e5c367e5cdc9ed0a64d8fe8fcc",
    "message": "Fix lint errors in ReEncodingGifResourceEncoderTest.",
    "date": "2015-06-09T18:50:12Z",
    "url": "https://github.com/bumptech/glide/commit/ccbd7f71c71731e5c367e5cdc9ed0a64d8fe8fcc",
    "details": {
      "sha": "1d104591b6a7ae81d1bfde7254137ac4932aaea3",
      "filename": "integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bumptech/glide/blob/ccbd7f71c71731e5c367e5cdc9ed0a64d8fe8fcc/integration%2Fgifencoder%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fgifencoder%2FReEncodingGifResourceEncoderTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/ccbd7f71c71731e5c367e5cdc9ed0a64d8fe8fcc/integration%2Fgifencoder%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fgifencoder%2FReEncodingGifResourceEncoderTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/integration%2Fgifencoder%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fgifencoder%2FReEncodingGifResourceEncoderTest.java?ref=ccbd7f71c71731e5c367e5cdc9ed0a64d8fe8fcc",
      "patch": "@@ -54,8 +54,9 @@ public class ReEncodingGifResourceEncoderTest {\n   @Mock GifHeaderParser parser;\n   @Mock AnimatedGifEncoder gifEncoder;\n   @Mock Resource<Bitmap> frameResource;\n-  @Mock Transformation<Bitmap> frameTransformation;\n   @Mock GifDrawable gifDrawable;\n+  @Mock Transformation<Bitmap> frameTransformation;\n+  @Mock Resource<Bitmap> transformedResource;\n \n   private ReEncodingGifResourceEncoder encoder;\n   private Options options;\n@@ -242,12 +243,10 @@ public void testWritesTransformedBitmaps() {\n     when(gifDrawable.getIntrinsicHeight()).thenReturn(expectedHeight);\n \n     Bitmap transformedFrame = Bitmap.createBitmap(200, 200, Bitmap.Config.RGB_565);\n-    final Resource<Bitmap> transformedResource = mock(Resource.class);\n     when(transformedResource.get()).thenReturn(transformedFrame);\n-    Transformation<Bitmap> transformation = mock(Transformation.class);\n-    when(transformation.transform(eq(frameResource), eq(expectedWidth), eq(expectedHeight)))\n+    when(frameTransformation.transform(eq(frameResource), eq(expectedWidth), eq(expectedHeight)))\n         .thenReturn(transformedResource);\n-    when(gifDrawable.getFrameTransformation()).thenReturn(transformation);\n+    when(gifDrawable.getFrameTransformation()).thenReturn(frameTransformation);\n \n     encoder.encode(resource, file, options);\n \n@@ -257,7 +256,6 @@ public void testWritesTransformedBitmaps() {\n   @Test\n   public void testRecyclesFrameResourceBeforeWritingIfTransformedResourceIsDifferent() {\n     when(decoder.getFrameCount()).thenReturn(1);\n-    Resource<Bitmap> transformedResource = mock(Resource.class);\n     when(frameTransformation.transform(eq(frameResource), anyInt(), anyInt()))\n         .thenReturn(transformedResource);\n     Bitmap expected = Bitmap.createBitmap(200, 200, Bitmap.Config.ARGB_8888);\n@@ -276,7 +274,6 @@ public void testRecyclesFrameResourceBeforeWritingIfTransformedResourceIsDiffere\n   public void testRecyclesTransformedResourceAfterWritingIfTransformedResourceIsDifferent() {\n     when(decoder.getFrameCount()).thenReturn(1);\n     Bitmap expected = Bitmap.createBitmap(100, 200, Bitmap.Config.RGB_565);\n-    Resource<Bitmap> transformedResource = mock(Resource.class);\n     when(transformedResource.get()).thenReturn(expected);\n     when(frameTransformation.transform(eq(frameResource), anyInt(), anyInt()))\n         .thenReturn(transformedResource);",
      "parent_sha": "0f68afc9c336850c0720a9d543a9d4616c508340"
    }
  },
  {
    "oid": "6e1e771e040ad99be5953c307765ca385c4a35ed",
    "message": "Remove a uneccessary var",
    "date": "2013-06-04T18:35:10Z",
    "url": "https://github.com/bumptech/glide/commit/6e1e771e040ad99be5953c307765ca385c4a35ed",
    "details": {
      "sha": "375049c4d7b03f3b2ed6031266e879bbe469c9aa",
      "filename": "library/src/com/bumptech/photos/resize/ImageManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bumptech/glide/blob/6e1e771e040ad99be5953c307765ca385c4a35ed/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/6e1e771e040ad99be5953c307765ca385c4a35ed/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageManager.java?ref=6e1e771e040ad99be5953c307765ca385c4a35ed",
      "patch": "@@ -575,20 +575,18 @@ public void run() {\n             }\n         }\n \n-        private void finishResize(Bitmap result, boolean isInDiskCache) {\n+        private void finishResize(final Bitmap result, boolean isInDiskCache) {\n             if (result != null) {\n                 if (useDiskCache && !isInDiskCache) {\n                     putInDiskCache(key, result);\n                 }\n \n-                final Bitmap finalResult = result;\n-                putInMemoryCache(key, finalResult);\n+                putInMemoryCache(key, result);\n                 mainHandler.post(new Runnable() {\n                     @Override\n                     public void run() {\n-                        cb.onLoadCompleted(finalResult);\n+                        cb.onLoadCompleted(result);\n                     }\n-\n                 });\n             }\n ",
      "parent_sha": "a42166e132f6902051a583e8aff6aca9b8f71e4c"
    }
  },
  {
    "oid": "fcec722bdc016c95d24675b90a64752d4e28427f",
    "message": "Fix a missing closing \u2018}\u2019 tag in RequestManager javadoc.",
    "date": "2017-11-27T15:33:52Z",
    "url": "https://github.com/bumptech/glide/commit/fcec722bdc016c95d24675b90a64752d4e28427f",
    "details": {
      "sha": "14e2c828baed87cdafd0f28944e4db19b834504f",
      "filename": "library/src/main/java/com/bumptech/glide/RequestManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/fcec722bdc016c95d24675b90a64752d4e28427f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/fcec722bdc016c95d24675b90a64752d4e28427f/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestManager.java?ref=fcec722bdc016c95d24675b90a64752d4e28427f",
      "patch": "@@ -414,7 +414,7 @@ public RequestBuilder<Drawable> load(@Nullable Integer resourceId) {\n   }\n \n   /**\n-   * Equivalent to calling {@link #asDrawable()} and then {@link RequestBuilder#load(URL).\n+   * Equivalent to calling {@link #asDrawable()} and then {@link RequestBuilder#load(URL)}.\n    *\n    * @return A new request builder for loading a {@link Drawable} using the given model.\n    */",
      "parent_sha": "383110daf27c73aeddc256e4ce6f5f0aa428b206"
    }
  },
  {
    "oid": "cac71928447b964fc1d9aac300e5ffcb503496b6",
    "message": "Avoid concurrent modifications when notifying ViewTarget callbacks.\n\nFixes #2237.",
    "date": "2017-08-15T15:34:53Z",
    "url": "https://github.com/bumptech/glide/commit/cac71928447b964fc1d9aac300e5ffcb503496b6",
    "details": {
      "sha": "06ecefd40e2e914e0d89457007e0da6a081106ed",
      "filename": "library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bumptech/glide/blob/cac71928447b964fc1d9aac300e5ffcb503496b6/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FViewTarget.java",
      "raw_url": "https://github.com/bumptech/glide/raw/cac71928447b964fc1d9aac300e5ffcb503496b6/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FViewTarget.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FViewTarget.java?ref=cac71928447b964fc1d9aac300e5ffcb503496b6",
      "patch": "@@ -177,7 +177,11 @@ private static class SizeDeterminer {\n     }\n \n     private void notifyCbs(int width, int height) {\n-      for (SizeReadyCallback cb : cbs) {\n+      // One or more callbacks may trigger the removal of one or more additional callbacks, so we\n+      // need a copy of the list to avoid a concurrent modification exception. One place this\n+      // happens is when a full request completes from the in memory cache while its thumbnail is\n+      // still being loaded asynchronously. See #2237.\n+      for (SizeReadyCallback cb : new ArrayList<>(cbs)) {\n         cb.onSizeReady(width, height);\n       }\n     }\n@@ -218,6 +222,12 @@ void getSize(SizeReadyCallback cb) {\n       }\n     }\n \n+    /**\n+     * The callback may be called anyway if it is removed by another {@link SizeReadyCallback} or\n+     * otherwise removed while we're notifying the list of callbacks.\n+     *\n+     * <p>See #2237.\n+     */\n     void removeCallback(SizeReadyCallback cb) {\n       cbs.remove(cb);\n     }",
      "parent_sha": "81b179b98e5a83c8062cde19cf9d1d8ba5dd4bc0"
    }
  },
  {
    "oid": "37f4761b3d7d008f7adc4f866e383cf91fb5431a",
    "message": "Add a max # of bitmaps per size to store\n\nAlso remove some logging",
    "date": "2012-12-26T04:20:40Z",
    "url": "https://github.com/bumptech/glide/commit/37f4761b3d7d008f7adc4f866e383cf91fb5431a",
    "details": {
      "sha": "ea9bf4594be178ce70b103c6ba12f713be5ff16c",
      "filename": "src/com/bumptech/photos/cache/SizedBitmapCache.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bumptech/glide/blob/37f4761b3d7d008f7adc4f866e383cf91fb5431a/src%2Fcom%2Fbumptech%2Fphotos%2Fcache%2FSizedBitmapCache.java",
      "raw_url": "https://github.com/bumptech/glide/raw/37f4761b3d7d008f7adc4f866e383cf91fb5431a/src%2Fcom%2Fbumptech%2Fphotos%2Fcache%2FSizedBitmapCache.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/src%2Fcom%2Fbumptech%2Fphotos%2Fcache%2FSizedBitmapCache.java?ref=37f4761b3d7d008f7adc4f866e383cf91fb5431a",
      "patch": "@@ -5,7 +5,6 @@\n package com.bumptech.photos.cache;\n \n import android.graphics.Bitmap;\n-import com.bumptech.photos.util.Log;\n \n import java.util.HashMap;\n import java.util.LinkedList;\n@@ -20,6 +19,7 @@\n  * To change this template use File | Settings | File Templates.\n  */\n public class SizedBitmapCache {\n+    private static final int MAX_PER_SIZE = 5;\n     private Map<String, Queue<Bitmap>> availableBitmaps = new HashMap<String, Queue<Bitmap>>();\n \n     public void put(Bitmap bitmap) {\n@@ -30,8 +30,9 @@ public void put(Bitmap bitmap) {\n             availableBitmaps.put(sizeKey, available);\n         }\n \n-        available.add(bitmap);\n-        Log.d(\"SBC: added bitmap sizeKey=\" + sizeKey + \" available=\" + available.size());\n+        if (available.size() < MAX_PER_SIZE) {\n+            available.add(bitmap);\n+        }\n     }\n \n     public Bitmap get(int width, int height) {\n@@ -40,7 +41,6 @@ public Bitmap get(int width, int height) {\n         if (available == null || available.size() == 0) {\n             return null;\n         } else {\n-            Log.d(\"SBC: removed bitmap sizeKey=\" + sizeKey + \" available=\" + (available.size()-1));\n             return available.remove();\n         }\n     }",
      "parent_sha": "da3bd5e1015d9c90c066ed4e9cd07d474650b4fa"
    }
  },
  {
    "oid": "50997b0bbbc9ff198b3ef2baaf9dc78e95c1f795",
    "message": "Always call handleException rather than cb",
    "date": "2013-08-08T20:43:03Z",
    "url": "https://github.com/bumptech/glide/commit/50997b0bbbc9ff198b3ef2baaf9dc78e95c1f795",
    "details": {
      "sha": "1b21ea30f32a0efbffea5734c0e8b742088f98b1",
      "filename": "library/src/com/bumptech/glide/resize/ImageManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/50997b0bbbc9ff198b3ef2baaf9dc78e95c1f795/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/50997b0bbbc9ff198b3ef2baaf9dc78e95c1f795/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java?ref=50997b0bbbc9ff198b3ef2baaf9dc78e95c1f795",
      "patch": "@@ -493,7 +493,7 @@ public void run() {\n                                         final Bitmap result = resizeIfNotFound(is);\n                                         finishResize(result, false);\n                                     } catch (Exception e) {\n-                                        cb.onLoadFailed(e);\n+                                        handleException(e);\n                                     }\n                                 }\n                             });",
      "parent_sha": "20941f417deaebeb0eef02727d4c7c7945f423f2"
    }
  },
  {
    "oid": "f058110627968106044e04cf32088e72ef318eec",
    "message": "Make GlideRequests non-final for mocking.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=159181971",
    "date": "2017-06-20T18:16:40Z",
    "url": "https://github.com/bumptech/glide/commit/f058110627968106044e04cf32088e72ef318eec",
    "details": {
      "sha": "1c20fe85881c59d2c86f9073172e907bffe32288",
      "filename": "annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/f058110627968106044e04cf32088e72ef318eec/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FRequestManagerGenerator.java",
      "raw_url": "https://github.com/bumptech/glide/raw/f058110627968106044e04cf32088e72ef318eec/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FRequestManagerGenerator.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FRequestManagerGenerator.java?ref=f058110627968106044e04cf32088e72ef318eec",
      "patch": "@@ -108,7 +108,7 @@ TypeSpec generate(\n             AnnotationSpec.builder(SuppressWarnings.class)\n                 .addMember(\"value\", \"$S\", \"deprecation\")\n                 .build())\n-         .addModifiers(Modifier.PUBLIC, Modifier.FINAL)\n+         .addModifiers(Modifier.PUBLIC)\n          .addMethod(generateAsMethod(generatedCodePackageName, requestBuilder))\n          .addMethod(generateCallSuperConstructor())\n          .addMethods(generateAdditionalRequestManagerMethods(glideExtensions))",
      "parent_sha": "b0d4f421d3ff1ca556833d63ed3e32656b4ec107"
    }
  },
  {
    "oid": "71bfc6b65fde499df533fc26ef4c9202f92ec965",
    "message": "Fix a missing synchronized block in LruCache.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=165650311",
    "date": "2017-08-18T20:48:29Z",
    "url": "https://github.com/bumptech/glide/commit/71bfc6b65fde499df533fc26ef4c9202f92ec965",
    "details": {
      "sha": "1311fa1765c289b1f21444219f7948a9976387a6",
      "filename": "library/src/main/java/com/bumptech/glide/util/LruCache.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/71bfc6b65fde499df533fc26ef4c9202f92ec965/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Futil%2FLruCache.java",
      "raw_url": "https://github.com/bumptech/glide/raw/71bfc6b65fde499df533fc26ef4c9202f92ec965/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Futil%2FLruCache.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Futil%2FLruCache.java?ref=71bfc6b65fde499df533fc26ef4c9202f92ec965",
      "patch": "@@ -58,7 +58,7 @@ protected int getSize(Y item) {\n   /**\n    * Returns the number of entries stored in cache.\n    */\n-  protected int getCount() {\n+  protected synchronized int getCount() {\n     return cache.size();\n   }\n ",
      "parent_sha": "a2a695f11e0a486337c8d0010a997ad536f6a565"
    }
  },
  {
    "oid": "cf8317833765b3245e7d214e5f8ce9ea9455fcee",
    "message": "Fix a javadoc import error in ViewTarget.",
    "date": "2014-12-26T17:22:59Z",
    "url": "https://github.com/bumptech/glide/commit/cf8317833765b3245e7d214e5f8ce9ea9455fcee",
    "details": {
      "sha": "62e664dac7a0325be6c3752818b5ceae575669c3",
      "filename": "library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bumptech/glide/blob/cf8317833765b3245e7d214e5f8ce9ea9455fcee/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FViewTarget.java",
      "raw_url": "https://github.com/bumptech/glide/raw/cf8317833765b3245e7d214e5f8ce9ea9455fcee/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FViewTarget.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Frequest%2Ftarget%2FViewTarget.java?ref=cf8317833765b3245e7d214e5f8ce9ea9455fcee",
      "patch": "@@ -23,9 +23,9 @@\n  * {@link android.view.ViewTreeObserver.OnDrawListener}.\n  *\n  * <p>\n- *     To detect {@link View} reuse in {@link android.widget.ListView} or any {@link ViewGroup} that reuses views, this\n- *     class uses the {@link View#setTag(Object)} method to store some metadata so that if a view is reused, any\n- *     previous loads or resources from previous loads can be cancelled or reused.\n+ *     To detect {@link View} reuse in {@link android.widget.ListView} or any {@link android.view.ViewGroup} that reuses\n+ *     views, this class uses the {@link View#setTag(Object)} method to store some metadata so that if a view is reused,\n+ *     any previous loads or resources from previous loads can be cancelled or reused.\n  * </p>\n  *\n  * <p>",
      "parent_sha": "a84f6d1cc2885168c25f7bdfe912728f3be420d1"
    }
  },
  {
    "oid": "be4db99940e909202dd91994bf35bff22a6d10b2",
    "message": "Suppress lint error for VisibleForTesting override in GlideGenerator.\n\nFixes #1977.",
    "date": "2017-06-15T14:43:39Z",
    "url": "https://github.com/bumptech/glide/commit/be4db99940e909202dd91994bf35bff22a6d10b2",
    "details": {
      "sha": "99805e9b0a2d5a962b7b6f3cf941d1a92f63f6c6",
      "filename": "annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java",
      "status": "modified",
      "additions": 22,
      "deletions": 1,
      "changes": 23,
      "blob_url": "https://github.com/bumptech/glide/blob/be4db99940e909202dd91994bf35bff22a6d10b2/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FGlideGenerator.java",
      "raw_url": "https://github.com/bumptech/glide/raw/be4db99940e909202dd91994bf35bff22a6d10b2/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FGlideGenerator.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FGlideGenerator.java?ref=be4db99940e909202dd91994bf35bff22a6d10b2",
      "patch": "@@ -76,6 +76,14 @@ final class GlideGenerator {\n   private static final String REQUEST_MANAGER_QUALIFIED_NAME =\n       \"com.bumptech.glide.RequestManager\";\n \n+  private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME =\n+      \"android.support.annotation.VisibleForTesting\";\n+\n+  private static final String SUPPRESS_LINT_PACKAGE_NAME =\n+      \"android.annotation\";\n+  private static final String SUPPRESS_LINT_CLASS_NAME =\n+      \"SuppressLint\";\n+\n   private final ProcessingEnvironment processingEnv;\n   private final ProcessorUtil processorUtil;\n   private final TypeElement glideType;\n@@ -147,9 +155,22 @@ public ParameterSpec apply(VariableElement input) {\n                   }\n             }));\n \n-\n+    TypeElement visibleForTestingType =\n+        processingEnv\n+            .getElementUtils()\n+            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);\n     for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {\n       builder.addAnnotation(AnnotationSpec.get(mirror));\n+\n+      // Suppress a lint warning if we're overriding a VisibleForTesting method.\n+      // See #1977.\n+      if (mirror.getAnnotationType().asElement().equals(visibleForTestingType)) {\n+        builder.addAnnotation(\n+            AnnotationSpec.builder(\n+                ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME))\n+                .addMember(\"value\", \"$S\", \"VisibleForTests\")\n+                .build());\n+      }\n     }\n \n     boolean returnsValue = element != null;",
      "parent_sha": "d8e84367bbbad849fe3b14e1de4d5d961afc3e18"
    }
  },
  {
    "oid": "b6bec7733c633f7923467a30c31689fe8b6b7666",
    "message": "Set format of cacheDecoder in format()\n\nFixes #187",
    "date": "2014-10-13T01:00:30Z",
    "url": "https://github.com/bumptech/glide/commit/b6bec7733c633f7923467a30c31689fe8b6b7666",
    "details": {
      "sha": "d54e79800349b780e047e81761954dd53612f374",
      "filename": "library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bumptech/glide/blob/b6bec7733c633f7923467a30c31689fe8b6b7666/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FBitmapRequestBuilder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/b6bec7733c633f7923467a30c31689fe8b6b7666/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FBitmapRequestBuilder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FBitmapRequestBuilder.java?ref=b6bec7733c633f7923467a30c31689fe8b6b7666",
      "patch": "@@ -20,6 +20,7 @@\n import com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder;\n import com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;\n import com.bumptech.glide.load.resource.bitmap.VideoBitmapDecoder;\n+import com.bumptech.glide.load.resource.file.FileToStreamDecoder;\n import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;\n import com.bumptech.glide.provider.LoadProvider;\n import com.bumptech.glide.request.RequestListener;\n@@ -216,8 +217,9 @@ public BitmapRequestBuilder<ModelType, TranscodeType> videoDecoder(\n     /**\n      * Sets the preferred format for {@link Bitmap}s decoded in this request. Defaults to\n      * {@link DecodeFormat#PREFER_RGB_565}. This replaces any previous calls to {@link #imageDecoder(ResourceDecoder)},\n-     * {@link #videoDecoder(ResourceDecoder)} and {@link #decoder(ResourceDecoder)} with default decoders with the\n-     * appropriate options set.\n+     * {@link #videoDecoder(ResourceDecoder)}, {@link #decoder(ResourceDecoder)} and\n+     * {@link #cacheDecoder(com.bumptech.glide.load.ResourceDecoder)}} with default decoders with the appropriate\n+     * options set.\n      *\n      * <p>\n      *     Note - If using a {@link Transformation} that expect bitmaps to support transparency, this should always be\n@@ -234,6 +236,7 @@ public BitmapRequestBuilder<ModelType, TranscodeType> format(DecodeFormat format\n         this.decodeFormat = format;\n         imageDecoder = new StreamBitmapDecoder(downsampler, bitmapPool, format);\n         videoDecoder = new FileDescriptorBitmapDecoder(new VideoBitmapDecoder(), bitmapPool, format);\n+        super.cacheDecoder(new FileToStreamDecoder<Bitmap>(new StreamBitmapDecoder(downsampler, bitmapPool, format)));\n         super.decoder(new ImageVideoBitmapDecoder(imageDecoder, videoDecoder));\n         return this;\n     }",
      "parent_sha": "7080b408f7c19d7c5d1ab3ca74e10585a61a55fe"
    }
  },
  {
    "oid": "d950e5ef1bb5ccf152196a4c70edf982e1d68493",
    "message": "Always generate a RequestOptions subclass.\n\nDoing so fixes a bug where the generated RequestBuilder would otherwise\nnot include methods from RequestOptions. It\u2019s also probably more consistent to always have the subclass rather than only have it if an extension is defined somewhere.",
    "date": "2017-05-17T14:32:32Z",
    "url": "https://github.com/bumptech/glide/commit/d950e5ef1bb5ccf152196a4c70edf982e1d68493",
    "details": {
      "sha": "17f64f3277b1793304bbaaa5c47f7628c88d7014",
      "filename": "annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bumptech/glide/blob/d950e5ef1bb5ccf152196a4c70edf982e1d68493/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FAppModuleProcessor.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d950e5ef1bb5ccf152196a4c70edf982e1d68493/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FAppModuleProcessor.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FAppModuleProcessor.java?ref=d950e5ef1bb5ccf152196a4c70edf982e1d68493",
      "patch": "@@ -83,12 +83,9 @@ boolean maybeWriteAppModule() {\n     // in a project.\n     String generatedCodePackageName = appModule.getEnclosingElement().toString();\n \n-    TypeSpec generatedRequestOptions = null;\n-    if (!indexedClassNames.extensions.isEmpty()) {\n-      generatedRequestOptions =\n+    TypeSpec generatedRequestOptions =\n           requestOptionsGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);\n       writeRequestOptions(generatedCodePackageName, generatedRequestOptions);\n-    }\n \n     TypeSpec generatedRequestBuilder =\n         requestBuilderGenerator.generate(generatedCodePackageName, generatedRequestOptions);",
      "parent_sha": "75a28f1b25d04e1659d71e5f73a873e61769b1b7"
    }
  },
  {
    "oid": "ad9c91c33681a232a9fd75b9c55db34eec9e4030",
    "message": "Fix a race in cancellation in DecodeJob.\n\nFixes #424.",
    "date": "2015-04-20T14:04:01Z",
    "url": "https://github.com/bumptech/glide/commit/ad9c91c33681a232a9fd75b9c55db34eec9e4030",
    "details": {
      "sha": "4212793243d6a02291f5c67d73d22b1a2a29575a",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/ad9c91c33681a232a9fd75b9c55db34eec9e4030/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java",
      "raw_url": "https://github.com/bumptech/glide/raw/ad9c91c33681a232a9fd75b9c55db34eec9e4030/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java?ref=ad9c91c33681a232a9fd75b9c55db34eec9e4030",
      "patch": "@@ -130,8 +130,8 @@ public Resource<Z> decodeFromSource() throws Exception {\n     }\n \n     public void cancel() {\n-        fetcher.cancel();\n         isCancelled = true;\n+        fetcher.cancel();\n     }\n \n     private Resource<Z> transformEncodeAndTranscode(Resource<T> decoded) {",
      "parent_sha": "6c85b134d797126469dc3ab1a719e9edcf155573"
    }
  },
  {
    "oid": "d7635bda9105dbeb27ed8a3fbda69832396960f5",
    "message": "Minor optimization to avoid calling currentTimeMillis when not logging.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=187644617",
    "date": "2018-03-06T21:46:36Z",
    "url": "https://github.com/bumptech/glide/commit/d7635bda9105dbeb27ed8a3fbda69832396960f5",
    "details": {
      "sha": "dbeb547cf356c5d9c13865a6dd94fde12dc49bb5",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/Engine.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/d7635bda9105dbeb27ed8a3fbda69832396960f5/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngine.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d7635bda9105dbeb27ed8a3fbda69832396960f5/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngine.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FEngine.java?ref=d7635bda9105dbeb27ed8a3fbda69832396960f5",
      "patch": "@@ -166,7 +166,7 @@ public <R> LoadStatus load(\n       boolean onlyRetrieveFromCache,\n       ResourceCallback cb) {\n     Util.assertMainThread();\n-    long startTime = LogTime.getLogTime();\n+    long startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : 0;\n \n     EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,\n         resourceClass, transcodeClass, options);",
      "parent_sha": "1937b055db40557206cb7ea8499c37e43d9ec22f"
    }
  },
  {
    "oid": "5652d207f3c538353301a0bc22065b8de3f992f5",
    "message": "Use a dequeue instead of linked list in sbc",
    "date": "2013-06-04T18:28:19Z",
    "url": "https://github.com/bumptech/glide/commit/5652d207f3c538353301a0bc22065b8de3f992f5",
    "details": {
      "sha": "321e39530a304d32f674fc60aeaa1475bd61e7b1",
      "filename": "library/src/com/bumptech/photos/resize/cache/SizedBitmapCache.java",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/bumptech/glide/blob/5652d207f3c538353301a0bc22065b8de3f992f5/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2Fcache%2FSizedBitmapCache.java",
      "raw_url": "https://github.com/bumptech/glide/raw/5652d207f3c538353301a0bc22065b8de3f992f5/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2Fcache%2FSizedBitmapCache.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2Fcache%2FSizedBitmapCache.java?ref=5652d207f3c538353301a0bc22065b8de3f992f5",
      "patch": "@@ -7,8 +7,8 @@\n import android.graphics.Bitmap;\n import com.bumptech.photos.util.Log;\n \n+import java.util.ArrayDeque;\n import java.util.HashMap;\n-import java.util.LinkedList;\n import java.util.Map;\n import java.util.Queue;\n \n@@ -26,30 +26,27 @@ public SizedBitmapCache(int maxPerSize) {\n \n     public synchronized void put(Bitmap bitmap) {\n         final String sizeKey = getSizeKey(bitmap.getWidth(), bitmap.getHeight());\n-        Queue<Bitmap> available;\n-        available = availableBitmaps.get(sizeKey);\n+        Queue<Bitmap> available = availableBitmaps.get(sizeKey);\n         if (available == null) {\n-            available = new LinkedList<Bitmap>();\n+            available = new ArrayDeque<Bitmap>();\n             availableBitmaps.put(sizeKey, available);\n         }\n \n         if (available.size() < maxPerSize) {\n-            available.add(bitmap);\n+            available.offer(bitmap);\n         }\n     }\n \n     public synchronized Bitmap get(int width, int height) {\n         final String sizeKey = getSizeKey(width, height);\n-        final Queue<Bitmap> available;\n+        final Queue<Bitmap> available = availableBitmaps.get(sizeKey);\n \n-         available = availableBitmaps.get(sizeKey);\n-\n-        if (available == null || available.size() == 0) {\n+        if (available == null) {\n             Log.d(\"SBC: missing bitmap for key= \" + sizeKey);\n             return null;\n         } else {\n             //Log.d(\"SBC:  get key=\" + sizeKey + \" available=\" + (available.size() - 1));\n-            return available.remove();\n+            return available.poll();\n         }\n     }\n ",
      "parent_sha": "e89a880b0fbffa78ef37299e3fc3068c4c7f554a"
    }
  },
  {
    "oid": "333b4d0be7fd98bd14d215a17b0143e9dd1e2be8",
    "message": "Fix rename in Flickr sample",
    "date": "2014-03-26T01:31:05Z",
    "url": "https://github.com/bumptech/glide/commit/333b4d0be7fd98bd14d215a17b0143e9dd1e2be8",
    "details": {
      "sha": "77d788690b702571d028b6e29d451eae1feae81a",
      "filename": "samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bumptech/glide/blob/333b4d0be7fd98bd14d215a17b0143e9dd1e2be8/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fflickr%2FFlickrPhotoGrid.java",
      "raw_url": "https://github.com/bumptech/glide/raw/333b4d0be7fd98bd14d215a17b0143e9dd1e2be8/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fflickr%2FFlickrPhotoGrid.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/samples%2Fflickr%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fsamples%2Fflickr%2FFlickrPhotoGrid.java?ref=333b4d0be7fd98bd14d215a17b0143e9dd1e2be8",
      "patch": "@@ -13,7 +13,7 @@\n import com.actionbarsherlock.app.SherlockFragment;\n import com.bumptech.glide.Glide;\n import com.bumptech.glide.ListPreloader;\n-import com.bumptech.glide.loader.bitmap.BaseBitmapLoadFactory;\n+import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;\n import com.bumptech.glide.loader.bitmap.model.Cache;\n import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;\n import com.bumptech.glide.loader.image.ImageManagerLoader;\n@@ -142,7 +142,7 @@ public View getView(int position, View view, ViewGroup container) {\n                 // reason why ImagePresenter is used here and not in FlickrPhotoList.\n                 final Animation fadeIn = AnimationUtils.loadAnimation(context, R.anim.fade_in);\n                 imagePresenter = new ImagePresenter.Builder<Photo, ImageViewTarget>()\n-                        .setBitmapLoadFactory(new BaseBitmapLoadFactory<Photo, InputStream, Void>(\n+                        .setBitmapLoadFactory(new ImageVideoBitmapLoadFactory<Photo, InputStream, Void>(\n                                 new FlickrModelLoader(context, urlCache), Downsampler.AT_LEAST,\n                                 new CenterCrop<Photo>()))\n                         .setTarget(new ImageViewTarget(imageView), context)",
      "parent_sha": "8fb1d987b035907890c5081fc0b229680087fbe0"
    }
  },
  {
    "oid": "ae2325db98f6703cae43c256c047c7a01bc787dc",
    "message": "Add a default exception handler to log exceptions\n\npreviously they were caught silently",
    "date": "2013-07-17T19:52:53Z",
    "url": "https://github.com/bumptech/glide/commit/ae2325db98f6703cae43c256c047c7a01bc787dc",
    "details": {
      "sha": "00d11e88c68824e794c42861e29d0abafff27675",
      "filename": "library/src/com/bumptech/glide/presenter/ImagePresenter.java",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/bumptech/glide/blob/ae2325db98f6703cae43c256c047c7a01bc787dc/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fpresenter%2FImagePresenter.java",
      "raw_url": "https://github.com/bumptech/glide/raw/ae2325db98f6703cae43c256c047c7a01bc787dc/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fpresenter%2FImagePresenter.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fpresenter%2FImagePresenter.java?ref=ae2325db98f6703cae43c256c047c7a01bc787dc",
      "patch": "@@ -15,6 +15,7 @@\n import com.bumptech.glide.loader.image.ImageLoader;\n import com.bumptech.glide.loader.model.ModelStreamLoader;\n import com.bumptech.glide.loader.opener.StreamOpener;\n+import com.bumptech.glide.util.Log;\n \n import java.lang.ref.WeakReference;\n \n@@ -46,7 +47,26 @@ public static class Builder<T> {\n         private ImageSetCallback imageSetCallback;\n         private ImagePresenterCoordinator coordinator;\n         private ImageLoader imageLoader;\n-        private ExceptionHandler<T> exceptionHandler;\n+        private ExceptionHandler<T> exceptionHandler = new ExceptionHandler<T>() {\n+            @Override\n+            public void onImageLoadException(Exception e, T model, boolean isCurrent) {\n+                if (e != null) {\n+                    e.printStackTrace();\n+                } else {\n+                    Log.e(\"IP: onImageLoadException model= \" + model);\n+                }\n+            }\n+\n+            @Override\n+            public void onModelStreamLoadException(Exception e, T model, boolean isCurrent) {\n+                if (e != null) {\n+                    e.printStackTrace();\n+                } else {\n+                    Log.e(\"IP: onModelStreamLoadException model= \" + model);\n+                }\n+            }\n+        };\n+\n         private ModelStreamLoader<T> modelStreamLoader;\n \n         /**",
      "parent_sha": "9c3d34adfd233c305e878b53238e9cbbcbf11271"
    }
  },
  {
    "oid": "a4be62dd5a00f3338d845d43b27c01c8fedef05c",
    "message": "Make InvalidMark an IO rather than a Runtime exception\n\nIf we're asked to read partial data (ie a screenshot in Android), we may\nread a valid image header but an invalid image body. We should treat\noverring our mark as a soft failure, rather than an assertion failure so\nthat when we fix our mark limit to read the image body, we don't throw\nif body is invalid.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=88966755",
    "date": "2015-03-27T15:05:58Z",
    "url": "https://github.com/bumptech/glide/commit/a4be62dd5a00f3338d845d43b27c01c8fedef05c",
    "details": {
      "sha": "ace8b2211f20d3d8822877210c7235849fa5ac16",
      "filename": "library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bumptech/glide/blob/a4be62dd5a00f3338d845d43b27c01c8fedef05c/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FRecyclableBufferedInputStream.java",
      "raw_url": "https://github.com/bumptech/glide/raw/a4be62dd5a00f3338d845d43b27c01c8fedef05c/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FRecyclableBufferedInputStream.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FRecyclableBufferedInputStream.java?ref=a4be62dd5a00f3338d845d43b27c01c8fedef05c",
      "patch": "@@ -335,7 +335,7 @@ public synchronized void reset() throws IOException {\n       throw new IOException(\"Stream is closed\");\n     }\n     if (-1 == markpos) {\n-      throw new InvalidMarkException(\"Mark has been invalidated\");\n+      throw new InvalidMarkException(\"Mark has been invalidated, pos: \" + pos + \" markLimit: \" + marklimit);\n     }\n     pos = markpos;\n   }\n@@ -391,7 +391,7 @@ public synchronized long skip(long byteCount) throws IOException {\n    * An exception thrown when a mark can no longer be obeyed because the underlying buffer size is\n    * smaller than the amount of data read after the mark position.\n    */\n-  public static class InvalidMarkException extends RuntimeException {\n+  public static class InvalidMarkException extends IOException {\n     private static final long serialVersionUID = -4338378848813561757L;\n \n     public InvalidMarkException(String detailMessage) {",
      "parent_sha": "dd0fc2085b0b38769df7fcae10753ba448fbf892"
    }
  },
  {
    "oid": "cdfa93e34e0efcad338702e48ec50e86d5d64c4e",
    "message": "Fix a flaky test.",
    "date": "2016-02-09T02:10:27Z",
    "url": "https://github.com/bumptech/glide/commit/cdfa93e34e0efcad338702e48ec50e86d5d64c4e",
    "details": {
      "sha": "7a6a52921249b9a5d3adc9fec41fa963661b936f",
      "filename": "library/src/test/java/com/bumptech/glide/GlideTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bumptech/glide/blob/cdfa93e34e0efcad338702e48ec50e86d5d64c4e/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlideTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/cdfa93e34e0efcad338702e48ec50e86d5d64c4e/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlideTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlideTest.java?ref=cdfa93e34e0efcad338702e48ec50e86d5d64c4e",
      "patch": "@@ -535,7 +535,7 @@ public void testClone() throws IOException {\n     doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));\n     Target secondTarget = mock(Target.class);\n     doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));\n-    RequestBuilder<Drawable> firstRequest = Glide.with(getContext())\n+    RequestBuilder<Drawable> firstRequest = requestManager\n         .load(mockUri(\"content://first\"));\n \n     firstRequest.into(firstTarget);\n@@ -544,7 +544,7 @@ public void testClone() throws IOException {\n         .apply(placeholderOf(new ColorDrawable(Color.RED)))\n         .into(secondTarget);\n \n-    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));\n+    verify(firstTarget).onResourceReady(isA(Drawable.class), isA(Transition.class));\n     verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));\n   }\n ",
      "parent_sha": "332c1fd02a1bcad7bdbc4f0b2783321d5b6433ff"
    }
  },
  {
    "oid": "9e9ce00e08cdfa6fcfc2c9008bb5659c2e1bb1c2",
    "message": "Move short circuit comment in Downsampler closer to the check it references.",
    "date": "2017-08-29T15:55:18Z",
    "url": "https://github.com/bumptech/glide/commit/9e9ce00e08cdfa6fcfc2c9008bb5659c2e1bb1c2",
    "details": {
      "sha": "243b767522d5f2d134347de9783f2362c6186d54",
      "filename": "library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bumptech/glide/blob/9e9ce00e08cdfa6fcfc2c9008bb5659c2e1bb1c2/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDownsampler.java",
      "raw_url": "https://github.com/bumptech/glide/raw/9e9ce00e08cdfa6fcfc2c9008bb5659c2e1bb1c2/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDownsampler.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FDownsampler.java?ref=9e9ce00e08cdfa6fcfc2c9008bb5659c2e1bb1c2",
      "patch": "@@ -559,14 +559,15 @@ private static IOException newIoExceptionForInBitmapAssertion(IllegalArgumentExc\n           + \", inBitmap: \" + getInBitmapString(options), e);\n   }\n \n-  // Avoid short circuiting SDK checks.\n   @SuppressWarnings(\"PMD.CollapsibleIfStatements\")\n   @TargetApi(Build.VERSION_CODES.O)\n   private static void setInBitmap(BitmapFactory.Options options, BitmapPool bitmapPool, int width,\n       int height) {\n-    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O\n-        && options.inPreferredConfig == Config.HARDWARE) {\n-      return;\n+    // Avoid short circuiting, it appears to break on some devices.\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+      if (options.inPreferredConfig == Config.HARDWARE) {\n+        return;\n+      }\n     }\n     // BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.\n     options.inBitmap = bitmapPool.getDirty(width, height, options.inPreferredConfig);",
      "parent_sha": "b39a9dbfd6d45782380d8d8c8e4db0863db5f32b"
    }
  },
  {
    "oid": "890454a3b8ad84e5077911931bf10483b0ee85fc",
    "message": "Remove inaccurate Precondition in DecodeJob.\n\nFixes #2462.",
    "date": "2017-10-13T01:13:33Z",
    "url": "https://github.com/bumptech/glide/commit/890454a3b8ad84e5077911931bf10483b0ee85fc",
    "details": {
      "sha": "04510015682ce93e21603885463db907d4e18b3a",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bumptech/glide/blob/890454a3b8ad84e5077911931bf10483b0ee85fc/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java",
      "raw_url": "https://github.com/bumptech/glide/raw/890454a3b8ad84e5077911931bf10483b0ee85fc/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2FDecodeJob.java?ref=890454a3b8ad84e5077911931bf10483b0ee85fc",
      "patch": "@@ -18,7 +18,6 @@\n import com.bumptech.glide.load.engine.cache.DiskCache;\n import com.bumptech.glide.load.resource.bitmap.Downsampler;\n import com.bumptech.glide.util.LogTime;\n-import com.bumptech.glide.util.Preconditions;\n import com.bumptech.glide.util.Synthetic;\n import com.bumptech.glide.util.pool.FactoryPools.Poolable;\n import com.bumptech.glide.util.pool.StateVerifier;\n@@ -242,9 +241,8 @@ public void run() {\n         throw e;\n       }\n     } finally {\n-      Preconditions.checkArgument(\n-          localFetcher == null || currentFetcher == null || localFetcher.equals(currentFetcher),\n-          \"Fetchers don't match!, old: \" + localFetcher + \" new: \" + currentFetcher);\n+      // Keeping track of the fetcher here and calling cleanup is excessively paranoid, we call\n+      // close in all cases anyway.\n       if (localFetcher != null) {\n         localFetcher.cleanup();\n       }",
      "parent_sha": "0b5d1bc127d5188fa2744848c4c4815166501dcc"
    }
  },
  {
    "oid": "2fe677685f41cb14e0f7639629ce214565484bce",
    "message": "Fix a slew of bugs around XMP in the editor.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=223037933",
    "date": "2018-12-19T23:48:37Z",
    "url": "https://github.com/bumptech/glide/commit/2fe677685f41cb14e0f7639629ce214565484bce",
    "details": {
      "sha": "8691928f6e43a0f86a3c37e11961f836020769b4",
      "filename": "library/src/main/java/com/bumptech/glide/Glide.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bumptech/glide/blob/2fe677685f41cb14e0f7639629ce214565484bce/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlide.java",
      "raw_url": "https://github.com/bumptech/glide/raw/2fe677685f41cb14e0f7639629ce214565484bce/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlide.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FGlide.java?ref=2fe677685f41cb14e0f7639629ce214565484bce",
      "patch": "@@ -337,14 +337,12 @@ private static void throwIncorrectGlideModule(Exception e) {\n     final Resources resources = context.getResources();\n \n     registry = new Registry();\n+    registry.register(new DefaultImageHeaderParser());\n     // Right now we're only using this parser for HEIF images, which are only supported on OMR1+.\n     // If we need this for other file types, we should consider removing this restriction.\n-    // Note that order here matters. We want to check the ExifInterface parser first for orientation\n-    // and then fall back to DefaultImageHeaderParser for other fields.\n     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {\n       registry.register(new ExifInterfaceImageHeaderParser());\n     }\n-    registry.register(new DefaultImageHeaderParser());\n \n     List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();\n     Downsampler downsampler =",
      "parent_sha": "503abebdd9e9d5938cb463e3388ed47c6bf28f44"
    }
  },
  {
    "oid": "d94e99453734c72a74e393e765f7c56ccdf6d39a",
    "message": "Broaden exclusion criteria for \u201cas\u201d method in RequestManagerGenerator.\n\nWe\u2019re being overly specific. At least for now, there\u2019s only one \u201cas\u201d\nmethod so we can exclude it based on the name alone.\n\nAddresses #1971.",
    "date": "2017-05-26T15:17:45Z",
    "url": "https://github.com/bumptech/glide/commit/d94e99453734c72a74e393e765f7c56ccdf6d39a",
    "details": {
      "sha": "920d439f60d4b43c995f1b8b508a21c0a3e79692",
      "filename": "annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bumptech/glide/blob/d94e99453734c72a74e393e765f7c56ccdf6d39a/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FRequestManagerGenerator.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d94e99453734c72a74e393e765f7c56ccdf6d39a/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FRequestManagerGenerator.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/annotation%2Fcompiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fannotation%2Fcompiler%2FRequestManagerGenerator.java?ref=d94e99453734c72a74e393e765f7c56ccdf6d39a",
      "patch": "@@ -170,10 +170,7 @@ private List<MethodSpec> generateRequestManagerMethodOverrides() {\n           @Override\n           public boolean apply(ExecutableElement input) {\n             // Skip the <T> as(Class<T>) method.\n-            return !input.getSimpleName().toString().equals(\"as\")\n-                || input.getParameters().size() != 1\n-                || !processingEnv.getTypeUtils().isAssignable(\n-                    input.getParameters().get(0).asType(), rawClassType);\n+            return !input.getSimpleName().toString().equals(\"as\");\n           }\n         })\n         .transform(new Function<ExecutableElement, MethodSpec>() {",
      "parent_sha": "8419b90fd35dc6e842c3cfe290a9b19f758e2904"
    }
  },
  {
    "oid": "ac17cee9e447433b9087d1a75f12355cbcf965d1",
    "message": "Fix exception where currentImage is manipulated.",
    "date": "2014-06-17T22:56:50Z",
    "url": "https://github.com/bumptech/glide/commit/ac17cee9e447433b9087d1a75f12355cbcf965d1",
    "details": {
      "sha": "2381a7a69be2977a353971529c2d42bfa8ed47f5",
      "filename": "third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bumptech/glide/blob/ac17cee9e447433b9087d1a75f12355cbcf965d1/third_party%2Fgif_decoder%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fgifdecoder%2FGifDecoder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/ac17cee9e447433b9087d1a75f12355cbcf965d1/third_party%2Fgif_decoder%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fgifdecoder%2FGifDecoder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/third_party%2Fgif_decoder%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fgifdecoder%2FGifDecoder.java?ref=ac17cee9e447433b9087d1a75f12355cbcf965d1",
      "patch": "@@ -104,7 +104,6 @@ public class GifDecoder {\n     private int[] mainScratch;\n \n     private int framePointer = -1;\n-    private Bitmap currentImage;\n     private byte[] data;\n     private GifHeader header;\n     private String id;\n@@ -241,7 +240,6 @@ public Bitmap getNextFrame() {\n         }\n \n         Bitmap result = setPixels(framePointer); // transfer pixel data to image\n-        currentImage = result;\n \n         // Reset the transparent pixel in the color table\n         if (frame.transparency) {\n@@ -341,10 +339,11 @@ private Bitmap setPixels(int frameIndex) {\n \n         // fill in starting image contents based on last image's dispose code\n         if (previousFrame != null && previousFrame.dispose > DISPOSAL_UNSPECIFIED) {\n-            if (previousFrame.dispose == DISPOSAL_NONE && currentImage != null) {\n-                // Start with the current image\n-                currentImage.getPixels(dest, 0, header.width, 0, 0, header.width, header.height);\n-            }\n+//            if (previousFrame.dispose == DISPOSAL_NONE) {\n+//                We don't need to do anything for this case, mainScratch should already have the pixels of the\n+//                previous image.\n+//                currentImage.getPixels(dest, 0, header.width, 0, 0, header.width, header.height);\n+//            }\n             if (previousFrame.dispose == DISPOSAL_BACKGROUND) {\n                 // Start with a canvas filled with the background color\n                 int c = 0;\n@@ -369,7 +368,7 @@ private Bitmap setPixels(int frameIndex) {\n             }\n         }\n \n-        //Decode pixels for this frame  into the global pixels[] scratch\n+        // Decode pixels for this frame  into the global pixels[] scratch\n         decodeBitmapData(currentFrame, mainPixels); // decode pixel data\n \n         // copy each source line to the appropriate place in the destination",
      "parent_sha": "0d8a954b91ef8a37c944c2fdee75966c6f94d7bb"
    }
  },
  {
    "oid": "e407b540e31154bf8d232659708744e733ced180",
    "message": "Make SafeKeyGenerator thread safe.",
    "date": "2014-03-16T07:31:59Z",
    "url": "https://github.com/bumptech/glide/commit/e407b540e31154bf8d232659708744e733ced180",
    "details": {
      "sha": "fbcc2ec04a796166d97782e13405a58ad5c2b008",
      "filename": "library/src/com/bumptech/glide/resize/SafeKeyGenerator.java",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/bumptech/glide/blob/e407b540e31154bf8d232659708744e733ced180/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FSafeKeyGenerator.java",
      "raw_url": "https://github.com/bumptech/glide/raw/e407b540e31154bf8d232659708744e733ced180/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FSafeKeyGenerator.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FSafeKeyGenerator.java?ref=e407b540e31154bf8d232659708744e733ced180",
      "patch": "@@ -20,15 +20,6 @@ public class SafeKeyGenerator {\n     private final Map<LoadId, String> loadIdToSafeHash = new HashMap<LoadId, String>();\n     private final ByteBuffer byteBuffer = ByteBuffer.allocate(8);\n     private final LoadIdPool loadIdPool = new LoadIdPool();\n-    private MessageDigest messageDigest;\n-\n-    public SafeKeyGenerator() {\n-        try {\n-            messageDigest = MessageDigest.getInstance(\"SHA-256\");\n-        } catch (NoSuchAlgorithmException e) {\n-            e.printStackTrace();\n-        }\n-    }\n \n     public String getSafeKey(String id, Transformation transformation, Downsampler downsampler, int width, int height) {\n         LoadId loadId = loadIdPool.get(id, transformation.getId(), downsampler.getId(), width, height);\n@@ -38,6 +29,8 @@ public String getSafeKey(String id, Transformation transformation, Downsampler d\n                 safeKey = loadId.generateSafeKey();\n             } catch (UnsupportedEncodingException e) {\n                 e.printStackTrace();\n+            } catch (NoSuchAlgorithmException e) {\n+                e.printStackTrace();\n             }\n             loadIdToSafeHash.put(loadId, safeKey);\n         } else {\n@@ -90,7 +83,8 @@ public void init(String id, String transformationId, String downsamplerId, int w\n             this.height = height;\n         }\n \n-        public String generateSafeKey() throws UnsupportedEncodingException {\n+        public String generateSafeKey() throws UnsupportedEncodingException, NoSuchAlgorithmException {\n+            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\n             messageDigest.update(id.getBytes(\"UTF-8\"));\n             messageDigest.update(transformationId.getBytes(\"UTF-8\"));\n             messageDigest.update(downsamplerId.getBytes(\"UTF-8\"));",
      "parent_sha": "9176f4ab55a000d763c1560b2edfc6cf8b53a30a"
    }
  },
  {
    "oid": "91017ff95f7a4be4d457c86f0df3b44bcc26989a",
    "message": "Avoid clearing paused requests using hard refs.\n\nFixes #346.",
    "date": "2015-02-18T04:09:39Z",
    "url": "https://github.com/bumptech/glide/commit/91017ff95f7a4be4d457c86f0df3b44bcc26989a",
    "details": {
      "sha": "621579025ef3d26e93a7ad4dd64022a2fc669dd2",
      "filename": "library/src/main/java/com/bumptech/glide/manager/RequestTracker.java",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bumptech/glide/blob/91017ff95f7a4be4d457c86f0df3b44bcc26989a/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestTracker.java",
      "raw_url": "https://github.com/bumptech/glide/raw/91017ff95f7a4be4d457c86f0df3b44bcc26989a/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestTracker.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestTracker.java?ref=91017ff95f7a4be4d457c86f0df3b44bcc26989a",
      "patch": "@@ -19,6 +19,12 @@ public class RequestTracker {\n     // can always make repeated requests into targets other than views, or use an activity manager in a fragment pager\n     // where holding strong references would steadily leak bitmaps and/or views.\n     private final Set<Request> requests = Collections.newSetFromMap(new WeakHashMap<Request, Boolean>());\n+    // A set of requests that have not completed and are queued to be run again. We use this list to maintain hard\n+    // references to these requests to ensure that they are not garbage collected before they start running or\n+    // while they are paused. See #346.\n+    @SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n+    private final List<Request> pendingRequests = new ArrayList<Request>();\n+\n     private boolean isPaused;\n \n     /**\n@@ -28,10 +34,12 @@ public void runRequest(Request request) {\n         requests.add(request);\n         if (!isPaused) {\n             request.begin();\n+        } else {\n+            pendingRequests.add(request);\n         }\n     }\n \n-    // Exposed for testing.\n+    // Visible for testing.\n     void addRequest(Request request) {\n         requests.add(request);\n     }\n@@ -41,6 +49,7 @@ void addRequest(Request request) {\n      */\n     public void removeRequest(Request request) {\n         requests.remove(request);\n+        pendingRequests.remove(request);\n     }\n \n     /**\n@@ -58,6 +67,7 @@ public void pauseRequests() {\n         for (Request request : getSnapshot()) {\n             if (request.isRunning()) {\n                 request.pause();\n+                pendingRequests.add(request);\n             }\n         }\n     }\n@@ -72,6 +82,7 @@ public void resumeRequests() {\n                 request.begin();\n             }\n         }\n+        pendingRequests.clear();\n     }\n \n     /**\n@@ -81,6 +92,7 @@ public void clearRequests() {\n         for (Request request : getSnapshot()) {\n             request.clear();\n         }\n+        pendingRequests.clear();\n     }\n \n     /**\n@@ -93,6 +105,8 @@ public void restartRequests() {\n                 request.pause();\n                 if (!isPaused) {\n                     request.begin();\n+                } else {\n+                    pendingRequests.add(request);\n                 }\n             }\n         }",
      "parent_sha": "e85cf305eb8e030cbfc3a7c73f438085ee0fb025"
    }
  },
  {
    "oid": "85bf0c32f797c04c7d2be87589e075040c3bfb7e",
    "message": "Copybara import of the project:\n\n--\n219330630652a6d9bd088c0a7e971cf796872de1 by mumu <li734930787@gmail.com>:\n\nFix a wrong process\n\nIt has been determined that activity belongs to FragmentActivity , so should use the get() method of FragmentActivity\n\nPiperOrigin-RevId: 260787575",
    "date": "2019-07-30T20:51:18Z",
    "url": "https://github.com/bumptech/glide/commit/85bf0c32f797c04c7d2be87589e075040c3bfb7e",
    "details": {
      "sha": "bdf863fcadbfc497a95e46bf34be837b8db6ea1e",
      "filename": "library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/85bf0c32f797c04c7d2be87589e075040c3bfb7e/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestManagerRetriever.java",
      "raw_url": "https://github.com/bumptech/glide/raw/85bf0c32f797c04c7d2be87589e075040c3bfb7e/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestManagerRetriever.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fmanager%2FRequestManagerRetriever.java?ref=85bf0c32f797c04c7d2be87589e075040c3bfb7e",
      "patch": "@@ -178,7 +178,7 @@ public RequestManager get(@NonNull View view) {\n     // prefer to just fall back to the Activity directly.\n     if (activity instanceof FragmentActivity) {\n       Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);\n-      return fragment != null ? get(fragment) : get((FragmentActivity) activity);\n+      return fragment != null ? get(fragment) : get(activity);\n     }\n \n     // Standard Fragments.",
      "parent_sha": "15a21b125d0d131df7bc405a947e69b4d40709ae"
    }
  },
  {
    "oid": "b32ea3d85db34e4b65ce4abf613b33c739a3ac27",
    "message": "Migrate org.mockito.Matchers#anyInt to org.mockito.ArgumentMatchers\n\nThe former is deprecated and replaced by the latter in Mockito 2.\n\nPiperOrigin-RevId: 291753023",
    "date": "2020-01-27T18:46:16Z",
    "url": "https://github.com/bumptech/glide/commit/b32ea3d85db34e4b65ce4abf613b33c739a3ac27",
    "details": {
      "sha": "ce303192131cf6c28247a09696b31e11a9d8d2e7",
      "filename": "integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/b32ea3d85db34e4b65ce4abf613b33c739a3ac27/integration%2Fgifencoder%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fgifencoder%2FReEncodingGifResourceEncoderTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/b32ea3d85db34e4b65ce4abf613b33c739a3ac27/integration%2Fgifencoder%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fgifencoder%2FReEncodingGifResourceEncoderTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/integration%2Fgifencoder%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fintegration%2Fgifencoder%2FReEncodingGifResourceEncoderTest.java?ref=b32ea3d85db34e4b65ce4abf613b33c739a3ac27",
      "patch": "@@ -3,8 +3,8 @@\n import static com.google.common.truth.Truth.assertThat;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.anyInt;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;",
      "parent_sha": "fdea91e067180b1457dff943c543e66df0f65981"
    }
  },
  {
    "oid": "2e698748d344b36ca2f866babf7482e38355ccbe",
    "message": "Add debugging bitmap tracker.",
    "date": "2014-08-02T01:53:18Z",
    "url": "https://github.com/bumptech/glide/commit/2e698748d344b36ca2f866babf7482e38355ccbe",
    "details": {
      "sha": "7c450d789c2ca68ab0ce647ba1652759cc22663c",
      "filename": "library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java",
      "status": "modified",
      "additions": 63,
      "deletions": 9,
      "changes": 72,
      "blob_url": "https://github.com/bumptech/glide/blob/2e698748d344b36ca2f866babf7482e38355ccbe/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fbitmap_recycle%2FLruBitmapPool.java",
      "raw_url": "https://github.com/bumptech/glide/raw/2e698748d344b36ca2f866babf7482e38355ccbe/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fbitmap_recycle%2FLruBitmapPool.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fengine%2Fbitmap_recycle%2FLruBitmapPool.java?ref=2e698748d344b36ca2f866babf7482e38355ccbe",
      "patch": "@@ -5,6 +5,10 @@\n import android.os.Build;\n import android.util.Log;\n \n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;\n import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;\n \n@@ -16,11 +20,13 @@\n  */\n public class LruBitmapPool implements BitmapPool {\n     private static final String TAG = \"LruBitmapPool\";\n-    private final LruPoolStrategy strategy;\n \n+    private final LruPoolStrategy strategy;\n     private final int initialMaxSize;\n+    private final BitmapTracker tracker;\n+\n     private int maxSize;\n-    private int currentSize = 0;\n+    private int currentSize;\n     private int hits;\n     private int misses;\n     private int puts;\n@@ -31,6 +37,7 @@ public class LruBitmapPool implements BitmapPool {\n         this.initialMaxSize = maxSize;\n         this.maxSize = maxSize;\n         this.strategy = strategy;\n+        this.tracker = new NullBitmapTracker();\n     }\n \n     /**\n@@ -39,13 +46,7 @@ public class LruBitmapPool implements BitmapPool {\n      * @param maxSize The initial maximum size of the pool in bytes.\n      */\n     public LruBitmapPool(int maxSize) {\n-        initialMaxSize = maxSize;\n-        this.maxSize = maxSize;\n-        if (Build.VERSION.SDK_INT >= 19) {\n-            strategy = new SizeStrategy();\n-        } else {\n-            strategy = new AttributeStrategy();\n-        }\n+        this(maxSize, getDefaultStrategy());\n     }\n \n     @Override\n@@ -62,6 +63,7 @@ public synchronized boolean put(Bitmap bitmap) {\n \n         final int size = strategy.getSize(bitmap);\n         strategy.put(bitmap);\n+        tracker.add(bitmap);\n \n         puts++;\n         currentSize += size;\n@@ -91,6 +93,7 @@ public synchronized Bitmap get(int width, int height, Bitmap.Config config) {\n         } else {\n             hits++;\n             currentSize -= strategy.getSize(result);\n+            tracker.remove(result);\n             if (Build.VERSION.SDK_INT >= 12) {\n                 result.setHasAlpha(true);\n             }\n@@ -120,6 +123,7 @@ public void trimMemory(int level) {\n     private void trimToSize(int size) {\n         while (currentSize > size) {\n             final Bitmap removed = strategy.removeLast();\n+            tracker.remove(removed);\n             currentSize -= strategy.getSize(removed);\n             removed.recycle();\n             evictions++;\n@@ -136,4 +140,54 @@ private void dump() {\n                     + \" currentSize=\" + currentSize + \" maxSize=\" + maxSize + \"\\nStrategy=\" + strategy);\n         }\n     }\n+\n+    private static LruPoolStrategy getDefaultStrategy() {\n+        final LruPoolStrategy strategy;\n+        if (Build.VERSION.SDK_INT >= 19) {\n+            strategy = new SizeStrategy();\n+        } else {\n+            strategy = new AttributeStrategy();\n+        }\n+        return strategy;\n+    }\n+\n+    private interface BitmapTracker {\n+        void add(Bitmap bitmap);\n+        void remove(Bitmap bitmap);\n+    }\n+\n+    private static class ThrowingBitmapTracker implements BitmapTracker {\n+        private final Set<Bitmap> bitmaps = Collections.synchronizedSet(new HashSet<Bitmap>());\n+\n+        @Override\n+        public void add(Bitmap bitmap) {\n+            if (bitmaps.contains(bitmap)) {\n+                throw new IllegalStateException(\"Can't add already added bitmap: \" + bitmap + \" [\" + bitmap.getWidth()\n+                        + \"x\" + bitmap.getHeight() + \"]\");\n+            }\n+            bitmaps.add(bitmap);\n+\n+        }\n+\n+        @Override\n+        public void remove(Bitmap bitmap) {\n+            if (!bitmaps.contains(bitmap)) {\n+                throw new IllegalStateException(\"Cannot remove bitmap not in tracker\");\n+            }\n+            bitmaps.remove(bitmap);\n+        }\n+    }\n+\n+    private static class NullBitmapTracker implements BitmapTracker {\n+\n+        @Override\n+        public void add(Bitmap bitmap) {\n+\n+        }\n+\n+        @Override\n+        public void remove(Bitmap bitmap) {\n+\n+        }\n+    }\n }",
      "parent_sha": "38736d8e33b10d4b56e5b2603774717492cff95a"
    }
  },
  {
    "oid": "d56e08cc020269360452c7caabc35565723986f8",
    "message": "Allow modifying RequestBuilders after calling into().\n\nFixes an issue where setting options on the generated GlideRequest after\nhaving used it to load one image would throw an exception because the\ninternal RequestOptions object was locked when the first load was \nstarted. Now we apply autoClone() to make sure that the options object\nfor the first load isn\u2019t modified by subsequent changes to options, but\nalso allowing those changes to occur.",
    "date": "2017-09-14T22:19:12Z",
    "url": "https://github.com/bumptech/glide/commit/d56e08cc020269360452c7caabc35565723986f8",
    "details": {
      "sha": "d03a59c7639ea651e0a868941d84d8e86a7eda6d",
      "filename": "library/src/main/java/com/bumptech/glide/RequestBuilder.java",
      "status": "modified",
      "additions": 28,
      "deletions": 17,
      "changes": 45,
      "blob_url": "https://github.com/bumptech/glide/blob/d56e08cc020269360452c7caabc35565723986f8/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java",
      "raw_url": "https://github.com/bumptech/glide/raw/d56e08cc020269360452c7caabc35565723986f8/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fmain%2Fjava%2Fcom%2Fbumptech%2Fglide%2FRequestBuilder.java?ref=d56e08cc020269360452c7caabc35565723986f8",
      "patch": "@@ -349,14 +349,18 @@ public RequestBuilder<TranscodeType> clone() {\n    * @see RequestManager#clear(Target)\n    */\n   public <Y extends Target<TranscodeType>> Y into(@NonNull Y target) {\n+    return into(target, getMutableOptions());\n+  }\n+\n+  private <Y extends Target<TranscodeType>> Y into(@NonNull Y target, RequestOptions options) {\n     Util.assertMainThread();\n     Preconditions.checkNotNull(target);\n     if (!isModelSet) {\n       throw new IllegalArgumentException(\"You must call #load() before calling #into()\");\n     }\n \n-    requestOptions.lock();\n-    Request request = buildRequest(target);\n+    options = options.autoClone();\n+    Request request = buildRequest(target, options);\n \n     Request previous = target.getRequest();\n     if (request.isEquivalentTo(previous)) {\n@@ -378,6 +382,7 @@ public <Y extends Target<TranscodeType>> Y into(@NonNull Y target) {\n     return target;\n   }\n \n+\n   /**\n    * Sets the {@link ImageView} the resource will be loaded into, cancels any existing loads into\n    * the view, and frees any resources Glide may have previously loaded into the view so they may be\n@@ -393,26 +398,27 @@ public Target<TranscodeType> into(ImageView view) {\n     Util.assertMainThread();\n     Preconditions.checkNotNull(view);\n \n+    RequestOptions requestOptions = this.requestOptions;\n     if (!requestOptions.isTransformationSet()\n         && requestOptions.isTransformationAllowed()\n         && view.getScaleType() != null) {\n-      if (requestOptions.isLocked()) {\n-        requestOptions = requestOptions.clone();\n-      }\n+      // Clone in this method so that if we use this RequestBuilder to load into a View and then\n+      // into a different target, we don't retain the transformation applied based on the previous\n+      // View's scale type.\n       switch (view.getScaleType()) {\n         case CENTER_CROP:\n-          requestOptions.optionalCenterCrop();\n+          requestOptions.clone().optionalCenterCrop();\n           break;\n         case CENTER_INSIDE:\n-          requestOptions.optionalCenterInside();\n+          requestOptions.clone().optionalCenterInside();\n           break;\n         case FIT_CENTER:\n         case FIT_START:\n         case FIT_END:\n-          requestOptions.optionalFitCenter();\n+          requestOptions.clone().optionalFitCenter();\n           break;\n         case FIT_XY:\n-          requestOptions.optionalCenterInside();\n+          requestOptions.clone().optionalCenterInside();\n           break;\n         case CENTER:\n         case MATRIX:\n@@ -421,7 +427,7 @@ public Target<TranscodeType> into(ImageView view) {\n       }\n     }\n \n-    return into(context.buildImageViewTarget(view, transcodeClass));\n+    return into(context.buildImageViewTarget(view, transcodeClass), requestOptions);\n   }\n \n   /**\n@@ -578,15 +584,15 @@ private Priority getThumbnailPriority(Priority current) {\n     }\n   }\n \n-  private Request buildRequest(Target<TranscodeType> target) {\n+  private Request buildRequest(Target<TranscodeType> target, RequestOptions requestOptions) {\n     return buildRequestRecursive(target, null, transitionOptions, requestOptions.getPriority(),\n-        requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight());\n+        requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight(), requestOptions);\n   }\n \n   private Request buildRequestRecursive(Target<TranscodeType> target,\n       @Nullable ThumbnailRequestCoordinator parentCoordinator,\n       TransitionOptions<?, ? super TranscodeType> transitionOptions,\n-      Priority priority, int overrideWidth, int overrideHeight) {\n+      Priority priority, int overrideWidth, int overrideHeight, RequestOptions requestOptions) {\n     if (thumbnailBuilder != null) {\n       // Recursive case: contains a potentially recursive thumbnail request builder.\n       if (isThumbnailBuilt) {\n@@ -619,8 +625,15 @@ private Request buildRequestRecursive(Target<TranscodeType> target,\n           transitionOptions, priority, overrideWidth, overrideHeight);\n       isThumbnailBuilt = true;\n       // Recursively generate thumbnail requests.\n-      Request thumbRequest = thumbnailBuilder.buildRequestRecursive(target, coordinator,\n-          thumbTransitionOptions, thumbPriority, thumbOverrideWidth, thumbOverrideHeight);\n+      Request thumbRequest =\n+          thumbnailBuilder.buildRequestRecursive(\n+              target,\n+              coordinator,\n+              thumbTransitionOptions,\n+              thumbPriority,\n+              thumbOverrideWidth,\n+              thumbOverrideHeight,\n+              requestOptions);\n       isThumbnailBuilt = false;\n       coordinator.setRequests(fullRequest, thumbRequest);\n       return coordinator;\n@@ -648,8 +661,6 @@ private Request obtainRequest(Target<TranscodeType> target,\n       RequestOptions requestOptions, RequestCoordinator requestCoordinator,\n       TransitionOptions<?, ? super TranscodeType> transitionOptions, Priority priority,\n       int overrideWidth, int overrideHeight) {\n-    requestOptions.lock();\n-\n     return SingleRequest.obtain(\n         context,\n         model,",
      "parent_sha": "c3479c43461404de36c0fd07a5f324573443e193"
    }
  },
  {
    "oid": "21bd36fa07ee82704a3d7a8788ba2157df855efe",
    "message": "Actually use options passed to image resizer\n\nAccidently were always using default b/c of a \nnaming collision",
    "date": "2013-01-19T17:38:28Z",
    "url": "https://github.com/bumptech/glide/commit/21bd36fa07ee82704a3d7a8788ba2157df855efe",
    "details": {
      "sha": "6b56d43b42622873a317957d30ac610d866e3590",
      "filename": "library/src/com/bumptech/photos/resize/ImageResizer.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bumptech/glide/blob/21bd36fa07ee82704a3d7a8788ba2157df855efe/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageResizer.java",
      "raw_url": "https://github.com/bumptech/glide/raw/21bd36fa07ee82704a3d7a8788ba2157df855efe/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageResizer.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fphotos%2Fresize%2FImageResizer.java?ref=21bd36fa07ee82704a3d7a8788ba2157df855efe",
      "patch": "@@ -134,7 +134,7 @@ public Bitmap loadApproximate(String path, int width, int height) {\n         // inSampleSize prefers multiples of 2, but we prefer to prioritize memory savings\n         int sampleSize = Math.min(originalHeight / height, originalWidth / width);\n \n-        final BitmapFactory.Options decodeBitmapOptions = getDefaultOptions();\n+        final BitmapFactory.Options decodeBitmapOptions = getOptions();\n         decodeBitmapOptions.inSampleSize = sampleSize;\n \n         Bitmap result = decodeStream(path, decodeBitmapOptions);\n@@ -213,7 +213,7 @@ public Bitmap loadAsIs(final String path){\n      * @return A new bitmap containing the image at the given path, or recycle if recycle is not null\n      */\n     private Bitmap load(String path, Bitmap recycle) {\n-        final BitmapFactory.Options decodeBitmapOptions = getDefaultOptions(recycle);\n+        final BitmapFactory.Options decodeBitmapOptions = getOptions(recycle);\n         final Bitmap result = decodeStream(path, decodeBitmapOptions);\n         return result == null ? null : orientImage(path, result);\n     }\n@@ -231,7 +231,7 @@ private Bitmap load(String path, Bitmap recycle) {\n      * @return A new bitmap containing the image from the given InputStream, or recycle if recycle is not null\n      */\n     private Bitmap load(InputStream is, Bitmap recycle){\n-        final BitmapFactory.Options decodeBitmapOptions = getDefaultOptions(recycle);\n+        final BitmapFactory.Options decodeBitmapOptions = getOptions(recycle);\n         return decodeStream(is, decodeBitmapOptions);\n     }\n \n@@ -242,7 +242,7 @@ private Bitmap load(InputStream is, Bitmap recycle){\n      * @return an array containing the dimensions of the image in the form {width, height}\n      */\n     private int[] getDimensions(String path) {\n-        final BitmapFactory.Options decodeBoundsOptions = getDefaultOptions();\n+        final BitmapFactory.Options decodeBoundsOptions = getOptions();\n         decodeBoundsOptions.inJustDecodeBounds = true;\n         decodeStream(path, decodeBoundsOptions);\n         return new int[] { decodeBoundsOptions.outWidth, decodeBoundsOptions.outHeight };\n@@ -255,7 +255,7 @@ private int[] getDimensions(String path) {\n      * @return an array containing the dimensions of the image in the form {width, height}\n      */\n     private int[] getDimension(InputStream is) {\n-        final BitmapFactory.Options decodeBoundsOptions = getDefaultOptions();\n+        final BitmapFactory.Options decodeBoundsOptions = getOptions();\n         decodeBoundsOptions.inJustDecodeBounds = true;\n         decodeStream(is, decodeBoundsOptions);\n         return new int[] { decodeBoundsOptions.outWidth, decodeBoundsOptions.outHeight };\n@@ -300,7 +300,11 @@ private Bitmap decodeStream(InputStream is, BitmapFactory.Options decodeBitmapOp\n         return result;\n     }\n \n-    private BitmapFactory.Options getDefaultOptions(Bitmap recycle) {\n+    private BitmapFactory.Options getOptions() {\n+        return getOptions(null);\n+    }\n+\n+    private BitmapFactory.Options getOptions(Bitmap recycle) {\n         BitmapFactory.Options result = new BitmapFactory.Options();\n         copyOptions(defaultOptions, result);\n         if (CAN_RECYCLE)",
      "parent_sha": "9630d3257254d0fbb4750b51aa6bcc78181d521e"
    }
  },
  {
    "oid": "9d3c7b20ae60ddca62a1a98e88995bb5606b521a",
    "message": "Call cb in background in VolleyStreamLoader\n\nThis means our code in the cb will run on a\nbackground thread. Though all we do is post to a\nthread pool, this change means we don't need to\nacquire that lock on the main thread.",
    "date": "2013-07-31T00:30:11Z",
    "url": "https://github.com/bumptech/glide/commit/9d3c7b20ae60ddca62a1a98e88995bb5606b521a",
    "details": {
      "sha": "183d9ddf735a08ca5dcc2bdd2a8517603e94eb6f",
      "filename": "library/src/com/bumptech/glide/loader/stream/VolleyStreamLoader.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bumptech/glide/blob/9d3c7b20ae60ddca62a1a98e88995bb5606b521a/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Floader%2Fstream%2FVolleyStreamLoader.java",
      "raw_url": "https://github.com/bumptech/glide/raw/9d3c7b20ae60ddca62a1a98e88995bb5606b521a/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Floader%2Fstream%2FVolleyStreamLoader.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Floader%2Fstream%2FVolleyStreamLoader.java?ref=9d3c7b20ae60ddca62a1a98e88995bb5606b521a",
      "patch": "@@ -23,30 +23,30 @@ public VolleyStreamLoader(RequestQueue requestQueue, String url) {\n \n     @Override\n     public void loadStream(final StreamReadyCallback cb) {\n-        current = requestQueue.add(new Request<ByteArrayInputStream>(Request.Method.GET, url, new Response.ErrorListener() {\n+        current = requestQueue.add(new Request<Void>(Request.Method.GET, url, new Response.ErrorListener() {\n             @Override\n             public void onErrorResponse(VolleyError error) {\n                 cb.onException(error);\n             }\n         }) {\n             @Override\n-            protected Response<ByteArrayInputStream> parseNetworkResponse(NetworkResponse response) {\n-                //this may be less than ideal, since we can't downsample the image as it is read,\n-                //but we don't have a choice if we want to use Volley\n-                return Response.success(new ByteArrayInputStream(response.data), getCacheEntry());\n+            protected Response<Void> parseNetworkResponse(NetworkResponse response) {\n+                //We actually are going to do the parsing in the callback, so we we're going to call it here where it\n+                // will be executed on a background thread.\n+                cb.onStreamReady(new ByteArrayInputStream(response.data));\n+                return Response.success(null, getCacheEntry());\n             }\n \n             @Override\n-            protected void deliverResponse(ByteArrayInputStream response) {\n-                cb.onStreamReady(response);\n-            }\n+            protected void deliverResponse(Void response) { }\n         });\n     }\n \n     @Override\n     public void cancel() {\n-        if (current != null) {\n-            current.cancel();\n+        final Request local = current;\n+        if (local != null) {\n+            local.cancel();\n             current = null;\n         }\n     }",
      "parent_sha": "823b3dfe54d050bfbd52e1868973ad1ffb394749"
    }
  },
  {
    "oid": "270ac67719631ac2d5399cc57b4911bcf3bf46c6",
    "message": "Use small memory cache and large bitmap pool on new and non low ram devices.",
    "date": "2014-03-19T17:29:56Z",
    "url": "https://github.com/bumptech/glide/commit/270ac67719631ac2d5399cc57b4911bcf3bf46c6",
    "details": {
      "sha": "2e49a58cecf2b5c5e7e5512533f7a4e5e51b64b0",
      "filename": "library/src/com/bumptech/glide/resize/ImageManager.java",
      "status": "modified",
      "additions": 17,
      "deletions": 2,
      "changes": 19,
      "blob_url": "https://github.com/bumptech/glide/blob/270ac67719631ac2d5399cc57b4911bcf3bf46c6/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "raw_url": "https://github.com/bumptech/glide/raw/270ac67719631ac2d5399cc57b4911bcf3bf46c6/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Fcom%2Fbumptech%2Fglide%2Fresize%2FImageManager.java?ref=270ac67719631ac2d5399cc57b4911bcf3bf46c6",
      "patch": "@@ -4,6 +4,7 @@\n \n package com.bumptech.glide.resize;\n \n+import android.annotation.TargetApi;\n import android.app.ActivityManager;\n import android.content.Context;\n import android.graphics.Bitmap;\n@@ -298,9 +299,14 @@ public Thread newThread(Runnable runnable) {\n                     }\n                 });\n             }\n+            final int safeCacheSize = getSafeMemoryCacheSize(context);\n+            final boolean isLowMemoryDevice = isLowMemoryDevice(context);\n \n             if (memoryCache == null) {\n-                memoryCache = new LruMemoryCache(getSafeMemoryCacheSize(context));\n+                // On low ram devices we double the default bitmap pool size by default so we decrease\n+                // the default memory cache size here to compensate.\n+                memoryCache = new LruMemoryCache(\n+                        !isLowMemoryDevice && recycleBitmaps ? safeCacheSize / 2 : safeCacheSize);\n             }\n \n             if (diskCache == null) {\n@@ -324,13 +330,22 @@ public Thread newThread(Runnable runnable) {\n                 bitmapReferenceCounter = new BitmapReferenceCounterAdapter();\n             } else {\n                 if (bitmapPool == null) {\n-                    bitmapPool = new LruBitmapPool(getSafeMemoryCacheSize(context));\n+                    bitmapPool = new LruBitmapPool(\n+                            isLowMemoryDevice ? safeCacheSize : 2 * safeCacheSize);\n                 }\n                 bitmapReferenceCounter = new SerialBitmapReferenceCounter(bitmapPool);\n             }\n         }\n     }\n \n+    @TargetApi(19)\n+    private static boolean isLowMemoryDevice(Context context) {\n+        final ActivityManager activityManager =\n+                (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n+        return Build.VERSION.SDK_INT < 11 ||\n+                (Build.VERSION.SDK_INT >= 19 && activityManager.isLowRamDevice());\n+    }\n+\n     private ImageManager(Builder builder) {\n         HandlerThread bgThread = new HandlerThread(\"image_manager_thread\", THREAD_PRIORITY_BACKGROUND);\n         bgThread.start();",
      "parent_sha": "0c67e6f7594012c85888df85e447aee15fb3797c"
    }
  },
  {
    "oid": "e8a50071a59aac2dd7d6628166471a2c456414a2",
    "message": "Update Robolectric to head of master -- https://github.com/robolectric/robolectric/commit/b88b2f6be9755ba6b951b78beb784f86776cc432\n\n* Matrix and Parcel are more fully implemented.\n* Config properties resource files may be included at any package level to configure Robolectric for related tests.\n\nSeveral tests depend on the old (broken) Matrix behavior; b/33080703 and b/33078636 track fixing those.\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=139978380",
    "date": "2017-01-19T00:04:07Z",
    "url": "https://github.com/bumptech/glide/commit/e8a50071a59aac2dd7d6628166471a2c456414a2",
    "details": {
      "sha": "9d12894be497e5cba05daefe629aaac35a979e58",
      "filename": "library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bumptech/glide/blob/e8a50071a59aac2dd7d6628166471a2c456414a2/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FTransformationUtilsTest.java",
      "raw_url": "https://github.com/bumptech/glide/raw/e8a50071a59aac2dd7d6628166471a2c456414a2/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FTransformationUtilsTest.java",
      "contents_url": "https://api.github.com/repos/bumptech/glide/contents/library%2Fsrc%2Ftest%2Fjava%2Fcom%2Fbumptech%2Fglide%2Fload%2Fresource%2Fbitmap%2FTransformationUtilsTest.java?ref=e8a50071a59aac2dd7d6628166471a2c456414a2",
      "patch": "@@ -353,7 +353,7 @@ public void testRotateImage() {\n     assertTrue(toRotate == zero);\n \n     Bitmap ninety = TransformationUtils.rotateImage(toRotate, 90);\n-    assertTrue(Shadows.shadowOf(ninety).getDescription().contains(\"rotate=90.0\"));\n+    assertThat(Shadows.shadowOf(ninety).getDescription()).contains(\"rotate=90.0\");\n     assertEquals(toRotate.getWidth(), toRotate.getHeight());\n   }\n ",
      "parent_sha": "69fead82c64c47084af8c540dcfdf805021a3fec"
    }
  }
]