[
  {
    "oid": "1aacef02780cb9f8702ccb43f61ab2574fed6740",
    "message": "Cleanup\n\nSigned-off-by: Brice Dutheil <brice.dutheil@gmail.com>",
    "date": "2017-01-14T10:39:29Z",
    "url": "https://github.com/mockito/mockito/commit/1aacef02780cb9f8702ccb43f61ab2574fed6740",
    "details": {
      "sha": "27067da8ba6dab8196881546cc507de18dca09a9",
      "filename": "src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/mockito/mockito/blob/1aacef02780cb9f8702ccb43f61ab2574fed6740/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fannotation%2FSpyAnnotationTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/1aacef02780cb9f8702ccb43f61ab2574fed6740/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fannotation%2FSpyAnnotationTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fannotation%2FSpyAnnotationTest.java?ref=1aacef02780cb9f8702ccb43f61ab2574fed6740",
      "patch": "@@ -36,10 +36,10 @@ public class SpyAnnotationTest extends TestBase {\n     final List<String> spiedList = new ArrayList<String>();\n \n     @Spy\n-    NestedClassWithNoArgConstructor staticTypeWithNoArgConstructor;\n+    InnerStaticClassWithNoArgConstructor staticTypeWithNoArgConstructor;\n \n     @Spy\n-    NestedClassWithoutDefinedConstructor staticTypeWithoutDefinedConstructor;\n+    InnerStaticClassWithoutDefinedConstructor staticTypeWithoutDefinedConstructor;\n \n     @Rule\n     public final ExpectedException shouldThrow = ExpectedException.none();\n@@ -175,7 +175,7 @@ public void should_reset_spy() throws Exception {\n     }\n \n     @Test\n-    public void should_report_when_encosing_instance_is_needed() throws Exception {\n+    public void should_report_when_enclosing_instance_is_needed() throws Exception {\n         class Outer {\n             class Inner {\n             }\n@@ -192,14 +192,14 @@ class WithSpy {\n         }\n     }\n \n-    static class NestedClassWithoutDefinedConstructor {\n+    static class InnerStaticClassWithoutDefinedConstructor {\n     }\n \n-    static class NestedClassWithNoArgConstructor {\n-        NestedClassWithNoArgConstructor() {\n+    static class InnerStaticClassWithNoArgConstructor {\n+        InnerStaticClassWithNoArgConstructor() {\n         }\n \n-        NestedClassWithNoArgConstructor(String f) {\n+        InnerStaticClassWithNoArgConstructor(String f) {\n         }\n     }\n ",
      "parent_sha": "21ec3c56a1197d77dcaf587f4db01d6d4e9e9213"
    }
  },
  {
    "oid": "b3d570bab6240ba4ef33f4f456c62fa24090eaa4",
    "message": "Correct a comment in exception package-info (#975)",
    "date": "2017-03-18T16:35:57Z",
    "url": "https://github.com/mockito/mockito/commit/b3d570bab6240ba4ef33f4f456c62fa24090eaa4",
    "details": {
      "sha": "47048fad9892bf40a5417c97bd5ab173c9072bbe",
      "filename": "src/main/java/org/mockito/exceptions/package-info.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/b3d570bab6240ba4ef33f4f456c62fa24090eaa4/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fexceptions%2Fpackage-info.java",
      "raw_url": "https://github.com/mockito/mockito/raw/b3d570bab6240ba4ef33f4f456c62fa24090eaa4/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fexceptions%2Fpackage-info.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fexceptions%2Fpackage-info.java?ref=b3d570bab6240ba4ef33f4f456c62fa24090eaa4",
      "patch": "@@ -4,6 +4,6 @@\n  */\n \n /**\n- * Mockito configuration utilities\n+ * Mockito exceptions utilities\n  */\n package org.mockito.exceptions;",
      "parent_sha": "e4c68b56c134fb758b1e58be72a68f29e540f531"
    }
  },
  {
    "oid": "27d523bfab083cbc3b219efad3329028607f3a43",
    "message": "Added class loader mechanic.",
    "date": "2015-02-15T23:10:49Z",
    "url": "https://github.com/mockito/mockito/commit/27d523bfab083cbc3b219efad3329028607f3a43",
    "details": {
      "sha": "04715970c193d2e73cae2093e1cee3a616c64663",
      "filename": "src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/mockito/mockito/blob/27d523bfab083cbc3b219efad3329028607f3a43/src%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FByteBuddyMockMaker.java",
      "raw_url": "https://github.com/mockito/mockito/raw/27d523bfab083cbc3b219efad3329028607f3a43/src%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FByteBuddyMockMaker.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FByteBuddyMockMaker.java?ref=27d523bfab083cbc3b219efad3329028607f3a43",
      "patch": "@@ -13,6 +13,7 @@\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.configuration.GlobalConfiguration;\n+import org.mockito.internal.creation.jmock.SearchingClassLoader;\n import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.SerializableMode;\n@@ -158,8 +159,14 @@ private <T> Class<? extends T> makeMock(Class<T> mockType,\n                     .throwing(ObjectStreamException.class)\n                     .intercept(MethodDelegation.to(MethodDelegation.to(MethodInterceptor.ForWriteReplace.class)));\n         }\n+        Class<?>[] allMockedTypes = new Class<?>[interfaces.size() + 1];\n+        allMockedTypes[0] = mockType;\n+        int index = 1;\n+        for (Class<?> type : interfaces) {\n+            allMockedTypes[index++] = type;\n+        }\n         return builder.make()\n-                .load(ClassLoader.getSystemClassLoader(), ClassLoadingStrategy.Default.INJECTION)\n+                .load(SearchingClassLoader.combineLoadersOf(allMockedTypes), ClassLoadingStrategy.Default.INJECTION)\n                 .getLoaded();\n     }\n ",
      "parent_sha": "f17085afa43b934f7b1e3991a97f5ec4ff327505"
    }
  },
  {
    "oid": "cdade2b2763fc994b88203dbaff6076d798d3573",
    "message": "javadoc\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40403",
    "date": "2008-02-26T20:33:03Z",
    "url": "https://github.com/mockito/mockito/commit/cdade2b2763fc994b88203dbaff6076d798d3573",
    "details": {
      "sha": "1c8795267de06fc9dafb53e890a989f2b226ca99",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mockito/mockito/blob/cdade2b2763fc994b88203dbaff6076d798d3573/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/cdade2b2763fc994b88203dbaff6076d798d3573/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=cdade2b2763fc994b88203dbaff6076d798d3573",
      "patch": "@@ -180,7 +180,7 @@\n  *   inOrder.verify(secondMock).add(\"was called second\");\n  * </pre>\n  * \n- * Verification in order is flexible - you don't have to verify all interactions one-by-one\n+ * Verification in order is flexible - <b>you don't have to verify all interactions</b> one-by-one\n  * but only those that you are interested in testing in order. \n  * <p>\n  * Also, you can create InOrder object passing only mocks that relevant for in-order verification.  \n@@ -446,7 +446,7 @@ public static <T> VoidMethodStubbable<T> stubVoid(T mock) {\n      *   inOrder.verify(secondMock).add(\"was called second\");\n      * </pre>\n      * \n-     * Verification in order is flexible - you don't have to verify all interactions one-by-one\n+     * Verification in order is flexible - <b>you don't have to verify all interactions</b> one-by-one\n      * but only those that you are interested in testing in order.\n      * <p>\n      * Also, you can create InOrder object passing only mocks that relevant for in-order verification.  ",
      "parent_sha": "d9a3fc46c24388a8e5a53711ba44e20f7088e5a4"
    }
  },
  {
    "oid": "5bcc3b8e8342379787dd8c43b1d1017684f41101",
    "message": "Clean up of module handling logic.",
    "date": "2019-01-11T22:42:21Z",
    "url": "https://github.com/mockito/mockito/commit/5bcc3b8e8342379787dd8c43b1d1017684f41101",
    "details": {
      "sha": "6a1a2ee2b5eae574a00b0928f4b21abcce6f73ce",
      "filename": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/mockito/mockito/blob/5bcc3b8e8342379787dd8c43b1d1017684f41101/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FSubclassBytecodeGenerator.java",
      "raw_url": "https://github.com/mockito/mockito/raw/5bcc3b8e8342379787dd8c43b1d1017684f41101/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FSubclassBytecodeGenerator.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FSubclassBytecodeGenerator.java?ref=5bcc3b8e8342379787dd8c43b1d1017684f41101",
      "patch": "@@ -131,12 +131,13 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {\n             assertModuleAccessability(iFace);\n         }\n         String name = nameFor(features.mockedType, features.interfaces, classLoader);\n-        if (name.startsWith(CODEGEN_PACKAGE)) {\n+        if (name.startsWith(CODEGEN_PACKAGE) || classLoader instanceof MultipleParentClassLoader) {\n+            Class<?> target = classLoader instanceof MultipleParentClassLoader ? loadHookType(classLoader) : Mockito.class;\n             assertVisibility(features.mockedType);\n-            loadModuleProble(features.mockedType, Mockito.class, false, false, true);\n+            loadModuleProble(features.mockedType, target, false, false, true);\n             for (Class<?> iFace : features.interfaces) {\n                 assertVisibility(iFace);\n-                loadModuleProble(iFace, Mockito.class, false, false, true);\n+                loadModuleProble(iFace, target, false, false, true);\n             }\n         } else {\n             loadModuleProble(features.mockedType, Mockito.class, true, !loader.isDisrespectingOpenness(), false);\n@@ -186,6 +187,13 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {\n                       .getLoaded();\n     }\n \n+    private Class<?> loadHookType(ClassLoader classLoader) {\n+        return byteBuddy.subclass(Object.class)\n+            .make()\n+            .load(classLoader, loader.resolveStrategy(Object.class, classLoader, true))\n+            .getLoaded();\n+    }\n+\n     private void loadModuleProble(Class<?> type, Class<?> target, boolean addRead, boolean addOpen, boolean addExports) {\n         Implementation.Composable implementation = StubMethod.INSTANCE;\n         if (addRead && !canRead(type, target)) {",
      "parent_sha": "66443afe2cf645cafc86202c44b6629bd5609eb0"
    }
  },
  {
    "oid": "f60452d3bd20356d6ad97808656be93fa3b495e8",
    "message": "Removed some generics warnings, suppressed where it wasn't possible.\n\n--HG--\nbranch : issue148\nextra : transplant_source : 7%9B%99%09%20%3D%E6%FFfP%DC%81%03%D4%BCsl%C0F%14",
    "date": "2011-02-17T19:42:45Z",
    "url": "https://github.com/mockito/mockito/commit/f60452d3bd20356d6ad97808656be93fa3b495e8",
    "details": {
      "sha": "be125b73c6ed22daeaeba316018845b8c6445c70",
      "filename": "test/org/mockito/internal/MockHandlerTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/mockito/mockito/blob/f60452d3bd20356d6ad97808656be93fa3b495e8/test%2Forg%2Fmockito%2Finternal%2FMockHandlerTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/f60452d3bd20356d6ad97808656be93fa3b495e8/test%2Forg%2Fmockito%2Finternal%2FMockHandlerTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockito%2Finternal%2FMockHandlerTest.java?ref=f60452d3bd20356d6ad97808656be93fa3b495e8",
      "patch": "@@ -37,6 +37,7 @@\n @SuppressWarnings({\"unchecked\",\"serial\"})\n public class MockHandlerTest extends TestBase {\n     \n+\t@SuppressWarnings(\"rawtypes\")\n \tprivate static final Answer SOME_ANSWER = mock(Answer.class);\n \tprivate static final StubbedInvocationMatcher SOME_RETURN_VALUE = mock(StubbedInvocationMatcher.class);\n \tprivate static final Invocation SOME_INVOCATION = mock(Invocation.class);\n@@ -47,7 +48,8 @@ public class MockHandlerTest extends TestBase {\n     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n         //given\n         Invocation invocation = new InvocationBuilder().toInvocation();\n-        MockHandler handler = new MockHandler();\n+        @SuppressWarnings(\"rawtypes\")\n+\t\tMockHandler<?> handler = new MockHandler();\n         handler.mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());\n         handler.matchersBinder = new MatchersBinder() {\n             public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n@@ -69,7 +71,7 @@ public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStor\n     @Test\n     public void shouldNotifyInvocationHandlerDuringStubVoid() throws Throwable {\n     \t// given\n-    \tMockHandler handler = createHandlerWithListeners(listener1, listener2);\n+    \tMockHandler<?> handler = createHandlerWithListeners(listener1, listener2);\n     \tstubWithInvocationDuringStubVoid(handler);\n     \t\n     \t\n@@ -169,7 +171,7 @@ private void stubWithInvocationDuringStubVoid(MockHandler handler) {\n     \tstubHandlerStateWithPreviousStubVoidInvocation(handler);\n \t}\n \n-\tprivate void stubHandlerStateWithPreviousStubVoidInvocation(MockHandler handler) {\n+\tprivate void stubHandlerStateWithPreviousStubVoidInvocation(MockHandler<?> handler) {\n \t\tStubbedInvocationMatcher invocationContainer = mock(StubbedInvocationMatcher.class);\n \t\tgiven(handler.matchersBinder.bindMatchers(any(ArgumentMatcherStorage.class), any(Invocation.class))).willReturn(invocationContainer);\n \t\t\n@@ -179,6 +181,7 @@ private void stubHandlerStateWithPreviousStubVoidInvocation(MockHandler handler)\n \t\tgiven(invocation.isVoid()).willReturn(true);\n \t}\n \n+\t@SuppressWarnings(\"rawtypes\")\n \tprivate void stubWithPreviouslySetVoidAnswer(MockHandler handler) {\n \t\tList<Answer<?>> answers = new ArrayList<Answer<?>>();\n     \tanswers.add(new DoesNothing());",
      "parent_sha": "aa437c768b9b67d1c8c2a91952899468491a105c"
    }
  },
  {
    "oid": "e4a5820eed13a11a2d5fb247ed0db93d825cbe7d",
    "message": "Fixed broken test",
    "date": "2016-04-18T00:40:27Z",
    "url": "https://github.com/mockito/mockito/commit/e4a5820eed13a11a2d5fb247ed0db93d825cbe7d",
    "details": {
      "sha": "7cc1640be4bc742e62b7108beed32f926b4ebf90",
      "filename": "src/test/java/org/mockito/internal/junit/JUnitRuleTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/e4a5820eed13a11a2d5fb247ed0db93d825cbe7d/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/e4a5820eed13a11a2d5fb247ed0db93d825cbe7d/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java?ref=e4a5820eed13a11a2d5fb247ed0db93d825cbe7d",
      "patch": "@@ -58,7 +58,7 @@ public void evaluate() throws Throwable {\n             fail();\n         } catch (AssertionError e) {\n             assertEquals(\"x\", e.getMessage());\n-            assertTrue(logger.getLoggedInfo().startsWith(\"This stubbing was never used\"));\n+            assertTrue(logger.getLoggedInfo().contains(\"This stubbing was never used\"));\n         }\n     }\n ",
      "parent_sha": "4a2417865b05cb20dc3de0540a0f38ec640cb634"
    }
  },
  {
    "oid": "5de62a1950a3723d20e270b513d778f1e55cb0f5",
    "message": "Fix typos (#1484)\n\ndon't -> doesn't",
    "date": "2018-08-25T08:01:30Z",
    "url": "https://github.com/mockito/mockito/commit/5de62a1950a3723d20e270b513d778f1e55cb0f5",
    "details": {
      "sha": "7011c92c44719934b489bda4d8940dcc01f1802c",
      "filename": "src/main/java/org/mockito/ArgumentCaptor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mockito/mockito/blob/5de62a1950a3723d20e270b513d778f1e55cb0f5/src%2Fmain%2Fjava%2Forg%2Fmockito%2FArgumentCaptor.java",
      "raw_url": "https://github.com/mockito/mockito/raw/5de62a1950a3723d20e270b513d778f1e55cb0f5/src%2Fmain%2Fjava%2Forg%2Fmockito%2FArgumentCaptor.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FArgumentCaptor.java?ref=5de62a1950a3723d20e270b513d778f1e55cb0f5",
      "patch": "@@ -49,7 +49,7 @@\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n  *\n  * <p>\n- * This utility class <strong>*don't do any type checks*</strong>, the generic signatures are only there to avoid casting\n+ * This utility class <strong>*doesn't do any type checks*</strong>. The generic signatures are only there to avoid casting\n  * in your code.\n  * <p>\n  * There is an <strong>annotation</strong> that you might find useful: &#64;{@link Captor}\n@@ -136,7 +136,7 @@ public List<T> getAllValues() {\n     /**\n      * Build a new <code>ArgumentCaptor</code>.\n      * <p>\n-     * Note that an <code>ArgumentCaptor</code> <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * Note that an <code>ArgumentCaptor</code> <b>*doesn't do any type checks*</b>. It is only there to avoid casting\n      * in your code. This might however change (type checks could be added) in a\n      * future major release.\n      *",
      "parent_sha": "91d5dc9dde0ec4efa793309afe8180dccb801ffd"
    }
  },
  {
    "oid": "c52a02a0cc5e300bfb4c40324b23efd919e81dc6",
    "message": "Added more coverage\n\nAdded integ test coverage to prevent leaking of strictness setting to surrounding tests",
    "date": "2017-01-29T04:22:24Z",
    "url": "https://github.com/mockito/mockito/commit/c52a02a0cc5e300bfb4c40324b23efd919e81dc6",
    "details": {
      "sha": "c652ed15a97f3e350f6f5b50594f8c7a6df37ca8",
      "filename": "src/test/java/org/mockitousage/stubbing/StrictStubbingE2ETest.java",
      "status": "modified",
      "additions": 32,
      "deletions": 13,
      "changes": 45,
      "blob_url": "https://github.com/mockito/mockito/blob/c52a02a0cc5e300bfb4c40324b23efd919e81dc6/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fstubbing%2FStrictStubbingE2ETest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/c52a02a0cc5e300bfb4c40324b23efd919e81dc6/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fstubbing%2FStrictStubbingE2ETest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fstubbing%2FStrictStubbingE2ETest.java?ref=c52a02a0cc5e300bfb4c40324b23efd919e81dc6",
      "patch": "@@ -1,7 +1,6 @@\n package org.mockitousage.stubbing;\n \n import org.junit.After;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.JUnitCore;\n import org.junit.runner.Result;\n@@ -18,26 +17,23 @@\n \n public class StrictStubbingE2ETest {\n \n+    JUnitCore junit = new JUnitCore();\n+\n     @Test public void finish_mocking_exception_does_not_hide_the_exception_from_test() {\n-        JUnitCore junit = new JUnitCore();\n         Result result = junit.run(ArgumentMismatch.class);\n         JUnitResultAssert.assertThat(result)\n                 .fails(\"stubbing_argument_mismatch\", IllegalStateException.class)\n                 .fails(\"stubbing_argument_mismatch\", UnnecessaryStubbingException.class);\n     }\n \n     @Test public void does_not_report_unused_stubbing_if_mismatch_reported() {\n-        JUnitCore junit = new JUnitCore();\n         Result result = junit.run(ReportMismatchButNotUnusedStubbing.class);\n         JUnitResultAssert.assertThat(result).fails(1, PotentialStubbingProblem.class);\n     }\n \n-    @Ignore //TODO\n-    @Test public void prevents_multiple_listeners_in_the_same_thread() {\n-        JUnitCore junit = new JUnitCore();\n-        Result result = junit.run(ClassFieldInitialization.class);\n-        JUnitResultAssert.assertThat(result)\n-                .fails(2, PotentialStubbingProblem.class);\n+    @Test public void strict_stubbing_does_not_leak_to_other_tests() {\n+        Result result = junit.run(DefaultStrictness1.class, StrictStubsPassing.class, DefaultStrictness2.class);\n+        JUnitResultAssert.assertThat(result).succeeds(5);\n     }\n \n     public static class ArgumentMismatch {\n@@ -68,20 +64,43 @@ public static class ReportMismatchButNotUnusedStubbing {\n         }\n     }\n \n-    public static class ClassFieldInitialization {\n+    public static class StrictStubsPassing {\n         @Mock IMethods mock;\n         MockitoMocking mocking = Mockito.startMocking(this, Strictness.STRICT_STUBS);\n \n         @After public void after() {\n             mocking.finishMocking();\n         }\n \n-        @Test public void test1() {\n+        @Test public void used() {\n+            System.out.println(\"working\");\n+            given(mock.simpleMethod(1)).willReturn(\"\");\n+            mock.simpleMethod(1);\n+        }\n+    }\n+\n+    public static class DefaultStrictness1 {\n+        @Mock IMethods mock = Mockito.mock(IMethods.class);\n+\n+        @Test public void unused() {\n             given(mock.simpleMethod(1)).willReturn(\"\");\n-            mock.simpleMethod(2);\n         }\n \n-        @Test public void test2() {\n+        @Test public void mismatch() {\n+            given(mock.simpleMethod(2)).willReturn(\"\");\n+            mock.simpleMethod(3);\n+        }\n+    }\n+\n+    public static class DefaultStrictness2 {\n+        @Mock IMethods mock = Mockito.mock(IMethods.class);\n+\n+        @Test public void unused() {\n+            given(mock.simpleMethod(1)).willReturn(\"\");\n+        }\n+\n+        @Test public void mismatch() {\n+            System.out.println(\"SomeDemo\");\n             given(mock.simpleMethod(2)).willReturn(\"\");\n             mock.simpleMethod(3);\n         }",
      "parent_sha": "1c33b23d7d8af2fa00553ef609c09e3c7bbc1f67"
    }
  },
  {
    "oid": "2b92eb882e46b07d36cfbf6f7ba85509b34be5e4",
    "message": "Fixed way to fire threads in test at the same time\n(transplanted from 5ce5a37379e1d6b2570798855b6ae7a230887395)\n\n--HG--\nextra : transplant_source : %5C%E5%A3sy%E1%D6%B2W%07%98%85%5Bj%E7%A20%88s%95",
    "date": "2012-09-01T17:16:32Z",
    "url": "https://github.com/mockito/mockito/commit/2b92eb882e46b07d36cfbf6f7ba85509b34be5e4",
    "details": {
      "sha": "f2b17fe0c3a6924a5b85c446f99af8b4e046b26d",
      "filename": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
      "status": "modified",
      "additions": 82,
      "deletions": 78,
      "changes": 160,
      "blob_url": "https://github.com/mockito/mockito/blob/2b92eb882e46b07d36cfbf6f7ba85509b34be5e4/test%2Forg%2Fmockito%2Finternal%2Fstubbing%2FInvocationContainerImplTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/2b92eb882e46b07d36cfbf6f7ba85509b34be5e4/test%2Forg%2Fmockito%2Finternal%2Fstubbing%2FInvocationContainerImplTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockito%2Finternal%2Fstubbing%2FInvocationContainerImplTest.java?ref=2b92eb882e46b07d36cfbf6f7ba85509b34be5e4",
      "patch": "@@ -2,81 +2,85 @@\n  * Copyright (c) 2007 Mockito contributors\n  * This program is made available under the terms of the MIT License.\n  */\n-package org.mockito.internal.stubbing;\r\n-\r\n-import org.junit.Test;\r\n-import org.mockito.internal.invocation.InvocationBuilder;\r\n-import org.mockito.internal.invocation.InvocationMatcher;\r\n-import org.mockito.internal.progress.ThreadSafeMockingProgress;\r\n-import org.mockito.internal.stubbing.answers.Returns;\r\n-import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\r\n-import org.mockito.invocation.Invocation;\r\n-\r\n-import java.util.LinkedList;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertTrue;\r\n-\r\n-/**\r\n- * Author: Szczepan Faber\r\n- */\r\n-public class InvocationContainerImplTest {\r\n-\r\n-    InvocationContainerImpl container = new InvocationContainerImpl(new ThreadSafeMockingProgress());\r\n-    Invocation invocation = new InvocationBuilder().toInvocation();\r\n-    LinkedList<Throwable> exceptions = new LinkedList<Throwable>();\r\n-\r\n-    @Test\r\n-    //works 50% of the time\r\n-    public void shouldBeThreadSafe() throws Throwable {\r\n-        //given\r\n-        Thread[] t = new Thread[200];\r\n-        for (int i = 0; i < t.length; i++ ) {\r\n-            t[i] = new Thread() {\r\n-                public void run() {\r\n-                    try {\r\n-                        Thread.sleep(10); //NOPMD\r\n-                    } catch (InterruptedException e) {\r\n-                        throw new RuntimeException(e);\r\n-                    }\r\n-                    container.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\r\n-                    container.addAnswer(new Returns(\"foo\"));\r\n-                    container.findAnswerFor(invocation);\r\n-                }\r\n-            };\r\n-            t[i].setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\r\n-                public void uncaughtException(Thread t, Throwable e) {\r\n-                    exceptions.add(e);\r\n-                }\r\n-            });\r\n-            t[i].start();\r\n-        }\r\n-\r\n-        //when\r\n-        for (Thread aT : t) {\r\n-            aT.join();\r\n-        }\r\n-\r\n-        //then\r\n-        if (exceptions.size() != 0) {\r\n-            throw exceptions.getFirst();\r\n-        }\r\n-    }\r\n-\r\n-    @Test\r\n-    public void shouldReturnInvokedMock() throws Exception {\r\n-        container.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\r\n-\r\n-        assertEquals(invocation.getMock(), container.invokedMock());\r\n-    }\r\n-\r\n-    @Test\r\n-    public void should_tell_if_has_invocation_for_potential_stubbing() throws Exception {\r\n-        container.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\r\n-        assertTrue(container.hasInvocationForPotentialStubbing());\r\n-\r\n-        container.addAnswer(new ReturnsEmptyValues());\r\n-        assertFalse(container.hasInvocationForPotentialStubbing());\r\n-    }\r\n-}\r\n+package org.mockito.internal.stubbing;\n+\n+import org.junit.Test;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.stubbing.answers.Returns;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n+import org.mockito.invocation.Invocation;\n+\n+import java.util.LinkedList;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Author: Szczepan Faber\n+ */\n+public class InvocationContainerImplTest {\n+\n+    InvocationContainerImpl container = new InvocationContainerImpl(new ThreadSafeMockingProgress());\n+    Invocation invocation = new InvocationBuilder().toInvocation();\n+    LinkedList<Throwable> exceptions = new LinkedList<Throwable>();\n+\n+    @Test\n+    //works 50% of the time\n+    public void shouldBeThreadSafe() throws Throwable {\n+        //given\n+        Thread[] t = new Thread[200];\n+        final CountDownLatch starter = new CountDownLatch(200);\n+        for (int i = 0; i < t.length; i++ ) {\n+            t[i] = new Thread() {\n+                public void run() {\n+                    try {\n+                        starter.await();\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                    container.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\n+                    container.addAnswer(new Returns(\"foo\"));\n+                    container.findAnswerFor(invocation);\n+                }\n+            };\n+            t[i].setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n+                public void uncaughtException(Thread t, Throwable e) {\n+                    exceptions.add(e);\n+                }\n+            });\n+            t[i].start();\n+\n+            starter.countDown();\n+        }\n+\n+        //when\n+        for (Thread aT : t) {\n+            aT.join();\n+        }\n+\n+        //then\n+        if (exceptions.size() != 0) {\n+            throw exceptions.getFirst();\n+        }\n+    }\n+\n+    @Test\n+    public void shouldReturnInvokedMock() throws Exception {\n+        container.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\n+\n+        assertEquals(invocation.getMock(), container.invokedMock());\n+    }\n+\n+    @Test\n+    public void should_tell_if_has_invocation_for_potential_stubbing() throws Exception {\n+        container.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n+        assertTrue(container.hasInvocationForPotentialStubbing());\n+\n+        container.addAnswer(new ReturnsEmptyValues());\n+        assertFalse(container.hasInvocationForPotentialStubbing());\n+    }\n+}",
      "parent_sha": "1703ea5a0a496fc0e9a6eba312daf5f5e44ad7b8"
    }
  },
  {
    "oid": "90d38c5fd97d5c4d1f5085e1b93a28415341612b",
    "message": "A small fix on Mockito javadocs. Adding some styling and an anchor to section 12. (#647)",
    "date": "2016-09-22T11:41:37Z",
    "url": "https://github.com/mockito/mockito/commit/90d38c5fd97d5c4d1f5085e1b93a28415341612b",
    "details": {
      "sha": "a91035181752d117ac4f22d19ffa71cb2a7ae949",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/90d38c5fd97d5c4d1f5085e1b93a28415341612b/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/90d38c5fd97d5c4d1f5085e1b93a28415341612b/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=90d38c5fd97d5c4d1f5085e1b93a28415341612b",
      "patch": "@@ -264,7 +264,7 @@\n  *   mockedList.clear();\n  * </code></pre>\n  *\n- * Read more about doThrow|doAnswer family of methods in paragraph 12.\n+ * Read more about <code>doThrow()</code>|<code>doAnswer()</code> family of methods in <a href=\"#12\">section 12</a>.\n  * <p>\n  *\n  * <h3 id=\"6\">6. <a class=\"meaningful_link\" href=\"#in_order_verification\">Verification in order</a></h3>",
      "parent_sha": "976dff7dd2c555238da1667da2857c91d76094c9"
    }
  },
  {
    "oid": "e30a4e1e77631b56d6265d023dcb07a49269751e",
    "message": "Avoided leftover state in one of the tests\n\nThis fixes recently introduced flakiness of the build.",
    "date": "2016-12-22T22:33:48Z",
    "url": "https://github.com/mockito/mockito/commit/e30a4e1e77631b56d6265d023dcb07a49269751e",
    "details": {
      "sha": "6c9a45d35e85895c90431f7f820a4489f049416b",
      "filename": "src/test/java/org/mockitousage/debugging/VerificationListenerCallBackTest.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/mockito/mockito/blob/e30a4e1e77631b56d6265d023dcb07a49269751e/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fdebugging%2FVerificationListenerCallBackTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/e30a4e1e77631b56d6265d023dcb07a49269751e/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fdebugging%2FVerificationListenerCallBackTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fdebugging%2FVerificationListenerCallBackTest.java?ref=e30a4e1e77631b56d6265d023dcb07a49269751e",
      "patch": "@@ -1,23 +1,32 @@\n package org.mockitousage.debugging;\n \n import org.assertj.core.api.Condition;\n+import org.junit.After;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.JUnitCore;\n import org.mockito.Mockito;\n import org.mockito.MockitoFramework;\n+import org.mockito.StateMaster;\n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.listeners.VerificationListener;\n import org.mockito.verification.VerificationEvent;\n import org.mockito.verification.VerificationMode;\n+import org.mockitoutil.TestBase;\n \n import java.lang.reflect.Method;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;\n import static org.mockito.Mockito.*;\n \n-public class VerificationListenerCallBackTest {\n+public class VerificationListenerCallBackTest extends TestBase {\n+\n+    @After\n+    public void clearListeners() {\n+        new StateMaster().clearMockitoListeners();\n+    }\n \n     @Test\n     public void should_call_single_listener_on_verify() throws NoSuchMethodException {",
      "parent_sha": "de45e91fe0ef554796dce5511796555ad57244b4"
    }
  },
  {
    "oid": "0cf45e2157e86a06dfd280a7d6e7fce63b4d764b",
    "message": "Fixes #1621: Partly reverting #1612 cbedbe567d5bf902b13e8cebc4a2a2ccfef7758f\n\n`ReturnsDeepStubs` was returning null instead of MockitoMock to avoid a\n`ClassCastException` on the call site, this change seems not necessary\nafter the change done in df9b85eebb06106a6d2a629cf55eb9de5c3bf923.\n\nBut keep the MockitoCast check in errorprone disabled as this PR\nimproves what was done in #1612 by making the generics support cover\nadditional generics scenarios.\n\nhttp://errorprone.info/bugpattern/MockitoCast",
    "date": "2019-02-27T15:08:32Z",
    "url": "https://github.com/mockito/mockito/commit/0cf45e2157e86a06dfd280a7d6e7fce63b4d764b",
    "details": {
      "sha": "cc963679b287870c2442a18460c33339017e6f2b",
      "filename": "src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mockito/mockito/blob/0cf45e2157e86a06dfd280a7d6e7fce63b4d764b/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fdefaultanswers%2FReturnsDeepStubs.java",
      "raw_url": "https://github.com/mockito/mockito/raw/0cf45e2157e86a06dfd280a7d6e7fce63b4d764b/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fdefaultanswers%2FReturnsDeepStubs.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fdefaultanswers%2FReturnsDeepStubs.java?ref=0cf45e2157e86a06dfd280a7d6e7fce63b4d764b",
      "patch": "@@ -58,9 +58,9 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n         // a mock that would potentially match the return signature, instead return `null`. This\n         // is valid per the CheckCast JVM instruction and is better than causing a ClassCastException\n         // on runtime.\n-        if (rawType.equals(Object.class)) {\n-            return null;\n-        }\n+//        if (rawType.equals(Object.class)) {\n+//            return null;\n+//        }\n \n         return deepStub(invocation, returnTypeGenericMetadata);\n     }",
      "parent_sha": "3722958ba4db09b6ea45b613317b5f888d39a3f1"
    }
  },
  {
    "oid": "9e46a9ada54444d7f933cd9cb2a44b7f601bc75f",
    "message": "Removed fixed TODO\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401873",
    "date": "2010-02-25T19:50:30Z",
    "url": "https://github.com/mockito/mockito/commit/9e46a9ada54444d7f933cd9cb2a44b7f601bc75f",
    "details": {
      "sha": "e81f9dc47f5ffac32650f96673df39b572338649",
      "filename": "src/org/mockito/InjectMock.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/mockito/mockito/blob/9e46a9ada54444d7f933cd9cb2a44b7f601bc75f/src%2Forg%2Fmockito%2FInjectMock.java",
      "raw_url": "https://github.com/mockito/mockito/raw/9e46a9ada54444d7f933cd9cb2a44b7f601bc75f/src%2Forg%2Fmockito%2FInjectMock.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FInjectMock.java?ref=9e46a9ada54444d7f933cd9cb2a44b7f601bc75f",
      "patch": "@@ -50,6 +50,4 @@\n @Documented\r\n @Target( { FIELD })\r\n @Retention(RetentionPolicy.RUNTIME)\r\n-public @interface InjectMock {\r\n-    //TODO should also inject spies\r\n-}\r\n+public @interface InjectMock {}\r",
      "parent_sha": "9e72eadc0fc37e14a7cbc29a5e94b17192dfa737"
    }
  },
  {
    "oid": "62968af9b2109d60cebb8867fd40ee0f2462e395",
    "message": "Improved javadoc\n\nAttempted to explain why the argument in the ArgumentMatcher needs to be Object instead of T.",
    "date": "2015-06-29T05:35:26Z",
    "url": "https://github.com/mockito/mockito/commit/62968af9b2109d60cebb8867fd40ee0f2462e395",
    "details": {
      "sha": "5ab10cc1e689b3baec4f83e0f048929162ba812d",
      "filename": "src/org/mockito/ArgumentMatcher.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/mockito/mockito/blob/62968af9b2109d60cebb8867fd40ee0f2462e395/src%2Forg%2Fmockito%2FArgumentMatcher.java",
      "raw_url": "https://github.com/mockito/mockito/raw/62968af9b2109d60cebb8867fd40ee0f2462e395/src%2Forg%2Fmockito%2FArgumentMatcher.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FArgumentMatcher.java?ref=62968af9b2109d60cebb8867fd40ee0f2462e395",
      "patch": "@@ -81,9 +81,21 @@ public interface ArgumentMatcher<T> {\n      * The method should <b>never</b> assert if the argument doesn't match. It\n      * should only return false.\n      * <p>\n-     * The argument is not using generic type in order to force explicit casting in the implementation.\n+     * The argument is not using the generic type in order to force explicit casting in the implementation.\n      * This way it is easier to debug when incompatible arguments are passed to the matchers.\n-     * You have to trust us on this one.\n+     * You have to trust us on this one. If we used parametrized type then <code>ClassCastException</code>\n+     * would be thrown in certain scenarios.\n+     * For example:\n+     *\n+     * <pre class=\"code\"><code class=\"java\">\n+     *   //test, method accepts Collection argument and ArgumentMatcher&lt;List&gt; is used\n+     *   when(mock.useCollection(someListMatcher())).thenDoNothing();\n+     *\n+     *   //production code, yields confusing ClassCastException\n+     *   //although Set extends Collection but is not compatible with ArgumentMatcher&lt;List&gt;\n+     *   mock.useCollection(new HashSet());\n+     * </pre>\n+     *\n      * <p>\n      * See the example in the top level javadoc for {@link ArgumentMatcher}\n      *",
      "parent_sha": "da5c38e00d3669dae559e22d033971fb093cc0a2"
    }
  },
  {
    "oid": "41b184237e5713d1c9b71714a7ecd00caab5e1b7",
    "message": "Fixes #188 : Cleaned CapturingArgumentsTest a bit before adding new test methods.",
    "date": "2015-06-04T08:13:45Z",
    "url": "https://github.com/mockito/mockito/commit/41b184237e5713d1c9b71714a7ecd00caab5e1b7",
    "details": {
      "sha": "e52a783c400000b045d2e922791f0c2f23ae0fe4",
      "filename": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
      "status": "modified",
      "additions": 44,
      "deletions": 46,
      "changes": 90,
      "blob_url": "https://github.com/mockito/mockito/blob/41b184237e5713d1c9b71714a7ecd00caab5e1b7/test%2Forg%2Fmockitousage%2Fmatchers%2FCapturingArgumentsTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/41b184237e5713d1c9b71714a7ecd00caab5e1b7/test%2Forg%2Fmockitousage%2Fmatchers%2FCapturingArgumentsTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitousage%2Fmatchers%2FCapturingArgumentsTest.java?ref=41b184237e5713d1c9b71714a7ecd00caab5e1b7",
      "patch": "@@ -5,10 +5,10 @@\n \n package org.mockitousage.matchers;\n \n+import junit.framework.Assert;\n import org.fest.assertions.Assertions;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n-import org.mockito.Mock;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n@@ -23,8 +23,6 @@\n \n public class CapturingArgumentsTest extends TestBase {\n \n-    @Mock IMethods mock;\n-    \n     class Person {\n \n         private final Integer age;\n@@ -37,12 +35,12 @@ public int getAge() {\n             return age;\n         }\n     }\n-    \n-    class Emailer {\n-     \n+\n+    class BulkEmailService {\n+\n         private EmailService service;\n-        \n-        public Emailer(EmailService service) {\n+\n+        public BulkEmailService(EmailService service) {\n             this.service = service;\n         }\n \n@@ -53,50 +51,53 @@ public void email(Integer ... personId) {\n             }\n         }\n     }\n-    \n+\n     interface EmailService {\n         boolean sendEmailTo(Person person);\n     }\n \n     EmailService emailService = mock(EmailService.class);\n-    Emailer emailer = new Emailer(emailService);\n+    BulkEmailService bulkEmailService = new BulkEmailService(emailService);\n+    IMethods mock = mock(IMethods.class);\n \n     @SuppressWarnings(\"deprecation\")\n     @Test\n     public void should_allow_assertions_on_captured_argument() {\n+        //given\n+        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n+\n         //when\n-        emailer.email(12);\n-        \n+        bulkEmailService.email(12);\n+\n         //then\n-        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n         verify(emailService).sendEmailTo(argument.capture());\n-        \n         assertEquals(12, argument.getValue().getAge());\n     }\n     \n     @Test\n     public void should_allow_assertions_on_all_captured_arguments() {\n+        //given\n+        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n+\n         //when\n-        emailer.email(11, 12);\n-        \n+        bulkEmailService.email(11, 12);\n+\n         //then\n-        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n-        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n-        List<Person> allValues = argument.getAllValues();\n-        \n-        assertEquals(11, allValues.get(0).getAge());\n-        assertEquals(12, allValues.get(1).getAge());\n+        verify(emailService, times(2)).sendEmailTo(argument.capture());\n+        assertEquals(11, argument.getAllValues().get(0).getAge());\n+        assertEquals(12, argument.getAllValues().get(1).getAge());\n     }\n     \n     @Test\n     public void should_allow_assertions_on_last_argument() {\n+        //given\n+        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n+\n         //when\n-        emailer.email(11, 12, 13);\n-        \n+        bulkEmailService.email(11, 12, 13);\n+\n         //then\n-        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n-        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n-        \n+        verify(emailService, times(3)).sendEmailTo(argument.capture());\n         assertEquals(13, argument.getValue().getAge());\n     }\n     \n@@ -117,11 +118,13 @@ public void should_print_captor_matcher() {\n     \n     @Test\n     public void should_allow_assertions_on_captured_null() {\n+        //given\n+        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n+\n         //when\n         emailService.sendEmailTo(null);\n-        \n+\n         //then\n-        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n         verify(emailService).sendEmailTo(argument.capture());\n         assertEquals(null, argument.getValue());\n     }\n@@ -130,12 +133,14 @@ public void should_allow_assertions_on_captured_null() {\n     public void should_allow_construction_of_captor_for_parameterized_type_in_a_convenient_way()  {\n         //the test passes if this expression compiles\n         ArgumentCaptor<List<Person>> argument = ArgumentCaptor.forClass(List.class);\n+        assertNotNull(argument);\n     }\n \n     @Test\n     public void should_allow_construction_of_captor_for_a_more_specific_type()  {\n         //the test passes if this expression compiles\n         ArgumentCaptor<List> argument = ArgumentCaptor.forClass(ArrayList.class);\n+        assertNotNull(argument);\n     }\n     \n     @Test\n@@ -171,28 +176,29 @@ public void should_say_something_smart_when_misused() {\n         try {\n             argument.getValue();\n             fail();\n-        } catch (MockitoException e) {}\n+        } catch (MockitoException e) {\n+            Assert.assertTrue(true);\n+        }\n     }\n     \n     @Test\n     public void should_capture_when_full_arg_list_matches() throws Exception {\n         //given\n+        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n+\n+        //when\n         mock.simpleMethod(\"foo\", 1);\n         mock.simpleMethod(\"bar\", 2);\n-        \n-        //when\n-        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n-        verify(mock).simpleMethod(captor.capture(), eq(1));\n-        \n+\n         //then\n+        verify(mock).simpleMethod(captor.capture(), eq(1));\n         assertEquals(1, captor.getAllValues().size());\n         assertEquals(\"foo\", captor.getValue());\n     }\n     \n     @Test\n     public void should_capture_int_by_creating_captor_with_primitive_wrapper() {\n         //given\n-        IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<Integer> argument = ArgumentCaptor.forClass(Integer.class);\n \n         //when\n@@ -206,7 +212,6 @@ public void should_capture_int_by_creating_captor_with_primitive_wrapper() {\n     @Test\n     public void should_capture_int_by_creating_captor_with_primitive() throws Exception {\n         //given\n-        IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<Integer> argument = ArgumentCaptor.forClass(int.class);\n         \n         //when\n@@ -220,7 +225,6 @@ public void should_capture_int_by_creating_captor_with_primitive() throws Except\n     @Test\n     public void should_capture_byte_vararg_by_creating_captor_with_primitive() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);\n \n         // when\n@@ -235,7 +239,6 @@ public void should_capture_byte_vararg_by_creating_captor_with_primitive() throw\n     @Test\n     public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);\n \n         // when\n@@ -250,7 +253,6 @@ public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper\n     @Test\n     public void should_capture_vararg() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n \n         // when\n@@ -264,7 +266,6 @@ public void should_capture_vararg() throws Exception {\n     @Test\n     public void should_capture_all_vararg() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n \n         // when\n@@ -274,14 +275,12 @@ public void should_capture_all_vararg() throws Exception {\n         // then\n         verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());\n \n-        List<String> allVarargsValues = argumentCaptor.getAllValues();\n-        Assertions.assertThat(allVarargsValues).containsExactly(\"a\", \"b\", \"c\", \"again ?!\");\n+        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\", \"again ?!\");\n     }\n \n     @Test\n     public void should_capture_one_arg_even_when_using_vararg_captor_on_nonvararg_method() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n \n         // when\n@@ -293,9 +292,8 @@ public void should_capture_one_arg_even_when_using_vararg_captor_on_nonvararg_me\n     }\n \n     @Test\n-    public void captures_correclty_when_captor_used_multiple_times() throws Exception {\n+    public void captures_correctly_when_captor_used_multiple_times() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n \n         // when",
      "parent_sha": "0cd01b9d9719ef952035a426eef8272561f35d54"
    }
  },
  {
    "oid": "484255d3d93a0b14f4c389081060dec5106cd904",
    "message": "Add ignored test for super call method delegation in MockMethodAdvice",
    "date": "2016-09-26T22:33:04Z",
    "url": "https://github.com/mockito/mockito/commit/484255d3d93a0b14f4c389081060dec5106cd904",
    "details": {
      "sha": "7986af1b7ebaab283f41d757e42bd7106285323d",
      "filename": "src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java",
      "status": "modified",
      "additions": 25,
      "deletions": 1,
      "changes": 26,
      "blob_url": "https://github.com/mockito/mockito/blob/484255d3d93a0b14f4c389081060dec5106cd904/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FInlineByteBuddyMockMakerTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/484255d3d93a0b14f4c389081060dec5106cd904/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FInlineByteBuddyMockMakerTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FInlineByteBuddyMockMakerTest.java?ref=484255d3d93a0b14f4c389081060dec5106cd904",
      "patch": "@@ -1,8 +1,10 @@\n package org.mockito.internal.creation.bytebuddy;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.handler.MockHandlerImpl;\n+import org.mockito.internal.stubbing.answers.CallsRealMethods;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.mock.MockCreationSettings;\n \n@@ -34,6 +36,15 @@ public void should_create_mock_from_abstract_class_with_final_method() throws Ex\n         assertThat(proxy.bar()).isEqualTo(\"bar\");\n     }\n \n+    @Test\n+    @Ignore(\"Endless loop is creating when looking and invoking the super method in MockMethodAdvice.SuperMethodCall#invoke\")\n+    public void should_create_mock_from_class_with_super_call_to_final_method() throws Exception {\n+        MockSettingsImpl<CallingSuperMethodClass> settings = settingsFor(CallingSuperMethodClass.class);\n+        settings.defaultAnswer(new CallsRealMethods());\n+        CallingSuperMethodClass proxy = mockMaker.createMock(settings, new MockHandlerImpl<CallingSuperMethodClass>(settings));\n+        assertThat(proxy.foo()).isEqualTo(\"bar\");\n+    }\n+\n     @Test\n     public void should_create_mock_from_final_class_with_interface_methods() throws Exception {\n         MockCreationSettings<FinalMethod> settings = settingsFor(FinalMethod.class, SampleInterface.class);\n@@ -77,7 +88,7 @@ public void should_handle_missing_or_inconsistent_stack_trace() throws Exception\n         assertThat(MockMethodAdvice.hideRecursiveCall(throwable, 0, SampleInterface.class)).isSameAs(throwable);\n     }\n \n-    private static <T> MockCreationSettings<T> settingsFor(Class<T> type, Class<?>... extraInterfaces) {\n+    private static <T> MockSettingsImpl<T> settingsFor(Class<T> type, Class<?>... extraInterfaces) {\n         MockSettingsImpl<T> mockSettings = new MockSettingsImpl<T>();\n         mockSettings.setTypeToMock(type);\n         mockSettings.defaultAnswer(new Returns(\"bar\"));\n@@ -117,6 +128,19 @@ public final String foo() {\n         }\n     }\n \n+    private static class NonFinalMethod {\n+        public String foo() {\n+            return \"foo\";\n+        }\n+    }\n+\n+    private static class CallingSuperMethodClass extends NonFinalMethod {\n+        @Override\n+        public String foo() {\n+            return super.foo();\n+        }\n+    }\n+\n     private interface SampleInterface {\n \n         String bar();",
      "parent_sha": "6199d47e68153ccd7a29c9513d71847bfab8a15a"
    }
  },
  {
    "oid": "b0e814b05bde07318279a3922cfd2f3fa62f6850",
    "message": "Replace usages of anyObject() in exception descriptions to use any() (#1931)",
    "date": "2020-05-31T12:38:16Z",
    "url": "https://github.com/mockito/mockito/commit/b0e814b05bde07318279a3922cfd2f3fa62f6850",
    "details": {
      "sha": "75e98edcacf7bd12e27aabb28e5ca01d7c0f6c02",
      "filename": "src/main/java/org/mockito/internal/exceptions/Reporter.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mockito/mockito/blob/b0e814b05bde07318279a3922cfd2f3fa62f6850/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fexceptions%2FReporter.java",
      "raw_url": "https://github.com/mockito/mockito/raw/b0e814b05bde07318279a3922cfd2f3fa62f6850/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fexceptions%2FReporter.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fexceptions%2FReporter.java?ref=b0e814b05bde07318279a3922cfd2f3fa62f6850",
      "patch": "@@ -243,11 +243,11 @@ public static MockitoException invalidUseOfMatchers(int expectedMatchersCount, L\n                 \"\",\n                 \"This exception may occur if matchers are combined with raw values:\",\n                 \"    //incorrect:\",\n-                \"    someMethod(anyObject(), \\\"raw String\\\");\",\n+                \"    someMethod(any(), \\\"raw String\\\");\",\n                 \"When using matchers, all arguments have to be provided by matchers.\",\n                 \"For example:\",\n                 \"    //correct:\",\n-                \"    someMethod(anyObject(), eq(\\\"String by matcher\\\"));\",\n+                \"    someMethod(any(), eq(\\\"String by matcher\\\"));\",\n                 \"\",\n                 \"For more info see javadoc for Matchers class.\",\n                 \"\"\n@@ -561,7 +561,7 @@ public static MockitoException misplacedArgumentMatcher(List<LocalizedMatcher> l\n                 \"You cannot use argument matchers outside of verification or stubbing.\",\n                 \"Examples of correct usage of argument matchers:\",\n                 \"    when(mock.get(anyInt())).thenReturn(null);\",\n-                \"    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());\",\n+                \"    doThrow(new RuntimeException()).when(mock).someVoidMethod(any());\",\n                 \"    verify(mock).someMethod(contains(\\\"foo\\\"))\",\n                 \"\",\n                 \"This message may appear after an NullPointerException if the last matcher is returning an object \",",
      "parent_sha": "3c10616de9284f13e7f76604dc0d9ecc50ab9877"
    }
  },
  {
    "oid": "1eb0c97dbec12c0283017cbce71c452b91e98ac0",
    "message": "Use constructor chaining in VerificationOverTimeImpl",
    "date": "2015-01-02T14:37:41Z",
    "url": "https://github.com/mockito/mockito/commit/1eb0c97dbec12c0283017cbce71c452b91e98ac0",
    "details": {
      "sha": "685780a8405474fbc9f9699b949507bb285efbdc",
      "filename": "src/org/mockito/internal/verification/VerificationOverTimeImpl.java",
      "status": "modified",
      "additions": 9,
      "deletions": 13,
      "changes": 22,
      "blob_url": "https://github.com/mockito/mockito/blob/1eb0c97dbec12c0283017cbce71c452b91e98ac0/src%2Forg%2Fmockito%2Finternal%2Fverification%2FVerificationOverTimeImpl.java",
      "raw_url": "https://github.com/mockito/mockito/raw/1eb0c97dbec12c0283017cbce71c452b91e98ac0/src%2Forg%2Fmockito%2Finternal%2Fverification%2FVerificationOverTimeImpl.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fverification%2FVerificationOverTimeImpl.java?ref=1eb0c97dbec12c0283017cbce71c452b91e98ac0",
      "patch": "@@ -22,7 +22,7 @@ public class VerificationOverTimeImpl implements VerificationMode {\n     private final VerificationMode delegate;\n     private final boolean returnOnSuccess;\n     private final Timer timer;\n-    \n+\n     /**\n      * Create this verification mode, to be used to verify invocation ongoing data later.\n      *\n@@ -35,11 +35,7 @@ public class VerificationOverTimeImpl implements VerificationMode {\n      *                        {@link org.mockito.verification.VerificationAfterDelay}).\n      */\n     public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess) {\n-        this.pollingPeriodMillis = pollingPeriodMillis;\n-        this.durationMillis = durationMillis;\n-        this.delegate = delegate;\n-        this.returnOnSuccess = returnOnSuccess;\n-        this.timer = new Timer(durationMillis);\n+        this(pollingPeriodMillis, durationMillis, delegate, returnOnSuccess, new Timer(durationMillis));\n     }\n \n     /**\n@@ -79,12 +75,12 @@ public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, V\n      */\n     public void verify(VerificationData data) {\n         AssertionError error = null;\n-        \n+\n         timer.start();\n         while (timer.isCounting()) {\n             try {\n                 delegate.verify(data);\n-                \n+\n                 if (returnOnSuccess) {\n                     return;\n                 } else {\n@@ -97,7 +93,7 @@ public void verify(VerificationData data) {\n                 error = handleVerifyException(e);\n             }\n         }\n-        \n+\n         if (error != null) {\n             throw error;\n         }\n@@ -123,17 +119,17 @@ private void sleep(long sleep) {\n             // oups. not much luck.\n         }\n     }\n-    \n+\n     public long getPollingPeriod() {\n         return pollingPeriodMillis;\n     }\n-    \n+\n     public long getDuration() {\n         return durationMillis;\n     }\n-    \n+\n     public VerificationMode getDelegate() {\n         return delegate;\n     }\n-    \n+\n }",
      "parent_sha": "c5e9e731e83ee4efc29fbfd3dd2b12ceca07924b"
    }
  },
  {
    "oid": "bace2c8c2a25f18887e072110cce6efa0284a17f",
    "message": "Tightened integ test coverage\n\nTop level test now asserts on full content of the stubbing information. Added handy method for making assertions stable and the test easier to work with.\n\nSee issue #384",
    "date": "2016-04-18T00:40:27Z",
    "url": "https://github.com/mockito/mockito/commit/bace2c8c2a25f18887e072110cce6efa0284a17f",
    "details": {
      "sha": "88c75e243837aa26157d2c780de8a4e97d1fbdc3",
      "filename": "src/test/java/org/mockito/internal/junit/JUnitRuleTest.java",
      "status": "modified",
      "additions": 22,
      "deletions": 2,
      "changes": 24,
      "blob_url": "https://github.com/mockito/mockito/blob/bace2c8c2a25f18887e072110cce6efa0284a17f/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/bace2c8c2a25f18887e072110cce6efa0284a17f/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java?ref=bace2c8c2a25f18887e072110cce6efa0284a17f",
      "patch": "@@ -58,11 +58,31 @@ public void evaluate() throws Throwable {\n             fail();\n         } catch (AssertionError e) {\n             assertEquals(\"x\", e.getMessage());\n-            System.out.println(logger.getLoggedInfo()); //for debugging\n-            assertTrue(logger.getLoggedInfo().contains(\"declareUnusedStub\"));\n+            assertEquals(removeLineNo(logger.getLoggedInfo()), removeLineNo(\n+                \"[Mockito] Additional stubbing information (see javadoc for StubbingInfo class):\\n\" +\n+                \"[Mockito]\\n\" +\n+                \"[Mockito] Unused stubbing (perhaps can be removed from the test?):\\n\" +\n+                \"[Mockito]\\n\" +\n+                \"[Mockito] 1. -> at org.mockito.internal.junit.JUnitRuleTest.declareUnusedStub(JUnitRuleTest.java:82)\")\n+            );\n         }\n     }\n \n+    private String removeLineNo(String text) {\n+        //This handy method is useful for making the tests stable\n+        //we can change this class and the assertions will still work correctly\n+        //otherwise, changing the class will change line numbers and some assertons would fail\n+        String name = this.getClass().getSimpleName();\n+        return text.replaceAll(name + \"\\\\.java:(\\\\d)+\", name + \".java:100\");\n+    }\n+\n+    @Test\n+    public void can_remove_line_numbers() throws Throwable {\n+        assertEquals(\n+                \"[Mockito] 1. -> at org.mockito.internal.junit.JUnitRuleTest.declareUnusedStub(JUnitRuleTest.java:100)\",\n+                removeLineNo(\"[Mockito] 1. -> at org.mockito.internal.junit.JUnitRuleTest.declareUnusedStub(JUnitRuleTest.java:82)\"));\n+    }\n+\n     @Test\n     public void shouldNotWarnAboutUnusedStubsWhenPassed() throws Throwable {\n         jUnitRule.apply(new Statement() {",
      "parent_sha": "d7787ad49370252105856f4776a6dab22146a0ff"
    }
  },
  {
    "oid": "bb2464425a2b6711ba7ce2820b48cb350126d879",
    "message": "added missing license header\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40636",
    "date": "2008-06-17T14:59:26Z",
    "url": "https://github.com/mockito/mockito/commit/bb2464425a2b6711ba7ce2820b48cb350126d879",
    "details": {
      "sha": "b6fa13d24c904fc1a11cbd77f748724da6a6216e",
      "filename": "src/org/mockito/internal/stubbing/DontThrow.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/mockito/mockito/blob/bb2464425a2b6711ba7ce2820b48cb350126d879/src%2Forg%2Fmockito%2Finternal%2Fstubbing%2FDontThrow.java",
      "raw_url": "https://github.com/mockito/mockito/raw/bb2464425a2b6711ba7ce2820b48cb350126d879/src%2Forg%2Fmockito%2Finternal%2Fstubbing%2FDontThrow.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fstubbing%2FDontThrow.java?ref=bb2464425a2b6711ba7ce2820b48cb350126d879",
      "patch": "@@ -1,6 +1,10 @@\n-package org.mockito.internal.stubbing;\n-\n-public class DontThrow extends RuntimeException {\n-    private static final long serialVersionUID = 1L;\n-    public static final DontThrow DONT_THROW = new DontThrow();\n-}\n+/*\r\n+ * Copyright (c) 2007 Mockito contributors\r\n+ * This program is made available under the terms of the MIT License.\r\n+ */\r\n+package org.mockito.internal.stubbing;\r\n+\r\n+public class DontThrow extends RuntimeException {\r\n+    private static final long serialVersionUID = 1L;\r\n+    public static final DontThrow DONT_THROW = new DontThrow();\r\n+}\r",
      "parent_sha": "8ade4b0aebf7cbd4fb09f86cccd55de7fb5c03ab"
    }
  },
  {
    "oid": "7dd3c17471abd131174f197f6d98cd3fce5a9af5",
    "message": "Fix wrong artifact name in javadoc and link to proper javadoc page. (#1404)",
    "date": "2018-06-11T08:02:28Z",
    "url": "https://github.com/mockito/mockito/commit/7dd3c17471abd131174f197f6d98cd3fce5a9af5",
    "details": {
      "sha": "19d163111fe6ea9c91c1561caf5d975a8135249e",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mockito/mockito/blob/7dd3c17471abd131174f197f6d98cd3fce5a9af5/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/7dd3c17471abd131174f197f6d98cd3fce5a9af5/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=7dd3c17471abd131174f197f6d98cd3fce5a9af5",
      "patch": "@@ -1510,8 +1510,8 @@\n  *\n  * <h3 id=\"45\">45. (**new**) <a class=\"meaningful_link\" href=\"#junit5_mockito\" name=\"junit5_mockito\">New JUnit Jupiter (JUnit5+) extension</a></h3>\n  *\n- * For integration with JUnit Jupiter (JUnit5+), use the `org.mockito.junit-jupiter` artifact.\n- * For more information about the usage of the integration, see the JavaDoc of <code>MockitoExtension</code>.\n+ * For integration with JUnit Jupiter (JUnit5+), use the `org.mockito:mockito-junit-jupiter` artifact.\n+ * For more information about the usage of the integration, see <a href=\"http://javadoc.io/page/org.mockito/mockito-junit-jupiter/latest/org/mockito/junit/jupiter/MockitoExtension.html\">the JavaDoc of <code>MockitoExtension</code></a>.\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends ArgumentMatchers {",
      "parent_sha": "2c91f23bc0523738f7df7bf1a364828c464d3829"
    }
  },
  {
    "oid": "067355c18e90c31f84265b4aa2159b76b2c84d2e",
    "message": "In order to put additional reflection classes in consistent folder I did some package rename job\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401552",
    "date": "2009-07-09T11:35:56Z",
    "url": "https://github.com/mockito/mockito/commit/067355c18e90c31f84265b4aa2159b76b2c84d2e",
    "details": {
      "sha": "2873672754e875441f62566dd7b619c70fd7eca4",
      "filename": "src/org/mockito/internal/util/MockUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/067355c18e90c31f84265b4aa2159b76b2c84d2e/src%2Forg%2Fmockito%2Finternal%2Futil%2FMockUtil.java",
      "raw_url": "https://github.com/mockito/mockito/raw/067355c18e90c31f84265b4aa2159b76b2c84d2e/src%2Forg%2Fmockito%2Finternal%2Futil%2FMockUtil.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Futil%2FMockUtil.java?ref=067355c18e90c31f84265b4aa2159b76b2c84d2e",
      "patch": "@@ -14,7 +14,7 @@\n import org.mockito.internal.creation.jmock.ClassImposterizer;\r\n import org.mockito.internal.invocation.MatchersBinder;\r\n import org.mockito.internal.progress.MockingProgress;\r\n-import org.mockito.internal.util.copy.LenientCopyTool;\r\n+import org.mockito.internal.util.reflection.LenientCopyTool;\r\n \r\n public class MockUtil {\r\n     \r",
      "parent_sha": "b8414929192ca47098aeb9e332169052165a65fa"
    }
  },
  {
    "oid": "81601c5ab0c56bc3aa5efc35da44fe4f31bd91cd",
    "message": "Added JavaDoc explaining the details of VerificationWithTimeout",
    "date": "2013-10-06T15:27:47Z",
    "url": "https://github.com/mockito/mockito/commit/81601c5ab0c56bc3aa5efc35da44fe4f31bd91cd",
    "details": {
      "sha": "8efa76eb564e339b98222ae6e77d2e32bcab1dd6",
      "filename": "src/org/mockito/internal/verification/VerificationWithTimeoutImpl.java",
      "status": "modified",
      "additions": 27,
      "deletions": 6,
      "changes": 33,
      "blob_url": "https://github.com/mockito/mockito/blob/81601c5ab0c56bc3aa5efc35da44fe4f31bd91cd/src%2Forg%2Fmockito%2Finternal%2Fverification%2FVerificationWithTimeoutImpl.java",
      "raw_url": "https://github.com/mockito/mockito/raw/81601c5ab0c56bc3aa5efc35da44fe4f31bd91cd/src%2Forg%2Fmockito%2Finternal%2Fverification%2FVerificationWithTimeoutImpl.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fverification%2FVerificationWithTimeoutImpl.java?ref=81601c5ab0c56bc3aa5efc35da44fe4f31bd91cd",
      "patch": "@@ -1,28 +1,49 @@\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\r\n+ * Copyright (c) 2007 Mockito contributors\r\n+ * This program is made available under the terms of the MIT License.\r\n+ */\r\n package org.mockito.internal.verification;\r\n \r\n import org.mockito.exceptions.base.MockitoAssertionError;\r\n import org.mockito.internal.verification.api.VerificationData;\r\n import org.mockito.verification.VerificationMode;\r\n \r\n+/**\r\n+ * Verifies that another verification mode (the delegate) becomes true within a certain timeframe\r\n+ * (before timeoutMillis has passed, measured from the call to verify()).\r\n+ */\r\n public class VerificationWithTimeoutImpl {\r\n     \r\n     VerificationMode delegate;\r\n     int timeoutMillis;\r\n     int pollingPeriod;\r\n \r\n+    /**\r\n+     * Create this verification mode, to be used to verify invocation ongoing data later.\r\n+     *\r\n+     * @param pollingPeriod The frequency to poll delegate.verify(), to check whether the delegate has been satisfied\r\n+     * @param timeoutMillis The time to wait (in millis) for the delegate verification mode to be satisfied\r\n+     * @param delegate The verification mode to delegate overall success or failure to\r\n+     */\r\n     public VerificationWithTimeoutImpl(int pollingPeriod, int timeoutMillis, VerificationMode delegate) {\r\n         this.pollingPeriod = pollingPeriod;\r\n         this.timeoutMillis = timeoutMillis;\r\n         this.delegate = delegate;\r\n     }\r\n \r\n+    /**\r\n+     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode\r\n+     * before the timeout has passed.\r\n+     *\r\n+     * In practice, this polls the delegate verification mode, and returns successfully as soon as\r\n+     * the delegate is satisfied. If the delegate is not satisfied before the timeout has passed, the last\r\n+     * error returned by the delegate verification mode will be thrown here in turn.\r\n+     *\r\n+     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\r\n+     */\r\n     public void verify(VerificationData data) {\r\n-        MockitoAssertionError error = null;\n-        \n+        MockitoAssertionError error = null;\r\n+        \r\n         long startTime = System.currentTimeMillis();\r\n         while (System.currentTimeMillis() - startTime <= timeoutMillis) {\r\n             try {\r",
      "parent_sha": "ee69291df4613e46f4832ee8d12c18e35f8ecff3"
    }
  },
  {
    "oid": "e97ac672556f2ee6fcda19e71862d2136b335a42",
    "message": "Reworded for consistency 'private' -> 'internal'",
    "date": "2018-02-19T03:59:38Z",
    "url": "https://github.com/mockito/mockito/commit/e97ac672556f2ee6fcda19e71862d2136b335a42",
    "details": {
      "sha": "c302593e88b9a129abd07f05da722a7031c6b4fd",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mockito/mockito/blob/e97ac672556f2ee6fcda19e71862d2136b335a42/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/e97ac672556f2ee6fcda19e71862d2136b335a42/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=e97ac672556f2ee6fcda19e71862d2136b335a42",
      "patch": "@@ -98,7 +98,7 @@\n  *      <a href=\"#41\">41. (**new**) Advanced public API for framework integrations (Since 2.10.+)</a><br/>\n  *      <a href=\"#42\">42. (**new**) New API for integrations: listening on verification start events (Since 2.11.+)</a><br/>\n  *      <a href=\"#43\">43. (**new**) New API for integrations: <code>MockitoSession</code> is usable by testing frameworks (Since 2.15.+)</a><br/>\n- *      <a href=\"#44\">44. Deprecated <code>org.mockito.plugins.InstantiatorProvider</code> as it was returning a private API. it was replaced by <code>org.mockito.plugins.InstantiatorProvider2 (Since 2.15.3)</code></a><br/>\n+ *      <a href=\"#44\">44. Deprecated <code>org.mockito.plugins.InstantiatorProvider</code> as it was leaking internal API. it was replaced by <code>org.mockito.plugins.InstantiatorProvider2 (Since 2.15.3)</code></a><br/>\n  * </b>\n  *\n  * <h3 id=\"0\">0. <a class=\"meaningful_link\" href=\"#mockito2\" name=\"mockito2\">Migrating to Mockito 2</a></h3>\n@@ -1500,10 +1500,10 @@\n  * </ul>\n  *\n  * <h3 id=\"44\">44. <a class=\"meaningful_link\" href=\"#mockito_instantiator_provider_deprecation\" name=\"mockito_instantiator_provider_deprecation\">\n- *       Deprecated <code>org.mockito.plugins.InstantiatorProvider</code> as it was returning a private API. it was\n+ *       Deprecated <code>org.mockito.plugins.InstantiatorProvider</code> as it was leaking internal API. it was\n  *       replaced by <code>org.mockito.plugins.InstantiatorProvider2 (Since 2.15.3)</a></h3>\n  *\n- * <p>{@link org.mockito.plugins.InstantiatorProvider} returned a private API. Hence it was deprecated and replaced\n+ * <p>{@link org.mockito.plugins.InstantiatorProvider} returned an internal API. Hence it was deprecated and replaced\n  * by {@link org.mockito.plugins.InstantiatorProvider2}. Old {@link org.mockito.plugins.InstantiatorProvider\n  * instantiator providers} will continue to work, but it is recommended to switch to the new API.</p>\n  */",
      "parent_sha": "0bbcc7f9a0905c30340f876693d8baadc7658064"
    }
  },
  {
    "oid": "bd87a9717de30b4033229cd3be9a0659b4fcc378",
    "message": "tuned javadoc\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40594",
    "date": "2008-04-22T14:16:34Z",
    "url": "https://github.com/mockito/mockito/commit/bd87a9717de30b4033229cd3be9a0659b4fcc378",
    "details": {
      "sha": "5c4697e16f4aa390455e979a070f86f7635a88c0",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 29,
      "deletions": 12,
      "changes": 41,
      "blob_url": "https://github.com/mockito/mockito/blob/bd87a9717de30b4033229cd3be9a0659b4fcc378/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/bd87a9717de30b4033229cd3be9a0659b4fcc378/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=bd87a9717de30b4033229cd3be9a0659b4fcc378",
      "patch": "@@ -19,11 +19,26 @@\n \n /**\n  * Enables mocks creation, verification and stubbing.\n+ * \n+ * <h1>Contents</h1>\n+ * \n+ * <b>\n+ *         1. Let's verify some behaviour!\n+ *   <br/> 2. How about some stubbing?\n+ *   <br/> 3. Argument matchers\n+ *   <br/> 4. Verifying exact number of invocations / at least once / never\n+ *   <br/> 5. Stubbing void methods with exceptions\n+ *   <br/> 6. Verification in order\n+ *   <br/> 7. Making sure interaction(s) never happened on mock\n+ *   <br/> 8. Finding redundant invocations\n+ *   <br/> 9. Shorthand for mocks creation - &#064;Mock annotation\n+ * </b>\n+ * \n  * <p>\n  * Following examples mock List, because everyone knows its interface (methods like add(), get(), clear() will be used). \n  * <br>You probably wouldn't mock List class 'in real'.  \n  * \n- * <h3>Let's verify some behaviour!</h3>\n+ * <h3>1. Let's verify some behaviour!</h3>\n  * \n  * <pre>\n  * //Let's import Mockito statically so that code looks clearer\n@@ -45,7 +60,7 @@\n  * Once created, mock will remember all invocations. Then you can\n  * selectively verify whatever interaction you are interested in.\n  * \n- * <h3>How about some stubbing?</h3>\n+ * <h3>2. How about some stubbing?</h3>\n  * \n  * <pre>\n  * //You can mock concrete classes, not only interfaces\n@@ -64,7 +79,8 @@\n  * //following prints \"null\" because get(999) was not stubbed\n  * System.out.println(mockedList.get(999));\n  * \n- * //if you really want you can still verify stubbed invocation. In most cases it's not necessary, though. \n+ * //Stubbed invocations <b>are verified implicitly</b>. The execution flow of your own code does it completely <b>for free</b>. \n+ * //Although it is possible to verify a stubbed invocation, in majority of cases <b>it's not necessary</b>:\n  * verify(mockedList).get(0);\n  * </pre>\n  * \n@@ -85,11 +101,12 @@\n  * Last stubbing is more important - when you stubbed the same method with the same arguments many times.\n  * </li>\n  * <li>\n- * Although it's possible to verify stubbed methods it's a good pattern to focus on testing that stubbed value is used correctly.\n+ * Although it is possible to verify a stubbed invocation, in majority of cases <b>it's not necessary</b>.\n+ * Stubbed invocations <b>are verified implicitly</b>. The execution flow of your own code does it completely <b>for free</b>.\n  * </li> \n  * </ul>\n  * \n- * <h3>Argument matchers</h3>\n+ * <h3>3. Argument matchers</h3>\n  * \n  * <pre>\n  *  //stubbing using built-in anyInt() argument matcher\n@@ -122,7 +139,7 @@\n  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n  * </pre>\n  * \n- * <h3>Verifying exact number of invocations / at least once / never</h3>\n+ * <h3>4. Verifying exact number of invocations / at least once / never</h3>\n  *\n  *<pre>\n  *  //using mock \n@@ -154,7 +171,7 @@\n  * <p>\n  * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be omitted.\n  * \n- * <h3>Stubbing void methods with an exceptions</h3>\n+ * <h3>5. Stubbing void methods with exceptions</h3>\n  * \n  * <pre>\n  *   stubVoid(mockedList).toThrow(new RuntimeException()).on().clear();\n@@ -163,7 +180,7 @@\n  *   mockedList.clear();\n  * </pre>\n  *\n- * <h3>Verification in order</h3>\n+ * <h3>6. Verification in order</h3>\n  * \n  * <pre>\n  *   List firstMock = mock(List.class);\n@@ -186,7 +203,7 @@\n  * <p>\n  * Also, you can create InOrder object passing only mocks that relevant for in-order verification.  \n  *\n- * <h3>Making sure interaction(s) never happened on mock</h3>\n+ * <h3>7. Making sure interaction(s) never happened on mock</h3>\n  * \n  * <pre>\n  *   //using mocks - only mockOne is interacted\n@@ -211,7 +228,7 @@\n  * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but \n  * the first one is more explicit and can read better.\n  *\n- * <h3>Finding redundant invocations</h3>\n+ * <h3>8. Finding redundant invocations</h3>\n  * \n  * <pre>\n  *   //using mocks\n@@ -228,7 +245,7 @@\n  * See also {@link Mockito#never()} - it is more explicit and communicates an intent well. \n  * <p>\n  * \n- * <h3>Shorthand for mocks creation - &#064;Mock annotation</h3>\n+ * <h3>9. Shorthand for mocks creation - &#064;Mock annotation</h3>\n  * \n  * <ul>\n  * <li>Minimizes repetitive mock creation code.</li> \n@@ -299,7 +316,7 @@ static <T> T mock(Class<T> classToMock, String name) {\n      * <p>\n      * Last stubbing is more important - when you stubbed the same method with the same arguments many times.\n      * <p>\n-     * Although it's possible to verify stubbed methods it's a good pattern to focus on testing that stubbed value is used correctly.\n+     * Although it's possible to verify stubbed methods, bear in mind that <b>are verified for free</b>.\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * ",
      "parent_sha": "658e86cdf010b36d61fecab66fe4df3401f5b22b"
    }
  },
  {
    "oid": "89698baaebdf6954324d5bb252e49da2f7bf860a",
    "message": "Optimize `TypeSafeMatching` iteration over class methods (#2729)\n\n`Class.getMethods` is an inefficient method call which is being called on\r\neach mock invocation. It ends up constructing new `Method` objects for\r\neach method on the class, and this can dominate the overall performance\r\nof Mockito mocks. This commit caches the result of the computation.\r\n\r\nOnce concern is that this change uses some static state. I considered:\r\n\r\n- Instance state - based on where this type is constructed it seemed\r\n  like it'd be a big imposition on code readability elsewhere.\r\n- Weakly referenced map. Mockito has a type for this, but the\r\n  constructor of that type produces a Thread with which to clean up.\r\n\r\nBoth of these seemed like overkill compared to the overhead expected\r\nin the real world (which should be on the order of a few kilobytes of\r\nRAM at most).\r\n\r\nFixes #2723",
    "date": "2022-08-13T14:59:56Z",
    "url": "https://github.com/mockito/mockito/commit/89698baaebdf6954324d5bb252e49da2f7bf860a",
    "details": {
      "sha": "8f8af6dbdb0a220b479c19d2a456eae14fd89743",
      "filename": "src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java",
      "status": "modified",
      "additions": 26,
      "deletions": 3,
      "changes": 29,
      "blob_url": "https://github.com/mockito/mockito/blob/89698baaebdf6954324d5bb252e49da2f7bf860a/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Finvocation%2FTypeSafeMatching.java",
      "raw_url": "https://github.com/mockito/mockito/raw/89698baaebdf6954324d5bb252e49da2f7bf860a/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Finvocation%2FTypeSafeMatching.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Finvocation%2FTypeSafeMatching.java?ref=89698baaebdf6954324d5bb252e49da2f7bf860a",
      "patch": "@@ -4,15 +4,26 @@\n  */\n package org.mockito.internal.invocation;\n \n-import java.lang.reflect.Method;\n-\n import org.mockito.ArgumentMatcher;\n \n+import java.lang.reflect.Method;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n public class TypeSafeMatching implements ArgumentMatcherAction {\n \n     private static final ArgumentMatcherAction TYPE_SAFE_MATCHING_ACTION = new TypeSafeMatching();\n \n+    /**\n+     * This cache is in theory unbounded. However, its max size is bounded by the number of types of argument matchers\n+     * that are both in the system and being used, which is expected to bound the cache's size to a low number\n+     * (<200) in all but the most contrived cases, and form a small percentage of the overall memory usage of those\n+     * classes.\n+     */\n+    private static final ConcurrentMap<Class<?>, Class<?>> argumentTypeCache =\n+            new ConcurrentHashMap<>();\n+\n     private TypeSafeMatching() {}\n \n     public static ArgumentMatcherAction matchesTypeSafe() {\n@@ -39,11 +50,23 @@ private static boolean isCompatible(ArgumentMatcher<?> argumentMatcher, Object a\n         return expectedArgumentType.isInstance(argument);\n     }\n \n+    private static Class<?> getArgumentType(ArgumentMatcher<?> matcher) {\n+        Class<?> argumentMatcherType = matcher.getClass();\n+        Class<?> cached = argumentTypeCache.get(argumentMatcherType);\n+        // Avoids a lambda allocation on invocations >=2 for worse perf on invocation 1.\n+        if (cached != null) {\n+            return cached;\n+        } else {\n+            return argumentTypeCache.computeIfAbsent(\n+                    argumentMatcherType, unusedKey -> getArgumentTypeUncached(matcher));\n+        }\n+    }\n+\n     /**\n      * Returns the type of {@link ArgumentMatcher#matches(Object)} of the given\n      * {@link ArgumentMatcher} implementation.\n      */\n-    private static Class<?> getArgumentType(ArgumentMatcher<?> argumentMatcher) {\n+    private static Class<?> getArgumentTypeUncached(ArgumentMatcher<?> argumentMatcher) {\n         Method[] methods = argumentMatcher.getClass().getMethods();\n \n         for (Method method : methods) {",
      "parent_sha": "70c1fe9f377ff55826633d590991441bc9339c71"
    }
  },
  {
    "oid": "069cbd634869bd6112dfe230c666f225351548db",
    "message": "this is how I see reporting failures\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4050",
    "date": "2007-11-22T23:07:49Z",
    "url": "https://github.com/mockito/mockito/commit/069cbd634869bd6112dfe230c666f225351548db",
    "details": {
      "sha": "087c7addbcbfd46be0d5e0d304535457c33406ba",
      "filename": "test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/mockito/mockito/blob/069cbd634869bd6112dfe230c666f225351548db/test%2Forg%2Fmockito%2Fusage%2Fbinding%2FIncorectBindingPuzzleFixedTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/069cbd634869bd6112dfe230c666f225351548db/test%2Forg%2Fmockito%2Fusage%2Fbinding%2FIncorectBindingPuzzleFixedTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockito%2Fusage%2Fbinding%2FIncorectBindingPuzzleFixedTest.java?ref=069cbd634869bd6112dfe230c666f225351548db",
      "patch": "@@ -48,8 +48,11 @@ public void overriddenInterfaceMethodNotWorking() throws Exception {\n             Mockito.verify(derivedMock).print(message);\r\n         } catch (VerificationAssertionError error) {\r\n             String expected = \"\\n\" +\r\n-            \t\t\"Not invoked: DerivedInterface.print(Message)\" +\r\n-            \t\t\"But found: DerivedInterface.print(BaseMessage)\";\r\n+            \t\t\"Failure on verify:\" +\r\n+            \t\t\"\\n\" +\r\n+            \t\t\"Expected: DerivedInterface.print(Message)\" +\r\n+            \t\t\"\\n\" +\r\n+            \t\t\"Actual: DerivedInterface.print(BaseMessage)\";\r\n             assertEquals(expected, error.getMessage());\r\n         }\r\n     }\r",
      "parent_sha": "005bbca2e9ce3430847e12ee3543f445efc54675"
    }
  },
  {
    "oid": "2c9363bf5c1fd1bf297e2a0915bcac6ca5c56c26",
    "message": "removed unneeded deserialization as it isn't affected by concurrency problems",
    "date": "2013-01-03T09:00:29Z",
    "url": "https://github.com/mockito/mockito/commit/2c9363bf5c1fd1bf297e2a0915bcac6ca5c56c26",
    "details": {
      "sha": "d52d49fc57787259cc058e8440ee12eda8e26378",
      "filename": "test/org/mockitousage/serialization/ParallelSerializationTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 46,
      "changes": 48,
      "blob_url": "https://github.com/mockito/mockito/blob/2c9363bf5c1fd1bf297e2a0915bcac6ca5c56c26/test%2Forg%2Fmockitousage%2Fserialization%2FParallelSerializationTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/2c9363bf5c1fd1bf297e2a0915bcac6ca5c56c26/test%2Forg%2Fmockitousage%2Fserialization%2FParallelSerializationTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitousage%2Fserialization%2FParallelSerializationTest.java?ref=2c9363bf5c1fd1bf297e2a0915bcac6ca5c56c26",
      "patch": "@@ -2,18 +2,11 @@\n \n import org.junit.Test;\n import org.mockitousage.IMethods;\n-import org.mockitoutil.SimplePerRealmReloadingClassLoader;\n import org.mockitoutil.SimpleSerializationUtil;\n \n-import java.io.ByteArrayInputStream;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.CyclicBarrier;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n+import java.util.concurrent.*;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.withSettings;\n@@ -43,8 +36,7 @@ public Object call() throws Exception {\n                         barrier_that_will_wait_until_threads_are_ready.await();\n                         iMethods.arrayReturningMethod();\n \n-                        byte[] mockBytes = SimpleSerializationUtil.serializeMock(iMethods).toByteArray();\n-                        return read_stream_and_deserialize_it_in_class_loader_B(mockBytes);\n+                        return SimpleSerializationUtil.serializeMock(iMethods).toByteArray();\n                     }\n                 }));\n \n@@ -63,40 +55,4 @@ public Object call() throws Exception {\n             }\n         }\n     }\n-\n-\n-\n-    private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) throws Exception {\n-        return new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), isolating_test_classes())\n-                .doInRealm(\n-                        \"org.mockitousage.serialization.AcrossClassLoaderSerializationTest$ReadStreamAndDeserializeIt\",\n-                        new Class[]{ byte[].class },\n-                        new Object[]{ bytes }\n-                );\n-    }\n-\n-\n-    private SimplePerRealmReloadingClassLoader.ReloadClassPredicate isolating_test_classes() {\n-        return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {\n-            public boolean acceptReloadOf(String qualifiedName) {\n-                return qualifiedName.contains(\"org.mockitousage\")\n-                        || qualifiedName.contains(\"org.mockitoutil\");\n-            }\n-        };\n-    }\n-\n-\n-    // see read_stream_and_deserialize_it_in_class_loader_B\n-    public static class ReadStreamAndDeserializeIt implements Callable<Object> {\n-        private byte[] bytes;\n-\n-        public ReadStreamAndDeserializeIt(byte[] bytes) {\n-            this.bytes = bytes;\n-        }\n-\n-        public Object call() throws Exception {\n-            ByteArrayInputStream unserialize = new ByteArrayInputStream(bytes);\n-            return SimpleSerializationUtil.deserializeMock(unserialize, IMethods.class);\n-        }\n-    }\n }",
      "parent_sha": "58bd18cb1ceb31981b7bddc3821d8ca4117791fc"
    }
  },
  {
    "oid": "677e59ec42a3c077a093c5636ff68ef698389989",
    "message": "ValuePrinter small improvements\n * added private construtor\n * removed unneccessary 'else' statements\n * added missing type arguments\n * removed handling of a null Iterator in printValues(), if null is\npassed a NPE is thrown now to indicate a bug",
    "date": "2016-11-25T21:11:21Z",
    "url": "https://github.com/mockito/mockito/commit/677e59ec42a3c077a093c5636ff68ef698389989",
    "details": {
      "sha": "67a8953fe9d4adf385b089ee45fb0cb86a765c90",
      "filename": "src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java",
      "status": "modified",
      "additions": 26,
      "deletions": 17,
      "changes": 43,
      "blob_url": "https://github.com/mockito/mockito/blob/677e59ec42a3c077a093c5636ff68ef698389989/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fmatchers%2Ftext%2FValuePrinter.java",
      "raw_url": "https://github.com/mockito/mockito/raw/677e59ec42a3c077a093c5636ff68ef698389989/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fmatchers%2Ftext%2FValuePrinter.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fmatchers%2Ftext%2FValuePrinter.java?ref=677e59ec42a3c077a093c5636ff68ef698389989",
      "patch": "@@ -14,6 +14,8 @@\n  * Inspired on hamcrest. Used for printing arguments in verification errors.\n  */\n public class ValuePrinter {\n+    \n+    private ValuePrinter(){}\n \n     /**\n      * Prints given value so that it is neatly readable by humans.\n@@ -22,25 +24,35 @@ public class ValuePrinter {\n     public static String print(Object value) {\n         if (value == null) {\n             return \"null\";\n-        } else if (value instanceof String) {\n-            return \"\\\"\" + value + \"\\\"\";\n-        } else if (value instanceof Character) {\n+        }\n+        if (value instanceof String) {\n+            return '\"' + value.toString() + '\"';\n+        }\n+        if (value instanceof Character) {\n             return printChar((Character) value);\n-        } else if (value instanceof Long) {\n+        }\n+        if (value instanceof Long) {\n             return value + \"L\";\n-        } else if (value instanceof Double) {\n+        }\n+        if (value instanceof Double) {\n             return value + \"d\";\n-        } else if (value instanceof Float) {\n+        }\n+        if (value instanceof Float) {\n             return value + \"f\";\n-        } else if (value instanceof Short) {\n+        }\n+        if (value instanceof Short) {\n             return \"(short) \" + value;\n-        } else if (value instanceof Byte) {\n+        }\n+        if (value instanceof Byte) {\n             return String.format(\"(byte) 0x%02X\", (Byte) value);\n-        } else if (value instanceof Map) {\n-            return printMap((Map) value);\n-        } else if (value.getClass().isArray()) {\n-            return printValues(\"[\", \", \", \"]\", new org.mockito.internal.matchers.text.ArrayIterator(value));\n-        } else if (value instanceof FormattedText) {\n+        }\n+        if (value instanceof Map) {\n+            return printMap((Map<?, ?>) value);\n+        }\n+        if (value.getClass().isArray()) {\n+            return printValues(\"[\", \", \", \"]\", new ArrayIterator(value));\n+        }\n+        if (value instanceof FormattedText) {\n             return (((FormattedText) value).getText());\n         }\n \n@@ -70,7 +82,7 @@ private static String printMap(Map<?,?> map) {\n      *\n      * @return neatly formatted value list\n      */\n-    public static String printValues(String start, String separator, String end, Iterator values) {\n+    public static String printValues(String start, String separator, String end, Iterator<?> values) {\n         if(start == null){\n             start = \"(\";\n         }\n@@ -80,9 +92,6 @@ public static String printValues(String start, String separator, String end, Ite\n         if (end == null){\n             end = \")\";\n         }\n-        if (values == null){\n-            values = new ArrayIterator(new String[]{\"\"});\n-        }\n \n         StringBuilder sb = new StringBuilder(start);\n         while(values.hasNext()) {",
      "parent_sha": "b904694ca3dd8ffe7879885d8197fb59f88c9bb3"
    }
  },
  {
    "oid": "ae9274e0756c80330b2348617531b8ef3bd92ca5",
    "message": "Improved an internal test utility\n\n- reduced duplication\n- added new assertion method I will need today",
    "date": "2017-01-29T04:22:25Z",
    "url": "https://github.com/mockito/mockito/commit/ae9274e0756c80330b2348617531b8ef3bd92ca5",
    "details": {
      "sha": "9cfcb59656bc5602888293a00c586f3621efd4a3",
      "filename": "src/test/java/org/mockitoutil/JUnitResultAssert.java",
      "status": "modified",
      "additions": 36,
      "deletions": 13,
      "changes": 49,
      "blob_url": "https://github.com/mockito/mockito/blob/ae9274e0756c80330b2348617531b8ef3bd92ca5/src%2Ftest%2Fjava%2Forg%2Fmockitoutil%2FJUnitResultAssert.java",
      "raw_url": "https://github.com/mockito/mockito/raw/ae9274e0756c80330b2348617531b8ef3bd92ca5/src%2Ftest%2Fjava%2Forg%2Fmockitoutil%2FJUnitResultAssert.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitoutil%2FJUnitResultAssert.java?ref=ae9274e0756c80330b2348617531b8ef3bd92ca5",
      "patch": "@@ -24,28 +24,50 @@ public void isSuccessful() {\n             return;\n         }\n \n-        StringBuilder sb = new StringBuilder(\"There were \" + result.getFailures().size() + \" test failures:\\n\");\n-        int count = 0;\n-        for (Failure f : result.getFailures()) {\n-            sb.append(\"  <-----> \").append(++count).append(\". \").append(f.getTrace()).append(\"\\n\");\n-        }\n-        throw new AssertionError(sb.toString());\n+        throw new AssertionError(formatFailures(result.getFailures()));\n     }\n \n     /**\n      * @param expectedFailureCount - expected number of failures\n      * @param expectedException - the exception of each failure\n      */\n     public JUnitResultAssert fails(int expectedFailureCount, Class expectedException) {\n+        fails(expectedFailureCount);\n+        for (Failure f : result.getFailures()) {\n+            if (!expectedException.isInstance(f.getException())) {\n+                throw new AssertionError(\"Incorrect failure type, expected: \" + expectedException + \", actual: \" + f.getException().getClass().getSimpleName() + \"\\n\" +\n+                        formatFailures(result.getFailures()));\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * @param expectedFailureCount - exact number of expected failures\n+     */\n+    public JUnitResultAssert fails(int expectedFailureCount) {\n         if (result.getFailures().size() != expectedFailureCount) {\n             throw new AssertionError(\"Wrong number of failures, expected: \" + expectedFailureCount + \", actual: \" + result.getFailures().size() + \"\\n\" +\n                     formatFailures(result.getFailures()));\n         }\n+        return this;\n+    }\n+\n+    /**\n+     * @param expectedExceptions - failures must match the supplied sequence in order,\n+     *                           if supplied input is empty, this method is a no-op\n+     */\n+    public JUnitResultAssert failsExactly(Class ... expectedExceptions) {\n+        fails(expectedExceptions.length);\n+        int i = 0;\n         for (Failure f : result.getFailures()) {\n-            if (!expectedException.isInstance(f.getException())) {\n-                throw new AssertionError(\"Incorrect failure type, expected: \" + expectedException + \", actual: \" + f.getException().getClass().getSimpleName() + \"\\n\" +\n-                        formatFailures(result.getFailures()));\n+            if (!expectedExceptions[i].isInstance(f.getException())) {\n+                throw new AssertionError(\"Actual failure #\" + (i+1)\n+                        + \" should be of type: \" + expectedExceptions[i].getSimpleName()\n+                        + \" but is of type: \" + f.getException().getClass().getSimpleName()\n+                        + \"\\n\" + formatFailures(result.getFailures()));\n             }\n+            i++;\n         }\n         return this;\n     }\n@@ -94,12 +116,13 @@ private static String formatFailures(List<Failure> failures) {\n         if (failures.isEmpty()) {\n             return \"<no failures>\";\n         }\n-        int count = 1;\n-        StringBuilder out = new StringBuilder(\"Failures:\\n\");\n+        StringBuilder sb = new StringBuilder(\"There were \" + failures.size() + \" test failures:\\n\");\n+        int count = 0;\n         for (Failure f : failures) {\n-            out.append(count++).append(\". \").append(f.getTrace());\n+            sb.append(\"  <-----> \").append(++count).append(\". \").append(f.getTrace()).append(\"\\n\");\n         }\n-        return out.toString();\n+\n+        return sb.toString();\n     }\n \n     /**",
      "parent_sha": "465ea863991c995a66e97179c2b33f66ea91811b"
    }
  },
  {
    "oid": "0d50a3e77ebdd21e4fd250f55e227633c03077c4",
    "message": "Tidy-up, removed some duplication",
    "date": "2014-12-02T09:47:57Z",
    "url": "https://github.com/mockito/mockito/commit/0d50a3e77ebdd21e4fd250f55e227633c03077c4",
    "details": {
      "sha": "61e62d83f770095fd23081c4d565088d03fc4d8d",
      "filename": "src/org/mockito/internal/configuration/SpyAnnotationEngine.java",
      "status": "modified",
      "additions": 69,
      "deletions": 78,
      "changes": 147,
      "blob_url": "https://github.com/mockito/mockito/blob/0d50a3e77ebdd21e4fd250f55e227633c03077c4/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FSpyAnnotationEngine.java",
      "raw_url": "https://github.com/mockito/mockito/raw/0d50a3e77ebdd21e4fd250f55e227633c03077c4/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FSpyAnnotationEngine.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FSpyAnnotationEngine.java?ref=0d50a3e77ebdd21e4fd250f55e227633c03077c4",
      "patch": "@@ -2,83 +2,74 @@\n  * Copyright (c) 2007 Mockito contributors\n  * This program is made available under the terms of the MIT License.\n  */\n-package org.mockito.internal.configuration;\r\n-\r\n-import static org.mockito.Mockito.withSettings;\n+package org.mockito.internal.configuration;\n+\n+import org.mockito.*;\n+import org.mockito.configuration.AnnotationEngine;\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.util.MockUtil;\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Modifier;\n \n-import org.mockito.Captor;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.MockSettings;\n-import org.mockito.Mockito;\n-import org.mockito.Spy;\n-import org.mockito.configuration.AnnotationEngine;\n-import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.util.MockUtil;\n-\r\n-/**\r\n- * Process fields annotated with &#64;Spy.\r\n- *\r\n- * <p>\r\n- * Will try transform the field in a spy as with <code>Mockito.spy()</code>.\r\n- * </p>\r\n- *\r\n- * <p>\r\n- * If the field is not initialized, will try to initialize it, with a no-arg constructor.\r\n- * </p>\r\n- *\r\n- * <p>\r\n- * If the field is also annotated with the <strong>compatible</strong> &#64;InjectMocks then the field will be ignored,\r\n- * The injection engine will handle this specific case.\r\n- * </p>\r\n- *\r\n- * <p>This engine will fail, if the field is also annotated with incompatible Mockito annotations.\r\n- */\r\n-@SuppressWarnings({\"unchecked\"})\r\n-public class SpyAnnotationEngine implements AnnotationEngine {\r\n-\r\n-    public Object createMockFor(Annotation annotation, Field field) {\r\n-        return null;\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"deprecation\") // for MockitoAnnotations.Mock\r\n-    public void process(Class<?> context, Object testInstance) {\r\n-        Field[] fields = context.getDeclaredFields();\r\n-        for (Field field : fields) {\r\n-            if (field.isAnnotationPresent(Spy.class) && !field.isAnnotationPresent(InjectMocks.class)) {\r\n+import static org.mockito.Mockito.withSettings;\n+\n+/**\n+ * Process fields annotated with &#64;Spy.\n+ *\n+ * <p>\n+ * Will try transform the field in a spy as with <code>Mockito.spy()</code>.\n+ * </p>\n+ *\n+ * <p>\n+ * If the field is not initialized, will try to initialize it, with a no-arg constructor.\n+ * </p>\n+ *\n+ * <p>\n+ * If the field is also annotated with the <strong>compatible</strong> &#64;InjectMocks then the field will be ignored,\n+ * The injection engine will handle this specific case.\n+ * </p>\n+ *\n+ * <p>This engine will fail, if the field is also annotated with incompatible Mockito annotations.\n+ */\n+@SuppressWarnings({\"unchecked\"})\n+public class SpyAnnotationEngine implements AnnotationEngine {\n+\n+    public Object createMockFor(Annotation annotation, Field field) {\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"deprecation\") // for MockitoAnnotations.Mock\n+    public void process(Class<?> context, Object testInstance) {\n+        Field[] fields = context.getDeclaredFields();\n+        for (Field field : fields) {\n+            if (field.isAnnotationPresent(Spy.class) && !field.isAnnotationPresent(InjectMocks.class)) {\n                 assertNoIncompatibleAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\n-                field.setAccessible(true);\r\n-                Object instance = null;\r\n-                try {\r\n-                    instance = field.get(testInstance);\r\n-                    if (new MockUtil().isMock(instance)) {\r\n-                        // instance has been spied earlier\r\n-                        // for example happens when MockitoAnnotations.initMocks is called two times.\r\n-                        Mockito.reset(instance);\r\n-                    } else if (instance != null) {\r\n-                        field.set(testInstance, Mockito.mock(instance.getClass(), withSettings()\r\n-                                .spiedInstance(instance)\r\n-                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)\r\n-                                .name(field.getName())));\r\n+                field.setAccessible(true);\n+                Object instance;\n+                try {\n+                    instance = field.get(testInstance);\n+                    if (new MockUtil().isMock(instance)) {\n+                        // instance has been spied earlier\n+                        // for example happens when MockitoAnnotations.initMocks is called two times.\n+                        Mockito.reset(instance);\n+                    } else if (instance != null) {\n+                        field.set(testInstance, Mockito.mock(instance.getClass(), withSettings()\n+                                .spiedInstance(instance)\n+                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)\n+                                .name(field.getName())));\n                     } else {\n                     \tfield.set(testInstance, newSpyInstance(testInstance, field));\n-                    }\r\n-                } catch (IllegalAccessException e) {\r\n-                    throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\r\n-                } catch (InstantiationException e) {\n-                    throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n-                } catch (InvocationTargetException e) {\n-                    throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n-                }\r\n-            }\r\n-        }\r\n+                    }\n+                } catch (Exception e) {\n+                    throw new MockitoException(\"Problems initiating @Spy annotated field '\" + field.getName() + \"'\", e);\n+                }\n+            }\n+        }\n     }\n   \n     private static Object newSpyInstance(Object testInstance, Field field)\n@@ -116,14 +107,14 @@ private static Object newSpyInstance(Object testInstance, Field field)\n     \t} catch (NoSuchMethodException noDefaultConstructor) {\n     \t\tthrow new MockitoException(\"0-arg constructor is required to spy \" + type);\n     \t}\n-    }\r\n-    \r\n-    //TODO duplicated elsewhere\r\n-    void assertNoIncompatibleAnnotations(Class annotation, Field field, Class... undesiredAnnotations) {\r\n-        for (Class u : undesiredAnnotations) {\r\n-            if (field.isAnnotationPresent(u)) {\r\n-                new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), annotation.getClass().getSimpleName());\r\n-            }\r\n-        }        \r\n-    }    \r\n-}\r\n+    }\n+    \n+    //TODO duplicated elsewhere\n+    void assertNoIncompatibleAnnotations(Class annotation, Field field, Class... undesiredAnnotations) {\n+        for (Class u : undesiredAnnotations) {\n+            if (field.isAnnotationPresent(u)) {\n+                new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), annotation.getClass().getSimpleName());\n+            }\n+        }        \n+    }    \n+}",
      "parent_sha": "9325641b6b2862b65e65c8b59f70f5f1a49f7b4b"
    }
  },
  {
    "oid": "1ae2386f0a19739165ded763ae15dfe6527e56ae",
    "message": "Improved the test\n\nSo that it is less susceptible to changes of the format of the stubbing information",
    "date": "2016-04-18T00:40:27Z",
    "url": "https://github.com/mockito/mockito/commit/1ae2386f0a19739165ded763ae15dfe6527e56ae",
    "details": {
      "sha": "cd1714e52f25ac265e23dc65aa9d3544a4488fc7",
      "filename": "src/test/java/org/mockito/internal/junit/JUnitRuleTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/mockito/mockito/blob/1ae2386f0a19739165ded763ae15dfe6527e56ae/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/1ae2386f0a19739165ded763ae15dfe6527e56ae/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fjunit%2FJUnitRuleTest.java?ref=1ae2386f0a19739165ded763ae15dfe6527e56ae",
      "patch": "@@ -51,14 +51,14 @@ public void shouldWarnAboutUnusedStubsWhenFailed() throws Throwable {\n             jUnitRule.apply(new Statement() {\n                 public void evaluate() throws Throwable {\n                     IMethods mock = Mockito.mock(IMethods.class);\n-                    Mockito.when(mock.simpleMethod(\"foo\")).thenReturn(\"bar\");\n+                    declareUnusedStub(mock);\n                     throw new AssertionError(\"x\");\n                 }\n             }, injectTestCase).evaluate();\n             fail();\n         } catch (AssertionError e) {\n             assertEquals(\"x\", e.getMessage());\n-            assertTrue(logger.getLoggedInfo().contains(\"This stubbing was never used\"));\n+            assertTrue(logger.getLoggedInfo().contains(\"declareUnusedStub\"));\n         }\n     }\n \n@@ -67,13 +67,17 @@ public void shouldNotWarnAboutUnusedStubsWhenPassed() throws Throwable {\n         jUnitRule.apply(new Statement() {\n             public void evaluate() throws Throwable {\n                 IMethods mock = Mockito.mock(IMethods.class);\n-                Mockito.when(mock.simpleMethod(\"foo\")).thenReturn(\"bar\");\n+                declareUnusedStub(mock);\n             }\n         }, injectTestCase).evaluate();\n \n         assertEquals(\"\", logger.getLoggedInfo());\n     }\n \n+    private static void declareUnusedStub(IMethods mock) {\n+        Mockito.when(mock.simpleMethod(\"foo\")).thenReturn(\"bar\");\n+    }\n+\n     private static class DummyStatement extends Statement {\n         @Override\n         public void evaluate() throws Throwable {",
      "parent_sha": "176caf1ce4a23099c3f6a975cd3e05f6f8dc3c8b"
    }
  },
  {
    "oid": "6bdc52da79cadc0bc4f4e0b514e9f89ffcc170cc",
    "message": "Reformat",
    "date": "2014-10-09T14:10:27Z",
    "url": "https://github.com/mockito/mockito/commit/6bdc52da79cadc0bc4f4e0b514e9f89ffcc170cc",
    "details": {
      "sha": "82db6c99434840cdf53858425dbcb473c0a9f5cf",
      "filename": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/mockito/mockito/blob/6bdc52da79cadc0bc4f4e0b514e9f89ffcc170cc/src%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fdefaultanswers%2FReturnsDeepStubs.java",
      "raw_url": "https://github.com/mockito/mockito/raw/6bdc52da79cadc0bc4f4e0b514e9f89ffcc170cc/src%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fdefaultanswers%2FReturnsDeepStubs.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fdefaultanswers%2FReturnsDeepStubs.java?ref=6bdc52da79cadc0bc4f4e0b514e9f89ffcc170cc",
      "patch": "@@ -4,10 +4,6 @@\n  */\r\n package org.mockito.internal.stubbing.defaultanswers;\r\n \r\n-import static org.mockito.Mockito.withSettings;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.Serializable;\r\n import org.mockito.MockSettings;\r\n import org.mockito.Mockito;\r\n import org.mockito.internal.InternalMockHandler;\r\n@@ -18,8 +14,14 @@\n import org.mockito.internal.util.MockUtil;\r\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\r\n import org.mockito.invocation.InvocationOnMock;\r\n+import org.mockito.mock.MockCreationSettings;\r\n import org.mockito.stubbing.Answer;\r\n \r\n+import java.io.IOException;\r\n+import java.io.Serializable;\r\n+\r\n+import static org.mockito.Mockito.withSettings;\r\n+\r\n /**\r\n  * Returning deep stub implementation.\r\n  *\r\n@@ -39,7 +41,7 @@\n  * @see org.mockito.Answers#RETURNS_DEEP_STUBS\r\n  */\r\n public class ReturnsDeepStubs implements Answer<Object>, Serializable {\r\n-    \r\n+\r\n     private static final long serialVersionUID = -7105341425736035847L;\r\n \r\n     public Object answer(InvocationOnMock invocation) throws Throwable {\r\n@@ -55,15 +57,15 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n     }\r\n \r\n     private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\r\n-    \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\r\n-    \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\r\n+        InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\r\n+        InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\r\n \r\n         // matches invocation for verification\r\n         for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\r\n-    \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\r\n-    \t\t\treturn stubbedInvocationMatcher.answer(invocation);\r\n-    \t\t}\r\n-\t\t}\r\n+            if (container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\r\n+                return stubbedInvocationMatcher.answer(invocation);\r\n+            }\r\n+        }\r\n \r\n         // record deep stub answer\r\n         return recordDeepStubAnswer(newDeepStubMock(returnTypeGenericMetadata), container);\r",
      "parent_sha": "b00a6d252f87c886e5f8830bbdb6c1af2bd0ee9c"
    }
  },
  {
    "oid": "532306b6b736448b0eaa3870b9cb5f869437bde9",
    "message": "Another Javadoc fix",
    "date": "2011-11-24T09:07:13Z",
    "url": "https://github.com/mockito/mockito/commit/532306b6b736448b0eaa3870b9cb5f869437bde9",
    "details": {
      "sha": "ab2fedfa0ee3d32b7c2ffedb540ea19ce71ad5ad",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/532306b6b736448b0eaa3870b9cb5f869437bde9/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/532306b6b736448b0eaa3870b9cb5f869437bde9/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=532306b6b736448b0eaa3870b9cb5f869437bde9",
      "patch": "@@ -1713,7 +1713,7 @@ public static InOrder inOrder(Object... mocks) {\n      *  verifyNoMoreInteractions(ignoreStubs(mock1, mock2));\r\n      *\r\n      *  //Remember that ignoreStubs() <b>*changes*</b> the input mocks and returns them for convenience.\r\n-     * <pre class=\"code\"><code class=\"java\">\r\n+     * </code></pre>\r\n      * Ignoring stubs can be used with <b>verification in order</b>:\r\n      * <pre class=\"code\"><code class=\"java\">\r\n      *  List list = mock(List.class);\r",
      "parent_sha": "7b130db2dfd73edad4bfef04ee8c78f748302d05"
    }
  },
  {
    "oid": "0e8d5f0b9dafdaccafe34e8bca81e43809bfe9d4",
    "message": "Refactoring of deprecation warnings\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401912",
    "date": "2010-03-14T21:20:23Z",
    "url": "https://github.com/mockito/mockito/commit/0e8d5f0b9dafdaccafe34e8bca81e43809bfe9d4",
    "details": {
      "sha": "f97a95d75bbc087d46f50d202850bfa3d60c6d69",
      "filename": "src/org/mockito/internal/configuration/SpyAnnotationEngine.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/mockito/mockito/blob/0e8d5f0b9dafdaccafe34e8bca81e43809bfe9d4/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FSpyAnnotationEngine.java",
      "raw_url": "https://github.com/mockito/mockito/raw/0e8d5f0b9dafdaccafe34e8bca81e43809bfe9d4/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FSpyAnnotationEngine.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FSpyAnnotationEngine.java?ref=0e8d5f0b9dafdaccafe34e8bca81e43809bfe9d4",
      "patch": "@@ -16,14 +16,15 @@\n import org.mockito.exceptions.base.MockitoException;\r\n import org.mockito.internal.util.MockUtil;\r\n \r\n-@SuppressWarnings({\"deprecation\", \"unchecked\"})\r\n+@SuppressWarnings({\"unchecked\"})\r\n public class SpyAnnotationEngine implements AnnotationEngine {\r\n \r\n     @Override\r\n     public Object createMockFor(Annotation annotation, Field field) {\r\n         return null;\r\n     }\r\n     \r\n+    @SuppressWarnings(\"deprecation\")\r\n     @Override\r\n     public void process(Class<?> context, Object testClass) {\r\n         Field[] fields = context.getDeclaredFields();\r",
      "parent_sha": "fcb244157a0c14d15f291564a6b95f6f65ce1dfd"
    }
  },
  {
    "oid": "1e569e1701755ba9fcf28e060e1bb0f8e2205520",
    "message": "Improved the javadoc, small refactoring.",
    "date": "2014-10-07T16:38:18Z",
    "url": "https://github.com/mockito/mockito/commit/1e569e1701755ba9fcf28e060e1bb0f8e2205520",
    "details": {
      "sha": "c3c667703f38013754905fac0c0f2187e2315af9",
      "filename": "src/org/mockito/junit/MockitoJUnitRule.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/mockito/mockito/blob/1e569e1701755ba9fcf28e060e1bb0f8e2205520/src%2Forg%2Fmockito%2Fjunit%2FMockitoJUnitRule.java",
      "raw_url": "https://github.com/mockito/mockito/raw/1e569e1701755ba9fcf28e060e1bb0f8e2205520/src%2Forg%2Fmockito%2Fjunit%2FMockitoJUnitRule.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Fjunit%2FMockitoJUnitRule.java?ref=1e569e1701755ba9fcf28e060e1bb0f8e2205520",
      "patch": "@@ -39,11 +39,14 @@\n  */\n public class MockitoJUnitRule implements TestRule {\n \n-    private JUnitRule jUnitRule;\n+    private final JUnitRule jUnitRule;\n \n-    public MockitoJUnitRule(Object object) {\n-        checkNotNull(object, \"Rule target\");\n-        this.jUnitRule = new JUnitRule(object);\n+    /**\n+     * @param testInstance the test class instance where the rule is declared. Cannot be null.\n+     */\n+    public MockitoJUnitRule(Object testInstance) {\n+        checkNotNull(testInstance, \"mockito JUnit rule test instance\");\n+        this.jUnitRule = new JUnitRule(testInstance);\n     }\n \n     public Statement apply(final Statement base, Description description) {",
      "parent_sha": "d665c1ca64e65a4b64a220cfc9dc3ee066a139f2"
    }
  },
  {
    "oid": "66ba646d17dba39652e73d2215e6f47af2d9f093",
    "message": "Tweaks to the main Mockito javadocs to aid readability",
    "date": "2015-10-29T05:42:50Z",
    "url": "https://github.com/mockito/mockito/commit/66ba646d17dba39652e73d2215e6f47af2d9f093",
    "details": {
      "sha": "25db83abee8d906f0fa4979de9ea26f769f9aff5",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 27,
      "deletions": 27,
      "changes": 54,
      "blob_url": "https://github.com/mockito/mockito/blob/66ba646d17dba39652e73d2215e6f47af2d9f093/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/66ba646d17dba39652e73d2215e6f47af2d9f093/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=66ba646d17dba39652e73d2215e6f47af2d9f093",
      "patch": "@@ -19,11 +19,11 @@\n \n /**\n  * <p align=\"left\"><img src=\"logo.png\" srcset=\"logo@2x.png 2x\" alt=\"Mockito logo\"/></p>\n- * Mockito library enables mocks creation, verification and stubbing.\n+ * The Mockito library enables mock creation, verification and stubbing.\n  * <p>\n  * This javadoc content is also available on the <a href=\"http://mockito.org\">http://mockito.org</a> web page.\n  * All documentation is kept in javadocs because it guarantees consistency between what's on the web and what's in the source code.\n- * It allows to access documentation straight from the IDE even if you work offline.\n+ * It allows access to documentation straight from the IDE even if you work offline.\n  * It motivates Mockito developers to keep documentation up-to-date with the code that they write,\n  * every day, with every commit.\n  *\n@@ -70,10 +70,10 @@\n  *\n  * <h3 id=\"0\">0. <a class=\"meaningful_link\" href=\"#verification\">Migrating to 2.0</a></h3>\n  *\n- * In order to continue improving Mockito and further improve unit testing experience we want you to upgrade to 2.0.\n+ * In order to continue improving Mockito and further improve the unit testing experience, we want you to upgrade to 2.0.\n  * Mockito follows <a href=\"http://semver.org/\">semantic versioning</a>\n  * and contains breaking changes only on major version upgrades.\n- * In a lifecycle of a library breaking changes are necessary\n+ * In the lifecycle of a library, breaking changes are necessary\n  * to roll out a set of brand new features that alter the existing behavior or even change the API.\n  * We hope that you enjoy Mockito 2.0!\n  * <p>\n@@ -86,9 +86,9 @@\n  * </ul>\n  *\n  * <p>\n- * Following examples mock a List, because everyone knows its interface (methods\n- * like <code>add()</code>, <code>get()</code>, <code>clear()</code> will be used). <br>\n- * Don't mock List class 'in real'. Use a real instance instead.\n+ * The following examples mock a List, because most people are familiar with the interface (such as the\n+ * <code>add()</code>, <code>get()</code>, <code>clear()</code> methods). <br>\n+ * In reality, please don't mock the List class. Use a real instance instead.\n  *\n  *\n  *\n@@ -112,16 +112,16 @@\n  * </code></pre>\n  *\n  * <p>\n- * Once created, mock will remember all interactions. Then you can selectively\n- * verify whatever interaction you are interested in.\n+ * Once created, a mock will remember all interactions. Then you can selectively\n+ * verify whatever interactions you are interested in.\n  *\n  *\n  *\n  *\n  * <h3 id=\"2\">2. <a class=\"meaningful_link\" href=\"#stubbing\">How about some stubbing?</a></h3>\n  *\n  * <pre class=\"code\"><code class=\"java\">\n- * //You can mock concrete classes, not only interfaces\n+ * //You can mock concrete classes, not just interfaces\n  * LinkedList mockedList = mock(LinkedList.class);\n  *\n  * //stubbing\n@@ -138,21 +138,21 @@\n  * System.out.println(mockedList.get(999));\n  *\n  * //Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>\n- * //If your code cares what get(0) returns then something else breaks (often before even verify() gets executed).\n- * //If your code doesn't care what get(0) returns then it should not be stubbed. Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>.\n+ * //If your code cares what get(0) returns, then something else breaks (often even before verify() gets executed).\n+ * //If your code doesn't care what get(0) returns, then it should not be stubbed. Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>.\n  * verify(mockedList).get(0);\n  * </code></pre>\n  *\n  * <ul>\n- * <li> By default, for all methods that return value, mock returns null, an\n- * empty collection or appropriate primitive/primitive wrapper value (e.g: 0,\n- * false, ... for int/Integer, boolean/Boolean, ...). </li>\n+ * <li> By default, for all methods that return a value, a mock will return either null, a\n+ * a primitive/primitive wrapper value, or an empty collection, as appropriate.\n+ * For example 0 for an int/Integer and false for a boolean/Boolean. </li>\n  *\n  * <li> Stubbing can be overridden: for example common stubbing can go to\n  * fixture setup but the test methods can override it.\n  * Please note that overridding stubbing is a potential code smell that points out too much stubbing</li>\n  *\n- * <li> Once stubbed, the method will always return stubbed value regardless\n+ * <li> Once stubbed, the method will always return a stubbed value, regardless\n  * of how many times it is called. </li>\n  *\n  * <li> Last stubbing is more important - when you stubbed the same method with\n@@ -202,7 +202,7 @@\n  * If you are using argument matchers, <b>all arguments</b> have to be provided\n  * by matchers.\n  * <p>\n- * E.g: (example shows verification but the same applies to stubbing):\n+ The following example shows verification but the same applies to stubbing:\n  *\n  * <pre class=\"code\"><code class=\"java\">\n  *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n@@ -215,7 +215,7 @@\n  * <p>\n  * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n  * Internally, they record a matcher on a stack and return a dummy value (usually null).\n- * This implementation is due static type safety imposed by java compiler.\n+ * This implementation is due to static type safety imposed by the java compiler.\n  * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n  *\n  *\n@@ -317,7 +317,7 @@\n  * interactions</b> one-by-one but only those that you are interested in\n  * testing in order.\n  * <p>\n- * Also, you can create InOrder object passing only mocks that are relevant for\n+ * Also, you can create an InOrder object passing only the mocks that are relevant for\n  * in-order verification.\n  *\n  *\n@@ -445,9 +445,9 @@\n  * Allows stubbing with generic {@link Answer} interface.\n  * <p>\n  * Yet another controversial feature which was not included in Mockito\n- * originally. We recommend using simple stubbing with <code>thenReturn()</code> or\n- * <code>thenThrow()</code> only. Those two should be <b>just enough</b> to test/test-drive\n- * any clean & simple code.\n+ * originally. We recommend simply stubbing with <code>thenReturn()</code> or\n+ * <code>thenThrow()</code>, which should be enough to test/test-drive\n+ * any clean & simple code. However, if you do have a need to stub with the generic Answer interface, here is an example:\n  *\n  * <pre class=\"code\"><code class=\"java\">\n  * when(mock.someMethod(anyString())).thenAnswer(new Answer() {\n@@ -458,7 +458,7 @@\n  *     }\n  * });\n  *\n- * //Following prints \"called with arguments: foo\"\n+ * //the following prints \"called with arguments: foo\"\n  * System.out.println(mock.someMethod(\"foo\"));\n  * </code></pre>\n  *\n@@ -468,7 +468,7 @@\n  * <h3 id=\"12\">12. <a class=\"meaningful_link\" href=\"#do_family_methods_stubs\"><code>doReturn()</code>|<code>doThrow()</code>|\n  * <code>doAnswer()</code>|<code>doNothing()</code>|<code>doCallRealMethod()</code> family of methods</a></h3>\n  *\n- * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not\n+ * Stubbing void methods requires a different approach from {@link Mockito#when(Object)} because the compiler does not\n  * like void methods inside brackets...\n  * <p>\n  * {@link Mockito#doThrow(Throwable...)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids.\n@@ -586,7 +586,7 @@\n  * <h3 id=\"14\">14. Changing <a class=\"meaningful_link\" href=\"#defaultreturn\">default return values of unstubbed invocations</a> (Since 1.7)</h3>\n  *\n  * You can create a mock with specified strategy for its return values.\n- * It's quite advanced feature and typically you don't need it to write decent tests.\n+ * It's quite an advanced feature and typically you don't need it to write decent tests.\n  * However, it can be helpful for working with <b>legacy systems</b>.\n  * <p>\n  * It is the default answer so it will be used <b>only when you don't</b> stub the method call.\n@@ -1329,7 +1329,7 @@ public static MockingDetails mockingDetails(Object toInspect) {\n \n     /**\n      * Creates mock with a specified strategy for its answers to interactions.\n-     * It's quite advanced feature and typically you don't need it to write decent tests.\n+     * It's quite an advanced feature and typically you don't need it to write decent tests.\n      * However it can be helpful when working with legacy systems.\n      * <p>\n      * It is the default answer so it will be used <b>only when you don't</b> stub the method call.\n@@ -1383,7 +1383,7 @@ public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n      * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n      * <p>\n      * As usual you are going to read <b>the partial mock warning</b>:\n-     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n+     * Object oriented programming tackles complexity by dividing the complexity into separate, specific, SRPy objects.\n      * How does partial mock fit into this paradigm? Well, it just doesn't...\n      * Partial mock usually means that the complexity has been moved to a different method on the same object.\n      * In most cases, this is not the way you want to design your application.",
      "parent_sha": "e8640baba7eeaf4d333696492b6868feb115094f"
    }
  },
  {
    "oid": "bb439e1de6c5528b828c387ad148ab64a0a88b48",
    "message": "Fixed the playground\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%402053",
    "date": "2010-08-17T20:50:24Z",
    "url": "https://github.com/mockito/mockito/commit/bb439e1de6c5528b828c387ad148ab64a0a88b48",
    "details": {
      "sha": "ee759b411f4a3db65ded0afec89e375108b13f5d",
      "filename": "test/org/mockitousage/PlaygroundTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/mockito/mockito/blob/bb439e1de6c5528b828c387ad148ab64a0a88b48/test%2Forg%2Fmockitousage%2FPlaygroundTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/bb439e1de6c5528b828c387ad148ab64a0a88b48/test%2Forg%2Fmockitousage%2FPlaygroundTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitousage%2FPlaygroundTest.java?ref=bb439e1de6c5528b828c387ad148ab64a0a88b48",
      "patch": "@@ -24,25 +24,21 @@ protected String getStuff() {\n     }\n     \n     class Boo {\n-        public void withLong(long y) {\n-            \n+        final public Object withLong(long y) {\n+                         return \"\";\n+        }\n+\n+        public Object foo() {\n+                   return \"\";\n         }\n     }\n \n     Foo mock;\n     @Mock IMethods mockTwo;\n     \n-    @Ignore\n     @Test\n     public void spyInAction() {\n-        mock = spy(new Foo());\n-// mock = spy(Foo.class, new Konstructor() {} );\n-// mock = spy(Foo.class, Konstructor.guess());\n-// mock = spy(Foo.class, Konstructor.withArguments(\"1\", \"2\"));\n-        \n-        when(mock.getStuff()).thenReturn(\"aha!\");\n-        \n-        mock.doSomeThing();\n+\n     }\n     \n     @Test",
      "parent_sha": "3a50ad33e9360c073275a89e04257d7f3ba9270a"
    }
  },
  {
    "oid": "ae1d7830b655d901c4426e2a5ac9b6625feeeb02",
    "message": "Fine-tuned the documentation of the new settings-options.\n\n--HG--\nbranch : issue148\nextra : transplant_source : %FF%85%C3%9E%E9%E1i%F2%D3%91%EE6%04%0Bl%82%DC%9D%1A%AE",
    "date": "2011-02-23T18:10:11Z",
    "url": "https://github.com/mockito/mockito/commit/ae1d7830b655d901c4426e2a5ac9b6625feeeb02",
    "details": {
      "sha": "2cd2518ea4f4fa5ff6c1e6f8653cd1c12558ea17",
      "filename": "src/org/mockito/MockSettings.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/mockito/mockito/blob/ae1d7830b655d901c4426e2a5ac9b6625feeeb02/src%2Forg%2Fmockito%2FMockSettings.java",
      "raw_url": "https://github.com/mockito/mockito/raw/ae1d7830b655d901c4426e2a5ac9b6625feeeb02/src%2Forg%2Fmockito%2FMockSettings.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockSettings.java?ref=ae1d7830b655d901c4426e2a5ac9b6625feeeb02",
      "patch": "@@ -165,16 +165,17 @@ public interface MockSettings extends Serializable {\n      * notified every time a method on this mock is called.\r\n      * <p>\r\n      * Multiple listeners may be added, but the same object is only added once.\r\n-     * The order, in which the listeners are notified, is not guaranteed. \r\n+     * The order, in which the listeners are added, is not guaranteed to be the\r\n+     * order in which the listeners are notified. \r\n      * \r\n      * Example:\r\n      * <pre>\r\n      *  List mockWithListener = mock(List.class, withSettings().callback(new YourInvocationListener()));\r\n      * </pre>\r\n      * \r\n-     * See the listeners {@link InvocationListener interface} for more details.\r\n+     * See the {@link InvocationListener listeners interface} for more details.\r\n      * \r\n-     * @param The invocation listener to add as callback. May not be null.\r\n+     * @param listener The invocation listener to add as callback. May not be null.\r\n      * @return settings instance so that you can fluently specify other settings\r\n      */\r\n     MockSettings callback(InvocationListener listener);\r",
      "parent_sha": "5f141c7133f8cc31b4b9f4a2cd394bb4aeced76c"
    }
  },
  {
    "oid": "904c8149605ce56c319570bb66f5ac160e96baa8",
    "message": "issue 193 : documenting extrainterfaces on Mock annotation",
    "date": "2011-04-08T19:42:35Z",
    "url": "https://github.com/mockito/mockito/commit/904c8149605ce56c319570bb66f5ac160e96baa8",
    "details": {
      "sha": "b27de11a6af4c25d51bbba092a5895407c8a68ec",
      "filename": "src/org/mockito/Mock.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/mockito/mockito/blob/904c8149605ce56c319570bb66f5ac160e96baa8/src%2Forg%2Fmockito%2FMock.java",
      "raw_url": "https://github.com/mockito/mockito/raw/904c8149605ce56c319570bb66f5ac160e96baa8/src%2Forg%2Fmockito%2FMock.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMock.java?ref=904c8149605ce56c319570bb66f5ac160e96baa8",
      "patch": "@@ -4,14 +4,14 @@\n  */\r\n package org.mockito;\r\n \r\n-import static java.lang.annotation.ElementType.*;\r\n+import org.mockito.runners.MockitoJUnitRunner;\r\n \r\n import java.lang.annotation.Documented;\r\n import java.lang.annotation.Retention;\r\n import java.lang.annotation.RetentionPolicy;\r\n import java.lang.annotation.Target;\r\n \r\n-import org.mockito.runners.MockitoJUnitRunner;\r\n+import static java.lang.annotation.ElementType.FIELD;\r\n \r\n /**\r\n  * <ul>\r\n@@ -27,11 +27,12 @@\n  *       &#064;Mock private ArticleCalculator calculator;\r\n  *       &#064;Mock(name = \"dbMock\") private ArticleDatabase database;\r\n  *       &#064;Mock(answer = RETURNS_MOCKS) private UserProvider userProvider;\r\n+ *       &#064;Mock(extraInterfaces = {Queue.class, Observer.class}) private  articleMonitor;\r\n  *\r\n  *       private ArticleManager manager;\r\n  *\r\n  *       &#064;Before public void setup() {\r\n- *           manager = new ArticleManager(userProvider, database, calculator);\r\n+ *           manager = new ArticleManager(userProvider, database, calculator, articleMonitor);\r\n  *       }\r\n  *   }\r\n  *\r",
      "parent_sha": "2ccc300ae50ff53106cd6ec08a863cf524c8f009"
    }
  },
  {
    "oid": "bc5d497205d9a48b32dc1f2b90867cb475a0e0d2",
    "message": "removed reference to deprecated stubVoid() method\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40751",
    "date": "2008-07-29T17:07:30Z",
    "url": "https://github.com/mockito/mockito/commit/bc5d497205d9a48b32dc1f2b90867cb475a0e0d2",
    "details": {
      "sha": "8feb55c2d4c971a56ab4218469ff3915e01e203c",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/bc5d497205d9a48b32dc1f2b90867cb475a0e0d2/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/bc5d497205d9a48b32dc1f2b90867cb475a0e0d2/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=bc5d497205d9a48b32dc1f2b90867cb475a0e0d2",
      "patch": "@@ -520,7 +520,7 @@ public static <T> T spy(T object) {\n      *   \n      * </pre>\n      * \n-     * For stubbing void methods with throwables see: {@link Mockito#stubVoid}\n+     * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable)}\n      * <p>\n      * Stubbing can be overridden: for example common stubbing can go to fixture\n      * setup but test methods can override it.",
      "parent_sha": "30bbfc68ca7e9619e10e2f2219148a75fa2ce549"
    }
  },
  {
    "oid": "5b6691b394de49ecf333036326ee88d84f73ef54",
    "message": "Fixed the name of the test and refactored it a little bit\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%402055",
    "date": "2010-08-17T20:50:55Z",
    "url": "https://github.com/mockito/mockito/commit/5b6691b394de49ecf333036326ee88d84f73ef54",
    "details": {
      "sha": "346b2eebc69a8171f24ba030d3aac7915e322104",
      "filename": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java",
      "status": "renamed",
      "additions": 29,
      "deletions": 27,
      "changes": 56,
      "blob_url": "https://github.com/mockito/mockito/blob/5b6691b394de49ecf333036326ee88d84f73ef54/test%2Forg%2Fmockitousage%2Fbugs%2FShouldNotDeadlockAnswerExecutionTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/5b6691b394de49ecf333036326ee88d84f73ef54/test%2Forg%2Fmockitousage%2Fbugs%2FShouldNotDeadlockAnswerExecutionTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitousage%2Fbugs%2FShouldNotDeadlockAnswerExecutionTest.java?ref=5b6691b394de49ecf333036326ee88d84f73ef54",
      "patch": "@@ -1,4 +1,5 @@\n package org.mockitousage.bugs;\r\n+\r\n import java.util.concurrent.ExecutorService;\r\n import java.util.concurrent.Executors;\r\n import java.util.concurrent.TimeUnit;\r\n@@ -11,7 +12,7 @@\n import org.mockito.stubbing.Answer;\r\n \r\n //see bug 190\r\n-public class ShouldNotDeadlockAnswerExecution {\r\n+public class ShouldNotDeadlockAnswerExecutionTest {\r\n \r\n     @Test\r\n     public void failIfMockIsSharedBetweenThreads() throws Exception {\r\n@@ -65,47 +66,48 @@ public void successIfEveryThreadHasItsOwnMock() throws Exception {\n         }\r\n     }\r\n \r\n-}\r\n+    static class LockingAnswer implements Answer<String> {\r\n \r\n-class LockingAnswer implements Answer<String> {\r\n+        private AtomicInteger counter;\r\n \r\n-    private AtomicInteger counter;\r\n+        public LockingAnswer(AtomicInteger counter) {\r\n+            this.counter = counter;\r\n+        }\r\n \r\n-    public LockingAnswer(AtomicInteger counter) {\r\n-        this.counter = counter;\r\n-    }\r\n+        /**\r\n+         * Decrement counter and wait until counter has value 0\r\n+         */\r\n+        public String answer(InvocationOnMock invocation) throws Throwable {\r\n+            counter.decrementAndGet();\r\n \r\n-    /**\r\n-     * Decrement counter and wait until counter has value 0\r\n-     */\r\n-    public String answer(InvocationOnMock invocation) throws Throwable {\r\n-        counter.decrementAndGet();\r\n+            while (counter.get() != 0) {\r\n+                Thread.sleep(10);\r\n+            }\r\n \r\n-        while (counter.get() != 0) {\r\n-            Thread.sleep(10);\r\n+            return null;\r\n         }\r\n \r\n-        return null;\r\n     }\r\n \r\n-}\r\n+    static class ServiceRunner implements Runnable {\r\n+\r\n+        private Service service;\r\n \r\n-class ServiceRunner implements Runnable {\r\n+        public ServiceRunner(Service service) {\r\n+            this.service = service;\r\n+        }\r\n \r\n-    private Service service;\r\n+        public void run() {\r\n+            service.verySlowMethod();\r\n+        }\r\n \r\n-    public ServiceRunner(Service service) {\r\n-        this.service = service;\r\n     }\r\n \r\n-    public void run() {\r\n-        service.verySlowMethod();\r\n-    }\r\n+    static interface Service {\r\n \r\n-}\r\n+        String verySlowMethod();\r\n \r\n-interface Service {\r\n+    }\r\n \r\n-    String verySlowMethod();\r\n+}\r\n \r\n-}\n\\ No newline at end of file",
      "previous_filename": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecution.java",
      "parent_sha": "5f5a5a1494c478edaac1db85c2c815cf55a20775"
    }
  },
  {
    "oid": "5cef8b606a9e5784de20943925673a4a3dc3fb09",
    "message": "Refactored the test based on feedback\n\nShould be a notch simpler & easier to read now.",
    "date": "2016-05-04T17:44:26Z",
    "url": "https://github.com/mockito/mockito/commit/5cef8b606a9e5784de20943925673a4a3dc3fb09",
    "details": {
      "sha": "441685fb2dab14040ee451e5a93d7c67319342dc",
      "filename": "src/test/java/org/mockitousage/junitrunner/MockitoJUnitRunnerTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/mockito/mockito/blob/5cef8b606a9e5784de20943925673a4a3dc3fb09/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrunner%2FMockitoJUnitRunnerTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/5cef8b606a9e5784de20943925673a4a3dc3fb09/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrunner%2FMockitoJUnitRunnerTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrunner%2FMockitoJUnitRunnerTest.java?ref=5cef8b606a9e5784de20943925673a4a3dc3fb09",
      "patch": "@@ -6,6 +6,7 @@\n import org.junit.runner.JUnitCore;\n import org.junit.runner.Result;\n import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n \n@@ -46,7 +47,7 @@ public class MockitoJUnitRunnerTest {\n     }\n \n     @RunWith(MockitoJUnitRunner.class)\n-    public static class StubbingInConstructorUsed extends StubbingInConstructorUnused{\n+    public static class StubbingInConstructorUsed extends StubbingInConstructorUnused {\n         @Test public void test() {\n             assertEquals(\"1\", mock.simpleMethod(1));\n         }\n@@ -67,25 +68,28 @@ public static class StubbingInBeforeUsed extends StubbingInBeforeUnused{\n \n     @RunWith(MockitoJUnitRunner.class)\n     public static class StubbingInBeforeUnused {\n-        IMethods mock;\n+        @Mock IMethods mock;\n         @Before public void before() {\n-            mock = when(mock(IMethods.class).simpleMethod(1)).thenReturn(\"1\").getMock();\n+            when(mock.simpleMethod(1)).thenReturn(\"1\");\n         }\n         @Test public void dummy() {}\n     }\n \n     @RunWith(MockitoJUnitRunner.class)\n     public static class StubbingInTestUsed {\n         @Test public void test() {\n-            IMethods mock = when(mock(IMethods.class).simpleMethod(1)).thenReturn(\"1\").getMock();\n+            IMethods mock = mock(IMethods.class);\n+            when(mock.simpleMethod(1)).thenReturn(\"1\");\n             assertEquals(\"1\", mock.simpleMethod(1));\n         }\n     }\n \n     @RunWith(MockitoJUnitRunner.class)\n     public static class StubbingInTestUnused {\n         @Test public void test() {\n-            when(mock(IMethods.class).simpleMethod(1)).thenReturn(\"1\");\n+            IMethods mock = mock(IMethods.class);\n+            when(mock.simpleMethod(1)).thenReturn(\"1\");\n+            mock.simpleMethod(2); //different arg\n         }\n     }\n }",
      "parent_sha": "f8655e5136b6df9bbc10dfd78caf87ad6b9d3df7"
    }
  },
  {
    "oid": "e03ee92c47c64386b5a18c087d0c18bd6485bbe4",
    "message": "javadoc fix\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40952",
    "date": "2008-10-12T20:25:45Z",
    "url": "https://github.com/mockito/mockito/commit/e03ee92c47c64386b5a18c087d0c18bd6485bbe4",
    "details": {
      "sha": "8615f51c43149ea2d3823d473fbda027860cebb0",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/mockito/mockito/blob/e03ee92c47c64386b5a18c087d0c18bd6485bbe4/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/e03ee92c47c64386b5a18c087d0c18bd6485bbe4/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=e03ee92c47c64386b5a18c087d0c18bd6485bbe4",
      "patch": "@@ -176,9 +176,10 @@\n  * //verification using never(). never() is an alias to times(0)\n  * verify(mockedList, never()).add(\"never happened\");\n  * \n- * //verification using atLeast()\n+ * //verification using atLeast()/atMost()\n  * verify(mockedList, atLeastOnce()).add(\"three times\");\n  * verify(mockedList, atLeast(2)).add(\"five times\");\n+ * verify(mockedList, atMost(5)).add(\"three times\");\n  * \n  * </pre>\n  * ",
      "parent_sha": "2faec95a3610c368898751e996fbf76b4f7dbcc3"
    }
  },
  {
    "oid": "bb336652d7da6d48f4569f4551757624f6f86b26",
    "message": "Made hashCode() safer\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401915",
    "date": "2010-03-14T21:20:52Z",
    "url": "https://github.com/mockito/mockito/commit/bb336652d7da6d48f4569f4551757624f6f86b26",
    "details": {
      "sha": "d3c228c6b0d89befb4cd839554a5d7660ec34fee",
      "filename": "src/org/mockito/internal/matchers/Equals.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/bb336652d7da6d48f4569f4551757624f6f86b26/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2FEquals.java",
      "raw_url": "https://github.com/mockito/mockito/raw/bb336652d7da6d48f4569f4551757624f6f86b26/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2FEquals.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2FEquals.java?ref=bb336652d7da6d48f4569f4551757624f6f86b26",
      "patch": "@@ -63,7 +63,7 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        throw new UnsupportedOperationException(\"hashCode() is not supported\");\n+        return 1;\n     }\n \n     public SelfDescribing withExtraTypeInfo() {",
      "parent_sha": "d869a221a091fa1f3007974b8b98eafc39814f1a"
    }
  },
  {
    "oid": "61a755b126ba8662308d4dc36e52aa5c196278d8",
    "message": "Typo",
    "date": "2016-09-28T13:50:00Z",
    "url": "https://github.com/mockito/mockito/commit/61a755b126ba8662308d4dc36e52aa5c196278d8",
    "details": {
      "sha": "12f0cfd952b45848e425ae2e4b5e89915c88a48f",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/61a755b126ba8662308d4dc36e52aa5c196278d8/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/61a755b126ba8662308d4dc36e52aa5c196278d8/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=61a755b126ba8662308d4dc36e52aa5c196278d8",
      "patch": "@@ -1222,7 +1222,7 @@\n  * Mockito now offers an {@link Incubating}, optional support for mocking final classes and methods.\n  * This is a fantastic improvement that demonstrates Mockito's everlasting quest for improving testing experience.\n  * Our ambition is that Mockito \"just works\" with final classes and methods.\n- * Previously they were considered considered \"unmockable\", preventing the user from mocking.\n+ * Previously they were considered \"unmockable\", preventing the user from mocking.\n  * We already started discussing how to make this feature enabled by default.\n  * Currently, the feature is still optional as we wait for more feedback from the community.\n  * <p>",
      "parent_sha": "a9bfb5e0290a6699d401975db36a5790b5ba5a57"
    }
  },
  {
    "oid": "72c592aa804f2662b77dc4ea8011636eb341c883",
    "message": "final fixes to javadocs\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401880",
    "date": "2010-03-02T20:23:49Z",
    "url": "https://github.com/mockito/mockito/commit/72c592aa804f2662b77dc4ea8011636eb341c883",
    "details": {
      "sha": "524fb31e735853a4cffa0bd66b41ae37d0f365e2",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mockito/mockito/blob/72c592aa804f2662b77dc4ea8011636eb341c883/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/72c592aa804f2662b77dc4ea8011636eb341c883/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=72c592aa804f2662b77dc4ea8011636eb341c883",
      "patch": "@@ -705,8 +705,8 @@ public class Mockito extends Matchers {\n      * </pre>\r\n      * \r\n      * <strong>Verification API does not support 'chaining'</strong> so deep stub doesn't change how you do verification.\r\n-     *\r\n-     * <strong>WARNING</strong><p>\r\n+     * <p>\r\n+     * <strong>WARNING: </strong>\r\n      * This feature should rarely be required for regular clean code! Leave it for legacy code.\r\n      * Mocking a mock to return a mock, to return a mock, (...), to return something meaningful\r\n      * hints at violation of Law of Demeter or mocking a value object (a well known anti-pattern).\r",
      "parent_sha": "cec9351e14b46b76bb9a9c4a9b2fedae05b784e0"
    }
  },
  {
    "oid": "e6d4cb0a387e835f19328e6cc3e335164b6f911c",
    "message": "Simplified it\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401400",
    "date": "2009-05-02T19:54:46Z",
    "url": "https://github.com/mockito/mockito/commit/e6d4cb0a387e835f19328e6cc3e335164b6f911c",
    "details": {
      "sha": "3d120577a6d9408a7bc94aa708b35706c25b2705",
      "filename": "src/org/mockito/runners/MockitoJUnit44Runner.java",
      "status": "modified",
      "additions": 3,
      "deletions": 15,
      "changes": 18,
      "blob_url": "https://github.com/mockito/mockito/blob/e6d4cb0a387e835f19328e6cc3e335164b6f911c/src%2Forg%2Fmockito%2Frunners%2FMockitoJUnit44Runner.java",
      "raw_url": "https://github.com/mockito/mockito/raw/e6d4cb0a387e835f19328e6cc3e335164b6f911c/src%2Forg%2Fmockito%2Frunners%2FMockitoJUnit44Runner.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Frunners%2FMockitoJUnit44Runner.java?ref=e6d4cb0a387e835f19328e6cc3e335164b6f911c",
      "patch": "@@ -53,21 +53,9 @@\n  */\n @SuppressWarnings(\"deprecation\")\n @Deprecated\n-public class MockitoJUnit44Runner extends Runner {\n+public class MockitoJUnit44Runner extends MockitoJUnitRunner {\n \n-    private RunnerImpl runner;\n-\n-    public MockitoJUnit44Runner(Class<?> klass) throws InitializationError {\n-        this.runner = new JUnit44RunnerImpl(klass);\n-    }\n-\n-    @Override\n-    public Description getDescription() {\n-        return runner.getDescription();\n-    }\n-\n-    @Override\n-    public void run(RunNotifier notifier) {\n-        runner.run(notifier);\n+    public MockitoJUnit44Runner(Class<?> klass) {\n+        super(klass);\n     }\n }\n\\ No newline at end of file",
      "parent_sha": "f3fa9c8501ae59ff426c27a5a92f2aa3e3b31dea"
    }
  },
  {
    "oid": "d4566d5dc482316bb478c42d3111e0aa875564a5",
    "message": "Updated TODO",
    "date": "2018-07-24T04:11:19Z",
    "url": "https://github.com/mockito/mockito/commit/d4566d5dc482316bb478c42d3111e0aa875564a5",
    "details": {
      "sha": "1bf2414bcbadf013197d0d0d951b0770a3e50abb",
      "filename": "src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/d4566d5dc482316bb478c42d3111e0aa875564a5/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2FOngoingStubbingImpl.java",
      "raw_url": "https://github.com/mockito/mockito/raw/d4566d5dc482316bb478c42d3111e0aa875564a5/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2FOngoingStubbingImpl.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2FOngoingStubbingImpl.java?ref=d4566d5dc482316bb478c42d3111e0aa875564a5",
      "patch": "@@ -24,7 +24,7 @@ public OngoingStubbingImpl(InvocationContainerImpl invocationContainer) {\n \n     @Override\n     public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\n-        //TODO SF! rename all iOngoingStubbing -> ongoingStubbing\n+        //TODO 792 rename all iOngoingStubbing -> ongoingStubbing\n         if(!invocationContainer.hasInvocationForPotentialStubbing()) {\n             throw incorrectUseOfApi();\n         }",
      "parent_sha": "e5dd9d74eb09efe0e5ab2ef36399aaea3bfe331e"
    }
  },
  {
    "oid": "f2a47c35b8b16a8b1c560b9d93bc3cce62a3e310",
    "message": "Improve examples for InOrder (#2843)\n\nInclude some context in InOrder examples and add an example that uses\r\na static mock as well.",
    "date": "2023-01-15T17:25:39Z",
    "url": "https://github.com/mockito/mockito/commit/f2a47c35b8b16a8b1c560b9d93bc3cce62a3e310",
    "details": {
      "sha": "ee71ae197c3f6c4dc2e6cbd1f29109e30cc90a51",
      "filename": "src/main/java/org/mockito/InOrder.java",
      "status": "modified",
      "additions": 29,
      "deletions": 1,
      "changes": 30,
      "blob_url": "https://github.com/mockito/mockito/blob/f2a47c35b8b16a8b1c560b9d93bc3cce62a3e310/src%2Fmain%2Fjava%2Forg%2Fmockito%2FInOrder.java",
      "raw_url": "https://github.com/mockito/mockito/raw/f2a47c35b8b16a8b1c560b9d93bc3cce62a3e310/src%2Fmain%2Fjava%2Forg%2Fmockito%2FInOrder.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FInOrder.java?ref=f2a47c35b8b16a8b1c560b9d93bc3cce62a3e310",
      "patch": "@@ -12,13 +12,41 @@\n  * Allows verification in order. E.g:\n  *\n  * <pre class=\"code\"><code class=\"java\">\n+ * // Given\n+ * First firstMock = mock(First.class);\n+ * Second secondMock = mock(Second.class);\n  * InOrder inOrder = inOrder(firstMock, secondMock);\n  *\n+ * // When\n+ * firstMock.add(\"was called first\");\n+ * secondMock.add(\"was called second\");\n+ *\n+ * // Then\n  * inOrder.verify(firstMock).add(\"was called first\");\n  * inOrder.verify(secondMock).add(\"was called second\");\n+ * inOrder.verifyNoMoreInteractions();\n+ * </code></pre>\n+ *\n+ * Static mocks can be verified alongside non-static mocks. E.g:\n+ *\n+ * <pre class=\"code\"><code class=\"java\">\n+ * // Given\n+ * First firstMock = mock(First.class);\n+ * MockedStatic<StaticSecond> staticSecondMock = mockStatic(StaticSecond.class);\n+ * InOrder inOrder = inOrder(firstMock, StaticSecond.class);\n+ *\n+ * // When\n+ * firstMock.add(\"was called first\");\n+ * StaticSecond.doSomething(\"foobar\");\n+ *\n+ * // Then\n+ * inOrder.verify(firstMock).add(\"was called first\");\n+ * inOrder.verify(staticSecondMock, () -&gt; StaticSecond.doSomething(\"foobar\"));\n+ * inOrder.verifyNoMoreInteractions();\n  * </code></pre>\n  *\n- * As of Mockito 1.8.4 you can verifyNoMoreInteractions() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}\n+ * As of Mockito 1.8.4 you can verifyNoMoreInteractions() in order-sensitive way. Read more:\n+ * {@link InOrder#verifyNoMoreInteractions()}.\n  * <p>\n  *\n  * See examples in javadoc for {@link Mockito} class",
      "parent_sha": "484de454af8a12da8e2944ab889a262caac73ae0"
    }
  },
  {
    "oid": "c6318c3ff3ab6d479fcd70cbc456b9f9c91f28d0",
    "message": "Removes duplicated code\n\nSigned-off-by: Brice Dutheil <brice.dutheil@gmail.com>",
    "date": "2016-11-08T14:19:19Z",
    "url": "https://github.com/mockito/mockito/commit/c6318c3ff3ab6d479fcd70cbc456b9f9c91f28d0",
    "details": {
      "sha": "feb203c7df5a8c8c63a2193c55d05856a325b191",
      "filename": "src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/mockito/mockito/blob/c6318c3ff3ab6d479fcd70cbc456b9f9c91f28d0/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fframework%2FDefaultMockitoFramework.java",
      "raw_url": "https://github.com/mockito/mockito/raw/c6318c3ff3ab6d479fcd70cbc456b9f9c91f28d0/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fframework%2FDefaultMockitoFramework.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fframework%2FDefaultMockitoFramework.java?ref=c6318c3ff3ab6d479fcd70cbc456b9f9c91f28d0",
      "patch": "@@ -1,27 +1,22 @@\n package org.mockito.internal.framework;\n \n import org.mockito.MockitoFramework;\n+import org.mockito.internal.util.Checks;\n import org.mockito.listeners.MockitoListener;\n \n import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;\n \n public class DefaultMockitoFramework implements MockitoFramework {\n \n     public MockitoFramework addListener(MockitoListener listener) {\n-        assertNotNull(listener);\n+        Checks.checkNotNull(listener, \"listener\");\n         mockingProgress().addListener(listener);\n         return this;\n     }\n \n     public MockitoFramework removeListener(MockitoListener listener) {\n-        assertNotNull(listener);\n+        Checks.checkNotNull(listener, \"listener\");\n         mockingProgress().removeListener(listener);\n         return this;\n     }\n-\n-    private void assertNotNull(MockitoListener listener) {\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"listener cannot be null\");\n-        }\n-    }\n }",
      "parent_sha": "619cd9df996f10dd7dff79ccac644b949aab6221"
    }
  },
  {
    "oid": "4fc17deeaa7574849e00be8ec360cbf8ce51599f",
    "message": "housekeeping - rename job\n\n--HG--\nrename : test/org/mockitousage/verification/NoMoreInteractionsExcludingStubsTest.java => test/org/mockitousage/verification/VerificationExcludingStubsTest.java",
    "date": "2011-04-03T09:45:11Z",
    "url": "https://github.com/mockito/mockito/commit/4fc17deeaa7574849e00be8ec360cbf8ce51599f",
    "details": {
      "sha": "7df26eae1f91247bd986d4c3559ae30a92e926de",
      "filename": "test/org/mockitousage/verification/VerificationExcludingStubsTest.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/4fc17deeaa7574849e00be8ec360cbf8ce51599f/test%2Forg%2Fmockitousage%2Fverification%2FVerificationExcludingStubsTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/4fc17deeaa7574849e00be8ec360cbf8ce51599f/test%2Forg%2Fmockitousage%2Fverification%2FVerificationExcludingStubsTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitousage%2Fverification%2FVerificationExcludingStubsTest.java?ref=4fc17deeaa7574849e00be8ec360cbf8ce51599f",
      "patch": "@@ -20,7 +20,7 @@\n import static org.mockito.Mockito.*;\n \n @SuppressWarnings(\"unchecked\")\n-public class NoMoreInteractionsExcludingStubsTest extends TestBase {\n+public class VerificationExcludingStubsTest extends TestBase {\n \n     @Mock IMethods mock;\n ",
      "previous_filename": "test/org/mockitousage/verification/NoMoreInteractionsExcludingStubsTest.java",
      "parent_sha": "6bea574cf78024fc9ae5d22355bf0edc6120ba4b"
    }
  },
  {
    "oid": "843c6bb0a2289c1a2c679c1f825924a5f0e8d4b4",
    "message": "Ensured exception causes are supplied",
    "date": "2014-12-12T23:29:32Z",
    "url": "https://github.com/mockito/mockito/commit/843c6bb0a2289c1a2c679c1f825924a5f0e8d4b4",
    "details": {
      "sha": "015bb6f5d281c486a59ddc5b0a7c439dcc3fddf9",
      "filename": "src/org/mockito/internal/util/io/IOUtil.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mockito/mockito/blob/843c6bb0a2289c1a2c679c1f825924a5f0e8d4b4/src%2Forg%2Fmockito%2Finternal%2Futil%2Fio%2FIOUtil.java",
      "raw_url": "https://github.com/mockito/mockito/raw/843c6bb0a2289c1a2c679c1f825924a5f0e8d4b4/src%2Forg%2Fmockito%2Finternal%2Futil%2Fio%2FIOUtil.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Futil%2Fio%2FIOUtil.java?ref=843c6bb0a2289c1a2c679c1f825924a5f0e8d4b4",
      "patch": "@@ -21,7 +21,7 @@ public static void writeText(String text, File output) {\n             pw = new PrintWriter(new FileWriter(output));\n             pw.write(text);\n         } catch (Exception e) {\n-            throw new MockitoException(\"Problems writing text to file: \" + output);\n+            throw new MockitoException(\"Problems writing text to file: \" + output, e);\n         } finally {\n             close(pw);\n         }\n@@ -36,7 +36,7 @@ public static Collection<String> readLines(Reader reader) {\n                 out.add(line);\n             }\n         } catch (IOException e) {\n-            throw new MockitoException(\"Problems reading from: \" + reader);\n+            throw new MockitoException(\"Problems reading from: \" + reader, e);\n         }\n         return out;\n     }\n@@ -64,7 +64,7 @@ public static void close(Closeable closeable) {\n             try {\n                 closeable.close();\n             } catch (IOException e) {\n-                throw new MockitoException(\"Problems closing stream: \" + closeable);\n+                throw new MockitoException(\"Problems closing stream: \" + closeable, e);\n             }\n         }\n     }",
      "parent_sha": "e0c9fb7728fe087503dc52eb88a1df104b88e059"
    }
  },
  {
    "oid": "2af94ce618a5979e81e44a2c91cefc4ddc56d7cf",
    "message": "refreshed tests list\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40288",
    "date": "2008-01-12T16:44:39Z",
    "url": "https://github.com/mockito/mockito/commit/2af94ce618a5979e81e44a2c91cefc4ddc56d7cf",
    "details": {
      "sha": "88d070a1d4ef5df3f39891b915ec54f0a426a410",
      "filename": "test/org/mockitousage/MultiThreadedTest.java",
      "status": "modified",
      "additions": 74,
      "deletions": 36,
      "changes": 110,
      "blob_url": "https://github.com/mockito/mockito/blob/2af94ce618a5979e81e44a2c91cefc4ddc56d7cf/test%2Forg%2Fmockitousage%2FMultiThreadedTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/2af94ce618a5979e81e44a2c91cefc4ddc56d7cf/test%2Forg%2Fmockitousage%2FMultiThreadedTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitousage%2FMultiThreadedTest.java?ref=2af94ce618a5979e81e44a2c91cefc4ddc56d7cf",
      "patch": "@@ -3,7 +3,7 @@\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockitousage;\n-import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.*;\n \n import java.util.LinkedList;\n import java.util.List;\n@@ -15,21 +15,35 @@\n import org.mockito.MockUtilTest;\n import org.mockito.MockitoTest;\n import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.ReporterTest;\n import org.mockito.exceptions.base.MockitoAssertionErrorTest;\n import org.mockito.exceptions.base.MockitoExceptionTest;\n+import org.mockito.exceptions.base.StackTraceRemoverTest;\n+import org.mockito.internal.AllInvocationsFinderTest;\n import org.mockito.internal.MockHandlerTest;\n import org.mockito.internal.creation.CglibTest;\n import org.mockito.internal.creation.MockFactoryTest;\n import org.mockito.internal.invocation.InvocationMatcherTest;\n import org.mockito.internal.invocation.InvocationTest;\n+import org.mockito.internal.invocation.InvocationsFinderTest;\n+import org.mockito.internal.invocation.InvocationsPrinterTest;\n import org.mockito.internal.matchers.EqualsTest;\n import org.mockito.internal.progress.MockingProgressImplTest;\n import org.mockito.internal.progress.VerificationModeImplTest;\n import org.mockito.internal.stubbing.EmptyReturnValuesTest;\n+import org.mockito.internal.stubbing.ResultTest;\n+import org.mockito.internal.stubbing.StubberTest;\n+import org.mockito.internal.util.ListUtilTest;\n+import org.mockito.internal.verification.MissingInvocationInOrderVerifierTest;\n+import org.mockito.internal.verification.MissingInvocationVerifierTest;\n+import org.mockito.internal.verification.NoMoreInvocationsVerifierTest;\n+import org.mockito.internal.verification.NumberOfInvocationsInOrderVerifierTest;\n import org.mockito.internal.verification.NumberOfInvocationsVerifierTest;\n+import org.mockito.internal.verification.VerifyingRecorderTest;\n import org.mockitousage.binding.BridgeMethodPuzzleTest;\n import org.mockitousage.binding.IncorectBindingPuzzleFixedTest;\n import org.mockitousage.matchers.ComparableMatchersTest;\n+import org.mockitousage.matchers.CustomMatchersTest;\n import org.mockitousage.matchers.InvalidUseOfMatchersTest;\n import org.mockitousage.matchers.MatchersTest;\n import org.mockitousage.matchers.MatchersToStringTest;\n@@ -39,11 +53,15 @@\n import org.mockitousage.stubbing.ReturningDefaultValuesTest;\n import org.mockitousage.stubbing.StubbingWithThrowablesTest;\n import org.mockitousage.verification.AtLeastOnceVerificationTest;\n+import org.mockitousage.verification.BasicVerificationInOrderTest;\n import org.mockitousage.verification.BasicVerificationTest;\n import org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest;\n+import org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest;\n import org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest;\n import org.mockitousage.verification.ExactNumberOfTimesVerificationTest;\n import org.mockitousage.verification.NoMoreInteractionsVerificationTest;\n+import org.mockitousage.verification.RelaxedVerificationInOrderTest;\n+import org.mockitousage.verification.SelectedMocksInOrderVerificationTest;\n import org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest;\n import org.mockitousage.verification.VerificationInOrderTest;\n import org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest;\n@@ -55,49 +73,69 @@ private static class AllTestsRunner extends Thread {\n         \n         private boolean failed;\n \n-        //TODO refresh those tests\n         public void run() {\n             Result result = JUnitCore.runClasses(\n-                    MockitoSampleTest.class, \n-                    EqualsTest.class, \n-                    CglibTest.class, \n-                    InvocationMatcherTest.class, \n-                    MockFactoryTest.class, \n-                    NumberOfInvocationsVerifierTest.class, \n-                    MockingProgressImplTest.class, \n-                    EmptyReturnValuesTest.class, \n-                    VerificationModeImplTest.class, \n-                    InvocationTest.class, \n-                    MockUtilTest.class, \n-                    MockitoAssertionErrorTest.class, \n-                    MockitoExceptionTest.class, \n-                    BridgeMethodPuzzleTest.class, \n-                    IncorectBindingPuzzleFixedTest.class, \n-                    UsingVarargsTest.class, \n-                    ComparableMatchersTest.class, \n-                    MatchersToStringTest.class, \n-                    VerificationAndStubbingUsingMatchersTest.class, \n-                    BasicStubbingTest.class, \n-                    ReturningDefaultValuesTest.class, \n-                    StubbingWithThrowablesTest.class, \n-                    AtLeastOnceVerificationTest.class, \n-                    BasicVerificationTest.class, \n-                    ExactNumberOfTimesVerificationTest.class, \n-                    DescriptiveMessagesWhenVerificationFailsTest.class, \n-                    NoMoreInteractionsVerificationTest.class, \n-                    VerificationInOrderMixedWithOrdiraryVerificationTest.class, \n-                    VerificationInOrderTest.class, \n-                    VerificationOnMultipleMocksUsingMatchersTest.class, \n-                    VerificationUsingMatchersTest.class, \n-                    MatchersTest.class,\n-                    ReplacingObjectMethodsTest.class,\n+                    EqualsTest.class,\n+                    ListUtilTest.class,\n+                    MockingProgressImplTest.class,\n+                    VerificationModeImplTest.class,\n                     MockHandlerTest.class,\n+                    AllInvocationsFinderTest.class,\n+                    EmptyReturnValuesTest.class,\n+                    StubberTest.class,\n+                    ResultTest.class,\n+                    NumberOfInvocationsVerifierTest.class,\n+                    VerifyingRecorderTest.class,\n+                    MissingInvocationVerifierTest.class,\n+                    NoMoreInvocationsVerifierTest.class,\n+                    NumberOfInvocationsInOrderVerifierTest.class,\n+                    MissingInvocationInOrderVerifierTest.class,\n+                    MockFactoryTest.class,\n+                    CglibTest.class,\n+                    InvocationMatcherTest.class,\n+                    InvocationsFinderTest.class,\n+                    InvocationTest.class,\n+                    InvocationsPrinterTest.class,\n                     MockitoTest.class,\n+                    MockUtilTest.class,\n+                    ReporterTest.class,\n+                    MockitoAssertionErrorTest.class,\n+                    StackTraceRemoverTest.class,\n+                    MockitoExceptionTest.class,\n+                    StackTraceFilteringTest.class,\n+                    BridgeMethodPuzzleTest.class,\n+                    IncorectBindingPuzzleFixedTest.class,\n                     InvalidUsageTest.class,\n+                    UsingVarargsTest.class,\n+                    CustomMatchersTest.class,\n+                    ComparableMatchersTest.class,\n                     InvalidUseOfMatchersTest.class,\n+                    MatchersTest.class,\n+                    MatchersToStringTest.class,\n+                    VerificationAndStubbingUsingMatchersTest.class,\n+                    BasicStubbingTest.class,\n+                    ReturningDefaultValuesTest.class,\n+                    StubbingWithThrowablesTest.class,\n+                    AtLeastOnceVerificationTest.class,\n+                    BasicVerificationTest.class,\n+                    ExactNumberOfTimesVerificationTest.class,\n+                    VerificationInOrderTest.class,\n+                    NoMoreInteractionsVerificationTest.class,\n+                    SelectedMocksInOrderVerificationTest.class,\n+                    VerificationOnMultipleMocksUsingMatchersTest.class,\n+                    VerificationUsingMatchersTest.class,\n+                    RelaxedVerificationInOrderTest.class,\n+                    DescriptiveMessagesWhenVerificationFailsTest.class,\n+                    DescriptiveMessagesWhenTimesXVerificationFailsTest.class,\n+                    BasicVerificationInOrderTest.class,\n+                    VerificationInOrderMixedWithOrdiraryVerificationTest.class,\n                     DescriptiveMessagesOnVerificationInOrderErrorsTest.class,\n                     InvalidStateDetectionTest.class,\n-                    StackTraceFilteringTest.class\n+                    ReplacingObjectMethodsTest.class,\n+                    StackTrackeChangingTest.class,\n+                    MockitoSampleTest.class,\n+                    PointingStackTraceToActualInvocationTest.class,\n+                    PointingStackTraceToActualInvocationChunkTest.class\n                 );\n                 \n                 if (!result.wasSuccessful()) {",
      "parent_sha": "2a38d545f5c81eb6866bf68ac2d9e3bc01e8d22a"
    }
  },
  {
    "oid": "ee9ba749fee1bf9c48429ce9083cd171709441e3",
    "message": "Fix incorrect Javadoc inline tag for MockitoJUnitRunner (#2816)",
    "date": "2022-12-04T02:34:16Z",
    "url": "https://github.com/mockito/mockito/commit/ee9ba749fee1bf9c48429ce9083cd171709441e3",
    "details": {
      "sha": "bfc938e2dc9f1ec3224a369cb7501e5a1f47d67a",
      "filename": "src/main/java/org/mockito/junit/MockitoJUnitRunner.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/ee9ba749fee1bf9c48429ce9083cd171709441e3/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fjunit%2FMockitoJUnitRunner.java",
      "raw_url": "https://github.com/mockito/mockito/raw/ee9ba749fee1bf9c48429ce9083cd171709441e3/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fjunit%2FMockitoJUnitRunner.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fjunit%2FMockitoJUnitRunner.java?ref=ee9ba749fee1bf9c48429ce9083cd171709441e3",
      "patch": "@@ -34,7 +34,7 @@\n  *       See {@link UnnecessaryStubbingException}.\n  *       Similar to JUnit rules, the runner also reports stubbing argument mismatches as console warnings\n  *       (see {@link MockitoHint}).\n- *       To opt-out from this feature, use {@code}&#064;RunWith(MockitoJUnitRunner.Silent.class){@code}\n+ *       To opt-out from this feature, use {@code @RunWith(MockitoJUnitRunner.Silent.class)}\n  *   <li>\n  *      Initializes mocks annotated with {@link Mock},\n  *      so that explicit usage of {@link MockitoAnnotations#openMocks(Object)} is not necessary.",
      "parent_sha": "2567f050f1e48da5acad2c5d616e565650f64b9d"
    }
  },
  {
    "oid": "ab6cf7fef02ec6e51ae2cd37c686252735abf6a6",
    "message": "fix grammar of sentence in Mockito javadoc (#479)",
    "date": "2016-07-03T21:15:33Z",
    "url": "https://github.com/mockito/mockito/commit/ab6cf7fef02ec6e51ae2cd37c686252735abf6a6",
    "details": {
      "sha": "27fc214ab81ab1827e75293831c63b02abf923f6",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/ab6cf7fef02ec6e51ae2cd37c686252735abf6a6/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/ab6cf7fef02ec6e51ae2cd37c686252735abf6a6/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=ab6cf7fef02ec6e51ae2cd37c686252735abf6a6",
      "patch": "@@ -1047,7 +1047,7 @@\n  *\n  * <h3 id=\"33\">33. <a class=\"meaningful_link\" href=\"#mockito_junit_rule\">(new) Mockito JUnit rule (Since 1.10.17)</a></h3>\n  *\n- * Mockito now offers a JUnit rule. Until now in JUnit there was two ways to initialize fields annotated by Mockito annotations\n+ * Mockito now offers a JUnit rule. Until now in JUnit there were two ways to initialize fields annotated by Mockito annotations\n  * such as <code>&#064;{@link Mock}</code>, <code>&#064;{@link Spy}</code>, <code>&#064;{@link InjectMocks}</code>, etc.\n  *\n  * <ul>",
      "parent_sha": "63117c911aa3035e1fb4a5c44dd879965ce3f9f2"
    }
  },
  {
    "oid": "c83de87155d6ef52fb4afd8db66622c27d946670",
    "message": "[#206] Fix issue related to windows path",
    "date": "2015-06-06T01:30:25Z",
    "url": "https://github.com/mockito/mockito/commit/c83de87155d6ef52fb4afd8db66622c27d946670",
    "details": {
      "sha": "e88b4935dfa4099886e5058e649eba55ee7119a4",
      "filename": "test/org/mockitoutil/ClassLoaders.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/mockito/mockito/blob/c83de87155d6ef52fb4afd8db66622c27d946670/test%2Forg%2Fmockitoutil%2FClassLoaders.java",
      "raw_url": "https://github.com/mockito/mockito/raw/c83de87155d6ef52fb4afd8db66622c27d946670/test%2Forg%2Fmockitoutil%2FClassLoaders.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitoutil%2FClassLoaders.java?ref=c83de87155d6ef52fb4afd8db66622c27d946670",
      "patch": "@@ -358,7 +358,8 @@ private boolean excludes(String qualifiedName, Set<String> packageFilters) {\n         }\n \n         private String classNameFor(File root, File file) {\n-            String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.');\n+            String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).\n+                    replace(File.separatorChar, '.');\n             return temp.subSequence(0, temp.indexOf(\".class\")).toString();\n         }\n ",
      "parent_sha": "2c59c46dff582d686d91e8b6cc3535e2beb3a87c"
    }
  },
  {
    "oid": "9e4163da37c37a341da3e91711fedb150117bcb5",
    "message": "Fixed typo\n\n(refactoring)",
    "date": "2016-04-09T20:14:05Z",
    "url": "https://github.com/mockito/mockito/commit/9e4163da37c37a341da3e91711fedb150117bcb5",
    "details": {
      "sha": "c63f59b87a65d00caf74d8e3fd8c6a5bef9421c3",
      "filename": "src/main/java/org/mockito/internal/util/reflection/Whitebox.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/9e4163da37c37a341da3e91711fedb150117bcb5/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Futil%2Freflection%2FWhitebox.java",
      "raw_url": "https://github.com/mockito/mockito/raw/9e4163da37c37a341da3e91711fedb150117bcb5/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Futil%2Freflection%2FWhitebox.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Futil%2Freflection%2FWhitebox.java?ref=9e4163da37c37a341da3e91711fedb150117bcb5",
      "patch": "@@ -40,7 +40,7 @@ private static Field getFieldFromHierarchy(Class<?> clazz, String field) {\n             throw new RuntimeException(\n                     \"You want me to get this field: '\" + field +\n                     \"' on this class: '\" + clazz.getSimpleName() + \n-                    \"' but this field is not declared withing hierarchy of this class!\");\n+                    \"' but this field is not declared within the hierarchy of this class!\");\n         }\n         return f;\n     }",
      "parent_sha": "bb5ecf9df948f5fce78d95594f3678a657bf56d7"
    }
  },
  {
    "oid": "cf6eb1c24deecf8a5fc23d4a0b09f46ba780d48f",
    "message": "- in order to have serializable mocks\n-- added documentation for serializable mocks\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401657",
    "date": "2009-11-06T05:59:34Z",
    "url": "https://github.com/mockito/mockito/commit/cf6eb1c24deecf8a5fc23d4a0b09f46ba780d48f",
    "details": {
      "sha": "2f00f181db5690775269d9b9b27173191ef788f9",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 39,
      "deletions": 15,
      "changes": 54,
      "blob_url": "https://github.com/mockito/mockito/blob/cf6eb1c24deecf8a5fc23d4a0b09f46ba780d48f/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/cf6eb1c24deecf8a5fc23d4a0b09f46ba780d48f/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=cf6eb1c24deecf8a5fc23d4a0b09f46ba780d48f",
      "patch": "@@ -6,24 +6,12 @@\n \r\n import org.mockito.internal.MockitoCore;\r\n import org.mockito.internal.creation.MockSettingsImpl;\r\n-import org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter;\r\n-import org.mockito.internal.stubbing.answers.CallsRealMethods;\r\n-import org.mockito.internal.stubbing.answers.DoesNothing;\r\n-import org.mockito.internal.stubbing.answers.Returns;\r\n-import org.mockito.internal.stubbing.answers.ThrowsException;\r\n-import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;\r\n-import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\r\n-import org.mockito.internal.stubbing.defaultanswers.ReturnsMocks;\r\n-import org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues;\r\n-import org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls;\r\n+import org.mockito.internal.stubbing.answers.*;\r\n+import org.mockito.internal.stubbing.defaultanswers.*;\r\n import org.mockito.internal.verification.VerificationModeFactory;\r\n import org.mockito.internal.verification.api.VerificationMode;\r\n import org.mockito.runners.MockitoJUnitRunner;\r\n-import org.mockito.stubbing.Answer;\r\n-import org.mockito.stubbing.DeprecatedOngoingStubbing;\r\n-import org.mockito.stubbing.OngoingStubbing;\r\n-import org.mockito.stubbing.Stubber;\r\n-import org.mockito.stubbing.VoidMethodStubbable;\r\n+import org.mockito.stubbing.*;\r\n \r\n /**\r\n  * <p align=\"left\"><img src=\"logo.jpg\"/></p>\r\n@@ -55,6 +43,7 @@\n  *      <a href=\"#17\">17. (**New**) Resetting mocks</a><br/>\r\n  *      <a href=\"#18\">18. (**New**) Troubleshooting & validating framework usage</a><br/>\r\n  *      <a href=\"#19\">19. (**New**) Aliases for behavior driven development</a><br/>\r\n+ *      <a href=\"#20\">20. (**New**) Serializable mocks</a><br/>\r\n  * </b>\r\n  * \r\n  * <p>\r\n@@ -597,6 +586,41 @@\n  * }  \r\n  * </pre>\r\n  * \r\n+ * <h3 id=\"20\">20. (**New**) Serializable mocks</h3>\r\n+ * \r\n+ * With this feature you can use a mock in a place that requires dependencies to be serializable.\r\n+ * <p>\r\n+ * WARNING: This should rarely be used.  If you are unit testing it should be rare that you need this behaviour. \r\n+ * <p>\r\n+ * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\r\n+ * was in a web environment and the objects from the external dependency were being serialized to pass between layers. \r\n+ * <p>\r\n+ * To create a mock that can be serialized the interface or class must implement the Serializable interface OR use the\r\n+ * {@link #withSettings().extraInterfaces(Serializable.class)}.  When creating the mock for the interface or class use the\r\n+ * withSettings().serializable() {@link org.mockito.MockSettings}.  \r\n+ * \r\n+ * <pre>\r\n+ * YourClass mock = mock(YourClass.class, withSettings().extraInterfaces(Serializable.class).serializable());\r\n+ * </pre>\r\n+ * \r\n+ * In the above example the first MockSettings that is added is the Serialiable interface.  If your class or interface\r\n+ * implements Serializable this is not needed.  The second MockSettings, .serializable(), tells mockito to use internal\r\n+ * classes that can be serialized.\r\n+ * <p>\r\n+ * The above mock can be serialized assuming all the normal <a href='http://www.uni-muenster.de/ZIV.BennoSueselbeck/java/jdk1.5.0_01/docs/api/java/io/Serializable.html'>\r\n+ * serialization requirements</a> are met by the interface or class.\r\n+ * <p>\r\n+ * Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version \r\n+ * which accepts MockSettings.  But no worries you simply use the same MockSettings that the spy(...) method uses plus the \r\n+ * serializable setting.\r\n+ * \r\n+ * <pre>\r\n+ * List<Object> list = new ArrayList<Object>();\r\n+ * List<Object> spy = mock(ArrayList.class, withSettings()\r\n+ *                 .spiedInstance(list)\r\n+ *                 .defaultAnswer(CALLS_REAL_METHODS)\r\n+ *                 .serializable());\r\n+ * </pre>\r\n  * \r\n  */\r\n @SuppressWarnings(\"unchecked\")\r",
      "parent_sha": "c427a8fc30b63e8666ee45d86fc4e31e50a000d5"
    }
  },
  {
    "oid": "74825cd4566ceb94fc39ef99d5dcbe230b3c4ff6",
    "message": "InvocationsPrinter string concatination (#1231)\n\nReplace string concatination inside an append call with a chained\r\nappend calls to make the code a tad easier to read, so the reader\r\nisn't left wondering why some of the concatinations are done with\r\nappends and some with the + operator.",
    "date": "2017-10-28T10:42:36Z",
    "url": "https://github.com/mockito/mockito/commit/74825cd4566ceb94fc39ef99d5dcbe230b3c4ff6",
    "details": {
      "sha": "04a4f1d3e2465c477e752cc3579bd4a851991dca",
      "filename": "src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/74825cd4566ceb94fc39ef99d5dcbe230b3c4ff6/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fdebugging%2FInvocationsPrinter.java",
      "raw_url": "https://github.com/mockito/mockito/raw/74825cd4566ceb94fc39ef99d5dcbe230b3c4ff6/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fdebugging%2FInvocationsPrinter.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fdebugging%2FInvocationsPrinter.java?ref=74825cd4566ceb94fc39ef99d5dcbe230b3c4ff6",
      "patch": "@@ -46,7 +46,7 @@ public boolean isOut(Stubbing s) {\n         if (unused.isEmpty()) {\n             return sb.toString();\n         }\n-        sb.append(\"[Mockito] Unused stubbings of: \" + mock).append(\"\\n\");\n+        sb.append(\"[Mockito] Unused stubbings of: \").append(mock).append(\"\\n\");\n \n         x = 1;\n         for(Stubbing s:stubbings) {",
      "parent_sha": "e10c5409e460c3ecd6b2ef9513a0b3802351d85f"
    }
  },
  {
    "oid": "1455d930bb6e69d42aff43fb0233efc2d1042511",
    "message": "Another Javadoc fix\n(transplanted from 3025399da0af3d1de3905589867c4f7ea890ff24)\n\n--HG--\nbranch : 1.9-rc1\nextra : transplant_source : 0%259%9D%A0%AF%3D%1D%E3%90U%89%86%7CO%7E%A8%90%FF%24",
    "date": "2011-11-24T09:07:13Z",
    "url": "https://github.com/mockito/mockito/commit/1455d930bb6e69d42aff43fb0233efc2d1042511",
    "details": {
      "sha": "6a905651f2e112a7856e8d9c10238a0675166549",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/1455d930bb6e69d42aff43fb0233efc2d1042511/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/1455d930bb6e69d42aff43fb0233efc2d1042511/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=1455d930bb6e69d42aff43fb0233efc2d1042511",
      "patch": "@@ -1665,7 +1665,7 @@ public static InOrder inOrder(Object... mocks) {\n      *  verifyNoMoreInteractions(ignoreStubs(mock1, mock2));\r\n      *\r\n      *  //Remember that ignoreStubs() <b>*changes*</b> the input mocks and returns them for convenience.\r\n-     * <pre class=\"code\"><code class=\"java\">\r\n+     * </code></pre>\r\n      * Ignoring stubs can be used with <b>verification in order</b>:\r\n      * <pre class=\"code\"><code class=\"java\">\r\n      *  List list = mock(List.class);\r",
      "parent_sha": "b64e775eadf52a3f3881d39a963fcb23adde4fa8"
    }
  },
  {
    "oid": "797d1a59042cb15e0c25d7cb690284626d015bc0",
    "message": "Made it simpler to use without extending\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401379",
    "date": "2009-05-01T18:30:26Z",
    "url": "https://github.com/mockito/mockito/commit/797d1a59042cb15e0c25d7cb690284626d015bc0",
    "details": {
      "sha": "a3bfbcb6b95bcc4e000498e0429c3efbc55746fb",
      "filename": "test/org/mockitoutil/TestBase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/797d1a59042cb15e0c25d7cb690284626d015bc0/test%2Forg%2Fmockitoutil%2FTestBase.java",
      "raw_url": "https://github.com/mockito/mockito/raw/797d1a59042cb15e0c25d7cb690284626d015bc0/test%2Forg%2Fmockitoutil%2FTestBase.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitoutil%2FTestBase.java?ref=797d1a59042cb15e0c25d7cb690284626d015bc0",
      "patch": "@@ -31,7 +31,7 @@ public void init() {\n         MockitoAnnotations.initMocks(this);\n     }\n     \n-    public void makeStackTracesClean() {\n+    public static void makeStackTracesClean() {\n         ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n     }\n     ",
      "parent_sha": "e75834900e6028f75453065c2c461c5312c77751"
    }
  },
  {
    "oid": "0778d42c9d6b57736d48f5838d69b3513805f952",
    "message": "Update ModuleHandler.java",
    "date": "2019-01-14T14:57:33Z",
    "url": "https://github.com/mockito/mockito/commit/0778d42c9d6b57736d48f5838d69b3513805f952",
    "details": {
      "sha": "4a4cc25d723a49c3cc9d6a05554a81e2aa6ec93f",
      "filename": "src/main/java/org/mockito/internal/creation/bytebuddy/ModuleHandler.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/mockito/mockito/blob/0778d42c9d6b57736d48f5838d69b3513805f952/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FModuleHandler.java",
      "raw_url": "https://github.com/mockito/mockito/raw/0778d42c9d6b57736d48f5838d69b3513805f952/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FModuleHandler.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FModuleHandler.java?ref=0778d42c9d6b57736d48f5838d69b3513805f952",
      "patch": "@@ -129,28 +129,31 @@ void adjustModuleGraph(Class<?> source, Class<?> target, boolean export, boolean\n                 targetVisible = classLoader == target.getClassLoader();\n             }\n             MethodCall targetLookup;\n+            Implementation.Composable implementation;\n             if (targetVisible) {\n                 targetLookup = MethodCall.invoke(getModule).onMethodCall(MethodCall.invoke(forName).with(target.getName()));\n+                implementation = StubMethod.INSTANCE;\n             } else {\n+                Class<?> intermediate;\n                 Field field;\n                 try {\n-                    field = byteBuddy.subclass(Object.class)\n+                    intermediate = byteBuddy.subclass(Object.class)\n                         .name(String.format(\"%s$%d\", \"org.mockito.inject.MockitoTypeCarrier\", Math.abs(random.nextInt())))\n                         .defineField(\"mockitoType\", Class.class, Visibility.PUBLIC, Ownership.STATIC)\n                         .make()\n                         .load(source.getClassLoader(), loader.resolveStrategy(source, source.getClassLoader(), false))\n-                        .getLoaded()\n-                        .getField(\"mockitoType\");\n+                        .getLoaded();\n+                    field = intermediate.getField(\"mockitoType\");\n                     field.set(null, target);\n                 } catch (Exception e) {\n                     throw new MockitoException(join(\"Could not create a carrier for making the Mockito type visible to \" + source,\n                         \"\",\n                         \"This is required to adjust the module graph to enable mock creation\"), e);\n                 }\n-                targetLookup = MethodCall.invoke(getModule).onField(new FieldDescription.ForLoadedField(field));\n+                targetLookup = MethodCall.invoke(getModule).onField(field));\n+                implementation = MethodCall.invoke(getModule).onMethodCall(MethodCall.invoke(forName).with(intermediate.getName()));\n             }\n             MethodCall sourceLookup = MethodCall.invoke(getModule).onMethodCall(MethodCall.invoke(forName).with(source.getName()));\n-            Implementation.Composable implementation = StubMethod.INSTANCE;\n             if (needsExport) {\n                 implementation = implementation.andThen(MethodCall.invoke(addExports)\n                     .onMethodCall(sourceLookup)",
      "parent_sha": "225a7857bab9f570f6aca005da0f9e19f5f3c4aa"
    }
  },
  {
    "oid": "ec06ddbc742aa8e756d4a5205baafaaff3b71c3a",
    "message": "Using MockWeakReference instead of WeakReference\n\nThis way we communicate the intent more clearly and we have better error reporting.",
    "date": "2018-03-11T15:33:52Z",
    "url": "https://github.com/mockito/mockito/commit/ec06ddbc742aa8e756d4a5205baafaaff3b71c3a",
    "details": {
      "sha": "f4a610854e44f87e8a57beada00112f842a3e5e2",
      "filename": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mockito/mockito/blob/ec06ddbc742aa8e756d4a5205baafaaff3b71c3a/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FMockMethodAdvice.java",
      "raw_url": "https://github.com/mockito/mockito/raw/ec06ddbc742aa8e756d4a5205baafaaff3b71c3a/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FMockMethodAdvice.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FMockMethodAdvice.java?ref=ec06ddbc742aa8e756d4a5205baafaaff3b71c3a",
      "patch": "@@ -144,14 +144,14 @@ private static class RealMethodCall implements RealMethod {\n \n         private final Method origin;\n \n-        private final WeakReference<Object> instanceRef;\n+        private final MockWeakReference<Object> instanceRef;\n \n         private final Object[] arguments;\n \n         private RealMethodCall(SelfCallInfo selfCallInfo, Method origin, Object instance, Object[] arguments) {\n             this.selfCallInfo = selfCallInfo;\n             this.origin = origin;\n-            this.instanceRef = new WeakReference<Object>(instance);\n+            this.instanceRef = new MockWeakReference<Object>(instance);\n             this.arguments = arguments;\n         }\n ",
      "parent_sha": "5738366c738107f096d26fda30d15e2a0dabff84"
    }
  },
  {
    "oid": "38ad73bded987a23f7462c44359544b85b1c36d2",
    "message": "Mentioned final method in one of the exception messages\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401287",
    "date": "2009-04-03T10:37:34Z",
    "url": "https://github.com/mockito/mockito/commit/38ad73bded987a23f7462c44359544b85b1c36d2",
    "details": {
      "sha": "32adfa90ccd5dce27e6a251d34d2498eb118f551",
      "filename": "src/org/mockito/exceptions/Reporter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/mockito/mockito/blob/38ad73bded987a23f7462c44359544b85b1c36d2/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java",
      "raw_url": "https://github.com/mockito/mockito/raw/38ad73bded987a23f7462c44359544b85b1c36d2/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java?ref=38ad73bded987a23f7462c44359544b85b1c36d2",
      "patch": "@@ -399,7 +399,8 @@ public void misplacedArgumentMatcher() {\n                 \"Here are examples of correct usage of argument matchers:\",\n                 \"    when(mock.get(anyInt())).thenReturn(null);\",\n                 \"    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());\",\n-                \"    verify(mock).someMethod(contains(\\\"foo\\\"));\"\n+                \"    verify(mock).someMethod(contains(\\\"foo\\\"))\",\n+                \"Also make sure you're *not* stubbing/verifying a final method with an argument matcher.\"\n                 ));\n     }\n }\n\\ No newline at end of file",
      "parent_sha": "a0b07ebca25217b44aa08afe8fe55a48e811aad4"
    }
  },
  {
    "oid": "e6fdaf766d42b9acda43ed1a7ced02b83859196d",
    "message": "Complete javadoc.",
    "date": "2020-09-14T17:56:33Z",
    "url": "https://github.com/mockito/mockito/commit/e6fdaf766d42b9acda43ed1a7ced02b83859196d",
    "details": {
      "sha": "fcebbb3ae7f20a5c2afb9e9d18f91225051ad482",
      "filename": "src/main/java/org/mockito/plugins/MockMaker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/e6fdaf766d42b9acda43ed1a7ced02b83859196d/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fplugins%2FMockMaker.java",
      "raw_url": "https://github.com/mockito/mockito/raw/e6fdaf766d42b9acda43ed1a7ced02b83859196d/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fplugins%2FMockMaker.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fplugins%2FMockMaker.java?ref=e6fdaf766d42b9acda43ed1a7ced02b83859196d",
      "patch": "@@ -85,7 +85,7 @@ public interface MockMaker {\n      *                {@link #getHandler(Object)} will return this instance.\n      * @param instance  The object to spy upon.\n      * @param <T> Type of the mock to return, actually the <code>settings.getTypeToMock</code>.\n-     * @return\n+     * @return The spy instance, if this mock maker supports direct spy creation.\n      * @since 3.5.0\n      */\n     default <T> Optional<T> createSpy(",
      "parent_sha": "b6ae6cf12b93ef9445e524224375aab1eb76129d"
    }
  },
  {
    "oid": "fef38427f75a6dda2d992f561bd573e67b128663",
    "message": "Update MockitoRule.java\n\nFixing the Javadoc to reflect the API for MockitoJUnitRule",
    "date": "2017-02-16T20:18:48Z",
    "url": "https://github.com/mockito/mockito/commit/fef38427f75a6dda2d992f561bd573e67b128663",
    "details": {
      "sha": "66ea64170e636c4d1b2269ed6bccd2d0abb01f13",
      "filename": "src/main/java/org/mockito/junit/MockitoRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/fef38427f75a6dda2d992f561bd573e67b128663/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fjunit%2FMockitoRule.java",
      "raw_url": "https://github.com/mockito/mockito/raw/fef38427f75a6dda2d992f561bd573e67b128663/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fjunit%2FMockitoRule.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Fjunit%2FMockitoRule.java?ref=fef38427f75a6dda2d992f561bd573e67b128663",
      "patch": "@@ -53,7 +53,7 @@\n  * public class ExampleTest {\n  *\n  *     //Creating new rule with recommended Strictness setting\n- *     &#064;Rule public MockitoRule rule = MockitoJUnit.strictness(Strictness.STRICT_STUBS).rule();\n+ *     &#064;Rule public MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);\n  *\n  *     &#064;Mock\n  *     private List list;",
      "parent_sha": "bd1359dd576e608dd701cf6d748e75a574ee3f59"
    }
  },
  {
    "oid": "5559044fba4835d8cd47171022accd36d5368a59",
    "message": "fix a word mistake",
    "date": "2019-11-13T07:01:54Z",
    "url": "https://github.com/mockito/mockito/commit/5559044fba4835d8cd47171022accd36d5368a59",
    "details": {
      "sha": "375c35514d8c86a090acaba18c58e420017d3615",
      "filename": "src/main/java/org/mockito/InjectMocks.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/5559044fba4835d8cd47171022accd36d5368a59/src%2Fmain%2Fjava%2Forg%2Fmockito%2FInjectMocks.java",
      "raw_url": "https://github.com/mockito/mockito/raw/5559044fba4835d8cd47171022accd36d5368a59/src%2Fmain%2Fjava%2Forg%2Fmockito%2FInjectMocks.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FInjectMocks.java?ref=5559044fba4835d8cd47171022accd36d5368a59",
      "patch": "@@ -39,7 +39,7 @@\n  *     then, if there is several property of the same type, by the match of the property name and the mock name.\n  *     <p><u>Note 1:</u> If you have properties with the same type (or same erasure), it's better to name all &#064;Mock\n  *     annotated fields with the matching properties, otherwise Mockito might get confused and injection won't happen.</p>\n- *     <p><u>Note 2:</u> If &#064;InjectMocks instance wasn't initialized before and have a no-arg constructor,\n+ *     <p><u>Note 2:</u> If &#064;InjectMocks instance wasn't initialized before and has a no-arg constructor,\n  *     then it will be initialized with this constructor.</p></li>\n  *\n  *     <li><strong>Field injection</strong>; mocks will first be resolved by type (if a single type match",
      "parent_sha": "4e533432f2164fd45e8101e34591d7859f68e494"
    }
  },
  {
    "oid": "38ff31a6d6a1fbc8c307fe8d554c33016ee16ce0",
    "message": "Added missing documentation for public method",
    "date": "2017-08-29T03:04:38Z",
    "url": "https://github.com/mockito/mockito/commit/38ff31a6d6a1fbc8c307fe8d554c33016ee16ce0",
    "details": {
      "sha": "48ec64baab12f4e3f60dd5d916cc428a46de82ce",
      "filename": "src/main/java/org/mockito/MockingDetails.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/mockito/mockito/blob/38ff31a6d6a1fbc8c307fe8d554c33016ee16ce0/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockingDetails.java",
      "raw_url": "https://github.com/mockito/mockito/raw/38ff31a6d6a1fbc8c307fe8d554c33016ee16ce0/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockingDetails.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockingDetails.java?ref=38ff31a6d6a1fbc8c307fe8d554c33016ee16ce0",
      "patch": "@@ -111,7 +111,13 @@ public interface MockingDetails {\n     String printInvocations();\n \n     /**\n-     * TODO SZ\n+     * Returns the {@link MockHandler} associated with this mock object.\n+     * The handler is the core of Mockito mock object method handling.\n+     * This method is useful for framework integrators.\n+     * For example, other frameworks may use mock handler to simulate method calls on the Mock object.\n+     *\n+     * @return mock handler instance of this mock\n+     * @since 2.10.0\n      */\n     MockHandler getMockHandler();\n }",
      "parent_sha": "4577fecab8133cdc918f0f309ed9f1666f67cb43"
    }
  },
  {
    "oid": "6da81170f6f432e8c57285010d32eced62c1e066",
    "message": "fixed javadocs\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40840",
    "date": "2008-08-29T11:11:12Z",
    "url": "https://github.com/mockito/mockito/commit/6da81170f6f432e8c57285010d32eced62c1e066",
    "details": {
      "sha": "6ed41c09a02913dc68cdad910e7474f2ea685e89",
      "filename": "src/org/mockito/MockitoAnnotations.java",
      "status": "modified",
      "additions": 8,
      "deletions": 13,
      "changes": 21,
      "blob_url": "https://github.com/mockito/mockito/blob/6da81170f6f432e8c57285010d32eced62c1e066/src%2Forg%2Fmockito%2FMockitoAnnotations.java",
      "raw_url": "https://github.com/mockito/mockito/raw/6da81170f6f432e8c57285010d32eced62c1e066/src%2Forg%2Fmockito%2FMockitoAnnotations.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockitoAnnotations.java?ref=6da81170f6f432e8c57285010d32eced62c1e066",
      "patch": "@@ -56,23 +56,18 @@\n public class MockitoAnnotations {\n \n     /**\n-     * TODO fix the message\n-     * <b>Deprecated</b> Use {@link Mock} annotation instead\n+     * <b>Deprecated</b> \n+     * Use top-level {@link org.mockito.Mock} annotation instead\n      * <p>\n-     * Annotation is now a top-level class so that IDEs are not confused.\n+     * When &#064;Mock annotation was implemented as an inner class then users experienced problems with autocomplete features in IDEs. \n+     * Hence &#064;Mock was made a top-level class.  \n      * <p>\n-     * Allows shorthand mock creation, see examples in javadoc for {@link MockitoAnnotations} class.\n+     * How to fix deprecation warnings? \n+     * Typically, you can just <b>search:</b> import org.mockito.MockitoAnnotations.Mock; <b>and replace with:</b> import org.mockito.Mock;\n      * <p>\n-     * To fix deprecation warnings just search & replace:\n-     * Search:\n-     *  import org.mockito.MockitoAnnotations.Mock;\n-     * <p>\n-     *  with:\n-     * <p>\n-     *  import org.mockito.Mock;\n-     * \n-     * @deprecated Use {@link Mock} annotation instead\n+     * Sorry for making your code littered with deprecation warnings but this change was required to make Mockito better. Hope you still love your little spying framework...\n      * \n+     * @deprecated Use {@link org.mockito.Mock} annotation instead\n      */\n     @Target( { FIELD })\n     @Retention(RetentionPolicy.RUNTIME)",
      "parent_sha": "228731509aebc847c955e8ec7267380ecc24331c"
    }
  },
  {
    "oid": "142cc27a18eeed84c901bcbfd89cdb655682028e",
    "message": "Updated test\n\n- Great feedback from Tim\n- This way we have some real life use case for Silent runner.",
    "date": "2016-07-23T03:21:31Z",
    "url": "https://github.com/mockito/mockito/commit/142cc27a18eeed84c901bcbfd89cdb655682028e",
    "details": {
      "sha": "8d6aeeddb7d6356408184d5161a09aef46a125fe",
      "filename": "src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/mockito/mockito/blob/142cc27a18eeed84c901bcbfd89cdb655682028e/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fmatchers%2FInvalidUseOfMatchersTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/142cc27a18eeed84c901bcbfd89cdb655682028e/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fmatchers%2FInvalidUseOfMatchersTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fmatchers%2FInvalidUseOfMatchersTest.java?ref=142cc27a18eeed84c901bcbfd89cdb655682028e",
      "patch": "@@ -6,18 +6,19 @@\n package org.mockitousage.matchers;\n \n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.mockito.AdditionalMatchers;\n import org.mockito.Mockito;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.fail;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.when;\n \n-//TODO make this working with MockitoJUnitRunner with opt-out unnecessary stubs validation\n-//@RunWith(MockitoJUnitRunner.class)\n+@RunWith(MockitoJUnitRunner.Silent.class)\n public class InvalidUseOfMatchersTest {\n \n     private IMethods mock = Mockito.mock(IMethods.class);",
      "parent_sha": "202a851dfc54fd044ee43b31432236acf810b401"
    }
  },
  {
    "oid": "b8ef61b55e8c6307d7ba2b3668b7c529e92f2191",
    "message": "Changed the name of the internal class so that junit doesn't freak out\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401358",
    "date": "2009-04-21T21:40:22Z",
    "url": "https://github.com/mockito/mockito/commit/b8ef61b55e8c6307d7ba2b3668b7c529e92f2191",
    "details": {
      "sha": "b342f5a5cc61003f10e1f9cf3cd9b735819d2908",
      "filename": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/mockito/mockito/blob/b8ef61b55e8c6307d7ba2b3668b7c529e92f2191/test%2Forg%2Fmockitousage%2Fstubbing%2FCallingRealMethodTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/b8ef61b55e8c6307d7ba2b3668b7c529e92f2191/test%2Forg%2Fmockitousage%2Fstubbing%2FCallingRealMethodTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitousage%2Fstubbing%2FCallingRealMethodTest.java?ref=b8ef61b55e8c6307d7ba2b3668b7c529e92f2191",
      "patch": "@@ -26,9 +26,9 @@\n  */\r\n public class CallingRealMethodTest extends TestBase {\r\n     \r\n-    @Mock UnderTest mock;\r\n+    @Mock TestedObject mock;\r\n \r\n-    static class UnderTest {\r\n+    static class TestedObject {\r\n         String value;\r\n \r\n         void setValue(String value) {\r\n@@ -70,14 +70,14 @@ public void shouldExecuteRealMethod() {\n \r\n     @Test\r\n     public void shouldCallRealMethodByDefault() {\r\n-        UnderTest mock = mock(UnderTest.class, CALLS_REAL_METHODS);\r\n+        TestedObject mock = mock(TestedObject.class, CALLS_REAL_METHODS);\r\n \r\n         Assert.assertEquals(\"HARD_CODED_RETURN_VALUE\", mock.getValue());\r\n     }\r\n \r\n     @Test\r\n     public void shouldNotCallRealMethodWhenStubbedLater() {\r\n-        UnderTest mock = mock(UnderTest.class);\r\n+        TestedObject mock = mock(TestedObject.class);\r\n \r\n         when(mock.getValue()).thenCallRealMethod();\r\n         when(mock.getValue()).thenReturn(\"FAKE_VALUE\");\r",
      "parent_sha": "391944034566d8a6f43d96f6e9282f10878e1d0e"
    }
  },
  {
    "oid": "77fe97220cc0715dd34f4201da5247d9300a3ae4",
    "message": "Add test for removal of ByteBuddy stacktrace elements",
    "date": "2016-01-23T14:20:27Z",
    "url": "https://github.com/mockito/mockito/commit/77fe97220cc0715dd34f4201da5247d9300a3ae4",
    "details": {
      "sha": "9eef3d2e27b5ce6d456b922696c7fe9929e89334",
      "filename": "src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/mockito/mockito/blob/77fe97220cc0715dd34f4201da5247d9300a3ae4/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fexceptions%2Fstacktrace%2FStackTraceFilterTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/77fe97220cc0715dd34f4201da5247d9300a3ae4/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fexceptions%2Fstacktrace%2FStackTraceFilterTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fexceptions%2Fstacktrace%2FStackTraceFilterTest.java?ref=77fe97220cc0715dd34f4201da5247d9300a3ae4",
      "patch": "@@ -26,7 +26,20 @@ public void shouldFilterOutCglibGarbage() {\n         \n         assertThat(filtered, hasOnlyThoseClasses(\"MockitoExampleTest\"));\n     }\n-    \n+\n+    @Test\n+    public void shouldFilterOutByteBuddyGarbage() {\n+        StackTraceElement[] t = new TraceBuilder().classes(\n+                \"MockitoExampleTest\",\n+                \"org.testcase.MockedClass$MockitoMock$1882975947.doSomething(Unknown Source)\"\n+        ).toTraceArray();\n+\n+        StackTraceElement[] filtered = filter.filter(t, false);\n+\n+        assertThat(filtered, hasOnlyThoseClasses(\"MockitoExampleTest\"));\n+    }\n+\n+\n     @Test\n     public void shouldFilterOutMockitoPackage() {\n         StackTraceElement[] t = new TraceBuilder().classes(",
      "parent_sha": "820272b5172fcaeff6cdf64ac090e03df97245f4"
    }
  },
  {
    "oid": "b4d8f5aa360a90ac5e4a7a38de2e660bdf2865e0",
    "message": "Fix Javadoc for Mockito. (#2718)",
    "date": "2022-08-01T17:29:14Z",
    "url": "https://github.com/mockito/mockito/commit/b4d8f5aa360a90ac5e4a7a38de2e660bdf2865e0",
    "details": {
      "sha": "9f7383f23294ca77c6f51e7c9b9dd56937331fe8",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/mockito/mockito/blob/b4d8f5aa360a90ac5e4a7a38de2e660bdf2865e0/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/b4d8f5aa360a90ac5e4a7a38de2e660bdf2865e0/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=b4d8f5aa360a90ac5e4a7a38de2e660bdf2865e0",
      "patch": "@@ -1259,19 +1259,19 @@\n  * void receive(String item);\n  *\n  * // Java 8 - style 1\n- * doAnswer(AdditionalAnswers.&lt;String,Callback&gt;answerVoid((operand, callback) -&gt; callback.receive(\"dummy\"))\n+ * doAnswer(AdditionalAnswers.&lt;String,Callback&gt;answerVoid((operand, callback) -&gt; callback.receive(\"dummy\")))\n  *     .when(mock).execute(anyString(), any(Callback.class));\n  *\n  * // Java 8 - style 2 - assuming static import of AdditionalAnswers\n- * doAnswer(answerVoid((String operand, Callback callback) -&gt; callback.receive(\"dummy\"))\n+ * doAnswer(answerVoid((String operand, Callback callback) -&gt; callback.receive(\"dummy\")))\n  *     .when(mock).execute(anyString(), any(Callback.class));\n  *\n  * // Java 8 - style 3 - where mocking function to is a static member of test class\n  * private static void dummyCallbackImpl(String operation, Callback callback) {\n  *     callback.receive(\"dummy\");\n  * }\n  *\n- * doAnswer(answerVoid(TestClass::dummyCallbackImpl)\n+ * doAnswer(answerVoid(TestClass::dummyCallbackImpl))\n  *     .when(mock).execute(anyString(), any(Callback.class));\n  *\n  * // Java 7\n@@ -1287,7 +1287,7 @@\n  *\n  * // this could be mocked\n  * // Java 8\n- * doAnswer(AdditionalAnswers.&lt;Boolean,String,String&gt;answer((input1, input2) -&gt; input1.equals(input2))))\n+ * doAnswer(AdditionalAnswers.&lt;Boolean,String,String&gt;answer((input1, input2) -&gt; input1.equals(input2)))\n  *     .when(mock).execute(anyString(), anyString());\n  *\n  * // Java 7",
      "parent_sha": "507ac8770d7e8ef78db465c54f47e7b57258c370"
    }
  },
  {
    "oid": "c0062f52a259683138842782c958f2c6e3f191a3",
    "message": "Removed unnecessary test",
    "date": "2017-08-27T20:00:44Z",
    "url": "https://github.com/mockito/mockito/commit/c0062f52a259683138842782c958f2c6e3f191a3",
    "details": {
      "sha": "63118e5f11cfcd454087cdf7bfd21d488996cd2f",
      "filename": "src/test/java/org/mockito/internal/stubbing/answers/CallsRealMethodsTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 18,
      "changes": 20,
      "blob_url": "https://github.com/mockito/mockito/blob/c0062f52a259683138842782c958f2c6e3f191a3/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fanswers%2FCallsRealMethodsTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/c0062f52a259683138842782c958f2c6e3f191a3/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fanswers%2FCallsRealMethodsTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockito%2Finternal%2Fstubbing%2Fanswers%2FCallsRealMethodsTest.java?ref=c0062f52a259683138842782c958f2c6e3f191a3",
      "patch": "@@ -9,36 +9,20 @@\n  */\n package org.mockito.internal.stubbing.answers;\n \n-import java.util.ArrayList;\n import org.assertj.core.api.Assertions;\n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.invocation.Invocation;\n \n+import java.util.ArrayList;\n+\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.RETURNS_DEFAULTS;\n import static org.mockito.Mockito.mock;\n \n public class CallsRealMethodsTest {\n-    @Test\n-    public void should_invoke_real_method() throws Throwable {\n-        class Concrete {\n-            void concrete() {\n-                throw new RuntimeException(\"real code\");\n-            }\n-        }\n-        Concrete mock = mock(Concrete.class);\n-\n-        Invocation concrete = new InvocationBuilder().mock(mock).method(Concrete.class.getDeclaredMethod(\"concrete\")).toInvocation();\n-        try {\n-            new CallsRealMethods().answer(concrete);\n-        } catch (RuntimeException throwable) {\n-            throwable.printStackTrace();\n-            assertThat(throwable).hasMessage(\"real code\");\n-        }\n-    }\n \n     @Test\n     public void should_delegate_to_returns_default_when_abstract_method() throws Throwable {",
      "parent_sha": "69b2d515f3100762f3a83a7570d59c0b8652c97a"
    }
  },
  {
    "oid": "5f061e30e8890b096a15b359aa625a2fa80e8aae",
    "message": "Tidy up: renamed a test, added javadoc, removed @Ignored test",
    "date": "2014-09-28T18:13:56Z",
    "url": "https://github.com/mockito/mockito/commit/5f061e30e8890b096a15b359aa625a2fa80e8aae",
    "details": {
      "sha": "066aef14164ebe4d231e7492a40baf2b0b1d7ec3",
      "filename": "test/org/mockitousage/bugs/ParentClassNotPublicTest.java",
      "status": "renamed",
      "additions": 90,
      "deletions": 93,
      "changes": 183,
      "blob_url": "https://github.com/mockito/mockito/blob/5f061e30e8890b096a15b359aa625a2fa80e8aae/test%2Forg%2Fmockitousage%2Fbugs%2FParentClassNotPublicTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/5f061e30e8890b096a15b359aa625a2fa80e8aae/test%2Forg%2Fmockitousage%2Fbugs%2FParentClassNotPublicTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/test%2Forg%2Fmockitousage%2Fbugs%2FParentClassNotPublicTest.java?ref=5f061e30e8890b096a15b359aa625a2fa80e8aae",
      "patch": "@@ -1,94 +1,91 @@\n-/*\r\n- * Copyright (c) 2007 Mockito contributors\r\n- * This program is made available under the terms of the MIT License.\r\n- */\r\n-package org.mockitousage.bugs;\r\n-\r\n-import org.fest.assertions.Assertions;\r\n-import org.junit.Ignore;\r\n-import org.junit.Test;\r\n-import org.mockito.exceptions.misusing.CannotStubVoidMethodWithReturnValue;\r\n-import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\r\n-import org.mockito.exceptions.misusing.MissingMethodInvocationException;\r\n-import org.mockito.exceptions.misusing.UnfinishedVerificationException;\r\n-import org.mockito.internal.exceptions.MockitoLimitations;\r\n-import org.mockitoutil.TestBase;\r\n-\r\n-import java.util.List;\r\n-\r\n-import static org.mockito.Matchers.anyObject;\r\n-import static org.mockito.Mockito.*;\r\n-\r\n-//see bug 212\r\n-public class ParentClassNotPublicVeryWeirdBugTest extends TestBase {\r\n-    \r\n-    class SuperClass {\r\n-        public boolean isValid() {\r\n-          return false;\r\n-        }\r\n-        public int arg(Object o) { return 0; }\r\n-      }\r\n-    \r\n-    public class ClassForMocking extends SuperClass {\r\n-    }\r\n-    \r\n-    @Test\r\n-    @Ignore(\"needs fixing\")\r\n-    public void is_valid_mocked() {\r\n-        ClassForMocking clazzMock = mock(ClassForMocking.class);\r\n-        when(clazzMock.isValid()).thenReturn(true);\r\n-    }\r\n-\r\n-    @Test\r\n-    public void hints_that_parent_not_public_during_stubbing() throws Exception {\r\n-        ClassForMocking clazzMock = mock(ClassForMocking.class);\r\n-        try {\r\n-            when(clazzMock.isValid()).thenReturn(true);\r\n-            fail();\r\n-        } catch (MissingMethodInvocationException e) {\r\n-            Assertions.assertThat(e.getMessage())\r\n-                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\r\n-        }\r\n-    }\r\n-\r\n-    @Test\r\n-    public void hints_that_parent_not_public_during_stubbing_start() throws Exception {\r\n-        ClassForMocking clazzMock = mock(ClassForMocking.class);\r\n-        mock(List.class).clear();\r\n-        try {\r\n-            //Mockito thinks that we're stubbing void 'clear' method here and reports that boolean value cannot stub void method\r\n-            when(clazzMock.isValid()).thenReturn(true);\r\n-            fail();\r\n-        } catch (CannotStubVoidMethodWithReturnValue e) {\r\n-            Assertions.assertThat(e.getMessage())\r\n-                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\r\n-        }\r\n-    }\r\n-\r\n-    @Test\r\n-    public void hints_that_parent_not_public_during_verify() throws Exception {\r\n-        ClassForMocking clazzMock = mock(ClassForMocking.class);\r\n-        verify(clazzMock).isValid();\r\n-        try {\r\n-            //Since Mockito did not see 'isValid()' method, we will report unfinished verification\r\n-            verify(clazzMock);\r\n-            fail();\r\n-        } catch (UnfinishedVerificationException e) {\r\n-            Assertions.assertThat(e.getMessage())\r\n-                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\r\n-        }\r\n-    }\r\n-\r\n-    @Test\r\n-    public void hints_that_parent_not_public_when_misplaced_matchers_detected() throws Exception {\r\n-        ClassForMocking clazzMock = mock(ClassForMocking.class);\r\n-        try {\r\n-            //Mockito does not see 'arg()' method so the anyObject() matcher is reported as misplaced\r\n-            when(clazzMock.arg(anyObject())).thenReturn(0);\r\n-            fail();\r\n-        } catch (InvalidUseOfMatchersException e) {\r\n-            Assertions.assertThat(e.getMessage())\r\n-                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\r\n-        }\r\n-    }\r\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import org.fest.assertions.Assertions;\n+import org.junit.Test;\n+import org.mockito.exceptions.misusing.CannotStubVoidMethodWithReturnValue;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n+import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n+import org.mockito.internal.exceptions.MockitoLimitations;\n+import org.mockitoutil.TestBase;\n+\n+import java.util.List;\n+\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * See bug 212\n+ *\n+ * Mocking methods that are declared on a non-public parent is not supported.\n+ * We cannot really fail fast during mock creation because one might mock a method that is not declared on a parent - this would be valid.\n+ */\n+public class ParentClassNotPublicTest extends TestBase {\n+    \n+    class SuperClass {\n+        public boolean isValid() {\n+          return false;\n+        }\n+        public int arg(Object o) { return 0; }\n+      }\n+    \n+    public class ClassForMocking extends SuperClass {\n+    }\n+\n+    @Test\n+    public void hints_that_parent_not_public_during_stubbing() throws Exception {\n+        ClassForMocking clazzMock = mock(ClassForMocking.class);\n+        try {\n+            when(clazzMock.isValid()).thenReturn(true);\n+            fail();\n+        } catch (MissingMethodInvocationException e) {\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n+        }\n+    }\n+\n+    @Test\n+    public void hints_that_parent_not_public_during_stubbing_start() throws Exception {\n+        ClassForMocking clazzMock = mock(ClassForMocking.class);\n+        mock(List.class).clear();\n+        try {\n+            //Mockito thinks that we're stubbing void 'clear' method here and reports that boolean value cannot stub void method\n+            when(clazzMock.isValid()).thenReturn(true);\n+            fail();\n+        } catch (CannotStubVoidMethodWithReturnValue e) {\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n+        }\n+    }\n+\n+    @Test\n+    public void hints_that_parent_not_public_during_verify() throws Exception {\n+        ClassForMocking clazzMock = mock(ClassForMocking.class);\n+        verify(clazzMock).isValid();\n+        try {\n+            //Since Mockito did not see 'isValid()' method, we will report unfinished verification\n+            verify(clazzMock);\n+            fail();\n+        } catch (UnfinishedVerificationException e) {\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n+        }\n+    }\n+\n+    @Test\n+    public void hints_that_parent_not_public_when_misplaced_matchers_detected() throws Exception {\n+        ClassForMocking clazzMock = mock(ClassForMocking.class);\n+        try {\n+            //Mockito does not see 'arg()' method so the anyObject() matcher is reported as misplaced\n+            when(clazzMock.arg(anyObject())).thenReturn(0);\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n+        }\n+    }\n }\n\\ No newline at end of file",
      "previous_filename": "test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java",
      "parent_sha": "f76811e7e735962627317dd09a1f8258573bb14f"
    }
  },
  {
    "oid": "f008531496ac1d22a7356a4a51018d248dd04e9b",
    "message": "Reword documentation of `reset` (#3060)\n\nFixes #3046",
    "date": "2023-07-13T16:20:27Z",
    "url": "https://github.com/mockito/mockito/commit/f008531496ac1d22a7356a4a51018d248dd04e9b",
    "details": {
      "sha": "ee5a13303858f684d164c80d1e3d32846e6f6631",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/f008531496ac1d22a7356a4a51018d248dd04e9b/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/f008531496ac1d22a7356a4a51018d248dd04e9b/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=f008531496ac1d22a7356a4a51018d248dd04e9b",
      "patch": "@@ -749,7 +749,7 @@\n  *\n  * <h3 id=\"17\">17. <a class=\"meaningful_link\" href=\"#resetting_mocks\" name=\"resetting_mocks\">Resetting mocks</a> (Since 1.8.0)</h3>\n  *\n- * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n+ * Using this method could be an indication of poor testing.\n  * Normally, you don't need to reset your mocks, just create new mocks for each test method.\n  * <p>\n  * Instead of <code>reset()</code> please consider writing simple, small and focused test methods over lengthy, over-specified tests.",
      "parent_sha": "69e0a6c54f21ae26f5bd7927e8326bd567934fef"
    }
  },
  {
    "oid": "4c1a6c2d1012c34ce9e72f9fd29d2346cec6dc72",
    "message": "Renaming the isEmpty call on the String as it's part of the JDK 6. Added better Javadoc on ClassPathLoader",
    "date": "2012-03-30T16:45:16Z",
    "url": "https://github.com/mockito/mockito/commit/4c1a6c2d1012c34ce9e72f9fd29d2346cec6dc72",
    "details": {
      "sha": "104f7e0f66ec876e5b360f77ac3a434394ed49e9",
      "filename": "src/org/mockito/internal/configuration/ClassPathLoader.java",
      "status": "modified",
      "additions": 50,
      "deletions": 12,
      "changes": 62,
      "blob_url": "https://github.com/mockito/mockito/blob/4c1a6c2d1012c34ce9e72f9fd29d2346cec6dc72/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FClassPathLoader.java",
      "raw_url": "https://github.com/mockito/mockito/raw/4c1a6c2d1012c34ce9e72f9fd29d2346cec6dc72/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FClassPathLoader.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fconfiguration%2FClassPathLoader.java?ref=4c1a6c2d1012c34ce9e72f9fd29d2346cec6dc72",
      "patch": "@@ -21,8 +21,45 @@\n import java.util.Enumeration;\r\n import java.util.List;\r\n \r\n+/**\r\n+ * Loads configuration or extension points available in the classpath.\r\n+ *\r\n+ * <p>\r\n+ * <ul>\r\n+ *     <li>\r\n+ *         Can load the mockito configuration. The user who want to provide his own mockito configuration\r\n+ *         should write the class <code>org.mockito.configuration.MockitoConfiguration</code> that implements\r\n+ *         {@link IMockitoConfiguration}. For example :\r\n+ *         <pre class=\"code\"><code class=\"java\">\r\n+ * package org.mockito.configuration;\r\n+ *\r\n+ * //...\r\n+ *\r\n+ * public class MockitoConfiguration implements IMockitoConfiguration {\r\n+ *     boolean enableClassCache() { return false; }\r\n+ *\r\n+ *     // ...\r\n+ * }\r\n+ *     </code></pre>\r\n+ *     </li>\r\n+ *     <li>\r\n+ *         Can load available mockito extensions. Currently Mockito only have one extension point the\r\n+ *         {@link MockMaker}. This extension point allows a user to provide his own bytecode engine to build mocks.\r\n+ *         <br>Suppose you wrote an extension to create mocks with some <em>Awesome</em> library, in order to tell\r\n+ *         Mockito to use it you need to put in your classpath\r\n+ *         <ol style=\"list-style-type: lower-alpha\">\r\n+ *             <li>The implementation itself, for example <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\r\n+ *             <li>A file named <code>org.mockito.plugins.MockMaker</code> in a folder named\r\n+ *             <code>mockito-extensions</code>, the content of this file need to have <strong>one</strong> line with\r\n+ *             the qualified name <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\r\n+ *         </ol>\r\n+ *     </li>\r\n+ * </ul>\r\n+ * </p>\r\n+ */\r\n public class ClassPathLoader {\r\n     private static final MockMaker mockMaker = findPlatformMockMaker();\r\n+    public static final String MOCKITO_CONFIGURATION_CLASS_NAME = \"org.mockito.configuration.MockitoConfiguration\";\r\n \r\n     /**\r\n      * @return configuration loaded from classpath or null\r\n@@ -32,7 +69,7 @@ public IMockitoConfiguration loadConfiguration() {\n         //Trying to get config from classpath\r\n         Class configClass;\r\n         try {\r\n-            configClass = (Class) Class.forName(\"org.mockito.configuration.MockitoConfiguration\");\r\n+            configClass = (Class) Class.forName(MOCKITO_CONFIGURATION_CLASS_NAME);\r\n         } catch (ClassNotFoundException e) {\r\n             //that's ok, it means there is no global config, using default one.\r\n             return null;\r\n@@ -41,16 +78,17 @@ public IMockitoConfiguration loadConfiguration() {\n         try {\r\n             return (IMockitoConfiguration) configClass.newInstance();\r\n         } catch (ClassCastException e) {\r\n-            throw new MockitoConfigurationException(\"\\n\" +\r\n-                    \"MockitoConfiguration class must implement org.mockito.configuration.IMockitoConfiguration interface.\", e);\r\n+            throw new MockitoConfigurationException(\"MockitoConfiguration class must implement \" + IMockitoConfiguration.class.getName() + \" interface.\", e);\r\n         } catch (Exception e) {\r\n-            throw new MockitoConfigurationException(\"\\n\" +\r\n-                    \"Unable to instantiate org.mockito.configuration.MockitoConfiguration class. Does it have a safe, no-arg constructor?\", e);\r\n+            throw new MockitoConfigurationException(\"Unable to instantiate \" + MOCKITO_CONFIGURATION_CLASS_NAME +\" class. Does it have a safe, no-arg constructor?\", e);\r\n         }\r\n     }\r\n \r\n     /**\r\n-     * Returns the best mock maker available for the current runtime.\r\n+     * Returns the implementation of the mock maker available for the current runtime.\r\n+     *\r\n+     * <p>Returns {@link CglibMockMaker} if no {@link MockMaker} extension exists\r\n+     * or is visible in the current classpath.</p>\r\n      */\r\n     public static MockMaker getMockMaker() {\r\n         return mockMaker;\r\n@@ -60,7 +98,7 @@ public static MockMaker getMockMaker() {\n      * Scans the classpath to find a mock maker plugin if one is available,\r\n      * allowing mockito to run on alternative platforms like Android.\r\n      */\r\n-    private static MockMaker findPlatformMockMaker() {\r\n+    static MockMaker findPlatformMockMaker() {\r\n         for (MockMaker mockMaker : loadImplementations(MockMaker.class)) {\r\n             return mockMaker; // return the first one service loader finds (if any)\r\n         }\r\n@@ -91,12 +129,12 @@ static <T> List<T> loadImplementations(Class<T> service) {\n                 in = resource.openStream();\r\n                 for (String line : readerToLines(new InputStreamReader(in, \"UTF-8\"))) {\r\n                     String name = stripCommentAndWhitespace(line);\r\n-                    if (!name.isEmpty()) {\r\n+                    if (name.length() != 0) {\r\n                         result.add(service.cast(loader.loadClass(name).newInstance()));\r\n                     }\r\n                 }\r\n             } catch (Exception e) {\r\n-                throw new MockitoException(\r\n+                throw new MockitoConfigurationException(\r\n                         \"Failed to load \" + service + \" using \" + resource, e);\r\n             } finally {\r\n                 closeQuietly(in);\r\n@@ -105,7 +143,7 @@ static <T> List<T> loadImplementations(Class<T> service) {\n         return result;\r\n     }\r\n \r\n-    static List<String> readerToLines(Reader reader) throws IOException {\r\n+    private static List<String> readerToLines(Reader reader) throws IOException {\r\n         List<String> result = new ArrayList<String>();\r\n         BufferedReader lineReader = new BufferedReader(reader);\r\n         String line;\r\n@@ -115,15 +153,15 @@ static List<String> readerToLines(Reader reader) throws IOException {\n         return result;\r\n     }\r\n \r\n-    static String stripCommentAndWhitespace(String line) {\r\n+    private static String stripCommentAndWhitespace(String line) {\r\n         int hash = line.indexOf('#');\r\n         if (hash != -1) {\r\n             line = line.substring(0, hash);\r\n         }\r\n         return line.trim();\r\n     }\r\n \r\n-    static void closeQuietly(InputStream in) {\r\n+    private static void closeQuietly(InputStream in) {\r\n         if (in != null) {\r\n             try {\r\n                 in.close();\r",
      "parent_sha": "b796d2046e74d89f0beb821b330bce972fa4eab5"
    }
  },
  {
    "oid": "328c7c3b8cb5568dbc3483a756afb1aaec34c7b3",
    "message": "Added integration test for finishMocking(failure)",
    "date": "2018-02-05T03:20:16Z",
    "url": "https://github.com/mockito/mockito/commit/328c7c3b8cb5568dbc3483a756afb1aaec34c7b3",
    "details": {
      "sha": "960d8885890de815f7a1855b6ba2595ba66e7ba4",
      "filename": "src/test/java/org/mockitousage/session/MockitoSessionTest.java",
      "status": "modified",
      "additions": 27,
      "deletions": 1,
      "changes": 28,
      "blob_url": "https://github.com/mockito/mockito/blob/328c7c3b8cb5568dbc3483a756afb1aaec34c7b3/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fsession%2FMockitoSessionTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/328c7c3b8cb5568dbc3483a756afb1aaec34c7b3/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fsession%2FMockitoSessionTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fsession%2FMockitoSessionTest.java?ref=328c7c3b8cb5568dbc3483a756afb1aaec34c7b3",
      "patch": "@@ -15,15 +15,17 @@\n import org.mockito.quality.Strictness;\n import org.mockitousage.IMethods;\n import org.mockitoutil.JUnitResultAssert;\n+import org.mockitoutil.TestBase;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mockingDetails;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n-public class MockitoSessionTest {\n+public class MockitoSessionTest extends TestBase {\n \n     private JUnitCore junit = new JUnitCore();\n \n@@ -84,6 +86,17 @@ public class MockitoSessionTest {\n         JUnitResultAssert.assertThat(result).succeeds(1);\n     }\n \n+    @Test public void allows_overriding_failure() {\n+        //when\n+        Result result = junit.run(MockitoSessionTest.SessionWithOverriddenFailure.class);\n+\n+        //expect\n+        JUnitResultAssert.assertThat(result).isSuccessful();\n+\n+        //in order to demonstrate feature, we intentionally misuse Mockito and need to clean up state\n+        resetState();\n+    }\n+\n     public static class SessionWithoutAnyConfiguration {\n \n         @Mock IMethods mock;\n@@ -192,4 +205,17 @@ public static class SessionWithUpdatedStrictness {\n             mock.simpleMethod(2);\n         }\n     }\n+\n+    public static class SessionWithOverriddenFailure {\n+        @Mock IMethods mock;\n+        MockitoSession mockito = Mockito.mockitoSession().initMocks(this).startMocking();\n+\n+        @After public void after() {\n+            mockito.finishMocking(new RuntimeException(\"Boo!\"));\n+        }\n+\n+        @Test public void invalid_mockito_usage() {\n+            verify(mock);\n+        }\n+    }\n }",
      "parent_sha": "f20d41a43bba5abde731e15eaed1395df3704043"
    }
  },
  {
    "oid": "4658cacf3acd6c68a400d5fa6cf0d2cbe5f2bcb5",
    "message": "fixed code (oups:)\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40356",
    "date": "2008-02-10T16:10:48Z",
    "url": "https://github.com/mockito/mockito/commit/4658cacf3acd6c68a400d5fa6cf0d2cbe5f2bcb5",
    "details": {
      "sha": "c2d5f6a97defb9ae803b6b124951892415e6a280",
      "filename": "src/org/mockito/internal/matchers/Equals.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/mockito/mockito/blob/4658cacf3acd6c68a400d5fa6cf0d2cbe5f2bcb5/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2FEquals.java",
      "raw_url": "https://github.com/mockito/mockito/raw/4658cacf3acd6c68a400d5fa6cf0d2cbe5f2bcb5/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2FEquals.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2FEquals.java?ref=4658cacf3acd6c68a400d5fa6cf0d2cbe5f2bcb5",
      "patch": "@@ -25,7 +25,11 @@ public boolean matches(Object actual) {\n \n     public void describeTo(Description description) {\n         appendQuoting(description);\n-        description.appendText(wanted.toString());\n+        if (wanted == null) {\n+            description.appendText(\"null\");\n+        } else {\n+            description.appendText(wanted.toString());\n+        }\n         appendQuoting(description);\n         //TODO use appendValue from description to print values\n     }",
      "parent_sha": "bf4eec3e73c82a3eff75acce0921f766a33f535f"
    }
  },
  {
    "oid": "bf4b9035ec27d8bb09ffb78cc06705c052d9a3d6",
    "message": "Remove internal exclusion from the javadoc configuration\n\nSigned-off-by: Brice Dutheil <brice.dutheil@gmail.com>",
    "date": "2016-11-17T19:39:42Z",
    "url": "https://github.com/mockito/mockito/commit/bf4b9035ec27d8bb09ffb78cc06705c052d9a3d6",
    "details": {
      "sha": "b3219b37a5e590f04d02bbef28804eeddf20e95d",
      "filename": "buildSrc/src/main/java/org/mockito/javadoc/JavadocExclude.java",
      "status": "modified",
      "additions": 122,
      "deletions": 27,
      "changes": 149,
      "blob_url": "https://github.com/mockito/mockito/blob/bf4b9035ec27d8bb09ffb78cc06705c052d9a3d6/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fmockito%2Fjavadoc%2FJavadocExclude.java",
      "raw_url": "https://github.com/mockito/mockito/raw/bf4b9035ec27d8bb09ffb78cc06705c052d9a3d6/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fmockito%2Fjavadoc%2FJavadocExclude.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fmockito%2Fjavadoc%2FJavadocExclude.java?ref=bf4b9035ec27d8bb09ffb78cc06705c052d9a3d6",
      "patch": "@@ -1,13 +1,20 @@\n package org.mockito.javadoc;\n \n-import com.sun.javadoc.*;\n-import com.sun.tools.doclets.formats.html.HtmlDoclet;\n-\n+import java.lang.reflect.Array;\n import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import com.sun.javadoc.ClassDoc;\n+import com.sun.javadoc.Doc;\n+import com.sun.javadoc.DocErrorReporter;\n+import com.sun.javadoc.LanguageVersion;\n+import com.sun.javadoc.RootDoc;\n+import com.sun.tools.doclets.formats.html.HtmlDoclet;\n+import com.sun.tools.javadoc.Main;\n \n /**\n  * Doclet built to exclude mockito internal packages from the outputted Javadoc.\n@@ -16,55 +23,143 @@\n  */\n public class JavadocExclude {\n \n+    public static void main(String[] args) {\n+        String name = JavadocExclude.class.getName();\n+        Main.execute(name, name, args);\n+    }\n+\n     public static int optionLength(String var0) {\n         return HtmlDoclet.optionLength(var0);\n     }\n \n     public static boolean start(RootDoc root) {\n         Class clz = root.getClass();\n-        return HtmlDoclet.start((RootDoc) Proxy.newProxyInstance(clz.getClassLoader(), clz.getInterfaces(), new ExcludeHandler(root)));\n+        return HtmlDoclet.start((RootDoc) Proxy.newProxyInstance(clz.getClassLoader(),\n+                                                                 clz.getInterfaces(),\n+                                                                 new ExcludeHandler(root)));\n     }\n \n-    public static boolean validOptions(String[][] var0, DocErrorReporter var1) {\n-        return HtmlDoclet.validOptions(var0, var1);\n+    public static boolean validOptions(String[][] optionsAndValue, DocErrorReporter docErrorReporter) {\n+        return HtmlDoclet.validOptions(optionsAndValue, docErrorReporter);\n     }\n \n     public static LanguageVersion languageVersion() {\n         return HtmlDoclet.languageVersion();\n     }\n \n+    private static boolean exclude(Doc doc) {\n+        if (doc instanceof ClassDoc) {\n+            ClassDoc classDoc = (ClassDoc) doc;\n+            if (classDoc.containingPackage().name().contains(\"org.mockito.internal\")) {\n+                return true;\n+            }\n+        }\n+//        if (doc.name().contains(\"UnitTest\")) {\n+//            return true;\n+//        } else if (doc.tags(\"@ExcludeFromJavadoc\").length > 0) {\n+//            return true;\n+//        } else if (doc instanceof ProgramElementDoc) {\n+//            if (((ProgramElementDoc) doc).containingPackage().tags(\"@ExcludeFromJavadoc\").length > 0)\n+//                return true;\n+//        }\n+        // nothing above found a reason to exclude\n+        return false;\n+    }\n+\n+    private static Object process(Object obj, Class expect) {\n+        if (obj == null)\n+            return null;\n+        Class cls = obj.getClass();\n+        if (cls.getName().startsWith(\"com.sun.\")) {\n+            return Proxy.newProxyInstance(cls.getClassLoader(), cls.getInterfaces(), new ExcludeHandler(obj));\n+        } else if (obj instanceof Object[]) {\n+            Class componentType = expect.getComponentType();\n+            Object[] array = (Object[]) obj;\n+            List list = new ArrayList(array.length);\n+            for (int i = 0; i < array.length; i++) {\n+                Object entry = array[i];\n+                if ((entry instanceof Doc) && exclude((Doc) entry)) {\n+                    continue;\n+                }\n+                list.add(process(entry, componentType));\n+            }\n+            return list.toArray((Object[]) Array.newInstance(componentType != null ? componentType : Object.class,\n+                                                             list.size()));\n+        } else {\n+//            System.out.println(obj +\":\" + obj.getClass());\n+            return obj;\n+        }\n+    }\n+\n+\n     /**\n      * Proxy which filters the {@link RootDoc#classes()} method to filter {@link ClassDoc} based on their package name.\n      */\n     private static class ExcludeHandler implements InvocationHandler {\n-        private final RootDoc root;\n+        private final Object root;\n \n-        private ExcludeHandler(RootDoc root) {\n+        private ExcludeHandler(Object root) {\n             this.root = root;\n         }\n \n-        @Override\n-        public Object invoke(Object o, Method method, Object[] args) throws Throwable {\n-            Object result = method.invoke(root, args);\n-            if (result instanceof Object[]) {\n-                List<ClassDoc> filteredDocs = new ArrayList<ClassDoc>();\n-                Object[] array = (Object[]) result;\n-                for (Object entry : array) {\n-                    if (entry instanceof ClassDoc) {\n-                        ClassDoc doc = (ClassDoc) entry;\n-                        if (!doc.containingPackage().name().startsWith(\"org.mockito.internal\")) {\n-                            filteredDocs.add(doc);\n-                        }\n-                    }\n+//        @Override\n+//        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+//            Object result = method.invoke(root, args);\n+//            if (result instanceof Object[]) {\n+//                List<ClassDoc> filteredDocs = new ArrayList<ClassDoc>();\n+//                Object[] array = (Object[]) result;\n+//                for (Object entry : array) {\n+//                    if (entry instanceof ClassDoc) {\n+//                        ClassDoc doc = (ClassDoc) entry;\n+//                        if (!doc.containingPackage().name().startsWith(\"org.mockito.internal\")) {\n+//                            filteredDocs.add(doc);\n+//                        }\n+//                    }\n+//                }\n+//                // If no ClassDoc were found in the original array,\n+//                // since PackageDoc area also included in the classes array.\n+//                if (filteredDocs.size() > 0) {\n+//                    ClassDoc[] docArray = new ClassDoc[filteredDocs.size()];\n+//                    return filteredDocs.toArray(docArray);\n+//                }\n+//            }\n+//            return result;\n+//        }\n+\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            if (args != null) {\n+                String methodName = method.getName();\n+                if (methodName.equals(\"compareTo\")\n+                    || methodName.equals(\"equals\")\n+                    || methodName.equals(\"overrides\")\n+                    || methodName.equals(\"subclassOf\")) {\n+//                    System.out.println(\"args[0] : \" + args[0].getClass());\n+                    args[0] = unwrap(args[0]);\n                 }\n-                // If no ClassDoc were found in the original array,\n-                // since PackageDoc area also included in the classes array.\n-                if (filteredDocs.size() > 0) {\n-                    ClassDoc[] docArray = new ClassDoc[filteredDocs.size()];\n-                    return filteredDocs.toArray(docArray);\n+                if (methodName.equals(\"inlineTags\")) {\n+\n+                    Object[] invoke = (Object[]) method.invoke(root, args);\n+                    if (invoke.length != 0) {\n+                        System.out.println(methodName);\n+                        System.out.println(Arrays.toString(invoke));\n+\n+                    }\n+//                    args[0] = unwrap(args[0]);\n                 }\n             }\n-            return result;\n+            try {\n+                return process(method.invoke(root, args),\n+                               method.getReturnType());\n+            } catch (InvocationTargetException e) {\n+                throw e.getTargetException();\n+            }\n+        }\n+\n+        private Object unwrap(Object proxy) {\n+            if (proxy instanceof Proxy) {\n+                return ((ExcludeHandler) Proxy.getInvocationHandler(proxy)).root;\n+            }\n+            return proxy;\n         }\n     }\n }",
      "parent_sha": "8f968f8a4bb5b59a766913d9c722fcc5ca1e21c2"
    }
  },
  {
    "oid": "320452e403f3fd7971fff5e535465390a7b8db7c",
    "message": "Minor improvements in the Javadoc of Mockito.java (#1521)",
    "date": "2018-10-19T14:02:04Z",
    "url": "https://github.com/mockito/mockito/commit/320452e403f3fd7971fff5e535465390a7b8db7c",
    "details": {
      "sha": "e2a0ade3748113ad64d3e67708d419c2845403e2",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/mockito/mockito/blob/320452e403f3fd7971fff5e535465390a7b8db7c/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/320452e403f3fd7971fff5e535465390a7b8db7c/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=320452e403f3fd7971fff5e535465390a7b8db7c",
      "patch": "@@ -357,7 +357,7 @@\n  * //create an inOrder verifier for a single mock\n  * InOrder inOrder = inOrder(singleMock);\n  *\n- * //following will make sure that add is first called with \"was added first, then with \"was added second\"\n+ * //following will make sure that add is first called with \"was added first\", then with \"was added second\"\n  * inOrder.verify(singleMock).add(\"was added first\");\n  * inOrder.verify(singleMock).add(\"was added second\");\n  *\n@@ -464,6 +464,7 @@\n  * </code></pre>\n  *\n  * You can use built-in runner: {@link MockitoJUnitRunner} or a rule: {@link MockitoRule}.\n+ * For JUnit5 tests, refer to the JUnit5 extension described in <a href=\"#45\">section 45</a>.\n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n  *",
      "parent_sha": "b1fd36569aa40dd654bb0b702c8042a0897335a7"
    }
  },
  {
    "oid": "b270b262b93ce524bf284ffea6a5a82129a50f34",
    "message": "Added more detailed info on the Incubating interface.",
    "date": "2012-04-01T15:02:19Z",
    "url": "https://github.com/mockito/mockito/commit/b270b262b93ce524bf284ffea6a5a82129a50f34",
    "details": {
      "sha": "ae5c967277f74099831ef963b72805f12e3d963c",
      "filename": "src/org/mockito/internal/Incubating.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/mockito/mockito/blob/b270b262b93ce524bf284ffea6a5a82129a50f34/src%2Forg%2Fmockito%2Finternal%2FIncubating.java",
      "raw_url": "https://github.com/mockito/mockito/raw/b270b262b93ce524bf284ffea6a5a82129a50f34/src%2Forg%2Fmockito%2Finternal%2FIncubating.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2FIncubating.java?ref=b270b262b93ce524bf284ffea6a5a82129a50f34",
      "patch": "@@ -9,7 +9,19 @@\n import java.lang.annotation.RetentionPolicy;\n \n /**\n- * Indicates the type or method is <strong>work in progress</strong> and might change.\n+ * The annotation conveys following information:\n+ * <ul>\n+ * <li>The API is fairly new and we would appreciate your feedback. For example, what are you missing from the API\n+ * to solve your use case (yes, please, real use cases).</li>\n+ * <li>For types or methods that are already released this annotation means that that the API might change.\n+ * The chance for that is small and we will always try to make any changes in a backwards compatible way.\n+ * The only reason we would want to change it is to provide better support for using and extending Mockito.\n+ * </li>\n+ * <li>\n+ * For types or methods that are not yet released it means the API is <strong>work in progress</strong>\n+ * and can change before release.\n+ * </li>\n+ * </ul>\n  */\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Incubating {",
      "parent_sha": "e7fdca920441e9b285961ae9f985f962a40dd3c9"
    }
  },
  {
    "oid": "253ffe13a90443c6852a6b2c85a447a8b7309c3a",
    "message": "Updated test after refactorings\n\nIt passes now!!! :D",
    "date": "2016-07-23T02:01:45Z",
    "url": "https://github.com/mockito/mockito/commit/253ffe13a90443c6852a6b2c85a447a8b7309c3a",
    "details": {
      "sha": "b4fb89973c391b97b81de96d1d5207354c0be30f",
      "filename": "src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mockito/mockito/blob/253ffe13a90443c6852a6b2c85a447a8b7309c3a/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrunner%2FUnusedStubsExceptionMessageTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/253ffe13a90443c6852a6b2c85a447a8b7309c3a/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrunner%2FUnusedStubsExceptionMessageTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrunner%2FUnusedStubsExceptionMessageTest.java?ref=253ffe13a90443c6852a6b2c85a447a8b7309c3a",
      "patch": "@@ -50,8 +50,8 @@ public void lists_all_unused_stubs_cleanly() {\n                         \"Unnecessary stubbings detected in test class: HasUnnecessaryStubs\\n\" +\n                         \"To keep the tests clean it is important to remove unnecessary code.\\n\" +\n                         \"Following stubbings are declared in test but not realized during test execution:\\n\" +\n-                        \"  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:26)\\n\" +\n-                        \"  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:27)\\n\" +\n+                        \"  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:27)\\n\" +\n+                        \"  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:28)\\n\" +\n                         \"Please remove unnecessary stubbings. More info: javadoc for UnnecessaryStubbingException class.\",\n                 failure.getException().getMessage());\n     }",
      "parent_sha": "6f7302f7abbe650f5d067be20f89bc17abad0b51"
    }
  },
  {
    "oid": "7cfd98c03621fd794cb24a9b7a5f1ac4667b2f8e",
    "message": "Improve javadoc",
    "date": "2019-03-26T17:37:21Z",
    "url": "https://github.com/mockito/mockito/commit/7cfd98c03621fd794cb24a9b7a5f1ac4667b2f8e",
    "details": {
      "sha": "77b608a2bb4fe9002075408378243a669e256aae",
      "filename": "src/main/java/org/mockito/invocation/Invocation.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/mockito/mockito/blob/7cfd98c03621fd794cb24a9b7a5f1ac4667b2f8e/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finvocation%2FInvocation.java",
      "raw_url": "https://github.com/mockito/mockito/raw/7cfd98c03621fd794cb24a9b7a5f1ac4667b2f8e/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finvocation%2FInvocation.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2Finvocation%2FInvocation.java?ref=7cfd98c03621fd794cb24a9b7a5f1ac4667b2f8e",
      "patch": "@@ -51,9 +51,11 @@ public interface Invocation extends InvocationOnMock, DescribedInvocation {\n     Object[] getRawArguments();\n \n     /**\n-     * Returns arguments wrapped into ArgumentMatchers\n+     * Wraps each argument using ArgumentMatchers.eq() or AdditionalMatchers.arryEq()\n+     * Used internally for the purposes of human-readable invocation printing.\n      *\n      * @return a list of ArgumentMatcher wrapping each of this invocation arguments\n+     * @since 2.25.6\n      */\n     List<ArgumentMatcher> getArgumentsAsMatchers();\n ",
      "parent_sha": "ea745bffa1b47fe496bfd47f7813257b42aa80da"
    }
  },
  {
    "oid": "b3a5e1defeae7ddf86b436d131837843fd9369cd",
    "message": "Reduced duplication\n\nAdded TODOs",
    "date": "2016-12-10T14:51:34Z",
    "url": "https://github.com/mockito/mockito/commit/b3a5e1defeae7ddf86b436d131837843fd9369cd",
    "details": {
      "sha": "6ed8c7f7ca065db46004310ed12693100de947d7",
      "filename": "src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java",
      "status": "modified",
      "additions": 29,
      "deletions": 26,
      "changes": 55,
      "blob_url": "https://github.com/mockito/mockito/blob/b3a5e1defeae7ddf86b436d131837843fd9369cd/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrule%2FStrictJUnitRuleTest.java",
      "raw_url": "https://github.com/mockito/mockito/raw/b3a5e1defeae7ddf86b436d131837843fd9369cd/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrule%2FStrictJUnitRuleTest.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitousage%2Fjunitrule%2FStrictJUnitRuleTest.java?ref=b3a5e1defeae7ddf86b436d131837843fd9369cd",
      "patch": "@@ -38,18 +38,17 @@ public void log(Object what) {\n     }\n \n     @Test public void ok_when_no_stubbings() throws Throwable {\n-        run(new Statement() {\n-            public void evaluate() throws Throwable {\n-                IMethods mock = mock(IMethods.class);\n+        run(new MockitoStatement() {\n+            public void evaluate(IMethods mock, IMethods mock2) throws Throwable {\n                 mock.simpleMethod();\n                 Mockito.verify(mock).simpleMethod();\n             }\n         });\n     }\n \n     @Test public void ok_when_all_stubbings_used() throws Throwable {\n-        run(new Statement() {\n-            public void evaluate() throws Throwable {\n+        run(new MockitoStatement() {\n+            public void evaluate(IMethods mock1, IMethods mock2) throws Throwable {\n                 IMethods mock = mock(IMethods.class);\n                 given(mock.simpleMethod(10)).willReturn(\"foo\");\n                 mock.simpleMethod(10);\n@@ -58,9 +57,8 @@ public void evaluate() throws Throwable {\n     }\n \n     @Test public void ok_when_used_and_mismatched_argument() throws Throwable {\n-        run(new Statement() {\n-            public void evaluate() throws Throwable {\n-                IMethods mock = mock(IMethods.class);\n+        run(new MockitoStatement() {\n+            public void evaluate(IMethods mock, IMethods mock2) throws Throwable {\n                 given(mock.simpleMethod(10)).willReturn(\"foo\");\n                 mock.simpleMethod(10);\n                 mock.simpleMethod(15);\n@@ -71,9 +69,8 @@ public void evaluate() throws Throwable {\n     @Test public void fails_when_unused_stubbings() throws Throwable {\n         try {\n             //when\n-            run(new Statement() {\n-                public void evaluate() throws Throwable {\n-                    IMethods mock = mock(IMethods.class);\n+            run(new MockitoStatement() {\n+                public void evaluate(IMethods mock, IMethods mock2) throws Throwable {\n                     given(mock.simpleMethod(10)).willReturn(\"foo\");\n                     mock.simpleMethod(15);\n                 }\n@@ -89,9 +86,8 @@ public void evaluate() throws Throwable {\n     @Test public void test_failure_trumps_unused_stubbings() throws Throwable {\n         try {\n             //when\n-            run(new Statement() {\n-                public void evaluate() throws Throwable {\n-                    IMethods mock = mock(IMethods.class);\n+            run(new MockitoStatement() {\n+                public void evaluate(IMethods mock, IMethods mock2) throws Throwable {\n                     given(mock.simpleMethod(10)).willReturn(\"foo\");\n                     mock.simpleMethod(15);\n \n@@ -106,12 +102,12 @@ public void evaluate() throws Throwable {\n         }\n     }\n \n-    @Ignore @Test public void fails_fast_when_mismatched_argument() throws Throwable {\n+    //TODO, not yet implemented\n+    @Ignore @Test public void fails_fast_when_stubbing_invoked_with_different_argument() throws Throwable {\n         try {\n             //when\n-            run(new Statement() {\n-                public void evaluate() throws Throwable {\n-                    IMethods mock = mock(IMethods.class);\n+            run(new MockitoStatement() {\n+                public void evaluate(IMethods mock, IMethods mock2) throws Throwable {\n                     given(mock.simpleMethod(10)).willReturn(\"foo\");\n                     mock.simpleMethod(15);\n \n@@ -126,12 +122,12 @@ public void evaluate() throws Throwable {\n         }\n     }\n \n+    //TODO, not yet implemented\n     @Ignore @Test public void verify_no_more_interactions_ignores_stubs() throws Throwable {\n         //when\n-        run(new Statement() {\n-            public void evaluate() throws Throwable {\n+        run(new MockitoStatement() {\n+            public void evaluate(IMethods mock, IMethods mock2) throws Throwable {\n                 //in test:\n-                IMethods mock = mock(IMethods.class);\n                 given(mock.simpleMethod(10)).willReturn(\"foo\");\n \n                 //in code:\n@@ -148,10 +144,8 @@ public void evaluate() throws Throwable {\n     @Test public void unused_stubs_with_multiple_mocks() throws Throwable {\n         try {\n             //when\n-            run(new Statement() {\n-                public void evaluate() throws Throwable {\n-                    IMethods mock1 = mock(IMethods.class);\n-                    IMethods mock2 = mock(IMethods.class);\n+            run(new MockitoStatement() {\n+                public void evaluate(IMethods mock1, IMethods mock2) throws Throwable {\n                     given(mock1.simpleMethod(10)).willReturn(\"foo\");\n                     given(mock2.simpleMethod(20)).willReturn(\"foo\");\n \n@@ -167,11 +161,20 @@ public void evaluate() throws Throwable {\n         }\n     }\n \n-    private void run(Statement statement) throws Throwable {\n+    private void run(MockitoStatement statement) throws Throwable {\n         jUnitRule.apply(statement, dummy, new DummyTestCase()).evaluate();\n     }\n \n     public static class DummyTestCase {\n         @Mock private IMethods mock;\n     }\n+\n+    abstract class MockitoStatement extends Statement {\n+        abstract void evaluate(IMethods mock1, IMethods mock2) throws Throwable;\n+\n+        @Override\n+        public void evaluate() throws Throwable {\n+            evaluate(mock(IMethods.class), mock(IMethods.class));\n+        }\n+    }\n }\n\\ No newline at end of file",
      "parent_sha": "5c2c6d5a3641d5c70d6ee154cdbca6bd733355e7"
    }
  },
  {
    "oid": "1641868a4651bf5c020f7afeb50fc728c3e38d27",
    "message": "Javadoc",
    "date": "2019-03-05T15:58:10Z",
    "url": "https://github.com/mockito/mockito/commit/1641868a4651bf5c020f7afeb50fc728c3e38d27",
    "details": {
      "sha": "2e10eca426bd2240d1a80b9a2f38810d54815839",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/1641868a4651bf5c020f7afeb50fc728c3e38d27/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/1641868a4651bf5c020f7afeb50fc728c3e38d27/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=1641868a4651bf5c020f7afeb50fc728c3e38d27",
      "patch": "@@ -1541,7 +1541,7 @@\n  * inline mocking causes memory leaks.\n  * There is no clean way to mitigate this problem completely.\n  * Hence, we introduced a new API to explicitly clear mock state (only make sense in inline mocking!).\n- * See example in {@link MockitoFramework#clearInlineMocks()}.\n+ * See example usage in {@link MockitoFramework#clearInlineMocks()}.\n  * If you have feedback or a better idea how to solve the problem please reach out.\n  */\n @SuppressWarnings(\"unchecked\")",
      "parent_sha": "d61a8beb9a4bb8234e3685c9c55dff05de8d2673"
    }
  },
  {
    "oid": "4f7f2f1cf4d542a4e527d888a2aa16cc5906641b",
    "message": "made anyObject() generic\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40474",
    "date": "2008-03-19T14:00:58Z",
    "url": "https://github.com/mockito/mockito/commit/4f7f2f1cf4d542a4e527d888a2aa16cc5906641b",
    "details": {
      "sha": "cd9e144317e22baf94ff135b72e2ce65d5ac6c1b",
      "filename": "src/org/mockito/Matchers.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/mockito/mockito/blob/4f7f2f1cf4d542a4e527d888a2aa16cc5906641b/src%2Forg%2Fmockito%2FMatchers.java",
      "raw_url": "https://github.com/mockito/mockito/raw/4f7f2f1cf4d542a4e527d888a2aa16cc5906641b/src%2Forg%2Fmockito%2FMatchers.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMatchers.java?ref=4f7f2f1cf4d542a4e527d888a2aa16cc5906641b",
      "patch": "@@ -176,14 +176,13 @@ public static short anyShort() {\n     }\n \n     /**\n-     * TODO this should be generic\n      * any Object argument.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n      * @return <code>null</code>.\n      */\n-    public static Object anyObject() {\n+    public static <T> T anyObject() {\n         return reportMatcher(Any.ANY).returnNull();\n     }\n ",
      "parent_sha": "7c894a2fd6136e41fa610a4a16be10214775c75b"
    }
  },
  {
    "oid": "869dc9c5911d561568e3a1507cfa5eaf2cdc301c",
    "message": "Fixes #1262: update doc for Answers.CALLS_REAL_METHODS",
    "date": "2017-11-27T10:35:31Z",
    "url": "https://github.com/mockito/mockito/commit/869dc9c5911d561568e3a1507cfa5eaf2cdc301c",
    "details": {
      "sha": "55bdf68470d642cfaf247e618194a1b7a0571c82",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/mockito/mockito/blob/869dc9c5911d561568e3a1507cfa5eaf2cdc301c/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/869dc9c5911d561568e3a1507cfa5eaf2cdc301c/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=869dc9c5911d561568e3a1507cfa5eaf2cdc301c",
      "patch": "@@ -1643,11 +1643,15 @@ public class Mockito extends ArgumentMatchers {\n      * // this calls the real implementation of Foo.getSomething()\n      * value = mock.getSomething();\n      *\n-     * when(mock.getSomething()).thenReturn(fakeValue);\n+     * doReturn(fakeValue).when(mock).getSomething();\n      *\n      * // now fakeValue is returned\n      * value = mock.getSomething();\n      * </code></pre>\n+     *\n+     * <p>\n+     * <u>Note:</u> Stubbing partial mocks using <code>when(mock.getSomething()).thenReturn(fakeValue)</code>\n+     * syntax will call the real method. For partial mock it's recommended to use <code>doReturn</code> syntax.\n      */\n     public static final Answer<Object> CALLS_REAL_METHODS = Answers.CALLS_REAL_METHODS;\n ",
      "parent_sha": "2efa9c79b63e94bdadf97efe77ed4a6f62f62cf5"
    }
  },
  {
    "oid": "b324bcf197fa8bf39a5a192ce48f66f43f261fd8",
    "message": "Fixes #197 : Timeout class constructors grouped together.",
    "date": "2015-05-13T11:52:22Z",
    "url": "https://github.com/mockito/mockito/commit/b324bcf197fa8bf39a5a192ce48f66f43f261fd8",
    "details": {
      "sha": "9cfcdad69ba4cd16b4dcfac52e5578f33a8c88fb",
      "filename": "src/org/mockito/verification/Timeout.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/mockito/mockito/blob/b324bcf197fa8bf39a5a192ce48f66f43f261fd8/src%2Forg%2Fmockito%2Fverification%2FTimeout.java",
      "raw_url": "https://github.com/mockito/mockito/raw/b324bcf197fa8bf39a5a192ce48f66f43f261fd8/src%2Forg%2Fmockito%2Fverification%2FTimeout.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Fverification%2FTimeout.java?ref=b324bcf197fa8bf39a5a192ce48f66f43f261fd8",
      "patch": "@@ -39,15 +39,15 @@ public Timeout(long millis, VerificationMode delegate) {\n         this(new VerificationOverTimeImpl(pollingPeriodMillis, delegate, true, timer));\r\n     }\r\n \r\n+    Timeout(VerificationOverTimeImpl verificationOverTime) {\r\n+        super(verificationOverTime);\r\n+    }\r\n+\r\n     @Override\r\n     protected VerificationMode copySelfWithNewVerificationMode(VerificationMode newVerificationMode) {\r\n         return new Timeout(wrappedVerification.copyWithVerificationMode(newVerificationMode));\r\n     }\r\n \r\n-    Timeout(VerificationOverTimeImpl verificationOverTime) {\r\n-        super(verificationOverTime);\r\n-    }\r\n-\r\n     public VerificationMode atMost(int maxNumberOfInvocations) {\r\n         new Reporter().atMostAndNeverShouldNotBeUsedWithTimeout();\r\n         return null;\r",
      "parent_sha": "1c153d259d0680f8c0c076c3e73bbbd7d0f3cabe"
    }
  },
  {
    "oid": "c9c224c8d3813ca6a85da166141f4c43749e58f3",
    "message": "Added prettification of exceptions.",
    "date": "2015-02-15T23:10:50Z",
    "url": "https://github.com/mockito/mockito/commit/c9c224c8d3813ca6a85da166141f4c43749e58f3",
    "details": {
      "sha": "e7126dd8db94d96032c82f9ae4065eeda6ca14b1",
      "filename": "src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
      "status": "modified",
      "additions": 37,
      "deletions": 17,
      "changes": 54,
      "blob_url": "https://github.com/mockito/mockito/blob/c9c224c8d3813ca6a85da166141f4c43749e58f3/src%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FByteBuddyMockMaker.java",
      "raw_url": "https://github.com/mockito/mockito/raw/c9c224c8d3813ca6a85da166141f4c43749e58f3/src%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FByteBuddyMockMaker.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fcreation%2Fbytebuddy%2FByteBuddyMockMaker.java?ref=c9c224c8d3813ca6a85da166141f4c43749e58f3",
      "patch": "@@ -22,6 +22,7 @@\n import org.objenesis.ObjenesisStd;\n \n import java.io.ObjectStreamException;\n+import java.lang.reflect.Modifier;\n import java.util.*;\n \n import static net.bytebuddy.instrumentation.method.matcher.MethodMatchers.*;\n@@ -59,14 +60,14 @@ public <T> T instantiate(Class<T> type) {\n \n     private static class MockKey {\n \n-        private final Class<?> mockType;\n+        private final Class<?> mockedType;\n         private final Set<Class> types;\n         private final boolean acrossClassLoaderSerialization;\n \n-        private MockKey(Class<?> mockType, Set<Class> interfaces, boolean acrossClassLoaderSerialization) {\n-            this.mockType = mockType;\n+        private MockKey(Class<?> mockedType, Set<Class> interfaces, boolean acrossClassLoaderSerialization) {\n+            this.mockedType = mockedType;\n             this.types = new HashSet<Class>(interfaces);\n-            types.add(mockType);\n+            types.add(mockedType);\n             this.acrossClassLoaderSerialization = acrossClassLoaderSerialization;\n         }\n \n@@ -78,15 +79,15 @@ public boolean equals(Object other) {\n             MockKey mockKey = (MockKey) other;\n \n             if (acrossClassLoaderSerialization != mockKey.acrossClassLoaderSerialization) return false;\n-            if (!mockType.equals(mockKey.mockType)) return false;\n+            if (!mockedType.equals(mockKey.mockedType)) return false;\n             if (!types.equals(mockKey.types)) return false;\n \n             return true;\n         }\n \n         @Override\n         public int hashCode() {\n-            int result = mockType.hashCode();\n+            int result = mockedType.hashCode();\n             result = 31 * result + types.hashCode();\n             result = 31 * result + (acrossClassLoaderSerialization ? 1 : 0);\n             return result;\n@@ -129,24 +130,43 @@ public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n         return mock;\n     }\n \n-    private <T> Class<? extends T> getOrMakeMock(Class<T> mockType,\n+    private <T> Class<? extends T> getOrMakeMock(Class<T> mockedType,\n                                                  Set<Class> interfaces,\n                                                  boolean acrossClassLoaderSerialization) {\n-        MockKey mockKey = new MockKey(mockType, interfaces, acrossClassLoaderSerialization);\n+        MockKey mockKey = new MockKey(mockedType, interfaces, acrossClassLoaderSerialization);\n         @SuppressWarnings(\"unchecked\")\n-        Class<? extends T> mockedType = (Class<? extends T>) previousClasses.get(mockKey);\n-        if (mockedType == null) {\n-            mockedType = makeMock(mockType, interfaces, acrossClassLoaderSerialization);\n-            previousClasses.put(mockKey, mockedType);\n+        Class<? extends T> mockType = (Class<? extends T>) previousClasses.get(mockKey);\n+        if (mockType == null) {\n+            try {\n+                mockType = makeMock(mockedType, interfaces, acrossClassLoaderSerialization);\n+            } catch (Exception e) {\n+                prettify(mockedType, e);\n+            }\n+            previousClasses.put(mockKey, mockType);\n+        }\n+        return mockType;\n+    }\n+\n+    private static void prettify(Class<?> mockedType, Exception e) {\n+        if (Modifier.isPrivate(mockedType.getModifiers())) {\n+            throw new MockitoException(\"\\n\"\n+                    + \"Mockito cannot mock this class: \" + mockedType\n+                    + \".\\n\"\n+                    + \"Most likely it is a private class that is not visible by Mockito\");\n         }\n-        return mockedType;\n+        throw new MockitoException(\"\\n\"\n+                + \"Mockito cannot mock this class: \" + mockedType\n+                + \"\\n\"\n+                + \"Mockito can only mock visible & non-final classes.\"\n+                + \"\\n\"\n+                + \"If you're not sure why you're getting this error, please report to the mailing list.\", e);\n     }\n \n-    private <T> Class<? extends T> makeMock(Class<T> mockType,\n+    private <T> Class<? extends T> makeMock(Class<T> mockedType,\n                                             Set<Class> interfaces,\n                                             boolean acrossClassLoaderSerialization) {\n-        DynamicType.Builder<T> builder = byteBuddy.subclass(mockType, ConstructorStrategy.Default.NO_CONSTRUCTORS)\n-                .name(nameFor(mockType))\n+        DynamicType.Builder<T> builder = byteBuddy.subclass(mockedType, ConstructorStrategy.Default.NO_CONSTRUCTORS)\n+                .name(nameFor(mockedType))\n                 .implement(interfaces.toArray(new Class<?>[interfaces.size()]))\n                 .method(any()).intercept(MethodDelegation\n                         .toInstanceField(MethodInterceptor.class, \"mockitoInterceptor\")\n@@ -160,7 +180,7 @@ private <T> Class<? extends T> makeMock(Class<T> mockType,\n                     .intercept(MethodDelegation.to(MethodInterceptor.ForWriteReplace.class));\n         }\n         Class<?>[] allMockedTypes = new Class<?>[interfaces.size() + 1];\n-        allMockedTypes[0] = mockType;\n+        allMockedTypes[0] = mockedType;\n         int index = 1;\n         for (Class<?> type : interfaces) {\n             allMockedTypes[index++] = type;",
      "parent_sha": "7cd8c569105bb4b6d770050d8bcc81b27cc190a3"
    }
  },
  {
    "oid": "c496c41d7432c6b49a470f5fec13a0689cebb9d9",
    "message": "Made some exceptions slightly better",
    "date": "2010-11-08T19:19:14Z",
    "url": "https://github.com/mockito/mockito/commit/c496c41d7432c6b49a470f5fec13a0689cebb9d9",
    "details": {
      "sha": "dd55bb42cafaec79e8ac42104a695d205c0621b1",
      "filename": "src/org/mockito/exceptions/Reporter.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/mockito/mockito/blob/c496c41d7432c6b49a470f5fec13a0689cebb9d9/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java",
      "raw_url": "https://github.com/mockito/mockito/raw/c496c41d7432c6b49a470f5fec13a0689cebb9d9/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java?ref=c496c41d7432c6b49a470f5fec13a0689cebb9d9",
      "patch": "@@ -149,7 +149,8 @@ public void mocksHaveToBePassedToVerifyNoMoreInteractions() {\n                 \"Method requires argument(s)!\",\n                 \"Pass mocks that should be verified, e.g:\",\n                 \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n-                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n+                \"    verifyZeroInteractions(mockOne, mockTwo);\",\n+                \"\"\n                 ));\n     }\n \n@@ -158,7 +159,8 @@ public void notAMockPassedToVerifyNoMoreInteractions() {\n             \"Argument(s) passed is not a mock!\",\n             \"Examples of correct verifications:\",\n             \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n-            \"    verifyZeroInteractions(mockOne, mockTwo);\"\n+            \"    verifyZeroInteractions(mockOne, mockTwo);\",\n+            \"\"\n         ));\n     }\n \n@@ -356,8 +358,7 @@ public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwar\n                 new Location(),\n                 \"But found this interaction:\",\n                 undesired.getLocation(),\n-                scenario,\n-                \"\"\n+                scenario\n         ));\n     }\n ",
      "parent_sha": "f31edaec0a1afc581dd7f322bbbfc494180392c5"
    }
  },
  {
    "oid": "7aa2a712d48a45240e850921c2b4b9b55e2cde6e",
    "message": "Added a note why we keep all documentation in javadocs\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401384",
    "date": "2009-05-01T20:03:45Z",
    "url": "https://github.com/mockito/mockito/commit/7aa2a712d48a45240e850921c2b4b9b55e2cde6e",
    "details": {
      "sha": "809bebb064fe77e1b814dcc0a5decb4a9af35709",
      "filename": "src/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/mockito/mockito/blob/7aa2a712d48a45240e850921c2b4b9b55e2cde6e/src%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/7aa2a712d48a45240e850921c2b4b9b55e2cde6e/src%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2FMockito.java?ref=7aa2a712d48a45240e850921c2b4b9b55e2cde6e",
      "patch": "@@ -27,7 +27,11 @@\n import org.mockito.stubbing.Answer;\r\n \r\n /**\r\n- * Enables mocks creation, verification and stubbing.\r\n+ * Mockito library enables mocks creation, verification and stubbing.\r\n+ * <p>\r\n+ * This javadoc content is also available on the <a href=\"http://mockito.org\">http://mockito.org</a> web page. \r\n+ * We try to keep all documentation in javadocs because it guarantees consistency between what's on the web and what's in the source code.\r\n+ * Also, it makes possible to access documentation straight from the IDE even if you work offline.   \r\n  * \r\n  * <h1>Contents</h1>\r\n  * \r",
      "parent_sha": "ab778486207605b1db0124630a02561ad8961103"
    }
  },
  {
    "oid": "c8486b406a6425b451d48046c6cd2234820dc3dd",
    "message": "fixed issue 24\nMockFactory now does not use static state on Enhancer to set handler for mock objects\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40914",
    "date": "2008-09-29T14:54:11Z",
    "url": "https://github.com/mockito/mockito/commit/c8486b406a6425b451d48046c6cd2234820dc3dd",
    "details": {
      "sha": "905d4542ca44cf598ff761b6e3211aff696e6d1d",
      "filename": "src/org/mockito/internal/creation/MockFactory.java",
      "status": "modified",
      "additions": 3,
      "deletions": 12,
      "changes": 15,
      "blob_url": "https://github.com/mockito/mockito/blob/c8486b406a6425b451d48046c6cd2234820dc3dd/src%2Forg%2Fmockito%2Finternal%2Fcreation%2FMockFactory.java",
      "raw_url": "https://github.com/mockito/mockito/raw/c8486b406a6425b451d48046c6cd2234820dc3dd/src%2Forg%2Fmockito%2Finternal%2Fcreation%2FMockFactory.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fcreation%2FMockFactory.java?ref=c8486b406a6425b451d48046c6cd2234820dc3dd",
      "patch": "@@ -31,10 +31,10 @@ public T createMock(Class<T> toMock, final MethodInterceptorFilter filter, Objec\n \n         Class mockClass = enhancer.createClass();\n         \n-        Enhancer.registerCallbacks(mockClass, new Callback[] { filter });\n-\n         Factory mock = createMock(mockClass);\n-\n+        \n+        mock.setCallbacks(new Callback[] { filter });\n+        \n         filter.setInstance(optionalInstance != null ? optionalInstance : mock);\n         return (T) mock;\n     }\n@@ -83,15 +83,6 @@ private Factory createMock(Class<?> mockClass) {\n                     + \" on \" + System.getProperty(\"java.vm.vendor\") + \" JVM\");\n         }\n \n-        // This call is required. Cglib has some \"magic code\" making sure a\n-        // callback is used by only one instance of a given class. So only the\n-        // instance created right after registering the callback will get it.\n-        // However, this is done in the construtor which I'm bypassing to\n-        // allow class instantiation without calling a constructor.\n-        // Fortunatly, the \"magic code\" is also called in getCallback which is\n-        // why I'm calling it here mock.getCallback(0);\n-\n-        mock.getCallback(0);\n         return mock;\n     }\n     ",
      "parent_sha": "b42a3921e512affafb268bd266b5a380a6de1c8d"
    }
  },
  {
    "oid": "ad3eddfc7401bdf22f7fef4960d262088a7e32d4",
    "message": "Updated javadoc a little bit",
    "date": "2015-06-25T14:31:08Z",
    "url": "https://github.com/mockito/mockito/commit/ad3eddfc7401bdf22f7fef4960d262088a7e32d4",
    "details": {
      "sha": "bf4689d64795369afc25fd40b6dc54f2d9c700f7",
      "filename": "src/org/mockito/internal/matchers/text/FormattedText.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/mockito/mockito/blob/ad3eddfc7401bdf22f7fef4960d262088a7e32d4/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2Ftext%2FFormattedText.java",
      "raw_url": "https://github.com/mockito/mockito/raw/ad3eddfc7401bdf22f7fef4960d262088a7e32d4/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2Ftext%2FFormattedText.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fmatchers%2Ftext%2FFormattedText.java?ref=ad3eddfc7401bdf22f7fef4960d262088a7e32d4",
      "patch": "@@ -1,7 +1,8 @@\n package org.mockito.internal.matchers.text;\n \n /**\n- * Contains text that has already been formatted.\n+ * Contains text that has already been formatted\n+ * and hence it does not need any formatting (like quotes around string, etc.)\n  */\n class FormattedText {\n ",
      "parent_sha": "3f388ae15ce51e3baae18059b9554c4205e25866"
    }
  },
  {
    "oid": "41b611ac1d8fe2a631e615b5851323e56b38f5db",
    "message": "Fix the verification documentation to correctly use argThat for lambda matchers",
    "date": "2016-11-16T22:50:17Z",
    "url": "https://github.com/mockito/mockito/commit/41b611ac1d8fe2a631e615b5851323e56b38f5db",
    "details": {
      "sha": "224f18eab619061f4bf41eb044b3baf2b6e51949",
      "filename": "src/main/java/org/mockito/Mockito.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/41b611ac1d8fe2a631e615b5851323e56b38f5db/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "raw_url": "https://github.com/mockito/mockito/raw/41b611ac1d8fe2a631e615b5851323e56b38f5db/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Fmain%2Fjava%2Forg%2Fmockito%2FMockito.java?ref=41b611ac1d8fe2a631e615b5851323e56b38f5db",
      "patch": "@@ -179,7 +179,7 @@\n  * verify(mockedList).get(anyInt());\n  *\n  * //<b>argument matchers can also be written as Java 8 Lambdas</b>\n- * verify(mockedList).add(someString -> someString.length() > 5);\n+ * verify(mockedList).add(argThat(someString -> someString.length() > 5));\n  *\n  * </code></pre>\n  *",
      "parent_sha": "74ddc9933cf922c4153da21fae6c9afa083944ce"
    }
  },
  {
    "oid": "a821aa5fac8f1d8247cadfa823aa1ccc57699044",
    "message": "Fixed bug in test utility",
    "date": "2016-05-09T21:58:04Z",
    "url": "https://github.com/mockito/mockito/commit/a821aa5fac8f1d8247cadfa823aa1ccc57699044",
    "details": {
      "sha": "f4fd9f97698158ae0baef8146e12e4a426651d9b",
      "filename": "src/test/java/org/mockitoutil/JUnitResultAssert.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/a821aa5fac8f1d8247cadfa823aa1ccc57699044/src%2Ftest%2Fjava%2Forg%2Fmockitoutil%2FJUnitResultAssert.java",
      "raw_url": "https://github.com/mockito/mockito/raw/a821aa5fac8f1d8247cadfa823aa1ccc57699044/src%2Ftest%2Fjava%2Forg%2Fmockitoutil%2FJUnitResultAssert.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Ftest%2Fjava%2Forg%2Fmockitoutil%2FJUnitResultAssert.java?ref=a821aa5fac8f1d8247cadfa823aa1ccc57699044",
      "patch": "@@ -35,7 +35,7 @@ public void isSuccessful() {\n      */\n     public void fails(int expectedFailureCount, Class expectedException) {\n         if (result.getFailures().size() != expectedFailureCount) {\n-            throw new AssertionError(\"Wrong number of failures, expected: \" + expectedFailureCount + \", actual: \" + expectedFailureCount + \"\\n\" +\n+            throw new AssertionError(\"Wrong number of failures, expected: \" + expectedFailureCount + \", actual: \" + result.getFailures().size() + \"\\n\" +\n                     formatFailures(result.getFailures()));\n         }\n         for (Failure f : result.getFailures()) {",
      "parent_sha": "09d4808b3aa9f5bfa298b5226f20b389255ae0a0"
    }
  },
  {
    "oid": "5276a25fa126c2451953e2b9b775f675b10f4a5e",
    "message": "removed imposterization check as it was removed in latest master changes, need to change that as it is the responsability of the mock maker to tell if it can be imposterized or not",
    "date": "2013-01-04T16:36:42Z",
    "url": "https://github.com/mockito/mockito/commit/5276a25fa126c2451953e2b9b775f675b10f4a5e",
    "details": {
      "sha": "02552d57091af8817181dbc7efc62d52311ab1fb",
      "filename": "src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mockito/mockito/blob/5276a25fa126c2451953e2b9b775f675b10f4a5e/src%2Forg%2Fmockito%2Finternal%2Fcreation%2FAcrossJVMSerializationFeature.java",
      "raw_url": "https://github.com/mockito/mockito/raw/5276a25fa126c2451953e2b9b775f675b10f4a5e/src%2Forg%2Fmockito%2Finternal%2Fcreation%2FAcrossJVMSerializationFeature.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Finternal%2Fcreation%2FAcrossJVMSerializationFeature.java?ref=5276a25fa126c2451953e2b9b775f675b10f4a5e",
      "patch": "@@ -282,7 +282,7 @@ protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, Clas\n             }\n \n             // TODO check the class is mockable in the deserialization side\n-            ClassImposterizer.INSTANCE.canImposterise(typeToMock);\n+            // ClassImposterizer.INSTANCE.canImposterise(typeToMock);\n \n             // create the Mockito mock class before it can even be deserialized\n             ClassImposterizer.INSTANCE.setConstructorsAccessible(typeToMock, true);",
      "parent_sha": "9644975519c9a652a2ab13e0e8089e50c6d0efa0"
    }
  },
  {
    "oid": "0f9fe08c26311dd30e7d5f56c04ae6c19a86a65a",
    "message": "fixed a typo\n\n--HG--\nextra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401351",
    "date": "2009-04-19T20:58:55Z",
    "url": "https://github.com/mockito/mockito/commit/0f9fe08c26311dd30e7d5f56c04ae6c19a86a65a",
    "details": {
      "sha": "a56c5cabc4619fa1fad8d76e26b4ecdd9cc18659",
      "filename": "src/org/mockito/exceptions/Reporter.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mockito/mockito/blob/0f9fe08c26311dd30e7d5f56c04ae6c19a86a65a/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java",
      "raw_url": "https://github.com/mockito/mockito/raw/0f9fe08c26311dd30e7d5f56c04ae6c19a86a65a/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java",
      "contents_url": "https://api.github.com/repos/mockito/mockito/contents/src%2Forg%2Fmockito%2Fexceptions%2FReporter.java?ref=0f9fe08c26311dd30e7d5f56c04ae6c19a86a65a",
      "patch": "@@ -79,7 +79,7 @@ public void missingMethodInvocation() {\n                 \"For example:\",\n                 \"    when(mock.getArticles()).thenReturn(articles);\",\n                 \"\",\n-                \"Also, this error might show up because you verify final method, equals() or hashcode() method.\",\n+                \"Also, this error might show up because you verify final method, equals() or hashCode() method.\",\n                 \"Those methods *cannot* be stubbed/verified.\",\n                 \"\"\n         ));\n@@ -93,7 +93,7 @@ public void unfinishedVerificationException(Location location) {\n                 \"Example of correct verification:\",\n                 \"    verify(mock).doSomething()\",\n                 \"\",\n-                \"Also, this error might show up because you stub a final method, equals() or hashcode() method.\",\n+                \"Also, this error might show up because you stub a final method, equals() or hashCode() method.\",\n                 \"Those methods *cannot* be stubbed/verified.\",\n                 \"\"\n         ));\n@@ -405,7 +405,7 @@ public void misplacedArgumentMatcher(Location location) {\n                 \"    verify(mock).someMethod(contains(\\\"foo\\\"))\",\n                 \"\",\n                 \"Also, this error might show up because you use argument matchers with methods that cannot be mocked.\",\n-                \"Following methods *cannot* be stubbed/verified: final methods, equals() and hashcode().\",                \n+                \"Following methods *cannot* be stubbed/verified: final methods, equals() and hashCode().\",                \n                 \"\"\n                 ));\n     }",
      "parent_sha": "9810b2c362aace053696a099c18601da5aa9344a"
    }
  }
]