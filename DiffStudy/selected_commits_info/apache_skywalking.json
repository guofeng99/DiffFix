[
  {
    "oid": "41d3d894cf76dddd9e0fc7cce2166ba5aa44a42a",
    "message": "\u4fee\u6539HBase\u4e2d\u7edf\u8ba1\u8868\u4e2d\u7684Rowkey\u6708\u4efd\u663e\u793a\u4e0d\u5bf9",
    "date": "2016-03-09T11:01:51Z",
    "url": "https://github.com/apache/skywalking/commit/41d3d894cf76dddd9e0fc7cce2166ba5aa44a42a",
    "details": {
      "sha": "0a635c76a905c1210e9b78c1638a107367d5bc4a",
      "filename": "skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chainbuild/entity/CallChainTreeNode.java",
      "status": "modified",
      "additions": 7,
      "deletions": 15,
      "changes": 22,
      "blob_url": "https://github.com/apache/skywalking/blob/41d3d894cf76dddd9e0fc7cce2166ba5aa44a42a/skywalking-analysis%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fanalysis%2Fchainbuild%2Fentity%2FCallChainTreeNode.java",
      "raw_url": "https://github.com/apache/skywalking/raw/41d3d894cf76dddd9e0fc7cce2166ba5aa44a42a/skywalking-analysis%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fanalysis%2Fchainbuild%2Fentity%2FCallChainTreeNode.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-analysis%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fanalysis%2Fchainbuild%2Fentity%2FCallChainTreeNode.java?ref=41d3d894cf76dddd9e0fc7cce2166ba5aa44a42a",
      "patch": "@@ -1,28 +1,20 @@\n package com.ai.cloud.skywalking.analysis.chainbuild.entity;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.hadoop.hbase.client.Put;\n-\n import com.ai.cloud.skywalking.analysis.chainbuild.po.ChainNode;\n import com.ai.cloud.skywalking.analysis.chainbuild.util.HBaseUtil;\n import com.ai.cloud.skywalking.analysis.config.HBaseTableMetaData;\n import com.google.gson.GsonBuilder;\n import com.google.gson.annotations.Expose;\n+import org.apache.hadoop.hbase.client.Put;\n+\n+import java.io.IOException;\n+import java.util.*;\n \n /**\n- * \n  * \u8c03\u7528\u6811\u7684\u6bcf\u4e2atraceLevelId + \"@\" + viewPointId\u6784\u6210\u4e00\u4e2a\u6811\u8282\u70b9<br/>\n  * \u865a\u62df\u5316\u8282\u70b9\u6982\u5ff5\u3002\u8282\u70b9\u5b58\u50a8\u843d\u5730\u65f6\uff0c\u6309\u7167\u8282\u70b9\u5bf9\u5e94\u7684\u65f6\u95f4\u6233<br/>\n- * \n- * @author wusheng\n  *\n+ * @author wusheng\n  */\n public class CallChainTreeNode {\n     @Expose\n@@ -60,7 +52,7 @@ public void summary(String treeId, ChainNode node) throws IOException {\n     }\n \n     private String generateKeyOfMinSummaryTable(String treeId, Calendar calendar) {\n-        return treeId + \"/\" + calendar.get(Calendar.YEAR) + \"-\" + calendar.get(Calendar.MONTH) + \"-\"\n+        return treeId + \"/\" + calendar.get(Calendar.YEAR) + \"-\" + (calendar.get(Calendar.MONTH) + 1) + \"-\"\n                 + calendar.get(Calendar.DAY_OF_MONTH) + \" \" + calendar.get(Calendar.HOUR) + \":00:00\";\n     }\n \n@@ -74,7 +66,7 @@ public String toString() {\n      * hbase\u7684key \u4e3a treeId + \u5c0f\u65f6 <br/>\n      * \u5217\u65cf\u4e2d\uff0c\u5217\u4e3a\u8282\u70b9id\uff0c\u89c4\u5219\u4e3a\uff1atraceLevelId + \"@\" + viewPointId <br/>\n      * \u5217\u7684\u503c\uff0c\u4e3a\u5f53\u524d\u8282\u70b9\u6309\u5c0f\u65f6\u5185\u5404\u5206\u949f\u7684\u6c47\u603b <br/>\n-     * \n+     *\n      * @throws IOException\n      * @throws InterruptedException\n      */",
      "parent_sha": "68c664f0379a5255c765bdce80e42275af01dd1b"
    }
  },
  {
    "oid": "d55640454ee63b151272f043697f8779bb6cdd50",
    "message": "fix NPE when has connection exception (#1253)",
    "date": "2018-05-22T06:03:42Z",
    "url": "https://github.com/apache/skywalking/commit/d55640454ee63b151272f043697f8779bb6cdd50",
    "details": {
      "sha": "d9a9ae7abf8867788b105bbe7431a40b6e76648b",
      "filename": "apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/apache/skywalking/blob/d55640454ee63b151272f043697f8779bb6cdd50/apm-sniffer%2Fapm-sdk-plugin%2Fokhttp-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fokhttp%2Fv3%2FRealCallInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/d55640454ee63b151272f043697f8779bb6cdd50/apm-sniffer%2Fapm-sdk-plugin%2Fokhttp-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fokhttp%2Fv3%2FRealCallInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fokhttp-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fokhttp%2Fv3%2FRealCallInterceptor.java?ref=d55640454ee63b151272f043697f8779bb6cdd50",
      "patch": "@@ -100,12 +100,13 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes, Object ret) throws Throwable {\n         Response response = (Response)ret;\n-        int statusCode = response.code();\n-\n-        AbstractSpan span = ContextManager.activeSpan();\n-        if (statusCode >= 400) {\n-            span.errorOccurred();\n-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (response != null) {\n+            int statusCode = response.code();\n+            AbstractSpan span = ContextManager.activeSpan();\n+            if (statusCode >= 400) {\n+                span.errorOccurred();\n+                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+            }\n         }\n \n         ContextManager.stopSpan();",
      "parent_sha": "e249e0607d461b609eb76be48c046d114b34bfd5"
    }
  },
  {
    "oid": "6208b9cb44a0fc5c5c66d6ce5b6aef7870d85511",
    "message": "Change the file name.",
    "date": "2017-10-21T02:22:57Z",
    "url": "https://github.com/apache/skywalking/commit/6208b9cb44a0fc5c5c66d6ce5b6aef7870d85511",
    "details": {
      "sha": "58afe2505c195d835e85c89ea75142a0f1d3c91c",
      "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/buffer/OffsetManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/6208b9cb44a0fc5c5c66d6ce5b6aef7870d85511/apm-collector%2Fapm-collector-agentstream%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fagentstream%2Fworker%2Fsegment%2Fbuffer%2FOffsetManager.java",
      "raw_url": "https://github.com/apache/skywalking/raw/6208b9cb44a0fc5c5c66d6ce5b6aef7870d85511/apm-collector%2Fapm-collector-agentstream%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fagentstream%2Fworker%2Fsegment%2Fbuffer%2FOffsetManager.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-agentstream%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fagentstream%2Fworker%2Fsegment%2Fbuffer%2FOffsetManager.java?ref=6208b9cb44a0fc5c5c66d6ce5b6aef7870d85511",
      "patch": "@@ -90,14 +90,14 @@ public void flush() {\n         String offsetRecord = offset.serialize();\n         if (!lastOffsetRecord.equals(offsetRecord)) {\n             if (offsetFile.length() >= BufferFileConfig.BUFFER_OFFSET_MAX_FILE_SIZE) {\n-                exchangeFile();\n+                nextFile();\n             }\n             FileUtils.INSTANCE.writeAppendToLast(offsetFile, randomAccessFile, offsetRecord);\n             lastOffsetRecord = offsetRecord;\n         }\n     }\n \n-    private void exchangeFile() {\n+    private void nextFile() {\n         String timeBucket = String.valueOf(TimeBucketUtils.INSTANCE.getSecondTimeBucket(System.currentTimeMillis()));\n         String offsetFileName = OFFSET_FILE_PREFIX + \"_\" + timeBucket + \".\" + Const.FILE_SUFFIX;\n         File newOffsetFile = new File(SegmentBufferConfig.BUFFER_PATH + offsetFileName);",
      "parent_sha": "60f94213df5d8dd542251b150130488cba31b393"
    }
  },
  {
    "oid": "92b320ebc28d90e5a768a5fa25076db322033966",
    "message": "Add warning log outputs, if too many spans created in one segment.",
    "date": "2018-01-04T02:29:22Z",
    "url": "https://github.com/apache/skywalking/commit/92b320ebc28d90e5a768a5fa25076db322033966",
    "details": {
      "sha": "03a1900a7595deb037e09d84042c2bc291920b70",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/apache/skywalking/blob/92b320ebc28d90e5a768a5fa25076db322033966/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java",
      "raw_url": "https://github.com/apache/skywalking/raw/92b320ebc28d90e5a768a5fa25076db322033966/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java?ref=92b320ebc28d90e5a768a5fa25076db322033966",
      "patch": "@@ -35,6 +35,8 @@\n import org.apache.skywalking.apm.agent.core.dictionary.DictionaryManager;\n import org.apache.skywalking.apm.agent.core.dictionary.DictionaryUtil;\n import org.apache.skywalking.apm.agent.core.dictionary.PossibleFound;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n import org.apache.skywalking.apm.agent.core.sampling.SamplingService;\n \n /**\n@@ -52,6 +54,9 @@\n  * @author zhang xin\n  */\n public class TracingContext implements AbstractTracerContext {\n+    private static final ILog logger = LogManager.getLogger(TracingContext.class);\n+    private long lastWarningTimestamp = 0;\n+\n     /**\n      * @see {@link SamplingService}\n      */\n@@ -506,6 +511,16 @@ private AbstractSpan first() {\n     }\n \n     private boolean isLimitMechanismWorking() {\n-        return spanIdGenerator >= Config.Agent.SPAN_LIMIT_PER_SEGMENT;\n+        if (spanIdGenerator >= Config.Agent.SPAN_LIMIT_PER_SEGMENT) {\n+            long currentTimeMillis = System.currentTimeMillis();\n+            if (currentTimeMillis - lastWarningTimestamp > 30 * 1000) {\n+                logger.warn(new RuntimeException(\"Shadow tracing context. Thread dump\"), \"More than {} spans required to create\",\n+                    Config.Agent.SPAN_LIMIT_PER_SEGMENT);\n+                lastWarningTimestamp = currentTimeMillis;\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }\n     }\n }",
      "parent_sha": "22420a45e8c000ee0f1ff7c02b9903baa6ff678d"
    }
  },
  {
    "oid": "ec9bea9d431be56f7e89f71f87b6c7ad51604178",
    "message": "Fix the typo. (#2596)",
    "date": "2019-05-06T03:23:09Z",
    "url": "https://github.com/apache/skywalking/commit/ec9bea9d431be56f7e89f71f87b6c7ad51604178",
    "details": {
      "sha": "a303827417a5c722cc0cf1e1203a1c27d7f85111",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/ec9bea9d431be56f7e89f71f87b6c7ad51604178/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FSnifferConfigInitializer.java",
      "raw_url": "https://github.com/apache/skywalking/raw/ec9bea9d431be56f7e89f71f87b6c7ad51604178/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FSnifferConfigInitializer.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FSnifferConfigInitializer.java?ref=ec9bea9d431be56f7e89f71f87b6c7ad51604178",
      "patch": "@@ -58,7 +58,7 @@ public class SnifferConfigInitializer {\n      * start with {@link #ENV_KEY_PREFIX}. e.g. in env `skywalking.agent.service_name=yourAppName` to override\n      * `agent.service_name` in config file.\n      * <p>\n-     * At the end, `agent.service_name` and `collector.servers` must be not blank.\n+     * At the end, `agent.service_name` and `collector.servers` must not be blank.\n      */\n     public static void initialize(String agentOptions) throws ConfigNotFoundException, AgentPackageNotFoundException {\n         InputStreamReader configFileStream;",
      "parent_sha": "6412811a0600dd45249d1f34c086a7f72eac8a22"
    }
  },
  {
    "oid": "0060a132e4375c2b22f56a4e50577dd53a8c3ea4",
    "message": "\u4f18\u5316\u5f02\u5e38\u5904\u7406",
    "date": "2015-11-19T10:59:34Z",
    "url": "https://github.com/apache/skywalking/commit/0060a132e4375c2b22f56a4e50577dd53a8c3ea4",
    "details": {
      "sha": "17621bfd8d1535a0b7e4e7a3d5bfa306fdaa6a80",
      "filename": "skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/model/BuriedPointEntry.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/skywalking/blob/0060a132e4375c2b22f56a4e50577dd53a8c3ea4/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fmodel%2FBuriedPointEntry.java",
      "raw_url": "https://github.com/apache/skywalking/raw/0060a132e4375c2b22f56a4e50577dd53a8c3ea4/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fmodel%2FBuriedPointEntry.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fmodel%2FBuriedPointEntry.java?ref=0060a132e4375c2b22f56a4e50577dd53a8c3ea4",
      "patch": "@@ -98,7 +98,10 @@ public static BuriedPointEntry convert(String str) {\n         result.cost = Long.parseLong(fieldValues[5]);\n         result.address = fieldValues[6].trim();\n         result.statusCode = Byte.valueOf(fieldValues[7].trim());\n-        result.exceptionStack = fieldValues[8].trim();\n+        //\u5f02\u5e38\u60c5\u51b5\u624d\u4f1a\u5b58\u5728exceptionStack\n+        if (result.statusCode == 1) {\n+            result.exceptionStack = fieldValues[8].trim().replaceAll(\"^\",\"\\n\");\n+        }\n         result.spanType = fieldValues[9].charAt(0);\n         result.isReceiver = Boolean.valueOf(fieldValues[10]);\n         result.businessKey = fieldValues[11].trim();",
      "parent_sha": "1a0465d71cc0f9018b1b24eafc58d94014755b4d"
    }
  },
  {
    "oid": "e9196b7e204fe2737f4a719069d638ac38b1e33e",
    "message": "remove meaningless code (#6508)",
    "date": "2021-03-08T04:37:10Z",
    "url": "https://github.com/apache/skywalking/commit/e9196b7e204fe2737f4a719069d638ac38b1e33e",
    "details": {
      "sha": "18971ec9d208693e2f506da62c4043a75311901f",
      "filename": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/apache/skywalking/blob/e9196b7e204fe2737f4a719069d638ac38b1e33e/oap-server%2Fserver-storage-plugin%2Fstorage-jdbc-hikaricp-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Fjdbc%2Fh2%2Fdao%2FH2TraceQueryDAO.java",
      "raw_url": "https://github.com/apache/skywalking/raw/e9196b7e204fe2737f4a719069d638ac38b1e33e/oap-server%2Fserver-storage-plugin%2Fstorage-jdbc-hikaricp-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Fjdbc%2Fh2%2Fdao%2FH2TraceQueryDAO.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-storage-plugin%2Fstorage-jdbc-hikaricp-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Fjdbc%2Fh2%2Fdao%2FH2TraceQueryDAO.java?ref=e9196b7e204fe2737f4a719069d638ac38b1e33e",
      "patch": "@@ -99,15 +99,13 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n             sql.append(\" and \").append(SegmentRecord.TIME_BUCKET).append(\" <= ?\");\n             parameters.add(endSecondTB);\n         }\n-        if (minDuration != 0 || maxDuration != 0) {\n-            if (minDuration != 0) {\n-                sql.append(\" and \").append(SegmentRecord.LATENCY).append(\" >= ?\");\n-                parameters.add(minDuration);\n-            }\n-            if (maxDuration != 0) {\n-                sql.append(\" and \").append(SegmentRecord.LATENCY).append(\" <= ?\");\n-                parameters.add(maxDuration);\n-            }\n+        if (minDuration != 0) {\n+            sql.append(\" and \").append(SegmentRecord.LATENCY).append(\" >= ?\");\n+            parameters.add(minDuration);\n+        }\n+        if (maxDuration != 0) {\n+            sql.append(\" and \").append(SegmentRecord.LATENCY).append(\" <= ?\");\n+            parameters.add(maxDuration);\n         }\n         if (!Strings.isNullOrEmpty(endpointName)) {\n             sql.append(\" and \").append(SegmentRecord.ENDPOINT_NAME).append(\" like concat('%',?,'%')\");",
      "parent_sha": "20425c3aa5039899ed73ca8ffbe17062a73285cb"
    }
  },
  {
    "oid": "b53c178b498ef6dbe41053a49e931ac3ad8d4014",
    "message": "Add comments for new config item.",
    "date": "2017-11-27T08:57:55Z",
    "url": "https://github.com/apache/skywalking/commit/b53c178b498ef6dbe41053a49e931ac3ad8d4014",
    "details": {
      "sha": "2d6a755be543a1984f8692f8c5e993b30b474fb3",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/Config.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/b53c178b498ef6dbe41053a49e931ac3ad8d4014/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FConfig.java",
      "raw_url": "https://github.com/apache/skywalking/raw/b53c178b498ef6dbe41053a49e931ac3ad8d4014/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FConfig.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FConfig.java?ref=b53c178b498ef6dbe41053a49e931ac3ad8d4014",
      "patch": "@@ -54,8 +54,8 @@ public static class Agent {\n         public static int SPAN_LIMIT_PER_SEGMENT = 300;\n \n         /**\n-         * If true, skywalking agent will save all instrumented classes files. And you can send them to skywalking team,\n-         * in order to resolve compatible problem.\n+         * If true, skywalking agent will save all instrumented classes files in `/debugging` folder.\n+         * Skywalking team may ask for these files in order to resolve compatible problem.\n          */\n         public static boolean IS_OPEN_DEBUGGING_CLASS = false;\n     }",
      "parent_sha": "6a4a18a721ae3b8ca9a3e9789b0336402cf30f2d"
    }
  },
  {
    "oid": "f96338d977ab8c4a16d5bbc1c139aaff1ede0967",
    "message": "Change the URL that fetch grpc address",
    "date": "2017-09-04T14:39:25Z",
    "url": "https://github.com/apache/skywalking/commit/f96338d977ab8c4a16d5bbc1c139aaff1ede0967",
    "details": {
      "sha": "2ff27dda9144cfea739bff57ce95673c6d68ebee",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/Config.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/f96338d977ab8c4a16d5bbc1c139aaff1ede0967/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FConfig.java",
      "raw_url": "https://github.com/apache/skywalking/raw/f96338d977ab8c4a16d5bbc1c139aaff1ede0967/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FConfig.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FConfig.java?ref=f96338d977ab8c4a16d5bbc1c139aaff1ede0967",
      "patch": "@@ -57,7 +57,7 @@ public static class Collector {\n         /**\n          * Collector service discovery REST service name\n          */\n-        public static String DISCOVERY_SERVICE_NAME = \"/grpc/addresses\";\n+        public static String DISCOVERY_SERVICE_NAME = \"/agentstream/grpc\";\n     }\n \n     public static class Jvm {",
      "parent_sha": "af690c18ed62bdbdbeea218a2a88ad7851624e6d"
    }
  },
  {
    "oid": "22018d6a9fd8ef578fce7369ab450432ba235530",
    "message": "fix createExitSpan bug (#3257)",
    "date": "2019-08-13T16:10:51Z",
    "url": "https://github.com/apache/skywalking/commit/22018d6a9fd8ef578fce7369ab450432ba235530",
    "details": {
      "sha": "f8db1307322022997a8e8729d31f4b8c375fb011",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/apache/skywalking/blob/22018d6a9fd8ef578fce7369ab450432ba235530/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java",
      "raw_url": "https://github.com/apache/skywalking/raw/22018d6a9fd8ef578fce7369ab450432ba235530/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java?ref=22018d6a9fd8ef578fce7369ab450432ba235530",
      "patch": "@@ -325,6 +325,11 @@ public AbstractSpan createLocalSpan(final String operationName) {\n      */\n     @Override\n     public AbstractSpan createExitSpan(final String operationName, final String remotePeer) {\n+        if (isLimitMechanismWorking()) {\n+            NoopExitSpan span = new NoopExitSpan(remotePeer);\n+            return push(span);\n+        }\n+\n         AbstractSpan exitSpan;\n         AbstractSpan parentSpan = peek();\n         if (parentSpan != null && parentSpan.isExit()) {\n@@ -336,10 +341,6 @@ public AbstractSpan createExitSpan(final String operationName, final String remo\n                     new PossibleFound.FoundAndObtain() {\n                         @Override\n                         public Object doProcess(final int peerId) {\n-                            if (isLimitMechanismWorking()) {\n-                                return new NoopExitSpan(peerId);\n-                            }\n-\n                             return DictionaryManager.findEndpointSection()\n                                 .findOnly(segment.getServiceId(), operationName)\n                                 .doInCondition(\n@@ -359,10 +360,6 @@ public Object doProcess() {\n                     new PossibleFound.NotFoundAndObtain() {\n                         @Override\n                         public Object doProcess() {\n-                            if (isLimitMechanismWorking()) {\n-                                return new NoopExitSpan(remotePeer);\n-                            }\n-\n                             return DictionaryManager.findEndpointSection()\n                                 .findOnly(segment.getServiceId(), operationName)\n                                 .doInCondition(",
      "parent_sha": "a0e816771c3fcd2e1bc66ca60ecc738e7a579be6"
    }
  },
  {
    "oid": "f48f82fcf433bc319908a19eb15cd10e930c429f",
    "message": "Rename logs json key, ls -> lo.",
    "date": "2017-03-18T15:56:18Z",
    "url": "https://github.com/apache/skywalking/commit/f48f82fcf433bc319908a19eb15cd10e930c429f",
    "details": {
      "sha": "57573fd4ea160e2500ef1c28663e8d70fd415ce5",
      "filename": "skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/Span.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/f48f82fcf433bc319908a19eb15cd10e930c429f/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FSpan.java",
      "raw_url": "https://github.com/apache/skywalking/raw/f48f82fcf433bc319908a19eb15cd10e930c429f/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FSpan.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FSpan.java?ref=f48f82fcf433bc319908a19eb15cd10e930c429f",
      "patch": "@@ -66,7 +66,7 @@ public class Span{\n      * {@see https://github.com/opentracing/specification/blob/master/specification.md#log-structured-data}\n      */\n     @Expose\n-    @SerializedName(value=\"ls\")\n+    @SerializedName(value=\"lo\")\n     private final List<LogData> logs;\n \n     /**",
      "parent_sha": "4dab082c3c7a16a30a1513c336c8d08c718c504a"
    }
  },
  {
    "oid": "3323efaca960dd46ef1fa2448e1a583b86b04927",
    "message": "1.\u4fee\u6539\u4e00\u5904\u65b9\u6cd5\u540d",
    "date": "2016-01-21T07:08:04Z",
    "url": "https://github.com/apache/skywalking/commit/3323efaca960dd46ef1fa2448e1a583b86b04927",
    "details": {
      "sha": "6d948ed171051108cb1ff46964a28ae4dbd33be6",
      "filename": "skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/model/ChainRelate.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/apache/skywalking/blob/3323efaca960dd46ef1fa2448e1a583b86b04927/skywalking-analysis%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fanalysis%2Fmodel%2FChainRelate.java",
      "raw_url": "https://github.com/apache/skywalking/raw/3323efaca960dd46ef1fa2448e1a583b86b04927/skywalking-analysis%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fanalysis%2Fmodel%2FChainRelate.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-analysis%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fanalysis%2Fmodel%2FChainRelate.java?ref=3323efaca960dd46ef1fa2448e1a583b86b04927",
      "patch": "@@ -35,15 +35,12 @@ private void categoryUncategorizedChainInfo(CategorizedChainInfo parentChains) {\n     private void classifiedChains(UncategorizeChainInfo child) {\n         boolean isContained = false;\n         for (Map.Entry<String, CategorizedChainInfo> entry : categorizedChainInfoMap.entrySet()) {\n-\n-            if (!entry.getValue().isAlreadyContained(child) && entry.getValue().isContained(child)) {\n-                entry.getValue().add(child);\n-                chainDetailMap.put(child.getChainToken(), new ChainDetail(child));\n-                isContained = true;\n-            }\n-\n             if (entry.getValue().isAlreadyContained(child)) {\n                 isContained = true;\n+            }else if(entry.getValue().isContained(child)){\n+            \tentry.getValue().add(child);\n+                chainDetailMap.put(child.getChainToken(), new ChainDetail(child));\n+                isContained = true;\n             }\n         }\n ",
      "parent_sha": "0ee1bcfe5b070854cfe228ad9a3fbae85cc57815"
    }
  },
  {
    "oid": "f8ccbef2b16b74edbd7867c4c4a9ad793b3e1b04",
    "message": "\u540c\u4e0a\u8ffd\u52a0",
    "date": "2015-11-13T14:26:30Z",
    "url": "https://github.com/apache/skywalking/commit/f8ccbef2b16b74edbd7867c4c4a9ad793b3e1b04",
    "details": {
      "sha": "5dd2624727b84a02c09b6f0a8bff9773451d96d8",
      "filename": "skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/handler/CollectionServerDataHandler.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/apache/skywalking/blob/f8ccbef2b16b74edbd7867c4c4a9ad793b3e1b04/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fhandler%2FCollectionServerDataHandler.java",
      "raw_url": "https://github.com/apache/skywalking/raw/f8ccbef2b16b74edbd7867c4c4a9ad793b3e1b04/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fhandler%2FCollectionServerDataHandler.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fhandler%2FCollectionServerDataHandler.java?ref=f8ccbef2b16b74edbd7867c4c4a9ad793b3e1b04",
      "patch": "@@ -1,12 +1,13 @@\n package com.ai.cloud.skywalking.reciever.handler;\n \n import com.ai.cloud.skywalking.reciever.buffer.DataBufferThreadContainer;\n+import com.ai.cloud.skywalking.reciever.util.ByteArrayUtil;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n \n-public class CollectionServerDataHandler extends SimpleChannelInboundHandler {\n+public class CollectionServerDataHandler extends SimpleChannelInboundHandler<byte[]> {\n     @Override\n-    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n-        DataBufferThreadContainer.getDataBufferThread().doCarry(msg.toString().getBytes());\n+    protected void channelRead0(ChannelHandlerContext ctx, byte[] msg) throws Exception {\n+        DataBufferThreadContainer.getDataBufferThread().doCarry(msg);\n     }\n }",
      "parent_sha": "330c6b377d797e50a204c26f2cc5ee183d9eee17"
    }
  },
  {
    "oid": "bd495ab07ea100cefd467b39455dda88d3726a7b",
    "message": "\u52a0\u4e0a\u9501",
    "date": "2015-11-14T07:26:16Z",
    "url": "https://github.com/apache/skywalking/commit/bd495ab07ea100cefd467b39455dda88d3726a7b",
    "details": {
      "sha": "d2e27b6d9ef350796e33ec517f4e9c094d938467",
      "filename": "skywalking-api/src/main/java/com/ai/cloud/skywalking/sender/DataSenderFactory.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/apache/skywalking/blob/bd495ab07ea100cefd467b39455dda88d3726a7b/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderFactory.java",
      "raw_url": "https://github.com/apache/skywalking/raw/bd495ab07ea100cefd467b39455dda88d3726a7b/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderFactory.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderFactory.java?ref=bd495ab07ea100cefd467b39455dda88d3726a7b",
      "patch": "@@ -97,12 +97,16 @@ public void run() {\n                         break;\n                     }\n \n-                    try {\n-                        availableSenders.add(new DataSender(tmpScoketAddress));\n-                        unUsedSocketAddresses.remove(tmpScoketAddress);\n-                    } catch (IOException e) {\n+                    synchronized (lock) {\n+                        try {\n \n+                            availableSenders.add(new DataSender(tmpScoketAddress));\n+                            unUsedSocketAddresses.remove(tmpScoketAddress);\n+                        } catch (IOException e) {\n+\n+                        }\n                     }\n+\n                 }\n \n                 try {",
      "parent_sha": "64f672ec37722d16dc9b0207cf03251fc65275eb"
    }
  },
  {
    "oid": "7fcaeb34fb18f8d1eda1630b38895dcc22168147",
    "message": "\u4fee\u6539\u65b9\u6cd5\u540d\u79f0",
    "date": "2015-11-18T07:01:26Z",
    "url": "https://github.com/apache/skywalking/commit/7fcaeb34fb18f8d1eda1630b38895dcc22168147",
    "details": {
      "sha": "6d642c84ce30e44b26313b31eed53cca1c7905c5",
      "filename": "skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/storage/chain/SaveToHBaseChain.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/skywalking/blob/7fcaeb34fb18f8d1eda1630b38895dcc22168147/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fstorage%2Fchain%2FSaveToHBaseChain.java",
      "raw_url": "https://github.com/apache/skywalking/raw/7fcaeb34fb18f8d1eda1630b38895dcc22168147/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fstorage%2Fchain%2FSaveToHBaseChain.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fstorage%2Fchain%2FSaveToHBaseChain.java?ref=7fcaeb34fb18f8d1eda1630b38895dcc22168147",
      "patch": "@@ -24,7 +24,7 @@ public class SaveToHBaseChain implements IStorageChain {\n \n     @Override\n     public void doChain(List<BuriedPointEntry> entry, Chain chain) {\n-        insertBatch(entry);\n+        bulkInsertBuriedPointData(entry);\n         chain.doChain(entry);\n     }\n \n@@ -93,7 +93,7 @@ public static boolean insert(String tableName, Put put) {\n     }\n \n \n-    private static void insertBatch(List<BuriedPointEntry> entries) {\n+    private static void bulkInsertBuriedPointData(List<BuriedPointEntry> entries) {\n         List<Put> puts = new ArrayList<Put>();\n         Put put;\n         for (BuriedPointEntry buriedPointEntry : entries) {\n@@ -108,10 +108,10 @@ private static void insertBatch(List<BuriedPointEntry> entries) {\n             puts.add(put);\n         }\n \n-        insertBatch(Config.HBaseConfig.TABLE_NAME, puts);\n+        bulkInsertBuriedPointData(Config.HBaseConfig.TABLE_NAME, puts);\n     }\n \n-    private static void insertBatch(String tableName, List<Put> data) {\n+    private static void bulkInsertBuriedPointData(String tableName, List<Put> data) {\n         Object[] resultArrays = new Object[data.size()];\n         try {\n             Table table = connection.getTable(TableName.valueOf(tableName));",
      "parent_sha": "48b143dd9c44efbd2757073d97ee7ed9a4720092"
    }
  },
  {
    "oid": "48738abf53ff64229c837d604cc6ff3a2d71b02f",
    "message": "fix unit test",
    "date": "2017-10-07T13:54:32Z",
    "url": "https://github.com/apache/skywalking/commit/48738abf53ff64229c837d604cc6ff3a2d71b02f",
    "details": {
      "sha": "7288fd11734c9322543f290e6825c0e821d7189e",
      "filename": "apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/logging/EasyLoggerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/48738abf53ff64229c837d604cc6ff3a2d71b02f/apm-sniffer%2Fapm-agent-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Flogging%2FEasyLoggerTest.java",
      "raw_url": "https://github.com/apache/skywalking/raw/48738abf53ff64229c837d604cc6ff3a2d71b02f/apm-sniffer%2Fapm-agent-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Flogging%2FEasyLoggerTest.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Flogging%2FEasyLoggerTest.java?ref=48738abf53ff64229c837d604cc6ff3a2d71b02f",
      "patch": "@@ -88,7 +88,7 @@ public void testFormat() {\n         String formatLines = logger.format(exception);\n         String[] lines = formatLines.split(Constants.LINE_SEPARATOR);\n         Assert.assertEquals(\"java.lang.NullPointerException\", lines[1]);\n-        Assert.assertEquals(\"\\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:58)\", lines[2]);\n+        Assert.assertEquals(\"\\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:86)\", lines[2]);\n     }\n \n     @AfterClass",
      "parent_sha": "4ca612f65e2a2317239a021b01bf4d4e1b31f790"
    }
  },
  {
    "oid": "5c1fdb066e11e80dcae2019b844961bd99377e76",
    "message": "fix enhance class match failed",
    "date": "2017-07-16T14:44:24Z",
    "url": "https://github.com/apache/skywalking/commit/5c1fdb066e11e80dcae2019b844961bd99377e76",
    "details": {
      "sha": "626990ec060b7cca522312b302ff6dfe2a4e50a6",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginFinder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/5c1fdb066e11e80dcae2019b844961bd99377e76/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FPluginFinder.java",
      "raw_url": "https://github.com/apache/skywalking/raw/5c1fdb066e11e80dcae2019b844961bd99377e76/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FPluginFinder.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FPluginFinder.java?ref=5c1fdb066e11e80dcae2019b844961bd99377e76",
      "patch": "@@ -34,7 +34,7 @@ public PluginFinder(List<AbstractClassEnhancePluginDefine> plugins) {\n                 continue;\n             }\n \n-            if (match instanceof IndirectMatch) {\n+            if (match instanceof NameMatch) {\n                 NameMatch nameMatch = (NameMatch)match;\n                 nameMatchDefine.put(nameMatch.getClassName(), plugin);\n             } else {",
      "parent_sha": "93b0186dd2ebc31908e8c0f85fdc3cc6e6cd5d2a"
    }
  },
  {
    "oid": "a95e15fb8dc86e4303e90af27f9df1afad1760e0",
    "message": "Fix ArrayIndexOutOfBoundsException  (#2284)\n\n* Fix ArrayIndexOutOfBoundsException when intercepting net.spy.memcached.MemcachedClient.getStats()\r\n\r\n* revert format",
    "date": "2019-02-22T15:44:22Z",
    "url": "https://github.com/apache/skywalking/commit/a95e15fb8dc86e4303e90af27f9df1afad1760e0",
    "details": {
      "sha": "81e9fe1686c638478056e0b7298d31a680e910e6",
      "filename": "apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spymemcached/v2/MemcachedMethodInterceptor.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/apache/skywalking/blob/a95e15fb8dc86e4303e90af27f9df1afad1760e0/apm-sniffer%2Fapm-sdk-plugin%2Fspymemcached-2.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspymemcached%2Fv2%2FMemcachedMethodInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/a95e15fb8dc86e4303e90af27f9df1afad1760e0/apm-sniffer%2Fapm-sdk-plugin%2Fspymemcached-2.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspymemcached%2Fv2%2FMemcachedMethodInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fspymemcached-2.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspymemcached%2Fv2%2FMemcachedMethodInterceptor.java?ref=a95e15fb8dc86e4303e90af27f9df1afad1760e0",
      "patch": "@@ -41,7 +41,15 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         span.setComponent(ComponentsDefine.SPYMEMCACHED);\n         Tags.DB_TYPE.set(span, ComponentsDefine.SPYMEMCACHED.getName());\n         SpanLayer.asCache(span);\n-        Tags.DB_STATEMENT.set(span, method.getName() + \" \" + allArguments[0]);\n+        Tags.DB_STATEMENT.set(span, getStatement(method, allArguments));\n+    }\n+\n+    private String getStatement(Method method, Object[] allArguments) {\n+        if (allArguments != null && allArguments.length > 0) {\n+            return method.getName() + ' ' + allArguments[0];\n+        } else {\n+            return method.getName();\n+        }\n     }\n \n     @Override",
      "parent_sha": "8f866fecd9eefc3353386fe04d8315f284e40c68"
    }
  },
  {
    "oid": "6bcb6e8c19b0720e33e5605ec804bc27ff6a2b65",
    "message": "Fix a comment (#5684)",
    "date": "2020-10-18T11:07:45Z",
    "url": "https://github.com/apache/skywalking/commit/6bcb6e8c19b0720e33e5605ec804bc27ff6a2b65",
    "details": {
      "sha": "80c14a40d1b1b11bf1a51968cc384471f023b845",
      "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/NodeType.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/apache/skywalking/blob/6bcb6e8c19b0720e33e5605ec804bc27ff6a2b65/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2FNodeType.java",
      "raw_url": "https://github.com/apache/skywalking/raw/6bcb6e8c19b0720e33e5605ec804bc27ff6a2b65/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2FNodeType.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2FNodeType.java?ref=6bcb6e8c19b0720e33e5605ec804bc27ff6a2b65",
      "patch": "@@ -22,14 +22,13 @@\n import org.apache.skywalking.oap.server.core.UnexpectedException;\n \n /**\n- * Node type describe which kind of node of Service or Network address represents to.\n- * <p>\n- * The value comes from 'org.apache.skywalking.apm.network.language.agent.SpanLayer' at first place, but most likely it\n- * will extend and be used directly from different sources, such as Mesh.\n+ * Node type describe which kind of node of Service or Network address represents to. The node with {@link #Normal} and\n+ * {@link #Browser} type would be treated as an observed node.\n  */\n public enum NodeType {\n     /**\n-     * <code>Unknown = 0;</code>\n+     * <code>Normal = 0;</code>\n+     * This node type would be treated as an observed node.\n      */\n     Normal(0),\n     /**\n@@ -54,6 +53,7 @@ public enum NodeType {\n     Cache(5),\n     /**\n      * <code>Browser = 6;</code>\n+     * This node type would be treated as an observed node.\n      */\n     Browser(6),\n     /**\n@@ -101,7 +101,7 @@ public static NodeType valueOf(int value) {\n     }\n \n     /**\n-     * Right now, spanLayerValue is exact same as NodeType value.\n+     * @return the node type conjectured from the give span layer.\n      */\n     public static NodeType fromSpanLayerValue(SpanLayer spanLayer) {\n         switch (spanLayer) {\n@@ -120,7 +120,7 @@ public static NodeType fromSpanLayerValue(SpanLayer spanLayer) {\n             case UNRECOGNIZED:\n                 return Unrecognized;\n             default:\n-                throw new UnexpectedException(\"Unknown NodeType value\");\n+                throw new UnexpectedException(\"Can't transfer to the NodeType. SpanLayer=\" + spanLayer);\n         }\n     }\n }",
      "parent_sha": "7e6b19dfc03b9fb8f1a5d3a3685d607923dcc4ee"
    }
  },
  {
    "oid": "45729c985311360540273a6a17a9fea02b490434",
    "message": "1.\u589e\u52a0\u5305\u957f\u5ea6\u7684\u6821\u9a8c\uff0c\u540e\u7eed\u8981\u6539\u6389\u6b64\u5e38\u91cf\u3002",
    "date": "2015-12-23T06:08:09Z",
    "url": "https://github.com/apache/skywalking/commit/45729c985311360540273a6a17a9fea02b490434",
    "details": {
      "sha": "fb6fb54630555b65effc9d3e526c847978208ca1",
      "filename": "skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/handler/CollectionServerDataHandler.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/45729c985311360540273a6a17a9fea02b490434/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fhandler%2FCollectionServerDataHandler.java",
      "raw_url": "https://github.com/apache/skywalking/raw/45729c985311360540273a6a17a9fea02b490434/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fhandler%2FCollectionServerDataHandler.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fhandler%2FCollectionServerDataHandler.java?ref=45729c985311360540273a6a17a9fea02b490434",
      "patch": "@@ -4,13 +4,15 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n \n+import static com.ai.cloud.skywalking.reciever.conf.Config.Persistence.*;\n+\n public class CollectionServerDataHandler extends SimpleChannelInboundHandler<byte[]> {\n \n     @Override\n     protected void channelRead0(ChannelHandlerContext ctx, byte[] msg) throws Exception {\n         Thread.currentThread().setName(\"ServerReceiver\");\n         // \u5f53\u63a5\u53d7\u5230\u8fd9\u6761\u6d88\u606f\u7684\u662f\u7a7a\uff0c\u5219\u5ffd\u7565\n-        if (msg != null && msg.length >= 0) {\n+        if (msg != null && msg.length >= 0 && msg.length < MAX_STORAGE_SIZE_PER_TIME) {\n             DataBufferThreadContainer.getDataBufferThread().saveTemporarily(msg);\n         }\n     }",
      "parent_sha": "05738419233fc84ddf87875a6b6ee81fe1904390"
    }
  },
  {
    "oid": "e3a42f7ceae98b1951ad78592c76a3de62423f22",
    "message": "Fix a typo.",
    "date": "2017-05-08T01:13:35Z",
    "url": "https://github.com/apache/skywalking/commit/e3a42f7ceae98b1951ad78592c76a3de62423f22",
    "details": {
      "sha": "7ebdcc19836b62d54af956881aa715991ec5b55a",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginBootstrap.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/e3a42f7ceae98b1951ad78592c76a3de62423f22/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FPluginBootstrap.java",
      "raw_url": "https://github.com/apache/skywalking/raw/e3a42f7ceae98b1951ad78592c76a3de62423f22/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FPluginBootstrap.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FPluginBootstrap.java?ref=e3a42f7ceae98b1951ad78592c76a3de62423f22",
      "patch": "@@ -53,7 +53,7 @@ public List<AbstractClassEnhancePluginDefine> loadPlugins() {\n                 plugin.setClassTypePool(classTypePool);\n                 plugins.add(plugin);\n             } catch (Throwable t) {\n-                logger.error(t, \"loade plugin [{}] failure.\", pluginClassName);\n+                logger.error(t, \"load plugin [{}] failure.\", pluginClassName);\n             }\n         }\n ",
      "parent_sha": "ecf7a2bf2a5c589525105b7727c0ef630e784978"
    }
  },
  {
    "oid": "b03a4235019cf48e9a714d7c414b4ffedeb6d3da",
    "message": "\u4fee\u590d\u65e0\u6cd5\u518d\u6d4f\u89c8\u5668\u663e\u793aTraceId",
    "date": "2015-12-29T08:35:15Z",
    "url": "https://github.com/apache/skywalking/commit/b03a4235019cf48e9a714d7c414b4ffedeb6d3da",
    "details": {
      "sha": "9a7e73163d6a22b92d84e4b75ff6f10470d51e4a",
      "filename": "skywalking-sdk-plugin/web-plugin/src/main/java/com/ai/cloud/skywalking/plugin/web/SkyWalkingFilter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/b03a4235019cf48e9a714d7c414b4ffedeb6d3da/skywalking-sdk-plugin%2Fweb-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Fweb%2FSkyWalkingFilter.java",
      "raw_url": "https://github.com/apache/skywalking/raw/b03a4235019cf48e9a714d7c414b4ffedeb6d3da/skywalking-sdk-plugin%2Fweb-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Fweb%2FSkyWalkingFilter.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-sdk-plugin%2Fweb-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Fweb%2FSkyWalkingFilter.java?ref=b03a4235019cf48e9a714d7c414b4ffedeb6d3da",
      "patch": "@@ -57,7 +57,7 @@ public void doFilter(ServletRequest servletRequest, ServletResponse servletRespo\n             filterChain.doFilter(servletRequest, servletResponse);\n \n             HttpServletResponse httpServletResponse = (HttpServletResponse) servletResponse;\n-            httpServletResponse.setHeader(TRACE_ID_HEADER_NAME, Tracing.getTraceId());\n+            httpServletResponse.addHeader(TRACE_ID_HEADER_NAME, Tracing.getTraceId());\n         } catch (Throwable e) {\n             receiver.handleException(e);\n             throw new ServletException(e);",
      "parent_sha": "d765386e0569da713420d2bdb442c3633e814778"
    }
  },
  {
    "oid": "80911d088c2869fa5c4a11dc9c9d31e983eef606",
    "message": "fix the error of Struts2 plugin: java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getStatus() (#4503)\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>",
    "date": "2020-03-13T09:01:06Z",
    "url": "https://github.com/apache/skywalking/commit/80911d088c2869fa5c4a11dc9c9d31e983eef606",
    "details": {
      "sha": "4f5fa1aec9ec2bbffe287f00d9cea56c7d9522b2",
      "filename": "apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/struts2/Struts2Interceptor.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/apache/skywalking/blob/80911d088c2869fa5c4a11dc9c9d31e983eef606/apm-sniffer%2Fapm-sdk-plugin%2Fstruts2-2.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fstruts2%2FStruts2Interceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/80911d088c2869fa5c4a11dc9c9d31e983eef606/apm-sniffer%2Fapm-sdk-plugin%2Fstruts2-2.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fstruts2%2FStruts2Interceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fstruts2-2.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fstruts2%2FStruts2Interceptor.java?ref=80911d088c2869fa5c4a11dc9c9d31e983eef606",
      "patch": "@@ -26,6 +26,7 @@\n import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.util.MethodUtil;\n import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n import org.apache.struts2.ServletActionContext;\n import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n@@ -34,6 +35,15 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n \n public class Struts2Interceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static boolean IS_SERVLET_GET_STATUS_METHOD_EXIST;\n+    private static final String SERVLET_RESPONSE_CLASS = \"javax.servlet.http.HttpServletResponse\";\n+    private static final String GET_STATUS_METHOD = \"getStatus\";\n+\n+    static {\n+        IS_SERVLET_GET_STATUS_METHOD_EXIST = MethodUtil.isMethodExist(Struts2Interceptor.class.getClassLoader(), SERVLET_RESPONSE_CLASS, GET_STATUS_METHOD);\n+    }\n+\n     @Override\n     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         MethodInterceptResult result) throws Throwable {\n@@ -59,7 +69,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n         HttpServletResponse response = ServletActionContext.getResponse();\n \n         AbstractSpan span = ContextManager.activeSpan();\n-        if (response.getStatus() >= 400) {\n+        if (IS_SERVLET_GET_STATUS_METHOD_EXIST && response.getStatus() >= 400) {\n             span.errorOccurred();\n             Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));\n         }",
      "parent_sha": "37e93a6f4167e16990e959c3d61eab5853c67ffb"
    }
  },
  {
    "oid": "39f2cd3a5f80b28378d93f9424da435253a6c0a6",
    "message": "Optimize the code to prevent mongo statements from being too long (#5017)",
    "date": "2020-07-03T00:07:10Z",
    "url": "https://github.com/apache/skywalking/commit/39f2cd3a5f80b28378d93f9424da435253a6c0a6",
    "details": {
      "sha": "42e5ecdad42c292411c3f9326509701b4d237f50",
      "filename": "apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v3/support/MongoOperationHelper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/39f2cd3a5f80b28378d93f9424da435253a6c0a6/apm-sniffer%2Fapm-sdk-plugin%2Fmongodb-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fmongodb%2Fv3%2Fsupport%2FMongoOperationHelper.java",
      "raw_url": "https://github.com/apache/skywalking/raw/39f2cd3a5f80b28378d93f9424da435253a6c0a6/apm-sniffer%2Fapm-sdk-plugin%2Fmongodb-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fmongodb%2Fv3%2Fsupport%2FMongoOperationHelper.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fmongodb-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fmongodb%2Fv3%2Fsupport%2FMongoOperationHelper.java?ref=39f2cd3a5f80b28378d93f9424da435253a6c0a6",
      "patch": "@@ -128,8 +128,7 @@ private static String getFilter(List<? extends WriteRequest> writeRequestList) {\n             }\n             final int filterLengthLimit = Config.Plugin.MongoDB.FILTER_LENGTH_LIMIT;\n             if (filterLengthLimit > 0 && params.length() > filterLengthLimit) {\n-                params.append(\"...\");\n-                break;\n+                return params.substring(0, filterLengthLimit) + \"...\";\n             }\n         }\n         return params.toString();",
      "parent_sha": "d264f914d57ebef3be14c6885739c57c7106ad65"
    }
  },
  {
    "oid": "b8051d3ec315a2bdaaf07ebef497e9cb573e919c",
    "message": "Recover server.start()",
    "date": "2017-03-20T15:11:20Z",
    "url": "https://github.com/apache/skywalking/commit/b8051d3ec315a2bdaaf07ebef497e9cb573e919c",
    "details": {
      "sha": "24f481fb59b459ebf208b3d8b6012a31695d95d9",
      "filename": "skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/client/HTTPRestServiceTestApp.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/b8051d3ec315a2bdaaf07ebef497e9cb573e919c/skywalking-sniffer%2Fskywalking-api%2Fsrc%2Ftest%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Fapi%2Fclient%2FHTTPRestServiceTestApp.java",
      "raw_url": "https://github.com/apache/skywalking/raw/b8051d3ec315a2bdaaf07ebef497e9cb573e919c/skywalking-sniffer%2Fskywalking-api%2Fsrc%2Ftest%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Fapi%2Fclient%2FHTTPRestServiceTestApp.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-sniffer%2Fskywalking-api%2Fsrc%2Ftest%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Fapi%2Fclient%2FHTTPRestServiceTestApp.java?ref=b8051d3ec315a2bdaaf07ebef497e9cb573e919c",
      "patch": "@@ -75,7 +75,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques\n                 baseRequest.setHandled(true);\n             }\n         });\n-        //server.start();\n+        server.start();\n         return server;\n     }\n ",
      "parent_sha": "4a2104d25e21b66e9582e6cd06f9e01a63f4122c"
    }
  },
  {
    "oid": "06b5138b33c97cf8f0ddec2d1ba230746ea7a07c",
    "message": "Create WitnessClassFinder.java\n\nFix the wrong key of poolMap",
    "date": "2017-06-08T00:54:23Z",
    "url": "https://github.com/apache/skywalking/commit/06b5138b33c97cf8f0ddec2d1ba230746ea7a07c",
    "details": {
      "sha": "eccc0ca12fb8ad596a95e5d2b536c6f38d51d9c2",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/WitnessClassFinder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/skywalking/blob/06b5138b33c97cf8f0ddec2d1ba230746ea7a07c/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FWitnessClassFinder.java",
      "raw_url": "https://github.com/apache/skywalking/raw/06b5138b33c97cf8f0ddec2d1ba230746ea7a07c/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FWitnessClassFinder.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2FWitnessClassFinder.java?ref=06b5138b33c97cf8f0ddec2d1ba230746ea7a07c",
      "patch": "@@ -1,7 +1,7 @@\n package org.skywalking.apm.agent.core.plugin;\n \n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n+import java.util.HashMap;\n import net.bytebuddy.pool.TypePool;\n \n /**\n@@ -14,7 +14,7 @@\n public enum WitnessClassFinder {\n     INSTANCE;\n \n-    private Map<ClassLoader, TypePool> poolMap = new ConcurrentHashMap<ClassLoader, TypePool>();\n+    private Map<ClassLoader, TypePool> poolMap = new HashMap<ClassLoader, TypePool>();\n \n     /**\n      * @param witnessClass\n@@ -23,9 +23,9 @@ public enum WitnessClassFinder {\n      */\n     public boolean exist(String witnessClass, ClassLoader classLoader) {\n         ClassLoader mappingKey = classLoader == null ? NullClassLoader.INSTANCE : classLoader;\n-        if (!poolMap.containsKey(witnessClass)) {\n+        if (!poolMap.containsKey(mappingKey)) {\n             synchronized (poolMap) {\n-                if (!poolMap.containsKey(witnessClass)) {\n+                if (!poolMap.containsKey(mappingKey)) {\n                     TypePool classTypePool = classLoader == null ? TypePool.Default.ofClassPath() : TypePool.Default.of(classLoader);\n                     poolMap.put(mappingKey, classTypePool);\n                 }",
      "parent_sha": "c78bd4f157d378adf78fcd5ab076b0b49e95cb20"
    }
  },
  {
    "oid": "effe49a102e94d4473f49bdb5d29107631fd02b5",
    "message": "NPE fix (#2732)",
    "date": "2019-05-22T10:38:18Z",
    "url": "https://github.com/apache/skywalking/commit/effe49a102e94d4473f49bdb5d29107631fd02b5",
    "details": {
      "sha": "f8908ea010f6704a0635356b55719272dfdf0e20",
      "filename": "oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/effe49a102e94d4473f49bdb5d29107631fd02b5/oap-server%2Fserver-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstarter%2Fconfig%2FApplicationConfigLoader.java",
      "raw_url": "https://github.com/apache/skywalking/raw/effe49a102e94d4473f49bdb5d29107631fd02b5/oap-server%2Fserver-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstarter%2Fconfig%2FApplicationConfigLoader.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstarter%2Fconfig%2FApplicationConfigLoader.java?ref=effe49a102e94d4473f49bdb5d29107631fd02b5",
      "patch": "@@ -69,7 +69,9 @@ private void loadConfig(ApplicationConfiguration configuration) throws ConfigFil\n                                     properties.put(key, value);\n                                     final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                         .replacePlaceholders(value + \"\", properties));\n-                                    properties.replace(key, replaceValue);\n+                                    if (replaceValue != null) {\n+                                        properties.replace(key, replaceValue);\n+                                    }\n                                     logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                 });\n                             }",
      "parent_sha": "202918cbea7337cce4f2e07167359025108a668d"
    }
  },
  {
    "oid": "10449aa51cf5afc43f85a7f73769ad14957339b1",
    "message": "Logger class is incorrect. (#3054)",
    "date": "2019-07-12T00:46:36Z",
    "url": "https://github.com/apache/skywalking/commit/10449aa51cf5afc43f85a7f73769ad14957339b1",
    "details": {
      "sha": "d7a2ef9962c5f3748f57e0a3c8c0ae744933cf69",
      "filename": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/10449aa51cf5afc43f85a7f73769ad14957339b1/oap-server%2Fserver-receiver-plugin%2Fskywalking-register-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fregister%2Fprovider%2Fhandler%2Fv6%2Fgrpc%2FRegisterServiceHandler.java",
      "raw_url": "https://github.com/apache/skywalking/raw/10449aa51cf5afc43f85a7f73769ad14957339b1/oap-server%2Fserver-receiver-plugin%2Fskywalking-register-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fregister%2Fprovider%2Fhandler%2Fv6%2Fgrpc%2FRegisterServiceHandler.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-receiver-plugin%2Fskywalking-register-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fregister%2Fprovider%2Fhandler%2Fv6%2Fgrpc%2FRegisterServiceHandler.java?ref=10449aa51cf5afc43f85a7f73769ad14957339b1",
      "patch": "@@ -31,7 +31,6 @@\n import org.apache.skywalking.oap.server.core.source.DetectPoint;\n import org.apache.skywalking.oap.server.library.module.ModuleManager;\n import org.apache.skywalking.oap.server.library.server.grpc.GRPCHandler;\n-import org.apache.skywalking.oap.server.receiver.register.provider.handler.v5.grpc.InstanceDiscoveryServiceHandler;\n import org.slf4j.*;\n \n import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.*;\n@@ -41,7 +40,7 @@\n  */\n public class RegisterServiceHandler extends RegisterGrpc.RegisterImplBase implements GRPCHandler {\n \n-    private static final Logger logger = LoggerFactory.getLogger(InstanceDiscoveryServiceHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(RegisterServiceHandler.class);\n \n     private final ServiceInventoryCache serviceInventoryCache;\n     private final ServiceInstanceInventoryCache serviceInstanceInventoryCache;",
      "parent_sha": "52b674e3a55c2f6197e2b3adef15ff947576cd2a"
    }
  },
  {
    "oid": "0baf691ae48f9b6971a0503d8b210e50e50dcb1a",
    "message": "fix jdbc plugin issue",
    "date": "2017-09-01T04:12:21Z",
    "url": "https://github.com/apache/skywalking/commit/0baf691ae48f9b6971a0503d8b210e50e50dcb1a",
    "details": {
      "sha": "244d24e178820b5f1e7891a6308b0580667be454",
      "filename": "apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/define/JDBCDriverInterceptor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/skywalking/blob/0baf691ae48f9b6971a0503d8b210e50e50dcb1a/apm-sniffer%2Fapm-sdk-plugin%2Fjdbc-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fjdbc%2Fdefine%2FJDBCDriverInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/0baf691ae48f9b6971a0503d8b210e50e50dcb1a/apm-sniffer%2Fapm-sdk-plugin%2Fjdbc-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fjdbc%2Fdefine%2FJDBCDriverInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fjdbc-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fjdbc%2Fdefine%2FJDBCDriverInterceptor.java?ref=0baf691ae48f9b6971a0503d8b210e50e50dcb1a",
      "patch": "@@ -23,8 +23,12 @@ public class JDBCDriverInterceptor implements InstanceMethodsAroundInterceptor {\n \n     @Override public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes, Object ret) throws Throwable {\n-        return new SWConnection((String)allArguments[0],\n-            (Properties)allArguments[1], (Connection)ret);\n+        if (ret != null) {\n+            return new SWConnection((String)allArguments[0],\n+                (Properties)allArguments[1], (Connection)ret);\n+        }\n+\n+        return ret;\n     }\n \n     @Override public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,",
      "parent_sha": "61b4a080b7c59e79a3c749c025cf4865d13b3c31"
    }
  },
  {
    "oid": "4c55c61633c7db50cae5d3c42ac7efebed21acca",
    "message": "1.\u52a0\u4e0a\u90e8\u5206\u65e5\u5fd7\u3002",
    "date": "2015-12-11T13:40:29Z",
    "url": "https://github.com/apache/skywalking/commit/4c55c61633c7db50cae5d3c42ac7efebed21acca",
    "details": {
      "sha": "f3f66418e098c3156501a13ea3df1500355be793",
      "filename": "skywalking-alarm/src/main/java/com/ai/cloud/skywalking/alarm/UserInfoCoordinator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/4c55c61633c7db50cae5d3c42ac7efebed21acca/skywalking-alarm%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Falarm%2FUserInfoCoordinator.java",
      "raw_url": "https://github.com/apache/skywalking/raw/4c55c61633c7db50cae5d3c42ac7efebed21acca/skywalking-alarm%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Falarm%2FUserInfoCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-alarm%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Falarm%2FUserInfoCoordinator.java?ref=4c55c61633c7db50cae5d3c42ac7efebed21acca",
      "patch": "@@ -46,6 +46,7 @@ public void run() {\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\t\n+\t\t\t\t\tlogger.info(\"becoming cluster coordinator.\");\n \t\t\t\t\tisCoordinator = true;\n \t\t\t\t\twatcherRegisterServerPath();\n \t\t\t\t\tredistributing = true;\n@@ -113,7 +114,7 @@ public void run() {\n \t\t\t\t}\n \n \t\t\t} catch (Exception e) {\n-\t\t\t\tlogger.error(\"Failed to coordinate, retry. \", e);\n+\t\t\t\tlogger.error(\"Failed to coordinate, release lock. \", e);\n \t\t\t\treleaseCoordinator();\n \t\t\t\tisCoordinator = false;\n \t\t\t}",
      "parent_sha": "2c1fb7913ae17f0caca66651d10c5ae08d91fcc2"
    }
  },
  {
    "oid": "bade4fd6c8db0ee69875961cef1ee38c51e8ad17",
    "message": "Make the exception message with the instance id which will help us to find the bug. (#1005)\n\nFixed #999",
    "date": "2018-03-30T14:09:34Z",
    "url": "https://github.com/apache/skywalking/commit/bade4fd6c8db0ee69875961cef1ee38c51e8ad17",
    "details": {
      "sha": "c17ec3a6ed588123af38ba965b60fcaf72c9ca87",
      "filename": "apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/InstanceHeartBeatEsPersistenceDAO.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/bade4fd6c8db0ee69875961cef1ee38c51e8ad17/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2FInstanceHeartBeatEsPersistenceDAO.java",
      "raw_url": "https://github.com/apache/skywalking/raw/bade4fd6c8db0ee69875961cef1ee38c51e8ad17/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2FInstanceHeartBeatEsPersistenceDAO.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2FInstanceHeartBeatEsPersistenceDAO.java?ref=bade4fd6c8db0ee69875961cef1ee38c51e8ad17",
      "patch": "@@ -61,7 +61,7 @@ public InstanceHeartBeatEsPersistenceDAO(ElasticSearchClient client) {\n     }\n \n     @Override public IndexRequestBuilder prepareBatchInsert(Instance data) {\n-        throw new UnexpectedException(\"There is no need to merge stream data with database data.\");\n+        throw new UnexpectedException(\"Received an instance heart beat message under instance id= \" + data.getId() + \" , which doesn't exist.\");\n     }\n \n     @Override public UpdateRequestBuilder prepareBatchUpdate(Instance data) {",
      "parent_sha": "c84c76355b6e4719f887002cfde8fcbf79c83a0d"
    }
  },
  {
    "oid": "c3c56acf0c002bc6f717b7d889123e56a283e0b3",
    "message": "Avoided to interrupt the process of the application in the `SWExecutionHookWrapper` wrapper class. (#5803)\n\n* Avoided to interrupt the process of the application in the `SWExecutionHookWrapper` wrapper class.\r\n\r\n* Polishing.\r\n\r\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>",
    "date": "2020-11-06T07:18:14Z",
    "url": "https://github.com/apache/skywalking/commit/c3c56acf0c002bc6f717b7d889123e56a283e0b3",
    "details": {
      "sha": "0efddf8c84899cc9b486b460c5b62c28fd6f0bc5",
      "filename": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWExecutionHookWrapper.java",
      "status": "modified",
      "additions": 20,
      "deletions": 8,
      "changes": 28,
      "blob_url": "https://github.com/apache/skywalking/blob/c3c56acf0c002bc6f717b7d889123e56a283e0b3/apm-sniffer%2Fapm-sdk-plugin%2Fhystrix-1.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fhystrix%2Fv1%2FSWExecutionHookWrapper.java",
      "raw_url": "https://github.com/apache/skywalking/raw/c3c56acf0c002bc6f717b7d889123e56a283e0b3/apm-sniffer%2Fapm-sdk-plugin%2Fhystrix-1.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fhystrix%2Fv1%2FSWExecutionHookWrapper.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fhystrix-1.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fhystrix%2Fv1%2FSWExecutionHookWrapper.java?ref=c3c56acf0c002bc6f717b7d889123e56a283e0b3",
      "patch": "@@ -23,6 +23,8 @@\n import com.netflix.hystrix.exception.HystrixRuntimeException;\n import com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHook;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n \n /**\n@@ -31,6 +33,8 @@\n public class SWExecutionHookWrapper extends HystrixCommandExecutionHook {\n     private final HystrixCommandExecutionHook actual;\n \n+    private static ILog LOGGER = LogManager.getLogger(SWExecutionHookWrapper.class);\n+\n     public SWExecutionHookWrapper(HystrixCommandExecutionHook actual) {\n         this.actual = actual;\n     }\n@@ -42,10 +46,14 @@ public <T> void onStart(HystrixInvokable<T> commandInstance) {\n             return;\n         }\n \n-        EnhancedInstance enhancedInstance = (EnhancedInstance) commandInstance;\n-        EnhanceRequireObjectCache enhanceRequireObjectCache = (EnhanceRequireObjectCache) enhancedInstance.getSkyWalkingDynamicField();\n-        if (ContextManager.isActive()) {\n-            enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+        try {\n+            EnhancedInstance enhancedInstance = (EnhancedInstance) commandInstance;\n+            EnhanceRequireObjectCache enhanceRequireObjectCache = (EnhanceRequireObjectCache) enhancedInstance.getSkyWalkingDynamicField();\n+            if (ContextManager.isActive()) {\n+                enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+            }\n+        } catch (Exception e) {\n+            LOGGER.error(\"Failed to set ContextSnapshot.\", e);\n         }\n         actual.onStart(commandInstance);\n     }\n@@ -194,10 +202,14 @@ public <T> void onStart(HystrixCommand<T> commandInstance) {\n             return;\n         }\n \n-        EnhancedInstance enhancedInstance = (EnhancedInstance) commandInstance;\n-        EnhanceRequireObjectCache enhanceRequireObjectCache = (EnhanceRequireObjectCache) enhancedInstance.getSkyWalkingDynamicField();\n-        if (ContextManager.isActive()) {\n-            enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+        try {\n+            EnhancedInstance enhancedInstance = (EnhancedInstance) commandInstance;\n+            EnhanceRequireObjectCache enhanceRequireObjectCache = (EnhanceRequireObjectCache) enhancedInstance.getSkyWalkingDynamicField();\n+            if (ContextManager.isActive()) {\n+                enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());\n+            }\n+        } catch (Exception e) {\n+            LOGGER.error(\"Failed to set ContextSnapshot.\", e);\n         }\n         actual.onStart(commandInstance);\n     }",
      "parent_sha": "96014ddac2c4af9c1dc8bd99047815ec040016ac"
    }
  },
  {
    "oid": "b1b1615926fd50a287d645166077d1f2b78160ce",
    "message": "Close inputstream. (#4184)\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>\r\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>",
    "date": "2020-01-07T02:01:25Z",
    "url": "https://github.com/apache/skywalking/commit/b1b1615926fd50a287d645166077d1f2b78160ce",
    "details": {
      "sha": "daa8b4cbd546c2683ad47e0b579efa74aff70b47",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/AgentIDDecorator.java",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/apache/skywalking/blob/b1b1615926fd50a287d645166077d1f2b78160ce/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FAgentIDDecorator.java",
      "raw_url": "https://github.com/apache/skywalking/raw/b1b1615926fd50a287d645166077d1f2b78160ce/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FAgentIDDecorator.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FAgentIDDecorator.java?ref=b1b1615926fd50a287d645166077d1f2b78160ce",
      "patch": "@@ -51,14 +51,15 @@ public AgentIDDecorator() {\n             Enumeration<URL> resources = AgentIDDecorator.class.getClassLoader().getResources(JarFile.MANIFEST_NAME);\n             while (resources.hasMoreElements()) {\n                 URL url = resources.nextElement();\n-                InputStream is = url.openStream();\n-                if (is != null) {\n-                    Manifest manifest = new Manifest(is);\n-                    Attributes mainAttribs = manifest.getMainAttributes();\n-                    String projectName = mainAttribs.getValue(\"Implementation-Vendor-Id\");\n-                    if (projectName != null) {\n-                        if (\"org.apache.skywalking\".equals(projectName)) {\n-                            version = mainAttribs.getValue(\"Implementation-Version\");\n+                try (InputStream is = url.openStream()) {\n+                    if (is != null) {\n+                        Manifest manifest = new Manifest(is);\n+                        Attributes mainAttribs = manifest.getMainAttributes();\n+                        String projectName = mainAttribs.getValue(\"Implementation-Vendor-Id\");\n+                        if (projectName != null) {\n+                            if (\"org.apache.skywalking\".equals(projectName)) {\n+                                version = mainAttribs.getValue(\"Implementation-Version\");\n+                            }\n                         }\n                     }\n                 }",
      "parent_sha": "8e9a1121cdbbded4f70a38332e3b163b79e09400"
    }
  },
  {
    "oid": "4c6a323e4d3364fa4fc607ae819c9abab36579f9",
    "message": "Fix NullPointerException in Spring interceptor (#4063)",
    "date": "2019-12-14T11:41:58Z",
    "url": "https://github.com/apache/skywalking/commit/4c6a323e4d3364fa4fc607ae819c9abab36579f9",
    "details": {
      "sha": "276f8421564eed058ee30a36d12615348bfc9699",
      "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/GetPropertyDescriptorsInterceptor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/4c6a323e4d3364fa4fc607ae819c9abab36579f9/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FGetPropertyDescriptorsInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/4c6a323e4d3364fa4fc607ae819c9abab36579f9/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FGetPropertyDescriptorsInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FGetPropertyDescriptorsInterceptor.java?ref=4c6a323e4d3364fa4fc607ae819c9abab36579f9",
      "patch": "@@ -41,7 +41,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n \n         PropertyDescriptor[] propertyDescriptors = (PropertyDescriptor[])ret;\n \n-        if (EnhancedInstance.class.isAssignableFrom(((BeanWrapperImpl)objInst).getRootClass())) {\n+        Class<?> rootClass = ((BeanWrapperImpl) objInst).getRootClass();\n+        if (rootClass != null && EnhancedInstance.class.isAssignableFrom(rootClass)) {\n             List<PropertyDescriptor> newPropertyDescriptors = new ArrayList<PropertyDescriptor>();\n             for (PropertyDescriptor descriptor : propertyDescriptors) {\n                 if (!\"skyWalkingDynamicField\".equals(descriptor.getName())) {",
      "parent_sha": "a836612534a09aa3f30db2a1ba86ab4b70144299"
    }
  },
  {
    "oid": "bfbf7aebc9014aac3b90c4309c89694d639f49a1",
    "message": "fix compile failed",
    "date": "2017-12-04T02:49:10Z",
    "url": "https://github.com/apache/skywalking/commit/bfbf7aebc9014aac3b90c4309c89694d639f49a1",
    "details": {
      "sha": "20476f96d1412b332b1c0373f832a597c13b5b3a",
      "filename": "apm-network/src/main/java/org/skywalking/apm/network/trace/component/ComponentsDefine.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/bfbf7aebc9014aac3b90c4309c89694d639f49a1/apm-network%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fnetwork%2Ftrace%2Fcomponent%2FComponentsDefine.java",
      "raw_url": "https://github.com/apache/skywalking/raw/bfbf7aebc9014aac3b90c4309c89694d639f49a1/apm-network%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fnetwork%2Ftrace%2Fcomponent%2FComponentsDefine.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-network%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fnetwork%2Ftrace%2Fcomponent%2FComponentsDefine.java?ref=bfbf7aebc9014aac3b90c4309c89694d639f49a1",
      "patch": "@@ -85,7 +85,7 @@ public static ComponentsDefine getInstance() {\n     }\n \n     public ComponentsDefine() {\n-        components = new String[25];\n+        components = new String[26];\n         addComponent(TOMCAT);\n         addComponent(HTTPCLIENT);\n         addComponent(DUBBO);",
      "parent_sha": "b501bc818941a26c79e4d3becec776b24917c2d1"
    }
  },
  {
    "oid": "3264fd4e315571e99c704af7e659edf65f2db075",
    "message": "Fixed #3328, keyword data type is not long enough for saving PXX metrics. (#3332)",
    "date": "2019-08-26T08:33:55Z",
    "url": "https://github.com/apache/skywalking/commit/3264fd4e315571e99c704af7e659edf65f2db075",
    "details": {
      "sha": "958fcada087c91a4cb0919ffbd83bc3d8a7e1df0",
      "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ColumnTypeEsMapping.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/3264fd4e315571e99c704af7e659edf65f2db075/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fbase%2FColumnTypeEsMapping.java",
      "raw_url": "https://github.com/apache/skywalking/raw/3264fd4e315571e99c704af7e659edf65f2db075/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fbase%2FColumnTypeEsMapping.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fbase%2FColumnTypeEsMapping.java?ref=3264fd4e315571e99c704af7e659edf65f2db075",
      "patch": "@@ -36,7 +36,7 @@ public class ColumnTypeEsMapping implements DataTypeMapping {\n         } else if (String.class.equals(type)) {\n             return \"keyword\";\n         } else if (IntKeyLongValueHashMap.class.equals(type)) {\n-            return \"keyword\";\n+            return \"text\";\n         } else if (byte[].class.equals(type)) {\n             return \"binary\";\n         } else {",
      "parent_sha": "429c9b3c9ce9398f7abcec5675a40a246e728f3d"
    }
  },
  {
    "oid": "9b1c6724d21a93f022a79c79bdc3203a59b90e88",
    "message": "Support setting override through system.properties and envs. (#997)\n\n* Support setting override through system.properties and envs.\r\n\r\n* Remove test case.",
    "date": "2018-03-29T09:20:49Z",
    "url": "https://github.com/apache/skywalking/commit/9b1c6724d21a93f022a79c79bdc3203a59b90e88",
    "details": {
      "sha": "902006c9031a89ab674a7d4663fc1829c42a7da3",
      "filename": "apm-collector/apm-collector-boot/src/main/java/org/apache/skywalking/apm/collector/boot/config/ApplicationConfigLoader.java",
      "status": "modified",
      "additions": 49,
      "deletions": 2,
      "changes": 51,
      "blob_url": "https://github.com/apache/skywalking/blob/9b1c6724d21a93f022a79c79bdc3203a59b90e88/apm-collector%2Fapm-collector-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fboot%2Fconfig%2FApplicationConfigLoader.java",
      "raw_url": "https://github.com/apache/skywalking/raw/9b1c6724d21a93f022a79c79bdc3203a59b90e88/apm-collector%2Fapm-collector-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fboot%2Fconfig%2FApplicationConfigLoader.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fboot%2Fconfig%2FApplicationConfigLoader.java?ref=9b1c6724d21a93f022a79c79bdc3203a59b90e88",
      "patch": "@@ -16,11 +16,11 @@\n  *\n  */\n \n-\n package org.apache.skywalking.apm.collector.boot.config;\n \n import java.io.FileNotFoundException;\n import java.io.Reader;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.Properties;\n import org.apache.skywalking.apm.collector.core.module.ApplicationConfiguration;\n@@ -30,7 +30,13 @@\n import org.yaml.snakeyaml.Yaml;\n \n /**\n- * @author peng-yongsheng\n+ * Initialize collector settings with following sources.\n+ * Use application.yml as primary setting,\n+ * and fix missing setting by default settings in application-default.yml.\n+ *\n+ * At last, override setting by system.properties and system.envs if the key matches moduleName.provideName.settingKey.\n+ *\n+ * @author peng-yongsheng, wusheng\n  */\n public class ApplicationConfigLoader implements ConfigLoader<ApplicationConfiguration> {\n \n@@ -42,6 +48,7 @@ public class ApplicationConfigLoader implements ConfigLoader<ApplicationConfigur\n         ApplicationConfiguration configuration = new ApplicationConfiguration();\n         this.loadConfig(configuration);\n         this.loadDefaultConfig(configuration);\n+        this.overrideConfigBySystemEnv(configuration);\n         return configuration;\n     }\n \n@@ -94,4 +101,44 @@ private void loadDefaultConfig(ApplicationConfiguration configuration) throws Co\n             throw new ConfigFileNotFoundException(e.getMessage(), e);\n         }\n     }\n+\n+    private void overrideConfigBySystemEnv(ApplicationConfiguration configuration) {\n+        Iterator<Map.Entry<Object, Object>> entryIterator = System.getProperties().entrySet().iterator();\n+        while (entryIterator.hasNext()) {\n+            Map.Entry<Object, Object> prop = entryIterator.next();\n+            overrideModuleSettings(configuration, prop.getKey().toString(), prop.getValue().toString(), true);\n+        }\n+\n+        Map<String, String> envs = System.getenv();\n+        for (String envKey : envs.keySet()) {\n+            overrideModuleSettings(configuration, envKey, envs.get(envKey), false);\n+        }\n+    }\n+\n+    private void overrideModuleSettings(ApplicationConfiguration configuration, String key, String value,\n+        boolean isSystemProperty) {\n+        int moduleAndConfigSeparator = key.indexOf('.');\n+        if (moduleAndConfigSeparator <= 0) {\n+            return;\n+        }\n+        String moduleName = key.substring(0, moduleAndConfigSeparator);\n+        String providerSettingSubKey = key.substring(moduleAndConfigSeparator + 1);\n+        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.getModuleConfiguration(moduleName);\n+        if (moduleConfiguration == null) {\n+            return;\n+        }\n+        int providerAndConfigSeparator = providerSettingSubKey.indexOf('.');\n+        if (providerAndConfigSeparator <= 0) {\n+            return;\n+        }\n+        String providerName = providerSettingSubKey.substring(0, providerAndConfigSeparator);\n+        String settingKey = providerSettingSubKey.substring(providerAndConfigSeparator + 1);\n+        if (!moduleConfiguration.has(providerName)) {\n+            return;\n+        }\n+        Properties providerSettings = moduleConfiguration.getProviderConfiguration(providerName);\n+        providerSettings.put(settingKey, value);\n+        logger.info(\"The setting has been override by key: {}, value: {}, in {} provider of {} module through {}\",\n+            settingKey, value, providerName, moduleName, isSystemProperty ? \"System.properties\" : \"System.envs\");\n+    }\n }",
      "parent_sha": "4a8372b9f5a349dac6dd7fc16eede0f30b11df33"
    }
  },
  {
    "oid": "ea077348a36f7c09b0ccbec0c4ac2da20c2ca03f",
    "message": "1.\u4f18\u5316\u4ee3\u7801",
    "date": "2016-02-29T08:36:47Z",
    "url": "https://github.com/apache/skywalking/commit/ea077348a36f7c09b0ccbec0c4ac2da20c2ca03f",
    "details": {
      "sha": "b304d67661c8debeda0e4d56ca1bd81c197d3a9b",
      "filename": "skywalking-api/src/main/java/com/ai/cloud/skywalking/sender/DataSenderFactoryWithBalance.java",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/apache/skywalking/blob/ea077348a36f7c09b0ccbec0c4ac2da20c2ca03f/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderFactoryWithBalance.java",
      "raw_url": "https://github.com/apache/skywalking/raw/ea077348a36f7c09b0ccbec0c4ac2da20c2ca03f/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderFactoryWithBalance.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderFactoryWithBalance.java?ref=ea077348a36f7c09b0ccbec0c4ac2da20c2ca03f",
      "patch": "@@ -202,9 +202,7 @@ public void run() {\n     }\n \n     private static DataSender findReadySender() {\n-\n         DataSender result = null;\n-\n         int index = 0;\n \n         if (unusedServerAddresses.size() > 1){\n@@ -234,11 +232,7 @@ private static DataSender findReadySender() {\n     }\n \n     public static void unRegister(DataSender socket) {\n-        int index = usingDataSender.indexOf(socket);\n-        if (index != -1) {\n-            usingDataSender.get(index)\n-                    .setStatus(DataSender.SenderStatus.FAILED);\n-        }\n+    \tsocket.setStatus(DataSender.SenderStatus.FAILED);\n     }\n     \n     private static String listUsingServers(){",
      "parent_sha": "42e4cce2c65a99a7188f0513748ab10262d484c3"
    }
  },
  {
    "oid": "3dba4644eee6b6c78ac4af3bfe92cf7e7c82e894",
    "message": "rename configPath to config,support custom config file name.",
    "date": "2017-09-27T02:35:56Z",
    "url": "https://github.com/apache/skywalking/commit/3dba4644eee6b6c78ac4af3bfe92cf7e7c82e894",
    "details": {
      "sha": "4fb4261699578a1144f32c384a3afeadc916f38c",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/apache/skywalking/blob/3dba4644eee6b6c78ac4af3bfe92cf7e7c82e894/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FSnifferConfigInitializer.java",
      "raw_url": "https://github.com/apache/skywalking/raw/3dba4644eee6b6c78ac4af3bfe92cf7e7c82e894/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FSnifferConfigInitializer.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fconf%2FSnifferConfigInitializer.java?ref=3dba4644eee6b6c78ac4af3bfe92cf7e7c82e894",
      "patch": "@@ -44,7 +44,7 @@ public static void initialize() {\n             configFileStream = SnifferConfigInitializer.class.getResourceAsStream(CONFIG_FILE_NAME);\n \n             if (configFileStream == null) {\n-                logger.info(\"No {} file found in class path.\", CONFIG_FILE_NAME);\n+                logger.info(\"No config file found, according system property '-Dconfig'.\");\n                 configFileStream = loadConfigFromAgentFolder();\n             } else {\n                 logger.info(\"{} file found in class path.\", CONFIG_FILE_NAME);\n@@ -81,26 +81,31 @@ public static void initialize() {\n     }\n \n     /**\n-     * Load the config file by the path, which is provided by system property, usually with a \"-DconfigPath=\" arg.\n+     * Load the config file by the path, which is provided by system property, usually with a \"-Dconfig=\" arg.\n      *\n      * @return the config file {@link InputStream}, or null if not needEnhance.\n      */\n     private static InputStream loadConfigBySystemProperty() {\n-        String configPath = System.getProperty(\"configPath\");\n-        if (StringUtil.isEmpty(configPath)) {\n+        String config = System.getProperty(\"config\");\n+        if (StringUtil.isEmpty(config)) {\n             return null;\n         }\n-        File configFile = new File(configPath, CONFIG_FILE_NAME);\n+        File configFile = new File(config);\n+        if (configFile.exists() && configFile.isDirectory()) {\n+            logger.info(\"check {} in path {}, according system property.\", CONFIG_FILE_NAME, config);\n+            configFile = new File(config, CONFIG_FILE_NAME);\n+        }\n+        \n         if (configFile.exists() && configFile.isFile()) {\n             try {\n-                logger.info(\"{} found in path {}, according system property.\", CONFIG_FILE_NAME, configPath);\n+                logger.info(\"found   {}, according system property.\", configFile.getAbsolutePath());\n                 return new FileInputStream(configFile);\n             } catch (FileNotFoundException e) {\n-                logger.error(e, \"Fail to load {} in path {}, according system property.\", CONFIG_FILE_NAME, configPath);\n+                logger.error(e, \"Fail to load {} , according system property.\", config);\n             }\n         }\n \n-        logger.info(\"No {} found in path {}, according system property.\", CONFIG_FILE_NAME, configPath);\n+        logger.info(\"No {}  found, according system property.\", config);\n         return null;\n     }\n ",
      "parent_sha": "6c9019993c762ee002f01a224875f2e93018f094"
    }
  },
  {
    "oid": "aa4ecb41e94fb0fccea2bf69b6f69ee360573ccf",
    "message": "fix project deadlock when starting application in issue 3784 (#3894)",
    "date": "2019-11-19T14:44:20Z",
    "url": "https://github.com/apache/skywalking/commit/aa4ecb41e94fb0fccea2bf69b6f69ee360573ccf",
    "details": {
      "sha": "01bab5149e4ff068ead20f975534131029cea619",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/InterceptorInstanceLoader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/skywalking/blob/aa4ecb41e94fb0fccea2bf69b6f69ee360573ccf/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Floader%2FInterceptorInstanceLoader.java",
      "raw_url": "https://github.com/apache/skywalking/raw/aa4ecb41e94fb0fccea2bf69b6f69ee360573ccf/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Floader%2FInterceptorInstanceLoader.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Floader%2FInterceptorInstanceLoader.java?ref=aa4ecb41e94fb0fccea2bf69b6f69ee360573ccf",
      "patch": "@@ -63,16 +63,17 @@ public static <T> T load(String className, ClassLoader targetClassLoader)\n         Object inst = INSTANCE_CACHE.get(instanceKey);\n         if (inst == null) {\n             INSTANCE_LOAD_LOCK.lock();\n+            ClassLoader pluginLoader;\n             try {\n-                ClassLoader pluginLoader = EXTEND_PLUGIN_CLASSLOADERS.get(targetClassLoader);\n+                pluginLoader = EXTEND_PLUGIN_CLASSLOADERS.get(targetClassLoader);\n                 if (pluginLoader == null) {\n                     pluginLoader = new AgentClassLoader(targetClassLoader);\n                     EXTEND_PLUGIN_CLASSLOADERS.put(targetClassLoader, pluginLoader);\n                 }\n-                inst = Class.forName(className, true, pluginLoader).newInstance();\n             } finally {\n                 INSTANCE_LOAD_LOCK.unlock();\n             }\n+            inst = Class.forName(className, true, pluginLoader).newInstance();\n             if (inst != null) {\n                 INSTANCE_CACHE.put(instanceKey, inst);\n             }",
      "parent_sha": "6d3b0e2aeb52561053b808d7225594a1b40492c1"
    }
  },
  {
    "oid": "1b602b1fab3931f8efadaadce50412f479514ead",
    "message": "Fix a dynamic interface bug.",
    "date": "2017-07-02T15:10:46Z",
    "url": "https://github.com/apache/skywalking/commit/1b602b1fab3931f8efadaadce50412f479514ead",
    "details": {
      "sha": "ec500782024948bfa970dbd7c52e7799fd60d82e",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/EnhancedInstance.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/1b602b1fab3931f8efadaadce50412f479514ead/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Finterceptor%2Fenhance%2FEnhancedInstance.java",
      "raw_url": "https://github.com/apache/skywalking/raw/1b602b1fab3931f8efadaadce50412f479514ead/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Finterceptor%2Fenhance%2FEnhancedInstance.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Finterceptor%2Fenhance%2FEnhancedInstance.java?ref=1b602b1fab3931f8efadaadce50412f479514ead",
      "patch": "@@ -6,5 +6,5 @@\n public interface EnhancedInstance {\n     Object getSkyWalkingDynamicField();\n \n-    void setSkyWalkingDynamicField();\n+    void setSkyWalkingDynamicField(Object value);\n }",
      "parent_sha": "9037f139765b183476c7fba61e9caf1418b84774"
    }
  },
  {
    "oid": "8abb01dce255ce4ef12a599eb43c5873f92fe851",
    "message": "fix #1055 and make code more readable (#1057)",
    "date": "2018-04-10T08:36:41Z",
    "url": "https://github.com/apache/skywalking/commit/8abb01dce255ce4ef12a599eb43c5873f92fe851",
    "details": {
      "sha": "c224aa5a24c1bee6e79f3ef6a0e6df5858d5834c",
      "filename": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java",
      "status": "modified",
      "additions": 63,
      "deletions": 44,
      "changes": 107,
      "blob_url": "https://github.com/apache/skywalking/blob/8abb01dce255ce4ef12a599eb43c5873f92fe851/apm-sniffer%2Fapm-agent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2FSkyWalkingAgent.java",
      "raw_url": "https://github.com/apache/skywalking/raw/8abb01dce255ce4ef12a599eb43c5873f92fe851/apm-sniffer%2Fapm-agent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2FSkyWalkingAgent.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2FSkyWalkingAgent.java?ref=8abb01dce255ce4ef12a599eb43c5873f92fe851",
      "patch": "@@ -59,72 +59,91 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n \n             pluginFinder = new PluginFinder(new PluginBootstrap().loadPlugins());\n \n-            ServiceManager.INSTANCE.boot();\n         } catch (Exception e) {\n             logger.error(e, \"Skywalking agent initialized failure. Shutting down.\");\n             return;\n         }\n \n+        new AgentBuilder.Default()\n+                .type(pluginFinder.buildMatch())\n+                .transform(new Transformer(pluginFinder))\n+                .with(new Listener())\n+                .installOn(instrumentation);\n+\n+        try {\n+            ServiceManager.INSTANCE.boot();\n+        } catch (Exception e) {\n+            logger.error(e, \"Skywalking agent boot failure.\");\n+        }\n+\n         Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {\n             @Override public void run() {\n                 ServiceManager.INSTANCE.shutdown();\n             }\n         }, \"skywalking service shutdown thread\"));\n+    }\n \n-        new AgentBuilder.Default().type(pluginFinder.buildMatch()).transform(new AgentBuilder.Transformer() {\n-            @Override\n-            public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDescription typeDescription,\n-                ClassLoader classLoader, JavaModule module) {\n-                List<AbstractClassEnhancePluginDefine> pluginDefines = pluginFinder.find(typeDescription, classLoader);\n-                if (pluginDefines.size() > 0) {\n-                    DynamicType.Builder<?> newBuilder = builder;\n-                    EnhanceContext context = new EnhanceContext();\n-                    for (AbstractClassEnhancePluginDefine define : pluginDefines) {\n-                        DynamicType.Builder<?> possibleNewBuilder = define.define(typeDescription.getTypeName(), newBuilder, classLoader, context);\n-                        if (possibleNewBuilder != null) {\n-                            newBuilder = possibleNewBuilder;\n-                        }\n-                    }\n-                    if (context.isEnhanced()) {\n-                        logger.debug(\"Finish the prepare stage for {}.\", typeDescription.getName());\n-                    }\n+    private static class Transformer implements AgentBuilder.Transformer {\n+        private PluginFinder pluginFinder;\n \n-                    return newBuilder;\n+        Transformer(PluginFinder pluginFinder) {\n+            this.pluginFinder = pluginFinder;\n+        }\n+\n+        @Override\n+        public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule module) {\n+            List<AbstractClassEnhancePluginDefine> pluginDefines = pluginFinder.find(typeDescription, classLoader);\n+            if (pluginDefines.size() > 0) {\n+                DynamicType.Builder<?> newBuilder = builder;\n+                EnhanceContext context = new EnhanceContext();\n+                for (AbstractClassEnhancePluginDefine define : pluginDefines) {\n+                    DynamicType.Builder<?> possibleNewBuilder = define.define(typeDescription.getTypeName(), newBuilder, classLoader, context);\n+                    if (possibleNewBuilder != null) {\n+                        newBuilder = possibleNewBuilder;\n+                    }\n+                }\n+                if (context.isEnhanced()) {\n+                    logger.debug(\"Finish the prepare stage for {}.\", typeDescription.getName());\n                 }\n \n-                logger.debug(\"Matched class {}, but ignore by finding mechanism.\", typeDescription.getTypeName());\n-                return builder;\n+                return newBuilder;\n             }\n-        }).with(new AgentBuilder.Listener() {\n-            @Override\n-            public void onDiscovery(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n \n-            }\n+            logger.debug(\"Matched class {}, but ignore by finding mechanism.\", typeDescription.getTypeName());\n+            return builder;\n+        }\n+    }\n \n-            @Override\n-            public void onTransformation(TypeDescription typeDescription, ClassLoader classLoader, JavaModule module,\n-                boolean loaded, DynamicType dynamicType) {\n-                if (logger.isDebugEnable()) {\n-                    logger.debug(\"On Transformation class {}.\", typeDescription.getName());\n-                }\n+    private static class Listener implements AgentBuilder.Listener {\n+        @Override\n+        public void onDiscovery(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n \n-                InstrumentDebuggingClass.INSTANCE.log(typeDescription, dynamicType);\n+        }\n+\n+        @Override\n+        public void onTransformation(TypeDescription typeDescription, ClassLoader classLoader, JavaModule module,\n+                                     boolean loaded, DynamicType dynamicType) {\n+            if (logger.isDebugEnable()) {\n+                logger.debug(\"On Transformation class {}.\", typeDescription.getName());\n             }\n \n-            @Override\n-            public void onIgnored(TypeDescription typeDescription, ClassLoader classLoader, JavaModule module,\n-                boolean loaded) {\n+            InstrumentDebuggingClass.INSTANCE.log(typeDescription, dynamicType);\n+        }\n+\n+        @Override\n+        public void onIgnored(TypeDescription typeDescription, ClassLoader classLoader, JavaModule module,\n+                              boolean loaded) {\n \n-            }\n+        }\n \n-            @Override public void onError(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded,\n-                Throwable throwable) {\n-                logger.error(\"Enhance class \" + typeName + \" error.\", throwable);\n-            }\n+        @Override\n+        public void onError(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded,\n+                            Throwable throwable) {\n+            logger.error(\"Enhance class \" + typeName + \" error.\", throwable);\n+        }\n \n-            @Override\n-            public void onComplete(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n-            }\n-        }).installOn(instrumentation);\n+        @Override\n+        public void onComplete(String typeName, ClassLoader classLoader, JavaModule module, boolean loaded) {\n+        }\n     }\n }",
      "parent_sha": "1261e03c9b7e88b4c5cc94ddc14c9d77c2c11c31"
    }
  },
  {
    "oid": "590d93f0cad22dfa4779e0e30936772a98b46c78",
    "message": "Adjust an abbreviation",
    "date": "2017-03-21T11:55:00Z",
    "url": "https://github.com/apache/skywalking/commit/590d93f0cad22dfa4779e0e30936772a98b46c78",
    "details": {
      "sha": "1bc7c8f3c3f54f93f909fd386c55b752a1074f02",
      "filename": "skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/LogData.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/590d93f0cad22dfa4779e0e30936772a98b46c78/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FLogData.java",
      "raw_url": "https://github.com/apache/skywalking/raw/590d93f0cad22dfa4779e0e30936772a98b46c78/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FLogData.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FLogData.java?ref=590d93f0cad22dfa4779e0e30936772a98b46c78",
      "patch": "@@ -12,7 +12,7 @@\n  */\n public class LogData {\n     @Expose\n-    @SerializedName(value=\"ti\")\n+    @SerializedName(value=\"tm\")\n     private long time;\n \n     @Expose",
      "parent_sha": "572cfc5875ed0bb958eb7f17d7aa9944875925de"
    }
  },
  {
    "oid": "24010d134b9d01fffc9d596ea213c1b79cbc8619",
    "message": "fix issue that test compile failed",
    "date": "2017-04-27T08:28:45Z",
    "url": "https://github.com/apache/skywalking/commit/24010d134b9d01fffc9d596ea213c1b79cbc8619",
    "details": {
      "sha": "91f2bc3efe26e90593bfdc19efd146c745240b63",
      "filename": "skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/assist/NoConcurrencyAccessObjectTest.java",
      "status": "modified",
      "additions": 29,
      "deletions": 17,
      "changes": 46,
      "blob_url": "https://github.com/apache/skywalking/blob/24010d134b9d01fffc9d596ea213c1b79cbc8619/skywalking-sniffer%2Fskywalking-api%2Fsrc%2Ftest%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Fapi%2Fplugin%2Fassist%2FNoConcurrencyAccessObjectTest.java",
      "raw_url": "https://github.com/apache/skywalking/raw/24010d134b9d01fffc9d596ea213c1b79cbc8619/skywalking-sniffer%2Fskywalking-api%2Fsrc%2Ftest%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Fapi%2Fplugin%2Fassist%2FNoConcurrencyAccessObjectTest.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-sniffer%2Fskywalking-api%2Fsrc%2Ftest%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Fapi%2Fplugin%2Fassist%2FNoConcurrencyAccessObjectTest.java?ref=24010d134b9d01fffc9d596ea213c1b79cbc8619",
      "patch": "@@ -2,41 +2,53 @@\n \n import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;\n import com.a.eye.skywalking.api.plugin.interceptor.assist.NoConcurrencyAccessObject;\n+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodInvokeContext;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n \n /**\n  * @author wusheng\n  */\n+@RunWith(MockitoJUnitRunner.class)\n public class NoConcurrencyAccessObjectTest {\n+\n+    @Mock\n+    private InstanceMethodInvokeContext invokeContext;\n+\n     @Test\n     public void testEntraExitCounter() {\n-        NoConcurrencyAccessObject object = new NoConcurrencyAccessObject();\n         final EnhancedClassInstanceContext context = new EnhancedClassInstanceContext();\n-        object.whenEnter(context, new Runnable() {\n+        NoConcurrencyAccessObject first = new NoConcurrencyAccessObject(){\n+\n             @Override\n-            public void run() {\n+            protected void enter(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext) {\n                 context.set(\"firstEntrance\", true);\n             }\n-        });\n-        object.whenEnter(context, new Runnable() {\n-            @Override\n-            public void run() {\n-                context.set(\"secondEntrance\", true);\n-            }\n-        });\n-        object.whenExist(context, new Runnable() {\n-            @Override\n-            public void run() {\n+\n+            @Override protected void exit() {\n                 context.set(\"firstExit\", true);\n             }\n-        });\n-        object.whenExist(context, new Runnable() {\n+        };\n+\n+        NoConcurrencyAccessObject second = new NoConcurrencyAccessObject(){\n+\n             @Override\n-            public void run() {\n+            protected void enter(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext) {\n+                context.set(\"secondEntrance\", true);\n+            }\n+\n+            @Override protected void exit() {\n                 context.set(\"lastEntrance\", true);\n             }\n-        });\n+        };\n+\n+        first.whenEnter(context, invokeContext);\n+        second.whenEnter(context, invokeContext);\n+        first.whenExist(context);\n+        second.whenExist(context);\n \n         Assert.assertTrue(!context.isContain(\"secondEntrance\"));\n         Assert.assertTrue(!context.isContain(\"firstExit\"));",
      "parent_sha": "4dd76f06b56be3417996c7868cf1ee62bf9d19e7"
    }
  },
  {
    "oid": "164960f668364595fec02957a8a5072affbec7a2",
    "message": "fix issue that the match of HierarchyMatch do not work",
    "date": "2017-08-09T03:49:26Z",
    "url": "https://github.com/apache/skywalking/commit/164960f668364595fec02957a8a5072affbec7a2",
    "details": {
      "sha": "e2e2a83ad7f8a34ce2f1f159a859f04fe2c49529",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/match/HierarchyMatch.java",
      "status": "modified",
      "additions": 37,
      "deletions": 3,
      "changes": 40,
      "blob_url": "https://github.com/apache/skywalking/blob/164960f668364595fec02957a8a5072affbec7a2/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Fmatch%2FHierarchyMatch.java",
      "raw_url": "https://github.com/apache/skywalking/raw/164960f668364595fec02957a8a5072affbec7a2/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Fmatch%2FHierarchyMatch.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fplugin%2Fmatch%2FHierarchyMatch.java?ref=164960f668364595fec02957a8a5072affbec7a2",
      "patch": "@@ -1,6 +1,10 @@\n package org.skywalking.apm.agent.core.plugin.match;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n import net.bytebuddy.matcher.ElementMatcher;\n \n import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;\n@@ -28,24 +32,54 @@ public ElementMatcher.Junction buildJunction() {\n         ElementMatcher.Junction junction = null;\n         for (String superTypeName : parentTypes) {\n             if (junction == null) {\n-                junction = buildEachAnnotation(superTypeName);\n+                junction = buildSuperClassMatcher(superTypeName);\n             } else {\n-                junction = junction.and(buildEachAnnotation(superTypeName));\n+                junction = junction.and(buildSuperClassMatcher(superTypeName));\n             }\n         }\n         junction = junction.and(not(isInterface()));\n         return junction;\n     }\n \n-    private ElementMatcher.Junction buildEachAnnotation(String superTypeName) {\n+    private ElementMatcher.Junction buildSuperClassMatcher(String superTypeName) {\n         return hasSuperType(named(superTypeName));\n     }\n \n     @Override\n     public boolean isMatch(TypeDescription typeDescription) {\n+        List<String> parentTypes = new ArrayList<String>(Arrays.asList(this.parentTypes));\n+\n+        TypeList.Generic implInterfaces = typeDescription.getInterfaces();\n+        for (TypeDescription.Generic implInterface : implInterfaces) {\n+            matchHierarchyClass(implInterface, parentTypes);\n+        }\n+\n+        matchHierarchyClass(typeDescription.getSuperClass(), parentTypes);\n+\n+        if (parentTypes.size() == 0) {\n+            return true;\n+        }\n+\n         return false;\n     }\n \n+    private void matchHierarchyClass(TypeDescription.Generic clazz, List<String> parentTypes) {\n+        parentTypes.remove(clazz.getTypeName());\n+        if (parentTypes.size() == 0) {\n+            return;\n+        }\n+\n+        for (TypeDescription.Generic generic : clazz.getInterfaces()) {\n+            matchHierarchyClass(generic, parentTypes);\n+        }\n+\n+        TypeDescription.Generic superClazz = clazz.getSuperClass();\n+        if (superClazz != null && !clazz.getTypeName().equals(\"java.lang.Object\")) {\n+            matchHierarchyClass(superClazz, parentTypes);\n+        }\n+\n+    }\n+\n     public static ClassMatch byHierarchyMatch(String[] parentTypes) {\n         return new HierarchyMatch(parentTypes);\n     }",
      "parent_sha": "972d4396eb13ceb09fcfdf8b6bd32564575d9c71"
    }
  },
  {
    "oid": "af16ece5934a75eeac0655b6824b62ceee98c0ec",
    "message": "[Agent] fix trace can't finished when the StatusLine isn't set (#945)",
    "date": "2018-03-15T08:11:44Z",
    "url": "https://github.com/apache/skywalking/commit/af16ece5934a75eeac0655b6824b62ceee98c0ec",
    "details": {
      "sha": "9469385a6f53a4760d50e76fecf2e3a44e27802b",
      "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/apache/skywalking/blob/af16ece5934a75eeac0655b6824b62ceee98c0ec/apm-sniffer%2Fapm-sdk-plugin%2FhttpClient-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2FhttpClient%2Fv4%2FHttpClientExecuteInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/af16ece5934a75eeac0655b6824b62ceee98c0ec/apm-sniffer%2Fapm-sdk-plugin%2FhttpClient-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2FhttpClient%2Fv4%2FHttpClientExecuteInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2FhttpClient-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2FhttpClient%2Fv4%2FHttpClientExecuteInterceptor.java?ref=af16ece5934a75eeac0655b6824b62ceee98c0ec",
      "patch": "@@ -24,6 +24,7 @@\n import org.apache.http.HttpHost;\n import org.apache.http.HttpRequest;\n import org.apache.http.HttpResponse;\n+import org.apache.http.StatusLine;\n import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n@@ -77,13 +78,15 @@ public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterc\n         }\n \n         HttpResponse response = (HttpResponse)ret;\n-        int statusCode = response.getStatusLine().getStatusCode();\n-        AbstractSpan span = ContextManager.activeSpan();\n-        if (statusCode >= 400) {\n-            span.errorOccurred();\n-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        StatusLine responseStatusLine = response.getStatusLine();\n+        if (responseStatusLine != null) {\n+            int statusCode = responseStatusLine.getStatusCode();\n+            AbstractSpan span = ContextManager.activeSpan();\n+            if (statusCode >= 400) {\n+                span.errorOccurred();\n+                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+            }\n         }\n-\n         ContextManager.stopSpan();\n         return ret;\n     }",
      "parent_sha": "08267611a2f3077e943b9d89d4b20dc09565b3c9"
    }
  },
  {
    "oid": "a4fa7c14a17001b1629fc7e78ff0ca28d12d99e7",
    "message": "\u89e3\u51b3index",
    "date": "2015-11-12T08:06:51Z",
    "url": "https://github.com/apache/skywalking/commit/a4fa7c14a17001b1629fc7e78ff0ca28d12d99e7",
    "details": {
      "sha": "07ecf11874591598f4468ca3490c9c681bc6c261",
      "filename": "skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/buffer/DataBufferThread.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/skywalking/blob/a4fa7c14a17001b1629fc7e78ff0ca28d12d99e7/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fbuffer%2FDataBufferThread.java",
      "raw_url": "https://github.com/apache/skywalking/raw/a4fa7c14a17001b1629fc7e78ff0ca28d12d99e7/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fbuffer%2FDataBufferThread.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fbuffer%2FDataBufferThread.java?ref=a4fa7c14a17001b1629fc7e78ff0ca28d12d99e7",
      "patch": "@@ -43,11 +43,10 @@ public DataBufferThread() {\n     @Override\n     public void run() {\n         boolean isWriteFailure;\n-        byte[] tmpByte;\n+        int index = 0;\n         while (true) {\n             boolean bool = false;\n             int count = 0;\n-            int index = 0;\n             for (int i = 0; i < data.length; i++, count++) {\n                 if (data[i] == null) {\n                     continue;\n@@ -73,6 +72,8 @@ public void run() {\n                         outputStream.flush();\n                     } catch (IOException e) {\n                         logger.error(\"Flush buffer data failed.\", e);\n+                    } finally {\n+                        index = 0;\n                     }\n                 }\n                 data[i] = null;",
      "parent_sha": "e1c21b67fa927377d65f6811f3fba43286b9f3bc"
    }
  },
  {
    "oid": "f162fccf8b148954dba870b01a4b4de93e4592c7",
    "message": "Avoid query error by adding initial instance to AlarmTrend (#1713)",
    "date": "2018-09-27T13:12:50Z",
    "url": "https://github.com/apache/skywalking/commit/f162fccf8b148954dba870b01a4b4de93e4592c7",
    "details": {
      "sha": "a64d10f3cca5444ae1a06bdf52e26e41aeb08c93",
      "filename": "oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/AlarmTrend.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/f162fccf8b148954dba870b01a4b4de93e4592c7/oap-server%2Fserver-query-plugin%2Fquery-graphql-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fquery%2Fgraphql%2Ftype%2FAlarmTrend.java",
      "raw_url": "https://github.com/apache/skywalking/raw/f162fccf8b148954dba870b01a4b4de93e4592c7/oap-server%2Fserver-query-plugin%2Fquery-graphql-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fquery%2Fgraphql%2Ftype%2FAlarmTrend.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-query-plugin%2Fquery-graphql-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fquery%2Fgraphql%2Ftype%2FAlarmTrend.java?ref=f162fccf8b148954dba870b01a4b4de93e4592c7",
      "patch": "@@ -18,8 +18,9 @@\n \n package org.apache.skywalking.oap.query.graphql.type;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n public class AlarmTrend {\n-    private List<Integer> numOfAlarm;\n+    private List<Integer> numOfAlarm = new ArrayList<>();\n }",
      "parent_sha": "2f43cb940eb4308a739c3392f04533b3e73e6345"
    }
  },
  {
    "oid": "62ffa4204bd8849f70f0c48e28e83a71d36804bb",
    "message": "support  @RequestMapping annotation of spring 3.x",
    "date": "2017-09-30T05:32:49Z",
    "url": "https://github.com/apache/skywalking/commit/62ffa4204bd8849f70f0c48e28e83a71d36804bb",
    "details": {
      "sha": "839bed779ddd41ca2c8a1fe2c2091866758265e8",
      "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/mvc/ControllerServiceMethodInterceptor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/62ffa4204bd8849f70f0c48e28e83a71d36804bb/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fmvc-annotation-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fmvc%2FControllerServiceMethodInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/62ffa4204bd8849f70f0c48e28e83a71d36804bb/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fmvc-annotation-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fmvc%2FControllerServiceMethodInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fmvc-annotation-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fmvc%2FControllerServiceMethodInterceptor.java?ref=62ffa4204bd8849f70f0c48e28e83a71d36804bb",
      "patch": "@@ -16,6 +16,7 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.context.request.RequestContextHolder;\n import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.springframework.web.context.request.ServletWebRequest;\n \n /**\n  * The <code>ControllerServiceMethodInterceptor</code> only use the first mapping value.\n@@ -58,7 +59,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        HttpServletResponse response = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getResponse();\n+        HttpServletResponse response = ((ServletWebRequest)RequestContextHolder.getRequestAttributes()).getResponse();\n \n         AbstractSpan span = ContextManager.activeSpan();\n         if (response.getStatus() >= 400) {",
      "parent_sha": "131db17a290e44d0d227a87291a18534523d795a"
    }
  },
  {
    "oid": "87d246d75637a8bdcc055a1f2fad937b80f5778f",
    "message": "Fixed the bug: service/searchService #104",
    "date": "2018-02-09T02:40:06Z",
    "url": "https://github.com/apache/skywalking/commit/87d246d75637a8bdcc055a1f2fad937b80f5778f",
    "details": {
      "sha": "e60da8b006116a42bc8d75e04ea715338663e069",
      "filename": "apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/InstanceEsUIDAO.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/87d246d75637a8bdcc055a1f2fad937b80f5778f/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2Fui%2FInstanceEsUIDAO.java",
      "raw_url": "https://github.com/apache/skywalking/raw/87d246d75637a8bdcc055a1f2fad937b80f5778f/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2Fui%2FInstanceEsUIDAO.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2Fui%2FInstanceEsUIDAO.java?ref=87d246d75637a8bdcc055a1f2fad937b80f5778f",
      "patch": "@@ -160,7 +160,7 @@ private Long heartBeatTime(AbstractQueryBuilder queryBuilder) {\n         BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();\n         boolQuery.must().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_HEARTBEAT_TIME).gte(start).lte(end));\n         if (StringUtils.isNotEmpty(keyword)) {\n-            boolQuery.must().add(QueryBuilders.termQuery(InstanceTable.COLUMN_OS_INFO, keyword));\n+            boolQuery.must().add(QueryBuilders.queryStringQuery(keyword));\n         }\n         boolQuery.must().add(QueryBuilders.termQuery(InstanceTable.COLUMN_IS_ADDRESS, BooleanUtils.FALSE));\n         searchRequestBuilder.setQuery(boolQuery);",
      "parent_sha": "59c512fb2b36fcf7b9ed29de903570ac92773a98"
    }
  },
  {
    "oid": "9c20540e9582a090b6e9b6a60e433fbfbf2d9ccd",
    "message": "1.\u589e\u52a0\u65e5\u5fd7\u7684\u4fe1\u606f\u91cf",
    "date": "2016-02-25T07:33:19Z",
    "url": "https://github.com/apache/skywalking/commit/9c20540e9582a090b6e9b6a60e433fbfbf2d9ccd",
    "details": {
      "sha": "7683859845895f041ecb1393dff5360edd1724fd",
      "filename": "skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/persistance/MemoryRegister.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/9c20540e9582a090b6e9b6a60e433fbfbf2d9ccd/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fpersistance%2FMemoryRegister.java",
      "raw_url": "https://github.com/apache/skywalking/raw/9c20540e9582a090b6e9b6a60e433fbfbf2d9ccd/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fpersistance%2FMemoryRegister.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fpersistance%2FMemoryRegister.java?ref=9c20540e9582a090b6e9b6a60e433fbfbf2d9ccd",
      "patch": "@@ -25,7 +25,7 @@ public static MemoryRegister instance() {\n \n     public void updateOffSet(String fileName, int offset) {\n         if (logger.isDebugEnabled()) {\n-            logger.debug(\"Register entry[{}] into the memory register\", fileName);\n+            logger.debug(\"Register entry[{}] offset[{}] into the memory register\", fileName, offset);\n         }\n         if (entries.containsKey(fileName)) {\n             entries.get(fileName).setOffset(offset);",
      "parent_sha": "6421ba0a304828ccba7172a815772b088d0bb992"
    }
  },
  {
    "oid": "abc15a361be3b702070c6b18ac499688bbd6f6a7",
    "message": "Make sure can get endpoint list with empty keyword. (#1719)",
    "date": "2018-09-28T07:19:07Z",
    "url": "https://github.com/apache/skywalking/commit/abc15a361be3b702070c6b18ac499688bbd6f6a7",
    "details": {
      "sha": "07b6dd5f8c7f8e7f806f78c7591f70f7df1b39fd",
      "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/skywalking/blob/abc15a361be3b702070c6b18ac499688bbd6f6a7/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fquery%2FMetadataQueryEsDAO.java",
      "raw_url": "https://github.com/apache/skywalking/raw/abc15a361be3b702070c6b18ac499688bbd6f6a7/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fquery%2FMetadataQueryEsDAO.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fquery%2FMetadataQueryEsDAO.java?ref=abc15a361be3b702070c6b18ac499688bbd6f6a7",
      "patch": "@@ -26,6 +26,7 @@\n import org.apache.skywalking.oap.server.core.storage.query.IMetadataQueryDAO;\n import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n import org.apache.skywalking.oap.server.library.util.BooleanUtils;\n+import org.apache.skywalking.oap.server.library.util.StringUtils;\n import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.*;\n import org.elasticsearch.action.get.GetResponse;\n import org.elasticsearch.action.search.SearchResponse;\n@@ -143,7 +144,9 @@ public Service searchService(String serviceCode) throws IOException {\n         boolQueryBuilder.must().add(QueryBuilders.termQuery(EndpointInventory.SERVICE_ID, serviceId));\n \n         String matchCName = MatchCNameBuilder.INSTANCE.build(EndpointInventory.NAME);\n-        boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n+        if (StringUtils.isNotEmpty(keyword)) {\n+            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n+        }\n \n         sourceBuilder.query(boolQueryBuilder);\n         sourceBuilder.size(limit);",
      "parent_sha": "1bfc68c8abf37692f00ac2ceab6a8b0defb43e91"
    }
  },
  {
    "oid": "52b674e3a55c2f6197e2b3adef15ff947576cd2a",
    "message": "Fix isSelf address. (#3051)",
    "date": "2019-07-11T23:25:41Z",
    "url": "https://github.com/apache/skywalking/commit/52b674e3a55c2f6197e2b3adef15ff947576cd2a",
    "details": {
      "sha": "b61415845a147f2bb9620d2a0f4cbbd682c0cecc",
      "filename": "oap-server/server-cluster-plugin/cluster-etcd-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/EtcdCoordinator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/skywalking/blob/52b674e3a55c2f6197e2b3adef15ff947576cd2a/oap-server%2Fserver-cluster-plugin%2Fcluster-etcd-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcluster%2Fplugin%2Fetcd%2FEtcdCoordinator.java",
      "raw_url": "https://github.com/apache/skywalking/raw/52b674e3a55c2f6197e2b3adef15ff947576cd2a/oap-server%2Fserver-cluster-plugin%2Fcluster-etcd-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcluster%2Fplugin%2Fetcd%2FEtcdCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-cluster-plugin%2Fcluster-etcd-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcluster%2Fplugin%2Fetcd%2FEtcdCoordinator.java?ref=52b674e3a55c2f6197e2b3adef15ff947576cd2a",
      "patch": "@@ -68,7 +68,11 @@ public EtcdCoordinator(ClusterModuleEtcdConfig config, EtcdClient client) {\n             if (nodes != null) {\n                 nodes.forEach(node -> {\n                     EtcdEndpoint endpoint = gson.fromJson(node.getValue(), EtcdEndpoint.class);\n-                    res.add(new RemoteInstance(new Address(endpoint.getHost(), endpoint.getPort(), true)));\n+                    Address address = new Address(endpoint.getHost(), endpoint.getPort(), true);\n+                    if (!address.equals(selfAddress)) {\n+                        address.setSelf(false);\n+                    }\n+                    res.add(new RemoteInstance(address));\n                 });\n             }\n ",
      "parent_sha": "deb2d900294076b0290a77c7000e8e68ef2464e3"
    }
  },
  {
    "oid": "42eaa1f2ae6b162669784e54f09c502ca9d5e08e",
    "message": "Use SortOrder instead of SortMode, because SortMode sort column type of Array only. (#1157)",
    "date": "2018-05-03T15:10:40Z",
    "url": "https://github.com/apache/skywalking/commit/42eaa1f2ae6b162669784e54f09c502ca9d5e08e",
    "details": {
      "sha": "30f20efcde4c0705a12bd32e857e2e08e60a4ca4",
      "filename": "apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/InstanceEsUIDAO.java",
      "status": "modified",
      "additions": 10,
      "deletions": 19,
      "changes": 29,
      "blob_url": "https://github.com/apache/skywalking/blob/42eaa1f2ae6b162669784e54f09c502ca9d5e08e/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2Fui%2FInstanceEsUIDAO.java",
      "raw_url": "https://github.com/apache/skywalking/raw/42eaa1f2ae6b162669784e54f09c502ca9d5e08e/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2Fui%2FInstanceEsUIDAO.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2Fdao%2Fui%2FInstanceEsUIDAO.java?ref=42eaa1f2ae6b162669784e54f09c502ca9d5e08e",
      "patch": "@@ -18,32 +18,23 @@\n \n package org.apache.skywalking.apm.collector.storage.es.dao.ui;\n \n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.*;\n import org.apache.skywalking.apm.collector.client.elasticsearch.ElasticSearchClient;\n-import org.apache.skywalking.apm.collector.core.util.BooleanUtils;\n-import org.apache.skywalking.apm.collector.core.util.StringUtils;\n+import org.apache.skywalking.apm.collector.core.util.*;\n import org.apache.skywalking.apm.collector.storage.dao.ui.IInstanceUIDAO;\n import org.apache.skywalking.apm.collector.storage.es.base.dao.EsDAO;\n-import org.apache.skywalking.apm.collector.storage.table.register.Instance;\n-import org.apache.skywalking.apm.collector.storage.table.register.InstanceTable;\n+import org.apache.skywalking.apm.collector.storage.table.register.*;\n import org.apache.skywalking.apm.collector.storage.ui.application.Application;\n import org.apache.skywalking.apm.collector.storage.ui.server.AppServerInfo;\n-import org.elasticsearch.action.get.GetRequestBuilder;\n-import org.elasticsearch.action.get.GetResponse;\n-import org.elasticsearch.action.search.SearchRequestBuilder;\n-import org.elasticsearch.action.search.SearchResponse;\n-import org.elasticsearch.action.search.SearchType;\n-import org.elasticsearch.index.query.BoolQueryBuilder;\n-import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.action.get.*;\n+import org.elasticsearch.action.search.*;\n+import org.elasticsearch.index.query.*;\n import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.search.aggregations.AggregationBuilders;\n import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n import org.elasticsearch.search.aggregations.metrics.valuecount.ValueCount;\n-import org.elasticsearch.search.sort.SortBuilders;\n-import org.elasticsearch.search.sort.SortMode;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.elasticsearch.search.sort.*;\n+import org.slf4j.*;\n \n /**\n  * @author peng-yongsheng\n@@ -200,7 +191,7 @@ public List<AppServerInfo> getAllServer(int applicationId, long startSecondTimeB\n         searchRequestBuilder.setSize(1);\n \n         searchRequestBuilder.setQuery(QueryBuilders.termQuery(InstanceTable.APPLICATION_ID.getName(), applicationId));\n-        searchRequestBuilder.addSort(SortBuilders.fieldSort(InstanceTable.REGISTER_TIME.getName()).sortMode(SortMode.MIN));\n+        searchRequestBuilder.addSort(SortBuilders.fieldSort(InstanceTable.REGISTER_TIME.getName()).order(SortOrder.ASC));\n \n         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();\n \n@@ -220,7 +211,7 @@ public List<AppServerInfo> getAllServer(int applicationId, long startSecondTimeB\n         searchRequestBuilder.setSize(1);\n \n         searchRequestBuilder.setQuery(QueryBuilders.termQuery(InstanceTable.APPLICATION_ID.getName(), applicationId));\n-        searchRequestBuilder.addSort(SortBuilders.fieldSort(InstanceTable.HEARTBEAT_TIME.getName()).sortMode(SortMode.MAX));\n+        searchRequestBuilder.addSort(SortBuilders.fieldSort(InstanceTable.HEARTBEAT_TIME.getName()).order(SortOrder.DESC));\n \n         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();\n ",
      "parent_sha": "388beeabaa33613843254a3be95db5833155f855"
    }
  },
  {
    "oid": "194a33c0174cdc5671b1e20f6779a8ac1df1fd76",
    "message": "\u4fee\u6539SDK\u7248\u672c\u53f7\u4e3a1.0b",
    "date": "2016-03-17T06:57:18Z",
    "url": "https://github.com/apache/skywalking/commit/194a33c0174cdc5671b1e20f6779a8ac1df1fd76",
    "details": {
      "sha": "f90d9524faa937bd4add9172338cb7b70ceb0ad3",
      "filename": "skywalking-api/src/main/java/com/ai/cloud/skywalking/conf/Constants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/194a33c0174cdc5671b1e20f6779a8ac1df1fd76/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fconf%2FConstants.java",
      "raw_url": "https://github.com/apache/skywalking/raw/194a33c0174cdc5671b1e20f6779a8ac1df1fd76/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fconf%2FConstants.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fconf%2FConstants.java?ref=194a33c0174cdc5671b1e20f6779a8ac1df1fd76",
      "patch": "@@ -4,7 +4,7 @@ public class Constants {\n \t/**\n \t * \u52a1\u5fc5\u4e25\u683c\u4fdd\u6301\u4e24\u4f4d\u7684version\n \t */\n-\tpublic static String SDK_VERSION = \"1.0a2\";\n+\tpublic static String SDK_VERSION = \"1.0b\";\n \n     public static final String HEALTH_DATA_SPILT_PATTERN = \"^~\";\n ",
      "parent_sha": "59fe42672ec02a4dcb28dfb220bc6810dad963cc"
    }
  },
  {
    "oid": "ea398f055251ad7b91bf24695c81f4f6f523c4f6",
    "message": "Update TraceSegmentServiceClient.java\n\nUpstream log can't output correctly.",
    "date": "2017-09-29T06:48:34Z",
    "url": "https://github.com/apache/skywalking/commit/ea398f055251ad7b91bf24695c81f4f6f523c4f6",
    "details": {
      "sha": "18eece17980a172707d5164c4f4767a599142dd8",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/TraceSegmentServiceClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/ea398f055251ad7b91bf24695c81f4f6f523c4f6/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FTraceSegmentServiceClient.java",
      "raw_url": "https://github.com/apache/skywalking/raw/ea398f055251ad7b91bf24695c81f4f6f523c4f6/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FTraceSegmentServiceClient.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FTraceSegmentServiceClient.java?ref=ea398f055251ad7b91bf24695c81f4f6f523c4f6",
      "patch": "@@ -112,7 +112,7 @@ public void onCompleted() {\n \n     private void printUplinkStatus() {\n         long currentTimeMillis = System.currentTimeMillis();\n-        if (lastLogTime - currentTimeMillis > 30 * 1000) {\n+        if (currentTimeMillis - lastLogTime > 30 * 1000) {\n             lastLogTime = currentTimeMillis;\n             if (segmentUplinkedCounter > 0) {\n                 logger.debug(\"{} trace segments have been sent to collector.\", segmentUplinkedCounter);",
      "parent_sha": "4a874676e595808b3cc31dc8110a898af331d184"
    }
  },
  {
    "oid": "8e3e0a3c5536ea01eaed6826b4b2954ffeeef1b8",
    "message": "Clear the duration in query condition when trace id is not empty.",
    "date": "2018-03-04T03:30:08Z",
    "url": "https://github.com/apache/skywalking/commit/8e3e0a3c5536ea01eaed6826b4b2954ffeeef1b8",
    "details": {
      "sha": "a39c1cf0ddb0850a7eb4136f5b1b83daeb9b5027",
      "filename": "apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/query/TraceQuery.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/skywalking/blob/8e3e0a3c5536ea01eaed6826b4b2954ffeeef1b8/apm-collector%2Fapm-collector-ui%2Fcollector-ui-jetty-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fui%2Fquery%2FTraceQuery.java",
      "raw_url": "https://github.com/apache/skywalking/raw/8e3e0a3c5536ea01eaed6826b4b2954ffeeef1b8/apm-collector%2Fapm-collector-ui%2Fcollector-ui-jetty-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fui%2Fquery%2FTraceQuery.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-ui%2Fcollector-ui-jetty-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fui%2Fquery%2FTraceQuery.java?ref=8e3e0a3c5536ea01eaed6826b4b2954ffeeef1b8",
      "patch": "@@ -65,11 +65,11 @@ public TraceBrief queryBasicTraces(TraceQueryCondition condition) throws ParseEx\n         long endSecondTimeBucket = 0;\n         String traceId = Const.EMPTY_STRING;\n \n-        if (ObjectUtils.isNotEmpty(condition.getQueryDuration())) {\n+        if (StringUtils.isNotEmpty(condition.getTraceId())) {\n+            traceId = condition.getTraceId();\n+        } else if (ObjectUtils.isNotEmpty(condition.getQueryDuration())) {\n             startSecondTimeBucket = DurationUtils.INSTANCE.durationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getStart());\n             endSecondTimeBucket = DurationUtils.INSTANCE.durationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getEnd());\n-        } else if (StringUtils.isNotEmpty(condition.getTraceId())) {\n-            traceId = condition.getTraceId();\n         } else {\n             throw new UnexpectedException(\"The condition must contains either queryDuration or traceId.\");\n         }",
      "parent_sha": "10ccd4f163d12378b0742fd222d62f564b3260f5"
    }
  },
  {
    "oid": "1edbb81ed46475a6adaa89352221126f6c87891d",
    "message": "Update comments about WorkerInvokeException",
    "date": "2017-06-14T01:00:11Z",
    "url": "https://github.com/apache/skywalking/commit/1edbb81ed46475a6adaa89352221126f6c87891d",
    "details": {
      "sha": "021dbec0f40c565c71c683c990e1ef4400efc037",
      "filename": "apm-collector/apm-collector-cluster/src/main/java/org/skywalking/apm/collector/actor/WorkerInvokeException.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/1edbb81ed46475a6adaa89352221126f6c87891d/apm-collector%2Fapm-collector-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Factor%2FWorkerInvokeException.java",
      "raw_url": "https://github.com/apache/skywalking/raw/1edbb81ed46475a6adaa89352221126f6c87891d/apm-collector%2Fapm-collector-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Factor%2FWorkerInvokeException.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Factor%2FWorkerInvokeException.java?ref=1edbb81ed46475a6adaa89352221126f6c87891d",
      "patch": "@@ -1,7 +1,7 @@\n package org.skywalking.apm.collector.actor;\n \n /**\n- * This exception is raised when call (or ask) worker.\n+ * This exception is raised when worker fails to process job during \"call\" or \"ask\" \n  *\n  * @author pengys5\n  * @since v3.1-2017",
      "parent_sha": "991bcd5db6857347e1b2fe7c45e59069ae5eab13"
    }
  },
  {
    "oid": "2189ce51900ab06d04c10e0d3c890cffcd0e305f",
    "message": "\u63d0\u4f9b\u4e00\u4e2aTracingBootstrap\u7684\u5b9e\u73b0\u65b9\u5f0f\u7684\u6307\u5bfc",
    "date": "2016-07-26T01:56:30Z",
    "url": "https://github.com/apache/skywalking/commit/2189ce51900ab06d04c10e0d3c890cffcd0e305f",
    "details": {
      "sha": "c63b28b65e5dec2a8a07f94b4eeb4245ac83d0f6",
      "filename": "skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/plugin/TracingBootstrap.java",
      "status": "modified",
      "additions": 30,
      "deletions": 28,
      "changes": 58,
      "blob_url": "https://github.com/apache/skywalking/blob/2189ce51900ab06d04c10e0d3c890cffcd0e305f/skywalking-collector%2Fskywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2FTracingBootstrap.java",
      "raw_url": "https://github.com/apache/skywalking/raw/2189ce51900ab06d04c10e0d3c890cffcd0e305f/skywalking-collector%2Fskywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2FTracingBootstrap.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-collector%2Fskywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2FTracingBootstrap.java?ref=2189ce51900ab06d04c10e0d3c890cffcd0e305f",
      "patch": "@@ -2,42 +2,44 @@\n \n import com.ai.cloud.skywalking.logging.LogManager;\n import com.ai.cloud.skywalking.logging.Logger;\n+import com.ai.cloud.skywalking.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n \n import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n+import java.util.Map;\n \n /**\n  * \u66ff\u4ee3\u5e94\u7528\u51fd\u6570\u7684main\u51fd\u6570\u5165\u53e3\uff0c\u786e\u4fdd\u5728\u7a0b\u5e8f\u5165\u53e3\u5904\u8fd0\u884c <br/>\n  * \u7528\u4e8e\u66ff\u4ee3-javaagent\u7684\u53e6\u4e00\u79cd\u6a21\u5f0f <br/>\n- * \n- * @author wusheng\n+ * \u4e3b\u8981\u7528\u4e8e\u63d2\u4ef6\u7684\u672c\u5730\u5316\u8c03\u8bd5\u4e0e\u8fd0\u884c<br/>\n+ *\n  *\n+ * @author wusheng\n  */\n public class TracingBootstrap {\n-\tprivate static Logger logger = LogManager.getLogger(TracingBootstrap.class);\n-\n-\tprivate TracingBootstrap() {\n-\t}\n-\n-\tpublic static void main(String[] args) throws IllegalAccessException,\n-\t\t\tIllegalArgumentException, InvocationTargetException,\n-\t\t\tNoSuchMethodException, SecurityException, ClassNotFoundException {\n-\t\tif (args.length == 0) {\n-\t\t\tthrow new RuntimeException(\n-\t\t\t\t\t\"bootstrap failure. need args[0] to be main class.\");\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tPluginBootstrap bootstrap = new PluginBootstrap();\n-\t\t\tbootstrap.loadPlugins();\n-\t\t} catch (Throwable t) {\n-\t\t\tlogger.error(\"PluginBootstrap start failure.\", t);\n-\t\t}\n-\n-\t\tString[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n-\n-\t\t\n-\t\tClass.forName(args[0]).getMethod(\"main\", String[].class)\n-\t\t\t\t.invoke(null, new Object[]{newArgs});\n-\t}\n+    private static Logger logger = LogManager.getLogger(TracingBootstrap.class);\n+\n+    private TracingBootstrap() {\n+    }\n+\n+    public static void main(String[] args)\n+            throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException,\n+            SecurityException, ClassNotFoundException {\n+        if (args.length == 0) {\n+            throw new RuntimeException(\"bootstrap failure. need args[0] to be main class.\");\n+        }\n+\n+        PluginBootstrap bootstrap = new PluginBootstrap();\n+        Map<String, ClassEnhancePluginDefine> pluginDefineMap = bootstrap.loadPlugins();\n+\n+        for(String enhanceClassName : pluginDefineMap.keySet()){\n+            //init ctClass\n+            //enhance class\n+        }\n+\n+        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n+\n+\n+        Class.forName(args[0]).getMethod(\"main\", String[].class).invoke(null, new Object[] {newArgs});\n+    }\n }",
      "parent_sha": "f08ca13a15b68e88c88dc0304970936c5abfaca4"
    }
  },
  {
    "oid": "5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
    "message": "Fix #1488: Fix NPE when the targetAop class is null (#1507)",
    "date": "2018-07-31T14:37:26Z",
    "url": "https://github.com/apache/skywalking/commit/5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
    "details": {
      "sha": "5c99a886904ef3eae8d455c155c42390186dc71a",
      "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/apache/skywalking/blob/5eea1ae7670b58acaa7278ee3b3e730235d17bc7/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FAopExpressionMatchInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/5eea1ae7670b58acaa7278ee3b3e730235d17bc7/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FAopExpressionMatchInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FAopExpressionMatchInterceptor.java?ref=5eea1ae7670b58acaa7278ee3b3e730235d17bc7",
      "patch": "@@ -15,17 +15,15 @@\n  * limitations under the License.\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.patch;\n \n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n \n /**\n  * {@link AopExpressionMatchInterceptor} check if the method is match the enhanced method\n@@ -42,30 +40,33 @@ public AopExpressionMatchInterceptor() {\n     }\n \n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        MethodInterceptResult result) {\n \n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n-        Method targetAopMethod = (Method) allArguments[1];\n-        Class<?> targetAopClass = (Class<?>) allArguments[2];\n-        if (EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Object ret) {\n+        Method targetAopMethod = (Method)allArguments[1];\n+        Class<?> targetAopClass = (Class<?>)allArguments[2];\n+        if (targetAopClass != null && EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n             return false;\n         }\n         return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Throwable t) {\n \n     }\n \n     private boolean isEnhancedMethod(Method targetMethod) {\n         for (Method method : methods) {\n             if (method.getName().equals(targetMethod.getName())\n-                    && method.getReturnType().equals(targetMethod.getReturnType())\n-                    && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n+                && method.getReturnType().equals(targetMethod.getReturnType())\n+                && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n                 return true;\n             }\n         }",
      "parent_sha": "6295af53fbd32559dbcaf8d2cb4d59dd6a32c7e7"
    }
  },
  {
    "oid": "7a270e4881ed9ff24875128bf0735758fcc75f2e",
    "message": "\u53bb\u6389final\u4fee\u9970\u7b26",
    "date": "2015-11-11T06:33:50Z",
    "url": "https://github.com/apache/skywalking/commit/7a270e4881ed9ff24875128bf0735758fcc75f2e",
    "details": {
      "sha": "3399ae50f8b40a99a8f4d5d2fcf21e5f88e7bcda",
      "filename": "skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/conf/Config.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/7a270e4881ed9ff24875128bf0735758fcc75f2e/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fconf%2FConfig.java",
      "raw_url": "https://github.com/apache/skywalking/raw/7a270e4881ed9ff24875128bf0735758fcc75f2e/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fconf%2FConfig.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fconf%2FConfig.java?ref=7a270e4881ed9ff24875128bf0735758fcc75f2e",
      "patch": "@@ -50,7 +50,7 @@ public static class Persistence {\n         public static long SWITCH_FILE_WAIT_TIME = 5000L;\n \n         // \u8ffd\u52a0EOF\u6807\u5fd7\u4f4d\u7684\u7ebf\u7a0b\u6570\u91cf\n-        public static final int MAX_APPEND_EOF_FLAGS_THREAD_NUMBER = 2;\n+        public static int MAX_APPEND_EOF_FLAGS_THREAD_NUMBER = 2;\n     }\n \n     public static class RegisterPersistence {",
      "parent_sha": "5167d5a5f963f83d3b57661593c3b352169b7fe0"
    }
  },
  {
    "oid": "10f6f5c3d38a73ce83447c9e76d7894cbb94c631",
    "message": "1.\u5224\u65ad\u9519\u8bef\u9020\u6210\u6b7b\u5faa\u73af\u3002",
    "date": "2015-12-22T03:37:21Z",
    "url": "https://github.com/apache/skywalking/commit/10f6f5c3d38a73ce83447c9e76d7894cbb94c631",
    "details": {
      "sha": "045c1c55d0754911a846956e95230e94ea170100",
      "filename": "skywalking-api/src/main/java/com/ai/cloud/skywalking/sender/DataSenderWithCopies.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/10f6f5c3d38a73ce83447c9e76d7894cbb94c631/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderWithCopies.java",
      "raw_url": "https://github.com/apache/skywalking/raw/10f6f5c3d38a73ce83447c9e76d7894cbb94c631/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderWithCopies.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fsender%2FDataSenderWithCopies.java?ref=10f6f5c3d38a73ce83447c9e76d7894cbb94c631",
      "patch": "@@ -27,7 +27,7 @@ public DataSenderWithCopies(int maxKeepConnectingSenderSize){\n \t */\n \tpublic boolean append(IDataSender dataSender){\n \t\tsenders.add(dataSender);\n-\t\treturn maxCopyNum == senders.size();\n+\t\treturn senders.size() < maxCopyNum;\n \t}\n \n \t/**",
      "parent_sha": "91b59f538ab3fd6ac2f6098859cfeca153c8561c"
    }
  },
  {
    "oid": "202d5711d43de6f634cf906ccbb4af200b598c95",
    "message": "fix NPE when fetch empty readHeatMap metrics. (#4891)",
    "date": "2020-06-09T13:22:12Z",
    "url": "https://github.com/apache/skywalking/commit/202d5711d43de6f634cf906ccbb4af200b598c95",
    "details": {
      "sha": "d8b11c1f218ab8e30f19fe9a9034ac52348aa396",
      "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/HeatMap.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/apache/skywalking/blob/202d5711d43de6f634cf906ccbb4af200b598c95/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fquery%2Ftype%2FHeatMap.java",
      "raw_url": "https://github.com/apache/skywalking/raw/202d5711d43de6f634cf906ccbb4af200b598c95/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fquery%2Ftype%2FHeatMap.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fquery%2Ftype%2FHeatMap.java?ref=202d5711d43de6f634cf906ccbb4af200b598c95",
      "patch": "@@ -34,7 +34,7 @@\n @Getter\n public class HeatMap {\n     private List<HeatMapColumn> values = new ArrayList<>(10);\n-    private List<Bucket> buckets = null;\n+    private List<Bucket> buckets = new ArrayList<>();\n \n     public void addBucket(Bucket bucket) {\n         this.buckets.add(bucket);\n@@ -50,8 +50,7 @@ public void buildColumn(String id, String rawdata, int defaultValue) {\n         DataTable dataset = new DataTable(rawdata);\n \n         final List<String> sortedKeys = dataset.sortedKeys(new KeyComparator(true));\n-        if (buckets == null) {\n-            buckets = new ArrayList<>(dataset.size());\n+        if (buckets.isEmpty()) {\n             for (int i = 0; i < sortedKeys.size(); i++) {\n                 final Bucket bucket = new Bucket();\n                 final String minValue = sortedKeys.get(i);",
      "parent_sha": "d982576af4830fb00902e32fc816ae5c58faeaca"
    }
  },
  {
    "oid": "752d19309bc5321c924d1a05cc39c1366a63f376",
    "message": "Segment no entry span that will save a error entry service data",
    "date": "2017-09-03T15:29:42Z",
    "url": "https://github.com/apache/skywalking/commit/752d19309bc5321c924d1a05cc39c1366a63f376",
    "details": {
      "sha": "d0c144f77a14066ddc0b74dc14cad5b3628b0913",
      "filename": "apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/service/entry/ServiceEntrySpanListener.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/752d19309bc5321c924d1a05cc39c1366a63f376/apm-collector%2Fapm-collector-agentstream%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fagentstream%2Fworker%2Fservice%2Fentry%2FServiceEntrySpanListener.java",
      "raw_url": "https://github.com/apache/skywalking/raw/752d19309bc5321c924d1a05cc39c1366a63f376/apm-collector%2Fapm-collector-agentstream%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fagentstream%2Fworker%2Fservice%2Fentry%2FServiceEntrySpanListener.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-agentstream%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fagentstream%2Fworker%2Fservice%2Fentry%2FServiceEntrySpanListener.java?ref=752d19309bc5321c924d1a05cc39c1366a63f376",
      "patch": "@@ -29,6 +29,7 @@ public class ServiceEntrySpanListener implements RefsListener, FirstSpanListener\n     private int applicationId;\n     private int entryServiceId;\n     private String entryServiceName;\n+    private boolean hasEntry = false;\n \n     @Override\n     public void parseEntry(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId) {\n@@ -39,6 +40,7 @@ public void parseEntry(SpanObject spanObject, int applicationId, int application\n         } else {\n             this.entryServiceName = ServiceCache.getServiceName(this.entryServiceId);\n         }\n+        this.hasEntry = true;\n     }\n \n     @Override public void parseRef(TraceSegmentReference reference, int applicationId, int applicationInstanceId,\n@@ -54,7 +56,7 @@ public void parseFirst(SpanObject spanObject, int applicationId, int application\n     @Override public void build() {\n         logger.debug(\"entry service listener build\");\n         StreamModuleContext context = (StreamModuleContext)CollectorContextHelper.INSTANCE.getContext(StreamModuleGroupDefine.GROUP_NAME);\n-        if (!hasReference) {\n+        if (!hasReference && hasEntry) {\n             ServiceEntryDataDefine.ServiceEntry serviceEntry = new ServiceEntryDataDefine.ServiceEntry();\n             serviceEntry.setId(applicationId + Const.ID_SPLIT + entryServiceName);\n             serviceEntry.setApplicationId(applicationId);",
      "parent_sha": "e81b2741bab05a3c616cd8973e03cd410f5640ab"
    }
  },
  {
    "oid": "beb807df81174f7416464345c977a5e01d05382c",
    "message": "only enhance child not all parent method (#2737)",
    "date": "2019-05-23T09:08:31Z",
    "url": "https://github.com/apache/skywalking/commit/beb807df81174f7416464345c977a5e01d05382c",
    "details": {
      "sha": "71477fc7e4ccc9a58d067abbe48990e5be2cb39a",
      "filename": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/beb807df81174f7416464345c977a5e01d05382c/apm-sniffer%2Fapm-toolkit-activation%2Fapm-toolkit-trace-activation%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Ftoolkit%2Factivation%2Ftrace%2FTraceAnnotationActivation.java",
      "raw_url": "https://github.com/apache/skywalking/raw/beb807df81174f7416464345c977a5e01d05382c/apm-sniffer%2Fapm-toolkit-activation%2Fapm-toolkit-trace-activation%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Ftoolkit%2Factivation%2Ftrace%2FTraceAnnotationActivation.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-toolkit-activation%2Fapm-toolkit-trace-activation%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Ftoolkit%2Factivation%2Ftrace%2FTraceAnnotationActivation.java?ref=beb807df81174f7416464345c977a5e01d05382c",
      "patch": "@@ -21,6 +21,7 @@\n \n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.DeclaredInstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n@@ -47,7 +48,7 @@ public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePlugin\n \n     @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n         return new InstanceMethodsInterceptPoint[] {\n-            new InstanceMethodsInterceptPoint() {\n+            new DeclaredInstanceMethodsInterceptPoint() {\n                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {\n                     return isAnnotatedWith(named(TRACE_ANNOTATION));\n                 }",
      "parent_sha": "3e2fb7880d87216d7f574e73f693c08f71ca131c"
    }
  },
  {
    "oid": "0ae26f8e6e2f9dea80cf807798982f14a9b25042",
    "message": "Fixed a bug which the segment record index does not delete the history data because of the saving time bucket is a second format date, but the query delete is minute format date. (#1943)\n\n#1942",
    "date": "2018-11-21T05:08:08Z",
    "url": "https://github.com/apache/skywalking/commit/0ae26f8e6e2f9dea80cf807798982f14a9b25042",
    "details": {
      "sha": "d48864d55d929ecd4873e04de4a874e145b23ef3",
      "filename": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/0ae26f8e6e2f9dea80cf807798982f14a9b25042/oap-server%2Fserver-receiver-plugin%2Fskywalking-trace-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Ftrace%2Fprovider%2Fparser%2Flistener%2Fsegment%2FSegmentSpanListener.java",
      "raw_url": "https://github.com/apache/skywalking/raw/0ae26f8e6e2f9dea80cf807798982f14a9b25042/oap-server%2Fserver-receiver-plugin%2Fskywalking-trace-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Ftrace%2Fprovider%2Fparser%2Flistener%2Fsegment%2FSegmentSpanListener.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-receiver-plugin%2Fskywalking-trace-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Ftrace%2Fprovider%2Fparser%2Flistener%2Fsegment%2FSegmentSpanListener.java?ref=0ae26f8e6e2f9dea80cf807798982f14a9b25042",
      "patch": "@@ -52,7 +52,7 @@ private SegmentSpanListener(ModuleManager moduleManager) {\n \n     @Override\n     public void parseFirst(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreInfo) {\n-        long timeBucket = TimeBucketUtils.INSTANCE.getSecondTimeBucket(segmentCoreInfo.getStartTime());\n+        long timeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(segmentCoreInfo.getStartTime());\n \n         segment.setSegmentId(segmentCoreInfo.getSegmentId());\n         segment.setServiceId(segmentCoreInfo.getApplicationId());",
      "parent_sha": "da734ac8fe0e298bce5019ea0e3c3c157a5e7a07"
    }
  },
  {
    "oid": "3202a546d70bbd2ff572d47ee34b7ac81f675199",
    "message": "Fix a license error.",
    "date": "2017-11-15T08:47:45Z",
    "url": "https://github.com/apache/skywalking/commit/3202a546d70bbd2ff572d47ee34b7ac81f675199",
    "details": {
      "sha": "43df99b4a28ac4273ab65cea701c49a19b73ed07",
      "filename": "apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/skywalking/apm/collector/storage/h2/StorageModuleH2Provider.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/apache/skywalking/blob/3202a546d70bbd2ff572d47ee34b7ac81f675199/apm-collector%2Fapm-collector-storage%2Fcollector-storage-h2-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fh2%2FStorageModuleH2Provider.java",
      "raw_url": "https://github.com/apache/skywalking/raw/3202a546d70bbd2ff572d47ee34b7ac81f675199/apm-collector%2Fapm-collector-storage%2Fcollector-storage-h2-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fh2%2FStorageModuleH2Provider.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-storage%2Fcollector-storage-h2-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fh2%2FStorageModuleH2Provider.java?ref=3202a546d70bbd2ff572d47ee34b7ac81f675199",
      "patch": "@@ -1,21 +1,20 @@\n /*\n- * Copyright 2017, OpenSkywalking Organization All rights rH2erved.\n+ * Copyright 2017, OpenSkywalking Organization All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licensH2/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * UnlH2s required by applicable law or agreed to in writing, software\n+ * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIH2 OR CONDITIONS OF ANY KIND, either exprH2s or implied.\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  *\n  * Project repository: https://github.com/OpenSkywalking/skywalking\n  */\n-\n package org.skywalking.apm.collector.storage.h2;\n \n import java.util.Properties;",
      "parent_sha": "4a2e1bca2735cb9d57f2f76f21edadc8033960e0"
    }
  },
  {
    "oid": "09ae8ab5f3d05413feff811d8e54e4d27359bb9e",
    "message": "1.\u589e\u52a0\u4e0d\u6821\u9a8ctraceId\u7684\u65b9\u6cd5",
    "date": "2016-06-13T14:58:25Z",
    "url": "https://github.com/apache/skywalking/commit/09ae8ab5f3d05413feff811d8e54e4d27359bb9e",
    "details": {
      "sha": "2eaa934e7319da7d29933f82f0b214ea9dd05e91",
      "filename": "test/skywalking-test-api/src/main/java/com/ai/skywalking/testframework/api/TraceTreeAssert.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/apache/skywalking/blob/09ae8ab5f3d05413feff811d8e54e4d27359bb9e/test%2Fskywalking-test-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fskywalking%2Ftestframework%2Fapi%2FTraceTreeAssert.java",
      "raw_url": "https://github.com/apache/skywalking/raw/09ae8ab5f3d05413feff811d8e54e4d27359bb9e/test%2Fskywalking-test-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fskywalking%2Ftestframework%2Fapi%2FTraceTreeAssert.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test%2Fskywalking-test-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fskywalking%2Ftestframework%2Fapi%2FTraceTreeAssert.java?ref=09ae8ab5f3d05413feff811d8e54e4d27359bb9e",
      "patch": "@@ -12,9 +12,15 @@\n public class TraceTreeAssert {\n \n     public static void assertEquals(String[][] expectedTraceTree) {\n+        assertEquals(expectedTraceTree, false);\n+    }\n+\n+    public static void assertEquals(String[][] expectedTraceTree, boolean skipValidateTraceId) {\n         List<Span> spanDataInBuffer = ContextPoolOperator.acquireSpanData();\n \n-        validateTraceId(spanDataInBuffer);\n+        if (!skipValidateTraceId) {\n+            validateTraceId(spanDataInBuffer);\n+        }\n \n         List<String> assertSpanData = convertSpanDataToCompareStr(spanDataInBuffer);\n ",
      "parent_sha": "85d123478e2b314b202fbcf977c7d99bf13975ee"
    }
  },
  {
    "oid": "4a95381c59ec3abdd468ccce8eff0fcb00f1bfdb",
    "message": "\u4fee\u590dTraceId\u5e26\u591a\u4e2a\u70b9\u65e0\u6cd5\u5c55\u793a\u8c03\u7528\u94fe",
    "date": "2016-01-13T02:03:17Z",
    "url": "https://github.com/apache/skywalking/commit/4a95381c59ec3abdd468ccce8eff0fcb00f1bfdb",
    "details": {
      "sha": "ad75f10193f697c5ac371698e5cfc309346070dc",
      "filename": "skywalking-webui/src/main/java/com/ai/cloud/controller/HelloSkyWalkingUICtl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/4a95381c59ec3abdd468ccce8eff0fcb00f1bfdb/skywalking-webui%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fcontroller%2FHelloSkyWalkingUICtl.java",
      "raw_url": "https://github.com/apache/skywalking/raw/4a95381c59ec3abdd468ccce8eff0fcb00f1bfdb/skywalking-webui%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fcontroller%2FHelloSkyWalkingUICtl.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-webui%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fcontroller%2FHelloSkyWalkingUICtl.java?ref=4a95381c59ec3abdd468ccce8eff0fcb00f1bfdb",
      "patch": "@@ -82,7 +82,7 @@ public String showIndexPage(ModelMap root) throws Exception {\n \t * @return\n \t * @throws Exception\n \t */\n-\t@RequestMapping(value = \"/{traceId}\")\n+\t@RequestMapping(value = \"/{traceId:.+}\")\n \tpublic String showIndexPageWithTraceId(ModelMap root, @PathVariable(\"traceId\") String traceId) throws Exception {\n \t\tshowIndexPage(root, null);\n \t\troot.put(\"traceId\", traceId);\n@@ -100,7 +100,7 @@ private void showIndexPage(ModelMap root, String nullStr) {\n \t * @return\n \t * @throws Exception\n \t */\n-\t@RequestMapping(value = \"/showTraceLog/{traceId}\")\n+\t@RequestMapping(value = \"/showTraceLog/{traceId:.+}\")\n \tpublic String showTraceLog(ModelMap root, @PathVariable(\"traceId\") String traceId) throws Exception {\n //\t\ttraceId = \"bcb759bc12db474aa54bc4bea605cb81123\";\n \t\tMap<String, TraceLogEntry> traceLogMap = traceLogSer.queryLogByTraceId(traceId);",
      "parent_sha": "9243075ebb42a6fc8372701a63b3a0dc729e2da8"
    }
  },
  {
    "oid": "dd942d15a30958483ccc939bf66b0121859cc243",
    "message": "FIX NPE in tomcat plugin ForwardInterceptor (#1562)",
    "date": "2018-08-20T23:18:40Z",
    "url": "https://github.com/apache/skywalking/commit/dd942d15a30958483ccc939bf66b0121859cc243",
    "details": {
      "sha": "68416c7ed6734fe6e043c098f205dadf306571d5",
      "filename": "apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/dd942d15a30958483ccc939bf66b0121859cc243/apm-sniffer%2Fapm-sdk-plugin%2Ftomcat-7.x-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Ftomcat78x%2FForwardInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/dd942d15a30958483ccc939bf66b0121859cc243/apm-sniffer%2Fapm-sdk-plugin%2Ftomcat-7.x-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Ftomcat78x%2FForwardInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Ftomcat-7.x-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Ftomcat78x%2FForwardInterceptor.java?ref=dd942d15a30958483ccc939bf66b0121859cc243",
      "patch": "@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         if (ContextManager.isActive()) {\n             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();\n             Map<String, String> eventMap = new HashMap<String, String>();\n-            eventMap.put(\"forward-url\", (String)objInst.getSkyWalkingDynamicField());\n+            eventMap.put(\"forward-url\", objInst.getSkyWalkingDynamicField() == null ? \"\" : String.valueOf(objInst.getSkyWalkingDynamicField()));\n             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);\n             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);\n         }",
      "parent_sha": "a29a8d7c09641b7c4e722d03c9816d15d68855c4"
    }
  },
  {
    "oid": "1f60db7ece3de153e5ef01ce006beca4d8443db0",
    "message": "Make code easier for understanding.",
    "date": "2017-10-08T13:29:13Z",
    "url": "https://github.com/apache/skywalking/commit/1f60db7ece3de153e5ef01ce006beca4d8443db0",
    "details": {
      "sha": "0d654e7c6e822d4f580b85dc968ceed2baa12b1c",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/1f60db7ece3de153e5ef01ce006beca4d8443db0/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FAppAndServiceRegisterClient.java",
      "raw_url": "https://github.com/apache/skywalking/raw/1f60db7ece3de153e5ef01ce006beca4d8443db0/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FAppAndServiceRegisterClient.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FAppAndServiceRegisterClient.java?ref=1f60db7ece3de153e5ef01ce006beca4d8443db0",
      "patch": "@@ -88,7 +88,7 @@ public void shutdown() throws Throwable {\n     @Override\n     public void run() {\n         boolean shouldTry = true;\n-        while (CONNECTED.equals(status) & shouldTry) {\n+        while (CONNECTED.equals(status) && shouldTry) {\n             shouldTry = false;\n             try {\n                 if (RemoteDownstreamConfig.Agent.APPLICATION_ID == DictionaryUtil.nullValue()) {",
      "parent_sha": "5f1c8afcf8454285050ed11def8f8cbb658c2d85"
    }
  },
  {
    "oid": "605d2449f24ade7c31b2708ca324edcc491b5bd9",
    "message": " ApdexMetrics Change type of `totalNum`\u3001`sSum`\uff0c`tNum` from int to long (#4839)",
    "date": "2020-05-29T09:05:45Z",
    "url": "https://github.com/apache/skywalking/commit/605d2449f24ade7c31b2708ca324edcc491b5bd9",
    "details": {
      "sha": "69d24a8bae67e0e1e46d6be5803f176487c5b840",
      "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/skywalking/blob/605d2449f24ade7c31b2708ca324edcc491b5bd9/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2Fmetrics%2FApdexMetrics.java",
      "raw_url": "https://github.com/apache/skywalking/raw/605d2449f24ade7c31b2708ca324edcc491b5bd9/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2Fmetrics%2FApdexMetrics.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2Fmetrics%2FApdexMetrics.java?ref=605d2449f24ade7c31b2708ca324edcc491b5bd9",
      "patch": "@@ -49,15 +49,15 @@ public abstract class ApdexMetrics extends Metrics implements IntValueHolder {\n     @Getter\n     @Setter\n     @Column(columnName = TOTAL_NUM, storageOnly = true)\n-    private int totalNum;\n+    private long totalNum;\n     @Getter\n     @Setter\n     @Column(columnName = S_NUM, storageOnly = true)\n-    private int sNum;\n+    private long sNum;\n     @Getter\n     @Setter\n     @Column(columnName = T_NUM, storageOnly = true)\n-    private int tNum;\n+    private long tNum;\n     @Getter\n     @Setter\n     @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)\n@@ -87,7 +87,7 @@ public final void combine(Metrics metrics) {\n \n     @Override\n     public void calculate() {\n-        value = (sNum * 10000 + tNum * 10000 / 2) / totalNum;\n+        value = (int) ((sNum * 10000 + tNum * 10000 / 2) / totalNum);\n     }\n \n     @Override",
      "parent_sha": "37940beccccdc824524cfa8416d4e62ac535279f"
    }
  },
  {
    "oid": "602d48367fbf6fd5165604e5bce223f9ae3f6748",
    "message": "\u4fee\u6539\u4e00\u4e2a\u65e5\u5fd7\u4e0d\u6b63\u786e\u7684\u95ee\u9898\u3002",
    "date": "2016-04-08T01:12:57Z",
    "url": "https://github.com/apache/skywalking/commit/602d48367fbf6fd5165604e5bce223f9ae3f6748",
    "details": {
      "sha": "2a65a451f9192aac6fb2b4e3c20ec06f49a6bdd7",
      "filename": "skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/storage/Chain.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/602d48367fbf6fd5165604e5bce223f9ae3f6748/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fstorage%2FChain.java",
      "raw_url": "https://github.com/apache/skywalking/raw/602d48367fbf6fd5165604e5bce223f9ae3f6748/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fstorage%2FChain.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-server%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Freciever%2Fstorage%2FChain.java?ref=602d48367fbf6fd5165604e5bce223f9ae3f6748",
      "patch": "@@ -27,9 +27,9 @@ public void doChain(List<Span> spans) {\n                     chains.get(index++).doChain(spans, this);\n                     break;\n                 } catch (Throwable e) {\n-                    logger.error(\"do chain at index[{}] failure.\", index, e);\n+                    logger.error(\"do chain at index[\" + (index - 1) + \"] failure.\", e);\n                     ServerHealthCollector.getCurrentHeathReading(\"storage-chain\").updateData(ServerHeathReading.ERROR,\n-                            \"Failed to do chain action. spans list hash code:\" + spans.hashCode() + \",Cause:\" + e.getMessage());\n+                    \t\t\"do chain at index[\" + (index - 1) + \"] failure. spans list hash code:\" + spans.hashCode() + \",Cause:\" + e.getMessage());\n                     // \u5982\u679cChain\u51fa\u73b0\u4efb\u4f55\u5f02\u5e38\uff0c\u5c06\u91cd\u505aChain,\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931\n                     index--;\n                 }",
      "parent_sha": "9bb6067f99a87ff0912311ae0263f84f7f8bc995"
    }
  },
  {
    "oid": "d5d46ae02aa999038f2f9f50eb4db287b955b87c",
    "message": "bugfix: fix bug when spaces in agent path. resolve #1219 (#2350)\n\n* bugfix: fix bug when spaces in agent path. resolve #1219\r\n\r\n* fix code style\r\n\r\n* fix code style",
    "date": "2019-03-14T08:06:13Z",
    "url": "https://github.com/apache/skywalking/commit/d5d46ae02aa999038f2f9f50eb4db287b955b87c",
    "details": {
      "sha": "a7574ef5a9d6338c74426767f46e61111ab62644",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/AgentPackagePath.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/skywalking/blob/d5d46ae02aa999038f2f9f50eb4db287b955b87c/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fboot%2FAgentPackagePath.java",
      "raw_url": "https://github.com/apache/skywalking/raw/d5d46ae02aa999038f2f9f50eb4db287b955b87c/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fboot%2FAgentPackagePath.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fboot%2FAgentPackagePath.java?ref=d5d46ae02aa999038f2f9f50eb4db287b955b87c",
      "patch": "@@ -19,6 +19,7 @@\n \n package org.apache.skywalking.apm.agent.core.boot;\n \n+import java.net.URISyntaxException;\n import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n \n@@ -61,9 +62,11 @@ private static File findPath() throws AgentPackageNotFoundException {\n                 urlString = urlString.substring(urlString.indexOf(\"file:\"), insidePathIndex);\n                 File agentJarFile = null;\n                 try {\n-                    agentJarFile = new File(new URL(urlString).getFile());\n+                    agentJarFile = new File(new URL(urlString).toURI());\n                 } catch (MalformedURLException e) {\n                     logger.error(e, \"Can not locate agent jar file by url:\" + urlString);\n+                } catch (URISyntaxException e) {\n+                    logger.error(e, \"Can not locate agent jar file by url:\" + urlString);\n                 }\n                 if (agentJarFile.exists()) {\n                     return agentJarFile.getParentFile();",
      "parent_sha": "30e408912857f258335e231e3d7f16777e03b130"
    }
  },
  {
    "oid": "0cf998022de52d9e23b4ce3010e3a0503eb33a41",
    "message": "If transform throw exception, the stream observer won't call the onCompleted method, then the stream observer will wait it finish until the timeout. (#3163)",
    "date": "2019-07-25T00:54:14Z",
    "url": "https://github.com/apache/skywalking/commit/0cf998022de52d9e23b4ce3010e3a0503eb33a41",
    "details": {
      "sha": "16457460773046a049baa476a0e6b4ef3c0322e5",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/TraceSegmentServiceClient.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/apache/skywalking/blob/0cf998022de52d9e23b4ce3010e3a0503eb33a41/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FTraceSegmentServiceClient.java",
      "raw_url": "https://github.com/apache/skywalking/raw/0cf998022de52d9e23b4ce3010e3a0503eb33a41/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FTraceSegmentServiceClient.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fremote%2FTraceSegmentServiceClient.java?ref=0cf998022de52d9e23b4ce3010e3a0503eb33a41",
      "patch": "@@ -113,13 +113,14 @@ public void onCompleted() {\n                     UpstreamSegment upstreamSegment = segment.transform();\n                     upstreamSegmentStreamObserver.onNext(upstreamSegment);\n                 }\n-                upstreamSegmentStreamObserver.onCompleted();\n-\n-                status.wait4Finish();\n-                segmentUplinkedCounter += data.size();\n             } catch (Throwable t) {\n                 logger.error(t, \"Transform and send UpstreamSegment to collector fail.\");\n             }\n+\n+            upstreamSegmentStreamObserver.onCompleted();\n+\n+            status.wait4Finish();\n+            segmentUplinkedCounter += data.size();\n         } else {\n             segmentAbandonedCounter += data.size();\n         }",
      "parent_sha": "8605f4ccc05f13ef466515f2c551c59907b22fab"
    }
  },
  {
    "oid": "4958def7c45f51029cb593c7f1777f9cbaabeed0",
    "message": "Fix no-initialize of span.",
    "date": "2017-02-17T03:38:32Z",
    "url": "https://github.com/apache/skywalking/commit/4958def7c45f51029cb593c7f1777f9cbaabeed0",
    "details": {
      "sha": "9b55c1700cd160dfcae3faee0de275754f26fd89",
      "filename": "skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/Span.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/apache/skywalking/blob/4958def7c45f51029cb593c7f1777f9cbaabeed0/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FSpan.java",
      "raw_url": "https://github.com/apache/skywalking/raw/4958def7c45f51029cb593c7f1777f9cbaabeed0/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FSpan.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-commons%2Fskywalking-trace%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftrace%2FSpan.java?ref=4958def7c45f51029cb593c7f1777f9cbaabeed0",
      "patch": "@@ -53,14 +53,14 @@ public class Span {\n      *\n      * {@see https://github.com/opentracing/specification/blob/master/specification.md#set-a-span-tag}\n      */\n-    private final Map<String,Object> tags = new HashMap<String,Object>();\n+    private final Map<String,Object> tags;\n \n     /**\n      * Log is a concept from OpenTracing spec.\n      *\n      * {@see https://github.com/opentracing/specification/blob/master/specification.md#log-structured-data}\n      */\n-    private final List<LogData> logs = new ArrayList<LogData>();\n+    private final List<LogData> logs;\n \n     /**\n      * Create a new span, by given span id and parent span id.\n@@ -75,6 +75,9 @@ public Span(int spanId, int parentSpanId, String operationName){\n         this.spanId = spanId;\n         this.parentSpanId = parentSpanId;\n         this.startTime = System.currentTimeMillis();\n+        this.operationName = operationName;\n+        this.tags = new HashMap<String,Object>();\n+        this.logs = new ArrayList<LogData>();\n     }\n \n     /**",
      "parent_sha": "db93acb84c75fa799525a2633be33cb388e49583"
    }
  },
  {
    "oid": "991bcd5db6857347e1b2fe7c45e59069ae5eab13",
    "message": "Update comment about ArgumentsParseException",
    "date": "2017-06-14T00:55:31Z",
    "url": "https://github.com/apache/skywalking/commit/991bcd5db6857347e1b2fe7c45e59069ae5eab13",
    "details": {
      "sha": "6b2d2a1f216f48bc7e5fbb55eb243e663d5cec3d",
      "filename": "apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/httpserver/ArgumentsParseException.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/991bcd5db6857347e1b2fe7c45e59069ae5eab13/apm-collector%2Fapm-collector-worker%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fworker%2Fhttpserver%2FArgumentsParseException.java",
      "raw_url": "https://github.com/apache/skywalking/raw/991bcd5db6857347e1b2fe7c45e59069ae5eab13/apm-collector%2Fapm-collector-worker%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fworker%2Fhttpserver%2FArgumentsParseException.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-worker%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fworker%2Fhttpserver%2FArgumentsParseException.java?ref=991bcd5db6857347e1b2fe7c45e59069ae5eab13",
      "patch": "@@ -3,7 +3,7 @@\n import org.skywalking.apm.collector.actor.WorkerException;\n \n /**\n- * This exception is raised when argument not found or data type conversion from request.\n+ * This exception is raised when can't find the required argument or data type conversion fails from request.\n  *\n  * @author pengys5\n  * @since v3.1-2017",
      "parent_sha": "fd5cb5e080ffcafc94f4afe6fa04c8833399b919"
    }
  },
  {
    "oid": "e356da4b0e264a7617b3356febe6d6e25361f20a",
    "message": "#4907 - Duplicate Spring MVC endpoint fix (#5084)",
    "date": "2020-07-15T05:52:46Z",
    "url": "https://github.com/apache/skywalking/commit/e356da4b0e264a7617b3356febe6d6e25361f20a",
    "details": {
      "sha": "669d2e87afbcd88ea34bd7e1a24b8aad49b77c9b",
      "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/e356da4b0e264a7617b3356febe6d6e25361f20a/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fmvc-annotation-commons%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fmvc%2Fcommons%2Finterceptor%2FAbstractMethodInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/e356da4b0e264a7617b3356febe6d6e25361f20a/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fmvc-annotation-commons%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fmvc%2Fcommons%2Finterceptor%2FAbstractMethodInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fmvc-annotation-commons%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fmvc%2Fcommons%2Finterceptor%2FAbstractMethodInterceptor.java?ref=e356da4b0e264a7617b3356febe6d6e25361f20a",
      "patch": "@@ -84,9 +84,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             if (requestURL == null) {\n                 requestURL = getRequestURL(method);\n                 pathMappingCache.addPathMapping(method, requestURL);\n-                requestURL = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);\n+                requestURL = pathMappingCache.findPathMapping(method);\n             }\n-            operationName = requestURL;\n+            operationName = getAcceptedMethodTypes(method) + requestURL;\n         }\n \n         HttpServletRequest request = (HttpServletRequest) ContextManager.getRuntimeContext()",
      "parent_sha": "ce2469dbecbc137c856b262dd8df4f78dc37f60f"
    }
  },
  {
    "oid": "e0473e753bbe9c32d05b5e35f6fc87914c8df5a9",
    "message": "\u4fee\u590dDubbo\u63d2\u4ef6bug",
    "date": "2016-06-19T14:42:55Z",
    "url": "https://github.com/apache/skywalking/commit/e0473e753bbe9c32d05b5e35f6fc87914c8df5a9",
    "details": {
      "sha": "508445c5ce48645f058c2c94a9e65de128d81102",
      "filename": "skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/ai/cloud/skywalking/plugin/dubbo/DubboPluginDefine.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/apache/skywalking/blob/e0473e753bbe9c32d05b5e35f6fc87914c8df5a9/skywalking-sdk-plugin%2Fdubbo-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Fdubbo%2FDubboPluginDefine.java",
      "raw_url": "https://github.com/apache/skywalking/raw/e0473e753bbe9c32d05b5e35f6fc87914c8df5a9/skywalking-sdk-plugin%2Fdubbo-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Fdubbo%2FDubboPluginDefine.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-sdk-plugin%2Fdubbo-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Fdubbo%2FDubboPluginDefine.java?ref=e0473e753bbe9c32d05b5e35f6fc87914c8df5a9",
      "patch": "@@ -6,18 +6,18 @@\n import com.ai.cloud.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;\n \n public class DubboPluginDefine extends ClassStaticMethodsEnhancePluginDefine {\n-\t@Override\n-\tprotected MethodMatcher[] getStaticMethodsMatchers() {\n-\t\treturn new MethodMatcher[] { new SimpleMethodMatcher(\"buildInvokerChain\") };\n-\t}\n+    @Override\n+    protected MethodMatcher[] getStaticMethodsMatchers() {\n+        return new MethodMatcher[]{new SimpleMethodMatcher(\"buildInvokerChain\")};\n+    }\n \n-\t@Override\n-\tprotected StaticMethodsAroundInterceptor getStaticMethodsInterceptor() {\n-\t\treturn null;\n-\t}\n+    @Override\n+    protected StaticMethodsAroundInterceptor getStaticMethodsInterceptor() {\n+        return new ProtocolFilterBuildChainInterceptor();\n+    }\n \n-\t@Override\n-\tprotected String getBeInterceptedClassName() {\n-\t\treturn \"com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper\";\n-\t}\n+    @Override\n+    protected String getBeInterceptedClassName() {\n+        return \"com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper\";\n+    }\n }",
      "parent_sha": "c23b98819366489062af99d8455f14c63475e357"
    }
  },
  {
    "oid": "dac6aad05fb4eea80391156a7f51eca194c02aaf",
    "message": "fix issue",
    "date": "2017-03-20T16:09:15Z",
    "url": "https://github.com/apache/skywalking/commit/dac6aad05fb4eea80391156a7f51eca194c02aaf",
    "details": {
      "sha": "938d0e24942f4caaf0db4e3e281dbe2b11082f36",
      "filename": "skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-trace-context-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/trace/TraceContextInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/dac6aad05fb4eea80391156a7f51eca194c02aaf/skywalking-sniffer%2Fskywalking-toolkit-activation%2Fskywalking-toolkit-trace-context-activation%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftoolkit%2Factivation%2Ftrace%2FTraceContextInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/dac6aad05fb4eea80391156a7f51eca194c02aaf/skywalking-sniffer%2Fskywalking-toolkit-activation%2Fskywalking-toolkit-trace-context-activation%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftoolkit%2Factivation%2Ftrace%2FTraceContextInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-sniffer%2Fskywalking-toolkit-activation%2Fskywalking-toolkit-trace-context-activation%2Fsrc%2Fmain%2Fjava%2Fcom%2Fa%2Feye%2Fskywalking%2Ftoolkit%2Factivation%2Ftrace%2FTraceContextInterceptor.java?ref=dac6aad05fb4eea80391156a7f51eca194c02aaf",
      "patch": "@@ -24,9 +24,7 @@ public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInt\n \n     @Override\n     public Object afterMethod(StaticMethodInvokeContext interceptorContext, Object ret) {\n-        ContextCarrier carrier = new ContextCarrier();\n-        ContextManager.inject(carrier);\n-       return carrier.getTraceSegmentId();\n+       return ContextManager.getTraceSegmentId();\n     }\n \n     @Override",
      "parent_sha": "4a2104d25e21b66e9582e6cd06f9e01a63f4122c"
    }
  },
  {
    "oid": "77e5b65b53482dafd9c6a796b784090f1b1cb98f",
    "message": "Invoke the function in indicator to calculate result and persistent to storage.",
    "date": "2018-08-20T03:09:24Z",
    "url": "https://github.com/apache/skywalking/commit/77e5b65b53482dafd9c6a796b784090f1b1cb98f",
    "details": {
      "sha": "1ac53e76e06756dfb71e75018ad7302105d5e8f4",
      "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorPersistentWorker.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/skywalking/blob/77e5b65b53482dafd9c6a796b784090f1b1cb98f/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2Fworker%2FIndicatorPersistentWorker.java",
      "raw_url": "https://github.com/apache/skywalking/raw/77e5b65b53482dafd9c6a796b784090f1b1cb98f/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2Fworker%2FIndicatorPersistentWorker.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fanalysis%2Fworker%2FIndicatorPersistentWorker.java?ref=77e5b65b53482dafd9c6a796b784090f1b1cb98f",
      "patch": "@@ -122,8 +122,11 @@ private List<Object> prepareBatch(MergeDataCollection<Indicator> collection) {\n     private void cacheData(Indicator input) {\n         mergeDataCache.writing();\n         if (mergeDataCache.containsKey(input)) {\n-            mergeDataCache.get(input).combine(input);\n+            Indicator indicator = mergeDataCache.get(input);\n+            indicator.combine(input);\n+            indicator.calculate();\n         } else {\n+            input.calculate();\n             mergeDataCache.put(input);\n         }\n ",
      "parent_sha": "d39b6baf3532a18f8057a52d267a0034d76baf15"
    }
  },
  {
    "oid": "4b88d85291b7cc5b442e2c020d34f4f58632544f",
    "message": "Fix Elasticsearch storage installer: ignore check index settings for updating  in no-init running mode (#9954)",
    "date": "2022-11-12T23:33:32Z",
    "url": "https://github.com/apache/skywalking/commit/4b88d85291b7cc5b442e2c020d34f4f58632544f",
    "details": {
      "sha": "f514688c88981798950ab88b5b96eab6ad5b42d9",
      "filename": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/apache/skywalking/blob/4b88d85291b7cc5b442e2c020d34f4f58632544f/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fbase%2FStorageEsInstaller.java",
      "raw_url": "https://github.com/apache/skywalking/raw/4b88d85291b7cc5b442e2c020d34f4f58632544f/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fbase%2FStorageEsInstaller.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-storage-plugin%2Fstorage-elasticsearch-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fstorage%2Fplugin%2Felasticsearch%2Fbase%2FStorageEsInstaller.java?ref=4b88d85291b7cc5b442e2c020d34f4f58632544f",
      "patch": "@@ -30,6 +30,7 @@\n import org.apache.skywalking.library.elasticsearch.response.Index;\n import org.apache.skywalking.library.elasticsearch.response.IndexTemplate;\n import org.apache.skywalking.library.elasticsearch.response.Mappings;\n+import org.apache.skywalking.oap.server.core.RunningMode;\n import org.apache.skywalking.oap.server.core.storage.StorageException;\n import org.apache.skywalking.oap.server.core.storage.model.Model;\n import org.apache.skywalking.oap.server.core.storage.model.ModelColumn;\n@@ -84,8 +85,14 @@ public boolean isExists(Model model) throws StorageException {\n                 Optional<Index> index = esClient.getIndex(tableName);\n                 Mappings historyMapping = index.map(Index::getMappings).orElseGet(Mappings::new);\n                 structures.putStructure(tableName, historyMapping, index.map(Index::getSettings).orElseGet(HashMap::new));\n-                exist = structures.containsMapping(tableName, createMapping(model))\n-                    && structures.compareIndexSetting(tableName, createSetting(model));\n+                boolean containsMapping = structures.containsMapping(tableName, createMapping(model));\n+                // Do not check index settings in the \"no-init mode\",\n+                // because the no-init mode OAP server doesn't take responsibility for index settings.\n+                if (RunningMode.isNoInitMode()) {\n+                    exist = containsMapping;\n+                } else {\n+                    exist = containsMapping && structures.compareIndexSetting(tableName, createSetting(model));\n+                }\n             }\n             return exist;\n         }\n@@ -104,8 +111,14 @@ public boolean isExists(Model model) throws StorageException {\n             structures.putStructure(\n                 tableName, template.get().getMappings(), template.get().getSettings()\n             );\n-            exist = structures.containsMapping(tableName, createMapping(model))\n-                && structures.compareIndexSetting(tableName, createSetting(model));\n+            boolean containsMapping = structures.containsMapping(tableName, createMapping(model));\n+            // Do not check index settings in the \"no-init mode\",\n+            // because the no-init mode OAP server doesn't take responsibility for index settings.\n+            if (RunningMode.isNoInitMode()) {\n+                exist = containsMapping;\n+            } else {\n+                exist = containsMapping && structures.compareIndexSetting(tableName, createSetting(model));\n+            }\n         }\n         return exist;\n     }",
      "parent_sha": "d3d756bf4ad89e60cc5730ff3d6959a3a51b95e3"
    }
  },
  {
    "oid": "74c1f7ef73d6fafa24107ae8f9433f8e4c53c6ac",
    "message": "ehcache-2.x-scenario add EhcacheCloneInterceptor case",
    "date": "2020-02-18T05:07:16Z",
    "url": "https://github.com/apache/skywalking/commit/74c1f7ef73d6fafa24107ae8f9433f8e4c53c6ac",
    "details": {
      "sha": "0d0a78dbda833cf57bea3af68e0880f14993423e",
      "filename": "test/plugin/scenarios/ehcache-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/ehcache/v2/CaseServlet.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/apache/skywalking/blob/74c1f7ef73d6fafa24107ae8f9433f8e4c53c6ac/test%2Fplugin%2Fscenarios%2Fehcache-2.x-scenario%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Ftestcase%2Fehcache%2Fv2%2FCaseServlet.java",
      "raw_url": "https://github.com/apache/skywalking/raw/74c1f7ef73d6fafa24107ae8f9433f8e4c53c6ac/test%2Fplugin%2Fscenarios%2Fehcache-2.x-scenario%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Ftestcase%2Fehcache%2Fv2%2FCaseServlet.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/test%2Fplugin%2Fscenarios%2Fehcache-2.x-scenario%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Ftestcase%2Fehcache%2Fv2%2FCaseServlet.java?ref=74c1f7ef73d6fafa24107ae8f9433f8e4c53c6ac",
      "patch": "@@ -35,7 +35,14 @@ public class CaseServlet extends HttpServlet {\n \n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        Cache cache = cacheManager.getCache(\"testCache\");\n+        Cache originCache = cacheManager.getCache(\"testCache\");\n+\n+        // EhcacheCloneInterceptor\n+        Cache cache = null;\n+        try {\n+            cache = originCache.clone();\n+        } catch (CloneNotSupportedException e) {\n+        }\n \n         String objectKey = \"dataKey\";\n ",
      "parent_sha": "54c1cd5cb04f012ff48c8b87c11df11041e3f499"
    }
  },
  {
    "oid": "306652bc7d830e7e3c02627d6e29ea8f67e4ad76",
    "message": "1. \u4fee\u590d\u7f16\u8bd1\u95ee\u9898",
    "date": "2016-08-04T05:33:25Z",
    "url": "https://github.com/apache/skywalking/commit/306652bc7d830e7e3c02627d6e29ea8f67e4ad76",
    "details": {
      "sha": "22099323434071c659698dc16a52fe6e8b2b6105",
      "filename": "skywalking-collector/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/com/ai/cloud/skywalking/plugin/tomcat78x/TomcatPluginInterceptor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/apache/skywalking/blob/306652bc7d830e7e3c02627d6e29ea8f67e4ad76/skywalking-collector%2Fskywalking-sdk-plugin%2Ftomcat-7.x-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Ftomcat78x%2FTomcatPluginInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/306652bc7d830e7e3c02627d6e29ea8f67e4ad76/skywalking-collector%2Fskywalking-sdk-plugin%2Ftomcat-7.x-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Ftomcat78x%2FTomcatPluginInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/skywalking-collector%2Fskywalking-sdk-plugin%2Ftomcat-7.x-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Fai%2Fcloud%2Fskywalking%2Fplugin%2Ftomcat78x%2FTomcatPluginInterceptor.java?ref=306652bc7d830e7e3c02627d6e29ea8f67e4ad76",
      "patch": "@@ -67,7 +67,9 @@ public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodIn\n     }\n \n     @Override\n-    public void handleMethodException(Throwable t, EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext, Object ret) {\n-        // DO Nothing\n+    public void handleMethodException(Throwable t, EnhancedClassInstanceContext context,\n+            InstanceMethodInvokeContext interceptorContext) {\n+        new RPCServerInvokeMonitor().occurException(t);\n     }\n+\n }",
      "parent_sha": "5b451c8d1b8128de4264a40f95a3c1615afb2228"
    }
  },
  {
    "oid": "c3cc3d2e56cab510a270f2292dc79f20ed7acee9",
    "message": "Fix clr receiver (#2456)",
    "date": "2019-04-07T15:25:08Z",
    "url": "https://github.com/apache/skywalking/commit/c3cc3d2e56cab510a270f2292dc79f20ed7acee9",
    "details": {
      "sha": "ec42cd822ad117a72cd5a0d95b62cd04f9f1f6d4",
      "filename": "oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRSourceDispatcher.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/c3cc3d2e56cab510a270f2292dc79f20ed7acee9/oap-server%2Fserver-receiver-plugin%2Fskywalking-clr-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fclr%2Fprovider%2Fhandler%2FCLRSourceDispatcher.java",
      "raw_url": "https://github.com/apache/skywalking/raw/c3cc3d2e56cab510a270f2292dc79f20ed7acee9/oap-server%2Fserver-receiver-plugin%2Fskywalking-clr-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fclr%2Fprovider%2Fhandler%2FCLRSourceDispatcher.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-receiver-plugin%2Fskywalking-clr-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fclr%2Fprovider%2Fhandler%2FCLRSourceDispatcher.java?ref=c3cc3d2e56cab510a270f2292dc79f20ed7acee9",
      "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.receiver.clr.provider.handler;\n \n+import java.util.Objects;\n import org.apache.skywalking.apm.network.common.CPU;\n import org.apache.skywalking.apm.network.language.agent.CLRMetric;\n import org.apache.skywalking.apm.network.language.agent.ClrGC;\n@@ -51,7 +52,7 @@ public CLRSourceDispatcher(ModuleManager moduleManager) {\n     void sendMetric(int serviceInstanceId, long minuteTimeBucket, CLRMetric metric) {\n         ServiceInstanceInventory serviceInstanceInventory = instanceInventoryCache.get(serviceInstanceId);\n         int serviceId;\n-        if (serviceInstanceInventory == null) {\n+        if (Objects.nonNull(serviceInstanceInventory)) {\n             serviceId = serviceInstanceInventory.getServiceId();\n         } else {\n             logger.warn(\"Can't found service by service instance id from cache, service instance id is: {}\", serviceInstanceId);",
      "parent_sha": "8dbd19f329c6d387f606165ad0a9da7c9acff031"
    }
  },
  {
    "oid": "5cf1d122cca670f1c6751f8acfdd26ec05922d40",
    "message": "Fix webflux sharing span across multiple threads (#5177)",
    "date": "2020-07-27T04:44:17Z",
    "url": "https://github.com/apache/skywalking/commit/5cf1d122cca670f1c6751f8acfdd26ec05922d40",
    "details": {
      "sha": "0053f0d819bb0bc6689c1fb450098daad466ca86",
      "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/spring-webflux-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/DispatcherHandlerHandleMethodInterceptor.java",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/apache/skywalking/blob/5cf1d122cca670f1c6751f8acfdd26ec05922d40/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fspring-webflux-5.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fwebflux%2Fv5%2FDispatcherHandlerHandleMethodInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/5cf1d122cca670f1c6751f8acfdd26ec05922d40/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fspring-webflux-5.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fwebflux%2Fv5%2FDispatcherHandlerHandleMethodInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fspring-webflux-5.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fwebflux%2Fv5%2FDispatcherHandlerHandleMethodInterceptor.java?ref=5cf1d122cca670f1c6751f8acfdd26ec05922d40",
      "patch": "@@ -69,34 +69,34 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         span.prepareForAsync();\n         ContextManager.stopSpan(span);\n \n-        objInst.setSkyWalkingDynamicField(span);\n+        exchange.getAttributes().put(\"SKYWALING_SPAN\", span);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n                               Object ret) throws Throwable {\n         ServerWebExchange exchange = (ServerWebExchange) allArguments[0];\n-        AbstractSpan span = (AbstractSpan) objInst.getSkyWalkingDynamicField();\n-\n         return ((Mono) ret).doFinally(s -> {\n-            try {\n-                Object pathPattern = exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n-                if (pathPattern != null) {\n-                    span.setOperationName(((PathPattern) pathPattern).getPatternString());\n-                }\n-                HttpStatus httpStatus = exchange.getResponse().getStatusCode();\n-                // fix webflux-2.0.0-2.1.0 version have bug. httpStatus is null. not support\n-                if (httpStatus != null) {\n-                    Tags.STATUS_CODE.set(span, Integer.toString(httpStatus.value()));\n-                    if (httpStatus.isError()) {\n-                        span.errorOccurred();\n+            AbstractSpan span = (AbstractSpan) exchange.getAttributes().get(\"SKYWALING_SPAN\");\n+            if (span != null) {\n+                try {\n+                    Object pathPattern = exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n+                    if (pathPattern != null) {\n+                        span.setOperationName(((PathPattern) pathPattern).getPatternString());\n                     }\n+                    HttpStatus httpStatus = exchange.getResponse().getStatusCode();\n+                    // fix webflux-2.0.0-2.1.0 version have bug. httpStatus is null. not support\n+                    if (httpStatus != null) {\n+                        Tags.STATUS_CODE.set(span, Integer.toString(httpStatus.value()));\n+                        if (httpStatus.isError()) {\n+                            span.errorOccurred();\n+                        }\n+                    }\n+                } finally {\n+                    span.asyncFinish();\n                 }\n-            } finally {\n-                span.asyncFinish();\n             }\n         });\n-\n     }\n \n     @Override",
      "parent_sha": "a49ce988b49fcb4ea50e3e55e05f437789fce4f4"
    }
  },
  {
    "oid": "8a8df3550eb1edd0c29b13018cac111a4c1faf42",
    "message": "fix Classcanbestatic (#5597)\n\nInner class is non-static but does not reference enclosing class\r\n\r\nref: https://errorprone.info/bugpattern/ClassCanBeStatic\r\n\r\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>",
    "date": "2020-10-01T00:18:00Z",
    "url": "https://github.com/apache/skywalking/commit/8a8df3550eb1edd0c29b13018cac111a4c1faf42",
    "details": {
      "sha": "d9d2436819d605060787788ce30cd20bf52c9bf4",
      "filename": "apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/8a8df3550eb1edd0c29b13018cac111a4c1faf42/apm-commons%2Fapm-datacarrier%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcommons%2Fdatacarrier%2Fconsumer%2FMultipleChannelsConsumer.java",
      "raw_url": "https://github.com/apache/skywalking/raw/8a8df3550eb1edd0c29b13018cac111a4c1faf42/apm-commons%2Fapm-datacarrier%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcommons%2Fdatacarrier%2Fconsumer%2FMultipleChannelsConsumer.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-commons%2Fapm-datacarrier%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcommons%2Fdatacarrier%2Fconsumer%2FMultipleChannelsConsumer.java?ref=8a8df3550eb1edd0c29b13018cac111a4c1faf42",
      "patch": "@@ -110,8 +110,8 @@ void shutdown() {\n         running = false;\n     }\n \n-    private class Group {\n-        private Channels channels;\n+    private static class Group {\n+        private  Channels channels;\n         private IConsumer consumer;\n \n         public Group(Channels channels, IConsumer consumer) {",
      "parent_sha": "7d5d8b43359919be2dcfb881fb007b34522ff68e"
    }
  },
  {
    "oid": "16d7782a5cf38678240ccef2c04b8b9ae75ed65a",
    "message": "Remove client side endpoint register of service mesh (#4054)",
    "date": "2019-12-13T08:11:33Z",
    "url": "https://github.com/apache/skywalking/commit/16d7782a5cf38678240ccef2c04b8b9ae75ed65a",
    "details": {
      "sha": "e00124f6c815e649d31a108946219fdd2559a561",
      "filename": "oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/ServiceMeshMetricDataDecorator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 11,
      "changes": 13,
      "blob_url": "https://github.com/apache/skywalking/blob/16d7782a5cf38678240ccef2c04b8b9ae75ed65a/oap-server%2Fserver-receiver-plugin%2Fskywalking-mesh-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Faop%2Fserver%2Freceiver%2Fmesh%2FServiceMeshMetricDataDecorator.java",
      "raw_url": "https://github.com/apache/skywalking/raw/16d7782a5cf38678240ccef2c04b8b9ae75ed65a/oap-server%2Fserver-receiver-plugin%2Fskywalking-mesh-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Faop%2Fserver%2Freceiver%2Fmesh%2FServiceMeshMetricDataDecorator.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-receiver-plugin%2Fskywalking-mesh-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Faop%2Fserver%2Freceiver%2Fmesh%2FServiceMeshMetricDataDecorator.java?ref=16d7782a5cf38678240ccef2c04b8b9ae75ed65a",
      "patch": "@@ -95,24 +95,15 @@ boolean tryMetaDataRegister() {\n         }\n         String endpoint = origin.getEndpoint();\n \n+        // Service mesh doesn't register client side endpoint.\n         DetectPoint point = origin.getDetectPoint();\n-        if (DetectPoint.client.equals(point)) {\n-            if (sourceServiceId != Const.NONE) {\n-                endpointId = CoreRegisterLinker.getEndpointInventoryRegister().getOrCreate(sourceServiceId, endpoint,\n-                    org.apache.skywalking.oap.server.core.source.DetectPoint.fromNetworkProtocolDetectPoint(point));\n-            }\n-        } else {\n+        if (DetectPoint.server.equals(point)) {\n             if (destServiceId != Const.NONE) {\n                 endpointId = CoreRegisterLinker.getEndpointInventoryRegister().getOrCreate(destServiceId, endpoint,\n                     org.apache.skywalking.oap.server.core.source.DetectPoint.fromNetworkProtocolDetectPoint(point));\n             }\n         }\n \n-        if (endpointId != Const.NONE) {\n-        } else {\n-            isRegistered = false;\n-        }\n-\n         return isRegistered;\n     }\n ",
      "parent_sha": "daabc1f5b6d7cdb9c1bbe1b420b702ab4ff65ab4"
    }
  },
  {
    "oid": "93347b234084ed02c0918c7eca401535c1f27c42",
    "message": "Envoy heartbeat update bug (#2334)",
    "date": "2019-03-08T09:41:26Z",
    "url": "https://github.com/apache/skywalking/commit/93347b234084ed02c0918c7eca401535c1f27c42",
    "details": {
      "sha": "9f9c82eb30b2f799866ee39ad9d3aad07e57aaee",
      "filename": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/MetricServiceGRPCHandler.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/skywalking/blob/93347b234084ed02c0918c7eca401535c1f27c42/oap-server%2Fserver-receiver-plugin%2Fenvoy-metrics-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fenvoy%2FMetricServiceGRPCHandler.java",
      "raw_url": "https://github.com/apache/skywalking/raw/93347b234084ed02c0918c7eca401535c1f27c42/oap-server%2Fserver-receiver-plugin%2Fenvoy-metrics-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fenvoy%2FMetricServiceGRPCHandler.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-receiver-plugin%2Fenvoy-metrics-receiver-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Freceiver%2Fenvoy%2FMetricServiceGRPCHandler.java?ref=93347b234084ed02c0918c7eca401535c1f27c42",
      "patch": "@@ -96,6 +96,7 @@ public StreamObserver<StreamMetricsMessage> streamMetrics(StreamObserver<StreamM\n \n                 if (serviceInstanceId != Const.NONE) {\n                     List<Metrics.MetricFamily> list = message.getEnvoyMetricsList();\n+                    boolean needHeartbeatUpdate = true;\n                     for (int i = 0; i < list.size(); i++) {\n                         counter.inc();\n                         HistogramMetric.Timer timer = histogram.createTimer();\n@@ -123,10 +124,11 @@ public StreamObserver<StreamMetricsMessage> streamMetrics(StreamObserver<StreamM\n                                 default:\n                                     continue;\n                             }\n-                            if (i == 0) {\n+                            if (needHeartbeatUpdate) {\n                                 // Send heartbeat\n                                 serviceInventoryRegister.heartbeat(serviceId, timestamp);\n                                 serviceInstanceInventoryRegister.heartbeat(serviceInstanceId, timestamp);\n+                                needHeartbeatUpdate = false;\n                             }\n                         } finally {\n                             timer.finish();",
      "parent_sha": "c2a7e8e5398b5d3e1168342f4f3caa7e20ba4b32"
    }
  },
  {
    "oid": "b7790c5a87df1880019fd064159e490e6b4a7845",
    "message": "V3 modify revert",
    "date": "2017-11-16T02:48:03Z",
    "url": "https://github.com/apache/skywalking/commit/b7790c5a87df1880019fd064159e490e6b4a7845",
    "details": {
      "sha": "a82f59b4d7b458e6add93dc3791a4f417347800f",
      "filename": "apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/MongoDBMethodInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/apache/skywalking/blob/b7790c5a87df1880019fd064159e490e6b4a7845/apm-sniffer%2Fapm-sdk-plugin%2Fmongodb-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fmongodb%2Fv3%2FMongoDBMethodInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/b7790c5a87df1880019fd064159e490e6b4a7845/apm-sniffer%2Fapm-sdk-plugin%2Fmongodb-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fmongodb%2Fv3%2FMongoDBMethodInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fmongodb-3.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fmongodb%2Fv3%2FMongoDBMethodInterceptor.java?ref=b7790c5a87df1880019fd064159e490e6b4a7845",
      "patch": "@@ -200,15 +200,7 @@ private String limitFilter(String filter) {\n     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n         Cluster cluster = (Cluster)allArguments[0];\n         StringBuilder peers = new StringBuilder();\n-        List<ServerDescription> servers;\n-        try {\n-            cluster.getDescription().getClass().getMethod(\"getServerDescriptions\", null);\n-            servers = cluster.getDescription().getServerDescriptions();\n-\n-        } catch (NoSuchMethodException e) {\n-            servers = cluster.getDescription().getAny();\n-        }\n-        for (ServerDescription description : servers) {\n+        for (ServerDescription description : cluster.getDescription().getServerDescriptions()) {\n             ServerAddress address = description.getAddress();\n             peers.append(address.getHost() + \":\" + address.getPort() + \";\");\n         }",
      "parent_sha": "ab36a1bb830c19a8398460deb03d233b8f183d83"
    }
  },
  {
    "oid": "a5d261039278019b6d288d72a760ba3beda7444a",
    "message": "Fix #1488: Fix NPE when the targetAop class is null (#1507)",
    "date": "2018-07-31T14:36:40Z",
    "url": "https://github.com/apache/skywalking/commit/a5d261039278019b6d288d72a760ba3beda7444a",
    "details": {
      "sha": "5c99a886904ef3eae8d455c155c42390186dc71a",
      "filename": "apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AopExpressionMatchInterceptor.java",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/apache/skywalking/blob/a5d261039278019b6d288d72a760ba3beda7444a/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FAopExpressionMatchInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/a5d261039278019b6d288d72a760ba3beda7444a/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FAopExpressionMatchInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fspring-plugins%2Fcore-patch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fspring%2Fpatch%2FAopExpressionMatchInterceptor.java?ref=a5d261039278019b6d288d72a760ba3beda7444a",
      "patch": "@@ -15,17 +15,15 @@\n  * limitations under the License.\n  */\n \n-\n package org.apache.skywalking.apm.plugin.spring.patch;\n \n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n \n /**\n  * {@link AopExpressionMatchInterceptor} check if the method is match the enhanced method\n@@ -42,30 +40,33 @@ public AopExpressionMatchInterceptor() {\n     }\n \n     @Override\n-    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        MethodInterceptResult result) {\n \n     }\n \n     @Override\n-    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n-        Method targetAopMethod = (Method) allArguments[1];\n-        Class<?> targetAopClass = (Class<?>) allArguments[2];\n-        if (EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Object ret) {\n+        Method targetAopMethod = (Method)allArguments[1];\n+        Class<?> targetAopClass = (Class<?>)allArguments[2];\n+        if (targetAopClass != null && EnhancedInstance.class.isAssignableFrom(targetAopClass) && isEnhancedMethod(targetAopMethod)) {\n             return false;\n         }\n         return ret;\n     }\n \n     @Override\n-    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+        Throwable t) {\n \n     }\n \n     private boolean isEnhancedMethod(Method targetMethod) {\n         for (Method method : methods) {\n             if (method.getName().equals(targetMethod.getName())\n-                    && method.getReturnType().equals(targetMethod.getReturnType())\n-                    && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n+                && method.getReturnType().equals(targetMethod.getReturnType())\n+                && equalParamTypes(method.getParameterTypes(), targetMethod.getParameterTypes())) {\n                 return true;\n             }\n         }",
      "parent_sha": "eed6fa18c88ad14277d17149fea92946e9cb1b40"
    }
  },
  {
    "oid": "b3c7d7296e14e8ed273625ebea8d4a62bb5f8d74",
    "message": "Fix only envoy related classes are generated after setting SW_OAL_ENGINE_DEBUG=Y (#5021)",
    "date": "2020-07-03T07:40:52Z",
    "url": "https://github.com/apache/skywalking/commit/b3c7d7296e14e8ed273625ebea8d4a62bb5f8d74",
    "details": {
      "sha": "6175f81b92792d9ac83a40f3ffd8da7bcd16536a",
      "filename": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/skywalking/blob/b3c7d7296e14e8ed273625ebea8d4a62bb5f8d74/oap-server%2Foal-rt%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foal%2Frt%2FOALRuntime.java",
      "raw_url": "https://github.com/apache/skywalking/raw/b3c7d7296e14e8ed273625ebea8d4a62bb5f8d74/oap-server%2Foal-rt%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foal%2Frt%2FOALRuntime.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Foal-rt%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foal%2Frt%2FOALRuntime.java?ref=b3c7d7296e14e8ed273625ebea8d4a62bb5f8d74",
      "patch": "@@ -99,6 +99,7 @@ public class OALRuntime implements OALEngine {\n         \"data2Map\",\n         \"map2Data\"\n     };\n+    private static boolean IS_RT_TEMP_FOLDER_INIT_COMPLETED = false;\n \n     private final OALDefine oalDefine;\n     private final ClassPool classPool;\n@@ -135,7 +136,10 @@ public void setDispatcherListener(DispatcherDetectorListener listener) throws Mo\n \n     @Override\n     public void start(ClassLoader currentClassLoader) throws ModuleStartException, OALCompileException {\n-        prepareRTTempFolder();\n+        if (!IS_RT_TEMP_FOLDER_INIT_COMPLETED) {\n+            prepareRTTempFolder();\n+            IS_RT_TEMP_FOLDER_INIT_COMPLETED = true;\n+        }\n \n         this.currentClassLoader = currentClassLoader;\n         Reader read;",
      "parent_sha": "39f2cd3a5f80b28378d93f9424da435253a6c0a6"
    }
  },
  {
    "oid": "187ebe056aaa4ea43f7d7dd21f254a8b34246271",
    "message": "Modify postgresql-8.x-plugin CreateStatementInterceptor.java statementName from CallableStatement to Statement",
    "date": "2019-04-09T14:50:57Z",
    "url": "https://github.com/apache/skywalking/commit/187ebe056aaa4ea43f7d7dd21f254a8b34246271",
    "details": {
      "sha": "678e2b0d3e844e508af2542950fadaae8ef8babe",
      "filename": "apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/CreateStatementInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/187ebe056aaa4ea43f7d7dd21f254a8b34246271/apm-sniffer%2Fapm-sdk-plugin%2Fpostgresql-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fjdbc%2Fpostgresql%2FCreateStatementInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/187ebe056aaa4ea43f7d7dd21f254a8b34246271/apm-sniffer%2Fapm-sdk-plugin%2Fpostgresql-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fjdbc%2Fpostgresql%2FCreateStatementInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fpostgresql-8.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2Fjdbc%2Fpostgresql%2FCreateStatementInterceptor.java?ref=187ebe056aaa4ea43f7d7dd21f254a8b34246271",
      "patch": "@@ -41,7 +41,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n         Object ret) throws Throwable {\n \n         if (ret instanceof EnhancedInstance) {\n-            ((EnhancedInstance)ret).setSkyWalkingDynamicField(new StatementEnhanceInfos((ConnectionInfo)objInst.getSkyWalkingDynamicField(), \"\", \"CallableStatement\"));\n+            ((EnhancedInstance)ret).setSkyWalkingDynamicField(new StatementEnhanceInfos((ConnectionInfo)objInst.getSkyWalkingDynamicField(), \"\", \"Statement\"));\n         }\n \n         return ret;",
      "parent_sha": "733d5cf6c5a932b8f201388f09db51d752b16e7d"
    }
  },
  {
    "oid": "83e0e5758fc5ce0db5f9d7d18cbbb7ce82142762",
    "message": "Make compare right. (#1899)",
    "date": "2018-11-09T14:23:50Z",
    "url": "https://github.com/apache/skywalking/commit/83e0e5758fc5ce0db5f9d7d18cbbb7ce82142762",
    "details": {
      "sha": "7b0d48f0fe658a322fd504db88fbaa76eee6e3b5",
      "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cluster/RemoteInstance.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/83e0e5758fc5ce0db5f9d7d18cbbb7ce82142762/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fcluster%2FRemoteInstance.java",
      "raw_url": "https://github.com/apache/skywalking/raw/83e0e5758fc5ce0db5f9d7d18cbbb7ce82142762/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fcluster%2FRemoteInstance.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fcluster%2FRemoteInstance.java?ref=83e0e5758fc5ce0db5f9d7d18cbbb7ce82142762",
      "patch": "@@ -37,7 +37,7 @@ public RemoteInstance(String host, int port, boolean isSelf) {\n     }\n \n     @Override public int compareTo(RemoteInstance o) {\n-        return toString().compareTo(toString());\n+        return toString().compareTo(o.toString());\n     }\n \n     @Override public String toString() {",
      "parent_sha": "513c1b86c6d86b981bf9e5c09c0d041d6c2d624e"
    }
  },
  {
    "oid": "6723f349c144b79ac7c8d291a82d62e84f84ed4d",
    "message": "Fix NoSuchElement exception for lazy injection. (#4488)",
    "date": "2020-03-11T08:50:34Z",
    "url": "https://github.com/apache/skywalking/commit/6723f349c144b79ac7c8d291a82d62e84f84ed4d",
    "details": {
      "sha": "19538ee4d3c7569e20405c98247c1b30f0eef2ba",
      "filename": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/apache/skywalking/blob/6723f349c144b79ac7c8d291a82d62e84f84ed4d/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java",
      "raw_url": "https://github.com/apache/skywalking/raw/6723f349c144b79ac7c8d291a82d62e84f84ed4d/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-agent-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fagent%2Fcore%2Fcontext%2FTracingContext.java?ref=6723f349c144b79ac7c8d291a82d62e84f84ed4d",
      "patch": "@@ -79,6 +79,12 @@ public class TracingContext implements AbstractTracerContext {\n      * LinkedList#getLast()} instead of {@link #pop()}, {@link #push(AbstractSpan)}, {@link #peek()}\n      */\n     private LinkedList<AbstractSpan> activeSpanStack = new LinkedList<>();\n+    /**\n+     * @since 7.0.0 SkyWalking support lazy injection through {@link ExitTypeSpan#inject(ContextCarrier)}. Due to that,\n+     * the {@link #activeSpanStack} could be blank by then, this is a pointer forever to the first span, even the main\n+     * thread tracing has been finished.\n+     */\n+    private AbstractSpan firstSpan = null;\n \n     /**\n      * A counter for the next span.\n@@ -636,6 +642,9 @@ private AbstractSpan pop() {\n      * @param span the {@code span} to push\n      */\n     private AbstractSpan push(AbstractSpan span) {\n+        if (firstSpan == null) {\n+            firstSpan = span;\n+        }\n         activeSpanStack.addLast(span);\n         return span;\n     }\n@@ -651,7 +660,7 @@ private AbstractSpan peek() {\n     }\n \n     private AbstractSpan first() {\n-        return activeSpanStack.getFirst();\n+        return firstSpan;\n     }\n \n     private boolean isLimitMechanismWorking() {",
      "parent_sha": "6ea3a933a229162e6f99945324c05b1532f54794"
    }
  },
  {
    "oid": "e7288bff94e7ccb3da6b0dc3dbfcaf03ba98e744",
    "message": "Fix error format of time in serviceTraffic update. (#5221)",
    "date": "2020-08-03T02:38:11Z",
    "url": "https://github.com/apache/skywalking/commit/e7288bff94e7ccb3da6b0dc3dbfcaf03ba98e744",
    "details": {
      "sha": "366b80253768489b001ea2ff657e720e15a8afb2",
      "filename": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/metric/promethues/PrometheusMetricConverter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/e7288bff94e7ccb3da6b0dc3dbfcaf03ba98e744/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fmetric%2Fpromethues%2FPrometheusMetricConverter.java",
      "raw_url": "https://github.com/apache/skywalking/raw/e7288bff94e7ccb3da6b0dc3dbfcaf03ba98e744/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fmetric%2Fpromethues%2FPrometheusMetricConverter.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/oap-server%2Fserver-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Foap%2Fserver%2Fcore%2Fmetric%2Fpromethues%2FPrometheusMetricConverter.java?ref=e7288bff94e7ccb3da6b0dc3dbfcaf03ba98e744",
      "patch": "@@ -269,7 +269,7 @@ private void generateTraffic(MeterEntity entity) {\n             instanceTraffic.setName(entity.getInstanceName());\n             instanceTraffic.setServiceId(entity.serviceId());\n             instanceTraffic.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\n-            instanceTraffic.setLastPingTimestamp(System.currentTimeMillis());\n+            instanceTraffic.setLastPingTimestamp(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\n             MetricsStreamProcessor.getInstance().in(instanceTraffic);\n         }\n         if (!Strings.isNullOrEmpty(entity.getEndpointName())) {",
      "parent_sha": "0146aa522f0c5fe6683e07a4efdd789628102378"
    }
  },
  {
    "oid": "b8206b8cecd787891f1ace550ecd9550d7bec1bf",
    "message": "[Agent] Apache http client plugin bug (#1448)\n\n* #1447\r\n\r\nFixed the after method interceptor for the apache http client NPE error when the response is null cause by the doExecute method throw a exception.",
    "date": "2018-07-13T05:02:59Z",
    "url": "https://github.com/apache/skywalking/commit/b8206b8cecd787891f1ace550ecd9550d7bec1bf",
    "details": {
      "sha": "5d2cf2908385e48480b964e87fc337008267d810",
      "filename": "apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java",
      "status": "modified",
      "additions": 17,
      "deletions": 23,
      "changes": 40,
      "blob_url": "https://github.com/apache/skywalking/blob/b8206b8cecd787891f1ace550ecd9550d7bec1bf/apm-sniffer%2Fapm-sdk-plugin%2FhttpClient-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2FhttpClient%2Fv4%2FHttpClientExecuteInterceptor.java",
      "raw_url": "https://github.com/apache/skywalking/raw/b8206b8cecd787891f1ace550ecd9550d7bec1bf/apm-sniffer%2Fapm-sdk-plugin%2FhttpClient-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2FhttpClient%2Fv4%2FHttpClientExecuteInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2FhttpClient-4.x-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fplugin%2FhttpClient%2Fv4%2FHttpClientExecuteInterceptor.java?ref=b8206b8cecd787891f1ace550ecd9550d7bec1bf",
      "patch": "@@ -18,23 +18,14 @@\n \n package org.apache.skywalking.apm.plugin.httpClient.v4;\n \n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpRequest;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.StatusLine;\n-import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n-import org.apache.skywalking.apm.agent.core.context.ContextManager;\n-import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n-import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n-import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n-\n import java.lang.reflect.Method;\n import java.net.URL;\n+import org.apache.http.*;\n+import org.apache.skywalking.apm.agent.core.context.*;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.*;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.*;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n \n@@ -73,16 +64,19 @@ public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterc\n             return ret;\n         }\n \n-        HttpResponse response = (HttpResponse)ret;\n-        StatusLine responseStatusLine = response.getStatusLine();\n-        if (responseStatusLine != null) {\n-            int statusCode = responseStatusLine.getStatusCode();\n-            AbstractSpan span = ContextManager.activeSpan();\n-            if (statusCode >= 400) {\n-                span.errorOccurred();\n-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+        if (ret != null) {\n+            HttpResponse response = (HttpResponse)ret;\n+            StatusLine responseStatusLine = response.getStatusLine();\n+            if (responseStatusLine != null) {\n+                int statusCode = responseStatusLine.getStatusCode();\n+                AbstractSpan span = ContextManager.activeSpan();\n+                if (statusCode >= 400) {\n+                    span.errorOccurred();\n+                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));\n+                }\n             }\n         }\n+        \n         ContextManager.stopSpan();\n         return ret;\n     }",
      "parent_sha": "5299a68e7c7e469b3cfe4d440228d351f12c3860"
    }
  },
  {
    "oid": "c0446f2bc9521736239771c1765ceea04ff5c35e",
    "message": "Don't release auto delete feature, yet, in 3.2.6",
    "date": "2017-12-04T13:12:58Z",
    "url": "https://github.com/apache/skywalking/commit/c0446f2bc9521736239771c1765ceea04ff5c35e",
    "details": {
      "sha": "37fe9c464d3e43880be44d7a4f51b56f9f2ba38a",
      "filename": "apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/skywalking/apm/collector/storage/es/DataTTLKeeperTimer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/skywalking/blob/c0446f2bc9521736239771c1765ceea04ff5c35e/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2FDataTTLKeeperTimer.java",
      "raw_url": "https://github.com/apache/skywalking/raw/c0446f2bc9521736239771c1765ceea04ff5c35e/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2FDataTTLKeeperTimer.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-storage%2Fcollector-storage-es-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fskywalking%2Fapm%2Fcollector%2Fstorage%2Fes%2FDataTTLKeeperTimer.java?ref=c0446f2bc9521736239771c1765ceea04ff5c35e",
      "patch": "@@ -55,7 +55,8 @@ public DataTTLKeeperTimer(ModuleManager moduleManager,\n     }\n \n     public void start() {\n-        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(this::delete, 1, 8, TimeUnit.HOURS);\n+        //TODO: Don't release auto delete feature, yet\n+        //Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(this::delete, 1, 8, TimeUnit.HOURS);\n     }\n \n     private void delete() {",
      "parent_sha": "8bc03bddb9a516633dca9d982c99a285750841fe"
    }
  },
  {
    "oid": "700258994f561963edc5c0d5a285d0f8f64bf1e0",
    "message": "Fix test case.",
    "date": "2017-10-17T02:57:19Z",
    "url": "https://github.com/apache/skywalking/commit/700258994f561963edc5c0d5a285d0f8f64bf1e0",
    "details": {
      "sha": "d7cbdd8620d1a33b27c0765ba169b06344109a6a",
      "filename": "apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/test/java/org/skywalking/apm/plugin/spymemcached/v2/MemcachedMethodInterceptorTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/skywalking/blob/700258994f561963edc5c0d5a285d0f8f64bf1e0/apm-sniffer%2Fapm-sdk-plugin%2Fspymemcached-2.x-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fspymemcached%2Fv2%2FMemcachedMethodInterceptorTest.java",
      "raw_url": "https://github.com/apache/skywalking/raw/700258994f561963edc5c0d5a285d0f8f64bf1e0/apm-sniffer%2Fapm-sdk-plugin%2Fspymemcached-2.x-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fspymemcached%2Fv2%2FMemcachedMethodInterceptorTest.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-sniffer%2Fapm-sdk-plugin%2Fspymemcached-2.x-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fskywalking%2Fapm%2Fplugin%2Fspymemcached%2Fv2%2FMemcachedMethodInterceptorTest.java?ref=700258994f561963edc5c0d5a285d0f8f64bf1e0",
      "patch": "@@ -112,7 +112,7 @@ private void assertMemcacheSpan(AbstractTracingSpan span) {\n         assertThat(span.isExit(), is(true));\n         assertThat(SpanHelper.getComponentId(span), is(20));\n         List<KeyValuePair> tags = SpanHelper.getTags(span);\n-        assertThat(tags.get(0).getValue(), is(\"Memcache\"));\n+        assertThat(tags.get(0).getValue(), is(\"Memcached\"));\n         assertThat(tags.get(1).getValue(), is(\"set OperationKey\"));\n         assertThat(SpanHelper.getLayer(span), is(SpanLayer.DB));\n     }",
      "parent_sha": "3d324148713a238f9e7c86e25783c7882d87cb69"
    }
  },
  {
    "oid": "43151551ab3aee656b0d72c463c620b33b2216e1",
    "message": "Use DecimalFormat to replace DecimalFormat because of DecimalFormat will add a comma in formatted result when value greater than 1000.",
    "date": "2018-01-04T04:17:57Z",
    "url": "https://github.com/apache/skywalking/commit/43151551ab3aee656b0d72c463c620b33b2216e1",
    "details": {
      "sha": "43d72fd68a543039ec43856b8c46a27842452bc3",
      "filename": "apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/util/NumberFormatUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/apache/skywalking/blob/43151551ab3aee656b0d72c463c620b33b2216e1/apm-collector%2Fapm-collector-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fcore%2Futil%2FNumberFormatUtils.java",
      "raw_url": "https://github.com/apache/skywalking/raw/43151551ab3aee656b0d72c463c620b33b2216e1/apm-collector%2Fapm-collector-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fcore%2Futil%2FNumberFormatUtils.java",
      "contents_url": "https://api.github.com/repos/apache/skywalking/contents/apm-collector%2Fapm-collector-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fskywalking%2Fapm%2Fcollector%2Fcore%2Futil%2FNumberFormatUtils.java?ref=43151551ab3aee656b0d72c463c620b33b2216e1",
      "patch": "@@ -19,18 +19,17 @@\n package org.apache.skywalking.apm.collector.core.util;\n \n import java.math.RoundingMode;\n-import java.text.NumberFormat;\n+import java.text.DecimalFormat;\n \n /**\n  * @author peng-yongsheng\n  */\n public class NumberFormatUtils {\n \n     public static Double rateNumberFormat(Double rate) {\n-        NumberFormat rateNumberFormat = NumberFormat.getNumberInstance();\n-        rateNumberFormat.setMaximumFractionDigits(2);\n-        rateNumberFormat.setRoundingMode(RoundingMode.HALF_UP);\n-        Double formattedRate = Double.valueOf(rateNumberFormat.format(rate));\n+        DecimalFormat decimalFormat = new DecimalFormat(\"#.00\");\n+        decimalFormat.setRoundingMode(RoundingMode.HALF_UP);\n+        Double formattedRate = Double.valueOf(decimalFormat.format(rate));\n         return Double.valueOf(formattedRate);\n     }\n }",
      "parent_sha": "766971837b0adf878ff4c82094e7d585e7ae2463"
    }
  }
]