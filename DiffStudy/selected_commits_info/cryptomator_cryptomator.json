[
  {
    "oid": "f430f3c57975727dd323601a8dca6b10222eec5a",
    "message": "just fixes some warnings in eclipse [ci skip]",
    "date": "2015-10-16T11:24:52Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f430f3c57975727dd323601a8dca6b10222eec5a",
    "details": {
      "sha": "455a58a664c58cdb1f109a83099033f4b1cc7ec8",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/model/Vault.java",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f430f3c57975727dd323601a8dca6b10222eec5a/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f430f3c57975727dd323601a8dca6b10222eec5a/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java?ref=f430f3c57975727dd323601a8dca6b10222eec5a",
      "patch": "@@ -11,11 +11,6 @@\n import java.util.Optional;\n import java.util.Set;\n \n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-\n import javax.security.auth.DestroyFailedException;\n \n import org.apache.commons.lang3.CharUtils;\n@@ -35,6 +30,11 @@\n \n import com.google.common.collect.ImmutableMap;\n \n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+\n public class Vault implements Serializable {\n \n \tprivate static final long serialVersionUID = 3754487289683599469L;\n@@ -114,15 +114,15 @@ public void stopServer() {\n \t\twhitelistedResourcesWithInvalidMac.clear();\n \t\tnamesOfResourcesWithInvalidMac.clear();\n \t}\n-\t\n+\n \tprivate Map<MountParam, Optional<String>> getMountParams() {\n \t\treturn ImmutableMap.of( //\n \t\t\t\tMountParam.MOUNT_NAME, Optional.ofNullable(mountName), //\n \t\t\t\tMountParam.WIN_DRIVE_LETTER, Optional.ofNullable(CharUtils.toString(winDriveLetter)) //\n-\t\t\t\t);\n+\t\t);\n \t}\n \n-\tpublic boolean mount() {\n+\tpublic Boolean mount() {\n \t\tfinal ServletLifeCycleAdapter servlet = webDavServlet.get().orElse(null);\n \t\tif (servlet == null || !servlet.isRunning()) {\n \t\t\treturn false;\n@@ -180,8 +180,6 @@ public void setUnlocked(boolean unlocked) {\n \t\tthis.unlocked.set(unlocked);\n \t}\n \n-\t\n-\n \tpublic ObservableList<String> getNamesOfResourcesWithInvalidMac() {\n \t\treturn namesOfResourcesWithInvalidMac;\n \t}\n@@ -215,7 +213,7 @@ public static String normalize(String string) {\n \t\t}\n \t\treturn builder.toString();\n \t}\n-\t\n+\n \tpublic String getMountName() {\n \t\treturn mountName;\n \t}\n@@ -233,7 +231,7 @@ public void setMountName(String mountName) throws IllegalArgumentException {\n \t\t}\n \t\tthis.mountName = mountName;\n \t}\n-\t\n+\n \tpublic Character getWinDriveLetter() {\n \t\treturn winDriveLetter;\n \t}",
      "parent_sha": "3efa23987ff919e9d3ef3cddd21785ea3ec9c9b9"
    }
  },
  {
    "oid": "3eb44b06aff5c31cbade57a988accb258607310b",
    "message": "Fixes #1061:\n* temp mount point is first tried without any addition\n* then with id Suffix in brackets\n* then with underscores, id suffix and count",
    "date": "2020-11-03T11:50:52Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/3eb44b06aff5c31cbade57a988accb258607310b",
    "details": {
      "sha": "518ba520ba3e93cb7791aae35df162211ed2d49b",
      "filename": "main/commons/src/main/java/org/cryptomator/common/mountpoint/TemporaryMountPointChooser.java",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/3eb44b06aff5c31cbade57a988accb258607310b/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FTemporaryMountPointChooser.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/3eb44b06aff5c31cbade57a988accb258607310b/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FTemporaryMountPointChooser.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FTemporaryMountPointChooser.java?ref=3eb44b06aff5c31cbade57a988accb258607310b",
      "patch": "@@ -47,8 +47,19 @@ public Optional<Path> chooseMountPoint(Volume caller) {\n \n \tprivate Path choose(Path parent) {\n \t\tString basename = this.vaultSettings.displayName().get();\n-\t\tfor (int i = 0; i < MAX_TMPMOUNTPOINT_CREATION_RETRIES; i++) {\n-\t\t\tPath mountPoint = parent.resolve(basename + \"_\" + i);\n+\t\t//regular\n+\t\tPath mountPoint = parent.resolve(basename);\n+\t\tif (Files.notExists(mountPoint)) {\n+\t\t\treturn mountPoint;\n+\t\t}\n+\t\t//with id\n+\t\tmountPoint = parent.resolve(basename + \" (\" +vaultSettings.getId() + \")\");\n+\t\tif (Files.notExists(mountPoint)) {\n+\t\t\treturn mountPoint;\n+\t\t}\n+\t\t//with id and count\n+\t\tfor (int i = 1; i < MAX_TMPMOUNTPOINT_CREATION_RETRIES; i++) {\n+\t\t\tmountPoint = parent.resolve(basename + \"_(\" +vaultSettings.getId() + \")_\"+i);\n \t\t\tif (Files.notExists(mountPoint)) {\n \t\t\t\treturn mountPoint;\n \t\t\t}",
      "parent_sha": "1554437884b0019a5b147c45215a568d9f18f121"
    }
  },
  {
    "oid": "20e7186256d791b692e81b36cadaa3446bcce9c1",
    "message": "correcting wrong mount option",
    "date": "2019-07-04T12:03:14Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/20e7186256d791b692e81b36cadaa3446bcce9c1",
    "details": {
      "sha": "c5de5a224cc44c5e148579c034a6d3bc57fcf6ca",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/model/VaultModule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/20e7186256d791b692e81b36cadaa3446bcce9c1/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVaultModule.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/20e7186256d791b692e81b36cadaa3446bcce9c1/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVaultModule.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVaultModule.java?ref=20e7186256d791b692e81b36cadaa3446bcce9c1",
      "patch": "@@ -121,7 +121,7 @@ private String getDokanyDefaultMountFlags(Settings settings, VaultSettings vault\n \t\tif (vaultSettings.usesReadOnlyMode().get()) {\n \t\t\tflags.append(\",WRITE_PROTECTION\");\n \t\t}\n-\t\tflags.append(\" --threadCount 5\");\n+\t\tflags.append(\" --thread-count 5\");\n \t\tflags.append(\" --timeout 10000\");\n \t\tflags.append(\" --allocation-unit-size 4096\");\n \t\tflags.append(\" --sector-size 4096\");",
      "parent_sha": "66d7621bc9844a7561043a1f693643d0770c8ad6"
    }
  },
  {
    "oid": "d308ee626a211cf034669f24822c866bf33fea80",
    "message": "more descriptive name\n\n[ci skip]",
    "date": "2022-04-05T07:27:44Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/d308ee626a211cf034669f24822c866bf33fea80",
    "details": {
      "sha": "82928f11c34041836815fd085f52cf2a55a1e25b",
      "filename": "src/test/java/org/cryptomator/ui/recoverykey/RecoveryKeyFactoryTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/d308ee626a211cf034669f24822c866bf33fea80/src%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyFactoryTest.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/d308ee626a211cf034669f24822c866bf33fea80/src%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyFactoryTest.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyFactoryTest.java?ref=d308ee626a211cf034669f24822c866bf33fea80",
      "patch": "@@ -78,7 +78,7 @@ public void testValidateValidateRecoveryKeyWithValidKey() {\n \t\tAssertions.assertTrue(result);\n \t}\n \n-\t@ParameterizedTest(name = \"success = {0}\")\n+\t@ParameterizedTest(name = \"passing validation = {0}\")\n \t@DisplayName(\"validateRecoveryKey() with extended validation\")\n \t@ValueSource(booleans = {true, false})\n \tpublic void testValidateValidateRecoveryKeyWithValidKey(boolean extendedValidationResult) {",
      "parent_sha": "d861ef0d22afa23683814fc54fdc703328b11898"
    }
  },
  {
    "oid": "5a3428d9b00b747c261858124e206dcdbc3aed61",
    "message": "cleanup",
    "date": "2016-12-19T16:21:33Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/5a3428d9b00b747c261858124e206dcdbc3aed61",
    "details": {
      "sha": "68a47db921d3b6723e8178d45d22b3c888070b45",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/model/Vault.java",
      "status": "modified",
      "additions": 11,
      "deletions": 29,
      "changes": 40,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/5a3428d9b00b747c261858124e206dcdbc3aed61/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/5a3428d9b00b747c261858124e206dcdbc3aed61/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java?ref=5a3428d9b00b747c261858124e206dcdbc3aed61",
      "patch": "@@ -15,7 +15,6 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Objects;\n-import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n import javax.inject.Inject;\n@@ -39,21 +38,20 @@\n import javafx.beans.binding.Binding;\n import javafx.beans.property.BooleanProperty;\n import javafx.beans.property.SimpleBooleanProperty;\n-import javafx.collections.ObservableList;\n \n @PerVault\n public class Vault {\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(Vault.class);\n+\n+\t@Deprecated\n \tpublic static final String VAULT_FILE_EXTENSION = \".cryptomator\";\n \n \tprivate final VaultSettings vaultSettings;\n \tprivate final WebDavServer server;\n \tprivate final DeferredCloser closer;\n-\n \tprivate final BooleanProperty unlocked = new SimpleBooleanProperty();\n \tprivate final BooleanProperty mounted = new SimpleBooleanProperty();\n-\n \tprivate final AtomicReference<CryptoFileSystem> cryptoFileSystem = new AtomicReference<>();\n \n \t@Inject\n@@ -79,16 +77,16 @@ private CryptoFileSystem createCryptoFileSystem(CharSequence passphrase) throws\n \t}\n \n \tpublic void create(CharSequence passphrase) throws IOException {\n-\t\tgetCryptoFileSystem(passphrase);\n-\t\t// TODO and now?\n+\t\t// TODO overheadhunter/markuskreusch check (via cryptofs) if already existing? if not, just call:\n+\t\tgetCryptoFileSystem(passphrase); // implicitly creates a non-existing vault\n \t}\n \n \tpublic void changePassphrase(CharSequence oldPassphrase, CharSequence newPassphrase) throws IOException, InvalidPassphraseException {\n-\t\t// TODO implement\n+\t\t// TODO overheadhunter/markuskreusch implement in cryptofs\n \t}\n \n \tpublic synchronized void activateFrontend(CharSequence passphrase) {\n-\t\tboolean launchSuccess = false;\n+\t\tboolean unlockSuccess = false;\n \t\tboolean mountSuccess = false;\n \t\ttry {\n \t\t\tFileSystem fs = getCryptoFileSystem(passphrase);\n@@ -101,7 +99,7 @@ public synchronized void activateFrontend(CharSequence passphrase) {\n \t\t} finally {\n \t\t\t// unlocked is a observable property and should only be changed by the FX application thread\n \t\t\tPlatform.runLater(() -> {\n-\t\t\t\tunlocked.set(launchSuccess);\n+\t\t\t\tunlocked.set(unlockSuccess);\n \t\t\t\tmounted.set(mountSuccess);\n \t\t\t});\n \t\t}\n@@ -120,7 +118,7 @@ public synchronized void deactivateFrontend() throws Exception {\n \t}\n \n \tpublic synchronized void reveal() {\n-\t\t// TODO implement\n+\t\t// TODO overheadhunter implement mounting utility in webdav-nio-adapter\n \t}\n \n \t// ******************************************************************************\n@@ -131,7 +129,7 @@ public VaultSettings getVaultSettings() {\n \t\treturn vaultSettings;\n \t}\n \n-\tpublic synchronized String getWebDavUrl() {\n+\tpublic String getWebDavUrl() {\n \t\t// TODO implement\n \t\treturn \"http://localhost/not/implemented\";\n \t}\n@@ -157,7 +155,7 @@ public Binding<String> displayablePath() {\n \t * @return Directory name without preceeding path components and file extension\n \t */\n \tpublic Binding<String> name() {\n-\t\treturn EasyBind.map(vaultSettings.pathProperty(), p -> p.getFileName().toString());\n+\t\treturn EasyBind.map(vaultSettings.pathProperty(), Path::getFileName).map(Path::toString);\n \t}\n \n \tpublic boolean doesVaultDirectoryExist() {\n@@ -166,7 +164,7 @@ public boolean doesVaultDirectoryExist() {\n \n \tpublic boolean isValidVaultDirectory() {\n \t\ttry {\n-\t\t\treturn doesVaultDirectoryExist(); // TODO: && cryptoFileSystemFactory.isValidVaultStructure(getNioFileSystem());\n+\t\t\treturn doesVaultDirectoryExist(); // TODO overheadhunter/markuskreusch: && CryptoFileSystemProvider.isValidVaultStructure(getPath());\n \t\t} catch (UncheckedIOException e) {\n \t\t\treturn false;\n \t\t}\n@@ -188,16 +186,6 @@ public boolean isMounted() {\n \t\treturn mounted.get();\n \t}\n \n-\tpublic ObservableList<String> getNamesOfResourcesWithInvalidMac() {\n-\t\t// TODO overheadhunter implement.\n-\t\treturn null;\n-\t}\n-\n-\tpublic Set<String> getWhitelistedResourcesWithInvalidMac() {\n-\t\t// TODO overheadhunter implement.\n-\t\treturn null;\n-\t}\n-\n \tpublic long pollBytesRead() {\n \t\t// TODO overheadhunter implement.\n \t\treturn 0l;\n@@ -212,12 +200,6 @@ public String getMountName() {\n \t\treturn vaultSettings.getMountName();\n \t}\n \n-\t/**\n-\t * sets the mount name while normalizing it\n-\t * \n-\t * @param mountName\n-\t * @throws IllegalArgumentException if the name is empty after normalization\n-\t */\n \tpublic void setMountName(String mountName) throws IllegalArgumentException {\n \t\tif (StringUtils.isBlank(mountName)) {\n \t\t\tthrow new IllegalArgumentException(\"mount name is empty\");",
      "parent_sha": "ed109977f8974a8f4f1bd031f660e20ffe06c8f6"
    }
  },
  {
    "oid": "f51362e95e1f9bec629afd5911ea5e36e82037ab",
    "message": "cleanup\n[ci skip]",
    "date": "2020-01-06T08:46:14Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f51362e95e1f9bec629afd5911ea5e36e82037ab",
    "details": {
      "sha": "6866e5266049bfa130897ed472f2c06cbc6f6d22",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f51362e95e1f9bec629afd5911ea5e36e82037ab/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FGeneralPreferencesController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f51362e95e1f9bec629afd5911ea5e36e82037ab/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FGeneralPreferencesController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FGeneralPreferencesController.java?ref=f51362e95e1f9bec629afd5911ea5e36e82037ab",
      "patch": "@@ -1,6 +1,7 @@\n package org.cryptomator.ui.preferences;\n \n import javafx.beans.value.ObservableValue;\n+import javafx.fxml.FXML;\n import javafx.geometry.NodeOrientation;\n import javafx.scene.control.CheckBox;\n import javafx.scene.control.ChoiceBox;\n@@ -19,7 +20,7 @@\n \n @PreferencesScoped\n public class GeneralPreferencesController implements FxController {\n-\t\n+\n \tprivate static final Logger LOG = LoggerFactory.getLogger(GeneralPreferencesController.class);\n \n \tprivate final Settings settings;\n@@ -37,6 +38,7 @@ public class GeneralPreferencesController implements FxController {\n \t\tthis.trayMenuSupported = trayMenuSupported;\n \t}\n \n+\t@FXML\n \tpublic void initialize() {\n \t\tthemeChoiceBox.getItems().addAll(UiTheme.values());\n \t\tthemeChoiceBox.valueProperty().bindBidirectional(settings.theme());",
      "parent_sha": "415dfece5845828f0ada217dbfbe176d63c47f64"
    }
  },
  {
    "oid": "2001e768d453ce08ad39efb8a4c6018c89d39672",
    "message": "add trailing slash when WebDAV Url gets copied to the clipboard",
    "date": "2018-01-29T10:23:07Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/2001e768d453ce08ad39efb8a4c6018c89d39672",
    "details": {
      "sha": "c2de0c338694baee5b102f05997ccc479c4764e3",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockedController.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/2001e768d453ce08ad39efb8a4c6018c89d39672/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockedController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/2001e768d453ce08ad39efb8a4c6018c89d39672/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockedController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockedController.java?ref=2001e768d453ce08ad39efb8a4c6018c89d39672",
      "patch": "@@ -61,6 +61,8 @@ public class UnlockedController implements ViewController {\n \tprivate static final int IO_SAMPLING_STEPS = 100;\n \tprivate static final double IO_SAMPLING_INTERVAL = 0.25;\n \n+\tprivate static final String TRAILING_SLASH = \"/\";\n+\n \tprivate final Localization localization;\n \tprivate final AsyncTaskService asyncTaskService;\n \tprivate final ObjectProperty<Vault> vault = new SimpleObjectProperty<>();\n@@ -244,8 +246,8 @@ private void revealVault(Vault vault) {\n \t@FXML\n \tprivate void didClickCopyUrl(ActionEvent event) {\n \t\tClipboardContent clipboardContent = new ClipboardContent();\n-\t\tclipboardContent.putUrl(vault.get().getWebDavUrl());\n-\t\tclipboardContent.putString(vault.get().getWebDavUrl());\n+\t\tclipboardContent.putUrl(vault.get().getWebDavUrl() + TRAILING_SLASH);\n+\t\tclipboardContent.putString(vault.get().getWebDavUrl() + TRAILING_SLASH);\n \t\tClipboard.getSystemClipboard().setContent(clipboardContent);\n \t}\n ",
      "parent_sha": "8e1bb121bb911f567ae68ee7ab5ef7657fea5278"
    }
  },
  {
    "oid": "5180f2061a4f162e0b3633674a4dcf747b46ea47",
    "message": "add series only once (in scene initialization instead of on every tick) - thus fixing IAE",
    "date": "2020-06-10T11:58:02Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/5180f2061a4f162e0b3633674a4dcf747b46ea47",
    "details": {
      "sha": "39060b6e3b1e61e01841ca79d9e065ea44bd75a5",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/vaultstatistics/VaultStatisticsController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/5180f2061a4f162e0b3633674a4dcf747b46ea47/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultstatistics%2FVaultStatisticsController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/5180f2061a4f162e0b3633674a4dcf747b46ea47/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultstatistics%2FVaultStatisticsController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultstatistics%2FVaultStatisticsController.java?ref=5180f2061a4f162e0b3633674a4dcf747b46ea47",
      "patch": "@@ -51,6 +51,7 @@ public VaultStatisticsController(@VaultStatisticsWindow Stage window, ObjectProp\n \t@FXML\n \tpublic void initialize() {\n \t\twindow.setTitle(window.getTitle() + \" - \" + vault.get().getDisplayableName());\n+\t\tlineGraph.getData().addAll(writeData, readData);\n \t}\n \n \tpublic Vault getVault() {\n@@ -64,8 +65,5 @@ private void updateReadWriteData() {\n \t\t}\n \t\treadData.getData().add(new XYChart.Data<Double, Double>((System.currentTimeMillis() - timeAtStartOfTracking) / 1000.0, ((getVault().getStats().bytesPerSecondReadProperty().get()) / 1024.0)));\n \t\twriteData.getData().add(new XYChart.Data<Double, Double>((System.currentTimeMillis() - timeAtStartOfTracking) / 1000.0, ((getVault().getStats().bytesPerSecondWrittenProperty().get()) / 1024.0)));\n-\t\tlineGraph.getData().addAll(writeData, readData);\n-\t\t//TODO\n-\t\t//Exception in thread \"JavaFX Application Thread\" java.lang.IllegalArgumentException: Duplicate series added\n \t}\n }",
      "parent_sha": "05154cf6aa2e0a930a5b97f99da2004977dbcd69"
    }
  },
  {
    "oid": "f61073d1c6158388a7632e0dd4547a26f6e1611a",
    "message": "adding a result to list needs to be done on FX thread",
    "date": "2021-07-08T13:30:36Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f61073d1c6158388a7632e0dd4547a26f6e1611a",
    "details": {
      "sha": "8417c77b56c6c66380a835a317aaf3de38ffe2c1",
      "filename": "src/main/java/org/cryptomator/ui/health/CheckExecutor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f61073d1c6158388a7632e0dd4547a26f6e1611a/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckExecutor.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f61073d1c6158388a7632e0dd4547a26f6e1611a/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckExecutor.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckExecutor.java?ref=f61073d1c6158388a7632e0dd4547a26f6e1611a",
      "patch": "@@ -7,6 +7,7 @@\n import org.cryptomator.cryptolib.api.Masterkey;\n \n import javax.inject.Inject;\n+import javafx.application.Platform;\n import javafx.concurrent.Task;\n import java.nio.file.Path;\n import java.security.SecureRandom;\n@@ -68,7 +69,7 @@ protected Void call() throws Exception {\n \t\t\ttry (var masterkeyClone = masterkey.clone(); //\n \t\t\t\t var cryptor = CryptorProvider.forScheme(vaultConfig.getCipherCombo()).provide(masterkeyClone, csprng)) {\n \t\t\t\tc.getHealthCheck().check(vaultPath, vaultConfig, masterkeyClone, cryptor, diagnosis -> {\n-\t\t\t\t\tc.getResults().add(Result.create(diagnosis));\n+\t\t\t\t\tPlatform.runLater(() -> c.getResults().add(Result.create(diagnosis)));\n \t\t\t\t\tif (highestResultSeverity.compareTo(diagnosis.getSeverity()) < 0) {\n \t\t\t\t\t\thighestResultSeverity = diagnosis.getSeverity();\n \t\t\t\t\t}",
      "parent_sha": "419eb93cb3a09e7cbd4c8e75128dc115cb9263a4"
    }
  },
  {
    "oid": "e82167b5e651f256616f7f2809d9f98017fcbb38",
    "message": "correct wrong method name",
    "date": "2020-11-20T16:29:56Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/e82167b5e651f256616f7f2809d9f98017fcbb38",
    "details": {
      "sha": "e860ee811c1f236da06e94a1d6ec2f8a06aa19fc",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/vaultoptions/GeneralVaultOptionsController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/e82167b5e651f256616f7f2809d9f98017fcbb38/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultoptions%2FGeneralVaultOptionsController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/e82167b5e651f256616f7f2809d9f98017fcbb38/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultoptions%2FGeneralVaultOptionsController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultoptions%2FGeneralVaultOptionsController.java?ref=e82167b5e651f256616f7f2809d9f98017fcbb38",
      "patch": "@@ -39,7 +39,7 @@ public class GeneralVaultOptionsController implements FxController {\n \tpublic void initialize() {\n \t\tvaultName.textProperty().set(vault.getVaultSettings().displayName().get());\n \t\tvaultName.focusedProperty().addListener(this::trimVaultNameOnFocusLoss);\n-\t\tvaultName.setTextFormatter(new TextFormatter<>(this::checkVaultNameLength));\n+\t\tvaultName.setTextFormatter(new TextFormatter<>(this::removeWhitespaces));\n \t\tunlockOnStartupCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().unlockAfterStartup());\n \t\tactionAfterUnlockChoiceBox.getItems().addAll(WhenUnlocked.values());\n \t\tactionAfterUnlockChoiceBox.valueProperty().bindBidirectional(vault.getVaultSettings().actionAfterUnlock());\n@@ -53,7 +53,7 @@ private void trimVaultNameOnFocusLoss(Observable observable, Boolean wasFocussed\n \t\t}\n \t}\n \n-\tprivate TextFormatter.Change checkVaultNameLength(TextFormatter.Change change) {\n+\tprivate TextFormatter.Change removeWhitespaces(TextFormatter.Change change) {\n \t\tif (change.isContentChange() && change.getControlNewText().length() > VAULTNAME_TRUNCATE_THRESHOLD) {\n \t\t\treturn null; // reject any change that would lead to a text exceeding threshold\n \t\t} else {",
      "parent_sha": "dc4fd482b5752d0c32dce4699a62b38ef8578cfb"
    }
  },
  {
    "oid": "e48481323373f879f7f3a556e93c32b95ace2908",
    "message": "Added check for deletion of hideaway",
    "date": "2023-07-07T14:19:16Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/e48481323373f879f7f3a556e93c32b95ace2908",
    "details": {
      "sha": "f203a359fb4a93efc98826e2e496d2d3e7274b5a",
      "filename": "src/main/java/org/cryptomator/common/mount/MountWithinParentUtil.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/e48481323373f879f7f3a556e93c32b95ace2908/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmount%2FMountWithinParentUtil.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/e48481323373f879f7f3a556e93c32b95ace2908/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmount%2FMountWithinParentUtil.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmount%2FMountWithinParentUtil.java?ref=e48481323373f879f7f3a556e93c32b95ace2908",
      "patch": "@@ -72,12 +72,24 @@ static void cleanup(Path mountPoint) {\n \t\tPath hideaway = getHideaway(mountPoint);\n \t\ttry {\n \t\t\twaitForMountpointRestoration(mountPoint);\n+\t\t\tif (Files.notExists(hideaway, LinkOption.NOFOLLOW_LINKS)) {\n+\t\t\t\tLOG.error(\"Unable to restore hidden directory to mountpoint \\\"{}\\\": Directory does not exist. (Deleted by user?)\", mountPoint);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tif (!Files.isDirectory(hideaway, LinkOption.NOFOLLOW_LINKS)) {\n+\t\t\t\tLOG.error(\"Unable to restore hidden directory to mountpoint \\\"{}\\\": Not a directory.\", mountPoint);\n+\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n+\t\t\t\t\tFiles.setAttribute(hideaway, WIN_HIDDEN_ATTR, false);\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\t}\n+\n \t\t\tFiles.move(hideaway, mountPoint);\n \t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n \t\t\t\tFiles.setAttribute(mountPoint, WIN_HIDDEN_ATTR, false);\n \t\t\t}\n \t\t} catch (IOException e) {\n-\t\t\tLOG.error(\"Unable to restore hidden directory to mountpoint {}.\", mountPoint, e);\n+\t\t\tLOG.error(\"Unable to restore hidden directory to mountpoint \\\"{}\\\".\", mountPoint, e);\n \t\t}\n \t}\n ",
      "parent_sha": "c30c90d2c3bd087cad2a19abf758310e13f3e9bc"
    }
  },
  {
    "oid": "2dce7b6f711ae98f0002d0219c3bb97ef90af746",
    "message": "removed drivePath param",
    "date": "2024-10-09T12:50:05Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/2dce7b6f711ae98f0002d0219c3bb97ef90af746",
    "details": {
      "sha": "65c913deea0abc99c77556b290bbcd9c2a9c0db5",
      "filename": "src/main/java/org/cryptomator/common/locationpresets/GoogleDriveMacLocationPresetsProvider.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/2dce7b6f711ae98f0002d0219c3bb97ef90af746/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveMacLocationPresetsProvider.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/2dce7b6f711ae98f0002d0219c3bb97ef90af746/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveMacLocationPresetsProvider.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveMacLocationPresetsProvider.java?ref=2dce7b6f711ae98f0002d0219c3bb97ef90af746",
      "patch": "@@ -69,7 +69,7 @@ public static boolean isRootLocationPresent() {\n \t * @param accountPath The path to the Google Drive account directory (e.g. {@code ~/Library/CloudStorage/GoogleDrive-username})\n \t * @return {@code String}. For example: \"Google Drive - username\"\n \t */\n-\tprivate String getDriveLocationString(Path accountPath, Path drivePath) {\n+\tprivate String getDriveLocationString(Path accountPath) {\n \t\tString accountName = accountPath.getFileName().toString().replace(\"GoogleDrive-\", \"\");\n \t\treturn STR.\"Google Drive - \\{accountName}\";\n \t}\n@@ -110,7 +110,7 @@ private Stream<LocationPreset> getPresetsFromAccountPath(Path accountPath) {\n \t\t\t\t\t.filter(preset -> MY_DRIVE_TRANSLATIONS\n \t\t\t\t\t\t\t.contains(preset.getFileName().toString()))\n \t\t\t\t\t.map(drivePath -> new LocationPreset(\n-\t\t\t\t\t\t\tgetDriveLocationString(accountPath, drivePath),\n+\t\t\t\t\t\t\tgetDriveLocationString(accountPath),\n \t\t\t\t\t\t\tdrivePath\n \t\t\t\t\t));\n \t\t} catch (IOException e) {",
      "parent_sha": "98db82d13738e1f9bc510e9acf4af6ed1b004e38"
    }
  },
  {
    "oid": "b1a3ef9023de69131e4e9bbe1444a30cf72a8973",
    "message": "prevent dealing with unclosed directory streams",
    "date": "2023-05-23T10:35:14Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/b1a3ef9023de69131e4e9bbe1444a30cf72a8973",
    "details": {
      "sha": "ce159a0196cbd65ba151570c774f16bb3bc5b7a5",
      "filename": "src/main/java/org/cryptomator/common/locationpresets/DropboxLinuxLocationPresetsProvider.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/b1a3ef9023de69131e4e9bbe1444a30cf72a8973/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FDropboxLinuxLocationPresetsProvider.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/b1a3ef9023de69131e4e9bbe1444a30cf72a8973/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FDropboxLinuxLocationPresetsProvider.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FDropboxLinuxLocationPresetsProvider.java?ref=b1a3ef9023de69131e4e9bbe1444a30cf72a8973",
      "patch": "@@ -3,12 +3,12 @@\n import org.cryptomator.integrations.common.OperatingSystem;\n \n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.function.Predicate;\n import java.util.regex.Pattern;\n import java.util.stream.Stream;\n-import java.util.stream.StreamSupport;\n \n import static org.cryptomator.integrations.common.OperatingSystem.Value.LINUX;\n \n@@ -20,11 +20,12 @@ public final class DropboxLinuxLocationPresetsProvider implements LocationPreset\n \n \t@Override\n \tpublic Stream<LocationPreset> getLocations() {\n-\t\ttry (var dirStream = Files.newDirectoryStream(USER_HOME, \"Dropbox*\")) {\n-\t\t\treturn StreamSupport.stream(dirStream.spliterator(), false) //\n-\t\t\t\t\t.filter(p -> Files.isDirectory(p) && PATTERN.test(p.getFileName().toString())) //\n-\t\t\t\t\t.map(p -> new LocationPreset(p.getFileName().toString(), p));\n-\t\t} catch (IOException e) {\n+\t\ttry (var dirStream = Files.list(USER_HOME)) {\n+\t\t\tvar presets = dirStream.filter(p -> Files.isDirectory(p) && PATTERN.test(p.getFileName().toString())) //\n+\t\t\t\t\t.map(p -> new LocationPreset(p.getFileName().toString(), p)) //\n+\t\t\t\t\t.toList();\n+\t\t\treturn presets.stream(); //workaround to ensure that the directory stream is always closed\n+\t\t} catch (IOException | UncheckedIOException e) { //UncheckedIOException thrown by the stream of Files.list()\n \t\t\treturn Stream.of();\n \t\t}\n \t}",
      "parent_sha": "32436f779f4aea1f37be59f5b837a36e074173b5"
    }
  },
  {
    "oid": "3696fea3eebef1a35c2e0fb82bc6161ab98eea56",
    "message": "fixed invalid string formatter pattern",
    "date": "2016-01-28T18:07:10Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/3696fea3eebef1a35c2e0fb82bc6161ab98eea56",
    "details": {
      "sha": "f4f4893eda19c8a8b4ef66cb4576aa27f7980c56",
      "filename": "main/frontend-webdav/src/test/java/org/cryptomator/webdav/filters/LoggingHttpFilter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/3696fea3eebef1a35c2e0fb82bc6161ab98eea56/main%2Ffrontend-webdav%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fwebdav%2Ffilters%2FLoggingHttpFilter.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/3696fea3eebef1a35c2e0fb82bc6161ab98eea56/main%2Ffrontend-webdav%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fwebdav%2Ffilters%2FLoggingHttpFilter.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffrontend-webdav%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fwebdav%2Ffilters%2FLoggingHttpFilter.java?ref=3696fea3eebef1a35c2e0fb82bc6161ab98eea56",
      "patch": "@@ -109,8 +109,7 @@ private void logError(HttpServletRequest request, Throwable throwable) {\n \t\tLOG.error(\n \t\t\t\tformat(\"## Request ##\\n\" + //\n \t\t\t\t\t\t\"%s %s %s\\n\" //\n-\t\t\t\t\t\t+ \"%s\\n\" //\n-\t\t\t\t\t\t+ \"%s\\n\\n\", //\n+\t\t\t\t\t\t+ \"%s\\n\", //\n \t\t\t\trequest.getMethod(), request.getRequestURI(), request.getProtocol(), //\n \t\t\t\theaders(request)), //\n \t\t\t\tthrowable);",
      "parent_sha": "bb34f5c17dd06b368f141514b2f8a0ffd9ac8371"
    }
  },
  {
    "oid": "70f6a4877cace7221817b1f44983ed6c82321a5e",
    "message": "Make sure not to catch Errors",
    "date": "2021-01-25T20:38:46Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/70f6a4877cace7221817b1f44983ed6c82321a5e",
    "details": {
      "sha": "e91c5533c6ab65457c33d9fdc3039e5b08af4de8",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java",
      "status": "modified",
      "additions": 5,
      "deletions": 19,
      "changes": 24,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/70f6a4877cace7221817b1f44983ed6c82321a5e/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/70f6a4877cace7221817b1f44983ed6c82321a5e/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java?ref=70f6a4877cace7221817b1f44983ed6c82321a5e",
      "patch": "@@ -165,15 +165,7 @@ private void handleInvalidMountPoint(InvalidMountPointException impExc) {\n \t\tassert requirement != MountPointRequirement.PARENT_OPT_MOUNT_POINT; //Not implemented anywhere (yet)\n \n \t\tThrowable cause = impExc.getCause();\n-\t\t//Cause is either null (cause the IMPE was thrown directly, e.g. because no MPC succeeded)\n-\t\t//or the cause was not an Exception (but some other kind of Throwable)\n-\t\t//Either way: Handle as generic error\n-\t\tif (!(cause instanceof Exception)) {\n-\t\t\thandleGenericError(impExc);\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t//From here on handle the cause, not the caught exception\n+\t\t// TODO: apply https://openjdk.java.net/jeps/8213076 in future JDK versions\n \t\tif (cause instanceof NotDirectoryException) {\n \t\t\tif (requirement == MountPointRequirement.PARENT_NO_MOUNT_POINT) {\n \t\t\t\tLOG.error(\"Unlock failed. Parent folder is missing: {}\", cause.getMessage());\n@@ -182,23 +174,17 @@ private void handleInvalidMountPoint(InvalidMountPointException impExc) {\n \t\t\t}\n \t\t\tshowInvalidMountPointScene();\n \t\t\treturn;\n-\t\t}\n-\n-\t\tif (cause instanceof FileAlreadyExistsException) {\n+\t\t} else if (cause instanceof FileAlreadyExistsException) {\n \t\t\tLOG.error(\"Unlock failed. Mountpoint already exists: {}\", cause.getMessage());\n \t\t\tshowInvalidMountPointScene();\n \t\t\treturn;\n-\t\t}\n-\n-\t\tif (cause instanceof DirectoryNotEmptyException) {\n+\t\t} else if (cause instanceof DirectoryNotEmptyException) {\n \t\t\tLOG.error(\"Unlock failed. Mountpoint not an empty directory: {}\", cause.getMessage());\n \t\t\tshowInvalidMountPointScene();\n \t\t\treturn;\n+\t\t} else {\n+\t\t\thandleGenericError(impExc);\n \t\t}\n-\n-\t\t//Everything else (especially IOException) results in a generic error\n-\t\t//This must be done after the other exceptions because they extend IOException...\n-\t\thandleGenericError(cause);\n \t}\n \n \tprivate void showInvalidMountPointScene() {",
      "parent_sha": "85c5dc8dfb646fced2ddecdb13cb7f6e7793b81d"
    }
  },
  {
    "oid": "a71a23aa310116d95069269697f1af05c097b076",
    "message": "replaced password bullet point with a different char that exists in open sans\n\n[ci skip]",
    "date": "2023-04-18T14:36:27Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/a71a23aa310116d95069269697f1af05c097b076",
    "details": {
      "sha": "40ef6705862ce95e312817f1eb41fe1fdf31feb1",
      "filename": "src/main/java/org/cryptomator/ui/controls/SecurePasswordField.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/a71a23aa310116d95069269697f1af05c097b076/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FSecurePasswordField.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/a71a23aa310116d95069269697f1af05c097b076/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FSecurePasswordField.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FSecurePasswordField.java?ref=a71a23aa310116d95069269697f1af05c097b076",
      "patch": "@@ -43,7 +43,7 @@ public class SecurePasswordField extends TextField {\n \tprivate static final char WIPE_CHAR = ' ';\n \tprivate static final int INITIAL_BUFFER_SIZE = 50;\n \tprivate static final int GROW_BUFFER_SIZE = 50;\n-\tprivate static final String DEFAULT_PLACEHOLDER = \"\u25cf\";\n+\tprivate static final String DEFAULT_PLACEHOLDER = \"\u2022\";\n \tprivate static final String STYLE_CLASS = \"secure-password-field\";\n \tprivate static final KeyCodeCombination SHORTCUT_BACKSPACE = new KeyCodeCombination(KeyCode.BACK_SPACE, KeyCombination.SHORTCUT_DOWN);\n ",
      "parent_sha": "cd0c6fbd3366145ae68d41ee3c8233f6726b1d81"
    }
  },
  {
    "oid": "a81352800d39da29f706118d900a3926fab34e67",
    "message": "removed twoWeeksAgo var",
    "date": "2024-05-08T09:38:23Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/a81352800d39da29f706118d900a3926fab34e67",
    "details": {
      "sha": "d2c10f8fdf5608201fc067727a9b42fd48ab3c19",
      "filename": "src/main/java/org/cryptomator/ui/updatereminder/UpdateReminderComponent.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/a81352800d39da29f706118d900a3926fab34e67/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fupdatereminder%2FUpdateReminderComponent.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/a81352800d39da29f706118d900a3926fab34e67/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fupdatereminder%2FUpdateReminderComponent.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fupdatereminder%2FUpdateReminderComponent.java?ref=a81352800d39da29f706118d900a3926fab34e67",
      "patch": "@@ -25,8 +25,7 @@ public interface UpdateReminderComponent {\n \n \tdefault void checkAndShowUpdateReminderWindow() {\n \t\tvar now = Instant.now();\n-\t\tvar twoWeeksAgo = now.minus(Duration.ofDays(14));\n-\t\tif (!settings().checkForUpdates.getValue() && settings().lastSuccessfulUpdateCheck.get().isBefore(twoWeeksAgo)) {\n+\t\tif (!settings().checkForUpdates.getValue() && settings().lastSuccessfulUpdateCheck.get().isBefore(now.minus(Duration.ofDays(14)))) {\n \t\t\tStage stage = window();\n \t\t\tstage.setScene(updateReminderScene().get());\n \t\t\tstage.sizeToScene();",
      "parent_sha": "6fec16e49815a098dd8f7f8c9714fa22033536bc"
    }
  },
  {
    "oid": "f12168ca94d5b9641c708716cdc9a54be435d675",
    "message": "allow deletion of corrupt directories, whose dir-file exists but physical directory doesn't. related to #181",
    "date": "2016-03-21T14:49:44Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f12168ca94d5b9641c708716cdc9a54be435d675",
    "details": {
      "sha": "c8228535c3bc0b9b868310d7289e893a0304558d",
      "filename": "main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoFolder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f12168ca94d5b9641c708716cdc9a54be435d675/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FCryptoFolder.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f12168ca94d5b9641c708716cdc9a54be435d675/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FCryptoFolder.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FCryptoFolder.java?ref=f12168ca94d5b9641c708716cdc9a54be435d675",
      "patch": "@@ -80,8 +80,8 @@ public Stream<? extends Node> children() {\n \n \t@Override\n \tpublic Stream<CryptoFile> files() {\n-\t\tassert forceGetPhysicalFolder().exists();\n-\t\treturn forceGetPhysicalFolder().files().map(File::name).filter(isEncryptedFileName()).map(this::decryptChildFileName).map(this::file);\n+\t\tfinal Stream<? extends File> files = physicalFolder().filter(Folder::exists).map(Folder::files).orElse(Stream.empty());\n+\t\treturn files.map(File::name).filter(isEncryptedFileName()).map(this::decryptChildFileName).map(this::file);\n \t}\n \n \tprivate Predicate<String> isEncryptedFileName() {\n@@ -104,8 +104,8 @@ public CryptoFile newFile(String name) {\n \n \t@Override\n \tpublic Stream<CryptoFolder> folders() {\n-\t\tassert forceGetPhysicalFolder().exists();\n-\t\treturn forceGetPhysicalFolder().files().map(File::name).filter(isEncryptedDirectoryName()).map(this::decryptChildFolderName).map(this::folder);\n+\t\tfinal Stream<? extends File> files = physicalFolder().filter(Folder::exists).map(Folder::files).orElse(Stream.empty());\n+\t\treturn files.map(File::name).filter(isEncryptedDirectoryName()).map(this::decryptChildFolderName).map(this::folder);\n \t}\n \n \tprivate Predicate<String> isEncryptedDirectoryName() {\n@@ -190,7 +190,7 @@ public void delete() {\n \t\tFolder physicalFolder = forceGetPhysicalFolder();\n \t\tphysicalFolder.delete();\n \t\tFolder physicalFolderParent = physicalFolder.parent().get();\n-\t\tif (physicalFolderParent.folders().count() == 0) {\n+\t\tif (physicalFolderParent.exists() && physicalFolderParent.folders().count() == 0) {\n \t\t\tphysicalFolderParent.delete();\n \t\t}\n \t\tforceGetPhysicalFile().delete();",
      "parent_sha": "d397f59565448d83ace35b3db4f0edf513406311"
    }
  },
  {
    "oid": "5e46236cb2236e73a250d4afe6ed15f9234b04c4",
    "message": "formatting",
    "date": "2019-07-04T11:37:39Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/5e46236cb2236e73a250d4afe6ed15f9234b04c4",
    "details": {
      "sha": "59400d84b0bc1185554ba223bd287b72981bccbd",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/5e46236cb2236e73a250d4afe6ed15f9234b04c4/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/5e46236cb2236e73a250d4afe6ed15f9234b04c4/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockController.java?ref=5e46236cb2236e73a250d4afe6ed15f9234b04c4",
      "patch": "@@ -309,7 +309,7 @@ private void filterAlphanumericKeyEvents(KeyEvent t) {\n \t\t}\n \t}\n \n-\tprivate void mountNameDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends String> property, @SuppressWarnings(\"unused\")String oldValue, String newValue) {\n+\tprivate void mountNameDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends String> property, @SuppressWarnings(\"unused\") String oldValue, String newValue) {\n \t\t// newValue is guaranteed to be a-z0-9_, see #filterAlphanumericKeyEvents\n \t\tif (newValue.isEmpty()) {\n \t\t\tmountName.setText(vault.getMountName());\n@@ -321,22 +321,22 @@ private void mountNameDidChange(@SuppressWarnings(\"unused\") ObservableValue<? ex\n \t\t}\n \t}\n \n-\tprivate void useReadOnlyDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends Boolean> property, @SuppressWarnings(\"unused\")Boolean oldValue, Boolean newValue) {\n+\tprivate void useReadOnlyDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends Boolean> property, @SuppressWarnings(\"unused\") Boolean oldValue, Boolean newValue) {\n \t\tvault.getVaultSettings().usesReadOnlyMode().setValue(newValue);\n \t\tif (!useCustomMountFlags.isSelected()) {\n \t\t\tmountFlags.setText(vault.getMountFlags()); // update default flags\n \t\t}\n \t}\n \n \n-\tprivate void useCustomMountFlagsDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends Boolean> property, @SuppressWarnings(\"unused\")Boolean oldValue, Boolean newValue) {\n+\tprivate void useCustomMountFlagsDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends Boolean> property, @SuppressWarnings(\"unused\") Boolean oldValue, Boolean newValue) {\n \t\tif (!newValue) {\n \t\t\tvault.setMountFlags(VaultSettings.DEFAULT_MOUNT_FLAGS);\n \t\t\tmountFlags.setText(vault.getMountFlags());\n \t\t}\n \t}\n \n-\tprivate void mountFlagsDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends String> property, @SuppressWarnings(\"unused\")String oldValue, String newValue) {\n+\tprivate void mountFlagsDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends String> property, @SuppressWarnings(\"unused\") String oldValue, String newValue) {\n \t\tif (useCustomMountFlags.isSelected()) {\n \t\t\tvault.setMountFlags(newValue);\n \t\t}\n@@ -373,10 +373,10 @@ private class WinDriveLetterLabelConverter extends StringConverter<Path> {\n \t\tpublic String toString(Path root) {\n \t\t\tif (root == null) {\n \t\t\t\treturn localization.getString(\"unlock.choicebox.winDriveLetter.auto\");\n-\t\t\t} else if(root.endsWith(\"occupied\")){\n-\t\t\t\treturn root.getRoot().toString().substring(0,1) +\" (\"+localization.getString(\"unlock.choicebox.winDriveLetter.occupied\") +\")\";\n+\t\t\t} else if (root.endsWith(\"occupied\")) {\n+\t\t\t\treturn root.getRoot().toString().substring(0, 1) + \" (\" + localization.getString(\"unlock.choicebox.winDriveLetter.occupied\") + \")\";\n \t\t\t} else {\n-\t\t\t\treturn root.toString().substring(0,1);\n+\t\t\t\treturn root.toString().substring(0, 1);\n \t\t\t}\n \t\t}\n \n@@ -415,9 +415,9 @@ private void winDriveLetterDidChange(@SuppressWarnings(\"unused\") ObservableValue\n \tprivate void chooseSelectedDriveLetter() {\n \t\tassert SystemUtils.IS_OS_WINDOWS;\n \t\t// if the vault prefers a drive letter, that is currently occupied, this is our last chance to reset this:\n-\t\tif(vault.getWinDriveLetter() != null){\n-\t\t\tfinal Path pickedRoot = Path.of(vault.getWinDriveLetter()+\":\\\\\");\n-\t\t\tif(driveLetters.getOccupiedDriveLetters().contains(pickedRoot)){\n+\t\tif (vault.getWinDriveLetter() != null) {\n+\t\t\tfinal Path pickedRoot = Path.of(vault.getWinDriveLetter() + \":\\\\\");\n+\t\t\tif (driveLetters.getOccupiedDriveLetters().contains(pickedRoot)) {\n \t\t\t\tPath alteredPath = pickedRoot.resolve(\"occupied\");\n \t\t\t\tthis.winDriveLetter.getItems().add(alteredPath);\n \t\t\t\tthis.winDriveLetter.getSelectionModel().select(alteredPath);",
      "parent_sha": "ffb6cc354b06ba0b764eec946b310c2d3c7e646f"
    }
  },
  {
    "oid": "2cf97b5f773eb69c6114ada22d105b4fedbf5440",
    "message": "fixed test on headless ci system",
    "date": "2019-09-11T14:25:50Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/2cf97b5f773eb69c6114ada22d105b4fedbf5440",
    "details": {
      "sha": "12cd6651b866fc0ccfd0ffc338735518f501c219",
      "filename": "main/launcher/src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/2cf97b5f773eb69c6114ada22d105b4fedbf5440/main%2Flauncher%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FFileOpenRequestHandler.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/2cf97b5f773eb69c6114ada22d105b4fedbf5440/main%2Flauncher%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FFileOpenRequestHandler.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Flauncher%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FFileOpenRequestHandler.java?ref=2cf97b5f773eb69c6114ada22d105b4fedbf5440",
      "patch": "@@ -34,7 +34,7 @@ class FileOpenRequestHandler {\n \t@Inject\n \tpublic FileOpenRequestHandler(@Named(\"launchEventQueue\") BlockingQueue<AppLaunchEvent> launchEventQueue) {\n \t\tthis.launchEventQueue = launchEventQueue;\n-\t\tif (Desktop.getDesktop().isSupported(Desktop.Action.APP_OPEN_FILE)) {\n+\t\tif (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.APP_OPEN_FILE)) {\n \t\t\tDesktop.getDesktop().setOpenFileHandler(this::openFiles);\n \t\t}\n \t}",
      "parent_sha": "0d6df6e6c117eb04c0ce29271223f4f00fd3a13a"
    }
  },
  {
    "oid": "959dee153e7fb20be3a34e032815e14070759614",
    "message": "fixing bug where stored password is not used",
    "date": "2020-11-03T09:03:14Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/959dee153e7fb20be3a34e032815e14070759614",
    "details": {
      "sha": "da5e2884d36adfd93127bb6faa325f5584fddd28",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/959dee153e7fb20be3a34e032815e14070759614/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockModule.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/959dee153e7fb20be3a34e032815e14070759614/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockModule.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockModule.java?ref=959dee153e7fb20be3a34e032815e14070759614",
      "patch": "@@ -50,7 +50,7 @@ static UserInteractionLock<PasswordEntry> providePasswordEntryLock() {\n \t@Named(\"savedPassword\")\n \t@UnlockScoped\n \tstatic Optional<char[]> provideStoredPassword(KeychainManager keychain, @UnlockWindow Vault vault) {\n-\t\tif (keychain.isSupported()) {\n+\t\tif (!keychain.isSupported()) {\n \t\t\treturn Optional.empty();\n \t\t} else {\n \t\t\ttry {",
      "parent_sha": "14e056551da33c57e50daee89eb3028a76c4e5df"
    }
  },
  {
    "oid": "6caf132cfb1fdef4759505aba38dd4c50b25fe58",
    "message": "fixes #2512",
    "date": "2022-11-10T17:18:34Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/6caf132cfb1fdef4759505aba38dd4c50b25fe58",
    "details": {
      "sha": "50cbb73e0d7fa92a10f8b179e2eb7b208793afd0",
      "filename": "src/main/java/org/cryptomator/ui/addvaultwizard/ChooseExistingVaultController.java",
      "status": "modified",
      "additions": 77,
      "deletions": 5,
      "changes": 82,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/6caf132cfb1fdef4759505aba38dd4c50b25fe58/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FChooseExistingVaultController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/6caf132cfb1fdef4759505aba38dd4c50b25fe58/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FChooseExistingVaultController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FChooseExistingVaultController.java?ref=6caf132cfb1fdef4759505aba38dd4c50b25fe58",
      "patch": "@@ -2,10 +2,15 @@\n \n import dagger.Lazy;\n import org.apache.commons.lang3.SystemUtils;\n+import org.cryptomator.common.LicenseHolder;\n import org.cryptomator.common.settings.Settings;\n import org.cryptomator.common.settings.UiTheme;\n import org.cryptomator.common.vaults.Vault;\n import org.cryptomator.common.vaults.VaultListManager;\n+import org.cryptomator.integrations.uiappearance.Theme;\n+import org.cryptomator.integrations.uiappearance.UiAppearanceException;\n+import org.cryptomator.integrations.uiappearance.UiAppearanceListener;\n+import org.cryptomator.integrations.uiappearance.UiAppearanceProvider;\n import org.cryptomator.ui.common.FxController;\n import org.cryptomator.ui.common.FxmlFile;\n import org.cryptomator.ui.common.FxmlScene;\n@@ -15,6 +20,8 @@\n \n import javax.inject.Inject;\n import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.value.ObservableValue;\n import javafx.fxml.FXML;\n import javafx.scene.Scene;\n import javafx.scene.image.Image;\n@@ -23,6 +30,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Path;\n+import java.util.Optional;\n import java.util.ResourceBundle;\n \n import static org.cryptomator.common.Constants.CRYPTOMATOR_FILENAME_GLOB;\n@@ -41,11 +49,14 @@ public class ChooseExistingVaultController implements FxController {\n \tprivate final VaultListManager vaultListManager;\n \tprivate final ResourceBundle resourceBundle;\n \tprivate final Settings settings;\n+\tprivate final Optional<UiAppearanceProvider> appearanceProvider;\n+\tprivate final LicenseHolder licenseHolder;\n+\tprivate final UiAppearanceListener systemInterfaceThemeListener = this::systemInterfaceThemeChanged;\n \n-\tprivate Image screenshot;\n+\tprivate final ObjectProperty<Image> screenshot = new SimpleObjectProperty<>();\n \n \t@Inject\n-\tChooseExistingVaultController(@AddVaultWizardWindow Stage window, @FxmlScene(FxmlFile.ADDVAULT_WELCOME) Lazy<Scene> welcomeScene, @FxmlScene(FxmlFile.ADDVAULT_SUCCESS) Lazy<Scene> successScene, FxApplicationWindows appWindows, ObjectProperty<Path> vaultPath, @AddVaultWizardWindow ObjectProperty<Vault> vault, VaultListManager vaultListManager, ResourceBundle resourceBundle, Settings settings) {\n+\tChooseExistingVaultController(@AddVaultWizardWindow Stage window, @FxmlScene(FxmlFile.ADDVAULT_WELCOME) Lazy<Scene> welcomeScene, @FxmlScene(FxmlFile.ADDVAULT_SUCCESS) Lazy<Scene> successScene, FxApplicationWindows appWindows, ObjectProperty<Path> vaultPath, @AddVaultWizardWindow ObjectProperty<Vault> vault, VaultListManager vaultListManager, ResourceBundle resourceBundle, Settings settings, Optional<UiAppearanceProvider> appearanceProvider, LicenseHolder licenseHolder) {\n \t\tthis.window = window;\n \t\tthis.welcomeScene = welcomeScene;\n \t\tthis.successScene = successScene;\n@@ -55,17 +66,73 @@ public class ChooseExistingVaultController implements FxController {\n \t\tthis.vaultListManager = vaultListManager;\n \t\tthis.resourceBundle = resourceBundle;\n \t\tthis.settings = settings;\n+\t\tthis.appearanceProvider = appearanceProvider;\n+\t\tthis.licenseHolder = licenseHolder;\n \t}\n \n \t@FXML\n \tpublic void initialize() {\n \t\tif (SystemUtils.IS_OS_MAC) {\n-\t\t\tthis.screenshot = new Image(getClass().getResource(\"/img/select-masterkey-mac\"+(UiTheme.LIGHT == settings.theme().get()? \"\":\"-dark\")+\".png\").toString());\n+\t\t\tsettings.theme().addListener(this::appThemeChanged);\n+\t\t\tsetSelectedMacScreenshot(settings.theme().get());\n \t\t} else {\n-\t\t\tthis.screenshot = new Image(getClass().getResource(\"/img/select-masterkey-win.png\").toString());\n+\t\t\tthis.screenshot.set(new Image(getClass().getResource(\"/img/select-masterkey-win.png\").toString()));\n \t\t}\n \t}\n \n+\tprivate void appThemeChanged(@SuppressWarnings(\"unused\") ObservableValue<? extends UiTheme> observable, @SuppressWarnings(\"unused\") UiTheme oldValue, UiTheme newValue) {\n+\t\tif (appearanceProvider.isPresent() && oldValue == UiTheme.AUTOMATIC && newValue != UiTheme.AUTOMATIC) {\n+\t\t\ttry {\n+\t\t\t\tappearanceProvider.get().removeListener(systemInterfaceThemeListener);\n+\t\t\t} catch (UiAppearanceException e) {\n+\t\t\t\tLOG.error(\"Failed to disable automatic theme switching.\");\n+\t\t\t}\n+\t\t}\n+\t\tsetSelectedMacScreenshot(newValue);\n+\t}\n+\n+\tprivate void setSelectedMacScreenshot(UiTheme desiredTheme) {\n+\t\tUiTheme theme = licenseHolder.isValidLicense() ? desiredTheme : UiTheme.LIGHT;\n+\t\tswitch (theme) {\n+\t\t\tcase LIGHT -> setLightMacScreenshot();\n+\t\t\tcase DARK -> setDarkMacScreenshot();\n+\t\t\tcase AUTOMATIC -> {\n+\t\t\t\tappearanceProvider.ifPresent(provider -> {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tprovider.addListener(systemInterfaceThemeListener);\n+\t\t\t\t\t} catch (UiAppearanceException e) {\n+\t\t\t\t\t\tLOG.error(\"Failed to enable automatic theme switching.\");\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\tsetSystemMacScreenshot();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void systemInterfaceThemeChanged(Theme theme) {\n+\t\tswitch (theme) {\n+\t\t\tcase LIGHT -> setLightMacScreenshot();\n+\t\t\tcase DARK -> setDarkMacScreenshot();\n+\t\t}\n+\t}\n+\n+\tprivate void setSystemMacScreenshot() {\n+\t\tif (appearanceProvider.isPresent()) {\n+\t\t\tsystemInterfaceThemeChanged(appearanceProvider.get().getSystemTheme());\n+\t\t} else {\n+\t\t\tLOG.warn(\"No UiAppearanceProvider present, assuming LIGHT theme...\");\n+\t\t\tsetLightMacScreenshot();\n+\t\t}\n+\t}\n+\n+\tprivate void setLightMacScreenshot() {\n+\t\tthis.screenshot.set(new Image(getClass().getResource(\"/img/select-masterkey-mac.png\").toString()));\n+\t}\n+\n+\tprivate void setDarkMacScreenshot() {\n+\t\tthis.screenshot.set(new Image(getClass().getResource(\"/img/select-masterkey-mac-dark.png\").toString()));\n+\t}\n+\n \t@FXML\n \tpublic void back() {\n \t\twindow.setScene(welcomeScene.get());\n@@ -92,8 +159,13 @@ public void chooseFileAndNext() {\n \n \t/* Getter */\n \n-\tpublic Image getScreenshot() {\n+\tpublic ObjectProperty<Image> screenshotProperty() {\n \t\treturn screenshot;\n \t}\n \n+\tpublic Image getScreenshot() {\n+\t\treturn screenshot.get();\n+\t}\n+\n+\n }",
      "parent_sha": "fbe33e21fba3cebdfbf8552e712d5198109ea5a1"
    }
  },
  {
    "oid": "744f9db9581338005c9ebe9a9ca162f927b4e032",
    "message": "fixes #52",
    "date": "2015-05-25T14:22:52Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/744f9db9581338005c9ebe9a9ca162f927b4e032",
    "details": {
      "sha": "988d0ebec2c0b653643a64929ebe951b9a5e2cd8",
      "filename": "main/core/src/main/java/org/cryptomator/webdav/jackrabbit/AbstractEncryptedNode.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/744f9db9581338005c9ebe9a9ca162f927b4e032/main%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fwebdav%2Fjackrabbit%2FAbstractEncryptedNode.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/744f9db9581338005c9ebe9a9ca162f927b4e032/main%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fwebdav%2Fjackrabbit%2FAbstractEncryptedNode.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fwebdav%2Fjackrabbit%2FAbstractEncryptedNode.java?ref=744f9db9581338005c9ebe9a9ca162f927b4e032",
      "patch": "@@ -15,6 +15,7 @@\n import java.nio.file.attribute.BasicFileAttributeView;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.FileTime;\n+import java.util.Arrays;\n import java.util.List;\n \n import org.apache.commons.io.FilenameUtils;\n@@ -44,6 +45,8 @@ abstract class AbstractEncryptedNode implements DavResource {\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(AbstractEncryptedNode.class);\n \tprivate static final String DAV_COMPLIANCE_CLASSES = \"1, 2\";\n+\tprivate static final String[] DAV_CREATIONDATE_PROPNAMES = {DavPropertyName.CREATIONDATE.getName(), \"Win32CreationTime\"};\n+\tprivate static final String[] DAV_MODIFIEDDATE_PROPNAMES = {DavPropertyName.GETLASTMODIFIED.getName(), \"Win32LastModifiedTime\"};\n \n \tprotected final CryptoResourceFactory factory;\n \tprotected final DavResourceLocator locator;\n@@ -141,22 +144,23 @@ public DavPropertySet getProperties() {\n \tpublic void setProperty(DavProperty<?> property) throws DavException {\n \t\tgetProperties().add(property);\n \n-\t\tLOG.info(\"Set property {}\", property.getName());\n-\n+\t\tLOG.trace(\"Set property {}\", property.getName());\n+\t\t\n+\t\tfinal String namespacelessPropertyName = property.getName().getName();\n \t\tif (Files.exists(filePath)) {\n \t\t\ttry {\n-\t\t\t\tif (DavPropertyName.CREATIONDATE.equals(property.getName()) && property.getValue() instanceof String) {\n+\t\t\t\tif (Arrays.asList(DAV_CREATIONDATE_PROPNAMES).contains(namespacelessPropertyName) && property.getValue() instanceof String) {\n \t\t\t\t\tfinal String createDateStr = (String) property.getValue();\n \t\t\t\t\tfinal FileTime createTime = FileTimeUtils.fromRfc1123String(createDateStr);\n \t\t\t\t\tfinal BasicFileAttributeView attrView = Files.getFileAttributeView(filePath, BasicFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n \t\t\t\t\tattrView.setTimes(null, null, createTime);\n-\t\t\t\t\tLOG.info(\"Updating Creation Date: {}\", createTime.toString());\n-\t\t\t\t} else if (DavPropertyName.GETLASTMODIFIED.equals(property.getName()) && property.getValue() instanceof String) {\n+\t\t\t\t\tLOG.debug(\"Updating Creation Date: {}\", createTime.toString());\n+\t\t\t\t} else if (Arrays.asList(DAV_MODIFIEDDATE_PROPNAMES).contains(namespacelessPropertyName) && property.getValue() instanceof String) {\n \t\t\t\t\tfinal String lastModifiedTimeStr = (String) property.getValue();\n \t\t\t\t\tfinal FileTime lastModifiedTime = FileTimeUtils.fromRfc1123String(lastModifiedTimeStr);\n \t\t\t\t\tfinal BasicFileAttributeView attrView = Files.getFileAttributeView(filePath, BasicFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n \t\t\t\t\tattrView.setTimes(lastModifiedTime, null, null);\n-\t\t\t\t\tLOG.info(\"Updating Last Modified Date: {}\", lastModifiedTime.toString());\n+\t\t\t\t\tLOG.debug(\"Updating Last Modified Date: {}\", lastModifiedTime.toString());\n \t\t\t\t}\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR);",
      "parent_sha": "111ee99ae1aac626617a55b0eefca38dc0764ec4"
    }
  },
  {
    "oid": "200a195f3be4529178b2efa666b01c5b4cb0fb4d",
    "message": "Unlock vault with readonly flag if requested",
    "date": "2019-02-08T14:39:09Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/200a195f3be4529178b2efa666b01c5b4cb0fb4d",
    "details": {
      "sha": "ae45a119100fc5470ea43d213bd5217f19ef72f2",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/model/Vault.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/200a195f3be4529178b2efa666b01c5b4cb0fb4d/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/200a195f3be4529178b2efa666b01c5b4cb0fb4d/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java?ref=200a195f3be4529178b2efa666b01c5b4cb0fb4d",
      "patch": "@@ -21,6 +21,7 @@\n import org.cryptomator.common.settings.VaultSettings;\n import org.cryptomator.cryptofs.CryptoFileSystem;\n import org.cryptomator.cryptofs.CryptoFileSystemProperties;\n+import org.cryptomator.cryptofs.CryptoFileSystemProperties.FileSystemFlags;\n import org.cryptomator.cryptofs.CryptoFileSystemProvider;\n import org.cryptomator.cryptolib.api.CryptoException;\n import org.cryptomator.cryptolib.api.InvalidPassphraseException;\n@@ -38,6 +39,8 @@\n import java.nio.file.NotDirectoryException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Objects;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Predicate;\n@@ -78,9 +81,13 @@ private CryptoFileSystem getCryptoFileSystem(CharSequence passphrase) throws NoS\n \t}\n \n \tprivate CryptoFileSystem unlockCryptoFileSystem(CharSequence passphrase) throws NoSuchFileException, IOException, InvalidPassphraseException, CryptoException {\n+\t\tList<FileSystemFlags> flags = new ArrayList<>();\n+\t\tif (vaultSettings.usesReadOnlyMode().get()) {\n+\t\t\tflags.add(FileSystemFlags.READONLY);\n+\t\t}\n \t\tCryptoFileSystemProperties fsProps = CryptoFileSystemProperties.cryptoFileSystemProperties() //\n \t\t\t\t.withPassphrase(passphrase) //\n-\t\t\t\t.withFlags() //\n+\t\t\t\t.withFlags(flags) //\n \t\t\t\t.withMasterkeyFilename(MASTERKEY_FILENAME) //\n \t\t\t\t.build();\n \t\treturn CryptoFileSystemProvider.newFileSystem(getPath(), fsProps);",
      "parent_sha": "db0aceefdfdd7cb85d63a4e1865a1a1b3ef04edf"
    }
  },
  {
    "oid": "70c3a38c49943160e8c08f4c87e0242ea9e201cb",
    "message": "invoking UI methods on UI thread, might solve #351",
    "date": "2016-11-10T13:07:37Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/70c3a38c49943160e8c08f4c87e0242ea9e201cb",
    "details": {
      "sha": "a8d241431cb8cf6f2e198be93a9a6abf8aa23b51",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/70c3a38c49943160e8c08f4c87e0242ea9e201cb/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/70c3a38c49943160e8c08f4c87e0242ea9e201cb/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FUnlockController.java?ref=70c3a38c49943160e8c08f4c87e0242ea9e201cb",
      "patch": "@@ -301,7 +301,7 @@ private void unlock(CharSequence password) {\n \t\t\tif (keychainAccess.isPresent() && savePassword.isSelected()) {\n \t\t\t\tkeychainAccess.get().storePassphrase(vault.getId(), password);\n \t\t\t} else {\n-\t\t\t\tpasswordField.swipe();\n+\t\t\t\tPlatform.runLater(passwordField::swipe);\n \t\t\t}\n \t\t} catch (InvalidPassphraseException e) {\n \t\t\tPlatform.runLater(() -> {",
      "parent_sha": "c64294ac3e11a60d5b143764616d917e02e0d79e"
    }
  },
  {
    "oid": "f2f14063a4a8ebd43e1dee1d5fc7b514a0e3bf9e",
    "message": "fixed NPE when deselecting vault",
    "date": "2020-03-09T10:33:00Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f2f14063a4a8ebd43e1dee1d5fc7b514a0e3bf9e",
    "details": {
      "sha": "167138e0f6de3b15ad74345beb2ec94ed834f5d6",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultListController.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f2f14063a4a8ebd43e1dee1d5fc7b514a0e3bf9e/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f2f14063a4a8ebd43e1dee1d5fc7b514a0e3bf9e/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java?ref=f2f14063a4a8ebd43e1dee1d5fc7b514a0e3bf9e",
      "patch": "@@ -1,6 +1,5 @@\n package org.cryptomator.ui.mainwindow;\n \n-import javafx.beans.Observable;\n import javafx.beans.binding.Bindings;\n import javafx.beans.binding.BooleanBinding;\n import javafx.beans.property.ObjectProperty;\n@@ -9,7 +8,6 @@\n import javafx.collections.ObservableList;\n import javafx.fxml.FXML;\n import javafx.scene.control.ListView;\n-import javafx.stage.Stage;\n import org.cryptomator.common.vaults.Vault;\n import org.cryptomator.common.vaults.VaultListManager;\n import org.cryptomator.common.vaults.VaultState;\n@@ -21,7 +19,6 @@\n \n import javax.inject.Inject;\n \n-//TODO: Add check if a vault in the list is invalid and add notification & controller\n @MainWindowScoped\n public class VaultListController implements FxController {\n \n@@ -63,6 +60,9 @@ public void initialize() {\n \t}\n \n \tprivate void selectedVaultDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends Vault> observableValue, @SuppressWarnings(\"unused\") Vault oldValue, Vault newValue) {\n+\t\tif (newValue == null) {\n+\t\t\treturn;\n+\t\t}\n \t\tVaultState reportedState = newValue.getState();\n \t\tswitch (reportedState) {\n \t\t\tcase LOCKED:",
      "parent_sha": "bf27ec29683e4e84ef8eea1155ebb9d70196619e"
    }
  },
  {
    "oid": "e9a71827edb1afa90bd7fb3cc51dd80589220d8c",
    "message": "Apply suggestions from code review\r\n\r\nEstablishing symmetry with `afterExecuteTask`\n\nCo-authored-by: Sebastian Stenzel <overheadhunter@users.noreply.github.com>",
    "date": "2022-05-26T23:36:10Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/e9a71827edb1afa90bd7fb3cc51dd80589220d8c",
    "details": {
      "sha": "469fc3741f48481f7b113efd396f80c69d28ed16",
      "filename": "src/main/java/org/cryptomator/common/CatchingExecutors.java",
      "status": "modified",
      "additions": 15,
      "deletions": 23,
      "changes": 38,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/e9a71827edb1afa90bd7fb3cc51dd80589220d8c/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2FCatchingExecutors.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/e9a71827edb1afa90bd7fb3cc51dd80589220d8c/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2FCatchingExecutors.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2FCatchingExecutors.java?ref=e9a71827edb1afa90bd7fb3cc51dd80589220d8c",
      "patch": "@@ -49,16 +49,12 @@ protected void afterExecute(Runnable runnable, Throwable throwable) {\n \t}\n \n \tprivate static void afterExecute0(Runnable runnable, Throwable throwable) {\n-\t\tif (throwable == null) {\n-\t\t\tif (runnable instanceof Task<?>) {\n-\t\t\t\tafterExecuteTask(Thread.currentThread(), (Task<?>) runnable);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tthrowable = getThrowable(runnable);\n-\t\t}\n-\n \t\tif (throwable != null) {\n \t\t\tcallHandler(Thread.currentThread(), throwable);\n+\t\t} else if (runnable instanceof Task<?> t) {\n+\t\t\tafterExecuteTask(Thread.currentThread(), t);\n+\t\t} else if (runnable instanceof Future<?> f) {\n+\t\t\tafterExecuteFuture(f);\n \t\t}\n \t\t//Errors in this method are delegated to the UncaughtExceptionHandler of the current thread\n \t}\n@@ -79,21 +75,17 @@ private static void afterExecuteTask(Thread caller, Task<?> task) {\n \t\t});\n \t}\n \n-\tprivate static Throwable getThrowable(Runnable runnable) {\n-\t\tassert !(runnable instanceof Task<?>);\n-\n-\t\tif (runnable instanceof Future<?> && ((Future<?>) runnable).isDone()) {\n-\t\t\ttry {\n-\t\t\t\t((Future<?>) runnable).get();\n-\t\t\t} catch (CancellationException ce) {\n-\t\t\t\treturn ce;\n-\t\t\t} catch (ExecutionException ee) {\n-\t\t\t\treturn ee.getCause();\n-\t\t\t} catch (InterruptedException ie) {\n-\t\t\t\t//Ignore/Reset\n-\t\t\t\tThread.currentThread().interrupt();\n-\t\t\t}\n+\tprivate static void afterExecuteFuture(Future<?> future) {\n+\t\tassert future.isDone();\n+\t\ttry {\n+\t\t\tfuture.get();\n+\t\t} catch (CancellationException ce) {\n+\t\t\tcallHandler(Thread.currentThread(), ce);\n+\t\t} catch (ExecutionException ee) {\n+\t\t\tcallHandler(Thread.currentThread(), ee.getCause());\n+\t\t} catch (InterruptedException ie) {\n+\t\t\t//Ignore/Reset\n+\t\t\tThread.currentThread().interrupt();\n \t\t}\n-\t\treturn null;\n \t}\n }\n\\ No newline at end of file",
      "parent_sha": "0040c8a5f8e345346202cf7f6d20692af5d036f7"
    }
  },
  {
    "oid": "f21b30c009abfa4f621dbde5b874318c1654289b",
    "message": "removed unused field",
    "date": "2019-12-16T09:31:04Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f21b30c009abfa4f621dbde5b874318c1654289b",
    "details": {
      "sha": "750e193738eefd0c593ff47b9163ba2120bf71cc",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/quit/QuitController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f21b30c009abfa4f621dbde5b874318c1654289b/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fquit%2FQuitController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f21b30c009abfa4f621dbde5b874318c1654289b/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fquit%2FQuitController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fquit%2FQuitController.java?ref=f21b30c009abfa4f621dbde5b874318c1654289b",
      "patch": "@@ -14,9 +14,7 @@\n \n import javax.inject.Inject;\n import java.awt.desktop.QuitResponse;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.concurrent.ExecutorService;\n \n @QuitScoped\n public class QuitController implements FxController {\n@@ -26,16 +24,14 @@ public class QuitController implements FxController {\n \tprivate final Stage window;\n \tprivate final QuitResponse response;\n \tprivate final ObservableList<Vault> unlockedVaults;\n-\tprivate final ExecutorService executor;\n \tprivate final VaultService vaultService;\n \tpublic Button lockAndQuitButton;\n \n \t@Inject\n-\tQuitController(@QuitWindow Stage window, QuitResponse response, ObservableList<Vault> vaults, ExecutorService executor, VaultService vaultService) {\n+\tQuitController(@QuitWindow Stage window, QuitResponse response, ObservableList<Vault> vaults, VaultService vaultService) {\n \t\tthis.window = window;\n \t\tthis.response = response;\n \t\tthis.unlockedVaults = vaults.filtered(Vault::isUnlocked);\n-\t\tthis.executor = executor;\n \t\tthis.vaultService = vaultService;\n \t}\n ",
      "parent_sha": "d69b63acc301e86bd0530a0f8aa92c4a03fd2608"
    }
  },
  {
    "oid": "830bb5776f1470018af05c3075787d4ceca270fa",
    "message": "Use naming convention for comparator",
    "date": "2024-01-19T09:04:15Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/830bb5776f1470018af05c3075787d4ceca270fa",
    "details": {
      "sha": "ec9c429fa97175a5b4da4a52446cf2e28610eb44",
      "filename": "src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultLocationController.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/830bb5776f1470018af05c3075787d4ceca270fa/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultLocationController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/830bb5776f1470018af05c3075787d4ceca270fa/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultLocationController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultLocationController.java?ref=830bb5776f1470018af05c3075787d4ceca270fa",
      "patch": "@@ -165,13 +165,13 @@ private void createRadioButtonFor(LocationPreset preset) {\n \t\t});\n \t}\n \n-\tprivate int compareLocationPresets(Node n1, Node n2) {\n-\t\tif (customLocationRadioBtn.getId().equals(n1.getId())) {\n+\tprivate int compareLocationPresets(Node left, Node right) {\n+\t\tif (customLocationRadioBtn.getId().equals(left.getId())) {\n \t\t\treturn 1;\n-\t\t} else if (customLocationRadioBtn.getId().equals(n2.getId())) {\n+\t\t} else if (customLocationRadioBtn.getId().equals(right.getId())) {\n \t\t\treturn -1;\n \t\t} else {\n-\t\t\treturn ((RadioButton) n1).getText().compareToIgnoreCase(((RadioButton) n2).getText());\n+\t\t\treturn ((RadioButton) left).getText().compareToIgnoreCase(((RadioButton) right).getText());\n \t\t}\n \t}\n ",
      "parent_sha": "bfdb23785ec311ebd2ca29e73199c244093249a8"
    }
  },
  {
    "oid": "d01c6268f87643f97d01382ab1d0c2dfbbc4dfc5",
    "message": "remove unused field\n[ci skip]",
    "date": "2021-03-02T15:16:24Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/d01c6268f87643f97d01382ab1d0c2dfbbc4dfc5",
    "details": {
      "sha": "b9945a69200cf8756147671f6e912012d49bbbe4",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/d01c6268f87643f97d01382ab1d0c2dfbbc4dfc5/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/d01c6268f87643f97d01382ab1d0c2dfbbc4dfc5/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java?ref=d01c6268f87643f97d01382ab1d0c2dfbbc4dfc5",
      "patch": "@@ -43,18 +43,16 @@ public class UnlockWorkflow extends Task<Boolean> {\n \tprivate final Lazy<Scene> successScene;\n \tprivate final Lazy<Scene> invalidMountPointScene;\n \tprivate final ErrorComponent.Builder errorComponent;\n-\tprivate final MasterkeyFileAccess masterkeyFileAccess;\n \tprivate final MasterkeyFileLoadingComponent.Builder masterkeyFileLoadingComponent;\n \n \t@Inject\n-\tUnlockWorkflow(@UnlockWindow Stage window, @UnlockWindow Vault vault, VaultService vaultService, @FxmlScene(FxmlFile.UNLOCK_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.UNLOCK_INVALID_MOUNT_POINT) Lazy<Scene> invalidMountPointScene, ErrorComponent.Builder errorComponent, MasterkeyFileAccess masterkeyFileAccess, MasterkeyFileLoadingComponent.Builder masterkeyFileLoadingComponent) {\n+\tUnlockWorkflow(@UnlockWindow Stage window, @UnlockWindow Vault vault, VaultService vaultService, @FxmlScene(FxmlFile.UNLOCK_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.UNLOCK_INVALID_MOUNT_POINT) Lazy<Scene> invalidMountPointScene, ErrorComponent.Builder errorComponent, MasterkeyFileLoadingComponent.Builder masterkeyFileLoadingComponent) {\n \t\tthis.window = window;\n \t\tthis.vault = vault;\n \t\tthis.vaultService = vaultService;\n \t\tthis.successScene = successScene;\n \t\tthis.invalidMountPointScene = invalidMountPointScene;\n \t\tthis.errorComponent = errorComponent;\n-\t\tthis.masterkeyFileAccess = masterkeyFileAccess;\n \t\tthis.masterkeyFileLoadingComponent = masterkeyFileLoadingComponent;\n \n \t\tsetOnFailed(event -> {",
      "parent_sha": "557aaa2480553b7def597cb33a1732d9f2c24aec"
    }
  },
  {
    "oid": "14dc026354730ede3866e2f167166d0e1bd63c09",
    "message": "Cleanup\n\nCo-authored-by: Sebastian Stenzel <overheadhunter@users.noreply.github.com>",
    "date": "2022-03-02T16:24:54Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/14dc026354730ede3866e2f167166d0e1bd63c09",
    "details": {
      "sha": "9cfc8652f7907e1db1b66f3476413d4ec453e798",
      "filename": "src/main/java/org/cryptomator/common/mountpoint/CustomMountPointChooser.java",
      "status": "modified",
      "additions": 20,
      "deletions": 17,
      "changes": 37,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/14dc026354730ede3866e2f167166d0e1bd63c09/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FCustomMountPointChooser.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/14dc026354730ede3866e2f167166d0e1bd63c09/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FCustomMountPointChooser.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FCustomMountPointChooser.java?ref=14dc026354730ede3866e2f167166d0e1bd63c09",
      "patch": "@@ -14,6 +14,7 @@\n import java.nio.file.DirectoryNotEmptyException;\n import java.nio.file.FileAlreadyExistsException;\n import java.nio.file.Files;\n+import java.nio.file.LinkOption;\n import java.nio.file.NoSuchFileException;\n import java.nio.file.NotDirectoryException;\n import java.nio.file.Path;\n@@ -49,16 +50,16 @@ public Optional<Path> chooseMountPoint(Volume caller) {\n \n \t@Override\n \tpublic boolean prepare(Volume caller, Path mountPoint) throws InvalidMountPointException {\n-\t\tswitch (caller.getMountPointRequirement()) {\n+\t\treturn switch (caller.getMountPointRequirement()) {\n \t\t\tcase PARENT_NO_MOUNT_POINT -> {\n \t\t\t\tprepareParentNoMountPoint(mountPoint);\n \t\t\t\tLOG.debug(\"Successfully checked custom mount point: {}\", mountPoint);\n-\t\t\t\treturn true;\n+\t\t\t\tyield true;\n \t\t\t}\n \t\t\tcase EMPTY_MOUNT_POINT -> {\n \t\t\t\tprepareEmptyMountPoint(mountPoint);\n \t\t\t\tLOG.debug(\"Successfully checked custom mount point: {}\", mountPoint);\n-\t\t\t\treturn false;\n+\t\t\t\tyield false;\n \t\t\t}\n \t\t\tcase NONE -> {\n \t\t\t\t//Requirement \"NONE\" doesn't make any sense here.\n@@ -69,37 +70,39 @@ public boolean prepare(Volume caller, Path mountPoint) throws InvalidMountPointE\n \t\t\t\t//Currently the case for \"UNUSED_ROOT_DIR, PARENT_OPT_MOUNT_POINT\"\n \t\t\t\tthrow new InvalidMountPointException(new IllegalStateException(\"Not implemented\"));\n \t\t\t}\n-\t\t}\n+\t\t};\n \t}\n \n-\t//This the case on Windows when using FUSE\n+\t//This is case on Windows when using FUSE\n \t//See https://github.com/billziss-gh/winfsp/issues/320\n \tvoid prepareParentNoMountPoint(Path mountPoint) throws InvalidMountPointException {\n \t\tPath hideaway = getHideaway(mountPoint);\n-\t\tvar mpExists = Files.exists(mountPoint);\n-\t\tvar hideExists = Files.exists(hideaway);\n+\t\tvar mpExists = Files.exists(mountPoint, LinkOption.NOFOLLOW_LINKS);\n+\t\tvar hideExists = Files.exists(hideaway, LinkOption.NOFOLLOW_LINKS);\n \n \t\t//TODO: possible improvement by just deleting an _empty_ hideaway\n \t\tif (mpExists && hideExists) { //both resources exist (whatever type)\n \t\t\tthrow new InvalidMountPointException(new FileAlreadyExistsException(hideaway.toString()));\n \t\t} else if (!mpExists && !hideExists) { //neither mountpoint nor hideaway exist\n \t\t\tthrow new InvalidMountPointException(new NoSuchFileException(mountPoint.toString()));\n \t\t} else if (!mpExists) { //only hideaway exists\n-\t\t\tisDirectory(hideaway);\n+\t\t\tcheckIsDirectory(hideaway);\n \t\t\tLOG.info(\"Mountpoint {} for winfsp mount seems to be not properly cleaned up. Will be fixed on unmount.\", mountPoint);\n \t\t\ttry {\n-\t\t\t\tFiles.setAttribute(hideaway, WIN_HIDDEN, true);\n+\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n+\t\t\t\t\tFiles.setAttribute(hideaway, WIN_HIDDEN, true, LinkOption.NOFOLLOW_LINKS);\n+\t\t\t\t}\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new InvalidMountPointException(e);\n \t\t\t}\n \t\t} else { //only mountpoint exists\n \t\t\ttry {\n-\t\t\t\tisDirectory(mountPoint);\n-\t\t\t\tisEmpty(mountPoint);\n+\t\t\t\tcheckIsDirectory(mountPoint);\n+\t\t\t\tcheckIsEmpty(mountPoint);\n \n \t\t\t\tFiles.move(mountPoint, hideaway);\n \t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n-\t\t\t\t\tFiles.setAttribute(hideaway, WIN_HIDDEN, true);\n+\t\t\t\t\tFiles.setAttribute(hideaway, WIN_HIDDEN, true, LinkOption.NOFOLLOW_LINKS);\n \t\t\t\t}\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new InvalidMountPointException(e);\n@@ -109,9 +112,9 @@ void prepareParentNoMountPoint(Path mountPoint) throws InvalidMountPointExceptio\n \n \tprivate void prepareEmptyMountPoint(Path mountPoint) throws InvalidMountPointException {\n \t\t//This is the case for Windows when using Dokany and for Linux and Mac\n-\t\tisDirectory(mountPoint);\n+\t\tcheckIsDirectory(mountPoint);\n \t\ttry {\n-\t\t\tisEmpty(mountPoint);\n+\t\t\tcheckIsEmpty(mountPoint);\n \t\t} catch (IOException exception) {\n \t\t\tthrow new InvalidMountPointException(\"IOException while checking folder content\", exception);\n \t\t}\n@@ -132,13 +135,13 @@ public void cleanup(Volume caller, Path mountPoint) {\n \t\t}\n \t}\n \n-\tprivate void isDirectory(Path toCheck) throws InvalidMountPointException {\n-\t\tif (!Files.isDirectory(toCheck)) {\n+\tprivate void checkIsDirectory(Path toCheck) throws InvalidMountPointException {\n+\t\tif (!Files.isDirectory(toCheck, LinkOption.NOFOLLOW_LINKS)) {\n \t\t\tthrow new InvalidMountPointException(new NotDirectoryException(toCheck.toString()));\n \t\t}\n \t}\n \n-\tprivate void isEmpty(Path toCheck) throws InvalidMountPointException, IOException {\n+\tprivate void checkIsEmpty(Path toCheck) throws InvalidMountPointException, IOException {\n \t\ttry (var dirStream = Files.list(toCheck)) {\n \t\t\tif (dirStream.findFirst().isPresent()) {\n \t\t\t\tthrow new InvalidMountPointException(new DirectoryNotEmptyException(toCheck.toString()));",
      "parent_sha": "fba0df10f9503f0460aa0311d09de6710f13b9f9"
    }
  },
  {
    "oid": "944e3e6c50233897f6c8b084effc9f1d95e6fc58",
    "message": "placeholder: use identifier to look up human-readable names from ResourceBundle instead of if/elsing on classes\n(e.g. `resourceBundle.getString(identifier() + \".name\")`)\n\nTODO @infeo",
    "date": "2021-05-21T15:55:39Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/944e3e6c50233897f6c8b084effc9f1d95e6fc58",
    "details": {
      "sha": "73afcfed0bebeb783decebefe8b97d2758aea367",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/health/CheckListCell.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/944e3e6c50233897f6c8b084effc9f1d95e6fc58/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/944e3e6c50233897f6c8b084effc9f1d95e6fc58/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java?ref=944e3e6c50233897f6c8b084effc9f1d95e6fc58",
      "patch": "@@ -26,7 +26,7 @@ protected void updateItem(HealthCheckTask item, boolean empty) {\n \t\tsuper.updateItem(item, empty);\n \n \t\tif (item != null) {\n-\t\t\tsetText(item.getTitle());\n+\t\t\tsetText(item.getCheck().identifier()); // TODO lookup l18n key\n \t\t\titem.stateProperty().addListener(this::stateChanged);\n \t\t\tsetGraphic(graphicForState(item.getState()));\n \t\t\tstateIcon.setGlyph(glyphForState(item.getState()));",
      "parent_sha": "e134d2f422511043b3a527e60e47527861d82fbb"
    }
  },
  {
    "oid": "68e69790cff928fbb5d8db60c101eb5ddfaf7ee7",
    "message": "Don't trigger quit handler on new non-unlocked vault states",
    "date": "2019-09-06T12:05:17Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/68e69790cff928fbb5d8db60c101eb5ddfaf7ee7",
    "details": {
      "sha": "2fa27b0ba62645cf2da19d9b7d263f8fd9a4d8ea",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java",
      "status": "modified",
      "additions": 16,
      "deletions": 7,
      "changes": 23,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/68e69790cff928fbb5d8db60c101eb5ddfaf7ee7/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ftraymenu%2FTrayMenuController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/68e69790cff928fbb5d8db60c101eb5ddfaf7ee7/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ftraymenu%2FTrayMenuController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ftraymenu%2FTrayMenuController.java?ref=68e69790cff928fbb5d8db60c101eb5ddfaf7ee7",
      "patch": "@@ -5,6 +5,7 @@\n import javafx.collections.ObservableList;\n import org.cryptomator.common.settings.Settings;\n import org.cryptomator.common.vaults.Vault;\n+import org.cryptomator.common.vaults.VaultState;\n import org.cryptomator.ui.fxapp.FxApplication;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -18,8 +19,10 @@\n import java.awt.desktop.QuitResponse;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n+import java.util.EnumSet;\n import java.util.EventObject;\n import java.util.ResourceBundle;\n+import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Consumer;\n@@ -35,7 +38,7 @@ class TrayMenuController {\n \tprivate final Settings settings;\n \tprivate final ObservableList<Vault> vaults;\n \tprivate final PopupMenu menu;\n-\tprivate final AtomicBoolean allVaultsAreLocked;\n+\tprivate final AtomicBoolean allowSuddenTermination;\n \n \t@Inject\n \tTrayMenuController(ResourceBundle resourceBundle, FxApplicationStarter fxApplicationStarter, @Named(\"shutdownLatch\") CountDownLatch shutdownLatch, Settings settings, ObservableList<Vault> vaults) {\n@@ -45,7 +48,7 @@ class TrayMenuController {\n \t\tthis.settings = settings;\n \t\tthis.vaults = vaults;\n \t\tthis.menu = new PopupMenu();\n-\t\tthis.allVaultsAreLocked = new AtomicBoolean(true);\n+\t\tthis.allowSuddenTermination = new AtomicBoolean(true);\n \t}\n \n \tpublic PopupMenu getMenu() {\n@@ -76,10 +79,16 @@ public void initTrayMenu() {\n \tprivate void vaultListChanged(@SuppressWarnings(\"unused\") Observable observable) {\n \t\tassert Platform.isFxApplicationThread();\n \t\trebuildMenu();\n-\t\tboolean allLocked = vaults.stream().allMatch(Vault::isLocked);\n-\t\t// TODO remove logging\n-\t\tLOG.warn(\"allLocked: {}\", allLocked);\n-\t\tallVaultsAreLocked.set(allLocked);\n+\t\tSet<VaultState> statesAllowingTermination = EnumSet.of(VaultState.LOCKED, VaultState.NEEDS_MIGRATION, VaultState.MISSING, VaultState.ERROR);\n+\t\tboolean allVaultsAllowTermination = vaults.stream().map(Vault::getState).allMatch(statesAllowingTermination::contains);\n+\t\tallowSuddenTermination.set(allVaultsAllowTermination);\n+\t\tif (Desktop.getDesktop().isSupported(Desktop.Action.APP_SUDDEN_TERMINATION)) {\n+\t\t\tif (allVaultsAllowTermination) {\n+\t\t\t\tDesktop.getDesktop().enableSuddenTermination();\n+\t\t\t} else {\n+\t\t\t\tDesktop.getDesktop().disableSuddenTermination();\n+\t\t\t}\n+\t\t}\n \t}\n \n \tprivate void rebuildMenu() {\n@@ -141,7 +150,7 @@ private void showPreferencesWindow(@SuppressWarnings(\"unused\") EventObject actio\n \t}\n \n \tprivate void handleQuitRequest(EventObject e, QuitResponse response) {\n-\t\tif (allVaultsAreLocked.get()) {\n+\t\tif (allowSuddenTermination.get()) {\n \t\t\tresponse.performQuit(); // really?\n \t\t} else {\n \t\t\tfxApplicationStarter.get(true).thenAccept(app -> app.showQuitWindow(response));",
      "parent_sha": "2bd93469bb88be1ea5254f81278f6f96ccbef4cb"
    }
  },
  {
    "oid": "58d65c609f792f7edba8930cd90464ffad274e41",
    "message": "set the position on illegal position",
    "date": "2021-08-24T15:38:01Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/58d65c609f792f7edba8930cd90464ffad274e41",
    "details": {
      "sha": "95138ea97f57f1322c29e856d5267f60401a7fe3",
      "filename": "src/main/java/org/cryptomator/ui/mainwindow/ResizeController.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/58d65c609f792f7edba8930cd90464ffad274e41/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FResizeController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/58d65c609f792f7edba8930cd90464ffad274e41/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FResizeController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FResizeController.java?ref=58d65c609f792f7edba8930cd90464ffad274e41",
      "patch": "@@ -45,14 +45,26 @@ public void initialize() {\n \t\tblResizer.setOnMouseDragged(this::resizeBottomLeft);\n \t\tbrResizer.setOnMouseDragged(this::resizeBottomRight);\n \n-\t\twindow.setY(settings.windowYPositionProperty().get());\n-\t\twindow.setX(settings.windowXPositionProperty().get());\n \t\twindow.setHeight(settings.windowHeightProperty().get());\n \t\t//TODO: remove comments\n \t\t//window.setHeight(settings.windowHeightProperty().get() > window.getMaxHeight() ? window.getMaxHeight() * 0.95 : settings.windowHeightProperty().get());\n \n \t\twindow.setWidth(settings.windowWidthProperty().get());\n \t\t//window.setWidth(settings.windowWidthProperty().get() > window.getMaxWidth() ? window.getMaxWidth() * 0.95 : settings.windowWidthProperty().get());\n+\n+\n+\t\t//TODO: define illegalPosition\n+\t\tboolean illegalPosition = false;\n+\t\tif (illegalPosition) {\n+\t\t\t// if the position is illegal, then the window appears on the main screen in the middle of the window.\n+\t\t\twindow.setY((window.getMaxHeight() - window.getHeight()) / 2);\n+\t\t\twindow.setX((window.getMaxWidth() - window.getWidth()) / 2);\n+\t\t}\n+\t\telse {\n+\t\t\twindow.setX(settings.windowXPositionProperty().get());\n+\t\t\twindow.setY(settings.windowYPositionProperty().get());\n+\t\t}\n+\n \t}\n \n \tprivate void startResize(MouseEvent evt) {",
      "parent_sha": "b529764eb43f0ca4b28cae1ad682fcd1ac9371fe"
    }
  },
  {
    "oid": "1414ab4681fd9f2725da0a0beb6667cf5a741b88",
    "message": "use preconditions instead of try...catch",
    "date": "2022-11-12T11:26:08Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/1414ab4681fd9f2725da0a0beb6667cf5a741b88",
    "details": {
      "sha": "4b6a96bca57a2085ee30fbf3b83b7631b67af594",
      "filename": "src/main/java/org/cryptomator/ui/traymenu/AwtTrayMenuController.java",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/1414ab4681fd9f2725da0a0beb6667cf5a741b88/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ftraymenu%2FAwtTrayMenuController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/1414ab4681fd9f2725da0a0beb6667cf5a741b88/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ftraymenu%2FAwtTrayMenuController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ftraymenu%2FAwtTrayMenuController.java?ref=1414ab4681fd9f2725da0a0beb6667cf5a741b88",
      "patch": "@@ -1,5 +1,6 @@\n package org.cryptomator.ui.traymenu;\n \n+import dagger.internal.Preconditions;\n import org.apache.commons.lang3.SystemUtils;\n import org.cryptomator.integrations.common.CheckAvailability;\n import org.cryptomator.integrations.common.Priority;\n@@ -64,17 +65,13 @@ public void updateTrayMenu(List<TrayMenuItem> items) {\n \n \t@Override\n \tpublic void onBeforeOpenMenu(Runnable listener) {\n-\t\ttry {\n-\t\t\tthis.trayIcon.addMouseListener(new MouseAdapter() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void mouseClicked(MouseEvent e) {\n-\t\t\t\t\tlistener.run();\n-\t\t\t\t}\n-\t\t\t});\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new IllegalStateException(\"Tray icon not found.\", e);\n-\t\t}\n-\n+\t\tPreconditions.checkNotNull(this.trayIcon);\n+\t\tthis.trayIcon.addMouseListener(new MouseAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void mouseClicked(MouseEvent e) {\n+\t\t\t\tlistener.run();\n+\t\t\t}\n+\t\t});\n \t}\n \n \tprivate void addChildren(Menu menu, List<TrayMenuItem> items) {",
      "parent_sha": "1486826883ade9eb34dc324af163e4c9717b64d5"
    }
  },
  {
    "oid": "17057e8f8dfaf2e1521cc57d8635d4cf2398e7f1",
    "message": "Add Google Drive presets improvement. cryptomator/2921\n- The code now defaults to searching through '~/Library/CloudStorage/GoogleDrive-*/*' before using the fallback options.",
    "date": "2024-01-03T15:41:11Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/17057e8f8dfaf2e1521cc57d8635d4cf2398e7f1",
    "details": {
      "sha": "9212015757027b37c2dee540db5032d81d08d6f6",
      "filename": "src/main/java/org/cryptomator/common/locationpresets/GoogleDriveLocationPresetsProvider.java",
      "status": "modified",
      "additions": 77,
      "deletions": 11,
      "changes": 88,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/17057e8f8dfaf2e1521cc57d8635d4cf2398e7f1/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveLocationPresetsProvider.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/17057e8f8dfaf2e1521cc57d8635d4cf2398e7f1/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveLocationPresetsProvider.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveLocationPresetsProvider.java?ref=17057e8f8dfaf2e1521cc57d8635d4cf2398e7f1",
      "patch": "@@ -3,39 +3,105 @@\n import org.cryptomator.integrations.common.CheckAvailability;\n import org.cryptomator.integrations.common.OperatingSystem;\n \n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.DirectoryStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n import java.util.stream.Stream;\n \n import static org.cryptomator.integrations.common.OperatingSystem.Value.MAC;\n-import static org.cryptomator.integrations.common.OperatingSystem.Value.WINDOWS;\n \n-@OperatingSystem(WINDOWS)\n @OperatingSystem(MAC)\n-@CheckAvailability\n public final class GoogleDriveLocationPresetsProvider implements LocationPresetsProvider {\n+\tprivate static final Path LOCATION = LocationPresetsProvider.resolveLocation(\"~/Library/CloudStorage/\").toAbsolutePath();\n+\tprivate static final Predicate<String> PATTERN = Pattern.compile(\"^GoogleDrive-[^/]+$\").asMatchPredicate();\n \n-\tprivate static final List<Path> LOCATIONS = Arrays.asList( //\n+\tprivate static final List<Path> FALLBACK_LOCATIONS = Arrays.asList( //\n \t\t\tLocationPresetsProvider.resolveLocation(\"~/GoogleDrive/My Drive\"), //\n \t\t\tLocationPresetsProvider.resolveLocation(\"~/Google Drive/My Drive\"), //\n \t\t\tLocationPresetsProvider.resolveLocation(\"~/GoogleDrive\"), //\n \t\t\tLocationPresetsProvider.resolveLocation(\"~/Google Drive\") //\n \t);\n \n+\t@Override\n+\tpublic Stream<LocationPreset> getLocations() {\n+\t\tif(isLocationPresent()) {\n+\t\t\treturn getCloudStorageDirLocations();\n+\t\t} else if(FALLBACK_LOCATIONS.stream().anyMatch(Files::isDirectory)) {\n+\t\t\treturn getFallbackLocation();\n+\t\t} else {\n+\t\t\treturn Stream.of();\n+\t\t}\n+\t}\n+\n \t@CheckAvailability\n \tpublic static boolean isPresent() {\n-\t\treturn LOCATIONS.stream().anyMatch(Files::isDirectory);\n+\t\treturn isLocationPresent() || FALLBACK_LOCATIONS.stream().anyMatch(Files::isDirectory);\n \t}\n \n-\t@Override\n-\tpublic Stream<LocationPreset> getLocations() {\n-\t\treturn LOCATIONS.stream() //\n+\tpublic static boolean isLocationPresent() {\n+\t\ttry (DirectoryStream<Path> stream = Files.newDirectoryStream(LOCATION, \"GoogleDrive-*\")) {\n+\t\t\treturn stream.iterator().hasNext();\n+\t\t} catch (IOException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns Google Drive preset String.\n+\t *\n+\t * @param accountPath The path to the Google Drive account directory (e.g. {@code ~/Library/CloudStorage/GoogleDrive-username})\n+\t * @param drivePath The path to the Google Drive file directory, within the account directory. (e.g. {@code ~/Library/CloudStorage/GoogleDrive-username/drive_name})\n+\t * @return {@code String}. For example: \"Google Drive - username - drive_name\"\n+\t */\n+\tprivate String getDriveLocationString(Path accountPath, Path drivePath) {\n+\t\tString accountName = accountPath.getFileName().toString().replace(\"GoogleDrive-\", \"\");\n+\t\tString driveName = drivePath.getFileName().toString();\n+\n+\t\treturn STR.\"Google Drive - \\{accountName} - \\{driveName}\";\n+\t}\n+\n+\t/**\n+\t * Handles searching through {@code ~/Library/CloudStorage/} for directories with the \"{@code GoogleDrive-*}\" pattern,\n+\t * and returns the corresponding presets.\n+\t *\n+\t * @return {@code Stream<LocationPreset>}. Displays as \"{@code Google Drive - username - drive_name}\"\n+\t */\n+\tprivate Stream<LocationPreset> getCloudStorageDirLocations() {\n+\t\ttry (var dirStream = Files.list(LOCATION)) {\n+\t\t\tvar presets = dirStream.filter(path -> Files.isDirectory(path) && PATTERN.test(path.getFileName().toString()))\n+\t\t\t\t\t.flatMap(accountPath -> {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn Files.list(accountPath)\n+\t\t\t\t\t\t\t\t\t.filter(Files::isDirectory)\n+\t\t\t\t\t\t\t\t\t.map(drivePath -> new LocationPreset(getDriveLocationString(accountPath, drivePath), drivePath));\n+\t\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}).toList();\n+\t\t\treturn presets.stream();\n+\t\t}\n+\t\tcatch (IOException | UncheckedIOException e) {\n+\t\t\treturn Stream.of();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Uses {@code FALLBACK_LOCATIONS} for directories as fallback, if {@code ~/Library/CloudStorage/} isn't present.\n+\t * Returns the corresponding presets.\n+\t *\n+\t * @return {@code Stream<LocationPreset>}. Displays as \"{@code Google Drive}\"\n+\t */\n+\tprivate Stream<LocationPreset> getFallbackLocation() {\n+\t\treturn FALLBACK_LOCATIONS.stream() //\n \t\t\t\t.filter(Files::isDirectory) //\n-\t\t\t\t.map(location -> new LocationPreset(\"Google Drive\", location)) //\n-\t\t\t\t.findFirst() //\n+\t\t\t\t.map(location -> new LocationPreset(\"Google Drive\", location))\n+\t\t\t\t.findFirst()\n \t\t\t\t.stream();\n \t}\n-\n }",
      "parent_sha": "325092efb00962a08fea7eb5f47ada0638854f33"
    }
  },
  {
    "oid": "eb4d39e8b481a5c16996b3002d318b1bb42f9f8d",
    "message": "introduce 'errorCode' parameter in request",
    "date": "2023-09-12T11:34:55Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/eb4d39e8b481a5c16996b3002d318b1bb42f9f8d",
    "details": {
      "sha": "deb114116a82312a78921e88ce4c78565f82e084",
      "filename": "src/main/java/org/cryptomator/ui/error/ErrorController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/eb4d39e8b481a5c16996b3002d318b1bb42f9f8d/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/eb4d39e8b481a5c16996b3002d318b1bb42f9f8d/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java?ref=eb4d39e8b481a5c16996b3002d318b1bb42f9f8d",
      "patch": "@@ -42,7 +42,7 @@ public class ErrorController implements FxController {\n \n \tprivate static final ObjectMapper JSON = new ObjectMapper();\n \tprivate static final Logger LOG = LoggerFactory.getLogger(ErrorController.class);\n-\tprivate static final String ERROR_CODES_URL = \"https://api.cryptomator.org/desktop/error-codes.json\";\n+\tprivate static final String ERROR_CODES_URL = \"https://api.cryptomator.org/desktop/error-codes.json?error-code=%s\";\n \tprivate static final String SEARCH_URL_FORMAT = \"https://github.com/cryptomator/cryptomator/discussions/categories/errors?discussions_q=category:Errors+%s\";\n \tprivate static final String REPORT_URL_FORMAT = \"https://github.com/cryptomator/cryptomator/discussions/new?category=Errors&title=Error+%s&body=%s\";\n \tprivate static final String SEARCH_ERRORCODE_DELIM = \" OR \";\n@@ -146,7 +146,7 @@ public void lookUpSolution() {\n \t\taskedForLookupDatabasePermission.set(true);\n \t\tHttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build();\n \t\tHttpRequest httpRequest = HttpRequest.newBuilder()//\n-\t\t\t\t.uri(URI.create(ERROR_CODES_URL))//\n+\t\t\t\t.uri(URI.create(ERROR_CODES_URL.formatted(errorCode.toString())))//\n \t\t\t\t.build();\n \t\thttpClient.sendAsync(httpRequest, HttpResponse.BodyHandlers.ofInputStream())//\n \t\t\t\t.thenAcceptAsync(this::loadHttpResponse, executorService)//",
      "parent_sha": "a1ad89a2e2478773e9bb2792b1d693ce5d57bf9a"
    }
  },
  {
    "oid": "f4007267fbc53126b3e7f853b6ed29053b79c98b",
    "message": "simplified the code and removed the function",
    "date": "2024-02-16T16:31:20Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f4007267fbc53126b3e7f853b6ed29053b79c98b",
    "details": {
      "sha": "78166a939c802228dcc397cb16252ef3d05e14a2",
      "filename": "src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f4007267fbc53126b3e7f853b6ed29053b79c98b/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f4007267fbc53126b3e7f853b6ed29053b79c98b/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Funlock%2FUnlockWorkflow.java?ref=f4007267fbc53126b3e7f853b6ed29053b79c98b",
      "patch": "@@ -104,13 +104,6 @@ private void handleGenericError(Throwable e) {\n \t\tappWindows.showErrorWindow(e, window, null);\n \t}\n \n-\tprivate void centerOnPrimaryStage(Window window){\n-\t\tdouble centerXPosition = mainWindow.getX() + (mainWindow.getWidth() - window.getWidth()) / 2;\n-\t\tdouble centerYPosition = mainWindow.getY() + (mainWindow.getHeight() - window.getHeight()) / 2;\n-\t\twindow.setX(centerXPosition);\n-\t\twindow.setY(centerYPosition);\n-\t}\n-\n \t@Override\n \tprotected void succeeded() {\n \t\tLOG.info(\"Unlock of '{}' succeeded.\", vault.getDisplayName());\n@@ -119,7 +112,8 @@ protected void succeeded() {\n \t\t\tcase ASK -> Platform.runLater(() -> {\n \t\t\t\twindow.setScene(successScene.get());\n \t\t\t\twindow.show();\n-\t\t\t\tcenterOnPrimaryStage(window);\n+\t\t\t\twindow.setX(mainWindow.getX() + (mainWindow.getWidth() - window.getWidth()) / 2);\n+\t\t\t\twindow.setY(mainWindow.getY() + (mainWindow.getHeight() - window.getHeight()) / 2);\n \t\t\t});\n \t\t\tcase REVEAL -> {\n \t\t\t\tPlatform.runLater(window::close);",
      "parent_sha": "155ba4607b097e75c99af2a1e9b489c9202ebe7a"
    }
  },
  {
    "oid": "9383abbdbdf739e4f2a39077f53773e1a5595a8a",
    "message": "let child method match parent",
    "date": "2023-06-29T13:55:07Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/9383abbdbdf739e4f2a39077f53773e1a5595a8a",
    "details": {
      "sha": "12cc55ccd277a066c3ddc51e13003ccf4c0194d1",
      "filename": "src/main/java/org/cryptomator/common/PropertiesDecorator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/9383abbdbdf739e4f2a39077f53773e1a5595a8a/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2FPropertiesDecorator.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/9383abbdbdf739e4f2a39077f53773e1a5595a8a/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2FPropertiesDecorator.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2FPropertiesDecorator.java?ref=9383abbdbdf739e4f2a39077f53773e1a5595a8a",
      "patch": "@@ -163,7 +163,7 @@ public synchronized Object setProperty(String key, String value) {\n \tpublic synchronized Object merge(Object key, Object value, BiFunction<? super Object, ? super Object, ?> remappingFunction) {return delegate.merge(key, value, remappingFunction);}\n \n \t@Override\n-\tpublic Object clone() {\n+\tpublic synchronized Object clone() {\n \t\tvar delegateClone = (Properties) delegate.clone();\n \t\treturn new PropertiesDecorator(delegateClone);\n \t}",
      "parent_sha": "a31d3185dce6dfff0053e826446884cacc602de8"
    }
  },
  {
    "oid": "2de151aebe463c010d51219e2d79087894ca03c0",
    "message": "use less generic name",
    "date": "2020-11-18T17:08:00Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/2de151aebe463c010d51219e2d79087894ca03c0",
    "details": {
      "sha": "704f2f62de8b5c9a31a401106b70464d9da0aafc",
      "filename": "main/commons/src/main/java/org/cryptomator/common/mountpoint/MountPointHelper.java",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/2de151aebe463c010d51219e2d79087894ca03c0/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FMountPointHelper.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/2de151aebe463c010d51219e2d79087894ca03c0/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FMountPointHelper.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FMountPointHelper.java?ref=2de151aebe463c010d51219e2d79087894ca03c0",
      "patch": "@@ -20,11 +20,10 @@\n class MountPointHelper {\n \n \tpublic static Logger LOG = LoggerFactory.getLogger(MountPointHelper.class);\n-\n \tprivate static final int MAX_TMPMOUNTPOINT_CREATION_RETRIES = 10;\n \n \tprivate final Optional<Path> tmpMountPointDir;\n-\tprivate volatile boolean alreadyChecked = false;\n+\tprivate volatile boolean unmountDebrisCleared = false;\n \n \t@Inject\n \tpublic MountPointHelper(Environment env) {\n@@ -55,13 +54,13 @@ public Path chooseTemporaryMountPoint(VaultSettings vaultSettings, Path parentDi\n \t}\n \n \tpublic synchronized void clearIrregularUnmountDebrisIfNeeded() {\n-\t\tif (alreadyChecked || tmpMountPointDir.isEmpty()) {\n-\t\t\treturn; //nuthin to do\n+\t\tif (unmountDebrisCleared || tmpMountPointDir.isEmpty()) {\n+\t\t\treturn; // nothing to do\n \t\t}\n \t\tif (Files.exists(tmpMountPointDir.get(), LinkOption.NOFOLLOW_LINKS)) {\n \t\t\tclearIrregularUnmountDebris(tmpMountPointDir.get());\n \t\t}\n-\t\talreadyChecked = true;\n+\t\tunmountDebrisCleared = true;\n \t}\n \n \tprivate void clearIrregularUnmountDebris(Path dirContainingMountPoints) {\n@@ -92,7 +91,7 @@ private void clearIrregularUnmountDebris(Path dirContainingMountPoints) {\n \t\t} catch (IOException e) {\n \t\t\tLOG.warn(\"Unable to perform cleanup of mountpoint dir {}.\", dirContainingMountPoints, e);\n \t\t} finally {\n-\t\t\talreadyChecked = true;\n+\t\t\tunmountDebrisCleared = true;\n \t\t}\n \t}\n ",
      "parent_sha": "422ce4a3873c8b7acb35d5832ec796e1e9bdd3b8"
    }
  },
  {
    "oid": "ac4a68649e2857a8f17abe254eddf20c9263dd49",
    "message": "now really: fixed invalid URI during MOVE, if dest path contains special chars (like spaces)",
    "date": "2016-02-22T10:37:37Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/ac4a68649e2857a8f17abe254eddf20c9263dd49",
    "details": {
      "sha": "953b341b53a323123b7ada9481aca11eb57c0238",
      "filename": "main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/filters/UriNormalizationFilter.java",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/ac4a68649e2857a8f17abe254eddf20c9263dd49/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2Ffilters%2FUriNormalizationFilter.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/ac4a68649e2857a8f17abe254eddf20c9263dd49/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2Ffilters%2FUriNormalizationFilter.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2Ffilters%2FUriNormalizationFilter.java?ref=ac4a68649e2857a8f17abe254eddf20c9263dd49",
      "patch": "@@ -128,26 +128,25 @@ public SuffixPreservingRequest(HttpServletRequest request) {\n \t\t@Override\n \t\tpublic String getHeader(String name) {\n \t\t\tif ((METHOD_MOVE.equalsIgnoreCase(getMethod()) || METHOD_COPY.equalsIgnoreCase(getMethod())) && HEADER_DESTINATION.equalsIgnoreCase(name)) {\n-\t\t\t\tfinal String uri = URI.create(super.getHeader(name)).getRawPath();\n-\t\t\t\treturn bestGuess(uri);\n+\t\t\t\treturn bestGuess(URI.create(super.getHeader(name)));\n \t\t\t} else {\n \t\t\t\treturn super.getHeader(name);\n \t\t\t}\n \t\t}\n \n-\t\tprivate String bestGuess(String uri) {\n-\t\t\tfinal String pathWithinContext = StringUtils.removeStart(uri, contextPath);\n+\t\tprivate String bestGuess(URI uri) {\n+\t\t\tfinal String pathWithinContext = StringUtils.removeStart(uri.getPath(), contextPath);\n \t\t\tfinal ResourceType resourceType = resourceTypeChecker.typeOfResource(pathWithinContext);\n \t\t\tswitch (resourceType) {\n \t\t\tcase FILE:\n-\t\t\t\treturn asFileUri(uri);\n+\t\t\t\treturn asFileUri(uri.getRawPath());\n \t\t\tcase FOLDER:\n-\t\t\t\treturn asFolderUri(uri);\n+\t\t\t\treturn asFolderUri(uri.getRawPath());\n \t\t\tdefault:\n \t\t\t\tif (this.getRequestURI().endsWith(\"/\")) {\n-\t\t\t\t\treturn asFolderUri(uri);\n+\t\t\t\t\treturn asFolderUri(uri.getRawPath());\n \t\t\t\t} else {\n-\t\t\t\t\treturn asFileUri(uri);\n+\t\t\t\t\treturn asFileUri(uri.getRawPath());\n \t\t\t\t}\n \t\t\t}\n \t\t}",
      "parent_sha": "7bc678d4dca9571036c106a17795013636cd3415"
    }
  },
  {
    "oid": "419eb93cb3a09e7cbd4c8e75128dc115cb9263a4",
    "message": "Apply code suggestions\n\n* use Futures done() method\n* single deque interaction during cancel()\n* use enum compareTo method",
    "date": "2021-07-08T08:59:41Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/419eb93cb3a09e7cbd4c8e75128dc115cb9263a4",
    "details": {
      "sha": "5a3a64e89101788f5424f3d4eeba121923736e1a",
      "filename": "src/main/java/org/cryptomator/ui/health/CheckExecutor.java",
      "status": "modified",
      "additions": 11,
      "deletions": 19,
      "changes": 30,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/419eb93cb3a09e7cbd4c8e75128dc115cb9263a4/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckExecutor.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/419eb93cb3a09e7cbd4c8e75128dc115cb9263a4/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckExecutor.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckExecutor.java?ref=419eb93cb3a09e7cbd4c8e75128dc115cb9263a4",
      "patch": "@@ -48,16 +48,16 @@ public synchronized void executeBatch(List<Check> checks) {\n \t}\n \n \tpublic synchronized void cancel() {\n-\t\twhile (!tasksToExecute.isEmpty()) {\n-\t\t\tvar task = (CheckTask) tasksToExecute.removeLast();\n+\t\tCheckTask task;\n+\t\twhile ((task = tasksToExecute.pollLast()) != null) {\n \t\t\ttask.cancel(true);\n \t\t}\n \t}\n \n \tprivate class CheckTask extends Task<Void> {\n \n-\t\tprivate Check c;\n-\t\tprivate DiagnosticResult.Severity highestResultSeverity;\n+\t\tprivate final Check c;\n+\t\tprivate DiagnosticResult.Severity highestResultSeverity = DiagnosticResult.Severity.GOOD;\n \n \t\tCheckTask(Check c) {\n \t\t\tthis.c = c;\n@@ -69,24 +69,14 @@ protected Void call() throws Exception {\n \t\t\t\t var cryptor = CryptorProvider.forScheme(vaultConfig.getCipherCombo()).provide(masterkeyClone, csprng)) {\n \t\t\t\tc.getHealthCheck().check(vaultPath, vaultConfig, masterkeyClone, cryptor, diagnosis -> {\n \t\t\t\t\tc.getResults().add(Result.create(diagnosis));\n-\t\t\t\t\tcompareAndSetSeverity(diagnosis.getSeverity());\n+\t\t\t\t\tif (highestResultSeverity.compareTo(diagnosis.getSeverity()) < 0) {\n+\t\t\t\t\t\thighestResultSeverity = diagnosis.getSeverity();\n+\t\t\t\t\t}\n \t\t\t\t});\n \t\t\t}\n \t\t\treturn null;\n \t\t}\n \n-\t\tprivate void compareAndSetSeverity(DiagnosticResult.Severity newOne) {\n-\t\t\tif (highestResultSeverity != DiagnosticResult.Severity.CRITICAL && newOne == DiagnosticResult.Severity.CRITICAL) {\n-\t\t\t\thighestResultSeverity = DiagnosticResult.Severity.CRITICAL;\n-\t\t\t} else if (highestResultSeverity != DiagnosticResult.Severity.WARN && newOne == DiagnosticResult.Severity.WARN) {\n-\t\t\t\thighestResultSeverity = DiagnosticResult.Severity.WARN;\n-\t\t\t} else if (highestResultSeverity != DiagnosticResult.Severity.GOOD && newOne == DiagnosticResult.Severity.GOOD) {\n-\t\t\t\thighestResultSeverity = DiagnosticResult.Severity.GOOD;\n-\t\t\t} else {\n-\t\t\t\thighestResultSeverity = DiagnosticResult.Severity.INFO;\n-\t\t\t}\n-\t\t}\n-\n \t\t@Override\n \t\tprotected void running() {\n \t\t\tc.setState(Check.CheckState.RUNNING);\n@@ -95,20 +85,22 @@ protected void running() {\n \t\t@Override\n \t\tprotected void cancelled() {\n \t\t\tc.setState(Check.CheckState.CANCELLED);\n-\t\t\ttasksToExecute.remove(this);\n \t\t}\n \n \t\t@Override\n \t\tprotected void succeeded() {\n \t\t\tc.setState(Check.CheckState.SUCCEEDED);\n \t\t\tc.setHighestResultSeverity(highestResultSeverity);\n-\t\t\ttasksToExecute.remove(this);\n \t\t}\n \n \t\t@Override\n \t\tprotected void failed() {\n \t\t\tc.setState(Check.CheckState.ERROR);\n \t\t\tc.setError(this.getException());\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void done() {\n \t\t\ttasksToExecute.remove(this);\n \t\t}\n ",
      "parent_sha": "b4a530b2eb69ef9bf1f609a6866337aee1ad2053"
    }
  },
  {
    "oid": "d24734e16fd5f25bdb4f5d39090346a6faccc34e",
    "message": "Revert \"Adding method to clean up _our_ tmp mounting dirs to mitigate #1061 and #1013\"\n\nThis reverts commit 01522e8c972e5ef4e9af90bf4d981689819b3f1a.",
    "date": "2020-11-02T16:25:43Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/d24734e16fd5f25bdb4f5d39090346a6faccc34e",
    "details": {
      "sha": "60991b97e5857ed18494077d3860e5f24b8e1fd1",
      "filename": "main/commons/src/main/java/org/cryptomator/common/mountpoint/TemporaryMountPointChooser.java",
      "status": "modified",
      "additions": 4,
      "deletions": 43,
      "changes": 47,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/d24734e16fd5f25bdb4f5d39090346a6faccc34e/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FTemporaryMountPointChooser.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/d24734e16fd5f25bdb4f5d39090346a6faccc34e/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FTemporaryMountPointChooser.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FTemporaryMountPointChooser.java?ref=d24734e16fd5f25bdb4f5d39090346a6faccc34e",
      "patch": "@@ -3,21 +3,16 @@\n import org.apache.commons.lang3.SystemUtils;\n import org.cryptomator.common.Environment;\n import org.cryptomator.common.settings.VaultSettings;\n-import org.cryptomator.common.settings.VolumeImpl;\n-import org.cryptomator.common.vaults.MountPointRequirement;\n import org.cryptomator.common.vaults.Volume;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import javax.inject.Inject;\n import java.io.File;\n import java.io.IOException;\n-import java.nio.file.DirectoryStream;\n import java.nio.file.Files;\n-import java.nio.file.LinkOption;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.nio.file.attribute.BasicFileAttributes;\n import java.util.Optional;\n \n public class TemporaryMountPointChooser implements MountPointChooser {\n@@ -47,55 +42,21 @@ public boolean isApplicable(Volume caller) {\n \n \t@Override\n \tpublic Optional<Path> chooseMountPoint(Volume caller) {\n-\t\treturn this.environment.getMountPointsDir().map(p -> choose(p, caller));\n+\t\treturn this.environment.getMountPointsDir().map(this::choose);\n \t}\n \n-\tprivate Path choose(Path parent, Volume caller) {\n-\t\tString basename = this.vaultSettings.mountName().get(); //TODO: this is a normalized name, but if we mount into a folder we do not need to normalize\n+\tprivate Path choose(Path parent) {\n+\t\tString basename = this.vaultSettings.mountName().get();\n \t\tfor (int i = 0; i < MAX_TMPMOUNTPOINT_CREATION_RETRIES; i++) {\n \t\t\tPath mountPoint = parent.resolve(basename + \"_\" + i);\n-\t\t\tif (Files.notExists(mountPoint, LinkOption.NOFOLLOW_LINKS)) { //let's be explicit\n+\t\t\tif (Files.notExists(mountPoint)) {\n \t\t\t\treturn mountPoint;\n-\t\t\t} else {\n-\t\t\t\ttry {\n-\t\t\t\t\tremoveLeftOvers(mountPoint, caller);\n-\t\t\t\t\treturn mountPoint;\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\t//NO-OP, try next\n-\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tLOG.error(\"Failed to find feasible mountpoint at {}{}{}_x. Giving up after {} attempts.\", parent, File.separator, basename, MAX_TMPMOUNTPOINT_CREATION_RETRIES);\n \t\treturn null;\n \t}\n \n-\t//see https://github.com/cryptomator/cryptomator/issues/1013 and https://github.com/cryptomator/cryptomator/issues/1061\n-\tprivate void removeLeftOvers(Path mountPoint, Volume caller) throws IOException {\n-\t\tif (!Files.isDirectory(mountPoint, LinkOption.NOFOLLOW_LINKS)) {\n-\t\t\tthrow new IOException(); //if not a directory, we do not touch it\n-\t\t}\n-\n-\t\tif (VolumeImpl.DOKANY.equals(caller.getImplementationType())) {\n-\t\t\ttry {\n-\t\t\t\tvar attrTarget = Files.readAttributes(mountPoint, BasicFileAttributes.class); //we follow the link and see if it exists\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tFiles.delete(mountPoint); //broken link file, we delete it\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t} else if (VolumeImpl.FUSE.equals(caller.getImplementationType())) {\n-\t\t\ttry (DirectoryStream<Path> ds = Files.newDirectoryStream(mountPoint)) {\n-\t\t\t\tif (!ds.iterator().hasNext()) {\n-\t\t\t\t\tif (caller.getMountPointRequirement().equals(MountPointRequirement.PARENT_NO_MOUNT_POINT)) {\n-\t\t\t\t\t\tFiles.delete(mountPoint);\n-\t\t\t\t\t}\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tthrow new IOException(); //in the default we do not touch anything\n-\t}\n-\n \t@Override\n \tpublic boolean prepare(Volume caller, Path mountPoint) throws InvalidMountPointException {\n \t\t// https://github.com/osxfuse/osxfuse/issues/306#issuecomment-245114592:",
      "parent_sha": "01522e8c972e5ef4e9af90bf4d981689819b3f1a"
    }
  },
  {
    "oid": "3c4494a14f22b293582b6b1837666c0cae6cef8a",
    "message": "cleanup",
    "date": "2017-06-01T22:18:11Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/3c4494a14f22b293582b6b1837666c0cae6cef8a",
    "details": {
      "sha": "dbadd27f313b2c093761bbc72d937f77e8edc208",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/model/UpgradeStrategy.java",
      "status": "modified",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/3c4494a14f22b293582b6b1837666c0cae6cef8a/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FUpgradeStrategy.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/3c4494a14f22b293582b6b1837666c0cae6cef8a/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FUpgradeStrategy.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FUpgradeStrategy.java?ref=3c4494a14f22b293582b6b1837666c0cae6cef8a",
      "patch": "@@ -63,11 +63,8 @@ static SecureRandom strongSecureRandom() {\n \t */\n \tpublic void upgrade(Vault vault, CharSequence passphrase) throws UpgradeFailedException {\n \t\tLOG.info(\"Upgrading {} from {} to {}.\", vault.getPath(), vaultVersionBeforeUpgrade, vaultVersionAfterUpgrade);\n-\t\tCryptor cryptor = null;\n-\t\ttry {\n-\t\t\tfinal Path masterkeyFile = vault.getPath().resolve(MASTERKEY_FILENAME);\n-\t\t\tfinal byte[] masterkeyFileContents = Files.readAllBytes(masterkeyFile);\n-\t\t\tcryptor = cryptorProvider.createFromKeyFile(KeyFile.parse(masterkeyFileContents), passphrase, vaultVersionBeforeUpgrade);\n+\t\tfinal Path masterkeyFile = vault.getPath().resolve(MASTERKEY_FILENAME);\n+\t\ttry (Cryptor cryptor = cryptorProvider.createFromKeyFile(KeyFile.parse(Files.readAllBytes(masterkeyFile)), passphrase, vaultVersionBeforeUpgrade)) {\n \t\t\t// create backup, as soon as we know the password was correct:\n \t\t\tfinal Path masterkeyBackupFile = vault.getPath().resolve(MASTERKEY_BACKUP_FILENAME);\n \t\t\tFiles.copy(masterkeyFile, masterkeyBackupFile, StandardCopyOption.REPLACE_EXISTING);\n@@ -92,10 +89,6 @@ public void upgrade(Vault vault, CharSequence passphrase) throws UpgradeFailedEx\n \t\t} catch (IOException e) {\n \t\t\tLOG.warn(\"Upgrade failed.\", e);\n \t\t\tthrow new UpgradeFailedException(\"Upgrade failed. Details in log message.\");\n-\t\t} finally {\n-\t\t\tif (cryptor != null) {\n-\t\t\t\tcryptor.destroy();\n-\t\t\t}\n \t\t}\n \t}\n ",
      "parent_sha": "345f5153723b648396da37f2fa69e9d1dbda594b"
    }
  },
  {
    "oid": "e8db836eff5b14e9d43b9f7723f9b4b0f142f1f6",
    "message": "Workaround for Issue #317",
    "date": "2016-08-10T11:53:04Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/e8db836eff5b14e9d43b9f7723f9b4b0f142f1f6",
    "details": {
      "sha": "2196b7a3e0a396cdb03a4a265e2e0bc60e166348",
      "filename": "main/filesystem-nio/src/main/java/org/cryptomator/filesystem/nio/DefaultNioAccess.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/e8db836eff5b14e9d43b9f7723f9b4b0f142f1f6/main%2Ffilesystem-nio%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fnio%2FDefaultNioAccess.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/e8db836eff5b14e9d43b9f7723f9b4b0f142f1f6/main%2Ffilesystem-nio%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fnio%2FDefaultNioAccess.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffilesystem-nio%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fnio%2FDefaultNioAccess.java?ref=e8db836eff5b14e9d43b9f7723f9b4b0f142f1f6",
      "patch": "@@ -2,6 +2,7 @@\n \n import java.io.IOException;\n import java.nio.channels.AsynchronousFileChannel;\n+import java.nio.file.AccessDeniedException;\n import java.nio.file.CopyOption;\n import java.nio.file.FileSystems;\n import java.nio.file.Files;\n@@ -53,7 +54,17 @@ public FileTime getLastModifiedTime(Path path, LinkOption... options) throws IOE\n \n \t@Override\n \tpublic void delete(Path path) throws IOException {\n-\t\tFiles.delete(path);\n+\t\ttry {\n+\t\t\tFiles.delete(path);\n+\t\t} catch (AccessDeniedException e) {\n+\t\t\t// workaround for https://github.com/cryptomator/cryptomator/issues/317\n+\t\t\ttry {\n+\t\t\t\tif (path.toFile().delete()) return;\n+\t\t\t} catch (UnsupportedOperationException e2) {\n+\t\t\t\t// ignore\n+\t\t\t}\n+\t\t\tthrow e;\n+\t\t}\n \t}\n \n \t@Override",
      "parent_sha": "429b26f3d881ba499aae4d99f1f5360cd16c6885"
    }
  },
  {
    "oid": "9ae2f4e0f67f1b7ff51d37a9a449d55420815973",
    "message": "add timezone id to timestamp in settings",
    "date": "2024-04-23T14:12:59Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/9ae2f4e0f67f1b7ff51d37a9a449d55420815973",
    "details": {
      "sha": "ebaf841ed1f2da6cf027f7a2258d25fa9c540e90",
      "filename": "src/main/java/org/cryptomator/common/settings/SettingsJson.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/9ae2f4e0f67f1b7ff51d37a9a449d55420815973/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fsettings%2FSettingsJson.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/9ae2f4e0f67f1b7ff51d37a9a449d55420815973/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fsettings%2FSettingsJson.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fsettings%2FSettingsJson.java?ref=9ae2f4e0f67f1b7ff51d37a9a449d55420815973",
      "patch": "@@ -87,7 +87,7 @@ class SettingsJson {\n \tDate lastUpdateReminder = Date.from(Settings.DEFAULT_LAST_UPDATE_REMINDER);\n \n \t@JsonProperty(\"lastSuccessfulUpdateCheck\")\n-\t@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n+\t@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss z\")\n \tDate lastSuccessfulUpdateCheck = Date.from(Settings.DEFAULT_LAST_SUCCESSFUL_UPDATE_CHECK);\n \n \t@JsonProperty(\"latestVersion\")",
      "parent_sha": "4230afcbac91e3bb419d21b30115072060b8ebc4"
    }
  },
  {
    "oid": "71b876b32d39bca6dfa4b6c309392422022b06c7",
    "message": "Fixes #1900",
    "date": "2022-07-18T09:42:12Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/71b876b32d39bca6dfa4b6c309392422022b06c7",
    "details": {
      "sha": "973d919fc131a3a48d043ba5324ec0a4c3076eea",
      "filename": "src/main/java/org/cryptomator/ui/fxapp/AutoUnlocker.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/71b876b32d39bca6dfa4b6c309392422022b06c7/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FAutoUnlocker.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/71b876b32d39bca6dfa4b6c309392422022b06c7/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FAutoUnlocker.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FAutoUnlocker.java?ref=71b876b32d39bca6dfa4b6c309392422022b06c7",
      "patch": "@@ -4,6 +4,8 @@\n \n import javax.inject.Inject;\n import javafx.collections.ObservableList;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n \n @FxApplicationScoped\n public class AutoUnlocker {\n@@ -18,9 +20,11 @@ public AutoUnlocker(ObservableList<Vault> vaults, FxApplicationWindows appWindow\n \t}\n \n \tpublic void unlock() {\n-\t\tvaults.stream().filter(Vault::isLocked).filter(v -> v.getVaultSettings().unlockAfterStartup().get()).forEach(v -> {\n-\t\t\tappWindows.startUnlockWorkflow(v, null);\n-\t\t});\n+\t\tvaults.stream().filter(Vault::isLocked) //\n+\t\t\t\t.filter(v -> v.getVaultSettings().unlockAfterStartup().get()) //\n+\t\t\t\t.<CompletionStage<Void>>reduce(CompletableFuture.completedFuture(null), //\n+\t\t\t\t\t\t(unlockFlow, v) -> unlockFlow.handle((voit, ex) -> appWindows.startUnlockWorkflow(v, null)).thenCompose(stage -> stage), //we don't care here about the exception, logged elsewhere\n+\t\t\t\t\t\t(unlockChain1, unlockChain2) -> unlockChain1.handle((voit, ex) -> unlockChain2).thenCompose(stage -> stage));\n \t}\n \n }",
      "parent_sha": "cdc60abf66ff80b9f52a29bd933a5a53c47910c8"
    }
  },
  {
    "oid": "fd84ff09e1991675907c5e883a4bc06eeed977ec",
    "message": "No longer lock vault on double click\n\nSee https://github.com/cryptomator/cryptomator/pull/3194#issuecomment-1806106843",
    "date": "2023-11-10T21:05:58Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/fd84ff09e1991675907c5e883a4bc06eeed977ec",
    "details": {
      "sha": "644f361cb48ebc943d02b1ebd51999fb4d953e73",
      "filename": "src/main/java/org/cryptomator/ui/mainwindow/VaultListController.java",
      "status": "modified",
      "additions": 4,
      "deletions": 11,
      "changes": 15,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/fd84ff09e1991675907c5e883a4bc06eeed977ec/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/fd84ff09e1991675907c5e883a4bc06eeed977ec/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java?ref=fd84ff09e1991675907c5e883a4bc06eeed977ec",
      "patch": "@@ -113,10 +113,12 @@ public void initialize() {\n \t\t});\n \t\tvaultList.addEventFilter(MouseEvent.MOUSE_RELEASED, this::deselect);\n \n-\t\t//toggle selected vault lock status on double click\n+\t\t//unlock vault on double click\n \t\tvaultList.addEventFilter(MouseEvent.MOUSE_CLICKED, click -> {\n \t\t\tif (click.getClickCount() >= 2) {\n-\t\t\t\tOptional.ofNullable(selectedVault.get()).ifPresent(this::toggleVaultLockStatus);\n+\t\t\t\tOptional.ofNullable(selectedVault.get())\n+\t\t\t\t\t\t.filter(Vault::isLocked)\n+\t\t\t\t\t\t.ifPresent(vault -> appWindows.startUnlockWorkflow(vault, mainWindow));\n \t\t\t}\n \t\t});\n \n@@ -173,15 +175,6 @@ private void deselect(MouseEvent released) {\n \t\t}\n \t}\n \n-\tprivate void toggleVaultLockStatus(Vault vault) {\n-\t\tif (vault.isLocked()) {\n-\t\t\tappWindows.startUnlockWorkflow(vault, mainWindow);\n-\t\t}\n-\t\tif (vault.isUnlocked()) {\n-\t\t\tappWindows.startLockWorkflow(vault, mainWindow);\n-\t\t}\n-\t}\n-\n \tprivate void selectedVaultDidChange(@SuppressWarnings(\"unused\") ObservableValue<? extends Vault> observableValue, @SuppressWarnings(\"unused\") Vault oldValue, Vault newValue) {\n \t\tif (newValue == null) {\n \t\t\treturn;",
      "parent_sha": "3dce175f941e1fa9177c5e9776bb8d563d8452d4"
    }
  },
  {
    "oid": "f306184b53c04c0b670474d04dfcc1e75474ac32",
    "message": "adding icon to main window",
    "date": "2019-08-28T11:55:14Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f306184b53c04c0b670474d04dfcc1e75474ac32",
    "details": {
      "sha": "72441f0cfade547b65c393cf279f68f7e417fdfc",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f306184b53c04c0b670474d04dfcc1e75474ac32/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowModule.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f306184b53c04c0b670474d04dfcc1e75474ac32/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowModule.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowModule.java?ref=f306184b53c04c0b670474d04dfcc1e75474ac32",
      "patch": "@@ -5,6 +5,7 @@\n import dagger.Provides;\n import dagger.multibindings.IntoMap;\n import javafx.scene.Scene;\n+import javafx.scene.image.Image;\n import javafx.scene.input.KeyCode;\n import javafx.scene.input.KeyCodeCombination;\n import javafx.scene.input.KeyCombination;\n@@ -20,8 +21,10 @@\n import org.cryptomator.ui.removevault.RemoveVaultComponent;\n import org.cryptomator.ui.vaultoptions.VaultOptionsComponent;\n \n+import javax.inject.Named;\n import javax.inject.Provider;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.ResourceBundle;\n \n @Module(subcomponents = {AddVaultWizardComponent.class, RemoveVaultComponent.class, VaultOptionsComponent.class, ChangePasswordComponent.class})\n@@ -37,14 +40,15 @@ static FXMLLoaderFactory provideFxmlLoaderFactory(Map<Class<? extends FxControll\n \t@Provides\n \t@MainWindow\n \t@MainWindowScoped\n-\tstatic Stage provideStage() {\n+\tstatic Stage provideStage(@Named(\"windowIcon\") Optional<Image> windowIcon) {\n \t\tStage stage = new Stage();\n \t\t// TODO: min/max values chosen arbitrarily. We might wanna take a look at the user's resolution...\n \t\tstage.setMinWidth(650);\n \t\tstage.setMinHeight(440);\n \t\tstage.setMaxWidth(1000);\n \t\tstage.setMaxHeight(700);\n \t\tstage.initStyle(StageStyle.UNDECORATED);\n+\t\twindowIcon.ifPresent(stage.getIcons()::add);\n \t\treturn stage;\n \t}\n ",
      "parent_sha": "c1a8844f279ccddf2def8125bfc7dea1796cd8cd"
    }
  },
  {
    "oid": "f02a8e14ff62236de61d4310a8516976c237e457",
    "message": "Fixed Trim and Bidirectional Bind",
    "date": "2022-09-21T15:11:00Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f02a8e14ff62236de61d4310a8516976c237e457",
    "details": {
      "sha": "2ca73e172735df3eb3806aa365f3d45e9f9b5896",
      "filename": "src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultNameController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f02a8e14ff62236de61d4310a8516976c237e457/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultNameController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f02a8e14ff62236de61d4310a8516976c237e457/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultNameController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultNameController.java?ref=f02a8e14ff62236de61d4310a8516976c237e457",
      "patch": "@@ -45,7 +45,7 @@ public class CreateNewVaultNameController implements FxController {\n \n \t@FXML\n \tpublic void initialize() {\n-\t\tvaultName.bind(textField.textProperty());\n+\t\tvaultName.bindBidirectional(textField.textProperty());\n \t\tvaultName.addListener(this::vaultNameChanged);\n \t}\n \n@@ -66,7 +66,7 @@ public void back() {\n \t@FXML\n \tpublic void next() {\n \t\twindow.setScene(chooseLocationScene.get());\n-\t\tvaultName.get().trim();\n+\t\tvaultName.set(vaultName.get().trim());\n \t}\n \n \t/* Getter/Setter */",
      "parent_sha": "2def9216ecaebe5fdc461908198297c7d6e0c300"
    }
  },
  {
    "oid": "02a0f3acc6a019d082fd0ff36f313c89686e2f32",
    "message": "fixed invariant FolderChildrenTests",
    "date": "2016-05-23T09:18:24Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/02a0f3acc6a019d082fd0ff36f313c89686e2f32",
    "details": {
      "sha": "10e4289a6f7a4933cc511645b72c416dd482dc38",
      "filename": "main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoFolder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/02a0f3acc6a019d082fd0ff36f313c89686e2f32/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FCryptoFolder.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/02a0f3acc6a019d082fd0ff36f313c89686e2f32/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FCryptoFolder.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FCryptoFolder.java?ref=02a0f3acc6a019d082fd0ff36f313c89686e2f32",
      "patch": "@@ -8,6 +8,7 @@\n  *******************************************************************************/\n package org.cryptomator.filesystem.crypto;\n \n+import static java.lang.String.format;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.cryptomator.filesystem.crypto.Constants.DIR_SUFFIX;\n \n@@ -88,8 +89,12 @@ public Stream<? extends Node> children() {\n \t}\n \n \tprivate Stream<File> nonConflictingFiles() {\n-\t\tfinal Stream<? extends File> files = physicalFolder().filter(Folder::exists).map(Folder::files).orElse(Stream.empty());\n-\t\treturn files.filter(containsEncryptedName()).map(conflictResolver::resolveIfNecessary).distinct();\n+\t\tif (exists()) {\n+\t\t\tfinal Stream<? extends File> files = physicalFolder().filter(Folder::exists).map(Folder::files).orElse(Stream.empty());\n+\t\t\treturn files.filter(containsEncryptedName()).map(conflictResolver::resolveIfNecessary).distinct();\n+\t\t} else {\n+\t\t\tthrow new UncheckedIOException(new FileNotFoundException(format(\"Folder %s does not exist\", this)));\n+\t\t}\n \t}\n \n \tprivate Predicate<File> containsEncryptedName() {",
      "parent_sha": "851f9240b7df1cec1ede7a147259397270e8fb9b"
    }
  },
  {
    "oid": "ae697d7b73bd220603c1b0662f80afba64d25142",
    "message": "refactor isUpdateSuccessfulAndCurrent to instance variable",
    "date": "2024-04-25T08:54:00Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/ae697d7b73bd220603c1b0662f80afba64d25142",
    "details": {
      "sha": "e5597db089e4315e5100121ecdf9dedffa9585a7",
      "filename": "src/main/java/org/cryptomator/ui/preferences/UpdatesPreferencesController.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/ae697d7b73bd220603c1b0662f80afba64d25142/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FUpdatesPreferencesController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/ae697d7b73bd220603c1b0662f80afba64d25142/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FUpdatesPreferencesController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FUpdatesPreferencesController.java?ref=ae697d7b73bd220603c1b0662f80afba64d25142",
      "patch": "@@ -50,6 +50,7 @@ public class UpdatesPreferencesController implements FxController {\n \tprivate final BooleanProperty upToDateLabelVisible = new SimpleBooleanProperty(false);\n \tprivate final ObjectProperty<UpdateChecker.UpdateCheckState> updateCheckState;\n \tprivate final DateTimeFormatter formatter;\n+\tprivate final BooleanBinding isUpdateSuccessfulAndCurrent;\n \n \t/* FXML */\n \tpublic CheckBox checkForUpdatesCheckbox;\n@@ -71,15 +72,14 @@ public class UpdatesPreferencesController implements FxController {\n \t\tthis.updateAvailable = updateChecker.updateAvailableProperty();\n \t\tthis.updateCheckState = updateChecker.updateCheckStateProperty();\n \t\tthis.formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).withLocale(Locale.getDefault());\n+\t\tthis.isUpdateSuccessfulAndCurrent = updateCheckState.isEqualTo(UpdateChecker.UpdateCheckState.CHECK_SUCCESSFUL).and(latestVersion.isEqualTo(currentVersion));\n \t}\n \n \tpublic void initialize() {\n \t\tcheckForUpdatesCheckbox.selectedProperty().bindBidirectional(settings.checkForUpdates);\n \n-\t\tBooleanBinding isUpdateSuccessfulAndCurrent = updateCheckState.isEqualTo(UpdateChecker.UpdateCheckState.CHECK_SUCCESSFUL).and(latestVersion.isEqualTo(currentVersion));\n-\n-\t\tupdateCheckState.addListener((_, _, _) -> {\n-\t\t\tif (isUpdateSuccessfulAndCurrent.get()) {\n+\t\tisUpdateSuccessfulAndCurrent.addListener((_, _, newVal) -> {\n+\t\t\tif (newVal) {\n \t\t\t\tupToDateLabelVisible.set(true);\n \t\t\t\tPauseTransition delay = new PauseTransition(javafx.util.Duration.seconds(5));\n \t\t\t\tdelay.setOnFinished(_ -> upToDateLabelVisible.set(false));",
      "parent_sha": "ff3306cc177e5842f8ffc06d44d807bcdae81af5"
    }
  },
  {
    "oid": "f0a040cf29d0dfba81510bca8edc52494c8701bb",
    "message": "cleanup\n[ci skip]",
    "date": "2021-01-14T08:56:36Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f0a040cf29d0dfba81510bca8edc52494c8701bb",
    "details": {
      "sha": "5a5bb59a636cd16e6a3ec9d5268b9185ea4ce946",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f0a040cf29d0dfba81510bca8edc52494c8701bb/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowTitleController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f0a040cf29d0dfba81510bca8edc52494c8701bb/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowTitleController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowTitleController.java?ref=f0a040cf29d0dfba81510bca8edc52494c8701bb",
      "patch": "@@ -24,8 +24,6 @@ public class MainWindowTitleController implements FxController {\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(MainWindowTitleController.class);\n \n-\tpublic HBox titleBar;\n-\n \tprivate final AppLifecycleListener appLifecycle;\n \tprivate final Stage window;\n \tprivate final FxApplication application;\n@@ -36,10 +34,10 @@ public class MainWindowTitleController implements FxController {\n \tprivate final Settings settings;\n \tprivate final BooleanBinding showMinimizeButton;\n \n+\tpublic HBox titleBar;\n \tprivate double xOffset;\n \tprivate double yOffset;\n \n-\n \t@Inject\n \tMainWindowTitleController(AppLifecycleListener appLifecycle, @MainWindow Stage window, FxApplication application, TrayMenuComponent trayMenu, UpdateChecker updateChecker, LicenseHolder licenseHolder, Settings settings) {\n \t\tthis.appLifecycle = appLifecycle;",
      "parent_sha": "0676748dde29c61dec992dfb6b98261d58f6fddc"
    }
  },
  {
    "oid": "6f542ac8b85bfbcbcf32ca0d8f4e30a83bd07f95",
    "message": "Replaced \"assert\" with IllegalStateException",
    "date": "2020-08-21T19:57:12Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/6f542ac8b85bfbcbcf32ca0d8f4e30a83bd07f95",
    "details": {
      "sha": "80d2b25bbcdb7499d1a74ba041ff136116a4acd6",
      "filename": "main/commons/src/main/java/org/cryptomator/common/mountpoint/CustomMountPointChooser.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/6f542ac8b85bfbcbcf32ca0d8f4e30a83bd07f95/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FCustomMountPointChooser.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/6f542ac8b85bfbcbcf32ca0d8f4e30a83bd07f95/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FCustomMountPointChooser.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmountpoint%2FCustomMountPointChooser.java?ref=6f542ac8b85bfbcbcf32ca0d8f4e30a83bd07f95",
      "patch": "@@ -46,11 +46,11 @@ public boolean prepare(Path mountPoint) throws InvalidMountPointException {\n \t\t\tcase NONE -> {\n \t\t\t\t//Requirement \"NONE\" doesn't make any sense here.\n \t\t\t\t//No need to prepare/verify a Mountpoint without requiring one...\n-\t\t\t\tassert false : \"Illegal MountPointRequirement\";\n+\t\t\t\tthrow new InvalidMountPointException(new IllegalStateException(\"Illegal MountPointRequirement\"));\n \t\t\t}\n \t\t\tdefault -> {\n \t\t\t\t//Currently the case for \"PARENT_OPT_MOUNT_POINT\"\n-\t\t\t\tassert false : \"Not implemented\";\n+\t\t\t\tthrow new InvalidMountPointException(new IllegalStateException(\"Not implemented\"));\n \t\t\t}\n \t\t}\n \t\tLOG.debug(\"Successfully checked custom mount point: {}\", mountPoint);",
      "parent_sha": "8483f71f57ae83153afd2c48c1dd0adce471af6c"
    }
  },
  {
    "oid": "5d7906972b0c59d877c391573d44ed8b9c64e1f4",
    "message": "added user-agent header with <product> / <product-version> to HttpRequest",
    "date": "2023-09-12T15:59:08Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/5d7906972b0c59d877c391573d44ed8b9c64e1f4",
    "details": {
      "sha": "856d8599f8ce0ab360a9275d6fa2f8deb1d4d6db",
      "filename": "src/main/java/org/cryptomator/ui/error/ErrorController.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/5d7906972b0c59d877c391573d44ed8b9c64e1f4/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/5d7906972b0c59d877c391573d44ed8b9c64e1f4/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java?ref=5d7906972b0c59d877c391573d44ed8b9c64e1f4",
      "patch": "@@ -6,6 +6,7 @@\n import org.cryptomator.common.ErrorCode;\n import org.cryptomator.common.Nullable;\n import org.cryptomator.ui.common.FxController;\n+import org.cryptomator.ui.fxapp.UpdateChecker;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -42,7 +43,8 @@ public class ErrorController implements FxController {\n \n \tprivate static final ObjectMapper JSON = new ObjectMapper();\n \tprivate static final Logger LOG = LoggerFactory.getLogger(ErrorController.class);\n-\tprivate static final String ERROR_CODES_URL = \"https://api.cryptomator.org/desktop/error-codes.json?error-code=%s\";\n+\tprivate static final String USER_AGENT_VERSION_FORMAT = \"Cryptomator/%s\";\n+\tprivate static final String ERROR_CODES_URL_FORMAT = \"https://api.cryptomator.org/desktop/error-codes.json?error-code=%s\";\n \tprivate static final String SEARCH_URL_FORMAT = \"https://github.com/cryptomator/cryptomator/discussions/categories/errors?discussions_q=category:Errors+%s\";\n \tprivate static final String REPORT_URL_FORMAT = \"https://github.com/cryptomator/cryptomator/discussions/new?category=Errors&title=Error+%s&body=%s\";\n \tprivate static final String SEARCH_ERRORCODE_DELIM = \" OR \";\n@@ -67,6 +69,7 @@ public class ErrorController implements FxController {\n \tprivate final Stage window;\n \tprivate final Environment environment;\n \tprivate final ExecutorService executorService;\n+\tprivate final UpdateChecker updateChecker;\n \n \tprivate final BooleanProperty copiedDetails = new SimpleBooleanProperty();\n \tprivate final ObjectProperty<ErrorDiscussion> matchingErrorDiscussion = new SimpleObjectProperty<>();\n@@ -75,14 +78,15 @@ public class ErrorController implements FxController {\n \tprivate final BooleanProperty askedForLookupDatabasePermission = new SimpleBooleanProperty();\n \n \t@Inject\n-\tErrorController(Application application, @Named(\"stackTrace\") String stackTrace, ErrorCode errorCode, @Nullable Scene previousScene, Stage window, Environment environment, ExecutorService executorService) {\n+\tErrorController(Application application, @Named(\"stackTrace\") String stackTrace, ErrorCode errorCode, @Nullable Scene previousScene, Stage window, Environment environment, ExecutorService executorService, UpdateChecker updateChecker) {\n \t\tthis.application = application;\n \t\tthis.stackTrace = stackTrace;\n \t\tthis.errorCode = errorCode;\n \t\tthis.previousScene = previousScene;\n \t\tthis.window = window;\n \t\tthis.environment = environment;\n \t\tthis.executorService = executorService;\n+\t\tthis.updateChecker = updateChecker;\n \t}\n \n \t@FXML\n@@ -146,7 +150,8 @@ public void lookUpSolution() {\n \t\taskedForLookupDatabasePermission.set(true);\n \t\tHttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build();\n \t\tHttpRequest httpRequest = HttpRequest.newBuilder()//\n-\t\t\t\t.uri(URI.create(ERROR_CODES_URL.formatted(URLEncoder.encode(errorCode.toString(),StandardCharsets.UTF_8))))//\n+\t\t\t\t.header(\"User-Agent\", USER_AGENT_VERSION_FORMAT.formatted(updateChecker.getCurrentVersion()))\n+\t\t\t\t.uri(URI.create(ERROR_CODES_URL_FORMAT.formatted(URLEncoder.encode(errorCode.toString(),StandardCharsets.UTF_8))))//\n \t\t\t\t.build();\n \t\thttpClient.sendAsync(httpRequest, HttpResponse.BodyHandlers.ofInputStream())//\n \t\t\t\t.thenAcceptAsync(this::loadHttpResponse, executorService)//",
      "parent_sha": "666cd4a4f05367a4a5723d1fcec9b3517bd6c451"
    }
  },
  {
    "oid": "3ea6da3c6d8234c819bf87ab2cbc1ea37c96320b",
    "message": "Fixed thrown exception",
    "date": "2023-07-19T13:36:23Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/3ea6da3c6d8234c819bf87ab2cbc1ea37c96320b",
    "details": {
      "sha": "11671e4af8700b467645df0d8247cdf38912334e",
      "filename": "src/main/java/org/cryptomator/common/mount/MountWithinParentUtil.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/3ea6da3c6d8234c819bf87ab2cbc1ea37c96320b/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmount%2FMountWithinParentUtil.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/3ea6da3c6d8234c819bf87ab2cbc1ea37c96320b/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmount%2FMountWithinParentUtil.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fmount%2FMountWithinParentUtil.java?ref=3ea6da3c6d8234c819bf87ab2cbc1ea37c96320b",
      "patch": "@@ -30,7 +30,7 @@ static void prepareParentNoMountPoint(Path mountPoint) throws IllegalMountPointE\n \t\tif (!mpExists && !hideExists) { //neither mountpoint nor hideaway exist\n \t\t\tthrow new MountPointNotExistingException(mountPoint);\n \t\t} else if (!mpExists) { //only hideaway exists\n-\t\t\tcheckIsDirectory(hideaway);\n+\t\t\tcheckIsHideawayDirectory(mountPoint, hideaway);\n \t\t\tLOG.info(\"Mountpoint {} seems to be not properly cleaned up. Will be fixed on unmount.\", mountPoint);\n \t\t\ttry {\n \t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n@@ -86,9 +86,7 @@ private static boolean removeResidualJunction(Path path) {\n \t}\n \n \tprivate static void removeResidualHideaway(Path mountPoint, Path hideaway) throws IOException {\n-\t\tif (!Files.isDirectory(hideaway, LinkOption.NOFOLLOW_LINKS)) {\n-\t\t\tthrow new HideawayNotDirectoryException(mountPoint, hideaway);\n-\t\t}\n+\t\tcheckIsHideawayDirectory(mountPoint, hideaway);\n \t\tFiles.delete(hideaway); //Fails if not empty\n \t}\n \n@@ -134,6 +132,12 @@ private static void checkIsDirectory(Path toCheck) throws IllegalMountPointExcep\n \t\t}\n \t}\n \n+\tprivate static void checkIsHideawayDirectory(Path mountPoint, Path hideawayToCheck) {\n+\t\tif (!Files.isDirectory(hideawayToCheck, LinkOption.NOFOLLOW_LINKS)) {\n+\t\t\tthrow new HideawayNotDirectoryException(mountPoint, hideawayToCheck);\n+\t\t}\n+\t}\n+\n \tprivate static void checkIsEmpty(Path toCheck) throws IllegalMountPointException, IOException {\n \t\ttry (var dirStream = Files.list(toCheck)) {\n \t\t\tif (dirStream.findFirst().isPresent()) {",
      "parent_sha": "bb0b1b35926771e55832a05a6206abd14dba866f"
    }
  },
  {
    "oid": "2a704d5eb49c0fd509c72fdfb7ff7192e8a5cb09",
    "message": "init collator once",
    "date": "2023-05-05T09:45:02Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/2a704d5eb49c0fd509c72fdfb7ff7192e8a5cb09",
    "details": {
      "sha": "1d2f22da74f6c274a3e97922261409da218c2bf7",
      "filename": "src/main/java/org/cryptomator/launcher/SupportedLanguages.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/2a704d5eb49c0fd509c72fdfb7ff7192e8a5cb09/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FSupportedLanguages.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/2a704d5eb49c0fd509c72fdfb7ff7192e8a5cb09/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FSupportedLanguages.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FSupportedLanguages.java?ref=2a704d5eb49c0fd509c72fdfb7ff7192e8a5cb09",
      "patch": "@@ -31,11 +31,11 @@ public class SupportedLanguages {\n \tpublic SupportedLanguages(Settings settings) {\n \t\tvar preferredLanguage = settings.languageProperty().get();\n \t\tpreferredLocale = preferredLanguage == null ? Locale.getDefault() : Locale.forLanguageTag(preferredLanguage);\n-\t\tvar sorted = LANGUAGE_TAGS.stream().sorted((a, b) -> {\n-\t\t\tvar collator = Collator.getInstance(preferredLocale);\n-\t\t\tcollator.setStrength(Collator.PRIMARY);\n-\t\t\treturn collator.compare(Locale.forLanguageTag(a).getDisplayName(), Locale.forLanguageTag(b).getDisplayName());\n-\t\t}).collect(Collectors.toList());\n+\t\tvar collator = Collator.getInstance(preferredLocale);\n+\t\tcollator.setStrength(Collator.PRIMARY);\n+\t\tvar sorted = LANGUAGE_TAGS.stream() //\n+\t\t\t\t.sorted((a, b) -> collator.compare(Locale.forLanguageTag(a).getDisplayName(), Locale.forLanguageTag(b).getDisplayName())) //\n+\t\t\t\t.collect(Collectors.toList());\n \t\tsorted.add(0, Settings.DEFAULT_LANGUAGE);\n \t\tsorted.add(1, ENGLISH);\n \t\tsortedLanguageTags = Collections.unmodifiableList(sorted);",
      "parent_sha": "7d62fc78de92627f916da5c0561f8103220b543d"
    }
  },
  {
    "oid": "0983120712ab20878f863ebad3843360053e8fab",
    "message": "Removed Syso logging",
    "date": "2016-09-02T17:21:54Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/0983120712ab20878f863ebad3843360053e8fab",
    "details": {
      "sha": "0c40d7e0f292765edabd48622f615c630fa45809",
      "filename": "main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/Tarpit.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/0983120712ab20878f863ebad3843360053e8fab/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2FTarpit.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/0983120712ab20878f863ebad3843360053e8fab/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2FTarpit.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2FTarpit.java?ref=0983120712ab20878f863ebad3843360053e8fab",
      "patch": "@@ -32,12 +32,12 @@ class Tarpit implements Serializable {\n \tprivate final Set<FrontendId> validFrontendIds = synchronizedSet(new HashSet<>());\n \n \t@Inject\n-\tpublic Tarpit() {}\n+\tpublic Tarpit() {\n+\t}\n \n \tpublic void setValidFrontendIds(Collection<FrontendId> validFrontendIds) {\n \t\tthis.validFrontendIds.retainAll(validFrontendIds);\n \t\tthis.validFrontendIds.addAll(validFrontendIds);\n-\t\tvalidFrontendIds.forEach(System.out::println);\n \t}\n \n \tpublic void handle(HttpServletRequest req) {",
      "parent_sha": "dc117c8415b71d3543471dfd937c9b671c9852c3"
    }
  },
  {
    "oid": "fd4010c6c9d1458fe566de4077287a01fb47f9f9",
    "message": "cleanup",
    "date": "2021-05-06T10:43:15Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/fd4010c6c9d1458fe566de4077287a01fb47f9f9",
    "details": {
      "sha": "0a66612ca503183eaa9e8f377aa80e1ed5c71cc1",
      "filename": "main/commons/src/main/java/org/cryptomator/common/vaults/VaultListManager.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/fd4010c6c9d1458fe566de4077287a01fb47f9f9/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultListManager.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/fd4010c6c9d1458fe566de4077287a01fb47f9f9/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultListManager.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultListManager.java?ref=fd4010c6c9d1458fe566de4077287a01fb47f9f9",
      "patch": "@@ -29,6 +29,7 @@\n \n import static org.cryptomator.common.Constants.MASTERKEY_FILENAME;\n import static org.cryptomator.common.Constants.VAULTCONFIG_FILENAME;\n+import static org.cryptomator.common.vaults.VaultState.Value.ERROR;\n \n @Singleton\n public class VaultListManager {\n@@ -58,14 +59,13 @@ public Vault add(Path pathToVault) throws IOException {\n \t\tif (CryptoFileSystemProvider.checkDirStructureForVault(normalizedPathToVault, VAULTCONFIG_FILENAME, MASTERKEY_FILENAME) == DirStructure.UNRELATED) {\n \t\t\tthrow new NoSuchFileException(normalizedPathToVault.toString(), null, \"Not a vault directory\");\n \t\t}\n-\t\tOptional<Vault> alreadyExistingVault = get(normalizedPathToVault);\n-\t\tif (alreadyExistingVault.isPresent()) {\n-\t\t\treturn alreadyExistingVault.get();\n-\t\t} else {\n-\t\t\tVault newVault = create(newVaultSettings(normalizedPathToVault));\n-\t\t\tvaultList.add(newVault);\n-\t\t\treturn newVault;\n-\t\t}\n+\n+\t\treturn get(normalizedPathToVault) //\n+\t\t\t\t.orElseGet(() -> {\n+\t\t\t\t\tVault newVault = create(newVaultSettings(normalizedPathToVault));\n+\t\t\t\t\tvaultList.add(newVault);\n+\t\t\t\t\treturn newVault;\n+\t\t\t\t});\n \t}\n \n \tprivate VaultSettings newVaultSettings(Path path) {\n@@ -99,7 +99,7 @@ private Vault create(VaultSettings vaultSettings) {\n \t\t\tcompBuilder.initialVaultState(vaultState);\n \t\t} catch (IOException e) {\n \t\t\tLOG.warn(\"Failed to determine vault state for \" + vaultSettings.path().get(), e);\n-\t\t\tcompBuilder.initialVaultState(VaultState.Value.ERROR);\n+\t\t\tcompBuilder.initialVaultState(ERROR);\n \t\t\tcompBuilder.initialErrorCause(e);\n \t\t}\n \t\treturn compBuilder.build().vault();\n@@ -111,14 +111,14 @@ public static VaultState.Value redetermineVaultState(Vault vault) {\n \t\treturn switch (previousState) {\n \t\t\tcase LOCKED, NEEDS_MIGRATION, MISSING -> {\n \t\t\t\ttry {\n-\t\t\t\t\tVaultState.Value determinedState = determineVaultState(vault.getPath());\n+\t\t\t\t\tvar determinedState = determineVaultState(vault.getPath());\n \t\t\t\t\tstate.set(determinedState);\n \t\t\t\t\tyield determinedState;\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tLOG.warn(\"Failed to determine vault state for \" + vault.getPath(), e);\n-\t\t\t\t\tstate.set(VaultState.Value.ERROR);\n+\t\t\t\t\tstate.set(ERROR);\n \t\t\t\t\tvault.setLastKnownException(e);\n-\t\t\t\t\tyield VaultState.Value.ERROR;\n+\t\t\t\t\tyield ERROR;\n \t\t\t\t}\n \t\t\t}\n \t\t\tcase ERROR, UNLOCKED, PROCESSING -> previousState;",
      "parent_sha": "aa2900fa9e6f35ccd2f70ec105dd942de5706de1"
    }
  },
  {
    "oid": "67485b76af2dda799fd160f9d7928c712333d2c9",
    "message": "Make sure that adding a vault located at ~/foo is noop when a vault located at /home/user/foo already exists\nfixes #1032",
    "date": "2020-01-08T15:50:08Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/67485b76af2dda799fd160f9d7928c712333d2c9",
    "details": {
      "sha": "e950fd4e284657ca12c526478a20501b15dc51b6",
      "filename": "main/commons/src/main/java/org/cryptomator/common/vaults/VaultListManager.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/67485b76af2dda799fd160f9d7928c712333d2c9/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultListManager.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/67485b76af2dda799fd160f9d7928c712333d2c9/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultListManager.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultListManager.java?ref=67485b76af2dda799fd160f9d7928c712333d2c9",
      "patch": "@@ -18,6 +18,7 @@\n import javax.inject.Inject;\n import javax.inject.Singleton;\n import java.io.IOException;\n+import java.nio.file.Files;\n import java.nio.file.NoSuchFileException;\n import java.nio.file.Path;\n import java.util.Collection;\n@@ -67,7 +68,13 @@ private void addAll(Collection<VaultSettings> vaultSettings) {\n \t}\n \t\n \tprivate Optional<Vault> get(Path vaultPath) {\n-\t\treturn vaultList.stream().filter(v -> v.getPath().equals(vaultPath)).findAny();\n+\t\treturn vaultList.stream().filter(v -> {\n+\t\t\ttry {\n+\t\t\t\treturn Files.isSameFile(vaultPath, v.getPath());\n+\t\t\t} catch (IOException e) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}).findAny();\n \t}\n \n \tprivate Vault create(VaultSettings vaultSettings) {",
      "parent_sha": "270e60d7cf0f1c3bfb41ee5894a8aba3db54296d"
    }
  },
  {
    "oid": "bc76ab285d6068a386d73011b02dadc9c222b497",
    "message": "fixed unit test",
    "date": "2015-06-27T06:09:12Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/bc76ab285d6068a386d73011b02dadc9c222b497",
    "details": {
      "sha": "017d3331246b5acd2c6ef61a668dd578202c7dbb",
      "filename": "main/crypto-aes/src/test/java/org/cryptomator/crypto/aes256/Aes256CryptorTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/bc76ab285d6068a386d73011b02dadc9c222b497/main%2Fcrypto-aes%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fcrypto%2Faes256%2FAes256CryptorTest.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/bc76ab285d6068a386d73011b02dadc9c222b497/main%2Fcrypto-aes%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fcrypto%2Faes256%2FAes256CryptorTest.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcrypto-aes%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Fcrypto%2Faes256%2FAes256CryptorTest.java?ref=bc76ab285d6068a386d73011b02dadc9c222b497",
      "patch": "@@ -80,7 +80,7 @@ public void testIntegrityViolationDuringDecryption() throws IOException, Decrypt\n \t\tfinal Aes256Cryptor cryptor = new Aes256Cryptor();\n \n \t\t// encrypt:\n-\t\tfinal ByteBuffer encryptedData = ByteBuffer.allocate(256);\n+\t\tfinal ByteBuffer encryptedData = ByteBuffer.allocate(96 + plaintextData.length + 4096);\n \t\tfinal SeekableByteChannel encryptedOut = new ByteBufferBackedSeekableChannel(encryptedData);\n \t\tcryptor.encryptFile(plaintextIn, encryptedOut);\n \t\tIOUtils.closeQuietly(plaintextIn);\n@@ -112,7 +112,7 @@ public void testEncryptionAndDecryption() throws IOException, DecryptFailedExcep\n \t\tfinal Aes256Cryptor cryptor = new Aes256Cryptor();\n \n \t\t// encrypt:\n-\t\tfinal ByteBuffer encryptedData = ByteBuffer.allocate(256);\n+\t\tfinal ByteBuffer encryptedData = ByteBuffer.allocate(96 + plaintextData.length + 4096);\n \t\tfinal SeekableByteChannel encryptedOut = new ByteBufferBackedSeekableChannel(encryptedData);\n \t\tcryptor.encryptFile(plaintextIn, encryptedOut);\n \t\tIOUtils.closeQuietly(plaintextIn);",
      "parent_sha": "0d3a5b4e70cb3fd5f8d131f134a097d15a6e389f"
    }
  },
  {
    "oid": "55c7636a7b40e525d0375f40f6fe32db82d0dda1",
    "message": "simplified toggle boolean\n[ci skip]",
    "date": "2021-09-22T10:17:47Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/55c7636a7b40e525d0375f40f6fe32db82d0dda1",
    "details": {
      "sha": "c8107415edf440a670dba8f45e50d9c31e675191",
      "filename": "src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/55c7636a7b40e525d0375f40f6fe32db82d0dda1/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowTitleController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/55c7636a7b40e525d0375f40f6fe32db82d0dda1/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowTitleController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowTitleController.java?ref=55c7636a7b40e525d0375f40f6fe32db82d0dda1",
      "patch": "@@ -63,11 +63,7 @@ public void initialize() {\n \t\t});\n \t\ttitleBar.setOnMouseClicked(event -> {\n \t\t\tif (event.getButton().equals(MouseButton.PRIMARY) && event.getClickCount() == 2) {\n-\t\t\t\tif (window.isFullScreen()) {\n-\t\t\t\t\twindow.setFullScreen(false);\n-\t\t\t\t} else {\n-\t\t\t\t\twindow.setFullScreen(true);\n-\t\t\t\t}\n+\t\t\t\twindow.setFullScreen(!window.isFullScreen());\n \t\t\t}\n \t\t});\n \t\ttitleBar.setOnMouseDragged(event -> {",
      "parent_sha": "af4603f022237d2ad1060d24b74d08cec779d0de"
    }
  },
  {
    "oid": "6eca8f2e0c84c574d1055856c2ef00cd4d04422e",
    "message": "Added support for quote escaped values for mount arguments",
    "date": "2020-11-17T20:56:43Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/6eca8f2e0c84c574d1055856c2ef00cd4d04422e",
    "details": {
      "sha": "2c84b901e967301afb18264fbf70e4c836d1e1fe",
      "filename": "main/commons/src/main/java/org/cryptomator/common/vaults/FuseVolume.java",
      "status": "modified",
      "additions": 31,
      "deletions": 2,
      "changes": 33,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/6eca8f2e0c84c574d1055856c2ef00cd4d04422e/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FFuseVolume.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/6eca8f2e0c84c574d1055856c2ef00cd4d04422e/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FFuseVolume.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FFuseVolume.java?ref=6eca8f2e0c84c574d1055856c2ef00cd4d04422e",
      "patch": "@@ -1,6 +1,5 @@\n package org.cryptomator.common.vaults;\n \n-import com.google.common.base.Splitter;\n import org.apache.commons.lang3.SystemUtils;\n import org.cryptomator.common.mountpoint.InvalidMountPointException;\n import org.cryptomator.common.mountpoint.MountPointChooser;\n@@ -18,12 +17,19 @@\n import javax.inject.Inject;\n import javax.inject.Named;\n import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.SortedSet;\n+import java.util.regex.MatchResult;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n public class FuseVolume extends AbstractVolume {\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(FuseVolume.class);\n \n+\tprivate static final Pattern pattern = Pattern.compile(\"[^\\\\s\\\"']+|\\\"([^\\\"]*)\\\"|'([^']*)'\"); //Thanks to https://stackoverflow.com/a/366532\n+\n \tprivate Mount mount;\n \n \t@Inject\n@@ -51,7 +57,30 @@ private void mount(Path root, String mountFlags) throws VolumeException {\n \t}\n \n \tprivate String[] splitFlags(String str) {\n-\t\treturn Splitter.on(' ').splitToList(str).toArray(String[]::new);\n+\t\tList<String> strings = new ArrayList<>();\n+\t\tList<MatchResult> results = pattern.matcher(str).results().collect(Collectors.toList());\n+\t\tfor (int i = 0; i < results.size(); i++) {\n+\t\t\tMatchResult current = results.get(i);\n+\t\t\tMatchResult next = i + 1 < results.size() ? results.get(i + 1) : null;\n+\t\t\tif (getSpecialString(next) != null) {\n+\t\t\t\t//\"next\" is a quoted argument\n+\t\t\t\t//--> \"next\" must be joined with \"current\" and is skipped in the regular iteration\n+\t\t\t\tstrings.add(current.group() + getSpecialString(next));\n+\t\t\t\ti++;\n+\t\t\t} else {\n+\t\t\t\t//\"next\" is a normal unquoted string\n+\t\t\t\t//--> Add \"current\" and advance\n+\t\t\t\tstrings.add(current.group());\n+\t\t\t}\n+\t\t}\n+\t\treturn strings.toArray(new String[0]);\n+\t}\n+\n+\tprivate String getSpecialString(MatchResult result) {\n+\t\tif (result == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn result.group(1) != null ? result.group(1) : result.group(2);\n \t}\n \n \t@Override",
      "parent_sha": "9f61ad1941f05a8efda7e518b3e51c8babf2872b"
    }
  },
  {
    "oid": "19e24ba12c13d27d9574b7a142a55b1a4160b603",
    "message": "refactor structure of LockWorkflow class",
    "date": "2020-11-20T11:22:26Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/19e24ba12c13d27d9574b7a142a55b1a4160b603",
    "details": {
      "sha": "5d9a7d11158a36e2b065e9baa2b428eeac9dacb9",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/lock/LockWorkflow.java",
      "status": "modified",
      "additions": 10,
      "deletions": 20,
      "changes": 30,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/19e24ba12c13d27d9574b7a142a55b1a4160b603/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Flock%2FLockWorkflow.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/19e24ba12c13d27d9574b7a142a55b1a4160b603/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Flock%2FLockWorkflow.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Flock%2FLockWorkflow.java?ref=19e24ba12c13d27d9574b7a142a55b1a4160b603",
      "patch": "@@ -47,23 +47,22 @@ public LockWorkflow(@LockWindow Stage lockWindow, @LockWindow Vault vault, UserI\n \n \t@Override\n \tprotected Void call() throws Volume.VolumeException, InterruptedException {\n-\t\tif (!attemptLock()) {\n-\t\t\tattemptForcedLock();\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate boolean attemptLock() {\n \t\ttry {\n \t\t\tvault.lock(false);\n-\t\t\treturn true;\n \t\t} catch (Volume.VolumeException e) {\n \t\t\tLOG.debug(\"Regular lock of {} failed.\", vault.getDisplayName(), e);\n-\t\t\treturn false;\n+\t\t\tvar decision = askUserForAction();\n+\t\t\tswitch (decision) {\n+\t\t\t\tcase FORCE -> vault.lock(true);\n+\t\t\t\tcase CANCEL -> cancel(false);\n+\t\t\t\tdefault -> throw new IllegalArgumentException(\"Unknown decision \" + decision);\n+\t\t\t}\n \t\t}\n+\n+\t\treturn null;\n \t}\n \n-\tprivate boolean attemptForcedLock() throws Volume.VolumeException, InterruptedException {\n+\tprivate LockModule.ForceLockDecision askUserForAction() throws InterruptedException {\n \t\t// show forcedLock dialogue ...\n \t\tPlatform.runLater(() -> {\n \t\t\tlockWindow.setScene(lockForcedScene.get());\n@@ -77,16 +76,7 @@ private boolean attemptForcedLock() throws Volume.VolumeException, InterruptedEx\n \t\t\t}\n \t\t});\n \t\t// ... and wait for answer\n-\t\tswitch (forceLockDecisionLock.awaitInteraction()) {\n-\t\t\tcase FORCE:\n-\t\t\t\tvault.lock(true);\n-\t\t\t\treturn true;\n-\t\t\tcase CANCEL:\n-\t\t\t\tcancel(false);\n-\t\t\t\treturn false;\n-\t\t\tdefault:\n-\t\t\t\treturn false;\n-\t\t}\n+\t\treturn forceLockDecisionLock.awaitInteraction();\n \t}\n \n \t@Override",
      "parent_sha": "c47ce2c7304f12ddf756c5c29ad361cc15cea3e3"
    }
  },
  {
    "oid": "8ecb78abec6ebe0ed6f485b671cb641110c19359",
    "message": "use fixed width for check state icon in list",
    "date": "2021-07-08T14:01:03Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/8ecb78abec6ebe0ed6f485b671cb641110c19359",
    "details": {
      "sha": "ef8a0a68659874ce9f1edba845f4822b43014dc2",
      "filename": "src/main/java/org/cryptomator/ui/health/CheckListCell.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/8ecb78abec6ebe0ed6f485b671cb641110c19359/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/8ecb78abec6ebe0ed6f485b671cb641110c19359/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java?ref=8ecb78abec6ebe0ed6f485b671cb641110c19359",
      "patch": "@@ -8,21 +8,26 @@\n import javafx.beans.binding.Bindings;\n import javafx.geometry.Insets;\n import javafx.geometry.Pos;\n-import javafx.scene.Node;\n import javafx.scene.control.CheckBox;\n import javafx.scene.control.ContentDisplay;\n import javafx.scene.control.ListCell;\n+import javafx.scene.layout.StackPane;\n \n class CheckListCell extends ListCell<Check> {\n \n \tprivate final FontAwesome5IconView stateIcon = new FontAwesome5IconView();\n \tprivate CheckBox checkBox = new CheckBox();\n+\tprivate final StackPane graphicContainer = new StackPane(stateIcon, checkBox);\n \n \tCheckListCell() {\n \t\tsetPadding(new Insets(6));\n \t\tsetAlignment(Pos.CENTER_LEFT);\n \t\tsetContentDisplay(ContentDisplay.LEFT);\n \t\tgetStyleClass().add(\"label\");\n+\t\tgraphicContainer.minWidth(20);\n+\t\tgraphicContainer.maxWidth(20);\n+\t\tgraphicContainer.setAlignment(Pos.CENTER);\n+\n \t\tEasyBind.includeWhen(stateIcon.getStyleClass(), \"glyph-icon-muted\", stateIcon.glyphProperty().isEqualTo(FontAwesome5Icon.INFO_CIRCLE));\n \t\tEasyBind.includeWhen(stateIcon.getStyleClass(), \"glyph-icon-primary\", stateIcon.glyphProperty().isEqualTo(FontAwesome5Icon.CHECK));\n \t\tEasyBind.includeWhen(stateIcon.getStyleClass(), \"glyph-icon-orange\", stateIcon.glyphProperty().isEqualTo(FontAwesome5Icon.EXCLAMATION_TRIANGLE));\n@@ -34,26 +39,21 @@ protected void updateItem(Check item, boolean empty) {\n \t\tsuper.updateItem(item, empty);\n \t\tif (item != null) {\n \t\t\tsetText(item.getLocalizedName());\n-\t\t\tgraphicProperty().bind(EasyBind.map(item.stateProperty(),this::chooseNodeFromState));\n+\t\t\tsetGraphic(graphicContainer);\n+\t\t\tcheckBox.visibleProperty().bind(Bindings.createBooleanBinding(() -> item.getState() == Check.CheckState.RUNNABLE, item.stateProperty()));\n+\t\t\tstateIcon.visibleProperty().bind(Bindings.createBooleanBinding(() -> item.getState() != Check.CheckState.RUNNABLE, item.stateProperty()));\n \t\t\tstateIcon.glyphProperty().bind(Bindings.createObjectBinding(() -> glyphForState(item), item.stateProperty(), item.highestResultSeverityProperty()));\n \t\t\tcheckBox.selectedProperty().bindBidirectional(item.chosenForExecutionProperty());\n \t\t} else {\n-\t\t\tgraphicProperty().unbind();\n+\t\t\tgraphicProperty();\n+\t\t\tcheckBox.visibleProperty().unbind();\n+\t\t\tstateIcon.visibleProperty().unbind();\n \t\t\tsetGraphic(null);\n \t\t\tsetText(null);\n \t\t\tcheckBox.selectedProperty().unbind();\n \t\t}\n \t}\n \n-\t// see getGlyph() for relevant glyphs:\n-\tprivate Node chooseNodeFromState(Check.CheckState state) {\n-\t\tif (state == Check.CheckState.RUNNABLE) {\n-\t\t\treturn checkBox;\n-\t\t} else {\n-\t\t\treturn stateIcon;\n-\t\t}\n-\t}\n-\n \tprivate FontAwesome5Icon glyphForState(Check item) {\n \t\treturn switch (item.getState()) {\n \t\t\tcase RUNNABLE -> null;",
      "parent_sha": "a9db8eb0d5bcf523b9bb5e356203d053fdc09c2a"
    }
  },
  {
    "oid": "70b70c55f3dad48239ab2ad0c063328b3a951332",
    "message": "addtional removal of RTF sequences in strings.properties",
    "date": "2020-03-06T17:49:00Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/70b70c55f3dad48239ab2ad0c063328b3a951332",
    "details": {
      "sha": "08a37a198843657eeffa9f9994cadaabd04b7c35",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/ReadmeGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/70b70c55f3dad48239ab2ad0c063328b3a951332/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FReadmeGenerator.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/70b70c55f3dad48239ab2ad0c063328b3a951332/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FReadmeGenerator.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FReadmeGenerator.java?ref=70b70c55f3dad48239ab2ad0c063328b3a951332",
      "patch": "@@ -43,7 +43,7 @@ public String createVaultStorageLocationReadmeRtf() {\n \t\n \tpublic String createVaultAccessLocationReadmeRtf() {\n \t\treturn createDocument(List.of( //\n-\t\t\t\tresourceBundle.getString(\"addvault.new.readme.accessLocation.1\"), //\n+\t\t\t\tString.format(HEADING,resourceBundle.getString(\"addvault.new.readme.accessLocation.1\")), //\n \t\t\t\tresourceBundle.getString(\"addvault.new.readme.accessLocation.2\"), //\n \t\t\t\tresourceBundle.getString(\"addvault.new.readme.accessLocation.3\")  //\n \t\t));",
      "parent_sha": "99ed87de173e95ed38902f6ed29b008df65f7a75"
    }
  },
  {
    "oid": "f92cf9c9e0412dff4f3e39cd83407a47c041dd4f",
    "message": "Change update check URL",
    "date": "2023-07-27T13:49:38Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/f92cf9c9e0412dff4f3e39cd83407a47c041dd4f",
    "details": {
      "sha": "d70301e783f92526875b147ef7cf05ab946130c4",
      "filename": "src/main/java/org/cryptomator/ui/fxapp/UpdateCheckerModule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/f92cf9c9e0412dff4f3e39cd83407a47c041dd4f/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FUpdateCheckerModule.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/f92cf9c9e0412dff4f3e39cd83407a47c041dd4f/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FUpdateCheckerModule.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FUpdateCheckerModule.java?ref=f92cf9c9e0412dff4f3e39cd83407a47c041dd4f",
      "patch": "@@ -28,7 +28,7 @@ public abstract class UpdateCheckerModule {\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(UpdateCheckerModule.class);\n \n-\tprivate static final URI LATEST_VERSION_URI = URI.create(\"https://api.cryptomator.org/updates/latestVersion.json\");\n+\tprivate static final URI LATEST_VERSION_URI = URI.create(\"https://api.cryptomator.org/desktop/latest-version.json\");\n \tprivate static final Duration UPDATE_CHECK_INTERVAL = Duration.hours(3);\n \tprivate static final Duration DISABLED_UPDATE_CHECK_INTERVAL = Duration.hours(100000); // Duration.INDEFINITE leads to overflows...\n ",
      "parent_sha": "8b9d5d136e67945b497d2b43977afe199a25478f"
    }
  },
  {
    "oid": "38c102a64b59ed2d6646edfcb491e6cf3328d979",
    "message": "refactored code by removing unnecessary observables",
    "date": "2023-11-27T11:46:29Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/38c102a64b59ed2d6646edfcb491e6cf3328d979",
    "details": {
      "sha": "d617a5db3356b67802a71bef6c92096151c18590",
      "filename": "src/main/java/org/cryptomator/common/vaults/Vault.java",
      "status": "modified",
      "additions": 16,
      "deletions": 18,
      "changes": 34,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/38c102a64b59ed2d6646edfcb491e6cf3328d979/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/38c102a64b59ed2d6646edfcb491e6cf3328d979/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java?ref=38c102a64b59ed2d6646edfcb491e6cf3328d979",
      "patch": "@@ -10,7 +10,6 @@\n \n import org.apache.commons.lang3.SystemUtils;\n import org.cryptomator.common.Constants;\n-import org.cryptomator.common.ObservableUtil;\n import org.cryptomator.common.mount.ActualMountService;\n import org.cryptomator.common.mount.FuseRestartRequiredException;\n import org.cryptomator.common.mount.Mounter;\n@@ -83,16 +82,16 @@ public class Vault {\n \tprivate final AtomicReference<Mounter.MountHandle> mountHandle = new AtomicReference<>(null);\n \n \t@Inject\n-\tVault(Settings settings,\n-\t\t  VaultSettings vaultSettings,\n-\t\t  VaultConfigCache configCache,\n-\t\t  AtomicReference<CryptoFileSystem> cryptoFileSystem,\n-\t\t  List<MountService> mountProviders,\n-\t\t  VaultState state,\n-\t\t  @Named(\"lastKnownException\") ObjectProperty<Exception> lastKnownException,\n-\t\t  VaultStats stats,\n-\t\t  Mounter mounter,\n-\t\t  @Named(\"vaultMountService\") ObservableValue<ActualMountService> actualMountService,\n+\tVault(Settings settings, //\n+\t\t  VaultSettings vaultSettings, //\n+\t\t  VaultConfigCache configCache, //\n+\t\t  AtomicReference<CryptoFileSystem> cryptoFileSystem, //\n+\t\t  List<MountService> mountProviders, //\n+\t\t  VaultState state, //\n+\t\t  @Named(\"lastKnownException\") ObjectProperty<Exception> lastKnownException, //\n+\t\t  VaultStats stats, //\n+\t\t  Mounter mounter, //\n+\t\t  @Named(\"vaultMountService\") ObservableValue<ActualMountService> actualMountService, //\n \t\t  @Named(\"FUPFMS\") AtomicReference<MountService> firstUsedProblematicFuseMountService) {\n \t\tthis.settings = settings;\n \t\tthis.vaultSettings = vaultSettings;\n@@ -167,13 +166,12 @@ public synchronized void unlock(MasterkeyLoader keyLoader) throws CryptoExceptio\n \t\t\tthrow new IllegalStateException(\"Already unlocked.\");\n \t\t}\n \t\tvar fallbackProvider = mountProviders.stream().findFirst().orElse(null);\n-\t\tvar defMntServ = ObservableUtil.mapWithDefault(settings.mountService, serviceName -> mountProviders.stream().filter(s -> s.getClass().getName().equals(serviceName)).findFirst().orElse(fallbackProvider), fallbackProvider).getValue();\n-\t\tvar selMntServ = ObservableUtil.mapWithDefault(vaultSettings.mountService, serviceName -> mountProviders.stream().filter(s -> s.getClass().getName().equals(serviceName)).findFirst().orElse(defMntServ), defMntServ);\n-\t\tvar fuseRestartRequired = selMntServ.map(s -> //\n-\t\t\t\tfirstUsedProblematicFuseMountService.get() != null //\n-\t\t\t\t\t\t&& VaultModule.isProblematicFuseService(s) //\n-\t\t\t\t\t\t&& !firstUsedProblematicFuseMountService.get().equals(s)).getValue();\n-\t\tif(fuseRestartRequired){\n+\t\tvar defMntServ = mountProviders.stream().filter(s -> s.getClass().getName().equals(settings.mountService.getValue())).findFirst().orElse(fallbackProvider);\n+\t\tvar selMntServ = mountProviders.stream().filter(s -> s.getClass().getName().equals(vaultSettings.mountService.getValue())).findFirst().orElse(defMntServ);\n+\t\tvar fuseRestartRequired = firstUsedProblematicFuseMountService.get() != null //\n+\t\t\t\t&& VaultModule.isProblematicFuseService(selMntServ) //\n+\t\t\t\t&& !firstUsedProblematicFuseMountService.get().equals(selMntServ);\n+\t\tif (fuseRestartRequired) {\n \t\t\tthrow new FuseRestartRequiredException(\"fuseRestartRequired\");\n \t\t}\n ",
      "parent_sha": "1052e4c3d2a0d4a5efe72d8e28124ad4bdd8f8d5"
    }
  },
  {
    "oid": "d58307d1d65fd9734f9dd54e22604129c76c8b1b",
    "message": "optimize vaultList height update to avoid repeated bindings",
    "date": "2024-07-01T11:09:53Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/d58307d1d65fd9734f9dd54e22604129c76c8b1b",
    "details": {
      "sha": "db615061e6bdcb5a6c1a3e2db91504c8bc5d2ac6",
      "filename": "src/main/java/org/cryptomator/ui/mainwindow/VaultListController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/d58307d1d65fd9734f9dd54e22604129c76c8b1b/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/d58307d1d65fd9734f9dd54e22604129c76c8b1b/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FVaultListController.java?ref=d58307d1d65fd9734f9dd54e22604129c76c8b1b",
      "patch": "@@ -124,7 +124,7 @@ public void initialize() {\n \t\t\t}\n \t\t});\n \n-\t\tvaults.addListener((ListChangeListener<Vault>) _ -> vaultList.prefHeightProperty().bind(vaultList.fixedCellSizeProperty().multiply(vaultList.getItems().size())));\n+\t\tvaultList.prefHeightProperty().bind(Bindings.size(vaultList.getItems()).multiply(vaultList.fixedCellSizeProperty()));\n \n \t\tselectedVault.bind(vaultList.getSelectionModel().selectedItemProperty());\n \t\tvaults.addListener((ListChangeListener.Change<? extends Vault> c) -> {",
      "parent_sha": "3e6204a657e032a37a1211d1643c3aa4e6f12eed"
    }
  },
  {
    "oid": "5f11e1aa8b2fbe705f6837761c7499d1e80f1a02",
    "message": "Next attempt to provide a solution for #656.",
    "date": "2018-09-17T20:39:46Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/5f11e1aa8b2fbe705f6837761c7499d1e80f1a02",
    "details": {
      "sha": "8ee283c36f537a2ac173aa6b1dcd019afef7769c",
      "filename": "main/launcher/src/main/java/org/cryptomator/launcher/MainApplication.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/5f11e1aa8b2fbe705f6837761c7499d1e80f1a02/main%2Flauncher%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FMainApplication.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/5f11e1aa8b2fbe705f6837761c7499d1e80f1a02/main%2Flauncher%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FMainApplication.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Flauncher%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Flauncher%2FMainApplication.java?ref=5f11e1aa8b2fbe705f6837761c7499d1e80f1a02",
      "patch": "@@ -20,9 +20,11 @@ public class MainApplication extends Application {\n \tprivate Stage primaryStage;\n \n \t@Override\n-\tpublic void start(Stage primaryStage) throws Exception {\n+\tpublic void start(Stage primaryStage) {\n \t\tLOG.info(\"JavaFX application started.\");\n \t\tthis.primaryStage = primaryStage;\n+\t\tprimaryStage.setMinWidth(652.0);\n+\t\tprimaryStage.setMinHeight(440.0);\n \n \t\tLauncherModule launcherModule = new LauncherModule(this, primaryStage);\n \t\tLauncherComponent launcherComponent = DaggerLauncherComponent.builder() //\n@@ -33,13 +35,11 @@ public void start(Stage primaryStage) throws Exception {\n \n \t\tMainController mainCtrl = launcherComponent.fxmlLoader().load(\"/fxml/main.fxml\");\n \t\tmainCtrl.initStage(primaryStage);\n-\n \t\tprimaryStage.show();\n-\t\tprimaryStage.sizeToScene();\n \t}\n \n \t@Override\n-\tpublic void stop() throws Exception {\n+\tpublic void stop() {\n \t\tassert primaryStage != null;\n \t\tprimaryStage.hide();\n \t\tLOG.info(\"JavaFX application stopped.\");",
      "parent_sha": "0ac1b406b712f9624e93836d509b09d2340a3c00"
    }
  },
  {
    "oid": "8b717993ed47da836c20875e45518b8fe08f9874",
    "message": "Coverity 72944",
    "date": "2016-03-04T16:45:33Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/8b717993ed47da836c20875e45518b8fe08f9874",
    "details": {
      "sha": "b94ee9ed85ed2435829f033b1448e931aba6bd0b",
      "filename": "main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/ExclusiveSharedLockManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/8b717993ed47da836c20875e45518b8fe08f9874/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2Fjackrabbitservlet%2FExclusiveSharedLockManager.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/8b717993ed47da836c20875e45518b8fe08f9874/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2Fjackrabbitservlet%2FExclusiveSharedLockManager.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2Fjackrabbitservlet%2FExclusiveSharedLockManager.java?ref=8b717993ed47da836c20875e45518b8fe08f9874",
      "patch": "@@ -158,7 +158,7 @@ private ActiveLock getLockInternal(Type type, Scope scope, FileSystemResourceLoc\n \t\t}\n \t\t// or otherwise look for parent locks:\n \t\tif (locator.parent().isPresent()) {\n-\t\t\treturn getLockInternal(type, scope, locator.parent().get(), depth++);\n+\t\t\treturn getLockInternal(type, scope, locator.parent().get(), depth + 1);\n \t\t} else {\n \t\t\treturn null;\n \t\t}",
      "parent_sha": "f70d4864622af49403499e07571646d94ad7780a"
    }
  },
  {
    "oid": "1a6258eb17e0156700414436499f21e58ebb2292",
    "message": "revert eea568ca4e58cdc20f464a0c25aa3788ce1f4b2b and e2898f0c8bb78f129e9fd85bd18ced52cf5e3087",
    "date": "2023-01-04T11:52:16Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/1a6258eb17e0156700414436499f21e58ebb2292",
    "details": {
      "sha": "db35b5a11035d75d44f03496cb2ccb0441317e3a",
      "filename": "src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/1a6258eb17e0156700414436499f21e58ebb2292/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultPasswordController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/1a6258eb17e0156700414436499f21e58ebb2292/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultPasswordController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultPasswordController.java?ref=1a6258eb17e0156700414436499f21e58ebb2292",
      "patch": "@@ -176,7 +176,7 @@ private void createVault(Path path) throws IOException {\n \t\t\t// 2. initialize vault:\n \t\t\ttry {\n \t\t\t\tMasterkeyLoader loader = ignored -> masterkey.copy();\n-\t\t\t\tCryptoFileSystemProperties fsProps = CryptoFileSystemProperties.cryptoFileSystemProperties().withCipherCombo(CryptorProvider.Scheme.SIV_GCM).withKeyLoader(loader).build();\n+\t\t\t\tCryptoFileSystemProperties fsProps = CryptoFileSystemProperties.cryptoFileSystemProperties().withCipherCombo(CryptorProvider.Scheme.SIV_CTRMAC).withKeyLoader(loader).build();\n \t\t\t\tCryptoFileSystemProvider.initialize(path, fsProps, DEFAULT_KEY_ID);\n \n \t\t\t\t// 3. write vault-internal readme file:",
      "parent_sha": "9c0c6a91fb296d46e73f1609cf7fe853e6ba2b56"
    }
  },
  {
    "oid": "103ea9047ffc1b53c26488e3eaacd7125eaccadc",
    "message": "updated method and paramternames to openMountWithWebdavUri",
    "date": "2015-05-18T13:13:25Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/103ea9047ffc1b53c26488e3eaacd7125eaccadc",
    "details": {
      "sha": "65e023377897037747324306c6628fbb5a8d20f0",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/util/mount/LinuxGvfsWebDavMounter.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/103ea9047ffc1b53c26488e3eaacd7125eaccadc/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Futil%2Fmount%2FLinuxGvfsWebDavMounter.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/103ea9047ffc1b53c26488e3eaacd7125eaccadc/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Futil%2Fmount%2FLinuxGvfsWebDavMounter.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Futil%2Fmount%2FLinuxGvfsWebDavMounter.java?ref=103ea9047ffc1b53c26488e3eaacd7125eaccadc",
      "patch": "@@ -53,9 +53,9 @@ public WebDavMount mount(URI uri, String name) throws CommandFailedException {\n \t\t\t\t.addEnv(\"DAV_SSP\", uri.getRawSchemeSpecificPart());\n \t\tmountScript.execute();\n \t\ttry{\n-\t\t\topenFMWithWebdavSchema(\"dav:\"+uri.getRawSchemeSpecificPart()).execute();\n+\t\t\topenMountWithWebdavUri(\"dav:\"+uri.getRawSchemeSpecificPart()).execute();\n \t\t}catch(CommandFailedException exception){\n-\t\t\topenFMWithWebdavSchema(\"webdav:\"+uri.getRawSchemeSpecificPart()).execute();\n+\t\t\topenMountWithWebdavUri(\"webdav:\"+uri.getRawSchemeSpecificPart()).execute();\n \t\t}\n \t\treturn new AbstractWebDavMount() {\n \t\t\t@Override\n@@ -75,11 +75,11 @@ public void unmount() throws CommandFailedException {\n \t\t};\n \t}\n \n-\tprivate Script openFMWithWebdavSchema(String schemaName){\n+\tprivate Script openMountWithWebdavUri(String webdavUri){\n \t\treturn Script.fromLines(\n \t\t\t\t\"set -x\",\n-\t\t\t\t\"xdg-open \\\"$DAV_SCHEME\\\"\")\n-\t\t\t\t.addEnv(\"DAV_SCHEME\", schemaName);\n+\t\t\t\t\"xdg-open \\\"$DAV_URI\\\"\")\n+\t\t\t\t.addEnv(\"DAV_URI\", webdavUri);\n \t}\n \n }",
      "parent_sha": "f4b07b9807b5b09445900c316631815c95f900f9"
    }
  },
  {
    "oid": "cd64460e626ebd0822fef8e3a88ad47d6ddb3ea8",
    "message": "added shake animation",
    "date": "2019-10-09T14:15:58Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/cd64460e626ebd0822fef8e3a88ad47d6ddb3ea8",
    "details": {
      "sha": "2ca6ebb6915d0bab46ece3dfe0ccf3dea6a61d34",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyCreationController.java",
      "status": "modified",
      "additions": 33,
      "deletions": 1,
      "changes": 34,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/cd64460e626ebd0822fef8e3a88ad47d6ddb3ea8/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyCreationController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/cd64460e626ebd0822fef8e3a88ad47d6ddb3ea8/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyCreationController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyCreationController.java?ref=cd64460e626ebd0822fef8e3a88ad47d6ddb3ea8",
      "patch": "@@ -1,11 +1,16 @@\n package org.cryptomator.ui.recoverykey;\n \n import dagger.Lazy;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.KeyValue;\n+import javafx.animation.Timeline;\n import javafx.beans.property.ReadOnlyStringProperty;\n import javafx.beans.property.StringProperty;\n+import javafx.beans.value.WritableValue;\n import javafx.fxml.FXML;\n import javafx.scene.Scene;\n import javafx.stage.Stage;\n+import javafx.util.Duration;\n import org.cryptomator.common.vaults.Vault;\n import org.cryptomator.cryptolib.api.InvalidPassphraseException;\n import org.cryptomator.ui.common.FxController;\n@@ -54,7 +59,7 @@ public void createRecoveryKey() {\n \t\t}).onError(IOException.class, e -> {\n \t\t\tLOG.error(\"Creation of recovery key failed.\", e);\n \t\t}).onError(InvalidPassphraseException.class, e -> {\n-\t\t\t// TODO shake animation? :D\n+\t\t\tshakeWindow();\n \t\t}).runOnce(executor);\n \t}\n \n@@ -63,6 +68,33 @@ public void close() {\n \t\twindow.close();\n \t}\n \n+\t/* Animations */\n+\n+\tprivate void shakeWindow() {\n+\t\tWritableValue<Double> writableWindowX = new WritableValue<>() {\n+\t\t\t@Override\n+\t\t\tpublic Double getValue() {\n+\t\t\t\treturn window.getX();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void setValue(Double value) {\n+\t\t\t\twindow.setX(value);\n+\t\t\t}\n+\t\t};\n+\t\tTimeline timeline = new Timeline( //\n+\t\t\t\tnew KeyFrame(Duration.ZERO, new KeyValue(writableWindowX, window.getX())), //\n+\t\t\t\tnew KeyFrame(new Duration(100), new KeyValue(writableWindowX, window.getX() - 22.0)), //\n+\t\t\t\tnew KeyFrame(new Duration(200), new KeyValue(writableWindowX, window.getX() + 18.0)), //\n+\t\t\t\tnew KeyFrame(new Duration(300), new KeyValue(writableWindowX, window.getX() - 14.0)), //\n+\t\t\t\tnew KeyFrame(new Duration(400), new KeyValue(writableWindowX, window.getX() + 10.0)), //\n+\t\t\t\tnew KeyFrame(new Duration(500), new KeyValue(writableWindowX, window.getX() - 6.0)), //\n+\t\t\t\tnew KeyFrame(new Duration(600), new KeyValue(writableWindowX, window.getX() + 2.0)), //\n+\t\t\t\tnew KeyFrame(new Duration(700), new KeyValue(writableWindowX, window.getX())) //\n+\t\t);\n+\t\ttimeline.play();\n+\t}\n+\n \t/* Getter/Setter */\n \n \tpublic Vault getVault() {",
      "parent_sha": "c5a9926652651a1942e8bfd338fc8a6222285f10"
    }
  },
  {
    "oid": "cf13311665fc54f0718765b40753991b55b58502",
    "message": "add style class to used icon in result view",
    "date": "2021-05-19T07:32:55Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/cf13311665fc54f0718765b40753991b55b58502",
    "details": {
      "sha": "ee53debb82b24c820462011646a31a9b0f7f3bd7",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/health/ResultSeverityTableCell.java",
      "status": "modified",
      "additions": 18,
      "deletions": 6,
      "changes": 24,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/cf13311665fc54f0718765b40753991b55b58502/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FResultSeverityTableCell.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/cf13311665fc54f0718765b40753991b55b58502/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FResultSeverityTableCell.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FResultSeverityTableCell.java?ref=cf13311665fc54f0718765b40753991b55b58502",
      "patch": "@@ -21,12 +21,24 @@ protected void updateItem(DiagnosticResult.Severity item, boolean empty) {\n \t\t\tsetText(null);\n \t\t\tsetGraphic(null);\n \t\t} else {\n-\t\t\ticonView.glyphProperty().set(switch (item) {\n-\t\t\t\tcase INFO -> FontAwesome5Icon.INFO_CIRCLE;\n-\t\t\t\tcase GOOD -> FontAwesome5Icon.CHECK;\n-\t\t\t\tcase WARN -> FontAwesome5Icon.EXCLAMATION_TRIANGLE;\n-\t\t\t\tcase CRITICAL -> FontAwesome5Icon.TIMES;\n-\t\t\t});\n+\t\t\tswitch (item) {\n+\t\t\t\tcase INFO -> {\n+\t\t\t\t\ticonView.setGlyph(FontAwesome5Icon.INFO_CIRCLE);\n+\t\t\t\t\ticonView.getStyleClass().add(\"glyph-icon-muted\");\n+\t\t\t\t}\n+\t\t\t\tcase GOOD -> {\n+\t\t\t\t\ticonView.setGlyph(FontAwesome5Icon.CHECK);\n+\t\t\t\t\ticonView.getStyleClass().add(\"glyph-icon-primary\");\n+\t\t\t\t}\n+\t\t\t\tcase WARN -> {\n+\t\t\t\t\ticonView.setGlyph(FontAwesome5Icon.EXCLAMATION_TRIANGLE);\n+\t\t\t\t\ticonView.getStyleClass().add(\"glyph-icon-orange\");\n+\t\t\t\t}\n+\t\t\t\tcase CRITICAL -> {\n+\t\t\t\t\ticonView.setGlyph(FontAwesome5Icon.TIMES);\n+\t\t\t\t\ticonView.getStyleClass().add(\"glyph-icon-red\");\n+\t\t\t\t}\n+\t\t\t}\n \t\t\tsetGraphic(iconView);\n \t\t\tsetText(item.name());\n \t\t}",
      "parent_sha": "a7133dbebe775244dd95fab298bd690a426d6760"
    }
  },
  {
    "oid": "eff2530e709e42719305ab0c63cd82d7d462efbc",
    "message": "pre-select chosen mount service",
    "date": "2022-11-07T14:52:48Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/eff2530e709e42719305ab0c63cd82d7d462efbc",
    "details": {
      "sha": "c8affd58fb1a6ad30bb3f0d8867646b1077fadad",
      "filename": "src/main/java/org/cryptomator/ui/preferences/VolumePreferencesController.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/eff2530e709e42719305ab0c63cd82d7d462efbc/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FVolumePreferencesController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/eff2530e709e42719305ab0c63cd82d7d462efbc/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FVolumePreferencesController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fpreferences%2FVolumePreferencesController.java?ref=eff2530e709e42719305ab0c63cd82d7d462efbc",
      "patch": "@@ -11,6 +11,7 @@\n import javafx.beans.binding.Bindings;\n import javafx.beans.binding.BooleanBinding;\n import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.value.ObservableValue;\n import javafx.scene.control.Button;\n import javafx.scene.control.ChoiceBox;\n import javafx.scene.control.TextField;\n@@ -25,6 +26,7 @@ public class VolumePreferencesController implements FxController {\n \n \tprivate final Settings settings;\n \tprivate final BooleanBinding showWebDavSettings;\n+\tprivate final ObservableValue<MountService> selectedMountService;\n \tprivate final BooleanBinding showWebDavScheme;\n \tprivate final List<MountService> mountProviders;\n \tpublic ChoiceBox<MountService> volumeTypeChoiceBox;\n@@ -33,17 +35,18 @@ public class VolumePreferencesController implements FxController {\n \tpublic ChoiceBox<WebDavUrlScheme> webDavUrlSchemeChoiceBox;\n \n \t@Inject\n-\tVolumePreferencesController(Settings settings, List<MountService> mountProviders) {\n+\tVolumePreferencesController(Settings settings, List<MountService> mountProviders, ObservableValue<MountService> selectedMountService) {\n \t\tthis.settings = settings;\n \t\tthis.mountProviders = mountProviders;\n \t\tthis.showWebDavSettings = Bindings.equal(settings.preferredVolumeImpl(), VolumeImpl.WEBDAV);\n+\t\tthis.selectedMountService = selectedMountService;\n \t\tthis.showWebDavScheme = showWebDavSettings.and(new SimpleBooleanProperty(SystemUtils.IS_OS_LINUX)); //TODO: remove SystemUtils\n \t}\n \n \tpublic void initialize() {\n \t\tvolumeTypeChoiceBox.getItems().addAll(mountProviders);\n \t\tvolumeTypeChoiceBox.setConverter(new MountServiceConverter());\n-\t\tvolumeTypeChoiceBox.getSelectionModel().selectFirst(); //TODO\n+\t\tvolumeTypeChoiceBox.getSelectionModel().select(selectedMountService.getValue());\n \t\tvolumeTypeChoiceBox.valueProperty().addListener((observableValue, oldProvide, newProvider) -> settings.mountService().set(newProvider.getClass().getName()));\n \n \t\twebDavPortField.setText(String.valueOf(settings.port().get()));",
      "parent_sha": "0f84d0c9900a267bdda9defb2f7c6bc38845c695"
    }
  },
  {
    "oid": "ffc1d8dc1e6ae0a696ec1dee0f975803d3e9ca34",
    "message": "simplified",
    "date": "2019-11-22T13:23:55Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/ffc1d8dc1e6ae0a696ec1dee0f975803d3e9ca34",
    "details": {
      "sha": "2b61ddf85af4643554f2b9ea2653f8dd46f596e1",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyDisplayController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 14,
      "changes": 15,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/ffc1d8dc1e6ae0a696ec1dee0f975803d3e9ca34/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyDisplayController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/ffc1d8dc1e6ae0a696ec1dee0f975803d3e9ca34/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyDisplayController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Frecoverykey%2FRecoveryKeyDisplayController.java?ref=ffc1d8dc1e6ae0a696ec1dee0f975803d3e9ca34",
      "patch": "@@ -1,9 +1,5 @@\n package org.cryptomator.ui.recoverykey;\n \n-import javafx.beans.property.ReadOnlyBooleanProperty;\n-import javafx.beans.property.ReadOnlyStringProperty;\n-import javafx.beans.property.SimpleBooleanProperty;\n-import javafx.beans.property.StringProperty;\n import javafx.fxml.FXML;\n import javafx.print.PageLayout;\n import javafx.print.Printer;\n@@ -16,27 +12,22 @@\n import javafx.scene.text.Text;\n import javafx.scene.text.TextFlow;\n import javafx.stage.Stage;\n-import org.cryptomator.common.vaults.Vault;\n import org.cryptomator.ui.common.FxController;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.inject.Inject;\n-\n public class RecoveryKeyDisplayController implements FxController {\n \t\n \tprivate static final Logger LOG = LoggerFactory.getLogger(RecoveryKeyDisplayController.class);\n \n \tprivate final Stage window;\n \tprivate final String vaultName;\n \tprivate final String recoveryKey;\n-\tprivate final ReadOnlyBooleanProperty printerSupported;\n \t\n \tpublic RecoveryKeyDisplayController(Stage window, String vaultName, String recoveryKey) {\n \t\tthis.window = window;\n \t\tthis.vaultName = vaultName;\n \t\tthis.recoveryKey = recoveryKey;\n-\t\tthis.printerSupported = new SimpleBooleanProperty(Printer.getDefaultPrinter() != null);\n \t}\n \n \t@FXML\n@@ -86,12 +77,8 @@ public void close() {\n \n \t/* Getter/Setter */\n \n-\tpublic ReadOnlyBooleanProperty printerSupportedProperty() {\n-\t\treturn printerSupported;\n-\t}\n-\n \tpublic boolean isPrinterSupported() {\n-\t\treturn printerSupported.get();\n+\t\treturn Printer.getDefaultPrinter() != null;\n \t}\n \n \tpublic String getRecoveryKey() {",
      "parent_sha": "54fca93bbaacbc86e7624f76fa54dbddbdd8b1e1"
    }
  },
  {
    "oid": "7a0d50ecca4b777ba17d3979fd515ec9bf293aae",
    "message": "removed unnecessary  import",
    "date": "2023-09-20T08:48:26Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/7a0d50ecca4b777ba17d3979fd515ec9bf293aae",
    "details": {
      "sha": "61f2b0e10a2dbab15e0302967b1d4e484024fe26",
      "filename": "src/main/java/org/cryptomator/ui/error/ErrorController.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/7a0d50ecca4b777ba17d3979fd515ec9bf293aae/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/7a0d50ecca4b777ba17d3979fd515ec9bf293aae/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ferror%2FErrorController.java?ref=7a0d50ecca4b777ba17d3979fd515ec9bf293aae",
      "patch": "@@ -2,7 +2,6 @@\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import org.apache.commons.lang3.SystemUtils;\n import org.cryptomator.common.Environment;\n import org.cryptomator.common.ErrorCode;\n import org.cryptomator.common.Nullable;\n@@ -147,9 +146,9 @@ public void lookUpSolution() {\n \t\tString userAgent = USER_AGENT_FORMAT.formatted( //\n \t\t\t\tenvironment.getAppVersion(), //\n \t\t\t\tenvironment.getBuildNumber().orElse(\"undefined\"), //\n-\t\t\t\tSystemUtils.OS_NAME, //\n-\t\t\t\tSystemUtils.OS_VERSION, //\n-\t\t\t\tSystemUtils.OS_ARCH); //\n+\t\t\t\tSystem.getProperty(\"os.name\"), //\n+\t\t\t\tSystem.getProperty(\"os.version\"), //\n+\t\t\t\tSystem.getProperty(\"os.arch\"));\n \t\tisLoadingHttpResponse.set(true);\n \t\taskedForLookupDatabasePermission.set(true);\n \t\tHttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build();",
      "parent_sha": "830970cb75726db8b484e834743cd62cff6f32cc"
    }
  },
  {
    "oid": "e99a615b0999286a5bc573342c45641a9368ff94",
    "message": "closing channel, if registration failed. Coverity issue 72309",
    "date": "2016-03-04T00:49:43Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/e99a615b0999286a5bc573342c45641a9368ff94",
    "details": {
      "sha": "128b2e5e6b16a1ac63c61493c2a38b73c8eec9c3",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/util/SingleInstanceManager.java",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/e99a615b0999286a5bc573342c45641a9368ff94/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Futil%2FSingleInstanceManager.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/e99a615b0999286a5bc573342c45641a9368ff94/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Futil%2FSingleInstanceManager.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Futil%2FSingleInstanceManager.java?ref=e99a615b0999286a5bc573342c45641a9368ff94",
      "patch": "@@ -84,7 +84,7 @@ public boolean sendMessage(String string, long timeout) throws IOException {\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t\treturn !buf.hasRemaining();\n-\t\t\t}, timeout, 10);\n+\t\t\t} , timeout, 10);\n \t\t\treturn !buf.hasRemaining();\n \t\t}\n \n@@ -139,10 +139,17 @@ public ListenerRegistration registerListener(MessageListener listener) {\n \t\tvoid handleSelection(SelectionKey key) throws IOException {\n \t\t\tif (key.isAcceptable()) {\n \t\t\t\tfinal SocketChannel accepted = channel.accept();\n-\t\t\t\tif (accepted != null) {\n-\t\t\t\t\tLOG.debug(\"accepted incoming connection\");\n-\t\t\t\t\taccepted.configureBlocking(false);\n-\t\t\t\t\taccepted.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n+\t\t\t\tSelectionKey keyOfAcceptedConnection = null;\n+\t\t\t\ttry {\n+\t\t\t\t\tif (accepted != null) {\n+\t\t\t\t\t\tLOG.debug(\"accepted incoming connection\");\n+\t\t\t\t\t\taccepted.configureBlocking(false);\n+\t\t\t\t\t\tkeyOfAcceptedConnection = accepted.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n+\t\t\t\t\t}\n+\t\t\t\t} finally {\n+\t\t\t\t\tif (keyOfAcceptedConnection == null) {\n+\t\t\t\t\t\taccepted.close();\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \n@@ -189,6 +196,7 @@ void handleSelection(SelectionKey key) throws IOException {\n \t\t\t}\n \t\t}\n \n+\t\t@Override\n \t\tpublic void close() {\n \t\t\tIOUtils.closeQuietly(selector);\n \t\t\tIOUtils.closeQuietly(channel);\n@@ -359,7 +367,7 @@ public static <T extends SelectableChannel & ReadableByteChannel> void tryFill(T\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn !buf.hasRemaining();\n-\t\t\t}, timeout, 1);\n+\t\t\t} , timeout, 1);\n \t\t}\n \t}\n }\n\\ No newline at end of file",
      "parent_sha": "6da3fde864172af0875e6dd3df658a29cc7f9cd4"
    }
  },
  {
    "oid": "d51debf736b980f53575fd91fe6d64fb48c9061a",
    "message": "fixed exception when scheduling the next regular update check while auto check is disabled\n[ci skip]",
    "date": "2019-08-01T11:24:47Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/d51debf736b980f53575fd91fe6d64fb48c9061a",
    "details": {
      "sha": "7784bd89e3add5c8ed963ff67ff41065719f384b",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/fxapp/UpdateCheckerModule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/d51debf736b980f53575fd91fe6d64fb48c9061a/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FUpdateCheckerModule.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/d51debf736b980f53575fd91fe6d64fb48c9061a/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FUpdateCheckerModule.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FUpdateCheckerModule.java?ref=d51debf736b980f53575fd91fe6d64fb48c9061a",
      "patch": "@@ -24,6 +24,7 @@ public abstract class UpdateCheckerModule {\n \n \tprivate static final URI LATEST_VERSION_URI = URI.create(\"https://api.cryptomator.org/updates/latestVersion.json\");\n \tprivate static final Duration UPDATE_CHECK_INTERVAL = Duration.hours(3);\n+\tprivate static final Duration DISABLED_UPDATE_CHECK_INTERVAL = Duration.hours(100000); // Duration.INDEFINITE leads to overflows...\n \n \t@Provides\n \t@Named(\"latestVersion\")\n@@ -56,7 +57,7 @@ static HttpRequest provideCheckForUpdatesRequest(@Named(\"applicationVersion\") Op\n \t@Named(\"checkForUpdatesInterval\")\n \t@FxApplicationScoped\n \tstatic ObjectBinding<Duration> provideCheckForUpdateInterval(Settings settings) {\n-\t\treturn Bindings.when(settings.checkForUpdates()).then(UPDATE_CHECK_INTERVAL).otherwise(Duration.INDEFINITE);\n+\t\treturn Bindings.when(settings.checkForUpdates()).then(UPDATE_CHECK_INTERVAL).otherwise(DISABLED_UPDATE_CHECK_INTERVAL);\n \t}\n \n \t@Provides",
      "parent_sha": "70b4b5fb2d61850a13fb913c88b1e1125c181244"
    }
  },
  {
    "oid": "98a899c7e2cca50dce5e7a04ea8ed7c7edfeedf8",
    "message": "scope checklist cell and properly update graphic property",
    "date": "2021-05-25T11:21:13Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/98a899c7e2cca50dce5e7a04ea8ed7c7edfeedf8",
    "details": {
      "sha": "16b691a289303cf42652f783207ab920e2e9db6c",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/health/CheckListCell.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/98a899c7e2cca50dce5e7a04ea8ed7c7edfeedf8/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/98a899c7e2cca50dce5e7a04ea8ed7c7edfeedf8/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fhealth%2FCheckListCell.java?ref=98a899c7e2cca50dce5e7a04ea8ed7c7edfeedf8",
      "patch": "@@ -3,6 +3,7 @@\n import org.cryptomator.ui.controls.FontAwesome5Icon;\n import org.cryptomator.ui.controls.FontAwesome5IconView;\n \n+import javafx.beans.binding.Bindings;\n import javafx.beans.value.ObservableValue;\n import javafx.concurrent.Worker;\n import javafx.geometry.Insets;\n@@ -11,6 +12,7 @@\n import javafx.scene.control.ContentDisplay;\n import javafx.scene.control.ListCell;\n \n+@HealthCheckScoped\n class CheckListCell extends ListCell<HealthCheckTask> {\n \n \tprivate final FontAwesome5IconView stateIcon = new FontAwesome5IconView();\n@@ -28,10 +30,11 @@ protected void updateItem(HealthCheckTask item, boolean empty) {\n \t\tif (item != null) {\n \t\t\ttextProperty().bind(item.titleProperty());\n \t\t\titem.stateProperty().addListener(this::stateChanged);\n-\t\t\tsetGraphic(graphicForState(item.getState()));\n+\t\t\tgraphicProperty().bind(Bindings.createObjectBinding(() -> graphicForState(item.getState()),item.stateProperty()));\n \t\t\tstateIcon.setGlyph(glyphForState(item.getState()));\n \t\t} else {\n \t\t\ttextProperty().unbind();\n+\t\t\tgraphicProperty().unbind();\n \t\t\tsetGraphic(null);\n \t\t\tsetText(null);\n \t\t}",
      "parent_sha": "783c8718c1386cbd4f83d3c2d9e0f9695811420c"
    }
  },
  {
    "oid": "de16647d0096bdd2c7f13e1315c908f5d44e6ff1",
    "message": "reformat code",
    "date": "2024-09-26T09:24:57Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/de16647d0096bdd2c7f13e1315c908f5d44e6ff1",
    "details": {
      "sha": "58061ec8259fa8880415c32b54a359186245a6c8",
      "filename": "src/main/java/org/cryptomator/ui/controls/NotificationBar.java",
      "status": "modified",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/de16647d0096bdd2c7f13e1315c908f5d44e6ff1/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FNotificationBar.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/de16647d0096bdd2c7f13e1315c908f5d44e6ff1/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FNotificationBar.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FNotificationBar.java?ref=de16647d0096bdd2c7f13e1315c908f5d44e6ff1",
      "patch": "@@ -1,27 +1,20 @@\n package org.cryptomator.ui.controls;\n \n-import org.cryptomator.ui.common.FxmlFile;\n-\n import javafx.beans.property.BooleanProperty;\n import javafx.beans.property.SimpleBooleanProperty;\n import javafx.fxml.FXML;\n-import javafx.fxml.FXMLLoader;\n import javafx.geometry.Pos;\n import javafx.scene.control.Button;\n import javafx.scene.control.Label;\n import javafx.scene.layout.HBox;\n import javafx.scene.layout.Region;\n import javafx.scene.layout.VBox;\n-import java.io.IOException;\n \n public class NotificationBar extends HBox {\n \n \t@FXML\n \tprivate Label notificationLabel;\n \n-\t@FXML\n-\tprivate Button closeButton;\n-\n \tprivate final BooleanProperty dismissable = new SimpleBooleanProperty();\n \tprivate final BooleanProperty notify = new SimpleBooleanProperty();\n \n@@ -39,7 +32,7 @@ public NotificationBar() {\n \t\tRegion rightRegion = new Region();\n \t\tHBox.setHgrow(rightRegion, javafx.scene.layout.Priority.ALWAYS);\n \n-\t\t\t\tVBox vbox = new VBox();\n+\t\tVBox vbox = new VBox();\n \t\tvbox.setAlignment(Pos.CENTER);\n \t\tHBox.setHgrow(vbox, javafx.scene.layout.Priority.ALWAYS);\n \n@@ -48,7 +41,7 @@ public NotificationBar() {\n \t\tnotificationLabel.setStyle(\"-fx-alignment: center;\");\n \t\tvbox.getChildren().add(notificationLabel);\n \n-\t\tcloseButton = new Button(\"X\");\n+\t\tButton closeButton = new Button(\"X\");\n \t\tcloseButton.setMinWidth(40);\n \t\tcloseButton.setStyle(\"-fx-background-color: transparent; -fx-text-fill: white; -fx-font-weight: bold;\");\n \t\tcloseButton.visibleProperty().bind(dismissable);",
      "parent_sha": "1e280f2c9756add30f2e73ae719f7cc6ed2bb331"
    }
  },
  {
    "oid": "3adffad087eb2d839e45f56fb45ac8017bf8aef8",
    "message": "removed ALT+F4 shortcut, it is already registered by default",
    "date": "2024-09-16T12:55:51Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/3adffad087eb2d839e45f56fb45ac8017bf8aef8",
    "details": {
      "sha": "fbc96513bc706c67acb54424e0d5119c2dddf62f",
      "filename": "src/main/java/org/cryptomator/ui/mainwindow/MainWindowSceneFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/3adffad087eb2d839e45f56fb45ac8017bf8aef8/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowSceneFactory.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/3adffad087eb2d839e45f56fb45ac8017bf8aef8/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowSceneFactory.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmainwindow%2FMainWindowSceneFactory.java?ref=3adffad087eb2d839e45f56fb45ac8017bf8aef8",
      "patch": "@@ -30,9 +30,7 @@ public MainWindowSceneFactory(Settings settings, @MainWindow Stage window, Lazy<\n \n \t@Override\n \tprotected void setupDefaultAccelerators(Scene scene, Stage stage) {\n-\t\tif (SystemUtils.IS_OS_WINDOWS) {\n-\t\t\tscene.getAccelerators().put(ALT_F4, window::close);\n-\t\t} else {\n+\t\tif (!SystemUtils.IS_OS_WINDOWS) {\n \t\t\tscene.getAccelerators().put(SHORTCUT_W, window::close);\n \t\t}\n \t\tscene.getAccelerators().put(SHORTCUT_N, vaultListController.get()::didClickAddNewVault);",
      "parent_sha": "84e3cf0762a0acc6f8567064cd67c8a8de3ba0a8"
    }
  },
  {
    "oid": "98cab7e4d89ef6b2d18fc25fb8b240c35d96a906",
    "message": "Delete automatically generated mount point after locking, attempt to fix #773",
    "date": "2019-01-31T14:38:05Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/98cab7e4d89ef6b2d18fc25fb8b240c35d96a906",
    "details": {
      "sha": "972b9ce065fd32d9b6eb7ed581d98f26a6a90311",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/model/FuseVolume.java",
      "status": "modified",
      "additions": 55,
      "deletions": 44,
      "changes": 99,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/98cab7e4d89ef6b2d18fc25fb8b240c35d96a906/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FFuseVolume.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/98cab7e4d89ef6b2d18fc25fb8b240c35d96a906/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FFuseVolume.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FFuseVolume.java?ref=98cab7e4d89ef6b2d18fc25fb8b240c35d96a906",
      "patch": "@@ -1,14 +1,5 @@\n package org.cryptomator.ui.model;\n \n-import java.io.IOException;\n-import java.nio.file.DirectoryNotEmptyException;\n-import java.nio.file.DirectoryStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import javax.inject.Inject;\n-\n import org.apache.commons.lang3.SystemUtils;\n import org.cryptomator.common.settings.VaultSettings;\n import org.cryptomator.cryptofs.CryptoFileSystem;\n@@ -20,65 +11,84 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.inject.Inject;\n+import java.io.IOException;\n+import java.nio.file.DirectoryNotEmptyException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.NotDirectoryException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n public class FuseVolume implements Volume {\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(FuseVolume.class);\n \n-\t/**\n-\t * TODO: dont use fixed Strings and rather set them in some system environment variables in the cryptomator installer and load those!\n-\t */\n+\t// TODO: dont use fixed Strings and rather set them in some system environment variables in the cryptomator installer and load those!\n \tprivate static final String DEFAULT_MOUNTROOTPATH_MAC = System.getProperty(\"user.home\") + \"/Library/Application Support/Cryptomator\";\n \tprivate static final String DEFAULT_MOUNTROOTPATH_LINUX = System.getProperty(\"user.home\") + \"/.Cryptomator\";\n+\tprivate static final int MAX_TMPMOUNTPOINT_CREATION_RETRIES = 10;\n \n \tprivate final VaultSettings vaultSettings;\n \n \tprivate Mount fuseMnt;\n-\tprivate Path mountPath;\n-\tprivate boolean extraDirCreated;\n+\tprivate Path mountPoint;\n+\tprivate boolean createdTemporaryMountPoint;\n \n \t@Inject\n \tpublic FuseVolume(VaultSettings vaultSettings) {\n \t\tthis.vaultSettings = vaultSettings;\n-\t\tthis.extraDirCreated = false;\n+\t\tthis.createdTemporaryMountPoint = false;\n \t}\n \n \t@Override\n \tpublic void mount(CryptoFileSystem fs) throws IOException, FuseNotSupportedException, VolumeException {\n-\t\tString mountPath;\n \t\tif (vaultSettings.usesIndividualMountPath().get()) {\n-\t\t\t//specific path given\n-\t\t\tmountPath = vaultSettings.individualMountPath().get();\n+\t\t\tPath customMountPoint = Paths.get(vaultSettings.individualMountPath().get());\n+\t\t\tcheckProvidedMountPoint(customMountPoint);\n+\t\t\tthis.mountPoint = customMountPoint;\n+\t\t\tLOG.debug(\"Successfully checked custom mount point: {}\", mountPoint);\n \t\t} else {\n-\t\t\t//choose default path & create extra directory\n-\t\t\tmountPath = createDirIfNotExist(SystemUtils.IS_OS_MAC ? DEFAULT_MOUNTROOTPATH_MAC : DEFAULT_MOUNTROOTPATH_LINUX, vaultSettings.mountName().get());\n-\t\t\textraDirCreated = true;\n+\t\t\tthis.mountPoint = createTemporaryMountPoint();\n+\t\t\tcreatedTemporaryMountPoint = true;\n+\t\t\tLOG.debug(\"Successfully created mount point: {}\", mountPoint);\n \t\t}\n-\t\tthis.mountPath = Paths.get(mountPath).toAbsolutePath();\n \t\tmount(fs.getPath(\"/\"));\n \t}\n \n-\tprivate String createDirIfNotExist(String prefix, String dirName) throws IOException {\n-\t\tPath p = Paths.get(prefix, dirName + vaultSettings.getId());\n-\t\tif (Files.isDirectory(p)) {\n-\t\t\ttry (DirectoryStream<Path> emptyCheck = Files.newDirectoryStream(p)) {\n-\t\t\t\tif (emptyCheck.iterator().hasNext()) {\n-\t\t\t\t\tthrow new DirectoryNotEmptyException(\"Mount point is not empty.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tLOG.info(\"Directory already exists and is empty. Using it as mount point.\");\n-\t\t\t\t\treturn p.toString();\n-\t\t\t\t}\n+\tprivate void checkProvidedMountPoint(Path mountPoint) throws IOException {\n+\t\tif (!Files.isDirectory(mountPoint)) {\n+\t\t\tthrow new NotDirectoryException(mountPoint.toString());\n+\t\t}\n+\t\ttry (DirectoryStream<Path> ds = Files.newDirectoryStream(mountPoint)) {\n+\t\t\tif (ds.iterator().hasNext()) {\n+\t\t\t\tthrow new DirectoryNotEmptyException(mountPoint.toString());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate Path createTemporaryMountPoint() throws IOException {\n+\t\tPath parent = Paths.get(SystemUtils.IS_OS_MAC ? DEFAULT_MOUNTROOTPATH_MAC : DEFAULT_MOUNTROOTPATH_LINUX);\n+\t\tString basename = vaultSettings.getId();\n+\t\tfor (int i = 0; i < MAX_TMPMOUNTPOINT_CREATION_RETRIES; i++) {\n+\t\t\ttry {\n+\t\t\t\tPath mountPath = parent.resolve(basename + \"_\" + i);\n+\t\t\t\tFiles.createDirectory(mountPath);\n+\t\t\t\treturn mountPath;\n+\t\t\t} catch (FileAlreadyExistsException e) {\n+\t\t\t\tcontinue;\n \t\t\t}\n-\t\t} else {\n-\t\t\tFiles.createDirectory(p);\n-\t\t\treturn p.toString();\n \t\t}\n+\t\tLOG.error(\"Failed to create mount path at {}/{}_x. Giving up after {} attempts.\", parent, basename, MAX_TMPMOUNTPOINT_CREATION_RETRIES);\n+\t\tthrow new FileAlreadyExistsException(parent.toString() + \"/\" + basename);\n \t}\n \n \tprivate void mount(Path root) throws VolumeException {\n \t\ttry {\n-\t\t\tEnvironmentVariables envVars = EnvironmentVariables.create()\n-\t\t\t\t\t.withMountName(vaultSettings.mountName().getValue())\n-\t\t\t\t\t.withMountPath(mountPath)\n+\t\t\tEnvironmentVariables envVars = EnvironmentVariables.create() //\n+\t\t\t\t\t.withMountName(vaultSettings.mountName().getValue()) //\n+\t\t\t\t\t.withMountPath(mountPoint) //\n \t\t\t\t\t.build();\n \t\t\tthis.fuseMnt = FuseMountFactory.getMounter().mount(root, envVars);\n \t\t} catch (CommandFailedException e) {\n@@ -91,7 +101,7 @@ public void reveal() throws VolumeException {\n \t\ttry {\n \t\t\tfuseMnt.revealInFileManager();\n \t\t} catch (CommandFailedException e) {\n-\t\t\tLOG.info(\"Revealing the vault in file manger failed: \" + e.getMessage());\n+\t\t\tLOG.debug(\"Revealing the vault in file manger failed: \" + e.getMessage());\n \t\t\tthrow new VolumeException(e);\n \t\t}\n \t}\n@@ -103,15 +113,16 @@ public synchronized void unmount() throws VolumeException {\n \t\t} catch (CommandFailedException e) {\n \t\t\tthrow new VolumeException(e);\n \t\t}\n-\t\tcleanup();\n+\t\tdeleteTemporaryMountPoint();\n \t}\n \n-\tprivate void cleanup() {\n-\t\tif (extraDirCreated) {\n+\tprivate void deleteTemporaryMountPoint() {\n+\t\tif (createdTemporaryMountPoint) {\n \t\t\ttry {\n-\t\t\t\tFiles.delete(mountPath);\n+\t\t\t\tFiles.delete(mountPoint);\n+\t\t\t\tLOG.debug(\"Successfully deleted mount point: {}\", mountPoint);\n \t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.warn(\"Could not delete mounting directory:\" + e.getMessage());\n+\t\t\t\tLOG.warn(\"Could not delete mount point: {}\", e.getMessage());\n \t\t\t}\n \t\t}\n \t}",
      "parent_sha": "384c9de7aa203778970e0b4c9e4bdad2f6f0e6a0"
    }
  },
  {
    "oid": "fa16556af109798c0b5d9e53727c239d4730b24e",
    "message": "do not allow empty display name for vault\n\nFixes #3633",
    "date": "2024-12-02T10:02:11Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/fa16556af109798c0b5d9e53727c239d4730b24e",
    "details": {
      "sha": "5fe6746d7242dd97b1baaf2046c1078ac99e59a7",
      "filename": "src/main/java/org/cryptomator/ui/vaultoptions/GeneralVaultOptionsController.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/fa16556af109798c0b5d9e53727c239d4730b24e/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultoptions%2FGeneralVaultOptionsController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/fa16556af109798c0b5d9e53727c239d4730b24e/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultoptions%2FGeneralVaultOptionsController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fvaultoptions%2FGeneralVaultOptionsController.java?ref=fa16556af109798c0b5d9e53727c239d4730b24e",
      "patch": "@@ -57,9 +57,14 @@ public void initialize() {\n \t}\n \n \tprivate void trimVaultNameOnFocusLoss(Observable observable, Boolean wasFocussed, Boolean isFocussed) {\n+\t\tvar displayNameSetting = vault.getVaultSettings().displayName;\n \t\tif (!isFocussed) {\n \t\t\tvar trimmed = vaultName.getText().trim();\n-\t\t\tvault.getVaultSettings().displayName.set(trimmed);\n+\t\t\tif (!trimmed.isEmpty()) {\n+\t\t\t\tdisplayNameSetting.set(trimmed); //persist changes\n+\t\t\t} else {\n+\t\t\t\tvaultName.setText(displayNameSetting.get()); //revert changes\n+\t\t\t}\n \t\t}\n \t}\n ",
      "parent_sha": "de766c2653d8c3a467bb382415efcba3d872c7c2"
    }
  },
  {
    "oid": "4c2e6088a99aec2920963b6accb6cf7498be0d1f",
    "message": "reformat code and optimized imports",
    "date": "2023-07-17T09:26:59Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/4c2e6088a99aec2920963b6accb6cf7498be0d1f",
    "details": {
      "sha": "fd9f01904d66205c28700ccf1e980a50aa846406",
      "filename": "src/main/java/org/cryptomator/common/settings/Settings.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/4c2e6088a99aec2920963b6accb6cf7498be0d1f/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fsettings%2FSettings.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/4c2e6088a99aec2920963b6accb6cf7498be0d1f/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fsettings%2FSettings.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fsettings%2FSettings.java?ref=4c2e6088a99aec2920963b6accb6cf7498be0d1f",
      "patch": "@@ -26,7 +26,6 @@\n import javafx.collections.ObservableList;\n import javafx.geometry.NodeOrientation;\n import java.util.function.Consumer;\n-import java.time.LocalDate;\n \n public class Settings {\n \n@@ -107,7 +106,7 @@ public static Settings create(Environment env) {\n \t\tthis.displayConfiguration = new SimpleStringProperty(this, \"displayConfiguration\", json.displayConfiguration);\n \t\tthis.language = new SimpleStringProperty(this, \"language\", json.language);\n \t\tthis.mountService = new SimpleStringProperty(this, \"mountService\", json.mountService);\n-\t\tthis.lastUpdateCheck = new SimpleStringProperty(this,\"lastUpdateCheck\",json.lastUpdateCheck);\n+\t\tthis.lastUpdateCheck = new SimpleStringProperty(this, \"lastUpdateCheck\", json.lastUpdateCheck);\n \n \t\tthis.directories.addAll(json.directories.stream().map(VaultSettings::new).toList());\n ",
      "parent_sha": "df31b214f58db5a45b580f480453d343684183e7"
    }
  },
  {
    "oid": "c2c3d778d1b6b9f6f414816b924aac5fde72dbac",
    "message": "added @CheckAvailability\nchanged exception handling",
    "date": "2024-09-24T13:29:13Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/c2c3d778d1b6b9f6f414816b924aac5fde72dbac",
    "details": {
      "sha": "ae92ed504cff79814ac88d565a07a7b3c138f2d8",
      "filename": "src/main/java/org/cryptomator/common/locationpresets/GoogleDriveMacLocationPresetsProvider.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/c2c3d778d1b6b9f6f414816b924aac5fde72dbac/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveMacLocationPresetsProvider.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/c2c3d778d1b6b9f6f414816b924aac5fde72dbac/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveMacLocationPresetsProvider.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Flocationpresets%2FGoogleDriveMacLocationPresetsProvider.java?ref=c2c3d778d1b6b9f6f414816b924aac5fde72dbac",
      "patch": "@@ -18,6 +18,7 @@\n import static org.cryptomator.integrations.common.OperatingSystem.Value.MAC;\n \n @OperatingSystem(MAC)\n+@CheckAvailability\n public final class GoogleDriveMacLocationPresetsProvider implements LocationPresetsProvider {\n \tprivate static final Path ROOT_LOCATION = LocationPresetsProvider.resolveLocation(\"~/Library/CloudStorage/\").toAbsolutePath();\n \tprivate static final Predicate<String> PATTERN = Pattern.compile(\"^GoogleDrive-[^/]+$\").asMatchPredicate();\n@@ -82,9 +83,13 @@ private Stream<LocationPreset> getPresetsFromAccountPath(Path accountPath) {\n \t\t\treturn directories.stream()\n \t\t\t\t\t.filter(drivePath -> {\n \t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Check if the directory is hidden. We want to exclude hidden directories\n+\t\t\t\t\t\t\t// from the results because they typically contain system or configuration\n+\t\t\t\t\t\t\t// files that are not relevant for the user.\n \t\t\t\t\t\t\treturn !Files.isHidden(drivePath);\n \t\t\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t\t\t\tLOG.debug(\"Could not determine if the path is hidden: {}\", drivePath);\n+\t\t\t\t\t\t\treturn false;\n \t\t\t\t\t\t}\n \t\t\t\t\t})\n \t\t\t\t\t.map(drivePath -> new LocationPreset(getDriveLocationString(accountPath, drivePath), drivePath));",
      "parent_sha": "a03d5af14456572a17f6d94056bf285c2652c288"
    }
  },
  {
    "oid": "062c674ef1b219a30f0635124cf03c5997b523b2",
    "message": "Always hide spinner, as soon as locationPresetLoading is finished",
    "date": "2024-01-19T09:44:06Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/062c674ef1b219a30f0635124cf03c5997b523b2",
    "details": {
      "sha": "d9f59b878ef6cf0ec5756cc27f4e22f25c3d3c53",
      "filename": "src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultLocationController.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/062c674ef1b219a30f0635124cf03c5997b523b2/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultLocationController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/062c674ef1b219a30f0635124cf03c5997b523b2/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultLocationController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultLocationController.java?ref=062c674ef1b219a30f0635124cf03c5997b523b2",
      "patch": "@@ -150,10 +150,13 @@ public void initialize() {\n \n \tprivate void loadLocationPresets() {\n \t\tPlatform.runLater(() -> loadingPresetLocations.set(true));\n-\t\tLocationPresetsProvider.loadAll(LocationPresetsProvider.class) //\n-\t\t\t\t.flatMap(LocationPresetsProvider::getLocations) //we do not use sorted(), because it evaluates the stream elements, blocking until all elements are gathered\n-\t\t\t\t.forEach(this::createRadioButtonFor);\n-\t\tPlatform.runLater(() -> loadingPresetLocations.set(false));\n+\t\ttry{\n+\t\t\tLocationPresetsProvider.loadAll(LocationPresetsProvider.class) //\n+\t\t\t\t\t.flatMap(LocationPresetsProvider::getLocations) //we do not use sorted(), because it evaluates the stream elements, blocking until all elements are gathered\n+\t\t\t\t\t.forEach(this::createRadioButtonFor);\n+\t\t} finally {\n+\t\t\tPlatform.runLater(() -> loadingPresetLocations.set(false));\n+\t\t}\n \t}\n \n \tprivate void createRadioButtonFor(LocationPreset preset) {",
      "parent_sha": "830bb5776f1470018af05c3075787d4ceca270fa"
    }
  },
  {
    "oid": "61b7a39aad8233124862b8b1b41b492c5fae28e8",
    "message": "change level of a log message from warn to debug\n\n[ci skip]",
    "date": "2021-03-29T08:53:48Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/61b7a39aad8233124862b8b1b41b492c5fae28e8",
    "details": {
      "sha": "917e704fcdba434c8f4da0aa1bd7010f2df16186",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/61b7a39aad8233124862b8b1b41b492c5fae28e8/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FFxApplication.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/61b7a39aad8233124862b8b1b41b492c5fae28e8/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FFxApplication.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Ffxapp%2FFxApplication.java?ref=61b7a39aad8233124862b8b1b41b492c5fae28e8",
      "patch": "@@ -86,7 +86,7 @@ public void start(Stage stage) {\n \t}\n \n \tprivate void hasVisibleStagesChanged(@SuppressWarnings(\"unused\") ObservableValue<? extends Boolean> observableValue, @SuppressWarnings(\"unused\") boolean oldValue, boolean newValue) {\n-\t\tLOG.warn(\"has visible stages: {}\", newValue);\n+\t\tLOG.debug(\"has visible stages: {}\", newValue);\n \t\tif (newValue) {\n \t\t\ttrayIntegration.ifPresent(TrayIntegrationProvider::restoredFromTray);\n \t\t} else {",
      "parent_sha": "16bd84ee629b7ac509c15319c28d37b33450d6b2"
    }
  },
  {
    "oid": "41f8a9facaade64547b193393a7a2b73227ec37a",
    "message": "add \"allow\" response header field",
    "date": "2016-06-08T17:06:06Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/41f8a9facaade64547b193393a7a2b73227ec37a",
    "details": {
      "sha": "0edfc92f856bae624a6cc943b12178b8dd4628f8",
      "filename": "main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WindowsCompatibilityServlet.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/41f8a9facaade64547b193393a7a2b73227ec37a/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2FWindowsCompatibilityServlet.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/41f8a9facaade64547b193393a7a2b73227ec37a/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2FWindowsCompatibilityServlet.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffrontend-webdav%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffrontend%2Fwebdav%2FWindowsCompatibilityServlet.java?ref=41f8a9facaade64547b193393a7a2b73227ec37a",
      "patch": "@@ -32,7 +32,7 @@ public class WindowsCompatibilityServlet extends HttpServlet {\n \tprotected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n \t\tresp.addHeader(\"DAV\", \"1, 2\");\n \t\tresp.addHeader(\"MS-Author-Via\", \"DAV\");\n-\t\t// resp.addHeader(\"Allow\", \"OPTIONS, GET, HEAD, POST, TRACE, PROPFIND, PROPPATCH, MKCOL, COPY, PUT, DELETE, MOVE, LOCK, UNLOCK\");\n+\t\tresp.addHeader(\"Allow\", \"OPTIONS, GET, HEAD\");\n \t\tresp.setStatus(HttpServletResponse.SC_NO_CONTENT);\n \t}\n \t",
      "parent_sha": "1d9252e974322a5d0a8f660339181417729faa21"
    }
  },
  {
    "oid": "bc815405d26bae8be4fc2da4815a6784338c28e3",
    "message": "merged from hotfix/1.1.2 [ci skip]",
    "date": "2016-07-09T09:32:02Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/bc815405d26bae8be4fc2da4815a6784338c28e3",
    "details": {
      "sha": "6b8a1f428778e512a3531b7ead726443483f4067",
      "filename": "main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/ConflictResolver.java",
      "status": "modified",
      "additions": 23,
      "deletions": 10,
      "changes": 33,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/bc815405d26bae8be4fc2da4815a6784338c28e3/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FConflictResolver.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/bc815405d26bae8be4fc2da4815a6784338c28e3/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FConflictResolver.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffilesystem-crypto%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FConflictResolver.java?ref=bc815405d26bae8be4fc2da4815a6784338c28e3",
      "patch": "@@ -2,6 +2,7 @@\n \n import static org.cryptomator.filesystem.crypto.Constants.DIR_PREFIX;\n \n+import java.nio.ByteBuffer;\n import java.util.Optional;\n import java.util.UUID;\n import java.util.function.Function;\n@@ -12,14 +13,15 @@\n import org.apache.commons.lang3.StringUtils;\n import org.cryptomator.filesystem.File;\n import org.cryptomator.filesystem.Folder;\n-import org.cryptomator.io.FileContents;\n+import org.cryptomator.filesystem.ReadableFile;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n final class ConflictResolver {\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(ConflictResolver.class);\n \tprivate static final int UUID_FIRST_GROUP_STRLEN = 8;\n+\tprivate static final int MAX_DIR_FILE_SIZE = 87; // \"normal\" file header has 88 bytes\n \n \tprivate final Pattern encryptedNamePattern;\n \tprivate final Function<String, Optional<String>> nameDecryptor;\n@@ -52,13 +54,11 @@ private File resolveConflict(File conflictingFile, MatchResult matchResult) {\n \t\tif (cleartext.isPresent()) {\n \t\t\tFolder folder = conflictingFile.parent().get();\n \t\t\tFile canonicalFile = folder.file(isDirectory ? DIR_PREFIX + ciphertext : ciphertext);\n-\t\t\tif (canonicalFile.exists()) {\n+\t\t\tif (isDirectory && canonicalFile.exists() && isSameFileBasedOnSample(canonicalFile, conflictingFile, MAX_DIR_FILE_SIZE)) {\n \t\t\t\t// there must not be two directories pointing to the same directory id. In this case no human interaction is needed to resolve this conflict:\n-\t\t\t\tif (isDirectory && FileContents.UTF_8.readContents(canonicalFile).equals(FileContents.UTF_8.readContents(conflictingFile))) {\n-\t\t\t\t\tconflictingFile.delete();\n-\t\t\t\t\treturn canonicalFile;\n-\t\t\t\t}\n-\n+\t\t\t\tconflictingFile.delete();\n+\t\t\t\treturn canonicalFile;\n+\t\t\t} else {\n \t\t\t\t// conventional conflict detected! look for an alternative name:\n \t\t\t\tFile alternativeFile;\n \t\t\t\tString conflictId;\n@@ -71,16 +71,29 @@ private File resolveConflict(File conflictingFile, MatchResult matchResult) {\n \t\t\t\tLOG.info(\"Detected conflict {}:\\n{}\\n{}\", conflictId, canonicalFile, conflictingFile);\n \t\t\t\tconflictingFile.moveTo(alternativeFile);\n \t\t\t\treturn alternativeFile;\n-\t\t\t} else {\n-\t\t\t\tconflictingFile.moveTo(canonicalFile);\n-\t\t\t\treturn canonicalFile;\n \t\t\t}\n \t\t} else {\n \t\t\t// not decryptable; false positive\n \t\t\treturn conflictingFile;\n \t\t}\n \t}\n \n+\tprivate boolean isSameFileBasedOnSample(File file1, File file2, int sampleSize) {\n+\t\ttry (ReadableFile r1 = file1.openReadable(); ReadableFile r2 = file2.openReadable()) {\n+\t\t\tif (r1.size() != r2.size()) {\n+\t\t\t\treturn false;\n+\t\t\t} else {\n+\t\t\t\tByteBuffer beginOfFile1 = ByteBuffer.allocate(sampleSize);\n+\t\t\t\tByteBuffer beginOfFile2 = ByteBuffer.allocate(sampleSize);\n+\t\t\t\tr1.read(beginOfFile1);\n+\t\t\t\tr2.read(beginOfFile2);\n+\t\t\t\tbeginOfFile1.flip();\n+\t\t\t\tbeginOfFile2.flip();\n+\t\t\t\treturn beginOfFile1.equals(beginOfFile2);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tprivate String createConflictId() {\n \t\treturn UUID.randomUUID().toString().substring(0, UUID_FIRST_GROUP_STRLEN);\n \t}",
      "parent_sha": "1ac87dd32f16584592a089260e43e3ece4625bf7"
    }
  },
  {
    "oid": "0fdcdc816a11f303b7016311da435a0662e70838",
    "message": "fixed unit test",
    "date": "2016-07-09T11:25:24Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/0fdcdc816a11f303b7016311da435a0662e70838",
    "details": {
      "sha": "0e7d7f75a105887ce24c722ff62900c5b1b781e8",
      "filename": "main/filesystem-crypto/src/test/java/org/cryptomator/filesystem/crypto/ConflictResolverTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/0fdcdc816a11f303b7016311da435a0662e70838/main%2Ffilesystem-crypto%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FConflictResolverTest.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/0fdcdc816a11f303b7016311da435a0662e70838/main%2Ffilesystem-crypto%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FConflictResolverTest.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Ffilesystem-crypto%2Fsrc%2Ftest%2Fjava%2Forg%2Fcryptomator%2Ffilesystem%2Fcrypto%2FConflictResolverTest.java?ref=0fdcdc816a11f303b7016311da435a0662e70838",
      "patch": "@@ -80,29 +80,29 @@ public void setup() {\n \n \t@Test\n \tpublic void testCanonicalName() {\n-\t\tFile resolved = conflictResolver.resolveIfNecessary(canonicalFile);\n-\t\tAssert.assertSame(canonicalFile, resolved);\n+\t\tFile result = conflictResolver.resolveIfNecessary(canonicalFile);\n+\t\tAssert.assertSame(canonicalFile, result);\n \t}\n \n \t@Test\n \tpublic void testUnrelatedName() {\n-\t\tFile resolved = conflictResolver.resolveIfNecessary(unrelatedFile);\n-\t\tAssert.assertSame(unrelatedFile, resolved);\n+\t\tFile result = conflictResolver.resolveIfNecessary(unrelatedFile);\n+\t\tAssert.assertSame(unrelatedFile, result);\n \t}\n \n \t@Test\n \tpublic void testConflictingFile() {\n-\t\tFile resolved = conflictResolver.resolveIfNecessary(conflictingFile);\n+\t\tFile result = conflictResolver.resolveIfNecessary(conflictingFile);\n \t\tMockito.verify(conflictingFile).moveTo(resolved);\n-\t\tAssert.assertSame(resolved, resolved);\n+\t\tAssert.assertSame(resolved, result);\n \t}\n \n \t@Test\n \tpublic void testConflictingFileIfCanonicalDoesntExist() {\n \t\tMockito.when(canonicalFile.exists()).thenReturn(false);\n-\t\tFile resolved = conflictResolver.resolveIfNecessary(conflictingFile);\n-\t\tMockito.verify(conflictingFile).moveTo(canonicalFile);\n-\t\tAssert.assertSame(canonicalFile, resolved);\n+\t\tFile result = conflictResolver.resolveIfNecessary(conflictingFile);\n+\t\tMockito.verify(conflictingFile).moveTo(resolved);\n+\t\tAssert.assertSame(resolved, result);\n \t}\n \n \t@Test\n@@ -122,9 +122,11 @@ public void testConflictingFolderWithDifferentId() {\n \t@Test\n \tpublic void testConflictingFolderWithSameId() {\n \t\tReadableFile directoryId1 = Mockito.mock(ReadableFile.class);\n+\t\tReadableFile directoryId2 = Mockito.mock(ReadableFile.class);\n \t\tMockito.when(canonicalFolder.openReadable()).thenReturn(directoryId1);\n-\t\tMockito.when(conflictingFolder.openReadable()).thenReturn(directoryId1);\n+\t\tMockito.when(conflictingFolder.openReadable()).thenReturn(directoryId2);\n \t\tMockito.when(directoryId1.read(Mockito.any())).thenAnswer(new FillBufferAnswer(\"id1\"));\n+\t\tMockito.when(directoryId2.read(Mockito.any())).thenAnswer(new FillBufferAnswer(\"id1\"));\n \n \t\tFile result = conflictResolver.resolveIfNecessary(conflictingFolder);\n \t\tMockito.verify(conflictingFolder).delete();",
      "parent_sha": "bc815405d26bae8be4fc2da4815a6784338c28e3"
    }
  },
  {
    "oid": "73fde5d020af44e06367b81c81947a19462b5aa4",
    "message": "null-safe status indicators",
    "date": "2016-04-09T23:54:44Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/73fde5d020af44e06367b81c81947a19462b5aa4",
    "details": {
      "sha": "1df6e7dd4e8876350851120ca7a96b3f9fdf0eb3",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/controls/DirectoryListCell.java",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/73fde5d020af44e06367b81c81947a19462b5aa4/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FDirectoryListCell.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/73fde5d020af44e06367b81c81947a19462b5aa4/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FDirectoryListCell.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrols%2FDirectoryListCell.java?ref=73fde5d020af44e06367b81c81947a19462b5aa4",
      "patch": "@@ -56,13 +56,8 @@ public DirectoryListCell() {\n \t\tpathText.setTextOverrun(OverrunStyle.ELLIPSIS);\n \t\tpathText.getStyleClass().add(\"detail-label\");\n \n-\t\tstatusIndicator.fillProperty().bind(EasyBind.monadic(itemProperty()).flatMap(Vault::unlockedProperty).map(unlocked -> {\n-\t\t\treturn unlocked ? GREEN_FILL : RED_FILL;\n-\t\t}));\n-\n-\t\tstatusIndicator.strokeProperty().bind(EasyBind.monadic(itemProperty()).flatMap(Vault::unlockedProperty).map(unlocked -> {\n-\t\t\treturn unlocked ? GREEN_STROKE : RED_STROKE;\n-\t\t}));\n+\t\tstatusIndicator.fillProperty().bind(EasyBind.monadic(itemProperty()).flatMap(Vault::unlockedProperty).filter(Boolean.TRUE::equals).map(unlocked -> GREEN_FILL).orElse(RED_FILL));\n+\t\tstatusIndicator.strokeProperty().bind(EasyBind.monadic(itemProperty()).flatMap(Vault::unlockedProperty).filter(Boolean.TRUE::equals).map(unlocked -> GREEN_STROKE).orElse(RED_STROKE));\n \n \t\ttooltipProperty().bind(EasyBind.monadic(itemProperty()).flatMap(Vault::path).map(p -> new Tooltip(p.toString())));\n \t\tcontextMenuProperty().bind(EasyBind.monadic(itemProperty()).flatMap(Vault::unlockedProperty).map(unlocked -> {",
      "parent_sha": "5c0857e98e46e5cf513995c14d674f230b19cde9"
    }
  },
  {
    "oid": "eea568ca4e58cdc20f464a0c25aa3788ce1f4b2b",
    "message": "GCM is explicitly ready!",
    "date": "2022-12-14T21:27:34Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/eea568ca4e58cdc20f464a0c25aa3788ce1f4b2b",
    "details": {
      "sha": "0148686f377c1eeb603a525fe35f02992bbe67d2",
      "filename": "src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/eea568ca4e58cdc20f464a0c25aa3788ce1f4b2b/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultPasswordController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/eea568ca4e58cdc20f464a0c25aa3788ce1f4b2b/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultPasswordController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/src%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Faddvaultwizard%2FCreateNewVaultPasswordController.java?ref=eea568ca4e58cdc20f464a0c25aa3788ce1f4b2b",
      "patch": "@@ -176,7 +176,7 @@ private void createVault(Path path) throws IOException {\n \t\t\t// 2. initialize vault:\n \t\t\ttry {\n \t\t\t\tMasterkeyLoader loader = ignored -> masterkey.copy();\n-\t\t\t\tCryptoFileSystemProperties fsProps = CryptoFileSystemProperties.cryptoFileSystemProperties().withKeyLoader(loader).build();\n+\t\t\t\tCryptoFileSystemProperties fsProps = CryptoFileSystemProperties.cryptoFileSystemProperties().withCipherCombo(CryptorProvider.Scheme.SIV_GCM).withKeyLoader(loader).build();\n \t\t\t\tCryptoFileSystemProvider.initialize(path, fsProps, DEFAULT_KEY_ID);\n \n \t\t\t\t// 3. write vault-internal readme file:",
      "parent_sha": "8009205da7054a4e4dcd52e0ed7969a07fe2da39"
    }
  },
  {
    "oid": "b066b4b045a4a62498602c77023659abb4ad37fa",
    "message": "opening a vault in read-only always assumes a filename length limit of 220\n\nreferences #1605",
    "date": "2021-04-12T16:06:09Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/b066b4b045a4a62498602c77023659abb4ad37fa",
    "details": {
      "sha": "ebdda094aaf6c803e3e5a864c008b461d185e806",
      "filename": "main/commons/src/main/java/org/cryptomator/common/vaults/Vault.java",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/b066b4b045a4a62498602c77023659abb4ad37fa/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/b066b4b045a4a62498602c77023659abb4ad37fa/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java?ref=b066b4b045a4a62498602c77023659abb4ad37fa",
      "patch": "@@ -104,19 +104,27 @@ private CryptoFileSystem createCryptoFileSystem(CharSequence passphrase) throws\n \t\tif (vaultSettings.usesReadOnlyMode().get()) {\n \t\t\tflags.add(FileSystemFlags.READONLY);\n \t\t}\n-\t\tif (!flags.contains(FileSystemFlags.READONLY) && vaultSettings.filenameLengthLimit().get() == -1) {\n+\n+\t\tint usedFilenameLengthLimit;\n+\t\tvar fileSystemCapabilityChecker = new FileSystemCapabilityChecker();\n+\t\tif (flags.contains(FileSystemFlags.READONLY)) {\n+\t\t\tusedFilenameLengthLimit = Constants.MAX_CIPHERTEXT_NAME_LENGTH;\n+\t\t} else if (vaultSettings.filenameLengthLimit().get() == -1) {\n \t\t\tLOG.debug(\"Determining file name length limitations...\");\n-\t\t\tint limit = new FileSystemCapabilityChecker().determineSupportedFileNameLength(getPath());\n-\t\t\tvaultSettings.filenameLengthLimit().set(limit);\n-\t\t\tLOG.info(\"Storing file name length limit of {}\", limit);\n+\t\t\tusedFilenameLengthLimit = fileSystemCapabilityChecker.determineSupportedFileNameLength(getPath());\n+\t\t\tvaultSettings.filenameLengthLimit().set(usedFilenameLengthLimit);\n+\t\t\tLOG.info(\"Storing file name length limit of {}\", usedFilenameLengthLimit);\n+\t\t} else {\n+\t\t\tusedFilenameLengthLimit = vaultSettings.filenameLengthLimit().get();\n \t\t}\n-\t\tassert vaultSettings.filenameLengthLimit().get() > 0;\n+\n+\t\tassert usedFilenameLengthLimit > 0;\n \t\tCryptoFileSystemProperties fsProps = CryptoFileSystemProperties.cryptoFileSystemProperties() //\n \t\t\t\t.withPassphrase(passphrase) //\n \t\t\t\t.withFlags(flags) //\n \t\t\t\t.withMasterkeyFilename(MASTERKEY_FILENAME) //\n \t\t\t\t.withMaxPathLength(vaultSettings.filenameLengthLimit().get() + Constants.MAX_ADDITIONAL_PATH_LENGTH) //\n-\t\t\t\t.withMaxNameLength(vaultSettings.filenameLengthLimit().get()) //\n+\t\t\t\t.withMaxNameLength(usedFilenameLengthLimit) //\n \t\t\t\t.build();\n \t\treturn CryptoFileSystemProvider.newFileSystem(getPath(), fsProps);\n \t}",
      "parent_sha": "41d2a2c77eac69d522aeb9e5078317d0633b1b94"
    }
  },
  {
    "oid": "23c113948f6c856279e0c3c3fccf322015b85c87",
    "message": "Replaced catch with wildcard catch and added additional logger call\n\nSee #1509 for further information and reasoning",
    "date": "2021-01-25T15:21:35Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/23c113948f6c856279e0c3c3fccf322015b85c87",
    "details": {
      "sha": "ae1f6aac631ae93af9183cdda56d91ea79581ff3",
      "filename": "main/commons/src/main/java/org/cryptomator/common/vaults/Vault.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/23c113948f6c856279e0c3c3fccf322015b85c87/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/23c113948f6c856279e0c3c3fccf322015b85c87/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java?ref=23c113948f6c856279e0c3c3fccf322015b85c87",
      "patch": "@@ -122,6 +122,7 @@ private CryptoFileSystem createCryptoFileSystem(CharSequence passphrase) throws\n \t}\n \n \tprivate void destroyCryptoFileSystem() {\n+\t\tLOG.trace(\"Trying to close associated CryptoFS...\");\n \t\tCryptoFileSystem fs = cryptoFileSystem.getAndSet(null);\n \t\tif (fs != null) {\n \t\t\ttry {\n@@ -139,7 +140,7 @@ public synchronized void unlock(CharSequence passphrase) throws CryptoException,\n \t\t\ttry {\n \t\t\t\tvolume = volumeProvider.get();\n \t\t\t\tvolume.mount(fs, getEffectiveMountFlags());\n-\t\t\t} catch (IOException | InvalidMountPointException | VolumeException e) {\n+\t\t\t} catch (Exception e) {\n \t\t\t\tdestroyCryptoFileSystem();\n \t\t\t\tthrow e;\n \t\t\t}",
      "parent_sha": "c1f44f76b942e42f496b22785be0f6708cf98827"
    }
  },
  {
    "oid": "cdbcd20241fbcd9f8df368ad6ee7a8af6e590ada",
    "message": "Fixed faulty access introduced by parallel release of 1.5.8",
    "date": "2020-09-05T20:15:02Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/cdbcd20241fbcd9f8df368ad6ee7a8af6e590ada",
    "details": {
      "sha": "39ac77f78f98619e63b8e3a0fe31a6512e10fc1e",
      "filename": "main/commons/src/main/java/org/cryptomator/common/vaults/VaultModule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/cdbcd20241fbcd9f8df368ad6ee7a8af6e590ada/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultModule.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/cdbcd20241fbcd9f8df368ad6ee7a8af6e590ada/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultModule.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVaultModule.java?ref=cdbcd20241fbcd9f8df368ad6ee7a8af6e590ada",
      "patch": "@@ -147,7 +147,7 @@ private String getLinuxFuseDefaultMountFlags(ReadOnlyBooleanProperty readOnly) {\n \t// see https://github.com/billziss-gh/winfsp/blob/5d0b10d0b643652c00ebb4704dc2bb28e7244973/src/dll/fuse/fuse_main.c#L53-L62 for syntax guide\n \t// see https://github.com/billziss-gh/winfsp/blob/5d0b10d0b643652c00ebb4704dc2bb28e7244973/src/dll/fuse/fuse.c#L295-L319 for options (-o <...>)\n \t// see https://github.com/billziss-gh/winfsp/wiki/Frequently-Asked-Questions/5ba00e4be4f5e938eaae6ef1500b331de12dee77 (FUSE 4.) on why the given defaults were choosen\n-\tprivate String getWindowsFuseDefaultMountFlags(ReadOnlyStringProperty mountName, ReadOnlyBooleanProperty readOnly) {\n+\tprivate String getWindowsFuseDefaultMountFlags(StringBinding mountName, ReadOnlyBooleanProperty readOnly) {\n \t\tassert SystemUtils.IS_OS_WINDOWS;\n \t\tStringBuilder flags = new StringBuilder();\n ",
      "parent_sha": "fef3ade5c64e4ed06475772b2aa1113fdede0149"
    }
  },
  {
    "oid": "67ba7cac40727b1609facc4dcb9750f978cc8de9",
    "message": "Vault doesn't need to be Serializable in order for ObjectMapper to work properly",
    "date": "2016-03-04T20:27:46Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/67ba7cac40727b1609facc4dcb9750f978cc8de9",
    "details": {
      "sha": "a58741df13441f95350ac1d5834e646579823c0b",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/model/Vault.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/67ba7cac40727b1609facc4dcb9750f978cc8de9/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/67ba7cac40727b1609facc4dcb9750f978cc8de9/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fmodel%2FVault.java?ref=67ba7cac40727b1609facc4dcb9750f978cc8de9",
      "patch": "@@ -9,7 +9,6 @@\n package org.cryptomator.ui.model;\n \n import java.io.IOException;\n-import java.io.Serializable;\n import java.io.UncheckedIOException;\n import java.nio.file.FileAlreadyExistsException;\n import java.nio.file.Path;\n@@ -51,9 +50,7 @@\n import javafx.collections.FXCollections;\n import javafx.collections.ObservableList;\n \n-public class Vault implements Serializable, CryptoFileSystemDelegate {\n-\n-\tprivate static final long serialVersionUID = 3754487289683599469L;\n+public class Vault implements CryptoFileSystemDelegate {\n \n \tpublic static final String VAULT_FILE_EXTENSION = \".cryptomator\";\n ",
      "parent_sha": "9117b6bc0e37e1f17765495bee0a1ec8ae2ec51f"
    }
  },
  {
    "oid": "65550ce70f1d0f51c1f18c4fccfb925ce4e3fa5e",
    "message": "fixes #165",
    "date": "2016-03-07T16:25:29Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/65550ce70f1d0f51c1f18c4fccfb925ce4e3fa5e",
    "details": {
      "sha": "38abb0e45d71579e74a76f12089ec681eb7fcf98",
      "filename": "main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/65550ce70f1d0f51c1f18c4fccfb925ce4e3fa5e/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FMainController.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/65550ce70f1d0f51c1f18c4fccfb925ce4e3fa5e/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FMainController.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fui%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fui%2Fcontrollers%2FMainController.java?ref=65550ce70f1d0f51c1f18c4fccfb925ce4e3fa5e",
      "patch": "@@ -260,9 +260,8 @@ private void activeControllerDidChange(AbstractFXMLViewController newValue) {\n \n \tprivate void selectedVaultDidChange(Vault newValue) {\n \t\tif (newValue == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (newValue.isUnlocked()) {\n+\t\t\tactiveController.set(welcomeController.get());\n+\t\t} else if (newValue.isUnlocked()) {\n \t\t\tthis.showUnlockedView(newValue);\n \t\t} else if (newValue.isValidVaultDirectory()) {\n \t\t\tthis.showUnlockView();",
      "parent_sha": "78300f8bf18aaca6c1f4595b3ef2bd1148263e83"
    }
  },
  {
    "oid": "17dc32bb79ce1bc7f3f3ee08ec5a0c732758bf4b",
    "message": "lock vault on external unmount",
    "date": "2021-03-23T11:52:38Z",
    "url": "https://github.com/cryptomator/cryptomator/commit/17dc32bb79ce1bc7f3f3ee08ec5a0c732758bf4b",
    "details": {
      "sha": "5c87be3be6f948426cf8c594950936a1614cb946",
      "filename": "main/commons/src/main/java/org/cryptomator/common/vaults/Vault.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/cryptomator/cryptomator/blob/17dc32bb79ce1bc7f3f3ee08ec5a0c732758bf4b/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java",
      "raw_url": "https://github.com/cryptomator/cryptomator/raw/17dc32bb79ce1bc7f3f3ee08ec5a0c732758bf4b/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java",
      "contents_url": "https://api.github.com/repos/cryptomator/cryptomator/contents/main%2Fcommons%2Fsrc%2Fmain%2Fjava%2Forg%2Fcryptomator%2Fcommon%2Fvaults%2FVault.java?ref=17dc32bb79ce1bc7f3f3ee08ec5a0c732758bf4b",
      "patch": "@@ -42,6 +42,7 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.atomic.AtomicReference;\n \n import static org.cryptomator.common.Constants.MASTERKEY_FILENAME;\n@@ -139,7 +140,14 @@ public synchronized void unlock(CharSequence passphrase) throws CryptoException,\n \t\t\tcryptoFileSystem.set(fs);\n \t\t\ttry {\n \t\t\t\tvolume = volumeProvider.get();\n-\t\t\t\tvolume.mount(fs, getEffectiveMountFlags());\n+\t\t\t\tvolume.mount(fs, getEffectiveMountFlags()).handle((voit, throwable) -> {\n+\t\t\t\t\tdestroyCryptoFileSystem();\n+\t\t\t\t\tsetState(VaultState.LOCKED); //TODO: possible race conditions of the vault state. Use Platform.runLater()?\n+\t\t\t\t\tif (throwable != null) {\n+\t\t\t\t\t\tLOG.warn(\"Unexpected unmount and lock of vault\" + getDisplayName(), throwable);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn CompletableFuture.completedFuture(null);\n+\t\t\t\t});\n \t\t\t} catch (Exception e) {\n \t\t\t\tdestroyCryptoFileSystem();\n \t\t\t\tthrow e;",
      "parent_sha": "c05e00d32ad55f2975746a965274278f428b53d2"
    }
  }
]