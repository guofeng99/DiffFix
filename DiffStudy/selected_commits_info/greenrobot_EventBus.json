[
  {
    "oid": "a74cdf0a5c96359b8d10e129740e33d90504f43a",
    "message": "Document MAIN_ORDERED behavior if not Android.",
    "date": "2022-01-25T07:44:41Z",
    "url": "https://github.com/greenrobot/EventBus/commit/a74cdf0a5c96359b8d10e129740e33d90504f43a",
    "details": {
      "sha": "b1ff2427586af65479e74e3b95d6b2ac86de7e14",
      "filename": "EventBus/src/org/greenrobot/eventbus/ThreadMode.java",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/a74cdf0a5c96359b8d10e129740e33d90504f43a/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FThreadMode.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/a74cdf0a5c96359b8d10e129740e33d90504f43a/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FThreadMode.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FThreadMode.java?ref=a74cdf0a5c96359b8d10e129740e33d90504f43a",
      "patch": "@@ -17,15 +17,14 @@\n \n /**\n  * Each subscriber method has a thread mode, which determines in which thread the method is to be called by EventBus.\n- * EventBus takes care of threading independently from the posting thread.\n- * \n+ * EventBus takes care of threading independently of the posting thread.\n+ *\n  * @see EventBus#register(Object)\n- * @author Markus\n  */\n public enum ThreadMode {\n     /**\n-     * Subscriber will be called directly in the same thread, which is posting the event. This is the default. Event delivery\n-     * implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for\n+     * This is the default. Subscriber will be called directly in the same thread, which is posting the event. Event delivery\n+     * implies the least overhead because it avoids thread switching completely. Thus, this is the recommended mode for\n      * simple tasks that are known to complete in a very short time without requiring the main thread. Event handlers\n      * using this mode must return quickly to avoid blocking the posting thread, which may be the main thread.\n      */\n@@ -35,29 +34,34 @@ public enum ThreadMode {\n      * On Android, subscriber will be called in Android's main thread (UI thread). If the posting thread is\n      * the main thread, subscriber methods will be called directly, blocking the posting thread. Otherwise the event\n      * is queued for delivery (non-blocking). Subscribers using this mode must return quickly to avoid blocking the main thread.\n+     * <p>\n      * If not on Android, behaves the same as {@link #POSTING}.\n      */\n     MAIN,\n \n     /**\n      * On Android, subscriber will be called in Android's main thread (UI thread). Different from {@link #MAIN},\n      * the event will always be queued for delivery. This ensures that the post call is non-blocking.\n+     * <p>\n+     * If not on Android, behaves the same as {@link #POSTING}.\n      */\n     MAIN_ORDERED,\n \n     /**\n      * On Android, subscriber will be called in a background thread. If posting thread is not the main thread, subscriber methods\n      * will be called directly in the posting thread. If the posting thread is the main thread, EventBus uses a single\n      * background thread, that will deliver all its events sequentially. Subscribers using this mode should try to\n-     * return quickly to avoid blocking the background thread. If not on Android, always uses a background thread.\n+     * return quickly to avoid blocking the background thread.\n+     * <p>\n+     * If not on Android, always uses a background thread.\n      */\n     BACKGROUND,\n \n     /**\n-     * Subscriber will be called in a separate thread. This is always independent from the posting thread and the\n+     * Subscriber will be called in a separate thread. This is always independent of the posting thread and the\n      * main thread. Posting events never wait for subscriber methods using this mode. Subscriber methods should\n      * use this mode if their execution might take some time, e.g. for network access. Avoid triggering a large number\n-     * of long running asynchronous subscriber methods at the same time to limit the number of concurrent threads. EventBus\n+     * of long-running asynchronous subscriber methods at the same time to limit the number of concurrent threads. EventBus\n      * uses a thread pool to efficiently reuse threads from completed asynchronous subscriber notifications.\n      */\n     ASYNC",
      "parent_sha": "6f939ca40a9691f0e12e3facff4bb4f0377aeae1"
    }
  },
  {
    "oid": "0a013ffcc55a96e8a5ce4d2ac862b33cf5e2cc00",
    "message": "some generic diamonds, minor",
    "date": "2015-12-04T11:05:20Z",
    "url": "https://github.com/greenrobot/EventBus/commit/0a013ffcc55a96e8a5ce4d2ac862b33cf5e2cc00",
    "details": {
      "sha": "725d4178b6eaab0d77b91ba907a89422049120f3",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/0a013ffcc55a96e8a5ce4d2ac862b33cf5e2cc00/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/0a013ffcc55a96e8a5ce4d2ac862b33cf5e2cc00/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=0a013ffcc55a96e8a5ce4d2ac862b33cf5e2cc00",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2012-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,7 +46,7 @@ public class EventBus {\n     static volatile EventBus defaultInstance;\n \n     private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();\n-    private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();\n+    private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<>();\n \n     private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;\n     private final Map<Object, List<Class<?>>> typesBySubscriber;\n@@ -103,9 +103,9 @@ public EventBus() {\n     }\n \n     EventBus(EventBusBuilder builder) {\n-        subscriptionsByEventType = new HashMap<Class<?>, CopyOnWriteArrayList<Subscription>>();\n-        typesBySubscriber = new HashMap<Object, List<Class<?>>>();\n-        stickyEvents = new ConcurrentHashMap<Class<?>, Object>();\n+        subscriptionsByEventType = new HashMap<>();\n+        typesBySubscriber = new HashMap<>();\n+        stickyEvents = new ConcurrentHashMap<>();\n         mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);\n         backgroundPoster = new BackgroundPoster(this);\n         asyncPoster = new AsyncPoster(this);\n@@ -140,8 +140,8 @@ public void register(Object subscriber) {\n     // Must be called in synchronized block\n     private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n         Class<?> eventType = subscriberMethod.eventType;\n-        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n         Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n+        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n         if (subscriptions == null) {\n             subscriptions = new CopyOnWriteArrayList<Subscription>();\n             subscriptionsByEventType.put(eventType, subscriptions);",
      "parent_sha": "254a27f411c374005f6b22de5d71d27dd60fb6ce"
    }
  },
  {
    "oid": "061358358586ed2120b314a92bfe75a02535fa8e",
    "message": "extended hasSubscriber tests",
    "date": "2014-11-09T23:08:11Z",
    "url": "https://github.com/greenrobot/EventBus/commit/061358358586ed2120b314a92bfe75a02535fa8e",
    "details": {
      "sha": "674e2ce5085fc2001e500070d0510b100c61eb49",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/061358358586ed2120b314a92bfe75a02535fa8e/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/061358358586ed2120b314a92bfe75a02535fa8e/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java?ref=061358358586ed2120b314a92bfe75a02535fa8e",
      "patch": "@@ -224,27 +224,42 @@ public void testPostInEventHandler() {\n \n     public void testHasSubscriberForEvent() {\n         assertFalse(eventBus.hasSubscriberForEvent(String.class));\n+\n         eventBus.register(this);\n         assertTrue(eventBus.hasSubscriberForEvent(String.class));\n+\n+        eventBus.unregister(this);\n+        assertFalse(eventBus.hasSubscriberForEvent(String.class));\n     }\n \n     public void testHasSubscriberForEventSuperclass() {\n         assertFalse(eventBus.hasSubscriberForEvent(String.class));\n-        eventBus.register(new Object() {\n+\n+        Object subscriber = new Object() {\n             public void onEvent(Object event) {\n             }\n-        });\n+        };\n+        eventBus.register(subscriber);\n         assertTrue(eventBus.hasSubscriberForEvent(String.class));\n+\n+        eventBus.unregister(subscriber);\n+        assertFalse(eventBus.hasSubscriberForEvent(String.class));\n     }\n \n     public void testHasSubscriberForEventImplementedInterface() {\n         assertFalse(eventBus.hasSubscriberForEvent(String.class));\n-        eventBus.register(new Object() {\n+\n+        Object subscriber = new Object() {\n             public void onEvent(CharSequence event) {\n             }\n-        });\n+        };\n+        eventBus.register(subscriber);\n         assertTrue(eventBus.hasSubscriberForEvent(CharSequence.class));\n         assertTrue(eventBus.hasSubscriberForEvent(String.class));\n+\n+        eventBus.unregister(subscriber);\n+        assertFalse(eventBus.hasSubscriberForEvent(CharSequence.class));\n+        assertFalse(eventBus.hasSubscriberForEvent(String.class));\n     }\n \n     public void onEvent(String event) {",
      "parent_sha": "49649fa5abb20433c907f3d0d6269d341724a624"
    }
  },
  {
    "oid": "75543c42e087cf9c92ae71ffe38f7040494c6ea3",
    "message": "checkAdd optimization: added faster 1st level check",
    "date": "2015-12-03T17:23:38Z",
    "url": "https://github.com/greenrobot/EventBus/commit/75543c42e087cf9c92ae71ffe38f7040494c6ea3",
    "details": {
      "sha": "45d0a29b3bd8bc97f4d35259ecd70b46a9e34d25",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 26,
      "deletions": 5,
      "changes": 31,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/75543c42e087cf9c92ae71ffe38f7040494c6ea3/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/75543c42e087cf9c92ae71ffe38f7040494c6ea3/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=75543c42e087cf9c92ae71ffe38f7040494c6ea3",
      "patch": "@@ -201,8 +201,9 @@ static void clearCaches() {\n     }\n \n     static class FindState {\n-        final List<SubscriberMethod> subscriberMethods = new ArrayList<SubscriberMethod>();\n-        final Map<String, Class> eventTypesFound = new HashMap<String, Class>();\n+        final List<SubscriberMethod> subscriberMethods = new ArrayList<>();\n+        final Map<Class, Object> anyMethodByEventType = new HashMap<>();\n+        final Map<String, Class> subscriberClassByMethodKey = new HashMap<>();\n         final StringBuilder methodKeyBuilder = new StringBuilder(128);\n \n         Class<?> subscriberClass;\n@@ -217,7 +218,8 @@ void initForSubscriber(Class<?> subscriberClass) {\n \n         void recycle() {\n             subscriberMethods.clear();\n-            eventTypesFound.clear();\n+            anyMethodByEventType.clear();\n+            subscriberClassByMethodKey.clear();\n             methodKeyBuilder.setLength(0);\n             subscriberClass = null;\n             clazz = null;\n@@ -226,19 +228,38 @@ void recycle() {\n         }\n \n         boolean checkAdd(Method method, Class<?> eventType) {\n+            // 2 level check: 1st level with event type only (fast), 2nd level with complete signature when required.\n+            // Usually a subscriber doesn't have methods listening to the same event type.\n+            Object existing = anyMethodByEventType.put(eventType, method);\n+            if (existing == null) {\n+                return true;\n+            } else {\n+                if(existing instanceof Method) {\n+                    if(!checkAddWithMethodSignature((Method) existing, eventType)) {\n+                        // Paranoia check\n+                        throw new IllegalStateException();\n+                    }\n+                    // Put any non-Method object to \"consume\" the existing Method\n+                    anyMethodByEventType.put(eventType, this);\n+                }\n+                return checkAddWithMethodSignature(method, eventType);\n+            }\n+        }\n+\n+        private boolean checkAddWithMethodSignature(Method method, Class<?> eventType) {\n             methodKeyBuilder.setLength(0);\n             methodKeyBuilder.append(method.getName());\n             methodKeyBuilder.append('>').append(eventType.getName());\n \n             String methodKey = methodKeyBuilder.toString();\n             Class<?> methodClass = method.getDeclaringClass();\n-            Class methodClassOld = eventTypesFound.put(methodKey, methodClass);\n+            Class methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);\n             if (methodClassOld == null || methodClassOld.isAssignableFrom(methodClass)) {\n                 // Only add if not already found in a sub class\n                 return true;\n             } else {\n                 // Revert the put, old class is further down the class hierarchy\n-                eventTypesFound.put(methodKey, methodClassOld);\n+                subscriberClassByMethodKey.put(methodKey, methodClassOld);\n                 return false;\n             }\n         }",
      "parent_sha": "ec8a1c2742cdb9f5c01a1d654c9a67a73ebc9dad"
    }
  },
  {
    "oid": "4221577a2637e46f307cdfa464b0d9d01bf32f11",
    "message": "Minor: fix typo in debug message",
    "date": "2013-11-22T16:17:31Z",
    "url": "https://github.com/greenrobot/EventBus/commit/4221577a2637e46f307cdfa464b0d9d01bf32f11",
    "details": {
      "sha": "c09e399ef7505f52e5697f8242dbe79dd486b5e2",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/4221577a2637e46f307cdfa464b0d9d01bf32f11/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/4221577a2637e46f307cdfa464b0d9d01bf32f11/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=4221577a2637e46f307cdfa464b0d9d01bf32f11",
      "patch": "@@ -403,7 +403,7 @@ private void postSingleEvent(Object event, boolean isMainThread) throws Error {\n             }\n         }\n         if (!subscriptionFound) {\n-            Log.d(TAG, \"No subscripers registered for event \" + eventClass);\n+            Log.d(TAG, \"No subscribers registered for event \" + eventClass);\n             if (eventClass != NoSubscriberEvent.class && eventClass != SubscriberExceptionEvent.class) {\n                 post(new NoSubscriberEvent(this, event));\n             }",
      "parent_sha": "e7c3779d72f8da9ba49286de4c3c12cffc1b7767"
    }
  },
  {
    "oid": "f7f1c3c683bfd0767ba1903bf741c1f5ad21d2d1",
    "message": "aditional sticky events",
    "date": "2012-08-29T08:57:54Z",
    "url": "https://github.com/greenrobot/EventBus/commit/f7f1c3c683bfd0767ba1903bf741c1f5ad21d2d1",
    "details": {
      "sha": "eafdbe6325e83d2d29dd361fcbb7d3628d8bc082",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java",
      "status": "modified",
      "additions": 71,
      "deletions": 4,
      "changes": 75,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/f7f1c3c683bfd0767ba1903bf741c1f5ad21d2d1/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusStickyEventTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/f7f1c3c683bfd0767ba1903bf741c1f5ad21d2d1/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusStickyEventTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusStickyEventTest.java?ref=f7f1c3c683bfd0767ba1903bf741c1f5ad21d2d1",
      "patch": "@@ -15,7 +15,6 @@\n  */\r\n package de.greenrobot.event.test;\r\n \r\n-\r\n /**\r\n  * @author Markus Junginger, greenrobot\r\n  */\r\n@@ -28,12 +27,53 @@ public void testPostSticky() throws InterruptedException {\n         assertEquals(Thread.currentThread(), lastThread);\r\n     }\r\n \r\n+    public void testPostStickyTwoEvents() throws InterruptedException {\r\n+        eventBus.postSticky(\"Sticky\");\r\n+        eventBus.postSticky(new IntTestEvent(7));\r\n+        eventBus.registerSticky(this);\r\n+        assertEquals(2, eventCount.intValue());\r\n+    }\r\n+\r\n+    public void testPostStickyTwoEventsRegisterEventTypes() throws InterruptedException {\r\n+        eventBus.postSticky(\"Sticky\");\r\n+        eventBus.postSticky(new IntTestEvent(7));\r\n+        eventBus.registerSticky(this, String.class, IntTestEvent.class);\r\n+        assertEquals(2, eventCount.intValue());\r\n+    }\r\n+\r\n+    public void testPostStickyRegisterForType() throws InterruptedException {\r\n+        eventBus.postSticky(\"Sticky\");\r\n+        eventBus.registerSticky(this, String.class);\r\n+        assertEquals(\"Sticky\", lastEvent);\r\n+        assertEquals(Thread.currentThread(), lastThread);\r\n+    }\r\n+\r\n+    public void testPostStickyRegisterNonSticky() throws InterruptedException {\r\n+        eventBus.postSticky(\"Sticky\");\r\n+        eventBus.register(this);\r\n+        assertNull(lastEvent);\r\n+        assertEquals(0, eventCount.intValue());\r\n+    }\r\n+\r\n+    public void testPostNonStickyRegisterSticky() throws InterruptedException {\r\n+        eventBus.post(\"NonSticky\");\r\n+        eventBus.registerSticky(this);\r\n+        assertNull(lastEvent);\r\n+        assertEquals(0, eventCount.intValue());\r\n+    }\r\n+\r\n     public void testPostStickyTwice() throws InterruptedException {\r\n         eventBus.postSticky(\"Sticky\");\r\n         eventBus.postSticky(\"NewSticky\");\r\n         eventBus.registerSticky(this);\r\n         assertEquals(\"NewSticky\", lastEvent);\r\n-        assertEquals(Thread.currentThread(), lastThread);\r\n+    }\r\n+\r\n+    public void testPostStickyThenPostNormal() throws InterruptedException {\r\n+        eventBus.postSticky(\"Sticky\");\r\n+        eventBus.post(\"NonSticky\");\r\n+        eventBus.registerSticky(this);\r\n+        assertEquals(\"Sticky\", lastEvent);\r\n     }\r\n \r\n     public void testPostStickyWithRegisterAndUnregister() throws InterruptedException {\r\n@@ -45,19 +85,46 @@ public void testPostStickyWithRegisterAndUnregister() throws InterruptedExceptio\n         eventBus.registerSticky(this);\r\n         assertEquals(\"Sticky\", lastEvent);\r\n         assertEquals(2, eventCount.intValue());\r\n-        \r\n+\r\n         eventBus.postSticky(\"NewSticky\");\r\n         assertEquals(3, eventCount.intValue());\r\n         assertEquals(\"NewSticky\", lastEvent);\r\n-        \r\n+\r\n         eventBus.unregister(this);\r\n         eventBus.registerSticky(this);\r\n         assertEquals(4, eventCount.intValue());\r\n         assertEquals(\"NewSticky\", lastEvent);\r\n     }\r\n \r\n+    public void testPostStickyAndGet() throws InterruptedException {\r\n+        eventBus.postSticky(\"Sticky\");\r\n+        assertEquals(\"Sticky\", eventBus.getStickyEvent(String.class));\r\n+    }\r\n+\r\n+    public void testPostStickyRemoveClass() throws InterruptedException {\r\n+        eventBus.postSticky(\"Sticky\");\r\n+        eventBus.removeStickyEvent(String.class);\r\n+        assertNull(eventBus.getStickyEvent(String.class));\r\n+        eventBus.registerSticky(this);\r\n+        assertNull(lastEvent);\r\n+        assertEquals(0, eventCount.intValue());\r\n+    }\r\n+\r\n+    public void testPostStickyRemoveEvent() throws InterruptedException {\r\n+        eventBus.postSticky(\"Sticky\");\r\n+        assertTrue(eventBus.removeStickyEvent(\"Sticky\"));\r\n+        assertNull(eventBus.getStickyEvent(String.class));\r\n+        eventBus.registerSticky(this);\r\n+        assertNull(lastEvent);\r\n+        assertEquals(0, eventCount.intValue());\r\n+    }\r\n+\r\n     public void onEvent(String event) {\r\n         trackEvent(event);\r\n     }\r\n \r\n+    public void onEvent(IntTestEvent event) {\r\n+        trackEvent(event);\r\n+    }\r\n+\r\n }\r",
      "parent_sha": "712d2a73e82b5720ed256160e89d89d24b1c85a3"
    }
  },
  {
    "oid": "79401d335410ea47c444f8114ab6bba0ae8f92e9",
    "message": "ErrorDialogFragmentFactory must be public",
    "date": "2012-11-14T12:49:44Z",
    "url": "https://github.com/greenrobot/EventBus/commit/79401d335410ea47c444f8114ab6bba0ae8f92e9",
    "details": {
      "sha": "50c335b8afa9990ff48e99d7144101aafeb6fe8b",
      "filename": "EventBus/src/de/greenrobot/event/util/ErrorDialogFragmentFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/79401d335410ea47c444f8114ab6bba0ae8f92e9/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogFragmentFactory.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/79401d335410ea47c444f8114ab6bba0ae8f92e9/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogFragmentFactory.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogFragmentFactory.java?ref=79401d335410ea47c444f8114ab6bba0ae8f92e9",
      "patch": "@@ -10,7 +10,7 @@\n  * Factory to allow injecting a more complex exception mapping; typically you would subclass one of {@link Honeycomb} or\r\n  * {@link Support}.\r\n  */\r\n-abstract class ErrorDialogFragmentFactory<T> {\r\n+public abstract class ErrorDialogFragmentFactory<T> {\r\n     protected final ErrorDialogConfig config;\r\n \r\n     protected ErrorDialogFragmentFactory(ErrorDialogConfig config) {\r",
      "parent_sha": "638edf051b02002990f4c2ad16e209485698240f"
    }
  },
  {
    "oid": "b04c85cd15d60c9a18312166528d61c6c78e0841",
    "message": "Make getStickyEvent and removeStickyEvent generic so the caller doesn't need casts",
    "date": "2013-11-07T15:40:20Z",
    "url": "https://github.com/greenrobot/EventBus/commit/b04c85cd15d60c9a18312166528d61c6c78e0841",
    "details": {
      "sha": "70591848ada5d4a772bab0752be5aca04f325210",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/b04c85cd15d60c9a18312166528d61c6c78e0841/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/b04c85cd15d60c9a18312166528d61c6c78e0841/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=b04c85cd15d60c9a18312166528d61c6c78e0841",
      "patch": "@@ -349,9 +349,9 @@ public void postSticky(Object event) {\n      * \n      * @see #postSticky(Object)\n      */\n-    public Object getStickyEvent(Class<?> eventType) {\n+    public <T> T getStickyEvent(Class<T> eventType) {\n         synchronized (stickyEvents) {\n-            return stickyEvents.get(eventType);\n+            return eventType.cast(stickyEvents.get(eventType));\n         }\n     }\n \n@@ -360,9 +360,9 @@ public Object getStickyEvent(Class<?> eventType) {\n      * \n      * @see #postSticky(Object)\n      */\n-    public Object removeStickyEvent(Class<?> eventType) {\n+    public <T> T removeStickyEvent(Class<T> eventType) {\n         synchronized (stickyEvents) {\n-            return stickyEvents.remove(eventType);\n+            return eventType.cast(stickyEvents.remove(eventType));\n         }\n     }\n ",
      "parent_sha": "e7c3779d72f8da9ba49286de4c3c12cffc1b7767"
    }
  },
  {
    "oid": "880c0aea35bea562b6f99c1191e8a15149c89cfd",
    "message": "formatting improvements",
    "date": "2015-12-04T21:03:06Z",
    "url": "https://github.com/greenrobot/EventBus/commit/880c0aea35bea562b6f99c1191e8a15149c89cfd",
    "details": {
      "sha": "3c3d87a8fca79b1dda20a5080ced10fb062bb358",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/880c0aea35bea562b6f99c1191e8a15149c89cfd/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/880c0aea35bea562b6f99c1191e8a15149c89cfd/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=880c0aea35bea562b6f99c1191e8a15149c89cfd",
      "patch": "@@ -407,7 +407,7 @@ private void writeIndexLines(BufferedWriter writer, String myPackage) throws IOE\n                 }\n                 String subscriberClass = getClassString(subscriberTypeElement, myPackage);\n                 if (isVisible(myPackage, subscriberTypeElement)) {\n-                    writeLine(writer, 2, \"SUBSCRIBER_INDEX.put(\", subscriberClass + \".class,\", infoClass + \".class);\\n\");\n+                    writeLine(writer, 2, \"SUBSCRIBER_INDEX.put(\" + subscriberClass + \".class,\", infoClass + \".class);\");\n                 } else {\n                     writer.write(\"        // Subscriber not visible to index: \" + subscriberClass + \"\\n\");\n                 }\n@@ -438,15 +438,17 @@ private void writeLine(BufferedWriter writer, int indentLevel, String... parts)\n         int len = indentLevel * 4;\n         for (int i = 0; i < parts.length; i++) {\n             String part = parts[i];\n-            if (len + part.length() > 118) {\n-                writer.write(\"\\n\");\n-                if (indentLevel < 12) {\n-                    indentLevel += 2;\n+            if (i != 0) {\n+                if (len + part.length() > 118) {\n+                    writer.write(\"\\n\");\n+                    if (indentLevel < 12) {\n+                        indentLevel += 2;\n+                    }\n+                    writeIndent(writer, indentLevel);\n+                    len = indentLevel * 4;\n+                } else {\n+                    writer.write(\" \");\n                 }\n-                writeIndent(writer, indentLevel);\n-                len = indentLevel * 4;\n-            } else if (i != 0) {\n-                writer.write(\" \");\n             }\n             writer.write(part);\n             len += part.length();",
      "parent_sha": "8fdd73d4e4600c7f1a69da8438d861c387b5b89c"
    }
  },
  {
    "oid": "a39b054c550ba91a05d2ae57ba3ef94ba4f53e77",
    "message": "Don't use equals for subscriber already registered check",
    "date": "2012-08-30T15:07:13Z",
    "url": "https://github.com/greenrobot/EventBus/commit/a39b054c550ba91a05d2ae57ba3ef94ba4f53e77",
    "details": {
      "sha": "3b0845e4934f900c97f1a24b4c0e7f3f3b4b3641",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/a39b054c550ba91a05d2ae57ba3ef94ba4f53e77/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/a39b054c550ba91a05d2ae57ba3ef94ba4f53e77/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=a39b054c550ba91a05d2ae57ba3ef94ba4f53e77",
      "patch": "@@ -190,8 +190,8 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boo\n             subscriptionsByEventType.put(eventType, subscriptions);\r\n         } else {\r\n             for (Subscription subscription : subscriptions) {\r\n-                if (subscription.equals(newSubscription)) {\r\n-                    throw new RuntimeException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\r\n+                if (subscription == newSubscription) {\r\n+                    throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\r\n                             + eventType);\r\n                 }\r\n             }\r\n@@ -427,7 +427,8 @@ void invokeSubscriber(Subscription subscription, Object event) throws Error {\n                     Log.e(TAG, \"Could not dispatch event: \" + event.getClass() + \" to subscribing class \"\r\n                             + subscription.subscriber.getClass(), cause);\r\n                 }\r\n-                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event, subscription.subscriber);\r\n+                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event,\r\n+                        subscription.subscriber);\r\n                 post(exEvent);\r\n             }\r\n         } catch (IllegalAccessException e) {\r",
      "parent_sha": "35e879cea1de6af80a5fc16ef39fd1d2fbeefe96"
    }
  },
  {
    "oid": "254a27f411c374005f6b22de5d71d27dd60fb6ce",
    "message": "make METHOD_CACHE a ConcurrentHashMap",
    "date": "2015-12-04T10:59:19Z",
    "url": "https://github.com/greenrobot/EventBus/commit/254a27f411c374005f6b22de5d71d27dd60fb6ce",
    "details": {
      "sha": "cd4e718789a30e450b715a65e2bc8cae0b27e2ab",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/254a27f411c374005f6b22de5d71d27dd60fb6ce/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/254a27f411c374005f6b22de5d71d27dd60fb6ce/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=254a27f411c374005f6b22de5d71d27dd60fb6ce",
      "patch": "@@ -21,6 +21,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n class SubscriberMethodFinder {\n     /*\n@@ -32,7 +33,7 @@ class SubscriberMethodFinder {\n     private static final int SYNTHETIC = 0x1000;\n \n     private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;\n-    private static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new HashMap<Class<?>, List<SubscriberMethod>>();\n+    private static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();\n \n     private final boolean strictMethodVerification;\n     private final boolean ignoreGeneratedIndex;\n@@ -46,10 +47,7 @@ class SubscriberMethodFinder {\n     }\n \n     List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n-        List<SubscriberMethod> subscriberMethods;\n-        synchronized (METHOD_CACHE) {\n-            subscriberMethods = METHOD_CACHE.get(subscriberClass);\n-        }\n+        List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);\n         if (subscriberMethods != null) {\n             return subscriberMethods;\n         }\n@@ -64,9 +62,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n             throw new EventBusException(\"Subscriber \" + subscriberClass\n                     + \" and its super classes have no public methods with the @Subscribe annotation\");\n         } else {\n-            synchronized (METHOD_CACHE) {\n-                METHOD_CACHE.put(subscriberClass, subscriberMethods);\n-            }\n+            METHOD_CACHE.put(subscriberClass, subscriberMethods);\n             return subscriberMethods;\n         }\n     }\n@@ -222,9 +218,7 @@ private void findUsingReflectionInSingleClass(FindState findState) {\n     }\n \n     static void clearCaches() {\n-        synchronized (METHOD_CACHE) {\n-            METHOD_CACHE.clear();\n-        }\n+        METHOD_CACHE.clear();\n     }\n \n     static class FindState {",
      "parent_sha": "8c328d3b0ab9d9c51b68f1f73c94d497c4f8bad6"
    }
  },
  {
    "oid": "72e080b330b12773daa47585559fd99a66fd93d5",
    "message": "fixed a null problem, added index logging",
    "date": "2015-02-23T15:09:38Z",
    "url": "https://github.com/greenrobot/EventBus/commit/72e080b330b12773daa47585559fd99a66fd93d5",
    "details": {
      "sha": "5e816b91f5b726a1cdf2d1672a2f27f66749d651",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 17,
      "deletions": 6,
      "changes": 23,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/72e080b330b12773daa47585559fd99a66fd93d5/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/72e080b330b12773daa47585559fd99a66fd93d5/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=72e080b330b12773daa47585559fd99a66fd93d5",
      "patch": "@@ -54,15 +54,24 @@ class SubscriberMethodFinder {\n                     subscriberMethods = new ArrayList<SubscriberMethod>();\n                     newIndex.put(key, subscriberMethods);\n                 }\n-                Method method = entry.subscriberType.getMethod(entry.methodName, entry.eventType);\n-                SubscriberMethod subscriberMethod = new SubscriberMethod(method, entry.threadMode, entry.eventType);\n-                subscriberMethods.add(subscriberMethod);\n+                try {\n+                    Method method = entry.subscriberType.getMethod(entry.methodName, entry.eventType);\n+                    SubscriberMethod subscriberMethod = new SubscriberMethod(method, entry.threadMode, entry.eventType);\n+                    subscriberMethods.add(subscriberMethod);\n+                } catch (NoSuchMethodException e) {\n+                    // Offending class is not part of standard message\n+                    throw new NoSuchMethodException(entry.subscriberType.getName() + \".\" +\n+                            entry.methodName + \"(\" + entry.eventType.getName() + \")\");\n+                }\n             }\n             index = newIndex;\n+            Log.d(EventBus.TAG, \"Initialized subscriber index with \" + entries.length + \" entries for \" + index.size()\n+                    + \" classes\");\n         } catch (ClassNotFoundException e) {\n+            Log.d(EventBus.TAG, \"No subscriber index available, reverting to dynamic look-up (slower)\");\n             // Fine\n         } catch (Exception e) {\n-            Log.w(\"Could not init @Subscribe index, reverting to dynamic look-up (slower)\", e);\n+            Log.w(EventBus.TAG, \"Could not init subscriber index, reverting to dynamic look-up (slower)\", e);\n         }\n         METHOD_INDEX = index;\n     }\n@@ -82,7 +91,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n         if (subscriberMethods != null) {\n             return subscriberMethods;\n         }\n-        if(METHOD_INDEX != null) {\n+        if (METHOD_INDEX != null) {\n             subscriberMethods = findSubscriberMethodsWithIndex(subscriberClass);\n         } else {\n             subscriberMethods = findSubscriberMethodsWithReflection(subscriberClass);\n@@ -108,7 +117,9 @@ private List<SubscriberMethod> findSubscriberMethodsWithIndex(Class<?> subscribe\n                 break;\n             }\n             List<SubscriberMethod> flatList = METHOD_INDEX.get(name);\n-            subscriberMethods.addAll(flatList);\n+            if(flatList != null) {\n+                subscriberMethods.addAll(flatList);\n+            }\n \n             clazz = clazz.getSuperclass();\n         }",
      "parent_sha": "83e193c78b18720ba150ef9cdc12d4d2a475c522"
    }
  },
  {
    "oid": "80e38942e439bd872e5f5bd920d03a187fc8b752",
    "message": "register ErrorDialogManager in onCreate to avoid loosing failure events",
    "date": "2013-01-03T17:40:27Z",
    "url": "https://github.com/greenrobot/EventBus/commit/80e38942e439bd872e5f5bd920d03a187fc8b752",
    "details": {
      "sha": "cf8348025961a4fc30ba25820707577c76dc7081",
      "filename": "EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java",
      "status": "modified",
      "additions": 215,
      "deletions": 199,
      "changes": 414,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/80e38942e439bd872e5f5bd920d03a187fc8b752/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogManager.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/80e38942e439bd872e5f5bd920d03a187fc8b752/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogManager.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogManager.java?ref=80e38942e439bd872e5f5bd920d03a187fc8b752",
      "patch": "@@ -1,199 +1,215 @@\n-package de.greenrobot.event.util;\r\n-\r\n-import android.annotation.TargetApi;\r\n-import android.app.Activity;\r\n-import android.app.Application;\r\n-import android.os.Build;\r\n-import android.os.Bundle;\r\n-import android.support.v4.app.DialogFragment;\r\n-import android.support.v4.app.Fragment;\r\n-import android.support.v4.app.FragmentActivity;\r\n-import android.support.v4.app.FragmentManager;\r\n-import android.util.Log;\r\n-import de.greenrobot.event.EventBus;\r\n-\r\n-/**\r\n- * Central class for app that want to use event based error dialogs.<br/>\r\n- * <br/>\r\n- * How to use:\r\n- * <ol>\r\n- * <li>Set the {@link #factory} to configure dialogs for your app, typically in {@link Application#onCreate()}</li>\r\n- * <li>Use one of {@link #attachTo(Activity)}, {@link #attachTo(Activity, boolean)} or\r\n- * {@link #attachTo(Activity, boolean, Bundle)} in your Activity, typically in onCreate.</li>\r\n- * </ol>\r\n- * \r\n- * For more complex mappings, you can supply your own {@link ErrorDialogFragmentFactory}.\r\n- * \r\n- * @author Markus\r\n- */\r\n-public class ErrorDialogManager {\r\n-\r\n-    public static class SupportManagerFragment extends Fragment {\r\n-        protected boolean finishAfterDialog;\r\n-        protected Bundle argumentsForErrorDialog;\r\n-        private EventBus eventBus;\r\n-\r\n-        @Override\r\n-        public void onResume() {\r\n-            super.onResume();\r\n-            eventBus = ErrorDialogManager.factory.config.getEventBus();\r\n-            eventBus.register(this);\r\n-        }\r\n-\r\n-        @Override\r\n-        public void onPause() {\r\n-            eventBus.unregister(this);\r\n-            super.onPause();\r\n-        }\r\n-\r\n-        public void onEventMainThread(ThrowableFailureEvent event) {\r\n-            checkLogException(event);\r\n-            // Execute pending commits before finding to avoid multiple error fragments being shown\r\n-            FragmentManager fm = getFragmentManager();\r\n-            fm.executePendingTransactions();\r\n-\r\n-            DialogFragment existingFragment = (DialogFragment) fm.findFragmentByTag(TAG_ERROR_DIALOG);\r\n-            if (existingFragment != null) {\r\n-                // Just show the latest error\r\n-                existingFragment.dismiss();\r\n-            }\r\n-\r\n-            android.support.v4.app.DialogFragment errorFragment = (android.support.v4.app.DialogFragment) factory\r\n-                    .prepareErrorFragment(event, finishAfterDialog, argumentsForErrorDialog);\r\n-            if (errorFragment != null) {\r\n-                errorFragment.show(fm, TAG_ERROR_DIALOG);\r\n-            }\r\n-        }\r\n-\r\n-        public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {\r\n-            FragmentManager fm = ((FragmentActivity) activity).getSupportFragmentManager();\r\n-            SupportManagerFragment fragment = (SupportManagerFragment) fm.findFragmentByTag(TAG_ERROR_DIALOG_MANAGER);\r\n-            if (fragment == null) {\r\n-                fragment = new SupportManagerFragment();\r\n-                fm.beginTransaction().add(fragment, TAG_ERROR_DIALOG_MANAGER).commit();\r\n-            }\r\n-            fragment.finishAfterDialog = finishAfterDialog;\r\n-            fragment.argumentsForErrorDialog = argumentsForErrorDialog;\r\n-        }\r\n-    }\r\n-\r\n-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\r\n-    public static class HoneycombManagerFragment extends android.app.Fragment {\r\n-        protected boolean finishAfterDialog;\r\n-        protected Bundle argumentsForErrorDialog;\r\n-        private EventBus eventBus;\r\n-\r\n-        @Override\r\n-        public void onResume() {\r\n-            super.onResume();\r\n-            eventBus = ErrorDialogManager.factory.config.getEventBus();\r\n-            eventBus.register(this);\r\n-        }\r\n-\r\n-        @Override\r\n-        public void onPause() {\r\n-            eventBus.unregister(this);\r\n-            super.onPause();\r\n-        }\r\n-\r\n-        public void onEventMainThread(ThrowableFailureEvent event) {\r\n-            checkLogException(event);\r\n-\r\n-            // Execute pending commits before finding to avoid multiple error fragments being shown\r\n-            android.app.FragmentManager fm = getFragmentManager();\r\n-            fm.executePendingTransactions();\r\n-\r\n-            android.app.DialogFragment existingFragment = (android.app.DialogFragment) fm\r\n-                    .findFragmentByTag(TAG_ERROR_DIALOG);\r\n-            if (existingFragment != null) {\r\n-                // Just show the latest error\r\n-                existingFragment.dismiss();\r\n-            }\r\n-\r\n-            android.app.DialogFragment errorFragment = (android.app.DialogFragment) factory.prepareErrorFragment(event,\r\n-                    finishAfterDialog, argumentsForErrorDialog);\r\n-            if (errorFragment != null) {\r\n-                errorFragment.show(fm, TAG_ERROR_DIALOG);\r\n-            }\r\n-        }\r\n-\r\n-        public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {\r\n-            android.app.FragmentManager fm = activity.getFragmentManager();\r\n-            HoneycombManagerFragment fragment = (HoneycombManagerFragment) fm\r\n-                    .findFragmentByTag(TAG_ERROR_DIALOG_MANAGER);\r\n-            if (fragment == null) {\r\n-                fragment = new HoneycombManagerFragment();\r\n-                fm.beginTransaction().add(fragment, TAG_ERROR_DIALOG_MANAGER).commit();\r\n-            }\r\n-            fragment.finishAfterDialog = finishAfterDialog;\r\n-            fragment.argumentsForErrorDialog = argumentsForErrorDialog;\r\n-        }\r\n-    }\r\n-\r\n-    /** Must be set by the application. */\r\n-    public static ErrorDialogFragmentFactory<?> factory;\r\n-\r\n-    protected static final String TAG_ERROR_DIALOG = \"de.greenrobot.eventbus.error_dialog\";\r\n-    protected static final String TAG_ERROR_DIALOG_MANAGER = \"de.greenrobot.eventbus.error_dialog_manager\";\r\n-\r\n-    public static final String KEY_TITLE = \"de.greenrobot.eventbus.errordialog.title\";\r\n-    public static final String KEY_MESSAGE = \"de.greenrobot.eventbus.errordialog.message\";\r\n-    public static final String KEY_FINISH_AFTER_DIALOG = \"de.greenrobot.eventbus.errordialog.finish_after_dialog\";\r\n-    public static final String KEY_ICON_ID = \"de.greenrobot.eventbus.errordialog.icon_id\";\r\n-    public static final String KEY_EVENT_TYPE_ON_CLOSE = \"de.greenrobot.eventbus.errordialog.event_type_on_close\";\r\n-\r\n-    public static void attachTo(Activity activity) {\r\n-        attachTo(activity, false, null);\r\n-    }\r\n-\r\n-    public static void attachTo(Activity activity, boolean finishAfterDialog) {\r\n-        attachTo(activity, finishAfterDialog, null);\r\n-    }\r\n-\r\n-    public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {\r\n-        if (factory == null) {\r\n-            throw new RuntimeException(\"You must set the static factory field to configure error dialogs for your app.\");\r\n-        }\r\n-        if (isSupportActivity(activity)) {\r\n-            SupportManagerFragment.attachTo(activity, finishAfterDialog, argumentsForErrorDialog);\r\n-        } else {\r\n-            HoneycombManagerFragment.attachTo(activity, finishAfterDialog, argumentsForErrorDialog);\r\n-        }\r\n-    }\r\n-\r\n-    private static boolean isSupportActivity(Activity activity) {\r\n-        boolean isSupport = false;\r\n-        for (Class<?> c = activity.getClass().getSuperclass();; c = c.getSuperclass()) {\r\n-            if (c == null) {\r\n-                throw new RuntimeException(\"Illegal activity type: \" + activity.getClass());\r\n-            }\r\n-            String name = c.getName();\r\n-            if (name.equals(\"android.support.v4.app.FragmentActivity\")) {\r\n-                isSupport = true;\r\n-                break;\r\n-            } else if (name.startsWith(\"com.actionbarsherlock.app\")\r\n-                    && (name.endsWith(\".SherlockActivity\") || name.endsWith(\".SherlockListActivity\") || name\r\n-                            .endsWith(\".SherlockPreferenceActivity\"))) {\r\n-                throw new RuntimeException(\"Please use SherlockFragmentActivity. Illegal activity: \" + name);\r\n-            } else if (name.equals(\"android.app.Activity\")) {\r\n-                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\r\n-                    throw new RuntimeException(\r\n-                            \"Illegal activity without fragment support. Either use Android 3.0+ or android.support.v4.app.FragmentActivity.\");\r\n-                }\r\n-                break;\r\n-            }\r\n-        }\r\n-        return isSupport;\r\n-    }\r\n-    \r\n-    protected static void checkLogException(ThrowableFailureEvent event) {\r\n-        if (factory.config.logExceptions) {\r\n-            String tag = factory.config.tagForLoggingExceptions;\r\n-            if (tag == null) {\r\n-                tag = EventBus.TAG;\r\n-            }\r\n-            Log.i(tag, \"Error dialog manager received exception\", event.throwable);\r\n-        }\r\n-    }\r\n-\r\n-}\r\n+package de.greenrobot.event.util;\n+\n+import android.annotation.TargetApi;\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.support.v4.app.DialogFragment;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.app.FragmentActivity;\n+import android.support.v4.app.FragmentManager;\n+import android.util.Log;\n+import de.greenrobot.event.EventBus;\n+\n+/**\n+ * Central class for app that want to use event based error dialogs.<br/>\n+ * <br/>\n+ * How to use:\n+ * <ol>\n+ * <li>Set the {@link #factory} to configure dialogs for your app, typically in {@link Application#onCreate()}</li>\n+ * <li>Use one of {@link #attachTo(Activity)}, {@link #attachTo(Activity, boolean)} or\n+ * {@link #attachTo(Activity, boolean, Bundle)} in your Activity, typically in onCreate.</li>\n+ * </ol>\n+ * \n+ * For more complex mappings, you can supply your own {@link ErrorDialogFragmentFactory}.\n+ * \n+ * @author Markus\n+ */\n+public class ErrorDialogManager {\n+\n+    public static class SupportManagerFragment extends Fragment {\n+        protected boolean finishAfterDialog;\n+        protected Bundle argumentsForErrorDialog;\n+        private EventBus eventBus;\n+        private boolean skipRegisterOnNextResume;\n+\n+        @Override\n+        public void onCreate(Bundle savedInstanceState) {\n+            super.onCreate(savedInstanceState);\n+            eventBus = ErrorDialogManager.factory.config.getEventBus();\n+            eventBus.register(this);\n+            skipRegisterOnNextResume = true;\n+        }\n+\n+        @Override\n+        public void onResume() {\n+            super.onResume();\n+            if (skipRegisterOnNextResume) {\n+                // registered in onCreate, skip registration in this run\n+                skipRegisterOnNextResume = false;\n+            } else {\n+                eventBus = ErrorDialogManager.factory.config.getEventBus();\n+                eventBus.register(this);\n+            }\n+        }\n+\n+        @Override\n+        public void onPause() {\n+            eventBus.unregister(this);\n+            super.onPause();\n+        }\n+\n+        public void onEventMainThread(ThrowableFailureEvent event) {\n+            checkLogException(event);\n+            // Execute pending commits before finding to avoid multiple error fragments being shown\n+            FragmentManager fm = getFragmentManager();\n+            fm.executePendingTransactions();\n+\n+            DialogFragment existingFragment = (DialogFragment) fm.findFragmentByTag(TAG_ERROR_DIALOG);\n+            if (existingFragment != null) {\n+                // Just show the latest error\n+                existingFragment.dismiss();\n+            }\n+\n+            android.support.v4.app.DialogFragment errorFragment = (android.support.v4.app.DialogFragment) factory\n+                    .prepareErrorFragment(event, finishAfterDialog, argumentsForErrorDialog);\n+            if (errorFragment != null) {\n+                errorFragment.show(fm, TAG_ERROR_DIALOG);\n+            }\n+        }\n+\n+        public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {\n+            FragmentManager fm = ((FragmentActivity) activity).getSupportFragmentManager();\n+            SupportManagerFragment fragment = (SupportManagerFragment) fm.findFragmentByTag(TAG_ERROR_DIALOG_MANAGER);\n+            if (fragment == null) {\n+                fragment = new SupportManagerFragment();\n+                fm.beginTransaction().add(fragment, TAG_ERROR_DIALOG_MANAGER).commit();\n+                fm.executePendingTransactions();\n+            }\n+            fragment.finishAfterDialog = finishAfterDialog;\n+            fragment.argumentsForErrorDialog = argumentsForErrorDialog;\n+        }\n+    }\n+\n+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n+    public static class HoneycombManagerFragment extends android.app.Fragment {\n+        protected boolean finishAfterDialog;\n+        protected Bundle argumentsForErrorDialog;\n+        private EventBus eventBus;\n+\n+        @Override\n+        public void onResume() {\n+            super.onResume();\n+            eventBus = ErrorDialogManager.factory.config.getEventBus();\n+            eventBus.register(this);\n+        }\n+\n+        @Override\n+        public void onPause() {\n+            eventBus.unregister(this);\n+            super.onPause();\n+        }\n+\n+        public void onEventMainThread(ThrowableFailureEvent event) {\n+            checkLogException(event);\n+\n+            // Execute pending commits before finding to avoid multiple error fragments being shown\n+            android.app.FragmentManager fm = getFragmentManager();\n+            fm.executePendingTransactions();\n+\n+            android.app.DialogFragment existingFragment = (android.app.DialogFragment) fm\n+                    .findFragmentByTag(TAG_ERROR_DIALOG);\n+            if (existingFragment != null) {\n+                // Just show the latest error\n+                existingFragment.dismiss();\n+            }\n+\n+            android.app.DialogFragment errorFragment = (android.app.DialogFragment) factory.prepareErrorFragment(event,\n+                    finishAfterDialog, argumentsForErrorDialog);\n+            if (errorFragment != null) {\n+                errorFragment.show(fm, TAG_ERROR_DIALOG);\n+            }\n+        }\n+\n+        public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {\n+            android.app.FragmentManager fm = activity.getFragmentManager();\n+            HoneycombManagerFragment fragment = (HoneycombManagerFragment) fm\n+                    .findFragmentByTag(TAG_ERROR_DIALOG_MANAGER);\n+            if (fragment == null) {\n+                fragment = new HoneycombManagerFragment();\n+                fm.beginTransaction().add(fragment, TAG_ERROR_DIALOG_MANAGER).commit();\n+                fm.executePendingTransactions();\n+            }\n+            fragment.finishAfterDialog = finishAfterDialog;\n+            fragment.argumentsForErrorDialog = argumentsForErrorDialog;\n+        }\n+    }\n+\n+    /** Must be set by the application. */\n+    public static ErrorDialogFragmentFactory<?> factory;\n+\n+    protected static final String TAG_ERROR_DIALOG = \"de.greenrobot.eventbus.error_dialog\";\n+    protected static final String TAG_ERROR_DIALOG_MANAGER = \"de.greenrobot.eventbus.error_dialog_manager\";\n+\n+    public static final String KEY_TITLE = \"de.greenrobot.eventbus.errordialog.title\";\n+    public static final String KEY_MESSAGE = \"de.greenrobot.eventbus.errordialog.message\";\n+    public static final String KEY_FINISH_AFTER_DIALOG = \"de.greenrobot.eventbus.errordialog.finish_after_dialog\";\n+    public static final String KEY_ICON_ID = \"de.greenrobot.eventbus.errordialog.icon_id\";\n+    public static final String KEY_EVENT_TYPE_ON_CLOSE = \"de.greenrobot.eventbus.errordialog.event_type_on_close\";\n+\n+    public static void attachTo(Activity activity) {\n+        attachTo(activity, false, null);\n+    }\n+\n+    public static void attachTo(Activity activity, boolean finishAfterDialog) {\n+        attachTo(activity, finishAfterDialog, null);\n+    }\n+\n+    public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {\n+        if (factory == null) {\n+            throw new RuntimeException(\"You must set the static factory field to configure error dialogs for your app.\");\n+        }\n+        if (isSupportActivity(activity)) {\n+            SupportManagerFragment.attachTo(activity, finishAfterDialog, argumentsForErrorDialog);\n+        } else {\n+            HoneycombManagerFragment.attachTo(activity, finishAfterDialog, argumentsForErrorDialog);\n+        }\n+    }\n+\n+    private static boolean isSupportActivity(Activity activity) {\n+        boolean isSupport = false;\n+        for (Class<?> c = activity.getClass().getSuperclass();; c = c.getSuperclass()) {\n+            if (c == null) {\n+                throw new RuntimeException(\"Illegal activity type: \" + activity.getClass());\n+            }\n+            String name = c.getName();\n+            if (name.equals(\"android.support.v4.app.FragmentActivity\")) {\n+                isSupport = true;\n+                break;\n+            } else if (name.startsWith(\"com.actionbarsherlock.app\")\n+                    && (name.endsWith(\".SherlockActivity\") || name.endsWith(\".SherlockListActivity\") || name\n+                            .endsWith(\".SherlockPreferenceActivity\"))) {\n+                throw new RuntimeException(\"Please use SherlockFragmentActivity. Illegal activity: \" + name);\n+            } else if (name.equals(\"android.app.Activity\")) {\n+                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\n+                    throw new RuntimeException(\n+                            \"Illegal activity without fragment support. Either use Android 3.0+ or android.support.v4.app.FragmentActivity.\");\n+                }\n+                break;\n+            }\n+        }\n+        return isSupport;\n+    }\n+\n+    protected static void checkLogException(ThrowableFailureEvent event) {\n+        if (factory.config.logExceptions) {\n+            String tag = factory.config.tagForLoggingExceptions;\n+            if (tag == null) {\n+                tag = EventBus.TAG;\n+            }\n+            Log.i(tag, \"Error dialog manager received exception\", event.throwable);\n+        }\n+    }\n+\n+}",
      "parent_sha": "ca0ef2312785a26cdcd5a38f22d9e9f8305293c8"
    }
  },
  {
    "oid": "637b27a89f754d1888c9a9c75f54319cf71eb064",
    "message": "prevent the compiler from introducing a new StringBuilder",
    "date": "2015-12-04T12:19:37Z",
    "url": "https://github.com/greenrobot/EventBus/commit/637b27a89f754d1888c9a9c75f54319cf71eb064",
    "details": {
      "sha": "99a5364fbd10bf3d90a6208d7c09a03f368a2387",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/637b27a89f754d1888c9a9c75f54319cf71eb064/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/637b27a89f754d1888c9a9c75f54319cf71eb064/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=637b27a89f754d1888c9a9c75f54319cf71eb064",
      "patch": "@@ -140,7 +140,7 @@ private SubscriberInfo getSubscriberInfo(FindState findState) {\n         return info;\n     }\n \n-    // A simple replace(char, char) is surprisingly slow\n+    // A simple replace(char, char) is surprisingly slow, so we try to avoid it\n     private String getInfoClassName(FindState findState) {\n         String className = findState.clazz.getName();\n         for (int i = className.length() - 1; i >= 0; i--) {\n@@ -152,8 +152,7 @@ private String getInfoClassName(FindState findState) {\n                 break;\n             }\n         }\n-        return className + \"_EventBusInfo\";\n-//        return className.replace('$', '_')+ \"_EventBusInfo\";\n+        return className.concat(\"_EventBusInfo\");\n     }\n \n     private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {\n@@ -219,12 +218,13 @@ static class FindState {\n \n         Class<?> subscriberClass;\n         Class<?> clazz;\n-        String clazzName;\n         boolean skipSuperClasses;\n         SubscriberInfo subscriberInfo;\n \n         void initForSubscriber(Class<?> subscriberClass) {\n             this.subscriberClass = clazz = subscriberClass;\n+            skipSuperClasses = false;\n+            subscriberInfo = null;\n         }\n \n         void recycle() {\n@@ -278,14 +278,12 @@ private boolean checkAddWithMethodSignature(Method method, Class<?> eventType) {\n         void moveToSuperclass() {\n             if (skipSuperClasses) {\n                 clazz = null;\n-                clazzName = null;\n             } else {\n                 clazz = clazz.getSuperclass();\n-                clazzName = clazz.getName();\n+                String clazzName = clazz.getName();\n                 /** Skip system classes, this just degrades performance. */\n                 if (clazzName.startsWith(\"java.\") || clazzName.startsWith(\"javax.\") || clazzName.startsWith(\"android.\")) {\n                     clazz = null;\n-                    clazzName = null;\n                 }\n             }\n         }",
      "parent_sha": "c7b43c7d78bc1d41f83a16662df5dd3ef94ba020"
    }
  },
  {
    "oid": "a8c80c0cc5ca75b4356f1d85644581e470241cec",
    "message": "minor code clean up",
    "date": "2012-07-15T20:56:18Z",
    "url": "https://github.com/greenrobot/EventBus/commit/a8c80c0cc5ca75b4356f1d85644581e470241cec",
    "details": {
      "sha": "c1cb6e99d6b30ca323d93794d0f2a0e65a773102",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/a8c80c0cc5ca75b4356f1d85644581e470241cec/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/a8c80c0cc5ca75b4356f1d85644581e470241cec/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=a8c80c0cc5ca75b4356f1d85644581e470241cec",
      "patch": "@@ -258,9 +258,7 @@ private void postSingleEvent(Object event) throws Error {\n                 subscriptions = subscriptionsByEventType.get(clazz);\r\n             }\r\n             if (subscriptions != null) {\r\n-                Iterator<Subscription> iterator = subscriptions.iterator();\r\n-                while (iterator.hasNext()) {\r\n-                    Subscription subscription = iterator.next();\r\n+                for (Subscription subscription : subscriptions) {\r\n                     postToSubscribtion(subscription, event);\r\n                 }\r\n                 subscriptionFound = true;\r\n@@ -314,7 +312,7 @@ private void postToSubscribtion(Subscription subscription, Object event) throws\n         }\r\n     }\r\n \r\n-    static class Subscription {\r\n+    final static class Subscription {\r\n         final Object subscriber;\r\n         final Method method;\r\n \r\n@@ -342,7 +340,7 @@ public int hashCode() {\n     }\r\n \r\n     /** For ThreadLocal, much faster to set than storing a new Boolean. */\r\n-    static class BooleanWrapper {\r\n+    final static class BooleanWrapper {\r\n         boolean value;\r\n     }\r\n \r",
      "parent_sha": "18ef5ac6b0452b1e3623aae1443f0c4c5e5e6d8b"
    }
  },
  {
    "oid": "fe6dbc7b4948358f0c50dfea4c271ed74c705808",
    "message": "merge thread locals into new PostingThreadState class",
    "date": "2013-11-17T10:09:15Z",
    "url": "https://github.com/greenrobot/EventBus/commit/fe6dbc7b4948358f0c50dfea4c271ed74c705808",
    "details": {
      "sha": "95c17c160c05b4c686ebfa2994ac71061708d97e",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 12,
      "deletions": 18,
      "changes": 30,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/fe6dbc7b4948358f0c50dfea4c271ed74c705808/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/fe6dbc7b4948358f0c50dfea4c271ed74c705808/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=fe6dbc7b4948358f0c50dfea4c271ed74c705808",
      "patch": "@@ -51,17 +51,10 @@ public class EventBus {\n     private final Map<Object, List<Class<?>>> typesBySubscriber;\n     private final Map<Class<?>, Object> stickyEvents;\n \n-    private final ThreadLocal<List<Object>> currentThreadEventQueue = new ThreadLocal<List<Object>>() {\n+    private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {\n         @Override\n-        protected List<Object> initialValue() {\n-            return new ArrayList<Object>();\n-        }\n-    };\n-\n-    private final ThreadLocal<BooleanWrapper> currentThreadIsPosting = new ThreadLocal<BooleanWrapper>() {\n-        @Override\n-        protected BooleanWrapper initialValue() {\n-            return new BooleanWrapper();\n+        protected PostingThreadState initialValue() {\n+            return new PostingThreadState();\n         }\n     };\n \n@@ -339,21 +332,21 @@ public synchronized void unregister(Object subscriber) {\n \n     /** Posts the given event to the event bus. */\n     public void post(Object event) {\n-        List<Object> eventQueue = currentThreadEventQueue.get();\n+        PostingThreadState postingState = currentPostingThreadState.get();\n+        List<Object> eventQueue = postingState.eventQueue;\n         eventQueue.add(event);\n \n-        BooleanWrapper isPosting = currentThreadIsPosting.get();\n-        if (isPosting.value) {\n+        if (postingState.isPosting) {\n             return;\n         } else {\n             boolean isMainThread = Looper.getMainLooper() == Looper.myLooper();\n-            isPosting.value = true;\n+            postingState.isPosting = true;\n             try {\n                 while (!eventQueue.isEmpty()) {\n                     postSingleEvent(eventQueue.remove(0), isMainThread);\n                 }\n             } finally {\n-                isPosting.value = false;\n+                postingState.isPosting = false;\n             }\n         }\n     }\n@@ -542,9 +535,10 @@ void invokeSubscriber(Subscription subscription, Object event) throws Error {\n         }\n     }\n \n-    /** For ThreadLocal, much faster to set than storing a new Boolean. */\n-    final static class BooleanWrapper {\n-        boolean value;\n+    /** For ThreadLocal, much faster to set (and get multiple values). */\n+    final static class PostingThreadState {\n+        List<Object> eventQueue = new ArrayList<Object>();\n+        boolean isPosting;\n     }\n \n     // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course...",
      "parent_sha": "85f50c178ec11ec74253e40fc8e06a0a95272a20"
    }
  },
  {
    "oid": "bb5b149b556a6f295c3bad597a66edf83c2e73eb",
    "message": "Provide additional info if Class.getMethods() fails",
    "date": "2020-02-04T14:23:39Z",
    "url": "https://github.com/greenrobot/EventBus/commit/bb5b149b556a6f295c3bad597a66edf83c2e73eb",
    "details": {
      "sha": "37e001ffc11a103dc969f7a3735b25be6f0a2047",
      "filename": "EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/bb5b149b556a6f295c3bad597a66edf83c2e73eb/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/bb5b149b556a6f295c3bad597a66edf83c2e73eb/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java?ref=bb5b149b556a6f295c3bad597a66edf83c2e73eb",
      "patch": "@@ -15,6 +15,7 @@\n  */\n package org.greenrobot.eventbus;\n \n+import android.annotation.TargetApi;\n import org.greenrobot.eventbus.meta.SubscriberInfo;\n import org.greenrobot.eventbus.meta.SubscriberInfoIndex;\n \n@@ -25,6 +26,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n \n class SubscriberMethodFinder {\n     /*\n@@ -154,7 +156,14 @@ private void findUsingReflectionInSingleClass(FindState findState) {\n             methods = findState.clazz.getDeclaredMethods();\n         } catch (Throwable th) {\n             // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149\n-            methods = findState.clazz.getMethods();\n+            try {\n+                methods = findState.clazz.getMethods();\n+            } catch (LinkageError error) { // super class of NoClassDefFoundError to be a bit more broad...\n+                String msg = \"Could not inspect methods of \" + findState.clazz.getName() +\n+                        \". Please consider using EventBus annotation processor to avoid reflection.\";\n+                throwLinkageError(error, msg);\n+                return;\n+            }\n             findState.skipSuperClasses = true;\n         }\n         for (Method method : methods) {\n@@ -184,6 +193,16 @@ private void findUsingReflectionInSingleClass(FindState findState) {\n         }\n     }\n \n+    @TargetApi(19)\n+    private void throwLinkageError(LinkageError error, String msg) {\n+        try {\n+            error = new LinkageError(msg, error);  // Wrapping only works with Java 7 / Android API 19\n+        } catch (Throwable ex) {\n+            Logger.Default.get().log(Level.SEVERE, msg); // Can not wrap, log additional info\n+        }\n+        throw error;\n+    }\n+\n     static void clearCaches() {\n         METHOD_CACHE.clear();\n     }",
      "parent_sha": "62abc54dec3bf3e1f8d2badc4752f61ff05e8eb3"
    }
  },
  {
    "oid": "db043167c46b4fd07e5e0013d6bc68f218534c55",
    "message": "EventBusAnnotationProcessor:  uses upper bound type for generic event classes (#249), added verbose option",
    "date": "2016-02-10T17:37:45Z",
    "url": "https://github.com/greenrobot/EventBus/commit/db043167c46b4fd07e5e0013d6bc68f218534c55",
    "details": {
      "sha": "c37c18a5066248e78e9cf568b8638bd1d8af2162",
      "filename": "EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 35,
      "deletions": 11,
      "changes": 46,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/db043167c46b4fd07e5e0013d6bc68f218534c55/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/db043167c46b4fd07e5e0013d6bc68f218534c55/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=db043167c46b4fd07e5e0013d6bc68f218534c55",
      "patch": "@@ -40,22 +40,25 @@\n import javax.lang.model.type.DeclaredType;\n import javax.lang.model.type.TypeKind;\n import javax.lang.model.type.TypeMirror;\n+import javax.lang.model.type.TypeVariable;\n import javax.tools.Diagnostic;\n import javax.tools.JavaFileObject;\n \n import de.greenrobot.common.ListMap;\n \n @SupportedAnnotationTypes(\"org.greenrobot.eventbus.Subscribe\")\n-@SupportedOptions(\"eventBusIndex\")\n+@SupportedOptions(value = {\"eventBusIndex\", \"verbose\"})\n public class EventBusAnnotationProcessor extends AbstractProcessor {\n     public static final String OPTION_EVENT_BUS_INDEX = \"eventBusIndex\";\n+    public static final String OPTION_VERBOSE = \"verbose\";\n \n     /** Found subscriber methods for a class (without superclasses). */\n     private final ListMap<TypeElement, ExecutableElement> methodsByClass = new ListMap<>();\n     private final Set<TypeElement> classesToSkip = new HashSet<>();\n \n     private boolean writerRoundDone;\n     private int round;\n+    private boolean verbose;\n \n     @Override\n     public SourceVersion getSupportedSourceVersion() {\n@@ -72,12 +75,15 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n                         \" passed to annotation processor\");\n                 return false;\n             }\n+            verbose = Boolean.parseBoolean(processingEnv.getOptions().get(OPTION_VERBOSE));\n             int lastPeriod = index.lastIndexOf('.');\n             String indexPackage = lastPeriod != -1 ? index.substring(0, lastPeriod) : null;\n \n             round++;\n-            messager.printMessage(Diagnostic.Kind.NOTE, \"Processing round \" + round + \", new annotations: \" +\n-                    !annotations.isEmpty() + \", processingOver: \" + env.processingOver());\n+            if (verbose) {\n+                messager.printMessage(Diagnostic.Kind.NOTE, \"Processing round \" + round + \", new annotations: \" +\n+                        !annotations.isEmpty() + \", processingOver: \" + env.processingOver());\n+            }\n             if (env.processingOver()) {\n                 if (!annotations.isEmpty()) {\n                     messager.printMessage(Diagnostic.Kind.ERROR,\n@@ -170,12 +176,12 @@ private void checkForSubscribersToSkip(Messager messager, String myPackage) {\n                 List<ExecutableElement> methods = methodsByClass.get(subscriberClass);\n                 if (methods != null) {\n                     for (ExecutableElement method : methods) {\n-                        VariableElement param = method.getParameters().get(0);\n-                        TypeMirror typeMirror = param.asType();\n                         String skipReason = null;\n+                        VariableElement param = method.getParameters().get(0);\n+                        TypeMirror typeMirror = getParamTypeMirror(param, messager);\n                         if (!(typeMirror instanceof DeclaredType) ||\n                                 !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {\n-                            skipReason = \"event type is not a standard class e.g. generics\";\n+                            skipReason = \"event type cannot be processed\";\n                         }\n                         if (skipReason == null) {\n                             TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();\n@@ -190,7 +196,7 @@ private void checkForSubscribersToSkip(Messager messager, String myPackage) {\n                                 if (!subscriberClass.equals(skipCandidate)) {\n                                     msg += \" (found in super class for \" + skipCandidate + \")\";\n                                 }\n-                                messager.printMessage(Diagnostic.Kind.NOTE, msg, method);\n+                                messager.printMessage(Diagnostic.Kind.NOTE, msg, param);\n                             }\n                             break;\n                         }\n@@ -201,6 +207,22 @@ private void checkForSubscribersToSkip(Messager messager, String myPackage) {\n         }\n     }\n \n+    private TypeMirror getParamTypeMirror(VariableElement param, Messager messager) {\n+        TypeMirror typeMirror = param.asType();\n+        // Check for generic type\n+        if (typeMirror instanceof TypeVariable) {\n+            TypeMirror upperBound = ((TypeVariable) typeMirror).getUpperBound();\n+            if (upperBound instanceof DeclaredType) {\n+                if (messager != null) {\n+                    messager.printMessage(Diagnostic.Kind.NOTE, \"Using upper bound type \" + upperBound +\n+                            \" for generic parameter\", param);\n+                }\n+                typeMirror = upperBound;\n+            }\n+        }\n+        return typeMirror;\n+    }\n+\n     private TypeElement getSuperclass(TypeElement type) {\n         if (type.getSuperclass().getKind() == TypeKind.DECLARED) {\n             TypeElement superclass = (TypeElement) processingEnv.getTypeUtils().asElement(type.getSuperclass());\n@@ -252,7 +274,7 @@ private void writeCreateSubscriberMethods(BufferedWriter writer, List<Executable\n                                               String callPrefix, String myPackage) throws IOException {\n         for (ExecutableElement method : methods) {\n             List<? extends VariableElement> parameters = method.getParameters();\n-            TypeMirror paramType = parameters.get(0).asType();\n+            TypeMirror paramType = getParamTypeMirror(parameters.get(0), null);\n             TypeElement paramElement = (TypeElement) processingEnv.getTypeUtils().asElement(paramType);\n             String methodName = method.getSimpleName().toString();\n             String eventClass = getClassString(paramElement, myPackage) + \".class\";\n@@ -276,9 +298,11 @@ private void writeCreateSubscriberMethods(BufferedWriter writer, List<Executable\n             }\n             writeLine(writer, 3, parts.toArray(new String[parts.size()]));\n \n-            processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, \"Indexed @Subscribe at \" +\n-                    method.getEnclosingElement().getSimpleName() + \".\" + methodName +\n-                    \"(\" + paramElement.getSimpleName() + \")\");\n+            if (verbose) {\n+                processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, \"Indexed @Subscribe at \" +\n+                        method.getEnclosingElement().getSimpleName() + \".\" + methodName +\n+                        \"(\" + paramElement.getSimpleName() + \")\");\n+            }\n \n         }\n     }",
      "parent_sha": "39d2ec5a97fb901e955c63ac6d53d1b440a7a179"
    }
  },
  {
    "oid": "0c89485f73911d57a0d2a6d33c17733e92a8bd02",
    "message": "more checks for EventBusAnnotationProcessor",
    "date": "2015-02-23T14:40:41Z",
    "url": "https://github.com/greenrobot/EventBus/commit/0c89485f73911d57a0d2a6d33c17733e92a8bd02",
    "details": {
      "sha": "19be88b02384eee79b9ef33b2e0fb03e1dec374f",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 36,
      "deletions": 6,
      "changes": 42,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/0c89485f73911d57a0d2a6d33c17733e92a8bd02/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/0c89485f73911d57a0d2a6d33c17733e92a8bd02/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=0c89485f73911d57a0d2a6d33c17733e92a8bd02",
      "patch": "@@ -6,11 +6,15 @@\n import javax.annotation.processing.Messager;\n import javax.annotation.processing.RoundEnvironment;\n import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n import javax.lang.model.element.Element;\n import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.Modifier;\n import javax.lang.model.element.Name;\n import javax.lang.model.element.TypeElement;\n import javax.lang.model.element.VariableElement;\n+import javax.lang.model.type.DeclaredType;\n import javax.tools.Diagnostic;\n import javax.tools.JavaFileObject;\n import java.io.BufferedWriter;\n@@ -19,6 +23,7 @@\n import java.util.Set;\n \n @SupportedAnnotationTypes(\"de.greenrobot.event.Subscribe\")\n+@SupportedSourceVersion(SourceVersion.RELEASE_6)\n public class EventBusAnnotationProcessor extends AbstractProcessor {\n     @Override\n     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment env) {\n@@ -52,17 +57,42 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n \n     private void writeIndexEntry(BufferedWriter writer, Element element, Messager messager) throws IOException {\n         Subscribe subscribe = element.getAnnotation(Subscribe.class);\n-        String subscriberClass = element.getEnclosingElement().asType().toString();\n-        messager.printMessage(Diagnostic.Kind.NOTE, \"Found @Subscribe in \" + subscriberClass);\n+        if (element.getModifiers().contains(Modifier.STATIC)) {\n+            messager.printMessage(Diagnostic.Kind.ERROR, \"Subscriber method must not be static\", element);\n+            return;\n+        }\n+\n+        Set<Modifier> subscriberClassModifiers = element.getEnclosingElement().getModifiers();\n+        if (!subscriberClassModifiers.contains(Modifier.PUBLIC)) {\n+            messager.printMessage(Diagnostic.Kind.ERROR, \"Subscriber class must be public\",\n+                    element.getEnclosingElement());\n+            return;\n+        }\n+\n         List<? extends VariableElement> parameters = ((ExecutableElement) element).getParameters();\n         if (parameters.size() != 1) {\n-            throw new RuntimeException(\"Must have exactly 1 parameter\");\n+            messager.printMessage(Diagnostic.Kind.ERROR, \"Subscriber method must have exactly 1 parameter\", element);\n+            return;\n         }\n-        String eventType = parameters.get(0).asType().toString();\n+\n+        VariableElement param = parameters.get(0);\n+        DeclaredType paramType = (DeclaredType) param.asType();\n+        Set<Modifier> eventClassModifiers = paramType.asElement().getModifiers();\n+        if (!eventClassModifiers.contains(Modifier.PUBLIC)) {\n+            messager.printMessage(Diagnostic.Kind.ERROR, \"Event type must be public: \" + paramType, param);\n+            return;\n+        }\n+\n+        String subscriberClass = element.getEnclosingElement().asType().toString();\n+        Name methodName = element.getSimpleName();\n         writer.append(\"        new SubscriberIndexEntry(\\n\");\n         writer.append(\"            \").append(subscriberClass).append(\".class,\\n\");\n-        writer.append(\"            \\\"\").append(element.getSimpleName()).append(\"\\\",\\n\");\n-        writer.append(\"            \").append(eventType).append(\".class,\\n\");\n+        writer.append(\"            \\\"\").append(methodName).append(\"\\\",\\n\");\n+        writer.append(\"            \").append(paramType.toString()).append(\".class,\\n\");\n         writer.append(\"            ThreadMode.\").append(subscribe.threadMode().name()).append(\"),\\n\");\n+\n+        messager.printMessage(Diagnostic.Kind.NOTE, \"Indexed @Subscribe at \" +\n+                element.getEnclosingElement().getSimpleName() + \".\" + methodName +\n+                \"(\" + paramType.asElement().getSimpleName() + \")\");\n     }\n }",
      "parent_sha": "9bd7391bf8fee11be781d34d1cbce4d861fd4249"
    }
  },
  {
    "oid": "446de02b67416a7fb2ed52e796a303ac567604b2",
    "message": "added TODO to BackgroundExceptionEvent",
    "date": "2012-08-29T12:06:11Z",
    "url": "https://github.com/greenrobot/EventBus/commit/446de02b67416a7fb2ed52e796a303ac567604b2",
    "details": {
      "sha": "266bdfad0a8ff8e9ba9f3697dbc7fdd039a6871f",
      "filename": "EventBus/src/de/greenrobot/event/BackgroundExceptionEvent.java",
      "status": "modified",
      "additions": 22,
      "deletions": 1,
      "changes": 23,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/446de02b67416a7fb2ed52e796a303ac567604b2/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FBackgroundExceptionEvent.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/446de02b67416a7fb2ed52e796a303ac567604b2/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FBackgroundExceptionEvent.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FBackgroundExceptionEvent.java?ref=446de02b67416a7fb2ed52e796a303ac567604b2",
      "patch": "@@ -1,10 +1,31 @@\n+/*\r\n+ * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n package de.greenrobot.event;\r\n \r\n+/**\r\n+ * TODO Implement a consistent exception handling. One part of this could be posting this class as event when the\r\n+ * background thread or async poster step on an exception.\r\n+ * \r\n+ * @author Markus\r\n+ */\r\n public class BackgroundExceptionEvent {\r\n     public final Throwable throwable;\r\n     public final Object causingEvent;\r\n     public final Object causingSubscriber;\r\n-    \r\n+\r\n     public BackgroundExceptionEvent(Throwable throwable, Object causingEvent, Object causingSubscriber) {\r\n         this.throwable = throwable;\r\n         this.causingEvent = causingEvent;\r",
      "parent_sha": "b58d27514e5ddaa213e2b045f874cd5d22af9c90"
    }
  },
  {
    "oid": "a6627316b57096ecf540851792ee5a3b43d309f9",
    "message": "fix for EventBusMainThreadTest.BackgroundPoster",
    "date": "2015-11-25T19:38:21Z",
    "url": "https://github.com/greenrobot/EventBus/commit/a6627316b57096ecf540851792ee5a3b43d309f9",
    "details": {
      "sha": "944dba215bb57912f40693d4f2f3a40d0ea401fb",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusMainThreadTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/a6627316b57096ecf540851792ee5a3b43d309f9/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusMainThreadTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/a6627316b57096ecf540851792ee5a3b43d309f9/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusMainThreadTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusMainThreadTest.java?ref=a6627316b57096ecf540851792ee5a3b43d309f9",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2012-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -116,7 +116,7 @@ void post(Object event) {\n                 eventQ.notifyAll();\n             }\n             synchronized (eventsDone) {\n-                while (eventsDone.remove(event)) {\n+                while (!eventsDone.remove(event)) {\n                     try {\n                         eventsDone.wait();\n                     } catch (InterruptedException e) {",
      "parent_sha": "5caf0c8e059a47e71675df2ed9af5a747530c370"
    }
  },
  {
    "oid": "d3e87d825422d4e3e24ce1ca28e1c4638fa61cd6",
    "message": "fix cutting the package for getClassString",
    "date": "2015-12-04T09:23:07Z",
    "url": "https://github.com/greenrobot/EventBus/commit/d3e87d825422d4e3e24ce1ca28e1c4638fa61cd6",
    "details": {
      "sha": "0b59da7986ef8f9c61bf62009eed2ffc56831467",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 18,
      "deletions": 9,
      "changes": 27,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/d3e87d825422d4e3e24ce1ca28e1c4638fa61cd6/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/d3e87d825422d4e3e24ce1ca28e1c4638fa61cd6/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=d3e87d825422d4e3e24ce1ca28e1c4638fa61cd6",
      "patch": "@@ -32,8 +32,6 @@\n @SupportedAnnotationTypes(\"de.greenrobot.event.Subscribe\")\n public class EventBusAnnotationProcessor extends AbstractProcessor {\n     public static final String CLASS_POSTFIX = \"_EventBusInfo\";\n-    public static final String JAVA_LANG_PREFIX = \"java.lang.\";\n-    public static final int JAVA_LANG_PREFIX_LENGTH = JAVA_LANG_PREFIX.length();\n \n     /** Found subscriber methods for a class (without superclasses). */\n     private final Map<TypeElement, List<ExecutableElement>> methodsByClass =\n@@ -273,18 +271,29 @@ private String getNextValue(String myPackage, TypeElement nextEntry) throws IOEx\n     }\n \n     private String getClassString(TypeElement typeElement, String myPackage) {\n+        PackageElement packageElement = getPackageElement(typeElement);\n+        String packageString = packageElement.getQualifiedName().toString();\n         String className = typeElement.getQualifiedName().toString();\n-        int lastPeriod = className.lastIndexOf('.');\n-        if (!myPackage.isEmpty() && className.startsWith(myPackage) && lastPeriod == myPackage.length()) {\n-            // TODO detect nested types also\n-\n-            className = className.substring(myPackage.length() + 1);\n-        } else if (className.startsWith(JAVA_LANG_PREFIX) && lastPeriod == JAVA_LANG_PREFIX_LENGTH - 1) {\n-            className = className.substring(JAVA_LANG_PREFIX_LENGTH);\n+        if (packageString != null && !packageString.isEmpty()) {\n+            if (packageString.equals(myPackage)) {\n+                className = cutPackage(myPackage, className);\n+            } else if (packageString.equals(\"java.lang\")) {\n+                className = typeElement.getSimpleName().toString();\n+            }\n         }\n         return className;\n     }\n \n+    private String cutPackage(String paket, String className) {\n+        if (className.startsWith(paket + '.')) {\n+            // Don't use TypeElement.getSimpleName, it doesn't work for us with inner classes\n+            return className.substring(paket.length() + 1);\n+        } else {\n+            // Paranoia\n+            throw new IllegalStateException(\"Mismatching \" + paket + \" vs. \" + className);\n+        }\n+    }\n+\n     private PackageElement getPackageElement(TypeElement subscriberClass) {\n         Element candidate = subscriberClass.getEnclosingElement();\n         while (!(candidate instanceof PackageElement)) {",
      "parent_sha": "966fa3ef5149db72f478be37509e489c0bfbf742"
    }
  },
  {
    "oid": "937405cc5843ea95c4685503a4beb58473c67147",
    "message": "added javadocs for abortEventDelivery, improved javadocs for EventBus",
    "date": "2013-11-17T14:11:58Z",
    "url": "https://github.com/greenrobot/EventBus/commit/937405cc5843ea95c4685503a4beb58473c67147",
    "details": {
      "sha": "c0a592f93cfdc07b0df212a620de3527af486311",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/937405cc5843ea95c4685503a4beb58473c67147/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/937405cc5843ea95c4685503a4beb58473c67147/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=937405cc5843ea95c4685503a4beb58473c67147",
      "patch": "@@ -32,8 +32,8 @@\n  * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)} to the\n  * bus, which delivers it to subscribers that have matching handler methods for the event type. To receive events,\n  * subscribers must register themselves to the bus using the {@link #register(Object)} method. Once registered,\n- * subscribers receive events until the call of {@link #unregister(Object)}. By default, subscribers will handle events\n- * in methods named \"onEvent\".\n+ * subscribers receive events until the call of {@link #unregister(Object)}. By convention, event handling methods must\n+ * be named \"onEvent\", be public, return nothing (void), and have exactly one parameter (the event).\n  * \n  * @author Markus Junginger, greenrobot\n  */\n@@ -371,6 +371,12 @@ public void post(Object event) {\n         }\n     }\n \n+    /**\n+     * Called from a subscriber's event handling method, the event delivery will be aborted. Subsequent subscribers\n+     * won't receive the event. Events are usually aborted by higher priority subscribers (see\n+     * {@link #register(Object, int)}). Aborting is restricted to event handling methods running in posting thread\n+     * {@link ThreadMode#PostThread}.\n+     */\n     public void abortEventDelivery(Object event) {\n         PostingThreadState postingState = currentPostingThreadState.get();\n         if (!postingState.isPosting) {",
      "parent_sha": "0b2e1fc6f600334ec517fed0bbe0e82223782455"
    }
  },
  {
    "oid": "d6229b1598d8b989cf4422bf861dbffdfa64fb25",
    "message": "minor typo",
    "date": "2015-12-04T12:20:10Z",
    "url": "https://github.com/greenrobot/EventBus/commit/d6229b1598d8b989cf4422bf861dbffdfa64fb25",
    "details": {
      "sha": "7df0e202a638a3332d4e9912c2d26e1883594337",
      "filename": "EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/d6229b1598d8b989cf4422bf861dbffdfa64fb25/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FAbstractEventBusTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/d6229b1598d8b989cf4422bf861dbffdfa64fb25/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FAbstractEventBusTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FAbstractEventBusTest.java?ref=d6229b1598d8b989cf4422bf861dbffdfa64fb25",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2012-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -32,7 +32,7 @@\n  * @author Markus Junginger, greenrobot\n  */\n public class AbstractEventBusTest extends TestCase {\n-    /** Activates long(er) running tests e.g. testing multi-threading more throughly.  */\n+    /** Activates long(er) running tests e.g. testing multi-threading more thoroughly.  */\n     protected static final boolean LONG_TESTS = false;\n \n     protected EventBus eventBus;",
      "parent_sha": "637b27a89f754d1888c9a9c75f54319cf71eb064"
    }
  },
  {
    "oid": "ad6fc22a564ae533b6f3eef020b5f463d2423bab",
    "message": "renamed EventBusSubscriberLegalTest",
    "date": "2013-11-17T11:14:13Z",
    "url": "https://github.com/greenrobot/EventBus/commit/ad6fc22a564ae533b6f3eef020b5f463d2423bab",
    "details": {
      "sha": "ee435219a84e62708cb12c493a100b3af0f1dd38",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusSubscriberLegalTest.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/ad6fc22a564ae533b6f3eef020b5f463d2423bab/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusSubscriberLegalTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/ad6fc22a564ae533b6f3eef020b5f463d2423bab/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusSubscriberLegalTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusSubscriberLegalTest.java?ref=ad6fc22a564ae533b6f3eef020b5f463d2423bab",
      "patch": "@@ -20,7 +20,7 @@\n /**\n  * @author Markus Junginger, greenrobot\n  */\n-public class EventBusMainSubscriberLegalTest extends AbstractEventBusTest {\n+public class EventBusSubscriberLegalTest extends AbstractEventBusTest {\n \n     public void testSubscriberLegal() {\n         eventBus.register(this);",
      "previous_filename": "EventBusTest/src/de/greenrobot/event/test/EventBusMainSubscriberLegalTest.java",
      "parent_sha": "eb40f5f3777832fffca26d2ccd5e2e42e5a52d37"
    }
  },
  {
    "oid": "60c4b78837b933435f3d22e92690a8812b505ef5",
    "message": "AsyncExecutor: use lambda.",
    "date": "2021-12-08T08:37:29Z",
    "url": "https://github.com/greenrobot/EventBus/commit/60c4b78837b933435f3d22e92690a8812b505ef5",
    "details": {
      "sha": "bd9cb365db9ddf5577984ac7679449764ae24b3f",
      "filename": "EventBus/src/org/greenrobot/eventbus/util/AsyncExecutor.java",
      "status": "modified",
      "additions": 13,
      "deletions": 16,
      "changes": 29,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/60c4b78837b933435f3d22e92690a8812b505ef5/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Futil%2FAsyncExecutor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/60c4b78837b933435f3d22e92690a8812b505ef5/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Futil%2FAsyncExecutor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Futil%2FAsyncExecutor.java?ref=60c4b78837b933435f3d22e92690a8812b505ef5",
      "patch": "@@ -111,24 +111,21 @@ private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEv\n \n     /** Posts an failure event if the given {@link RunnableEx} throws an Exception. */\n     public void execute(final RunnableEx runnable) {\n-        threadPool.execute(new Runnable() {\n-            @Override\n-            public void run() {\n+        threadPool.execute(() -> {\n+            try {\n+                runnable.run();\n+            } catch (Exception e) {\n+                Object event;\n                 try {\n-                    runnable.run();\n-                } catch (Exception e) {\n-                    Object event;\n-                    try {\n-                        event = failureEventConstructor.newInstance(e);\n-                    } catch (Exception e1) {\n-                        eventBus.getLogger().log(Level.SEVERE, \"Original exception:\", e);\n-                        throw new RuntimeException(\"Could not create failure event\", e1);\n-                    }\n-                    if (event instanceof HasExecutionScope) {\n-                        ((HasExecutionScope) event).setExecutionScope(scope);\n-                    }\n-                    eventBus.post(event);\n+                    event = failureEventConstructor.newInstance(e);\n+                } catch (Exception e1) {\n+                    eventBus.getLogger().log(Level.SEVERE, \"Original exception:\", e);\n+                    throw new RuntimeException(\"Could not create failure event\", e1);\n                 }\n+                if (event instanceof HasExecutionScope) {\n+                    ((HasExecutionScope) event).setExecutionScope(scope);\n+                }\n+                eventBus.post(event);\n             }\n         });\n     }",
      "parent_sha": "757bc9a18ff7c63dc54ef30d208e3931e230292d"
    }
  },
  {
    "oid": "34a1537af7364cec9444a24431c566d434d4d0b8",
    "message": "Class.getMethods() failures: provide better info and use EventBusException instead of LinkageError",
    "date": "2020-02-04T16:04:52Z",
    "url": "https://github.com/greenrobot/EventBus/commit/34a1537af7364cec9444a24431c566d434d4d0b8",
    "details": {
      "sha": "3f2812bcc05067d7f9b56f68ed243ad2a5ee7ea4",
      "filename": "EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 16,
      "changes": 23,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/34a1537af7364cec9444a24431c566d434d4d0b8/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/34a1537af7364cec9444a24431c566d434d4d0b8/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java?ref=34a1537af7364cec9444a24431c566d434d4d0b8",
      "patch": "@@ -15,7 +15,6 @@\n  */\n package org.greenrobot.eventbus;\n \n-import android.annotation.TargetApi;\n import org.greenrobot.eventbus.meta.SubscriberInfo;\n import org.greenrobot.eventbus.meta.SubscriberInfoIndex;\n \n@@ -26,7 +25,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.logging.Level;\n \n class SubscriberMethodFinder {\n     /*\n@@ -159,10 +157,13 @@ private void findUsingReflectionInSingleClass(FindState findState) {\n             try {\n                 methods = findState.clazz.getMethods();\n             } catch (LinkageError error) { // super class of NoClassDefFoundError to be a bit more broad...\n-                String msg = \"Could not inspect methods of \" + findState.clazz.getName() +\n-                        \". Please consider using EventBus annotation processor to avoid reflection.\";\n-                throwLinkageError(error, msg);\n-                return;\n+                String msg = \"Could not inspect methods of \" + findState.clazz.getName();\n+                if (ignoreGeneratedIndex) {\n+                    msg += \". Please consider using EventBus annotation processor to avoid reflection.\";\n+                } else {\n+                    msg += \". Please make this class visible to EventBus annotation processor to avoid reflection.\";\n+                }\n+                throw new EventBusException(msg, error);\n             }\n             findState.skipSuperClasses = true;\n         }\n@@ -193,16 +194,6 @@ private void findUsingReflectionInSingleClass(FindState findState) {\n         }\n     }\n \n-    @TargetApi(19)\n-    private void throwLinkageError(LinkageError error, String msg) {\n-        try {\n-            error = new LinkageError(msg, error);  // Wrapping only works with Java 7 / Android API 19\n-        } catch (Throwable ex) {\n-            Logger.Default.get().log(Level.SEVERE, msg); // Can not wrap, log additional info\n-        }\n-        throw error;\n-    }\n-\n     static void clearCaches() {\n         METHOD_CACHE.clear();\n     }",
      "parent_sha": "bb5b149b556a6f295c3bad597a66edf83c2e73eb"
    }
  },
  {
    "oid": "4d21f93a5eea3caf89baaa9180ae60de88035b20",
    "message": "static part in processor was removed.",
    "date": "2015-09-08T06:02:05Z",
    "url": "https://github.com/greenrobot/EventBus/commit/4d21f93a5eea3caf89baaa9180ae60de88035b20",
    "details": {
      "sha": "2072d671864853bacab7a72acdf724c10628acfe",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/4d21f93a5eea3caf89baaa9180ae60de88035b20/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/4d21f93a5eea3caf89baaa9180ae60de88035b20/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=4d21f93a5eea3caf89baaa9180ae60de88035b20",
      "patch": "@@ -209,7 +209,7 @@ private void writeSources() {\n                 writer.write(\"import de.greenrobot.event.ThreadMode;\\n\\n\");\n                 writer.write(\"/** This class is generated by EventBus, do not edit. */\\n\");\n                 writer.write(\"public class \" + infoClassName + \" extends SubscriberInfo {\\n\");\n-                writer.write(\"\\nstatic {new Exception(\\\"\" + infoClassName + \"created\\\").printStackTrace();}\\n\\n\");\n+//                writer.write(\"\\nstatic {new Exception(\\\"\" + infoClassName + \"created\\\").printStackTrace();}\\n\\n\");\n                 writer.write(\"    protected Data createSubscriberData() {\\n\");\n                 writer.write(\"        Class<?> subscriberClass = \" + subscriberClassName + \".class;\\n\");\n                 writer.write(\"        SubscriberMethod[] subscriberMethods = new SubscriberMethod[] {\\n\");",
      "parent_sha": "d3d478b05c4162df22bebc41ab00d6dbd623f557"
    }
  },
  {
    "oid": "e71057dca7cb2fdd670fbe6898f1aed4fe98bc30",
    "message": "Revert \"Don't use equals for subscriber already registered check\"\n\nThis reverts commit a39b054c550ba91a05d2ae57ba3ef94ba4f53e77.",
    "date": "2012-08-30T15:09:17Z",
    "url": "https://github.com/greenrobot/EventBus/commit/e71057dca7cb2fdd670fbe6898f1aed4fe98bc30",
    "details": {
      "sha": "ee8e616a98881e352a65e5875cbf9961a91ccd94",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/e71057dca7cb2fdd670fbe6898f1aed4fe98bc30/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/e71057dca7cb2fdd670fbe6898f1aed4fe98bc30/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=e71057dca7cb2fdd670fbe6898f1aed4fe98bc30",
      "patch": "@@ -190,8 +190,8 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boo\n             subscriptionsByEventType.put(eventType, subscriptions);\r\n         } else {\r\n             for (Subscription subscription : subscriptions) {\r\n-                if (subscription == newSubscription) {\r\n-                    throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\r\n+                if (subscription.equals(newSubscription)) {\r\n+                    throw new RuntimeException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\r\n                             + eventType);\r\n                 }\r\n             }\r\n@@ -427,8 +427,7 @@ void invokeSubscriber(Subscription subscription, Object event) throws Error {\n                     Log.e(TAG, \"Could not dispatch event: \" + event.getClass() + \" to subscribing class \"\r\n                             + subscription.subscriber.getClass(), cause);\r\n                 }\r\n-                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event,\r\n-                        subscription.subscriber);\r\n+                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event, subscription.subscriber);\r\n                 post(exEvent);\r\n             }\r\n         } catch (IllegalAccessException e) {\r",
      "parent_sha": "a39b054c550ba91a05d2ae57ba3ef94ba4f53e77"
    }
  },
  {
    "oid": "d1d0d3665f8aec795869f7c6bd73e0c9eb82bfba",
    "message": "deprecated \"complicated\" register methods",
    "date": "2013-11-16T18:05:34Z",
    "url": "https://github.com/greenrobot/EventBus/commit/d1d0d3665f8aec795869f7c6bd73e0c9eb82bfba",
    "details": {
      "sha": "4bdd1ce0bec7b4222bc4e61f3f95f19baedf7c25",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 15,
      "deletions": 11,
      "changes": 26,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/d1d0d3665f8aec795869f7c6bd73e0c9eb82bfba/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/d1d0d3665f8aec795869f7c6bd73e0c9eb82bfba/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=d1d0d3665f8aec795869f7c6bd73e0c9eb82bfba",
      "patch": "@@ -147,8 +147,9 @@ public void register(Object subscriber) {\n     }\n \n     /**\n-     * Like {@link #register(Object)}, but allows to define a custom method name for event handler methods.\n+     * @deprecated For simplification of the API, this method will be removed in the future.\n      */\n+    @Deprecated\n     public void register(Object subscriber, String methodName) {\n         register(subscriber, methodName, false);\n     }\n@@ -162,8 +163,9 @@ public void registerSticky(Object subscriber) {\n     }\n \n     /**\n-     * Like {@link #registerSticky(Object)}, but allows to define a custom method name for event handler methods.\n+     * @deprecated For simplification of the API, this method will be removed in the future.\n      */\n+    @Deprecated\n     public void registerSticky(Object subscriber, String methodName) {\n         register(subscriber, methodName, true);\n     }\n@@ -177,32 +179,34 @@ private synchronized void register(Object subscriber, String methodName, boolean\n     }\n \n     /**\n-     * Like {@link #register(Object)}, but only registers the subscriber for the given event types.\n+     * @deprecated For simplification of the API, this method will be removed in the future.\n      */\n+    @Deprecated\n     public void register(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {\n         register(subscriber, defaultMethodName, false, eventType, moreEventTypes);\n     }\n \n     /**\n-     * Like {@link #register(Object, String)}, but only registers the subscriber for the given event types.\n+     * @deprecated For simplification of the API, this method will be removed in the future.\n      */\n-    public void register(Object subscriber, String methodName, Class<?> eventType,\n-            Class<?>... moreEventTypes) {\n+    @Deprecated\n+    public void register(Object subscriber, String methodName, Class<?> eventType, Class<?>... moreEventTypes) {\n         register(subscriber, methodName, false, eventType, moreEventTypes);\n     }\n \n     /**\n-     * Like {@link #registerSticky(Object)}, but only registers the subscriber for the given event types.\n+     * @deprecated For simplification of the API, this method will be removed in the future.\n      */\n+    @Deprecated\n     public void registerSticky(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {\n         register(subscriber, defaultMethodName, true, eventType, moreEventTypes);\n     }\n \n     /**\n-     * Like {@link #registerSticky(Object, String)}, but only registers the subscriber for the given event types.\n+     * @deprecated For simplification of the API, this method will be removed in the future.\n      */\n-    public void registerSticky(Object subscriber, String methodName, Class<?> eventType,\n-            Class<?>... moreEventTypes) {\n+    @Deprecated\n+    public void registerSticky(Object subscriber, String methodName, Class<?> eventType, Class<?>... moreEventTypes) {\n         register(subscriber, methodName, true, eventType, moreEventTypes);\n     }\n \n@@ -359,7 +363,7 @@ public <T> T getStickyEvent(Class<T> eventType) {\n     }\n \n     /**\n-     * Remove and gets the recent sticky event for the given type.\n+     * Remove and gets the recent sticky event for the given event type.\n      * \n      * @see #postSticky(Object)\n      */",
      "parent_sha": "9ea6d0b0b15554cef9df39b6b45f818d7dd8be34"
    }
  },
  {
    "oid": "9efffe13f2ffc68fb3deca09b9d2934ba91635f3",
    "message": "fixed getting SubscriberInfo for super class(es)",
    "date": "2015-11-19T18:53:28Z",
    "url": "https://github.com/greenrobot/EventBus/commit/9efffe13f2ffc68fb3deca09b9d2934ba91635f3",
    "details": {
      "sha": "a02c87653878bb0acae43b25c649084ba04d37dc",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/9efffe13f2ffc68fb3deca09b9d2934ba91635f3/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/9efffe13f2ffc68fb3deca09b9d2934ba91635f3/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=9efffe13f2ffc68fb3deca09b9d2934ba91635f3",
      "patch": "@@ -72,7 +72,7 @@ private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n         FindState findState = new FindState();\n         findState.initForSubscriber(subscriberClass);\n         while (findState.clazz != null) {\n-            SubscriberInfo info = getSubscriberInfo(subscriberClass);\n+            SubscriberInfo info = getSubscriberInfo(findState.clazz);\n             if (info != null) {\n                 SubscriberInfo.Data subscriberData = info.getSubscriberData();\n                 SubscriberMethod[] array = subscriberData.subscriberMethods;\n@@ -84,7 +84,7 @@ private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n             } else {\n                 findUsingReflectionInSingleClass(findState);\n             }\n-            findState.nextClass();\n+            findState.moveToSuperclass();\n         }\n         return findState.subscriberMethods;\n     }\n@@ -111,7 +111,7 @@ private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {\n         findState.initForSubscriber(subscriberClass);\n         while (findState.clazz != null) {\n             findUsingReflectionInSingleClass(findState);\n-            findState.nextClass();\n+            findState.moveToSuperclass();\n         }\n         return findState.subscriberMethods;\n     }\n@@ -182,7 +182,7 @@ boolean checkAdd(Method method, Class<?> eventType) {\n             return eventTypesFound.add(methodKey);\n         }\n \n-        void nextClass() {\n+        void moveToSuperclass() {\n             clazz = clazz.getSuperclass();\n             clazzName = clazz.getName();\n             /** Skip system classes, this just degrades performance. */",
      "parent_sha": "d2f950940547a74f0b7eed484ed6c76074606cfd"
    }
  },
  {
    "oid": "a1b9e3e9d50ba018088c70cb9330c83b0a851b5a",
    "message": "removed Java 7 try() from EventBusAnnotationProcessor",
    "date": "2015-02-23T15:54:30Z",
    "url": "https://github.com/greenrobot/EventBus/commit/a1b9e3e9d50ba018088c70cb9330c83b0a851b5a",
    "details": {
      "sha": "63eaf54ba045e7b365a771992b7021a2ea397b71",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/a1b9e3e9d50ba018088c70cb9330c83b0a851b5a/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/a1b9e3e9d50ba018088c70cb9330c83b0a851b5a/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=a1b9e3e9d50ba018088c70cb9330c83b0a851b5a",
      "patch": "@@ -34,7 +34,8 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n         try {\n             String className = \"MyGeneratedEventBusSubscriberIndex\";\n             JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(className);\n-            try (BufferedWriter writer = new BufferedWriter(sourceFile.openWriter())) {\n+            BufferedWriter writer = new BufferedWriter(sourceFile.openWriter());\n+            try {\n                 writer.write(\"import de.greenrobot.event.SubscriberIndexEntry;\\n\");\n                 writer.write(\"import de.greenrobot.event.ThreadMode;\\n\\n\");\n                 writer.write(\"/** This class is generated by EventBus, do not edit. */\\n\");\n@@ -44,18 +45,20 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n                 for (TypeElement annotation : annotations) {\n                     Set<? extends Element> elements = env.getElementsAnnotatedWith(annotation);\n                     for (Element element : elements) {\n-                        writeIndexEntry(writer, element, messager);\n+                        checkAndWriteIndexEntry(writer, element, messager);\n                     }\n                 }\n                 writer.write(\"    };\\n}\\n\");\n+            } finally {\n+                writer.close();\n             }\n         } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return true;\n     }\n \n-    private void writeIndexEntry(BufferedWriter writer, Element element, Messager messager) throws IOException {\n+    private void checkAndWriteIndexEntry(BufferedWriter writer, Element element, Messager messager) throws IOException {\n         Subscribe subscribe = element.getAnnotation(Subscribe.class);\n         if (element.getModifiers().contains(Modifier.STATIC)) {\n             messager.printMessage(Diagnostic.Kind.ERROR, \"Subscriber method must not be static\", element);",
      "parent_sha": "255128d043c85274ec2c0125e46bddd190a902bd"
    }
  },
  {
    "oid": "822866a987aa8e164aa5dea623a54b170a5062ce",
    "message": "lazy, double checked locking singleton",
    "date": "2012-08-29T11:31:09Z",
    "url": "https://github.com/greenrobot/EventBus/commit/822866a987aa8e164aa5dea623a54b170a5062ce",
    "details": {
      "sha": "3c86aa392f55c25c62598d94d87e6adb986c25f9",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/822866a987aa8e164aa5dea623a54b170a5062ce/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/822866a987aa8e164aa5dea623a54b170a5062ce/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=822866a987aa8e164aa5dea623a54b170a5062ce",
      "patch": "@@ -39,7 +39,7 @@ public final class EventBus {\n     /** Log tag, apps may override it. */\r\n     public static String TAG = \"Event\";\r\n \r\n-    private static final EventBus defaultInstance = new EventBus();\r\n+    private static volatile EventBus defaultInstance;\r\n \r\n     private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();\r\n \r\n@@ -69,6 +69,13 @@ protected BooleanWrapper initialValue() {\n     private final SubscriberMethodFinder subscriberMethodFinder;\r\n \r\n     public static EventBus getDefault() {\r\n+        if (defaultInstance == null) {\r\n+            synchronized (EventBus.class) {\r\n+                if (defaultInstance == null) {\r\n+                    defaultInstance = new EventBus();\r\n+                }\r\n+            }\r\n+        }\r\n         return defaultInstance;\r\n     }\r\n \r",
      "parent_sha": "553b8e007a20d8d252a83f4f55ce08f497b5d8a1"
    }
  },
  {
    "oid": "618a4f17f13751539c0879ca79d7f534631fdd99",
    "message": "Fix regression: test fails if poster set-up out of method.\n\nNot sure why, but event is not received if background poster is set up\nusing field. Setting up inside test method works fine. Also works fine\nin EventBusAndroidOrderTest.",
    "date": "2017-09-19T09:07:12Z",
    "url": "https://github.com/greenrobot/EventBus/commit/618a4f17f13751539c0879ca79d7f534631fdd99",
    "details": {
      "sha": "34c29ee6ee85092601e442a5e640bb96594ab6d0",
      "filename": "EventBusTest/src/org/greenrobot/eventbus/EventBusMainThreadTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 16,
      "changes": 22,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/618a4f17f13751539c0879ca79d7f534631fdd99/EventBusTest%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBusMainThreadTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/618a4f17f13751539c0879ca79d7f534631fdd99/EventBusTest%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBusMainThreadTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBusMainThreadTest.java?ref=618a4f17f13751539c0879ca79d7f534631fdd99",
      "patch": "@@ -17,8 +17,6 @@\n \n import android.os.Looper;\n \n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.Test;\n \n \n@@ -29,20 +27,6 @@\n  */\n public class EventBusMainThreadTest extends AbstractAndroidEventBusTest {\n \n-    private TestBackgroundPoster backgroundPoster;\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        backgroundPoster = new TestBackgroundPoster(eventBus);\n-        backgroundPoster.start();\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-        backgroundPoster.shutdown();\n-        backgroundPoster.join();\n-    }\n-\n     @Test\n     public void testPost() throws InterruptedException {\n         eventBus.register(this);\n@@ -55,11 +39,17 @@ public void testPost() throws InterruptedException {\n \n     @Test\n     public void testPostInBackgroundThread() throws InterruptedException {\n+        TestBackgroundPoster backgroundPoster = new TestBackgroundPoster(eventBus);\n+        backgroundPoster.start();\n+\n         eventBus.register(this);\n         backgroundPoster.post(\"Hello\");\n         waitForEventCount(1, 1000);\n         assertEquals(\"Hello\", lastEvent);\n         assertEquals(Looper.getMainLooper().getThread(), lastThread);\n+\n+        backgroundPoster.shutdown();\n+        backgroundPoster.join();\n     }\n \n     @Subscribe(threadMode = ThreadMode.MAIN)",
      "parent_sha": "dfc6198136a5de39e8f59744a45e8353812ef13c"
    }
  },
  {
    "oid": "eb40f5f3777832fffca26d2ccd5e2e42e5a52d37",
    "message": "first shot at abortEventDelivery",
    "date": "2013-11-17T11:12:52Z",
    "url": "https://github.com/greenrobot/EventBus/commit/eb40f5f3777832fffca26d2ccd5e2e42e5a52d37",
    "details": {
      "sha": "4d187a23be26b14fe4264d93b9387b785b677c9a",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 38,
      "deletions": 1,
      "changes": 39,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/eb40f5f3777832fffca26d2ccd5e2e42e5a52d37/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/eb40f5f3777832fffca26d2ccd5e2e42e5a52d37/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=eb40f5f3777832fffca26d2ccd5e2e42e5a52d37",
      "patch": "@@ -269,6 +269,8 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boo\n                 stickyEvent = stickyEvents.get(eventType);\n             }\n             if (stickyEvent != null) {\n+                // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)\n+                // --> Strange corner case, which we don't take care of here.\n                 postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());\n             }\n         }\n@@ -341,6 +343,9 @@ public void post(Object event) {\n         } else {\n             postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();\n             postingState.isPosting = true;\n+            if (postingState.aborted) {\n+                throw new EventBusException(\"Internal error. Abort state was not reset\");\n+            }\n             try {\n                 while (!eventQueue.isEmpty()) {\n                     postSingleEvent(eventQueue.remove(0), postingState);\n@@ -352,6 +357,22 @@ public void post(Object event) {\n         }\n     }\n \n+    public void abortEventDelivery(Object event) {\n+        PostingThreadState postingState = currentPostingThreadState.get();\n+        if (!postingState.isPosting) {\n+            throw new EventBusException(\n+                    \"This method may only be called from inside event handling methods on the posting thread\");\n+        } else if (event == null) {\n+            throw new EventBusException(\"Event may not be null\");\n+        } else if (postingState.event != event) {\n+            throw new EventBusException(\"Only the currently handled event may be aborted\");\n+        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.PostThread) {\n+            throw new EventBusException(\" event handlers may only abort the incoming event\");\n+        }\n+\n+        postingState.aborted = true;\n+    }\n+\n     /**\n      * Posts the given event to the event bus and holds on to the event (because it is sticky). The most recent sticky\n      * event of an event's type is kept in memory for future access. This can be {@link #registerSticky(Object)} or\n@@ -427,7 +448,20 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro\n             }\n             if (subscriptions != null && !subscriptions.isEmpty()) {\n                 for (Subscription subscription : subscriptions) {\n-                    postToSubscription(subscription, event, postingState.isMainThread);\n+                    postingState.event = event;\n+                    postingState.subscription = subscription;\n+                    boolean aborted = false;\n+                    try {\n+                        postToSubscription(subscription, event, postingState.isMainThread);\n+                        aborted = postingState.aborted;\n+                    } finally {\n+                        postingState.event = null;\n+                        postingState.subscription = null;\n+                        postingState.aborted = false;\n+                    }\n+                    if (aborted) {\n+                        break;\n+                    }\n                 }\n                 subscriptionFound = true;\n             }\n@@ -541,6 +575,9 @@ final static class PostingThreadState {\n         List<Object> eventQueue = new ArrayList<Object>();\n         boolean isPosting;\n         boolean isMainThread;\n+        Subscription subscription;\n+        Object event;\n+        public boolean aborted;\n     }\n \n     // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course...",
      "parent_sha": "222f0d5b27b0d8ed760fa12e379e65d610a19dbd"
    }
  },
  {
    "oid": "e9bc508737685db41e5469a62567fded7b6e82c1",
    "message": "fix code gen for ignored classes",
    "date": "2015-06-15T16:27:49Z",
    "url": "https://github.com/greenrobot/EventBus/commit/e9bc508737685db41e5469a62567fded7b6e82c1",
    "details": {
      "sha": "65630d92a84626f70eb873e5d2df51b004d12f24",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/e9bc508737685db41e5469a62567fded7b6e82c1/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/e9bc508737685db41e5469a62567fded7b6e82c1/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=e9bc508737685db41e5469a62567fded7b6e82c1",
      "patch": "@@ -219,18 +219,20 @@ private void writeSources() {\n                 }\n                 writer.write(\"            };\\n\");\n             }\n-            if (!methodsByClass.isEmpty()) {\n+            if (!first) {\n                 writer.write(\"        }\\n\");\n             }\n             writer.write(\"        return null;\\n\");\n             writer.write(\"    };\\n}\\n\");\n         } catch (IOException e) {\n             throw new RuntimeException(\"Could not write source for \" + className, e);\n         } finally {\n-            try {\n-                writer.close();\n-            } catch (IOException e) {\n-                //Silent\n+            if (writer != null) {\n+                try {\n+                    writer.close();\n+                } catch (IOException e) {\n+                    //Silent\n+                }\n             }\n         }\n     }",
      "parent_sha": "1b556731c410b49639d668ff2c76dcb1ddcbaffb"
    }
  },
  {
    "oid": "5b3a8c47eb2f75a8b563ad7abe1aef1d7a349347",
    "message": "simplified Logger to use java.util.logging.Level",
    "date": "2017-09-16T10:54:43Z",
    "url": "https://github.com/greenrobot/EventBus/commit/5b3a8c47eb2f75a8b563ad7abe1aef1d7a349347",
    "details": {
      "sha": "b2af3d402f0a3f2317c5a7a27357bd7de6beb90d",
      "filename": "EventBus/src/de/greenrobot/event/Logger.java",
      "status": "modified",
      "additions": 50,
      "deletions": 163,
      "changes": 213,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/5b3a8c47eb2f75a8b563ad7abe1aef1d7a349347/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/5b3a8c47eb2f75a8b563ad7abe1aef1d7a349347/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java?ref=5b3a8c47eb2f75a8b563ad7abe1aef1d7a349347",
      "patch": "@@ -1,7 +1,5 @@\n package de.greenrobot.event;\n \n-import android.annotation.TargetApi;\n-import android.os.Build;\n import android.util.Log;\n \n import java.util.logging.Level;\n@@ -45,195 +43,84 @@ public static Logger create(String tag) {\n         }\n     }\n \n+    public abstract boolean isLoggable(Level level);\n \n-    public abstract boolean isLoggable(int level);\n+    public abstract void log(Level level, String msg);\n \n-    public abstract void v(String msg);\n-\n-    public abstract void v(String msg, Throwable th);\n-\n-    public abstract void d(String msg);\n-\n-    public abstract void d(String msg, Throwable th);\n-\n-    public abstract void i(String msg);\n-\n-    public abstract void i(String msg, Throwable th);\n-\n-    public abstract void w(String msg);\n-\n-    public abstract void w(String msg, Throwable th);\n-\n-    public abstract void w(Throwable th);\n-\n-    public abstract void e(String msg);\n-\n-    public abstract void e(String msg, Throwable th);\n-\n-    public abstract void wtf(String msg);\n-\n-    public abstract void wtf(String msg, Throwable th);\n+    public abstract void log(Level level, String msg, Throwable th);\n \n     public static class AndroidLogger extends Logger {\n-        public static final int VERBOSE = 2;\n-        public static final int DEBUG = 3;\n-        public static final int INFO = 4;\n-        public static final int WARN = 5;\n-        public static final int ERROR = 6;\n-        public static final int ASSERT = 7;\n-\n         private final String tag;\n \n         public AndroidLogger(String tag) {\n             this.tag = tag;\n         }\n \n-        public boolean isLoggable(int level) {\n-            return Log.isLoggable(tag, level);\n-        }\n-\n-        public void v(String msg) {\n-            Log.v(tag, msg);\n-        }\n-\n-        public void v(String msg, Throwable th) {\n-            Log.v(tag, msg, th);\n-        }\n-\n-        public void d(String msg) {\n-            Log.d(tag, msg);\n-        }\n-\n-        public void d(String msg, Throwable th) {\n-            Log.d(tag, msg, th);\n-        }\n-\n-        public void i(String msg) {\n-            Log.i(tag, msg);\n-        }\n-\n-        public void i(String msg, Throwable th) {\n-            Log.i(tag, msg, th);\n-        }\n-\n-        public void w(String msg) {\n-            Log.w(tag, msg);\n-        }\n-\n-        public void w(String msg, Throwable th) {\n-            Log.w(tag, msg, th);\n-        }\n-\n-        public void w(Throwable th) {\n-            Log.w(tag, th);\n-        }\n-\n-        public void e(String msg) {\n-            Log.e(tag, msg);\n-        }\n-\n-        public void e(String msg, Throwable th) {\n-            Log.e(tag, msg, th);\n-        }\n-\n-        @TargetApi(Build.VERSION_CODES.FROYO)\n-        @Override\n-        public void wtf(String msg) {\n-            Log.wtf(tag, msg);\n+        public boolean isLoggable(Level level) {\n+            if (level == Level.OFF) {\n+                return false;\n+            } else {\n+                return Log.isLoggable(tag, mapLevel(level));\n+            }\n+        }\n+\n+        public void log(Level level, String msg) {\n+            if (level != Level.OFF) {\n+                Log.println(mapLevel(level), tag, msg);\n+            }\n+        }\n+\n+        public void log(Level level, String msg, Throwable th) {\n+            if (level != Level.OFF) {\n+                // That's how Log does it internally\n+                Log.println(mapLevel(level), tag, msg + \"\\n\" + Log.getStackTraceString(th));\n+            }\n+        }\n+\n+        protected int mapLevel(Level level) {\n+            if (level == Level.OFF) {\n+                return 0;\n+            } else if (level == Level.FINEST || level == Level.FINER) {\n+                return Log.VERBOSE;\n+            } else if (level == Level.FINE || level == Level.CONFIG) {\n+                return Log.DEBUG;\n+            } else if (level == Level.INFO) {\n+                return Log.INFO;\n+            } else if (level == Level.WARNING) {\n+                return Log.WARN;\n+            } else if (level == Level.SEVERE) {\n+                return Log.ERROR;\n+            } else if (level == Level.ALL) {\n+                // Hmm, well..\n+                return Log.ASSERT;\n+            } else {\n+                throw new IllegalArgumentException(\"Unexpected level: \" + level);\n+            }\n         }\n \n-        @TargetApi(Build.VERSION_CODES.FROYO)\n-        @Override\n-        public void wtf(String msg, Throwable th) {\n-            Log.wtf(tag, msg, th);\n-        }\n     }\n \n     public static class JavaLogger extends Logger {\n-        private static final Level[] LEVEL_MAP = {\n-                Level.OFF, Level.OFF, Level.OFF, // Unused\n-                Level.FINEST, // VERBOSE = 2\n-                Level.FINE, //DEBUG = 3\n-                Level.INFO, // INFO = 4\n-                Level.WARNING, // WARN = 5\n-                Level.SEVERE, //ERROR = 6\n-                Level.SEVERE, //ASSERT = 7\n-        };\n-\n-        java.util.logging.Logger logger = java.util.logging.Logger.getLogger(\"\");\n+        protected final java.util.logging.Logger logger;\n \n         public JavaLogger(String tag) {\n             logger = java.util.logging.Logger.getLogger(tag);\n         }\n \n         @Override\n-        public boolean isLoggable(int level) {\n-            return logger.isLoggable(LEVEL_MAP[level]);\n-        }\n-\n-        @Override\n-        public void v(String msg) {\n-            logger.finest(msg);\n-        }\n-\n-        @Override\n-        public void v(String msg, Throwable th) {\n-            logger.log(Level.FINEST, msg, th);\n-        }\n-\n-        @Override\n-        public void d(String msg) {\n-            logger.fine(msg);\n-        }\n-\n-        @Override\n-        public void d(String msg, Throwable th) {\n-            logger.log(Level.FINE, msg, th);\n-        }\n-\n-        @Override\n-        public void i(String msg) {\n-            logger.info(msg);\n-        }\n-\n-        @Override\n-        public void i(String msg, Throwable th) {\n-            logger.log(Level.INFO, msg, th);\n-        }\n-\n-        @Override\n-        public void w(String msg) {\n-            logger.warning(msg);\n-        }\n-\n-        @Override\n-        public void w(String msg, Throwable th) {\n-            logger.log(Level.WARNING, msg, th);\n+        public boolean isLoggable(Level level) {\n+            return logger.isLoggable(level);\n         }\n \n         @Override\n-        public void w(Throwable th) {\n-            logger.log(Level.WARNING, null, th);\n+        public void log(Level level, String msg) {\n+            logger.log(level, msg);\n         }\n \n         @Override\n-        public void e(String msg) {\n-            logger.severe(msg);\n+        public void log(Level level, String msg, Throwable th) {\n+            logger.log(level, msg, th);\n         }\n \n-        @Override\n-        public void e(String msg, Throwable th) {\n-            logger.log(Level.SEVERE, msg, th);\n-        }\n-\n-        @Override\n-        public void wtf(String msg) {\n-            logger.severe(msg);\n-        }\n-\n-        @Override\n-        public void wtf(String msg, Throwable th) {\n-            logger.log(Level.SEVERE, msg, th);\n-        }\n     }\n }",
      "parent_sha": "7a0949fcfbc60e37dfc7800baa28e3581ed1624d"
    }
  },
  {
    "oid": "808a4ef847d31c516c9ed692bd0c4506890decad",
    "message": "minor",
    "date": "2015-12-04T13:51:01Z",
    "url": "https://github.com/greenrobot/EventBus/commit/808a4ef847d31c516c9ed692bd0c4506890decad",
    "details": {
      "sha": "e52cb996e92af0dabfd51d652a65b160d85fda19",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/808a4ef847d31c516c9ed692bd0c4506890decad/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/808a4ef847d31c516c9ed692bd0c4506890decad/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=808a4ef847d31c516c9ed692bd0c4506890decad",
      "patch": "@@ -87,7 +87,7 @@ private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n     }\n \n     private List<SubscriberMethod> getMethodsAndRelease(FindState findState) {\n-        ArrayList<SubscriberMethod> subscriberMethods = new ArrayList<>(findState.subscriberMethods);\n+        List<SubscriberMethod> subscriberMethods = new ArrayList<>(findState.subscriberMethods);\n         findState.recycle();\n         synchronized (FIND_STATE_POOL) {\n             for (int i = 0; i < POOL_SIZE; i++) {\n@@ -168,7 +168,7 @@ private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {\n     private void findUsingReflectionInSingleClass(FindState findState) {\n         Method[] methods;\n         try {\n-            // This is faster than getMethods, especially when subscribers a fat classes like Activities\n+            // This is faster than getMethods, especially when subscribers are fat classes like Activities\n             methods = findState.clazz.getDeclaredMethods();\n         } catch (Throwable th) {\n             // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149",
      "parent_sha": "d6229b1598d8b989cf4422bf861dbffdfa64fb25"
    }
  },
  {
    "oid": "6fef187894f8fbae436247d42f9c4b5479cc0455",
    "message": "added multi-threaded tests with mixed event types",
    "date": "2012-07-15T15:10:00Z",
    "url": "https://github.com/greenrobot/EventBus/commit/6fef187894f8fbae436247d42f9c4b5479cc0455",
    "details": {
      "sha": "71a427fe0a84266103fab8ccc987d3a488092e08",
      "filename": "EventBusTest/src/de/greenrobot/greenbus/test/EventBusMultithreadedTest.java",
      "status": "modified",
      "additions": 50,
      "deletions": 21,
      "changes": 71,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/6fef187894f8fbae436247d42f9c4b5479cc0455/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fgreenbus%2Ftest%2FEventBusMultithreadedTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/6fef187894f8fbae436247d42f9c4b5479cc0455/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fgreenbus%2Ftest%2FEventBusMultithreadedTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fgreenbus%2Ftest%2FEventBusMultithreadedTest.java?ref=6fef187894f8fbae436247d42f9c4b5479cc0455",
      "patch": "@@ -29,57 +29,88 @@\n  */\r\n public class EventBusMultithreadedTest extends TestCase {\r\n \r\n-    public static final int COUNT = 2000;\r\n+    /**\r\n+     * Iteration count per test (will be divided by number of threads); run with 1000 for quick testing, and with 10000\r\n+     * from time to time.\r\n+     */\r\n+    private static final int COUNT = 1000;\r\n \r\n-    private EventBus eventBus;\r\n-    private String lastStringEvent;\r\n     private final AtomicInteger countStringEvent = new AtomicInteger();\r\n     private final AtomicInteger countIntegerEvent = new AtomicInteger();\r\n     private final AtomicInteger countObjectEvent = new AtomicInteger();\r\n+\r\n+    private EventBus eventBus;\r\n+    private String lastStringEvent;\r\n     private Integer lastIntegerEvent;\r\n-    private Object lastObjectEvent;\r\n \r\n     protected void setUp() throws Exception {\r\n         super.setUp();\r\n         eventBus = new EventBus();\r\n     }\r\n \r\n-    public void test01PosterThreads() throws InterruptedException {\r\n+    public void testPost01Thread() throws InterruptedException {\r\n         runThreadsSingleEventType(1);\r\n     }\r\n \r\n-    public void test02PosterThreads() throws InterruptedException {\r\n-        runThreadsSingleEventType(2);\r\n-    }\r\n-\r\n-    public void test04PosterThreads() throws InterruptedException {\r\n+    public void testPost04Threads() throws InterruptedException {\r\n         runThreadsSingleEventType(4);\r\n     }\r\n \r\n-    public void test40PosterThreads() throws InterruptedException {\r\n+    public void testPost40Threads() throws InterruptedException {\r\n         runThreadsSingleEventType(40);\r\n     }\r\n \r\n-    private void runThreadsSingleEventType(int threadCount) throws InterruptedException {\r\n-        runThreadsSingleEventType(threadCount, COUNT / threadCount, \"Hello\");\r\n+    public void testPostMixedEventType01Thread() throws InterruptedException {\r\n+        runThreadsMixedEventType(1);\r\n     }\r\n \r\n-    private void runThreadsSingleEventType(int threadCount, int iterations, String eventToPost)\r\n-            throws InterruptedException {\r\n+    public void testPostMixedEventType04Threads() throws InterruptedException {\r\n+        runThreadsMixedEventType(4);\r\n+    }\r\n+\r\n+    public void testPostMixedEventType40Threads() throws InterruptedException {\r\n+        runThreadsMixedEventType(40);\r\n+    }\r\n+\r\n+    private void runThreadsSingleEventType(int threadCount) throws InterruptedException {\r\n+        int iterations = COUNT / threadCount;\r\n         eventBus.register(this);\r\n \r\n         CountDownLatch latch = new CountDownLatch(threadCount + 1);\r\n-        List<PosterThread> threads = startThreads(latch, threadCount, iterations, eventToPost);\r\n+        List<PosterThread> threads = startThreads(latch, threadCount, iterations, \"Hello\");\r\n         long time = triggerAndWaitForThreads(threads, latch);\r\n \r\n         Log.d(EventBus.TAG, threadCount + \" threads posted \" + iterations + \" events each in \" + time + \"ms\");\r\n \r\n-        assertEquals(lastStringEvent, eventToPost);\r\n+        assertEquals(\"Hello\", lastStringEvent);\r\n         int expectedCount = threadCount * iterations;\r\n         assertEquals(expectedCount, countStringEvent.intValue());\r\n         assertEquals(expectedCount, countObjectEvent.intValue());\r\n     }\r\n \r\n+    private void runThreadsMixedEventType(int threadCount) throws InterruptedException {\r\n+        int iterations = COUNT / threadCount / 2;\r\n+        eventBus.register(this);\r\n+\r\n+        CountDownLatch latch = new CountDownLatch(2 * threadCount + 1);\r\n+        List<PosterThread> threadsString = startThreads(latch, threadCount, iterations, \"Hello\");\r\n+        List<PosterThread> threadsInteger = startThreads(latch, threadCount, iterations, 42);\r\n+        List<PosterThread> threads = new ArrayList<PosterThread>();\r\n+        threads.addAll(threadsString);\r\n+        threads.addAll(threadsInteger);\r\n+        long time = triggerAndWaitForThreads(threads, latch);\r\n+\r\n+        Log.d(EventBus.TAG, threadCount * 2 + \" mixed threads posted \" + iterations + \" events each in \" + time + \"ms\");\r\n+\r\n+        assertEquals(\"Hello\", lastStringEvent);\r\n+        assertEquals(42, lastIntegerEvent.intValue());\r\n+\r\n+        int expectedCount = threadCount * iterations;\r\n+        assertEquals(expectedCount, countStringEvent.intValue());\r\n+        assertEquals(expectedCount, countIntegerEvent.intValue());\r\n+        assertEquals(expectedCount * 2, countObjectEvent.intValue());\r\n+    }\r\n+\r\n     private long triggerAndWaitForThreads(List<PosterThread> threads, CountDownLatch latch) throws InterruptedException {\r\n         while (latch.getCount() != 1) {\r\n             // Let all threads prepare\r\n@@ -90,11 +121,10 @@ private long triggerAndWaitForThreads(List<PosterThread> threads, CountDownLatch\n         for (PosterThread thread : threads) {\r\n             thread.join();\r\n         }\r\n-        long time = System.currentTimeMillis() - start;\r\n-        return time;\r\n+        return System.currentTimeMillis() - start;\r\n     }\r\n \r\n-    private List<PosterThread> startThreads(CountDownLatch latch, int threadCount, int iterations, String eventToPost)\r\n+    private List<PosterThread> startThreads(CountDownLatch latch, int threadCount, int iterations, Object eventToPost)\r\n             throws InterruptedException {\r\n         List<PosterThread> threads = new ArrayList<PosterThread>(threadCount);\r\n         for (int i = 0; i < threadCount; i++) {\r\n@@ -116,7 +146,6 @@ public void onEvent(Integer event) {\n     }\r\n \r\n     public void onEvent(Object event) {\r\n-        lastObjectEvent = event;\r\n         countObjectEvent.incrementAndGet();\r\n     }\r\n \r",
      "parent_sha": "25cca125d6c6190b7494ac1e37133ff0adf584c6"
    }
  },
  {
    "oid": "4e42ed943050cab8b71e0765e0e37c9df142b4a1",
    "message": "realistic initial capacity for methodKeyBuilder",
    "date": "2015-12-02T19:33:30Z",
    "url": "https://github.com/greenrobot/EventBus/commit/4e42ed943050cab8b71e0765e0e37c9df142b4a1",
    "details": {
      "sha": "b8124e1e8e314e45eca5b0f5bac084ddd4017b4e",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/4e42ed943050cab8b71e0765e0e37c9df142b4a1/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/4e42ed943050cab8b71e0765e0e37c9df142b4a1/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=4e42ed943050cab8b71e0765e0e37c9df142b4a1",
      "patch": "@@ -204,7 +204,7 @@ static void clearCaches() {\n     static class FindState {\n         final List<SubscriberMethod> subscriberMethods = new ArrayList<SubscriberMethod>();\n         final Map<String, Class> eventTypesFound = new HashMap<String, Class>();\n-        final StringBuilder methodKeyBuilder = new StringBuilder();\n+        final StringBuilder methodKeyBuilder = new StringBuilder(128);\n \n         Class<?> subscriberClass;\n         Class<?> clazz;",
      "parent_sha": "e3bf68aeb05a7d2c79d2d61c5e429e29d7e563c5"
    }
  },
  {
    "oid": "07969b2029d2499ae1d5eb575a047f7ff7b66af6",
    "message": "index setup code generation",
    "date": "2015-12-04T19:03:09Z",
    "url": "https://github.com/greenrobot/EventBus/commit/07969b2029d2499ae1d5eb575a047f7ff7b66af6",
    "details": {
      "sha": "e1db006512f4a6d4303411b801c7786e0a7c0eb0",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 61,
      "deletions": 16,
      "changes": 77,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/07969b2029d2499ae1d5eb575a047f7ff7b66af6/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/07969b2029d2499ae1d5eb575a047f7ff7b66af6/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=07969b2029d2499ae1d5eb575a047f7ff7b66af6",
      "patch": "@@ -31,12 +31,12 @@\n \n @SupportedAnnotationTypes(\"de.greenrobot.event.Subscribe\")\n public class EventBusAnnotationProcessor extends AbstractProcessor {\n-    public static final String CLASS_POSTFIX = \"_EventBusInfo\";\n+    public static final String INFO_CLASS_POSTFIX = \"_EventBusInfo\";\n \n     /** Found subscriber methods for a class (without superclasses). */\n-    private final Map<TypeElement, List<ExecutableElement>> methodsByClass =\n-            new HashMap<TypeElement, List<ExecutableElement>>();\n-    private final Set<TypeElement> classesToSkip = new HashSet<TypeElement>();\n+    private final Map<TypeElement, List<ExecutableElement>> methodsByClass = new HashMap<>();\n+    private final Map<TypeElement, String> infoByClass = new HashMap<>();\n+    private final Set<TypeElement> classesToSkip = new HashSet<>();\n \n     private boolean writerRoundDone;\n     private int round;\n@@ -72,10 +72,10 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n             checkForSubscribersToSkip(messager);\n \n             if (!methodsByClass.isEmpty()) {\n-                writeSources();\n+                createInfoFiles();\n                 String index = processingEnv.getOptions().get(\"eventBusIndex\");\n                 if (index != null) {\n-                    writeIndex(index);\n+                    createInfoIndexFile(index);\n                 }\n             } else {\n                 messager.printMessage(Diagnostic.Kind.WARNING, \"No @Subscribe annotations found\");\n@@ -191,7 +191,7 @@ private TypeElement getSuperclass(TypeElement type) {\n         }\n     }\n \n-    private void writeSources() {\n+    private void createInfoFiles() {\n         List<Map.Entry<TypeElement, List<ExecutableElement>>> entries = new ArrayList<>(methodsByClass.entrySet());\n         for (int i = 0; i < entries.size(); i++) {\n             Map.Entry<TypeElement, List<ExecutableElement>> entry = entries.get(i);\n@@ -207,6 +207,8 @@ private void writeSources() {\n                 String subscriberClassName = getClassString(subscriberClass, myPackage);\n                 String infoClassName = getInfoClass(subscriberClass, myPackage);\n \n+                infoByClass.put(subscriberClass, myPackage + \".\" + infoClassName);\n+\n                 JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(myPackage + '.' + infoClassName);\n                 writer = new BufferedWriter(sourceFile.openWriter());\n                 writer.write(\"package \" + myPackage + \";\\n\\n\");\n@@ -254,7 +256,7 @@ private String getSuperclassInfoClass(TypeElement subscriberClass, String myPack\n \n     private String getInfoClass(TypeElement subscriberClass, String myPackage) {\n         String subscriberClassName = getClassString(subscriberClass, myPackage);\n-        return subscriberClassName.replace('.', '_') + CLASS_POSTFIX;\n+        return subscriberClassName.replace('.', '_') + INFO_CLASS_POSTFIX;\n     }\n \n     private String getNextValue(String myPackage, TypeElement nextEntry) throws IOException {\n@@ -364,7 +366,7 @@ private void writeMethods(BufferedWriter writer, List<ExecutableElement> methods\n         }\n     }\n \n-    private void writeIndex(String index) {\n+    private void createInfoIndexFile(String index) {\n         BufferedWriter writer = null;\n         try {\n             JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(index);\n@@ -381,17 +383,22 @@ private void writeIndex(String index) {\n             writer.write(\"import java.util.Map;\\n\\n\");\n             writer.write(\"/** This class is generated by EventBus, do not edit. */\\n\");\n             writer.write(\"public class \" + clazz + \" implements SubscriberInfoIndex {\\n\");\n-            writer.write(\"    private static final Map<Class<?>,Class<SubscriberInfo>> SUBSCRIBER_INDEX;\\n\\n\");\n+            writer.write(\"    private static final Map<Class<?>, Class<? extends SubscriberInfo>> SUBSCRIBER_INDEX;\\n\\n\");\n             writer.write(\"    static {\\n\");\n-            writer.write(\"        SUBSCRIBER_INDEX = new HashMap<Class<?>,Class<SubscriberInfo>>();\\n\");\n+            writer.write(\"        SUBSCRIBER_INDEX = new HashMap<Class<?>, Class<? extends SubscriberInfo>>();\\n\");\n+            writeIndexLines(writer, myPackage);\n             writer.write(\"    }\\n\\n\");\n             writer.write(\"    @Override\\n\");\n             writer.write(\"    public SubscriberInfo getSubscriberInfo(Class<?> subscriberClass) {\\n\");\n-            writer.write(\"        Class<SubscriberInfo> infoClass = SUBSCRIBER_INDEX.get(subscriberClass);\\n\");\n-            writer.write(\"        try {\\n\");\n-            writer.write(\"            return infoClass != null? infoClass.newInstance(): null;\\n\");\n-            writer.write(\"        } catch(Exception ex) {\\n\");\n-            writer.write(\"            throw new RuntimeException(ex);\\n\");\n+            writer.write(\"        Class<? extends SubscriberInfo> infoClass = SUBSCRIBER_INDEX.get(subscriberClass);\\n\");\n+            writer.write(\"        if (infoClass != null) {\\n\");\n+            writer.write(\"            try {\\n\");\n+            writer.write(\"                return infoClass.newInstance();\\n\");\n+            writer.write(\"            } catch (Exception ex) {\\n\");\n+            writer.write(\"                throw new RuntimeException(ex);\\n\");\n+            writer.write(\"            }\\n\");\n+            writer.write(\"        } else {\\n\");\n+            writer.write(\"            return null;\\n\");\n             writer.write(\"        }\\n\");\n             writer.write(\"    }\\n\");\n             writer.write(\"}\\n\");\n@@ -408,6 +415,44 @@ private void writeIndex(String index) {\n         }\n     }\n \n+    private void writeIndexLines(BufferedWriter writer, String myPackage) throws IOException {\n+        for (Map.Entry<TypeElement, String> entry : infoByClass.entrySet()) {\n+            TypeElement subscriberTypeElement = entry.getKey();\n+            String infoClass = entry.getValue();\n+            if (!classesToSkip.contains(subscriberTypeElement)) {\n+                int infoPeriod = infoClass.lastIndexOf('.');\n+                String infoPackage = infoPeriod > 0 ? infoClass.substring(0, infoPeriod) : null;\n+                if (infoPackage.equals(myPackage)) {\n+                    infoClass = infoClass.substring(infoPeriod + 1);\n+                }\n+                String subscriberClass = getClassString(subscriberTypeElement, myPackage);\n+                if (isVisible(myPackage, subscriberTypeElement)) {\n+                    writeLine(writer, 2, \"SUBSCRIBER_INDEX.put(\", subscriberClass + \".class,\", infoClass + \".class);\\n\");\n+                } else {\n+                    writer.write(\"        // Subscriber not visible to index: \" + subscriberClass + \"\\n\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean isVisible(String myPackage, TypeElement typeElement) {\n+        Set<Modifier> modifiers = typeElement.getModifiers();\n+        boolean visible;\n+        if (modifiers.contains(Modifier.PUBLIC)) {\n+            visible = true;\n+        } else if (modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.PROTECTED)) {\n+            visible = false;\n+        } else {\n+            String subscriberPackage = getPackageElement(typeElement).getQualifiedName().toString();\n+            if (myPackage == null) {\n+                visible = subscriberPackage.length() == 0;\n+            } else {\n+                visible = myPackage.equals(subscriberPackage);\n+            }\n+        }\n+        return visible;\n+    }\n+\n     private void writeLine(BufferedWriter writer, int indentLevel, String... parts) throws IOException {\n         writeIndent(writer, indentLevel);\n         int len = indentLevel * 4;",
      "parent_sha": "976ebbce1c5bd30c2faa8f62ec972ff580ca65d0"
    }
  },
  {
    "oid": "232a70fa22f21c3f675badb4415c34760e63af51",
    "message": "fix: query superclasses when using subscriber index",
    "date": "2015-03-08T19:17:51Z",
    "url": "https://github.com/greenrobot/EventBus/commit/232a70fa22f21c3f675badb4415c34760e63af51",
    "details": {
      "sha": "35b982e3688cbfae07d8b4f58651e0d3ac60d0fa",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 17,
      "deletions": 8,
      "changes": 25,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/232a70fa22f21c3f675badb4415c34760e63af51/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/232a70fa22f21c3f675badb4415c34760e63af51/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=232a70fa22f21c3f675badb4415c34760e63af51",
      "patch": "@@ -87,16 +87,25 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n     }\n \n     private List<SubscriberMethod> findSubscriberMethodsWithIndex(Class<?> subscriberClass) {\n-        SubscriberMethod[] array = INDEX.getSubscribersFor(subscriberClass);\n-        if (array != null && array.length > 0) {\n-            List<SubscriberMethod> subscriberMethods = new ArrayList<SubscriberMethod>();\n-            for (SubscriberMethod subscriberMethod : array) {\n-                subscriberMethods.add(subscriberMethod);\n+        Class<?> clazz = subscriberClass;\n+        while (clazz != null) {\n+            SubscriberMethod[] array = INDEX.getSubscribersFor(clazz);\n+            if (array != null && array.length > 0) {\n+                List<SubscriberMethod> subscriberMethods = new ArrayList<SubscriberMethod>();\n+                for (SubscriberMethod subscriberMethod : array) {\n+                    subscriberMethods.add(subscriberMethod);\n+                }\n+                return subscriberMethods;\n+            } else {\n+                String name = clazz.getName();\n+                if (name.startsWith(\"java.\") || name.startsWith(\"javax.\") || name.startsWith(\"android.\")) {\n+                    // Skip system classes, this just degrades performance\n+                    break;\n+                }\n+                clazz = clazz.getSuperclass();\n             }\n-            return subscriberMethods;\n-        } else {\n-            return Collections.EMPTY_LIST;\n         }\n+        return Collections.EMPTY_LIST;\n     }\n \n     private List<SubscriberMethod> findSubscriberMethodsWithReflection(Class<?> subscriberClass) {",
      "parent_sha": "251f64ec7d442a43f3d04c0a686adc4117a6ce76"
    }
  },
  {
    "oid": "4cf3f4c040860d32cf82d30af35583d6afb28e9c",
    "message": "faster unit test: testUnregisterNotLeaking should only iterate heapMBytes * 2",
    "date": "2015-11-19T21:56:18Z",
    "url": "https://github.com/greenrobot/EventBus/commit/4cf3f4c040860d32cf82d30af35583d6afb28e9c",
    "details": {
      "sha": "c81d2140babdcf03f776c054f034408b28063d85",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/4cf3f4c040860d32cf82d30af35583d6afb28e9c/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/4cf3f4c040860d32cf82d30af35583d6afb28e9c/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java?ref=4cf3f4c040860d32cf82d30af35583d6afb28e9c",
      "patch": "@@ -64,14 +64,16 @@ public void testUnregisterWithoutRegister() {\n         eventBus.unregister(this);\n     }\n \n+    // This will throw \"out of memory\" if subscribers are leaked\n     public void testUnregisterNotLeaking() {\n-        // This will throw \"out of memory\" if subscribers are leaked\n-        for (int i = 0; i < 300; i++) {\n+        int heapMBytes = (int) (Runtime.getRuntime().maxMemory() / (1024L * 1024L));\n+        for (int i = 0; i < heapMBytes * 2; i++) {\n             EventBusBasicTest subscriber = new EventBusBasicTest() {\n                 byte[] expensiveObject = new byte[1024 * 1024];\n             };\n             eventBus.register(subscriber);\n             eventBus.unregister(subscriber);\n+            Log.d(\"Test\", \"Iteration \" + i + \" / max heap: \" + heapMBytes);\n         }\n     }\n ",
      "parent_sha": "8c765a88096121bc835a824e50e6684bd689d2ef"
    }
  },
  {
    "oid": "8f2088e4e407e33d0b953409c8f916d92bd71760",
    "message": "added tests for private event classes",
    "date": "2015-06-02T18:09:30Z",
    "url": "https://github.com/greenrobot/EventBus/commit/8f2088e4e407e33d0b953409c8f916d92bd71760",
    "details": {
      "sha": "a85cfcaf7e132e4489d1110d539d3f2f55a3e6c8",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusFallbackToReflectionTest.java",
      "status": "modified",
      "additions": 37,
      "deletions": 4,
      "changes": 41,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/8f2088e4e407e33d0b953409c8f916d92bd71760/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusFallbackToReflectionTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/8f2088e4e407e33d0b953409c8f916d92bd71760/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusFallbackToReflectionTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusFallbackToReflectionTest.java?ref=8f2088e4e407e33d0b953409c8f916d92bd71760",
      "patch": "@@ -4,27 +4,44 @@\n \n /** TODO */\n public class EventBusFallbackToReflectionTest extends AbstractEventBusTest {\n-    public class PublicSuperClass {\n+    private class PrivateEvent {\n+    }\n+\n+    public class PublicClass {\n         @Subscribe\n         public void onEvent(Object any) {\n             trackEvent(any);\n         }\n     }\n \n-    private class PrivateSuperClass {\n+    private class PrivateClass {\n         @Subscribe\n         public void onEvent(Object any) {\n             trackEvent(any);\n         }\n     }\n \n-    public class PublicWithPrivateSuperClass extends PrivateSuperClass {\n+    public class PublicWithPrivateSuperClass extends PrivateClass {\n         @Subscribe\n         public void onEvent(String any) {\n             trackEvent(any);\n         }\n     }\n \n+    public class PublicClassWithPrivateEvent {\n+        @Subscribe\n+        public void onEvent(PrivateEvent any) {\n+            trackEvent(any);\n+        }\n+    }\n+\n+    public class PublicWithPrivateEventInSuperclass extends PublicClassWithPrivateEvent {\n+        @Subscribe\n+        public void onEvent(Object any) {\n+            trackEvent(any);\n+        }\n+    }\n+\n     public EventBusFallbackToReflectionTest() {\n         super(true);\n     }\n@@ -44,7 +61,7 @@ public void onEvent(String event) {\n     }\n \n     public void testAnonymousSubscriberClassWithPublicSuperclass() {\n-        Object subscriber = new PublicSuperClass() {\n+        Object subscriber = new PublicClass() {\n             @Subscribe\n             public void onEvent(String event) {\n                 trackEvent(event);\n@@ -64,4 +81,20 @@ public void testAnonymousSubscriberClassWithPrivateSuperclass() {\n         assertEquals(2, eventsReceived.size());\n     }\n \n+    public void testSubscriberClassWithPrivateEvent() {\n+        eventBus.register(new PublicClassWithPrivateEvent());\n+        PrivateEvent privateEvent = new PrivateEvent();\n+        eventBus.post(privateEvent);\n+        assertEquals(privateEvent, lastEvent);\n+        assertEquals(1, eventsReceived.size());\n+    }\n+\n+    public void testSubscriberExtendingClassWithPrivateEvent() {\n+        eventBus.register(new PublicWithPrivateEventInSuperclass());\n+        PrivateEvent privateEvent = new PrivateEvent();\n+        eventBus.post(privateEvent);\n+        assertEquals(privateEvent, lastEvent);\n+        assertEquals(2, eventsReceived.size());\n+    }\n+\n }",
      "parent_sha": "f5106bc144f2f0ba89c90b0b64766f06a248ec90"
    }
  },
  {
    "oid": "8c765a88096121bc835a824e50e6684bd689d2ef",
    "message": "Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149 - adapted be04a2de66981e819f40afd389e417e98c94c7da from master to annotation based version",
    "date": "2015-11-19T21:31:13Z",
    "url": "https://github.com/greenrobot/EventBus/commit/8c765a88096121bc835a824e50e6684bd689d2ef",
    "details": {
      "sha": "a03cfb3782f6694ec10cf12de3bf43ad72086362",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 32,
      "deletions": 10,
      "changes": 42,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/8c765a88096121bc835a824e50e6684bd689d2ef/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/8c765a88096121bc835a824e50e6684bd689d2ef/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=8c765a88096121bc835a824e50e6684bd689d2ef",
      "patch": "@@ -19,7 +19,6 @@\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n \n@@ -117,7 +116,15 @@ private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {\n     }\n \n     private void findUsingReflectionInSingleClass(FindState findState) {\n-        Method[] methods = findState.clazz.getDeclaredMethods();\n+        Method[] methods;\n+        try {\n+            // This is faster than getMethods, especially when subscribers a fat classes like Activities\n+            methods = findState.clazz.getDeclaredMethods();\n+        } catch (Throwable th) {\n+            // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149\n+            methods = findState.clazz.getMethods();\n+            findState.skipSuperClasses = true;\n+        }\n         for (Method method : methods) {\n             int modifiers = method.getModifiers();\n             if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {\n@@ -134,14 +141,14 @@ private void findUsingReflectionInSingleClass(FindState findState) {\n                     }\n                 } else if (strictMethodVerification) {\n                     if (method.isAnnotationPresent(Subscribe.class)) {\n-                        String methodName = findState.clazzName + \".\" + method.getName();\n+                        String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n                         throw new EventBusException(\"@Subscribe method \" + methodName +\n                                 \"must have exactly 1 parameter but has \" + parameterTypes.length);\n                     }\n                 }\n             } else if (strictMethodVerification) {\n                 if (method.isAnnotationPresent(Subscribe.class)) {\n-                    String methodName = findState.clazzName + \".\" + method.getName();\n+                    String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n                     throw new EventBusException(methodName +\n                             \" is a illegal @Subscribe method: must be public, non-static, and non-abstract\");\n                 }\n@@ -157,11 +164,12 @@ static void clearCaches() {\n \n     class FindState {\n         final List<SubscriberMethod> subscriberMethods = new ArrayList<SubscriberMethod>();\n-        final HashSet<String> eventTypesFound = new HashSet<String>();\n+        final Map<String, Class> eventTypesFound = new HashMap<String, Class>();\n         final StringBuilder methodKeyBuilder = new StringBuilder();\n         Class<?> subscriberClass;\n         Class<?> clazz;\n         String clazzName;\n+        boolean skipSuperClasses;\n \n         void initForSubscriber(Class<?> subscriberClass) {\n             this.subscriberClass = clazz = subscriberClass;\n@@ -179,16 +187,30 @@ boolean checkAdd(Method method, Class<?> eventType) {\n             methodKeyBuilder.append('>').append(eventType.getName());\n \n             String methodKey = methodKeyBuilder.toString();\n-            return eventTypesFound.add(methodKey);\n+            Class<?> methodClass = method.getDeclaringClass();\n+            Class methodClassOld = eventTypesFound.put(methodKey, methodClass);\n+            if (methodClassOld == null || methodClassOld.isAssignableFrom(methodClass)) {\n+                // Only add if not already found in a sub class\n+                return true;\n+            } else {\n+                // Revert the put, old class is further down the class hierarchy\n+                eventTypesFound.put(methodKey, methodClassOld);\n+                return false;\n+            }\n         }\n \n         void moveToSuperclass() {\n-            clazz = clazz.getSuperclass();\n-            clazzName = clazz.getName();\n-            /** Skip system classes, this just degrades performance. */\n-            if (clazzName.startsWith(\"java.\") || clazzName.startsWith(\"javax.\") || clazzName.startsWith(\"android.\")) {\n+            if (skipSuperClasses) {\n                 clazz = null;\n                 clazzName = null;\n+            } else {\n+                clazz = clazz.getSuperclass();\n+                clazzName = clazz.getName();\n+                /** Skip system classes, this just degrades performance. */\n+                if (clazzName.startsWith(\"java.\") || clazzName.startsWith(\"javax.\") || clazzName.startsWith(\"android.\")) {\n+                    clazz = null;\n+                    clazzName = null;\n+                }\n             }\n         }\n     }",
      "parent_sha": "45846eb050c3b59fad166d9c9a0165b6e40b091f"
    }
  },
  {
    "oid": "0dc87f6e145d0564f7751bb1c99f049108082fae",
    "message": "#117 make 'no subscriptions' messages configurable",
    "date": "2014-09-18T10:16:05Z",
    "url": "https://github.com/greenrobot/EventBus/commit/0dc87f6e145d0564f7751bb1c99f049108082fae",
    "details": {
      "sha": "91ac5cddf410981cb180ab7790d25a16439954c5",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/0dc87f6e145d0564f7751bb1c99f049108082fae/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/0dc87f6e145d0564f7751bb1c99f049108082fae/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=0dc87f6e145d0564f7751bb1c99f049108082fae",
      "patch": "@@ -67,6 +67,7 @@ protected PostingThreadState initialValue() {\n \n     private boolean subscribed;\n     private boolean logSubscriberExceptions;\n+    private boolean logNoSubscriberMessages;\n \n     /** Convenience singleton for apps using a process-wide EventBus instance. */\n     public static EventBus getDefault() {\n@@ -113,6 +114,7 @@ public EventBus() {\n         asyncPoster = new AsyncPoster(this);\n         subscriberMethodFinder = new SubscriberMethodFinder();\n         logSubscriberExceptions = true;\n+        logNoSubscriberMessages = true;\n     }\n \n     /**\n@@ -126,6 +128,13 @@ public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {\n         this.logSubscriberExceptions = logSubscriberExceptions;\n     }\n \n+    /**\n+     * Configure if EventBus should log \"No subscribers registered for event\" messages (default: true).\n+     */\n+    public void configureLogNoSubscriberMessages(boolean logNoSubscriberMessages) {\n+        this.logNoSubscriberMessages = logNoSubscriberMessages;\n+    }\n+\n     /**\n      * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they are\n      * no longer interested in receiving events.\n@@ -487,7 +496,9 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro\n             }\n         }\n         if (!subscriptionFound) {\n-            Log.d(TAG, \"No subscribers registered for event \" + eventClass);\n+            if (logNoSubscriberMessages) {\n+                Log.d(TAG, \"No subscribers registered for event \" + eventClass);\n+            }\n             if (eventClass != NoSubscriberEvent.class && eventClass != SubscriberExceptionEvent.class) {\n                 post(new NoSubscriberEvent(this, event));\n             }",
      "parent_sha": "4cdd420d4ec26de6cedb444e7f6ec129d70b2b20"
    }
  },
  {
    "oid": "20b5f7ba6233a34504c993c651004dd40e4169ef",
    "message": "Using CopyOnWriteArrayList for direct access to subscriptions for\nposting",
    "date": "2012-07-15T19:49:47Z",
    "url": "https://github.com/greenrobot/EventBus/commit/20b5f7ba6233a34504c993c651004dd40e4169ef",
    "details": {
      "sha": "b1e674d6e5765d8271a1f144cf9a2500c3b6e268",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 18,
      "deletions": 49,
      "changes": 67,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/20b5f7ba6233a34504c993c651004dd40e4169ef/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/20b5f7ba6233a34504c993c651004dd40e4169ef/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=20b5f7ba6233a34504c993c651004dd40e4169ef",
      "patch": "@@ -20,8 +20,10 @@\n import java.util.ArrayList;\r\n import java.util.HashMap;\r\n import java.util.HashSet;\r\n+import java.util.Iterator;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n \r\n import android.util.Log;\r\n \r\n@@ -34,13 +36,12 @@ public class EventBus {\n     /** Log tag, apps may override it. */\r\n     public static String TAG = \"Event\";\r\n \r\n-    private static EventBus defaultInstance;\r\n+    private static final EventBus defaultInstance = new EventBus();\r\n \r\n-    private static Map<String, List<Method>> methodCache = new HashMap<String, List<Method>>();\r\n-    private static Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();\r\n-    private static List<List<Subscription>> postQueuePool = new ArrayList<List<Subscription>>();\r\n+    private static final Map<String, List<Method>> methodCache = new HashMap<String, List<Method>>();\r\n+    private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();\r\n \r\n-    private final Map<Class<?>, List<Subscription>> subscriptionsByEventType;\r\n+    private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;\r\n     private final Map<Object, List<Class<?>>> typesBySubscriber;\r\n \r\n     private final ThreadLocal<List<Object>> eventsQueuedForCurrentThread = new ThreadLocal<List<Object>>() {\r\n@@ -59,15 +60,12 @@ protected BooleanWrapper initialValue() {\n \r\n     private String defaultMethodName = \"onEvent\";\r\n \r\n-    public static synchronized EventBus getDefault() {\r\n-        if (null == defaultInstance) {\r\n-            defaultInstance = new EventBus();\r\n-        }\r\n+    public static EventBus getDefault() {\r\n         return defaultInstance;\r\n     }\r\n \r\n     public EventBus() {\r\n-        subscriptionsByEventType = new HashMap<Class<?>, List<Subscription>>();\r\n+        subscriptionsByEventType = new HashMap<Class<?>, CopyOnWriteArrayList<Subscription>>();\r\n         typesBySubscriber = new HashMap<Object, List<Class<?>>>();\r\n     }\r\n \r\n@@ -143,9 +141,9 @@ public synchronized void register(Object subscriber, String methodName, Class<?>\n     }\r\n \r\n     private void subscribe(Object subscriber, Method subscriberMethod, Class<?> eventType) {\r\n-        List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\r\n+        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\r\n         if (subscriptions == null) {\r\n-            subscriptions = new ArrayList<Subscription>();\r\n+            subscriptions = new CopyOnWriteArrayList<Subscription>();\r\n             subscriptionsByEventType.put(eventType, subscriptions);\r\n         } else {\r\n             for (Subscription subscription : subscriptions) {\r\n@@ -241,8 +239,7 @@ public void post(Object event) {\n             isPosting.value = true;\r\n             try {\r\n                 while (!eventQueue.isEmpty()) {\r\n-                    Object eventToPost = eventQueue.remove(0);\r\n-                    postSingleEvent(eventToPost);\r\n+                    postSingleEvent(eventQueue.remove(0));\r\n                 }\r\n             } finally {\r\n                 isPosting.value = false;\r\n@@ -256,18 +253,17 @@ private void postSingleEvent(Object event) throws Error {\n         int countTypes = eventTypes.size();\r\n         for (int h = 0; h < countTypes; h++) {\r\n             Class<?> clazz = eventTypes.get(h);\r\n-            List<Subscription> subscriptions = getSubscriptionsForEventTypeFromPool(clazz);\r\n+            CopyOnWriteArrayList<Subscription> subscriptions;\r\n+            synchronized (this) {\r\n+                subscriptions = subscriptionsByEventType.get(clazz);\r\n+            }\r\n             if (subscriptions != null) {\r\n-                int size = subscriptions.size();\r\n-                for (int i = 0; i < size; i++) {\r\n-                    Subscription subscription = subscriptions.get(i);\r\n+                Iterator<Subscription> iterator = subscriptions.iterator();\r\n+                while (iterator.hasNext()) {\r\n+                    Subscription subscription = iterator.next();\r\n                     postToSubscribtion(subscription, event);\r\n                 }\r\n                 subscriptionFound = true;\r\n-                subscriptions.clear();\r\n-                synchronized (this) {\r\n-                    postQueuePool.add(subscriptions);\r\n-                }\r\n             }\r\n         }\r\n         if (!subscriptionFound) {\r\n@@ -303,33 +299,6 @@ private void addInterfaces(List<Class<?>> eventTypes, Class<?>[] interfaces) {\n         }\r\n     }\r\n \r\n-    private List<Subscription> getSubscriptionsForEventTypeFromPool(Class<?> clazz) {\r\n-        // Don't block other threads during event handling, just grab the subscriptions to call\r\n-        List<Subscription> subscriptions;\r\n-        synchronized (this) {\r\n-            List<Subscription> list = subscriptionsByEventType.get(clazz);\r\n-            if (list != null && !list.isEmpty()) {\r\n-                int countPooled = postQueuePool.size();\r\n-                if (countPooled == 0) {\r\n-                    subscriptions = new ArrayList<EventBus.Subscription>();\r\n-                } else {\r\n-                    subscriptions = postQueuePool.remove(countPooled - 1);\r\n-                    if (!subscriptions.isEmpty()) {\r\n-                        throw new RuntimeException(\"Post queue from pool was not empty\");\r\n-                    }\r\n-                }\r\n-                // Avoid subscriptions.addAll(list) because it restructures the list and is expensive\r\n-                int size = list.size();\r\n-                for (int i = 0; i < size; i++) {\r\n-                    subscriptions.add(list.get(i));\r\n-                }\r\n-                return subscriptions;\r\n-            } else {\r\n-                return null;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n     private void postToSubscribtion(Subscription subscription, Object event) throws Error {\r\n         try {\r\n             subscription.method.invoke(subscription.subscriber, event);\r",
      "parent_sha": "c07d1e0f3fdc5697e29e5de96152880fc7d0fe9e"
    }
  },
  {
    "oid": "6fced7ef7d50c02a4a6a3f174b6426c931a5b5c6",
    "message": "added FIND_STATE_POOL",
    "date": "2015-11-27T21:05:06Z",
    "url": "https://github.com/greenrobot/EventBus/commit/6fced7ef7d50c02a4a6a3f174b6426c931a5b5c6",
    "details": {
      "sha": "3a6f62ef997ec29c24cf2323cfd3220cecee82fe",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 42,
      "deletions": 7,
      "changes": 49,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/6fced7ef7d50c02a4a6a3f174b6426c931a5b5c6/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/6fced7ef7d50c02a4a6a3f174b6426c931a5b5c6/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=6fced7ef7d50c02a4a6a3f174b6426c931a5b5c6",
      "patch": "@@ -37,6 +37,9 @@ class SubscriberMethodFinder {\n     private final boolean strictMethodVerification;\n     private final boolean ignoreGeneratedIndex;\n \n+    private static final int POOL_SIZE = 4;\n+    private static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];\n+\n     SubscriberMethodFinder(boolean strictMethodVerification, boolean ignoreGeneratedIndex) {\n         this.strictMethodVerification = strictMethodVerification;\n         this.ignoreGeneratedIndex = ignoreGeneratedIndex;\n@@ -68,7 +71,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, boolean f\n     }\n \n     private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n-        FindState findState = new FindState();\n+        FindState findState = prepareFindState();\n         findState.initForSubscriber(subscriberClass);\n         while (findState.clazz != null) {\n             findState.subscriberInfo = getSubscriberInfo(findState);\n@@ -84,7 +87,34 @@ private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n             }\n             findState.moveToSuperclass();\n         }\n-        return findState.subscriberMethods;\n+        return getMethodsAndRelease(findState);\n+    }\n+\n+    private List<SubscriberMethod> getMethodsAndRelease(FindState findState) {\n+        ArrayList<SubscriberMethod> subscriberMethods = new ArrayList<>(findState.subscriberMethods);\n+        findState.recycle();\n+        synchronized (FIND_STATE_POOL) {\n+            for (int i = 0; i < POOL_SIZE; i++) {\n+                if (FIND_STATE_POOL[i] == null) {\n+                    FIND_STATE_POOL[i] = findState;\n+                    break;\n+                }\n+            }\n+        }\n+        return subscriberMethods;\n+    }\n+\n+    private FindState prepareFindState() {\n+        synchronized (FIND_STATE_POOL) {\n+            for (int i = 0; i < POOL_SIZE; i++) {\n+                FindState state = FIND_STATE_POOL[i];\n+                if (state != null) {\n+                    FIND_STATE_POOL[i] = null;\n+                    return state;\n+                }\n+            }\n+        }\n+        return new FindState();\n     }\n \n     private SubscriberInfo getSubscriberInfo(FindState findState) {\n@@ -115,13 +145,13 @@ private SubscriberInfo getSubscriberInfo(FindState findState) {\n     }\n \n     private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {\n-        FindState findState = new FindState();\n+        FindState findState = prepareFindState();\n         findState.initForSubscriber(subscriberClass);\n         while (findState.clazz != null) {\n             findUsingReflectionInSingleClass(findState);\n             findState.moveToSuperclass();\n         }\n-        return findState.subscriberMethods;\n+        return getMethodsAndRelease(findState);\n     }\n \n     private void findUsingReflectionInSingleClass(FindState findState) {\n@@ -171,24 +201,29 @@ static void clearCaches() {\n         }\n     }\n \n-    class FindState {\n+    static class FindState {\n         final List<SubscriberMethod> subscriberMethods = new ArrayList<SubscriberMethod>();\n         final Map<String, Class> eventTypesFound = new HashMap<String, Class>();\n         final StringBuilder methodKeyBuilder = new StringBuilder();\n+\n         Class<?> subscriberClass;\n         Class<?> clazz;\n         String clazzName;\n         boolean skipSuperClasses;\n-        public SubscriberInfo subscriberInfo;\n+        SubscriberInfo subscriberInfo;\n \n         void initForSubscriber(Class<?> subscriberClass) {\n             this.subscriberClass = clazz = subscriberClass;\n         }\n \n         void recycle() {\n             subscriberMethods.clear();\n-            methodKeyBuilder.setLength(0);\n             eventTypesFound.clear();\n+            methodKeyBuilder.setLength(0);\n+            subscriberClass = null;\n+            clazz = null;\n+            skipSuperClasses = false;\n+            subscriberInfo = null;\n         }\n \n         boolean checkAdd(Method method, Class<?> eventType) {",
      "parent_sha": "db56e6e41250c1e35d788d37acb85f20841dbd30"
    }
  },
  {
    "oid": "c6f999d4c948c89711eab7457b05b41e5a174510",
    "message": "ignore BRIDGE and SYNTHETIC methods (issue #76)",
    "date": "2014-11-07T18:00:42Z",
    "url": "https://github.com/greenrobot/EventBus/commit/c6f999d4c948c89711eab7457b05b41e5a174510",
    "details": {
      "sha": "eab8bbd42cff910bc9d1076a240668655e34f011",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/c6f999d4c948c89711eab7457b05b41e5a174510/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/c6f999d4c948c89711eab7457b05b41e5a174510/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=c6f999d4c948c89711eab7457b05b41e5a174510",
      "patch": "@@ -15,6 +15,8 @@\n  */\n package de.greenrobot.event;\n \n+import android.util.Log;\n+\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n@@ -24,10 +26,16 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import android.util.Log;\n-\n class SubscriberMethodFinder {\n-    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC;\n+    /*\n+     * In newer class files, compilers may add methods. Those are called bridge or synthetic methods.\n+     * EventBus must ignore both. There modifiers are not public but defined in the Java class file format:\n+     * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1\n+     */\n+    private static final int BRIDGE = 0x40;\n+    private static final int SYNTHETIC = 0x1000;\n+\n+    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;\n     private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();\n     private static final Map<Class<?>, Class<?>> skipMethodVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();\n ",
      "parent_sha": "4cdd420d4ec26de6cedb444e7f6ec129d70b2b20"
    }
  },
  {
    "oid": "d2f950940547a74f0b7eed484ed6c76074606cfd",
    "message": "minor formatting, javadoc, and rename",
    "date": "2015-11-18T12:19:30Z",
    "url": "https://github.com/greenrobot/EventBus/commit/d2f950940547a74f0b7eed484ed6c76074606cfd",
    "details": {
      "sha": "c333171dc61a391b6223315629eedd0f057b82b6",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/d2f950940547a74f0b7eed484ed6c76074606cfd/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/d2f950940547a74f0b7eed484ed6c76074606cfd/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=d2f950940547a74f0b7eed484ed6c76074606cfd",
      "patch": "@@ -6,7 +6,6 @@\n import javax.annotation.processing.Messager;\n import javax.annotation.processing.RoundEnvironment;\n import javax.annotation.processing.SupportedAnnotationTypes;\n-import javax.annotation.processing.SupportedSourceVersion;\n import javax.lang.model.SourceVersion;\n import javax.lang.model.element.Element;\n import javax.lang.model.element.ExecutableElement;\n@@ -30,6 +29,8 @@\n @SupportedAnnotationTypes(\"de.greenrobot.event.Subscribe\")\n public class EventBusAnnotationProcessor extends AbstractProcessor {\n     public static final String CLASS_POSTFIX = \"_EventBusInfo\";\n+\n+    /** Found subscriber methods for a class (without superclasses). */\n     private final Map<TypeElement, List<ExecutableElement>> methodsByClass =\n             new HashMap<TypeElement, List<ExecutableElement>>();\n     private final Set<TypeElement> classesToSkip = new HashSet<TypeElement>();\n@@ -87,7 +88,7 @@ private void collectSubscribers(Set<? extends TypeElement> annotations, RoundEnv\n             for (Element element : elements) {\n                 if (element instanceof ExecutableElement) {\n                     ExecutableElement method = (ExecutableElement) element;\n-                    if (checkHasErrors(method, messager)) {\n+                    if (checkHasNoErrors(method, messager)) {\n                         Element classElement = method.getEnclosingElement();\n                         List<ExecutableElement> methods = methodsByClass.get(classElement);\n                         if (methods == null) {\n@@ -103,7 +104,7 @@ private void collectSubscribers(Set<? extends TypeElement> annotations, RoundEnv\n         }\n     }\n \n-    private boolean checkHasErrors(ExecutableElement element, Messager messager) {\n+    private boolean checkHasNoErrors(ExecutableElement element, Messager messager) {\n         if (element.getModifiers().contains(Modifier.STATIC)) {\n             messager.printMessage(Diagnostic.Kind.ERROR, \"Subscriber method must not be static\", element);\n             return false;\n@@ -209,7 +210,7 @@ private void writeSources() {\n                 writer.write(\"import de.greenrobot.event.ThreadMode;\\n\\n\");\n                 writer.write(\"/** This class is generated by EventBus, do not edit. */\\n\");\n                 writer.write(\"public class \" + infoClassName + \" extends SubscriberInfo {\\n\");\n-//                writer.write(\"\\nstatic {new Exception(\\\"\" + infoClassName + \"created\\\").printStackTrace();}\\n\\n\");\n+                // writer.write(\"\\nstatic {new Exception(\\\"\" + infoClassName + \"created\\\").printStackTrace();}\\n\\n\");\n                 writer.write(\"    protected Data createSubscriberData() {\\n\");\n                 writer.write(\"        Class<?> subscriberClass = \" + subscriberClassName + \".class;\\n\");\n                 writer.write(\"        SubscriberMethod[] subscriberMethods = new SubscriberMethod[] {\\n\");\n@@ -272,7 +273,7 @@ private TypeElement nextEntry(List<Map.Entry<TypeElement, List<ExecutableElement\n                 return null;\n             } else {\n                 Map.Entry<TypeElement, List<ExecutableElement>> candidate = entries.get(i);\n-                if(!classesToSkip.contains(candidate.getKey())) {\n+                if (!classesToSkip.contains(candidate.getKey())) {\n                     return candidate.getKey();\n                 }\n             }",
      "parent_sha": "d5117be04565d1bf17cd6231cda9b994dbd82f1f"
    }
  },
  {
    "oid": "ec8a1c2742cdb9f5c01a1d654c9a67a73ebc9dad",
    "message": "methodCache uses Class as key type",
    "date": "2015-12-02T20:32:01Z",
    "url": "https://github.com/greenrobot/EventBus/commit/ec8a1c2742cdb9f5c01a1d654c9a67a73ebc9dad",
    "details": {
      "sha": "b6e6779dde6cfa16b73ddf4baa11ddf2ba5b2f05",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/ec8a1c2742cdb9f5c01a1d654c9a67a73ebc9dad/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/ec8a1c2742cdb9f5c01a1d654c9a67a73ebc9dad/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=ec8a1c2742cdb9f5c01a1d654c9a67a73ebc9dad",
      "patch": "@@ -32,7 +32,7 @@ class SubscriberMethodFinder {\n     private static final int SYNTHETIC = 0x1000;\n \n     private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;\n-    private static final Map<String, List<SubscriberMethod>> METHOD_CACHE = new HashMap<String, List<SubscriberMethod>>();\n+    private static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new HashMap<Class<?>, List<SubscriberMethod>>();\n \n     private final boolean strictMethodVerification;\n     private final boolean ignoreGeneratedIndex;\n@@ -46,10 +46,9 @@ class SubscriberMethodFinder {\n     }\n \n     List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, boolean forceReflection) {\n-        String key = subscriberClass.getName();\n         List<SubscriberMethod> subscriberMethods;\n         synchronized (METHOD_CACHE) {\n-            subscriberMethods = METHOD_CACHE.get(key);\n+            subscriberMethods = METHOD_CACHE.get(subscriberClass);\n         }\n         if (subscriberMethods != null) {\n             return subscriberMethods;\n@@ -64,7 +63,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, boolean f\n                     + \" and its super classes have no public methods with the @Subscribe annotation\");\n         } else {\n             synchronized (METHOD_CACHE) {\n-                METHOD_CACHE.put(key, subscriberMethods);\n+                METHOD_CACHE.put(subscriberClass, subscriberMethods);\n             }\n             return subscriberMethods;\n         }",
      "parent_sha": "562e9fa3478760fd212a56c8472003eeb633bf86"
    }
  },
  {
    "oid": "85f50c178ec11ec74253e40fc8e06a0a95272a20",
    "message": "removed warning",
    "date": "2013-11-17T10:06:10Z",
    "url": "https://github.com/greenrobot/EventBus/commit/85f50c178ec11ec74253e40fc8e06a0a95272a20",
    "details": {
      "sha": "c0bc44524526e709eece7743aa8ea872b309fc71",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/85f50c178ec11ec74253e40fc8e06a0a95272a20/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusOrderedSubscriptionsTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/85f50c178ec11ec74253e40fc8e06a0a95272a20/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusOrderedSubscriptionsTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusOrderedSubscriptionsTest.java?ref=85f50c178ec11ec74253e40fc8e06a0a95272a20",
      "patch": "@@ -39,7 +39,7 @@ public void testOrderedMainThread() {\n     }\n \n     public void testOrderedBackgroundThread() {\n-        runTestOrdered(new Integer(42));\n+        runTestOrdered(Integer.valueOf(42));\n     }\n \n     protected void runTestOrdered(Object event) {",
      "parent_sha": "5864e4af2706b8fea139ff703284406e35667b83"
    }
  },
  {
    "oid": "a6a2d3347a41862f51e34da9cd19a5b1d23d9540",
    "message": "make testSubscribeUnSubscribeAndPostMixedEventType less intense, but\nfaster",
    "date": "2012-08-28T17:02:55Z",
    "url": "https://github.com/greenrobot/EventBus/commit/a6a2d3347a41862f51e34da9cd19a5b1d23d9540",
    "details": {
      "sha": "b68e86b97ba3f3e892a9330d0976e3166aed3077",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusMultithreadedTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/a6a2d3347a41862f51e34da9cd19a5b1d23d9540/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusMultithreadedTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/a6a2d3347a41862f51e34da9cd19a5b1d23d9540/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusMultithreadedTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusMultithreadedTest.java?ref=a6a2d3347a41862f51e34da9cd19a5b1d23d9540",
      "patch": "@@ -73,12 +73,13 @@ public void testSubscribeUnSubscribeAndPostMixedEventType() throws InterruptedEx\n         List<SubscribeUnsubscribeThread> threads = new ArrayList<SubscribeUnsubscribeThread>();\r\n \r\n         // Debug.startMethodTracing(\"testSubscribeUnSubscribeAndPostMixedEventType\");\r\n-        for (int i = 0; i < 10; i++) {\r\n+        for (int i = 0; i < 5; i++) {\r\n             SubscribeUnsubscribeThread thread = new SubscribeUnsubscribeThread();\r\n             thread.start();\r\n             threads.add(thread);\r\n         }\r\n-        runThreadsMixedEventType(10);\r\n+        // This test takes a bit longer, so just use fraction the regular count\r\n+        runThreadsMixedEventType(COUNT / 4, 5);\r\n         for (SubscribeUnsubscribeThread thread : threads) {\r\n             thread.shutdown();\r\n         }\r\n@@ -107,9 +108,13 @@ private void runThreadsSingleEventType(int threadCount) throws InterruptedExcept\n     }\r\n \r\n     private void runThreadsMixedEventType(int threadCount) throws InterruptedException {\r\n+        runThreadsMixedEventType(COUNT, threadCount);\r\n+    }\r\n+\r\n+    private void runThreadsMixedEventType(int count, int threadCount) throws InterruptedException {\r\n         eventBus.register(this);\r\n         int eventTypeCount = 3;\r\n-        int iterations = COUNT / threadCount / eventTypeCount;\r\n+        int iterations = count / threadCount / eventTypeCount;\r\n \r\n         CountDownLatch latch = new CountDownLatch(eventTypeCount * threadCount + 1);\r\n         List<PosterThread> threadsString = startThreads(latch, threadCount, iterations, \"Hello\");\r",
      "parent_sha": "91017d0bf842b3c0df3c791542f5627916928393"
    }
  },
  {
    "oid": "e4f7ea1d27b691ca0a08434c249483017d9a0cc2",
    "message": "SystemOutLogger etc.",
    "date": "2017-09-16T10:54:43Z",
    "url": "https://github.com/greenrobot/EventBus/commit/e4f7ea1d27b691ca0a08434c249483017d9a0cc2",
    "details": {
      "sha": "897d437be7337bec393d2c65844074932c73ddfa",
      "filename": "EventBus/src/de/greenrobot/event/Logger.java",
      "status": "modified",
      "additions": 31,
      "deletions": 4,
      "changes": 35,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/e4f7ea1d27b691ca0a08434c249483017d9a0cc2/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/e4f7ea1d27b691ca0a08434c249483017d9a0cc2/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java?ref=e4f7ea1d27b691ca0a08434c249483017d9a0cc2",
      "patch": "@@ -5,7 +5,7 @@\n import java.util.logging.Level;\n \n public abstract class Logger {\n-    private static final boolean useAndroidLog;\n+    private static final boolean ANDROID_LOG_AVAILABLE;\n \n     static {\n         boolean android = false;\n@@ -14,14 +14,18 @@ public abstract class Logger {\n         } catch (ClassNotFoundException e) {\n             // OK\n         }\n-        useAndroidLog = android;\n+        ANDROID_LOG_AVAILABLE = android;\n+    }\n+\n+    public static boolean isAndroidLogAvailable() {\n+        return ANDROID_LOG_AVAILABLE;\n     }\n \n     public static Logger create(String tag) {\n-        if (useAndroidLog) {\n+        if (ANDROID_LOG_AVAILABLE) {\n             return new AndroidLogger(tag);\n         } else {\n-            return new JavaLogger(tag);\n+            return new SystemOutLogger();\n         }\n     }\n \n@@ -91,13 +95,36 @@ public boolean isLoggable(Level level) {\n \n         @Override\n         public void log(Level level, String msg) {\n+            // TODO Replace logged method with caller method\n             logger.log(level, msg);\n         }\n \n         @Override\n         public void log(Level level, String msg, Throwable th) {\n+            // TODO Replace logged method with caller method\n             logger.log(level, msg, th);\n         }\n \n     }\n+\n+    public static class SystemOutLogger extends Logger {\n+\n+        @Override\n+        public boolean isLoggable(Level level) {\n+            return true;\n+        }\n+\n+        @Override\n+        public void log(Level level, String msg) {\n+            System.out.println(\"[\" + level + \"] \" + msg);\n+        }\n+\n+        @Override\n+        public void log(Level level, String msg, Throwable th) {\n+            System.out.println(\"[\" + level + \"] \" + msg);\n+            th.printStackTrace(System.out);\n+        }\n+\n+    }\n+\n }",
      "parent_sha": "b034e2c0ecf9e07013a559d1f57c229dc0ea66ff"
    }
  },
  {
    "oid": "866138356e718d4ce8a7d3e08826e070413357e8",
    "message": "AbstractEventBusTest just extends TestCase, no need for Application",
    "date": "2013-11-17T08:25:26Z",
    "url": "https://github.com/greenrobot/EventBus/commit/866138356e718d4ce8a7d3e08826e070413357e8",
    "details": {
      "sha": "d9fed0dd877822066cff1ee68aeb864fbe3d8080",
      "filename": "EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/866138356e718d4ce8a7d3e08826e070413357e8/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FAbstractEventBusTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/866138356e718d4ce8a7d3e08826e070413357e8/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FAbstractEventBusTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FAbstractEventBusTest.java?ref=866138356e718d4ce8a7d3e08826e070413357e8",
      "patch": "@@ -21,20 +21,19 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import junit.framework.TestCase;\n import android.annotation.SuppressLint;\n-import android.app.Application;\n import android.os.Handler;\n import android.os.Looper;\n import android.os.Message;\n-import android.test.ApplicationTestCase;\n import de.greenrobot.event.EventBus;\n \n /**\n  * @author Markus Junginger, greenrobot\n  */\n-public class AbstractEventBusTest extends ApplicationTestCase<Application> {\n+public class AbstractEventBusTest extends TestCase {\n     /** Activates long(er) running tests e.g. testing multi-threading more throughly.  */\n-    protected static final boolean LONG_TESTS = true;\n+    protected static final boolean LONG_TESTS = false;\n \n     protected EventBus eventBus;\n \n@@ -51,7 +50,6 @@ public AbstractEventBusTest() {\n     }\n \n     public AbstractEventBusTest(boolean collectEventsReceived) {\n-        super(Application.class);\n         if (collectEventsReceived) {\n             eventsReceived = new CopyOnWriteArrayList<Object>();\n         } else {\n@@ -72,7 +70,7 @@ protected void postInMainThread(Object event) {\n         mainPoster.post(event);\n     }\n \n-    protected void waitForEventCount(int expectedCount, int maxMillis) throws InterruptedException {\n+    protected void waitForEventCount(int expectedCount, int maxMillis) {\n         for (int i = 0; i < maxMillis; i++) {\n             int currentCount = eventCount.get();\n             if (currentCount == expectedCount) {\n@@ -81,7 +79,11 @@ protected void waitForEventCount(int expectedCount, int maxMillis) throws Interr\n                 fail(\"Current count (\" + currentCount + \") is already higher than expected count (\" + expectedCount\n                         + \")\");\n             } else {\n-                Thread.sleep(1);\n+                try {\n+                    Thread.sleep(1);\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n             }\n         }\n         assertEquals(expectedCount, eventCount.get());",
      "parent_sha": "4273898ddb4d69c1d97b73ce6debb94305816eb2"
    }
  },
  {
    "oid": "0be66fb1b12c480a3247992febe0a9ea52a193c8",
    "message": "Do not crash if using MAIN_ORDERED on non-Android.\n\nTemporarily just directly invoke the subscriber if no main thread poster\nis available. Technically this breaks the promised decoupling of poster\nand subscriber.",
    "date": "2017-09-19T09:11:37Z",
    "url": "https://github.com/greenrobot/EventBus/commit/0be66fb1b12c480a3247992febe0a9ea52a193c8",
    "details": {
      "sha": "247cbb270a53694ba7d759f81967cf1963834a3d",
      "filename": "EventBus/src/org/greenrobot/eventbus/EventBus.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/0be66fb1b12c480a3247992febe0a9ea52a193c8/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/0be66fb1b12c480a3247992febe0a9ea52a193c8/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBus.java?ref=0be66fb1b12c480a3247992febe0a9ea52a193c8",
      "patch": "@@ -437,7 +437,12 @@ private void postToSubscription(Subscription subscription, Object event, boolean\n                 }\n                 break;\n             case MAIN_ORDERED:\n-                mainThreadPoster.enqueue(subscription, event);\n+                if (mainThreadPoster != null) {\n+                    mainThreadPoster.enqueue(subscription, event);\n+                } else {\n+                    // temporary: technically not correct as poster not decoupled from subscriber\n+                    invokeSubscriber(subscription, event);\n+                }\n                 break;\n             case BACKGROUND:\n                 if (isMainThread) {",
      "parent_sha": "19c6edb2ce5c1e8ed995423ad8ab34af37e1f057"
    }
  },
  {
    "oid": "c536b31475ddfb02c44887c590785575d2ef4ba1",
    "message": "fixed JavaDoc for SubscriberExceptionEvent",
    "date": "2012-08-30T09:09:59Z",
    "url": "https://github.com/greenrobot/EventBus/commit/c536b31475ddfb02c44887c590785575d2ef4ba1",
    "details": {
      "sha": "dba5364303d24f32731770170af27ccfd34f8f99",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberExceptionEvent.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/c536b31475ddfb02c44887c590785575d2ef4ba1/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberExceptionEvent.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/c536b31475ddfb02c44887c590785575d2ef4ba1/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberExceptionEvent.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberExceptionEvent.java?ref=c536b31475ddfb02c44887c590785575d2ef4ba1",
      "patch": "@@ -16,8 +16,7 @@\n package de.greenrobot.event;\r\n \r\n /**\r\n- * TODO Implement a consistent exception handling. One part of this could be posting this class as event when the\r\n- * background thread or async poster step on an exception.\r\n+ * This Event is posted by EventBus when an exception occurs inside a subscriber's event handling method.\r\n  * \r\n  * @author Markus\r\n  */\r",
      "parent_sha": "bcc2a41bd025748f80c30f473550f7a67eb8b097"
    }
  },
  {
    "oid": "be04a2de66981e819f40afd389e417e98c94c7da",
    "message": "work around for broken Class.getDeclaredMethods() in Android (should fix #149)",
    "date": "2015-11-02T19:50:48Z",
    "url": "https://github.com/greenrobot/EventBus/commit/be04a2de66981e819f40afd389e417e98c94c7da",
    "details": {
      "sha": "a1c2c12bed78d9657cb17bc5e7aa583d0f1cfafe",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 71,
      "deletions": 42,
      "changes": 113,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/be04a2de66981e819f40afd389e417e98c94c7da/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/be04a2de66981e819f40afd389e417e98c94c7da/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=be04a2de66981e819f40afd389e417e98c94c7da",
      "patch": "@@ -21,7 +21,6 @@\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -62,7 +61,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n         }\n         subscriberMethods = new ArrayList<SubscriberMethod>();\n         Class<?> clazz = subscriberClass;\n-        HashSet<String> eventTypesFound = new HashSet<String>();\n+        HashMap<String, Class> eventTypesFound = new HashMap<String, Class>();\n         StringBuilder methodKeyBuilder = new StringBuilder();\n         while (clazz != null) {\n             String name = clazz.getName();\n@@ -72,46 +71,18 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n             }\n \n             // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)\n-            Method[] methods = clazz.getDeclaredMethods();\n-            for (Method method : methods) {\n-                String methodName = method.getName();\n-                if (methodName.startsWith(ON_EVENT_METHOD_NAME)) {\n-                    int modifiers = method.getModifiers();\n-                    if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {\n-                        Class<?>[] parameterTypes = method.getParameterTypes();\n-                        if (parameterTypes.length == 1) {\n-                            String modifierString = methodName.substring(ON_EVENT_METHOD_NAME.length());\n-                            ThreadMode threadMode;\n-                            if (modifierString.length() == 0) {\n-                                threadMode = ThreadMode.PostThread;\n-                            } else if (modifierString.equals(\"MainThread\")) {\n-                                threadMode = ThreadMode.MainThread;\n-                            } else if (modifierString.equals(\"BackgroundThread\")) {\n-                                threadMode = ThreadMode.BackgroundThread;\n-                            } else if (modifierString.equals(\"Async\")) {\n-                                threadMode = ThreadMode.Async;\n-                            } else {\n-                                if (skipMethodVerificationForClasses.containsKey(clazz)) {\n-                                    continue;\n-                                } else {\n-                                    throw new EventBusException(\"Illegal onEvent method, check for typos: \" + method);\n-                                }\n-                            }\n-                            Class<?> eventType = parameterTypes[0];\n-                            methodKeyBuilder.setLength(0);\n-                            methodKeyBuilder.append(methodName);\n-                            methodKeyBuilder.append('>').append(eventType.getName());\n-                            String methodKey = methodKeyBuilder.toString();\n-                            if (eventTypesFound.add(methodKey)) {\n-                                // Only add if not already found in a sub class\n-                                subscriberMethods.add(new SubscriberMethod(method, threadMode, eventType));\n-                            }\n-                        }\n-                    } else if (!skipMethodVerificationForClasses.containsKey(clazz)) {\n-                        Log.d(EventBus.TAG, \"Skipping method (not public, static or abstract): \" + clazz + \".\"\n-                                + methodName);\n-                    }\n-                }\n+            try {\n+                // This is faster than getMethods, especially when subscribers a fat classes like Activities\n+                Method[] methods = clazz.getDeclaredMethods();\n+                filterSubscriberMethods(subscriberMethods, eventTypesFound, methodKeyBuilder, methods);\n+            } catch (Throwable th) {\n+                th.printStackTrace();\n+                // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149\n+                Method[] methods = subscriberClass.getMethods();\n+                subscriberMethods.clear();\n+                eventTypesFound.clear();\n+                filterSubscriberMethods(subscriberMethods, eventTypesFound, methodKeyBuilder, methods);\n+                break;\n             }\n             clazz = clazz.getSuperclass();\n         }\n@@ -126,6 +97,64 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n         }\n     }\n \n+    private void filterSubscriberMethods(List<SubscriberMethod> subscriberMethods,\n+                                         HashMap<String, Class> eventTypesFound, StringBuilder methodKeyBuilder,\n+                                         Method[] methods) {\n+        for (Method method : methods) {\n+            String methodName = method.getName();\n+            if (methodName.startsWith(ON_EVENT_METHOD_NAME)) {\n+                int modifiers = method.getModifiers();\n+                Class<?> methodClass = method.getDeclaringClass();\n+                if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {\n+                    Class<?>[] parameterTypes = method.getParameterTypes();\n+                    if (parameterTypes.length == 1) {\n+                        ThreadMode threadMode = getThreadMode(methodClass, method, methodName);\n+                        if (threadMode == null) {\n+                            continue;\n+                        }\n+                        Class<?> eventType = parameterTypes[0];\n+                        methodKeyBuilder.setLength(0);\n+                        methodKeyBuilder.append(methodName);\n+                        methodKeyBuilder.append('>').append(eventType.getName());\n+                        String methodKey = methodKeyBuilder.toString();\n+                        Class methodClassOld = eventTypesFound.put(methodKey, methodClass);\n+                        if (methodClassOld == null || methodClassOld.isAssignableFrom(methodClass)) {\n+                            // Only add if not already found in a sub class\n+                            subscriberMethods.add(new SubscriberMethod(method, threadMode, eventType));\n+                        } else {\n+                            // Revert the put, old class is further down the class hierarchy\n+                            eventTypesFound.put(methodKey, methodClassOld);\n+                        }\n+                    }\n+                } else if (!skipMethodVerificationForClasses.containsKey(methodClass)) {\n+                    Log.d(EventBus.TAG, \"Skipping method (not public, static or abstract): \" + methodClass + \".\"\n+                            + methodName);\n+                }\n+            }\n+        }\n+    }\n+\n+    private ThreadMode getThreadMode(Class<?> clazz, Method method, String methodName) {\n+        String modifierString = methodName.substring(ON_EVENT_METHOD_NAME.length());\n+        ThreadMode threadMode;\n+        if (modifierString.length() == 0) {\n+            threadMode = ThreadMode.PostThread;\n+        } else if (modifierString.equals(\"MainThread\")) {\n+            threadMode = ThreadMode.MainThread;\n+        } else if (modifierString.equals(\"BackgroundThread\")) {\n+            threadMode = ThreadMode.BackgroundThread;\n+        } else if (modifierString.equals(\"Async\")) {\n+            threadMode = ThreadMode.Async;\n+        } else {\n+            if (!skipMethodVerificationForClasses.containsKey(clazz)) {\n+                throw new EventBusException(\"Illegal onEvent method, check for typos: \" + method);\n+            } else {\n+                threadMode = null;\n+            }\n+        }\n+        return threadMode;\n+    }\n+\n     static void clearCaches() {\n         synchronized (methodCache) {\n             methodCache.clear();",
      "parent_sha": "e25cfa4d1b719637269ab18da5087bbc7baaa630"
    }
  },
  {
    "oid": "7b38ffeda5415363a0ef5c3ad9f6dc2a43bb7df7",
    "message": "renamed tests, too",
    "date": "2013-11-17T21:20:13Z",
    "url": "https://github.com/greenrobot/EventBus/commit/7b38ffeda5415363a0ef5c3ad9f6dc2a43bb7df7",
    "details": {
      "sha": "5d10ad14ed2b1fbd8fe3cd70dce0173894c73fd9",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusCancelEventDeliveryTest.java",
      "status": "renamed",
      "additions": 18,
      "deletions": 17,
      "changes": 35,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/7b38ffeda5415363a0ef5c3ad9f6dc2a43bb7df7/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusCancelEventDeliveryTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/7b38ffeda5415363a0ef5c3ad9f6dc2a43bb7df7/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusCancelEventDeliveryTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusCancelEventDeliveryTest.java?ref=7b38ffeda5415363a0ef5c3ad9f6dc2a43bb7df7",
      "patch": "@@ -23,33 +23,33 @@\n /**\n  * @author Markus Junginger, greenrobot\n  */\n-public class EventBusAbortEventDeliveryTest extends AbstractEventBusTest {\n+public class EventBusCancelEventDeliveryTest extends AbstractEventBusTest {\n \n     private Throwable failed;\n \n-    public void testAbort() {\n-        Subscriber aborter = new Subscriber(true);\n+    public void testCancel() {\n+        Subscriber canceler = new Subscriber(true);\n         eventBus.register(new Subscriber(false));\n-        eventBus.register(aborter, 1);\n+        eventBus.register(canceler, 1);\n         eventBus.register(new Subscriber(false));\n         eventBus.post(\"42\");\n         assertEquals(1, eventCount.intValue());\n \n-        eventBus.unregister(aborter);\n+        eventBus.unregister(canceler);\n         eventBus.post(\"42\");\n         assertEquals(1 + 2, eventCount.intValue());\n     }\n \n-    public void testAbortInBetween() {\n-        Subscriber aborter = new Subscriber(true);\n-        eventBus.register(aborter, 2);\n+    public void testCancelInBetween() {\n+        Subscriber canceler = new Subscriber(true);\n+        eventBus.register(canceler, 2);\n         eventBus.register(new Subscriber(false), 1);\n         eventBus.register(new Subscriber(false), 3);\n         eventBus.post(\"42\");\n         assertEquals(2, eventCount.intValue());\n     }\n \n-    public void testAbortOutsideEventHandler() {\n+    public void testCancelOutsideEventHandler() {\n         try {\n             eventBus.cancelEventDelivery(this);\n             fail(\"Should have thrown\");\n@@ -58,15 +58,15 @@ public void testAbortOutsideEventHandler() {\n         }\n     }\n \n-    public void testAbortWrongEvent() {\n-        eventBus.register(new SubscriberAbortOtherEvent());\n+    public void testCancelWrongEvent() {\n+        eventBus.register(new SubscriberCancelOtherEvent());\n         eventBus.post(\"42\");\n         assertEquals(0, eventCount.intValue());\n         assertNotNull(failed);\n     }\n \n     @UiThreadTest\n-    public void testAbortInMainThread() {\n+    public void testCancelInMainThread() {\n         SubscriberMainThread subscriber = new SubscriberMainThread();\n         eventBus.register(subscriber);\n         eventBus.post(\"42\");\n@@ -76,21 +76,21 @@ public void testAbortInMainThread() {\n     }\n \n     class Subscriber {\n-        private boolean abort;\n+        private boolean cancel;\n \n-        public Subscriber(boolean abort) {\n-            this.abort = abort;\n+        public Subscriber(boolean cancel) {\n+            this.cancel = cancel;\n         }\n \n         public void onEvent(String event) {\n             trackEvent(event);\n-            if (abort) {\n+            if (cancel) {\n                 eventBus.cancelEventDelivery(event);\n             }\n         }\n     }\n \n-    class SubscriberAbortOtherEvent {\n+    class SubscriberCancelOtherEvent {\n         public void onEvent(String event) {\n             try {\n                 eventBus.cancelEventDelivery(this);\n@@ -102,6 +102,7 @@ public void onEvent(String event) {\n \n     class SubscriberMainThread {\n         CountDownLatch done = new CountDownLatch(1);\n+\n         public void onEventMainThread(String event) {\n             try {\n                 eventBus.cancelEventDelivery(event);",
      "previous_filename": "EventBusTest/src/de/greenrobot/event/test/EventBusAbortEventDeliveryTest.java",
      "parent_sha": "08eb6635f5ea77eee6608c49ac12d5c22fe7c481"
    }
  },
  {
    "oid": "0c289c664ff30f3412d3d2edf78766a1eadb9f08",
    "message": "minor improvements for generated info classes",
    "date": "2015-11-27T20:19:42Z",
    "url": "https://github.com/greenrobot/EventBus/commit/0c289c664ff30f3412d3d2edf78766a1eadb9f08",
    "details": {
      "sha": "b92492e2f891a71fb18dab1b9e5921914fb2d11b",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/0c289c664ff30f3412d3d2edf78766a1eadb9f08/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/0c289c664ff30f3412d3d2edf78766a1eadb9f08/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=0c289c664ff30f3412d3d2edf78766a1eadb9f08",
      "patch": "@@ -215,14 +215,13 @@ private void writeSources() {\n                 TypeElement nextEntry = nextEntry(entries, entry, i);\n                 String next = getNextValue(myPackage, nextEntry);\n                 String infoSuperClass = getSuperclassInfoClass(subscriberClass, myPackage);\n-                writer.write(\"        super(\" + subscriberClassName + \".class, \" + infoSuperClass + \", \" + next + \");\\n\");\n+                writeLine(writer, 2, \"super(\" + subscriberClassName + \".class,\", infoSuperClass + \",\", next + \");\");\n                 writer.write(\"    }\\n\\n\");\n                 writer.write(\"    protected SubscriberMethod[] createSubscriberMethods() {\\n\");\n-                writer.write(\"        SubscriberMethod[] subscriberMethods = new SubscriberMethod[] {\\n\");\n+                writer.write(\"        return new SubscriberMethod[] {\\n\");\n                 Set<String> methodSignatures = new HashSet<String>();\n                 writeMethods(writer, entry.getValue(), methodSignatures);\n                 writer.write(\"        };\\n\");\n-                writer.write(\"        return subscriberMethods;\\n\");\n                 writer.write(\"    }\\n}\\n\");\n             } catch (IOException e) {\n                 throw new RuntimeException(\"Could not write source for \" + subscriberClass.getQualifiedName(), e);",
      "parent_sha": "4e8259ccc0e7033e79151741f087543a8beddb5b"
    }
  },
  {
    "oid": "44b7004cf37ff4c2c5ce1b649d58a3a443fca891",
    "message": "We cannot get @Subscribe annotations from anonymous classes, so fail fast",
    "date": "2015-02-25T22:25:22Z",
    "url": "https://github.com/greenrobot/EventBus/commit/44b7004cf37ff4c2c5ce1b649d58a3a443fca891",
    "details": {
      "sha": "b901a209c44021070b7b1439a18ad10125a562d0",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/44b7004cf37ff4c2c5ce1b649d58a3a443fca891/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/44b7004cf37ff4c2c5ce1b649d58a3a443fca891/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=44b7004cf37ff4c2c5ce1b649d58a3a443fca891",
      "patch": "@@ -160,7 +160,12 @@ public void registerSticky(Object subscriber, int priority) {\n     }\n \n     private synchronized void register(Object subscriber, boolean sticky, int priority) {\n-        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());\n+        Class<?> subscriberClass = subscriber.getClass();\n+        if(subscriberClass.isAnonymousClass()) {\n+            // We cannot get @Subscribe annotations from anonymous classes, so fail fast\n+            throw new EventBusException(\"Anonymous class cannot be registered: \"+ subscriberClass);\n+        }\n+        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n         for (SubscriberMethod subscriberMethod : subscriberMethods) {\n             subscribe(subscriber, subscriberMethod, sticky, priority);\n         }",
      "parent_sha": "6a37ce715294cccc57586fd4f00352319c0899f7"
    }
  },
  {
    "oid": "b2f02b92297066d56a3be2d002e1a3140992c4e7",
    "message": "typo with unsubscribeByEventType",
    "date": "2015-06-03T20:08:43Z",
    "url": "https://github.com/greenrobot/EventBus/commit/b2f02b92297066d56a3be2d002e1a3140992c4e7",
    "details": {
      "sha": "33817aa855ee796ee803282e3cf08a2a2039d44b",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/b2f02b92297066d56a3be2d002e1a3140992c4e7/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/b2f02b92297066d56a3be2d002e1a3140992c4e7/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=b2f02b92297066d56a3be2d002e1a3140992c4e7",
      "patch": "@@ -215,7 +215,7 @@ public synchronized boolean isRegistered(Object subscriber) {\n     }\n \n     /** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */\n-    private void unubscribeByEventType(Object subscriber, Class<?> eventType) {\n+    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {\n         List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n         if (subscriptions != null) {\n             // Got to synchronize to avoid shifted positions when adding/removing concurrently\n@@ -239,7 +239,7 @@ public synchronized void unregister(Object subscriber) {\n         List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);\n         if (subscribedTypes != null) {\n             for (Class<?> eventType : subscribedTypes) {\n-                unubscribeByEventType(subscriber, eventType);\n+                unsubscribeByEventType(subscriber, eventType);\n             }\n             typesBySubscriber.remove(subscriber);\n         } else {",
      "parent_sha": "0b3fbb9ba26ee98d4337c13bc96775ea67f93d58"
    }
  },
  {
    "oid": "912e688d3e146c356d8cf1bda0b1257e46995107",
    "message": "missing synchronized in clearCaches",
    "date": "2013-11-16T16:56:57Z",
    "url": "https://github.com/greenrobot/EventBus/commit/912e688d3e146c356d8cf1bda0b1257e46995107",
    "details": {
      "sha": "63904eea7c0b657f3ee1d310091bd8532dce3269",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 113,
      "deletions": 111,
      "changes": 224,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/912e688d3e146c356d8cf1bda0b1257e46995107/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/912e688d3e146c356d8cf1bda0b1257e46995107/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=912e688d3e146c356d8cf1bda0b1257e46995107",
      "patch": "@@ -1,111 +1,113 @@\n-/*\r\n- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package de.greenrobot.event;\r\n-\r\n-import java.lang.reflect.Method;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.concurrent.ConcurrentHashMap;\r\n-\r\n-class SubscriberMethodFinder {\r\n-    private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();\r\n-    private static final Map<Class<?>, Class<?>> skipMethodNameVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();\r\n-\r\n-    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String eventMethodName) {\r\n-        String key = subscriberClass.getName() + '.' + eventMethodName;\r\n-        List<SubscriberMethod> subscriberMethods;\r\n-        synchronized (methodCache) {\r\n-            subscriberMethods = methodCache.get(key);\r\n-        }\r\n-        if (subscriberMethods != null) {\r\n-            return subscriberMethods;\r\n-        }\r\n-        subscriberMethods = new ArrayList<SubscriberMethod>();\r\n-        Class<?> clazz = subscriberClass;\r\n-        HashSet<String> eventTypesFound = new HashSet<String>();\r\n-        StringBuilder methodKeyBuilder = new StringBuilder();\r\n-        while (clazz != null) {\r\n-            String name = clazz.getName();\r\n-            if (name.startsWith(\"java.\") || name.startsWith(\"javax.\") || name.startsWith(\"android.\")) {\r\n-                // Skip system classes, this just degrades performance\r\n-                break;\r\n-            }\r\n-\r\n-            Method[] methods = clazz.getDeclaredMethods();\r\n-            for (Method method : methods) {\r\n-                String methodName = method.getName();\r\n-                if (methodName.startsWith(eventMethodName)) {\r\n-                    Class<?>[] parameterTypes = method.getParameterTypes();\r\n-                    if (parameterTypes.length == 1) {\r\n-                        String modifierString = methodName.substring(eventMethodName.length());\r\n-                        ThreadMode threadMode;\r\n-                        if (modifierString.length() == 0) {\r\n-                            threadMode = ThreadMode.PostThread;\r\n-                        } else if (modifierString.equals(\"MainThread\")) {\r\n-                            threadMode = ThreadMode.MainThread;\r\n-                        } else if (modifierString.equals(\"BackgroundThread\")) {\r\n-                            threadMode = ThreadMode.BackgroundThread;\r\n-                        } else if (modifierString.equals(\"Async\")) {\r\n-                            threadMode = ThreadMode.Async;\r\n-                        } else {\r\n-                            if (skipMethodNameVerificationForClasses.containsKey(clazz)) {\r\n-                                continue;\r\n-                            } else {\r\n-                                throw new EventBusException(\"Illegal onEvent method, check for typos: \" + method);\r\n-                            }\r\n-                        }\r\n-                        Class<?> eventType = parameterTypes[0];\r\n-                        methodKeyBuilder.setLength(0);\r\n-                        methodKeyBuilder.append(methodName);\r\n-                        methodKeyBuilder.append('>').append(eventType.getName());\r\n-                        String methodKey = methodKeyBuilder.toString();\r\n-                        if (eventTypesFound.add(methodKey)) {\r\n-                            // Only add if not already found in a sub class\r\n-                            subscriberMethods.add(new SubscriberMethod(method, threadMode, eventType));\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-            clazz = clazz.getSuperclass();\r\n-        }\r\n-        if (subscriberMethods.isEmpty()) {\r\n-            throw new EventBusException(\"Subscriber \" + subscriberClass + \" has no methods called \" + eventMethodName);\r\n-        } else {\r\n-            synchronized (methodCache) {\r\n-                methodCache.put(key, subscriberMethods);\r\n-            }\r\n-            return subscriberMethods;\r\n-        }\r\n-    }\r\n-\r\n-    static void clearCaches() {\r\n-        methodCache.clear();\r\n-    }\r\n-\r\n-    static void skipMethodNameVerificationFor(Class<?> clazz) {\r\n-        if (!methodCache.isEmpty()) {\r\n-            throw new IllegalStateException(\"This method must be called before registering anything\");\r\n-        }\r\n-        skipMethodNameVerificationForClasses.put(clazz, clazz);\r\n-    }\r\n-\r\n-    public static void clearSkipMethodNameVerifications() {\r\n-        skipMethodNameVerificationForClasses.clear();\r\n-    }\r\n-}\r\n+/*\n+ * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package de.greenrobot.event;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+class SubscriberMethodFinder {\n+    private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();\n+    private static final Map<Class<?>, Class<?>> skipMethodNameVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();\n+\n+    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String eventMethodName) {\n+        String key = subscriberClass.getName() + '.' + eventMethodName;\n+        List<SubscriberMethod> subscriberMethods;\n+        synchronized (methodCache) {\n+            subscriberMethods = methodCache.get(key);\n+        }\n+        if (subscriberMethods != null) {\n+            return subscriberMethods;\n+        }\n+        subscriberMethods = new ArrayList<SubscriberMethod>();\n+        Class<?> clazz = subscriberClass;\n+        HashSet<String> eventTypesFound = new HashSet<String>();\n+        StringBuilder methodKeyBuilder = new StringBuilder();\n+        while (clazz != null) {\n+            String name = clazz.getName();\n+            if (name.startsWith(\"java.\") || name.startsWith(\"javax.\") || name.startsWith(\"android.\")) {\n+                // Skip system classes, this just degrades performance\n+                break;\n+            }\n+\n+            Method[] methods = clazz.getDeclaredMethods();\n+            for (Method method : methods) {\n+                String methodName = method.getName();\n+                if (methodName.startsWith(eventMethodName)) {\n+                    Class<?>[] parameterTypes = method.getParameterTypes();\n+                    if (parameterTypes.length == 1) {\n+                        String modifierString = methodName.substring(eventMethodName.length());\n+                        ThreadMode threadMode;\n+                        if (modifierString.length() == 0) {\n+                            threadMode = ThreadMode.PostThread;\n+                        } else if (modifierString.equals(\"MainThread\")) {\n+                            threadMode = ThreadMode.MainThread;\n+                        } else if (modifierString.equals(\"BackgroundThread\")) {\n+                            threadMode = ThreadMode.BackgroundThread;\n+                        } else if (modifierString.equals(\"Async\")) {\n+                            threadMode = ThreadMode.Async;\n+                        } else {\n+                            if (skipMethodNameVerificationForClasses.containsKey(clazz)) {\n+                                continue;\n+                            } else {\n+                                throw new EventBusException(\"Illegal onEvent method, check for typos: \" + method);\n+                            }\n+                        }\n+                        Class<?> eventType = parameterTypes[0];\n+                        methodKeyBuilder.setLength(0);\n+                        methodKeyBuilder.append(methodName);\n+                        methodKeyBuilder.append('>').append(eventType.getName());\n+                        String methodKey = methodKeyBuilder.toString();\n+                        if (eventTypesFound.add(methodKey)) {\n+                            // Only add if not already found in a sub class\n+                            subscriberMethods.add(new SubscriberMethod(method, threadMode, eventType));\n+                        }\n+                    }\n+                }\n+            }\n+            clazz = clazz.getSuperclass();\n+        }\n+        if (subscriberMethods.isEmpty()) {\n+            throw new EventBusException(\"Subscriber \" + subscriberClass + \" has no methods called \" + eventMethodName);\n+        } else {\n+            synchronized (methodCache) {\n+                methodCache.put(key, subscriberMethods);\n+            }\n+            return subscriberMethods;\n+        }\n+    }\n+\n+    static void clearCaches() {\n+        synchronized (methodCache) {\n+            methodCache.clear();\n+        }\n+    }\n+\n+    static void skipMethodNameVerificationFor(Class<?> clazz) {\n+        if (!methodCache.isEmpty()) {\n+            throw new IllegalStateException(\"This method must be called before registering anything\");\n+        }\n+        skipMethodNameVerificationForClasses.put(clazz, clazz);\n+    }\n+\n+    public static void clearSkipMethodNameVerifications() {\n+        skipMethodNameVerificationForClasses.clear();\n+    }\n+}",
      "parent_sha": "0f15331c7bd1045296f191acf29d7aded5d9c861"
    }
  },
  {
    "oid": "f3f2d21823b627630890ebb7b785159e744452f0",
    "message": "fixed skipMethodNameVerificationFor",
    "date": "2012-10-23T12:38:45Z",
    "url": "https://github.com/greenrobot/EventBus/commit/f3f2d21823b627630890ebb7b785159e744452f0",
    "details": {
      "sha": "9c90d5729cd4aec71f279391d4b75f51c4370658",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/f3f2d21823b627630890ebb7b785159e744452f0/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/f3f2d21823b627630890ebb7b785159e744452f0/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=f3f2d21823b627630890ebb7b785159e744452f0",
      "patch": "@@ -94,11 +94,14 @@ public static void clearCaches() {\n     }\r\n \r\n     /**\r\n-     * Configuration method that has to be called public static void skipMethodNameVerificationFor(Class<?> clazz) {\r\n-     * SubscriberMethodFinder.skipMethodNameVerificationFor(clazz); }\r\n-     * \r\n-     * /** For unit test primarily.\r\n+     * Method name verification is done for methods starting with onEvent to avoid typos; using this method you can\r\n+     * exclude subscriber classes from this check.\r\n      */\r\n+    public static void skipMethodNameVerificationFor(Class<?> clazz) {\r\n+        SubscriberMethodFinder.skipMethodNameVerificationFor(clazz);\r\n+    }\r\n+\r\n+    /** For unit test primarily. */\r\n     public static void clearSkipMethodNameVerifications() {\r\n         SubscriberMethodFinder.clearSkipMethodNameVerifications();\r\n     }\r",
      "parent_sha": "cec197f6fc4e9f12584daa608c968e99e51bdfa5"
    }
  },
  {
    "oid": "e47442b684f04b4d346bb1d0af526908fda7cc1c",
    "message": "Replace `getMethods()` with `getDeclaredMethods()`",
    "date": "2014-06-25T08:51:05Z",
    "url": "https://github.com/greenrobot/EventBus/commit/e47442b684f04b4d346bb1d0af526908fda7cc1c",
    "details": {
      "sha": "f4b85e0c3dd376fb3882442b6b94f734cb13b81f",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/e47442b684f04b4d346bb1d0af526908fda7cc1c/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/e47442b684f04b4d346bb1d0af526908fda7cc1c/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=e47442b684f04b4d346bb1d0af526908fda7cc1c",
      "patch": "@@ -52,7 +52,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String ev\n             }\n \n             // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)\n-            Method[] methods = clazz.getMethods();\n+            Method[] methods = clazz.getDeclaredMethods();\n             for (Method method : methods) {\n                 String methodName = method.getName();\n                 if (methodName.startsWith(eventMethodName)) {",
      "parent_sha": "4cdd420d4ec26de6cedb444e7f6ec129d70b2b20"
    }
  },
  {
    "oid": "3670d97835f15d0966e29fb8f52785ca3e87c2af",
    "message": "over-engineering getDefault() (aka item 71 effective Java, 2nd ed.)",
    "date": "2017-12-11T20:02:25Z",
    "url": "https://github.com/greenrobot/EventBus/commit/3670d97835f15d0966e29fb8f52785ca3e87c2af",
    "details": {
      "sha": "e35ecd383925b61a0fcb438bd172472562a2a424",
      "filename": "EventBus/src/org/greenrobot/eventbus/EventBus.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/3670d97835f15d0966e29fb8f52785ca3e87c2af/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/3670d97835f15d0966e29fb8f52785ca3e87c2af/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FEventBus.java?ref=3670d97835f15d0966e29fb8f52785ca3e87c2af",
      "patch": "@@ -78,14 +78,16 @@ protected PostingThreadState initialValue() {\n \n     /** Convenience singleton for apps using a process-wide EventBus instance. */\n     public static EventBus getDefault() {\n-        if (defaultInstance == null) {\n+        EventBus instance = defaultInstance;\n+        if (instance == null) {\n             synchronized (EventBus.class) {\n-                if (defaultInstance == null) {\n-                    defaultInstance = new EventBus();\n+                instance = EventBus.defaultInstance;\n+                if (instance == null) {\n+                    instance = EventBus.defaultInstance = new EventBus();\n                 }\n             }\n         }\n-        return defaultInstance;\n+        return instance;\n     }\n \n     public static EventBusBuilder builder() {",
      "parent_sha": "b98135699ab8bcd9622f74172df22e586850feed"
    }
  },
  {
    "oid": "af056ad10958ddff921e43442bee187396754ff5",
    "message": "methodCache uses Class as key type",
    "date": "2015-12-02T20:27:53Z",
    "url": "https://github.com/greenrobot/EventBus/commit/af056ad10958ddff921e43442bee187396754ff5",
    "details": {
      "sha": "08eb766b74d4fa9864c7f7f11aeb73bdafddcb1e",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/af056ad10958ddff921e43442bee187396754ff5/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/af056ad10958ddff921e43442bee187396754ff5/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=af056ad10958ddff921e43442bee187396754ff5",
      "patch": "@@ -37,7 +37,7 @@ class SubscriberMethodFinder {\n     private static final int SYNTHETIC = 0x1000;\n \n     private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;\n-    private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();\n+    private static final Map<Class<?>, List<SubscriberMethod>> methodCache = new HashMap<Class<?>, List<SubscriberMethod>>();\n \n     private final Map<Class<?>, Class<?>> skipMethodVerificationForClasses;\n \n@@ -51,10 +51,9 @@ class SubscriberMethodFinder {\n     }\n \n     List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n-        String key = subscriberClass.getName();\n         List<SubscriberMethod> subscriberMethods;\n         synchronized (methodCache) {\n-            subscriberMethods = methodCache.get(key);\n+            subscriberMethods = methodCache.get(subscriberClass);\n         }\n         if (subscriberMethods != null) {\n             return subscriberMethods;\n@@ -90,7 +89,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n                     + ON_EVENT_METHOD_NAME);\n         } else {\n             synchronized (methodCache) {\n-                methodCache.put(key, subscriberMethods);\n+                methodCache.put(subscriberClass, subscriberMethods);\n             }\n             return subscriberMethods;\n         }",
      "parent_sha": "365d4b68a7683fec8d33e4516394b4944be2f9fe"
    }
  },
  {
    "oid": "b42003416dc389bc7dd9a85bb8e6db01aa0435e5",
    "message": "use methodKeyBuilder StringBuilder",
    "date": "2012-10-25T06:39:55Z",
    "url": "https://github.com/greenrobot/EventBus/commit/b42003416dc389bc7dd9a85bb8e6db01aa0435e5",
    "details": {
      "sha": "4be3873b58b9c45b83ee61a768c7b471135ef979",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/b42003416dc389bc7dd9a85bb8e6db01aa0435e5/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/b42003416dc389bc7dd9a85bb8e6db01aa0435e5/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=b42003416dc389bc7dd9a85bb8e6db01aa0435e5",
      "patch": "@@ -27,7 +27,6 @@ class SubscriberMethodFinder {\n     private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();\r\n     private static final Map<Class<?>, Class<?>> skipMethodNameVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();\r\n \r\n-    \r\n     List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String eventMethodName) {\r\n         String key = subscriberClass.getName() + '.' + eventMethodName;\r\n         List<SubscriberMethod> subscriberMethods;\r\n@@ -40,6 +39,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String ev\n         subscriberMethods = new ArrayList<SubscriberMethod>();\r\n         Class<?> clazz = subscriberClass;\r\n         HashSet<String> eventTypesFound = new HashSet<String>();\r\n+        StringBuilder methodKeyBuilder = new StringBuilder();\r\n         while (clazz != null) {\r\n             String name = clazz.getName();\r\n             if (name.startsWith(\"java.\") || name.startsWith(\"javax.\") || name.startsWith(\"android.\")) {\r\n@@ -71,7 +71,10 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String ev\n                             }\r\n                         }\r\n                         Class<?> eventType = parameterTypes[0];\r\n-                        String methodKey = methodName + \">\" + eventType.getName();\r\n+                        methodKeyBuilder.setLength(0);\r\n+                        methodKeyBuilder.append(methodName);\r\n+                        methodKeyBuilder.append('>').append(eventType.getName());\r\n+                        String methodKey = methodKeyBuilder.toString();\r\n                         if (eventTypesFound.add(methodKey)) {\r\n                             // Only add if not already found in a sub class\r\n                             subscriberMethods.add(new SubscriberMethod(method, threadMode, eventType));\r\n@@ -90,12 +93,11 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String ev\n             return subscriberMethods;\r\n         }\r\n     }\r\n-    \r\n-    \r\n+\r\n     static void clearCaches() {\r\n         methodCache.clear();\r\n     }\r\n-    \r\n+\r\n     static void skipMethodNameVerificationFor(Class<?> clazz) {\r\n         if (!methodCache.isEmpty()) {\r\n             throw new IllegalStateException(\"This method must be called before registering anything\");\r",
      "parent_sha": "91c451c6755e38140d01ab712d98419489e1f17c"
    }
  },
  {
    "oid": "e510700cc34eca3a1b134cce7892e81c721b3738",
    "message": "using MyEvent in testPostMultipleTimes",
    "date": "2012-08-12T08:28:13Z",
    "url": "https://github.com/greenrobot/EventBus/commit/e510700cc34eca3a1b134cce7892e81c721b3738",
    "details": {
      "sha": "8c0805145d0ecbba1af77130e12a6344a8858ac0",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/e510700cc34eca3a1b134cce7892e81c721b3738/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/e510700cc34eca3a1b134cce7892e81c721b3738/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java?ref=e510700cc34eca3a1b134cce7892e81c721b3738",
      "patch": "@@ -134,20 +134,18 @@ public void testPostWithTwoSubscriber() {\n     }\r\n \r\n     public void testPostMultipleTimes() {\r\n-        eventBus.register(this, String.class);\r\n-        String event = \"Hello\";\r\n+        eventBus.register(this, MyEvent.class);\r\n+        MyEvent event = new MyEvent();\r\n         int count = 1000;\r\n         long start = System.currentTimeMillis();\r\n-        Debug.startMethodTracing(\"testPostMultipleTimes\" + count);\r\n+        // Debug.startMethodTracing(\"testPostMultipleTimes\" + count);\r\n         for (int i = 0; i < count; i++) {\r\n             eventBus.post(event);\r\n         }\r\n-        Debug.stopMethodTracing();\r\n+        // Debug.stopMethodTracing();\r\n         long time = System.currentTimeMillis() - start;\r\n         Log.d(EventBus.TAG, \"Posted \" + count + \" events in \" + time + \"ms\");\r\n-        assertEquals(event, lastStringEvent);\r\n-        assertEquals(count, countStringEvent);\r\n-\r\n+        assertEquals(count, countMyEvent);\r\n     }\r\n \r\n     public void testPostAfterUnregister() {\r",
      "parent_sha": "dbb6ad2246dc328667f0625afe8f8da2d19837bc"
    }
  },
  {
    "oid": "842a4a312c4ea1592bd7067a00495eebe129c078",
    "message": "fix typo",
    "date": "2022-01-25T07:53:40Z",
    "url": "https://github.com/greenrobot/EventBus/commit/842a4a312c4ea1592bd7067a00495eebe129c078",
    "details": {
      "sha": "94db640ed5eb8c24715d8375b892eedec9aaf651",
      "filename": "EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/842a4a312c4ea1592bd7067a00495eebe129c078/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FBackgroundPoster.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/842a4a312c4ea1592bd7067a00495eebe129c078/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FBackgroundPoster.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FBackgroundPoster.java?ref=842a4a312c4ea1592bd7067a00495eebe129c078",
      "patch": "@@ -64,7 +64,7 @@ public void run() {\n                     eventBus.invokeSubscriber(pendingPost);\n                 }\n             } catch (InterruptedException e) {\n-                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + \" was interruppted\", e);\n+                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + \" was interrupted\", e);\n             }\n         } finally {\n             executorRunning = false;",
      "parent_sha": "a74cdf0a5c96359b8d10e129740e33d90504f43a"
    }
  },
  {
    "oid": "b034e2c0ecf9e07013a559d1f57c229dc0ea66ff",
    "message": "remove DEFAULT_LOGGER, map level based on intValue",
    "date": "2017-09-16T10:54:43Z",
    "url": "https://github.com/greenrobot/EventBus/commit/b034e2c0ecf9e07013a559d1f57c229dc0ea66ff",
    "details": {
      "sha": "10a11970d6eaf4413f6008006b4edac7ad4caf31",
      "filename": "EventBus/src/de/greenrobot/event/Logger.java",
      "status": "modified",
      "additions": 10,
      "deletions": 33,
      "changes": 43,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/b034e2c0ecf9e07013a559d1f57c229dc0ea66ff/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/b034e2c0ecf9e07013a559d1f57c229dc0ea66ff/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FLogger.java?ref=b034e2c0ecf9e07013a559d1f57c229dc0ea66ff",
      "patch": "@@ -6,8 +6,6 @@\n \n public abstract class Logger {\n     private static final boolean useAndroidLog;\n-    private static volatile Logger DEFAULT_LOGGER;\n-\n \n     static {\n         boolean android = false;\n@@ -19,22 +17,6 @@ public abstract class Logger {\n         useAndroidLog = android;\n     }\n \n-\n-    public static synchronized Logger initDefaultLogger(String tag) {\n-        if (DEFAULT_LOGGER != null) {\n-            throw new IllegalStateException(\"Default logger already set up\");\n-        }\n-        DEFAULT_LOGGER = create(tag);\n-        return DEFAULT_LOGGER;\n-    }\n-\n-    public static Logger get() {\n-        if (DEFAULT_LOGGER == null) {\n-            throw new IllegalStateException(\"Default logger must be initialized before\");\n-        }\n-        return DEFAULT_LOGGER;\n-    }\n-\n     public static Logger create(String tag) {\n         if (useAndroidLog) {\n             return new AndroidLogger(tag);\n@@ -78,26 +60,21 @@ public void log(Level level, String msg, Throwable th) {\n         }\n \n         protected int mapLevel(Level level) {\n-            if (level == Level.OFF) {\n-                return 0;\n-            } else if (level == Level.FINEST || level == Level.FINER) {\n-                return Log.VERBOSE;\n-            } else if (level == Level.FINE || level == Level.CONFIG) {\n-                return Log.DEBUG;\n-            } else if (level == Level.INFO) {\n+            int value = level.intValue();\n+            if (value < 800) { // below INFO\n+                if (value < 500) { // below FINE\n+                    return Log.VERBOSE;\n+                } else {\n+                    return Log.DEBUG;\n+                }\n+            } else if (value < 900) { // below WARNING\n                 return Log.INFO;\n-            } else if (level == Level.WARNING) {\n+            } else if (value < 1000) { // below ERROR\n                 return Log.WARN;\n-            } else if (level == Level.SEVERE) {\n-                return Log.ERROR;\n-            } else if (level == Level.ALL) {\n-                // Hmm, well..\n-                return Log.ASSERT;\n             } else {\n-                throw new IllegalArgumentException(\"Unexpected level: \" + level);\n+                return Log.ERROR;\n             }\n         }\n-\n     }\n \n     public static class JavaLogger extends Logger {",
      "parent_sha": "5b3a8c47eb2f75a8b563ad7abe1aef1d7a349347"
    }
  },
  {
    "oid": "db56e6e41250c1e35d788d37acb85f20841dbd30",
    "message": "SubscriberInfo clean up",
    "date": "2015-11-27T20:25:26Z",
    "url": "https://github.com/greenrobot/EventBus/commit/db56e6e41250c1e35d788d37acb85f20841dbd30",
    "details": {
      "sha": "43ed290c6a2768a4d4ccc4d5bdf5afa16e42e506",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberInfo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/db56e6e41250c1e35d788d37acb85f20841dbd30/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberInfo.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/db56e6e41250c1e35d788d37acb85f20841dbd30/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberInfo.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberInfo.java?ref=db56e6e41250c1e35d788d37acb85f20841dbd30",
      "patch": "@@ -2,14 +2,12 @@\n \n import java.lang.reflect.Method;\n \n-/** Preprocessed index: base class for generated \"MyGeneratedSubscriberIndex\" class by annotation processing. */\n+/** Base class for generated index classes created by annotation processing. */\n public abstract class SubscriberInfo {\n     final Class subscriberClass;\n     final Class superSubscriberInfoClass;\n     final Class nextSubscriberInfoClass;\n \n-    protected SubscriberMethod[] subscriberMethods;\n-\n     protected SubscriberInfo(Class subscriberClass, Class superSubscriberInfoClass, Class nextSubscriberInfoClass) {\n         this.subscriberClass = subscriberClass;\n         this.superSubscriberInfoClass = superSubscriberInfoClass;",
      "parent_sha": "0c289c664ff30f3412d3d2edf78766a1eadb9f08"
    }
  },
  {
    "oid": "ff681e83c8fde9ef9d10a683a2137db3d0fabe33",
    "message": "annotation processor only generates a single index class (at least for now)",
    "date": "2016-01-25T17:05:18Z",
    "url": "https://github.com/greenrobot/EventBus/commit/ff681e83c8fde9ef9d10a683a2137db3d0fabe33",
    "details": {
      "sha": "36d006ca7d14b36b0c4bf0183c5d4995f7b775d9",
      "filename": "EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 24,
      "deletions": 21,
      "changes": 45,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/ff681e83c8fde9ef9d10a683a2137db3d0fabe33/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/ff681e83c8fde9ef9d10a683a2137db3d0fabe33/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=ff681e83c8fde9ef9d10a683a2137db3d0fabe33",
      "patch": "@@ -34,10 +34,10 @@\n @SupportedOptions(\"eventBusIndex\")\n public class EventBusAnnotationProcessor extends AbstractProcessor {\n     public static final String INFO_CLASS_POSTFIX = \"_EventBusInfo\";\n+    public static final String OPTION_EVENT_BUS_INDEX = \"eventBusIndex\";\n \n     /** Found subscriber methods for a class (without superclasses). */\n     private final Map<TypeElement, List<ExecutableElement>> methodsByClass = new HashMap<>();\n-    private final Map<TypeElement, String> infoByClass = new HashMap<>();\n     private final Set<TypeElement> classesToSkip = new HashSet<>();\n \n     private boolean writerRoundDone;\n@@ -74,10 +74,14 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n             checkForSubscribersToSkip(messager);\n \n             if (!methodsByClass.isEmpty()) {\n-                createInfoFiles();\n-                String index = processingEnv.getOptions().get(\"eventBusIndex\");\n+                // Nor now, we just use a single index and skip individual files: createInfoFiles();\n+\n+                String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);\n                 if (index != null) {\n                     createInfoIndexFile(index);\n+                } else {\n+                    messager.printMessage(Diagnostic.Kind.ERROR, \"No option \" + OPTION_EVENT_BUS_INDEX +\n+                            \" passed to annotation processor.\");\n                 }\n             } else {\n                 messager.printMessage(Diagnostic.Kind.WARNING, \"No @Subscribe annotations found\");\n@@ -193,10 +197,9 @@ private TypeElement getSuperclass(TypeElement type) {\n         }\n     }\n \n+    // Currently unused in favor of single index files\n     private void createInfoFiles() {\n-        List<Map.Entry<TypeElement, List<ExecutableElement>>> entries = new ArrayList<>(methodsByClass.entrySet());\n-        for (int i = 0; i < entries.size(); i++) {\n-            Map.Entry<TypeElement, List<ExecutableElement>> entry = entries.get(i);\n+        for (Map.Entry<TypeElement, List<ExecutableElement>> entry : methodsByClass.entrySet()) {\n             TypeElement subscriberClass = entry.getKey();\n             if (classesToSkip.contains(subscriberClass)) {\n                 continue;\n@@ -209,8 +212,6 @@ private void createInfoFiles() {\n                 String subscriberClassName = getClassString(subscriberClass, myPackage);\n                 String infoClassName = getInfoClass(subscriberClass, myPackage);\n \n-                infoByClass.put(subscriberClass, myPackage + \".\" + infoClassName);\n-\n                 JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(myPackage + '.' + infoClassName);\n                 writer = new BufferedWriter(sourceFile.openWriter());\n                 writer.write(\"package \" + myPackage + \";\\n\\n\");\n@@ -393,20 +394,22 @@ private void createInfoIndexFile(String index) {\n     }\n \n     private void writeIndexLines(BufferedWriter writer, String myPackage) throws IOException {\n-        for (Map.Entry<TypeElement, String> entry : infoByClass.entrySet()) {\n+        for (Map.Entry<TypeElement, List<ExecutableElement>> entry : methodsByClass.entrySet()) {\n             TypeElement subscriberTypeElement = entry.getKey();\n-            if (!classesToSkip.contains(subscriberTypeElement)) {\n-                String subscriberClass = getClassString(subscriberTypeElement, myPackage);\n-                if (isVisible(myPackage, subscriberTypeElement)) {\n-                    writeLine(writer, 2,\n-                            \"putIndex(new SimpleSubscriberInfo(\" + subscriberClass + \".class,\",\n-                            \"true,\", \"new SubscriberMethodInfo[] {\");\n-                    List<ExecutableElement> methods = methodsByClass.get(subscriberTypeElement);\n-                    writeCreateSubscriberMethods(writer, methods, \"new SubscriberMethodInfo\", myPackage);\n-                    writer.write(\"        }));\\n\\n\");\n-                } else {\n-                    writer.write(\"        // Subscriber not visible to index: \" + subscriberClass + \"\\n\");\n-                }\n+            if (classesToSkip.contains(subscriberTypeElement)) {\n+                continue;\n+            }\n+\n+            String subscriberClass = getClassString(subscriberTypeElement, myPackage);\n+            if (isVisible(myPackage, subscriberTypeElement)) {\n+                writeLine(writer, 2,\n+                        \"putIndex(new SimpleSubscriberInfo(\" + subscriberClass + \".class,\",\n+                        \"true,\", \"new SubscriberMethodInfo[] {\");\n+                List<ExecutableElement> methods = methodsByClass.get(subscriberTypeElement);\n+                writeCreateSubscriberMethods(writer, methods, \"new SubscriberMethodInfo\", myPackage);\n+                writer.write(\"        }));\\n\\n\");\n+            } else {\n+                writer.write(\"        // Subscriber not visible to index: \" + subscriberClass + \"\\n\");\n             }\n         }\n     }",
      "parent_sha": "ce943759dfbbde0361b53e26657ebec44004bac7"
    }
  },
  {
    "oid": "6aac5cab78a5fe0b37fae9189d33033a20d6f100",
    "message": "fixed typo",
    "date": "2013-08-30T12:57:30Z",
    "url": "https://github.com/greenrobot/EventBus/commit/6aac5cab78a5fe0b37fae9189d33033a20d6f100",
    "details": {
      "sha": "c09e399ef7505f52e5697f8242dbe79dd486b5e2",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/6aac5cab78a5fe0b37fae9189d33033a20d6f100/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/6aac5cab78a5fe0b37fae9189d33033a20d6f100/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=6aac5cab78a5fe0b37fae9189d33033a20d6f100",
      "patch": "@@ -403,7 +403,7 @@ private void postSingleEvent(Object event, boolean isMainThread) throws Error {\n             }\n         }\n         if (!subscriptionFound) {\n-            Log.d(TAG, \"No subscripers registered for event \" + eventClass);\n+            Log.d(TAG, \"No subscribers registered for event \" + eventClass);\n             if (eventClass != NoSubscriberEvent.class && eventClass != SubscriberExceptionEvent.class) {\n                 post(new NoSubscriberEvent(this, event));\n             }",
      "parent_sha": "6bac6ad79249a0715b59c1da8b9969f23f6e0f9f"
    }
  },
  {
    "oid": "b492674030e1c0cbe64be8c496dbb66a20f8fb5e",
    "message": "changed log tag to EventBus",
    "date": "2015-02-23T15:08:33Z",
    "url": "https://github.com/greenrobot/EventBus/commit/b492674030e1c0cbe64be8c496dbb66a20f8fb5e",
    "details": {
      "sha": "dfaefeabf4bfcaebdd2ffe359ac5972146fdc17c",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/b492674030e1c0cbe64be8c496dbb66a20f8fb5e/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/b492674030e1c0cbe64be8c496dbb66a20f8fb5e/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=b492674030e1c0cbe64be8c496dbb66a20f8fb5e",
      "patch": "@@ -39,7 +39,7 @@\n public class EventBus {\n \n     /** Log tag, apps may override it. */\n-    public static String TAG = \"Event\";\n+    public static String TAG = \"EventBus\";\n \n     static volatile EventBus defaultInstance;\n ",
      "parent_sha": "65b080697364a5760551f1c8e60b184966e7b9df"
    }
  },
  {
    "oid": "62e7eb73bc011fa83f3bd7ea307d52b6eb729a74",
    "message": "typo, fixes #219",
    "date": "2015-11-02T20:05:50Z",
    "url": "https://github.com/greenrobot/EventBus/commit/62e7eb73bc011fa83f3bd7ea307d52b6eb729a74",
    "details": {
      "sha": "16eb39780b6f1882514077ba5f2239087b766d9e",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/62e7eb73bc011fa83f3bd7ea307d52b6eb729a74/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/62e7eb73bc011fa83f3bd7ea307d52b6eb729a74/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=62e7eb73bc011fa83f3bd7ea307d52b6eb729a74",
      "patch": "@@ -234,7 +234,7 @@ public synchronized boolean isRegistered(Object subscriber) {\n     }\n \n     /** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */\n-    private void unubscribeByEventType(Object subscriber, Class<?> eventType) {\n+    private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {\n         List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n         if (subscriptions != null) {\n             int size = subscriptions.size();\n@@ -255,7 +255,7 @@ public synchronized void unregister(Object subscriber) {\n         List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);\n         if (subscribedTypes != null) {\n             for (Class<?> eventType : subscribedTypes) {\n-                unubscribeByEventType(subscriber, eventType);\n+                unsubscribeByEventType(subscriber, eventType);\n             }\n             typesBySubscriber.remove(subscriber);\n         } else {",
      "parent_sha": "be04a2de66981e819f40afd389e417e98c94c7da"
    }
  },
  {
    "oid": "62abc54dec3bf3e1f8d2badc4752f61ff05e8eb3",
    "message": "Skip also androidx.* super classes",
    "date": "2020-02-04T14:22:36Z",
    "url": "https://github.com/greenrobot/EventBus/commit/62abc54dec3bf3e1f8d2badc4752f61ff05e8eb3",
    "details": {
      "sha": "b688cc46555f707685c120f74609c257c16d28ed",
      "filename": "EventBus/src/org/greenrobot/eventbus/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/62abc54dec3bf3e1f8d2badc4752f61ff05e8eb3/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/62abc54dec3bf3e1f8d2badc4752f61ff05e8eb3/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2FSubscriberMethodFinder.java?ref=62abc54dec3bf3e1f8d2badc4752f61ff05e8eb3",
      "patch": "@@ -259,8 +259,10 @@ void moveToSuperclass() {\n             } else {\n                 clazz = clazz.getSuperclass();\n                 String clazzName = clazz.getName();\n-                /** Skip system classes, this just degrades performance. */\n-                if (clazzName.startsWith(\"java.\") || clazzName.startsWith(\"javax.\") || clazzName.startsWith(\"android.\")) {\n+                // Skip system classes, this degrades performance.\n+                // Also we might avoid some ClassNotFoundException (see FAQ for background).\n+                if (clazzName.startsWith(\"java.\") || clazzName.startsWith(\"javax.\") ||\n+                        clazzName.startsWith(\"android.\") || clazzName.startsWith(\"androidx.\")) {\n                     clazz = null;\n                 }\n             }",
      "parent_sha": "0d551f1a493710b92791b82bd915238310c6ed4e"
    }
  },
  {
    "oid": "e25cfa4d1b719637269ab18da5087bbc7baaa630",
    "message": "fix testUnregisterNotLeaking for Android 6",
    "date": "2015-11-02T19:12:05Z",
    "url": "https://github.com/greenrobot/EventBus/commit/e25cfa4d1b719637269ab18da5087bbc7baaa630",
    "details": {
      "sha": "f3b14d0ff51ec460c626590cb16a8ad68a6a4cc7",
      "filename": "EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 21,
      "changes": 29,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/e25cfa4d1b719637269ab18da5087bbc7baaa630/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/e25cfa4d1b719637269ab18da5087bbc7baaa630/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusTest%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Ftest%2FEventBusBasicTest.java?ref=e25cfa4d1b719637269ab18da5087bbc7baaa630",
      "patch": "@@ -20,8 +20,6 @@\n import de.greenrobot.event.EventBus;\n import junit.framework.TestCase;\n \n-import java.lang.ref.WeakReference;\n-\n /**\n  * @author Markus Junginger, greenrobot\n  */\n@@ -65,25 +63,14 @@ public void testUnregisterWithoutRegister() {\n     }\n \n     public void testUnregisterNotLeaking() {\n-        EventBusBasicTest subscriber = new EventBusBasicTest();\n-        eventBus.register(subscriber);\n-        eventBus.unregister(subscriber);\n-\n-        WeakReference<EventBusBasicTest> ref = new WeakReference<EventBusBasicTest>(subscriber);\n-        subscriber = null;\n-        assertSubscriberNotReferenced(ref);\n-    }\n-\n-    private void assertSubscriberNotReferenced(WeakReference<EventBusBasicTest> ref) {\n-        EventBusBasicTest subscriberTest = new EventBusBasicTest();\n-        WeakReference<EventBusBasicTest> refTest = new WeakReference<EventBusBasicTest>(subscriberTest);\n-        subscriberTest = null;\n-\n-        // Yeah, in theory is is questionable (in practice just fine so far...)\n-        System.gc();\n-\n-        assertNull(refTest.get());\n-        assertNull(ref.get());\n+        // This will throw \"out of memory\" if subscribers are leaked\n+        for (int i = 0; i < 300; i++) {\n+            EventBusBasicTest subscriber = new EventBusBasicTest() {\n+                byte[] expensiveObject = new byte[1024 * 1024];\n+            };\n+            eventBus.register(subscriber);\n+            eventBus.unregister(subscriber);\n+        }\n     }\n \n     public void testRegisterTwice() {",
      "parent_sha": "c9bf5b71b1ce3017ed0bc338759f6873d8c0fe0e"
    }
  },
  {
    "oid": "6372ee9bdf133fa50a92985b055170bc9e02ff21",
    "message": "allow package protected classes along with index",
    "date": "2016-01-27T07:20:28Z",
    "url": "https://github.com/greenrobot/EventBus/commit/6372ee9bdf133fa50a92985b055170bc9e02ff21",
    "details": {
      "sha": "018bffcab6c59e2e3229d3e08380e44c6e306572",
      "filename": "EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 15,
      "deletions": 16,
      "changes": 31,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/6372ee9bdf133fa50a92985b055170bc9e02ff21/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/6372ee9bdf133fa50a92985b055170bc9e02ff21/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=6372ee9bdf133fa50a92985b055170bc9e02ff21",
      "patch": "@@ -33,7 +33,6 @@\n @SupportedAnnotationTypes(\"org.greenrobot.eventbus.Subscribe\")\n @SupportedOptions(\"eventBusIndex\")\n public class EventBusAnnotationProcessor extends AbstractProcessor {\n-    public static final String INFO_CLASS_POSTFIX = \"_EventBusInfo\";\n     public static final String OPTION_EVENT_BUS_INDEX = \"eventBusIndex\";\n \n     /** Found subscriber methods for a class (without superclasses). */\n@@ -52,6 +51,15 @@ public SourceVersion getSupportedSourceVersion() {\n     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment env) {\n         Messager messager = processingEnv.getMessager();\n         try {\n+            String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);\n+            if (index == null) {\n+                messager.printMessage(Diagnostic.Kind.ERROR, \"No option \" + OPTION_EVENT_BUS_INDEX +\n+                        \" passed to annotation processor\");\n+                return false;\n+            }\n+            int lastPeriod = index.lastIndexOf('.');\n+            String indexPackage = lastPeriod != -1 ? index.substring(0, lastPeriod) : null;\n+\n             round++;\n             messager.printMessage(Diagnostic.Kind.NOTE, \"Processing round \" + round + \", new annotations: \" +\n                     !annotations.isEmpty() + \", processingOver: \" + env.processingOver());\n@@ -71,18 +79,10 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n                         \"Unexpected processing state: annotations still available after writing.\");\n             }\n             collectSubscribers(annotations, env, messager);\n-            checkForSubscribersToSkip(messager);\n+            checkForSubscribersToSkip(messager, indexPackage);\n \n             if (!methodsByClass.isEmpty()) {\n-                // Nor now, we just use a single index and skip individual files: createInfoFiles();\n-\n-                String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);\n-                if (index != null) {\n-                    createInfoIndexFile(index);\n-                } else {\n-                    messager.printMessage(Diagnostic.Kind.ERROR, \"No option \" + OPTION_EVENT_BUS_INDEX +\n-                            \" passed to annotation processor.\");\n-                }\n+                createInfoIndexFile(index);\n             } else {\n                 messager.printMessage(Diagnostic.Kind.WARNING, \"No @Subscribe annotations found\");\n             }\n@@ -136,12 +136,12 @@ private boolean checkHasNoErrors(ExecutableElement element, Messager messager) {\n         return true;\n     }\n \n-    private void checkForSubscribersToSkip(Messager messager) {\n+    private void checkForSubscribersToSkip(Messager messager, String myPackage) {\n         for (Map.Entry<TypeElement, List<ExecutableElement>> entry : methodsByClass.entrySet()) {\n             TypeElement skipCandidate = entry.getKey();\n             TypeElement subscriberClass = skipCandidate;\n             while (subscriberClass != null) {\n-                if (!subscriberClass.getModifiers().contains(Modifier.PUBLIC)) {\n+                if (!isVisible(myPackage, subscriberClass)) {\n                     boolean added = classesToSkip.add(skipCandidate);\n                     if (added) {\n                         String msg;\n@@ -159,9 +159,8 @@ private void checkForSubscribersToSkip(Messager messager) {\n                 if (methods != null) {\n                     for (ExecutableElement method : methods) {\n                         VariableElement param = method.getParameters().get(0);\n-                        DeclaredType paramType = (DeclaredType) param.asType();\n-                        Set<Modifier> eventClassModifiers = paramType.asElement().getModifiers();\n-                        if (!eventClassModifiers.contains(Modifier.PUBLIC)) {\n+                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) param.asType()).asElement();\n+                        if (!isVisible(myPackage, eventTypeElement)) {\n                             boolean added = classesToSkip.add(skipCandidate);\n                             if (added) {\n                                 String msg;",
      "parent_sha": "e96bb42a93edcd8ac2cf45c35015b0d540d8afa1"
    }
  },
  {
    "oid": "3da6bec3f9b8cf51b5bff9d795332ab43fac9da4",
    "message": "Check if SherlockFragmentActivity is used",
    "date": "2012-11-14T16:24:23Z",
    "url": "https://github.com/greenrobot/EventBus/commit/3da6bec3f9b8cf51b5bff9d795332ab43fac9da4",
    "details": {
      "sha": "ba3b0c6f7c5536f105487d512a8eefd435110717",
      "filename": "EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/3da6bec3f9b8cf51b5bff9d795332ab43fac9da4/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogManager.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/3da6bec3f9b8cf51b5bff9d795332ab43fac9da4/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogManager.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FErrorDialogManager.java?ref=3da6bec3f9b8cf51b5bff9d795332ab43fac9da4",
      "patch": "@@ -171,11 +171,14 @@ private static boolean isSupportActivity(Activity activity) {\n             if (name.equals(\"android.support.v4.app.FragmentActivity\")) {\r\n                 isSupport = true;\r\n                 break;\r\n-            }\r\n-            if (name.equals(\"android.app.Activity\")) {\r\n+            } else if (name.startsWith(\"com.actionbarsherlock.app\")\r\n+                    && (name.endsWith(\".SherlockActivity\") || name.endsWith(\".SherlockListActivity\") || name\r\n+                            .endsWith(\".SherlockPreferenceActivity\"))) {\r\n+                throw new RuntimeException(\"Please use SherlockFragmentActivity. Illegal activity: \" + name);\r\n+            } else if (name.equals(\"android.app.Activity\")) {\r\n                 if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\r\n                     throw new RuntimeException(\r\n-                            \"Illegal activity. Either use Android 3.0+ or android.support.v4.app.FragmentActivity\");\r\n+                            \"Illegal activity without fragment support. Either use Android 3.0+ or android.support.v4.app.FragmentActivity.\");\r\n                 }\r\n                 break;\r\n             }\r",
      "parent_sha": "e8c4afd914052e92587947fbb3d2f97d82629b7d"
    }
  },
  {
    "oid": "b8dc2f648f85e97cea9ebe13975b245883941aa3",
    "message": "fixed synchronization (introduced in 7952c05234bb845552599fe86148112eb2bcf20c - annotation branch only), minor clean up",
    "date": "2015-12-04T11:30:46Z",
    "url": "https://github.com/greenrobot/EventBus/commit/b8dc2f648f85e97cea9ebe13975b245883941aa3",
    "details": {
      "sha": "02548d34fd832bd3d99f01a9e28aa28fa8013368",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 22,
      "deletions": 30,
      "changes": 52,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/b8dc2f648f85e97cea9ebe13975b245883941aa3/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/b8dc2f648f85e97cea9ebe13975b245883941aa3/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=b8dc2f648f85e97cea9ebe13975b245883941aa3",
      "patch": "@@ -130,10 +130,11 @@ public EventBus() {\n      */\n     public void register(Object subscriber) {\n         Class<?> subscriberClass = subscriber.getClass();\n-        List<SubscriberMethod> subscriberMethods =\n-                subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n-        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n-            subscribe(subscriber, subscriberMethod);\n+        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n+        synchronized (this) {\n+            for (SubscriberMethod subscriberMethod : subscriberMethods) {\n+                subscribe(subscriber, subscriberMethod);\n+            }\n         }\n     }\n \n@@ -143,7 +144,7 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n         Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n         CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n         if (subscriptions == null) {\n-            subscriptions = new CopyOnWriteArrayList<Subscription>();\n+            subscriptions = new CopyOnWriteArrayList<>();\n             subscriptionsByEventType.put(eventType, subscriptions);\n         } else {\n             if (subscriptions.contains(newSubscription)) {\n@@ -152,23 +153,17 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n             }\n         }\n \n-        // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)\n-        // subscriberMethod.method.setAccessible(true);\n-\n-        // Got to synchronize to avoid shifted positions when adding/removing concurrently\n-        synchronized (subscriptions) {\n-            int size = subscriptions.size();\n-            for (int i = 0; i <= size; i++) {\n-                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\n-                    subscriptions.add(i, newSubscription);\n-                    break;\n-                }\n+        int size = subscriptions.size();\n+        for (int i = 0; i <= size; i++) {\n+            if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\n+                subscriptions.add(i, newSubscription);\n+                break;\n             }\n         }\n \n         List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);\n         if (subscribedEvents == null) {\n-            subscribedEvents = new ArrayList<Class<?>>();\n+            subscribedEvents = new ArrayList<>();\n             typesBySubscriber.put(subscriber, subscribedEvents);\n         }\n         subscribedEvents.add(eventType);\n@@ -210,17 +205,14 @@ public synchronized boolean isRegistered(Object subscriber) {\n     private void unsubscribeByEventType(Object subscriber, Class<?> eventType) {\n         List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n         if (subscriptions != null) {\n-            // Got to synchronize to avoid shifted positions when adding/removing concurrently\n-            synchronized (subscriptions) {\n-                int size = subscriptions.size();\n-                for (int i = 0; i < size; i++) {\n-                    Subscription subscription = subscriptions.get(i);\n-                    if (subscription.subscriber == subscriber) {\n-                        subscription.active = false;\n-                        subscriptions.remove(i);\n-                        i--;\n-                        size--;\n-                    }\n+            int size = subscriptions.size();\n+            for (int i = 0; i < size; i++) {\n+                Subscription subscription = subscriptions.get(i);\n+                if (subscription.subscriber == subscriber) {\n+                    subscription.active = false;\n+                    subscriptions.remove(i);\n+                    i--;\n+                    size--;\n                 }\n             }\n         }\n@@ -443,11 +435,11 @@ private void postToSubscription(Subscription subscription, Object event, boolean\n     }\n \n     /** Looks up all Class objects including super classes and interfaces. Should also work for interfaces. */\n-    private List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {\n+    private static List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {\n         synchronized (eventTypesCache) {\n             List<Class<?>> eventTypes = eventTypesCache.get(eventClass);\n             if (eventTypes == null) {\n-                eventTypes = new ArrayList<Class<?>>();\n+                eventTypes = new ArrayList<>();\n                 Class<?> clazz = eventClass;\n                 while (clazz != null) {\n                     eventTypes.add(clazz);",
      "parent_sha": "0a013ffcc55a96e8a5ce4d2ac862b33cf5e2cc00"
    }
  },
  {
    "oid": "6006bd74b008459f239f3e632a4639ea5fedb538",
    "message": "fix setting executionScope on event",
    "date": "2014-04-02T11:13:01Z",
    "url": "https://github.com/greenrobot/EventBus/commit/6006bd74b008459f239f3e632a4639ea5fedb538",
    "details": {
      "sha": "38e8a7bfce7b366b0193d1e5e31b28397d840cfa",
      "filename": "EventBus/src/de/greenrobot/event/util/AsyncExecutor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/6006bd74b008459f239f3e632a4639ea5fedb538/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FAsyncExecutor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/6006bd74b008459f239f3e632a4639ea5fedb538/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FAsyncExecutor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Futil%2FAsyncExecutor.java?ref=6006bd74b008459f239f3e632a4639ea5fedb538",
      "patch": "@@ -121,8 +121,8 @@ public void run() {\n                         Log.e(EventBus.TAG, \"Original exception:\", e);\n                         throw new RuntimeException(\"Could not create failure event\", e1);\n                     }\n-                    if (e instanceof HasExecutionScope) {\n-                        ((HasExecutionScope) e).setExecutionScope(scope);\n+                    if (event instanceof HasExecutionScope) {\n+                        ((HasExecutionScope) event).setExecutionScope(scope);\n                     }\n                     eventBus.post(event);\n                 }",
      "parent_sha": "0fe7ea575c508ac3b072b4a31ecea9c8680435be"
    }
  },
  {
    "oid": "695483a49e073cfbbd7a28d750e3d0a3082f919c",
    "message": "Make defaultMethodName a constant at compile time.",
    "date": "2014-05-13T06:49:45Z",
    "url": "https://github.com/greenrobot/EventBus/commit/695483a49e073cfbbd7a28d750e3d0a3082f919c",
    "details": {
      "sha": "dd646213369f7e70985855fb32bd93f926550b01",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/695483a49e073cfbbd7a28d750e3d0a3082f919c/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/695483a49e073cfbbd7a28d750e3d0a3082f919c/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=695483a49e073cfbbd7a28d750e3d0a3082f919c",
      "patch": "@@ -58,7 +58,7 @@ protected PostingThreadState initialValue() {\n         }\n     };\n \n-    private String defaultMethodName = \"onEvent\";\n+    private static final String DEFAULT_METHOD_NAME = \"onEvent\";\n \n     private final HandlerPoster mainThreadPoster;\n     private final BackgroundPoster backgroundPoster;\n@@ -137,7 +137,7 @@ public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {\n      * \"onEventMainThread\".\n      */\n     public void register(Object subscriber) {\n-        register(subscriber, defaultMethodName, false, 0);\n+        register(subscriber, DEFAULT_METHOD_NAME, false, 0);\n     }\n \n     /**\n@@ -147,7 +147,7 @@ public void register(Object subscriber) {\n      * delivery among subscribers with different {@link ThreadMode}s!\n      */\n     public void register(Object subscriber, int priority) {\n-        register(subscriber, defaultMethodName, false, priority);\n+        register(subscriber, DEFAULT_METHOD_NAME, false, priority);\n     }\n \n     /**\n@@ -163,15 +163,15 @@ public void register(Object subscriber, String methodName) {\n      * {@link #postSticky(Object)}) to the given subscriber.\n      */\n     public void registerSticky(Object subscriber) {\n-        register(subscriber, defaultMethodName, true, 0);\n+        register(subscriber, DEFAULT_METHOD_NAME, true, 0);\n     }\n \n     /**\n      * Like {@link #register(Object,int)}, but also triggers delivery of the most recent sticky event (posted with\n      * {@link #postSticky(Object)}) to the given subscriber.\n      */\n     public void registerSticky(Object subscriber, int priority) {\n-        register(subscriber, defaultMethodName, true, priority);\n+        register(subscriber, DEFAULT_METHOD_NAME, true, priority);\n     }\n \n     /**\n@@ -195,7 +195,7 @@ private synchronized void register(Object subscriber, String methodName, boolean\n      */\n     @Deprecated\n     public void register(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {\n-        register(subscriber, defaultMethodName, false, eventType, moreEventTypes);\n+        register(subscriber, DEFAULT_METHOD_NAME, false, eventType, moreEventTypes);\n     }\n \n     /**\n@@ -211,7 +211,7 @@ public void register(Object subscriber, String methodName, Class<?> eventType, C\n      */\n     @Deprecated\n     public void registerSticky(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {\n-        register(subscriber, defaultMethodName, true, eventType, moreEventTypes);\n+        register(subscriber, DEFAULT_METHOD_NAME, true, eventType, moreEventTypes);\n     }\n \n     /**",
      "parent_sha": "0fe7ea575c508ac3b072b4a31ecea9c8680435be"
    }
  },
  {
    "oid": "c7b43c7d78bc1d41f83a16662df5dd3ef94ba020",
    "message": "removed anonymous class detection (will fallback to reflection anyway)",
    "date": "2015-12-04T11:39:14Z",
    "url": "https://github.com/greenrobot/EventBus/commit/c7b43c7d78bc1d41f83a16662df5dd3ef94ba020",
    "details": {
      "sha": "dde68fc12e9175fd97dfbd68de4cabcbdd0c6c29",
      "filename": "EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/c7b43c7d78bc1d41f83a16662df5dd3ef94ba020/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/c7b43c7d78bc1d41f83a16662df5dd3ef94ba020/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FSubscriberMethodFinder.java?ref=c7b43c7d78bc1d41f83a16662df5dd3ef94ba020",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2012-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,8 +52,7 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n             return subscriberMethods;\n         }\n \n-        boolean forceReflection = isAnonymousClass(subscriberClass);\n-        if (ignoreGeneratedIndex || forceReflection) {\n+        if (ignoreGeneratedIndex) {\n             subscriberMethods = findUsingReflection(subscriberClass);\n         } else {\n             subscriberMethods = findUsingInfo(subscriberClass);\n@@ -67,15 +66,6 @@ List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n         }\n     }\n \n-    private boolean isAnonymousClass(Class<?> subscriberClass) {\n-        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection\n-        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too)\n-        String name = subscriberClass.getName();\n-        int dollarIndex = name.lastIndexOf('$');\n-        return dollarIndex != -1 && dollarIndex < name.length() - 1 &&\n-                Character.isDigit(name.charAt(dollarIndex + 1));\n-    }\n-\n     private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n         FindState findState = prepareFindState();\n         findState.initForSubscriber(subscriberClass);",
      "parent_sha": "b8dc2f648f85e97cea9ebe13975b245883941aa3"
    }
  },
  {
    "oid": "222f0d5b27b0d8ed760fa12e379e65d610a19dbd",
    "message": "moved mainThread flag into posting state",
    "date": "2013-11-17T10:34:00Z",
    "url": "https://github.com/greenrobot/EventBus/commit/222f0d5b27b0d8ed760fa12e379e65d610a19dbd",
    "details": {
      "sha": "9e27e371c84ef27c3082c0e55d6fc335791e8110",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/222f0d5b27b0d8ed760fa12e379e65d610a19dbd/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/222f0d5b27b0d8ed760fa12e379e65d610a19dbd/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=222f0d5b27b0d8ed760fa12e379e65d610a19dbd",
      "patch": "@@ -339,14 +339,15 @@ public void post(Object event) {\n         if (postingState.isPosting) {\n             return;\n         } else {\n-            boolean isMainThread = Looper.getMainLooper() == Looper.myLooper();\n+            postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();\n             postingState.isPosting = true;\n             try {\n                 while (!eventQueue.isEmpty()) {\n-                    postSingleEvent(eventQueue.remove(0), isMainThread);\n+                    postSingleEvent(eventQueue.remove(0), postingState);\n                 }\n             } finally {\n                 postingState.isPosting = false;\n+                postingState.isMainThread = false;\n             }\n         }\n     }\n@@ -413,7 +414,7 @@ public void removeAllStickyEvents() {\n         }\n     }\n \n-    private void postSingleEvent(Object event, boolean isMainThread) throws Error {\n+    private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\n         Class<? extends Object> eventClass = event.getClass();\n         List<Class<?>> eventTypes = findEventTypes(eventClass);\n         boolean subscriptionFound = false;\n@@ -426,7 +427,7 @@ private void postSingleEvent(Object event, boolean isMainThread) throws Error {\n             }\n             if (subscriptions != null && !subscriptions.isEmpty()) {\n                 for (Subscription subscription : subscriptions) {\n-                    postToSubscription(subscription, event, isMainThread);\n+                    postToSubscription(subscription, event, postingState.isMainThread);\n                 }\n                 subscriptionFound = true;\n             }\n@@ -539,6 +540,7 @@ void invokeSubscriber(Subscription subscription, Object event) throws Error {\n     final static class PostingThreadState {\n         List<Object> eventQueue = new ArrayList<Object>();\n         boolean isPosting;\n+        boolean isMainThread;\n     }\n \n     // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course...",
      "parent_sha": "fe6dbc7b4948358f0c50dfea4c271ed74c705808"
    }
  },
  {
    "oid": "8032b085a3c6b598b97ea2bc58d15d6a83bcd73c",
    "message": "Fixes issue #188",
    "date": "2015-09-05T18:15:19Z",
    "url": "https://github.com/greenrobot/EventBus/commit/8032b085a3c6b598b97ea2bc58d15d6a83bcd73c",
    "details": {
      "sha": "6a9cb8e96d3c076eba6bcd472b1d2679314519f6",
      "filename": "EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/8032b085a3c6b598b97ea2bc58d15d6a83bcd73c/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/8032b085a3c6b598b97ea2bc58d15d6a83bcd73c/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBusAnnotationProcessor%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2Fannotationprocessor%2FEventBusAnnotationProcessor.java?ref=8032b085a3c6b598b97ea2bc58d15d6a83bcd73c",
      "patch": "@@ -28,7 +28,6 @@\n import java.util.Set;\n \n @SupportedAnnotationTypes(\"de.greenrobot.event.Subscribe\")\n-@SupportedSourceVersion(SourceVersion.RELEASE_6)\n public class EventBusAnnotationProcessor extends AbstractProcessor {\n     public static final String CLASS_POSTFIX = \"_EventBusInfo\";\n     private final Map<TypeElement, List<ExecutableElement>> methodsByClass =\n@@ -38,6 +37,11 @@ public class EventBusAnnotationProcessor extends AbstractProcessor {\n     private boolean writerRoundDone;\n     private int round;\n \n+    @Override\n+    public SourceVersion getSupportedSourceVersion() {\n+        return SourceVersion.latest();\n+    }\n+\n     @Override\n     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment env) {\n         Messager messager = processingEnv.getMessager();",
      "parent_sha": "f72fe79cea4ee12e59168c70c96051aa073f9b10"
    }
  },
  {
    "oid": "0e324bd5d44e9625506333d05759a2d9d556d692",
    "message": "eventInheritance disclaimer",
    "date": "2014-11-10T09:48:07Z",
    "url": "https://github.com/greenrobot/EventBus/commit/0e324bd5d44e9625506333d05759a2d9d556d692",
    "details": {
      "sha": "0635060983265d8ba8d0d9d3c437cf033fa21af8",
      "filename": "EventBus/src/de/greenrobot/event/EventBusBuilder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/0e324bd5d44e9625506333d05759a2d9d556d692/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBusBuilder.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/0e324bd5d44e9625506333d05759a2d9d556d692/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBusBuilder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBusBuilder.java?ref=0e324bd5d44e9625506333d05759a2d9d556d692",
      "patch": "@@ -76,8 +76,12 @@ public EventBusBuilder throwSubscriberException(boolean throwSubscriberException\n \n     /**\n      * By default, EventBus considers the event class hierarchy (subscribers to super classes will be notified).\n-     * Switching this feature off will improve posting of events. For simple event classes extending Object directly, we\n-     * measured a speed up of 20%. For more complex event hierarchies, the speed up should be >20%.\n+     * Switching this feature off will improve posting of events. For simple event classes extending Object directly,\n+     * we measured a speed up of 20% for event posting. For more complex event hierarchies, the speed up should be\n+     * >20%.\n+     * <p/>\n+     * However, keep in mind that event posting usually consumes just a small proportion of CPU time inside an app,\n+     * unless it is posting at high rates, e.g. hundreds/thousands of events per second.\n      */\n     public EventBusBuilder eventInheritance(boolean eventInheritance) {\n         this.eventInheritance = eventInheritance;",
      "parent_sha": "c037968d31ad8867e3860e5d3dd9f356a30d95fc"
    }
  },
  {
    "oid": "6bac6ad79249a0715b59c1da8b9969f23f6e0f9f",
    "message": "remove \"final\" modifier for EventBus",
    "date": "2013-04-25T16:23:23Z",
    "url": "https://github.com/greenrobot/EventBus/commit/6bac6ad79249a0715b59c1da8b9969f23f6e0f9f",
    "details": {
      "sha": "f4833308aa0aa0df7a8d737083be407a0e2f867f",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/6bac6ad79249a0715b59c1da8b9969f23f6e0f9f/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/6bac6ad79249a0715b59c1da8b9969f23f6e0f9f/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=6bac6ad79249a0715b59c1da8b9969f23f6e0f9f",
      "patch": "@@ -37,7 +37,7 @@\n  * \n  * @author Markus Junginger, greenrobot\n  */\n-public final class EventBus {\n+public class EventBus {\n     static ExecutorService executorService = Executors.newCachedThreadPool();\n \n     /** Log tag, apps may override it. */",
      "parent_sha": "89364e2be5681e10a976ce0c1a776c897b3b0439"
    }
  },
  {
    "oid": "9ab4016d0fd57910b8aad64b3bc65416020c3336",
    "message": "throw EventBusException not RuntimeEx",
    "date": "2012-08-30T15:10:42Z",
    "url": "https://github.com/greenrobot/EventBus/commit/9ab4016d0fd57910b8aad64b3bc65416020c3336",
    "details": {
      "sha": "6041dc731bb2e52c8799e795f14f3c9b6ab8f40b",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/9ab4016d0fd57910b8aad64b3bc65416020c3336/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/9ab4016d0fd57910b8aad64b3bc65416020c3336/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=9ab4016d0fd57910b8aad64b3bc65416020c3336",
      "patch": "@@ -191,7 +191,7 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boo\n         } else {\r\n             for (Subscription subscription : subscriptions) {\r\n                 if (subscription.equals(newSubscription)) {\r\n-                    throw new RuntimeException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\r\n+                    throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\r\n                             + eventType);\r\n                 }\r\n             }\r\n@@ -427,7 +427,8 @@ void invokeSubscriber(Subscription subscription, Object event) throws Error {\n                     Log.e(TAG, \"Could not dispatch event: \" + event.getClass() + \" to subscribing class \"\r\n                             + subscription.subscriber.getClass(), cause);\r\n                 }\r\n-                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event, subscription.subscriber);\r\n+                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event,\r\n+                        subscription.subscriber);\r\n                 post(exEvent);\r\n             }\r\n         } catch (IllegalAccessException e) {\r",
      "parent_sha": "e71057dca7cb2fdd670fbe6898f1aed4fe98bc30"
    }
  },
  {
    "oid": "5773e4acf85acd0d8eae5130f6beab122fa6936e",
    "message": "subscriptions.contains (#120), minor code formatting changes",
    "date": "2014-11-08T23:42:05Z",
    "url": "https://github.com/greenrobot/EventBus/commit/5773e4acf85acd0d8eae5130f6beab122fa6936e",
    "details": {
      "sha": "9910ca37115c3848f4522d6c973b192f5f234c06",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 35,
      "deletions": 36,
      "changes": 71,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/5773e4acf85acd0d8eae5130f6beab122fa6936e/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/5773e4acf85acd0d8eae5130f6beab122fa6936e/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=5773e4acf85acd0d8eae5130f6beab122fa6936e",
      "patch": "@@ -34,7 +34,7 @@\n  * subscribers must register themselves to the bus using the {@link #register(Object)} method. Once registered,\n  * subscribers receive events until the call of {@link #unregister(Object)}. By convention, event handling methods must\n  * be named \"onEvent\", be public, return nothing (void), and have exactly one parameter (the event).\n- * \n+ *\n  * @author Markus Junginger, greenrobot\n  */\n public class EventBus {\n@@ -142,9 +142,9 @@ private void checkConfigurationAllowed() throws EventBusException {\n     }\n \n     /**\n-     * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they are\n-     * no longer interested in receiving events.\n-     * \n+     * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they\n+     * are no longer interested in receiving events.\n+     * <p/>\n      * Subscribers have event handling methods that are identified by their name, typically called \"onEvent\". Event\n      * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a\n      * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}\n@@ -182,7 +182,7 @@ public void registerSticky(Object subscriber) {\n     }\n \n     /**\n-     * Like {@link #register(Object,int)}, but also triggers delivery of the most recent sticky event (posted with\n+     * Like {@link #register(Object, int)}, but also triggers delivery of the most recent sticky event (posted with\n      * {@link #postSticky(Object)}) to the given subscriber.\n      */\n     public void registerSticky(Object subscriber, int priority) {\n@@ -238,7 +238,7 @@ public void registerSticky(Object subscriber, String methodName, Class<?> eventT\n     }\n \n     private synchronized void register(Object subscriber, String methodName, boolean sticky, Class<?> eventType,\n-            Class<?>... moreEventTypes) {\n+                                       Class<?>... moreEventTypes) {\n         Class<?> subscriberClass = subscriber.getClass();\n         List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass,\n                 methodName);\n@@ -266,11 +266,9 @@ private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boo\n             subscriptions = new CopyOnWriteArrayList<Subscription>();\n             subscriptionsByEventType.put(eventType, subscriptions);\n         } else {\n-            for (Subscription subscription : subscriptions) {\n-                if (subscription.equals(newSubscription)) {\n-                    throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\n-                            + eventType);\n-                }\n+            if (subscriptions.contains(newSubscription)) {\n+                throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\n+                        + eventType);\n             }\n         }\n \n@@ -385,7 +383,8 @@ public void post(Object event) {\n     }\n \n     /**\n-     * Called from a subscriber's event handling method, further event delivery will be canceled. Subsequent subscribers\n+     * Called from a subscriber's event handling method, further event delivery will be canceled. Subsequent\n+     * subscribers\n      * won't receive the event. Events are usually canceled by higher priority subscribers (see\n      * {@link #register(Object, int)}). Canceling is restricted to event handling methods running in posting thread\n      * {@link ThreadMode#PostThread}.\n@@ -421,7 +420,7 @@ public void postSticky(Object event) {\n \n     /**\n      * Gets the most recent sticky event for the given type.\n-     * \n+     *\n      * @see #postSticky(Object)\n      */\n     public <T> T getStickyEvent(Class<T> eventType) {\n@@ -432,7 +431,7 @@ public <T> T getStickyEvent(Class<T> eventType) {\n \n     /**\n      * Remove and gets the recent sticky event for the given event type.\n-     * \n+     *\n      * @see #postSticky(Object)\n      */\n     public <T> T removeStickyEvent(Class<T> eventType) {\n@@ -443,7 +442,7 @@ public <T> T removeStickyEvent(Class<T> eventType) {\n \n     /**\n      * Removes the sticky event if it equals to the given event.\n-     * \n+     *\n      * @return true if the events matched and the sticky event was removed.\n      */\n     public boolean removeStickyEvent(Object event) {\n@@ -511,28 +510,28 @@ private void postSingleEvent(Object event, PostingThreadState postingState) thro\n \n     private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {\n         switch (subscription.subscriberMethod.threadMode) {\n-        case PostThread:\n-            invokeSubscriber(subscription, event);\n-            break;\n-        case MainThread:\n-            if (isMainThread) {\n-                invokeSubscriber(subscription, event);\n-            } else {\n-                mainThreadPoster.enqueue(subscription, event);\n-            }\n-            break;\n-        case BackgroundThread:\n-            if (isMainThread) {\n-                backgroundPoster.enqueue(subscription, event);\n-            } else {\n+            case PostThread:\n                 invokeSubscriber(subscription, event);\n-            }\n-            break;\n-        case Async:\n-            asyncPoster.enqueue(subscription, event);\n-            break;\n-        default:\n-            throw new IllegalStateException(\"Unknown thread mode: \" + subscription.subscriberMethod.threadMode);\n+                break;\n+            case MainThread:\n+                if (isMainThread) {\n+                    invokeSubscriber(subscription, event);\n+                } else {\n+                    mainThreadPoster.enqueue(subscription, event);\n+                }\n+                break;\n+            case BackgroundThread:\n+                if (isMainThread) {\n+                    backgroundPoster.enqueue(subscription, event);\n+                } else {\n+                    invokeSubscriber(subscription, event);\n+                }\n+                break;\n+            case Async:\n+                asyncPoster.enqueue(subscription, event);\n+                break;\n+            default:\n+                throw new IllegalStateException(\"Unknown thread mode: \" + subscription.subscriberMethod.threadMode);\n         }\n     }\n ",
      "parent_sha": "7edb8b2a15037e763754ad5db32a8860ef28d450"
    }
  },
  {
    "oid": "4b974f1c715535ab11af423d1537dd10d45f4c02",
    "message": "performance tweaks",
    "date": "2012-07-15T18:22:05Z",
    "url": "https://github.com/greenrobot/EventBus/commit/4b974f1c715535ab11af423d1537dd10d45f4c02",
    "details": {
      "sha": "d592d3ddf1a314059383bfdba7fb1c7ffb979e5d",
      "filename": "EventBus/src/de/greenrobot/event/EventBus.java",
      "status": "modified",
      "additions": 18,
      "deletions": 8,
      "changes": 26,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/4b974f1c715535ab11af423d1537dd10d45f4c02/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/4b974f1c715535ab11af423d1537dd10d45f4c02/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Fde%2Fgreenrobot%2Fevent%2FEventBus.java?ref=4b974f1c715535ab11af423d1537dd10d45f4c02",
      "patch": "@@ -50,10 +50,10 @@ protected List<Object> initialValue() {\n         }\r\n     };\r\n \r\n-    private final ThreadLocal<Boolean> currentThreadIsPosting = new ThreadLocal<Boolean>() {\r\n+    private final ThreadLocal<BooleanWrapper> currentThreadIsPosting = new ThreadLocal<BooleanWrapper>() {\r\n         @Override\r\n-        protected Boolean initialValue() {\r\n-            return false;\r\n+        protected BooleanWrapper initialValue() {\r\n+            return new BooleanWrapper();\r\n         }\r\n     };\r\n \r\n@@ -234,17 +234,18 @@ public void post(Object event) {\n         List<Object> eventQueue = eventsQueuedForCurrentThread.get();\r\n         eventQueue.add(event);\r\n \r\n-        if (currentThreadIsPosting.get()) {\r\n+        BooleanWrapper isPosting = currentThreadIsPosting.get();\r\n+        if (isPosting.value) {\r\n             return;\r\n         } else {\r\n-            currentThreadIsPosting.set(true);\r\n+            isPosting.value = true;\r\n             try {\r\n                 while (!eventQueue.isEmpty()) {\r\n                     Object eventToPost = eventQueue.remove(0);\r\n                     postSingleEvent(eventToPost);\r\n                 }\r\n             } finally {\r\n-                currentThreadIsPosting.set(false);\r\n+                isPosting.value = false;\r\n             }\r\n         }\r\n     }\r\n@@ -302,7 +303,7 @@ private void addInterfaces(List<Class<?>> eventTypes, Class<?>[] interfaces) {\n         }\r\n     }\r\n \r\n-    private List<Subscription> getSubscriptionsForEventTypeFromPool(Class<? extends Object> clazz) {\r\n+    private List<Subscription> getSubscriptionsForEventTypeFromPool(Class<?> clazz) {\r\n         // Don't block other threads during event handling, just grab the subscriptions to call\r\n         List<Subscription> subscriptions;\r\n         synchronized (this) {\r\n@@ -317,7 +318,11 @@ private List<Subscription> getSubscriptionsForEventTypeFromPool(Class<? extends\n                         throw new RuntimeException(\"Post queue from pool was not empty\");\r\n                     }\r\n                 }\r\n-                subscriptions.addAll(list);\r\n+                // Avoid subscriptions.addAll(list) because it restructures the list and is expensive\r\n+                int size = list.size();\r\n+                for (int i = 0; i < size; i++) {\r\n+                    subscriptions.add(list.get(i));\r\n+                }\r\n                 return subscriptions;\r\n             } else {\r\n                 return null;\r\n@@ -367,4 +372,9 @@ public int hashCode() {\n         }\r\n     }\r\n \r\n+    /** For ThreadLocal, much faster to set than storing a new Boolean. */\r\n+    static class BooleanWrapper {\r\n+        boolean value;\r\n+    }\r\n+\r\n }\r",
      "parent_sha": "715b5cb601bf109e87040a04b72e0295983bedbc"
    }
  },
  {
    "oid": "e573ffa2b1877398ca95a32f53a1c45363852bc7",
    "message": "Regression: correctly check for Android main thread.",
    "date": "2021-06-29T12:05:13Z",
    "url": "https://github.com/greenrobot/EventBus/commit/e573ffa2b1877398ca95a32f53a1c45363852bc7",
    "details": {
      "sha": "02b3f3afa475ec396769c861e8ab7e5149a61b35",
      "filename": "eventbus-android/src/main/java/org/greenrobot/eventbus/android/DefaultAndroidMainThreadSupport.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/e573ffa2b1877398ca95a32f53a1c45363852bc7/eventbus-android%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Feventbus%2Fandroid%2FDefaultAndroidMainThreadSupport.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/e573ffa2b1877398ca95a32f53a1c45363852bc7/eventbus-android%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Feventbus%2Fandroid%2FDefaultAndroidMainThreadSupport.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/eventbus-android%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Feventbus%2Fandroid%2FDefaultAndroidMainThreadSupport.java?ref=e573ffa2b1877398ca95a32f53a1c45363852bc7",
      "patch": "@@ -10,7 +10,7 @@ public class DefaultAndroidMainThreadSupport implements MainThreadSupport {\n \n     @Override\n     public boolean isMainThread() {\n-        return true;\n+        return Looper.getMainLooper() == Looper.myLooper();\n     }\n \n     @Override",
      "parent_sha": "45352be3f13374f545679f1f3d793e0e0a3e16f4"
    }
  },
  {
    "oid": "d47baf2208e1e7a70d57dc4bfa9fa6507d9a13e1",
    "message": "fix lint error: Multi-catch with these reflection exceptions requires API level 19 (current min is 7)",
    "date": "2017-04-10T08:48:03Z",
    "url": "https://github.com/greenrobot/EventBus/commit/d47baf2208e1e7a70d57dc4bfa9fa6507d9a13e1",
    "details": {
      "sha": "9020c24b79a09ac7ad63dcacea42849633cdb63c",
      "filename": "EventBus/src/org/greenrobot/eventbus/meta/AbstractSubscriberInfo.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/EventBus/blob/d47baf2208e1e7a70d57dc4bfa9fa6507d9a13e1/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fmeta%2FAbstractSubscriberInfo.java",
      "raw_url": "https://github.com/greenrobot/EventBus/raw/d47baf2208e1e7a70d57dc4bfa9fa6507d9a13e1/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fmeta%2FAbstractSubscriberInfo.java",
      "contents_url": "https://api.github.com/repos/greenrobot/EventBus/contents/EventBus%2Fsrc%2Forg%2Fgreenrobot%2Feventbus%2Fmeta%2FAbstractSubscriberInfo.java?ref=d47baf2208e1e7a70d57dc4bfa9fa6507d9a13e1",
      "patch": "@@ -46,7 +46,9 @@ public SubscriberInfo getSuperSubscriberInfo() {\n         }\n         try {\n             return superSubscriberInfoClass.newInstance();\n-        } catch (InstantiationException | IllegalAccessException e) {\n+        } catch (InstantiationException e) {\n+            throw new RuntimeException(e);\n+        } catch (IllegalAccessException e) {\n             throw new RuntimeException(e);\n         }\n     }",
      "parent_sha": "7504c43a9beb3771f5863c51426354ea22698d0f"
    }
  }
]