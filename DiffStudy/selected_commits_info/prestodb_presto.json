[
  {
    "oid": "b1ab1e42ffb16d6f8094879a795c63179a93e258",
    "message": "Unblock TestPrestoNativeHiveExternalTableTpchQueriesParquet\n\nhttps://github.com/prestodb/presto/issues/23908",
    "date": "2024-10-29T20:45:00Z",
    "url": "https://github.com/prestodb/presto/commit/b1ab1e42ffb16d6f8094879a795c63179a93e258",
    "details": {
      "sha": "2e4e0ff6826a590b9b4d8006847cf04595bceed2",
      "filename": "presto-native-execution/src/test/java/com/facebook/presto/nativeworker/AbstractTestNativeHiveExternalTableTpchQueries.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/prestodb/presto/blob/b1ab1e42ffb16d6f8094879a795c63179a93e258/presto-native-execution%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fnativeworker%2FAbstractTestNativeHiveExternalTableTpchQueries.java",
      "raw_url": "https://github.com/prestodb/presto/raw/b1ab1e42ffb16d6f8094879a795c63179a93e258/presto-native-execution%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fnativeworker%2FAbstractTestNativeHiveExternalTableTpchQueries.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-native-execution%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fnativeworker%2FAbstractTestNativeHiveExternalTableTpchQueries.java?ref=b1ab1e42ffb16d6f8094879a795c63179a93e258",
      "patch": "@@ -41,7 +41,6 @@\n import static com.facebook.presto.nativeworker.PrestoNativeQueryRunnerUtils.createExternalTable;\n import static com.facebook.presto.nativeworker.SymlinkManifestGeneratorUtils.cleanupSymlinkData;\n import static com.facebook.presto.tpch.TpchMetadata.getPrestoType;\n-import static java.lang.String.format;\n \n public abstract class AbstractTestNativeHiveExternalTableTpchQueries\n         extends AbstractTestNativeTpchQueries\n@@ -114,7 +113,9 @@ public void tearDown()\n         for (String tableName : TPCH_TABLES) {\n             dropTableIfExists(javaQueryRunner, HIVE, TPCH, tableName);\n         }\n-        assertUpdate(format(\"DROP SCHEMA IF EXISTS %s.%s\", HIVE, TPCH));\n+\n+        // https://github.com/prestodb/presto/issues/23908\n+        // assertUpdate(format(\"DROP SCHEMA IF EXISTS %s.%s\", HIVE, TPCH));\n \n         File dataDirectory = ((DistributedQueryRunner) javaQueryRunner).getCoordinator().getDataDirectory().resolve(HIVE_DATA).toFile();\n         Path symlinkTableDataPath = dataDirectory.toPath().getParent().resolve(SYMLINK_FOLDER);",
      "parent_sha": "afccfedeff85cfedebc852f090695d911a2d1c17"
    }
  },
  {
    "oid": "93e322e6f3be84e959fa4df4b819d92b8efeb1a8",
    "message": "Annotate guarded methods to silence IDE warnings",
    "date": "2018-05-31T19:39:12Z",
    "url": "https://github.com/prestodb/presto/commit/93e322e6f3be84e959fa4df4b819d92b8efeb1a8",
    "details": {
      "sha": "424383c197ad4015f0f4ac53b88ccde4ebb56e07",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/authentication/CachingKerberosHadoopAuthentication.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/prestodb/presto/blob/93e322e6f3be84e959fa4df4b819d92b8efeb1a8/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fauthentication%2FCachingKerberosHadoopAuthentication.java",
      "raw_url": "https://github.com/prestodb/presto/raw/93e322e6f3be84e959fa4df4b819d92b8efeb1a8/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fauthentication%2FCachingKerberosHadoopAuthentication.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fauthentication%2FCachingKerberosHadoopAuthentication.java?ref=93e322e6f3be84e959fa4df4b819d92b8efeb1a8",
      "patch": "@@ -51,18 +51,20 @@ public UserGroupInformation getUserGroupInformation()\n         }\n     }\n \n+    @GuardedBy(\"lock\")\n     private void refreshUgi()\n     {\n         userGroupInformation = delegate.getUserGroupInformation();\n         nextRefreshTime = calculateNextRefreshTime(userGroupInformation);\n     }\n \n+    @GuardedBy(\"lock\")\n     private boolean refreshIsNeeded()\n     {\n         return nextRefreshTime < System.currentTimeMillis() || userGroupInformation == null;\n     }\n \n-    private long calculateNextRefreshTime(UserGroupInformation userGroupInformation)\n+    private static long calculateNextRefreshTime(UserGroupInformation userGroupInformation)\n     {\n         Subject subject = getSubject(userGroupInformation);\n         checkArgument(subject != null, \"subject must be present in kerberos based UGI\");",
      "parent_sha": "7d47eeb419fe0c21d5aff070c6cc0409ccc0771b"
    }
  },
  {
    "oid": "014ba1a2c9c124539cf0ad88035f0d656a39cc09",
    "message": "Fix to adjusted queue size for multi coordinator",
    "date": "2021-06-30T19:04:43Z",
    "url": "https://github.com/prestodb/presto/commit/014ba1a2c9c124539cf0ad88035f0d656a39cc09",
    "details": {
      "sha": "553da4aecbabbe2cbe2c5fc19d26a1ed292e8327",
      "filename": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/prestodb/presto/blob/014ba1a2c9c124539cf0ad88035f0d656a39cc09/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FresourceGroups%2FInternalResourceGroupManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/014ba1a2c9c124539cf0ad88035f0d656a39cc09/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FresourceGroups%2FInternalResourceGroupManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FresourceGroups%2FInternalResourceGroupManager.java?ref=014ba1a2c9c124539cf0ad88035f0d656a39cc09",
      "patch": "@@ -395,10 +395,19 @@ public long getLastSchedulingCycleRuntimeDelayMs()\n         return currentTimeMillis() - lastSchedulingCycleRunTimeMs.get();\n     }\n \n-    private static int getQueriesQueuedOnInternal(InternalResourceGroup resourceGroup)\n+    private int getQueriesQueuedOnInternal(InternalResourceGroup resourceGroup)\n     {\n         if (resourceGroup.subGroups().isEmpty()) {\n-            return Math.max(Math.min(resourceGroup.getQueuedQueries(), resourceGroup.getSoftConcurrencyLimit() - resourceGroup.getRunningQueries()), 0);\n+            int queuedQueries = resourceGroup.getQueuedQueries();\n+            int runningQueries = resourceGroup.getRunningQueries();\n+            if (isResourceManagerEnabled) {\n+                ResourceGroupRuntimeInfo resourceGroupRuntimeInfo = resourceGroupRuntimeInfos.get().get(resourceGroup.getId());\n+                if (resourceGroupRuntimeInfo != null) {\n+                    queuedQueries += resourceGroupRuntimeInfo.getQueuedQueries();\n+                    runningQueries += resourceGroupRuntimeInfo.getRunningQueries();\n+                }\n+            }\n+            return Math.max(Math.min(queuedQueries, resourceGroup.getSoftConcurrencyLimit() - runningQueries), 0);\n         }\n \n         int queriesQueuedInternal = 0;",
      "parent_sha": "98cfd412b55cb46599ab071646d609284b27ef69"
    }
  },
  {
    "oid": "e5dbe7ca1cb519f50a7b13fc1a775e5ba966ab89",
    "message": "Optimize fetching columns for single table",
    "date": "2016-10-03T18:57:03Z",
    "url": "https://github.com/prestodb/presto/commit/e5dbe7ca1cb519f50a7b13fc1a775e5ba966ab89",
    "details": {
      "sha": "143976cc62809634878ab538b4b83a970f4e5530",
      "filename": "presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcMetadata.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/prestodb/presto/blob/e5dbe7ca1cb519f50a7b13fc1a775e5ba966ab89/presto-base-jdbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fplugin%2Fjdbc%2FJdbcMetadata.java",
      "raw_url": "https://github.com/prestodb/presto/raw/e5dbe7ca1cb519f50a7b13fc1a775e5ba966ab89/presto-base-jdbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fplugin%2Fjdbc%2FJdbcMetadata.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-base-jdbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fplugin%2Fjdbc%2FJdbcMetadata.java?ref=e5dbe7ca1cb519f50a7b13fc1a775e5ba966ab89",
      "patch": "@@ -120,7 +120,14 @@ public Map<String, ColumnHandle> getColumnHandles(ConnectorSession session, Conn\n     public Map<SchemaTableName, List<ColumnMetadata>> listTableColumns(ConnectorSession session, SchemaTablePrefix prefix)\n     {\n         ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> columns = ImmutableMap.builder();\n-        for (SchemaTableName tableName : listTables(session, prefix.getSchemaName())) {\n+        List<SchemaTableName> tables;\n+        if (prefix.getTableName() != null) {\n+            tables = ImmutableList.of(new SchemaTableName(prefix.getSchemaName(), prefix.getTableName()));\n+        }\n+        else {\n+            tables = listTables(session, prefix.getSchemaName());\n+        }\n+        for (SchemaTableName tableName : tables) {\n             try {\n                 JdbcTableHandle tableHandle = jdbcClient.getTableHandle(tableName);\n                 if (tableHandle == null) {",
      "parent_sha": "de0a9ed50cf01da6e1fe118d964dd7c7f4f5d8c2"
    }
  },
  {
    "oid": "3dd9009fa871ad86bf8d60c88cf0b2fdcfebef70",
    "message": "Use parseValue instead of valueOf which creates an object",
    "date": "2012-11-08T22:58:05Z",
    "url": "https://github.com/prestodb/presto/commit/3dd9009fa871ad86bf8d60c88cf0b2fdcfebef70",
    "details": {
      "sha": "b6f80a57ac39aca9fd935d50160cd932f7e27883",
      "filename": "presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/prestodb/presto/blob/3dd9009fa871ad86bf8d60c88cf0b2fdcfebef70/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftuple%2FTupleInfo.java",
      "raw_url": "https://github.com/prestodb/presto/raw/3dd9009fa871ad86bf8d60c88cf0b2fdcfebef70/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftuple%2FTupleInfo.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftuple%2FTupleInfo.java?ref=3dd9009fa871ad86bf8d60c88cf0b2fdcfebef70",
      "patch": "@@ -61,13 +61,13 @@ public enum Type\n                     @Override\n                     public void convert(String value, BlockBuilder blockBuilder)\n                     {\n-                        blockBuilder.append(Long.valueOf(value));\n+                        blockBuilder.append(Long.parseLong(value));\n                     }\n \n                     @Override\n                     public void convert(String value, TupleInfo.Builder tupleBuilder)\n                     {\n-                        tupleBuilder.append(Long.valueOf(value));\n+                        tupleBuilder.append(Long.parseLong(value));\n                     }\n                 },\n         VARIABLE_BINARY(-1, \"string\")\n@@ -89,13 +89,13 @@ public void convert(String value, TupleInfo.Builder tupleBuilder)\n                     @Override\n                     public void convert(String value, BlockBuilder blockBuilder)\n                     {\n-                        blockBuilder.append(Double.valueOf(value));\n+                        blockBuilder.append(Double.parseDouble(value));\n                     }\n \n                     @Override\n                     public void convert(String value, TupleInfo.Builder tupleBuilder)\n                     {\n-                        tupleBuilder.append(Double.valueOf(value));\n+                        tupleBuilder.append(Double.parseDouble(value));\n                     }\n                 };\n ",
      "parent_sha": "88a459077870046c5f1a9fa61929b1ac1aae583c"
    }
  },
  {
    "oid": "172a552a266dac2a342e00397a3017cc0f3c2448",
    "message": "Improve shuffle statistics collection",
    "date": "2020-08-14T22:00:07Z",
    "url": "https://github.com/prestodb/presto/commit/172a552a266dac2a342e00397a3017cc0f3c2448",
    "details": {
      "sha": "05fb042682a643bf1949c3cfa1ba6c726b7b3eb5",
      "filename": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/prestodb/presto/blob/172a552a266dac2a342e00397a3017cc0f3c2448/presto-spark-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspark%2Fexecution%2FPrestoSparkTaskExecutorFactory.java",
      "raw_url": "https://github.com/prestodb/presto/raw/172a552a266dac2a342e00397a3017cc0f3c2448/presto-spark-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspark%2Fexecution%2FPrestoSparkTaskExecutorFactory.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-spark-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspark%2Fexecution%2FPrestoSparkTaskExecutorFactory.java?ref=172a552a266dac2a342e00397a3017cc0f3c2448",
      "patch": "@@ -493,7 +493,7 @@ private static class PrestoSparkTaskExecutor<T extends PrestoSparkTaskOutput>\n \n         private Tuple2<MutablePartitionId, T> next;\n \n-        private final long start = System.currentTimeMillis();\n+        private Long start;\n         private long processedRows;\n         private long processedRowBatches;\n         private long processedBytes;\n@@ -561,6 +561,9 @@ protected Tuple2<MutablePartitionId, T> computeNext()\n         private Tuple2<MutablePartitionId, T> doComputeNext()\n                 throws InterruptedException\n         {\n+            if (start == null) {\n+                start = System.currentTimeMillis();\n+            }\n             Tuple2<MutablePartitionId, T> output = outputSupplier.getNext();\n \n             if (output != null) {",
      "parent_sha": "c8d9198860b46f6da72be2605ac2ac642c422184"
    }
  },
  {
    "oid": "8c620762c3e199743300d24c78b6c1cb886a4f8f",
    "message": "inline columnHandlesHasErrorMessageField",
    "date": "2020-10-26T16:42:03Z",
    "url": "https://github.com/prestodb/presto/commit/8c620762c3e199743300d24c78b6c1cb886a4f8f",
    "details": {
      "sha": "336abbd702af866d8aab9cbf58860dbde7c9e613",
      "filename": "presto-druid/src/main/java/com/facebook/presto/druid/DruidBrokerPageSource.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/prestodb/presto/blob/8c620762c3e199743300d24c78b6c1cb886a4f8f/presto-druid%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fdruid%2FDruidBrokerPageSource.java",
      "raw_url": "https://github.com/prestodb/presto/raw/8c620762c3e199743300d24c78b6c1cb886a4f8f/presto-druid%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fdruid%2FDruidBrokerPageSource.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-druid%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fdruid%2FDruidBrokerPageSource.java?ref=8c620762c3e199743300d24c78b6c1cb886a4f8f",
      "patch": "@@ -60,7 +60,6 @@ public class DruidBrokerPageSource\n     private BufferedReader responseStream;\n     private final PageBuilder pageBuilder;\n     private List<Type> columnTypes;\n-    private boolean columnHandlesHasErrorMessageField;\n \n     public DruidBrokerPageSource(\n             GeneratedDql brokerDql,\n@@ -78,8 +77,6 @@ public DruidBrokerPageSource(\n                 .map(DruidColumnHandle::getColumnType)\n                 .collect(toImmutableList());\n         this.pageBuilder = new PageBuilder(this.columnTypes);\n-        this.columnHandlesHasErrorMessageField = columnHandles.stream().anyMatch(\n-                handle -> ((DruidColumnHandle)handle).getColumnName().equals(\"errorMessage\"));\n     }\n \n     @Override\n@@ -114,6 +111,8 @@ public Page getNextPage()\n         }\n \n         long start = System.nanoTime();\n+        boolean columnHandlesHasErrorMessageField = columnHandles.stream().anyMatch(\n+                handle -> ((DruidColumnHandle) handle).getColumnName().equals(\"errorMessage\"));\n         try {\n             String readLine;\n             while ((readLine = responseStream.readLine()) != null) {",
      "parent_sha": "e2055f1a3e6e878daa921725e62a2594986c9f28"
    }
  },
  {
    "oid": "c9ff241a5ce8d1b49312dec76052219670268ae5",
    "message": "Support SymlinkTextInputFormat for Hive",
    "date": "2013-02-12T19:02:12Z",
    "url": "https://github.com/prestodb/presto/commit/c9ff241a5ce8d1b49312dec76052219670268ae5",
    "details": {
      "sha": "f03952d9da76488b8ab5b046cfe298c6704728d0",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java",
      "status": "modified",
      "additions": 25,
      "deletions": 5,
      "changes": 30,
      "blob_url": "https://github.com/prestodb/presto/blob/c9ff241a5ce8d1b49312dec76052219670268ae5/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveClient.java",
      "raw_url": "https://github.com/prestodb/presto/raw/c9ff241a5ce8d1b49312dec76052219670268ae5/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveClient.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveClient.java?ref=c9ff241a5ce8d1b49312dec76052219670268ae5",
      "patch": "@@ -19,7 +19,6 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Iterables;\n-import com.google.common.collect.Iterators;\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.FutureCallback;\n import com.google.common.util.concurrent.Futures;\n@@ -36,6 +35,7 @@\n import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n import org.apache.hadoop.hive.metastore.api.Partition;\n import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.SymlinkTextInputFormat;\n import org.apache.hadoop.hive.serde.Constants;\n import org.apache.hadoop.hive.serde2.ColumnProjectionUtils;\n import org.apache.hadoop.hive.serde2.Deserializer;\n@@ -49,8 +49,10 @@\n import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;\n import org.apache.hadoop.io.Writable;\n+import org.apache.hadoop.mapred.FileInputFormat;\n import org.apache.hadoop.mapred.FileSplit;\n import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.InputSplit;\n import org.apache.hadoop.mapred.JobConf;\n import org.apache.hadoop.mapred.RecordReader;\n import org.apache.hadoop.mapred.Reporter;\n@@ -82,6 +84,7 @@\n import static com.google.common.collect.Lists.transform;\n import static java.lang.Math.min;\n import static org.apache.hadoop.hive.metastore.api.Constants.FILE_INPUT_FORMAT;\n+import static org.apache.hadoop.hive.ql.io.SymlinkTextInputFormat.SymlinkTextInputSplit;\n \n @SuppressWarnings(\"deprecation\")\n public class HiveClient\n@@ -348,7 +351,7 @@ public RecordCursor getRecords(PartitionChunk partitionChunk)\n \n     private RecordReader<?, ?> createRecordReader(HivePartitionChunk chunk)\n     {\n-        InputFormat inputFormat = getInputFormat(chunk.getSchema());\n+        InputFormat inputFormat = getInputFormat(chunk.getSchema(), true);\n         FileSplit split = new FileSplit(chunk.getPath(), chunk.getStart(), chunk.getLength(), (String[]) null);\n         JobConf jobConf = new JobConf(HADOOP_CONFIGURATION.get());\n \n@@ -360,7 +363,7 @@ public RecordCursor getRecords(PartitionChunk partitionChunk)\n         }\n     }\n \n-    private static InputFormat getInputFormat(Properties schema)\n+    private static InputFormat getInputFormat(Properties schema, boolean symlinkTarget)\n     {\n         String inputFormatName = getInputFormatName(schema);\n         try {\n@@ -372,10 +375,14 @@ private static InputFormat getInputFormat(Properties schema)\n                 // default file format in Hadoop is TextInputFormat\n                 inputFormatClass = TextInputFormat.class;\n             }\n+            else if (symlinkTarget && (inputFormatClass == SymlinkTextInputFormat.class)) {\n+                // symlink targets are always TextInputFormat\n+                inputFormatClass = TextInputFormat.class;\n+            }\n             return ReflectionUtils.newInstance(inputFormatClass, jobConf);\n         }\n         catch (Exception e) {\n-            throw new RuntimeException(\"Unable to create record reader for input format \" + inputFormatName, e);\n+            throw new RuntimeException(\"Unable to create input format \" + inputFormatName, e);\n         }\n     }\n \n@@ -528,8 +535,21 @@ public Iterator<PartitionChunk> iterator()\n                 for (Partition partition : partitions) {\n                     final Properties schema = MetaStoreUtils.getSchema(partition, table);\n                     final List<HivePartitionKey> partitionKeys = getPartitionKeys(table, partition);\n-                    final InputFormat inputFormat = getInputFormat(schema);\n+                    final InputFormat inputFormat = getInputFormat(schema, false);\n                     Path partitionPath = new CachingPath(partition.getSd().getLocation());\n+\n+                    if (inputFormat instanceof SymlinkTextInputFormat) {\n+                        JobConf jobConf = new JobConf(HADOOP_CONFIGURATION.get());\n+                        FileInputFormat.setInputPaths(jobConf, partitionPath);\n+                        InputSplit[] splits = inputFormat.getSplits(jobConf, 0);\n+                        for (InputSplit rawSplit : splits) {\n+                            FileSplit split = ((SymlinkTextInputSplit) rawSplit).getTargetSplit();\n+                            partitionChunkQueue.addToQueue(new HivePartitionChunk(\n+                                    split.getPath(), split.getStart(), split.getLength(), schema, partitionKeys, columns));\n+                        }\n+                        continue;\n+                    }\n+\n                     FileSystem fs = partitionPath.getFileSystem(HADOOP_CONFIGURATION.get());\n \n                     futureBuilder.add(new AsyncRecursiveWalker(fs, suspendingExecutor).beginWalk(partitionPath, new FileStatusCallback()",
      "parent_sha": "7cb41867ef74d8a95f6d014c5ae3af3e26fe0b66"
    }
  },
  {
    "oid": "85fa3e7df41d7acb6c0a7d304eb58441d19449e7",
    "message": "Remove Redundant Parquet Column Index Lookups\n\nPreviously, the parquet column index was repeatedly looked up to\ndetermine whether the column exists in the underlying file. This\nis unnecessary since this already occurs during the field creation\nand the presence or absence of a Field entry a sufficient check.",
    "date": "2019-12-11T15:22:24Z",
    "url": "https://github.com/prestodb/presto/commit/85fa3e7df41d7acb6c0a7d304eb58441d19449e7",
    "details": {
      "sha": "dcd92e8070c2231820a275ac46328fccd9df1e8f",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetPageSource.java",
      "status": "modified",
      "additions": 7,
      "deletions": 36,
      "changes": 43,
      "blob_url": "https://github.com/prestodb/presto/blob/85fa3e7df41d7acb6c0a7d304eb58441d19449e7/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetPageSource.java",
      "raw_url": "https://github.com/prestodb/presto/raw/85fa3e7df41d7acb6c0a7d304eb58441d19449e7/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetPageSource.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetPageSource.java?ref=85fa3e7df41d7acb6c0a7d304eb58441d19449e7",
      "patch": "@@ -40,7 +40,6 @@\n import static com.facebook.presto.hive.HiveErrorCode.HIVE_BAD_DATA;\n import static com.facebook.presto.hive.HiveErrorCode.HIVE_CURSOR_ERROR;\n import static com.facebook.presto.hive.parquet.ParquetPageSourceFactory.getParquetType;\n-import static com.facebook.presto.parquet.ParquetTypeUtils.getFieldIndex;\n import static com.facebook.presto.parquet.ParquetTypeUtils.lookupColumnByName;\n import static com.google.common.base.Preconditions.checkState;\n import static java.util.Objects.requireNonNull;\n@@ -49,22 +48,15 @@\n public class ParquetPageSource\n         implements ConnectorPageSource\n {\n-    private static final int MAX_VECTOR_LENGTH = 1024;\n-\n     private final ParquetReader parquetReader;\n-    private final MessageType fileSchema;\n     // for debugging heap dump\n     private final List<String> columnNames;\n     private final List<Type> types;\n     private final List<Optional<Field>> fields;\n \n-    private final Block[] constantBlocks;\n-    private final int[] hiveColumnIndexes;\n-\n     private int batchId;\n     private long completedPositions;\n     private boolean closed;\n-    private final boolean useParquetColumnNames;\n \n     public ParquetPageSource(\n             ParquetReader parquetReader,\n@@ -77,34 +69,26 @@ public ParquetPageSource(\n     {\n         requireNonNull(columns, \"columns is null\");\n         requireNonNull(effectivePredicate, \"effectivePredicate is null\");\n+        requireNonNull(fileSchema, \"fileSchema is null\");\n         this.parquetReader = requireNonNull(parquetReader, \"parquetReader is null\");\n-        this.fileSchema = requireNonNull(fileSchema, \"fileSchema is null\");\n-        this.useParquetColumnNames = useParquetColumnNames;\n-\n-        int size = columns.size();\n-        this.constantBlocks = new Block[size];\n-        this.hiveColumnIndexes = new int[size];\n \n         ImmutableList.Builder<String> namesBuilder = ImmutableList.builder();\n         ImmutableList.Builder<Type> typesBuilder = ImmutableList.builder();\n         ImmutableList.Builder<Optional<Field>> fieldsBuilder = ImmutableList.builder();\n-        for (int columnIndex = 0; columnIndex < size; columnIndex++) {\n-            HiveColumnHandle column = columns.get(columnIndex);\n+        for (HiveColumnHandle column : columns) {\n             checkState(column.getColumnType() == REGULAR, \"column type must be regular\");\n \n             String name = column.getName();\n             Type type = typeManager.getType(column.getTypeSignature());\n \n             namesBuilder.add(name);\n             typesBuilder.add(type);\n-            hiveColumnIndexes[columnIndex] = column.getHiveColumnIndex();\n \n             if (getParquetType(type, fileSchema, useParquetColumnNames, column).isPresent()) {\n                 String columnName = useParquetColumnNames ? name : fileSchema.getFields().get(column.getHiveColumnIndex()).getName();\n                 fieldsBuilder.add(constructField(type, lookupColumnByName(messageColumnIO, columnName)));\n             }\n             else {\n-                constantBlocks[columnIndex] = RunLengthEncodedBlock.create(type, null, MAX_VECTOR_LENGTH);\n                 fieldsBuilder.add(Optional.empty());\n             }\n         }\n@@ -157,27 +141,14 @@ public Page getNextPage()\n \n             completedPositions += batchSize;\n \n-            Block[] blocks = new Block[hiveColumnIndexes.length];\n+            Block[] blocks = new Block[fields.size()];\n             for (int fieldId = 0; fieldId < blocks.length; fieldId++) {\n-                if (constantBlocks[fieldId] != null) {\n-                    blocks[fieldId] = constantBlocks[fieldId].getRegion(0, batchSize);\n+                Optional<Field> field = fields.get(fieldId);\n+                if (field.isPresent()) {\n+                    blocks[fieldId] = new LazyBlock(batchSize, new ParquetBlockLoader(field.get()));\n                 }\n                 else {\n-                    Type type = types.get(fieldId);\n-                    Optional<Field> field = fields.get(fieldId);\n-                    int fieldIndex;\n-                    if (useParquetColumnNames) {\n-                        fieldIndex = getFieldIndex(fileSchema, columnNames.get(fieldId));\n-                    }\n-                    else {\n-                        fieldIndex = hiveColumnIndexes[fieldId];\n-                    }\n-                    if (fieldIndex != -1 && field.isPresent()) {\n-                        blocks[fieldId] = new LazyBlock(batchSize, new ParquetBlockLoader(field.get()));\n-                    }\n-                    else {\n-                        blocks[fieldId] = RunLengthEncodedBlock.create(type, null, batchSize);\n-                    }\n+                    blocks[fieldId] = RunLengthEncodedBlock.create(types.get(fieldId), null, batchSize);\n                 }\n             }\n             return new Page(batchSize, blocks);",
      "parent_sha": "b6aa6e954680981651a2beb1239d017b56aa5261"
    }
  },
  {
    "oid": "c0b2d8511691a5ad7bcef00f5bc296aff6cbdb87",
    "message": "Rename test table name in testRcTextCharDecoding\n\nTest methods are run in parallel. As a result, different methods must not\nuse the same table name.",
    "date": "2017-05-18T17:38:00Z",
    "url": "https://github.com/prestodb/presto/commit/c0b2d8511691a5ad7bcef00f5bc296aff6cbdb87",
    "details": {
      "sha": "b6358c3c8ebef5a6b0b658a0c385686c52e6a4b0",
      "filename": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveDistributedQueries.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/prestodb/presto/blob/c0b2d8511691a5ad7bcef00f5bc296aff6cbdb87/presto-hive%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FTestHiveDistributedQueries.java",
      "raw_url": "https://github.com/prestodb/presto/raw/c0b2d8511691a5ad7bcef00f5bc296aff6cbdb87/presto-hive%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FTestHiveDistributedQueries.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FTestHiveDistributedQueries.java?ref=c0b2d8511691a5ad7bcef00f5bc296aff6cbdb87",
      "patch": "@@ -118,14 +118,14 @@ private void testRcTextCharDecoding(boolean rcFileOptimizedWriterEnabled, boolea\n                 .setCatalogSessionProperty(catalog, RCFILE_OPTIMIZED_READER_ENABLED, Boolean.toString(rcFileOptimizedReaderEnabled))\n                 .build();\n \n-        assertUpdate(session, \"CREATE TABLE test_table_with_char WITH (format = 'RCTEXT') AS SELECT CAST('khaki' AS CHAR(7)) char_column\", 1);\n+        assertUpdate(session, \"CREATE TABLE test_table_with_char_rc WITH (format = 'RCTEXT') AS SELECT CAST('khaki' AS CHAR(7)) char_column\", 1);\n         try {\n             assertQuery(session,\n-                    \"SELECT * FROM test_table_with_char WHERE char_column = 'khaki  '\",\n+                    \"SELECT * FROM test_table_with_char_rc WHERE char_column = 'khaki  '\",\n                     \"VALUES (CAST('khaki' AS CHAR(7)))\");\n         }\n         finally {\n-            assertUpdate(session, \"DROP TABLE test_table_with_char\");\n+            assertUpdate(session, \"DROP TABLE test_table_with_char_rc\");\n         }\n     }\n }",
      "parent_sha": "bf712edac03ae5a9013b04268c5aae150af60790"
    }
  },
  {
    "oid": "a733b68a0ff67aa2a658633feeb97da58bc231a1",
    "message": "Fix tests for raptor storage manager",
    "date": "2016-05-06T00:35:27Z",
    "url": "https://github.com/prestodb/presto/commit/a733b68a0ff67aa2a658633feeb97da58bc231a1",
    "details": {
      "sha": "d6a637ab0da818e55ebab3c8831944912ba0c80e",
      "filename": "presto-raptor/src/test/java/com/facebook/presto/raptor/storage/TestStorageManagerConfig.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/prestodb/presto/blob/a733b68a0ff67aa2a658633feeb97da58bc231a1/presto-raptor%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fstorage%2FTestStorageManagerConfig.java",
      "raw_url": "https://github.com/prestodb/presto/raw/a733b68a0ff67aa2a658633feeb97da58bc231a1/presto-raptor%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fstorage%2FTestStorageManagerConfig.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-raptor%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fstorage%2FTestStorageManagerConfig.java?ref=a733b68a0ff67aa2a658633feeb97da58bc231a1",
      "patch": "@@ -55,7 +55,8 @@ public void testDefaults()\n                 .setCompactionEnabled(true)\n                 .setMaxShardRows(1_000_000)\n                 .setMaxShardSize(new DataSize(256, MEGABYTE))\n-                .setMaxBufferSize(new DataSize(256, MEGABYTE)));\n+                .setMaxBufferSize(new DataSize(256, MEGABYTE))\n+                .setOneSplitPerBucketThreshold(0));\n     }\n \n     @Test\n@@ -77,6 +78,7 @@ public void testExplicitPropertyMappings()\n                 .put(\"storage.max-shard-rows\", \"10000\")\n                 .put(\"storage.max-shard-size\", \"10MB\")\n                 .put(\"storage.max-buffer-size\", \"512MB\")\n+                .put(\"storage.one-split-per-bucket-threshold\", \"4\")\n                 .build();\n \n         StorageManagerConfig expected = new StorageManagerConfig()\n@@ -94,7 +96,8 @@ public void testExplicitPropertyMappings()\n                 .setCompactionThreads(12)\n                 .setMaxShardRows(10_000)\n                 .setMaxShardSize(new DataSize(10, MEGABYTE))\n-                .setMaxBufferSize(new DataSize(512, MEGABYTE));\n+                .setMaxBufferSize(new DataSize(512, MEGABYTE))\n+                .setOneSplitPerBucketThreshold(4);\n \n         assertFullMapping(properties, expected);\n     }",
      "parent_sha": "dea6dd60212a67b478cb44adde792245be656a49"
    }
  },
  {
    "oid": "9a3b041b7d1fa99001c46366267647257869ea8f",
    "message": "Fix nondeterminism in TestQueryResource",
    "date": "2020-08-03T18:22:59Z",
    "url": "https://github.com/prestodb/presto/commit/9a3b041b7d1fa99001c46366267647257869ea8f",
    "details": {
      "sha": "23c5e749d36901f63c851a70386a82c3453e8b20",
      "filename": "presto-tests/src/test/java/com/facebook/presto/server/TestQueryResource.java",
      "status": "renamed",
      "additions": 42,
      "deletions": 17,
      "changes": 59,
      "blob_url": "https://github.com/prestodb/presto/blob/9a3b041b7d1fa99001c46366267647257869ea8f/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FTestQueryResource.java",
      "raw_url": "https://github.com/prestodb/presto/raw/9a3b041b7d1fa99001c46366267647257869ea8f/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FTestQueryResource.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FTestQueryResource.java?ref=9a3b041b7d1fa99001c46366267647257869ea8f",
      "patch": "@@ -17,9 +17,9 @@\n import com.facebook.airlift.http.client.Request;\n import com.facebook.airlift.http.client.jetty.JettyHttpClient;\n import com.facebook.presto.client.QueryResults;\n+import com.facebook.presto.resourceGroups.FileResourceGroupConfigurationManagerFactory;\n import com.facebook.presto.server.testing.TestingPrestoServer;\n-import com.facebook.presto.sql.parser.SqlParserOptions;\n-import com.google.common.collect.ImmutableList;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n@@ -38,6 +38,7 @@\n import static com.facebook.airlift.testing.Closeables.closeQuietly;\n import static com.facebook.presto.client.PrestoHeaders.PRESTO_USER;\n import static com.facebook.presto.testing.assertions.Assert.assertEquals;\n+import static com.facebook.presto.tests.tpch.TpchQueryRunner.createQueryRunner;\n import static java.lang.Thread.sleep;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.SECONDS;\n@@ -54,13 +55,11 @@ public void setup()\n             throws Exception\n     {\n         client = new JettyHttpClient();\n-        server = new TestingPrestoServer(\n-                true,\n-                ImmutableMap.of(\"query.client.timeout\", \"10s\"),\n-                \"testing\",\n-                null,\n-                new SqlParserOptions(),\n-                ImmutableList.of());\n+        DistributedQueryRunner runner = createQueryRunner(ImmutableMap.of(\"query.client.timeout\", \"10s\"));\n+        server = runner.getCoordinator();\n+        server.getResourceGroupManager().get().addConfigurationManagerFactory(new FileResourceGroupConfigurationManagerFactory());\n+        server.getResourceGroupManager().get()\n+                .setConfigurationManager(\"file\", ImmutableMap.of(\"resource-groups.config-file\", getResourceFilePath(\"resource_groups_config_simple.json\")));\n     }\n \n     @AfterClass(alwaysRun = true)\n@@ -79,33 +78,40 @@ public void testGetQueryInfos()\n         runToCompletion(\"SELECT 1\");\n         runToCompletion(\"SELECT 2\");\n         runToCompletion(\"SELECT x FROM y\");\n+        runToFirstResult(\"SELECT * from tpch.sf100.orders\");\n+        runToFirstResult(\"SELECT * from tpch.sf100.orders\");\n+        runToFirstResult(\"SELECT * from tpch.sf100.orders\");\n         runToQueued(\"SELECT 3\");\n \n         // Sleep to allow query to make some progress\n         sleep(SECONDS.toMillis(5));\n \n         List<BasicQueryInfo> infos = getQueryInfos(\"/v1/query\");\n-        assertEquals(infos.size(), 4);\n-        assertStateCounts(infos, 2, 1, 1);\n+        assertEquals(infos.size(), 7);\n+        assertStateCounts(infos, 2, 1, 3, 1);\n \n         infos = getQueryInfos(\"/v1/query?state=finished\");\n         assertEquals(infos.size(), 2);\n-        assertStateCounts(infos, 2, 0, 0);\n+        assertStateCounts(infos, 2, 0, 0, 0);\n \n         infos = getQueryInfos(\"/v1/query?state=failed\");\n         assertEquals(infos.size(), 1);\n-        assertStateCounts(infos, 0, 1, 0);\n+        assertStateCounts(infos, 0, 1, 0, 0);\n \n         infos = getQueryInfos(\"/v1/query?state=running\");\n+        assertEquals(infos.size(), 3);\n+        assertStateCounts(infos, 0, 0, 3, 0);\n+\n+        infos = getQueryInfos(\"/v1/query?state=queued\");\n         assertEquals(infos.size(), 1);\n-        assertStateCounts(infos, 0, 0, 1);\n+        assertStateCounts(infos, 0, 0, 0, 1);\n \n         // Sleep to trigger client query expiration\n         sleep(SECONDS.toMillis(10));\n \n         infos = getQueryInfos(\"/v1/query?state=failed\");\n-        assertEquals(infos.size(), 2);\n-        assertStateCounts(infos, 0, 2, 0);\n+        assertEquals(infos.size(), 5);\n+        assertStateCounts(infos, 0, 5, 0, 0);\n     }\n \n     private List<BasicQueryInfo> getQueryInfos(String path)\n@@ -123,6 +129,15 @@ private void runToCompletion(String sql)\n         }\n     }\n \n+    private void runToFirstResult(String sql)\n+    {\n+        URI uri = uriBuilderFrom(server.getBaseUrl().resolve(\"/v1/statement\")).build();\n+        QueryResults queryResults = postQuery(sql, uri);\n+        while (queryResults.getData() == null) {\n+            queryResults = getQueryResults(queryResults);\n+        }\n+    }\n+\n     private void runToQueued(String sql)\n     {\n         URI uri = uriBuilderFrom(server.getBaseUrl().resolve(\"/v1/statement\")).build();\n@@ -153,11 +168,12 @@ private QueryResults getQueryResults(QueryResults queryResults)\n         return queryResults;\n     }\n \n-    private void assertStateCounts(List<BasicQueryInfo> infos, int expectedFinished, int expectedFailed, int expectedRunning)\n+    private void assertStateCounts(List<BasicQueryInfo> infos, int expectedFinished, int expectedFailed, int expectedRunning, int expectedQueued)\n     {\n         int failed = 0;\n         int finished = 0;\n         int running = 0;\n+        int queued = 0;\n         for (BasicQueryInfo info : infos) {\n             switch (info.getState()) {\n                 case FINISHED:\n@@ -169,12 +185,21 @@ private void assertStateCounts(List<BasicQueryInfo> infos, int expectedFinished,\n                 case RUNNING:\n                     running++;\n                     break;\n+                case QUEUED:\n+                    queued++;\n+                    break;\n                 default:\n                     fail(\"Unexpected query state \" + info.getState());\n             }\n         }\n         assertEquals(failed, expectedFailed);\n         assertEquals(finished, expectedFinished);\n         assertEquals(running, expectedRunning);\n+        assertEquals(queued, expectedQueued);\n+    }\n+\n+    private String getResourceFilePath(String fileName)\n+    {\n+        return this.getClass().getClassLoader().getResource(fileName).getPath();\n     }\n }",
      "previous_filename": "presto-main/src/test/java/com/facebook/presto/server/TestQueryResource.java",
      "parent_sha": "5ebb3e2a51c4f1f230fae8d201005aff4d867685"
    }
  },
  {
    "oid": "dbc55f6f41085657f002dde90461d7b48623565f",
    "message": "Varchar(x) in Redis connector",
    "date": "2016-05-11T18:02:43Z",
    "url": "https://github.com/prestodb/presto/commit/dbc55f6f41085657f002dde90461d7b48623565f",
    "details": {
      "sha": "f942d091fdd9afd3334dec5857a8aab86d4c8e57",
      "filename": "presto-redis/src/main/java/com/facebook/presto/redis/RedisInternalFieldDescription.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/prestodb/presto/blob/dbc55f6f41085657f002dde90461d7b48623565f/presto-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fredis%2FRedisInternalFieldDescription.java",
      "raw_url": "https://github.com/prestodb/presto/raw/dbc55f6f41085657f002dde90461d7b48623565f/presto-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fredis%2FRedisInternalFieldDescription.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fredis%2FRedisInternalFieldDescription.java?ref=dbc55f6f41085657f002dde90461d7b48623565f",
      "patch": "@@ -19,14 +19,14 @@\n import com.facebook.presto.spi.type.BigintType;\n import com.facebook.presto.spi.type.BooleanType;\n import com.facebook.presto.spi.type.Type;\n-import com.facebook.presto.spi.type.VarcharType;\n import com.google.common.collect.ImmutableSet;\n import io.airlift.slice.Slice;\n import io.airlift.slice.Slices;\n \n import java.util.Objects;\n import java.util.Set;\n \n+import static com.facebook.presto.spi.type.VarcharType.createUnboundedVarcharType;\n import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Strings.isNullOrEmpty;\n@@ -43,12 +43,12 @@ public class RedisInternalFieldDescription\n     /**\n      * <tt>_key</tt> - Represents the key as a text column.\n      */\n-    public static final RedisInternalFieldDescription KEY_FIELD = new RedisInternalFieldDescription(\"_key\", VarcharType.VARCHAR, \"Key text\");\n+    public static final RedisInternalFieldDescription KEY_FIELD = new RedisInternalFieldDescription(\"_key\", createUnboundedVarcharType(), \"Key text\");\n \n     /**\n      * <tt>_value</tt> - Represents the value as a text column. Format is UTF-8\n      */\n-    public static final RedisInternalFieldDescription VALUE_FIELD = new RedisInternalFieldDescription(\"_value\", VarcharType.VARCHAR, \"Value text\");\n+    public static final RedisInternalFieldDescription VALUE_FIELD = new RedisInternalFieldDescription(\"_value\", createUnboundedVarcharType(), \"Value text\");\n \n     /**\n      * <tt>_value_corrupt</tt> - True if the row converter could not read the value. May be null if the row converter does not set a value (e.g. the dummy row converter does not).",
      "parent_sha": "be2411df4bc56619e8c765f92e0f9d8b07f5f689"
    }
  },
  {
    "oid": "589101fabbf26bfe30d75e35402c568be56432ab",
    "message": "Extract join operator factory creation in TestHashJoinOperator",
    "date": "2017-09-28T10:36:29Z",
    "url": "https://github.com/prestodb/presto/commit/589101fabbf26bfe30d75e35402c568be56432ab",
    "details": {
      "sha": "c8bf976edc805eb50bfd9e3d6ebc28fa7b6c62bb",
      "filename": "presto-main/src/test/java/com/facebook/presto/operator/TestHashJoinOperator.java",
      "status": "modified",
      "additions": 40,
      "deletions": 120,
      "changes": 160,
      "blob_url": "https://github.com/prestodb/presto/blob/589101fabbf26bfe30d75e35402c568be56432ab/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FTestHashJoinOperator.java",
      "raw_url": "https://github.com/prestodb/presto/raw/589101fabbf26bfe30d75e35402c568be56432ab/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FTestHashJoinOperator.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FTestHashJoinOperator.java?ref=589101fabbf26bfe30d75e35402c568be56432ab",
      "patch": "@@ -135,16 +135,7 @@ public void testInnerJoin(boolean parallelBuild, boolean probeHashEnabled, boole\n         List<Page> probeInput = probePages\n                 .addSequencePage(1000, 0, 1000, 2000)\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.innerJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = innerJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))\n@@ -253,16 +244,7 @@ public void testInnerJoinWithNullProbe(boolean parallelBuild, boolean probeHashE\n                 .row(\"a\")\n                 .row(\"b\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.innerJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = innerJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n@@ -298,16 +280,7 @@ public void testInnerJoinWithNullBuild(boolean parallelBuild, boolean probeHashE\n                 .row(\"b\")\n                 .row(\"c\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.innerJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = innerJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildTypes))\n@@ -344,16 +317,7 @@ public void testInnerJoinWithNullOnBothSides(boolean parallelBuild, boolean prob\n                 .row((String) null)\n                 .row(\"c\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.innerJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = innerJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildTypes))\n@@ -383,16 +347,7 @@ public void testProbeOuterJoin(boolean parallelBuild, boolean probeHashEnabled,\n         List<Page> probeInput = probePages\n                 .addSequencePage(15, 20, 1020, 2020)\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = probeOuterJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         // expected\n@@ -438,16 +393,7 @@ public void testProbeOuterJoinWithFilterFunction(boolean parallelBuild, boolean\n         List<Page> probeInput = probePages\n                 .addSequencePage(15, 20, 1020, 2020)\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = probeOuterJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildTypes))\n@@ -495,16 +441,7 @@ public void testOuterJoinWithNullProbe(boolean parallelBuild, boolean probeHashE\n                 .row(\"a\")\n                 .row(\"b\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = probeOuterJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildTypes))\n@@ -545,16 +482,7 @@ public void testOuterJoinWithNullProbeAndFilterFunction(boolean parallelBuild, b\n                 .row(\"a\")\n                 .row(\"b\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = probeOuterJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildTypes))\n@@ -592,16 +520,7 @@ public void testOuterJoinWithNullBuild(boolean parallelBuild, boolean probeHashE\n                 .row(\"b\")\n                 .row(\"c\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = probeOuterJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildTypes))\n@@ -642,16 +561,7 @@ public void testOuterJoinWithNullBuildAndFilterFunction(boolean parallelBuild, b\n                 .row(\"b\")\n                 .row(\"c\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = probeOuterJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildTypes))\n@@ -688,16 +598,7 @@ public void testOuterJoinWithNullOnBothSides(boolean parallelBuild, boolean prob\n                 .row((String) null)\n                 .row(\"c\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = probeOuterJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n@@ -739,16 +640,7 @@ public void testOuterJoinWithNullOnBothSidesAndFilterFunction(boolean parallelBu\n                 .row((String) null)\n                 .row(\"c\")\n                 .build();\n-        OperatorFactory joinOperatorFactory = LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n-                0,\n-                new PlanNodeId(\"test\"),\n-                lookupSourceFactory,\n-                probePages.getTypes(),\n-                Ints.asList(0),\n-                probePages.getHashChannel(),\n-                Optional.empty(),\n-                OptionalInt.of(1),\n-                PARTITIONING_SPILLER_FACTORY);\n+        OperatorFactory joinOperatorFactory = probeOuterJoinOperatorFactory(lookupSourceFactory, probePages);\n \n         // expected\n         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n@@ -800,6 +692,34 @@ private static List<Integer> getHashChannels(RowPagesBuilder probe, RowPagesBuil\n         return hashChannels.build();\n     }\n \n+    private OperatorFactory probeOuterJoinOperatorFactory(LookupSourceFactory lookupSourceFactory, RowPagesBuilder probePages)\n+    {\n+        return LOOKUP_JOIN_OPERATORS.probeOuterJoin(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                lookupSourceFactory,\n+                probePages.getTypes(),\n+                Ints.asList(0),\n+                probePages.getHashChannel(),\n+                Optional.empty(),\n+                OptionalInt.of(1),\n+                PARTITIONING_SPILLER_FACTORY);\n+    }\n+\n+    private OperatorFactory innerJoinOperatorFactory(LookupSourceFactory lookupSourceFactory, RowPagesBuilder probePages)\n+    {\n+        return LOOKUP_JOIN_OPERATORS.innerJoin(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                lookupSourceFactory,\n+                probePages.getTypes(),\n+                Ints.asList(0),\n+                probePages.getHashChannel(),\n+                Optional.empty(),\n+                OptionalInt.of(1),\n+                PARTITIONING_SPILLER_FACTORY);\n+    }\n+\n     private LookupSourceFactory buildHash(\n             boolean parallelBuild,\n             TaskContext taskContext,",
      "parent_sha": "3feff14e7f7b54594d37147187af5e40a5954688"
    }
  },
  {
    "oid": "894bcb7c39c7c5a58a0f619ac77056277bce692c",
    "message": "Extract method for creating Hive split from InputSplit",
    "date": "2017-03-08T00:02:19Z",
    "url": "https://github.com/prestodb/presto/commit/894bcb7c39c7c5a58a0f619ac77056277bce692c",
    "details": {
      "sha": "dd23c260641dc73c067d1d4e04b78c05142c0141",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java",
      "status": "modified",
      "additions": 35,
      "deletions": 20,
      "changes": 55,
      "blob_url": "https://github.com/prestodb/presto/blob/894bcb7c39c7c5a58a0f619ac77056277bce692c/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FBackgroundHiveSplitLoader.java",
      "raw_url": "https://github.com/prestodb/presto/raw/894bcb7c39c7c5a58a0f619ac77056277bce692c/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FBackgroundHiveSplitLoader.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FBackgroundHiveSplitLoader.java?ref=894bcb7c39c7c5a58a0f619ac77056277bce692c",
      "patch": "@@ -306,26 +306,8 @@ private void loadPartition(HivePartitionMetadata partition)\n                 FileInputFormat.setInputPaths(targetJob, targetPath);\n                 InputSplit[] targetSplits = targetInputFormat.getSplits(targetJob, 0);\n \n-                for (InputSplit inputSplit : targetSplits) {\n-                    FileSplit split = (FileSplit) inputSplit;\n-                    FileSystem targetFilesystem = hdfsEnvironment.getFileSystem(session.getUser(), split.getPath());\n-                    FileStatus file = targetFilesystem.getFileStatus(split.getPath());\n-                    hiveSplitSource.addToQueue(createHiveSplitIterator(\n-                            partitionName,\n-                            file.getPath().toString(),\n-                            targetFilesystem.getFileBlockLocations(file, split.getStart(), split.getLength()),\n-                            split.getStart(),\n-                            split.getLength(),\n-                            schema,\n-                            partitionKeys,\n-                            false,\n-                            session,\n-                            OptionalInt.empty(),\n-                            effectivePredicate,\n-                            partition.getColumnCoercions()));\n-                    if (stopped) {\n-                        return;\n-                    }\n+                if (addSplitsToSource(targetSplits, partitionName, partitionKeys, schema, effectivePredicate, partition.getColumnCoercions())) {\n+                    return;\n                 }\n             }\n             return;\n@@ -395,6 +377,39 @@ private void loadPartition(HivePartitionMetadata partition)\n         fileIterators.addLast(iterator);\n     }\n \n+    private boolean addSplitsToSource(\n+            InputSplit[] targetSplits,\n+            String partitionName,\n+            List<HivePartitionKey> partitionKeys,\n+            Properties schema,\n+            TupleDomain<HiveColumnHandle> effectivePredicate,\n+            Map<Integer, HiveType> columnCoercions)\n+            throws IOException\n+    {\n+        for (InputSplit inputSplit : targetSplits) {\n+            FileSplit split = (FileSplit) inputSplit;\n+            FileSystem targetFilesystem = hdfsEnvironment.getFileSystem(session.getUser(), split.getPath());\n+            FileStatus file = targetFilesystem.getFileStatus(split.getPath());\n+            hiveSplitSource.addToQueue(createHiveSplitIterator(\n+                    partitionName,\n+                    file.getPath().toString(),\n+                    targetFilesystem.getFileBlockLocations(file, split.getStart(), split.getLength()),\n+                    split.getStart(),\n+                    split.getLength(),\n+                    schema,\n+                    partitionKeys,\n+                    false,\n+                    session,\n+                    OptionalInt.empty(),\n+                    effectivePredicate,\n+                    columnCoercions));\n+            if (stopped) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private void addToHiveSplitSourceRoundRobin(List<Iterator<HiveSplit>> iteratorList)\n     {\n         while (true) {",
      "parent_sha": "2f9f4a0d31c75b79ab5519e83aa4d0ab2367862c"
    }
  },
  {
    "oid": "118c2bee2b49d34c392fbc5dacde611b152e7f97",
    "message": "[native] Modify testScaleWriters() so it does not write DATE column.",
    "date": "2023-09-13T03:46:23Z",
    "url": "https://github.com/prestodb/presto/commit/118c2bee2b49d34c392fbc5dacde611b152e7f97",
    "details": {
      "sha": "46889f93b94b156979d630c5ca89556b5c9a22fc",
      "filename": "presto-native-execution/src/test/java/com/facebook/presto/nativeworker/AbstractTestScaledWriter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/prestodb/presto/blob/118c2bee2b49d34c392fbc5dacde611b152e7f97/presto-native-execution%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fnativeworker%2FAbstractTestScaledWriter.java",
      "raw_url": "https://github.com/prestodb/presto/raw/118c2bee2b49d34c392fbc5dacde611b152e7f97/presto-native-execution%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fnativeworker%2FAbstractTestScaledWriter.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-native-execution%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fnativeworker%2FAbstractTestScaledWriter.java?ref=118c2bee2b49d34c392fbc5dacde611b152e7f97",
      "patch": "@@ -66,13 +66,13 @@ public void testScaleWriters()\n         Session session = buildSessionForTableWrite();\n         String tmpTableName = generateRandomTableName();\n         getQueryRunner().execute(session, String.format(\n-                \"CREATE TABLE %s AS SELECT * FROM tpchstandard.tiny.orders\", tmpTableName));\n+                \"CREATE TABLE %s AS SELECT o_orderkey, o_custkey, o_orderstatus, o_totalprice, CAST(o_orderdate as VARCHAR) as o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment FROM tpchstandard.tiny.orders\", tmpTableName));\n         assertEquals(computeActual(\"SELECT count(DISTINCT \\\"$path\\\") FROM \" + tmpTableName).getOnlyValue(), 1L);\n         dropTableIfExists(tmpTableName);\n \n         tmpTableName = generateRandomTableName();\n         getQueryRunner().execute(session, String.format(\n-                \"CREATE TABLE %s AS SELECT * FROM tpchstandard.sf100.orders where o_orderdate > Date('1997-01-10')\", tmpTableName));\n+                \"CREATE TABLE %s AS SELECT o_orderkey, o_custkey, o_orderstatus, o_totalprice, CAST(o_orderdate as VARCHAR) as o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment FROM tpchstandard.sf100.orders where o_orderdate > Date('1997-01-10')\", tmpTableName));\n         long files = (long) computeActual(\"SELECT count(DISTINCT \\\"$path\\\") FROM \" + tmpTableName).getOnlyValue();\n         long workers = (long) computeScalar(\"SELECT count(*) FROM system.runtime.nodes\");\n         assertThat(files).isBetween(2L, workers);",
      "parent_sha": "0535cfbca930bf16ea7d1a13d9d5115a1db953b0"
    }
  },
  {
    "oid": "7cd8bd08aeacc040f6ce819a8e9015bf41e2f32c",
    "message": "Fix predicate pushdown for Parquet",
    "date": "2016-09-19T16:35:54Z",
    "url": "https://github.com/prestodb/presto/commit/7cd8bd08aeacc040f6ce819a8e9015bf41e2f32c",
    "details": {
      "sha": "a2ec7c59208a1ce11b131b4c675430aafbd534f1",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetHiveRecordCursor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/prestodb/presto/blob/7cd8bd08aeacc040f6ce819a8e9015bf41e2f32c/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetHiveRecordCursor.java",
      "raw_url": "https://github.com/prestodb/presto/raw/7cd8bd08aeacc040f6ce819a8e9015bf41e2f32c/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetHiveRecordCursor.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetHiveRecordCursor.java?ref=7cd8bd08aeacc040f6ce819a8e9015bf41e2f32c",
      "patch": "@@ -454,8 +454,8 @@ private ParquetRecordReader<FakeParquetRecord> createParquetRecordReader(\n                     }\n                     else {\n                         splitGroup.add(block);\n-                        offsets.add(block.getStartingPos());\n                     }\n+                    offsets.add(block.getStartingPos());\n                 }\n             }\n ",
      "parent_sha": "318d0d0abd7cc9f9c0290f5c0fb66155a271a0c4"
    }
  },
  {
    "oid": "d92855e9a59aeebfb6c868e5ecc562bcdb4aaf23",
    "message": "Remove duplication in TestExpressionOptimizer",
    "date": "2018-03-23T21:44:01Z",
    "url": "https://github.com/prestodb/presto/commit/d92855e9a59aeebfb6c868e5ecc562bcdb4aaf23",
    "details": {
      "sha": "46c7dc59800b164c3f59931a9cc5e6a6dba8c1e7",
      "filename": "presto-main/src/test/java/com/facebook/presto/sql/TestExpressionOptimizer.java",
      "status": "modified",
      "additions": 19,
      "deletions": 7,
      "changes": 26,
      "blob_url": "https://github.com/prestodb/presto/blob/d92855e9a59aeebfb6c868e5ecc562bcdb4aaf23/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2FTestExpressionOptimizer.java",
      "raw_url": "https://github.com/prestodb/presto/raw/d92855e9a59aeebfb6c868e5ecc562bcdb4aaf23/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2FTestExpressionOptimizer.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2FTestExpressionOptimizer.java?ref=d92855e9a59aeebfb6c868e5ecc562bcdb4aaf23",
      "patch": "@@ -28,6 +28,8 @@\n import com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer;\n import com.facebook.presto.type.TypeRegistry;\n import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import java.util.Optional;\n@@ -57,11 +59,26 @@\n \n public class TestExpressionOptimizer\n {\n+    private TypeRegistry typeManager;\n+    private ExpressionOptimizer optimizer;\n+\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        typeManager = new TypeRegistry();\n+        optimizer = new ExpressionOptimizer(new FunctionRegistry(typeManager, new BlockEncodingManager(typeManager), new FeaturesConfig()), typeManager, TEST_SESSION);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void tearDown()\n+    {\n+        typeManager = null;\n+        optimizer = null;\n+    }\n+\n     @Test(timeOut = 10_000)\n     public void testPossibleExponentialOptimizationTime()\n     {\n-        TypeRegistry typeManager = new TypeRegistry();\n-        ExpressionOptimizer optimizer = new ExpressionOptimizer(new FunctionRegistry(typeManager, new BlockEncodingManager(typeManager), new FeaturesConfig()), typeManager, TEST_SESSION);\n         RowExpression expression = constant(1L, BIGINT);\n         for (int i = 0; i < 100; i++) {\n             Signature signature = internalOperator(OperatorType.ADD.name(), parseTypeSignature(StandardTypes.BIGINT), parseTypeSignature(StandardTypes.BIGINT), parseTypeSignature(StandardTypes.BIGINT));\n@@ -73,9 +90,6 @@ public void testPossibleExponentialOptimizationTime()\n     @Test\n     public void testIfConstantOptimization()\n     {\n-        TypeRegistry typeManager = new TypeRegistry();\n-        ExpressionOptimizer optimizer = new ExpressionOptimizer(new FunctionRegistry(typeManager, new BlockEncodingManager(typeManager), new FeaturesConfig()), typeManager, TEST_SESSION);\n-\n         assertEquals(optimizer.optimize(ifExpression(constant(true, BOOLEAN), 1L, 2L)), constant(1L, BIGINT));\n         assertEquals(optimizer.optimize(ifExpression(constant(false, BOOLEAN), 1L, 2L)), constant(2L, BIGINT));\n         assertEquals(optimizer.optimize(ifExpression(constant(null, BOOLEAN), 1L, 2L)), constant(2L, BIGINT));\n@@ -88,8 +102,6 @@ public void testIfConstantOptimization()\n     @Test\n     public void testCastWithJsonParseOptimization()\n     {\n-        TypeRegistry typeManager = new TypeRegistry();\n-        ExpressionOptimizer optimizer = new ExpressionOptimizer(new FunctionRegistry(typeManager, new BlockEncodingManager(typeManager), new FeaturesConfig()), typeManager, TEST_SESSION);\n         Signature jsonParseSignature = new Signature(\"json_parse\", SCALAR, JSON.getTypeSignature(), ImmutableList.of(VARCHAR.getTypeSignature()));\n \n         // constant",
      "parent_sha": "96d28a7ac975cd67a0697d7010e89473bb0716e1"
    }
  },
  {
    "oid": "3feecf3743ffd8c81c21b08ed89402ca45fe8c05",
    "message": "Fix broadcast memory update in RootAggregatedMemoryContext",
    "date": "2020-12-14T15:58:22Z",
    "url": "https://github.com/prestodb/presto/commit/3feecf3743ffd8c81c21b08ed89402ca45fe8c05",
    "details": {
      "sha": "55e0706c247e2f1b1a494aeeb2ff4d6ff137f790",
      "filename": "presto-memory-context/src/main/java/com/facebook/presto/memory/context/RootAggregatedMemoryContext.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/prestodb/presto/blob/3feecf3743ffd8c81c21b08ed89402ca45fe8c05/presto-memory-context%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmemory%2Fcontext%2FRootAggregatedMemoryContext.java",
      "raw_url": "https://github.com/prestodb/presto/raw/3feecf3743ffd8c81c21b08ed89402ca45fe8c05/presto-memory-context%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmemory%2Fcontext%2FRootAggregatedMemoryContext.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-memory-context%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmemory%2Fcontext%2FRootAggregatedMemoryContext.java?ref=3feecf3743ffd8c81c21b08ed89402ca45fe8c05",
      "patch": "@@ -36,7 +36,9 @@ synchronized ListenableFuture<?> updateBytes(String allocationTag, long bytes, b\n         checkState(!isClosed(), \"RootAggregatedMemoryContext is already closed\");\n         ListenableFuture<?> future = reservationHandler.reserveMemory(allocationTag, bytes, enforceBroadcastMemoryLimit);\n         addBytes(bytes);\n-        addBroadcastBytes(bytes);\n+        if (enforceBroadcastMemoryLimit) {\n+            addBroadcastBytes(bytes);\n+        }\n         // make sure we never block queries below guaranteedMemory\n         if (getBytes() < guaranteedMemory) {\n             future = NOT_BLOCKED;\n@@ -49,7 +51,9 @@ synchronized boolean tryUpdateBytes(String allocationTag, long delta, boolean en\n     {\n         if (reservationHandler.tryReserveMemory(allocationTag, delta, enforceBroadcastMemoryLimit)) {\n             addBytes(delta);\n-            addBroadcastBytes(delta);\n+            if (enforceBroadcastMemoryLimit) {\n+                addBroadcastBytes(delta);\n+            }\n             return true;\n         }\n         return false;",
      "parent_sha": "4d5afceed18cc4f71a1574adafcd506db6e33e83"
    }
  },
  {
    "oid": "97cb912358931679b0d7afc554d2504020b2d4fa",
    "message": "Use expression method instead of hardcoding AST tree",
    "date": "2017-06-07T05:32:58Z",
    "url": "https://github.com/prestodb/presto/commit/97cb912358931679b0d7afc554d2504020b2d4fa",
    "details": {
      "sha": "79b85d3db84cd6e3a167ddae7e75c5dbca91c317",
      "filename": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestTransformCorrelatedScalarAggregationToJoin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/prestodb/presto/blob/97cb912358931679b0d7afc554d2504020b2d4fa/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2FTestTransformCorrelatedScalarAggregationToJoin.java",
      "raw_url": "https://github.com/prestodb/presto/raw/97cb912358931679b0d7afc554d2504020b2d4fa/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2FTestTransformCorrelatedScalarAggregationToJoin.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2FTestTransformCorrelatedScalarAggregationToJoin.java?ref=97cb912358931679b0d7afc554d2504020b2d4fa",
      "patch": "@@ -26,9 +26,7 @@\n import com.facebook.presto.sql.planner.plan.Assignments;\n import com.facebook.presto.sql.planner.plan.JoinNode;\n import com.facebook.presto.sql.planner.plan.PlanNode;\n-import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;\n import com.facebook.presto.sql.tree.FunctionCall;\n-import com.facebook.presto.sql.tree.LongLiteral;\n import com.facebook.presto.sql.tree.QualifiedName;\n import com.facebook.presto.type.TypeRegistry;\n import com.google.common.collect.ImmutableList;\n@@ -134,7 +132,7 @@ public void rewritesOnSubqueryWithProjection()\n                 .on(p -> p.lateral(\n                         ImmutableList.of(p.symbol(\"corr\", BIGINT)),\n                         p.values(p.symbol(\"corr\", BIGINT)),\n-                        p.project(Assignments.of(p.symbol(\"expr\", BIGINT), new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.ADD, p.symbol(\"sum\", BIGINT).toSymbolReference(), new LongLiteral(\"1\"))),\n+                        p.project(Assignments.of(p.symbol(\"expr\", BIGINT), p.expression(\"sum + 1\")),\n                                 createSumAggregation(p, p.symbol(\"a\", BIGINT), ImmutableList.of(ImmutableList.of()),\n                                         p.values(p.symbol(\"a\", BIGINT), p.symbol(\"b\", BIGINT))))))\n                 .matches(project(ImmutableMap.of(\"corr\", expression(\"corr\"), \"expr\", expression(\"(\\\"sum_1\\\" + 1)\")),",
      "parent_sha": "1e2bb6c226c25815b57cf3077faada165b600b98"
    }
  },
  {
    "oid": "927f9d8eb327ccb314e1fb8f6686b1d9aa7c5cbe",
    "message": "Redesign locking in Driver",
    "date": "2017-03-09T01:21:05Z",
    "url": "https://github.com/prestodb/presto/commit/927f9d8eb327ccb314e1fb8f6686b1d9aa7c5cbe",
    "details": {
      "sha": "fd9a7ea4b56cbf7ea49eed18de355b01d7a76a16",
      "filename": "presto-main/src/main/java/com/facebook/presto/operator/Driver.java",
      "status": "modified",
      "additions": 86,
      "deletions": 115,
      "changes": 201,
      "blob_url": "https://github.com/prestodb/presto/blob/927f9d8eb327ccb314e1fb8f6686b1d9aa7c5cbe/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FDriver.java",
      "raw_url": "https://github.com/prestodb/presto/raw/927f9d8eb327ccb314e1fb8f6686b1d9aa7c5cbe/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FDriver.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FDriver.java?ref=927f9d8eb327ccb314e1fb8f6686b1d9aa7c5cbe",
      "patch": "@@ -46,6 +46,7 @@\n import static com.facebook.presto.operator.Operator.NOT_BLOCKED;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.Boolean.TRUE;\n import static java.util.Objects.requireNonNull;\n \n //\n@@ -67,10 +68,7 @@ public class Driver\n \n     private final AtomicReference<State> state = new AtomicReference<>(State.ALIVE);\n \n-    private final ReentrantLock exclusiveLock = new ReentrantLock();\n-\n-    @GuardedBy(\"this\")\n-    private Thread lockHolder;\n+    private final DriverLock exclusiveLock = new DriverLock();\n \n     @GuardedBy(\"exclusiveLock\")\n     private TaskSource currentTaskSource;\n@@ -131,39 +129,26 @@ public void close()\n             return;\n         }\n \n-        // if we can get the lock, attempt a clean shutdown; otherwise someone else will shutdown\n-        try (DriverLockResult lockResult = tryLockAndProcessPendingStateChanges(0, TimeUnit.MILLISECONDS)) {\n-            // if we did not get the lock, interrupt the lock holder\n-            if (!lockResult.wasAcquired()) {\n-                // there is a benign race condition here were the lock holder\n-                // can be change between attempting to get lock and grabbing\n-                // the synchronized lock here, but in either case we want to\n-                // interrupt the lock holder thread\n-                synchronized (this) {\n-                    if (lockHolder != null) {\n-                        lockHolder.interrupt();\n-                    }\n-                }\n-            }\n-\n-            // clean shutdown is automatically triggered during lock release\n+        // there is a benign race condition here were the lock holder\n+        // can be change between attempting to get lock and grabbing\n+        // the synchronized lock here, but in either case we want to\n+        // interrupt the lock holder thread\n+        Thread lockOwner = exclusiveLock.getOwner();\n+        if (lockOwner != null) {\n+            lockOwner.interrupt();\n         }\n+\n+        // if we can get the lock, attempt a clean shutdown; otherwise someone else will shutdown\n+        tryWithLock(() -> TRUE);\n     }\n \n     public boolean isFinished()\n     {\n         checkLockNotHeld(\"Can not check finished status while holding the driver lock\");\n \n         // if we can get the lock, attempt a clean shutdown; otherwise someone else will shutdown\n-        try (DriverLockResult lockResult = tryLockAndProcessPendingStateChanges(0, TimeUnit.MILLISECONDS)) {\n-            if (lockResult.wasAcquired()) {\n-                return isFinishedInternal();\n-            }\n-            else {\n-                // did not get the lock, so we can't check operators, or destroy\n-                return state.get() != State.ALIVE || driverContext.isDone();\n-            }\n-        }\n+        Optional<Boolean> result = tryWithLock(this::isFinishedInternal);\n+        return result.orElseGet(() -> state.get() != State.ALIVE || driverContext.isDone());\n     }\n \n     @GuardedBy(\"exclusiveLock\")\n@@ -192,7 +177,7 @@ public void updateSource(TaskSource source)\n \n         // attempt to get the lock and process the updates we staged above\n         // updates will be processed in close if and only if we got the lock\n-        tryLockAndProcessPendingStateChanges(0, TimeUnit.MILLISECONDS).close();\n+        tryWithLock(() -> TRUE);\n     }\n \n     @GuardedBy(\"exclusiveLock\")\n@@ -246,40 +231,32 @@ public ListenableFuture<?> processFor(Duration duration)\n \n         long maxRuntime = duration.roundTo(TimeUnit.NANOSECONDS);\n \n-        try (DriverLockResult lockResult = tryLockAndProcessPendingStateChanges(100, TimeUnit.MILLISECONDS)) {\n-            if (lockResult.wasAcquired()) {\n-                driverContext.startProcessTimer();\n-                try {\n-                    long start = System.nanoTime();\n-                    do {\n-                        ListenableFuture<?> future = processInternal();\n-                        if (!future.isDone()) {\n-                            return future;\n-                        }\n+        Optional<ListenableFuture<?>> result = tryWithLock(100, TimeUnit.MILLISECONDS, () -> {\n+            driverContext.startProcessTimer();\n+            try {\n+                long start = System.nanoTime();\n+                do {\n+                    ListenableFuture<?> future = processInternal();\n+                    if (!future.isDone()) {\n+                        return future;\n                     }\n-                    while (System.nanoTime() - start < maxRuntime && !isFinishedInternal());\n-                }\n-                finally {\n-                    driverContext.recordProcessed();\n                 }\n+                while (System.nanoTime() - start < maxRuntime && !isFinishedInternal());\n             }\n-        }\n-        return NOT_BLOCKED;\n+            finally {\n+                driverContext.recordProcessed();\n+            }\n+            return NOT_BLOCKED;\n+        });\n+        return result.orElse(NOT_BLOCKED);\n     }\n \n     public ListenableFuture<?> process()\n     {\n         checkLockNotHeld(\"Can not process while holding the driver lock\");\n \n-        try (DriverLockResult lockResult = tryLockAndProcessPendingStateChanges(100, TimeUnit.MILLISECONDS)) {\n-            if (!lockResult.wasAcquired()) {\n-                // this is unlikely to happen unless the driver is being\n-                // destroyed and in that case the caller should notice\n-                // this state change by calling isFinished\n-                return NOT_BLOCKED;\n-            }\n-            return processInternal();\n-        }\n+        Optional<ListenableFuture<?>> result = tryWithLock(100, TimeUnit.MILLISECONDS, this::processInternal);\n+        return result.orElse(NOT_BLOCKED);\n     }\n \n     @GuardedBy(\"exclusiveLock\")\n@@ -502,22 +479,15 @@ private static Throwable addSuppressedException(Throwable inFlightException, Thr\n         return inFlightException;\n     }\n \n-    private DriverLockResult tryLockAndProcessPendingStateChanges(int timeout, TimeUnit unit)\n-    {\n-        checkLockNotHeld(\"Can not acquire the driver lock while already holding the driver lock\");\n-\n-        return new DriverLockResult(timeout, unit);\n-    }\n-\n     private synchronized void checkLockNotHeld(String message)\n     {\n-        checkState(Thread.currentThread() != lockHolder, message);\n+        checkState(!exclusiveLock.isHeldByCurrentThread(), message);\n     }\n \n     @GuardedBy(\"exclusiveLock\")\n     private synchronized void checkLockHeld(String message)\n     {\n-        checkState(exclusiveLock.isHeldByCurrentThread() && Thread.currentThread() == lockHolder, message);\n+        checkState(exclusiveLock.isHeldByCurrentThread(), message);\n     }\n \n     private static ListenableFuture<?> firstFinishedFuture(List<ListenableFuture<?>> futures)\n@@ -532,72 +502,73 @@ private static ListenableFuture<?> firstFinishedFuture(List<ListenableFuture<?>>\n         return result;\n     }\n \n-    private class DriverLockResult\n-            implements AutoCloseable\n+    // Note: task can not return null\n+    private <T> Optional<T> tryWithLock(Supplier<T> task)\n     {\n-        private final boolean acquired;\n+        return tryWithLock(0, TimeUnit.MILLISECONDS, task);\n+    }\n \n-        private DriverLockResult(int timeout, TimeUnit unit)\n-        {\n-            acquired = tryAcquire(timeout, unit);\n+    // Note: task can not return null\n+    private <T> Optional<T> tryWithLock(long timeout, TimeUnit unit, Supplier<T> task)\n+    {\n+        checkLockNotHeld(\"Lock can not be reacquired\");\n+\n+        boolean acquired = false;\n+        try {\n+            acquired = exclusiveLock.tryLock(timeout, unit);\n+        }\n+        catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n         }\n \n-        private boolean tryAcquire(int timeout, TimeUnit unit)\n-        {\n-            boolean acquired = false;\n+        if (!acquired) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<T> result;\n+        try {\n+            result = Optional.of(task.get());\n+        }\n+        finally {\n             try {\n-                acquired = exclusiveLock.tryLock(timeout, unit);\n+                try {\n+                    processNewSources();\n+                }\n+                finally {\n+                    destroyIfNecessary();\n+                }\n             }\n-            catch (InterruptedException e) {\n-                Thread.currentThread().interrupt();\n+            finally {\n+                exclusiveLock.unlock();\n             }\n+        }\n \n-            if (acquired) {\n-                synchronized (Driver.this) {\n-                    lockHolder = Thread.currentThread();\n+        // if necessary, attempt to reacquire the lock and process new sources\n+        // NOTE: this is separate duplicate code to make debugging lock reacquisition easier\n+        while (newTaskSource.get() != null && state.get() == State.ALIVE && exclusiveLock.tryLock()) {\n+            try {\n+                try {\n+                    processNewSources();\n+                }\n+                finally {\n+                    destroyIfNecessary();\n                 }\n             }\n-\n-            return acquired;\n+            finally {\n+                exclusiveLock.unlock();\n+            }\n         }\n \n-        public boolean wasAcquired()\n-        {\n-            return acquired;\n-        }\n+        return result;\n+    }\n \n+    private static class DriverLock\n+            extends ReentrantLock\n+    {\n         @Override\n-        public void close()\n+        public Thread getOwner()\n         {\n-            if (!acquired) {\n-                return;\n-            }\n-\n-            boolean done = false;\n-            while (!done) {\n-                done = true;\n-                // before releasing the lock, process any new sources and/or destroy the driver\n-                try {\n-                    try {\n-                        processNewSources();\n-                    }\n-                    finally {\n-                        destroyIfNecessary();\n-                    }\n-                }\n-                finally {\n-                    synchronized (Driver.this) {\n-                        lockHolder = null;\n-                    }\n-                    exclusiveLock.unlock();\n-\n-                    // if new sources were added after we processed them, go around and try again\n-                    // in case someone else failed to acquire the lock and as a result won't update them\n-                    if (newTaskSource.get() != null && state.get() == State.ALIVE && tryAcquire(0, TimeUnit.MILLISECONDS)) {\n-                        done = false;\n-                    }\n-                }\n-            }\n+            return super.getOwner();\n         }\n     }\n }",
      "parent_sha": "c9701fc0c891bc353543f2cbcefb318ee7a02f4c"
    }
  },
  {
    "oid": "8e47f151a63bc8c61a5b64c1c0fe8976b0e37aa9",
    "message": "Use assertInvalidFunction instead of assertThrows",
    "date": "2017-11-30T17:34:25Z",
    "url": "https://github.com/prestodb/presto/commit/8e47f151a63bc8c61a5b64c1c0fe8976b0e37aa9",
    "details": {
      "sha": "3d1c7eb03e7b2c5927f7aacf0065d883452202e2",
      "filename": "presto-main/src/test/java/com/facebook/presto/type/TestDateTimeOperators.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/prestodb/presto/blob/8e47f151a63bc8c61a5b64c1c0fe8976b0e37aa9/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftype%2FTestDateTimeOperators.java",
      "raw_url": "https://github.com/prestodb/presto/raw/8e47f151a63bc8c61a5b64c1c0fe8976b0e37aa9/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftype%2FTestDateTimeOperators.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftype%2FTestDateTimeOperators.java?ref=8e47f151a63bc8c61a5b64c1c0fe8976b0e37aa9",
      "patch": "@@ -14,7 +14,6 @@\n package com.facebook.presto.type;\n \n import com.facebook.presto.operator.scalar.AbstractTestFunctions;\n-import com.facebook.presto.spi.PrestoException;\n import com.facebook.presto.spi.type.SqlDate;\n import com.facebook.presto.spi.type.SqlTime;\n import com.facebook.presto.spi.type.SqlTimeWithTimeZone;\n@@ -40,7 +39,6 @@\n import static com.facebook.presto.util.DateTimeZoneIndex.getDateTimeZone;\n import static java.util.concurrent.TimeUnit.HOURS;\n import static org.joda.time.DateTimeZone.UTC;\n-import static org.testng.Assert.assertThrows;\n \n public class TestDateTimeOperators\n         extends AbstractTestFunctions\n@@ -67,8 +65,8 @@ public void testDatePlusInterval()\n         assertFunction(\"DATE '2001-1-22' + INTERVAL '3' year\", DATE, toDate(new DateTime(2004, 1, 22, 0, 0, 0, 0, UTC)));\n         assertFunction(\"INTERVAL '3' year + DATE '2001-1-22'\", DATE, toDate(new DateTime(2004, 1, 22, 0, 0, 0, 0, UTC)));\n \n-        assertThrows(PrestoException.class, () -> functionAssertions.tryEvaluate(\"DATE '2001-1-22' + INTERVAL '3' hour\", DATE));\n-        assertThrows(PrestoException.class, () -> functionAssertions.tryEvaluate(\"INTERVAL '3' hour + DATE '2001-1-22'\", DATE));\n+        assertInvalidFunction(\"DATE '2001-1-22' + INTERVAL '3' hour\", \"Cannot add hour, minutes or seconds to a date\");\n+        assertInvalidFunction(\"INTERVAL '3' hour + DATE '2001-1-22'\", \"Cannot add hour, minutes or seconds to a date\");\n     }\n \n     @Test\n@@ -178,7 +176,7 @@ public void testDateMinusInterval()\n     {\n         assertFunction(\"DATE '2001-1-22' - INTERVAL '3' day\", DATE, toDate(new DateTime(2001, 1, 19, 0, 0, 0, 0, UTC)));\n \n-        assertThrows(PrestoException.class, () -> functionAssertions.tryEvaluate(\"DATE '2001-1-22' - INTERVAL '3' hour\", DATE));\n+        assertInvalidFunction(\"DATE '2001-1-22' - INTERVAL '3' hour\", \"Cannot subtract hour, minutes or seconds from a date\");\n     }\n \n     @Test",
      "parent_sha": "dd7948c253bd3626d810d4f9584fd3762e3a2d11"
    }
  },
  {
    "oid": "50af1be95905c4d7049944882476550a0adbc7bd",
    "message": "Allow configuration of environment in TestingNodeManager",
    "date": "2017-03-06T22:39:39Z",
    "url": "https://github.com/prestodb/presto/commit/50af1be95905c4d7049944882476550a0adbc7bd",
    "details": {
      "sha": "ca605fd95cf9d606471ef2fe59ee13c002f3aa4c",
      "filename": "presto-main/src/main/java/com/facebook/presto/testing/TestingNodeManager.java",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/prestodb/presto/blob/50af1be95905c4d7049944882476550a0adbc7bd/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftesting%2FTestingNodeManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/50af1be95905c4d7049944882476550a0adbc7bd/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftesting%2FTestingNodeManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftesting%2FTestingNodeManager.java?ref=50af1be95905c4d7049944882476550a0adbc7bd",
      "patch": "@@ -30,12 +30,20 @@\n public class TestingNodeManager\n         implements NodeManager\n {\n+    private static final String TEST_ENVIRONMENT = \"testenv\";\n+\n+    private final String environment;\n     private final Node localNode;\n     private final Set<Node> nodes = new CopyOnWriteArraySet<>();\n \n     public TestingNodeManager()\n     {\n-        this(new PrestoNode(\"local\", URI.create(\"local://127.0.0.1\"), NodeVersion.UNKNOWN, true));\n+        this(TEST_ENVIRONMENT);\n+    }\n+\n+    public TestingNodeManager(String environment)\n+    {\n+        this(environment, new PrestoNode(\"local\", URI.create(\"local://127.0.0.1\"), NodeVersion.UNKNOWN, true), ImmutableSet.of());\n     }\n \n     public TestingNodeManager(Node localNode)\n@@ -50,6 +58,12 @@ public TestingNodeManager(List<Node> allNodes)\n \n     public TestingNodeManager(Node localNode, Collection<Node> otherNodes)\n     {\n+        this(TEST_ENVIRONMENT, localNode, otherNodes);\n+    }\n+\n+    public TestingNodeManager(String environment, Node localNode, Collection<Node> otherNodes)\n+    {\n+        this.environment = environment;\n         this.localNode = requireNonNull(localNode, \"localNode is null\");\n         nodes.add(localNode);\n         nodes.addAll(otherNodes);\n@@ -81,6 +95,6 @@ public Node getCurrentNode()\n     @Override\n     public String getEnvironment()\n     {\n-        return \"testenv\";\n+        return environment;\n     }\n }",
      "parent_sha": "05a1904b534047574e71cf2549e5feae4829ecb8"
    }
  },
  {
    "oid": "f19906d7995cab97ca08e50d44c28c6a2490f233",
    "message": "Have AsyncScribeLogger only print errors on state changes",
    "date": "2013-01-05T01:12:06Z",
    "url": "https://github.com/prestodb/presto/commit/f19906d7995cab97ca08e50d44c28c6a2490f233",
    "details": {
      "sha": "eeb49323c11dc0ffd9286aaff125c4ef276cd610",
      "filename": "presto-main/src/main/java/com/facebook/presto/event/scribe/client/AsyncScribeLogger.java",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/prestodb/presto/blob/f19906d7995cab97ca08e50d44c28c6a2490f233/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fevent%2Fscribe%2Fclient%2FAsyncScribeLogger.java",
      "raw_url": "https://github.com/prestodb/presto/raw/f19906d7995cab97ca08e50d44c28c6a2490f233/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fevent%2Fscribe%2Fclient%2FAsyncScribeLogger.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fevent%2Fscribe%2Fclient%2FAsyncScribeLogger.java?ref=f19906d7995cab97ca08e50d44c28c6a2490f233",
      "patch": "@@ -18,6 +18,7 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.facebook.presto.event.scribe.client.ReusableScribeClient.makeReusableClient;\n import static com.facebook.presto.util.Threads.threadsNamed;\n@@ -91,6 +92,9 @@ FlushTask createFlushTask()\n     class FlushTask\n             implements Runnable\n     {\n+        private final AtomicBoolean tryLaterState = new AtomicBoolean(false);\n+        private final AtomicBoolean connectionErrorState = new AtomicBoolean(false);\n+\n         private List<LogEntry> failedBatch;\n \n         @Override\n@@ -160,16 +164,26 @@ private boolean flushToScribe(List<LogEntry> logEntries)\n                 ResultCode resultCode = scribeClient.log(logEntries);\n                 switch (resultCode) {\n                     case OK:\n+                        if (tryLaterState.compareAndSet(true, false)) {\n+                            log.info(\"Scribe recovered from TRY_LATER\");\n+                        }\n+                        if (connectionErrorState.compareAndSet(true, false)) {\n+                            log.info(\"Scribe recovered from connection errors\");\n+                        }\n                         return true;\n                     case TRY_LATER:\n-                        log.warn(\"Scribe log returned TRY_LATER\");\n+                        if (tryLaterState.compareAndSet(false, true)) {\n+                            log.warn(\"Scribe log returned TRY_LATER\");\n+                        }\n                         break;\n                     default:\n                         throw new AssertionError(\"Unknown ResultCode: \" + resultCode);\n                 }\n             }\n             catch (Exception e) {\n-                log.warn(\"Failed to log to Scribe: %s\", e.getMessage());\n+                if (connectionErrorState.compareAndSet(false, true)) {\n+                    log.warn(\"Failed to log to Scribe: %s\", e.getMessage());\n+                }\n             }\n \n             // Set failedBatch so that it can be retried on next attempt",
      "parent_sha": "cae896ae291ffa7dd385cd83cb3c874efecd43b2"
    }
  },
  {
    "oid": "3b5b059c7472ca3f9729268e0ad5f3eece02dfcb",
    "message": "Handle rowGroupDictionaries correctly in dictionary reader\n\nIn SliceDictionaryStreamReader the dictionary data is stored in\nthe main dictionary and the rowGroupDictionary. When the\nrowGroupDictionary is referenced, create the SliceVector correctly.",
    "date": "2015-08-03T21:58:17Z",
    "url": "https://github.com/prestodb/presto/commit/3b5b059c7472ca3f9729268e0ad5f3eece02dfcb",
    "details": {
      "sha": "6fff62998b849393bd9908bd619ee405a96731eb",
      "filename": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionaryStreamReader.java",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/prestodb/presto/blob/3b5b059c7472ca3f9729268e0ad5f3eece02dfcb/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2Freader%2FSliceDictionaryStreamReader.java",
      "raw_url": "https://github.com/prestodb/presto/raw/3b5b059c7472ca3f9729268e0ad5f3eece02dfcb/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2Freader%2FSliceDictionaryStreamReader.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2Freader%2FSliceDictionaryStreamReader.java?ref=3b5b059c7472ca3f9729268e0ad5f3eece02dfcb",
      "patch": "@@ -158,11 +158,34 @@ public void readBatch(Object vector)\n             inDictionaryStream.getSetBits(nextBatchSize, inDictionary, isNullVector);\n         }\n \n-        int[] ids = Arrays.copyOfRange(dataVector, 0, nextBatchSize);\n-        boolean[] isNullVector = Arrays.copyOfRange(this.isNullVector, 0, nextBatchSize);\n-\n         SliceVector sliceVector = castOrcVector(vector, SliceVector.class);\n-        sliceVector.setDictionary(dictionary, ids, isNullVector);\n+\n+        boolean rowGroupDictionaryReferenced = false;\n+        for (int i = 0; i < nextBatchSize; i++) {\n+            if (!isNullVector[i] && !inDictionary[i]) {\n+                rowGroupDictionaryReferenced = true;\n+                break;\n+            }\n+        }\n+        if (rowGroupDictionaryReferenced) {\n+            sliceVector.initialize(nextBatchSize);\n+            for (int i = 0; i < nextBatchSize; i++) {\n+                if (isNullVector[i]) {\n+                    sliceVector.vector[i] = null;\n+                }\n+                else if (inDictionary[i]) {\n+                    sliceVector.vector[i] = dictionary[dataVector[i]];\n+                }\n+                else {\n+                    sliceVector.vector[i] = rowGroupDictionary[dataVector[i]];\n+                }\n+            }\n+        }\n+        else {\n+            int[] ids = Arrays.copyOfRange(dataVector, 0, nextBatchSize);\n+            boolean[] isNullVector = Arrays.copyOfRange(this.isNullVector, 0, nextBatchSize);\n+            sliceVector.setDictionary(dictionary, ids, isNullVector);\n+        }\n \n         readOffset = 0;\n         nextBatchSize = 0;",
      "parent_sha": "95639e0285d714747301d99cbed20d8755af7054"
    }
  },
  {
    "oid": "d165b72cb7df4bbe4ac35ba5bd03a41db1369f1a",
    "message": "Add more comprehensive tests for Signature",
    "date": "2016-01-31T01:07:08Z",
    "url": "https://github.com/prestodb/presto/commit/d165b72cb7df4bbe4ac35ba5bd03a41db1369f1a",
    "details": {
      "sha": "73c829e95aa9ab18b0871897063746900e54c5b7",
      "filename": "presto-main/src/test/java/com/facebook/presto/metadata/TestSignature.java",
      "status": "modified",
      "additions": 157,
      "deletions": 7,
      "changes": 164,
      "blob_url": "https://github.com/prestodb/presto/blob/d165b72cb7df4bbe4ac35ba5bd03a41db1369f1a/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTestSignature.java",
      "raw_url": "https://github.com/prestodb/presto/raw/d165b72cb7df4bbe4ac35ba5bd03a41db1369f1a/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTestSignature.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTestSignature.java?ref=d165b72cb7df4bbe4ac35ba5bd03a41db1369f1a",
      "patch": "@@ -25,13 +25,14 @@\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n import io.airlift.json.JsonCodec;\n import io.airlift.json.JsonCodecFactory;\n import io.airlift.json.ObjectMapperProvider;\n import org.testng.annotations.Test;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n \n import static com.facebook.presto.metadata.FunctionKind.SCALAR;\n import static com.facebook.presto.metadata.Signature.comparableTypeParameter;\n@@ -42,31 +43,180 @@\n import static com.facebook.presto.spi.type.HyperLogLogType.HYPER_LOG_LOG;\n import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;\n import static com.facebook.presto.spi.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.spi.type.VarcharType.createVarcharType;\n import static com.facebook.presto.type.UnknownType.UNKNOWN;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertNull;\n \n public class TestSignature\n {\n+    private final TypeSignature varcharX = new TypeSignature(StandardTypes.VARCHAR, ImmutableList.of(TypeSignatureParameter.of(new TypeLiteralCalculation(\"x\"))));\n+    private final TypeSignature varcharY = new TypeSignature(StandardTypes.VARCHAR, ImmutableList.of(TypeSignatureParameter.of(new TypeLiteralCalculation(\"y\"))));\n+\n     @Test\n-    public void testBindUnknown()\n+    public void testResolveCalculatedTypes()\n     {\n-        // given function(varchar(x)):boolean\n+        // given function(varchar(x), varchar(y)):boolean\n         Signature function = new Signature(\n                 \"function\",\n                 SCALAR,\n                 ImmutableList.of(),\n                 BooleanType.BOOLEAN.getTypeSignature(),\n-                ImmutableList.of(new TypeSignature(StandardTypes.VARCHAR, ImmutableList.of(TypeSignatureParameter.of(new TypeLiteralCalculation(\"x\"))))),\n+                ImmutableList.of(varcharX, varcharY),\n+                false);\n+\n+        TypeSignature varchar42 = createVarcharType(42).getTypeSignature();\n+        TypeSignature varchar44 = createVarcharType(44).getTypeSignature();\n+        TypeSignature varchar = new TypeSignature(StandardTypes.VARCHAR, ImmutableList.of());\n+        assertEquals(\n+                function.resolveCalculatedTypes(ImmutableList.of(varchar42, varchar44)).getArgumentTypes(),\n+                ImmutableList.of(varchar42, varchar44));\n+\n+        assertEquals(\n+                function.resolveCalculatedTypes(ImmutableList.of(UNKNOWN.getTypeSignature(), varchar44)).getArgumentTypes(),\n+                ImmutableList.of(varchar, varchar44));\n+    }\n+\n+    @Test\n+    public void testBindUnknown()\n+    {\n+        // given function(varchar(x)):boolean\n+        // does it bind to argument UNKNOWN\n+        // without coercion\n+        assertFunctionBind(\n+                ImmutableList.of(),\n+                BooleanType.BOOLEAN.getTypeSignature(),\n+                ImmutableList.of(varcharX),\n+                Optional.empty(),\n+                ImmutableList.of(UNKNOWN),\n                 false,\n-                ImmutableSet.of(\"x\"));\n+                null);\n+        // with coercion\n+        assertFunctionBind(\n+                ImmutableList.of(),\n+                BooleanType.BOOLEAN.getTypeSignature(),\n+                ImmutableList.of(varcharX),\n+                Optional.empty(),\n+                ImmutableList.of(UNKNOWN),\n+                true,\n+                ImmutableMap.of());\n+    }\n \n+    @Test\n+    public void testBindUnknownToArray()\n+    {\n+        TypeSignature templateType = new TypeSignature(\"T\", ImmutableList.of());\n+        // given function(array(T)):T\n         // does it bind to argument UNKNOWN\n         // without coercion\n-        assertEquals(function.bindTypeParameters(ImmutableList.of(UNKNOWN), false, new TypeRegistry()), null);\n+        assertFunctionBind(\n+                ImmutableList.of(),\n+                templateType,\n+                ImmutableList.of(new TypeSignature(StandardTypes.ARRAY, ImmutableList.of(TypeSignatureParameter.of(templateType)))),\n+                Optional.empty(),\n+                ImmutableList.of(UNKNOWN),\n+                false,\n+                null);\n         // with coercion\n-        assertEquals(function.bindTypeParameters(ImmutableList.of(UNKNOWN), true, new TypeRegistry()), true);\n+        // TODO: fix this\n+        /*\n+        assertFunctionBind(\n+                ImmutableList.of(),\n+                templateType,\n+                ImmutableList.of(new TypeSignature(StandardTypes.ARRAY, ImmutableList.of(TypeSignatureParameter.of(templateType)))),\n+                ImmutableSet.of(),\n+                Optional.empty(),\n+                ImmutableList.of(UNKNOWN),\n+                true,\n+                ImmutableMap.of(\"T\", UNKNOWN));*/\n+    }\n+\n+    @Test\n+    public void testBindVarcharTemplateStyle()\n+    {\n+        TypeSignature templateType1 = new TypeSignature(\"T1\", ImmutableList.of());\n+        TypeSignature templateType2 = new TypeSignature(\"T2\", ImmutableList.of());\n+        Type varchar42 = createVarcharType(42);\n+        Type varchar1 = createVarcharType(1);\n+\n+        // given f(T1):T2 bind f(varchar(42)):varchar(1)\n+        assertFunctionBind(\n+                ImmutableList.of(new TypeParameterRequirement(\"T1\", true, false, \"varchar\"), new TypeParameterRequirement(\"T2\", true, false, \"varchar\")),\n+                templateType2,\n+                ImmutableList.of(templateType1),\n+                Optional.of(varchar1),\n+                ImmutableList.of(varchar42),\n+                false,\n+                ImmutableMap.of(\"T1\", varchar42, \"T2\", varchar1));\n+    }\n+\n+    @Test\n+    public void testBindVarchar()\n+    {\n+        Type varchar44 = createVarcharType(44);\n+        Type varchar42 = createVarcharType(42);\n+        Type varchar1 = createVarcharType(1);\n+\n+        // given f(varchar(42)):varchar(42) bind f(varchar(44)):varchar(44)\n+        assertFunctionBind(\n+                ImmutableList.of(),\n+                varchar42.getTypeSignature(),\n+                ImmutableList.of(varchar42.getTypeSignature()),\n+                Optional.of(varchar44),\n+                ImmutableList.of(varchar44),\n+                true,\n+                null);\n+\n+        // given f(varchar(42)):varchar(42) bind f(varchar(1)):varchar(1) no coercion\n+        assertFunctionBind(\n+                ImmutableList.of(),\n+                varchar42.getTypeSignature(),\n+                ImmutableList.of(varchar42.getTypeSignature()),\n+                Optional.of(varchar1),\n+                ImmutableList.of(varchar1),\n+                false,\n+                null);\n+\n+        // given f(varchar(42)):varchar(42) bind f(varchar(1)):varchar(1) with coercion\n+        assertFunctionBind(\n+                ImmutableList.of(),\n+                varchar42.getTypeSignature(),\n+                ImmutableList.of(varchar42.getTypeSignature()),\n+                Optional.of(varchar1),\n+                ImmutableList.of(varchar1),\n+                true,\n+                ImmutableMap.of());\n+    }\n+\n+    private void assertFunctionBind(\n+            List<TypeParameterRequirement> typeParameterRequirements,\n+            TypeSignature returnType,\n+            List<TypeSignature> argumentTypes,\n+            Optional<Type> actualReturnType,\n+            List<? extends Type> actualArguments,\n+            boolean allowCoercion,\n+            Map<String, Type> expectedBoundParameters)\n+    {\n+        Signature function = new Signature(\n+                \"function\",\n+                SCALAR,\n+                typeParameterRequirements,\n+                returnType,\n+                argumentTypes,\n+                false);\n+\n+        Map<String, Type> actualBoundParameters;\n+        if (actualReturnType.isPresent()) {\n+            actualBoundParameters = function.bindTypeParameters(actualReturnType.get(), actualArguments, allowCoercion, new TypeRegistry());\n+        }\n+        else {\n+            actualBoundParameters = function.bindTypeParameters(actualArguments, allowCoercion, new TypeRegistry());\n+        }\n+\n+        assertEquals(\n+                actualBoundParameters,\n+                expectedBoundParameters);\n     }\n \n     @Test",
      "parent_sha": "02f4b461c904d859bb4123b39e887ad425c66621"
    }
  },
  {
    "oid": "db31297b575ac7ff2a0afd8ad197482a6c4614dd",
    "message": "Refactor product test for GRANT and REVOKE",
    "date": "2016-10-13T16:59:13Z",
    "url": "https://github.com/prestodb/presto/commit/db31297b575ac7ff2a0afd8ad197482a6c4614dd",
    "details": {
      "sha": "de97fa65850ce2c3bd13dc6be88b141229df506b",
      "filename": "presto-product-tests/src/main/java/com/facebook/presto/tests/hive/TestGrantRevoke.java",
      "status": "modified",
      "additions": 34,
      "deletions": 36,
      "changes": 70,
      "blob_url": "https://github.com/prestodb/presto/blob/db31297b575ac7ff2a0afd8ad197482a6c4614dd/presto-product-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2Fhive%2FTestGrantRevoke.java",
      "raw_url": "https://github.com/prestodb/presto/raw/db31297b575ac7ff2a0afd8ad197482a6c4614dd/presto-product-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2Fhive%2FTestGrantRevoke.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-product-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2Fhive%2FTestGrantRevoke.java?ref=db31297b575ac7ff2a0afd8ad197482a6c4614dd",
      "patch": "@@ -14,6 +14,7 @@\n \n package com.facebook.presto.tests.hive;\n \n+import com.teradata.tempto.BeforeTestWithContext;\n import com.teradata.tempto.ProductTest;\n import com.teradata.tempto.query.QueryExecutor;\n import org.testng.annotations.Test;\n@@ -28,6 +29,10 @@\n public class TestGrantRevoke\n     extends ProductTest\n {\n+    private String tableName;\n+    private QueryExecutor aliceExecutor;\n+    private QueryExecutor bobExecutor;\n+\n     /*\n      * Pre-requisites for the tests in this class:\n      *\n@@ -37,55 +42,48 @@ public class TestGrantRevoke\n      * \"bob@presto\" that has \"jdbc_user: bob\"\n      * (all other values of the connection are same as that of the default \"presto\" connection).\n     */\n-    @Test(groups = {HIVE_CONNECTOR, AUTHORIZATION, PROFILE_SPECIFIC_TESTS})\n-    public void testGrantRevoke()\n+\n+    @BeforeTestWithContext\n+    public void setup()\n     {\n-        String tableName = \"alice_owned_table\";\n-        QueryExecutor queryExecutorForAlice = connectToPresto(\"alice@presto\");\n-        QueryExecutor queryExecutorForBob = connectToPresto(\"bob@presto\");\n+        tableName = \"alice_owned_table\";\n+        aliceExecutor = connectToPresto(\"alice@presto\");\n+        bobExecutor = connectToPresto(\"bob@presto\");\n \n-        queryExecutorForAlice.executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n-        queryExecutorForAlice.executeQuery(format(\"CREATE TABLE %s(month bigint, day bigint)\", tableName));\n+        aliceExecutor.executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+        aliceExecutor.executeQuery(format(\"CREATE TABLE %s(month bigint, day bigint)\", tableName));\n \n-        assertThat(() -> queryExecutorForBob.executeQuery(format(\"SELECT * FROM %s\", tableName))).\n-                failsWithMessage(format(\"Access Denied: Cannot select from table default.%s\", tableName));\n-        assertThat(() -> queryExecutorForBob.executeQuery(format(\"INSERT INTO %s VALUES (3, 22)\", tableName))).\n-                failsWithMessage(format(\"Access Denied: Cannot insert into table default.%s\", tableName));\n+        assertAccessDeniedOnAllOperationsOnTable(bobExecutor, tableName);\n+    }\n \n-        //test GRANT\n-        queryExecutorForAlice.executeQuery(format(\"GRANT INSERT, SELECT ON %s TO bob\", tableName));\n-        assertThat(queryExecutorForBob.executeQuery(format(\"INSERT INTO %s VALUES (3, 22)\", tableName))).hasRowsCount(1);\n-        assertThat(queryExecutorForBob.executeQuery(format(\"SELECT * FROM %s\", tableName))).hasRowsCount(1);\n-        assertThat(() -> queryExecutorForBob.executeQuery(format(\"DELETE FROM %s WHERE day=3\", tableName))).\n+    @Test(groups = {HIVE_CONNECTOR, AUTHORIZATION, PROFILE_SPECIFIC_TESTS})\n+    public void testGrantRevoke()\n+    {\n+        // test GRANT\n+        aliceExecutor.executeQuery(format(\"GRANT INSERT, SELECT ON %s TO bob\", tableName));\n+        assertThat(bobExecutor.executeQuery(format(\"INSERT INTO %s VALUES (3, 22)\", tableName))).hasRowsCount(1);\n+        assertThat(bobExecutor.executeQuery(format(\"SELECT * FROM %s\", tableName))).hasRowsCount(1);\n+        assertThat(() -> bobExecutor.executeQuery(format(\"DELETE FROM %s WHERE day=3\", tableName))).\n                 failsWithMessage(format(\"Access Denied: Cannot delete from table default.%s\", tableName));\n \n-        //test REVOKE\n-        queryExecutorForAlice.executeQuery(format(\"REVOKE INSERT ON %s FROM bob\", tableName));\n-        assertThat(() -> queryExecutorForBob.executeQuery(format(\"INSERT INTO %s VALUES ('y', 5)\", tableName))).\n+        // test REVOKE\n+        aliceExecutor.executeQuery(format(\"REVOKE INSERT ON %s FROM bob\", tableName));\n+        assertThat(() -> bobExecutor.executeQuery(format(\"INSERT INTO %s VALUES ('y', 5)\", tableName))).\n                 failsWithMessage(format(\"Access Denied: Cannot insert into table default.%s\", tableName));\n-        assertThat(queryExecutorForBob.executeQuery(format(\"SELECT * FROM %s\", tableName))).hasRowsCount(1);\n+        assertThat(bobExecutor.executeQuery(format(\"SELECT * FROM %s\", tableName))).hasRowsCount(1);\n     }\n \n     @Test(groups = {HIVE_CONNECTOR, AUTHORIZATION, PROFILE_SPECIFIC_TESTS})\n     public void testGrantRevokeAll()\n     {\n-        String tableName = \"alice_owned_table\";\n-        QueryExecutor queryExecutorForAlice = connectToPresto(\"alice@presto\");\n-        QueryExecutor queryExecutorForBob = connectToPresto(\"bob@presto\");\n-\n-        queryExecutorForAlice.executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n-        queryExecutorForAlice.executeQuery(format(\"CREATE TABLE %s(month bigint, day bigint)\", tableName));\n-\n-        assertAccessDeniedOnAllOperationsOnTable(queryExecutorForBob, tableName);\n-\n-        queryExecutorForAlice.executeQuery(format(\"GRANT ALL PRIVILEGES ON %s TO bob\", tableName));\n-        assertThat(queryExecutorForBob.executeQuery(format(\"INSERT INTO %s VALUES (4, 13)\", tableName))).hasRowsCount(1);\n-        assertThat(queryExecutorForBob.executeQuery(format(\"SELECT * FROM %s\", tableName))).hasRowsCount(1);\n-        queryExecutorForBob.executeQuery(format(\"DELETE FROM %s\", tableName));\n-        assertThat(queryExecutorForBob.executeQuery(format(\"SELECT * FROM %s\", tableName))).hasNoRows();\n+        aliceExecutor.executeQuery(format(\"GRANT ALL PRIVILEGES ON %s TO bob\", tableName));\n+        assertThat(bobExecutor.executeQuery(format(\"INSERT INTO %s VALUES (4, 13)\", tableName))).hasRowsCount(1);\n+        assertThat(bobExecutor.executeQuery(format(\"SELECT * FROM %s\", tableName))).hasRowsCount(1);\n+        bobExecutor.executeQuery(format(\"DELETE FROM %s\", tableName));\n+        assertThat(bobExecutor.executeQuery(format(\"SELECT * FROM %s\", tableName))).hasNoRows();\n \n-        queryExecutorForAlice.executeQuery(format(\"REVOKE ALL PRIVILEGES ON %s FROM bob\", tableName));\n-        assertAccessDeniedOnAllOperationsOnTable(queryExecutorForBob, tableName);\n+        aliceExecutor.executeQuery(format(\"REVOKE ALL PRIVILEGES ON %s FROM bob\", tableName));\n+        assertAccessDeniedOnAllOperationsOnTable(bobExecutor, tableName);\n     }\n \n     private static void assertAccessDeniedOnAllOperationsOnTable(QueryExecutor queryExecutor, String tableName)",
      "parent_sha": "179bf3bfa89561c3195a122901c88b8c535f4b64"
    }
  },
  {
    "oid": "045a11ef46dda78b5742c225cface7a0cd82827c",
    "message": "Support equi joins in materialized view plan validator",
    "date": "2021-06-17T00:24:20Z",
    "url": "https://github.com/prestodb/presto/commit/045a11ef46dda78b5742c225cface7a0cd82827c",
    "details": {
      "sha": "093fe1cc1081ba48a3c7a07e2eb1b29991d3ac90",
      "filename": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/MaterializedViewPlanValidator.java",
      "status": "modified",
      "additions": 21,
      "deletions": 3,
      "changes": 24,
      "blob_url": "https://github.com/prestodb/presto/blob/045a11ef46dda78b5742c225cface7a0cd82827c/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FMaterializedViewPlanValidator.java",
      "raw_url": "https://github.com/prestodb/presto/raw/045a11ef46dda78b5742c225cface7a0cd82827c/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FMaterializedViewPlanValidator.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FMaterializedViewPlanValidator.java?ref=045a11ef46dda78b5742c225cface7a0cd82827c",
      "patch": "@@ -13,10 +13,12 @@\n  */\n package com.facebook.presto.sql.analyzer;\n \n+import com.facebook.presto.sql.tree.ComparisonExpression;\n import com.facebook.presto.sql.tree.DefaultTraversalVisitor;\n import com.facebook.presto.sql.tree.Join;\n import com.facebook.presto.sql.tree.JoinCriteria;\n import com.facebook.presto.sql.tree.JoinOn;\n+import com.facebook.presto.sql.tree.JoinUsing;\n import com.facebook.presto.sql.tree.LogicalBinaryExpression;\n import com.facebook.presto.sql.tree.Node;\n \n@@ -53,12 +55,14 @@ protected Void visitJoin(Join node, MaterializedViewPlanValidatorContext context\n         }\n \n         JoinCriteria joinCriteria = node.getCriteria().get();\n-        if (!(joinCriteria instanceof JoinOn)) {\n-            throw new SemanticException(NOT_SUPPORTED, node, \"Only join-on is supported for materialized view.\");\n+        if (!(joinCriteria instanceof JoinOn) && !(joinCriteria instanceof JoinUsing)) {\n+            throw new SemanticException(NOT_SUPPORTED, node, \"Only join-on and join-using are supported for materialized view.\");\n         }\n \n         context.setProcessingJoinNode(true);\n-        process(((JoinOn) joinCriteria).getExpression(), context);\n+        if (joinCriteria instanceof JoinOn) {\n+            process(((JoinOn) joinCriteria).getExpression(), context);\n+        }\n         context.setProcessingJoinNode(false);\n         return null;\n     }\n@@ -77,6 +81,20 @@ protected Void visitLogicalBinaryExpression(LogicalBinaryExpression node, Materi\n         return super.visitLogicalBinaryExpression(node, context);\n     }\n \n+    @Override\n+    protected Void visitComparisonExpression(ComparisonExpression node, MaterializedViewPlanValidatorContext context)\n+    {\n+        if (!context.isProcessingJoinNode()) {\n+            return super.visitComparisonExpression(node, context);\n+        }\n+\n+        if (!node.getOperator().equals(ComparisonExpression.Operator.EQUAL)) {\n+            throw new SemanticException(NOT_SUPPORTED, node, \"Only EQUAL join is supported for materialized view.\");\n+        }\n+\n+        return super.visitComparisonExpression(node, context);\n+    }\n+\n     protected static final class MaterializedViewPlanValidatorContext\n     {\n         private final Set<Join> joinNodes;",
      "parent_sha": "c21b5a821b9dc194038e3f2cdfeb28eeb58f4339"
    }
  },
  {
    "oid": "b789147afad376e3124e47e3c41c180edd6fe6c8",
    "message": "Add null check for SQLState",
    "date": "2016-05-17T19:20:01Z",
    "url": "https://github.com/prestodb/presto/commit/b789147afad376e3124e47e3c41c180edd6fe6c8",
    "details": {
      "sha": "63ac17a690167ca886c240fba933c12aa68456ea",
      "filename": "presto-raptor/src/main/java/com/facebook/presto/raptor/util/DatabaseUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/prestodb/presto/blob/b789147afad376e3124e47e3c41c180edd6fe6c8/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Futil%2FDatabaseUtil.java",
      "raw_url": "https://github.com/prestodb/presto/raw/b789147afad376e3124e47e3c41c180edd6fe6c8/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Futil%2FDatabaseUtil.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Futil%2FDatabaseUtil.java?ref=b789147afad376e3124e47e3c41c180edd6fe6c8",
      "patch": "@@ -81,7 +81,7 @@ public static void runIgnoringConstraintViolation(Runnable task)\n             for (Throwable throwable : Throwables.getCausalChain(e)) {\n                 if (throwable instanceof SQLException) {\n                     String state = ((SQLException) throwable).getSQLState();\n-                    if (state.startsWith(\"23\")) {\n+                    if (state != null && state.startsWith(\"23\")) {\n                         return;\n                     }\n                 }",
      "parent_sha": "8e03794f00455013cd0eefece51ec3deca6ba3cd"
    }
  },
  {
    "oid": "b805f3b0e3a0021eddc62ccd1d28726ee14d70f2",
    "message": "Fix divide by zero bug",
    "date": "2013-05-18T00:05:01Z",
    "url": "https://github.com/prestodb/presto/commit/b805f3b0e3a0021eddc62ccd1d28726ee14d70f2",
    "details": {
      "sha": "6cb0c97ad8668369c1cd6fdd2c4fc41b917a8c2c",
      "filename": "presto-main/src/main/java/com/facebook/presto/operator/PageBuilder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/prestodb/presto/blob/b805f3b0e3a0021eddc62ccd1d28726ee14d70f2/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FPageBuilder.java",
      "raw_url": "https://github.com/prestodb/presto/raw/b805f3b0e3a0021eddc62ccd1d28726ee14d70f2/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FPageBuilder.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FPageBuilder.java?ref=b805f3b0e3a0021eddc62ccd1d28726ee14d70f2",
      "patch": "@@ -29,7 +29,10 @@ public PageBuilder(List<TupleInfo> tupleInfos)\n \n     public PageBuilder(List<TupleInfo> tupleInfos, DataSize maxSize)\n     {\n-        int bytesPerColumn = (int) (maxSize.toBytes() / tupleInfos.size());\n+        int bytesPerColumn = 0;\n+        if (!tupleInfos.isEmpty()) {\n+            bytesPerColumn = (int) (maxSize.toBytes() / tupleInfos.size());\n+        }\n \n         blockBuilders = new BlockBuilder[tupleInfos.size()];\n         for (int i = 0; i < blockBuilders.length; i++) {",
      "parent_sha": "ea54c74f9dac0ebe7ee34dcc92d8a706fa7502ef"
    }
  },
  {
    "oid": "a4b085245c74243b3d7b48983549088dcc7a238b",
    "message": "Add PlanBuilder.join(...) overload with a filter parameter",
    "date": "2017-07-03T19:19:17Z",
    "url": "https://github.com/prestodb/presto/commit/a4b085245c74243b3d7b48983549088dcc7a238b",
    "details": {
      "sha": "67715d21aedbf055cc1ebec9fd06de63e0a37fd1",
      "filename": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/prestodb/presto/blob/a4b085245c74243b3d7b48983549088dcc7a238b/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2Ftest%2FPlanBuilder.java",
      "raw_url": "https://github.com/prestodb/presto/raw/a4b085245c74243b3d7b48983549088dcc7a238b/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2Ftest%2FPlanBuilder.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2Ftest%2FPlanBuilder.java?ref=a4b085245c74243b3d7b48983549088dcc7a238b",
      "patch": "@@ -390,7 +390,17 @@ protected ExchangeNode build()\n \n     public JoinNode join(JoinNode.Type joinType, PlanNode left, PlanNode right, JoinNode.EquiJoinClause... criteria)\n     {\n-        return new JoinNode(idAllocator.getNextId(),\n+        return join(joinType, left, right, Optional.empty(), criteria);\n+    }\n+\n+    public JoinNode join(JoinNode.Type joinType, PlanNode left, PlanNode right, Expression filter, JoinNode.EquiJoinClause... criteria)\n+    {\n+        return join(joinType, left, right, Optional.of(filter), criteria);\n+    }\n+\n+    private JoinNode join(JoinNode.Type joinType, PlanNode left, PlanNode right, Optional<Expression> filter, JoinNode.EquiJoinClause... criteria)\n+    {\n+        return join(\n                 joinType,\n                 left,\n                 right,\n@@ -399,11 +409,9 @@ public JoinNode join(JoinNode.Type joinType, PlanNode left, PlanNode right, Join\n                         .addAll(left.getOutputSymbols())\n                         .addAll(right.getOutputSymbols())\n                         .build(),\n+                filter,\n                 Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty()\n-        );\n+                Optional.empty());\n     }\n \n     public JoinNode join(",
      "parent_sha": "423b7ead5a530f419c6aa476173f7ea98d7e379d"
    }
  },
  {
    "oid": "a68b96b06f24496ababb21018d82edd5091ee74b",
    "message": "Split large pages in TempSingleStreamSpiller\n\nThis prevents int overflow when serializing pages, since page\nserialization requires the page size in bytes to fit in an integer.\n\nWas already added for FileSingleStreamSpiller at commit f61df1b",
    "date": "2020-12-17T17:40:54Z",
    "url": "https://github.com/prestodb/presto/commit/a68b96b06f24496ababb21018d82edd5091ee74b",
    "details": {
      "sha": "2bedd339a1e94adc0ce505e27daa81af904d505a",
      "filename": "presto-main/src/main/java/com/facebook/presto/spiller/TempStorageSingleStreamSpiller.java",
      "status": "modified",
      "additions": 16,
      "deletions": 12,
      "changes": 28,
      "blob_url": "https://github.com/prestodb/presto/blob/a68b96b06f24496ababb21018d82edd5091ee74b/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspiller%2FTempStorageSingleStreamSpiller.java",
      "raw_url": "https://github.com/prestodb/presto/raw/a68b96b06f24496ababb21018d82edd5091ee74b/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspiller%2FTempStorageSingleStreamSpiller.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspiller%2FTempStorageSingleStreamSpiller.java?ref=a68b96b06f24496ababb21018d82edd5091ee74b",
      "patch": "@@ -22,7 +22,6 @@\n import com.facebook.presto.spi.page.PageDataOutput;\n import com.facebook.presto.spi.page.PagesSerde;\n import com.facebook.presto.spi.page.PagesSerdeUtil;\n-import com.facebook.presto.spi.page.SerializedPage;\n import com.facebook.presto.spi.spiller.SpillCipher;\n import com.facebook.presto.spi.storage.TempDataOperationContext;\n import com.facebook.presto.spi.storage.TempDataSink;\n@@ -47,6 +46,8 @@\n import java.util.List;\n import java.util.Optional;\n \n+import static com.facebook.presto.common.block.PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES;\n+import static com.facebook.presto.execution.buffer.PageSplitterUtil.splitPage;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.google.common.base.Preconditions.checkState;\n import static java.util.Objects.requireNonNull;\n@@ -149,17 +150,20 @@ private void writePages(Iterator<Page> pageIterator)\n         while (pageIterator.hasNext()) {\n             Page page = pageIterator.next();\n             spilledPagesInMemorySize += page.getSizeInBytes();\n-            SerializedPage serializedPage = serde.serialize(page);\n-            long pageSize = serializedPage.getSizeInBytes();\n-            localSpillContext.updateBytes(pageSize);\n-            spillerStats.addToTotalSpilledBytes(pageSize);\n-\n-            PageDataOutput pageDataOutput = new PageDataOutput(serializedPage);\n-            bufferedBytes += pageDataOutput.size();\n-            bufferedPages.add(pageDataOutput);\n-            if (bufferedBytes > maxBufferSizeInBytes) {\n-                flushBufferedPages();\n-            }\n+            // page serialization requires  page.getSizeInBytes() + Integer.BYTES to fit in an integer\n+            splitPage(page, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()\n+                    .map(serde::serialize)\n+                    .forEach(serializedPage -> {\n+                        long pageSize = serializedPage.getSizeInBytes();\n+                        localSpillContext.updateBytes(pageSize);\n+                        spillerStats.addToTotalSpilledBytes(pageSize);\n+                        PageDataOutput pageDataOutput = new PageDataOutput(serializedPage);\n+                        bufferedBytes += pageDataOutput.size();\n+                        bufferedPages.add(pageDataOutput);\n+                        if (bufferedBytes > maxBufferSizeInBytes) {\n+                            flushBufferedPages();\n+                        }\n+                    });\n         }\n \n         memoryContext.setBytes(bufferedBytes + dataSink.getRetainedSizeInBytes());",
      "parent_sha": "ab243b6ce24ac150bac4821c4a11342e89daa88a"
    }
  },
  {
    "oid": "01590935deefddbce0c4dc2a418324c1a9c091b8",
    "message": "Improve rollback handling in PrestoSparkQueryExecutionFactory",
    "date": "2020-05-12T10:38:55Z",
    "url": "https://github.com/prestodb/presto/commit/01590935deefddbce0c4dc2a418324c1a9c091b8",
    "details": {
      "sha": "d4c7e429239e59d6dc7a255d93e25f2f6cee0386",
      "filename": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkQueryExecutionFactory.java",
      "status": "modified",
      "additions": 79,
      "deletions": 49,
      "changes": 128,
      "blob_url": "https://github.com/prestodb/presto/blob/01590935deefddbce0c4dc2a418324c1a9c091b8/presto-spark-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspark%2FPrestoSparkQueryExecutionFactory.java",
      "raw_url": "https://github.com/prestodb/presto/raw/01590935deefddbce0c4dc2a418324c1a9c091b8/presto-spark-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspark%2FPrestoSparkQueryExecutionFactory.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-spark-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspark%2FPrestoSparkQueryExecutionFactory.java?ref=01590935deefddbce0c4dc2a418324c1a9c091b8",
      "patch": "@@ -158,39 +158,62 @@ public IPrestoSparkQueryExecution create(\n                 prestoSparkSession,\n                 credentialsProviders,\n                 authenticatorProviders);\n+\n+        // TODO: implement warning collection\n+        WarningCollector warningCollector = WarningCollector.NOOP;\n+\n+        // TODO: implement query monitor\n+        // queryMonitor.queryCreatedEvent();\n+\n         TransactionId transactionId = transactionManager.beginTransaction(true);\n         Session session = sessionSupplier.createSession(queryId, sessionContext)\n                 .beginTransactionId(transactionId, transactionManager, accessControl);\n \n-        // TODO: implement query monitor\n-        // queryMonitor.queryCreatedEvent();\n+        try {\n+            PreparedQuery preparedQuery = queryPreparer.prepareQuery(session, sql, warningCollector);\n+            PlanAndUpdateType planAndUpdateType = queryPlanner.createQueryPlan(session, preparedQuery, warningCollector);\n+            SubPlan fragmentedPlan = planFragmenter.fragmentQueryPlan(session, planAndUpdateType.getPlan(), warningCollector);\n+            log.info(textDistributedPlan(fragmentedPlan, metadata.getFunctionManager(), session, true));\n+            TableWriteInfo tableWriteInfo = getTableWriteInfo(session, fragmentedPlan);\n \n-        // TODO: implement warning collection\n-        WarningCollector warningCollector = WarningCollector.NOOP;\n+            JavaSparkContext javaSparkContext = new JavaSparkContext(sparkContext);\n+            CollectionAccumulator<SerializedTaskStats> taskStatsCollector = new CollectionAccumulator<>();\n+            taskStatsCollector.register(sparkContext, new Some<>(\"taskStatsCollector\"), false);\n \n-        PreparedQuery preparedQuery = queryPreparer.prepareQuery(session, sql, warningCollector);\n-        PlanAndUpdateType planAndUpdateType = queryPlanner.createQueryPlan(session, preparedQuery, warningCollector);\n-        SubPlan fragmentedPlan = planFragmenter.fragmentQueryPlan(session, planAndUpdateType.getPlan(), warningCollector);\n-        log.info(textDistributedPlan(fragmentedPlan, metadata.getFunctionManager(), session, true));\n-        TableWriteInfo tableWriteInfo = getTableWriteInfo(session, fragmentedPlan);\n-\n-        JavaSparkContext javaSparkContext = new JavaSparkContext(sparkContext);\n-        CollectionAccumulator<SerializedTaskStats> taskStatsCollector = new CollectionAccumulator<>();\n-        taskStatsCollector.register(sparkContext, new Some<>(\"taskStatsCollector\"), false);\n-\n-        return new PrestoSparkQueryExecution(\n-                javaSparkContext,\n-                session,\n-                queryMonitor,\n-                taskStatsCollector,\n-                executorFactoryProvider,\n-                fragmentedPlan,\n-                planAndUpdateType.getUpdateType(),\n-                taskStatsJsonCodec,\n-                sparkTaskDescriptorJsonCodec,\n-                rddFactory,\n-                tableWriteInfo,\n-                transactionManager);\n+            return new PrestoSparkQueryExecution(\n+                    javaSparkContext,\n+                    session,\n+                    queryMonitor,\n+                    taskStatsCollector,\n+                    executorFactoryProvider,\n+                    fragmentedPlan,\n+                    planAndUpdateType.getUpdateType(),\n+                    taskStatsJsonCodec,\n+                    sparkTaskDescriptorJsonCodec,\n+                    rddFactory,\n+                    tableWriteInfo,\n+                    transactionManager);\n+        }\n+        catch (RuntimeException executionFailure) {\n+            try {\n+                rollback(session, transactionManager);\n+            }\n+            catch (RuntimeException rollbackFailure) {\n+                if (executionFailure != rollbackFailure) {\n+                    executionFailure.addSuppressed(rollbackFailure);\n+                }\n+            }\n+            try {\n+                // TODO: implement query monitor\n+                // queryMonitor.queryImmediateFailureEvent();\n+            }\n+            catch (RuntimeException eventFailure) {\n+                if (executionFailure != eventFailure) {\n+                    executionFailure.addSuppressed(eventFailure);\n+                }\n+            }\n+            throw executionFailure;\n+        }\n     }\n \n     private TableWriteInfo getTableWriteInfo(Session session, SubPlan plan)\n@@ -226,6 +249,25 @@ else if (writerTarget instanceof ExecutionWriterTarget.InsertHandle) {\n         }\n     }\n \n+    private static void commit(Session session, TransactionManager transactionManager)\n+    {\n+        getFutureValue(transactionManager.asyncCommit(getTransactionInfo(session, transactionManager).getTransactionId()));\n+    }\n+\n+    private static void rollback(Session session, TransactionManager transactionManager)\n+    {\n+        getFutureValue(transactionManager.asyncAbort(getTransactionInfo(session, transactionManager).getTransactionId()));\n+    }\n+\n+    private static TransactionInfo getTransactionInfo(Session session, TransactionManager transactionManager)\n+    {\n+        Optional<TransactionInfo> transaction = session.getTransactionId()\n+                .flatMap(transactionManager::getOptionalTransactionInfo);\n+        checkState(transaction.isPresent(), \"transaction is not present\");\n+        checkState(transaction.get().isAutoCommitContext(), \"transaction doesn't have auto commit context enabled\");\n+        return transaction.get();\n+    }\n+\n     public static class PrestoSparkQueryExecution\n             implements IPrestoSparkQueryExecution\n     {\n@@ -276,18 +318,25 @@ public List<List<Object>> execute()\n             List<Tuple2<Integer, PrestoSparkRow>> rddResults;\n             try {\n                 rddResults = doExecute(plan);\n-                commit();\n+                commit(session, transactionManager);\n             }\n             catch (RuntimeException executionFailure) {\n                 try {\n-                    rollback();\n+                    rollback(session, transactionManager);\n                 }\n                 catch (RuntimeException rollbackFailure) {\n                     if (executionFailure != rollbackFailure) {\n                         executionFailure.addSuppressed(rollbackFailure);\n                     }\n                 }\n-                queryCompletedEvent(Optional.of(executionFailure));\n+                try {\n+                    queryCompletedEvent(Optional.of(executionFailure));\n+                }\n+                catch (RuntimeException eventFailure) {\n+                    if (executionFailure != eventFailure) {\n+                        executionFailure.addSuppressed(eventFailure);\n+                    }\n+                }\n                 throw executionFailure;\n             }\n \n@@ -366,25 +415,6 @@ private JavaPairRDD<Integer, PrestoSparkRow> createRdd(SubPlan subPlan)\n                     tableWriteInfo);\n         }\n \n-        private void commit()\n-        {\n-            getFutureValue(transactionManager.asyncCommit(getTransactionInfo().getTransactionId()));\n-        }\n-\n-        private void rollback()\n-        {\n-            getFutureValue(transactionManager.asyncAbort(getTransactionInfo().getTransactionId()));\n-        }\n-\n-        private TransactionInfo getTransactionInfo()\n-        {\n-            Optional<TransactionInfo> transaction = session.getTransactionId()\n-                    .flatMap(transactionManager::getOptionalTransactionInfo);\n-            checkState(transaction.isPresent(), \"transaction is not present\");\n-            checkState(transaction.get().isAutoCommitContext(), \"transaction doesn't have auto commit context enabled\");\n-            return transaction.get();\n-        }\n-\n         private void queryCompletedEvent(Optional<Throwable> failure)\n         {\n             // TODO: implement query monitor and collect query info",
      "parent_sha": "71d6280c3ba422f4f5cb7143bd7f22e636cbedcc"
    }
  },
  {
    "oid": "3ded40b723ec5f1316e11f5759e0e25230ae6a95",
    "message": "Make OrcWriter Unit tests succeed if no IllegalStateException is thrown",
    "date": "2019-10-08T21:28:22Z",
    "url": "https://github.com/prestodb/presto/commit/3ded40b723ec5f1316e11f5759e0e25230ae6a95",
    "details": {
      "sha": "dd128e4a5e300089791536005fbb0b1b91304b97",
      "filename": "presto-orc/src/test/java/com/facebook/presto/orc/TestOrcWriter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/prestodb/presto/blob/3ded40b723ec5f1316e11f5759e0e25230ae6a95/presto-orc%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2FTestOrcWriter.java",
      "raw_url": "https://github.com/prestodb/presto/raw/3ded40b723ec5f1316e11f5759e0e25230ae6a95/presto-orc%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2FTestOrcWriter.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-orc%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2FTestOrcWriter.java?ref=3ded40b723ec5f1316e11f5759e0e25230ae6a95",
      "patch": "@@ -123,9 +123,8 @@ public void testWriteOutputStreamsInOrder()\n         }\n     }\n \n-    // TODO: the exception will be removed once the bug is fixed\n-    @Test(expectedExceptions = IllegalStateException.class)\n-    public void testVerifyIllegalStateException()\n+    @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = \"Dummy exception from mocked instance\")\n+    public void testVerifyNoIllegalStateException()\n             throws IOException\n     {\n         OrcWriter writer = new OrcWriter(",
      "parent_sha": "ff85e978dcb0f5dcdee2ee51e5e12fb3c8ca2906"
    }
  },
  {
    "oid": "3e48a1b616fbd1268969322ea5ed076a43d0b4b4",
    "message": "Change DictionaryBlock compact check to be lazy\n\nDuring construction of a DictionaryBlock the compact size is calculted by\ngetting the length of the used dictionary positions, but this information\nis only needed in some cases.",
    "date": "2016-12-15T21:00:53Z",
    "url": "https://github.com/prestodb/presto/commit/3e48a1b616fbd1268969322ea5ed076a43d0b4b4",
    "details": {
      "sha": "8e7b2b638b67177c6f1a1ded78fd67f653840414",
      "filename": "presto-spi/src/main/java/com/facebook/presto/spi/block/DictionaryBlock.java",
      "status": "modified",
      "additions": 30,
      "deletions": 19,
      "changes": 49,
      "blob_url": "https://github.com/prestodb/presto/blob/3e48a1b616fbd1268969322ea5ed076a43d0b4b4/presto-spi%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspi%2Fblock%2FDictionaryBlock.java",
      "raw_url": "https://github.com/prestodb/presto/raw/3e48a1b616fbd1268969322ea5ed076a43d0b4b4/presto-spi%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspi%2Fblock%2FDictionaryBlock.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-spi%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspi%2Fblock%2FDictionaryBlock.java?ref=3e48a1b616fbd1268969322ea5ed076a43d0b4b4",
      "patch": "@@ -39,8 +39,8 @@ public class DictionaryBlock\n     private final Block dictionary;\n     private final Slice ids;\n     private final int retainedSizeInBytes;\n-    private final int sizeInBytes;\n-    private final int uniqueIds;\n+    private volatile int sizeInBytes = -1;\n+    private volatile int uniqueIds = -1;\n     private final DictionaryId dictionarySourceId;\n \n     public DictionaryBlock(int positionCount, Block dictionary, Slice ids)\n@@ -81,23 +81,6 @@ public DictionaryBlock(int positionCount, Block dictionary, Slice ids, boolean d\n             this.sizeInBytes = this.retainedSizeInBytes;\n             this.uniqueIds = dictionary.getPositionCount();\n         }\n-        else {\n-            int sizeInBytes = 0;\n-            int uniqueIds = 0;\n-            boolean[] seen = new boolean[dictionary.getPositionCount()];\n-            for (int i = 0; i < positionCount; i++) {\n-                int position = getIndex(ids, i);\n-                if (!seen[position]) {\n-                    if (!dictionary.isNull(position)) {\n-                        sizeInBytes += dictionary.getLength(position);\n-                    }\n-                    uniqueIds++;\n-                    seen[position] = true;\n-                }\n-            }\n-            this.sizeInBytes = sizeInBytes + ids.length();\n-            this.uniqueIds = uniqueIds;\n-        }\n     }\n \n     @Override\n@@ -199,9 +182,33 @@ public int getPositionCount()\n     @Override\n     public int getSizeInBytes()\n     {\n+        // this is racy but is safe because sizeInBytes is an int and the calculation is stable\n+        if (sizeInBytes < 0) {\n+            calculateCompactSize();\n+        }\n         return sizeInBytes;\n     }\n \n+    private void calculateCompactSize()\n+    {\n+        int sizeInBytes = 0;\n+        int uniqueIds = 0;\n+        boolean[] seen = new boolean[dictionary.getPositionCount()];\n+        for (int i = 0; i < positionCount; i++) {\n+            int position = getIndex(ids, i);\n+            if (!seen[position]) {\n+                if (!dictionary.isNull(position)) {\n+                    // todo this is wrong for ArrayBlock and InterleavedBlock as length means entry count\n+                    sizeInBytes += dictionary.getLength(position);\n+                }\n+                uniqueIds++;\n+                seen[position] = true;\n+            }\n+        }\n+        this.sizeInBytes = sizeInBytes;\n+        this.uniqueIds = uniqueIds;\n+    }\n+\n     @Override\n     public int getRetainedSizeInBytes()\n     {\n@@ -283,6 +290,10 @@ public DictionaryId getDictionarySourceId()\n \n     public boolean isCompact()\n     {\n+        // this is racy but is safe because sizeInBytes is an int and the calculation is stable\n+        if (uniqueIds < 0) {\n+            calculateCompactSize();\n+        }\n         return uniqueIds == dictionary.getPositionCount();\n     }\n ",
      "parent_sha": "6155b1da694ce4a69f72dda258426b0085527ad9"
    }
  },
  {
    "oid": "264777270a7debebb3be77af8f0ed04b6a1fd342",
    "message": "Fix bogus null check in Kafka's listTableColumns\n\nThe `getTableMetadata()` can never return null result. While absence of\nthe table is signalled with an exception, it can never be the\ncase in `listTableColumns()` because (currently) tables are statically\ndefined in this connector.",
    "date": "2018-02-09T07:56:42Z",
    "url": "https://github.com/prestodb/presto/commit/264777270a7debebb3be77af8f0ed04b6a1fd342",
    "details": {
      "sha": "8005298f692421d0d937b07f6943e64bad0dc38a",
      "filename": "presto-kafka/src/main/java/com/facebook/presto/kafka/KafkaMetadata.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/prestodb/presto/blob/264777270a7debebb3be77af8f0ed04b6a1fd342/presto-kafka%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fkafka%2FKafkaMetadata.java",
      "raw_url": "https://github.com/prestodb/presto/raw/264777270a7debebb3be77af8f0ed04b6a1fd342/presto-kafka%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fkafka%2FKafkaMetadata.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-kafka%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fkafka%2FKafkaMetadata.java?ref=264777270a7debebb3be77af8f0ed04b6a1fd342",
      "patch": "@@ -41,6 +41,7 @@\n \n import static com.facebook.presto.kafka.KafkaHandleResolver.convertColumnHandle;\n import static com.facebook.presto.kafka.KafkaHandleResolver.convertTableHandle;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n /**\n@@ -180,10 +181,12 @@ public Map<SchemaTableName, List<ColumnMetadata>> listTableColumns(ConnectorSess\n         }\n \n         for (SchemaTableName tableName : tableNames) {\n-            ConnectorTableMetadata tableMetadata = getTableMetadata(tableName);\n-            // table can disappear during listing operation\n-            if (tableMetadata != null) {\n-                columns.put(tableName, tableMetadata.getColumns());\n+            try {\n+                columns.put(tableName, getTableMetadata(tableName).getColumns());\n+            }\n+            catch (TableNotFoundException e) {\n+                // Normally it would mean the table disappeared during listing operation\n+                throw new IllegalStateException(format(\"Table %s cannot be gone because tables are statically defined\", tableName), e);\n             }\n         }\n         return columns.build();",
      "parent_sha": "3ab5914cfea839505c82eee5efae160447517fc5"
    }
  },
  {
    "oid": "376e2102aa711ff412c894dfcae7349d89e7e363",
    "message": "Compact effective predicate early\n\nTupleDomain compaction reduces a long list of well specified values to a\nrange if the number of values threshold is crossed.\n\nThe compaction has been moved as part of the 76ea27ef commit.\n\neffectivePredicate is carried to a worker with a HiveSplit. HiveSplit\nmust be serialized into JSON on the coordinator. Without a compaction\nthe serialization of large tupple domains (100+ values) results in\nexcessive CPU usage on coordinator.",
    "date": "2019-07-31T18:09:28Z",
    "url": "https://github.com/prestodb/presto/commit/376e2102aa711ff412c894dfcae7349d89e7e363",
    "details": {
      "sha": "6607fd8f24d9e4c43ef166795a8634db1db6ead8",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionManager.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/prestodb/presto/blob/376e2102aa711ff412c894dfcae7349d89e7e363/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHivePartitionManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/376e2102aa711ff412c894dfcae7349d89e7e363/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHivePartitionManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHivePartitionManager.java?ref=376e2102aa711ff412c894dfcae7349d89e7e363",
      "patch": "@@ -90,6 +90,7 @@ public class HivePartitionManager\n     private final boolean assumeCanonicalPartitionKeys;\n     private final TypeManager typeManager;\n     private final int maxPartitionsPerScan;\n+    private final int domainCompactionThreshold;\n \n     @Inject\n     public HivePartitionManager(\n@@ -100,19 +101,23 @@ public HivePartitionManager(\n                 typeManager,\n                 hiveClientConfig.getDateTimeZone(),\n                 hiveClientConfig.isAssumeCanonicalPartitionKeys(),\n-                hiveClientConfig.getMaxPartitionsPerScan());\n+                hiveClientConfig.getMaxPartitionsPerScan(),\n+                hiveClientConfig.getDomainCompactionThreshold());\n     }\n \n     public HivePartitionManager(\n             TypeManager typeManager,\n             DateTimeZone timeZone,\n             boolean assumeCanonicalPartitionKeys,\n-            int maxPartitionsPerScan)\n+            int maxPartitionsPerScan,\n+            int domainCompactionThreshold)\n     {\n         this.timeZone = requireNonNull(timeZone, \"timeZone is null\");\n         this.assumeCanonicalPartitionKeys = assumeCanonicalPartitionKeys;\n         this.typeManager = requireNonNull(typeManager, \"typeManager is null\");\n         this.maxPartitionsPerScan = maxPartitionsPerScan;\n+        checkArgument(domainCompactionThreshold >= 1, \"domainCompactionThreshold must be at least 1\");\n+        this.domainCompactionThreshold = domainCompactionThreshold;\n     }\n \n     public Iterable<HivePartition> getPartitionsIterator(SemiTransactionalHiveMetastore metastore, ConnectorTableHandle tableHandle, Constraint<ColumnHandle> constraint)\n@@ -163,11 +168,13 @@ public HivePartitionResult getPartitions(SemiTransactionalHiveMetastore metastor\n             return new HivePartitionResult(partitionColumns, partitions, TupleDomain.none(), TupleDomain.none(), TupleDomain.none(), hiveBucketHandle, Optional.empty());\n         }\n \n+        TupleDomain<ColumnHandle> compactEffectivePredicate = effectivePredicate.compact(domainCompactionThreshold);\n+\n         if (partitionColumns.isEmpty()) {\n             return new HivePartitionResult(\n                     partitionColumns,\n                     partitions,\n-                    effectivePredicate,\n+                    compactEffectivePredicate,\n                     effectivePredicate,\n                     TupleDomain.none(),\n                     hiveBucketHandle,",
      "parent_sha": "a8e5bd143b3e61a554949653a07558311dbae682"
    }
  },
  {
    "oid": "1aeef5b560d897d7a3384dea2c2ac8c8306693d0",
    "message": "Fix tests for disabling distinct + order by aggregation spill\n\nThe session property we were using before to ensure spill wasn't being\nrun wasn't actually enforcing a limit.  Additionally, the distinct\naggregation test wasn't spilling in the aggregation even with spill\nenabled because the aggregation would finish before spilling started.\nFinally, we needed to remove the final order by from the queries to\nprevent failures due to spilling the order by operator.",
    "date": "2021-08-06T15:16:27Z",
    "url": "https://github.com/prestodb/presto/commit/1aeef5b560d897d7a3384dea2c2ac8c8306693d0",
    "details": {
      "sha": "44b4713496e91961a466ac2b02906a39361f52b4",
      "filename": "presto-tests/src/test/java/com/facebook/presto/tests/TestSpilledAggregations.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/prestodb/presto/blob/1aeef5b560d897d7a3384dea2c2ac8c8306693d0/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FTestSpilledAggregations.java",
      "raw_url": "https://github.com/prestodb/presto/raw/1aeef5b560d897d7a3384dea2c2ac8c8306693d0/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FTestSpilledAggregations.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FTestSpilledAggregations.java?ref=1aeef5b560d897d7a3384dea2c2ac8c8306693d0",
      "patch": "@@ -17,9 +17,9 @@\n import com.facebook.presto.testing.QueryRunner;\n import org.testng.annotations.Test;\n \n-import static com.facebook.presto.SystemSessionProperties.AGGREGATION_OPERATOR_UNSPILL_MEMORY_LIMIT;\n import static com.facebook.presto.SystemSessionProperties.DISTINCT_AGGREGATION_SPILL_ENABLED;\n import static com.facebook.presto.SystemSessionProperties.ORDER_BY_AGGREGATION_SPILL_ENABLED;\n+import static com.facebook.presto.SystemSessionProperties.QUERY_MAX_REVOCABLE_MEMORY_PER_NODE;\n \n public class TestSpilledAggregations\n         extends AbstractTestAggregations\n@@ -43,10 +43,10 @@ public void testDoesNotSpillOrderByWhenDisabled()\n         Session session = Session.builder(getSession())\n                 .setSystemProperty(ORDER_BY_AGGREGATION_SPILL_ENABLED, \"false\")\n                 // set this low so that if we ran with spill the query would fail\n-                .setSystemProperty(AGGREGATION_OPERATOR_UNSPILL_MEMORY_LIMIT, \"1B\")\n+                .setSystemProperty(QUERY_MAX_REVOCABLE_MEMORY_PER_NODE, \"1B\")\n                 .build();\n         assertQuery(session,\n-                \"SELECT orderpriority, custkey, array_agg(orderstatus ORDER BY orderstatus) FROM orders GROUP BY orderpriority, custkey ORDER BY 1, 2\");\n+                \"SELECT orderpriority, custkey, array_agg(orderstatus ORDER BY orderstatus) FROM orders GROUP BY orderpriority, custkey\");\n     }\n \n     @Test\n@@ -73,11 +73,11 @@ public void testDoesNotSpillDistinctWhenDisabled()\n         Session session = Session.builder(getSession())\n                 .setSystemProperty(DISTINCT_AGGREGATION_SPILL_ENABLED, \"false\")\n                 // set this low so that if we ran with spill the query would fail\n-                .setSystemProperty(AGGREGATION_OPERATOR_UNSPILL_MEMORY_LIMIT, \"1B\")\n+                .setSystemProperty(QUERY_MAX_REVOCABLE_MEMORY_PER_NODE, \"1B\")\n                 .build();\n         // the sum() is necessary so that the aggregation isn't optimized into multiple aggregation nodes\n         assertQuery(session,\n-                \"SELECT custkey, sum(custkey), count(DISTINCT orderpriority) FILTER(WHERE orderkey > 5) FROM orders GROUP BY custkey ORDER BY 1\");\n+                \"SELECT custkey, sum(custkey), count(DISTINCT orderpriority) FROM orders GROUP BY custkey\");\n     }\n \n     @Test",
      "parent_sha": "f6b301f885a175441515dd9f9ea338d7fbdfa1ba"
    }
  },
  {
    "oid": "72f9cb1dfeb68b9df48235fe1c930c56b634d90e",
    "message": "Convert equality-based Multimaps in Analysis into NodeRef-based",
    "date": "2017-05-30T21:25:14Z",
    "url": "https://github.com/prestodb/presto/commit/72f9cb1dfeb68b9df48235fe1c930c56b634d90e",
    "details": {
      "sha": "a20f23df30fb5083794c8e6e5bd7b5b50dc13723",
      "filename": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java",
      "status": "modified",
      "additions": 14,
      "deletions": 25,
      "changes": 39,
      "blob_url": "https://github.com/prestodb/presto/blob/72f9cb1dfeb68b9df48235fe1c930c56b634d90e/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FAnalysis.java",
      "raw_url": "https://github.com/prestodb/presto/raw/72f9cb1dfeb68b9df48235fe1c930c56b634d90e/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FAnalysis.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FAnalysis.java?ref=72f9cb1dfeb68b9df48235fe1c930c56b634d90e",
      "patch": "@@ -57,6 +57,7 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkState;\n import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n import static java.util.Collections.unmodifiableMap;\n import static java.util.Collections.unmodifiableSet;\n import static java.util.Objects.requireNonNull;\n@@ -83,11 +84,10 @@ public class Analysis\n     private final Map<NodeRef<OrderBy>, List<FunctionCall>> orderByWindowFunctions = new LinkedHashMap<>();\n \n     private final Map<NodeRef<Join>, Expression> joins = new LinkedHashMap<>();\n-    // TODO convert ListMultimap too\n-    private final ListMultimap<Node, InPredicate> inPredicatesSubqueries = ArrayListMultimap.create();\n-    private final ListMultimap<Node, SubqueryExpression> scalarSubqueries = ArrayListMultimap.create();\n-    private final ListMultimap<Node, ExistsPredicate> existsSubqueries = ArrayListMultimap.create();\n-    private final ListMultimap<Node, QuantifiedComparisonExpression> quantifiedComparisonSubqueries = ArrayListMultimap.create();\n+    private final ListMultimap<NodeRef<Node>, InPredicate> inPredicatesSubqueries = ArrayListMultimap.create();\n+    private final ListMultimap<NodeRef<Node>, SubqueryExpression> scalarSubqueries = ArrayListMultimap.create();\n+    private final ListMultimap<NodeRef<Node>, ExistsPredicate> existsSubqueries = ArrayListMultimap.create();\n+    private final ListMultimap<NodeRef<Node>, QuantifiedComparisonExpression> quantifiedComparisonSubqueries = ArrayListMultimap.create();\n \n     private final Map<NodeRef<Table>, TableHandle> tables = new LinkedHashMap<>();\n \n@@ -302,42 +302,31 @@ public Expression getJoinCriteria(Join join)\n \n     public void recordSubqueries(Node node, ExpressionAnalysis expressionAnalysis)\n     {\n-        this.inPredicatesSubqueries.putAll(node, expressionAnalysis.getSubqueryInPredicates());\n-        this.scalarSubqueries.putAll(node, expressionAnalysis.getScalarSubqueries());\n-        this.existsSubqueries.putAll(node, expressionAnalysis.getExistsSubqueries());\n-        this.quantifiedComparisonSubqueries.putAll(node, expressionAnalysis.getQuantifiedComparisons());\n+        NodeRef<Node> key = NodeRef.of(node);\n+        this.inPredicatesSubqueries.putAll(key, expressionAnalysis.getSubqueryInPredicates());\n+        this.scalarSubqueries.putAll(key, expressionAnalysis.getScalarSubqueries());\n+        this.existsSubqueries.putAll(key, expressionAnalysis.getExistsSubqueries());\n+        this.quantifiedComparisonSubqueries.putAll(key, expressionAnalysis.getQuantifiedComparisons());\n     }\n \n     public List<InPredicate> getInPredicateSubqueries(Node node)\n     {\n-        if (inPredicatesSubqueries.containsKey(node)) {\n-            return inPredicatesSubqueries.get(node);\n-        }\n-        return ImmutableList.of();\n+        return ImmutableList.copyOf(inPredicatesSubqueries.get(NodeRef.of(node)));\n     }\n \n     public List<SubqueryExpression> getScalarSubqueries(Node node)\n     {\n-        if (scalarSubqueries.containsKey(node)) {\n-            return scalarSubqueries.get(node);\n-        }\n-        return ImmutableList.of();\n+        return ImmutableList.copyOf(scalarSubqueries.get(NodeRef.of(node)));\n     }\n \n     public List<ExistsPredicate> getExistsSubqueries(Node node)\n     {\n-        if (existsSubqueries.containsKey(node)) {\n-            return existsSubqueries.get(node);\n-        }\n-        return ImmutableList.of();\n+        return ImmutableList.copyOf(existsSubqueries.get(NodeRef.of(node)));\n     }\n \n     public List<QuantifiedComparisonExpression> getQuantifiedComparisonSubqueries(Node node)\n     {\n-        if (quantifiedComparisonSubqueries.containsKey(node)) {\n-            return quantifiedComparisonSubqueries.get(node);\n-        }\n-        return ImmutableList.of();\n+        return unmodifiableList(quantifiedComparisonSubqueries.get(NodeRef.of(node)));\n     }\n \n     public void setWindowFunctions(QuerySpecification node, List<FunctionCall> functions)",
      "parent_sha": "5bb64c56c5f3c0fae279a66dbe1987daf91eb15d"
    }
  },
  {
    "oid": "a865cde0797a4f4242150fbd6ce0169b996c3c4a",
    "message": "Add null checks to TaskHandle constructor",
    "date": "2017-06-30T17:10:08Z",
    "url": "https://github.com/prestodb/presto/commit/a865cde0797a4f4242150fbd6ce0169b996c3c4a",
    "details": {
      "sha": "d5ed8a56e6f536047a4f45d74c35e15f798d8395",
      "filename": "presto-main/src/main/java/com/facebook/presto/execution/executor/TaskHandle.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/prestodb/presto/blob/a865cde0797a4f4242150fbd6ce0169b996c3c4a/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2Fexecutor%2FTaskHandle.java",
      "raw_url": "https://github.com/prestodb/presto/raw/a865cde0797a4f4242150fbd6ce0169b996c3c4a/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2Fexecutor%2FTaskHandle.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2Fexecutor%2FTaskHandle.java?ref=a865cde0797a4f4242150fbd6ce0169b996c3c4a",
      "patch": "@@ -31,6 +31,7 @@\n \n import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n public class TaskHandle\n@@ -58,10 +59,12 @@ public class TaskHandle\n \n     public TaskHandle(TaskId taskId, MultilevelSplitQueue splitQueue, DoubleSupplier utilizationSupplier, int initialSplitConcurrency, Duration splitConcurrencyAdjustFrequency)\n     {\n-        this.taskId = taskId;\n-        this.splitQueue = splitQueue;\n-        this.utilizationSupplier = utilizationSupplier;\n-        this.concurrencyController = new SplitConcurrencyController(initialSplitConcurrency, splitConcurrencyAdjustFrequency);\n+        this.taskId = requireNonNull(taskId, \"taskId is null\");\n+        this.splitQueue = requireNonNull(splitQueue, \"splitQueue is null\");\n+        this.utilizationSupplier = requireNonNull(utilizationSupplier, \"utilizationSupplier is null\");\n+        this.concurrencyController = new SplitConcurrencyController(\n+                initialSplitConcurrency,\n+                requireNonNull(splitConcurrencyAdjustFrequency, \"splitConcurrencyAdjustFrequency is null\"));\n     }\n \n     public synchronized Priority addScheduledNanos(long durationNanos)",
      "parent_sha": "2395e964ce12aff1509f856895f1982d73101f7e"
    }
  },
  {
    "oid": "28c14e8a7564a096d522bc3fbd9922aeeafc7ff7",
    "message": "Group constant definitions with matching RequirementProvider",
    "date": "2018-07-23T09:10:02Z",
    "url": "https://github.com/prestodb/presto/commit/28c14e8a7564a096d522bc3fbd9922aeeafc7ff7",
    "details": {
      "sha": "47ec6a42fd7c0a7a647ddc80a95876d016d4ab59",
      "filename": "presto-product-tests/src/main/java/com/facebook/presto/tests/kafka/KafkaSmokeTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/prestodb/presto/blob/28c14e8a7564a096d522bc3fbd9922aeeafc7ff7/presto-product-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2Fkafka%2FKafkaSmokeTest.java",
      "raw_url": "https://github.com/prestodb/presto/raw/28c14e8a7564a096d522bc3fbd9922aeeafc7ff7/presto-product-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2Fkafka%2FKafkaSmokeTest.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-product-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2Fkafka%2FKafkaSmokeTest.java?ref=28c14e8a7564a096d522bc3fbd9922aeeafc7ff7",
      "patch": "@@ -41,9 +41,6 @@ public class KafkaSmokeTest\n {\n     private static final String KAFKA_CATALOG = \"kafka\";\n \n-    private static final String ALL_DATATYPES_RAW_TABLE_NAME = \"product_tests.all_datatypes_raw\";\n-    private static final String ALL_DATATYPES_RAW_TOPIC_NAME = \"all_datatypes_raw\";\n-\n     private static final String SIMPLE_KEY_AND_VALUE_TABLE_NAME = \"product_tests.simple_key_and_value\";\n     private static final String SIMPLE_KEY_AND_VALUE_TOPIC_NAME = \"simple_key_and_value\";\n \n@@ -82,6 +79,10 @@ public void testSelectSimpleKeyAndValue()\n                 row(\"piotr\", 3, \"kasia\", 4));\n     }\n \n+\n+    private static final String ALL_DATATYPES_RAW_TABLE_NAME = \"product_tests.all_datatypes_raw\";\n+    private static final String ALL_DATATYPES_RAW_TOPIC_NAME = \"all_datatypes_raw\";\n+\n     private static class AllDataTypesRawTable\n             implements RequirementsProvider\n     {",
      "parent_sha": "3f68ca4abd84c5d7b252e99e2a50be4ad655cd0b"
    }
  },
  {
    "oid": "477f98d1f737fdc73ab3c84a618132e82f68dca0",
    "message": "Properly lifecycle query runner in TestMetadataManager",
    "date": "2017-05-04T22:20:43Z",
    "url": "https://github.com/prestodb/presto/commit/477f98d1f737fdc73ab3c84a618132e82f68dca0",
    "details": {
      "sha": "3c8c71b280ee08bbf40c8ca381b22504022bad8a",
      "filename": "presto-tests/src/test/java/com/facebook/presto/tests/TestMetadataManager.java",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/prestodb/presto/blob/477f98d1f737fdc73ab3c84a618132e82f68dca0/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FTestMetadataManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/477f98d1f737fdc73ab3c84a618132e82f68dca0/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FTestMetadataManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FTestMetadataManager.java?ref=477f98d1f737fdc73ab3c84a618132e82f68dca0",
      "patch": "@@ -16,6 +16,8 @@\n import com.facebook.presto.metadata.MetadataManager;\n import com.facebook.presto.testing.QueryRunner;\n import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import static com.facebook.presto.tests.tpch.TpchQueryRunner.createQueryRunner;\n@@ -30,16 +32,23 @@\n @Test(singleThreaded = true)\n public class TestMetadataManager\n {\n-    private final QueryRunner queryRunner;\n-    private final MetadataManager metadataManager;\n+    private QueryRunner queryRunner;\n+    private MetadataManager metadataManager;\n \n-    TestMetadataManager()\n+    @BeforeClass\n+    public void setUp()\n             throws Exception\n     {\n         queryRunner = createQueryRunner();\n         metadataManager = (MetadataManager) queryRunner.getMetadata();\n     }\n \n+    @AfterClass(alwaysRun = true)\n+    public void tearDown()\n+    {\n+        queryRunner.close();\n+    }\n+\n     @Test\n     public void testMetadataIsClearedAfterQueryFinished()\n     {",
      "parent_sha": "d8e6e05b301e8226f62bacf32a1805d85a75ca6e"
    }
  },
  {
    "oid": "63e702a83fad67102e0107bd74fd1fd7c5e0b0ea",
    "message": "Make code more readable and add docs",
    "date": "2012-09-17T19:11:22Z",
    "url": "https://github.com/prestodb/presto/commit/63e702a83fad67102e0107bd74fd1fd7c5e0b0ea",
    "details": {
      "sha": "2cfd0949eb0e04e5b20dd814e3e2f231f47cc9cf",
      "filename": "src/main/java/com/facebook/presto/block/Cursors.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/prestodb/presto/blob/63e702a83fad67102e0107bd74fd1fd7c5e0b0ea/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fblock%2FCursors.java",
      "raw_url": "https://github.com/prestodb/presto/raw/63e702a83fad67102e0107bd74fd1fd7c5e0b0ea/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fblock%2FCursors.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fblock%2FCursors.java?ref=63e702a83fad67102e0107bd74fd1fd7c5e0b0ea",
      "patch": "@@ -5,14 +5,19 @@\n \n public class Cursors\n {\n+    /**\n+     * Advances all cursors to the next position\n+\n+     * @return true if all cursors were advanced. Otherwise, false.\n+     */\n     public static boolean advanceNextPosition(Iterable<Cursor> cursors)\n     {\n-        boolean done = false;\n+        boolean advancedAll = true;\n         for (Cursor cursor : cursors) {\n-            done = !cursor.advanceNextPosition() || done;\n+            advancedAll = cursor.advanceNextPosition() && advancedAll;\n         }\n \n-        return !done;\n+        return advancedAll;\n     }\n \n     public static Ordering<Cursor> orderByPosition()",
      "parent_sha": "6128f3a41c437fbc1cc434aa56f5def8da65ce79"
    }
  },
  {
    "oid": "10ddb7bf764bfd131bc368b1aa0971e1b88601b3",
    "message": "Add compression in ParquetFileWriterFactory",
    "date": "2020-05-26T18:17:39Z",
    "url": "https://github.com/prestodb/presto/commit/10ddb7bf764bfd131bc368b1aa0971e1b88601b3",
    "details": {
      "sha": "65cc7bfa5421ed9a749f065fad36e64934f690f6",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetFileWriterFactory.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/prestodb/presto/blob/10ddb7bf764bfd131bc368b1aa0971e1b88601b3/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetFileWriterFactory.java",
      "raw_url": "https://github.com/prestodb/presto/raw/10ddb7bf764bfd131bc368b1aa0971e1b88601b3/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetFileWriterFactory.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2Fparquet%2FParquetFileWriterFactory.java?ref=10ddb7bf764bfd131bc368b1aa0971e1b88601b3",
      "patch": "@@ -31,6 +31,7 @@\n import org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat;\n import org.apache.hadoop.mapred.JobConf;\n import org.joda.time.DateTimeZone;\n+import parquet.hadoop.ParquetOutputFormat;\n import parquet.hadoop.metadata.CompressionCodecName;\n \n import java.io.IOException;\n@@ -94,6 +95,8 @@ public Optional<HiveFileWriter> createFileWriter(Path path, List<String> inputCo\n             return Optional.empty();\n         }\n \n+        CompressionCodecName compressionCodecName = getCompression(conf);\n+\n         List<String> fileColumnNames = Splitter.on(',').trimResults().omitEmptyStrings().splitToList(schema.getProperty(META_TABLE_COLUMNS, \"\"));\n         List<Type> fileColumnTypes = toHiveTypes(schema.getProperty(META_TABLE_COLUMN_TYPES, \"\")).stream()\n                 .map(hiveType -> hiveType.getType(typeManager))\n@@ -118,10 +121,19 @@ public Optional<HiveFileWriter> createFileWriter(Path path, List<String> inputCo\n                     fileColumnTypes,\n                     parquetWriterOptions,\n                     fileInputColumnIndexes,\n-                    CompressionCodecName.SNAPPY));\n+                    compressionCodecName));\n         }\n         catch (IOException e) {\n             throw new PrestoException(HIVE_WRITER_OPEN_ERROR, \"Error creating Parquet file\", e);\n         }\n     }\n+\n+    private static CompressionCodecName getCompression(JobConf configuration)\n+    {\n+        String compressionName = configuration.get(ParquetOutputFormat.COMPRESSION);\n+        if (compressionName == null) {\n+            return CompressionCodecName.GZIP;\n+        }\n+        return CompressionCodecName.valueOf(compressionName);\n+    }\n }",
      "parent_sha": "5428bbc11d22c2618f4c65cd5982d977ac0c5d9c"
    }
  },
  {
    "oid": "50d5b7ca93ab00653d069f7435b86f88a0802460",
    "message": "Add tests for query and split statistics",
    "date": "2016-08-30T20:21:28Z",
    "url": "https://github.com/prestodb/presto/commit/50d5b7ca93ab00653d069f7435b86f88a0802460",
    "details": {
      "sha": "dbf5296bfce4ee674d8f89ed9381ca7e9d405c73",
      "filename": "presto-tests/src/test/java/com/facebook/presto/execution/TestEventListener.java",
      "status": "modified",
      "additions": 24,
      "deletions": 3,
      "changes": 27,
      "blob_url": "https://github.com/prestodb/presto/blob/50d5b7ca93ab00653d069f7435b86f88a0802460/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FTestEventListener.java",
      "raw_url": "https://github.com/prestodb/presto/raw/50d5b7ca93ab00653d069f7435b86f88a0802460/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FTestEventListener.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FTestEventListener.java?ref=50d5b7ca93ab00653d069f7435b86f88a0802460",
      "patch": "@@ -18,23 +18,27 @@\n import com.facebook.presto.spi.eventlistener.QueryCompletedEvent;\n import com.facebook.presto.spi.eventlistener.QueryCreatedEvent;\n import com.facebook.presto.spi.eventlistener.SplitCompletedEvent;\n+import com.facebook.presto.testing.MaterializedResult;\n import com.facebook.presto.testing.QueryRunner;\n import com.facebook.presto.tests.DistributedQueryRunner;\n import com.facebook.presto.tpch.TpchPlugin;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n import org.intellij.lang.annotations.Language;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.util.stream.Collectors.toSet;\n import static org.testng.Assert.assertEquals;\n \n @Test(singleThreaded = true)\n@@ -92,9 +96,9 @@ public void testConstantQuery()\n         assertEquals(queryCompletedEvent.getStatistics().getTotalRows(), 0L);\n         assertEquals(queryCreatedEvent.getMetadata().getQueryId(), queryCompletedEvent.getMetadata().getQueryId());\n \n-        // TODO: change to equality check of num events vs statistics for events after we fix final statistics collection\n         List<SplitCompletedEvent> splitCompletedEvents = events.getSplitCompletedEvents();\n         assertEquals(splitCompletedEvents.get(0).getQueryId(), queryCompletedEvent.getMetadata().getQueryId());\n+        assertEquals(splitCompletedEvents.get(0).getStatistics().getCompletedPositions(), 1);\n     }\n \n     @Test\n@@ -115,11 +119,28 @@ public void testNormalQuery()\n         assertEquals(queryCompletedEvent.getIoMetadata().getInputs().size(), 1);\n         assertEquals(getOnlyElement(queryCompletedEvent.getIoMetadata().getInputs()).getConnectorId(), \"tpch\");\n         assertEquals(queryCreatedEvent.getMetadata().getQueryId(), queryCompletedEvent.getMetadata().getQueryId());\n+        assertEquals(queryCompletedEvent.getStatistics().getCompletedSplits(), SPLITS_PER_NODE + 1);\n \n-        // TODO: change to equality check of num events vs statistics for events after we fix final statistics collection\n         List<SplitCompletedEvent> splitCompletedEvents = events.getSplitCompletedEvents();\n         assertEquals(splitCompletedEvents.size(), SPLITS_PER_NODE + 1); // leaf splits + aggregation split\n-        assertEquals(splitCompletedEvents.get(0).getQueryId(), queryCompletedEvent.getMetadata().getQueryId());\n+\n+        // All splits must have the same query ID\n+        Set<String> actual = splitCompletedEvents.stream()\n+                .map(SplitCompletedEvent::getQueryId)\n+                .collect(toSet());\n+        assertEquals(actual, ImmutableSet.of(queryCompletedEvent.getMetadata().getQueryId()));\n+\n+        // Sum of row count processed by all leaf stages is equal to the number of rows in the table\n+        long actualCompletedPositions = splitCompletedEvents.stream()\n+                .filter(e -> !e.getStageId().endsWith(\".0\"))    // filter out the root stage\n+                .mapToLong(e -> e.getStatistics().getCompletedPositions())\n+                .sum();\n+\n+        MaterializedResult result = queryRunner.execute(session, \"SELECT count(*) FROM lineitem\");\n+        long expectedCompletedPositions = (long) result.getMaterializedRows().get(0).getField(0);\n+\n+        assertEquals(actualCompletedPositions, expectedCompletedPositions);\n+        assertEquals(queryCompletedEvent.getStatistics().getTotalRows(), expectedCompletedPositions);\n     }\n \n     static class EventsBuilder",
      "parent_sha": "d092d5edf0a24fd38dc086da373f9c2b4cb75649"
    }
  },
  {
    "oid": "153761bf66a10a7350e0e73456e74fe6b8e3ca76",
    "message": "Add query id to NoSuchElementException\n\nCo-authored-by: Dain Sundstrom <dain@iq80.com>\nCo-authored-by: Raghav Sethi <raghavsethi.rs@gmail.com>",
    "date": "2020-03-11T17:17:09Z",
    "url": "https://github.com/prestodb/presto/commit/153761bf66a10a7350e0e73456e74fe6b8e3ca76",
    "details": {
      "sha": "6979cb820b9c81d7c291c08248eb8c6946730733",
      "filename": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/prestodb/presto/blob/153761bf66a10a7350e0e73456e74fe6b8e3ca76/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FQueryTracker.java",
      "raw_url": "https://github.com/prestodb/presto/raw/153761bf66a10a7350e0e73456e74fe6b8e3ca76/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FQueryTracker.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FQueryTracker.java?ref=153761bf66a10a7350e0e73456e74fe6b8e3ca76",
      "patch": "@@ -165,7 +165,7 @@ public T getQuery(QueryId queryId)\n             throws NoSuchElementException\n     {\n         return tryGetQuery(queryId)\n-                .orElseThrow(NoSuchElementException::new);\n+                .orElseThrow(() -> new NoSuchElementException(queryId.toString()));\n     }\n \n     public Optional<T> tryGetQuery(QueryId queryId)",
      "parent_sha": "8d5283d7ab6e4ed0cc5bd303fc1497bfcface81c"
    }
  },
  {
    "oid": "6e3e2863e9969012dffea761bed83d14ba94dad7",
    "message": "Cache final query info and free output stage",
    "date": "2015-05-01T03:05:25Z",
    "url": "https://github.com/prestodb/presto/commit/6e3e2863e9969012dffea761bed83d14ba94dad7",
    "details": {
      "sha": "db900155931eac36b15019bb6e95cc2034862654",
      "filename": "presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java",
      "status": "modified",
      "additions": 19,
      "deletions": 1,
      "changes": 20,
      "blob_url": "https://github.com/prestodb/presto/blob/6e3e2863e9969012dffea761bed83d14ba94dad7/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FSqlQueryExecution.java",
      "raw_url": "https://github.com/prestodb/presto/raw/6e3e2863e9969012dffea761bed83d14ba94dad7/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FSqlQueryExecution.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FSqlQueryExecution.java?ref=6e3e2863e9969012dffea761bed83d14ba94dad7",
      "patch": "@@ -58,7 +58,7 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n @ThreadSafe\n-public class SqlQueryExecution\n+public final class SqlQueryExecution\n         implements QueryExecution\n {\n     private static final OutputBuffers ROOT_OUTPUT_BUFFERS = INITIAL_EMPTY_OUTPUT_BUFFERS\n@@ -82,6 +82,7 @@ public class SqlQueryExecution\n \n     private final QueryExplainer queryExplainer;\n     private final AtomicReference<SqlStageExecution> outputStage = new AtomicReference<>();\n+    private final AtomicReference<QueryInfo> finalQueryInfo = new AtomicReference<>();\n     private final NodeTaskMap nodeTaskMap;\n \n     public SqlQueryExecution(QueryId queryId,\n@@ -128,6 +129,14 @@ public SqlQueryExecution(QueryId queryId,\n             checkNotNull(self, \"self is null\");\n             this.stateMachine = new QueryStateMachine(queryId, query, session, self, queryExecutor);\n \n+            // when the query finishes cache the final query info, and clear the reference to the output stage\n+            stateMachine.addStateChangeListener(state -> {\n+                if (state.isDone() && finalQueryInfo.get() == null) {\n+                    finalQueryInfo.compareAndSet(null, getQueryInfo());\n+                    outputStage.set(null);\n+                }\n+            });\n+\n             this.queryExplainer = new QueryExplainer(session, planOptimizers, metadata, sqlParser, experimentalSyntaxEnabled);\n         }\n     }\n@@ -309,7 +318,16 @@ public QueryId getQueryId()\n     public QueryInfo getQueryInfo()\n     {\n         try (SetThreadName ignored = new SetThreadName(\"Query-%s\", stateMachine.getQueryId())) {\n+            // acquire reference to outputStage before checking finalQueryInfo, because\n+            // state change listener sets finalQueryInfo and then clears outputStage when\n+            // the query finishes.\n             SqlStageExecution outputStage = this.outputStage.get();\n+\n+            QueryInfo finalQueryInfo = this.finalQueryInfo.get();\n+            if (finalQueryInfo != null) {\n+                return finalQueryInfo;\n+            }\n+\n             StageInfo stageInfo = null;\n             if (outputStage != null) {\n                 stageInfo = outputStage.getStageInfo();",
      "parent_sha": "f62150b7f0a1a2ffccdeaff2878043237cf079ab"
    }
  },
  {
    "oid": "6d665b4a1dea06946ffa8a5dd3cc1e7b53f2ea08",
    "message": "Use more efficient getApproximateLogicalSizeInBytes in OrcWriter\n\nOrcWriter.estimateAverageLogicalSizePerRow has the top memory allocation\nin some KDS pipeline. Since the original code was to estimate the page's\nlogical size and do not require accurate size to be calculated, this\ncommit changes the call of the expensive getLogicalSizeInBytes method to\na much faster and momory friendly method getApproximateLogicalSizeInBytes\nthat estimate the approximate logical size of a page.",
    "date": "2020-11-02T22:17:11Z",
    "url": "https://github.com/prestodb/presto/commit/6d665b4a1dea06946ffa8a5dd3cc1e7b53f2ea08",
    "details": {
      "sha": "1c4042a31eeb896a5f0343152acd2e09e9acedc4",
      "filename": "presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/prestodb/presto/blob/6d665b4a1dea06946ffa8a5dd3cc1e7b53f2ea08/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2FOrcWriter.java",
      "raw_url": "https://github.com/prestodb/presto/raw/6d665b4a1dea06946ffa8a5dd3cc1e7b53f2ea08/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2FOrcWriter.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2FOrcWriter.java?ref=6d665b4a1dea06946ffa8a5dd3cc1e7b53f2ea08",
      "patch": "@@ -87,8 +87,8 @@\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n import static io.airlift.slice.Slices.utf8Slice;\n import static io.airlift.units.DataSize.Unit.MEGABYTE;\n-import static java.lang.Integer.max;\n import static java.lang.Integer.min;\n+import static java.lang.Math.max;\n import static java.lang.Math.toIntExact;\n import static java.util.Objects.requireNonNull;\n import static java.util.stream.Collectors.toList;\n@@ -309,8 +309,8 @@ public void write(Page page)\n         }\n \n         // avoid chunk with huge logical size\n-        int averageLogicalSizePerRow = estimateAverageLogicalSizePerRow(page);\n-        int maxChunkRowCount = max(1, chunkMaxLogicalBytes / max(1, averageLogicalSizePerRow));\n+        double averageLogicalSizePerRow = (double) page.getApproximateLogicalSizeInBytes() / page.getPositionCount();\n+        int maxChunkRowCount = max(1, (int) (chunkMaxLogicalBytes / max(1, averageLogicalSizePerRow)));\n \n         while (page != null) {\n             // logical size and row group boundaries\n@@ -746,14 +746,6 @@ public void validate(OrcDataSource input)\n                 DwrfKeyProvider.of(intermediateKeyMetadata.build()));\n     }\n \n-    private int estimateAverageLogicalSizePerRow(Page page)\n-    {\n-        checkArgument(page.getPositionCount() > 0, \"page is empty\");\n-        // sample at most 100 rows to estimate average row logical size\n-        Page chunk = page.getRegion(0, min(page.getPositionCount(), 100));\n-        return toIntExact(chunk.getLogicalSizeInBytes() / chunk.getPositionCount());\n-    }\n-\n     private static <T> List<T> toDenseList(Map<Integer, T> data, int expectedSize)\n     {\n         checkArgument(data.size() == expectedSize);",
      "parent_sha": "11c80531cf0e179b43f9a5e6864f8ec0c1655af4"
    }
  },
  {
    "oid": "bea0d2c8e82fa263cc7573a46ab487145a3a047d",
    "message": "Normalize info schema and system connector registration path",
    "date": "2015-12-11T00:47:49Z",
    "url": "https://github.com/prestodb/presto/commit/bea0d2c8e82fa263cc7573a46ab487145a3a047d",
    "details": {
      "sha": "5603f256eaa7af0c9bcae068165e38512379c256",
      "filename": "presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java",
      "status": "modified",
      "additions": 40,
      "deletions": 21,
      "changes": 61,
      "blob_url": "https://github.com/prestodb/presto/blob/bea0d2c8e82fa263cc7573a46ab487145a3a047d/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fconnector%2FConnectorManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/bea0d2c8e82fa263cc7573a46ab487145a3a047d/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fconnector%2FConnectorManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fconnector%2FConnectorManager.java?ref=bea0d2c8e82fa263cc7573a46ab487145a3a047d",
      "patch": "@@ -33,7 +33,6 @@\n import com.facebook.presto.spi.SystemTable;\n import com.facebook.presto.spi.classloader.ThreadContextClassLoader;\n import com.facebook.presto.spi.security.ConnectorAccessControl;\n-import com.facebook.presto.spi.session.PropertyMetadata;\n import com.facebook.presto.split.PageSinkManager;\n import com.facebook.presto.split.PageSourceManager;\n import com.facebook.presto.split.RecordPageSinkProvider;\n@@ -44,7 +43,6 @@\n import javax.annotation.PreDestroy;\n import javax.inject.Inject;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -53,6 +51,7 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Sets.newConcurrentHashSet;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n@@ -75,6 +74,7 @@ public class ConnectorManager\n \n     private final ConcurrentMap<String, ConnectorFactory> connectorFactories = new ConcurrentHashMap<>();\n \n+    private final Set<String> catalogs = newConcurrentHashSet();\n     private final ConcurrentMap<String, Connector> connectors = new ConcurrentHashMap<>();\n \n     private final AtomicBoolean stopped = new AtomicBoolean();\n@@ -144,16 +144,31 @@ public synchronized void createConnection(String catalogName, ConnectorFactory c\n         requireNonNull(catalogName, \"catalogName is null\");\n         requireNonNull(properties, \"properties is null\");\n         requireNonNull(connectorFactory, \"connectorFactory is null\");\n+        checkArgument(!catalogs.contains(catalogName), \"A catalog already exists for %s\", catalogName);\n \n         String connectorId = getConnectorId(catalogName);\n         checkState(!connectors.containsKey(connectorId), \"A connector %s already exists\", connectorId);\n \n         Connector connector = connectorFactory.create(connectorId, properties);\n \n-        addConnector(catalogName, connectorId, connector);\n+        addCatalogConnector(catalogName, connectorId, connector);\n+        catalogs.add(catalogName);\n     }\n \n-    private synchronized void addConnector(String catalogName, String connectorId, Connector connector)\n+    private synchronized void addCatalogConnector(String catalogName, String connectorId, Connector connector)\n+    {\n+        addConnectorInternal(ConnectorType.STANDARD, catalogName, connectorId, connector);\n+        String informationSchemaId = makeInformationSchemaConnectorId(connectorId);\n+        addConnectorInternal(ConnectorType.INFORMATION_SCHEMA, catalogName, informationSchemaId, new InformationSchemaConnector(informationSchemaId, catalogName, nodeManager, metadataManager));\n+        String systemId = makeSystemTablesConnectorId(connectorId);\n+        addConnectorInternal(ConnectorType.SYSTEM, catalogName, systemId, new SystemConnector(systemId, nodeManager, connector.getSystemTables()));\n+\n+        // Register session and table properties once per catalog\n+        metadataManager.getSessionPropertyManager().addConnectorSessionProperties(catalogName, connector.getSessionProperties());\n+        metadataManager.getTablePropertyManager().addTableProperties(catalogName, connector.getTableProperties());\n+    }\n+\n+    private synchronized void addConnectorInternal(ConnectorType type, String catalogName, String connectorId, Connector connector)\n     {\n         checkState(!stopped.get(), \"ConnectorManager is stopped\");\n         checkState(!connectors.containsKey(connectorId), \"A connector %s already exists\", connectorId);\n@@ -218,8 +233,8 @@ private synchronized void addConnector(String catalogName, String connectorId, C\n         catch (UnsupportedOperationException ignored) {\n         }\n \n-        List<PropertyMetadata<?>> tableProperties = connector.getTableProperties();\n-        requireNonNull(tableProperties, format(\"Connector %s returned null table properties\", connectorId));\n+        requireNonNull(connector.getSessionProperties(), format(\"Connector %s returned null session properties\", connectorId));\n+        requireNonNull(connector.getTableProperties(), format(\"Connector %s returned null table properties\", connectorId));\n \n         ConnectorAccessControl accessControl = null;\n         try {\n@@ -231,25 +246,22 @@ private synchronized void addConnector(String catalogName, String connectorId, C\n         // IMPORTANT: all the instances need to be fetched from the connector *before* we add them to the corresponding managers.\n         // Otherwise, a broken connector would leave the managers in an inconsistent state with respect to each other\n \n-        metadataManager.addConnectorMetadata(connectorId, catalogName, connectorMetadata);\n-\n-        Connector informationSchemaConnector = new InformationSchemaConnector(makeInformationSchemaConnectorId(connectorId), catalogName, nodeManager, metadataManager);\n-        handleResolver.addHandleResolver(makeInformationSchemaConnectorId(connectorId), informationSchemaConnector.getHandleResolver());\n-        metadataManager.addInformationSchemaMetadata(makeInformationSchemaConnectorId(connectorId), catalogName, informationSchemaConnector.getMetadata());\n-        splitManager.addConnectorSplitManager(makeInformationSchemaConnectorId(connectorId), informationSchemaConnector.getSplitManager());\n-        pageSourceManager.addConnectorPageSourceProvider(makeInformationSchemaConnectorId(connectorId), informationSchemaConnector.getPageSourceProvider());\n-\n-        Connector systemConnector = new SystemConnector(makeSystemTablesConnectorId(connectorId), nodeManager, systemTables);\n-        handleResolver.addHandleResolver(makeSystemTablesConnectorId(connectorId), systemConnector.getHandleResolver());\n-        metadataManager.addSystemTablesMetadata(makeSystemTablesConnectorId(connectorId), catalogName, systemConnector.getMetadata());\n-        splitManager.addConnectorSplitManager(makeSystemTablesConnectorId(connectorId), systemConnector.getSplitManager());\n-        pageSourceManager.addConnectorPageSourceProvider(makeSystemTablesConnectorId(connectorId), new RecordPageSourceProvider(systemConnector.getRecordSetProvider()));\n+        if (type == ConnectorType.STANDARD) {\n+            metadataManager.addConnectorMetadata(connectorId, catalogName, connectorMetadata);\n+        }\n+        else if (type == ConnectorType.INFORMATION_SCHEMA) {\n+            metadataManager.addInformationSchemaMetadata(connectorId, catalogName, connectorMetadata);\n+        }\n+        else if (type == ConnectorType.SYSTEM) {\n+            metadataManager.addSystemTablesMetadata(connectorId, catalogName, connectorMetadata);\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"Unhandled type: \" + type);\n+        }\n \n         splitManager.addConnectorSplitManager(connectorId, connectorSplitManager);\n         handleResolver.addHandleResolver(connectorId, connectorHandleResolver);\n         pageSourceManager.addConnectorPageSourceProvider(connectorId, connectorPageSourceProvider);\n-        metadataManager.getSessionPropertyManager().addConnectorSessionProperties(catalogName, connector.getSessionProperties());\n-        metadataManager.getTablePropertyManager().addTableProperties(catalogName, tableProperties);\n \n         if (connectorPageSinkProvider != null) {\n             pageSinkManager.addConnectorPageSinkProvider(connectorId, connectorPageSinkProvider);\n@@ -264,6 +276,13 @@ private synchronized void addConnector(String catalogName, String connectorId, C\n         }\n     }\n \n+    private enum ConnectorType\n+    {\n+        STANDARD,\n+        INFORMATION_SCHEMA,\n+        SYSTEM\n+    }\n+\n     private static String makeInformationSchemaConnectorId(String connectorId)\n     {\n         return INFORMATION_SCHEMA_CONNECTOR_PREFIX + connectorId;",
      "parent_sha": "4f47ea7af68c2b657d9a39120a532da6972f5b2b"
    }
  },
  {
    "oid": "ef75ca377f214a8d3000efd6e0aa3329877c5e2c",
    "message": "Change memory revoking finish to continuations",
    "date": "2017-09-28T10:36:29Z",
    "url": "https://github.com/prestodb/presto/commit/ef75ca377f214a8d3000efd6e0aa3329877c5e2c",
    "details": {
      "sha": "a85fea98762494ead8b4a3e36f2ee31a11d4b6e8",
      "filename": "presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java",
      "status": "modified",
      "additions": 45,
      "deletions": 36,
      "changes": 81,
      "blob_url": "https://github.com/prestodb/presto/blob/ef75ca377f214a8d3000efd6e0aa3329877c5e2c/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FHashBuilderOperator.java",
      "raw_url": "https://github.com/prestodb/presto/raw/ef75ca377f214a8d3000efd6e0aa3329877c5e2c/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FHashBuilderOperator.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FHashBuilderOperator.java?ref=ef75ca377f214a8d3000efd6e0aa3329877c5e2c",
      "patch": "@@ -234,6 +234,8 @@ public enum State\n     private LookupSourceSupplier lookupSourceSupplier;\n     private OptionalLong lookupSourceChecksum = OptionalLong.empty();\n \n+    private Optional<Runnable> finishMemoryRevoke = Optional.empty();\n+\n     public HashBuilderOperator(\n             OperatorContext operatorContext,\n             PartitionedLookupSourceFactory lookupSourceFactory,\n@@ -376,51 +378,53 @@ public ListenableFuture<?> startMemoryRevoke()\n     {\n         checkState(spillEnabled, \"Spill not enabled, no revokable memory should be reserved\");\n \n-        if (state == State.CONSUMING_INPUT || state == State.LOOKUP_SOURCE_BUILT) {\n-            checkState(!spiller.isPresent(), \"Spiller already created\");\n-            spiller = Optional.of(singleStreamSpillerFactory.create(\n-                    index.getTypes(),\n-                    operatorContext.getSpillContext().newLocalSpillContext(),\n-                    operatorContext.getSystemMemoryContext().newLocalMemoryContext()));\n-            return getSpiller().spill(index.getPages());\n+        if (state == State.CONSUMING_INPUT) {\n+            finishMemoryRevoke = Optional.of(() -> {\n+                index.clear();\n+                operatorContext.setMemoryReservation(index.getEstimatedSize().toBytes());\n+                operatorContext.setRevocableMemoryReservation(0L);\n+                state = State.SPILLING_INPUT;\n+            });\n+            return spillIndex();\n         }\n-\n-        // Otherwise this is stale revoking request\n-        long reservedRevocableBytes = operatorContext.getReservedRevocableBytes();\n-        if (reservedRevocableBytes == 0) {\n+        else if (state == State.LOOKUP_SOURCE_BUILT) {\n+            finishMemoryRevoke = Optional.of(() -> {\n+                lookupSourceFactory.setPartitionSpilledLookupSourceHandle(partitionIndex, spilledLookupSourceHandle);\n+                lookupSourceNotNeeded = Optional.empty();\n+                index.clear();\n+                operatorContext.setMemoryReservation(index.getEstimatedSize().toBytes());\n+                operatorContext.setRevocableMemoryReservation(0L);\n+                lookupSourceChecksum = OptionalLong.of(lookupSourceSupplier.checksum());\n+                lookupSourceSupplier = null;\n+                state = State.INPUT_SPILLED;\n+            });\n+            return spillIndex();\n+        }\n+        else if (operatorContext.getReservedRevocableBytes() == 0) {\n+            // Probably stale revoking request\n+            finishMemoryRevoke = Optional.of(() -> {});\n             return immediateFuture(null);\n         }\n+\n         throw new IllegalStateException(format(\"State %s can not have revocable memory, but has %s revocable bytes\", state, operatorContext.getReservedRevocableBytes()));\n     }\n \n+    private ListenableFuture<?> spillIndex()\n+    {\n+        checkState(!spiller.isPresent(), \"Spiller already created\");\n+        spiller = Optional.of(singleStreamSpillerFactory.create(\n+                index.getTypes(),\n+                operatorContext.getSpillContext().newLocalSpillContext(),\n+                operatorContext.getSystemMemoryContext().newLocalMemoryContext()));\n+        return getSpiller().spill(index.getPages());\n+    }\n+\n     @Override\n     public void finishMemoryRevoke()\n     {\n-        if (state == State.CONSUMING_INPUT) {\n-            index.clear();\n-            operatorContext.setMemoryReservation(index.getEstimatedSize().toBytes());\n-            operatorContext.setRevocableMemoryReservation(0L);\n-            state = State.SPILLING_INPUT;\n-            return;\n-        }\n-\n-        if (state == State.LOOKUP_SOURCE_BUILT) {\n-            lookupSourceFactory.setPartitionSpilledLookupSourceHandle(partitionIndex, spilledLookupSourceHandle);\n-            lookupSourceNotNeeded = Optional.empty();\n-            index.clear();\n-            operatorContext.setMemoryReservation(index.getEstimatedSize().toBytes());\n-            operatorContext.setRevocableMemoryReservation(0L);\n-            lookupSourceChecksum = OptionalLong.of(lookupSourceSupplier.checksum());\n-            lookupSourceSupplier = null;\n-            state = State.INPUT_SPILLED;\n-            return;\n-        }\n-\n-        long reservedRevocableBytes = operatorContext.getReservedRevocableBytes();\n-        if (reservedRevocableBytes == 0) {\n-            return;\n-        }\n-        throw new IllegalStateException(format(\"State %s can not have revocable memory, but has %s revocable bytes\", state, operatorContext.getReservedRevocableBytes()));\n+        checkState(finishMemoryRevoke.isPresent(), \"Cannot finish unknown revoking\");\n+        finishMemoryRevoke.get().run();\n+        finishMemoryRevoke = Optional.empty();\n     }\n \n     @Override\n@@ -437,6 +441,10 @@ public void finish()\n             return;\n         }\n \n+        if (finishMemoryRevoke.isPresent()) {\n+            return;\n+        }\n+\n         switch (state) {\n             case CONSUMING_INPUT:\n                 finishInput();\n@@ -619,6 +627,7 @@ public void close()\n \n         lookupSourceSupplier = null;\n         state = State.DISPOSED;\n+        finishMemoryRevoke = finishMemoryRevoke.map(ifPresent -> () -> {});\n \n         try (Closer closer = Closer.create()) {\n             closer.register(index::clear);",
      "parent_sha": "8b98dcf281071e4d0491e674cbf29721b949737a"
    }
  },
  {
    "oid": "7fb29f59c5930a82878f076e607eb62748f959cc",
    "message": "Remove Symbol from TestSimpleFilterProjectSemiJoinStatsRule",
    "date": "2019-07-31T01:28:07Z",
    "url": "https://github.com/prestodb/presto/commit/7fb29f59c5930a82878f076e607eb62748f959cc",
    "details": {
      "sha": "05a90726b8b740f3ec7f6cc44272a1ac14cafe22",
      "filename": "presto-main/src/test/java/com/facebook/presto/cost/TestSimpleFilterProjectSemiJoinStatsRule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/prestodb/presto/blob/7fb29f59c5930a82878f076e607eb62748f959cc/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcost%2FTestSimpleFilterProjectSemiJoinStatsRule.java",
      "raw_url": "https://github.com/prestodb/presto/raw/7fb29f59c5930a82878f076e607eb62748f959cc/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcost%2FTestSimpleFilterProjectSemiJoinStatsRule.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcost%2FTestSimpleFilterProjectSemiJoinStatsRule.java?ref=7fb29f59c5930a82878f076e607eb62748f959cc",
      "patch": "@@ -18,8 +18,8 @@\n import com.facebook.presto.spi.plan.PlanNodeId;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n import com.facebook.presto.sql.TestingRowExpressionTranslator;\n-import com.facebook.presto.sql.planner.Symbol;\n import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.SymbolReference;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n@@ -88,7 +88,7 @@ public Object[][] toRowExpressionProvider()\n     @Test(dataProvider = \"toRowExpression\")\n     public void testFilterPositiveSemiJoin(boolean toRowExpression)\n     {\n-        getStatsCalculatorAssertion(new Symbol(\"sjo\").toSymbolReference(), toRowExpression)\n+        getStatsCalculatorAssertion(new SymbolReference(\"sjo\"), toRowExpression)\n                 .withSourceStats(LEFT_SOURCE_ID, PlanNodeStatsEstimate.builder()\n                         .setOutputRowCount(1000)\n                         .addVariableStatistics(new VariableReferenceExpression(\"a\", BIGINT), aStats)",
      "parent_sha": "de21d2cefc801b19309969221308b2a929292fda"
    }
  },
  {
    "oid": "f61df1b6b5e12f8c722f64b7dd93e868f58be5fe",
    "message": "Fix int overflow error when spilling large page\n\nPage serialization requires page size to fin in an integer, so larger\npages could hit an int overflow error.",
    "date": "2020-11-06T16:38:13Z",
    "url": "https://github.com/prestodb/presto/commit/f61df1b6b5e12f8c722f64b7dd93e868f58be5fe",
    "details": {
      "sha": "ae57aa589d6a44ca0ef113fac5874995110c3666",
      "filename": "presto-main/src/main/java/com/facebook/presto/spiller/FileSingleStreamSpiller.java",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/prestodb/presto/blob/f61df1b6b5e12f8c722f64b7dd93e868f58be5fe/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspiller%2FFileSingleStreamSpiller.java",
      "raw_url": "https://github.com/prestodb/presto/raw/f61df1b6b5e12f8c722f64b7dd93e868f58be5fe/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspiller%2FFileSingleStreamSpiller.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fspiller%2FFileSingleStreamSpiller.java?ref=f61df1b6b5e12f8c722f64b7dd93e868f58be5fe",
      "patch": "@@ -19,7 +19,6 @@\n import com.facebook.presto.spi.PrestoException;\n import com.facebook.presto.spi.page.PagesSerde;\n import com.facebook.presto.spi.page.PagesSerdeUtil;\n-import com.facebook.presto.spi.page.SerializedPage;\n import com.facebook.presto.spi.spiller.SpillCipher;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.AbstractIterator;\n@@ -44,6 +43,8 @@\n import java.util.List;\n import java.util.Optional;\n \n+import static com.facebook.presto.common.block.PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES;\n+import static com.facebook.presto.execution.buffer.PageSplitterUtil.splitPage;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.page.PagesSerdeUtil.writeSerializedPage;\n import static com.facebook.presto.spiller.FileSingleStreamSpillerFactory.SPILL_FILE_PREFIX;\n@@ -144,11 +145,15 @@ private void writePages(Iterator<Page> pageIterator)\n             while (pageIterator.hasNext()) {\n                 Page page = pageIterator.next();\n                 spilledPagesInMemorySize += page.getSizeInBytes();\n-                SerializedPage serializedPage = serde.serialize(page);\n-                long pageSize = serializedPage.getSizeInBytes();\n-                localSpillContext.updateBytes(pageSize);\n-                spillerStats.addToTotalSpilledBytes(pageSize);\n-                writeSerializedPage(output, serializedPage);\n+                // page serialization requires  page.getSizeInBytes() + Integer.BYTES to fit in an integer\n+                splitPage(page, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()\n+                        .map(serde::serialize)\n+                        .forEach(serializedPage -> {\n+                            long pageSize = serializedPage.getSizeInBytes();\n+                            localSpillContext.updateBytes(pageSize);\n+                            spillerStats.addToTotalSpilledBytes(pageSize);\n+                            writeSerializedPage(output, serializedPage);\n+                        });\n             }\n         }\n         catch (UncheckedIOException | IOException e) {",
      "parent_sha": "c7c416339741df5ae0a3f3750b25b7ab0642d6c2"
    }
  },
  {
    "oid": "48d7496979b6c6f3a3b771b539588f67a227a931",
    "message": "Make constrcutor package protected",
    "date": "2024-05-01T18:45:05Z",
    "url": "https://github.com/prestodb/presto/commit/48d7496979b6c6f3a3b771b539588f67a227a931",
    "details": {
      "sha": "9d1de7a65eef953333b7f7c06c814c993f153cbd",
      "filename": "presto-main/src/main/java/com/facebook/presto/server/protocol/RowIterable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/prestodb/presto/blob/48d7496979b6c6f3a3b771b539588f67a227a931/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2Fprotocol%2FRowIterable.java",
      "raw_url": "https://github.com/prestodb/presto/raw/48d7496979b6c6f3a3b771b539588f67a227a931/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2Fprotocol%2FRowIterable.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2Fprotocol%2FRowIterable.java?ref=48d7496979b6c6f3a3b771b539588f67a227a931",
      "patch": "@@ -34,7 +34,7 @@ class RowIterable\n     private final List<Type> types;\n     private final Page page;\n \n-    public RowIterable(ConnectorSession session, List<Type> types, Page page)\n+    RowIterable(ConnectorSession session, List<Type> types, Page page)\n     {\n         this.session = session;\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));",
      "parent_sha": "0edb84cc8e2f825e257c558143edca1e154f8a72"
    }
  },
  {
    "oid": "6ae1d82228b5bd1f5605a324a858eb7e2b69326c",
    "message": "Construct SqlTimeWithTimeZone from OffsetTime in tests",
    "date": "2018-07-20T20:56:48Z",
    "url": "https://github.com/prestodb/presto/commit/6ae1d82228b5bd1f5605a324a858eb7e2b69326c",
    "details": {
      "sha": "a0853674b696f7d63e2156f2804bb7b8bb0695ce",
      "filename": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java",
      "status": "modified",
      "additions": 45,
      "deletions": 16,
      "changes": 61,
      "blob_url": "https://github.com/prestodb/presto/blob/6ae1d82228b5bd1f5605a324a858eb7e2b69326c/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Fscalar%2FTestDateTimeFunctionsBase.java",
      "raw_url": "https://github.com/prestodb/presto/raw/6ae1d82228b5bd1f5605a324a858eb7e2b69326c/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Fscalar%2FTestDateTimeFunctionsBase.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Fscalar%2FTestDateTimeFunctionsBase.java?ref=6ae1d82228b5bd1f5605a324a858eb7e2b69326c",
      "patch": "@@ -41,7 +41,9 @@\n import java.time.Instant;\n import java.time.LocalDate;\n import java.time.LocalTime;\n+import java.time.OffsetTime;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n import java.util.Locale;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n@@ -89,16 +91,16 @@ public abstract class TestDateTimeFunctionsBase\n     protected static final DateTimeZone DATE_TIME_ZONE_NUMERICAL = getDateTimeZone(getTimeZoneKey(\"+04:30\"));\n     protected static final TimeZoneKey KATHMANDU_ZONE_KEY = getTimeZoneKey(\"Asia/Kathmandu\");\n     protected static final DateTimeZone KATHMANDU_ZONE = getDateTimeZone(KATHMANDU_ZONE_KEY);\n-    protected static final TimeZoneKey WEIRD_ZONE_KEY = getTimeZoneKey(\"+07:09\");\n-    protected static final DateTimeZone WEIRD_ZONE = getDateTimeZone(WEIRD_ZONE_KEY);\n+    protected static final ZoneOffset WEIRD_ZONE = ZoneOffset.ofHoursMinutes(7, 9);\n+    protected static final DateTimeZone WEIRD_DATE_TIME_ZONE = DateTimeZone.forID(WEIRD_ZONE.getId());\n \n     protected static final DateTime DATE = new DateTime(2001, 8, 22, 0, 0, 0, 0, DateTimeZone.UTC);\n     protected static final String DATE_LITERAL = \"DATE '2001-08-22'\";\n     protected static final String DATE_ISO8601_STRING = \"2001-08-22\";\n \n     protected static final LocalTime TIME = LocalTime.of(3, 4, 5, 321_000_000);\n     protected static final String TIME_LITERAL = \"TIME '03:04:05.321'\";\n-    protected static final DateTime WEIRD_TIME = new DateTime(1970, 1, 1, 3, 4, 5, 321, WEIRD_ZONE);\n+    protected static final OffsetTime WEIRD_TIME = OffsetTime.of(3, 4, 5, 321_000_000, WEIRD_ZONE);\n     protected static final String WEIRD_TIME_LITERAL = \"TIME '03:04:05.321 +07:09'\";\n \n     protected static final DateTime NEW_TIMESTAMP = new DateTime(2001, 8, 22, 3, 4, 5, 321, UTC_TIME_ZONE); // This is TIMESTAMP w/o TZ\n@@ -107,7 +109,7 @@ public abstract class TestDateTimeFunctionsBase\n     protected static final String TIMESTAMP_LITERAL = \"TIMESTAMP '2001-08-22 03:04:05.321'\";\n     protected static final String TIMESTAMP_ISO8601_STRING = \"2001-08-22T03:04:05.321+04:30\";\n     protected static final String TIMESTAMP_ISO8601_STRING_NO_TIME_ZONE = \"2001-08-22T03:04:05.321\";\n-    protected static final DateTime WEIRD_TIMESTAMP = new DateTime(2001, 8, 22, 3, 4, 5, 321, WEIRD_ZONE);\n+    protected static final DateTime WEIRD_TIMESTAMP = new DateTime(2001, 8, 22, 3, 4, 5, 321, WEIRD_DATE_TIME_ZONE);\n     protected static final String WEIRD_TIMESTAMP_LITERAL = \"TIMESTAMP '2001-08-22 03:04:05.321 +07:09'\";\n     protected static final String WEIRD_TIMESTAMP_ISO8601_STRING = \"2001-08-22T03:04:05.321+07:09\";\n \n@@ -498,14 +500,14 @@ public void testTruncateTime()\n     @Test\n     public void testTruncateTimeWithTimeZone()\n     {\n-        DateTime result = WEIRD_TIME;\n-        result = result.withMillisOfSecond(0);\n+        OffsetTime result = WEIRD_TIME;\n+        result = result.withNano(0);\n         assertFunction(\"date_trunc('second', \" + WEIRD_TIME_LITERAL + \")\", TIME_WITH_TIME_ZONE, toTimeWithTimeZone(result));\n \n-        result = result.withSecondOfMinute(0);\n+        result = result.withSecond(0);\n         assertFunction(\"date_trunc('minute', \" + WEIRD_TIME_LITERAL + \")\", TIME_WITH_TIME_ZONE, toTimeWithTimeZone(result));\n \n-        result = result.withMinuteOfHour(0);\n+        result = result.withMinute(0);\n         assertFunction(\"date_trunc('hour', \" + WEIRD_TIME_LITERAL + \")\", TIME_WITH_TIME_ZONE, toTimeWithTimeZone(result));\n     }\n \n@@ -580,7 +582,7 @@ public void testAddFieldToTime()\n     @Test\n     public void testAddFieldToTimeWithTimeZone()\n     {\n-        assertFunction(\"date_add('millisecond', 3, \" + WEIRD_TIME_LITERAL + \")\", TIME_WITH_TIME_ZONE, toTimeWithTimeZone(WEIRD_TIME.plusMillis(3)));\n+        assertFunction(\"date_add('millisecond', 3, \" + WEIRD_TIME_LITERAL + \")\", TIME_WITH_TIME_ZONE, toTimeWithTimeZone(WEIRD_TIME.plusNanos(3_000_000)));\n         assertFunction(\"date_add('second', 3, \" + WEIRD_TIME_LITERAL + \")\", TIME_WITH_TIME_ZONE, toTimeWithTimeZone(WEIRD_TIME.plusSeconds(3)));\n         assertFunction(\"date_add('minute', 3, \" + WEIRD_TIME_LITERAL + \")\", TIME_WITH_TIME_ZONE, toTimeWithTimeZone(WEIRD_TIME.plusMinutes(3)));\n         assertFunction(\"date_add('hour', 3, \" + WEIRD_TIME_LITERAL + \")\", TIME_WITH_TIME_ZONE, toTimeWithTimeZone(WEIRD_TIME.plusHours(3)));\n@@ -602,7 +604,7 @@ public void testDateDiffTimestamp()\n         assertFunction(\"date_diff('quarter', \" + baseDateTimeLiteral + \", \" + TIMESTAMP_LITERAL + \")\", BIGINT, (long) monthsBetween(baseDateTime, TIMESTAMP).getMonths() / 3);\n         assertFunction(\"date_diff('year', \" + baseDateTimeLiteral + \", \" + TIMESTAMP_LITERAL + \")\", BIGINT, (long) yearsBetween(baseDateTime, TIMESTAMP).getYears());\n \n-        DateTime weirdBaseDateTime = new DateTime(1960, 5, 3, 7, 2, 9, 678, WEIRD_ZONE);\n+        DateTime weirdBaseDateTime = new DateTime(1960, 5, 3, 7, 2, 9, 678, WEIRD_DATE_TIME_ZONE);\n         String weirdBaseDateTimeLiteral = \"TIMESTAMP '1960-05-03 07:02:09.678 +07:09'\";\n \n         assertFunction(\"date_diff('millisecond', \" + weirdBaseDateTimeLiteral + \", \" + WEIRD_TIMESTAMP_LITERAL + \")\",\n@@ -662,13 +664,13 @@ public void testDateDiffTime()\n     @Test\n     public void testDateDiffTimeWithTimeZone()\n     {\n-        DateTime weirdBaseDateTime = new DateTime(1970, 1, 1, 7, 2, 9, 678, WEIRD_ZONE);\n+        OffsetTime weirdBaseDateTime = OffsetTime.of(7, 2, 9, 678_000_000, WEIRD_ZONE);\n         String weirdBaseDateTimeLiteral = \"TIME '07:02:09.678 +07:09'\";\n \n         assertFunction(\"date_diff('millisecond', \" + weirdBaseDateTimeLiteral + \", \" + WEIRD_TIME_LITERAL + \")\", BIGINT, millisBetween(weirdBaseDateTime, WEIRD_TIME));\n-        assertFunction(\"date_diff('second', \" + weirdBaseDateTimeLiteral + \", \" + WEIRD_TIME_LITERAL + \")\", BIGINT, (long) secondsBetween(weirdBaseDateTime, WEIRD_TIME).getSeconds());\n-        assertFunction(\"date_diff('minute', \" + weirdBaseDateTimeLiteral + \", \" + WEIRD_TIME_LITERAL + \")\", BIGINT, (long) minutesBetween(weirdBaseDateTime, WEIRD_TIME).getMinutes());\n-        assertFunction(\"date_diff('hour', \" + weirdBaseDateTimeLiteral + \", \" + WEIRD_TIME_LITERAL + \")\", BIGINT, (long) hoursBetween(weirdBaseDateTime, WEIRD_TIME).getHours());\n+        assertFunction(\"date_diff('second', \" + weirdBaseDateTimeLiteral + \", \" + WEIRD_TIME_LITERAL + \")\", BIGINT, secondsBetween(weirdBaseDateTime, WEIRD_TIME));\n+        assertFunction(\"date_diff('minute', \" + weirdBaseDateTimeLiteral + \", \" + WEIRD_TIME_LITERAL + \")\", BIGINT, minutesBetween(weirdBaseDateTime, WEIRD_TIME));\n+        assertFunction(\"date_diff('hour', \" + weirdBaseDateTimeLiteral + \", \" + WEIRD_TIME_LITERAL + \")\", BIGINT, hoursBetween(weirdBaseDateTime, WEIRD_TIME));\n     }\n \n     @Test\n@@ -1144,14 +1146,41 @@ private static long hoursBetween(LocalTime start, LocalTime end)\n         return NANOSECONDS.toHours(end.toNanoOfDay() - start.toNanoOfDay());\n     }\n \n+    private static long millisBetween(OffsetTime start, OffsetTime end)\n+    {\n+        return millisUtc(end) - millisUtc(start);\n+    }\n+\n+    private static long secondsBetween(OffsetTime start, OffsetTime end)\n+    {\n+        return MILLISECONDS.toSeconds(millisBetween(start, end));\n+    }\n+\n+    private static long minutesBetween(OffsetTime start, OffsetTime end)\n+    {\n+        return MILLISECONDS.toMinutes(millisBetween(start, end));\n+    }\n+\n+    private static long hoursBetween(OffsetTime start, OffsetTime end)\n+    {\n+        return MILLISECONDS.toHours(millisBetween(start, end));\n+    }\n+\n     private SqlTime toTime(LocalTime time)\n     {\n         return sqlTimeOf(time, session);\n     }\n \n-    private static SqlTimeWithTimeZone toTimeWithTimeZone(DateTime dateTime)\n+    private static SqlTimeWithTimeZone toTimeWithTimeZone(OffsetTime offsetTime)\n+    {\n+        return new SqlTimeWithTimeZone(\n+                millisUtc(offsetTime),\n+                TimeZoneKey.getTimeZoneKey(offsetTime.getOffset().getId()));\n+    }\n+\n+    private static long millisUtc(OffsetTime offsetTime)\n     {\n-        return new SqlTimeWithTimeZone(dateTime.getMillis(), dateTime.getZone().toTimeZone());\n+        return offsetTime.atDate(LocalDate.ofEpochDay(0)).toInstant().toEpochMilli();\n     }\n \n     private static SqlTimestampWithTimeZone toTimestampWithTimeZone(DateTime dateTime)",
      "parent_sha": "4be1a75cac21ee763c9d22ac59154e34b72f479c"
    }
  },
  {
    "oid": "5e21f594b45ac79c019c3032e3b9af72caaf7a7b",
    "message": "Add support for '\\u0001' column delimiter",
    "date": "2012-08-24T18:45:37Z",
    "url": "https://github.com/prestodb/presto/commit/5e21f594b45ac79c019c3032e3b9af72caaf7a7b",
    "details": {
      "sha": "e10feb0c44967362f81690e548f043c8d02dbc5e",
      "filename": "src/main/java/com/facebook/presto/Main.java",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/prestodb/presto/blob/5e21f594b45ac79c019c3032e3b9af72caaf7a7b/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2FMain.java",
      "raw_url": "https://github.com/prestodb/presto/raw/5e21f594b45ac79c019c3032e3b9af72caaf7a7b/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2FMain.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2FMain.java?ref=5e21f594b45ac79c019c3032e3b9af72caaf7a7b",
      "patch": "@@ -66,8 +66,8 @@ public void run()\n     @Command(name = \"csv\", description = \"Convert CSB to columns\")\n     public static class ConvertCsv extends BaseCommand\n     {\n-        @Option(name = {\"--column-separator\"}, description = \"Column separator\")\n-        public char columnSeparator = ',';\n+        @Option(name = {\"-d\", \"--column-delimiter\"}, description = \"Column delimiter character\")\n+        public String columnSeparator = \",\";\n \n         @Option(name = {\"-o\", \"--output-dir\"}, description = \"Output dir\")\n         public String outputDir = \"data\";\n@@ -115,7 +115,20 @@ public InputStreamReader getInput()\n                     }\n                 };\n             }\n-            Csv.processCsv(inputSupplier, columnSeparator, processors.build());\n+            Csv.processCsv(inputSupplier, toChar(columnSeparator), processors.build());\n+        }\n+\n+        private char toChar(String string)\n+        {\n+            Preconditions.checkArgument(!string.isEmpty(), \"String is empty\");\n+            if (string.length() == 1) {\n+                return string.charAt(0);\n+            }\n+            if (string.length() == 6 && string.startsWith(\"\\\\u\")) {\n+                int value = Integer.parseInt(string.substring(2), 16);\n+                return (char) value;\n+            }\n+            throw new IllegalArgumentException(String.format(\"Can not convert '%s' to a char\", string));\n         }\n \n         private OutputSupplier<FileOutputStream> newCreateDirectoryOutputStreamSupplier(final File file)",
      "parent_sha": "200fbaed2bb6af4d661a24f9943e56512350fbff"
    }
  },
  {
    "oid": "c1e3a48271daf5bcab9e8da5f0967a4442b7560c",
    "message": "Fix overflow bug in status printer",
    "date": "2013-04-04T04:01:22Z",
    "url": "https://github.com/prestodb/presto/commit/c1e3a48271daf5bcab9e8da5f0967a4442b7560c",
    "details": {
      "sha": "bfd93824ca52755407e0192f43bfbb4ae1eadfb2",
      "filename": "presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/prestodb/presto/blob/c1e3a48271daf5bcab9e8da5f0967a4442b7560c/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcli%2FStatusPrinter.java",
      "raw_url": "https://github.com/prestodb/presto/raw/c1e3a48271daf5bcab9e8da5f0967a4442b7560c/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcli%2FStatusPrinter.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcli%2FStatusPrinter.java?ref=c1e3a48271daf5bcab9e8da5f0967a4442b7560c",
      "patch": "@@ -140,11 +140,10 @@ public void printFinalInfo()\n             double parallelism = cpuTime.toMillis() / wallTime.toMillis();\n \n             // Per Node: 3.5 parallelism, 83.3K rows/s, 0.7 MB/s\n-            DataSize bytesPerNode = bytes(stats.getProcessedBytes() / nodes);\n             String perNodeSummary = String.format(\"Per Node: %.1f parallelism, %5s rows/s, %8s\",\n                     parallelism / nodes,\n-                    formatCountRate((int) (stats.getProcessedRows() / nodes), wallTime, false),\n-                    formatDataRate(bytesPerNode, wallTime, true));\n+                    formatCountRate((double) stats.getProcessedRows() / nodes, wallTime, false),\n+                    formatDataRate(bytes(stats.getProcessedBytes() / nodes), wallTime, true));\n             reprintLine(perNodeSummary);\n \n             out.println(String.format(\"Parallelism: %.1f\", parallelism));\n@@ -230,11 +229,10 @@ private void printQueryInfo(QueryResults results)\n                 double parallelism = cpuTime.toMillis() / wallTime.toMillis();\n \n                 // Per Node: 3.5 parallelism, 83.3K rows/s, 0.7 MB/s\n-                DataSize bytesPerNode = new DataSize((int) (stats.getProcessedBytes() / nodes), BYTE);\n                 String perNodeSummary = String.format(\"Per Node: %.1f parallelism, %5s rows/s, %8s\",\n                         parallelism / nodes,\n-                        formatCountRate((int) (stats.getProcessedRows() / nodes), wallTime, false),\n-                        formatDataRate(bytesPerNode, wallTime, true));\n+                        formatCountRate((double) stats.getProcessedRows() / nodes, wallTime, false),\n+                        formatDataRate(bytes(stats.getProcessedBytes() / nodes), wallTime, true));\n                 reprintLine(perNodeSummary);\n \n                 reprintLine(String.format(\"Parallelism: %.1f\", parallelism));",
      "parent_sha": "a77d673e94617da986b7dfb5daa9a8873f5c2ac2"
    }
  },
  {
    "oid": "592f41f5f639278105f12ff8e429151e4e0f899d",
    "message": "Filter AddLocalExchanges when testing subqueries logical plan\n\nAddLocalExcanges is using PropertyDerivation classes which do not\nsupport subquery related plan nodes like ApplyNode.",
    "date": "2017-06-07T05:32:58Z",
    "url": "https://github.com/prestodb/presto/commit/592f41f5f639278105f12ff8e429151e4e0f899d",
    "details": {
      "sha": "48f3d2f5cd39c70dce7413fdf564306f0cb24b1d",
      "filename": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestLogicalPlanner.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/prestodb/presto/blob/592f41f5f639278105f12ff8e429151e4e0f899d/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FTestLogicalPlanner.java",
      "raw_url": "https://github.com/prestodb/presto/raw/592f41f5f639278105f12ff8e429151e4e0f899d/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FTestLogicalPlanner.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FTestLogicalPlanner.java?ref=592f41f5f639278105f12ff8e429151e4e0f899d",
      "patch": "@@ -15,6 +15,7 @@\n \n import com.facebook.presto.spi.predicate.Domain;\n import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.facebook.presto.sql.planner.optimizations.AddLocalExchanges;\n import com.facebook.presto.sql.planner.plan.AggregationNode;\n import com.facebook.presto.sql.planner.plan.ApplyNode;\n import com.facebook.presto.sql.planner.plan.DistinctLimitNode;\n@@ -267,7 +268,7 @@ private void assertPlanContainsNoApplyOrAnyJoin(String sql)\n     @Test\n     public void testCorrelatedSubqueries()\n     {\n-        assertPlan(\n+        assertPlanWithOptimizerFiltering(\n                 \"SELECT orderkey FROM orders WHERE 3 = (SELECT orderkey)\",\n                 LogicalPlanner.Stage.OPTIMIZED,\n                 anyTree(\n@@ -278,7 +279,8 @@ public void testCorrelatedSubqueries()\n                                         node(EnforceSingleRowNode.class,\n                                                 project(\n                                                         node(ValuesNode.class)\n-                                                ))))));\n+                                                ))))),\n+                planOptimizer -> !(planOptimizer instanceof AddLocalExchanges));\n     }\n \n     /**\n@@ -327,7 +329,7 @@ public void testSymbolsPrunedInCorrelatedInPredicateSource()\n     @Test\n     public void testDoubleNestedCorrelatedSubqueries()\n     {\n-        assertPlan(\n+        assertPlanWithOptimizerFiltering(\n                 \"SELECT orderkey FROM orders o \" +\n                         \"WHERE 3 IN (SELECT o.custkey FROM lineitem l WHERE (SELECT l.orderkey = o.orderkey))\",\n                 LogicalPlanner.Stage.OPTIMIZED,\n@@ -346,7 +348,8 @@ public void testDoubleNestedCorrelatedSubqueries()\n                                                         node(EnforceSingleRowNode.class,\n                                                                 project(\n                                                                         node(ValuesNode.class)\n-                                                                ))))))));\n+                                                                ))))))),\n+                planOptimizer -> !(planOptimizer instanceof AddLocalExchanges));\n     }\n \n     @Test",
      "parent_sha": "baa78784afad67c2321be64af1d35b4ddf2c75ef"
    }
  },
  {
    "oid": "3d7bf899e1eec0cd69d9336db6c17128eaa2d0a8",
    "message": "Fix HiveClientConfig to use bean validation NotNull",
    "date": "2018-10-27T21:58:18Z",
    "url": "https://github.com/prestodb/presto/commit/3d7bf899e1eec0cd69d9336db6c17128eaa2d0a8",
    "details": {
      "sha": "24b4ae9672a8666b928aad8fc0e93cf42e5c2906",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/prestodb/presto/blob/3d7bf899e1eec0cd69d9336db6c17128eaa2d0a8/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveClientConfig.java",
      "raw_url": "https://github.com/prestodb/presto/raw/3d7bf899e1eec0cd69d9336db6c17128eaa2d0a8/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveClientConfig.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveClientConfig.java?ref=3d7bf899e1eec0cd69d9336db6c17128eaa2d0a8",
      "patch": "@@ -29,7 +29,6 @@\n import io.airlift.units.MinDuration;\n import org.joda.time.DateTimeZone;\n \n-import javax.annotation.Nonnull;\n import javax.validation.constraints.DecimalMax;\n import javax.validation.constraints.DecimalMin;\n import javax.validation.constraints.Max;\n@@ -464,7 +463,7 @@ public HiveClientConfig setMaxPartitionBatchSize(int maxPartitionBatchSize)\n         return this;\n     }\n \n-    @Nonnull\n+    @NotNull\n     public List<String> getResourceConfigFiles()\n     {\n         return resourceConfigFiles;",
      "parent_sha": "53bc1e3e8b887353ba2bc42265a7a193bef9f720"
    }
  },
  {
    "oid": "f2f24cf104d1e9c2c0fc12166888a5af35feb3f5",
    "message": "Update Console::getHistory() to take the historyFile as input\n\nThis will make this method easier to test.",
    "date": "2018-03-07T01:10:15Z",
    "url": "https://github.com/prestodb/presto/commit/f2f24cf104d1e9c2c0fc12166888a5af35feb3f5",
    "details": {
      "sha": "150fd1d6fd7f2c21e891b4d3d84873c6909a5c6d",
      "filename": "presto-cli/src/main/java/com/facebook/presto/cli/Console.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/prestodb/presto/blob/f2f24cf104d1e9c2c0fc12166888a5af35feb3f5/presto-cli%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcli%2FConsole.java",
      "raw_url": "https://github.com/prestodb/presto/raw/f2f24cf104d1e9c2c0fc12166888a5af35feb3f5/presto-cli%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcli%2FConsole.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-cli%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fcli%2FConsole.java?ref=f2f24cf104d1e9c2c0fc12166888a5af35feb3f5",
      "patch": "@@ -360,9 +360,13 @@ private static boolean process(QueryRunner queryRunner, String sql, OutputFormat\n     }\n \n     private static MemoryHistory getHistory()\n+    {\n+        return getHistory(new File(getUserHome(), \".presto_history\"));\n+    }\n+\n+    private static MemoryHistory getHistory(File historyFile)\n     {\n         MemoryHistory history;\n-        File historyFile = new File(getUserHome(), \".presto_history\");\n         try {\n             history = new FileHistory(historyFile);\n             history.setMaxSize(10000);",
      "parent_sha": "a30f5633a4335f88fe5cfdf4f2f6eacd69901aa2"
    }
  },
  {
    "oid": "b547beb79f483201155e12642c4dd093a7ba2a68",
    "message": "Fix hash_code operator for real type\n\nMake the hash_code operator consistent with the hash method defined\nin real type.",
    "date": "2018-07-11T21:54:15Z",
    "url": "https://github.com/prestodb/presto/commit/b547beb79f483201155e12642c4dd093a7ba2a68",
    "details": {
      "sha": "dc0544580170108c9647edf0bde41c72a7f2b6f3",
      "filename": "presto-main/src/main/java/com/facebook/presto/type/RealOperators.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/prestodb/presto/blob/b547beb79f483201155e12642c4dd093a7ba2a68/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftype%2FRealOperators.java",
      "raw_url": "https://github.com/prestodb/presto/raw/b547beb79f483201155e12642c4dd093a7ba2a68/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftype%2FRealOperators.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftype%2FRealOperators.java?ref=b547beb79f483201155e12642c4dd093a7ba2a68",
      "patch": "@@ -165,7 +165,7 @@ public static boolean between(@SqlType(StandardTypes.REAL) long value, @SqlType(\n     @SqlType(StandardTypes.BIGINT)\n     public static long hashCode(@SqlType(StandardTypes.REAL) long value)\n     {\n-        return AbstractIntType.hash((int) value);\n+        return AbstractIntType.hash(floatToIntBits(intBitsToFloat((int) value)));\n     }\n \n     @ScalarOperator(XX_HASH_64)",
      "parent_sha": "d785f49a40c4477be372f364e3040f9356f131ff"
    }
  },
  {
    "oid": "4a96e0035c58a164ab8e35ae44a299bb43e4c723",
    "message": "Add support for AssignUniqueId partitioning in PropertyDerivations",
    "date": "2018-05-31T08:55:12Z",
    "url": "https://github.com/prestodb/presto/commit/4a96e0035c58a164ab8e35ae44a299bb43e4c723",
    "details": {
      "sha": "8e4b037d806a7e608b54e21c520822da03aae688",
      "filename": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PropertyDerivations.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/prestodb/presto/blob/4a96e0035c58a164ab8e35ae44a299bb43e4c723/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FPropertyDerivations.java",
      "raw_url": "https://github.com/prestodb/presto/raw/4a96e0035c58a164ab8e35ae44a299bb43e4c723/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FPropertyDerivations.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FPropertyDerivations.java?ref=4a96e0035c58a164ab8e35ae44a299bb43e4c723",
      "patch": "@@ -85,6 +85,7 @@\n import static com.facebook.presto.SystemSessionProperties.planWithTableNodePartitioning;\n import static com.facebook.presto.spi.predicate.TupleDomain.extractFixedValues;\n import static com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes;\n+import static com.facebook.presto.sql.planner.SystemPartitioningHandle.ARBITRARY_DISTRIBUTION;\n import static com.facebook.presto.sql.planner.optimizations.ActualProperties.Global.arbitraryPartition;\n import static com.facebook.presto.sql.planner.optimizations.ActualProperties.Global.coordinatorSingleStreamPartition;\n import static com.facebook.presto.sql.planner.optimizations.ActualProperties.Global.partitionedOn;\n@@ -181,7 +182,15 @@ public ActualProperties visitEnforceSingleRow(EnforceSingleRowNode node, List<Ac\n         @Override\n         public ActualProperties visitAssignUniqueId(AssignUniqueId node, List<ActualProperties> inputProperties)\n         {\n-            return Iterables.getOnlyElement(inputProperties);\n+            ActualProperties properties = Iterables.getOnlyElement(inputProperties);\n+            if (properties.getNodePartitioning().isPresent()) {\n+                // preserve input (possibly preferred) partitioning\n+                return properties;\n+            }\n+\n+            return ActualProperties.builderFrom(properties)\n+                    .global(partitionedOn(ARBITRARY_DISTRIBUTION, ImmutableList.of(node.getIdColumn()), Optional.empty()))\n+                    .build();\n         }\n \n         @Override",
      "parent_sha": "9626ee154830fbcca3da40c8278b72c8a7899283"
    }
  },
  {
    "oid": "fb042c597610c1d2f1377ecab2347a912d28d0f8",
    "message": "Log compaction before we commit the transaction",
    "date": "2016-03-14T20:35:28Z",
    "url": "https://github.com/prestodb/presto/commit/fb042c597610c1d2f1377ecab2347a912d28d0f8",
    "details": {
      "sha": "30b8935674e09b43a6cacf7f05a28e93bfc10e02",
      "filename": "presto-raptor/src/main/java/com/facebook/presto/raptor/storage/ShardCompactionManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/prestodb/presto/blob/fb042c597610c1d2f1377ecab2347a912d28d0f8/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fstorage%2FShardCompactionManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/fb042c597610c1d2f1377ecab2347a912d28d0f8/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fstorage%2FShardCompactionManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fstorage%2FShardCompactionManager.java?ref=fb042c597610c1d2f1377ecab2347a912d28d0f8",
      "patch": "@@ -414,8 +414,8 @@ private void compactShards(long transactionId, OptionalInt bucketNumber, long ta\n         {\n             TableMetadata metadata = getTableMetadata(tableId);\n             List<ShardInfo> newShards = performCompaction(transactionId, bucketNumber, shardUuids, metadata);\n-            shardManager.replaceShardUuids(transactionId, tableId, metadata.getColumns(), shardUuids, newShards);\n             log.info(\"Compacted shards %s into %s\", shardUuids, newShards.stream().map(ShardInfo::getShardUuid).collect(toList()));\n+            shardManager.replaceShardUuids(transactionId, tableId, metadata.getColumns(), shardUuids, newShards);\n         }\n \n         private List<ShardInfo> performCompaction(long transactionId, OptionalInt bucketNumber, Set<UUID> shardUuids, TableMetadata tableMetadata)",
      "parent_sha": "76a7a576326ce7d70b3f0981f0c25e80bc636a28"
    }
  },
  {
    "oid": "fccadd74be0f7a80f64d04f051fca61e1fda08a6",
    "message": "Use unmodifiableSet in Analysis#getColumnReferences\n\nPreviously a copy of set was made that used\nequality instead of identity for comparisons.",
    "date": "2017-04-05T16:34:03Z",
    "url": "https://github.com/prestodb/presto/commit/fccadd74be0f7a80f64d04f051fca61e1fda08a6",
    "details": {
      "sha": "0a1caf059b76ee21fb6a579ac60a5ffa487b39e6",
      "filename": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/prestodb/presto/blob/fccadd74be0f7a80f64d04f051fca61e1fda08a6/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FAnalysis.java",
      "raw_url": "https://github.com/prestodb/presto/raw/fccadd74be0f7a80f64d04f051fca61e1fda08a6/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FAnalysis.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fanalyzer%2FAnalysis.java?ref=fccadd74be0f7a80f64d04f051fca61e1fda08a6",
      "patch": "@@ -39,7 +39,6 @@\n import com.google.common.collect.ArrayListMultimap;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ListMultimap;\n \n import javax.annotation.concurrent.Immutable;\n@@ -54,6 +53,7 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Collections.newSetFromMap;\n+import static java.util.Collections.unmodifiableSet;\n import static java.util.Objects.requireNonNull;\n \n public class Analysis\n@@ -398,7 +398,7 @@ public void addFunctionSignatures(IdentityLinkedHashMap<FunctionCall, Signature>\n \n     public Set<Expression> getColumnReferences()\n     {\n-        return ImmutableSet.copyOf(columnReferences);\n+        return unmodifiableSet(columnReferences);\n     }\n \n     public void addTypes(IdentityLinkedHashMap<Expression, Type> types)",
      "parent_sha": "db2d687b25f6024e9a11ecb5472f7bcb671471bd"
    }
  },
  {
    "oid": "d09e8c0edcdb7c8c9fae3b79f60a39f74293a907",
    "message": "Inline DecimalStreamReader.readStreamsData",
    "date": "2017-03-16T17:59:50Z",
    "url": "https://github.com/prestodb/presto/commit/d09e8c0edcdb7c8c9fae3b79f60a39f74293a907",
    "details": {
      "sha": "59c71ca19ec44c0e7e528b2c83e6a6d8a07680b4",
      "filename": "presto-orc/src/main/java/com/facebook/presto/orc/reader/DecimalStreamReader.java",
      "status": "modified",
      "additions": 43,
      "deletions": 49,
      "changes": 92,
      "blob_url": "https://github.com/prestodb/presto/blob/d09e8c0edcdb7c8c9fae3b79f60a39f74293a907/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2Freader%2FDecimalStreamReader.java",
      "raw_url": "https://github.com/prestodb/presto/raw/d09e8c0edcdb7c8c9fae3b79f60a39f74293a907/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2Freader%2FDecimalStreamReader.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-orc%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Forc%2Freader%2FDecimalStreamReader.java?ref=d09e8c0edcdb7c8c9fae3b79f60a39f74293a907",
      "patch": "@@ -95,7 +95,49 @@ public Block readBlock(Type type)\n         allocateVectors();\n \n         BlockBuilder builder = decimalType.createBlockBuilder(new BlockBuilderStatus(), nextBatchSize);\n-        readStreamsData(decimalType, builder);\n+        if (presentStream == null) {\n+            if (decimalStream == null) {\n+                throw new OrcCorruptionException(\"Value is not null but decimal stream is not present\");\n+            }\n+            if (scaleStream == null) {\n+                throw new OrcCorruptionException(\"Value is not null but scale stream is not present\");\n+            }\n+\n+            Arrays.fill(nullVector, false);\n+            scaleStream.nextLongVector(nextBatchSize, scaleVector);\n+\n+            if (decimalType.isShort()) {\n+                decimalStream.nextShortDecimalVector(nextBatchSize, builder, decimalType, scaleVector);\n+            }\n+            else {\n+                decimalStream.nextLongDecimalVector(nextBatchSize, builder, decimalType, scaleVector);\n+            }\n+        }\n+        else {\n+            int nullValues = presentStream.getUnsetBits(nextBatchSize, nullVector);\n+            if (nullValues != nextBatchSize) {\n+                if (decimalStream == null) {\n+                    throw new OrcCorruptionException(\"Value is not null but decimal stream is not present\");\n+                }\n+                if (scaleStream == null) {\n+                    throw new OrcCorruptionException(\"Value is not null but scale stream is not present\");\n+                }\n+\n+                scaleStream.nextLongVector(nextBatchSize, scaleVector, nullVector);\n+\n+                if (decimalType.isShort()) {\n+                    decimalStream.nextShortDecimalVector(nextBatchSize, builder, decimalType, scaleVector, nullVector);\n+                }\n+                else {\n+                    decimalStream.nextLongDecimalVector(nextBatchSize, builder, decimalType, scaleVector, nullVector);\n+                }\n+            }\n+            else {\n+                for (int i = 0; i < nextBatchSize; i++) {\n+                    builder.appendNull();\n+                }\n+            }\n+        }\n \n         readOffset = 0;\n         nextBatchSize = 0;\n@@ -143,54 +185,6 @@ private void allocateVectors()\n         }\n     }\n \n-    private void readStreamsData(DecimalType decimalType, BlockBuilder builder)\n-            throws IOException\n-    {\n-        if (presentStream == null) {\n-            if (decimalStream == null) {\n-                throw new OrcCorruptionException(\"Value is not null but decimal stream is not present\");\n-            }\n-            if (scaleStream == null) {\n-                throw new OrcCorruptionException(\"Value is not null but scale stream is not present\");\n-            }\n-\n-            Arrays.fill(nullVector, false);\n-            scaleStream.nextLongVector(nextBatchSize, scaleVector);\n-\n-            if (decimalType.isShort()) {\n-                decimalStream.nextShortDecimalVector(nextBatchSize, builder, decimalType, scaleVector);\n-            }\n-            else {\n-                decimalStream.nextLongDecimalVector(nextBatchSize, builder, decimalType, scaleVector);\n-            }\n-        }\n-        else {\n-            int nullValues = presentStream.getUnsetBits(nextBatchSize, nullVector);\n-            if (nullValues != nextBatchSize) {\n-                if (decimalStream == null) {\n-                    throw new OrcCorruptionException(\"Value is not null but decimal stream is not present\");\n-                }\n-                if (scaleStream == null) {\n-                    throw new OrcCorruptionException(\"Value is not null but scale stream is not present\");\n-                }\n-\n-                scaleStream.nextLongVector(nextBatchSize, scaleVector, nullVector);\n-\n-                if (decimalType.isShort()) {\n-                    decimalStream.nextShortDecimalVector(nextBatchSize, builder, decimalType, scaleVector, nullVector);\n-                }\n-                else {\n-                    decimalStream.nextLongDecimalVector(nextBatchSize, builder, decimalType, scaleVector, nullVector);\n-                }\n-            }\n-            else {\n-                for (int i = 0; i < nextBatchSize; i++) {\n-                    builder.appendNull();\n-                }\n-            }\n-        }\n-    }\n-\n     @Override\n     public void startStripe(StreamSources dictionaryStreamSources, List<ColumnEncoding> encoding)\n             throws IOException",
      "parent_sha": "5162fb781befc592313e7574578d3f871d2e5049"
    }
  },
  {
    "oid": "7d1e59e9b61c73ac1877db712940ff351a6fa752",
    "message": "Set thread name when removing tasks\n\nDestroying splits can be expensive and take a long time, so it is\nhelpful to know the task ID when looking at thread dumps.",
    "date": "2017-10-28T03:47:37Z",
    "url": "https://github.com/prestodb/presto/commit/7d1e59e9b61c73ac1877db712940ff351a6fa752",
    "details": {
      "sha": "a8e43b84ca5f6bb8469cb34ef4b720449fb18006",
      "filename": "presto-main/src/main/java/com/facebook/presto/execution/executor/TaskExecutor.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/prestodb/presto/blob/7d1e59e9b61c73ac1877db712940ff351a6fa752/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2Fexecutor%2FTaskExecutor.java",
      "raw_url": "https://github.com/prestodb/presto/raw/7d1e59e9b61c73ac1877db712940ff351a6fa752/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2Fexecutor%2FTaskExecutor.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2Fexecutor%2FTaskExecutor.java?ref=7d1e59e9b61c73ac1877db712940ff351a6fa752",
      "patch": "@@ -250,6 +250,16 @@ public synchronized TaskHandle addTask(TaskId taskId, DoubleSupplier utilization\n     }\n \n     public void removeTask(TaskHandle taskHandle)\n+    {\n+        try (SetThreadName ignored = new SetThreadName(\"Task-%s\", taskHandle.getTaskId())) {\n+            doRemoveTask(taskHandle);\n+        }\n+\n+        // replace blocked splits that were terminated\n+        addNewEntrants();\n+    }\n+\n+    private void doRemoveTask(TaskHandle taskHandle)\n     {\n         List<PrioritizedSplitRunner> splits;\n         synchronized (this) {\n@@ -273,9 +283,6 @@ public void removeTask(TaskHandle taskHandle)\n         completedTasksPerLevel.incrementAndGet(computeLevel(threadUsageNanos));\n \n         log.debug(\"Task finished or failed \" + taskHandle.getTaskId());\n-\n-        // replace blocked splits that were terminated\n-        addNewEntrants();\n     }\n \n     public List<ListenableFuture<?>> enqueueSplits(TaskHandle taskHandle, boolean intermediate, List<? extends SplitRunner> taskSplits)",
      "parent_sha": "3b12111f933a45003e057866ecfa5fc25a7534a4"
    }
  },
  {
    "oid": "09e03fd40966fc2244cb04e57dbfec25561abc85",
    "message": "Flushing SliceOutput after writing pages because the implementation might use a buffer.",
    "date": "2016-09-27T21:33:46Z",
    "url": "https://github.com/prestodb/presto/commit/09e03fd40966fc2244cb04e57dbfec25561abc85",
    "details": {
      "sha": "07a16817a70bb912df4f1b3fd8adf1e76fa0daa8",
      "filename": "presto-main/src/main/java/com/facebook/presto/server/PagesResponseWriter.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/prestodb/presto/blob/09e03fd40966fc2244cb04e57dbfec25561abc85/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FPagesResponseWriter.java",
      "raw_url": "https://github.com/prestodb/presto/raw/09e03fd40966fc2244cb04e57dbfec25561abc85/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FPagesResponseWriter.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FPagesResponseWriter.java?ref=09e03fd40966fc2244cb04e57dbfec25561abc85",
      "patch": "@@ -20,6 +20,7 @@\n import com.google.common.reflect.TypeToken;\n import io.airlift.slice.OutputStreamSliceOutput;\n import io.airlift.slice.RuntimeIOException;\n+import io.airlift.slice.SliceOutput;\n \n import javax.inject.Inject;\n import javax.ws.rs.Produces;\n@@ -88,7 +89,10 @@ public void writeTo(List<Page> pages,\n             throws IOException, WebApplicationException\n     {\n         try {\n-            PagesSerde.writePages(blockEncodingSerde, new OutputStreamSliceOutput(output), pages);\n+            SliceOutput sliceOutput = new OutputStreamSliceOutput(output);\n+            PagesSerde.writePages(blockEncodingSerde, sliceOutput, pages);\n+            // We use flush instead of close, because the underlying stream would be closed and that is not allowed.\n+            sliceOutput.flush();\n         }\n         catch (RuntimeIOException e) {\n             // EOF exception occurs when the client disconnects while writing data",
      "parent_sha": "d95e3496631a0467c27ccc93beed01415cf065b6"
    }
  },
  {
    "oid": "8be2e42ae683c434968ce0db9e8e847894328a74",
    "message": "Update TestShardDao to use bucketing correctly",
    "date": "2016-04-29T00:21:07Z",
    "url": "https://github.com/prestodb/presto/commit/8be2e42ae683c434968ce0db9e8e847894328a74",
    "details": {
      "sha": "9ef0566f747e56ed91b6487b836fc7fdcd6ef287",
      "filename": "presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestShardDao.java",
      "status": "modified",
      "additions": 36,
      "deletions": 18,
      "changes": 54,
      "blob_url": "https://github.com/prestodb/presto/blob/8be2e42ae683c434968ce0db9e8e847894328a74/presto-raptor%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fmetadata%2FTestShardDao.java",
      "raw_url": "https://github.com/prestodb/presto/raw/8be2e42ae683c434968ce0db9e8e847894328a74/presto-raptor%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fmetadata%2FTestShardDao.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-raptor%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fmetadata%2FTestShardDao.java?ref=8be2e42ae683c434968ce0db9e8e847894328a74",
      "patch": "@@ -163,43 +163,61 @@ public void testNodeShards()\n         UUID shardUuid2 = UUID.randomUUID();\n         UUID shardUuid3 = UUID.randomUUID();\n         UUID shardUuid4 = UUID.randomUUID();\n+        UUID shardUuid5 = UUID.randomUUID();\n \n-        long tableId = createTable(\"test\");\n+        MetadataDao metadataDao = dbi.onDemand(MetadataDao.class);\n+\n+        int bucketCount = 20;\n+        long distributionId = metadataDao.insertDistribution(\"test\", \"bigint\", bucketCount);\n+        for (int i = 0; i < bucketCount; i++) {\n+            Integer nodeId = ((i % 2) == 0) ? nodeId1 : nodeId2;\n+            dao.insertBuckets(distributionId, ImmutableList.of(i), ImmutableList.of(nodeId));\n+        }\n+\n+        long plainTableId = metadataDao.insertTable(\"test\", \"plain\", false, null);\n+        long bucketedTableId = metadataDao.insertTable(\"test\", \"bucketed\", false, distributionId);\n \n-        long shardId1 = dao.insertShard(shardUuid1, tableId, null, 1, 11, 111);\n-        long shardId2 = dao.insertShard(shardUuid2, tableId, null, 2, 22, 222);\n-        long shardId3 = dao.insertShard(shardUuid3, tableId, 8, 3, 33, 333);\n-        long shardId4 = dao.insertShard(shardUuid4, tableId, 9, 4, 44, 444);\n+        long shardId1 = dao.insertShard(shardUuid1, plainTableId, null, 1, 11, 111);\n+        long shardId2 = dao.insertShard(shardUuid2, plainTableId, null, 2, 22, 222);\n+        long shardId3 = dao.insertShard(shardUuid3, bucketedTableId, 8, 3, 33, 333);\n+        long shardId4 = dao.insertShard(shardUuid4, bucketedTableId, 9, 4, 44, 444);\n+        long shardId5 = dao.insertShard(shardUuid5, bucketedTableId, 7, 5, 55, 555);\n \n-        assertEquals(dao.getShards(tableId), ImmutableList.of(shardUuid1, shardUuid2, shardUuid3, shardUuid4));\n+        assertEquals(dao.getShards(plainTableId), ImmutableList.of(shardUuid1, shardUuid2));\n+        assertEquals(dao.getShards(bucketedTableId), ImmutableList.of(shardUuid3, shardUuid4, shardUuid5));\n \n         assertEquals(dao.getNodeShards(nodeName1).size(), 0);\n         assertEquals(dao.getNodeShards(nodeName2).size(), 0);\n \n         dao.insertShardNode(shardId1, nodeId1);\n         dao.insertShardNode(shardId2, nodeId1);\n         dao.insertShardNode(shardId3, nodeId1);\n-        dao.insertShardNode(shardId4, nodeId1);\n-        dao.insertShardNode(shardId1, nodeId2);\n         dao.insertShardNode(shardId4, nodeId2);\n+        dao.insertShardNode(shardId5, nodeId2);\n+        dao.insertShardNode(shardId1, nodeId2);\n \n         OptionalInt noBucket = OptionalInt.empty();\n         OptionalLong noRange = OptionalLong.empty();\n-        ShardMetadata shard1 = new ShardMetadata(tableId, shardId1, shardUuid1, noBucket, 1, 11, 111, noRange, noRange);\n-        ShardMetadata shard2 = new ShardMetadata(tableId, shardId2, shardUuid2, noBucket, 2, 22, 222, noRange, noRange);\n-        ShardMetadata shard3 = new ShardMetadata(tableId, shardId3, shardUuid3, OptionalInt.of(8), 3, 33, 333, noRange, noRange);\n-        ShardMetadata shard4 = new ShardMetadata(tableId, shardId4, shardUuid4, OptionalInt.of(9), 4, 44, 444, noRange, noRange);\n+        ShardMetadata shard1 = new ShardMetadata(plainTableId, shardId1, shardUuid1, noBucket, 1, 11, 111, noRange, noRange);\n+        ShardMetadata shard2 = new ShardMetadata(plainTableId, shardId2, shardUuid2, noBucket, 2, 22, 222, noRange, noRange);\n+        ShardMetadata shard3 = new ShardMetadata(bucketedTableId, shardId3, shardUuid3, OptionalInt.of(8), 3, 33, 333, noRange, noRange);\n+        ShardMetadata shard4 = new ShardMetadata(bucketedTableId, shardId4, shardUuid4, OptionalInt.of(9), 4, 44, 444, noRange, noRange);\n+        ShardMetadata shard5 = new ShardMetadata(bucketedTableId, shardId5, shardUuid5, OptionalInt.of(7), 5, 55, 555, noRange, noRange);\n \n-        assertEquals(dao.getNodeShards(nodeName1), ImmutableSet.of(shard1, shard2, shard3, shard4));\n-        assertEquals(dao.getNodeShards(nodeName2), ImmutableSet.of(shard1, shard4));\n+        assertEquals(dao.getNodeShards(nodeName1), ImmutableSet.of(shard1, shard2, shard3));\n+        assertEquals(dao.getNodeShards(nodeName2), ImmutableSet.of(shard1, shard4, shard5));\n \n-        dao.dropShardNodes(tableId);\n+        dao.dropShardNodes(plainTableId);\n+        dao.dropShardNodes(bucketedTableId);\n \n-        assertEquals(dao.getShardNodes(tableId), ImmutableList.of());\n+        assertEquals(dao.getShardNodes(plainTableId), ImmutableList.of());\n+        assertEquals(dao.getShardNodes(bucketedTableId), ImmutableList.of());\n \n-        dao.dropShards(tableId);\n+        dao.dropShards(plainTableId);\n+        dao.dropShards(bucketedTableId);\n \n-        assertEquals(dao.getShards(tableId), ImmutableList.of());\n+        assertEquals(dao.getShards(plainTableId), ImmutableList.of());\n+        assertEquals(dao.getShards(bucketedTableId), ImmutableList.of());\n     }\n \n     @Test",
      "parent_sha": "cc8e39876e4cffa47aae7584e87035a697bdf723"
    }
  },
  {
    "oid": "950cae1d99a724200279b3f47679a20c84e51eca",
    "message": "Make resource group test insensitive to startup time\n\nThis fixes an intermittent failure when the test server took too long to\nstart",
    "date": "2016-10-20T16:01:07Z",
    "url": "https://github.com/prestodb/presto/commit/950cae1d99a724200279b3f47679a20c84e51eca",
    "details": {
      "sha": "fade95d5680a8e012a8f51abe19e791663e9a3fc",
      "filename": "presto-tests/src/test/java/com/facebook/presto/execution/resourceGroups/TestResourceGroupIntegration.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/prestodb/presto/blob/950cae1d99a724200279b3f47679a20c84e51eca/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FresourceGroups%2FTestResourceGroupIntegration.java",
      "raw_url": "https://github.com/prestodb/presto/raw/950cae1d99a724200279b3f47679a20c84e51eca/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FresourceGroups%2FTestResourceGroupIntegration.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-tests%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FresourceGroups%2FTestResourceGroupIntegration.java?ref=950cae1d99a724200279b3f47679a20c84e51eca",
      "patch": "@@ -19,13 +19,14 @@\n import com.google.common.collect.ImmutableMap;\n import org.testng.annotations.Test;\n \n-import java.util.concurrent.TimeUnit;\n-\n import static com.facebook.presto.tests.tpch.TpchQueryRunner.createQueryRunner;\n+import static io.airlift.testing.Assertions.assertLessThan;\n+import static io.airlift.units.Duration.nanosSince;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n \n public class TestResourceGroupIntegration\n {\n-    @Test(timeOut = 60_000)\n+    @Test\n     public void testMemoryFraction()\n             throws Exception\n     {\n@@ -34,12 +35,14 @@ public void testMemoryFraction()\n             queryRunner.getCoordinator().getResourceGroupManager().get().setConfigurationManager(\"file\", ImmutableMap.of(\"resource-groups.config-file\", getResourceFilePath(\"resource_groups_memory_percentage.json\")));\n \n             queryRunner.execute(\"SELECT COUNT(*), clerk FROM orders GROUP BY clerk\");\n+            long startTime = System.nanoTime();\n             while (true) {\n-                TimeUnit.SECONDS.sleep(1);\n+                SECONDS.sleep(1);\n                 ResourceGroupInfo global = queryRunner.getCoordinator().getResourceGroupManager().get().getResourceGroupInfo(new ResourceGroupId(\"global\"));\n                 if (global.getSoftMemoryLimit().toBytes() > 0) {\n                     break;\n                 }\n+                assertLessThan(nanosSince(startTime).roundTo(SECONDS), 60L);\n             }\n         }\n     }",
      "parent_sha": "976e5261fab923b01feed992ce4bffa93e129e65"
    }
  },
  {
    "oid": "4ca5110ef6ea9886c9b639f5ce1058573ee348e2",
    "message": "Let LocalQueryRunner run queries with subset of PlanOptimizers",
    "date": "2016-08-02T00:00:59Z",
    "url": "https://github.com/prestodb/presto/commit/4ca5110ef6ea9886c9b639f5ce1058573ee348e2",
    "details": {
      "sha": "f6707bd2698e7574b24f46d6e51f90763e4e755d",
      "filename": "presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java",
      "status": "modified",
      "additions": 15,
      "deletions": 7,
      "changes": 22,
      "blob_url": "https://github.com/prestodb/presto/blob/4ca5110ef6ea9886c9b639f5ce1058573ee348e2/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftesting%2FLocalQueryRunner.java",
      "raw_url": "https://github.com/prestodb/presto/raw/4ca5110ef6ea9886c9b639f5ce1058573ee348e2/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftesting%2FLocalQueryRunner.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftesting%2FLocalQueryRunner.java?ref=4ca5110ef6ea9886c9b639f5ce1058573ee348e2",
      "patch": "@@ -105,6 +105,7 @@\n import com.facebook.presto.sql.planner.PlanOptimizersFactory;\n import com.facebook.presto.sql.planner.PlanPrinter;\n import com.facebook.presto.sql.planner.SubPlan;\n+import com.facebook.presto.sql.planner.optimizations.PlanOptimizer;\n import com.facebook.presto.sql.planner.plan.PlanNode;\n import com.facebook.presto.sql.planner.plan.PlanNodeId;\n import com.facebook.presto.sql.planner.plan.TableScanNode;\n@@ -135,6 +136,8 @@\n import io.airlift.units.Duration;\n import org.intellij.lang.annotations.Language;\n \n+import javax.inject.Provider;\n+\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -585,19 +588,24 @@ public List<Driver> createDrivers(Session session, @Language(\"SQL\") String sql,\n \n     public Plan createPlan(Session session, @Language(\"SQL\") String sql)\n     {\n-        Statement statement = unwrapExecuteStatement(sqlParser.createStatement(sql), sqlParser, session);\n-\n-        assertFormattedSql(sqlParser, statement);\n-\n-        PlanNodeIdAllocator idAllocator = new PlanNodeIdAllocator();\n         FeaturesConfig featuresConfig = new FeaturesConfig()\n                 .setExperimentalSyntaxEnabled(true)\n                 .setDistributedIndexJoinsEnabled(false)\n                 .setOptimizeHashGeneration(true);\n         PlanOptimizersFactory planOptimizersFactory = new PlanOptimizersFactory(metadata, sqlParser, featuresConfig, true);\n+        return createPlan(session, sql, featuresConfig, planOptimizersFactory);\n+    }\n+\n+    public Plan createPlan(Session session, @Language(\"SQL\") String sql, FeaturesConfig featuresConfig, Provider<List<PlanOptimizer>> optimizerProvider)\n+    {\n+        Statement statement = unwrapExecuteStatement(sqlParser.createStatement(sql), sqlParser, session);\n+\n+        assertFormattedSql(sqlParser, statement);\n+\n+        PlanNodeIdAllocator idAllocator = new PlanNodeIdAllocator();\n \n         QueryExplainer queryExplainer = new QueryExplainer(\n-                planOptimizersFactory.get(),\n+                optimizerProvider.get(),\n                 metadata,\n                 accessControl,\n                 sqlParser,\n@@ -606,7 +614,7 @@ public Plan createPlan(Session session, @Language(\"SQL\") String sql)\n         Analyzer analyzer = new Analyzer(session, metadata, sqlParser, accessControl, Optional.of(queryExplainer), featuresConfig.isExperimentalSyntaxEnabled());\n \n         Analysis analysis = analyzer.analyze(statement);\n-        return new LogicalPlanner(session, planOptimizersFactory.get(), idAllocator, metadata, sqlParser).plan(analysis);\n+        return new LogicalPlanner(session, optimizerProvider.get(), idAllocator, metadata, sqlParser).plan(analysis);\n     }\n \n     public OperatorFactory createTableScanOperator(int operatorId, PlanNodeId planNodeId, String tableName, String... columnNames)",
      "parent_sha": "5e7e1e857e1c3c4c5cddf247a8dc26d3c6bdbee6"
    }
  },
  {
    "oid": "1ecba087e182d3f2c42c5a267addb3fe5416947a",
    "message": "Fix exception handling in SpillableHashAggregationBuilder",
    "date": "2017-06-12T06:29:08Z",
    "url": "https://github.com/prestodb/presto/commit/1ecba087e182d3f2c42c5a267addb3fe5416947a",
    "details": {
      "sha": "d113299223a3d0a21bda23302818a2d07ffc10cb",
      "filename": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/builder/SpillableHashAggregationBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 13,
      "changes": 18,
      "blob_url": "https://github.com/prestodb/presto/blob/1ecba087e182d3f2c42c5a267addb3fe5416947a/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Faggregation%2Fbuilder%2FSpillableHashAggregationBuilder.java",
      "raw_url": "https://github.com/prestodb/presto/raw/1ecba087e182d3f2c42c5a267addb3fe5416947a/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Faggregation%2Fbuilder%2FSpillableHashAggregationBuilder.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Faggregation%2Fbuilder%2FSpillableHashAggregationBuilder.java?ref=1ecba087e182d3f2c42c5a267addb3fe5416947a",
      "patch": "@@ -25,15 +25,13 @@\n import com.facebook.presto.spiller.SpillerFactory;\n import com.facebook.presto.sql.gen.JoinCompiler;\n import com.facebook.presto.sql.planner.plan.AggregationNode;\n-import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.util.concurrent.ListenableFuture;\n import io.airlift.units.DataSize;\n \n import java.util.Iterator;\n import java.util.List;\n import java.util.Optional;\n-import java.util.concurrent.ExecutionException;\n \n import static com.google.common.base.Preconditions.checkState;\n import static com.google.common.util.concurrent.Futures.immediateFuture;\n@@ -179,18 +177,12 @@ public Iterator<Page> buildResult()\n             return hashAggregationBuilder.buildResult();\n         }\n \n-        try {\n-            if (shouldMergeWithMemory(getSizeInMemory())) {\n-                return mergeFromDiskAndMemory();\n-            }\n-            else {\n-                spillToDisk().get();\n-                return mergeFromDisk();\n-            }\n+        if (shouldMergeWithMemory(getSizeInMemory())) {\n+            return mergeFromDiskAndMemory();\n         }\n-        catch (InterruptedException | ExecutionException e) {\n-            Thread.currentThread().interrupt();\n-            throw Throwables.propagate(e);\n+        else {\n+            getFutureValue(spillToDisk());\n+            return mergeFromDisk();\n         }\n     }\n ",
      "parent_sha": "28678b3fa4d32b59e69f3c53189bf15e9364a0bb"
    }
  },
  {
    "oid": "56bf5e6c5bfbaac5df4cc09f2c99deb7750bf9fd",
    "message": "Add hive session property to disable stats based filter reordering",
    "date": "2025-02-26T18:08:46Z",
    "url": "https://github.com/prestodb/presto/commit/56bf5e6c5bfbaac5df4cc09f2c99deb7750bf9fd",
    "details": {
      "sha": "92f1937221d4baae09efe6fac6d0c121b91d811d",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/prestodb/presto/blob/56bf5e6c5bfbaac5df4cc09f2c99deb7750bf9fd/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveSessionProperties.java",
      "raw_url": "https://github.com/prestodb/presto/raw/56bf5e6c5bfbaac5df4cc09f2c99deb7750bf9fd/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveSessionProperties.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHiveSessionProperties.java?ref=56bf5e6c5bfbaac5df4cc09f2c99deb7750bf9fd",
      "patch": "@@ -134,6 +134,8 @@ public final class HiveSessionProperties\n     public static final String SKIP_EMPTY_FILES = \"skip_empty_files\";\n     public static final String LEGACY_TIMESTAMP_BUCKETING = \"legacy_timestamp_bucketing\";\n \n+    public static final String STATS_BASED_FILTER_REORDER_DISABLED = \"stats_based_filter_reorder_disabled\";\n+\n     private final List<PropertyMetadata<?>> sessionProperties;\n \n     @Inject\n@@ -647,7 +649,12 @@ public HiveSessionProperties(HiveClientConfig hiveClientConfig, OrcFileWriterCon\n                         LEGACY_TIMESTAMP_BUCKETING,\n                         \"Use legacy timestamp bucketing algorithm (which is not Hive compatible) for table bucketed by timestamp type.\",\n                         hiveClientConfig.isLegacyTimestampBucketing(),\n-                        false));\n+                        false),\n+                booleanProperty(\n+                        STATS_BASED_FILTER_REORDER_DISABLED,\n+                        \"Native Execution only. Disable stats based filter reordering.\",\n+                        false,\n+                        true));\n     }\n \n     public List<PropertyMetadata<?>> getSessionProperties()",
      "parent_sha": "0927c8ff3bacc5132835b875b4c14d56e0759828"
    }
  },
  {
    "oid": "b8e2cf9316fe107868beeb61d7d277d182ea0ee6",
    "message": "Fix closing HashAggregationBuilder\n\nWithout this change, aggregationBuilder was being set to null\nwithout calling close on it. This change ensures that\naggregationBuilder is always properly closed AND that it won't be closed during\niteration on it's outputIterator.",
    "date": "2016-10-04T01:01:00Z",
    "url": "https://github.com/prestodb/presto/commit/b8e2cf9316fe107868beeb61d7d277d182ea0ee6",
    "details": {
      "sha": "8aaa510657891fc77fe6748bc0a53bdc651f530f",
      "filename": "presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/prestodb/presto/blob/b8e2cf9316fe107868beeb61d7d277d182ea0ee6/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FHashAggregationOperator.java",
      "raw_url": "https://github.com/prestodb/presto/raw/b8e2cf9316fe107868beeb61d7d277d182ea0ee6/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FHashAggregationOperator.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FHashAggregationOperator.java?ref=b8e2cf9316fe107868beeb61d7d277d182ea0ee6",
      "patch": "@@ -248,7 +248,7 @@ public Page getOutput()\n             return null;\n         }\n \n-        if (outputIterator == null || !outputIterator.hasNext()) {\n+        if (outputIterator == null) {\n             // current output iterator is done\n             outputIterator = null;\n \n@@ -271,20 +271,28 @@ public Page getOutput()\n             }\n \n             outputIterator = aggregationBuilder.buildResult();\n-            aggregationBuilder = null;\n \n             if (!outputIterator.hasNext()) {\n                 // current output iterator is done\n-                outputIterator = null;\n+                closeAggregationBuilder();\n                 return null;\n             }\n         }\n \n-        return outputIterator.next();\n+        Page output = outputIterator.next();\n+        if (!outputIterator.hasNext()) {\n+            closeAggregationBuilder();\n+        }\n+        return output;\n     }\n \n     @Override\n     public void close()\n+    {\n+        closeAggregationBuilder();\n+    }\n+\n+    private void closeAggregationBuilder()\n     {\n         outputIterator = null;\n         if (aggregationBuilder != null) {",
      "parent_sha": "5e926181ee05b7173dbc46c3875ba6104597ee87"
    }
  },
  {
    "oid": "45fe3c0b5a5c3f72cb31b417d17175ee060dbd80",
    "message": "Use primitive double in RemoteTaskStats#IncrementalAverage\n\nMethod add() is synchronized thus `average` can be a primitive double\ninstead of an AtomicDouble.",
    "date": "2019-05-22T20:56:51Z",
    "url": "https://github.com/prestodb/presto/commit/45fe3c0b5a5c3f72cb31b417d17175ee060dbd80",
    "details": {
      "sha": "12e56c22eef05505b1cdf9963e487c00295e756e",
      "filename": "presto-main/src/main/java/com/facebook/presto/server/remotetask/RemoteTaskStats.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/prestodb/presto/blob/45fe3c0b5a5c3f72cb31b417d17175ee060dbd80/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2Fremotetask%2FRemoteTaskStats.java",
      "raw_url": "https://github.com/prestodb/presto/raw/45fe3c0b5a5c3f72cb31b417d17175ee060dbd80/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2Fremotetask%2FRemoteTaskStats.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2Fremotetask%2FRemoteTaskStats.java?ref=45fe3c0b5a5c3f72cb31b417d17175ee060dbd80",
      "patch": "@@ -13,7 +13,6 @@\n  */\n package com.facebook.presto.server.remotetask;\n \n-import com.google.common.util.concurrent.AtomicDouble;\n import io.airlift.stats.DistributionStat;\n import org.weakref.jmx.Managed;\n import org.weakref.jmx.Nested;\n@@ -113,18 +112,17 @@ public DistributionStat getUpdateWithPlanBytes()\n     private static class IncrementalAverage\n     {\n         private long count;\n-        private final AtomicDouble average = new AtomicDouble();\n+        private volatile double average;\n \n         synchronized void add(long value)\n         {\n             count++;\n-            double oldAverage = average.get();\n-            average.set(oldAverage + ((value - oldAverage) / count));\n+            average = average + (value - average) / count;\n         }\n \n         double get()\n         {\n-            return average.get();\n+            return average;\n         }\n     }\n }",
      "parent_sha": "a93dd915a5c3e955ab1ed8e5154ac0d82521f3b6"
    }
  },
  {
    "oid": "3878d67303a16ea1776ff3d2d31cbe330f642d0a",
    "message": "Do not log stacktrace for RemoteNodeMemory warnings",
    "date": "2015-10-08T01:04:27Z",
    "url": "https://github.com/prestodb/presto/commit/3878d67303a16ea1776ff3d2d31cbe330f642d0a",
    "details": {
      "sha": "a7dc0b0f75d5dc3975aaea59f9973285cc0cf752",
      "filename": "presto-main/src/main/java/com/facebook/presto/memory/RemoteNodeMemory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/prestodb/presto/blob/3878d67303a16ea1776ff3d2d31cbe330f642d0a/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmemory%2FRemoteNodeMemory.java",
      "raw_url": "https://github.com/prestodb/presto/raw/3878d67303a16ea1776ff3d2d31cbe330f642d0a/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmemory%2FRemoteNodeMemory.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmemory%2FRemoteNodeMemory.java?ref=3878d67303a16ea1776ff3d2d31cbe330f642d0a",
      "patch": "@@ -118,7 +118,7 @@ public void onSuccess(@Nullable JsonResponse<MemoryInfo> result)\n                 @Override\n                 public void onFailure(Throwable t)\n                 {\n-                    log.warn(t, \"Error fetching memory info from %s\", memoryInfoUri);\n+                    log.warn(\"Error fetching memory info from %s: %s\", memoryInfoUri, t.getMessage());\n                     lastUpdateNanos.set(System.nanoTime());\n                     future.compareAndSet(responseFuture, null);\n                 }",
      "parent_sha": "eb1af77fb3201035266f6e2ca91b47701625158f"
    }
  },
  {
    "oid": "9088e4269da2a47f5b6892af927d247185ae56f2",
    "message": "Add validation for names of table properties",
    "date": "2015-11-04T23:10:19Z",
    "url": "https://github.com/prestodb/presto/commit/9088e4269da2a47f5b6892af927d247185ae56f2",
    "details": {
      "sha": "fed00aaaf6b7552b59205a7278cafe342d43d9d9",
      "filename": "presto-main/src/main/java/com/facebook/presto/metadata/TablePropertyManager.java",
      "status": "modified",
      "additions": 62,
      "deletions": 12,
      "changes": 74,
      "blob_url": "https://github.com/prestodb/presto/blob/9088e4269da2a47f5b6892af927d247185ae56f2/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTablePropertyManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/9088e4269da2a47f5b6892af927d247185ae56f2/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTablePropertyManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTablePropertyManager.java?ref=9088e4269da2a47f5b6892af927d247185ae56f2",
      "patch": "@@ -14,21 +14,29 @@\n package com.facebook.presto.metadata;\n \n import com.facebook.presto.Session;\n+import com.facebook.presto.block.BlockUtils;\n import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.BlockBuilder;\n+import com.facebook.presto.spi.block.BlockBuilderStatus;\n import com.facebook.presto.spi.session.PropertyMetadata;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.sql.analyzer.SemanticException;\n import com.facebook.presto.sql.tree.Expression;\n import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Maps;\n \n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n-import static com.facebook.presto.metadata.SessionPropertyManager.evaluatePropertyValue;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_TABLE_PROPERTY;\n import static com.facebook.presto.spi.StandardErrorCode.NOT_FOUND;\n+import static com.facebook.presto.sql.planner.ExpressionInterpreter.evaluateConstantExpression;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class TablePropertyManager\n@@ -52,25 +60,52 @@ public Map<String, Object> getTableProperties(\n             Session session,\n             Metadata metadata)\n     {\n-        Map<String, PropertyMetadata<?>> tableProperties = catalogTableProperties.get(catalog);\n-        if (tableProperties == null) {\n+        Map<String, PropertyMetadata<?>> supportedTableProperties = catalogTableProperties.get(catalog);\n+        if (supportedTableProperties == null) {\n             throw new PrestoException(NOT_FOUND, \"Catalog not found: \" + catalog);\n         }\n \n         ImmutableMap.Builder<String, Object> properties = ImmutableMap.builder();\n-        for (PropertyMetadata<?> tableProperty : tableProperties.values()) {\n-            Expression expression = sqlPropertyValues.get(tableProperty.getName());\n+\n+        // Fill in user-specified properties\n+        for (Map.Entry<String, Expression> sqlProperty : sqlPropertyValues.entrySet()) {\n+            PropertyMetadata<?> tableProperty = supportedTableProperties.get(sqlProperty.getKey());\n+            if (tableProperty == null) {\n+                throw new PrestoException(INVALID_TABLE_PROPERTY, format(\"Catalog '%s' does not support table property '%s'\", catalog, sqlProperty.getKey()));\n+            }\n+\n+            Object sqlObjectValue;\n+            try {\n+                sqlObjectValue = evaluatePropertyValue(sqlProperty.getValue(), tableProperty.getSqlType(), session, metadata);\n+            }\n+            catch (SemanticException e) {\n+                throw new PrestoException(INVALID_TABLE_PROPERTY,\n+                        format(\"Invalid value for table property '%s': Cannot convert '%s' to %s\",\n+                                tableProperty.getName(),\n+                                sqlProperty.getValue(),\n+                                tableProperty.getSqlType()), e);\n+            }\n+\n             Object value;\n-            if (expression != null) {\n-                Object sqlObjectValue = evaluatePropertyValue(expression, tableProperty.getSqlType(), session, metadata);\n+            try {\n                 value = tableProperty.decode(sqlObjectValue);\n             }\n-            else {\n-                value = tableProperty.getDefaultValue();\n+            catch (Exception e) {\n+                throw new PrestoException(INVALID_TABLE_PROPERTY,\n+                        format(\"Unable to set table property '%s' to '%s': %s\", tableProperty.getName(), sqlProperty.getValue(), e.getMessage()), e);\n             }\n-            // do not include default properties that are null\n-            if (value != null) {\n-                properties.put(tableProperty.getName(), value);\n+\n+            properties.put(tableProperty.getName(), value);\n+        }\n+        Map<String, Object> userSpecifiedProperties = properties.build();\n+\n+        // Fill in the remaining properties with non-null defaults\n+        for (PropertyMetadata<?> tableProperty : supportedTableProperties.values()) {\n+            if (!userSpecifiedProperties.containsKey(tableProperty.getName())) {\n+                Object value = tableProperty.getDefaultValue();\n+                if (value != null) {\n+                    properties.put(tableProperty.getName(), value);\n+                }\n             }\n         }\n         return properties.build();\n@@ -80,4 +115,19 @@ public Map<String, Map<String, PropertyMetadata<?>>> getAllTableProperties()\n     {\n         return ImmutableMap.copyOf(catalogTableProperties);\n     }\n+\n+    private static Object evaluatePropertyValue(Expression expression, Type expectedType, Session session, Metadata metadata)\n+    {\n+        Object value = evaluateConstantExpression(expression, expectedType, metadata, session, ImmutableSet.of());\n+\n+        // convert to object value type of SQL type\n+        BlockBuilder blockBuilder = expectedType.createBlockBuilder(new BlockBuilderStatus(), 1);\n+        BlockUtils.appendObject(expectedType, blockBuilder, value);\n+        Object objectValue = expectedType.getObjectValue(session.toConnectorSession(), blockBuilder, 0);\n+\n+        if (objectValue == null) {\n+            throw new PrestoException(INVALID_TABLE_PROPERTY, \"Table property value cannot be null\");\n+        }\n+        return objectValue;\n+    }\n }",
      "parent_sha": "78aafc301cdc0f9789a03eddb1fdde4ee3831ec2"
    }
  },
  {
    "oid": "ca494e6dc2a3f88f33875f014ed4677375e189da",
    "message": "Change \"verifier-test-\" to \"verifier-test:\"",
    "date": "2014-07-07T19:13:39Z",
    "url": "https://github.com/prestodb/presto/commit/ca494e6dc2a3f88f33875f014ed4677375e189da",
    "details": {
      "sha": "2f56af7b5ffb5f8e413940f82b7ee38b7c35ee40",
      "filename": "presto-verifier/src/main/java/com/facebook/presto/verifier/Validator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/prestodb/presto/blob/ca494e6dc2a3f88f33875f014ed4677375e189da/presto-verifier%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fverifier%2FValidator.java",
      "raw_url": "https://github.com/prestodb/presto/raw/ca494e6dc2a3f88f33875f014ed4677375e189da/presto-verifier%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fverifier%2FValidator.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-verifier%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fverifier%2FValidator.java?ref=ca494e6dc2a3f88f33875f014ed4677375e189da",
      "patch": "@@ -232,7 +232,7 @@ public QueryResult getTestResult()\n     private QueryResult executeQuery(String url, String username, String password, Query query, Duration timeout)\n     {\n         try (Connection connection = DriverManager.getConnection(url, username, password)) {\n-            connection.setClientInfo(\"ApplicationName\", \"verifier-test-\" + queryPair.getName());\n+            connection.setClientInfo(\"ApplicationName\", \"verifier-test:\" + queryPair.getName());\n             connection.setCatalog(query.getCatalog());\n             connection.setSchema(query.getSchema());\n             long start = System.nanoTime();",
      "parent_sha": "5a9192ccce97fa5beaafc2fb3e770c24ce1db2fe"
    }
  },
  {
    "oid": "6e0ae683028bebf66b249813ea3971223beee557",
    "message": "Allow lookup of RedisInternalFieldDescription by column name",
    "date": "2018-07-23T09:10:02Z",
    "url": "https://github.com/prestodb/presto/commit/6e0ae683028bebf66b249813ea3971223beee557",
    "details": {
      "sha": "ebdf1f8cdc6eea229d992e47690924a5937638cf",
      "filename": "presto-redis/src/main/java/com/facebook/presto/redis/RedisInternalFieldDescription.java",
      "status": "modified",
      "additions": 20,
      "deletions": 3,
      "changes": 23,
      "blob_url": "https://github.com/prestodb/presto/blob/6e0ae683028bebf66b249813ea3971223beee557/presto-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fredis%2FRedisInternalFieldDescription.java",
      "raw_url": "https://github.com/prestodb/presto/raw/6e0ae683028bebf66b249813ea3971223beee557/presto-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fredis%2FRedisInternalFieldDescription.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fredis%2FRedisInternalFieldDescription.java?ref=6e0ae683028bebf66b249813ea3971223beee557",
      "patch": "@@ -13,6 +13,7 @@\n  */\n package com.facebook.presto.redis;\n \n+import com.facebook.presto.decoder.DecoderColumnHandle;\n import com.facebook.presto.decoder.FieldValueProvider;\n import com.facebook.presto.spi.ColumnMetadata;\n import com.facebook.presto.spi.type.BigintType;\n@@ -21,10 +22,15 @@\n import io.airlift.slice.Slice;\n import io.airlift.slice.Slices;\n \n+import java.util.Map;\n+\n import static com.facebook.presto.spi.type.VarcharType.createUnboundedVarcharType;\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Arrays.stream;\n import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n \n /**\n  * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n@@ -64,6 +70,17 @@ public enum RedisInternalFieldDescription\n      */\n     KEY_LENGTH_FIELD(\"_key_length\", BigintType.BIGINT, \"Total number of key bytes\");\n \n+    private static final Map<String, RedisInternalFieldDescription> BY_COLUMN_NAME =\n+            stream(RedisInternalFieldDescription.values())\n+                    .collect(toImmutableMap(RedisInternalFieldDescription::getColumnName, identity()));\n+\n+    public static RedisInternalFieldDescription forColumnName(String columnName)\n+    {\n+        RedisInternalFieldDescription description = BY_COLUMN_NAME.get(columnName);\n+        checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n+        return description;\n+    }\n+\n     private final String columnName;\n     private final Type type;\n     private final String comment;\n@@ -136,7 +153,7 @@ private BooleanRedisFieldValueProvider(boolean value)\n         @Override\n         public boolean accept(DecoderColumnHandle columnHandle)\n         {\n-            return columnHandle.getName().equals(name);\n+            return columnHandle.getName().equals(columnName);\n         }\n \n         @Override\n@@ -165,7 +182,7 @@ private LongRedisFieldValueProvider(long value)\n         @Override\n         public boolean accept(DecoderColumnHandle columnHandle)\n         {\n-            return columnHandle.getName().equals(name);\n+            return columnHandle.getName().equals(columnName);\n         }\n \n         @Override\n@@ -194,7 +211,7 @@ private BytesRedisFieldValueProvider(byte[] value)\n         @Override\n         public boolean accept(DecoderColumnHandle columnHandle)\n         {\n-            return columnHandle.getName().equals(name);\n+            return columnHandle.getName().equals(columnName);\n         }\n \n         @Override",
      "parent_sha": "7ff7e34d90b006a009621635d9552daeb026c096"
    }
  },
  {
    "oid": "7125e0ceb3e11e9288bfa017b39f13c5251b7665",
    "message": "Short-circuit logical expression in ExpressionInterpreter",
    "date": "2018-04-09T11:18:47Z",
    "url": "https://github.com/prestodb/presto/commit/7125e0ceb3e11e9288bfa017b39f13c5251b7665",
    "details": {
      "sha": "3671d3819ad9cc9239d0500ead395a32905d8480",
      "filename": "presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/prestodb/presto/blob/7125e0ceb3e11e9288bfa017b39f13c5251b7665/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FExpressionInterpreter.java",
      "raw_url": "https://github.com/prestodb/presto/raw/7125e0ceb3e11e9288bfa017b39f13c5251b7665/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FExpressionInterpreter.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FExpressionInterpreter.java?ref=7125e0ceb3e11e9288bfa017b39f13c5251b7665",
      "patch": "@@ -857,10 +857,16 @@ protected Object visitNotExpression(NotExpression node, Object context)\n         protected Object visitLogicalBinaryExpression(LogicalBinaryExpression node, Object context)\n         {\n             Object left = process(node.getLeft(), context);\n-            Object right = process(node.getRight(), context);\n+            Object right;\n \n             switch (node.getType()) {\n                 case AND: {\n+                    if (Boolean.FALSE.equals(left)) {\n+                        return false;\n+                    }\n+\n+                    right = process(node.getRight(), context);\n+\n                     if (Boolean.FALSE.equals(left) || Boolean.TRUE.equals(right)) {\n                         return left;\n                     }\n@@ -871,6 +877,12 @@ protected Object visitLogicalBinaryExpression(LogicalBinaryExpression node, Obje\n                     break;\n                 }\n                 case OR: {\n+                    if (Boolean.TRUE.equals(left)) {\n+                        return true;\n+                    }\n+\n+                    right = process(node.getRight(), context);\n+\n                     if (Boolean.TRUE.equals(left) || Boolean.FALSE.equals(right)) {\n                         return left;\n                     }\n@@ -880,6 +892,8 @@ protected Object visitLogicalBinaryExpression(LogicalBinaryExpression node, Obje\n                     }\n                     break;\n                 }\n+                default:\n+                    throw new IllegalStateException(\"Unknown LogicalBinaryExpression#Type\");\n             }\n \n             if (left == null && right == null) {",
      "parent_sha": "35723b26740b5b94ef2f458c4beb6c6d6d4fb540"
    }
  },
  {
    "oid": "3e3c545919c65b0c4a2b05336bf71be61f221808",
    "message": "Make UnrecoverableS3OperationException unchecked",
    "date": "2016-10-04T02:00:41Z",
    "url": "https://github.com/prestodb/presto/commit/3e3c545919c65b0c4a2b05336bf71be61f221808",
    "details": {
      "sha": "fc31adca07ada28065ede06572568a9be720ddfb",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/PrestoS3FileSystem.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/prestodb/presto/blob/3e3c545919c65b0c4a2b05336bf71be61f221808/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FPrestoS3FileSystem.java",
      "raw_url": "https://github.com/prestodb/presto/raw/3e3c545919c65b0c4a2b05336bf71be61f221808/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FPrestoS3FileSystem.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FPrestoS3FileSystem.java?ref=3e3c545919c65b0c4a2b05336bf71be61f221808",
      "patch": "@@ -515,7 +515,7 @@ private Iterator<LocatedFileStatus> statusFromObjects(List<S3ObjectSummary> obje\n      */\n     @VisibleForTesting\n     static class UnrecoverableS3OperationException\n-            extends Exception\n+            extends RuntimeException\n     {\n         public UnrecoverableS3OperationException(Path path, Throwable cause)\n         {\n@@ -816,7 +816,7 @@ public boolean seekToNewSource(long targetPos)\n         }\n \n         private void seekStream()\n-                throws IOException, UnrecoverableS3OperationException\n+                throws IOException\n         {\n             if ((in != null) && (nextReadPosition == streamPosition)) {\n                 // already at specified position\n@@ -847,7 +847,7 @@ private void seekStream()\n         }\n \n         private void openStream()\n-                throws IOException, UnrecoverableS3OperationException\n+                throws IOException\n         {\n             if (in == null) {\n                 in = openStream(path, nextReadPosition);\n@@ -857,7 +857,7 @@ private void openStream()\n         }\n \n         private InputStream openStream(Path path, long start)\n-                throws IOException, UnrecoverableS3OperationException\n+                throws IOException\n         {\n             try {\n                 return retry()\n@@ -892,7 +892,6 @@ private InputStream openStream(Path path, long start)\n             }\n             catch (Exception e) {\n                 Throwables.propagateIfInstanceOf(e, IOException.class);\n-                Throwables.propagateIfInstanceOf(e, UnrecoverableS3OperationException.class);\n                 throw Throwables.propagate(e);\n             }\n         }",
      "parent_sha": "2102f13e3e16196cdf81acbb31a48553c72e8f99"
    }
  },
  {
    "oid": "6636b8812b4b34b1a3eebf4ba99c5011e7cecc64",
    "message": "Use single lock for ConnectorManager",
    "date": "2016-09-19T18:11:13Z",
    "url": "https://github.com/prestodb/presto/commit/6636b8812b4b34b1a3eebf4ba99c5011e7cecc64",
    "details": {
      "sha": "d0fd946b6a2d80bf91e37de3fca3c2292a938f05",
      "filename": "presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/prestodb/presto/blob/6636b8812b4b34b1a3eebf4ba99c5011e7cecc64/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fconnector%2FConnectorManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/6636b8812b4b34b1a3eebf4ba99c5011e7cecc64/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fconnector%2FConnectorManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fconnector%2FConnectorManager.java?ref=6636b8812b4b34b1a3eebf4ba99c5011e7cecc64",
      "patch": "@@ -49,6 +49,8 @@\n import io.airlift.node.NodeInfo;\n \n import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n import javax.inject.Inject;\n \n import java.util.Map;\n@@ -63,6 +65,7 @@\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n+@ThreadSafe\n public class ConnectorManager\n {\n     public static final String INFORMATION_SCHEMA_CONNECTOR_PREFIX = \"$info_schema@\";\n@@ -86,9 +89,12 @@ public class ConnectorManager\n     private final NodeInfo nodeInfo;\n     private final TransactionManager transactionManager;\n \n+    @GuardedBy(\"this\")\n     private final ConcurrentMap<String, ConnectorFactory> connectorFactories = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n     private final Set<String> catalogs = newConcurrentHashSet();\n+    @GuardedBy(\"this\")\n     private final ConcurrentMap<String, Connector> connectors = new ConcurrentHashMap<>();\n \n     private final AtomicBoolean stopped = new AtomicBoolean();\n@@ -126,7 +132,7 @@ public ConnectorManager(MetadataManager metadataManager,\n     }\n \n     @PreDestroy\n-    public void stop()\n+    public synchronized void stop()\n     {\n         if (stopped.getAndSet(true)) {\n             return;\n@@ -149,15 +155,15 @@ public void addConnectorFactory(@SuppressWarnings(\"deprecation\" ) com.facebook.p\n         addConnectorFactory(new LegacyTransactionConnectorFactory(connectorFactory));\n     }\n \n-    public void addConnectorFactory(ConnectorFactory connectorFactory)\n+    public synchronized void addConnectorFactory(ConnectorFactory connectorFactory)\n     {\n         checkState(!stopped.get(), \"ConnectorManager is stopped\");\n         ConnectorFactory existingConnectorFactory = connectorFactories.putIfAbsent(connectorFactory.getName(), connectorFactory);\n         checkArgument(existingConnectorFactory == null, \"Connector %s is already registered\", connectorFactory.getName());\n         handleResolver.addConnectorName(connectorFactory.getName(), connectorFactory.getHandleResolver());\n     }\n \n-    public void createConnection(String catalogName, String connectorName, Map<String, String> properties)\n+    public synchronized void createConnection(String catalogName, String connectorName, Map<String, String> properties)\n     {\n         requireNonNull(connectorName, \"connectorName is null\");\n         ConnectorFactory connectorFactory = connectorFactories.get(connectorName);",
      "parent_sha": "5c33017484d6a60c90b17be11fd2e0cfdd9e43a9"
    }
  },
  {
    "oid": "90a3131403b5e35a17921321d2d521c5e9d7ffe9",
    "message": "Revert commit 8fc1be4cb4c2243ca5e36f8eef396ff9b6d5983d\n\nAfter this change SHOW COLUMNS FROM Table;\nfails with the error\n\n```\nCaused by: com.facebook.presto.spi.PrestoException: No nodes available to run query\n\tat com.facebook.presto.execution.scheduler.nodeSelection.SimpleNodeSelector.computeAssignments(SimpleNodeSelector.java:186)\n\tat com.facebook.presto.execution.scheduler.DynamicSplitPlacementPolicy.computeAssignments(DynamicSplitPlacementPolicy.java:42)\n\tat com.facebook.presto.execution.scheduler.SourcePartitionedScheduler.schedule(SourcePartitionedScheduler.java:273)\n\tat com.facebook.presto.execution.scheduler.SourcePartitionedScheduler$1.schedule(SourcePartitionedScheduler.java:147)\n\tat com.facebook.presto.execution.scheduler.LegacySqlQueryScheduler.schedule(LegacySqlQueryScheduler.java:433)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n```\n\nThis reverts commit 8fc1be4cb4c2243ca5e36f8eef396ff9b6d5983d.",
    "date": "2022-08-16T21:56:45Z",
    "url": "https://github.com/prestodb/presto/commit/90a3131403b5e35a17921321d2d521c5e9d7ffe9",
    "details": {
      "sha": "b2a8ef45620193b33f9ab52e688957105117db00",
      "filename": "presto-main/src/main/java/com/facebook/presto/metadata/DiscoveryNodeManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/prestodb/presto/blob/90a3131403b5e35a17921321d2d521c5e9d7ffe9/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FDiscoveryNodeManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/90a3131403b5e35a17921321d2d521c5e9d7ffe9/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FDiscoveryNodeManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FDiscoveryNodeManager.java?ref=90a3131403b5e35a17921321d2d521c5e9d7ffe9",
      "patch": "@@ -443,18 +443,6 @@ public int getShuttingDownNodeCount()\n         return getAllNodes().getShuttingDownNodes().size();\n     }\n \n-    @Managed\n-    public int getActiveResourceManagerCount()\n-    {\n-        return getAllNodes().getActiveResourceManagers().size();\n-    }\n-\n-    @Managed\n-    public int getActiveCoordinatorCount()\n-    {\n-        return getAllNodes().getActiveCoordinators().size();\n-    }\n-\n     @Override\n     public Set<InternalNode> getNodes(NodeState state)\n     {\n@@ -603,6 +591,8 @@ private Predicate<ServiceDescriptor> filterRelevantNodes()\n             return service ->\n                     !nodeStatusService.isPresent()\n                             || nodeStatusService.get().isAllowed(service.getLocation())\n+                            || isCoordinator(service)\n+                            || isResourceManager(service)\n                             || isCatalogServer(service);\n         }\n ",
      "parent_sha": "08cc78d3cd5779ca4b99ac5abe38604085e0a014"
    }
  },
  {
    "oid": "e2f35f8b77683f6681cd57fc3d0c61e8a7e34f0d",
    "message": "Reduce locking contention on SqlStageExecution.\n\n* Optimize SqlStageExecution.checkAllTaskFinal call to remove a Set.containsAll(set) call.\n* Do not call SqlStageExecution.checkAllTaskFinal in updateTaskStatus() since there is already a stateChangeListener and a finalTaskInfolistener that call it, and those are the two kinds of changes that can lead to us actually updating the allTasksFinal info.\n\nrename",
    "date": "2023-08-15T19:14:46Z",
    "url": "https://github.com/prestodb/presto/commit/e2f35f8b77683f6681cd57fc3d0c61e8a7e34f0d",
    "details": {
      "sha": "571c602fc1a0be1b5971a13579ae65575d8ff052",
      "filename": "presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java",
      "status": "modified",
      "additions": 51,
      "deletions": 51,
      "changes": 102,
      "blob_url": "https://github.com/prestodb/presto/blob/e2f35f8b77683f6681cd57fc3d0c61e8a7e34f0d/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FSqlStageExecution.java",
      "raw_url": "https://github.com/prestodb/presto/raw/e2f35f8b77683f6681cd57fc3d0c61e8a7e34f0d/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FSqlStageExecution.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FSqlStageExecution.java?ref=e2f35f8b77683f6681cd57fc3d0c61e8a7e34f0d",
      "patch": "@@ -117,7 +117,7 @@ public final class SqlStageExecution\n     @GuardedBy(\"this\")\n     private final Set<TaskId> failedTasks = newConcurrentHashSet();\n     @GuardedBy(\"this\")\n-    private final Set<TaskId> tasksWithFinalInfo = newConcurrentHashSet();\n+    private final Set<TaskId> runningTasks = newConcurrentHashSet();\n \n     private final Set<Lifespan> finishedLifespans = ConcurrentHashMap.newKeySet();\n     private final int totalLifespans;\n@@ -212,7 +212,11 @@ private SqlStageExecution(\n     // this is a separate method to ensure that the `this` reference is not leaked during construction\n     private void initialize()\n     {\n-        stateMachine.addStateChangeListener(newState -> checkAllTaskFinal());\n+        stateMachine.addStateChangeListener(newState -> {\n+            if (newState.isDone()) {\n+                checkAllTaskFinal();\n+            }\n+        });\n         completedLifespansChangeListeners.addListener(lifespans -> finishedLifespans.addAll(lifespans));\n     }\n \n@@ -524,6 +528,8 @@ private synchronized RemoteTask scheduleTask(InternalNode node, TaskId taskId, M\n         completeSources.forEach(task::noMoreSplits);\n \n         allTasks.add(taskId);\n+        runningTasks.add(taskId);\n+\n         tasks.computeIfAbsent(node, key -> newConcurrentHashSet()).add(task);\n         nodeTaskMap.addTask(node, task);\n \n@@ -560,61 +566,55 @@ private static Split createRemoteSplitFor(TaskId taskId, URI remoteSourceTaskLoc\n \n     private void updateTaskStatus(TaskId taskId, TaskStatus taskStatus)\n     {\n-        try {\n-            StageExecutionState stageExecutionState = getState();\n-            if (stageExecutionState.isDone()) {\n-                return;\n-            }\n+        StageExecutionState stageExecutionState = getState();\n+        if (stageExecutionState.isDone()) {\n+            return;\n+        }\n \n-            TaskState taskState = taskStatus.getState();\n-            if (taskState == TaskState.FAILED) {\n-                // no matter if it is possible to recover - the task is failed\n-                failedTasks.add(taskId);\n-\n-                RuntimeException failure = taskStatus.getFailures().stream()\n-                        .findFirst()\n-                        .map(this::rewriteTransportFailure)\n-                        .map(ExecutionFailureInfo::toException)\n-                        .orElse(new PrestoException(GENERIC_INTERNAL_ERROR, \"A task failed for an unknown reason\"));\n-                if (isRecoverable(taskStatus.getFailures())) {\n-                    try {\n-                        stageTaskRecoveryCallback.get().recover(taskId);\n-                        finishedTasks.add(taskId);\n-                    }\n-                    catch (Throwable t) {\n-                        // In an ideal world, this exception is not supposed to happen.\n-                        // However, it could happen, for example, if connector throws exception.\n-                        // We need to handle the exception in order to fail the query properly, otherwise the failed task will hang in RUNNING/SCHEDULING state.\n-                        failure.addSuppressed(new PrestoException(GENERIC_RECOVERY_ERROR, format(\"Encountered error when trying to recover task %s\", taskId), t));\n-                        stateMachine.transitionToFailed(failure);\n-                    }\n+        TaskState taskState = taskStatus.getState();\n+        if (taskState == TaskState.FAILED) {\n+            // no matter if it is possible to recover - the task is failed\n+            failedTasks.add(taskId);\n+\n+            RuntimeException failure = taskStatus.getFailures().stream()\n+                    .findFirst()\n+                    .map(this::rewriteTransportFailure)\n+                    .map(ExecutionFailureInfo::toException)\n+                    .orElse(new PrestoException(GENERIC_INTERNAL_ERROR, \"A task failed for an unknown reason\"));\n+            if (isRecoverable(taskStatus.getFailures())) {\n+                try {\n+                    stageTaskRecoveryCallback.get().recover(taskId);\n+                    finishedTasks.add(taskId);\n                 }\n-                else {\n+                catch (Throwable t) {\n+                    // In an ideal world, this exception is not supposed to happen.\n+                    // However, it could happen, for example, if connector throws exception.\n+                    // We need to handle the exception in order to fail the query properly, otherwise the failed task will hang in RUNNING/SCHEDULING state.\n+                    failure.addSuppressed(new PrestoException(GENERIC_RECOVERY_ERROR, format(\"Encountered error when trying to recover task %s\", taskId), t));\n                     stateMachine.transitionToFailed(failure);\n                 }\n             }\n-            else if (taskState == TaskState.ABORTED) {\n-                // A task should only be in the aborted state if the STAGE is done (ABORTED or FAILED)\n-                stateMachine.transitionToFailed(new PrestoException(GENERIC_INTERNAL_ERROR, \"A task is in the ABORTED state but stage is \" + stageExecutionState));\n-            }\n-            else if (taskState == TaskState.FINISHED) {\n-                finishedTasks.add(taskId);\n+            else {\n+                stateMachine.transitionToFailed(failure);\n             }\n+        }\n+        else if (taskState == TaskState.ABORTED) {\n+            // A task should only be in the aborted state if the STAGE is done (ABORTED or FAILED)\n+            stateMachine.transitionToFailed(new PrestoException(GENERIC_INTERNAL_ERROR, \"A task is in the ABORTED state but stage is \" + stageExecutionState));\n+        }\n+        else if (taskState == TaskState.FINISHED) {\n+            finishedTasks.add(taskId);\n+        }\n \n-            // The finishedTasks.add(taskStatus.getTaskId()) must happen before the getState() (see schedulingComplete)\n-            stageExecutionState = getState();\n-            if (stageExecutionState == StageExecutionState.SCHEDULED || stageExecutionState == StageExecutionState.RUNNING) {\n-                if (taskState == TaskState.RUNNING) {\n-                    stateMachine.transitionToRunning();\n-                }\n-                if (finishedTasks.size() == allTasks.size()) {\n-                    stateMachine.transitionToFinished();\n-                }\n+        // The finishedTasks.add(taskStatus.getTaskId()) must happen before the getState() (see schedulingComplete)\n+        stageExecutionState = getState();\n+        if (stageExecutionState == StageExecutionState.SCHEDULED || stageExecutionState == StageExecutionState.RUNNING) {\n+            if (taskState == TaskState.RUNNING) {\n+                stateMachine.transitionToRunning();\n+            }\n+            if (finishedTasks.size() == allTasks.size()) {\n+                stateMachine.transitionToFinished();\n             }\n-        }\n-        finally {\n-            // after updating state, check if all tasks have final status information\n-            checkAllTaskFinal();\n         }\n     }\n \n@@ -631,13 +631,13 @@ private boolean isRecoverable(List<ExecutionFailureInfo> failures)\n \n     private synchronized void updateFinalTaskInfo(TaskInfo finalTaskInfo)\n     {\n-        tasksWithFinalInfo.add(finalTaskInfo.getTaskId());\n+        runningTasks.remove(finalTaskInfo.getTaskId());\n         checkAllTaskFinal();\n     }\n \n     private synchronized void checkAllTaskFinal()\n     {\n-        if (stateMachine.getState().isDone() && tasksWithFinalInfo.containsAll(allTasks)) {\n+        if (stateMachine.getState().isDone() && runningTasks.isEmpty()) {\n             if (getFragment().getStageExecutionDescriptor().isStageGroupedExecution()) {\n                 // in case stage is CANCELLED/ABORTED/FAILED, number of finished lifespans can be less than total lifespans\n                 checkState(finishedLifespans.size() <= totalLifespans, format(\"Number of finished lifespans (%s) exceeds number of total lifespans (%s)\", finishedLifespans.size(), totalLifespans));",
      "parent_sha": "1753d68eb75605c4a33f0cce9e417d05c412b01c"
    }
  },
  {
    "oid": "4aaf91c9c7931a7acbd491b5e980d27ba283c552",
    "message": "Fix output type of learn_regressor() function",
    "date": "2014-12-18T23:55:42Z",
    "url": "https://github.com/prestodb/presto/commit/4aaf91c9c7931a7acbd491b5e980d27ba283c552",
    "details": {
      "sha": "c63a00e34e44ee53bce1f5c6a64c334519725a2a",
      "filename": "presto-ml/src/main/java/com/facebook/presto/ml/LearnRegressorAggregation.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/prestodb/presto/blob/4aaf91c9c7931a7acbd491b5e980d27ba283c552/presto-ml%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fml%2FLearnRegressorAggregation.java",
      "raw_url": "https://github.com/prestodb/presto/raw/4aaf91c9c7931a7acbd491b5e980d27ba283c552/presto-ml%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fml%2FLearnRegressorAggregation.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-ml%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fml%2FLearnRegressorAggregation.java?ref=4aaf91c9c7931a7acbd491b5e980d27ba283c552",
      "patch": "@@ -13,7 +13,7 @@\n  */\n package com.facebook.presto.ml;\n \n-import com.facebook.presto.ml.type.ClassifierType;\n+import com.facebook.presto.ml.type.RegressorType;\n import com.facebook.presto.operator.aggregation.AggregationFunction;\n import com.facebook.presto.operator.aggregation.CombineFunction;\n import com.facebook.presto.operator.aggregation.InputFunction;\n@@ -55,7 +55,7 @@ public static void combine(LearnState state, LearnState otherState)\n         throw new UnsupportedOperationException(\"LEARN must run on a single machine\");\n     }\n \n-    @OutputFunction(ClassifierType.NAME)\n+    @OutputFunction(RegressorType.NAME)\n     public static void output(LearnState state, BlockBuilder out)\n     {\n         LearnLibSvmRegressorAggregation.output(state, out);",
      "parent_sha": "0fae711a88f53e7661b5918fee5d8d1857d02a72"
    }
  },
  {
    "oid": "906f97ac47afe4d462cf8ae1b8b84ecbbe1a3169",
    "message": "Fix compilation failure",
    "date": "2018-07-09T17:09:54Z",
    "url": "https://github.com/prestodb/presto/commit/906f97ac47afe4d462cf8ae1b8b84ecbbe1a3169",
    "details": {
      "sha": "872acafe8eaadcf2c3b889e24134a6cd03abf14b",
      "filename": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestPushProjectionThroughExchange.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/prestodb/presto/blob/906f97ac47afe4d462cf8ae1b8b84ecbbe1a3169/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2FTestPushProjectionThroughExchange.java",
      "raw_url": "https://github.com/prestodb/presto/raw/906f97ac47afe4d462cf8ae1b8b84ecbbe1a3169/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2FTestPushProjectionThroughExchange.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Fiterative%2Frule%2FTestPushProjectionThroughExchange.java?ref=906f97ac47afe4d462cf8ae1b8b84ecbbe1a3169",
      "patch": "@@ -164,9 +164,9 @@ public void testOrderingColumnsArePreserved()\n                     OrderingScheme orderingScheme = new OrderingScheme(ImmutableList.of(sortSymbol), ImmutableMap.of(sortSymbol, SortOrder.ASC_NULLS_FIRST));\n                     return p.project(\n                             Assignments.builder()\n-                                    .put(aTimes5, new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.MULTIPLY, new SymbolReference(\"a\"), new LongLiteral(\"5\")))\n-                                    .put(bTimes5, new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.MULTIPLY, new SymbolReference(\"b\"), new LongLiteral(\"5\")))\n-                                    .put(hTimes5, new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.MULTIPLY, new SymbolReference(\"h\"), new LongLiteral(\"5\")))\n+                                    .put(aTimes5, new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Operator.MULTIPLY, new SymbolReference(\"a\"), new LongLiteral(\"5\")))\n+                                    .put(bTimes5, new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Operator.MULTIPLY, new SymbolReference(\"b\"), new LongLiteral(\"5\")))\n+                                    .put(hTimes5, new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Operator.MULTIPLY, new SymbolReference(\"h\"), new LongLiteral(\"5\")))\n                                     .build(),\n                             p.exchange(e -> e\n                                     .addSource(",
      "parent_sha": "50e4bd40365591897566aa667f419093a026710c"
    }
  },
  {
    "oid": "58f19534aba9f3d314d1a3a0c8a7f880d00810c9",
    "message": "Change MaterializeSampleOperator to not use BlockCursors",
    "date": "2014-07-02T20:01:29Z",
    "url": "https://github.com/prestodb/presto/commit/58f19534aba9f3d314d1a3a0c8a7f880d00810c9",
    "details": {
      "sha": "4b81be666647a0bd8caa2f6cee5b26c20b5438a1",
      "filename": "presto-main/src/main/java/com/facebook/presto/operator/MaterializeSampleOperator.java",
      "status": "modified",
      "additions": 26,
      "deletions": 35,
      "changes": 61,
      "blob_url": "https://github.com/prestodb/presto/blob/58f19534aba9f3d314d1a3a0c8a7f880d00810c9/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FMaterializeSampleOperator.java",
      "raw_url": "https://github.com/prestodb/presto/raw/58f19534aba9f3d314d1a3a0c8a7f880d00810c9/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FMaterializeSampleOperator.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FMaterializeSampleOperator.java?ref=58f19534aba9f3d314d1a3a0c8a7f880d00810c9",
      "patch": "@@ -13,7 +13,7 @@\n  */\n package com.facebook.presto.operator;\n \n-import com.facebook.presto.spi.block.BlockCursor;\n+import com.facebook.presto.spi.block.Block;\n import com.facebook.presto.spi.type.Type;\n import com.google.common.collect.ImmutableList;\n import com.google.common.util.concurrent.ListenableFuture;\n@@ -67,8 +67,9 @@ public void close()\n     private final List<Type> types;\n     private final int sampleWeightChannel;\n     private boolean finishing;\n-    private BlockCursor[] cursors;\n-    private BlockCursor sampleWeightCursor;\n+    private int position = -1;\n+    private Block[] blocks;\n+    private Block sampleWeightBlock;\n     private long remainingWeight;\n     private PageBuilder pageBuilder;\n \n@@ -78,7 +79,7 @@ public MaterializeSampleOperator(OperatorContext operatorContext, List<Type> typ\n         this.sampleWeightChannel = sampleWeightChannel;\n         this.types = ImmutableList.copyOf(checkNotNull(types, \"types is null\"));\n         this.pageBuilder = new PageBuilder(types);\n-        this.cursors = new BlockCursor[types.size()];\n+        this.blocks = new Block[types.size()];\n     }\n \n     @Override\n@@ -102,7 +103,7 @@ public void finish()\n     @Override\n     public boolean isFinished()\n     {\n-        return finishing && sampleWeightCursor == null && pageBuilder.isEmpty();\n+        return finishing && sampleWeightBlock == null && pageBuilder.isEmpty();\n     }\n \n     @Override\n@@ -114,7 +115,7 @@ public ListenableFuture<?> isBlocked()\n     @Override\n     public boolean needsInput()\n     {\n-        if (finishing || sampleWeightCursor != null) {\n+        if (finishing || sampleWeightBlock != null) {\n             return false;\n         }\n         return true;\n@@ -125,20 +126,16 @@ public void addInput(Page page)\n     {\n         checkNotNull(page, \"page is null\");\n         checkState(!finishing, \"Operator is finishing\");\n-        checkState(sampleWeightCursor == null, \"Current page has not been completely processed yet\");\n+        checkState(sampleWeightBlock == null, \"Current page has not been completely processed yet\");\n \n-        BlockCursor[] cursors = new BlockCursor[page.getChannelCount()];\n-        for (int i = 0; i < cursors.length; i++) {\n-            cursors[i] = page.getBlock(i).cursor();\n-        }\n-\n-        this.sampleWeightCursor = cursors[sampleWeightChannel];\n+        this.position = -1;\n+        this.sampleWeightBlock = page.getBlock(sampleWeightChannel);\n \n-        for (int i = 0, j = 0; i < cursors.length; i++) {\n+        for (int i = 0, j = 0; i < page.getChannelCount(); i++) {\n             if (i == sampleWeightChannel) {\n                 continue;\n             }\n-            this.cursors[j] = cursors[i];\n+            this.blocks[j] = page.getBlock(i);\n             j++;\n         }\n     }\n@@ -150,29 +147,23 @@ private boolean advance()\n             return true;\n         }\n \n-        if (sampleWeightCursor == null) {\n+        if (sampleWeightBlock == null) {\n             return false;\n         }\n \n-        boolean advanced;\n         // Read rows until we find one that has a non-zero weight\n-        do {\n-            advanced = sampleWeightCursor.advanceNextPosition();\n-            for (BlockCursor cursor : cursors) {\n-                checkState(advanced == cursor.advanceNextPosition());\n+        position++;\n+        while (position < sampleWeightBlock.getPositionCount()) {\n+            checkState(!(sampleWeightBlock.isNull(position)), \"Encountered NULL sample weight\");\n+            if (sampleWeightBlock.getLong(position) != 0) {\n+                remainingWeight = sampleWeightBlock.getLong(position) - 1;\n+                return true;\n             }\n-            checkState(!(advanced && sampleWeightCursor.isNull()), \"Encountered NULL sample weight\");\n-        } while(advanced && sampleWeightCursor.getLong() == 0);\n-\n-        if (!advanced) {\n-            sampleWeightCursor = null;\n-            Arrays.fill(cursors, null);\n+            position++;\n         }\n-        else {\n-            remainingWeight = sampleWeightCursor.getLong() - 1;\n-        }\n-\n-        return advanced;\n+        sampleWeightBlock = null;\n+        Arrays.fill(blocks, null);\n+        return false;\n     }\n \n     @Override\n@@ -182,13 +173,13 @@ public Page getOutput()\n             // We might be outputting empty rows, if $sampleWeight is the only column (such as in a COUNT(*) query)\n             pageBuilder.declarePosition();\n \n-            for (int i = 0; i < cursors.length; i++) {\n-                cursors[i].appendTo(pageBuilder.getBlockBuilder(i));\n+            for (int i = 0; i < blocks.length; i++) {\n+                blocks[i].appendTo(position, pageBuilder.getBlockBuilder(i));\n             }\n         }\n \n         // only flush full pages unless we are done\n-        if (pageBuilder.isFull() || (finishing && !pageBuilder.isEmpty() && sampleWeightCursor == null)) {\n+        if (pageBuilder.isFull() || (finishing && !pageBuilder.isEmpty() && sampleWeightBlock == null)) {\n             Page page = pageBuilder.build();\n             pageBuilder.reset();\n             return page;",
      "parent_sha": "169bef9fc107406bd7b12facccddf22c30bd54ca"
    }
  },
  {
    "oid": "30903da8b33f19f10e1e390b41bfc331d7be8636",
    "message": "Handle test tables not existing",
    "date": "2013-10-03T18:39:01Z",
    "url": "https://github.com/prestodb/presto/commit/30903da8b33f19f10e1e390b41bfc331d7be8636",
    "details": {
      "sha": "e39fa6ca3b89b2469a2d3ab5c98634c66d226789",
      "filename": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java",
      "status": "modified",
      "additions": 23,
      "deletions": 16,
      "changes": 39,
      "blob_url": "https://github.com/prestodb/presto/blob/30903da8b33f19f10e1e390b41bfc331d7be8636/presto-hive%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FAbstractTestHiveClient.java",
      "raw_url": "https://github.com/prestodb/presto/raw/30903da8b33f19f10e1e390b41bfc331d7be8636/presto-hive%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FAbstractTestHiveClient.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FAbstractTestHiveClient.java?ref=30903da8b33f19f10e1e390b41bfc331d7be8636",
      "patch": "@@ -152,7 +152,7 @@ public void testListUnknownSchema()\n     public void testGetPartitions()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(table);\n+        TableHandle tableHandle = getTableHandle(table);\n         List<Partition> partitions = splitManager.getPartitions(tableHandle, ImmutableMap.<ColumnHandle, Object>of());\n         assertExpectedPartitions(partitions);\n     }\n@@ -168,7 +168,7 @@ public void testGetPartitionsException()\n     public void testGetPartitionNames()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(table);\n+        TableHandle tableHandle = getTableHandle(table);\n         List<Partition> partitions = splitManager.getPartitions(tableHandle, ImmutableMap.<ColumnHandle, Object>of());\n         assertExpectedPartitions(partitions);\n     }\n@@ -189,7 +189,7 @@ private void assertExpectedPartitions(List<Partition> partitions)\n     public void testGetPartitionNamesUnpartitioned()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(tableUnpartitioned);\n+        TableHandle tableHandle = getTableHandle(tableUnpartitioned);\n         List<Partition> partitions = splitManager.getPartitions(tableHandle, ImmutableMap.<ColumnHandle, Object>of());\n         assertEquals(partitions.size(), 1);\n         assertEquals(partitions, unpartitionedPartitions);\n@@ -207,7 +207,7 @@ public void testGetPartitionNamesException()\n     public void testGetTableSchema()\n             throws Exception\n     {\n-        TableMetadata tableMetadata = metadata.getTableMetadata(metadata.getTableHandle(table));\n+        TableMetadata tableMetadata = metadata.getTableMetadata(getTableHandle(table));\n         Map<String, ColumnMetadata> map = uniqueIndex(tableMetadata.getColumns(), columnNameGetter());\n \n         int i = 0;\n@@ -233,7 +233,7 @@ public void testGetTableSchema()\n     public void testGetTableSchemaUnpartitioned()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(tableUnpartitioned);\n+        TableHandle tableHandle = getTableHandle(tableUnpartitioned);\n         TableMetadata tableMetadata = metadata.getTableMetadata(tableHandle);\n         Map<String, ColumnMetadata> map = uniqueIndex(tableMetadata.getColumns(), columnNameGetter());\n \n@@ -245,7 +245,7 @@ public void testGetTableSchemaUnpartitioned()\n     public void testGetTableSchemaOffline()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(tableOffline);\n+        TableHandle tableHandle = getTableHandle(tableOffline);\n         TableMetadata tableMetadata = metadata.getTableMetadata(tableHandle);\n         Map<String, ColumnMetadata> map = uniqueIndex(tableMetadata.getColumns(), columnNameGetter());\n \n@@ -256,7 +256,7 @@ public void testGetTableSchemaOffline()\n     public void testGetTableSchemaOfflinePartition()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(tableOfflinePartition);\n+        TableHandle tableHandle = getTableHandle(tableOfflinePartition);\n         TableMetadata tableMetadata = metadata.getTableMetadata(tableHandle);\n         Map<String, ColumnMetadata> map = uniqueIndex(tableMetadata.getColumns(), columnNameGetter());\n \n@@ -274,7 +274,7 @@ public void testGetTableSchemaException()\n     public void testGetPartitionSplitsBatch()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(table);\n+        TableHandle tableHandle = getTableHandle(table);\n         List<Partition> partitions = splitManager.getPartitions(tableHandle, ImmutableMap.<ColumnHandle, Object>of());\n         Iterable<Split> iterator = splitManager.getPartitionSplits(tableHandle, partitions);\n \n@@ -286,7 +286,7 @@ public void testGetPartitionSplitsBatch()\n     public void testGetPartitionSplitsBatchUnpartitioned()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(tableUnpartitioned);\n+        TableHandle tableHandle = getTableHandle(tableUnpartitioned);\n         List<Partition> partitions = splitManager.getPartitions(tableHandle, ImmutableMap.<ColumnHandle, Object>of());\n         Iterable<Split> iterator = splitManager.getPartitionSplits(tableHandle, partitions);\n \n@@ -314,7 +314,7 @@ public void testGetPartitionSplitsEmpty()\n     public void testGetPartitionTableOffline()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(tableOffline);\n+        TableHandle tableHandle = getTableHandle(tableOffline);\n         try {\n             splitManager.getPartitions(tableHandle, ImmutableMap.<ColumnHandle, Object>of());\n             fail(\"expected TableOfflineException\");\n@@ -328,7 +328,7 @@ public void testGetPartitionTableOffline()\n     public void testGetPartitionSplitsTableOfflinePartition()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(tableOfflinePartition);\n+        TableHandle tableHandle = getTableHandle(tableOfflinePartition);\n         assertNotNull(tableHandle);\n \n         ColumnHandle dsColumn = metadata.getColumnHandle(tableHandle, \"ds\");\n@@ -356,7 +356,7 @@ public void testGetPartitionSplitsTableOfflinePartition()\n     public void testGetRecords()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(table);\n+        TableHandle tableHandle = getTableHandle(table);\n         TableMetadata tableMetadata = metadata.getTableMetadata(tableHandle);\n         List<ColumnHandle> columnHandles = ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());\n         Map<String, Integer> columnIndex = indexColumns(columnHandles);\n@@ -475,7 +475,7 @@ public void testGetRecords()\n     public void testGetPartialRecords()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(table);\n+        TableHandle tableHandle = getTableHandle(table);\n         List<ColumnHandle> columnHandles = ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());\n         Map<String, Integer> columnIndex = indexColumns(columnHandles);\n \n@@ -511,7 +511,7 @@ public void testGetPartialRecords()\n     public void testGetRecordsUnpartitioned()\n             throws Exception\n     {\n-        TableHandle tableHandle = metadata.getTableHandle(tableUnpartitioned);\n+        TableHandle tableHandle = getTableHandle(tableUnpartitioned);\n         List<ColumnHandle> columnHandles = ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());\n         Map<String, Integer> columnIndex = indexColumns(columnHandles);\n \n@@ -549,7 +549,7 @@ public void testGetRecordsUnpartitioned()\n     public void testGetRecordsInvalidColumn()\n             throws Exception\n     {\n-        TableHandle table = metadata.getTableHandle(tableUnpartitioned);\n+        TableHandle table = getTableHandle(tableUnpartitioned);\n         List<Partition> partitions = splitManager.getPartitions(table, ImmutableMap.<ColumnHandle, Object>of());\n         Split split = Iterables.getFirst(splitManager.getPartitionSplits(table, partitions), null);\n         RecordSet recordSet = recordSetProvider.getRecordSet(split, ImmutableList.of(invalidColumnHandle));\n@@ -561,14 +561,21 @@ public void testViewsAreNotSupported()\n             throws Exception\n     {\n         try {\n-            metadata.getTableHandle(view);\n+            getTableHandle(view);\n             fail(\"Expected HiveViewNotSupportedException\");\n         }\n         catch (HiveViewNotSupportedException e) {\n             assertEquals(e.getTableName(), view);\n         }\n     }\n \n+    private TableHandle getTableHandle(SchemaTableName tableName)\n+    {\n+        TableHandle handle = metadata.getTableHandle(tableName);\n+        checkArgument(handle != null, \"table not found: %s\", tableName);\n+        return handle;\n+    }\n+\n     private static long getBaseValueForFileType(String fileType)\n     {\n         switch (fileType) {",
      "parent_sha": "c29c1f4cae2ed62fdce723bfa1306dd2c2299c45"
    }
  },
  {
    "oid": "8ba95bbaa301a369a5906f256607ff4b75663d0c",
    "message": "Prevent Relation projections from rewriting themselves in terms of parallel projections",
    "date": "2013-07-01T22:13:39Z",
    "url": "https://github.com/prestodb/presto/commit/8ba95bbaa301a369a5906f256607ff4b75663d0c",
    "details": {
      "sha": "79ad6fabf9ea6aaae7542e0cfb8c590fdeb28d53",
      "filename": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/prestodb/presto/blob/8ba95bbaa301a369a5906f256607ff4b75663d0c/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FRelationPlanner.java",
      "raw_url": "https://github.com/prestodb/presto/raw/8ba95bbaa301a369a5906f256607ff4b75663d0c/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FRelationPlanner.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2FRelationPlanner.java?ref=8ba95bbaa301a369a5906f256607ff4b75663d0c",
      "patch": "@@ -35,6 +35,7 @@\n import com.google.common.collect.Iterables;\n \n import java.util.List;\n+import java.util.Map;\n \n import static com.facebook.presto.sql.analyzer.EquiJoinClause.leftGetter;\n import static com.facebook.presto.sql.analyzer.EquiJoinClause.rightGetter;\n@@ -213,11 +214,16 @@ private PlanBuilder appendProjections(RelationPlan subPlan, Iterable<Expression>\n             projections.put(symbol, expression);\n         }\n \n+        ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n             Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getType(expression));\n \n             projections.put(symbol, translations.rewrite(expression));\n-            translations.put(expression, symbol);\n+            newTranslations.put(symbol, expression);\n+        }\n+        // Now append the new translations into the TranslationMap\n+        for (Map.Entry<Symbol, Expression> entry : newTranslations.build().entrySet()) {\n+            translations.put(entry.getValue(), entry.getKey());\n         }\n \n         return new PlanBuilder(translations, new ProjectNode(idAllocator.getNextId(), subPlan.getRoot(), projections.build()));",
      "parent_sha": "f49d7f57c254c2c89e944595c2154bbb3b2d96e9"
    }
  },
  {
    "oid": "cd41fa58c8975550329bf901378aa2d59079e813",
    "message": "Format comment and modify import style",
    "date": "2020-01-22T20:44:44Z",
    "url": "https://github.com/prestodb/presto/commit/cd41fa58c8975550329bf901378aa2d59079e813",
    "details": {
      "sha": "b1f966f70d3ee0dfaad5a1ef2a44f0e8c1b14481",
      "filename": "presto-elasticsearch/src/main/java/com/facebook/presto/elasticsearch/ElasticsearchQueryBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/prestodb/presto/blob/cd41fa58c8975550329bf901378aa2d59079e813/presto-elasticsearch%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Felasticsearch%2FElasticsearchQueryBuilder.java",
      "raw_url": "https://github.com/prestodb/presto/raw/cd41fa58c8975550329bf901378aa2d59079e813/presto-elasticsearch%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Felasticsearch%2FElasticsearchQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-elasticsearch%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Felasticsearch%2FElasticsearchQueryBuilder.java?ref=cd41fa58c8975550329bf901378aa2d59079e813",
      "patch": "@@ -33,7 +33,6 @@\n import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.RangeQueryBuilder;\n import org.elasticsearch.index.query.TermQueryBuilder;\n-import org.elasticsearch.search.sort.SortOrder;\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n@@ -55,6 +54,7 @@\n import static java.util.Objects.requireNonNull;\n import static java.util.stream.Collectors.toList;\n import static org.elasticsearch.action.search.SearchType.QUERY_THEN_FETCH;\n+import static org.elasticsearch.search.sort.SortOrder.ASC;\n \n public class ElasticsearchQueryBuilder\n {\n@@ -103,17 +103,17 @@ public SearchRequestBuilder buildScrollSearchRequest()\n         List<String> fields = columns.stream()\n                 .map(ElasticsearchColumnHandle::getColumnName)\n                 .collect(toList());\n+        // Scroll requests have optimizations that make them faster when the sort order is _doc.\n+        // If you want to iterate over all documents regardless of the order, this is the most efficient option\n+        // With this settings, the performance can promote several times.\n         SearchRequestBuilder searchRequestBuilder = client.prepareSearch(indices)\n                 .setTypes(type)\n                 .setSearchType(QUERY_THEN_FETCH)\n                 .setScroll(new TimeValue(scrollTimeout.toMillis()))\n                 .setFetchSource(fields.toArray(new String[0]), null)\n                 .setQuery(buildSearchQuery())\n                 .setPreference(\"_shards:\" + shard)\n-                // Scroll requests have optimizations that make them faster when the sort order is _doc.\n-                // If you want to iterate over all documents regardless of the order, this is the most efficient option\n-                // With this settings, the performance can promote several times.\n-                .addSort(\"_doc\", SortOrder.ASC)\n+                .addSort(\"_doc\", ASC)\n                 .setSize(scrollSize);\n         LOG.debug(\"Elasticsearch Request: %s\", searchRequestBuilder);\n         return searchRequestBuilder;",
      "parent_sha": "ab55def6dfa025299e5e7cce6df04f1f7343de09"
    }
  },
  {
    "oid": "b124dbf2f5b6db6ef48fd029f89abdbdb19d9eae",
    "message": "rename variable for clarity",
    "date": "2012-08-22T00:47:01Z",
    "url": "https://github.com/prestodb/presto/commit/b124dbf2f5b6db6ef48fd029f89abdbdb19d9eae",
    "details": {
      "sha": "9e45abd9636ad2b81319f4a144abd981f76661d9",
      "filename": "src/main/java/com/facebook/presto/HashAggregation.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/prestodb/presto/blob/b124dbf2f5b6db6ef48fd029f89abdbdb19d9eae/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2FHashAggregation.java",
      "raw_url": "https://github.com/prestodb/presto/raw/b124dbf2f5b6db6ef48fd029f89abdbdb19d9eae/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2FHashAggregation.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/src%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2FHashAggregation.java?ref=b124dbf2f5b6db6ef48fd029f89abdbdb19d9eae",
      "patch": "@@ -23,15 +23,16 @@ public class HashAggregation\n     private long position;\n     private final TupleInfo tupleInfo;\n \n-    public HashAggregation(TupleInfo tupleInfo, Iterator<RunLengthEncodedBlock> keySource,\n+    public HashAggregation(TupleInfo outputTupleInfo,\n+            Iterator<RunLengthEncodedBlock> keySource,\n             SeekableIterator<ValueBlock> valueSource,\n             Provider<AggregationFunction> functionProvider)\n     {\n         this.groupBySource = keySource;\n         this.aggregationSource = valueSource;\n \n         this.functionProvider = functionProvider;\n-        this.tupleInfo = tupleInfo;\n+        this.tupleInfo = outputTupleInfo;\n     }\n \n     @Override",
      "parent_sha": "290e6222029854a3879fec07251211d682257453"
    }
  },
  {
    "oid": "fbd4cb264767ac9f29c98a59f2174f40fe390f56",
    "message": "Simplify assertions in SHOW TABLES test",
    "date": "2018-08-20T10:49:08Z",
    "url": "https://github.com/prestodb/presto/commit/fbd4cb264767ac9f29c98a59f2174f40fe390f56",
    "details": {
      "sha": "36acebdaf7c960e495b9871658bc5cc6a0fd6582",
      "filename": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java",
      "status": "modified",
      "additions": 2,
      "deletions": 23,
      "changes": 25,
      "blob_url": "https://github.com/prestodb/presto/blob/fbd4cb264767ac9f29c98a59f2174f40fe390f56/presto-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FAbstractTestQueries.java",
      "raw_url": "https://github.com/prestodb/presto/raw/fbd4cb264767ac9f29c98a59f2174f40fe390f56/presto-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FAbstractTestQueries.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-tests%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ftests%2FAbstractTestQueries.java?ref=fbd4cb264767ac9f29c98a59f2174f40fe390f56",
      "patch": "@@ -64,8 +64,6 @@\n import static com.facebook.presto.spi.type.VarcharType.VARCHAR;\n import static com.facebook.presto.spi.type.VarcharType.createVarcharType;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_PARAMETER_USAGE;\n-import static com.facebook.presto.sql.analyzer.SemanticErrorCode.MISSING_CATALOG;\n-import static com.facebook.presto.sql.analyzer.SemanticErrorCode.MISSING_SCHEMA;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.MUST_BE_AGGREGATE_OR_GROUP_BY;\n import static com.facebook.presto.sql.tree.ExplainType.Type.DISTRIBUTED;\n import static com.facebook.presto.sql.tree.ExplainType.Type.IO;\n@@ -4650,27 +4648,8 @@ public void testShowTablesFrom()\n         result = computeActual(\"SHOW TABLES FROM \" + catalog + \".\" + schema);\n         assertTrue(result.getOnlyColumnAsSet().containsAll(expectedTables));\n \n-        try {\n-            computeActual(\"SHOW TABLES FROM UNKNOWN\");\n-            fail(\"Showing tables in an unknown schema should fail\");\n-        }\n-        catch (SemanticException e) {\n-            assertEquals(e.getCode(), MISSING_SCHEMA);\n-        }\n-        catch (RuntimeException e) {\n-            assertEquals(e.getMessage(), \"line 1:1: Schema 'unknown' does not exist\");\n-        }\n-\n-        try {\n-            computeActual(\"SHOW TABLES FROM UNKNOWNCATALOG.UNKNOWNSCHEMA\");\n-            fail(\"Showing tables in an unknown catalog and unknown schema should fail with unknown catalog\");\n-        }\n-        catch (SemanticException e) {\n-            assertEquals(e.getCode(), MISSING_CATALOG);\n-        }\n-        catch (RuntimeException e) {\n-            assertEquals(e.getMessage(), \"line 1:1: Catalog 'unknowncatalog' does not exist\");\n-        }\n+        assertQueryFails(\"SHOW TABLES FROM UNKNOWN\", \"line 1:1: Schema 'unknown' does not exist\");\n+        assertQueryFails(\"SHOW TABLES FROM UNKNOWNCATALOG.UNKNOWNSCHEMA\", \"line 1:1: Catalog 'unknowncatalog' does not exist\");\n     }\n \n     @Test",
      "parent_sha": "656c2fcd3eddb27dde890ce28eb371333bd0ce25"
    }
  },
  {
    "oid": "eae4696aa220cf5297bc711b85661ded5c75f0c9",
    "message": "[Iceberg]Fix flaky caused by rename view test",
    "date": "2024-12-21T03:47:53Z",
    "url": "https://github.com/prestodb/presto/commit/eae4696aa220cf5297bc711b85661ded5c75f0c9",
    "details": {
      "sha": "0c7cb8e8b324c9e69c61fcc99106c7aad116d182",
      "filename": "presto-iceberg/src/test/java/com/facebook/presto/iceberg/TestIcebergMetadataListing.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/prestodb/presto/blob/eae4696aa220cf5297bc711b85661ded5c75f0c9/presto-iceberg%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ficeberg%2FTestIcebergMetadataListing.java",
      "raw_url": "https://github.com/prestodb/presto/raw/eae4696aa220cf5297bc711b85661ded5c75f0c9/presto-iceberg%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ficeberg%2FTestIcebergMetadataListing.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-iceberg%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Ficeberg%2FTestIcebergMetadataListing.java?ref=eae4696aa220cf5297bc711b85661ded5c75f0c9",
      "patch": "@@ -157,16 +157,18 @@ public void testTableValidation()\n     @Test\n     public void testRenameView()\n     {\n-        assertQuerySucceeds(\"CREATE TABLE iceberg.test_schema.iceberg_test_table (_string VARCHAR, _integer INTEGER)\");\n-        assertUpdate(\"CREATE VIEW iceberg.test_schema.test_view_to_be_renamed AS SELECT * FROM iceberg.test_schema.iceberg_test_table\");\n-        assertUpdate(\"ALTER VIEW IF EXISTS iceberg.test_schema.test_view_to_be_renamed RENAME TO iceberg.test_schema.test_view_renamed\");\n-        assertUpdate(\"CREATE VIEW iceberg.test_schema.test_view2_to_be_renamed AS SELECT * FROM iceberg.test_schema.iceberg_test_table\");\n-        assertUpdate(\"ALTER VIEW iceberg.test_schema.test_view2_to_be_renamed RENAME TO iceberg.test_schema.test_view2_renamed\");\n-        assertQuerySucceeds(\"SELECT * FROM iceberg.test_schema.test_view_renamed\");\n-        assertQuerySucceeds(\"SELECT * FROM iceberg.test_schema.test_view2_renamed\");\n-        assertUpdate(\"DROP VIEW iceberg.test_schema.test_view_renamed\");\n-        assertUpdate(\"DROP VIEW iceberg.test_schema.test_view2_renamed\");\n-        assertUpdate(\"DROP TABLE iceberg.test_schema.iceberg_test_table\");\n+        assertQuerySucceeds(\"CREATE SCHEMA iceberg.test_rename_view_schema\");\n+        assertQuerySucceeds(\"CREATE TABLE iceberg.test_rename_view_schema.iceberg_test_table (_string VARCHAR, _integer INTEGER)\");\n+        assertUpdate(\"CREATE VIEW iceberg.test_rename_view_schema.test_view_to_be_renamed AS SELECT * FROM iceberg.test_rename_view_schema.iceberg_test_table\");\n+        assertUpdate(\"ALTER VIEW IF EXISTS iceberg.test_rename_view_schema.test_view_to_be_renamed RENAME TO iceberg.test_rename_view_schema.test_view_renamed\");\n+        assertUpdate(\"CREATE VIEW iceberg.test_rename_view_schema.test_view2_to_be_renamed AS SELECT * FROM iceberg.test_rename_view_schema.iceberg_test_table\");\n+        assertUpdate(\"ALTER VIEW iceberg.test_rename_view_schema.test_view2_to_be_renamed RENAME TO iceberg.test_rename_view_schema.test_view2_renamed\");\n+        assertQuerySucceeds(\"SELECT * FROM iceberg.test_rename_view_schema.test_view_renamed\");\n+        assertQuerySucceeds(\"SELECT * FROM iceberg.test_rename_view_schema.test_view2_renamed\");\n+        assertUpdate(\"DROP VIEW iceberg.test_rename_view_schema.test_view_renamed\");\n+        assertUpdate(\"DROP VIEW iceberg.test_rename_view_schema.test_view2_renamed\");\n+        assertUpdate(\"DROP TABLE iceberg.test_rename_view_schema.iceberg_test_table\");\n+        assertQuerySucceeds(\"DROP SCHEMA IF EXISTS iceberg.test_rename_view_schema\");\n     }\n     @Test\n     public void testRenameViewIfNotExists()",
      "parent_sha": "737f5e17681a8cac07702901171e44406ccfc123"
    }
  },
  {
    "oid": "97db27216ffdd91da8549b87fe3a5e01d6d20e0b",
    "message": "Stop DiscoveryNodeManager in tests",
    "date": "2019-02-04T23:54:29Z",
    "url": "https://github.com/prestodb/presto/commit/97db27216ffdd91da8549b87fe3a5e01d6d20e0b",
    "details": {
      "sha": "a61c20b0af99f1cc5ad73ae4cf81593a14cf5e5f",
      "filename": "presto-main/src/test/java/com/facebook/presto/metadata/TestDiscoveryNodeManager.java",
      "status": "modified",
      "additions": 33,
      "deletions": 19,
      "changes": 52,
      "blob_url": "https://github.com/prestodb/presto/blob/97db27216ffdd91da8549b87fe3a5e01d6d20e0b/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTestDiscoveryNodeManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/97db27216ffdd91da8549b87fe3a5e01d6d20e0b/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTestDiscoveryNodeManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fmetadata%2FTestDiscoveryNodeManager.java?ref=97db27216ffdd91da8549b87fe3a5e01d6d20e0b",
      "patch": "@@ -91,29 +91,34 @@ public void setup()\n     public void testGetAllNodes()\n     {\n         DiscoveryNodeManager manager = new DiscoveryNodeManager(selector, nodeInfo, new NoOpFailureDetector(), expectedVersion, testHttpClient, internalCommunicationConfig);\n-        AllNodes allNodes = manager.getAllNodes();\n+        try {\n+            AllNodes allNodes = manager.getAllNodes();\n \n-        Set<Node> activeNodes = allNodes.getActiveNodes();\n-        assertEqualsIgnoreOrder(activeNodes, this.activeNodes);\n+            Set<Node> activeNodes = allNodes.getActiveNodes();\n+            assertEqualsIgnoreOrder(activeNodes, this.activeNodes);\n \n-        for (Node actual : activeNodes) {\n-            for (Node expected : this.activeNodes) {\n-                assertNotSame(actual, expected);\n+            for (Node actual : activeNodes) {\n+                for (Node expected : this.activeNodes) {\n+                    assertNotSame(actual, expected);\n+                }\n             }\n-        }\n \n-        assertEqualsIgnoreOrder(activeNodes, manager.getNodes(ACTIVE));\n+            assertEqualsIgnoreOrder(activeNodes, manager.getNodes(ACTIVE));\n \n-        Set<Node> inactiveNodes = allNodes.getInactiveNodes();\n-        assertEqualsIgnoreOrder(inactiveNodes, this.inactiveNodes);\n+            Set<Node> inactiveNodes = allNodes.getInactiveNodes();\n+            assertEqualsIgnoreOrder(inactiveNodes, this.inactiveNodes);\n \n-        for (Node actual : inactiveNodes) {\n-            for (Node expected : this.inactiveNodes) {\n-                assertNotSame(actual, expected);\n+            for (Node actual : inactiveNodes) {\n+                for (Node expected : this.inactiveNodes) {\n+                    assertNotSame(actual, expected);\n+                }\n             }\n-        }\n \n-        assertEqualsIgnoreOrder(inactiveNodes, manager.getNodes(INACTIVE));\n+            assertEqualsIgnoreOrder(inactiveNodes, manager.getNodes(INACTIVE));\n+        }\n+        finally {\n+            manager.stop();\n+        }\n     }\n \n     @Test\n@@ -126,15 +131,24 @@ public void testGetCurrentNode()\n                 .setNodeId(expected.getNodeIdentifier()));\n \n         DiscoveryNodeManager manager = new DiscoveryNodeManager(selector, nodeInfo, new NoOpFailureDetector(), expectedVersion, testHttpClient, internalCommunicationConfig);\n-\n-        assertEquals(manager.getCurrentNode(), expected);\n+        try {\n+            assertEquals(manager.getCurrentNode(), expected);\n+        }\n+        finally {\n+            manager.stop();\n+        }\n     }\n \n     @Test\n     public void testGetCoordinators()\n     {\n-        InternalNodeManager manager = new DiscoveryNodeManager(selector, nodeInfo, new NoOpFailureDetector(), expectedVersion, testHttpClient, internalCommunicationConfig);\n-        assertEquals(manager.getCoordinators(), ImmutableSet.of(coordinator));\n+        DiscoveryNodeManager manager = new DiscoveryNodeManager(selector, nodeInfo, new NoOpFailureDetector(), expectedVersion, testHttpClient, internalCommunicationConfig);\n+        try {\n+            assertEquals(manager.getCoordinators(), ImmutableSet.of(coordinator));\n+        }\n+        finally {\n+            manager.stop();\n+        }\n     }\n \n     @SuppressWarnings(\"ResultOfObjectAllocationIgnored\")",
      "parent_sha": "1a51c839b0e761e532cec6f698a1cf92f52deb9d"
    }
  },
  {
    "oid": "e01182a4860800eaeca4a4371c2fbdd79a26ee83",
    "message": "Cleanup AddExchanges\n\n - remove explicit generic type where it is not needed\n - limit number of parameters in Rewriter constructor",
    "date": "2016-06-20T19:43:32Z",
    "url": "https://github.com/prestodb/presto/commit/e01182a4860800eaeca4a4371c2fbdd79a26ee83",
    "details": {
      "sha": "f9c62657d0d2616db5789f7e908300893b202e80",
      "filename": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java",
      "status": "modified",
      "additions": 14,
      "deletions": 18,
      "changes": 32,
      "blob_url": "https://github.com/prestodb/presto/blob/e01182a4860800eaeca4a4371c2fbdd79a26ee83/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FAddExchanges.java",
      "raw_url": "https://github.com/prestodb/presto/raw/e01182a4860800eaeca4a4371c2fbdd79a26ee83/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FAddExchanges.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FAddExchanges.java?ref=e01182a4860800eaeca4a4371c2fbdd79a26ee83",
      "patch": "@@ -145,11 +145,7 @@ public AddExchanges(Metadata metadata, SqlParser parser)\n     @Override\n     public PlanNode optimize(PlanNode plan, Session session, Map<Symbol, Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)\n     {\n-        boolean distributedJoinEnabled = SystemSessionProperties.isDistributedJoinEnabled(session);\n-        boolean distributedIndexJoinEnabled = SystemSessionProperties.isDistributedIndexJoinEnabled(session);\n-        boolean redistributeWrites = SystemSessionProperties.isRedistributeWrites(session);\n-        boolean preferStreamingOperators = SystemSessionProperties.preferStreamingOperators(session);\n-        PlanWithProperties result = plan.accept(new Rewriter(symbolAllocator, idAllocator, symbolAllocator, session, distributedIndexJoinEnabled, distributedJoinEnabled, preferStreamingOperators, redistributeWrites), new Context(PreferredProperties.any(), false));\n+        PlanWithProperties result = plan.accept(new Rewriter(symbolAllocator, idAllocator, symbolAllocator, session), new Context(PreferredProperties.any(), false));\n         return result.getNode();\n     }\n \n@@ -199,16 +195,16 @@ private class Rewriter\n         private final boolean preferStreamingOperators;\n         private final boolean redistributeWrites;\n \n-        public Rewriter(SymbolAllocator allocator, PlanNodeIdAllocator idAllocator, SymbolAllocator symbolAllocator, Session session, boolean distributedIndexJoins, boolean distributedJoins, boolean preferStreamingOperators, boolean redistributeWrites)\n+        public Rewriter(SymbolAllocator allocator, PlanNodeIdAllocator idAllocator, SymbolAllocator symbolAllocator, Session session)\n         {\n             this.allocator = allocator;\n             this.idAllocator = idAllocator;\n             this.symbolAllocator = symbolAllocator;\n             this.session = session;\n-            this.distributedIndexJoins = distributedIndexJoins;\n-            this.distributedJoins = distributedJoins;\n-            this.preferStreamingOperators = preferStreamingOperators;\n-            this.redistributeWrites = redistributeWrites;\n+            this.distributedJoins = SystemSessionProperties.isDistributedJoinEnabled(session);\n+            this.distributedIndexJoins = SystemSessionProperties.isDistributedIndexJoinEnabled(session);\n+            this.redistributeWrites = SystemSessionProperties.isRedistributeWrites(session);\n+            this.preferStreamingOperators = SystemSessionProperties.preferStreamingOperators(session);\n         }\n \n         @Override\n@@ -841,10 +837,10 @@ public PlanWithProperties visitJoin(JoinNode node, Context context)\n                     }\n                     else {\n                         left = withDerivedProperties(\n-                                partitionedExchange(idAllocator.getNextId(), REMOTE, left.getNode(), leftSymbols, Optional.<Symbol>empty()),\n+                                partitionedExchange(idAllocator.getNextId(), REMOTE, left.getNode(), leftSymbols, Optional.empty()),\n                                 left.getProperties());\n                         right = withDerivedProperties(\n-                                partitionedExchange(idAllocator.getNextId(), REMOTE, right.getNode(), rightSymbols, Optional.<Symbol>empty()),\n+                                partitionedExchange(idAllocator.getNextId(), REMOTE, right.getNode(), rightSymbols, Optional.empty()),\n                                 right.getProperties());\n                     }\n                 }\n@@ -923,9 +919,9 @@ public PlanWithProperties visitSemiJoin(SemiJoinNode node, Context context)\n                                 partitionedExchange(idAllocator.getNextId(), REMOTE, filteringSource.getNode(), new PartitioningScheme(\n                                         filteringPartitioning,\n                                         filteringSource.getNode().getOutputSymbols(),\n-                                        Optional.<Symbol>empty(),\n+                                        Optional.empty(),\n                                         true,\n-                                        Optional.<int[]>empty())),\n+                                        Optional.empty())),\n                                 filteringSource.getProperties());\n                     }\n                 }\n@@ -940,10 +936,10 @@ public PlanWithProperties visitSemiJoin(SemiJoinNode node, Context context)\n                     }\n                     else {\n                         source = withDerivedProperties(\n-                                partitionedExchange(idAllocator.getNextId(), REMOTE, source.getNode(), sourceSymbols, Optional.<Symbol>empty()),\n+                                partitionedExchange(idAllocator.getNextId(), REMOTE, source.getNode(), sourceSymbols, Optional.empty()),\n                                 source.getProperties());\n                         filteringSource = withDerivedProperties(\n-                                partitionedExchange(idAllocator.getNextId(), REMOTE, filteringSource.getNode(), filteringSourceSymbols, Optional.<Symbol>empty(), true),\n+                                partitionedExchange(idAllocator.getNextId(), REMOTE, filteringSource.getNode(), filteringSourceSymbols, Optional.empty(), true),\n                                 filteringSource.getProperties());\n                     }\n                 }\n@@ -1121,9 +1117,9 @@ public PlanWithProperties visitUnion(UnionNode node, Context context)\n                                         new PartitioningScheme(\n                                                 childPartitioning,\n                                                 source.getNode().getOutputSymbols(),\n-                                                Optional.<Symbol>empty(),\n+                                                Optional.empty(),\n                                                 nullsReplicated,\n-                                                Optional.<int[]>empty())),\n+                                                Optional.empty())),\n                                 source.getProperties());\n                     }\n                     partitionedSources.add(source.getNode());",
      "parent_sha": "c54cc51f022dcabbce58589afdbdba441df45e0c"
    }
  },
  {
    "oid": "a98f4ab633b01afeadba179e58017ad166217164",
    "message": "Fix bug in CTAS when temporary directory is not used\n\nWhen writing to a new table in Hive connector, it asserts that the target\ndirectory doesn't already exist for every partition (or once in the case of\nunpartitioned table), which is doomed to fail when a temporary directory is not\nused. This check is now removed when it is detected that temporary directory is\nnot used.",
    "date": "2016-02-22T20:26:53Z",
    "url": "https://github.com/prestodb/presto/commit/a98f4ab633b01afeadba179e58017ad166217164",
    "details": {
      "sha": "a8096bbe6e14ed22255485c9ced8972cdcdfbed3",
      "filename": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/prestodb/presto/blob/a98f4ab633b01afeadba179e58017ad166217164/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHivePageSink.java",
      "raw_url": "https://github.com/prestodb/presto/raw/a98f4ab633b01afeadba179e58017ad166217164/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHivePageSink.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fhive%2FHivePageSink.java?ref=a98f4ab633b01afeadba179e58017ad166217164",
      "patch": "@@ -324,8 +324,9 @@ private HiveRecordWriter createWriter(List<Object> partitionRow)\n                 target = locationService.targetPath(locationHandle, partitionName);\n                 write = locationService.writePath(locationHandle, partitionName).get();\n \n-                if (partitionName.isPresent()) {\n-                    // verify the target directory for the partition does not already exist\n+                if (partitionName.isPresent() && !target.equals(write)) {\n+                    // When target path is different from write path,\n+                    // verify that the target directory for the partition does not already exist\n                     if (HiveWriteUtils.pathExists(hdfsEnvironment, target)) {\n                         throw new PrestoException(HIVE_PATH_ALREADY_EXISTS, format(\"Target directory for new partition '%s' of table '%s.%s' already exists: %s\",\n                                 partitionName,",
      "parent_sha": "f3a49bc698216b2eb28b0d24dddf9fbad398d03c"
    }
  },
  {
    "oid": "4da2d9193e2e7a68f6477526e4173fccc108dc5a",
    "message": "Redirects from root include host name",
    "date": "2018-10-17T20:45:23Z",
    "url": "https://github.com/prestodb/presto/commit/4da2d9193e2e7a68f6477526e4173fccc108dc5a",
    "details": {
      "sha": "66cd0f7c060472d04aad3a68025aea94667bdcb3",
      "filename": "presto-main/src/main/java/com/facebook/presto/server/WebUiResource.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/prestodb/presto/blob/4da2d9193e2e7a68f6477526e4173fccc108dc5a/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FWebUiResource.java",
      "raw_url": "https://github.com/prestodb/presto/raw/4da2d9193e2e7a68f6477526e4173fccc108dc5a/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FWebUiResource.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fserver%2FWebUiResource.java?ref=4da2d9193e2e7a68f6477526e4173fccc108dc5a",
      "patch": "@@ -23,7 +23,6 @@\n import static com.google.common.base.Strings.isNullOrEmpty;\n import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n import static javax.ws.rs.core.Response.Status.MOVED_PERMANENTLY;\n-import static javax.ws.rs.core.UriBuilder.fromPath;\n \n @Path(\"/\")\n public class WebUiResource\n@@ -38,7 +37,7 @@ public Response redirectIndexHtml(\n         }\n \n         return Response.status(MOVED_PERMANENTLY)\n-                .location(fromPath(\"/ui/\").scheme(proto).build())\n+                .location(uriInfo.getRequestUriBuilder().scheme(proto).path(\"/ui/\").build())\n                 .build();\n     }\n }",
      "parent_sha": "94627f1b97d047c10fd3b5d678d37ad629e090d3"
    }
  },
  {
    "oid": "6ba22a7ffbf0647d60135674353df51a10c2b7a0",
    "message": "Refactor OperatorContext::reserveMemory",
    "date": "2017-08-10T06:21:16Z",
    "url": "https://github.com/prestodb/presto/commit/6ba22a7ffbf0647d60135674353df51a10c2b7a0",
    "details": {
      "sha": "3d15d0286c55406bd11e6730e66927c65617c700",
      "filename": "presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/prestodb/presto/blob/6ba22a7ffbf0647d60135674353df51a10c2b7a0/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FOperatorContext.java",
      "raw_url": "https://github.com/prestodb/presto/raw/6ba22a7ffbf0647d60135674353df51a10c2b7a0/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FOperatorContext.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2FOperatorContext.java?ref=6ba22a7ffbf0647d60135674353df51a10c2b7a0",
      "patch": "@@ -219,23 +219,28 @@ public ListenableFuture<?> isWaitingForMemory()\n \n     public void reserveMemory(long bytes)\n     {\n-        ListenableFuture<?> future = driverContext.reserveMemory(bytes);\n-        if (!future.isDone()) {\n-            SettableFuture<?> currentMemoryFuture = memoryFuture.get();\n+        updateMemoryFuture(driverContext.reserveMemory(bytes), memoryFuture);\n+        memoryReservation.addAndGet(bytes);\n+    }\n+\n+    private static void updateMemoryFuture(ListenableFuture<?> memoryPoolFuture, AtomicReference<SettableFuture<?>> targetFutureReference)\n+    {\n+        if (!memoryPoolFuture.isDone()) {\n+            SettableFuture<?> currentMemoryFuture = targetFutureReference.get();\n             while (currentMemoryFuture.isDone()) {\n                 SettableFuture<?> settableFuture = SettableFuture.create();\n                 // We can't replace one that's not done, because the task may be blocked on that future\n-                if (memoryFuture.compareAndSet(currentMemoryFuture, settableFuture)) {\n+                if (targetFutureReference.compareAndSet(currentMemoryFuture, settableFuture)) {\n                     currentMemoryFuture = settableFuture;\n                 }\n                 else {\n-                    currentMemoryFuture = memoryFuture.get();\n+                    currentMemoryFuture = targetFutureReference.get();\n                 }\n             }\n \n             SettableFuture<?> finalMemoryFuture = currentMemoryFuture;\n             // Create a new future, so that this operator can un-block before the pool does, if it's moved to a new pool\n-            Futures.addCallback(future, new FutureCallback<Object>()\n+            Futures.addCallback(memoryPoolFuture, new FutureCallback<Object>()\n             {\n                 @Override\n                 public void onSuccess(Object result)\n@@ -250,7 +255,6 @@ public void onFailure(Throwable t)\n                 }\n             });\n         }\n-        memoryReservation.addAndGet(bytes);\n     }\n \n     public void freeMemory(long bytes)",
      "parent_sha": "add2f98cdee402341c2818bca98daabc65032fc5"
    }
  },
  {
    "oid": "db5a7de3ca8c33d19ee14c4d1b6e6f5d9fc9ee34",
    "message": "Add simplistic unique count to stats collector\n\nNOTE: we should consider replacing this with a better implementation down the line",
    "date": "2012-10-24T19:24:49Z",
    "url": "https://github.com/prestodb/presto/commit/db5a7de3ca8c33d19ee14c4d1b6e6f5d9fc9ee34",
    "details": {
      "sha": "759983e262b35cb4ff4a338fafb48295c529765b",
      "filename": "presto-main/src/main/java/com/facebook/presto/operator/tap/StatsTupleValueSink.java",
      "status": "modified",
      "additions": 27,
      "deletions": 6,
      "changes": 33,
      "blob_url": "https://github.com/prestodb/presto/blob/db5a7de3ca8c33d19ee14c4d1b6e6f5d9fc9ee34/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Ftap%2FStatsTupleValueSink.java",
      "raw_url": "https://github.com/prestodb/presto/raw/db5a7de3ca8c33d19ee14c4d1b6e6f5d9fc9ee34/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Ftap%2FStatsTupleValueSink.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Foperator%2Ftap%2FStatsTupleValueSink.java?ref=db5a7de3ca8c33d19ee14c4d1b6e6f5d9fc9ee34",
      "patch": "@@ -6,17 +6,23 @@\n import com.facebook.presto.slice.SliceInput;\n import com.facebook.presto.slice.SliceOutput;\n \n+import java.util.HashSet;\n+import java.util.Set;\n+\n import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.base.Preconditions.checkState;\n \n public class StatsTupleValueSink\n         implements TupleValueSink\n {\n+    private static final int MAX_UNIQUE_COUNT = 1000;\n+\n     private long rowCount;\n     private long runsCount;\n     private Tuple lastTuple;\n     private long minPosition = Long.MAX_VALUE;\n     private long maxPosition = -1;\n+    private final Set<Tuple> set = new HashSet<>(MAX_UNIQUE_COUNT);\n     private boolean finished = false;\n \n     @Override\n@@ -26,10 +32,16 @@ public void process(TupleStreamPosition tupleStreamPosition)\n         checkState(!finished, \"already finished\");\n         if (lastTuple == null) {\n             lastTuple = tupleStreamPosition.getTuple();\n+            if (set.size() < MAX_UNIQUE_COUNT) {\n+                set.add(lastTuple);\n+            }\n         }\n         else if (!tupleStreamPosition.currentTupleEquals(lastTuple)) {\n             runsCount++;\n             lastTuple = tupleStreamPosition.getTuple();\n+            if (set.size() < MAX_UNIQUE_COUNT) {\n+                set.add(lastTuple);\n+            }\n         }\n         minPosition = Math.min(minPosition, tupleStreamPosition.getPosition());\n         maxPosition = Math.max(maxPosition, tupleStreamPosition.getCurrentValueEndPosition());\n@@ -44,7 +56,7 @@ public void finished()\n \n     public Stats getStats()\n     {\n-        return new Stats(rowCount, runsCount + 1, minPosition, maxPosition, rowCount / (runsCount + 1));\n+        return new Stats(rowCount, runsCount + 1, minPosition, maxPosition, rowCount / (runsCount + 1), (set.size() == MAX_UNIQUE_COUNT) ? Integer.MAX_VALUE : set.size());\n     }\n \n     public static class Stats\n@@ -54,26 +66,29 @@ public static class Stats\n         private final long minPosition;\n         private final long maxPosition;\n         private final long avgRunLength;\n+        private final int uniqueCount;\n \n-        public Stats(long rowCount, long runsCount, long minPosition, long maxPosition, long avgRunLength)\n+        public Stats(long rowCount, long runsCount, long minPosition, long maxPosition, long avgRunLength, int uniqueCount)\n         {\n             this.rowCount = rowCount;\n             this.runsCount = runsCount;\n             this.minPosition = minPosition;\n             this.maxPosition = maxPosition;\n             this.avgRunLength = avgRunLength;\n+            this.uniqueCount = uniqueCount;\n         }\n-        \n+\n         public static void serialize(Stats stats, SliceOutput sliceOutput)\n         {\n             // TODO: add a better way of serializing the stats that is less fragile\n             sliceOutput.appendLong(stats.getRowCount())\n                     .appendLong(stats.getRunsCount())\n                     .appendLong(stats.getMinPosition())\n                     .appendLong(stats.getMaxPosition())\n-                    .appendLong(stats.getAvgRunLength());\n+                    .appendLong(stats.getAvgRunLength())\n+                    .appendInt(stats.getUniqueCount());\n         }\n-        \n+\n         public static Stats deserialize(Slice slice)\n         {\n             SliceInput input = slice.input();\n@@ -82,7 +97,8 @@ public static Stats deserialize(Slice slice)\n             long minPosition = input.readLong();\n             long maxPosition = input.readLong();\n             long avgRunLength = input.readLong();\n-            return new Stats(rowCount, runsCount, minPosition, maxPosition, avgRunLength);\n+            int uniqueCount = input.readInt();\n+            return new Stats(rowCount, runsCount, minPosition, maxPosition, avgRunLength, uniqueCount);\n         }\n \n         public long getRowCount()\n@@ -109,5 +125,10 @@ public long getAvgRunLength()\n         {\n             return avgRunLength;\n         }\n+\n+        public int getUniqueCount()\n+        {\n+            return uniqueCount;\n+        }\n     }\n }",
      "parent_sha": "c055e38d79a4276af609bb0245d3a3a0c0b92d13"
    }
  },
  {
    "oid": "9a68bed81d817d114d72b2c9af76262cf7e09851",
    "message": "Propagate single and coordinator partitionings through local exchange",
    "date": "2018-03-28T13:48:20Z",
    "url": "https://github.com/prestodb/presto/commit/9a68bed81d817d114d72b2c9af76262cf7e09851",
    "details": {
      "sha": "a4cba7957a75d0aac142bcee1a40112f761bef05",
      "filename": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PropertyDerivations.java",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/prestodb/presto/blob/9a68bed81d817d114d72b2c9af76262cf7e09851/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FPropertyDerivations.java",
      "raw_url": "https://github.com/prestodb/presto/raw/9a68bed81d817d114d72b2c9af76262cf7e09851/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FPropertyDerivations.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fsql%2Fplanner%2Foptimizations%2FPropertyDerivations.java?ref=9a68bed81d817d114d72b2c9af76262cf7e09851",
      "patch": "@@ -477,14 +477,24 @@ public ActualProperties visitExchange(ExchangeNode node, List<ActualProperties>\n                     .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));\n \n             // Local exchanges are only created in AddLocalExchanges, at the end of optimization, and\n-            // local exchanges do not produce global properties as represented by ActualProperties.\n+            // local exchanges do not produce all global properties as represented by ActualProperties.\n             // This is acceptable because AddLocalExchanges does not use global properties and is only\n             // interested in the local properties.\n+            // However, for the purpose of validation, some global properties (single-node vs distributed)\n+            // are computed for local exchanges.\n             // TODO: implement full properties for local exchanges\n             if (node.getScope() == LOCAL) {\n-                return ActualProperties.builder()\n-                        .constants(constants)\n-                        .build();\n+                ActualProperties.Builder builder = ActualProperties.builder();\n+                builder.constants(constants);\n+\n+                if (inputProperties.stream().anyMatch(ActualProperties::isCoordinatorOnly)) {\n+                    builder.global(coordinatorSingleStreamPartition());\n+                }\n+                else if (inputProperties.stream().anyMatch(ActualProperties::isSingleNode)) {\n+                    builder.global(coordinatorSingleStreamPartition());\n+                }\n+\n+                return builder.build();\n             }\n \n             switch (node.getType()) {",
      "parent_sha": "3d5df12a2fd683a88d058e2513122d79c2b7ada5"
    }
  },
  {
    "oid": "45f4ec05141d1826fd920aedef2447aa7ef7e86f",
    "message": "Try to assign buckets for all nodes before failing",
    "date": "2018-05-10T04:50:07Z",
    "url": "https://github.com/prestodb/presto/commit/45f4ec05141d1826fd920aedef2447aa7ef7e86f",
    "details": {
      "sha": "adb155177d98589e30a9078ce5beb18b0505a204",
      "filename": "presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/DatabaseShardManager.java",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/prestodb/presto/blob/45f4ec05141d1826fd920aedef2447aa7ef7e86f/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fmetadata%2FDatabaseShardManager.java",
      "raw_url": "https://github.com/prestodb/presto/raw/45f4ec05141d1826fd920aedef2447aa7ef7e86f/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fmetadata%2FDatabaseShardManager.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-raptor%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fraptor%2Fmetadata%2FDatabaseShardManager.java?ref=45f4ec05141d1826fd920aedef2447aa7ef7e86f",
      "patch": "@@ -694,6 +694,8 @@ private Map<Integer, String> loadBucketAssignments(long distributionId)\n         Iterator<String> nodeIterator = cyclingShuffledIterator(nodeIds);\n \n         ImmutableMap.Builder<Integer, String> assignments = ImmutableMap.builder();\n+        PrestoException limiterException = null;\n+        Set<String> offlineNodes = new HashSet<>();\n \n         for (BucketNode bucketNode : getBuckets(distributionId)) {\n             int bucket = bucketNode.getBucketNumber();\n@@ -703,7 +705,18 @@ private Map<Integer, String> loadBucketAssignments(long distributionId)\n                 if (nanosSince(startTime).compareTo(startupGracePeriod) < 0) {\n                     throw new PrestoException(SERVER_STARTING_UP, \"Cannot reassign buckets while server is starting\");\n                 }\n-                assignmentLimiter.checkAssignFrom(nodeId);\n+\n+                try {\n+                    if (offlineNodes.add(nodeId)) {\n+                        assignmentLimiter.checkAssignFrom(nodeId);\n+                    }\n+                }\n+                catch (PrestoException e) {\n+                    if (limiterException == null) {\n+                        limiterException = e;\n+                    }\n+                    continue;\n+                }\n \n                 String oldNodeId = nodeId;\n                 // TODO: use smarter system to choose replacement node\n@@ -715,6 +728,10 @@ private Map<Integer, String> loadBucketAssignments(long distributionId)\n             assignments.put(bucket, nodeId);\n         }\n \n+        if (limiterException != null) {\n+            throw limiterException;\n+        }\n+\n         return assignments.build();\n     }\n ",
      "parent_sha": "509048d7b1aed53fba1dc010ab13bae1ca4b944a"
    }
  },
  {
    "oid": "1f1151c0853fb6bc70972c0f04a8a27d120638cf",
    "message": "Fix warnings in TestSqlStageExecution",
    "date": "2015-03-31T23:51:51Z",
    "url": "https://github.com/prestodb/presto/commit/1f1151c0853fb6bc70972c0f04a8a27d120638cf",
    "details": {
      "sha": "2afc620005d3a635c978dd94812a16def2dda38a",
      "filename": "presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java",
      "status": "modified",
      "additions": 11,
      "deletions": 33,
      "changes": 44,
      "blob_url": "https://github.com/prestodb/presto/blob/1f1151c0853fb6bc70972c0f04a8a27d120638cf/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FTestSqlStageExecution.java",
      "raw_url": "https://github.com/prestodb/presto/raw/1f1151c0853fb6bc70972c0f04a8a27d120638cf/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FTestSqlStageExecution.java",
      "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fpresto%2Fexecution%2FTestSqlStageExecution.java?ref=1f1151c0853fb6bc70972c0f04a8a27d120638cf",
      "patch": "@@ -116,13 +116,7 @@ public void setUp()\n         nodeTaskMap = new NodeTaskMap();\n         nodeScheduler = new NodeScheduler(nodeManager, nodeSchedulerConfig, nodeTaskMap);\n         locationFactory = new MockLocationFactory();\n-        splitFactory = new Supplier<ConnectorSplit>() {\n-            @Override\n-            public ConnectorSplit get()\n-            {\n-                return TestingSplit.createLocalSplit();\n-            }\n-        };\n+        splitFactory = TestingSplit::createLocalSplit;\n     }\n \n     @Test(expectedExceptions = ExecutionException.class, expectedExceptionsMessageRegExp = \".*No nodes available to run query\")\n@@ -133,15 +127,9 @@ public void testExcludeCoordinator()\n         NodeScheduler nodeScheduler = new NodeScheduler(nodeManager, new NodeSchedulerConfig().setIncludeCoordinator(false), nodeTaskMap);\n \n         // Start sql stage execution\n-        StageExecutionPlan tableScanPlan = createTableScanPlan(\"test\", 20, new Supplier<ConnectorSplit>() {\n-            @Override\n-            public ConnectorSplit get()\n-            {\n-                return TestingSplit.createEmptySplit();\n-            }\n-        });\n+        StageExecutionPlan tableScanPlan = createTableScanPlan(\"test\", 20, TestingSplit::createEmptySplit);\n         SqlStageExecution sqlStageExecution = createSqlStageExecution(nodeScheduler, 2, tableScanPlan);\n-        Future future = sqlStageExecution.start();\n+        Future<?> future = sqlStageExecution.start();\n         future.get(1, TimeUnit.SECONDS);\n     }\n \n@@ -152,7 +140,7 @@ public void testSplitAssignment()\n         // Start sql stage execution (schedule 15 splits in batches of 2), there are 3 nodes, each node should get 5 splits\n         StageExecutionPlan tableScanPlan = createTableScanPlan(\"test\", 15, splitFactory);\n         SqlStageExecution sqlStageExecution1 = createSqlStageExecution(nodeScheduler, 2, tableScanPlan);\n-        Future future1 = sqlStageExecution1.start();\n+        Future<?> future1 = sqlStageExecution1.start();\n         future1.get(1, TimeUnit.SECONDS);\n         for (RemoteTask remoteTask : sqlStageExecution1.getAllTasks()) {\n             assertEquals(remoteTask.getPartitionedSplitCount(), 5);\n@@ -165,7 +153,7 @@ public void testSplitAssignment()\n         // Schedule next query with 5 splits. Since the new node does not have any splits, all 5 splits are assigned to the new node\n         StageExecutionPlan tableScanPlan2 = createTableScanPlan(\"test\", 5, splitFactory);\n         SqlStageExecution sqlStageExecution2 = createSqlStageExecution(nodeScheduler, 5, tableScanPlan2);\n-        Future future2 = sqlStageExecution2.start();\n+        Future<?> future2 = sqlStageExecution2.start();\n         future2.get(1, TimeUnit.SECONDS);\n         List<RemoteTask> tasks2 = sqlStageExecution2.getTasks(additionalNode);\n \n@@ -181,13 +169,14 @@ public void testSplitAssignmentBatchSizeGreaterThanMaxPending()\n         // Start sql stage execution with 100 splits. Only 20 will be scheduled on each node as that is the maxSplitsPerNode\n         StageExecutionPlan tableScanPlan = createTableScanPlan(\"test\", 100, splitFactory);\n         SqlStageExecution sqlStageExecution1 = createSqlStageExecution(nodeScheduler, 100, tableScanPlan);\n-        Future future1 = sqlStageExecution1.start();\n+        Future<?> future1 = sqlStageExecution1.start();\n \n         // The stage scheduler will block and this will cause a timeout exception\n         try {\n             future1.get(1, TimeUnit.SECONDS);\n         }\n         catch (TimeoutException e) {\n+            // expected\n         }\n \n         for (RemoteTask task : sqlStageExecution1.getAllTasks()) {\n@@ -330,7 +319,7 @@ private StageExecutionPlan createJoinPlan(String planId)\n         );\n     }\n \n-    private StageExecutionPlan createTableScanPlan(String planId, int splitCount, Supplier<ConnectorSplit> splitFactory)\n+    private static StageExecutionPlan createTableScanPlan(String planId, int splitCount, Supplier<ConnectorSplit> splitFactory)\n     {\n         Symbol symbol = new Symbol(\"column\");\n \n@@ -385,7 +374,7 @@ public RemoteTask createRemoteTask(\n                 Multimap<PlanNodeId, Split> initialSplits,\n                 OutputBuffers outputBuffers)\n         {\n-            return new MockRemoteTask(taskId, node.getNodeIdentifier(), fragment, executor, initialSplits);\n+            return new MockRemoteTask(taskId, node.getNodeIdentifier(), executor, initialSplits);\n         }\n \n         private static class MockRemoteTask\n@@ -399,8 +388,6 @@ private static class MockRemoteTask\n             private final SharedBuffer sharedBuffer;\n             private final String nodeId;\n \n-            private final PlanFragment fragment;\n-\n             @GuardedBy(\"this\")\n             private final Set<PlanNodeId> noMoreSplits = new HashSet<>();\n \n@@ -409,7 +396,6 @@ private static class MockRemoteTask\n \n             public MockRemoteTask(TaskId taskId,\n                     String nodeId,\n-                    PlanFragment fragment,\n                     Executor executor,\n                     Multimap<PlanNodeId, Split> initialSplits)\n             {\n@@ -420,7 +406,6 @@ public MockRemoteTask(TaskId taskId,\n                 this.location = URI.create(\"fake://task/\" + taskId);\n \n                 this.sharedBuffer = new SharedBuffer(taskId, executor, checkNotNull(new DataSize(1, Unit.BYTE), \"maxBufferSize is null\"));\n-                this.fragment = checkNotNull(fragment, \"fragment is null\");\n                 this.nodeId = nodeId;\n                 splits.putAll(initialSplits);\n             }\n@@ -485,16 +470,9 @@ public void setOutputBuffers(OutputBuffers outputBuffers)\n             }\n \n             @Override\n-            public void addStateChangeListener(final StateChangeListener<TaskInfo> stateChangeListener)\n+            public void addStateChangeListener(StateChangeListener<TaskInfo> stateChangeListener)\n             {\n-                taskStateMachine.addStateChangeListener(new StateChangeListener<TaskState>()\n-                {\n-                    @Override\n-                    public void stateChanged(TaskState newValue)\n-                    {\n-                        stateChangeListener.stateChanged(getTaskInfo());\n-                    }\n-                });\n+                taskStateMachine.addStateChangeListener(newValue -> stateChangeListener.stateChanged(getTaskInfo()));\n             }\n \n             @Override",
      "parent_sha": "0f2a78df1d599dc9339da5f346863590ff330655"
    }
  }
]