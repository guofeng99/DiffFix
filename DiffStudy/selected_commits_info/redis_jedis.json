[
  {
    "oid": "2af43de03e773617b663d145bae3508dc95e1262",
    "message": "Fixed typo in Javadoc (#3917)",
    "date": "2024-08-12T11:34:58Z",
    "url": "https://github.com/redis/jedis/commit/2af43de03e773617b663d145bae3508dc95e1262",
    "details": {
      "sha": "750eccf5531d68250380158512b8144696ab5a2d",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/2af43de03e773617b663d145bae3508dc95e1262/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/2af43de03e773617b663d145bae3508dc95e1262/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=2af43de03e773617b663d145bae3508dc95e1262",
      "patch": "@@ -3431,7 +3431,7 @@ public String shutdownAbort() {\n    * All the fields are in the form field:value\n    *\n    * <pre>\n-   * edis_version:0.07\n+   * redis_version:0.07\n    * connected_clients:1\n    * connected_slaves:0\n    * used_memory:3187",
      "parent_sha": "085624517ba1a9740f23bf22d8c2af344c3e53b1"
    }
  },
  {
    "oid": "5a87ae465ee9b6606f5613b3de5895a93c28cfec",
    "message": "Binary U test on Sets ...",
    "date": "2010-11-05T16:11:31Z",
    "url": "https://github.com/redis/jedis/commit/5a87ae465ee9b6606f5613b3de5895a93c28cfec",
    "details": {
      "sha": "f5c2c2eeedd59673bdc970d5cf973171465647bd",
      "filename": "src/test/java/redis/clients/jedis/tests/commands/SetCommandsTest.java",
      "status": "modified",
      "additions": 228,
      "deletions": 1,
      "changes": 229,
      "blob_url": "https://github.com/redis/jedis/blob/5a87ae465ee9b6606f5613b3de5895a93c28cfec/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FSetCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/5a87ae465ee9b6606f5613b3de5895a93c28cfec/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FSetCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FSetCommandsTest.java?ref=5a87ae465ee9b6606f5613b3de5895a93c28cfec",
      "patch": "@@ -1,18 +1,38 @@\n package redis.clients.jedis.tests.commands;\n \n+import java.util.Arrays;\n import java.util.LinkedHashSet;\n import java.util.Set;\n \n import org.junit.Test;\n \n+import redis.clients.jedis.tests.JedisTest;\n+\n public class SetCommandsTest extends JedisCommandTestBase {\n+\tfinal byte[] bfoo  = {0x01, 0x02, 0x03, 0x04};\n+\tfinal byte[] bbar  = {0x05, 0x06, 0x07, 0x08};\n+\tfinal byte[] bcar  = {0x09, 0x0A, 0x0B, 0x0C};\n+\tfinal byte[] ba  = {0x0A};\n+\tfinal byte[] bb  = {0x0B};\n+\tfinal byte[] bc  = {0x0C};\n+\tfinal byte[] bd  = {0x0D};\n+\tfinal byte[] bx  = {0x42};\n+\t\n+\n     @Test\n     public void sadd() {\n \tint status = jedis.sadd(\"foo\", \"a\");\n \tassertEquals(1, status);\n \n \tstatus = jedis.sadd(\"foo\", \"a\");\n \tassertEquals(0, status);\n+\t\n+\tint bstatus = jedis.sadd(bfoo, ba);\n+\tassertEquals(1, bstatus);\n+\n+\tbstatus = jedis.sadd(bfoo, ba);\n+\tassertEquals(0, bstatus);\n+\n     }\n \n     @Test\n@@ -27,7 +47,20 @@ public void smembers() {\n \tSet<String> members = jedis.smembers(\"foo\");\n \n \tassertEquals(expected, members);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tSet<byte[]> bexpected = new LinkedHashSet<byte[]>();\n+\tbexpected.add(ba);\n+\tbexpected.add(bb);\n+\n+\tSet<byte[]> bmembers = jedis.smembers(bfoo);\n+\n+\tassertTrue(JedisTest.isListAreEquals(bexpected, bmembers));\n     }\n+    \n \n     @Test\n     public void srem() {\n@@ -45,6 +78,24 @@ public void srem() {\n \tstatus = jedis.srem(\"foo\", \"bar\");\n \n \tassertEquals(0, status);\n+\t\n+\t//Binary\n+\t\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tint bstatus = jedis.srem(bfoo, ba);\n+\n+\tSet<byte[]> bexpected = new LinkedHashSet<byte[]>();\n+\tbexpected.add(bb);\n+\n+\tassertEquals(1, bstatus);\n+\tassertTrue(JedisTest.isListAreEquals(bexpected, jedis.smembers(bfoo)));\n+\n+\tbstatus = jedis.srem(bfoo, bbar);\n+\n+\tassertEquals(0, bstatus);\n+\n     }\n \n     @Test\n@@ -59,6 +110,19 @@ public void spop() {\n \n \tmember = jedis.spop(\"bar\");\n \tassertNull(member);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tbyte[] bmember = jedis.spop(bfoo);\n+\n+\tassertTrue(Arrays.equals(ba, bmember) || Arrays.equals(bb,bmember));\n+\tassertEquals(1, jedis.smembers(bfoo).size());\n+\n+\tbmember = jedis.spop(bbar);\n+\tassertNull(bmember);\n+\n     }\n \n     @Test\n@@ -81,8 +145,32 @@ public void smove() {\n \tassertEquals(expectedSrc, jedis.smembers(\"foo\"));\n \tassertEquals(expectedDst, jedis.smembers(\"bar\"));\n \n-\tstatus = jedis.smove(\"foo\", \"bar\", \"a\");\n+\tstatus = jedis.smove(\"foo\", \"bar\", \"a\");\tfinal byte[] bD  = {0x0D};\n+\n \tassertEquals(status, 0);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tjedis.sadd(bbar, bc);\n+\n+\tint bstatus = jedis.smove(bfoo, bbar, ba);\n+\n+\tSet<byte[]> bexpectedSrc = new LinkedHashSet<byte[]>();\n+\tbexpectedSrc.add(bb);\n+\n+\tSet<byte[]> bexpectedDst = new LinkedHashSet<byte[]>();\n+\tbexpectedDst.add(bc);\n+\tbexpectedDst.add(ba);\n+\n+\tassertEquals(bstatus, 1);\n+\tassertTrue(JedisTest.isListAreEquals(bexpectedSrc, jedis.smembers(bfoo)));\n+\tassertTrue(JedisTest.isListAreEquals(bexpectedDst, jedis.smembers(bbar)));\n+\n+\tbstatus = jedis.smove(bfoo, bbar, ba);\n+\tassertEquals(bstatus, 0);\n+\n     }\n \n     @Test\n@@ -96,6 +184,18 @@ public void scard() {\n \n \tcard = jedis.scard(\"bar\");\n \tassertEquals(0, card);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tint bcard = jedis.scard(bfoo);\n+\n+\tassertEquals(2, bcard);\n+\n+\tbcard = jedis.scard(bbar);\n+\tassertEquals(0, bcard);\n+\n     }\n \n     @Test\n@@ -108,6 +208,17 @@ public void sismember() {\n \n \tstatus = jedis.sismember(\"foo\", \"c\");\n \tassertEquals(0, status);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tint bstatus = jedis.sismember(bfoo, ba);\n+\tassertEquals(1, bstatus);\n+\n+\tbstatus = jedis.sismember(bfoo, bc);\n+\tassertEquals(0, bstatus);\n+\n     }\n \n     @Test\n@@ -123,6 +234,20 @@ public void sinter() {\n \n \tSet<String> intersection = jedis.sinter(\"foo\", \"bar\");\n \tassertEquals(expected, intersection);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tjedis.sadd(bbar, bb);\n+\tjedis.sadd(bbar, bc);\n+\n+\tSet<byte[]> bexpected = new LinkedHashSet<byte[]>();\n+\tbexpected.add(bb);\n+\n+\tSet<byte[]> bintersection = jedis.sinter(bfoo, bbar);\n+\tassertTrue(JedisTest.isListAreEquals(bexpected, bintersection));\n+\n     }\n \n     @Test\n@@ -140,6 +265,22 @@ public void sinterstore() {\n \tassertEquals(1, status);\n \n \tassertEquals(expected, jedis.smembers(\"car\"));\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tjedis.sadd(bbar, bb);\n+\tjedis.sadd(bbar, bc);\n+\n+\tSet<byte[]> bexpected = new LinkedHashSet<byte[]>();\n+\tbexpected.add(bb);\n+\n+\tint bstatus = jedis.sinterstore(bcar, bfoo, bbar);\n+\tassertEquals(1, bstatus);\n+\n+\tassertTrue(JedisTest.isListAreEquals(bexpected, jedis.smembers(bcar)));\n+\n     }\n \n     @Test\n@@ -157,6 +298,22 @@ public void sunion() {\n \n \tSet<String> union = jedis.sunion(\"foo\", \"bar\");\n \tassertEquals(expected, union);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tjedis.sadd(bbar, bb);\n+\tjedis.sadd(bbar, bc);\n+\n+\tSet<byte[]> bexpected = new LinkedHashSet<byte[]>();\n+\tbexpected.add(ba);\n+\tbexpected.add(bb);\n+\tbexpected.add(bc);\n+\n+\tSet<byte[]> bunion = jedis.sunion(bfoo, bbar);\n+\tassertTrue(JedisTest.isListAreEquals(bexpected, bunion));\n+\n     }\n \n     @Test\n@@ -176,6 +333,24 @@ public void sunionstore() {\n \tassertEquals(3, status);\n \n \tassertEquals(expected, jedis.smembers(\"car\"));\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tjedis.sadd(bbar, bb);\n+\tjedis.sadd(bbar, bc);\n+\n+\tSet<byte[]> bexpected = new LinkedHashSet<byte[]>();\n+\tbexpected.add(ba);\n+\tbexpected.add(bb);\n+\tbexpected.add(bc);\n+\n+\tint bstatus = jedis.sunionstore(bcar, bfoo, bbar);\n+\tassertEquals(3, bstatus);\n+\n+\tassertTrue(JedisTest.isListAreEquals(bexpected, jedis.smembers(bcar)));\n+\n     }\n \n     @Test\n@@ -196,6 +371,25 @@ public void sdiff() {\n \n \tSet<String> diff = jedis.sdiff(\"foo\", \"bar\", \"car\");\n \tassertEquals(expected, diff);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, bx);\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\tjedis.sadd(bfoo, bc);\n+\n+\tjedis.sadd(bbar, bc);\n+\n+\tjedis.sadd(bcar, ba);\n+\tjedis.sadd(bcar, bd);\n+\n+\tSet<byte[]> bexpected = new LinkedHashSet<byte[]>();\n+\tbexpected.add(bx);\n+\tbexpected.add(bb);\n+\n+\tSet<byte[]> bdiff = jedis.sdiff(bfoo, bbar, bcar);\n+\tassertTrue(JedisTest.isListAreEquals(bexpected, bdiff));\n+\n     }\n \n     @Test\n@@ -217,6 +411,26 @@ public void sdiffstore() {\n \tint status = jedis.sdiffstore(\"tar\", \"foo\", \"bar\", \"car\");\n \tassertEquals(2, status);\n \tassertEquals(expected, jedis.smembers(\"car\"));\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, bx);\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\tjedis.sadd(bfoo, bc);\n+\n+\tjedis.sadd(bbar, bc);\n+\n+\tjedis.sadd(bcar, ba);\n+\tjedis.sadd(bcar, bd);\n+\n+\tSet<byte[]> bexpected = new LinkedHashSet<byte[]>();\n+\tbexpected.add(bd);\n+\tbexpected.add(ba);\n+\n+\tint bstatus = jedis.sdiffstore(\"tar\".getBytes(), bfoo, bbar, bcar);\n+\tassertEquals(2, bstatus);\n+\tassertTrue(JedisTest.isListAreEquals(bexpected, jedis.smembers(bcar)));\n+\n     }\n \n     @Test\n@@ -231,6 +445,19 @@ public void srandmember() {\n \n \tmember = jedis.srandmember(\"bar\");\n \tassertNull(member);\n+\t\n+\t//Binary\n+\tjedis.sadd(bfoo, ba);\n+\tjedis.sadd(bfoo, bb);\n+\n+\tbyte[] bmember = jedis.srandmember(bfoo);\n+\n+\tassertTrue(Arrays.equals(ba, bmember)  || Arrays.equals(bb, bmember));\n+\tassertEquals(2, jedis.smembers(bfoo).size());\n+\n+\tbmember = jedis.srandmember(bbar);\n+\tassertNull(bmember);\n+\n     }\n \n }\n\\ No newline at end of file",
      "parent_sha": "ad25921ecaf46dd182f5bb3ce5e7492611168c15"
    }
  },
  {
    "oid": "8476aafbd40431e807ce1bd2eda038c59415c8c1",
    "message": "Address RediSearch change to non-empty SCHEMA (#2914)",
    "date": "2022-02-17T06:49:23Z",
    "url": "https://github.com/redis/jedis/commit/8476aafbd40431e807ce1bd2eda038c59415c8c1",
    "details": {
      "sha": "d4fe65af17ffad27de415d6144f201ca6b667d67",
      "filename": "src/test/java/redis/clients/jedis/modules/search/JsonSearchTest.java",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/redis/jedis/blob/8476aafbd40431e807ce1bd2eda038c59415c8c1/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fmodules%2Fsearch%2FJsonSearchTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/8476aafbd40431e807ce1bd2eda038c59415c8c1/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fmodules%2Fsearch%2FJsonSearchTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fmodules%2Fsearch%2FJsonSearchTest.java?ref=8476aafbd40431e807ce1bd2eda038c59415c8c1",
      "patch": "@@ -127,7 +127,10 @@ public void createWithFieldNames() {\n \n   @Test\n   public void parseJson() {\n-    Schema schema = new Schema();\n+    Schema schema = new Schema()\n+        .addField(new TextField(FieldName.of(\"$.first\").as(\"first\")))\n+        .addField(new TextField(FieldName.of(\"$.last\")))\n+        .addField(new Field(FieldName.of(\"$.age\").as(\"age\"), FieldType.NUMERIC));\n     IndexDefinition rule = new IndexDefinition(IndexDefinition.Type.JSON);\n \n     assertEquals(\"OK\", client.ftCreate(index, IndexOptions.defaultOptions().setDefinition(rule), schema));\n@@ -144,7 +147,7 @@ public void parseJson() {\n     assertEquals(1, sr.getTotalResults());\n \n     Document doc = sr.getDocuments().get(0);\n-    assertEquals(Double.POSITIVE_INFINITY, doc.getScore(), 0);\n+    assertEquals(1.0, doc.getScore(), 0);\n     assertNull(doc.getPayload());\n     assertEquals(json.toString(), doc.get(JSON_ROOT));\n \n@@ -165,7 +168,10 @@ public void parseJson() {\n \n   @Test\n   public void parseJsonPartial() {\n-    Schema schema = new Schema();\n+    Schema schema = new Schema()\n+                .addField(new TextField(FieldName.of(\"$.first\").as(\"first\")))\n+                .addField(new TextField(FieldName.of(\"$.last\")))\n+                .addField(new Field(FieldName.of(\"$.age\").as(\"age\"), FieldType.NUMERIC));\n     IndexDefinition rule = new IndexDefinition(IndexDefinition.Type.JSON);\n \n     assertEquals(\"OK\", client.ftCreate(index, IndexOptions.defaultOptions().setDefinition(rule), schema));\n@@ -197,7 +203,10 @@ public void parseJsonPartial() {\n \n   @Test\n   public void parseJsonPartialWithFieldNames() {\n-    Schema schema = new Schema();\n+    Schema schema = new Schema()\n+                .addField(new TextField(FieldName.of(\"$.first\").as(\"first\")))\n+                .addField(new TextField(FieldName.of(\"$.last\")))\n+                .addField(new Field(FieldName.of(\"$.age\").as(\"age\"), FieldType.NUMERIC));\n     IndexDefinition rule = new IndexDefinition(IndexDefinition.Type.JSON);\n \n     assertEquals(\"OK\", client.ftCreate(index, IndexOptions.defaultOptions().setDefinition(rule), schema));",
      "parent_sha": "06adf2b12cf17c9ba235ed559874d099e283326d"
    }
  },
  {
    "oid": "a4cef0b48abb5933a1085394cdf77d007581f57a",
    "message": "Use Double.NEGATIVE/POSITIVE_INFINITY instead of MIN_VALUE and MAX_VALUE to indicate -inf and +inf respectively.",
    "date": "2011-06-10T17:45:57Z",
    "url": "https://github.com/redis/jedis/commit/a4cef0b48abb5933a1085394cdf77d007581f57a",
    "details": {
      "sha": "348160bedf586f5b3a9c1b2f2cdc98aae7939c87",
      "filename": "src/main/java/redis/clients/jedis/BinaryClient.java",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/redis/jedis/blob/a4cef0b48abb5933a1085394cdf77d007581f57a/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryClient.java",
      "raw_url": "https://github.com/redis/jedis/raw/a4cef0b48abb5933a1085394cdf77d007581f57a/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryClient.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryClient.java?ref=a4cef0b48abb5933a1085394cdf77d007581f57a",
      "patch": "@@ -497,26 +497,26 @@ public void punsubscribe(final byte[]... patterns) {\n \n     public void zcount(final byte[] key, final double min, final double max) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZCOUNT, key, byteArrayMin, byteArrayMax);\n     }\n \n     public void zrangeByScore(final byte[] key, final double min,\n             final double max) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZRANGEBYSCORE, key, byteArrayMin, byteArrayMax);\n     }\n \n     public void zrevrangeByScore(final byte[] key, final double max,\n             final double min) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZREVRANGEBYSCORE, key, byteArrayMax, byteArrayMin);\n     }\n@@ -534,8 +534,8 @@ public void zrevrangeByScore(final byte[] key, final byte[] max,\n     public void zrangeByScore(final byte[] key, final double min,\n             final double max, final int offset, int count) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZRANGEBYSCORE, key, byteArrayMin, byteArrayMax,\n                 LIMIT.raw, toByteArray(offset), toByteArray(count));\n@@ -544,8 +544,8 @@ public void zrangeByScore(final byte[] key, final double min,\n     public void zrevrangeByScore(final byte[] key, final double max,\n             final double min, final int offset, int count) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZREVRANGEBYSCORE, key, byteArrayMax, byteArrayMin,\n                 LIMIT.raw, toByteArray(offset), toByteArray(count));\n@@ -554,8 +554,8 @@ public void zrevrangeByScore(final byte[] key, final double max,\n     public void zrangeByScoreWithScores(final byte[] key, final double min,\n             final double max) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZRANGEBYSCORE, key, byteArrayMin, byteArrayMax,\n                 WITHSCORES.raw);\n@@ -564,8 +564,8 @@ public void zrangeByScoreWithScores(final byte[] key, final double min,\n     public void zrevrangeByScoreWithScores(final byte[] key, final double max,\n             final double min) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZREVRANGEBYSCORE, key, byteArrayMax, byteArrayMin,\n                 WITHSCORES.raw);\n@@ -574,8 +574,8 @@ public void zrevrangeByScoreWithScores(final byte[] key, final double max,\n     public void zrangeByScoreWithScores(final byte[] key, final double min,\n             final double max, final int offset, final int count) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZRANGEBYSCORE, key, byteArrayMin, byteArrayMax,\n                 LIMIT.raw, toByteArray(offset), toByteArray(count),\n@@ -585,8 +585,8 @@ LIMIT.raw, toByteArray(offset), toByteArray(count),\n     public void zrevrangeByScoreWithScores(final byte[] key, final double max,\n             final double min, final int offset, final int count) {\n \n-        byte byteArrayMin[] = (min == Double.MIN_VALUE) ? \"-inf\".getBytes() : toByteArray(min);\n-        byte byteArrayMax[] = (max == Double.MAX_VALUE) ? \"+inf\".getBytes() : toByteArray(max);\n+        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? \"-inf\".getBytes() : toByteArray(min);\n+        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? \"+inf\".getBytes() : toByteArray(max);\n \n         sendCommand(ZREVRANGEBYSCORE, key, byteArrayMax, byteArrayMin,\n                 LIMIT.raw, toByteArray(offset), toByteArray(count),",
      "parent_sha": "03d4208318562654ed0b81376441460985679bd6"
    }
  },
  {
    "oid": "17b353f8cdc00b2848d2bab0ff8a4178a188e577",
    "message": "WRONGPASS message modified (#2241)",
    "date": "2020-09-01T05:16:26Z",
    "url": "https://github.com/redis/jedis/commit/17b353f8cdc00b2848d2bab0ff8a4178a188e577",
    "details": {
      "sha": "728407d396353d7058dbadfa10c593b4f5febaad",
      "filename": "src/test/java/redis/clients/jedis/tests/commands/AccessControlListCommandsTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/redis/jedis/blob/17b353f8cdc00b2848d2bab0ff8a4178a188e577/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAccessControlListCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/17b353f8cdc00b2848d2bab0ff8a4178a188e577/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAccessControlListCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAccessControlListCommandsTest.java?ref=17b353f8cdc00b2848d2bab0ff8a4178a188e577",
      "patch": "@@ -114,7 +114,7 @@ public void createUserAndPasswords() {\n       fail(\"Should throw a WRONGPASS exception\");\n     } catch (JedisAccessControlException e) {\n       assertNull(authResult);\n-      assertEquals(\"WRONGPASS invalid username-password pair\", e.getMessage());\n+      assertTrue(e.getMessage().startsWith(\"WRONGPASS \"));\n     }\n \n     // now activate the user\n@@ -131,7 +131,7 @@ public void createUserAndPasswords() {\n       fail(\"Should throw a WRONGPASS exception\");\n     } catch (JedisAccessControlException e) {\n       assertEquals(\"OK\", authResult);\n-      assertEquals(\"WRONGPASS invalid username-password pair\", e.getMessage());\n+      assertTrue(e.getMessage().startsWith(\"WRONGPASS \"));\n     }\n \n     // remove password, and try to authenticate\n@@ -141,7 +141,7 @@ public void createUserAndPasswords() {\n       fail(\"Should throw a WRONGPASS exception\");\n     } catch (JedisAccessControlException e) {\n       assertEquals(\"OK\", authResult);\n-      assertEquals(\"WRONGPASS invalid username-password pair\", e.getMessage());\n+      assertTrue(e.getMessage().startsWith(\"WRONGPASS \"));\n     }\n \n     jedis.aclDelUser(USER_ZZZ); // delete the user\n@@ -150,7 +150,7 @@ public void createUserAndPasswords() {\n       fail(\"Should throw a WRONGPASS exception\");\n     } catch (JedisAccessControlException e) {\n       assertEquals(\"OK\", authResult);\n-      assertEquals(\"WRONGPASS invalid username-password pair\", e.getMessage());\n+      assertTrue(e.getMessage().startsWith(\"WRONGPASS \"));\n     }\n \n     jedis2.close();",
      "parent_sha": "d13592d783ac407cc03ef77ba1d3bc19d167f121"
    }
  },
  {
    "oid": "71204c52ec992fedcbaa54638f8865e910cc3d49",
    "message": "Use RedisCredentials with HELLO command (#3507)\n\n* Use RedisCredentials with HELLO command\r\n\r\n* fix\r\n\r\n* CLIENT SETNAME separately\r\n\r\n* remove comment",
    "date": "2023-08-21T06:25:11Z",
    "url": "https://github.com/redis/jedis/commit/71204c52ec992fedcbaa54638f8865e910cc3d49",
    "details": {
      "sha": "9cdbfdbd7c8ff31613b11ad82318ef6e978d678b",
      "filename": "src/main/java/redis/clients/jedis/Connection.java",
      "status": "modified",
      "additions": 57,
      "deletions": 67,
      "changes": 124,
      "blob_url": "https://github.com/redis/jedis/blob/71204c52ec992fedcbaa54638f8865e910cc3d49/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "raw_url": "https://github.com/redis/jedis/raw/71204c52ec992fedcbaa54638f8865e910cc3d49/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java?ref=71204c52ec992fedcbaa54638f8865e910cc3d49",
      "patch": "@@ -1,5 +1,7 @@\n package redis.clients.jedis;\n \n+import static redis.clients.jedis.util.SafeEncoder.encode;\n+\n import java.io.Closeable;\n import java.io.IOException;\n import java.net.Socket;\n@@ -9,7 +11,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Map;\n import java.util.function.Supplier;\n \n import redis.clients.jedis.Protocol.Command;\n@@ -25,7 +26,6 @@\n import redis.clients.jedis.util.JedisMetaInfo;\n import redis.clients.jedis.util.RedisInputStream;\n import redis.clients.jedis.util.RedisOutputStream;\n-import redis.clients.jedis.util.SafeEncoder;\n \n public class Connection implements Closeable {\n \n@@ -270,14 +270,14 @@ public String getStatusCodeReply() {\n     if (null == resp) {\n       return null;\n     } else {\n-      return SafeEncoder.encode(resp);\n+      return encode(resp);\n     }\n   }\n \n   public String getBulkReply() {\n     final byte[] result = getBinaryBulkReply();\n     if (null != result) {\n-      return SafeEncoder.encode(result);\n+      return encode(result);\n     } else {\n       return null;\n     }\n@@ -391,44 +391,27 @@ private static boolean validateClientInfo(String info) {\n   private void initializeFromClientConfig(JedisClientConfig config) {\n     try {\n       connect();\n-      protocol = config.getRedisProtocol();\n-\n-      boolean doClientName = true;\n-\n-      /// HELLO and AUTH --> \n-      if (protocol == RedisProtocol.RESP3 && config.getUser() != null) {\n-\n-        hello(protocol, config.getUser(), config.getPassword(), config.getClientName());\n-        doClientName = false;\n \n-      } else {\n-\n-        Supplier<RedisCredentials> credentialsProvider = config.getCredentialsProvider();\n-        if (credentialsProvider instanceof RedisCredentialsProvider) {\n-          try {\n-            ((RedisCredentialsProvider) credentialsProvider).prepare();\n-            auth(credentialsProvider);\n-          } finally {\n-            ((RedisCredentialsProvider) credentialsProvider).cleanUp();\n-          }\n-        } else {\n-          auth(credentialsProvider);\n-        }\n+      protocol = config.getRedisProtocol();\n \n-        if (protocol != null) {\n-          hello(protocol);\n+      final Supplier<RedisCredentials> credentialsProvider = config.getCredentialsProvider();\n+      if (credentialsProvider instanceof RedisCredentialsProvider) {\n+        final RedisCredentialsProvider redisCredentialsProvider = (RedisCredentialsProvider) credentialsProvider;\n+        try {\n+          redisCredentialsProvider.prepare();\n+          helloOrAuth(protocol, redisCredentialsProvider.get());\n+        } finally {\n+          redisCredentialsProvider.cleanUp();\n         }\n-      }\n-\n-      int dbIndex = config.getDatabase();\n-      if (dbIndex > 0) {\n-        select(dbIndex);\n+      } else {\n+        helloOrAuth(protocol, credentialsProvider != null ? credentialsProvider.get()\n+            : new DefaultRedisCredentials(config.getUser(), config.getPassword()));\n       }\n \n       List<CommandArguments> fireAndForgetMsg = new ArrayList<>();\n \n       String clientName = config.getClientName();\n-      if (doClientName && clientName != null && validateClientInfo(clientName)) {\n+      if (clientName != null && validateClientInfo(clientName)) {\n         fireAndForgetMsg.add(new CommandArguments(Command.CLIENT).add(Keyword.SETNAME).add(clientName));\n       }\n \n@@ -448,6 +431,12 @@ private void initializeFromClientConfig(JedisClientConfig config) {\n         sendCommand(arg);\n       }\n       getMany(fireAndForgetMsg.size());\n+\n+      int dbIndex = config.getDatabase();\n+      if (dbIndex > 0) {\n+        select(dbIndex);\n+      }\n+\n     } catch (JedisException je) {\n       try {\n         disconnect();\n@@ -458,58 +447,59 @@ private void initializeFromClientConfig(JedisClientConfig config) {\n     }\n   }\n \n-  private Map hello(final RedisProtocol protocol) {\n-    sendCommand(Protocol.Command.HELLO, String.valueOf(protocol.version()));\n-    Map reply = BuilderFactory.ENCODED_OBJECT_MAP.build(getOne());\n-    // LoggerFactory.getLogger(Connection.class).info(\"HELLO reply: {}\", reply);\n-    return reply;\n-  }\n+  private void helloOrAuth(final RedisProtocol protocol, final RedisCredentials credentials) {\n \n-  private Map hello(final RedisProtocol protocol, final String user, final String password,\n-      final String clientName) {\n-    if (clientName == null) {\n-      sendCommand(Protocol.Command.HELLO, String.valueOf(protocol.version()),\n-          Protocol.Keyword.AUTH.name(), user, password);\n-    } else {\n-      sendCommand(Protocol.Command.HELLO, String.valueOf(protocol.version()),\n-          Protocol.Keyword.AUTH.name(), user, password,\n-          Protocol.Keyword.SETNAME.name(), clientName);\n+    if (credentials == null || credentials.getPassword() == null) {\n+      if (protocol != null) {\n+        sendCommand(Command.HELLO, encode(protocol.version()));\n+        getOne();\n+      }\n+      return;\n     }\n-    Map reply = BuilderFactory.ENCODED_OBJECT_MAP.build(getOne());\n-    // LoggerFactory.getLogger(Connection.class).info(\"HELLO reply: {}\", reply);\n-    return reply;\n-  }\n-\n-  private void auth(final Supplier<RedisCredentials> credentialsProvider) {\n-    RedisCredentials credentials = credentialsProvider.get();\n-    if (credentials == null || credentials.getPassword() == null) return;\n \n     // Source: https://stackoverflow.com/a/9670279/4021802\n     ByteBuffer passBuf = Protocol.CHARSET.encode(CharBuffer.wrap(credentials.getPassword()));\n     byte[] rawPass = Arrays.copyOfRange(passBuf.array(), passBuf.position(), passBuf.limit());\n     Arrays.fill(passBuf.array(), (byte) 0); // clear sensitive data\n \n-    if (credentials.getUser() != null) {\n-      sendCommand(Protocol.Command.AUTH, SafeEncoder.encode(credentials.getUser()), rawPass);\n-    } else {\n-      sendCommand(Protocol.Command.AUTH, rawPass);\n-    }\n+    try {\n+      /// actual HELLO or AUTH -->\n+      if (protocol != null) {\n+        if (credentials.getUser() != null) {\n+          sendCommand(Command.HELLO, encode(protocol.version()),\n+              Keyword.AUTH.getRaw(), encode(credentials.getUser()), rawPass);\n+          getOne(); // Map\n+        } else {\n+          sendCommand(Command.AUTH, rawPass);\n+          getStatusCodeReply(); // OK\n+          sendCommand(Command.HELLO, encode(protocol.version()));\n+          getOne(); // Map\n+        }\n+      } else { // protocol == null\n+        if (credentials.getUser() != null) {\n+          sendCommand(Command.AUTH, encode(credentials.getUser()), rawPass);\n+        } else {\n+          sendCommand(Command.AUTH, rawPass);\n+        }\n+        getStatusCodeReply(); // OK\n+      }\n+      /// <-- actual HELLO or AUTH\n+    } finally {\n \n-    Arrays.fill(rawPass, (byte) 0); // clear sensitive data\n+      Arrays.fill(rawPass, (byte) 0); // clear sensitive data\n+    }\n \n     // clearing 'char[] credentials.getPassword()' should be\n     // handled in RedisCredentialsProvider.cleanUp()\n-\n-    getStatusCodeReply(); // OK\n   }\n \n   public String select(final int index) {\n-    sendCommand(Protocol.Command.SELECT, Protocol.toByteArray(index));\n+    sendCommand(Command.SELECT, Protocol.toByteArray(index));\n     return getStatusCodeReply();\n   }\n \n   public boolean ping() {\n-    sendCommand(Protocol.Command.PING);\n+    sendCommand(Command.PING);\n     String status = getStatusCodeReply();\n     if (!\"PONG\".equals(status)) {\n       throw new JedisException(status);",
      "parent_sha": "2c609cfb3adab13ae843aacc862389cca454951a"
    }
  },
  {
    "oid": "9cbd166a4678eaceb947980bdff18787ef7bff6f",
    "message": "Change test name to something more descriptive",
    "date": "2014-12-11T13:01:46Z",
    "url": "https://github.com/redis/jedis/commit/9cbd166a4678eaceb947980bdff18787ef7bff6f",
    "details": {
      "sha": "c0365fa079dda33a46991de6d0f03a0fd67fedcd",
      "filename": "src/test/java/redis/clients/jedis/tests/ShardedJedisTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/redis/jedis/blob/9cbd166a4678eaceb947980bdff18787ef7bff6f/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FShardedJedisTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/9cbd166a4678eaceb947980bdff18787ef7bff6f/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FShardedJedisTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FShardedJedisTest.java?ref=9cbd166a4678eaceb947980bdff18787ef7bff6f",
      "patch": "@@ -19,8 +19,14 @@ public class ShardedJedisTest extends Assert {\n   private static HostAndPort redis1 = HostAndPortUtil.getRedisServers().get(0);\n   private static HostAndPort redis2 = HostAndPortUtil.getRedisServers().get(1);\n \n+  /**\n+   * Test for \"Issue - BinaryShardedJedis.disconnect() may occur memory leak\".\n+   * You can find more detailed information at https://github.com/xetorthio/jedis/issues/808\n+   *\n+   * @throws InterruptedException\n+   */\n   @Test\n-  public void disconnect() throws InterruptedException {\n+  public void testAvoidLeaksUponDisconnect() throws InterruptedException {\n     List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>(2);\n     // 6379\n     JedisShardInfo shard1 = new JedisShardInfo(redis1.getHost(), redis1.getPort());",
      "parent_sha": "f89b87bd2ebae6eba7579418f7b9949f4e6e064f"
    }
  },
  {
    "oid": "5782eecd59cf602787b82cf03ce1a6171a0befa8",
    "message": "Edit JedisClusterTest (#2354)\n\n- change connectionTimeout=0, which causes tests to fail now and then\r\n- change variable name 'localHost', which may be confusing with actual localhost",
    "date": "2021-01-24T13:23:44Z",
    "url": "https://github.com/redis/jedis/commit/5782eecd59cf602787b82cf03ce1a6171a0befa8",
    "details": {
      "sha": "de58c76c42a02fd2adf2e9481c2c4f8c79c02913",
      "filename": "src/test/java/redis/clients/jedis/tests/JedisClusterTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/redis/jedis/blob/5782eecd59cf602787b82cf03ce1a6171a0befa8/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisClusterTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/5782eecd59cf602787b82cf03ce1a6171a0befa8/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisClusterTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisClusterTest.java?ref=5782eecd59cf602787b82cf03ce1a6171a0befa8",
      "patch": "@@ -54,7 +54,7 @@ public class JedisClusterTest {\n   private static Jedis node3;\n   private static Jedis node4;\n   private static Jedis nodeSlave2;\n-  private String localHost = \"127.0.0.1\";\n+  private static final String LOCAL_IP = \"127.0.0.1\";\n \n   private static final int DEFAULT_TIMEOUT = 2000;\n   private static final int DEFAULT_REDIRECTIONS = 5;\n@@ -91,8 +91,8 @@ public void setUp() throws InterruptedException {\n     // ---- configure cluster\n \n     // add nodes to cluster\n-    node1.clusterMeet(localHost, nodeInfo2.getPort());\n-    node1.clusterMeet(localHost, nodeInfo3.getPort());\n+    node1.clusterMeet(LOCAL_IP, nodeInfo2.getPort());\n+    node1.clusterMeet(LOCAL_IP, nodeInfo3.getPort());\n \n     // split available slots across the three nodes\n     int slotsPerNode = JedisCluster.HASHSLOTS / 3;\n@@ -211,7 +211,7 @@ public void testCalculateConnectionPerSlot() {\n \n   @Test\n   public void testReadonly() throws Exception {\n-    node1.clusterMeet(localHost, nodeInfoSlave2.getPort());\n+    node1.clusterMeet(LOCAL_IP, nodeInfoSlave2.getPort());\n     JedisClusterTestUtil.waitForClusterReady(node1, node2, node3, nodeSlave2);\n \n     for (String nodeInfo : node2.clusterNodes().split(\"\\n\")) {\n@@ -250,14 +250,14 @@ public void testMigrate() {\n       node2.set(\"e\", \"e\");\n     } catch (JedisMovedDataException jme) {\n       assertEquals(15363, jme.getSlot());\n-      assertEquals(new HostAndPort(localHost, nodeInfo3.getPort()), jme.getTargetNode());\n+      assertEquals(new HostAndPort(LOCAL_IP, nodeInfo3.getPort()), jme.getTargetNode());\n     }\n \n     try {\n       node3.set(\"e\", \"e\");\n     } catch (JedisAskDataException jae) {\n       assertEquals(15363, jae.getSlot());\n-      assertEquals(new HostAndPort(localHost, nodeInfo2.getPort()), jae.getTargetNode());\n+      assertEquals(new HostAndPort(LOCAL_IP, nodeInfo2.getPort()), jae.getTargetNode());\n     }\n \n     jc.set(\"e\", \"e\");\n@@ -266,13 +266,13 @@ public void testMigrate() {\n       node2.get(\"e\");\n     } catch (JedisMovedDataException jme) {\n       assertEquals(15363, jme.getSlot());\n-      assertEquals(new HostAndPort(localHost, nodeInfo3.getPort()), jme.getTargetNode());\n+      assertEquals(new HostAndPort(LOCAL_IP, nodeInfo3.getPort()), jme.getTargetNode());\n     }\n     try {\n       node3.get(\"e\");\n     } catch (JedisAskDataException jae) {\n       assertEquals(15363, jae.getSlot());\n-      assertEquals(new HostAndPort(localHost, nodeInfo2.getPort()), jae.getTargetNode());\n+      assertEquals(new HostAndPort(LOCAL_IP, nodeInfo2.getPort()), jae.getTargetNode());\n     }\n \n     assertEquals(\"e\", jc.get(\"e\"));\n@@ -293,7 +293,7 @@ public void testMigrateToNewNode() throws InterruptedException {\n     jedisClusterNode.add(nodeInfo1);\n     JedisCluster jc = new JedisCluster(jedisClusterNode, DEFAULT_TIMEOUT, DEFAULT_TIMEOUT,\n         DEFAULT_REDIRECTIONS, \"cluster\", DEFAULT_CONFIG);\n-    node3.clusterMeet(localHost, nodeInfo4.getPort());\n+    node3.clusterMeet(LOCAL_IP, nodeInfo4.getPort());\n \n     String node3Id = JedisClusterTestUtil.getNodeId(node3.clusterNodes());\n     String node4Id = JedisClusterTestUtil.getNodeId(node4.clusterNodes());\n@@ -304,14 +304,14 @@ public void testMigrateToNewNode() throws InterruptedException {\n       node4.set(\"e\", \"e\");\n     } catch (JedisMovedDataException jme) {\n       assertEquals(15363, jme.getSlot());\n-      assertEquals(new HostAndPort(localHost, nodeInfo3.getPort()), jme.getTargetNode());\n+      assertEquals(new HostAndPort(LOCAL_IP, nodeInfo3.getPort()), jme.getTargetNode());\n     }\n \n     try {\n       node3.set(\"e\", \"e\");\n     } catch (JedisAskDataException jae) {\n       assertEquals(15363, jae.getSlot());\n-      assertEquals(new HostAndPort(localHost, nodeInfo4.getPort()), jae.getTargetNode());\n+      assertEquals(new HostAndPort(LOCAL_IP, nodeInfo4.getPort()), jae.getTargetNode());\n     }\n \n     jc.set(\"e\", \"e\");\n@@ -320,13 +320,13 @@ public void testMigrateToNewNode() throws InterruptedException {\n       node4.get(\"e\");\n     } catch (JedisMovedDataException jme) {\n       assertEquals(15363, jme.getSlot());\n-      assertEquals(new HostAndPort(localHost, nodeInfo3.getPort()), jme.getTargetNode());\n+      assertEquals(new HostAndPort(LOCAL_IP, nodeInfo3.getPort()), jme.getTargetNode());\n     }\n     try {\n       node3.get(\"e\");\n     } catch (JedisAskDataException jae) {\n       assertEquals(15363, jae.getSlot());\n-      assertEquals(new HostAndPort(localHost, nodeInfo4.getPort()), jae.getTargetNode());\n+      assertEquals(new HostAndPort(LOCAL_IP, nodeInfo4.getPort()), jae.getTargetNode());\n     }\n \n     assertEquals(\"e\", jc.get(\"e\"));\n@@ -600,8 +600,8 @@ public void testReturnConnectionOnRedirection() {\n     jedisClusterNode.add(new HostAndPort(\"127.0.0.1\", 7379));\n     JedisPoolConfig config = new JedisPoolConfig();\n     config.setMaxTotal(1);\n-    JedisCluster jc = new JedisCluster(jedisClusterNode, 0, 2, DEFAULT_REDIRECTIONS, \"cluster\",\n-        config);\n+    JedisCluster jc = new JedisCluster(jedisClusterNode, DEFAULT_TIMEOUT, DEFAULT_TIMEOUT,\n+        DEFAULT_REDIRECTIONS, \"cluster\", config);\n \n     // This will cause an infinite redirection between node 2 and 3\n     node3.clusterSetSlotMigrating(15363, JedisClusterTestUtil.getNodeId(node2.clusterNodes()));\n@@ -617,8 +617,8 @@ public void testLocalhostNodeNotAddedWhen127Present() {\n     jedisClusterNode.add(localhost);\n     JedisPoolConfig config = new JedisPoolConfig();\n     config.setMaxTotal(1);\n-    JedisCluster jc = new JedisCluster(jedisClusterNode, 0, 2, DEFAULT_REDIRECTIONS, \"cluster\",\n-        DEFAULT_CONFIG);\n+    JedisCluster jc = new JedisCluster(jedisClusterNode, DEFAULT_TIMEOUT, DEFAULT_TIMEOUT,\n+        DEFAULT_REDIRECTIONS, \"cluster\", DEFAULT_CONFIG);\n     Map<String, JedisPool> clusterNodes = jc.getClusterNodes();\n     assertEquals(3, clusterNodes.size());\n     assertFalse(clusterNodes.containsKey(JedisClusterInfoCache.getNodeKey(localhost)));\n@@ -632,8 +632,8 @@ public void testInvalidStartNodeNotAdded() {\n     jedisClusterNode.add(new HostAndPort(\"127.0.0.1\", 7379));\n     JedisPoolConfig config = new JedisPoolConfig();\n     config.setMaxTotal(1);\n-    JedisCluster jc = new JedisCluster(jedisClusterNode, 0, 2, DEFAULT_REDIRECTIONS, \"cluster\",\n-        config);\n+    JedisCluster jc = new JedisCluster(jedisClusterNode, DEFAULT_TIMEOUT, DEFAULT_TIMEOUT,\n+        DEFAULT_REDIRECTIONS, \"cluster\", config);\n     Map<String, JedisPool> clusterNodes = jc.getClusterNodes();\n     assertEquals(3, clusterNodes.size());\n     assertFalse(clusterNodes.containsKey(JedisClusterInfoCache.getNodeKey(invalidHost)));",
      "parent_sha": "d7b94902332f48498918b6f4dfbc53233678692e"
    }
  },
  {
    "oid": "a3422bd898b31cea090e4a4fa01caafe3b978590",
    "message": "ttl return -1 if key does not have an associated expire but return -2 if key does not exists",
    "date": "2014-10-03T16:57:34Z",
    "url": "https://github.com/redis/jedis/commit/a3422bd898b31cea090e4a4fa01caafe3b978590",
    "details": {
      "sha": "49c30c949b71bb1f3dcc8914ad96fee54a69cd5c",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/redis/jedis/blob/a3422bd898b31cea090e4a4fa01caafe3b978590/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/a3422bd898b31cea090e4a4fa01caafe3b978590/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=a3422bd898b31cea090e4a4fa01caafe3b978590",
      "patch": "@@ -1,14 +1,21 @@\n package redis.clients.jedis;\n \n+import java.net.URI;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n import redis.clients.jedis.BinaryClient.LIST_POSITION;\n import redis.clients.util.Pool;\n import redis.clients.util.SafeEncoder;\n import redis.clients.util.Slowlog;\n \n-import java.net.URI;\n-import java.util.*;\n-import java.util.Map.Entry;\n-\n public class Jedis extends BinaryJedis implements JedisCommands,\n \tMultiKeyCommands, AdvancedJedisCommands, ScriptingCommands,\n \tBasicCommands, ClusterCommands {\n@@ -310,8 +317,9 @@ public Long expireAt(final String key, final long unixTime) {\n      * \n      * @param key\n      * @return Integer reply, returns the remaining time to live in seconds of a\n-     *         key that has an EXPIRE. If the Key does not exists or does not\n-     *         have an associated expire, -1 is returned.\n+     *         key that has an EXPIRE. \n+     *         If the Key does not have an associated expire, -1 is returned.\n+     *         If the Key does not exists, -2 is returned. \n      */\n     public Long ttl(final String key) {\n \tcheckIsInMulti();",
      "parent_sha": "ebaba7911927a30642458a54687d0581d0e17fe9"
    }
  },
  {
    "oid": "dab21609e63f850517121ae188088716d45da4e8",
    "message": "Fix some more U tests ...",
    "date": "2010-11-05T08:33:57Z",
    "url": "https://github.com/redis/jedis/commit/dab21609e63f850517121ae188088716d45da4e8",
    "details": {
      "sha": "5c5bd7a8f1159c302d92a7170c57954c12a0fdf6",
      "filename": "src/test/java/redis/clients/jedis/tests/JedisTest.java",
      "status": "modified",
      "additions": 35,
      "deletions": 13,
      "changes": 48,
      "blob_url": "https://github.com/redis/jedis/blob/dab21609e63f850517121ae188088716d45da4e8/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/dab21609e63f850517121ae188088716d45da4e8/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisTest.java?ref=dab21609e63f850517121ae188088716d45da4e8",
      "patch": "@@ -49,22 +49,44 @@ public static void compareList(List expected, List result) {\n     \tassertEquals(expected.size(), result.size());\n     \t\n     \tfinal Iterator expectedit = expected.iterator();\n-    \tfinal Iterator responseit = result.iterator();\n     \twhile(expectedit.hasNext()) {\n     \t\tfinal Object exp = expectedit.next();\n-    \t\tfinal Object resp = responseit.next();\n-    \t\tif(exp instanceof byte[]) {\n-    \t\t\tfinal byte[] bexp = (byte[]) exp;\n-    \t\t\tfinal byte[] bresp = (byte[]) resp;\n-    \t\t\tAssert.assertArrayEquals(bexp, bresp);\n-    \t\t} else if (exp instanceof List) {\n-    \t\t\tfinal List subexp = (List) exp;\n-    \t\t\tfinal List subresp = (List) resp;\n-    \t\t\tcompareList(subexp, subresp);\n-    \t\t} else {\n-    \t\t\tassertEquals(exp, resp);\n-    \t\t}\n+        \tfinal Iterator responseit = result.iterator();\n+        \tboolean found = false;\n+        \twhile(responseit.hasNext() && !found) {\n+\t    \t\tfinal Object resp = responseit.next();\n+\t    \t\tif(exp instanceof byte[]) {\n+\t    \t\t\tfinal byte[] bexp = (byte[]) exp;\n+\t    \t\t\tfinal byte[] bresp = (byte[]) resp;\n+\t    \t\t\tif(arraysAreEquals(bexp, bresp)) {\n+\t    \t\t\t\tfound = true;\n+\t    \t\t\t}\n+//\t    \t\t\tAssert.assertArrayEquals(bexp, bresp);\n+\t    \t\t} else if (exp instanceof List) {\n+\t    \t\t\tfinal List subexp = (List) exp;\n+\t    \t\t\tfinal List subresp = (List) resp;\n+\t    \t\t\tcompareList(subexp, subresp);\n+\t    \t\t} else {\n+\t    \t\t\tassertEquals(exp, resp);\n+\t    \t\t}\n+        \t}\n+        \tif(!found){\n+        \t\tfail(\"Result doesn't contain \" + exp.toString());\n+        \t}\n     \t}\n     }\n \n+    public static boolean arraysAreEquals(final byte[] expected, final byte[] result) {\n+    \tif(expected.length != result.length) {\n+    \t\treturn false;\n+    \t}\n+    \t\n+    \tfor(int i=0; i < expected.length; i++) {\n+    \t\tif(expected[i] != result[i]) {\n+    \t\t\treturn false;\n+    \t\t}\n+    \t}\n+    \t\n+    \treturn true;\n+    }\n }",
      "parent_sha": "ead39394a11e75d1f26989b2477d40c62404b60f"
    }
  },
  {
    "oid": "fe96e9349c90d1ce882c65ea23f0bbbf7c9fbc87",
    "message": "Test: More UDS test (#3328)",
    "date": "2023-03-22T06:16:41Z",
    "url": "https://github.com/redis/jedis/commit/fe96e9349c90d1ce882c65ea23f0bbbf7c9fbc87",
    "details": {
      "sha": "24eb898eafaa9b7ff0259f09d8c73378f6eca179",
      "filename": "src/test/java/redis/clients/jedis/UdsTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/redis/jedis/blob/fe96e9349c90d1ce882c65ea23f0bbbf7c9fbc87/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FUdsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/fe96e9349c90d1ce882c65ea23f0bbbf7c9fbc87/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FUdsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FUdsTest.java?ref=fe96e9349c90d1ce882c65ea23f0bbbf7c9fbc87",
      "patch": "@@ -6,22 +6,23 @@\n import org.junit.Test;\n import org.newsclub.net.unix.AFUNIXSocket;\n import org.newsclub.net.unix.AFUNIXSocketAddress;\n-\n-//import redis.clients.jedis.HostAndPort;\n-//import redis.clients.jedis.Jedis;\n-import redis.clients.jedis.UnifiedJedis;\n-import redis.clients.jedis.JedisSocketFactory;\n-import redis.clients.jedis.Protocol;\n import redis.clients.jedis.exceptions.JedisConnectionException;\n \n import static org.junit.Assert.assertEquals;\n \n public class UdsTest {\n \n   @Test\n-  public void testConnectsToUds() {\n+  public void jedisConnectsToUds() {\n+    try (Jedis jedis = new Jedis(new UdsJedisSocketFactory())) {\n+      assertEquals(\"PONG\", jedis.ping());\n+    }\n+  }\n+\n+  @Test\n+  public void unifiedJedisConnectsToUds() {\n     try (UnifiedJedis jedis = new UnifiedJedis(new UdsJedisSocketFactory())) {\n-//      assertEquals(\"PONG\", jedis.ping());\n+      assertEquals(\"PONG\", jedis.ping());\n     }\n   }\n ",
      "parent_sha": "fdd154e9bee8d91e335ab932ef73bc075f018152"
    }
  },
  {
    "oid": "d2f6712cb633a5cba84ef0c555be7caeec7a8abb",
    "message": "Direct FT.CREATE to proper node in LIGHT search mode (#3593)\n\nalong with some other commands.\r\n\r\nFT.SEARCH and some other commads were already being directed.",
    "date": "2023-10-19T13:22:58Z",
    "url": "https://github.com/redis/jedis/commit/d2f6712cb633a5cba84ef0c555be7caeec7a8abb",
    "details": {
      "sha": "0cca329106f108a287641d99194122fb3faca147",
      "filename": "src/main/java/redis/clients/jedis/CommandObjects.java",
      "status": "modified",
      "additions": 44,
      "deletions": 28,
      "changes": 72,
      "blob_url": "https://github.com/redis/jedis/blob/d2f6712cb633a5cba84ef0c555be7caeec7a8abb/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FCommandObjects.java",
      "raw_url": "https://github.com/redis/jedis/raw/d2f6712cb633a5cba84ef0c555be7caeec7a8abb/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FCommandObjects.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FCommandObjects.java?ref=d2f6712cb633a5cba84ef0c555be7caeec7a8abb",
      "patch": "@@ -3118,8 +3118,24 @@ private boolean isRoundRobinSearchCommand() {\n     return true;\n   }\n \n-  private CommandArguments checkAndRoundRobinSearchCommand(CommandArguments commandArguments, String indexName) {\n-    return isRoundRobinSearchCommand() ? commandArguments.add(indexName) : commandArguments.key(indexName);\n+  private CommandArguments checkAndRoundRobinSearchCommand(SearchCommand sc, String idx) {\n+    CommandArguments ca = commandArguments(sc);\n+    if (isRoundRobinSearchCommand()) {\n+      ca.add(idx);\n+    } else {\n+      ca.key(idx);\n+    }\n+    return ca;\n+  }\n+\n+  private CommandArguments checkAndRoundRobinSearchCommand(SearchCommand sc, String idx1, String idx2) {\n+    CommandArguments ca = commandArguments(sc);\n+    if (isRoundRobinSearchCommand()) {\n+      ca.add(idx1).add(idx2);\n+    } else {\n+      ca.key(idx1).key(idx2);\n+    }\n+    return ca;\n   }\n \n   private CommandArguments checkAndRoundRobinSearchCommand(CommandArguments commandArguments, byte[] indexName) {\n@@ -3132,68 +3148,68 @@ private <T> CommandObject<T> directSearchCommand(CommandObject<T> object, String\n   }\n \n   public final CommandObject<String> ftCreate(String indexName, IndexOptions indexOptions, Schema schema) {\n-    CommandArguments args = commandArguments(SearchCommand.CREATE).add(indexName)\n+    CommandArguments args = checkAndRoundRobinSearchCommand(SearchCommand.CREATE, indexName)\n         .addParams(indexOptions).add(SearchKeyword.SCHEMA);\n     schema.fields.forEach(field -> args.addParams(field));\n     return new CommandObject<>(args, BuilderFactory.STRING);\n   }\n \n   public final CommandObject<String> ftCreate(String indexName, FTCreateParams createParams,\n       Iterable<SchemaField> schemaFields) {\n-    CommandArguments args = commandArguments(SearchCommand.CREATE).add(indexName)\n+    CommandArguments args = checkAndRoundRobinSearchCommand(SearchCommand.CREATE, indexName)\n         .addParams(createParams).add(SearchKeyword.SCHEMA);\n     schemaFields.forEach(field -> args.addParams(field));\n     return new CommandObject<>(args, BuilderFactory.STRING);\n   }\n \n   public final CommandObject<String> ftAlter(String indexName, Schema schema) {\n-    CommandArguments args = commandArguments(SearchCommand.ALTER).add(indexName)\n+    CommandArguments args = checkAndRoundRobinSearchCommand(SearchCommand.ALTER, indexName)\n         .add(SearchKeyword.SCHEMA).add(SearchKeyword.ADD);\n     schema.fields.forEach(field -> args.addParams(field));\n     return new CommandObject<>(args, BuilderFactory.STRING);\n   }\n \n   public final CommandObject<String> ftAlter(String indexName, Iterable<SchemaField> schemaFields) {\n-    CommandArguments args = commandArguments(SearchCommand.ALTER).add(indexName)\n+    CommandArguments args = checkAndRoundRobinSearchCommand(SearchCommand.ALTER, indexName)\n         .add(SearchKeyword.SCHEMA).add(SearchKeyword.ADD);\n     schemaFields.forEach(field -> args.addParams(field));\n     return new CommandObject<>(args, BuilderFactory.STRING);\n   }\n \n   public final CommandObject<String> ftAliasAdd(String aliasName, String indexName) {\n-    return new CommandObject<>(commandArguments(SearchCommand.ALIASADD).add(aliasName).add(indexName), BuilderFactory.STRING);\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.ALIASADD, aliasName, indexName), BuilderFactory.STRING);\n   }\n \n   public final CommandObject<String> ftAliasUpdate(String aliasName, String indexName) {\n-    return new CommandObject<>(commandArguments(SearchCommand.ALIASUPDATE).add(aliasName).add(indexName), BuilderFactory.STRING);\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.ALIASUPDATE, aliasName, indexName), BuilderFactory.STRING);\n   }\n \n    public final CommandObject<String> ftAliasDel(String aliasName) {\n-    return new CommandObject<>(commandArguments(SearchCommand.ALIASDEL).add(aliasName), BuilderFactory.STRING);\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.ALIASDEL, aliasName), BuilderFactory.STRING);\n   }\n \n   public final CommandObject<String> ftDropIndex(String indexName) {\n-    return new CommandObject<>(commandArguments(SearchCommand.DROPINDEX).add(indexName), BuilderFactory.STRING);\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.DROPINDEX, indexName), BuilderFactory.STRING);\n   }\n \n   public final CommandObject<String> ftDropIndexDD(String indexName) {\n-    return new CommandObject<>(commandArguments(SearchCommand.DROPINDEX).add(indexName).add(SearchKeyword.DD),\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.DROPINDEX, indexName).add(SearchKeyword.DD),\n         BuilderFactory.STRING);\n   }\n \n   public final CommandObject<SearchResult> ftSearch(String indexName, String query) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.SEARCH), indexName).add(query),\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SEARCH, indexName).add(query),\n         getSearchResultBuilder(() -> new SearchResultBuilder(true, false, true)));\n   }\n \n   public final CommandObject<SearchResult> ftSearch(String indexName, String query, FTSearchParams params) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.SEARCH), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SEARCH, indexName)\n         .add(query).addParams(params.dialectOptional(searchDialect.get())),\n         getSearchResultBuilder(() -> new SearchResultBuilder(!params.getNoContent(), params.getWithScores(), true)));\n   }\n \n   public final CommandObject<SearchResult> ftSearch(String indexName, Query query) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.SEARCH), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SEARCH, indexName)\n         .addParams(query.dialectOptional(searchDialect.get())), getSearchResultBuilder(() -> \n         new SearchResultBuilder(!query.getNoContent(), query.getWithScores(), true)));\n   }\n@@ -3209,35 +3225,35 @@ public final CommandObject<SearchResult> ftSearch(byte[] indexName, Query query)\n   }\n \n   public final CommandObject<String> ftExplain(String indexName, Query query) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.EXPLAIN), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.EXPLAIN, indexName)\n         .addParams(query.dialectOptional(searchDialect.get())), BuilderFactory.STRING);\n   }\n \n   public final CommandObject<List<String>> ftExplainCLI(String indexName, Query query) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.EXPLAINCLI), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.EXPLAINCLI, indexName)\n         .addParams(query.dialectOptional(searchDialect.get())), BuilderFactory.STRING_LIST);\n   }\n \n   public final CommandObject<AggregationResult> ftAggregate(String indexName, AggregationBuilder aggr) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.AGGREGATE), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.AGGREGATE, indexName)\n         .addParams(aggr.dialectOptional(searchDialect.get())), !aggr.isWithCursor() ? AggregationResult.SEARCH_AGGREGATION_RESULT\n         : AggregationResult.SEARCH_AGGREGATION_RESULT_WITH_CURSOR);\n   }\n \n   public final CommandObject<AggregationResult> ftCursorRead(String indexName, long cursorId, int count) {\n     return new CommandObject<>(commandArguments(SearchCommand.CURSOR).add(SearchKeyword.READ)\n-        .add(indexName).add(cursorId).add(SearchKeyword.COUNT).add(count),\n+        .key(indexName).add(cursorId).add(SearchKeyword.COUNT).add(count),\n         AggregationResult.SEARCH_AGGREGATION_RESULT_WITH_CURSOR);\n   }\n \n   public final CommandObject<String> ftCursorDel(String indexName, long cursorId) {\n     return new CommandObject<>(commandArguments(SearchCommand.CURSOR).add(SearchKeyword.DEL)\n-        .add(indexName).add(cursorId), BuilderFactory.STRING);\n+        .key(indexName).add(cursorId), BuilderFactory.STRING);\n   }\n \n   public final CommandObject<Map.Entry<AggregationResult, Map<String, Object>>> ftProfileAggregate(\n       String indexName, FTProfileParams profileParams, AggregationBuilder aggr) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.PROFILE), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.PROFILE, indexName)\n         .add(SearchKeyword.AGGREGATE).addParams(profileParams).add(SearchKeyword.QUERY)\n         .addParams(aggr.dialectOptional(searchDialect.get())), new SearchProfileResponseBuilder<>(\n         !aggr.isWithCursor() ? AggregationResult.SEARCH_AGGREGATION_RESULT\n@@ -3246,15 +3262,15 @@ public final CommandObject<Map.Entry<AggregationResult, Map<String, Object>>> ft\n \n   public final CommandObject<Map.Entry<SearchResult, Map<String, Object>>> ftProfileSearch(\n       String indexName, FTProfileParams profileParams, Query query) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.PROFILE), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.PROFILE, indexName)\n         .add(SearchKeyword.SEARCH).addParams(profileParams).add(SearchKeyword.QUERY)\n         .addParams(query.dialectOptional(searchDialect.get())), new SearchProfileResponseBuilder<>(\n             getSearchResultBuilder(() -> new SearchResultBuilder(!query.getNoContent(), query.getWithScores(), true))));\n   }\n \n   public final CommandObject<Map.Entry<SearchResult, Map<String, Object>>> ftProfileSearch(\n       String indexName, FTProfileParams profileParams, String query, FTSearchParams searchParams) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.PROFILE), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.PROFILE, indexName)\n         .add(SearchKeyword.SEARCH).addParams(profileParams).add(SearchKeyword.QUERY).add(query)\n         .addParams(searchParams.dialectOptional(searchDialect.get())), new SearchProfileResponseBuilder<>(\n             getSearchResultBuilder(() -> new SearchResultBuilder(!searchParams.getNoContent(), searchParams.getWithScores(), true))));\n@@ -3266,12 +3282,12 @@ private Builder<SearchResult> getSearchResultBuilder(Supplier<Builder<SearchResu\n   }\n \n   public final CommandObject<String> ftSynUpdate(String indexName, String synonymGroupId, String... terms) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.SYNUPDATE), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SYNUPDATE, indexName)\n         .add(synonymGroupId).addObjects((Object[]) terms), BuilderFactory.STRING);\n   }\n \n   public final CommandObject<Map<String, List<String>>> ftSynDump(String indexName) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.SYNDUMP), indexName),\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SYNDUMP, indexName),\n         SearchBuilderFactory.SEARCH_SYNONYM_GROUPS);\n   }\n \n@@ -3302,23 +3318,23 @@ public final CommandObject<Set<String>> ftDictDumpBySampleKey(String indexName,\n   }\n \n   public final CommandObject<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.SPELLCHECK), index).add(query),\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SPELLCHECK, index).add(query),\n         SearchBuilderFactory.SEARCH_SPELLCHECK_RESPONSE);\n   }\n \n   public final CommandObject<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query,\n       FTSpellCheckParams spellCheckParams) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.SPELLCHECK), index).add(query)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SPELLCHECK, index).add(query)\n         .addParams(spellCheckParams.dialectOptional(searchDialect.get())), SearchBuilderFactory.SEARCH_SPELLCHECK_RESPONSE);\n   }\n \n   public final CommandObject<Map<String, Object>> ftInfo(String indexName) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.INFO), indexName),\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.INFO, indexName),\n         protocol == RedisProtocol.RESP3 ? BuilderFactory.AGGRESSIVE_ENCODED_OBJECT_MAP : BuilderFactory.ENCODED_OBJECT_MAP);\n   }\n \n   public final CommandObject<Set<String>> ftTagVals(String indexName, String fieldName) {\n-    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.TAGVALS), indexName)\n+    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.TAGVALS, indexName)\n         .add(fieldName), BuilderFactory.STRING_SET);\n   }\n ",
      "parent_sha": "d4d46f9638f35003ef6283f8602d2a286e597479"
    }
  },
  {
    "oid": "0dba977613738080ebc80be3f643ec14ea5ae9c1",
    "message": "Make ClusterPipeliningTest#assertThreadsCount less strict",
    "date": "2023-06-20T13:56:11Z",
    "url": "https://github.com/redis/jedis/commit/0dba977613738080ebc80be3f643ec14ea5ae9c1",
    "details": {
      "sha": "3ed45bae63e62c1aa88f81aa7d05188a7188a9cf",
      "filename": "src/test/java/redis/clients/jedis/ClusterPipeliningTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/0dba977613738080ebc80be3f643ec14ea5ae9c1/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterPipeliningTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/0dba977613738080ebc80be3f643ec14ea5ae9c1/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterPipeliningTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterPipeliningTest.java?ref=0dba977613738080ebc80be3f643ec14ea5ae9c1",
      "patch": "@@ -1095,6 +1095,6 @@ private static void assertThreadsCount() {\n         .filter(thread -> thread != null && thread.getName() != null\n             && thread.getName().startsWith(\"pool-\"))\n         .count();\n-    MatcherAssert.assertThat(count, Matchers.lessThan(9));\n+    MatcherAssert.assertThat(count, Matchers.lessThanOrEqualTo(20));\n   }\n }",
      "parent_sha": "c1454e673c8fecd75462d9b771f0f06198b117e9"
    }
  },
  {
    "oid": "48d03224c26d99e0b6a7866c74e9379777a99416",
    "message": "Only String param in Constructors is an URL (#2872)",
    "date": "2022-02-05T16:14:42Z",
    "url": "https://github.com/redis/jedis/commit/48d03224c26d99e0b6a7866c74e9379777a99416",
    "details": {
      "sha": "4d705b2164e87d253eff4b052e84a19a57007031",
      "filename": "src/main/java/redis/clients/jedis/JedisPooled.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/redis/jedis/blob/48d03224c26d99e0b6a7866c74e9379777a99416/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooled.java",
      "raw_url": "https://github.com/redis/jedis/raw/48d03224c26d99e0b6a7866c74e9379777a99416/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooled.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooled.java?ref=48d03224c26d99e0b6a7866c74e9379777a99416",
      "patch": "@@ -18,8 +18,8 @@ public JedisPooled() {\n     this(Protocol.DEFAULT_HOST, Protocol.DEFAULT_PORT);\n   }\n \n-  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host) {\n-    this(poolConfig, host, Protocol.DEFAULT_PORT);\n+  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String url) {\n+    this(poolConfig, URI.create(url));\n   }\n \n   public JedisPooled(String host, int port) {\n@@ -36,7 +36,7 @@ public JedisPooled(String host, int port) {\n    * @param url\n    */\n   public JedisPooled(final String url) {\n-    super(url);\n+    this(URI.create(url));\n   }\n \n   /**",
      "parent_sha": "7822adae39818cd3bcdf5817f016bdfa68b24fee"
    }
  },
  {
    "oid": "bfc962907bddfe9fd6748b7752b975955dd5b574",
    "message": "default timeout value seems not set properly (I've missed it)",
    "date": "2015-04-21T03:47:13Z",
    "url": "https://github.com/redis/jedis/commit/bfc962907bddfe9fd6748b7752b975955dd5b574",
    "details": {
      "sha": "0da850fd09af9c808dc391267738d23ae7fe1b34",
      "filename": "src/main/java/redis/clients/jedis/BinaryJedisCluster.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/bfc962907bddfe9fd6748b7752b975955dd5b574/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java",
      "raw_url": "https://github.com/redis/jedis/raw/bfc962907bddfe9fd6748b7752b975955dd5b574/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java?ref=bfc962907bddfe9fd6748b7752b975955dd5b574",
      "patch": "@@ -16,7 +16,7 @@ public class BinaryJedisCluster implements BinaryJedisClusterCommands, MultiKeyB\n     JedisClusterBinaryScriptingCommands, Closeable {\n \n   public static final short HASHSLOTS = 16384;\n-  protected static final int DEFAULT_TIMEOUT = 1;\n+  protected static final int DEFAULT_TIMEOUT = 2000;\n   protected static final int DEFAULT_MAX_REDIRECTIONS = 5;\n \n   protected int maxRedirections;",
      "parent_sha": "02a7acf8bf23e65bd53fe75bca85c41c6a4cb2cc"
    }
  },
  {
    "oid": "088d86a60fc7cfd3ba55156fc949059b5e9ecdc9",
    "message": "Update Jedis.java\n\nedit the rpop note (just makei it Specific",
    "date": "2014-07-17T08:40:22Z",
    "url": "https://github.com/redis/jedis/commit/088d86a60fc7cfd3ba55156fc949059b5e9ecdc9",
    "details": {
      "sha": "77cb245b5e803377c9cdbd1eb0bbac0fea76997f",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/088d86a60fc7cfd3ba55156fc949059b5e9ecdc9/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/088d86a60fc7cfd3ba55156fc949059b5e9ecdc9/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=088d86a60fc7cfd3ba55156fc949059b5e9ecdc9",
      "patch": "@@ -1116,8 +1116,8 @@ public String lpop(final String key) {\n \n     /**\n      * Atomically return and remove the first (LPOP) or last (RPOP) element of\n-     * the list. For example if the list contains the elements \"a\",\"b\",\"c\" LPOP\n-     * will return \"a\" and the list will become \"b\",\"c\".\n+     * the list. For example if the list contains the elements \"a\",\"b\",\"c\" RPOP\n+     * will return \"c\" and the list will become \"a\",\"b\".\n      * <p>\n      * If the key does not exist or the list is already empty the special value\n      * 'nil' is returned.",
      "parent_sha": "76df52ef9dabfbd8cd90a595b7c977744f832f97"
    }
  },
  {
    "oid": "395a32c26949983c3900b3847136b474d1b1ce2f",
    "message": "Make sure resource is not null before destroying it",
    "date": "2010-09-09T12:11:58Z",
    "url": "https://github.com/redis/jedis/commit/395a32c26949983c3900b3847136b474d1b1ce2f",
    "details": {
      "sha": "46c0fe91e2ad36445a73f93f0674c117a38b33bf",
      "filename": "src/main/java/redis/clients/jedis/JedisPool.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/395a32c26949983c3900b3847136b474d1b1ce2f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java",
      "raw_url": "https://github.com/redis/jedis/raw/395a32c26949983c3900b3847136b474d1b1ce2f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java?ref=395a32c26949983c3900b3847136b474d1b1ce2f",
      "patch": "@@ -43,7 +43,7 @@ protected Jedis createResource() {\n \n     @Override\n     protected void destroyResource(Jedis jedis) {\n-\tif (jedis.isConnected()) {\n+\tif (jedis != null && jedis.isConnected()) {\n \t    try {\n \t\tjedis.quit();\n \t\tjedis.disconnect();",
      "parent_sha": "8207c2415f573e11cbdb01201d604dbddbceab48"
    }
  },
  {
    "oid": "3313195c1f52c6ad913fc82d39c98ffb37d725c7",
    "message": "Reduce sleep time to resolve test failing issue (#1718)",
    "date": "2017-12-22T05:58:18Z",
    "url": "https://github.com/redis/jedis/commit/3313195c1f52c6ad913fc82d39c98ffb37d725c7",
    "details": {
      "sha": "185b11a4a688f54b34b077c123c1df549f0102b3",
      "filename": "src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/3313195c1f52c6ad913fc82d39c98ffb37d725c7/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/3313195c1f52c6ad913fc82d39c98ffb37d725c7/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java?ref=3313195c1f52c6ad913fc82d39c98ffb37d725c7",
      "patch": "@@ -403,7 +403,7 @@ public void touch() throws Exception {\n \n     jedis.set(\"foo1\", \"bar1\");\n \n-    Thread.sleep(2000);\n+    Thread.sleep(1100); // little over 1 sec\n     assertTrue(jedis.objectIdletime(\"foo1\") > 0);\n \n     reply = jedis.touch(\"foo1\");\n@@ -426,7 +426,7 @@ public void touch() throws Exception {\n \n     jedis.set(bfoo1, bbar1);\n \n-    Thread.sleep(2000);\n+    Thread.sleep(1100); // little over 1 sec\n     assertTrue(jedis.objectIdletime(bfoo1) > 0);\n \n     reply = jedis.touch(bfoo1);",
      "parent_sha": "6c3e6d2e5752af2cd22f4fc56ae83c5282e5d4c6"
    }
  },
  {
    "oid": "3b46620bd3b8a65829c60159872dd2a79eb61795",
    "message": "Fix test with issue hidden due to optional client name (#3357)\n\n* Fix test with issue hidden due to optional client name\r\n\r\n* Avoid keeping residue after test",
    "date": "2023-04-07T05:29:22Z",
    "url": "https://github.com/redis/jedis/commit/3b46620bd3b8a65829c60159872dd2a79eb61795",
    "details": {
      "sha": "3cf2ae43ed230cc43b196b542e00cb69a7c38c5c",
      "filename": "src/test/java/redis/clients/jedis/JedisPooledTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/redis/jedis/blob/3b46620bd3b8a65829c60159872dd2a79eb61795/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooledTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/3b46620bd3b8a65829c60159872dd2a79eb61795/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooledTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooledTest.java?ref=3b46620bd3b8a65829c60159872dd2a79eb61795",
      "patch": "@@ -1,6 +1,7 @@\n package redis.clients.jedis;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n@@ -90,7 +91,8 @@ public void allowUrlWithNoDBAndNoPassword() throws URISyntaxException {\n \n   @Test\n   public void customClientName() {\n-    try (JedisPooled pool = new JedisPooled(hnp, DefaultJedisClientConfig.builder().clientName(\"my_shiny_client_name\").build());\n+    try (JedisPooled pool = new JedisPooled(hnp, DefaultJedisClientConfig.builder()\n+        .clientName(\"my_shiny_client_name\").build());\n         Connection jedis = pool.getPool().getResource()) {\n       assertEquals(\"my_shiny_client_name\", new Jedis(jedis).clientGetname());\n     }\n@@ -167,8 +169,7 @@ public void testResetValidPassword() {\n       assertEquals(0, pool.getPool().getNumActive());\n \n       factory.setPassword(\"foobared\");\n-      pool.set(\"foo\", \"bar\");\n-      assertEquals(\"bar\", pool.get(\"foo\"));\n+      assertNull(pool.get(\"foo\"));\n     }\n   }\n \n@@ -187,8 +188,7 @@ public void testResetValidCredentials() {\n       assertEquals(0, pool.getPool().getNumActive());\n \n       credentialsProvider.setCredentials(new DefaultRedisCredentials(null, \"foobared\"));\n-      pool.set(\"foo\", \"bar\");\n-      assertEquals(\"bar\", pool.get(\"foo\"));\n+      assertNull(pool.get(\"foo\"));\n     }\n   }\n \n@@ -231,20 +231,23 @@ public void cleanUp() {\n       }\n     };\n \n+    // TODO: do it without the help of pool config; from Connection constructor? (configurable) force ping?\n+    GenericObjectPoolConfig<Connection> poolConfig = new GenericObjectPoolConfig<>();\n+    poolConfig.setMaxTotal(1);\n+    poolConfig.setTestOnBorrow(true);\n     try (JedisPooled pool = new JedisPooled(HostAndPorts.getRedisServers().get(0),\n         DefaultJedisClientConfig.builder().credentialsProvider(credentialsProvider)\n-            .clientName(\"my_shiny_client_name\").build())) {\n+            .build(), poolConfig)) {\n       try {\n         pool.get(\"foo\");\n         fail(\"Should not get resource from pool\");\n       } catch (JedisException e) {\n       }\n-      assertEquals(0, pool.getPool().getNumActive());\n+      assertEquals(0, pool.getPool().getNumActive() + pool.getPool().getNumIdle() + pool.getPool().getNumWaiters());\n       assertEquals(1, prepareCount.get());\n       assertEquals(1, cleanupCount.get());\n \n-      pool.set(\"foo\", \"bar\");\n-      assertEquals(\"bar\", pool.get(\"foo\"));\n+      assertNull(pool.get(\"foo\"));\n       assertEquals(2, prepareCount.get());\n       assertEquals(2, cleanupCount.get());\n     }",
      "parent_sha": "3e8a584c9fca4e239292183710665953913ebd6a"
    }
  },
  {
    "oid": "6afabaca1d4d8ebd0121630ab85701aed7b8ebf1",
    "message": "fix redirection's bug",
    "date": "2014-10-21T06:30:27Z",
    "url": "https://github.com/redis/jedis/commit/6afabaca1d4d8ebd0121630ab85701aed7b8ebf1",
    "details": {
      "sha": "231a5ab3afd016e91162b1fdeb2d6dce83f4ce22",
      "filename": "src/main/java/redis/clients/jedis/JedisClusterCommand.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/6afabaca1d4d8ebd0121630ab85701aed7b8ebf1/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java",
      "raw_url": "https://github.com/redis/jedis/raw/6afabaca1d4d8ebd0121630ab85701aed7b8ebf1/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java?ref=6afabaca1d4d8ebd0121630ab85701aed7b8ebf1",
      "patch": "@@ -72,7 +72,7 @@ private T runWithRetries(String key, int redirections,\n \t    connection = null;\n \n \t    // retry with random connection\n-\t    return runWithRetries(key, redirections--, true, asking);\n+\t    return runWithRetries(key, redirections - 1, true, asking);\n \t} catch (JedisRedirectionException jre) {\n \t    if (jre instanceof JedisAskDataException) {\n \t\tasking = true;",
      "parent_sha": "7f45a2ca243db2b704965018b14f04e50ff62d98"
    }
  },
  {
    "oid": "75cbb5d219db103458c6b88ac1a4e9c20c3023cb",
    "message": "Validate host and port of jedis connection (to sentinel master) (#3155)\n\n* Validate host and port of jedis connection\r\n\r\nAdd validation for jedis connection, guarantee the connection pointing at the correct master when switching master.\r\n\r\n* Validate host and port of jedis connection\r\n\r\nAdd validation for jedis connection, guarantee the connection pointing at the correct master when switching master.\r\n\r\n* Refactor variable names\r\n\r\nCo-authored-by: jim.sj <jim.sj@alibaba-inc.com>\r\nCo-authored-by: M Sazzadul Hoque <7600764+sazzad16@users.noreply.github.com>",
    "date": "2022-09-29T15:02:37Z",
    "url": "https://github.com/redis/jedis/commit/75cbb5d219db103458c6b88ac1a4e9c20c3023cb",
    "details": {
      "sha": "6827b620efb666e99f71509afef70cbf3b70f67f",
      "filename": "src/main/java/redis/clients/jedis/JedisFactory.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/redis/jedis/blob/75cbb5d219db103458c6b88ac1a4e9c20c3023cb/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisFactory.java",
      "raw_url": "https://github.com/redis/jedis/raw/75cbb5d219db103458c6b88ac1a4e9c20c3023cb/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisFactory.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisFactory.java?ref=75cbb5d219db103458c6b88ac1a4e9c20c3023cb",
      "patch": "@@ -207,8 +207,18 @@ public void passivateObject(PooledObject<Jedis> pooledJedis) throws Exception {\n   public boolean validateObject(PooledObject<Jedis> pooledJedis) {\n     final Jedis jedis = pooledJedis.getObject();\n     try {\n-      // check HostAndPort ??\n-      return jedis.getConnection().isConnected() && jedis.ping().equals(\"PONG\");\n+      boolean targetHasNotChanged = true;\n+      if (jedisSocketFactory instanceof DefaultJedisSocketFactory) {\n+        HostAndPort targetAddress = ((DefaultJedisSocketFactory) jedisSocketFactory).getHostAndPort();\n+        HostAndPort objectAddress = jedis.getConnection().getHostAndPort();\n+\n+        targetHasNotChanged = targetAddress.getHost().equals(objectAddress.getHost())\n+            && targetAddress.getPort() == objectAddress.getPort();\n+      }\n+\n+      return targetHasNotChanged\n+          && jedis.getConnection().isConnected()\n+          && jedis.ping().equals(\"PONG\");\n     } catch (final Exception e) {\n       logger.error(\"Error while validating pooled Jedis object.\", e);\n       return false;",
      "parent_sha": "7c7257154bd86009d40ec764cf511f6ce476d79b"
    }
  },
  {
    "oid": "f76d34eb4d2e55e407d0de61b47237e6245d8fa7",
    "message": "Using toLowerCase method causes a syntax error if Locale is tr_TR because I dotted and I dottless are different in turkish, e.g. WITHSCORES (#1319)",
    "date": "2016-06-15T21:06:48Z",
    "url": "https://github.com/redis/jedis/commit/f76d34eb4d2e55e407d0de61b47237e6245d8fa7",
    "details": {
      "sha": "e86dbd6dc4be061ef1b2202f2463db90e32dd921",
      "filename": "src/main/java/redis/clients/jedis/Protocol.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/redis/jedis/blob/f76d34eb4d2e55e407d0de61b47237e6245d8fa7/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java",
      "raw_url": "https://github.com/redis/jedis/raw/f76d34eb4d2e55e407d0de61b47237e6245d8fa7/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java?ref=f76d34eb4d2e55e407d0de61b47237e6245d8fa7",
      "patch": "@@ -3,6 +3,7 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Locale;\n \n import redis.clients.jedis.commands.ProtocolCommand;\n import redis.clients.jedis.exceptions.JedisAskDataException;\n@@ -250,7 +251,7 @@ public static enum Keyword {\n     public final byte[] raw;\n \n     Keyword() {\n-      raw = SafeEncoder.encode(this.name().toLowerCase());\n+      raw = SafeEncoder.encode(this.name().toLowerCase(Locale.ENGLISH));\n     }\n   }\n }",
      "parent_sha": "f525c63c109db9b49ac3733715be7774cb3eb329"
    }
  },
  {
    "oid": "07cb946d962a6261a4fa36ae3c1100aad67d9b72",
    "message": "Increase sleep time to reduce flakyness of clusterLinks test",
    "date": "2021-12-28T12:09:45Z",
    "url": "https://github.com/redis/jedis/commit/07cb946d962a6261a4fa36ae3c1100aad67d9b72",
    "details": {
      "sha": "7299933945320d5c54134e096156fa0bf46609c3",
      "filename": "src/test/java/redis/clients/jedis/commands/jedis/ClusterCommandsTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/07cb946d962a6261a4fa36ae3c1100aad67d9b72/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FClusterCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/07cb946d962a6261a4fa36ae3c1100aad67d9b72/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FClusterCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FClusterCommandsTest.java?ref=07cb946d962a6261a4fa36ae3c1100aad67d9b72",
      "patch": "@@ -178,7 +178,7 @@ public void clusterLinks() throws InterruptedException {\n     assertEquals(0, links.size());\n     node1.clusterMeet(\"127.0.0.1\", nodeInfo2.getPort());\n     // wait cluster meet success\n-    Thread.sleep(300);\n+    Thread.sleep(1000L); // flaky, so increasing time\n     links = node1.clusterLinks();\n     assertNotNull(links);\n     assertEquals(2, links.size());",
      "parent_sha": "a4caab297af95449eb8ba4a87253fa3a990b48da"
    }
  },
  {
    "oid": "ddb1870a5f6781f909d9cd803bc0ac17e8846457",
    "message": "Fix bug in JedisCluster del command. Fix #568",
    "date": "2014-02-27T13:48:46Z",
    "url": "https://github.com/redis/jedis/commit/ddb1870a5f6781f909d9cd803bc0ac17e8846457",
    "details": {
      "sha": "121bde8ea2222e3f824c881078adbd6389790fbb",
      "filename": "src/main/java/redis/clients/jedis/JedisCluster.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/ddb1870a5f6781f909d9cd803bc0ac17e8846457/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java",
      "raw_url": "https://github.com/redis/jedis/raw/ddb1870a5f6781f909d9cd803bc0ac17e8846457/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java?ref=ddb1870a5f6781f909d9cd803bc0ac17e8846457",
      "patch": "@@ -1129,7 +1129,7 @@ public Long del(final String key) {\n \t    public Long execute(Jedis connection) {\n \t\treturn connection.del(key);\n \t    }\n-\t}.run(null);\n+\t}.run(key);\n     }\n \n     @Override",
      "parent_sha": "e9cf469200daa7bc759382969eae7e6af115891c"
    }
  },
  {
    "oid": "9006788e6abc535d300c6d211d26a7e57b82968e",
    "message": "Split JedisClusterCommand into multiple methods (#2355)\n\n* Split JedisClusterCommand into multiple methods\r\n\r\nNo behavior changes, just a refactoring.\r\n\r\nChanges:\r\n* Replaces recursion with a for loop\r\n* Extract redirection handling into its own method\r\n* Extract connection-failed handling into its own method\r\n\r\nNote that `tryWithRandomNode` is gone, it was never `true` so it and its\r\ncode didn't survive the refactoring.\r\n\r\n* Drop redundant null check\r\n\r\n* Update src/main/java/redis/clients/jedis/JedisClusterCommand.java\r\n\r\nCo-authored-by: Yang Bodong <bodong.ybd@alibaba-inc.com>\r\n\r\n* Update src/main/java/redis/clients/jedis/JedisClusterCommand.java\r\n\r\nCo-authored-by: Mina Asham <mina.asham@hotmail.com>\r\n\r\n* add last exception as suppressed\r\n\r\n* compatible for #2358\r\n\r\nCo-authored-by: Jens Green Olander <jgreen@spotify.com>\r\nCo-authored-by: Yang Bodong <bodong.ybd@alibaba-inc.com>\r\nCo-authored-by: Mina Asham <mina.asham@hotmail.com>\r\nCo-authored-by: M Sazzadul Hoque <7600764+sazzad16@users.noreply.github.com>",
    "date": "2021-02-26T12:31:10Z",
    "url": "https://github.com/redis/jedis/commit/9006788e6abc535d300c6d211d26a7e57b82968e",
    "details": {
      "sha": "78afe28ed6e1ae4921ace2238d35091a806bcb9f",
      "filename": "src/main/java/redis/clients/jedis/JedisClusterCommand.java",
      "status": "modified",
      "additions": 58,
      "deletions": 52,
      "changes": 110,
      "blob_url": "https://github.com/redis/jedis/blob/9006788e6abc535d300c6d211d26a7e57b82968e/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java",
      "raw_url": "https://github.com/redis/jedis/raw/9006788e6abc535d300c6d211d26a7e57b82968e/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java?ref=9006788e6abc535d300c6d211d26a7e57b82968e",
      "patch": "@@ -1,5 +1,8 @@\n package redis.clients.jedis;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import redis.clients.jedis.exceptions.JedisAskDataException;\n import redis.clients.jedis.exceptions.JedisClusterMaxAttemptsException;\n import redis.clients.jedis.exceptions.JedisClusterOperationException;\n@@ -11,6 +14,8 @@\n \n public abstract class JedisClusterCommand<T> {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(JedisClusterCommand.class);\n+\n   private final JedisClusterConnectionHandler connectionHandler;\n   private final int maxAttempts;\n \n@@ -22,7 +27,7 @@ public JedisClusterCommand(JedisClusterConnectionHandler connectionHandler, int\n   public abstract T execute(Jedis connection);\n \n   public T run(String key) {\n-    return runWithRetries(JedisClusterCRC16.getSlot(key), this.maxAttempts, false, null);\n+    return runWithRetries(JedisClusterCRC16.getSlot(key));\n   }\n \n   public T run(int keyCount, String... keys) {\n@@ -42,11 +47,11 @@ public T run(int keyCount, String... keys) {\n       }\n     }\n \n-    return runWithRetries(slot, this.maxAttempts, false, null);\n+    return runWithRetries(slot);\n   }\n \n   public T runBinary(byte[] key) {\n-    return runWithRetries(JedisClusterCRC16.getSlot(key), this.maxAttempts, false, null);\n+    return runWithRetries(JedisClusterCRC16.getSlot(key));\n   }\n \n   public T runBinary(int keyCount, byte[]... keys) {\n@@ -66,7 +71,7 @@ public T runBinary(int keyCount, byte[]... keys) {\n       }\n     }\n \n-    return runWithRetries(slot, this.maxAttempts, false, null);\n+    return runWithRetries(slot);\n   }\n \n   public T runWithAnyNode() {\n@@ -79,61 +84,62 @@ public T runWithAnyNode() {\n     }\n   }\n \n-  private T runWithRetries(final int slot, int attempts, boolean tryRandomNode, JedisRedirectionException redirect) {\n-    if (attempts <= 0) {\n-      throw new JedisClusterMaxAttemptsException(\"No more cluster attempts left.\");\n-    }\n-\n-    Jedis connection = null;\n-    try {\n-\n-      if (redirect != null) {\n-        connection = this.connectionHandler.getConnectionFromNode(redirect.getTargetNode());\n-        if (redirect instanceof JedisAskDataException) {\n-          // TODO: Pipeline asking with the original command to make it faster....\n-          connection.asking();\n-        }\n-      } else {\n-        if (tryRandomNode) {\n-          connection = connectionHandler.getConnection();\n+  private T runWithRetries(final int slot) {\n+    JedisRedirectionException redirect = null;\n+    Exception lastException = null;\n+    for (int attemptsLeft = this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {\n+      Jedis connection = null;\n+      try {\n+        if (redirect != null) {\n+          connection = connectionHandler.getConnectionFromNode(redirect.getTargetNode());\n+          if (redirect instanceof JedisAskDataException) {\n+            // TODO: Pipeline asking with the original command to make it faster....\n+            connection.asking();\n+          }\n         } else {\n           connection = connectionHandler.getConnectionFromSlot(slot);\n         }\n-      }\n-\n-      return execute(connection);\n \n-    } catch (JedisNoReachableClusterNodeException jnrcne) {\n-      throw jnrcne;\n-    } catch (JedisConnectionException jce) {\n-      // release current connection before recursion\n-      releaseConnection(connection);\n-      connection = null;\n-\n-      if (attempts <= 1) {\n-        //We need this because if node is not reachable anymore - we need to finally initiate slots\n-        //renewing, or we can stuck with cluster state without one node in opposite case.\n-        //But now if maxAttempts = [1 or 2] we will do it too often.\n-        //TODO make tracking of successful/unsuccessful operations for node - do renewing only\n-        //if there were no successful responses from this node last few seconds\n-        this.connectionHandler.renewSlotCache();\n-      }\n-\n-      return runWithRetries(slot, attempts - 1, tryRandomNode, redirect);\n-    } catch (JedisRedirectionException jre) {\n-      // if MOVED redirection occurred,\n-      if (jre instanceof JedisMovedDataException) {\n-        // it rebuilds cluster's slot cache recommended by Redis cluster specification\n-        this.connectionHandler.renewSlotCache(connection);\n+        return execute(connection);\n+\n+      } catch (JedisNoReachableClusterNodeException jnrcne) {\n+        throw jnrcne;\n+      } catch (JedisConnectionException jce) {\n+        lastException = jce;\n+        LOG.debug(\"Failed connecting to Redis: {}\", connection, jce);\n+        // \"- 1\" because we just did one, but the attemptsLeft counter hasn't been decremented yet\n+        handleConnectionProblem(attemptsLeft - 1);\n+      } catch (JedisRedirectionException jre) {\n+        // avoid updating lastException if it is a connection exception\n+        if (lastException == null || lastException instanceof JedisRedirectionException) {\n+          lastException = jre;\n+        }\n+        LOG.debug(\"Redirected by server to {}\", jre.getTargetNode());\n+        redirect = jre;\n+        // if MOVED redirection occurred,\n+        if (jre instanceof JedisMovedDataException) {\n+          // it rebuilds cluster's slot cache recommended by Redis cluster specification\n+          this.connectionHandler.renewSlotCache(connection);\n+        }\n+      } finally {\n+        releaseConnection(connection);\n       }\n+    }\n \n-      // release current connection before recursion\n-      releaseConnection(connection);\n-      connection = null;\n+    JedisClusterMaxAttemptsException maxAttemptsException\n+        = new JedisClusterMaxAttemptsException(\"No more cluster attempts left.\");\n+    maxAttemptsException.addSuppressed(lastException);\n+    throw maxAttemptsException;\n+  }\n \n-      return runWithRetries(slot, attempts - 1, false, jre);\n-    } finally {\n-      releaseConnection(connection);\n+  private void handleConnectionProblem(int attemptsLeft) {\n+    if (attemptsLeft <= 1) {\n+      //We need this because if node is not reachable anymore - we need to finally initiate slots\n+      //renewing, or we can stuck with cluster state without one node in opposite case.\n+      //But now if maxAttempts = [1 or 2] we will do it too often.\n+      //TODO make tracking of successful/unsuccessful operations for node - do renewing only\n+      //if there were no successful responses from this node last few seconds\n+      this.connectionHandler.renewSlotCache();\n     }\n   }\n ",
      "parent_sha": "6f08468f903f826dcbf9a7d088fd974502708eff"
    }
  },
  {
    "oid": "dfd3d824ee8daecda112fa7495f1fe9083e720fb",
    "message": "Calculate cluster slot only once for same key (#1763)\n\neven if re-attempt happens.\r\n\r\nAlso, necessary variables are made to be final.",
    "date": "2018-02-07T04:28:22Z",
    "url": "https://github.com/redis/jedis/commit/dfd3d824ee8daecda112fa7495f1fe9083e720fb",
    "details": {
      "sha": "504fff77e18ef98a1631799b0fd13ae6e1f1af05",
      "filename": "src/main/java/redis/clients/jedis/JedisClusterCommand.java",
      "status": "modified",
      "additions": 15,
      "deletions": 18,
      "changes": 33,
      "blob_url": "https://github.com/redis/jedis/blob/dfd3d824ee8daecda112fa7495f1fe9083e720fb/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java",
      "raw_url": "https://github.com/redis/jedis/raw/dfd3d824ee8daecda112fa7495f1fe9083e720fb/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterCommand.java?ref=dfd3d824ee8daecda112fa7495f1fe9083e720fb",
      "patch": "@@ -8,15 +8,14 @@\n import redis.clients.jedis.exceptions.JedisNoReachableClusterNodeException;\n import redis.clients.jedis.exceptions.JedisRedirectionException;\n import redis.clients.util.JedisClusterCRC16;\n-import redis.clients.util.SafeEncoder;\n \n public abstract class JedisClusterCommand<T> {\n \n   private static final String NO_DISPATCH_MESSAGE = \"No way to dispatch this command to Redis Cluster.\";\n \n-  private JedisClusterConnectionHandler connectionHandler;\n-  private int maxAttempts;\n-  private ThreadLocal<Jedis> askConnection = new ThreadLocal<Jedis>();\n+  private final JedisClusterConnectionHandler connectionHandler;\n+  private final int maxAttempts;\n+  private final ThreadLocal<Jedis> askConnection = new ThreadLocal<Jedis>();\n \n   public JedisClusterCommand(JedisClusterConnectionHandler connectionHandler, int maxAttempts) {\n     this.connectionHandler = connectionHandler;\n@@ -30,18 +29,17 @@ public T run(String key) {\n       throw new JedisClusterException(NO_DISPATCH_MESSAGE);\n     }\n \n-    return runWithRetries(SafeEncoder.encode(key), this.maxAttempts, false, false);\n+    return runWithRetries(JedisClusterCRC16.getSlot(key), this.maxAttempts, false, false);\n   }\n \n   public T run(int keyCount, String... keys) {\n     if (keys == null || keys.length == 0) {\n       throw new JedisClusterException(NO_DISPATCH_MESSAGE);\n     }\n \n-    // For multiple keys, only execute if they all share the\n-    // same connection slot.\n+    // For multiple keys, only execute if they all share the same connection slot.\n+    int slot = JedisClusterCRC16.getSlot(keys[0]);\n     if (keys.length > 1) {\n-      int slot = JedisClusterCRC16.getSlot(keys[0]);\n       for (int i = 1; i < keyCount; i++) {\n         int nextSlot = JedisClusterCRC16.getSlot(keys[i]);\n         if (slot != nextSlot) {\n@@ -51,26 +49,25 @@ public T run(int keyCount, String... keys) {\n       }\n     }\n \n-    return runWithRetries(SafeEncoder.encode(keys[0]), this.maxAttempts, false, false);\n+    return runWithRetries(slot, this.maxAttempts, false, false);\n   }\n \n   public T runBinary(byte[] key) {\n     if (key == null) {\n       throw new JedisClusterException(NO_DISPATCH_MESSAGE);\n     }\n \n-    return runWithRetries(key, this.maxAttempts, false, false);\n+    return runWithRetries(JedisClusterCRC16.getSlot(key), this.maxAttempts, false, false);\n   }\n \n   public T runBinary(int keyCount, byte[]... keys) {\n     if (keys == null || keys.length == 0) {\n       throw new JedisClusterException(NO_DISPATCH_MESSAGE);\n     }\n \n-    // For multiple keys, only execute if they all share the\n-    // same connection slot.\n+    // For multiple keys, only execute if they all share the same connection slot.\n+    int slot = JedisClusterCRC16.getSlot(keys[0]);\n     if (keys.length > 1) {\n-      int slot = JedisClusterCRC16.getSlot(keys[0]);\n       for (int i = 1; i < keyCount; i++) {\n         int nextSlot = JedisClusterCRC16.getSlot(keys[i]);\n         if (slot != nextSlot) {\n@@ -80,7 +77,7 @@ public T runBinary(int keyCount, byte[]... keys) {\n       }\n     }\n \n-    return runWithRetries(keys[0], this.maxAttempts, false, false);\n+    return runWithRetries(slot, this.maxAttempts, false, false);\n   }\n \n   public T runWithAnyNode() {\n@@ -95,7 +92,7 @@ public T runWithAnyNode() {\n     }\n   }\n \n-  private T runWithRetries(byte[] key, int attempts, boolean tryRandomNode, boolean asking) {\n+  private T runWithRetries(final int slot, int attempts, boolean tryRandomNode, boolean asking) {\n     if (attempts <= 0) {\n       throw new JedisClusterMaxRedirectionsException(\"Too many Cluster redirections?\");\n     }\n@@ -115,7 +112,7 @@ private T runWithRetries(byte[] key, int attempts, boolean tryRandomNode, boolea\n         if (tryRandomNode) {\n           connection = connectionHandler.getConnection();\n         } else {\n-          connection = connectionHandler.getConnectionFromSlot(JedisClusterCRC16.getSlot(key));\n+          connection = connectionHandler.getConnectionFromSlot(slot);\n         }\n       }\n \n@@ -140,7 +137,7 @@ private T runWithRetries(byte[] key, int attempts, boolean tryRandomNode, boolea\n         throw jce;\n       }\n \n-      return runWithRetries(key, attempts - 1, tryRandomNode, asking);\n+      return runWithRetries(slot, attempts - 1, tryRandomNode, asking);\n     } catch (JedisRedirectionException jre) {\n       // if MOVED redirection occurred,\n       if (jre instanceof JedisMovedDataException) {\n@@ -161,7 +158,7 @@ private T runWithRetries(byte[] key, int attempts, boolean tryRandomNode, boolea\n         throw new JedisClusterException(jre);\n       }\n \n-      return runWithRetries(key, attempts - 1, false, asking);\n+      return runWithRetries(slot, attempts - 1, false, asking);\n     } finally {\n       releaseConnection(connection);\n     }",
      "parent_sha": "80d5f794e00b5dd6de1a6b5edcf6106e5b2aa524"
    }
  },
  {
    "oid": "2ee7430518ef57136f3ba5f99ae39f0c3335547a",
    "message": "Fixed issue #456 (evalsha loses args).",
    "date": "2013-10-05T21:33:25Z",
    "url": "https://github.com/redis/jedis/commit/2ee7430518ef57136f3ba5f99ae39f0c3335547a",
    "details": {
      "sha": "64f4150396a71ebe931ace5d99b2536811385595",
      "filename": "src/main/java/redis/clients/jedis/BinaryJedis.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/redis/jedis/blob/2ee7430518ef57136f3ba5f99ae39f0c3335547a/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/2ee7430518ef57136f3ba5f99ae39f0c3335547a/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java?ref=2ee7430518ef57136f3ba5f99ae39f0c3335547a",
      "patch": "@@ -3173,12 +3173,18 @@ public Object evalsha(byte[] sha1) {\n         client.evalsha(sha1, 0);\n         return client.getOne();\n     }\n-\n-    public Object evalsha(byte[] sha1, List<byte[]> keys, List<byte[]> args) {\n-        client.setTimeoutInfinite();\n-        client.evalsha(sha1, keys.size(), keys.toArray(new byte[0][]));\n-        return client.getOne();\n-    }\n+\t\t\n+\t\tpublic Object evalsha(byte[] sha1, List<byte[]> keys, List<byte[]> args) {\n+\t\t\tint size = (keys == null ? 0 : keys.size()) + (args == null ? 0 : args.size());\n+\t\t\tList<byte[]> keysArgs = new ArrayList<byte[]>(size);\n+\n+\t\t\tif (keys != null) keysArgs.addAll(keys);\n+\t\t\tif (args != null) keysArgs.addAll(args);\n+\n+\t\t\tclient.setTimeoutInfinite();\n+\t\t\tclient.evalsha(sha1, keys != null ? keys.size() : 0, keysArgs.toArray(new byte[0][]));\n+\t\t\treturn client.getOne();\n+\t\t}\n \n     public Object evalsha(byte[] sha1, int keyCount, byte[]... params) {\n         client.setTimeoutInfinite();",
      "parent_sha": "796f80d9c00abeb3ab22c1beb849ef21eb13e021"
    }
  },
  {
    "oid": "d6169bb33b04d7433a3f9d3cc81ca65fc7c8e0a5",
    "message": "Fix typo (#2587)",
    "date": "2021-07-15T13:40:23Z",
    "url": "https://github.com/redis/jedis/commit/d6169bb33b04d7433a3f9d3cc81ca65fc7c8e0a5",
    "details": {
      "sha": "9fd1abd0b7eaea9e7faaeb77ec54fbd1ade2c88f",
      "filename": "src/main/java/redis/clients/jedis/util/JedisClusterHashTagUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/d6169bb33b04d7433a3f9d3cc81ca65fc7c8e0a5/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Futil%2FJedisClusterHashTagUtil.java",
      "raw_url": "https://github.com/redis/jedis/raw/d6169bb33b04d7433a3f9d3cc81ca65fc7c8e0a5/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Futil%2FJedisClusterHashTagUtil.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Futil%2FJedisClusterHashTagUtil.java?ref=d6169bb33b04d7433a3f9d3cc81ca65fc7c8e0a5",
      "patch": "@@ -1,7 +1,7 @@\n package redis.clients.jedis.util;\n \n /**\n- * Holds various methods/utilities to manipualte and parse redis hash-tags. See <a\n+ * Holds various methods/utilities to manipulate and parse redis hash-tags. See <a\n  * href=\"http://redis.io/topics/cluster-spec\">Cluster-Spec : Keys hash tags</a>\n  */\n public final class JedisClusterHashTagUtil {",
      "parent_sha": "7cc146296167e7b4a5d5a5dca754547c0819a32d"
    }
  },
  {
    "oid": "2c7abd0393194062d6965e0979357461cc052104",
    "message": "Test: Reduce flaky-ness of CLIENT PAUSE tests (#3243)",
    "date": "2022-12-12T15:49:13Z",
    "url": "https://github.com/redis/jedis/commit/2c7abd0393194062d6965e0979357461cc052104",
    "details": {
      "sha": "1220c292664cbb853931709d51ac6273cfbfe0cf",
      "filename": "src/test/java/redis/clients/jedis/commands/jedis/ControlCommandsTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 28,
      "changes": 39,
      "blob_url": "https://github.com/redis/jedis/blob/2c7abd0393194062d6965e0979357461cc052104/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FControlCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/2c7abd0393194062d6965e0979357461cc052104/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FControlCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FControlCommandsTest.java?ref=2c7abd0393194062d6965e0979357461cc052104",
      "patch": "@@ -1,6 +1,7 @@\n package redis.clients.jedis.commands.jedis;\n \n import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThan;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n@@ -250,12 +251,9 @@ public void waitReplicas() {\n   @Test\n   public void clientPause() throws InterruptedException, ExecutionException {\n     ExecutorService executorService = Executors.newFixedThreadPool(2);\n-    try {\n-      final Jedis jedisToPause1 = createJedis();\n-      final Jedis jedisToPause2 = createJedis();\n+    try (Jedis jedisToPause1 = createJedis(); Jedis jedisToPause2 = createJedis();) {\n \n-      int pauseMillis = 1250;\n-      jedis.clientPause(pauseMillis);\n+      jedis.clientPause(1000L);\n \n       Future<Long> latency1 = executorService.submit(new Callable<Long>() {\n         @Override\n@@ -274,32 +272,23 @@ public Long call() throws Exception {\n         }\n       });\n \n-      long latencyMillis1 = latency1.get();\n-      long latencyMillis2 = latency2.get();\n-\n-      int pauseMillisDelta = 100;\n-      assertTrue(pauseMillis <= latencyMillis1 && latencyMillis1 <= pauseMillis + pauseMillisDelta);\n-      assertTrue(pauseMillis <= latencyMillis2 && latencyMillis2 <= pauseMillis + pauseMillisDelta);\n+      assertThat(latency1.get(), greaterThan(100L));\n+      assertThat(latency2.get(), greaterThan(100L));\n \n-      jedisToPause1.close();\n-      jedisToPause2.close();\n     } finally {\n       executorService.shutdown();\n-      if (!executorService.awaitTermination(5, TimeUnit.SECONDS)) {\n+      if (!executorService.awaitTermination(2, TimeUnit.SECONDS)) {\n         executorService.shutdownNow();\n       }\n     }\n   }\n \n   @Test\n   public void clientPauseAll() throws InterruptedException, ExecutionException {\n-    final int pauseMillis = 1250;\n-    final int pauseMillisDelta = 100;\n-\n     ExecutorService executorService = Executors.newFixedThreadPool(1);\n     try (Jedis jedisPause = createJedis()) {\n \n-      jedis.clientPause(pauseMillis, ClientPauseMode.ALL);\n+      jedis.clientPause(1000L, ClientPauseMode.ALL);\n \n       Future<Long> latency = executorService.submit(new Callable<Long>() {\n         @Override\n@@ -310,8 +299,7 @@ public Long call() throws Exception {\n         }\n       });\n \n-      long latencyMillis = latency.get();\n-      assertTrue(pauseMillis <= latencyMillis && latencyMillis <= pauseMillis + pauseMillisDelta);\n+      assertThat(latency.get(), greaterThan(100L));\n \n     } finally {\n       executorService.shutdown();\n@@ -323,13 +311,10 @@ public Long call() throws Exception {\n \n   @Test\n   public void clientPauseWrite() throws InterruptedException, ExecutionException {\n-    final int pauseMillis = 1250;\n-    final int pauseMillisDelta = 100;\n-\n     ExecutorService executorService = Executors.newFixedThreadPool(2);\n     try (Jedis jedisRead = createJedis(); Jedis jedisWrite = createJedis();) {\n \n-      jedis.clientPause(pauseMillis, ClientPauseMode.WRITE);\n+      jedis.clientPause(1000L, ClientPauseMode.WRITE);\n \n       Future<Long> latencyRead = executorService.submit(new Callable<Long>() {\n         @Override\n@@ -348,11 +333,9 @@ public Long call() throws Exception {\n         }\n       });\n \n-      long latencyReadMillis = latencyRead.get();\n-      assertTrue(0 <= latencyReadMillis && latencyReadMillis <= pauseMillisDelta);\n+      assertThat(latencyRead.get(), lessThan(100L));\n \n-      long latencyWriteMillis = latencyWrite.get();\n-      assertTrue(pauseMillis <= latencyWriteMillis && latencyWriteMillis <= pauseMillis + pauseMillisDelta);\n+      assertThat(latencyWrite.get(), greaterThan(100L));\n \n     } finally {\n       executorService.shutdown();",
      "parent_sha": "13321d22058e71cf2d440a1c724cd3e162f71e07"
    }
  },
  {
    "oid": "bba916a5682a3cf7027c11d5bbfeddb3af83fbaf",
    "message": "Propagating same change to PipelineBase#eval",
    "date": "2014-11-30T21:01:16Z",
    "url": "https://github.com/redis/jedis/commit/bba916a5682a3cf7027c11d5bbfeddb3af83fbaf",
    "details": {
      "sha": "b319a27d3f6d0a6088a220c178d066073d211f16",
      "filename": "src/main/java/redis/clients/jedis/PipelineBase.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/redis/jedis/blob/bba916a5682a3cf7027c11d5bbfeddb3af83fbaf/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipelineBase.java",
      "raw_url": "https://github.com/redis/jedis/raw/bba916a5682a3cf7027c11d5bbfeddb3af83fbaf/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipelineBase.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipelineBase.java?ref=bba916a5682a3cf7027c11d5bbfeddb3af83fbaf",
      "patch": "@@ -1284,7 +1284,7 @@ public Response<Double> hincrByFloat(byte[] key, byte[] field,\n     }\n \n     public Response<String> eval(String script) {\n-\treturn this.eval(script, 0, new String[0]);\n+\treturn this.eval(script, 0);\n     }\n \n     public Response<String> eval(String script, List<String> keys,\n@@ -1293,8 +1293,8 @@ public Response<String> eval(String script, List<String> keys,\n \treturn this.eval(script, keys.size(), argv);\n     }\n \n-    public Response<String> eval(String script, int numKeys, String[] argv) {\n-\tgetClient(script).eval(script, numKeys, argv);\n+    public Response<String> eval(String script, int numKeys, String... args) {\n+\tgetClient(script).eval(script, numKeys, args);\n \treturn getResponse(BuilderFactory.STRING);\n     }\n ",
      "parent_sha": "b7b170df793c9a73b3218c25d7eb14789d027e6c"
    }
  },
  {
    "oid": "badfe9898fc22a96d0dd22d4db4da5ffb8a81f76",
    "message": "Cleanup broken connection from ClusterPipeline (#3143)\n\n* Cleanup broken connection from ClusterPipeline\r\n\r\nCleanup connection from MultiNodePipelineBase when there is a connection exception\r\n\r\n* Modify close()\r\n\r\n* Error log",
    "date": "2022-09-20T04:58:04Z",
    "url": "https://github.com/redis/jedis/commit/badfe9898fc22a96d0dd22d4db4da5ffb8a81f76",
    "details": {
      "sha": "e0b855f8e211ea4106ac566f8609203aa5bd1ce2",
      "filename": "src/main/java/redis/clients/jedis/MultiNodePipelineBase.java",
      "status": "modified",
      "additions": 30,
      "deletions": 7,
      "changes": 37,
      "blob_url": "https://github.com/redis/jedis/blob/badfe9898fc22a96d0dd22d4db4da5ffb8a81f76/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FMultiNodePipelineBase.java",
      "raw_url": "https://github.com/redis/jedis/raw/badfe9898fc22a96d0dd22d4db4da5ffb8a81f76/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FMultiNodePipelineBase.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FMultiNodePipelineBase.java?ref=badfe9898fc22a96d0dd22d4db4da5ffb8a81f76",
      "patch": "@@ -1,13 +1,16 @@\n package redis.clients.jedis;\n \n import java.io.Closeable;\n+import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Queue;\n import java.util.Set;\n import org.json.JSONArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import redis.clients.jedis.args.*;\n import redis.clients.jedis.bloom.BFInsertParams;\n@@ -17,6 +20,7 @@\n import redis.clients.jedis.commands.PipelineBinaryCommands;\n import redis.clients.jedis.commands.PipelineCommands;\n import redis.clients.jedis.commands.RedisModulePipelineCommands;\n+import redis.clients.jedis.exceptions.JedisConnectionException;\n import redis.clients.jedis.graph.GraphCommandObjects;\n import redis.clients.jedis.graph.ResultSet;\n import redis.clients.jedis.json.JsonSetParams;\n@@ -30,11 +34,14 @@\n import redis.clients.jedis.search.aggr.AggregationResult;\n import redis.clients.jedis.search.schemafields.SchemaField;\n import redis.clients.jedis.timeseries.*;\n+import redis.clients.jedis.util.IOUtils;\n import redis.clients.jedis.util.KeyValue;\n \n public abstract class MultiNodePipelineBase implements PipelineCommands, PipelineBinaryCommands,\n     RedisModulePipelineCommands, Closeable {\n \n+  private final Logger log = LoggerFactory.getLogger(getClass());\n+\n   private final Map<HostAndPort, Queue<Response<?>>> pipelinedResponses;\n   private final Map<HostAndPort, Connection> connections;\n   private volatile boolean synced;\n@@ -83,22 +90,38 @@ protected final <T> Response<T> appendCommand(CommandObject<T> commandObject) {\n \n   @Override\n   public void close() {\n-    sync();\n-    for (Connection connection : connections.values()) {\n-      connection.close();\n+    try {\n+      sync();\n+    } finally {\n+      for (Connection connection : connections.values()) {\n+        IOUtils.closeQuietly(connection);\n+      }\n     }\n   }\n \n   public final void sync() {\n     if (synced) {\n       return;\n     }\n-    for (Map.Entry<HostAndPort, Queue<Response<?>>> entry : pipelinedResponses.entrySet()) {\n+\n+    Iterator<Map.Entry<HostAndPort, Queue<Response<?>>>> pipelinedResponsesIterator\n+        = pipelinedResponses.entrySet().iterator();\n+    while (pipelinedResponsesIterator.hasNext()) {\n+      Map.Entry<HostAndPort, Queue<Response<?>>> entry = pipelinedResponsesIterator.next();\n       HostAndPort nodeKey = entry.getKey();\n       Queue<Response<?>> queue = entry.getValue();\n-      List<Object> unformatted = connections.get(nodeKey).getMany(queue.size());\n-      for (Object o : unformatted) {\n-        queue.poll().set(o);\n+      Connection connection = connections.get(nodeKey);\n+      try {\n+        List<Object> unformatted = connection.getMany(queue.size());\n+        for (Object o : unformatted) {\n+          queue.poll().set(o);\n+        }\n+      } catch (JedisConnectionException jce) {\n+        log.error(\"Error with connection to \" + nodeKey, jce);\n+        // cleanup the connection\n+        pipelinedResponsesIterator.remove();\n+        connections.remove(nodeKey);\n+        IOUtils.closeQuietly(connection);\n       }\n     }\n     synced = true;",
      "parent_sha": "a692b47b52a14c85099e88f84c06a3b1232b6887"
    }
  },
  {
    "oid": "17213b9c352ff8d1bd6042405ccdc96393b279ba",
    "message": "Fixes JedisCluster.psubscribe() to call the correct psubscribe method.",
    "date": "2016-02-16T14:59:39Z",
    "url": "https://github.com/redis/jedis/commit/17213b9c352ff8d1bd6042405ccdc96393b279ba",
    "details": {
      "sha": "7eed09714e8fd33006e00b53b6a2a9120748d265",
      "filename": "src/main/java/redis/clients/jedis/JedisCluster.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/17213b9c352ff8d1bd6042405ccdc96393b279ba/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java",
      "raw_url": "https://github.com/redis/jedis/raw/17213b9c352ff8d1bd6042405ccdc96393b279ba/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java?ref=17213b9c352ff8d1bd6042405ccdc96393b279ba",
      "patch": "@@ -1553,7 +1553,7 @@ public void psubscribe(final JedisPubSub jedisPubSub, final String... patterns)\n     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n-        connection.subscribe(jedisPubSub, patterns);\n+        connection.psubscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();",
      "parent_sha": "d3b07f2c4fcc7a86781e885f0b502fe47af8423d"
    }
  },
  {
    "oid": "234336b58bfb60fa4ea5ea088f74100dca05c10c",
    "message": "Fix @see tags referencing int params that are now long",
    "date": "2011-06-23T23:49:28Z",
    "url": "https://github.com/redis/jedis/commit/234336b58bfb60fa4ea5ea088f74100dca05c10c",
    "details": {
      "sha": "60768fac242f93804ccb1be165fc105a581185f2",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/redis/jedis/blob/234336b58bfb60fa4ea5ea088f74100dca05c10c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/234336b58bfb60fa4ea5ea088f74100dca05c10c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=234336b58bfb60fa4ea5ea088f74100dca05c10c",
      "patch": "@@ -508,7 +508,7 @@ public Long msetnx(final String... keysvalues) {\n      * \n      * @see #incr(String)\n      * @see #decr(String)\n-     * @see #incrBy(String, int)\n+     * @see #incrBy(String, long)\n      * \n      * @param key\n      * @param integer\n@@ -536,8 +536,8 @@ public Long decrBy(final String key, final long integer) {\n      * Time complexity: O(1)\n      * \n      * @see #incr(String)\n-     * @see #incrBy(String, int)\n-     * @see #decrBy(String, int)\n+     * @see #incrBy(String, long)\n+     * @see #decrBy(String, long)\n      * \n      * @param key\n      * @return Integer reply, this commands will reply with the new value of key\n@@ -564,7 +564,7 @@ public Long decr(final String key) {\n      * \n      * @see #incr(String)\n      * @see #decr(String)\n-     * @see #decrBy(String, int)\n+     * @see #decrBy(String, long)\n      * \n      * @param key\n      * @param integer\n@@ -591,9 +591,9 @@ public Long incrBy(final String key, final long integer) {\n      * <p>\n      * Time complexity: O(1)\n      * \n-     * @see #incrBy(String, int)\n+     * @see #incrBy(String, long)\n      * @see #decr(String)\n-     * @see #decrBy(String, int)\n+     * @see #decrBy(String, long)\n      * \n      * @param key\n      * @return Integer reply, this commands will reply with the new value of key\n@@ -1042,7 +1042,7 @@ public String lindex(final String key, final long index) {\n      * O(N) (with N being the length of the list), setting the first or last\n      * elements of the list is O(1).\n      * \n-     * @see #lindex(String, int)\n+     * @see #lindex(String, long)\n      * \n      * @param key\n      * @param index\n@@ -1278,7 +1278,7 @@ public Boolean sismember(final String key, final String member) {\n     /**\n      * Return the members of a set resulting from the intersection of all the\n      * sets hold at the specified keys. Like in\n-     * {@link #lrange(String, int, int) LRANGE} the result is sent to the client\n+     * {@link #lrange(String, long, long) LRANGE} the result is sent to the client\n      * as a multi-bulk reply (see the protocol specification for more\n      * information). If just a single key is specified, then this command\n      * produces the same result as {@link #smembers(String) SMEMBERS}. Actually\n@@ -1320,7 +1320,7 @@ public Long sinterstore(final String dstkey, final String... keys) {\n \n     /**\n      * Return the members of a set resulting from the union of all the sets hold\n-     * at the specified keys. Like in {@link #lrange(String, int, int) LRANGE}\n+     * at the specified keys. Like in {@link #lrange(String, long, long) LRANGE}\n      * the result is sent to the client as a multi-bulk reply (see the protocol\n      * specification for more information). If just a single key is specified,\n      * then this command produces the same result as {@link #smembers(String)",
      "parent_sha": "6c3ec9fc14900161843ba0598abd93b05a3c6f8a"
    }
  },
  {
    "oid": "56ef26aed653aefad4bcb93f439b5b1c61f11bcc",
    "message": "Use expiryOption in PipelineBase.expireAt (#3777)\n\nOne of the expireAt methods in PipelineBase is not using its\r\nExpiryOption argument. Fix this by forwarding that argument too to\r\nthe commandObjects.\r\n\r\nCo-authored-by: Gabriel Erzse <gabriel.erzse@redis.com>",
    "date": "2024-03-18T11:06:41Z",
    "url": "https://github.com/redis/jedis/commit/56ef26aed653aefad4bcb93f439b5b1c61f11bcc",
    "details": {
      "sha": "945d34f615d77159df1c21a57a1c825e34cf75ca",
      "filename": "src/main/java/redis/clients/jedis/PipeliningBase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/56ef26aed653aefad4bcb93f439b5b1c61f11bcc/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeliningBase.java",
      "raw_url": "https://github.com/redis/jedis/raw/56ef26aed653aefad4bcb93f439b5b1c61f11bcc/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeliningBase.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeliningBase.java?ref=56ef26aed653aefad4bcb93f439b5b1c61f11bcc",
      "patch": "@@ -2088,7 +2088,7 @@ public Response<Long> expireAt(byte[] key, long unixTime) {\n \n   @Override\n   public Response<Long> expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {\n-    return appendCommand(commandObjects.expireAt(key, unixTime));\n+    return appendCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n   }\n \n   @Override",
      "parent_sha": "a9d3d3e4b37dc48a8cc9bfac053b4ba6c96df4ca"
    }
  },
  {
    "oid": "cb11ac1c9203949f141f9953a89be3d406e97eb2",
    "message": "Polish #2823 and ClusterCommandsTest (#2831)\n\nPolish #2823 (commit 18043def25db0d5af669554141ea4944dcb28a6f) and ClusterCommandsTest",
    "date": "2022-01-18T17:08:19Z",
    "url": "https://github.com/redis/jedis/commit/cb11ac1c9203949f141f9953a89be3d406e97eb2",
    "details": {
      "sha": "474921c8d6162784f6a832de59f98510475fd793",
      "filename": "src/test/java/redis/clients/jedis/commands/jedis/ClusterCommandsTest.java",
      "status": "modified",
      "additions": 24,
      "deletions": 34,
      "changes": 58,
      "blob_url": "https://github.com/redis/jedis/blob/cb11ac1c9203949f141f9953a89be3d406e97eb2/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FClusterCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/cb11ac1c9203949f141f9953a89be3d406e97eb2/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FClusterCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Fcommands%2Fjedis%2FClusterCommandsTest.java?ref=cb11ac1c9203949f141f9953a89be3d406e97eb2",
      "patch": "@@ -7,8 +7,10 @@\n \n import java.util.List;\n import java.util.Map;\n-\n-import org.junit.*;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n \n import redis.clients.jedis.HostAndPort;\n import redis.clients.jedis.Jedis;\n@@ -76,6 +78,7 @@ public void clusterSetSlotImporting() {\n     String nodeId = nodes[0].split(\" \")[0];\n     String status = node1.clusterSetSlotImporting(6000, nodeId);\n     assertEquals(\"OK\", status);\n+    node2.clusterDelSlots(6000);\n   }\n \n   @Test\n@@ -91,16 +94,9 @@ public void clusterMeet() {\n   }\n \n   @Test\n-  public void clusterAddSlots() {\n-    String status = node1.clusterAddSlots(1, 2, 3, 4, 5);\n-    assertEquals(\"OK\", status);\n-  }\n-\n-  @Test\n-  public void clusterDelSlots() {\n-    node1.clusterAddSlots(900);\n-    String status = node1.clusterDelSlots(900);\n-    assertEquals(\"OK\", status);\n+  public void clusterAddSlotsAndDelSlots() {\n+    assertEquals(\"OK\", node1.clusterAddSlots(1, 2, 3, 4, 5));\n+    assertEquals(\"OK\", node1.clusterDelSlots(1, 2, 3, 4, 5));\n   }\n \n   @Test\n@@ -112,41 +108,36 @@ public void clusterInfo() {\n   @Test\n   public void addAndDelSlotsRange() {\n     // test add\n-    String res = node1.clusterAddSlotsRange(0, 5);\n-    Assert.assertEquals(\"OK\", res);\n-\n+    assertEquals(\"OK\", node1.clusterAddSlotsRange(100, 105));\n     String clusterNodes = node1.clusterNodes();\n-    Assert.assertTrue(clusterNodes.endsWith(\"connected 0-5\\n\"));\n+    assertTrue(clusterNodes.contains(\"connected 100-105\"));\n \n-    res = node1.clusterAddSlotsRange(10, 20);\n-    Assert.assertEquals(\"OK\", res);\n+    assertEquals(\"OK\", node1.clusterAddSlotsRange(110, 120));\n     clusterNodes = node1.clusterNodes();\n-    Assert.assertTrue(clusterNodes.endsWith(\"connected 0-5 10-20\\n\"));\n+    assertTrue(clusterNodes.contains(\"connected 100-105 110-120\"));\n \n     // test del\n-    String resDel = node1.clusterDelSlotsRange(0, 5);\n-    Assert.assertEquals(\"OK\", resDel);\n+    assertEquals(\"OK\", node1.clusterDelSlotsRange(100, 105));\n     clusterNodes = node1.clusterNodes();\n-    Assert.assertTrue(clusterNodes.endsWith(\"connected 10-20\\n\"));\n+    assertTrue(clusterNodes.contains(\"connected 110-120\"));\n \n-    resDel = node1.clusterDelSlotsRange(10, 20);\n-    Assert.assertEquals(\"OK\", resDel);\n-    clusterNodes = node1.clusterNodes();\n-    Assert.assertTrue(clusterNodes.endsWith(\"connected\\n\"));\n+    assertEquals(\"OK\", node1.clusterDelSlotsRange(110, 120));\n   }\n \n   @Test\n   public void clusterGetKeysInSlot() {\n     node1.clusterAddSlots(500);\n     List<String> keys = node1.clusterGetKeysInSlot(500, 1);\n     assertEquals(0, keys.size());\n+    node1.clusterDelSlots(500);\n   }\n \n   @Test\n   public void clusterGetKeysInSlotBinary() {\n     node1.clusterAddSlots(501);\n     List<byte[]> keys = node1.clusterGetKeysInSlotBinary(501, 1);\n     assertEquals(0, keys.size());\n+    node1.clusterDelSlots(501);\n   }\n \n   @Test\n@@ -164,34 +155,33 @@ public void clusterSetSlotMigrating() {\n     String nodeId = nodes[0].split(\" \")[0];\n     String status = node1.clusterSetSlotMigrating(5000, nodeId);\n     assertEquals(\"OK\", status);\n+    node1.clusterDelSlots(5000);\n   }\n \n   @Test\n   public void clusterSlots() {\n     // please see cluster slot output format from below commit\n     // @see: https://github.com/antirez/redis/commit/e14829de3025ffb0d3294e5e5a1553afd9f10b60\n-    String status = node1.clusterAddSlots(3000, 3001, 3002);\n-    assertEquals(\"OK\", status);\n-    status = node2.clusterAddSlots(4000, 4001, 4002);\n-    assertEquals(\"OK\", status);\n+    assertEquals(\"OK\", node1.clusterAddSlots(3000, 3001, 3002));\n \n     List<Object> slots = node1.clusterSlots();\n     assertNotNull(slots);\n-    assertTrue(!slots.isEmpty());\n+    assertTrue(slots.size() > 0);\n \n     for (Object slotInfoObj : slots) {\n+      assertNotNull(slotInfoObj);\n       List<Object> slotInfo = (List<Object>) slotInfoObj;\n-      assertNotNull(slots);\n-      assertTrue(slots.size() >= 2);\n+      assertTrue(slotInfo.size() >= 2);\n \n       assertTrue(slotInfo.get(0) instanceof Long);\n       assertTrue(slotInfo.get(1) instanceof Long);\n \n-      if (slots.size() > 2) {\n+      if (slotInfo.size() > 2) {\n         // assigned slots\n         assertTrue(slotInfo.get(2) instanceof List);\n       }\n     }\n+    node1.clusterDelSlots(3000, 3001, 3002);\n   }\n \n   @Test",
      "parent_sha": "18043def25db0d5af669554141ea4944dcb28a6f"
    }
  },
  {
    "oid": "3d1603b59b1a3aeb50d8a2f166a08bb13bf18ed1",
    "message": "Generate shard nodes by shard position. Shards are now host/port independent",
    "date": "2011-03-02T20:53:27Z",
    "url": "https://github.com/redis/jedis/commit/3d1603b59b1a3aeb50d8a2f166a08bb13bf18ed1",
    "details": {
      "sha": "e24bc9375c093662602654e271218bd76d58bbb8",
      "filename": "src/main/java/redis/clients/util/Sharded.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/redis/jedis/blob/3d1603b59b1a3aeb50d8a2f166a08bb13bf18ed1/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java",
      "raw_url": "https://github.com/redis/jedis/raw/3d1603b59b1a3aeb50d8a2f166a08bb13bf18ed1/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java?ref=3d1603b59b1a3aeb50d8a2f166a08bb13bf18ed1",
      "patch": "@@ -56,7 +56,7 @@ private void initialize(List<S> shards) {\n         for (int i = 0; i != shards.size(); ++i) {\n             final S shardInfo = shards.get(i);\n             for (int n = 0; n < 160 * shardInfo.getWeight(); n++) {\n-                nodes.put(this.algo.hash(shardInfo.toString() + n), shardInfo);\n+                nodes.put(this.algo.hash(\"SHARD-\" + i + \"-NODE-\" + n), shardInfo);\n             }\n             resources.put(shardInfo, shardInfo.createResource());\n         }\n@@ -85,7 +85,7 @@ public S getShardInfo(String key) {\n     /**\n      * A key tag is a special pattern inside a key that, if preset, is the only\n      * part of the key hashed in order to select the server for this key.\n-     * \n+     *\n      * @see http://code.google.com/p/redis/wiki/FAQ#I\n      *      'm_using_some_form_of_key_hashing_for_partitioning,_but_wh\n      * @param key\n@@ -107,4 +107,5 @@ public Collection<S> getAllShardInfo() {\n     public Collection<R> getAllShards() {\n         return Collections.unmodifiableCollection(resources.values());\n     }\n-}\n\\ No newline at end of file\n+}\n+",
      "parent_sha": "2785604639c7f5444af9fdd5075ee9d8bf3f46bc"
    }
  },
  {
    "oid": "33e64bdb6e99dbbd33d7127903f8ac1798780718",
    "message": "Changed redis.clients.jedis.tests.commands.AllKindOfValuesCommandsTest#ttl so that it passes assertion. Once this issue is resolved in Redis the test can be fixed.",
    "date": "2013-08-22T03:03:53Z",
    "url": "https://github.com/redis/jedis/commit/33e64bdb6e99dbbd33d7127903f8ac1798780718",
    "details": {
      "sha": "f0ee6bfc571764d2a567c0b7a3c60dcc3537a502",
      "filename": "src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/redis/jedis/blob/33e64bdb6e99dbbd33d7127903f8ac1798780718/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/33e64bdb6e99dbbd33d7127903f8ac1798780718/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java?ref=33e64bdb6e99dbbd33d7127903f8ac1798780718",
      "patch": "@@ -299,8 +299,11 @@ public void expireAt() {\n \n     @Test\n     public void ttl() {\n+        // This is supposed to return -2 according to\n+        // http://redis.io/commands/ttl\n+        // and needs to be fixed in Redis.\n         long ttl = jedis.ttl(\"foo\");\n-        assertEquals(-2, ttl);\n+        assertEquals(-1, ttl);\n \n         jedis.set(\"foo\", \"bar\");\n         ttl = jedis.ttl(\"foo\");\n@@ -310,9 +313,13 @@ public void ttl() {\n         ttl = jedis.ttl(\"foo\");\n         assertTrue(ttl >= 0 && ttl <= 20);\n \n+        // This is supposed to return -2 according to\n+        // http://redis.io/commands/ttl\n+        // and needs to be fixed in Redis.\n+\n         // Binary\n         long bttl = jedis.ttl(bfoo);\n-        assertEquals(-2, bttl);\n+        assertEquals(-1, bttl);\n \n         jedis.set(bfoo, bbar);\n         bttl = jedis.ttl(bfoo);\n@@ -503,4 +510,4 @@ public void pttl() {\n         assertTrue(pttl >= 0 && pttl <= 20000);\n     }\n \n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "9b78d19dcf93a20a2f50ac62df1d6a618bb63c50"
    }
  },
  {
    "oid": "6e2706b9f519d8a0da251ad06118f8fd5d39cd99",
    "message": "fixing parameters order",
    "date": "2015-02-10T15:47:01Z",
    "url": "https://github.com/redis/jedis/commit/6e2706b9f519d8a0da251ad06118f8fd5d39cd99",
    "details": {
      "sha": "2ec71bf0d797c066abc11365bf9c90bc5f0ea244",
      "filename": "src/main/java/redis/clients/jedis/params/set/SetParams.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/redis/jedis/blob/6e2706b9f519d8a0da251ad06118f8fd5d39cd99/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fparams%2Fset%2FSetParams.java",
      "raw_url": "https://github.com/redis/jedis/raw/6e2706b9f519d8a0da251ad06118f8fd5d39cd99/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fparams%2Fset%2FSetParams.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fparams%2Fset%2FSetParams.java?ref=6e2706b9f519d8a0da251ad06118f8fd5d39cd99",
      "patch": "@@ -59,6 +59,13 @@ public SetParams xx() {\n   public byte[][] getByteParams() {\n     ArrayList<byte[]> byteParams = new ArrayList<byte[]>();\n     \n+    if(contains(NX)) {\n+      byteParams.add(SafeEncoder.encode(NX));\n+    }\n+    if(contains(XX)) {\n+      byteParams.add(SafeEncoder.encode(XX));\n+    }\n+    \n     if(contains(EX)) {\n       byteParams.add(SafeEncoder.encode(EX));\n       byteParams.add(SafeEncoder.encode(String.valueOf(getParam(EX))));\n@@ -68,13 +75,6 @@ public byte[][] getByteParams() {\n       byteParams.add(SafeEncoder.encode(String.valueOf(getParam(PX))));\n     }\n     \n-    if(contains(NX)) {\n-      byteParams.add(SafeEncoder.encode(NX));\n-    }\n-    if(contains(XX)) {\n-      byteParams.add(SafeEncoder.encode(XX));\n-    }\n-    \n     return byteParams.toArray(new byte[byteParams.size()][]);\n   }\n   ",
      "parent_sha": "69ba3fa59b751ae8cf834ae8a777df9b522ef3da"
    }
  },
  {
    "oid": "f3e0ebdd73a1fa99de92948bf5addc422a3d081c",
    "message": "Clarify exception message",
    "date": "2015-06-28T19:03:54Z",
    "url": "https://github.com/redis/jedis/commit/f3e0ebdd73a1fa99de92948bf5addc422a3d081c",
    "details": {
      "sha": "8a235b659ad07e34917ac6bf64148fbc1d6a54d5",
      "filename": "src/main/java/redis/clients/jedis/BinaryJedis.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/redis/jedis/blob/f3e0ebdd73a1fa99de92948bf5addc422a3d081c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/f3e0ebdd73a1fa99de92948bf5addc422a3d081c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java?ref=f3e0ebdd73a1fa99de92948bf5addc422a3d081c",
      "patch": "@@ -1586,9 +1586,12 @@ public Transaction multi() {\n   }\n \n   protected void checkIsInMultiOrPipeline() {\n-    if (client.isInMulti() || pipeline != null) {\n+    if (client.isInMulti()) {\n       throw new JedisDataException(\n-          \"Cannot use Jedis when in Multi or Pipeline. Please use Transation o Pipeline instead.\");\n+          \"Cannot use Jedis when in Multi. Please use Transation or reset jedis state.\");\n+    } else if (pipeline != null) {\n+      throw new JedisDataException(\n+              \"Cannot use Jedis when in Pipeline. Please use Pipeline or reset jedis state .\");\n     }\n   }\n ",
      "parent_sha": "235fe489e3e85785c4f41b27c7a38c30ff855096"
    }
  },
  {
    "oid": "e87b8947c4066b69da8051782264b3cee3deac98",
    "message": "add more tests to pipeline repsonse",
    "date": "2011-04-17T04:03:26Z",
    "url": "https://github.com/redis/jedis/commit/e87b8947c4066b69da8051782264b3cee3deac98",
    "details": {
      "sha": "2e02a7e70e8282298dfa6f748eddc426776dda71",
      "filename": "src/test/java/redis/clients/jedis/tests/PipeliningTest.java",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/redis/jedis/blob/e87b8947c4066b69da8051782264b3cee3deac98/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FPipeliningTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/e87b8947c4066b69da8051782264b3cee3deac98/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FPipeliningTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FPipeliningTest.java?ref=e87b8947c4066b69da8051782264b3cee3deac98",
      "patch": "@@ -2,6 +2,7 @@\n \n import java.io.UnsupportedEncodingException;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import org.junit.Assert;\n@@ -12,6 +13,7 @@\n import redis.clients.jedis.Pipeline;\n import redis.clients.jedis.PipelineBlock;\n import redis.clients.jedis.Response;\n+import redis.clients.jedis.Tuple;\n import redis.clients.jedis.exceptions.JedisDataException;\n import redis.clients.jedis.tests.HostAndPortUtil.HostAndPort;\n \n@@ -66,13 +68,30 @@ public void pipelineResponse() {\n         Response<String> hash = p.hget(\"hash\", \"foo\");\n         Response<Set<String>> zset = p.zrange(\"zset\", 0, -1);\n         Response<String> set = p.spop(\"set\");\n+        Response<Boolean> blist = p.exists(\"list\");\n+        Response<Double> zincrby = p.zincrby(\"zset\", 1, \"foo\");\n+        Response<Long> zcard = p.zcard(\"zset\");\n+        p.lpush(\"list\", \"bar\");\n+        Response<List<String>> lrange = p.lrange(\"list\", 0, -1);\n+        Response<Map<String, String>> hgetAll = p.hgetAll(\"hash\");\n+        p.sadd(\"set\", \"foo\");\n+        Response<Set<String>> smembers = p.smembers(\"set\");\n+        Response<Set<Tuple>> zrangeWithScores = p.zrangeWithScores(\"zset\", 0,\n+                -1);\n         p.sync();\n \n         assertEquals(\"foo\", string.get());\n         assertEquals(\"foo\", list.get());\n         assertEquals(\"bar\", hash.get());\n         assertEquals(\"foo\", zset.get().iterator().next());\n         assertEquals(\"foo\", set.get());\n+        assertEquals(false, blist.get());\n+        assertEquals(new Double(2), zincrby.get());\n+        assertEquals(new Long(1), zcard.get());\n+        assertEquals(1, lrange.get().size());\n+        assertNotNull(hgetAll.get().get(\"foo\"));\n+        assertEquals(1, smembers.get().size());\n+        assertEquals(1, zrangeWithScores.get().size());\n     }\n \n     @Test(expected = JedisDataException.class)\n@@ -84,4 +103,4 @@ public void pipelineResponseWithinPipeline() {\n         string.get();\n         p.sync();\n     }\n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "713cb15b03bddbb8cd8fb2af186595fb897c5254"
    }
  },
  {
    "oid": "20a75417cd40ef7195bcc804383212d62a908a6c",
    "message": "fix - suppress warnings",
    "date": "2013-06-29T04:58:25Z",
    "url": "https://github.com/redis/jedis/commit/20a75417cd40ef7195bcc804383212d62a908a6c",
    "details": {
      "sha": "b717fb246f01240733def763bdc6a09ea364bc48",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/redis/jedis/blob/20a75417cd40ef7195bcc804383212d62a908a6c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/20a75417cd40ef7195bcc804383212d62a908a6c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=20a75417cd40ef7195bcc804383212d62a908a6c",
      "patch": "@@ -2891,7 +2891,8 @@ public Long bitop(BitOP op, final String destKey, String... srcKeys) {\n      * \n      * @return\n      */\n-    public List<Map<String, String>> sentinelMasters() {\n+    @SuppressWarnings(\"rawtypes\")\n+\tpublic List<Map<String, String>> sentinelMasters() {\n \tclient.sentinel(Protocol.SENTINEL_MASTERS);\n \tfinal List<Object> reply = client.getObjectMultiBulkReply();\n \n@@ -2968,7 +2969,8 @@ public Long sentinelReset(String pattern) {\n      * @param masterName\n      * @return\n      */\n-    public List<Map<String, String>> sentinelSlaves(String masterName) {\n+    @SuppressWarnings(\"rawtypes\")\n+\tpublic List<Map<String, String>> sentinelSlaves(String masterName) {\n \tclient.sentinel(Protocol.SENTINEL_SLAVES, masterName);\n \tfinal List<Object> reply = client.getObjectMultiBulkReply();\n \n@@ -2991,11 +2993,13 @@ public List<Map<String, String>> sentinelSlaves(String masterName) {\n      * \n      * @return Long followed by the String (runid)\n      */\n-    public List<? extends Object> sentinelIsMasterDownByAddr(String host,\n+    @SuppressWarnings(\"unchecked\")\n+\tpublic List<? extends Object> sentinelIsMasterDownByAddr(String host,\n \t    int port) {\n \tclient.sentinel(Protocol.SENTINEL_IS_MASTER_DOWN_BY_ADDR, host, port);\n \tfinal List<Object> reply = client.getObjectMultiBulkReply();\n \treturn Arrays.asList(BuilderFactory.LONG.build(reply.get(0)),\n \t\tBuilderFactory.STRING.build(reply.get(1)));\n     }\n+    \n }",
      "parent_sha": "62c30dfe8b84ebb0bc67b54d9f77ec1d292c4317"
    }
  },
  {
    "oid": "8c1bf69a999738fed70e97bf90f2d1cc393704a2",
    "message": "catching any Jedis exception",
    "date": "2015-01-05T16:45:17Z",
    "url": "https://github.com/redis/jedis/commit/8c1bf69a999738fed70e97bf90f2d1cc393704a2",
    "details": {
      "sha": "0017e35c5c25bfb84d8d192893cbef7fcb22af39",
      "filename": "src/main/java/redis/clients/jedis/JedisShardInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/8c1bf69a999738fed70e97bf90f2d1cc393704a2/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisShardInfo.java",
      "raw_url": "https://github.com/redis/jedis/raw/8c1bf69a999738fed70e97bf90f2d1cc393704a2/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisShardInfo.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisShardInfo.java?ref=8c1bf69a999738fed70e97bf90f2d1cc393704a2",
      "patch": "@@ -4,7 +4,7 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n-import redis.clients.jedis.exceptions.JedisConnectionException;\n+import redis.clients.jedis.exceptions.JedisException;\n import redis.clients.util.JedisURIHelper;\n import redis.clients.util.ShardInfo;\n import redis.clients.util.Sharded;\n@@ -112,7 +112,7 @@ public Jedis createResource() {\n     Jedis jedis = new Jedis(this);\n     try {\n       jedis.select(db);\n-    } catch(JedisConnectionException e) {\n+    } catch(JedisException e) {\n       log.log(Level.SEVERE, \"Can't select database due a Redis connection problem\", e);\n     }\n       ",
      "parent_sha": "8af9fe13e711b3e21a1781e2cf61c857084b72e9"
    }
  },
  {
    "oid": "dd62e360fa714c6c93722f362772a71179a0ddda",
    "message": "Apply \"Java Convention\" to met Jedis's preferred source code Convention",
    "date": "2014-02-04T15:45:48Z",
    "url": "https://github.com/redis/jedis/commit/dd62e360fa714c6c93722f362772a71179a0ddda",
    "details": {
      "sha": "4445072baf571b71a73b23ca6a9b5aed2270a9ac",
      "filename": "src/test/java/redis/clients/jedis/tests/JedisSentinelTest.java",
      "status": "modified",
      "additions": 117,
      "deletions": 104,
      "changes": 221,
      "blob_url": "https://github.com/redis/jedis/blob/dd62e360fa714c6c93722f362772a71179a0ddda/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/dd62e360fa714c6c93722f362772a71179a0ddda/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelTest.java?ref=dd62e360fa714c6c93722f362772a71179a0ddda",
      "patch": "@@ -22,14 +22,16 @@ public class JedisSentinelTest extends JedisTestBase {\n \n     protected static HostAndPort master = HostAndPortUtil.getRedisServers()\n \t    .get(0);\n-    protected static HostAndPort slave = HostAndPortUtil.getRedisServers().get(5);\n+    protected static HostAndPort slave = HostAndPortUtil.getRedisServers().get(\n+\t    5);\n     protected static HostAndPort sentinel = HostAndPortUtil\n \t    .getSentinelServers().get(0);\n-    \n-    protected static HostAndPort sentinelForFailover = HostAndPortUtil.getSentinelServers()\n-    \t\t.get(3);\n-    protected static HostAndPort masterForFailover = HostAndPortUtil.getRedisServers().get(6); \n-    \n+\n+    protected static HostAndPort sentinelForFailover = HostAndPortUtil\n+\t    .getSentinelServers().get(3);\n+    protected static HostAndPort masterForFailover = HostAndPortUtil\n+\t    .getRedisServers().get(6);\n+\n     @Before\n     public void setup() throws InterruptedException {\n     }\n@@ -41,128 +43,139 @@ public void clear() throws InterruptedException {\n \t// to restore it (demote)\n \t// so, promote(slaveof) slave to master has no effect, not same to old\n \t// Sentinel's behavior\n-    \tensureRemoved(MONITOR_MASTER_NAME);\n-    \tensureRemoved(REMOVE_MASTER_NAME);\n+\tensureRemoved(MONITOR_MASTER_NAME);\n+\tensureRemoved(REMOVE_MASTER_NAME);\n     }\n \n     @Test\n     public void sentinel() {\n-   \tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n+\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n \tList<Map<String, String>> masters = j.sentinelMasters();\n-\t\n+\n \tboolean inMasters = false;\n \tfor (Map<String, String> master : masters)\n-\t\tif (MASTER_NAME.equals(master.get(\"name\")))\n-\t\t\tinMasters = true;\n-\t\n+\t    if (MASTER_NAME.equals(master.get(\"name\")))\n+\t\tinMasters = true;\n+\n \tassertTrue(inMasters);\n-    \n-\tList<String> masterHostAndPort = j.sentinelGetMasterAddrByName(MASTER_NAME);\n+\n+\tList<String> masterHostAndPort = j\n+\t\t.sentinelGetMasterAddrByName(MASTER_NAME);\n \tHostAndPort masterFromSentinel = new HostAndPort(\n \t\tmasterHostAndPort.get(0), Integer.parseInt(masterHostAndPort\n \t\t\t.get(1)));\n \tassertEquals(master, masterFromSentinel);\n-    \n+\n \tList<Map<String, String>> slaves = j.sentinelSlaves(MASTER_NAME);\n \tassertTrue(slaves.size() > 0);\n-\tassertEquals(master.getPort(), Integer.parseInt(slaves.get(0).get(\"master-port\")));\n-    \n+\tassertEquals(master.getPort(),\n+\t\tInteger.parseInt(slaves.get(0).get(\"master-port\")));\n+\n \t// DO NOT RE-RUN TEST TOO FAST, RESET TAKES SOME TIME TO... RESET\n \tassertEquals(Long.valueOf(1), j.sentinelReset(MASTER_NAME));\n \tassertEquals(Long.valueOf(0), j.sentinelReset(\"woof\" + MASTER_NAME));\n     }\n \n     @Test\n-\tpublic void sentinelFailover() throws InterruptedException {\n-    \tJedis j = new Jedis(sentinelForFailover.getHost(), sentinelForFailover.getPort());\n-    \t\n-    \tHostAndPort currentMaster = new HostAndPort(masterForFailover.getHost(), masterForFailover.getPort());\n-    \t\n-    \tList<String> masterHostAndPort = j.sentinelGetMasterAddrByName(FAILOVER_MASTER_NAME);\n-    \tString result = j.sentinelFailover(FAILOVER_MASTER_NAME);\n-    \tassertEquals(\"OK\", result);\n-    \t\n-\t\tJedisSentinelTestUtil.waitForNewPromotedMaster(sentinelForFailover, FAILOVER_MASTER_NAME, currentMaster);\n-    \t\n-    \tmasterHostAndPort = j.sentinelGetMasterAddrByName(FAILOVER_MASTER_NAME);\n-    \tHostAndPort newMaster = new HostAndPort(masterHostAndPort.get(0), \n-    \t\t\tInteger.parseInt(masterHostAndPort.get(1)));\n-    \t\n-    \tassertNotEquals(newMaster, currentMaster);\n+    public void sentinelFailover() throws InterruptedException {\n+\tJedis j = new Jedis(sentinelForFailover.getHost(),\n+\t\tsentinelForFailover.getPort());\n+\n+\tHostAndPort currentMaster = new HostAndPort(\n+\t\tmasterForFailover.getHost(), masterForFailover.getPort());\n+\n+\tList<String> masterHostAndPort = j\n+\t\t.sentinelGetMasterAddrByName(FAILOVER_MASTER_NAME);\n+\tString result = j.sentinelFailover(FAILOVER_MASTER_NAME);\n+\tassertEquals(\"OK\", result);\n+\n+\tJedisSentinelTestUtil.waitForNewPromotedMaster(sentinelForFailover,\n+\t\tFAILOVER_MASTER_NAME, currentMaster);\n+\n+\tmasterHostAndPort = j.sentinelGetMasterAddrByName(FAILOVER_MASTER_NAME);\n+\tHostAndPort newMaster = new HostAndPort(masterHostAndPort.get(0),\n+\t\tInteger.parseInt(masterHostAndPort.get(1)));\n+\n+\tassertNotEquals(newMaster, currentMaster);\n     }\n-    \n-\t@Test\n-\tpublic void sentinelMonitor() {\n-\t\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n-\t\t\n-\t\t// monitor new master\n-\t\tString result = j.sentinelMonitor(MONITOR_MASTER_NAME, MASTER_IP, master.getPort(), 1);\n-\t\tassertEquals(\"OK\", result);\n-\t\t\n-\t\t// already monitored\n-\t\ttry {\n-\t\t\tj.sentinelMonitor(MONITOR_MASTER_NAME, MASTER_IP, master.getPort(), 1);\n-\t\t\tfail();\n-\t\t} catch (JedisDataException e) {\n-\t\t\t// pass\n-\t\t}\n+\n+    @Test\n+    public void sentinelMonitor() {\n+\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n+\n+\t// monitor new master\n+\tString result = j.sentinelMonitor(MONITOR_MASTER_NAME, MASTER_IP,\n+\t\tmaster.getPort(), 1);\n+\tassertEquals(\"OK\", result);\n+\n+\t// already monitored\n+\ttry {\n+\t    j.sentinelMonitor(MONITOR_MASTER_NAME, MASTER_IP, master.getPort(),\n+\t\t    1);\n+\t    fail();\n+\t} catch (JedisDataException e) {\n+\t    // pass\n \t}\n-\t\n-\t@Test\n-\tpublic void sentinelRemove() {\n-\t\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n-\t\t\n-\t\tensureMonitored(sentinel, REMOVE_MASTER_NAME, MASTER_IP, master.getPort(), 1);\n-\t\t\n-\t\tString result = j.sentinelRemove(REMOVE_MASTER_NAME);\n-\t\tassertEquals(\"OK\", result);\n-\t\t\n-\t\t// not exist\n-\t\ttry {\n-\t\t\tresult = j.sentinelRemove(REMOVE_MASTER_NAME);\n-\t\t\tassertNotEquals(\"OK\", result);\n-\t\t\tfail();\n-\t\t} catch (JedisDataException e) {\n-\t\t\t// pass\n-\t\t}\n+    }\n+\n+    @Test\n+    public void sentinelRemove() {\n+\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n+\n+\tensureMonitored(sentinel, REMOVE_MASTER_NAME, MASTER_IP,\n+\t\tmaster.getPort(), 1);\n+\n+\tString result = j.sentinelRemove(REMOVE_MASTER_NAME);\n+\tassertEquals(\"OK\", result);\n+\n+\t// not exist\n+\ttry {\n+\t    result = j.sentinelRemove(REMOVE_MASTER_NAME);\n+\t    assertNotEquals(\"OK\", result);\n+\t    fail();\n+\t} catch (JedisDataException e) {\n+\t    // pass\n \t}\n-\t\n-\t@Test\n-\tpublic void sentinelSet() {\n-\t\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n-\t\t\n-\t\tMap<String, String> parameterMap = new HashMap<String, String>();\n-\t\tparameterMap.put(\"down-after-milliseconds\", String.valueOf(1234));\n-\t\tparameterMap.put(\"parallel-syncs\", String.valueOf(3));\n-\t\tparameterMap.put(\"quorum\", String.valueOf(2));\n-\t\tj.sentinelSet(MASTER_NAME, parameterMap);\n-\t\t\n-\t\tList<Map<String,String>> masters = j.sentinelMasters();\n-\t\tfor (Map<String, String> master : masters) {\n-\t\t\tif (master.get(\"name\").equals(MASTER_NAME)) {\n-\t\t\t\tassertEquals(1234, Integer.parseInt(master.get(\"down-after-milliseconds\")));\n-\t\t\t\tassertEquals(3, Integer.parseInt(master.get(\"parallel-syncs\")));\n-\t\t\t\tassertEquals(2, Integer.parseInt(master.get(\"quorum\")));\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tparameterMap.put(\"quorum\", String.valueOf(1));\n-\t\tj.sentinelSet(MASTER_NAME, parameterMap);\n+    }\n+\n+    @Test\n+    public void sentinelSet() {\n+\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n+\n+\tMap<String, String> parameterMap = new HashMap<String, String>();\n+\tparameterMap.put(\"down-after-milliseconds\", String.valueOf(1234));\n+\tparameterMap.put(\"parallel-syncs\", String.valueOf(3));\n+\tparameterMap.put(\"quorum\", String.valueOf(2));\n+\tj.sentinelSet(MASTER_NAME, parameterMap);\n+\n+\tList<Map<String, String>> masters = j.sentinelMasters();\n+\tfor (Map<String, String> master : masters) {\n+\t    if (master.get(\"name\").equals(MASTER_NAME)) {\n+\t\tassertEquals(1234,\n+\t\t\tInteger.parseInt(master.get(\"down-after-milliseconds\")));\n+\t\tassertEquals(3, Integer.parseInt(master.get(\"parallel-syncs\")));\n+\t\tassertEquals(2, Integer.parseInt(master.get(\"quorum\")));\n+\t    }\n \t}\n-\t\n-\tprivate void ensureMonitored(HostAndPort sentinel, String masterName, String ip, int port, int quorum) {\n-\t\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n-\t\ttry {\n-\t\t\tj.sentinelMonitor(masterName, ip, port, quorum);\n-\t\t} catch (JedisDataException e) {\n-\t\t}\n+\n+\tparameterMap.put(\"quorum\", String.valueOf(1));\n+\tj.sentinelSet(MASTER_NAME, parameterMap);\n+    }\n+\n+    private void ensureMonitored(HostAndPort sentinel, String masterName,\n+\t    String ip, int port, int quorum) {\n+\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n+\ttry {\n+\t    j.sentinelMonitor(masterName, ip, port, quorum);\n+\t} catch (JedisDataException e) {\n \t}\n-\t\n-\tprivate void ensureRemoved(String masterName) {\n-\t\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n-\t\ttry {\n-\t\t\tj.sentinelRemove(masterName);\n-\t\t} catch (JedisDataException e) {\n-\t\t}\n+    }\n+\n+    private void ensureRemoved(String masterName) {\n+\tJedis j = new Jedis(sentinel.getHost(), sentinel.getPort());\n+\ttry {\n+\t    j.sentinelRemove(masterName);\n+\t} catch (JedisDataException e) {\n \t}\n+    }\n }",
      "parent_sha": "13f0c32f7cbccc12cd00eb42dd1551d001eebcd5"
    }
  },
  {
    "oid": "9dd1cff428b0b5c5ea1b2bf73533be820c3619d9",
    "message": "Compare Tuples based on the element, not the element & score\n\nSet uses equals to compare if the set is already in the set. Redis\nSorted Sets are unique on the value, not the value with the score. The\nTuple.equals should return true when the elements are equal regardless\nof what the score is. The score should be used when comparing to another\nelement in the set to see if it is < or >.",
    "date": "2011-03-08T21:54:52Z",
    "url": "https://github.com/redis/jedis/commit/9dd1cff428b0b5c5ea1b2bf73533be820c3619d9",
    "details": {
      "sha": "dd698e0a36170f88aaa25805df8709ce97c57c42",
      "filename": "src/main/java/redis/clients/jedis/Tuple.java",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/redis/jedis/blob/9dd1cff428b0b5c5ea1b2bf73533be820c3619d9/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FTuple.java",
      "raw_url": "https://github.com/redis/jedis/raw/9dd1cff428b0b5c5ea1b2bf73533be820c3619d9/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FTuple.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FTuple.java?ref=9dd1cff428b0b5c5ea1b2bf73533be820c3619d9",
      "patch": "@@ -4,7 +4,7 @@\n \n import redis.clients.util.SafeEncoder;\n \n-public class Tuple {\n+public class Tuple implements Comparable {\n     private byte[] element;\n     private Double score;\n \n@@ -38,12 +38,22 @@ public boolean equals(Object obj) {\n                 return false;\n         } else if (!Arrays.equals(element, other.element))\n             return false;\n-        if (Double.doubleToLongBits(score) != Double\n-                .doubleToLongBits(other.score))\n-            return false;\n         return true;\n     }\n \n+    public int compareTo(Tuple other) {\n+        if (Arrays.equals(this.element, other.element))\n+            return 0;\n+        else\n+            return this.score < other.getScore() ? -1 : 1;\n+    }\n+    public int compareTo(Object obj) {\n+        if (getClass() != obj.getClass())\n+            throw new ClassCastException();\n+        return compareTo((Tuple) obj);\n+    }\n+    \n+\n     public Tuple(String element, Double score) {\n         super();\n         this.element = SafeEncoder.encode(element);",
      "parent_sha": "121af749722a96e000267528706e1bb722abfd5a"
    }
  },
  {
    "oid": "8af9fe13e711b3e21a1781e2cf61c857084b72e9",
    "message": "protecting against connection problems when trying to select database with Sharded Jedis",
    "date": "2015-01-05T16:39:06Z",
    "url": "https://github.com/redis/jedis/commit/8af9fe13e711b3e21a1781e2cf61c857084b72e9",
    "details": {
      "sha": "8c2f365ccc1c17b244e6a8be3d9b90bc7f3a39f2",
      "filename": "src/main/java/redis/clients/jedis/JedisShardInfo.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/redis/jedis/blob/8af9fe13e711b3e21a1781e2cf61c857084b72e9/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisShardInfo.java",
      "raw_url": "https://github.com/redis/jedis/raw/8af9fe13e711b3e21a1781e2cf61c857084b72e9/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisShardInfo.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisShardInfo.java?ref=8af9fe13e711b3e21a1781e2cf61c857084b72e9",
      "patch": "@@ -1,12 +1,17 @@\n package redis.clients.jedis;\n \n import java.net.URI;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n+import redis.clients.jedis.exceptions.JedisConnectionException;\n import redis.clients.util.JedisURIHelper;\n import redis.clients.util.ShardInfo;\n import redis.clients.util.Sharded;\n \n public class JedisShardInfo extends ShardInfo<Jedis> {\n+\n+  protected Logger log = Logger.getLogger(getClass().getName());\n   \n   public String toString() {\n     return host + \":\" + port + \"*\" + getWeight();\n@@ -105,7 +110,12 @@ public int getDb() {\n   @Override\n   public Jedis createResource() {\n     Jedis jedis = new Jedis(this);\n-    jedis.select(db);\n+    try {\n+      jedis.select(db);\n+    } catch(JedisConnectionException e) {\n+      log.log(Level.SEVERE, \"Can't select database due a Redis connection problem\", e);\n+    }\n+      \n     return jedis;\n   }\n ",
      "parent_sha": "754968ceb6f41acdefb697d87f487f4cc4b7b8ca"
    }
  },
  {
    "oid": "0909811538d91b0fd6d88da08012f3026645d8f3",
    "message": "Let JedisSentinelPoolTest recognizes \"aborted failover\" and fail fast\n\n* let unit test fail if -failover-abort-* message is produced while waiting to failover\n** waiting more is meaningless, and there is nothing we can do\n** we can request \"sentinel failover\" to failover again, but it may can fail again",
    "date": "2014-02-15T02:00:46Z",
    "url": "https://github.com/redis/jedis/commit/0909811538d91b0fd6d88da08012f3026645d8f3",
    "details": {
      "sha": "b153c2792a3bd309e0a0db2bdb81b4fcb5f95853",
      "filename": "src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 12,
      "changes": 17,
      "blob_url": "https://github.com/redis/jedis/blob/0909811538d91b0fd6d88da08012f3026645d8f3/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelPoolTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/0909811538d91b0fd6d88da08012f3026645d8f3/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelPoolTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelPoolTest.java?ref=0909811538d91b0fd6d88da08012f3026645d8f3",
      "patch": "@@ -14,6 +14,7 @@\n import redis.clients.jedis.JedisPubSub;\n import redis.clients.jedis.JedisSentinelPool;\n import redis.clients.jedis.Transaction;\n+import redis.clients.jedis.exceptions.JedisConnectionException;\n import redis.clients.jedis.exceptions.JedisDataException;\n \n public class JedisSentinelPoolTest extends JedisTestBase {\n@@ -86,8 +87,6 @@ private void waitForJedisSentinelPoolRecognizeNewMaster(\n \n \t    @Override\n \t    public void onMessage(String channel, String message) {\n-\t\t// TODO Auto-generated method stub\n-\n \t    }\n \n \t    @Override\n@@ -96,33 +95,27 @@ public void onPMessage(String pattern, String channel,\n \t\tif (channel.equals(\"+switch-master\")) {\n \t\t    newmaster.set(message);\n \t\t    punsubscribe();\n+\t\t} else if (channel.startsWith(\"-failover-abort\")) {\n+\t\t    punsubscribe();\n+\t\t    fail(\"Unfortunately sentinel cannot failover... reason(channel) : \" + \n+\t\t\t    channel + \" / message : \" + message);\n \t\t}\n-\t\t// TODO Auto-generated method stub\n-\n \t    }\n \n \t    @Override\n \t    public void onSubscribe(String channel, int subscribedChannels) {\n-\t\t// TODO Auto-generated method stub\n-\n \t    }\n \n \t    @Override\n \t    public void onUnsubscribe(String channel, int subscribedChannels) {\n-\t\t// TODO Auto-generated method stub\n-\n \t    }\n \n \t    @Override\n \t    public void onPUnsubscribe(String pattern, int subscribedChannels) {\n-\t\t// TODO Auto-generated method stub\n-\n \t    }\n \n \t    @Override\n \t    public void onPSubscribe(String pattern, int subscribedChannels) {\n-\t\t// TODO Auto-generated method stub\n-\n \t    }\n \t}, \"*\");\n ",
      "parent_sha": "d2e073b2f236724a5f051ae8b1ad430518bfce1b"
    }
  },
  {
    "oid": "f16d91550d7aceb4d166230c7c0d3d6489dc458a",
    "message": "made shard iterable in the same order as in config during creation",
    "date": "2011-04-05T14:41:28Z",
    "url": "https://github.com/redis/jedis/commit/f16d91550d7aceb4d166230c7c0d3d6489dc458a",
    "details": {
      "sha": "e45d50238b14913214c66f5edafc18ce9ae7f7e9",
      "filename": "src/main/java/redis/clients/util/Sharded.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/f16d91550d7aceb4d166230c7c0d3d6489dc458a/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java",
      "raw_url": "https://github.com/redis/jedis/raw/f16d91550d7aceb4d166230c7c0d3d6489dc458a/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java?ref=f16d91550d7aceb4d166230c7c0d3d6489dc458a",
      "patch": "@@ -2,7 +2,7 @@\n \n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.SortedMap;\n@@ -15,7 +15,7 @@ public class Sharded<R, S extends ShardInfo<R>> {\n     public static final int DEFAULT_WEIGHT = 1;\n     private TreeMap<Long, S> nodes;\n     private final Hashing algo;\n-    private final Map<ShardInfo<R>, R> resources = new HashMap<ShardInfo<R>, R>();\n+    private final Map<ShardInfo<R>, R> resources = new LinkedHashMap<ShardInfo<R>, R>();\n \n     /**\n      * The default pattern used for extracting a key tag. The pattern must have",
      "parent_sha": "cb0d76051d4bbdb57eeb1e15c52623f8b18a0411"
    }
  },
  {
    "oid": "69c1c644ea1a5097e417ef72abf20690ad6cc716",
    "message": "processBulkReply(...) now return a byte[] (instead of String).",
    "date": "2010-11-04T08:26:26Z",
    "url": "https://github.com/redis/jedis/commit/69c1c644ea1a5097e417ef72abf20690ad6cc716",
    "details": {
      "sha": "0a7f075d5f9c95f191c4dd903d969bd3776f7640",
      "filename": "src/main/java/redis/clients/jedis/Protocol.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/redis/jedis/blob/69c1c644ea1a5097e417ef72abf20690ad6cc716/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java",
      "raw_url": "https://github.com/redis/jedis/raw/69c1c644ea1a5097e417ef72abf20690ad6cc716/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java?ref=69c1c644ea1a5097e417ef72abf20690ad6cc716",
      "patch": "@@ -7,8 +7,6 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import static redis.clients.util.RedisOutputStream.CHARSET;\n-\n public final class Protocol {\n \n     public static final int DEFAULT_PORT = 6379;\n@@ -94,7 +92,7 @@ private String processStatusCodeReply(final RedisInputStream is) {\n         return is.readLine();\n     }\n \n-    private String processBulkReply(final RedisInputStream is) {\n+    private byte[] processBulkReply(final RedisInputStream is) {\n         int len = Integer.parseInt(is.readLine());\n         if (len == -1) {\n             return null;\n@@ -112,7 +110,7 @@ private String processBulkReply(final RedisInputStream is) {\n             throw new JedisException(e);\n         }\n \n-        return new String(read, CHARSET);\n+        return read;\n     }\n \n     private Integer processInteger(final RedisInputStream is) {",
      "parent_sha": "77590f5b21e7f3335a5d7f0f5b7283c9ce27c718"
    }
  },
  {
    "oid": "d08dfd787a3aec10aeaacaee5f1b75e98e9db652",
    "message": "Disable flaky SMOVE in ClusterPipeliningTest (#2775)",
    "date": "2021-12-27T14:43:07Z",
    "url": "https://github.com/redis/jedis/commit/d08dfd787a3aec10aeaacaee5f1b75e98e9db652",
    "details": {
      "sha": "43844ed7a91728af86d3daa64064276a10b1bcac",
      "filename": "src/test/java/redis/clients/jedis/ClusterPipeliningTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/d08dfd787a3aec10aeaacaee5f1b75e98e9db652/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterPipeliningTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/d08dfd787a3aec10aeaacaee5f1b75e98e9db652/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterPipeliningTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterPipeliningTest.java?ref=d08dfd787a3aec10aeaacaee5f1b75e98e9db652",
      "patch": "@@ -461,7 +461,7 @@ public void clusterPipelineSet() {\n     Response<Long> r15 = p.scard(\"my{set}\");\n     Response<String> r16 = p.srandmember(\"my{set}\");\n     Response<List<String>> r17 = p.srandmember(\"my{set}\", 2);\n-    Response<Long> r18 = p.smove(\"my{set}\", \"mynew{set}\", \"hello\");\n+//    Response<Long> r18 = p.smove(\"my{set}\", \"mynew{set}\", \"hello\");\n \n     p.sync();\n     Assert.assertEquals(Long.valueOf(4), r1.get());\n@@ -481,7 +481,7 @@ public void clusterPipelineSet() {\n     Assert.assertEquals(Long.valueOf(2), r15.get());\n     Assert.assertTrue(union.contains(r16.get()));\n     Assert.assertTrue(union.containsAll(r17.get()));\n-    Assert.assertEquals(Long.valueOf(1), r18.get());\n+//    Assert.assertEquals(Long.valueOf(1), r18.get());\n   }\n \n   @Test",
      "parent_sha": "83a8fe5468a1e34bbe26e6c24429cbd765db29ef"
    }
  },
  {
    "oid": "4ed997c423fa2f944d0a207764520ef08b638b7f",
    "message": "Change StreamConsumerFullInfo.getSeenTime() to 'Long'",
    "date": "2023-05-18T12:43:55Z",
    "url": "https://github.com/redis/jedis/commit/4ed997c423fa2f944d0a207764520ef08b638b7f",
    "details": {
      "sha": "6279640888aceb2a6f7bc58895cb761cf9642b67",
      "filename": "src/main/java/redis/clients/jedis/resps/StreamConsumerFullInfo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/redis/jedis/blob/4ed997c423fa2f944d0a207764520ef08b638b7f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fresps%2FStreamConsumerFullInfo.java",
      "raw_url": "https://github.com/redis/jedis/raw/4ed997c423fa2f944d0a207764520ef08b638b7f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fresps%2FStreamConsumerFullInfo.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fresps%2FStreamConsumerFullInfo.java?ref=4ed997c423fa2f944d0a207764520ef08b638b7f",
      "patch": "@@ -42,8 +42,7 @@ public String getName() {\n     return name;\n   }\n \n-  // TODO: Long\n-  public long getSeenTime() {\n+  public Long getSeenTime() {\n     return seenTime;\n   }\n ",
      "parent_sha": "693809ec4b94dea3f7e7f0ca0fe121a7892b5c55"
    }
  },
  {
    "oid": "e00ed7d83b1c51b5be326425e0e5af982c3bc0f9",
    "message": "Proper usage of 'import static' for Command(s). (#1627)",
    "date": "2017-11-18T08:44:40Z",
    "url": "https://github.com/redis/jedis/commit/e00ed7d83b1c51b5be326425e0e5af982c3bc0f9",
    "details": {
      "sha": "d4cf2ca1ee0dbb7f2a795c1459db5fa81bfac7a8",
      "filename": "src/main/java/redis/clients/jedis/BinaryClient.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/redis/jedis/blob/e00ed7d83b1c51b5be326425e0e5af982c3bc0f9/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryClient.java",
      "raw_url": "https://github.com/redis/jedis/raw/e00ed7d83b1c51b5be326425e0e5af982c3bc0f9/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryClient.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryClient.java?ref=e00ed7d83b1c51b5be326425e0e5af982c3bc0f9",
      "patch": "@@ -109,23 +109,23 @@ public void connect() {\n   }\n \n   public void ping() {\n-    sendCommand(Command.PING);\n+    sendCommand(PING);\n   }\n \n   public void ping(final byte[] message) {\n-    sendCommand(Command.PING, message);\n+    sendCommand(PING, message);\n   }\n \n   public void set(final byte[] key, final byte[] value) {\n-    sendCommand(Command.SET, key, value);\n+    sendCommand(SET, key, value);\n   }\n \n   public void set(final byte[] key, final byte[] value, final SetParams params) {\n-    sendCommand(Command.SET, params.getByteParams(key, value));\n+    sendCommand(SET, params.getByteParams(key, value));\n   }\n \n   public void get(final byte[] key) {\n-    sendCommand(Command.GET, key);\n+    sendCommand(GET, key);\n   }\n \n   public void quit() {\n@@ -1189,7 +1189,7 @@ public void cluster(final byte[]... args) {\n   }\n \n   public void asking() {\n-    sendCommand(Command.ASKING);\n+    sendCommand(ASKING);\n   }\n \n   public void pfadd(final byte[] key, final byte[]... elements) {\n@@ -1305,10 +1305,10 @@ public void bitfield(final byte[] key, final byte[]... value) {\n     byte[][] bitfieldArgs = new byte[argsLength + 1][];\n     bitfieldArgs[0] = key;\n     System.arraycopy(value, 0, bitfieldArgs, 1, argsLength);\n-    sendCommand(Command.BITFIELD, bitfieldArgs);\n+    sendCommand(BITFIELD, bitfieldArgs);\n   }\n \n   public void hstrlen(final byte[] key, final byte[] field) {\n-    sendCommand(Command.HSTRLEN, key, field);\n+    sendCommand(HSTRLEN, key, field);\n   }\n }",
      "parent_sha": "94195445ae3a3b09f433b0e1a773b4d0376e0468"
    }
  },
  {
    "oid": "74795cb3229f6d10fabed4ad3aee9ed902e98773",
    "message": "Make reply of ACL LOG compatible with older Redis versions (#4030)",
    "date": "2024-11-27T15:50:55Z",
    "url": "https://github.com/redis/jedis/commit/74795cb3229f6d10fabed4ad3aee9ed902e98773",
    "details": {
      "sha": "922d37fd6a5b3ef9dbef9159494b250f8962e7f2",
      "filename": "src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/redis/jedis/blob/74795cb3229f6d10fabed4ad3aee9ed902e98773/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fresps%2FAccessControlLogEntry.java",
      "raw_url": "https://github.com/redis/jedis/raw/74795cb3229f6d10fabed4ad3aee9ed902e98773/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fresps%2FAccessControlLogEntry.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fresps%2FAccessControlLogEntry.java?ref=74795cb3229f6d10fabed4ad3aee9ed902e98773",
      "patch": "@@ -47,9 +47,10 @@ public AccessControlLogEntry(Map<String, Object> map) {\n     ageSeconds = (Double) map.get(AGE_SECONDS);\n     clientInfo = getMapFromRawClientInfo((String) map.get(CLIENT_INFO));\n     logEntry = map;\n-    entryId = (long) map.get(ENTRY_ID);\n-    timestampCreated = (long) map.get(TIMESTAMP_CREATED);\n-    timestampLastUpdated = (long) map.get(TIMESTAMP_LAST_UPDATED);\n+    // Redis 7.2\n+    entryId = map.containsKey(ENTRY_ID) ? (long) map.get(ENTRY_ID) : -1L;\n+    timestampCreated = map.containsKey(TIMESTAMP_CREATED) ? (long) map.get(TIMESTAMP_CREATED) : -1L;\n+    timestampLastUpdated = map.containsKey(TIMESTAMP_LAST_UPDATED) ? (long) map.get(TIMESTAMP_LAST_UPDATED) : -1L;\n   }\n \n   public long getCount() {",
      "parent_sha": "eb6cc47a2782039c87146a5093420b2e3b58b46c"
    }
  },
  {
    "oid": "1406d90fe827049e62aecee5cfa7b3a12fc5f60f",
    "message": "Do not flush OutputStream to avoid contamination",
    "date": "2015-05-22T02:12:02Z",
    "url": "https://github.com/redis/jedis/commit/1406d90fe827049e62aecee5cfa7b3a12fc5f60f",
    "details": {
      "sha": "216d3d0562abc9eb4daef3d0c9b9d7ff518fa2e9",
      "filename": "src/main/java/redis/clients/jedis/BinaryJedisPubSub.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/1406d90fe827049e62aecee5cfa7b3a12fc5f60f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisPubSub.java",
      "raw_url": "https://github.com/redis/jedis/raw/1406d90fe827049e62aecee5cfa7b3a12fc5f60f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisPubSub.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisPubSub.java?ref=1406d90fe827049e62aecee5cfa7b3a12fc5f60f",
      "patch": "@@ -82,7 +82,7 @@ public void proceed(Client client, byte[]... channels) {\n \n   private void process(Client client) {\n     do {\n-      List<Object> reply = client.getObjectMultiBulkReply();\n+      List<Object> reply = client.getRawObjectMultiBulkReply();\n       final Object firstObj = reply.get(0);\n       if (!(firstObj instanceof byte[])) {\n         throw new JedisException(\"Unknown message type: \" + firstObj);\n@@ -122,4 +122,4 @@ private void process(Client client) {\n   public int getSubscribedChannels() {\n     return subscribedChannels;\n   }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "08a22fa7f049eea4a12a25cb7d6e22ca5beed99e"
    }
  },
  {
    "oid": "9c296000a25f269345ae15c764821cb1948c789b",
    "message": "Remove unnecessary if state",
    "date": "2014-10-05T01:52:05Z",
    "url": "https://github.com/redis/jedis/commit/9c296000a25f269345ae15c764821cb1948c789b",
    "details": {
      "sha": "6c0bdada1a7db88fd350c5b444147e185bdf70bb",
      "filename": "src/main/java/redis/clients/jedis/JedisSentinelPool.java",
      "status": "modified",
      "additions": 12,
      "deletions": 14,
      "changes": 26,
      "blob_url": "https://github.com/redis/jedis/blob/9c296000a25f269345ae15c764821cb1948c789b/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java",
      "raw_url": "https://github.com/redis/jedis/raw/9c296000a25f269345ae15c764821cb1948c789b/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java?ref=9c296000a25f269345ae15c764821cb1948c789b",
      "patch": "@@ -127,23 +127,21 @@ private HostAndPort initSentinels(Set<String> sentinels,\n \t    try {\n \t\tjedis = new Jedis(hap.getHost(), hap.getPort());\n \n-\t\tif (master == null) {\n-\t\t    List<String> masterAddr = jedis\n-\t\t\t    .sentinelGetMasterAddrByName(masterName);\n+\t\tList<String> masterAddr = jedis\n+\t\t\t.sentinelGetMasterAddrByName(masterName);\n \n-\t\t    // connected to sentinel...\n-\t\t    sentinelAvailable = true;\n+\t\t// connected to sentinel...\n+\t\tsentinelAvailable = true;\n \n-\t\t    if (masterAddr == null || masterAddr.size() != 2) {\n-\t\t\tlog.warning(\"Can not get master addr, master name: \"\n-\t\t\t\t+ masterName + \". Sentinel: \" + hap + \".\");\n-\t\t\tcontinue;\n-\t\t    }\n-\n-\t\t    master = toHostAndPort(masterAddr);\n-\t\t    log.fine(\"Found Redis master at \" + master);\n-\t\t    break;\n+\t\tif (masterAddr == null || masterAddr.size() != 2) {\n+\t\t    log.warning(\"Can not get master addr, master name: \"\n+\t\t\t    + masterName + \". Sentinel: \" + hap + \".\");\n+\t\t    continue;\n \t\t}\n+\n+\t\tmaster = toHostAndPort(masterAddr);\n+\t\tlog.fine(\"Found Redis master at \" + master);\n+\t\tbreak;\n \t    } catch (JedisConnectionException e) {\n \t\tlog.warning(\"Cannot connect to sentinel running @ \" + hap\n \t\t\t+ \". Trying next one.\");",
      "parent_sha": "c5336310bd4e0ea3879ef961c21fa69e098699f1"
    }
  },
  {
    "oid": "db826a6c7084b35ca2496ea242d01187dae2b884",
    "message": "Ensure closing connection in Pipeline (#3865)\n\neven if there is an error in sync method.",
    "date": "2024-06-14T17:43:48Z",
    "url": "https://github.com/redis/jedis/commit/db826a6c7084b35ca2496ea242d01187dae2b884",
    "details": {
      "sha": "af6d39ee2d28ecc79f9af5d11557cf19c5edb80b",
      "filename": "src/main/java/redis/clients/jedis/Pipeline.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/redis/jedis/blob/db826a6c7084b35ca2496ea242d01187dae2b884/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java",
      "raw_url": "https://github.com/redis/jedis/raw/db826a6c7084b35ca2496ea242d01187dae2b884/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java?ref=db826a6c7084b35ca2496ea242d01187dae2b884",
      "patch": "@@ -10,6 +10,7 @@\n import redis.clients.jedis.exceptions.JedisDataException;\n import redis.clients.jedis.graph.GraphCommandObjects;\n import redis.clients.jedis.params.*;\n+import redis.clients.jedis.util.IOUtils;\n import redis.clients.jedis.util.KeyValue;\n \n public class Pipeline extends PipelineBase implements DatabasePipelineCommands, Closeable {\n@@ -46,10 +47,12 @@ public final <T> Response<T> appendCommand(CommandObject<T> commandObject) {\n \n   @Override\n   public void close() {\n-    sync();\n-\n-    if (closeConnection) {\n-      connection.close();\n+    try {\n+      sync();\n+    } finally {\n+      if (closeConnection) {\n+        IOUtils.closeQuietly(connection);\n+      }\n     }\n   }\n ",
      "parent_sha": "619f8e33c1469d759f7e35e441f7a656a3604229"
    }
  },
  {
    "oid": "66b0a5784df4aeb62284c2421b46a80213f3d112",
    "message": "fix md5 hashing as MessageDigest is not threadsafe, now using ThreadLocal",
    "date": "2011-05-11T22:45:07Z",
    "url": "https://github.com/redis/jedis/commit/66b0a5784df4aeb62284c2421b46a80213f3d112",
    "details": {
      "sha": "1460f03201d9ae4aa38f02fb8e644761a112ad42",
      "filename": "src/main/java/redis/clients/util/Hashing.java",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/redis/jedis/blob/66b0a5784df4aeb62284c2421b46a80213f3d112/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FHashing.java",
      "raw_url": "https://github.com/redis/jedis/raw/66b0a5784df4aeb62284c2421b46a80213f3d112/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FHashing.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FHashing.java?ref=66b0a5784df4aeb62284c2421b46a80213f3d112",
      "patch": "@@ -5,23 +5,22 @@\n \n public interface Hashing {\n     public static final Hashing MURMUR_HASH = new MurmurHash();\n+    public ThreadLocal<MessageDigest> md5Holder = new ThreadLocal<MessageDigest>();\n \n     public static final Hashing MD5 = new Hashing() {\n-        private MessageDigest md5 = null; // avoid recurring construction\n-\n         public long hash(String key) {\n             return hash(SafeEncoder.encode(key));\n         }\n \n         public long hash(byte[] key) {\n-            if (md5 == null) {\n-                try {\n-                    md5 = MessageDigest.getInstance(\"MD5\");\n-                } catch (NoSuchAlgorithmException e) {\n-                    throw new IllegalStateException(\n-                            \"++++ no md5 algorythm found\");\n+            try {\n+                if (md5Holder.get() == null) {\n+                    md5Holder.set(MessageDigest.getInstance(\"MD5\"));\n                 }\n+            } catch (NoSuchAlgorithmException e) {\n+                throw new IllegalStateException(\"++++ no md5 algorythm found\");\n             }\n+            MessageDigest md5 = md5Holder.get();\n \n             md5.reset();\n             md5.update(key);",
      "parent_sha": "0d6d37b95f503b69a703e076ff2480151a6df388"
    }
  },
  {
    "oid": "6b86fe7f1d6f72ec7a9dfb5de79386f9e500dc6b",
    "message": "Configure a Sentinel Connection when initialising the Sentinel pool (#1943)\n\nThis commit attempts to solve #1487 and #1636.\r\n\r\nThis PR adds a constructor to JedisSentinelPool to configure a Sentinel connection with respective timeout settings and a password. Supporting constructors have also been added to BinaryJedis and Jedis classes.",
    "date": "2019-11-26T09:38:02Z",
    "url": "https://github.com/redis/jedis/commit/6b86fe7f1d6f72ec7a9dfb5de79386f9e500dc6b",
    "details": {
      "sha": "f10f0e6154b6fa1df77ff1f14d3be465f4eda6d0",
      "filename": "src/main/java/redis/clients/jedis/JedisSentinelPool.java",
      "status": "modified",
      "additions": 30,
      "deletions": 8,
      "changes": 38,
      "blob_url": "https://github.com/redis/jedis/blob/6b86fe7f1d6f72ec7a9dfb5de79386f9e500dc6b/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java",
      "raw_url": "https://github.com/redis/jedis/raw/6b86fe7f1d6f72ec7a9dfb5de79386f9e500dc6b/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java?ref=6b86fe7f1d6f72ec7a9dfb5de79386f9e500dc6b",
      "patch": "@@ -17,15 +17,17 @@ public class JedisSentinelPool extends JedisPoolAbstract {\n \n   protected GenericObjectPoolConfig poolConfig;\n \n-  protected int connectionTimeout = Protocol.DEFAULT_TIMEOUT;\n-  protected int soTimeout = Protocol.DEFAULT_TIMEOUT;\n-\n+  protected int connectionTimeout;\n+  protected int soTimeout;\n   protected String password;\n-\n-  protected int database = Protocol.DEFAULT_DATABASE;\n-\n+  protected int database;\n   protected String clientName;\n \n+  protected int sentinelConnectionTimeout;\n+  protected int sentinelSoTimeout;\n+  protected String sentinelPassword;\n+  protected String sentinelClientName;\n+\n   protected Set<MasterListener> masterListeners = new HashSet<MasterListener>();\n \n   protected Logger log = LoggerFactory.getLogger(getClass().getName());\n@@ -86,12 +88,26 @@ public JedisSentinelPool(String masterName, Set<String> sentinels,\n   public JedisSentinelPool(String masterName, Set<String> sentinels,\n       final GenericObjectPoolConfig poolConfig, final int connectionTimeout, final int soTimeout,\n       final String password, final int database, final String clientName) {\n+    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, password, database, clientName,\n+        Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT, null, null);\n+  }\n+\n+  public JedisSentinelPool(String masterName, Set<String> sentinels,\n+      final GenericObjectPoolConfig poolConfig, final int connectionTimeout, final int soTimeout,\n+      final String password, final int database, final String clientName,\n+      final int sentinelConnectionTimeout, final int sentinelSoTimeout, final String sentinelPassword,\n+      final String sentinelClientName) {\n+\n     this.poolConfig = poolConfig;\n     this.connectionTimeout = connectionTimeout;\n     this.soTimeout = soTimeout;\n     this.password = password;\n     this.database = database;\n     this.clientName = clientName;\n+    this.sentinelConnectionTimeout = sentinelConnectionTimeout;\n+    this.sentinelSoTimeout = sentinelSoTimeout;\n+    this.sentinelPassword = sentinelPassword;\n+    this.sentinelClientName = sentinelClientName;\n \n     HostAndPort master = initSentinels(sentinels, masterName);\n     initPool(master);\n@@ -146,7 +162,13 @@ private HostAndPort initSentinels(Set<String> sentinels, final String masterName\n \n       Jedis jedis = null;\n       try {\n-        jedis = new Jedis(hap);\n+        jedis = new Jedis(hap.getHost(), hap.getPort(), sentinelConnectionTimeout, sentinelSoTimeout);\n+        if (sentinelPassword != null) {\n+          jedis.auth(sentinelPassword);\n+        }\n+        if (sentinelClientName != null) {\n+          jedis.clientSetname(sentinelClientName);\n+        }\n \n         List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);\n \n@@ -352,4 +374,4 @@ public void shutdown() {\n       }\n     }\n   }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "832091e1e95cc3e453093b864e5e62cf09681013"
    }
  },
  {
    "oid": "abd464f9bd52f1072e4af1fbaebcc9c2e5407657",
    "message": "Implemented commands are retreived from Protocol.Command enum",
    "date": "2010-11-04T16:48:58Z",
    "url": "https://github.com/redis/jedis/commit/abd464f9bd52f1072e4af1fbaebcc9c2e5407657",
    "details": {
      "sha": "db2db14cdd464263fa8c68e828103604b1998267",
      "filename": "src/test/java/redis/clients/jedis/tests/JedisNewCommandsCheckTest.java",
      "status": "modified",
      "additions": 23,
      "deletions": 17,
      "changes": 40,
      "blob_url": "https://github.com/redis/jedis/blob/abd464f9bd52f1072e4af1fbaebcc9c2e5407657/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisNewCommandsCheckTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/abd464f9bd52f1072e4af1fbaebcc9c2e5407657/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisNewCommandsCheckTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisNewCommandsCheckTest.java?ref=abd464f9bd52f1072e4af1fbaebcc9c2e5407657",
      "patch": "@@ -15,6 +15,7 @@\n \n import redis.clients.jedis.Jedis;\n import redis.clients.jedis.JedisPubSub;\n+import redis.clients.jedis.Protocol.Command;\n import redis.clients.jedis.Transaction;\n \n public class JedisNewCommandsCheckTest extends Assert {\n@@ -36,23 +37,28 @@ public void checkJedisIsUpdated() throws IOException {\n     }\n \n     private Set<String> getImplementedCommands() {\n-\tMethod[] methods = Jedis.class.getDeclaredMethods();\n-\tSet<String> implementedCommands = new HashSet<String>();\n-\tfor (Method method : methods) {\n-\t    implementedCommands.add(method.getName().trim().toLowerCase());\n-\t}\n-\n-\tmethods = JedisPubSub.class.getDeclaredMethods();\n-\tfor (Method method : methods) {\n-\t    implementedCommands.add(method.getName().trim().toLowerCase());\n-\t}\n-\n-\tmethods = Transaction.class.getDeclaredMethods();\n-\tfor (Method method : methods) {\n-\t    implementedCommands.add(method.getName().trim().toLowerCase());\n-\t}\n-\timplementedCommands.add(\"config\");\n-\treturn implementedCommands;\n+//\tMethod[] methods = Jedis.class.getDeclaredMethods();\n+//\tSet<String> implementedCommands = new HashSet<String>();\n+//\tfor (Method method : methods) {\n+//\t    implementedCommands.add(method.getName().trim().toLowerCase());\n+//\t}\n+//\n+//\tmethods = JedisPubSub.class.getDeclaredMethods();\n+//\tfor (Method method : methods) {\n+//\t    implementedCommands.add(method.getName().trim().toLowerCase());\n+//\t}\n+//\n+//\tmethods = Transaction.class.getDeclaredMethods();\n+//\tfor (Method method : methods) {\n+//\t    implementedCommands.add(method.getName().trim().toLowerCase());\n+//\t}\n+//\timplementedCommands.add(\"config\");\n+//\treturn implementedCommands;\n+    \tSet<String> implementedCommands = new HashSet<String>();\n+    \tfor(Command cmd : Command.values()){\n+    \t\timplementedCommands.add(cmd.name().toLowerCase());\n+    \t}\n+    \treturn implementedCommands;\n     }\n \n     private String[] getAvailableCommands() throws MalformedURLException,",
      "parent_sha": "fd8e3116ab4706dcc678ac8eaea5508858c61ed4"
    }
  },
  {
    "oid": "81fc2d6508edb7513b5ecb371874a1fb5ca83d2d",
    "message": "Fix javadoc",
    "date": "2023-04-27T10:39:58Z",
    "url": "https://github.com/redis/jedis/commit/81fc2d6508edb7513b5ecb371874a1fb5ca83d2d",
    "details": {
      "sha": "284b558a2d667fe58c3ce36d48fd42ec6f4656ca",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/81fc2d6508edb7513b5ecb371874a1fb5ca83d2d/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/81fc2d6508edb7513b5ecb371874a1fb5ca83d2d/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=81fc2d6508edb7513b5ecb371874a1fb5ca83d2d",
      "patch": "@@ -3370,9 +3370,7 @@ public long lastsave() {\n    * Synchronously save the DB on disk, then shutdown the server.\n    * <p>\n    * Stop all the clients, save the DB, then quit the server. This commands makes sure that the DB\n-   * is switched off without the lost of any data. This is not guaranteed if the connection uses\n-   * simply {@link Jedis#save() SAVE} and then {@link Jedis#quit() QUIT} because other clients may\n-   * alter the DB data between the two commands.\n+   * is switched off without the lost of any data.\n    * @throws JedisException with the status code reply on error. On success nothing is thrown since\n    *         the server quits and the connection is closed.\n    */",
      "parent_sha": "61f42cb6536b461071efe6acf3bd2f080901f29a"
    }
  },
  {
    "oid": "ec0b58e1836355d78d2649719c3cbc51579aaacc",
    "message": "fixing Issue 188 - Pipline.syncAndReturnAll changes",
    "date": "2011-08-01T03:28:51Z",
    "url": "https://github.com/redis/jedis/commit/ec0b58e1836355d78d2649719c3cbc51579aaacc",
    "details": {
      "sha": "8cbad9ab2f1515a334f29a40ad710cf7797dff4c",
      "filename": "src/main/java/redis/clients/jedis/Pipeline.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/redis/jedis/blob/ec0b58e1836355d78d2649719c3cbc51579aaacc/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java",
      "raw_url": "https://github.com/redis/jedis/raw/ec0b58e1836355d78d2649719c3cbc51579aaacc/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java?ref=ec0b58e1836355d78d2649719c3cbc51579aaacc",
      "patch": "@@ -6,6 +6,7 @@\n import java.util.Set;\n \n import redis.clients.jedis.BinaryClient.LIST_POSITION;\n+import redis.clients.jedis.exceptions.JedisDataException;\n \n public class Pipeline extends Queable {\n     private Client client;\n@@ -39,7 +40,11 @@ public List<Object> syncAndReturnAll() {\n         List<Object> unformatted = client.getAll();\n         List<Object> formatted = new ArrayList<Object>();\n         for (Object o : unformatted) {\n-            formatted.add(generateResponse(o).get());\n+        \ttry{\n+        \t\tformatted.add(generateResponse(o).get());\n+        \t}catch(JedisDataException e){\n+        \t\tformatted.add(e);\n+        \t}\n         }\n         return formatted;\n     }",
      "parent_sha": "22d4d3fc535890d1ca3c0ba400191ee0efbfe009"
    }
  },
  {
    "oid": "61cb1fd365630e9adeef1cdd8e792bbb8e0d342f",
    "message": "Adds JavaDoc to stat methods in redis.clients.util.Pool (iss #1452) (#1453)",
    "date": "2017-03-09T05:02:18Z",
    "url": "https://github.com/redis/jedis/commit/61cb1fd365630e9adeef1cdd8e792bbb8e0d342f",
    "details": {
      "sha": "613cf27a281bf2c5fc689c060149f295248901a3",
      "filename": "src/main/java/redis/clients/util/Pool.java",
      "status": "modified",
      "additions": 37,
      "deletions": 5,
      "changes": 42,
      "blob_url": "https://github.com/redis/jedis/blob/61cb1fd365630e9adeef1cdd8e792bbb8e0d342f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FPool.java",
      "raw_url": "https://github.com/redis/jedis/raw/61cb1fd365630e9adeef1cdd8e792bbb8e0d342f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FPool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FPool.java?ref=61cb1fd365630e9adeef1cdd8e792bbb8e0d342f",
      "patch": "@@ -102,39 +102,71 @@ protected void closeInternalPool() {\n       throw new JedisException(\"Could not destroy the pool\", e);\n     }\n   }\n-\n+  \n+  /**\n+   * Returns the number of instances currently borrowed from this pool.\n+   *\n+   * @return The number of instances currently borrowed from this pool, -1 if\n+   * the pool is inactive.\n+   */\n   public int getNumActive() {\n     if (poolInactive()) {\n       return -1;\n     }\n \n     return this.internalPool.getNumActive();\n   }\n-\n+  \n+  /**\n+   * Returns the number of instances currently idle in this pool.\n+   *\n+   * @return The number of instances currently idle in this pool, -1 if the\n+   * pool is inactive.\n+   */\n   public int getNumIdle() {\n     if (poolInactive()) {\n       return -1;\n     }\n \n     return this.internalPool.getNumIdle();\n   }\n-\n+  \n+  /**\n+   * Returns an estimate of the number of threads currently blocked waiting for\n+   * a resource from this pool.\n+   *\n+   * @return The number of threads waiting, -1 if the pool is inactive.\n+   */\n   public int getNumWaiters() {\n     if (poolInactive()) {\n       return -1;\n     }\n \n     return this.internalPool.getNumWaiters();\n   }\n-\n+  \n+  /**\n+   * Returns the mean waiting time spent by threads to obtain a resource from\n+   * this pool.\n+   *\n+   * @return The mean waiting time, in milliseconds, -1 if the pool is\n+   * inactive.\n+   */\n   public long getMeanBorrowWaitTimeMillis() {\n     if (poolInactive()) {\n       return -1;\n     }\n \n     return this.internalPool.getMeanBorrowWaitTimeMillis();\n   }\n-\n+  \n+  /**\n+   * Returns the maximum waiting time spent by threads to obtain a resource\n+   * from this pool.\n+   *\n+   * @return The maximum waiting time, in milliseconds, -1 if the pool is\n+   * inactive.\n+   */\n   public long getMaxBorrowWaitTimeMillis() {\n     if (poolInactive()) {\n       return -1;",
      "parent_sha": "2c6ade7b4ad7efebde9ca1dcf63e3d6736bd4a8b"
    }
  },
  {
    "oid": "63079a2f18c9d0e45bc478e7ed5c3739429abf2c",
    "message": "Fixing squid S1168 Collections should return empty list instead of null jedis class part 2 (#1309)",
    "date": "2016-06-03T19:12:27Z",
    "url": "https://github.com/redis/jedis/commit/63079a2f18c9d0e45bc478e7ed5c3739429abf2c",
    "details": {
      "sha": "d90adfc0f12591d446878424b17b467401d49f37",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/63079a2f18c9d0e45bc478e7ed5c3739429abf2c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/63079a2f18c9d0e45bc478e7ed5c3739429abf2c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=63079a2f18c9d0e45bc478e7ed5c3739429abf2c",
      "patch": "@@ -1308,7 +1308,7 @@ public Set<String> sinter(final String... keys) {\n     client.sinter(keys);\n     final List<String> members = client.getMultiBulkReply();\n     if (members == null) {\n-      return null;\n+      return Collections.emptySet();\n     }\n     return SetFromList.of(members);\n   }\n@@ -1348,7 +1348,7 @@ public Set<String> sunion(final String... keys) {\n     client.sunion(keys);\n     final List<String> members = client.getMultiBulkReply();\n     if (members == null) {\n-      return null;\n+      return Collections.emptySet();\n     }\n     return SetFromList.of(members);\n   }",
      "parent_sha": "2895292786792caca0430bcd40fdeb4ddccb4efe"
    }
  },
  {
    "oid": "00dedc5f258a2f6e50b0dd66803c95f75ba62128",
    "message": "Fix for GH-4, isResourceValid should check for PONG not OK",
    "date": "2010-09-03T13:38:33Z",
    "url": "https://github.com/redis/jedis/commit/00dedc5f258a2f6e50b0dd66803c95f75ba62128",
    "details": {
      "sha": "ca8020369881d2c0ae51fc86276025ffc4dc7989",
      "filename": "src/main/java/redis/clients/jedis/JedisPool.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/00dedc5f258a2f6e50b0dd66803c95f75ba62128/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java",
      "raw_url": "https://github.com/redis/jedis/raw/00dedc5f258a2f6e50b0dd66803c95f75ba62128/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java?ref=00dedc5f258a2f6e50b0dd66803c95f75ba62128",
      "patch": "@@ -51,6 +51,6 @@ protected void destroyResource(Jedis jedis) {\n \n     @Override\n     protected boolean isResourceValid(Jedis jedis) {\n-\treturn jedis.ping().equals(\"OK\");\n+\treturn jedis.ping().equals(\"PONG\");\n     }\n }\n\\ No newline at end of file",
      "parent_sha": "84bde29dac8be74e02fecc10f8c4388c022847e6"
    }
  },
  {
    "oid": "773651c896fc17195763ab37e4baf30253da6c28",
    "message": "Modify the judgment that reads a response as empty to isEmpty method (#3888)\n\nCo-authored-by: zhangshuai <zhangshuai@asiainfo.com>",
    "date": "2024-07-16T12:04:25Z",
    "url": "https://github.com/redis/jedis/commit/773651c896fc17195763ab37e4baf30253da6c28",
    "details": {
      "sha": "f7e320f164290401d4e1adcec4df92293815de85",
      "filename": "src/main/java/redis/clients/jedis/util/RedisInputStream.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/redis/jedis/blob/773651c896fc17195763ab37e4baf30253da6c28/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Futil%2FRedisInputStream.java",
      "raw_url": "https://github.com/redis/jedis/raw/773651c896fc17195763ab37e4baf30253da6c28/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Futil%2FRedisInputStream.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Futil%2FRedisInputStream.java?ref=773651c896fc17195763ab37e4baf30253da6c28",
      "patch": "@@ -14,6 +14,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.math.BigInteger;\n+\n import redis.clients.jedis.exceptions.JedisConnectionException;\n \n /**\n@@ -84,7 +85,7 @@ public String readLine() {\n     }\n \n     final String reply = sb.toString();\n-    if (reply.length() == 0) {\n+    if (reply.isEmpty()) {\n       throw new JedisConnectionException(\"It seems like server has closed the connection.\");\n     }\n ",
      "parent_sha": "e113b9ce3b1a3f51c2407cd237a849227434cf98"
    }
  },
  {
    "oid": "db61469284c472fa9fbbb3519067710415ed9116",
    "message": "Update javadoc",
    "date": "2015-03-10T15:08:05Z",
    "url": "https://github.com/redis/jedis/commit/db61469284c472fa9fbbb3519067710415ed9116",
    "details": {
      "sha": "febbcde1f80b670700161152dc2256a14bf9f360",
      "filename": "src/main/java/redis/clients/jedis/ShardedJedisPool.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/db61469284c472fa9fbbb3519067710415ed9116/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FShardedJedisPool.java",
      "raw_url": "https://github.com/redis/jedis/raw/db61469284c472fa9fbbb3519067710415ed9116/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FShardedJedisPool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FShardedJedisPool.java?ref=db61469284c472fa9fbbb3519067710415ed9116",
      "patch": "@@ -40,7 +40,7 @@ public ShardedJedis getResource() {\n \n   /**\n    * @deprecated starting from Jedis 3.0 this method won't exist. Resouce cleanup should be done\n-   *             using @see {@link redis.clients.jedis.Jedis#close()}\n+   *             using @see {@link redis.clients.jedis.ShardedJedis#close()}\n    */\n   @Override\n   public void returnBrokenResource(final ShardedJedis resource) {\n@@ -51,7 +51,7 @@ public void returnBrokenResource(final ShardedJedis resource) {\n \n   /**\n    * @deprecated starting from Jedis 3.0 this method won't exist. Resouce cleanup should be done\n-   *             using @see {@link redis.clients.jedis.Jedis#close()}\n+   *             using @see {@link redis.clients.jedis.ShardedJedis#close()}\n    */\n   @Override\n   public void returnResource(final ShardedJedis resource) {",
      "parent_sha": "51bbd693f7444676a6a808cd599af13d5068377b"
    }
  },
  {
    "oid": "aa3a06b5e3b3fbc84b2fd55d1fec493adc536049",
    "message": "Fixing squid: S1168 Empty arrays and collections should be returned instead of null Jedis.java class part 1 (#1308)",
    "date": "2016-06-03T19:12:49Z",
    "url": "https://github.com/redis/jedis/commit/aa3a06b5e3b3fbc84b2fd55d1fec493adc536049",
    "details": {
      "sha": "926194727957a8bfd32da30928c6aa0555120554",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/aa3a06b5e3b3fbc84b2fd55d1fec493adc536049/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/aa3a06b5e3b3fbc84b2fd55d1fec493adc536049/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=aa3a06b5e3b3fbc84b2fd55d1fec493adc536049",
      "patch": "@@ -1180,7 +1180,7 @@ public Set<String> smembers(final String key) {\n     client.smembers(key);\n     final List<String> members = client.getMultiBulkReply();\n     if (members == null) {\n-      return null;\n+      return Collections.emptySet();\n     }\n     return SetFromList.of(members);\n   }\n@@ -1226,7 +1226,7 @@ public Set<String> spop(final String key, final long count) {\n     client.spop(key, count);\n     final List<String> members = client.getMultiBulkReply();\n     if (members == null) {\n-      return null;\n+      return Collections.emptySet();\n     }\n     return SetFromList.of(members);\n   }",
      "parent_sha": "63079a2f18c9d0e45bc478e7ed5c3739429abf2c"
    }
  },
  {
    "oid": "818f1ec0e55a2751475045fe7bdfd21bde5084bc",
    "message": "Follow up new behavior of rename from test\n\n* Fixes #896\n* Renaming a key to itself is now essentially a noop",
    "date": "2015-02-28T14:00:00Z",
    "url": "https://github.com/redis/jedis/commit/818f1ec0e55a2751475045fe7bdfd21bde5084bc",
    "details": {
      "sha": "0d73e3f9d5da5e757b6139c7c6070cd180df5c9a",
      "filename": "src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 13,
      "changes": 17,
      "blob_url": "https://github.com/redis/jedis/blob/818f1ec0e55a2751475045fe7bdfd21bde5084bc/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/818f1ec0e55a2751475045fe7bdfd21bde5084bc/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FAllKindOfValuesCommandsTest.java?ref=818f1ec0e55a2751475045fe7bdfd21bde5084bc",
      "patch": "@@ -211,21 +211,12 @@ public void rename() {\n \n   @Test\n   public void renameOldAndNewAreTheSame() {\n-    try {\n-      jedis.set(\"foo\", \"bar\");\n-      jedis.rename(\"foo\", \"foo\");\n-      fail(\"JedisDataException expected\");\n-    } catch (final JedisDataException e) {\n-    }\n+    jedis.set(\"foo\", \"bar\");\n+    jedis.rename(\"foo\", \"foo\");\n \n     // Binary\n-    try {\n-      jedis.set(bfoo, bbar);\n-      jedis.rename(bfoo, bfoo);\n-      fail(\"JedisDataException expected\");\n-    } catch (final JedisDataException e) {\n-    }\n-\n+    jedis.set(bfoo, bbar);\n+    jedis.rename(bfoo, bfoo);\n   }\n \n   @Test",
      "parent_sha": "00eefa4767f908a1f6bade33bfa329acdcdf875f"
    }
  },
  {
    "oid": "ff8ac4c9db5bc3ea7a4312a4846f6a978a557158",
    "message": "Surround jedis.quit() in try/catch to ignore connection problems in\nmethod destroyObject",
    "date": "2010-12-02T20:14:01Z",
    "url": "https://github.com/redis/jedis/commit/ff8ac4c9db5bc3ea7a4312a4846f6a978a557158",
    "details": {
      "sha": "60ac0bcf7692f174011ac20e7f54440f365bfcb5",
      "filename": "src/main/java/redis/clients/jedis/JedisPool.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/redis/jedis/blob/ff8ac4c9db5bc3ea7a4312a4846f6a978a557158/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java",
      "raw_url": "https://github.com/redis/jedis/raw/ff8ac4c9db5bc3ea7a4312a4846f6a978a557158/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPool.java?ref=ff8ac4c9db5bc3ea7a4312a4846f6a978a557158",
      "patch": "@@ -67,7 +67,10 @@ public void destroyObject(final Object obj) throws Exception {\n                 final Jedis jedis = (Jedis) obj;\n                 if (jedis.isConnected()) {\n                     try {\n-                        jedis.quit();\n+                        try {\n+                            jedis.quit();\n+                        } catch (Exception e) {\n+                        }\n                         jedis.disconnect();\n                     } catch (Exception e) {\n \n@@ -90,4 +93,4 @@ public boolean validateObject(final Object obj) {\n         }\n \n     }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "26614b26deb97ffedb5c9da7eabb4b78d131b14d"
    }
  },
  {
    "oid": "63b40b71f749bcd015867e6c93fb82106a7fe956",
    "message": "Sharded Performance improvement\n\n'SortedMap.isEmpty()' performance is much higher than\n'SortedMap.size()==0'",
    "date": "2012-08-13T02:35:51Z",
    "url": "https://github.com/redis/jedis/commit/63b40b71f749bcd015867e6c93fb82106a7fe956",
    "details": {
      "sha": "5448fcd6efc2bf7bd77a6913ffca74fca73523a0",
      "filename": "src/main/java/redis/clients/util/Sharded.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/63b40b71f749bcd015867e6c93fb82106a7fe956/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java",
      "raw_url": "https://github.com/redis/jedis/raw/63b40b71f749bcd015867e6c93fb82106a7fe956/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FSharded.java?ref=63b40b71f749bcd015867e6c93fb82106a7fe956",
      "patch": "@@ -77,7 +77,7 @@ public R getShard(String key) {\n \n     public S getShardInfo(byte[] key) {\n         SortedMap<Long, S> tail = nodes.tailMap(algo.hash(key));\n-        if (tail.size() == 0) {\n+        if (tail.isEmpty()) {\n             return nodes.get(nodes.firstKey());\n         }\n         return tail.get(tail.firstKey());",
      "parent_sha": "6c3ec9fc14900161843ba0598abd93b05a3c6f8a"
    }
  },
  {
    "oid": "ac0969315655180c09b8139c16bded09c068d498",
    "message": "Remove only existance of 'null' from documentation (#2348)",
    "date": "2021-01-24T13:30:42Z",
    "url": "https://github.com/redis/jedis/commit/ac0969315655180c09b8139c16bded09c068d498",
    "details": {
      "sha": "14eb19b7236ae69a2a5c354045edbef69beef288",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/redis/jedis/blob/ac0969315655180c09b8139c16bded09c068d498/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/ac0969315655180c09b8139c16bded09c068d498/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=ac0969315655180c09b8139c16bded09c068d498",
      "patch": "@@ -191,8 +191,9 @@ public String set(final String key, final String value, final SetParams params)\n   }\n \n   /**\n-   * Get the value of the specified key. If the key does not exist null is returned. If the value\n-   * stored at key is not a string an error is returned because GET can only handle string values.\n+   * Get the value of the specified key. If the key does not exist the special value 'nil' is\n+   * returned. If the value stored at key is not a string an error is returned because GET can only\n+   * handle string values.\n    * <p>\n    * Time complexity: O(1)\n    * @param key",
      "parent_sha": "5782eecd59cf602787b82cf03ce1a6171a0befa8"
    }
  },
  {
    "oid": "c62672e3a058bde24e37b0e49694505472ae904f",
    "message": "add timeout parameter to blpop/brpop",
    "date": "2014-08-13T06:44:17Z",
    "url": "https://github.com/redis/jedis/commit/c62672e3a058bde24e37b0e49694505472ae904f",
    "details": {
      "sha": "3f6c05753e3be7625d5122bb227402bb9eabe1a8",
      "filename": "src/main/java/redis/clients/jedis/ShardedJedis.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/redis/jedis/blob/c62672e3a058bde24e37b0e49694505472ae904f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FShardedJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/c62672e3a058bde24e37b0e49694505472ae904f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FShardedJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FShardedJedis.java?ref=c62672e3a058bde24e37b0e49694505472ae904f",
      "patch": "@@ -125,12 +125,18 @@ public List<String> blpop(String arg) {\n \tJedis j = getShard(arg);\n \treturn j.blpop(arg);\n     }\n-\n+    public List<String> blpop(int timeout,String key){\n+\tJedis j = getShard(key);\n+\treturn j.blpop(timeout,key);\n+    }\n     public List<String> brpop(String arg) {\n \tJedis j = getShard(arg);\n \treturn j.brpop(arg);\n     }\n-\n+    public List<String> brpop(int timeout,String key) {\n+\tJedis j = getShard(key);\n+\treturn j.brpop(timeout,key);\n+    }\n     public Long decrBy(String key, long integer) {\n \tJedis j = getShard(key);\n \treturn j.decrBy(key, integer);",
      "parent_sha": "c42965dcd54a4247ff8570fba52706bc033a4e49"
    }
  },
  {
    "oid": "f49eb6826480f7cf18bfff100b3753f3657d29fb",
    "message": "fixing merge problem",
    "date": "2015-03-31T03:21:37Z",
    "url": "https://github.com/redis/jedis/commit/f49eb6826480f7cf18bfff100b3753f3657d29fb",
    "details": {
      "sha": "d0410c5b64481f73af7b9eb7aed799436b18e7eb",
      "filename": "src/main/java/redis/clients/jedis/JedisCluster.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/f49eb6826480f7cf18bfff100b3753f3657d29fb/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java",
      "raw_url": "https://github.com/redis/jedis/raw/f49eb6826480f7cf18bfff100b3753f3657d29fb/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java?ref=f49eb6826480f7cf18bfff100b3753f3657d29fb",
      "patch": "@@ -108,7 +108,7 @@ public Boolean execute(Jedis connection) {\n \n   @Override\n   public Long persist(final String key) {\n-    return new JedisClusterCommand<Long>(connectionHandler, timeout, maxRedirections) {\n+    return new JedisClusterCommand<Long>(connectionHandler, maxRedirections) {\n       @Override\n       public Long execute(Jedis connection) {\n         return connection.persist(key);",
      "parent_sha": "157a8ceb4ee3985639a6a1fa93730d582fd1be0b"
    }
  },
  {
    "oid": "4b72a4d25492ad4664e857006643e3bd8a361fff",
    "message": "Replace synchronized keyword lock to ReaderWriterLock",
    "date": "2014-07-02T14:46:15Z",
    "url": "https://github.com/redis/jedis/commit/4b72a4d25492ad4664e857006643e3bd8a361fff",
    "details": {
      "sha": "0906b5e417ae689c0256e88535f32a8cfb4dc39b",
      "filename": "src/main/java/redis/clients/jedis/JedisClusterInfoCache.java",
      "status": "modified",
      "additions": 115,
      "deletions": 59,
      "changes": 174,
      "blob_url": "https://github.com/redis/jedis/blob/4b72a4d25492ad4664e857006643e3bd8a361fff/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterInfoCache.java",
      "raw_url": "https://github.com/redis/jedis/raw/4b72a4d25492ad4664e857006643e3bd8a361fff/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterInfoCache.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterInfoCache.java?ref=4b72a4d25492ad4664e857006643e3bd8a361fff",
      "patch": "@@ -8,108 +8,154 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n public class JedisClusterInfoCache {\n     public static final ClusterNodeInformationParser nodeInfoParser = new ClusterNodeInformationParser();\n \n     private Map<String, JedisPool> nodes = new HashMap<String, JedisPool>();\n     private Map<Integer, JedisPool> slots = new HashMap<Integer, JedisPool>();\n \n-    public synchronized void discoverClusterNodesAndSlots(Jedis jedis) {\n-        this.nodes.clear();\n-        this.slots.clear();\n+    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n+    private final Lock r = rwl.readLock();\n+    private final Lock w = rwl.writeLock();\n \n-        String localNodes = jedis.clusterNodes();\n-        for (String nodeInfo : localNodes.split(\"\\n\")) {\n-            ClusterNodeInformation clusterNodeInfo = nodeInfoParser.parse(\n-                    nodeInfo, new HostAndPort(jedis.getClient().getHost(),\n-                            jedis.getClient().getPort()));\n+    public void discoverClusterNodesAndSlots(Jedis jedis) {\n+        w.lock();\n \n-            HostAndPort targetNode = clusterNodeInfo.getNode();\n-            setNodeIfNotExist(targetNode);\n-            assignSlotsToNode(clusterNodeInfo.getAvailableSlots(), targetNode);\n+        try {\n+            this.nodes.clear();\n+            this.slots.clear();\n+\n+            String localNodes = jedis.clusterNodes();\n+            for (String nodeInfo : localNodes.split(\"\\n\")) {\n+                ClusterNodeInformation clusterNodeInfo = nodeInfoParser.parse(\n+                        nodeInfo, new HostAndPort(jedis.getClient().getHost(),\n+                                jedis.getClient().getPort()));\n+\n+                HostAndPort targetNode = clusterNodeInfo.getNode();\n+                setNodeIfNotExist(targetNode);\n+                assignSlotsToNode(clusterNodeInfo.getAvailableSlots(), targetNode);\n+            }\n+        } finally {\n+            w.unlock();\n         }\n     }\n \n-    public synchronized void discoverClusterSlots(Jedis jedis) {\n-        this.slots.clear();\n+    public void discoverClusterSlots(Jedis jedis) {\n+        w.lock();\n \n-        List<Object> slots = jedis.clusterSlots();\n+        try {\n+            this.slots.clear();\n \n-        for (Object slotInfoObj : slots) {\n-            List<Object> slotInfo = (List<Object>) slotInfoObj;\n+            List<Object> slots = jedis.clusterSlots();\n \n-            if (slotInfo.size() <= 2) {\n-                continue;\n-            }\n+            for (Object slotInfoObj : slots) {\n+                List<Object> slotInfo = (List<Object>) slotInfoObj;\n \n-            // assigned slots\n-            List<Integer> slotNums = new ArrayList<Integer>();\n-            for (int slot = ((Long) slotInfo.get(0)).intValue() ;\n-                 slot <= ((Long) slotInfo.get(1)).intValue() ;\n-                 slot++) {\n-                slotNums.add(slot);\n-            }\n+                if (slotInfo.size() <= 2) {\n+                    continue;\n+                }\n \n-            // hostInfos\n-            List<Object> hostInfos = (List<Object>) slotInfo.get(2);\n-            if (hostInfos.size() <= 0) {\n-                continue;\n-            }\n+                List<Integer> slotNums = getAssignedSlotArray(slotInfo);\n \n-            // at this time, we just use master, discard slave information\n-            HostAndPort targetNode = new HostAndPort(\n-                    SafeEncoder.encode((byte[]) hostInfos.get(0)),\n-                    ((Long) hostInfos.get(1)).intValue());\n+                // hostInfos\n+                List<Object> hostInfos = (List<Object>) slotInfo.get(2);\n+                if (hostInfos.size() <= 0) {\n+                    continue;\n+                }\n \n-            setNodeIfNotExist(targetNode);\n-            assignSlotsToNode(slotNums, targetNode);\n+                // at this time, we just use master, discard slave information\n+                HostAndPort targetNode = generateHostAndPort(hostInfos);\n+\n+                setNodeIfNotExist(targetNode);\n+                assignSlotsToNode(slotNums, targetNode);\n+            }\n+        } finally {\n+            w.unlock();\n         }\n     }\n \n-    public synchronized void setNodeIfNotExist(HostAndPort node) {\n-        String nodeKey = getNodeKey(node);\n-        if (nodes.containsKey(nodeKey))\n-            return;\n+    private HostAndPort generateHostAndPort(List<Object> hostInfos) {\n+        return new HostAndPort(\n+                SafeEncoder.encode((byte[]) hostInfos.get(0)),\n+                ((Long) hostInfos.get(1)).intValue());\n+    }\n \n-        JedisPool nodePool = new JedisPool(node.getHost(), node.getPort());\n-        nodes.put(nodeKey, nodePool);\n+    public void setNodeIfNotExist(HostAndPort node) {\n+        w.lock();\n+        try {\n+            String nodeKey = getNodeKey(node);\n+            if (nodes.containsKey(nodeKey))\n+                return;\n+\n+            JedisPool nodePool = new JedisPool(node.getHost(), node.getPort());\n+            nodes.put(nodeKey, nodePool);\n+        } finally {\n+            w.unlock();\n+        }\n     }\n \n-    public synchronized void assignSlotToNode(int slot, HostAndPort targetNode) {\n-        JedisPool targetPool = nodes.get(getNodeKey(targetNode));\n+    public void assignSlotToNode(int slot, HostAndPort targetNode) {\n+        w.lock();\n+        try {\n+            JedisPool targetPool = nodes.get(getNodeKey(targetNode));\n \n-        if (targetPool == null) {\n-            setNodeIfNotExist(targetNode);\n-            targetPool = nodes.get(getNodeKey(targetNode));\n+            if (targetPool == null) {\n+                setNodeIfNotExist(targetNode);\n+                targetPool = nodes.get(getNodeKey(targetNode));\n+            }\n+            slots.put(slot, targetPool);\n+        } finally {\n+            w.unlock();\n         }\n-        slots.put(slot, targetPool);\n     }\n \n     public synchronized void assignSlotsToNode(List<Integer> targetSlots,\n                                   HostAndPort targetNode) {\n-        JedisPool targetPool = nodes.get(getNodeKey(targetNode));\n+        w.lock();\n+        try {\n+            JedisPool targetPool = nodes.get(getNodeKey(targetNode));\n \n-        if (targetPool == null) {\n-            setNodeIfNotExist(targetNode);\n-            targetPool = nodes.get(getNodeKey(targetNode));\n-        }\n+            if (targetPool == null) {\n+                setNodeIfNotExist(targetNode);\n+                targetPool = nodes.get(getNodeKey(targetNode));\n+            }\n \n-        for (Integer slot : targetSlots) {\n-            slots.put(slot, targetPool);\n+            for (Integer slot : targetSlots) {\n+                slots.put(slot, targetPool);\n+            }\n+        } finally {\n+            w.unlock();\n         }\n     }\n \n     public synchronized JedisPool getNode(String nodeKey) {\n-        return nodes.get(nodeKey);\n+        r.lock();\n+        try {\n+            return nodes.get(nodeKey);\n+        } finally {\n+            r.unlock();\n+        }\n     }\n \n     public synchronized JedisPool getSlotPool(int slot) {\n-        return slots.get(slot);\n+        r.lock();\n+        try {\n+            return slots.get(slot);\n+        } finally {\n+            r.unlock();\n+        }\n     }\n \n     public synchronized Map<String, JedisPool> getNodes() {\n-        return new HashMap<String, JedisPool>(nodes);\n+        r.lock();\n+        try {\n+            return new HashMap<String, JedisPool>(nodes);\n+        } finally {\n+            r.unlock();\n+        }\n     }\n \n     public static String getNodeKey(HostAndPort hnp) {\n@@ -124,4 +170,14 @@ public static String getNodeKey(Jedis jedis) {\n         return getNodeKey(jedis.getClient());\n     }\n \n+    private List<Integer> getAssignedSlotArray(List<Object> slotInfo) {\n+        List<Integer> slotNums = new ArrayList<Integer>();\n+        for (int slot = ((Long) slotInfo.get(0)).intValue();\n+             slot <= ((Long) slotInfo.get(1)).intValue();\n+             slot++) {\n+            slotNums.add(slot);\n+        }\n+        return slotNums;\n+    }\n+\n }",
      "parent_sha": "94966e6163e414ae5dc326c084f404cf6cb1a5bf"
    }
  },
  {
    "oid": "192ca70fca0c7d7e963b96aa85907abe290a10a9",
    "message": "Modify MEMORY USAGE tests (#2573)\n\n* Modify MEMORY USAGE tests\r\n\r\nAccording to Redis developers, MEMORY USAGE response should not be tested with exact values.\r\n\r\n* add note\r\n\r\n* edit comment",
    "date": "2021-07-01T13:21:08Z",
    "url": "https://github.com/redis/jedis/commit/192ca70fca0c7d7e963b96aa85907abe290a10a9",
    "details": {
      "sha": "94ba8dd1c2e1d7ede7cc3e735ebc31ec555208a0",
      "filename": "src/test/java/redis/clients/jedis/tests/commands/ControlCommandsTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 10,
      "changes": 29,
      "blob_url": "https://github.com/redis/jedis/blob/192ca70fca0c7d7e963b96aa85907abe290a10a9/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FControlCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/192ca70fca0c7d7e963b96aa85907abe290a10a9/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FControlCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FControlCommandsTest.java?ref=192ca70fca0c7d7e963b96aa85907abe290a10a9",
      "patch": "@@ -3,6 +3,7 @@\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import java.util.List;\n@@ -217,33 +218,41 @@ public void memoryDoctorBinary() {\n \n   @Test\n   public void memoryUsageString() {\n+    // Note: It has been recommended not to base MEMORY USAGE test on exact value, as the response\n+    // may subject to be 'tuned' especially targeting a major Redis release.\n+\n     jedis.set(\"foo\", \"bar\");\n-    Long usage = jedis.memoryUsage(\"foo\");\n-    assertEquals(53, (long) usage);\n+    long usage = jedis.memoryUsage(\"foo\");\n+    assertTrue(usage >= 30);\n+    assertTrue(usage <= 80);\n \n     jedis.lpush(\"foobar\", \"fo\", \"ba\", \"sha\");\n     usage = jedis.memoryUsage(\"foobar\", 2);\n-    assertEquals(144, (long) usage);\n+    assertTrue(usage >= 110);\n+    assertTrue(usage <= 190);\n \n-    usage = jedis.memoryUsage(\"roo\", 2);\n-    assertEquals(null, usage);\n+    assertNull(jedis.memoryUsage(\"roo\", 2));\n   }\n \n   @Test\n   public void memoryUsageBinary() {\n+    // Note: It has been recommended not to base MEMORY USAGE test on exact value, as the response\n+    // may subject to be 'tuned' especially targeting a major Redis release.\n+\n     byte[] bfoo = {0x01, 0x02, 0x03, 0x04};\n     byte[] bbar = {0x05, 0x06, 0x07, 0x08};\n     byte[] bfoobar = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};\n \n     jedis.set(bfoo, bbar);\n-    Long usage = jedis.memoryUsage(bfoo);\n-    assertEquals(54, (long) usage);\n+    long usage = jedis.memoryUsage(bfoo);\n+    assertTrue(usage >= 30);\n+    assertTrue(usage <= 80);\n \n     jedis.lpush(bfoobar, new byte[]{0x01, 0x02}, new byte[]{0x05, 0x06}, new byte[]{0x00});\n     usage = jedis.memoryUsage(bfoobar, 2);\n-    assertEquals(150, (long) usage);\n+    assertTrue(usage >= 110);\n+    assertTrue(usage <= 190);\n \n-    usage = jedis.memoryUsage(\"roo\", 2);\n-    assertEquals(null, usage);\n+    assertNull(jedis.memoryUsage(\"roo\", 2));\n   }\n }",
      "parent_sha": "8f58e9e887316a9d9c4dfefd9f1588e22624e176"
    }
  },
  {
    "oid": "bb7f5257abd39ae608074ebea37b570ec56222f8",
    "message": "add volatile for localhost (#1846)",
    "date": "2018-08-14T02:22:57Z",
    "url": "https://github.com/redis/jedis/commit/bb7f5257abd39ae608074ebea37b570ec56222f8",
    "details": {
      "sha": "4c94d0efe156070f63e5f09f21a238bdc1f1a077",
      "filename": "src/main/java/redis/clients/jedis/HostAndPort.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/bb7f5257abd39ae608074ebea37b570ec56222f8/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FHostAndPort.java",
      "raw_url": "https://github.com/redis/jedis/raw/bb7f5257abd39ae608074ebea37b570ec56222f8/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FHostAndPort.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FHostAndPort.java?ref=bb7f5257abd39ae608074ebea37b570ec56222f8",
      "patch": "@@ -10,7 +10,7 @@ public class HostAndPort implements Serializable {\n   private static final long serialVersionUID = -519876229978427751L;\n \n   protected static Logger log = LoggerFactory.getLogger(HostAndPort.class.getName());\n-  public static String localhost;\n+  public static volatile String localhost;\n \n \n   private String host;",
      "parent_sha": "1b97cac0cc03077014b5b2c0b56026f02230c639"
    }
  },
  {
    "oid": "0d6e7c5cd427c7c549809f80f9a1b285c64ae3ae",
    "message": "Address+Fix #3353",
    "date": "2023-04-27T11:05:04Z",
    "url": "https://github.com/redis/jedis/commit/0d6e7c5cd427c7c549809f80f9a1b285c64ae3ae",
    "details": {
      "sha": "86450fa640f0996c1442c7a1e17a8d6919402e0c",
      "filename": "src/main/java/redis/clients/jedis/Connection.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/0d6e7c5cd427c7c549809f80f9a1b285c64ae3ae/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "raw_url": "https://github.com/redis/jedis/raw/0d6e7c5cd427c7c549809f80f9a1b285c64ae3ae/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java?ref=0d6e7c5cd427c7c549809f80f9a1b285c64ae3ae",
      "patch": "@@ -234,10 +234,10 @@ public void disconnect() {\n         outputStream.flush();\n         socket.close();\n       } catch (IOException ex) {\n-        broken = true;\n         throw new JedisConnectionException(ex);\n       } finally {\n         IOUtils.closeQuietly(socket);\n+        setBroken();\n       }\n     }\n   }",
      "parent_sha": "81fc2d6508edb7513b5ecb371874a1fb5ca83d2d"
    }
  },
  {
    "oid": "06660690bfcde874532cb068db84abb034cab338",
    "message": "Fix: slot key is missed from *scan in JedisCluster",
    "date": "2015-03-04T22:00:52Z",
    "url": "https://github.com/redis/jedis/commit/06660690bfcde874532cb068db84abb034cab338",
    "details": {
      "sha": "8a67e116fdb83390204be3aa5ab4aa1d919c2634",
      "filename": "src/main/java/redis/clients/jedis/JedisCluster.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/redis/jedis/blob/06660690bfcde874532cb068db84abb034cab338/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java",
      "raw_url": "https://github.com/redis/jedis/raw/06660690bfcde874532cb068db84abb034cab338/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisCluster.java?ref=06660690bfcde874532cb068db84abb034cab338",
      "patch": "@@ -1366,7 +1366,7 @@ public ScanResult<Entry<String, String>> hscan(final String key, final String cu\n       public ScanResult<Entry<String, String>> execute(Jedis connection) {\n         return connection.hscan(key, cursor);\n       }\n-    }.run(null);\n+    }.run(key);\n   }\n \n   @Override\n@@ -1376,7 +1376,7 @@ public ScanResult<String> sscan(final String key, final String cursor) {\n       public ScanResult<String> execute(Jedis connection) {\n         return connection.sscan(key, cursor);\n       }\n-    }.run(null);\n+    }.run(key);\n   }\n \n   @Override\n@@ -1386,7 +1386,7 @@ public ScanResult<Tuple> zscan(final String key, final String cursor) {\n       public ScanResult<Tuple> execute(Jedis connection) {\n         return connection.zscan(key, cursor);\n       }\n-    }.run(null);\n+    }.run(key);\n   }\n \n   @Override",
      "parent_sha": "3d9a0ece6e1d82e2f6cc3ac90a1d80d1cb2e878c"
    }
  },
  {
    "oid": "37f629765e236c430357202bfdf562f897072893",
    "message": "Improve performance in  MOVED and ASK response parsing",
    "date": "2014-01-17T15:06:20Z",
    "url": "https://github.com/redis/jedis/commit/37f629765e236c430357202bfdf562f897072893",
    "details": {
      "sha": "a5e08c6a77e029bd8da7eff0fc327f9d292488b5",
      "filename": "src/main/java/redis/clients/jedis/Protocol.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/redis/jedis/blob/37f629765e236c430357202bfdf562f897072893/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java",
      "raw_url": "https://github.com/redis/jedis/raw/37f629765e236c430357202bfdf562f897072893/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FProtocol.java?ref=37f629765e236c430357202bfdf562f897072893",
      "patch": "@@ -79,11 +79,10 @@ private static void processError(final RedisInputStream is) {\n \t\tString message = is.readLine();\n \t\t//TODO: I'm not sure if this is the best way to do this. \n \t\t//Maybe Read only first 5 bytes instead?\n-\t\t//\n-\t\tif (message.contains(MOVED_RESPONSE)) {\n+\t\tif (message.startsWith(MOVED_RESPONSE)) {\n \t\t\tString[] movedInfo = parseTargetHostAndSlot(message);\n \t\t\tthrow new JedisMovedDataException(message, new HostAndPort(movedInfo[1], Integer.valueOf(movedInfo[2])), Integer.valueOf(movedInfo[0]));\n-\t\t} else if (message.contains(ASK_RESPONSE)) {\n+\t\t} else if (message.startsWith(ASK_RESPONSE)) {\n \t\t\tString[] askInfo = parseTargetHostAndSlot(message);\n \t\t\tthrow new JedisAskDataException(message, new HostAndPort(askInfo[1], Integer.valueOf(askInfo[2])), Integer.valueOf(askInfo[0]));\n \t\t}",
      "parent_sha": "23b54c2cef17c4d85ab2e25cc659d37ceac83e49"
    }
  },
  {
    "oid": "4483156918aa3cce80ddfd8eaa4127320370d31c",
    "message": "Polish #3262",
    "date": "2023-01-02T09:58:39Z",
    "url": "https://github.com/redis/jedis/commit/4483156918aa3cce80ddfd8eaa4127320370d31c",
    "details": {
      "sha": "f060d4f1faad34b11831ee3aba895dffbe71e7dd",
      "filename": "src/main/java/redis/clients/jedis/ReliableTransaction.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/redis/jedis/blob/4483156918aa3cce80ddfd8eaa4127320370d31c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FReliableTransaction.java",
      "raw_url": "https://github.com/redis/jedis/raw/4483156918aa3cce80ddfd8eaa4127320370d31c/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FReliableTransaction.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FReliableTransaction.java?ref=4483156918aa3cce80ddfd8eaa4127320370d31c",
      "patch": "@@ -14,8 +14,7 @@ public class ReliableTransaction extends TransactionBase {\n   /**\n    * Creates a new transaction.\n    * \n-   * A MULTI command will be added to be sent to server. WATCH/UNWATCH/MULTI commands must not be\n-   * called with this object.\n+   * A MULTI command will be executed. WATCH/UNWATCH/MULTI commands must not be called with this object.\n    */\n   public ReliableTransaction(Connection connection) {\n     super(connection);",
      "parent_sha": "82f286b4d1441cf15e32cc629c66b5c9caa0f286"
    }
  },
  {
    "oid": "6d9d7adda3278ce52e8c299a8a5812ad07a99b02",
    "message": "Fixed cluster scripting commands build test",
    "date": "2014-04-02T19:20:20Z",
    "url": "https://github.com/redis/jedis/commit/6d9d7adda3278ce52e8c299a8a5812ad07a99b02",
    "details": {
      "sha": "fe56b6a2be19c721dcf265d5d71804b4b3ad04d0",
      "filename": "src/test/java/redis/clients/jedis/tests/commands/ClusterScriptingCommandsTest.java",
      "status": "modified",
      "additions": 103,
      "deletions": 6,
      "changes": 109,
      "blob_url": "https://github.com/redis/jedis/blob/6d9d7adda3278ce52e8c299a8a5812ad07a99b02/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FClusterScriptingCommandsTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/6d9d7adda3278ce52e8c299a8a5812ad07a99b02/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FClusterScriptingCommandsTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fcommands%2FClusterScriptingCommandsTest.java?ref=6d9d7adda3278ce52e8c299a8a5812ad07a99b02",
      "patch": "@@ -6,16 +6,98 @@\n import java.util.List;\n import java.util.Set;\n \n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.Test;\n \n import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.Jedis;\n import redis.clients.jedis.JedisCluster;\n+import redis.clients.jedis.tests.HostAndPortUtil;\n import redis.clients.jedis.tests.JedisTestBase;\n import redis.clients.jedis.exceptions.JedisClusterException;\n+import redis.clients.util.JedisClusterCRC16;\n \n public class ClusterScriptingCommandsTest extends JedisTestBase{\n-    private final Set<HostAndPort> jedisClusterNodes = createClusterNodesSet();\n-    private final JedisCluster jedisCluster = new JedisCluster(jedisClusterNodes);\n+    private Jedis node1;\n+    private static Jedis node2;\n+    private static Jedis node3;\n+\n+    private HostAndPort nodeInfo1 = HostAndPortUtil.getClusterServers().get(0);\n+    private HostAndPort nodeInfo2 = HostAndPortUtil.getClusterServers().get(1);\n+    private HostAndPort nodeInfo3 = HostAndPortUtil.getClusterServers().get(2);\n+    private final Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();\n+    JedisCluster jedisCluster;\n+    \n+    @Before\n+    public void setUp() throws InterruptedException {\n+    node1 = new Jedis(nodeInfo1.getHost(), nodeInfo1.getPort());\n+    node1.connect();\n+    node1.flushAll();\n+\n+    node2 = new Jedis(nodeInfo2.getHost(), nodeInfo2.getPort());\n+    node2.connect();\n+    node2.flushAll();\n+\n+    node3 = new Jedis(nodeInfo3.getHost(), nodeInfo3.getPort());\n+    node3.connect();\n+    node3.flushAll();\n+\n+    // ---- configure cluster\n+\n+    // add nodes to cluster\n+    node1.clusterMeet(\"127.0.0.1\", nodeInfo2.getPort());\n+    node1.clusterMeet(\"127.0.0.1\", nodeInfo3.getPort());\n+\n+    // split available slots across the three nodes\n+    int slotsPerNode = JedisCluster.HASHSLOTS / 3;\n+    int[] node1Slots = new int[slotsPerNode];\n+    int[] node2Slots = new int[slotsPerNode+1];\n+    int[] node3Slots = new int[slotsPerNode];\n+    for (int i = 0, slot1 = 0, slot2 = 0, slot3 = 0 ; i < JedisCluster.HASHSLOTS; i++) {\n+        if (i < slotsPerNode) {\n+        node1Slots[slot1++] = i;\n+        } else if (i > slotsPerNode * 2) {\n+        node3Slots[slot3++] = i;\n+        } else {\n+        node2Slots[slot2++] = i;\n+        }\n+    }\n+    \n+    node1.clusterAddSlots(node1Slots);\n+    node2.clusterAddSlots(node2Slots);\n+    node3.clusterAddSlots(node3Slots);\n+    \n+    waitForClusterReady();\n+    \n+    jedisClusterNode.add(new HostAndPort(\"127.0.0.1\", 7379));\n+    jedisCluster = new JedisCluster(jedisClusterNode);\n+    \n+    }\n+    \n+    @AfterClass\n+    public static void cleanUp() {\n+    int slotTest = JedisClusterCRC16.getSlot(\"test\");\n+    int slot51 = JedisClusterCRC16.getSlot(\"51\");\n+    String node3Id = getNodeId(node3.clusterNodes());\n+    node2.clusterSetSlotNode(slotTest, node3Id);\n+    node2.clusterSetSlotNode(slot51, node3Id);\n+    node2.clusterDelSlots(slotTest, slot51);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+    // clear all slots\n+    int[] slotsToDelete = new int[JedisCluster.HASHSLOTS];\n+    for (int i = 0; i < JedisCluster.HASHSLOTS; i++) {\n+        slotsToDelete[i] = i;\n+    }\n+    node1.clusterDelSlots(slotsToDelete);\n+    node2.clusterDelSlots(slotsToDelete);\n+    node3.clusterDelSlots(slotsToDelete);\n+    }\n+\n \n     @SuppressWarnings(\"unchecked\")\n     @Test(expected = JedisClusterException.class)\n@@ -56,9 +138,24 @@ public void testEvalsha() {\n         assertEquals(\"10\", o.toString());\n     }\n     \n-    private static Set<HostAndPort> createClusterNodesSet() {\n-        Set<HostAndPort> jedisClusterNodes = new HashSet<HostAndPort>();\n-        jedisClusterNodes.add(new HostAndPort(\"127.0.0.1\", 7000));\n-        return Collections.unmodifiableSet(jedisClusterNodes);\n+    private static String getNodeId(String infoOutput) {\n+        for (String infoLine : infoOutput.split(\"\\n\")) {\n+            if (infoLine.contains(\"myself\")) {\n+            return infoLine.split(\" \")[0];\n+            }\n+        }\n+        return \"\";\n+    }\n+\n+    private void waitForClusterReady() throws InterruptedException {\n+        boolean clusterOk = false;\n+        while (!clusterOk) {\n+            if (node1.clusterInfo().split(\"\\n\")[0].contains(\"ok\")\n+            && node2.clusterInfo().split(\"\\n\")[0].contains(\"ok\")\n+            && node3.clusterInfo().split(\"\\n\")[0].contains(\"ok\")) {\n+                clusterOk = true;\n+            }\n+            Thread.sleep(50);\n+        }\n     }\n }",
      "parent_sha": "863483017b8145d93439b49e3e7a9f2237453a97"
    }
  },
  {
    "oid": "aacd1d77d8c53ac57ae60091c5115e76f650bf03",
    "message": "Added missing flush in getRawObjectMultiBulkReply. (#1619)\n\nRemoved flush from getObjectMultiBulkReply because it just calls getRawObjectMultiBulkReply and flush is added there.",
    "date": "2017-11-23T17:11:15Z",
    "url": "https://github.com/redis/jedis/commit/aacd1d77d8c53ac57ae60091c5115e76f650bf03",
    "details": {
      "sha": "377df29a6ca8aa32356cb7737c5bbba39dba99e3",
      "filename": "src/main/java/redis/clients/jedis/Connection.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/aacd1d77d8c53ac57ae60091c5115e76f650bf03/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "raw_url": "https://github.com/redis/jedis/raw/aacd1d77d8c53ac57ae60091c5115e76f650bf03/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java?ref=aacd1d77d8c53ac57ae60091c5115e76f650bf03",
      "patch": "@@ -273,11 +273,11 @@ public List<byte[]> getBinaryMultiBulkReply() {\n \n   @SuppressWarnings(\"unchecked\")\n   public List<Object> getRawObjectMultiBulkReply() {\n+    flush();\n     return (List<Object>) readProtocolWithCheckingBroken();\n   }\n \n   public List<Object> getObjectMultiBulkReply() {\n-    flush();\n     return getRawObjectMultiBulkReply();\n   }\n ",
      "parent_sha": "52785df5f053747f9c8cc492b2e7a8090eda332d"
    }
  },
  {
    "oid": "a55da992823c6fe8d252fa2b0b91413597a9c628",
    "message": "DOC-4450 added hgetall and hvals command examples (#4050)\n\nCo-authored-by: M Sazzadul Hoque <7600764+sazzad16@users.noreply.github.com>",
    "date": "2025-01-14T11:13:48Z",
    "url": "https://github.com/redis/jedis/commit/a55da992823c6fe8d252fa2b0b91413597a9c628",
    "details": {
      "sha": "78e12cf820cdb1512ea60b2efff6b07a0438d257",
      "filename": "src/test/java/io/redis/examples/CmdsHashExample.java",
      "status": "modified",
      "additions": 43,
      "deletions": 227,
      "changes": 270,
      "blob_url": "https://github.com/redis/jedis/blob/a55da992823c6fe8d252fa2b0b91413597a9c628/src%2Ftest%2Fjava%2Fio%2Fredis%2Fexamples%2FCmdsHashExample.java",
      "raw_url": "https://github.com/redis/jedis/raw/a55da992823c6fe8d252fa2b0b91413597a9c628/src%2Ftest%2Fjava%2Fio%2Fredis%2Fexamples%2FCmdsHashExample.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fio%2Fredis%2Fexamples%2FCmdsHashExample.java?ref=a55da992823c6fe8d252fa2b0b91413597a9c628",
      "patch": "@@ -4,78 +4,30 @@\n \n import org.junit.Assert;\n import org.junit.Test;\n+// REMOVE_END\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.List;\n+import java.util.Collections;\n \n-// REMOVE_END\n // HIDE_START\n import redis.clients.jedis.UnifiedJedis;\n // HIDE_END\n \n+import static java.util.stream.Collectors.toList;\n+\n // HIDE_START\n public class CmdsHashExample {\n     @Test\n     public void run() {\n         UnifiedJedis jedis = new UnifiedJedis(\"redis://localhost:6379\");\n-\n         //REMOVE_START\n         // Clear any keys here before using them in tests.\n         jedis.del(\"myhash\");\n         //REMOVE_END\n // HIDE_END\n \n-\n-        // STEP_START hdel\n-\n-        // STEP_END\n-\n-        // Tests for 'hdel' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hexists\n-\n-        // STEP_END\n-\n-        // Tests for 'hexists' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hexpire\n-\n-        // STEP_END\n-\n-        // Tests for 'hexpire' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hexpireat\n-\n-        // STEP_END\n-\n-        // Tests for 'hexpireat' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hexpiretime\n-\n-        // STEP_END\n-\n-        // Tests for 'hexpiretime' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n         // STEP_START hget\n         Map<String, String> hGetExampleParams = new HashMap<>();\n         hGetExampleParams.put(\"field1\", \"foo\");\n@@ -89,156 +41,43 @@ public void run() {\n         String hGetResult3 = jedis.hget(\"myhash\", \"field2\");\n         System.out.println(hGetResult3);    // >>> null\n         // STEP_END\n-\n-        // Tests for 'hget' step.\n         // REMOVE_START\n+        // Tests for 'hget' step.\n         Assert.assertEquals(1, hGetResult1);\n         Assert.assertEquals(\"foo\", hGetResult2);\n         Assert.assertNull(hGetResult3);\n         jedis.del(\"myhash\");\n         // REMOVE_END\n \n-\n         // STEP_START hgetall\n+        Map<String, String> hGetAllExampleParams = new HashMap<>();\n+        hGetAllExampleParams.put(\"field1\", \"Hello\");\n+        hGetAllExampleParams.put(\"field2\", \"World\");\n \n-        // STEP_END\n-\n-        // Tests for 'hgetall' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hincrby\n-\n-        // STEP_END\n-\n-        // Tests for 'hincrby' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hincrbyfloat\n-\n-        // STEP_END\n-\n-        // Tests for 'hincrbyfloat' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hkeys\n+        long hGetAllResult1 = jedis.hset(\"myhash\", hGetAllExampleParams);\n+        System.out.println(hGetAllResult1); // >>> 2\n \n+        Map<String, String> hGetAllResult2 = jedis.hgetAll(\"myhash\");\n+        System.out.println(\n+            hGetAllResult2.entrySet().stream()\n+                    .sorted((s1, s2)-> s1.getKey().compareTo(s2.getKey()))\n+                    .collect(toList())\n+                    .toString()\n+        );\n+        // >>> [field1=Hello, field2=World]\n         // STEP_END\n-\n-        // Tests for 'hkeys' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hlen\n-\n-        // STEP_END\n-\n-        // Tests for 'hlen' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hmget\n-\n-        // STEP_END\n-\n-        // Tests for 'hmget' step.\n         // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hmset\n-\n-        // STEP_END\n-\n-        // Tests for 'hmset' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hpersist\n-\n-        // STEP_END\n-\n-        // Tests for 'hpersist' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hpexpire\n-\n-        // STEP_END\n-\n-        // Tests for 'hpexpire' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hpexpireat\n-\n-        // STEP_END\n-\n-        // Tests for 'hpexpireat' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hpexpiretime\n-\n-        // STEP_END\n-\n-        // Tests for 'hpexpiretime' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hpttl\n-\n-        // STEP_END\n-\n-        // Tests for 'hpttl' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hrandfield\n-\n-        // STEP_END\n-\n-        // Tests for 'hrandfield' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hscan\n-\n-        // STEP_END\n-\n-        // Tests for 'hscan' step.\n-        // REMOVE_START\n-\n+        // Tests for 'hgetall' step.\n+        Assert.assertEquals(2, hGetAllResult1);\n+        Assert.assertEquals(\"[field1=Hello, field2=World]\",\n+            hGetAllResult2.entrySet().stream()\n+                    .sorted((s1, s2)-> s1.getKey().compareTo(s2.getKey()))\n+                    .collect(toList())\n+                    .toString()\n+        );\n+        jedis.del(\"myhash\");\n         // REMOVE_END\n \n-\n         // STEP_START hset\n         Map<String, String> hSetExampleParams = new HashMap<>();\n         hSetExampleParams.put(\"field1\", \"Hello\");\n@@ -269,9 +108,8 @@ public void run() {\n         // >>> Key: field2, Value: Hi\n         // >>> Key: field1, Value: Hello\n         // STEP_END\n-\n-        // Tests for 'hset' step.\n         // REMOVE_START\n+        // Tests for 'hset' step.\n         Assert.assertEquals(1, hSetResult1);\n         Assert.assertEquals(\"Hello\", hSetResult2);\n         Assert.assertEquals(2, hSetResult3);\n@@ -284,47 +122,25 @@ public void run() {\n         jedis.del(\"myhash\");\n         // REMOVE_END\n \n-\n-        // STEP_START hsetnx\n-\n-        // STEP_END\n-\n-        // Tests for 'hsetnx' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START hstrlen\n-\n-        // STEP_END\n-\n-        // Tests for 'hstrlen' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n-        // STEP_START httl\n-\n-        // STEP_END\n-\n-        // Tests for 'httl' step.\n-        // REMOVE_START\n-\n-        // REMOVE_END\n-\n-\n         // STEP_START hvals\n+        Map<String, String> hValsExampleParams = new HashMap<>();\n+        hValsExampleParams.put(\"field1\", \"Hello\");\n+        hValsExampleParams.put(\"field2\", \"World\");\n \n-        // STEP_END\n+        long hValsResult1 = jedis.hset(\"myhash\", hValsExampleParams);\n+        System.out.println(hValsResult1); // >>> 2\n \n+        List<String> hValsResult2 = jedis.hvals(\"myhash\");\n+        Collections.sort(hValsResult2);\n+        System.out.println(hValsResult2);\n+        // >>> [Hello, World]\n+        // STEP_END\n+        // REMOVE_START       \n         // Tests for 'hvals' step.\n-        // REMOVE_START\n-\n+        Assert.assertEquals(2, hValsResult1);\n+        Assert.assertEquals(\"[Hello, World]\", hValsResult2.toString());\n+        jedis.del(\"myhash\");\n         // REMOVE_END\n-\n-\n // HIDE_START\n         \n     }",
      "parent_sha": "87d451c24cb0c03820d9d5999924cf0b1a2b2403"
    }
  },
  {
    "oid": "b3f45e46bca5053e5c66259c0454aa6b9c3cd411",
    "message": "Reduce lock granularity (#2191) (#2514)",
    "date": "2021-04-23T06:02:30Z",
    "url": "https://github.com/redis/jedis/commit/b3f45e46bca5053e5c66259c0454aa6b9c3cd411",
    "details": {
      "sha": "61adef55cc245fff9755af55a758ed0a4d763215",
      "filename": "src/main/java/redis/clients/jedis/JedisClusterInfoCache.java",
      "status": "modified",
      "additions": 43,
      "deletions": 45,
      "changes": 88,
      "blob_url": "https://github.com/redis/jedis/blob/b3f45e46bca5053e5c66259c0454aa6b9c3cd411/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterInfoCache.java",
      "raw_url": "https://github.com/redis/jedis/raw/b3f45e46bca5053e5c66259c0454aa6b9c3cd411/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterInfoCache.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisClusterInfoCache.java?ref=b3f45e46bca5053e5c66259c0454aa6b9c3cd411",
      "patch": "@@ -6,6 +6,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import javax.net.ssl.HostnameVerifier;\n import javax.net.ssl.SSLParameters;\n@@ -15,6 +16,7 @@\n \n import redis.clients.jedis.exceptions.JedisConnectionException;\n import redis.clients.jedis.exceptions.JedisException;\n+import redis.clients.jedis.util.Pool;\n import redis.clients.jedis.util.SafeEncoder;\n \n public class JedisClusterInfoCache {\n@@ -24,7 +26,7 @@ public class JedisClusterInfoCache {\n   private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n   private final Lock r = rwl.readLock();\n   private final Lock w = rwl.writeLock();\n-  private volatile boolean rediscovering;\n+  private final Lock rediscoverLock = new ReentrantLock();\n \n   private final GenericObjectPoolConfig<Jedis> poolConfig;\n   private final JedisClientConfig clientConfig;\n@@ -175,68 +177,64 @@ public void discoverClusterNodesAndSlots(Jedis jedis) {\n \n   public void renewClusterSlots(Jedis jedis) {\n     // If rediscovering is already in process - no need to start one more same rediscovering, just return\n-    if (!rediscovering) {\n+    if (rediscoverLock.tryLock()) {\n       try {\n-        w.lock();\n-        if (!rediscovering) {\n-          rediscovering = true;\n-\n+        if (jedis != null) {\n           try {\n-            if (jedis != null) {\n-              try {\n-                discoverClusterSlots(jedis);\n-                return;\n-              } catch (JedisException e) {\n-                // try nodes from all pools\n-              }\n-            }\n+            discoverClusterSlots(jedis);\n+            return;\n+          } catch (JedisException e) {\n+            // try nodes from all pools\n+          }\n+        }\n \n-            for (JedisPool jp : getShuffledNodesPool()) {\n-              Jedis j = null;\n-              try {\n-                j = jp.getResource();\n-                discoverClusterSlots(j);\n-                return;\n-              } catch (JedisConnectionException e) {\n-                // try next nodes\n-              } finally {\n-                if (j != null) {\n-                  j.close();\n-                }\n-              }\n-            }\n+        for (JedisPool jp : getShuffledNodesPool()) {\n+          Jedis j = null;\n+          try {\n+            j = jp.getResource();\n+            discoverClusterSlots(j);\n+            return;\n+          } catch (JedisConnectionException e) {\n+            // try next nodes\n           } finally {\n-            rediscovering = false;\n+            if (j != null) {\n+              j.close();\n+            }\n           }\n         }\n       } finally {\n-        w.unlock();\n+        rediscoverLock.unlock();\n       }\n     }\n   }\n \n   private void discoverClusterSlots(Jedis jedis) {\n     List<Object> slots = jedis.clusterSlots();\n-    this.slots.clear();\n+    w.lock();\n+    try {\n+      this.slots.clear();\n \n-    for (Object slotInfoObj : slots) {\n-      List<Object> slotInfo = (List<Object>) slotInfoObj;\n+      for (Object slotInfoObj : slots) {\n+        List<Object> slotInfo = (List<Object>) slotInfoObj;\n \n-      if (slotInfo.size() <= MASTER_NODE_INDEX) {\n-        continue;\n-      }\n+        if (slotInfo.size() <= MASTER_NODE_INDEX) {\n+          continue;\n+        }\n \n-      List<Integer> slotNums = getAssignedSlotArray(slotInfo);\n+        List<Integer> slotNums = getAssignedSlotArray(slotInfo);\n \n-      // hostInfos\n-      List<Object> hostInfos = (List<Object>) slotInfo.get(MASTER_NODE_INDEX);\n-      if (hostInfos.isEmpty()) {\n-        continue;\n-      }\n+        // hostInfos\n+        List<Object> hostInfos = (List<Object>) slotInfo.get(MASTER_NODE_INDEX);\n+        if (hostInfos.isEmpty()) {\n+          continue;\n+        }\n \n-      // at this time, we just use master, discard slave information\n-      HostAndPort targetNode = generateHostAndPort(hostInfos);\n-      assignSlotsToNode(slotNums, targetNode);\n+        // at this time, we just use master, discard slave information\n+        HostAndPort targetNode = generateHostAndPort(hostInfos);\n+        assignSlotsToNode(slotNums, targetNode);\n+      }\n+    } finally {\n+      w.unlock();\n     }\n   }\n ",
      "parent_sha": "897f3afc9e96e0c8336e0607fda2adeb25afb10c"
    }
  },
  {
    "oid": "dddc0d15f108637e8fd733359713e13bc1656fb4",
    "message": "Add second jedis connection to waitForNewPromotedMaster call",
    "date": "2014-07-28T18:58:09Z",
    "url": "https://github.com/redis/jedis/commit/dddc0d15f108637e8fd733359713e13bc1656fb4",
    "details": {
      "sha": "349506b4fcc68ff222bc3dff1176c133c9425234",
      "filename": "src/test/java/redis/clients/jedis/tests/JedisSentinelTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/redis/jedis/blob/dddc0d15f108637e8fd733359713e13bc1656fb4/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/dddc0d15f108637e8fd733359713e13bc1656fb4/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FJedisSentinelTest.java?ref=dddc0d15f108637e8fd733359713e13bc1656fb4",
      "patch": "@@ -85,16 +85,16 @@ public void sentinel() {\n     public void sentinelFailover() throws InterruptedException {\n \tJedis j = new Jedis(sentinelForFailover.getHost(),\n \t\tsentinelForFailover.getPort());\n+\tJedis j2 = new Jedis(sentinelForFailover.getHost(),\n+\t                    sentinelForFailover.getPort());\n \n \ttry {\n \t    List<String> masterHostAndPort = j\n \t\t    .sentinelGetMasterAddrByName(FAILOVER_MASTER_NAME);\n \t    HostAndPort currentMaster = new HostAndPort(masterHostAndPort.get(0), \n \t\t    Integer.parseInt(masterHostAndPort.get(1)));\n-\t    String result = j.sentinelFailover(FAILOVER_MASTER_NAME);\n-\t    assertEquals(\"OK\", result);\n \n-\t    JedisSentinelTestUtil.waitForNewPromotedMaster(j);\n+\t    JedisSentinelTestUtil.waitForNewPromotedMaster(FAILOVER_MASTER_NAME, j, j2);\n \n \t    masterHostAndPort = j\n \t\t    .sentinelGetMasterAddrByName(FAILOVER_MASTER_NAME);",
      "parent_sha": "c81bdc08491932caadee59fa8582b7703d5fced7"
    }
  },
  {
    "oid": "e4f7f61d00206ab2e2295accaaef5027a898a71f",
    "message": "Pipeline.sort with dstkey uses right Response type",
    "date": "2012-04-18T04:33:20Z",
    "url": "https://github.com/redis/jedis/commit/e4f7f61d00206ab2e2295accaaef5027a898a71f",
    "details": {
      "sha": "9b3413c1f47148a30e725652425511db7c9cb131",
      "filename": "src/main/java/redis/clients/jedis/Pipeline.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/redis/jedis/blob/e4f7f61d00206ab2e2295accaaef5027a898a71f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java",
      "raw_url": "https://github.com/redis/jedis/raw/e4f7f61d00206ab2e2295accaaef5027a898a71f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java?ref=e4f7f61d00206ab2e2295accaaef5027a898a71f",
      "patch": "@@ -672,14 +672,14 @@ public Response<Long> smove(byte[] srckey, byte[] dstkey, byte[] member) {\n         return getResponse(BuilderFactory.LONG);\n     }\n \n-    public Response<List<String>> sort(String key) {\n+    public Response<Long> sort(String key) {\n         client.sort(key);\n-        return getResponse(BuilderFactory.STRING_LIST);\n+        return getResponse(BuilderFactory.LONG);\n     }\n \n-    public Response<List<String>> sort(byte[] key) {\n+    public Response<Long> sort(byte[] key) {\n         client.sort(key);\n-        return getResponse(BuilderFactory.STRING_LIST);\n+        return getResponse(BuilderFactory.LONG);\n     }\n \n     public Response<List<String>> sort(String key,",
      "parent_sha": "be163acd52ea2e970dc8d81e58d2037b058a2084"
    }
  },
  {
    "oid": "6705ae5ec33524e26c5e84006406c7789fd96a1a",
    "message": "Fix javadoc typo (#1690)",
    "date": "2017-12-06T06:46:09Z",
    "url": "https://github.com/redis/jedis/commit/6705ae5ec33524e26c5e84006406c7789fd96a1a",
    "details": {
      "sha": "e663a557a94d23d98d03c088cdc43410cb627257",
      "filename": "src/main/java/redis/clients/jedis/Jedis.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/6705ae5ec33524e26c5e84006406c7789fd96a1a/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/6705ae5ec33524e26c5e84006406c7789fd96a1a/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedis.java?ref=6705ae5ec33524e26c5e84006406c7789fd96a1a",
      "patch": "@@ -1575,7 +1575,7 @@ public Double zincrby(final String key, final double increment, final String mem\n   }\n \n   /**\n-   * Return the rank (or index) or member in the sorted set at key, with scores being ordered from\n+   * Return the rank (or index) of member in the sorted set at key, with scores being ordered from\n    * low to high.\n    * <p>\n    * When the given member does not exist in the sorted set, the special value 'nil' is returned.\n@@ -1598,7 +1598,7 @@ public Long zrank(final String key, final String member) {\n   }\n \n   /**\n-   * Return the rank (or index) or member in the sorted set at key, with scores being ordered from\n+   * Return the rank (or index) of member in the sorted set at key, with scores being ordered from\n    * high to low.\n    * <p>\n    * When the given member does not exist in the sorted set, the special value 'nil' is returned.",
      "parent_sha": "b90cfd6e9d7d376e316f60b96cf1778a0c84de33"
    }
  },
  {
    "oid": "d73613f8823cf1236aea5e62bcd2cb586c1a1b86",
    "message": "Address 0d6e7c5c\n\nAddress 'Address+Fix #3353'",
    "date": "2023-04-27T11:22:14Z",
    "url": "https://github.com/redis/jedis/commit/d73613f8823cf1236aea5e62bcd2cb586c1a1b86",
    "details": {
      "sha": "4e92813f5e3ffaf317639e0f3f2c9d2ec4e1639b",
      "filename": "src/main/java/redis/clients/jedis/Connection.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/redis/jedis/blob/d73613f8823cf1236aea5e62bcd2cb586c1a1b86/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "raw_url": "https://github.com/redis/jedis/raw/d73613f8823cf1236aea5e62bcd2cb586c1a1b86/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java?ref=d73613f8823cf1236aea5e62bcd2cb586c1a1b86",
      "patch": "@@ -196,13 +196,21 @@ public void connect() throws JedisConnectionException {\n \n         outputStream = new RedisOutputStream(socket.getOutputStream());\n         inputStream = new RedisInputStream(socket.getInputStream());\n+\n+        broken = false;\n+\n       } catch (JedisConnectionException jce) {\n-        broken = true;\n+\n+        setBroken();\n         throw jce;\n+\n       } catch (IOException ioe) {\n-        broken = true;\n+\n+        setBroken();\n         throw new JedisConnectionException(\"Failed to create input/output stream\", ioe);\n+\n       } finally {\n+\n         if (broken) {\n           IOUtils.closeQuietly(socket);\n         }",
      "parent_sha": "0d6e7c5cd427c7c549809f80f9a1b285c64ae3ae"
    }
  },
  {
    "oid": "6ea1959cc5308389f5db6d430c3fc8aa122bd32f",
    "message": "Fixes xetorthio/jedis#758",
    "date": "2014-10-03T20:36:09Z",
    "url": "https://github.com/redis/jedis/commit/6ea1959cc5308389f5db6d430c3fc8aa122bd32f",
    "details": {
      "sha": "c3caefce7cbe21ec294d2e10b8f92b1abf6962bc",
      "filename": "src/main/java/redis/clients/jedis/Pipeline.java",
      "status": "modified",
      "additions": 22,
      "deletions": 17,
      "changes": 39,
      "blob_url": "https://github.com/redis/jedis/blob/6ea1959cc5308389f5db6d430c3fc8aa122bd32f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java",
      "raw_url": "https://github.com/redis/jedis/raw/6ea1959cc5308389f5db6d430c3fc8aa122bd32f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FPipeline.java?ref=6ea1959cc5308389f5db6d430c3fc8aa122bd32f",
      "patch": "@@ -88,17 +88,18 @@ public boolean isInMulti() {\n     }\n \n     /**\n-     * Syncronize pipeline by reading all responses. This operation close the\n+     * Synchronize pipeline by reading all responses. This operation close the\n      * pipeline. In order to get return values from pipelined commands, capture\n      * the different Response<?> of the commands you execute.\n      */\n     public void sync() {\n-\tList<Object> unformatted = client.getMany(getPipelinedResponseLength());\n-\tfor (Object o : unformatted) {\n-\t    generateResponse(o);\n-\t}\n+        if (client.isConnected()) {\n+            List<Object> unformatted = client.getMany(getPipelinedResponseLength());\n+            for (Object o : unformatted) {\n+                generateResponse(o);\n+            }\n+        }\n     }\n-\n     /**\n      * Syncronize pipeline by reading all responses. This operation close the\n      * pipeline. Whenever possible try to avoid using this version and use\n@@ -108,17 +109,21 @@ public void sync() {\n      * @return A list of all the responses in the order you executed them.\n      */\n     public List<Object> syncAndReturnAll() {\n-\tList<Object> unformatted = client.getMany(getPipelinedResponseLength());\n-\tList<Object> formatted = new ArrayList<Object>();\n-\n-\tfor (Object o : unformatted) {\n-\t    try {\n-\t\tformatted.add(generateResponse(o).get());\n-\t    } catch (JedisDataException e) {\n-\t\tformatted.add(e);\n-\t    }\n-\t}\n-\treturn formatted;\n+        if (client.isConnected()) {\n+            List<Object> unformatted = client.getMany(getPipelinedResponseLength());\n+            List<Object> formatted = new ArrayList<Object>();\n+\n+            for (Object o : unformatted) {\n+                try {\n+                    formatted.add(generateResponse(o).get());\n+                } catch (JedisDataException e) {\n+                    formatted.add(e);\n+                }\n+            }\n+            return formatted;\n+        } else {\n+            return java.util.Collections.<Object>emptyList();\n+        }\n     }\n \n     public Response<String> discard() {",
      "parent_sha": "321e5136be74f0f68b17fe1e3b5f00df2f25b4d1"
    }
  },
  {
    "oid": "91a2d1176267849614c5eb74c2cc7776c2d70077",
    "message": " - Removed runBinaryScript\n - Add missing methods with key parameter\n - Separate BinaryScriptingCommands from JedisClusterBinaryScriptingCommands",
    "date": "2014-04-14T20:46:13Z",
    "url": "https://github.com/redis/jedis/commit/91a2d1176267849614c5eb74c2cc7776c2d70077",
    "details": {
      "sha": "6cb66c7574cabcf2f38b768770722db0443558f1",
      "filename": "src/main/java/redis/clients/jedis/BinaryJedisCluster.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/91a2d1176267849614c5eb74c2cc7776c2d70077/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java",
      "raw_url": "https://github.com/redis/jedis/raw/91a2d1176267849614c5eb74c2cc7776c2d70077/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java?ref=91a2d1176267849614c5eb74c2cc7776c2d70077",
      "patch": "@@ -1338,7 +1338,7 @@ public Object eval(final byte[] script, final byte[] keyCount, final byte[]... p\n                 public Object execute(Jedis connection) {\n                 return connection.eval(script, keyCount, params);\n                 }\n-            }.runBinary(ByteBuffer.wrap(keyCount).getInt());\n+            }.runBinary(ByteBuffer.wrap(keyCount).getInt(), params);\n     }\n \n     @Override",
      "parent_sha": "3bb23712d6d15fc8f536ab90bd8da68dd47981fa"
    }
  },
  {
    "oid": "6db79fe69b4015170af1596395950f2d59f61d53",
    "message": "Change sequence of closing IO resources, OutputStream first\n\nhttp://stackoverflow.com/questions/3428127/what-is-the-difference-between-closing-input-outputstream-and-closing-socket-dir",
    "date": "2015-04-16T04:15:41Z",
    "url": "https://github.com/redis/jedis/commit/6db79fe69b4015170af1596395950f2d59f61d53",
    "details": {
      "sha": "6cb739ee4ed28cd8a6d14141d4c4ffad6156100b",
      "filename": "src/main/java/redis/clients/jedis/Connection.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/redis/jedis/blob/6db79fe69b4015170af1596395950f2d59f61d53/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "raw_url": "https://github.com/redis/jedis/raw/6db79fe69b4015170af1596395950f2d59f61d53/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FConnection.java?ref=6db79fe69b4015170af1596395950f2d59f61d53",
      "patch": "@@ -162,18 +162,18 @@ public void close() {\n   public void disconnect() {\n     if (isConnected()) {\n       try {\n-        inputStream.close();\n+        outputStream.close();\n         if (!socket.isClosed()) {\n-          outputStream.close();\n+          inputStream.close();\n           socket.close();\n         }\n       } catch (IOException ex) {\n         broken = true;\n         throw new JedisConnectionException(ex);\n       } finally {\n-        IOUtils.closeQuietly(inputStream);\n+        IOUtils.closeQuietly(outputStream);\n         if (!socket.isClosed()) {\n-          IOUtils.closeQuietly(outputStream);\n+          IOUtils.closeQuietly(inputStream);\n           IOUtils.closeQuietly(socket);\n         }\n       }",
      "parent_sha": "be70cbb8a339d1ab23842bb9551090c2fe2b3360"
    }
  },
  {
    "oid": "ec3582ad8321f7355b6f8f8a6ab00809f6291d5f",
    "message": "[QUICK FIX] A RediSearch command in cluster mode must be sent to a master node (#2968)\n\nAs a quick fix, sending the commad to a consistent hashslot. In current code, this will choose the respective master of the hashslot.\r\n\r\nWe should change it to a random master node or at least random hashslot.",
    "date": "2022-04-07T09:48:27Z",
    "url": "https://github.com/redis/jedis/commit/ec3582ad8321f7355b6f8f8a6ab00809f6291d5f",
    "details": {
      "sha": "c1bb7e9db4bdbc2242f74e06fae677c08bba48ba",
      "filename": "src/main/java/redis/clients/jedis/ClusterCommandObjects.java",
      "status": "modified",
      "additions": 114,
      "deletions": 98,
      "changes": 212,
      "blob_url": "https://github.com/redis/jedis/blob/ec3582ad8321f7355b6f8f8a6ab00809f6291d5f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterCommandObjects.java",
      "raw_url": "https://github.com/redis/jedis/raw/ec3582ad8321f7355b6f8f8a6ab00809f6291d5f/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterCommandObjects.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FClusterCommandObjects.java?ref=ec3582ad8321f7355b6f8f8a6ab00809f6291d5f",
      "patch": "@@ -4,11 +4,19 @@\n import static redis.clients.jedis.Protocol.Command.SCAN;\n import static redis.clients.jedis.Protocol.Keyword.TYPE;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import redis.clients.jedis.commands.ProtocolCommand;\n import redis.clients.jedis.params.ScanParams;\n import redis.clients.jedis.resps.ScanResult;\n+import redis.clients.jedis.search.IndexOptions;\n+import redis.clients.jedis.search.Query;\n+import redis.clients.jedis.search.Schema;\n+import redis.clients.jedis.search.SearchResult;\n+import redis.clients.jedis.search.aggr.AggregationBuilder;\n+import redis.clients.jedis.search.aggr.AggregationResult;\n import redis.clients.jedis.util.JedisClusterHashTag;\n \n public class ClusterCommandObjects extends CommandObjects {\n@@ -97,114 +105,122 @@ public final CommandObject<ScanResult<byte[]>> scan(byte[] cursor, ScanParams pa\n   public final CommandObject<Long> waitReplicas(int replicas, long timeout) {\n     throw new UnsupportedOperationException(CLUSTER_UNSUPPORTED_MESSAGE);\n   }\n-//\n+\n+  // RediSearch commands\n+  // TODO: Send RediSearch command to random 'master' node or random hashslot.\n //  boolean searchLite = false;\n-//\n-//  private <T> CommandObject<T> processSearchCommand(String indexName, CommandObject<T> command) {\n+\n+  private <T> CommandObject<T> processSearchCommand(String indexName, CommandObject<T> command) {\n //    if (searchLite) command.getArguments().processKey(indexName);\n-//    return command;\n-//  }\n-//\n-//  @Override\n-//  public final CommandObject<String> ftCreate(String indexName, IndexOptions indexOptions, Schema schema) {\n-//    return processSearchCommand(indexName, super.ftCreate(indexName, indexOptions, schema));\n-//  }\n-//\n-//  @Override\n-//  public final CommandObject<String> ftAlter(String indexName, Schema schema) {\n-//    return processSearchCommand(indexName, super.ftAlter(indexName, schema));\n-//  }\n-//\n-//  @Override\n-//  public final CommandObject<SearchResult> ftSearch(String indexName, Query query) {\n-//    return processSearchCommand(indexName, super.ftSearch(indexName, query));\n-//  }\n-//\n-//  @Override\n-//  public final CommandObject<SearchResult> ftSearch(byte[] indexName, Query query) {\n-//    CommandObject<SearchResult> command = super.ftSearch(indexName, query);\n+    command.getArguments().processKey(indexName);\n+    return command;\n+  }\n+\n+  @Override\n+  public final CommandObject<String> ftCreate(String indexName, IndexOptions indexOptions, Schema schema) {\n+    return processSearchCommand(indexName, super.ftCreate(indexName, indexOptions, schema));\n+  }\n+\n+  @Override\n+  public final CommandObject<String> ftAlter(String indexName, Schema schema) {\n+    return processSearchCommand(indexName, super.ftAlter(indexName, schema));\n+  }\n+\n+  @Override\n+  public final CommandObject<SearchResult> ftSearch(String indexName, Query query) {\n+    return processSearchCommand(indexName, super.ftSearch(indexName, query));\n+  }\n+\n+  @Override\n+  public final CommandObject<SearchResult> ftSearch(byte[] indexName, Query query) {\n+    CommandObject<SearchResult> command = super.ftSearch(indexName, query);\n //    if (searchLite) command.getArguments().processKey(indexName);\n-//    return command;\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftExplain(String indexName, Query query) {\n-//    return processSearchCommand(indexName, super.ftExplain(indexName, query));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<List<String>> ftExplainCLI(String indexName, Query query) {\n-//    return processSearchCommand(indexName, super.ftExplainCLI(indexName, query));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<AggregationResult> ftAggregate(String indexName, AggregationBuilder aggr) {\n-//    return processSearchCommand(indexName, super.ftAggregate(indexName, aggr));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<AggregationResult> ftCursorRead(String indexName, long cursorId, int count) {\n-//    return processSearchCommand(indexName, super.ftCursorRead(indexName, cursorId, count));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftCursorDel(String indexName, long cursorId) {\n-//    return processSearchCommand(indexName, super.ftCursorDel(indexName, cursorId));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftDropIndex(String indexName) {\n-//    return processSearchCommand(indexName, super.ftDropIndex(indexName));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftDropIndexDD(String indexName) {\n-//    return processSearchCommand(indexName, super.ftDropIndexDD(indexName));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftSynUpdate(String indexName, String synonymGroupId, String... terms) {\n-//    return processSearchCommand(indexName, super.ftSynUpdate(indexName, synonymGroupId, terms));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<Map<String, List<String>>> ftSynDump(String indexName) {\n-//    return processSearchCommand(indexName, super.ftSynDump(indexName));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<Map<String, Object>> ftInfo(String indexName) {\n-//    return processSearchCommand(indexName, super.ftInfo(indexName));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftAliasAdd(String aliasName, String indexName) {\n+    command.getArguments().processKey(indexName);\n+    return command;\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftExplain(String indexName, Query query) {\n+    return processSearchCommand(indexName, super.ftExplain(indexName, query));\n+  }\n+\n+  @Override\n+  public CommandObject<List<String>> ftExplainCLI(String indexName, Query query) {\n+    return processSearchCommand(indexName, super.ftExplainCLI(indexName, query));\n+  }\n+\n+  @Override\n+  public CommandObject<AggregationResult> ftAggregate(String indexName, AggregationBuilder aggr) {\n+    return processSearchCommand(indexName, super.ftAggregate(indexName, aggr));\n+  }\n+\n+  @Override\n+  public CommandObject<AggregationResult> ftCursorRead(String indexName, long cursorId, int count) {\n+    return processSearchCommand(indexName, super.ftCursorRead(indexName, cursorId, count));\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftCursorDel(String indexName, long cursorId) {\n+    return processSearchCommand(indexName, super.ftCursorDel(indexName, cursorId));\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftDropIndex(String indexName) {\n+    return processSearchCommand(indexName, super.ftDropIndex(indexName));\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftDropIndexDD(String indexName) {\n+    return processSearchCommand(indexName, super.ftDropIndexDD(indexName));\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftSynUpdate(String indexName, String synonymGroupId, String... terms) {\n+    return processSearchCommand(indexName, super.ftSynUpdate(indexName, synonymGroupId, terms));\n+  }\n+\n+  @Override\n+  public CommandObject<Map<String, List<String>>> ftSynDump(String indexName) {\n+    return processSearchCommand(indexName, super.ftSynDump(indexName));\n+  }\n+\n+  @Override\n+  public CommandObject<Map<String, Object>> ftInfo(String indexName) {\n+    return processSearchCommand(indexName, super.ftInfo(indexName));\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftAliasAdd(String aliasName, String indexName) {\n //    CommandObject<String> command = super.ftAliasAdd(aliasName, indexName);\n //    if (searchLite) command.getArguments().processKey(aliasName).processKey(indexName);\n //    return command;\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftAliasUpdate(String aliasName, String indexName) {\n+    return processSearchCommand(indexName, super.ftAliasAdd(aliasName, indexName));\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftAliasUpdate(String aliasName, String indexName) {\n //    CommandObject<String> command = super.ftAliasUpdate(aliasName, indexName);\n //    if (searchLite) command.getArguments().processKey(aliasName).processKey(indexName);\n //    return command;\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftAliasDel(String aliasName) {\n+    return processSearchCommand(indexName, super.ftAliasUpdate(aliasName, indexName));\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftAliasDel(String aliasName) {\n //    CommandObject<String> command = super.ftAliasDel(aliasName);\n //    if (searchLite) command.getArguments().processKey(aliasName);\n //    return command;\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<Map<String, String>> ftConfigGet(String indexName, String option) {\n-//    return processSearchCommand(indexName, super.ftConfigGet(indexName, option));\n-//  }\n-//\n-//  @Override\n-//  public CommandObject<String> ftConfigSet(String indexName, String option, String value) {\n-//    return processSearchCommand(indexName, super.ftConfigSet(indexName, option, value));\n-//  }\n+    return processSearchCommand(aliasName, super.ftAliasDel(aliasName));\n+  }\n+\n+  @Override\n+  public CommandObject<Map<String, String>> ftConfigGet(String indexName, String option) {\n+    return processSearchCommand(indexName, super.ftConfigGet(indexName, option));\n+  }\n+\n+  @Override\n+  public CommandObject<String> ftConfigSet(String indexName, String option, String value) {\n+    return processSearchCommand(indexName, super.ftConfigSet(indexName, option, value));\n+  }\n+  // RediSearch commands\n }",
      "parent_sha": "b5e0787cdf8f8d78f27fef72a372e3181eae082f"
    }
  },
  {
    "oid": "5bb633c7739ca39280680000f3a112b81bfeda38",
    "message": "add SSLPeerUnverifiedException cause",
    "date": "2019-07-08T08:44:58Z",
    "url": "https://github.com/redis/jedis/commit/5bb633c7739ca39280680000f3a112b81bfeda38",
    "details": {
      "sha": "e81e70fde1c7f2da9ce300364dd0ff25f861fc4d",
      "filename": "src/test/java/redis/clients/jedis/tests/SSLJedisTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/redis/jedis/blob/5bb633c7739ca39280680000f3a112b81bfeda38/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FSSLJedisTest.java",
      "raw_url": "https://github.com/redis/jedis/raw/5bb633c7739ca39280680000f3a112b81bfeda38/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FSSLJedisTest.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2FSSLJedisTest.java?ref=5bb633c7739ca39280680000f3a112b81bfeda38",
      "patch": "@@ -308,7 +308,7 @@ public boolean verify(String hostname, SSLSession session) {\n       try {\n         peerCertificate = (X509Certificate) session.getPeerCertificates()[0];\n       } catch (SSLPeerUnverifiedException e) {\n-        throw new IllegalStateException(\"The session does not contain a peer X.509 certificate.\");\n+        throw new IllegalStateException(\"The session does not contain a peer X.509 certificate.\",  e);\n       }\n       String peerCertificateCN = getCommonName(peerCertificate);\n       return hostname.equals(peerCertificateCN);\n@@ -325,4 +325,4 @@ private String getCommonName(X509Certificate peerCertificate) {\n       throw new IllegalArgumentException(\"The certificate has no common name.\");\n     }\n   }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "a82ca0e55f098055bd990c71746f68c588498d8d"
    }
  },
  {
    "oid": "a068d0ce41a1e500671bdd0c5706378aeee3e840",
    "message": "Fix for Sentinel MasterListener uncaught exception death (#1422)\n\n* Fixed MasterListener so a broader exception will be catched\r\n\r\n* Revert \"Fixed MasterListener so a broader exception will be catched\"\r\n\r\nThis reverts commit 93be077b7bbe41801f8c25eb9b78e27fa9f58b20.\r\n\r\n* Fixed MasterListener so a broader exception will be catched",
    "date": "2016-11-08T06:33:47Z",
    "url": "https://github.com/redis/jedis/commit/a068d0ce41a1e500671bdd0c5706378aeee3e840",
    "details": {
      "sha": "1140fdcf2d0807ab513c0ddb50a22a46669e1819",
      "filename": "src/main/java/redis/clients/jedis/JedisSentinelPool.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/a068d0ce41a1e500671bdd0c5706378aeee3e840/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java",
      "raw_url": "https://github.com/redis/jedis/raw/a068d0ce41a1e500671bdd0c5706378aeee3e840/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisSentinelPool.java?ref=a068d0ce41a1e500671bdd0c5706378aeee3e840",
      "patch": "@@ -298,7 +298,7 @@ public void onMessage(String channel, String message) {\n             }\n           }, \"+switch-master\");\n \n-        } catch (JedisConnectionException e) {\n+        } catch (JedisException e) {\n \n           if (running.get()) {\n             log.log(Level.SEVERE, \"Lost connection to Sentinel at \" + host + \":\" + port",
      "parent_sha": "7595058e4a9342af0da8d43b5ccf207c41631155"
    }
  },
  {
    "oid": "5bd7d2a81f5f549792104e204348252c388f7561",
    "message": "Fix typo",
    "date": "2015-06-05T23:56:23Z",
    "url": "https://github.com/redis/jedis/commit/5bd7d2a81f5f549792104e204348252c388f7561",
    "details": {
      "sha": "2225372f6bf7220151b2a814468fb1ba9a2ae14e",
      "filename": "src/main/java/redis/clients/util/Hashing.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/5bd7d2a81f5f549792104e204348252c388f7561/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FHashing.java",
      "raw_url": "https://github.com/redis/jedis/raw/5bd7d2a81f5f549792104e204348252c388f7561/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FHashing.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FHashing.java?ref=5bd7d2a81f5f549792104e204348252c388f7561",
      "patch": "@@ -18,7 +18,7 @@ public long hash(byte[] key) {\n           md5Holder.set(MessageDigest.getInstance(\"MD5\"));\n         }\n       } catch (NoSuchAlgorithmException e) {\n-        throw new IllegalStateException(\"++++ no md5 algorythm found\");\n+        throw new IllegalStateException(\"++++ no md5 algorithm found\");\n       }\n       MessageDigest md5 = md5Holder.get();\n ",
      "parent_sha": "673737d95e23ac8104a363f574eda3e80bd75aab"
    }
  },
  {
    "oid": "c4988b2b98ae5baa54475187f6afa54ad4214887",
    "message": "Fix JedisPooled constructors missing poolConfig param (#3185)",
    "date": "2022-10-30T13:35:58Z",
    "url": "https://github.com/redis/jedis/commit/c4988b2b98ae5baa54475187f6afa54ad4214887",
    "details": {
      "sha": "483e70194b042d324f236f0e840a625c761773b2",
      "filename": "src/main/java/redis/clients/jedis/JedisPooled.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/redis/jedis/blob/c4988b2b98ae5baa54475187f6afa54ad4214887/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooled.java",
      "raw_url": "https://github.com/redis/jedis/raw/c4988b2b98ae5baa54475187f6afa54ad4214887/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooled.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FJedisPooled.java?ref=c4988b2b98ae5baa54475187f6afa54ad4214887",
      "patch": "@@ -280,7 +280,7 @@ public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final S\n       final HostnameVerifier hostnameVerifier) {\n     this(new HostAndPort(host, port), DefaultJedisClientConfig.create(connectionTimeout, soTimeout,\n         infiniteSoTimeout, user, password, database, clientName, ssl, sslSocketFactory, sslParameters,\n-        hostnameVerifier, null));\n+        hostnameVerifier, null), poolConfig);\n   }\n \n   public JedisPooled(final URI uri) {\n@@ -343,7 +343,8 @@ public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final U\n     this(new HostAndPort(uri.getHost(), uri.getPort()), DefaultJedisClientConfig.create(\n         connectionTimeout, soTimeout, infiniteSoTimeout, JedisURIHelper.getUser(uri),\n         JedisURIHelper.getPassword(uri), JedisURIHelper.getDBIndex(uri), null,\n-        JedisURIHelper.isRedisSSLScheme(uri), sslSocketFactory, sslParameters, hostnameVerifier, null));\n+        JedisURIHelper.isRedisSSLScheme(uri), sslSocketFactory, sslParameters, hostnameVerifier,\n+        null), poolConfig);\n   }\n \n   public JedisPooled(final HostAndPort hostAndPort) {",
      "parent_sha": "558acbbaa021c87e145f578012bcb758be90a85d"
    }
  },
  {
    "oid": "e3fb56b6eef26211e70071ee81a44973942a1117",
    "message": "Fix #2559: maxTotalRetriesDuration = soTimeout * maxAttempts (#2560)",
    "date": "2021-06-07T12:04:20Z",
    "url": "https://github.com/redis/jedis/commit/e3fb56b6eef26211e70071ee81a44973942a1117",
    "details": {
      "sha": "becacec168ca0b8563aca366ed60836858bf07e9",
      "filename": "src/main/java/redis/clients/jedis/BinaryJedisCluster.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/redis/jedis/blob/e3fb56b6eef26211e70071ee81a44973942a1117/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java",
      "raw_url": "https://github.com/redis/jedis/raw/e3fb56b6eef26211e70071ee81a44973942a1117/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedisCluster.java?ref=e3fb56b6eef26211e70071ee81a44973942a1117",
      "patch": "@@ -77,7 +77,7 @@ public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeo\n     this.connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig,\n         connectionTimeout, soTimeout, user, password, clientName);\n     this.maxAttempts = maxAttempts;\n-    this.maxTotalRetriesDuration = Duration.ofMillis(soTimeout);\n+    this.maxTotalRetriesDuration = Duration.ofMillis((long) soTimeout * maxAttempts);\n   }\n \n   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeout,\n@@ -86,7 +86,7 @@ public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeo\n     this.connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig,\n         connectionTimeout, soTimeout, infiniteSoTimeout, user, password, clientName);\n     this.maxAttempts = maxAttempts;\n-    this.maxTotalRetriesDuration = Duration.ofMillis(soTimeout);\n+    this.maxTotalRetriesDuration = Duration.ofMillis((long) soTimeout * maxAttempts);\n   }\n \n   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeout,\n@@ -109,7 +109,7 @@ public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeo\n   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, JedisClientConfig clientConfig,\n       int maxAttempts, GenericObjectPoolConfig<Jedis> poolConfig) {\n     this(jedisClusterNode, clientConfig, maxAttempts,\n-        Duration.ofMillis((long) DEFAULT_TIMEOUT * maxAttempts), poolConfig);\n+        Duration.ofMillis((long) clientConfig.getSocketTimeoutMillis() * maxAttempts), poolConfig);\n   }\n \n   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, JedisClientConfig clientConfig,",
      "parent_sha": "987c3c61058c73ee827caaadcb51c1a790c419e7"
    }
  },
  {
    "oid": "70123fc0a59ea9be1307f662dc81171557eef078",
    "message": "Propagate cause for \"Cluster retry deadline exceeded\" exception (#4103)",
    "date": "2025-02-28T14:29:26Z",
    "url": "https://github.com/redis/jedis/commit/70123fc0a59ea9be1307f662dc81171557eef078",
    "details": {
      "sha": "3dbcac0a8c73972b2eddb896b3ed446e1769a208",
      "filename": "src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/70123fc0a59ea9be1307f662dc81171557eef078/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fexecutors%2FClusterCommandExecutor.java",
      "raw_url": "https://github.com/redis/jedis/raw/70123fc0a59ea9be1307f662dc81171557eef078/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fexecutors%2FClusterCommandExecutor.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2Fexecutors%2FClusterCommandExecutor.java?ref=70123fc0a59ea9be1307f662dc81171557eef078",
      "patch": "@@ -131,7 +131,7 @@ private <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica\n         IOUtils.closeQuietly(connection);\n       }\n       if (Instant.now().isAfter(deadline)) {\n-        throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\");\n+        throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\", lastException);\n       }\n     }\n ",
      "parent_sha": "5d8f869123afec8130a03fc5106e64bd6fafaede"
    }
  },
  {
    "oid": "d4d133291e2fad2cda68541974d557a96fc5f6c6",
    "message": "isUse must be final otherwise synchronized has no useful semantic",
    "date": "2010-09-11T06:54:06Z",
    "url": "https://github.com/redis/jedis/commit/d4d133291e2fad2cda68541974d557a96fc5f6c6",
    "details": {
      "sha": "b902fbd235204e16f800f7111788400f65608aa6",
      "filename": "src/main/java/redis/clients/util/FixedResourcePool.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/redis/jedis/blob/d4d133291e2fad2cda68541974d557a96fc5f6c6/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FFixedResourcePool.java",
      "raw_url": "https://github.com/redis/jedis/raw/d4d133291e2fad2cda68541974d557a96fc5f6c6/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FFixedResourcePool.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Futil%2FFixedResourcePool.java?ref=d4d133291e2fad2cda68541974d557a96fc5f6c6",
      "patch": "@@ -195,7 +195,7 @@ public long getResourcesReturned() {\n      */\n     private LinkedBlockingQueue<Wrapper<T>> availableQueue;\n     private LinkedBlockingQueue<Wrapper<T>> repairQueue;\n-    private HashMap<T, Wrapper<T>> inUse = new HashMap<T, Wrapper<T>>();\n+    private final HashMap<T, Wrapper<T>> inUse = new HashMap<T, Wrapper<T>>();\n     private RepairThread[] repairThreads;\n     private Timer t;\n     private boolean initializated = false;",
      "parent_sha": "675e2b1369b9ae215875ed65e24d6a27cc2e0569"
    }
  },
  {
    "oid": "99a50db3ea2915ec5d3e942d1b030a2409c55c72",
    "message": "Disabled logging in JedisPool benchmark",
    "date": "2010-10-14T12:12:41Z",
    "url": "https://github.com/redis/jedis/commit/99a50db3ea2915ec5d3e942d1b030a2409c55c72",
    "details": {
      "sha": "e02742f842da52f475783dba075e6267b63eb15b",
      "filename": "src/test/java/redis/clients/jedis/tests/benchmark/PoolBenchmark.java",
      "status": "modified",
      "additions": 47,
      "deletions": 72,
      "changes": 119,
      "blob_url": "https://github.com/redis/jedis/blob/99a50db3ea2915ec5d3e942d1b030a2409c55c72/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fbenchmark%2FPoolBenchmark.java",
      "raw_url": "https://github.com/redis/jedis/raw/99a50db3ea2915ec5d3e942d1b030a2409c55c72/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fbenchmark%2FPoolBenchmark.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Ftest%2Fjava%2Fredis%2Fclients%2Fjedis%2Ftests%2Fbenchmark%2FPoolBenchmark.java?ref=99a50db3ea2915ec5d3e942d1b030a2409c55c72",
      "patch": "@@ -6,94 +6,69 @@\n import java.util.List;\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n import redis.clients.jedis.Jedis;\n import redis.clients.jedis.JedisPool;\n import redis.clients.jedis.tests.HostAndPortUtil;\n import redis.clients.jedis.tests.HostAndPortUtil.HostAndPort;\n+import redis.clients.util.FixedResourcePool;\n \n public class PoolBenchmark {\n-\tprivate static HostAndPort hnp = HostAndPortUtil.getRedisServers().get(0);\n+    private static HostAndPort hnp = HostAndPortUtil.getRedisServers().get(0);\n     private static final int TOTAL_OPERATIONS = 100000;\n \n     public static void main(String[] args) throws UnknownHostException,\n-\t    IOException, TimeoutException, InterruptedException {\n-\tJedis j = new Jedis(hnp.host, hnp.port);\n-\tj.connect();\n-\tj.auth(\"foobared\");\n-\tj.flushAll();\n-\tj.quit();\n-\tj.disconnect();\n-\tlong t = System.currentTimeMillis();\n-\t// withoutPool();\n-\twithPool();\n-\tlong elapsed = System.currentTimeMillis() - t;\n-\tSystem.out.println(((1000 * 2 * TOTAL_OPERATIONS) / elapsed) + \" ops\");\n-    }\n-\n-    private static void withoutPool() throws InterruptedException {\n-\tList<Thread> tds = new ArrayList<Thread>();\n+            IOException, TimeoutException, InterruptedException {\n+        Logger logger = Logger.getLogger(FixedResourcePool.class.getName());\n+        logger.setLevel(Level.OFF);\n \n-\tfor (int i = 0; i < TOTAL_OPERATIONS; i++) {\n-\t    final String key = \"foo\" + i;\n-\t    Thread hj = new Thread(new Runnable() {\n-\t\t@Override\n-\t\tpublic void run() {\n-\t\t    Jedis j = new Jedis(hnp.host, hnp.port);\n-\t\t    try {\n-\t\t\tj.connect();\n-\t\t\tj.auth(\"foobared\");\n-\t\t\tj.set(key, key);\n-\t\t\tj.get(key);\n-\t\t\tj.quit();\n-\t\t\tj.disconnect();\n-\t\t    } catch (UnknownHostException e) {\n-\t\t\te.printStackTrace();\n-\t\t    } catch (IOException e) {\n-\t\t\te.printStackTrace();\n-\t\t    }\n-\t\t}\n-\t    });\n-\t    tds.add(hj);\n-\t    hj.start();\n-\t}\n-\tfor (Thread thread : tds) {\n-\t    thread.join();\n-\t}\n+        Jedis j = new Jedis(hnp.host, hnp.port);\n+        j.connect();\n+        j.auth(\"foobared\");\n+        j.flushAll();\n+        j.quit();\n+        j.disconnect();\n+        long t = System.currentTimeMillis();\n+        // withoutPool();\n+        withPool();\n+        long elapsed = System.currentTimeMillis() - t;\n+        System.out.println(((1000 * 2 * TOTAL_OPERATIONS) / elapsed) + \" ops\");\n     }\n \n     private static void withPool() throws InterruptedException {\n-\tfinal JedisPool pool = new JedisPool(hnp.host, hnp.port,\n-\t\t2000, \"foobared\");\n-\tpool.setResourcesNumber(50);\n-\tpool.setDefaultPoolWait(1000000);\n-\tpool.init();\n-\tList<Thread> tds = new ArrayList<Thread>();\n+        final JedisPool pool = new JedisPool(hnp.host, hnp.port, 2000,\n+                \"foobared\");\n+        pool.setResourcesNumber(50);\n+        pool.setDefaultPoolWait(1000000);\n+        pool.init();\n+        List<Thread> tds = new ArrayList<Thread>();\n \n-\tfinal AtomicInteger ind = new AtomicInteger();\n-\tfor (int i = 0; i < 50; i++) {\n-\t    Thread hj = new Thread(new Runnable() {\n-\t\tpublic void run() {\n-\t\t    for (int i = 0; (i = ind.getAndIncrement()) < TOTAL_OPERATIONS;) {\n-\t\t\ttry {\n-\t\t\t    Jedis j = pool.getResource();\n-\t\t\t    final String key = \"foo\" + i;\n-\t\t\t    j.set(key, key);\n-\t\t\t    j.get(key);\n-\t\t\t    pool.returnResource(j);\n-\t\t\t} catch (Exception e) {\n-\t\t\t    e.printStackTrace();\n-\t\t\t}\n-\t\t    }\n-\t\t}\n-\t    });\n-\t    tds.add(hj);\n-\t    hj.start();\n-\t}\n+        final AtomicInteger ind = new AtomicInteger();\n+        for (int i = 0; i < 50; i++) {\n+            Thread hj = new Thread(new Runnable() {\n+                public void run() {\n+                    for (int i = 0; (i = ind.getAndIncrement()) < TOTAL_OPERATIONS;) {\n+                        try {\n+                            Jedis j = pool.getResource();\n+                            final String key = \"foo\" + i;\n+                            j.set(key, key);\n+                            j.get(key);\n+                            pool.returnResource(j);\n+                        } catch (Exception e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n+                }\n+            });\n+            tds.add(hj);\n+            hj.start();\n+        }\n \n-\tfor (Thread t : tds)\n-\t    t.join();\n+        for (Thread t : tds)\n+            t.join();\n \n-\tpool.destroy();\n+        pool.destroy();\n     }\n }\n\\ No newline at end of file",
      "parent_sha": "3f21dcd0eb97b3b7c4847c913b0955e391192245"
    }
  },
  {
    "oid": "0ca1d7eb680189acb0cacf936736f808ad33fc69",
    "message": "Avoid NullPointException from SetFromList class (#2454)",
    "date": "2021-03-31T15:03:14Z",
    "url": "https://github.com/redis/jedis/commit/0ca1d7eb680189acb0cacf936736f808ad33fc69",
    "details": {
      "sha": "bbe22a1039233192a021f775272fbc9e30f07821",
      "filename": "src/main/java/redis/clients/jedis/BinaryJedis.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/redis/jedis/blob/0ca1d7eb680189acb0cacf936736f808ad33fc69/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java",
      "raw_url": "https://github.com/redis/jedis/raw/0ca1d7eb680189acb0cacf936736f808ad33fc69/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java",
      "contents_url": "https://api.github.com/repos/redis/jedis/contents/src%2Fmain%2Fjava%2Fredis%2Fclients%2Fjedis%2FBinaryJedis.java?ref=0ca1d7eb680189acb0cacf936736f808ad33fc69",
      "patch": "@@ -4611,9 +4611,6 @@ protected static class SetFromList<E> extends AbstractSet<E> implements Serializ\n     private final List<E> list;\n \n     private SetFromList(List<E> list) {\n-      if (list == null) {\n-        throw new NullPointerException(\"list\");\n-      }\n       this.list = list;\n     }\n \n@@ -4702,6 +4699,9 @@ public boolean retainAll(Collection<?> c) {\n     }\n \n     protected static <E> SetFromList<E> of(List<E> list) {\n+      if (list == null) {\n+        return null;\n+      }\n       return new SetFromList<>(list);\n     }\n   }",
      "parent_sha": "27cd53c8dd87aa064a6ca5516ea25939f6e242a9"
    }
  }
]