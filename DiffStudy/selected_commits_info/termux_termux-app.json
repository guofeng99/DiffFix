[
  {
    "oid": "f62997a60e5980ecf4522c4def2c2ef32de31194",
    "message": "Fixed: Log exception instead of crashing app on NumberFormatException for invalid termcap/terminfo string requested\n\njava.lang.NumberFormatException: For input string: \" a\"\nat java.lang.Long.parseLong(Long.java:583)\nat java.lang.Long.valueOf(Long.java:781)\nat java.lang.Long.decode(Long.java:933)\nat com.termux.terminal.TerminalEmulator.doDeviceControl(TerminalEmulator.java:940)\nat com.termux.terminal.TerminalEmulator.processCodePoint(TerminalEmulator.java:813)",
    "date": "2022-01-22T20:36:41Z",
    "url": "https://github.com/termux/termux-app/commit/f62997a60e5980ecf4522c4def2c2ef32de31194",
    "details": {
      "sha": "8efb949bd2b6b2d131c9bbdedcb4ad560246fe38",
      "filename": "terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/termux/termux-app/blob/f62997a60e5980ecf4522c4def2c2ef32de31194/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java",
      "raw_url": "https://github.com/termux/termux-app/raw/f62997a60e5980ecf4522c4def2c2ef32de31194/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java?ref=f62997a60e5980ecf4522c4def2c2ef32de31194",
      "patch": "@@ -935,10 +935,17 @@ private void doDeviceControl(int b) {\n                     for (String part : dcs.substring(2).split(\";\")) {\n                         if (part.length() % 2 == 0) {\n                             StringBuilder transBuffer = new StringBuilder();\n+                            char c;\n                             for (int i = 0; i < part.length(); i += 2) {\n-                                char c = (char) Long.decode(\"0x\" + part.charAt(i) + \"\" + part.charAt(i + 1)).longValue();\n+                                try {\n+                                    c = (char) Long.decode(\"0x\" + part.charAt(i) + \"\" + part.charAt(i + 1)).longValue();\n+                                } catch (NumberFormatException e) {\n+                                    Logger.logStackTraceWithMessage(mClient, LOG_TAG, \"Invalid device termcap/terminfo encoded name \\\"\" + part + \"\\\"\", e);\n+                                    continue;\n+                                }\n                                 transBuffer.append(c);\n                             }\n+\n                             String trans = transBuffer.toString();\n                             String responseValue;\n                             switch (trans) {",
      "parent_sha": "79980a07a86ced101a100e310d611459700303a1"
    }
  },
  {
    "oid": "956e20e53dfead797f8e279f300579484dbf985a",
    "message": "Fixed: Fix NullPointerException when running bell/vibrate on Samsung devices on android 8 and handled deprecated code\n\nApparently occurs on only Samsung android 8 devices and there is no fix for vibrator except catching the exception so that app doesn't crash.\n\nhttps://gitlab.com/juanitobananas/wave-up/-/issues/131\nhttps://github.com/overbound/SonicTimeTwisted/issues/131\nhttps://web.archive.org/web/20201114040257/https://www.badlogicgames.com/forum/viewtopic.php?t=28507\n\n```\njava.lang.NullPointerException: Attempt to read from field 'android.os.VibrationEffect com.android.server.VibratorService$Vibration.mEffect' on a null object reference\nat android.os.Parcel.readException(Parcel.java:2035)\nat android.os.Parcel.readException(Parcel.java:1975)\nat android.os.IVibratorService$Stub$Proxy.vibrate(IVibratorService.java:292)\nat android.os.SystemVibrator.vibrate(SystemVibrator.java:81)\nat android.os.Vibrator.vibrate(Vibrator.java:191)\nat android.os.Vibrator.vibrate(Vibrator.java:110)\nat android.os.Vibrator.vibrate(Vibrator.java:89)\nat com.termux.app.terminal.io.BellHandler$1.run(BellHandler.java:37)\nat com.termux.app.terminal.io.BellHandler.doBell(BellHandler.java:55)\nat com.termux.app.terminal.TermuxTerminalSessionClient.onBell(TermuxTerminalSessionClient.java:178)\nat com.termux.terminal.TerminalSession.onBell(TerminalSession.java:278)\n```",
    "date": "2021-08-20T23:22:43Z",
    "url": "https://github.com/termux/termux-app/commit/956e20e53dfead797f8e279f300579484dbf985a",
    "details": {
      "sha": "76f592c7d4df1b0d06892ce6215b8a06b62a4dfd",
      "filename": "app/src/main/java/com/termux/app/terminal/io/BellHandler.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/termux/termux-app/blob/956e20e53dfead797f8e279f300579484dbf985a/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2Fio%2FBellHandler.java",
      "raw_url": "https://github.com/termux/termux-app/raw/956e20e53dfead797f8e279f300579484dbf985a/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2Fio%2FBellHandler.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2Fio%2FBellHandler.java?ref=956e20e53dfead797f8e279f300579484dbf985a",
      "patch": "@@ -1,15 +1,21 @@\n package com.termux.app.terminal.io;\n \n import android.content.Context;\n+import android.os.Build;\n import android.os.Handler;\n import android.os.Looper;\n import android.os.SystemClock;\n+import android.os.VibrationEffect;\n import android.os.Vibrator;\n \n+import com.termux.shared.logger.Logger;\n+\n public class BellHandler {\n     private static BellHandler instance = null;\n     private static final Object lock = new Object();\n \n+    private static final String LOG_TAG = \"BellHandler\";\n+\n     public static BellHandler getInstance(Context context) {\n         if (instance == null) {\n             synchronized (lock) {\n@@ -34,7 +40,17 @@ private BellHandler(final Vibrator vibrator) {\n             @Override\n             public void run() {\n                 if (vibrator != null) {\n-                    vibrator.vibrate(DURATION);\n+                    try {\n+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+                            vibrator.vibrate(VibrationEffect.createOneShot(DURATION, VibrationEffect.DEFAULT_AMPLITUDE));\n+                        } else {\n+                            vibrator.vibrate(DURATION);\n+                        }\n+                    } catch (Exception e) {\n+                        // Issue on samsung devices on android 8\n+                        // java.lang.NullPointerException: Attempt to read from field 'android.os.VibrationEffect com.android.server.VibratorService$Vibration.mEffect' on a null object reference\n+                        Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to run vibrator\", e);\n+                    }\n                 }\n             }\n         };",
      "parent_sha": "10704b1dad42a3d2f06bc6244db89a12a7058d51"
    }
  },
  {
    "oid": "5e2bec0f4c23d15033eaa043653a63d11e1170a2",
    "message": "Added: Add constants for launcher activities of termux plugins",
    "date": "2021-09-23T11:51:08Z",
    "url": "https://github.com/termux/termux-app/commit/5e2bec0f4c23d15033eaa043653a63d11e1170a2",
    "details": {
      "sha": "57b619fc6d5ecad2ba14133e8e85cbefa2eef428",
      "filename": "termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java",
      "status": "modified",
      "additions": 37,
      "deletions": 1,
      "changes": 38,
      "blob_url": "https://github.com/termux/termux-app/blob/5e2bec0f4c23d15033eaa043653a63d11e1170a2/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/5e2bec0f4c23d15033eaa043653a63d11e1170a2/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java?ref=5e2bec0f4c23d15033eaa043653a63d11e1170a2",
      "patch": "@@ -12,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.31.0\n+ * Version: v0.32.0\n  *\n  * Changelog\n  *\n@@ -207,6 +207,10 @@\n  * - 0.31.0 (2021-09-09)\n  *      - Added following to `TERMUX_APP.TERMUX_SERVICE`:\n  *          `MIN_VALUE_EXTRA_SESSION_ACTION` and `MAX_VALUE_EXTRA_SESSION_ACTION`.\n+ *\n+ * - 0.32.0 (2021-09-23)\n+ *      - Added `TERMUX_API.TERMUX_API_ACTIVITY_NAME`, `TERMUX_TASKER.TERMUX_TASKER_ACTIVITY_NAME`\n+ *          and `TERMUX_WIDGET.TERMUX_WIDGET_ACTIVITY_NAME`.\n  */\n \n /**\n@@ -1123,6 +1127,20 @@ public static final class RESULT_SENDER {\n \n \n \n+    /**\n+     * Termux:API app constants.\n+     */\n+    public static final class TERMUX_API {\n+\n+        /** Termux:API app core activity name. */\n+        public static final String TERMUX_API_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPIActivity\"; // Default: \"com.termux.tasker.activities.TermuxAPIActivity\"\n+\n+    }\n+\n+\n+\n+\n+\n     /**\n      * Termux:Float app constants.\n      */\n@@ -1167,11 +1185,29 @@ public static final class TERMUX_STYLING {\n \n \n \n+    /**\n+     * Termux:Tasker app constants.\n+     */\n+    public static final class TERMUX_TASKER {\n+\n+        /** Termux:Tasker app core activity name. */\n+        public static final String TERMUX_TASKER_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerActivity\"\n+\n+    }\n+\n+\n+\n+\n+\n     /**\n      * Termux:Widget app constants.\n      */\n     public static final class TERMUX_WIDGET {\n \n+        /** Termux:Widget app core activity name. */\n+        public static final String TERMUX_WIDGET_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetActivity\"\n+\n+\n         /**  Intent {@code String} extra for the token of the Termux:Widget app shortcuts. */\n         public static final String EXTRA_TOKEN_NAME = TERMUX_PACKAGE_NAME + \".shortcut.token\"; // Default: \"com.termux.shortcut.token\"\n ",
      "parent_sha": "075a080f00e7ec637e69cc714c49239718bfda3d"
    }
  },
  {
    "oid": "ef1ab197b6481c9ffb3a29bf0452b7b5d7f87cdf",
    "message": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.11.0`. Check its Changelog sections for info on changes.",
    "date": "2021-03-23T22:51:57Z",
    "url": "https://github.com/termux/termux-app/commit/ef1ab197b6481c9ffb3a29bf0452b7b5d7f87cdf",
    "details": {
      "sha": "f578509002fe6f1fa8df0720c8eb1246bc6213cb",
      "filename": "app/src/main/java/com/termux/app/TermuxConstants.java",
      "status": "modified",
      "additions": 36,
      "deletions": 16,
      "changes": 52,
      "blob_url": "https://github.com/termux/termux-app/blob/ef1ab197b6481c9ffb3a29bf0452b7b5d7f87cdf/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/ef1ab197b6481c9ffb3a29bf0452b7b5d7f87cdf/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java?ref=ef1ab197b6481c9ffb3a29bf0452b7b5d7f87cdf",
      "patch": "@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.10.0\n+ * Version: v0.11.0\n  *\n  * Changelog\n  *\n@@ -55,8 +55,7 @@\n  *      - Added following to `TERMUX_SERVICE`:\n  *          `EXTRA_PENDING_INTENT`, `EXTRA_RESULT_BUNDLE`,\n  *          `EXTRA_STDOUT`, `EXTRA_STDERR`, `EXTRA_EXIT_CODE`,\n- *          `EXTRA_ERR`, `EXTRA_ERRMSG`\n- *          .\n+ *          `EXTRA_ERR`, `EXTRA_ERRMSG`.\n  *\n  * - 0.9.0 (2021-03-18)\n  *      - Fixed javadocs.\n@@ -67,9 +66,16 @@\n  *          `VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY`,\n  *          `VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_OPEN_ACTIVITY`,\n  *          `VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_DONT_OPEN_ACTIVITY`\n- *          `VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY`\n+ *          `VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY`.\n  *      - Added following to `RUN_COMMAND_SERVICE`:\n- *          `EXTRA_SESSION_ACTION`\n+ *          `EXTRA_SESSION_ACTION`.\n+ *\n+ * - 0.11.0 (2021-03-24)\n+ *      - Added following to `TERMUX_SERVICE`:\n+ *          `EXTRA_COMMAND_LABEL`, `EXTRA_COMMAND_DESCRIPTION`, `EXTRA_COMMAND_HELP`, `EXTRA_PLUGIN_API_HELP`.\n+ *      - Added following to `RUN_COMMAND_SERVICE`:\n+ *          `EXTRA_COMMAND_LABEL`, `EXTRA_COMMAND_DESCRIPTION`, `EXTRA_COMMAND_HELP`.\n+ *      - Updated `RESULT_BUNDLE` related extras with `PLUGIN_RESULT_BUNDLE` prefixes.\n  */\n \n /**\n@@ -432,6 +438,14 @@ public static final class TERMUX_SERVICE {\n             public static final String EXTRA_SESSION_ACTION = TERMUX_PACKAGE_NAME + \".execute.session_action\"; // Default: \"com.termux.execute.session_action\"\n             /** Intent {@code Parcelable} extra containing pending intent for the execute command caller */\n             public static final String EXTRA_PENDING_INTENT = \"pendingIntent\"; // Default: \"pendingIntent\"\n+            /** Intent {@code String} extra for label of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            public static final String EXTRA_COMMAND_LABEL = TERMUX_PACKAGE_NAME + \".execute.command_label\"; // Default: \"com.termux.execute.command_label\"\n+            /** Intent markdown {@code String} extra for description of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            public static final String EXTRA_COMMAND_DESCRIPTION = TERMUX_PACKAGE_NAME + \".execute.command_description\"; // Default: \"com.termux.execute.command_description\"\n+            /** Intent markdown {@code String} extra for help of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            public static final String EXTRA_COMMAND_HELP = TERMUX_PACKAGE_NAME + \".execute.command_help\"; // Default: \"com.termux.execute.command_help\"\n+            /** Intent markdown {@code String} extra for help of the plugin API for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent (Internal Use Only) */\n+            public static final String EXTRA_PLUGIN_API_HELP = TERMUX_PACKAGE_NAME + \".execute.plugin_api_help\"; // Default: \"com.termux.execute.plugin_help\"\n \n \n \n@@ -469,17 +483,17 @@ public static final class TERMUX_SERVICE {\n             /** Intent {@code Bundle} extra to store result of execute command that is sent back for the\n              * TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent if the {@link #EXTRA_PENDING_INTENT} is not\n              * {@code null} */\n-            public static final String EXTRA_RESULT_BUNDLE = \"result\"; // Default: \"result\"\n-            /** Intent {@code String} extra for stdout value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_STDOUT = \"stdout\"; // Default: \"stdout\"\n-            /** Intent {@code String} extra for stderr value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_STDERR = \"stderr\"; // Default: \"stderr\"\n-            /** Intent {@code int} extra for exit code value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_EXIT_CODE = \"exitCode\"; // Default: \"exitCode\"\n-            /** Intent {@code int} extra for err value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_ERR = \"err\"; // Default: \"err\"\n-            /** Intent {@code String} extra for errmsg value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_ERRMSG = \"errmsg\"; // Default: \"errmsg\"\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE = \"result\"; // Default: \"result\"\n+            /** Intent {@code String} extra for stdout value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT = \"stdout\"; // Default: \"stdout\"\n+            /** Intent {@code String} extra for stderr value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDERR = \"stderr\"; // Default: \"stderr\"\n+            /** Intent {@code int} extra for exit code value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_EXIT_CODE = \"exitCode\"; // Default: \"exitCode\"\n+            /** Intent {@code int} extra for err value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_ERR = \"err\"; // Default: \"err\"\n+            /** Intent {@code String} extra for errmsg value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_ERRMSG = \"errmsg\"; // Default: \"errmsg\"\n \n         }\n \n@@ -507,6 +521,12 @@ public static final class RUN_COMMAND_SERVICE {\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_BACKGROUND\"; // Default: \"com.termux.RUN_COMMAND_BACKGROUND\"\n             /** Intent {@code String} extra for session action of foreground commands for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_SESSION_ACTION = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_SESSION_ACTION\"; // Default: \"com.termux.RUN_COMMAND_SESSION_ACTION\"\n+            /** Intent {@code String} extra for label of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_COMMAND_LABEL = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_COMMAND_LABEL\"; // Default: \"com.termux.RUN_COMMAND_COMMAND_LABEL\"\n+            /** Intent markdown {@code String} extra for description of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_COMMAND_DESCRIPTION = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_COMMAND_DESCRIPTION\"; // Default: \"com.termux.RUN_COMMAND_COMMAND_DESCRIPTION\"\n+            /** Intent markdown {@code String} extra for help of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_COMMAND_HELP = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_COMMAND_HELP\"; // Default: \"com.termux.RUN_COMMAND_COMMAND_HELP\"\n \n         }\n     }",
      "parent_sha": "bccc35bc3fb19c25580c384d3dfd5f1a7d3daaa2"
    }
  },
  {
    "oid": "b086270a5a72278b3cc1fe1c1917264f61cff07a",
    "message": "Support auto detection of dark theme\n\nBy default it uses the system setting. If use-black-ui is set to either\ntrue or false, that overrides it.\n\nFixes #1351 properly, fixes #1354",
    "date": "2020-06-09T08:59:07Z",
    "url": "https://github.com/termux/termux-app/commit/b086270a5a72278b3cc1fe1c1917264f61cff07a",
    "details": {
      "sha": "a23924533d60de9aa3a12e9ef829a9b73eef9954",
      "filename": "app/src/main/java/com/termux/app/TermuxPreferences.java",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/termux/termux-app/blob/b086270a5a72278b3cc1fe1c1917264f61cff07a/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java",
      "raw_url": "https://github.com/termux/termux-app/raw/b086270a5a72278b3cc1fe1c1917264f61cff07a/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java?ref=b086270a5a72278b3cc1fe1c1917264f61cff07a",
      "patch": "@@ -2,6 +2,7 @@\n \n import android.content.Context;\n import android.content.SharedPreferences;\n+import android.content.res.Configuration;\n import android.preference.PreferenceManager;\n import android.util.Log;\n import android.util.TypedValue;\n@@ -58,7 +59,7 @@ final static class KeyboardShortcut {\n     private static final String CURRENT_SESSION_KEY = \"current_session\";\n     private static final String SCREEN_ALWAYS_ON_KEY = \"screen_always_on\";\n \n-    private String mUseDarkUI;\n+    private boolean mUseDarkUI;\n     private boolean mScreenAlwaysOn;\n     private int mFontSize;\n \n@@ -129,7 +130,7 @@ boolean isScreenAlwaysOn() {\n     }\n \n     boolean isUsingBlackUI() {\n-        return mUseDarkUI.toLowerCase().equals(\"true\");\n+        return mUseDarkUI;\n     }\n \n     void setScreenAlwaysOn(Context context, boolean newValue) {\n@@ -179,7 +180,17 @@ void reloadFromProperties(Context context) {\n                 break;\n         }\n \n-        mUseDarkUI = props.getProperty(\"use-black-ui\", \"false\");\n+        switch (props.getProperty(\"use-black-ui\", \"\").toLowerCase()) {\n+            case \"true\":\n+                mUseDarkUI = true;\n+                break;\n+            case \"false\":\n+                mUseDarkUI = false;\n+                break;\n+            default:\n+                int nightMode = context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\n+                mUseDarkUI = nightMode == Configuration.UI_MODE_NIGHT_YES;\n+        }\n \n         try {\n             JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC', 'TAB', 'CTRL', 'ALT', '-', 'DOWN', 'UP']]\"));",
      "parent_sha": "f39f06a540169994e8e53218e188de35a26010c0"
    }
  },
  {
    "oid": "b0e1dbc3da72b2716a3813a8e7991365478b6095",
    "message": "Fixed: Use `TERMUX_STYLING_APP` for `TERMUX_STYLING_ACTIVITY_NAME` as per 078eea2b",
    "date": "2025-01-12T20:50:45Z",
    "url": "https://github.com/termux/termux-app/commit/b0e1dbc3da72b2716a3813a8e7991365478b6095",
    "details": {
      "sha": "0c9f74125b963bb23d9696e3b58835db698e8202",
      "filename": "app/src/main/java/com/termux/app/TermuxActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/b0e1dbc3da72b2716a3813a8e7991365478b6095/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "raw_url": "https://github.com/termux/termux-app/raw/b0e1dbc3da72b2716a3813a8e7991365478b6095/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java?ref=b0e1dbc3da72b2716a3813a8e7991365478b6095",
      "patch": "@@ -736,7 +736,7 @@ private void onResetTerminalSession(TerminalSession session) {\n \n     private void showStylingDialog() {\n         Intent stylingIntent = new Intent();\n-        stylingIntent.setClassName(TermuxConstants.TERMUX_STYLING_PACKAGE_NAME, TermuxConstants.TERMUX_STYLING.TERMUX_STYLING_ACTIVITY_NAME);\n+        stylingIntent.setClassName(TermuxConstants.TERMUX_STYLING_PACKAGE_NAME, TermuxConstants.TERMUX_STYLING_APP.TERMUX_STYLING_ACTIVITY_NAME);\n         try {\n             startActivity(stylingIntent);\n         } catch (ActivityNotFoundException | IllegalArgumentException e) {",
      "parent_sha": "078eea2b74173d4b28884af746d6c6b3c0208193"
    }
  },
  {
    "oid": "701b5ccd5ca8ccb426046c6bc7c86279e29b5ae0",
    "message": "Fixed: Fix ArrayIndexOutOfBoundsException thrown because length was less than 0 when selecting text from terminal buffer\n\njava.lang.ArrayIndexOutOfBoundsException: src.length=132 srcPos=90 dst.length=16 dstPos=0 length=-2\nat java.lang.System.arraycopy(System.java:469)\nat java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:597)\nat java.lang.StringBuilder.append(StringBuilder.java:191)\nat com.termux.terminal.TerminalBuffer.getSelectedText(TerminalBuffer.java:97)\nat com.termux.terminal.TerminalBuffer.getSelectedText(TerminalBuffer.java:57)\nat com.termux.terminal.TerminalBuffer.getSelectedText(TerminalBuffer.java:53)\nat com.termux.terminal.TerminalEmulator.getSelectedText(TerminalEmulator.java:2401)\nat com.termux.view.textselection.TextSelectionCursorController$1.onActionItemClicked(TextSelectionCursorController.java:140)",
    "date": "2022-01-22T20:36:41Z",
    "url": "https://github.com/termux/termux-app/commit/701b5ccd5ca8ccb426046c6bc7c86279e29b5ae0",
    "details": {
      "sha": "4a74ee6f1dbe116ff7eabe497cb4e7cc5dc4ebc3",
      "filename": "terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/termux/termux-app/blob/701b5ccd5ca8ccb426046c6bc7c86279e29b5ae0/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalBuffer.java",
      "raw_url": "https://github.com/termux/termux-app/raw/701b5ccd5ca8ccb426046c6bc7c86279e29b5ae0/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalBuffer.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalBuffer.java?ref=701b5ccd5ca8ccb426046c6bc7c86279e29b5ae0",
      "patch": "@@ -93,8 +93,11 @@ public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolea\n                     if (c != ' ') lastPrintingCharIndex = i;\n                 }\n             }\n-            if (lastPrintingCharIndex != -1)\n-                builder.append(line, x1Index, lastPrintingCharIndex - x1Index + 1);\n+\n+            int len = lastPrintingCharIndex - x1Index + 1;\n+            if (lastPrintingCharIndex != -1 && len > 0)\n+                builder.append(line, x1Index, len);\n+\n             boolean lineFillsWidth = lastPrintingCharIndex == x2Index - 1;\n             if ((!joinBackLines || !rowLineWrap) && (!joinFullLines || !lineFillsWidth)\n                 && row < selY2 && row < mScreenRows - 1) builder.append('\\n');",
      "parent_sha": "9798b30c76c032393854280389fa5a9c75383ac9"
    }
  },
  {
    "oid": "493900d60bbaf1300732fa535ad8834263416eb0",
    "message": "Add PATH environemnt variable in failsafe mode",
    "date": "2016-03-14T23:08:31Z",
    "url": "https://github.com/termux/termux-app/commit/493900d60bbaf1300732fa535ad8834263416eb0",
    "details": {
      "sha": "c32037bf83c1ef126fffb1b41288aa81d3ea84ab",
      "filename": "app/src/main/java/com/termux/app/TermuxService.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/termux/termux-app/blob/493900d60bbaf1300732fa535ad8834263416eb0/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java",
      "raw_url": "https://github.com/termux/termux-app/raw/493900d60bbaf1300732fa535ad8834263416eb0/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java?ref=493900d60bbaf1300732fa535ad8834263416eb0",
      "patch": "@@ -55,7 +55,7 @@ public final class TermuxService extends Service implements SessionChangedCallba\n \t/** Intent action to toggle the wifi lock, {@link #mWifiLock}, which this service may hold. */\n \tprivate static final String ACTION_LOCK_WIFI = \"com.termux.service_toggle_wifi_lock\";\n \t/** Intent action to launch a new terminal session. Executed from TermuxWidgetProvider. */\n-\tprivate static final String ACTION_EXECUTE = \"com.termux.service_execute\";\n+\tpublic static final String ACTION_EXECUTE = \"com.termux.service_execute\";\n \n \t/** This service is only bound from inside the same process and never uses IPC. */\n \tclass LocalBinder extends Binder {\n@@ -239,7 +239,8 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n \t\tfinal String androidDataEnv = \"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\");\n \t\tString[] env;\n \t\tif (failSafe) {\n-\t\t\tenv = new String[] { termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv };\n+            final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n+            env = new String[] { termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv };\n \t\t} else {\n \t\t\tfinal String ps1Env = \"PS1=$ \";\n \t\t\tfinal String ldEnv = \"LD_LIBRARY_PATH=\" + PREFIX_PATH + \"/lib\";",
      "parent_sha": "c6d6a6363730a1bb49aef4c94ebabc9e4f01606b"
    }
  },
  {
    "oid": "9d7ed21f27d7fd0ce153d2b63fd32fcf503e7a7e",
    "message": "Fix Ctrl+/ to send same as Ctrl+_",
    "date": "2016-07-26T22:26:50Z",
    "url": "https://github.com/termux/termux-app/commit/9d7ed21f27d7fd0ce153d2b63fd32fcf503e7a7e",
    "details": {
      "sha": "60c7ff5738bef36c3af78d3d1b51527853007e90",
      "filename": "app/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/termux/termux-app/blob/9d7ed21f27d7fd0ce153d2b63fd32fcf503e7a7e/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/9d7ed21f27d7fd0ce153d2b63fd32fcf503e7a7e/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=9d7ed21f27d7fd0ce153d2b63fd32fcf503e7a7e",
      "patch": "@@ -664,7 +664,9 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n                 codePoint = 29;\n             } else if (codePoint == '^' || codePoint == '6') {\n                 codePoint = 30; // control-^\n-            } else if (codePoint == '_' || codePoint == '7') {\n+            } else if (codePoint == '_' || codePoint == '7' || codePoint == '/') {\n+                // \"Ctrl-/ sends 0x1f which is equivalent of Ctrl-_ since the days of VT102\"\n+                // - http://apple.stackexchange.com/questions/24261/how-do-i-send-c-that-is-control-slash-to-the-terminal\n                 codePoint = 31;\n             } else if (codePoint == '8') {\n                 codePoint = 127; // DEL",
      "parent_sha": "7e2cbd969a7242faa9877d7bb7a83c0603d44ec1"
    }
  },
  {
    "oid": "fe584940e121a7ae500d9ea1f126aa13bf6d8527",
    "message": "fix TerminalView possiblePropLocations IOBE",
    "date": "2021-01-17T03:54:11Z",
    "url": "https://github.com/termux/termux-app/commit/fe584940e121a7ae500d9ea1f126aa13bf6d8527",
    "details": {
      "sha": "cd9663234c46f3a5df61e05d567f76a42b4a0e01",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/fe584940e121a7ae500d9ea1f126aa13bf6d8527/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/fe584940e121a7ae500d9ea1f126aa13bf6d8527/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=fe584940e121a7ae500d9ea1f126aa13bf6d8527",
      "patch": "@@ -1549,7 +1549,7 @@ private Properties getProperties() {\n \n         propsFile = new File(possiblePropLocations[0]);\n         int i = 1;\n-        while (!propsFile.exists() && i <= possiblePropLocations.length) {\n+        while (!propsFile.exists() && i < possiblePropLocations.length) {\n             propsFile = new File(possiblePropLocations[i]);\n             i += 1;\n         }",
      "parent_sha": "78cdaef6d249833905868a2d64257691b6dbbdb4"
    }
  },
  {
    "oid": "ed544102bcc16ce9de239bad36bdfd878dfee1df",
    "message": "Show icons for copy and paste menu items",
    "date": "2016-01-13T11:28:31Z",
    "url": "https://github.com/termux/termux-app/commit/ed544102bcc16ce9de239bad36bdfd878dfee1df",
    "details": {
      "sha": "d858ae85990491b0e7d922960ce808764cf61647",
      "filename": "app/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/termux/termux-app/blob/ed544102bcc16ce9de239bad36bdfd878dfee1df/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/ed544102bcc16ce9de239bad36bdfd878dfee1df/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=ed544102bcc16ce9de239bad36bdfd878dfee1df",
      "patch": "@@ -5,6 +5,7 @@\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n+import android.content.res.TypedArray;\n import android.graphics.Canvas;\n import android.graphics.Rect;\n import android.graphics.Typeface;\n@@ -895,9 +896,13 @@ public void toggleSelectingText(MotionEvent ev) {\n \t\t\tfinal ActionMode.Callback callback = new ActionMode.Callback() {\n \t\t\t\t@Override\n \t\t\t\tpublic boolean onCreateActionMode(ActionMode mode, Menu menu) {\n+\t\t\t\t\tfinal int[] ACTION_MODE_ATTRS = { android.R.attr.actionModeCopyDrawable, android.R.attr.actionModePasteDrawable, };\n+\t\t\t\t\tTypedArray styledAttributes = getContext().obtainStyledAttributes(ACTION_MODE_ATTRS);\n+\t\t\t\t\tint show = MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT;\n+\n \t\t\t\t\tClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n-\t\t\t\t\tmenu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text);\n-\t\t\t\t\tmenu.add(Menu.NONE, 2, Menu.NONE, R.string.paste_text).setEnabled(clipboard.hasPrimaryClip());\n+\t\t\t\t\tmenu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text).setIcon(styledAttributes.getResourceId(0, 0)).setShowAsAction(show);\n+\t\t\t\t\tmenu.add(Menu.NONE, 2, Menu.NONE, R.string.paste_text).setIcon(styledAttributes.getResourceId(1, 0)).setEnabled(clipboard.hasPrimaryClip()).setShowAsAction(show);\n \t\t\t\t\tmenu.add(Menu.NONE, 3, Menu.NONE, R.string.text_selection_more);\n \t\t\t\t\treturn true;\n \t\t\t\t}",
      "parent_sha": "8f1ab1bc17e36eb0d5def49ce856397e86d8f5cc"
    }
  },
  {
    "oid": "87841886d4bf6c4a60d48774333dba6609c97f1f",
    "message": "extra keys: improve handling of DnD mode\n\nDo not disturb mode is now handled only for SDKs pre-28. Extra keys will\nnot vibrate only when total silence mode is used.",
    "date": "2019-11-24T18:08:32Z",
    "url": "https://github.com/termux/termux-app/commit/87841886d4bf6c4a60d48774333dba6609c97f1f",
    "details": {
      "sha": "e2f76dc3ebcdc86100a09bbfa5325668f6dbf38f",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/termux/termux-app/blob/87841886d4bf6c4a60d48774333dba6609c97f1f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/87841886d4bf6c4a60d48774333dba6609c97f1f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=87841886d4bf6c4a60d48774333dba6609c97f1f",
      "patch": "@@ -354,9 +354,13 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n                     if (Settings.System.getInt(getContext().getContentResolver(),\n                         Settings.System.HAPTIC_FEEDBACK_ENABLED, 0) != 0) {\n \n-                        // Depending on DnD settings, value can be >1 but 0 means \"disabled\".\n-                        if (Settings.Global.getInt(getContext().getContentResolver(), \"zen_mode\", 0) < 1) {\n+                        if (Build.VERSION.SDK_INT >= 28) {\n                             finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);\n+                        } else {\n+                            // Perform haptic feedback only if no total silence mode enabled.\n+                            if (Settings.Global.getInt(getContext().getContentResolver(), \"zen_mode\", 0) != 2) {\n+                                finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);\n+                            }\n                         }\n                     }\n ",
      "parent_sha": "cf883f5f0504686aa1424733bbbfb1a095f64253"
    }
  },
  {
    "oid": "14c5fc7b1e6e23c1baca760f1982ea00010a2ac9",
    "message": "Fixed: Suppress warnings for requiring android 11 to request `MANAGE_EXTERNAL_STORAGE` permission and call `Environment.isExternalStorageManager()`",
    "date": "2022-03-16T21:10:51Z",
    "url": "https://github.com/termux/termux-app/commit/14c5fc7b1e6e23c1baca760f1982ea00010a2ac9",
    "details": {
      "sha": "d4ad5b926ce6ca47ce398a568e556b4a0b86e2af",
      "filename": "termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/termux/termux-app/blob/14c5fc7b1e6e23c1baca760f1982ea00010a2ac9/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fandroid%2FPermissionUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/14c5fc7b1e6e23c1baca760f1982ea00010a2ac9/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fandroid%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fandroid%2FPermissionUtils.java?ref=14c5fc7b1e6e23c1baca760f1982ea00010a2ac9",
      "patch": "@@ -15,6 +15,7 @@\n import android.provider.Settings;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n import androidx.appcompat.app.AppCompatActivity;\n import androidx.core.content.ContextCompat;\n \n@@ -281,7 +282,7 @@ public static boolean checkAndRequestLegacyOrManageExternalStoragePermission(@No\n         if (requestCode < 0)\n             return false;\n \n-        if (requestLegacyStoragePermission) {\n+        if (requestLegacyStoragePermission || Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n             requestLegacyStorageExternalPermission(context, requestCode);\n         } else {\n             requestManageStorageExternalPermission(context, requestCode);\n@@ -303,7 +304,7 @@ public static boolean checkAndRequestLegacyOrManageExternalStoragePermission(@No\n      * @return Returns {@code true} if permission is granted, otherwise {@code false}.\n      */\n     public static boolean checkStoragePermission(@NonNull Context context, boolean checkLegacyStoragePermission) {\n-        if (checkLegacyStoragePermission) {\n+        if (checkLegacyStoragePermission || Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n             return checkPermissions(context,\n                 new String[]{Manifest.permission.READ_EXTERNAL_STORAGE,\n                     Manifest.permission.WRITE_EXTERNAL_STORAGE});\n@@ -328,6 +329,7 @@ public static boolean requestLegacyStorageExternalPermission(@NonNull Context co\n     }\n \n     /** Wrapper for {@link #requestManageStorageExternalPermission(Context, int)}. */\n+    @RequiresApi(api = Build.VERSION_CODES.R)\n     public static Error requestManageStorageExternalPermission(@NonNull Context context) {\n         return requestManageStorageExternalPermission(context, -1);\n     }\n@@ -343,6 +345,7 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n      *                    result it required.\n      * @return Returns the {@code error} if requesting the permission was not successful, otherwise {@code null}.\n      */\n+    @RequiresApi(api = Build.VERSION_CODES.R)\n     public static Error requestManageStorageExternalPermission(@NonNull Context context, int requestCode) {\n         Logger.logInfo(LOG_TAG, \"Requesting manage external storage permission\");\n \n@@ -376,8 +379,8 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n      * https://developer.android.com/training/data-storage/use-cases#opt-out-scoped-storage\n      */\n     public static boolean isLegacyExternalStoragePossible(@NonNull Context context) {\n-        return !(PackageUtils.getTargetSDKForPackage(context) >= Build.VERSION_CODES.R &&\n-            Build.VERSION.SDK_INT >= Build.VERSION_CODES.R);\n+        return !(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R &&\n+            PackageUtils.getTargetSDKForPackage(context) >= Build.VERSION_CODES.R);\n     }\n \n     /**",
      "parent_sha": "792c33c9a561e10a283a00fedfa216845396765b"
    }
  },
  {
    "oid": "5dee839230179ce0f33426ffb348aac229d5448b",
    "message": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.13.0`. Check its Changelog sections for info on changes.",
    "date": "2021-03-25T16:17:54Z",
    "url": "https://github.com/termux/termux-app/commit/5dee839230179ce0f33426ffb348aac229d5448b",
    "details": {
      "sha": "89722f3d8e21c780f753a48e885989c6d883970b",
      "filename": "app/src/main/java/com/termux/app/TermuxConstants.java",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/termux/termux-app/blob/5dee839230179ce0f33426ffb348aac229d5448b/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/5dee839230179ce0f33426ffb348aac229d5448b/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java?ref=5dee839230179ce0f33426ffb348aac229d5448b",
      "patch": "@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.12.0\n+ * Version: v0.13.0\n  *\n  * Changelog\n  *\n@@ -81,6 +81,10 @@\n  *      - Added following to `TERMUX_SERVICE`:\n  *          `EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT_ORIGINAL_LENGTH`,\n  *          `EXTRA_PLUGIN_RESULT_BUNDLE_STDERR_ORIGINAL_LENGTH`.\n+ *\n+ * - 0.13.0 (2021-03-25)\n+ *      - Added following to `RUN_COMMAND_SERVICE`:\n+ *          `EXTRA_PENDING_INTENT`.\n  */\n \n /**\n@@ -106,7 +110,8 @@\n  *       use and is also the final package name stored in \"AndroidManifest.xml\".\n  * - The \"manifestPlaceholders\" values for {@link #TERMUX_PACKAGE_NAME} and *_APP_NAME in \"build.gradle\".\n  * - The \"ENTITY\" values for {@link #TERMUX_PACKAGE_NAME} and *_APP_NAME in \"strings.xml\".\n- * - The \"shortcut.xml\" files like in termux-app since dynamic variables don't work in it.\n+ * - The \"shortcut.xml\" and \"*_preferences.xml\" files like in termux-app since dynamic variables don't\n+ *      work in it.\n  * - Optionally the \"package\" in \"AndroidManifest.xml\" if modifying project structure. This is\n  *      package name for java classes project structure and is prefixed if activity and service\n  *      names use dot (.) notation.\n@@ -441,8 +446,6 @@ public static final class TERMUX_SERVICE {\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".execute.background\"; // Default: \"com.termux.execute.background\"\n             /** Intent {@code String} extra for session action for foreground commands for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_SESSION_ACTION = TERMUX_PACKAGE_NAME + \".execute.session_action\"; // Default: \"com.termux.execute.session_action\"\n-            /** Intent {@code Parcelable} extra containing pending intent for the execute command caller */\n-            public static final String EXTRA_PENDING_INTENT = \"pendingIntent\"; // Default: \"pendingIntent\"\n             /** Intent {@code String} extra for label of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_COMMAND_LABEL = TERMUX_PACKAGE_NAME + \".execute.command_label\"; // Default: \"com.termux.execute.command_label\"\n             /** Intent markdown {@code String} extra for description of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n@@ -451,6 +454,8 @@ public static final class TERMUX_SERVICE {\n             public static final String EXTRA_COMMAND_HELP = TERMUX_PACKAGE_NAME + \".execute.command_help\"; // Default: \"com.termux.execute.command_help\"\n             /** Intent markdown {@code String} extra for help of the plugin API for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent (Internal Use Only) */\n             public static final String EXTRA_PLUGIN_API_HELP = TERMUX_PACKAGE_NAME + \".execute.plugin_api_help\"; // Default: \"com.termux.execute.plugin_help\"\n+            /** Intent {@code Parcelable} extra containing pending intent for the execute command caller */\n+            public static final String EXTRA_PENDING_INTENT = \"pendingIntent\"; // Default: \"pendingIntent\"\n \n \n \n@@ -536,6 +541,8 @@ public static final class RUN_COMMAND_SERVICE {\n             public static final String EXTRA_COMMAND_DESCRIPTION = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_COMMAND_DESCRIPTION\"; // Default: \"com.termux.RUN_COMMAND_COMMAND_DESCRIPTION\"\n             /** Intent markdown {@code String} extra for help of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_COMMAND_HELP = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_COMMAND_HELP\"; // Default: \"com.termux.RUN_COMMAND_COMMAND_HELP\"\n+            /** Intent {@code Parcelable} extra containing pending intent for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_PENDING_INTENT = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_PENDING_INTENT\"; // Default: \"com.termux.RUN_COMMAND_PENDING_INTENT\"\n \n         }\n     }",
      "parent_sha": "1ef8eb92191985b23cb38c230c9f6ca39b8733b0"
    }
  },
  {
    "oid": "162469f7ced7ff2d1fdbeb3cd12a50737787e03f",
    "message": "Fixed: Fix message dialog button text not showing in day mode due to white text",
    "date": "2022-06-13T23:05:00Z",
    "url": "https://github.com/termux/termux-app/commit/162469f7ced7ff2d1fdbeb3cd12a50737787e03f",
    "details": {
      "sha": "d7543fc7c90f61d21b27ecccaa425557a477c839",
      "filename": "termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/termux/termux-app/blob/162469f7ced7ff2d1fdbeb3cd12a50737787e03f/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Finteract%2FMessageDialogUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/162469f7ced7ff2d1fdbeb3cd12a50737787e03f/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Finteract%2FMessageDialogUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Finteract%2FMessageDialogUtils.java?ref=162469f7ced7ff2d1fdbeb3cd12a50737787e03f",
      "patch": "@@ -4,11 +4,14 @@\n import android.app.AlertDialog;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.graphics.Color;\n import android.view.LayoutInflater;\n import android.view.View;\n+import android.widget.Button;\n import android.widget.TextView;\n \n import com.termux.shared.R;\n+import com.termux.shared.logger.Logger;\n \n public class MessageDialogUtils {\n \n@@ -74,7 +77,19 @@ public static void showMessage(Context context, String titleText, String message\n         if (onDismiss != null)\n             builder.setOnDismissListener(onDismiss);\n \n-        builder.show();\n+        AlertDialog dialog = builder.create();\n+\n+        dialog.setOnShowListener(dialogInterface -> {\n+            Logger.logError(\"dialog\");\n+            Button button = dialog.getButton(AlertDialog.BUTTON_POSITIVE);\n+            if (button != null)\n+                button.setTextColor(Color.BLACK);\n+            button = dialog.getButton(AlertDialog.BUTTON_NEGATIVE);\n+            if (button != null)\n+                button.setTextColor(Color.BLACK);\n+        });\n+\n+        dialog.show();\n     }\n \n     public static void exitAppWithErrorMessage(Context context, String titleText, String messageText) {",
      "parent_sha": "e75680a88428a01a6a4566bdf1cd0255c5981fee"
    }
  },
  {
    "oid": "c0a5e5f57a4847ba6b1733e3836cc9db194aa01b",
    "message": "Switch to TYPE_NULL as input type\n\nThis fixes #126 where the previous input type put some keyboards into\nword mode (no direct echo). The workaround for Google Pinyin does not\nseem to be necessary no more.\n\nAlso fix backspace after entering emojis on some keyboards (Swype).",
    "date": "2016-08-04T21:56:17Z",
    "url": "https://github.com/termux/termux-app/commit/c0a5e5f57a4847ba6b1733e3836cc9db194aa01b",
    "details": {
      "sha": "0b533bd7c7cb831287dae3ba7647497b6211d5d1",
      "filename": "app/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 13,
      "deletions": 17,
      "changes": 30,
      "blob_url": "https://github.com/termux/termux-app/blob/c0a5e5f57a4847ba6b1733e3836cc9db194aa01b/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/c0a5e5f57a4847ba6b1733e3836cc9db194aa01b/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=c0a5e5f57a4847ba6b1733e3836cc9db194aa01b",
      "patch": "@@ -228,18 +228,13 @@ public boolean attachSession(TerminalSession session) {\n \n     @Override\n     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n-        // Using InputType.TYPE_TEXT_VARIATION_URI avoids having an extra row of numbers on the\n-        // Google keyboard. https://github.com/termux/termux-app/issues/87.\n-        // It also makes the '/' keyboard more accessible, and makes some sense.\n+        // Using InputType.NULL is the most correct input type and avoids issues with other hacks.\n         //\n-        // If using just \"TYPE_NULL\", there is a problem with the \"Google Pinyin Input\" being in\n-        // word mode when used with the \"En\" tab available when the \"Show English keyboard\" option\n-        // is enabled - see https://github.com/termux/termux-packages/issues/25.\n-        // Adding TYPE_TEXT_FLAG_NO_SUGGESTIONS fixes Pinyin Input and removes the row of numbers\n-        // on the Google keyboard. . It also causes Swype to be put in\n-        // word mode, but using TYPE_TEXT_VARIATION_VISIBLE_PASSWORD would fix that. But for now\n-        // use InputType.TYPE_TEXT_VARIATION_URI as it makes more sense.\n-        outAttrs.inputType = InputType.TYPE_TEXT_VARIATION_URI;\n+        // Previous keyboard issues:\n+        // https://github.com/termux/termux-packages/issues/25\n+        // https://github.com/termux/termux-app/issues/87.\n+        // https://github.com/termux/termux-app/issues/126 for breakage from that.\n+        outAttrs.inputType = InputType.TYPE_NULL;\n \n         // Let part of the application show behind when in landscape:\n         outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_FULLSCREEN;\n@@ -310,17 +305,18 @@ public boolean commitText(CharSequence text, int newCursorPosition) {\n             public boolean deleteSurroundingText(int leftLength, int rightLength) {\n                 if (LOG_KEY_EVENTS)\n                     Log.i(EmulatorDebug.LOG_TAG, \"IME: deleteSurroundingText(\" + leftLength + \", \" + rightLength + \")\");\n-\n-                // Swype keyboard sometimes(?) sends this on backspace:\n-                if (leftLength == 0 && rightLength == 0) leftLength = 1;\n-\n-                for (int i = 0; i < leftLength; i++)\n-                    sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n+                // If leftLength=2 it may be due to a UTF-16 surrogate pair. So we cannot send\n+                // multiple key events for that. Let's just hope that keyboards don't use\n+                // leftLength > 1 for other purposes (such as holding down backspace for repeat).\n+                sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n                 return true;\n             }\n \n             @Override\n             public boolean setComposingText(CharSequence text, int newCursorPosition) {\n+                if (LOG_KEY_EVENTS)\n+                    Log.i(EmulatorDebug.LOG_TAG, \"IME: setComposingText(\\\"\" + text  + \"\\\", \" + newCursorPosition + \")\");\n+\n                 if (text.length() == 0) {\n                     // Avoid log spam \"SpannableStringBuilder: SPAN_EXCLUSIVE_EXCLUSIVE spans cannot\n                     // have a zero length\" when backspacing with the Google keyboard.",
      "parent_sha": "dfdc9b37e1e725985ef37b45b7740dda83501e1e"
    }
  },
  {
    "oid": "5a70be152346958009fda0419d77502c6e52391b",
    "message": "terminal emulator: flush remaining process output data when terminating session",
    "date": "2020-08-07T23:22:47Z",
    "url": "https://github.com/termux/termux-app/commit/5a70be152346958009fda0419d77502c6e52391b",
    "details": {
      "sha": "a0c5b855b62a05e1a9559d390f1811018dbaeb48",
      "filename": "terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/termux/termux-app/blob/5a70be152346958009fda0419d77502c6e52391b/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalSession.java",
      "raw_url": "https://github.com/termux/termux-app/raw/5a70be152346958009fda0419d77502c6e52391b/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalSession.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalSession.java?ref=5a70be152346958009fda0419d77502c6e52391b",
      "patch": "@@ -110,13 +110,13 @@ private static FileDescriptor wrapFileDescriptor(int fileDescriptor) {\n \n         @Override\n         public void handleMessage(Message msg) {\n-            if (msg.what == MSG_NEW_INPUT && isRunning()) {\n-                int bytesRead = mProcessToTerminalIOQueue.read(mReceiveBuffer, false);\n-                if (bytesRead > 0) {\n-                    mEmulator.append(mReceiveBuffer, bytesRead);\n-                    notifyScreenUpdate();\n-                }\n-            } else if (msg.what == MSG_PROCESS_EXITED) {\n+            int bytesRead = mProcessToTerminalIOQueue.read(mReceiveBuffer, false);\n+            if (bytesRead > 0) {\n+                mEmulator.append(mReceiveBuffer, bytesRead);\n+                notifyScreenUpdate();\n+            }\n+\n+            if (msg.what == MSG_PROCESS_EXITED) {\n                 int exitCode = (Integer) msg.obj;\n                 cleanupResources(exitCode);\n                 mChangeCallback.onSessionFinished(TerminalSession.this);",
      "parent_sha": "619552ec5c1a6fd1dfb0eb735b67d645c5dc19ff"
    }
  },
  {
    "oid": "4850678d557c8de654576ca41fe9e46404cb9b8b",
    "message": "Move Build.ID and Build.DISPLAY to Software section of device info markdown",
    "date": "2021-05-07T22:14:20Z",
    "url": "https://github.com/termux/termux-app/commit/4850678d557c8de654576ca41fe9e46404cb9b8b",
    "details": {
      "sha": "3e08b9fe56313e2bba97f86a675ecf11a7dae342",
      "filename": "termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/termux/termux-app/blob/4850678d557c8de654576ca41fe9e46404cb9b8b/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/4850678d557c8de654576ca41fe9e46404cb9b8b/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxUtils.java?ref=4850678d557c8de654576ca41fe9e46404cb9b8b",
      "patch": "@@ -223,6 +223,8 @@ public static String getDeviceInfoMarkdownString(@NonNull final Context context)\n             appendPropertyToMarkdown(markdownString, \"RELEASE\", Build.VERSION.RELEASE);\n         else\n             appendPropertyToMarkdown(markdownString, \"CODENAME\", Build.VERSION.CODENAME);\n+        appendPropertyToMarkdown(markdownString, \"ID\", Build.ID);\n+        appendPropertyToMarkdown(markdownString, \"DISPLAY\", Build.DISPLAY);\n         appendPropertyToMarkdown(markdownString, \"INCREMENTAL\", Build.VERSION.INCREMENTAL);\n         appendPropertyToMarkdownIfSet(markdownString, \"SECURITY_PATCH\", systemProperties.getProperty(\"ro.build.version.security_patch\"));\n         appendPropertyToMarkdownIfSet(markdownString, \"IS_DEBUGGABLE\", systemProperties.getProperty(\"ro.debuggable\"));\n@@ -236,8 +238,6 @@ public static String getDeviceInfoMarkdownString(@NonNull final Context context)\n         appendPropertyToMarkdown(markdownString, \"BRAND\", Build.BRAND);\n         appendPropertyToMarkdown(markdownString, \"MODEL\", Build.MODEL);\n         appendPropertyToMarkdown(markdownString, \"PRODUCT\", Build.PRODUCT);\n-        appendPropertyToMarkdown(markdownString, \"DISPLAY\", Build.DISPLAY);\n-        appendPropertyToMarkdown(markdownString, \"ID\", Build.ID);\n         appendPropertyToMarkdown(markdownString, \"BOARD\", Build.BOARD);\n         appendPropertyToMarkdown(markdownString, \"HARDWARE\", Build.HARDWARE);\n         appendPropertyToMarkdown(markdownString, \"DEVICE\", Build.DEVICE);",
      "parent_sha": "bc52a4e90c3a94f56d9aaa0bb775c2cbe787cb13"
    }
  },
  {
    "oid": "df03f0b7d6cb672c84e6e013e27dc072d9072523",
    "message": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.12.0`. Check its Changelog sections for info on changes.",
    "date": "2021-03-25T04:02:59Z",
    "url": "https://github.com/termux/termux-app/commit/df03f0b7d6cb672c84e6e013e27dc072d9072523",
    "details": {
      "sha": "202514e641275931b40280de11cf368ebd8aa189",
      "filename": "app/src/main/java/com/termux/app/TermuxConstants.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/termux/termux-app/blob/df03f0b7d6cb672c84e6e013e27dc072d9072523/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/df03f0b7d6cb672c84e6e013e27dc072d9072523/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java?ref=df03f0b7d6cb672c84e6e013e27dc072d9072523",
      "patch": "@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.11.0\n+ * Version: v0.12.0\n  *\n  * Changelog\n  *\n@@ -76,6 +76,11 @@\n  *      - Added following to `RUN_COMMAND_SERVICE`:\n  *          `EXTRA_COMMAND_LABEL`, `EXTRA_COMMAND_DESCRIPTION`, `EXTRA_COMMAND_HELP`.\n  *      - Updated `RESULT_BUNDLE` related extras with `PLUGIN_RESULT_BUNDLE` prefixes.\n+ *\n+ * - 0.12.0 (2021-03-25)\n+ *      - Added following to `TERMUX_SERVICE`:\n+ *          `EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT_ORIGINAL_LENGTH`,\n+ *          `EXTRA_PLUGIN_RESULT_BUNDLE_STDERR_ORIGINAL_LENGTH`.\n  */\n \n /**\n@@ -486,8 +491,12 @@ public static final class TERMUX_SERVICE {\n             public static final String EXTRA_PLUGIN_RESULT_BUNDLE = \"result\"; // Default: \"result\"\n             /** Intent {@code String} extra for stdout value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n             public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT = \"stdout\"; // Default: \"stdout\"\n+            /** Intent {@code String} extra for original length of stdout value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT_ORIGINAL_LENGTH = \"stdout_original_length\"; // Default: \"stdout_original_length\"\n             /** Intent {@code String} extra for stderr value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n             public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDERR = \"stderr\"; // Default: \"stderr\"\n+            /** Intent {@code String} extra for original length of stderr value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDERR_ORIGINAL_LENGTH = \"stderr_original_length\"; // Default: \"stderr_original_length\"\n             /** Intent {@code int} extra for exit code value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n             public static final String EXTRA_PLUGIN_RESULT_BUNDLE_EXIT_CODE = \"exitCode\"; // Default: \"exitCode\"\n             /** Intent {@code int} extra for err value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */",
      "parent_sha": "249f7c6b7cd427e6f252040979e661a70d932d1d"
    }
  },
  {
    "oid": "99e8ffcf9003f6ecefa78519f0fc6e3a6996a232",
    "message": "Add aliases for BACKSLASH QUOTE and APOSTROPHE",
    "date": "2018-08-28T00:34:36Z",
    "url": "https://github.com/termux/termux-app/commit/99e8ffcf9003f6ecefa78519f0fc6e3a6996a232",
    "details": {
      "sha": "cd62740b0d4214706af3ed61f9504881379d5286",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/termux/termux-app/blob/99e8ffcf9003f6ecefa78519f0fc6e3a6996a232/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/99e8ffcf9003f6ecefa78519f0fc6e3a6996a232/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=99e8ffcf9003f6ecefa78519f0fc6e3a6996a232",
      "patch": "@@ -257,7 +257,7 @@ void popup(View view, String text) {\n         put(\"LT\", \"LEFT\"); \n         put(\"RT\", \"RIGHT\");\n         put(\"DN\", \"DOWN\");\n-        // put(\"UP\", \"UP\"); well, the direction is already two letters\n+        // put(\"UP\", \"UP\"); well, \"UP\" is already two letters\n         \n         put(\"PAGEUP\", \"PGUP\");\n         put(\"PAGE_UP\", \"PGUP\");\n@@ -274,6 +274,11 @@ void popup(View view, String text) {\n         \n         put(\"DELETE\", \"DEL\");\n         put(\"BACKSPACE\", \"BKSP\");\n+        \n+        // easier for writing in termux.properties\n+        put(\"BACKSLASH\", \"\\\\\");\n+        put(\"QUOTE\", \"\\\"\");\n+        put(\"APOSTROPHE\", \"'\");\n     }};\n     \n     /**",
      "parent_sha": "0807600a2db2e825c17ce1ac2607493cf0cb556a"
    }
  },
  {
    "oid": "afb339e9d8b9d93495fd48ce0049c6c5dc7ba23c",
    "message": "Format code",
    "date": "2016-08-30T11:47:30Z",
    "url": "https://github.com/termux/termux-app/commit/afb339e9d8b9d93495fd48ce0049c6c5dc7ba23c",
    "details": {
      "sha": "c606410e2eecc6f1c0d0eaca27c457f19183d268",
      "filename": "app/src/main/java/com/termux/terminal/TerminalEmulator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/termux/termux-app/blob/afb339e9d8b9d93495fd48ce0049c6c5dc7ba23c/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java",
      "raw_url": "https://github.com/termux/termux-app/raw/afb339e9d8b9d93495fd48ce0049c6c5dc7ba23c/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java?ref=afb339e9d8b9d93495fd48ce0049c6c5dc7ba23c",
      "patch": "@@ -12,7 +12,7 @@\n /**\n  * Renders text into a screen. Contains all the terminal-specific knowledge and state. Emulates a subset of the X Window\n  * System xterm terminal, which in turn is an emulator for a subset of the Digital Equipment Corporation vt100 terminal.\n- * <p/>\n+ * <p>\n  * References:\n  * <ul>\n  * <li>http://invisible-island.net/xterm/ctlseqs/ctlseqs.html</li>\n@@ -145,7 +145,7 @@ public final class TerminalEmulator {\n     /**\n      * The alternate screen buffer, exactly as large as the display and contains no additional saved lines (so that when\n      * the alternate screen buffer is active, you cannot scroll back to view saved lines).\n-     * <p/>\n+     * <p>\n      * See http://www.xfree86.org/current/ctlseqs.html#The%20Alternate%20Screen%20Buffer\n      */\n     final TerminalBuffer mAltBuffer;\n@@ -628,7 +628,7 @@ public void processCodePoint(int b) {\n                             case 't': // \"${CSI}${TOP}${LEFT}${BOTTOM}${RIGHT}${ATTRIBUTES}$t\"\n                                 // Reverse attributes in rectangular area (DECRARA - http://www.vt100.net/docs/vt510-rm/DECRARA).\n                                 boolean reverse = b == 't';\n-                                // FIXME: \"coordinates of the rectangular area are affected by the setting of origin mode (DECOM)\".s\n+                                // FIXME: \"coordinates of the rectangular area are affected by the setting of origin mode (DECOM)\".\n                                 int top = Math.min(getArg(0, 1, true) - 1, effectiveBottomMargin) + effectiveTopMargin;\n                                 int left = Math.min(getArg(1, 1, true) - 1, effectiveRightMargin) + effectiveLeftMargin;\n                                 int bottom = Math.min(getArg(2, mRows, true) + 1, effectiveBottomMargin - 1) + effectiveTopMargin;",
      "parent_sha": "64c23f498f6f37a39f4f38a9a98c6f8b8a736db1"
    }
  },
  {
    "oid": "bafd21bb390ce5fe5fd1fbc359c0cf1a248543b4",
    "message": "fmt indentation",
    "date": "2018-06-21T22:33:35Z",
    "url": "https://github.com/termux/termux-app/commit/bafd21bb390ce5fe5fd1fbc359c0cf1a248543b4",
    "details": {
      "sha": "975afa913274645848078cca3c445bcc4939ff43",
      "filename": "app/src/main/java/com/termux/app/TermuxInstaller.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/termux/termux-app/blob/bafd21bb390ce5fe5fd1fbc359c0cf1a248543b4/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "raw_url": "https://github.com/termux/termux-app/raw/bafd21bb390ce5fe5fd1fbc359c0cf1a248543b4/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java?ref=bafd21bb390ce5fe5fd1fbc359c0cf1a248543b4",
      "patch": "@@ -229,12 +229,12 @@ public void run() {\n                     File storageDir = new File(TermuxService.HOME_PATH, \"storage\");\n \n                     if (storageDir.exists()) {\n-\t\t\t    try {\n-\t\t\t\t    deleteFolder(storageDir);\n-\t\t\t    } catch (Exception e) {\n-\t\t\t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n-\t\t\t\t    return;\n-\t\t\t    }\n+\t\t\t            try {\n+\t\t\t        \t    deleteFolder(storageDir);\n+\t\t\t            } catch (Exception e) {\n+\t\t        \t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n+\t\t\t        \t    return;\n+\t        \t\t    }\n                     }\n \n                     if (!storageDir.mkdirs()) {",
      "parent_sha": "0f20fab02ce03328bc8c8e2a2c28a218656c968c"
    }
  },
  {
    "oid": "357b17e972e706bc166cfbb98b065c8c5c208b2d",
    "message": "Improve setup of symlinks to external storage\n\nThe context.getExternalFilesDirs(null) call may return several\nelements, and some of them may be null.",
    "date": "2016-12-04T00:04:19Z",
    "url": "https://github.com/termux/termux-app/commit/357b17e972e706bc166cfbb98b065c8c5c208b2d",
    "details": {
      "sha": "6e372bc0ca8fb7c010905909a98f9939c2ee113b",
      "filename": "app/src/main/java/com/termux/app/TermuxInstaller.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/termux/termux-app/blob/357b17e972e706bc166cfbb98b065c8c5c208b2d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "raw_url": "https://github.com/termux/termux-app/raw/357b17e972e706bc166cfbb98b065c8c5c208b2d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java?ref=357b17e972e706bc166cfbb98b065c8c5c208b2d",
      "patch": "@@ -257,9 +257,13 @@ public void run() {\n                     Os.symlink(moviesDir.getAbsolutePath(), new File(storageDir, \"movies\").getAbsolutePath());\n \n                     final File[] dirs = context.getExternalFilesDirs(null);\n-                    if (dirs != null && dirs.length >= 2) {\n-                        final File externalDir = dirs[1];\n-                        Os.symlink(externalDir.getAbsolutePath(), new File(storageDir, \"external\").getAbsolutePath());\n+                    if (dirs != null && dirs.length > 1) {\n+                        for (int i = 1; i < dirs.length; i++) {\n+                            File dir = dirs[i];\n+                            if (dir == null) continue;\n+                            String symlinkName = \"external-\" + i;\n+                            Os.symlink(dir.getAbsolutePath(), new File(storageDir, symlinkName).getAbsolutePath());\n+                        }\n                     }\n                 } catch (Exception e) {\n                     Log.e(LOG_TAG, \"Error setting up link\", e);",
      "parent_sha": "6334470f81bdf003b8567af9e3531cec4dce560d"
    }
  },
  {
    "oid": "5a960750256398f4de762023b9c253e96d47ef2d",
    "message": "Update RunCommandService documentation",
    "date": "2021-02-27T08:23:37Z",
    "url": "https://github.com/termux/termux-app/commit/5a960750256398f4de762023b9c253e96d47ef2d",
    "details": {
      "sha": "93b43cf606598c03f581d78d70da5db37dae69ae",
      "filename": "app/src/main/java/com/termux/app/RunCommandService.java",
      "status": "modified",
      "additions": 29,
      "deletions": 14,
      "changes": 43,
      "blob_url": "https://github.com/termux/termux-app/blob/5a960750256398f4de762023b9c253e96d47ef2d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FRunCommandService.java",
      "raw_url": "https://github.com/termux/termux-app/raw/5a960750256398f4de762023b9c253e96d47ef2d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FRunCommandService.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FRunCommandService.java?ref=5a960750256398f4de762023b9c253e96d47ef2d",
      "patch": "@@ -21,23 +21,32 @@\n import java.util.Properties;\n \n /**\n- * When allow-external-apps property is set to \"true\" in ~/.termux/termux.properties, Termux \n- * is able to process execute intents sent by third-party applications.\n+ * Third-party apps that are not part of termux world can run commands in termux context by either\n+ * sending an intent to RunCommandService or becoming a plugin host for the termux-tasker plugin\n+ * client.\n  *\n- * Third-party program must declare com.termux.permission.RUN_COMMAND permission and it should be\n- * granted by user.\n+ * For the RunCommandService intent to work, there are 2 main requirements:\n+ * 1. The `allow-external-apps` property must be set to \"true\" in ~/.termux/termux.properties in\n+ * termux app, regardless of if the executable path is inside or outside the `~/.termux/tasker/`\n+ * directory.\n+ * 2. The intent sender/third-party app must request the `com.termux.permission.RUN_COMMAND`\n+ * permission in its `AndroidManifest.xml` and it should be granted by user to the app through the\n+ * app's App Info permissions page in android settings, likely under Additional Permissions.\n  *\n- * Absolute path of command or script must be given in \"RUN_COMMAND_PATH\" extra.\n- * The \"RUN_COMMAND_ARGUMENTS\", \"RUN_COMMAND_WORKDIR\" and \"RUN_COMMAND_BACKGROUND\" extras are \n+ * The absolute path of executable or script must be given in \"RUN_COMMAND_PATH\" extra.\n+ * The \"RUN_COMMAND_ARGUMENTS\", \"RUN_COMMAND_WORKDIR\" and \"RUN_COMMAND_BACKGROUND\" extras are\n  * optional. The workdir defaults to termux home. The background mode defaults to \"false\".\n  * The command path and workdir can optionally be prefixed with \"$PREFIX/\" or \"~/\" if an absolute\n  * path is not to be given.\n  *\n- * To automatically bring to foreground and start termux commands that were started with\n- * background mode \"false\" in android >= 10 without user having to click the notification manually,\n- * requires termux to be granted draw over apps permission due to new restrictions\n+ * To automatically bring termux session to foreground and start termux commands that were started\n+ * with background mode \"false\" in android >= 10 without user having to click the notification\n+ * manually requires termux to be granted draw over apps permission due to new restrictions\n  * of starting activities from the background, this also applies to Termux:Tasker plugin.\n  *\n+ * Check https://github.com/termux/termux-tasker for more details on allow-external-apps and draw\n+ * over apps and other limitations.\n+ *\n  * To reduce the chance of termux being killed by android even further due to violation of not\n  * being able to call startForeground() within ~5s of service start in android >= 8, the user\n  * may disable battery optimizations for termux.\n@@ -53,12 +62,18 @@\n  *   startService(intent);\n  *\n  * Sample code to run command \"top\" with \"am startservice\" command:\n- * am startservice --user 0 -n com.termux/com.termux.app.RunCommandService \n- * -a com.termux.RUN_COMMAND \n- * --es com.termux.RUN_COMMAND_PATH '/data/data/com.termux/files/usr/bin/top' \n- * --esa com.termux.RUN_COMMAND_ARGUMENTS '-n,5' \n- * --es com.termux.RUN_COMMAND_WORKDIR '/data/data/com.termux/files/home'\n+ * am startservice --user 0 -n com.termux/com.termux.app.RunCommandService \\\n+ * -a com.termux.RUN_COMMAND \\\n+ * --es com.termux.RUN_COMMAND_PATH '/data/data/com.termux/files/usr/bin/top' \\\n+ * --esa com.termux.RUN_COMMAND_ARGUMENTS '-n,5' \\\n+ * --es com.termux.RUN_COMMAND_WORKDIR '/data/data/com.termux/files/home' \\\n  * --ez com.termux.RUN_COMMAND_BACKGROUND 'false'\n+ *\n+ * If your third-party app is targeting sdk 30 (android 11), then it needs to add `com.termux`\n+ * package to the `queries` element or request `QUERY_ALL_PACKAGES` permission in its\n+ * `AndroidManifest.xml`. Otherwise it will get `PackageSetting{...... com.termux/......} BLOCKED`\n+ * errors in logcat and `RUN_COMMAND` won't work.\n+ * https://developer.android.com/training/basics/intents/package-visibility#package-name\n  */\n public class RunCommandService extends Service {\n ",
      "parent_sha": "85b2c44ac74818d659ca106a151edb1a20190845"
    }
  },
  {
    "oid": "35842cf4a626ae6d57aadf62a7ace937cb4d18d0",
    "message": "Set orientation of HandleView in show (#1477)\n\n* Place long press menu above selection\r\n\r\nPreviously, the long press menu would cover the first line of the\r\nselection.\r\n\r\n* Flip selection handle at different positions depending on drag direction\r\n\r\nWhen the selection handle changes direction, the selection jumps to the\r\nnew point of the handle. When the handle changes direction at the same\r\nplace when you come from the left as from the right, that makes it\r\nimpossible to select the characters which are at the position where it\r\nchanges direction.\r\n\r\nWith this change the handle remains pointing towards the edge further\r\ninto the line when you drag it from the edge and against the center.\r\n\r\n* Set orientation of HandleView when showing it\r\n\r\nWhen you hold down on a word that starts or ends at the edge of the\r\nscreen, the handle will appear outside of the screen. This happens\r\nbecause the orientation was only switched when the handle is dragged, so\r\nwhen it is shown it just used the same orientation as it had for the\r\nlast selection.\r\n\r\nRelates to #334, but not sure if it fixes it completely.",
    "date": "2020-06-09T08:59:59Z",
    "url": "https://github.com/termux/termux-app/commit/35842cf4a626ae6d57aadf62a7ace937cb4d18d0",
    "details": {
      "sha": "702bd2a413ade1d84cf16d739e31110861eefc77",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 17,
      "deletions": 20,
      "changes": 37,
      "blob_url": "https://github.com/termux/termux-app/blob/35842cf4a626ae6d57aadf62a7ace937cb4d18d0/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/35842cf4a626ae6d57aadf62a7ace937cb4d18d0/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=35842cf4a626ae6d57aadf62a7ace937cb4d18d0",
      "patch": "@@ -973,12 +973,12 @@ public boolean isShowing() {\n             return mContainer.isShowing();\n         }\n \n-        private void checkChangedOrientation() {\n-            if (!mIsDragging) {\n+        private void checkChangedOrientation(int posX, boolean force) {\n+            if (!mIsDragging && !force) {\n                 return;\n             }\n             long millis = SystemClock.currentThreadTimeMillis();\n-            if (millis - mLastTime < 50) {\n+            if (millis - mLastTime < 50 && !force) {\n                 return;\n             }\n             mLastTime = millis;\n@@ -1003,10 +1003,7 @@ private void checkChangedOrientation() {\n                 return;\n             }\n \n-            final int[] coords = mTempCoords;\n-            hostView.getLocationInWindow(coords);\n-            final int posX = coords[0] + mPointX;\n-            if (posX < clip.left) {\n+            if (posX - mHandleWidth < clip.left) {\n                 changeOrientation(RIGHT);\n             } else if (posX + mHandleWidth > clip.right) {\n                 changeOrientation(LEFT);\n@@ -1050,13 +1047,14 @@ private boolean isPositionVisible() {\n                 posY >= clip.top && posY <= clip.bottom;\n         }\n \n-        private void moveTo(int x, int y) {\n-            mPointX = x;\n+        private void moveTo(int x, int y, boolean forceOrientationCheck) {\n+            float oldHotspotX = mHotspotX;\n+            checkChangedOrientation(x, forceOrientationCheck);\n+            mPointX = (int) (x - (isShowing() ? oldHotspotX : mHotspotX));\n             mPointY = y;\n-            checkChangedOrientation();\n             if (isPositionVisible()) {\n                 int[] coords = null;\n-                if (mContainer.isShowing()) {\n+                if (isShowing()) {\n                     coords = mTempCoords;\n                     TerminalView.this.getLocationInWindow(coords);\n                     int x1 = coords[0] + mPointX;\n@@ -1138,10 +1136,10 @@ public boolean isDragging() {\n             return mIsDragging;\n         }\n \n-        void positionAtCursor(final int cx, final int cy) {\n-            int left = (int) (getPointX(cx) - mHotspotX);\n+        void positionAtCursor(final int cx, final int cy, boolean forceOrientationCheck) {\n+            int left = getPointX(cx);\n             int bottom = getPointY(cy + 1);\n-            moveTo(left, bottom);\n+            moveTo(left, bottom, forceOrientationCheck);\n         }\n     }\n \n@@ -1162,9 +1160,8 @@ private class SelectionModifierCursorController implements CursorController {\n \n         public void show() {\n             mIsShowing = true;\n-            updatePosition();\n-            mStartHandle.show();\n-            mEndHandle.show();\n+            mStartHandle.positionAtCursor(mSelX1, mSelY1, true);\n+            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2, true);\n \n             final ActionMode.Callback callback = new ActionMode.Callback() {\n                 @Override\n@@ -1240,7 +1237,7 @@ public void onDestroyActionMode(ActionMode mode) {\n                 public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n                     int x1 = Math.round(mSelX1 * mRenderer.mFontWidth);\n                     int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n-                    int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n+                    int y1 = Math.round((mSelY1 - 1 - mTopRow) * mRenderer.mFontLineSpacing);\n                     int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n \n \n@@ -1395,9 +1392,9 @@ public void updatePosition() {\n                 return;\n             }\n \n-            mStartHandle.positionAtCursor(mSelX1, mSelY1);\n+            mStartHandle.positionAtCursor(mSelX1, mSelY1, false);\n \n-            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2); //bug\n+            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2, false);\n \n             if (mActionMode != null) {\n                 mActionMode.invalidate();",
      "parent_sha": "b086270a5a72278b3cc1fe1c1917264f61cff07a"
    }
  },
  {
    "oid": "4f66786b987d1846d42cb1dba542bbfe821b4a37",
    "message": "Changed: Store termux-widget token synchronously to the SharedPreferences file on creation\n\nAttempt to solve termux/termux-widget#16",
    "date": "2021-09-22T23:58:14Z",
    "url": "https://github.com/termux/termux-app/commit/4f66786b987d1846d42cb1dba542bbfe821b4a37",
    "details": {
      "sha": "df667e3d287af4d245652f1ccac117cbc1770f83",
      "filename": "termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxWidgetAppSharedPreferences.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/4f66786b987d1846d42cb1dba542bbfe821b4a37/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fsettings%2Fpreferences%2FTermuxWidgetAppSharedPreferences.java",
      "raw_url": "https://github.com/termux/termux-app/raw/4f66786b987d1846d42cb1dba542bbfe821b4a37/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fsettings%2Fpreferences%2FTermuxWidgetAppSharedPreferences.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fsettings%2Fpreferences%2FTermuxWidgetAppSharedPreferences.java?ref=4f66786b987d1846d42cb1dba542bbfe821b4a37",
      "patch": "@@ -84,7 +84,7 @@ public String getGeneratedToken() {\n         String token =  SharedPreferenceUtils.getString(mSharedPreferences, TERMUX_WIDGET_APP.KEY_TOKEN, null, true);\n         if (token == null) {\n             token = UUID.randomUUID().toString();\n-            SharedPreferenceUtils.setString(mSharedPreferences, TERMUX_WIDGET_APP.KEY_TOKEN, token, false);\n+            SharedPreferenceUtils.setString(mSharedPreferences, TERMUX_WIDGET_APP.KEY_TOKEN, token, true);\n         }\n         return token;\n     }",
      "parent_sha": "fefbf2ec03dd0cfa4b79686f1f9f24c80e9ad17b"
    }
  },
  {
    "oid": "9686127f81d322356f54f71ad169ff5c6a6fb5df",
    "message": "Fix installer to check supported abi:s\n\nThis fixes installation on e.g. the Samsung Galaxy S5 Neo which has\na 64-bit cpu but no 64-bit runtime available (closes #69).",
    "date": "2016-04-16T19:18:21Z",
    "url": "https://github.com/termux/termux-app/commit/9686127f81d322356f54f71ad169ff5c6a6fb5df",
    "details": {
      "sha": "0841d5aad2a9ff691b2fad26fa4f483988d334a0",
      "filename": "app/src/main/java/com/termux/app/TermuxInstaller.java",
      "status": "modified",
      "additions": 20,
      "deletions": 9,
      "changes": 29,
      "blob_url": "https://github.com/termux/termux-app/blob/9686127f81d322356f54f71ad169ff5c6a6fb5df/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "raw_url": "https://github.com/termux/termux-app/raw/9686127f81d322356f54f71ad169ff5c6a6fb5df/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java?ref=9686127f81d322356f54f71ad169ff5c6a6fb5df",
      "patch": "@@ -7,6 +7,7 @@\n import android.content.DialogInterface;\n import android.content.DialogInterface.OnClickListener;\n import android.content.DialogInterface.OnDismissListener;\n+import android.os.Build;\n import android.os.Environment;\n import android.system.Os;\n import android.util.Log;\n@@ -23,6 +24,7 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n@@ -178,16 +180,25 @@ public void run() {\n \n     /** Get bootstrap zip url for this systems cpu architecture. */\n     static URL determineZipUrl() throws MalformedURLException {\n-        String arch = System.getProperty(\"os.arch\");\n-        if (arch.startsWith(\"armv8\")) {\n-            arch = \"aarch64\";\n-        } else if (arch.startsWith(\"arm\")) {\n-            // Handle different arm variants such as armv7l:\n-            arch = \"arm\";\n-        } else if (arch.startsWith(\"x86\")) { // \"x86\" on arcwelder, \"x86_64\" on 64-bit android.\n-            arch = \"i686\";\n+        String termuxArch = null;\n+        // Note that we cannot use System.getProperty(\"os.arch\") since that may give e.g. \"aarch64\"\n+        // while a 64-bit runtime may not be installed (like on the Samsung Galaxy S5 Neo).\n+        // Instead we search through the supported abi:s on the device, see:\n+        // http://developer.android.com/ndk/guides/abis.html\n+        // Note that we search for abi:s in preferred order, and want to avoid installing arm on\n+        // an x86 system where arm emulation is available.\n+        final String[] androidArchNames = {\"arm64-v8a\", \"x86\", \"armeabi-v7a\"};\n+        final String[] termuxArchNames = {\"aarch64\", \"i686\", \"arm\"};\n+\n+        final List<String> supportedArches = Arrays.asList(Build.SUPPORTED_ABIS);\n+        for (int i = 0; i < termuxArchNames.length; i++) {\n+            if (supportedArches.contains(androidArchNames[i])) {\n+                termuxArch = termuxArchNames[i];\n+                break;\n+            }\n         }\n-        return new URL(\"https://termux.net/bootstrap/bootstrap-\" + arch + \".zip\");\n+\n+        return new URL(\"https://termux.net/bootstrap/bootstrap-\" + termuxArch + \".zip\");\n     }\n \n \t/** Delete a folder and all its content or throw. */",
      "parent_sha": "395c36ee838610bf8c8be0f66be0630edc92e68e"
    }
  },
  {
    "oid": "dc086a1e0b29847e60f508a0c6e1b6af43a3c681",
    "message": "Tweak button ordering on the file received dialog",
    "date": "2016-04-16T21:02:20Z",
    "url": "https://github.com/termux/termux-app/commit/dc086a1e0b29847e60f508a0c6e1b6af43a3c681",
    "details": {
      "sha": "fd7d297bd1e7f2b393b535bae1c98be2458a6fd4",
      "filename": "app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java",
      "status": "modified",
      "additions": 47,
      "deletions": 47,
      "changes": 94,
      "blob_url": "https://github.com/termux/termux-app/blob/dc086a1e0b29847e60f508a0c6e1b6af43a3c681/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxFileReceiverActivity.java",
      "raw_url": "https://github.com/termux/termux-app/raw/dc086a1e0b29847e60f508a0c6e1b6af43a3c681/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxFileReceiverActivity.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxFileReceiverActivity.java?ref=dc086a1e0b29847e60f508a0c6e1b6af43a3c681",
      "patch": "@@ -119,54 +119,54 @@ void handleContentUri(final Uri uri, String subjectFromIntent) {\n     }\n \n     void promptNameAndSave(final InputStream in, final String attachmentFileName) {\n-        DialogUtils.textInput(this, R.string.file_received_title, attachmentFileName\n-            , android.R.string.ok, new DialogUtils.TextSetListener() {\n-            @Override\n-            public void onTextSet(final String text) {\n-                if (saveStreamWithName(in, text) == null) return;\n-                finish();\n-            }\n-        }, R.string.file_received_open_folder_button, new DialogUtils.TextSetListener() {\n-            @Override\n-            public void onTextSet(String text) {\n-                if (saveStreamWithName(in, text) == null) return;\n-\n-                Intent executeIntent = new Intent(TermuxService.ACTION_EXECUTE);\n-                executeIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, TERMUX_RECEIVEDIR);\n-                executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n-                startService(executeIntent);\n-                finish();\n-            }\n-        }, R.string.file_received_edit_button, new DialogUtils.TextSetListener() {\n-            @Override\n-            public void onTextSet(String text) {\n-                File outFile = saveStreamWithName(in, text);\n-                if (outFile == null) return;\n-\n-                final File editorProgramFile = new File(EDITOR_PROGRAM);\n-                if (!editorProgramFile.isFile()) {\n-                    showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-file-editor\\n\\n\"\n-                        + \"Create this file as a script or a symlink - it will be called with the received file as only argument.\");\n-                    return;\n+        DialogUtils.textInput(this, R.string.file_received_title, attachmentFileName, R.string.file_received_edit_button, new DialogUtils.TextSetListener() {\n+                @Override\n+                public void onTextSet(String text) {\n+                    File outFile = saveStreamWithName(in, text);\n+                    if (outFile == null) return;\n+\n+                    final File editorProgramFile = new File(EDITOR_PROGRAM);\n+                    if (!editorProgramFile.isFile()) {\n+                        showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-file-editor\\n\\n\"\n+                            + \"Create this file as a script or a symlink - it will be called with the received file as only argument.\");\n+                        return;\n+                    }\n+\n+                    // Do this for the user if necessary:\n+                    editorProgramFile.setExecutable(true);\n+\n+                    final Uri scriptUri = new Uri.Builder().scheme(\"file\").path(EDITOR_PROGRAM).build();\n+\n+                    Intent executeIntent = new Intent(TermuxService.ACTION_EXECUTE, scriptUri);\n+                    executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n+                    executeIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, new String[]{outFile.getAbsolutePath()});\n+                    startService(executeIntent);\n+                    finish();\n                 }\n-\n-                // Do this for the user if necessary:\n-                editorProgramFile.setExecutable(true);\n-\n-                final Uri scriptUri = new Uri.Builder().scheme(\"file\").path(EDITOR_PROGRAM).build();\n-\n-                Intent executeIntent = new Intent(TermuxService.ACTION_EXECUTE, scriptUri);\n-                executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n-                executeIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, new String[]{outFile.getAbsolutePath()});\n-                startService(executeIntent);\n-                finish();\n-            }\n-        }, new DialogInterface.OnDismissListener() {\n-            @Override\n-            public void onDismiss(DialogInterface dialog) {\n-                if (mFinishOnDismissNameDialog) finish();\n-            }\n-        });\n+            },\n+            R.string.file_received_open_folder_button, new DialogUtils.TextSetListener() {\n+                @Override\n+                public void onTextSet(String text) {\n+                    if (saveStreamWithName(in, text) == null) return;\n+\n+                    Intent executeIntent = new Intent(TermuxService.ACTION_EXECUTE);\n+                    executeIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, TERMUX_RECEIVEDIR);\n+                    executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n+                    startService(executeIntent);\n+                    finish();\n+                }\n+            },\n+            android.R.string.cancel, new DialogUtils.TextSetListener() {\n+                @Override\n+                public void onTextSet(final String text) {\n+                    finish();\n+                }\n+            }, new DialogInterface.OnDismissListener() {\n+                @Override\n+                public void onDismiss(DialogInterface dialog) {\n+                    if (mFinishOnDismissNameDialog) finish();\n+                }\n+            });\n     }\n \n     public File saveStreamWithName(InputStream in, String attachmentFileName) {",
      "parent_sha": "2a056aeb2e05420fb87a290542d95413df86f80a"
    }
  },
  {
    "oid": "18b004a2ba6f35f2224343eed75621511fb27a22",
    "message": "Fix Logger function modifier order",
    "date": "2021-04-06T07:23:00Z",
    "url": "https://github.com/termux/termux-app/commit/18b004a2ba6f35f2224343eed75621511fb27a22",
    "details": {
      "sha": "e296fc7ad6a18d576f4b2b474cf915f0eed7f2ad",
      "filename": "app/src/main/java/com/termux/app/utils/Logger.java",
      "status": "modified",
      "additions": 36,
      "deletions": 29,
      "changes": 65,
      "blob_url": "https://github.com/termux/termux-app/blob/18b004a2ba6f35f2224343eed75621511fb27a22/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Futils%2FLogger.java",
      "raw_url": "https://github.com/termux/termux-app/raw/18b004a2ba6f35f2224343eed75621511fb27a22/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Futils%2FLogger.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Futils%2FLogger.java?ref=18b004a2ba6f35f2224343eed75621511fb27a22",
      "patch": "@@ -31,7 +31,7 @@ public class Logger {\n \n \n \n-    static public void logMesssage(int logLevel, String tag, String message) {\n+    public static void logMesssage(int logLevel, String tag, String message) {\n         if(logLevel == Log.ERROR && CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n             Log.e(getFullTag(tag), message);\n         else if(logLevel == Log.WARN && CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n@@ -46,57 +46,57 @@ else if(logLevel == Log.VERBOSE && CURRENT_LOG_LEVEL >= LOG_LEVEL_VERBOSE)\n \n \n \n-    static public void logError(String tag, String message) {\n+    public static void logError(String tag, String message) {\n         logMesssage(Log.ERROR, tag, message);\n     }\n \n-    static public void logError(String message) {\n+    public static void logError(String message) {\n         logMesssage(Log.ERROR, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logWarn(String tag, String message) {\n+    public static void logWarn(String tag, String message) {\n         logMesssage(Log.WARN, tag, message);\n     }\n \n-    static public void logWarn(String message) {\n+    public static void logWarn(String message) {\n         logMesssage(Log.WARN, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logInfo(String tag, String message) {\n+    public static void logInfo(String tag, String message) {\n         logMesssage(Log.INFO, tag, message);\n     }\n \n-    static public void logInfo(String message) {\n+    public static void logInfo(String message) {\n         logMesssage(Log.INFO, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logDebug(String tag, String message) {\n+    public static void logDebug(String tag, String message) {\n         logMesssage(Log.DEBUG, tag, message);\n     }\n \n-    static public void logDebug(String message) {\n+    public static void logDebug(String message) {\n         logMesssage(Log.DEBUG, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logVerbose(String tag, String message) {\n+    public static void logVerbose(String tag, String message) {\n         logMesssage(Log.VERBOSE, tag, message);\n     }\n \n-    static public void logVerbose(String message) {\n+    public static void logVerbose(String message) {\n         logMesssage(Log.VERBOSE, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logErrorAndShowToast(Context context, String tag, String message) {\n+    public static void logErrorAndShowToast(Context context, String tag, String message) {\n         if (context == null) return;\n \n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL) {\n@@ -105,13 +105,13 @@ static public void logErrorAndShowToast(Context context, String tag, String mess\n         }\n     }\n \n-    static public void logErrorAndShowToast(Context context, String message) {\n+    public static void logErrorAndShowToast(Context context, String message) {\n         logErrorAndShowToast(context, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logDebugAndShowToast(Context context, String tag, String message) {\n+    public static void logDebugAndShowToast(Context context, String tag, String message) {\n         if (context == null) return;\n \n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG) {\n@@ -120,35 +120,35 @@ static public void logDebugAndShowToast(Context context, String tag, String mess\n         }\n     }\n \n-    static public void logDebugAndShowToast(Context context, String message) {\n+    public static void logDebugAndShowToast(Context context, String message) {\n         logDebugAndShowToast(context, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logStackTraceWithMessage(String tag, String message, Throwable throwable) {\n+    public static void logStackTraceWithMessage(String tag, String message, Throwable throwable) {\n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n             Log.e(getFullTag(tag), getMessageAndStackTraceString(message, throwable));\n     }\n \n-    static public void logStackTraceWithMessage(String message, Throwable throwable) {\n+    public static void logStackTraceWithMessage(String message, Throwable throwable) {\n         logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable);\n     }\n \n-    static public void logStackTrace(String tag, Throwable throwable) {\n+    public static void logStackTrace(String tag, Throwable throwable) {\n         logStackTraceWithMessage(tag, null, throwable);\n     }\n \n-    static public void logStackTrace(Throwable throwable) {\n+    public static void logStackTrace(Throwable throwable) {\n         logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable);\n     }\n \n-    static public void logStackTracesWithMessage(String tag, String message, List<Throwable> throwableList) {\n+    public static void logStackTracesWithMessage(String tag, String message, List<Throwable> throwableList) {\n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n             Log.e(getFullTag(tag), getMessageAndStackTracesString(message, throwableList));\n     }\n \n-    static public String getMessageAndStackTraceString(String message, Throwable throwable) {\n+    public static String getMessageAndStackTraceString(String message, Throwable throwable) {\n         if(message == null && throwable == null)\n             return null;\n         else if(message != null && throwable != null)\n@@ -159,7 +159,7 @@ else if(throwable == null)\n             return getStackTraceString(throwable);\n     }\n \n-    static public String getMessageAndStackTracesString(String message, List<Throwable> throwableList) {\n+    public static String getMessageAndStackTracesString(String message, List<Throwable> throwableList) {\n         if(message == null && (throwableList == null || throwableList.size() == 0))\n             return null;\n         else if(message != null && (throwableList != null && throwableList.size() != 0))\n@@ -170,7 +170,7 @@ else if(throwableList == null || throwableList.size() == 0)\n             return getStackTracesString(null, getStackTraceStringArray(throwableList));\n     }\n \n-    static public String getStackTraceString(Throwable throwable) {\n+    public static String getStackTraceString(Throwable throwable) {\n         if(throwable == null) return null;\n \n         String stackTraceString = null;\n@@ -188,7 +188,8 @@ static public String getStackTraceString(Throwable throwable) {\n \n         return stackTraceString;\n     }\n-    private static String[] getStackTraceStringArray(Throwable throwable) {\n+\n+    public static String[] getStackTraceStringArray(Throwable throwable) {\n         return getStackTraceStringArray(Collections.singletonList(throwable));\n     }\n \n@@ -210,22 +211,28 @@ public static String getStackTracesString(String label, String[] stackTraceStrin\n             stackTracesString.append(\" -\");\n         } else {\n             for (int i = 0; i != stackTraceStringArray.length; i++) {\n-                stackTracesString.append(\"\\n\\nStacktrace \").append(i + 1).append(\"\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\\n\");\n+                if(stackTraceStringArray.length > 1)\n+                    stackTracesString.append(\"\\n\\nStacktrace \").append(i + 1);\n+\n+                stackTracesString.append(\"\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\\n\");\n             }\n         }\n \n         return stackTracesString.toString();\n     }\n \n     public static String getStackTracesMarkdownString(String label, String[] stackTraceStringArray) {\n-        if(label == null) label = \"StackTraces:\";\n+        if(label == null) label = \"StackTraces\";\n         StringBuilder stackTracesString = new StringBuilder(\"### \" + label);\n \n         if (stackTraceStringArray == null || stackTraceStringArray.length == 0) {\n             stackTracesString.append(\"\\n\\n`-`\");\n         } else {\n             for (int i = 0; i != stackTraceStringArray.length; i++) {\n-                stackTracesString.append(\"\\n\\n\\n#### Stacktrace \").append(i + 1).append(\"\\n\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\");\n+                if(stackTraceStringArray.length > 1)\n+                    stackTracesString.append(\"\\n\\n\\n#### Stacktrace \").append(i + 1);\n+\n+                stackTracesString.append(\"\\n\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\");\n             }\n         }\n \n@@ -250,7 +257,7 @@ public static String getMultiLineLogStringEntry(String label, Object object, Str\n     \n \n \n-    static public void showToast(final Context context, final String toastText, boolean longDuration) {\n+    public static void showToast(final Context context, final String toastText, boolean longDuration) {\n         if (context == null) return;\n \n         new Handler(Looper.getMainLooper()).post(() -> Toast.makeText(context, toastText, longDuration ? Toast.LENGTH_LONG : Toast.LENGTH_SHORT).show());\n@@ -313,7 +320,7 @@ public static int setLogLevel(Context context, int logLevel) {\n         return CURRENT_LOG_LEVEL;\n     }\n \n-    static public String getFullTag(String tag) {\n+    public static String getFullTag(String tag) {\n         if(DEFAULT_LOG_TAG.equals(tag))\n             return tag;\n         else",
      "parent_sha": "38323b1c2a364556556d5363415975f3861a7e4e"
    }
  },
  {
    "oid": "7de061361774a2a42fe48f15a29730d541c249c1",
    "message": "Fixed: Catch exception when requesting permissions, like if request code is negative",
    "date": "2021-08-20T01:19:25Z",
    "url": "https://github.com/termux/termux-app/commit/7de061361774a2a42fe48f15a29730d541c249c1",
    "details": {
      "sha": "8752a0a9c6a551a51d34766ebec56f37c0cd944f",
      "filename": "termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/termux/termux-app/blob/7de061361774a2a42fe48f15a29730d541c249c1/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fpackages%2FPermissionUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/7de061361774a2a42fe48f15a29730d541c249c1/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fpackages%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fpackages%2FPermissionUtils.java?ref=7de061361774a2a42fe48f15a29730d541c249c1",
      "patch": "@@ -63,7 +63,11 @@ public static void requestPermissions(Activity activity, String[] permissions, i\n             result = ContextCompat.checkSelfPermission(activity, permission);\n             if (result != PackageManager.PERMISSION_GRANTED) {\n                 Logger.logDebug(LOG_TAG, \"Requesting Permissions: \" + Arrays.toString(permissions));\n-                activity.requestPermissions(new String[]{permission}, requestCode);\n+                try {\n+                    activity.requestPermissions(new String[]{permission}, requestCode);\n+                } catch (Exception e) {\n+                    Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to request permissions with request code \" + requestCode + \": \" + Arrays.toString(permissions), e);\n+                }\n             }\n         }\n     }",
      "parent_sha": "5e09a501c96f2a297d53e5c82b9d9c8e443c48ea"
    }
  },
  {
    "oid": "365f9723ccf2ad3eae427028bbcdfc20f04543dc",
    "message": "- in onKeyDown() ignore keys when the Fn key is pressed\n\n- in onKeyDown() return false when the key is not handled.\n\nThe above two changes fix the handling of Fn-key combo's on devices with\na physical keyboard, allowing the android system defined fallbacks from\n`/system/usr/keychars/Generic.kcm` to be properly handled.\n\nFixes #731.\n\nOriginal diagnosis and fix by Konehaltia.",
    "date": "2018-08-01T22:36:44Z",
    "url": "https://github.com/termux/termux-app/commit/365f9723ccf2ad3eae427028bbcdfc20f04543dc",
    "details": {
      "sha": "598e3dd0d4b342a5e11adfee3f42b8a7b854a309",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/termux/termux-app/blob/365f9723ccf2ad3eae427028bbcdfc20f04543dc/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/365f9723ccf2ad3eae427028bbcdfc20f04543dc/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=365f9723ccf2ad3eae427028bbcdfc20f04543dc",
      "patch": "@@ -600,7 +600,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         if (controlDownFromEvent) keyMod |= KeyHandler.KEYMOD_CTRL;\n         if (event.isAltPressed()) keyMod |= KeyHandler.KEYMOD_ALT;\n         if (event.isShiftPressed()) keyMod |= KeyHandler.KEYMOD_SHIFT;\n-        if (handleKeyCode(keyCode, keyMod)) {\n+        if (!event.isFunctionPressed() && handleKeyCode(keyCode, keyMod)) {\n             if (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"handleKeyCode() took key event\");\n             return true;\n         }\n@@ -619,7 +619,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         if (LOG_KEY_EVENTS)\n             Log.i(EmulatorDebug.LOG_TAG, \"KeyEvent#getUnicodeChar(\" + effectiveMetaState + \") returned: \" + result);\n         if (result == 0) {\n-            return true;\n+            return false;\n         }\n \n         int oldCombiningAccent = mCombiningAccent;",
      "parent_sha": "fdae272214fdbcd234d7180150bc056d1d514b9c"
    }
  },
  {
    "oid": "2afa4b4351c1c95f762cbff46bb37b962442bec0",
    "message": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.14.0`. Check its Changelog sections for info on changes.",
    "date": "2021-03-25T18:30:36Z",
    "url": "https://github.com/termux/termux-app/commit/2afa4b4351c1c95f762cbff46bb37b962442bec0",
    "details": {
      "sha": "1038b08274f60e08d87ac64f890a7722a5bc649e",
      "filename": "app/src/main/java/com/termux/app/TermuxConstants.java",
      "status": "modified",
      "additions": 74,
      "deletions": 6,
      "changes": 80,
      "blob_url": "https://github.com/termux/termux-app/blob/2afa4b4351c1c95f762cbff46bb37b962442bec0/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/2afa4b4351c1c95f762cbff46bb37b962442bec0/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java?ref=2afa4b4351c1c95f762cbff46bb37b962442bec0",
      "patch": "@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.13.0\n+ * Version: v0.14.0\n  *\n  * Changelog\n  *\n@@ -85,6 +85,17 @@\n  * - 0.13.0 (2021-03-25)\n  *      - Added following to `RUN_COMMAND_SERVICE`:\n  *          `EXTRA_PENDING_INTENT`.\n+ *\n+ * - 0.14.0 (2021-03-25)\n+ *      - Added `FDROID_PACKAGES_BASE_URL`,\n+ *          `TERMUX_GITHUB_ORGANIZATION_NAME`, `TERMUX_GITHUB_ORGANIZATION_URL`,\n+ *          `TERMUX_GITHUB_REPO_NAME`, `TERMUX_GITHUB_REPO_URL`, `TERMUX_FDROID_PACKAGE_URL`,\n+ *          `TERMUX_API_GITHUB_REPO_NAME`,`TERMUX_API_GITHUB_REPO_URL`, `TERMUX_API_FDROID_PACKAGE_URL`,\n+ *          `TERMUX_BOOT_GITHUB_REPO_NAME`, `TERMUX_BOOT_GITHUB_REPO_URL`, `TERMUX_BOOT_FDROID_PACKAGE_URL`,\n+ *          `TERMUX_FLOAT_GITHUB_REPO_NAME`, `TERMUX_FLOAT_GITHUB_REPO_URL`, `TERMUX_FLOAT_FDROID_PACKAGE_URL`,\n+ *          `TERMUX_STYLING_GITHUB_REPO_NAME`, `TERMUX_STYLING_GITHUB_REPO_URL`, `TERMUX_STYLING_FDROID_PACKAGE_URL`,\n+ *          `TERMUX_TASKER_GITHUB_REPO_NAME`, `TERMUX_TASKER_GITHUB_REPO_URL`, `TERMUX_TASKER_FDROID_PACKAGE_URL`,\n+ *          `TERMUX_WIDGET_GITHUB_REPO_NAME`, `TERMUX_WIDGET_GITHUB_REPO_URL` `TERMUX_WIDGET_FDROID_PACKAGE_URL`.\n  */\n \n /**\n@@ -125,50 +136,107 @@\n  */\n public final class TermuxConstants {\n \n+\n+    /*\n+     * Termux organization variables.\n+     */\n+\n+    /** Termux Github organization name */\n+    public static final String TERMUX_GITHUB_ORGANIZATION_NAME = \"termux\"; // Default: \"termux\"\n+    /** Termux Github organization url */\n+    public static final String TERMUX_GITHUB_ORGANIZATION_URL = \"https://github.com\" + \"/\" + TERMUX_GITHUB_ORGANIZATION_NAME; // Default: \"https://github.com/termux\"\n+\n+    /** F-Droid packages base url */\n+    public static final String FDROID_PACKAGES_BASE_URL = \"https://f-droid.org/en/packages\"; // Default: \"https://f-droid.org/en/packages\"\n+\n+\n+\n     /*\n      * Termux and its plugin app and package names.\n      */\n \n     /** Termux app name */\n     public static final String TERMUX_APP_NAME = \"Termux\"; // Default: \"Termux\"\n-    /** Termux app package name */\n+    /** Termux package name */\n     public static final String TERMUX_PACKAGE_NAME = \"com.termux\"; // Default: \"com.termux\"\n+    /** Termux Github repo name */\n+    public static final String TERMUX_GITHUB_REPO_NAME = \"termux-app\"; // Default: \"termux-app\"\n+    /** Termux Github repo url */\n+    public static final String TERMUX_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-app\"\n+    /** Termux F-Droid package url */\n+    public static final String TERMUX_FDROID_PACKAGE_URL = FDROID_PACKAGES_BASE_URL + \"/\" + TERMUX_PACKAGE_NAME; // Default: \"https://f-droid.org/en/packages/com.termux\"\n \n \n     /** Termux API app name */\n     public static final String TERMUX_API_APP_NAME = \"Termux:API\"; // Default: \"Termux:API\"\n     /** Termux API app package name */\n     public static final String TERMUX_API_PACKAGE_NAME = TERMUX_PACKAGE_NAME + \".api\"; // Default: \"com.termux.api\"\n+    /** Termux API Github repo name */\n+    public static final String TERMUX_API_GITHUB_REPO_NAME = \"termux-api\"; // Default: \"termux-api\"\n+    /** Termux API Github repo url */\n+    public static final String TERMUX_API_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_API_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-api\"\n+    /** Termux API F-Droid package url */\n+    public static final String TERMUX_API_FDROID_PACKAGE_URL = FDROID_PACKAGES_BASE_URL + \"/\" + TERMUX_API_PACKAGE_NAME; // Default: \"https://f-droid.org/en/packages/com.termux.api\"\n \n \n     /** Termux Boot app name */\n     public static final String TERMUX_BOOT_APP_NAME = \"Termux:Boot\"; // Default: \"Termux:Boot\"\n     /** Termux Boot app package name */\n     public static final String TERMUX_BOOT_PACKAGE_NAME = TERMUX_PACKAGE_NAME + \".boot\"; // Default: \"com.termux.boot\"\n+    /** Termux Boot Github repo name */\n+    public static final String TERMUX_BOOT_GITHUB_REPO_NAME = \"termux-boot\"; // Default: \"termux-boot\"\n+    /** Termux Boot Github repo url */\n+    public static final String TERMUX_BOOT_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_BOOT_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-boot\"\n+    /** Termux Boot F-Droid package url */\n+    public static final String TERMUX_BOOT_FDROID_PACKAGE_URL = FDROID_PACKAGES_BASE_URL + \"/\" + TERMUX_BOOT_PACKAGE_NAME; // Default: \"https://f-droid.org/en/packages/com.termux.boot\"\n \n \n     /** Termux Float app name */\n     public static final String TERMUX_FLOAT_APP_NAME = \"Termux:Float\"; // Default: \"Termux:Float\"\n     /** Termux Float app package name */\n     public static final String TERMUX_FLOAT_PACKAGE_NAME = TERMUX_PACKAGE_NAME + \".window\"; // Default: \"com.termux.window\"\n+    /** Termux Float Github repo name */\n+    public static final String TERMUX_FLOAT_GITHUB_REPO_NAME = \"termux-float\"; // Default: \"termux-float\"\n+    /** Termux Float Github repo url */\n+    public static final String TERMUX_FLOAT_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_FLOAT_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-float\"\n+    /** Termux Float F-Droid package url */\n+    public static final String TERMUX_FLOAT_FDROID_PACKAGE_URL = FDROID_PACKAGES_BASE_URL + \"/\" + TERMUX_FLOAT_PACKAGE_NAME; // Default: \"https://f-droid.org/en/packages/com.termux.window\"\n \n \n     /** Termux Styling app name */\n     public static final String TERMUX_STYLING_APP_NAME = \"Termux:Styling\"; // Default: \"Termux:Styling\"\n     /** Termux Styling app package name */\n     public static final String TERMUX_STYLING_PACKAGE_NAME = TERMUX_PACKAGE_NAME + \".styling\"; // Default: \"com.termux.styling\"\n+    /** Termux Styling Github repo name */\n+    public static final String TERMUX_STYLING_GITHUB_REPO_NAME = \"termux-styling\"; // Default: \"termux-styling\"\n+    /** Termux Styling Github repo url */\n+    public static final String TERMUX_STYLING_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_STYLING_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-styling\"\n+    /** Termux Styling F-Droid package url */\n+    public static final String TERMUX_STYLING_FDROID_PACKAGE_URL = FDROID_PACKAGES_BASE_URL + \"/\" + TERMUX_STYLING_PACKAGE_NAME; // Default: \"https://f-droid.org/en/packages/com.termux.styling\"\n \n \n     /** Termux Tasker app name */\n     public static final String TERMUX_TASKER_APP_NAME = \"Termux:Tasker\"; // Default: \"Termux:Tasker\"\n     /** Termux Tasker app package name */\n     public static final String TERMUX_TASKER_PACKAGE_NAME = TERMUX_PACKAGE_NAME + \".tasker\"; // Default: \"com.termux.tasker\"\n+    /** Termux Tasker Github repo name */\n+    public static final String TERMUX_TASKER_GITHUB_REPO_NAME = \"termux-tasker\"; // Default: \"termux-tasker\"\n+    /** Termux Tasker Github repo url */\n+    public static final String TERMUX_TASKER_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_TASKER_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-tasker\"\n+    /** Termux Tasker F-Droid package url */\n+    public static final String TERMUX_TASKER_FDROID_PACKAGE_URL = FDROID_PACKAGES_BASE_URL + \"/\" + TERMUX_TASKER_PACKAGE_NAME; // Default: \"https://f-droid.org/en/packages/com.termux.tasker\"\n \n \n     /** Termux Widget app name */\n     public static final String TERMUX_WIDGET_APP_NAME = \"Termux:Widget\"; // Default: \"Termux:Widget\"\n     /** Termux Widget app package name */\n     public static final String TERMUX_WIDGET_PACKAGE_NAME = TERMUX_PACKAGE_NAME + \".widget\"; // Default: \"com.termux.widget\"\n+    /** Termux Widget Github repo name */\n+    public static final String TERMUX_WIDGET_GITHUB_REPO_NAME = \"termux-widget\"; // Default: \"termux-widget\"\n+    /** Termux Widget Github repo url */\n+    public static final String TERMUX_WIDGET_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_WIDGET_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-widget\"\n+    /** Termux Widget F-Droid package url */\n+    public static final String TERMUX_WIDGET_FDROID_PACKAGE_URL = FDROID_PACKAGES_BASE_URL + \"/\" + TERMUX_WIDGET_PACKAGE_NAME; // Default: \"https://f-droid.org/en/packages/com.termux.widget\"\n \n \n \n@@ -337,7 +405,7 @@ public final class TermuxConstants {\n      * Termux app plugin specific paths.\n      */\n \n-     /** Termux app directory path to store scripts to be run at boot by Termux:Boot */\n+    /** Termux app directory path to store scripts to be run at boot by Termux:Boot */\n     public static final String TERMUX_BOOT_SCRIPTS_DIR_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/boot\"; // Default: \"/data/data/com.termux/files/home/.termux/boot\"\n     /** Termux app directory to store scripts to be run at boot by Termux:Boot */\n     public static final File TERMUX_BOOT_SCRIPTS_DIR = new File(TERMUX_BOOT_SCRIPTS_DIR_PATH);\n@@ -349,7 +417,7 @@ public final class TermuxConstants {\n     public static final File TERMUX_SHORTCUT_SCRIPTS_DIR = new File(TERMUX_SHORTCUT_SCRIPTS_DIR_PATH);\n \n \n-     /** Termux app directory path to store background scripts that can be run by the termux launcher widget provided by Termux:Widget */\n+    /** Termux app directory path to store background scripts that can be run by the termux launcher widget provided by Termux:Widget */\n     public static final String TERMUX_SHORTCUT_TASKS_SCRIPTS_DIR_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/shortcuts/tasks\"; // Default: \"/data/data/com.termux/files/home/.termux/shortcuts/tasks\"\n     /** Termux app directory to store background scripts that can be run by the termux launcher widget provided by Termux:Widget */\n     public static final File TERMUX_SHORTCUT_TASKS_SCRIPTS_DIR = new File(TERMUX_SHORTCUT_TASKS_SCRIPTS_DIR_PATH);\n@@ -368,10 +436,10 @@ public final class TermuxConstants {\n      * Termux app and plugins miscellaneous variables.\n      */\n \n-     /** Android OS permission declared by Termux app in AndroidManifest.xml which can be requested by 3rd party apps to run various commands in Termux app context */\n+    /** Android OS permission declared by Termux app in AndroidManifest.xml which can be requested by 3rd party apps to run various commands in Termux app context */\n     public static final String PERMISSION_RUN_COMMAND = TERMUX_PACKAGE_NAME + \".permission.RUN_COMMAND\"; // Default: \"com.termux.permission.RUN_COMMAND\"\n \n-     /** Termux property defined in termux.properties file as a secondary check to PERMISSION_RUN_COMMAND to allow 3rd party apps to run various commands in Termux app context */\n+    /** Termux property defined in termux.properties file as a secondary check to PERMISSION_RUN_COMMAND to allow 3rd party apps to run various commands in Termux app context */\n     public static final String PROP_ALLOW_EXTERNAL_APPS = \"allow-external-apps\"; // Default: \"allow-external-apps\"\n     /** Default value for {@link #PROP_ALLOW_EXTERNAL_APPS} */\n     public static final String PROP_DEFAULT_VALUE_ALLOW_EXTERNAL_APPS = \"false\"; // Default: \"false\"",
      "parent_sha": "a2209ddd5efb26f45c84b0b8401bef9c15b20a56"
    }
  },
  {
    "oid": "fabcc4fa35e635d8b339170b16e55449fe56238e",
    "message": "Fixed: RunCommandService notification was not being cleared if an error was raised",
    "date": "2021-08-20T01:19:25Z",
    "url": "https://github.com/termux/termux-app/commit/fabcc4fa35e635d8b339170b16e55449fe56238e",
    "details": {
      "sha": "c5c79f939de8258265efc0d9f85937a1d2c4d277",
      "filename": "app/src/main/java/com/termux/app/RunCommandService.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/termux/termux-app/blob/fabcc4fa35e635d8b339170b16e55449fe56238e/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FRunCommandService.java",
      "raw_url": "https://github.com/termux/termux-app/raw/fabcc4fa35e635d8b339170b16e55449fe56238e/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FRunCommandService.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FRunCommandService.java?ref=fabcc4fa35e635d8b339170b16e55449fe56238e",
      "patch": "@@ -73,7 +73,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             errmsg = this.getString(R.string.error_run_command_service_invalid_intent_action, intent.getAction());\n             executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            return Service.START_NOT_STICKY;\n+            return stopService();\n         }\n \n         String executableExtra = executionCommand.executable = IntentUtils.getStringExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH, null);\n@@ -125,7 +125,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         if (errmsg != null) {\n             executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, true);\n-            return Service.START_NOT_STICKY;\n+            return stopService();\n         }\n \n \n@@ -135,7 +135,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             errmsg  = this.getString(R.string.error_run_command_service_mandatory_extra_missing, RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH);\n             executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            return Service.START_NOT_STICKY;\n+            return stopService();\n         }\n \n         // Get canonical path of executable\n@@ -150,7 +150,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             error.appendMessage(\"\\n\" + this.getString(R.string.msg_executable_absolute_path, executionCommand.executable));\n             executionCommand.setStateFailed(error);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            return Service.START_NOT_STICKY;\n+            return stopService();\n         }\n \n \n@@ -172,7 +172,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                 error.appendMessage(\"\\n\" + this.getString(R.string.msg_working_directory_absolute_path, executionCommand.workingDirectory));\n                 executionCommand.setStateFailed(error);\n                 PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-                return Service.START_NOT_STICKY;\n+                return stopService();\n             }\n         }\n \n@@ -219,8 +219,11 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             this.startService(execIntent);\n         }\n \n-        runStopForeground();\n+        return stopService();\n+    }\n \n+    private int stopService() {\n+        runStopForeground();\n         return Service.START_NOT_STICKY;\n     }\n ",
      "parent_sha": "98edf1fbc777ef7d41a70cf5655feb64c4fa2378"
    }
  },
  {
    "oid": "af445f96184656aeae8047443248ac76eb44f66d",
    "message": "Improve config parsing",
    "date": "2018-10-25T21:31:38Z",
    "url": "https://github.com/termux/termux-app/commit/af445f96184656aeae8047443248ac76eb44f66d",
    "details": {
      "sha": "8dde9d95279233c0883c382c8f80e997889397bd",
      "filename": "app/src/main/java/com/termux/app/TermuxPreferences.java",
      "status": "modified",
      "additions": 39,
      "deletions": 31,
      "changes": 70,
      "blob_url": "https://github.com/termux/termux-app/blob/af445f96184656aeae8047443248ac76eb44f66d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java",
      "raw_url": "https://github.com/termux/termux-app/raw/af445f96184656aeae8047443248ac76eb44f66d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java?ref=af445f96184656aeae8047443248ac76eb44f66d",
      "patch": "@@ -7,18 +7,19 @@\n import android.util.Log;\n import android.util.TypedValue;\n import android.widget.Toast;\n-\n import com.termux.terminal.TerminalSession;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.IOException;\n import java.io.InputStreamReader;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n-import org.json.JSONArray;\n \n final class TermuxPreferences {\n \n@@ -116,52 +117,59 @@ static TerminalSession getCurrentSession(TermuxActivity context) {\n     public String[][] mExtraKeys;\n \n     public void reloadFromProperties(Context context) {\n-        try {\n-            File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");\n-            if (!propsFile.exists())\n-                propsFile = new File(TermuxService.HOME_PATH + \"/.config/termux/termux.properties\");\n+        File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");\n+        if (!propsFile.exists())\n+            propsFile = new File(TermuxService.HOME_PATH + \"/.config/termux/termux.properties\");\n \n-            Properties props = new Properties();\n+        Properties props = new Properties();\n+        try {\n             if (propsFile.isFile() && propsFile.canRead()) {\n                 String encoding = \"utf-8\"; // most useful default nowadays\n                 try (FileInputStream in = new FileInputStream(propsFile)) {\n                     props.load(new InputStreamReader(in, encoding));\n                 }\n             }\n+        } catch (IOException e) {\n+            Toast.makeText(context, \"Could not open the propertiey file termux.properties.\", Toast.LENGTH_LONG).show();\n+            Log.e(\"termux\", \"Error loading props\", e);\n+        }\n \n-            switch (props.getProperty(\"bell-character\", \"vibrate\")) {\n-                case \"beep\":\n-                    mBellBehaviour = BELL_BEEP;\n-                    break;\n-                case \"ignore\":\n-                    mBellBehaviour = BELL_IGNORE;\n-                    break;\n-                default: // \"vibrate\".\n-                    mBellBehaviour = BELL_VIBRATE;\n-                    break;\n-            }\n-            \n+        switch (props.getProperty(\"bell-character\", \"vibrate\")) {\n+            case \"beep\":\n+                mBellBehaviour = BELL_BEEP;\n+                break;\n+            case \"ignore\":\n+                mBellBehaviour = BELL_IGNORE;\n+                break;\n+            default: // \"vibrate\".\n+                mBellBehaviour = BELL_VIBRATE;\n+                break;\n+        }\n+\n+        try {\n             JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC', 'TAB', 'CTRL', 'ALT', '-', 'DOWN', 'UP']]\"));\n+\n             mExtraKeys = new String[arr.length()][];\n-            for(int i = 0; i < arr.length(); i++) {\n+            for (int i = 0; i < arr.length(); i++) {\n                 JSONArray line = arr.getJSONArray(i);\n                 mExtraKeys[i] = new String[line.length()];\n-                for(int j = 0; j < line.length(); j++) {\n+                for (int j = 0; j < line.length(); j++) {\n                     mExtraKeys[i][j] = line.getString(j);\n                 }\n             }\n-\n-            mBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"back\"));\n-\n-            shortcuts.clear();\n-            parseAction(\"shortcut.create-session\", SHORTCUT_ACTION_CREATE_SESSION, props);\n-            parseAction(\"shortcut.next-session\", SHORTCUT_ACTION_NEXT_SESSION, props);\n-            parseAction(\"shortcut.previous-session\", SHORTCUT_ACTION_PREVIOUS_SESSION, props);\n-            parseAction(\"shortcut.rename-session\", SHORTCUT_ACTION_RENAME_SESSION, props);\n-        } catch (Exception e) {\n-            Toast.makeText(context, \"Error loading properties: \" + e.getMessage(), Toast.LENGTH_LONG).show();\n+        } catch (JSONException e) {\n+            Toast.makeText(context, \"Could not load the extra-keys property from the config: \" + e.toString(), Toast.LENGTH_LONG).show();\n             Log.e(\"termux\", \"Error loading props\", e);\n+            mExtraKeys = new String[0][];\n         }\n+\n+        mBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"back\"));\n+\n+        shortcuts.clear();\n+        parseAction(\"shortcut.create-session\", SHORTCUT_ACTION_CREATE_SESSION, props);\n+        parseAction(\"shortcut.next-session\", SHORTCUT_ACTION_NEXT_SESSION, props);\n+        parseAction(\"shortcut.previous-session\", SHORTCUT_ACTION_PREVIOUS_SESSION, props);\n+        parseAction(\"shortcut.rename-session\", SHORTCUT_ACTION_RENAME_SESSION, props);\n     }\n \n     public static final int SHORTCUT_ACTION_CREATE_SESSION = 1;",
      "parent_sha": "82f977fbf136f3414ecc6155ba519b3ad07996e2"
    }
  },
  {
    "oid": "01a1c6de0f5dcbdcce97de762b577552496402f4",
    "message": "Change default behaviour of back key to back\n\nIt's still possible to set it to escape using configuration",
    "date": "2016-01-19T16:22:57Z",
    "url": "https://github.com/termux/termux-app/commit/01a1c6de0f5dcbdcce97de762b577552496402f4",
    "details": {
      "sha": "d01113ba0ca0f2872c56e218146c3c97f0da434f",
      "filename": "app/src/main/java/com/termux/app/TermuxPreferences.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/01a1c6de0f5dcbdcce97de762b577552496402f4/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java",
      "raw_url": "https://github.com/termux/termux-app/raw/01a1c6de0f5dcbdcce97de762b577552496402f4/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java?ref=01a1c6de0f5dcbdcce97de762b577552496402f4",
      "patch": "@@ -132,7 +132,7 @@ public void reloadFromProperties(Context context) {\n \t\t\t\t\tbreak;\n \t\t\t}\n \n-\t\t\tmBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"escape\"));\n+\t\t\tmBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"back\"));\n \t\t} catch (Exception e) {\n \t\t\tToast.makeText(context, \"Error loading properties: \" + e.getMessage(), Toast.LENGTH_LONG).show();\n \t\t\tLog.e(\"termux\", \"Error loading props\", e);",
      "parent_sha": "497fc3ecd0b1f714a211d881a32f33284e94aa3b"
    }
  },
  {
    "oid": "c5923201a449f2c8b30081638f49ed3d4d4acc1a",
    "message": "fix indent with vim on termux\n\nweb interface would have worked, if I had deleted the tabs, first\nThis vim is adding tabs instead of matching the previous line's\nindentation. Looking into fixing that now...",
    "date": "2018-06-21T22:33:35Z",
    "url": "https://github.com/termux/termux-app/commit/c5923201a449f2c8b30081638f49ed3d4d4acc1a",
    "details": {
      "sha": "93ad1db6e77b8a36c8766f52f1b15b537c0fcee5",
      "filename": "app/src/main/java/com/termux/app/TermuxInstaller.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/termux/termux-app/blob/c5923201a449f2c8b30081638f49ed3d4d4acc1a/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "raw_url": "https://github.com/termux/termux-app/raw/c5923201a449f2c8b30081638f49ed3d4d4acc1a/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java?ref=c5923201a449f2c8b30081638f49ed3d4d4acc1a",
      "patch": "@@ -229,12 +229,12 @@ public void run() {\n                     File storageDir = new File(TermuxService.HOME_PATH, \"storage\");\n \n                     if (storageDir.exists()) {\n-\t\t\t            try {\n-\t\t\t        \t    deleteFolder(storageDir);\n-\t\t\t            } catch (Exception e) {\n-\t\t        \t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n-\t\t\t        \t    return;\n-\t        \t\t    }\n+                        try {\n+                            deleteFolder(storageDir);\n+                        } catch (Exception e) {\n+                            Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n+                            return;\n+                        }\n                     }\n \n                     if (!storageDir.mkdirs()) {",
      "parent_sha": "bafd21bb390ce5fe5fd1fbc359c0cf1a248543b4"
    }
  },
  {
    "oid": "c095a6184bebc030e3deef9b20bff1ade2f14088",
    "message": "Changed: Rename `TermuxCrashUtils` `sendPluginCrashReportNotification() to `sendCrashReportNotification()`",
    "date": "2022-04-22T19:36:12Z",
    "url": "https://github.com/termux/termux-app/commit/c095a6184bebc030e3deef9b20bff1ade2f14088",
    "details": {
      "sha": "0742c70095f3d15ea4b0bfdd6b270c7375d542aa",
      "filename": "termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/termux/termux-app/blob/c095a6184bebc030e3deef9b20bff1ade2f14088/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2Fcrash%2FTermuxCrashUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/c095a6184bebc030e3deef9b20bff1ade2f14088/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2Fcrash%2FTermuxCrashUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2Fcrash%2FTermuxCrashUtils.java?ref=c095a6184bebc030e3deef9b20bff1ade2f14088",
      "patch": "@@ -196,9 +196,9 @@ private static synchronized void notifyAppCrashFromCrashLogFileInner(final Conte\n      * @param message The message for the crash report.\n      * @param throwable The {@link Throwable} for the crash report.\n      */\n-    public static void sendPluginCrashReportNotification(final Context currentPackageContext, String logTag,\n-                                                         CharSequence title, String message, Throwable throwable) {\n-        TermuxCrashUtils.sendPluginCrashReportNotification(currentPackageContext, logTag,\n+    public static void sendCrashReportNotification(final Context currentPackageContext, String logTag,\n+                                                   CharSequence title, String message, Throwable throwable) {\n+        sendCrashReportNotification(currentPackageContext, logTag,\n             title, message,\n             MarkdownUtils.getMarkdownCodeForString(Logger.getMessageAndStackTraceString(message, throwable), true),\n             false, false, true);\n@@ -214,10 +214,10 @@ public static void sendPluginCrashReportNotification(final Context currentPackag\n      * @param notificationTextString The text of the notification.\n      * @param message The message for the crash report.\n      */\n-    public static void sendPluginCrashReportNotification(final Context currentPackageContext, String logTag,\n-                                                         CharSequence title, String notificationTextString,\n-                                                         String message) {\n-        TermuxCrashUtils.sendPluginCrashReportNotification(currentPackageContext, logTag,\n+    public static void sendCrashReportNotification(final Context currentPackageContext, String logTag,\n+                                                   CharSequence title, String notificationTextString,\n+                                                   String message) {\n+        sendCrashReportNotification(currentPackageContext, logTag,\n             title, notificationTextString, message,\n             false, false, true);\n     }\n@@ -238,12 +238,12 @@ public static void sendPluginCrashReportNotification(final Context currentPackag\n      * @param showToast If set to {@code true}, then a toast will be shown for {@code notificationTextString}.\n      * @param addDeviceInfo If set to {@code true}, then device info should be appended to the message.\n      */\n-    public static void sendPluginCrashReportNotification(final Context currentPackageContext, String logTag,\n-                                                         CharSequence title, String notificationTextString,\n-                                                         String message, boolean forceNotification,\n-                                                         boolean showToast,\n-                                                         boolean addDeviceInfo) {\n-        TermuxCrashUtils.sendCrashReportNotification(currentPackageContext, logTag,\n+    public static void sendCrashReportNotification(final Context currentPackageContext, String logTag,\n+                                                   CharSequence title, String notificationTextString,\n+                                                   String message, boolean forceNotification,\n+                                                   boolean showToast,\n+                                                   boolean addDeviceInfo) {\n+        sendCrashReportNotification(currentPackageContext, logTag,\n             title, notificationTextString, \"## \" + title + \"\\n\\n\" + message + \"\\n\\n\",\n             forceNotification, showToast, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGE, addDeviceInfo);\n     }",
      "parent_sha": "cc981d8a0395e5b357f69cac94c049426f9b9364"
    }
  },
  {
    "oid": "81d97c35840e9292cfcfdbf4df7d93f84b44e167",
    "message": "Fix potential TransactionTooLargeException when sharing text",
    "date": "2021-04-06T12:13:28Z",
    "url": "https://github.com/termux/termux-app/commit/81d97c35840e9292cfcfdbf4df7d93f84b44e167",
    "details": {
      "sha": "3530ad0033fc569632843708ba8fd127cc5bbbdb",
      "filename": "app/src/main/java/com/termux/app/utils/ShareUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/81d97c35840e9292cfcfdbf4df7d93f84b44e167/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Futils%2FShareUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/81d97c35840e9292cfcfdbf4df7d93f84b44e167/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Futils%2FShareUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Futils%2FShareUtils.java?ref=81d97c35840e9292cfcfdbf4df7d93f84b44e167",
      "patch": "@@ -41,7 +41,7 @@ public static void shareText(final Context context, final String subject, final\n         final Intent shareTextIntent = new Intent(Intent.ACTION_SEND);\n         shareTextIntent.setType(\"text/plain\");\n         shareTextIntent.putExtra(Intent.EXTRA_SUBJECT, subject);\n-        shareTextIntent.putExtra(Intent.EXTRA_TEXT, text);\n+        shareTextIntent.putExtra(Intent.EXTRA_TEXT, DataUtils.getTruncatedCommandOutput(text, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, false, false));\n \n         openSystemAppChooser(context, shareTextIntent, context.getString(R.string.title_share_with));\n     }",
      "parent_sha": "939338aaaca61802d0d09b18e3d914e7947bca9b"
    }
  },
  {
    "oid": "af7515247bbd0c66f4c25bf17f26b7337f77af3d",
    "message": "Fix refactoring, Ctrl, Alt, Fn keys work again",
    "date": "2018-08-28T00:34:36Z",
    "url": "https://github.com/termux/termux-app/commit/af7515247bbd0c66f4c25bf17f26b7337f77af3d",
    "details": {
      "sha": "a4073ae046c32f2e27c0f098884d922c56c5e7b2",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/termux/termux-app/blob/af7515247bbd0c66f4c25bf17f26b7337f77af3d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/af7515247bbd0c66f4c25bf17f26b7337f77af3d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=af7515247bbd0c66f4c25bf17f26b7337f77af3d",
      "patch": "@@ -125,7 +125,7 @@ public boolean readFnButton() {\n     \n     public boolean readSpecialButton(SpecialButton name) {\n         SpecialButtonState state = specialButtons.get(name);\n-        if(state == null)\n+        if (state == null)\n             throw new RuntimeException(\"Must be a valid special button (see source)\");\n         \n         if (! state.isOn)\n@@ -134,12 +134,12 @@ public boolean readSpecialButton(SpecialButton name) {\n         if (state.button.isPressed())\n             return true;\n         \n-        if (state.button.isChecked()) {\n-            state.button.setChecked(false);\n-            state.button.setTextColor(TEXT_COLOR);\n-        }\n-        \n-        return state.button.isChecked();\n+        if (! state.button.isChecked())\n+            return false;\n+\n+        state.button.setChecked(false);\n+        state.button.setTextColor(TEXT_COLOR);\n+        return true;\n     }\n \n     void popup(View view, String text) {",
      "parent_sha": "ec77be00dc5d6aafd0f51868e825a8d5ba1a1656"
    }
  },
  {
    "oid": "4443b657bf7fdf4aec5161f2a0c1099dbeaaad99",
    "message": "Fixed: Mark view as important for AutoFill before requesting an AutoFill\n\nCo-authored-by: @AChep <mail@artemchep.com>\nCo-authored-by: @agnostic-apollo  <agnosticapollo@gmail.com>",
    "date": "2024-09-26T15:34:18Z",
    "url": "https://github.com/termux/termux-app/commit/4443b657bf7fdf4aec5161f2a0c1099dbeaaad99",
    "details": {
      "sha": "435c102515578f80f26100b8cc7fe6268b1658cf",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 19,
      "deletions": 1,
      "changes": 20,
      "blob_url": "https://github.com/termux/termux-app/blob/4443b657bf7fdf4aec5161f2a0c1099dbeaaad99/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/4443b657bf7fdf4aec5161f2a0c1099dbeaaad99/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=4443b657bf7fdf4aec5161f2a0c1099dbeaaad99",
      "patch": "@@ -100,6 +100,20 @@ public final class TerminalView extends View {\n     @RequiresApi(api = Build.VERSION_CODES.O)\n     private int mAutoFillType = AUTOFILL_TYPE_NONE;\n \n+    /**\n+     * The current AutoFill type returned for {@link View#getImportantForAutofill()} by\n+     * {@link #getImportantForAutofill()}.\n+     *\n+     * The default is {@link #IMPORTANT_FOR_AUTOFILL_NO} so that view is not considered important\n+     * for AutoFill. This value should be updated to required value, like\n+     * {@link #IMPORTANT_FOR_AUTOFILL_YES} before calling {@link AutofillManager#requestAutofill(View)}\n+     * so that Android and apps consider the view as important for AutoFill to process the request.\n+     * The updated value set will automatically be restored to {@link #IMPORTANT_FOR_AUTOFILL_NO} in\n+     * {@link #autofill(AutofillValue)} by calling {@link #resetAutoFill()}.\n+     */\n+    @RequiresApi(api = Build.VERSION_CODES.O)\n+    private int mAutoFillImportance = IMPORTANT_FOR_AUTOFILL_NO;\n+\n     /**\n      * The current AutoFill hints returned for {@link View#getAutofillHints()} ()} by {@link #getAutofillHints()} ()}.\n      *\n@@ -1078,13 +1092,14 @@ public AutofillValue getAutofillValue() {\n     @RequiresApi(api = Build.VERSION_CODES.O)\n     @Override\n     public int getImportantForAutofill() {\n-        return IMPORTANT_FOR_AUTOFILL_NO;\n+        return mAutoFillImportance;\n     }\n \n     @RequiresApi(api = Build.VERSION_CODES.O)\n     private synchronized void resetAutoFill() {\n         // Restore none type so that AutoFill UI isn't shown anymore.\n         mAutoFillType = AUTOFILL_TYPE_NONE;\n+        mAutoFillImportance = IMPORTANT_FOR_AUTOFILL_NO;\n         mAutoFillHints = new String[0];\n     }\n \n@@ -1134,6 +1149,9 @@ public synchronized void requestAutoFill(String[] autoFillHints) {\n             if (autofillManager != null && autofillManager.isEnabled()) {\n                 // Update type that will be returned by `getAutofillType()` so that AutoFill UI is shown.\n                 mAutoFillType = AUTOFILL_TYPE_TEXT;\n+                // Update importance that will be returned by `getImportantForAutofill()` so that\n+                // AutoFill considers the view as important.\n+                mAutoFillImportance = IMPORTANT_FOR_AUTOFILL_YES;\n                 // Update hints that will be returned by `getAutofillHints()` for which to show AutoFill UI.\n                 mAutoFillHints = autoFillHints;\n                 autofillManager.requestAutofill(this);",
      "parent_sha": "a8a69c6d80e9602ee3b236dbcdf94b42c18c5c20"
    }
  },
  {
    "oid": "14e9a8b6fc10379819f7e3406692151dc8759e59",
    "message": "Changed: Use float dp parameter instead of int for `ViewUtils.dpToPx()` to not lose precision",
    "date": "2022-05-23T20:19:45Z",
    "url": "https://github.com/termux/termux-app/commit/14e9a8b6fc10379819f7e3406692151dc8759e59",
    "details": {
      "sha": "d7b521981e91078ce5367ee7b8769d9beda9f9ff",
      "filename": "termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/termux/termux-app/blob/14e9a8b6fc10379819f7e3406692151dc8759e59/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fview%2FViewUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/14e9a8b6fc10379819f7e3406692151dc8759e59/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fview%2FViewUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fview%2FViewUtils.java?ref=14e9a8b6fc10379819f7e3406692151dc8759e59",
      "patch": "@@ -216,15 +216,18 @@ public static Activity getActivity(Context context) {\n         return null;\n     }\n \n+\n     /** Convert value in device independent pixels (dp) to pixels (px) units. */\n-    public static int dpToPx(Context context, int dp) {\n-        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n+    public static float dpToPx(Context context, float dp) {\n+        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n+    }\n     }\n \n \n     public static void setLayoutMarginsInDp(@NonNull View view, int left, int top, int right, int bottom) {\n         Context context = view.getContext();\n-        setLayoutMarginsInPixels(view, dpToPx(context, left), dpToPx(context, top), dpToPx(context, right), dpToPx(context, bottom));\n+        setLayoutMarginsInPixels(view, (int) dpToPx(context, left), (int) dpToPx(context, top),\n+            (int) dpToPx(context, right), (int) dpToPx(context, bottom));\n     }\n \n     public static void setLayoutMarginsInPixels(@NonNull View view, int left, int top, int right, int bottom) {",
      "parent_sha": "a1719d91b3ef32218a0ac6553c659f3e1baab4da"
    }
  },
  {
    "oid": "cf883f5f0504686aa1424733bbbfb1a095f64253",
    "message": "extra keys: handle actions UP & CANCEL separately\n\nRelated issue: https://github.com/termux/termux-app/issues/905",
    "date": "2019-11-24T18:08:32Z",
    "url": "https://github.com/termux/termux-app/commit/cf883f5f0504686aa1424733bbbfb1a095f64253",
    "details": {
      "sha": "1af2830a0b235271c9a67a8987326b0f0010b54a",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/termux/termux-app/blob/cf883f5f0504686aa1424733bbbfb1a095f64253/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/cf883f5f0504686aa1424733bbbfb1a095f64253/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=cf883f5f0504686aa1424733bbbfb1a095f64253",
      "patch": "@@ -401,8 +401,14 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n                             }\n                             return true;\n \n-                        case MotionEvent.ACTION_UP:\n                         case MotionEvent.ACTION_CANCEL:\n+                            v.setBackgroundColor(BUTTON_COLOR);\n+                            if (scheduledExecutor != null) {\n+                                scheduledExecutor.shutdownNow();\n+                                scheduledExecutor = null;\n+                            }\n+                            return true;\n+                        case MotionEvent.ACTION_UP:\n                             v.setBackgroundColor(BUTTON_COLOR);\n                             if (scheduledExecutor != null) {\n                                 scheduledExecutor.shutdownNow();",
      "parent_sha": "677d75e173e44c38e4d4e02d160d15afd5b81928"
    }
  },
  {
    "oid": "26e0fa2b9e9c0e69d83844ab9cc0af22d9203037",
    "message": "Changed: Use thread to setup settings components\n\nGetting plugin contexts may be considered as too much work on main thread in certain situations resulting in android complaining that app is not responding",
    "date": "2022-03-17T00:30:25Z",
    "url": "https://github.com/termux/termux-app/commit/26e0fa2b9e9c0e69d83844ab9cc0af22d9203037",
    "details": {
      "sha": "8c871a449af257e4b982ad3805434236d4095e61",
      "filename": "app/src/main/java/com/termux/app/activities/SettingsActivity.java",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/termux/termux-app/blob/26e0fa2b9e9c0e69d83844ab9cc0af22d9203037/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Factivities%2FSettingsActivity.java",
      "raw_url": "https://github.com/termux/termux-app/raw/26e0fa2b9e9c0e69d83844ab9cc0af22d9203037/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Factivities%2FSettingsActivity.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Factivities%2FSettingsActivity.java?ref=26e0fa2b9e9c0e69d83844ab9cc0af22d9203037",
      "patch": "@@ -60,12 +60,17 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n \n             setPreferencesFromResource(R.xml.root_preferences, rootKey);\n \n-            configureTermuxAPIPreference(context);\n-            configureTermuxFloatPreference(context);\n-            configureTermuxTaskerPreference(context);\n-            configureTermuxWidgetPreference(context);\n-            configureAboutPreference(context);\n-            configureDonatePreference(context);\n+            new Thread() {\n+                @Override\n+                public void run() {\n+                    configureTermuxAPIPreference(context);\n+                    configureTermuxFloatPreference(context);\n+                    configureTermuxTaskerPreference(context);\n+                    configureTermuxWidgetPreference(context);\n+                    configureAboutPreference(context);\n+                    configureDonatePreference(context);\n+                }\n+            }.start();\n         }\n \n         private void configureTermuxAPIPreference(@NonNull Context context) {",
      "parent_sha": "d25f7afd977dfc9ba455f9b30b3e62b62d489235"
    }
  },
  {
    "oid": "c8a74dc58898ffee1d1207a125f2b4000d20b39b",
    "message": "feat(KeyHandler): respect modifiers with PgUp and PgDn",
    "date": "2022-10-24T02:28:37Z",
    "url": "https://github.com/termux/termux-app/commit/c8a74dc58898ffee1d1207a125f2b4000d20b39b",
    "details": {
      "sha": "e6323c5992d8a94e43a0031e9cc47f32b36e28a3",
      "filename": "terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/termux/termux-app/blob/c8a74dc58898ffee1d1207a125f2b4000d20b39b/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FKeyHandler.java",
      "raw_url": "https://github.com/termux/termux-app/raw/c8a74dc58898ffee1d1207a125f2b4000d20b39b/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FKeyHandler.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FKeyHandler.java?ref=c8a74dc58898ffee1d1207a125f2b4000d20b39b",
      "patch": "@@ -227,9 +227,9 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n                 return transformForModifiers(\"\\033[3\", keyMode, '~');\n \n             case KEYCODE_PAGE_UP:\n-                return \"\\033[5~\";\n+                return transformForModifiers(\"\\033[5\", keyMode, '~');\n             case KEYCODE_PAGE_DOWN:\n-                return \"\\033[6~\";\n+                return transformForModifiers(\"\\033[6\", keyMode, '~');\n             case KEYCODE_DEL:\n                 String prefix = ((keyMode & KEYMOD_ALT) == 0) ? \"\" : \"\\033\";\n                 // Just do what xterm and gnome-terminal does:",
      "parent_sha": "20dee0e9407f71c5189bb075fc32828c472132e1"
    }
  },
  {
    "oid": "6e6da752bdcd01aa219fe7eee7a79e41ef25c022",
    "message": "Fixed: Fix copy&paste error in areHardwareKeyboardShortcutsDisabled\n\nFixes 829cc3986831 (\"Allow users to disable hardware keyboard\nshortcuts\").\n\nReported-by: @amogusissofunnyhahalmaogenzhumorbelike",
    "date": "2022-01-22T20:36:41Z",
    "url": "https://github.com/termux/termux-app/commit/6e6da752bdcd01aa219fe7eee7a79e41ef25c022",
    "details": {
      "sha": "d883884e68c3f2b06cff7a05c43c2d29064d504f",
      "filename": "termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/6e6da752bdcd01aa219fe7eee7a79e41ef25c022/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fsettings%2Fproperties%2FTermuxSharedProperties.java",
      "raw_url": "https://github.com/termux/termux-app/raw/6e6da752bdcd01aa219fe7eee7a79e41ef25c022/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fsettings%2Fproperties%2FTermuxSharedProperties.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fsettings%2Fproperties%2FTermuxSharedProperties.java?ref=6e6da752bdcd01aa219fe7eee7a79e41ef25c022",
      "patch": "@@ -512,7 +512,7 @@ public static String getVolumeKeysBehaviourInternalPropertyValueFromValue(String\n \n \n     public boolean areHardwareKeyboardShortcutsDisabled() {\n-        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS, true);\n     }\n \n     public boolean areTerminalSessionChangeToastsDisabled() {",
      "parent_sha": "6d60bc669b721c973a7e31d5f1c7c790ae976ba2"
    }
  },
  {
    "oid": "d03e420e75cb25aca57478a0323a6675b36ade23",
    "message": "Use LEFT instead of arrow keys in config, and include arrows characters for special keys (will be easily changed in the properties after)",
    "date": "2018-08-28T00:34:36Z",
    "url": "https://github.com/termux/termux-app/commit/d03e420e75cb25aca57478a0323a6675b36ade23",
    "details": {
      "sha": "b50802d84a4d53a39b1fc12289937ffe7c79ff63",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 211,
      "deletions": 73,
      "changes": 284,
      "blob_url": "https://github.com/termux/termux-app/blob/d03e420e75cb25aca57478a0323a6675b36ade23/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/d03e420e75cb25aca57478a0323a6675b36ade23/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=d03e420e75cb25aca57478a0323a6675b36ade23",
      "patch": "@@ -8,6 +8,9 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.ScheduledExecutorService;\n \n+import java.util.Map;\n+import java.util.HashMap;\n+\n import android.view.HapticFeedbackConstants;\n import android.view.KeyEvent;\n import android.view.MotionEvent;\n@@ -29,81 +32,70 @@ public final class ExtraKeysView extends GridLayout {\n \n     private static final int TEXT_COLOR = 0xFFFFFFFF;\n     private static final int BUTTON_COLOR = 0x00000000;\n+    private static final int INTERESTING_COLOR = 0xFF80DEEA;\n     private static final int BUTTON_PRESSED_COLOR = 0x7FFFFFFF;\n-\n+    \n     public ExtraKeysView(Context context, AttributeSet attrs) {\n         super(context, attrs);\n     }\n-\n-    static void sendKey(View view, String keyName) {\n-        int keyCode = 0;\n-        String chars = null;\n-        switch (keyName) {\n-            case \"ESC\":\n-                keyCode = KeyEvent.KEYCODE_ESCAPE;\n-                break;\n-            case \"TAB\":\n-                keyCode = KeyEvent.KEYCODE_TAB;\n-                break;\n-            case \"HOME\":\n-                keyCode = KeyEvent.KEYCODE_MOVE_HOME;\n-                break;\n-            case \"END\":\n-                keyCode = KeyEvent.KEYCODE_MOVE_END;\n-                break;\n-            case \"PGUP\":\n-                keyCode = KeyEvent.KEYCODE_PAGE_UP;\n-                break;\n-            case \"PGDN\":\n-                keyCode = KeyEvent.KEYCODE_PAGE_DOWN;\n-                break;\n-            case \"INS\":\n-                keyCode = KeyEvent.KEYCODE_INSERT;\n-                break;\n-            case \"DEL\":\n-                keyCode = KeyEvent.KEYCODE_FORWARD_DEL;\n-                break;\n-            case \"\u2191\":\n-                keyCode = KeyEvent.KEYCODE_DPAD_UP;\n-                break;\n-            case \"\u2190\":\n-                keyCode = KeyEvent.KEYCODE_DPAD_LEFT;\n-                break;\n-            case \"\u2192\":\n-                keyCode = KeyEvent.KEYCODE_DPAD_RIGHT;\n-                break;\n-            case \"\u2193\":\n-                keyCode = KeyEvent.KEYCODE_DPAD_DOWN;\n-                break;\n-            case \"\u21b2\":\n-                keyCode = KeyEvent.KEYCODE_ENTER;\n-                break;\n-            case \"\u2015\":\n-                chars = \"-\";\n-                break;\n-            case \"-\":\n-                chars = \"-\";\n-                break;\n-            default:\n-                chars = keyName;\n+    \n+    /**\n+     * HashMap that implements Python dict.get(key, default) function.\n+     * Default java.util .get(key) is then the same as .get(key, null);\n+     */\n+    static class CleverMap<K,V> extends HashMap<K,V> {\n+        V get(K key, V defaultValue) {\n+            if(containsKey(key))\n+                return get(key);\n+            else\n+                return defaultValue;\n         }\n-\n+    }\n+    \n+    static CharDisplayMap extends CharDisplayMap {}\n+    \n+    /**\n+     * Keys are displayed in a natural looking way, like \"\u2192\" for \"RIGHT\"\n+     */\n+    static final Map<String, Integer> keyCodesForString = new HashMap<String, Integer>() {{\n+        put(\"ESC\", KeyEvent.KEYCODE_ESCAPE);\n+        put(\"TAB\", KeyEvent.KEYCODE_TAB);\n+        put(\"HOME\", KeyEvent.KEYCODE_MOVE_HOME);\n+        put(\"END\", KeyEvent.KEYCODE_MOVE_END);\n+        put(\"PGUP\", KeyEvent.KEYCODE_PAGE_UP);\n+        put(\"PGDN\", KeyEvent.KEYCODE_PAGE_DOWN);\n+        put(\"INS\", KeyEvent.KEYCODE_INSERT);\n+        put(\"DEL\", KeyEvent.KEYCODE_FORWARD_DEL);\n+        put(\"BKSP\", KeyEvent.KEYCODE_BACKWARD_DEL);\n+        put(\"UP\", KeyEvent.KEYCODE_DPAD_UP);\n+        put(\"LEFT\", KeyEvent.KEYCODE_DPAD_LEFT);\n+        put(\"RIGHT\", KeyEvent.KEYCODE_DPAD_RIGHT);\n+        put(\"DOWN\", KeyEvent.KEYCODE_DPAD_DOWN);\n+        put(\"ENTER\", KeyEvent.KEYCODE_ENTER);\n+    }};\n+    \n+    static void sendKey(View view, String keyName) {\n         TerminalView terminalView = view.findViewById(R.id.terminal_view);\n-        if (keyCode > 0) {\n+        if (keyCodesForString.containsKey(keyName)) {\n+            int keyCode = keyCodesForString.get(keyName);\n             terminalView.onKeyDown(keyCode, new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n-//          view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n+            // view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n         } else {\n+            // not a control char\n             TerminalSession session = terminalView.getCurrentSession();\n-            if (session != null) session.write(chars);\n+            if (session != null)\n+                session.write(KeyName);\n         }\n     }\n \n     private ToggleButton controlButton;\n     private ToggleButton altButton;\n     private ToggleButton fnButton;\n+    \n     private boolean hasControlButton = false;\n     private boolean hasAltButton = false;\n     private boolean hasFnButton = false;\n+    \n     private ScheduledExecutorService scheduledExecutor;\n     private PopupWindow popupWindow;\n     private int longPressCount;\n@@ -169,24 +161,167 @@ void popup(View view, String text) {\n         popupWindow.setFocusable(false);\n         popupWindow.showAsDropDown(view, 0, -2 * height);\n     }\n-\n-    void reload(final String[][] buttons) {\n+    \n+    static final CharDisplayMap classicArrowsDisplay = new CharDisplayMap() {{\n+        // classic arrow keys (for \u25c0 \u25b6 \u25b2 \u25bc @see arrowVariationDisplay) \n+        put(\"LEFT\", \"\u2190\"); // U+2190 \u2190 LEFTWARDS ARROW\n+        put(\"RIGHT\", \"\u2192\"); // U+2192 \u2192 RIGHTWARDS ARROW\n+        put(\"UP\", \"\u2191\"); // U+2191 \u2191 UPWARDS ARROW\n+        put(\"DOWN\", \"\u2193\"); // U+2193 \u2193 DOWNWARDS ARROW\n+    }};\n+    \n+    static final CharDisplayMap wellKnownCharactersDisplay = new CharDisplayMap() {{\n+        // well known characters // https://en.wikipedia.org/wiki/{Enter_key, Tab_key, Delete_key}\n+        put(\"ENTER\", \"\u21b2\"); // U+21B2 \u21b2 DOWNWARDS ARROW WITH TIP LEFTWARDS\n+        put(\"TAB\", \"\u21b9\"); // U+21B9 \u21b9 LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR\n+        put(\"BKSP\", \"\u232b\"); // U+232B \u232b ERASE TO THE LEFT sometimes seen and easy to understand\n+        put(\"DEL\", \"\u2326\"); // U+2326 \u2326 ERASE TO THE RIGHT not well known but easy to understand\n+        \n+    static final CharDisplayMap lessKnownCharactersDisplay = new CharDisplayMap() {{\n+        // https://en.wikipedia.org/wiki/{Home_key, End_key, Page_Up_and_Page_Down_keys}\n+        // home key can mean \"goto the beginning of line\" or \"goto first page\" depending on context, hence the diagonal\n+        put(\"HOME\", \"\u21f1\"); // from IEC 9995 // U+21F1 \u21f1 NORTH WEST ARROW TO CORNER\n+        put(\"END\", \"\u21f2\"); // from IEC 9995 // \u21f2 // U+21F2 \u21f2 SOUTH EAST ARROW TO CORNER\n+        put(\"PGUP\", \"\u21d1\"); // no ISO character exists, U+21D1 \u21d1 UPWARDS DOUBLE ARROW will do the trick\n+        put(\"PGDN\", \"\u21d3\"); // no ISO character exists, U+21D3 \u21d3 DOWNWARDS DOUBLE ARROW will do the trick\n+    }};\n+    \n+    static final CharDisplayMap arrowTriangleVariationDisplay = new CharDisplayMap() {{\n+        // alternative to classic arrow keys \n+        put(\"LEFT\", \"\u25c0\"); // U+25C0 \u25c0 BLACK LEFT-POINTING TRIANGLE\n+        put(\"RIGHT\", \"\u25b6\"); // U+25B6 \u25b6 BLACK RIGHT-POINTING TRIANGLE\n+        put(\"UP\", \"\u25b2\"); // U+25B2 \u25b2 BLACK UP-POINTING TRIANGLE\n+        put(\"DOWN\", \"\u25bc\"); // U+25BC \u25bc BLACK DOWN-POINTING TRIANGLE\n+    }};\n+    \n+    static final CharDisplayMap notKnownIsoCharacters = new CharDisplayMap() {{\n+        // Control chars that are more clear as text // https://en.wikipedia.org/wiki/{Function_key, Alt_key, Control_key, Esc_key}\n+        // put(\"FN\", \"FN\"); // no ISO character exists\n+        put(\"CTRL\", \"\u2388\"); // ISO character \"U+2388 \u2388 HELM SYMBOL\" is unknown to people and never printed on computers, however \"U+25C7 \u25c7 WHITE DIAMOND\" is a nice presentation, and \"^\" for terminal app and mac is often used \n+        put(\"ALT\", \"\u2387\"); // ISO character \"U+2387 \u2387 ALTERNATIVE KEY SYMBOL'\" is unknown to people and only printed as the Option key \"\u2325\" on Mac computer\n+        put(\"ESC\", \"\u238b\"); // ISO character \"U+238B \u238b BROKEN CIRCLE WITH NORTHWEST ARROW\" is unknown to people and not often printed on computers \n+    }};\n+    \n+    static final CharDisplayMap nicerLookingDisplay = new CharDisplayMap() {{\n+        // nicer looking for most cases\n+        put(\"-\", \"\u2015\"); // U+2015 \u2015 HORIZONTAL BAR\n+    }};\n+    \n+    /**\n+     * Keys are displayed in a natural looking way, like \"\u2192\" for \"RIGHT\" or \"\u21b2\" for ENTER\n+     */\n+    public static final CharDisplayMap defaultCharDisplay = new CharDisplayMap() {{\n+        putAll(classicArrowsDisplay);\n+        putAll(wellKnownCharactersDisplay);\n+        putAll(nicerLookingDisplay);\n+        // all other characters are displayed as themselves\n+    }};\n+    \n+    public static final CharDisplayMap lotsOfArrowsCharDisplay = new CharDisplayMap() {{\n+        putAll(classicArrowsDisplay);\n+        putAll(wellKnownCharactersDisplay);\n+        putAll(lessKnownCharactersDisplay); // NEW\n+        putAll(nicerLookingDisplay);\n+    }};\n+    \n+    public static final CharDisplayMap arrowsOnlyCharDisplay = new CharDisplayMap() {{\n+        putAll(classicArrowsDisplay);\n+        // putAll(wellKnownCharactersDisplay); // REMOVED\n+        // putAll(lessKnownCharactersDisplay); // REMOVED\n+        putAll(nicerLookingDisplay);\n+    }};\n+    \n+    public static final CharDisplayMap fullIsoCharDisplay = new CharDisplayMap() {{\n+        putAll(classicArrowsDisplay);\n+        putAll(wellKnownCharactersDisplay);\n+        putAll(lessKnownCharactersDisplay); // NEW\n+        putAll(nicerLookingDisplay);\n+        putAll(notKnownIsoCharacters); // NEW\n+    }};\n+    \n+    /**\n+     * Some people might call our keys differently\n+     */\n+    static final CharDisplayMap controlCharsAliases = new CharDisplayMap() {{\n+        put(\"ESCAPE\", \"ESC\");\n+        put(\"CONTROL\", \"CTRL\");\n+        put(\"RETURN\", \"ENTER\"); // Technically different keys, but most applications won't see the difference\n+        put(\"FUNCTION\", \"FN\");\n+        // no alias for ALT\n+        \n+        // Directions are sometimes written as first and last letter for brevety\n+        put(\"LT\", \"LEFT\"); \n+        put(\"RT\", \"RIGHT\");\n+        put(\"DN\", \"DOWN\");\n+        // put(\"UP\", \"UP\"); well, the direction is already two letters\n+        \n+        put(\"PAGEUP\", \"PGUP\");\n+        put(\"PAGE_UP\", \"PGUP\");\n+        put(\"PAGE UP\", \"PGUP\");\n+        put(\"PAGE-UP\", \"PGUP\");\n+        \n+        // no alias for HOME\n+        // no alias for END\n+        \n+        put(\"PAGEDOWN\", \"PGDN\");\n+        put(\"PAGE_DOWN\", \"PGDN\");\n+        put(\"PAGE_DOWN\", \"PGDN\");\n+        put(\"PAGE-DOWN\", \"PGDN\");\n+        \n+        put(\"DELETE\", \"DEL\");\n+        put(\"BACKSPACE\", \"BKSP\");\n+    }};\n+    \n+    /**\n+     * Applies the 'controlCharsAliases' mapping to all the strings in *buttons*\n+     * Modifies the array, doesn't return a new one.\n+     */\n+    void replaceAliases(String[][] buttons) {\n+        for(int i = 0; i < buttons.length; i++)\n+            for(int j = 0; j < buttons[i].length; j++)\n+                buttons[i][j] = controlCharsAliases.get(buttons[i][j], buttons[i][j]);\n+    }\n+    \n+    /**\n+     * General util function to compute the longest column length in a matrix.\n+     */\n+    static int maximumLength(String[][] matrix) {\n+        int m = 0;\n+        for (int i = 0; i < matrix.length; i++)\n+            m = Math.max(m, matrix[i].length);\n+        return m;\n+    }\n+    \n+    /**\n+     * Reload the view given parameters in termux.properties\n+     *\n+     * @buttons matrix of String as defined in termux.properties extrakeys\n+     * Can Contain The Strings CTRL ALT TAB FN ENTER LEFT RIGHT UP DOWN or normal strings\n+     * Some aliases are possible like RETURN for ENTER, LT for LEFT and more (@see controlCharsAliases for the whole list).\n+     * Any string of length > 1 in total Uppercase will print a warning\n+     *\n+     * Examples:\n+     * \"ENTER\" will trigger the ENTER keycode\n+     * \"\u2192\" will input a \"\u2192\" character\n+     * \"\u2212\" will input a \"\u2212\" character\n+     * \"-_-\" will input the string \"-_-\"\n+     */\n+    void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n         altButton = controlButton = fnButton = null;\n         removeAllViews();\n+        \n+        replaceAliases(buttons); // modifies the array\n \n         final int rows = buttons.length;\n-        int mx = 0;\n-        for (int row = 0; row < rows; row++) {\n-            if(buttons[row].length > mx) mx = buttons[row].length;\n-        }\n-        final int cols = mx;\n+        final int cols = maximumLength(buttons);\n \n         setRowCount(rows);\n         setColumnCount(cols);\n \n         for (int row = 0; row < rows; row++) {\n             for (int col = 0; col < cols; col++) {\n                 final String buttonText = (buttons[row][col] == null ? \" \" : buttons[row][col]);\n+                // if (buttons[row][col] == null) then the button will be an empty button outputting a space character\n \n                 Button button;\n                 switch (buttonText) {\n@@ -209,8 +344,10 @@ void reload(final String[][] buttons) {\n                         button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         break;\n                 }\n-\n-                button.setText(buttonText);\n+                \n+                final String displayedText = charDisplayMap.get(buttonText, buttonText);\n+                \n+                button.setText(displayedText);\n                 button.setTextColor(TEXT_COLOR);\n                 button.setPadding(0, 0, 0, 0);\n \n@@ -226,7 +363,7 @@ public void onClick(View v) {\n                             case \"FN\":\n                                 ToggleButton self = (ToggleButton) finalButton;\n                                 self.setChecked(self.isChecked());\n-                                self.setTextColor(self.isChecked() ? 0xFF80DEEA : TEXT_COLOR);\n+                                self.setTextColor(self.isChecked() ? INTERESTING_COLOR : TEXT_COLOR);\n                                 break;\n                             default:\n                                 sendKey(root, buttonText);\n@@ -243,7 +380,7 @@ public boolean onTouch(View v, MotionEvent event) {\n                             case MotionEvent.ACTION_DOWN:\n                                 longPressCount = 0;\n                                 v.setBackgroundColor(BUTTON_PRESSED_COLOR);\n-                                if (\"\u2191\u2193\u2190\u2192\".contains(buttonText)) {\n+                                if (Arrays.asList(\"UP\", \"DOWN\", \"LEFT\", \"RIGHT\").contains(buttonText)) {\n                                     scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n                                     scheduledExecutor.scheduleWithFixedDelay(new Runnable() {\n                                         @Override\n@@ -255,10 +392,11 @@ public void run() {\n                                 }\n                                 return true;\n                             case MotionEvent.ACTION_MOVE:\n-                                if (\"\u2015/-\".contains(buttonText)) {\n-                                    if (popupWindow == null && event.getY() < 0) {\n+                                // These two keys have a Move-Up button appearing\n+                                if (Arrays.asList(\"/\", \"-\").contains(buttonText)) {\n+                                    if (popupWindow == null &gfv& event.getY() < 0) {\n                                         v.setBackgroundColor(BUTTON_COLOR);\n-                                        String text = \"\u2015\".equals(buttonText) ? \"|\" : \"\\\\\";\n+                                        String text = \"-\".equals(buttonText) ? \"|\" : \"\\\\\";\n                                         popup(v, text);\n                                     }\n                                     if (popupWindow != null && event.getY() > 0) {\n@@ -276,11 +414,11 @@ public void run() {\n                                     scheduledExecutor = null;\n                                 }\n                                 if (longPressCount == 0) {\n-                                    if (popupWindow != null && \"\u2015/-\".contains(buttonText)) {\n+                                    if (popupWindow != null && \"/-\".contains(buttonText)) {\n                                         popupWindow.setContentView(null);\n                                         popupWindow.dismiss();\n                                         popupWindow = null;\n-                                        sendKey(root, \"\u2015\".equals(buttonText) ? \"|\" : \"\\\\\");\n+                                        sendKey(root, \"-\".equals(buttonText) ? \"|\" : \"\\\\\");\n                                     } else {\n                                         v.performClick();\n                                     }",
      "parent_sha": "06968a929591a6f77389053b31f8a634042c70cb"
    }
  },
  {
    "oid": "3b4ece6bd8970df992662c39845add4a1a9a60c4",
    "message": "Selection mode fling",
    "date": "2019-10-05T10:30:54Z",
    "url": "https://github.com/termux/termux-app/commit/3b4ece6bd8970df992662c39845add4a1a9a60c4",
    "details": {
      "sha": "09eae230cb89d4cd52cb6a2277f9745b542c6cc6",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/3b4ece6bd8970df992662c39845add4a1a9a60c4/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/3b4ece6bd8970df992662c39845add4a1a9a60c4/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=3b4ece6bd8970df992662c39845add4a1a9a60c4",
      "patch": "@@ -153,7 +153,7 @@ public boolean onScale(float focusX, float focusY, float scale) {\n \n             @Override\n             public boolean onFling(final MotionEvent e2, float velocityX, float velocityY) {\n-                if (mEmulator == null || mIsSelectingText) return true;\n+                if (mEmulator == null) return true;\n                 // Do not start scrolling until last fling has been taken care of:\n                 if (!mScroller.isFinished()) return true;\n ",
      "parent_sha": "35a4fdacbe4d75bae0d648cf66a6526d0daee313"
    }
  },
  {
    "oid": "0c9b85a4f97c3e06c29792c4ae4faa2cfac44074",
    "message": "Micro optimization for StreamGobbler",
    "date": "2021-04-09T21:32:21Z",
    "url": "https://github.com/termux/termux-app/commit/0c9b85a4f97c3e06c29792c4ae4faa2cfac44074",
    "details": {
      "sha": "ede6145c4942f449300d3a6f71634843adaf82b1",
      "filename": "termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/termux/termux-app/blob/0c9b85a4f97c3e06c29792c4ae4faa2cfac44074/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2FStreamGobbler.java",
      "raw_url": "https://github.com/termux/termux-app/raw/0c9b85a4f97c3e06c29792c4ae4faa2cfac44074/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2FStreamGobbler.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2FStreamGobbler.java?ref=0c9b85a4f97c3e06c29792c4ae4faa2cfac44074",
      "patch": "@@ -168,12 +168,13 @@ public StreamGobbler(@NonNull String shell, @NonNull InputStream inputStream, @N\n     public void run() {\n         // keep reading the InputStream until it ends (or an error occurs)\n         // optionally pausing when a command is executed that consumes the InputStream itself\n-        int logLevel = Logger.getLogLevel();\n+        int currentLogLevel = Logger.getLogLevel();\n+        int logLevelVerbose = Logger.LOG_LEVEL_VERBOSE;\n         try {\n             String line;\n             while ((line = reader.readLine()) != null) {\n \n-                if(logLevel >= Logger.LOG_LEVEL_VERBOSE)\n+                if(currentLogLevel >= logLevelVerbose)\n                     Logger.logVerbose(LOG_TAG, String.format(Locale.ENGLISH, \"[%s] %s\", shell, line)); // This will get truncated by LOGGER_ENTRY_MAX_LEN, likely 4KB\n \n                 if (stringWriter != null) stringWriter.append(line).append(\"\\n\");",
      "parent_sha": "62a2104adccd98e63ac111c0728922dfae288d5d"
    }
  },
  {
    "oid": "f0f6927273b964c49a0efeb52badb43204fa0187",
    "message": "Rename variable",
    "date": "2021-06-12T19:29:52Z",
    "url": "https://github.com/termux/termux-app/commit/f0f6927273b964c49a0efeb52badb43204fa0187",
    "details": {
      "sha": "7961920146002d59905af24f1164b189e07e3241",
      "filename": "termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/termux/termux-app/blob/f0f6927273b964c49a0efeb52badb43204fa0187/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/f0f6927273b964c49a0efeb52badb43204fa0187/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java?ref=f0f6927273b964c49a0efeb52badb43204fa0187",
      "patch": "@@ -7,7 +7,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.21.0\n+ * Version: v0.23.0\n  *\n  * Changelog\n  *\n@@ -150,6 +150,8 @@\n  * - 0.22.0 (2021-05-13)\n  *      - Added `TERMUX_DONATE_URL`.\n  *\n+ * - 0.23.0 (2021-06-12)\n+ *      - Rename `INTERNAL_PRIVATE_APP_DATA_DIR_PATH` to `TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH`.\n  */\n \n /**\n@@ -464,14 +466,14 @@ public final class TermuxConstants {\n \n     /** Termux app internal private app data directory path */\n     @SuppressLint(\"SdCardPath\")\n-    public static final String INTERNAL_PRIVATE_APP_DATA_DIR_PATH = \"/data/data/\" + TERMUX_PACKAGE_NAME; // Default: \"/data/data/com.termux\"\n+    public static final String TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH = \"/data/data/\" + TERMUX_PACKAGE_NAME; // Default: \"/data/data/com.termux\"\n     /** Termux app internal private app data directory */\n-    public static final File INTERNAL_PRIVATE_APP_DATA_DIR = new File(INTERNAL_PRIVATE_APP_DATA_DIR_PATH);\n+    public static final File TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR = new File(TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH);\n \n \n \n     /** Termux app Files directory path */\n-    public static final String TERMUX_FILES_DIR_PATH = INTERNAL_PRIVATE_APP_DATA_DIR_PATH + \"/files\"; // Default: \"/data/data/com.termux/files\"\n+    public static final String TERMUX_FILES_DIR_PATH = TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH + \"/files\"; // Default: \"/data/data/com.termux/files\"\n     /** Termux app Files directory */\n     public static final File TERMUX_FILES_DIR = new File(TERMUX_FILES_DIR_PATH);\n ",
      "parent_sha": "0fb18c0c8bc978c7487a2f8350ca05ae412c18dd"
    }
  },
  {
    "oid": "8c220eaaeaafa96c416c3ca0b2300914f8c71218",
    "message": "Do not call long press listener when scaling",
    "date": "2017-04-02T12:07:19Z",
    "url": "https://github.com/termux/termux-app/commit/8c220eaaeaafa96c416c3ca0b2300914f8c71218",
    "details": {
      "sha": "e8d18e486341e0cae9becd2240b52dca46d6b073",
      "filename": "view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/termux/termux-app/blob/8c220eaaeaafa96c416c3ca0b2300914f8c71218/view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/8c220eaaeaafa96c416c3ca0b2300914f8c71218/view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=8c220eaaeaafa96c416c3ca0b2300914f8c71218",
      "patch": "@@ -188,8 +188,9 @@ public boolean onDoubleTap(MotionEvent e) {\n \n             @Override\n             public void onLongPress(MotionEvent e) {\n+                if (mGestureRecognizer.isInProgress()) return;\n                 if (mOnKeyListener.onLongPress(e)) return;\n-                if (!mGestureRecognizer.isInProgress() && !mIsSelectingText) {\n+                if (!mIsSelectingText) {\n                     performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n                     toggleSelectingText(e);\n                 }",
      "parent_sha": "0142e1ed0eb180d4e2b361fb2e953e49cc21e713"
    }
  },
  {
    "oid": "7c262b8d9917d953c4c899089a88b08899946737",
    "message": "Fixed: Fix toggle toolbar not working due to accidental comment of function in a56ed577\n\nCloses #3258",
    "date": "2023-08-14T15:45:30Z",
    "url": "https://github.com/termux/termux-app/commit/7c262b8d9917d953c4c899089a88b08899946737",
    "details": {
      "sha": "308d1f0b2b5eb0b6152a8148226412f03ff7aa53",
      "filename": "app/src/main/java/com/termux/app/TermuxActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/7c262b8d9917d953c4c899089a88b08899946737/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "raw_url": "https://github.com/termux/termux-app/raw/7c262b8d9917d953c4c899089a88b08899946737/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java?ref=7c262b8d9917d953c4c899089a88b08899946737",
      "patch": "@@ -590,7 +590,7 @@ private void setToggleKeyboardView() {\n         });\n \n         findViewById(R.id.toggle_keyboard_button).setOnLongClickListener(v -> {\n-            //toggleTerminalToolbar();\n+            toggleTerminalToolbar();\n             return true;\n         });\n     }",
      "parent_sha": "06230f95dfa05cf4822aa619ed4328cb0f092ef1"
    }
  },
  {
    "oid": "fc15bd23553f66e22c160603cf23cd568bfe2fd2",
    "message": "Documents provider: Remove FLAG_SUPPORTS_RECENTS",
    "date": "2016-04-22T00:51:13Z",
    "url": "https://github.com/termux/termux-app/commit/fc15bd23553f66e22c160603cf23cd568bfe2fd2",
    "details": {
      "sha": "7a6f09d411bef171204ebfecfd6e872641c50bc9",
      "filename": "app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/fc15bd23553f66e22c160603cf23cd568bfe2fd2/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxDocumentsProvider.java",
      "raw_url": "https://github.com/termux/termux-app/raw/fc15bd23553f66e22c160603cf23cd568bfe2fd2/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxDocumentsProvider.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxDocumentsProvider.java?ref=fc15bd23553f66e22c160603cf23cd568bfe2fd2",
      "patch": "@@ -64,7 +64,7 @@ public Cursor queryRoots(String[] projection) throws FileNotFoundException {\n         row.add(Root.COLUMN_ROOT_ID, getDocIdForFile(BASE_DIR));\n         row.add(Root.COLUMN_DOCUMENT_ID, getDocIdForFile(BASE_DIR));\n         row.add(Root.COLUMN_SUMMARY, null);\n-        row.add(Root.COLUMN_FLAGS, Root.FLAG_SUPPORTS_CREATE | Root.FLAG_SUPPORTS_RECENTS | Root.FLAG_SUPPORTS_SEARCH);\n+        row.add(Root.COLUMN_FLAGS, Root.FLAG_SUPPORTS_CREATE | Root.FLAG_SUPPORTS_SEARCH);\n         row.add(Root.COLUMN_TITLE, applicationName);\n         row.add(Root.COLUMN_MIME_TYPES, ALL_MIME_TYPES);\n         row.add(Root.COLUMN_AVAILABLE_BYTES, BASE_DIR.getFreeSpace());",
      "parent_sha": "a87cbdd70c872288a7489005ba83510410834fa0"
    }
  },
  {
    "oid": "491240ee3fd217b1d5c401e57ed4ef9f377f94b6",
    "message": "Fix MockTerminalOutput to implement all methods",
    "date": "2016-06-08T14:09:42Z",
    "url": "https://github.com/termux/termux-app/commit/491240ee3fd217b1d5c401e57ed4ef9f377f94b6",
    "details": {
      "sha": "fd0e55a96286adf05b37f859f0767901df05107b",
      "filename": "app/src/test/java/com/termux/terminal/TerminalTestCase.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/termux/termux-app/blob/491240ee3fd217b1d5c401e57ed4ef9f377f94b6/app%2Fsrc%2Ftest%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalTestCase.java",
      "raw_url": "https://github.com/termux/termux-app/raw/491240ee3fd217b1d5c401e57ed4ef9f377f94b6/app%2Fsrc%2Ftest%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalTestCase.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Ftest%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalTestCase.java?ref=491240ee3fd217b1d5c401e57ed4ef9f377f94b6",
      "patch": "@@ -19,6 +19,7 @@ public static class MockTerminalOutput extends TerminalOutput {\n \t\tpublic final List<ChangedTitle> titleChanges = new ArrayList<>();\n \t\tpublic final List<String> clipboardPuts = new ArrayList<>();\n \t\tpublic int bellsRung = 0;\n+        public int colorsChanged = 0;\n \n \t\t@Override\n \t\tpublic void write(byte[] data, int offset, int count) {\n@@ -49,7 +50,12 @@ public void clipboardText(String text) {\n \t\tpublic void onBell() {\n \t\t\tbellsRung++;\n \t\t}\n-\t}\n+\n+        @Override\n+        public void onColorsChanged() {\n+            colorsChanged++;\n+        }\n+    }\n \n \tpublic TerminalEmulator mTerminal;\n \tpublic MockTerminalOutput mOutput;",
      "parent_sha": "599aaff723ee71d1696e2903741566cbee3a941c"
    }
  },
  {
    "oid": "25d21e9d2e94b87b62597b16636c489de98e922f",
    "message": "Fixed: Fix wrong input type selected if toolbar is switched back to extra keys after tapping terminal if in text input mode\n\nCloses #2503",
    "date": "2022-03-17T00:30:25Z",
    "url": "https://github.com/termux/termux-app/commit/25d21e9d2e94b87b62597b16636c489de98e922f",
    "details": {
      "sha": "47e7debf44053764093d4391f1865e2d050859ef",
      "filename": "app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/25d21e9d2e94b87b62597b16636c489de98e922f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2FTermuxTerminalViewClient.java",
      "raw_url": "https://github.com/termux/termux-app/raw/25d21e9d2e94b87b62597b16636c489de98e922f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2FTermuxTerminalViewClient.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2FTermuxTerminalViewClient.java?ref=25d21e9d2e94b87b62597b16636c489de98e922f",
      "patch": "@@ -222,7 +222,7 @@ public boolean shouldUseCtrlSpaceWorkaround() {\n \n     @Override\n     public boolean isTerminalViewSelected() {\n-        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected();\n+        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected() || mActivity.getTerminalView().hasFocus();\n     }\n \n ",
      "parent_sha": "dd378738e31a3577c40cd81b727dd689b19f1796"
    }
  },
  {
    "oid": "f74293e8fb4eca823c5aaf75699008af9b8f42d3",
    "message": "Use extra-keys spelling and correct default setting",
    "date": "2018-08-28T00:34:36Z",
    "url": "https://github.com/termux/termux-app/commit/f74293e8fb4eca823c5aaf75699008af9b8f42d3",
    "details": {
      "sha": "cfe9491a28adc29d45d6b4fc3cce4a0aa413f27b",
      "filename": "app/src/main/java/com/termux/app/TermuxPreferences.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/termux/termux-app/blob/f74293e8fb4eca823c5aaf75699008af9b8f42d3/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java",
      "raw_url": "https://github.com/termux/termux-app/raw/f74293e8fb4eca823c5aaf75699008af9b8f42d3/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxPreferences.java?ref=f74293e8fb4eca823c5aaf75699008af9b8f42d3",
      "patch": "@@ -45,6 +45,13 @@ final class TermuxPreferences {\n \n     boolean mBackIsEscape;\n     boolean mShowExtraKeys;\n+    \n+    /**\n+     * If value is not in the range [min, max], set it to either min or max.\n+     */\n+    static int clamp(int value, int min, int max) {\n+        return Math.min(Math.max(value, min), max);\n+    }\n \n     TermuxPreferences(Context context) {\n         reloadFromProperties(context);\n@@ -68,7 +75,7 @@ final class TermuxPreferences {\n         } catch (NumberFormatException | ClassCastException e) {\n             mFontSize = defaultFontSize;\n         }\n-        mFontSize = Math.max(MIN_FONTSIZE, Math.min(mFontSize, MAX_FONTSIZE));\n+        mFontSize = clamp(mFontSize, MIN_FONTSIZE, MAX_FONTSIZE); \n     }\n \n     boolean isShowExtraKeys() {\n@@ -134,7 +141,7 @@ public void reloadFromProperties(Context context) {\n                     break;\n             }\n             \n-            JSONArray arr = new JSONArray(props.getProperty(\"extrakeys\", \"[[\\\"ESC\\\",\\\"CTRL\\\",\\\"ALT\\\",\\\"TAB\\\",\\\"\u2015\\\",\\\"/\\\",\\\"|\\\"]]\"));\n+            JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[[\\\"ESC\\\",\\\"CTRL\\\",\\\"ALT\\\",\\\"TAB\\\",\\\"-\\\",\\\"/\\\",\\\"|\\\"]]\"));\n             mExtraKeys = new String[arr.length()][];\n             for(int i = 0; i < arr.length(); i++) {\n                 JSONArray line = arr.getJSONArray(i);",
      "parent_sha": "b99d09230569293825f83824cf56eaf653544c70"
    }
  },
  {
    "oid": "1bdf9bf2e3967315268c947fd98d48ebb7c1bf38",
    "message": "Change log level to warn from error when termux.properties file is missing",
    "date": "2021-03-23T23:57:35Z",
    "url": "https://github.com/termux/termux-app/commit/1bdf9bf2e3967315268c947fd98d48ebb7c1bf38",
    "details": {
      "sha": "d2dfc417ffdf09385c2bcdcee0b0da29c4d06357",
      "filename": "app/src/main/java/com/termux/app/settings/properties/SharedProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/1bdf9bf2e3967315268c947fd98d48ebb7c1bf38/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fsettings%2Fproperties%2FSharedProperties.java",
      "raw_url": "https://github.com/termux/termux-app/raw/1bdf9bf2e3967315268c947fd98d48ebb7c1bf38/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fsettings%2Fproperties%2FSharedProperties.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fsettings%2Fproperties%2FSharedProperties.java?ref=1bdf9bf2e3967315268c947fd98d48ebb7c1bf38",
      "patch": "@@ -230,7 +230,7 @@ public static Properties getPropertiesFromFile(Context context, File propertiesF\n         Properties properties = new Properties();\n \n         if (propertiesFile == null) {\n-            Logger.logError(LOG_TAG, \"Not loading properties since file is null\");\n+            Logger.logWarn(LOG_TAG, \"Not loading properties since file is null\");\n             return properties;\n         }\n ",
      "parent_sha": "92b804dc9cd7186228f59b7dceaba5fc93240c2f"
    }
  },
  {
    "oid": "e36c5294dbffa5d4be7c59e573a9c35f7402a9f0",
    "message": "Changed: Only show system chooser if ActivityNotFoundException is thrown when opening url",
    "date": "2021-09-08T03:46:29Z",
    "url": "https://github.com/termux/termux-app/commit/e36c5294dbffa5d4be7c59e573a9c35f7402a9f0",
    "details": {
      "sha": "030ce47dba096245773d8cf84eaf9ce73482fdcd",
      "filename": "termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/termux/termux-app/blob/e36c5294dbffa5d4be7c59e573a9c35f7402a9f0/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Finteract%2FShareUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/e36c5294dbffa5d4be7c59e573a9c35f7402a9f0/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Finteract%2FShareUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Finteract%2FShareUtils.java?ref=e36c5294dbffa5d4be7c59e573a9c35f7402a9f0",
      "patch": "@@ -2,6 +2,7 @@\n \n import android.Manifest;\n import android.app.Activity;\n+import android.content.ActivityNotFoundException;\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n@@ -97,9 +98,11 @@ public static void openURL(final Context context, final String url) {\n         Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n         try {\n             context.startActivity(intent);\n-        } catch (Exception e) {\n+        } catch (ActivityNotFoundException e) {\n             // If no activity found to handle intent, show system chooser\n             openSystemAppChooser(context, intent, context.getString(R.string.title_open_url_with));\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to open url \\\"\" + url + \"\\\"\", e);\n         }\n     }\n ",
      "parent_sha": "dd952a90ade33e77b30959abf9d71c80b9702ba7"
    }
  },
  {
    "oid": "19f838e3d13c0325786dada41873e0e354dfcc59",
    "message": "Show window if launched when hidden",
    "date": "2017-04-02T12:46:00Z",
    "url": "https://github.com/termux/termux-app/commit/19f838e3d13c0325786dada41873e0e354dfcc59",
    "details": {
      "sha": "54df909aa8ad42a313aafff7b37e82b21bd367c6",
      "filename": "float/src/main/java/com/termux/window/TermuxFloatService.java",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/termux/termux-app/blob/19f838e3d13c0325786dada41873e0e354dfcc59/float%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fwindow%2FTermuxFloatService.java",
      "raw_url": "https://github.com/termux/termux-app/raw/19f838e3d13c0325786dada41873e0e354dfcc59/float%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fwindow%2FTermuxFloatService.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/float%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fwindow%2FTermuxFloatService.java?ref=19f838e3d13c0325786dada41873e0e354dfcc59",
      "patch": "@@ -124,13 +124,12 @@ private Notification buildNotification() {\n     public int onStartCommand(Intent intent, int flags, int startId) {\n         String action = intent.getAction();\n         if (ACTION_HIDE.equals(action)) {\n-            mVisibleWindow = false;\n-            mFloatingWindow.setVisibility(View.GONE);\n-            ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).notify(NOTIFICATION_ID, buildNotification());\n+            setVisible(false);\n         } else if (ACTION_SHOW.equals(action)) {\n-            mFloatingWindow.setVisibility(View.VISIBLE);\n-            mVisibleWindow = true;\n-            ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).notify(NOTIFICATION_ID, buildNotification());\n+            setVisible(true);\n+        } else if (!mVisibleWindow) {\n+            // Show window if hidden when launched through launcher icon.\n+            setVisible(true);\n         }\n         return Service.START_NOT_STICKY;\n     }\n@@ -141,6 +140,12 @@ public void onDestroy() {\n         if (mFloatingWindow != null) mFloatingWindow.closeFloatingWindow();\n     }\n \n+    private void setVisible(boolean newVisibility) {\n+        mVisibleWindow = newVisibility;\n+        mFloatingWindow.setVisibility(newVisibility ? View.VISIBLE : View.GONE);\n+        ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).notify(NOTIFICATION_ID, buildNotification());\n+    }\n+\n     public void changeFontSize(boolean increase) {\n         mFontSize += (increase ? 1 : -1) * 2;\n         mFontSize = Math.max(MIN_FONTSIZE, mFontSize);",
      "parent_sha": "63adb2b132f72a6c04b81c2f8e479821f9648c97"
    }
  },
  {
    "oid": "50337cbf9d261d13aa72d9756006b3cb68afacba",
    "message": "Fix gesture handling while selecting text\n\nAlso remove stray debug logging.",
    "date": "2016-01-13T09:52:23Z",
    "url": "https://github.com/termux/termux-app/commit/50337cbf9d261d13aa72d9756006b3cb68afacba",
    "details": {
      "sha": "17e5dcf32d9496fb1a58c5c4f784b284149132bd",
      "filename": "app/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/termux/termux-app/blob/50337cbf9d261d13aa72d9756006b3cb68afacba/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/50337cbf9d261d13aa72d9756006b3cb68afacba/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=50337cbf9d261d13aa72d9756006b3cb68afacba",
      "patch": "@@ -117,7 +117,6 @@ public boolean onSingleTapUp(MotionEvent e) {\n \n \t\t\t@Override\n \t\t\tpublic boolean onScroll(MotionEvent e2, float distanceX, float distanceY) {\n-\t\t\t\tLog.e(\"termux\", \"onScroll=\" + e2 + \", mIsselection=\" + mIsSelectingText + \", mouse=\" + e2.isFromSource(InputDevice.SOURCE_MOUSE));\n \t\t\t\tif (mEmulator == null || mIsSelectingText) return true;\n \t\t\t\tif (mEmulator.isMouseTrackingActive() && e2.isFromSource(InputDevice.SOURCE_MOUSE)) {\n \t\t\t\t\t// If moving with mouse pointer while pressing button, report that instead of scroll.\n@@ -136,6 +135,7 @@ public boolean onScroll(MotionEvent e2, float distanceX, float distanceY) {\n \n \t\t\t@Override\n \t\t\tpublic boolean onScale(float focusX, float focusY, float scale) {\n+\t\t\t\tif (mEmulator == null || mIsSelectingText) return true;\n \t\t\t\tmScaleFactor *= scale;\n \t\t\t\tmScaleFactor = mOnKeyListener.onScale(mScaleFactor);\n \t\t\t\treturn true;\n@@ -502,8 +502,7 @@ public boolean onTouchEvent(MotionEvent ev) {\n \n \t\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();\n \t\t\t\tinvalidate();\n-\t\t\t\t// Return to prevent gestures when moving while selecting text.\n-\t\t\t\treturn true;\n+\t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tbreak;\n \t\t\t}",
      "parent_sha": "fa9ea2db5c5cf4162d0bec9dec5a15ede3318301"
    }
  },
  {
    "oid": "7187ed6950b427761dcb05be08230d600d7aebcd",
    "message": "Extrakeys: fix rebase error",
    "date": "2018-08-28T00:34:36Z",
    "url": "https://github.com/termux/termux-app/commit/7187ed6950b427761dcb05be08230d600d7aebcd",
    "details": {
      "sha": "0b9f6776a310479dbd71fb3e6d87fd3aa1fcfd97",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/termux/termux-app/blob/7187ed6950b427761dcb05be08230d600d7aebcd/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/7187ed6950b427761dcb05be08230d600d7aebcd/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=7187ed6950b427761dcb05be08230d600d7aebcd",
      "patch": "@@ -174,15 +174,15 @@ void reload(final String[][] buttons) {\n         altButton = controlButton = fnButton = null;\n         removeAllViews();\n \n+        final int rows = buttons.length;\n         int mx = 0;\n         for (int row = 0; row < rows; row++) {\n             if(buttons[row].length > mx) mx = buttons[row].length;\n         }\n-        final int rows = buttons.length;\n         final int cols = mx;\n \n         setRowCount(rows);\n-        setColumnCount(cols[0]);\n+        setColumnCount(cols);\n \n         for (int row = 0; row < rows; row++) {\n             for (int col = 0; col < cols; col++) {",
      "parent_sha": "b3eabd9bad5f0eb771ff4304cf618b0494d5435f"
    }
  },
  {
    "oid": "43858dfbb17d35e5c5d6a61e0049373a8c70b698",
    "message": "Fixed: Rename TermuxActivity isOnResumeAfterOnCreate to mIsOnResumeAfterOnCreate as per variable naming convention",
    "date": "2022-02-05T01:30:48Z",
    "url": "https://github.com/termux/termux-app/commit/43858dfbb17d35e5c5d6a61e0049373a8c70b698",
    "details": {
      "sha": "b802d8248458ce631767d77dced9105de5f0a0b8",
      "filename": "app/src/main/java/com/termux/app/TermuxActivity.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/termux/termux-app/blob/43858dfbb17d35e5c5d6a61e0049373a8c70b698/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "raw_url": "https://github.com/termux/termux-app/raw/43858dfbb17d35e5c5d6a61e0049373a8c70b698/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java?ref=43858dfbb17d35e5c5d6a61e0049373a8c70b698",
      "patch": "@@ -151,7 +151,7 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n     /**\n      * If onResume() was called after onCreate().\n      */\n-    private boolean isOnResumeAfterOnCreate = false;\n+    private boolean mIsOnResumeAfterOnCreate = false;\n \n     /**\n      * If activity was restarted like due to call to {@link #recreate()} after receiving\n@@ -189,7 +189,7 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n         Logger.logDebug(LOG_TAG, \"onCreate\");\n-        isOnResumeAfterOnCreate = true;\n+        mIsOnResumeAfterOnCreate = true;\n \n         if (savedInstanceState != null)\n             mIsActivityRecreated = savedInstanceState.getBoolean(ARG_ACTIVITY_RECREATED, false);\n@@ -298,7 +298,7 @@ public void onResume() {\n         if (mTermuxTerminalViewClient != null)\n             mTermuxTerminalViewClient.onResume();\n \n-        isOnResumeAfterOnCreate = false;\n+        mIsOnResumeAfterOnCreate = false;\n     }\n \n     @Override\n@@ -820,8 +820,8 @@ public boolean isVisible() {\n         return mIsVisible;\n     }\n \n-    public boolean isOnResumeAfterOnCreate() {\n-        return isOnResumeAfterOnCreate;\n+    public boolean ismIsOnResumeAfterOnCreate() {\n+        return mIsOnResumeAfterOnCreate;\n     }\n \n     public boolean isActivityRecreated() {",
      "parent_sha": "b8c3db0b6e950a15c075d974b1d0ef86ce1df08e"
    }
  },
  {
    "oid": "7da847a485c1262d7fec3ba8983539a3cbc30401",
    "message": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.4.0`. Check its Changelog sections for info on changes.",
    "date": "2021-03-15T22:59:54Z",
    "url": "https://github.com/termux/termux-app/commit/7da847a485c1262d7fec3ba8983539a3cbc30401",
    "details": {
      "sha": "36eea3b9e47298f9abc07019f334f7634a1a0293",
      "filename": "app/src/main/java/com/termux/app/TermuxConstants.java",
      "status": "modified",
      "additions": 39,
      "deletions": 9,
      "changes": 48,
      "blob_url": "https://github.com/termux/termux-app/blob/7da847a485c1262d7fec3ba8983539a3cbc30401/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/7da847a485c1262d7fec3ba8983539a3cbc30401/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java?ref=7da847a485c1262d7fec3ba8983539a3cbc30401",
      "patch": "@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.3.0\n+ * Version: v0.4.0\n  *\n  * Changelog\n  *\n@@ -14,23 +14,33 @@\n  *\n  * - 0.2.0 (2021-03-11)\n  *      - Added `_DIR` and `_FILE` substrings to paths.\n- *      - Add INTERNAL_PRIVATE_APP_DATA_DIR*, TERMUX_CACHE_DIR*, TERMUX_DATABASES_DIR*,\n- *          TERMUX_SHARED_PREFERENCES_DIR*, TERMUX_BIN_PREFIX_DIR*, TERMUX_ETC_DIR*, TERMUX_INCLUDE_DIR*,\n- *          TERMUX_LIB_DIR*, TERMUX_LIBEXEC_DIR*, TERMUX_SHARE_DIR*, TERMUX_TMP_DIR*, TERMUX_VAR_DIR*,\n- *          TERMUX_STAGING_PREFIX_DIR*, TERMUX_STORAGE_HOME_DIR*, TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME*,\n- *          TERMUX_DEFAULT_PREFERENCES_FILE\n+ *      - Added `INTERNAL_PRIVATE_APP_DATA_DIR*`, `TERMUX_CACHE_DIR*`, `TERMUX_DATABASES_DIR*`,\n+ *          `TERMUX_SHARED_PREFERENCES_DIR*`, `TERMUX_BIN_PREFIX_DIR*`, `TERMUX_ETC_DIR*`,\n+ *          `TERMUX_INCLUDE_DIR*`, `TERMUX_LIB_DIR*`, `TERMUX_LIBEXEC_DIR*`, `TERMUX_SHARE_DIR*`,\n+ *          `TERMUX_TMP_DIR*`, `TERMUX_VAR_DIR*`, `TERMUX_STAGING_PREFIX_DIR*`,\n+ *          `TERMUX_STORAGE_HOME_DIR*`, `TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME*`,\n+ *          `TERMUX_DEFAULT_PREFERENCES_FILE`.\n  *      - Renamed `DATA_HOME_PATH` to `TERMUX_DATA_HOME_DIR_PATH`.\n  *      - Renamed `CONFIG_HOME_PATH` to `TERMUX_CONFIG_HOME_DIR_PATH`.\n  *      - Updated javadocs and spacing.\n  *\n  * - 0.3.0 (2021-03-12)\n- *      - Remove TERMUX_CACHE_DIR_PATH*, TERMUX_DATABASES_DIR_PATH*, TERMUX_SHARED_PREFERENCES_DIR_PATH*\n- *          since they may not be consistent on all devices.\n+ *      - Remove `TERMUX_CACHE_DIR_PATH*`, `TERMUX_DATABASES_DIR_PATH*`,\n+ *          `TERMUX_SHARED_PREFERENCES_DIR_PATH*` since they may not be consistent on all devices.\n  *      - Renamed `TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME` to\n  *          `TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`. This should be used for\n  *           accessing shared preferences between Termux app and its plugins if ever needed by first\n  *           getting shared package context with {@link Context.createPackageContext(String,int}).\n  *\n+ * - 0.4.0 (2021-03-16)\n+ *      - Added `BROADCAST_TERMUX_OPENED`,\n+ *          `TERMUX_API_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`\n+ *          `TERMUX_BOOT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`,\n+ *          `TERMUX_FLOAT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`,\n+ *          `TERMUX_STYLING_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`,\n+ *          `TERMUX_TASKER_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`,\n+ *          `TERMUX_WIDGET_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`.\n+ *\n  */\n \n /**\n@@ -227,12 +237,30 @@ public final class TermuxConstants {\n \n \n     /*\n-     * Termux app core file paths.\n+     * Termux app and plugin preferences and properties file paths.\n      */\n \n     /* Termux app default SharedPreferences file basename without extension */\n     public static final String TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux_preferences\"\n \n+    /* Termux API app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_API_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_API_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.api_preferences\"\n+\n+    /* Termux Boot app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_BOOT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_BOOT_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.boot_preferences\"\n+\n+    /* Termux Float app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_FLOAT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_FLOAT_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.window_preferences\"\n+\n+    /* Termux Styling app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_STYLING_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_STYLING_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.styling_preferences\"\n+\n+    /* Termux Plugin app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_TASKER_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_TASKER_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.tasker_preferences\"\n+\n+    /* Termux Widget app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_WIDGET_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_WIDGET_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.widget_preferences\"\n+\n \n     /* Termux app termux.properties primary file path */\n     public static final String TERMUX_PROPERTIES_PRIMARY_FILE_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/termux.properties\"; // Default: \"/data/data/com.termux/files/home/.termux/termux.properties\"\n@@ -244,6 +272,7 @@ public final class TermuxConstants {\n     /* Termux app termux.properties secondary file */\n     public static final File TERMUX_PROPERTIES_SECONDARY_FILE = new File(TERMUX_PROPERTIES_SECONDARY_FILE_PATH);\n \n+\n     /* Termux app and Termux:Styling colors.properties file path */\n     public static final String TERMUX_COLOR_PROPERTIES_FILE_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/colors.properties\"; // Default: \"/data/data/com.termux/files/home/.termux/colors.properties\"\n     /* Termux app and Termux:Styling colors.properties file */\n@@ -302,6 +331,7 @@ public final class TermuxConstants {\n     public static final String PROP_DEFAULT_VALUE_ALLOW_EXTERNAL_APPS = \"false\"; // Default: \"false\"\n \n \n+    public static final String BROADCAST_TERMUX_OPENED = TERMUX_PACKAGE_NAME + \".app.OPENED\";\n \n \n ",
      "parent_sha": "11a236a172ac7d64a6963d369515801ff29dc3ac"
    }
  },
  {
    "oid": "078eea2b74173d4b28884af746d6c6b3c0208193",
    "message": "Added: Rename app classes in `TermuxConstants` with `_APP` suffix added and add `TERMUX_*_MAIN_ACTIVITY_NAME` and `TERMUX_*_LAUNCHER_ACTIVITY_NAME` constants to each app class",
    "date": "2025-01-12T20:30:06Z",
    "url": "https://github.com/termux/termux-app/commit/078eea2b74173d4b28884af746d6c6b3c0208193",
    "details": {
      "sha": "534936ffcab7d6b36fb12f847ff6fdaf43ac69a6",
      "filename": "termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java",
      "status": "modified",
      "additions": 53,
      "deletions": 11,
      "changes": 64,
      "blob_url": "https://github.com/termux/termux-app/blob/078eea2b74173d4b28884af746d6c6b3c0208193/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/078eea2b74173d4b28884af746d6c6b3c0208193/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java?ref=078eea2b74173d4b28884af746d6c6b3c0208193",
      "patch": "@@ -1,6 +1,7 @@\n package com.termux.shared.termux;\n \n import android.annotation.SuppressLint;\n+import android.content.Intent;\n \n import com.termux.shared.shell.command.ExecutionCommand;\n import com.termux.shared.shell.command.ExecutionCommand.Runner;\n@@ -11,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.52.0\n+ * Version: v0.53.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -277,6 +278,10 @@\n  *\n  * - 0.52.0 (2022-06-18)\n  *      - Added `TERMUX_PREFIX_DIR_IGNORED_SUB_FILES_PATHS_TO_CONSIDER_AS_EMPTY`.\n+ *\n+ * - 0.53.0 (2025-01-12)\n+ *      - Renamed `TERMUX_API`, `TERMUX_STYLING`, `TERMUX_TASKER`, `TERMUX_WIDGET` classes with `_APP` suffix added.\n+ *      - Added `TERMUX_*_MAIN_ACTIVITY_NAME` and `TERMUX_*_LAUNCHER_ACTIVITY_NAME` constants to each app class.\n  */\n \n /**\n@@ -1192,10 +1197,30 @@ public static final class RUN_COMMAND_SERVICE {\n     /**\n      * Termux:API app constants.\n      */\n-    public static final class TERMUX_API {\n+    public static final class TERMUX_API_APP {\n+\n+        /** Termux:API app main activity name. */\n+        public static final String TERMUX_API_MAIN_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPIMainActivity\"; // Default: \"com.termux.api.activities.TermuxAPIMainActivity\"\n+\n+        /** Termux:API app launcher activity name. This is an `activity-alias` for {@link #TERMUX_API_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_API_LAUNCHER_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPILauncherActivity\"; // Default: \"com.termux.api.activities.TermuxAPILauncherActivity\"\n+\n+    }\n+\n+\n+\n+\n+\n+    /**\n+     * Termux:Boot app constants.\n+     */\n+    public static final class TERMUX_BOOT_APP {\n+\n+        /** Termux:Boot app main activity name. */\n+        public static final String TERMUX_BOOT_MAIN_ACTIVITY_NAME = TERMUX_BOOT_PACKAGE_NAME + \".activities.TermuxBootMainActivity\"; // Default: \"com.termux.boot.activities.TermuxBootMainActivity\"\n \n-        /** Termux:API app core activity name. */\n-        public static final String TERMUX_API_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPIActivity\"; // Default: \"com.termux.tasker.activities.TermuxAPIActivity\"\n+        /** Termux:Boot app launcher activity name. This is an `activity-alias` for {@link #TERMUX_BOOT_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_BOOT_LAUNCHER_ACTIVITY_NAME = TERMUX_BOOT_PACKAGE_NAME + \".activities.TermuxBootLauncherActivity\"; // Default: \"com.termux.boot.activities.TermuxBootLauncherActivity\"\n \n     }\n \n@@ -1208,6 +1233,9 @@ public static final class TERMUX_API {\n      */\n     public static final class TERMUX_FLOAT_APP {\n \n+        /** Termux:Float app core activity name. */\n+        public static final String TERMUX_FLOAT_ACTIVITY_NAME = TERMUX_FLOAT_PACKAGE_NAME + \".TermuxFloatActivity\"; // Default: \"com.termux.window.TermuxFloatActivity\"\n+\n         /** Termux:Float app core service name. */\n         public static final String TERMUX_FLOAT_SERVICE_NAME = TERMUX_FLOAT_PACKAGE_NAME + \".TermuxFloatService\"; // Default: \"com.termux.window.TermuxFloatService\"\n \n@@ -1236,11 +1264,18 @@ public static final class TERMUX_FLOAT_SERVICE {\n     /**\n      * Termux:Styling app constants.\n      */\n-    public static final class TERMUX_STYLING {\n+    public static final class TERMUX_STYLING_APP {\n \n         /** Termux:Styling app core activity name. */\n         public static final String TERMUX_STYLING_ACTIVITY_NAME = TERMUX_STYLING_PACKAGE_NAME + \".TermuxStyleActivity\"; // Default: \"com.termux.styling.TermuxStyleActivity\"\n \n+\n+        /** Termux:Styling app main activity name. */\n+        public static final String TERMUX_STYLING_MAIN_ACTIVITY_NAME = TERMUX_STYLING_PACKAGE_NAME + \".activities.TermuxStylingMainActivity\"; // Default: \"com.termux.styling.activities.TermuxStylingMainActivity\"\n+\n+        /** Termux:Styling app launcher activity name. This is an `activity-alias` for {@link #TERMUX_STYLING_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_STYLING_LAUNCHER_ACTIVITY_NAME = TERMUX_STYLING_PACKAGE_NAME + \".activities.TermuxStylingLauncherActivity\"; // Default: \"com.termux.styling.activities.TermuxStylingLauncherActivity\"\n+\n     }\n \n \n@@ -1250,10 +1285,13 @@ public static final class TERMUX_STYLING {\n     /**\n      * Termux:Tasker app constants.\n      */\n-    public static final class TERMUX_TASKER {\n+    public static final class TERMUX_TASKER_APP {\n+\n+        /** Termux:Tasker app main activity name. */\n+        public static final String TERMUX_TASKER_MAIN_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerMainActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerMainActivity\"\n \n-        /** Termux:Tasker app core activity name. */\n-        public static final String TERMUX_TASKER_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerActivity\"\n+        /** Termux:Tasker app launcher activity name. This is an `activity-alias` for {@link #TERMUX_TASKER_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_TASKER_LAUNCHER_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerLauncherActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerLauncherActivity\"\n \n     }\n \n@@ -1264,15 +1302,19 @@ public static final class TERMUX_TASKER {\n     /**\n      * Termux:Widget app constants.\n      */\n-    public static final class TERMUX_WIDGET {\n+    public static final class TERMUX_WIDGET_APP {\n \n-        /** Termux:Widget app core activity name. */\n-        public static final String TERMUX_WIDGET_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetActivity\"\n+        /** Termux:Widget app main activity name. */\n+        public static final String TERMUX_WIDGET_MAIN_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetMainActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetMainActivity\"\n+\n+        /** Termux:Widget app launcher activity name. This is an `activity-alias` for {@link #TERMUX_WIDGET_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_WIDGET_LAUNCHER_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetLauncherActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetLauncherActivity\"\n \n \n         /**  Intent {@code String} extra for the token of the Termux:Widget app shortcuts. */\n         public static final String EXTRA_TOKEN_NAME = TERMUX_PACKAGE_NAME + \".shortcut.token\"; // Default: \"com.termux.shortcut.token\"\n \n+\n         /**\n          * Termux:Widget app {@link android.appwidget.AppWidgetProvider} class.\n          */",
      "parent_sha": "fb01127ff2c95f6fa5f86a77956ca2d68afad9a9"
    }
  },
  {
    "oid": "a988383e01b4bb76f5c0724421dd95047acea14a",
    "message": "Fixed: Fully consume unknown CSI sequences containing unsupported parameter and intermediate bytes\n\nStandard ECMA-48: Control Functions for Coded Character Sets specifies the format of CSI commands.\n- https://en.wikipedia.org/wiki/ANSI_escape_code#Control_Sequence_Introducer_commands\n- https://invisible-island.net/xterm/ecma-48-parameter-format.html#section5.4\n\nPreviously unsupported bytes would be echoed to the terminal.\n\n```shell\n$ printf '\\x1b[=u' # PF\nu\n$ printf '\\x1b[=5u' # PPF\n5u\n$ printf '\\x1b[=5!u' # PPIF\n5!u\n$ printf '\\x1b[=5!%u' # PPIIF\n5!0\n$ printf '\\x1b[=?5!%u' # PPPIIF\n?5!0\n```\n\nThis fixes a problem with fish shell 4.0.0 which uses that sequence.\n\nCloses #4338\n\nCo-authored-by: @krobelus <aclopte@gmail.com>\nCo-authored-by: @agnostic-apollo  <agnosticapollo@gmail.com>",
    "date": "2025-03-15T06:26:11Z",
    "url": "https://github.com/termux/termux-app/commit/a988383e01b4bb76f5c0724421dd95047acea14a",
    "details": {
      "sha": "b0be6f34405e8f36c2711daf90305f8c0dd56a2c",
      "filename": "terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java",
      "status": "modified",
      "additions": 45,
      "deletions": 2,
      "changes": 47,
      "blob_url": "https://github.com/termux/termux-app/blob/a988383e01b4bb76f5c0724421dd95047acea14a/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java",
      "raw_url": "https://github.com/termux/termux-app/raw/a988383e01b4bb76f5c0724421dd95047acea14a/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalEmulator.java?ref=a988383e01b4bb76f5c0724421dd95047acea14a",
      "patch": "@@ -83,6 +83,10 @@ public final class TerminalEmulator {\n     private static final int ESC_APC = 20;\n     /** Escape processing: \"ESC _\" or Application Program Command (APC), followed by Escape. */\n     private static final int ESC_APC_ESCAPE = 21;\n+    /** Escape processing: ESC [ <parameter bytes> */\n+    private static final int ESC_CSI_UNSUPPORTED_PARAMETER_BYTE = 22;\n+    /** Escape processing: ESC [ <parameter bytes> <intermediate bytes> */\n+    private static final int ESC_CSI_UNSUPPORTED_INTERMEDIATE_BYTE = 23;\n \n     /** The number of parameter arguments including colon separated sub-parameters. */\n     private static final int MAX_ESCAPE_PARAMETERS = 32;\n@@ -658,6 +662,10 @@ public void processCodePoint(int b) {\n                     case ESC_CSI:\n                         doCsi(b);\n                         break;\n+                    case ESC_CSI_UNSUPPORTED_PARAMETER_BYTE:\n+                    case ESC_CSI_UNSUPPORTED_INTERMEDIATE_BYTE:\n+                        doCsiUnsupportedParameterOrIntermediateByte(b);\n+                        break;\n                     case ESC_CSI_EXCLAMATION:\n                         if (b == 'p') { // Soft terminal reset (DECSTR, http://vt100.net/docs/vt510-rm/DECSTR).\n                             reset();\n@@ -1059,6 +1067,37 @@ private int nextTabStop(int numTabs) {\n         return mRightMargin - 1;\n     }\n \n+    /**\n+     * Process byte while in the {@link #ESC_CSI_UNSUPPORTED_PARAMETER_BYTE} or\n+     * {@link #ESC_CSI_UNSUPPORTED_INTERMEDIATE_BYTE} escape state.\n+     *\n+     * Parse unsupported parameter, intermediate and final bytes but ignore them.\n+     *\n+     * > For Control Sequence Introducer, ... the ESC [ is followed by\n+     * > - any number (including none) of \"parameter bytes\" in the range 0x30\u20130x3F (ASCII 0\u20139:;<=>?),\n+     * > - then by any number of \"intermediate bytes\" in the range 0x20\u20130x2F (ASCII space and !\"#$%&'()*+,-./),\n+     * > - then finally by a single \"final byte\" in the range 0x40\u20130x7E (ASCII @A\u2013Z[\\]^_`a\u2013z{|}~).\n+     *\n+     * - https://en.wikipedia.org/wiki/ANSI_escape_code#Control_Sequence_Introducer_commands\n+     * - https://invisible-island.net/xterm/ecma-48-parameter-format.html#section5.4\n+     */\n+    private void doCsiUnsupportedParameterOrIntermediateByte(int b) {\n+        if (mEscapeState == ESC_CSI_UNSUPPORTED_PARAMETER_BYTE && b >= 0x30 && b <= 0x3F) {\n+            // Supported `0\u20139:;>?` or unsupported `<=` parameter byte after an\n+            // initial unsupported parameter byte in `doCsi()`, or a sequential parameter byte.\n+            continueSequence(ESC_CSI_UNSUPPORTED_PARAMETER_BYTE);\n+        } else if (b >= 0x20 && b <= 0x2F) {\n+            // Optional intermediate byte `!\"#$%&'()*+,-./` after parameter or intermediate byte.\n+            continueSequence(ESC_CSI_UNSUPPORTED_INTERMEDIATE_BYTE);\n+        } else if (b >= 0x40 && b <= 0x7E) {\n+            // Final byte `@A\u2013Z[\\]^_`a\u2013z{|}~` after parameter or intermediate byte.\n+            // Calling `unknownSequence()` would log an error with only a final byte, so ignore it for now.\n+            finishSequence();\n+        } else {\n+            unknownSequence(b);\n+        }\n+    }\n+\n     /** Process byte while in the {@link #ESC_CSI_QUESTIONMARK} escape state. */\n     private void doCsiQuestionMark(int b) {\n         switch (b) {\n@@ -1656,12 +1695,16 @@ private void doCsi(int b) {\n                     }\n                 mCursorCol = newCol;\n                 break;\n-            case '?': // Esc [ ? -- start of a private mode set\n+            case '?': // Esc [ ? -- start of a private parameter byte\n                 continueSequence(ESC_CSI_QUESTIONMARK);\n                 break;\n-            case '>': // \"Esc [ >\" --\n+            case '>': // \"Esc [ >\" -- start of a private parameter byte\n                 continueSequence(ESC_CSI_BIGGERTHAN);\n                 break;\n+            case '<': // \"Esc [ <\" -- start of a private parameter byte\n+            case '=': // \"Esc [ =\" -- start of a private parameter byte\n+                continueSequence(ESC_CSI_UNSUPPORTED_PARAMETER_BYTE);\n+                break;\n             case '`': // Horizontal position absolute (HPA - http://www.vt100.net/docs/vt510-rm/HPA).\n                 setCursorColRespectingOriginMode(getArg0(1) - 1);\n                 break;",
      "parent_sha": "d2cd6ac2e579869b4fa1b1d2737c434e64c20fb9"
    }
  },
  {
    "oid": "ec77be00dc5d6aafd0f51868e825a8d5ba1a1656",
    "message": "state -> SpecialButtonState state",
    "date": "2018-08-28T00:34:36Z",
    "url": "https://github.com/termux/termux-app/commit/ec77be00dc5d6aafd0f51868e825a8d5ba1a1656",
    "details": {
      "sha": "784aa365f4667b59180af86ae7bd01550e7c1f7c",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/ec77be00dc5d6aafd0f51868e825a8d5ba1a1656/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/ec77be00dc5d6aafd0f51868e825a8d5ba1a1656/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=ec77be00dc5d6aafd0f51868e825a8d5ba1a1656",
      "patch": "@@ -331,7 +331,7 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n                 \n                 Button button;\n                 if(Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonText)) {\n-                    state = specialButtons.get(SpecialButton.valueOf(buttonText)); // for valueOf: https://stackoverflow.com/a/604426/1980630\n+                    SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonText)); // for valueOf: https://stackoverflow.com/a/604426/1980630\n                     state.isOn = true;\n                     button = state.button = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                     button.setClickable(true);",
      "parent_sha": "a854960476839c863f31e84bc6940a451e710979"
    }
  },
  {
    "oid": "a4381b78272b206c5ec369d487f52a27f00ff5b4",
    "message": "ExtraKeysView: SpecialButtons use Button instead of ToggleButton",
    "date": "2021-02-03T21:26:08Z",
    "url": "https://github.com/termux/termux-app/commit/a4381b78272b206c5ec369d487f52a27f00ff5b4",
    "details": {
      "sha": "e475e32a14fe02795884b0e9d9499fa667ab5bb2",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 12,
      "deletions": 21,
      "changes": 33,
      "blob_url": "https://github.com/termux/termux-app/blob/a4381b78272b206c5ec369d487f52a27f00ff5b4/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/a4381b78272b206c5ec369d487f52a27f00ff5b4/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=a4381b78272b206c5ec369d487f52a27f00ff5b4",
      "patch": "@@ -27,7 +27,6 @@\n import android.widget.Button;\n import android.widget.GridLayout;\n import android.widget.PopupWindow;\n-import android.widget.ToggleButton;\n \n import com.termux.R;\n import com.termux.view.TerminalView;\n@@ -134,14 +133,11 @@ public enum SpecialButton {\n     private static class SpecialButtonState {\n         boolean isOn = false;\n         boolean isActive = false;\n-        List<ToggleButton> buttons = new ArrayList<>();\n+        List<Button> buttons = new ArrayList<>();\n \n-        void toggle(boolean value) {\n+        void setIsActive(boolean value) {\n             isActive = value;\n-            buttons.forEach(button -> {\n-                button.setChecked(value);\n-                button.setTextColor(value ? INTERESTING_COLOR : TEXT_COLOR);\n-            });\n+            buttons.forEach(button -> button.setTextColor(value ? INTERESTING_COLOR : TEXT_COLOR));\n         }\n     }\n \n@@ -166,27 +162,23 @@ public boolean readSpecialButton(SpecialButton name) {\n         if (state == null)\n             throw new RuntimeException(\"Must be a valid special button (see source)\");\n \n-        if (!state.isOn)\n-            return false;\n-\n-        if (!state.isActive) {\n+        if (!state.isOn || !state.isActive)\n             return false;\n-        }\n \n-        state.toggle(false);\n+        state.setIsActive(false);\n \n         return true;\n     }\n \n-    private ToggleButton createSpecialButton(String buttonKey, boolean needUpdate) {\n+    private Button createSpecialButton(String buttonKey, boolean needUpdate) {\n         SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonKey));\n         state.isOn = true;\n-        ToggleButton toggleButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n-        toggleButton.setTextColor(state.isActive ? INTERESTING_COLOR : TEXT_COLOR);\n+        Button button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+        button.setTextColor(state.isActive ? INTERESTING_COLOR : TEXT_COLOR);\n         if (needUpdate) {\n-            state.buttons.add(toggleButton);\n+            state.buttons.add(button);\n         }\n-        return toggleButton;\n+        return button;\n     }\n \n     void popup(View view, ExtraKeyButton extraButton) {\n@@ -264,7 +256,6 @@ void reload(ExtraKeysInfos infos) {\n                 Button button;\n                 if(isSpecialButton(buttonInfo)) {\n                     button = createSpecialButton(buttonInfo.getKey(), true);\n-                    button.setClickable(true);\n                 } else {\n                     button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                 }\n@@ -291,7 +282,7 @@ void reload(ExtraKeysInfos infos) {\n                     View root = getRootView();\n                     if (isSpecialButton(buttonInfo)) {\n                         SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getKey()));\n-                        state.toggle(!state.isActive);\n+                        state.setIsActive(!state.isActive);\n                     } else {\n                         sendKey(root, buttonInfo);\n                     }\n@@ -352,7 +343,7 @@ void reload(ExtraKeysInfos infos) {\n                                     if (buttonInfo.getPopup() != null) {\n                                         if (isSpecialButton(buttonInfo.getPopup())) {\n                                             SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getPopup().getKey()));\n-                                            state.toggle(!state.isActive);\n+                                            state.setIsActive(!state.isActive);\n                                         } else {\n                                             sendKey(root, buttonInfo.getPopup());\n                                         }",
      "parent_sha": "866da75fa943172012f9b1b863b774c8bbc88ca1"
    }
  },
  {
    "oid": "0c8cd90f4e0bcd1d6bc8d70b5cfd3f1e0a47b752",
    "message": "Use $PREFIX/bin/sh for script file without shebang\n\nAlso try to handle #!(/usr)/bin/foo shebangs.",
    "date": "2016-11-20T15:43:27Z",
    "url": "https://github.com/termux/termux-app/commit/0c8cd90f4e0bcd1d6bc8d70b5cfd3f1e0a47b752",
    "details": {
      "sha": "956c2c8d1a8e965cad2760f05740f37391015a7a",
      "filename": "app/src/main/java/com/termux/app/BackgroundJob.java",
      "status": "modified",
      "additions": 68,
      "deletions": 16,
      "changes": 84,
      "blob_url": "https://github.com/termux/termux-app/blob/0c8cd90f4e0bcd1d6bc8d70b5cfd3f1e0a47b752/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FBackgroundJob.java",
      "raw_url": "https://github.com/termux/termux-app/raw/0c8cd90f4e0bcd1d6bc8d70b5cfd3f1e0a47b752/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FBackgroundJob.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FBackgroundJob.java?ref=0c8cd90f4e0bcd1d6bc8d70b5cfd3f1e0a47b752",
      "patch": "@@ -4,12 +4,15 @@\n \n import java.io.BufferedReader;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.lang.reflect.Field;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * A background job launched by Termux.\n@@ -24,16 +27,7 @@ public BackgroundJob(String cwd, String fileToExecute, final String[] args) {\n         String[] env = buildEnvironment(false, cwd);\n         if (cwd == null) cwd = TermuxService.HOME_PATH;\n \n-        String[] modifiedArgs;\n-        if (args == null) {\n-            modifiedArgs = new String[]{fileToExecute};\n-        } else {\n-            modifiedArgs = new String[args.length + 1];\n-            modifiedArgs[0] = fileToExecute;\n-            System.arraycopy(args, 0, modifiedArgs, 1, args.length);\n-        }\n-        final String[] progArray = modifiedArgs;\n-\n+        final String[] progArray = setupProcessArgs(fileToExecute, args);\n         final String processDescription = Arrays.toString(progArray);\n \n         Process process;\n@@ -45,6 +39,7 @@ public BackgroundJob(String cwd, String fileToExecute, final String[] args) {\n             Log.e(LOG_TAG, \"Failed running background job: \" + processDescription, e);\n             return;\n         }\n+\n         mProcess = process;\n         final int pid = getPid(mProcess);\n \n@@ -126,17 +121,74 @@ public static String[] buildEnvironment(boolean failSafe, String cwd) {\n     }\n \n     public static int getPid(Process p) {\n-        int pid = -1;\n-\n         try {\n             Field f = p.getClass().getDeclaredField(\"pid\");\n             f.setAccessible(true);\n-            pid = f.getInt(p);\n-            f.setAccessible(false);\n+            try {\n+                return f.getInt(p);\n+            } finally {\n+                f.setAccessible(false);\n+            }\n         } catch (Throwable e) {\n-            pid = -1;\n+            return -1;\n+        }\n+    }\n+\n+    static String[] setupProcessArgs(String fileToExecute, String[] args) {\n+        // The file to execute may either be:\n+        // - An elf file, in which we execute it directly.\n+        // - A script file without shebang, which we execute with our standard shell $PREFIX/bin/sh instead of the\n+        //   system /system/bin/sh. The system shell may vary and may not work at all due to LD_LIBRARY_PATH.\n+        // - A file with shebang, which we try to handle with e.g. /bin/foo -> $PREFIX/bin/foo.\n+        String interpreter = null;\n+        try {\n+            File file = new File(fileToExecute);\n+            try (FileInputStream in = new FileInputStream(file)) {\n+                byte[] buffer = new byte[256];\n+                int bytesRead = in.read(buffer);\n+                if (bytesRead > 4) {\n+                    if (buffer[0] == 0x7F && buffer[1] == 'E' && buffer[2] == 'L' && buffer[3] == 'F') {\n+                        // Elf file, do nothing.\n+                    } else if (buffer[0] == '#' && buffer[1] == '!') {\n+                        // Try to parse shebang.\n+                        StringBuilder builder = new StringBuilder();\n+                        for (int i = 2; i < bytesRead; i++) {\n+                            char c = (char) buffer[i];\n+                            if (c == ' ' || c == '\\n') {\n+                                if (builder.length() == 0) {\n+                                    // Skip whitespace after shebang.\n+                                    continue;\n+                                } else {\n+                                    // End of shebang.\n+                                    String executable = builder.toString();\n+                                    if (executable.startsWith(\"/usr\") || executable.startsWith(\"/bin\")) {\n+                                        String[] parts = executable.split(\"/\");\n+                                        String binary = parts[parts.length - 1];\n+                                        interpreter = TermuxService.PREFIX_PATH + \"/bin/\" + binary;\n+                                    }\n+                                    break;\n+                                }\n+                            } else {\n+                                builder.append(c);\n+                            }\n+                        }\n+                    } else {\n+                        // No shebang and no ELF, use standard shell.\n+                        interpreter = TermuxService.PREFIX_PATH + \"/bin/sh\";\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            // Ignore.\n+        }\n+\n+        List<String> result = new ArrayList<>();\n+        if (interpreter != null) result.add(interpreter);\n+        result.add(fileToExecute);\n+        if (args != null) {\n+            for (String arg : args) result.add(arg);\n         }\n-        return pid;\n+        return result.toArray(new String[result.size()]);\n     }\n \n }",
      "parent_sha": "e1ea68913f52103e80f236f0497bda5e0bf56df6"
    }
  },
  {
    "oid": "b7864d6ac2e979e6c299d145447afd1203510c02",
    "message": "deleteFolder(): check if passed argument is a symlink\n\nPrevents possible data loss when user replaced directory '~/storage' with\na symlink.",
    "date": "2018-07-01T16:00:54Z",
    "url": "https://github.com/termux/termux-app/commit/b7864d6ac2e979e6c299d145447afd1203510c02",
    "details": {
      "sha": "26e798ee410da81f24d8900dd9b6bad9dc35a2e7",
      "filename": "app/src/main/java/com/termux/app/TermuxInstaller.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/termux/termux-app/blob/b7864d6ac2e979e6c299d145447afd1203510c02/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "raw_url": "https://github.com/termux/termux-app/raw/b7864d6ac2e979e6c299d145447afd1203510c02/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxInstaller.java?ref=b7864d6ac2e979e6c299d145447afd1203510c02",
      "patch": "@@ -209,18 +209,18 @@ private static String determineTermuxArchName() {\n             Arrays.toString(Build.SUPPORTED_ABIS));\n     }\n \n-    /** Delete a folder and all its content or throw. */\n+    /** Delete a folder and all its content or throw. Don't follow symlinks. */\n     static void deleteFolder(File fileOrDirectory) throws IOException {\n-        File[] children = fileOrDirectory.listFiles();\n-        if (children != null) {\n-            for (File child : children) {\n-                if (child.getCanonicalFile().equals(child.getAbsoluteFile())) {\n+        if (fileOrDirectory.getCanonicalPath().equals(fileOrDirectory.getAbsolutePath()) && fileOrDirectory.isDirectory()) {\n+            File[] children = fileOrDirectory.listFiles();\n+\n+            if (children != null) {\n+                for (File child : children) {\n                     deleteFolder(child);\n-                } else {\n-                    child.delete();\n                 }\n             }\n         }\n+\n         if (!fileOrDirectory.delete()) {\n             throw new RuntimeException(\"Unable to delete \" + (fileOrDirectory.isDirectory() ? \"directory \" : \"file \") + fileOrDirectory.getAbsolutePath());\n         }",
      "parent_sha": "d1f0c76db3eb85fce74af7aa8e39aecb41e8f8f0"
    }
  },
  {
    "oid": "05bb399893994d6cd596687fa7b4fedc294ef2b4",
    "message": "terminal-view: fix array indexing",
    "date": "2021-01-17T17:40:29Z",
    "url": "https://github.com/termux/termux-app/commit/05bb399893994d6cd596687fa7b4fedc294ef2b4",
    "details": {
      "sha": "41fe31dafc89710579e817442bc4bbd9158294b0",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/termux/termux-app/blob/05bb399893994d6cd596687fa7b4fedc294ef2b4/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/05bb399893994d6cd596687fa7b4fedc294ef2b4/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=05bb399893994d6cd596687fa7b4fedc294ef2b4",
      "patch": "@@ -1547,8 +1547,8 @@ private Properties getProperties() {\n         };\n \n         propsFile = new File(possiblePropLocations[0]);\n-        int i = 1;\n-        while (!propsFile.exists() && i <= possiblePropLocations.length) {\n+        int i = 0;\n+        while (!propsFile.exists() && i < possiblePropLocations.length) {\n             propsFile = new File(possiblePropLocations[i]);\n             i += 1;\n         }",
      "parent_sha": "831aa69da86e7f9a832072d123c4f3af6af8075a"
    }
  },
  {
    "oid": "ae7f141acab8d0e20097e3a6a1ce8213fdc6d8c7",
    "message": "Added: Add info of installed plugin apps when report issue report is generated with debug mode enabled",
    "date": "2022-01-22T20:36:41Z",
    "url": "https://github.com/termux/termux-app/commit/ae7f141acab8d0e20097e3a6a1ce8213fdc6d8c7",
    "details": {
      "sha": "aafc90ae4575b874b6f09a0b4640f7679c6ce3da",
      "filename": "app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/termux/termux-app/blob/ae7f141acab8d0e20097e3a6a1ce8213fdc6d8c7/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2FTermuxTerminalViewClient.java",
      "raw_url": "https://github.com/termux/termux-app/raw/ae7f141acab8d0e20097e3a6a1ce8213fdc6d8c7/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2FTermuxTerminalViewClient.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fterminal%2FTermuxTerminalViewClient.java?ref=ae7f141acab8d0e20097e3a6a1ce8213fdc6d8c7",
      "patch": "@@ -724,7 +724,12 @@ public void run() {\n                 reportString.append(\"\\n\").append(MarkdownUtils.getMarkdownCodeForString(transcriptText, true));\n                 reportString.append(\"\\n##\\n\");\n \n-                reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, true));\n+                if (addTermuxDebugInfo) {\n+                    reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES));\n+                } else {\n+                    reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, TermuxUtils.AppInfoMode.TERMUX_PACKAGE));\n+                }\n+\n                 reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(mActivity));\n \n                 String termuxAptInfo = TermuxUtils.geAPTInfoMarkdownString(mActivity);",
      "parent_sha": "fd4159f1bad97a5d4dafcf1411a7eb0b113131d7"
    }
  },
  {
    "oid": "0328d15ea77515469f1cd69afd1944f80ff71860",
    "message": "Fixed: Fix duplicate logging of `file` word in `FileUtils.copyOrMoveFile()`",
    "date": "2022-06-11T09:24:26Z",
    "url": "https://github.com/termux/termux-app/commit/0328d15ea77515469f1cd69afd1944f80ff71860",
    "details": {
      "sha": "308bc77e66969d10a2b4c143e00dc1d4c754b2fc",
      "filename": "termux-shared/src/main/java/com/termux/shared/file/FileUtils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/termux/termux-app/blob/0328d15ea77515469f1cd69afd1944f80ff71860/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ffile%2FFileUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/0328d15ea77515469f1cd69afd1944f80ff71860/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ffile%2FFileUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ffile%2FFileUtils.java?ref=0328d15ea77515469f1cd69afd1944f80ff71860",
      "patch": "@@ -991,7 +991,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n                     return FileUtilsErrno.ERRNO_CANNOT_OVERWRITE_A_DIFFERENT_FILE_TYPE.getError(label + \"source file\", mode.toLowerCase(), srcFilePath, destFilePath, destFileType.getName(), srcFileType.getName());\n \n                 // Delete the destination file\n-                error = deleteFile(label + \"destination file\", destFilePath, true);\n+                error = deleteFile(label + \"destination\", destFilePath, true);\n                 if (error != null)\n                     return error;\n             }\n@@ -1038,7 +1038,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n                     } else {\n                         // read the target for the source file and create a symlink at dest\n                         // source file metadata will be lost\n-                        error = createSymlinkFile(label + \"dest file\", Os.readlink(srcFilePath), destFilePath);\n+                        error = createSymlinkFile(label + \"dest\", Os.readlink(srcFilePath), destFilePath);\n                         if (error != null)\n                             return error;\n                     }\n@@ -1055,7 +1055,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n             // If source file had to be moved\n             if (moveFile) {\n                 // Delete the source file since copying would have succeeded\n-                error = deleteFile(label + \"source file\", srcFilePath, true);\n+                error = deleteFile(label + \"source\", srcFilePath, true);\n                 if (error != null)\n                     return error;\n             }",
      "parent_sha": "f9e9193c4e1e1b0c061d68856e9b673f9d450ea4"
    }
  },
  {
    "oid": "3d2756f3762103f65692e935aba6743aeebea242",
    "message": "Optimize handleView move.",
    "date": "2019-12-18T15:50:23Z",
    "url": "https://github.com/termux/termux-app/commit/3d2756f3762103f65692e935aba6743aeebea242",
    "details": {
      "sha": "529cd57ec6ca95907fb27435dbdcd647b8fa0ff6",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 82,
      "deletions": 13,
      "changes": 95,
      "blob_url": "https://github.com/termux/termux-app/blob/3d2756f3762103f65692e935aba6743aeebea242/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/3d2756f3762103f65692e935aba6743aeebea242/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=3d2756f3762103f65692e935aba6743aeebea242",
      "patch": "@@ -42,6 +42,7 @@\n import com.termux.terminal.TerminalBuffer;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n+import com.termux.terminal.WcWidth;\n \n /** View displaying and interacting with a {@link TerminalSession}. */\n public final class TerminalView extends View {\n@@ -986,6 +987,9 @@ public boolean isShowing() {\n         }\n \n         private void checkChangedOrientation() {\n+            if (!mIsDragging) {\n+                return;\n+            }\n             long millis = SystemClock.currentThreadTimeMillis();\n             if (millis - mLastTime < 50) {\n                 return;\n@@ -1283,43 +1287,59 @@ public boolean isActive() {\n             return mIsShowing;\n         }\n \n+\n         public void updatePosition(HandleView handle, int x, int y) {\n-            final int scrollRows = mEmulator.getScreen().getActiveRows() - mEmulator.mRows;\n-            if (y < mRenderer.mFontLineSpacing) {//up\n-                mTopRow--;\n-                if (mTopRow < -scrollRows) {\n-                    mTopRow = -scrollRows;\n-                }\n-            } else if (y + 2 * mRenderer.mFontLineSpacing > TerminalView.this.getHeight()) {//down\n-                mTopRow++;\n-                if (mTopRow > 0) {\n-                    mTopRow = 0;\n-                }\n-            }\n+\n+            TerminalBuffer screen = mEmulator.getScreen();\n+            final int scrollRows = screen.getActiveRows() - mEmulator.mRows;\n             if (handle == mStartHandle) {\n                 mSelX1 = getCursorX(x);\n                 mSelY1 = getCursorY(y);\n                 if (mSelX1 < 0) {\n                     mSelX1 = 0;\n                 }\n+\n                 if (mSelY1 < -scrollRows) {\n                     mSelY1 = -scrollRows;\n+\n                 } else if (mSelY1 > mEmulator.mRows - 1) {\n                     mSelY1 = mEmulator.mRows - 1;\n+\n                 }\n \n+\n                 if (mSelY1 > mSelY2) {\n                     mSelY1 = mSelY2;\n                 }\n                 if (mSelY1 == mSelY2 && mSelX1 > mSelX2) {\n                     mSelX1 = mSelX2;\n                 }\n+\n+                if (!mEmulator.isAlternateBufferActive()) {\n+                    if (mSelY1 <= mTopRow) {\n+                        mTopRow--;\n+                        if (mTopRow < -scrollRows) {\n+                            mTopRow = -scrollRows;\n+                        }\n+                    } else if (mSelY1 >= mTopRow + mEmulator.mRows) {\n+                        mTopRow++;\n+                        if (mTopRow > 0) {\n+                            mTopRow = 0;\n+                        }\n+                    }\n+                }\n+\n+\n+                mSelX1 = getValidCurX(screen, mSelY1, mSelX1);\n+\n             } else {\n                 mSelX2 = getCursorX(x);\n                 mSelY2 = getCursorY(y);\n                 if (mSelX2 < 0) {\n                     mSelX2 = 0;\n                 }\n+\n+\n                 if (mSelY2 < -scrollRows) {\n                     mSelY2 = -scrollRows;\n                 } else if (mSelY2 > mEmulator.mRows - 1) {\n@@ -1332,19 +1352,68 @@ public void updatePosition(HandleView handle, int x, int y) {\n                 if (mSelY1 == mSelY2 && mSelX1 > mSelX2) {\n                     mSelX2 = mSelX1;\n                 }\n+\n+                if (!mEmulator.isAlternateBufferActive()) {\n+                    if (mSelY2 <= mTopRow) {\n+                        mTopRow--;\n+                        if (mTopRow < -scrollRows) {\n+                            mTopRow = -scrollRows;\n+                        }\n+                    } else if (mSelY2 >= mTopRow + mEmulator.mRows) {\n+                        mTopRow++;\n+                        if (mTopRow > 0) {\n+                            mTopRow = 0;\n+                        }\n+                    }\n+                }\n+\n+                mSelX2 = getValidCurX(screen, mSelY2, mSelX2);\n             }\n \n             invalidate();\n         }\n \n+\n+        private int getValidCurX(TerminalBuffer screen, int cy, int cx) {\n+            String line = screen.getSelectedText(0, cy, cx, cy);\n+            if (!TextUtils.isEmpty(line)) {\n+                int col = 0;\n+                for (int i = 0, len = line.length(); i < len; i++) {\n+                    char ch1 = line.charAt(i);\n+                    if (ch1 == 0) {\n+                        break;\n+                    }\n+\n+\n+                    int wc;\n+                    if (Character.isHighSurrogate(ch1) && i + 1 < len) {\n+                        char ch2 = line.charAt(++i);\n+                        wc = WcWidth.width(Character.toCodePoint(ch1, ch2));\n+                    } else {\n+                        wc = WcWidth.width(ch1);\n+                    }\n+\n+                    final int cend = col + wc;\n+                    if (cx > col && cx < cend) {\n+                        return cend;\n+                    }\n+                    if (cend == col) {\n+                        return col;\n+                    }\n+                    col = cend;\n+                }\n+            }\n+            return cx;\n+        }\n+\n         public void updatePosition() {\n             if (!isActive()) {\n                 return;\n             }\n \n             mStartHandle.positionAtCursor(mSelX1, mSelY1);\n \n-            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2);\n+            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2); //bug\n \n             if (mActionMode != null) {\n                 mActionMode.invalidate();",
      "parent_sha": "fdb3764f5c11cc5a0581d5741938f22f8782f730"
    }
  },
  {
    "oid": "41d0d6001704f744d9d28e0b9ec09a342841549f",
    "message": "Respect content type termux-open for url:s",
    "date": "2017-03-28T21:52:52Z",
    "url": "https://github.com/termux/termux-app/commit/41d0d6001704f744d9d28e0b9ec09a342841549f",
    "details": {
      "sha": "8e9ef390853ff19fc3d5eb0100b2d28998c5cfd8",
      "filename": "app/src/main/java/com/termux/app/TermuxOpenReceiver.java",
      "status": "modified",
      "additions": 18,
      "deletions": 13,
      "changes": 31,
      "blob_url": "https://github.com/termux/termux-app/blob/41d0d6001704f744d9d28e0b9ec09a342841549f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxOpenReceiver.java",
      "raw_url": "https://github.com/termux/termux-app/raw/41d0d6001704f744d9d28e0b9ec09a342841549f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxOpenReceiver.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxOpenReceiver.java?ref=41d0d6001704f744d9d28e0b9ec09a342841549f",
      "patch": "@@ -29,23 +29,10 @@ public void onReceive(Context context, Intent intent) {\n             return;\n         }\n \n-        final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals(\"file\");\n-        if (isExternalUrl) {\n-            Intent viewIntent = new Intent(Intent.ACTION_VIEW, data);\n-            viewIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-            try {\n-                context.startActivity(viewIntent);\n-            } catch (ActivityNotFoundException e) {\n-                Log.e(EmulatorDebug.LOG_TAG, \"termux-open: No app handles the url \" + data);\n-            }\n-            return;\n-        }\n-\n         final String filePath = data.getPath();\n         final String contentTypeExtra = intent.getStringExtra(\"content-type\");\n         final boolean useChooser = intent.getBooleanExtra(\"chooser\", false);\n         final String intentAction = intent.getAction() == null ? Intent.ACTION_VIEW : intent.getAction();\n-\n         switch (intentAction) {\n             case Intent.ACTION_SEND:\n             case Intent.ACTION_VIEW:\n@@ -56,6 +43,24 @@ public void onReceive(Context context, Intent intent) {\n                 break;\n         }\n \n+        final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals(\"file\");\n+        if (isExternalUrl) {\n+            Intent urlIntent = new Intent(intentAction, data);\n+            if (intentAction.equals(Intent.ACTION_SEND)) {\n+                urlIntent.putExtra(Intent.EXTRA_TEXT, data.toString());\n+                urlIntent.setData(null);\n+            } else if (contentTypeExtra != null) {\n+                urlIntent.setDataAndType(data, contentTypeExtra);\n+            }\n+            urlIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+            try {\n+                context.startActivity(urlIntent);\n+            } catch (ActivityNotFoundException e) {\n+                Log.e(EmulatorDebug.LOG_TAG, \"termux-open: No app handles the url \" + data);\n+            }\n+            return;\n+        }\n+\n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {\n             Log.e(EmulatorDebug.LOG_TAG, \"termux-open: Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");",
      "parent_sha": "12ac0fa73c6ed4dc0434fbcc4aa1363abd1abbad"
    }
  },
  {
    "oid": "2b6e9ade075d9365ae5bc4092ee51e2845f8c8c5",
    "message": "ExtraKeysView: Handle multiple and popup SpecialButtons",
    "date": "2021-02-03T21:26:08Z",
    "url": "https://github.com/termux/termux-app/commit/2b6e9ade075d9365ae5bc4092ee51e2845f8c8c5",
    "details": {
      "sha": "7b875f75c229f60b9220d9909e917cb3426fb3fe",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 56,
      "deletions": 27,
      "changes": 83,
      "blob_url": "https://github.com/termux/termux-app/blob/2b6e9ade075d9365ae5bc4092ee51e2845f8c8c5/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/2b6e9ade075d9365ae5bc4092ee51e2845f8c8c5/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=2b6e9ade075d9365ae5bc4092ee51e2845f8c8c5",
      "patch": "@@ -6,13 +6,16 @@\n import android.provider.Settings;\n import android.util.AttributeSet;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.ScheduledExecutorService;\n \n import java.util.Map;\n import java.util.HashMap;\n import java.util.Arrays;\n+import java.util.stream.Collectors;\n \n import android.view.Gravity;\n import android.view.HapticFeedbackConstants;\n@@ -129,15 +132,30 @@ public enum SpecialButton {\n \n     private static class SpecialButtonState {\n         boolean isOn = false;\n-        ToggleButton button = null;\n+        boolean isActive = false;\n+        List<ToggleButton> buttons = new ArrayList<>();\n+\n+        void toggle(boolean value) {\n+            isActive = value;\n+            buttons.forEach(button -> {\n+                button.setChecked(value);\n+                button.setTextColor(value ? INTERESTING_COLOR : TEXT_COLOR);\n+            });\n+        }\n     }\n \n-    private Map<SpecialButton, SpecialButtonState> specialButtons = new HashMap<SpecialButton, SpecialButtonState>() {{\n+    private final Map<SpecialButton, SpecialButtonState> specialButtons = new HashMap<SpecialButton, SpecialButtonState>() {{\n         put(SpecialButton.CTRL, new SpecialButtonState());\n         put(SpecialButton.ALT, new SpecialButtonState());\n         put(SpecialButton.FN, new SpecialButtonState());\n     }};\n \n+    private final List<String> specialButtonsKeys = specialButtons.keySet().stream().map(Enum::name).collect(Collectors.toList());\n+\n+    private boolean isSpecialButton(ExtraKeyButton button) {\n+        return specialButtonsKeys.contains(button.getKey());\n+    }\n+\n     private ScheduledExecutorService scheduledExecutor;\n     private PopupWindow popupWindow;\n     private int longPressCount;\n@@ -147,30 +165,40 @@ public boolean readSpecialButton(SpecialButton name) {\n         if (state == null)\n             throw new RuntimeException(\"Must be a valid special button (see source)\");\n \n-        if (! state.isOn)\n+        if (!state.isOn)\n             return false;\n \n-        if (state.button == null) {\n+        if (!state.isActive) {\n             return false;\n         }\n \n-        if (state.button.isPressed())\n-            return true;\n-\n-        if (! state.button.isChecked())\n-            return false;\n+        state.toggle(false);\n \n-        state.button.setChecked(false);\n-        state.button.setTextColor(TEXT_COLOR);\n         return true;\n     }\n \n-    void popup(View view, String text) {\n+    private ToggleButton createSpecialButton(String buttonKey, boolean needUpdate) {\n+        SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonKey));\n+        state.isOn = true;\n+        ToggleButton toggleButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+        toggleButton.setTextColor(state.isActive ? INTERESTING_COLOR : TEXT_COLOR);\n+        if (needUpdate) {\n+            state.buttons.add(toggleButton);\n+        }\n+        return toggleButton;\n+    }\n+\n+    void popup(View view, ExtraKeyButton extraButton) {\n         int width = view.getMeasuredWidth();\n         int height = view.getMeasuredHeight();\n-        Button button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n-        button.setText(text);\n-        button.setTextColor(TEXT_COLOR);\n+        Button button;\n+        if(isSpecialButton(extraButton)) {\n+            button = createSpecialButton(extraButton.getKey(), false);\n+        } else {\n+            button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+            button.setTextColor(TEXT_COLOR);\n+        }\n+        button.setText(extraButton.getDisplay());\n         button.setPadding(0, 0, 0, 0);\n         button.setMinHeight(0);\n         button.setMinWidth(0);\n@@ -219,7 +247,7 @@ void reload(ExtraKeysInfos infos) {\n             return;\n \n         for(SpecialButtonState state : specialButtons.values())\n-            state.button = null;\n+            state.buttons = new ArrayList<>();\n \n         removeAllViews();\n \n@@ -233,10 +261,8 @@ void reload(ExtraKeysInfos infos) {\n                 final ExtraKeyButton buttonInfo = buttons[row][col];\n \n                 Button button;\n-                if(Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonInfo.getKey())) {\n-                    SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getKey())); // for valueOf: https://stackoverflow.com/a/604426/1980630\n-                    state.isOn = true;\n-                    button = state.button = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                if(isSpecialButton(buttonInfo)) {\n+                    button = createSpecialButton(buttonInfo.getKey(), true);\n                     button.setClickable(true);\n                 } else {\n                     button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n@@ -262,10 +288,9 @@ void reload(ExtraKeysInfos infos) {\n                     }\n \n                     View root = getRootView();\n-                    if (Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonInfo.getKey())) {\n-                        ToggleButton self = (ToggleButton) finalButton;\n-                        self.setChecked(self.isChecked());\n-                        self.setTextColor(self.isChecked() ? INTERESTING_COLOR : TEXT_COLOR);\n+                    if (isSpecialButton(buttonInfo)) {\n+                        SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getKey()));\n+                        state.toggle(!state.isActive);\n                     } else {\n                         sendKey(root, buttonInfo);\n                     }\n@@ -295,8 +320,7 @@ void reload(ExtraKeysInfos infos) {\n                                         scheduledExecutor = null;\n                                     }\n                                     v.setBackgroundColor(BUTTON_COLOR);\n-                                    String extraButtonDisplayedText = buttonInfo.getPopup().getDisplay();\n-                                    popup(v, extraButtonDisplayedText);\n+                                    popup(v, buttonInfo.getPopup());\n                                 }\n                                 if (popupWindow != null && event.getY() > 0) {\n                                     v.setBackgroundColor(BUTTON_PRESSED_COLOR);\n@@ -325,7 +349,12 @@ void reload(ExtraKeysInfos infos) {\n                                     popupWindow.dismiss();\n                                     popupWindow = null;\n                                     if (buttonInfo.getPopup() != null) {\n-                                        sendKey(root, buttonInfo.getPopup());\n+                                        if (isSpecialButton(buttonInfo.getPopup())) {\n+                                            SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getPopup().getKey()));\n+                                            state.toggle(!state.isActive);\n+                                        } else {\n+                                            sendKey(root, buttonInfo.getPopup());\n+                                        }\n                                     }\n                                 } else {\n                                     v.performClick();",
      "parent_sha": "6d1b0efd3b245145d9444386aa9e9f56080df600"
    }
  },
  {
    "oid": "5a511a2ba394c78c9bcf771ac45a16dc0498efbb",
    "message": "Revert some unneeded changes to Logger done in 679e0de0\n\nLogger was updated to get suppressed exceptions by calling `Throwable[] getSuppressed()` but `printStackTrace()` would already log them, even though shortened stacktrace with `... n more` notation, but this should be enough for debugging since main throwable stacktrace should have enough class line info. Manually logging full suppressed stacktraces would likely trigger `LOGGER_ENTRY_MAX_PAYLOAD` and split the message into multiple log entries and also duplicate the suppressed stacktraces, so best revert this unless ever necessary.",
    "date": "2021-07-01T02:12:48Z",
    "url": "https://github.com/termux/termux-app/commit/5a511a2ba394c78c9bcf771ac45a16dc0498efbb",
    "details": {
      "sha": "2202a7bcdeab92e8106eb455defeef3172880c85",
      "filename": "termux-shared/src/main/java/com/termux/shared/logger/Logger.java",
      "status": "modified",
      "additions": 13,
      "deletions": 74,
      "changes": 87,
      "blob_url": "https://github.com/termux/termux-app/blob/5a511a2ba394c78c9bcf771ac45a16dc0498efbb/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java",
      "raw_url": "https://github.com/termux/termux-app/raw/5a511a2ba394c78c9bcf771ac45a16dc0498efbb/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java?ref=5a511a2ba394c78c9bcf771ac45a16dc0498efbb",
      "patch": "@@ -219,105 +219,54 @@ public static void logDebugAndShowToast(Context context, String message) {\n \n \n \n-    public static void logStackTraceWithMessage(String tag, String message, Throwable throwable, boolean getSuppressed) {\n-        Logger.logErrorExtended(tag, getMessageAndStackTraceString(message, throwable, getSuppressed));\n-    }\n-\n     public static void logStackTraceWithMessage(String tag, String message, Throwable throwable) {\n-        logStackTraceWithMessage(tag, message, throwable, true);\n-    }\n-\n-    public static void logStackTraceWithMessage(String message, Throwable throwable, boolean getSuppressed) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable, getSuppressed);\n+        Logger.logErrorExtended(tag, getMessageAndStackTraceString(message, throwable));\n     }\n \n     public static void logStackTraceWithMessage(String message, Throwable throwable) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable, true);\n-    }\n-\n-\n-    public static void logStackTrace(String tag, Throwable throwable, boolean getSuppressed) {\n-        logStackTraceWithMessage(tag, null, throwable, getSuppressed);\n+        logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable);\n     }\n \n     public static void logStackTrace(String tag, Throwable throwable) {\n-        logStackTraceWithMessage(tag, null, throwable, true);\n-    }\n-\n-\n-    public static void logStackTrace(Throwable throwable, boolean getSuppressed) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable, getSuppressed);\n+        logStackTraceWithMessage(tag, null, throwable);\n     }\n \n     public static void logStackTrace(Throwable throwable) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable, true);\n+        logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable);\n     }\n \n \n \n-    public static void logStackTracesWithMessage(String tag, String message, List<Throwable> throwablesList, boolean getSuppressed) {\n-        Logger.logErrorExtended(tag, getMessageAndStackTracesString(message, throwablesList, getSuppressed));\n-    }\n-\n     public static void logStackTracesWithMessage(String tag, String message, List<Throwable> throwablesList) {\n-        Logger.logErrorExtended(tag, getMessageAndStackTracesString(message, throwablesList, true));\n+        Logger.logErrorExtended(tag, getMessageAndStackTracesString(message, throwablesList));\n     }\n \n \n \n     public static String getMessageAndStackTraceString(String message, Throwable throwable) {\n-        return getMessageAndStackTraceString(message, throwable, true);\n-    }\n-\n-    public static String getMessageAndStackTraceString(String message, Throwable throwable, boolean getSuppressed) {\n         if (message == null && throwable == null)\n             return null;\n         else if (message != null && throwable != null)\n-            return message + \":\\n\" + getStackTraceString(throwable, getSuppressed);\n+            return message + \":\\n\" + getStackTraceString(throwable);\n         else if (throwable == null)\n             return message;\n         else\n-            return getStackTraceString(throwable, getSuppressed);\n+            return getStackTraceString(throwable);\n     }\n \n-\n-\n     public static String getMessageAndStackTracesString(String message, List<Throwable> throwablesList) {\n-        return getMessageAndStackTracesString(message, throwablesList, true);\n-    }\n-\n-    public static String getMessageAndStackTracesString(String message, List<Throwable> throwablesList, boolean getSuppressed) {\n         if (message == null && (throwablesList == null || throwablesList.size() == 0))\n             return null;\n         else if (message != null && (throwablesList != null && throwablesList.size() != 0))\n-            return message + \":\\n\" + getStackTracesString(null, getStackTracesStringArray(throwablesList, getSuppressed));\n+            return message + \":\\n\" + getStackTracesString(null, getStackTracesStringArray(throwablesList));\n         else if (throwablesList == null || throwablesList.size() == 0)\n             return message;\n         else\n-            return getStackTracesString(null, getStackTracesStringArray(throwablesList, getSuppressed));\n+            return getStackTracesString(null, getStackTracesStringArray(throwablesList));\n     }\n \n \n \n-    public static String getStackTraceString(Throwable throwable, boolean getSuppressed) {\n-        if (throwable == null) return null;\n-\n-        StringBuilder stackTraceString = new StringBuilder();\n-        stackTraceString.append(getStackTraceString(throwable));\n-\n-        if (getSuppressed) {\n-            Throwable[] suppressedThrowablesArray = throwable.getSuppressed();\n-            if (suppressedThrowablesArray != null && suppressedThrowablesArray.length > 0) {\n-                for (Throwable suppressedThrowable : suppressedThrowablesArray) {\n-                    if (suppressedThrowable == null) continue;\n-                    stackTraceString.append(\"\\n\\n\").append(getStackTraceString(suppressedThrowable));\n-                }\n-            }\n-        }\n-\n-        return stackTraceString.toString();\n-    }\n-\n     public static String getStackTraceString(Throwable throwable) {\n         if (throwable == null) return null;\n \n@@ -339,25 +288,15 @@ public static String getStackTraceString(Throwable throwable) {\n \n \n \n-    public static String[] getStackTracesStringArray(Throwable throwable, boolean getSuppressed) {\n-        return getStackTracesStringArray(Collections.singletonList(throwable), getSuppressed);\n-    }\n-\n     public static String[] getStackTracesStringArray(Throwable throwable) {\n-        return getStackTracesStringArray(Collections.singletonList(throwable), true);\n+        return getStackTracesStringArray(Collections.singletonList(throwable));\n     }\n \n     public static String[] getStackTracesStringArray(List<Throwable> throwablesList) {\n-        return getStackTracesStringArray(throwablesList, true);\n-\n-    }\n-\n-    public static String[] getStackTracesStringArray(List<Throwable> throwablesList, boolean getSuppressed) {\n         if (throwablesList == null) return null;\n-\n         final String[] stackTraceStringArray = new String[throwablesList.size()];\n         for (int i = 0; i < throwablesList.size(); i++) {\n-            stackTraceStringArray[i] = getStackTraceString(throwablesList.get(i), getSuppressed);\n+            stackTraceStringArray[i] = getStackTraceString(throwablesList.get(i));\n         }\n         return stackTraceStringArray;\n     }\n@@ -415,7 +354,7 @@ public static String getMultiLineLogStringEntry(String label, Object object, Str\n         else\n             return  label + \": \"  +  def;\n     }\n-    \n+\n \n \n     public static void showToast(final Context context, final String toastText, boolean longDuration) {\n@@ -444,7 +383,7 @@ public static CharSequence[] getLogLevelLabelsArray(Context context, CharSequenc\n             logLevelLabels[i] = getLogLevelLabel(context, Integer.parseInt(logLevels[i].toString()), addDefaultTag);\n         }\n \n-       return logLevelLabels;\n+        return logLevelLabels;\n     }\n \n     public static String getLogLevelLabel(final Context context, final int logLevel, final boolean addDefaultTag) {",
      "parent_sha": "5c50964b1fe3f9d41b84e346ac865102c3de7122"
    }
  },
  {
    "oid": "09ecd14764ab31534f0769855ac2d56aa394141c",
    "message": "Fix crash when using some unicode characters\n\nWe should never try to look at characters in a row after those\nactually used.",
    "date": "2015-11-12T23:14:35Z",
    "url": "https://github.com/termux/termux-app/commit/09ecd14764ab31534f0769855ac2d56aa394141c",
    "details": {
      "sha": "0b8903eb98420f37b1b38f0ceb9096cac3a49d13",
      "filename": "app/src/main/java/com/termux/view/TerminalRenderer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/termux/termux-app/blob/09ecd14764ab31534f0769855ac2d56aa394141c/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalRenderer.java",
      "raw_url": "https://github.com/termux/termux-app/raw/09ecd14764ab31534f0769855ac2d56aa394141c/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalRenderer.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalRenderer.java?ref=09ecd14764ab31534f0769855ac2d56aa394141c",
      "patch": "@@ -80,6 +80,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n \n \t\t\tTerminalRow lineObject = screen.allocateFullLineIfNecessary(screen.externalToInternalRow(row));\n \t\t\tfinal char[] line = lineObject.mText;\n+\t\t\tfinal int charsUsedInLine = lineObject.getSpaceUsed();\n \n \t\t\tint lastRunStyle = 0;\n \t\t\tboolean lastRunInsideCursor = false;\n@@ -125,7 +126,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n \t\t\t\tmeasuredWidthForRun += measuredCodePointWidth;\n \t\t\t\tcolumn += codePointWcWidth;\n \t\t\t\tcurrentCharIndex += charsForCodePoint;\n-\t\t\t\twhile (WcWidth.width(line, currentCharIndex) <= 0) {\n+\t\t\t\twhile (currentCharIndex < charsUsedInLine && WcWidth.width(line, currentCharIndex) <= 0) {\n \t\t\t\t\t// Eat combining chars so that they are treated as part of the last non-combining code point,\n \t\t\t\t\t// instead of e.g. being considered inside the cursor in the next run.\n \t\t\t\t\tcurrentCharIndex += Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;",
      "parent_sha": "89912be500187526b1f093377ee0f18212354a10"
    }
  },
  {
    "oid": "4c93cb42f175b41671a68d1236fc2495fd748d7d",
    "message": "Use constant for intent extra key",
    "date": "2016-12-25T23:57:09Z",
    "url": "https://github.com/termux/termux-app/commit/4c93cb42f175b41671a68d1236fc2495fd748d7d",
    "details": {
      "sha": "55341170564a57cbb07e15f5403ab78ea934dad1",
      "filename": "app/src/main/java/com/termux/app/TermuxService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/termux/termux-app/blob/4c93cb42f175b41671a68d1236fc2495fd748d7d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java",
      "raw_url": "https://github.com/termux/termux-app/raw/4c93cb42f175b41671a68d1236fc2495fd748d7d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java?ref=4c93cb42f175b41671a68d1236fc2495fd748d7d",
      "patch": "@@ -58,6 +58,7 @@ public final class TermuxService extends Service implements SessionChangedCallba\n     public static final String EXTRA_ARGUMENTS = \"com.termux.execute.arguments\";\n \n     public static final String EXTRA_CURRENT_WORKING_DIRECTORY = \"com.termux.execute.cwd\";\n+    private static final String EXTRA_EXECUTE_IN_BACKGROUND = \"com.termux.execute.background\";\n \n     /** This service is only bound from inside the same process and never uses IPC. */\n     class LocalBinder extends Binder {\n@@ -126,7 +127,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             String[] arguments = (executableUri == null ? null : intent.getStringArrayExtra(EXTRA_ARGUMENTS));\n             String cwd = intent.getStringExtra(EXTRA_CURRENT_WORKING_DIRECTORY);\n \n-            if (intent.getBooleanExtra(\"com.termux.execute.background\", false)) {\n+            if (intent.getBooleanExtra(EXTRA_EXECUTE_IN_BACKGROUND, false)) {\n                 BackgroundJob task = new BackgroundJob(cwd, executablePath, arguments, this);\n                 mBackgroundTasks.add(task);\n                 updateNotification();",
      "parent_sha": "34afb9de4397f3d7e34e2029bbcea0713795dc25"
    }
  },
  {
    "oid": "b6ea29d260b87cbe8203a9a334b9f378612ed52b",
    "message": "Remove duplicate updateNotification() calls",
    "date": "2016-12-23T23:25:24Z",
    "url": "https://github.com/termux/termux-app/commit/b6ea29d260b87cbe8203a9a334b9f378612ed52b",
    "details": {
      "sha": "7e3e0ce16a328bf623bb35d553e2dd38df3707e2",
      "filename": "app/src/main/java/com/termux/app/TermuxService.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/termux/termux-app/blob/b6ea29d260b87cbe8203a9a334b9f378612ed52b/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java",
      "raw_url": "https://github.com/termux/termux-app/raw/b6ea29d260b87cbe8203a9a334b9f378612ed52b/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxService.java?ref=b6ea29d260b87cbe8203a9a334b9f378612ed52b",
      "patch": "@@ -106,7 +106,6 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                 WifiManager wm = (WifiManager) getSystemService(Context.WIFI_SERVICE);\n                 mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, EmulatorDebug.LOG_TAG);\n                 mWifiLock.acquire();\n-                updateNotification();\n \n                 updateNotification();\n             }\n@@ -117,18 +116,19 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n \n                 mWifiLock.release();\n                 mWifiLock = null;\n-                updateNotification();\n \n                 updateNotification();\n             }\n         } else if (ACTION_EXECUTE.equals(action)) {\n             Uri executableUri = intent.getData();\n             String executablePath = (executableUri == null ? null : executableUri.getPath());\n+\n             String[] arguments = (executableUri == null ? null : intent.getStringArrayExtra(EXTRA_ARGUMENTS));\n             String cwd = intent.getStringExtra(EXTRA_CURRENT_WORKING_DIRECTORY);\n \n             if (intent.getBooleanExtra(\"com.termux.execute.background\", false)) {\n-                mBackgroundTasks.add(new BackgroundJob(cwd, executablePath, arguments, this));\n+                BackgroundJob task = new BackgroundJob(cwd, executablePath, arguments, this);\n+                mBackgroundTasks.add(task);\n                 updateNotification();\n             } else {\n                 TerminalSession newSession = createTermSession(executablePath, arguments, cwd, false);",
      "parent_sha": "289d58a2f02843cbde8c5f19bd35d47aac978589"
    }
  },
  {
    "oid": "2c0e9c6c5c28b42e1732ca425ee75a4530a9724e",
    "message": "Added: Add Logger.logInfoAndShowToast() and log messages even if not showing toast due to null Context",
    "date": "2022-01-22T20:40:22Z",
    "url": "https://github.com/termux/termux-app/commit/2c0e9c6c5c28b42e1732ca425ee75a4530a9724e",
    "details": {
      "sha": "f6d386fc84489e715dd9f2f4ca44ef669c4cb8ba",
      "filename": "termux-shared/src/main/java/com/termux/shared/logger/Logger.java",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/termux/termux-app/blob/2c0e9c6c5c28b42e1732ca425ee75a4530a9724e/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java",
      "raw_url": "https://github.com/termux/termux-app/raw/2c0e9c6c5c28b42e1732ca425ee75a4530a9724e/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java?ref=2c0e9c6c5c28b42e1732ca425ee75a4530a9724e",
      "patch": "@@ -195,9 +195,20 @@ public static void logVerboseForce(String tag, String message) {\n \n \n \n-    public static void logErrorAndShowToast(Context context, String tag, String message) {\n-        if (context == null) return;\n+    public static void logInfoAndShowToast(Context context, String tag, String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL) {\n+            logInfo(tag, message);\n+            showToast(context, message, true);\n+        }\n+    }\n \n+    public static void logInfoAndShowToast(Context context, String message) {\n+        logInfoAndShowToast(context, DEFAULT_LOG_TAG, message);\n+    }\n+\n+\n+\n+    public static void logErrorAndShowToast(Context context, String tag, String message) {\n         if (CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL) {\n             logError(tag, message);\n             showToast(context, message, true);\n@@ -211,8 +222,6 @@ public static void logErrorAndShowToast(Context context, String message) {\n \n \n     public static void logDebugAndShowToast(Context context, String tag, String message) {\n-        if (context == null) return;\n-\n         if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG) {\n             logDebug(tag, message);\n             showToast(context, message, true);",
      "parent_sha": "9eeb2babd7638f8b2967ebd93020e7e37d19cc2b"
    }
  },
  {
    "oid": "23333c074a2be2786ca2e659edbbdf438221a45f",
    "message": "Fix NPE regression in version 0.44",
    "date": "2016-12-27T09:42:41Z",
    "url": "https://github.com/termux/termux-app/commit/23333c074a2be2786ca2e659edbbdf438221a45f",
    "details": {
      "sha": "b11d37db7022f1c1b3b65b070c4a993d3cc839c6",
      "filename": "app/src/main/java/com/termux/app/TermuxActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/23333c074a2be2786ca2e659edbbdf438221a45f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "raw_url": "https://github.com/termux/termux-app/raw/23333c074a2be2786ca2e659edbbdf438221a45f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java?ref=23333c074a2be2786ca2e659edbbdf438221a45f",
      "patch": "@@ -523,7 +523,7 @@ public void onClick(DialogInterface dialog, int which) {\n             }\n         } else {\n             Intent i = getIntent();\n-            if (i != null && i.getAction().equals(Intent.ACTION_RUN)) {\n+            if (i != null && Intent.ACTION_RUN.equals(i.getAction())) {\n                 // Android 7.1 app shortcut from res/xml/shortcuts.xml.\n                 addNewSession(false, null);\n             } else {",
      "parent_sha": "f11644fa51fe4d94afd3f51c921883260eb86b0b"
    }
  },
  {
    "oid": "35a4fdacbe4d75bae0d648cf66a6526d0daee313",
    "message": "Add selection mode cursor controller",
    "date": "2019-10-05T10:05:42Z",
    "url": "https://github.com/termux/termux-app/commit/35a4fdacbe4d75bae0d648cf66a6526d0daee313",
    "details": {
      "sha": "2065248779fe9afe6ef9dfa29c1df7381b2ea8e4",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 635,
      "deletions": 106,
      "changes": 741,
      "blob_url": "https://github.com/termux/termux-app/blob/35a4fdacbe4d75bae0d648cf66a6526d0daee313/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/35a4fdacbe4d75bae0d648cf66a6526d0daee313/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=35a4fdacbe4d75bae0d648cf66a6526d0daee313",
      "patch": "@@ -8,14 +8,13 @@\n import android.graphics.Canvas;\n import android.graphics.Rect;\n import android.graphics.Typeface;\n-import android.graphics.drawable.BitmapDrawable;\n+import android.graphics.drawable.Drawable;\n import android.os.Build;\n import android.text.Editable;\n import android.text.InputType;\n import android.text.TextUtils;\n import android.util.AttributeSet;\n import android.util.Log;\n-import android.view.accessibility.AccessibilityManager;\n import android.view.ActionMode;\n import android.view.HapticFeedbackConstants;\n import android.view.InputDevice;\n@@ -25,9 +24,16 @@\n import android.view.MenuItem;\n import android.view.MotionEvent;\n import android.view.View;\n+import android.view.ViewConfiguration;\n+import android.view.ViewGroup;\n+import android.view.ViewParent;\n+import android.view.ViewTreeObserver;\n+import android.view.WindowManager;\n+import android.view.accessibility.AccessibilityManager;\n import android.view.inputmethod.BaseInputConnection;\n import android.view.inputmethod.EditorInfo;\n import android.view.inputmethod.InputConnection;\n+import android.widget.PopupWindow;\n import android.widget.Scroller;\n \n import com.termux.terminal.EmulatorDebug;\n@@ -54,11 +60,14 @@ public final class TerminalView extends View {\n     /** The top row of text to display. Ranges from -activeTranscriptRows to 0. */\n     int mTopRow;\n \n-    boolean mIsSelectingText = false, mIsDraggingLeftSelection, mInitialTextSelection;\n+    boolean mIsSelectingText = false;\n     int mSelX1 = -1, mSelX2 = -1, mSelY1 = -1, mSelY2 = -1;\n-    float mSelectionDownX, mSelectionDownY;\n     private ActionMode mActionMode;\n-    private BitmapDrawable mLeftSelectionHandle, mRightSelectionHandle;\n+    Drawable mSelectHandleLeft;\n+    Drawable mSelectHandleRight;\n+    final int[] mTempCoords = new int[2];\n+    Rect mTempRect;\n+    private SelectionModifierCursorController mSelectionModifierCursorController;\n \n     float mScaleFactor = 1.f;\n     final GestureAndScaleRecognizer mGestureRecognizer;\n@@ -102,7 +111,7 @@ public boolean onUp(MotionEvent e) {\n             public boolean onSingleTapUp(MotionEvent e) {\n                 if (mEmulator == null) return true;\n                 if (mIsSelectingText) {\n-                    toggleSelectingText(null);\n+                    stopTextSelectionMode();\n                     return true;\n                 }\n                 requestFocus();\n@@ -117,7 +126,7 @@ public boolean onSingleTapUp(MotionEvent e) {\n \n             @Override\n             public boolean onScroll(MotionEvent e, float distanceX, float distanceY) {\n-                if (mEmulator == null || mIsSelectingText) return true;\n+                if (mEmulator == null) return true;\n                 if (mEmulator.isMouseTrackingActive() && e.isFromSource(InputDevice.SOURCE_MOUSE)) {\n                     // If moving with mouse pointer while pressing button, report that instead of scroll.\n                     // This means that we never report moving with button press-events for touch input,\n@@ -195,7 +204,7 @@ public void onLongPress(MotionEvent e) {\n                 if (mClient.onLongPress(e)) return;\n                 if (!mIsSelectingText) {\n                     performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n-                    toggleSelectingText(e);\n+                    startSelectingText(e);\n                 }\n             }\n         });\n@@ -368,7 +377,7 @@ public void onScreenUpdated() {\n             if (-mTopRow + rowShift > rowsInHistory) {\n                 // .. unless we're hitting the end of history transcript, in which\n                 // case we abort text selection and scroll to end.\n-                toggleSelectingText(null);\n+                stopTextSelectionMode();\n             } else {\n                 skipScrolling = true;\n                 mTopRow -= rowShift;\n@@ -475,56 +484,7 @@ public boolean onTouchEvent(MotionEvent ev) {\n         final int action = ev.getAction();\n \n         if (mIsSelectingText) {\n-            int cy = (int) (ev.getY() / mRenderer.mFontLineSpacing) + mTopRow;\n-            int cx = (int) (ev.getX() / mRenderer.mFontWidth);\n-\n-            switch (action) {\n-                case MotionEvent.ACTION_UP:\n-                    mInitialTextSelection = false;\n-                    break;\n-                case MotionEvent.ACTION_DOWN:\n-                    int distanceFromSel1 = Math.abs(cx - mSelX1) + Math.abs(cy - mSelY1);\n-                    int distanceFromSel2 = Math.abs(cx - mSelX2) + Math.abs(cy - mSelY2);\n-                    mIsDraggingLeftSelection = distanceFromSel1 <= distanceFromSel2;\n-                    mSelectionDownX = ev.getX();\n-                    mSelectionDownY = ev.getY();\n-                    break;\n-                case MotionEvent.ACTION_MOVE:\n-                    if (mInitialTextSelection) break;\n-                    float deltaX = ev.getX() - mSelectionDownX;\n-                    float deltaY = ev.getY() - mSelectionDownY;\n-                    int deltaCols = (int) Math.ceil(deltaX / mRenderer.mFontWidth);\n-                    int deltaRows = (int) Math.ceil(deltaY / mRenderer.mFontLineSpacing);\n-                    mSelectionDownX += deltaCols * mRenderer.mFontWidth;\n-                    mSelectionDownY += deltaRows * mRenderer.mFontLineSpacing;\n-                    if (mIsDraggingLeftSelection) {\n-                        mSelX1 += deltaCols;\n-                        mSelY1 += deltaRows;\n-                    } else {\n-                        mSelX2 += deltaCols;\n-                        mSelY2 += deltaRows;\n-                    }\n-\n-                    mSelX1 = Math.min(mEmulator.mColumns, Math.max(0, mSelX1));\n-                    mSelX2 = Math.min(mEmulator.mColumns, Math.max(0, mSelX2));\n-\n-                    if (mSelY1 == mSelY2 && mSelX1 > mSelX2 || mSelY1 > mSelY2) {\n-                        // Switch handles.\n-                        mIsDraggingLeftSelection = !mIsDraggingLeftSelection;\n-                        int tmpX1 = mSelX1, tmpY1 = mSelY1;\n-                        mSelX1 = mSelX2;\n-                        mSelY1 = mSelY2;\n-                        mSelX2 = tmpX1;\n-                        mSelY2 = tmpY1;\n-                    }\n-\n-                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\n-                        mActionMode.invalidateContentRect();\n-                    invalidate();\n-                    break;\n-                default:\n-                    break;\n-            }\n+            updateFloatingToolbarVisibility(ev);\n             mGestureRecognizer.onTouchEvent(ev);\n             return true;\n         } else if (ev.isFromSource(InputDevice.SOURCE_MOUSE)) {\n@@ -562,7 +522,7 @@ public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyPreIme(keyCode=\" + keyCode + \", event=\" + event + \")\");\n         if (keyCode == KeyEvent.KEYCODE_BACK) {\n             if (mIsSelectingText) {\n-                toggleSelectingText(null);\n+                stopTextSelectionMode();\n                 return true;\n             } else if (mClient.shouldBackButtonBeMappedToEscape()) {\n                 // Intercept back button to treat it as escape:\n@@ -771,59 +731,439 @@ protected void onDraw(Canvas canvas) {\n         } else {\n             mRenderer.render(mEmulator, canvas, mTopRow, mSelY1, mSelY2, mSelX1, mSelX2);\n \n-            if (mIsSelectingText) {\n-                final int gripHandleWidth = mLeftSelectionHandle.getIntrinsicWidth();\n-                final int gripHandleMargin = gripHandleWidth / 4; // See the png.\n-\n-                int right = Math.round((mSelX1) * mRenderer.mFontWidth) + gripHandleMargin;\n-                int top = (mSelY1 + 1 - mTopRow) * mRenderer.mFontLineSpacing + mRenderer.mFontLineSpacingAndAscent;\n-                mLeftSelectionHandle.setBounds(right - gripHandleWidth, top, right, top + mLeftSelectionHandle.getIntrinsicHeight());\n-                mLeftSelectionHandle.draw(canvas);\n \n-                int left = Math.round((mSelX2 + 1) * mRenderer.mFontWidth) - gripHandleMargin;\n-                top = (mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing + mRenderer.mFontLineSpacingAndAscent;\n-                mRightSelectionHandle.setBounds(left, top, left + gripHandleWidth, top + mRightSelectionHandle.getIntrinsicHeight());\n-                mRightSelectionHandle.draw(canvas);\n+            SelectionModifierCursorController selectionController = getSelectionController();\n+            if (selectionController != null && selectionController.isActive()) {\n+                selectionController.updatePosition();\n             }\n         }\n     }\n \n     /** Toggle text selection mode in the view. */\n     @TargetApi(23)\n-    public void toggleSelectingText(MotionEvent ev) {\n-        mIsSelectingText = !mIsSelectingText;\n-        mClient.copyModeChanged(mIsSelectingText);\n+    public void startSelectingText(MotionEvent ev) {\n+        int cx = (int) (ev.getX() / mRenderer.mFontWidth);\n+        final boolean eventFromMouse = ev.isFromSource(InputDevice.SOURCE_MOUSE);\n+        // Offset for finger:\n+        final int SELECT_TEXT_OFFSET_Y = eventFromMouse ? 0 : -40;\n+        int cy = (int) ((ev.getY() + SELECT_TEXT_OFFSET_Y) / mRenderer.mFontLineSpacing) + mTopRow;\n+\n+        mSelX1 = mSelX2 = cx;\n+        mSelY1 = mSelY2 = cy;\n+\n+        TerminalBuffer screen = mEmulator.getScreen();\n+        if (!\" \".equals(screen.getSelectedText(mSelX1, mSelY1, mSelX1, mSelY1))) {\n+            // Selecting something other than whitespace. Expand to word.\n+            while (mSelX1 > 0 && !\"\".equals(screen.getSelectedText(mSelX1 - 1, mSelY1, mSelX1 - 1, mSelY1))) {\n+                mSelX1--;\n+            }\n+            while (mSelX2 < mEmulator.mColumns - 1 && !\"\".equals(screen.getSelectedText(mSelX2 + 1, mSelY1, mSelX2 + 1, mSelY1))) {\n+                mSelX2++;\n+            }\n+        }\n+        startTextSelectionMode();\n+    }\n \n-        if (mIsSelectingText) {\n-            if (mLeftSelectionHandle == null) {\n-                mLeftSelectionHandle = (BitmapDrawable) getContext().getDrawable(R.drawable.text_select_handle_left_material);\n-                mRightSelectionHandle = (BitmapDrawable) getContext().getDrawable(R.drawable.text_select_handle_right_material);\n+    public TerminalSession getCurrentSession() {\n+        return mTermSession;\n+    }\n+\n+    private CharSequence getText() {\n+        return mEmulator.getScreen().getSelectedText(0, mTopRow, mEmulator.mColumns, mTopRow + mEmulator.mRows);\n+    }\n+\n+    @Override\n+    protected void onAttachedToWindow() {\n+        super.onAttachedToWindow();\n+\n+        if (mSelectionModifierCursorController != null) {\n+            getViewTreeObserver().addOnTouchModeChangeListener(mSelectionModifierCursorController);\n+        }\n+    }\n+\n+    @Override\n+    protected void onDetachedFromWindow() {\n+        super.onDetachedFromWindow();\n+\n+        if (mSelectionModifierCursorController != null) {\n+            getViewTreeObserver().removeOnTouchModeChangeListener(mSelectionModifierCursorController);\n+            mSelectionModifierCursorController.onDetached();\n+        }\n+    }\n+\n+\n+    private int getCursorX(float x) {\n+        return (int) (x / mRenderer.mFontWidth);\n+    }\n+\n+    private int getCursorY(float y) {\n+        return (int) (((y - 40) / mRenderer.mFontLineSpacing) + mTopRow);\n+    }\n+\n+    private int getPointX(int cx) {\n+        if (cx > mEmulator.mColumns) {\n+            cx = mEmulator.mColumns;\n+        }\n+        return Math.round(cx * mRenderer.mFontWidth);\n+    }\n+\n+    private int getPointY(int cy) {\n+        return Math.round((cy - mTopRow) * mRenderer.mFontLineSpacing);\n+    }\n+\n+    /**\n+     * A CursorController instance can be used to control a cursor in the text.\n+     * It is not used outside of {@link TerminalView}.\n+     */\n+    private interface CursorController extends ViewTreeObserver.OnTouchModeChangeListener {\n+        /**\n+         * Makes the cursor controller visible on screen. Will be drawn by {@link #draw(Canvas)}.\n+         * See also {@link #hide()}.\n+         */\n+        void show();\n+\n+        /**\n+         * Hide the cursor controller from screen.\n+         * See also {@link #show()}.\n+         */\n+        void hide();\n+\n+        /**\n+         * @return true if the CursorController is currently visible\n+         */\n+        boolean isActive();\n+\n+        /**\n+         * Update the controller's position.\n+         */\n+        void updatePosition(HandleView handle, int x, int y);\n+\n+        void updatePosition();\n+\n+        /**\n+         * This method is called by {@link #onTouchEvent(MotionEvent)} and gives the controller\n+         * a chance to become active and/or visible.\n+         *\n+         * @param event The touch event\n+         */\n+        boolean onTouchEvent(MotionEvent event);\n+\n+        /**\n+         * Called when the view is detached from window. Perform house keeping task, such as\n+         * stopping Runnable thread that would otherwise keep a reference on the context, thus\n+         * preventing the activity to be recycled.\n+         */\n+        void onDetached();\n+    }\n+\n+    private class HandleView extends View {\n+        private Drawable mDrawable;\n+        private PopupWindow mContainer;\n+        private int mPointX;\n+        private int mPointY;\n+        private CursorController mController;\n+        private boolean mIsDragging;\n+        private float mTouchToWindowOffsetX;\n+        private float mTouchToWindowOffsetY;\n+        private float mHotspotX;\n+        private float mHotspotY;\n+        private float mTouchOffsetY;\n+        private int mLastParentX;\n+        private int mLastParentY;\n+\n+        int mHandleWidth;\n+        private final int mOrigOrient;\n+        private int mOrientation;\n+\n+\n+        public static final int LEFT = 0;\n+        public static final int RIGHT = 2;\n+        private int mHandleHeight;\n+\n+        public HandleView(CursorController controller, int orientation) {\n+            super(TerminalView.this.getContext());\n+            mController = controller;\n+            mContainer = new PopupWindow(TerminalView.this.getContext(), null,\n+                android.R.attr.textSelectHandleWindowStyle);\n+            mContainer.setSplitTouchEnabled(true);\n+            mContainer.setClippingEnabled(false);\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+                mContainer.setWindowLayoutType(WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL);\n             }\n+            mContainer.setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);\n+            mContainer.setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);\n \n-            int cx = (int) (ev.getX() / mRenderer.mFontWidth);\n-            final boolean eventFromMouse = ev.isFromSource(InputDevice.SOURCE_MOUSE);\n-            // Offset for finger:\n-            final int SELECT_TEXT_OFFSET_Y = eventFromMouse ? 0 : -40;\n-            int cy = (int) ((ev.getY() + SELECT_TEXT_OFFSET_Y) / mRenderer.mFontLineSpacing) + mTopRow;\n+            this.mOrigOrient = orientation;\n+            setOrientation(orientation);\n+        }\n+\n+        public void setOrientation(int orientation) {\n+            mOrientation = orientation;\n+            int handleWidth = 0;\n+            switch (orientation) {\n+                case LEFT: {\n+                    if (mSelectHandleLeft == null) {\n \n-            mSelX1 = mSelX2 = cx;\n-            mSelY1 = mSelY2 = cy;\n+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+                            mSelectHandleLeft = getContext().getDrawable(\n+                                R.drawable.text_select_handle_left_material);\n+                        } else {\n+                            mSelectHandleLeft = getContext().getResources().getDrawable(\n+                                R.drawable.text_select_handle_left_material);\n \n-            TerminalBuffer screen = mEmulator.getScreen();\n-            if (!\" \".equals(screen.getSelectedText(mSelX1, mSelY1, mSelX1, mSelY1))) {\n-                // Selecting something other than whitespace. Expand to word.\n-                while (mSelX1 > 0 && !\"\".equals(screen.getSelectedText(mSelX1 - 1, mSelY1, mSelX1 - 1, mSelY1))) {\n-                    mSelX1--;\n+                        }\n+                    }\n+                    //\n+                    mDrawable = mSelectHandleLeft;\n+                    handleWidth = mDrawable.getIntrinsicWidth();\n+                    mHotspotX = (handleWidth * 3) / 4;\n+                    break;\n                 }\n-                while (mSelX2 < mEmulator.mColumns - 1 && !\"\".equals(screen.getSelectedText(mSelX2 + 1, mSelY1, mSelX2 + 1, mSelY1))) {\n-                    mSelX2++;\n+\n+                case RIGHT: {\n+                    if (mSelectHandleRight == null) {\n+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+                            mSelectHandleRight = getContext().getDrawable(\n+                                R.drawable.text_select_handle_right_material);\n+                        } else {\n+                            mSelectHandleRight = getContext().getResources().getDrawable(\n+                                R.drawable.text_select_handle_right_material);\n+                        }\n+                    }\n+                    mDrawable = mSelectHandleRight;\n+                    handleWidth = mDrawable.getIntrinsicWidth();\n+                    mHotspotX = handleWidth / 4;\n+                    break;\n                 }\n+\n+            }\n+\n+            mHandleHeight = mDrawable.getIntrinsicHeight();\n+\n+            mHandleWidth = handleWidth;\n+            mTouchOffsetY = -mHandleHeight * 0.3f;\n+            mHotspotY = 0;\n+            invalidate();\n+        }\n+\n+        public void changeOrientation(int orientation) {\n+            if (mOrientation != orientation) {\n+                setOrientation(orientation);\n             }\n+        }\n+\n+        @Override\n+        public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n+            setMeasuredDimension(mDrawable.getIntrinsicWidth(),\n+                mDrawable.getIntrinsicHeight());\n+        }\n+\n+        public void show() {\n+            if (!isPositionVisible()) {\n+                hide();\n+                return;\n+            }\n+            mContainer.setContentView(this);\n+            final int[] coords = mTempCoords;\n+            TerminalView.this.getLocationInWindow(coords);\n+            coords[0] += mPointX;\n+            coords[1] += mPointY;\n+            mContainer.showAtLocation(TerminalView.this, 0, coords[0], coords[1]);\n+        }\n \n-            mInitialTextSelection = true;\n-            mIsDraggingLeftSelection = true;\n-            mSelectionDownX = ev.getX();\n-            mSelectionDownY = ev.getY();\n+        public void hide() {\n+            mIsDragging = false;\n+            mContainer.dismiss();\n+        }\n+\n+        public boolean isShowing() {\n+            return mContainer.isShowing();\n+        }\n+\n+        private void checkChangedOrientation() {\n+\n+            final TerminalView hostView = TerminalView.this;\n+            final int left = hostView.getLeft();\n+            final int right = hostView.getWidth();\n+            final int top = hostView.getTop();\n+            final int bottom = hostView.getHeight();\n+\n+            if (mTempRect == null) {\n+                mTempRect = new Rect();\n+            }\n+            final Rect clip = mTempRect;\n+            clip.left = left + TerminalView.this.getPaddingLeft();\n+            clip.top = top + TerminalView.this.getPaddingTop();\n+            clip.right = right - TerminalView.this.getPaddingRight();\n+            clip.bottom = bottom - TerminalView.this.getPaddingBottom();\n+\n+            final ViewParent parent = hostView.getParent();\n+            if (parent == null || !parent.getChildVisibleRect(hostView, clip, null)) {\n+                return;\n+            }\n+\n+            final int[] coords = mTempCoords;\n+            hostView.getLocationInWindow(coords);\n+            final int posX = coords[0] + mPointX;\n+            if (posX + (int) mHotspotX < clip.left) {\n+                changeOrientation(RIGHT);\n+            } else if (posX + mHandleWidth > clip.right) {\n+                changeOrientation(LEFT);\n+            } else {\n+                changeOrientation(mOrigOrient);\n+            }\n+        }\n+\n+        private boolean isPositionVisible() {\n+            // Always show a dragging handle.\n+            if (mIsDragging) {\n+                return true;\n+            }\n+\n+            final TerminalView hostView = TerminalView.this;\n+            final int left = 0;\n+            final int right = hostView.getWidth();\n+            final int top = 0;\n+            final int bottom = hostView.getHeight();\n+\n+            if (mTempRect == null) {\n+                mTempRect = new Rect();\n+            }\n+            final Rect clip = mTempRect;\n+            clip.left = left + TerminalView.this.getPaddingLeft();\n+            clip.top = top + TerminalView.this.getPaddingTop();\n+            clip.right = right - TerminalView.this.getPaddingRight();\n+            clip.bottom = bottom - TerminalView.this.getPaddingBottom();\n+\n+            final ViewParent parent = hostView.getParent();\n+            if (parent == null || !parent.getChildVisibleRect(hostView, clip, null)) {\n+                return false;\n+            }\n+\n+            final int[] coords = mTempCoords;\n+            hostView.getLocationInWindow(coords);\n+            final int posX = coords[0] + mPointX + (int) mHotspotX;\n+            final int posY = coords[1] + mPointY + (int) mHotspotY;\n+\n+            return posX >= clip.left && posX <= clip.right &&\n+                posY >= clip.top && posY <= clip.bottom;\n+        }\n+\n+        private void moveTo(int x, int y) {\n+            mPointX = x;\n+            mPointY = y;\n+            checkChangedOrientation();\n+            if (isPositionVisible()) {\n+                int[] coords = null;\n+                if (mContainer.isShowing()) {\n+                    coords = mTempCoords;\n+                    TerminalView.this.getLocationInWindow(coords);\n+                    int x1 = coords[0] + mPointX;\n+                    int y1 = coords[1] + mPointY;\n+                    mContainer.update(x1, y1,\n+                        getWidth(), getHeight());\n+                } else {\n+                    show();\n+                }\n+\n+                if (mIsDragging) {\n+                    if (coords == null) {\n+                        coords = mTempCoords;\n+                        TerminalView.this.getLocationInWindow(coords);\n+                    }\n+                    if (coords[0] != mLastParentX || coords[1] != mLastParentY) {\n+                        mTouchToWindowOffsetX += coords[0] - mLastParentX;\n+                        mTouchToWindowOffsetY += coords[1] - mLastParentY;\n+                        mLastParentX = coords[0];\n+                        mLastParentY = coords[1];\n+                    }\n+                }\n+            } else {\n+                if (isShowing()) {\n+                    hide();\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void onDraw(Canvas c) {\n+            final int drawWidth = mDrawable.getIntrinsicWidth();\n+            int height = mDrawable.getIntrinsicHeight();\n+            mDrawable.setBounds(0, 0, drawWidth, height);\n+            mDrawable.draw(c);\n+\n+        }\n+\n+        @SuppressLint(\"ClickableViewAccessibility\")\n+        @Override\n+        public boolean onTouchEvent(MotionEvent ev) {\n+            updateFloatingToolbarVisibility(ev);\n+            switch (ev.getActionMasked()) {\n+                case MotionEvent.ACTION_DOWN: {\n+                    final float rawX = ev.getRawX();\n+                    final float rawY = ev.getRawY();\n+                    mTouchToWindowOffsetX = rawX - mPointX;\n+                    mTouchToWindowOffsetY = rawY - mPointY;\n+                    final int[] coords = mTempCoords;\n+                    TerminalView.this.getLocationInWindow(coords);\n+                    mLastParentX = coords[0];\n+                    mLastParentY = coords[1];\n+                    mIsDragging = true;\n+                    break;\n+                }\n+\n+                case MotionEvent.ACTION_MOVE: {\n+                    final float rawX = ev.getRawX();\n+                    final float rawY = ev.getRawY();\n+\n+                    final float newPosX = rawX - mTouchToWindowOffsetX + mHotspotX;\n+                    final float newPosY = rawY - mTouchToWindowOffsetY + mHotspotY + mTouchOffsetY;\n+\n+                    mController.updatePosition(this, Math.round(newPosX), Math.round(newPosY));\n+\n+\n+                    break;\n+                }\n+\n+                case MotionEvent.ACTION_UP:\n+                case MotionEvent.ACTION_CANCEL:\n+                    mIsDragging = false;\n+            }\n+            return true;\n+        }\n+\n+\n+        public boolean isDragging() {\n+            return mIsDragging;\n+        }\n+\n+        void positionAtCursor(final int cx, final int cy) {\n+            int left = (int) (getPointX(cx) - mHotspotX);\n+            int bottom = getPointY(cy + 1);\n+            moveTo(left, bottom);\n+        }\n+    }\n+\n+\n+    private class SelectionModifierCursorController implements CursorController {\n+        private final int mHandleHeight;\n+        // The cursor controller images\n+        private HandleView mStartHandle, mEndHandle;\n+        // Whether selection anchors are active\n+        private boolean mIsShowing;\n+\n+        SelectionModifierCursorController() {\n+            mStartHandle = new HandleView(this, HandleView.LEFT);\n+            mEndHandle = new HandleView(this, HandleView.RIGHT);\n+\n+            mHandleHeight = Math.max(mStartHandle.mHandleHeight, mEndHandle.mHandleHeight);\n+        }\n+\n+        public void show() {\n+            mIsShowing = true;\n+            updatePosition();\n+            mStartHandle.show();\n+            mEndHandle.show();\n \n             final ActionMode.Callback callback = new ActionMode.Callback() {\n                 @Override\n@@ -865,7 +1205,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n                             showContextMenu();\n                             break;\n                     }\n-                    toggleSelectingText(null);\n+                    stopTextSelectionMode();\n                     return true;\n                 }\n \n@@ -874,7 +1214,6 @@ public void onDestroyActionMode(ActionMode mode) {\n                 }\n \n             };\n-\n             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                 mActionMode = startActionMode(new ActionMode.Callback2() {\n                     @Override\n@@ -903,28 +1242,218 @@ public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n                         int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n                         int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n                         int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n-                        outRect.set(Math.min(x1, x2), y1, Math.max(x1, x2), y2);\n+\n+\n+                        if (x1 > x2) {\n+                            int tmp = x1;\n+                            x1 = x2;\n+                            x2 = tmp;\n+                        }\n+\n+                        outRect.set(x1, y1 + mHandleHeight, x2, y2 + mHandleHeight);\n                     }\n                 }, ActionMode.TYPE_FLOATING);\n             } else {\n                 mActionMode = startActionMode(callback);\n             }\n+        }\n+\n+        public void hide() {\n+            mStartHandle.hide();\n+            mEndHandle.hide();\n+            mIsShowing = false;\n+            if (mActionMode != null) {\n+                // This will hide the mSelectionModifierCursorController\n+                mActionMode.finish();\n+            }\n \n+        }\n+\n+        public boolean isActive() {\n+            return mIsShowing;\n+        }\n+\n+        public void updatePosition(HandleView handle, int x, int y) {\n+            final int scrollRows = mEmulator.getScreen().getActiveRows() - mEmulator.mRows;\n+            if (y < mRenderer.mFontLineSpacing) {//up\n+                mTopRow--;\n+                if (mTopRow < -scrollRows) {\n+                    mTopRow = -scrollRows;\n+                }\n+            } else if (y + 2 * mRenderer.mFontLineSpacing > TerminalView.this.getHeight()) {//down\n+                mTopRow++;\n+                if (mTopRow > 0) {\n+                    mTopRow = 0;\n+                }\n+            }\n+            if (handle == mStartHandle) {\n+                mSelX1 = getCursorX(x);\n+                mSelY1 = getCursorY(y);\n+                if (mSelX1 < 0) {\n+                    mSelX1 = 0;\n+                }\n+                if (mSelY1 < -scrollRows) {\n+                    mSelY1 = -scrollRows;\n+                } else if (mSelY1 > mEmulator.mRows - 1) {\n+                    mSelY1 = mEmulator.mRows - 1;\n+                }\n+\n+                if (mSelY1 > mSelY2) {\n+                    mSelY1 = mSelY2;\n+                }\n+                if (mSelY1 == mSelY2 && mSelX1 > mSelX2) {\n+                    mSelX1 = mSelX2;\n+                }\n+            } else {\n+                mSelX2 = getCursorX(x);\n+                mSelY2 = getCursorY(y);\n+                if (mSelX2 < 0) {\n+                    mSelX2 = 0;\n+                }\n+                if (mSelY2 < -scrollRows) {\n+                    mSelY2 = -scrollRows;\n+                } else if (mSelY2 > mEmulator.mRows - 1) {\n+                    mSelY2 = mEmulator.mRows - 1;\n+                }\n+\n+                if (mSelY1 > mSelY2) {\n+                    mSelY2 = mSelY1;\n+                }\n+                if (mSelY1 == mSelY2 && mSelX1 > mSelX2) {\n+                    mSelX2 = mSelX1;\n+                }\n+            }\n \n             invalidate();\n-        } else {\n-            mActionMode.finish();\n+        }\n+\n+        public void updatePosition() {\n+            if (!isActive()) {\n+                return;\n+            }\n+\n+            mStartHandle.positionAtCursor(mSelX1, mSelY1);\n+\n+            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2);\n+\n+            if (mActionMode != null) {\n+                mActionMode.invalidate();\n+            }\n+\n+        }\n+\n+        public boolean onTouchEvent(MotionEvent event) {\n+\n+            return false;\n+        }\n+\n+\n+        /**\n+         * @return true iff this controller is currently used to move the selection start.\n+         */\n+        public boolean isSelectionStartDragged() {\n+            return mStartHandle.isDragging();\n+        }\n+\n+        public boolean isSelectionEndDragged() {\n+            return mEndHandle.isDragging();\n+        }\n+\n+        public void onTouchModeChanged(boolean isInTouchMode) {\n+            if (!isInTouchMode) {\n+                hide();\n+            }\n+        }\n+\n+        @Override\n+        public void onDetached() {\n+        }\n+    }\n+\n+    SelectionModifierCursorController getSelectionController() {\n+        if (mSelectionModifierCursorController == null) {\n+            mSelectionModifierCursorController = new SelectionModifierCursorController();\n+\n+            final ViewTreeObserver observer = getViewTreeObserver();\n+            if (observer != null) {\n+                observer.addOnTouchModeChangeListener(mSelectionModifierCursorController);\n+            }\n+        }\n+\n+        return mSelectionModifierCursorController;\n+    }\n+\n+    private void hideSelectionModifierCursorController() {\n+        if (mSelectionModifierCursorController != null && mSelectionModifierCursorController.isActive()) {\n+            mSelectionModifierCursorController.hide();\n+        }\n+    }\n+\n+\n+    private void startTextSelectionMode() {\n+        if (!requestFocus()) {\n+            return;\n+        }\n+\n+        getSelectionController().show();\n+\n+        mIsSelectingText = true;\n+\n+        mClient.copyModeChanged(mIsSelectingText);\n+\n+        invalidate();\n+    }\n+\n+    private void stopTextSelectionMode() {\n+        if (mIsSelectingText) {\n+            hideSelectionModifierCursorController();\n             mSelX1 = mSelY1 = mSelX2 = mSelY2 = -1;\n+            mIsSelectingText = false;\n+\n+            mClient.copyModeChanged(mIsSelectingText);\n+\n             invalidate();\n         }\n     }\n \n-    public TerminalSession getCurrentSession() {\n-        return mTermSession;\n+\n+    private final Runnable mShowFloatingToolbar = new Runnable() {\n+        @Override\n+        public void run() {\n+            if (mActionMode != null) {\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+                    mActionMode.hide(0);  // hide off.\n+                }\n+            }\n+        }\n+    };\n+\n+    void hideFloatingToolbar(int duration) {\n+        if (mActionMode != null) {\n+            removeCallbacks(mShowFloatingToolbar);\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+                mActionMode.hide(duration);\n+            }\n+        }\n     }\n \n-    private CharSequence getText() {\n-        return mEmulator.getScreen().getSelectedText(0, mTopRow, mEmulator.mColumns, mTopRow +mEmulator.mRows);\n+    private void showFloatingToolbar() {\n+        if (mActionMode != null) {\n+            int delay = ViewConfiguration.getDoubleTapTimeout();\n+            postDelayed(mShowFloatingToolbar, delay);\n+        }\n     }\n \n+    private void updateFloatingToolbarVisibility(MotionEvent event) {\n+        if (mActionMode != null) {\n+            switch (event.getActionMasked()) {\n+                case MotionEvent.ACTION_MOVE:\n+                    hideFloatingToolbar(-1);\n+                    break;\n+                case MotionEvent.ACTION_UP:  // fall through\n+                case MotionEvent.ACTION_CANCEL:\n+                    showFloatingToolbar();\n+            }\n+        }\n+    }\n }",
      "parent_sha": "0332779d6a7e52892cfeee8174468dd53cd9059c"
    }
  },
  {
    "oid": "bda80547ad087cba9dcf131e298e5ff8ded4f0d9",
    "message": "Do not export LD_LIBRARY_PATH if bintray is used",
    "date": "2019-04-03T21:20:08Z",
    "url": "https://github.com/termux/termux-app/commit/bda80547ad087cba9dcf131e298e5ff8ded4f0d9",
    "details": {
      "sha": "4544cdada0aae67786147e395496d311bde48966",
      "filename": "app/src/main/java/com/termux/app/BackgroundJob.java",
      "status": "modified",
      "additions": 32,
      "deletions": 15,
      "changes": 47,
      "blob_url": "https://github.com/termux/termux-app/blob/bda80547ad087cba9dcf131e298e5ff8ded4f0d9/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FBackgroundJob.java",
      "raw_url": "https://github.com/termux/termux-app/raw/bda80547ad087cba9dcf131e298e5ff8ded4f0d9/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FBackgroundJob.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FBackgroundJob.java?ref=bda80547ad087cba9dcf131e298e5ff8ded4f0d9",
      "patch": "@@ -93,32 +93,49 @@ public void run() {\n         };\n     }\n \n-    public static String[] buildEnvironment(boolean failSafe, String cwd) {\n+    static String[] buildEnvironment(boolean failSafe, String cwd) {\n         new File(TermuxService.HOME_PATH).mkdirs();\n \n         if (cwd == null) cwd = TermuxService.HOME_PATH;\n \n-        final String termEnv = \"TERM=xterm-256color\";\n-        final String homeEnv = \"HOME=\" + TermuxService.HOME_PATH;\n-        final String prefixEnv = \"PREFIX=\" + TermuxService.PREFIX_PATH;\n-        final String androidRootEnv = \"ANDROID_ROOT=\" + System.getenv(\"ANDROID_ROOT\");\n-        final String androidDataEnv = \"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\");\n+        List<String> environment = new ArrayList<>();\n+\n+        environment.add(\"TERM=xterm-256color\");\n+        environment.add(\"HOME=\" + TermuxService.HOME_PATH);\n+        environment.add(\"PREFIX=\" + TermuxService.PREFIX_PATH);\n+        environment.add(\"ANDROID_ROOT=\" + System.getenv(\"ANDROID_ROOT\"));\n+        environment.add(\"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\"));\n         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least\n         // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n-        final String externalStorageEnv = \"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\");\n+        environment.add(\"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\"));\n         if (failSafe) {\n             // Keep the default path so that system binaries can be used in the failsafe session.\n-            final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n-            return new String[]{termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv, externalStorageEnv};\n+            environment.add(\"PATH= \" + System.getenv(\"PATH\"));\n         } else {\n-            final String ldEnv = \"LD_LIBRARY_PATH=\" + TermuxService.PREFIX_PATH + \"/lib\";\n-            final String langEnv = \"LANG=en_US.UTF-8\";\n-            final String pathEnv = \"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\";\n-            final String pwdEnv = \"PWD=\" + cwd;\n-            final String tmpdirEnv = \"TMPDIR=\" + TermuxService.PREFIX_PATH + \"/tmp\";\n+            if (shouldAddLdLibraryPath()) {\n+                environment.add(\"LD_LIBRARY_PATH=\" + TermuxService.PREFIX_PATH + \"/lib\");\n+            }\n+            environment.add(\"LANG=en_US.UTF-8\");\n+            environment.add(\"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\");\n+            environment.add(\"PWD=\" + cwd);\n+            environment.add(\"TMPDIR=\" + TermuxService.PREFIX_PATH + \"/tmp\");\n+        }\n+\n+        return environment.toArray(new String[0]);\n+    }\n \n-            return new String[]{termEnv, homeEnv, prefixEnv, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv, tmpdirEnv};\n+    private static boolean shouldAddLdLibraryPath() {\n+        try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(TermuxService.PREFIX_PATH + \"/etc/apt/sources.list\")))) {\n+            String line;\n+            while ((line = in.readLine()) != null) {\n+                if (!line.startsWith(\"#\") && line.contains(\"https://dl.bintray.com/termux/termux-packages-24\")) {\n+                    return false;\n+                }\n+            }\n+        } catch (IOException e) {\n+            Log.e(LOG_TAG, \"Error trying to read sources.list\", e);\n         }\n+        return true;\n     }\n \n     public static int getPid(Process p) {",
      "parent_sha": "70a786613d6708cc49daaa4ac018641d8344a5ff"
    }
  },
  {
    "oid": "c19909cef16c6a7116e39070f2eb0fdf389c0129",
    "message": "improve url matching regex\n\nNow it support complex URLs and some other schemes beyond just http/ftp.",
    "date": "2019-09-08T18:10:26Z",
    "url": "https://github.com/termux/termux-app/commit/c19909cef16c6a7116e39070f2eb0fdf389c0129",
    "details": {
      "sha": "28f968ce0aa533eaacae41571229f3a6aa5052bf",
      "filename": "app/src/main/java/com/termux/app/TermuxActivity.java",
      "status": "modified",
      "additions": 70,
      "deletions": 3,
      "changes": 73,
      "blob_url": "https://github.com/termux/termux-app/blob/c19909cef16c6a7116e39070f2eb0fdf389c0129/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "raw_url": "https://github.com/termux/termux-app/raw/c19909cef16c6a7116e39070f2eb0fdf389c0129/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java?ref=c19909cef16c6a7116e39070f2eb0fdf389c0129",
      "patch": "@@ -654,19 +654,86 @@ public boolean onCreateOptionsMenu(Menu menu) {\n     }\n \n     static LinkedHashSet<CharSequence> extractUrls(String text) {\n-        // Pattern for recognizing a URL, based off RFC 3986\n-        // http://stackoverflow.com/questions/5713558/detect-and-extract-url-from-a-string\n+\n+        StringBuilder regex_sb = new StringBuilder();\n+\n+        regex_sb.append(\"(\");                       // Begin first matching group.\n+        regex_sb.append(\"(?:\");                     // Begin scheme group.\n+        regex_sb.append(\"dav|\");                    // The DAV proto.\n+        regex_sb.append(\"dict|\");                   // The DICT proto.\n+        regex_sb.append(\"dns|\");                    // The DNS proto.\n+        regex_sb.append(\"file|\");                   // File path.\n+        regex_sb.append(\"finger|\");                 // The Finger proto.\n+        regex_sb.append(\"ftp(?:s?)|\");              // The FTP proto.\n+        regex_sb.append(\"git|\");                    // The Git proto.\n+        regex_sb.append(\"gopher|\");                 // The Gopher proto.\n+        regex_sb.append(\"http(?:s?)|\");             // The HTTP proto.\n+        regex_sb.append(\"imap(?:s?)|\");             // The IMAP proto.\n+        regex_sb.append(\"irc(?:[6s]?)|\");           // The IRC proto.\n+        regex_sb.append(\"ip[fn]s|\");                // The IPFS proto.\n+        regex_sb.append(\"ldap(?:s?)|\");             // The LDAP proto.\n+        regex_sb.append(\"pop3(?:s?)|\");             // The POP3 proto.\n+        regex_sb.append(\"redis(?:s?)|\");            // The Redis proto.\n+        regex_sb.append(\"rsync|\");                  // The Rsync proto.\n+        regex_sb.append(\"rtsp(?:[su]?)|\");          // The RTSP proto.\n+        regex_sb.append(\"sftp|\");                   // The SFTP proto.\n+        regex_sb.append(\"smb(?:s?)|\");              // The SAMBA proto.\n+        regex_sb.append(\"smtp(?:s?)|\");             // The SMTP proto.\n+        regex_sb.append(\"svn(?:(?:\\\\+ssh)?)|\");     // The Subversion proto.\n+        regex_sb.append(\"tcp|\");                    // The TCP proto.\n+        regex_sb.append(\"telnet|\");                 // The Telnet proto.\n+        regex_sb.append(\"tftp|\");                   // The TFTP proto.\n+        regex_sb.append(\"udp|\");                    // The UDP proto.\n+        regex_sb.append(\"vnc|\");                    // The VNC proto.\n+        regex_sb.append(\"ws(?:s?)\");                // The Websocket proto.\n+        regex_sb.append(\")://\");                    // End scheme group.\n+        regex_sb.append(\")\");                       // End first matching group.\n+\n+\n+        // Begin second matching group.\n+        regex_sb.append(\"(\");\n+\n+        // User name and/or password in format 'user:pass@'.\n+        regex_sb.append(\"(?:\\\\S+(?::\\\\S*)?@)?\");\n+\n+        // Begin host group.\n+        regex_sb.append(\"(?:\");\n+\n+        // IP address (from http://www.regular-expressions.info/examples.html).\n+        regex_sb.append(\"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|\");\n+\n+        // Host name or domain.\n+        regex_sb.append(\"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))?|\");\n+\n+        // Just path. Used in case of 'file://' scheme.\n+        regex_sb.append(\"/(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\");\n+\n+        // End host group.\n+        regex_sb.append(\")\");\n+\n+        // Port number.\n+        regex_sb.append(\"(?::\\\\d{1,5})?\");\n+\n+        // Resource path with optional query string.\n+        regex_sb.append(\"(?:/[a-zA-Z0-9:@%\\\\-._~!$&()*+,;=?/]*)?\");\n+\n+        // End second matching group.\n+        regex_sb.append(\")\");\n+\n         final Pattern urlPattern = Pattern.compile(\n-            \"(?:^|[\\\\W])((ht|f)tp(s?)://|www\\\\.)\" + \"(([\\\\w\\\\-]+\\\\.)+?([\\\\w\\\\-.~]+/?)*\" + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]*$~@!:/{};']*)\",\n+            regex_sb.toString(),\n             Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n+\n         LinkedHashSet<CharSequence> urlSet = new LinkedHashSet<>();\n         Matcher matcher = urlPattern.matcher(text);\n+\n         while (matcher.find()) {\n             int matchStart = matcher.start(1);\n             int matchEnd = matcher.end();\n             String url = text.substring(matchStart, matchEnd);\n             urlSet.add(url);\n         }\n+\n         return urlSet;\n     }\n ",
      "parent_sha": "5b7e40638c7871432b2ec3455940023cd3d51276"
    }
  },
  {
    "oid": "c1a9b7726f2fb897f0e277f9512e85f4e9a55c0b",
    "message": "Tweak InputConnection implementation",
    "date": "2016-09-04T16:56:28Z",
    "url": "https://github.com/termux/termux-app/commit/c1a9b7726f2fb897f0e277f9512e85f4e9a55c0b",
    "details": {
      "sha": "803b4c2ac7807f3b16b757daae9e1278e35a0180",
      "filename": "app/src/main/java/com/termux/view/TerminalView.java",
      "status": "modified",
      "additions": 29,
      "deletions": 32,
      "changes": 61,
      "blob_url": "https://github.com/termux/termux-app/blob/c1a9b7726f2fb897f0e277f9512e85f4e9a55c0b/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/c1a9b7726f2fb897f0e277f9512e85f4e9a55c0b/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalView.java?ref=c1a9b7726f2fb897f0e277f9512e85f4e9a55c0b",
      "patch": "@@ -10,6 +10,7 @@\n import android.graphics.Typeface;\n import android.graphics.drawable.BitmapDrawable;\n import android.os.Build;\n+import android.text.Editable;\n import android.text.InputType;\n import android.text.TextUtils;\n import android.util.AttributeSet;\n@@ -233,7 +234,8 @@ public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n         // Previous keyboard issues:\n         // https://github.com/termux/termux-packages/issues/25\n         // https://github.com/termux/termux-app/issues/87.\n-        // https://github.com/termux/termux-app/issues/126 for breakage from that.\n+        // https://github.com/termux/termux-app/issues/126.\n+        // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).\n         outAttrs.inputType = InputType.TYPE_NULL;\n \n         // Let part of the application show behind when in landscape:\n@@ -244,19 +246,41 @@ public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n             @Override\n             public boolean finishComposingText() {\n                 if (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"IME: finishComposingText()\");\n-                commitText(getEditable(), 0);\n+                super.finishComposingText();\n \n-                // Clear the editable.\n+                sendTextToTerminal(getEditable());\n                 getEditable().clear();\n-\n                 return true;\n             }\n \n             @Override\n             public boolean commitText(CharSequence text, int newCursorPosition) {\n-                if (LOG_KEY_EVENTS)\n+                if (LOG_KEY_EVENTS) {\n                     Log.i(EmulatorDebug.LOG_TAG, \"IME: commitText(\\\"\" + text + \"\\\", \" + newCursorPosition + \")\");\n+                }\n+                super.commitText(text, newCursorPosition);\n+\n                 if (mEmulator == null) return true;\n+\n+                Editable content = getEditable();\n+                sendTextToTerminal(content);\n+                content.clear();\n+                return true;\n+            }\n+\n+            @Override\n+            public boolean deleteSurroundingText(int leftLength, int rightLength) {\n+                if (LOG_KEY_EVENTS)\n+                    Log.i(EmulatorDebug.LOG_TAG, \"IME: deleteSurroundingText(\" + leftLength + \", \" + rightLength + \")\");\n+                // If leftLength=2 it may be due to a UTF-16 surrogate pair. So we cannot send\n+                // multiple key events for that. Let's just hope that keyboards don't use\n+                // leftLength > 1 for other purposes (such as holding down backspace for repeat).\n+                sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n+                return super.deleteSurroundingText(leftLength, rightLength);\n+            }\n+\n+\n+            void sendTextToTerminal(CharSequence text) {\n                 final int textLengthInChars = text.length();\n                 for (int i = 0; i < textLengthInChars; i++) {\n                     char firstChar = text.charAt(i);\n@@ -297,35 +321,8 @@ public boolean commitText(CharSequence text, int newCursorPosition) {\n \n                     inputCodePoint(codePoint, ctrlHeld, false);\n                 }\n-\n-                return true;\n             }\n \n-            @Override\n-            public boolean deleteSurroundingText(int leftLength, int rightLength) {\n-                if (LOG_KEY_EVENTS)\n-                    Log.i(EmulatorDebug.LOG_TAG, \"IME: deleteSurroundingText(\" + leftLength + \", \" + rightLength + \")\");\n-                // If leftLength=2 it may be due to a UTF-16 surrogate pair. So we cannot send\n-                // multiple key events for that. Let's just hope that keyboards don't use\n-                // leftLength > 1 for other purposes (such as holding down backspace for repeat).\n-                sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean setComposingText(CharSequence text, int newCursorPosition) {\n-                if (LOG_KEY_EVENTS)\n-                    Log.i(EmulatorDebug.LOG_TAG, \"IME: setComposingText(\\\"\" + text  + \"\\\", \" + newCursorPosition + \")\");\n-\n-                if (text.length() == 0) {\n-                    // Avoid log spam \"SpannableStringBuilder: SPAN_EXCLUSIVE_EXCLUSIVE spans cannot\n-                    // have a zero length\" when backspacing with the Google keyboard.\n-                    getEditable().clear();\n-                } else {\n-                    super.setComposingText(text, newCursorPosition);\n-                }\n-                return true;\n-            }\n         };\n     }\n ",
      "parent_sha": "afb339e9d8b9d93495fd48ce0049c6c5dc7ba23c"
    }
  },
  {
    "oid": "3f84b5345f6be2d538d7c381e79f94145dc027dd",
    "message": "Changed: Make ExtraKeysView private functions public and variables protected",
    "date": "2022-01-22T20:40:22Z",
    "url": "https://github.com/termux/termux-app/commit/3f84b5345f6be2d538d7c381e79f94145dc027dd",
    "details": {
      "sha": "0685c8d2cac686f0dad34a8a56a6f0f547dc4196",
      "filename": "termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java",
      "status": "modified",
      "additions": 26,
      "deletions": 26,
      "changes": 52,
      "blob_url": "https://github.com/termux/termux-app/blob/3f84b5345f6be2d538d7c381e79f94145dc027dd/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2Fextrakeys%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/3f84b5345f6be2d538d7c381e79f94145dc027dd/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2Fextrakeys%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2Fextrakeys%2FExtraKeysView.java?ref=3f84b5345f6be2d538d7c381e79f94145dc027dd",
      "patch": "@@ -134,15 +134,15 @@ public interface IExtraKeysView {\n \n \n     /** The implementation of the {@link IExtraKeysView} that acts as a client for the {@link ExtraKeysView}. */\n-    private IExtraKeysView mExtraKeysViewClient;\n+    protected IExtraKeysView mExtraKeysViewClient;\n \n     /** The map for the {@link SpecialButton} and their {@link SpecialButtonState}. Defaults to\n      * the one returned by {@link #getDefaultSpecialButtons(ExtraKeysView)}. */\n-    private Map<SpecialButton, SpecialButtonState> mSpecialButtons;\n+    protected Map<SpecialButton, SpecialButtonState> mSpecialButtons;\n \n     /** The keys for the {@link SpecialButton} added to {@link #mSpecialButtons}. This is automatically\n      * set when the call to {@link #setSpecialButtons(Map)} is made. */\n-    private Set<String> mSpecialButtonsKeys;\n+    protected Set<String> mSpecialButtonsKeys;\n \n \n     /**\n@@ -151,22 +151,22 @@ public interface IExtraKeysView {\n      * every {@link #mLongPressRepeatDelay} seconds after {@link #mLongPressTimeout} has passed.\n      * The default keys are defined by {@link ExtraKeysConstants#PRIMARY_REPETITIVE_KEYS}.\n      */\n-    private List<String> mRepetitiveKeys;\n+    protected List<String> mRepetitiveKeys;\n \n \n     /** The text color for the extra keys button. Defaults to {@link #DEFAULT_BUTTON_TEXT_COLOR}. */\n-    private int mButtonTextColor;\n+    protected int mButtonTextColor;\n     /** The text color for the extra keys button when its active.\n      * Defaults to {@link #DEFAULT_BUTTON_ACTIVE_TEXT_COLOR}. */\n-    private int mButtonActiveTextColor;\n+    protected int mButtonActiveTextColor;\n     /** The background color for the extra keys button. Defaults to {@link #DEFAULT_BUTTON_BACKGROUND_COLOR}. */\n-    private int mButtonBackgroundColor;\n+    protected int mButtonBackgroundColor;\n     /** The background color for the extra keys button when its active. Defaults to\n      * {@link #DEFAULT_BUTTON_ACTIVE_BACKGROUND_COLOR}. */\n-    private int mButtonActiveBackgroundColor;\n+    protected int mButtonActiveBackgroundColor;\n \n     /** Defines whether text for the extra keys button should be all capitalized automatically. */\n-    private boolean mButtonTextAllCaps = true;\n+    protected boolean mButtonTextAllCaps = true;\n \n \n     /**\n@@ -176,25 +176,25 @@ public interface IExtraKeysView {\n      * The duration must be in between {@link #MIN_LONG_PRESS_DURATION} and {@link #MAX_LONG_PRESS_DURATION},\n      * otherwise {@link #FALLBACK_LONG_PRESS_DURATION} is used.\n      */\n-    private int mLongPressTimeout;\n+    protected int mLongPressTimeout;\n \n     /**\n      * Defines the duration in milliseconds for the delay between trigger of each repeat of\n      * {@link #mRepetitiveKeys}. The default value is defined by {@link #DEFAULT_LONG_PRESS_REPEAT_DELAY}.\n      * The duration must be in between {@link #MIN_LONG_PRESS__REPEAT_DELAY} and\n      * {@link #MAX_LONG_PRESS__REPEAT_DELAY}, otherwise {@link #DEFAULT_LONG_PRESS_REPEAT_DELAY} is used.\n      */\n-    private int mLongPressRepeatDelay;\n+    protected int mLongPressRepeatDelay;\n \n \n     /** The popup window shown if {@link ExtraKeyButton#getPopup()} returns a {@code non-null} value\n      * and a swipe up action is done on an extra key. */\n-    private PopupWindow mPopupWindow;\n+    protected PopupWindow mPopupWindow;\n \n-    private ScheduledExecutorService mScheduledExecutor;\n-    private Handler mHandler;\n-    private SpecialButtonsLongHoldRunnable mSpecialButtonsLongHoldRunnable;\n-    private int mLongPressCount;\n+    protected ScheduledExecutorService mScheduledExecutor;\n+    protected Handler mHandler;\n+    protected SpecialButtonsLongHoldRunnable mSpecialButtonsLongHoldRunnable;\n+    protected int mLongPressCount;\n \n \n     public ExtraKeysView(Context context, AttributeSet attrs) {\n@@ -465,12 +465,12 @@ public void reload(ExtraKeysInfo extraKeysInfo) {\n \n \n \n-    private void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (mExtraKeysViewClient != null)\n             mExtraKeysViewClient.onExtraKeyButtonClick(view, buttonInfo, button);\n     }\n \n-    private void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (mExtraKeysViewClient != null) {\n             // If client handled the feedback, then just return\n             if (mExtraKeysViewClient.performExtraKeyButtonHapticFeedback(view, buttonInfo, button))\n@@ -493,7 +493,7 @@ private void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton butto\n \n \n \n-    private void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonInfo, Button button) {\n+    public void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (isSpecialButton(buttonInfo)) {\n             if (mLongPressCount > 0) return;\n             SpecialButtonState state = mSpecialButtons.get(SpecialButton.valueOf(buttonInfo.getKey()));\n@@ -509,7 +509,7 @@ private void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonI\n     }\n \n \n-    private void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         stopScheduledExecutors();\n         mLongPressCount = 0;\n         if (mRepetitiveKeys.contains(buttonInfo.getKey())) {\n@@ -534,7 +534,7 @@ private void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, Butto\n         }\n     }\n \n-    private void stopScheduledExecutors() {\n+    public void stopScheduledExecutors() {\n         if (mScheduledExecutor != null) {\n             mScheduledExecutor.shutdownNow();\n             mScheduledExecutor = null;\n@@ -546,8 +546,8 @@ private void stopScheduledExecutors() {\n         }\n     }\n \n-    private class SpecialButtonsLongHoldRunnable implements Runnable {\n-        private final SpecialButtonState mState;\n+    public class SpecialButtonsLongHoldRunnable implements Runnable {\n+        public final SpecialButtonState mState;\n \n         public SpecialButtonsLongHoldRunnable(SpecialButtonState state) {\n             mState = state;\n@@ -593,7 +593,7 @@ void showPopup(View view, ExtraKeyButton extraButton) {\n         mPopupWindow.showAsDropDown(view, 0, -2 * height);\n     }\n \n-    private void dismissPopup() {\n+    public void dismissPopup() {\n         mPopupWindow.setContentView(null);\n         mPopupWindow.dismiss();\n         mPopupWindow = null;\n@@ -631,7 +631,7 @@ public Boolean readSpecialButton(SpecialButton specialButton, boolean autoSetInA\n         return true;\n     }\n \n-    private Button createSpecialButton(String buttonKey, boolean needUpdate) {\n+    public Button createSpecialButton(String buttonKey, boolean needUpdate) {\n         SpecialButtonState state = mSpecialButtons.get(SpecialButton.valueOf(buttonKey));\n         if (state == null) return null;\n         state.setIsCreated(true);\n@@ -648,7 +648,7 @@ private Button createSpecialButton(String buttonKey, boolean needUpdate) {\n     /**\n      * General util function to compute the longest column length in a matrix.\n      */\n-    static int maximumLength(Object[][] matrix) {\n+    public static int maximumLength(Object[][] matrix) {\n         int m = 0;\n         for (Object[] row : matrix)\n             m = Math.max(m, row.length);",
      "parent_sha": "006bfeac8d27e1f783ebd964675caabaec98182a"
    }
  },
  {
    "oid": "0da1984b59ed58013404435c4ec4069e5f4670de",
    "message": "Changed: Do not show toast if text null or empty",
    "date": "2022-01-22T20:36:41Z",
    "url": "https://github.com/termux/termux-app/commit/0da1984b59ed58013404435c4ec4069e5f4670de",
    "details": {
      "sha": "3865a7cebd593a33e7245fada2871eaae59bcd8b",
      "filename": "termux-shared/src/main/java/com/termux/shared/logger/Logger.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/termux/termux-app/blob/0da1984b59ed58013404435c4ec4069e5f4670de/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java",
      "raw_url": "https://github.com/termux/termux-app/raw/0da1984b59ed58013404435c4ec4069e5f4670de/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Flogger%2FLogger.java?ref=0da1984b59ed58013404435c4ec4069e5f4670de",
      "patch": "@@ -7,6 +7,7 @@\n import android.widget.Toast;\n \n import com.termux.shared.R;\n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.termux.TermuxConstants;\n \n import java.io.IOException;\n@@ -363,7 +364,7 @@ public static String getMultiLineLogStringEntry(String label, Object object, Str\n \n \n     public static void showToast(final Context context, final String toastText, boolean longDuration) {\n-        if (context == null) return;\n+        if (context == null || DataUtils.isNullOrEmpty(toastText)) return;\n \n         new Handler(Looper.getMainLooper()).post(() -> Toast.makeText(context, toastText, longDuration ? Toast.LENGTH_LONG : Toast.LENGTH_SHORT).show());\n     }",
      "parent_sha": "09412da9d76c7ad2d3cc530a1efedf9482e05e3e"
    }
  },
  {
    "oid": "5116d886c382f01b48e366b0430af76149ba7821",
    "message": "Changed: Add label parameter to `ExecutionCommand` `getArgumentsLogString()` and `getArgumentsMarkdownString()` functions for external usage",
    "date": "2022-04-22T19:36:12Z",
    "url": "https://github.com/termux/termux-app/commit/5116d886c382f01b48e366b0430af76149ba7821",
    "details": {
      "sha": "a579b313d4c7f1595098c93d9ffd637d0dcd137e",
      "filename": "termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/termux/termux-app/blob/5116d886c382f01b48e366b0430af76149ba7821/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2Fcommand%2FExecutionCommand.java",
      "raw_url": "https://github.com/termux/termux-app/raw/5116d886c382f01b48e366b0430af76149ba7821/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2Fcommand%2FExecutionCommand.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2Fcommand%2FExecutionCommand.java?ref=5116d886c382f01b48e366b0430af76149ba7821",
      "patch": "@@ -472,7 +472,7 @@ public static String getExecutionCommandMarkdownString(final ExecutionCommand ex\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Current State\", executionCommand.currentState.getName(), \"-\"));\n \n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Executable\", executionCommand.executable, \"-\"));\n-        markdownString.append(\"\\n\").append(getArgumentsMarkdownString(executionCommand.arguments));\n+        markdownString.append(\"\\n\").append(getArgumentsMarkdownString(\"Arguments\", executionCommand.arguments));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Working Directory\", executionCommand.workingDirectory, \"-\"));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Runner\", executionCommand.runner, \"-\"));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"isFailsafe\", executionCommand.isFailsafe, \"-\"));\n@@ -547,7 +547,7 @@ public String getExecutableLogString() {\n     }\n \n     public String getArgumentsLogString() {\n-        return getArgumentsLogString(arguments);\n+        return getArgumentsLogString(\"Arguments\", arguments);\n     }\n \n     public String getWorkingDirectoryLogString() {\n@@ -623,8 +623,8 @@ public String getIsPluginExecutionCommandLogString() {\n      * @param argumentsArray The {@link String[]} argumentsArray to convert.\n      * @return Returns the log friendly {@link String}.\n      */\n-    public static String getArgumentsLogString(final String[] argumentsArray) {\n-        StringBuilder argumentsString = new StringBuilder(\"Arguments:\");\n+    public static String getArgumentsLogString(String label, final String[] argumentsArray) {\n+        StringBuilder argumentsString = new StringBuilder(label + \":\");\n \n         if (argumentsArray != null && argumentsArray.length != 0) {\n             argumentsString.append(\"\\n```\\n\");\n@@ -660,8 +660,8 @@ public static String getArgumentsLogString(final String[] argumentsArray) {\n      * @param argumentsArray The {@link String[]} argumentsArray to convert.\n      * @return Returns the markdown {@link String}.\n      */\n-    public static String getArgumentsMarkdownString(final String[] argumentsArray) {\n-        StringBuilder argumentsString = new StringBuilder(\"**Arguments:**\");\n+    public static String getArgumentsMarkdownString(String label, final String[] argumentsArray) {\n+        StringBuilder argumentsString = new StringBuilder(\"**\" + label + \":**\");\n \n         if (argumentsArray != null && argumentsArray.length != 0) {\n             argumentsString.append(\"\\n\");",
      "parent_sha": "02ab8324e986c933992162c5b9a87ca3e0f9d860"
    }
  },
  {
    "oid": "6e2a2ed94637c98ad8035e37742595395d436cd1",
    "message": "documents provider: fix application icon reference",
    "date": "2021-02-03T13:56:38Z",
    "url": "https://github.com/termux/termux-app/commit/6e2a2ed94637c98ad8035e37742595395d436cd1",
    "details": {
      "sha": "b72442ac27569ed909cf0d673c51579f4d356928",
      "filename": "app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/termux/termux-app/blob/6e2a2ed94637c98ad8035e37742595395d436cd1/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxDocumentsProvider.java",
      "raw_url": "https://github.com/termux/termux-app/raw/6e2a2ed94637c98ad8035e37742595395d436cd1/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxDocumentsProvider.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Ffilepicker%2FTermuxDocumentsProvider.java?ref=6e2a2ed94637c98ad8035e37742595395d436cd1",
      "patch": "@@ -75,7 +75,7 @@ public Cursor queryRoots(String[] projection) throws FileNotFoundException {\n         row.add(Root.COLUMN_TITLE, applicationName);\n         row.add(Root.COLUMN_MIME_TYPES, ALL_MIME_TYPES);\n         row.add(Root.COLUMN_AVAILABLE_BYTES, BASE_DIR.getFreeSpace());\n-        row.add(Root.COLUMN_ICON, R.drawable.ic_launcher);\n+        row.add(Root.COLUMN_ICON, R.mipmap.ic_launcher);\n         return result;\n     }\n \n@@ -262,7 +262,7 @@ private void includeFile(MatrixCursor result, String docId, File file)\n         row.add(Document.COLUMN_MIME_TYPE, mimeType);\n         row.add(Document.COLUMN_LAST_MODIFIED, file.lastModified());\n         row.add(Document.COLUMN_FLAGS, flags);\n-        row.add(Document.COLUMN_ICON, R.drawable.ic_launcher);\n+        row.add(Document.COLUMN_ICON, R.mipmap.ic_launcher);\n     }\n \n }",
      "parent_sha": "7be1fe5555d0673a5b17ad6bb34bc18627de7684"
    }
  },
  {
    "oid": "db2f50c76e61b25d5ff17168407d17f3c05aec71",
    "message": "extra keys: use TextUtils.join instead of String.join\n\nString.join() is available only on Android API 26+ but our current\nminimal is 24.\n\nSee https://github.com/termux/termux-app/issues/1670.",
    "date": "2020-08-14T12:08:32Z",
    "url": "https://github.com/termux/termux-app/commit/db2f50c76e61b25d5ff17168407d17f3c05aec71",
    "details": {
      "sha": "1274c224415f31c97bcc2d65548382cc0bf6c1d4",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysInfos.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/termux/termux-app/blob/db2f50c76e61b25d5ff17168407d17f3c05aec71/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysInfos.java",
      "raw_url": "https://github.com/termux/termux-app/raw/db2f50c76e61b25d5ff17168407d17f3c05aec71/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysInfos.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysInfos.java?ref=db2f50c76e61b25d5ff17168407d17f3c05aec71",
      "patch": "@@ -1,5 +1,7 @@\n package com.termux.app;\n \n+import android.text.TextUtils;\n+\n import androidx.annotation.Nullable;\n \n import org.json.JSONArray;\n@@ -305,7 +307,7 @@ public ExtraKeyButton(ExtraKeysInfos.CharDisplayMap charDisplayMap, JSONObject c\n             keys[i] = ExtraKeysInfos.replaceAlias(keys[i]);\n         }\n \n-        this.key = String.join(\" \", keys);\n+        this.key = TextUtils.join(\" \", keys);\n \n         String displayFromConfig = config.optString(\"display\", null);\n         if (displayFromConfig != null) {",
      "parent_sha": "784affe39cf609bf1d062e6163be8b39e6ed2aa9"
    }
  },
  {
    "oid": "9b5aad94168769b3fa747fab7eaa75e57f10fa6c",
    "message": "Fixed: Fix AppShell failsafe env",
    "date": "2022-01-28T13:06:05Z",
    "url": "https://github.com/termux/termux-app/commit/9b5aad94168769b3fa747fab7eaa75e57f10fa6c",
    "details": {
      "sha": "d740a7e3974005e066c4a1065508ca3aaa1f6ff2",
      "filename": "termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/9b5aad94168769b3fa747fab7eaa75e57f10fa6c/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2Fcommand%2Frunner%2Fapp%2FAppShell.java",
      "raw_url": "https://github.com/termux/termux-app/raw/9b5aad94168769b3fa747fab7eaa75e57f10fa6c/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2Fcommand%2Frunner%2Fapp%2FAppShell.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fshell%2Fcommand%2Frunner%2Fapp%2FAppShell.java?ref=9b5aad94168769b3fa747fab7eaa75e57f10fa6c",
      "patch": "@@ -74,7 +74,7 @@ public static AppShell execute(@NonNull final Context context, @NonNull Executio\n         if (executionCommand.workingDirectory.isEmpty())\n             executionCommand.workingDirectory = \"/\";\n \n-        String[] env = shellEnvironmentClient.buildEnvironment(context, false, executionCommand.workingDirectory);\n+        String[] env = shellEnvironmentClient.buildEnvironment(context, executionCommand.isFailsafe, executionCommand.workingDirectory);\n \n         final String[] commandArray = shellEnvironmentClient.setupProcessArgs(executionCommand.executable, executionCommand.arguments);\n ",
      "parent_sha": "95d7a154a480aa6b13b3988e550d081bec301755"
    }
  },
  {
    "oid": "330301899ad9ff76c2257e700a09964f512017de",
    "message": "Send \\r instead of \\n from native input text view (fixes #1020)",
    "date": "2019-02-09T22:14:44Z",
    "url": "https://github.com/termux/termux-app/commit/330301899ad9ff76c2257e700a09964f512017de",
    "details": {
      "sha": "2e444ac328728ef8e0c5ea0128e39ba7c2d63181",
      "filename": "app/src/main/java/com/termux/app/TermuxActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/330301899ad9ff76c2257e700a09964f512017de/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "raw_url": "https://github.com/termux/termux-app/raw/330301899ad9ff76c2257e700a09964f512017de/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxActivity.java?ref=330301899ad9ff76c2257e700a09964f512017de",
      "patch": "@@ -249,7 +249,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {\n                         if (session != null) {\n                             if (session.isRunning()) {\n                                 String textToSend = editText.getText().toString();\n-                                if (textToSend.length() == 0) textToSend = \"\\n\";\n+                                if (textToSend.length() == 0) textToSend = \"\\r\";\n                                 session.write(textToSend);\n                             } else {\n                                 removeFinishedSession(session);",
      "parent_sha": "2a36b915cbb201bda9b77431ae6d670961cee67a"
    }
  },
  {
    "oid": "6c00f1fc61e75df9e3b74ab42e2421623b646ca7",
    "message": "Fixed: Use Canvas.drawTextRun instead of drawText\n\ndrawText does (very) basic BiDi, which causes inconsistent behaviour.\nThis ensures everything is LtR.",
    "date": "2024-09-27T09:27:38Z",
    "url": "https://github.com/termux/termux-app/commit/6c00f1fc61e75df9e3b74ab42e2421623b646ca7",
    "details": {
      "sha": "a4bef7d37c12799fd3b4ab7592d629e4eeb45240",
      "filename": "terminal-view/src/main/java/com/termux/view/TerminalRenderer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/6c00f1fc61e75df9e3b74ab42e2421623b646ca7/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalRenderer.java",
      "raw_url": "https://github.com/termux/termux-app/raw/6c00f1fc61e75df9e3b74ab42e2421623b646ca7/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalRenderer.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-view%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fview%2FTerminalRenderer.java?ref=6c00f1fc61e75df9e3b74ab42e2421623b646ca7",
      "patch": "@@ -233,7 +233,7 @@ private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int\n             mTextPaint.setColor(foreColor);\n \n             // The text alignment is the default Paint.Align.LEFT.\n-            canvas.drawText(text, startCharIndex, runWidthChars, left, y - mFontLineSpacingAndAscent, mTextPaint);\n+            canvas.drawTextRun(text, startCharIndex, runWidthChars, startCharIndex, runWidthChars, left, y - mFontLineSpacingAndAscent, false, mTextPaint);\n         }\n \n         if (savedMatrix) canvas.restore();",
      "parent_sha": "03142590ff42579505476729ed1e189a2aa35ce4"
    }
  },
  {
    "oid": "a3cd058fb463562c8124084320b4a184cdf37c0e",
    "message": "Update: Remove duplicate log tag prefix from TermuxOpenReceiver",
    "date": "2022-01-22T20:42:26Z",
    "url": "https://github.com/termux/termux-app/commit/a3cd058fb463562c8124084320b4a184cdf37c0e",
    "details": {
      "sha": "48f0607dc4e7f97269c900307a2cdb1db93ddaf6",
      "filename": "app/src/main/java/com/termux/app/TermuxOpenReceiver.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/termux/termux-app/blob/a3cd058fb463562c8124084320b4a184cdf37c0e/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxOpenReceiver.java",
      "raw_url": "https://github.com/termux/termux-app/raw/a3cd058fb463562c8124084320b4a184cdf37c0e/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxOpenReceiver.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxOpenReceiver.java?ref=a3cd058fb463562c8124084320b4a184cdf37c0e",
      "patch": "@@ -35,7 +35,7 @@ public class TermuxOpenReceiver extends BroadcastReceiver {\n     public void onReceive(Context context, Intent intent) {\n         final Uri data = intent.getData();\n         if (data == null) {\n-            Logger.logError(LOG_TAG, \"termux-open: Called without intent data\");\n+            Logger.logError(LOG_TAG, \"Called without intent data\");\n             return;\n         }\n \n@@ -68,7 +68,7 @@ public void onReceive(Context context, Intent intent) {\n             try {\n                 context.startActivity(urlIntent);\n             } catch (ActivityNotFoundException e) {\n-                Logger.logError(LOG_TAG, \"termux-open: No app handles the url \" + data);\n+                Logger.logError(LOG_TAG, \"No app handles the url \" + data);\n             }\n             return;\n         }\n@@ -82,7 +82,7 @@ public void onReceive(Context context, Intent intent) {\n \n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {\n-            Logger.logError(LOG_TAG, \"termux-open: Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n+            Logger.logError(LOG_TAG, \"Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n             return;\n         }\n \n@@ -120,7 +120,7 @@ public void onReceive(Context context, Intent intent) {\n         try {\n             context.startActivity(sendIntent);\n         } catch (ActivityNotFoundException e) {\n-            Logger.logError(LOG_TAG, \"termux-open: No app handles the url \" + data);\n+            Logger.logError(LOG_TAG, \"No app handles the url \" + data);\n         }\n     }\n ",
      "parent_sha": "b435d948887e6417976039c9ce074d02280989b7"
    }
  },
  {
    "oid": "c1c46dfcfcff6fe2a21232d4fa2d0092c93e6cc1",
    "message": "Changed: Change `TERMUX_APP.APPS_DIR_PATH` basename from `termux-app` to `com.termux`\n\nThe apps directory will now use the unique package name of apps for basename that can be automatically generated instead of having to be hardcoded.\n\n`termux-am-socket` will be upgraded to `v1.4.0` for respective change.",
    "date": "2022-05-29T03:28:20Z",
    "url": "https://github.com/termux/termux-app/commit/c1c46dfcfcff6fe2a21232d4fa2d0092c93e6cc1",
    "details": {
      "sha": "75c91b6c182797c9ed8f26bec206dd13b50e0bcf",
      "filename": "termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/termux/termux-app/blob/c1c46dfcfcff6fe2a21232d4fa2d0092c93e6cc1/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/c1c46dfcfcff6fe2a21232d4fa2d0092c93e6cc1/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Ftermux%2FTermuxConstants.java?ref=c1c46dfcfcff6fe2a21232d4fa2d0092c93e6cc1",
      "patch": "@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.43.0\n+ * Version: v0.44.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -245,6 +245,9 @@\n  *\n  * - 0.43.0 (2022-05-29)\n  *      - Changed `TERMUX_SUPPORT_EMAIL_URL` to support@termux.dev.\n+ *\n+ * - 0.44.0 (2022-05-29)\n+ *      - Changed `TERMUX_APP.APPS_DIR_PATH` basename from `termux-app` to `com.termux`.\n  */\n \n /**\n@@ -896,10 +899,10 @@ public final class TermuxConstants {\n     public static final class TERMUX_APP {\n \n         /** Termux apps directory path */\n-        public static final String APPS_DIR_PATH = TERMUX_APPS_DIR_PATH + \"/termux-app\"; // Default: \"/data/data/com.termux/files/apps/termux-app\"\n+        public static final String APPS_DIR_PATH = TERMUX_APPS_DIR_PATH + \"/\" + TERMUX_PACKAGE_NAME; // Default: \"/data/data/com.termux/files/apps/com.termux\"\n \n         /** termux-am socket file path */\n-        public static final String TERMUX_AM_SOCKET_FILE_PATH = APPS_DIR_PATH + \"/termux-am/am.sock\"; // Default: \"/data/data/com.termux/files/apps/termux-app/termux-am/am.sock\"\n+        public static final String TERMUX_AM_SOCKET_FILE_PATH = APPS_DIR_PATH + \"/termux-am/am.sock\"; // Default: \"/data/data/com.termux/files/apps/com.termux/termux-am/am.sock\"\n \n \n         /** Termux app core activity name. */",
      "parent_sha": "37f08c4fccb79c9e8e911af9407168b566e890d9"
    }
  },
  {
    "oid": "fe8c3ba216d2fc145eb33707accb4abfad87125d",
    "message": "Update KeyboardUtils will null checks and add setSoftKeyboardVisibility()",
    "date": "2021-05-10T00:21:54Z",
    "url": "https://github.com/termux/termux-app/commit/fe8c3ba216d2fc145eb33707accb4abfad87125d",
    "details": {
      "sha": "e6b713a5a98dc367f64aa9d477276ae6848d5043",
      "filename": "termux-shared/src/main/java/com/termux/shared/view/KeyboardUtils.java",
      "status": "modified",
      "additions": 49,
      "deletions": 22,
      "changes": 71,
      "blob_url": "https://github.com/termux/termux-app/blob/fe8c3ba216d2fc145eb33707accb4abfad87125d/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fview%2FKeyboardUtils.java",
      "raw_url": "https://github.com/termux/termux-app/raw/fe8c3ba216d2fc145eb33707accb4abfad87125d/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fview%2FKeyboardUtils.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/termux-shared%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fshared%2Fview%2FKeyboardUtils.java?ref=fe8c3ba216d2fc145eb33707accb4abfad87125d",
      "patch": "@@ -8,6 +8,7 @@\n import android.view.WindowManager;\n import android.view.inputmethod.InputMethodManager;\n \n+import androidx.annotation.NonNull;\n import androidx.core.view.WindowInsetsCompat;\n \n import com.termux.shared.logger.Logger;\n@@ -16,6 +17,15 @@ public class KeyboardUtils {\n \n     private static final String LOG_TAG = \"KeyboardUtils\";\n \n+    public static void setSoftKeyboardVisibility(@NonNull final Runnable showSoftKeyboardRunnable, final Activity activity, final View view, final boolean visible) {\n+        if (visible) {\n+            view.postDelayed(showSoftKeyboardRunnable, 1000);\n+        } else {\n+            view.removeCallbacks(showSoftKeyboardRunnable);\n+            hideSoftKeyboard(activity, view);\n+        }\n+    }\n+\n     /**\n      * Toggle the soft keyboard. The {@link InputMethodManager#SHOW_FORCED} is passed as\n      * {@code showFlags} so that keyboard is forcefully shown if it needs to be enabled.\n@@ -26,9 +36,11 @@ public class KeyboardUtils {\n      * default implementation of {@link InputMethodService#onEvaluateInputViewShown()} and returns\n      * {@code true}.\n      */\n-    public static void toggleSoftKeyboard(Context context) {\n+    public static void toggleSoftKeyboard(final Context context) {\n+        if (context == null) return;\n         InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n-        inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);\n+        if (inputMethodManager != null)\n+            inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);\n     }\n \n     /**\n@@ -47,50 +59,65 @@ public static void toggleSoftKeyboard(Context context) {\n      * check by passing {@code 0} as {@code flags}.\n      * https://cs.android.com/android/platform/superproject/+/android-11.0.0_r3:frameworks/base/core/java/android/inputmethodservice/InputMethodService.java;l=2022\n      */\n-    public static void showSoftKeyboard(Context context, View view) {\n+    public static void showSoftKeyboard(final Context context, final View view) {\n+        if (context == null || view == null) return;\n         InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n-        inputMethodManager.showSoftInput(view, 0);\n+        if (inputMethodManager != null)\n+            inputMethodManager.showSoftInput(view, 0);\n     }\n \n-    public static void hideSoftKeyboard(Context context, View view) {\n+    public static void hideSoftKeyboard(final Context context, final View view) {\n+        if (context == null || view == null) return;\n         InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n-        inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);\n+        if (inputMethodManager != null)\n+            inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);\n     }\n \n-    public static void disableSoftKeyboard(Activity activity, View view) {\n+    public static void disableSoftKeyboard(final Activity activity, final View view) {\n+        if (activity == null || view == null) return;\n         hideSoftKeyboard(activity, view);\n         setDisableSoftKeyboardFlags(activity);\n     }\n \n-    public static void setDisableSoftKeyboardFlags(Activity activity) {\n-        activity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n+    public static void setDisableSoftKeyboardFlags(final Activity activity) {\n+        if (activity != null && activity.getWindow() != null)\n+            activity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n     }\n \n-    public static void clearDisableSoftKeyboardFlags(Activity activity) {\n-        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n+    public static void clearDisableSoftKeyboardFlags(final Activity activity) {\n+        if (activity != null && activity.getWindow() != null)\n+            activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n     }\n \n-    public static boolean areDisableSoftKeyboardFlagsSet(Activity activity) {\n+    public static boolean areDisableSoftKeyboardFlagsSet(final Activity activity) {\n+        if (activity == null ||  activity.getWindow() == null) return false;\n         return (activity.getWindow().getAttributes().flags & WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM) != 0;\n     }\n \n-    public static void setResizeTerminalViewForSoftKeyboardFlags(Activity activity) {\n+    public static void setSoftKeyboardAlwaysHiddenFlags(final Activity activity) {\n+        if (activity != null && activity.getWindow() != null)\n+            activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n+    }\n+\n+    public static void setResizeTerminalViewForSoftKeyboardFlags(final Activity activity) {\n         // TODO: The flag is deprecated for API 30 and WindowInset API should be used\n         // https://developer.android.com/reference/android/view/WindowManager.LayoutParams#SOFT_INPUT_ADJUST_RESIZE\n         // https://medium.com/androiddevelopers/animating-your-keyboard-fb776a8fb66d\n         // https://stackoverflow.com/a/65194077/14686958\n-        activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);\n+        if (activity != null && activity.getWindow() != null)\n+            activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);\n     }\n \n     /** Check if keyboard visible. Does not work on android 7 but does on android 11 avd. */\n-    public static boolean isSoftKeyboardVisible(Activity activity) {\n-        WindowInsets insets = activity.getWindow().getDecorView().getRootWindowInsets();\n-\n-        if (insets != null) {\n-            WindowInsetsCompat insetsCompat = WindowInsetsCompat.toWindowInsetsCompat(insets);\n-            if (insetsCompat != null && insetsCompat.isVisible(WindowInsetsCompat.Type.ime())) {\n-                Logger.logVerbose(LOG_TAG, \"Keyboard visible\");\n-                return true;\n+    public static boolean isSoftKeyboardVisible(final Activity activity) {\n+        if (activity != null && activity.getWindow() != null) {\n+            WindowInsets insets = activity.getWindow().getDecorView().getRootWindowInsets();\n+            if (insets != null) {\n+                WindowInsetsCompat insetsCompat = WindowInsetsCompat.toWindowInsetsCompat(insets);\n+                if (insetsCompat != null && insetsCompat.isVisible(WindowInsetsCompat.Type.ime())) {\n+                    Logger.logVerbose(LOG_TAG, \"Keyboard visible\");\n+                    return true;\n+                }\n             }\n         }\n ",
      "parent_sha": "4ecea144bb4d3dd511fa551410f9a481ddd43b92"
    }
  },
  {
    "oid": "82f83a2970b86f1e1f16233d8039abff95fc080e",
    "message": "WcWidth.c: fix typo",
    "date": "2022-12-16T06:58:37Z",
    "url": "https://github.com/termux/termux-app/commit/82f83a2970b86f1e1f16233d8039abff95fc080e",
    "details": {
      "sha": "bd7bea8cab50195519205421d38ddaeb5797aaf6",
      "filename": "terminal-emulator/src/main/java/com/termux/terminal/WcWidth.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/termux/termux-app/blob/82f83a2970b86f1e1f16233d8039abff95fc080e/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FWcWidth.java",
      "raw_url": "https://github.com/termux/termux-app/raw/82f83a2970b86f1e1f16233d8039abff95fc080e/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FWcWidth.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-emulator%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fterminal%2FWcWidth.java?ref=82f83a2970b86f1e1f16233d8039abff95fc080e",
      "patch": "@@ -362,7 +362,7 @@ public final class WcWidth {\n         {0xe0100, 0xe01ef},  // Variation Selector-17   ..Variation Selector-256\n     };\n \n-    // https://github.com/jquast/wcwidth/blob/master/wcwidth/table_zero.py\n+    // https://github.com/jquast/wcwidth/blob/master/wcwidth/table_wide.py\n     // from https://github.com/jquast/wcwidth/pull/64\n     // at commit 1b9b6585b0080ea5cb88dc9815796505724793fe (2022-12-16):\n     private static final int[][] WIDE_EASTASIAN = {",
      "parent_sha": "b1c043d54084d2325b0cfaf3056f54bac14d45a3"
    }
  },
  {
    "oid": "f969c01f7e4110f9b2210acc15329c9c09f4d17d",
    "message": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.9.0`. Check its Changelog sections for info on changes.",
    "date": "2021-03-19T16:18:21Z",
    "url": "https://github.com/termux/termux-app/commit/f969c01f7e4110f9b2210acc15329c9c09f4d17d",
    "details": {
      "sha": "980507f031c9a2569ec66f6c0e8d9039dfc36f58",
      "filename": "app/src/main/java/com/termux/app/TermuxConstants.java",
      "status": "modified",
      "additions": 48,
      "deletions": 45,
      "changes": 93,
      "blob_url": "https://github.com/termux/termux-app/blob/f969c01f7e4110f9b2210acc15329c9c09f4d17d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/f969c01f7e4110f9b2210acc15329c9c09f4d17d/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FTermuxConstants.java?ref=f969c01f7e4110f9b2210acc15329c9c09f4d17d",
      "patch": "@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.8.0\n+ * Version: v0.9.0\n  *\n  * Changelog\n  *\n@@ -54,6 +54,9 @@\n  *      - Fixed Intent extra types javadocs.\n  *      - Added `EXTRA_PENDING_INTENT`, `EXTRA_RESULT_BUNDLE`,\n  *          `EXTRA_STDOUT`, `EXTRA_STDERR`, `EXTRA_EXIT_CODE`, `EXTRA_ERR`, `EXTRA_ERRMSG`.\n+ *\n+ * - 0.9.0 (2021-03-18)\n+ *      - Fixed javadocs.\n  */\n \n /**\n@@ -254,47 +257,47 @@ public final class TermuxConstants {\n      * Termux app and plugin preferences and properties file paths.\n      */\n \n-    /* Termux app default SharedPreferences file basename without extension */\n+    /** Termux app default SharedPreferences file basename without extension */\n     public static final String TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux_preferences\"\n \n-    /* Termux API app default SharedPreferences file basename without extension */\n+    /** Termux API app default SharedPreferences file basename without extension */\n     public static final String TERMUX_API_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_API_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.api_preferences\"\n \n-    /* Termux Boot app default SharedPreferences file basename without extension */\n+    /** Termux Boot app default SharedPreferences file basename without extension */\n     public static final String TERMUX_BOOT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_BOOT_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.boot_preferences\"\n \n-    /* Termux Float app default SharedPreferences file basename without extension */\n+    /** Termux Float app default SharedPreferences file basename without extension */\n     public static final String TERMUX_FLOAT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_FLOAT_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.window_preferences\"\n \n-    /* Termux Styling app default SharedPreferences file basename without extension */\n+    /** Termux Styling app default SharedPreferences file basename without extension */\n     public static final String TERMUX_STYLING_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_STYLING_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.styling_preferences\"\n \n-    /* Termux Tasker app default SharedPreferences file basename without extension */\n+    /** Termux Tasker app default SharedPreferences file basename without extension */\n     public static final String TERMUX_TASKER_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_TASKER_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.tasker_preferences\"\n \n-    /* Termux Widget app default SharedPreferences file basename without extension */\n+    /** Termux Widget app default SharedPreferences file basename without extension */\n     public static final String TERMUX_WIDGET_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_WIDGET_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.widget_preferences\"\n \n \n-    /* Termux app termux.properties primary file path */\n+    /** Termux app termux.properties primary file path */\n     public static final String TERMUX_PROPERTIES_PRIMARY_FILE_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/termux.properties\"; // Default: \"/data/data/com.termux/files/home/.termux/termux.properties\"\n-    /* Termux app termux.properties primary file */\n+    /** Termux app termux.properties primary file */\n     public static final File TERMUX_PROPERTIES_PRIMARY_FILE = new File(TERMUX_PROPERTIES_PRIMARY_FILE_PATH);\n \n-    /* Termux app termux.properties secondary file path */\n+    /** Termux app termux.properties secondary file path */\n     public static final String TERMUX_PROPERTIES_SECONDARY_FILE_PATH = TERMUX_CONFIG_HOME_DIR_PATH + \"/termux.properties\"; // Default: \"/data/data/com.termux/files/home/.config/termux/termux.properties\"\n-    /* Termux app termux.properties secondary file */\n+    /** Termux app termux.properties secondary file */\n     public static final File TERMUX_PROPERTIES_SECONDARY_FILE = new File(TERMUX_PROPERTIES_SECONDARY_FILE_PATH);\n \n \n-    /* Termux app and Termux:Styling colors.properties file path */\n+    /** Termux app and Termux:Styling colors.properties file path */\n     public static final String TERMUX_COLOR_PROPERTIES_FILE_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/colors.properties\"; // Default: \"/data/data/com.termux/files/home/.termux/colors.properties\"\n-    /* Termux app and Termux:Styling colors.properties file */\n+    /** Termux app and Termux:Styling colors.properties file */\n     public static final File TERMUX_COLOR_PROPERTIES_FILE = new File(TERMUX_COLOR_PROPERTIES_FILE_PATH);\n \n-    /* Termux app and Termux:Styling font.ttf file path */\n+    /** Termux app and Termux:Styling font.ttf file path */\n     public static final String TERMUX_FONT_FILE_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/font.ttf\"; // Default: \"/data/data/com.termux/files/home/.termux/font.ttf\"\n-    /* Termux app and Termux:Styling font.ttf file */\n+    /** Termux app and Termux:Styling font.ttf file */\n     public static final File TERMUX_FONT_FILE = new File(TERMUX_FONT_FILE_PATH);\n \n \n@@ -305,27 +308,27 @@ public final class TermuxConstants {\n      * Termux app plugin specific paths.\n      */\n \n-     /* Termux app directory path to store scripts to be run at boot by Termux:Boot */\n+     /** Termux app directory path to store scripts to be run at boot by Termux:Boot */\n     public static final String TERMUX_BOOT_SCRIPTS_DIR_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/boot\"; // Default: \"/data/data/com.termux/files/home/.termux/boot\"\n-    /* Termux app directory to store scripts to be run at boot by Termux:Boot */\n+    /** Termux app directory to store scripts to be run at boot by Termux:Boot */\n     public static final File TERMUX_BOOT_SCRIPTS_DIR = new File(TERMUX_BOOT_SCRIPTS_DIR_PATH);\n \n \n-    /* Termux app directory path to store foreground scripts that can be run by the termux launcher widget provided by Termux:Widget */\n+    /** Termux app directory path to store foreground scripts that can be run by the termux launcher widget provided by Termux:Widget */\n     public static final String TERMUX_SHORTCUT_SCRIPTS_DIR_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/shortcuts\"; // Default: \"/data/data/com.termux/files/home/.termux/shortcuts\"\n-    /* Termux app directory to store foreground scripts that can be run by the termux launcher widget provided by Termux:Widget */\n+    /** Termux app directory to store foreground scripts that can be run by the termux launcher widget provided by Termux:Widget */\n     public static final File TERMUX_SHORTCUT_SCRIPTS_DIR = new File(TERMUX_SHORTCUT_SCRIPTS_DIR_PATH);\n \n \n-     /* Termux app directory path to store background scripts that can be run by the termux launcher widget provided by Termux:Widget */\n+     /** Termux app directory path to store background scripts that can be run by the termux launcher widget provided by Termux:Widget */\n     public static final String TERMUX_SHORTCUT_TASKS_SCRIPTS_DIR_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/shortcuts/tasks\"; // Default: \"/data/data/com.termux/files/home/.termux/shortcuts/tasks\"\n-    /* Termux app directory to store background scripts that can be run by the termux launcher widget provided by Termux:Widget */\n+    /** Termux app directory to store background scripts that can be run by the termux launcher widget provided by Termux:Widget */\n     public static final File TERMUX_SHORTCUT_TASKS_SCRIPTS_DIR = new File(TERMUX_SHORTCUT_TASKS_SCRIPTS_DIR_PATH);\n \n \n-    /* Termux app directory path to store scripts to be run by 3rd party twofortyfouram locale plugin host apps like Tasker app via the Termux:Tasker plugin client */\n+    /** Termux app directory path to store scripts to be run by 3rd party twofortyfouram locale plugin host apps like Tasker app via the Termux:Tasker plugin client */\n     public static final String TERMUX_TASKER_SCRIPTS_DIR_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/tasker\"; // Default: \"/data/data/com.termux/files/home/.termux/tasker\"\n-    /* Termux app directory to store scripts to be run by 3rd party twofortyfouram locale plugin host apps like Tasker app via the Termux:Tasker plugin client */\n+    /** Termux app directory to store scripts to be run by 3rd party twofortyfouram locale plugin host apps like Tasker app via the Termux:Tasker plugin client */\n     public static final File TERMUX_TASKER_SCRIPTS_DIR = new File(TERMUX_TASKER_SCRIPTS_DIR_PATH);\n \n \n@@ -336,18 +339,18 @@ public final class TermuxConstants {\n      * Termux app and plugins miscellaneous variables.\n      */\n \n-     /* Android OS permission declared by Termux app in AndroidManifest.xml which can be requested by 3rd party apps to run various commands in Termux app context */\n+     /** Android OS permission declared by Termux app in AndroidManifest.xml which can be requested by 3rd party apps to run various commands in Termux app context */\n     public static final String PERMISSION_RUN_COMMAND = TERMUX_PACKAGE_NAME + \".permission.RUN_COMMAND\"; // Default: \"com.termux.permission.RUN_COMMAND\"\n \n-     /* Termux property defined in termux.properties file as a secondary check to PERMISSION_RUN_COMMAND to allow 3rd party apps to run various commands in Termux app context */\n+     /** Termux property defined in termux.properties file as a secondary check to PERMISSION_RUN_COMMAND to allow 3rd party apps to run various commands in Termux app context */\n     public static final String PROP_ALLOW_EXTERNAL_APPS = \"allow-external-apps\"; // Default: \"allow-external-apps\"\n-    /* Default value for {@link #PROP_ALLOW_EXTERNAL_APPS} */\n+    /** Default value for {@link #PROP_ALLOW_EXTERNAL_APPS} */\n     public static final String PROP_DEFAULT_VALUE_ALLOW_EXTERNAL_APPS = \"false\"; // Default: \"false\"\n \n-    /* The broadcast action sent when Termux App opens */\n+    /** The broadcast action sent when Termux App opens */\n     public static final String BROADCAST_TERMUX_OPENED = TERMUX_PACKAGE_NAME + \".app.OPENED\";\n \n-    /* The Uri authority for Termux app file shares */\n+    /** The Uri authority for Termux app file shares */\n     public static final String TERMUX_FILE_SHARE_URI_AUTHORITY = TERMUX_PACKAGE_NAME + \".files\"; // Default: \"com.termux.files\"\n \n \n@@ -367,13 +370,13 @@ public static final class TERMUX_APP {\n          */\n         public static final class TERMUX_ACTIVITY {\n \n-            /* Intent action to start termux failsafe session */\n+            /** Intent action to start termux failsafe session */\n             public static final String ACTION_FAILSAFE_SESSION = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.failsafe_session\"; // Default: \"com.termux.app.failsafe_session\"\n \n \n-            /* Intent action to make termux reload its termux session styling */\n+            /** Intent action to make termux reload its termux session styling */\n             public static final String ACTION_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n-            /* Intent {@code String} extra for what to reload for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent */\n+            /** Intent {@code String} extra for what to reload for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent */\n             public static final String EXTRA_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n \n         }\n@@ -390,27 +393,27 @@ public static final class TERMUX_ACTIVITY {\n          */\n         public static final class TERMUX_SERVICE {\n \n-            /* Intent action to stop TERMUX_SERVICE */\n+            /** Intent action to stop TERMUX_SERVICE */\n             public static final String ACTION_STOP_SERVICE = TERMUX_PACKAGE_NAME + \".service_stop\"; // Default: \"com.termux.service_stop\"\n \n \n-            /* Intent action to make TERMUX_SERVICE acquire a wakelock */\n+            /** Intent action to make TERMUX_SERVICE acquire a wakelock */\n             public static final String ACTION_WAKE_LOCK = TERMUX_PACKAGE_NAME + \".service_wake_lock\"; // Default: \"com.termux.service_wake_lock\"\n \n \n-            /* Intent action to make TERMUX_SERVICE release wakelock */\n+            /** Intent action to make TERMUX_SERVICE release wakelock */\n             public static final String ACTION_WAKE_UNLOCK = TERMUX_PACKAGE_NAME + \".service_wake_unlock\"; // Default: \"com.termux.service_wake_unlock\"\n \n \n-            /* Intent action to execute command with TERMUX_SERVICE */\n+            /** Intent action to execute command with TERMUX_SERVICE */\n             public static final String ACTION_SERVICE_EXECUTE = TERMUX_PACKAGE_NAME + \".service_execute\"; // Default: \"com.termux.service_execute\"\n-            /* Uri scheme for paths sent via intent to TERMUX_SERVICE */\n+            /** Uri scheme for paths sent via intent to TERMUX_SERVICE */\n             public static final String URI_SCHEME_SERVICE_EXECUTE = TERMUX_PACKAGE_NAME + \".file\"; // Default: \"com.termux.file\"\n-            /* Intent {@code String[]} extra for command arguments for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            /** Intent {@code String[]} extra for command arguments for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_ARGUMENTS = TERMUX_PACKAGE_NAME + \".execute.arguments\"; // Default: \"com.termux.execute.arguments\"\n-            /* Intent {@code String} extra for command current working directory for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            /** Intent {@code String} extra for command current working directory for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_WORKDIR = TERMUX_PACKAGE_NAME + \".execute.cwd\"; // Default: \"com.termux.execute.cwd\"\n-            /* Intent {@code boolean} extra for command background mode for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            /** Intent {@code boolean} extra for command background mode for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".execute.background\"; // Default: \"com.termux.execute.background\"\n             /** Intent {@code Parcelable} extra containing pending intent for the execute command caller */\n             public static final String EXTRA_PENDING_INTENT = \"pendingIntent\"; // Default: \"pendingIntent\"\n@@ -445,15 +448,15 @@ public static final class TERMUX_SERVICE {\n          */\n         public static final class RUN_COMMAND_SERVICE {\n \n-            /* Intent action to execute command with RUN_COMMAND_SERVICE */\n+            /** Intent action to execute command with RUN_COMMAND_SERVICE */\n             public static final String ACTION_RUN_COMMAND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND\"; // Default: \"com.termux.RUN_COMMAND\"\n-            /* Intent {@code String} extra for command path for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code String} extra for command path for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_COMMAND_PATH = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_PATH\"; // Default: \"com.termux.RUN_COMMAND_PATH\"\n-            /* Intent {@code String[]} extra for command arguments for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code String[]} extra for command arguments for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_ARGUMENTS = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_ARGUMENTS\"; // Default: \"com.termux.RUN_COMMAND_ARGUMENTS\"\n-            /* Intent {@code String} extra for command current working directory for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code String} extra for command current working directory for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_WORKDIR = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_WORKDIR\"; // Default: \"com.termux.RUN_COMMAND_WORKDIR\"\n-            /* Intent {@code boolean} extra for command background mode for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code boolean} extra for command background mode for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_BACKGROUND\"; // Default: \"com.termux.RUN_COMMAND_BACKGROUND\"\n \n         }",
      "parent_sha": "fb6e9b69abf5e9f25495dbc15118f472846fb9e0"
    }
  },
  {
    "oid": "b3eabd9bad5f0eb771ff4304cf618b0494d5435f",
    "message": "ExtraKeys: fix so app doesn't crash if ctrl/alt aren't in extrakeys\n\nOtherwise we get:\nAndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method 'boolean android.widget.CompoundButton.isChecked()' on a null object reference\nAndroidRuntime:        at com.termux.app.ExtraKeysView.b(SourceFile:128)",
    "date": "2018-08-28T00:34:36Z",
    "url": "https://github.com/termux/termux-app/commit/b3eabd9bad5f0eb771ff4304cf618b0494d5435f",
    "details": {
      "sha": "442e73da5c9e45b49b639c44b6e6fe8f70dace82",
      "filename": "app/src/main/java/com/termux/app/ExtraKeysView.java",
      "status": "modified",
      "additions": 31,
      "deletions": 16,
      "changes": 47,
      "blob_url": "https://github.com/termux/termux-app/blob/b3eabd9bad5f0eb771ff4304cf618b0494d5435f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "raw_url": "https://github.com/termux/termux-app/raw/b3eabd9bad5f0eb771ff4304cf618b0494d5435f/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2FExtraKeysView.java?ref=b3eabd9bad5f0eb771ff4304cf618b0494d5435f",
      "patch": "@@ -101,36 +101,48 @@ static void sendKey(View view, String keyName) {\n     private ToggleButton controlButton;\n     private ToggleButton altButton;\n     private ToggleButton fnButton;\n+    private boolean hasControlButton = false;\n+    private boolean hasAltButton = false;\n+    private boolean hasFnButton = false;\n     private ScheduledExecutorService scheduledExecutor;\n     private PopupWindow popupWindow;\n     private int longPressCount;\n \n     public boolean readControlButton() {\n-        if (controlButton.isPressed()) return true;\n-        boolean result = controlButton.isChecked();\n-        if (result) {\n-            controlButton.setChecked(false);\n-            controlButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasControlButton) {\n+            if (controlButton.isPressed()) return true;\n+            result = controlButton.isChecked();\n+            if (result) {\n+                controlButton.setChecked(false);\n+                controlButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n \n     public boolean readAltButton() {\n-        if (altButton.isPressed()) return true;\n-        boolean result = altButton.isChecked();\n-        if (result) {\n-            altButton.setChecked(false);\n-            altButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasAltButton) {\n+            if (altButton.isPressed()) return true;\n+            result = altButton.isChecked();\n+            if (result) {\n+                altButton.setChecked(false);\n+                altButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n \n     public boolean readFnButton() {\n-        if (fnButton.isPressed()) return true;\n-        boolean result = fnButton.isChecked();\n-        if (result) {\n-            fnButton.setChecked(false);\n-            fnButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasFnButton) {\n+            if (fnButton.isPressed()) return true;\n+            result = fnButton.isChecked();\n+            if (result) {\n+                fnButton.setChecked(false);\n+                fnButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n@@ -159,7 +171,7 @@ void popup(View view, String text) {\n     }\n \n     void reload(final String[][] buttons) {\n-        altButton = controlButton = null;\n+        altButton = controlButton = fnButton = null;\n         removeAllViews();\n \n         int mx = 0;\n@@ -179,14 +191,17 @@ void reload(final String[][] buttons) {\n                 Button button;\n                 switch (buttonText) {\n                     case \"CTRL\":\n+                        hasControlButton = true;\n                         button = controlButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;\n                     case \"ALT\":\n+                        hasAltButton = true;\n                         button = altButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;\n                     case \"FN\":\n+                        hasFnButton = true;\n                         button = fnButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;",
      "parent_sha": "b51dd4f55899c1871b17bd0439cf33c977a9b031"
    }
  },
  {
    "oid": "70c1bddae01d5cb706a7607629566b0f700799e5",
    "message": "Use constant for utf-8 encoding",
    "date": "2019-01-20T22:58:04Z",
    "url": "https://github.com/termux/termux-app/commit/70c1bddae01d5cb706a7607629566b0f700799e5",
    "details": {
      "sha": "12c8befec3ab64ed0d52ec3fabcac4790f18a4ca",
      "filename": "terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/termux/termux-app/blob/70c1bddae01d5cb706a7607629566b0f700799e5/terminal-emulator%2Fsrc%2Ftest%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalTestCase.java",
      "raw_url": "https://github.com/termux/termux-app/raw/70c1bddae01d5cb706a7607629566b0f700799e5/terminal-emulator%2Fsrc%2Ftest%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalTestCase.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/terminal-emulator%2Fsrc%2Ftest%2Fjava%2Fcom%2Ftermux%2Fterminal%2FTerminalTestCase.java?ref=70c1bddae01d5cb706a7607629566b0f700799e5",
      "patch": "@@ -4,7 +4,6 @@\n import junit.framework.TestCase;\n \n import java.io.ByteArrayOutputStream;\n-import java.io.UnsupportedEncodingException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.HashSet;\n@@ -27,14 +26,10 @@ public void write(byte[] data, int offset, int count) {\n \t\t}\n \n \t\tpublic String getOutputAndClear() {\n-\t\t\ttry {\n-\t\t\t\tString result = new String(baos.toByteArray(), \"UTF-8\");\n-\t\t\t\tbaos.reset();\n-\t\t\t\treturn result;\n-\t\t\t} catch (UnsupportedEncodingException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t}\n-\t\t}\n+            String result = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n+            baos.reset();\n+            return result;\n+        }\n \n \t\t@Override\n \t\tpublic void titleChanged(String oldTitle, String newTitle) {",
      "parent_sha": "4df285013e3e7720933d4be3f01ae9490aa26aca"
    }
  },
  {
    "oid": "3e0f74a8949fe8a5874773e343d72dcee4492dc3",
    "message": "Fixed keep screen on default value\n\nThe `TermuxPreferenceConstants` classes has been updated to `v0.6.0`. Check its Changelog sections for info on changes.",
    "date": "2021-03-24T01:52:17Z",
    "url": "https://github.com/termux/termux-app/commit/3e0f74a8949fe8a5874773e343d72dcee4492dc3",
    "details": {
      "sha": "3fed9967bdb3611921e27e06d20219297d719845",
      "filename": "app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/termux/termux-app/blob/3e0f74a8949fe8a5874773e343d72dcee4492dc3/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fsettings%2Fpreferences%2FTermuxPreferenceConstants.java",
      "raw_url": "https://github.com/termux/termux-app/raw/3e0f74a8949fe8a5874773e343d72dcee4492dc3/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fsettings%2Fpreferences%2FTermuxPreferenceConstants.java",
      "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftermux%2Fapp%2Fsettings%2Fpreferences%2FTermuxPreferenceConstants.java?ref=3e0f74a8949fe8a5874773e343d72dcee4492dc3",
      "patch": "@@ -1,7 +1,7 @@\n package com.termux.app.settings.preferences;\n \n /*\n- * Version: v0.5.0\n+ * Version: v0.6.0\n  *\n  * Changelog\n  *\n@@ -26,6 +26,9 @@\n  * - 0.5.0 (2021-03-24)\n  *      - Added following to `TERMUX_APP`:\n  *          `KEY_LAST_NOTIFICATION_ID` and `DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID`.\n+ *\n+ * - 0.6.0 (2021-03-24)\n+ *      - Change `DEFAULT_VALUE_KEEP_SCREEN_ON` value to `false` in `TERMUX_APP`.\n  */\n \n /**\n@@ -53,7 +56,7 @@ public static final class TERMUX_APP {\n          * Defines the key for whether to always keep screen on\n          */\n         public static final String KEY_KEEP_SCREEN_ON = \"screen_always_on\";\n-        public static final boolean DEFAULT_VALUE_KEEP_SCREEN_ON = true;\n+        public static final boolean DEFAULT_VALUE_KEEP_SCREEN_ON = false;\n \n \n         /**",
      "parent_sha": "2b3f6817235a44fd119e209623ef4b08439f03d2"
    }
  }
]