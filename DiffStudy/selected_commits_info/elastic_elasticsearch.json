[
  {
    "oid": "55ba9c7e94fb5f6a8202bfa3ba9d84093372e906",
    "message": "Fix failure in AppendProcessorTests.testAppendingToListWithDuplicatesDisallowed (#62842)",
    "date": "2020-09-25T12:57:18Z",
    "url": "https://github.com/elastic/elasticsearch/commit/55ba9c7e94fb5f6a8202bfa3ba9d84093372e906",
    "details": {
      "sha": "08ed1a6bbf16269d3d14cafe46081cab26c7db10",
      "filename": "modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/AppendProcessorTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/55ba9c7e94fb5f6a8202bfa3ba9d84093372e906/modules%2Fingest-common%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fingest%2Fcommon%2FAppendProcessorTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/55ba9c7e94fb5f6a8202bfa3ba9d84093372e906/modules%2Fingest-common%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fingest%2Fcommon%2FAppendProcessorTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Fingest-common%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fingest%2Fcommon%2FAppendProcessorTests.java?ref=55ba9c7e94fb5f6a8202bfa3ba9d84093372e906",
      "patch": "@@ -193,7 +193,6 @@ public void testAppendingUniqueValueToScalar() throws Exception {\n         assertThat(list, equalTo(List.of(originalValue, newValue)));\n     }\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/62839\")\n     public void testAppendingToListWithDuplicatesDisallowed() throws Exception {\n         IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n         int size = randomIntBetween(0, 10);\n@@ -209,7 +208,7 @@ public void testAppendingToListWithDuplicatesDisallowed() throws Exception {\n             .collect(Collectors.toSet());\n \n         // create a set using the new values making sure there are no overlapping values already present in the existing values\n-        Set<String> nonexistingValues = Sets.difference(newValues, new HashSet<>(existingValues));\n+        Set<String> nonexistingValues = Sets.difference(newValues, new HashSet<>(list));\n         List<String> valuesToAppend = new ArrayList<>(existingValues);\n         valuesToAppend.addAll(nonexistingValues);\n         expectedValues.addAll(nonexistingValues);",
      "parent_sha": "8ba4004dc0cc8f1e72e95bcb7d0cbaeb22856e78"
    }
  },
  {
    "oid": "cbd87f70dee3df5a2df3f7627ffe50b5814bab7f",
    "message": "Fix compilation failure in :qa:vagrant (#40083)",
    "date": "2019-03-15T09:38:17Z",
    "url": "https://github.com/elastic/elasticsearch/commit/cbd87f70dee3df5a2df3f7627ffe50b5814bab7f",
    "details": {
      "sha": "1484404c431b2c35125cfe58cf71944281d9826b",
      "filename": "qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/cbd87f70dee3df5a2df3f7627ffe50b5814bab7f/qa%2Fvagrant%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fpackaging%2Ftest%2FArchiveTestCase.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/cbd87f70dee3df5a2df3f7627ffe50b5814bab7f/qa%2Fvagrant%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fpackaging%2Ftest%2FArchiveTestCase.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/qa%2Fvagrant%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fpackaging%2Ftest%2FArchiveTestCase.java?ref=cbd87f70dee3df5a2df3f7627ffe50b5814bab7f",
      "patch": "@@ -372,7 +372,8 @@ public void test93ElasticsearchNodeCustomDataPathAndNotEsHomeWorkDir() throws IO\n         Archives.runElasticsearch(installation);\n         Archives.stopElasticsearch(installation);\n \n-        final Shell sh = new Shell(getTempDir());\n+        final Shell sh = new Shell();\n+        sh.setWorkingDirectory(getTempDir());\n \n         Result result = sh.run(\"echo y | \" + installation.executables().elasticsearchNode + \" unsafe-bootstrap\");\n         assertThat(result.stdout, containsString(\"Master node was successfully bootstrapped\"));",
      "parent_sha": "be7ee7d2ed204a470a7368a470c2e16a69863633"
    }
  },
  {
    "oid": "3a9dc8f452bae6b4ec85685307f0e5856a8397ee",
    "message": "change back to cached thread pool",
    "date": "2010-10-27T18:13:42Z",
    "url": "https://github.com/elastic/elasticsearch/commit/3a9dc8f452bae6b4ec85685307f0e5856a8397ee",
    "details": {
      "sha": "9c7f662789cfe9699a7e46a5dce977576306dcc7",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPoolModule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/3a9dc8f452bae6b4ec85685307f0e5856a8397ee/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FThreadPoolModule.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/3a9dc8f452bae6b4ec85685307f0e5856a8397ee/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FThreadPoolModule.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FThreadPoolModule.java?ref=3a9dc8f452bae6b4ec85685307f0e5856a8397ee",
      "patch": "@@ -25,7 +25,7 @@\n import org.elasticsearch.common.inject.Modules;\n import org.elasticsearch.common.inject.SpawnModules;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.threadpool.scaling.ScalingThreadPoolModule;\n+import org.elasticsearch.threadpool.cached.CachedThreadPoolModule;\n \n /**\n  * @author kimchy (shay.banon)\n@@ -39,7 +39,7 @@ public ThreadPoolModule(Settings settings) {\n     }\n \n     @Override public Iterable<? extends Module> spawnModules() {\n-        return ImmutableList.of(Modules.createModule(settings.getAsClass(\"threadpool.type\", ScalingThreadPoolModule.class, \"org.elasticsearch.threadpool.\", \"ThreadPoolModule\"), settings));\n+        return ImmutableList.of(Modules.createModule(settings.getAsClass(\"threadpool.type\", CachedThreadPoolModule.class, \"org.elasticsearch.threadpool.\", \"ThreadPoolModule\"), settings));\n     }\n \n     @Override protected void configure() {",
      "parent_sha": "185f5a9e1811893f19ac4679dfe7900ef84705f9"
    }
  },
  {
    "oid": "97796d36345745f1ee7a056dbb9c7f6b9974b1d3",
    "message": "minor comment fixes\n\nOriginal commit: elastic/x-pack-elasticsearch@fbadfc9218ab1d40d8f56b4d2bb65bf22493ab1d",
    "date": "2014-11-04T21:01:01Z",
    "url": "https://github.com/elastic/elasticsearch/commit/97796d36345745f1ee7a056dbb9c7f6b9974b1d3",
    "details": {
      "sha": "0a2d71535aaa1a37d8212a8a1f7f294253eb9b8b",
      "filename": "src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/97796d36345745f1ee7a056dbb9c7f6b9974b1d3/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Flicense%2Fplugin%2Fcore%2FLicensesService.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/97796d36345745f1ee7a056dbb9c7f6b9974b1d3/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Flicense%2Fplugin%2Fcore%2FLicensesService.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Flicense%2Fplugin%2Fcore%2FLicensesService.java?ref=97796d36345745f1ee7a056dbb9c7f6b9974b1d3",
      "patch": "@@ -101,8 +101,7 @@ public class LicensesService extends AbstractLifecycleComponent<LicensesService>\n \n     /**\n      * Currently active scheduledNotifications\n-     * All finished notifications will be cleared in {@link #clusterChanged(org.elasticsearch.cluster.ClusterChangedEvent)}\n-     * and {@link #scheduleNextNotification(long)}\n+     * All finished notifications will be cleared by {@link #scheduleNextNotification(long)}\n      */\n     private final Queue<ScheduledFuture> scheduledNotifications = new ConcurrentLinkedQueue<>();\n \n@@ -289,7 +288,6 @@ private void registerTrialLicense(final RegisterTrialLicenseRequest request) {\n         clusterService.submitStateUpdateTask(\"register trial license []\", new ProcessedClusterStateUpdateTask() {\n             @Override\n             public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n-                // Change to debug\n                 logger.debug(\"Processed Trial License registration\");\n                 LicensesMetaData licensesMetaData = newState.metaData().custom(LicensesMetaData.TYPE);\n                 logLicenseMetaDataStats(\"new\", licensesMetaData);\n@@ -344,7 +342,6 @@ private String generateEncodedTrialLicense(String feature, TimeValue duration, i\n \n     @Override\n     protected void doStart() throws ElasticsearchException {\n-        //Change to debug\n         logger.debug(\"Started LicensesService\");\n         clusterService.add(this);\n     }\n@@ -570,7 +567,6 @@ private boolean registerListener(final ListenerHolder listenerHolder) {\n             } else {\n                 // notify feature as clusterChangedEvent may not happen\n                 // as no trial or signed license has been found for feature\n-                // Change to debug\n                 logger.debug(\"Calling notifyFeaturesAndScheduleNotification [no trial license spec provided]\");\n                 registeredListeners.add(listenerHolder);\n                 notifyFeaturesAndScheduleNotification(currentMetaData);",
      "parent_sha": "d9d04fceaf57fac807264c83002f325b1c8ccf30"
    }
  },
  {
    "oid": "642e45e9e670b654042088ca4ed80a287cc57c8f",
    "message": "Fix setting openldap realm ssl config\n\nThis change fixes the setup of the SSL configuration for the test\nopenldap realm. The configuration was missing the realm identifier so\nthe SSL settings being used were just the default JDK ones that do not\ntrust the certificate of the idp fixture.\n\nSee #37591",
    "date": "2019-01-18T19:24:11Z",
    "url": "https://github.com/elastic/elasticsearch/commit/642e45e9e670b654042088ca4ed80a287cc57c8f",
    "details": {
      "sha": "a4351b696784ac8df79b9cf159581ede04827517",
      "filename": "x-pack/qa/openldap-tests/src/test/java/org/elasticsearch/xpack/security/authc/ldap/OpenLdapUserSearchSessionFactoryTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/642e45e9e670b654042088ca4ed80a287cc57c8f/x-pack%2Fqa%2Fopenldap-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2Fldap%2FOpenLdapUserSearchSessionFactoryTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/642e45e9e670b654042088ca4ed80a287cc57c8f/x-pack%2Fqa%2Fopenldap-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2Fldap%2FOpenLdapUserSearchSessionFactoryTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fqa%2Fopenldap-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2Fldap%2FOpenLdapUserSearchSessionFactoryTests.java?ref=642e45e9e670b654042088ca4ed80a287cc57c8f",
      "patch": "@@ -51,7 +51,7 @@ public class OpenLdapUserSearchSessionFactoryTests extends ESTestCase {\n     private static final String LDAPCACERT_PATH = \"/ca.crt\";\n \n     @Before\n-    public void init() throws Exception {\n+    public void init() {\n         Path caPath = getDataPath(LDAPCACERT_PATH);\n         /*\n          * Prior to each test we reinitialize the socket factory with a new SSLService so that we get a new SSLContext.\n@@ -60,7 +60,7 @@ public void init() throws Exception {\n          */\n         globalSettings = Settings.builder()\n             .put(\"path.home\", createTempDir())\n-            .put(\"xpack.security.authc.realms.ldap.ssl.certificate_authorities\", caPath)\n+            .put(\"xpack.security.authc.realms.ldap.oldap-test.ssl.certificate_authorities\", caPath)\n             .build();\n         threadPool = new TestThreadPool(\"LdapUserSearchSessionFactoryTests\");\n     }",
      "parent_sha": "fc1c47649ad000b8ceb02a5c7d9d85b7590df8f0"
    }
  },
  {
    "oid": "aec0c0f9b6b9e511e56c725f68f9010a8298ed02",
    "message": "Update version of TaskInfo header serialization after backport\n\nUpdate the serialization version after backporting #27764 to 6.x.",
    "date": "2018-01-15T00:20:32Z",
    "url": "https://github.com/elastic/elasticsearch/commit/aec0c0f9b6b9e511e56c725f68f9010a8298ed02",
    "details": {
      "sha": "19e9baedd753b4fefc6f654a079ce613df92f656",
      "filename": "server/src/main/java/org/elasticsearch/tasks/TaskInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/aec0c0f9b6b9e511e56c725f68f9010a8298ed02/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftasks%2FTaskInfo.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/aec0c0f9b6b9e511e56c725f68f9010a8298ed02/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftasks%2FTaskInfo.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftasks%2FTaskInfo.java?ref=aec0c0f9b6b9e511e56c725f68f9010a8298ed02",
      "patch": "@@ -97,7 +97,7 @@ public TaskInfo(StreamInput in) throws IOException {\n         runningTimeNanos = in.readLong();\n         cancellable = in.readBoolean();\n         parentTaskId = TaskId.readFromStream(in);\n-        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {\n+        if (in.getVersion().onOrAfter(Version.V_6_2_0)) {\n             headers = in.readMap(StreamInput::readString, StreamInput::readString);\n         } else {\n             headers = Collections.emptyMap();\n@@ -115,7 +115,7 @@ public void writeTo(StreamOutput out) throws IOException {\n         out.writeLong(runningTimeNanos);\n         out.writeBoolean(cancellable);\n         parentTaskId.writeTo(out);\n-        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {\n+        if (out.getVersion().onOrAfter(Version.V_6_2_0)) {\n             out.writeMap(headers, StreamOutput::writeString, StreamOutput::writeString);\n         }\n     }",
      "parent_sha": "fbb840b5c870b238163b3e4726d490e2b6711c23"
    }
  },
  {
    "oid": "8fdeedf61daa421cc774eed8faeb2358b205ed9d",
    "message": "fix generics compile error in Eclipse\n\nEclipse compiler needs a hint to tell it the generics for the comparator function\n\nOriginal commit: elastic/x-pack-elasticsearch@b3d71d34654ba70d98a8c73fd584724040cda661",
    "date": "2017-01-05T16:23:24Z",
    "url": "https://github.com/elastic/elasticsearch/commit/8fdeedf61daa421cc774eed8faeb2358b205ed9d",
    "details": {
      "sha": "94b4c4cf2b4aa70e25127e032e50fd991f2a8252",
      "filename": "elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/scheduler/SchedulerConfig.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/8fdeedf61daa421cc774eed8faeb2358b205ed9d/elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fprelert%2Fscheduler%2FSchedulerConfig.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/8fdeedf61daa421cc774eed8faeb2358b205ed9d/elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fprelert%2Fscheduler%2FSchedulerConfig.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fprelert%2Fscheduler%2FSchedulerConfig.java?ref=8fdeedf61daa421cc774eed8faeb2358b205ed9d",
      "patch": "@@ -39,6 +39,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.function.Function;\n \n /**\n  * Scheduler configuration options. Describes where to proactively pull input\n@@ -98,7 +99,7 @@ public class SchedulerConfig extends ToXContentToBytes implements Writeable {\n                 while (p.nextToken() != XContentParser.Token.END_OBJECT) {\n                     parsedScriptFields.add(new SearchSourceBuilder.ScriptField(new QueryParseContext(p, ParseFieldMatcher.STRICT)));\n                 }\n-                Collections.sort(parsedScriptFields, Comparator.comparing(f -> f.fieldName()));\n+                Collections.sort(parsedScriptFields, Comparator.comparing((Function<SearchSourceBuilder.ScriptField, String>) f -> f.fieldName()));\n                 return parsedScriptFields;\n             }, SCRIPT_FIELDS);\n         PARSER.declareInt(Builder::setScrollSize, SCROLL_SIZE);\n@@ -431,7 +432,7 @@ private BytesReference xContentToBytes(ToXContent value) {\n \n         public void setScriptFields(List<SearchSourceBuilder.ScriptField> scriptFields) {\n             List<SearchSourceBuilder.ScriptField> sorted = new ArrayList<>(scriptFields);\n-            Collections.sort(sorted, Comparator.comparing(f -> f.fieldName()));\n+            Collections.sort(sorted, Comparator.comparing((Function<SearchSourceBuilder.ScriptField, String>) f -> f.fieldName()));\n             this.scriptFields = sorted;\n         }\n ",
      "parent_sha": "70aa238327ac0843ed1ad94d0267d2e6f371c2b2"
    }
  },
  {
    "oid": "77da9c9b1af7ba8ca3c5d7f7e11dc784aa091f25",
    "message": "Create a thread dump if ES fails to start in packaging tests (#48932)\n\nRelates to #15385.\r\nHoping to get some insight on CI failures.",
    "date": "2019-11-12T08:08:01Z",
    "url": "https://github.com/elastic/elasticsearch/commit/77da9c9b1af7ba8ca3c5d7f7e11dc784aa091f25",
    "details": {
      "sha": "4b47eb8511eb33412402593298f601e3915d1c16",
      "filename": "qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/77da9c9b1af7ba8ca3c5d7f7e11dc784aa091f25/qa%2Fos%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fpackaging%2Ftest%2FArchiveTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/77da9c9b1af7ba8ca3c5d7f7e11dc784aa091f25/qa%2Fos%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fpackaging%2Ftest%2FArchiveTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/qa%2Fos%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fpackaging%2Ftest%2FArchiveTests.java?ref=77da9c9b1af7ba8ca3c5d7f7e11dc784aa091f25",
      "patch": "@@ -137,7 +137,16 @@ public void test50StartAndStop() throws Exception {\n         // cleanup from previous test\n         rm(installation.config(\"elasticsearch.keystore\"));\n \n-        Archives.runElasticsearch(installation, sh);\n+        try {\n+            Archives.runElasticsearch(installation, sh);\n+        } catch (Exception e ){\n+            if (Files.exists(installation.home.resolve(\"elasticsearch.pid\"))) {\n+                String pid = FileUtils.slurp(installation.home.resolve(\"elasticsearch.pid\")).trim();\n+                logger.info(\"Dumping jstack of elasticsearch processb ({}) that failed to start\", pid);\n+                sh.runIgnoreExitCode(\"jstack \" + pid);\n+            }\n+            throw e;\n+        }\n \n         assertTrue(\"gc logs exist\", Files.exists(installation.logs.resolve(\"gc.log\")));\n         ServerUtils.runElasticsearchTests();",
      "parent_sha": "77a8bc3cd1ec585873daad50ed34577184204571"
    }
  },
  {
    "oid": "6c31d3cd998a429f8260886a9fe0b673c5dcc275",
    "message": "Export preallocate to jna (#95158)\n\nOn MacOS, jna reflectively constructs preallocate classes, so the\npackage needs to be exported to jna.\n\ncloses #95125",
    "date": "2023-04-11T15:11:34Z",
    "url": "https://github.com/elastic/elasticsearch/commit/6c31d3cd998a429f8260886a9fe0b673c5dcc275",
    "details": {
      "sha": "89c85d95ab2f0608ebb207c8d79339c186db68a1",
      "filename": "libs/preallocate/src/main/java/module-info.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/6c31d3cd998a429f8260886a9fe0b673c5dcc275/libs%2Fpreallocate%2Fsrc%2Fmain%2Fjava%2Fmodule-info.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/6c31d3cd998a429f8260886a9fe0b673c5dcc275/libs%2Fpreallocate%2Fsrc%2Fmain%2Fjava%2Fmodule-info.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/libs%2Fpreallocate%2Fsrc%2Fmain%2Fjava%2Fmodule-info.java?ref=6c31d3cd998a429f8260886a9fe0b673c5dcc275",
      "patch": "@@ -11,7 +11,7 @@\n     requires org.elasticsearch.logging;\n     requires com.sun.jna;\n \n-    exports org.elasticsearch.preallocate to org.elasticsearch.blobcache;\n+    exports org.elasticsearch.preallocate to org.elasticsearch.blobcache, com.sun.jna;\n \n     provides org.elasticsearch.jdk.ModuleQualifiedExportsService with org.elasticsearch.preallocate.PreallocateModuleExportsService;\n }",
      "parent_sha": "fd789183d82f545603ff822eb9e1a856bccf2220"
    }
  },
  {
    "oid": "a12f09317d154c6fcaa52fe4ddb462c49f5dd8dd",
    "message": "Fallback to settings if transport profile is empty\n\nIf the transport profile does not contain a TCP port range, we fallback\nto the top-level settings.",
    "date": "2016-11-14T18:48:12Z",
    "url": "https://github.com/elastic/elasticsearch/commit/a12f09317d154c6fcaa52fe4ddb462c49f5dd8dd",
    "details": {
      "sha": "8b5d0d429770da5d1bfa05a4e7da9b77e703b8cc",
      "filename": "core/src/main/java/org/elasticsearch/bootstrap/Security.java",
      "status": "modified",
      "additions": 25,
      "deletions": 5,
      "changes": 30,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/a12f09317d154c6fcaa52fe4ddb462c49f5dd8dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fbootstrap%2FSecurity.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/a12f09317d154c6fcaa52fe4ddb462c49f5dd8dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fbootstrap%2FSecurity.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fbootstrap%2FSecurity.java?ref=a12f09317d154c6fcaa52fe4ddb462c49f5dd8dd",
      "patch": "@@ -290,7 +290,7 @@ static void addBindPermissions(Permissions policy, Settings settings) {\n             // a profile is only valid if its the default profile, or if it has an actual name and specifies a port\n             boolean valid = TransportSettings.DEFAULT_PROFILE.equals(name) || (Strings.hasLength(name) && profileSettings.get(\"port\") != null);\n             if (valid) {\n-                addSocketPermissionForTransport(policy, profileSettings);\n+                addSocketPermissionForTransportProfile(policy, profileSettings, settings);\n             }\n         }\n \n@@ -308,22 +308,42 @@ static void addBindPermissions(Permissions policy, Settings settings) {\n      * Add dynamic {@link SocketPermission} based on HTTP settings.\n      *\n      * @param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to.\n-     * @param settings the {@link Settings} instance to read the HTTP from\n+     * @param settings the {@link Settings} instance to read the HTTP settingsfrom\n      */\n     private static void addSocketPermissionForHttp(final Permissions policy, final Settings settings) {\n         // http is simple\n         final String httpRange = HttpTransportSettings.SETTING_HTTP_PORT.get(settings).getPortRangeString();\n         addSocketPermissionForPortRange(policy, httpRange);\n     }\n \n+    /**\n+     * Add dynamic {@link SocketPermission} based on transport settings. This method will first check if there is a port range specified in\n+     * the transport profile specified by {@code profileSettings} and will fall back to {@code settings}.\n+     *\n+     * @param policy          the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to\n+     * @param profileSettings the {@link Settings} to read the transport profile from\n+     * @param settings        the {@link Settings} instance to read the transport settings from\n+     */\n+    private static void addSocketPermissionForTransportProfile(\n+        final Permissions policy,\n+        final Settings profileSettings,\n+        final Settings settings) {\n+        final String transportRange = profileSettings.get(\"port\");\n+        if (transportRange != null) {\n+            addSocketPermissionForPortRange(policy, transportRange);\n+        } else {\n+            addSocketPermissionForTransport(policy, settings);\n+        }\n+    }\n+\n     /**\n      * Add dynamic {@link SocketPermission} based on transport settings.\n      *\n-     * @param policy the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to.\n-     * @param settings the {@link Settings} instance to read the HTTP from\n+     * @param policy          the {@link Permissions} instance to apply the dynamic {@link SocketPermission}s to\n+     * @param settings        the {@link Settings} instance to read the transport settings from\n      */\n     private static void addSocketPermissionForTransport(final Permissions policy, final Settings settings) {\n-        final String transportRange = settings.get(\"port\", TransportSettings.PORT.get(settings));\n+        final String transportRange = TransportSettings.PORT.get(settings);\n         addSocketPermissionForPortRange(policy, transportRange);\n     }\n ",
      "parent_sha": "491a945ac88d23d5ab13fdc06ab60a052edc13d0"
    }
  },
  {
    "oid": "657686cefb736999b2231b4caee318da14e9462a",
    "message": "Fix runtime class cast exception in TRA\n\nIf we fail to acquire the shard lock, need to retry and wait for the new\ncluster state, we were sending the wrong kind of request for the replica\naction. This commit fixes this issue.",
    "date": "2017-05-11T17:58:03Z",
    "url": "https://github.com/elastic/elasticsearch/commit/657686cefb736999b2231b4caee318da14e9462a",
    "details": {
      "sha": "a8ee1677bbdeb18402986f7c568e701d95b2d8fe",
      "filename": "core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/657686cefb736999b2231b4caee318da14e9462a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Faction%2Fsupport%2Freplication%2FTransportReplicationAction.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/657686cefb736999b2231b4caee318da14e9462a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Faction%2Fsupport%2Freplication%2FTransportReplicationAction.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Faction%2Fsupport%2Freplication%2FTransportReplicationAction.java?ref=657686cefb736999b2231b4caee318da14e9462a",
      "patch": "@@ -542,7 +542,7 @@ public void onNewClusterState(ClusterState state) {\n                             new TransportChannelResponseHandler<>(logger, channel, extraMessage,\n                                 () -> TransportResponse.Empty.INSTANCE);\n                         transportService.sendRequest(clusterService.localNode(), transportReplicaAction,\n-                            new ConcreteShardRequest<>(request, targetAllocationID),\n+                            new ConcreteReplicaRequest<>(request, targetAllocationID, globalCheckpoint),\n                             handler);\n                     }\n ",
      "parent_sha": "e7d352b489272a87b05019869857656de7fb82fc"
    }
  },
  {
    "oid": "92d4cc13c064ffe2a289aa0e0cae049688aa8153",
    "message": "_cat/allocation: Guaranteed to have at least zero shards",
    "date": "2014-01-24T22:24:45Z",
    "url": "https://github.com/elastic/elasticsearch/commit/92d4cc13c064ffe2a289aa0e0cae049688aa8153",
    "details": {
      "sha": "fddf3cb0cb26b048411ff7bf91b2a1cced6a6fd9",
      "filename": "src/main/java/org/elasticsearch/rest/action/cat/RestAllocationAction.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/92d4cc13c064ffe2a289aa0e0cae049688aa8153/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frest%2Faction%2Fcat%2FRestAllocationAction.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/92d4cc13c064ffe2a289aa0e0cae049688aa8153/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frest%2Faction%2Fcat%2FRestAllocationAction.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frest%2Faction%2Fcat%2FRestAllocationAction.java?ref=92d4cc13c064ffe2a289aa0e0cae049688aa8153",
      "patch": "@@ -144,7 +144,7 @@ private Table buildTable(RestRequest request, final ClusterStateResponse state,\n         for (NodeStats nodeStats : stats.getNodes()) {\n             DiscoveryNode node = nodeStats.getNode();\n \n-            int shardCount = -1;\n+            int shardCount = 0;\n             if (allocs.containsKey(node.id())) {\n                 shardCount = allocs.lget();\n             }\n@@ -158,7 +158,7 @@ private Table buildTable(RestRequest request, final ClusterStateResponse state,\n             }\n \n             table.startRow();\n-            table.addCell(shardCount < 0 ? null : shardCount);\n+            table.addCell(shardCount);\n             table.addCell(used < 0 ? null : new ByteSizeValue(used));\n             table.addCell(avail < 0 ? null : new ByteSizeValue(avail));\n             table.addCell(nodeStats.getFs().getTotal().getTotal());",
      "parent_sha": "25b49dd50b2e72a0d74374bffa51a27f22d5c5f7"
    }
  },
  {
    "oid": "996f0ed2c7c71dcc4ef4ae52d2ed75f91fe2cf66",
    "message": "Fixing a watcher history race condition in TimeThrottleIntegrationTests (#95926)",
    "date": "2023-05-09T18:02:31Z",
    "url": "https://github.com/elastic/elasticsearch/commit/996f0ed2c7c71dcc4ef4ae52d2ed75f91fe2cf66",
    "details": {
      "sha": "3b8385f79c4f57d65f5bb553ac79d6589041b4ab",
      "filename": "x-pack/plugin/watcher/src/internalClusterTest/java/org/elasticsearch/xpack/watcher/actions/TimeThrottleIntegrationTests.java",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/996f0ed2c7c71dcc4ef4ae52d2ed75f91fe2cf66/x-pack%2Fplugin%2Fwatcher%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fwatcher%2Factions%2FTimeThrottleIntegrationTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/996f0ed2c7c71dcc4ef4ae52d2ed75f91fe2cf66/x-pack%2Fplugin%2Fwatcher%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fwatcher%2Factions%2FTimeThrottleIntegrationTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fwatcher%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fwatcher%2Factions%2FTimeThrottleIntegrationTests.java?ref=996f0ed2c7c71dcc4ef4ae52d2ed75f91fe2cf66",
      "patch": "@@ -111,12 +111,17 @@ private void assertLatestHistoryEntry(String id, String expectedValue) throws Ex\n         });\n     }\n \n-    private void assertTotalHistoryEntries(String id, long expectedCount) {\n-        SearchResponse searchResponse = client().prepareSearch(HistoryStoreField.DATA_STREAM + \"*\")\n-            .setSize(0)\n-            .setSource(new SearchSourceBuilder().query(QueryBuilders.boolQuery().must(termQuery(\"watch_id\", id))))\n-            .get();\n+    private void assertTotalHistoryEntries(String id, long expectedCount) throws Exception {\n+        assertBusy(() -> {\n+            // Watcher history is now written asynchronously, so we check this in an assertBusy\n+            ensureGreen(HistoryStoreField.DATA_STREAM);\n+            SearchResponse searchResponse = client().prepareSearch(HistoryStoreField.DATA_STREAM + \"*\")\n+                .setSize(0)\n+                .setSource(new SearchSourceBuilder().query(QueryBuilders.boolQuery().must(termQuery(\"watch_id\", id))))\n+                .get();\n+\n+            assertThat(searchResponse.getHits().getTotalHits().value, is(oneOf(expectedCount, expectedCount + 1)));\n+        });\n \n-        assertThat(searchResponse.getHits().getTotalHits().value, is(oneOf(expectedCount, expectedCount + 1)));\n     }\n }",
      "parent_sha": "f8b367d2bc8313502292aeb3adbe35ca2916c2ff"
    }
  },
  {
    "oid": "f0e43173eac4549ed78375b991ebd61c0cc13d2e",
    "message": "[ML] Fix DataFrameAnalyticsConfigProviderIT.testUpdate_UpdateCannotBeAppliedWhenTaskIsRunning (#105754)\n\nThe test failed 1 in 32 times because if the value used in the update\r\nmatched the random value used in the original config created by\r\nDataFrameAnalyticsConfigTests.createRandom then the update would be\r\na no-op and no exception would be thrown.\r\n\r\nFixes #58814",
    "date": "2024-02-22T21:18:21Z",
    "url": "https://github.com/elastic/elasticsearch/commit/f0e43173eac4549ed78375b991ebd61c0cc13d2e",
    "details": {
      "sha": "e29cd4545846ca0737f8d5588cc15d1721bd40a4",
      "filename": "x-pack/plugin/ml/src/internalClusterTest/java/org/elasticsearch/xpack/ml/integration/DataFrameAnalyticsConfigProviderIT.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/f0e43173eac4549ed78375b991ebd61c0cc13d2e/x-pack%2Fplugin%2Fml%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fintegration%2FDataFrameAnalyticsConfigProviderIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/f0e43173eac4549ed78375b991ebd61c0cc13d2e/x-pack%2Fplugin%2Fml%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fintegration%2FDataFrameAnalyticsConfigProviderIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fml%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fintegration%2FDataFrameAnalyticsConfigProviderIT.java?ref=f0e43173eac4549ed78375b991ebd61c0cc13d2e",
      "patch": "@@ -332,7 +332,6 @@ public void testUpdate_ConfigDoesNotExist() throws InterruptedException {\n         assertThat(exceptionHolder.get(), is(instanceOf(ResourceNotFoundException.class)));\n     }\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/58814\")\n     public void testUpdate_UpdateCannotBeAppliedWhenTaskIsRunning() throws InterruptedException {\n         String configId = \"config-id\";\n         DataFrameAnalyticsConfig initialConfig = DataFrameAnalyticsConfigTests.createRandom(configId);\n@@ -354,8 +353,10 @@ public void testUpdate_UpdateCannotBeAppliedWhenTaskIsRunning() throws Interrupt\n             AtomicReference<DataFrameAnalyticsConfig> updatedConfigHolder = new AtomicReference<>();\n             AtomicReference<Exception> exceptionHolder = new AtomicReference<>();\n \n+            // Important: the new value specified here must be one that it's impossible for DataFrameAnalyticsConfigTests.createRandom\n+            // to have used originally. If the update is a no-op then the test fails.\n             DataFrameAnalyticsConfigUpdate configUpdate = new DataFrameAnalyticsConfigUpdate.Builder(configId).setModelMemoryLimit(\n-                ByteSizeValue.ofMb(2048)\n+                ByteSizeValue.ofMb(1234)\n             ).build();\n \n             ClusterState clusterState = clusterStateWithRunningAnalyticsTask(configId, DataFrameAnalyticsState.ANALYZING);",
      "parent_sha": "8090c611ba57d9888fa2f01fd62b8bbd087adadd"
    }
  },
  {
    "oid": "38edf9627191578ac930fb04286750dbf7f1e185",
    "message": "Terms API: add the ability to return terms as array (termsAsArray flag), defaulting to false",
    "date": "2010-02-21T23:48:29Z",
    "url": "https://github.com/elastic/elasticsearch/commit/38edf9627191578ac930fb04286750dbf7f1e185",
    "details": {
      "sha": "17c3e93ec4f2f51ccb510a7600630424aceee389",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/terms/RestTermsAction.java",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/38edf9627191578ac930fb04286750dbf7f1e185/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frest%2Faction%2Fterms%2FRestTermsAction.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/38edf9627191578ac930fb04286750dbf7f1e185/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frest%2Faction%2Fterms%2FRestTermsAction.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frest%2Faction%2Fterms%2FRestTermsAction.java?ref=38edf9627191578ac930fb04286750dbf7f1e185",
      "patch": "@@ -107,6 +107,7 @@ public class RestTermsAction extends BaseRestHandler {\n             return;\n         }\n \n+        final boolean termsAsArray = request.paramAsBoolean(\"termsAsArray\", false);\n         client.execTerms(termsRequest, new ActionListener<TermsResponse>() {\n             @Override public void onResponse(TermsResponse response) {\n                 try {\n@@ -125,13 +126,24 @@ public class RestTermsAction extends BaseRestHandler {\n                     for (FieldTermsFreq fieldTermsFreq : response.fields()) {\n                         builder.startObject(fieldTermsFreq.fieldName());\n \n-                        builder.startObject(\"terms\");\n-                        for (TermFreq termFreq : fieldTermsFreq.termsFreqs()) {\n-                            builder.startObject(termFreq.term());\n-                            builder.field(\"docFreq\", termFreq.docFreq());\n+                        if (!termsAsArray) {\n+                            builder.startObject(\"terms\");\n+                            for (TermFreq termFreq : fieldTermsFreq.termsFreqs()) {\n+                                builder.startObject(termFreq.term());\n+                                builder.field(\"docFreq\", termFreq.docFreq());\n+                                builder.endObject();\n+                            }\n                             builder.endObject();\n+                        } else {\n+                            builder.startArray(\"terms\");\n+                            for (TermFreq termFreq : fieldTermsFreq.termsFreqs()) {\n+                                builder.startObject();\n+                                builder.field(\"term\", termFreq.term());\n+                                builder.field(\"docFreq\", termFreq.docFreq());\n+                                builder.endObject();\n+                            }\n+                            builder.endArray();\n                         }\n-                        builder.endObject();\n \n                         builder.endObject();\n                     }",
      "parent_sha": "7cda7eca54953ee248bdb62a01e6069a1d200197"
    }
  },
  {
    "oid": "de73397a05a982212b9f9bad0f5bea3c3bedabb0",
    "message": "Add configurable timeout safe await method (#117296)\n\nAdd a method for a configurable timeout with countdown latches.",
    "date": "2024-11-22T00:11:38Z",
    "url": "https://github.com/elastic/elasticsearch/commit/de73397a05a982212b9f9bad0f5bea3c3bedabb0",
    "details": {
      "sha": "5b2beaee00bfe84958e5b53fb4ef75e7f1036575",
      "filename": "test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/de73397a05a982212b9f9bad0f5bea3c3bedabb0/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftest%2FESTestCase.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/de73397a05a982212b9f9bad0f5bea3c3bedabb0/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftest%2FESTestCase.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftest%2FESTestCase.java?ref=de73397a05a982212b9f9bad0f5bea3c3bedabb0",
      "patch": "@@ -2331,10 +2331,18 @@ public static void safeAwait(CyclicBarrier barrier) {\n      * flag and asserting that the latch is indeed completed before the timeout.\n      */\n     public static void safeAwait(CountDownLatch countDownLatch) {\n+        safeAwait(countDownLatch, SAFE_AWAIT_TIMEOUT);\n+    }\n+\n+    /**\n+     * Await on the given {@link CountDownLatch} with a supplied timeout, preserving the thread's interrupt status\n+     * flag and asserting that the latch is indeed completed before the timeout.\n+     */\n+    public static void safeAwait(CountDownLatch countDownLatch, TimeValue timeout) {\n         try {\n             assertTrue(\n                 \"safeAwait: CountDownLatch did not reach zero within the timeout\",\n-                countDownLatch.await(SAFE_AWAIT_TIMEOUT.millis(), TimeUnit.MILLISECONDS)\n+                countDownLatch.await(timeout.millis(), TimeUnit.MILLISECONDS)\n             );\n         } catch (InterruptedException e) {\n             Thread.currentThread().interrupt();",
      "parent_sha": "bead24880b9d6e8099c7c9a4043f5cee448ed7db"
    }
  },
  {
    "oid": "2322b00e4f9bb3c9723e5723ca4e957d4338a117",
    "message": "set minimum supported version (#39043)\n\nchange the minimum supported version of data frame transform",
    "date": "2019-02-18T11:54:47Z",
    "url": "https://github.com/elastic/elasticsearch/commit/2322b00e4f9bb3c9723e5723ca4e957d4338a117",
    "details": {
      "sha": "d2a9e324584eb46d6e9f5004dd24c5280d68e8a8",
      "filename": "x-pack/plugin/data-frame/src/main/java/org/elasticsearch/xpack/dataframe/transforms/DataFrameTransform.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/2322b00e4f9bb3c9723e5723ca4e957d4338a117/x-pack%2Fplugin%2Fdata-frame%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fdataframe%2Ftransforms%2FDataFrameTransform.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/2322b00e4f9bb3c9723e5723ca4e957d4338a117/x-pack%2Fplugin%2Fdata-frame%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fdataframe%2Ftransforms%2FDataFrameTransform.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fdata-frame%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fdataframe%2Ftransforms%2FDataFrameTransform.java?ref=2322b00e4f9bb3c9723e5723ca4e957d4338a117",
      "patch": "@@ -49,8 +49,7 @@ public String getWriteableName() {\n \n     @Override\n     public Version getMinimalSupportedVersion() {\n-        // TODO: to be changed once target version has been defined\n-        return Version.CURRENT;\n+        return Version.V_7_1_0;\n     }\n \n     @Override",
      "parent_sha": "c1ab8218f117f18d4484667d98c4ba5b7b81880e"
    }
  },
  {
    "oid": "18079168e4e8838241fa8cc49c751f3b2300d469",
    "message": "Add shadow indicator when using shadow replicas",
    "date": "2015-07-23T15:13:54Z",
    "url": "https://github.com/elastic/elasticsearch/commit/18079168e4e8838241fa8cc49c751f3b2300d469",
    "details": {
      "sha": "c3773cec62c561829ca3318399640bb418333e27",
      "filename": "core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/18079168e4e8838241fa8cc49c751f3b2300d469/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fmetadata%2FMetaDataCreateIndexService.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/18079168e4e8838241fa8cc49c751f3b2300d469/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fmetadata%2FMetaDataCreateIndexService.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fmetadata%2FMetaDataCreateIndexService.java?ref=18079168e4e8838241fa8cc49c751f3b2300d469",
      "patch": "@@ -420,7 +420,10 @@ public ClusterState execute(ClusterState currentState) throws Exception {\n                             .put(indexMetaData, false)\n                             .build();\n \n-                    logger.info(\"[{}] creating index, cause [{}], templates {}, shards [{}]/[{}], mappings {}\", request.index(), request.cause(), templateNames, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), mappings.keySet());\n+                    String maybeShadowIndicator = IndexMetaData.isIndexUsingShadowReplicas(indexMetaData.settings()) ? \"s\" : \"\";\n+                    logger.info(\"[{}] creating index, cause [{}], templates {}, shards [{}]/[{}{}], mappings {}\",\n+                            request.index(), request.cause(), templateNames, indexMetaData.numberOfShards(),\n+                            indexMetaData.numberOfReplicas(), maybeShadowIndicator, mappings.keySet());\n \n                     ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks());\n                     if (!request.blocks().isEmpty()) {",
      "parent_sha": "cafc7078e228ab696d0689ec8b2119cb1626e9cd"
    }
  },
  {
    "oid": "b646ed9cd8ab021e694135963a037c6843c58886",
    "message": "try to work on Windows too",
    "date": "2015-08-28T08:13:21Z",
    "url": "https://github.com/elastic/elasticsearch/commit/b646ed9cd8ab021e694135963a037c6843c58886",
    "details": {
      "sha": "61e4924c32f423f743e10be15b05264dedb074b4",
      "filename": "core/src/test/java/org/elasticsearch/index/shard/NewPathForShardTest.java",
      "status": "modified",
      "additions": 23,
      "deletions": 20,
      "changes": 43,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/b646ed9cd8ab021e694135963a037c6843c58886/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2FNewPathForShardTest.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/b646ed9cd8ab021e694135963a037c6843c58886/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2FNewPathForShardTest.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2FNewPathForShardTest.java?ref=b646ed9cd8ab021e694135963a037c6843c58886",
      "patch": "@@ -18,22 +18,7 @@\n  */\n package org.elasticsearch.index.shard;\n \n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.nio.file.FileStore;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.attribute.FileAttributeView;\n-import java.nio.file.attribute.FileStoreAttributeView;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import com.carrotsearch.randomizedtesting.annotations.Repeat;\n \n import org.apache.lucene.mockfile.FilterFileSystem;\n import org.apache.lucene.mockfile.FilterFileSystemProvider;\n@@ -50,7 +35,23 @@\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-import com.carrotsearch.randomizedtesting.annotations.Repeat;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.file.FileStore;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileAttributeView;\n+import java.nio.file.attribute.FileStoreAttributeView;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n import static org.elasticsearch.common.settings.Settings.settingsBuilder;\n \n@@ -62,6 +63,8 @@ public class NewPathForShardTest extends ESTestCase {\n     private static MockFileStore aFileStore = new MockFileStore(\"mocka\");\n     private static MockFileStore bFileStore = new MockFileStore(\"mockb\");\n     private static FileSystem origFileSystem;\n+    private static String aPathPart = File.separator + 'a' + File.separator;\n+    private static String bPathPart = File.separator + 'b' + File.separator;\n \n     @BeforeClass\n     public static void installMockUsableSpaceFS() throws Exception {\n@@ -104,7 +107,7 @@ public Iterable<FileStore> getFileStores() {\n \n         @Override\n         public FileStore getFileStore(Path path) throws IOException {\n-            if (path.toString().contains(\"/a/\")) {\n+            if (path.toString().contains(aPathPart)) {\n                 return aFileStore;\n             } else {\n                 return bFileStore;\n@@ -203,15 +206,15 @@ public void testSelectNewPathForShard() throws Exception {\n \n         ShardId shardId = new ShardId(\"index\", 0);\n         ShardPath result = ShardPath.selectNewPathForShard(nodeEnv, shardId, Settings.EMPTY, 100, Collections.<Path,Integer>emptyMap());\n-        assertTrue(result.getDataPath().toString().contains(\"/a/\"));\n+        assertTrue(result.getDataPath().toString().contains(aPathPart));\n \n         // Test the reverse: b has lots of free space, but a has little, so new shard should go to b:\n         aFileStore.usableSpace = 1000;\n         bFileStore.usableSpace = 100000;\n \n         shardId = new ShardId(\"index\", 0);\n         result = ShardPath.selectNewPathForShard(nodeEnv, shardId, Settings.EMPTY, 100, Collections.<Path,Integer>emptyMap());\n-        assertTrue(result.getDataPath().toString().contains(\"/b/\"));\n+        assertTrue(result.getDataPath().toString().contains(bPathPart));\n \n         // Now a and be have equal usable space; we allocate two shards to the node, and each should go to different paths:\n         aFileStore.usableSpace = 100000;",
      "parent_sha": "8dbc1fbdbdaf06558d03305595aa1b98ad974b47"
    }
  },
  {
    "oid": "05515b370a4b98244108c0b16ee89406419edf41",
    "message": "[ML][TEST] Increase timeout in MlDailyManagementServiceTests\n\nrelates elastic/x-pack-elasticsearch#2916\n\nOriginal commit: elastic/x-pack-elasticsearch@2925dc45ea483d3a30087ba7d8ee55bc71092154",
    "date": "2018-02-01T14:09:33Z",
    "url": "https://github.com/elastic/elasticsearch/commit/05515b370a4b98244108c0b16ee89406419edf41",
    "details": {
      "sha": "4d2b77561296ecc5d9708645b26fcfc718161638",
      "filename": "plugin/ml/src/test/java/org/elasticsearch/xpack/ml/MlDailyManagementServiceTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/05515b370a4b98244108c0b16ee89406419edf41/plugin%2Fml%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2FMlDailyManagementServiceTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/05515b370a4b98244108c0b16ee89406419edf41/plugin%2Fml%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2FMlDailyManagementServiceTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugin%2Fml%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2FMlDailyManagementServiceTests.java?ref=05515b370a4b98244108c0b16ee89406419edf41",
      "patch": "@@ -46,7 +46,7 @@ public void testScheduledTriggering() throws InterruptedException {\n         CountDownLatch latch = new CountDownLatch(triggerCount);\n         try (MlDailyMaintenanceService service = createService(latch, client)) {\n             service.start();\n-            latch.await(1, TimeUnit.SECONDS);\n+            latch.await(5, TimeUnit.SECONDS);\n         }\n \n         verify(client, Mockito.atLeast(triggerCount - 1)).execute(same(DeleteExpiredDataAction.INSTANCE), any(), any());",
      "parent_sha": "2a7015a12c16f8bb406347ace0d1e6e0960a378c"
    }
  },
  {
    "oid": "f1a8aadb635061d26f687be9fe642166e6cd7647",
    "message": "[TEST] null out static resources in base test classes",
    "date": "2014-04-07T16:17:25Z",
    "url": "https://github.com/elastic/elasticsearch/commit/f1a8aadb635061d26f687be9fe642166e6cd7647",
    "details": {
      "sha": "8d3dee1e4fda0f74f1e753cb5d25db3dc661e493",
      "filename": "src/test/java/org/elasticsearch/test/rest/ElasticsearchRestTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/f1a8aadb635061d26f687be9fe642166e6cd7647/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Frest%2FElasticsearchRestTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/f1a8aadb635061d26f687be9fe642166e6cd7647/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Frest%2FElasticsearchRestTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Frest%2FElasticsearchRestTests.java?ref=f1a8aadb635061d26f687be9fe642166e6cd7647",
      "patch": "@@ -19,14 +19,10 @@\n \n package org.elasticsearch.test.rest;\n \n-import com.carrotsearch.randomizedtesting.SysGlobals;\n import com.carrotsearch.randomizedtesting.annotations.Name;\n import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n-import com.carrotsearch.randomizedtesting.annotations.ReplicateOnEachVm;\n import com.google.common.collect.Lists;\n-import org.elasticsearch.cluster.routing.operation.hash.djb.DjbHashFunction;\n import org.elasticsearch.common.Strings;\n-import org.elasticsearch.common.math.MathUtils;\n import org.elasticsearch.test.ElasticsearchIntegrationTest;\n import org.elasticsearch.test.rest.client.RestException;\n import org.elasticsearch.test.rest.parser.RestTestParseException;\n@@ -135,12 +131,14 @@ public static void initExecutionContext() throws IOException, RestException {\n \n         String[] specPaths = resolvePathsProperty(REST_TESTS_SPEC, DEFAULT_SPEC_PATH);\n         RestSpec restSpec = RestSpec.parseFrom(DEFAULT_SPEC_PATH, specPaths);\n+        assert restTestExecutionContext == null;\n         restTestExecutionContext = new RestTestExecutionContext(restSpec);\n     }\n \n     @AfterClass\n     public static void close() {\n         restTestExecutionContext.close();\n+        restTestExecutionContext = null;\n     }\n \n     @Before",
      "parent_sha": "1ec4f8f04b635fcd022be7f1fc3a0e641662e832"
    }
  },
  {
    "oid": "27a7b0680c4ca074edbf9181ab36821e6d92bccd",
    "message": "fix top_terms_boost parsing for multi term rewrite",
    "date": "2011-11-13T10:51:10Z",
    "url": "https://github.com/elastic/elasticsearch/commit/27a7b0680c4ca074edbf9181ab36821e6d92bccd",
    "details": {
      "sha": "a8751d6a1951b561fe876293c2dd4e176711985c",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/index/query/support/QueryParsers.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/27a7b0680c4ca074edbf9181ab36821e6d92bccd/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fquery%2Fsupport%2FQueryParsers.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/27a7b0680c4ca074edbf9181ab36821e6d92bccd/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fquery%2Fsupport%2FQueryParsers.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fquery%2Fsupport%2FQueryParsers.java?ref=27a7b0680c4ca074edbf9181ab36821e6d92bccd",
      "patch": "@@ -56,14 +56,6 @@ public static MultiTermQuery.RewriteMethod parseRewriteMethod(@Nullable String r\n         if (\"constant_score_filter\".equals(rewriteMethod) || \"constantScoreFilter\".equals(rewriteMethod)) {\n             return MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE;\n         }\n-        if (rewriteMethod.startsWith(\"top_terms_\")) {\n-            int size = Integer.parseInt(rewriteMethod.substring(\"top_terms_\".length()));\n-            return new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(size);\n-        }\n-        if (rewriteMethod.startsWith(\"topTerms\")) {\n-            int size = Integer.parseInt(rewriteMethod.substring(\"topTerms\".length()));\n-            return new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(size);\n-        }\n         if (rewriteMethod.startsWith(\"top_terms_boost_\")) {\n             int size = Integer.parseInt(rewriteMethod.substring(\"top_terms_boost_\".length()));\n             return new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(size);\n@@ -72,6 +64,14 @@ public static MultiTermQuery.RewriteMethod parseRewriteMethod(@Nullable String r\n             int size = Integer.parseInt(rewriteMethod.substring(\"topTermsBoost\".length()));\n             return new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(size);\n         }\n+        if (rewriteMethod.startsWith(\"top_terms_\")) {\n+            int size = Integer.parseInt(rewriteMethod.substring(\"top_terms_\".length()));\n+            return new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(size);\n+        }\n+        if (rewriteMethod.startsWith(\"topTerms\")) {\n+            int size = Integer.parseInt(rewriteMethod.substring(\"topTerms\".length()));\n+            return new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(size);\n+        }\n         throw new ElasticSearchIllegalArgumentException(\"Failed to parse rewrite_method [\" + rewriteMethod + \"]\");\n     }\n ",
      "parent_sha": "9cc0b7a28b5a58531d38a83d7276c3779c4a3354"
    }
  },
  {
    "oid": "862843ec909bbf063a14613a3cd2796e0b5ee541",
    "message": "Suppress failing test\n\nThis test was failing in the presence of transport clients. This turns\noff transport clients while I fix the test so it doesn't fail for\neveryone in the mean time.",
    "date": "2016-08-16T19:12:40Z",
    "url": "https://github.com/elastic/elasticsearch/commit/862843ec909bbf063a14613a3cd2796e0b5ee541",
    "details": {
      "sha": "ed2c1c53f9b83869740de094e4f96d27ca02cf48",
      "filename": "modules/reindex/src/test/java/org/elasticsearch/index/reindex/CancelTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/862843ec909bbf063a14613a3cd2796e0b5ee541/modules%2Freindex%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Freindex%2FCancelTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/862843ec909bbf063a14613a3cd2796e0b5ee541/modules%2Freindex%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Freindex%2FCancelTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Freindex%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Freindex%2FCancelTests.java?ref=862843ec909bbf063a14613a3cd2796e0b5ee541",
      "patch": "@@ -29,9 +29,10 @@\n import org.elasticsearch.index.engine.Engine;\n import org.elasticsearch.index.engine.Engine.Operation.Origin;\n import org.elasticsearch.index.shard.IndexingOperationListener;\n+import org.elasticsearch.ingest.IngestTestPlugin;\n import org.elasticsearch.plugins.Plugin;\n import org.elasticsearch.tasks.TaskInfo;\n-import org.elasticsearch.ingest.IngestTestPlugin;\n+import org.elasticsearch.test.ESIntegTestCase.ClusterScope;\n import org.junit.BeforeClass;\n \n import java.util.ArrayList;\n@@ -43,6 +44,7 @@\n import java.util.stream.IntStream;\n \n import static org.elasticsearch.index.query.QueryBuilders.termQuery;\n+import static org.elasticsearch.test.ESIntegTestCase.Scope.SUITE;\n import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;\n import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;\n import static org.hamcrest.Matchers.empty;\n@@ -55,6 +57,7 @@\n  * different cancellation places - that is the responsibility of {@link AsyncBulkByScrollActionTests} which have more precise control to\n  * simulate failures but do not exercise important portion of the stack like transport and task management.\n  */\n+@ClusterScope(scope = SUITE, transportClientRatio = 0)\n public class CancelTests extends ReindexTestCase {\n \n     protected static final String INDEX = \"reindex-cancel-index\";",
      "parent_sha": "21af485a88bc4f667fc043cabd61dd54a823ae92"
    }
  },
  {
    "oid": "042f6d8214ef4f1da324fae05afa9a01058eee99",
    "message": "Ensure correct no-master block applied on restart (#54800)\n\nThis commit addresses a long-standing `// TODO` in the coordinator tests to\r\nensure that the correct no-master block is applied when a node restarts while\r\ndisconnected from the cluster.\r\n\r\nIt also strengthens this test to check that the no-master block is applied\r\ncorrectly on all nodes, not just the previous master.",
    "date": "2020-04-06T12:25:22Z",
    "url": "https://github.com/elastic/elasticsearch/commit/042f6d8214ef4f1da324fae05afa9a01058eee99",
    "details": {
      "sha": "1a9efe189f4ebf6a2d8d70a6d217164b745da9e2",
      "filename": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/042f6d8214ef4f1da324fae05afa9a01058eee99/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fcoordination%2FCoordinatorTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/042f6d8214ef4f1da324fae05afa9a01058eee99/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fcoordination%2FCoordinatorTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fcoordination%2FCoordinatorTests.java?ref=042f6d8214ef4f1da324fae05afa9a01058eee99",
      "patch": "@@ -920,13 +920,23 @@ private void testAppliesNoMasterBlock(String noMasterBlockSetting, ClusterBlock\n             }, (source, e) -> {});\n             cluster.runFor(DEFAULT_CLUSTER_STATE_UPDATE_DELAY, \"committing setting update\");\n \n-            leader.disconnect();\n-            cluster.runFor(defaultMillis(FOLLOWER_CHECK_TIMEOUT_SETTING) + defaultMillis(FOLLOWER_CHECK_INTERVAL_SETTING)\n+            final ClusterNode removedNode = cluster.getAnyNode();\n+\n+            removedNode.disconnect();\n+            cluster.runFor(\n+                Math.max(defaultMillis(FOLLOWER_CHECK_TIMEOUT_SETTING) + defaultMillis(FOLLOWER_CHECK_INTERVAL_SETTING),\n+                    defaultMillis(LEADER_CHECK_TIMEOUT_SETTING) + defaultMillis(LEADER_CHECK_INTERVAL_SETTING))\n                 + DEFAULT_CLUSTER_STATE_UPDATE_DELAY, \"detecting disconnection\");\n \n-            assertThat(leader.getLastAppliedClusterState().blocks().global(), hasItem(expectedBlock));\n+            assertThat(removedNode.getLastAppliedClusterState().blocks().global(), hasItem(expectedBlock));\n \n-            // TODO reboot the leader and verify that the same block is applied when it restarts\n+            removedNode.close();\n+            final ClusterNode restartedNode = removedNode.restartedNode();\n+            cluster.clusterNodes.replaceAll(cn -> cn == removedNode ? restartedNode : cn);\n+            restartedNode.disconnect();\n+\n+            cluster.stabilise();\n+            assertThat(restartedNode.getLastAppliedClusterState().blocks().global(), hasItem(expectedBlock));\n         }\n     }\n ",
      "parent_sha": "a92c1ddf5ccd47932d02bbc0e981452a29317068"
    }
  },
  {
    "oid": "1e32c09ceff47d07d37bc8115dc1289af5f1fa0c",
    "message": "ESQL: minor heap-attack tests updates (#104521)\n\nThis updates two tests:  * it chunks the bulk loading of \"many longs\",\nwhich can \"choke\" some test environments otherwise. * it increases the\nnumber of the \"too many evals\", which otherwise can be served in some\nenvironments and not trigger a breaker.",
    "date": "2024-01-18T18:58:13Z",
    "url": "https://github.com/elastic/elasticsearch/commit/1e32c09ceff47d07d37bc8115dc1289af5f1fa0c",
    "details": {
      "sha": "bc5b15a4eba52e94d9749250e7745765bc30402e",
      "filename": "test/external-modules/esql-heap-attack/src/javaRestTest/java/org/elasticsearch/xpack/esql/heap_attack/HeapAttackIT.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/1e32c09ceff47d07d37bc8115dc1289af5f1fa0c/test%2Fexternal-modules%2Fesql-heap-attack%2Fsrc%2FjavaRestTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fesql%2Fheap_attack%2FHeapAttackIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/1e32c09ceff47d07d37bc8115dc1289af5f1fa0c/test%2Fexternal-modules%2Fesql-heap-attack%2Fsrc%2FjavaRestTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fesql%2Fheap_attack%2FHeapAttackIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/test%2Fexternal-modules%2Fesql-heap-attack%2Fsrc%2FjavaRestTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fesql%2Fheap_attack%2FHeapAttackIT.java?ref=1e32c09ceff47d07d37bc8115dc1289af5f1fa0c",
      "patch": "@@ -46,6 +46,7 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n+import static org.elasticsearch.common.Strings.hasText;\n import static org.elasticsearch.test.ListMatcher.matchesList;\n import static org.elasticsearch.test.MapMatcher.assertMap;\n import static org.elasticsearch.test.MapMatcher.matchesMap;\n@@ -281,7 +282,7 @@ public void testManyEval() throws IOException {\n \n     public void testTooManyEval() throws IOException {\n         initManyLongs();\n-        assertCircuitBreaks(() -> manyEval(1000));\n+        assertCircuitBreaks(() -> manyEval(1500));\n     }\n \n     private Response manyEval(int evalLines) throws IOException {\n@@ -434,6 +435,8 @@ private void initManyLongs() throws IOException {\n                     }\n                 }\n             }\n+            bulk(\"manylongs\", bulk.toString());\n+            bulk.setLength(0);\n         }\n         initIndex(\"manylongs\", bulk.toString());\n     }\n@@ -531,7 +534,9 @@ private void bulk(String name, String bulk) throws IOException {\n     }\n \n     private void initIndex(String name, String bulk) throws IOException {\n-        bulk(name, bulk);\n+        if (hasText(bulk)) {\n+            bulk(name, bulk);\n+        }\n \n         Request request = new Request(\"POST\", \"/\" + name + \"/_refresh\");\n         Response response = client().performRequest(request);",
      "parent_sha": "a83c0d46117a6b52f2f3c4b9d8e8bee1ce6602ff"
    }
  },
  {
    "oid": "406e295c6c6e1ecf9f3e70330779df085b826431",
    "message": "In test for #38, we should check the real file name as we have it :-).",
    "date": "2013-08-20T10:34:33Z",
    "url": "https://github.com/elastic/elasticsearch/commit/406e295c6c6e1ecf9f3e70330779df085b826431",
    "details": {
      "sha": "2190448e156c4239371a3e368ab4ed9a43709a22",
      "filename": "src/test/java/org/elasticsearch/index/mapper/xcontent/MetadataMapperTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/406e295c6c6e1ecf9f3e70330779df085b826431/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FMetadataMapperTest.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/406e295c6c6e1ecf9f3e70330779df085b826431/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FMetadataMapperTest.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FMetadataMapperTest.java?ref=406e295c6c6e1ecf9f3e70330779df085b826431",
      "patch": "@@ -37,14 +37,14 @@ protected void checkDate(String filename, Settings settings, Long expected) thro\n                 .startObject()\n                     .field(\"_id\", 1)\n                     .startObject(\"file\")\n-                        .field(\"_name\", \"htmlWithoutDateMeta.html\")\n+                        .field(\"_name\", filename)\n                         .field(\"content\", html)\n                     .endObject()\n                 .endObject().bytes();\n \n         Document doc =  docMapper.parse(json).rootDoc();\n         assertThat(doc.get(docMapper.mappers().smartName(\"file\").mapper().names().indexName()), containsString(\"World\"));\n-        assertThat(doc.get(docMapper.mappers().smartName(\"file.name\").mapper().names().indexName()), equalTo(\"htmlWithoutDateMeta.html\"));\n+        assertThat(doc.get(docMapper.mappers().smartName(\"file.name\").mapper().names().indexName()), equalTo(filename));\n         if (expected == null) {\n             assertThat(doc.getField(docMapper.mappers().smartName(\"file.date\").mapper().names().indexName()), nullValue());\n         } else {",
      "parent_sha": "019d0f9a2610f6d1b2eace9cc47d38ca9d8a0bbe"
    }
  },
  {
    "oid": "f6db00fd33f4ba6880e8858804fbcacdd909614f",
    "message": "push feedback from mr. regex optimizer",
    "date": "2016-01-20T13:19:29Z",
    "url": "https://github.com/elastic/elasticsearch/commit/f6db00fd33f4ba6880e8858804fbcacdd909614f",
    "details": {
      "sha": "9bddd73d632122a5535b33f3eb1fb049c1420bae",
      "filename": "core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/f6db00fd33f4ba6880e8858804fbcacdd909614f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fsettings%2FAbstractScopedSettings.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/f6db00fd33f4ba6880e8858804fbcacdd909614f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fsettings%2FAbstractScopedSettings.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fsettings%2FAbstractScopedSettings.java?ref=f6db00fd33f4ba6880e8858804fbcacdd909614f",
      "patch": "@@ -45,8 +45,8 @@ public abstract class AbstractScopedSettings extends AbstractComponent {\n     private final Map<String, Setting<?>> complexMatchers = new HashMap<>();\n     private final Map<String, Setting<?>> keySettings = new HashMap<>();\n     private final Setting.Scope scope;\n-    private static final Pattern KEY_PATTERN = Pattern.compile(\"^([\\\\w\\\\d_-]+[.])*[\\\\w\\\\d_-]+$\");\n-    private static final Pattern GROUP_KEY_PATTERN = Pattern.compile(\"^([\\\\w\\\\d_-]+[.])+\");\n+    private static final Pattern KEY_PATTERN = Pattern.compile(\"^(?:[-\\\\w]+[.])*[-\\\\w]+$\");\n+    private static final Pattern GROUP_KEY_PATTERN = Pattern.compile(\"^(?:[-\\\\w]+[.])+$\");\n \n \n     protected AbstractScopedSettings(Settings settings, Set<Setting<?>> settingsSet, Setting.Scope scope) {",
      "parent_sha": "09416049191ed1cd8e118caf00f9f0237f05b118"
    }
  },
  {
    "oid": "bc840f95bc66cc56f917c54e7c53341d1c524393",
    "message": "Wrap enrich execute action in new tracing context (#89021)\n\nPart of #84369. Split out from #88443. This PR wraps parts logic in\r\n`InternalExecutePolicyAction` in a new tracing context. This is\r\nnecessary so that a tracing implementation can use the thread context\r\nto propagate tracing headers, but without the code attempting to set the\r\nsame key twice in the thread context, which is illegal.",
    "date": "2022-08-02T09:00:35Z",
    "url": "https://github.com/elastic/elasticsearch/commit/bc840f95bc66cc56f917c54e7c53341d1c524393",
    "details": {
      "sha": "5eee0cc296573b2ff7c98ad73d42a24feddcfe6a",
      "filename": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/InternalExecutePolicyAction.java",
      "status": "modified",
      "additions": 56,
      "deletions": 48,
      "changes": 104,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/bc840f95bc66cc56f917c54e7c53341d1c524393/x-pack%2Fplugin%2Fenrich%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fenrich%2Faction%2FInternalExecutePolicyAction.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/bc840f95bc66cc56f917c54e7c53341d1c524393/x-pack%2Fplugin%2Fenrich%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fenrich%2Faction%2FInternalExecutePolicyAction.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fenrich%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fenrich%2Faction%2FInternalExecutePolicyAction.java?ref=bc840f95bc66cc56f917c54e7c53341d1c524393",
      "patch": "@@ -88,56 +88,64 @@ protected void doExecute(Task transportTask, Request request, ActionListener<Res\n                 return;\n             }\n \n-            // Can't use provided task, because in the case wait_for_completion=false then\n-            // as soon as actionListener#onResponse is invoked then the provided task get unregistered and\n-            // then there no way to see the policy execution in the list tasks or get task APIs.\n-            var task = (ExecuteEnrichPolicyTask) taskManager.register(\"enrich\", TASK_ACTION, new TaskAwareRequest() {\n-\n-                @Override\n-                public void setParentTask(TaskId taskId) {\n-                    request.setParentTask(taskId);\n-                }\n-\n-                @Override\n-                public TaskId getParentTask() {\n-                    return request.getParentTask();\n-                }\n-\n-                @Override\n-                public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {\n-                    String description = \"executing enrich policy [\" + request.getName() + \"]\";\n-                    return new ExecuteEnrichPolicyTask(id, type, action, description, parentTaskId, headers);\n-                }\n-            });\n-\n-            try {\n-                ActionListener<ExecuteEnrichPolicyStatus> listener;\n-                if (request.isWaitForCompletion()) {\n-                    listener = ActionListener.wrap(result -> actionListener.onResponse(new Response(result)), actionListener::onFailure);\n-                } else {\n-                    listener = ActionListener.wrap(result -> LOGGER.debug(\"successfully executed policy [{}]\", request.getName()), e -> {\n-                        if (e instanceof TaskCancelledException) {\n-                            LOGGER.info(e.getMessage());\n-                        } else {\n-                            LOGGER.error(\"failed to execute policy [\" + request.getName() + \"]\", e);\n-                        }\n-                    });\n-                }\n-                policyExecutor.runPolicyLocally(task, request.getName(), ActionListener.wrap(result -> {\n+            try (var ignored = transportService.getThreadPool().getThreadContext().newTraceContext()) {\n+                // Can't use provided task, because in the case wait_for_completion=false then\n+                // as soon as actionListener#onResponse is invoked then the provided task get unregistered and\n+                // then there no way to see the policy execution in the list tasks or get task APIs.\n+                var task = (ExecuteEnrichPolicyTask) taskManager.register(\"enrich\", TASK_ACTION, new TaskAwareRequest() {\n+\n+                    @Override\n+                    public void setParentTask(TaskId taskId) {\n+                        request.setParentTask(taskId);\n+                    }\n+\n+                    @Override\n+                    public TaskId getParentTask() {\n+                        return request.getParentTask();\n+                    }\n+\n+                    @Override\n+                    public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {\n+                        String description = \"executing enrich policy [\" + request.getName() + \"]\";\n+                        return new ExecuteEnrichPolicyTask(id, type, action, description, parentTaskId, headers);\n+                    }\n+                });\n+\n+                try {\n+                    ActionListener<ExecuteEnrichPolicyStatus> listener;\n+                    if (request.isWaitForCompletion()) {\n+                        listener = ActionListener.wrap(\n+                            result -> actionListener.onResponse(new Response(result)),\n+                            actionListener::onFailure\n+                        );\n+                    } else {\n+                        listener = ActionListener.wrap(\n+                            result -> LOGGER.debug(\"successfully executed policy [{}]\", request.getName()),\n+                            e -> {\n+                                if (e instanceof TaskCancelledException) {\n+                                    LOGGER.info(e.getMessage());\n+                                } else {\n+                                    LOGGER.error(\"failed to execute policy [\" + request.getName() + \"]\", e);\n+                                }\n+                            }\n+                        );\n+                    }\n+                    policyExecutor.runPolicyLocally(task, request.getName(), ActionListener.wrap(result -> {\n+                        taskManager.unregister(task);\n+                        listener.onResponse(result);\n+                    }, e -> {\n+                        taskManager.unregister(task);\n+                        listener.onFailure(e);\n+                    }));\n+\n+                    if (request.isWaitForCompletion() == false) {\n+                        TaskId taskId = new TaskId(clusterState.nodes().getLocalNodeId(), task.getId());\n+                        actionListener.onResponse(new Response(taskId));\n+                    }\n+                } catch (Exception e) {\n                     taskManager.unregister(task);\n-                    listener.onResponse(result);\n-                }, e -> {\n-                    taskManager.unregister(task);\n-                    listener.onFailure(e);\n-                }));\n-\n-                if (request.isWaitForCompletion() == false) {\n-                    TaskId taskId = new TaskId(clusterState.nodes().getLocalNodeId(), task.getId());\n-                    actionListener.onResponse(new Response(taskId));\n+                    throw e;\n                 }\n-            } catch (Exception e) {\n-                taskManager.unregister(task);\n-                throw e;\n             }\n         }\n ",
      "parent_sha": "e4214efe6df897ae649c88ed1dfab417d57cf045"
    }
  },
  {
    "oid": "d33f0e2527f018ca5de14db4290dd3d362faa3d1",
    "message": "Add basic javadocs to TransportNodesListGatewayStartedShards",
    "date": "2015-05-22T19:14:45Z",
    "url": "https://github.com/elastic/elasticsearch/commit/d33f0e2527f018ca5de14db4290dd3d362faa3d1",
    "details": {
      "sha": "649e0a1c31ab162b36806a2eb588bf5265e90530",
      "filename": "src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/d33f0e2527f018ca5de14db4290dd3d362faa3d1/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FTransportNodesListGatewayStartedShards.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/d33f0e2527f018ca5de14db4290dd3d362faa3d1/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FTransportNodesListGatewayStartedShards.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FTransportNodesListGatewayStartedShards.java?ref=d33f0e2527f018ca5de14db4290dd3d362faa3d1",
      "patch": "@@ -46,7 +46,9 @@\n import java.util.concurrent.atomic.AtomicReferenceArray;\n \n /**\n- *\n+ * This transport action is used to fetch the shard version from each node during primary allocation in {@link GatewayAllocator}.\n+ * We use this to find out which node holds the latest shard version and which of them used to be a primary in order to allocate\n+ * shards after node or cluster restarts.\n  */\n public class TransportNodesListGatewayStartedShards extends TransportNodesOperationAction<TransportNodesListGatewayStartedShards.Request, TransportNodesListGatewayStartedShards.NodesGatewayStartedShards, TransportNodesListGatewayStartedShards.NodeRequest, TransportNodesListGatewayStartedShards.NodeGatewayStartedShards>\n         implements AsyncShardFetch.List<TransportNodesListGatewayStartedShards.NodesGatewayStartedShards, TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> {",
      "parent_sha": "f47d9937155c514cbb236ca091b17400d2dd3c52"
    }
  },
  {
    "oid": "68b5bc9786b9858ea0ce74f0a1a75e3838771a91",
    "message": "[Test] Skip assertions of unsupported keepAlive options (#94800)\n\nJDK does not support configuring certain keepAlive options on Windows.\r\nThis PR updates the assertions so that they do not run on Windows.\r\n\r\nResolves: #94653",
    "date": "2023-03-28T07:31:56Z",
    "url": "https://github.com/elastic/elasticsearch/commit/68b5bc9786b9858ea0ce74f0a1a75e3838771a91",
    "details": {
      "sha": "09e9dc23b5eeb82e5e2767541a7105e082e2698c",
      "filename": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/transport/netty4/SimpleSecurityNetty4ServerTransportTests.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/68b5bc9786b9858ea0ce74f0a1a75e3838771a91/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Ftransport%2Fnetty4%2FSimpleSecurityNetty4ServerTransportTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/68b5bc9786b9858ea0ce74f0a1a75e3838771a91/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Ftransport%2Fnetty4%2FSimpleSecurityNetty4ServerTransportTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Ftransport%2Fnetty4%2FSimpleSecurityNetty4ServerTransportTests.java?ref=68b5bc9786b9858ea0ce74f0a1a75e3838771a91",
      "patch": "@@ -11,6 +11,7 @@\n import io.netty.channel.socket.nio.NioChannelOption;\n import io.netty.handler.ssl.SslHandshakeTimeoutException;\n \n+import org.apache.lucene.util.Constants;\n import org.elasticsearch.ExceptionsHelper;\n import org.elasticsearch.TransportVersion;\n import org.elasticsearch.Version;\n@@ -616,9 +617,11 @@ public void testClientChannelUsesSeparateSslConfigurationForRemoteCluster() thro\n                         .filter(entry -> entry.getKey() instanceof NioChannelOption<?>)\n                         .collect(Collectors.toUnmodifiableMap(entry -> entry.getKey().name(), Map.Entry::getValue));\n                     assertThat(options.get(ChannelOption.SO_KEEPALIVE.name()), is(true));\n-                    assertThat(options.get(OPTION_TCP_KEEP_IDLE.name()), equalTo(100));\n-                    assertThat(options.get(OPTION_TCP_KEEP_INTERVAL.name()), equalTo(101));\n-                    assertThat(options.get(OPTION_TCP_KEEP_COUNT.name()), equalTo(102));\n+                    if (false == Constants.WINDOWS) {\n+                        assertThat(options.get(OPTION_TCP_KEEP_IDLE.name()), equalTo(100));\n+                        assertThat(options.get(OPTION_TCP_KEEP_INTERVAL.name()), equalTo(101));\n+                        assertThat(options.get(OPTION_TCP_KEEP_COUNT.name()), equalTo(102));\n+                    }\n                 }\n \n                 final TcpChannel acceptedChannel = getAcceptedChannel(originalTransport, connection);",
      "parent_sha": "902649be317df822a2c8228113bc905f6bbdd227"
    }
  },
  {
    "oid": "4293030fd9d5be09712ce03e50b39e81fa15419e",
    "message": "painless: Remove stale comment and remove declared exception",
    "date": "2016-06-16T09:46:11Z",
    "url": "https://github.com/elastic/elasticsearch/commit/4293030fd9d5be09712ce03e50b39e81fa15419e",
    "details": {
      "sha": "a60985eec67eb5898ae2d11be8391569e6c01fb9",
      "filename": "modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/4293030fd9d5be09712ce03e50b39e81fa15419e/modules%2Flang-painless%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fpainless%2FDefBootstrap.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/4293030fd9d5be09712ce03e50b39e81fa15419e/modules%2Flang-painless%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fpainless%2FDefBootstrap.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Flang-painless%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fpainless%2FDefBootstrap.java?ref=4293030fd9d5be09712ce03e50b39e81fa15419e",
      "patch": "@@ -266,7 +266,7 @@ private MethodHandle lookup(Object[] args) throws Throwable {\n             }\n         }\n         \n-        private MethodHandle lookupGeneric() throws Throwable {\n+        private MethodHandle lookupGeneric() {\n             if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {\n                 return DefMath.lookupGenericWithCast(name);\n             } else {\n@@ -275,8 +275,8 @@ private MethodHandle lookupGeneric() throws Throwable {\n         }\n         \n         /**\n-         * Called when a new type is encountered (or, when we have encountered more than {@code MAX_DEPTH}\n-         * types at this call site and given up on caching).\n+         * Called when a new type is encountered or if cached type does not match.\n+         * In that case we revert to a generic, but slower operator handling.\n          */\n         @SuppressForbidden(reason = \"slow path\")\n         Object fallback(Object[] args) throws Throwable {",
      "parent_sha": "f2d62194262a9b1e12f3af53f17a015aeca06e62"
    }
  },
  {
    "oid": "bd03912699b9b010409431a315f41af3ef42f202",
    "message": "Add detailed error messages for searchable snapshot shared folder assertions (#87497)",
    "date": "2022-06-27T14:12:37Z",
    "url": "https://github.com/elastic/elasticsearch/commit/bd03912699b9b010409431a315f41af3ef42f202",
    "details": {
      "sha": "50e91bec66942fea00e1fc552fb15f6e4a5121bc",
      "filename": "x-pack/plugin/searchable-snapshots/src/internalClusterTest/java/org/elasticsearch/xpack/searchablesnapshots/BaseSearchableSnapshotsIntegTestCase.java",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/bd03912699b9b010409431a315f41af3ef42f202/x-pack%2Fplugin%2Fsearchable-snapshots%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsearchablesnapshots%2FBaseSearchableSnapshotsIntegTestCase.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/bd03912699b9b010409431a315f41af3ef42f202/x-pack%2Fplugin%2Fsearchable-snapshots%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsearchablesnapshots%2FBaseSearchableSnapshotsIntegTestCase.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsearchable-snapshots%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsearchablesnapshots%2FBaseSearchableSnapshotsIntegTestCase.java?ref=bd03912699b9b010409431a315f41af3ef42f202",
      "patch": "@@ -245,14 +245,22 @@ protected void assertShardFolders(String indexName, boolean snapshotDirectory) t\n                     indexExists,\n                     translogExists\n                 );\n-                assertThat(snapshotDirectory, not(indexExists));\n-                assertTrue(translogExists);\n+                assertThat(\n+                    snapshotDirectory ? \"Snapshot directory doesn't exist\" : \"Snapshot directory shouldn't exist\",\n+                    snapshotDirectory,\n+                    not(indexExists)\n+                );\n+                assertTrue(\"Translog doesn't exist\", translogExists);\n                 try (Stream<Path> dir = Files.list(shardPath.resolveTranslog())) {\n                     final long translogFiles = dir.filter(path -> path.getFileName().toString().contains(\"translog\")).count();\n                     if (snapshotDirectory) {\n-                        assertEquals(2L, translogFiles);\n+                        assertEquals(\"There should be 2 translog files for a snapshot directory\", 2L, translogFiles);\n                     } else {\n-                        assertThat(translogFiles, greaterThanOrEqualTo(2L));\n+                        assertThat(\n+                            \"There should be 2+ translog files non a non-snapshot directory\",\n+                            translogFiles,\n+                            greaterThanOrEqualTo(2L)\n+                        );\n                     }\n                 }\n             }",
      "parent_sha": "c2d1b2262670594ea516f87495bc891290bdce04"
    }
  },
  {
    "oid": "9d0ce1b1d38156a08cb7ab5e76af015d05c2fab2",
    "message": "when thread pool queue size is negative use unbounded queue",
    "date": "2013-07-04T20:59:36Z",
    "url": "https://github.com/elastic/elasticsearch/commit/9d0ce1b1d38156a08cb7ab5e76af015d05c2fab2",
    "details": {
      "sha": "10bed455029f34a141d6a143a0ab666493971101",
      "filename": "src/main/java/org/elasticsearch/threadpool/ThreadPool.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/9d0ce1b1d38156a08cb7ab5e76af015d05c2fab2/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FThreadPool.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/9d0ce1b1d38156a08cb7ab5e76af015d05c2fab2/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FThreadPool.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FThreadPool.java?ref=9d0ce1b1d38156a08cb7ab5e76af015d05c2fab2",
      "patch": "@@ -479,16 +479,18 @@ public void updateSettings(Settings settings) {\n     private BlockingQueue<Runnable> newQueue(SizeValue queueSize, String queueType) {\n         if (queueSize == null) {\n             return ConcurrentCollections.newBlockingQueue();\n-        } else if ((int) queueSize.singles() > 0) {\n+        } else if (queueSize.singles() == 0) {\n+            return new SynchronousQueue<Runnable>();\n+        } else if (queueSize.singles() > 0) {\n             if (\"linked\".equals(queueType)) {\n                 return new LinkedBlockingQueue<Runnable>((int) queueSize.singles());\n             } else if (\"array\".equals(queueType)) {\n                 return new ArrayBlockingQueue<Runnable>((int) queueSize.singles());\n             } else {\n                 throw new ElasticSearchIllegalArgumentException(\"illegal queue_type set to [\" + queueType + \"], should be either linked or array\");\n             }\n-        } else {\n-            return new SynchronousQueue<Runnable>();\n+        } else { // queueSize.singles() < 0, just treat it as unbounded queue\n+            return ConcurrentCollections.newBlockingQueue();\n         }\n     }\n ",
      "parent_sha": "5f9581d4f02b2deda4161376f4aa4f77c71b906a"
    }
  },
  {
    "oid": "d73a459f1e87ee67d1e513812cbe607c40ae1661",
    "message": "when parent mapping is set, fix setting routing to required",
    "date": "2010-12-27T16:41:28Z",
    "url": "https://github.com/elastic/elasticsearch/commit/d73a459f1e87ee67d1e513812cbe607c40ae1661",
    "details": {
      "sha": "29285df322ae2d14b84b4dc17fffdeec38d51da4",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/RoutingFieldMapper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/d73a459f1e87ee67d1e513812cbe607c40ae1661/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FRoutingFieldMapper.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/d73a459f1e87ee67d1e513812cbe607c40ae1661/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FRoutingFieldMapper.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FRoutingFieldMapper.java?ref=d73a459f1e87ee67d1e513812cbe607c40ae1661",
      "patch": "@@ -89,7 +89,7 @@ protected RoutingFieldMapper(Field.Store store, Field.Index index, boolean requi\n     }\n \n     public void markAsRequired() {\n-        this.required = required;\n+        this.required = true;\n     }\n \n     @Override public boolean required() {",
      "parent_sha": "d560ceabe42939bcaec5a5d229f09df74d1f7b9c"
    }
  },
  {
    "oid": "f687f3ea6e2fa5ddfaf2965abe3e42e9e477e0f7",
    "message": "[ML] fix test mix up of millisecond with second (elastic/x-pack-elasticsearch#816)\n\nFix spurious Test failure\r\n\r\nfix test resolution bug: mix up of millisecond with second\n\nOriginal commit: elastic/x-pack-elasticsearch@37b8fed559fbd056a1e270217951dfd39c7ed25c",
    "date": "2017-03-24T07:11:38Z",
    "url": "https://github.com/elastic/elasticsearch/commit/f687f3ea6e2fa5ddfaf2965abe3e42e9e477e0f7",
    "details": {
      "sha": "847fd54f0f2bd49b42efff0b935db363df3ebd8c",
      "filename": "plugin/src/test/java/org/elasticsearch/xpack/ml/job/process/DataCountsReporterTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/f687f3ea6e2fa5ddfaf2965abe3e42e9e477e0f7/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fjob%2Fprocess%2FDataCountsReporterTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/f687f3ea6e2fa5ddfaf2965abe3e42e9e477e0f7/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fjob%2Fprocess%2FDataCountsReporterTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fjob%2Fprocess%2FDataCountsReporterTests.java?ref=f687f3ea6e2fa5ddfaf2965abe3e42e9e477e0f7",
      "patch": "@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Date;\n+import java.util.concurrent.TimeUnit;\n \n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyString;\n@@ -300,7 +301,8 @@ public void testFinishReporting() {\n \n             long lastReportedTimeMs = dataCountsReporter.incrementalStats().getLastDataTimeStamp().getTime();\n             // check last data time is equal to now give or take a second\n-            assertTrue(lastReportedTimeMs >= now.getTime() && lastReportedTimeMs <= now.getTime() +1);\n+            assertTrue(lastReportedTimeMs >= now.getTime()\n+                    && lastReportedTimeMs <= now.getTime() + TimeUnit.SECONDS.toMillis(1));\n             assertEquals(dataCountsReporter.incrementalStats().getLastDataTimeStamp(),\n                     dataCountsReporter.runningTotalStats().getLastDataTimeStamp());\n ",
      "parent_sha": "061e3fc1fe255058d64b0e951ffc003f0e1e11e9"
    }
  },
  {
    "oid": "49f79f54d2d99e12107ad1da77d74dc9b380b0a1",
    "message": "log when search failure happen when scanning",
    "date": "2011-03-28T16:17:36Z",
    "url": "https://github.com/elastic/elasticsearch/commit/49f79f54d2d99e12107ad1da77d74dc9b380b0a1",
    "details": {
      "sha": "aa456a50c4480557a9f5b262f7b8f7ba2a866060",
      "filename": "modules/test/integration/src/test/java/org/elasticsearch/test/stress/rollingrestart/RollingRestartStressTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/49f79f54d2d99e12107ad1da77d74dc9b380b0a1/modules%2Ftest%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fstress%2Frollingrestart%2FRollingRestartStressTest.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/49f79f54d2d99e12107ad1da77d74dc9b380b0a1/modules%2Ftest%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fstress%2Frollingrestart%2FRollingRestartStressTest.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Ftest%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fstress%2Frollingrestart%2FRollingRestartStressTest.java?ref=49f79f54d2d99e12107ad1da77d74dc9b380b0a1",
      "patch": "@@ -44,12 +44,11 @@\n import org.elasticsearch.search.SearchHit;\n \n import java.io.File;\n+import java.util.Arrays;\n import java.util.concurrent.atomic.AtomicLong;\n \n import static org.elasticsearch.common.settings.ImmutableSettings.*;\n import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;\n-import static org.hamcrest.MatcherAssert.*;\n-import static org.hamcrest.Matchers.*;\n \n /**\n  * @author kimchy (shay.banon)\n@@ -189,6 +188,8 @@ public void run() throws Exception {\n \n             nodes[nodeIndex] = NodeBuilder.nodeBuilder().settings(settings).node();\n \n+            Thread.sleep(1000);\n+\n             try {\n                 ClusterHealthResponse clusterHealth = client.client().admin().cluster().prepareHealth()\n                         .setWaitForGreenStatus()\n@@ -258,7 +259,9 @@ public void run() throws Exception {\n \n         while (true) {\n             searchResponse = client.client().prepareSearchScroll(searchResponse.scrollId()).setScroll(TimeValue.timeValueMinutes(2)).execute().actionGet();\n-            assertThat(searchResponse.failedShards(), equalTo(0));\n+            if (searchResponse.failedShards() > 0) {\n+                logger.warn(\"Search Failures \" + Arrays.toString(searchResponse.shardFailures()));\n+            }\n             for (SearchHit hit : searchResponse.hits()) {\n                 long version = -1;\n                 for (int i = 0; i < (numberOfReplicas + 1); i++) {\n@@ -351,7 +354,7 @@ public static void main(String[] args) throws Exception {\n                 .cleanNodeData(false)\n                 .indexers(5)\n                 .indexerThrottle(TimeValue.timeValueMillis(50))\n-                .period(TimeValue.timeValueMinutes(1));\n+                .period(TimeValue.timeValueMinutes(3));\n \n         test.run();\n     }",
      "parent_sha": "f00664621f2b88617148afa507e328b07413cbca"
    }
  },
  {
    "oid": "610694446a2eff51b0550689d7da5988bb6e2f2a",
    "message": "Fix NPE/AIOOBE when building a bucket which has not been collected.\n\nClose #5048",
    "date": "2014-03-04T08:55:21Z",
    "url": "https://github.com/elastic/elasticsearch/commit/610694446a2eff51b0550689d7da5988bb6e2f2a",
    "details": {
      "sha": "58b0d05622362bb7a0ad3b80e0b6c458c2ffcb55",
      "filename": "src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/610694446a2eff51b0550689d7da5988bb6e2f2a/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Faggregations%2FAggregatorFactories.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/610694446a2eff51b0550689d7da5988bb6e2f2a/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Faggregations%2FAggregatorFactories.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Faggregations%2FAggregatorFactories.java?ref=610694446a2eff51b0550689d7da5988bb6e2f2a",
      "patch": "@@ -119,7 +119,13 @@ public void setNextReader(AtomicReaderContext reader) {\n \n                 @Override\n                 public InternalAggregation buildAggregation(long owningBucketOrdinal) {\n-                    return aggregators.get(owningBucketOrdinal).buildAggregation(0);\n+                    // The bucket ordinal may be out of range in case of eg. a terms/filter/terms where\n+                    // the filter matches no document in the highest buckets of the first terms agg\n+                    if (owningBucketOrdinal >= aggregators.size() || aggregators.get(owningBucketOrdinal) == null) {\n+                        return first.buildEmptyAggregation();\n+                    } else {\n+                        return aggregators.get(owningBucketOrdinal).buildAggregation(0);\n+                    }\n                 }\n \n                 @Override",
      "parent_sha": "66b589d58e8da7936c34644abfe4320abe1b8f8b"
    }
  },
  {
    "oid": "af119dfdd95667ea9d92de8e644448fbdc285b4f",
    "message": "[Engine] checkVersionMapRefresh shouldn't use indexWriter.getConfig(). We run it out of lock, the indexWriter may be closed..\n\nRelates to #6443, #6786\n\nCloses #6794",
    "date": "2014-07-09T08:43:28Z",
    "url": "https://github.com/elastic/elasticsearch/commit/af119dfdd95667ea9d92de8e644448fbdc285b4f",
    "details": {
      "sha": "da938b6fa84c3bfa21aed8b84a71ae3f44a92ca7",
      "filename": "src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java",
      "status": "modified",
      "additions": 27,
      "deletions": 32,
      "changes": 59,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/af119dfdd95667ea9d92de8e644448fbdc285b4f/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fengine%2Finternal%2FInternalEngine.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/af119dfdd95667ea9d92de8e644448fbdc285b4f/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fengine%2Finternal%2FInternalEngine.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fengine%2Finternal%2FInternalEngine.java?ref=af119dfdd95667ea9d92de8e644448fbdc285b4f",
      "patch": "@@ -20,7 +20,6 @@\n package org.elasticsearch.index.engine.internal;\n \n import com.google.common.collect.Lists;\n-\n import org.apache.lucene.index.*;\n import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;\n import org.apache.lucene.search.IndexSearcher;\n@@ -80,7 +79,6 @@\n import java.io.IOException;\n import java.util.*;\n import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -389,10 +387,7 @@ public GetResult get(Get get) throws EngineException {\n     public void create(Create create) throws EngineException {\n         final IndexWriter writer;\n         try (InternalLock _ = readLock.acquire()) {\n-            writer = this.indexWriter;\n-            if (writer == null) {\n-                throw new EngineClosedException(shardId, failedEngine);\n-            }\n+            writer = currentIndexWriter();\n             try (Releasable r = throttle.acquireThrottle()) {\n                 innerCreate(create, writer);\n             }\n@@ -403,7 +398,7 @@ public void create(Create create) throws EngineException {\n             maybeFailEngine(t);\n             throw new CreateFailedEngineException(shardId, create, t);\n         }\n-        checkVersionMapRefresh(writer);\n+        checkVersionMapRefresh();\n     }\n \n     private void maybeFailEngine(Throwable t) {\n@@ -485,10 +480,7 @@ private void innerCreateNoLock(Create create, IndexWriter writer, long currentVe\n     public void index(Index index) throws EngineException {\n         final IndexWriter writer;\n         try (InternalLock _ = readLock.acquire()) {\n-            writer = this.indexWriter;\n-            if (writer == null) {\n-                throw new EngineClosedException(shardId, failedEngine);\n-            }\n+            writer = currentIndexWriter();\n             try (Releasable r = throttle.acquireThrottle()) {\n                 innerIndex(index, writer);\n             }\n@@ -499,29 +491,32 @@ public void index(Index index) throws EngineException {\n             maybeFailEngine(t);\n             throw new IndexFailedEngineException(shardId, index, t);\n         }\n-        checkVersionMapRefresh(writer);\n+        checkVersionMapRefresh();\n     }\n \n-    /** Forces a refresh if the versionMap is using too much RAM (currently > 25% of IndexWriter's RAM buffer).\n-     * */\n-    private void checkVersionMapRefresh(final IndexWriter indexWriter) {\n+    /**\n+     * Forces a refresh if the versionMap is using too much RAM (currently > 25% of IndexWriter's RAM buffer).\n+     */\n+    private void checkVersionMapRefresh() {\n         // TODO: we force refresh when versionMap is using > 25% of IW's RAM buffer; should we make this separately configurable?\n-        if (versionMap.ramBytesUsedForRefresh()/1024/1024. > 0.25 * indexWriter.getConfig().getRAMBufferSizeMB() && versionMapRefreshPending.getAndSet(true) == false) {\n-            if (!closed) {\n-                try {\n-                    // Now refresh to clear versionMap:\n-                    threadPool.executor(ThreadPool.Names.REFRESH).execute(new Runnable() {\n-                            public void run() {\n-                                try {\n-                                    refresh(new Refresh(\"version_table_full\"));\n-                                } catch (EngineClosedException ex) {\n-                                    // ignore\n-                                }\n-                            }\n-                        });\n-                } catch (EsRejectedExecutionException ex) {\n-                    // that is fine too.. we might be shutting down\n+        if (versionMap.ramBytesUsedForRefresh() > 0.25 * indexingBufferSize.bytes() && versionMapRefreshPending.getAndSet(true) == false) {\n+            try {\n+                if (closed) {\n+                    // no point...\n+                    return;\n                 }\n+                // Now refresh to clear versionMap:\n+                threadPool.executor(ThreadPool.Names.REFRESH).execute(new Runnable() {\n+                    public void run() {\n+                        try {\n+                            refresh(new Refresh(\"version_table_full\"));\n+                        } catch (EngineClosedException ex) {\n+                            // ignore\n+                        }\n+                    }\n+                });\n+            } catch (EsRejectedExecutionException ex) {\n+                // that is fine too.. we might be shutting down\n             }\n         }\n     }\n@@ -596,11 +591,11 @@ public void delete(Delete delete) throws EngineException {\n \n         maybePruneDeletedTombstones();\n     }\n-    \n+\n     private void maybePruneDeletedTombstones() {\n         // It's expensive to prune because we walk the deletes map acquiring dirtyLock for each uid so we only do it\n         // every 1/4 of gcDeletesInMillis:\n-        if (enableGcDeletes && threadPool.estimatedTimeInMillis() - lastDeleteVersionPruneTimeMSec > gcDeletesInMillis*0.25) {\n+        if (enableGcDeletes && threadPool.estimatedTimeInMillis() - lastDeleteVersionPruneTimeMSec > gcDeletesInMillis * 0.25) {\n             pruneDeletedTombstones();\n         }\n     }",
      "parent_sha": "57cd8f765ff74cc6a620f23f8c658bba6a3e1eee"
    }
  },
  {
    "oid": "822eb9d20bb20e2778452cc0da06a68924e827b7",
    "message": "[Monitoring] Add ability for monitoring_user role to read from metricbeat-* (#71233)\n\n* Add ability for monitoring_user role to read from metricbeat-*\r\n\r\n* Fix style",
    "date": "2021-05-25T14:35:10Z",
    "url": "https://github.com/elastic/elasticsearch/commit/822eb9d20bb20e2778452cc0da06a68924e827b7",
    "details": {
      "sha": "485ba6ee80a57bc3756f208903e514d96cc050da",
      "filename": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/store/ReservedRolesStore.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/822eb9d20bb20e2778452cc0da06a68924e827b7/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2Fstore%2FReservedRolesStore.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/822eb9d20bb20e2778452cc0da06a68924e827b7/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2Fstore%2FReservedRolesStore.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Fsecurity%2Fauthz%2Fstore%2FReservedRolesStore.java?ref=822eb9d20bb20e2778452cc0da06a68924e827b7",
      "patch": "@@ -63,9 +63,10 @@ private static Map<String, RoleDescriptor> initializeReservedRoles() {\n                 .put(\"monitoring_user\", new RoleDescriptor(\"monitoring_user\",\n                         new String[] { \"cluster:monitor/main\", \"cluster:monitor/xpack/info\", RemoteInfoAction.NAME },\n                         new RoleDescriptor.IndicesPrivileges[] {\n-                            RoleDescriptor.IndicesPrivileges.builder()\n-                                .indices(\".monitoring-*\").privileges(\"read\", \"read_cross_cluster\").build()\n-                        },\n+                                RoleDescriptor.IndicesPrivileges.builder()\n+                                    .indices(\".monitoring-*\").privileges(\"read\", \"read_cross_cluster\").build(),\n+                                RoleDescriptor.IndicesPrivileges.builder()\n+                                    .indices(\"metricbeat-*\").privileges(\"read\", \"read_cross_cluster\").build() },\n                         new RoleDescriptor.ApplicationResourcePrivileges[] {\n                             RoleDescriptor.ApplicationResourcePrivileges.builder()\n                                 .application(\"kibana-*\").resources(\"*\").privileges(\"reserved_monitoring\").build()",
      "parent_sha": "4b4f5f8ac517917b1d1b60231b9197705b47bcde"
    }
  },
  {
    "oid": "1b660c51275972e01520becafafc82110c8e50a0",
    "message": "Fix incorrect logger invocation\n\nIt looks like auto-complete gave us a nasty surprise here with\nLogger#equals being invoked instead of Logger#error swallowing the\nabsolute worst-possible level of a log message. This commit fixes the\ninvocation.",
    "date": "2017-04-25T20:25:52Z",
    "url": "https://github.com/elastic/elasticsearch/commit/1b660c51275972e01520becafafc82110c8e50a0",
    "details": {
      "sha": "91bbe1c1a9b3c5f0391a1a7f3bba3ffda597912e",
      "filename": "modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/1b660c51275972e01520becafafc82110c8e50a0/modules%2Ftransport-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftransport%2Fnetty4%2FNetty4InternalESLogger.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/1b660c51275972e01520becafafc82110c8e50a0/modules%2Ftransport-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftransport%2Fnetty4%2FNetty4InternalESLogger.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Ftransport-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftransport%2Fnetty4%2FNetty4InternalESLogger.java?ref=1b660c51275972e01520becafafc82110c8e50a0",
      "patch": "@@ -161,7 +161,7 @@ public boolean isErrorEnabled() {\n \n     @Override\n     public void error(String msg) {\n-        logger.equals(msg);\n+        logger.error(msg);\n     }\n \n     @Override",
      "parent_sha": "0adaf9fb4ce2daaefebd1d08a42a7f691d0c3b55"
    }
  },
  {
    "oid": "4298c501197d374da2994bb8d6eaaac6bf66a874",
    "message": "allow refresh to execute on a relocating shard as well",
    "date": "2013-09-13T18:03:58Z",
    "url": "https://github.com/elastic/elasticsearch/commit/4298c501197d374da2994bb8d6eaaac6bf66a874",
    "details": {
      "sha": "5fb057cc89fdd07f61b8b9c88ec854aade50d747",
      "filename": "src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/4298c501197d374da2994bb8d6eaaac6bf66a874/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2Fservice%2FInternalIndexShard.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/4298c501197d374da2994bb8d6eaaac6bf66a874/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2Fservice%2FInternalIndexShard.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2Fservice%2FInternalIndexShard.java?ref=4298c501197d374da2994bb8d6eaaac6bf66a874",
      "patch": "@@ -435,7 +435,7 @@ public Engine.GetResult get(Engine.Get get) throws ElasticSearchException {\n \n     @Override\n     public void refresh(Engine.Refresh refresh) throws ElasticSearchException {\n-        verifyStarted();\n+        verifyNotClosed();\n         if (logger.isTraceEnabled()) {\n             logger.trace(\"refresh with {}\", refresh);\n         }\n@@ -532,7 +532,7 @@ public IdCacheStats idCacheStats() {\n     @Override\n     public CompletionStats completionStats(String... fields) {\n         CompletionStats completionStats = new CompletionStats();\n-        try{\n+        try {\n             final Engine.Searcher currentSearcher = acquireSearcher();\n             try {\n                 PostingsFormat postingsFormat = this.codecService.postingsFormatService().get(Completion090PostingsFormat.CODEC_NAME).get();\n@@ -728,7 +728,7 @@ public boolean ignoreRecoveryAttempt() {\n     public void readAllowed() throws IllegalIndexShardStateException {\n         IndexShardState state = this.state; // one time volatile read\n         if (state != IndexShardState.STARTED && state != IndexShardState.RELOCATED) {\n-            throw new IllegalIndexShardStateException(shardId, state, \"Read operations only allowed when started/relocated\");\n+            throw new IllegalIndexShardStateException(shardId, state, \"operations only allowed when started/relocated\");\n         }\n     }\n \n@@ -739,7 +739,14 @@ private void writeAllowed() throws IllegalIndexShardStateException {\n     private void verifyStartedOrRecovering() throws IllegalIndexShardStateException {\n         IndexShardState state = this.state; // one time volatile read\n         if (state != IndexShardState.STARTED && state != IndexShardState.RECOVERING) {\n-            throw new IllegalIndexShardStateException(shardId, state, \"write operation only allowed when started/recovering\");\n+            throw new IllegalIndexShardStateException(shardId, state, \"operation only allowed when started/recovering\");\n+        }\n+    }\n+\n+    private void verifyNotClosed() throws IllegalIndexShardStateException {\n+        IndexShardState state = this.state; // one time volatile read\n+        if (state == IndexShardState.CLOSED) {\n+            throw new IllegalIndexShardStateException(shardId, state, \"operation only allowed when not closed\");\n         }\n     }\n ",
      "parent_sha": "d9a055fe546ac963b98beb2acea32425ce0b123e"
    }
  },
  {
    "oid": "82beae9c0c3ef181827a2b82b2d7145a50585cde",
    "message": "[test] check node ports to see if they are already bound\n\nA large number of recent test failures have been caused by failure to bind\na port in the range 32900 to 32999. The ports are now tested to see if they\ncan be bound by this JVM and if not tries to bind another port. This will\ndecrease the likelihood of a port bind failure but another application could\nstill bind a port before the node starts up.\n\nCloses elastic/elasticsearch#737\n\nOriginal commit: elastic/x-pack-elasticsearch@aaf098758fffb3be5d82f1eea46135280f048058",
    "date": "2015-02-25T17:05:00Z",
    "url": "https://github.com/elastic/elasticsearch/commit/82beae9c0c3ef181827a2b82b2d7145a50585cde",
    "details": {
      "sha": "3f64d34aef0d5300fe48ddf69c600d8461451a03",
      "filename": "src/test/java/org/elasticsearch/test/discovery/ClusterDiscoveryConfiguration.java",
      "status": "modified",
      "additions": 41,
      "deletions": 8,
      "changes": 49,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/82beae9c0c3ef181827a2b82b2d7145a50585cde/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fdiscovery%2FClusterDiscoveryConfiguration.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/82beae9c0c3ef181827a2b82b2d7145a50585cde/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fdiscovery%2FClusterDiscoveryConfiguration.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fdiscovery%2FClusterDiscoveryConfiguration.java?ref=82beae9c0c3ef181827a2b82b2d7145a50585cde",
      "patch": "@@ -7,6 +7,7 @@\n \n import com.carrotsearch.randomizedtesting.RandomizedTest;\n import com.google.common.primitives.Ints;\n+import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.Version;\n import org.elasticsearch.common.settings.ImmutableSettings;\n import org.elasticsearch.common.settings.Settings;\n@@ -15,6 +16,8 @@\n import org.elasticsearch.test.SettingsSource;\n import org.elasticsearch.transport.local.LocalTransport;\n \n+import java.io.IOException;\n+import java.net.ServerSocket;\n import java.util.HashSet;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -55,7 +58,8 @@ public static class UnicastZen extends ClusterDiscoveryConfiguration {\n         private static final AtomicInteger portCounter = new AtomicInteger();\n \n         private final int[] unicastHostOrdinals;\n-        private final int basePort;\n+        private final int[] unicastHostPorts;\n+        private final boolean localMode;\n \n         public UnicastZen(int numOfNodes, ElasticsearchIntegrationTest.Scope scope) {\n             this(numOfNodes, numOfNodes, scope);\n@@ -83,7 +87,9 @@ public UnicastZen(int numOfNodes, int numOfUnicastHosts, Settings extraSettings,\n                 }\n                 unicastHostOrdinals = Ints.toArray(ordinals);\n             }\n-            this.basePort = calcBasePort(scope);\n+            this.localMode = nodeSettings.get(\"node.mode\", InternalTestCluster.NODE_MODE).equals(\"local\");\n+            this.unicastHostPorts = localMode ? new int[0] : unicastHostPorts(calcBasePort(scope), numOfNodes);\n+            assert unicastHostOrdinals.length <= unicastHostPorts.length;\n         }\n \n         public UnicastZen(int numOfNodes, int[] unicastHostOrdinals, ElasticsearchIntegrationTest.Scope scope) {\n@@ -93,7 +99,9 @@ public UnicastZen(int numOfNodes, int[] unicastHostOrdinals, ElasticsearchIntegr\n         public UnicastZen(int numOfNodes, Settings extraSettings, int[] unicastHostOrdinals, ElasticsearchIntegrationTest.Scope scope) {\n             super(numOfNodes, extraSettings);\n             this.unicastHostOrdinals = unicastHostOrdinals;\n-            this.basePort = calcBasePort(scope);\n+            this.localMode = nodeSettings.get(\"node.mode\", InternalTestCluster.NODE_MODE).equals(\"local\");\n+            this.unicastHostPorts = localMode ? new int[0] : unicastHostPorts(calcBasePort(scope), numOfNodes);\n+            assert unicastHostOrdinals.length <= unicastHostPorts.length;\n         }\n \n         private static int calcBasePort(ElasticsearchIntegrationTest.Scope scope) {\n@@ -124,22 +132,47 @@ public Settings node(int nodeOrdinal) {\n                     .put(\"discovery.zen.ping.multicast.enabled\", false);\n \n             String[] unicastHosts = new String[unicastHostOrdinals.length];\n-            String mode = nodeSettings.get(\"node.mode\", InternalTestCluster.NODE_MODE);\n-            if (mode.equals(\"local\")) {\n+            if (localMode) {\n                 builder.put(LocalTransport.TRANSPORT_LOCAL_ADDRESS, \"node_\" + nodeOrdinal);\n                 for (int i = 0; i < unicastHosts.length; i++) {\n                     unicastHosts[i] = \"node_\" + unicastHostOrdinals[i];\n                 }\n             } else {\n                 // we need to pin the node port & host so we'd know where to point things\n-                builder.put(\"transport.tcp.port\", basePort + nodeOrdinal);\n+                builder.put(\"transport.tcp.port\", unicastHostPorts[nodeOrdinal]);\n                 builder.put(\"transport.host\", \"localhost\");\n-                for (int i = 0; i < unicastHosts.length; i++) {\n-                    unicastHosts[i] = \"localhost:\" + (basePort + unicastHostOrdinals[i]);\n+                for (int i = 0; i < unicastHostOrdinals.length; i++) {\n+                    unicastHosts[i] = \"localhost:\" + (unicastHostPorts[unicastHostOrdinals[i]]);\n                 }\n             }\n             builder.putArray(\"discovery.zen.ping.unicast.hosts\", unicastHosts);\n             return builder.put(super.node(nodeOrdinal)).build();\n         }\n+\n+        protected static int[] unicastHostPorts(int basePort, int numHosts) {\n+            int[] unicastHostPorts = new int[numHosts];\n+\n+            final int maxPort = basePort + 99;\n+            int currentPort = basePort;\n+\n+            for (int i = 0; i < unicastHostPorts.length; i++) {\n+                boolean foundPortInRange = false;\n+                while (currentPort <= maxPort && !foundPortInRange) {\n+                    try (ServerSocket socket = new ServerSocket(currentPort)) {\n+                        // bind was a success\n+                        foundPortInRange = true;\n+                        unicastHostPorts[i] = currentPort;\n+                    } catch (IOException e) {\n+                        // Do nothing\n+                    }\n+                    currentPort++;\n+                }\n+\n+                if (!foundPortInRange) {\n+                    throw new ElasticsearchException(\"could not find enough open ports in range [\" + basePort + \"-\" + maxPort + \"]\");\n+                }\n+            }\n+            return unicastHostPorts;\n+        }\n     }\n }",
      "parent_sha": "121a20ca870a96c68c0999deed0341d4abbae5dd"
    }
  },
  {
    "oid": "f6abf979ce8a7dd42c315c233c483b3f9308f1b6",
    "message": "Fixed compilation issue\n\nRelates elastic/elasticsearchelastic/elasticsearch#18914\n\nOriginal commit: elastic/x-pack-elasticsearch@35b6960b9e8dada776a062164ba721ce6e728203",
    "date": "2016-06-23T07:06:02Z",
    "url": "https://github.com/elastic/elasticsearch/commit/f6abf979ce8a7dd42c315c233c483b3f9308f1b6",
    "details": {
      "sha": "acccd2da2c9c83646a75c71ffbf5b72aaf25694e",
      "filename": "elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/resolver/cluster/ClusterStatsResolverTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/f6abf979ce8a7dd42c315c233c483b3f9308f1b6/elasticsearch%2Fx-pack%2Fmarvel%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fmarvel%2Fagent%2Fresolver%2Fcluster%2FClusterStatsResolverTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/f6abf979ce8a7dd42c315c233c483b3f9308f1b6/elasticsearch%2Fx-pack%2Fmarvel%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fmarvel%2Fagent%2Fresolver%2Fcluster%2FClusterStatsResolverTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/elasticsearch%2Fx-pack%2Fmarvel%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fmarvel%2Fagent%2Fresolver%2Fcluster%2FClusterStatsResolverTests.java?ref=f6abf979ce8a7dd42c315c233c483b3f9308f1b6",
      "patch": "@@ -23,6 +23,7 @@\n import org.elasticsearch.common.transport.BoundTransportAddress;\n import org.elasticsearch.common.transport.DummyTransportAddress;\n import org.elasticsearch.common.transport.TransportAddress;\n+import org.elasticsearch.common.unit.ByteSizeValue;\n import org.elasticsearch.common.xcontent.XContentType;\n import org.elasticsearch.http.HttpInfo;\n import org.elasticsearch.index.Index;\n@@ -112,7 +113,7 @@ private NodeInfo randomNodeInfo() {\n                 Settings.EMPTY, DummyOsInfo.INSTANCE, new ProcessInfo(randomInt(), randomBoolean()), JvmInfo.jvmInfo(),\n                 new ThreadPoolInfo(Collections.singletonList(new ThreadPool.Info(\"test_threadpool\", ThreadPool.ThreadPoolType.FIXED, 5))),\n                 new TransportInfo(transportAddress, Collections.emptyMap()), new HttpInfo(transportAddress, randomLong()),\n-                new PluginsAndModules(), new IngestInfo(Collections.emptyList()));\n+                new PluginsAndModules(), new IngestInfo(Collections.emptyList()), new ByteSizeValue(randomIntBetween(1, 1024)));\n \n     }\n ",
      "parent_sha": "14896b174ea9fe9485e3da654b9c1e8e7c82078f"
    }
  },
  {
    "oid": "e9c0dd9ae492ae24a4169f50a402dcf7e071a567",
    "message": "[Test] should be abstract",
    "date": "2014-04-12T14:14:58Z",
    "url": "https://github.com/elastic/elasticsearch/commit/e9c0dd9ae492ae24a4169f50a402dcf7e071a567",
    "details": {
      "sha": "9ec94574c4440e0a597c7fa52c03ab1404e88e5d",
      "filename": "src/test/java/org/elasticsearch/test/ElasticsearchAllocationTestCase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/e9c0dd9ae492ae24a4169f50a402dcf7e071a567/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2FElasticsearchAllocationTestCase.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/e9c0dd9ae492ae24a4169f50a402dcf7e071a567/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2FElasticsearchAllocationTestCase.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2FElasticsearchAllocationTestCase.java?ref=e9c0dd9ae492ae24a4169f50a402dcf7e071a567",
      "patch": "@@ -46,7 +46,7 @@\n \n /**\n  */\n-public class ElasticsearchAllocationTestCase extends ElasticsearchTestCase {\n+public abstract class ElasticsearchAllocationTestCase extends ElasticsearchTestCase {\n \n     public static AllocationService createAllocationService() {\n         return createAllocationService(ImmutableSettings.Builder.EMPTY_SETTINGS);",
      "parent_sha": "efb749936b92beffc6166fb1ebbf5dd28a9b899c"
    }
  },
  {
    "oid": "2facc42a5576ad22104db3043cd6d826b0094ad1",
    "message": " Change snapshot status error to use generic SnapshotException (#24355)\n\nChanges the snapshot status read exception from the (misleading)\r\nIndexShardRestoreFailedException to the generic SnapshotException\r\n\r\nCloses #24225",
    "date": "2017-04-27T13:36:26Z",
    "url": "https://github.com/elastic/elasticsearch/commit/2facc42a5576ad22104db3043cd6d826b0094ad1",
    "details": {
      "sha": "a0d7ece8c0df52429ba1a8d4c9cbb584c751dd38",
      "filename": "core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/2facc42a5576ad22104db3043cd6d826b0094ad1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fblobstore%2FBlobStoreRepository.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/2facc42a5576ad22104db3043cd6d826b0094ad1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fblobstore%2FBlobStoreRepository.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fblobstore%2FBlobStoreRepository.java?ref=2facc42a5576ad22104db3043cd6d826b0094ad1",
      "patch": "@@ -954,7 +954,7 @@ public BlobStoreIndexShardSnapshot loadSnapshot() {\n             try {\n                 return indexShardSnapshotFormat(version).read(blobContainer, snapshotId.getUUID());\n             } catch (IOException ex) {\n-                throw new IndexShardRestoreFailedException(shardId, \"failed to read shard snapshot file\", ex);\n+                throw new SnapshotException(metadata.name(), snapshotId, \"failed to read shard snapshot file for \" + shardId, ex);\n             }\n         }\n ",
      "parent_sha": "2fa1c9fff14adbdbbd373c5b39b553c55e3738f7"
    }
  },
  {
    "oid": "f21c864634bc59d65dad86acce288414e83f2dbe",
    "message": "Take into account base path on AzureBlobStoreRepositoryTests#testNotFoundErrorMessageContainsFullKey (#75934)",
    "date": "2021-08-02T12:17:37Z",
    "url": "https://github.com/elastic/elasticsearch/commit/f21c864634bc59d65dad86acce288414e83f2dbe",
    "details": {
      "sha": "d293ad7c6c2d9b2d6fdca48aeacc22b6e9033bb2",
      "filename": "plugins/repository-azure/src/internalClusterTest/java/org/elasticsearch/repositories/azure/AzureBlobStoreRepositoryTests.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/f21c864634bc59d65dad86acce288414e83f2dbe/plugins%2Frepository-azure%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fazure%2FAzureBlobStoreRepositoryTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/f21c864634bc59d65dad86acce288414e83f2dbe/plugins%2Frepository-azure%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fazure%2FAzureBlobStoreRepositoryTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugins%2Frepository-azure%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fazure%2FAzureBlobStoreRepositoryTests.java?ref=f21c864634bc59d65dad86acce288414e83f2dbe",
      "patch": "@@ -7,14 +7,15 @@\n  */\n package org.elasticsearch.repositories.azure;\n \n+import fixture.azure.AzureHttpHandler;\n+\n import com.azure.storage.common.policy.RequestRetryOptions;\n import com.azure.storage.common.policy.RetryPolicyType;\n import com.sun.net.httpserver.Headers;\n import com.sun.net.httpserver.HttpExchange;\n import com.sun.net.httpserver.HttpHandler;\n-import fixture.azure.AzureHttpHandler;\n+\n import org.elasticsearch.common.Randomness;\n-import org.elasticsearch.core.SuppressForbidden;\n import org.elasticsearch.common.blobstore.BlobContainer;\n import org.elasticsearch.common.blobstore.BlobPath;\n import org.elasticsearch.common.blobstore.BlobStore;\n@@ -24,6 +25,7 @@\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.unit.ByteSizeUnit;\n import org.elasticsearch.common.unit.ByteSizeValue;\n+import org.elasticsearch.core.SuppressForbidden;\n import org.elasticsearch.plugins.Plugin;\n import org.elasticsearch.repositories.blobstore.ESMockAPIBasedRepositoryIntegTestCase;\n import org.elasticsearch.rest.RestStatus;\n@@ -41,7 +43,7 @@\n import java.util.regex.Pattern;\n \n import static org.hamcrest.Matchers.anEmptyMap;\n-import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.containsString;\n import static org.hamcrest.Matchers.is;\n \n @SuppressForbidden(reason = \"this test uses a HttpServer to emulate an Azure endpoint\")\n@@ -250,7 +252,7 @@ public void testNotFoundErrorMessageContainsFullKey() throws Exception {\n         try (BlobStore store = newBlobStore()) {\n             BlobContainer container = store.blobContainer(BlobPath.EMPTY.add(\"nested\").add(\"dir\"));\n             NoSuchFileException exception = expectThrows(NoSuchFileException.class, () -> container.readBlob(\"blob\"));\n-            assertThat(exception.getMessage(), equalTo(\"Blob [nested/dir/blob] not found\"));\n+            assertThat(exception.getMessage(), containsString(\"nested/dir/blob] not found\"));\n         }\n     }\n }",
      "parent_sha": "8d4fb3aa84ea1e75c647fb51398578303b6dfd68"
    }
  },
  {
    "oid": "0853fc806f32ad05a7a5c0c489c510bcb1424c7b",
    "message": "Add missing cast to logging message supplier\n\nThis commit adds a missing cast to logging message supplier on a single\ninvocation receiving a parameterized message parameter.",
    "date": "2016-08-30T22:26:45Z",
    "url": "https://github.com/elastic/elasticsearch/commit/0853fc806f32ad05a7a5c0c489c510bcb1424c7b",
    "details": {
      "sha": "cd201e7ff56179984d25a0f478dceaff8e6594c8",
      "filename": "plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageServiceImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/0853fc806f32ad05a7a5c0c489c510bcb1424c7b/plugins%2Frepository-azure%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcloud%2Fazure%2Fstorage%2FAzureStorageServiceImpl.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/0853fc806f32ad05a7a5c0c489c510bcb1424c7b/plugins%2Frepository-azure%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcloud%2Fazure%2Fstorage%2FAzureStorageServiceImpl.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugins%2Frepository-azure%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcloud%2Fazure%2Fstorage%2FAzureStorageServiceImpl.java?ref=0853fc806f32ad05a7a5c0c489c510bcb1424c7b",
      "patch": "@@ -28,6 +28,7 @@\n import com.microsoft.azure.storage.blob.CloudBlockBlob;\n import com.microsoft.azure.storage.blob.ListBlobItem;\n import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.logging.log4j.util.Supplier;\n import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.blobstore.BlobMetaData;\n import org.elasticsearch.common.blobstore.support.PlainBlobMetaData;\n@@ -173,7 +174,7 @@ public void createContainer(String account, LocationMode mode, String container)\n             logger.trace(\"creating container [{}]\", container);\n             blobContainer.createIfNotExists();\n         } catch (IllegalArgumentException e) {\n-            logger.trace(() -> new ParameterizedMessage(\"fails creating container [{}]\", container), e);\n+            logger.trace((Supplier<?>) () -> new ParameterizedMessage(\"fails creating container [{}]\", container), e);\n             throw new RepositoryException(container, e.getMessage());\n         }\n     }",
      "parent_sha": "abf8a1a3f0214c83be5acb02fc167d07bf7fe731"
    }
  },
  {
    "oid": "b374c483e8c916367163931b8d983acb556d2c69",
    "message": "More debug logging in realms authenticator (#124342)\n\nThis PR adds debug logging to the realms authenticator, for exceptions\naround request processing.",
    "date": "2025-03-09T12:50:29Z",
    "url": "https://github.com/elastic/elasticsearch/commit/b374c483e8c916367163931b8d983acb556d2c69",
    "details": {
      "sha": "edb109b9dc552bb7d1ad6421d7724c72faf41595",
      "filename": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/RealmsAuthenticator.java",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/b374c483e8c916367163931b8d983acb556d2c69/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FRealmsAuthenticator.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/b374c483e8c916367163931b8d983acb556d2c69/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FRealmsAuthenticator.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2FRealmsAuthenticator.java?ref=b374c483e8c916367163931b8d983acb556d2c69",
      "patch": "@@ -252,6 +252,14 @@ private void consumeToken(Context context, ActionListener<AuthenticationResult<A\n                     listener.onFailure(context.getRequest().authenticationFailed(authenticationToken));\n                 } else {\n                     assert e instanceof AuthenticationTerminatedSuccessfullyException == false : e;\n+                    logger.debug(\n+                        () -> format(\n+                            \"An error occurred while attempting to authenticate [%s] with token of type [%s]\",\n+                            authenticationToken.principal(),\n+                            authenticationToken.getClass().getName()\n+                        ),\n+                        e\n+                    );\n                     listener.onFailure(context.getRequest().exceptionProcessingRequest(e, authenticationToken));\n                 }\n             }), context.getThreadContext()),\n@@ -264,7 +272,7 @@ private void consumeToken(Context context, ActionListener<AuthenticationResult<A\n         } catch (Exception e) {\n             logger.debug(\n                 () -> format(\n-                    \"Authentication of [%s] with token [%s] failed\",\n+                    \"Authentication of [%s] with token of type [%s] failed\",\n                     authenticationToken.principal(),\n                     authenticationToken.getClass().getName()\n                 ),\n@@ -347,7 +355,17 @@ public void lookupRunAsUser(Context context, Authentication authentication, Acti\n                     );\n                     listener.onResponse(tuple);\n                 }\n-            }, e -> listener.onFailure(context.getRequest().exceptionProcessingRequest(e, context.getMostRecentAuthenticationToken()))));\n+            }, e -> {\n+                logger.debug(\n+                    () -> format(\n+                        \"An error occurred while looking up run-as user [%s] for authenticated user [%s]\",\n+                        runAsUsername,\n+                        authentication.getAuthenticatingSubject().getUser().principal()\n+                    ),\n+                    e\n+                );\n+                listener.onFailure(context.getRequest().exceptionProcessingRequest(e, context.getMostRecentAuthenticationToken()));\n+            }));\n         } else if (runAsUsername == null) {\n             listener.onResponse(null);\n         } else {",
      "parent_sha": "a15aee6274332f8b1dc4e47f71dee49e1dd2602b"
    }
  },
  {
    "oid": "11a55d230709bd52c916df108310a618d127140d",
    "message": "[TEST] Handle an IndexLifecycleService that has not started up",
    "date": "2018-09-18T20:02:09Z",
    "url": "https://github.com/elastic/elasticsearch/commit/11a55d230709bd52c916df108310a618d127140d",
    "details": {
      "sha": "58df9ce8d4649430a4cbf671b4a783cc8f256937",
      "filename": "x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleInitialisationIT.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/11a55d230709bd52c916df108310a618d127140d/x-pack%2Fplugin%2Film%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Findexlifecycle%2FIndexLifecycleInitialisationIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/11a55d230709bd52c916df108310a618d127140d/x-pack%2Fplugin%2Film%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Findexlifecycle%2FIndexLifecycleInitialisationIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Film%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Findexlifecycle%2FIndexLifecycleInitialisationIT.java?ref=11a55d230709bd52c916df108310a618d127140d",
      "patch": "@@ -351,12 +351,15 @@ public void testMasterFailover() throws Exception {\n         });\n     }\n \n-    public void testPollIntervalUpdate() {\n+    public void testPollIntervalUpdate() throws Exception {\n         TimeValue pollInterval = TimeValue.timeValueSeconds(randomLongBetween(1, 5));\n         final String server_1 = internalCluster().startMasterOnlyNode(\n             Settings.builder().put(LifecycleSettings.LIFECYCLE_POLL_INTERVAL, pollInterval.getStringRep()).build());\n         IndexLifecycleService indexLifecycleService = internalCluster().getInstance(IndexLifecycleService.class, server_1);\n-        assertThat(indexLifecycleService.getScheduler().jobCount(), equalTo(1));\n+        assertBusy(() -> {\n+            assertNotNull(indexLifecycleService.getScheduler());\n+            assertThat(indexLifecycleService.getScheduler().jobCount(), equalTo(1));\n+        });\n         {\n             TimeValueSchedule schedule = (TimeValueSchedule) indexLifecycleService.getScheduledJob().getSchedule();\n             assertThat(schedule.getInterval(), equalTo(pollInterval));",
      "parent_sha": "c87cff22b4b41925053cf05e0f0dd171959e3d7e"
    }
  },
  {
    "oid": "44758b3823a4982e9c62598f184cf90b67ab5d2a",
    "message": "Restore useAlternatingSort in `MergingDigest` (#112148)",
    "date": "2024-08-26T07:00:39Z",
    "url": "https://github.com/elastic/elasticsearch/commit/44758b3823a4982e9c62598f184cf90b67ab5d2a",
    "details": {
      "sha": "fc22bda52e1041e1560ebc6ee17af182803bc601",
      "filename": "libs/tdigest/src/main/java/org/elasticsearch/tdigest/MergingDigest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/44758b3823a4982e9c62598f184cf90b67ab5d2a/libs%2Ftdigest%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftdigest%2FMergingDigest.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/44758b3823a4982e9c62598f184cf90b67ab5d2a/libs%2Ftdigest%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftdigest%2FMergingDigest.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/libs%2Ftdigest%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftdigest%2FMergingDigest.java?ref=44758b3823a4982e9c62598f184cf90b67ab5d2a",
      "patch": "@@ -92,7 +92,7 @@ public class MergingDigest extends AbstractTDigest {\n     private final int[] order;\n \n     // if true, alternate upward and downward merge passes\n-    public boolean useAlternatingSort = false;\n+    public boolean useAlternatingSort = true;\n     // if true, use higher working value of compression during construction, then reduce on presentation\n     public boolean useTwoLevelCompression = true;\n ",
      "parent_sha": "32b4aa3c448ed5c98854d29d983f903c94649a07"
    }
  },
  {
    "oid": "0fd0cc6f29ba99a4c8360fe9f041062a7d7f9d0f",
    "message": "Changing DataStreamsRestIT to use a data stream wildcard query that works with or without security enabled (#99836)",
    "date": "2023-09-25T12:54:47Z",
    "url": "https://github.com/elastic/elasticsearch/commit/0fd0cc6f29ba99a4c8360fe9f041062a7d7f9d0f",
    "details": {
      "sha": "a60d36b0460a51e5aabd0f5680c485e52d01d7d0",
      "filename": "modules/data-streams/src/javaRestTest/java/org/elasticsearch/datastreams/DataStreamsRestIT.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/0fd0cc6f29ba99a4c8360fe9f041062a7d7f9d0f/modules%2Fdata-streams%2Fsrc%2FjavaRestTest%2Fjava%2Forg%2Felasticsearch%2Fdatastreams%2FDataStreamsRestIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/0fd0cc6f29ba99a4c8360fe9f041062a7d7f9d0f/modules%2Fdata-streams%2Fsrc%2FjavaRestTest%2Fjava%2Forg%2Felasticsearch%2Fdatastreams%2FDataStreamsRestIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Fdata-streams%2Fsrc%2FjavaRestTest%2Fjava%2Forg%2Felasticsearch%2Fdatastreams%2FDataStreamsRestIT.java?ref=0fd0cc6f29ba99a4c8360fe9f041062a7d7f9d0f",
      "patch": "@@ -47,7 +47,7 @@ public void testHiddenDataStream() throws IOException {\n \n         assertOK(client().performRequest(createDocRequest));\n \n-        Request getDataStreamsRequest = new Request(\"GET\", \"/_data_stream?expand_wildcards=hidden\");\n+        Request getDataStreamsRequest = new Request(\"GET\", \"/_data_stream/*?expand_wildcards=hidden\");\n         Response response = client().performRequest(getDataStreamsRequest);\n         Map<String, Object> dataStreams = entityAsMap(response);\n         assertEquals(Collections.singletonList(\"hidden\"), XContentMapValues.extractValue(\"data_streams.name\", dataStreams));\n@@ -77,7 +77,7 @@ public void testHiddenDataStreamImplicitHiddenSearch() throws IOException {\n \n         assertOK(client().performRequest(createDocRequest));\n \n-        Request getDataStreamsRequest = new Request(\"GET\", \"/_data_stream?expand_wildcards=hidden\");\n+        Request getDataStreamsRequest = new Request(\"GET\", \"/_data_stream/*?expand_wildcards=hidden\");\n         Response response = client().performRequest(getDataStreamsRequest);\n         Map<String, Object> dataStreams = entityAsMap(response);\n         assertEquals(Collections.singletonList(\".hidden\"), XContentMapValues.extractValue(\"data_streams.name\", dataStreams));",
      "parent_sha": "1a48c59aa4ff90839f551d3f11d206e385a5351d"
    }
  },
  {
    "oid": "5ea58a338797c6ea633fb0c8de37680b739f6a45",
    "message": "Don't fail search if highlight field is missing for a specific type. Close #682",
    "date": "2011-02-10T17:00:17Z",
    "url": "https://github.com/elastic/elasticsearch/commit/5ea58a338797c6ea633fb0c8de37680b739f6a45",
    "details": {
      "sha": "56d5edfc76379d24d3fe5161e3bbcc74f8eb8cad",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/5ea58a338797c6ea633fb0c8de37680b739f6a45/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Fhighlight%2FHighlightPhase.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/5ea58a338797c6ea633fb0c8de37680b739f6a45/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Fhighlight%2FHighlightPhase.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Fhighlight%2FHighlightPhase.java?ref=5ea58a338797c6ea633fb0c8de37680b739f6a45",
      "patch": "@@ -72,7 +72,8 @@ public class HighlightPhase implements SearchHitPhase {\n             for (SearchContextHighlight.Field field : context.highlight().fields()) {\n                 FieldMapper mapper = documentMapper.mappers().smartNameFieldMapper(field.field());\n                 if (mapper == null) {\n-                    throw new SearchException(context.shardTarget(), \"No mapping found for [\" + field.field() + \"]\");\n+                    //Save skipping missing fields\n+                    continue;\n                 }\n \n                 // if we can do highlighting using Term Vectors, use FastVectorHighlighter, otherwise, use the",
      "parent_sha": "a3af51a1d94ec619a1cb1b41e5b45a00dd5a4c5a"
    }
  },
  {
    "oid": "e11bb996b3d79aff30b38e2f24d25e0732e2d4f3",
    "message": "Change EsIndex to use equals for mapping, to give a greater flexibility (#93115)",
    "date": "2023-01-20T08:32:50Z",
    "url": "https://github.com/elastic/elasticsearch/commit/e11bb996b3d79aff30b38e2f24d25e0732e2d4f3",
    "details": {
      "sha": "75dfba526a10cce556673ec23f878fcf9d8067ab",
      "filename": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/EsIndex.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/e11bb996b3d79aff30b38e2f24d25e0732e2d4f3/x-pack%2Fplugin%2Fql%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fql%2Findex%2FEsIndex.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/e11bb996b3d79aff30b38e2f24d25e0732e2d4f3/x-pack%2Fplugin%2Fql%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fql%2Findex%2FEsIndex.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fql%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fql%2Findex%2FEsIndex.java?ref=e11bb996b3d79aff30b38e2f24d25e0732e2d4f3",
      "patch": "@@ -52,6 +52,6 @@ public boolean equals(Object obj) {\n         }\n \n         EsIndex other = (EsIndex) obj;\n-        return Objects.equals(name, other.name) && mapping == other.mapping;\n+        return Objects.equals(name, other.name) && Objects.equals(mapping, other.mapping);\n     }\n }",
      "parent_sha": "3ad4ef6278828b79d19574c132ba28e96860fd24"
    }
  },
  {
    "oid": "9078c0b2444748bf49b0df960284ec9767a758c4",
    "message": "[TEST] use true unique transport address in test to prevent address collision\n\nOriginal commit: elastic/x-pack-elasticsearch@91e5e1c0467a4823a55180fefe2e5e81cd4dbffe",
    "date": "2017-07-23T19:20:18Z",
    "url": "https://github.com/elastic/elasticsearch/commit/9078c0b2444748bf49b0df960284ec9767a758c4",
    "details": {
      "sha": "093604948caf48d89f606f2d994751020627a769",
      "filename": "plugin/src/test/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilterTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/9078c0b2444748bf49b0df960284ec9767a758c4/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2Ffilter%2FSecurityActionFilterTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/9078c0b2444748bf49b0df960284ec9767a758c4/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2Ffilter%2FSecurityActionFilterTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Faction%2Ffilter%2FSecurityActionFilterTests.java?ref=9078c0b2444748bf49b0df960284ec9767a758c4",
      "patch": "@@ -22,7 +22,6 @@\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.license.XPackLicenseState;\n import org.elasticsearch.tasks.Task;\n@@ -77,10 +76,8 @@ public void init() throws Exception {\n                 new ClusterSettings(settings, Collections.singleton(DestructiveOperations.REQUIRES_NAME_SETTING)));\n         ClusterState state = mock(ClusterState.class);\n         DiscoveryNodes nodes = DiscoveryNodes.builder()\n-                .add(new DiscoveryNode(\"id1\",\n-                        new TransportAddress(TransportAddress.META_ADDRESS, randomIntBetween(49000, 65500)), Version.CURRENT))\n-                .add(new DiscoveryNode(\"id2\",\n-                        new TransportAddress(TransportAddress.META_ADDRESS, randomIntBetween(49000, 65500)), Version.V_5_4_0))\n+                .add(new DiscoveryNode(\"id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n+                .add(new DiscoveryNode(\"id2\", buildNewFakeTransportAddress(), Version.V_5_4_0))\n                 .build();\n         when(state.nodes()).thenReturn(nodes);\n ",
      "parent_sha": "04ace4f1df90e1faac9fbda401e7de0662edf742"
    }
  },
  {
    "oid": "049a50a2bf54077667200ca023373906ee8e1398",
    "message": "Adjust testing of the max amount of threads for the snapshot thread pool (#90363)\n\n#90282 set the max amount of threads for the snapshot thread pool to be 10 regardless of the\r\namount of processors.",
    "date": "2022-09-27T12:52:43Z",
    "url": "https://github.com/elastic/elasticsearch/commit/049a50a2bf54077667200ca023373906ee8e1398",
    "details": {
      "sha": "07b8a629c81e68d6c4e7869d9c1ad5793581c1c0",
      "filename": "server/src/test/java/org/elasticsearch/threadpool/ScalingThreadPoolTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/049a50a2bf54077667200ca023373906ee8e1398/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FScalingThreadPoolTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/049a50a2bf54077667200ca023373906ee8e1398/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FScalingThreadPoolTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fthreadpool%2FScalingThreadPoolTests.java?ref=049a50a2bf54077667200ca023373906ee8e1398",
      "patch": "@@ -39,7 +39,6 @@\n \n public class ScalingThreadPoolTests extends ESThreadPoolTestCase {\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/90336\")\n     public void testScalingThreadPoolConfiguration() throws InterruptedException {\n         final String threadPoolName = randomThreadPool(ThreadPool.ThreadPoolType.SCALING);\n         final Settings.Builder builder = Settings.builder();\n@@ -74,7 +73,7 @@ public void testScalingThreadPoolConfiguration() throws InterruptedException {\n             expectedMax = randomIntBetween(Math.max(1, core), 16);\n             builder.put(\"thread_pool.\" + threadPoolName + \".max\", expectedMax);\n         } else {\n-            expectedMax = maxBasedOnNumberOfProcessors;\n+            expectedMax = threadPoolName.equals(ThreadPool.Names.SNAPSHOT) ? 10 : maxBasedOnNumberOfProcessors;\n         }\n \n         final long keepAlive;",
      "parent_sha": "f823d7d4d433cb6f38ace7177809fce2c202c73d"
    }
  },
  {
    "oid": "7c38041b9e91bf22503627eb500f521ef570ac71",
    "message": "Make it explicit that test expects no rebalancing. (#89040)\n\nThis is required in case new shards allocator might be more proactive with\r\nrebalancing.",
    "date": "2022-08-08T07:13:34Z",
    "url": "https://github.com/elastic/elasticsearch/commit/7c38041b9e91bf22503627eb500f521ef570ac71",
    "details": {
      "sha": "fefb93e5379757717eb1d1f997f4bf9f8533a484",
      "filename": "server/src/internalClusterTest/java/org/elasticsearch/gateway/ReplicaShardAllocatorIT.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/7c38041b9e91bf22503627eb500f521ef570ac71/server%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FReplicaShardAllocatorIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/7c38041b9e91bf22503627eb500f521ef570ac71/server%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FReplicaShardAllocatorIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FReplicaShardAllocatorIT.java?ref=7c38041b9e91bf22503627eb500f521ef570ac71",
      "patch": "@@ -463,7 +463,12 @@ public void testPeerRecoveryForClosedIndices() throws Exception {\n             client().admin()\n                 .cluster()\n                 .prepareUpdateSettings()\n-                .setPersistentSettings(Settings.builder().put(\"cluster.routing.allocation.enable\", \"primaries\").build())\n+                .setPersistentSettings(\n+                    Settings.builder()\n+                        .put(CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(), EnableAllocationDecider.Allocation.PRIMARIES)\n+                        .put(CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(), EnableAllocationDecider.Allocation.PRIMARIES)\n+                        .build()\n+                )\n         );\n         internalCluster().fullRestart();\n         ensureYellow(indexName);\n@@ -475,7 +480,7 @@ public void testPeerRecoveryForClosedIndices() throws Exception {\n             client().admin()\n                 .cluster()\n                 .prepareUpdateSettings()\n-                .setPersistentSettings(Settings.builder().putNull(\"cluster.routing.allocation.enable\").build())\n+                .setPersistentSettings(Settings.builder().putNull(CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey()).build())\n         );\n         ensureGreen(indexName);\n         assertNoOpRecoveries(indexName);",
      "parent_sha": "63f1ab5ab227c0fbeeeb3e90c77653fb069f9760"
    }
  },
  {
    "oid": "b1b832c782d168de63e4e003e1253192074bb995",
    "message": "Add a couple of missing supported checks to org.elasticsearch.vec.VectorScorerFactoryTests (#109303)\n\nThis commit adds a couple of missing supported checks to org.elasticsearch.vec.VectorScorerFactoryTests. Without these the test try, and fail, to run on Windows.",
    "date": "2024-06-03T19:51:39Z",
    "url": "https://github.com/elastic/elasticsearch/commit/b1b832c782d168de63e4e003e1253192074bb995",
    "details": {
      "sha": "dfd26e887b2baba48d52b86e666574f5ba8b21c5",
      "filename": "libs/vec/src/test/java/org/elasticsearch/vec/VectorScorerFactoryTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/b1b832c782d168de63e4e003e1253192074bb995/libs%2Fvec%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fvec%2FVectorScorerFactoryTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/b1b832c782d168de63e4e003e1253192074bb995/libs%2Fvec%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fvec%2FVectorScorerFactoryTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/libs%2Fvec%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fvec%2FVectorScorerFactoryTests.java?ref=b1b832c782d168de63e4e003e1253192074bb995",
      "patch": "@@ -223,14 +223,14 @@ public void testRandomScorerMax() throws IOException {\n     }\n \n     public void testRandomScorerChunkSizeSmall() throws IOException {\n-        assumeTrue(notSupportedMsg(), supported());\n         long maxChunkSize = randomLongBetween(32, 128);\n         logger.info(\"maxChunkSize=\" + maxChunkSize);\n         testRandomScorerImpl(maxChunkSize, FLOAT_ARRAY_RANDOM_FUNC);\n     }\n \n     void testRandomScorerImpl(long maxChunkSize, Function<Integer, float[]> floatArraySupplier) throws IOException {\n         assumeTrue(\"scorer only supported on JDK 22+\", Runtime.version().feature() >= 22);\n+        assumeTrue(notSupportedMsg(), supported());\n         var factory = AbstractVectorTestCase.factory.get();\n         var scalarQuantizer = new ScalarQuantizer(0.1f, 0.9f, (byte) 7);\n \n@@ -321,6 +321,7 @@ void testRandomSliceImpl(int dims, long maxChunkSize, int initialPadding, Functi\n     // Tests with a large amount of data (> 2GB), which ensures that data offsets do not overflow\n     @Nightly\n     public void testLarge() throws IOException {\n+        assumeTrue(notSupportedMsg(), supported());\n         var factory = AbstractVectorTestCase.factory.get();\n \n         try (Directory dir = new MMapDirectory(createTempDir(\"testLarge\"))) {",
      "parent_sha": "0fb1bd7dc23a9f5b824968e36e0e910f94ef0f30"
    }
  },
  {
    "oid": "d087cc6a73ab13060d95f91994e0f9686e9c4cf6",
    "message": "Javadocs for ValueSource (#71921)\n\nThis adds a bunch of javadocs for aggregation's `ValuesSource`, mostly\r\ntrying to say why you'd use the things we already have. I've tried to\r\nexplain why you'd use \"orindals\" for byte array valued fields. And to\r\nexplain the tradeoffs between \"global\" and \"segment\" ordinals.\r\n\r\nCo-authored-by: Mark Tozzi <mark.tozzi@gmail.com>",
    "date": "2021-04-20T17:15:20Z",
    "url": "https://github.com/elastic/elasticsearch/commit/d087cc6a73ab13060d95f91994e0f9686e9c4cf6",
    "details": {
      "sha": "73698e77716bcd2cceb5930c93feddd8ccf1e098",
      "filename": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSource.java",
      "status": "modified",
      "additions": 184,
      "deletions": 47,
      "changes": 231,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/d087cc6a73ab13060d95f91994e0f9686e9c4cf6/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Faggregations%2Fsupport%2FValuesSource.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/d087cc6a73ab13060d95f91994e0f9686e9c4cf6/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Faggregations%2Fsupport%2FValuesSource.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Faggregations%2Fsupport%2FValuesSource.java?ref=d087cc6a73ab13060d95f91994e0f9686e9c4cf6",
      "patch": "@@ -35,8 +35,12 @@\n import org.elasticsearch.index.fielddata.SortingNumericDoubleValues;\n import org.elasticsearch.index.mapper.RangeType;\n import org.elasticsearch.script.AggregationScript;\n+import org.elasticsearch.search.DocValueFormat;\n import org.elasticsearch.search.aggregations.AggregationExecutionException;\n-import org.elasticsearch.search.aggregations.support.ValuesSource.Bytes.WithScript.BytesValues;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.bucket.geogrid.CellIdSource;\n+import org.elasticsearch.search.aggregations.bucket.range.RangeAggregator;\n+import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregator;\n import org.elasticsearch.search.aggregations.support.values.ScriptBytesValues;\n import org.elasticsearch.search.aggregations.support.values.ScriptDoubleValues;\n import org.elasticsearch.search.aggregations.support.values.ScriptLongValues;\n@@ -46,20 +50,31 @@\n import java.util.function.LongUnaryOperator;\n \n /**\n- * Note on subclassing ValuesSources: Generally, direct subclasses of ValuesSource should also be abstract, representing types.  These\n- * subclasses are free to add new methods specific to that type (e.g. {@link Numeric#isFloatingPoint()}).  Subclasses of these should, in\n- * turn, be concrete and implement specific ways of reading the given values (e.g.  script and field based sources).  It is also possible\n- * to see sub-sub-classes of ValuesSource that act as wrappers on other concrete values sources to add functionality, such as the\n- * anonymous subclasses returned from  {@link MissingValues} or the GeoPoint to Numeric conversion logic in\n- * {@link org.elasticsearch.search.aggregations.bucket.geogrid.CellIdSource}\n+ * A unified interface to different ways of getting input data for\n+ * {@link Aggregator}s like DocValues from Lucene or script output. The\n+ * top level sub-classes define type-specific behavior, such as\n+ * {@link ValuesSource.Numeric#isFloatingPoint()}. Second level subclasses are\n+ * then specialized based on where they read values from, e.g. script or field\n+ * cases. There are also adapter classes like {@link CellIdSource} which do\n+ * run-time conversion from one type to another, often dependent on a user\n+ * specified parameter (precision in that case).\n  */\n public abstract class ValuesSource {\n \n     /**\n-     * Get the current {@link BytesValues}.\n+     * Get a byte array like view into the values. This is the \"native\" way\n+     * to access {@link Bytes}-style values.\n      */\n     public abstract SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOException;\n \n+    /**\n+     * Get a \"has any values\" view into the values. It'll try to pick the\n+     * \"most native\" way to check if there are any values, but it builds its\n+     * own view into the values so if you need any of the actual values its\n+     * best to use something like {@link #bytesValues} or\n+     * {@link Numeric#doubleValues} but if you <strong>just</strong>\n+     * need to know if there are any values then use this.\n+     */\n     public abstract DocValueBits docsWithValue(LeafReaderContext context) throws IOException;\n \n     /** Whether this values source needs scores. */\n@@ -68,48 +83,30 @@ public boolean needsScores() {\n     }\n \n     /**\n-     * Build a function prepares rounding values to be called many times.\n+     * Build a function to prepare {@link Rounding}s.\n      * <p>\n      * This returns a {@linkplain Function} because auto date histogram will\n      * need to call it many times over the course of running the aggregation.\n+     * Other aggregations should feel free to call it once.\n      */\n     protected abstract Function<Rounding, Rounding.Prepared> roundingPreparer() throws IOException;\n \n     /**\n      * Check if this values source supports using global and segment ordinals.\n+     * <p>\n+     * If this returns {@code true} then it is safe to cast it to {@link ValuesSource.Bytes.WithOrdinals}.\n      */\n     public boolean hasOrdinals() {\n         return false;\n     }\n \n-    public static class Range extends ValuesSource {\n-        private final RangeType rangeType;\n-        protected final IndexFieldData<?> indexFieldData;\n-\n-        public Range(IndexFieldData<?> indexFieldData, RangeType rangeType) {\n-            this.indexFieldData = indexFieldData;\n-            this.rangeType = rangeType;\n-        }\n-\n-        @Override\n-        public SortedBinaryDocValues bytesValues(LeafReaderContext context) {\n-            return indexFieldData.load(context).getBytesValues();\n-        }\n-\n-        @Override\n-        public DocValueBits docsWithValue(LeafReaderContext context) throws IOException {\n-            final SortedBinaryDocValues bytes = bytesValues(context);\n-            return org.elasticsearch.index.fielddata.FieldData.docsWithValue(bytes);\n-        }\n-\n-        @Override\n-        public Function<Rounding, Prepared> roundingPreparer() throws IOException {\n-            // TODO lookup the min and max rounding when appropriate\n-            return Rounding::prepareForUnknown;\n-        }\n-\n-        public RangeType rangeType() { return rangeType; }\n-    }\n+    /**\n+     * {@linkplain ValuesSource} for fields who's values are best thought of\n+     * as byte arrays without any other meaning like {@code keyword} or\n+     * {@code ip}. Aggregations that operate on these values presume only\n+     * that {@link DocValueFormat#format(BytesRef)} will correctly convert\n+     * the resulting {@link BytesRef} into something human readable.\n+     */\n     public abstract static class Bytes extends ValuesSource {\n \n         @Override\n@@ -123,6 +120,14 @@ public final Function<Rounding, Rounding.Prepared> roundingPreparer() throws IOE\n             throw new AggregationExecutionException(\"can't round a [BYTES]\");\n         }\n \n+        /**\n+         * Specialization of {@linkplain Bytes} who's underlying storage\n+         * de-duplicates its bytes by storing them in a per-leaf sorted\n+         * lookup table. Aggregations that are aware of these lookup tables\n+         * can operate directly on the value's position in the table, know as\n+         * the \"ordinal\". They can then later translate the ordinal into\n+         * the {@link BytesRef} value.\n+         */\n         public abstract static class WithOrdinals extends Bytes {\n \n             public static final WithOrdinals EMPTY = new WithOrdinals() {\n@@ -155,11 +160,60 @@ public DocValueBits docsWithValue(LeafReaderContext context) throws IOException\n                 return org.elasticsearch.index.fielddata.FieldData.docsWithValue(ordinals);\n             }\n \n-            public abstract SortedSetDocValues ordinalsValues(LeafReaderContext context)\n-                    throws IOException;\n+            /**\n+             * Get a view into the leaf's ordinals and their {@link BytesRef} values.\n+             * <p>\n+             * Use {@link SortedSetDocValues#advanceExact}, {@link SortedSetDocValues#getValueCount},\n+             * and {@link SortedSetDocValues#nextOrd} to fetch the ordinals. Use\n+             * {@link SortedSetDocValues#lookupOrd} to convert form the ordinal\n+             * number into the {@link BytesRef} value. Make sure to\n+             * {@link BytesRef#deepCopyOf(BytesRef) copy} the result if you need\n+             * to keep it.\n+             * <p>\n+             * Each leaf may have a different ordinal for the same byte array.\n+             * Imagine, for example, an index where one leaf has the values\n+             * {@code \"a\", \"b\", \"d\"} and another leaf has the values\n+             * {@code \"b\", \"c\", \"d\"}. {@code \"a\"} has the ordinal {@code 0} in\n+             * the first leaf and doesn't exist in the second leaf.\n+             * {@code \"b\"} has the ordinal {@code 1} in the first leaf\n+             * and {@code 0} in the second leaf. {@code \"c\"} doesn't exist in\n+             * the first leaf and has the ordinal {@code 1} in the second leaf.\n+             * And {@code \"d\"} gets the ordinal {@code 2} in both leaves.\n+             * <p>\n+             * This can be a huge pain if you have to compare the ordinals\n+             * of values from different segments.\n+             */\n+            public abstract SortedSetDocValues ordinalsValues(LeafReaderContext context) throws IOException;\n \n-            public abstract SortedSetDocValues globalOrdinalsValues(LeafReaderContext context)\n-                    throws IOException;\n+            /**\n+             * Get a \"global\" view into the leaf's ordinals. This can require\n+             * construction of fairly large set of lookups in memory so prefer\n+             * {@link #ordinalsValues} unless you need the global view.\n+             * <p>\n+             * This functions just like {@link #ordinalsValues} except that the\n+             * ordinals that {@link SortedSetDocValues#nextOrd} and\n+             * {@link SortedSetDocValues#lookupOrd(long)} operate on are \"global\"\n+             * to all segments in the shard. They are ordinals into a lookup\n+             * table containing all values on the shard.\n+             * <p>\n+             * Compare this to the example in the docs for {@link #ordinalsValues}.\n+             * Imagine, again, an index where one leaf has the values\n+             * {@code \"a\", \"b\", \"d\"} and another leaf has the values\n+             * {@code \"b\", \"c\", \"d\"}. The global ordinal for {@code \"a\"} is {@code 0}.\n+             * The global ordinal for {@code \"b\"} is {@code 1}. The global ordinal\n+             * for {@code \"c\"} is {@code 2}. And the global ordinal for {@code \"d\"}\n+             * is, you guessed it, {@code 3}.\n+             * <p>\n+             * This makes comparing the values from different segments much simpler.\n+             * But it comes with a fairly high memory cost and a substantial\n+             * performance hit when this method is first called after modifying the index.\n+             * If the global ordinals lookup hasn't been built then this method's runtime\n+             * is roughly proportional to the number of distinct values on the field.\n+             * If there are very few distinct values then the runtime'll be dominated\n+             * by factors related to the number of segments. But in that case it'll\n+             * be fast enough that you won't usually care.\n+             */\n+            public abstract SortedSetDocValues globalOrdinalsValues(LeafReaderContext context) throws IOException;\n \n             /**\n              * Whether this values source is able to provide a mapping between global and segment ordinals,\n@@ -175,10 +229,22 @@ public boolean hasOrdinals() {\n                 return true;\n             }\n \n-            /** Returns a mapping from segment ordinals to global ordinals. */\n-            public abstract LongUnaryOperator globalOrdinalsMapping(LeafReaderContext context)\n-                    throws IOException;\n+            /**\n+             * Returns a mapping from segment ordinals to global ordinals. This\n+             * allows you to post process segment ordinals into global ordinals\n+             * which could save you a few lookups. Also, operating on segment\n+             * ordinals is likely to produce a more \"dense\" list of, say, counts.\n+             * <p>\n+             * Anyone looking to use this strategy rather than looking up on the\n+             * fly should benchmark well and update this documentation with what\n+             * they learn.\n+             */\n+            public abstract LongUnaryOperator globalOrdinalsMapping(LeafReaderContext context) throws IOException;\n \n+            /**\n+             * Get the maximum global ordinal. Requires {@link #globalOrdinalsValues}\n+             * so see the note about its performance.\n+             */\n             public long globalMaxOrd(IndexSearcher indexSearcher) throws IOException {\n                 IndexReader indexReader = indexSearcher.getIndexReader();\n                 if (indexReader.leaves().isEmpty()) {\n@@ -337,6 +403,14 @@ public boolean advanceExact(int doc) throws IOException {\n         }\n     }\n \n+    /**\n+     * {@linkplain ValuesSource} for fields who's values are best thought of\n+     * as numbers. Aggregations that operate on these values often may chose\n+     * to operate on double precision floating point\n+     * {@link Numeric#doubleValues values} or on 64 bit signed two's complement\n+     * {@link Numeric#longValues values}. They'll do normal \"number stuff\"\n+     * to those values like add, multiply, and compare them to other numbers.\n+     */\n     public abstract static class Numeric extends ValuesSource {\n \n         public static final Numeric EMPTY = new Numeric() {\n@@ -363,17 +437,44 @@ public SortedBinaryDocValues bytesValues(LeafReaderContext context) throws IOExc\n \n         };\n \n-        /** Whether the underlying data is floating-point or not. */\n+        /**\n+         * Are values of this field better represented as a double precision\n+         * floating point numbers ({@code true}) or 64 bit signed\n+         * numbers ({@code false})?\n+         * <p>\n+         * Aggregations may, if they feel it is important, use this to pick\n+         * which of {@link #longValues} and {@link #doubleValues} is better for\n+         * the field values. Most metric aggregations are quite happy to operate\n+         * on floating point numbers all the time and never call this. Bucketing\n+         * aggregations that want to enumerate all values\n+         * (like {@link TermsAggregator}) will want to check this but bucketing\n+         * aggregations that just compare values ({@link RangeAggregator}) are,\n+         * like metric aggregators, fine ignoring it.\n+         */\n         public abstract boolean isFloatingPoint();\n \n-        /** Get the current {@link SortedNumericDocValues}. */\n+        /**\n+         * Get a 64 bit signed view into the values in this leaf.\n+         * <p>\n+         * If the values have precision beyond the decimal point then they'll be\n+         * <a href=\"https://docs.oracle.com/javase/specs/jls/se15/html/jls-5.html#jls-5.1.3\">\"narrowed\"</a>\n+         * but they'll accurately represent values up to {@link Long#MAX_VALUE}.\n+         */\n         public abstract SortedNumericDocValues longValues(LeafReaderContext context) throws IOException;\n \n-        /** Get the current {@link SortedNumericDoubleValues}. */\n+        /**\n+         * Get a double precision floating point view into the values in this leaf.\n+         * <p>\n+         * These values will preserve any precision beyond the decimal point but\n+         * are limited to {@code double}'s standard 53 bit mantissa. If the \"native\"\n+         * field has values that can't be accurately represented in those 53 bits\n+         * they'll be <a href=\"https://docs.oracle.com/javase/specs/jls/se15/html/jls-5.html#jls-5.1.2\">\"widened\"</a>\n+         */\n         public abstract SortedNumericDoubleValues doubleValues(LeafReaderContext context) throws IOException;\n \n         @Override\n         public DocValueBits docsWithValue(LeafReaderContext context) throws IOException {\n+            // We try and pick the lowest overhead implementation.\n             if (isFloatingPoint()) {\n                 final SortedNumericDoubleValues values = doubleValues(context);\n                 return org.elasticsearch.index.fielddata.FieldData.docsWithValue(values);\n@@ -555,9 +656,45 @@ public boolean needsScores() {\n                 return script.needs_score();\n             }\n         }\n+    }\n+\n+    /**\n+     * {@linkplain ValuesSource} for fields who's values are best thought of\n+     * as ranges of numbers, dates, or IP addresses.\n+     */\n+    public static class Range extends ValuesSource {\n+        private final RangeType rangeType;\n+        protected final IndexFieldData<?> indexFieldData;\n+\n+        public Range(IndexFieldData<?> indexFieldData, RangeType rangeType) {\n+            this.indexFieldData = indexFieldData;\n+            this.rangeType = rangeType;\n+        }\n \n+        @Override\n+        public SortedBinaryDocValues bytesValues(LeafReaderContext context) {\n+            return indexFieldData.load(context).getBytesValues();\n+        }\n+\n+        @Override\n+        public DocValueBits docsWithValue(LeafReaderContext context) throws IOException {\n+            final SortedBinaryDocValues bytes = bytesValues(context);\n+            return org.elasticsearch.index.fielddata.FieldData.docsWithValue(bytes);\n+        }\n+\n+        @Override\n+        public Function<Rounding, Prepared> roundingPreparer() throws IOException {\n+            // TODO lookup the min and max rounding when appropriate\n+            return Rounding::prepareForUnknown;\n+        }\n+\n+        public RangeType rangeType() { return rangeType; }\n     }\n \n+    /**\n+     * {@linkplain ValuesSource} for fields who's values are best thought of\n+     * as points on a globe.\n+     */\n     public abstract static class GeoPoint extends ValuesSource {\n \n         public static final GeoPoint EMPTY = new GeoPoint() {",
      "parent_sha": "fe99bad47dd73b8ebd2b28ff67347a24abe3975a"
    }
  },
  {
    "oid": "e5e8fa8b548cb84348cc500c70d860fec01ea7ff",
    "message": "[ML] Fix simultaneous stop and force stop datafeed (#49367)\n\nIf a datafeed is stopped normally and force stopped at the same\r\ntime then it is possible that the force stop removes the\r\npersistent task while the normal stop is performing actions.\r\nCurrently this causes the normal stop to error, but since\r\nstopping a stopped datafeed is not an error this doesn't make\r\nsense. Instead the force stop should just take precedence.\r\n\r\nThis is a followup to #49191 and should really have been\r\nincluded in the changes in that PR.",
    "date": "2019-11-20T12:36:15Z",
    "url": "https://github.com/elastic/elasticsearch/commit/e5e8fa8b548cb84348cc500c70d860fec01ea7ff",
    "details": {
      "sha": "ba197ea0e546de15435312e682be1ea9af858dc2",
      "filename": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDatafeedAction.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/e5e8fa8b548cb84348cc500c70d860fec01ea7ff/x-pack%2Fplugin%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Faction%2FTransportStopDatafeedAction.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/e5e8fa8b548cb84348cc500c70d860fec01ea7ff/x-pack%2Fplugin%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Faction%2FTransportStopDatafeedAction.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fml%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Faction%2FTransportStopDatafeedAction.java?ref=e5e8fa8b548cb84348cc500c70d860fec01ea7ff",
      "patch": "@@ -16,7 +16,6 @@\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n import org.elasticsearch.cluster.service.ClusterService;\n-import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.common.util.concurrent.AbstractRunnable;\n import org.elasticsearch.common.util.concurrent.AtomicArray;\n@@ -259,17 +258,18 @@ protected void taskOperation(StopDatafeedAction.Request request, TransportStartD\n                     threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(new AbstractRunnable() {\n                         @Override\n                         public void onFailure(Exception e) {\n-                            if ((e instanceof ResourceNotFoundException &&\n-                                Strings.isAllOrWildcard(new String[]{request.getDatafeedId()}))) {\n-                                datafeedTask.stop(\"stop_datafeed (api)\", request.getStopTimeout());\n+                            // We validated that the datafeed names supplied in the request existed when we started processing the action.\n+                            // If the related task for one of them doesn't exist at this point then it must have been removed by a\n+                            // simultaneous force stop request.  This is not an error.\n+                            if (ExceptionsHelper.unwrapCause(e) instanceof ResourceNotFoundException) {\n                                 listener.onResponse(new StopDatafeedAction.Response(true));\n                             } else {\n                                 listener.onFailure(e);\n                             }\n                         }\n \n                         @Override\n-                        protected void doRun() throws Exception {\n+                        protected void doRun() {\n                             datafeedTask.stop(\"stop_datafeed (api)\", request.getStopTimeout());\n                             listener.onResponse(new StopDatafeedAction.Response(true));\n                         }\n@@ -343,7 +343,7 @@ protected StopDatafeedAction.Response newResponse(StopDatafeedAction.Request req\n                 throw org.elasticsearch.ExceptionsHelper\n                         .convertToElastic(failedNodeExceptions.get(0));\n             } else {\n-                // This can happen we the actual task in the node no longer exists,\n+                // This can happen when the actual task in the node no longer exists,\n                 // which means the datafeed(s) have already been stopped.\n                 return new StopDatafeedAction.Response(true);\n             }",
      "parent_sha": "039da97988430e111e7f09faf7cbf30bfe2e19b2"
    }
  },
  {
    "oid": "5a76944da050278b0dc557eb44d0eecda2062400",
    "message": "Fix testCancelFailedSearchWhenPartialResultDisallowed (#64248)\n\nThe search request in the test can complete before the \"cancelledLatch\" \r\nis latched if the second shard request is sent after the request was\r\ncanceled (i.e., the child task is not allowed to start after the parent\r\nwas canceled).\r\n\r\nCloses #63976\r\nRelates ##63520",
    "date": "2020-10-28T14:23:26Z",
    "url": "https://github.com/elastic/elasticsearch/commit/5a76944da050278b0dc557eb44d0eecda2062400",
    "details": {
      "sha": "72e4663b70b661661f4368dea557eb67f9a9bdb6",
      "filename": "server/src/internalClusterTest/java/org/elasticsearch/search/SearchCancellationIT.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/5a76944da050278b0dc557eb44d0eecda2062400/server%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fsearch%2FSearchCancellationIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/5a76944da050278b0dc557eb44d0eecda2062400/server%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fsearch%2FSearchCancellationIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fsearch%2FSearchCancellationIT.java?ref=5a76944da050278b0dc557eb44d0eecda2062400",
      "patch": "@@ -281,7 +281,6 @@ public void testCancelMultiSearch() throws Exception {\n         }\n     }\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/63976\")\n     public void testCancelFailedSearchWhenPartialResultDisallowed() throws Exception {\n         final List<ScriptedBlockPlugin> plugins = initBlockFactory();\n         int numberOfShards = between(2, 5);\n@@ -325,8 +324,12 @@ public void testCancelFailedSearchWhenPartialResultDisallowed() throws Exception\n             queryLatch.countDown();\n             assertBusy(() -> {\n                 final List<SearchTask> searchTasks = getSearchTasks();\n-                assertThat(searchTasks, hasSize(1));\n-                assertTrue(searchTasks.get(0).isCancelled());\n+                // The search request can complete before the \"cancelledLatch\" is latched if the second shard request is sent\n+                // after the request was cancelled (i.e., the child task is not allowed to start after the parent was cancelled).\n+                if (searchTasks.isEmpty() == false) {\n+                    assertThat(searchTasks, hasSize(1));\n+                    assertTrue(searchTasks.get(0).isCancelled());\n+                }\n             }, 30, TimeUnit.SECONDS);\n         } finally {\n             for (ScriptedBlockPlugin plugin : plugins) {",
      "parent_sha": "ef4ea4ae1030f2ca6dc55e7011bd3397512a32a5"
    }
  },
  {
    "oid": "6efc17561695dcdd3b6eb3afa7704a9ebe4b258e",
    "message": "Simplify boostrap shutdown (#87581)\n\nThe shutdown hook registered in bootstrap is run when the JVM is\r\nshutting down. An almost identical method, stop(), exists for a special\r\nWindows case that can skip shutdown hooks. This commit consolidates the\r\ntwo into a new shutdown() method used for both. Additionally, the flag\r\nfor determining whether the shutdown hook should be added in bootstrap\r\nsetup was always true, so it is removed.",
    "date": "2022-06-13T16:45:32Z",
    "url": "https://github.com/elastic/elasticsearch/commit/6efc17561695dcdd3b6eb3afa7704a9ebe4b258e",
    "details": {
      "sha": "08336fbd920917f8d84b8686fefa4da2072a8bbb",
      "filename": "server/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java",
      "status": "modified",
      "additions": 16,
      "deletions": 33,
      "changes": 49,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/6efc17561695dcdd3b6eb3afa7704a9ebe4b258e/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fbootstrap%2FBootstrap.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/6efc17561695dcdd3b6eb3afa7704a9ebe4b258e/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fbootstrap%2FBootstrap.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fbootstrap%2FBootstrap.java?ref=6efc17561695dcdd3b6eb3afa7704a9ebe4b258e",
      "patch": "@@ -120,10 +120,8 @@ static void initializeNatives(final Path tmpFile, final boolean mlockAll, final\n                 public boolean handle(int code) {\n                     if (CTRL_CLOSE_EVENT == code) {\n                         logger.info(\"running graceful exit on windows\");\n-                        try {\n-                            Bootstrap.stop();\n-                        } catch (IOException e) {\n-                            throw new ElasticsearchException(\"failed to stop node\", e);\n+                        if (Bootstrap.INSTANCE != null) {\n+                            Bootstrap.INSTANCE.shutdown();\n                         }\n                         return true;\n                     }\n@@ -158,7 +156,7 @@ static void initializeProbes() {\n         HotThreads.initializeRuntimeMonitoring();\n     }\n \n-    private void setup(boolean addShutdownHook, Environment environment, Path pidFile) throws BootstrapException {\n+    private void setup(Environment environment, Path pidFile) throws BootstrapException {\n         Settings settings = environment.settings();\n \n         try {\n@@ -182,28 +180,7 @@ private void setup(boolean addShutdownHook, Environment environment, Path pidFil\n         // initialize probes before the security manager is installed\n         initializeProbes();\n \n-        if (addShutdownHook) {\n-            Runtime.getRuntime().addShutdownHook(new Thread() {\n-                @Override\n-                public void run() {\n-                    try {\n-                        IOUtils.close(node, spawner);\n-                        LoggerContext context = (LoggerContext) LogManager.getContext(false);\n-                        Configurator.shutdown(context);\n-                        if (node != null && node.awaitClose(10, TimeUnit.SECONDS) == false) {\n-                            throw new IllegalStateException(\n-                                \"Node didn't stop within 10 seconds. \" + \"Any outstanding requests or tasks might get killed.\"\n-                            );\n-                        }\n-                    } catch (IOException ex) {\n-                        throw new ElasticsearchException(\"failed to stop node\", ex);\n-                    } catch (InterruptedException e) {\n-                        LogManager.getLogger(Bootstrap.class).warn(\"Thread got interrupted while waiting for the node to shutdown.\");\n-                        Thread.currentThread().interrupt();\n-                    }\n-                }\n-            });\n-        }\n+        Runtime.getRuntime().addShutdownHook(new Thread(this::shutdown));\n \n         try {\n             // look for jar hell\n@@ -261,17 +238,23 @@ private void start() throws NodeValidationException {\n         keepAliveThread.start();\n     }\n \n-    static void stop() throws IOException {\n+    private void shutdown() {\n         try {\n-            IOUtils.close(INSTANCE.node, INSTANCE.spawner);\n-            if (INSTANCE.node != null && INSTANCE.node.awaitClose(10, TimeUnit.SECONDS) == false) {\n-                throw new IllegalStateException(\"Node didn't stop within 10 seconds. Any outstanding requests or tasks might get killed.\");\n+            IOUtils.close(node, spawner);\n+            LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+            Configurator.shutdown(context);\n+            if (node != null && node.awaitClose(10, TimeUnit.SECONDS) == false) {\n+                throw new IllegalStateException(\n+                    \"Node didn't stop within 10 seconds. \" + \"Any outstanding requests or tasks might get killed.\"\n+                );\n             }\n+        } catch (IOException ex) {\n+            throw new ElasticsearchException(\"failed to stop node\", ex);\n         } catch (InterruptedException e) {\n             LogManager.getLogger(Bootstrap.class).warn(\"Thread got interrupted while waiting for the node to shutdown.\");\n             Thread.currentThread().interrupt();\n         } finally {\n-            INSTANCE.keepAliveLatch.countDown();\n+            keepAliveLatch.countDown();\n         }\n     }\n \n@@ -295,7 +278,7 @@ static void init(final boolean foreground, final Environment initialEnv, SecureS\n             // setDefaultUncaughtExceptionHandler\n             Thread.setDefaultUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler());\n \n-            INSTANCE.setup(true, environment, pidFile);\n+            INSTANCE.setup(environment, pidFile);\n \n             try {\n                 // any secure settings must be read during node construction",
      "parent_sha": "60efb9d0e7dc1bf8ce0db5e7f220b9dee00297c8"
    }
  },
  {
    "oid": "43a95de9db682be97d45da0ef3078a5336fb5606",
    "message": "dynamic flag on object type should lower case itself when serialized back to its json representation",
    "date": "2011-02-08T09:38:02Z",
    "url": "https://github.com/elastic/elasticsearch/commit/43a95de9db682be97d45da0ef3078a5336fb5606",
    "details": {
      "sha": "0c33847eca00903aa08e05640d4795a08d42e7c8",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ObjectMapper.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/43a95de9db682be97d45da0ef3078a5336fb5606/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FObjectMapper.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/43a95de9db682be97d45da0ef3078a5336fb5606/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FObjectMapper.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fxcontent%2FObjectMapper.java?ref=43a95de9db682be97d45da0ef3078a5336fb5606",
      "patch": "@@ -140,7 +140,7 @@ public static class TypeParser implements XContentMapper.TypeParser {\n \n                 if (fieldName.equals(\"dynamic\")) {\n                     String value = fieldNode.toString();\n-                    if (value.equals(\"strict\")) {\n+                    if (value.equalsIgnoreCase(\"strict\")) {\n                         builder.dynamic(Dynamic.STRICT);\n                     } else {\n                         builder.dynamic(nodeBooleanValue(fieldNode) ? Dynamic.TRUE : Dynamic.FALSE);\n@@ -590,11 +590,11 @@ public void toXContent(XContentBuilder builder, Params params, ToXContent custom\n         // inherit the root behavior\n         if (this instanceof RootObjectMapper) {\n             if (dynamic != Dynamic.TRUE) {\n-                builder.field(\"dynamic\", dynamic);\n+                builder.field(\"dynamic\", dynamic.name().toLowerCase());\n             }\n         } else {\n             if (dynamic != Defaults.DYNAMIC) {\n-                builder.field(\"dynamic\", dynamic);\n+                builder.field(\"dynamic\", dynamic.name().toLowerCase());\n             }\n         }\n         if (enabled != Defaults.ENABLED) {",
      "parent_sha": "05283c7f6dae821570e006e722614eb44a984547"
    }
  },
  {
    "oid": "7719dcd79054332b6e7e9d5116769d62503f9319",
    "message": "add an option to provide the array of ranges \"on\" the field name itself",
    "date": "2010-08-02T15:09:26Z",
    "url": "https://github.com/elastic/elasticsearch/commit/7719dcd79054332b6e7e9d5116769d62503f9319",
    "details": {
      "sha": "f6890d0bde0dff48fac4d32c13eb85cbc5d4de65",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/range/RangeFacetCollectorParser.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/7719dcd79054332b6e7e9d5116769d62503f9319/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Ffacets%2Frange%2FRangeFacetCollectorParser.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/7719dcd79054332b6e7e9d5116769d62503f9319/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Ffacets%2Frange%2FRangeFacetCollectorParser.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Ffacets%2Frange%2FRangeFacetCollectorParser.java?ref=7719dcd79054332b6e7e9d5116769d62503f9319",
      "patch": "@@ -56,6 +56,10 @@ public class RangeFacetCollectorParser implements FacetCollectorParser {\n             if (token == XContentParser.Token.FIELD_NAME) {\n                 fieldName = parser.currentName();\n             } else if (token == XContentParser.Token.START_ARRAY) {\n+                if (!\"ranges\".equals(fieldName)) {\n+                    // this is the actual field name, so also update the keyField\n+                    keyField = fieldName;\n+                }\n                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n                     RangeFacet.Entry entry = new RangeFacet.Entry();\n                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n@@ -77,10 +81,6 @@ public class RangeFacetCollectorParser implements FacetCollectorParser {\n                     }\n                     entries.add(entry);\n                 }\n-                if (!\"ranges\".equals(fieldName)) {\n-                    // this is the actual field name, so also update the keyField\n-                    keyField = fieldName;\n-                }\n             } else if (token == XContentParser.Token.START_OBJECT) {\n                 if (\"params\".equals(fieldName)) {\n                     params = parser.map();",
      "parent_sha": "99af6df0ea9083495d1620ef588cc0b655c0812d"
    }
  },
  {
    "oid": "03e53e8a95859b3bb14ccf60f76f85726b55fe7d",
    "message": "Cacheability improvements for thirdparty audit task (#42085)",
    "date": "2019-05-15T05:10:31Z",
    "url": "https://github.com/elastic/elasticsearch/commit/03e53e8a95859b3bb14ccf60f76f85726b55fe7d",
    "details": {
      "sha": "e73a9d1e585e372f5f621ff7bbf00ef361f6ad61",
      "filename": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.java",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/03e53e8a95859b3bb14ccf60f76f85726b55fe7d/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgradle%2Fprecommit%2FThirdPartyAuditTask.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/03e53e8a95859b3bb14ccf60f76f85726b55fe7d/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgradle%2Fprecommit%2FThirdPartyAuditTask.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgradle%2Fprecommit%2FThirdPartyAuditTask.java?ref=03e53e8a95859b3bb14ccf60f76f85726b55fe7d",
      "patch": "@@ -28,11 +28,13 @@\n import org.gradle.api.file.FileTree;\n import org.gradle.api.specs.Spec;\n import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n import org.gradle.api.tasks.Input;\n import org.gradle.api.tasks.InputFile;\n import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.Internal;\n import org.gradle.api.tasks.Optional;\n-import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.OutputFile;\n import org.gradle.api.tasks.PathSensitive;\n import org.gradle.api.tasks.PathSensitivity;\n import org.gradle.api.tasks.SkipWhenEmpty;\n@@ -45,6 +47,7 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Set;\n@@ -113,14 +116,19 @@ public void setJavaHome(String javaHome) {\n         this.javaHome = javaHome;\n     }\n \n-    @OutputDirectory\n+    @Internal\n     public File getJarExpandDir() {\n         return new File(\n             new File(getProject().getBuildDir(), \"precommit/thirdPartyAudit\"),\n             getName()\n         );\n     }\n \n+    @OutputFile\n+    public File getSuccessMarker() {\n+        return new File(getProject().getBuildDir(), \"markers/\" + getName());\n+    }\n+\n     public void ignoreMissingClasses(String... classesOrPackages) {\n         if (classesOrPackages.length == 0) {\n             missingClassExcludes = null;\n@@ -157,8 +165,7 @@ public Set<String> getMissingClassExcludes() {\n         return missingClassExcludes;\n     }\n \n-    @InputFiles\n-    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @Classpath\n     @SkipWhenEmpty\n     public Set<File> getJarsToScan() {\n         // These are SelfResolvingDependency, and some of them backed by file collections, like  the Gradle API files,\n@@ -241,6 +248,10 @@ public void runThirdPartyAudit() throws IOException {\n         }\n \n         assertNoJarHell(jdkJarHellClasses);\n+\n+        // Mark successful third party audit check\n+        getSuccessMarker().getParentFile().mkdirs();\n+        Files.write(getSuccessMarker().toPath(), new byte[]{});\n     }\n \n     private void logForbiddenAPIsOutput(String forbiddenApisOutput) {",
      "parent_sha": "c59da59b4b97b9d424574f0e4ebc1c01612642d1"
    }
  },
  {
    "oid": "899394daa5a2d33e19c8df71625e6f31fcc62a3b",
    "message": "Don't use TypeField for nested filters (#44482)\n\nWe changed things in #27469 to filter parent docs by using an exists query on the \r\nprimary_term field. However, the equivalent query for nested documents is still using \r\nthe type field. This commit makes newNestedFilter build the complement of \r\nnewNonNestedFilter instead.",
    "date": "2019-07-29T09:22:37Z",
    "url": "https://github.com/elastic/elasticsearch/commit/899394daa5a2d33e19c8df71625e6f31fcc62a3b",
    "details": {
      "sha": "b26324219f9cd4efd83ae59eea85e91496d4761e",
      "filename": "server/src/main/java/org/elasticsearch/common/lucene/search/Queries.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/899394daa5a2d33e19c8df71625e6f31fcc62a3b/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Flucene%2Fsearch%2FQueries.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/899394daa5a2d33e19c8df71625e6f31fcc62a3b/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Flucene%2Fsearch%2FQueries.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Flucene%2Fsearch%2FQueries.java?ref=899394daa5a2d33e19c8df71625e6f31fcc62a3b",
      "patch": "@@ -19,20 +19,16 @@\n \n package org.elasticsearch.common.lucene.search;\n \n-import org.apache.lucene.index.Term;\n import org.apache.lucene.search.BooleanClause;\n import org.apache.lucene.search.BooleanClause.Occur;\n import org.apache.lucene.search.BooleanQuery;\n import org.apache.lucene.search.DocValuesFieldExistsQuery;\n import org.apache.lucene.search.MatchAllDocsQuery;\n import org.apache.lucene.search.MatchNoDocsQuery;\n-import org.apache.lucene.search.PrefixQuery;\n import org.apache.lucene.search.Query;\n-import org.apache.lucene.util.BytesRef;\n import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.common.Nullable;\n import org.elasticsearch.index.mapper.SeqNoFieldMapper;\n-import org.elasticsearch.index.mapper.TypeFieldMapper;\n \n import java.util.Collection;\n import java.util.Collections;\n@@ -65,7 +61,7 @@ public static Query newLenientFieldQuery(String field, RuntimeException e) {\n     }\n \n     public static Query newNestedFilter() {\n-        return new PrefixQuery(new Term(TypeFieldMapper.NAME, new BytesRef(\"__\")));\n+        return not(newNonNestedFilter());\n     }\n \n     /**",
      "parent_sha": "94962b378632fe58adca65ec831a466d237d0f70"
    }
  },
  {
    "oid": "b37508430565a482bf24ece6a2aacadb7fdbcd62",
    "message": "Tests: Correction in AbstractQueryTestCase\n\nRemoved check that two query builder that are different according\nto equals() have different hashCode since that is not required\nby the contract of hashCode.",
    "date": "2015-11-27T16:36:57Z",
    "url": "https://github.com/elastic/elasticsearch/commit/b37508430565a482bf24ece6a2aacadb7fdbcd62",
    "details": {
      "sha": "f64dc1a55de6ecead0c0383275446b928fecab37",
      "filename": "core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/b37508430565a482bf24ece6a2aacadb7fdbcd62/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fquery%2FAbstractQueryTestCase.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/b37508430565a482bf24ece6a2aacadb7fdbcd62/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fquery%2FAbstractQueryTestCase.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fquery%2FAbstractQueryTestCase.java?ref=b37508430565a482bf24ece6a2aacadb7fdbcd62",
      "patch": "@@ -641,7 +641,6 @@ public void testEqualsAndHashcode() throws IOException {\n                 secondQuery.boost(firstQuery.boost() + 1f + randomFloat());\n             }\n             assertThat(\"different queries should not be equal\", secondQuery, not(equalTo(firstQuery)));\n-            assertThat(\"different queries should have different hashcode\", secondQuery.hashCode(), not(equalTo(firstQuery.hashCode())));\n         }\n     }\n \n@@ -897,7 +896,7 @@ public static void checkGeneratedJson(String expected, QueryBuilder<?> source) t\n                 msg(expected, builder.string()),\n                 expected.replaceAll(\"\\\\s+\",\"\"),\n                 builder.string().replaceAll(\"\\\\s+\",\"\"));\n-    }    \n+    }\n \n     private static String msg(String left, String right) {\n         int size = Math.min(left.length(), right.length());",
      "parent_sha": "2f87e0a4d9b414efe3c7ab5aa35a1112a0b963a5"
    }
  },
  {
    "oid": "2f5dd85bd5616eec963c5fc8befdc8eaefa50ae8",
    "message": "change handlers from CHM to volatile Immutable Map",
    "date": "2011-02-16T03:24:29Z",
    "url": "https://github.com/elastic/elasticsearch/commit/2f5dd85bd5616eec963c5fc8befdc8eaefa50ae8",
    "details": {
      "sha": "9c489728685d125155399321f1a4924f88251688",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportService.java",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/2f5dd85bd5616eec963c5fc8befdc8eaefa50ae8/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftransport%2FTransportService.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/2f5dd85bd5616eec963c5fc8befdc8eaefa50ae8/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftransport%2FTransportService.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Ftransport%2FTransportService.java?ref=2f5dd85bd5616eec963c5fc8befdc8eaefa50ae8",
      "patch": "@@ -21,6 +21,8 @@\n \n import org.elasticsearch.ElasticSearchException;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.collect.ImmutableMap;\n+import org.elasticsearch.common.collect.MapBuilder;\n import org.elasticsearch.common.component.AbstractLifecycleComponent;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.common.io.stream.Streamable;\n@@ -34,13 +36,11 @@\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.atomic.AtomicLong;\n \n import static org.elasticsearch.common.settings.ImmutableSettings.Builder.*;\n-import static org.elasticsearch.common.util.concurrent.ConcurrentCollections.*;\n \n /**\n  * @author kimchy (shay.banon)\n@@ -51,7 +51,8 @@ public class TransportService extends AbstractLifecycleComponent<TransportServic\n \n     private final ThreadPool threadPool;\n \n-    final ConcurrentMap<String, TransportRequestHandler> serverHandlers = newConcurrentMap();\n+    volatile ImmutableMap<String, TransportRequestHandler> serverHandlers = ImmutableMap.of();\n+    final Object serverHandlersMutex = new Object();\n \n     final ConcurrentMapLong<RequestHolder> clientHandlers = ConcurrentCollections.newConcurrentMapLong();\n \n@@ -212,14 +213,19 @@ public void registerHandler(ActionTransportRequestHandler handler) {\n     }\n \n     public void registerHandler(String action, TransportRequestHandler handler) {\n-        TransportRequestHandler handlerReplaced = serverHandlers.put(action, handler);\n-        if (handlerReplaced != null) {\n-            logger.warn(\"Registered two transport handlers for action {}, handlers: {}, {}\", action, handler, handlerReplaced);\n+        synchronized (serverHandlersMutex) {\n+            TransportRequestHandler handlerReplaced = serverHandlers.get(action);\n+            serverHandlers = MapBuilder.newMapBuilder(serverHandlers).put(action, handler).immutableMap();\n+            if (handlerReplaced != null) {\n+                logger.warn(\"Registered two transport handlers for action {}, handlers: {}, {}\", action, handler, handlerReplaced);\n+            }\n         }\n     }\n \n     public void removeHandler(String action) {\n-        serverHandlers.remove(action);\n+        synchronized (serverHandlersMutex) {\n+            serverHandlers = MapBuilder.newMapBuilder(serverHandlers).remove(action).immutableMap();\n+        }\n     }\n \n     class Adapter implements TransportServiceAdapter {",
      "parent_sha": "3679efa84037249aff17439552ece0959d685665"
    }
  },
  {
    "oid": "eae83fd57baeed68cdf90264f6722bdce563d2fc",
    "message": "Adjust testWaitForPendingSeqNo (#39404)\n\nSince #39006, we should either remove `testWaitForPendingSeqNo` \r\nor adjust it not to wait for the pending operations. This change picks \r\nthe latter.\r\n\r\nRelates #39006",
    "date": "2019-02-26T20:51:11Z",
    "url": "https://github.com/elastic/elasticsearch/commit/eae83fd57baeed68cdf90264f6722bdce563d2fc",
    "details": {
      "sha": "e387ecaca3d24119efb85ef149443f041b5b18fb",
      "filename": "server/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 18,
      "changes": 20,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/eae83fd57baeed68cdf90264f6722bdce563d2fc/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Freplication%2FRecoveryDuringReplicationTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/eae83fd57baeed68cdf90264f6722bdce563d2fc/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Freplication%2FRecoveryDuringReplicationTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Freplication%2FRecoveryDuringReplicationTests.java?ref=eae83fd57baeed68cdf90264f6722bdce563d2fc",
      "patch": "@@ -75,15 +75,13 @@\n import java.util.stream.Collectors;\n \n import static org.hamcrest.Matchers.anyOf;\n-import static org.hamcrest.Matchers.both;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.everyItem;\n import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.isIn;\n import static org.hamcrest.Matchers.lessThan;\n-import static org.hamcrest.Matchers.lessThanOrEqualTo;\n import static org.hamcrest.Matchers.not;\n \n public class RecoveryDuringReplicationTests extends ESIndexLevelReplicationTestCase {\n@@ -440,17 +438,7 @@ public void testResyncAfterPrimaryPromotion() throws Exception {\n         }\n     }\n \n-    @TestLogging(\n-            \"_root:DEBUG,\"\n-                    + \"org.elasticsearch.action.bulk:TRACE,\"\n-                    + \"org.elasticsearch.action.get:TRACE,\"\n-                    + \"org.elasticsearch.cluster.service:TRACE,\"\n-                    + \"org.elasticsearch.discovery:TRACE,\"\n-                    + \"org.elasticsearch.indices.cluster:TRACE,\"\n-                    + \"org.elasticsearch.indices.recovery:TRACE,\"\n-                    + \"org.elasticsearch.index.seqno:TRACE,\"\n-                    + \"org.elasticsearch.index.shard:TRACE\")\n-    public void testWaitForPendingSeqNo() throws Exception {\n+    public void testDoNotWaitForPendingSeqNo() throws Exception {\n         IndexMetaData metaData = buildIndexMetaData(1);\n \n         final int pendingDocs = randomIntBetween(1, 5);\n@@ -524,7 +512,7 @@ public void indexTranslogOperations(\n             final int indexedDuringRecovery = shards.indexDocs(randomInt(5));\n             docs += indexedDuringRecovery;\n \n-            assertFalse(\"recovery should wait on pending docs\", opsSent.get());\n+            assertBusy(() -> assertFalse(\"recovery should not wait for on pending docs\", opsSent.get()));\n \n             primaryEngineFactory.releaseLatchedIndexers();\n             pendingDocsDone.await();\n@@ -533,10 +521,6 @@ public void indexTranslogOperations(\n             recoveryFuture.get();\n \n             assertThat(newReplica.recoveryState().getIndex().fileDetails(), empty());\n-            assertThat(newReplica.recoveryState().getTranslog().recoveredOperations(),\n-                // we don't know which of the inflight operations made it into the translog range we re-play\n-                both(greaterThanOrEqualTo(docs-indexedDuringRecovery)).and(lessThanOrEqualTo(docs)));\n-\n             shards.assertAllEqual(docs);\n         } finally {\n             primaryEngineFactory.close();",
      "parent_sha": "c7769fdcefaf3ff9a405ce61c5f1a18029799ae2"
    }
  },
  {
    "oid": "fa85d045238916c506193423a60187fa8e2082dc",
    "message": "Marvel: update client after move of renderSearchTemplate methods\n\nOriginal commit: elastic/x-pack-elasticsearch@7713f2fc721a50294abaed24ebd861fea2fc9e3c",
    "date": "2015-10-08T15:11:09Z",
    "url": "https://github.com/elastic/elasticsearch/commit/fa85d045238916c506193423a60187fa8e2082dc",
    "details": {
      "sha": "3e7904fc7eda9db87ef67cabda030a72e03ea80d",
      "filename": "marvel/src/main/java/org/elasticsearch/marvel/shield/SecuredClient.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/fa85d045238916c506193423a60187fa8e2082dc/marvel%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fmarvel%2Fshield%2FSecuredClient.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/fa85d045238916c506193423a60187fa8e2082dc/marvel%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fmarvel%2Fshield%2FSecuredClient.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/marvel%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fmarvel%2Fshield%2FSecuredClient.java?ref=fa85d045238916c506193423a60187fa8e2082dc",
      "patch": "@@ -1047,18 +1047,6 @@ public ValidateQueryRequestBuilder prepareValidateQuery(String... indices) {\n             return new ValidateQueryRequestBuilder(this, ValidateQueryAction.INSTANCE).setIndices(indices);\n         }\n \n-        public ActionFuture<RenderSearchTemplateResponse> renderSearchTemplate(RenderSearchTemplateRequest request) {\n-            return this.execute(RenderSearchTemplateAction.INSTANCE, request);\n-        }\n-\n-        public void renderSearchTemplate(RenderSearchTemplateRequest request, ActionListener<RenderSearchTemplateResponse> listener) {\n-            this.execute(RenderSearchTemplateAction.INSTANCE, request, listener);\n-        }\n-\n-        public RenderSearchTemplateRequestBuilder prepareRenderSearchTemplate() {\n-            return new RenderSearchTemplateRequestBuilder(this, RenderSearchTemplateAction.INSTANCE);\n-        }\n-\n         public ActionFuture<PutWarmerResponse> putWarmer(PutWarmerRequest request) {\n             return this.execute(PutWarmerAction.INSTANCE, request);\n         }\n@@ -1370,6 +1358,18 @@ public SnapshotsStatusRequestBuilder prepareSnapshotStatus(String repository) {\n         public SnapshotsStatusRequestBuilder prepareSnapshotStatus() {\n             return new SnapshotsStatusRequestBuilder(this, SnapshotsStatusAction.INSTANCE);\n         }\n+\n+        public ActionFuture<RenderSearchTemplateResponse> renderSearchTemplate(RenderSearchTemplateRequest request) {\n+            return this.execute(RenderSearchTemplateAction.INSTANCE, request);\n+        }\n+\n+        public void renderSearchTemplate(RenderSearchTemplateRequest request, ActionListener<RenderSearchTemplateResponse> listener) {\n+            this.execute(RenderSearchTemplateAction.INSTANCE, request, listener);\n+        }\n+\n+        public RenderSearchTemplateRequestBuilder prepareRenderSearchTemplate() {\n+            return new RenderSearchTemplateRequestBuilder(this, RenderSearchTemplateAction.INSTANCE);\n+        }\n     }\n \n     static class Admin implements AdminClient {",
      "parent_sha": "e589d2e46e61d15059a8465d7cad9ce6849c174e"
    }
  },
  {
    "oid": "8b21ccd0eac3b3d0fbd090152b3dff6ae5217b52",
    "message": "EQL: fix QueryFolderOkTests (#56714)",
    "date": "2020-05-14T00:02:42Z",
    "url": "https://github.com/elastic/elasticsearch/commit/8b21ccd0eac3b3d0fbd090152b3dff6ae5217b52",
    "details": {
      "sha": "835181bdb408b32abf861d94c0ae3100de1e7adc",
      "filename": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/8b21ccd0eac3b3d0fbd090152b3dff6ae5217b52/x-pack%2Fplugin%2Feql%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Feql%2Fplanner%2FQueryFolderOkTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/8b21ccd0eac3b3d0fbd090152b3dff6ae5217b52/x-pack%2Fplugin%2Feql%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Feql%2Fplanner%2FQueryFolderOkTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Feql%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Feql%2Fplanner%2FQueryFolderOkTests.java?ref=8b21ccd0eac3b3d0fbd090152b3dff6ae5217b52",
      "patch": "@@ -110,9 +110,11 @@ private static void addSpec(ArrayList<Object[]> arr, String name, String query,\n     }\n \n     public void test() {\n+        String testName = name.toLowerCase(Locale.ROOT);\n         // skip tests that do not make sense from case sensitivity point of view\n-        boolean isCaseSensitiveValidTest = name.toLowerCase(Locale.ROOT).endsWith(\"-casesensitive\") && configuration.isCaseSensitive()\n-            || name.toLowerCase(Locale.ROOT).endsWith(\"-caseinsensitive\") && configuration.isCaseSensitive() == false;\n+        boolean isCaseSensitiveValidTest = testName.endsWith(\"sensitive\") == false\n+            || testName.endsWith(\"-casesensitive\") && configuration.isCaseSensitive()\n+            || testName.endsWith(\"-caseinsensitive\") && configuration.isCaseSensitive() == false;\n         Assume.assumeTrue(isCaseSensitiveValidTest);\n \n         PhysicalPlan p = plan(query);",
      "parent_sha": "595ce8b5e3719cad977a501cd39bd2c3fa720771"
    }
  },
  {
    "oid": "a7752a3d44cf1ffa792b3c8a4de48fd662152d3a",
    "message": "only return deprecation warning for elser service (#114507)\n\nCo-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>",
    "date": "2024-10-14T19:31:24Z",
    "url": "https://github.com/elastic/elasticsearch/commit/a7752a3d44cf1ffa792b3c8a4de48fd662152d3a",
    "details": {
      "sha": "8b3436a2f4fb76cc68a2d7b5c97552f257e05d52",
      "filename": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/elasticsearch/ElasticsearchInternalService.java",
      "status": "modified",
      "additions": 14,
      "deletions": 9,
      "changes": 23,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/a7752a3d44cf1ffa792b3c8a4de48fd662152d3a/x-pack%2Fplugin%2Finference%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Finference%2Fservices%2Felasticsearch%2FElasticsearchInternalService.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/a7752a3d44cf1ffa792b3c8a4de48fd662152d3a/x-pack%2Fplugin%2Finference%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Finference%2Fservices%2Felasticsearch%2FElasticsearchInternalService.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Finference%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Finference%2Fservices%2Felasticsearch%2FElasticsearchInternalService.java?ref=a7752a3d44cf1ffa792b3c8a4de48fd662152d3a",
      "patch": "@@ -152,6 +152,7 @@ public void parseRequestConfig(\n                                 config,\n                                 preferredModelVariant,\n                                 serviceSettingsMap,\n+                                true,\n                                 chunkingSettings,\n                                 modelListener\n                             )\n@@ -183,6 +184,7 @@ public void parseRequestConfig(\n                             config,\n                             preferredModelVariant,\n                             serviceSettingsMap,\n+                            OLD_ELSER_SERVICE_NAME.equals(serviceName),\n                             chunkingSettings,\n                             modelListener\n                         )\n@@ -342,6 +344,7 @@ private void elserCase(\n         Map<String, Object> config,\n         PreferredModelVariant preferredModelVariant,\n         Map<String, Object> serviceSettingsMap,\n+        boolean isElserService,\n         ChunkingSettings chunkingSettings,\n         ActionListener<Model> modelListener\n     ) {\n@@ -372,15 +375,17 @@ private void elserCase(\n             }\n         }\n \n-        DEPRECATION_LOGGER.warn(\n-            DeprecationCategory.API,\n-            \"inference_api_elser_service\",\n-            \"The [{}] service is deprecated and will be removed in a future release. Use the [{}] service instead, with\"\n-                + \" [model_id] set to [{}] in the [service_settings]\",\n-            OLD_ELSER_SERVICE_NAME,\n-            ElasticsearchInternalService.NAME,\n-            defaultModelId\n-        );\n+        if (isElserService) {\n+            DEPRECATION_LOGGER.warn(\n+                DeprecationCategory.API,\n+                \"inference_api_elser_service\",\n+                \"The [{}] service is deprecated and will be removed in a future release. Use the [{}] service instead, with\"\n+                    + \" [model_id] set to [{}] in the [service_settings]\",\n+                OLD_ELSER_SERVICE_NAME,\n+                ElasticsearchInternalService.NAME,\n+                defaultModelId\n+            );\n+        }\n \n         if (modelVariantDoesNotMatchArchitecturesAndIsNotPlatformAgnostic(preferredModelVariant, esServiceSettingsBuilder.getModelId())) {\n             throw new IllegalArgumentException(",
      "parent_sha": "255cbd6f6a3f0ad92433888cd732678765f4bc81"
    }
  },
  {
    "oid": "e5e21480d4294a7eeb8d296d59ca2ff668adb788",
    "message": "Fix exception assertions in MetaDataStateFormatTests.testLoadState\n\nGot broken with the change in #16850",
    "date": "2016-02-29T11:03:48Z",
    "url": "https://github.com/elastic/elasticsearch/commit/e5e21480d4294a7eeb8d296d59ca2ff668adb788",
    "details": {
      "sha": "623114fb77b085d79ee0f73ae36a780247f8d37a",
      "filename": "core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/e5e21480d4294a7eeb8d296d59ca2ff668adb788/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FMetaDataStateFormatTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/e5e21480d4294a7eeb8d296d59ca2ff668adb788/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FMetaDataStateFormatTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fgateway%2FMetaDataStateFormatTests.java?ref=e5e21480d4294a7eeb8d296d59ca2ff668adb788",
      "patch": "@@ -19,6 +19,7 @@\n package org.elasticsearch.gateway;\n \n import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.index.CorruptIndexException;\n import org.apache.lucene.store.ChecksumIndexInput;\n import org.apache.lucene.store.Directory;\n import org.apache.lucene.store.IOContext;\n@@ -27,6 +28,7 @@\n import org.apache.lucene.store.SimpleFSDirectory;\n import org.apache.lucene.util.LuceneTestCase;\n import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.ExceptionsHelper;\n import org.elasticsearch.Version;\n import org.elasticsearch.cluster.metadata.IndexMetaData;\n import org.elasticsearch.cluster.metadata.MetaData;\n@@ -59,7 +61,6 @@\n import java.util.stream.StreamSupport;\n \n import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.instanceOf;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.not;\n import static org.hamcrest.Matchers.notNullValue;\n@@ -377,7 +378,7 @@ public void testLoadState() throws IOException {\n                 format.loadLatestState(logger, dirList.toArray(new Path[0]));\n                 fail(\"latest version can not be read\");\n             } catch (ElasticsearchException ex) {\n-                assertThat(ex.getCause(), instanceOf(CorruptStateException.class));\n+                assertThat(ExceptionsHelper.unwrap(ex, CorruptIndexException.class), notNullValue());\n             }\n         }\n ",
      "parent_sha": "4602d8c0dc353501cf323472c83df7e6541da29f"
    }
  },
  {
    "oid": "e3b7b88756790712717301b34285a1bb2128bd2b",
    "message": "Fix compilation in Ecipse (#24391)\n\nEclipse doesn't allow extra semicolons after an import statement:\r\n```\r\nimport foo.Bar;;   // <-- syntax error!\r\n```\r\n\r\nHere is the Eclipse bug:\r\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=425140\r\nwhich the Eclipse folks closed as \"the spec doesn't allow these\r\nsemicolons so why should we?\" Which is fair. Here is the bug\r\nagainst javac for allowing them:\r\nhttps://bugs.openjdk.java.net/browse/JDK-8027682\r\nwhich hasn't been touched since 2013 without explanation. There\r\nis, however, a rather educations mailing list thread:\r\nhttp://mail.openjdk.java.net/pipermail/compiler-dev/2013-August/006956.html\r\n\r\nwhich contains gems like, \"In general, it is better/simpler to\r\nchange javac to conform to the spec. (Except when it is not.)\"\r\n\r\nI suspect the reason this hasn't been fixed is:\r\n```\r\nFWIW, if we change javac such that the set of programs accepted by javac\r\nis changed, we have an process (currently Oracle internal) to get\r\napproval for such a change.   So, we would not simply change javac on a\r\nwhim to meet the spec; we would at least have other eyes looking at the\r\nbehavioral change to determine if it is \"acceptable\".\r\n```\r\nfrom http://mail.openjdk.java.net/pipermail/compiler-dev/2013-August/006973.html",
    "date": "2017-04-28T13:52:14Z",
    "url": "https://github.com/elastic/elasticsearch/commit/e3b7b88756790712717301b34285a1bb2128bd2b",
    "details": {
      "sha": "9f802cc270adf1e844eb11085d4dec2a80a20ba1",
      "filename": "core/src/main/java/org/elasticsearch/discovery/TribeDiscovery.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/e3b7b88756790712717301b34285a1bb2128bd2b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fdiscovery%2FTribeDiscovery.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/e3b7b88756790712717301b34285a1bb2128bd2b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fdiscovery%2FTribeDiscovery.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fdiscovery%2FTribeDiscovery.java?ref=e3b7b88756790712717301b34285a1bb2128bd2b",
      "patch": "@@ -24,7 +24,7 @@\n import org.elasticsearch.cluster.block.ClusterBlocks;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n-import org.elasticsearch.cluster.service.ClusterApplier;;\n+import org.elasticsearch.cluster.service.ClusterApplier;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.discovery.single.SingleNodeDiscovery;",
      "parent_sha": "382a617d346ffdcd785e385bc1ec9fd542a0d454"
    }
  },
  {
    "oid": "43464311565a87a3ab2d5f0321f80cc9123dc33d",
    "message": "Tests: Ensure watcher is started in REST tests (elastic/x-pack-elasticsearch#1702)\n\nThis adds a check in the REST tests to ensure that\r\nwatcher is started, and if not, tries to start watcher.\r\n\r\nThis eliminates test failures where watcher was not in\r\nthe correct state due to other tests stopping watcher.\n\nOriginal commit: elastic/x-pack-elasticsearch@fc547d49b49decef23475b2bffcb9c5d9985f549",
    "date": "2017-06-14T06:34:09Z",
    "url": "https://github.com/elastic/elasticsearch/commit/43464311565a87a3ab2d5f0321f80cc9123dc33d",
    "details": {
      "sha": "375a71d97565841f0c0a730db920a84033f8b01c",
      "filename": "plugin/src/test/java/org/elasticsearch/xpack/test/rest/XPackRestIT.java",
      "status": "modified",
      "additions": 32,
      "deletions": 1,
      "changes": 33,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/43464311565a87a3ab2d5f0321f80cc9123dc33d/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Ftest%2Frest%2FXPackRestIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/43464311565a87a3ab2d5f0321f80cc9123dc33d/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Ftest%2Frest%2FXPackRestIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Ftest%2Frest%2FXPackRestIT.java?ref=43464311565a87a3ab2d5f0321f80cc9123dc33d",
      "patch": "@@ -33,6 +33,7 @@\n import static java.util.Collections.emptyMap;\n import static java.util.Collections.singletonList;\n import static java.util.Collections.singletonMap;\n+import static org.hamcrest.Matchers.is;\n \n /** Runs rest tests against external cluster */\n public class XPackRestIT extends XPackRestTestCase {\n@@ -56,6 +57,24 @@ public void waitForTemplates() throws Exception {\n                     response -> true,\n                     () -> \"Exception when waiting for [\" + template + \"] template to be created\");\n         }\n+\n+        // ensure watcher is started, so that a test can stop watcher and everything still works fine\n+        if (isWatcherTest()) {\n+            assertBusy(() -> {\n+                try {\n+                    ClientYamlTestResponse response =\n+                            getAdminExecutionContext().callApi(\"xpack.watcher.stats\", emptyMap(), emptyList(), emptyMap());\n+                    String state = (String) response.evaluate(\"stats.0.watcher_state\");\n+                    if (\"started\".equals(state) == false) {\n+                        getAdminExecutionContext().callApi(\"xpack.watcher.start\", emptyMap(), emptyList(), emptyMap());\n+                    }\n+                    // assertion required to exit the assertBusy lambda\n+                    assertThat(state, is(\"started\"));\n+                } catch (IOException e) {\n+                    throw new AssertionError(e);\n+                }\n+            });\n+        }\n     }\n \n     /**\n@@ -158,7 +177,9 @@ private void disableMonitoring() throws Exception {\n      * thing and could be moved into a general X-Pack method at some point).\n      */\n     private void clearMlState() throws Exception {\n-        new MlRestTestStateCleaner(logger, adminClient(), this).clearMlMetadata();\n+        if (isMachineLearningTest()) {\n+            new MlRestTestStateCleaner(logger, adminClient(), this).clearMlMetadata();\n+        }\n     }\n \n     /**\n@@ -201,4 +222,14 @@ private boolean isMonitoringTest() {\n         String testName = getTestName();\n         return testName != null && (testName.contains(\"=monitoring/\") || testName.contains(\"=monitoring\\\\\"));\n     }\n+\n+    private boolean isWatcherTest() {\n+        String testName = getTestName();\n+        return testName != null && (testName.contains(\"=watcher/\") || testName.contains(\"=watcher\\\\\"));\n+    }\n+\n+    private boolean isMachineLearningTest() {\n+        String testName = getTestName();\n+        return testName != null && (testName.contains(\"=ml/\") || testName.contains(\"=ml\\\\\"));\n+    }\n }",
      "parent_sha": "abe217ebc332acc231e049e69d80c8275664fcac"
    }
  },
  {
    "oid": "ac93195407c2acd268ef6bf145de243170ac4550",
    "message": "[TEST] Don't install xpack plugin as the test doesn't rely on it initializes the ml classes it tests on its own.\n\nOriginal commit: elastic/x-pack-elasticsearch@e505efcddbcd6d873bc96d9a9c1a4fbbe17bce3c",
    "date": "2017-03-01T08:32:34Z",
    "url": "https://github.com/elastic/elasticsearch/commit/ac93195407c2acd268ef6bf145de243170ac4550",
    "details": {
      "sha": "91abb33cbeb629e41f5aa17cd39931f97d4b3bb0",
      "filename": "plugin/src/test/java/org/elasticsearch/xpack/ml/integration/AutodetectResultProcessorIT.java",
      "status": "modified",
      "additions": 2,
      "deletions": 19,
      "changes": 21,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/ac93195407c2acd268ef6bf145de243170ac4550/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fintegration%2FAutodetectResultProcessorIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/ac93195407c2acd268ef6bf145de243170ac4550/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fintegration%2FAutodetectResultProcessorIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fml%2Fintegration%2FAutodetectResultProcessorIT.java?ref=ac93195407c2acd268ef6bf145de243170ac4550",
      "patch": "@@ -12,11 +12,8 @@\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.unit.TimeValue;\n import org.elasticsearch.common.xcontent.ToXContent;\n-import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESSingleNodeTestCase;\n import org.elasticsearch.threadpool.ThreadPool;\n-import org.elasticsearch.xpack.XPackPlugin;\n-import org.elasticsearch.xpack.XPackSettings;\n-import org.elasticsearch.xpack.XPackSingleNodeTestCase;\n import org.elasticsearch.xpack.ml.MachineLearningTemplateRegistry;\n import org.elasticsearch.xpack.ml.action.util.QueryPage;\n import org.elasticsearch.xpack.ml.job.persistence.BucketsQueryBuilder;\n@@ -45,7 +42,6 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n import java.util.EnumSet;\n@@ -63,7 +59,7 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class AutodetectResultProcessorIT extends XPackSingleNodeTestCase {\n+public class AutodetectResultProcessorIT extends ESSingleNodeTestCase {\n     private static final String JOB_ID = \"foo\";\n \n     private Renormalizer renormalizer;\n@@ -72,19 +68,6 @@ public class AutodetectResultProcessorIT extends XPackSingleNodeTestCase {\n     private List<ModelSnapshot> capturedUpdateModelSnapshotOnJobRequests;\n     private AutoDetectResultProcessor resultProcessor;\n \n-    @Override\n-    protected Settings nodeSettings() {\n-        return Settings.builder().put(super.nodeSettings())\n-                .put(super.nodeSettings())\n-                .put(XPackSettings.SECURITY_ENABLED.getKey(), false)\n-                .build();\n-    }\n-\n-    @Override\n-    protected Collection<Class<? extends Plugin>> getPlugins() {\n-        return Collections.singleton(XPackPlugin.class);\n-    }\n-\n     @Before\n     public void createComponents() {\n         renormalizer = new NoOpRenormalizer();",
      "parent_sha": "377c1ec2b42ee99540a57a8b7d168f084a72aff2"
    }
  },
  {
    "oid": "18a9ded8db167b69d345b98ca96eef02bba4c6f6",
    "message": "Fix Repository Cleanup Test Correctness (#44738)\n\n* The tests were creating the corruption and asserting its existence not on the repository base path but on a clean path.\r\nAs a result the consistency assertion on the repository wouldn't see the corruption ever an pass even if the cleanup was broken for repositories that have a non-root base path",
    "date": "2019-07-23T13:03:50Z",
    "url": "https://github.com/elastic/elasticsearch/commit/18a9ded8db167b69d345b98ca96eef02bba4c6f6",
    "details": {
      "sha": "a050153d0aa46dcae1af56ec871ebcd9b2a018bf",
      "filename": "test/framework/src/main/java/org/elasticsearch/repositories/AbstractThirdPartyRepositoryTestCase.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/18a9ded8db167b69d345b98ca96eef02bba4c6f6/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2FAbstractThirdPartyRepositoryTestCase.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/18a9ded8db167b69d345b98ca96eef02bba4c6f6/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2FAbstractThirdPartyRepositoryTestCase.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2FAbstractThirdPartyRepositoryTestCase.java?ref=18a9ded8db167b69d345b98ca96eef02bba4c6f6",
      "patch": "@@ -236,10 +236,10 @@ public void testCleanup() throws Exception {\n             @Override\n             protected void doRun() throws Exception {\n                 final BlobStore blobStore = repo.blobStore();\n-                blobStore.blobContainer(BlobPath.cleanPath().add(\"indices\").add(\"foo\"))\n+                blobStore.blobContainer(repo.basePath().add(\"indices\").add(\"foo\"))\n                     .writeBlob(\"bar\", new ByteArrayInputStream(new byte[0]), 0, false);\n                 for (String prefix : Arrays.asList(\"snap-\", \"meta-\")) {\n-                    blobStore.blobContainer(BlobPath.cleanPath())\n+                    blobStore.blobContainer(repo.basePath())\n                         .writeBlob(prefix + \"foo.dat\", new ByteArrayInputStream(new byte[0]), 0, false);\n                 }\n                 future.onResponse(null);\n@@ -260,10 +260,10 @@ protected boolean assertCorruptionVisible(BlobStoreRepository repo, Executor exe\n             protected void doRun() throws Exception {\n                 final BlobStore blobStore = repo.blobStore();\n                 future.onResponse(\n-                    blobStore.blobContainer(BlobPath.cleanPath().add(\"indices\")).children().containsKey(\"foo\")\n-                        && BlobStoreTestUtil.blobExists(blobStore.blobContainer(BlobPath.cleanPath().add(\"indices\").add(\"foo\")), \"bar\")\n-                        && BlobStoreTestUtil.blobExists(blobStore.blobContainer(BlobPath.cleanPath()), \"meta-foo.dat\")\n-                        && BlobStoreTestUtil.blobExists(blobStore.blobContainer(BlobPath.cleanPath()), \"snap-foo.dat\")\n+                    blobStore.blobContainer(repo.basePath().add(\"indices\")).children().containsKey(\"foo\")\n+                        && BlobStoreTestUtil.blobExists(blobStore.blobContainer(repo.basePath().add(\"indices\").add(\"foo\")), \"bar\")\n+                        && BlobStoreTestUtil.blobExists(blobStore.blobContainer(repo.basePath()), \"meta-foo.dat\")\n+                        && BlobStoreTestUtil.blobExists(blobStore.blobContainer(repo.basePath()), \"snap-foo.dat\")\n                 );\n             }\n         });",
      "parent_sha": "e22ce5af2a271bae6e7e03cc22f72afddfdf7558"
    }
  },
  {
    "oid": "cd82539e21e2a6de24d158dd9941fa62aa7c067b",
    "message": "Checking that watcher history index is green before querying it (#98014)",
    "date": "2023-08-01T14:06:37Z",
    "url": "https://github.com/elastic/elasticsearch/commit/cd82539e21e2a6de24d158dd9941fa62aa7c067b",
    "details": {
      "sha": "cc0490664ec84e83e16e7b905ed1b4d94d6079ed",
      "filename": "x-pack/plugin/watcher/src/internalClusterTest/java/org/elasticsearch/xpack/watcher/actions/TimeThrottleIntegrationTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/cd82539e21e2a6de24d158dd9941fa62aa7c067b/x-pack%2Fplugin%2Fwatcher%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fwatcher%2Factions%2FTimeThrottleIntegrationTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/cd82539e21e2a6de24d158dd9941fa62aa7c067b/x-pack%2Fplugin%2Fwatcher%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fwatcher%2Factions%2FTimeThrottleIntegrationTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fwatcher%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fwatcher%2Factions%2FTimeThrottleIntegrationTests.java?ref=cd82539e21e2a6de24d158dd9941fa62aa7c067b",
      "patch": "@@ -33,7 +33,6 @@\n \n public class TimeThrottleIntegrationTests extends AbstractWatcherIntegrationTestCase {\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/97518\")\n     public void testTimeThrottle() throws Exception {\n         String id = randomAlphaOfLength(20);\n         PutWatchResponse putWatchResponse = new PutWatchRequestBuilder(client()).setId(id)\n@@ -95,8 +94,8 @@ private void assertHistoryEntryThrottled(String id) throws Exception {\n \n     private void assertLatestHistoryEntry(String id, String expectedValue) throws Exception {\n         assertBusy(() -> {\n+            ensureGreen(HistoryStoreField.DATA_STREAM);\n             refresh(HistoryStoreField.DATA_STREAM + \"*\");\n-\n             SearchResponse searchResponse = client().prepareSearch(HistoryStoreField.DATA_STREAM + \"*\")\n                 .setSize(1)\n                 .setSource(new SearchSourceBuilder().query(QueryBuilders.boolQuery().must(termQuery(\"watch_id\", id))))",
      "parent_sha": "0454241c2278b8975771ee9bb5fe36f8476ccbc5"
    }
  },
  {
    "oid": "47aa01f5d19364b5ad6218811e95b5e95ba0227a",
    "message": "Improved highlight *manyDocs tests (fvh and postings) to have random refreshes, flushes and optimizes using indexRandom",
    "date": "2013-11-06T09:30:32Z",
    "url": "https://github.com/elastic/elasticsearch/commit/47aa01f5d19364b5ad6218811e95b5e95ba0227a",
    "details": {
      "sha": "397a065e3278b3c8f2deef39c5280896053428dc",
      "filename": "src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java",
      "status": "modified",
      "additions": 10,
      "deletions": 15,
      "changes": 25,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/47aa01f5d19364b5ad6218811e95b5e95ba0227a/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Fhighlight%2FHighlighterSearchTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/47aa01f5d19364b5ad6218811e95b5e95ba0227a/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Fhighlight%2FHighlighterSearchTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fsearch%2Fhighlight%2FHighlighterSearchTests.java?ref=47aa01f5d19364b5ad6218811e95b5e95ba0227a",
      "patch": "@@ -21,6 +21,7 @@\n \n import org.apache.lucene.util.LuceneTestCase.Slow;\n import org.elasticsearch.ElasticSearchException;\n+import org.elasticsearch.action.index.IndexRequestBuilder;\n import org.elasticsearch.action.search.SearchPhaseExecutionException;\n import org.elasticsearch.action.search.SearchRequestBuilder;\n import org.elasticsearch.action.search.SearchResponse;\n@@ -862,16 +863,12 @@ public void testFastVectorHighlighterManyDocs() throws Exception {\n         client().admin().cluster().prepareHealth(\"test\").setWaitForGreenStatus().execute().actionGet();\n \n         int COUNT = between(20, 100);\n-        logger.info(\"--> indexing docs\");\n+        IndexRequestBuilder[] indexRequestBuilders = new IndexRequestBuilder[COUNT];\n         for (int i = 0; i < COUNT; i++) {\n-            client().prepareIndex(\"test\", \"type1\", Integer.toString(i)).setSource(\"field1\", \"test \" + i).execute().actionGet();\n-            if (i % 5 == 0) {\n-                // flush so we get updated readers and segmented readers\n-                client().admin().indices().prepareFlush().execute().actionGet();\n-            }\n+            indexRequestBuilders[i] = client().prepareIndex(\"test\", \"type1\", Integer.toString(i)).setSource(\"field1\", \"test \" + i);\n         }\n-\n-        client().admin().indices().prepareRefresh().execute().actionGet();\n+        logger.info(\"--> indexing docs\");\n+        indexRandom(true, indexRequestBuilders);\n \n         logger.info(\"--> searching explicitly on field1 and highlighting on it\");\n         SearchResponse searchResponse = client().prepareSearch()\n@@ -2626,19 +2623,17 @@ public void testPostingsHighlighterManyDocs() throws Exception {\n         int COUNT = between(20, 100);\n         Map<String, String> prefixes = new HashMap<String, String>(COUNT);\n \n-        logger.info(\"--> indexing docs\");\n+        IndexRequestBuilder[] indexRequestBuilders = new IndexRequestBuilder[COUNT];\n         for (int i = 0; i < COUNT; i++) {\n             //generating text with word to highlight in a different position\n             //(https://github.com/elasticsearch/elasticsearch/issues/4103)\n             String prefix = randomAsciiOfLengthBetween(5, 30);\n             prefixes.put(String.valueOf(i), prefix);\n-            client().prepareIndex(\"test\", \"type1\", Integer.toString(i)).setSource(\"field1\", \"Sentence \" + prefix\n-                    + \" test. Sentence two.\").get();\n-            if (frequently()) {\n-                refresh();\n-            }\n+            indexRequestBuilders[i] = client().prepareIndex(\"test\", \"type1\", Integer.toString(i)).setSource(\"field1\", \"Sentence \" + prefix\n+                    + \" test. Sentence two.\");\n         }\n-        refresh();\n+        logger.info(\"--> indexing docs\");\n+        indexRandom(true, indexRequestBuilders);\n \n         logger.info(\"--> searching explicitly on field1 and highlighting on it\");\n         SearchResponse searchResponse = client().prepareSearch()",
      "parent_sha": "a3e355d40e2dd05ffbd7861d821e0d0116f32ced"
    }
  },
  {
    "oid": "dc34ccebfe7324e922b8d59139180383f50c103f",
    "message": "[Tests] assert indexRandom's deletion of injection dummy docs find them",
    "date": "2014-05-28T20:06:38Z",
    "url": "https://github.com/elastic/elasticsearch/commit/dc34ccebfe7324e922b8d59139180383f50c103f",
    "details": {
      "sha": "337b294fba01fd5955a185c75be69c40ebfb2e50",
      "filename": "src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/dc34ccebfe7324e922b8d59139180383f50c103f/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2FElasticsearchIntegrationTest.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/dc34ccebfe7324e922b8d59139180383f50c103f/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2FElasticsearchIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2FElasticsearchIntegrationTest.java?ref=dc34ccebfe7324e922b8d59139180383f50c103f",
      "patch": "@@ -1073,7 +1073,7 @@ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, List<Index\n         if (!bogusIds.isEmpty()) {\n            // delete the bogus types again - it might trigger merges or at least holes in the segments and enforces deleted docs!\n            for (Tuple<String, String> doc : bogusIds) {\n-               client().prepareDelete(doc.v1(), RANDOM_BOGUS_TYPE, doc.v2()).get();\n+               assertTrue(\"failed to delete a dummy doc\", client().prepareDelete(doc.v1(), RANDOM_BOGUS_TYPE, doc.v2()).get().isFound());\n            }\n         }\n         if (forceRefresh) {",
      "parent_sha": "328a7e513cacce2ab921753f3d86be4995b6657c"
    }
  },
  {
    "oid": "57b90cb6ce5a9e39db68a7e91d778fd45077c37a",
    "message": "rename local loop variable ingore->ignore",
    "date": "2016-08-10T08:17:54Z",
    "url": "https://github.com/elastic/elasticsearch/commit/57b90cb6ce5a9e39db68a7e91d778fd45077c37a",
    "details": {
      "sha": "90050db69b1cbf8a1bb0c2248271a18b40ddaeed",
      "filename": "core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/57b90cb6ce5a9e39db68a7e91d778fd45077c37a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Futil%2Fconcurrent%2FThreadContext.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/57b90cb6ce5a9e39db68a7e91d778fd45077c37a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Futil%2Fconcurrent%2FThreadContext.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Futil%2Fconcurrent%2FThreadContext.java?ref=57b90cb6ce5a9e39db68a7e91d778fd45077c37a",
      "patch": "@@ -444,7 +444,7 @@ class ContextPreservingRunnable implements Runnable {\n         @Override\n         public void run() {\n             boolean whileRunning = false;\n-            try (ThreadContext.StoredContext ingore = stashContext()){\n+            try (ThreadContext.StoredContext ignore = stashContext()){\n                 ctx.restore();\n                 whileRunning = true;\n                 in.run();\n@@ -504,7 +504,7 @@ public void onRejection(Exception e) {\n         @Override\n         protected void doRun() throws Exception {\n             boolean whileRunning = false;\n-            try (ThreadContext.StoredContext ingore = stashContext()){\n+            try (ThreadContext.StoredContext ignore = stashContext()){\n                 ctx.restore();\n                 whileRunning = true;\n                 in.doRun();",
      "parent_sha": "83532ac377e2947ebc678773c501f6ecd05f766a"
    }
  },
  {
    "oid": "f9d5fac046b29d62fe92710c3b507d60ad37e659",
    "message": "Mute NodeSubclassTests.testReplaceChildren\n\nSigned-off-by: Mark Vieira <portugee@gmail.com>",
    "date": "2020-03-02T17:15:39Z",
    "url": "https://github.com/elastic/elasticsearch/commit/f9d5fac046b29d62fe92710c3b507d60ad37e659",
    "details": {
      "sha": "22b6c5d369deaa48c4222f74249a292ad4ad5972",
      "filename": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/f9d5fac046b29d62fe92710c3b507d60ad37e659/x-pack%2Fplugin%2Fql%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fql%2Ftree%2FNodeSubclassTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/f9d5fac046b29d62fe92710c3b507d60ad37e659/x-pack%2Fplugin%2Fql%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fql%2Ftree%2FNodeSubclassTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fql%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fql%2Ftree%2FNodeSubclassTests.java?ref=f9d5fac046b29d62fe92710c3b507d60ad37e659",
      "patch": "@@ -88,7 +88,7 @@\n  * </ul>\n  */\n public class NodeSubclassTests<T extends B, B extends Node<B>> extends ESTestCase {\n-    \n+\n     private static final List<Class<?>> CLASSES_WITH_MIN_TWO_CHILDREN = asList(In.class, InPipe.class);\n \n     private final Class<T> subclass;\n@@ -158,6 +158,7 @@ public void testTransform() throws Exception {\n     /**\n      * Test {@link Node#replaceChildren} implementation on {@link #subclass}.\n      */\n+    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/53011\")\n     public void testReplaceChildren() throws Exception {\n         Constructor<T> ctor = longestCtor(subclass);\n         Object[] nodeCtorArgs = ctorArgs(ctor);",
      "parent_sha": "42cc589abe0e4491555f4cdd76b5324e6e523bd5"
    }
  },
  {
    "oid": "eb86b9f284ae0f272b51218efe68f36e294dedbc",
    "message": "Fix retention lease commit test\n\nThis commit fixes an issue with testing committed retention leases when\nthey are not any retention leases (a deliberate edge case).\n\nCloses #37420",
    "date": "2019-01-15T02:16:49Z",
    "url": "https://github.com/elastic/elasticsearch/commit/eb86b9f284ae0f272b51218efe68f36e294dedbc",
    "details": {
      "sha": "d0018a0a864f84a6b3a09feee9ee37cbfcf05b72",
      "filename": "server/src/test/java/org/elasticsearch/index/shard/IndexShardRetentionLeaseTests.java",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/eb86b9f284ae0f272b51218efe68f36e294dedbc/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2FIndexShardRetentionLeaseTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/eb86b9f284ae0f272b51218efe68f36e294dedbc/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2FIndexShardRetentionLeaseTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fshard%2FIndexShardRetentionLeaseTests.java?ref=eb86b9f284ae0f272b51218efe68f36e294dedbc",
      "patch": "@@ -43,6 +43,7 @@\n import java.util.function.LongSupplier;\n \n import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasItem;\n import static org.hamcrest.Matchers.hasSize;\n@@ -134,7 +135,6 @@ public void testExpiration() throws IOException {\n         }\n     }\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/37420\")\n     public void testCommit() throws IOException {\n         final Settings settings = Settings.builder()\n                 .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n@@ -162,17 +162,25 @@ public void testCommit() throws IOException {\n             final SegmentInfos segmentCommitInfos = indexShard.store().readLastCommittedSegmentsInfo();\n             assertTrue(segmentCommitInfos.getUserData().containsKey(Engine.RETENTION_LEASES));\n             final Collection<RetentionLease> retentionLeases = indexShard.getEngine().config().retentionLeasesSupplier().get();\n-            assertThat(IndexShard.getRetentionLeases(segmentCommitInfos), contains(retentionLeases.toArray(new RetentionLease[0])));\n+            if (retentionLeases.isEmpty()) {\n+                assertThat(IndexShard.getRetentionLeases(segmentCommitInfos), empty());\n+            } else {\n+                assertThat(IndexShard.getRetentionLeases(segmentCommitInfos), contains(retentionLeases.toArray(new RetentionLease[0])));\n+            }\n \n             // when we recover, we should recover the retention leases\n             final IndexShard recoveredShard = reinitShard(\n                     indexShard,\n                     ShardRoutingHelper.initWithSameId(indexShard.routingEntry(), RecoverySource.ExistingStoreRecoverySource.INSTANCE));\n             try {\n                 recoverShardFromStore(recoveredShard);\n-                assertThat(\n-                        recoveredShard.getEngine().config().retentionLeasesSupplier().get(),\n-                        contains(retentionLeases.toArray(new RetentionLease[0])));\n+                if (retentionLeases.isEmpty()) {\n+                    assertThat(recoveredShard.getEngine().config().retentionLeasesSupplier().get(), empty());\n+                } else {\n+                    assertThat(\n+                            recoveredShard.getEngine().config().retentionLeasesSupplier().get(),\n+                            contains(retentionLeases.toArray(new RetentionLease[0])));\n+                }\n             } finally {\n                 closeShards(recoveredShard);\n             }",
      "parent_sha": "74640d0ba7cbb0f6ffd78ff116990ae8d8e5cfde"
    }
  },
  {
    "oid": "6c241f3de8e366fefbaf85fd894d7e605716e5cc",
    "message": "protected against a wrong format in the index.auto_expand_replicas setting",
    "date": "2011-03-21T12:36:28Z",
    "url": "https://github.com/elastic/elasticsearch/commit/6c241f3de8e366fefbaf85fd894d7e605716e5cc",
    "details": {
      "sha": "9efb4d72bf2e526b766ce68bbd966f32f0e791cf",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/6c241f3de8e366fefbaf85fd894d7e605716e5cc/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fmetadata%2FMetaDataUpdateSettingsService.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/6c241f3de8e366fefbaf85fd894d7e605716e5cc/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fmetadata%2FMetaDataUpdateSettingsService.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcluster%2Fmetadata%2FMetaDataUpdateSettingsService.java?ref=6c241f3de8e366fefbaf85fd894d7e605716e5cc",
      "patch": "@@ -55,13 +55,19 @@ public class MetaDataUpdateSettingsService extends AbstractComponent implements\n                 try {\n                     final int numberOfReplicas = event.state().nodes().dataNodes().size() - 1;\n \n-                    int min = Integer.parseInt(autoExpandReplicas.substring(0, autoExpandReplicas.indexOf('-')));\n+                    int min;\n                     int max;\n-                    String sMax = autoExpandReplicas.substring(autoExpandReplicas.indexOf('-') + 1);\n-                    if (sMax.equals(\"all\")) {\n-                        max = event.state().nodes().dataNodes().size() - 1;\n-                    } else {\n-                        max = Integer.parseInt(sMax);\n+                    try {\n+                        min = Integer.parseInt(autoExpandReplicas.substring(0, autoExpandReplicas.indexOf('-')));\n+                        String sMax = autoExpandReplicas.substring(autoExpandReplicas.indexOf('-') + 1);\n+                        if (sMax.equals(\"all\")) {\n+                            max = event.state().nodes().dataNodes().size() - 1;\n+                        } else {\n+                            max = Integer.parseInt(sMax);\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"failed to set [{}], wrong format [{}]\", IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS, autoExpandReplicas);\n+                        continue;\n                     }\n \n                     // same value, nothing to do there",
      "parent_sha": "d2e61af9eeb6a706ed3f43aa4cf707dc6d20c736"
    }
  },
  {
    "oid": "74fc074e5e08cd4a844e9b81e757d94bd87b39df",
    "message": "fix styling",
    "date": "2016-09-14T08:52:10Z",
    "url": "https://github.com/elastic/elasticsearch/commit/74fc074e5e08cd4a844e9b81e757d94bd87b39df",
    "details": {
      "sha": "0451a8920eb9d728176425743a7f3203642e7f7f",
      "filename": "core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/74fc074e5e08cd4a844e9b81e757d94bd87b39df/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Faction%2Fsearch%2FSearchTransportService.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/74fc074e5e08cd4a844e9b81e757d94bd87b39df/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Faction%2Fsearch%2FSearchTransportService.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Faction%2Fsearch%2FSearchTransportService.java?ref=74fc074e5e08cd4a844e9b81e757d94bd87b39df",
      "patch": "@@ -43,9 +43,7 @@\n import org.elasticsearch.search.query.QuerySearchResultProvider;\n import org.elasticsearch.search.query.ScrollQuerySearchResult;\n import org.elasticsearch.threadpool.ThreadPool;\n-import org.elasticsearch.transport.TransportChannel;\n import org.elasticsearch.transport.TransportRequest;\n-import org.elasticsearch.transport.TransportRequestHandler;\n import org.elasticsearch.transport.TransportResponse;\n import org.elasticsearch.transport.TransportService;\n \n@@ -263,8 +261,8 @@ public static void registerRequestHandler(TransportService transportService, Sea\n                 boolean freed = searchService.freeContext(request.id());\n                 channel.sendResponse(new SearchFreeContextResponse(freed));\n             });\n-        transportService.registerRequestHandler(CLEAR_SCROLL_CONTEXTS_ACTION_NAME, () -> TransportRequest.Empty.INSTANCE, ThreadPool.Names.SAME,\n-            (request, channel) -> {\n+        transportService.registerRequestHandler(CLEAR_SCROLL_CONTEXTS_ACTION_NAME, () -> TransportRequest.Empty.INSTANCE,\n+            ThreadPool.Names.SAME, (request, channel) -> {\n                 searchService.freeAllScrollContexts();\n                 channel.sendResponse(TransportResponse.Empty.INSTANCE);\n             });",
      "parent_sha": "a1cd6be7775ef1f239023fa88b0294e16cb9b309"
    }
  },
  {
    "oid": "4dab138db78ba518e66bc0be1c3d7327fa12e99e",
    "message": "[TEST] resolved warning in IndexedScriptTests",
    "date": "2014-09-03T12:05:24Z",
    "url": "https://github.com/elastic/elasticsearch/commit/4dab138db78ba518e66bc0be1c3d7327fa12e99e",
    "details": {
      "sha": "a01fd8a0f8cfca8aa0b19a253de63b7c308c83e4",
      "filename": "src/test/java/org/elasticsearch/script/IndexedScriptTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/4dab138db78ba518e66bc0be1c3d7327fa12e99e/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fscript%2FIndexedScriptTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/4dab138db78ba518e66bc0be1c3d7327fa12e99e/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fscript%2FIndexedScriptTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fscript%2FIndexedScriptTests.java?ref=4dab138db78ba518e66bc0be1c3d7327fa12e99e",
      "patch": "@@ -38,7 +38,7 @@ public class IndexedScriptTests extends ElasticsearchIntegrationTest {\n \n     @Test\n     public void testFieldIndexedScript()  throws ExecutionException, InterruptedException{\n-        List<IndexRequestBuilder> builders = new ArrayList();\n+        List<IndexRequestBuilder> builders = new ArrayList<>();\n         builders.add(client().prepareIndex(ScriptService.SCRIPT_INDEX, \"groovy\", \"script1\").setSource(\"{\" +\n                 \"\\\"script\\\":\\\"2\\\"\"+\n         \"}\").setTimeout(TimeValue.timeValueSeconds(randomIntBetween(2,10))));\n@@ -57,11 +57,10 @@ public void testFieldIndexedScript()  throws ExecutionException, InterruptedExce\n         builders.add(client().prepareIndex(\"test\", \"scriptTest\", \"4\").setSource(\"{\\\"theField\\\":\\\"foo 4\\\"}\"));\n         builders.add(client().prepareIndex(\"test\", \"scriptTest\", \"5\").setSource(\"{\\\"theField\\\":\\\"bar\\\"}\"));\n \n-        indexRandom(true,builders);\n-        SearchResponse searchResponse;\n+        indexRandom(true, builders);\n         String query = \"{ \\\"query\\\" : { \\\"match_all\\\": {}} , \\\"script_fields\\\" : { \\\"test1\\\" : { \\\"script_id\\\" : \\\"script1\\\", \\\"lang\\\":\\\"groovy\\\" }, \\\"test2\\\" : { \\\"script_id\\\" : \\\"script2\\\", \\\"lang\\\":\\\"groovy\\\", \\\"params\\\":{\\\"factor\\\":3}  }}, size:1}\";\n-        searchResponse = client().prepareSearch().setSource(query).setIndices(\"test\").setTypes(\"scriptTest\").get();\n-        assertHitCount(searchResponse,5);\n+        SearchResponse searchResponse = client().prepareSearch().setSource(query).setIndices(\"test\").setTypes(\"scriptTest\").get();\n+        assertHitCount(searchResponse, 5);\n         assertTrue(searchResponse.getHits().hits().length == 1);\n         SearchHit sh = searchResponse.getHits().getAt(0);\n         assertThat((Integer)sh.field(\"test1\").getValue(), equalTo(2));",
      "parent_sha": "19418749e485b9c86930841da470d614a4f2bd70"
    }
  },
  {
    "oid": "4004406c11f400960bb471feb15d5a5a3b685244",
    "message": "add zip to explicit download plugin",
    "date": "2011-05-28T15:47:54Z",
    "url": "https://github.com/elastic/elasticsearch/commit/4004406c11f400960bb471feb15d5a5a3b685244",
    "details": {
      "sha": "0c5b8d55e0e9c8c948cafd4e53ffed70b238a771",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/plugins/PluginManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/4004406c11f400960bb471feb15d5a5a3b685244/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fplugins%2FPluginManager.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/4004406c11f400960bb471feb15d5a5a3b685244/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fplugins%2FPluginManager.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fplugins%2FPluginManager.java?ref=4004406c11f400960bb471feb15d5a5a3b685244",
      "patch": "@@ -78,7 +78,7 @@ public void downloadAndExtract(String name) throws IOException {\n                         pluginFile = new File(environment.pluginsFile(), name + \".zip\");\n                         if (version == null) {\n                             // try with ES version from downloads\n-                            URL pluginUrl = new URL(\"http://github.com/downloads/\" + userName + \"/\" + repoName + \"/\" + repoName + \"-\" + Version.number());\n+                            URL pluginUrl = new URL(\"http://github.com/downloads/\" + userName + \"/\" + repoName + \"/\" + repoName + \"-\" + Version.number() + \".zip\");\n                             System.out.println(\"Trying \" + pluginUrl.toExternalForm() + \"...\");\n                             try {\n                                 downloadHelper.download(pluginUrl, pluginFile, new HttpDownloadHelper.VerboseProgress(System.out));\n@@ -104,7 +104,7 @@ public void downloadAndExtract(String name) throws IOException {\n                             }\n                         } else {\n                             // download explicit version\n-                            URL pluginUrl = new URL(\"http://github.com/downloads/\" + userName + \"/\" + repoName + \"/\" + repoName + \"-\" + version);\n+                            URL pluginUrl = new URL(\"http://github.com/downloads/\" + userName + \"/\" + repoName + \"/\" + repoName + \"-\" + version + \".zip\");\n                             System.out.println(\"Trying \" + pluginUrl.toExternalForm() + \"...\");\n                             try {\n                                 downloadHelper.download(pluginUrl, pluginFile, new HttpDownloadHelper.VerboseProgress(System.out));",
      "parent_sha": "3652d57667a7a9d167cd00582be185f5038b796e"
    }
  },
  {
    "oid": "93d4f84b215d42bd728c447594a3b6d0b6af1c29",
    "message": "[TEST] Add \"ne\" as an unsupported SimpleKdc locale (#32700)\n\nSimpleKdcServer cannot handle some locales, so we explicitly avoid\r\nusing them in tests.\r\nAdding \"ne\" (Nepali) to that list.",
    "date": "2018-08-10T03:36:36Z",
    "url": "https://github.com/elastic/elasticsearch/commit/93d4f84b215d42bd728c447594a3b6d0b6af1c29",
    "details": {
      "sha": "0f88148a9a9731bb82210d0652f52ddd50987308",
      "filename": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTestCase.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/93d4f84b215d42bd728c447594a3b6d0b6af1c29/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2Fkerberos%2FKerberosTestCase.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/93d4f84b215d42bd728c447594a3b6d0b6af1c29/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2Fkerberos%2FKerberosTestCase.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fsecurity%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fsecurity%2Fauthc%2Fkerberos%2FKerberosTestCase.java?ref=93d4f84b215d42bd728c447594a3b6d0b6af1c29",
      "patch": "@@ -71,6 +71,7 @@ public abstract class KerberosTestCase extends ESTestCase {\n         unsupportedLocaleLanguages.add(\"fa\");\n         unsupportedLocaleLanguages.add(\"ks\");\n         unsupportedLocaleLanguages.add(\"ckb\");\n+        unsupportedLocaleLanguages.add(\"ne\");\n     }\n \n     @BeforeClass\n@@ -144,7 +145,7 @@ protected Path createPrincipalKeyTab(final Path dir, final String... princNames)\n \n     /**\n      * Creates principal with given name and password.\n-     * \n+     *\n      * @param principalName Principal name\n      * @param password Password\n      * @throws Exception thrown if principal could not be created\n@@ -178,7 +179,7 @@ static <T> T doAsWrapper(final Subject subject, final PrivilegedExceptionAction<\n \n     /**\n      * Write content to provided keytab file.\n-     * \n+     *\n      * @param keytabPath {@link Path} to keytab file.\n      * @param content Content for keytab\n      * @return key tab path\n@@ -193,7 +194,7 @@ public static Path writeKeyTab(final Path keytabPath, final String content) thro\n \n     /**\n      * Build kerberos realm settings with default config and given keytab\n-     * \n+     *\n      * @param keytabPath key tab file path\n      * @return {@link Settings} for kerberos realm\n      */\n@@ -203,7 +204,7 @@ public static Settings buildKerberosRealmSettings(final String keytabPath) {\n \n     /**\n      * Build kerberos realm settings\n-     * \n+     *\n      * @param keytabPath key tab file path\n      * @param maxUsersInCache max users to be maintained in cache\n      * @param cacheTTL time to live for cached entries",
      "parent_sha": "0161bbc77f2030bf95346324d2fe9fc6e41aa9e3"
    }
  },
  {
    "oid": "8ceb495007063ea4a936f852af5d264b2a225be4",
    "message": "improve REPRODUCE WITH",
    "date": "2015-04-16T13:56:56Z",
    "url": "https://github.com/elastic/elasticsearch/commit/8ceb495007063ea4a936f852af5d264b2a225be4",
    "details": {
      "sha": "ab7c1355ba5db853098b7d2786dee3adfca39497",
      "filename": "src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/8ceb495007063ea4a936f852af5d264b2a225be4/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fjunit%2Flisteners%2FReproduceInfoPrinter.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/8ceb495007063ea4a936f852af5d264b2a225be4/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fjunit%2Flisteners%2FReproduceInfoPrinter.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/src%2Ftest%2Fjava%2Forg%2Felasticsearch%2Ftest%2Fjunit%2Flisteners%2FReproduceInfoPrinter.java?ref=8ceb495007063ea4a936f852af5d264b2a225be4",
      "patch": "@@ -68,7 +68,7 @@ public void testFailure(Failure failure) throws Exception {\n         final Description d = failure.getDescription();\n         final StringBuilder b = new StringBuilder();\n         b.append(\"FAILURE  : \").append(d.getDisplayName()).append(\"\\n\");\n-        b.append(\"REPRODUCE WITH  : mvn clean test\");\n+        b.append(\"REPRODUCE WITH  : mvn test -Pdev\");\n         MavenMessageBuilder mavenMessageBuilder = new MavenMessageBuilder(b);\n         mavenMessageBuilder.appendAllOpts(failure.getDescription());\n ",
      "parent_sha": "68267f4bb634ba1c2679654e40a2e75b619227e2"
    }
  },
  {
    "oid": "d16100b992566267e8e7789786dc2c97facbd55c",
    "message": "Fix build-tools unit test on windows (#39986)",
    "date": "2019-03-19T06:02:11Z",
    "url": "https://github.com/elastic/elasticsearch/commit/d16100b992566267e8e7789786dc2c97facbd55c",
    "details": {
      "sha": "72e128b72efd7e5391622166564373e66fd855ae",
      "filename": "buildSrc/src/test/java/org/elasticsearch/gradle/ConcatFilesTaskTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/d16100b992566267e8e7789786dc2c97facbd55c/buildSrc%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fgradle%2FConcatFilesTaskTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/d16100b992566267e8e7789786dc2c97facbd55c/buildSrc%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fgradle%2FConcatFilesTaskTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/buildSrc%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fgradle%2FConcatFilesTaskTests.java?ref=d16100b992566267e8e7789786dc2c97facbd55c",
      "patch": "@@ -66,8 +66,8 @@ public void testConcatenationWithUnique() throws IOException {\n         file2.getParentFile().mkdirs();\n         file1.createNewFile();\n         file2.createNewFile();\n-        Files.write(file1.toPath(), \"Hello\\nHello\".getBytes());\n-        Files.write(file2.toPath(), \"Hello\\n\u0928\u092e\u0938\u094d\u0924\u0947\".getBytes());\n+        Files.write(file1.toPath(), (\"Hello\" + System.lineSeparator() +  \"Hello\").getBytes(StandardCharsets.UTF_8));\n+        Files.write(file2.toPath(), (\"Hello\" + System.lineSeparator() + \"\u0928\u092e\u0938\u094d\u0924\u0947\").getBytes(StandardCharsets.UTF_8));\n \n         concatFilesTask.setFiles(project.fileTree(file1.getParentFile().getParentFile()));\n ",
      "parent_sha": "9c88ae6ef4efa786f9fca18901be2209fdbaf9ee"
    }
  },
  {
    "oid": "58f3792c297911010ed68315141990aaa1bd0231",
    "message": "Make min num replicas for enrich index configurable (#110686)\n\nThe min num replicas for the enrich index is currenty hardcoded to 0. We'd like to be able\r\nto override that value via a setting (currently not registered), like we already do for the downsample index.",
    "date": "2024-07-16T08:28:54Z",
    "url": "https://github.com/elastic/elasticsearch/commit/58f3792c297911010ed68315141990aaa1bd0231",
    "details": {
      "sha": "ca00f49100279006041c4b68a265c91978f4c7f8",
      "filename": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/EnrichPolicyRunner.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/58f3792c297911010ed68315141990aaa1bd0231/x-pack%2Fplugin%2Fenrich%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fenrich%2FEnrichPolicyRunner.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/58f3792c297911010ed68315141990aaa1bd0231/x-pack%2Fplugin%2Fenrich%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fenrich%2FEnrichPolicyRunner.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fenrich%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fenrich%2FEnrichPolicyRunner.java?ref=58f3792c297911010ed68315141990aaa1bd0231",
      "patch": "@@ -85,6 +85,8 @@ public class EnrichPolicyRunner implements Runnable {\n     static final String ENRICH_MATCH_FIELD_NAME = \"enrich_match_field\";\n     static final String ENRICH_README_FIELD_NAME = \"enrich_readme\";\n \n+    public static final String ENRICH_MIN_NUMBER_OF_REPLICAS_NAME = \"enrich.min_number_of_replicas\";\n+\n     static final String ENRICH_INDEX_README_TEXT = \"This index is managed by Elasticsearch and should not be modified in any way.\";\n \n     private final String policyName;\n@@ -137,7 +139,7 @@ public void run() {\n             // This call does not set the origin to ensure that the user executing the policy has permission to access the source index\n             client.admin().indices().getIndex(getIndexRequest, listener.delegateFailureAndWrap((l, getIndexResponse) -> {\n                 validateMappings(getIndexResponse);\n-                prepareAndCreateEnrichIndex(toMappings(getIndexResponse));\n+                prepareAndCreateEnrichIndex(toMappings(getIndexResponse), clusterService.getSettings());\n             }));\n         } catch (Exception e) {\n             listener.onFailure(e);\n@@ -434,10 +436,11 @@ static boolean isIndexableField(MapperService mapperService, String field, Strin\n         }\n     }\n \n-    private void prepareAndCreateEnrichIndex(List<Map<String, Object>> mappings) {\n+    private void prepareAndCreateEnrichIndex(List<Map<String, Object>> mappings, Settings settings) {\n+        int numberOfReplicas = settings.getAsInt(ENRICH_MIN_NUMBER_OF_REPLICAS_NAME, 0);\n         Settings enrichIndexSettings = Settings.builder()\n             .put(\"index.number_of_shards\", 1)\n-            .put(\"index.number_of_replicas\", 0)\n+            .put(\"index.number_of_replicas\", numberOfReplicas)\n             // No changes will be made to an enrich index after policy execution, so need to enable automatic refresh interval:\n             .put(\"index.refresh_interval\", -1)\n             // This disables eager global ordinals loading for all fields:",
      "parent_sha": "b100209fe0b4ce0dba069d46ca648d242097b8bb"
    }
  },
  {
    "oid": "5b27d5018357f47472a372f900059ecd3bedfe70",
    "message": "Update JDK23 to build 24 (#110549)",
    "date": "2024-07-16T08:28:46Z",
    "url": "https://github.com/elastic/elasticsearch/commit/5b27d5018357f47472a372f900059ecd3bedfe70",
    "details": {
      "sha": "ec86798e653f1a03331a49b4e4a530daea91084c",
      "filename": "build-tools-internal/src/main/java/org/elasticsearch/gradle/internal/toolchain/OracleOpenJdkToolchainResolver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/5b27d5018357f47472a372f900059ecd3bedfe70/build-tools-internal%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgradle%2Finternal%2Ftoolchain%2FOracleOpenJdkToolchainResolver.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/5b27d5018357f47472a372f900059ecd3bedfe70/build-tools-internal%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgradle%2Finternal%2Ftoolchain%2FOracleOpenJdkToolchainResolver.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/build-tools-internal%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fgradle%2Finternal%2Ftoolchain%2FOracleOpenJdkToolchainResolver.java?ref=5b27d5018357f47472a372f900059ecd3bedfe70",
      "patch": "@@ -88,7 +88,7 @@ public String url(String os, String arch, String extension) {\n     List<JdkBuild> builds = List.of(\n         getBundledJdkBuild(),\n         // 23 early access\n-        new EarlyAccessJdkBuild(JavaLanguageVersion.of(23), \"23\", \"23\")\n+        new EarlyAccessJdkBuild(JavaLanguageVersion.of(23), \"23\", \"24\")\n     );\n \n     private JdkBuild getBundledJdkBuild() {",
      "parent_sha": "fa1c97fca23232c2fd0c4a1d7d846be81e8d0d6b"
    }
  },
  {
    "oid": "ec939dc01274ac3d412914609cd4494e0f763038",
    "message": "Fix line length violation in cache tests\n\nThis commit fixes a line-length violation in the cache tests that was\nhidden by the IDE folding the generics.",
    "date": "2018-05-07T18:12:38Z",
    "url": "https://github.com/elastic/elasticsearch/commit/ec939dc01274ac3d412914609cd4494e0f763038",
    "details": {
      "sha": "1ab38dff7eb7fce891e71d117b4a8d240485e86e",
      "filename": "server/src/test/java/org/elasticsearch/common/cache/CacheTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/ec939dc01274ac3d412914609cd4494e0f763038/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fcache%2FCacheTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/ec939dc01274ac3d412914609cd4494e0f763038/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fcache%2FCacheTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fcache%2FCacheTests.java?ref=ec939dc01274ac3d412914609cd4494e0f763038",
      "patch": "@@ -347,7 +347,8 @@ protected long now() {\n     @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/30428\")\n     public void testComputeIfAbsentDeadlock() throws BrokenBarrierException, InterruptedException {\n         final int numberOfThreads = randomIntBetween(2, 32);\n-        final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setExpireAfterAccess(TimeValue.timeValueNanos(1)).build();\n+        final Cache<Integer, String> cache =\n+                CacheBuilder.<Integer, String>builder().setExpireAfterAccess(TimeValue.timeValueNanos(1)).build();\n \n         final CyclicBarrier barrier = new CyclicBarrier(1 + numberOfThreads);\n         for (int i = 0; i < numberOfThreads; i++) {",
      "parent_sha": "6fb189ce471f09938292cd160dbc4a43b6153386"
    }
  },
  {
    "oid": "94fdece88a173f9a232e27aed8855b6961c47c84",
    "message": "Remove Mostly Redundant Deleting in FsBlobContainer (#60117)\n\nIn almost all cases we write uuid named files via this method.\r\nPreemptively deleting just wastes IO ops, we can delete after a write failed\r\nand retry the write to cover the few cases where we actually do an overwrite.",
    "date": "2020-07-27T11:12:42Z",
    "url": "https://github.com/elastic/elasticsearch/commit/94fdece88a173f9a232e27aed8855b6961c47c84",
    "details": {
      "sha": "97140774da6017c7a6833887324e28e460e773f3",
      "filename": "server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/94fdece88a173f9a232e27aed8855b6961c47c84/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fblobstore%2Ffs%2FFsBlobContainer.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/94fdece88a173f9a232e27aed8855b6961c47c84/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fblobstore%2Ffs%2FFsBlobContainer.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fcommon%2Fblobstore%2Ffs%2FFsBlobContainer.java?ref=94fdece88a173f9a232e27aed8855b6961c47c84",
      "patch": "@@ -176,11 +176,16 @@ public long readBlobPreferredLength() {\n \n     @Override\n     public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {\n-        if (failIfAlreadyExists == false) {\n+        final Path file = path.resolve(blobName);\n+        try {\n+            writeToPath(inputStream, file, blobSize);\n+        } catch (FileAlreadyExistsException faee) {\n+            if (failIfAlreadyExists) {\n+                throw faee;\n+            }\n             deleteBlobsIgnoringIfNotExists(Collections.singletonList(blobName));\n+            writeToPath(inputStream, file, blobSize);\n         }\n-        final Path file = path.resolve(blobName);\n-        writeToPath(inputStream, file, blobSize);\n         IOUtils.fsync(path, true);\n     }\n ",
      "parent_sha": "d3cf8d3ab9abe5dbae51b5ad903581c06aa27e41"
    }
  },
  {
    "oid": "4c42db5916b9351c1315a1ad9faaae6018dd257e",
    "message": "Increase timeout to account for slow node start (#105054)",
    "date": "2024-02-02T13:27:28Z",
    "url": "https://github.com/elastic/elasticsearch/commit/4c42db5916b9351c1315a1ad9faaae6018dd257e",
    "details": {
      "sha": "7e9e83e616f61f1386cb44d09534b9ef56c52868",
      "filename": "x-pack/plugin/autoscaling/src/internalClusterTest/java/org/elasticsearch/xpack/autoscaling/existence/FrozenExistenceDeciderIT.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/4c42db5916b9351c1315a1ad9faaae6018dd257e/x-pack%2Fplugin%2Fautoscaling%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fautoscaling%2Fexistence%2FFrozenExistenceDeciderIT.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/4c42db5916b9351c1315a1ad9faaae6018dd257e/x-pack%2Fplugin%2Fautoscaling%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fautoscaling%2Fexistence%2FFrozenExistenceDeciderIT.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fautoscaling%2Fsrc%2FinternalClusterTest%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fautoscaling%2Fexistence%2FFrozenExistenceDeciderIT.java?ref=4c42db5916b9351c1315a1ad9faaae6018dd257e",
      "patch": "@@ -14,7 +14,6 @@\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.core.TimeValue;\n import org.elasticsearch.plugins.Plugin;\n-import org.elasticsearch.snapshots.SnapshotInfo;\n import org.elasticsearch.test.ESIntegTestCase;\n import org.elasticsearch.test.NodeRoles;\n import org.elasticsearch.xpack.autoscaling.AbstractFrozenAutoscalingIntegTestCase;\n@@ -83,15 +82,14 @@ protected Collection<Class<? extends Plugin>> nodePlugins() {\n         );\n     }\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/102405\")\n     public void testZeroToOne() throws Exception {\n         internalCluster().startMasterOnlyNode();\n         setupRepoAndPolicy();\n         logger.info(\"starting 2 content data nodes\");\n         internalCluster().startNode(NodeRoles.onlyRole(DiscoveryNodeRole.DATA_CONTENT_NODE_ROLE));\n         internalCluster().startNode(NodeRoles.onlyRole(DiscoveryNodeRole.DATA_CONTENT_NODE_ROLE));\n         // create an ignored snapshot to initialize the latest-N file.\n-        final SnapshotInfo snapshotInfo = createFullSnapshot(fsRepoName, snapshotName);\n+        createFullSnapshot(fsRepoName, snapshotName);\n \n         Phase hotPhase = new Phase(\"hot\", TimeValue.ZERO, Collections.emptyMap());\n         Phase frozenPhase = new Phase(\n@@ -111,9 +109,9 @@ public void testZeroToOne() throws Exception {\n             .build();\n         CreateIndexResponse res = indicesAdmin().prepareCreate(INDEX_NAME).setSettings(settings).get();\n         assertTrue(res.isAcknowledged());\n-        logger.info(\"created index\");\n+        logger.info(\"-> created index\");\n \n-        assertBusy(() -> { assertMinimumCapacity(capacity().results().get(\"frozen\").requiredCapacity().total()); });\n+        assertBusy(() -> assertMinimumCapacity(capacity().results().get(\"frozen\").requiredCapacity().total()));\n         assertMinimumCapacity(capacity().results().get(\"frozen\").requiredCapacity().node());\n \n         assertThat(\n@@ -134,14 +132,16 @@ public void testZeroToOne() throws Exception {\n         // verify that SearchableSnapshotAction uses WaitForDataTierStep and that it waits.\n         assertThat(indices(), not(arrayContaining(PARTIAL_INDEX_NAME)));\n \n-        logger.info(\"starting dedicated frozen node\");\n+        logger.info(\"-> starting dedicated frozen node\");\n         internalCluster().startNode(NodeRoles.onlyRole(DiscoveryNodeRole.DATA_FROZEN_NODE_ROLE));\n \n+        // we've seen a case where bootstrapping a node took just over 60 seconds in the test environment, so using an (excessive) 90\n+        // seconds max wait time to avoid flakiness\n         assertBusy(() -> {\n             String[] indices = indices();\n             assertThat(indices, arrayContaining(PARTIAL_INDEX_NAME));\n             assertThat(indices, not(arrayContaining(INDEX_NAME)));\n-        }, 60, TimeUnit.SECONDS);\n+        }, 90, TimeUnit.SECONDS);\n         ensureGreen();\n     }\n ",
      "parent_sha": "e2a6fefe8bab0e995f000fd7c39f62c093c32f7d"
    }
  },
  {
    "oid": "20fe8ac854d38f4cb11ef43ff3d0fcaeb78b8a7a",
    "message": "Register index.version.created in Kuromoji unittest since it's a node level setting here",
    "date": "2016-01-19T08:14:41Z",
    "url": "https://github.com/elastic/elasticsearch/commit/20fe8ac854d38f4cb11ef43ff3d0fcaeb78b8a7a",
    "details": {
      "sha": "63122842104ada95582b8c695f742ddee1dc4529",
      "filename": "plugins/analysis-kuromoji/src/test/java/org/elasticsearch/index/analysis/KuromojiAnalysisTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/20fe8ac854d38f4cb11ef43ff3d0fcaeb78b8a7a/plugins%2Fanalysis-kuromoji%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fanalysis%2FKuromojiAnalysisTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/20fe8ac854d38f4cb11ef43ff3d0fcaeb78b8a7a/plugins%2Fanalysis-kuromoji%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fanalysis%2FKuromojiAnalysisTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugins%2Fanalysis-kuromoji%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fanalysis%2FKuromojiAnalysisTests.java?ref=20fe8ac854d38f4cb11ef43ff3d0fcaeb78b8a7a",
      "patch": "@@ -38,6 +38,7 @@\n import org.elasticsearch.plugin.analysis.kuromoji.AnalysisKuromojiPlugin;\n import org.elasticsearch.test.ESTestCase;\n import org.elasticsearch.test.IndexSettingsModule;\n+import org.elasticsearch.test.InternalSettingsPlugin;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -202,12 +203,13 @@ public AnalysisService createAnalysisService() throws IOException {\n                 .loadFromStream(json, getClass().getResourceAsStream(json))\n                 .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                 .build();\n-\n+        final SettingsModule settingsModule = new SettingsModule(settings, new SettingsFilter(settings));\n+        settingsModule.registerSetting(InternalSettingsPlugin.VERSION_CREATED);\n         Index index = new Index(\"test\");\n \n         AnalysisModule analysisModule = new AnalysisModule(new Environment(settings));\n         new AnalysisKuromojiPlugin().onModule(analysisModule);\n-        Injector parentInjector = new ModulesBuilder().add(new SettingsModule(settings, new SettingsFilter(settings)),\n+        Injector parentInjector = new ModulesBuilder().add(settingsModule,\n                 new EnvironmentModule(new Environment(settings)), analysisModule)\n                 .createInjector();\n ",
      "parent_sha": "c2e8ba8970b423891946495735b02550d98dfe98"
    }
  },
  {
    "oid": "d842ce9f826cece783570f0a02189fa992fd83c2",
    "message": "Remove control-flow exception in `Netty4HttpPipeliningHandler#write` (#105679)\n\nThere's no need for a try/catch block here when the only exception in\r\nsight is being thrown from within the same method and immediately\r\nswallowed. This commit replaces the logic with equivalent code using\r\nregular branches.",
    "date": "2024-02-22T10:13:46Z",
    "url": "https://github.com/elastic/elasticsearch/commit/d842ce9f826cece783570f0a02189fa992fd83c2",
    "details": {
      "sha": "b86e168e2e62021141536ab799bf215712a14eb8",
      "filename": "modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpPipeliningHandler.java",
      "status": "modified",
      "additions": 20,
      "deletions": 32,
      "changes": 52,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/d842ce9f826cece783570f0a02189fa992fd83c2/modules%2Ftransport-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fhttp%2Fnetty4%2FNetty4HttpPipeliningHandler.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/d842ce9f826cece783570f0a02189fa992fd83c2/modules%2Ftransport-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fhttp%2Fnetty4%2FNetty4HttpPipeliningHandler.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Ftransport-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fhttp%2Fnetty4%2FNetty4HttpPipeliningHandler.java?ref=d842ce9f826cece783570f0a02189fa992fd83c2",
      "patch": "@@ -133,46 +133,34 @@ protected void handlePipelinedRequest(ChannelHandlerContext ctx, Netty4HttpReque\n     }\n \n     @Override\n-    public void write(final ChannelHandlerContext ctx, final Object msg, final ChannelPromise promise) throws IOException {\n+    public void write(final ChannelHandlerContext ctx, final Object msg, final ChannelPromise promise) {\n         assert msg instanceof Netty4HttpResponse : \"Invalid message type: \" + msg.getClass();\n-        boolean success = false;\n-        try {\n-            final Netty4HttpResponse restResponse = (Netty4HttpResponse) msg;\n-            if (restResponse.getSequence() != writeSequence) {\n-                assert restResponse.getSequence() > writeSequence\n-                    : \"response sequence [\" + restResponse.getSequence() + \"] we below write sequence [\" + writeSequence + \"]\";\n-                if (outboundHoldingQueue.size() >= maxEventsHeld) {\n-                    int eventCount = outboundHoldingQueue.size() + 1;\n-                    throw new IllegalStateException(\n-                        \"Too many pipelined events [\" + eventCount + \"]. Max events allowed [\" + maxEventsHeld + \"].\"\n-                    );\n-                }\n-                // response is not at the current sequence number so we add it to the outbound queue and return\n-                assert outboundHoldingQueue.stream().noneMatch(t -> t.v1().getSequence() == writeSequence)\n-                    : \"duplicate outbound entries for seqno \" + writeSequence;\n-                outboundHoldingQueue.add(new Tuple<>(restResponse, promise));\n-                success = true;\n-                return;\n-            }\n-\n-            // response is at the current sequence number and does not need to wait for any other response to be written so we write\n-            // it out directly\n+        final Netty4HttpResponse restResponse = (Netty4HttpResponse) msg;\n+        if (restResponse.getSequence() != writeSequence) {\n+            // response is not at the current sequence number so we add it to the outbound queue\n+            enqueuePipelinedResponse(ctx, restResponse, promise);\n+        } else {\n+            // response is at the current sequence number and does not need to wait for any other response to be written\n             doWrite(ctx, restResponse, promise);\n-            success = true;\n             // see if we have any queued up responses that became writeable due to the above write\n             doWriteQueued(ctx);\n-        } catch (IllegalStateException e) {\n+        }\n+    }\n+\n+    private void enqueuePipelinedResponse(ChannelHandlerContext ctx, Netty4HttpResponse restResponse, ChannelPromise promise) {\n+        assert restResponse.getSequence() > writeSequence\n+            : \"response sequence [\" + restResponse.getSequence() + \"] we below write sequence [\" + writeSequence + \"]\";\n+        if (outboundHoldingQueue.size() >= maxEventsHeld) {\n             ctx.channel().close();\n-        } finally {\n-            if (success == false && promise.isDone() == false) {\n-                // The preceding failure may already have failed the promise; use tryFailure() to avoid log noise about double-completion,\n-                // but also check isDone() first to avoid even constructing another exception in most cases.\n-                promise.tryFailure(new ClosedChannelException());\n-            }\n+            promise.tryFailure(new ClosedChannelException());\n+        } else {\n+            assert outboundHoldingQueue.stream().noneMatch(t -> t.v1().getSequence() == restResponse.getSequence())\n+                : \"duplicate outbound entries for seqno \" + restResponse.getSequence();\n+            outboundHoldingQueue.add(new Tuple<>(restResponse, promise));\n         }\n     }\n \n-    private void doWriteQueued(ChannelHandlerContext ctx) throws IOException {\n+    private void doWriteQueued(ChannelHandlerContext ctx) {\n         while (outboundHoldingQueue.isEmpty() == false && outboundHoldingQueue.peek().v1().getSequence() == writeSequence) {\n             final Tuple<? extends Netty4HttpResponse, ChannelPromise> top = outboundHoldingQueue.poll();\n             assert top != null : \"we know the outbound holding queue to not be empty at this point\";",
      "parent_sha": "09bdb16aa3b903a78655d141cf0540a0339165ea"
    }
  },
  {
    "oid": "9c69498faf75adf4ebfbf60353ebdffde5106fef",
    "message": "Add Assertion About Leaking index-N to Repo Tests (#46774)\n\nThis adds an assert to make sure we're not leaking\r\nindex-N blobs on the shard level to the repo consistency checks.\r\nIt is ok to have a single redundant index-N blob in a failure scenario\r\nbut additional index-N should always be cleaned up before adding more.",
    "date": "2019-09-18T07:23:18Z",
    "url": "https://github.com/elastic/elasticsearch/commit/9c69498faf75adf4ebfbf60353ebdffde5106fef",
    "details": {
      "sha": "1184320a2f27ca0df3721171dee46d364f1f06d0",
      "filename": "test/framework/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreTestUtil.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/9c69498faf75adf4ebfbf60353ebdffde5106fef/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fblobstore%2FBlobStoreTestUtil.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/9c69498faf75adf4ebfbf60353ebdffde5106fef/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fblobstore%2FBlobStoreTestUtil.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/test%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Frepositories%2Fblobstore%2FBlobStoreTestUtil.java?ref=9c69498faf75adf4ebfbf60353ebdffde5106fef",
      "patch": "@@ -58,6 +58,7 @@\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n@@ -169,9 +170,12 @@ private static void assertSnapshotUUIDs(BlobStoreRepository repository, Reposito\n                         continue;\n                     }\n                     if (snapshotInfo.shardFailures().stream().noneMatch(shardFailure ->\n-                        shardFailure.index().equals(index) != false && shardFailure.shardId() == Integer.parseInt(entry.getKey()))) {\n-                        assertThat(entry.getValue().listBlobs(),\n+                        shardFailure.index().equals(index) && shardFailure.shardId() == Integer.parseInt(entry.getKey()))) {\n+                        final Map<String, BlobMetaData> shardPathContents = entry.getValue().listBlobs();\n+                        assertThat(shardPathContents,\n                             hasKey(String.format(Locale.ROOT, BlobStoreRepository.SNAPSHOT_NAME_FORMAT, snapshotId.getUUID())));\n+                        assertThat(shardPathContents.keySet().stream()\n+                            .filter(name -> name.startsWith(BlobStoreRepository.INDEX_FILE_PREFIX)).count(), lessThanOrEqualTo(2L));\n                     }\n                 }\n             }",
      "parent_sha": "5b963917c37b90ccdb301e9a9c44794d049621d1"
    }
  },
  {
    "oid": "f04c95f4c2e1d3610c9aaad53f61943f18e28b73",
    "message": "change policy logs to be DEBUG",
    "date": "2018-04-12T22:40:20Z",
    "url": "https://github.com/elastic/elasticsearch/commit/f04c95f4c2e1d3610c9aaad53f61943f18e28b73",
    "details": {
      "sha": "dbf90cfae66d6eaad3abb12a2cd9bb1daf988891",
      "filename": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicy.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/f04c95f4c2e1d3610c9aaad53f61943f18e28b73/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Findexlifecycle%2FLifecyclePolicy.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/f04c95f4c2e1d3610c9aaad53f61943f18e28b73/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Findexlifecycle%2FLifecyclePolicy.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack%2Fplugin%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Fxpack%2Fcore%2Findexlifecycle%2FLifecyclePolicy.java?ref=f04c95f4c2e1d3610c9aaad53f61943f18e28b73",
      "patch": "@@ -177,9 +177,9 @@ public List<Step> toSteps(Client client, LongSupplier nowSupplier) {\n             new Step.StepKey(\"pre-phase\", \"pre-action\", \"init\"), lastStepKey));\n \n         Collections.reverse(steps);\n-        logger.error(\"STEP COUNT: \" + steps.size());\n+        logger.debug(\"STEP COUNT: \" + steps.size());\n         for (Step step : steps) {\n-            logger.error(step.getKey() + \" -> \" + step.getNextStepKey());\n+            logger.debug(step.getKey() + \" -> \" + step.getNextStepKey());\n         }\n         return steps;\n     }",
      "parent_sha": "f3373f70daa586af02d363b10d25c8748b47906f"
    }
  },
  {
    "oid": "56d2dd701e2165ed5161cc47ee6ba651b4c9470e",
    "message": "Fix SizeMappingTests failure.",
    "date": "2015-12-23T09:48:00Z",
    "url": "https://github.com/elastic/elasticsearch/commit/56d2dd701e2165ed5161cc47ee6ba651b4c9470e",
    "details": {
      "sha": "403eb284f9638afed67e73621db4f9529eca4082",
      "filename": "plugins/mapper-size/src/test/java/org/elasticsearch/index/mapper/size/SizeMappingTests.java",
      "status": "modified",
      "additions": 15,
      "deletions": 10,
      "changes": 25,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/56d2dd701e2165ed5161cc47ee6ba651b4c9470e/plugins%2Fmapper-size%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fsize%2FSizeMappingTests.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/56d2dd701e2165ed5161cc47ee6ba651b4c9470e/plugins%2Fmapper-size%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fsize%2FSizeMappingTests.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/plugins%2Fmapper-size%2Fsrc%2Ftest%2Fjava%2Forg%2Felasticsearch%2Findex%2Fmapper%2Fsize%2FSizeMappingTests.java?ref=56d2dd701e2165ed5161cc47ee6ba651b4c9470e",
      "patch": "@@ -28,13 +28,18 @@\n import org.elasticsearch.index.IndexService;\n import org.elasticsearch.index.mapper.DocumentMapper;\n import org.elasticsearch.index.mapper.DocumentMapperParser;\n+import org.elasticsearch.index.mapper.MapperService;\n+import org.elasticsearch.index.mapper.MetadataFieldMapper;\n import org.elasticsearch.index.mapper.ParsedDocument;\n import org.elasticsearch.index.mapper.SourceToParse;\n+import org.elasticsearch.indices.IndicesModule;\n import org.elasticsearch.indices.mapper.MapperRegistry;\n import org.elasticsearch.test.ESSingleNodeTestCase;\n import org.junit.Before;\n \n import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n@@ -43,18 +48,18 @@\n \n public class SizeMappingTests extends ESSingleNodeTestCase {\n \n-    MapperRegistry mapperRegistry;\n     IndexService indexService;\n+    MapperService mapperService;\n     DocumentMapperParser parser;\n \n     @Before\n     public void before() {\n         indexService = createIndex(\"test\");\n-        mapperRegistry = new MapperRegistry(\n-                Collections.emptyMap(),\n-                Collections.singletonMap(SizeFieldMapper.NAME, new SizeFieldMapper.TypeParser()));\n-        parser = new DocumentMapperParser(indexService.getIndexSettings(), indexService.mapperService(),\n-                indexService.analysisService(), indexService.similarityService(), mapperRegistry);\n+        Map<String, MetadataFieldMapper.TypeParser> metadataMappers = new HashMap<>();\n+        IndicesModule indices = new IndicesModule();\n+        indices.registerMetadataMapper(SizeFieldMapper.NAME, new SizeFieldMapper.TypeParser());\n+        mapperService = new MapperService(indexService.getIndexSettings(), indexService.analysisService(), indexService.similarityService(), indices.getMapperRegistry());\n+        parser = mapperService.documentMapperParser();\n     }\n \n     public void testSizeEnabled() throws Exception {\n@@ -81,10 +86,10 @@ public void testSizeEnabledAndStoredBackcompat() throws Exception {\n         Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();\n \n         indexService = createIndex(\"test2\", indexSettings);\n-        mapperRegistry = new MapperRegistry(\n+        MapperRegistry mapperRegistry = new MapperRegistry(\n                 Collections.emptyMap(),\n                 Collections.singletonMap(SizeFieldMapper.NAME, new SizeFieldMapper.TypeParser()));\n-        parser = new DocumentMapperParser(indexService.getIndexSettings(), indexService.mapperService(),\n+        parser = new DocumentMapperParser(indexService.getIndexSettings(), mapperService,\n                 indexService.analysisService(), indexService.similarityService(), mapperRegistry);\n         DocumentMapper docMapper = parser.parse(\"type\", new CompressedXContent(mapping));\n \n@@ -134,12 +139,12 @@ public void testThatDisablingWorksWhenMerging() throws Exception {\n         String enabledMapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                 .startObject(\"_size\").field(\"enabled\", true).endObject()\n                 .endObject().endObject().string();\n-        DocumentMapper enabledMapper = indexService.mapperService().merge(\"type\", new CompressedXContent(enabledMapping), true, false);\n+        DocumentMapper enabledMapper = mapperService.merge(\"type\", new CompressedXContent(enabledMapping), true, false);\n \n         String disabledMapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                 .startObject(\"_size\").field(\"enabled\", false).endObject()\n                 .endObject().endObject().string();\n-        DocumentMapper disabledMapper = indexService.mapperService().merge(\"type\", new CompressedXContent(disabledMapping), false, false);\n+        DocumentMapper disabledMapper = mapperService.merge(\"type\", new CompressedXContent(disabledMapping), false, false);\n \n         assertThat(disabledMapper.metadataMapper(SizeFieldMapper.class).enabled(), is(false));\n     }",
      "parent_sha": "a2072fe927e27b8b6a97ab504f6d4b54c08dc414"
    }
  },
  {
    "oid": "b2fa6b7a94846a3a267117405d249ef228ee6192",
    "message": "When _source is disabled, don't return it in realtime get fetching the document from the transaction log, closes #1509.",
    "date": "2011-11-29T07:39:46Z",
    "url": "https://github.com/elastic/elasticsearch/commit/b2fa6b7a94846a3a267117405d249ef228ee6192",
    "details": {
      "sha": "b7fec0987e86278f42c4aa37cef8bafdd3ca9e26",
      "filename": "modules/elasticsearch/src/main/java/org/elasticsearch/index/get/ShardGetService.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/elastic/elasticsearch/blob/b2fa6b7a94846a3a267117405d249ef228ee6192/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fget%2FShardGetService.java",
      "raw_url": "https://github.com/elastic/elasticsearch/raw/b2fa6b7a94846a3a267117405d249ef228ee6192/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fget%2FShardGetService.java",
      "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/modules%2Felasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Felasticsearch%2Findex%2Fget%2FShardGetService.java?ref=b2fa6b7a94846a3a267117405d249ef228ee6192",
      "patch": "@@ -306,7 +306,7 @@ public GetResult innerGet(String type, String id, String[] gFields, boolean real\n                                 FieldMapper<?> x = docMapper.mappers().smartNameFieldMapper(field);\n                                 value = searchLookup.source().extractValue(field);\n                                 if (x != null && value instanceof String) {\n-                                    value = x.valueFromString((String)value);\n+                                    value = x.valueFromString((String) value);\n                                 }\n                             }\n                         }\n@@ -324,6 +324,11 @@ public GetResult innerGet(String type, String id, String[] gFields, boolean real\n                     }\n                 }\n \n+                // if source is not enabled, don't return it even though we have it from the translog\n+                if (sourceRequested && !docMapper.sourceMapper().enabled()) {\n+                    sourceRequested = false;\n+                }\n+\n                 return new GetResult(shardId.index().name(), type, id, get.version(), get.exists(), sourceRequested ? source.source : null, fields);\n             }\n         } finally {",
      "parent_sha": "e9fe8ec469ee88548f7fad06e678f55c17bd744c"
    }
  }
]