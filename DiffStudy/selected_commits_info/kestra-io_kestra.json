[
  {
    "oid": "0d3de92fc18ba86b4bd154d0b32ca8aec2a5c234",
    "message": "fix(core): plugins validation failed with micronaut update",
    "date": "2022-07-06T05:58:26Z",
    "url": "https://github.com/kestra-io/kestra/commit/0d3de92fc18ba86b4bd154d0b32ca8aec2a5c234",
    "details": {
      "sha": "54c615ec4d2663719603d2672328aaed574b9da7",
      "filename": "core/src/main/java/io/kestra/core/contexts/KestraValidator.java",
      "status": "modified",
      "additions": 9,
      "deletions": 17,
      "changes": 26,
      "blob_url": "https://github.com/kestra-io/kestra/blob/0d3de92fc18ba86b4bd154d0b32ca8aec2a5c234/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fcontexts%2FKestraValidator.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/0d3de92fc18ba86b4bd154d0b32ca8aec2a5c234/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fcontexts%2FKestraValidator.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fcontexts%2FKestraValidator.java?ref=0d3de92fc18ba86b4bd154d0b32ca8aec2a5c234",
      "patch": "@@ -16,9 +16,7 @@\n import io.kestra.core.plugins.PluginRegistry;\n import io.kestra.core.plugins.RegisteredPlugin;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Optional;\n+import java.util.*;\n \n @Singleton\n @Replaces(DefaultValidator.class)\n@@ -31,8 +29,7 @@ protected KestraValidator(@NonNull ValidatorConfiguration configuration) {\n         super(configuration);\n     }\n \n-    protected @Nullable\n-    BeanIntrospection<Object> getBeanIntrospection(@NonNull Object object) {\n+    protected @Nullable BeanIntrospection<Object> getBeanIntrospection(@NonNull Object object) {\n         //noinspection ConstantConditions\n         if (object == null) {\n             return null;\n@@ -102,18 +99,13 @@ private Map<String, BeanIntrospectionReference<Object>> getIntrospections() {\n                     if (pluginRegistry != null) {\n                         for (RegisteredPlugin registeredPlugin : pluginRegistry.getPlugins()) {\n \n-                            SoftServiceLoader<BeanIntrospectionReference> services = SoftServiceLoader.load(BeanIntrospectionReference.class, registeredPlugin.getClassLoader());\n-\n-                            for (ServiceDefinition<BeanIntrospectionReference> service : services) {\n-                                if (service.isPresent()) {\n-                                    BeanIntrospectionReference ref = service.load();\n-                                    ((Map) introspectionMap).put(ref.getName(), ref);\n-                                } else if (log.isDebugEnabled()) {\n-                                    log.debug(\n-                                        \"BeanIntrospection {} not loaded since associated bean is not present on the classpath\",\n-                                        service.getName()\n-                                    );\n-                                }\n+                            SoftServiceLoader<BeanIntrospectionReference> loader = SoftServiceLoader.load(BeanIntrospectionReference.class, registeredPlugin.getClassLoader());\n+\n+                            List<BeanIntrospectionReference> definitions = new ArrayList<>(100);\n+                            loader.collectAll(definitions);\n+\n+                            for (BeanIntrospectionReference definition : definitions) {\n+                                ((Map) introspectionMap).put(definition.getName(), definition);\n                             }\n                         }\n                     }",
      "parent_sha": "34b34e5caaaf14a5bba293f7258204a734997be0"
    }
  },
  {
    "oid": "b86b4bb1608de5a382ddc407fa41ebabb11fb9ab",
    "message": "feat(webserver): if no date provided for dashboard, then use default timewindow",
    "date": "2025-01-29T14:55:57Z",
    "url": "https://github.com/kestra-io/kestra/commit/b86b4bb1608de5a382ddc407fa41ebabb11fb9ab",
    "details": {
      "sha": "1bfc2283922dcfbbf8204c9a0a5fdf02b8eddef2",
      "filename": "webserver/src/main/java/io/kestra/webserver/controllers/api/DashboardController.java",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/kestra-io/kestra/blob/b86b4bb1608de5a382ddc407fa41ebabb11fb9ab/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FDashboardController.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/b86b4bb1608de5a382ddc407fa41ebabb11fb9ab/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FDashboardController.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FDashboardController.java?ref=b86b4bb1608de5a382ddc407fa41ebabb11fb9ab",
      "patch": "@@ -157,22 +157,23 @@ public PagedResults<Map<String, Object>> dashboardChart(\n         @Parameter(description = \"The chart id\") @PathVariable String chartId,\n         @Parameter(description = \"The filters to apply, some can override chart definition like labels & namespace\") @Body GlobalFilter globalFilter\n     ) throws IOException {\n-        ZonedDateTime startDate = globalFilter.getStartDate();\n+        String tenantId = tenantService.resolveTenant();\n+        Dashboard dashboard = dashboardRepository.get(tenantId, id).orElse(null);\n+        if (dashboard == null) {\n+            return null;\n+        }\n+\n         ZonedDateTime endDate = globalFilter.getEndDate();\n+        ZonedDateTime startDate = globalFilter.getStartDate();\n         if (startDate == null || endDate == null) {\n-            throw new IllegalArgumentException(\"`startDate` and `endDate` filters are required.\");\n+            endDate = ZonedDateTime.now();\n+            startDate = endDate.minus(dashboard.getTimeWindow().getDefaultDuration());\n         }\n \n         if (endDate.isBefore(startDate)) {\n             throw new IllegalArgumentException(\"`endDate` must be after `startDate`.\");\n         }\n \n-        String tenantId = tenantService.resolveTenant();\n-        Dashboard dashboard = dashboardRepository.get(tenantId, id).orElse(null);\n-        if (dashboard == null) {\n-            return null;\n-        }\n-\n         Duration windowDuration = Duration.ofSeconds(endDate.minus(Duration.ofSeconds(startDate.toEpochSecond())).toEpochSecond());\n         if (windowDuration.compareTo(dashboard.getTimeWindow().getMax()) > 0) {\n             throw new IllegalArgumentException(\"The queried window is larger than the max allowed one.\");",
      "parent_sha": "64108ae24d9f4613b58d834d55968894ab966ed7"
    }
  },
  {
    "oid": "4262ab58944d45f96975c7e9fa20a65ee4243bc5",
    "message": "fix(core): make the RetryTest more resilient",
    "date": "2023-07-11T14:13:03Z",
    "url": "https://github.com/kestra-io/kestra/commit/4262ab58944d45f96975c7e9fa20a65ee4243bc5",
    "details": {
      "sha": "de5b7f6a289e5454241e3fe305e349877fce5776",
      "filename": "core/src/test/java/io/kestra/core/runners/RetryTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/kestra-io/kestra/blob/4262ab58944d45f96975c7e9fa20a65ee4243bc5/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FRetryTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/4262ab58944d45f96975c7e9fa20a65ee4243bc5/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FRetryTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FRetryTest.java?ref=4262ab58944d45f96975c7e9fa20a65ee4243bc5",
      "patch": "@@ -38,10 +38,6 @@ void retryFailed() throws TimeoutException {\n \n         assertThat(execution.getTaskRunList(), hasSize(2));\n         assertThat(execution.getTaskRunList().get(0).getAttempts(), hasSize(5));\n-\n-        // be sure attempts are available on the queue\n-        // we cannot know the exact number of executions, but we should have at least 15 of them\n-        assertThat(executions.size(), greaterThan(15));\n-        assertThat(executions.get(8).getTaskRunList().get(0).getAttempts().size(), is(3));\n+        assertThat(execution.getState().getCurrent(), is(State.Type.FAILED));\n     }\n }",
      "parent_sha": "38beef4919190cb240c2da03028c5b651d5f2baf"
    }
  },
  {
    "oid": "92ff557514972743c38665c0c4be5ac8fedb8527",
    "message": "chore(core): tiny perf improvement in MapUtils.merge()\n\nMapUtils.merge() un-necessary clone the map when there is only one map that is not-null and not-empty which is not needed as the map is not modified but returned immediatly.",
    "date": "2025-01-03T18:33:06Z",
    "url": "https://github.com/kestra-io/kestra/commit/92ff557514972743c38665c0c4be5ac8fedb8527",
    "details": {
      "sha": "d115bbb0f6bbf9e0fa5981d43b7c178e3e1f16dd",
      "filename": "core/src/main/java/io/kestra/core/utils/MapUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/92ff557514972743c38665c0c4be5ac8fedb8527/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Futils%2FMapUtils.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/92ff557514972743c38665c0c4be5ac8fedb8527/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Futils%2FMapUtils.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Futils%2FMapUtils.java?ref=92ff557514972743c38665c0c4be5ac8fedb8527",
      "patch": "@@ -18,11 +18,11 @@ public static Map<String, Object> merge(Map<String, Object> a, Map<String, Objec\n         }\n \n         if (a == null || a.isEmpty()) {\n-            return copyMap(b);\n+            return b;\n         }\n \n         if (b == null || b.isEmpty()) {\n-            return copyMap(a);\n+            return a;\n         }\n \n         Map copy = copyMap(a);",
      "parent_sha": "aa9af94c1409fea3c686037aeab2748780e3e53e"
    }
  },
  {
    "oid": "150f4ff435f602989f15f35f69a15cd7f735ccf6",
    "message": "fix(webserver): micronaut don't handle properly namespace on stats controller",
    "date": "2022-10-18T08:23:06Z",
    "url": "https://github.com/kestra-io/kestra/commit/150f4ff435f602989f15f35f69a15cd7f735ccf6",
    "details": {
      "sha": "1907a43c988d75f7295609139f0adabd8947ec85",
      "filename": "webserver/src/main/java/io/kestra/webserver/controllers/StatsController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/150f4ff435f602989f15f35f69a15cd7f735ccf6/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FStatsController.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/150f4ff435f602989f15f35f69a15cd7f735ccf6/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FStatsController.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FStatsController.java?ref=150f4ff435f602989f15f35f69a15cd7f735ccf6",
      "patch": "@@ -83,7 +83,7 @@ public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlow\n             query,\n             namespace,\n             flowId,\n-            flows != null && flows.get(0).getNamespace() != null ? flows : null,\n+            flows != null && flows.get(0).getNamespace() != null && flows.get(0).getId() != null ? flows : null,\n             startDate != null ? startDate.withZoneSameInstant(ZoneId.systemDefault()) : null,\n             endDate != null ? endDate.withZoneSameInstant(ZoneId.systemDefault()) : null,\n             namespaceOnly != null && namespaceOnly",
      "parent_sha": "4bebfb449fe5c7783c39a760a19a1a4afb659407"
    }
  },
  {
    "oid": "02c189166531f6c4e2fce17962492998f2b7b60c",
    "message": "chore(deps): updated plugin version in PluginInstallCommandTest (#1001)",
    "date": "2023-02-20T13:53:19Z",
    "url": "https://github.com/kestra-io/kestra/commit/02c189166531f6c4e2fce17962492998f2b7b60c",
    "details": {
      "sha": "8303521f76ba2a11b9a4f5ed0c11dd0f71ba5870",
      "filename": "cli/src/test/java/io/kestra/cli/commands/plugins/PluginInstallCommandTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/02c189166531f6c4e2fce17962492998f2b7b60c/cli%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fplugins%2FPluginInstallCommandTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/02c189166531f6c4e2fce17962492998f2b7b60c/cli%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fplugins%2FPluginInstallCommandTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/cli%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fplugins%2FPluginInstallCommandTest.java?ref=02c189166531f6c4e2fce17962492998f2b7b60c",
      "patch": "@@ -30,13 +30,13 @@ void run() throws IOException {\n         pluginsPath.toFile().deleteOnExit();\n \n         try (ApplicationContext ctx = ApplicationContext.run(Environment.CLI, Environment.TEST)) {\n-            String[] args = {\"--plugins\", pluginsPath.toAbsolutePath().toString(), \"io.kestra.plugin:plugin-notifications:0.2.0-SNAPSHOT\"};\n+            String[] args = {\"--plugins\", pluginsPath.toAbsolutePath().toString(), \"io.kestra.plugin:plugin-notifications:0.6.0\"};\n             PicocliRunner.call(PluginInstallCommand.class, ctx, args);\n \n             List<Path> files = Files.list(pluginsPath).collect(Collectors.toList());\n \n             assertThat(files.size(), is(1));\n-            assertThat(files.get(0).getFileName().toString(), is(\"plugin-notifications-0.2.0-SNAPSHOT.jar\"));\n+            assertThat(files.get(0).getFileName().toString(), is(\"plugin-notifications-0.6.0.jar\"));\n         }\n     }\n }",
      "parent_sha": "100d200fc1ec38088bac1ffecfdef68898182d02"
    }
  },
  {
    "oid": "9ba0088439c9384ad5a5d57741638f6ef4907d58",
    "message": "feat(core): skip pip install if requirements is empty (#976)",
    "date": "2023-02-10T10:40:09Z",
    "url": "https://github.com/kestra-io/kestra/commit/9ba0088439c9384ad5a5d57741638f6ef4907d58",
    "details": {
      "sha": "7cc08665d1e3a257743b3991ced954a6d9520b6f",
      "filename": "core/src/main/java/io/kestra/core/tasks/scripts/AbstractPython.java",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/kestra-io/kestra/blob/9ba0088439c9384ad5a5d57741638f6ef4907d58/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fscripts%2FAbstractPython.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/9ba0088439c9384ad5a5d57741638f6ef4907d58/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fscripts%2FAbstractPython.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fscripts%2FAbstractPython.java?ref=9ba0088439c9384ad5a5d57741638f6ef4907d58",
      "patch": "@@ -104,18 +104,14 @@ protected String virtualEnvCommand(RunContext runContext, List<String> requireme\n         if (this.exitOnFailed) {\n             renderer.add(\"set -o errexit\");\n         }\n+        renderer.add(this.pythonPath + \" -m venv --system-site-packages \" + workingDirectory + \" > /dev/null\");\n \n-        String requirementsAsString = \"\";\n         if (requirements != null) {\n-            requirementsAsString = \"./bin/pip install \" + runContext.render(String.join(\" \", requirements), additionalVars) + \" > /dev/null\";\n+            renderer.addAll(Arrays.asList(\n+                \"./bin/pip install pip --upgrade > /dev/null\",\n+                \"./bin/pip install \" + runContext.render(String.join(\" \", requirements), additionalVars) + \" > /dev/null\"));\n         }\n \n-        renderer.addAll(Arrays.asList(\n-            this.pythonPath + \" -m venv --system-site-packages \" + workingDirectory + \" > /dev/null\",\n-            \"./bin/pip install pip --upgrade > /dev/null\",\n-            requirementsAsString\n-        ));\n-\n         return String.join(\"\\n\", renderer);\n     }\n ",
      "parent_sha": "5d6eab51a3d52f2691faded9ec0130279bb26b8e"
    }
  },
  {
    "oid": "631cecc4511b47224a63f1b57d0f7919047d65ed",
    "message": "chore(core): FlowServiceTest.findByNamespacePrefix() is flaky",
    "date": "2024-11-26T10:48:32Z",
    "url": "https://github.com/kestra-io/kestra/commit/631cecc4511b47224a63f1b57d0f7919047d65ed",
    "details": {
      "sha": "02fa9fd3a4a02a97afa568672158463d5e6f06b2",
      "filename": "core/src/test/java/io/kestra/core/services/FlowServiceTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/kestra-io/kestra/blob/631cecc4511b47224a63f1b57d0f7919047d65ed/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FFlowServiceTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/631cecc4511b47224a63f1b57d0f7919047d65ed/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FFlowServiceTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FFlowServiceTest.java?ref=631cecc4511b47224a63f1b57d0f7919047d65ed",
      "patch": "@@ -306,8 +306,8 @@ void delete() {\n \n     @Test\n     void findByNamespacePrefix() {\n-        Flow flow = create(\"findByTest\", \"test\", 1);\n-        FlowWithSource saved = flowRepository.create(flow, flow.generateSource(), flow);\n-        assertThat(flowService.findByNamespacePrefix(null, \"io.kestra\").size(), is(1));\n+        Flow flow = create(\"findByTest\", \"test\", 1).toBuilder().namespace(\"some.namespace\").build();\n+        flowRepository.create(flow, flow.generateSource(), flow);\n+        assertThat(flowService.findByNamespacePrefix(null, \"some.namespace\").size(), is(1));\n     }\n }\n\\ No newline at end of file",
      "parent_sha": "3fea922734f1c9ecda1ef1e9fc448de9729de7cf"
    }
  },
  {
    "oid": "8e27b16eac09d4ac8e21e5de4d369ca0ccbdfad2",
    "message": "fix(core): use a different taskrun for each script runner test\n\nOtherwhise, script runner that handle resuming job will fail tests",
    "date": "2024-03-22T17:13:07Z",
    "url": "https://github.com/kestra-io/kestra/commit/8e27b16eac09d4ac8e21e5de4d369ca0ccbdfad2",
    "details": {
      "sha": "f648dfa4b02b9d419588b5eb8fac3f87f39fb9c8",
      "filename": "core/src/test/java/io/kestra/core/models/script/AbstractScriptRunnerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/8e27b16eac09d4ac8e21e5de4d369ca0ccbdfad2/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fscript%2FAbstractScriptRunnerTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/8e27b16eac09d4ac8e21e5de4d369ca0ccbdfad2/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fscript%2FAbstractScriptRunnerTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fscript%2FAbstractScriptRunnerTest.java?ref=8e27b16eac09d4ac8e21e5de4d369ca0ccbdfad2",
      "patch": "@@ -101,7 +101,7 @@ public String getType() {\n                 return \"Task\";\n             }\n         };\n-        TaskRun taskRun = TaskRun.builder().id(\"taskrun\").taskId(\"task\").flowId(\"flow\").namespace(\"namespace\").executionId(\"execution\")\n+        TaskRun taskRun = TaskRun.builder().id(IdUtils.create()).taskId(\"task\").flowId(\"flow\").namespace(\"namespace\").executionId(\"execution\")\n             .state(new State().withState(State.Type.RUNNING))\n             .build();\n         Flow flow = Flow.builder().id(\"flow\").namespace(\"namespace\").revision(1)",
      "parent_sha": "4e810abef9d839d7f3abe168c703cbf37bed08dc"
    }
  },
  {
    "oid": "398825b8bb46cf124541570d8a1e7607d936220b",
    "message": "fix(core): prevent NPE for empty input files",
    "date": "2024-04-04T15:08:50Z",
    "url": "https://github.com/kestra-io/kestra/commit/398825b8bb46cf124541570d8a1e7607d936220b",
    "details": {
      "sha": "626048d8fcc16412f14d6c52821a34a35dd4cdbd",
      "filename": "core/src/main/java/io/kestra/core/runners/FilesService.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/kestra-io/kestra/blob/398825b8bb46cf124541570d8a1e7607d936220b/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FFilesService.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/398825b8bb46cf124541570d8a1e7607d936220b/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FFilesService.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FFilesService.java?ref=398825b8bb46cf124541570d8a1e7607d936220b",
      "patch": "@@ -45,13 +45,17 @@ public static Map<String, String> inputFiles(RunContext runContext, Map<String,\n                  }\n \n                  var fileContent = runContext.render(input, additionalVars);\n-                 if (fileContent.startsWith(\"kestra://\")) {\n-                     try (var is = runContext.uriToInputStream(URI.create(fileContent));\n-                          var out = new FileOutputStream(file)) {\n-                         IOUtils.copyLarge(is, out);\n-                     }\n+                 if (fileContent == null) {\n+                    file.createNewFile();\n                  } else {\n-                     Files.write(file.toPath(), fileContent.getBytes());\n+                     if (fileContent.startsWith(\"kestra://\")) {\n+                         try (var is = runContext.uriToInputStream(URI.create(fileContent));\n+                              var out = new FileOutputStream(file)) {\n+                             IOUtils.copyLarge(is, out);\n+                         }\n+                     } else {\n+                         Files.write(file.toPath(), fileContent.getBytes());\n+                     }\n                  }\n              }));\n ",
      "parent_sha": "297460b3b166f9a1d32cbb2f19bb5706aad22416"
    }
  },
  {
    "oid": "1b3717fe2df3a49cada4d41a996da07952c64d3f",
    "message": "fix(core): FlowTriggerTest\n\nThe trigger-flow-listener-namespace-condition flow can be triggered by any of the flow of the namespace. As some flow are trigger by other, we cannot be sure that it has been trigered by the one we want to I relax the assertion.",
    "date": "2024-02-28T16:30:37Z",
    "url": "https://github.com/kestra-io/kestra/commit/1b3717fe2df3a49cada4d41a996da07952c64d3f",
    "details": {
      "sha": "29b5709f606727f917cd0d61428626efdbd84c9c",
      "filename": "core/src/test/java/io/kestra/core/runners/FlowTriggerCaseTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/kestra-io/kestra/blob/1b3717fe2df3a49cada4d41a996da07952c64d3f/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FFlowTriggerCaseTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/1b3717fe2df3a49cada4d41a996da07952c64d3f/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FFlowTriggerCaseTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FFlowTriggerCaseTest.java?ref=1b3717fe2df3a49cada4d41a996da07952c64d3f",
      "patch": "@@ -15,6 +15,7 @@\n import java.util.concurrent.atomic.AtomicReference;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.anyOf;\n import static org.hamcrest.Matchers.is;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n@@ -74,8 +75,8 @@ public void trigger() throws InterruptedException, TimeoutException {\n         assertThat(flowListenerNoInput.get().getState().getCurrent(), is(State.Type.SUCCESS));\n \n         assertThat(flowListenerNamespace.get().getTaskRunList().size(), is(1));\n-        assertThat(flowListenerNamespace.get().getTrigger().getVariables().get(\"executionId\"), is(execution.getId()));\n         assertThat(flowListenerNamespace.get().getTrigger().getVariables().get(\"namespace\"), is(\"io.kestra.tests.trigger\"));\n-        assertThat(flowListenerNamespace.get().getTrigger().getVariables().get(\"flowId\"), is(\"trigger-flow\"));\n+        // it will be triggered for 'trigger-flow' or any of the 'trigger-flow-listener*', so we only assert that it's one of them\n+        assertThat(flowListenerNamespace.get().getTrigger().getVariables().get(\"flowId\"), anyOf(is(\"trigger-flow\"), is(\"trigger-flow-listener-no-inputs\"), is(\"trigger-flow-listener\")));\n     }\n }",
      "parent_sha": "17a25414865e495622aaa9b9cbbb1011956ec2d7"
    }
  },
  {
    "oid": "ed5b9222023bb5c376d69f49f1bf1ce62e6aff23",
    "message": "fix(core): better worker exception capture.\n\nSome case where exception is raise in a thread pool where not catched.\nUse a specific thread to be able to catch all exception",
    "date": "2020-03-15T13:10:10Z",
    "url": "https://github.com/kestra-io/kestra/commit/ed5b9222023bb5c376d69f49f1bf1ce62e6aff23",
    "details": {
      "sha": "659e8029bcc68a1fa1fc89c044abcee503b1712f",
      "filename": "core/src/main/java/org/kestra/core/runners/Worker.java",
      "status": "modified",
      "additions": 50,
      "deletions": 12,
      "changes": 62,
      "blob_url": "https://github.com/kestra-io/kestra/blob/ed5b9222023bb5c376d69f49f1bf1ce62e6aff23/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/ed5b9222023bb5c376d69f49f1bf1ce62e6aff23/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Frunners%2FWorker.java?ref=ed5b9222023bb5c376d69f49f1bf1ce62e6aff23",
      "patch": "@@ -5,6 +5,7 @@\n import com.google.common.collect.ImmutableMap;\n import com.google.common.hash.Hashing;\n import io.micronaut.context.ApplicationContext;\n+import lombok.Getter;\n import net.jodah.failsafe.Failsafe;\n import net.jodah.failsafe.RetryPolicy;\n import org.kestra.core.queues.QueueException;\n@@ -147,7 +148,6 @@ private RetryPolicy<WorkerTask> retryPolicy(Task task) {\n \n     private WorkerTask runAttempt(WorkerTask workerTask) {\n         RunnableTask<?> task = (RunnableTask<?>) workerTask.getTask();\n-        State.Type state;\n \n         RunContext runContext = workerTask\n             .getRunContext()\n@@ -158,29 +158,33 @@ private WorkerTask runAttempt(WorkerTask workerTask) {\n         TaskRunAttempt.TaskRunAttemptBuilder builder = TaskRunAttempt.builder()\n             .state(new State());\n \n-        Output output = null;\n         AtomicInteger metricRunningCount = getMetricRunningCount(workerTask);\n \n+        metricRunningCount.incrementAndGet();\n+\n+        WorkerThread workerThread = new WorkerThread(logger, task, runContext);\n+        workerThread.start();\n+\n+        State.Type state;\n         try {\n-            metricRunningCount.incrementAndGet();\n-            output = task.run(runContext);\n-            state = State.Type.SUCCESS;\n-        } catch (Exception e) {\n-            logger.error(e.getMessage(), e);\n+            workerThread.join();\n+            state = workerThread.getTaskState();\n+        } catch (InterruptedException e) {\n+            logger.error(\"Failed to join WorkerThread {}\", e.getMessage(), e);\n             state = State.Type.FAILED;\n-        } finally {\n-            metricRunningCount.decrementAndGet();\n         }\n \n+        metricRunningCount.decrementAndGet();\n+\n         // attempt\n         TaskRunAttempt taskRunAttempt = builder\n             .logs(runContext.logs())\n             .metrics(runContext.metrics())\n             .build()\n             .withState(state);\n \n-        if (output != null) {\n-            logger.debug(\"Outputs\\n{}\", JacksonMapper.log(output));\n+        if (workerThread.getTaskOutput() != null) {\n+            logger.debug(\"Outputs\\n{}\", JacksonMapper.log(workerThread.getTaskOutput()));\n         }\n \n         if (runContext.metrics().size() > 0) {\n@@ -197,7 +201,7 @@ private WorkerTask runAttempt(WorkerTask workerTask) {\n             .withTaskRun(\n                 workerTask.getTaskRun()\n                     .withAttempts(attempts)\n-                    .withOutputs(output != null ? output.toMap() : ImmutableMap.of())\n+                    .withOutputs(workerThread.getTaskOutput() != null ? workerThread.getTaskOutput().toMap() : ImmutableMap.of())\n             );\n     }\n \n@@ -218,4 +222,38 @@ public AtomicInteger getMetricRunningCount(WorkerTask workerTask) {\n                 metricRegistry.tags(workerTask)\n             ));\n     }\n+\n+    @Getter\n+    public static class WorkerThread extends Thread {\n+        Logger logger;\n+        RunnableTask<?> task;\n+        RunContext runContext;\n+\n+        Output taskOutput;\n+        org.kestra.core.models.flows.State.Type taskState;\n+\n+        public WorkerThread(Logger logger, RunnableTask<?> task, RunContext runContext) {\n+            super(\"WorkerThread\");\n+            this.setUncaughtExceptionHandler(this::exceptionHandler);\n+\n+            this.logger = logger;\n+            this.task = task;\n+            this.runContext = runContext;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                taskOutput = task.run(runContext);\n+                taskState = org.kestra.core.models.flows.State.Type.SUCCESS;\n+            } catch (Exception e) {\n+                this.exceptionHandler(this, e);\n+            }\n+        }\n+\n+        private void exceptionHandler(Thread t, Throwable e) {\n+            logger.error(e.getMessage(), e);\n+            taskState = org.kestra.core.models.flows.State.Type.FAILED;\n+        }\n+    }\n }",
      "parent_sha": "50907b12b19bdfc6ef95f20082f3c2129549ae69"
    }
  },
  {
    "oid": "d5a2f4430ffd3670091d2cfc35f4d311a62baa3a",
    "message": "fix(core): HttpClient log the URL even if it's a secret\n\nFixes https://github.com/kestra-io/kestra/issues/8092",
    "date": "2025-03-27T15:00:43Z",
    "url": "https://github.com/kestra-io/kestra/commit/d5a2f4430ffd3670091d2cfc35f4d311a62baa3a",
    "details": {
      "sha": "9620fcf1be2eac935afe3abf6c44fdb59969bd03",
      "filename": "core/src/main/java/io/kestra/core/http/client/apache/RunContextResponseInterceptor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/d5a2f4430ffd3670091d2cfc35f4d311a62baa3a/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fhttp%2Fclient%2Fapache%2FRunContextResponseInterceptor.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/d5a2f4430ffd3670091d2cfc35f4d311a62baa3a/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fhttp%2Fclient%2Fapache%2FRunContextResponseInterceptor.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fhttp%2Fclient%2Fapache%2FRunContextResponseInterceptor.java?ref=d5a2f4430ffd3670091d2cfc35f4d311a62baa3a",
      "patch": "@@ -23,9 +23,9 @@ public void process(HttpResponse response, EntityDetails entity, HttpContext con\n             response instanceof BasicClassicHttpResponse httpResponse\n         ) {\n             try {\n+                // FIXME temporary fix for https://github.com/kestra-io/kestra/issues/8092\n                 runContext.logger().debug(\n-                    \"Request '{}' from '{}' with the response code '{}'\",\n-                    httpClientContext.getRequest().getUri(),\n+                    \"Request \" +  httpClientContext.getRequest().getUri() + \" from '{}' with the response code '{}'\",\n                     httpClientContext.getEndpointDetails().getRemoteAddress(),\n                     response.getCode()\n                 );",
      "parent_sha": "0299e0d5ceb1d5b1f2c4983a075e191545e218f6"
    }
  },
  {
    "oid": "251f8e5e44afdec624a4230fccd925b44f29077e",
    "message": "fix(core): set anyOf map instead of list (#4519)\n\nclose #4516",
    "date": "2024-08-02T06:21:58Z",
    "url": "https://github.com/kestra-io/kestra/commit/251f8e5e44afdec624a4230fccd925b44f29077e",
    "details": {
      "sha": "b5dbf2846e7731d65bd5dab456088bd06b460e1a",
      "filename": "core/src/main/java/io/kestra/plugin/core/namespace/UploadFiles.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/251f8e5e44afdec624a4230fccd925b44f29077e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fnamespace%2FUploadFiles.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/251f8e5e44afdec624a4230fccd925b44f29077e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fnamespace%2FUploadFiles.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fnamespace%2FUploadFiles.java?ref=251f8e5e44afdec624a4230fccd925b44f29077e",
      "patch": "@@ -128,7 +128,7 @@ public class UploadFiles extends Task implements RunnableTask<UploadFiles.Output\n             \"output a map of files so that you can directly pass the output property to this task e.g. \" +\n             \"[outputFiles in the S3 Downloads task](https://kestra.io/plugins/plugin-aws/tasks/s3/io.kestra.plugin.aws.s3.downloads#outputfiles) \" +\n             \"or the [files in the Archive Decompress task](https://kestra.io/plugins/plugin-compress/tasks/io.kestra.plugin.compress.archivedecompress#files).\",\n-        anyOf = {List.class, String.class}\n+        anyOf = {Map.class, String.class}\n     )\n     @PluginProperty(dynamic = true)\n     private Object filesMap;",
      "parent_sha": "9e67f52dfb1f068c16d614f92b0fb64584f17338"
    }
  },
  {
    "oid": "c8f5994d0c4e78ebfb98092cdba4d6405ce9a268",
    "message": "fix(core): Scheduler with first run can miss executions\n\nclose #147",
    "date": "2020-08-31T13:26:24Z",
    "url": "https://github.com/kestra-io/kestra/commit/c8f5994d0c4e78ebfb98092cdba4d6405ce9a268",
    "details": {
      "sha": "f2fbf7bad0246cf7dd454d8f8d5d16bf2bb27e9f",
      "filename": "core/src/main/java/org/kestra/core/schedulers/Scheduler.java",
      "status": "modified",
      "additions": 28,
      "deletions": 15,
      "changes": 43,
      "blob_url": "https://github.com/kestra-io/kestra/blob/c8f5994d0c4e78ebfb98092cdba4d6405ce9a268/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fschedulers%2FScheduler.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/c8f5994d0c4e78ebfb98092cdba4d6405ce9a268/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fschedulers%2FScheduler.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fschedulers%2FScheduler.java?ref=c8f5994d0c4e78ebfb98092cdba4d6405ce9a268",
      "patch": "@@ -40,7 +40,7 @@ public class Scheduler implements Runnable, AutoCloseable {\n     private final ExecutionRepositoryInterface executionRepository;\n \n     private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n-    private Map<String, Optional<Trigger>> lastTriggers = new ConcurrentHashMap<>();\n+    private Map<String, Trigger> lastTriggers = new ConcurrentHashMap<>();\n \n     @Inject\n     public Scheduler(\n@@ -126,7 +126,7 @@ private synchronized void handle() {\n                 .build()\n             )\n             .peek(this::getLastTrigger)\n-            .filter(this::isExecutionRunning)\n+            .filter(this::isExecutionNotRunning)\n             .map(f -> {\n                 synchronized (this) {\n                     if (!lastTriggers.containsKey(f.getTriggerContext().uid())) {\n@@ -135,7 +135,7 @@ private synchronized void handle() {\n \n                     return FlowWithPollingTriggerNextDate.of(\n                         f,\n-                        f.getTrigger().nextDate(lastTriggers.get(f.getTriggerContext().uid()))\n+                        f.getTrigger().nextDate(Optional.of(lastTriggers.get(f.getTriggerContext().uid())))\n                     );\n                 }\n             })\n@@ -148,20 +148,21 @@ private synchronized void handle() {\n             .forEach(executionQueue::emit);\n     }\n \n-    private boolean isExecutionRunning(FlowWithPollingTrigger f) {\n-        Optional<Trigger> lastTrigger = lastTriggers.get(f.getTriggerContext().uid());\n-        if (lastTrigger.isEmpty()) {\n+    private boolean isExecutionNotRunning(FlowWithPollingTrigger f) {\n+        Trigger lastTrigger = lastTriggers.get(f.getTriggerContext().uid());\n+\n+        if (lastTrigger.getExecutionId() == null) {\n             return true;\n         }\n \n-        Optional<Execution> execution = executionRepository.findById(lastTrigger.get().getExecutionId());\n+        Optional<Execution> execution = executionRepository.findById(lastTrigger.getExecutionId());\n \n         // indexer hasn't received the execution, we skip\n         if (execution.isEmpty()) {\n             log.warn(\"Execution '{}' for flow '{}.{}' is not found, schedule is blocked\",\n-                lastTrigger.get().getExecutionId(),\n-                lastTrigger.get().getNamespace(),\n-                lastTrigger.get().getFlowId()\n+                lastTrigger.getExecutionId(),\n+                lastTrigger.getNamespace(),\n+                lastTrigger.getFlowId()\n             );\n \n             return false;\n@@ -174,9 +175,9 @@ private boolean isExecutionRunning(FlowWithPollingTrigger f) {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Execution '{}' for flow '{}.{}' is still '{}', waiting for next backfill\",\n-                lastTrigger.get().getExecutionId(),\n-                lastTrigger.get().getNamespace(),\n-                lastTrigger.get().getFlowId(),\n+                lastTrigger.getExecutionId(),\n+                lastTrigger.getNamespace(),\n+                lastTrigger.getFlowId(),\n                 execution.get().getState().getCurrent()\n             );\n         }\n@@ -198,7 +199,19 @@ private void log(ExecutionWithTrigger executionWithTrigger) {\n     private void getLastTrigger(FlowWithPollingTrigger f) {\n         lastTriggers.computeIfAbsent(\n             f.getTriggerContext().uid(),\n-            s -> triggerContextRepository.findLast(f.getTriggerContext())\n+            s -> triggerContextRepository\n+                .findLast(f.getTriggerContext())\n+                // we don't find, so never started execution, create an trigger context with next date.\n+                // this allow some edge case when the evaluation loop of schedulers will change second\n+                // between start and end\n+                .orElse(Trigger.builder()\n+                    .date(ZonedDateTime.now(ZoneId.systemDefault()))\n+                    .flowId(f.getFlow().getId())\n+                    .flowRevision(f.getFlow().getRevision())\n+                    .namespace(f.getFlow().getNamespace())\n+                    .triggerId(f.getTriggerContext().getTriggerId())\n+                    .build()\n+                )\n         );\n     }\n \n@@ -208,7 +221,7 @@ private void saveLastTrigger(ExecutionWithTrigger executionWithTrigger) {\n             executionWithTrigger.getExecution()\n         );\n \n-        this.lastTriggers.put(executionWithTrigger.getTriggerContext().uid(), Optional.of(trigger));\n+        this.lastTriggers.put(executionWithTrigger.getTriggerContext().uid(), trigger);\n         this.triggerContextRepository.save(trigger);\n     }\n ",
      "parent_sha": "18db0b7c8051234dcef0a73ad5c7ee4ebda556f4"
    }
  },
  {
    "oid": "9a56b763f47aaa192b3f2af6231448e59b7b6ad6",
    "message": "chore(core): make registry unregister usable with immutable list",
    "date": "2025-03-06T07:48:36Z",
    "url": "https://github.com/kestra-io/kestra/commit/9a56b763f47aaa192b3f2af6231448e59b7b6ad6",
    "details": {
      "sha": "f2dfb6f586c5dfabe13451286a638b7857447121",
      "filename": "core/src/main/java/io/kestra/core/plugins/DefaultPluginRegistry.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/9a56b763f47aaa192b3f2af6231448e59b7b6ad6/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fplugins%2FDefaultPluginRegistry.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/9a56b763f47aaa192b3f2af6231448e59b7b6ad6/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fplugins%2FDefaultPluginRegistry.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fplugins%2FDefaultPluginRegistry.java?ref=9a56b763f47aaa192b3f2af6231448e59b7b6ad6",
      "patch": "@@ -134,9 +134,11 @@ public void unregister(final List<RegisteredPlugin> pluginsToUnregister) {\n             return;\n         }\n \n+        var mutablePluginsToUnregister = new ArrayList<>(pluginsToUnregister);\n+\n         lock.lock();\n         try {\n-            ListIterator<RegisteredPlugin> iter = pluginsToUnregister.listIterator();\n+            ListIterator<RegisteredPlugin> iter = mutablePluginsToUnregister.listIterator();\n             while (iter.hasNext()) {\n                 final RegisteredPlugin current = iter.next();\n                 final PluginBundleIdentifier identifier = PluginBundleIdentifier.of(current);",
      "parent_sha": "40d37d9e42c24efed16751d6f127b09da0a91f6c"
    }
  },
  {
    "oid": "7eb27e02cad90cd8d4df42459d64cfd3c3f822b0",
    "message": "feat(core): add an AI plugin category (#1689)",
    "date": "2023-07-03T14:47:51Z",
    "url": "https://github.com/kestra-io/kestra/commit/7eb27e02cad90cd8d4df42459d64cfd3c3f822b0",
    "details": {
      "sha": "6149fc98073b1e02b320124ae1dfb821f84dbc11",
      "filename": "core/src/main/java/io/kestra/core/models/annotations/PluginSubGroup.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/kestra-io/kestra/blob/7eb27e02cad90cd8d4df42459d64cfd3c3f822b0/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fannotations%2FPluginSubGroup.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/7eb27e02cad90cd8d4df42459d64cfd3c3f822b0/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fannotations%2FPluginSubGroup.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fannotations%2FPluginSubGroup.java?ref=7eb27e02cad90cd8d4df42459d64cfd3c3f822b0",
      "patch": "@@ -26,6 +26,7 @@ enum PluginCategory {\n         CLOUD,\n         STORAGE,\n         MISC,\n-        TOOL\n+        TOOL,\n+        AI\n     }\n }",
      "parent_sha": "44dd831a17af8f8490ecfd50b90de3b85cd9eee2"
    }
  },
  {
    "oid": "5ab701c3268cf204a826963217479e9e8a7de86a",
    "message": "feat(core): set to killed before set it to running (#2001)\n\nThis avoid CREATED -> RUNNING -> KILLING when we kow we will kill the task.",
    "date": "2023-10-09T14:22:19Z",
    "url": "https://github.com/kestra-io/kestra/commit/5ab701c3268cf204a826963217479e9e8a7de86a",
    "details": {
      "sha": "d74371c6e5b0538d2b858c90613f99857cb7a2ed",
      "filename": "core/src/main/java/io/kestra/core/runners/Worker.java",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/kestra-io/kestra/blob/5ab701c3268cf204a826963217479e9e8a7de86a/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/5ab701c3268cf204a826963217479e9e8a7de86a/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java?ref=5ab701c3268cf204a826963217479e9e8a7de86a",
      "patch": "@@ -275,6 +275,19 @@ private WorkerTaskResult run(WorkerTask workerTask, Boolean cleanUp) throws Queu\n                 ));\n         }\n \n+        if (killedExecution.contains(workerTask.getTaskRun().getExecutionId())) {\n+            workerTask = workerTask.withTaskRun(workerTask.getTaskRun().withState(State.Type.KILLED));\n+\n+            WorkerTaskResult workerTaskResult = new WorkerTaskResult(workerTask);\n+            this.workerTaskResultQueue.emit(workerTaskResult);\n+\n+            this.logTerminated(workerTask);\n+\n+            //FIXME should we remove it from the killedExecution set ?\n+\n+            return workerTaskResult;\n+        }\n+\n         workerTask.logger().info(\n             \"[namespace: {}] [flow: {}] [task: {}] [execution: {}] [taskrun: {}] [value: {}] Type {} started\",\n             workerTask.getTaskRun().getNamespace(),\n@@ -293,20 +306,6 @@ private WorkerTaskResult run(WorkerTask workerTask, Boolean cleanUp) throws Queu\n         workerTask = workerTask.withTaskRun(workerTask.getTaskRun().withState(State.Type.RUNNING));\n         this.workerTaskResultQueue.emit(new WorkerTaskResult(workerTask));\n \n-        // killed cased\n-        if (killedExecution.contains(workerTask.getTaskRun().getExecutionId())) {\n-            workerTask = workerTask.withTaskRun(workerTask.getTaskRun().withState(State.Type.KILLED));\n-\n-            WorkerTaskResult workerTaskResult = new WorkerTaskResult(workerTask);\n-            this.workerTaskResultQueue.emit(workerTaskResult);\n-\n-            this.logTerminated(workerTask);\n-\n-            //FIXME should we remove it from the killedExecution set ?\n-\n-            return workerTaskResult;\n-        }\n-\n         AtomicReference<WorkerTask> current = new AtomicReference<>(workerTask);\n \n         // run",
      "parent_sha": "457734b500f9d306ac1a53b65a40ff94a7365c20"
    }
  },
  {
    "oid": "a2d6b3a1ad979f8a228d1b69d05971f73e5267dc",
    "message": "chore(refactor): refactor KafkaScheduler",
    "date": "2021-08-13T16:01:31Z",
    "url": "https://github.com/kestra-io/kestra/commit/a2d6b3a1ad979f8a228d1b69d05971f73e5267dc",
    "details": {
      "sha": "1596761b2c923349e005f0650288536491230643",
      "filename": "runner-kafka/src/main/java/io/kestra/runner/kafka/KafkaScheduler.java",
      "status": "modified",
      "additions": 23,
      "deletions": 24,
      "changes": 47,
      "blob_url": "https://github.com/kestra-io/kestra/blob/a2d6b3a1ad979f8a228d1b69d05971f73e5267dc/runner-kafka%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Frunner%2Fkafka%2FKafkaScheduler.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/a2d6b3a1ad979f8a228d1b69d05971f73e5267dc/runner-kafka%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Frunner%2Fkafka%2FKafkaScheduler.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/runner-kafka%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Frunner%2Fkafka%2FKafkaScheduler.java?ref=a2d6b3a1ad979f8a228d1b69d05971f73e5267dc",
      "patch": "@@ -59,8 +59,8 @@ public class KafkaScheduler extends AbstractScheduler {\n \n     private final Map<String, Trigger> triggerLock = new ConcurrentHashMap<>();\n \n-    private KafkaStreamService.Stream stateStream;\n-    private KafkaStreamService.Stream cleanTriggerStream;\n+    protected KafkaStreamService.Stream stateStream;\n+    protected KafkaStreamService.Stream cleanTriggerStream;\n \n     @SuppressWarnings(\"unchecked\")\n     public KafkaScheduler(\n@@ -90,7 +90,7 @@ public KafkaScheduler(\n     }\n \n     public class SchedulerCleaner {\n-        private Topology topology() {\n+        private StreamsBuilder topology() {\n             StreamsBuilder builder = new KafkaStreamsBuilder();\n \n             KStream<String, Executor> executorKStream = kafkaStreamSourceService.executorKStream(builder);\n@@ -120,19 +120,12 @@ private Topology topology() {\n                     Produced.with(Serdes.String(), JsonSerde.of(Trigger.class))\n                 );\n \n-            // build\n-            Topology topology = builder.build();\n-\n-            if (log.isTraceEnabled()) {\n-                log.trace(topology.describe().toString());\n-            }\n-\n-            return topology;\n+            return builder;\n         }\n     }\n \n     public class SchedulerState {\n-        public Topology topology() {\n+        public StreamsBuilder topology() {\n             StreamsBuilder builder = new KafkaStreamsBuilder();\n \n             // executor global state store\n@@ -159,14 +152,7 @@ public Topology topology() {\n                 () -> new GlobalStateLockProcessor<>(STATESTORE_TRIGGER, triggerLock)\n             );\n \n-            // build\n-            Topology topology = builder.build();\n-\n-            if (log.isTraceEnabled()) {\n-                log.trace(topology.describe().toString());\n-            }\n-\n-            return topology;\n+            return builder;\n         }\n     }\n \n@@ -203,13 +189,22 @@ protected synchronized void saveLastTriggerAndEmitExecution(SchedulerExecutionWi\n         kafkaProducer.commitTransaction();\n     }\n \n-    @Override\n-    public void run() {\n+    protected KafkaStreamService.Stream init(Class<?> group, StreamsBuilder builder) {\n+        Topology topology = builder.build();\n+\n+        if (log.isTraceEnabled()) {\n+            log.trace(topology.describe().toString());\n+        }\n+\n+        return kafkaStreamService.of(group, topology);\n+    }\n+\n+    public void initStream() {\n         kafkaAdminService.createIfNotExist(Flow.class);\n         kafkaAdminService.createIfNotExist(Executor.class);\n         kafkaAdminService.createIfNotExist(Trigger.class);\n \n-        this.stateStream = kafkaStreamService.of(SchedulerState.class, new SchedulerState().topology());\n+        this.stateStream = this.init(SchedulerState.class, new SchedulerState().topology());\n         this.stateStream.start((newState, oldState) -> {\n             this.isReady = newState == KafkaStreams.State.RUNNING;\n         });\n@@ -224,9 +219,13 @@ public void run() {\n             stateStream.store(StoreQueryParameters.fromNameAndType(STATESTORE_EXECUTOR, QueryableStoreTypes.keyValueStore()))\n         );\n \n-        this.cleanTriggerStream = kafkaStreamService.of(SchedulerCleaner.class, new SchedulerCleaner().topology());\n+        this.cleanTriggerStream = this.init(SchedulerCleaner.class, new SchedulerCleaner().topology());\n         this.cleanTriggerStream.start();\n+    }\n \n+    @Override\n+    public void run() {\n+        this.initStream();\n         super.run();\n     }\n ",
      "parent_sha": "e059a899a0869098a4803b58696382ad60bec30b"
    }
  },
  {
    "oid": "d2d26351bd22ebab9f3de32a8a9a05105f6fa514",
    "message": "fix(core): namespace service now properly detects namespaces with flows inside",
    "date": "2025-03-28T10:18:34Z",
    "url": "https://github.com/kestra-io/kestra/commit/d2d26351bd22ebab9f3de32a8a9a05105f6fa514",
    "details": {
      "sha": "70b9e4b6bb54dc911bbb565edf524e41a3fef1a3",
      "filename": "core/src/main/java/io/kestra/core/services/NamespaceService.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/kestra-io/kestra/blob/d2d26351bd22ebab9f3de32a8a9a05105f6fa514/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FNamespaceService.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/d2d26351bd22ebab9f3de32a8a9a05105f6fa514/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FNamespaceService.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FNamespaceService.java?ref=d2d26351bd22ebab9f3de32a8a9a05105f6fa514",
      "patch": "@@ -1,9 +1,11 @@\n package io.kestra.core.services;\n \n import io.kestra.core.repositories.FlowRepositoryInterface;\n+import io.kestra.core.utils.NamespaceUtils;\n import jakarta.inject.Inject;\n import jakarta.inject.Singleton;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n@@ -19,7 +21,7 @@ public NamespaceService(Optional<FlowRepositoryInterface> flowRepository) {\n     }\n \n     /**\n-     * Checks whether a given namespace exists.\n+     * Checks whether a given namespace exists. A namespace is considered existing if at least one Flow is within the namespace or a parent namespace\n      *\n      * @param tenant        The tenant ID\n      * @param namespace     The namespace - cannot be null.\n@@ -29,7 +31,10 @@ public boolean isNamespaceExists(String tenant, String namespace) {\n         Objects.requireNonNull(namespace, \"namespace cannot be null\");\n \n         if (flowRepository.isPresent()) {\n-            List<String> namespaces = flowRepository.get().findDistinctNamespace(tenant);\n+            List<String> namespaces = flowRepository.get().findDistinctNamespace(tenant).stream()\n+                .map(NamespaceUtils::asTree)\n+                .flatMap(Collection::stream)\n+                .toList();\n             return namespaces.stream().anyMatch(ns -> ns.equals(namespace) || ns.startsWith(namespace));\n         }\n         return false;",
      "parent_sha": "f14b638f73c01c092918625c8a6318054102aabe"
    }
  },
  {
    "oid": "f783ab72b59aad99718e186b0cb6daedd0f608e6",
    "message": "fix(test): attempt at making the test not flakky (#7400)",
    "date": "2025-02-17T08:20:26Z",
    "url": "https://github.com/kestra-io/kestra/commit/f783ab72b59aad99718e186b0cb6daedd0f608e6",
    "details": {
      "sha": "7a21ebe59436c222ee21d935218a49e620806b92",
      "filename": "core/src/test/java/io/kestra/plugin/core/trigger/ScheduleTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/kestra-io/kestra/blob/f783ab72b59aad99718e186b0cb6daedd0f608e6/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Ftrigger%2FScheduleTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/f783ab72b59aad99718e186b0cb6daedd0f608e6/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Ftrigger%2FScheduleTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Ftrigger%2FScheduleTest.java?ref=f783ab72b59aad99718e186b0cb6daedd0f608e6",
      "patch": "@@ -248,12 +248,12 @@ void shouldNotReturnExecutionForBackFillWhenCurrentDateIsBeforeScheduleDate() th\n     shouldReturnExecutionForBackFillWhenCurrentDateIsAfterScheduleDate() throws Exception {\n         // Given\n         Schedule trigger = Schedule.builder().id(\"schedule\").cron(TEST_CRON_EVERYDAY_AT_8).build();\n-        ZonedDateTime now = ZonedDateTime.now();\n-        TriggerContext triggerContext = triggerContext(now, trigger).toBuilder()\n+        ZonedDateTime now = ZonedDateTime.of(2025, 1, 1, 0, 0, 0, 0, ZoneId.systemDefault());\n+        TriggerContext triggerContext = triggerContext(ZonedDateTime.now(), trigger).toBuilder()\n             .backfill(Backfill\n                 .builder()\n-                .currentDate(ZonedDateTime.now().with(LocalTime.MIN).plus(Duration.ofHours(8)))\n-                .end(ZonedDateTime.now().with(LocalTime.MAX))\n+                .currentDate(now.with(LocalTime.MIN).plus(Duration.ofHours(8)))\n+                .end(now.with(LocalTime.MAX))\n                 .build()\n             )\n             .build();",
      "parent_sha": "72e78c8c31163b96ce9a681aa9045231cb7e480e"
    }
  },
  {
    "oid": "5aba92f4d05db92f138f65077c360c88c4c0461e",
    "message": "feat(core): user virtual threads in the Process task runner\n\nThis is safe as those threads are mainly sleeping.",
    "date": "2024-06-17T07:26:52Z",
    "url": "https://github.com/kestra-io/kestra/commit/5aba92f4d05db92f138f65077c360c88c4c0461e",
    "details": {
      "sha": "14632d7d32ea8bb5c7fcfce7621ee9a7f308e159",
      "filename": "core/src/main/java/io/kestra/plugin/core/runner/Process.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/kestra-io/kestra/blob/5aba92f4d05db92f138f65077c360c88c4c0461e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Frunner%2FProcess.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/5aba92f4d05db92f138f65077c360c88c4c0461e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Frunner%2FProcess.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Frunner%2FProcess.java?ref=5aba92f4d05db92f138f65077c360c88c4c0461e",
      "patch": "@@ -101,11 +101,11 @@ public RunnerResult run(RunContext runContext, TaskCommands taskCommands, List<S\n         long pid = process.pid();\n         logger.debug(\"Starting command with pid {} [{}]\", pid, String.join(\" \", taskCommands.getCommands()));\n \n-        LogThread stdOut = new LogThread(process.getInputStream(), defaultLogConsumer, false);\n-        LogThread stdErr = new LogThread(process.getErrorStream(), defaultLogConsumer, true);\n+        LogRunnable stdOutRunnable = new LogRunnable(process.getInputStream(), defaultLogConsumer, false);\n+        LogRunnable stdErrRunnable = new LogRunnable(process.getErrorStream(), defaultLogConsumer, true);\n+        Thread stdOut = Thread.startVirtualThread(stdOutRunnable);\n+        Thread stdErr = Thread.startVirtualThread(stdErrRunnable);\n \n-        stdOut.start();\n-        stdErr.start();\n \n         try {\n             int exitCode = process.waitFor();\n@@ -151,14 +151,14 @@ private void killDescendantsOf(ProcessHandle process, Logger logger) {\n         });\n     }\n \n-    public static class LogThread extends Thread {\n+    public static class LogRunnable implements Runnable {\n         private final InputStream inputStream;\n \n         private final AbstractLogConsumer logConsumerInterface;\n \n         private final boolean isStdErr;\n \n-        protected LogThread(InputStream inputStream, AbstractLogConsumer logConsumerInterface, boolean isStdErr) {\n+        protected LogRunnable(InputStream inputStream, AbstractLogConsumer logConsumerInterface, boolean isStdErr) {\n             this.inputStream = inputStream;\n             this.logConsumerInterface = logConsumerInterface;\n             this.isStdErr = isStdErr;",
      "parent_sha": "7779a4f7a3fd278660a2a934510a9773502f8632"
    }
  },
  {
    "oid": "ca888aa98a4fb6e1422240b2ba0d18665c0dd431",
    "message": "fix(webserver): retry flaky test ExecutionControllerTest.kill()",
    "date": "2024-07-17T10:56:54Z",
    "url": "https://github.com/kestra-io/kestra/commit/ca888aa98a4fb6e1422240b2ba0d18665c0dd431",
    "details": {
      "sha": "d593fdd8b616ae8d24b65f30d1d6258113ae854b",
      "filename": "webserver/src/test/java/io/kestra/webserver/controllers/api/ExecutionControllerTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/ca888aa98a4fb6e1422240b2ba0d18665c0dd431/webserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FExecutionControllerTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/ca888aa98a4fb6e1422240b2ba0d18665c0dd431/webserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FExecutionControllerTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FExecutionControllerTest.java?ref=ca888aa98a4fb6e1422240b2ba0d18665c0dd431",
      "patch": "@@ -39,6 +39,7 @@\n import io.micronaut.runtime.server.EmbeddedServer;\n import jakarta.inject.Inject;\n import jakarta.inject.Named;\n+import org.junit.jupiter.api.RepeatedTest;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\n import org.junitpioneer.jupiter.RetryingTest;\n@@ -991,7 +992,8 @@ void find() {\n         assertThat(e.getStatus(), is(HttpStatus.UNPROCESSABLE_ENTITY));\n     }\n \n-    @Test\n+    // This test is flaky on CI as the flow may be already SUCCESS when we kill it if CI is super slow\n+    @RetryingTest(5)\n     void kill() throws TimeoutException, InterruptedException {\n         // Run execution until it is paused\n         Execution runningExecution = runnerUtils.runOneUntilRunning(null, TESTS_FLOW_NS, \"sleep\");",
      "parent_sha": "82f479f5b5e849232d82b374ed5858a2f4e1e440"
    }
  },
  {
    "oid": "eb6e82b77a17ad0a7382caebfe85604685b9a3ad",
    "message": "fix(core): compilation issue",
    "date": "2024-11-28T15:02:00Z",
    "url": "https://github.com/kestra-io/kestra/commit/eb6e82b77a17ad0a7382caebfe85604685b9a3ad",
    "details": {
      "sha": "f6b5e11aa4a32bcbcebe0ff90c9b84d5889d61e8",
      "filename": "core/src/test/java/io/kestra/core/validations/TimeWindowValidationTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/kestra-io/kestra/blob/eb6e82b77a17ad0a7382caebfe85604685b9a3ad/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fvalidations%2FTimeWindowValidationTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/eb6e82b77a17ad0a7382caebfe85604685b9a3ad/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fvalidations%2FTimeWindowValidationTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fvalidations%2FTimeWindowValidationTest.java?ref=eb6e82b77a17ad0a7382caebfe85604685b9a3ad",
      "patch": "@@ -32,7 +32,7 @@ void shouldDefaultTimeWindow() {\n \n     @Test\n     void shouldValidateDailyDeadline() {\n-        var sla = TimeWindow.builder().type(TimeWindow.Type.DAILY_TIME_DEADLINE).deadline(OffsetTime.now()).build();\n+        var sla = TimeWindow.builder().type(TimeWindow.Type.DAILY_TIME_DEADLINE).deadline(LocalTime.now()).build();\n \n         Optional<ConstraintViolationException> valid = modelValidator.isValid(sla);\n         assertThat(valid.isEmpty(), is(true));\n@@ -50,7 +50,7 @@ void shouldNotValidateDailyDeadlineWhenMissingParam() {\n \n     @Test\n     void shouldNotValidateDailyDeadlineWhenInvalidParam() {\n-        var sla = TimeWindow.builder().type(TimeWindow.Type.DAILY_TIME_DEADLINE).deadline(OffsetTime.now()).window(Duration.ofHours(1)).build();\n+        var sla = TimeWindow.builder().type(TimeWindow.Type.DAILY_TIME_DEADLINE).deadline(LocalTime.now()).window(Duration.ofHours(1)).build();\n \n         Optional<ConstraintViolationException> valid = modelValidator.isValid(sla);\n         assertThat(valid.isEmpty(), is(false));\n@@ -60,7 +60,7 @@ void shouldNotValidateDailyDeadlineWhenInvalidParam() {\n \n     @Test\n     void shouldValidateDailyTimeWindow() {\n-        var sla = TimeWindow.builder().type(TimeWindow.Type.DAILY_TIME_WINDOW).startTime(OffsetTime.now()).endTime(OffsetTime.now()).build();\n+        var sla = TimeWindow.builder().type(TimeWindow.Type.DAILY_TIME_WINDOW).startTime(LocalTime.now()).endTime(LocalTime.now()).build();\n \n         Optional<ConstraintViolationException> valid = modelValidator.isValid(sla);\n         assertThat(valid.isEmpty(), is(true));\n@@ -79,7 +79,7 @@ void shouldNotValidateDailyTimeWindowWhenMissingParam() {\n \n     @Test\n     void shouldNotValidateDailyTimeWindowWhenInvalidParam() {\n-        var sla = TimeWindow.builder().type(TimeWindow.Type.DAILY_TIME_WINDOW).startTime(OffsetTime.now()).endTime(OffsetTime.now()).window(Duration.ofHours(1)).build();\n+        var sla = TimeWindow.builder().type(TimeWindow.Type.DAILY_TIME_WINDOW).startTime(LocalTime.now()).endTime(LocalTime.now()).window(Duration.ofHours(1)).build();\n \n         Optional<ConstraintViolationException> valid = modelValidator.isValid(sla);\n         assertThat(valid.isEmpty(), is(false));\n@@ -98,7 +98,7 @@ void shouldValidateDurationWindow() {\n \n     @Test\n     void shouldNotValidateDurationWindowWhenInvalidParam() {\n-        var sla = TimeWindow.builder().type(TimeWindow.Type.DURATION_WINDOW).deadline(OffsetTime.now()).window(Duration.ofHours(1)).build();\n+        var sla = TimeWindow.builder().type(TimeWindow.Type.DURATION_WINDOW).deadline(LocalTime.now()).window(Duration.ofHours(1)).build();\n \n         Optional<ConstraintViolationException> valid = modelValidator.isValid(sla);\n         assertThat(valid.isEmpty(), is(false));\n@@ -116,7 +116,7 @@ void shouldValidateSlidingWindow() {\n \n     @Test\n     void shouldNotValidateSlidingWindowWhenInvalidParam() {\n-        var sla = TimeWindow.builder().type(TimeWindow.Type.SLIDING_WINDOW).deadline(OffsetTime.now()).window(Duration.ofHours(1)).build();\n+        var sla = TimeWindow.builder().type(TimeWindow.Type.SLIDING_WINDOW).deadline(LocalTime.now()).window(Duration.ofHours(1)).build();\n \n         Optional<ConstraintViolationException> valid = modelValidator.isValid(sla);\n         assertThat(valid.isEmpty(), is(false));",
      "parent_sha": "3a63ce623a75d4b921cb5f6498f2b81a900e6bac"
    }
  },
  {
    "oid": "7313e142e992c340355c840357ce69731e16424b",
    "message": "fix(core): render commands env and additional vars in ScriptRunner",
    "date": "2024-04-05T08:46:59Z",
    "url": "https://github.com/kestra-io/kestra/commit/7313e142e992c340355c840357ce69731e16424b",
    "details": {
      "sha": "4c1edb052f428707f018297bcfa6d24b7185a88b",
      "filename": "core/src/main/java/io/kestra/core/models/script/ScriptRunner.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/kestra-io/kestra/blob/7313e142e992c340355c840357ce69731e16424b/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fscript%2FScriptRunner.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/7313e142e992c340355c840357ce69731e16424b/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fscript%2FScriptRunner.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fscript%2FScriptRunner.java?ref=7313e142e992c340355c840357ce69731e16424b",
      "patch": "@@ -49,10 +49,10 @@ public Map<String, Object> additionalVars(RunContext runContext, ScriptCommands\n             this.additionalVars = new HashMap<>();\n \n             if (scriptCommands.getAdditionalVars() != null) {\n-                this.additionalVars.putAll(scriptCommands.getAdditionalVars());\n+                this.additionalVars.putAll(runContext.render(scriptCommands.getAdditionalVars()));\n             }\n \n-            this.additionalVars.putAll(this.runnerAdditionalVars(runContext, scriptCommands));\n+            this.additionalVars.putAll(runContext.render(this.runnerAdditionalVars(runContext, scriptCommands)));\n         }\n \n         return this.additionalVars;\n@@ -67,7 +67,7 @@ public Map<String, String> env(RunContext runContext, ScriptCommands scriptComma\n             this.env = new HashMap<>();\n \n             if (scriptCommands.getEnv() != null) {\n-                this.env.putAll(scriptCommands.getEnv());\n+                this.env.putAll(runContext.renderMap(scriptCommands.getEnv()));\n             }\n \n             Map<String, Object> additionalVars = this.additionalVars(runContext, scriptCommands);\n@@ -82,7 +82,7 @@ public Map<String, String> env(RunContext runContext, ScriptCommands scriptComma\n                 this.env.put(ScriptService.ENV_BUCKET_PATH, additionalVars.get(ScriptService.VAR_BUCKET_PATH).toString());\n             }\n \n-            this.env.putAll(this.runnerEnv(runContext, scriptCommands));\n+            this.env.putAll(runContext.renderMap(this.runnerEnv(runContext, scriptCommands)));\n         }\n \n         return this.env;",
      "parent_sha": "d753ae7e99c7c9ab729bb4f34223e28db6658ae3"
    }
  },
  {
    "oid": "6958a21ef43261be8da1116c2400f05b0815df1e",
    "message": "fix(core): avoid a possible NPE for Flow task validation",
    "date": "2023-09-21T09:24:14Z",
    "url": "https://github.com/kestra-io/kestra/commit/6958a21ef43261be8da1116c2400f05b0815df1e",
    "details": {
      "sha": "0999c295da306d9ad84276422b7337662a17f068",
      "filename": "core/src/main/java/io/kestra/core/validations/ValidationFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/6958a21ef43261be8da1116c2400f05b0815df1e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fvalidations%2FValidationFactory.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/6958a21ef43261be8da1116c2400f05b0815df1e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fvalidations%2FValidationFactory.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fvalidations%2FValidationFactory.java?ref=6958a21ef43261be8da1116c2400f05b0815df1e",
      "patch": "@@ -210,8 +210,8 @@ ConstraintValidator<FlowValidation, Flow> flowValidation() {\n                 .forEach(\n                     task -> {\n                         if (task instanceof io.kestra.core.tasks.flows.Flow taskFlow\n-                            && taskFlow.getFlowId().equals(value.getId())\n-                            && taskFlow.getNamespace().equals(value.getNamespace())) {\n+                            && value.getId().equals(taskFlow.getFlowId())\n+                            && value.getNamespace().equals(taskFlow.getNamespace())) {\n                             violations.add(\"Recursive call to flow [\" + value.getId() + \"]\");\n                         }\n                     }",
      "parent_sha": "c7947198612f5751ed72d17bbab9e193d131270e"
    }
  },
  {
    "oid": "c73305921ed76b1fd9c278dce15bf609933d66df",
    "message": "fix(jdbc): batch query expand query and lead to overflow of metrics",
    "date": "2025-01-13T20:54:10Z",
    "url": "https://github.com/kestra-io/kestra/commit/c73305921ed76b1fd9c278dce15bf609933d66df",
    "details": {
      "sha": "72637156885c29c91f7c9819579d7f077f27fac1",
      "filename": "jdbc/src/main/java/io/kestra/jdbc/JooqExecuteListenerFactory.java",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/kestra-io/kestra/blob/c73305921ed76b1fd9c278dce15bf609933d66df/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2FJooqExecuteListenerFactory.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/c73305921ed76b1fd9c278dce15bf609933d66df/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2FJooqExecuteListenerFactory.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2FJooqExecuteListenerFactory.java?ref=c73305921ed76b1fd9c278dce15bf609933d66df",
      "patch": "@@ -8,6 +8,8 @@\n import org.jooq.ExecuteListener;\n \n import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.sql.DataSource;\n import jakarta.validation.constraints.NotNull;\n \n@@ -31,7 +33,17 @@ public void executeStart(ExecuteContext ctx) {\n                     public void executeEnd(ExecuteContext ctx) {\n                         Duration duration = Duration.ofMillis(System.currentTimeMillis() - startTime);\n \n-                        metricRegistry.timer(MetricRegistry.JDBC_QUERY_DURATION, \"sql\", ctx.sql())\n+                        List<String> tags = new ArrayList<>();\n+                        tags.add(\"batch\");\n+                        tags.add(ctx.batchMode().name());\n+\n+                        // in batch query, the query will be expanded without parameters, and will lead to overflow of metrics\n+                        if (ctx.batchMode() != ExecuteContext.BatchMode.MULTIPLE) {\n+                            tags.add(\"sql\");\n+                            tags.add(ctx.sql());\n+                        }\n+\n+                        metricRegistry.timer(MetricRegistry.JDBC_QUERY_DURATION, tags.toArray(new String[0]))\n                             .record(duration);\n \n                         if (log.isTraceEnabled()) {\n@@ -44,5 +56,4 @@ public void executeEnd(ExecuteContext ctx) {\n             }\n         };\n     }\n-\n }",
      "parent_sha": "4de65e7a3dc2ae0f827c0f2cae765e35254ec82c"
    }
  },
  {
    "oid": "1ca8849d515cc042cb1489bc53064b515d0a4bca",
    "message": "fix: backfill doc",
    "date": "2024-02-14T12:29:53Z",
    "url": "https://github.com/kestra-io/kestra/commit/1ca8849d515cc042cb1489bc53064b515d0a4bca",
    "details": {
      "sha": "c176919ace580730e789178f05d00014481e74a0",
      "filename": "core/src/main/java/io/kestra/core/models/triggers/types/Schedule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/1ca8849d515cc042cb1489bc53064b515d0a4bca/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftriggers%2Ftypes%2FSchedule.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/1ca8849d515cc042cb1489bc53064b515d0a4bca/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftriggers%2Ftypes%2FSchedule.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftriggers%2Ftypes%2FSchedule.java?ref=1ca8849d515cc042cb1489bc53064b515d0a4bca",
      "patch": "@@ -164,8 +164,8 @@ public class Schedule extends AbstractTrigger implements PollingTriggerInterface\n     private transient ExecutionTime executionTime;\n \n     @Schema(\n-        title = \"Previous backfill\",\n-        description = \"Now deprecated and will be removed in the future. Note that this has no more effect, please use the new backfill feature.\"\n+        title = \"(Deprecated) Backfill\",\n+        description = \"Backfill property is deprecated and will be removed in the future. Instead, you can now go to the Triggers tab and start a highly customizable backfill process directly from the UI. This will allow you to backfill missed scheduled executions by providing a specific date range and custom labels. Read more about it in the [documentation](https://kestra.io/docs/workflow-components/triggers/backfill).\"\n     )\n     @PluginProperty\n     @Deprecated",
      "parent_sha": "82789480652eee220aa8b333adf573f0e7e69b85"
    }
  },
  {
    "oid": "a0e9a6baa4f05fe58dae1c71d94a3c8f9b6c8818",
    "message": "fix(kafka-runner): better exception in case produce exception",
    "date": "2022-01-06T11:25:21Z",
    "url": "https://github.com/kestra-io/kestra/commit/a0e9a6baa4f05fe58dae1c71d94a3c8f9b6c8818",
    "details": {
      "sha": "36ec2a7c31d3114a7be60a9adec9e8f4600ee3e6",
      "filename": "runner-kafka/src/main/java/io/kestra/runner/kafka/KafkaQueue.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/a0e9a6baa4f05fe58dae1c71d94a3c8f9b6c8818/runner-kafka%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Frunner%2Fkafka%2FKafkaQueue.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/a0e9a6baa4f05fe58dae1c71d94a3c8f9b6c8818/runner-kafka%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Frunner%2Fkafka%2FKafkaQueue.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/runner-kafka%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Frunner%2Fkafka%2FKafkaQueue.java?ref=a0e9a6baa4f05fe58dae1c71d94a3c8f9b6c8818",
      "patch": "@@ -94,13 +94,13 @@ private void produce(String key, T message) {\n                     ),\n                     (metadata, e) -> {\n                         if (e != null) {\n-                            log.error(\"Failed to produce '{}' with metadata '{}'\", e, metadata);\n+                            log.error(\"Failed to produce on '{}' with key '{}', metadata '{}' \", this.cls, key,  metadata, e);\n                         }\n                     }\n                 )\n                 .get();\n         } catch (InterruptedException | ExecutionException e) {\n-            throw new QueueException(\"Failed to produce\", e);\n+            throw new QueueException(\"Failed to produce on '\" + this.cls + \"' with key '\" +  key + \"': \", e);\n         }\n     }\n ",
      "parent_sha": "d3f30fd1e1a1bb79a1bbea68e5659f564d8210d1"
    }
  },
  {
    "oid": "f7f8e53fbf74fcb5d6f0c8b0ef6d0c2f4cb65d09",
    "message": "fix(task): don't use absolute path for node & npm",
    "date": "2021-12-08T14:37:31Z",
    "url": "https://github.com/kestra-io/kestra/commit/f7f8e53fbf74fcb5d6f0c8b0ef6d0c2f4cb65d09",
    "details": {
      "sha": "0aea1cb4e6c2933d75dbf9c44fc11d36e51107c3",
      "filename": "core/src/main/java/io/kestra/core/tasks/scripts/Node.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/f7f8e53fbf74fcb5d6f0c8b0ef6d0c2f4cb65d09/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fscripts%2FNode.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/f7f8e53fbf74fcb5d6f0c8b0ef6d0c2f4cb65d09/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fscripts%2FNode.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fscripts%2FNode.java?ref=f7f8e53fbf74fcb5d6f0c8b0ef6d0c2f4cb65d09",
      "patch": "@@ -88,14 +88,14 @@ public class Node extends AbstractBash implements RunnableTask<ScriptOutput> {\n         title = \"The node interpreter to use\",\n         description = \"Set the node interpreter path to use\"\n     )\n-    private final String nodePath = \"/usr/bin/node\";\n+    private final String nodePath = \"node\";\n \n     @Builder.Default\n     @Schema(\n         title = \"The npm binary to use\",\n         description = \"Set the npm binary path for node dependencies setup\"\n     )\n-    private final String npmPath = \"/usr/bin/npm\";\n+    private final String npmPath = \"npm\";\n \n     @Schema(\n         title = \"node command args\",",
      "parent_sha": "61774d439ff1a6fda6f37c02ffcfd0a28da9fbe5"
    }
  },
  {
    "oid": "4fc47d774bbe513713e16085f777f27de1be8577",
    "message": "fix(core): collector host.uuid was filtering wrong values",
    "date": "2022-02-11T20:47:44Z",
    "url": "https://github.com/kestra-io/kestra/commit/4fc47d774bbe513713e16085f777f27de1be8577",
    "details": {
      "sha": "bde1c1b443b4a4ebe04ac7e58921863ef4a6a376",
      "filename": "core/src/main/java/io/kestra/core/models/collectors/HostUsage.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/4fc47d774bbe513713e16085f777f27de1be8577/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fcollectors%2FHostUsage.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/4fc47d774bbe513713e16085f777f27de1be8577/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fcollectors%2FHostUsage.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Fcollectors%2FHostUsage.java?ref=4fc47d774bbe513713e16085f777f27de1be8577",
      "patch": "@@ -12,6 +12,7 @@\n import oshi.software.os.OperatingSystem;\n \n import java.lang.management.ManagementFactory;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -83,7 +84,8 @@ public static HostUsage of() {\n             processorIdentifier,\n             processorsCount\n         )\n-            .filter(s -> s.equals(\"unknown\"))\n+            .filter(Objects::nonNull)\n+            .filter(s -> !s.equals(\"unknown\"))\n             .map(s -> String.format(\"%08x\", s.hashCode()))\n             .collect(Collectors.joining(\"-\"));\n ",
      "parent_sha": "77e936707fd9fb2be233c618defe3d428db189ee"
    }
  },
  {
    "oid": "56d911d8d5a3726e5204faa6c9e9030c09495375",
    "message": "fix(core): warn on failed local flow parsing (#3349)",
    "date": "2024-03-22T08:09:24Z",
    "url": "https://github.com/kestra-io/kestra/commit/56d911d8d5a3726e5204faa6c9e9030c09495375",
    "details": {
      "sha": "d53422d7dfebd2c7f8443c35135a4882558eaf1d",
      "filename": "core/src/main/java/io/kestra/core/repositories/LocalFlowRepositoryLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/56d911d8d5a3726e5204faa6c9e9030c09495375/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frepositories%2FLocalFlowRepositoryLoader.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/56d911d8d5a3726e5204faa6c9e9030c09495375/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frepositories%2FLocalFlowRepositoryLoader.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frepositories%2FLocalFlowRepositoryLoader.java?ref=56d911d8d5a3726e5204faa6c9e9030c09495375",
      "patch": "@@ -93,7 +93,7 @@ public void load(File basePath, Boolean update) throws IOException {\n                     }\n                 }\n             } catch (ConstraintViolationException e) {\n-                log.debug(\"Unable to create flow {}\", file, e);\n+                log.warn(\"Unable to create flow {}\", file, e);\n             }\n         }\n     }",
      "parent_sha": "400b2f8d04aaf566a99f6d801e6a548a6a09b62c"
    }
  },
  {
    "oid": "8d2af87db3e45b30f4f882dd34c23cbe38666021",
    "message": "fix: refactor PluginSearchCommand",
    "date": "2025-02-25T15:31:27Z",
    "url": "https://github.com/kestra-io/kestra/commit/8d2af87db3e45b30f4f882dd34c23cbe38666021",
    "details": {
      "sha": "ae8cf1d1d4645396c6c333bf5b70ffbb3e52c629",
      "filename": "cli/src/main/java/io/kestra/cli/commands/plugins/PluginSearchCommand.java",
      "status": "modified",
      "additions": 8,
      "deletions": 14,
      "changes": 22,
      "blob_url": "https://github.com/kestra-io/kestra/blob/8d2af87db3e45b30f4f882dd34c23cbe38666021/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fplugins%2FPluginSearchCommand.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/8d2af87db3e45b30f4f882dd34c23cbe38666021/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fplugins%2FPluginSearchCommand.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fplugins%2FPluginSearchCommand.java?ref=8d2af87db3e45b30f4f882dd34c23cbe38666021",
      "patch": "@@ -1,6 +1,7 @@\n package io.kestra.cli.commands.plugins;\n \n import io.kestra.cli.AbstractCommand;\n+import picocli.CommandLine;\n import picocli.CommandLine.Command;\n import picocli.CommandLine.Parameters;\n import com.fasterxml.jackson.databind.JsonNode;\n@@ -35,12 +36,9 @@ public Integer call() throws Exception {\n \n         try {\n             JsonNode root = fetchPlugins();\n-            if (root == null) return 1;\n-\n             List<PluginInfo> plugins = findPlugins(root);\n             printResults(plugins);\n             return 0;\n-\n         } catch (Exception e) {\n             stdOut(\"Error processing plugins: {0}\", e.getMessage());\n             return 1;\n@@ -57,8 +55,7 @@ private JsonNode fetchPlugins() throws Exception {\n         HttpResponse<String> response = CLIENT.send(request, HttpResponse.BodyHandlers.ofString());\n \n         if (response.statusCode() != 200) {\n-            stdOut(\"API request failed with status: {0}\", response.statusCode());\n-            return null;\n+            throw new RuntimeException(\"API request failed with status: \" + response.statusCode());\n         }\n \n         return MAPPER.readTree(response.body());\n@@ -84,16 +81,13 @@ private List<PluginInfo> findPlugins(JsonNode root) {\n     }\n \n     private boolean matchesSearch(JsonNode plugin, String term) {\n-        if (term.isEmpty()) return true;\n-\n-        String name = plugin.path(\"name\").asText().toLowerCase();\n-        if (name.contains(term)) return true;\n-\n-        String title = plugin.path(\"title\").asText().toLowerCase();\n-        if (title.contains(term)) return true;\n+        if (term.isEmpty()) {\n+            return true;\n+        }\n \n-        String group = plugin.path(\"group\").asText().toLowerCase();\n-        return group.contains(term);\n+        return plugin.path(\"name\").asText().toLowerCase().contains(term) ||\n+            plugin.path(\"title\").asText().toLowerCase().contains(term) ||\n+            plugin.path(\"group\").asText().toLowerCase().contains(term);\n     }\n \n     private void printResults(List<PluginInfo> plugins) {",
      "parent_sha": "e7950279bbf55b8b7c58839306c7f6046497bd48"
    }
  },
  {
    "oid": "dc8bd733cfc0febd2fad562a002f3af0bc2d4b7a",
    "message": "fix(core): ConditionService can break the executor if invalid runContext variable",
    "date": "2021-06-07T16:42:12Z",
    "url": "https://github.com/kestra-io/kestra/commit/dc8bd733cfc0febd2fad562a002f3af0bc2d4b7a",
    "details": {
      "sha": "33cc50091cc15b0c858a35170faa041ceb260e27",
      "filename": "core/src/main/java/io/kestra/core/services/ConditionService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/dc8bd733cfc0febd2fad562a002f3af0bc2d4b7a/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FConditionService.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/dc8bd733cfc0febd2fad562a002f3af0bc2d4b7a/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FConditionService.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FConditionService.java?ref=dc8bd733cfc0febd2fad562a002f3af0bc2d4b7a",
      "patch": "@@ -42,7 +42,7 @@ public boolean isValid(Condition condition, Flow flow, @Nullable Execution execu\n         return this.isValid(condition, flow, execution, null);\n     }\n \n-    private void logException(Flow flow, Condition condition, ConditionContext conditionContext, InternalException e) {\n+    private void logException(Flow flow, Condition condition, ConditionContext conditionContext, Exception e) {\n         conditionContext.getRunContext().logger().warn(\n             \"[namespace: {}] [flow: {}] [condition: {}] Evaluate Condition Failed with error '{}'\",\n             flow.getNamespace(),\n@@ -94,7 +94,7 @@ boolean valid(Flow flow, List<Condition> list, ConditionContext conditionContext\n             .allMatch(condition -> {\n                 try {\n                     return condition.test(conditionContext);\n-                } catch (InternalException e) {\n+                } catch (Exception e) {\n                     logException(flow, condition, conditionContext, e);\n \n                     return false;",
      "parent_sha": "0c41c61c1ac9851795c90e11597d95d51be0ee18"
    }
  },
  {
    "oid": "7ae080c31ae9c28016000dae85f7b86d8f47bdcc",
    "message": "feat(webserver): document that the taskrun endpont is only available with Elasticsearch\n\nFixes https://github.com/kestra-io/kestra-ee/issues/2067",
    "date": "2024-11-04T14:12:29Z",
    "url": "https://github.com/kestra-io/kestra/commit/7ae080c31ae9c28016000dae85f7b86d8f47bdcc",
    "details": {
      "sha": "d4722ba08f596f294940532f4df8fd5e83475e03",
      "filename": "webserver/src/main/java/io/kestra/webserver/controllers/api/TaskRunController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/7ae080c31ae9c28016000dae85f7b86d8f47bdcc/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FTaskRunController.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/7ae080c31ae9c28016000dae85f7b86d8f47bdcc/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FTaskRunController.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FTaskRunController.java?ref=7ae080c31ae9c28016000dae85f7b86d8f47bdcc",
      "patch": "@@ -37,7 +37,7 @@ public class TaskRunController {\n \n     @ExecuteOn(TaskExecutors.IO)\n     @Get(uri = \"/search\")\n-    @Operation(tags = {\"Executions\"}, summary = \"Search for taskruns\")\n+    @Operation(tags = {\"Executions\"}, summary = \"Search for taskruns, only available with the Elasticsearch repository\")\n     public PagedResults<TaskRun> findTaskRun(\n         @Parameter(description = \"The current page\") @QueryValue(defaultValue = \"1\") @Min(1) int page,\n         @Parameter(description = \"The current page size\") @QueryValue(defaultValue = \"10\") @Min(1) int size,",
      "parent_sha": "76c963f24f9dff76ec38a16113306de8bfc1cb5b"
    }
  },
  {
    "oid": "82f757249a95c985b53beea3f56b5905fca4b857",
    "message": "fix(core): task default can have duplicate values",
    "date": "2023-05-24T16:39:20Z",
    "url": "https://github.com/kestra-io/kestra/commit/82f757249a95c985b53beea3f56b5905fca4b857",
    "details": {
      "sha": "ba387749de33e153d19c513faeb1f0c0a0573ae7",
      "filename": "core/src/main/java/io/kestra/core/services/TaskDefaultService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/82f757249a95c985b53beea3f56b5905fca4b857/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FTaskDefaultService.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/82f757249a95c985b53beea3f56b5905fca4b857/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FTaskDefaultService.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FTaskDefaultService.java?ref=82f757249a95c985b53beea3f56b5905fca4b857",
      "patch": "@@ -133,7 +133,7 @@ private static Object recursiveDefaults(Object object, Map<String, List<TaskDefa\n                     e.getKey(),\n                     recursiveDefaults(e.getValue(), defaults)\n                 ))\n-                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a1, a2) -> a2));\n         } else if (object instanceof Collection) {\n             Collection<?> value = (Collection<?>) object;\n             return value",
      "parent_sha": "63e81b58dfcbd9cdeb412dcd4918c27535f6bb3b"
    }
  },
  {
    "oid": "b9d4136740026e9e3f3db015b9b6ee69c3f4b678",
    "message": "fix(webserver): incorrect package for TriggerController",
    "date": "2024-04-10T07:21:17Z",
    "url": "https://github.com/kestra-io/kestra/commit/b9d4136740026e9e3f3db015b9b6ee69c3f4b678",
    "details": {
      "sha": "ad1140c84b9e1d8d9ece549102a169ba0cd25627",
      "filename": "webserver/src/main/java/io/kestra/webserver/controllers/api/TriggerController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/b9d4136740026e9e3f3db015b9b6ee69c3f4b678/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FTriggerController.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/b9d4136740026e9e3f3db015b9b6ee69c3f4b678/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FTriggerController.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FTriggerController.java?ref=b9d4136740026e9e3f3db015b9b6ee69c3f4b678",
      "patch": "@@ -1,4 +1,4 @@\n-package io.kestra.webserver.controllers;\n+package io.kestra.webserver.controllers.api;\n \n import io.kestra.core.models.conditions.ConditionContext;\n import io.kestra.core.models.flows.Flow;",
      "parent_sha": "2a31e83613e82f16285febdeab9a829636e4ef12"
    }
  },
  {
    "oid": "f315485fc6108c11ed3b74df1638ec239fcec156",
    "message": "feat: add full examples for datetimebetween condition (#7598)",
    "date": "2025-02-27T11:30:59Z",
    "url": "https://github.com/kestra-io/kestra/commit/f315485fc6108c11ed3b74df1638ec239fcec156",
    "details": {
      "sha": "effdd5dc97ac6e7c1458601fdaded4c684aec8aa",
      "filename": "core/src/main/java/io/kestra/plugin/core/condition/DateTimeBetween.java",
      "status": "modified",
      "additions": 43,
      "deletions": 15,
      "changes": 58,
      "blob_url": "https://github.com/kestra-io/kestra/blob/f315485fc6108c11ed3b74df1638ec239fcec156/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fcondition%2FDateTimeBetween.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/f315485fc6108c11ed3b74df1638ec239fcec156/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fcondition%2FDateTimeBetween.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fcondition%2FDateTimeBetween.java?ref=f315485fc6108c11ed3b74df1638ec239fcec156",
      "patch": "@@ -27,22 +27,50 @@\n @Plugin(\n     examples = {\n         @Example(\n+            title = \"Trigger the flow only after the specific date.\",\n             full = true,\n-            code = {\n-                \"# This will evaluate to true when the trigger date falls after the `after` date.\",\n-                \"- conditions:\",\n-                \"    - type: io.kestra.plugin.core.condition.DateTimeBetween\",\n-                \"      date: \\\"{{ trigger.date }}\\\"\",\n-                \"      after: \\\"2024-01-01T08:30:00Z\\\"\",\n-                \"\",\n-                \"# This will evaluate to true when the trigger date falls between the `before` and `after` dates.\",\n-                \"- conditions:\",\n-                \"    - type: io.kestra.plugin.core.condition.DateTimeBetween\",\n-                \"      date: \\\"{{ trigger.date }}\\\"\",\n-                \"      before: \\\"2024-01-01T08:30:00Z\\\"\",\n-                \"      after: \\\"2024-12-31T23:30:00Z\\\"\",\n-            }\n-        )\n+            code = \"\"\"\n+                id: schedule-condition-datetimebetween\n+                namespace: company.team\n+\n+                tasks:\n+                  - id: log_message\n+                    type: io.kestra.plugin.core.log.Log\n+                    message: \"This flow will be triggered once every 5 minutes after the date 2025-12-31T23:59:59Z\"\n+\n+                triggers:\n+                  - id: schedule\n+                    type: io.kestra.plugin.core.trigger.Schedule\n+                    cron: \"*/5 * * * *\"\n+                    conditions:\n+                      - type: io.kestra.plugin.core.condition.DateTimeBetween\n+                        date: \"{{ trigger.date }}\"\n+                        after: \"2025-12-31T23:59:59Z\"\n+                \"\"\"\n+        ),\n+        @Example(\n+            title = \"Trigger the flow between two specific dates.\",\n+            full = true,\n+            code = \"\"\"\n+                id: schedule-condition-datetimebetween\n+                namespace: company.team\n+\n+                tasks:\n+                  - id: log_message\n+                    type: io.kestra.plugin.core.log.Log\n+                    message: \"This flow will be triggered once every 5 minutes between the before and after dates\"\n+                \n+                triggers:\n+                  - id: schedule\n+                    type: io.kestra.plugin.core.trigger.Schedule\n+                    cron: \"*/5 * * * *\"\n+                    conditions:\n+                      - type: io.kestra.plugin.core.condition.DateTimeBetween\n+                        date: \"{{ trigger.date }}\"\n+                        before: \"2025-01-01T00:00:00Z\"\n+                        after: \"2025-12-31T23:59:59Z\"\n+                \"\"\"\n+        ),\n     },\n     aliases = {\"io.kestra.core.models.conditions.types.DateTimeBetweenCondition\", \"io.kestra.plugin.core.condition.DateTimeBetweenCondition\"}\n )",
      "parent_sha": "04b8a0a14c3374f458f5cacb7eb8527bef1dae14"
    }
  },
  {
    "oid": "408a38495013d3136932341300d4d731c69d04fa",
    "message": "fix(core): don't remove the executionId after killing a task\n\nAs there can be other tasks to kill",
    "date": "2024-06-26T13:07:04Z",
    "url": "https://github.com/kestra-io/kestra/commit/408a38495013d3136932341300d4d731c69d04fa",
    "details": {
      "sha": "1c30ef62ea5b37147f7aeafa4536e777eba7a06d",
      "filename": "core/src/main/java/io/kestra/core/runners/Worker.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/kestra-io/kestra/blob/408a38495013d3136932341300d4d731c69d04fa/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/408a38495013d3136932341300d4d731c69d04fa/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java?ref=408a38495013d3136932341300d4d731c69d04fa",
      "patch": "@@ -459,7 +459,8 @@ private WorkerTaskResult run(WorkerTask workerTask, Boolean cleanUp) throws Queu\n \n             this.logTerminated(workerTask);\n \n-            killedExecution.remove(workerTask.getTaskRun().getExecutionId());\n+            // We cannot remove the execution ID from the killedExecution in case the worker is processing multiple tasks of the execution\n+            // which can happens due to parallel processing.\n \n             return workerTaskResult;\n         }",
      "parent_sha": "77f2ee232ed985c05051397ea41a2ee335b8b9b3"
    }
  },
  {
    "oid": "35cfea0abc0b06ce13860ff26094b527f3d69e62",
    "message": "feat(webserver): log all 5xx error with accesslog",
    "date": "2022-06-24T08:23:18Z",
    "url": "https://github.com/kestra-io/kestra/commit/35cfea0abc0b06ce13860ff26094b527f3d69e62",
    "details": {
      "sha": "4cb7418a5f6e0e3056f4f8174258d08841615cde",
      "filename": "webserver/src/main/java/io/kestra/webserver/utils/HttpServerAccessLogHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/35cfea0abc0b06ce13860ff26094b527f3d69e62/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Futils%2FHttpServerAccessLogHandler.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/35cfea0abc0b06ce13860ff26094b527f3d69e62/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Futils%2FHttpServerAccessLogHandler.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Futils%2FHttpServerAccessLogHandler.java?ref=35cfea0abc0b06ce13860ff26094b527f3d69e62",
      "patch": "@@ -209,7 +209,7 @@ void logAccess(Logger accessLogger, List<String> filters) {\n                     .stream()\n                     .anyMatch(message::matches);\n \n-                if (!filtered) {\n+                if (!filtered && status < 500) {\n                     return;\n                 }\n ",
      "parent_sha": "4a61af45d668feab19313b9033826fa7075bf02b"
    }
  },
  {
    "oid": "2e14f9dcf406a6fe9d6075eec28edaa47c8692d1",
    "message": "fix: avoid hardcoding namespace in UploadFiles",
    "date": "2024-08-28T22:21:20Z",
    "url": "https://github.com/kestra-io/kestra/commit/2e14f9dcf406a6fe9d6075eec28edaa47c8692d1",
    "details": {
      "sha": "7288fd09c665e43cf581032c1e00bec4430df3f6",
      "filename": "core/src/main/java/io/kestra/plugin/core/namespace/UploadFiles.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/kestra-io/kestra/blob/2e14f9dcf406a6fe9d6075eec28edaa47c8692d1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fnamespace%2FUploadFiles.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/2e14f9dcf406a6fe9d6075eec28edaa47c8692d1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fnamespace%2FUploadFiles.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fnamespace%2FUploadFiles.java?ref=2e14f9dcf406a6fe9d6075eec28edaa47c8692d1",
      "patch": "@@ -58,7 +58,8 @@\n   - id: upload\n     type: io.kestra.plugin.core.namespace.UploadFiles\n     filesMap: \"{{ outputs.unzip.files }}\"\n-    namespace: company.team\"\"\"\n+    namespace: \"{{ flow.namespace }}\"\n+    \"\"\"\n         ),\n         @Example(\n             title = \"Upload a folder using a glob pattern. Note that the Regex syntax requires a `glob` pattern inspired by [Apache Ant patterns](https://ant.apache.org/manual/dirtasks.html#patterns). Make sure that your pattern starts with `glob:`, followed by the pattern. For example, use `glob:**/dbt/**` to upload the entire `dbt` folder (with all files and subdirectories) regardless of that folder's location in the directory structure.\",\n@@ -78,7 +79,8 @@\n         type: io.kestra.plugin.core.namespace.UploadFiles\n         files:\n           - \"glob:**/dbt/**\"\n-        namespace: dwh\"\"\"\n+        namespace: \"{{ flow.namespace }}\"\n+        \"\"\"\n         ),\n         @Example(\n             title = \"Upload a specific file and rename it.\",\n@@ -101,7 +103,8 @@\n     type: io.kestra.plugin.core.namespace.UploadFiles\n     filesMap:\n       LICENCE: \"{{ outputs.unzip.files['scripts-main/LICENSE'] }}\"\n-    namespace: dwh\"\"\"\n+    namespace: \"{{ flow.namespace }}\"\n+    \"\"\"\n         )\n     }\n )",
      "parent_sha": "6e72bd146fee8d59085a15109699859cb145462a"
    }
  },
  {
    "oid": "ef4d22d47248078d77f9b46db6de75d4013c67bf",
    "message": "fix(core): improve fail task documentation",
    "date": "2023-03-28T11:41:13Z",
    "url": "https://github.com/kestra-io/kestra/commit/ef4d22d47248078d77f9b46db6de75d4013c67bf",
    "details": {
      "sha": "4d2a57f875981f5e878a45fc6a71f62a8f2f6649",
      "filename": "core/src/main/java/io/kestra/core/tasks/executions/Fail.java",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/kestra-io/kestra/blob/ef4d22d47248078d77f9b46db6de75d4013c67bf/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fexecutions%2FFail.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/ef4d22d47248078d77f9b46db6de75d4013c67bf/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fexecutions%2FFail.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fexecutions%2FFail.java?ref=ef4d22d47248078d77f9b46db6de75d4013c67bf",
      "patch": "@@ -46,15 +46,19 @@\n                 \"    cases:\\n\" +\n                 \"      case1:\\n\" +\n                 \"        - id: case1\\n\" +\n-                \"          type: io.kestra.core.tasks.debugs.Echo\\n\" +\n-                \"          format: Case 1\\n\" +\n+                \"          type: io.kestra.core.tasks.log.Log\\n\" +\n+                \"          message: Case 1\\n\" +\n                 \"      case2:\\n\" +\n                 \"        - id: case2\\n\" +\n-                \"          type: io.kestra.core.tasks.debugs.Echo\\n\" +\n-                \"          format: Case 2\\n\" +\n+                \"          type: io.kestra.core.tasks.log.Log\\n\" +\n+                \"          message: Case 2\\n\" +\n                 \"      notexist:\\n\" +\n                 \"        - id: fail\\n\" +\n-                \"          type: io.kestra.core.tasks.executions.Fail\",\n+                \"          type: io.kestra.core.tasks.executions.Fail\\n\" +\n+                \"      default:\\n\" +\n+                \"        - id: default\\n\" +\n+                \"          type: io.kestra.core.tasks.log.Log\\n\" +\n+                \"          message: default\"\n             }\n         ),\n         @Example(",
      "parent_sha": "dd18ba28b6e6664f13f8d1083d3defc961d2ebb2"
    }
  },
  {
    "oid": "054ef83bca8f6e04523b31e52b85bb1a5689d359",
    "message": "fix(core): local time format\n\nFixes #5734",
    "date": "2024-11-28T13:04:39Z",
    "url": "https://github.com/kestra-io/kestra/commit/054ef83bca8f6e04523b31e52b85bb1a5689d359",
    "details": {
      "sha": "461a52441433ecc50473b3f5727b773bdb70d73a",
      "filename": "core/src/main/java/io/kestra/core/docs/JsonSchemaGenerator.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/kestra-io/kestra/blob/054ef83bca8f6e04523b31e52b85bb1a5689d359/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FJsonSchemaGenerator.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/054ef83bca8f6e04523b31e52b85bb1a5689d359/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FJsonSchemaGenerator.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FJsonSchemaGenerator.java?ref=054ef83bca8f6e04523b31e52b85bb1a5689d359",
      "patch": "@@ -40,6 +40,7 @@\n import java.lang.reflect.Modifier;\n import java.lang.reflect.ParameterizedType;\n import java.time.Duration;\n+import java.time.LocalTime;\n import java.util.*;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n@@ -205,7 +206,11 @@ public CustomDefinition provideCustomSchemaDefinition(ResolvedType javaType, Sch\n                         ObjectNode definitionReference = context\n                             .createDefinitionReference(context.getTypeContext().resolve(String.class))\n                             .put(\"format\", \"duration\");\n-\n+                        return new CustomDefinition(definitionReference, true);\n+                    } else if (javaType.isInstanceOf(LocalTime.class)) {\n+                        ObjectNode definitionReference = context\n+                            .createDefinitionReference(context.getTypeContext().resolve(String.class))\n+                            .put(\"format\", \"partial-time\"); // we change the default 'time' format for 'partial-time' as Monaco Editor mandates an offset or a timezone for 'time' format\n                         return new CustomDefinition(definitionReference, true);\n                     } else {\n                         return null;",
      "parent_sha": "ff522b699de9f8187b224080e268ceea83530d48"
    }
  },
  {
    "oid": "47d135d4dc80012565bd8fdd5835f3728668d19b",
    "message": "Update core/src/test/java/org/kestra/core/tasks/PythonTest.java\n\nCo-authored-by: Ludovic DEHON <tchiotludo@users.noreply.github.com>",
    "date": "2020-09-15T07:18:51Z",
    "url": "https://github.com/kestra-io/kestra/commit/47d135d4dc80012565bd8fdd5835f3728668d19b",
    "details": {
      "sha": "b7e3665cd715d365a5c7b3896e9449eb8da8a2d4",
      "filename": "core/src/test/java/org/kestra/core/tasks/PythonTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/47d135d4dc80012565bd8fdd5835f3728668d19b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fkestra%2Fcore%2Ftasks%2FPythonTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/47d135d4dc80012565bd8fdd5835f3728668d19b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fkestra%2Fcore%2Ftasks%2FPythonTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fkestra%2Fcore%2Ftasks%2FPythonTest.java?ref=47d135d4dc80012565bd8fdd5835f3728668d19b",
      "patch": "@@ -75,7 +75,7 @@ void failed() throws Exception {\n     @Test\n     void requirements() throws Exception {\n         RunContext runContext = runContextFactory.of();\n-        HashMap<String, String> files = new HashMap<String, String>();\n+        Map<String, String> files = new HashMap<String, String>();\n         files.put(\"main.py\",\"import requests; print(requests.get('http://google.com').status_code)\");\n \n         Python python = Python.builder()",
      "parent_sha": "38f45cd138a532dd3349a9209f91819eb8b72909"
    }
  },
  {
    "oid": "8fca0fd5992a4fefddd484f9353c6121542b02f0",
    "message": "fix(core): use subgroup package infos when available (#4908)\n\nclose kestra-io/docs#1456",
    "date": "2024-09-12T14:48:35Z",
    "url": "https://github.com/kestra-io/kestra/commit/8fca0fd5992a4fefddd484f9353c6121542b02f0",
    "details": {
      "sha": "a1f21fc2327708a9cb26ef22c932440c009250db",
      "filename": "core/src/main/java/io/kestra/core/docs/Plugin.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/kestra-io/kestra/blob/8fca0fd5992a4fefddd484f9353c6121542b02f0/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FPlugin.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/8fca0fd5992a4fefddd484f9353c6121542b02f0/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FPlugin.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FPlugin.java?ref=8fca0fd5992a4fefddd484f9353c6121542b02f0",
      "patch": "@@ -37,13 +37,16 @@ public class Plugin {\n     public static Plugin of(RegisteredPlugin registeredPlugin, @Nullable String subgroup) {\n         Plugin plugin = new Plugin();\n         plugin.name = registeredPlugin.name();\n+        PluginSubGroup subGroupInfos = null;\n         if (subgroup == null) {\n             plugin.title = registeredPlugin.title();\n         } else {\n-            plugin.title = subgroup.substring(subgroup.lastIndexOf('.') + 1);\n+            subGroupInfos = registeredPlugin.allClass().stream().filter(c -> c.getName().contains(subgroup)).map(clazz -> clazz.getPackage().getDeclaredAnnotation(PluginSubGroup.class)).toList().getFirst();\n+            plugin.title = !subGroupInfos.title().isEmpty() ? subGroupInfos.title() : subgroup.substring(subgroup.lastIndexOf('.') + 1);;\n+\n         }\n         plugin.group = registeredPlugin.group();\n-        plugin.description = registeredPlugin.description();\n+        plugin.description = subGroupInfos != null && !subGroupInfos.description().isEmpty() ? subGroupInfos.description() : registeredPlugin.description();\n         plugin.license = registeredPlugin.license();\n         plugin.longDescription = registeredPlugin.longDescription();\n         plugin.version = registeredPlugin.version();\n@@ -59,7 +62,9 @@ public static Plugin of(RegisteredPlugin registeredPlugin, @Nullable String subg\n                 e.getValue().toString()\n             ))\n             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-        plugin.categories =  registeredPlugin\n+        plugin.categories = subGroupInfos != null ?\n+            Arrays.stream(subGroupInfos.categories()).toList() :\n+            registeredPlugin\n             .allClass()\n             .stream()\n             .map(clazz -> clazz.getPackage().getDeclaredAnnotation(PluginSubGroup.class))",
      "parent_sha": "0c2c47600b78490ac95a99c4a46ef2acdcb47cf1"
    }
  },
  {
    "oid": "a698b80d1b094a1a880444bbad8a4edce085270b",
    "message": "fix(tests): add creation time and last modified time tests to make sure they are millis\n\npart of #4119",
    "date": "2024-08-20T07:29:08Z",
    "url": "https://github.com/kestra-io/kestra/commit/a698b80d1b094a1a880444bbad8a4edce085270b",
    "details": {
      "sha": "ee9160cc7f64878c22198bf42688cd2ed5ce70af",
      "filename": "tests/src/main/java/io/kestra/core/storage/StorageTestSuite.java",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/kestra-io/kestra/blob/a698b80d1b094a1a880444bbad8a4edce085270b/tests%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fstorage%2FStorageTestSuite.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/a698b80d1b094a1a880444bbad8a4edce085270b/tests%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fstorage%2FStorageTestSuite.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/tests%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fstorage%2FStorageTestSuite.java?ref=a698b80d1b094a1a880444bbad8a4edce085270b",
      "patch": "@@ -12,6 +12,8 @@\n import java.io.*;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n@@ -543,14 +545,22 @@ private void getAttributes(String prefix, String tenantId) throws Exception {\n         assertThat(attr.getFileName(), is(\"root.yml\"));\n         assertThat(attr.getType(), is(FileAttributes.FileType.File));\n         assertThat(attr.getSize(), is((long) contentString.length()));\n-        assertThat(attr.getLastModifiedTime(), notNullValue());\n-        assertThat(attr.getCreationTime(), notNullValue());\n+        Instant lastModifiedInstant = Instant.ofEpochMilli(attr.getLastModifiedTime());\n+        assertThat(lastModifiedInstant.isAfter(Instant.now().minus(Duration.ofMinutes(1))), is(true));\n+        assertThat(lastModifiedInstant.isBefore(Instant.now()), is(true));\n+        Instant creationInstant = Instant.ofEpochMilli(attr.getCreationTime());\n+        assertThat(creationInstant.isAfter(Instant.now().minus(Duration.ofMinutes(1))), is(true));\n+        assertThat(creationInstant.isBefore(Instant.now()), is(true));\n \n         attr = storageInterface.getAttributes(tenantId, new URI(\"/\" + prefix + \"/storage/level1\"));\n         assertThat(attr.getFileName(), is(\"level1\"));\n         assertThat(attr.getType(), is(FileAttributes.FileType.Directory));\n-        assertThat(attr.getLastModifiedTime(), notNullValue());\n-        assertThat(attr.getCreationTime(), notNullValue());\n+        lastModifiedInstant = Instant.ofEpochMilli(attr.getLastModifiedTime());\n+        assertThat(lastModifiedInstant.isAfter(Instant.now().minus(Duration.ofMinutes(1))), is(true));\n+        assertThat(lastModifiedInstant.isBefore(Instant.now()), is(true));\n+        creationInstant = Instant.ofEpochMilli(attr.getCreationTime());\n+        assertThat(creationInstant.isAfter(Instant.now().minus(Duration.ofMinutes(1))), is(true));\n+        assertThat(creationInstant.isBefore(Instant.now()), is(true));\n     }\n \n     @Test",
      "parent_sha": "245dd047527b9f98726d5484abe6ce20279ea01b"
    }
  },
  {
    "oid": "558cef175c04bdff43822eac85d9daf67b6dc437",
    "message": "fix(core): polling trigger didn't update their next evaluation date\n\nSo they are re-evaluated each second",
    "date": "2024-02-15T09:11:33Z",
    "url": "https://github.com/kestra-io/kestra/commit/558cef175c04bdff43822eac85d9daf67b6dc437",
    "details": {
      "sha": "584d811adc24af03718bcc2379c9474bc2f3c2de",
      "filename": "core/src/main/java/io/kestra/core/schedulers/AbstractScheduler.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/kestra-io/kestra/blob/558cef175c04bdff43822eac85d9daf67b6dc437/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FAbstractScheduler.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/558cef175c04bdff43822eac85d9daf67b6dc437/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FAbstractScheduler.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FAbstractScheduler.java?ref=558cef175c04bdff43822eac85d9daf67b6dc437",
      "patch": "@@ -159,7 +159,8 @@ public void run() {\n                         workerTriggerResult.getExecution().get(),\n                         workerTriggerResult.getTriggerContext()\n                     );\n-                    this.handleEvaluatePollingTriggerResult(triggerExecution);\n+                    ZonedDateTime nextExecutionDate = ((PollingTriggerInterface) workerTriggerResult.getTrigger()).nextEvaluationDate();\n+                    this.handleEvaluatePollingTriggerResult(triggerExecution, nextExecutionDate);\n                 } else {\n                     // previously, if no interval the trigger was executed immediately. I think only the Schedule trigger has no interval\n                     // now that all triggers are sent to the worker, we need to do this to avoid issues with backfills\n@@ -388,14 +389,15 @@ private void handle() {\n     // Polling triggers result is evaluated in another thread\n     // with the workerTriggerResultQueue,\n     // so we can't save them now\n-    private void handleEvaluatePollingTriggerResult(SchedulerExecutionWithTrigger result) {\n+    private void handleEvaluatePollingTriggerResult(SchedulerExecutionWithTrigger result, ZonedDateTime nextExecutionDate) {\n         Stream.of(result)\n             .filter(Objects::nonNull)\n             .peek(this::log)\n             .forEach(executionWithTrigger -> {\n                     Trigger trigger = Trigger.of(\n                         executionWithTrigger.getTriggerContext(),\n-                        executionWithTrigger.getExecution()\n+                        executionWithTrigger.getExecution(),\n+                        nextExecutionDate\n                     );\n \n                     // Check if the localTriggerState contains it",
      "parent_sha": "6ba21097f72c1b3aba052eee0f0b1df16bc7746e"
    }
  },
  {
    "oid": "91dd6170f18a46a83a316b9eeecce117f8acb17b",
    "message": "fix(jdbc): possible race when initializing the JdbcMapper",
    "date": "2024-12-04T09:40:50Z",
    "url": "https://github.com/kestra-io/kestra/commit/91dd6170f18a46a83a316b9eeecce117f8acb17b",
    "details": {
      "sha": "aec556ade71efdeb825470527b17c796c021d157",
      "filename": "jdbc/src/main/java/io/kestra/jdbc/JdbcMapper.java",
      "status": "modified",
      "additions": 23,
      "deletions": 22,
      "changes": 45,
      "blob_url": "https://github.com/kestra-io/kestra/blob/91dd6170f18a46a83a316b9eeecce117f8acb17b/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2FJdbcMapper.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/91dd6170f18a46a83a316b9eeecce117f8acb17b/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2FJdbcMapper.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2FJdbcMapper.java?ref=91dd6170f18a46a83a316b9eeecce117f8acb17b",
      "patch": "@@ -17,30 +17,31 @@ public abstract class JdbcMapper {\n     private static final DateTimeFormatter INSTANT_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")\n         .withZone(ZoneOffset.UTC);\n     private static final DateTimeFormatter ZONED_DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\");\n-    private static ObjectMapper MAPPER;\n+    private static final ObjectMapper MAPPER = init();\n \n     public static ObjectMapper of() {\n-        if (MAPPER == null) {\n-            MAPPER = JacksonMapper.ofJson(false).copy();\n-\n-            final SimpleModule module = new SimpleModule();\n-            module.addSerializer(Instant.class, new JsonSerializer<>() {\n-                @Override\n-                public void serialize(Instant instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n-                    jsonGenerator.writeString(INSTANT_FORMATTER.format(instant));\n-                }\n-            });\n-\n-            module.addSerializer(ZonedDateTime.class, new JsonSerializer<>() {\n-                @Override\n-                public void serialize(ZonedDateTime instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n-                    jsonGenerator.writeString(ZONED_DATE_TIME_FORMATTER.format(instant));\n-                }\n-            });\n-\n-            MAPPER.registerModule(module);\n-        }\n-\n         return MAPPER;\n     }\n+\n+    private static ObjectMapper init() {\n+        ObjectMapper objectMapper = JacksonMapper.ofJson(false).copy();\n+\n+        final SimpleModule module = new SimpleModule();\n+        module.addSerializer(Instant.class, new JsonSerializer<>() {\n+            @Override\n+            public void serialize(Instant instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+                jsonGenerator.writeString(INSTANT_FORMATTER.format(instant));\n+            }\n+        });\n+\n+        module.addSerializer(ZonedDateTime.class, new JsonSerializer<>() {\n+            @Override\n+            public void serialize(ZonedDateTime instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+                jsonGenerator.writeString(ZONED_DATE_TIME_FORMATTER.format(instant));\n+            }\n+        });\n+\n+        objectMapper.registerModule(module);\n+        return objectMapper;\n+    }\n }",
      "parent_sha": "ba0e770a05ff0fce5b69aa8a91b98c746bfa9eb8"
    }
  },
  {
    "oid": "e0eaf675b24b3170a7107a14e15b8ba32d56c776",
    "message": "refactor: return only command when no interpreter and no beforeCommands (#7452)",
    "date": "2025-02-18T17:59:04Z",
    "url": "https://github.com/kestra-io/kestra/commit/e0eaf675b24b3170a7107a14e15b8ba32d56c776",
    "details": {
      "sha": "f22bf8ee1622e19ab5bcb690873356e78908e1f5",
      "filename": "script/src/main/java/io/kestra/plugin/scripts/exec/scripts/runners/CommandsWrapper.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/kestra-io/kestra/blob/e0eaf675b24b3170a7107a14e15b8ba32d56c776/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Fexec%2Fscripts%2Frunners%2FCommandsWrapper.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/e0eaf675b24b3170a7107a14e15b8ba32d56c776/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Fexec%2Fscripts%2Frunners%2FCommandsWrapper.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Fexec%2Fscripts%2Frunners%2FCommandsWrapper.java?ref=e0eaf675b24b3170a7107a14e15b8ba32d56c776",
      "patch": "@@ -172,12 +172,15 @@ public <T extends TaskRunnerDetailResult> ScriptOutput run() throws Exception {\n         List<String> renderedBeforeCommands = this.renderCommands(runContext, beforeCommands);\n         List<String> renderedInterpreter = this.renderCommands(runContext, interpreter);\n \n-        List<String> finalCommands = ScriptService.scriptCommands(\n-            renderedInterpreter,\n-            renderedBeforeCommands,\n-            renderedCommands,\n-            Optional.ofNullable(targetOS).orElse(TargetOS.AUTO)\n-        );\n+        List<String> finalCommands = renderedBeforeCommands.isEmpty() && renderedInterpreter.isEmpty() ?\n+            renderedCommands :\n+            ScriptService.scriptCommands(\n+                renderedInterpreter,\n+                renderedBeforeCommands,\n+                renderedCommands,\n+                Optional.ofNullable(targetOS).orElse(TargetOS.AUTO)\n+            );\n+\n         this.commands = Property.of(finalCommands);\n \n         ScriptOutput.ScriptOutputBuilder scriptOutputBuilder = ScriptOutput.builder()",
      "parent_sha": "666f8a7ad92038f045994828fe5dd63abff579b6"
    }
  },
  {
    "oid": "26b2ad3d1bfd87f72b96818ad05e7801d33f2748",
    "message": "fix(webserver): remove multipleconditionstorage for webhook (#2318)",
    "date": "2023-10-17T08:12:36Z",
    "url": "https://github.com/kestra-io/kestra/commit/26b2ad3d1bfd87f72b96818ad05e7801d33f2748",
    "details": {
      "sha": "54d7c0e1a8b6734512f95678580a8be6befb580b",
      "filename": "webserver/src/main/java/io/kestra/webserver/controllers/ExecutionController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/kestra-io/kestra/blob/26b2ad3d1bfd87f72b96818ad05e7801d33f2748/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FExecutionController.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/26b2ad3d1bfd87f72b96818ad05e7801d33f2748/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FExecutionController.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FExecutionController.java?ref=26b2ad3d1bfd87f72b96818ad05e7801d33f2748",
      "patch": "@@ -130,9 +130,6 @@ public class ExecutionController {\n     @Inject\n     private TenantService tenantService;\n \n-    @Inject\n-    private MultipleConditionStorageInterface multipleConditionStorageInterface;\n-\n     @ExecuteOn(TaskExecutors.IO)\n     @Get(uri = \"/search\", produces = MediaType.TEXT_JSON)\n     @Operation(tags = {\"Executions\"}, summary = \"Search for executions\")\n@@ -441,7 +438,8 @@ protected HttpResponse<Execution> webhook(\n         }\n \n         // we check conditions here as it's easier as the execution is created we have the body and headers available for the runContext\n-        if (!conditionService.isValid(webhook.get(), flow, result, multipleConditionStorageInterface)) {\n+        var conditionContext = conditionService.conditionContext(runContextFactory.of(flow, result), flow, result);\n+        if (!conditionService.isValid(flow, webhook.get(), conditionContext)) {\n             return HttpResponse.noContent();\n         }\n ",
      "parent_sha": "fb77cc21885bd90cc7dffb942611075e0e0a71ed"
    }
  },
  {
    "oid": "f4b78755ad7167254b5dfc3e1ed0f700f87c5022",
    "message": "docs(core): better documentation on docker tasks",
    "date": "2025-02-11T21:12:43Z",
    "url": "https://github.com/kestra-io/kestra/commit/f4b78755ad7167254b5dfc3e1ed0f700f87c5022",
    "details": {
      "sha": "102413db6118152f79db9e782d405de67029f96c",
      "filename": "script/src/main/java/io/kestra/plugin/scripts/runner/docker/Docker.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/kestra-io/kestra/blob/f4b78755ad7167254b5dfc3e1ed0f700f87c5022/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Frunner%2Fdocker%2FDocker.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/f4b78755ad7167254b5dfc3e1ed0f700f87c5022/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Frunner%2Fdocker%2FDocker.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Frunner%2Fdocker%2FDocker.java?ref=f4b78755ad7167254b5dfc3e1ed0f700f87c5022",
      "patch": "@@ -202,10 +202,11 @@ public class Docker extends TaskRunner<Docker.DockerTaskRunnerDetailResult> {\n \n     @Schema(\n         title = \"List of port bindings.\",\n-        description = \"Corresponds to the --publish (-p) option of the docker run CLI command using the format `ip:dockerHostPort:containerPort/protocol`. Possible example : \\n\" +\n-            \"- 8080:80/udp\" +\n-            \"- 127.0.0.1:8080:80\" +\n-            \"- 127.0.0.1:8080:80/udp\"\n+        description = \"Corresponds to the `--publish` (`-p`) option of the docker run CLI command using the format `ip:dockerHostPort:containerPort/protocol`.\\n\" +\n+            \"Possible example :\\n\" +\n+            \"- `8080:80/udp`\" +\n+            \"- `127.0.0.1:8080:80`\" +\n+            \"- `127.0.0.1:8080:80/udp`\"\n     )\n     @PluginProperty(dynamic = true)\n     protected List<String> portBindings;",
      "parent_sha": "7bf42cb1cbc05d105a393a4f8f11a506ef8e45ce"
    }
  },
  {
    "oid": "15dca3c05c0448276fa1488f464df2e94fcc12b4",
    "message": "fix: docker task runner type",
    "date": "2024-05-29T13:27:09Z",
    "url": "https://github.com/kestra-io/kestra/commit/15dca3c05c0448276fa1488f464df2e94fcc12b4",
    "details": {
      "sha": "6771f2aa30e2df85c519058a7552fa62fe08b9df",
      "filename": "script/src/main/java/io/kestra/plugin/scripts/runner/docker/Docker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/15dca3c05c0448276fa1488f464df2e94fcc12b4/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Frunner%2Fdocker%2FDocker.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/15dca3c05c0448276fa1488f464df2e94fcc12b4/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Frunner%2Fdocker%2FDocker.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/script%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fscripts%2Frunner%2Fdocker%2FDocker.java?ref=15dca3c05c0448276fa1488f464df2e94fcc12b4",
      "patch": "@@ -66,7 +66,7 @@\n                   - id: shell\n                     type: io.kestra.plugin.scripts.shell.Commands\n                     taskRunner:\n-                      type: io.kestra.plugin.scripts.runner.docker.DockerTaskRunner\n+                      type: io.kestra.plugin.scripts.runner.docker.Docker\n                     commands:\n                     - echo \"Hello World\\\"\"\"\",\n             full = true",
      "parent_sha": "a9a2768d9f446e22312fc3a265dff39e069423a0"
    }
  },
  {
    "oid": "e3f0cf3c65bee92284d9a848c5d8e0c6f3aa5140",
    "message": "feat(examples): update an example to use 0.17.0 plugin names (#3820)",
    "date": "2024-05-24T17:13:13Z",
    "url": "https://github.com/kestra-io/kestra/commit/e3f0cf3c65bee92284d9a848c5d8e0c6f3aa5140",
    "details": {
      "sha": "980c88f9c6e5a998eaf753af3530fed90d97d3aa",
      "filename": "core/src/main/java/io/kestra/plugin/core/flow/Pause.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/e3f0cf3c65bee92284d9a848c5d8e0c6f3aa5140/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FPause.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/e3f0cf3c65bee92284d9a848c5d8e0c6f3aa5140/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FPause.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FPause.java?ref=e3f0cf3c65bee92284d9a848c5d8e0c6f3aa5140",
      "patch": "@@ -116,7 +116,7 @@\n                         defaults: Well-deserved vacation\n \n                   - id: approve\n-                    type: io.kestra.plugin.fs.http.Request\n+                    type: io.kestra.plugin.core.http.Request\n                     uri: https://reqres.in/api/products\n                     method: POST\n                     contentType: application/json",
      "parent_sha": "aea578adfaa13510ecb7f22ddfc273beb1bca2c3"
    }
  },
  {
    "oid": "f14b638f73c01c092918625c8a6318054102aabe",
    "message": "fix(core): compilation issue",
    "date": "2025-03-28T08:26:01Z",
    "url": "https://github.com/kestra-io/kestra/commit/f14b638f73c01c092918625c8a6318054102aabe",
    "details": {
      "sha": "b0d629145b34b2179ff3700583ee23df85f5efae",
      "filename": "core/src/test/java/io/kestra/core/services/FlowServiceTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/f14b638f73c01c092918625c8a6318054102aabe/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FFlowServiceTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/f14b638f73c01c092918625c8a6318054102aabe/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FFlowServiceTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FFlowServiceTest.java?ref=f14b638f73c01c092918625c8a6318054102aabe",
      "patch": "@@ -217,7 +217,7 @@ void warnings() {\n             ))\n             .build();\n \n-        List<String> warnings = flowService.warnings(flow);\n+        List<String> warnings = flowService.warnings(flow, null);\n \n         assertThat(warnings.size(), is(1));\n         assertThat(warnings, containsInAnyOrder(",
      "parent_sha": "259b5b5282fe7aa26fb209a4022ca873215faa6f"
    }
  },
  {
    "oid": "6740aa2ddb04dcc2d5fd4bd593cd72ffaf437524",
    "message": "closes https://github.com/kestra-io/kestra/issues/3111",
    "date": "2024-02-22T10:10:46Z",
    "url": "https://github.com/kestra-io/kestra/commit/6740aa2ddb04dcc2d5fd4bd593cd72ffaf437524",
    "details": {
      "sha": "cd2985b0ad23ee6cf803865996dc1d1df37e0345",
      "filename": "core/src/main/java/io/kestra/core/tasks/flows/ForEachItem.java",
      "status": "modified",
      "additions": 59,
      "deletions": 1,
      "changes": 60,
      "blob_url": "https://github.com/kestra-io/kestra/blob/6740aa2ddb04dcc2d5fd4bd593cd72ffaf437524/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FForEachItem.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/6740aa2ddb04dcc2d5fd4bd593cd72ffaf437524/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FForEachItem.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FForEachItem.java?ref=6740aa2ddb04dcc2d5fd4bd593cd72ffaf437524",
      "patch": "@@ -110,7 +110,65 @@\n                     inputs:\n                       order: \"{{ taskrun.items }}\" # special variable that contains the items of the batch\n                 \"\"\"\n-        )\n+        ),\n+        @Example(\n+            title = \"\"\"\n+                Execute a subflow for each JSON item fetched from a REST API. The subflow `mysubflow` is called from the parent flow `iterate_over_json` using the `ForEachItem` task; this creates one subflow execution for each JSON object.\n+                \n+                Note how we first need to convert the JSON array to JSON-L format using the `JsonWriter` task. This is because the `items` attribute of the `ForEachItem` task expects a file where each line represents a single item. Suitable file types include Amazon ION (commonly produced by Query tasks), newline-separated JSON files, or CSV files formatted with one row per line and without a header. For other formats, you can use the conversion tasks available in the `io.kestra.plugin.serdes` module.\n+\n+                In this example, the subflow `mysubflow` expects a JSON object as input. The `JsonReader` task first reads the JSON array from the REST API and converts it to ION. Then, the `JsonWriter` task converts that ION file to JSON-L format, suitable for the `ForEachItem` task.\n+\n+                ```yaml\n+                id: mysubflow\n+                namespace: dev\n+\n+                inputs:\n+                  - id: json\n+                    type: JSON\n+\n+                tasks:\n+                  - id: debug\n+                    type: io.kestra.core.tasks.log.Log\n+                    message: \"{{ inputs.json }}\"\n+                ```\n+                \"\"\",\n+            full = true,\n+            code = \"\"\"\n+                id: iterate_over_json\n+                namespace: dev\n+\n+                tasks:\n+                  - id: download\n+                    type: io.kestra.plugin.fs.http.Download\n+                    uri: \"https://api.restful-api.dev/objects\"\n+                    contentType: application/json\n+                    method: GET\n+                    failOnEmptyResponse: true\n+                    timeout: PT15S\n+\n+                  - id: json_to_ion\n+                    type: io.kestra.plugin.serdes.json.JsonReader\n+                    from: \"{{ outputs.download.uri }}\"\n+                    newLine: false # regular json\n+\n+                  - id: ion_to_jsonl\n+                    type: io.kestra.plugin.serdes.json.JsonWriter\n+                    from: \"{{ outputs.json_to_ion.uri }}\"\n+                    newLine: true # JSON-L\n+\n+                  - id: for_each_item\n+                    type: io.kestra.core.tasks.flows.ForEachItem\n+                    items: \"{{ outputs.ion_to_jsonl.uri }}\"\n+                    batch:\n+                      rows: 1\n+                    namespace: dev\n+                    flowId: mysubflow\n+                    wait: true \n+                    transmitFailed: true \n+                    inputs:\n+                      json: '{{ json(read(taskrun.items)) }}'\"\"\"\n+        )        \n     }\n )\n public class ForEachItem extends Task implements ExecutableTask<ForEachItem.Output> {",
      "parent_sha": "e0b245331aab648c888171815b7da21fe74f1bd8"
    }
  },
  {
    "oid": "f1cf2fe50260360a6e782a3669b03c95171601c1",
    "message": "fix(docs): Note that schedule runs on UTC by default (#3960)",
    "date": "2024-06-08T11:10:18Z",
    "url": "https://github.com/kestra-io/kestra/commit/f1cf2fe50260360a6e782a3669b03c95171601c1",
    "details": {
      "sha": "864f100185851a8855cb8390b970c0ce1e90e205",
      "filename": "core/src/main/java/io/kestra/plugin/core/trigger/Schedule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/kestra-io/kestra/blob/f1cf2fe50260360a6e782a3669b03c95171601c1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Ftrigger%2FSchedule.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/f1cf2fe50260360a6e782a3669b03c95171601c1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Ftrigger%2FSchedule.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Ftrigger%2FSchedule.java?ref=f1cf2fe50260360a6e782a3669b03c95171601c1",
      "patch": "@@ -48,7 +48,8 @@\n     title = \"Schedule a flow based on a CRON expression.\",\n     description = \"You can add multiple schedule(s) to a flow.\\n\" +\n         \"The scheduler keeps track of the last scheduled date, allowing you to easily backfill missed executions.\\n\" +\n-        \"Keep in mind that if you change the trigger ID, the scheduler will consider this as a new schedule, and will start creating new scheduled executions from the current date.\"\n+        \"Keep in mind that if you change the trigger ID, the scheduler will consider this as a new schedule, and will start creating new scheduled executions from the current date.\\n\" +\n+        \"By default, Schedules will use UTC. If you need a different timezone, use the `timezone` property to update it.\"\n )\n @Plugin(\n     examples = {",
      "parent_sha": "7b2866e45538ccc261aaeb56b643132eefeb91f2"
    }
  },
  {
    "oid": "d0b3f1f0785709c2519d153496e1e30b93ff4b10",
    "message": "fix(jdbc): avoid NPE in daily stats by providing start & end dates fallbacks\n\ncloses kestra-io/kestra-ee#2326",
    "date": "2024-11-29T13:48:20Z",
    "url": "https://github.com/kestra-io/kestra/commit/d0b3f1f0785709c2519d153496e1e30b93ff4b10",
    "details": {
      "sha": "c588cea8052826f371a5f882425de8827fd92470",
      "filename": "jdbc/src/main/java/io/kestra/jdbc/repository/AbstractJdbcExecutionRepository.java",
      "status": "modified",
      "additions": 35,
      "deletions": 34,
      "changes": 69,
      "blob_url": "https://github.com/kestra-io/kestra/blob/d0b3f1f0785709c2519d153496e1e30b93ff4b10/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frepository%2FAbstractJdbcExecutionRepository.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/d0b3f1f0785709c2519d153496e1e30b93ff4b10/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frepository%2FAbstractJdbcExecutionRepository.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frepository%2FAbstractJdbcExecutionRepository.java?ref=d0b3f1f0785709c2519d153496e1e30b93ff4b10",
      "patch": "@@ -352,6 +352,9 @@ public List<DailyExecutionStatistics> dailyStatisticsForAllTenants(\n             throw new UnsupportedOperationException();\n         }\n \n+        ZonedDateTime finalStartDate = startDate == null ? ZonedDateTime.now().minusDays(30) : startDate;\n+        ZonedDateTime finalEndDate = endDate == null ? ZonedDateTime.now() : endDate;\n+\n         Results results = dailyStatisticsQueryForAllTenants(\n             List.of(\n                 STATE_CURRENT_FIELD\n@@ -360,8 +363,8 @@ public List<DailyExecutionStatistics> dailyStatisticsForAllTenants(\n             namespace,\n             flowId,\n             null,\n-            startDate,\n-            endDate,\n+            finalStartDate,\n+            finalEndDate,\n             groupBy,\n             null\n         );\n@@ -370,8 +373,8 @@ public List<DailyExecutionStatistics> dailyStatisticsForAllTenants(\n             results.resultsOrRows()\n                 .getFirst()\n                 .result(),\n-            startDate,\n-            endDate,\n+            finalStartDate,\n+            finalEndDate,\n             groupBy\n         );\n     }\n@@ -393,6 +396,9 @@ public List<DailyExecutionStatistics> dailyStatistics(\n             throw new UnsupportedOperationException();\n         }\n \n+        ZonedDateTime finalStartDate = startDate == null ? ZonedDateTime.now().minusDays(30) : startDate;\n+        ZonedDateTime finalEndDate = endDate == null ? ZonedDateTime.now() : endDate;\n+\n         Results results = dailyStatisticsQuery(\n             List.of(\n                 STATE_CURRENT_FIELD\n@@ -403,8 +409,8 @@ public List<DailyExecutionStatistics> dailyStatistics(\n             namespace,\n             flowId,\n             null,\n-            startDate,\n-            endDate,\n+            finalStartDate,\n+            finalEndDate,\n             groupBy,\n             states\n         );\n@@ -413,8 +419,8 @@ public List<DailyExecutionStatistics> dailyStatistics(\n             results.resultsOrRows()\n                 .getFirst()\n                 .result(),\n-            startDate,\n-            endDate,\n+            finalStartDate,\n+            finalEndDate,\n             groupBy\n         );\n     }\n@@ -453,8 +459,8 @@ private Results dailyStatisticsQueryForAllTenants(\n         @Nullable String namespace,\n         @Nullable String flowId,\n         List<FlowFilter> flows,\n-        @Nullable ZonedDateTime startDate,\n-        @Nullable ZonedDateTime endDate,\n+        ZonedDateTime startDate,\n+        ZonedDateTime endDate,\n         @Nullable DateUtils.GroupType groupBy,\n         @Nullable List<State.Type> state\n     ) {\n@@ -481,8 +487,8 @@ private Results dailyStatisticsQuery(\n         @Nullable String namespace,\n         @Nullable String flowId,\n         List<FlowFilter> flows,\n-        @Nullable ZonedDateTime startDate,\n-        @Nullable ZonedDateTime endDate,\n+        ZonedDateTime startDate,\n+        ZonedDateTime endDate,\n         @Nullable DateUtils.GroupType groupBy,\n         @Nullable List<State.Type> state\n     ) {\n@@ -509,23 +515,20 @@ private Results dailyStatisticsQuery(\n         @Nullable String namespace,\n         @Nullable String flowId,\n         List<FlowFilter> flows,\n-        @Nullable ZonedDateTime startDate,\n-        @Nullable ZonedDateTime endDate,\n+        ZonedDateTime startDate,\n+        ZonedDateTime endDate,\n         @Nullable DateUtils.GroupType groupBy,\n         @Nullable List<State.Type> state\n     ) {\n-        ZonedDateTime finalStartDate = startDate == null ? ZonedDateTime.now().minusDays(30) : startDate;\n-        ZonedDateTime finalEndDate = endDate == null ? ZonedDateTime.now() : endDate;\n-\n-        List<Field<?>> dateFields = new ArrayList<>(groupByFields(Duration.between(finalStartDate, finalEndDate), \"start_date\", groupBy));\n+        List<Field<?>> dateFields = new ArrayList<>(groupByFields(Duration.between(startDate, endDate), \"start_date\", groupBy));\n         List<Field<?>> selectFields = new ArrayList<>(fields);\n         selectFields.addAll(List.of(\n             DSL.count().as(\"count\"),\n             DSL.min(field(\"state_duration\", Long.class)).as(\"duration_min\"),\n             DSL.max(field(\"state_duration\", Long.class)).as(\"duration_max\"),\n             DSL.sum(field(\"state_duration\", Long.class)).as(\"duration_sum\")\n         ));\n-        selectFields.addAll(groupByFields(Duration.between(finalStartDate, finalEndDate), \"start_date\", groupBy, true));\n+        selectFields.addAll(groupByFields(Duration.between(startDate, endDate), \"start_date\", groupBy, true));\n \n         return jdbcRepository\n             .getDslContextWrapper()\n@@ -536,8 +539,8 @@ private Results dailyStatisticsQuery(\n                     .select(selectFields)\n                     .from(this.jdbcRepository.getTable())\n                     .where(defaultFilter)\n-                    .and(START_DATE_FIELD.greaterOrEqual(finalStartDate.toOffsetDateTime()))\n-                    .and(START_DATE_FIELD.lessOrEqual(finalEndDate.toOffsetDateTime()));\n+                    .and(START_DATE_FIELD.greaterOrEqual(startDate.toOffsetDateTime()))\n+                    .and(START_DATE_FIELD.lessOrEqual(endDate.toOffsetDateTime()));\n \n                 select = filteringQuery(select, scope, namespace, flowId, flows, query, null, null, null);\n \n@@ -680,6 +683,9 @@ public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlow\n             fields.add(field(\"flow_id\", String.class));\n         }\n \n+        ZonedDateTime finalStartDate = startDate == null ? ZonedDateTime.now().minusDays(30) : startDate;\n+        ZonedDateTime finalEndDate = endDate == null ? ZonedDateTime.now() : endDate;\n+\n         Results results = dailyStatisticsQuery(\n             fields,\n             query,\n@@ -688,8 +694,8 @@ public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlow\n             namespace,\n             flowId,\n             flows,\n-            startDate,\n-            endDate,\n+            finalStartDate,\n+            finalEndDate,\n             null,\n             null\n         );\n@@ -709,8 +715,8 @@ public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlow\n                             \"*\",\n                             dailyStatisticsQueryMapRecord(\n                                 e.getValue(),\n-                                startDate,\n-                                endDate,\n+                                finalStartDate,\n+                                finalEndDate,\n                                 null\n                             )\n                         )\n@@ -725,8 +731,8 @@ public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlow\n                                 f.getKey(),\n                                 dailyStatisticsQueryMapRecord(\n                                     f.getValue(),\n-                                    startDate,\n-                                    endDate,\n+                                    finalStartDate,\n+                                    finalEndDate,\n                                     null\n                                 )\n                             ))\n@@ -843,13 +849,8 @@ public List<ExecutionCount> executionCounts(\n                     .from(this.jdbcRepository.getTable())\n                     .where(this.defaultFilter(tenantId));\n \n-                if (startDate != null) {\n-                    select = select.and(START_DATE_FIELD.greaterOrEqual(finalStartDate.toOffsetDateTime()));\n-                }\n-\n-                if (endDate != null) {\n-                    select = select.and(field(\"end_date\").lessOrEqual(finalEndDate.toOffsetDateTime()));\n-                }\n+                select = select.and(START_DATE_FIELD.greaterOrEqual(finalStartDate.toOffsetDateTime()));\n+                select = select.and(field(\"end_date\").lessOrEqual(finalEndDate.toOffsetDateTime()));\n \n                 if (states != null) {\n                     select = select.and(this.statesFilter(states));",
      "parent_sha": "b55ad0a7526af9389b0e3d72b7bd104226ecfe77"
    }
  },
  {
    "oid": "3085beb0a2b756db6791750d36bb0bc0f4823cc1",
    "message": "fix(core): Log isolation between execution*\n\nclose #132",
    "date": "2020-08-11T14:34:11Z",
    "url": "https://github.com/kestra-io/kestra/commit/3085beb0a2b756db6791750d36bb0bc0f4823cc1",
    "details": {
      "sha": "bda76c70b07d6276ea497961aaa9b023601d6a86",
      "filename": "core/src/main/java/org/kestra/core/runners/RunContextLogger.java",
      "status": "modified",
      "additions": 25,
      "deletions": 4,
      "changes": 29,
      "blob_url": "https://github.com/kestra-io/kestra/blob/3085beb0a2b756db6791750d36bb0bc0f4823cc1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Frunners%2FRunContextLogger.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/3085beb0a2b756db6791750d36bb0bc0f4823cc1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Frunners%2FRunContextLogger.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Frunners%2FRunContextLogger.java?ref=3085beb0a2b756db6791750d36bb0bc0f4823cc1",
      "patch": "@@ -1,18 +1,16 @@\n package org.kestra.core.runners;\n \n-\n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.LoggerContext;\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.classic.spi.IThrowableProxy;\n-import ch.qos.logback.classic.spi.LoggingEvent;\n import ch.qos.logback.classic.spi.ThrowableProxy;\n import ch.qos.logback.core.AppenderBase;\n import com.google.common.base.Throwables;\n import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n import org.kestra.core.models.executions.LogEntry;\n-import org.slf4j.LoggerFactory;\n \n import java.time.Instant;\n import java.util.ArrayList;\n@@ -94,14 +92,19 @@ private static Throwable throwable(ILoggingEvent event) {\n \n     public org.slf4j.Logger logger(Class<?> cls) {\n         if (this.logger == null) {\n-            LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();\n+            LoggerContext loggerContext = new LoggerContext();\n             this.logger = loggerContext.getLogger(this.loggerName != null ? loggerName : cls.getName());\n \n             this.contextAppender = new ContextAppender();\n             this.contextAppender.setContext(loggerContext);\n             this.contextAppender.start();\n \n+            ForwardAppender forwardAppender = new ForwardAppender();\n+            forwardAppender.setContext(loggerContext);\n+            forwardAppender.start();\n+\n             this.logger.addAppender(this.contextAppender);\n+            this.logger.addAppender(forwardAppender);\n             this.logger.setLevel(Level.TRACE);\n             this.logger.setAdditive(true);\n         }\n@@ -128,4 +131,22 @@ protected void append(ILoggingEvent e) {\n             events.add(e);\n         }\n     }\n+\n+    @Slf4j\n+    public static class ForwardAppender extends AppenderBase<ILoggingEvent> {\n+        @Override\n+        public void start() {\n+            super.start();\n+        }\n+\n+        @Override\n+        public void stop() {\n+            super.stop();\n+        }\n+\n+        @Override\n+        protected void append(ILoggingEvent e) {\n+            ((ch.qos.logback.classic.Logger) log).callAppenders(e);\n+        }\n+    }\n }",
      "parent_sha": "608bd126c8955b4a7927ea31dae20d5eb3cd00c4"
    }
  },
  {
    "oid": "bfd82e0b5c6dee3f030a09601a7c317e5169eb7e",
    "message": "chore(core): eval value property once for flowable task Switch",
    "date": "2025-02-28T17:38:31Z",
    "url": "https://github.com/kestra-io/kestra/commit/bfd82e0b5c6dee3f030a09601a7c317e5169eb7e",
    "details": {
      "sha": "2c79df5f1bda7506d3db1340e3dea076e727113e",
      "filename": "core/src/main/java/io/kestra/plugin/core/flow/Switch.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/kestra-io/kestra/blob/bfd82e0b5c6dee3f030a09601a7c317e5169eb7e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FSwitch.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/bfd82e0b5c6dee3f030a09601a7c317e5169eb7e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FSwitch.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FSwitch.java?ref=bfd82e0b5c6dee3f030a09601a7c317e5169eb7e",
      "patch": "@@ -166,10 +166,10 @@ public GraphCluster tasksTree(Execution execution, TaskRun taskRun, List<String>\n \n     @Override\n     public List<ResolvedTask> childTasks(RunContext runContext, TaskRun parentTaskRun) throws IllegalVariableEvaluationException {\n-        return cases\n-            .entrySet()\n+        final String value = rendererValue(runContext);\n+        return cases.entrySet()\n             .stream()\n-            .filter(throwPredicate(entry -> entry.getKey().equals(rendererValue(runContext))))\n+            .filter(throwPredicate(entry -> entry.getKey().equals(value)))\n             .map(Map.Entry::getValue)\n             .map(tasks -> FlowableUtils.resolveTasks(tasks, parentTaskRun))\n             .findFirst()",
      "parent_sha": "fa07cbd3b9fce507a4feff0b14f4aa00f986d94a"
    }
  },
  {
    "oid": "c15e971ed6884cfb8b4f836aac43ea4a75a39fd2",
    "message": "fix(core): take timezone into account for new schedule triggers (#3230)\n\ncloses #3227",
    "date": "2024-03-07T10:18:45Z",
    "url": "https://github.com/kestra-io/kestra/commit/c15e971ed6884cfb8b4f836aac43ea4a75a39fd2",
    "details": {
      "sha": "c1af26cec958414c0642f64071f10b4d6667a22b",
      "filename": "core/src/main/java/io/kestra/core/models/triggers/types/Schedule.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/kestra-io/kestra/blob/c15e971ed6884cfb8b4f836aac43ea4a75a39fd2/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftriggers%2Ftypes%2FSchedule.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/c15e971ed6884cfb8b4f836aac43ea4a75a39fd2/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftriggers%2Ftypes%2FSchedule.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftriggers%2Ftypes%2FSchedule.java?ref=c15e971ed6884cfb8b4f836aac43ea4a75a39fd2",
      "patch": "@@ -254,12 +254,12 @@ public ZonedDateTime nextEvaluationDate(ConditionContext conditionContext, Optio\n             // is after the end, then we calculate again the nextDate\n             // based on now()\n             if (backfill != null && nextDate != null && nextDate.isAfter(backfill.getEnd())) {\n-                nextDate = computeNextEvaluationDate(executionTime, ZonedDateTime.now()).orElse(null);\n+                nextDate = computeNextEvaluationDate(executionTime, convertDateTime(ZonedDateTime.now())).orElse(null);\n             }\n         }\n         // no previous present & no backfill or recover missed schedules, just provide now\n         else {\n-            nextDate = computeNextEvaluationDate(executionTime, ZonedDateTime.now()).orElse(null);\n+            nextDate = computeNextEvaluationDate(executionTime, convertDateTime(ZonedDateTime.now())).orElse(null);\n         }\n \n         // if max delay reached, we calculate a new date except if we are doing a backfill\n@@ -280,7 +280,7 @@ public ZonedDateTime nextEvaluationDate(ConditionContext conditionContext, Optio\n     public ZonedDateTime nextEvaluationDate() {\n         // it didn't take into account the schedule condition, but as they are taken into account inside eval() it's OK.\n         ExecutionTime executionTime = this.executionTime();\n-        return computeNextEvaluationDate(executionTime, ZonedDateTime.now()).orElse(ZonedDateTime.now());\n+        return computeNextEvaluationDate(executionTime, convertDateTime(ZonedDateTime.now())).orElse(convertDateTime(ZonedDateTime.now()));\n     }\n \n     public ZonedDateTime previousEvaluationDate(ConditionContext conditionContext) {\n@@ -301,7 +301,7 @@ public ZonedDateTime previousEvaluationDate(ConditionContext conditionContext) {\n                 conditionContext.getRunContext().logger().warn(\"Unable to evaluate the conditions for the next evaluation date for trigger '{}', conditions will not be evaluated\", this.getId());\n             }\n         }\n-        return computePreviousEvaluationDate(executionTime, ZonedDateTime.now()).orElse(ZonedDateTime.now());\n+        return computePreviousEvaluationDate(executionTime, convertDateTime(ZonedDateTime.now())).orElse(convertDateTime(ZonedDateTime.now()));\n     }\n \n     @Override",
      "parent_sha": "691597efe2bfdffc519d215968be272859fb2d8c"
    }
  },
  {
    "oid": "42a3484f0e4ac98388833e3ee8b53258e51e4205",
    "message": "fix(cli): lazy init of repository & storage to wait for plugin init in StateStoreMigrateCommand",
    "date": "2024-08-28T11:01:36Z",
    "url": "https://github.com/kestra-io/kestra/commit/42a3484f0e4ac98388833e3ee8b53258e51e4205",
    "details": {
      "sha": "3238a9caffe8126d870c565867701f87dcf50df9",
      "filename": "cli/src/main/java/io/kestra/cli/commands/sys/statestore/StateStoreMigrateCommand.java",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/kestra-io/kestra/blob/42a3484f0e4ac98388833e3ee8b53258e51e4205/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fsys%2Fstatestore%2FStateStoreMigrateCommand.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/42a3484f0e4ac98388833e3ee8b53258e51e4205/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fsys%2Fstatestore%2FStateStoreMigrateCommand.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fsys%2Fstatestore%2FStateStoreMigrateCommand.java?ref=42a3484f0e4ac98388833e3ee8b53258e51e4205",
      "patch": "@@ -8,6 +8,7 @@\n import io.kestra.core.storages.StateStore;\n import io.kestra.core.storages.StorageInterface;\n import io.kestra.core.utils.Slugify;\n+import io.micronaut.context.ApplicationContext;\n import jakarta.inject.Inject;\n import lombok.extern.slf4j.Slf4j;\n import picocli.CommandLine;\n@@ -27,18 +28,16 @@\n @Slf4j\n public class StateStoreMigrateCommand extends AbstractCommand {\n     @Inject\n-    private StorageInterface storageInterface;\n-\n-    @Inject\n-    private FlowRepositoryInterface flowRepository;\n-\n-    @Inject\n-    private RunContextFactory runContextFactory;\n+    private ApplicationContext applicationContext;\n \n     @Override\n     public Integer call() throws Exception {\n         super.call();\n \n+        FlowRepositoryInterface flowRepository = this.applicationContext.getBean(FlowRepositoryInterface.class);\n+        StorageInterface storageInterface = this.applicationContext.getBean(StorageInterface.class);\n+        RunContextFactory runContextFactory = this.applicationContext.getBean(RunContextFactory.class);\n+\n         flowRepository.findAllForAllTenants().stream().map(flow -> Map.entry(flow, List.of(\n             URI.create(\"/\" + flow.getNamespace().replace(\".\", \"/\") + \"/\" + Slugify.of(flow.getId()) + \"/states\"),\n             URI.create(\"/\" + flow.getNamespace().replace(\".\", \"/\") + \"/states\")\n@@ -57,7 +56,7 @@ public Integer call() throws Exception {\n             String taskRunValue = statesUriPart.length > 2 ? statesUriPart[1] : null;\n             String stateSubName = statesUriPart[statesUriPart.length - 1];\n             boolean flowScoped = flowQualifierWithStateQualifiers[0].endsWith(\"/\" + flow.getId());\n-            StateStore stateStore = new StateStore(runContext(flow), false);\n+            StateStore stateStore = new StateStore(runContext(runContextFactory, flow), false);\n \n             try (InputStream is = storageInterface.get(flow.getTenantId(), stateStoreFileUri)) {\n                 stateStore.putState(flowScoped, stateName, stateSubName, taskRunValue, is.readAllBytes());\n@@ -71,7 +70,7 @@ public Integer call() throws Exception {\n         return 0;\n     }\n \n-    private RunContext runContext(Flow flow) {\n+    private RunContext runContext(RunContextFactory runContextFactory, Flow flow) {\n         return runContextFactory.of(flow, Map.of(\"flow\", Map.of(\n             \"tenantId\", flow.getTenantId(),\n             \"id\", flow.getId(),",
      "parent_sha": "88a6fbbb1452f04a07cafaef3996666f71359674"
    }
  },
  {
    "oid": "0cc8adab688fa1e61218d95b8b8723973e6c7de1",
    "message": "fix(core): make flow repository an optional bean",
    "date": "2024-08-05T12:37:10Z",
    "url": "https://github.com/kestra-io/kestra/commit/0cc8adab688fa1e61218d95b8b8723973e6c7de1",
    "details": {
      "sha": "09ef2c05bdb9bde6f8c9bcd490035e4c1809f98a",
      "filename": "core/src/main/java/io/kestra/core/services/NamespaceService.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/kestra-io/kestra/blob/0cc8adab688fa1e61218d95b8b8723973e6c7de1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FNamespaceService.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/0cc8adab688fa1e61218d95b8b8723973e6c7de1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FNamespaceService.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fservices%2FNamespaceService.java?ref=0cc8adab688fa1e61218d95b8b8723973e6c7de1",
      "patch": "@@ -6,14 +6,15 @@\n \n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n @Singleton\n public class NamespaceService {\n \n-    private final FlowRepositoryInterface flowRepository;\n+    private final Optional<FlowRepositoryInterface> flowRepository;\n \n     @Inject\n-    public NamespaceService(FlowRepositoryInterface flowRepository) {\n+    public NamespaceService(Optional<FlowRepositoryInterface> flowRepository) {\n         this.flowRepository = flowRepository;\n     }\n \n@@ -27,8 +28,10 @@ public NamespaceService(FlowRepositoryInterface flowRepository) {\n     public boolean isNamespaceExists(String tenant, String namespace) {\n         Objects.requireNonNull(namespace, \"namespace cannot be null\");\n \n-        List<String> namespaces =  flowRepository.findDistinctNamespace(tenant);\n-        return namespaces.stream().anyMatch(ns -> ns.equals(namespace));\n+        if (flowRepository.isPresent()) {\n+            List<String> namespaces = flowRepository.get().findDistinctNamespace(tenant);\n+            return namespaces.stream().anyMatch(ns -> ns.equals(namespace));\n+        }\n+        return false;\n     }\n-\n }",
      "parent_sha": "4e7298a3021cc58ceee5fe9fe980837b0b22e182"
    }
  },
  {
    "oid": "407ea6b1e7d4c9fb5c9645b2950dda7e3410ccb1",
    "message": "fix(webserver): Triggers page crash when a trigger is deleted\n\nFixes #3327",
    "date": "2024-03-27T15:49:24Z",
    "url": "https://github.com/kestra-io/kestra/commit/407ea6b1e7d4c9fb5c9645b2950dda7e3410ccb1",
    "details": {
      "sha": "31e64aa9605cc7b2638280ba33c61fb6e8f5a030",
      "filename": "webserver/src/main/java/io/kestra/webserver/controllers/TriggerController.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/kestra-io/kestra/blob/407ea6b1e7d4c9fb5c9645b2950dda7e3410ccb1/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FTriggerController.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/407ea6b1e7d4c9fb5c9645b2950dda7e3410ccb1/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FTriggerController.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FTriggerController.java?ref=407ea6b1e7d4c9fb5c9645b2950dda7e3410ccb1",
      "patch": "@@ -86,7 +86,12 @@ public PagedResults<Triggers> search(\n                     .triggerContext(tc)\n                     .build()\n                 );\n-                \n+\n+                return;\n+            }\n+\n+            if (flow.get().getTriggers() == null) {\n+                // a trigger was removed from the flow but still in the trigger table\n                 return;\n             }\n ",
      "parent_sha": "e121fcfcf64e98176258b5d010e0407aac89fc77"
    }
  },
  {
    "oid": "307be8e6f475d33110e92da400f67335a13598f4",
    "message": "fix(documentation): handle no outputs for trigger & conditions",
    "date": "2020-10-27T12:21:10Z",
    "url": "https://github.com/kestra-io/kestra/commit/307be8e6f475d33110e92da400f67335a13598f4",
    "details": {
      "sha": "d33e07fcb941edf8d379230810485c39bf31e72c",
      "filename": "core/src/main/java/org/kestra/core/docs/JsonSchemaGenerator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/kestra-io/kestra/blob/307be8e6f475d33110e92da400f67335a13598f4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fdocs%2FJsonSchemaGenerator.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/307be8e6f475d33110e92da400f67335a13598f4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fdocs%2FJsonSchemaGenerator.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fdocs%2FJsonSchemaGenerator.java?ref=307be8e6f475d33110e92da400f67335a13598f4",
      "patch": "@@ -7,6 +7,7 @@\n import com.github.victools.jsonschema.module.javax.validation.JavaxValidationModule;\n import com.github.victools.jsonschema.module.javax.validation.JavaxValidationOption;\n import com.github.victools.jsonschema.module.swagger2.Swagger2Module;\n+import com.google.common.collect.ImmutableMap;\n import io.swagger.v3.oas.annotations.media.Schema;\n import org.kestra.core.models.annotations.Plugin;\n import org.kestra.core.models.annotations.PluginProperty;\n@@ -48,9 +49,7 @@ public <T> Map<String, Object> outputs(Class<T> base, Class<? extends T> cls) {\n             .filter(Output.class::isAssignableFrom)\n             .findFirst()\n             .map(c -> this.generate(c, null))\n-            .orElseThrow(() ->\n-                new IllegalArgumentException(\"Unable to find output on class '\" + cls.getName() + \"'\")\n-            );\n+            .orElse(ImmutableMap.of());\n     }\n \n     private <T> Map<String, Object> generate(Class<? extends T> cls, @Nullable Class<T> base) {",
      "parent_sha": "f32c17025e0f4f3a727ba36946c25185c7075434"
    }
  },
  {
    "oid": "9e643dcc4edf348c37dfa9781e0b98086a5aa5d8",
    "message": "chore(tasks): improve unit test of http tasks",
    "date": "2025-01-02T17:11:50Z",
    "url": "https://github.com/kestra-io/kestra/commit/9e643dcc4edf348c37dfa9781e0b98086a5aa5d8",
    "details": {
      "sha": "478bc586a386948521faa16249ac0452e60b8b4a",
      "filename": "core/src/test/java/io/kestra/plugin/core/http/RequestTest.java",
      "status": "modified",
      "additions": 134,
      "deletions": 11,
      "changes": 145,
      "blob_url": "https://github.com/kestra-io/kestra/blob/9e643dcc4edf348c37dfa9781e0b98086a5aa5d8/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequestTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/9e643dcc4edf348c37dfa9781e0b98086a5aa5d8/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequestTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequestTest.java?ref=9e643dcc4edf348c37dfa9781e0b98086a5aa5d8",
      "patch": "@@ -3,23 +3,21 @@\n import com.devskiller.friendly_id.FriendlyId;\n import com.google.common.base.Charsets;\n import com.google.common.collect.ImmutableMap;\n+import io.kestra.core.junit.annotations.KestraTest;\n import io.kestra.core.runners.RunContext;\n import io.kestra.core.runners.RunContextFactory;\n+import io.kestra.core.serializers.JacksonMapper;\n import io.kestra.core.storages.StorageInterface;\n import io.kestra.core.utils.TestsUtils;\n import io.micronaut.context.ApplicationContext;\n import io.micronaut.http.*;\n-import io.micronaut.http.annotation.Controller;\n-import io.micronaut.http.annotation.Get;\n-import io.micronaut.http.annotation.Head;\n-import io.micronaut.http.annotation.Post;\n+import io.micronaut.http.annotation.*;\n+import io.micronaut.http.client.exceptions.HttpClientResponseException;\n import io.micronaut.http.multipart.StreamingFileUpload;\n import io.micronaut.runtime.server.EmbeddedServer;\n-import io.kestra.core.junit.annotations.KestraTest;\n import jakarta.inject.Inject;\n import org.apache.commons.io.IOUtils;\n import org.junit.jupiter.api.Test;\n-import org.junitpioneer.jupiter.RetryingTest;\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Mono;\n \n@@ -29,11 +27,13 @@\n import java.net.URI;\n import java.nio.charset.StandardCharsets;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Objects;\n \n import static io.kestra.core.utils.Rethrow.throwFunction;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.*;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n @KestraTest\n class RequestTest {\n@@ -86,7 +86,54 @@ void head() throws Exception {\n     }\n \n     @Test\n-    void failed() throws Exception {\n+    void redirect() throws Exception {\n+        try (\n+            ApplicationContext applicationContext = ApplicationContext.run();\n+            EmbeddedServer server = applicationContext.getBean(EmbeddedServer.class).start();\n+\n+        ) {\n+            Request task = Request.builder()\n+                .id(RequestTest.class.getSimpleName())\n+                .type(RequestTest.class.getName())\n+                .uri(server.getURL().toString() + \"/redirect\")\n+                .build();\n+\n+            RunContext runContext = TestsUtils.mockRunContext(this.runContextFactory, task, ImmutableMap.of());\n+\n+            Request.Output output = task.run(runContext);\n+\n+            assertThat(output.getBody(), is(\"{ \\\"hello\\\": \\\"world\\\" }\"));\n+            assertThat(output.getCode(), is(200));\n+        }\n+    }\n+\n+    @Test\n+    void noRedirect() throws Exception {\n+        try (\n+            ApplicationContext applicationContext = ApplicationContext.run();\n+            EmbeddedServer server = applicationContext.getBean(EmbeddedServer.class).start();\n+\n+        ) {\n+            Request task = Request.builder()\n+                .id(RequestTest.class.getSimpleName())\n+                .type(RequestTest.class.getName())\n+                .uri(server.getURL().toString() + \"/redirect\")\n+                .options(HttpInterface.RequestOptions.builder()\n+                    .followRedirects(false)\n+                    .build()\n+                )\n+                .build();\n+\n+            RunContext runContext = TestsUtils.mockRunContext(this.runContextFactory, task, ImmutableMap.of());\n+\n+            Request.Output output = task.run(runContext);\n+\n+            assertThat(output.getCode(), is(301));\n+        }\n+    }\n+\n+    @Test\n+    void allowFailed() throws Exception {\n         try (\n             ApplicationContext applicationContext = ApplicationContext.run();\n             EmbeddedServer server = applicationContext.getBean(EmbeddedServer.class).start();\n@@ -108,7 +155,31 @@ void failed() throws Exception {\n         }\n     }\n \n-    @RetryingTest(5)\n+    @Test\n+    void failed() throws Exception {\n+        try (\n+            ApplicationContext applicationContext = ApplicationContext.run();\n+            EmbeddedServer server = applicationContext.getBean(EmbeddedServer.class).start();\n+\n+        ) {\n+            Request task = Request.builder()\n+                .id(RequestTest.class.getSimpleName())\n+                .type(RequestTest.class.getName())\n+                .uri(server.getURL().toString() + \"/hello417\")\n+                .build();\n+\n+            RunContext runContext = TestsUtils.mockRunContext(this.runContextFactory, task, ImmutableMap.of());\n+\n+            HttpClientResponseException exception = assertThrows(\n+                HttpClientResponseException.class,\n+                () -> task.run(runContext)\n+            );\n+\n+            assertThat(exception.getResponse().getStatus().getCode(), is(417));\n+        }\n+    }\n+\n+    @Test\n     void selfSigned() throws Exception {\n         final String url = \"https://self-signed.badssl.com/\";\n \n@@ -132,6 +203,30 @@ void selfSigned() throws Exception {\n         assertThat(output.getCode(), is(200));\n     }\n \n+    @Test\n+    void json() throws Exception {\n+        try (\n+            ApplicationContext applicationContext = ApplicationContext.run();\n+            EmbeddedServer server = applicationContext.getBean(EmbeddedServer.class).start();\n+\n+        ) {\n+            Request task = Request.builder()\n+                .id(RequestTest.class.getSimpleName())\n+                .type(RequestTest.class.getName())\n+                .method(HttpMethod.POST)\n+                .uri(server.getURL().toString() + \"/post/json\")\n+                .body(JacksonMapper.ofJson().writeValueAsString(ImmutableMap.of(\"hello\", \"world\")))\n+                .build();\n+\n+            RunContext runContext = TestsUtils.mockRunContext(this.runContextFactory, task, Map.of());\n+\n+            Request.Output output = task.run(runContext);\n+\n+            assertThat(output.getBody(), is(\"{\\\"hello\\\":\\\"world\\\"}\"));\n+            assertThat(output.getCode(), is(200));\n+        }\n+    }\n+\n     @Test\n     void form() throws Exception {\n         try (\n@@ -144,7 +239,7 @@ void form() throws Exception {\n                 .type(RequestTest.class.getName())\n                 .method(HttpMethod.POST)\n                 .contentType(MediaType.APPLICATION_FORM_URLENCODED)\n-                .uri(server.getURL().toString() + \"/post/simple\")\n+                .uri(server.getURL().toString() + \"/post/url-encoded\")\n                 .headers(ImmutableMap.of(\n                     \"test\", \"{{ inputs.test }}\"\n                 ))\n@@ -256,6 +351,24 @@ void encrypted() throws Exception {\n         }\n     }\n \n+    @Test\n+    void bytes() {\n+        Request task = Request.builder()\n+            .id(RequestTest.class.getSimpleName())\n+            .type(RequestTest.class.getName())\n+            .uri(\"https://github.com/kestra-io.png\")\n+            .build();\n+\n+        RunContext runContext = TestsUtils.mockRunContext(this.runContextFactory, task, ImmutableMap.of());\n+\n+        IllegalArgumentException exception = assertThrows(\n+            IllegalArgumentException.class,\n+            () -> task.run(runContext)\n+        );\n+\n+        assertThat(exception.getMessage(), containsString(\"Illegal unicode code\"));\n+    }\n+\n     @Controller\n     static class MockController {\n         @Get(\"/hello\")\n@@ -273,8 +386,18 @@ HttpResponse<String> hello417() {\n             return HttpResponse.status(HttpStatus.EXPECTATION_FAILED).body(\"{ \\\"hello\\\": \\\"world\\\" }\");\n         }\n \n-        @Post(uri = \"/post/simple\", consumes = MediaType.APPLICATION_FORM_URLENCODED)\n-        HttpResponse<String> simple(HttpRequest<?> request, String hello) {\n+        @Get(\"/redirect\")\n+        HttpResponse<String> redirect() {\n+            return HttpResponse.redirect(URI.create(\"/hello\"));\n+        }\n+\n+        @Post(uri = \"/post/json\")\n+        HttpResponse<Map<String, String>> postBody(@Body Map<String, String> body) {\n+            return HttpResponse.ok(body);\n+        }\n+\n+        @Post(uri = \"/post/url-encoded\", consumes = MediaType.APPLICATION_FORM_URLENCODED)\n+        HttpResponse<String> postUrlEncoded(HttpRequest<?> request, String hello) {\n             return HttpResponse.ok(hello + \" > \" + request.getHeaders().get(\"test\"));\n         }\n ",
      "parent_sha": "b03576c7d8faa0f6b15762fcaa58843fdf814ed8"
    }
  },
  {
    "oid": "56a29de5deec3cbc9e4554e6ece85a63b1bc4fb4",
    "message": "fix(core): FlowListenersService can failed on unit test",
    "date": "2020-06-25T14:05:50Z",
    "url": "https://github.com/kestra-io/kestra/commit/56a29de5deec3cbc9e4554e6ece85a63b1bc4fb4",
    "details": {
      "sha": "9a8dc52ac344cc3899b9ba77a82b167b1d6a16a4",
      "filename": "core/src/main/java/org/kestra/core/services/FlowListenersService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/56a29de5deec3cbc9e4554e6ece85a63b1bc4fb4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fservices%2FFlowListenersService.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/56a29de5deec3cbc9e4554e6ece85a63b1bc4fb4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fservices%2FFlowListenersService.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fservices%2FFlowListenersService.java?ref=56a29de5deec3cbc9e4554e6ece85a63b1bc4fb4",
      "patch": "@@ -44,11 +44,11 @@ public FlowListenersService(\n         this.notifyConsumers();\n     }\n \n-    private boolean remove(Flow flow) {\n+    private synchronized boolean remove(Flow flow) {\n         return flows.removeIf(r -> r.equalsWithoutRevision(flow));\n     }\n \n-    private void upsert(Flow flow) {\n+    private synchronized void upsert(Flow flow) {\n         this.remove(flow);\n \n         this.flows.add(flow);",
      "parent_sha": "832e63e4770104b3c6ddbbf68d4d22298a55c31e"
    }
  },
  {
    "oid": "dcb75357b95e90a0e03d741c0906eeac46c2e6c1",
    "message": "fix(core): type-safe TaskRunner.toAbsolutePath",
    "date": "2024-04-26T18:14:42Z",
    "url": "https://github.com/kestra-io/kestra/commit/dcb75357b95e90a0e03d741c0906eeac46c2e6c1",
    "details": {
      "sha": "7dd334ebad73c7caadf856c3673794ffa749fefd",
      "filename": "core/src/main/java/io/kestra/core/models/tasks/runners/TaskRunner.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/dcb75357b95e90a0e03d741c0906eeac46c2e6c1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftasks%2Frunners%2FTaskRunner.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/dcb75357b95e90a0e03d741c0906eeac46c2e6c1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftasks%2Frunners%2FTaskRunner.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmodels%2Ftasks%2Frunners%2FTaskRunner.java?ref=dcb75357b95e90a0e03d741c0906eeac46c2e6c1",
      "patch": "@@ -92,7 +92,7 @@ protected Map<String, String> runnerEnv(RunContext runContext, TaskCommands task\n     }\n \n     public String toAbsolutePath(RunContext runContext, TaskCommands taskCommands, String relativePath) throws IllegalVariableEvaluationException {\n-        Path workingDir = (Path) this.additionalVars(runContext, taskCommands).get(ScriptService.VAR_WORKING_DIR);\n+        Object workingDir = this.additionalVars(runContext, taskCommands).get(ScriptService.VAR_WORKING_DIR);\n         if (workingDir == null) {\n             return relativePath;\n         }",
      "parent_sha": "6ac51502a05a74d12944763547c80e8108654093"
    }
  },
  {
    "oid": "fa07cbd3b9fce507a4feff0b14f4aa00f986d94a",
    "message": "feat(core): improve performance of ExecutorService.handleChildWorkerTaskResult\n\nSearching for a retry in all parents is a costly operation, doing it only wgen we are retrying or failing avoid it most of the time.",
    "date": "2025-02-28T16:40:29Z",
    "url": "https://github.com/kestra-io/kestra/commit/fa07cbd3b9fce507a4feff0b14f4aa00f986d94a",
    "details": {
      "sha": "b7797b3d41c9fe765ca2ef824155aa14ad531486",
      "filename": "core/src/main/java/io/kestra/core/runners/ExecutorService.java",
      "status": "modified",
      "additions": 41,
      "deletions": 31,
      "changes": 72,
      "blob_url": "https://github.com/kestra-io/kestra/blob/fa07cbd3b9fce507a4feff0b14f4aa00f986d94a/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FExecutorService.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/fa07cbd3b9fce507a4feff0b14f4aa00f986d94a/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FExecutorService.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FExecutorService.java?ref=fa07cbd3b9fce507a4feff0b14f4aa00f986d94a",
      "patch": "@@ -493,53 +493,43 @@ private Executor handleChildWorkerTaskResult(Executor executor) throws Exception\n             }\n \n             Task task = executor.getFlow().findTaskByTaskIdOrNull(taskRun.getTaskId());\n-            String taskId = taskRun.getTaskId();\n-            Task parentTask = null;\n-            if (taskRun.getParentTaskRunId() != null) {\n-                do {\n-                    parentTask = executor.getFlow().findParentTasksByTaskId(taskId);\n-                    if (parentTask != null) {\n-                        taskId = parentTask.getId();\n-                    }\n-                } while (parentTask != null && parentTask.getRetry() == null);\n-            }\n-\n             /*\n              * Check if the task is failed and if it has a retry policy\n              */\n             if (!executor.getExecution().getState().isRetrying() &&\n                 taskRun.getState().isFailed() &&\n-                (task instanceof RunnableTask<?> || task instanceof Subflow) &&\n-                (task.getRetry() != null || executor.getFlow().getRetry() != null || (parentTask != null && parentTask.getRetry() != null))\n+                (task instanceof RunnableTask<?> || task instanceof Subflow)\n             ) {\n-                Instant nextRetryDate;\n-                AbstractRetry retry;\n-                AbstractRetry.Behavior behavior;\n+                Instant nextRetryDate = null;\n+                AbstractRetry.Behavior behavior = null;\n \n                 // Case task has a retry\n                 if (task.getRetry() != null) {\n-                    retry = task.getRetry();\n-                    behavior = retry.getBehavior();\n-                    nextRetryDate = behavior.equals(AbstractRetry.Behavior.CREATE_NEW_EXECUTION) ?\n-                        taskRun.nextRetryDate(retry, executor.getExecution()) :\n-                        taskRun.nextRetryDate(retry);\n-                }\n-                // Case parent task has a retry\n-                else if (parentTask != null && parentTask.getRetry() != null) {\n-                    retry = parentTask.getRetry();\n+                    AbstractRetry retry = task.getRetry();\n                     behavior = retry.getBehavior();\n                     nextRetryDate = behavior.equals(AbstractRetry.Behavior.CREATE_NEW_EXECUTION) ?\n                         taskRun.nextRetryDate(retry, executor.getExecution()) :\n                         taskRun.nextRetryDate(retry);\n                 }\n-                // Case flow has a retry\n                 else {\n-                    retry = executor.getFlow().getRetry();\n-                    behavior = retry.getBehavior();\n-                    nextRetryDate = behavior.equals(AbstractRetry.Behavior.CREATE_NEW_EXECUTION) ?\n-                        executionService.nextRetryDate(retry, executor.getExecution()) :\n-                        taskRun.nextRetryDate(retry);\n+                    // Case parent task has a retry\n+                    AbstractRetry retry = searchForParentRetry(taskRun, executor);\n+                    if (retry != null) {\n+                        behavior = retry.getBehavior();\n+                        nextRetryDate = behavior.equals(AbstractRetry.Behavior.CREATE_NEW_EXECUTION) ?\n+                            taskRun.nextRetryDate(retry, executor.getExecution()) :\n+                            taskRun.nextRetryDate(retry);\n+                    }\n+                    // Case flow has a retry\n+                    else if (executor.getFlow().getRetry() != null) {\n+                        retry = executor.getFlow().getRetry();\n+                        behavior = retry.getBehavior();\n+                        nextRetryDate = behavior.equals(AbstractRetry.Behavior.CREATE_NEW_EXECUTION) ?\n+                            executionService.nextRetryDate(retry, executor.getExecution()) :\n+                            taskRun.nextRetryDate(retry);\n+                    }\n                 }\n+\n                 if (nextRetryDate != null) {\n                     ExecutionDelay.ExecutionDelayBuilder executionDelayBuilder = ExecutionDelay.builder()\n                         .taskRunId(taskRun.getId())\n@@ -607,6 +597,26 @@ else if (task instanceof LoopUntil waitFor && taskRun.getState().isRunning()) {\n         return executor;\n     }\n \n+    private AbstractRetry searchForParentRetry(TaskRun taskRun, Executor executor) {\n+        // search in all parents, recursively\n+        if (taskRun.getParentTaskRunId() != null) {\n+            String taskId = taskRun.getTaskId();\n+            Task parentTask;\n+            do {\n+                parentTask = executor.getFlow().findParentTasksByTaskId(taskId);\n+                if (parentTask != null) {\n+                    taskId = parentTask.getId();\n+                }\n+            } while (parentTask != null && parentTask.getRetry() == null);\n+\n+            if (parentTask != null) {\n+                return parentTask.getRetry();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n     private Executor handlePausedDelay(Executor executor, List<WorkerTaskResult> workerTaskResults) throws InternalException {\n         if (workerTaskResults\n             .stream()",
      "parent_sha": "2c77a43935a7f86d73901f2ec8c730d0e866c9cb"
    }
  },
  {
    "oid": "6af505a4180bc9ed1da0e1b95b4e4d63280af455",
    "message": "feat(jdbc): emit async in a dedicated thread pool",
    "date": "2024-09-24T15:13:51Z",
    "url": "https://github.com/kestra-io/kestra/commit/6af505a4180bc9ed1da0e1b95b4e4d63280af455",
    "details": {
      "sha": "731b9ea077cca7cae2746ca02859488e028d20e9",
      "filename": "jdbc/src/main/java/io/kestra/jdbc/runner/JdbcQueue.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/kestra-io/kestra/blob/6af505a4180bc9ed1da0e1b95b4e4d63280af455/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcQueue.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/6af505a4180bc9ed1da0e1b95b4e4d63280af455/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcQueue.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcQueue.java?ref=6af505a4180bc9ed1da0e1b95b4e4d63280af455",
      "patch": "@@ -44,11 +44,15 @@\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+import static io.kestra.core.utils.Rethrow.throwRunnable;\n+\n @Slf4j\n public abstract class JdbcQueue<T> implements QueueInterface<T> {\n+    private static final int MAX_ASYNC_THREADS = Runtime.getRuntime().availableProcessors() * 2;\n     protected static final ObjectMapper MAPPER = JdbcMapper.of();\n \n     private final ExecutorService poolExecutor;\n+    private final ExecutorService asyncPoolExecutor;\n \n     protected final QueueService queueService;\n \n@@ -69,6 +73,7 @@ public abstract class JdbcQueue<T> implements QueueInterface<T> {\n     public JdbcQueue(Class<T> cls, ApplicationContext applicationContext) {\n         ExecutorsUtils executorsUtils = applicationContext.getBean(ExecutorsUtils.class);\n         this.poolExecutor = executorsUtils.cachedThreadPool(\"jdbc-queue-\" + cls.getSimpleName());\n+        this.asyncPoolExecutor = executorsUtils.maxCachedThreadPool(MAX_ASYNC_THREADS, \"jdbc-queue-async-\" + cls.getSimpleName());\n \n         this.queueService = applicationContext.getBean(QueueService.class);\n         this.cls = cls;\n@@ -143,7 +148,7 @@ public void emit(String consumerGroup, T message) throws QueueException {\n \n     @Override\n     public void emitAsync(String consumerGroup, T message) throws QueueException {\n-        this.emit(consumerGroup, message);\n+        this.asyncPoolExecutor.submit(throwRunnable(() -> this.emit(consumerGroup, message)));\n     }\n \n     @Override\n@@ -334,7 +339,8 @@ public void close() throws IOException {\n         if (!this.isClosed.compareAndSet(false, true)) {\n             return;\n         }\n-        poolExecutor.shutdown();\n+        this.poolExecutor.shutdown();\n+        this.asyncPoolExecutor.shutdown();\n     }\n \n     @ConfigurationProperties(\"kestra.jdbc.queues\")",
      "parent_sha": "2f2c002846bbae1a30aed566885d2a8cdb6b4426"
    }
  },
  {
    "oid": "6663858cc7a07369766e53e88c7b2e27beacc2b6",
    "message": "fix(core): FlowListenersService throw ConcurrentModificationException",
    "date": "2020-06-29T09:31:18Z",
    "url": "https://github.com/kestra-io/kestra/commit/6663858cc7a07369766e53e88c7b2e27beacc2b6",
    "details": {
      "sha": "e5f72f9b579a9aec0ac0bddf226126b342317800",
      "filename": "core/src/main/java/org/kestra/core/services/FlowListenersService.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/kestra-io/kestra/blob/6663858cc7a07369766e53e88c7b2e27beacc2b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fservices%2FFlowListenersService.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/6663858cc7a07369766e53e88c7b2e27beacc2b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fservices%2FFlowListenersService.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcore%2Fservices%2FFlowListenersService.java?ref=6663858cc7a07369766e53e88c7b2e27beacc2b6",
      "patch": "@@ -44,14 +44,18 @@ public FlowListenersService(\n         this.notifyConsumers();\n     }\n \n-    private synchronized boolean remove(Flow flow) {\n-        return flows.removeIf(r -> r.equalsWithoutRevision(flow));\n+    private boolean remove(Flow flow) {\n+        synchronized (this) {\n+            return flows.removeIf(r -> r.equalsWithoutRevision(flow));\n+        }\n     }\n \n     private synchronized void upsert(Flow flow) {\n-        this.remove(flow);\n+        synchronized (this) {\n+            this.remove(flow);\n \n-        this.flows.add(flow);\n+            this.flows.add(flow);\n+        }\n     }\n \n     private void notifyConsumers() {",
      "parent_sha": "d99dff1c8c12cd9fe920f5bef54329b8d2fb22b6"
    }
  },
  {
    "oid": "34f631512db387171e8dc3acac8d3dff940df2c5",
    "message": "test(webserver): falling unit test",
    "date": "2023-07-05T16:45:25Z",
    "url": "https://github.com/kestra-io/kestra/commit/34f631512db387171e8dc3acac8d3dff940df2c5",
    "details": {
      "sha": "19b28103219867ac5a6f0598caf29d2df4486641",
      "filename": "webserver/src/test/java/io/kestra/webserver/controllers/ExecutionControllerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/34f631512db387171e8dc3acac8d3dff940df2c5/webserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FExecutionControllerTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/34f631512db387171e8dc3acac8d3dff940df2c5/webserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FExecutionControllerTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FExecutionControllerTest.java?ref=34f631512db387171e8dc3acac8d3dff940df2c5",
      "patch": "@@ -432,7 +432,7 @@ void downloadFile() throws TimeoutException {\n             FileMetas.class\n         ).blockingFirst();\n \n-        assertThat(metas.getSize(), equalTo(713L));\n+        assertThat(metas.getSize(), equalTo(648L));\n \n         String newExecutionId = IdUtils.create();\n ",
      "parent_sha": "ef8669f91112c38bb03f8e0fb8723c7f51f62a81"
    }
  },
  {
    "oid": "d6766ce6f1310d0832099f479daf4edd1d862ce1",
    "message": "fix(cli): avoid calling the taskdefault service when reindexing flow (#1925)\n\nIt generates an exception on EE as it has dependencies not available in the CLI.",
    "date": "2023-08-21T15:29:40Z",
    "url": "https://github.com/kestra-io/kestra/commit/d6766ce6f1310d0832099f479daf4edd1d862ce1",
    "details": {
      "sha": "708012572d583d4dbfbc77942aee505b12c97c5b",
      "filename": "cli/src/main/java/io/kestra/cli/commands/sys/ReindexCommand.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/kestra-io/kestra/blob/d6766ce6f1310d0832099f479daf4edd1d862ce1/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fsys%2FReindexCommand.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/d6766ce6f1310d0832099f479daf4edd1d862ce1/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fsys%2FReindexCommand.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fsys%2FReindexCommand.java?ref=d6766ce6f1310d0832099f479daf4edd1d862ce1",
      "patch": "@@ -36,10 +36,9 @@ public Integer call() throws Exception {\n \n         if (\"flow\".equals(type)) {\n             FlowRepositoryInterface flowRepository = applicationContext.getBean(FlowRepositoryInterface.class);\n-            TaskDefaultService taskDefaultService = applicationContext.getBean(TaskDefaultService.class);\n \n             List<FlowWithSource> flows = flowRepository.findWithSource(null, null, null);\n-            flows.forEach(flow -> flowRepository.update(flow.toFlow(), flow.toFlow(), flow.getSource(), taskDefaultService.injectDefaults(flow.toFlow())));\n+            flows.forEach(flow -> flowRepository.update(flow.toFlow(), flow.toFlow(), flow.getSource(), flow.toFlow()));\n \n             stdOut(\"Successfully reindex \" + flows.size() + \" flow(s).\");\n         }",
      "parent_sha": "88b11ddfb339aa36544ab04d525f818dbef64a58"
    }
  },
  {
    "oid": "2d7555d74f4a33e9744bb9734a9986540ed09248",
    "message": "test(core): fix a flaky test",
    "date": "2023-06-28T10:22:10Z",
    "url": "https://github.com/kestra-io/kestra/commit/2d7555d74f4a33e9744bb9734a9986540ed09248",
    "details": {
      "sha": "1a342d61614d9507f036de9d4feffbed3b3091ce",
      "filename": "core/src/test/java/io/kestra/core/tasks/flows/WorkingDirectoryTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/2d7555d74f4a33e9744bb9734a9986540ed09248/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FWorkingDirectoryTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/2d7555d74f4a33e9744bb9734a9986540ed09248/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FWorkingDirectoryTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FWorkingDirectoryTest.java?ref=2d7555d74f4a33e9744bb9734a9986540ed09248",
      "patch": "@@ -62,7 +62,7 @@ public void each(RunnerUtils runnerUtils) throws TimeoutException {\n \n             assertThat(execution.getTaskRunList(), hasSize(8));\n             assertThat(execution.getState().getCurrent(), is(State.Type.SUCCESS));\n-            assertThat(execution.getTaskRunList().get(7).getOutputs().get(\"value\"), is(execution.getTaskRunList().get(5).getId()));\n+            assertThat(execution.findTaskRunsByTaskId(\"2_end\").get(0).getOutputs().get(\"value\"), is(execution.findTaskRunsByTaskId(\"first\").get(0).getId()));\n         }\n     }\n }",
      "parent_sha": "f0517e6f809fa132204b43bbf9fb924340e765df"
    }
  },
  {
    "oid": "914a10855bf277d055bcb3907cb9ed7ca9d24476",
    "message": "fix(webserver): return a Publisher and carefully handle all exceptional path\n\nThis is important so that the body is always consume.",
    "date": "2024-05-22T11:12:59Z",
    "url": "https://github.com/kestra-io/kestra/commit/914a10855bf277d055bcb3907cb9ed7ca9d24476",
    "details": {
      "sha": "ce04cd254cf3f190e2a68b440b7b1670767c4063",
      "filename": "webserver/src/main/java/io/kestra/webserver/controllers/api/ExecutionController.java",
      "status": "modified",
      "additions": 71,
      "deletions": 60,
      "changes": 131,
      "blob_url": "https://github.com/kestra-io/kestra/blob/914a10855bf277d055bcb3907cb9ed7ca9d24476/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FExecutionController.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/914a10855bf277d055bcb3907cb9ed7ca9d24476/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FExecutionController.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2Fapi%2FExecutionController.java?ref=914a10855bf277d055bcb3907cb9ed7ca9d24476",
      "patch": "@@ -44,6 +44,7 @@\n import io.micronaut.context.annotation.Value;\n import io.micronaut.context.event.ApplicationEventPublisher;\n import io.micronaut.core.annotation.Nullable;\n+import io.micronaut.core.async.annotation.SingleResult;\n import io.micronaut.core.convert.format.Format;\n import io.micronaut.data.model.Pageable;\n import io.micronaut.http.HttpRequest;\n@@ -87,6 +88,7 @@\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.FluxSink;\n import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -516,8 +518,9 @@ protected HttpResponse<Execution> webhook(\n     @Post(uri = \"/trigger/{namespace}/{id}\", consumes = MediaType.MULTIPART_FORM_DATA)\n     @Operation(tags = {\"Executions\"}, summary = \"Trigger a new execution for a flow\")\n     @ApiResponse(responseCode = \"409\", description = \"if the flow is disabled\")\n+    @SingleResult\n     @Deprecated\n-    public Execution trigger(\n+    public Publisher<Execution> trigger(\n         @Parameter(description = \"The flow namespace\") @PathVariable String namespace,\n         @Parameter(description = \"The flow id\") @Nullable @PathVariable String id,\n         @Parameter(description = \"The inputs\") @Nullable  @Body MultipartBody inputs,\n@@ -532,65 +535,65 @@ public Execution trigger(\n     @Post(uri = \"/{namespace}/{id}\", consumes = MediaType.MULTIPART_FORM_DATA)\n     @Operation(tags = {\"Executions\"}, summary = \"Create a new execution for a flow\")\n     @ApiResponse(responseCode = \"409\", description = \"if the flow is disabled\")\n-    public Execution create(\n+    @SingleResult\n+    public Publisher<Execution> create(\n         @Parameter(description = \"The flow namespace\") @PathVariable String namespace,\n         @Parameter(description = \"The flow id\") @PathVariable String id,\n         @Parameter(description = \"The inputs\") @Nullable @Body MultipartBody inputs,\n         @Parameter(description = \"The labels as a list of 'key:value'\") @Nullable @QueryValue List<String> labels,\n         @Parameter(description = \"If the server will wait the end of the execution\") @QueryValue(defaultValue = \"false\") Boolean wait,\n         @Parameter(description = \"The flow revision or latest if null\") @QueryValue Optional<Integer> revision\n     ) throws IOException {\n-        Optional<Flow> find = flowRepository.findById(tenantService.resolveTenant(), namespace, id, revision);\n-        if (find.isEmpty()) {\n-            return null;\n-        }\n-\n-        Flow found = find.get();\n-        if (found.isDisabled()) {\n-            throw new IllegalStateException(\"Cannot execute disabled flow\");\n-        }\n-\n-        if (found instanceof FlowWithException fwe) {\n-            throw new IllegalStateException(\"Cannot execute an invalid flow: \" + fwe.getException());\n-        }\n-\n-        Execution current = Execution.newExecution(\n-            found,\n-            throwBiFunction((flow, execution) -> flowInputOutput.typedInputs(flow, execution, inputs)),\n-            parseLabels(labels)\n-        );\n-\n-        executionQueue.emit(current);\n-        eventPublisher.publishEvent(new CrudEvent<>(current, CrudEventType.CREATE));\n+        return Mono.<Execution>create(\n+            sink -> {\n+                Optional<Flow> find = flowRepository.findById(tenantService.resolveTenant(), namespace, id, revision);\n+                if (find.isEmpty()) {\n+                    sink.success();\n+                    return;\n+                }\n \n-        if (!wait) {\n-            return current;\n-        }\n+                Flow found = find.get();\n+                if (found.isDisabled()) {\n+                    sink.error(new IllegalStateException(\"Cannot execute disabled flow\"));\n+                    return;\n+                }\n \n-        AtomicReference<Runnable> cancel = new AtomicReference<>();\n+                if (found instanceof FlowWithException fwe) {\n+                    sink.error(new IllegalStateException(\"Cannot execute an invalid flow: \" + fwe.getException()));\n+                    return;\n+                }\n \n-        return Mono\n-            .<Execution>create(emitter -> {\n-                Runnable receive = this.executionQueue.receive(either -> {\n-                    if (either.isRight()) {\n-                        log.error(\"Unable to deserialize the execution: {}\", either.getRight().getMessage());\n-                        return;\n-                    }\n+                try {\n+                    Execution current = Execution.newExecution(\n+                        found,\n+                        throwBiFunction((flow, execution) -> flowInputOutput.typedInputs(flow, execution, inputs)),\n+                        parseLabels(labels)\n+                    );\n \n-                    Execution item = either.getLeft();\n-                    if (item.getId().equals(current.getId()) && this.isStopFollow(found, item)) {\n-                        emitter.success(item);\n+                    executionQueue.emit(current);\n+                    eventPublisher.publishEvent(new CrudEvent<>(current, CrudEventType.CREATE));\n+\n+                    if (!wait) {\n+                        sink.success(current);\n+                    } else {\n+                        Runnable receive = this.executionQueue.receive(either -> {\n+                            if (either.isRight()) {\n+                                log.error(\"Unable to deserialize the execution: {}\", either.getRight().getMessage());\n+                                sink.success();\n+                            }\n+\n+                            Execution item = either.getLeft();\n+                            if (item.getId().equals(current.getId()) && this.isStopFollow(found, item)) {\n+                                sink.success(item);\n+                            }\n+                        });\n+                        sink.onDispose(() -> receive.run());\n                     }\n-                });\n-\n-                cancel.set(receive);\n-            })\n-            .doFinally((signalType) -> {\n-                if (cancel.get() != null) {\n-                    cancel.get().run();\n+                } catch (IOException e) {\n+                    sink.error(new RuntimeException(e));\n                 }\n             })\n-            .block();\n+            .doOnError(t -> Flux.from(inputs).subscribeOn(Schedulers.boundedElastic()).blockLast()); // need to consume the inputs in case of error;\n     }\n \n     private List<Label> parseLabels(List<String> labels) {\n@@ -949,31 +952,39 @@ public MutableHttpResponse<?> killByIds(\n         return HttpResponse.ok(BulkResponse.builder().count(executions.size()).build());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @ExecuteOn(TaskExecutors.IO)\n     @Post(uri = \"/{executionId}/resume\", consumes = MediaType.MULTIPART_FORM_DATA)\n     @Operation(tags = {\"Executions\"}, summary = \"Resume a paused execution.\")\n     @ApiResponse(responseCode = \"204\", description = \"On success\")\n     @ApiResponse(responseCode = \"409\", description = \"if the executions is not paused\")\n-    public HttpResponse<?> resume(\n+    @SingleResult\n+    public Publisher<HttpResponse<?>> resume(\n         @Parameter(description = \"The execution id\") @PathVariable String executionId,\n         @Parameter(description = \"The inputs\") @Nullable @Body MultipartBody inputs\n     ) throws Exception {\n-        Optional<Execution> maybeExecution = executionRepository.findById(tenantService.resolveTenant(), executionId);\n-        if (maybeExecution.isEmpty()) {\n-            return HttpResponse.notFound();\n-        }\n+        return Mono.<HttpResponse<?>>create(sink -> {\n+            Optional<Execution> maybeExecution = executionRepository.findById(tenantService.resolveTenant(), executionId);\n+            if (maybeExecution.isEmpty()) {\n+                sink.success(HttpResponse.notFound());\n+                return;\n+            }\n \n-        var execution = maybeExecution.get();\n-        if (!execution.getState().isPaused()) {\n-            throw new IllegalStateException(\"Execution is not paused, can't resume it\");\n-        }\n+            var execution = maybeExecution.get();\n+            if (!execution.getState().isPaused()) {\n+                sink.error(new IllegalStateException(\"Execution is not paused, can't resume it\"));\n+                return;\n+            }\n \n-        var flow = flowRepository.findByExecutionWithoutAcl(execution);\n+            var flow = flowRepository.findByExecutionWithoutAcl(execution);\n \n-        Execution resumeExecution = this.executionService.resume(execution, flow, State.Type.RUNNING, inputs);\n-        this.executionQueue.emit(resumeExecution);\n-        return HttpResponse.noContent();\n+            try {\n+                Execution resumeExecution = this.executionService.resume(execution, flow, State.Type.RUNNING, inputs);\n+                this.executionQueue.emit(resumeExecution);\n+                sink.success(HttpResponse.noContent());\n+            } catch (Exception e) {\n+                sink.error(new RuntimeException(e));\n+            }\n+        }).doOnError(t -> Flux.from(inputs).subscribeOn(Schedulers.boundedElastic()).blockLast()); // need to consume the inputs in case of error\n     }\n \n     @ExecuteOn(TaskExecutors.IO)",
      "parent_sha": "d93761efc0311ac8cbadbaa5d67f93678221977a"
    }
  },
  {
    "oid": "9b75b58ce3f42cad40637af5bfb8109fae2ee5d1",
    "message": "fix(core): don't warm to early on missing execution to avoid confusion",
    "date": "2021-06-08T13:55:03Z",
    "url": "https://github.com/kestra-io/kestra/commit/9b75b58ce3f42cad40637af5bfb8109fae2ee5d1",
    "details": {
      "sha": "9beb1f6baece93d1d11a3f0a86acc601b5aa40e5",
      "filename": "core/src/main/java/io/kestra/core/schedulers/AbstractScheduler.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/kestra-io/kestra/blob/9b75b58ce3f42cad40637af5bfb8109fae2ee5d1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FAbstractScheduler.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/9b75b58ce3f42cad40637af5bfb8109fae2ee5d1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FAbstractScheduler.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FAbstractScheduler.java?ref=9b75b58ce3f42cad40637af5bfb8109fae2ee5d1",
      "patch": "@@ -305,11 +305,14 @@ private boolean isExecutionNotRunning(FlowWithPollingTrigger f, ZonedDateTime no\n                     .record(Duration.between(lastTrigger.getUpdatedDate(), Instant.now()));\n             }\n \n-            log.warn(\"Execution '{}' for flow '{}.{}' is not found, schedule is blocked\",\n-                lastTrigger.getExecutionId(),\n-                lastTrigger.getNamespace(),\n-                lastTrigger.getFlowId()\n-            );\n+            if (lastTrigger.getUpdatedDate() == null || lastTrigger.getUpdatedDate().plusSeconds(60).isBefore(Instant.now())) {\n+                log.warn(\"Execution '{}' for flow '{}.{}' is not found, schedule is blocked since {}\",\n+                    lastTrigger.getExecutionId(),\n+                    lastTrigger.getNamespace(),\n+                    lastTrigger.getFlowId(),\n+                    lastTrigger.getUpdatedDate()\n+                );\n+            }\n \n             return false;\n         }",
      "parent_sha": "5f773455fa6c8668c23094d212287cf192e64222"
    }
  },
  {
    "oid": "aa2e15cfccb2dc8f804c6a9ea41b6c2d3b877c08",
    "message": "fix(core): LocalFiles log message (#1720)",
    "date": "2023-07-06T12:25:32Z",
    "url": "https://github.com/kestra-io/kestra/commit/aa2e15cfccb2dc8f804c6a9ea41b6c2d3b877c08",
    "details": {
      "sha": "6d34f0c9d9452f3f58b18a8e773ff0104cd0a4c4",
      "filename": "core/src/main/java/io/kestra/core/tasks/storages/LocalFiles.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/aa2e15cfccb2dc8f804c6a9ea41b6c2d3b877c08/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fstorages%2FLocalFiles.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/aa2e15cfccb2dc8f804c6a9ea41b6c2d3b877c08/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fstorages%2FLocalFiles.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fstorages%2FLocalFiles.java?ref=aa2e15cfccb2dc8f804c6a9ea41b6c2d3b877c08",
      "patch": "@@ -138,7 +138,7 @@ public LocalFilesOutput run(RunContext runContext) throws Exception {\n             .flatMap(throwFunction(output -> this.outputMatcher(runContext, output)))\n             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n \n-        logger.info(\"Provide {} input(s) and capture {} output(s).\", inputFiles.size(), outputFiles.size());\n+        logger.info(\"Provided {} input(s) and captured {} output(s).\", inputFiles.size(), outputFiles.size());\n \n         return LocalFilesOutput.builder()\n             .uris(outputFiles)",
      "parent_sha": "3e1761c3fd6da821f0d5fdc1ffba0e13b5cb9ebc"
    }
  },
  {
    "oid": "41d290ad68a0738710f38648a4e20c99990c2177",
    "message": "fix(tests): scope PurgeExecutions to a flowId and namespace to avoid flakiness",
    "date": "2024-08-20T11:43:05Z",
    "url": "https://github.com/kestra-io/kestra/commit/41d290ad68a0738710f38648a4e20c99990c2177",
    "details": {
      "sha": "e5e559c86c815e7045523a4b1a07e30037d47cd5",
      "filename": "core/src/test/java/io/kestra/plugin/core/execution/PurgeExecutionsTest.java",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/kestra-io/kestra/blob/41d290ad68a0738710f38648a4e20c99990c2177/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fexecution%2FPurgeExecutionsTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/41d290ad68a0738710f38648a4e20c99990c2177/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fexecution%2FPurgeExecutionsTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fexecution%2FPurgeExecutionsTest.java?ref=41d290ad68a0738710f38648a4e20c99990c2177",
      "patch": "@@ -25,49 +25,51 @@ class PurgeExecutionsTest {\n     @Inject\n     private ExecutionRepositoryInterface executionRepository;\n \n-    @BeforeEach\n-    void cleanExecutions() {\n-        executionRepository.find(null, null, null, null, null, null, null, null, null, null)\n-            .toStream()\n-            .forEach(executionRepository::delete);\n-    }\n-\n     @Test\n     void run() throws Exception {\n         // create an execution to delete\n+        String namespace = \"run.namespace\";\n+        String flowId = \"run-flow-id\";\n         var execution = Execution.builder()\n-            .namespace(\"namespace\")\n-            .flowId(\"flowId\")\n             .id(IdUtils.create())\n+            .namespace(namespace)\n+            .flowId(flowId)\n             .state(new State().withState(State.Type.SUCCESS))\n             .build();\n         executionRepository.save(execution);\n \n         var purge = PurgeExecutions.builder()\n+            .flowId(flowId)\n+            .namespace(namespace)\n             .endDate(ZonedDateTime.now().plusMinutes(1).format(DateTimeFormatter.ISO_ZONED_DATE_TIME))\n             .build();\n-        var runContext = runContextFactory.of(Map.of(\"flow\", Map.of(\"namespace\", \"namespace\", \"id\", \"flowId\")));\n+        var runContext = runContextFactory.of(Map.of(\"flow\", Map.of(\"namespace\", namespace, \"id\", flowId)));\n         var output = purge.run(runContext);\n \n         assertThat(output.getExecutionsCount(), is(1));\n     }\n \n     @Test\n     void deleted() throws Exception {\n+        String namespace = \"deleted.namespace\";\n+        String flowId = \"deleted-flow-id\";\n+\n         // create an execution to delete\n         var execution = Execution.builder()\n-            .namespace(\"namespace\")\n-            .flowId(\"flowId\")\n+            .namespace(namespace)\n+            .flowId(flowId)\n             .id(IdUtils.create())\n             .state(new State().withState(State.Type.SUCCESS))\n             .build();\n         executionRepository.save(execution);\n         executionRepository.delete(execution);\n \n         var purge = PurgeExecutions.builder()\n+            .namespace(namespace)\n+            .flowId(flowId)\n             .endDate(ZonedDateTime.now().plusMinutes(1).format(DateTimeFormatter.ISO_ZONED_DATE_TIME))\n             .build();\n-        var runContext = runContextFactory.of(Map.of(\"flow\", Map.of(\"namespace\", \"namespace\", \"id\", \"flowId\")));\n+        var runContext = runContextFactory.of(Map.of(\"flow\", Map.of(\"namespace\", namespace, \"id\", flowId)));\n         var output = purge.run(runContext);\n \n         assertThat(output.getExecutionsCount(), is(1));",
      "parent_sha": "062b4aa159561bfe20a7fd473ff06cea8371b377"
    }
  },
  {
    "oid": "8fe745767963affb8452a62e8e081782aac4ab5b",
    "message": "fix(storage-local): check if local dir is created\n\nrelate to #102",
    "date": "2020-03-28T13:23:41Z",
    "url": "https://github.com/kestra-io/kestra/commit/8fe745767963affb8452a62e8e081782aac4ab5b",
    "details": {
      "sha": "938cfbed33ef62e9375223bb1801241da01921e2",
      "filename": "storage-local/src/main/java/org/kestra/storage/local/LocalStorage.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/8fe745767963affb8452a62e8e081782aac4ab5b/storage-local%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fstorage%2Flocal%2FLocalStorage.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/8fe745767963affb8452a62e8e081782aac4ab5b/storage-local%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fstorage%2Flocal%2FLocalStorage.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/storage-local%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fstorage%2Flocal%2FLocalStorage.java?ref=8fe745767963affb8452a62e8e081782aac4ab5b",
      "patch": "@@ -36,7 +36,9 @@ private void createDirectory(URI append) {\n         }\n \n         if (!file.exists()) {\n-            file.mkdirs();\n+            if (!file.mkdirs()) {\n+                throw new RuntimeException(\"Cannot create directory: \" + file.getAbsolutePath());\n+            }\n         }\n     }\n ",
      "parent_sha": "8178946621aa892d000cdaa61c4a40c158d42d7c"
    }
  },
  {
    "oid": "ed86d0d24dc1fda38aa7a5bf309fdd90972b7860",
    "message": "fix(core): too many metrics are created with trigger_id that overflow metrics server",
    "date": "2022-05-04T09:32:28Z",
    "url": "https://github.com/kestra-io/kestra/commit/ed86d0d24dc1fda38aa7a5bf309fdd90972b7860",
    "details": {
      "sha": "21ca532be80b2ff7bb429f2b41ea24c40659aa83",
      "filename": "core/src/main/java/io/kestra/core/metrics/MetricRegistry.java",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/kestra-io/kestra/blob/ed86d0d24dc1fda38aa7a5bf309fdd90972b7860/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmetrics%2FMetricRegistry.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/ed86d0d24dc1fda38aa7a5bf309fdd90972b7860/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmetrics%2FMetricRegistry.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fmetrics%2FMetricRegistry.java?ref=ed86d0d24dc1fda38aa7a5bf309fdd90972b7860",
      "patch": "@@ -56,7 +56,6 @@ public class MetricRegistry {\n     public final static String TAG_TASK_TYPE = \"task_type\";\n     public final static String TAG_FLOW_ID = \"flow_id\";\n     public final static String TAG_NAMESPACE_ID = \"namespace_id\";\n-    public final static String TAG_TRIGGER_ID = \"trigger_id\";\n     public final static String TAG_STATE = \"state\";\n     public final static String TAG_ATTEMPT_COUNT = \"attempt_count\";\n \n@@ -193,7 +192,6 @@ public String[] tags(TriggerContext triggerContext) {\n         return new String[]{\n             TAG_FLOW_ID, triggerContext.getFlowId(),\n             TAG_NAMESPACE_ID, triggerContext.getNamespace(),\n-            TAG_TRIGGER_ID, triggerContext.getTriggerId(),\n         };\n     }\n \n@@ -205,11 +203,8 @@ public String[] tags(TriggerContext triggerContext) {\n      */\n     public String[] tags(SchedulerExecutionWithTrigger schedulerExecutionWithTrigger, String... tags) {\n         return ArrayUtils.addAll(\n-            ArrayUtils.addAll(\n-                this.tags(schedulerExecutionWithTrigger.getExecution()),\n-                tags\n-            ),\n-            TAG_TRIGGER_ID, schedulerExecutionWithTrigger.getTriggerContext().getTriggerId()\n+            this.tags(schedulerExecutionWithTrigger.getExecution()),\n+            tags\n         );\n     }\n ",
      "parent_sha": "1bdc9215628c7d49c9064dfaa5fcd53c6de19113"
    }
  },
  {
    "oid": "ae87cc83cc28196c6d377f931875c877b0fcb1b4",
    "message": "Update PurgeLogs.java\n\nFixed `WARNING` => `WARN`\r\n\r\n\r\nFollowing this example gave me this error:\r\n\r\n```\r\nIllegal flow yaml: Cannot deserialize value of type org.slf4j.event.Level from String \u201cWARNING\u201d: not one of the values accepted for Enum class: [ERROR, DEBUG, TRACE, INFO, WARN]\r\n at [Source: UNKNOWN; byte offset: #UNKNOWN] (through reference chain: io.kestra.core.models.flows.Flow[\u201ctasks\u201d]->java.util.ArrayList[0]->io.kestra.plugin.core.log.PurgeLogs[\u201clogLevels\u201d]->java.util.ArrayList[3])\r\n```\r\n\r\nSee also: https://www.slf4j.org/api/org/slf4j/event/Level.html",
    "date": "2024-08-19T07:46:42Z",
    "url": "https://github.com/kestra-io/kestra/commit/ae87cc83cc28196c6d377f931875c877b0fcb1b4",
    "details": {
      "sha": "9d96df0f73539504515d92d219492f35a80f4c74",
      "filename": "core/src/main/java/io/kestra/plugin/core/log/PurgeLogs.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/ae87cc83cc28196c6d377f931875c877b0fcb1b4/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Flog%2FPurgeLogs.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/ae87cc83cc28196c6d377f931875c877b0fcb1b4/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Flog%2FPurgeLogs.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Flog%2FPurgeLogs.java?ref=ae87cc83cc28196c6d377f931875c877b0fcb1b4",
      "patch": "@@ -46,7 +46,7 @@\n                 \"- TRACE\",\n                 \"- DEBUG\",\n                 \"- INFO\",\n-                \"- WARNING\",\n+                \"- WARN\",\n             }\n         )\n     }",
      "parent_sha": "c233f12a2e6ef3dd1fd78e0f374ed1493dd76e4f"
    }
  },
  {
    "oid": "9c49e5da3d3affb7ae752a38d750fafef2de8916",
    "message": "fix(webserver): override InputStream available method in NamespaceFileController.putNamespaceFile",
    "date": "2024-03-14T08:31:52Z",
    "url": "https://github.com/kestra-io/kestra/commit/9c49e5da3d3affb7ae752a38d750fafef2de8916",
    "details": {
      "sha": "5d6123b1c63d743ba45904613648570095c934bf",
      "filename": "webserver/src/main/java/io/kestra/webserver/controllers/NamespaceFileController.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/kestra-io/kestra/blob/9c49e5da3d3affb7ae752a38d750fafef2de8916/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FNamespaceFileController.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/9c49e5da3d3affb7ae752a38d750fafef2de8916/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FNamespaceFileController.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/webserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fwebserver%2Fcontrollers%2FNamespaceFileController.java?ref=9c49e5da3d3affb7ae752a38d750fafef2de8916",
      "patch": "@@ -178,7 +178,13 @@ public void createFile(\n                 }\n             }\n         } else {\n-            try(BufferedInputStream inputStream = new BufferedInputStream(fileContent.getInputStream())) {\n+            try(BufferedInputStream inputStream = new BufferedInputStream(fileContent.getInputStream()) {\n+                // Done to bypass the wrong available() output of the CompletedFileUpload InputStream\n+                @Override\n+                public synchronized int available() {\n+                    return (int) fileContent.getSize();\n+                }\n+            }) {\n                 putNamespaceFile(tenantId, namespace, path, inputStream);\n             }\n         }",
      "parent_sha": "c44d2c35bc561849bf651b372217c44d5074c24c"
    }
  },
  {
    "oid": "46f8bef5cc2610561d192d7917e304d76f234266",
    "message": "feat(docs): add more HTTP Request task full plugin examples (#5429)\n\n* feat(docs): add more HTTP Request task full plugin examples\r\n\r\n* Update core/src/main/java/io/kestra/plugin/core/http/Request.java\r\n\r\n---------\r\n\r\nCo-authored-by: Will Russell <wrussell@kestra.io>",
    "date": "2024-10-14T10:09:35Z",
    "url": "https://github.com/kestra-io/kestra/commit/46f8bef5cc2610561d192d7917e304d76f234266",
    "details": {
      "sha": "5fc6a3611b91799f27db1468e75b9c2711e0b028",
      "filename": "core/src/main/java/io/kestra/plugin/core/http/Request.java",
      "status": "modified",
      "additions": 87,
      "deletions": 3,
      "changes": 90,
      "blob_url": "https://github.com/kestra-io/kestra/blob/46f8bef5cc2610561d192d7917e304d76f234266/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/46f8bef5cc2610561d192d7917e304d76f234266/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequest.java?ref=46f8bef5cc2610561d192d7917e304d76f234266",
      "patch": "@@ -58,10 +58,10 @@\n                 \"\"\"\n         ),\n         @Example(\n-            title = \"Execute a Kestra flow via an HTTP request authenticated with a Bearer auth token.\",\n+            title = \"Execute a Kestra flow via an HTTP request authenticated with a Bearer auth token / JWT token.\",\n             full = true,\n             code = \"\"\"\n-                id: api_auth_call\n+                id: jwt_auth_call\n                 namespace: company.team\n \n                 tasks:\n@@ -70,7 +70,37 @@\n                     uri: https://dummyjson.com/user/me\n                     method: GET\n                     headers:\n-                      authorization: 'Bearer <TOKEN>'\n+                      Authorization: 'Bearer <TOKEN>'\n+                \"\"\"\n+        ),\n+        @Example(\n+            title = \"Execute a Kestra flow via an HTTP request authenticated with API key passed in the header.\",\n+            full = true,\n+            code = \"\"\"\n+                id: api_key_auth_call\n+                namespace: company.team\n+\n+                tasks:\n+                  - id: api_key_auth\n+                    type: io.kestra.plugin.core.http.Request\n+                    uri: https://dummyjson.com/user/me\n+                    method: GET\n+                    headers:\n+                      X-API-KEY: abcde12345\n+                \"\"\"\n+        ),\n+        @Example(\n+            title = \"Execute a Kestra flow via an HTTP request authenticated with API key passed in the query parameters.\",\n+            full = true,\n+            code = \"\"\"\n+                id: api_key_auth_call\n+                namespace: company.team\n+\n+                tasks:\n+                  - id: api_key_in_query_params\n+                    type: io.kestra.plugin.core.http.Request\n+                    uri: \"https://dummyjson.com/user/me?api_key={{ secret('API_KEY') }}\"\n+                    method: GET\n                 \"\"\"\n         ),\n         @Example(\n@@ -185,6 +215,60 @@\n                         name: \"my-file.txt\"\n                         content: \"{{ inputs.file }}\"\n                 \"\"\"\n+        ),\n+        @Example(\n+            title = \"Upload an image using HTTP POST request to a webserver.\",\n+            full = true,\n+            code = \"\"\"\n+                id: http_upload_image\n+                namespace: company.team\n+                \n+                tasks:\n+                  - id: s3_download\n+                    type: io.kestra.plugin.aws.s3.Download\n+                    accessKeyId: \"{{ secret('AWS_ACCESS_KEY_ID')}}\"\n+                    secretKeyId: \"{{ secret('AWS_SECRET_KEY_ID')}}\"\n+                    region: \"eu-central-1\"\n+                    bucket: \"my-bucket\"\n+                    key: \"path/to/file/my_image.jpeg\"\n+                  \n+                  - id: send_data\n+                    type: io.kestra.plugin.core.http.Request\n+                    uri: \"https://server.com/upload\"\n+                    headers:\n+                      user-agent: \"kestra-io\"\n+                    method: \"POST\"\n+                    contentType: \"image/jpeg\"\n+                    formData:\n+                      user:\n+                        file: \"my-image.jpeg\"\n+                        url: \"{{ outputs.s3_download.uri }}\"\n+                        metadata:\n+                          description: \"my favorite image\"\n+                \"\"\"\n+        ),\n+        @Example(\n+            title = \"Upload a CSV file using HTTP POST request to a webserver.\",\n+            full = true,\n+            code = \"\"\"\n+                id: http_csv_file_upload\n+                namespace: company.team\n+                \n+                tasks:\n+                  - id: http_download\n+                    type: io.kestra.plugin.core.http.Download\n+                    uri: https://huggingface.co/datasets/kestra/datasets/raw/main/csv/orders.csv\n+                  \n+                  - id: upload\n+                    type: io.kestra.plugin.core.http.Request\n+                    uri: \"https://server.com/upload\"\n+                    headers:\n+                      user-agent: \"kestra-io\"\n+                    method: \"POST\"\n+                    contentType: \"multipart/form-data\"\n+                    formData:\n+                      url: \"{{ outputs.http_download.uri }}\"\n+                \"\"\"\n         )\n     },\n     aliases = \"io.kestra.plugin.fs.http.Request\"",
      "parent_sha": "d78832f6bfdda1e5273d2eaa924b89886c740696"
    }
  },
  {
    "oid": "d89aeeb7aae7e6a28bf50e08510773d1deb820a2",
    "message": "Update StandAloneCommand.java",
    "date": "2024-09-02T11:30:40Z",
    "url": "https://github.com/kestra-io/kestra/commit/d89aeeb7aae7e6a28bf50e08510773d1deb820a2",
    "details": {
      "sha": "bf30131e352dff180f9615e990ccacd5996794dc",
      "filename": "cli/src/main/java/io/kestra/cli/commands/servers/StandAloneCommand.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/d89aeeb7aae7e6a28bf50e08510773d1deb820a2/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fservers%2FStandAloneCommand.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/d89aeeb7aae7e6a28bf50e08510773d1deb820a2/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fservers%2FStandAloneCommand.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/cli%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcli%2Fcommands%2Fservers%2FStandAloneCommand.java?ref=d89aeeb7aae7e6a28bf50e08510773d1deb820a2",
      "patch": "@@ -41,7 +41,7 @@ public class StandAloneCommand extends AbstractServerCommand {\n     private File flowPath;\n \n     @CommandLine.Option(names = {\"--worker-thread\"}, description = \"the number of worker threads, defaults to two times the number of available processors. Set it to 0 to avoid starting a worker.\")\n-    private int workerThread = Runtime.getRuntime().availableProcessors() * 2;\n+    private int workerThread = Runtime.getRuntime().availableProcessors() * 4;\n \n     @CommandLine.Option(names = {\"--skip-executions\"}, split=\",\", description = \"a list of execution identifiers to skip, separated by a coma; for troubleshooting purpose only\")\n     private List<String> skipExecutions = Collections.emptyList();",
      "parent_sha": "403fa2346892f564b18bb607e109b73af3c1a8db"
    }
  },
  {
    "oid": "fc3c1a4c545f2cba784e0000c96dc0b18fd9861f",
    "message": "docs: fix typo in storage reverse task title (#7667)",
    "date": "2025-03-04T17:31:56Z",
    "url": "https://github.com/kestra-io/kestra/commit/fc3c1a4c545f2cba784e0000c96dc0b18fd9861f",
    "details": {
      "sha": "4262f7fa8822c8ee575d697037db3eea34e347dd",
      "filename": "core/src/main/java/io/kestra/plugin/core/storage/Reverse.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/fc3c1a4c545f2cba784e0000c96dc0b18fd9861f/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fstorage%2FReverse.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/fc3c1a4c545f2cba784e0000c96dc0b18fd9861f/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fstorage%2FReverse.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fstorage%2FReverse.java?ref=fc3c1a4c545f2cba784e0000c96dc0b18fd9861f",
      "patch": "@@ -30,7 +30,7 @@\n @Getter\n @NoArgsConstructor\n @Schema(\n-    title = \"Reserve a file from the Kestra's internal storage, last line first.\"\n+    title = \"Reverse a file from the Kestra's internal storage, last line first.\"\n )\n @Plugin(\n     examples = {",
      "parent_sha": "4cee4fca611e0af2a8e62690ccbdbfc7d296c8ce"
    }
  },
  {
    "oid": "876402df4344f601d3f65bed3c52947a84dcef6d",
    "message": "fix(core): KafkaElasticIndexer due to invalid inject class",
    "date": "2021-02-18T10:44:04Z",
    "url": "https://github.com/kestra-io/kestra/commit/876402df4344f601d3f65bed3c52947a84dcef6d",
    "details": {
      "sha": "1d7f89cc71a23d178ec4b122d9c68b9b1e42ad7c",
      "filename": "cli/src/main/java/org/kestra/cli/commands/servers/IndexerCommand.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/kestra-io/kestra/blob/876402df4344f601d3f65bed3c52947a84dcef6d/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcli%2Fcommands%2Fservers%2FIndexerCommand.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/876402df4344f601d3f65bed3c52947a84dcef6d/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcli%2Fcommands%2Fservers%2FIndexerCommand.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Fcli%2Fcommands%2Fservers%2FIndexerCommand.java?ref=876402df4344f601d3f65bed3c52947a84dcef6d",
      "patch": "@@ -6,6 +6,7 @@\n import org.kestra.cli.AbstractCommand;\n import org.kestra.core.models.ServerType;\n import org.kestra.core.runners.Indexer;\n+import org.kestra.core.runners.IndexerInterface;\n import org.kestra.core.utils.Await;\n import picocli.CommandLine;\n \n@@ -36,7 +37,7 @@ public static Map<String, Object> propertiesOverrides() {\n     public Integer call() throws Exception {\n         super.call();\n \n-        Indexer indexer = applicationContext.getBean(Indexer.class);\n+        IndexerInterface indexer = applicationContext.getBean(IndexerInterface.class);\n         indexer.run();\n \n         log.info(\"Indexer started\");",
      "parent_sha": "626c80d8f2000281f15e587eb9069ad21d8930ae"
    }
  },
  {
    "oid": "80ee74fee6ef081fadb05c93d625b64e83603d43",
    "message": "fix(runner-memory): try to fix error index bound must be positive during unit test",
    "date": "2020-07-09T12:10:11Z",
    "url": "https://github.com/kestra-io/kestra/commit/80ee74fee6ef081fadb05c93d625b64e83603d43",
    "details": {
      "sha": "78187b3e086870a7a35e37f110ac6da62f4f1587",
      "filename": "runner-memory/src/main/java/org/kestra/runner/memory/MemoryQueue.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/80ee74fee6ef081fadb05c93d625b64e83603d43/runner-memory%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Frunner%2Fmemory%2FMemoryQueue.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/80ee74fee6ef081fadb05c93d625b64e83603d43/runner-memory%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Frunner%2Fmemory%2FMemoryQueue.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/runner-memory%2Fsrc%2Fmain%2Fjava%2Forg%2Fkestra%2Frunner%2Fmemory%2FMemoryQueue.java?ref=80ee74fee6ef081fadb05c93d625b64e83603d43",
      "patch": "@@ -75,7 +75,7 @@ public synchronized Runnable receive(Class<?> consumerGroup, Consumer<T> consume\n         }\n \n         if (!this.consumers.containsKey(consumerGroupName)) {\n-            this.consumers.put(consumerGroupName, new ArrayList<>());\n+            this.consumers.put(consumerGroupName, Collections.synchronizedList(new ArrayList<>()));\n         }\n \n         this.consumers.get(consumerGroupName).add(consumer);",
      "parent_sha": "220390eaffad4c3327f7a0829dcc5504fb461260"
    }
  },
  {
    "oid": "2e5ae6d1a8c78696ec7ce5de3dd3000fec22ece8",
    "message": "fix(core): waitfor maxIteration do not stop too early\n\nclose #3861",
    "date": "2024-05-31T10:58:24Z",
    "url": "https://github.com/kestra-io/kestra/commit/2e5ae6d1a8c78696ec7ce5de3dd3000fec22ece8",
    "details": {
      "sha": "794c60536eaeb37be6235a3ce942a331fe1b3e07",
      "filename": "core/src/main/java/io/kestra/plugin/core/flow/WaitFor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/2e5ae6d1a8c78696ec7ce5de3dd3000fec22ece8/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FWaitFor.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/2e5ae6d1a8c78696ec7ce5de3dd3000fec22ece8/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FWaitFor.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FWaitFor.java?ref=2e5ae6d1a8c78696ec7ce5de3dd3000fec22ece8",
      "patch": "@@ -161,7 +161,7 @@ private boolean reachedMaximums(RunContext runContext, Execution execution, Task\n         }\n \n         Integer iterationCount = (Integer) parentTaskRun.getOutputs().get(\"iterationCount\");\n-        if (this.checkFrequency.maxIterations != null && iterationCount != null && iterationCount >= this.checkFrequency.maxIterations) {\n+        if (this.checkFrequency.maxIterations != null && iterationCount != null && iterationCount > this.checkFrequency.maxIterations) {\n             if (printLog) {logger.warn(\"Max iterations reached\");}\n             return true;\n         }",
      "parent_sha": "2223265e60505b6eae3d82b490d55554d5e1f356"
    }
  },
  {
    "oid": "58a360fae0f6f138025eb8351f35f846a628b0ea",
    "message": "feat(core-ee): #7501 split file log exporter to multiple files (#8138)\n\nCo-authored-by: nKwiatkowski <nkwiatkowski@kestra.io>",
    "date": "2025-03-28T16:42:41Z",
    "url": "https://github.com/kestra-io/kestra/commit/58a360fae0f6f138025eb8351f35f846a628b0ea",
    "details": {
      "sha": "25cbdfafd8c59ffb2b2b988464b594b3cf3ba2f3",
      "filename": "core/src/main/java/io/kestra/core/serializers/FileSerde.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/58a360fae0f6f138025eb8351f35f846a628b0ea/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fserializers%2FFileSerde.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/58a360fae0f6f138025eb8351f35f846a628b0ea/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fserializers%2FFileSerde.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fserializers%2FFileSerde.java?ref=58a360fae0f6f138025eb8351f35f846a628b0ea",
      "patch": "@@ -201,7 +201,7 @@ private static <T> MappingIterator<T> createMappingIterator(ObjectMapper objectM\n         }\n     }\n \n-    private static <T> SequenceWriter createSequenceWriter(ObjectMapper objectMapper, Writer writer, TypeReference<T> type) throws IOException {\n+    public static <T> SequenceWriter createSequenceWriter(ObjectMapper objectMapper, Writer writer, TypeReference<T> type) throws IOException {\n         return objectMapper.writerFor(type).writeValues(writer);\n     }\n ",
      "parent_sha": "49b647e1fcc539161462507e7eca71118bce71ec"
    }
  },
  {
    "oid": "b48a758ec7130a20b07debf144c169b5f7f7e508",
    "message": "feat(core): rename task Counts to Count\n\nFixes #2863",
    "date": "2024-05-16T11:55:54Z",
    "url": "https://github.com/kestra-io/kestra/commit/b48a758ec7130a20b07debf144c169b5f7f7e508",
    "details": {
      "sha": "7cd15a46686d64348ec564302f39537bbfda498b",
      "filename": "core/src/main/java/io/kestra/plugin/core/execution/Count.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/b48a758ec7130a20b07debf144c169b5f7f7e508/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fexecution%2FCount.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/b48a758ec7130a20b07debf144c169b5f7f7e508/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fexecution%2FCount.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fexecution%2FCount.java?ref=b48a758ec7130a20b07debf144c169b5f7f7e508",
      "patch": "@@ -74,7 +74,7 @@\n     },\n     aliases = \"io.kestra.core.tasks.executions.Counts\"\n )\n-public class Counts extends Task implements RunnableTask<Counts.Output> {\n+public class Count extends Task implements RunnableTask<Count.Output> {\n     @NotNull\n     @NotEmpty\n     @Schema(",
      "previous_filename": "core/src/main/java/io/kestra/plugin/core/execution/Counts.java",
      "parent_sha": "a3131085085d1aae53c2b4ec24e0ff91e5b31d2f"
    }
  },
  {
    "oid": "4e7cf0d57830fe5236dd626f62fd37221b52f88b",
    "message": "fix(core): better log in the Worker when updating a flow with a trigger\n\nAlso removing the interrupted stacktrace as it didn't have any value.\n\nFixes #3969",
    "date": "2024-06-25T08:24:35Z",
    "url": "https://github.com/kestra-io/kestra/commit/4e7cf0d57830fe5236dd626f62fd37221b52f88b",
    "details": {
      "sha": "17d5bd8db923af9963df6a512dcfdb67c0947b2b",
      "filename": "core/src/main/java/io/kestra/core/runners/Worker.java",
      "status": "modified",
      "additions": 21,
      "deletions": 12,
      "changes": 33,
      "blob_url": "https://github.com/kestra-io/kestra/blob/4e7cf0d57830fe5236dd626f62fd37221b52f88b/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/4e7cf0d57830fe5236dd626f62fd37221b52f88b/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java?ref=4e7cf0d57830fe5236dd626f62fd37221b52f88b",
      "patch": "@@ -167,7 +167,6 @@ public void run() {\n \n             synchronized (this) {\n                 if (executionKilled.getLeft() instanceof ExecutionKilledExecution executionKilledExecution) {\n-                    // @FIXME: the hashset will never expire killed execution\n                     killedExecution.add(executionKilledExecution.getExecutionId());\n \n                     workerThreadReferences\n@@ -556,15 +555,25 @@ private void logTerminated(WorkerTask workerTask) {\n     private void logError(WorkerTrigger workerTrigger, Throwable e) {\n         Logger logger = workerTrigger.getConditionContext().getRunContext().logger();\n \n-        logService.logTrigger(\n-            workerTrigger.getTriggerContext(),\n-            logger,\n-            Level.WARN,\n-            \"[date: {}] Worker Evaluate Failed with error '{}'\",\n-            workerTrigger.getTriggerContext().getDate(),\n-            e != null ? e.getMessage() : \"null\",\n-            e\n-        );\n+        if (e instanceof InterruptedException || (e != null && e.getCause() instanceof InterruptedException)) {\n+            logService.logTrigger(\n+                workerTrigger.getTriggerContext(),\n+                logger,\n+                Level.WARN,\n+                \"[date: {}] Trigger evaluation interrupted in the worker\",\n+                workerTrigger.getTriggerContext().getDate()\n+            );\n+        } else {\n+            logService.logTrigger(\n+                workerTrigger.getTriggerContext(),\n+                logger,\n+                Level.WARN,\n+                \"[date: {}] Trigger evaluation failed in the worker with error: {}\",\n+                workerTrigger.getTriggerContext().getDate(),\n+                e != null ? e.getMessage() : \"unknown\",\n+                e\n+            );\n+        }\n \n         if (logger.isTraceEnabled() && e != null) {\n             logger.trace(Throwables.getStackTraceAsString(e));\n@@ -645,7 +654,7 @@ private io.kestra.core.models.flows.State.Type runThread(AbstractWorkerThread wo\n             workerThread.join();\n             state = workerThread.getTaskState();\n         } catch (InterruptedException e) {\n-            logger.error(\"Failed to join WorkerThread {}\", e.getMessage(), e);\n+            logger.error(\"Failed to join the Worker thread: {}\", e.getMessage(), e);\n             if (workerThread instanceof WorkerTaskThread workerTaskThread) {\n                 state = workerTaskThread.getWorkerTask().getTask().isAllowFailure() ? WARNING : FAILED;\n             } else {\n@@ -839,7 +848,7 @@ public List<WorkerJob> getWorkerThreadTasks() throws Exception {\n                 } else if (workerThread instanceof AbstractWorkerTriggerThread workerTriggerThread) {\n                     return workerTriggerThread.workerTrigger;\n                 } else {\n-                    throw new Exception(\"Invalid thread type: '\" + workerThread.getClass().getName() + \"'\");\n+                    throw new IllegalArgumentException(\"Invalid thread type: '\" + workerThread.getClass().getName() + \"'\");\n                 }\n             }))\n             .toList();",
      "parent_sha": "4efb59c02b7a6736d13a14408739002ee5e4f8ad"
    }
  },
  {
    "oid": "3f5796a3896b1ded85b7023a4793220110c4fa93",
    "message": "feat(subflow): change the defaults to wait until subflow completion",
    "date": "2024-05-14T17:35:58Z",
    "url": "https://github.com/kestra-io/kestra/commit/3f5796a3896b1ded85b7023a4793220110c4fa93",
    "details": {
      "sha": "8ad67907269c82235c88014527465ee5dec8fa21",
      "filename": "core/src/main/java/io/kestra/core/tasks/flows/Subflow.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/kestra-io/kestra/blob/3f5796a3896b1ded85b7023a4793220110c4fa93/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FSubflow.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/3f5796a3896b1ded85b7023a4793220110c4fa93/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FSubflow.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Ftasks%2Fflows%2FSubflow.java?ref=3f5796a3896b1ded85b7023a4793220110c4fa93",
      "patch": "@@ -104,15 +104,15 @@ public class Subflow extends Task implements ExecutableTask<Subflow.Output>, Chi\n         title = \"Whether to wait for the subflow execution to finish before continuing the current execution.\"\n     )\n     @PluginProperty\n-    private final Boolean wait = false;\n+    private final Boolean wait = true;\n \n     @Builder.Default\n     @Schema(\n         title = \"Whether to fail the current execution if the subflow execution fails or is killed.\",\n         description = \"Note that this option works only if `wait` is set to `true`.\"\n     )\n     @PluginProperty\n-    private final Boolean transmitFailed = false;\n+    private final Boolean transmitFailed = true;\n \n     @Builder.Default\n     @Schema(",
      "parent_sha": "2545df4387577bc048c0fb047562561b98168fea"
    }
  },
  {
    "oid": "8a26e37455d846f46472d70c0f8d78e9bfc597c1",
    "message": "fix(core): catch errors on task run\n\nFixes https://github.com/kestra-io/kestra-ee/issues/2416",
    "date": "2024-12-06T10:39:26Z",
    "url": "https://github.com/kestra-io/kestra/commit/8a26e37455d846f46472d70c0f8d78e9bfc597c1",
    "details": {
      "sha": "8545b21d4caec4c273fa74448abc2bc8ea6e3b2c",
      "filename": "core/src/main/java/io/kestra/core/runners/AbstractWorkerCallable.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/kestra-io/kestra/blob/8a26e37455d846f46472d70c0f8d78e9bfc597c1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FAbstractWorkerCallable.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/8a26e37455d846f46472d70c0f8d78e9bfc597c1/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FAbstractWorkerCallable.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FAbstractWorkerCallable.java?ref=8a26e37455d846f46472d70c0f8d78e9bfc597c1",
      "patch": "@@ -54,7 +54,11 @@ public State.Type call() {\n \n         try {\n             return doCall();\n-        } catch (Exception e) {\n+        } catch (Throwable e) {\n+            // Catching Throwable is usually a bad idea.\n+            // However, here, we want to be sure that the task fails whatever happens,\n+            // and some plugins may throw errors, for example, for dependency issues or worst,\n+            // bad behavior that throws errors and not exceptions.\n             return this.exceptionHandler(e);\n         } finally {\n             shutdownLatch.countDown();",
      "parent_sha": "6a953d194d02e62773da3259e8b8bf988ee04662"
    }
  },
  {
    "oid": "5150cb81c40e6f1dbc0364cf24e08bad53d1e26f",
    "message": "feat(docs): add authentication http request example (#4423)\n\n* feat(docs): add authentication http request example\r\n\r\n* Apply suggestions from code review\r\n\r\n---------\r\n\r\nCo-authored-by: Anna Geller <anna.m.geller@gmail.com>",
    "date": "2024-07-24T16:30:52Z",
    "url": "https://github.com/kestra-io/kestra/commit/5150cb81c40e6f1dbc0364cf24e08bad53d1e26f",
    "details": {
      "sha": "19fcf3aa6ed3f127d32cf91beaee8930063d8b5e",
      "filename": "core/src/main/java/io/kestra/plugin/core/http/Request.java",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/kestra-io/kestra/blob/5150cb81c40e6f1dbc0364cf24e08bad53d1e26f/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/5150cb81c40e6f1dbc0364cf24e08bad53d1e26f/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fhttp%2FRequest.java?ref=5150cb81c40e6f1dbc0364cf24e08bad53d1e26f",
      "patch": "@@ -57,7 +57,22 @@\n             \"\"\"\n         ),\n         @Example(\n-            title = \"Make an HTTP request and process its output. Given that we send a JSON payload in the request body, we need to use `application/json` as content type.\",\n+            title = \"Execute a Kestra flow via an HTTP request authenticated with a Bearer auth token.\",\n+            full = true,\n+            code = \"\"\"\n+            id: api_auth_call\n+            namespace: company.team\n+            tasks:\n+              - id: auth_token_api\n+                type: io.kestra.plugin.core.http.Request\n+                uri: https://dummyjson.com/user/me\n+                method: GET\n+                headers:\n+                  authorization: 'Bearer <TOKEN>'\n+            \"\"\"\n+        ),\n+        @Example(\n+            title = \"Make a HTTP request and process its output. Given that we send a JSON payload in the request body, we need to use `application/json` as content type.\",\n             full = true,\n             code = \"\"\"\n id: http_post_request_example",
      "parent_sha": "19d30d94311471f6b58c35665c1a225a3d14bb50"
    }
  },
  {
    "oid": "2aa10e49e4a5f49bb3ffede65577432a42ae14cd",
    "message": "fix(): prevent worker exit when instance is standalone (#3046)",
    "date": "2024-02-12T12:33:47Z",
    "url": "https://github.com/kestra-io/kestra/commit/2aa10e49e4a5f49bb3ffede65577432a42ae14cd",
    "details": {
      "sha": "a508408aba93e6a6dca87346ee0716eea32e775b",
      "filename": "jdbc/src/main/java/io/kestra/jdbc/runner/JdbcHeartbeat.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/kestra-io/kestra/blob/2aa10e49e4a5f49bb3ffede65577432a42ae14cd/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcHeartbeat.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/2aa10e49e4a5f49bb3ffede65577432a42ae14cd/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcHeartbeat.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcHeartbeat.java?ref=2aa10e49e4a5f49bb3ffede65577432a42ae14cd",
      "patch": "@@ -1,12 +1,15 @@\n package io.kestra.jdbc.runner;\n \n \n+import io.kestra.core.models.ServerType;\n import io.kestra.core.runners.Worker;\n import io.kestra.core.runners.WorkerInstance;\n import io.kestra.jdbc.repository.AbstractJdbcWorkerInstanceRepository;\n import io.micronaut.context.ApplicationContext;\n import io.micronaut.context.annotation.Requires;\n+import io.micronaut.context.annotation.Value;\n import io.micronaut.context.env.Environment;\n+import io.micronaut.core.annotation.Nullable;\n import io.micronaut.scheduling.annotation.Scheduled;\n import jakarta.inject.Inject;\n import jakarta.inject.Singleton;\n@@ -23,6 +26,10 @@\n public class JdbcHeartbeat {\n     private static final String HOSTNAME;\n \n+    @Nullable\n+    @Value(\"${kestra.server-type}\")\n+    protected ServerType serverType;\n+\n     static {\n         try {\n             HOSTNAME = InetAddress.getLocalHost().getHostName();\n@@ -75,7 +82,9 @@ public void updateHeartbeat() {\n \n             if (workerInstanceRepository.heartbeatCheckUp(workerInstance.getWorkerUuid().toString()).isEmpty()) {\n                 log.error(\"heartbeatCheckUp failed, unable to find current instance '{}', Shutting down now!\", workerInstance.getWorkerUuid());\n-                Runtime.getRuntime().exit(1);\n+                if (serverType == ServerType.WORKER) {\n+                    Runtime.getRuntime().exit(1);\n+                }\n             }\n         }\n     }",
      "parent_sha": "d40fa7c4ee6ed51dad218a832cc49b66127ed71d"
    }
  },
  {
    "oid": "6c6f072c2c4e1046c42d80e55a18ee72e09db930",
    "message": "fix(core): fix cannot create Metric from null in Worker class\n\nfix: kestra-io/kestra-ee#2417",
    "date": "2024-12-06T12:29:08Z",
    "url": "https://github.com/kestra-io/kestra/commit/6c6f072c2c4e1046c42d80e55a18ee72e09db930",
    "details": {
      "sha": "61cc5213973f76eae261b79d3b0afd24667011c1",
      "filename": "core/src/main/java/io/kestra/core/runners/Worker.java",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/kestra-io/kestra/blob/6c6f072c2c4e1046c42d80e55a18ee72e09db930/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/6c6f072c2c4e1046c42d80e55a18ee72e09db930/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Frunners%2FWorker.java?ref=6c6f072c2c4e1046c42d80e55a18ee72e09db930",
      "patch": "@@ -51,6 +51,8 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import static io.kestra.core.models.flows.State.Type.*;\n import static io.kestra.core.server.Service.ServiceState.TERMINATED_FORCED;\n@@ -180,11 +182,16 @@ public Set<Metric> getMetrics() {\n             return Collections.emptySet();\n         }\n \n-        return Set.of(\n-            Metric.of(this.metricRegistry.findGauge(MetricRegistry.METRIC_WORKER_JOB_THREAD_COUNT)),\n-            Metric.of(this.metricRegistry.findGauge(MetricRegistry.METRIC_WORKER_JOB_PENDING_COUNT)),\n-            Metric.of(this.metricRegistry.findGauge(MetricRegistry.METRIC_WORKER_JOB_RUNNING_COUNT))\n+        Stream<String> metrics = Stream.of(\n+            MetricRegistry.METRIC_WORKER_JOB_THREAD_COUNT,\n+            MetricRegistry.METRIC_WORKER_JOB_PENDING_COUNT,\n+            MetricRegistry.METRIC_WORKER_JOB_RUNNING_COUNT\n         );\n+\n+        return metrics\n+            .flatMap(metric -> Optional.ofNullable(metricRegistry.findGauge(metric)).stream())\n+            .map(Metric::of)\n+            .collect(Collectors.toSet());\n     }\n \n     @Override",
      "parent_sha": "948347ace546753f4c3f113afb484f0cfb1b2ade"
    }
  },
  {
    "oid": "ba90936efed0103fe407eb88bac3551dd005472f",
    "message": "fix(jdbc): retry flaky test",
    "date": "2024-02-02T11:15:59Z",
    "url": "https://github.com/kestra-io/kestra/commit/ba90936efed0103fe407eb88bac3551dd005472f",
    "details": {
      "sha": "5c9b4c3f0471203169d79fb1026d5b32924de80c",
      "filename": "jdbc/src/test/java/io/kestra/jdbc/runner/JdbcRunnerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/ba90936efed0103fe407eb88bac3551dd005472f/jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcRunnerTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/ba90936efed0103fe407eb88bac3551dd005472f/jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcRunnerTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fjdbc%2Frunner%2FJdbcRunnerTest.java?ref=ba90936efed0103fe407eb88bac3551dd005472f",
      "patch": "@@ -206,7 +206,7 @@ void taskDefaults() throws TimeoutException, IOException, URISyntaxException {\n         taskDefaultsCaseTest.taskDefaults();\n     }\n \n-    @Test\n+    @RetryingTest(5)\n     void flowWaitSuccess() throws Exception {\n         flowCaseTest.waitSuccess();\n     }",
      "parent_sha": "65b6a93852089fd4344bc3a382a2264a74bf1508"
    }
  },
  {
    "oid": "78ec3c1bc46445fb433d0a24add858a17a6e1c32",
    "message": "fix(): replace Windows `\\` for `/` in LocalStorage",
    "date": "2024-06-12T12:09:09Z",
    "url": "https://github.com/kestra-io/kestra/commit/78ec3c1bc46445fb433d0a24add858a17a6e1c32",
    "details": {
      "sha": "4c16efb028696a92c0964d177c3ff630453f8c39",
      "filename": "storage-local/src/main/java/io/kestra/storage/local/LocalStorage.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/kestra-io/kestra/blob/78ec3c1bc46445fb433d0a24add858a17a6e1c32/storage-local%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fstorage%2Flocal%2FLocalStorage.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/78ec3c1bc46445fb433d0a24add858a17a6e1c32/storage-local%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fstorage%2Flocal%2FLocalStorage.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/storage-local%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fstorage%2Flocal%2FLocalStorage.java?ref=78ec3c1bc46445fb433d0a24add858a17a6e1c32",
      "patch": "@@ -115,7 +115,7 @@ public List<FileAttributes> list(String tenantId, URI uri) throws IOException {\n                     URI relative = URI.create(\n                         getPath(tenantId, null).relativize(\n                             Path.of(file.toUri())\n-                        ).toString()\n+                        ).toString().replace(\"\\\\\", \"/\")\n                     );\n                     return getAttributes(tenantId, relative);\n                 }))",
      "parent_sha": "5391c44c6b661769e0c3892d0eb20053dc9d56cf"
    }
  },
  {
    "oid": "fd6b9dc065dd8cf67242b973e509cfa28bc8a3a3",
    "message": "fix(tests): increase seconds diff between dates (#7785)",
    "date": "2025-03-10T14:08:20Z",
    "url": "https://github.com/kestra-io/kestra/commit/fd6b9dc065dd8cf67242b973e509cfa28bc8a3a3",
    "details": {
      "sha": "b7aa4694c38b7b2bf499757316f5b3a172c7053a",
      "filename": "core/src/test/java/io/kestra/core/schedulers/SchedulerScheduleOnDatesTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/kestra-io/kestra/blob/fd6b9dc065dd8cf67242b973e509cfa28bc8a3a3/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FSchedulerScheduleOnDatesTest.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/fd6b9dc065dd8cf67242b973e509cfa28bc8a3a3/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FSchedulerScheduleOnDatesTest.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fkestra%2Fcore%2Fschedulers%2FSchedulerScheduleOnDatesTest.java?ref=fd6b9dc065dd8cf67242b973e509cfa28bc8a3a3",
      "patch": "@@ -53,9 +53,9 @@ public class SchedulerScheduleOnDatesTest extends AbstractSchedulerTest {\n \n     private Flow createScheduleFlow(String zone, String triggerId) {\n         var now = ZonedDateTime.now();\n-        var before = now.minusSeconds(1).truncatedTo(ChronoUnit.SECONDS);\n-        var after = now.plusSeconds(1).truncatedTo(ChronoUnit.SECONDS);\n-        var later = now.plusSeconds(2).truncatedTo(ChronoUnit.SECONDS);\n+        var before = now.minusSeconds(3).truncatedTo(ChronoUnit.SECONDS);\n+        var after = now.plusSeconds(3).truncatedTo(ChronoUnit.SECONDS);\n+        var later = now.plusSeconds(6).truncatedTo(ChronoUnit.SECONDS);\n         ScheduleOnDates schedule = createScheduleOnDatesTrigger(zone, List.of(before, after, later), triggerId).build();\n \n         return createFlow(Collections.singletonList(schedule));",
      "parent_sha": "5935308e43ef4f4a1eb75f065ce6bfe5f6e13142"
    }
  },
  {
    "oid": "e53c534cc4285623d2807f7606d41df2ae13e8b2",
    "message": "fix: WaitFor docs",
    "date": "2024-05-22T16:01:13Z",
    "url": "https://github.com/kestra-io/kestra/commit/e53c534cc4285623d2807f7606d41df2ae13e8b2",
    "details": {
      "sha": "55384d21d631add954f6212f01f3945adce4f29f",
      "filename": "core/src/main/java/io/kestra/plugin/core/flow/WaitFor.java",
      "status": "modified",
      "additions": 15,
      "deletions": 16,
      "changes": 31,
      "blob_url": "https://github.com/kestra-io/kestra/blob/e53c534cc4285623d2807f7606d41df2ae13e8b2/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FWaitFor.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/e53c534cc4285623d2807f7606d41df2ae13e8b2/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FWaitFor.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fplugin%2Fcore%2Fflow%2FWaitFor.java?ref=e53c534cc4285623d2807f7606d41df2ae13e8b2",
      "patch": "@@ -40,31 +40,30 @@\n @Getter\n @NoArgsConstructor\n @Schema(\n-    title = \"Run a specific task repeatedly until the expected condition is met.\",\n+    title = \"Run a list of tasks repeatedly until the expected condition is met.\",\n     description = \"\"\"\n-        Use this task if your downstream processing requires waiting for a specific HTTP response or a job to finish.\n-        You can access the task output in the `condition`.\n-\n-        The `condition` is always checked after the task execution.\n+        Use this task if your workflow requires blocking calls polling for a job to finish or for some external API to return a specific HTTP response.\n+        \n+        You can access the outputs of the nested tasks in the `condition` property. The `condition` is evaluated after all nested task runs finish.\n         \"\"\"\n )\n @Plugin(\n     examples = {\n         @Example(\n             full = true,\n-            title = \"Wait for a task to return a specific output\",\n+            title = \"Run a task until it returns a specific value. Note how you don't need to take care of incrementing the iteration count. The task will loop and keep track of the iteration outputs behind the scenes \u2014 you only need to specify the exit condition for the loop.\",\n             code = \"\"\"\n-                id: exampleFlow\n+                id: example\n                 namespace: myteam\n \n                 tasks:\n-                  - id: waitFor\n+                  - id: loop\n                     type: io.kestra.plugin.core.flow.WaitFor\n                     condition: \"{{ outputs.return.value != '4' }}\"\n-                    task:\n-                      id: return\n-                      type: io.kestra.plugin.core.debug.Return\n-                      format: \"{{ outputs.waitFor.iterationCount }}\"\n+                    tasks:\n+                      - id: return\n+                        type: io.kestra.plugin.core.debug.Return\n+                        format: \"{{ outputs.loop.iterationCount }}\"\n                 \"\"\"\n         )\n     }\n@@ -81,19 +80,19 @@ public class WaitFor extends Task implements FlowableTask<WaitFor.Output> {\n     @NotNull\n     @PluginProperty(dynamic = true)\n     @Schema(\n-        title = \"The condition to execute again the task that must be a boolean.\",\n-        description = \"Boolean coercion allows 0, -0, null and '' to evaluate to false, all other values will evaluate to true.\"\n+        title = \"The condition expression that should evaluate to `true` or `false`.\",\n+        description = \"Boolean coercion allows 0, -0, null and '' to evaluate to false; all other values will evaluate to true.\"\n     )\n     private String condition;\n \n     @Schema(\n-        title = \"If true, the task will fail if the `maxIterations` or `maxDuration` are reached.\"\n+        title = \"If set to `true`, the task run will end in a failed state once the `maxIterations` or `maxDuration` are reached.\"\n     )\n     @Builder.Default\n     private Boolean failOnMaxReached = false;\n \n     @Schema(\n-        title = \"Check frequency configuration.\"\n+        title = \"Check the frequency configuration.\"\n     )\n     @Builder.Default\n     @PluginProperty",
      "parent_sha": "105719d8f94de40e53a0db83bf3aae1489089c3d"
    }
  },
  {
    "oid": "562986ad53b66d16d7d5affff4f920800910bb97",
    "message": "fix: when sub-group is group",
    "date": "2023-02-13T13:53:33Z",
    "url": "https://github.com/kestra-io/kestra/commit/562986ad53b66d16d7d5affff4f920800910bb97",
    "details": {
      "sha": "33b27a45d2e25c0918adf1ddf18ac1dd87a412db",
      "filename": "core/src/main/java/io/kestra/core/docs/PluginDocumentation.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/kestra-io/kestra/blob/562986ad53b66d16d7d5affff4f920800910bb97/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FPluginDocumentation.java",
      "raw_url": "https://github.com/kestra-io/kestra/raw/562986ad53b66d16d7d5affff4f920800910bb97/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FPluginDocumentation.java",
      "contents_url": "https://api.github.com/repos/kestra-io/kestra/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fkestra%2Fcore%2Fdocs%2FPluginDocumentation.java?ref=562986ad53b66d16d7d5affff4f920800910bb97",
      "patch": "@@ -40,7 +40,8 @@ private PluginDocumentation(RegisteredPlugin plugin) {\n                         .type(entry.getKey());\n                     if (cls.getPackageName().startsWith(this.group)) {\n                         var pluginSubGroup = cls.getPackage().getDeclaredAnnotation(PluginSubGroup.class);\n-                        var subGroupName =  cls.getPackageName().substring(this.group.length() + 1);\n+                        var subGroupName =  cls.getPackageName().length() > this.group.length() ?\n+                            cls.getPackageName().substring(this.group.length() + 1) : \"\";\n                         var subGroupTitle = pluginSubGroup != null ? pluginSubGroup.title() : subGroupName;\n                         var subGroupDescription = pluginSubGroup != null ? pluginSubGroup.description() : null;\n                         // hack to avoid adding the subgroup in the task URL when it's the group to keep search engine indexes",
      "parent_sha": "090a0d2ed957844e9124dc56f0a05d4d38a28e30"
    }
  }
]