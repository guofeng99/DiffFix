[
  {
    "oid": "ff031d40ffa1852f41e32fd64fdd18e1a51eb212",
    "message": "fixed component type dropdown in swagger",
    "date": "2024-06-04T09:22:46Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/ff031d40ffa1852f41e32fd64fdd18e1a51eb212",
    "details": {
      "sha": "58b929637933cd3da8c5706f28757e4a7832d03b",
      "filename": "application/src/main/java/org/thingsboard/server/controller/ComponentDescriptorController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/ff031d40ffa1852f41e32fd64fdd18e1a51eb212/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FComponentDescriptorController.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/ff031d40ffa1852f41e32fd64fdd18e1a51eb212/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FComponentDescriptorController.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FComponentDescriptorController.java?ref=ff031d40ffa1852f41e32fd64fdd18e1a51eb212",
      "patch": "@@ -68,7 +68,7 @@ public ComponentDescriptor getComponentDescriptorByClazz(\n     @RequestMapping(value = \"/components/{componentType}\", method = RequestMethod.GET)\n     @ResponseBody\n     public List<ComponentDescriptor> getComponentDescriptorsByType(\n-            @Parameter(description = \"Type of the Rule Node\", schema = @Schema(allowableValues = {\"ENRICHMENT\", \"FILTER,TRANSFORMATION\", \"ACTION,EXTERNAL\"}, requiredMode = Schema.RequiredMode.REQUIRED))\n+            @Parameter(description = \"Type of the Rule Node\", schema = @Schema(allowableValues = {\"ENRICHMENT\", \"FILTER\", \"TRANSFORMATION\", \"ACTION\", \"EXTERNAL\"}, requiredMode = Schema.RequiredMode.REQUIRED))\n             @PathVariable(\"componentType\") String strComponentType,\n             @Parameter(description = \"Type of the Rule Chain\", schema = @Schema(allowableValues = {\"CORE\", \"EDGE\"}))\n             @RequestParam(value = \"ruleChainType\", required = false) String strRuleChainType) throws ThingsboardException {",
      "parent_sha": "3bbbf8341f7355147c5cf5bd63a571764f0fcd1b"
    }
  },
  {
    "oid": "54ef3aaafa510895ea25c0b647746d5924e9b05e",
    "message": "Merge with master",
    "date": "2023-08-17T11:36:15Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/54ef3aaafa510895ea25c0b647746d5924e9b05e",
    "details": {
      "sha": "3361d516f0d7203b6caf6abb156e58cd011fa2eb",
      "filename": "application/src/test/java/org/thingsboard/server/service/sync/ie/ExportImportServiceSqlTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/54ef3aaafa510895ea25c0b647746d5924e9b05e/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fie%2FExportImportServiceSqlTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/54ef3aaafa510895ea25c0b647746d5924e9b05e/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fie%2FExportImportServiceSqlTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fie%2FExportImportServiceSqlTest.java?ref=54ef3aaafa510895ea25c0b647746d5924e9b05e",
      "patch": "@@ -71,6 +71,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -363,10 +364,10 @@ public void testImportRuleChain_ruleNodesConfigs() throws Exception {\n                 \"var msgType = \\\"POST_TELEMETRY_REQUEST\\\";\\n\" +\n                 \"var someUuid = \\\"\" + someUuid + \"\\\";\\n\" +\n                 \"return { msg: msg, metadata: metadata, msgType: msgType };\");\n-        generatorNode.setConfiguration(mapper.valueToTree(generatorNodeConfig));\n+        generatorNode.setConfiguration(JacksonUtil.valueToTree(generatorNodeConfig));\n         nodes.add(generatorNode);\n         metaData.setNodes(nodes);\n-        ruleChainService.saveRuleChainMetaData(tenantId1, metaData);\n+        ruleChainService.saveRuleChainMetaData(tenantId1, metaData, Function.identity());\n \n         EntityExportData<RuleChain> ruleChainExportData = exportEntity(tenantAdmin1, ruleChain.getId());\n         EntityExportData<Customer> customerExportData = exportEntity(tenantAdmin1, customer.getId());",
      "parent_sha": "80f80496df9ce4c4d1fbb7120b952fa5db910089"
    }
  },
  {
    "oid": "4cfe7441b1ab451833d147dcf1ee283911eeb85e",
    "message": "coaps: x509 - dtls add default values here (1024)",
    "date": "2024-12-12T17:30:50Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/4cfe7441b1ab451833d147dcf1ee283911eeb85e",
    "details": {
      "sha": "063494d63055ce9cffb4e23d0f44d79a07b17a43",
      "filename": "common/coap-server/src/main/java/org/thingsboard/server/coapserver/TbCoapDtlsSettings.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/4cfe7441b1ab451833d147dcf1ee283911eeb85e/common%2Fcoap-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcoapserver%2FTbCoapDtlsSettings.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/4cfe7441b1ab451833d147dcf1ee283911eeb85e/common%2Fcoap-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcoapserver%2FTbCoapDtlsSettings.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Fcoap-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcoapserver%2FTbCoapDtlsSettings.java?ref=4cfe7441b1ab451833d147dcf1ee283911eeb85e",
      "patch": "@@ -69,10 +69,10 @@ public class TbCoapDtlsSettings {\n     @Value(\"${coap.dtls.connection_id_length:}\")\n     private Integer cIdLength;\n \n-    @Value(\"${coap.dtls.max_transmission_unit:}\")\n+    @Value(\"${coap.dtls.max_transmission_unit:1024}\")\n     private Integer maxTransmissionUnit;\n \n-    @Value(\"${coap.dtls.max_fragment_length:}\")\n+    @Value(\"${coap.dtls.max_fragment_length:1024}\")\n     private Integer maxFragmentLength;\n \n     @Bean",
      "parent_sha": "dc316ec10dcc035e6fadbcf6977a6415ad79ba3f"
    }
  },
  {
    "oid": "f5c09d221de6ce6f307edc59e3ee0db39a382d3e",
    "message": "TbMsgMetaData refactored constructor and copy method",
    "date": "2022-01-10T21:47:50Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/f5c09d221de6ce6f307edc59e3ee0db39a382d3e",
    "details": {
      "sha": "8f23a917a27b2516bd802d72c0904f865b13b868",
      "filename": "common/message/src/main/java/org/thingsboard/server/common/msg/TbMsgMetaData.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/f5c09d221de6ce6f307edc59e3ee0db39a382d3e/common%2Fmessage%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcommon%2Fmsg%2FTbMsgMetaData.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/f5c09d221de6ce6f307edc59e3ee0db39a382d3e/common%2Fmessage%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcommon%2Fmsg%2FTbMsgMetaData.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Fmessage%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcommon%2Fmsg%2FTbMsgMetaData.java?ref=f5c09d221de6ce6f307edc59e3ee0db39a382d3e",
      "patch": "@@ -15,9 +15,7 @@\n  */\n package org.thingsboard.server.common.msg;\n \n-import lombok.AllArgsConstructor;\n import lombok.Data;\n-import lombok.NoArgsConstructor;\n \n import java.io.Serializable;\n import java.util.Collections;\n@@ -29,15 +27,18 @@\n  * Created by ashvayka on 13.01.18.\n  */\n @Data\n-@NoArgsConstructor\n public final class TbMsgMetaData implements Serializable {\n \n     public static final TbMsgMetaData EMPTY = new TbMsgMetaData(Collections.emptyMap());\n \n-    private final Map<String, String> data = new ConcurrentHashMap<>();\n+    private final Map<String, String> data;\n+\n+    public TbMsgMetaData() {\n+        this.data = new ConcurrentHashMap<>();\n+    }\n \n     public TbMsgMetaData(Map<String, String> data) {\n-        data.forEach((key, val) -> putValue(key, val));\n+        this.data = new ConcurrentHashMap<>(data);\n     }\n \n     public String getValue(String key) {\n@@ -55,6 +56,6 @@ public Map<String, String> values() {\n     }\n \n     public TbMsgMetaData copy() {\n-        return new TbMsgMetaData(new ConcurrentHashMap<>(data));\n+        return new TbMsgMetaData(data);\n     }\n }",
      "parent_sha": "c4d180eecc3f147bbf35735074b0ce957b31d8f3"
    }
  },
  {
    "oid": "3a21235593443a96bebf12957cef15d898bba2bf",
    "message": "Added saving TenantOAuth2 config in cache",
    "date": "2020-06-24T12:05:56Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/3a21235593443a96bebf12957cef15d898bba2bf",
    "details": {
      "sha": "61c55c9daddef0d93c355302f6a111d373fdb95f",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/oauth2/OAuth2ServiceImpl.java",
      "status": "modified",
      "additions": 18,
      "deletions": 10,
      "changes": 28,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/3a21235593443a96bebf12957cef15d898bba2bf/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Foauth2%2FOAuth2ServiceImpl.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/3a21235593443a96bebf12957cef15d898bba2bf/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Foauth2%2FOAuth2ServiceImpl.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Foauth2%2FOAuth2ServiceImpl.java?ref=3a21235593443a96bebf12957cef15d898bba2bf",
      "patch": "@@ -143,19 +143,27 @@ public OAuth2ClientsParams saveSystemOAuth2ClientsParams(OAuth2ClientsParams oAu\n     public OAuth2ClientsParams saveTenantOAuth2ClientsParams(TenantId tenantId, OAuth2ClientsParams oAuth2ClientsParams) {\n         // TODO what if tenant saves config for several different domain names, do we need to check it\n         validate(oAuth2ClientsParams);\n-        // TODO check by registration ID in system\n \n-        String adminSettingsId = processTenantAdminSettings(tenantId, oAuth2ClientsParams.getDomainName(), oAuth2ClientsParams.getAdminSettingsId());\n-        oAuth2ClientsParams.setAdminSettingsId(adminSettingsId);\n-\n-        List<AttributeKvEntry> attributes = createOAuth2ClientsParamsAttributes(oAuth2ClientsParams);\n+        validateUniqueRegistrationId(oAuth2ClientsParams, tenantId);\n+        lock.lock();\n         try {\n-            // TODO ask if I need .get() here\n-            attributesService.save(tenantId, tenantId, DataConstants.SERVER_SCOPE, attributes).get();\n-        } catch (Exception e) {\n-            log.error(\"Unable to save OAuth2 Client Registration Params to attributes!\", e);\n-            throw new IncorrectParameterException(\"Unable to save OAuth2 Client Registration Params to attributes!\");\n+            String adminSettingsId = processTenantAdminSettings(tenantId, oAuth2ClientsParams.getDomainName(), oAuth2ClientsParams.getAdminSettingsId());\n+            oAuth2ClientsParams.setAdminSettingsId(adminSettingsId);\n+\n+            List<AttributeKvEntry> attributes = createOAuth2ClientsParamsAttributes(oAuth2ClientsParams);\n+            try {\n+                // TODO ask if I need .get() here\n+                attributesService.save(tenantId, tenantId, DataConstants.SERVER_SCOPE, attributes).get();\n+            } catch (Exception e) {\n+                log.error(\"Unable to save OAuth2 Client Registration Params to attributes!\", e);\n+                throw new IncorrectParameterException(\"Unable to save OAuth2 Client Registration Params to attributes!\");\n+            }\n+\n+            clientsParams.put(tenantId, oAuth2ClientsParams);\n+        } finally {\n+            lock.unlock();\n         }\n+\n         return getTenantOAuth2ClientsParams(tenantId);\n     }\n ",
      "parent_sha": "5f1de39fddbb5cc341e91917046fe3f76e93895f"
    }
  },
  {
    "oid": "4dc6b45547b6488fb99e10824264a1df6a69a02f",
    "message": "DefaultAlarmQueryRepository improvements",
    "date": "2020-09-28T08:44:42Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/4dc6b45547b6488fb99e10824264a1df6a69a02f",
    "details": {
      "sha": "e3aa614bfe8daf8200cd3df286497c0e9e7fb7dc",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/sql/query/DefaultAlarmQueryRepository.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/4dc6b45547b6488fb99e10824264a1df6a69a02f/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FDefaultAlarmQueryRepository.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/4dc6b45547b6488fb99e10824264a1df6a69a02f/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FDefaultAlarmQueryRepository.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FDefaultAlarmQueryRepository.java?ref=4dc6b45547b6488fb99e10824264a1df6a69a02f",
      "patch": "@@ -77,7 +77,7 @@ public class DefaultAlarmQueryRepository implements AlarmQueryRepository {\n         alarmFieldColumnMap.put(\"originator\", \"originator_name\");\n     }\n \n-    private static final String SELECT_ORIGINATOR_NAME = \" CASE\" +\n+    private static final String SELECT_ORIGINATOR_NAME = \" COALESCE(CASE\" +\n             \" WHEN a.originator_type = \" + EntityType.TENANT.ordinal() +\n             \" THEN (select title from tenant where id = a.originator_id)\" +\n             \" WHEN a.originator_type = \" + EntityType.CUSTOMER.ordinal() +\n@@ -92,7 +92,7 @@ public class DefaultAlarmQueryRepository implements AlarmQueryRepository {\n             \" THEN (select name from device where id = a.originator_id)\" +\n             \" WHEN a.originator_type = \" + EntityType.ENTITY_VIEW.ordinal() +\n             \" THEN (select name from entity_view where id = a.originator_id)\" +\n-            \" END as originator_name\";\n+            \" END, 'Deleted') as originator_name\";\n \n     private static final String FIELDS_SELECTION = \"select a.id as id,\" +\n             \" a.created_time as created_time,\" +",
      "parent_sha": "e7c1901346615fb01c2a7e6f94fae7ebeb173577"
    }
  },
  {
    "oid": "39e9ab26e3a127d286f87e3916e4813f8281a80e",
    "message": "Refactor: add realistic mapping in originator fields node",
    "date": "2023-04-18T10:46:21Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/39e9ab26e3a127d286f87e3916e4813f8281a80e",
    "details": {
      "sha": "06bff564de713e7d7a0c1c87dc6fb80798f4f311",
      "filename": "rule-engine/rule-engine-components/src/test/java/org/thingsboard/rule/engine/metadata/TbGetOriginatorFieldsNodeTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/39e9ab26e3a127d286f87e3916e4813f8281a80e/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbGetOriginatorFieldsNodeTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/39e9ab26e3a127d286f87e3916e4813f8281a80e/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbGetOriginatorFieldsNodeTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbGetOriginatorFieldsNodeTest.java?ref=39e9ab26e3a127d286f87e3916e4813f8281a80e",
      "patch": "@@ -103,9 +103,7 @@ public void givenConfigWithNullFetchTo_whenInit_thenException() {\n \n     @Test\n     public void givenDefaultConfig_whenInit_thenOK() throws TbNodeException {\n-        // GIVEN\n-\n-        // WHEN\n+        // GIVEN-WHEN\n         node.init(ctxMock, nodeConfiguration);\n \n         // THEN\n@@ -122,9 +120,9 @@ public void givenDefaultConfig_whenInit_thenOK() throws TbNodeException {\n     public void givenCustomConfig_whenInit_thenOK() throws TbNodeException {\n         // GIVEN\n         config.setFieldsMapping(Map.of(\n-                \"sourceField1\", \"targetKey1\",\n-                \"sourceField2\", \"targetKey2\",\n-                \"sourceField3\", \"targetKey3\"));\n+                \"email\", \"originatorEmail\",\n+                \"title\", \"originatorTitle\",\n+                \"country\", \"originatorCountry\"));\n         config.setIgnoreNullStrings(true);\n         config.setFetchTo(FetchTo.DATA);\n         nodeConfiguration = new TbNodeConfiguration(JacksonUtil.valueToTree(config));\n@@ -135,9 +133,9 @@ public void givenCustomConfig_whenInit_thenOK() throws TbNodeException {\n         // THEN\n         assertThat(node.config).isEqualTo(config);\n         assertThat(config.getFieldsMapping()).isEqualTo(Map.of(\n-                \"sourceField1\", \"targetKey1\",\n-                \"sourceField2\", \"targetKey2\",\n-                \"sourceField3\", \"targetKey3\"));\n+                \"email\", \"originatorEmail\",\n+                \"title\", \"originatorTitle\",\n+                \"country\", \"originatorCountry\"));\n         assertThat(config.isIgnoreNullStrings()).isEqualTo(true);\n         assertThat(config.getFetchTo()).isEqualTo(FetchTo.DATA);\n         assertThat(node.fetchTo).isEqualTo(FetchTo.DATA);",
      "parent_sha": "df25091f3c888679a7677eff6f12004566160f29"
    }
  },
  {
    "oid": "93f647b7a799f7b497c88b4e5d74c635c1ab0b19",
    "message": "Update TbLwM2MDtlsBootstrapCertificateVerifier.java",
    "date": "2022-01-20T10:03:14Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/93f647b7a799f7b497c88b4e5d74c635c1ab0b19",
    "details": {
      "sha": "7a6b952ddb60385a9b48b3adacb0962c1cd15b21",
      "filename": "common/transport/lwm2m/src/main/java/org/thingsboard/server/transport/lwm2m/bootstrap/secure/TbLwM2MDtlsBootstrapCertificateVerifier.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/93f647b7a799f7b497c88b4e5d74c635c1ab0b19/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fsecure%2FTbLwM2MDtlsBootstrapCertificateVerifier.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/93f647b7a799f7b497c88b4e5d74c635c1ab0b19/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fsecure%2FTbLwM2MDtlsBootstrapCertificateVerifier.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fsecure%2FTbLwM2MDtlsBootstrapCertificateVerifier.java?ref=93f647b7a799f7b497c88b4e5d74c635c1ab0b19",
      "patch": "@@ -86,7 +86,7 @@ public void init() {\n                 staticCertificateVerifier = new StaticCertificateVerifier(trustedCertificates);\n             }\n         } catch (Exception e) {\n-            log.info(\"Failed to initialize the \");\n+            log.info(\"Failed to initialize the certificate verifier\", e);\n         }\n     }\n ",
      "parent_sha": "39164573678268913a631fbc9abcfaa1e86b5fd2"
    }
  },
  {
    "oid": "bb2ea9105116cf6f3e2b6584e97c67dc25854999",
    "message": "added countEntitiesByTypes to the RestClient",
    "date": "2023-03-13T10:00:33Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/bb2ea9105116cf6f3e2b6584e97c67dc25854999",
    "details": {
      "sha": "7eee546632ec61138c1a3fa1424bc97872fedfe8",
      "filename": "rest-client/src/main/java/org/thingsboard/rest/client/RestClient.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/bb2ea9105116cf6f3e2b6584e97c67dc25854999/rest-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frest%2Fclient%2FRestClient.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/bb2ea9105116cf6f3e2b6584e97c67dc25854999/rest-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frest%2Fclient%2FRestClient.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rest-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frest%2Fclient%2FRestClient.java?ref=bb2ea9105116cf6f3e2b6584e97c67dc25854999",
      "patch": "@@ -34,7 +34,6 @@\n import org.springframework.http.client.support.HttpRequestWrapper;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n-import org.thingsboard.server.common.data.StringUtils;\n import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.RestTemplate;\n import org.thingsboard.common.util.ThingsBoardExecutors;\n@@ -58,6 +57,7 @@\n import org.thingsboard.server.common.data.OtaPackage;\n import org.thingsboard.server.common.data.OtaPackageInfo;\n import org.thingsboard.server.common.data.SaveDeviceWithCredentialsRequest;\n+import org.thingsboard.server.common.data.StringUtils;\n import org.thingsboard.server.common.data.TbResource;\n import org.thingsboard.server.common.data.TbResourceInfo;\n import org.thingsboard.server.common.data.Tenant;\n@@ -1584,6 +1584,13 @@ public Long countEntitiesByQuery(EntityCountQuery query) {\n         return restTemplate.postForObject(baseURL + \"/api/entitiesQuery/count\", query, Long.class);\n     }\n \n+    public Map<Long, EntityType> countEntitiesByTypes(List<EntityType> entityTypes) {\n+        return restTemplate.exchange(\n+                baseURL + \"/api/entitiesTypes/count\",\n+                HttpMethod.POST, new HttpEntity<>(entityTypes), new ParameterizedTypeReference<Map<Long, EntityType>>() {\n+                }).getBody();\n+    }\n+\n     public PageData<EntityData> findEntityDataByQuery(EntityDataQuery query) {\n         return restTemplate.exchange(\n                 baseURL + \"/api/entitiesQuery/find\",",
      "parent_sha": "b936d4841943d4d0b7ea5e72791b53201f7b5bd2"
    }
  },
  {
    "oid": "19b5c59034790060a0cb2b906064ebdfe01cd1f6",
    "message": "fixed kafka node (success if error not null)",
    "date": "2022-03-24T21:03:29Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/19b5c59034790060a0cb2b906064ebdfe01cd1f6",
    "details": {
      "sha": "836497cced02b45a1232a36d2f37fc3993434757",
      "filename": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/kafka/TbKafkaNode.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/19b5c59034790060a0cb2b906064ebdfe01cd1f6/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fkafka%2FTbKafkaNode.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/19b5c59034790060a0cb2b906064ebdfe01cd1f6/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fkafka%2FTbKafkaNode.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fkafka%2FTbKafkaNode.java?ref=19b5c59034790060a0cb2b906064ebdfe01cd1f6",
      "patch": "@@ -158,7 +158,7 @@ public void destroy() {\n     }\n \n     private void processRecord(TbContext ctx, TbMsg msg, RecordMetadata metadata, Exception e) {\n-        if (metadata != null) {\n+        if (e == null) {\n             TbMsg next = processResponse(ctx, msg, metadata);\n             ctx.tellNext(next, TbRelationTypes.SUCCESS);\n         } else {",
      "parent_sha": "19a953428e9ab593522603dce7308f2f4fe61be4"
    }
  },
  {
    "oid": "9f5493945231bc7f3b246f3cf8a18cb3f8668783",
    "message": "JDK 11 fixes",
    "date": "2021-02-12T13:36:32Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/9f5493945231bc7f3b246f3cf8a18cb3f8668783",
    "details": {
      "sha": "c858955bfcf5707954b95b428b8967733c83ef94",
      "filename": "application/src/main/java/org/thingsboard/server/service/edge/rpc/processor/TelemetryProcessor.java",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/9f5493945231bc7f3b246f3cf8a18cb3f8668783/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2Fprocessor%2FTelemetryProcessor.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/9f5493945231bc7f3b246f3cf8a18cb3f8668783/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2Fprocessor%2FTelemetryProcessor.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2Fprocessor%2FTelemetryProcessor.java?ref=9f5493945231bc7f3b246f3cf8a18cb3f8668783",
      "patch": "@@ -21,10 +21,9 @@\n import com.google.common.util.concurrent.SettableFuture;\n import com.google.gson.Gson;\n import com.google.gson.JsonObject;\n-import groovy.lang.Tuple;\n import lombok.extern.slf4j.Slf4j;\n-import org.javatuples.Pair;\n-import org.passay.Rule;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.springframework.stereotype.Component;\n import org.thingsboard.rule.engine.api.msg.DeviceAttributesEventNotificationMsg;\n import org.thingsboard.server.common.data.DataConstants;\n@@ -37,15 +36,13 @@\n import org.thingsboard.server.common.data.id.CustomerId;\n import org.thingsboard.server.common.data.id.DashboardId;\n import org.thingsboard.server.common.data.id.DeviceId;\n-import org.thingsboard.server.common.data.id.DeviceProfileId;\n import org.thingsboard.server.common.data.id.EntityId;\n import org.thingsboard.server.common.data.id.EntityViewId;\n import org.thingsboard.server.common.data.id.RuleChainId;\n import org.thingsboard.server.common.data.id.TenantId;\n import org.thingsboard.server.common.data.id.UserId;\n import org.thingsboard.server.common.data.kv.AttributeKey;\n import org.thingsboard.server.common.data.kv.AttributeKvEntry;\n-import org.thingsboard.server.common.data.rule.RuleChain;\n import org.thingsboard.server.common.msg.TbMsg;\n import org.thingsboard.server.common.msg.TbMsgMetaData;\n import org.thingsboard.server.common.msg.queue.ServiceQueue;\n@@ -145,9 +142,9 @@ private Pair<String, RuleChainId> getDefaultQueueNameAndRuleChainId(TenantId ten\n                 String defaultQueueName = deviceProfile.getDefaultQueueName();\n                 queueName = defaultQueueName != null ? defaultQueueName : ServiceQueue.MAIN;\n             }\n-            return new Pair<>(queueName, ruleChainId);\n+            return new ImmutablePair<>(queueName, ruleChainId);\n         } else {\n-            return new Pair<>(ServiceQueue.MAIN, null);\n+            return new ImmutablePair<>(ServiceQueue.MAIN, null);\n         }\n     }\n \n@@ -157,8 +154,8 @@ private ListenableFuture<Void> processPostTelemetry(TenantId tenantId, EntityId\n             JsonObject json = JsonUtils.getJsonObject(tsKv.getKvList());\n             metaData.putValue(\"ts\", tsKv.getTs() + \"\");\n             Pair<String, RuleChainId> defaultQueueAndRuleChain = getDefaultQueueNameAndRuleChainId(tenantId, entityId);\n-            String queueName = defaultQueueAndRuleChain.getValue0();\n-            RuleChainId ruleChainId = defaultQueueAndRuleChain.getValue1();\n+            String queueName = defaultQueueAndRuleChain.getKey();\n+            RuleChainId ruleChainId = defaultQueueAndRuleChain.getValue();\n             TbMsg tbMsg = TbMsg.newMsg(queueName, SessionMsgType.POST_TELEMETRY_REQUEST.name(), entityId, metaData, gson.toJson(json), ruleChainId, null);\n             tbClusterService.pushMsgToRuleEngine(tenantId, tbMsg.getOriginator(), tbMsg, new TbQueueCallback() {\n                 @Override\n@@ -180,8 +177,8 @@ private ListenableFuture<Void> processPostAttributes(TenantId tenantId, EntityId\n         SettableFuture<Void> futureToSet = SettableFuture.create();\n         JsonObject json = JsonUtils.getJsonObject(msg.getKvList());\n         Pair<String, RuleChainId> defaultQueueAndRuleChain = getDefaultQueueNameAndRuleChainId(tenantId, entityId);\n-        String queueName = defaultQueueAndRuleChain.getValue0();\n-        RuleChainId ruleChainId = defaultQueueAndRuleChain.getValue1();\n+        String queueName = defaultQueueAndRuleChain.getKey();\n+        RuleChainId ruleChainId = defaultQueueAndRuleChain.getValue();\n         TbMsg tbMsg = TbMsg.newMsg(queueName, SessionMsgType.POST_ATTRIBUTES_REQUEST.name(), entityId, metaData, gson.toJson(json), ruleChainId, null);\n         tbClusterService.pushMsgToRuleEngine(tenantId, tbMsg.getOriginator(), tbMsg, new TbQueueCallback() {\n             @Override\n@@ -207,8 +204,8 @@ private ListenableFuture<Void> processAttributesUpdate(TenantId tenantId, Entity\n             @Override\n             public void onSuccess(@Nullable List<Void> voids) {\n                 Pair<String, RuleChainId> defaultQueueAndRuleChain = getDefaultQueueNameAndRuleChainId(tenantId, entityId);\n-                String queueName = defaultQueueAndRuleChain.getValue0();\n-                RuleChainId ruleChainId = defaultQueueAndRuleChain.getValue1();\n+                String queueName = defaultQueueAndRuleChain.getKey();\n+                RuleChainId ruleChainId = defaultQueueAndRuleChain.getValue();\n                 TbMsg tbMsg = TbMsg.newMsg(queueName, DataConstants.ATTRIBUTES_UPDATED, entityId, metaData, gson.toJson(json), ruleChainId, null);\n                 tbClusterService.pushMsgToRuleEngine(tenantId, tbMsg.getOriginator(), tbMsg, new TbQueueCallback() {\n                     @Override",
      "parent_sha": "77769bee6af350f912b8d03300fe7d9f163c6526"
    }
  },
  {
    "oid": "6a759ae061ca025cca9b5dd62b78559857eae8f1",
    "message": "Fix testVcWithCalculatedFields_betweenTenants",
    "date": "2025-03-04T07:17:16Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/6a759ae061ca025cca9b5dd62b78559857eae8f1",
    "details": {
      "sha": "bb0d490ce0ddd4947bcd3509b5e624255d5fc675",
      "filename": "application/src/test/java/org/thingsboard/server/service/sync/vc/VersionControlTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/6a759ae061ca025cca9b5dd62b78559857eae8f1/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fvc%2FVersionControlTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/6a759ae061ca025cca9b5dd62b78559857eae8f1/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fvc%2FVersionControlTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fvc%2FVersionControlTest.java?ref=6a759ae061ca025cca9b5dd62b78559857eae8f1",
      "patch": "@@ -575,7 +575,7 @@ public void testDefaultDeviceProfileVc_betweenTenants_findExisting() throws Exce\n     public void testVcWithCalculatedFields_betweenTenants() throws Exception {\n         Asset asset = createAsset(null, null, \"Asset 1\");\n         Device device = createDevice(null, null, \"Device 1\", \"test1\");\n-        createCalculatedField(\"CalculatedField1\", device.getId(), asset.getId());\n+        CalculatedField calculatedField = createCalculatedField(\"CalculatedField1\", device.getId(), asset.getId());\n         String versionId = createVersion(\"calculated fields of asset and device\", EntityType.ASSET, EntityType.DEVICE, EntityType.DEVICE_PROFILE, EntityType.ASSET_PROFILE);\n \n         loginTenant2();\n@@ -585,16 +585,15 @@ public void testVcWithCalculatedFields_betweenTenants() throws Exception {\n \n         Asset importedAsset = findAsset(asset.getName());\n         Device importedDevice = findDevice(device.getName());\n-        CalculatedField importedCalculatedField = findCalculatedFieldByEntityId(importedDevice.getId());\n         checkImportedEntity(tenantId1, device, tenantId2, importedDevice);\n         checkImportedEntity(tenantId1, asset, tenantId2, importedAsset);\n \n         List<CalculatedField> importedCalculatedFields = findCalculatedFieldsByEntityId(importedDevice.getId());\n         assertThat(importedCalculatedFields).size().isOne();\n         assertThat(importedCalculatedFields.get(0)).satisfies(importedField -> {\n-            assertThat(importedField.getName()).isEqualTo(importedCalculatedField.getName());\n-            assertThat(importedField.getType()).isEqualTo(importedCalculatedField.getType());\n-            assertThat(importedField.getId()).isNotEqualTo(importedCalculatedField.getId());\n+            assertThat(importedField.getName()).isEqualTo(calculatedField.getName());\n+            assertThat(importedField.getType()).isEqualTo(calculatedField.getType());\n+            assertThat(importedField.getId()).isNotEqualTo(calculatedField.getId());\n         });\n     }\n ",
      "parent_sha": "9f2d399f4ca35fe125cd60b3abcdf2e99b1c6524"
    }
  },
  {
    "oid": "01e6ae3709deef8ac9578e03add78563563632a4",
    "message": "Fix widget type sync up",
    "date": "2024-12-17T16:13:03Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/01e6ae3709deef8ac9578e03add78563563632a4",
    "details": {
      "sha": "7c37b0ac543dd413941b3d20b60a00ec78ab225d",
      "filename": "application/src/main/java/org/thingsboard/server/service/edge/rpc/EdgeGrpcSession.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/01e6ae3709deef8ac9578e03add78563563632a4/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/01e6ae3709deef8ac9578e03add78563563632a4/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java?ref=01e6ae3709deef8ac9578e03add78563563632a4",
      "patch": "@@ -135,7 +135,7 @@ public abstract class EdgeGrpcSession implements Closeable {\n     private StreamObserver<RequestMsg> inputStream;\n     private StreamObserver<ResponseMsg> outputStream;\n \n-    private boolean connected;\n+    private volatile boolean connected;\n     private volatile boolean syncCompleted;\n \n     private EdgeVersion edgeVersion;\n@@ -536,13 +536,15 @@ private void onDownlinkResponse(DownlinkResponseMsg msg) {\n \n     public void processHighPriorityEvents() {\n         try {\n-            List<EdgeEvent> highPriorityEvents = new ArrayList<>();\n-            EdgeEvent event;\n-            while ((event = highPriorityQueue.poll()) != null) {\n-                highPriorityEvents.add(event);\n+            if (isConnected() && isSyncCompleted()) {\n+                List<EdgeEvent> highPriorityEvents = new ArrayList<>();\n+                EdgeEvent event;\n+                while ((event = highPriorityQueue.poll()) != null) {\n+                    highPriorityEvents.add(event);\n+                }\n+                List<DownlinkMsg> downlinkMsgsPack = convertToDownlinkMsgsPack(highPriorityEvents);\n+                sendDownlinkMsgsPack(downlinkMsgsPack).get();\n             }\n-            List<DownlinkMsg> downlinkMsgsPack = convertToDownlinkMsgsPack(highPriorityEvents);\n-            sendDownlinkMsgsPack(downlinkMsgsPack).get();\n         } catch (Exception e) {\n             log.error(\"[{}] Failed to process high priority events\", sessionId, e);\n         }",
      "parent_sha": "e4a1ba8a70d244e145c470cb8199aef603eebe51"
    }
  },
  {
    "oid": "dc316ec10dcc035e6fadbcf6977a6415ad79ba3f",
    "message": "coaps: x509 - dtls reuse length variable",
    "date": "2024-12-12T15:38:08Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/dc316ec10dcc035e6fadbcf6977a6415ad79ba3f",
    "details": {
      "sha": "6ebc54323d99874276a6e74b2c62804949713755",
      "filename": "common/coap-server/src/main/java/org/thingsboard/server/coapserver/TbCoapDtlsSettings.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/dc316ec10dcc035e6fadbcf6977a6415ad79ba3f/common%2Fcoap-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcoapserver%2FTbCoapDtlsSettings.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/dc316ec10dcc035e6fadbcf6977a6415ad79ba3f/common%2Fcoap-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcoapserver%2FTbCoapDtlsSettings.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Fcoap-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcoapserver%2FTbCoapDtlsSettings.java?ref=dc316ec10dcc035e6fadbcf6977a6415ad79ba3f",
      "patch": "@@ -123,7 +123,7 @@ public DtlsConnectorConfig dtlsConnectorConfig(Configuration configuration) thro\n         if (maxFragmentLength != null) {\n             Length length = fromLength(maxFragmentLength);\n             if (length != null) {\n-                configBuilder.set(DTLS_MAX_FRAGMENT_LENGTH, fromLength(maxFragmentLength));\n+                configBuilder.set(DTLS_MAX_FRAGMENT_LENGTH, length);\n             }\n         }\n         configBuilder.setAdvancedCertificateVerifier(",
      "parent_sha": "19e0c11b6912dfac2f0b552179ae393eaf51fbf7"
    }
  },
  {
    "oid": "309715641f875b8afd2078c555706d7a6b89dd99",
    "message": "fixed race condition during unreq",
    "date": "2021-08-02T15:41:53Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/309715641f875b8afd2078c555706d7a6b89dd99",
    "details": {
      "sha": "93aaea43ed5c4f1d26077e7ea521262c3bfeb32b",
      "filename": "common/transport/lwm2m/src/main/java/org/thingsboard/server/transport/lwm2m/server/client/LwM2mClientContextImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/309715641f875b8afd2078c555706d7a6b89dd99/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fclient%2FLwM2mClientContextImpl.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/309715641f875b8afd2078c555706d7a6b89dd99/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fclient%2FLwM2mClientContextImpl.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fclient%2FLwM2mClientContextImpl.java?ref=309715641f875b8afd2078c555706d7a6b89dd99",
      "patch": "@@ -93,7 +93,12 @@ public void init() {\n         log.debug(\"Fetched clients from store: {}\", fetchedClients);\n         fetchedClients.forEach(client -> {\n             lwM2mClientsByEndpoint.put(client.getEndpoint(), client);\n-            updateFetchedClient(nodeId, client);\n+            try {\n+                client.lock();\n+                updateFetchedClient(nodeId, client);\n+            } finally {\n+                client.unlock();\n+            }\n         });\n     }\n ",
      "parent_sha": "c6cf1b3a4eeb85657789f3e7f123f245bb40dd27"
    }
  },
  {
    "oid": "fc0fae6c83054dc277c23b58074f73ea67df240f",
    "message": "refactoring: tests EntityView: License Headers",
    "date": "2022-07-05T20:08:46Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/fc0fae6c83054dc277c23b58074f73ea67df240f",
    "details": {
      "sha": "60af48b8d833564b2550a9b5856a63007873a106",
      "filename": "application/src/test/java/org/thingsboard/server/controller/AbstractNotifyEntityTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/fc0fae6c83054dc277c23b58074f73ea67df240f/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/fc0fae6c83054dc277c23b58074f73ea67df240f/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java?ref=fc0fae6c83054dc277c23b58074f73ea67df240f",
      "patch": "@@ -1,12 +1,12 @@\n /**\n  * Copyright \u00a9 2016-2022 The Thingsboard Authors\n- * <p>\n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "parent_sha": "35275d73c3c9076253847a2755f5df65e70b0683"
    }
  },
  {
    "oid": "a44cf6a6867a0a2f963fba3ac6461bdda54662b5",
    "message": "refactoring",
    "date": "2024-09-30T15:00:04Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/a44cf6a6867a0a2f963fba3ac6461bdda54662b5",
    "details": {
      "sha": "d6c8d4f8a1a4794ce8eaf3676613cad7b2ec38e1",
      "filename": "common/transport/coap/src/main/java/org/thingsboard/server/transport/coap/efento/CoapEfentoTransportResource.java",
      "status": "modified",
      "additions": 18,
      "deletions": 26,
      "changes": 44,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/a44cf6a6867a0a2f963fba3ac6461bdda54662b5/common%2Ftransport%2Fcoap%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fcoap%2Fefento%2FCoapEfentoTransportResource.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/a44cf6a6867a0a2f963fba3ac6461bdda54662b5/common%2Ftransport%2Fcoap%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fcoap%2Fefento%2FCoapEfentoTransportResource.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Fcoap%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fcoap%2Fefento%2FCoapEfentoTransportResource.java?ref=a44cf6a6867a0a2f963fba3ac6461bdda54662b5",
      "patch": "@@ -334,8 +334,7 @@ private void addContinuesSample(ProtoChannel protoChannel, int sampleOffset, Jso\n                 values.addProperty(\"pulse_cnt_\" + channelNumber, (double) (startPoint + sampleOffset));\n                 break;\n             case MEASUREMENT_TYPE_IAQ:\n-                values.addProperty(\"iaq_\" + channelNumber, (startPoint + sampleOffset) / IAQ_METADATA_FACTOR);\n-                values.addProperty(\"iaq_metadata_\" + channelNumber, (startPoint + sampleOffset) % IAQ_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"iaq_\", channelNumber, startPoint + sampleOffset, IAQ_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_ELECTRICITY_METER:\n                 values.addProperty(\"watt_hour_\" + channelNumber, (double) (startPoint + sampleOffset));\n@@ -353,31 +352,25 @@ private void addContinuesSample(ProtoChannel protoChannel, int sampleOffset, Jso\n                 values.addProperty(\"distance_mm_\" + channelNumber, (double) (startPoint + sampleOffset));\n                 break;\n             case MEASUREMENT_TYPE_WATER_METER_ACC_MINOR:\n-                values.addProperty(\"water_cnt_acc_minor_\" + channelNumber, (startPoint + sampleOffset) / WATER_METER_ACC_MINOR_METADATA_FACTOR);\n-                values.addProperty(\"water_cnt_acc_minor_metadata_\" + channelNumber, (startPoint + sampleOffset) % WATER_METER_ACC_MINOR_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"water_cnt_acc_minor_\", channelNumber, startPoint + sampleOffset, WATER_METER_ACC_MINOR_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_WATER_METER_ACC_MAJOR:\n-                values.addProperty(\"water_cnt_acc_major_\" + channelNumber, (startPoint + sampleOffset) / WATER_METER_ACC_MAJOR_METADATA_FACTOR);\n-                values.addProperty(\"water_cnt_acc_major_metadata_\" + channelNumber, (startPoint + sampleOffset) % WATER_METER_ACC_MAJOR_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"water_cnt_acc_major_\", channelNumber, startPoint + sampleOffset, WATER_METER_ACC_MAJOR_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_HUMIDITY_ACCURATE:\n                 values.addProperty(\"humidity_relative_\" + channelNumber, (double) (startPoint + sampleOffset) / 10f);\n                 break;\n             case MEASUREMENT_TYPE_STATIC_IAQ:\n-                values.addProperty(\"static_iaq_\" + channelNumber, (startPoint + sampleOffset) / STATIC_IAQ_METADATA_FACTOR);\n-                values.addProperty(\"static_iaq_metadata_\" + channelNumber, (startPoint + sampleOffset) % STATIC_IAQ_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"static_iaq_\", channelNumber, startPoint + sampleOffset, STATIC_IAQ_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_CO2_GAS:\n-                values.addProperty(\"co2_gas_\" + channelNumber, (startPoint + sampleOffset) / CO2_GAS_METADATA_FACTOR);\n-                values.addProperty(\"co2_gas_metadata_\" + channelNumber, (startPoint + sampleOffset) % CO2_GAS_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"co2_gas_\", channelNumber, startPoint + sampleOffset, CO2_GAS_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_CO2_EQUIVALENT:\n-                values.addProperty(\"co2_ppm_\" + channelNumber, (startPoint + sampleOffset) / CO2_EQUIVALENT_METADATA_FACTOR);\n-                values.addProperty(\"co2_ppm_metadata_\" + channelNumber, (startPoint + sampleOffset) % CO2_EQUIVALENT_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"co2_ppm_\", channelNumber, startPoint + sampleOffset, CO2_EQUIVALENT_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_BREATH_VOC:\n-                values.addProperty(\"breath_voc_ppm_\" + channelNumber, (startPoint + sampleOffset) / BREATH_VOC_METADATA_FACTOR);\n-                values.addProperty(\"breath_voc_ppm_metadata_\" + channelNumber, (startPoint + sampleOffset) % BREATH_VOC_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"breath_voc_\", channelNumber, startPoint + sampleOffset, BREATH_VOC_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_PERCENTAGE:\n                 values.addProperty(\"percentage_\" + channelNumber, (double) (startPoint + sampleOffset) / 100f);\n@@ -389,28 +382,22 @@ private void addContinuesSample(ProtoChannel protoChannel, int sampleOffset, Jso\n                 values.addProperty(\"current_\" + channelNumber, (double) (startPoint + sampleOffset));\n                 break;\n             case MEASUREMENT_TYPE_PULSE_CNT_ACC_MINOR:\n-                values.addProperty(\"pulse_cnt_acc_minor_\" + channelNumber, (startPoint + sampleOffset) / PULSE_CNT_ACC_MINOR_METADATA_FACTOR);\n-                values.addProperty(\"pulse_cnt_acc_minor_metadata_\" + channelNumber, (startPoint + sampleOffset) % PULSE_CNT_ACC_MINOR_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"pulse_cnt_acc_minor_\", channelNumber, startPoint + sampleOffset, PULSE_CNT_ACC_MINOR_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_PULSE_CNT_ACC_MAJOR:\n-                values.addProperty(\"pulse_cnt_acc_major_\" + channelNumber, (startPoint + sampleOffset) / PULSE_CNT_ACC_MAJOR_METADATA_FACTOR);\n-                values.addProperty(\"pulse_cnt_acc_major_metadata_\" + channelNumber, (startPoint + sampleOffset) % PULSE_CNT_ACC_MAJOR_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"pulse_cnt_acc_major_\", channelNumber, startPoint + sampleOffset, PULSE_CNT_ACC_MAJOR_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_ELEC_METER_ACC_MINOR:\n-                values.addProperty(\"elec_meter_acc_minor_\" + channelNumber, (startPoint + sampleOffset) / ELEC_METER_ACC_MINOR_METADATA_FACTOR);\n-                values.addProperty(\"elec_meter_acc_minor_metadata_\" + channelNumber, (startPoint + sampleOffset) % ELEC_METER_ACC_MINOR_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"elec_meter_acc_minor_\", channelNumber, startPoint + sampleOffset, ELEC_METER_ACC_MINOR_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_ELEC_METER_ACC_MAJOR:\n-                values.addProperty(\"elec_meter_acc_major_\" + channelNumber, (startPoint + sampleOffset) / ELEC_METER_ACC_MAJOR_METADATA_FACTOR);\n-                values.addProperty(\"elec_meter_acc_major_metadata_\" + channelNumber, (startPoint + sampleOffset) % ELEC_METER_ACC_MAJOR_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"elec_meter_acc_major_\", channelNumber, startPoint + sampleOffset, ELEC_METER_ACC_MAJOR_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_PULSE_CNT_ACC_WIDE_MINOR:\n-                values.addProperty(\"pulse_cnt_acc_wide_minor_\" + channelNumber, (startPoint + sampleOffset) / PULSE_CNT_ACC_WIDE_MINOR_METADATA_FACTOR);\n-                values.addProperty(\"pulse_cnt_acc_wide_minor_metadata_\" + channelNumber, (startPoint + sampleOffset) % PULSE_CNT_ACC_WIDE_MINOR_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"pulse_cnt_acc_wide_minor_\", channelNumber, startPoint + sampleOffset, PULSE_CNT_ACC_WIDE_MINOR_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_PULSE_CNT_ACC_WIDE_MAJOR:\n-                values.addProperty(\"pulse_cnt_acc_wide_major_\" + channelNumber, (startPoint + sampleOffset) / PULSE_CNT_ACC_WIDE_MAJOR_METADATA_FACTOR);\n-                values.addProperty(\"pulse_cnt_acc_wide_major_metadata_\" + channelNumber, (startPoint + sampleOffset) % PULSE_CNT_ACC_WIDE_MAJOR_METADATA_FACTOR);\n+                addPulseCounterProperties(values, \"pulse_cnt_acc_wide_major_\", channelNumber, startPoint + sampleOffset, PULSE_CNT_ACC_WIDE_MAJOR_METADATA_FACTOR);\n                 break;\n             case MEASUREMENT_TYPE_CURRENT_PRECISE:\n                 values.addProperty(\"current_precise_\" + channelNumber, (double) (startPoint + sampleOffset));\n@@ -425,6 +412,11 @@ private void addContinuesSample(ProtoChannel protoChannel, int sampleOffset, Jso\n         }\n     }\n \n+    private void addPulseCounterProperties(JsonObject values, String prefix, int channelNumber, int value, int metadataFactor) {\n+        values.addProperty(prefix + \"_\" + channelNumber, value / metadataFactor);\n+        values.addProperty(prefix + \"_metadata_\" + channelNumber, value % metadataFactor);\n+    }\n+\n     private void calculatePulseCounterTotalValue(JsonObject value, PulseCounterType pulseCounterType) {\n         Set<String> keys = value.keySet();\n         Optional<String> major = keys.stream().filter(s -> s.startsWith(pulseCounterType.getPrefix() + \"major_\")).findAny();",
      "parent_sha": "6a9f8e31fd6d82275b190f999feefafcb3df0b28"
    }
  },
  {
    "oid": "52c04a4e02f59a94d4061ad3f5b7daf6fe8fe3ee",
    "message": "refactored getOwnerName",
    "date": "2025-03-12T10:00:19Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/52c04a4e02f59a94d4061ad3f5b7daf6fe8fe3ee",
    "details": {
      "sha": "ab7fb3acff0d28a092b793cc224f0b1bc9ec5ed2",
      "filename": "common/edqs/src/main/java/org/thingsboard/server/edqs/repo/TenantRepo.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/52c04a4e02f59a94d4061ad3f5b7daf6fe8fe3ee/common%2Fedqs%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fedqs%2Frepo%2FTenantRepo.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/52c04a4e02f59a94d4061ad3f5b7daf6fe8fe3ee/common%2Fedqs%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fedqs%2Frepo%2FTenantRepo.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Fedqs%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fedqs%2Frepo%2FTenantRepo.java?ref=52c04a4e02f59a94d4061ad3f5b7daf6fe8fe3ee",
      "patch": "@@ -422,19 +422,19 @@ public RelationsRepo getRelations(RelationTypeGroup relationTypeGroup) {\n     }\n \n     public String getOwnerName(EntityId ownerId) {\n-        if (ownerId == null || (EntityType.CUSTOMER.equals(ownerId.getEntityType()) && CustomerId.NULL_UUID.equals(ownerId.getId()))) {\n-            ownerId = tenantId;\n+        if (ownerId == null || (ownerId.getEntityType() == EntityType.CUSTOMER && ownerId.isNullUid())) {\n+            return getOwnerEntityName(tenantId);\n         }\n-        return getEntityName(ownerId);\n+        return getOwnerEntityName(ownerId);\n     }\n \n-    private String getEntityName(EntityId entityId) {\n+    private String getOwnerEntityName(EntityId entityId) {\n         EntityType entityType = entityId.getEntityType();\n-        if (entityType == EntityType.TENANT && entityId.getId().equals(TenantId.NULL_UUID)) {\n-            return \"\";\n-        }\n         return switch (entityType) {\n-            case CUSTOMER, TENANT -> getEntityMap(entityType).get(entityId.getId()).getFields().getName();\n+            case CUSTOMER, TENANT -> {\n+                EntityFields fields = getEntityMap(entityType).get(entityId.getId()).getFields();\n+                yield fields != null ? fields.getName() : \"\";\n+            }\n             default -> throw new RuntimeException(\"Unsupported entity type: \" + entityType);\n         };\n     }",
      "parent_sha": "760d1cb2801c99c64a963bc168bf7fce562a73f8"
    }
  },
  {
    "oid": "540ccd0cd414baeab2b6253eb8831ec5c3fd6244",
    "message": "upgrade: clear cache - //do not break to show explicit calls for next versions",
    "date": "2021-11-09T16:10:29Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/540ccd0cd414baeab2b6253eb8831ec5c3fd6244",
    "details": {
      "sha": "1456b3f975596d906f380636d45cc6fb7098ac5e",
      "filename": "application/src/main/java/org/thingsboard/server/service/install/update/DefaultCacheCleanupService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/540ccd0cd414baeab2b6253eb8831ec5c3fd6244/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2Fupdate%2FDefaultCacheCleanupService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/540ccd0cd414baeab2b6253eb8831ec5c3fd6244/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2Fupdate%2FDefaultCacheCleanupService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2Fupdate%2FDefaultCacheCleanupService.java?ref=540ccd0cd414baeab2b6253eb8831ec5c3fd6244",
      "patch": "@@ -44,7 +44,7 @@ public void clearCache(String fromVersion) throws Exception {\n             case \"3.0.1\":\n                 log.info(\"Clear cache to upgrade from version 3.0.1 to 3.1.0 ...\");\n                 clearAllCaches();\n-                break;\n+                //do not break to show explicit calls for next versions\n             case \"3.1.1\":\n                 log.info(\"Clear cache to upgrade from version 3.1.1 to 3.2.0 ...\");\n                 clearCacheByName(\"devices\");",
      "parent_sha": "1fa4aff5dc8373a17857e50d0a5dba81fe648b53"
    }
  },
  {
    "oid": "7f32c10d77fc9cc6b5e6798ee358df43f4f02ceb",
    "message": "Fix initialization error for LwM2M Bootstrap mode",
    "date": "2022-01-20T12:40:12Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/7f32c10d77fc9cc6b5e6798ee358df43f4f02ceb",
    "details": {
      "sha": "183febcc79b74a149421cb32fe25779c37fe9ffd",
      "filename": "common/transport/lwm2m/src/main/java/org/thingsboard/server/transport/lwm2m/bootstrap/LwM2MTransportBootstrapService.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/7f32c10d77fc9cc6b5e6798ee358df43f4f02ceb/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2FLwM2MTransportBootstrapService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/7f32c10d77fc9cc6b5e6798ee358df43f4f02ceb/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2FLwM2MTransportBootstrapService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2FLwM2MTransportBootstrapService.java?ref=7f32c10d77fc9cc6b5e6798ee358df43f4f02ceb",
      "patch": "@@ -40,6 +40,7 @@\n \n import static org.eclipse.californium.scandium.config.DtlsConfig.DTLS_RECOMMENDED_CIPHER_SUITES_ONLY;\n import static org.eclipse.californium.scandium.config.DtlsConfig.DTLS_RECOMMENDED_CURVES_ONLY;\n+import static org.thingsboard.server.transport.lwm2m.server.DefaultLwM2mTransportService.PSK_CIPHER_SUITES;\n import static org.thingsboard.server.transport.lwm2m.server.DefaultLwM2mTransportService.RPK_OR_X509_CIPHER_SUITES;\n import static org.thingsboard.server.transport.lwm2m.server.LwM2MNetworkConfig.getCoapConfig;\n \n@@ -48,7 +49,6 @@\n @TbLwM2mBootstrapTransportComponent\n @RequiredArgsConstructor\n public class LwM2MTransportBootstrapService {\n-    private boolean pskMode = false;\n \n     private final LwM2MTransportServerConfig serverConfig;\n     private final LwM2MTransportBootstrapConfig bootstrapConfig;\n@@ -86,7 +86,7 @@ public LeshanBootstrapServer getLhBootstrapServer() {\n         DtlsConnectorConfig.Builder dtlsConfig = new DtlsConnectorConfig.Builder(getCoapConfig(bootstrapConfig.getPort(), bootstrapConfig.getSecurePort(), serverConfig));\n         dtlsConfig.set(DTLS_RECOMMENDED_CURVES_ONLY, serverConfig.isRecommendedSupportedGroups());\n         dtlsConfig.set(DTLS_RECOMMENDED_CIPHER_SUITES_ONLY, serverConfig.isRecommendedCiphers());\n-        dtlsConfig.setAsList(DtlsConfig.DTLS_CIPHER_SUITES, this.pskMode ? DefaultLwM2mTransportService.PSK_CIPHER_SUITES : DefaultLwM2mTransportService.RPK_OR_X509_CIPHER_SUITES);\n+\n         setServerWithCredentials(builder, dtlsConfig);\n \n         /* Set DTLS Config */\n@@ -112,13 +112,13 @@ private void setServerWithCredentials(LeshanBootstrapServerBuilder builder, Dtls\n             builder.setPublicKey(sslCredentials.getPublicKey());\n             builder.setPrivateKey(sslCredentials.getPrivateKey());\n             builder.setCertificateChain(sslCredentials.getCertificateChain());\n-            dtlsConfig.setAsList(DtlsConfig.DTLS_CIPHER_SUITES, this.pskMode ? DefaultLwM2mTransportService.PSK_CIPHER_SUITES : DefaultLwM2mTransportService.RPK_OR_X509_CIPHER_SUITES);\n             dtlsConfig.setAdvancedCertificateVerifier(certificateVerifier);\n+            dtlsConfig.setAsList(DtlsConfig.DTLS_CIPHER_SUITES, RPK_OR_X509_CIPHER_SUITES);\n         } else {\n             /* by default trust all */\n             builder.setTrustedCertificates(new X509Certificate[0]);\n             log.info(\"Unable to load X509 files for BootStrapServer\");\n-            this.pskMode = true;\n+            dtlsConfig.setAsList(DtlsConfig.DTLS_CIPHER_SUITES, PSK_CIPHER_SUITES);\n         }\n     }\n }",
      "parent_sha": "fc280254dd103e2e5675a97de05a49296f2b8f1f"
    }
  },
  {
    "oid": "3c6117bf5c0665776238de0c127431bd0634cc42",
    "message": "Fix upgrade",
    "date": "2020-08-05T10:09:15Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/3c6117bf5c0665776238de0c127431bd0634cc42",
    "details": {
      "sha": "fd153f67fd73c282cc7d68b2a24af5c93329e2de",
      "filename": "application/src/main/java/org/thingsboard/server/service/install/update/DefaultDataUpdateService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/3c6117bf5c0665776238de0c127431bd0634cc42/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2Fupdate%2FDefaultDataUpdateService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/3c6117bf5c0665776238de0c127431bd0634cc42/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2Fupdate%2FDefaultDataUpdateService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2Fupdate%2FDefaultDataUpdateService.java?ref=3c6117bf5c0665776238de0c127431bd0634cc42",
      "patch": "@@ -166,7 +166,7 @@ private ListenableFuture<List<Void>> updateEntityViewLatestTelemetry(EntityView\n                 ListenableFuture<List<Void>> saveFuture = tsService.saveLatest(TenantId.SYS_TENANT_ID, entityId, latestValues);\n                 return saveFuture;\n             }\n-            return null;\n+            return Futures.immediateFuture(null);\n         }, MoreExecutors.directExecutor());\n     }\n ",
      "parent_sha": "59877632e7612f266da7537893dd6e9b485c84de"
    }
  },
  {
    "oid": "be608445eb9960c3e198596b3eeeeda837ee4857",
    "message": "minor improvements due to comments",
    "date": "2024-07-04T11:35:53Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/be608445eb9960c3e198596b3eeeeda837ee4857",
    "details": {
      "sha": "eabec663a3f5783ac701b38bb8896799050f7f74",
      "filename": "application/src/main/java/org/thingsboard/server/service/queue/DefaultTbClusterService.java",
      "status": "modified",
      "additions": 13,
      "deletions": 16,
      "changes": 29,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/be608445eb9960c3e198596b3eeeeda837ee4857/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fqueue%2FDefaultTbClusterService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/be608445eb9960c3e198596b3eeeeda837ee4857/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fqueue%2FDefaultTbClusterService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fqueue%2FDefaultTbClusterService.java?ref=be608445eb9960c3e198596b3eeeeda837ee4857",
      "patch": "@@ -359,7 +359,7 @@ public void onResourceChange(TbResourceInfo resource, TbQueueCallback callback)\n     @Override\n     public void onResourceDeleted(TbResourceInfo resource, TbQueueCallback callback) {\n         if (resource.getResourceType() == ResourceType.LWM2M_MODEL) {\n-            log.trace(\"[{}] Processing delete resource\", resource);\n+            log.trace(\"[{}][{}][{}] Processing delete resource\", resource.getTenantId(), resource.getResourceType(), resource.getResourceKey());\n             TransportProtos.ResourceDeleteMsg resourceDeleteMsg = TransportProtos.ResourceDeleteMsg.newBuilder()\n                     .setTenantIdMSB(resource.getTenantId().getId().getMostSignificantBits())\n                     .setTenantIdLSB(resource.getTenantId().getId().getLeastSignificantBits())\n@@ -390,8 +390,19 @@ private void broadcastEntityDeleteToTransport(TenantId tenantId, EntityId entity\n     }\n \n     private void broadcast(ToTransportMsg transportMsg, TbQueueCallback callback) {\n-        TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> toTransportNfProducer = producerProvider.getTransportNotificationsMsgProducer();\n         Set<String> tbTransportServices = partitionService.getAllServiceIds(ServiceType.TB_TRANSPORT);\n+        broadcast(transportMsg, tbTransportServices, callback);\n+    }\n+\n+    private void broadcast(ToTransportMsg transportMsg, String transportType, TbQueueCallback callback) {\n+        Set<String> tbTransportServices = partitionService.getAllServices(ServiceType.TB_TRANSPORT).stream()\n+                .filter(info -> info.getTransportsList().contains(transportType))\n+                .map(TransportProtos.ServiceInfo::getServiceId).collect(Collectors.toSet());\n+        broadcast(transportMsg, tbTransportServices, callback);\n+    }\n+\n+    private void broadcast(ToTransportMsg transportMsg, Set<String> tbTransportServices, TbQueueCallback callback) {\n+        TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> toTransportNfProducer = producerProvider.getTransportNotificationsMsgProducer();\n         TbQueueCallback proxyCallback = callback != null ? new MultipleTbQueueCallbackWrapper(tbTransportServices.size(), callback) : null;\n         for (String transportServiceId : tbTransportServices) {\n             TopicPartitionInfo tpi = topicService.getNotificationsTopic(ServiceType.TB_TRANSPORT, transportServiceId);\n@@ -400,20 +411,6 @@ private void broadcast(ToTransportMsg transportMsg, TbQueueCallback callback) {\n         }\n     }\n \n-    private void broadcast(ToTransportMsg transportMsg, String transportType, TbQueueCallback callback) {\n-        TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> toTransportNfProducer = producerProvider.getTransportNotificationsMsgProducer();\n-        Set<TransportProtos.ServiceInfo> tbTransportInfos = partitionService.getAllServices(ServiceType.TB_TRANSPORT);\n-        TbQueueCallback proxyCallback = callback != null ? new MultipleTbQueueCallbackWrapper(tbTransportInfos.size(), callback) : null;\n-        tbTransportInfos.stream()\n-                .filter(info -> info.getTransportsList().contains(transportType))\n-                .map(TransportProtos.ServiceInfo::getServiceId)\n-                .forEach(transportServiceId -> {\n-                    TopicPartitionInfo tpi = topicService.getNotificationsTopic(ServiceType.TB_TRANSPORT, transportServiceId);\n-                    toTransportNfProducer.send(tpi, new TbProtoQueueMsg<>(UUID.randomUUID(), transportMsg), proxyCallback);\n-                    toTransportNfs.incrementAndGet();\n-                });\n-    }\n-\n     @Override\n     public void onEdgeEventUpdate(TenantId tenantId, EdgeId edgeId) {\n         log.trace(\"[{}] Processing edge {} event update \", tenantId, edgeId);",
      "parent_sha": "92845f60b6e4f50624b8edf1a01d8c1b6840a0f2"
    }
  },
  {
    "oid": "9899b8d9f4e6564c4365df0f05c08cdcee9f8153",
    "message": "reverted logic to set RPC status SUCCESSFUL even if it undelivered",
    "date": "2023-06-07T12:24:33Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/9899b8d9f4e6564c4365df0f05c08cdcee9f8153",
    "details": {
      "sha": "477e161ae1a0c316d9d34b1309575b999e7e0bf6",
      "filename": "application/src/main/java/org/thingsboard/server/actors/device/DeviceActorMessageProcessor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/9899b8d9f4e6564c4365df0f05c08cdcee9f8153/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/9899b8d9f4e6564c4365df0f05c08cdcee9f8153/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java?ref=9899b8d9f4e6564c4365df0f05c08cdcee9f8153",
      "patch": "@@ -594,19 +594,11 @@ private void processRpcResponses(TbActorCtx context, SessionInfoProto sessionInf\n             boolean delivered = requestMd.isDelivered();\n             boolean hasError = StringUtils.isNotEmpty(responseMsg.getError());\n             try {\n-                String payload;\n-                if (hasError) {\n-                    payload = responseMsg.getError();\n-                } else if (delivered) {\n-                    payload = responseMsg.getPayload();\n-                } else {\n-                    payload = \"Received response for undelivered RPC: \" + responseMsg.getPayload();\n-                }\n+                String payload = hasError ? responseMsg.getError() : responseMsg.getPayload();\n                 systemContext.getTbCoreDeviceRpcService().processRpcResponseFromDeviceActor(\n-                        new FromDeviceRpcResponse(toDeviceRequestMsg.getId(),\n-                                payload, null));\n+                        new FromDeviceRpcResponse(toDeviceRequestMsg.getId(), payload, null));\n                 if (toDeviceRequestMsg.isPersisted()) {\n-                    RpcStatus status = hasError || !delivered ? RpcStatus.FAILED : RpcStatus.SUCCESSFUL;\n+                    RpcStatus status = hasError ? RpcStatus.FAILED : RpcStatus.SUCCESSFUL;\n                     JsonNode response;\n                     try {\n                         response = JacksonUtil.toJsonNode(payload);",
      "parent_sha": "138128d83751f21e1a76bd8032e2eb868b0cfc2e"
    }
  },
  {
    "oid": "38f64a7ac36286c8d20731c7d19b8823ea7c183d",
    "message": "refactoring test after code review",
    "date": "2021-11-26T14:45:41Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/38f64a7ac36286c8d20731c7d19b8823ea7c183d",
    "details": {
      "sha": "2c5d8b9feac3cb66017010448b0e1e7c46972bc6",
      "filename": "dao/src/test/java/org/thingsboard/server/dao/service/timeseries/BaseTimeseriesServiceTest.java",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/38f64a7ac36286c8d20731c7d19b8823ea7c183d/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2Ftimeseries%2FBaseTimeseriesServiceTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/38f64a7ac36286c8d20731c7d19b8823ea7c183d/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2Ftimeseries%2FBaseTimeseriesServiceTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2Ftimeseries%2FBaseTimeseriesServiceTest.java?ref=38f64a7ac36286c8d20731c7d19b8823ea7c183d",
      "patch": "@@ -166,12 +166,13 @@ public void testFindByQueryAscOrder() throws Exception {\n     }\n \n     @Test\n-    public void testFindByQueryOneMilisecondPeriod() throws Exception {\n+    public void testFindByQuery_whenPeriodEqualsOneMilisecondPeriod() throws Exception {\n         DeviceId deviceId = new DeviceId(Uuids.timeBased());\n+        saveEntries(deviceId, TS-1);\n         saveEntries(deviceId, TS);\n+        saveEntries(deviceId, TS+1);\n \n-        List<ReadTsKvQuery> queries = new ArrayList<>();\n-        queries.add(new BaseReadTsKvQuery(LONG_KEY, TS, TS, 1, 1, Aggregation.COUNT, DESC_ORDER));\n+        List<ReadTsKvQuery> queries = List.of(new BaseReadTsKvQuery(LONG_KEY, TS, TS, 1, 1, Aggregation.COUNT, DESC_ORDER));\n \n         List<TsKvEntry> entries = tsService.findAll(tenantId, deviceId, queries).get();\n         Assert.assertEquals(1, entries.size());\n@@ -187,12 +188,13 @@ public void testFindByQueryOneMilisecondPeriod() throws Exception {\n     @Test\n     public void testFindByQuery_whenPeriodEqualsInterval() throws Exception {\n         DeviceId deviceId = new DeviceId(Uuids.timeBased());\n+        saveEntries(deviceId, TS-1);\n         for (long i=TS; i<= TS + 10L; i++) {\n             saveEntries(deviceId, i);\n         }\n+        saveEntries(deviceId, TS+1);\n \n-        List<ReadTsKvQuery> queries = new ArrayList<>();\n-        queries.add(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 10, 11, 1, Aggregation.COUNT, DESC_ORDER));\n+        List<ReadTsKvQuery> queries = List.of(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 10, 11, 1, Aggregation.COUNT, DESC_ORDER));\n \n         List<TsKvEntry> entries = tsService.findAll(tenantId, deviceId, queries).get();\n         Assert.assertEquals(1, entries.size());\n@@ -208,12 +210,13 @@ public void testFindByQuery_whenPeriodEqualsInterval() throws Exception {\n     @Test\n     public void testFindByQuery_whenPeriodHaveTwoIntervalWithEqualsLength() throws Exception {\n         DeviceId deviceId = new DeviceId(Uuids.timeBased());\n+        saveEntries(deviceId, TS-1);\n         for (long i=TS; i<= TS + 10L; i++) {\n             saveEntries(deviceId, i);\n         }\n+        saveEntries(deviceId, TS+1);\n \n-        List<ReadTsKvQuery> queries = new ArrayList<>();\n-        queries.add(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 9, 5, 1, Aggregation.COUNT, DESC_ORDER));\n+        List<ReadTsKvQuery> queries = List.of(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 9, 5, 1, Aggregation.COUNT, DESC_ORDER));\n \n         List<TsKvEntry> entries = tsService.findAll(tenantId, deviceId, queries).get();\n         Assert.assertEquals(2, entries.size());\n@@ -231,12 +234,13 @@ public void testFindByQuery_whenPeriodHaveTwoIntervalWithEqualsLength() throws E\n     @Test\n     public void testFindByQuery_whenPeriodHaveTwoInterval_whereSecondShorterThanFirst() throws Exception {\n         DeviceId deviceId = new DeviceId(Uuids.timeBased());\n+        saveEntries(deviceId, TS-1);\n         for (long i=TS; i<= TS + 8L; i++) {\n             saveEntries(deviceId, i);\n         }\n+        saveEntries(deviceId, TS+1);\n \n-        List<ReadTsKvQuery> queries = new ArrayList<>();\n-        queries.add(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 7, 5, 1, Aggregation.COUNT, DESC_ORDER));\n+        List<ReadTsKvQuery> queries = List.of(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 7, 5, 1, Aggregation.COUNT, DESC_ORDER));\n \n         List<TsKvEntry> entries = tsService.findAll(tenantId, deviceId, queries).get();\n         Assert.assertEquals(2, entries.size());\n@@ -258,8 +262,7 @@ public void testFindByQuery_whenPeriodHaveTwoIntervalWithEqualsLength_whereNotAl\n             saveEntries(deviceId, i);\n         }\n \n-        List<ReadTsKvQuery> queries = new ArrayList<>();\n-        queries.add(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 9, 5, 1, Aggregation.COUNT, DESC_ORDER));\n+        List<ReadTsKvQuery> queries = List.of(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 9, 5, 1, Aggregation.COUNT, DESC_ORDER));\n \n         List<TsKvEntry> entries = tsService.findAll(tenantId, deviceId, queries).get();\n         Assert.assertEquals(2, entries.size());\n@@ -281,8 +284,7 @@ public void testFindByQuery_whenPeriodHaveTwoInterval_whereSecondShorterThanFirs\n             saveEntries(deviceId, i);\n         }\n \n-        List<ReadTsKvQuery> queries = new ArrayList<>();\n-        queries.add(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 7, 5, 1, Aggregation.COUNT, DESC_ORDER));\n+        List<ReadTsKvQuery> queries = List.of(new BaseReadTsKvQuery(LONG_KEY, TS, TS + 7, 5, 1, Aggregation.COUNT, DESC_ORDER));\n \n         List<TsKvEntry> entries = tsService.findAll(tenantId, deviceId, queries).get();\n         Assert.assertEquals(2, entries.size());",
      "parent_sha": "5468d27db8c17a43bf81af664856e9cdb8802415"
    }
  },
  {
    "oid": "020b158e8650a0f0a70d1fac70c385a48c0fad5f",
    "message": "Fix merge of alarms",
    "date": "2020-07-28T11:43:45Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/020b158e8650a0f0a70d1fac70c385a48c0fad5f",
    "details": {
      "sha": "1f7ab2a04b0bd54e399ceb494420477535c88bbd",
      "filename": "application/src/main/java/org/thingsboard/server/service/subscription/TbAlarmDataSubCtx.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/020b158e8650a0f0a70d1fac70c385a48c0fad5f/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsubscription%2FTbAlarmDataSubCtx.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/020b158e8650a0f0a70d1fac70c385a48c0fad5f/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsubscription%2FTbAlarmDataSubCtx.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsubscription%2FTbAlarmDataSubCtx.java?ref=020b158e8650a0f0a70d1fac70c385a48c0fad5f",
      "patch": "@@ -128,7 +128,7 @@ public PageData<AlarmData> setAndMergeAlarmsData(PageData<AlarmData> alarms) {\n             }\n         }\n         alarmsMap.clear();\n-        alarmsMap.putAll(alarms.getData().stream().collect(Collectors.toMap(AlarmData::getId, Function.identity())));\n+        alarmsMap.putAll(alarms.getData().stream().collect(Collectors.toMap(AlarmData::getId, Function.identity(), (a, b) -> a)));\n         return this.alarms;\n     }\n ",
      "parent_sha": "374cf2a14c311d9bab6f852e2bc083af24c066ec"
    }
  },
  {
    "oid": "74a69d8a1e26c124ed1ce921ad4536fc32342443",
    "message": "test for sync Edge",
    "date": "2020-10-05T09:02:20Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/74a69d8a1e26c124ed1ce921ad4536fc32342443",
    "details": {
      "sha": "a32754b4180775c04cd677b094d1df8686a3a187",
      "filename": "application/src/test/java/org/thingsboard/server/controller/BaseEdgeControllerTest.java",
      "status": "modified",
      "additions": 57,
      "deletions": 4,
      "changes": 61,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/74a69d8a1e26c124ed1ce921ad4536fc32342443/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseEdgeControllerTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/74a69d8a1e26c124ed1ce921ad4536fc32342443/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseEdgeControllerTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseEdgeControllerTest.java?ref=74a69d8a1e26c124ed1ce921ad4536fc32342443",
      "patch": "@@ -23,17 +23,20 @@\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n-import org.thingsboard.server.common.data.Customer;\n-import org.thingsboard.server.common.data.EntitySubtype;\n-import org.thingsboard.server.common.data.Tenant;\n-import org.thingsboard.server.common.data.User;\n+import org.thingsboard.server.common.data.*;\n+import org.thingsboard.server.common.data.asset.Asset;\n import org.thingsboard.server.common.data.edge.Edge;\n import org.thingsboard.server.common.data.id.CustomerId;\n+import org.thingsboard.server.common.data.id.EdgeId;\n import org.thingsboard.server.common.data.id.TenantId;\n import org.thingsboard.server.common.data.page.TextPageData;\n import org.thingsboard.server.common.data.page.TextPageLink;\n import org.thingsboard.server.common.data.security.Authority;\n import org.thingsboard.server.dao.model.ModelConstants;\n+import org.thingsboard.server.edge.imitator.EdgeImitator;\n+import org.thingsboard.server.gen.edge.AssetUpdateMsg;\n+import org.thingsboard.server.gen.edge.DeviceUpdateMsg;\n+import org.thingsboard.server.gen.edge.RuleChainUpdateMsg;\n \n import java.util.ArrayList;\n import java.util.Collections;\n@@ -641,4 +644,54 @@ public void testFindCustomerEdgesByType() throws Exception {\n         Assert.assertEquals(0, pageData.getData().size());\n     }\n \n+    @Test\n+    public void testSyncEdge() throws Exception {\n+        Edge edge = doPost(\"/api/edge\", constructEdge(\"Test Edge\", \"test\"), Edge.class);\n+\n+        Device device = new Device();\n+        device.setName(\"Edge Device 1\");\n+        device.setType(\"test\");\n+        Device savedDevice = doPost(\"/api/device\", device, Device.class);\n+        doPost(\"/api/edge/\" + edge.getId().getId().toString()\n+                + \"/device/\" + savedDevice.getId().getId().toString(), Device.class);\n+\n+        Asset asset = new Asset();\n+        asset.setName(\"Edge Asset 1\");\n+        asset.setType(\"test\");\n+        Asset savedAsset = doPost(\"/api/asset\", asset, Asset.class);\n+        doPost(\"/api/edge/\" + edge.getId().getId().toString()\n+                + \"/asset/\" + savedAsset.getId().getId().toString(), Asset.class);\n+\n+        EdgeImitator edgeImitator = new EdgeImitator(\"localhost\", 7070, edge.getRoutingKey(), edge.getSecret());\n+        // should be 3, but 3 events from sync service + 3 from controller. will be fixed in next releases\n+        edgeImitator.expectMessageAmount(6);\n+        edgeImitator.connect();\n+        edgeImitator.waitForMessages();\n+\n+        Assert.assertEquals(6, edgeImitator.getDownlinkMsgs().size());\n+        Assert.assertTrue(edgeImitator.findMessageByType(RuleChainUpdateMsg.class).isPresent());\n+        Assert.assertTrue(edgeImitator.findMessageByType(DeviceUpdateMsg.class).isPresent());\n+        Assert.assertTrue(edgeImitator.findMessageByType(AssetUpdateMsg.class).isPresent());\n+\n+        edgeImitator.getDownlinkMsgs().clear();\n+\n+        edgeImitator.expectMessageAmount(3);\n+        doPost(\"/api/edge/sync\", edge.getId());\n+        edgeImitator.waitForMessages();\n+\n+        Assert.assertEquals(3, edgeImitator.getDownlinkMsgs().size());\n+        Assert.assertTrue(edgeImitator.findMessageByType(RuleChainUpdateMsg.class).isPresent());\n+        Assert.assertTrue(edgeImitator.findMessageByType(DeviceUpdateMsg.class).isPresent());\n+        Assert.assertTrue(edgeImitator.findMessageByType(AssetUpdateMsg.class).isPresent());\n+\n+        edgeImitator.disconnect();\n+\n+        doDelete(\"/api/device/\" + savedDevice.getId().getId().toString())\n+                .andExpect(status().isOk());\n+        doDelete(\"/api/asset/\" + savedAsset.getId().getId().toString())\n+                .andExpect(status().isOk());\n+        doDelete(\"/api/edge/\" + edge.getId().getId().toString())\n+                .andExpect(status().isOk());\n+    }\n+\n }",
      "parent_sha": "1d89cbc1917614e85249c40618241099f3ef4430"
    }
  },
  {
    "oid": "c744192d37bc2218b1cdb3124bc607e6d335e0f0",
    "message": "Merge PR #6262",
    "date": "2022-06-22T08:29:44Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/c744192d37bc2218b1cdb3124bc607e6d335e0f0",
    "details": {
      "sha": "f7a1d83ac9a162b714bbaaf71f8ba44c623e027a",
      "filename": "rule-engine/rule-engine-components/src/test/java/org/thingsboard/rule/engine/rest/TbHttpClientTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/c744192d37bc2218b1cdb3124bc607e6d335e0f0/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Frest%2FTbHttpClientTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/c744192d37bc2218b1cdb3124bc607e6d335e0f0/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Frest%2FTbHttpClientTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Frest%2FTbHttpClientTest.java?ref=c744192d37bc2218b1cdb3124bc607e6d335e0f0",
      "patch": "@@ -140,10 +140,7 @@ public void testProcessMessageWithJsonInUrlVariable() throws Exception {\n         var httpClient = new TbHttpClient(config, eventLoop);\n         httpClient.setHttpClient(asyncRestTemplate);\n \n-        var msg = TbMsg.newMsg(\n-                \"Main\", \"GET\", new DeviceId(EntityId.NULL_UUID),\n-                TbMsgMetaData.EMPTY, \"{}\"\n-        );\n+        var msg = TbMsg.newMsg(\"GET\", new DeviceId(EntityId.NULL_UUID), TbMsgMetaData.EMPTY, \"{}\");\n         var successMsg = TbMsg.newMsg(\n                 \"SUCCESS\", msg.getOriginator(),\n                 msg.getMetaData(), msg.getData()",
      "parent_sha": "6f78d8245a971dd6f683ae05dc32462a5d61e13e"
    }
  },
  {
    "oid": "0cd0c65a08c47f6b31e8e52c02b6986e42922dc4",
    "message": "do not refresh token if refresh token expired",
    "date": "2024-03-18T10:37:36Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/0cd0c65a08c47f6b31e8e52c02b6986e42922dc4",
    "details": {
      "sha": "7c7edf2164e26eb72c4d8301f35eb4c72b54c7ce",
      "filename": "application/src/main/java/org/thingsboard/server/service/mail/RefreshTokenExpCheckService.java",
      "status": "modified",
      "additions": 25,
      "deletions": 14,
      "changes": 39,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/0cd0c65a08c47f6b31e8e52c02b6986e42922dc4/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fmail%2FRefreshTokenExpCheckService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/0cd0c65a08c47f6b31e8e52c02b6986e42922dc4/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fmail%2FRefreshTokenExpCheckService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fmail%2FRefreshTokenExpCheckService.java?ref=0cd0c65a08c47f6b31e8e52c02b6986e42922dc4",
      "patch": "@@ -56,22 +56,33 @@ public void check() throws IOException {\n             JsonNode jsonValue = settings.getJsonValue();\n             if (OFFICE_365.name().equals(jsonValue.get(\"providerId\").asText()) && jsonValue.has(\"refreshToken\")\n                     && jsonValue.has(\"refreshTokenExpires\")) {\n-                long expiresIn = jsonValue.get(\"refreshTokenExpires\").longValue();\n-                if ((expiresIn - System.currentTimeMillis()) < 604800000L) { //less than 7 days\n-                    log.info(\"Trying to refresh refresh token.\");\n+                try {\n+                    long expiresIn = jsonValue.get(\"refreshTokenExpires\").longValue();\n+                    long tokenLifeDuration = expiresIn - System.currentTimeMillis();\n+                    if (tokenLifeDuration < 0) {\n+                        ((ObjectNode) jsonValue).put(\"tokenGenerated\", false);\n+                        ((ObjectNode) jsonValue).remove(\"refreshToken\");\n+                        ((ObjectNode) jsonValue).remove(\"refreshTokenExpires\");\n \n-                    String clientId = jsonValue.get(\"clientId\").asText();\n-                    String clientSecret = jsonValue.get(\"clientSecret\").asText();\n-                    String refreshToken = jsonValue.get(\"refreshToken\").asText();\n-                    String tokenUri = jsonValue.get(\"tokenUri\").asText();\n+                        adminSettingsService.saveAdminSettings(TenantId.SYS_TENANT_ID, settings);\n+                    } else if (tokenLifeDuration < 604800000L) { //less than 7 days\n+                        log.info(\"Trying to refresh refresh token.\");\n \n-                    TokenResponse tokenResponse = new RefreshTokenRequest(new NetHttpTransport(), new GsonFactory(),\n-                            new GenericUrl(tokenUri), refreshToken)\n-                            .setClientAuthentication(new ClientParametersAuthentication(clientId, clientSecret))\n-                            .execute();\n-                    ((ObjectNode) jsonValue).put(\"refreshToken\", tokenResponse.getRefreshToken());\n-                    ((ObjectNode) jsonValue).put(\"refreshTokenExpires\", Instant.now().plus(Duration.ofDays(AZURE_DEFAULT_REFRESH_TOKEN_LIFETIME_IN_DAYS)).toEpochMilli());\n-                    adminSettingsService.saveAdminSettings(TenantId.SYS_TENANT_ID, settings);\n+                        String clientId = jsonValue.get(\"clientId\").asText();\n+                        String clientSecret = jsonValue.get(\"clientSecret\").asText();\n+                        String refreshToken = jsonValue.get(\"refreshToken\").asText();\n+                        String tokenUri = jsonValue.get(\"tokenUri\").asText();\n+\n+                        TokenResponse tokenResponse = new RefreshTokenRequest(new NetHttpTransport(), new GsonFactory(),\n+                                new GenericUrl(tokenUri), refreshToken)\n+                                .setClientAuthentication(new ClientParametersAuthentication(clientId, clientSecret))\n+                                .execute();\n+                        ((ObjectNode) jsonValue).put(\"refreshToken\", tokenResponse.getRefreshToken());\n+                        ((ObjectNode) jsonValue).put(\"refreshTokenExpires\", Instant.now().plus(Duration.ofDays(AZURE_DEFAULT_REFRESH_TOKEN_LIFETIME_IN_DAYS)).toEpochMilli());\n+                        adminSettingsService.saveAdminSettings(TenantId.SYS_TENANT_ID, settings);\n+                    }\n+                } catch (Exception e) {\n+                    log.error(\"Error occurred while checking token\", e);\n                 }\n             }\n         }",
      "parent_sha": "6d13086a53f8938f9275f7159321046c9a71914e"
    }
  },
  {
    "oid": "bfb475744069614f78ffed25c3ce25ab33eee86d",
    "message": "Fix RuleChainMetadata for older Edge versions\n\n- refactoring test",
    "date": "2025-04-01T13:50:04Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/bfb475744069614f78ffed25c3ce25ab33eee86d",
    "details": {
      "sha": "a4c2133f1cee3eb7648e88caf3c72aaebc9bf269",
      "filename": "application/src/test/java/org/thingsboard/server/service/edge/EdgeMsgConstructorUtilsTest.java",
      "status": "modified",
      "additions": 84,
      "deletions": 87,
      "changes": 171,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/bfb475744069614f78ffed25c3ce25ab33eee86d/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2FEdgeMsgConstructorUtilsTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/bfb475744069614f78ffed25c3ce25ab33eee86d/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2FEdgeMsgConstructorUtilsTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2FEdgeMsgConstructorUtilsTest.java?ref=bfb475744069614f78ffed25c3ce25ab33eee86d",
      "patch": "@@ -16,144 +16,141 @@\n package org.thingsboard.server.service.edge;\n \n import lombok.extern.slf4j.Slf4j;\n-import org.junit.Assert;\n import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.TestInstance;\n import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.EnumSource;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.thingsboard.common.util.JacksonUtil;\n import org.thingsboard.rule.engine.action.TbSaveToCustomCassandraTableNode;\n-import org.thingsboard.rule.engine.action.TbSaveToCustomCassandraTableNodeConfiguration;\n import org.thingsboard.rule.engine.api.NodeConfiguration;\n+import org.thingsboard.rule.engine.api.TbNode;\n import org.thingsboard.rule.engine.aws.lambda.TbAwsLambdaNode;\n-import org.thingsboard.rule.engine.aws.lambda.TbAwsLambdaNodeConfiguration;\n+import org.thingsboard.rule.engine.filter.TbCheckRelationNode;\n+import org.thingsboard.rule.engine.flow.TbAckNode;\n+import org.thingsboard.rule.engine.math.TbMathNode;\n+import org.thingsboard.rule.engine.metadata.CalculateDeltaNode;\n+import org.thingsboard.rule.engine.metadata.TbGetTelemetryNode;\n import org.thingsboard.rule.engine.rest.TbSendRestApiCallReplyNode;\n-import org.thingsboard.rule.engine.rest.TbSendRestApiCallReplyNodeConfiguration;\n import org.thingsboard.rule.engine.telemetry.TbMsgAttributesNode;\n-import org.thingsboard.rule.engine.telemetry.TbMsgAttributesNodeConfiguration;\n import org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode;\n-import org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNodeConfiguration;\n import org.thingsboard.server.common.data.rule.RuleChainMetaData;\n import org.thingsboard.server.common.data.rule.RuleNode;\n-import org.thingsboard.server.common.data.util.TbPair;\n import org.thingsboard.server.gen.edge.v1.EdgeVersion;\n import org.thingsboard.server.gen.edge.v1.UpdateMsgType;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n+import java.lang.reflect.Constructor;\n import java.util.List;\n-import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n import static org.thingsboard.server.service.edge.EdgeMsgConstructorUtils.EXCLUDED_NODES_BY_EDGE_VERSION;\n import static org.thingsboard.server.service.edge.EdgeMsgConstructorUtils.IGNORED_PARAMS_BY_EDGE_VERSION;\n \n @Slf4j\n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n public class EdgeMsgConstructorUtilsTest {\n-    private static final int CONFIGURATION_VERSION = 5;\n-\n-    private static final Map<NodeConfiguration, String> NODE_CONFIG_TO_NAME_MAP = Map.of(\n-            new TbMsgTimeseriesNodeConfiguration(), TbMsgTimeseriesNode.class.getName(),\n-            new TbMsgAttributesNodeConfiguration(), TbMsgAttributesNode.class.getName(),\n-            new TbSaveToCustomCassandraTableNodeConfiguration(), TbSaveToCustomCassandraTableNode.class.getName()\n-    );\n \n-    private static final Map<String, Integer> NODE_NAME_TO_CONFIG_PARAM_COUNT_MAP = Map.of(\n-            TbMsgTimeseriesNode.class.getName(), 3,\n-            TbMsgAttributesNode.class.getName(), 5,\n-            TbSaveToCustomCassandraTableNode.class.getName(), 3\n-    );\n+    private static final int CONFIGURATION_VERSION = 5;\n \n+    static Stream<EdgeVersion> provideEdgeVersions() {\n+        return Stream.of(\n+                EdgeVersion.V_4_0_0,\n+                EdgeVersion.V_3_9_0,\n+                EdgeVersion.V_3_8_0,\n+                EdgeVersion.V_3_7_0\n+        );\n+    }\n \n-    private static final Map<NodeConfiguration, String> MISSING_NODE_CONFIGS_FOR_OLD_EDGES = Map.of(\n-            new TbSendRestApiCallReplyNodeConfiguration(), TbSendRestApiCallReplyNode.class.getName(),\n-            new TbAwsLambdaNodeConfiguration(), TbAwsLambdaNode.class.getName()\n-    );\n+    private static final RuleChainMetaData RULE_CHAIN_META_DATA = new RuleChainMetaData();\n+    private static final List<TbNode> TEST_NODES =\n+            List.of(\n+                    new TbSaveToCustomCassandraTableNode(),\n+                    new TbMsgAttributesNode(),\n+                    new TbMsgTimeseriesNode(),\n+                    new TbSendRestApiCallReplyNode(),\n+                    new TbAwsLambdaNode(),\n+\n+                    new TbMathNode(),\n+                    new CalculateDeltaNode(),\n+                    new TbAckNode(),\n+                    new TbCheckRelationNode(),\n+                    new TbGetTelemetryNode()\n+            );\n \n-    @ParameterizedTest(name = \"Testing metadata update for EdgeVersion: {0}\")\n-    @EnumSource(value = EdgeVersion.class, names = {\"V_4_0_0\", \"V_3_9_0\", \"V_3_8_0\", \"V_3_7_0\"})\n-    @DisplayName(\"Test RuleChain Metadata Update for Supported Edge Versions\")\n-    public void testRuleChainMetadataUpdateForSupportedEdgeVersions(EdgeVersion edgeVersion) {\n-        // GIVEN\n-        RuleChainMetaData metaData = createMetadataWithNodes(NODE_CONFIG_TO_NAME_MAP);\n+    @BeforeAll\n+    static void setUp() {\n+        List<RuleNode> ruleNodes = TEST_NODES.stream()\n+                .map(node -> {\n+                    RuleNode ruleNode = new RuleNode();\n+                    ruleNode.setName(node.getClass().getName());\n+                    ruleNode.setType(node.getClass().getName());\n+                    ruleNode.setConfigurationVersion(CONFIGURATION_VERSION);\n+                    ruleNode.setConfiguration(JacksonUtil.valueToTree(createDefaultConfiguration(node)));\n+                    return ruleNode;\n+                })\n+                .toList();\n+\n+        RULE_CHAIN_META_DATA.setFirstNodeIndex(0);\n+        RULE_CHAIN_META_DATA.setNodes(ruleNodes);\n+    }\n \n-        // WHEN\n-        List<RuleNode> ruleNodes = extractRuleNodesFromMetadata(metaData, edgeVersion);\n+    private static NodeConfiguration<?> createDefaultConfiguration(TbNode node) {\n+        try {\n+            org.thingsboard.rule.engine.api.RuleNode annotation = node.getClass().getAnnotation(org.thingsboard.rule.engine.api.RuleNode.class);\n+            Constructor<?> constructor = annotation.configClazz().getConstructor();\n+            NodeConfiguration<?> configInstance = (NodeConfiguration<?>) constructor.newInstance();\n \n-        // THEN\n-        verifyRuleNodeConfigurations(ruleNodes, edgeVersion);\n+            return configInstance.defaultConfiguration();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Exception during creating RuleNodeConfiguration for node - \" + node, e);\n+        }\n     }\n \n-    @ParameterizedTest(name = \"Testing metadata with missing nodes for EdgeVersion: {0}\")\n-    @EnumSource(value = EdgeVersion.class, names = {\"V_4_0_0\", \"V_3_9_0\", \"V_3_8_0\", \"V_3_7_0\"})\n-    @DisplayName(\"Test RuleChain Metadata with Missing Nodes for Old Edge Versions\")\n-    public void testRuleChainMetadataWithMissingNodesForOldEdgeVersions(EdgeVersion edgeVersion) {\n-        // GIVEN\n-        RuleChainMetaData metaData = createMetadataWithNodes(MISSING_NODE_CONFIGS_FOR_OLD_EDGES);\n-\n+    @ParameterizedTest(name = \"Test Sanitize Metadata For Edge: {0}\")\n+    @MethodSource(\"provideEdgeVersions\")\n+    @DisplayName(\"Test Sanitize Metadata For Legacy Edge Version\")\n+    public void testSanitizeMetadataForLegacyEdgeVersion(EdgeVersion edgeVersion) {\n         // WHEN\n-        List<RuleNode> ruleNodes = extractRuleNodesFromMetadata(metaData, edgeVersion);\n+        List<RuleNode> ruleNodes = sanitizeMetadataForLegacyEdgeVersion(edgeVersion);\n \n         // THEN\n-        int expectedNodeCount = EXCLUDED_NODES_BY_EDGE_VERSION.containsKey(edgeVersion) ?\n-                MISSING_NODE_CONFIGS_FOR_OLD_EDGES.size() - EXCLUDED_NODES_BY_EDGE_VERSION.get(edgeVersion).size() :\n-                MISSING_NODE_CONFIGS_FOR_OLD_EDGES.size();\n-        Assertions.assertEquals(\n-                expectedNodeCount,\n-                ruleNodes.size(),\n-                String.format(\"EdgeVersion '%s' should have %d nodes, but found %d.\", edgeVersion, expectedNodeCount, ruleNodes.size())\n-        );\n-    }\n-\n-    private RuleChainMetaData createMetadataWithNodes(Map<NodeConfiguration, String> nodeConfigMap) {\n-        RuleChainMetaData ruleChainMetaData = new RuleChainMetaData();\n-        List<RuleNode> ruleNodes = new ArrayList<>();\n-\n-        nodeConfigMap.forEach((config, nodeName) -> {\n-            RuleNode ruleNode = new RuleNode();\n-            ruleNode.setName(nodeName);\n-            ruleNode.setType(nodeName);\n-            ruleNode.setConfigurationVersion(CONFIGURATION_VERSION);\n-            ruleNode.setConfiguration(JacksonUtil.valueToTree(config.defaultConfiguration()));\n-            ruleNodes.add(ruleNode);\n+        ruleNodes.forEach(ruleNode -> {\n+            checkUpdateNodeConfigurationsForLegacyEdge(ruleNode, edgeVersion);\n+            checkRemoveExcludedNodesForLegacyEdge(ruleNode, edgeVersion);\n         });\n-\n-        ruleChainMetaData.setFirstNodeIndex(0);\n-        ruleChainMetaData.setNodes(ruleNodes);\n-        return ruleChainMetaData;\n     }\n \n-    private List<RuleNode> extractRuleNodesFromMetadata(RuleChainMetaData metaData, EdgeVersion edgeVersion) {\n+    private List<RuleNode> sanitizeMetadataForLegacyEdgeVersion(EdgeVersion edgeVersion) {\n         String metadataUpdateMsg = EdgeMsgConstructorUtils.constructRuleChainMetadataUpdatedMsg(\n                 UpdateMsgType.ENTITY_CREATED_RPC_MESSAGE,\n-                metaData,\n+                RULE_CHAIN_META_DATA,\n                 edgeVersion\n         ).getEntity();\n \n         RuleChainMetaData updatedMetaData = JacksonUtil.fromString(metadataUpdateMsg, RuleChainMetaData.class, true);\n         Assertions.assertNotNull(updatedMetaData, \"RuleChainMetaData should not be null after update.\");\n+\n         return updatedMetaData.getNodes();\n     }\n \n-    private void verifyRuleNodeConfigurations(List<RuleNode> ruleNodes, EdgeVersion edgeVersion) {\n-        ruleNodes.forEach(ruleNode -> {\n-            String nodeType = ruleNode.getType();\n-            int expectedParamCount = NODE_NAME_TO_CONFIG_PARAM_COUNT_MAP.getOrDefault(nodeType, 0);\n+    private void checkUpdateNodeConfigurationsForLegacyEdge(RuleNode ruleNode, EdgeVersion edgeVersion) {\n+        if (IGNORED_PARAMS_BY_EDGE_VERSION.containsKey(edgeVersion) && IGNORED_PARAMS_BY_EDGE_VERSION.get(edgeVersion).containsKey(ruleNode.getType())) {\n+            String ignoredParam = IGNORED_PARAMS_BY_EDGE_VERSION.get(edgeVersion).get(ruleNode.getType());\n \n-            boolean isRuleNodeModified = IGNORED_PARAMS_BY_EDGE_VERSION\n-                    .getOrDefault(edgeVersion, Map.of())\n-                    .containsKey(nodeType);\n+            Assertions.assertFalse(ruleNode.getConfiguration().has(ignoredParam),\n+                    String.format(\"RuleNode '%s' for EdgeVersion '%s' should ignore '%s' config parameter.\", ruleNode.getName(), edgeVersion, ignoredParam));\n+        }\n+    }\n \n-            int actualParamCount = isRuleNodeModified ? expectedParamCount - 1 : expectedParamCount;\n+    private void checkRemoveExcludedNodesForLegacyEdge(RuleNode ruleNode, EdgeVersion edgeVersion) {\n+        boolean isNodeExcluded = Optional.ofNullable(EXCLUDED_NODES_BY_EDGE_VERSION.get(edgeVersion))\n+                .map(excludedNodes -> !excludedNodes.contains(ruleNode.getType()))\n+                .orElse(true);\n \n-            Assertions.assertEquals(\n-                    actualParamCount,\n-                    ruleNode.getConfiguration().size(),\n-                    String.format(\"RuleNode '%s' for EdgeVersion '%s' should have %d config parameters.\",\n-                            ruleNode.getName(), edgeVersion, actualParamCount)\n-            );\n-        });\n+        Assertions.assertTrue(isNodeExcluded,\n+                String.format(\"For EdgeVersion '%s', ruleNode '%s' should not be included.\", edgeVersion, ruleNode.getType()));\n     }\n \n }",
      "parent_sha": "27ff3a126cb6e172fda2a28446215d9417ac84a5"
    }
  },
  {
    "oid": "4f6ad3263f24e3f8b2639dd586377b1e25307bb4",
    "message": "Added edge_name_unq_key in saveEdge",
    "date": "2020-12-18T12:58:34Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/4f6ad3263f24e3f8b2639dd586377b1e25307bb4",
    "details": {
      "sha": "afb6fac8a64d7503abf529f0c26345ebacf25ae4",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/edge/EdgeServiceImpl.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/4f6ad3263f24e3f8b2639dd586377b1e25307bb4/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fedge%2FEdgeServiceImpl.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/4f6ad3263f24e3f8b2639dd586377b1e25307bb4/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fedge%2FEdgeServiceImpl.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fedge%2FEdgeServiceImpl.java?ref=4f6ad3263f24e3f8b2639dd586377b1e25307bb4",
      "patch": "@@ -25,6 +25,7 @@\n import org.apache.http.conn.ssl.DefaultHostnameVerifier;\n import org.apache.http.impl.client.CloseableHttpClient;\n import org.apache.http.impl.client.HttpClients;\n+import org.hibernate.exception.ConstraintViolationException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.cache.Cache;\n@@ -178,7 +179,17 @@ public Optional<Edge> findEdgeByRoutingKey(TenantId tenantId, String routingKey)\n     public Edge saveEdge(Edge edge) {\n         log.trace(\"Executing saveEdge [{}]\", edge);\n         edgeValidator.validate(edge, Edge::getTenantId);\n-        return edgeDao.save(edge.getTenantId(), edge);\n+        try {\n+            return edgeDao.save(edge.getTenantId(), edge);\n+        } catch (Exception t) {\n+            ConstraintViolationException e = extractConstraintViolationException(t).orElse(null);\n+            if (e != null && e.getConstraintName() != null\n+                    && e.getConstraintName().equalsIgnoreCase(\"edge_name_unq_key\")) {\n+                throw new DataValidationException(\"Edge with such name already exists!\");\n+            } else {\n+                throw t;\n+            }\n+        }\n     }\n \n     @Override",
      "parent_sha": "1ab1a8e085b4ab9631e8f005d29a8917b7e57a81"
    }
  },
  {
    "oid": "ee0e2a68026e183dfe7085393fc2538783606cd1",
    "message": "Process images for system dashboard resource",
    "date": "2024-10-24T12:05:52Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/ee0e2a68026e183dfe7085393fc2538783606cd1",
    "details": {
      "sha": "cea6842245a2336757382279354476fd8e8d6bc3",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/resource/BaseResourceService.java",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/ee0e2a68026e183dfe7085393fc2538783606cd1/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fresource%2FBaseResourceService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/ee0e2a68026e183dfe7085393fc2538783606cd1/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fresource%2FBaseResourceService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fresource%2FBaseResourceService.java?ref=ee0e2a68026e183dfe7085393fc2538783606cd1",
      "patch": "@@ -17,15 +17,19 @@\n \n import com.google.common.hash.Hashing;\n import com.google.common.util.concurrent.ListenableFuture;\n-import lombok.AllArgsConstructor;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.hibernate.exception.ConstraintViolationException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Lazy;\n import org.springframework.context.annotation.Primary;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.event.TransactionalEventListener;\n+import org.thingsboard.common.util.JacksonUtil;\n import org.thingsboard.common.util.RegexUtils;\n import org.thingsboard.server.cache.resourceInfo.ResourceInfoCacheKey;\n import org.thingsboard.server.cache.resourceInfo.ResourceInfoEvictEvent;\n+import org.thingsboard.server.common.data.Dashboard;\n import org.thingsboard.server.common.data.EntityType;\n import org.thingsboard.server.common.data.ResourceType;\n import org.thingsboard.server.common.data.TbResource;\n@@ -54,14 +58,16 @@\n \n @Service(\"TbResourceDaoService\")\n @Slf4j\n-@AllArgsConstructor\n+@RequiredArgsConstructor\n @Primary\n public class BaseResourceService extends AbstractCachedEntityService<ResourceInfoCacheKey, TbResourceInfo, ResourceInfoEvictEvent> implements ResourceService {\n \n     public static final String INCORRECT_RESOURCE_ID = \"Incorrect resourceId \";\n     protected final TbResourceDao resourceDao;\n     protected final TbResourceInfoDao resourceInfoDao;\n     protected final ResourceDataValidator resourceValidator;\n+    @Autowired @Lazy\n+    private ImageService imageService;\n \n     @Override\n     public TbResource saveResource(TbResource resource, boolean doValidate) {\n@@ -243,6 +249,11 @@ public long sumDataSizeByTenantId(TenantId tenantId) {\n     public TbResource createOrUpdateSystemResource(ResourceType resourceType, String resourceKey, String data) {\n         if (resourceType == ResourceType.DASHBOARD) {\n             data = checkSystemResourcesUsage(data, ResourceType.JS_MODULE);\n+\n+            Dashboard dashboard = JacksonUtil.fromString(data, Dashboard.class);\n+            dashboard.setTenantId(TenantId.SYS_TENANT_ID);\n+            imageService.replaceBase64WithImageUrl(dashboard);\n+            data = JacksonUtil.toString(dashboard);\n         }\n \n         TbResource resource = findResourceByTenantIdAndKey(TenantId.SYS_TENANT_ID, resourceType, resourceKey);",
      "parent_sha": "119949065428927863d7fbc734c4d2a9494276c7"
    }
  },
  {
    "oid": "e586f367faa38044c4f6dee2958fb8bb022cf6e1",
    "message": "Change log level to avoid cluttering logs",
    "date": "2024-02-15T16:05:01Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/e586f367faa38044c4f6dee2958fb8bb022cf6e1",
    "details": {
      "sha": "722fcd1aac8d650e8c592737d2b1f95656173069",
      "filename": "application/src/main/java/org/thingsboard/server/service/state/DefaultRuleEngineDeviceStateManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/e586f367faa38044c4f6dee2958fb8bb022cf6e1/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fstate%2FDefaultRuleEngineDeviceStateManager.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/e586f367faa38044c4f6dee2958fb8bb022cf6e1/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fstate%2FDefaultRuleEngineDeviceStateManager.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fstate%2FDefaultRuleEngineDeviceStateManager.java?ref=e586f367faa38044c4f6dee2958fb8bb022cf6e1",
      "patch": "@@ -175,7 +175,7 @@ private void routeEvent(ConnectivityEventInfo eventInfo, TbCallback callback) {\n \n         TopicPartitionInfo tpi = partitionService.resolve(ServiceType.TB_CORE, tenantId, deviceId);\n         if (serviceInfoProvider.isService(ServiceType.TB_CORE) && tpi.isMyPartition() && deviceStateService.isPresent()) {\n-            log.info(\"[{}][{}] Forwarding device connectivity event to local service. Event time: [{}].\", tenantId.getId(), deviceId.getId(), eventTime);\n+            log.debug(\"[{}][{}] Forwarding device connectivity event to local service. Event time: [{}].\", tenantId.getId(), deviceId.getId(), eventTime);\n             try {\n                 eventInfo.forwardToLocalService();\n             } catch (Exception e) {\n@@ -186,7 +186,7 @@ private void routeEvent(ConnectivityEventInfo eventInfo, TbCallback callback) {\n             callback.onSuccess();\n         } else {\n             TransportProtos.ToCoreMsg msg = eventInfo.toQueueMsg();\n-            log.info(\"[{}][{}] Sending device connectivity message to core. Event time: [{}].\", tenantId.getId(), deviceId.getId(), eventTime);\n+            log.debug(\"[{}][{}] Sending device connectivity message to core. Event time: [{}].\", tenantId.getId(), deviceId.getId(), eventTime);\n             clusterService.pushMsgToCore(tpi, UUID.randomUUID(), msg, new SimpleTbQueueCallback(__ -> callback.onSuccess(), callback::onFailure));\n         }\n     }",
      "parent_sha": "89db4b1188477e2b61d645efaf61341bcfecefe0"
    }
  },
  {
    "oid": "1d7e0b9851d014fc355e038977f9b81299b71798",
    "message": "queue.kafka.max.request.size:1048576 default to tolerate inconsistent or outdated yml",
    "date": "2021-08-05T12:27:45Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/1d7e0b9851d014fc355e038977f9b81299b71798",
    "details": {
      "sha": "5dd7c40ba8a22c163427e9e66a9a624bba136ae2",
      "filename": "common/queue/src/main/java/org/thingsboard/server/queue/kafka/TbKafkaSettings.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/1d7e0b9851d014fc355e038977f9b81299b71798/common%2Fqueue%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fqueue%2Fkafka%2FTbKafkaSettings.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/1d7e0b9851d014fc355e038977f9b81299b71798/common%2Fqueue%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fqueue%2Fkafka%2FTbKafkaSettings.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Fqueue%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fqueue%2Fkafka%2FTbKafkaSettings.java?ref=1d7e0b9851d014fc355e038977f9b81299b71798",
      "patch": "@@ -63,7 +63,7 @@ public class TbKafkaSettings {\n     @Value(\"${queue.kafka.linger.ms}\")\n     private long lingerMs;\n \n-    @Value(\"${queue.kafka.max.request.size}\")\n+    @Value(\"${queue.kafka.max.request.size:1048576}\")\n     private int maxRequestSize;\n \n     @Value(\"${queue.kafka.max.in.flight.requests.per.connection:5}\")",
      "parent_sha": "a5ff95b0f4503e2a9c4fa70874a4dad87ba608fd"
    }
  },
  {
    "oid": "1631f80da953aef05d9c1cea55c022a03bc13d16",
    "message": "fixed query timeout exception",
    "date": "2023-11-08T14:53:51Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/1631f80da953aef05d9c1cea55c022a03bc13d16",
    "details": {
      "sha": "642b744d80667452abad4564755e01810f70d391",
      "filename": "application/src/main/java/org/thingsboard/server/controller/AuditLogController.java",
      "status": "modified",
      "additions": 18,
      "deletions": 4,
      "changes": 22,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/1631f80da953aef05d9c1cea55c022a03bc13d16/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAuditLogController.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/1631f80da953aef05d9c1cea55c022a03bc13d16/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAuditLogController.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAuditLogController.java?ref=1631f80da953aef05d9c1cea55c022a03bc13d16",
      "patch": "@@ -99,7 +99,7 @@ public PageData<AuditLog> getAuditLogsByCustomerId(\n             @RequestParam(name = \"actionTypes\", required = false) String actionTypesStr) throws ThingsboardException {\n         checkParameter(\"CustomerId\", strCustomerId);\n         TenantId tenantId = getCurrentUser().getTenantId();\n-        TimePageLink pageLink = createTimePageLink(pageSize, page, textSearch, sortProperty, sortOrder, startTime, endTime);\n+        TimePageLink pageLink = createTimePageLink(pageSize, page, textSearch, sortProperty, sortOrder, getStartTime(startTime), getEndTime(endTime));\n         List<ActionType> actionTypes = parseActionTypesStr(actionTypesStr);\n         return checkNotNull(auditLogService.findAuditLogsByTenantIdAndCustomerId(tenantId, new CustomerId(UUID.fromString(strCustomerId)), actionTypes, pageLink));\n     }\n@@ -133,7 +133,7 @@ public PageData<AuditLog> getAuditLogsByUserId(\n             @RequestParam(name = \"actionTypes\", required = false) String actionTypesStr) throws ThingsboardException {\n         checkParameter(\"UserId\", strUserId);\n         TenantId tenantId = getCurrentUser().getTenantId();\n-        TimePageLink pageLink = createTimePageLink(pageSize, page, textSearch, sortProperty, sortOrder, startTime, endTime);\n+        TimePageLink pageLink = createTimePageLink(pageSize, page, textSearch, sortProperty, sortOrder, getStartTime(startTime), getEndTime(endTime));\n         List<ActionType> actionTypes = parseActionTypesStr(actionTypesStr);\n         return checkNotNull(auditLogService.findAuditLogsByTenantIdAndUserId(tenantId, new UserId(UUID.fromString(strUserId)), actionTypes, pageLink));\n     }\n@@ -171,7 +171,7 @@ public PageData<AuditLog> getAuditLogsByEntityId(\n         checkParameter(\"EntityId\", strEntityId);\n         checkParameter(\"EntityType\", strEntityType);\n         TenantId tenantId = getCurrentUser().getTenantId();\n-        TimePageLink pageLink = createTimePageLink(pageSize, page, textSearch, sortProperty, sortOrder, startTime, endTime);\n+        TimePageLink pageLink = createTimePageLink(pageSize, page, textSearch, sortProperty, sortOrder, getStartTime(startTime), getEndTime(endTime));\n         List<ActionType> actionTypes = parseActionTypesStr(actionTypesStr);\n         return checkNotNull(auditLogService.findAuditLogsByTenantIdAndEntityId(tenantId, EntityIdFactory.getByTypeAndId(strEntityType, strEntityId), actionTypes, pageLink));\n     }\n@@ -202,7 +202,7 @@ public PageData<AuditLog> getAuditLogs(\n             @RequestParam(name = \"actionTypes\", required = false) String actionTypesStr) throws ThingsboardException {\n         TenantId tenantId = getCurrentUser().getTenantId();\n         List<ActionType> actionTypes = parseActionTypesStr(actionTypesStr);\n-        TimePageLink pageLink = createTimePageLink(pageSize, page, textSearch, sortProperty, sortOrder, startTime, endTime);\n+        TimePageLink pageLink = createTimePageLink(pageSize, page, textSearch, sortProperty, sortOrder, getStartTime(startTime), getEndTime(endTime));\n         return checkNotNull(auditLogService.findAuditLogsByTenantId(tenantId, actionTypes, pageLink));\n     }\n \n@@ -214,4 +214,18 @@ private List<ActionType> parseActionTypesStr(String actionTypesStr) {\n         }\n         return result;\n     }\n+\n+    private Long getStartTime(Long startTime) {\n+        if (startTime == null) {\n+            return 1L;\n+        }\n+        return startTime;\n+    }\n+\n+    private Long getEndTime(Long endTime) {\n+        if (endTime == null) {\n+            return System.currentTimeMillis();\n+        }\n+        return endTime;\n+    }\n }",
      "parent_sha": "268b9cc468acf64d8f8d131d153db542b1018b2e"
    }
  },
  {
    "oid": "7fd517dafa7f129759b5b78fdad31a9f02fd244e",
    "message": "Follow mqtt 3.1.1 protocol number 3.3.1-2\n\nFollow mqtt 3.1.1 protocol number 3.3.1-2 : The DUP flag MUST be set to 0 for all QoS 0 messages. If the qos of the publish message is not 0, then set dup to true",
    "date": "2020-05-26T06:01:34Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/7fd517dafa7f129759b5b78fdad31a9f02fd244e",
    "details": {
      "sha": "a77fd1f83c7b63d05162876477f1fc153d2b4ef8",
      "filename": "netty-mqtt/src/main/java/org/thingsboard/mqtt/RetransmissionHandler.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/7fd517dafa7f129759b5b78fdad31a9f02fd244e/netty-mqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fmqtt%2FRetransmissionHandler.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/7fd517dafa7f129759b5b78fdad31a9f02fd244e/netty-mqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fmqtt%2FRetransmissionHandler.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/netty-mqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fmqtt%2FRetransmissionHandler.java?ref=7fd517dafa7f129759b5b78fdad31a9f02fd244e",
      "patch": "@@ -18,8 +18,9 @@\n import io.netty.channel.EventLoop;\n import io.netty.handler.codec.mqtt.MqttFixedHeader;\n import io.netty.handler.codec.mqtt.MqttMessage;\n-import io.netty.util.concurrent.ScheduledFuture;\n import io.netty.handler.codec.mqtt.MqttMessageType;\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import io.netty.util.concurrent.ScheduledFuture;\n \n import java.util.concurrent.TimeUnit;\n import java.util.function.BiConsumer;\n@@ -45,7 +46,10 @@ void start(EventLoop eventLoop){\n     private void startTimer(EventLoop eventLoop){\n         this.timer = eventLoop.schedule(() -> {\n             this.timeout += 5;\n-            boolean isDup = this.originalMessage.fixedHeader().messageType() == MqttMessageType.PUBLISH ? true : this.originalMessage.fixedHeader().isDup();\n+            boolean isDup = this.originalMessage.fixedHeader().isDup();\n+            if(this.originalMessage.fixedHeader().messageType() == MqttMessageType.PUBLISH && this.originalMessage.fixedHeader().qosLevel() != MqttQoS.AT_MOST_ONCE){\n+                isDup = true;\n+            }\n             MqttFixedHeader fixedHeader = new MqttFixedHeader(this.originalMessage.fixedHeader().messageType(), isDup, this.originalMessage.fixedHeader().qosLevel(), this.originalMessage.fixedHeader().isRetain(), this.originalMessage.fixedHeader().remainingLength());\n             handler.accept(fixedHeader, originalMessage);\n             startTimer(eventLoop);",
      "parent_sha": "02dd9ecdb973f5e34228a0205b9f8b42481e2e45"
    }
  },
  {
    "oid": "3a148467f96570caeb544ca953ed6ac4b7c89957",
    "message": "Minor fix for the commit request",
    "date": "2022-07-08T13:02:33Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/3a148467f96570caeb544ca953ed6ac4b7c89957",
    "details": {
      "sha": "b0e7b67f25db52e8ad090f307682429fc854316a",
      "filename": "application/src/main/java/org/thingsboard/server/service/sync/vc/DefaultEntitiesVersionControlService.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/3a148467f96570caeb544ca953ed6ac4b7c89957/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fvc%2FDefaultEntitiesVersionControlService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/3a148467f96570caeb544ca953ed6ac4b7c89957/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fvc%2FDefaultEntitiesVersionControlService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsync%2Fvc%2FDefaultEntitiesVersionControlService.java?ref=3a148467f96570caeb544ca953ed6ac4b7c89957",
      "patch": "@@ -139,18 +139,24 @@ public ListenableFuture<UUID> saveEntitiesVersion(User user, VersionCreateReques\n         DonAsynchron.withCallback(pendingCommit, commit -> {\n             cachePut(commit.getTxId(), new VersionCreationResult());\n             try {\n-                List<ListenableFuture<Void>> gitFutures = new ArrayList<>();\n+                EntitiesExportCtx<?> theCtx;\n                 switch (request.getType()) {\n                     case SINGLE_ENTITY: {\n-                        handleSingleEntityRequest(new SimpleEntitiesExportCtx(user, commit, (SingleEntityVersionCreateRequest) request));\n+                        var ctx = new SimpleEntitiesExportCtx(user, commit, (SingleEntityVersionCreateRequest) request);\n+                        handleSingleEntityRequest(ctx);\n+                        theCtx = ctx;\n                         break;\n                     }\n                     case COMPLEX: {\n-                        handleComplexRequest(new ComplexEntitiesExportCtx(user, commit, (ComplexVersionCreateRequest) request));\n+                        var ctx = new ComplexEntitiesExportCtx(user, commit, (ComplexVersionCreateRequest) request);\n+                        handleComplexRequest(ctx);\n+                        theCtx = ctx;\n                         break;\n                     }\n+                    default:\n+                        throw new RuntimeException(\"Unsupported request type: \" + request.getType());\n                 }\n-                var resultFuture = Futures.transformAsync(Futures.allAsList(gitFutures), f -> gitServiceQueue.push(commit), executor);\n+                var resultFuture = Futures.transformAsync(Futures.allAsList(theCtx.getFutures()), f -> gitServiceQueue.push(commit), executor);\n                 DonAsynchron.withCallback(resultFuture, result -> cachePut(commit.getTxId(), result), e -> processCommitError(user, request, commit, e), executor);\n             } catch (Exception e) {\n                 processCommitError(user, request, commit, e);",
      "parent_sha": "293ac8d16436e7422ea97f6f706bd81b863423c8"
    }
  },
  {
    "oid": "c4a629fc9b5c5227af17ee9bfdede0374c871673",
    "message": "Fix RuleChainMetadata for older Edge versions\n\n- fixed EdgeVersion",
    "date": "2025-03-07T11:26:54Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/c4a629fc9b5c5227af17ee9bfdede0374c871673",
    "details": {
      "sha": "d3e8e3104e1973b6bd8bf977df5a5b44d99a7700",
      "filename": "application/src/main/java/org/thingsboard/server/service/edge/EdgeMsgConstructorUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/c4a629fc9b5c5227af17ee9bfdede0374c871673/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2FEdgeMsgConstructorUtils.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/c4a629fc9b5c5227af17ee9bfdede0374c871673/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2FEdgeMsgConstructorUtils.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2FEdgeMsgConstructorUtils.java?ref=c4a629fc9b5c5227af17ee9bfdede0374c871673",
      "patch": "@@ -431,7 +431,7 @@ public static RuleChainMetadataUpdateMsg constructRuleChainMetadataUpdatedMsg(Up\n     }\n \n     private static String prepareMetaDataForEdgeVersion(RuleChainMetaData ruleChainMetaData, EdgeVersion edgeVersion) {\n-        if (EdgeVersionUtils.isEdgeVersionOlderThan(edgeVersion, EdgeVersion.V_3_8_0)) {\n+        if (EdgeVersionUtils.isEdgeVersionOlderThan(edgeVersion, EdgeVersion.V_3_9_0)) {\n             JsonNode jsonNode = JacksonUtil.valueToTree(ruleChainMetaData);\n             JsonNode nodes = jsonNode.get(\"nodes\");\n ",
      "parent_sha": "ab4ed8fa7489c3225e18f6b5d56859b270fb7dbc"
    }
  },
  {
    "oid": "3820d2bb1c4fa375ca76f3f37d896aa681e67e4a",
    "message": "TbGetTelemetryNodeTest: fixed CE licence header",
    "date": "2021-10-12T11:08:21Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/3820d2bb1c4fa375ca76f3f37d896aa681e67e4a",
    "details": {
      "sha": "533bdff03f006ed39f860a4cd0dce15e1e477176",
      "filename": "rule-engine/rule-engine-components/src/test/java/org/thingsboard/rule/engine/metadata/TbGetTelemetryNodeTest.java",
      "status": "modified",
      "additions": 10,
      "deletions": 25,
      "changes": 35,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/3820d2bb1c4fa375ca76f3f37d896aa681e67e4a/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbGetTelemetryNodeTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/3820d2bb1c4fa375ca76f3f37d896aa681e67e4a/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbGetTelemetryNodeTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbGetTelemetryNodeTest.java?ref=3820d2bb1c4fa375ca76f3f37d896aa681e67e4a",
      "patch": "@@ -1,32 +1,17 @@\n /**\n- * ThingsBoard, Inc. (\"COMPANY\") CONFIDENTIAL\n+ * Copyright \u00a9 2016-2021 The Thingsboard Authors\n  *\n- * Copyright \u00a9 2016-2021 ThingsBoard, Inc. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- * NOTICE: All information contained herein is, and remains\n- * the property of ThingsBoard, Inc. and its suppliers,\n- * if any.  The intellectual and technical concepts contained\n- * herein are proprietary to ThingsBoard, Inc.\n- * and its suppliers and may be covered by U.S. and Foreign Patents,\n- * patents in process, and are protected by trade secret or copyright law.\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Dissemination of this information or reproduction of this material is strictly forbidden\n- * unless prior written permission is obtained from COMPANY.\n- *\n- * Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees,\n- * managers or contractors who have executed Confidentiality and Non-disclosure agreements\n- * explicitly covering such access.\n- *\n- * The copyright notice above does not evidence any actual or intended publication\n- * or disclosure  of  this source code, which includes\n- * information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.\n- * ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,\n- * OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT\n- * THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED,\n- * AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.\n- * THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION\n- * DOES NOT CONVEY OR IMPLY ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS,\n- * OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n package org.thingsboard.rule.engine.metadata;\n ",
      "parent_sha": "19d24dbdbc456471e4ea66063e6be8ca4003e8c4"
    }
  },
  {
    "oid": "5f73066602fdfc797b0dceeebfd6e5a8dd5b98c3",
    "message": "resolve conflicts",
    "date": "2022-06-22T09:32:53Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/5f73066602fdfc797b0dceeebfd6e5a8dd5b98c3",
    "details": {
      "sha": "8988425ef8489e1ae5254c13e87da49dd8f5f7ce",
      "filename": "application/src/test/java/org/thingsboard/server/controller/AbstractNotifyEntityTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/5f73066602fdfc797b0dceeebfd6e5a8dd5b98c3/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/5f73066602fdfc797b0dceeebfd6e5a8dd5b98c3/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java?ref=5f73066602fdfc797b0dceeebfd6e5a8dd5b98c3",
      "patch": "@@ -142,13 +142,13 @@ private void testPushMsgToRuleEngineNever(EntityId entityId) {\n     private void testLogEntityActionOneTime(HasName entity, EntityId originatorId, TenantId tenantId, CustomerId customerId,\n                                             UserId userId, String userName, ActionType actionType, Object... additionalInfo) {\n         if (additionalInfo.length == 0) {\n-            Mockito.verify(auditLogService, times(1)).logEntityAction(Mockito.eq(tenantId), Mockito.eq(customerId),\n-                    Mockito.eq(userId), Mockito.eq(userName), Mockito.eq(originatorId),\n+            Mockito.verify(auditLogService, times(1)).logEntityAction(Mockito.eq(tenantId),\n+                    Mockito.eq(customerId), Mockito.eq(userId), Mockito.eq(userName), Mockito.eq(originatorId),\n                     Mockito.eq(entity), Mockito.eq(actionType), Mockito.isNull());\n         } else {\n             String additionalInfoStr = extractParameter(String.class, 0, additionalInfo);\n-            Mockito.verify(auditLogService, times(1)).logEntityAction(Mockito.eq(tenantId), Mockito.eq(customerId),\n-                    Mockito.eq(userId), Mockito.eq(userName), Mockito.eq(originatorId),\n+            Mockito.verify(auditLogService, times(1)).logEntityAction(Mockito.eq(tenantId),\n+                    Mockito.eq(customerId), Mockito.eq(userId), Mockito.eq(userName), Mockito.eq(originatorId),\n                     Mockito.eq(entity), Mockito.eq(actionType), Mockito.isNull(), Mockito.eq(additionalInfoStr));\n         }\n     }",
      "parent_sha": "34db923d4d1ab1d99e5c194268cd9015f45713e9"
    }
  },
  {
    "oid": "16490e1e2fa63e016ce1ab7bd8b646bad06237ce",
    "message": "optionalMappingJDK8ModuleTest added",
    "date": "2024-04-23T09:16:40Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/16490e1e2fa63e016ce1ab7bd8b646bad06237ce",
    "details": {
      "sha": "f864875d37b15cd4724c03615aa624b3198cf7bd",
      "filename": "common/util/src/test/java/org/thingsboard/common/util/JacksonUtilTest.java",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/16490e1e2fa63e016ce1ab7bd8b646bad06237ce/common%2Futil%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fcommon%2Futil%2FJacksonUtilTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/16490e1e2fa63e016ce1ab7bd8b646bad06237ce/common%2Futil%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fcommon%2Futil%2FJacksonUtilTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Futil%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fcommon%2Futil%2FJacksonUtilTest.java?ref=16490e1e2fa63e016ce1ab7bd8b646bad06237ce",
      "patch": "@@ -25,8 +25,13 @@\n import org.thingsboard.server.common.data.asset.Asset;\n import org.thingsboard.server.common.data.id.AssetId;\n \n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.UUID;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class JacksonUtilTest {\n \n     @Test\n@@ -69,4 +74,13 @@ public void toPlainTextTest(String original) {\n         Assertions.assertNotNull(serialized);\n         Assertions.assertEquals(original, JacksonUtil.toPlainText(serialized));\n     }\n-}\n+\n+    @Test\n+    public void optionalMappingJDK8ModuleTest() {\n+        // To address the issue: Java 8 optional type `java.util.Optional` not supported by default: add Module \"com.fasterxml.jackson.datatype:jackson-datatype-jdk8\" to enable handling\n+        assertThat(JacksonUtil.writeValueAsString(Optional.of(\"hello\"))).isEqualTo(\"\\\"hello\\\"\");\n+        assertThat(JacksonUtil.writeValueAsString(List.of(Optional.of(\"abc\")))).isEqualTo(\"[\\\"abc\\\"]\");\n+        assertThat(JacksonUtil.writeValueAsString(Set.of(Optional.empty()))).isEqualTo(\"[null]\");\n+    }\n+\n+}\n\\ No newline at end of file",
      "parent_sha": "be07937df9fcda1525d790b1be0ff6fe0f953dbe"
    }
  },
  {
    "oid": "17be2154ce193a65f6923f317223f89ef41c8b68",
    "message": "fixed cassandra timeseries deletion if partition is INDEFINITE",
    "date": "2024-06-13T13:04:55Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/17be2154ce193a65f6923f317223f89ef41c8b68",
    "details": {
      "sha": "6700e3614a057ba58c4be8c08577ca9ae2024096",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/timeseries/CassandraBaseTimeseriesDao.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/17be2154ce193a65f6923f317223f89ef41c8b68/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Ftimeseries%2FCassandraBaseTimeseriesDao.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/17be2154ce193a65f6923f317223f89ef41c8b68/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Ftimeseries%2FCassandraBaseTimeseriesDao.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Ftimeseries%2FCassandraBaseTimeseriesDao.java?ref=17be2154ce193a65f6923f317223f89ef41c8b68",
      "patch": "@@ -47,6 +47,7 @@\n import org.thingsboard.server.common.data.kv.ReadTsKvQueryResult;\n import org.thingsboard.server.common.data.kv.TsKvEntry;\n import org.thingsboard.server.common.data.kv.TsKvEntryAggWrapper;\n+import org.thingsboard.server.common.data.kv.TsKvQuery;\n import org.thingsboard.server.dao.model.ModelConstants;\n import org.thingsboard.server.dao.nosql.TbResultSet;\n import org.thingsboard.server.dao.nosql.TbResultSetFuture;\n@@ -239,10 +240,8 @@ public ListenableFuture<Void> remove(TenantId tenantId, EntityId entityId, Delet\n         long minPartition = toPartitionTs(query.getStartTs());\n         long maxPartition = toPartitionTs(query.getEndTs());\n \n-        TbResultSetFuture partitionsFuture = fetchPartitions(tenantId, entityId, query.getKey(), minPartition, maxPartition);\n-\n         final SimpleListenableFuture<Void> resultFuture = new SimpleListenableFuture<>();\n-        final ListenableFuture<List<Long>> partitionsListFuture = Futures.transformAsync(partitionsFuture, getPartitionsArrayFunction(), readResultsProcessingExecutor);\n+        final ListenableFuture<List<Long>> partitionsListFuture = getPartitionsFuture(tenantId, query, entityId, minPartition, maxPartition);\n \n         Futures.addCallback(partitionsListFuture, new FutureCallback<List<Long>>() {\n             @Override\n@@ -416,7 +415,7 @@ private AsyncFunction<TbResultSet, List<Long>> getPartitionsArrayFunction() {\n                         readResultsProcessingExecutor);\n     }\n \n-    private ListenableFuture<List<Long>> getPartitionsFuture(TenantId tenantId, ReadTsKvQuery query, EntityId entityId, long minPartition, long maxPartition) {\n+    private ListenableFuture<List<Long>> getPartitionsFuture(TenantId tenantId, TsKvQuery query, EntityId entityId, long minPartition, long maxPartition) {\n         if (isFixedPartitioning()) { //no need to fetch partitions from DB\n             return Futures.immediateFuture(FIXED_PARTITION);\n         }",
      "parent_sha": "f9c554e96f611cf3adddeaf0f5ff20f7615cb1f0"
    }
  },
  {
    "oid": "171f4ed4899680dd87aecb7d5abd13d00d2f5487",
    "message": "refactoring",
    "date": "2023-11-10T10:00:44Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/171f4ed4899680dd87aecb7d5abd13d00d2f5487",
    "details": {
      "sha": "35f0c52c8d8e6d8d732672ce779ba29b97e13732",
      "filename": "application/src/test/java/org/thingsboard/server/controller/AbstractWebTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/171f4ed4899680dd87aecb7d5abd13d00d2f5487/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractWebTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/171f4ed4899680dd87aecb7d5abd13d00d2f5487/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractWebTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractWebTest.java?ref=171f4ed4899680dd87aecb7d5abd13d00d2f5487",
      "patch": "@@ -333,6 +333,8 @@ public void teardownWebTest() throws Exception {\n         log.debug(\"Executing web test teardown\");\n \n         loginSysAdmin();\n+        deleteTenant(tenantId);\n+        deleteDifferentTenant();\n         verifyNoTenantsLeft();\n \n         tenantProfileService.deleteTenantProfiles(TenantId.SYS_TENANT_ID);\n@@ -362,7 +364,7 @@ private void deleteTenant(TenantId tenantId) {\n             }\n         }\n     }\n-    @NotNull\n+\n     private List<Tenant> getAllTenants() throws Exception {\n         List<Tenant> loadedTenants = new ArrayList<>();\n         PageLink pageLink = new PageLink(10);",
      "parent_sha": "709329150bafcd6a243f8e2c3a20720a3363d856"
    }
  },
  {
    "oid": "b86971b0eb34d61181a8ab352d978d9bbd0cb279",
    "message": "AuditLogControllerTest loops cycles reduced to decrease the overhead",
    "date": "2024-04-29T13:22:29Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/b86971b0eb34d61181a8ab352d978d9bbd0cb279",
    "details": {
      "sha": "4e0b7299fe634e7e1ef717b4fa1ee05728ee170a",
      "filename": "application/src/test/java/org/thingsboard/server/controller/AuditLogControllerTest.java",
      "status": "modified",
      "additions": 10,
      "deletions": 14,
      "changes": 24,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/b86971b0eb34d61181a8ab352d978d9bbd0cb279/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAuditLogControllerTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/b86971b0eb34d61181a8ab352d978d9bbd0cb279/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAuditLogControllerTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAuditLogControllerTest.java?ref=b86971b0eb34d61181a8ab352d978d9bbd0cb279",
      "patch": "@@ -102,15 +102,15 @@ public void afterTest() throws Exception {\n \n     @Test\n     public void testAuditLogs() throws Exception {\n-        for (int i = 0; i < 178; i++) {\n+        for (int i = 0; i < 11; i++) {\n             Device device = new Device();\n             device.setName(\"Device\" + i);\n             device.setType(\"default\");\n             doPost(\"/api/device\", device, Device.class);\n         }\n \n         List<AuditLog> loadedAuditLogs = new ArrayList<>();\n-        TimePageLink pageLink = new TimePageLink(23);\n+        TimePageLink pageLink = new TimePageLink(5);\n         PageData<AuditLog> pageData;\n         do {\n             pageData = doGetTypedWithTimePageLink(\"/api/audit/logs?\",\n@@ -122,10 +122,10 @@ public void testAuditLogs() throws Exception {\n             }\n         } while (pageData.hasNext());\n \n-        Assert.assertEquals(178, loadedAuditLogs.size());\n+        Assert.assertEquals(11, loadedAuditLogs.size());\n \n         loadedAuditLogs = new ArrayList<>();\n-        pageLink = new TimePageLink(23);\n+        pageLink = new TimePageLink(5);\n         do {\n             pageData = doGetTypedWithTimePageLink(\"/api/audit/logs/customer/\" + ModelConstants.NULL_UUID + \"?\",\n                     new TypeReference<PageData<AuditLog>>() {\n@@ -136,10 +136,10 @@ public void testAuditLogs() throws Exception {\n             }\n         } while (pageData.hasNext());\n \n-        Assert.assertEquals(178, loadedAuditLogs.size());\n+        Assert.assertEquals(11, loadedAuditLogs.size());\n \n         loadedAuditLogs = new ArrayList<>();\n-        pageLink = new TimePageLink(23);\n+        pageLink = new TimePageLink(5);\n         do {\n             pageData = doGetTypedWithTimePageLink(\"/api/audit/logs/user/\" + tenantAdmin.getId().getId().toString() + \"?\",\n                     new TypeReference<PageData<AuditLog>>() {\n@@ -150,7 +150,7 @@ public void testAuditLogs() throws Exception {\n             }\n         } while (pageData.hasNext());\n \n-        Assert.assertEquals(178, loadedAuditLogs.size());\n+        Assert.assertEquals(11, loadedAuditLogs.size());\n     }\n \n     @Test\n@@ -159,13 +159,13 @@ public void testAuditLogs_byTenantIdAndEntityId() throws Exception {\n         device.setName(\"Device name\");\n         device.setType(\"default\");\n         Device savedDevice = doPost(\"/api/device\", device, Device.class);\n-        for (int i = 0; i < 178; i++) {\n+        for (int i = 0; i < 11; i++) {\n             savedDevice.setName(\"Device name\" + i);\n             doPost(\"/api/device\", savedDevice, Device.class);\n         }\n \n         List<AuditLog> loadedAuditLogs = new ArrayList<>();\n-        TimePageLink pageLink = new TimePageLink(23);\n+        TimePageLink pageLink = new TimePageLink(5);\n         PageData<AuditLog> pageData;\n         do {\n             pageData = doGetTypedWithTimePageLink(\"/api/audit/logs/entity/DEVICE/\" + savedDevice.getId().getId() + \"?\",\n@@ -177,7 +177,7 @@ public void testAuditLogs_byTenantIdAndEntityId() throws Exception {\n             }\n         } while (pageData.hasNext());\n \n-        Assert.assertEquals(179, loadedAuditLogs.size());\n+        Assert.assertEquals(11 + 1, loadedAuditLogs.size());\n     }\n \n     @Test\n@@ -231,10 +231,6 @@ public void whenSavingAuditLogAndPartitionSaveErrorOccurred_thenSaveAuditLogAnyw\n                 .contains(ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.parse(\"2024-04-29T00:00:00Z\").getTime());;\n     }\n \n-    private AuditLog createAuditLog(ActionType actionType, EntityId entityId) {\n-        return createAuditLog(actionType, entityId, 0);\n-    }\n-\n     private AuditLog createAuditLog(ActionType actionType, EntityId entityId, long entityTs) {\n         AuditLog auditLog = new AuditLog();\n         auditLog.setTenantId(tenantId);",
      "parent_sha": "5ba3946ba6872484dd509b8f7e3313126b08c77c"
    }
  },
  {
    "oid": "f7fcc9a7b0e92444ddc5eba8d6f5b0a30945ec40",
    "message": "refactoring: tests error add change to matcher",
    "date": "2022-06-22T03:58:55Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/f7fcc9a7b0e92444ddc5eba8d6f5b0a30945ec40",
    "details": {
      "sha": "8e2335c042914a426cfd2b700ad98364f6f48a8c",
      "filename": "application/src/test/java/org/thingsboard/server/controller/AbstractNotifyEntityTest.java",
      "status": "modified",
      "additions": 25,
      "deletions": 8,
      "changes": 33,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/f7fcc9a7b0e92444ddc5eba8d6f5b0a30945ec40/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/f7fcc9a7b0e92444ddc5eba8d6f5b0a30945ec40/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FAbstractNotifyEntityTest.java?ref=f7fcc9a7b0e92444ddc5eba8d6f5b0a30945ec40",
      "patch": "@@ -109,7 +109,8 @@ protected void testNotifyEntityEqualsOneTimeError(HasName entity, TenantId tenan\n         EntityId entity_originator_NULL_UUID = createEntityId_NULL_UUID(entity);\n         testNotificationMsgToEdgeServiceNever(entity_originator_NULL_UUID);\n         ArgumentMatcher<HasName> matcherEntityEquals = argument -> argument.getClass().equals(entity.getClass());\n-        ArgumentMatcher<Exception> matcherError = argument -> argument.getMessage().contains(exp.getMessage());\n+        ArgumentMatcher<Exception> matcherError = argument -> argument.getMessage().contains(exp.getMessage())\n+                & argument.getClass().equals(exp.getClass());\n         logEntityActionErrorAdditionalInfo(matcherEntityEquals, entity_originator_NULL_UUID, tenantId, customer_NULL_UUID, userId,\n                 userName, actionType, 1, matcherError, additionalInfo);\n         testPushMsgToRuleEngineNever(entity_originator_NULL_UUID);\n@@ -122,8 +123,10 @@ protected void testNotifyEntityIsNullOneTimeError(HasName entity, TenantId tenan\n         EntityId entity_originator_NULL_UUID = createEntityId_NULL_UUID(entity);\n         testNotificationMsgToEdgeServiceNever(entity_originator_NULL_UUID);\n         ArgumentMatcher<HasName> matcherEntityIsNull = Objects::isNull;\n-        ArgumentMatcher<Exception> matcherError = argument -> argument.getMessage().contains(exp.getMessage()) & argument.getClass().equals(exp.getClass());\n-        logEntityActionErrorAdditionalInfo(matcherEntityIsNull, entity_originator_NULL_UUID, tenantId, customer_NULL_UUID, userId, userName, actionType, 1, matcherError, additionalInfo);\n+        ArgumentMatcher<Exception> matcherError = argument -> argument.getMessage().contains(exp.getMessage()) &\n+                argument.getClass().equals(exp.getClass());\n+        logEntityActionErrorAdditionalInfo(matcherEntityIsNull, entity_originator_NULL_UUID, tenantId, customer_NULL_UUID,\n+                userId, userName, actionType, 1, matcherError, additionalInfo);\n         testPushMsgToRuleEngineNever(entity_originator_NULL_UUID);\n     }\n \n@@ -174,11 +177,12 @@ private void logEntityAction(HasName entity, EntityId originatorId, TenantId ten\n                                  ActionType actionType, int cntTime, Object... additionalInfo) {\n         ArgumentMatcher<HasName> matcherEntityEquals = argument -> argument.equals(entity);\n         ArgumentMatcher<EntityId> matcherOriginatorId = argument -> argument.equals(originatorId);\n-        logEntityActionAdditionalInfo(matcherEntityEquals, matcherOriginatorId, tenantId, customerId, userId, userName, actionType, cntTime, additionalInfo);\n+        logEntityActionAdditionalInfo(matcherEntityEquals, matcherOriginatorId, tenantId, customerId, userId, userName,\n+                actionType, cntTime, additionalInfo);\n     }\n \n-    private void logEntityActionAdditionalInfo(ArgumentMatcher<HasName> matcherEntity, ArgumentMatcher<EntityId> matcherOriginatorId, TenantId tenantId,\n-                                               CustomerId customerId, UserId userId, String userName,\n+    private void logEntityActionAdditionalInfo(ArgumentMatcher<HasName> matcherEntity, ArgumentMatcher<EntityId> matcherOriginatorId,\n+                                               TenantId tenantId, CustomerId customerId, UserId userId, String userName,\n                                                ActionType actionType, int cntTime, Object... additionalInfo) {\n         switch (additionalInfo.length) {\n             case 1:\n@@ -234,8 +238,8 @@ private void logEntityActionAdditionalInfo(ArgumentMatcher<HasName> matcherEntit\n     }\n \n     private void logEntityActionErrorAdditionalInfo(ArgumentMatcher<HasName> matcherEntity, EntityId originatorId, TenantId tenantId,\n-                                                    CustomerId customerId, UserId userId, String userName,\n-                                                    ActionType actionType, int cntTime, ArgumentMatcher<Exception> matcherError, Object... additionalInfo) {\n+                                                    CustomerId customerId, UserId userId, String userName, ActionType actionType,\n+                                                    int cntTime, ArgumentMatcher<Exception> matcherError, Object... additionalInfo) {\n         switch (additionalInfo.length) {\n             case 1:\n                 Mockito.verify(auditLogService, times(cntTime))\n@@ -261,6 +265,19 @@ private void logEntityActionErrorAdditionalInfo(ArgumentMatcher<HasName> matcher\n                                 Mockito.argThat(matcherError),\n                                 Mockito.eq(extractParameter(String.class, 0, additionalInfo)),\n                                 Mockito.eq(extractParameter(String.class, 1, additionalInfo)));\n+           case 3:\n+                Mockito.verify(auditLogService, times(cntTime))\n+                        .logEntityAction(Mockito.eq(tenantId),\n+                                Mockito.eq(customerId),\n+                                Mockito.eq(userId),\n+                                Mockito.eq(userName),\n+                                Mockito.eq(originatorId),\n+                                Mockito.argThat(matcherEntity),\n+                                Mockito.eq(actionType),\n+                                Mockito.argThat(matcherError),\n+                                Mockito.eq(extractParameter(String.class, 0, additionalInfo)),\n+                                Mockito.eq(extractParameter(String.class, 1, additionalInfo)),\n+                                Mockito.eq(extractParameter(String.class, 3, additionalInfo)));\n                 break;\n             default:\n                 Mockito.verify(auditLogService, times(cntTime))",
      "parent_sha": "c9e13e29fefdf87f1ec0c9097d228cc17323102e"
    }
  },
  {
    "oid": "ea69f09b853f365d5c6939fc2d9b54e9ed74b144",
    "message": "replaced method source values",
    "date": "2023-11-21T08:33:49Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/ea69f09b853f365d5c6939fc2d9b54e9ed74b144",
    "details": {
      "sha": "60f31bd1340c5aa7ebfe3dd85c331df9f6553c83",
      "filename": "rule-engine/rule-engine-components/src/test/java/org/thingsboard/rule/engine/telemetry/TbMsgAttributesNodeTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/ea69f09b853f365d5c6939fc2d9b54e9ed74b144/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Ftelemetry%2FTbMsgAttributesNodeTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/ea69f09b853f365d5c6939fc2d9b54e9ed74b144/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Ftelemetry%2FTbMsgAttributesNodeTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Ftelemetry%2FTbMsgAttributesNodeTest.java?ref=ea69f09b853f365d5c6939fc2d9b54e9ed74b144",
      "patch": "@@ -135,7 +135,7 @@ void testFilterChangedAttr_whenCurrentAttributesContainsInAnyOrderNewAttributes_\n     }\n \n     // Notify device backward-compatibility test arguments\n-    private static Stream<Arguments> provideNotifyDeviceMdValue() {\n+    private static Stream<Arguments> givenNotifyDeviceMdValue_whenSaveAndNotify_thenVerifyExpectedArgumentForNotifyDeviceInSaveAndNotifyMethod() {\n         return Stream.of(\n                 Arguments.of(null, true),\n                 Arguments.of(\"null\", false),\n@@ -146,7 +146,7 @@ private static Stream<Arguments> provideNotifyDeviceMdValue() {\n \n     // Notify device backward-compatibility test\n     @ParameterizedTest\n-    @MethodSource(\"provideNotifyDeviceMdValue\")\n+    @MethodSource\n     void givenNotifyDeviceMdValue_whenSaveAndNotify_thenVerifyExpectedArgumentForNotifyDeviceInSaveAndNotifyMethod(String mdValue, boolean expectedArgumentValue) throws TbNodeException {\n         node = spy(TbMsgAttributesNode.class);\n         var ctxMock = mock(TbContext.class);\n@@ -227,7 +227,7 @@ private static Stream<Arguments> givenFromVersionAndConfig_whenUpgrade_thenVerif\n     }\n \n     @ParameterizedTest\n-    @MethodSource(\"givenFromVersionAndConfig_whenUpgrade_thenVerifyHasChangesAndConfig\")\n+    @MethodSource\n     void givenFromVersionAndConfig_whenUpgrade_thenVerifyHasChangesAndConfig(int givenVersion, String givenConfigStr, boolean hasChanges, String expectedConfigStr) throws TbNodeException {\n         // GIVEN\n         node = spy(TbMsgAttributesNode.class);",
      "parent_sha": "0fe841a45479abaf4036c541e1dcda7dc7a07849"
    }
  },
  {
    "oid": "c6b811d3625ad225615f8eb9ba50faa5c9442913",
    "message": "Update image controller tests.",
    "date": "2024-09-25T13:14:36Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/c6b811d3625ad225615f8eb9ba50faa5c9442913",
    "details": {
      "sha": "9b9da4e79717b0fd26cafb900b7ea06d5e684294",
      "filename": "application/src/test/java/org/thingsboard/server/controller/ImageControllerTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/c6b811d3625ad225615f8eb9ba50faa5c9442913/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FImageControllerTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/c6b811d3625ad225615f8eb9ba50faa5c9442913/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FImageControllerTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FImageControllerTest.java?ref=c6b811d3625ad225615f8eb9ba50faa5c9442913",
      "patch": "@@ -355,8 +355,8 @@ private void checkJpegImageDescriptor(ImageDescriptor imageDescriptor) {\n         assertThat(previewDescriptor.getMediaType()).isEqualTo(\"image/png\");\n         assertThat(previewDescriptor.getWidth()).isEqualTo(225);\n         assertThat(previewDescriptor.getHeight()).isEqualTo(225);\n-        assertThat(previewDescriptor.getSize()).isEqualTo(53498);\n-        assertThat(previewDescriptor.getEtag()).isEqualTo(\"c909e20ba942f95f4ed1ddfcf4307ce846b4a689195c629cd85f2517f46e84f9\");\n+        assertThat(previewDescriptor.getSize()).isEqualTo(52365);\n+        assertThat(previewDescriptor.getEtag()).isEqualTo(\"f231854ceb5cfce4371c246f7738d35d61770bac106ad3b9ee9b74d19817d09e\");\n     }\n \n     private void checkSvgImageDescriptor(ImageDescriptor imageDescriptor) {",
      "parent_sha": "a4447049ef0134f65fd168925d5b28af28466ca7"
    }
  },
  {
    "oid": "213663268db0e2b2671a37346bf975aa51112ddc",
    "message": "fixed alarm rule with future ts",
    "date": "2024-05-23T21:45:40Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/213663268db0e2b2671a37346bf975aa51112ddc",
    "details": {
      "sha": "44005f9d6571dceb8df56f0a24386948ec9f621d",
      "filename": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/profile/AlarmState.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/213663268db0e2b2671a37346bf975aa51112ddc/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/213663268db0e2b2671a37346bf975aa51112ddc/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java?ref=213663268db0e2b2671a37346bf975aa51112ddc",
      "patch": "@@ -250,8 +250,9 @@ private TbAlarmResult calculateAlarmResult(TbContext ctx, AlarmRuleState ruleSta\n             newAlarm.setCleared(false);\n             newAlarm.setSeverity(severity);\n             long startTs = dataSnapshot.getTs();\n-            if (startTs == 0L) {\n-                startTs = System.currentTimeMillis();\n+            long currentTime = System.currentTimeMillis();\n+            if (startTs == 0L || startTs > currentTime) {\n+                startTs = currentTime;\n             }\n             newAlarm.setStartTs(startTs);\n             newAlarm.setEndTs(startTs);",
      "parent_sha": "a8dee2643bb9af42d2042deef6fc688ad53aa10d"
    }
  },
  {
    "oid": "d1f4a025c3963dc36ccbbbbaeaa7ce40f5c6c3ef",
    "message": "Changed order for device names in renaming RPC",
    "date": "2022-01-14T11:29:38Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/d1f4a025c3963dc36ccbbbbaeaa7ce40f5c6c3ef",
    "details": {
      "sha": "efe4826780e908064ddb64c2e75f80473e112ada",
      "filename": "application/src/main/java/org/thingsboard/server/service/gateway_device/DefaultGatewayDeviceStateService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/d1f4a025c3963dc36ccbbbbaeaa7ce40f5c6c3ef/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fgateway_device%2FDefaultGatewayDeviceStateService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/d1f4a025c3963dc36ccbbbbaeaa7ce40f5c6c3ef/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fgateway_device%2FDefaultGatewayDeviceStateService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fgateway_device%2FDefaultGatewayDeviceStateService.java?ref=d1f4a025c3963dc36ccbbbbaeaa7ce40f5c6c3ef",
      "patch": "@@ -57,7 +57,7 @@ public void update(Device device, Device oldDevice) {\n         Device gatewayDevice = findGatewayDeviceByAdditionalInfoInDevice(device.getTenantId(), device.getAdditionalInfo());\n         if (gatewayDevice != null) {\n             ObjectNode renamedDeviceNode = JacksonUtil.newObjectNode();\n-            renamedDeviceNode.put(device.getName(), oldDevice.getName());\n+            renamedDeviceNode.put(oldDevice.getName(), device.getName());\n             ToDeviceRpcRequest rpcRequest = formDeviceToGatewayRPCRequest(gatewayDevice, renamedDeviceNode, DEVICE_RENAMED_METHOD_NAME);\n             deviceRpcService.processRestApiRpcRequest(rpcRequest, fromDeviceRpcResponse -> {\n                 log.trace(\"Device renamed RPC with id: [{}] processed to gateway device with id: [{}], old device name: [{}], new device name: [{}]\",",
      "parent_sha": "d73e47b714498c70aefa9880a44df914e7e15a89"
    }
  },
  {
    "oid": "a085f8de5a5b2f006404e05f389dc2730b6d1a04",
    "message": "fix entity view selection in relation query alias",
    "date": "2021-07-20T11:27:24Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/a085f8de5a5b2f006404e05f389dc2730b6d1a04",
    "details": {
      "sha": "7b3ea36cfab23719aeb61274c7a5172d63062951",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/sql/query/DefaultEntityQueryRepository.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/a085f8de5a5b2f006404e05f389dc2730b6d1a04/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FDefaultEntityQueryRepository.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/a085f8de5a5b2f006404e05f389dc2730b6d1a04/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FDefaultEntityQueryRepository.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FDefaultEntityQueryRepository.java?ref=a085f8de5a5b2f006404e05f389dc2730b6d1a04",
      "patch": "@@ -114,7 +114,7 @@ public class DefaultEntityQueryRepository implements EntityQueryRepository {\n             \" WHEN entity.entity_type = 'DEVICE'\" +\n             \" THEN (select customer_id from device where id = entity_id)\" +\n             \" WHEN entity.entity_type = 'ENTITY_VIEW'\" +\n-            \" THEN (select customer_id from entity_view where id = entity_id)\" +\n+            \" THEN (select customer_id from entity_view where id = entity.entity_id)\" +\n             \" WHEN entity.entity_type = 'EDGE'\" +\n             \" THEN (select customer_id from edge where id = entity_id)\" +\n             \" END as customer_id\";\n@@ -131,7 +131,7 @@ public class DefaultEntityQueryRepository implements EntityQueryRepository {\n             \" WHEN entity.entity_type = 'DEVICE'\" +\n             \" THEN (select tenant_id from device where id = entity_id)\" +\n             \" WHEN entity.entity_type = 'ENTITY_VIEW'\" +\n-            \" THEN (select tenant_id from entity_view where id = entity_id)\" +\n+            \" THEN (select tenant_id from entity_view where id = entity.entity_id)\" +\n             \" WHEN entity.entity_type = 'EDGE'\" +\n             \" THEN (select tenant_id from edge where id = entity_id)\" +\n             \" END as tenant_id\";\n@@ -149,7 +149,7 @@ public class DefaultEntityQueryRepository implements EntityQueryRepository {\n             \" WHEN entity.entity_type = 'DEVICE'\" +\n             \" THEN (select created_time from device where id = entity_id)\" +\n             \" WHEN entity.entity_type = 'ENTITY_VIEW'\" +\n-            \" THEN (select created_time from entity_view where id = entity_id)\" +\n+            \" THEN (select created_time from entity_view where id = entity.entity_id)\" +\n             \" WHEN entity.entity_type = 'EDGE'\" +\n             \" THEN (select created_time from edge where id = entity_id)\" +\n             \" END as created_time\";\n@@ -167,7 +167,7 @@ public class DefaultEntityQueryRepository implements EntityQueryRepository {\n             \" WHEN entity.entity_type = 'DEVICE'\" +\n             \" THEN (select name from device where id = entity_id)\" +\n             \" WHEN entity.entity_type = 'ENTITY_VIEW'\" +\n-            \" THEN (select name from entity_view where id = entity_id)\" +\n+            \" THEN (select name from entity_view where id = entity.entity_id)\" +\n             \" WHEN entity.entity_type = 'EDGE'\" +\n             \" THEN (select name from edge where id = entity_id)\" +\n             \" END as name\";\n@@ -179,7 +179,7 @@ public class DefaultEntityQueryRepository implements EntityQueryRepository {\n             \" WHEN entity.entity_type = 'DEVICE'\" +\n             \" THEN (select type from device where id = entity_id)\" +\n             \" WHEN entity.entity_type = 'ENTITY_VIEW'\" +\n-            \" THEN (select type from entity_view where id = entity_id)\" +\n+            \" THEN (select type from entity_view where id = entity.entity_id)\" +\n             \" WHEN entity.entity_type = 'EDGE'\" +\n             \" THEN (select type from edge where id = entity_id)\" +\n             \" ELSE entity.entity_type END as type\";\n@@ -197,7 +197,7 @@ public class DefaultEntityQueryRepository implements EntityQueryRepository {\n             \" WHEN entity.entity_type = 'DEVICE'\" +\n             \" THEN (select label from device where id = entity_id)\" +\n             \" WHEN entity.entity_type = 'ENTITY_VIEW'\" +\n-            \" THEN (select name from entity_view where id = entity_id)\" +\n+            \" THEN (select name from entity_view where id = entity.entity_id)\" +\n             \" WHEN entity.entity_type = 'EDGE'\" +\n             \" THEN (select label from edge where id = entity_id)\" +\n             \" END as label\";\n@@ -215,7 +215,7 @@ public class DefaultEntityQueryRepository implements EntityQueryRepository {\n             \" WHEN entity.entity_type = 'DEVICE'\" +\n             \" THEN (select additional_info from device where id = entity_id)\" +\n             \" WHEN entity.entity_type = 'ENTITY_VIEW'\" +\n-            \" THEN (select additional_info from entity_view where id = entity_id)\" +\n+            \" THEN (select additional_info from entity_view where id = entity.entity_id)\" +\n             \" WHEN entity.entity_type = 'EDGE'\" +\n             \" THEN (select additional_info from edge where id = entity_id)\" +\n             \" END as additional_info\";",
      "parent_sha": "b037a03b958f6cdcb8074500508deb1a55e69c16"
    }
  },
  {
    "oid": "b27c007a5d6809359a7f0ac7ba32ea3c4c40c54f",
    "message": "junit5: JsonConverterTest migrated",
    "date": "2023-03-06T10:08:31Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/b27c007a5d6809359a7f0ac7ba32ea3c4c40c54f",
    "details": {
      "sha": "39ed04a29ab6004abb39e7c6721201bc74d6fbe2",
      "filename": "common/transport/transport-api/src/test/java/JsonConverterTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/b27c007a5d6809359a7f0ac7ba32ea3c4c40c54f/common%2Ftransport%2Ftransport-api%2Fsrc%2Ftest%2Fjava%2FJsonConverterTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/b27c007a5d6809359a7f0ac7ba32ea3c4c40c54f/common%2Ftransport%2Ftransport-api%2Fsrc%2Ftest%2Fjava%2FJsonConverterTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Ftransport-api%2Fsrc%2Ftest%2Fjava%2FJsonConverterTest.java?ref=b27c007a5d6809359a7f0ac7ba32ea3c4c40c54f",
      "patch": "@@ -16,21 +16,18 @@\n import com.google.gson.JsonParser;\n import com.google.gson.JsonSyntaxException;\n import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n import org.junit.jupiter.api.Assertions;\n-import org.junit.runner.RunWith;\n-import org.mockito.junit.MockitoJUnitRunner;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n import org.thingsboard.server.common.transport.adaptor.JsonConverter;\n \n import java.util.ArrayList;\n \n-@RunWith(MockitoJUnitRunner.class)\n public class JsonConverterTest {\n \n-    private static final JsonParser JSON_PARSER = new JsonParser();\n+    private final JsonParser JSON_PARSER = new JsonParser();\n \n-    @Before\n+    @BeforeEach\n     public void before() {\n         JsonConverter.setTypeCastEnabled(true);\n     }",
      "parent_sha": "ea2e87e73ee7ced5dbb13f6b105e9b09bb26f151"
    }
  },
  {
    "oid": "69857cb4788b0af485e40295d9e7a62256e66210",
    "message": "Fix: move upgrade system data log to correct place",
    "date": "2023-05-03T10:39:21Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/69857cb4788b0af485e40295d9e7a62256e66210",
    "details": {
      "sha": "a80ade2ba372211aeb0226c77d834fcf2e53840c",
      "filename": "application/src/main/java/org/thingsboard/server/install/ThingsboardInstallService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/69857cb4788b0af485e40295d9e7a62256e66210/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Finstall%2FThingsboardInstallService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/69857cb4788b0af485e40295d9e7a62256e66210/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Finstall%2FThingsboardInstallService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Finstall%2FThingsboardInstallService.java?ref=69857cb4788b0af485e40295d9e7a62256e66210",
      "patch": "@@ -255,8 +255,8 @@ public void performInstall() {\n                             installScripts.loadSystemLwm2mResources();\n                         case \"3.5.0\":\n                             log.info(\"Upgrading ThingsBoard from version 3.5.0 to 3.5.1 ...\");\n-                            log.info(\"Updating system data...\");\n                             dataUpdateService.updateData(\"3.5.0\");\n+                            log.info(\"Updating system data...\");\n                             systemDataLoaderService.updateSystemWidgets();\n                             //TODO update CacheCleanupService on the next version upgrade\n                         default:",
      "parent_sha": "c60758965582ff5bd7cf17f1df48c147f65f258c"
    }
  },
  {
    "oid": "c7babf20850007b611256dbfee9ab47863a2033c",
    "message": "Protection from runtime errors during statistics processing",
    "date": "2023-01-24T10:20:56Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/c7babf20850007b611256dbfee9ab47863a2033c",
    "details": {
      "sha": "bb9b4d8f5ff83ad666f921ab87952df54ebf1cc6",
      "filename": "application/src/main/java/org/thingsboard/server/service/stats/DefaultRuleEngineStatisticsService.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/c7babf20850007b611256dbfee9ab47863a2033c/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fstats%2FDefaultRuleEngineStatisticsService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/c7babf20850007b611256dbfee9ab47863a2033c/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fstats%2FDefaultRuleEngineStatisticsService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fstats%2FDefaultRuleEngineStatisticsService.java?ref=c7babf20850007b611256dbfee9ab47863a2033c",
      "patch": "@@ -78,8 +78,8 @@ public DefaultRuleEngineStatisticsService(TelemetrySubscriptionService tsService\n     public void reportQueueStats(long ts, TbRuleEngineConsumerStats ruleEngineStats) {\n         String queueName = ruleEngineStats.getQueueName();\n         ruleEngineStats.getTenantStats().forEach((id, stats) -> {\n-            TenantId tenantId = TenantId.fromUUID(id);\n             try {\n+                TenantId tenantId = TenantId.fromUUID(id);\n                 AssetId serviceAssetId = getServiceAssetId(tenantId, queueName);\n                 if (stats.getTotalMsgCounter().get() > 0) {\n                     List<TsKvEntry> tsList = stats.getCounters().entrySet().stream()\n@@ -89,19 +89,19 @@ public void reportQueueStats(long ts, TbRuleEngineConsumerStats ruleEngineStats)\n                         tsService.saveAndNotifyInternal(tenantId, serviceAssetId, tsList, CALLBACK);\n                     }\n                 }\n-            } catch (DataValidationException e) {\n-                if (!e.getMessage().equalsIgnoreCase(\"Asset is referencing to non-existent tenant!\")) {\n-                    throw e;\n+            } catch (Exception e) {\n+                if (!\"Asset is referencing to non-existent tenant!\".equalsIgnoreCase(e.getMessage())) {\n+                    log.debug(\"[{}] Failed to store the statistics\", id, e);\n                 }\n             }\n         });\n         ruleEngineStats.getTenantExceptions().forEach((tenantId, e) -> {\n-            TsKvEntry tsKv = new BasicTsKvEntry(e.getTs(), new JsonDataEntry(\"ruleEngineException\", e.toJsonString()));\n             try {\n+                TsKvEntry tsKv = new BasicTsKvEntry(e.getTs(), new JsonDataEntry(\"ruleEngineException\", e.toJsonString()));\n                 tsService.saveAndNotifyInternal(tenantId, getServiceAssetId(tenantId, queueName), Collections.singletonList(tsKv), CALLBACK);\n-            } catch (DataValidationException e2) {\n-                if (!e2.getMessage().equalsIgnoreCase(\"Asset is referencing to non-existent tenant!\")) {\n-                    throw e2;\n+            } catch (Exception e2) {\n+                if (!\"Asset is referencing to non-existent tenant!\".equalsIgnoreCase(e2.getMessage())) {\n+                    log.debug(\"[{}] Failed to store the statistics\", tenantId, e2);\n                 }\n             }\n         });",
      "parent_sha": "f4a44e392896348982567fa061ff1b3a8b2d3545"
    }
  },
  {
    "oid": "2ad0f0519f5853fcc1e472376a74018e56a8c81d",
    "message": "added test for the default measurements",
    "date": "2024-08-06T14:34:34Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/2ad0f0519f5853fcc1e472376a74018e56a8c81d",
    "details": {
      "sha": "a268f75d671effd418a347f5164be245fdb6114b",
      "filename": "common/transport/coap/src/test/java/org/thingsboard/server/transport/coap/efento/CoapEfentTransportResourceTest.java",
      "status": "modified",
      "additions": 71,
      "deletions": 12,
      "changes": 83,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/2ad0f0519f5853fcc1e472376a74018e56a8c81d/common%2Ftransport%2Fcoap%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fcoap%2Fefento%2FCoapEfentTransportResourceTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/2ad0f0519f5853fcc1e472376a74018e56a8c81d/common%2Ftransport%2Fcoap%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fcoap%2Fefento%2FCoapEfentTransportResourceTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Fcoap%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fcoap%2Fefento%2FCoapEfentTransportResourceTest.java?ref=2ad0f0519f5853fcc1e472376a74018e56a8c81d",
      "patch": "@@ -23,12 +23,15 @@\n import org.junit.jupiter.params.provider.MethodSource;\n import org.thingsboard.server.gen.transport.coap.MeasurementTypeProtos.MeasurementType;\n import org.thingsboard.server.gen.transport.coap.MeasurementsProtos;\n+import org.thingsboard.server.gen.transport.coap.MeasurementsProtos.ProtoMeasurements;\n import org.thingsboard.server.transport.coap.CoapTransportContext;\n+import org.thingsboard.server.transport.coap.efento.utils.CoapEfentoUtils;\n \n import java.nio.ByteBuffer;\n import java.time.Instant;\n import java.util.List;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Stream;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -65,6 +68,7 @@\n import static org.thingsboard.server.gen.transport.coap.MeasurementTypeProtos.MeasurementType.MEASUREMENT_TYPE_WATER_METER;\n import static org.thingsboard.server.gen.transport.coap.MeasurementTypeProtos.MeasurementType.MEASUREMENT_TYPE_WATER_METER_ACC_MAJOR;\n import static org.thingsboard.server.gen.transport.coap.MeasurementTypeProtos.MeasurementType.MEASUREMENT_TYPE_WATER_METER_ACC_MINOR;\n+import static org.thingsboard.server.transport.coap.efento.utils.CoapEfentoUtils.convertTimestampToUtcString;\n \n class CoapEfentTransportResourceTest {\n \n@@ -76,11 +80,47 @@ static void setUp() {\n         coapEfentoTransportResource = new CoapEfentoTransportResource(ctxMock, \"testName\");\n     }\n \n+    @Test\n+    void checkContinuousSensorWithSomeMeasurements() {\n+        long tsInSec = Instant.now().getEpochSecond();\n+        ProtoMeasurements measurements = ProtoMeasurements.newBuilder()\n+                .setSerialNum(integerToByteString(1234))\n+                .setCloudToken(\"test_token\")\n+                .setMeasurementPeriodBase(180)\n+                .setMeasurementPeriodFactor(5)\n+                .setBatteryStatus(true)\n+                .setSignal(0)\n+                .setNextTransmissionAt(1000)\n+                .setTransferReason(0)\n+                .setHash(0)\n+                .addAllChannels(List.of(MeasurementsProtos.ProtoChannel.newBuilder()\n+                                .setType(MeasurementType.MEASUREMENT_TYPE_TEMPERATURE)\n+                                .setTimestamp(Math.toIntExact(tsInSec))\n+                                .addAllSampleOffsets(List.of(223, 224))\n+                                .build(),\n+                        MeasurementsProtos.ProtoChannel.newBuilder()\n+                                .setType(MeasurementType.MEASUREMENT_TYPE_HUMIDITY)\n+                                .setTimestamp(Math.toIntExact(tsInSec))\n+                                .addAllSampleOffsets(List.of(20, 30))\n+                                .build()\n+                ))\n+                .build();\n+        List<CoapEfentoTransportResource.EfentoTelemetry> efentoMeasurements = coapEfentoTransportResource.getEfentoMeasurements(measurements, UUID.randomUUID());\n+        assertThat(efentoMeasurements).hasSize(2);\n+        assertThat(efentoMeasurements.get(0).getTs()).isEqualTo(tsInSec * 1000);\n+        assertThat(efentoMeasurements.get(0).getValues().getAsJsonObject().get(\"temperature_1\").getAsDouble()).isEqualTo(22.3);\n+        assertThat(efentoMeasurements.get(0).getValues().getAsJsonObject().get(\"humidity_2\").getAsDouble()).isEqualTo(20);\n+        assertThat(efentoMeasurements.get(1).getTs()).isEqualTo((tsInSec + 180 * 5) * 1000);\n+        assertThat(efentoMeasurements.get(1).getValues().getAsJsonObject().get(\"temperature_1\").getAsDouble()).isEqualTo(22.4);\n+        assertThat(efentoMeasurements.get(1).getValues().getAsJsonObject().get(\"humidity_2\").getAsDouble()).isEqualTo(30);\n+        checkDefaultMeasurements(measurements, efentoMeasurements,180 * 5, false);\n+    }\n+\n     @ParameterizedTest\n     @MethodSource\n     void checkContinuousSensor(MeasurementType measurementType, List<Integer> sampleOffsets, String property, double expectedValue) {\n         long tsInSec = Instant.now().getEpochSecond();\n-        MeasurementsProtos.ProtoMeasurements measurements = MeasurementsProtos.ProtoMeasurements.newBuilder()\n+        ProtoMeasurements measurements = ProtoMeasurements.newBuilder()\n                 .setSerialNum(integerToByteString(1234))\n                 .setCloudToken(\"test_token\")\n                 .setMeasurementPeriodBase(180)\n@@ -101,7 +141,7 @@ void checkContinuousSensor(MeasurementType measurementType, List<Integer> sample\n         assertThat(efentoMeasurements).hasSize(1);\n         assertThat(efentoMeasurements.get(0).getTs()).isEqualTo(tsInSec * 1000);\n         assertThat(efentoMeasurements.get(0).getValues().getAsJsonObject().get(property).getAsDouble()).isEqualTo(expectedValue);\n-        assertThat(efentoMeasurements.get(0).getValues().getAsJsonObject().get(\"measurement_interval\").getAsDouble()).isEqualTo(180);\n+        checkDefaultMeasurements(measurements, efentoMeasurements, 180, false);\n     }\n \n     private static Stream<Arguments> checkContinuousSensor() {\n@@ -140,7 +180,7 @@ private static Stream<Arguments> checkContinuousSensor() {\n     @Test\n     void checkBinarySensor() {\n         long tsInSec = Instant.now().getEpochSecond();\n-        MeasurementsProtos.ProtoMeasurements measurements = MeasurementsProtos.ProtoMeasurements.newBuilder()\n+        ProtoMeasurements measurements = ProtoMeasurements.newBuilder()\n                 .setSerialNum(integerToByteString(1234))\n                 .setCloudToken(\"test_token\")\n                 .setMeasurementPeriodBase(180)\n@@ -160,14 +200,14 @@ void checkBinarySensor() {\n         assertThat(efentoMeasurements).hasSize(1);\n         assertThat(efentoMeasurements.get(0).getTs()).isEqualTo(tsInSec * 1000);\n         assertThat(efentoMeasurements.get(0).getValues().getAsJsonObject().get(\"ok_alarm_1\").getAsString()).isEqualTo(\"ALARM\");\n-        assertThat(efentoMeasurements.get(0).getValues().getAsJsonObject().get(\"measurement_interval\").getAsDouble()).isEqualTo(180 * 14);\n+        checkDefaultMeasurements(measurements, efentoMeasurements, 180 * 14, true);\n     }\n \n     @ParameterizedTest\n     @MethodSource\n-    void checkBinarySensorWhenValueIsVarying(MeasurementType measurementType, String property, String expectedValueWhenOffsetOk, String expectedValueWhenOffsetNotOk) {\n+    void checkBinarySensorWhenValueIsVarying(MeasurementType measurementType, String property, String expectedValueWhenOffsetNotOk, String expectedValueWhenOffsetOk) {\n         long tsInSec = Instant.now().getEpochSecond();\n-        MeasurementsProtos.ProtoMeasurements measurements = MeasurementsProtos.ProtoMeasurements.newBuilder()\n+        ProtoMeasurements measurements = ProtoMeasurements.newBuilder()\n                 .setSerialNum(integerToByteString(1234))\n                 .setCloudToken(\"test_token\")\n                 .setMeasurementPeriodBase(180)\n@@ -189,20 +229,20 @@ void checkBinarySensorWhenValueIsVarying(MeasurementType measurementType, String\n         assertThat(efentoMeasurements.get(0).getValues().getAsJsonObject().get(property).getAsString()).isEqualTo(expectedValueWhenOffsetNotOk);\n         assertThat(efentoMeasurements.get(1).getTs()).isEqualTo((tsInSec + 9) * 1000);\n         assertThat(efentoMeasurements.get(1).getValues().getAsJsonObject().get(property).getAsString()).isEqualTo(expectedValueWhenOffsetOk);\n-        assertThat(efentoMeasurements.get(0).getValues().getAsJsonObject().get(\"measurement_interval\").getAsDouble()).isEqualTo(180);\n+        checkDefaultMeasurements(measurements, efentoMeasurements, 180, true);\n     }\n \n     private static Stream<Arguments> checkBinarySensorWhenValueIsVarying() {\n         return Stream.of(\n-                Arguments.of(MEASUREMENT_TYPE_OK_ALARM, \"ok_alarm_1\", \"OK\", \"ALARM\"),\n-                Arguments.of(MEASUREMENT_TYPE_FLOODING, \"flooding_1\", \"OK\", \"WATER_DETECTED\"),\n-                Arguments.of(MEASUREMENT_TYPE_OUTPUT_CONTROL, \"output_control_1\", \"OFF\", \"ON\")\n+                Arguments.of(MEASUREMENT_TYPE_OK_ALARM, \"ok_alarm_1\", \"ALARM\", \"OK\"),\n+                Arguments.of(MEASUREMENT_TYPE_FLOODING, \"flooding_1\", \"WATER_DETECTED\", \"OK\"),\n+                Arguments.of(MEASUREMENT_TYPE_OUTPUT_CONTROL, \"output_control_1\", \"ON\", \"OFF\")\n         );\n     }\n \n     @Test\n     void checkExceptionWhenChannelsListIsEmpty() {\n-        MeasurementsProtos.ProtoMeasurements measurements = MeasurementsProtos.ProtoMeasurements.newBuilder()\n+        ProtoMeasurements measurements = ProtoMeasurements.newBuilder()\n                 .setSerialNum(integerToByteString(1234))\n                 .setCloudToken(\"test_token\")\n                 .setMeasurementPeriodBase(180)\n@@ -223,7 +263,7 @@ void checkExceptionWhenChannelsListIsEmpty() {\n     @Test\n     void checkExceptionWhenValuesMapIsEmpty() {\n         long tsInSec = Instant.now().getEpochSecond();\n-        MeasurementsProtos.ProtoMeasurements measurements = MeasurementsProtos.ProtoMeasurements.newBuilder()\n+        ProtoMeasurements measurements = ProtoMeasurements.newBuilder()\n                 .setSerialNum(integerToByteString(1234))\n                 .setCloudToken(\"test_token\")\n                 .setMeasurementPeriodBase(180)\n@@ -259,4 +299,23 @@ public static ByteString integerToByteString(Integer intValue) {\n         return ByteString.copyFrom(byteArray);\n     }\n \n+    private void checkDefaultMeasurements(ProtoMeasurements incomingMeasurements,\n+                                          List<CoapEfentoTransportResource.EfentoTelemetry> actualEfentoMeasurements,\n+                                          long expectedMeasurementInterval,\n+                                          boolean isBinarySensor) {\n+        for (int i = 0; i < actualEfentoMeasurements.size(); i++) {\n+            CoapEfentoTransportResource.EfentoTelemetry actualEfentoMeasurement = actualEfentoMeasurements.get(i);\n+            assertThat(actualEfentoMeasurement.getValues().getAsJsonObject().get(\"serial\").getAsString()).isEqualTo(CoapEfentoUtils.convertByteArrayToString(incomingMeasurements.getSerialNum().toByteArray()));\n+            assertThat(actualEfentoMeasurement.getValues().getAsJsonObject().get(\"battery\").getAsString()).isEqualTo(incomingMeasurements.getBatteryStatus() ? \"ok\" : \"low\");\n+            MeasurementsProtos.ProtoChannel protoChannel = incomingMeasurements.getChannelsList().get(0);\n+            long measuredAtWhenBinarySensor = TimeUnit.SECONDS.toMillis(protoChannel.getTimestamp()) + Math.abs(TimeUnit.SECONDS.toMillis(protoChannel.getSampleOffsetsList().get(i))) - 1000;\n+            long measuredAtWhenContinuousSensor =   TimeUnit.SECONDS.toMillis(protoChannel.getTimestamp() + i * expectedMeasurementInterval);\n+            long measuredAt = isBinarySensor ? measuredAtWhenBinarySensor : measuredAtWhenContinuousSensor;\n+            assertThat(actualEfentoMeasurement.getValues().getAsJsonObject().get(\"measured_at\").getAsString()).isEqualTo(convertTimestampToUtcString(measuredAt));\n+            assertThat(actualEfentoMeasurement.getValues().getAsJsonObject().get(\"next_transmission_at\").getAsString()).isEqualTo(convertTimestampToUtcString(TimeUnit.SECONDS.toMillis(incomingMeasurements.getNextTransmissionAt())));\n+            assertThat(actualEfentoMeasurement.getValues().getAsJsonObject().get(\"signal\").getAsLong()).isEqualTo(incomingMeasurements.getSignal());\n+            assertThat(actualEfentoMeasurement.getValues().getAsJsonObject().get(\"measurement_interval\").getAsDouble()).isEqualTo(expectedMeasurementInterval);\n+        }\n+    }\n+\n }",
      "parent_sha": "ae49824eba067d896492b16ff1b3e2b8953a7fa4"
    }
  },
  {
    "oid": "1df1531723bf79090f32a39e1886a475e357bef4",
    "message": "Improve sql database upgrade",
    "date": "2022-01-13T17:01:31Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/1df1531723bf79090f32a39e1886a475e357bef4",
    "details": {
      "sha": "d1b06ede35a68e18208c42c8a06ab3099fa018de",
      "filename": "application/src/main/java/org/thingsboard/server/service/install/SqlDatabaseUpgradeService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/1df1531723bf79090f32a39e1886a475e357bef4/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2FSqlDatabaseUpgradeService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/1df1531723bf79090f32a39e1886a475e357bef4/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2FSqlDatabaseUpgradeService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2FSqlDatabaseUpgradeService.java?ref=1df1531723bf79090f32a39e1886a475e357bef4",
      "patch": "@@ -477,7 +477,7 @@ public void upgradeDatabase(String fromVersion) throws Exception {\n                     loadSql(schemaUpdateFile, conn);\n                     try {\n                         conn.createStatement().execute(\"insert into entity_alarm(tenant_id, entity_id, created_time, alarm_type, customer_id, alarm_id)\" +\n-                                \" select tenant_id, originator_id, created_time, type, customer_id, id from alarm;\");\n+                                \" select tenant_id, originator_id, created_time, type, customer_id, id from alarm ON CONFLICT DO NOTHING;\");\n                         conn.createStatement().execute(\"insert into entity_alarm(tenant_id, entity_id, created_time, alarm_type, customer_id, alarm_id)\" +\n                                 \" select a.tenant_id, r.from_id, created_time, type, customer_id, id\" +\n                                 \" from alarm a inner join relation r on r.relation_type_group = 'ALARM' and r.relation_type = 'ANY' and a.id = r.to_id ON CONFLICT DO NOTHING;\");",
      "parent_sha": "95adc5a284ad75a9b6b7d48356c2d22b64e96194"
    }
  },
  {
    "oid": "f1bb232d24f0f72799c225a0bb0cf65fb464b4f7",
    "message": "removed RpcError",
    "date": "2021-07-27T08:43:21Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/f1bb232d24f0f72799c225a0bb0cf65fb464b4f7",
    "details": {
      "sha": "e91e55bacb4febf6b13867ffdd39af6c92abd91a",
      "filename": "application/src/main/java/org/thingsboard/server/actors/device/DeviceActorMessageProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/f1bb232d24f0f72799c225a0bb0cf65fb464b4f7/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/f1bb232d24f0f72799c225a0bb0cf65fb464b4f7/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java?ref=f1bb232d24f0f72799c225a0bb0cf65fb464b4f7",
      "patch": "@@ -518,7 +518,7 @@ private void processRpcResponses(TbActorCtx context, SessionInfoProto sessionInf\n             String payload = hasError ? responseMsg.getError() : responseMsg.getPayload();\n             systemContext.getTbCoreDeviceRpcService().processRpcResponseFromDeviceActor(\n                     new FromDeviceRpcResponse(requestMd.getMsg().getMsg().getId(),\n-                            payload, hasError ? RpcError.INTERNAL : null));\n+                            payload, null));\n             if (requestMd.getMsg().getMsg().isPersisted()) {\n                 RpcStatus status = hasError ? RpcStatus.FAILED : RpcStatus.SUCCESSFUL;\n                 JsonNode response;",
      "parent_sha": "06078a3163704942ee2bceeb4b92ac274754a7b7"
    }
  },
  {
    "oid": "b2130af408591d0fba82cafb85d6a48fed74eaa0",
    "message": "Typo - fixed startup of edge event clean up service",
    "date": "2023-04-13T06:25:46Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/b2130af408591d0fba82cafb85d6a48fed74eaa0",
    "details": {
      "sha": "941416669a7406d180c966012f414fc366f353df",
      "filename": "application/src/main/java/org/thingsboard/server/service/ttl/EdgeEventsCleanUpService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/b2130af408591d0fba82cafb85d6a48fed74eaa0/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fttl%2FEdgeEventsCleanUpService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/b2130af408591d0fba82cafb85d6a48fed74eaa0/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fttl%2FEdgeEventsCleanUpService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fttl%2FEdgeEventsCleanUpService.java?ref=b2130af408591d0fba82cafb85d6a48fed74eaa0",
      "patch": "@@ -32,7 +32,7 @@\n @TbCoreComponent\n @Slf4j\n @Service\n-@ConditionalOnExpression(\"${sql.ttl.edge_events.enabled:true} && ${sql.ttl.edge_events.edge_event_ttl:0} > 0\")\n+@ConditionalOnExpression(\"${sql.ttl.edge_events.enabled:true} && ${sql.ttl.edge_events.edge_events_ttl:0} > 0\")\n public class EdgeEventsCleanUpService extends AbstractCleanUpService {\n \n     public static final String RANDOM_DELAY_INTERVAL_MS_EXPRESSION =",
      "parent_sha": "a13724330158aacdef223f909c3e74248319512d"
    }
  },
  {
    "oid": "61e1ce44aa4bce2aeb28d5fd1fdfc6f811f1fec6",
    "message": "device creation lock upgrade",
    "date": "2020-07-21T12:06:29Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/61e1ce44aa4bce2aeb28d5fd1fdfc6f811f1fec6",
    "details": {
      "sha": "fa81f584a05c13e2d21818bc28b841105af6ac19",
      "filename": "common/transport/mqtt/src/main/java/org/thingsboard/server/transport/mqtt/session/GatewaySessionHandler.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/61e1ce44aa4bce2aeb28d5fd1fdfc6f811f1fec6/common%2Ftransport%2Fmqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fmqtt%2Fsession%2FGatewaySessionHandler.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/61e1ce44aa4bce2aeb28d5fd1fdfc6f811f1fec6/common%2Ftransport%2Fmqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fmqtt%2Fsession%2FGatewaySessionHandler.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Fmqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fmqtt%2Fsession%2FGatewaySessionHandler.java?ref=61e1ce44aa4bce2aeb28d5fd1fdfc6f811f1fec6",
      "patch": "@@ -71,7 +71,7 @@ public class GatewaySessionHandler {\n     private final TransportService transportService;\n     private final DeviceInfoProto gateway;\n     private final UUID sessionId;\n-    private final Lock deviceCreationLock = new ReentrantLock();\n+    private final ConcurrentMap<String, Lock> deviceCreationLockMap;\n     private final ConcurrentMap<String, GatewayDeviceSessionCtx> devices;\n     private final ConcurrentMap<String, SettableFuture<GatewayDeviceSessionCtx>> deviceFutures;\n     private final ConcurrentMap<MqttTopicMatcher, Integer> mqttQoSMap;\n@@ -86,6 +86,7 @@ public GatewaySessionHandler(MqttTransportContext context, DeviceSessionCtx devi\n         this.sessionId = sessionId;\n         this.devices = new ConcurrentHashMap<>();\n         this.deviceFutures = new ConcurrentHashMap<>();\n+        this.deviceCreationLockMap = new ConcurrentHashMap<>();\n         this.mqttQoSMap = deviceSessionCtx.getMqttQoSMap();\n         this.channel = deviceSessionCtx.getChannel();\n     }\n@@ -113,6 +114,7 @@ public void onFailure(Throwable t) {\n     private ListenableFuture<GatewayDeviceSessionCtx> onDeviceConnect(String deviceName, String deviceType) {\n         GatewayDeviceSessionCtx result = devices.get(deviceName);\n         if (result == null) {\n+            Lock deviceCreationLock = deviceCreationLockMap.computeIfAbsent(deviceName, s -> new ReentrantLock());\n             deviceCreationLock.lock();\n             try {\n                 result = devices.get(deviceName);\n@@ -145,6 +147,7 @@ private ListenableFuture<GatewayDeviceSessionCtx> getDeviceCreationFuture(String\n                             public void onSuccess(GetOrCreateDeviceFromGatewayResponseMsg msg) {\n                                 GatewayDeviceSessionCtx deviceSessionCtx = new GatewayDeviceSessionCtx(GatewaySessionHandler.this, msg.getDeviceInfo(), mqttQoSMap);\n                                 if (devices.putIfAbsent(deviceName, deviceSessionCtx) == null) {\n+                                    log.trace(\"[{}] First got or created device [{}], type [{}] for the gateway session\", sessionId, deviceName, deviceType);\n                                     SessionInfoProto deviceSessionInfo = deviceSessionCtx.getSessionInfo();\n                                     transportService.registerAsyncSession(deviceSessionInfo, deviceSessionCtx);\n                                     transportService.process(deviceSessionInfo, DefaultTransportService.getSessionEventMsg(TransportProtos.SessionEvent.OPEN), null);",
      "parent_sha": "30210c70794067539b9b6ea7c3df229d6c479336"
    }
  },
  {
    "oid": "311ef1bb8b789bbb72032df3c757d101924c9b55",
    "message": "added a new line to the end of the file",
    "date": "2024-03-11T13:49:12Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/311ef1bb8b789bbb72032df3c757d101924c9b55",
    "details": {
      "sha": "661d4d77915e8c79209e93b255d85a45743c3e81",
      "filename": "rule-engine/rule-engine-components/src/test/java/org/thingsboard/rule/engine/mqtt/TbMqttNodeTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/311ef1bb8b789bbb72032df3c757d101924c9b55/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmqtt%2FTbMqttNodeTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/311ef1bb8b789bbb72032df3c757d101924c9b55/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmqtt%2FTbMqttNodeTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmqtt%2FTbMqttNodeTest.java?ref=311ef1bb8b789bbb72032df3c757d101924c9b55",
      "patch": "@@ -76,4 +76,4 @@ private static Stream<Arguments> givenFromVersionAndConfig_whenUpgrade_thenVerif\n     protected TbNode getTestNode() {\n         return node;\n     }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "3e8f9e3242ec2b5fd34b859c2b7a07074df47750"
    }
  },
  {
    "oid": "946881b0c0ff98fbf46dbc85180de49889df567e",
    "message": "close the stream after generateCertificate\n\nclose the stream after generateCertificate",
    "date": "2020-06-19T11:02:20Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/946881b0c0ff98fbf46dbc85180de49889df567e",
    "details": {
      "sha": "da964d3443f94d4c019849d570a81220efe7886d",
      "filename": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/mqtt/credentials/CertPemClientCredentials.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/946881b0c0ff98fbf46dbc85180de49889df567e/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmqtt%2Fcredentials%2FCertPemClientCredentials.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/946881b0c0ff98fbf46dbc85180de49889df567e/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmqtt%2Fcredentials%2FCertPemClientCredentials.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmqtt%2Fcredentials%2FCertPemClientCredentials.java?ref=946881b0c0ff98fbf46dbc85180de49889df567e",
      "patch": "@@ -38,6 +38,7 @@\n import javax.net.ssl.KeyManagerFactory;\n import javax.net.ssl.TrustManagerFactory;\n import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n import java.security.AlgorithmParameters;\n import java.security.Key;\n import java.security.KeyFactory;\n@@ -142,7 +143,9 @@ private X509Certificate readCertFile(String fileContent) throws Exception {\n                     .replaceAll(\"\\\\s\", \"\");\n             byte[] decoded = Base64.decodeBase64(fileContent);\n             CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n-            certificate = (X509Certificate) certFactory.generateCertificate(new ByteArrayInputStream(decoded));\n+            try (InputStream inStream = new ByteArrayInputStream(decoded)) {\n+                certificate = (X509Certificate) certFactory.generateCertificate(inStream);\n+            }\n         }\n         return certificate;\n     }",
      "parent_sha": "559183e9fbd695171d0e3dd0100e78d2ee55519e"
    }
  },
  {
    "oid": "1b14f26dae5568c43f2b737022eca7bf15d2f652",
    "message": "Tests Fix",
    "date": "2020-06-26T11:53:57Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/1b14f26dae5568c43f2b737022eca7bf15d2f652",
    "details": {
      "sha": "fee52548d339fc796bd148607b76448434969862",
      "filename": "application/src/test/java/org/thingsboard/server/controller/BaseWebsocketApiTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/1b14f26dae5568c43f2b737022eca7bf15d2f652/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseWebsocketApiTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/1b14f26dae5568c43f2b737022eca7bf15d2f652/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseWebsocketApiTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseWebsocketApiTest.java?ref=1b14f26dae5568c43f2b737022eca7bf15d2f652",
      "patch": "@@ -455,22 +455,18 @@ public void testEntityDataLatestAttrWsCmd() throws Exception {\n         Assert.assertEquals(0, pageData.getData().get(0).getLatest().get(EntityKeyType.SERVER_ATTRIBUTE).get(\"serverAttributeKey\").getTs());\n         Assert.assertEquals(\"\", pageData.getData().get(0).getLatest().get(EntityKeyType.SERVER_ATTRIBUTE).get(\"serverAttributeKey\").getValue());\n \n-        AttributeKvEntry dataPoint1 = new BaseAttributeKvEntry(now - TimeUnit.MINUTES.toMillis(1), new LongDataEntry(\"serverAttributeKey\", 42L));\n-        List<AttributeKvEntry> tsData = Arrays.asList(dataPoint1);\n-        sendAttributes(device, TbAttributeSubscriptionScope.SERVER_SCOPE, tsData);\n \n+        wsClient.registerWaitForUpdate();\n         Thread.sleep(100);\n \n-        cmd = new EntityDataCmd(1, edq, null, latestCmd, null);\n-        wrapper = new TelemetryPluginCmdsWrapper();\n-        wrapper.setEntityDataCmds(Collections.singletonList(cmd));\n+        AttributeKvEntry dataPoint1 = new BaseAttributeKvEntry(now - TimeUnit.MINUTES.toMillis(1), new LongDataEntry(\"serverAttributeKey\", 42L));\n+        List<AttributeKvEntry> tsData = Arrays.asList(dataPoint1);\n+        sendAttributes(device, TbAttributeSubscriptionScope.SERVER_SCOPE, tsData);\n \n-        wsClient.send(mapper.writeValueAsString(wrapper));\n-        msg = wsClient.waitForReply();\n+        msg = wsClient.waitForUpdate();\n         update = mapper.readValue(msg, EntityDataUpdate.class);\n \n         Assert.assertEquals(1, update.getCmdId());\n-\n         List<EntityData> listData = update.getUpdate();\n         Assert.assertNotNull(listData);\n         Assert.assertEquals(1, listData.size());\n@@ -483,6 +479,7 @@ public void testEntityDataLatestAttrWsCmd() throws Exception {\n         AttributeKvEntry dataPoint2 = new BaseAttributeKvEntry(now, new LongDataEntry(\"serverAttributeKey\", 52L));\n \n         wsClient.registerWaitForUpdate();\n+        Thread.sleep(100);\n         sendAttributes(device, TbAttributeSubscriptionScope.SERVER_SCOPE, Arrays.asList(dataPoint2));\n         msg = wsClient.waitForUpdate();\n \n@@ -498,12 +495,14 @@ public void testEntityDataLatestAttrWsCmd() throws Exception {\n \n         //Sending update from the past, while latest value has new timestamp;\n         wsClient.registerWaitForUpdate();\n+        Thread.sleep(100);\n         sendAttributes(device, TbAttributeSubscriptionScope.SERVER_SCOPE, Arrays.asList(dataPoint1));\n         msg = wsClient.waitForUpdate(TimeUnit.SECONDS.toMillis(1));\n         Assert.assertNull(msg);\n \n         //Sending duplicate update again\n         wsClient.registerWaitForUpdate();\n+        Thread.sleep(100);\n         sendAttributes(device, TbAttributeSubscriptionScope.SERVER_SCOPE, Arrays.asList(dataPoint2));\n         msg = wsClient.waitForUpdate(TimeUnit.SECONDS.toMillis(1));\n         Assert.assertNull(msg);",
      "parent_sha": "714b7bd7798bde87e15da2aeb8ae985363d58353"
    }
  },
  {
    "oid": "57b09b2328aa6c97b41eb48ca87141a97b1adebe",
    "message": "device delete transactional and cache evict refactor",
    "date": "2021-12-20T13:35:23Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/57b09b2328aa6c97b41eb48ca87141a97b1adebe",
    "details": {
      "sha": "f70d1c1ffe79f25e57438300a8a8597c3225b516",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/device/DeviceServiceImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/57b09b2328aa6c97b41eb48ca87141a97b1adebe/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceServiceImpl.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/57b09b2328aa6c97b41eb48ca87141a97b1adebe/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceServiceImpl.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceServiceImpl.java?ref=57b09b2328aa6c97b41eb48ca87141a97b1adebe",
      "patch": "@@ -336,12 +336,14 @@ public Device unassignDeviceFromCustomer(TenantId tenantId, DeviceId deviceId) {\n         return savedDevice;\n     }\n \n+    @Transactional\n     @Override\n-    public void deleteDevice(TenantId tenantId, DeviceId deviceId) {\n+    public void deleteDevice(final TenantId tenantId, final DeviceId deviceId) {\n         log.trace(\"Executing deleteDevice [{}]\", deviceId);\n         validateId(deviceId, INCORRECT_DEVICE_ID + deviceId);\n \n         Device device = deviceDao.findById(tenantId, deviceId.getId());\n+        final String deviceName = device.getName();\n         try {\n             List<EntityView> entityViews = entityViewService.findEntityViewsByTenantIdAndEntityIdAsync(device.getTenantId(), deviceId).get();\n             if (entityViews != null && !entityViews.isEmpty()) {\n@@ -358,10 +360,10 @@ public void deleteDevice(TenantId tenantId, DeviceId deviceId) {\n         }\n         deleteEntityRelations(tenantId, deviceId);\n \n-        removeDeviceFromCacheByName(tenantId, device.getName());\n-        removeDeviceFromCacheById(tenantId, device.getId());\n-\n         deviceDao.removeById(tenantId, deviceId.getId());\n+\n+        removeDeviceFromCacheByName(tenantId, deviceName);\n+        removeDeviceFromCacheById(tenantId, deviceId);\n     }\n \n     private void removeDeviceFromCacheByName(TenantId tenantId, String name) {",
      "parent_sha": "7072713f129125bba15838edd5437b76d0497d57"
    }
  },
  {
    "oid": "e680b33c9c94aa06ea39c0ee6f04939ad0d7e406",
    "message": "fixed EntityDataAdapter.convertValue that convert \"500D\" (valid Java number) into \"500\" as double.",
    "date": "2021-12-13T17:40:01Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/e680b33c9c94aa06ea39c0ee6f04939ad0d7e406",
    "details": {
      "sha": "a25a5f6201244c16d84dbe63269745f57482c1d5",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/sql/query/EntityDataAdapter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/e680b33c9c94aa06ea39c0ee6f04939ad0d7e406/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FEntityDataAdapter.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/e680b33c9c94aa06ea39c0ee6f04939ad0d7e406/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FEntityDataAdapter.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FEntityDataAdapter.java?ref=e680b33c9c94aa06ea39c0ee6f04939ad0d7e406",
      "patch": "@@ -83,7 +83,7 @@ static String convertValue(Object value) {\n         if (value != null) {\n             String strVal = value.toString();\n             // check number\n-            if (NumberUtils.isNumber(strVal)) {\n+            if (strVal.length() > 0 && NumberUtils.isParsable(strVal)) {\n                 try {\n                     long longVal = Long.parseLong(strVal);\n                     return Long.toString(longVal);",
      "parent_sha": "3c340dc7d2a3c9cf1ecc73cd643c0de833a6a863"
    }
  },
  {
    "oid": "04ff4bd9ae15bcddd9fdf411c7258391f2c9cb10",
    "message": "refactored handleError method: status code and message are being retrieved from exception",
    "date": "2024-03-07T13:38:27Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/04ff4bd9ae15bcddd9fdf411c7258391f2c9cb10",
    "details": {
      "sha": "e773e5ffd66fdc0a60361941a03fa8b7569c9a91",
      "filename": "application/src/main/java/org/thingsboard/server/exception/ThingsboardErrorResponseHandler.java",
      "status": "modified",
      "additions": 10,
      "deletions": 16,
      "changes": 26,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/04ff4bd9ae15bcddd9fdf411c7258391f2c9cb10/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fexception%2FThingsboardErrorResponseHandler.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/04ff4bd9ae15bcddd9fdf411c7258391f2c9cb10/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fexception%2FThingsboardErrorResponseHandler.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fexception%2FThingsboardErrorResponseHandler.java?ref=04ff4bd9ae15bcddd9fdf411c7258391f2c9cb10",
      "patch": "@@ -16,6 +16,7 @@\n package org.thingsboard.server.exception;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.springframework.boot.web.servlet.error.ErrorController;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n@@ -50,9 +51,11 @@\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.swing.text.html.Option;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n \n import static javax.servlet.RequestDispatcher.ERROR_EXCEPTION;\n \n@@ -102,22 +105,13 @@ private static HttpStatus errorCodeToStatus(ThingsboardErrorCode errorCode) {\n \n     @RequestMapping(\"/error\")\n     public ResponseEntity<Object> handleError(HttpServletRequest request) {\n-        Object status = request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-\n-        if (status != null) {\n-            int statusCode = Integer.parseInt(status.toString());\n-            if(statusCode == HttpStatus.NOT_FOUND.value()) {\n-                return new ResponseEntity<>(ThingsboardErrorResponse.of(PATH_NOT_FOUND_ERROR_DESCRIPTION, ThingsboardErrorCode.ITEM_NOT_FOUND, HttpStatus.NOT_FOUND), HttpStatus.NOT_FOUND);\n-            }\n-        }\n-        String errorMessage;\n-        Throwable throwable = (Throwable) request.getAttribute(ERROR_EXCEPTION);\n-        if (throwable != null) {\n-            errorMessage = throwable.getMessage();\n-        } else {\n-            errorMessage = GENERAL_ERROR_DESCRIPTION;\n-        }\n-        return new ResponseEntity<>(ThingsboardErrorResponse.of(errorMessage, ThingsboardErrorCode.GENERAL, HttpStatus.INTERNAL_SERVER_ERROR), HttpStatus.INTERNAL_SERVER_ERROR);\n+        HttpStatus httpStatus = Optional.ofNullable(request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE))\n+                .map(status -> HttpStatus.resolve(Integer.parseInt(status.toString())))\n+                .orElse(HttpStatus.INTERNAL_SERVER_ERROR);\n+        String errorMessage = Optional.ofNullable(request.getAttribute(ERROR_EXCEPTION))\n+                .map(e -> (ExceptionUtils.getMessage((Throwable) e)))\n+                .orElse(httpStatus.getReasonPhrase());\n+        return new ResponseEntity<>(ThingsboardErrorResponse.of(errorMessage, statusToErrorCode(httpStatus), httpStatus), httpStatus);\n     }\n \n     @Override",
      "parent_sha": "b67189429dbf45defc2b6929b4c9152550f7ee57"
    }
  },
  {
    "oid": "150b1bb809b222fb3fbcad1db5e3736362071fba",
    "message": "AlarmState improvements (used createDetails for update or clear alarm).",
    "date": "2020-11-16T11:07:58Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/150b1bb809b222fb3fbcad1db5e3736362071fba",
    "details": {
      "sha": "30a861134a1660a53d88c378aed8dddf2fac2171",
      "filename": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/profile/AlarmState.java",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/150b1bb809b222fb3fbcad1db5e3736362071fba/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/150b1bb809b222fb3fbcad1db5e3736362071fba/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java?ref=150b1bb809b222fb3fbcad1db5e3736362071fba",
      "patch": "@@ -111,7 +111,7 @@ public <T> boolean createOrClearAlarms(TbContext ctx, T data, SnapshotUpdate upd\n                 for (AlarmRuleState state : createRulesSortedBySeverityDesc) {\n                     stateUpdate = clearAlarmState(stateUpdate, state);\n                 }\n-                ctx.getAlarmService().clearAlarm(ctx.getTenantId(), currentAlarm.getId(), JacksonUtil.OBJECT_MAPPER.createObjectNode(), System.currentTimeMillis());\n+                ctx.getAlarmService().clearAlarm(ctx.getTenantId(), currentAlarm.getId(), createDetails(clearState), System.currentTimeMillis());\n                 pushMsg(ctx, new TbAlarmResult(false, false, true, currentAlarm));\n                 currentAlarm = null;\n             } else if (AlarmEvalResult.FALSE.equals(evalResult)) {\n@@ -203,6 +203,7 @@ private TbAlarmResult calculateAlarmResult(TbContext ctx, AlarmRuleState ruleSta\n             AlarmSeverity oldSeverity = currentAlarm.getSeverity();\n             // Skip update if severity is decreased.\n             if (severity.ordinal() <= oldSeverity.ordinal()) {\n+                currentAlarm.setDetails(createDetails(ruleState));\n                 if (!oldSeverity.equals(severity)) {\n                     currentAlarm.setSeverity(severity);\n                     currentAlarm = ctx.getAlarmService().createOrUpdateAlarm(currentAlarm);\n@@ -235,19 +236,24 @@ private TbAlarmResult calculateAlarmResult(TbContext ctx, AlarmRuleState ruleSta\n     }\n \n     private JsonNode createDetails(AlarmRuleState ruleState) {\n-        ObjectNode details = JacksonUtil.OBJECT_MAPPER.createObjectNode();\n-        String alarmDetails = ruleState.getAlarmRule().getAlarmDetails();\n+        JsonNode alarmDetails;\n+        String alarmDetailsStr = ruleState.getAlarmRule().getAlarmDetails();\n \n-        if (alarmDetails != null) {\n+        if (alarmDetailsStr != null) {\n             for (KeyFilter keyFilter : ruleState.getAlarmRule().getCondition().getCondition()) {\n                 EntityKeyValue entityKeyValue = dataSnapshot.getValue(keyFilter.getKey());\n-                alarmDetails = alarmDetails.replaceAll(String.format(\"\\\\$\\\\{%s}\", keyFilter.getKey().getKey()), getValueAsString(entityKeyValue));\n+                alarmDetailsStr = alarmDetailsStr.replaceAll(String.format(\"\\\\$\\\\{%s}\", keyFilter.getKey().getKey()), getValueAsString(entityKeyValue));\n             }\n-\n-            details.put(\"data\", alarmDetails);\n+            ObjectNode newDetails = JacksonUtil.OBJECT_MAPPER.createObjectNode();\n+            newDetails.put(\"data\", alarmDetailsStr);\n+            alarmDetails = newDetails;\n+        } else if (currentAlarm != null) {\n+            alarmDetails = currentAlarm.getDetails();\n+        } else {\n+            alarmDetails = JacksonUtil.OBJECT_MAPPER.createObjectNode();\n         }\n \n-        return details;\n+        return alarmDetails;\n     }\n \n     private static String getValueAsString(EntityKeyValue entityKeyValue) {",
      "parent_sha": "10e6b9a458d7d49596f3fc89ead24bbec6f3c74b"
    }
  },
  {
    "oid": "4f7420b92a0628d74d8e8f6e01d700ba5742ac12",
    "message": "add WAIT_TIMEOUT and duration to constants",
    "date": "2023-04-19T12:33:04Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/4f7420b92a0628d74d8e8f6e01d700ba5742ac12",
    "details": {
      "sha": "09957ead65df1882a2e9185d5a9a1db91a99c77a",
      "filename": "msa/black-box-tests/src/test/java/org/thingsboard/server/msa/ui/base/AbstractDriverBaseTest.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/4f7420b92a0628d74d8e8f6e01d700ba5742ac12/msa%2Fblack-box-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fmsa%2Fui%2Fbase%2FAbstractDriverBaseTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/4f7420b92a0628d74d8e8f6e01d700ba5742ac12/msa%2Fblack-box-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fmsa%2Fui%2Fbase%2FAbstractDriverBaseTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/msa%2Fblack-box-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fmsa%2Fui%2Fbase%2FAbstractDriverBaseTest.java?ref=4f7420b92a0628d74d8e8f6e01d700ba5742ac12",
      "patch": "@@ -49,6 +49,7 @@\n import java.time.Duration;\n import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -68,6 +69,8 @@ abstract public class AbstractDriverBaseTest extends AbstractContainerTest {\n     protected static final PageLink pageLink = new PageLink(10);\n     private static final ContainerTestSuite instance = ContainerTestSuite.getInstance();\n     private JavascriptExecutor js;\n+    public static final long WAIT_TIMEOUT = TimeUnit.SECONDS.toMillis(10);\n+    private final Duration duration = Duration.ofMillis(WAIT_TIMEOUT);\n \n     @BeforeClass\n     public void startUp() throws MalformedURLException {\n@@ -105,8 +108,7 @@ public void teardown() {\n     }\n \n     public String getJwtTokenFromLocalStorage() {\n-        js = (JavascriptExecutor) driver;\n-        return (String) js.executeScript(\"return window.localStorage.getItem('jwt_token');\");\n+        return (String) getJs().executeScript(\"return window.localStorage.getItem('jwt_token');\");\n     }\n \n     public void openBaseUiUrl() {\n@@ -122,7 +124,7 @@ public WebDriver getDriver() {\n     }\n \n     protected boolean urlContains(String urlPath) {\n-        WebDriverWait wait = new WebDriverWait(driver, Duration.ofMillis(5000));\n+        WebDriverWait wait = new WebDriverWait(driver, duration);\n         try {\n             wait.until(ExpectedConditions.urlContains(urlPath));\n         } catch (WebDriverException e) {\n@@ -132,8 +134,7 @@ protected boolean urlContains(String urlPath) {\n     }\n \n     public void jsClick(WebElement element) {\n-        js = (JavascriptExecutor) driver;\n-        js.executeScript(\"arguments[0].click();\", element);\n+        getJs().executeScript(\"arguments[0].click();\", element);\n     }\n \n     public static RuleChain getRuleChainByName(String name) {\n@@ -193,6 +194,10 @@ public void captureScreen(WebDriver driver, String screenshotName) {\n         }\n     }\n \n+    public JavascriptExecutor getJs() {\n+        return js = (JavascriptExecutor) driver;\n+    }\n+\n     public void assertIsDisplayed(WebElement element) {\n         assertThat(element.isDisplayed()).as(element + \" is displayed\").isTrue();\n     }",
      "parent_sha": "b0ecb5b86f0842eb4eec71248425747a37f776d4"
    }
  },
  {
    "oid": "12ad7a50e6c4aaf6fe55fadfcfd8bc7a260083b9",
    "message": "fixed qr code settings",
    "date": "2024-10-31T16:38:39Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/12ad7a50e6c4aaf6fe55fadfcfd8bc7a260083b9",
    "details": {
      "sha": "6c548cb02da4dc4ea2be82eba6724267ef9ae2d6",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/service/validator/QrCodeSettingsDataValidator.java",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/12ad7a50e6c4aaf6fe55fadfcfd8bc7a260083b9/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2Fvalidator%2FQrCodeSettingsDataValidator.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/12ad7a50e6c4aaf6fe55fadfcfd8bc7a260083b9/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2Fvalidator%2FQrCodeSettingsDataValidator.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2Fvalidator%2FQrCodeSettingsDataValidator.java?ref=12ad7a50e6c4aaf6fe55fadfcfd8bc7a260083b9",
      "patch": "@@ -42,17 +42,18 @@ protected void validateDataImpl(TenantId tenantId, QrCodeSettings qrCodeSettings\n         if (!qrCodeSettings.isUseDefaultApp() && (mobileAppBundleId == null)) {\n             throw new DataValidationException(\"Mobile app bundle is required to use custom application!\");\n         }\n-        if (!qrCodeSettings.isUseDefaultApp()){\n-            MobileApp androidApp = mobileAppDao.findByBundleIdAndPlatformType(tenantId, mobileAppBundleId, PlatformType.ANDROID);\n-            StoreInfo androidStoreInfo = androidApp.getStoreInfo();\n-            if (androidStoreInfo == null) {\n-                throw new DataValidationException(\"Android app store info is empty! \");\n+        if (!qrCodeSettings.isUseDefaultApp()) {\n+            if (qrCodeSettings.isAndroidEnabled()) {\n+                MobileApp androidApp = mobileAppDao.findByBundleIdAndPlatformType(tenantId, mobileAppBundleId, PlatformType.ANDROID);\n+                if (androidApp != null && androidApp.getStoreInfo() == null) {\n+                    throw new DataValidationException(\"Android app store info is empty! \");\n+                }\n             }\n-\n-            MobileApp iosApp = mobileAppDao.findByBundleIdAndPlatformType(tenantId, mobileAppBundleId, PlatformType.IOS);\n-            StoreInfo iosStoreInfo = iosApp.getStoreInfo();\n-            if (iosStoreInfo == null) {\n-                throw new DataValidationException(\"IOS app store info is empty! \");\n+            if (qrCodeSettings.isIosEnabled()) {\n+                MobileApp iosApp = mobileAppDao.findByBundleIdAndPlatformType(tenantId, mobileAppBundleId, PlatformType.IOS);\n+                if (iosApp != null && iosApp.getStoreInfo() == null) {\n+                    throw new DataValidationException(\"IOS app store info is empty! \");\n+                }\n             }\n         }\n     }",
      "parent_sha": "21172a61955ac9131c2561f7a4552372760291ac"
    }
  },
  {
    "oid": "4f0f95912ea843319a2b4d9c558db192e4b35add",
    "message": "BaseQueueServiceTest is abstract",
    "date": "2022-03-31T17:42:57Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/4f0f95912ea843319a2b4d9c558db192e4b35add",
    "details": {
      "sha": "173f5962876af2707b2f7a371ff71336976245f1",
      "filename": "dao/src/test/java/org/thingsboard/server/dao/service/BaseQueueServiceTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/4f0f95912ea843319a2b4d9c558db192e4b35add/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2FBaseQueueServiceTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/4f0f95912ea843319a2b4d9c558db192e4b35add/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2FBaseQueueServiceTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2FBaseQueueServiceTest.java?ref=4f0f95912ea843319a2b4d9c558db192e4b35add",
      "patch": "@@ -38,7 +38,7 @@\n import java.util.Collections;\n import java.util.List;\n \n-public class BaseQueueServiceTest extends AbstractServiceTest {\n+public abstract class BaseQueueServiceTest extends AbstractServiceTest {\n \n     private IdComparator<Queue> idComparator = new IdComparator<>();\n ",
      "parent_sha": "061ffcba53ceca03ca27b293cc6290808d04e49a"
    }
  },
  {
    "oid": "60348d91d58db2ce84cc061943d38788cf77f113",
    "message": "DefaultTelemetrySubscriptionService - @Lazy TbEntityViewService",
    "date": "2022-06-22T05:51:25Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/60348d91d58db2ce84cc061943d38788cf77f113",
    "details": {
      "sha": "9ee4543b68f7f62d8df842491bd7c3baee9625b8",
      "filename": "application/src/main/java/org/thingsboard/server/service/telemetry/DefaultTelemetrySubscriptionService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/60348d91d58db2ce84cc061943d38788cf77f113/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Ftelemetry%2FDefaultTelemetrySubscriptionService.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/60348d91d58db2ce84cc061943d38788cf77f113/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Ftelemetry%2FDefaultTelemetrySubscriptionService.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Ftelemetry%2FDefaultTelemetrySubscriptionService.java?ref=60348d91d58db2ce84cc061943d38788cf77f113",
      "patch": "@@ -21,6 +21,7 @@\n import com.google.common.util.concurrent.MoreExecutors;\n import lombok.extern.slf4j.Slf4j;\n import org.jetbrains.annotations.NotNull;\n+import org.springframework.context.annotation.Lazy;\n import org.springframework.stereotype.Service;\n import org.thingsboard.common.util.ThingsBoardThreadFactory;\n import org.thingsboard.server.cluster.TbClusterService;\n@@ -83,7 +84,7 @@ public class DefaultTelemetrySubscriptionService extends AbstractSubscriptionSer\n \n     public DefaultTelemetrySubscriptionService(AttributesService attrService,\n                                                TimeseriesService tsService,\n-                                               TbEntityViewService tbEntityViewService,\n+                                               @Lazy TbEntityViewService tbEntityViewService,\n                                                TbClusterService clusterService,\n                                                PartitionService partitionService,\n                                                TbApiUsageClient apiUsageClient,",
      "parent_sha": "380e9949514509984255d5d0565f111e95cc3f1b"
    }
  },
  {
    "oid": "72873d4ad0ee33904f68775e844d336a691cc0b1",
    "message": "fixed concurrent modification in TbSubscriptionsInfo",
    "date": "2024-09-17T16:34:48Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/72873d4ad0ee33904f68775e844d336a691cc0b1",
    "details": {
      "sha": "a65fc0bedb39c4b280e5aeb6ba5cd20dd1c8d02b",
      "filename": "application/src/main/java/org/thingsboard/server/service/subscription/TbSubscriptionsInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/72873d4ad0ee33904f68775e844d336a691cc0b1/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsubscription%2FTbSubscriptionsInfo.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/72873d4ad0ee33904f68775e844d336a691cc0b1/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsubscription%2FTbSubscriptionsInfo.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fsubscription%2FTbSubscriptionsInfo.java?ref=72873d4ad0ee33904f68775e844d336a691cc0b1",
      "patch": "@@ -20,6 +20,7 @@\n import lombok.RequiredArgsConstructor;\n import lombok.ToString;\n \n+import java.util.HashSet;\n import java.util.Set;\n \n /**\n@@ -48,7 +49,7 @@ protected TbSubscriptionsInfo copy() {\n     }\n \n     protected TbSubscriptionsInfo copy(int seqNumber) {\n-        return new TbSubscriptionsInfo(notifications, alarms, tsAllKeys, tsKeys, attrAllKeys, attrKeys, seqNumber);\n+        return new TbSubscriptionsInfo(notifications, alarms, tsAllKeys, tsKeys != null ? new HashSet<>(tsKeys) : null, attrAllKeys, attrKeys != null ? new HashSet<>(attrKeys) : null, seqNumber);\n     }\n \n }",
      "parent_sha": "bbfc73651677272a7308ce294978c31006470ac2"
    }
  },
  {
    "oid": "5f0bd38816346bb32d1657c7a5426986c834b8ff",
    "message": "Fixed log level",
    "date": "2021-07-06T11:15:45Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/5f0bd38816346bb32d1657c7a5426986c834b8ff",
    "details": {
      "sha": "0df5fcaaa5428bad7f8a19ab9521f3f8f534b882",
      "filename": "application/src/main/java/org/thingsboard/server/actors/device/DeviceActorMessageProcessor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/5f0bd38816346bb32d1657c7a5426986c834b8ff/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/5f0bd38816346bb32d1657c7a5426986c834b8ff/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java?ref=5f0bd38816346bb32d1657c7a5426986c834b8ff",
      "patch": "@@ -864,7 +864,7 @@ void init(TbActorCtx ctx) {\n     }\n \n     void checkSessionsTimeout() {\n-        log.info(\"[{}] checkSessionsTimeout started. Size before check {}\", deviceId, sessions.size());\n+        log.debug(\"[{}] checkSessionsTimeout started. Size before check {}\", deviceId, sessions.size());\n         long expTime = System.currentTimeMillis() - systemContext.getSessionInactivityTimeout();\n         Map<UUID, SessionInfoMetaData> sessionsToRemove = sessions.entrySet().stream().filter(kv -> kv.getValue().getLastActivityTime() < expTime).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n         sessionsToRemove.forEach((sessionId, sessionMD) -> {\n@@ -876,7 +876,7 @@ void checkSessionsTimeout() {\n         if (!sessionsToRemove.isEmpty()) {\n             dumpSessions();\n         }\n-        log.info(\"[{}] checkSessionsTimeout finished. Size after check {}\", deviceId, sessions.size());\n+        log.debug(\"[{}] checkSessionsTimeout finished. Size after check {}\", deviceId, sessions.size());\n     }\n \n }",
      "parent_sha": "989a2d24f878cfca639082a338171c55e5ead64a"
    }
  },
  {
    "oid": "5391d296f3d8586bcff6ec1c4c0ce4c248daccd9",
    "message": "Remove device from cache in case null value cached in the distributed redis",
    "date": "2021-02-08T13:24:29Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/5391d296f3d8586bcff6ec1c4c0ce4c248daccd9",
    "details": {
      "sha": "9cb7c5d0d9ddda41ec29c8378630b41fd5a72c99",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/device/DeviceServiceImpl.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/5391d296f3d8586bcff6ec1c4c0ce4c248daccd9/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceServiceImpl.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/5391d296f3d8586bcff6ec1c4c0ce4c248daccd9/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceServiceImpl.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceServiceImpl.java?ref=5391d296f3d8586bcff6ec1c4c0ce4c248daccd9",
      "patch": "@@ -203,6 +203,8 @@ private Device doSaveDevice(Device device, String accessToken) {\n         } catch (Exception t) {\n             ConstraintViolationException e = extractConstraintViolationException(t).orElse(null);\n             if (e != null && e.getConstraintName() != null && e.getConstraintName().equalsIgnoreCase(\"device_name_unq_key\")) {\n+                // remove device from cache in case null value cached in the distributed redis.\n+                removeDeviceFromCache(device.getTenantId(), device.getName());\n                 throw new DataValidationException(\"Device with such name already exists!\");\n             } else {\n                 throw t;\n@@ -281,13 +283,17 @@ public void deleteDevice(TenantId tenantId, DeviceId deviceId) {\n         }\n         deleteEntityRelations(tenantId, deviceId);\n \n+        removeDeviceFromCache(tenantId, device.getName());\n+\n+        deviceDao.removeById(tenantId, deviceId.getId());\n+    }\n+\n+    private void removeDeviceFromCache(TenantId tenantId, String name) {\n         List<Object> list = new ArrayList<>();\n-        list.add(device.getTenantId());\n-        list.add(device.getName());\n+        list.add(tenantId);\n+        list.add(name);\n         Cache cache = cacheManager.getCache(DEVICE_CACHE);\n         cache.evict(list);\n-\n-        deviceDao.removeById(tenantId, deviceId.getId());\n     }\n \n     @Override",
      "parent_sha": "0f3d32093374f08eedc6775e541ee5456f23dd37"
    }
  },
  {
    "oid": "34e86a426064a274357910514e7a1d9d46bc4abd",
    "message": "Rollback system widgets install",
    "date": "2024-10-23T10:35:09Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/34e86a426064a274357910514e7a1d9d46bc4abd",
    "details": {
      "sha": "76bf7b2e69fcdfedb197855eaff20fd5762f6f63",
      "filename": "application/src/main/java/org/thingsboard/server/service/install/InstallScripts.java",
      "status": "modified",
      "additions": 94,
      "deletions": 6,
      "changes": 100,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/34e86a426064a274357910514e7a1d9d46bc4abd/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2FInstallScripts.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/34e86a426064a274357910514e7a1d9d46bc4abd/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2FInstallScripts.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Finstall%2FInstallScripts.java?ref=34e86a426064a274357910514e7a1d9d46bc4abd",
      "patch": "@@ -40,6 +40,7 @@\n import org.thingsboard.server.common.data.rule.RuleChain;\n import org.thingsboard.server.common.data.rule.RuleChainMetaData;\n import org.thingsboard.server.common.data.widget.WidgetTypeDetails;\n+import org.thingsboard.server.common.data.widget.WidgetsBundle;\n import org.thingsboard.server.dao.dashboard.DashboardService;\n import org.thingsboard.server.dao.exception.DataValidationException;\n import org.thingsboard.server.dao.oauth2.OAuth2ConfigTemplateService;\n@@ -58,7 +59,9 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.function.Function;\n import java.util.stream.Stream;\n@@ -210,14 +213,91 @@ public RuleChain createRuleChainFromFile(TenantId tenantId, Path templateFilePat\n \n     public void loadSystemWidgets() throws Exception {\n         log.info(\"Loading system widgets\");\n-\n+        Map<Path, JsonNode> widgetsBundlesMap = new HashMap<>();\n         Path widgetBundlesDir = Paths.get(getDataDir(), JSON_DIR, SYSTEM_DIR, WIDGET_BUNDLES_DIR);\n-        Stream<String> bundles = listDir(widgetBundlesDir).filter(path -> path.toString().endsWith(JSON_EXT)).map(this::getContent);\n+        try (DirectoryStream<Path> dirStream = Files.newDirectoryStream(widgetBundlesDir, path -> path.toString().endsWith(JSON_EXT))) {\n+            dirStream.forEach(\n+                    path -> {\n+                        JsonNode widgetsBundleDescriptorJson;\n+                        try {\n+                            widgetsBundleDescriptorJson = JacksonUtil.toJsonNode(path.toFile());\n+                        } catch (Exception e) {\n+                            log.error(\"Unable to parse widgets bundle from json: [{}]\", path);\n+                            throw new RuntimeException(\"Unable to parse widgets bundle from json\", e);\n+                        }\n+                        if (widgetsBundleDescriptorJson == null || !widgetsBundleDescriptorJson.has(\"widgetsBundle\")) {\n+                            log.error(\"Invalid widgets bundle json: [{}]\", path);\n+                            throw new RuntimeException(\"Invalid widgets bundle json: [\" + path + \"]\");\n+                        }\n+                        widgetsBundlesMap.put(path, widgetsBundleDescriptorJson);\n+                        JsonNode bundleAliasNode = widgetsBundleDescriptorJson.get(\"widgetsBundle\").get(\"alias\");\n+                        if (bundleAliasNode == null || !bundleAliasNode.isTextual()) {\n+                            log.error(\"Invalid widgets bundle json: [{}]\", path);\n+                            throw new RuntimeException(\"Invalid widgets bundle json: [\" + path + \"]\");\n+                        }\n+                        String bundleAlias = bundleAliasNode.asText();\n+                        try {\n+                            this.deleteSystemWidgetBundle(bundleAlias);\n+                        } catch (Exception e) {\n+                            log.error(\"Failed to delete system widgets bundle: [{}]\", bundleAlias);\n+                            throw new RuntimeException(\"Failed to delete system widgets bundle: [\" + bundleAlias + \"]\", e);\n+                        }\n+                    }\n+            );\n+        }\n         Path widgetTypesDir = Paths.get(getDataDir(), JSON_DIR, SYSTEM_DIR, WIDGET_TYPES_DIR);\n-        Stream<String> widgets = listDir(widgetTypesDir).filter(path -> path.toString().endsWith(JSON_EXT)).map(this::getContent);\n-        widgetsBundleService.updateSystemWidgets(bundles, widgets);\n-\n-        loadSystemScadaSymbols();\n+        if (Files.exists(widgetTypesDir)) {\n+            try (DirectoryStream<Path> dirStream = Files.newDirectoryStream(widgetTypesDir, path -> path.toString().endsWith(JSON_EXT))) {\n+                dirStream.forEach(\n+                        path -> {\n+                            try {\n+                                JsonNode widgetTypeJson = JacksonUtil.toJsonNode(path.toFile());\n+                                WidgetTypeDetails widgetTypeDetails = JacksonUtil.treeToValue(widgetTypeJson, WidgetTypeDetails.class);\n+                                widgetTypeService.saveWidgetType(widgetTypeDetails);\n+                            } catch (Exception e) {\n+                                log.error(\"Unable to load widget type from json: [{}]\", path.toString());\n+                                throw new RuntimeException(\"Unable to load widget type from json\", e);\n+                            }\n+                        }\n+                );\n+            }\n+        }\n+        this.loadSystemScadaSymbols();\n+        for (var widgetsBundleDescriptorEntry : widgetsBundlesMap.entrySet()) {\n+            Path path = widgetsBundleDescriptorEntry.getKey();\n+            try {\n+                JsonNode widgetsBundleDescriptorJson = widgetsBundleDescriptorEntry.getValue();\n+                JsonNode widgetsBundleJson = widgetsBundleDescriptorJson.get(\"widgetsBundle\");\n+                WidgetsBundle widgetsBundle = JacksonUtil.treeToValue(widgetsBundleJson, WidgetsBundle.class);\n+                WidgetsBundle savedWidgetsBundle = widgetsBundleService.saveWidgetsBundle(widgetsBundle);\n+                List<String> widgetTypeFqns = new ArrayList<>();\n+                if (widgetsBundleDescriptorJson.has(\"widgetTypes\")) {\n+                    JsonNode widgetTypesArrayJson = widgetsBundleDescriptorJson.get(\"widgetTypes\");\n+                    widgetTypesArrayJson.forEach(\n+                            widgetTypeJson -> {\n+                                try {\n+                                    WidgetTypeDetails widgetTypeDetails = JacksonUtil.treeToValue(widgetTypeJson, WidgetTypeDetails.class);\n+                                    var savedWidgetType = widgetTypeService.saveWidgetType(widgetTypeDetails);\n+                                    widgetTypeFqns.add(savedWidgetType.getFqn());\n+                                } catch (Exception e) {\n+                                    log.error(\"Unable to load widget type from json: [{}]\", path.toString());\n+                                    throw new RuntimeException(\"Unable to load widget type from json\", e);\n+                                }\n+                            }\n+                    );\n+                }\n+                if (widgetsBundleDescriptorJson.has(\"widgetTypeFqns\")) {\n+                    JsonNode widgetFqnsArrayJson = widgetsBundleDescriptorJson.get(\"widgetTypeFqns\");\n+                    widgetFqnsArrayJson.forEach(fqnJson -> {\n+                        widgetTypeFqns.add(fqnJson.asText());\n+                    });\n+                }\n+                widgetTypeService.updateWidgetsBundleWidgetFqns(TenantId.SYS_TENANT_ID, savedWidgetsBundle.getId(), widgetTypeFqns);\n+            } catch (Exception e) {\n+                log.error(\"Unable to load widgets bundle from json: [{}]\", path.toString());\n+                throw new RuntimeException(\"Unable to load widgets bundle from json\", e);\n+            }\n+        }\n     }\n \n     private void loadSystemScadaSymbols() throws Exception {\n@@ -308,6 +388,14 @@ private WidgetTypeDetails saveScadaSymbolWidget(WidgetTypeDetails template, TbRe\n         return widgetTypeService.saveWidgetType(scadaSymbolWidget);\n     }\n \n+    private void deleteSystemWidgetBundle(String bundleAlias) {\n+        WidgetsBundle widgetsBundle = widgetsBundleService.findWidgetsBundleByTenantIdAndAlias(TenantId.SYS_TENANT_ID, bundleAlias);\n+        if (widgetsBundle != null) {\n+            widgetTypeService.deleteWidgetTypesByBundleId(TenantId.SYS_TENANT_ID, widgetsBundle.getId());\n+            widgetsBundleService.deleteWidgetsBundle(TenantId.SYS_TENANT_ID, widgetsBundle.getId());\n+        }\n+    }\n+\n     public void updateImages() {\n         imagesUpdater.updateWidgetsBundlesImages();\n         imagesUpdater.updateWidgetTypesImages();",
      "parent_sha": "e4942dcbbf0c29bb004a9985bfcc8f3c6fb2cd75"
    }
  },
  {
    "oid": "4155fcd03fa2d08b2d583cb464ddaa631e5f0e72",
    "message": "Minor refactoring of private method after self review",
    "date": "2024-01-10T11:07:19Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/4155fcd03fa2d08b2d583cb464ddaa631e5f0e72",
    "details": {
      "sha": "4c03bb184773941f5cc07b9ee375f7418d04d017",
      "filename": "rest-client/src/main/java/org/thingsboard/rest/client/RestClient.java",
      "status": "modified",
      "additions": 10,
      "deletions": 16,
      "changes": 26,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/4155fcd03fa2d08b2d583cb464ddaa631e5f0e72/rest-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frest%2Fclient%2FRestClient.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/4155fcd03fa2d08b2d583cb464ddaa631e5f0e72/rest-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frest%2Fclient%2FRestClient.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rest-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frest%2Fclient%2FRestClient.java?ref=4155fcd03fa2d08b2d583cb464ddaa631e5f0e72",
      "patch": "@@ -2741,7 +2741,7 @@ public PageData<WidgetsBundle> getWidgetsBundles(PageLink pageLink, Boolean tena\n         addPageLinkToParam(params, pageLink);\n         addTenantOnlyAndFullSearchToParams(tenantOnly, fullSearch, params);\n         return restTemplate.exchange(\n-                baseURL + \"/api/widgetsBundles?\" + getUrlParams(pageLink) + getWidgetsBundlePageRequestUrlParams(tenantOnly, fullSearch),\n+                baseURL + \"/api/widgetsBundles?\" + getUrlParams(pageLink) + getTenantOnlyAndFullSearchUrlParams(tenantOnly, fullSearch),\n                 HttpMethod.GET,\n                 HttpEntity.EMPTY,\n                 new ParameterizedTypeReference<PageData<WidgetsBundle>>() {\n@@ -3776,33 +3776,27 @@ private String getUrlParams(PageLink pageLink) {\n         return urlParams;\n     }\n \n-    private String getWidgetsBundlePageRequestUrlParams(Boolean tenantOnly, Boolean fullSearch) {\n-        String urlParams = \"\";\n-        if (tenantOnly != null) {\n-            urlParams = \"&tenantOnly={tenantOnly}\";\n+    private String getWidgetTypeInfoPageRequestUrlParams(Boolean tenantOnly, Boolean fullSearch,\n+                                                         DeprecatedFilter deprecatedFilter,\n+                                                         List<String> widgetTypeList) {\n+        String urlParams = getTenantOnlyAndFullSearchUrlParams(tenantOnly, fullSearch);\n+        if (deprecatedFilter != null) {\n+            urlParams += \"&deprecatedFilter={deprecatedFilter}\";\n         }\n-        if (fullSearch != null) {\n-            urlParams += \"&fullSearch={fullSearch}\";\n+        if (!CollectionUtils.isEmpty(widgetTypeList)) {\n+            urlParams += \"&widgetTypeList={widgetTypeList}\";\n         }\n         return urlParams;\n     }\n \n-    private String getWidgetTypeInfoPageRequestUrlParams(Boolean tenantOnly, Boolean fullSearch,\n-                                                         DeprecatedFilter deprecatedFilter,\n-                                                         List<String> widgetTypeList) {\n+    private String getTenantOnlyAndFullSearchUrlParams(Boolean tenantOnly, Boolean fullSearch) {\n         String urlParams = \"\";\n         if (tenantOnly != null) {\n             urlParams = \"&tenantOnly={tenantOnly}\";\n         }\n         if (fullSearch != null) {\n             urlParams += \"&fullSearch={fullSearch}\";\n         }\n-        if (deprecatedFilter != null) {\n-            urlParams += \"&deprecatedFilter={deprecatedFilter}\";\n-        }\n-        if (!CollectionUtils.isEmpty(widgetTypeList)) {\n-            urlParams += \"&widgetTypeList={widgetTypeList}\";\n-        }\n         return urlParams;\n     }\n ",
      "parent_sha": "29289baeb49cbe5bc48baa97baacf00c52210547"
    }
  },
  {
    "oid": "8a2ca98000cf9c580b75a975c80f65b811bfc7fa",
    "message": "Rename 2FA Configu controller to have a good name in Swagger UI",
    "date": "2022-07-14T09:58:46Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/8a2ca98000cf9c580b75a975c80f65b811bfc7fa",
    "details": {
      "sha": "5aad5c9503a9b978383a1f78c75e693d9e31472e",
      "filename": "application/src/main/java/org/thingsboard/server/controller/TwoFactorAuthConfigController.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/8a2ca98000cf9c580b75a975c80f65b811bfc7fa/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FTwoFactorAuthConfigController.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/8a2ca98000cf9c580b75a975c80f65b811bfc7fa/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FTwoFactorAuthConfigController.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FTwoFactorAuthConfigController.java?ref=8a2ca98000cf9c580b75a975c80f65b811bfc7fa",
      "patch": "@@ -50,7 +50,7 @@\n @RequestMapping(\"/api/2fa\")\n @TbCoreComponent\n @RequiredArgsConstructor\n-public class TwoFaConfigController extends BaseController {\n+public class TwoFactorAuthConfigController extends BaseController {\n \n     private final TwoFaConfigManager twoFaConfigManager;\n     private final TwoFactorAuthService twoFactorAuthService;",
      "previous_filename": "application/src/main/java/org/thingsboard/server/controller/TwoFaConfigController.java",
      "parent_sha": "db590ddda85b8fb06a928ec20c21fb44abadf97b"
    }
  },
  {
    "oid": "1d35acd3408eb31b39a338e8bf2d254e7b1087b5",
    "message": "search_text: additionalInfo == null",
    "date": "2023-05-26T18:56:45Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/1d35acd3408eb31b39a338e8bf2d254e7b1087b5",
    "details": {
      "sha": "9f046a8768a64180f15554ae2c204ab9013c9be9",
      "filename": "common/data/src/main/java/org/thingsboard/server/common/data/BaseDataWithAdditionalInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/1d35acd3408eb31b39a338e8bf2d254e7b1087b5/common%2Fdata%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcommon%2Fdata%2FBaseDataWithAdditionalInfo.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/1d35acd3408eb31b39a338e8bf2d254e7b1087b5/common%2Fdata%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcommon%2Fdata%2FBaseDataWithAdditionalInfo.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Fdata%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcommon%2Fdata%2FBaseDataWithAdditionalInfo.java?ref=1d35acd3408eb31b39a338e8bf2d254e7b1087b5",
      "patch": "@@ -100,7 +100,8 @@ public static JsonNode getJson(Supplier<JsonNode> jsonData, Supplier<byte[]> bin\n     public static void setJson(JsonNode json, Consumer<JsonNode> jsonConsumer, Consumer<byte[]> bytesConsumer) {\n         jsonConsumer.accept(json);\n         try {\n-            bytesConsumer.accept(mapper.writeValueAsBytes(json));\n+            byte[] jsonConsumerToBytes = json == null ? null : mapper.writeValueAsBytes(json);\n+            bytesConsumer.accept(jsonConsumerToBytes);\n         } catch (JsonProcessingException e) {\n             log.warn(\"Can't serialize json data: \", e);\n         }",
      "parent_sha": "7076c1719fda16edfe8e9606c0bc334cbd593fca"
    }
  },
  {
    "oid": "be094fc62a7b0df444344d3c5796f61b57c1caf9",
    "message": "fix license",
    "date": "2020-11-16T17:15:34Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/be094fc62a7b0df444344d3c5796f61b57c1caf9",
    "details": {
      "sha": "51de9a1bc9b367cf8b7ab9b88bf814644d582e78",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/device/DeviceProfileServiceImpl.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/be094fc62a7b0df444344d3c5796f61b57c1caf9/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceProfileServiceImpl.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/be094fc62a7b0df444344d3c5796f61b57c1caf9/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceProfileServiceImpl.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceProfileServiceImpl.java?ref=be094fc62a7b0df444344d3c5796f61b57c1caf9",
      "patch": "@@ -1,12 +1,12 @@\n /**\n  * Copyright \u00a9 2016-2020 The Thingsboard Authors\n- * <p>\n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "parent_sha": "dc310f4cab6488beb3e70b377273c26c61348799"
    }
  },
  {
    "oid": "7e551cc92a94aef3727f5732837846c588a4805b",
    "message": "log: reduced severity to trace for DefaultTbQueueRequestTemplate.setupNextCleanup()",
    "date": "2021-06-17T10:11:50Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/7e551cc92a94aef3727f5732837846c588a4805b",
    "details": {
      "sha": "7fa3ac598903433ed1bcb780b6c62bfce584870e",
      "filename": "common/queue/src/main/java/org/thingsboard/server/queue/common/DefaultTbQueueRequestTemplate.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/7e551cc92a94aef3727f5732837846c588a4805b/common%2Fqueue%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fqueue%2Fcommon%2FDefaultTbQueueRequestTemplate.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/7e551cc92a94aef3727f5732837846c588a4805b/common%2Fqueue%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fqueue%2Fcommon%2FDefaultTbQueueRequestTemplate.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Fqueue%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fqueue%2Fcommon%2FDefaultTbQueueRequestTemplate.java?ref=7e551cc92a94aef3727f5732837846c588a4805b",
      "patch": "@@ -143,7 +143,7 @@ private boolean tryCleanStaleRequests() {\n \n     void setupNextCleanup() {\n         nextCleanupNs = getCurrentClockNs() + maxRequestTimeoutNs;\n-        log.info(\"setupNextCleanup {}\", nextCleanupNs);\n+        log.trace(\"setupNextCleanup {}\", nextCleanupNs);\n     }\n \n     List<Response> doPoll() {",
      "parent_sha": "1d33c09127165907def60b09bca41a11b60d8d85"
    }
  },
  {
    "oid": "19ab5ba921e353397a307cc00e0afc2147cb234a",
    "message": "Improve delete tenant method",
    "date": "2022-06-27T13:25:55Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/19ab5ba921e353397a307cc00e0afc2147cb234a",
    "details": {
      "sha": "45127d95171de5e2713c429c047d542de4ce656d",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/tenant/TenantServiceImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/19ab5ba921e353397a307cc00e0afc2147cb234a/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Ftenant%2FTenantServiceImpl.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/19ab5ba921e353397a307cc00e0afc2147cb234a/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Ftenant%2FTenantServiceImpl.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Ftenant%2FTenantServiceImpl.java?ref=19ab5ba921e353397a307cc00e0afc2147cb234a",
      "patch": "@@ -175,12 +175,12 @@ public void deleteTenant(TenantId tenantId) {\n         log.trace(\"Executing deleteTenant [{}]\", tenantId);\n         Validator.validateId(tenantId, INCORRECT_TENANT_ID + tenantId);\n         entityViewService.deleteEntityViewsByTenantId(tenantId);\n-        customerService.deleteCustomersByTenantId(tenantId);\n         widgetsBundleService.deleteWidgetsBundlesByTenantId(tenantId);\n         assetService.deleteAssetsByTenantId(tenantId);\n         deviceService.deleteDevicesByTenantId(tenantId);\n         deviceProfileService.deleteDeviceProfilesByTenantId(tenantId);\n         dashboardService.deleteDashboardsByTenantId(tenantId);\n+        customerService.deleteCustomersByTenantId(tenantId);\n         edgeService.deleteEdgesByTenantId(tenantId);\n         userService.deleteTenantAdmins(tenantId);\n         ruleChainService.deleteRuleChainsByTenantId(tenantId);",
      "parent_sha": "e91be1957bc0b439590a09e768eda1d0b3d4f5e5"
    }
  },
  {
    "oid": "f6cb46b06905c47632ecea662cbfc732d909900f",
    "message": "minor fix",
    "date": "2022-01-20T10:09:43Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/f6cb46b06905c47632ecea662cbfc732d909900f",
    "details": {
      "sha": "4b686f591936fc6e08b92ed00198b49d62fb3677",
      "filename": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/profile/AlarmRuleState.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/f6cb46b06905c47632ecea662cbfc732d909900f/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmRuleState.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/f6cb46b06905c47632ecea662cbfc732d909900f/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmRuleState.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmRuleState.java?ref=f6cb46b06905c47632ecea662cbfc732d909900f",
      "patch": "@@ -263,7 +263,7 @@ private Long resolveDynamicValue(DataSnapshot data, FilterPredicateValue<? exten\n         }\n \n         var longValue = getLongValue(keyValue);\n-        if (longValue != null) {\n+        if (longValue == null) {\n             String sourceAttribute = dynamicValue.getSourceAttribute();\n             throw new NumericParseException(String.format(\"could not parse attribute [%s: %s] from source!\", sourceAttribute, getStrValue(keyValue)));\n         }",
      "parent_sha": "f528e3c7600fdd30998d330cc61b1e3ee30fcb56"
    }
  },
  {
    "oid": "b93a397a23a84350e7610c6e65c6dd1a607a2b75",
    "message": "Fix NPE in the LwM2MClientOtaInfo",
    "date": "2021-06-25T09:18:50Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/b93a397a23a84350e7610c6e65c6dd1a607a2b75",
    "details": {
      "sha": "33b8bdfe811a11ae1fc53b0f7a1a85e4e7d1a2c1",
      "filename": "common/transport/lwm2m/src/main/java/org/thingsboard/server/transport/lwm2m/server/ota/LwM2MClientOtaInfo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/b93a397a23a84350e7610c6e65c6dd1a607a2b75/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fota%2FLwM2MClientOtaInfo.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/b93a397a23a84350e7610c6e65c6dd1a607a2b75/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fota%2FLwM2MClientOtaInfo.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fota%2FLwM2MClientOtaInfo.java?ref=b93a397a23a84350e7610c6e65c6dd1a607a2b75",
      "patch": "@@ -56,7 +56,7 @@ public class LwM2MClientOtaInfo {\n     public LwM2MClientOtaInfo(String endpoint, OtaPackageType type, Integer strategyCode, String baseUrl) {\n         this.endpoint = endpoint;\n         this.type = type;\n-        this.fwStrategy = LwM2MFirmwareUpdateStrategy.fromStrategyFwByCode(strategyCode);\n+        this.fwStrategy = strategyCode != null ? LwM2MFirmwareUpdateStrategy.fromStrategyFwByCode(strategyCode) : LwM2MFirmwareUpdateStrategy.OBJ_5_BINARY;\n         this.baseUrl = baseUrl;\n     }\n ",
      "parent_sha": "5bff4d1a6baed5725e72ceff0ebd790d472a7c99"
    }
  },
  {
    "oid": "39164573678268913a631fbc9abcfaa1e86b5fd2",
    "message": "lwm2m: refactoring2 by commit in PR",
    "date": "2022-01-17T14:24:06Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/39164573678268913a631fbc9abcfaa1e86b5fd2",
    "details": {
      "sha": "eeec94f81578c2357366a2675d39a85f6cc9f9fe",
      "filename": "common/transport/lwm2m/src/main/java/org/thingsboard/server/transport/lwm2m/bootstrap/secure/TbLwM2MDtlsBootstrapCertificateVerifier.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/39164573678268913a631fbc9abcfaa1e86b5fd2/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fsecure%2FTbLwM2MDtlsBootstrapCertificateVerifier.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/39164573678268913a631fbc9abcfaa1e86b5fd2/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fsecure%2FTbLwM2MDtlsBootstrapCertificateVerifier.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fsecure%2FTbLwM2MDtlsBootstrapCertificateVerifier.java?ref=39164573678268913a631fbc9abcfaa1e86b5fd2",
      "patch": "@@ -128,7 +128,7 @@ public CertificateVerificationResult verifyCertificate(ConnectionId cid, ServerN\n                             try {\n                                 securityInfo = bsSecurityStore.getX509ByEndpoint(sha3Hash);\n                             } catch (LwM2MAuthException e) {\n-                                log.trace(\"Failed to find security info: {}\", sha3Hash, e);\n+                                log.trace(\"Failed to find security info: [{}]\", sha3Hash, e);\n                             }\n                         }\n                         ValidateDeviceCredentialsResponse msg = securityInfo != null ? securityInfo.getMsg() : null;\n@@ -139,7 +139,7 @@ public CertificateVerificationResult verifyCertificate(ConnectionId cid, ServerN\n                     } catch (CertificateEncodingException |\n                             CertificateExpiredException |\n                             CertificateNotYetValidException e) {\n-                        log.error(e.getMessage(), e);\n+                        log.trace(\"Failed to find security info: [{}]\", cert.getSubjectX500Principal().getName(), e);\n                     }\n                 }\n                 if (!x509CredentialsFound) {",
      "parent_sha": "b1855cfea277c244814d73bca752291167a7a9a8"
    }
  },
  {
    "oid": "d3987d1c670350d68cdf8578ad54051c897b0869",
    "message": "device actor checkSessionsTimeout refactored to improve performance and reduce memory pressure",
    "date": "2022-01-10T10:58:32Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/d3987d1c670350d68cdf8578ad54051c897b0869",
    "details": {
      "sha": "d8f0c389754235ad1177714d275f4a247ed5aeed",
      "filename": "application/src/main/java/org/thingsboard/server/actors/device/DeviceActorMessageProcessor.java",
      "status": "modified",
      "additions": 37,
      "deletions": 12,
      "changes": 49,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/d3987d1c670350d68cdf8578ad54051c897b0869/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/d3987d1c670350d68cdf8578ad54051c897b0869/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Factors%2Fdevice%2FDeviceActorMessageProcessor.java?ref=d3987d1c670350d68cdf8578ad54051c897b0869",
      "patch": "@@ -97,6 +97,7 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n@@ -116,6 +117,7 @@\n @Slf4j\n class DeviceActorMessageProcessor extends AbstractContextAwareMsgProcessor {\n \n+    static final String SESSION_TIMEOUT_MESSAGE = \"session timeout!\";\n     final TenantId tenantId;\n     final DeviceId deviceId;\n     final LinkedHashMapRemoveEldest<UUID, SessionInfoMetaData> sessions;\n@@ -961,19 +963,42 @@ void init(TbActorCtx ctx) {\n     }\n \n     void checkSessionsTimeout() {\n-        log.debug(\"[{}] checkSessionsTimeout started. Size before check {}\", deviceId, sessions.size());\n-        long expTime = System.currentTimeMillis() - systemContext.getSessionInactivityTimeout();\n-        Map<UUID, SessionInfoMetaData> sessionsToRemove = sessions.entrySet().stream().filter(kv -> kv.getValue().getLastActivityTime() < expTime).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-        sessionsToRemove.forEach((sessionId, sessionMD) -> {\n-            sessions.remove(sessionId);\n-            rpcSubscriptions.remove(sessionId);\n-            attributeSubscriptions.remove(sessionId);\n-            notifyTransportAboutClosedSession(sessionId, sessionMD, \"session timeout!\");\n-        });\n-        if (!sessionsToRemove.isEmpty()) {\n-            dumpSessions();\n+        final long expTime = System.currentTimeMillis() - systemContext.getSessionInactivityTimeout();\n+        List<UUID> expiredIds = null;\n+\n+        try {\n+            for (Map.Entry<UUID, SessionInfoMetaData> kv : sessions.entrySet()) { //entry set are cached for stable sessions\n+                if (kv.getValue().getLastActivityTime() < expTime) {\n+                    final UUID id = kv.getKey();\n+                    if (expiredIds == null) {\n+                        expiredIds = new ArrayList<>(1); //most of the expired sessions is a single event\n+                    }\n+                    expiredIds.add(id);\n+\n+                }\n+            }\n+        } catch (ConcurrentModificationException ignored) {\n+            //Sessions are not thread safe and possible exceptions\n+            //It is an extremely rare event\n+            //Complete session check will perform on the next check\n+        }\n+\n+        if (expiredIds != null) {\n+            int removed = 0;\n+            for (UUID id : expiredIds) {\n+                final SessionInfoMetaData session = sessions.remove(id);\n+                rpcSubscriptions.remove(id);\n+                attributeSubscriptions.remove(id);\n+                if (session != null) {\n+                    removed++;\n+                    notifyTransportAboutClosedSession(id, session, SESSION_TIMEOUT_MESSAGE);\n+                }\n+            }\n+            if (removed != 0) {\n+                dumpSessions();\n+            }\n         }\n-        log.debug(\"[{}] checkSessionsTimeout finished. Size after check {}\", deviceId, sessions.size());\n+\n     }\n \n }",
      "parent_sha": "3df6155adf4b3bc5117f7e8f2776524e1d6ed93a"
    }
  },
  {
    "oid": "bb064cbbbd20de81c99bcc7e681db106360ab698",
    "message": "Edge session send donwlink msgs refactoring",
    "date": "2021-05-18T08:03:52Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/bb064cbbbd20de81c99bcc7e681db106360ab698",
    "details": {
      "sha": "5a3587fb1b2d84beeab62737445ea26059a96270",
      "filename": "application/src/main/java/org/thingsboard/server/service/edge/rpc/EdgeGrpcSession.java",
      "status": "modified",
      "additions": 18,
      "deletions": 39,
      "changes": 57,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/bb064cbbbd20de81c99bcc7e681db106360ab698/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/bb064cbbbd20de81c99bcc7e681db106360ab698/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java?ref=bb064cbbbd20de81c99bcc7e681db106360ab698",
      "patch": "@@ -242,7 +242,7 @@ public void startSyncProcess() {\n                     EdgeEvent customerEdgeEvent = EdgeEventUtils.constructEdgeEvent(edge.getTenantId(), edge.getId(),\n                             EdgeEventType.CUSTOMER, EdgeEventActionType.ADDED, edge.getCustomerId(), null);\n                     DownlinkMsg customerDownlinkMsg = convertToDownlinkMsg(customerEdgeEvent);\n-                    sendSingleDownlinkMsg(customerDownlinkMsg);\n+                    sendDownlinkMsgsPack(Collections.singletonList(customerDownlinkMsg));\n \n                     startProcessingEdgeEvents(new CustomerUsersEdgeEventFetcher(ctx.getUserService(), edge.getCustomerId()));\n                 }\n@@ -256,7 +256,7 @@ public void startSyncProcess() {\n                 DownlinkMsg syncCompleteDownlinkMsg = DownlinkMsg.newBuilder()\n                         .setSyncCompletedMsg(SyncCompletedMsg.newBuilder().build())\n                         .build();\n-                sendSingleDownlinkMsg(syncCompleteDownlinkMsg);\n+                sendDownlinkMsgsPack(Collections.singletonList(syncCompleteDownlinkMsg));\n             } catch (Exception e) {\n                 log.error(\"[{}][{}] Exception during sync process\", edge.getTenantId(), edge.getId(), e);\n             }\n@@ -345,59 +345,37 @@ private UUID startProcessingEdgeEvents(EdgeEventFetcher fetcher) throws Interrup\n         PageLink pageLink = fetcher.getPageLink(ctx.getEdgeEventStorageSettings().getMaxReadRecordsCount());\n         PageData<EdgeEvent> pageData;\n         UUID ifOffset = null;\n-        boolean success = true;\n+        boolean success;\n         do {\n             pageData = fetcher.fetchEdgeEvents(edge.getTenantId(), edge.getId(), pageLink);\n             if (isConnected() && !pageData.getData().isEmpty()) {\n                 log.trace(\"[{}] [{}] event(s) are going to be processed.\", this.sessionId, pageData.getData().size());\n-\n-                success = processEdgeEventsPack(pageData.getData());\n-\n+                List<DownlinkMsg> downlinkMsgsPack = convertToDownlinkMsgsPack(pageData.getData());\n+                success = sendDownlinkMsgsPack(downlinkMsgsPack);\n                 ifOffset = pageData.getData().get(pageData.getData().size() - 1).getUuidId();\n-            }\n-            if (isConnected() && (!success || pageData.hasNext())) {\n-                try {\n-                    Thread.sleep(ctx.getEdgeEventStorageSettings().getSleepIntervalBetweenBatches());\n-                } catch (InterruptedException e) {\n-                    log.error(\"[{}] Error during sleep between batches\", this.sessionId, e);\n-                }\n                 if (success) {\n                     pageLink = pageLink.nextPageLink();\n                 }\n+            } else {\n+                log.trace(\"[{}] no event(s) found. Stop processing edge events\", this.sessionId);\n             }\n-        } while (isConnected() && (!success || pageData.hasNext()));\n+        } while (isConnected() && pageData.hasNext());\n         return ifOffset;\n     }\n \n-    private boolean processEdgeEventsPack(List<EdgeEvent> edgeEvents) throws InterruptedException {\n-        List<DownlinkMsg> downlinkMsgsPack = convertToDownlinkMsgsPack(edgeEvents);\n-\n-        log.trace(\"[{}] [{}] downlink msg(s) are going to be send.\", this.sessionId, downlinkMsgsPack.size());\n-\n-        latch = new CountDownLatch(downlinkMsgsPack.size());\n-        for (DownlinkMsg downlinkMsg : downlinkMsgsPack) {\n-            sendDownlinkMsg(ResponseMsg.newBuilder()\n-                    .setDownlinkMsg(downlinkMsg)\n-                    .build());\n-        }\n-\n-        boolean success = latch.await(10, TimeUnit.SECONDS);\n-        if (!success) {\n-            log.warn(\"[{}] Failed to deliver the batch: {}\", this.sessionId, downlinkMsgsPack);\n-        }\n-        return success;\n-    }\n-\n-    private void sendSingleDownlinkMsg(DownlinkMsg downlinkMsg) throws InterruptedException {\n+    private boolean sendDownlinkMsgsPack(List<DownlinkMsg> downlinkMsgsPack) throws InterruptedException {\n         boolean success;\n         do {\n-            latch = new CountDownLatch(1);\n-            sendDownlinkMsg(ResponseMsg.newBuilder()\n-                    .setDownlinkMsg(downlinkMsg)\n-                    .build());\n+            log.trace(\"[{}] [{}] downlink msg(s) are going to be send.\", this.sessionId, downlinkMsgsPack.size());\n+            latch = new CountDownLatch(downlinkMsgsPack.size());\n+            for (DownlinkMsg downlinkMsg : downlinkMsgsPack) {\n+                sendDownlinkMsg(ResponseMsg.newBuilder()\n+                        .setDownlinkMsg(downlinkMsg)\n+                        .build());\n+            }\n             success = latch.await(10, TimeUnit.SECONDS);\n             if (!success) {\n-                log.warn(\"[{}] Failed to deliver single downlink msg!\", this.sessionId);\n+                log.warn(\"[{}] Failed to deliver the batch: {}\", this.sessionId, downlinkMsgsPack);\n             }\n             if (isConnected() && !success) {\n                 try {\n@@ -407,6 +385,7 @@ private void sendSingleDownlinkMsg(DownlinkMsg downlinkMsg) throws InterruptedEx\n                 }\n             }\n         } while (isConnected() && !success);\n+        return success;\n     }\n \n     private DownlinkMsg convertToDownlinkMsg(EdgeEvent edgeEvent) {",
      "parent_sha": "71791c6847a682af2d4bf5042701cb1496df9f9c"
    }
  },
  {
    "oid": "59070804a78f793aaa3c8bbcb9c2a89dbcb59f92",
    "message": "lwm2m: if error BootstrapRead - update without find Server ID",
    "date": "2021-12-17T12:33:58Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/59070804a78f793aaa3c8bbcb9c2a89dbcb59f92",
    "details": {
      "sha": "5c4e44287524b51717eacd09527ea8dcd77c07aa",
      "filename": "common/transport/lwm2m/src/main/java/org/thingsboard/server/transport/lwm2m/bootstrap/store/LwM2MBootstrapConfigStoreTaskProvider.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/59070804a78f793aaa3c8bbcb9c2a89dbcb59f92/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fstore%2FLwM2MBootstrapConfigStoreTaskProvider.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/59070804a78f793aaa3c8bbcb9c2a89dbcb59f92/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fstore%2FLwM2MBootstrapConfigStoreTaskProvider.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fbootstrap%2Fstore%2FLwM2MBootstrapConfigStoreTaskProvider.java?ref=59070804a78f793aaa3c8bbcb9c2a89dbcb59f92",
      "patch": "@@ -84,7 +84,7 @@ public Tasks getTasks(BootstrapSession session, List<LwM2mResponse> previousResp\n                         this.initAfterBootstrapDiscover(discoverResponse);\n                         findSecurityInstanceId(discoverResponse.getObjectLinks());\n                     } else {\n-                        log.info(\n+                        log.warn(\n                                 \"Bootstrap Discover return error {} : to continue bootstrap session without autoIdForSecurityObject mode. {}\",\n                                 discoverResponse, session);\n                     }\n@@ -100,7 +100,13 @@ public Tasks getTasks(BootstrapSession session, List<LwM2mResponse> previousResp\n                     return tasks;\n                 }\n                 BootstrapReadResponse readResponse = (BootstrapReadResponse) previousResponse.get(0);\n-                findServerInstanceId(readResponse);\n+                if (readResponse.isSuccess()) {\n+                    findServerInstanceId(readResponse);\n+                } else {\n+                    log.warn(\n+                            \"Bootstrap ReadResponse return error {} : to continue bootstrap session without find Server Instance Id. {}\",\n+                            readResponse, session);\n+                }\n                 // create requests from config\n                 tasks.requestsToSend = this.toRequests(config,\n                         config.contentFormat != null ? config.contentFormat : session.getContentFormat());",
      "parent_sha": "f8c1985addfbd33a42b2a8b13a633f8349830d4e"
    }
  },
  {
    "oid": "be25681416ba946aaf1dd53037c6053d02608115",
    "message": "Improve KafkaEdgeGrpcSession",
    "date": "2024-11-20T12:21:58Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/be25681416ba946aaf1dd53037c6053d02608115",
    "details": {
      "sha": "e9a33520adaa71461a7acea7dd6d089ff5cc8944",
      "filename": "application/src/main/java/org/thingsboard/server/service/edge/rpc/KafkaEdgeGrpcSession.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/be25681416ba946aaf1dd53037c6053d02608115/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FKafkaEdgeGrpcSession.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/be25681416ba946aaf1dd53037c6053d02608115/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FKafkaEdgeGrpcSession.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FKafkaEdgeGrpcSession.java?ref=be25681416ba946aaf1dd53037c6053d02608115",
      "patch": "@@ -44,7 +44,7 @@\n @Slf4j\n public class KafkaEdgeGrpcSession extends AbstractEdgeGrpcSession {\n \n-    private final TbQueueConsumer<TbProtoQueueMsg<ToEdgeEventNotificationMsg>> edgeEventsConsumer;\n+    private final TbCoreQueueFactory tbCoreQueueFactory;\n \n     private volatile boolean isHighPriorityProcessing;\n \n@@ -57,7 +57,7 @@ public KafkaEdgeGrpcSession(EdgeContextComponent ctx, TbCoreQueueFactory tbCoreQ\n                                 BiConsumer<Edge, UUID> sessionCloseListener, ScheduledExecutorService sendDownlinkExecutorService,\n                                 int maxInboundMessageSize, int maxHighPriorityQueueSizePerSession) {\n         super(ctx, outputStream, sessionOpenListener, sessionCloseListener, sendDownlinkExecutorService, maxInboundMessageSize, maxHighPriorityQueueSizePerSession);\n-        edgeEventsConsumer = tbCoreQueueFactory.createEdgeEventMsgConsumer(tenantId, edge.getId());\n+        this.tbCoreQueueFactory = tbCoreQueueFactory;\n     }\n \n     private void processMsgs(List<TbProtoQueueMsg<ToEdgeEventNotificationMsg>> msgs, TbQueueConsumer<TbProtoQueueMsg<ToEdgeEventNotificationMsg>> consumer) {\n@@ -102,7 +102,7 @@ public ListenableFuture<Boolean> processEdgeEvents() {\n                     .name(\"TB Edge events\")\n                     .msgPackProcessor(this::processMsgs)\n                     .pollInterval(ctx.getEdgeEventStorageSettings().getNoRecordsSleepInterval())\n-                    .consumerCreator(() -> edgeEventsConsumer)\n+                    .consumerCreator(() -> tbCoreQueueFactory.createEdgeEventMsgConsumer(tenantId, edge.getId()))\n                     .consumerExecutor(consumerExecutor)\n                     .threadPrefix(\"edge-events\")\n                     .build();",
      "parent_sha": "732344c8d7d273b2cc9d8040dc62284608416a69"
    }
  },
  {
    "oid": "98661b53887764637005536f296bd94ac702ae07",
    "message": "Add test on upgrade script for TbRestApiCallNode",
    "date": "2023-11-06T11:22:21Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/98661b53887764637005536f296bd94ac702ae07",
    "details": {
      "sha": "0a71a799fc990fa0dbd4601ec588cb0a2586f43b",
      "filename": "rule-engine/rule-engine-components/src/test/java/org/thingsboard/rule/engine/rest/TbRestApiCallNodeTest.java",
      "status": "modified",
      "additions": 22,
      "deletions": 1,
      "changes": 23,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/98661b53887764637005536f296bd94ac702ae07/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Frest%2FTbRestApiCallNodeTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/98661b53887764637005536f296bd94ac702ae07/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Frest%2FTbRestApiCallNodeTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Frest%2FTbRestApiCallNodeTest.java?ref=98661b53887764637005536f296bd94ac702ae07",
      "patch": "@@ -16,6 +16,7 @@\n package org.thingsboard.rule.engine.rest;\n \n import com.datastax.oss.driver.api.core.uuid.Uuids;\n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.http.HttpException;\n import org.apache.http.HttpRequest;\n import org.apache.http.HttpResponse;\n@@ -26,6 +27,7 @@\n import org.apache.http.protocol.HttpRequestHandler;\n import org.junit.After;\n import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.runner.RunWith;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Mock;\n@@ -39,6 +41,7 @@\n import org.thingsboard.server.common.data.id.RuleChainId;\n import org.thingsboard.server.common.data.id.RuleNodeId;\n import org.thingsboard.server.common.data.msg.TbMsgType;\n+import org.thingsboard.server.common.data.util.TbPair;\n import org.thingsboard.server.common.msg.TbMsg;\n import org.thingsboard.server.common.msg.TbMsgDataType;\n import org.thingsboard.server.common.msg.TbMsgMetaData;\n@@ -91,7 +94,9 @@ private void initWithConfig(TbRestApiCallNodeConfiguration config) {\n \n     @After\n     public void teardown() {\n-        server.stop();\n+        if (server != null) {\n+            server.stop();\n+        }\n     }\n     \n     @Test\n@@ -211,4 +216,20 @@ public void run() {\n         assertEquals(TbMsg.EMPTY_JSON_OBJECT, dataCaptor.getValue());\n     }\n \n+    @Test\n+    public void givenOldConfig_whenUpgrade_thenShouldReturnTrueResultWithNewConfig() throws Exception {\n+        var defaultConfig = new TbRestApiCallNodeConfiguration().defaultConfiguration();\n+        var node = new TbRestApiCallNode();\n+        String oldConfig = \"{\\\"restEndpointUrlPattern\\\":\\\"http://localhost/api\\\",\\\"requestMethod\\\":\\\"POST\\\",\" +\n+                \"\\\"useSimpleClientHttpFactory\\\":false,\\\"ignoreRequestBody\\\":false,\\\"enableProxy\\\":false,\" +\n+                \"\\\"useSystemProxyProperties\\\":false,\\\"proxyScheme\\\":null,\\\"proxyHost\\\":null,\\\"proxyPort\\\":0,\" +\n+                \"\\\"proxyUser\\\":null,\\\"proxyPassword\\\":null,\\\"readTimeoutMs\\\":0,\\\"maxParallelRequestsCount\\\":0,\" +\n+                \"\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/json\\\"},\\\"useRedisQueueForMsgPersistence\\\":false,\" +\n+                \"\\\"trimQueue\\\":null,\\\"maxQueueSize\\\":null,\\\"credentials\\\":{\\\"type\\\":\\\"anonymous\\\"},\\\"trimDoubleQuotes\\\":true}\";\n+        JsonNode configJson = JacksonUtil.toJsonNode(oldConfig);\n+        TbPair<Boolean, JsonNode> upgrade = node.upgrade(0, configJson);\n+        Assertions.assertTrue(upgrade.getFirst());\n+        Assertions.assertTrue(JacksonUtil.treeToValue(upgrade.getSecond(), defaultConfig.getClass()).isParseToPlainText());\n+    }\n+\n }",
      "parent_sha": "fb8b21187840eb4d1d6aed6212a0456425351fd5"
    }
  },
  {
    "oid": "da36801789ab0df248391ba9e9f52002e7b7739c",
    "message": "fix swagger in telemetry controller after review",
    "date": "2021-10-11T09:53:47Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/da36801789ab0df248391ba9e9f52002e7b7739c",
    "details": {
      "sha": "051c19c0a40b8dd2ecd1e6079848c2761a118156",
      "filename": "application/src/main/java/org/thingsboard/server/controller/TelemetryController.java",
      "status": "modified",
      "additions": 79,
      "deletions": 66,
      "changes": 145,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/da36801789ab0df248391ba9e9f52002e7b7739c/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FTelemetryController.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/da36801789ab0df248391ba9e9f52002e7b7739c/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FTelemetryController.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FTelemetryController.java?ref=da36801789ab0df248391ba9e9f52002e7b7739c",
      "patch": "@@ -50,7 +50,6 @@\n import org.thingsboard.server.common.data.TenantProfile;\n import org.thingsboard.server.common.data.audit.ActionType;\n import org.thingsboard.server.common.data.exception.ThingsboardException;\n-import org.thingsboard.server.common.data.id.CustomerId;\n import org.thingsboard.server.common.data.id.DeviceId;\n import org.thingsboard.server.common.data.id.EntityId;\n import org.thingsboard.server.common.data.id.EntityIdFactory;\n@@ -110,6 +109,14 @@\n @Slf4j\n public class TelemetryController extends BaseController {\n \n+    public static final String ENTITY_TYPE_DESCRIPTION = \"A string value representing the entity type. For example, 'DEVICE'\";\n+    public static final String ENTITY_SCOPE_DESCRIPTION = \"A string value representing the entity scope. Required values: 'SERVER_SCOPE', 'CLIENT_SCOPE' or 'SHARED_SCOPE'. For example, 'SERVER_SCOPE'.\";\n+    public static final String ENTITY_ID_DESCRIPTION = \"A string value representing the entity id. For example, '16cdaaf0-229d-11ec-b9f0-231c4d2593da'\";\n+    public static final String ENTITY_TIMESERIES_KEYS_DESCRIPTION = \"A string value representing the comma-separated list of timeseries keys. If keys are not selected, the result will return all the latest timeseries. For example, 'active,inactivityAlarmTime'\";\n+    public static final String ENTITY_ATTRIBUTES_KEYS_DESCRIPTION = \"A string value representing the comma-separated list of attributes keys. If keys are not selected, the result will return all the latest timeseries. For example, 'active,inactivityAlarmTime'\";\n+    public static final String ENTITY_JSON_REQUEST_DESCRIPTION = \"A string value representing the json object. For example, '{\\\"key\\\":\\\"value\\\"}'\";\n+    public static final String DEVICE_ID_DESCRIPTION = \"A string value representing the device id. For example, 'e0034860-2065-11ec-8a0a-15ac1b4580c2'\";\n+\n     @Autowired\n     private TimeseriesService tsService;\n \n@@ -135,101 +142,101 @@ public void shutdownExecutor() {\n         }\n     }\n \n-    @ApiOperation(value = \"Get all existed attributes of entity by it`s type\",\n-            notes = \"Returns key`s name of the attribute\")\n+    @ApiOperation(value = \"Get all attributes for selected entity\",\n+            notes = \"Returns key names for the selected entity id and type\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/keys/attributes\", method = RequestMethod.GET)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> getAttributeKeys(\n             @ApiParam(value = \"A string value representing the entity type. For example, 'ASSET'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the entity id of the required entity type. For example, '87b2fe90-2050-11ec-8a0a-15ac1b4580c2'\") @PathVariable(\"entityId\") String entityIdStr) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr) throws ThingsboardException {\n         return accessValidator.validateEntityAndCallback(getCurrentUser(), Operation.READ_ATTRIBUTES, entityType, entityIdStr, this::getAttributeKeysCallback);\n     }\n \n-    @ApiOperation(value = \"Get all existed attributes of entity by type and scope\")\n+    @ApiOperation(value = \"Get all attributes for selected entity by attributes scope\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/keys/attributes/{scope}\", method = RequestMethod.GET)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> getAttributeKeysByScope(\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the entity id. For example, '16cdaaf0-229d-11ec-b9f0-231c4d2593da'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the scope. For example, 'SERVER_SCOPE'. In the result will be return all server attributes\") @PathVariable(\"scope\") String scope) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_SCOPE_DESCRIPTION + \" In the result will be return all server attributes\") @PathVariable(\"scope\") String scope) throws ThingsboardException {\n         return accessValidator.validateEntityAndCallback(getCurrentUser(), Operation.READ_ATTRIBUTES, entityType, entityIdStr,\n                 (result, tenantId, entityId) -> getAttributeKeysCallback(result, tenantId, entityId, scope));\n     }\n \n-    @ApiOperation(value = \"Get all existed attributes of entity by it`s type\",\n+    @ApiOperation(value = \"Get all attributes for selected entity id and type\",\n             notes = \"Returns key and value of the attribute\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/values/attributes\", method = RequestMethod.GET)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> getAttributes(\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the entity id. For example, '16cdaaf0-229d-11ec-b9f0-231c4d2593da'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the entity keys. They are optional and listed with comma with no space between keys.  For example, 'active,inactivityAlarmTime'\") @RequestParam(name = \"keys\", required = false) String keysStr) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_ATTRIBUTES_KEYS_DESCRIPTION) @RequestParam(name = \"keys\", required = false) String keysStr) throws ThingsboardException {\n         SecurityUser user = getCurrentUser();\n         return accessValidator.validateEntityAndCallback(getCurrentUser(), Operation.READ_ATTRIBUTES, entityType, entityIdStr,\n                 (result, tenantId, entityId) -> getAttributeValuesCallback(result, user, entityId, null, keysStr));\n     }\n \n-    @ApiOperation(value = \"Get all existed attributes of entity by it`s type and scope\")\n+    @ApiOperation(value = \"Get all attributes for selected entity id, type and scope\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/values/attributes/{scope}\", method = RequestMethod.GET)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> getAttributesByScope(\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the entity id. For example, '16cdaaf0-229d-11ec-b9f0-231c4d2593da'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'SERVER_SCOPE'\") @PathVariable(\"scope\") String scope,\n-            @ApiParam(value = \"A string value representing the entity keys. They are optional and listed with comma with no space between keys.  For example, 'active,inactivityAlarmTime'\") @RequestParam(name = \"keys\", required = false) String keysStr) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_SCOPE_DESCRIPTION) @PathVariable(\"scope\") String scope,\n+            @ApiParam(value = ENTITY_ATTRIBUTES_KEYS_DESCRIPTION) @RequestParam(name = \"keys\", required = false) String keysStr) throws ThingsboardException {\n         SecurityUser user = getCurrentUser();\n         return accessValidator.validateEntityAndCallback(getCurrentUser(), Operation.READ_ATTRIBUTES, entityType, entityIdStr,\n                 (result, tenantId, entityId) -> getAttributeValuesCallback(result, user, entityId, scope, keysStr));\n     }\n \n-    @ApiOperation(value = \"Get all timeseries keys of entity\",\n-            notes = \"Return all keys of timeseries of entity id and type\")\n+    @ApiOperation(value = \"Get all timeseries keys for selected entity id and type\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/keys/timeseries\", method = RequestMethod.GET)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> getTimeseriesKeys(\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the entity id. For example, '16cdaaf0-229d-11ec-b9f0-231c4d2593da'\") @PathVariable(\"entityId\") String entityIdStr) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr) throws ThingsboardException {\n         return accessValidator.validateEntityAndCallback(getCurrentUser(), Operation.READ_TELEMETRY, entityType, entityIdStr,\n                 (result, tenantId, entityId) -> Futures.addCallback(tsService.findAllLatest(tenantId, entityId), getTsKeysToResponseCallback(result), MoreExecutors.directExecutor()));\n     }\n \n-    @ApiOperation(value = \"Get all last timeseries of entity\",\n-            notes = \"Return all last timeserie(last time updated or created) of entity id and type\")\n+    @ApiOperation(value = \"Get all last timeseries for selected entity id and type\",\n+            notes = \"Return all last timeserie(last time updated or created) for selected entity id and type\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/values/timeseries\", method = RequestMethod.GET)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> getLatestTimeseries(\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the entity id. For example, '16cdaaf0-229d-11ec-b9f0-231c4d2593da'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the entity keys. They are optional and listed with comma with no space between keys.  For example, 'active,inactivityAlarmTime'\") @RequestParam(name = \"keys\", required = false) String keysStr,\n-            @ApiParam(value = \"A boolean value representing if value of timeseries is representing as a string (by default) or as original type\") @RequestParam(name = \"useStrictDataTypes\", required = false, defaultValue = \"false\") Boolean useStrictDataTypes) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_TIMESERIES_KEYS_DESCRIPTION) @RequestParam(name = \"keys\", required = false) String keysStr,\n+            @ApiParam(value = \"A boolean value to specify if values of specified timeseries keys will representing a string (by default) or use strict data type.\") @RequestParam(name = \"useStrictDataTypes\", required = false, defaultValue = \"false\") Boolean useStrictDataTypes) throws ThingsboardException {\n         SecurityUser user = getCurrentUser();\n \n         return accessValidator.validateEntityAndCallback(getCurrentUser(), Operation.READ_TELEMETRY, entityType, entityIdStr,\n                 (result, tenantId, entityId) -> getLatestTimeseriesValuesCallback(result, user, entityId, keysStr, useStrictDataTypes));\n     }\n \n-    @ApiOperation(value = \"Get all last timeseries of entity\",\n-            notes = \"Return all timeseries of entity in selected period of time. Based on this information can be built \" +\n+    @ApiOperation(value = \"Get all timeseries for selected entity\",\n+            notes = \"Return all timeseries for selected entity id, type and period of time. Based on this information can be built \" +\n                     \"widget on the dashboard to see updated telemetry in real-time\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/values/timeseries\", method = RequestMethod.GET, params = {\"keys\", \"startTs\", \"endTs\"})\n     @ResponseBody\n     public DeferredResult<ResponseEntity> getTimeseries(\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the entity id. For example, '16cdaaf0-229d-11ec-b9f0-231c4d2593da'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the entity keys. They are optional and listed with comma with no space between keys.  For example, 'active,inactivityAlarmTime'\") @RequestParam(name = \"keys\") String keys,\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_TIMESERIES_KEYS_DESCRIPTION) @RequestParam(name = \"keys\") String keys,\n             @ApiParam(value = \"A string value representing the start point of time\") @RequestParam(name = \"startTs\") Long startTs,\n             @ApiParam(value = \"A string value representing the end point of time\") @RequestParam(name = \"endTs\") Long endTs,\n             @ApiParam(value = \"A long value representing the period of time\") @RequestParam(name = \"interval\", defaultValue = \"0\") Long interval,\n             @RequestParam(name = \"limit\", defaultValue = \"100\") Integer limit,\n-            @ApiParam(value = \"A string value representing the function. For example, 'AVG'\") @RequestParam(name = \"agg\", defaultValue = \"NONE\") String aggStr,\n-            @ApiParam(value = \"A string value representing a sorting type\") @RequestParam(name = \"orderBy\", defaultValue = \"DESC\") String orderBy,\n+            @ApiParam(value = \"A string value representing the function. Available parameters: 'MIN', 'MAX', 'AVG', 'SUM', 'COUNT', 'NONE'.\" +\n+                    \" If the interval is 0, aggStr will be converted to  'NONE' value. For example, 'AVG'\") @RequestParam(name = \"agg\", defaultValue = \"NONE\") String aggStr,\n+            @ApiParam(value = \"A string value representing a sorting type. Available values 'DESC' or 'ASC'\") @RequestParam(name = \"orderBy\", defaultValue = \"DESC\") String orderBy,\n             @RequestParam(name = \"useStrictDataTypes\", required = false, defaultValue = \"false\") Boolean useStrictDataTypes) throws ThingsboardException {\n         return accessValidator.validateEntityAndCallback(getCurrentUser(), Operation.READ_TELEMETRY, entityType, entityIdStr,\n                 (result, tenantId, entityId) -> {\n@@ -242,33 +249,33 @@ public DeferredResult<ResponseEntity> getTimeseries(\n                 });\n     }\n \n-    @ApiOperation(value = \"Create and save attribute of device\")\n+    @ApiOperation(value = \"Create and save attribute for selected device\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{deviceId}/{scope}\", method = RequestMethod.POST)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> saveDeviceAttributes(\n-            @ApiParam(value = \"A string value representing the device id. For example, 'e0034860-2065-11ec-8a0a-15ac1b4580c2'\") @PathVariable(\"deviceId\") String deviceIdStr,\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'SERVER_SCOPE'\") @PathVariable(\"scope\") String scope,\n-            @ApiParam(value = \"A string value representing the json object. Should contains key and value of the attribute. For example, '{\\\"key\\\":\\\"value\\\"}'\") @RequestBody JsonNode request) throws ThingsboardException {\n+            @ApiParam(value = DEVICE_ID_DESCRIPTION) @PathVariable(\"deviceId\") String deviceIdStr,\n+            @ApiParam(value = ENTITY_SCOPE_DESCRIPTION) @PathVariable(\"scope\") String scope,\n+            @ApiParam(value = ENTITY_JSON_REQUEST_DESCRIPTION) @RequestBody JsonNode request) throws ThingsboardException {\n         EntityId entityId = EntityIdFactory.getByTypeAndUuid(EntityType.DEVICE, deviceIdStr);\n         return saveAttributes(getTenantId(), entityId, scope, request);\n     }\n \n-    @ApiOperation(value = \"Create and save attribute of entity\")\n+    @ApiOperation(value = \"Create and save attribute for selected entity\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/{scope}\", method = RequestMethod.POST)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> saveEntityAttributesV1(\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the entity id. For example, 'e0034860-2065-11ec-8a0a-15ac1b4580c2'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the entity type. For example, 'SHARED_SCOPE'\") @PathVariable(\"scope\") String scope,\n-            @ApiParam(value = \"A string value representing the json object. Should contains key and value of the attribute. For example, '{\\\"key\\\":\\\"value\\\"}'\") @RequestBody JsonNode request) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_SCOPE_DESCRIPTION) @PathVariable(\"scope\") String scope,\n+            @ApiParam(value = ENTITY_JSON_REQUEST_DESCRIPTION) @RequestBody JsonNode request) throws ThingsboardException {\n         EntityId entityId = EntityIdFactory.getByTypeAndId(entityType, entityIdStr);\n         return saveAttributes(getTenantId(), entityId, scope, request);\n     }\n \n-    @ApiOperation(value = \"Create and save attribute of entity\",\n-    notes = \"The same as saveEntityAttributesV1\")\n+    @ApiOperation(value = \"Create and save attribute for selected entity\",\n+            notes = \"The same as saveEntityAttributesV1\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/attributes/{scope}\", method = RequestMethod.POST)\n     @ResponseBody\n@@ -279,44 +286,44 @@ public DeferredResult<ResponseEntity> saveEntityAttributesV2(@PathVariable(\"enti\n         return saveAttributes(getTenantId(), entityId, scope, request);\n     }\n \n-    @ApiOperation(value = \"Save telemetry of entity type and scope\")\n+    @ApiOperation(value = \"Save telemetry for selected entity id, type and scope\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/timeseries/{scope}\", method = RequestMethod.POST)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> saveEntityTelemetry(\n-            @ApiParam(value = \"A string value representing the device type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the device id. For example, 'e0034860-2065-11ec-8a0a-15ac1b4580c2'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the scope. For example, 'SERVER_SCOPE'\") @PathVariable(\"scope\") String scope,\n-            @ApiParam(value = \"A string value representing the json object. Should contains key and value of the attribute. For example, '{\\\"key\\\":\\\"value\\\"}'\") @RequestBody String requestBody) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_SCOPE_DESCRIPTION) @PathVariable(\"scope\") String scope,\n+            @ApiParam(value = ENTITY_JSON_REQUEST_DESCRIPTION) @RequestBody String requestBody) throws ThingsboardException {\n         EntityId entityId = EntityIdFactory.getByTypeAndId(entityType, entityIdStr);\n         return saveTelemetry(getTenantId(), entityId, requestBody, 0L);\n     }\n \n-    @ApiOperation(value = \"Save telemetry of entity type and scope\",\n+    @ApiOperation(value = \"Save telemetry for selected entity id, type and scope\",\n             notes = \"The TTL parameter is used to extract the number of days to store the data.\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/timeseries/{scope}/{ttl}\", method = RequestMethod.POST)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> saveEntityTelemetryWithTTL(\n-            @ApiParam(value = \"A string value representing the device type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the device id. For example, 'e0034860-2065-11ec-8a0a-15ac1b4580c2'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the scope. For example, 'SERVER_SCOPE'\") @PathVariable(\"scope\") String scope,\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_SCOPE_DESCRIPTION) @PathVariable(\"scope\") String scope,\n             @ApiParam(value = \"A long value representing the amount of days.\") @PathVariable(\"ttl\") Long ttl,\n-            @ApiParam(value = \"A string value representing the json object. Should contains key and value of the attribute. For example, '{\\\"key\\\":\\\"value\\\"}'\") @RequestBody String requestBody) throws ThingsboardException {\n+            @ApiParam(value = ENTITY_JSON_REQUEST_DESCRIPTION) @RequestBody String requestBody) throws ThingsboardException {\n         EntityId entityId = EntityIdFactory.getByTypeAndId(entityType, entityIdStr);\n         return saveTelemetry(getTenantId(), entityId, requestBody, ttl);\n     }\n \n     @ApiOperation(value = \"Delete entity timeseries\",\n-            notes = \"Delete all timeseries of entity in the required period of time\")\n+            notes = \"Delete all timeseries for selected entity in the required period of time\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/timeseries/delete\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public DeferredResult<ResponseEntity> deleteEntityTimeseries(\n-            @ApiParam(value = \"A string value representing the device type. For example, 'DEVICE'\") @PathVariable(\"entityType\") String entityType,\n-            @ApiParam(value = \"A string value representing the device id. For example, 'e0034860-2065-11ec-8a0a-15ac1b4580c2'\") @PathVariable(\"entityId\") String entityIdStr,\n-            @ApiParam(value = \"A string value representing the entity keys. They are optional and listed with comma with no space between keys.  For example, 'active,inactivityAlarmTime'\") @RequestParam(name = \"keys\") String keysStr,\n-            @ApiParam(value = \"A boolean value representing if should be deleted all data of required key or only the latest\") @RequestParam(name = \"deleteAllDataForKeys\", defaultValue = \"false\") boolean deleteAllDataForKeys,\n+            @ApiParam(value = ENTITY_TYPE_DESCRIPTION) @PathVariable(\"entityType\") String entityType,\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_TIMESERIES_KEYS_DESCRIPTION) @RequestParam(name = \"keys\") String keysStr,\n+            @ApiParam(value = \"A boolean value representing if should be deleted all data of required keys or only the latest\") @RequestParam(name = \"deleteAllDataForKeys\", defaultValue = \"false\") boolean deleteAllDataForKeys,\n             @ApiParam(value = \"A long value representing the start point of time\") @RequestParam(name = \"startTs\", required = false) Long startTs,\n             @ApiParam(value = \"A long value representing the end point of time\") @RequestParam(name = \"endTs\", required = false) Long endTs,\n             @RequestParam(name = \"rewriteLatestIfDeleted\", defaultValue = \"false\") boolean rewriteLatestIfDeleted) throws ThingsboardException {\n@@ -368,22 +375,28 @@ public void onFailure(Throwable t) {\n         });\n     }\n \n+    @ApiOperation(value = \"Delete entity attributes\",\n+            notes = \"Delete entity attributes for selected device id and scope\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{deviceId}/{scope}\", method = RequestMethod.DELETE)\n     @ResponseBody\n-    public DeferredResult<ResponseEntity> deleteEntityAttributes(@PathVariable(\"deviceId\") String deviceIdStr,\n-                                                                 @PathVariable(\"scope\") String scope,\n-                                                                 @RequestParam(name = \"keys\") String keysStr) throws ThingsboardException {\n+    public DeferredResult<ResponseEntity> deleteEntityAttributes(\n+            @ApiParam(value = DEVICE_ID_DESCRIPTION) @PathVariable(\"deviceId\") String deviceIdStr,\n+            @ApiParam(value = ENTITY_SCOPE_DESCRIPTION) @PathVariable(\"scope\") String scope,\n+            @ApiParam(value = ENTITY_ATTRIBUTES_KEYS_DESCRIPTION) @RequestParam(name = \"keys\") String keysStr) throws ThingsboardException {\n         EntityId entityId = EntityIdFactory.getByTypeAndUuid(EntityType.DEVICE, deviceIdStr);\n         return deleteAttributes(entityId, scope, keysStr);\n     }\n \n+    @ApiOperation(value = \"Delete entity attributes\",\n+            notes = \"Delete entity attributes for selected entity id and scope\")\n     @PreAuthorize(\"hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')\")\n     @RequestMapping(value = \"/{entityType}/{entityId}/{scope}\", method = RequestMethod.DELETE)\n     @ResponseBody\n-    public DeferredResult<ResponseEntity> deleteEntityAttributes(@PathVariable(\"entityType\") String entityType, @PathVariable(\"entityId\") String entityIdStr,\n-                                                                 @PathVariable(\"scope\") String scope,\n-                                                                 @RequestParam(name = \"keys\") String keysStr) throws ThingsboardException {\n+    public DeferredResult<ResponseEntity> deleteEntityAttributes(\n+            @ApiParam(value = ENTITY_ID_DESCRIPTION) @PathVariable(\"entityType\") String entityType, @PathVariable(\"entityId\") String entityIdStr,\n+            @ApiParam(value = ENTITY_SCOPE_DESCRIPTION) @PathVariable(\"scope\") String scope,\n+            @ApiParam(value = ENTITY_ATTRIBUTES_KEYS_DESCRIPTION) @RequestParam(name = \"keys\") String keysStr) throws ThingsboardException {\n         EntityId entityId = EntityIdFactory.getByTypeAndId(entityType, entityIdStr);\n         return deleteAttributes(entityId, scope, keysStr);\n     }",
      "parent_sha": "28a2b11faa299e899a244c1d3032fc6d31b28418"
    }
  },
  {
    "oid": "827c898179e39f24bd4b6c283fb0a1ac1a2f083c",
    "message": "added test givenConcurrentAccess_whenOnMsg_thenGetFromDBInvokedOnce",
    "date": "2024-04-02T09:38:37Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/827c898179e39f24bd4b6c283fb0a1ac1a2f083c",
    "details": {
      "sha": "36b9719d863b1014ecffde0b5d6f6fefa70f9dd4",
      "filename": "rule-engine/rule-engine-components/src/test/java/org/thingsboard/rule/engine/metadata/CalculateDeltaNodeTest.java",
      "status": "modified",
      "additions": 75,
      "deletions": 4,
      "changes": 79,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/827c898179e39f24bd4b6c283fb0a1ac1a2f083c/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FCalculateDeltaNodeTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/827c898179e39f24bd4b6c283fb0a1ac1a2f083c/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FCalculateDeltaNodeTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FCalculateDeltaNodeTest.java?ref=827c898179e39f24bd4b6c283fb0a1ac1a2f083c",
      "patch": "@@ -17,13 +17,13 @@\n \n import com.google.common.util.concurrent.Futures;\n import lombok.extern.slf4j.Slf4j;\n-import org.assertj.core.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n+import org.thingsboard.common.util.AbstractListeningExecutor;\n import org.thingsboard.common.util.JacksonUtil;\n import org.thingsboard.common.util.ListeningExecutor;\n import org.thingsboard.rule.engine.TestDbCallbackExecutor;\n@@ -45,9 +45,15 @@\n import org.thingsboard.server.common.msg.TbMsgMetaData;\n import org.thingsboard.server.dao.timeseries.TimeseriesService;\n \n+import java.util.List;\n import java.util.Optional;\n import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n@@ -57,8 +63,12 @@\n import static org.mockito.ArgumentMatchers.anySet;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.BDDMockito.willAnswer;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n@@ -69,6 +79,10 @@ public class CalculateDeltaNodeTest {\n     private final DeviceId DUMMY_DEVICE_ORIGINATOR = new DeviceId(UUID.fromString(\"2ba3ded4-882b-40cf-999a-89da9ccd58f9\"));\n     private final TenantId TENANT_ID = new TenantId(UUID.fromString(\"3842e740-0d89-43a9-8d52-ae44023847ba\"));\n     private final ListeningExecutor DB_EXECUTOR = new TestDbCallbackExecutor();\n+\n+    private static final int RULE_DISPATCHER_POOL_SIZE = 2;\n+    private static final int DB_CALLBACK_POOL_SIZE = 3;\n+\n     @Mock\n     private TbContext ctxMock;\n     @Mock\n@@ -401,7 +415,7 @@ public void givenInvalidStringValue_whenOnMsg_thenException() {\n         verify(ctxMock, never()).tellNext(any(), anyString());\n         verify(ctxMock, never()).tellNext(any(), anySet());\n \n-        Assertions.assertThat(throwableCaptor.getValue())\n+        assertThat(throwableCaptor.getValue())\n                 .isInstanceOf(IllegalArgumentException.class)\n                 .hasMessage(\"Calculation failed. Unable to parse value [high] of telemetry [pulseCounter] to Double\");\n     }\n@@ -425,7 +439,7 @@ public void givenBooleanValue_whenOnMsg_thenException() {\n         verify(ctxMock, never()).tellNext(any(), anyString());\n         verify(ctxMock, never()).tellNext(any(), anySet());\n \n-        Assertions.assertThat(throwableCaptor.getValue())\n+        assertThat(throwableCaptor.getValue())\n                 .isInstanceOf(IllegalArgumentException.class)\n                 .hasMessage(\"Calculation failed. Boolean values are not supported!\");\n     }\n@@ -449,11 +463,68 @@ public void givenJsonValue_whenOnMsg_thenException() {\n         verify(ctxMock, never()).tellNext(any(), anyString());\n         verify(ctxMock, never()).tellNext(any(), anySet());\n \n-        Assertions.assertThat(throwableCaptor.getValue())\n+        assertThat(throwableCaptor.getValue())\n                 .isInstanceOf(IllegalArgumentException.class)\n                 .hasMessage(\"Calculation failed. JSON values are not supported!\");\n     }\n \n+    @Test\n+    public void givenConcurrentAccess_whenOnMsg_thenGetFromDBInvokedOnce() throws TbNodeException, InterruptedException {\n+        DBCallbackExecutor dbCallbackExecutor = new DBCallbackExecutor();\n+        dbCallbackExecutor.init();\n+\n+        RuleDispatcherExecutor ruleEngineDispatcherExecutor = new RuleDispatcherExecutor();\n+        ruleEngineDispatcherExecutor.init();\n+\n+        assertThat(RULE_DISPATCHER_POOL_SIZE).as(\"dispatcher pool size have to be > 1\").isGreaterThan(1);\n+\n+        final TbContext ctx = mock(TbContext.class);\n+        final TimeseriesService timeseriesService = mock(TimeseriesService.class);\n+\n+        when(ctx.getTimeseriesService()).thenReturn(timeseriesService);\n+        when(ctx.getDbCallbackExecutor()).thenReturn(dbCallbackExecutor);\n+        when(timeseriesService.findLatest(any(), any(), anyString())).thenReturn(Futures.immediateFuture(Optional.empty()));\n+\n+        final CalculateDeltaNodeConfiguration config = new CalculateDeltaNodeConfiguration().defaultConfiguration();\n+        final TbNodeConfiguration nodeConfiguration = new TbNodeConfiguration(JacksonUtil.valueToTree(config));\n+        final CalculateDeltaNode node = spy(CalculateDeltaNode.class);\n+\n+        node.init(ctx, nodeConfiguration);\n+\n+        List<TbMsg> tbMsgList = IntStream.range(0, RULE_DISPATCHER_POOL_SIZE * 2).mapToObj(x -> {\n+            var msgData = \"{\\\"pulseCounter\\\":\" + 2 + \"}\";\n+            return TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, DUMMY_DEVICE_ORIGINATOR, TbMsgMetaData.EMPTY, msgData);\n+        }).toList();\n+\n+        CountDownLatch processingLatch = new CountDownLatch(tbMsgList.size());\n+\n+        willAnswer(invocation -> {\n+            processingLatch.countDown();\n+            return invocation.callRealMethod();\n+        }).given(node).processMsgAsync(any(), any());\n+\n+        tbMsgList.forEach(msg -> ruleEngineDispatcherExecutor.executeAsync(() -> node.onMsg(ctx, msg)));\n+\n+        assertThat(processingLatch.await(5, TimeUnit.SECONDS)).as(\"await on processingLatch\").isTrue();\n+\n+        verify(timeseriesService).findLatest(any(), any(), anyString());\n+        await().atMost(5, TimeUnit.SECONDS).untilAsserted(() -> verify(ctx, times(tbMsgList.size())).tellSuccess(any()));\n+    }\n+\n+    private static class RuleDispatcherExecutor extends AbstractListeningExecutor {\n+        @Override\n+        protected int getThreadPollSize() {\n+            return RULE_DISPATCHER_POOL_SIZE;\n+        }\n+    }\n+\n+    private static class DBCallbackExecutor extends AbstractListeningExecutor {\n+        @Override\n+        protected int getThreadPollSize() {\n+            return DB_CALLBACK_POOL_SIZE;\n+        }\n+    }\n+\n     private void mockFindLatestAsync(TsKvEntry tsKvEntry) {\n         when(ctxMock.getDbCallbackExecutor()).thenReturn(DB_EXECUTOR);\n         when(ctxMock.getTenantId()).thenReturn(TENANT_ID);",
      "parent_sha": "95fad7bf1bfe35274cf5dd8628278ea9c2148b55"
    }
  },
  {
    "oid": "dffb6ab892462eb3590382a337b9e9be9c86cb50",
    "message": "removed Serializable from ResourceValue",
    "date": "2022-02-07T11:33:32Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/dffb6ab892462eb3590382a337b9e9be9c86cb50",
    "details": {
      "sha": "fac3599464592e5ddea689441c3aaa0104ce7ab9",
      "filename": "common/transport/lwm2m/src/main/java/org/thingsboard/server/transport/lwm2m/server/client/ResourceValue.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/dffb6ab892462eb3590382a337b9e9be9c86cb50/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fclient%2FResourceValue.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/dffb6ab892462eb3590382a337b9e9be9c86cb50/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fclient%2FResourceValue.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Flwm2m%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Flwm2m%2Fserver%2Fclient%2FResourceValue.java?ref=dffb6ab892462eb3590382a337b9e9be9c86cb50",
      "patch": "@@ -24,14 +24,13 @@\n import org.eclipse.leshan.core.node.LwM2mSingleResource;\n import org.eclipse.leshan.core.request.WriteRequest.Mode;\n \n-import java.io.Serializable;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n \n @Slf4j\n @Data\n-public class ResourceValue implements Serializable {\n+public class ResourceValue {\n \n     private LwM2mResource lwM2mResource;\n     private ResourceModel resourceModel;",
      "parent_sha": "a7d911c9c07ea7e413b7f7da52b38f207502803e"
    }
  },
  {
    "oid": "695720b190e68705e64394b261f2384aef468881",
    "message": "junit5: BaseAdminSettingsServiceTest annotation exceptions refactoring",
    "date": "2023-03-06T14:05:57Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/695720b190e68705e64394b261f2384aef468881",
    "details": {
      "sha": "c839b8ed697e6b44eba41ef684caee0e34f34128",
      "filename": "dao/src/test/java/org/thingsboard/server/dao/service/BaseAdminSettingsServiceTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/695720b190e68705e64394b261f2384aef468881/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2FBaseAdminSettingsServiceTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/695720b190e68705e64394b261f2384aef468881/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2FBaseAdminSettingsServiceTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fservice%2FBaseAdminSettingsServiceTest.java?ref=695720b190e68705e64394b261f2384aef468881",
      "patch": "@@ -19,6 +19,7 @@\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n import org.thingsboard.server.common.data.AdminSettings;\n import org.thingsboard.server.dao.exception.DataValidationException;\n \n@@ -54,17 +55,21 @@ public void testSaveAdminSettings() {\n         Assert.assertEquals(adminSettings.getJsonValue(), savedAdminSettings.getJsonValue());\n     }\n     \n-    @Test(expected = DataValidationException.class)\n+    @Test\n     public void testSaveAdminSettingsWithEmptyKey() {\n         AdminSettings adminSettings = adminSettingsService.findAdminSettingsByKey(SYSTEM_TENANT_ID, \"mail\");\n         adminSettings.setKey(null);\n-        adminSettingsService.saveAdminSettings(SYSTEM_TENANT_ID, adminSettings);\n+        Assertions.assertThrows(DataValidationException.class, () -> {\n+            adminSettingsService.saveAdminSettings(SYSTEM_TENANT_ID, adminSettings);\n+        });\n     }\n     \n-    @Test(expected = DataValidationException.class)\n+    @Test\n     public void testChangeAdminSettingsKey() {\n         AdminSettings adminSettings = adminSettingsService.findAdminSettingsByKey(SYSTEM_TENANT_ID, \"mail\");\n         adminSettings.setKey(\"newKey\");\n-        adminSettingsService.saveAdminSettings(SYSTEM_TENANT_ID, adminSettings);\n+        Assertions.assertThrows(DataValidationException.class, () -> {\n+            adminSettingsService.saveAdminSettings(SYSTEM_TENANT_ID, adminSettings);\n+        });\n     }\n }",
      "parent_sha": "3ecb2627d5309f68dec73c6c86fe35edd3c2822d"
    }
  },
  {
    "oid": "2f5648c400122b02838ea11d650dc55056dc860c",
    "message": "refactoring",
    "date": "2021-12-29T15:24:55Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/2f5648c400122b02838ea11d650dc55056dc860c",
    "details": {
      "sha": "7aea8f3f91bb0eecac58a86051291cc2051cd136",
      "filename": "common/transport/mqtt/src/main/java/org/thingsboard/server/transport/mqtt/adaptors/JsonMqttAdaptor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/2f5648c400122b02838ea11d650dc55056dc860c/common%2Ftransport%2Fmqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fmqtt%2Fadaptors%2FJsonMqttAdaptor.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/2f5648c400122b02838ea11d650dc55056dc860c/common%2Ftransport%2Fmqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fmqtt%2Fadaptors%2FJsonMqttAdaptor.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/common%2Ftransport%2Fmqtt%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Ftransport%2Fmqtt%2Fadaptors%2FJsonMqttAdaptor.java?ref=2f5648c400122b02838ea11d650dc55056dc860c",
      "patch": "@@ -43,6 +43,7 @@\n import java.util.HashSet;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.Map;\n import java.util.UUID;\n \n import static org.thingsboard.server.common.data.device.profile.MqttTopics.DEVICE_SOFTWARE_FIRMWARE_RESPONSES_TOPIC_FORMAT;\n@@ -124,11 +125,12 @@ public Optional<MqttMessage> convertToPublish(MqttDeviceAwareSessionContext ctx,\n \n     @Override\n     public Optional<MqttMessage> convertToGatewayPublish(MqttDeviceAwareSessionContext ctx, String deviceName, TransportProtos.GetAttributeResponseMsg responseMsg) throws AdaptorException {\n-        JsonObject request = ((GatewayDeviceSessionCtx) ctx)\n-                .getPendingAttributesRequests()\n-                .getOrDefault(responseMsg.getRequestId(), new JsonObject());\n+        Map<Integer, JsonObject> pendingAttributesRequests = ((GatewayDeviceSessionCtx) ctx).getPendingAttributesRequests();\n+        int requestId = responseMsg.getRequestId();\n+        JsonObject request = pendingAttributesRequests.getOrDefault(requestId, new JsonObject());\n         boolean multipleAttrKeysRequested =\n                 request.has(\"keys\") && request.get(\"keys\").getAsJsonArray().size() > 1;\n+        pendingAttributesRequests.remove(requestId);\n         return processConvertFromGatewayAttributeResponseMsg(ctx, deviceName, responseMsg, multipleAttrKeysRequested);\n     }\n ",
      "parent_sha": "b53746bda6bf246f5ad9c28f31b746de739f068a"
    }
  },
  {
    "oid": "f83b16c0958ee7ca07c7de8827536a6f0932359d",
    "message": "Fix NPE during Lwm2mDeviceProfileTransportConfiguration validation",
    "date": "2022-01-21T14:45:04Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/f83b16c0958ee7ca07c7de8827536a6f0932359d",
    "details": {
      "sha": "a6bc84ed40cb64c625c1ff3e41f797e4c09c4370",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/device/DeviceProfileServiceImpl.java",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/f83b16c0958ee7ca07c7de8827536a6f0932359d/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceProfileServiceImpl.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/f83b16c0958ee7ca07c7de8827536a6f0932359d/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceProfileServiceImpl.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fdevice%2FDeviceProfileServiceImpl.java?ref=f83b16c0958ee7ca07c7de8827536a6f0932359d",
      "patch": "@@ -420,10 +420,12 @@ protected void validateDataImpl(TenantId tenantId, DeviceProfile deviceProfile)\n                         }\n                     } else if (transportConfiguration instanceof Lwm2mDeviceProfileTransportConfiguration) {\n                         List<LwM2MBootstrapServerCredential> lwM2MBootstrapServersConfigurations = ((Lwm2mDeviceProfileTransportConfiguration) transportConfiguration).getBootstrap();\n-                        validateLwm2mServersConfigOfBootstrapForClient(lwM2MBootstrapServersConfigurations,\n-                                ((Lwm2mDeviceProfileTransportConfiguration) transportConfiguration).isBootstrapServerUpdateEnable());\n-                        for (LwM2MBootstrapServerCredential bootstrapServerCredential : lwM2MBootstrapServersConfigurations) {\n-                            validateLwm2mServersCredentialOfBootstrapForClient(bootstrapServerCredential);\n+                        if (lwM2MBootstrapServersConfigurations != null) {\n+                            validateLwm2mServersConfigOfBootstrapForClient(lwM2MBootstrapServersConfigurations,\n+                                    ((Lwm2mDeviceProfileTransportConfiguration) transportConfiguration).isBootstrapServerUpdateEnable());\n+                            for (LwM2MBootstrapServerCredential bootstrapServerCredential : lwM2MBootstrapServersConfigurations) {\n+                                validateLwm2mServersCredentialOfBootstrapForClient(bootstrapServerCredential);\n+                            }\n                         }\n                     }\n \n@@ -709,34 +711,32 @@ private void validateRpcRequestDynamicMessageFields(ProtoTransportPayloadConfigu\n     }\n \n     private void validateLwm2mServersConfigOfBootstrapForClient(List<LwM2MBootstrapServerCredential> lwM2MBootstrapServersConfigurations, boolean isBootstrapServerUpdateEnable) {\n-        Set <String> uris = new HashSet<>();\n-        Set <Integer> shortServerIds = new HashSet<>();\n+        Set<String> uris = new HashSet<>();\n+        Set<Integer> shortServerIds = new HashSet<>();\n         for (LwM2MBootstrapServerCredential bootstrapServerCredential : lwM2MBootstrapServersConfigurations) {\n             AbstractLwM2MBootstrapServerCredential serverConfig = (AbstractLwM2MBootstrapServerCredential) bootstrapServerCredential;\n             if (!isBootstrapServerUpdateEnable && serverConfig.isBootstrapServerIs()) {\n-                throw new DeviceCredentialsValidationException(\"Bootstrap config must not include \\\"Bootstrap Server\\\". \\\"Include Bootstrap Server updates\\\" is \" + isBootstrapServerUpdateEnable + \".\" );\n+                throw new DeviceCredentialsValidationException(\"Bootstrap config must not include \\\"Bootstrap Server\\\". \\\"Include Bootstrap Server updates\\\" is \" + isBootstrapServerUpdateEnable + \".\");\n             }\n             String server = serverConfig.isBootstrapServerIs() ? \"Bootstrap Server\" : \"LwM2M Server\" + \" shortServerId: \" + serverConfig.getShortServerId() + \":\";\n             if (serverConfig.getShortServerId() < 1 || serverConfig.getShortServerId() > 65534) {\n                 throw new DeviceCredentialsValidationException(server + \" ShortServerId must not be less than 1 and more than 65534!\");\n             }\n-            if (!shortServerIds.add(serverConfig.getShortServerId())){\n-                throw new DeviceCredentialsValidationException(server + \" \\\"Short server Id\\\" value = \"  + serverConfig.getShortServerId() + \". This value must be a unique value for all servers!\");\n-            };\n+            if (!shortServerIds.add(serverConfig.getShortServerId())) {\n+                throw new DeviceCredentialsValidationException(server + \" \\\"Short server Id\\\" value = \" + serverConfig.getShortServerId() + \". This value must be a unique value for all servers!\");\n+            }\n             String uri = serverConfig.getHost() + \":\" + serverConfig.getPort();\n-            if (!uris.add(uri)){\n-                throw new DeviceCredentialsValidationException(server + \" \\\"Host + port\\\" value = \"  + uri + \". This value must be a unique value for all servers!\");\n-            };\n+            if (!uris.add(uri)) {\n+                throw new DeviceCredentialsValidationException(server + \" \\\"Host + port\\\" value = \" + uri + \". This value must be a unique value for all servers!\");\n+            }\n             Integer port;\n             if (LwM2MSecurityMode.NO_SEC.equals(serverConfig.getSecurityMode())) {\n-               port =  serverConfig.isBootstrapServerIs() ? 5687 : 5685;\n-            }\n-            else {\n-                port =  serverConfig.isBootstrapServerIs() ? 5688 : 5686;\n+                port = serverConfig.isBootstrapServerIs() ? 5687 : 5685;\n+            } else {\n+                port = serverConfig.isBootstrapServerIs() ? 5688 : 5686;\n             }\n             if (serverConfig.getPort() == null || serverConfig.getPort().intValue() != port) {\n-                throw new DeviceCredentialsValidationException(server + \" \\\"Port\\\" value = \"  + serverConfig.getPort() + \". This value for security \" + serverConfig.getSecurityMode().name() + \" must be \" + port + \"!\");\n-\n+                throw new DeviceCredentialsValidationException(server + \" \\\"Port\\\" value = \" + serverConfig.getPort() + \". This value for security \" + serverConfig.getSecurityMode().name() + \" must be \" + port + \"!\");\n             }\n         }\n     }",
      "parent_sha": "1f0d6ad92afe1d3538d2cb661bbc617744d7d0ca"
    }
  },
  {
    "oid": "6a8800a8451ae1aea492cc597312db903cabcd20",
    "message": "BaseCustomerControllerTest refactored in async manner to improve performance",
    "date": "2022-04-19T13:31:22Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/6a8800a8451ae1aea492cc597312db903cabcd20",
    "details": {
      "sha": "492b76374a051152e6c579ba4b15b13e990272a3",
      "filename": "application/src/test/java/org/thingsboard/server/controller/BaseCustomerControllerTest.java",
      "status": "modified",
      "additions": 59,
      "deletions": 42,
      "changes": 101,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/6a8800a8451ae1aea492cc597312db903cabcd20/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseCustomerControllerTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/6a8800a8451ae1aea492cc597312db903cabcd20/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseCustomerControllerTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseCustomerControllerTest.java?ref=6a8800a8451ae1aea492cc597312db903cabcd20",
      "patch": "@@ -15,37 +15,47 @@\n  */\n package org.thingsboard.server.controller;\n \n-import static org.hamcrest.Matchers.containsString;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.ListeningExecutorService;\n+import com.google.common.util.concurrent.MoreExecutors;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.test.web.servlet.ResultActions;\n+import org.thingsboard.common.util.ThingsBoardExecutors;\n import org.thingsboard.server.common.data.Customer;\n import org.thingsboard.server.common.data.Tenant;\n import org.thingsboard.server.common.data.User;\n import org.thingsboard.server.common.data.id.TenantId;\n import org.thingsboard.server.common.data.page.PageData;\n import org.thingsboard.server.common.data.page.PageLink;\n import org.thingsboard.server.common.data.security.Authority;\n-import org.junit.Assert;\n-import org.junit.Test;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n public abstract class BaseCustomerControllerTest extends AbstractControllerTest {\n+    static final int TIMEOUT = 30;\n+    static final TypeReference<PageData<Customer>> PAGE_DATA_CUSTOMER_TYPE_REFERENCE = new TypeReference<>() {};\n \n-    private IdComparator<Customer> idComparator = new IdComparator<>();\n+    ListeningExecutorService executor;\n \n     private Tenant savedTenant;\n     private User tenantAdmin;\n \n     @Before\n     public void beforeTest() throws Exception {\n+        executor = MoreExecutors.listeningDecorator(ThingsBoardExecutors.newWorkStealingPool(8, getClass()));\n+\n         loginSysAdmin();\n \n         Tenant tenant = new Tenant();\n@@ -65,6 +75,8 @@ public void beforeTest() throws Exception {\n \n     @After\n     public void afterTest() throws Exception {\n+        executor.shutdownNow();\n+\n         loginSysAdmin();\n \n         doDelete(\"/api/tenant/\" + savedTenant.getId().getId().toString())\n@@ -83,11 +95,11 @@ public void testSaveCustomer() throws Exception {\n         savedCustomer.setTitle(\"My new customer\");\n         doPost(\"/api/customer\", savedCustomer, Customer.class);\n \n-        Customer foundCustomer = doGet(\"/api/customer/\"+savedCustomer.getId().getId().toString(), Customer.class);\n+        Customer foundCustomer = doGet(\"/api/customer/\" + savedCustomer.getId().getId().toString(), Customer.class);\n         Assert.assertEquals(foundCustomer.getTitle(), savedCustomer.getTitle());\n \n-        doDelete(\"/api/customer/\"+savedCustomer.getId().getId().toString())\n-        .andExpect(status().isOk());\n+        doDelete(\"/api/customer/\" + savedCustomer.getId().getId().toString())\n+                .andExpect(status().isOk());\n     }\n \n     @Test\n@@ -182,106 +194,111 @@ public void testSaveCustomerWithInvalidEmail() throws Exception {\n     public void testFindCustomers() throws Exception {\n         TenantId tenantId = savedTenant.getId();\n \n-        List<Customer> customers = new ArrayList<>();\n+        List<ListenableFuture<Customer>> futures = new ArrayList<>(135);\n         for (int i = 0; i < 135; i++) {\n             Customer customer = new Customer();\n             customer.setTenantId(tenantId);\n             customer.setTitle(\"Customer\" + i);\n-            customers.add(doPost(\"/api/customer\", customer, Customer.class));\n+            futures.add(executor.submit(() ->\n+                    doPost(\"/api/customer\", customer, Customer.class)));\n         }\n+        List<Customer> customers = Futures.allAsList(futures).get(TIMEOUT, TimeUnit.SECONDS);\n \n-        List<Customer> loadedCustomers = new ArrayList<>();\n+        List<Customer> loadedCustomers = new ArrayList<>(135);\n         PageLink pageLink = new PageLink(23);\n         PageData<Customer> pageData = null;\n         do {\n-            pageData = doGetTypedWithPageLink(\"/api/customers?\", new TypeReference<PageData<Customer>>(){}, pageLink);\n+            pageData = doGetTypedWithPageLink(\"/api/customers?\", PAGE_DATA_CUSTOMER_TYPE_REFERENCE, pageLink);\n             loadedCustomers.addAll(pageData.getData());\n             if (pageData.hasNext()) {\n                 pageLink = pageLink.nextPageLink();\n             }\n         } while (pageData.hasNext());\n \n-        Collections.sort(customers, idComparator);\n-        Collections.sort(loadedCustomers, idComparator);\n-\n-        Assert.assertEquals(customers, loadedCustomers);\n+        assertThat(customers).containsExactlyInAnyOrderElementsOf(loadedCustomers);\n     }\n \n     @Test\n     public void testFindCustomersByTitle() throws Exception {\n         TenantId tenantId = savedTenant.getId();\n \n         String title1 = \"Customer title 1\";\n-        List<Customer> customersTitle1 = new ArrayList<>();\n+        List<ListenableFuture<Customer>> futures = new ArrayList<>(143);\n         for (int i = 0; i < 143; i++) {\n             Customer customer = new Customer();\n             customer.setTenantId(tenantId);\n             String suffix = RandomStringUtils.randomAlphanumeric((int) (5 + Math.random() * 10));\n             String title = title1 + suffix;\n             title = i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n             customer.setTitle(title);\n-            customersTitle1.add(doPost(\"/api/customer\", customer, Customer.class));\n+            futures.add(executor.submit(() ->\n+                    doPost(\"/api/customer\", customer, Customer.class)));\n         }\n+        List<Customer> customersTitle1 = Futures.allAsList(futures).get(TIMEOUT, TimeUnit.SECONDS);\n+\n         String title2 = \"Customer title 2\";\n-        List<Customer> customersTitle2 = new ArrayList<>();\n+        futures = new ArrayList<>(175);\n         for (int i = 0; i < 175; i++) {\n             Customer customer = new Customer();\n             customer.setTenantId(tenantId);\n             String suffix = RandomStringUtils.randomAlphanumeric((int) (5 + Math.random() * 10));\n             String title = title2 + suffix;\n             title = i % 2 == 0 ? title.toLowerCase() : title.toUpperCase();\n             customer.setTitle(title);\n-            customersTitle2.add(doPost(\"/api/customer\", customer, Customer.class));\n+            futures.add(executor.submit(() ->\n+                    doPost(\"/api/customer\", customer, Customer.class)));\n         }\n \n+        List<Customer> customersTitle2 = Futures.allAsList(futures).get(TIMEOUT, TimeUnit.SECONDS);\n+\n         List<Customer> loadedCustomersTitle1 = new ArrayList<>();\n         PageLink pageLink = new PageLink(15, 0, title1);\n         PageData<Customer> pageData = null;\n         do {\n-            pageData = doGetTypedWithPageLink(\"/api/customers?\", new TypeReference<PageData<Customer>>(){}, pageLink);\n+            pageData = doGetTypedWithPageLink(\"/api/customers?\", PAGE_DATA_CUSTOMER_TYPE_REFERENCE, pageLink);\n             loadedCustomersTitle1.addAll(pageData.getData());\n             if (pageData.hasNext()) {\n                 pageLink = pageLink.nextPageLink();\n             }\n         } while (pageData.hasNext());\n \n-        Collections.sort(customersTitle1, idComparator);\n-        Collections.sort(loadedCustomersTitle1, idComparator);\n-\n-        Assert.assertEquals(customersTitle1, loadedCustomersTitle1);\n+        assertThat(customersTitle1).as(title1).containsExactlyInAnyOrderElementsOf(loadedCustomersTitle1);\n \n         List<Customer> loadedCustomersTitle2 = new ArrayList<>();\n         pageLink = new PageLink(4, 0, title2);\n         do {\n-            pageData = doGetTypedWithPageLink(\"/api/customers?\", new TypeReference<PageData<Customer>>(){}, pageLink);\n+            pageData = doGetTypedWithPageLink(\"/api/customers?\", PAGE_DATA_CUSTOMER_TYPE_REFERENCE, pageLink);\n             loadedCustomersTitle2.addAll(pageData.getData());\n             if (pageData.hasNext()) {\n                 pageLink = pageLink.nextPageLink();\n             }\n         } while (pageData.hasNext());\n \n-        Collections.sort(customersTitle2, idComparator);\n-        Collections.sort(loadedCustomersTitle2, idComparator);\n-\n-        Assert.assertEquals(customersTitle2, loadedCustomersTitle2);\n+        assertThat(customersTitle2).as(title2).containsExactlyInAnyOrderElementsOf(loadedCustomersTitle2);\n \n+        List<ListenableFuture<ResultActions>> deleteFutures = new ArrayList<>(143);\n         for (Customer customer : loadedCustomersTitle1) {\n-            doDelete(\"/api/customer/\" + customer.getId().getId().toString())\n-                    .andExpect(status().isOk());\n+            deleteFutures.add(executor.submit(() ->\n+                    doDelete(\"/api/customer/\" + customer.getId().getId().toString())\n+                            .andExpect(status().isOk())));\n         }\n+        Futures.allAsList(deleteFutures).get(TIMEOUT, TimeUnit.SECONDS);\n \n         pageLink = new PageLink(4, 0, title1);\n-        pageData = doGetTypedWithPageLink(\"/api/customers?\", new TypeReference<PageData<Customer>>(){}, pageLink);\n+        pageData = doGetTypedWithPageLink(\"/api/customers?\", PAGE_DATA_CUSTOMER_TYPE_REFERENCE, pageLink);\n         Assert.assertFalse(pageData.hasNext());\n         Assert.assertEquals(0, pageData.getData().size());\n \n+        deleteFutures = new ArrayList<>(175);\n         for (Customer customer : loadedCustomersTitle2) {\n-            doDelete(\"/api/customer/\" + customer.getId().getId().toString())\n-                    .andExpect(status().isOk());\n+            deleteFutures.add(executor.submit(() ->\n+                    doDelete(\"/api/customer/\" + customer.getId().getId().toString())\n+                            .andExpect(status().isOk())));\n         }\n+        Futures.allAsList(deleteFutures).get(TIMEOUT, TimeUnit.SECONDS);\n \n         pageLink = new PageLink(4, 0, title2);\n-        pageData = doGetTypedWithPageLink(\"/api/customers?\", new TypeReference<PageData<Customer>>(){}, pageLink);\n+        pageData = doGetTypedWithPageLink(\"/api/customers?\", PAGE_DATA_CUSTOMER_TYPE_REFERENCE, pageLink);\n         Assert.assertFalse(pageData.hasNext());\n         Assert.assertEquals(0, pageData.getData().size());\n     }",
      "parent_sha": "b2fa2630273114d7772de5489f4788c117324261"
    }
  },
  {
    "oid": "72a0126e23cd325fe95022911a5dcf592f7b99e1",
    "message": "AlarmState improvements",
    "date": "2020-11-12T15:07:07Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/72a0126e23cd325fe95022911a5dcf592f7b99e1",
    "details": {
      "sha": "535294d94c53ab091c46ab8ed551cfed35329352",
      "filename": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/profile/AlarmState.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/72a0126e23cd325fe95022911a5dcf592f7b99e1/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/72a0126e23cd325fe95022911a5dcf592f7b99e1/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fprofile%2FAlarmState.java?ref=72a0126e23cd325fe95022911a5dcf592f7b99e1",
      "patch": "@@ -67,6 +67,7 @@ public boolean process(TbContext ctx, TbMsg msg, DataSnapshot data, SnapshotUpda\n         initCurrentAlarm(ctx);\n         lastMsgMetaData = msg.getMetaData();\n         lastMsgQueueName = msg.getQueueName();\n+        this.dataSnapshot = data;\n         return createOrClearAlarms(ctx, data, update, AlarmRuleState::eval);\n     }\n \n@@ -190,7 +191,7 @@ public void updateState(DeviceProfileAlarm alarm, PersistedAlarmState alarmState\n         }\n     }\n \n-    private <T> TbAlarmResult calculateAlarmResult(TbContext ctx, AlarmRuleState ruleState) {\n+    private TbAlarmResult calculateAlarmResult(TbContext ctx, AlarmRuleState ruleState) {\n         AlarmSeverity severity = ruleState.getSeverity();\n         if (currentAlarm != null) {\n             // TODO: In some extremely rare cases, we might miss the event of alarm clear (If one use in-mem queue and restarted the server) or (if one manipulated the rule chain).\n@@ -230,7 +231,7 @@ private <T> TbAlarmResult calculateAlarmResult(TbContext ctx, AlarmRuleState rul\n         }\n     }\n \n-    private <T> JsonNode createDetails(AlarmRuleState ruleState) {\n+    private JsonNode createDetails(AlarmRuleState ruleState) {\n         ObjectNode details = JacksonUtil.OBJECT_MAPPER.createObjectNode();\n         String alarmDetails = ruleState.getAlarmRule().getAlarmDetails();\n ",
      "parent_sha": "7a13083851cc9afe40702d37f9a28982fb92602f"
    }
  },
  {
    "oid": "d5e973283ca305eb704b0c991adc2f1eb97516fe",
    "message": "EdgeGrpcSession - move check of empty high priority msgs into submethod",
    "date": "2024-12-23T18:46:07Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/d5e973283ca305eb704b0c991adc2f1eb97516fe",
    "details": {
      "sha": "64c97d735d39478f1dc3dd4bc5260076e9f85058",
      "filename": "application/src/main/java/org/thingsboard/server/service/edge/rpc/EdgeGrpcSession.java",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/d5e973283ca305eb704b0c991adc2f1eb97516fe/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/d5e973283ca305eb704b0c991adc2f1eb97516fe/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fedge%2Frpc%2FEdgeGrpcSession.java?ref=d5e973283ca305eb704b0c991adc2f1eb97516fe",
      "patch": "@@ -292,9 +292,7 @@ public void onFailure(Throwable t) {\n \n     protected void processEdgeEvents(EdgeEventFetcher fetcher, PageLink pageLink, SettableFuture<Pair<Long, Long>> result) {\n         try {\n-            if (!highPriorityQueue.isEmpty()) {\n-                processHighPriorityEvents();\n-            }\n+            processHighPriorityEvents();\n             PageData<EdgeEvent> pageData = fetcher.fetchEdgeEvents(edge.getTenantId(), edge, pageLink);\n             if (isConnected() && !pageData.getData().isEmpty()) {\n                 log.trace(\"[{}][{}][{}] event(s) are going to be processed.\", tenantId, sessionId, pageData.getData().size());\n@@ -537,6 +535,9 @@ private void onDownlinkResponse(DownlinkResponseMsg msg) {\n     public void processHighPriorityEvents() {\n         try {\n             if (isConnected() && isSyncCompleted()) {\n+                if (highPriorityQueue.isEmpty()) {\n+                    return;\n+                }\n                 List<EdgeEvent> highPriorityEvents = new ArrayList<>();\n                 EdgeEvent event;\n                 while ((event = highPriorityQueue.poll()) != null) {\n@@ -606,8 +607,13 @@ public void onFailure(Throwable t) {\n                 }\n             }, ctx.getGrpcCallbackExecutorService());\n         } else {\n-            log.trace(\"[{}][{}] edge is not connected or sync is not completed. Skipping iteration\", tenantId, sessionId);\n-            result.set(null);\n+            if (!isSyncCompleted()) {\n+                log.trace(\"[{}][{}] edge sync is not completed yet. Skipping iteration\", tenantId, sessionId);\n+                result.set(Boolean.TRUE);\n+            } else {\n+                log.trace(\"[{}][{}] edge is not connected. Skipping iteration\", tenantId, sessionId);\n+                result.set(null);\n+            }\n         }\n         return result;\n     }",
      "parent_sha": "509ff28f2e59591078a7cb846acbd57ce0607c29"
    }
  },
  {
    "oid": "3fc45654e852270d9c68a0e60b5fb72320f059ea",
    "message": "fixed search for resources",
    "date": "2021-07-06T11:32:15Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/3fc45654e852270d9c68a0e60b5fb72320f059ea",
    "details": {
      "sha": "1c3f0eda745eb395631c8f9022f9d6a068a8716a",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/sql/resource/TbResourceInfoRepository.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/3fc45654e852270d9c68a0e60b5fb72320f059ea/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fresource%2FTbResourceInfoRepository.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/3fc45654e852270d9c68a0e60b5fb72320f059ea/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fresource%2FTbResourceInfoRepository.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fresource%2FTbResourceInfoRepository.java?ref=3fc45654e852270d9c68a0e60b5fb72320f059ea",
      "patch": "@@ -27,7 +27,7 @@\n public interface TbResourceInfoRepository extends CrudRepository<TbResourceInfoEntity, UUID> {\n \n     @Query(\"SELECT tr FROM TbResourceInfoEntity tr WHERE \" +\n-            \"LOWER(tr.searchText) LIKE LOWER(CONCAT(:searchText, '%'))\" +\n+            \"LOWER(tr.title) LIKE LOWER(CONCAT('%', :searchText, '%'))\" +\n             \"AND (tr.tenantId = :tenantId \" +\n             \"OR (tr.tenantId = :systemAdminId \" +\n             \"AND NOT EXISTS \" +\n@@ -42,7 +42,7 @@ Page<TbResourceInfoEntity> findAllTenantResourcesByTenantId(@Param(\"tenantId\") U\n \n     @Query(\"SELECT ri FROM TbResourceInfoEntity ri WHERE \" +\n             \"ri.tenantId = :tenantId \" +\n-            \"AND LOWER(ri.searchText) LIKE LOWER(CONCAT(:searchText, '%'))\")\n+            \"AND LOWER(ri.title) LIKE LOWER(CONCAT('%', :searchText, '%'))\")\n     Page<TbResourceInfoEntity> findTenantResourcesByTenantId(@Param(\"tenantId\") UUID tenantId,\n                                                              @Param(\"searchText\") String searchText,\n                                                              Pageable pageable);",
      "parent_sha": "759e8ee3c7341f80bc859ff728828890361065fd"
    }
  },
  {
    "oid": "46646d6cd4be01df91e87502fd3d9930922b4199",
    "message": "refactoring: tests WidgetsBundle",
    "date": "2022-07-10T20:32:16Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/46646d6cd4be01df91e87502fd3d9930922b4199",
    "details": {
      "sha": "68ed3636e94b993e6a952b0b3e72d27ee89c8e15",
      "filename": "application/src/test/java/org/thingsboard/server/controller/BaseWidgetsBundleControllerTest.java",
      "status": "modified",
      "additions": 78,
      "deletions": 14,
      "changes": 92,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/46646d6cd4be01df91e87502fd3d9930922b4199/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseWidgetsBundleControllerTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/46646d6cd4be01df91e87502fd3d9930922b4199/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseWidgetsBundleControllerTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fcontroller%2FBaseWidgetsBundleControllerTest.java?ref=46646d6cd4be01df91e87502fd3d9930922b4199",
      "patch": "@@ -21,8 +21,12 @@\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.thingsboard.server.common.data.Customer;\n import org.thingsboard.server.common.data.Tenant;\n import org.thingsboard.server.common.data.User;\n+import org.thingsboard.server.common.data.audit.ActionType;\n+import org.thingsboard.server.common.data.id.CustomerId;\n import org.thingsboard.server.common.data.page.PageData;\n import org.thingsboard.server.common.data.page.PageLink;\n import org.thingsboard.server.common.data.security.Authority;\n@@ -34,6 +38,7 @@\n \n import static org.hamcrest.Matchers.containsString;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.thingsboard.server.dao.model.ModelConstants.SYSTEM_TENANT;\n \n public abstract class BaseWidgetsBundleControllerTest extends AbstractControllerTest {\n \n@@ -73,8 +78,16 @@ public void afterTest() throws Exception {\n     public void testSaveWidgetsBundle() throws Exception {\n         WidgetsBundle widgetsBundle = new WidgetsBundle();\n         widgetsBundle.setTitle(\"My widgets bundle\");\n+\n+        Mockito.reset(tbClusterService);\n+\n         WidgetsBundle savedWidgetsBundle = doPost(\"/api/widgetsBundle\", widgetsBundle, WidgetsBundle.class);\n \n+        testNotifyManyEntityManyTimeMsgToEdgeServiceEntityEqAny(savedWidgetsBundle, savedWidgetsBundle,\n+                savedTenant.getId(), tenantAdmin.getCustomerId(), tenantAdmin.getId(), tenantAdmin.getEmail(),\n+                ActionType.ADDED, ActionType.ADDED, 0, 1, 0);\n+        Mockito.reset(tbClusterService);\n+\n         Assert.assertNotNull(savedWidgetsBundle);\n         Assert.assertNotNull(savedWidgetsBundle.getId());\n         Assert.assertNotNull(savedWidgetsBundle.getAlias());\n@@ -87,13 +100,25 @@ public void testSaveWidgetsBundle() throws Exception {\n \n         WidgetsBundle foundWidgetsBundle = doGet(\"/api/widgetsBundle/\" + savedWidgetsBundle.getId().getId().toString(), WidgetsBundle.class);\n         Assert.assertEquals(foundWidgetsBundle.getTitle(), savedWidgetsBundle.getTitle());\n+\n+        testNotifyManyEntityManyTimeMsgToEdgeServiceEntityEqAny(savedWidgetsBundle, savedWidgetsBundle,\n+                savedTenant.getId(), tenantAdmin.getCustomerId(), tenantAdmin.getId(), tenantAdmin.getEmail(),\n+                ActionType.UPDATED, ActionType.UPDATED, 0, 1, 0);\n     }\n \n      @Test\n      public void testSaveWidgetBundleWithViolationOfLengthValidation() throws Exception {\n          WidgetsBundle widgetsBundle = new WidgetsBundle();\n          widgetsBundle.setTitle(RandomStringUtils.randomAlphabetic(300));\n-         doPost(\"/api/widgetsBundle\", widgetsBundle).andExpect(statusReason(containsString(\"length of title must be equal or less than 255\")));\n+\n+         Mockito.reset(tbClusterService);\n+\n+         String msgError = msgErrorFieldLength(\"title\");\n+         doPost(\"/api/widgetsBundle\", widgetsBundle)\n+                 .andExpect(status().isBadRequest())\n+                 .andExpect(statusReason(containsString(msgError)));\n+\n+         testNotifyEntityNever(widgetsBundle.getId(), widgetsBundle);\n      }\n \n     @Test\n@@ -103,7 +128,15 @@ public void testUpdateWidgetsBundleFromDifferentTenant() throws Exception {\n         WidgetsBundle savedWidgetsBundle = doPost(\"/api/widgetsBundle\", widgetsBundle, WidgetsBundle.class);\n \n         loginDifferentTenant();\n-        doPost(\"/api/widgetsBundle\", savedWidgetsBundle, WidgetsBundle.class, status().isForbidden());\n+\n+        Mockito.reset(tbClusterService);\n+\n+        doPost(\"/api/widgetsBundle\", savedWidgetsBundle)\n+                .andExpect(status().isForbidden())\n+                .andExpect(statusReason(containsString(msgErrorPermission)));\n+\n+        testNotifyEntityNever(savedWidgetsBundle.getId(), savedWidgetsBundle);\n+\n         deleteDifferentTenant();\n     }\n \n@@ -121,21 +154,35 @@ public void testFindWidgetsBundleById() throws Exception {\n     public void testDeleteWidgetsBundle() throws Exception {\n         WidgetsBundle widgetsBundle = new WidgetsBundle();\n         widgetsBundle.setTitle(\"My widgets bundle\");\n+\n+        Mockito.reset(tbClusterService, auditLogService);\n+\n         WidgetsBundle savedWidgetsBundle = doPost(\"/api/widgetsBundle\", widgetsBundle, WidgetsBundle.class);\n \n         doDelete(\"/api/widgetsBundle/\"+savedWidgetsBundle.getId().getId().toString())\n                 .andExpect(status().isOk());\n \n-        doGet(\"/api/widgetsBundle/\"+savedWidgetsBundle.getId().getId().toString())\n-                .andExpect(status().isNotFound());\n+        String savedWidgetsBundleIdStr = savedWidgetsBundle.getId().getId().toString();\n+        doGet(\"/api/widgetsBundle/\" + savedWidgetsBundleIdStr)\n+                .andExpect(status().isNotFound())\n+                .andExpect(statusReason(containsString(msgErrorNoFound(\"Widgets bundle\", savedWidgetsBundleIdStr))));\n+\n+        testNotifyManyEntityManyTimeMsgToEdgeServiceEntityEqAny(savedWidgetsBundle, savedWidgetsBundle,\n+                savedTenant.getId(), tenantAdmin.getCustomerId(), tenantAdmin.getId(), tenantAdmin.getEmail(),\n+                ActionType.DELETED, ActionType.DELETED, 0, 1, 0);\n     }\n \n     @Test\n     public void testSaveWidgetsBundleWithEmptyTitle() throws Exception {\n+\n+        Mockito.reset(tbClusterService, auditLogService);\n+\n         WidgetsBundle widgetsBundle = new WidgetsBundle();\n         doPost(\"/api/widgetsBundle\", widgetsBundle)\n                 .andExpect(status().isBadRequest())\n-                .andExpect(statusReason(containsString(\"Widgets bundle title should be specified\")));\n+                .andExpect(statusReason(containsString(\"Widgets bundle title \" + msgErrorShouldBeSpecified)));\n+\n+        testNotifyEntityNever(widgetsBundle.getId(), widgetsBundle);\n     }\n \n     @Test\n@@ -144,10 +191,14 @@ public void testUpdateWidgetsBundleAlias() throws Exception {\n         widgetsBundle.setTitle(\"My widgets bundle\");\n         WidgetsBundle savedWidgetsBundle = doPost(\"/api/widgetsBundle\", widgetsBundle, WidgetsBundle.class);\n         savedWidgetsBundle.setAlias(\"new_alias\");\n+\n+        Mockito.reset(tbClusterService);\n+\n         doPost(\"/api/widgetsBundle\", savedWidgetsBundle)\n                 .andExpect(status().isBadRequest())\n                 .andExpect(statusReason(containsString(\"Update of widgets bundle alias is prohibited\")));\n \n+        testNotifyEntityNever(savedWidgetsBundle.getId(), savedWidgetsBundle);\n     }\n \n     @Test\n@@ -156,24 +207,30 @@ public void testFindTenantWidgetsBundlesByPageLink() throws Exception {\n         login(tenantAdmin.getEmail(), \"testPassword1\");\n \n         List<WidgetsBundle> sysWidgetsBundles = doGetTyped(\"/api/widgetsBundles?\",\n-                new TypeReference<List<WidgetsBundle>>(){});\n+                new TypeReference<>(){});\n \n+        Mockito.reset(tbClusterService);\n \n+        int cntEntity = 73;\n         List<WidgetsBundle> widgetsBundles = new ArrayList<>();\n-        for (int i=0;i<73;i++) {\n+        for (int i=0;i<cntEntity;i++) {\n             WidgetsBundle widgetsBundle = new WidgetsBundle();\n             widgetsBundle.setTitle(\"Widgets bundle\"+i);\n             widgetsBundles.add(doPost(\"/api/widgetsBundle\", widgetsBundle, WidgetsBundle.class));\n         }\n \n+        testNotifyManyEntityManyTimeMsgToEdgeServiceEntityEqAny(new WidgetsBundle(), new WidgetsBundle(),\n+                savedTenant.getId(), tenantAdmin.getCustomerId(), tenantAdmin.getId(), tenantAdmin.getEmail(),\n+                ActionType.ADDED, ActionType.ADDED, 0, cntEntity, 0);\n+\n         widgetsBundles.addAll(sysWidgetsBundles);\n \n         List<WidgetsBundle> loadedWidgetsBundles = new ArrayList<>();\n         PageLink pageLink = new PageLink(14);\n         PageData<WidgetsBundle> pageData;\n         do {\n             pageData = doGetTypedWithPageLink(\"/api/widgetsBundles?\",\n-                    new TypeReference<PageData<WidgetsBundle>>(){}, pageLink);\n+                    new TypeReference<>(){}, pageLink);\n             loadedWidgetsBundles.addAll(pageData.getData());\n             if (pageData.hasNext()) {\n                 pageLink = pageLink.nextPageLink();\n@@ -192,10 +249,11 @@ public void testFindSystemWidgetsBundlesByPageLink() throws Exception {\n         loginSysAdmin();\n \n         List<WidgetsBundle> sysWidgetsBundles = doGetTyped(\"/api/widgetsBundles?\",\n-                new TypeReference<List<WidgetsBundle>>(){});\n+                new TypeReference<>(){});\n \n+        int cntEntity = 120;\n         List<WidgetsBundle> createdWidgetsBundles = new ArrayList<>();\n-        for (int i=0;i<120;i++) {\n+        for (int i=0;i<cntEntity;i++) {\n             WidgetsBundle widgetsBundle = new WidgetsBundle();\n             widgetsBundle.setTitle(\"Widgets bundle\"+i);\n             createdWidgetsBundles.add(doPost(\"/api/widgetsBundle\", widgetsBundle, WidgetsBundle.class));\n@@ -209,7 +267,7 @@ public void testFindSystemWidgetsBundlesByPageLink() throws Exception {\n         PageData<WidgetsBundle> pageData;\n         do {\n             pageData = doGetTypedWithPageLink(\"/api/widgetsBundles?\",\n-                    new TypeReference<PageData<WidgetsBundle>>(){}, pageLink);\n+                    new TypeReference<>(){}, pageLink);\n             loadedWidgetsBundles.addAll(pageData.getData());\n             if (pageData.hasNext()) {\n                 pageLink = pageLink.nextPageLink();\n@@ -221,11 +279,17 @@ public void testFindSystemWidgetsBundlesByPageLink() throws Exception {\n \n         Assert.assertEquals(widgetsBundles, loadedWidgetsBundles);\n \n+        Mockito.reset(tbClusterService);\n+\n         for (WidgetsBundle widgetsBundle : createdWidgetsBundles) {\n             doDelete(\"/api/widgetsBundle/\"+widgetsBundle.getId().getId().toString())\n                     .andExpect(status().isOk());\n         }\n \n+        testNotifyManyEntityManyTimeMsgToEdgeServiceEntityEqAny(new WidgetsBundle(), new WidgetsBundle(),\n+                SYSTEM_TENANT, (CustomerId) createEntityId_NULL_UUID(new Customer()), null, SYS_ADMIN_EMAIL,\n+                ActionType.DELETED, ActionType.DELETED, 0, cntEntity, 0);\n+\n         pageLink = new PageLink(17);\n         loadedWidgetsBundles.clear();\n         do {\n@@ -262,7 +326,7 @@ public void testFindTenantWidgetsBundles() throws Exception {\n         widgetsBundles.addAll(sysWidgetsBundles);\n \n         List<WidgetsBundle> loadedWidgetsBundles = doGetTyped(\"/api/widgetsBundles?\",\n-                new TypeReference<List<WidgetsBundle>>(){});\n+                new TypeReference<>(){});\n \n         Collections.sort(widgetsBundles, idComparator);\n         Collections.sort(loadedWidgetsBundles, idComparator);\n@@ -277,7 +341,7 @@ public void testFindSystemAndTenantWidgetsBundles() throws Exception {\n \n \n         List<WidgetsBundle> sysWidgetsBundles = doGetTyped(\"/api/widgetsBundles?\",\n-                new TypeReference<List<WidgetsBundle>>(){});\n+                new TypeReference<>(){});\n \n         List<WidgetsBundle> createdSystemWidgetsBundles = new ArrayList<>();\n         for (int i=0;i<82;i++) {\n@@ -324,7 +388,7 @@ public void testFindSystemAndTenantWidgetsBundles() throws Exception {\n         }\n \n         loadedWidgetsBundles = doGetTyped(\"/api/widgetsBundles?\",\n-                new TypeReference<List<WidgetsBundle>>(){});\n+                new TypeReference<>(){});\n \n         Collections.sort(sysWidgetsBundles, idComparator);\n         Collections.sort(loadedWidgetsBundles, idComparator);",
      "parent_sha": "c89a497348396f7e7462a91d2d8ee0da8817f96b"
    }
  },
  {
    "oid": "5cfcd1946d493618f297091e5edfdd545c8d257a",
    "message": "merge else if into one for transformMsg method in TbAbstractGetEntityDetailsNode",
    "date": "2023-02-20T14:34:24Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/5cfcd1946d493618f297091e5edfdd545c8d257a",
    "details": {
      "sha": "315da5f16ac46433d35698d24f2f06518c70333b",
      "filename": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/metadata/TbAbstractGetEntityDetailsNode.java",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/5cfcd1946d493618f297091e5edfdd545c8d257a/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbAbstractGetEntityDetailsNode.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/5cfcd1946d493618f297091e5edfdd545c8d257a/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbAbstractGetEntityDetailsNode.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/rule-engine%2Frule-engine-components%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Frule%2Fengine%2Fmetadata%2FTbAbstractGetEntityDetailsNode.java?ref=5cfcd1946d493618f297091e5edfdd545c8d257a",
      "patch": "@@ -90,13 +90,11 @@ private ListenableFuture<TbMsg> transformMsg(TbContext ctx, TbMsg msg, Listenabl\n         return Futures.transformAsync(propertiesFuture, jsonElement -> {\n             if (jsonElement == null) {\n                 return Futures.immediateFuture(null);\n+            } else if (messageData.getDataSource().equals(DataSource.METADATA)) {\n+                Map<String, String> metadataMap = gson.fromJson(jsonElement.toString(), TYPE);\n+                return Futures.immediateFuture(ctx.transformMsg(msg, msg.getType(), msg.getOriginator(), new TbMsgMetaData(metadataMap), msg.getData()));\n             } else {\n-                if (messageData.getDataSource().equals(DataSource.METADATA)) {\n-                    Map<String, String> metadataMap = gson.fromJson(jsonElement.toString(), TYPE);\n-                    return Futures.immediateFuture(ctx.transformMsg(msg, msg.getType(), msg.getOriginator(), new TbMsgMetaData(metadataMap), msg.getData()));\n-                } else {\n-                    return Futures.immediateFuture(ctx.transformMsg(msg, msg.getType(), msg.getOriginator(), msg.getMetaData(), gson.toJson(jsonElement)));\n-                }\n+                return Futures.immediateFuture(ctx.transformMsg(msg, msg.getType(), msg.getOriginator(), msg.getMetaData(), gson.toJson(jsonElement)));\n             }\n         }, MoreExecutors.directExecutor());\n     }",
      "parent_sha": "30b7d819ec95892817396b33e4512df07a0aad95"
    }
  },
  {
    "oid": "c197f27d8e16b6b27009daa974f1b823ef3454b4",
    "message": "remove replace quote to method with a meaningful name. Also, remove split values to list to this method.",
    "date": "2021-11-05T10:16:52Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/c197f27d8e16b6b27009daa974f1b823ef3454b4",
    "details": {
      "sha": "7a86431da0fa13edc64996545dfdcc25ebbc1f4a",
      "filename": "dao/src/main/java/org/thingsboard/server/dao/sql/query/EntityKeyMapping.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/c197f27d8e16b6b27009daa974f1b823ef3454b4/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FEntityKeyMapping.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/c197f27d8e16b6b27009daa974f1b823ef3454b4/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FEntityKeyMapping.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/dao%2Fsrc%2Fmain%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fdao%2Fsql%2Fquery%2FEntityKeyMapping.java?ref=c197f27d8e16b6b27009daa974f1b823ef3454b4",
      "patch": "@@ -561,25 +561,27 @@ private String buildStringPredicateQuery(QueryContext ctx, String field, StringF\n                 stringOperationQuery = String.format(\"%s not like :%s or %s is null)\", operationField, paramName, operationField);\n                 break;\n             case IN:\n-                value = value.replaceAll(\"'\",\"\").replaceAll(\"\\\"\", \"\");\n                 stringOperationQuery = String.format(\"%s in (:%s))\", operationField, paramName);\n                 break;\n             case NOT_IN:\n-                value = value.replaceAll(\"'\",\"\").replaceAll(\"\\\"\", \"\");\n                 stringOperationQuery = String.format(\"%s not in (:%s))\", operationField, paramName);\n                 break;\n         }\n         switch (stringFilterPredicate.getOperation()) {\n             case IN:\n             case NOT_IN:\n-                ctx.addStringListParameter(paramName, List.of(value.trim().split(\"\\\\s*,\\\\s*\")));\n+                ctx.addStringListParameter(paramName, getListValuesWithoutQuote(value));\n                 break;\n             default:\n                 ctx.addStringParameter(paramName, value);\n         }\n         return String.format(\"((%s is not null and %s)\", field, stringOperationQuery);\n     }\n \n+    private List<String> getListValuesWithoutQuote(String value) {\n+        return List.of(value.replaceAll(\"'\", \"\").replaceAll(\"\\\"\", \"\").trim().split(\"\\\\s*,\\\\s*\"));\n+    }\n+\n     private String buildNumericPredicateQuery(QueryContext ctx, String field, NumericFilterPredicate numericFilterPredicate) {\n         String paramName = getNextParameterName(field);\n         ctx.addDoubleParameter(paramName, numericFilterPredicate.getValue().getValue());",
      "parent_sha": "a9b3f409f3b7aa8e4acf2f492d735fb36e0f2d75"
    }
  },
  {
    "oid": "f46f90f06b65dfd8188f9a067b782f4611d4eace",
    "message": "NashornJsInvokeServiceTest added givenSimpleScriptMultiThreadTestPerformance",
    "date": "2024-03-27T08:01:06Z",
    "url": "https://github.com/thingsboard/thingsboard/commit/f46f90f06b65dfd8188f9a067b782f4611d4eace",
    "details": {
      "sha": "28834a0ab74d33cf15f4cec26adc0a568f1a2a3d",
      "filename": "application/src/test/java/org/thingsboard/server/service/script/NashornJsInvokeServiceTest.java",
      "status": "modified",
      "additions": 48,
      "deletions": 1,
      "changes": 49,
      "blob_url": "https://github.com/thingsboard/thingsboard/blob/f46f90f06b65dfd8188f9a067b782f4611d4eace/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fscript%2FNashornJsInvokeServiceTest.java",
      "raw_url": "https://github.com/thingsboard/thingsboard/raw/f46f90f06b65dfd8188f9a067b782f4611d4eace/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fscript%2FNashornJsInvokeServiceTest.java",
      "contents_url": "https://api.github.com/repos/thingsboard/thingsboard/contents/application%2Fsrc%2Ftest%2Fjava%2Forg%2Fthingsboard%2Fserver%2Fservice%2Fscript%2FNashornJsInvokeServiceTest.java?ref=f46f90f06b65dfd8188f9a067b782f4611d4eace",
      "patch": "@@ -15,6 +15,8 @@\n  */\n package org.thingsboard.server.service.script;\n \n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n import lombok.extern.slf4j.Slf4j;\n import org.junit.Assert;\n import org.junit.jupiter.api.Test;\n@@ -28,9 +30,12 @@\n import org.thingsboard.server.controller.AbstractControllerTest;\n import org.thingsboard.server.dao.service.DaoSqlTest;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.UUID;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n@@ -80,6 +85,44 @@ void givenSimpleScriptTestPerformance() throws ExecutionException, InterruptedEx\n                 .isLessThan(TimeUnit.MINUTES.toMillis(1)); // effective exec time is about 500ms\n     }\n \n+    @Test\n+    void givenSimpleScriptMultiThreadTestPerformance() throws ExecutionException, InterruptedException, TimeoutException {\n+        int iterations = 1000*4;\n+        List<ListenableFuture<Object>> futures = new ArrayList<>(iterations);\n+        UUID scriptId = evalScript(\"return msg.temperature > 20 ;\");\n+        // warmup\n+        log.info(\"Warming up 1000 times...\");\n+\n+        var warmupWatch = TbStopWatch.create();\n+        for (int i = 0; i < 1000; i++) {\n+            futures.add(invokeScriptAsync(scriptId, \"{\\\"temperature\\\":\" + i + \"}\"));\n+        }\n+        List<Object> results = Futures.allAsList(futures).get(1, TimeUnit.MINUTES);\n+        for (int i = 0; i < 1000; i++) {\n+            boolean expected = i > 20;\n+            boolean result = Boolean.parseBoolean(results.get(i).toString());\n+            Assert.assertEquals(expected, result);\n+        }\n+        log.info(\"Warming up finished in {} ms\", warmupWatch.stopAndGetTotalTimeMillis());\n+        futures.clear();\n+\n+        log.info(\"Starting performance test...\");\n+        var watch = TbStopWatch.create();\n+        for (int i = 0; i < iterations; i++) {\n+            futures.add(invokeScriptAsync(scriptId, \"{\\\"temperature\\\":\" + i + \"}\"));\n+        }\n+        results = Futures.allAsList(futures).get(1, TimeUnit.MINUTES);\n+        for (int i = 0; i < iterations; i++) {\n+            boolean expected = i > 20;\n+            boolean result = Boolean.parseBoolean(results.get(i).toString());\n+            Assert.assertEquals(expected, result);\n+        }\n+        long duration = watch.stopAndGetTotalTimeMillis();\n+        log.info(\"Performance test with {} invocations took: {} ms\", iterations, duration);\n+        assertThat(duration).as(\"duration ms\")\n+                .isLessThan(TimeUnit.MINUTES.toMillis(1)); // effective exec time is about 500ms\n+    }\n+\n     @Test\n     void givenTooBigScriptForEval_thenReturnError() {\n         String hugeScript = \"var a = 'qwertyqwertywertyqwabababer'; return {a: a};\";\n@@ -127,7 +170,11 @@ private UUID evalScript(String script) throws ExecutionException, InterruptedExc\n     }\n \n     private String invokeScript(UUID scriptId, String msg) throws ExecutionException, InterruptedException {\n-        return invokeService.invokeScript(TenantId.SYS_TENANT_ID, null, scriptId, msg, \"{}\", POST_TELEMETRY_REQUEST.name()).get().toString();\n+        return invokeScriptAsync(scriptId, msg).get().toString();\n+    }\n+\n+    private ListenableFuture<Object> invokeScriptAsync(UUID scriptId, String msg) {\n+        return invokeService.invokeScript(TenantId.SYS_TENANT_ID, null, scriptId, msg, \"{}\", POST_TELEMETRY_REQUEST.name());\n     }\n \n }",
      "parent_sha": "cd722a11484bf3f54cdeb628135af7018ac36f65"
    }
  }
]