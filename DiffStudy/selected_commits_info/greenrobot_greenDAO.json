[
  {
    "oid": "c94df123bae46d31099b1f787b813cd129b3e59a",
    "message": "Don't assume that a Cursor has a CursorWindow (fix for Roboelectric)",
    "date": "2012-02-13T18:28:28Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/c94df123bae46d31099b1f787b813cd129b3e59a",
    "details": {
      "sha": "4503b1c2cea8de4b3955996639c25f027aea4a32",
      "filename": "DaoCore/src/de/greenrobot/dao/AbstractDao.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/c94df123bae46d31099b1f787b813cd129b3e59a/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/c94df123bae46d31099b1f787b813cd129b3e59a/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java?ref=c94df123bae46d31099b1f787b813cd129b3e59a",
      "patch": "@@ -144,7 +144,7 @@ protected T loadUnique(Cursor cursor) {\n         return loadCurrent(cursor, 0, true);\r\n     }\r\n \r\n-    /** Loads all available entities from the database. */ \r\n+    /** Loads all available entities from the database. */\r\n     public List<T> loadAll() {\r\n         Cursor cursor = db.rawQuery(statements.getSelectAll(), null);\r\n         return loadAllAndCloseCursor(cursor);\r\n@@ -269,10 +269,12 @@ protected List<T> loadAllFromCursor(Cursor cursor) {\n         List<T> list = new ArrayList<T>(count);\r\n         if (cursor instanceof CrossProcessCursor) {\r\n             CursorWindow window = ((CrossProcessCursor) cursor).getWindow();\r\n-            if (window.getNumRows() == count) {\r\n-                cursor = new FastCursor(window);\r\n-            } else {\r\n-                DaoLog.d(\"Window vs. result size: \" + window.getNumRows() + \"/\" + count);\r\n+            if (window != null) { // E.g. Roboelectric has no Window at this point\r\n+                if (window.getNumRows() == count) {\r\n+                    cursor = new FastCursor(window);\r\n+                } else {\r\n+                    DaoLog.d(\"Window vs. result size: \" + window.getNumRows() + \"/\" + count);\r\n+                }\r\n             }\r\n         }\r\n \r\n@@ -358,7 +360,7 @@ public List<T> queryRaw(String where, String... selectionArg) {\n         return loadAllAndCloseCursor(cursor);\r\n     }\r\n \r\n-    /** @deprecated  groupBy & having does not make sense for entities. Method will be removed. */\r\n+    /** @deprecated groupBy & having does not make sense for entities. Method will be removed. */\r\n     public List<T> query(String selection, String[] selectionArgs, String groupBy, String having, String orderby) {\r\n         Cursor cursor = db.query(config.tablename, getAllColumns(), selection, selectionArgs, groupBy, having, orderby);\r\n         return loadAllAndCloseCursor(cursor);\r",
      "parent_sha": "c958b7b4b5629bdf54dfe7e32138de13def79e7d"
    }
  },
  {
    "oid": "c00203f8b941c0668afb92343a72507077d9f881",
    "message": "added outDirEntity to generator",
    "date": "2015-06-22T20:54:55Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/c00203f8b941c0668afb92343a72507077d9f881",
    "details": {
      "sha": "bc747ca99b0662928b1b2d041b17b4c03771f913",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/c00203f8b941c0668afb92343a72507077d9f881/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/c00203f8b941c0668afb92343a72507077d9f881/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java?ref=c00203f8b941c0668afb92343a72507077d9f881",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * This file is part of greenDAO Generator.\n  * \n@@ -33,7 +33,7 @@\n \n /**\n  * Once you have your model created, use this class to generate entities and DAOs.\n- * \n+ *\n  * @author Markus\n  */\n public class DaoGenerator {\n@@ -51,7 +51,7 @@ public class DaoGenerator {\n \n     public DaoGenerator() throws IOException {\n         System.out.println(\"greenDAO Generator\");\n-        System.out.println(\"Copyright 2011-2014 Markus Junginger, greenrobot.de. Licensed under GPL V3.\");\n+        System.out.println(\"Copyright 2011-2015 Markus Junginger, greenrobot.de. Licensed under GPL V3.\");\n         System.out.println(\"This program comes with ABSOLUTELY NO WARRANTY\");\n \n         patternKeepIncludes = compilePattern(\"INCLUDES\");\n@@ -78,19 +78,16 @@ private Pattern compilePattern(String sectionName) {\n \n     /** Generates all entities and DAOs for the given schema. */\n     public void generateAll(Schema schema, String outDir) throws Exception {\n-        generateAll(schema, outDir, null);\n+        generateAll(schema, outDir, null, null);\n     }\n \n     /** Generates all entities and DAOs for the given schema. */\n-    public void generateAll(Schema schema, String outDir, String outDirTest) throws Exception {\n+    public void generateAll(Schema schema, String outDir, String outDirEntity, String outDirTest) throws Exception {\n         long start = System.currentTimeMillis();\n \n         File outDirFile = toFileForceExists(outDir);\n-\n-        File outDirTestFile = null;\n-        if (outDirTest != null) {\n-            outDirTestFile = toFileForceExists(outDirTest);\n-        }\n+        File outDirEntityFile = outDirEntity != null? toFileForceExists(outDirEntity): outDirFile;\n+        File outDirTestFile = outDirTest != null ? toFileForceExists(outDirTest) : null;\n \n         schema.init2ndPass();\n         schema.init3ndPass();\n@@ -101,7 +98,7 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws\n         for (Entity entity : entities) {\n             generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);\n             if (!entity.isProtobuf() && !entity.isSkipGeneration()) {\n-                generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);\n+                generate(templateEntity, outDirEntityFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);\n             }\n             if (outDirTestFile != null && !entity.isSkipGenerationTest()) {\n                 String javaPackageTest = entity.getJavaPackageTest();\n@@ -137,12 +134,12 @@ protected File toFileForceExists(String filename) throws IOException {\n     }\n \n     private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,\n-            Entity entity) throws Exception {\n+                          Entity entity) throws Exception {\n         generate(template, outDirFile, javaPackage, javaClassName, schema, entity, null);\n     }\n \n     private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,\n-            Entity entity, Map<String, Object> additionalObjectsForTemplate) throws Exception {\n+                          Entity entity, Map<String, Object> additionalObjectsForTemplate) throws Exception {\n         Map<String, Object> root = new HashMap<String, Object>();\n         root.put(\"schema\", schema);\n         root.put(\"entity\", entity);",
      "parent_sha": "d71ee2b9e2d02fd9a94d5851fade0cd1b81e7ab7"
    }
  },
  {
    "oid": "d467bf5be97801b45b53822b3f0be083940ed016",
    "message": "make internal properties package private (#184)",
    "date": "2015-06-27T05:31:32Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/d467bf5be97801b45b53822b3f0be083940ed016",
    "details": {
      "sha": "0ae8b521885699148bccb61923b570f1532e077f",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/Entity.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/d467bf5be97801b45b53822b3f0be083940ed016/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/d467bf5be97801b45b53822b3f0be083940ed016/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java?ref=d467bf5be97801b45b53822b3f0be083940ed016",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * This file is part of greenDAO Generator.\n  * \n@@ -314,23 +314,23 @@ public void setJavaPackageTest(String javaPackageTest) {\n         this.javaPackageTest = javaPackageTest;\n     }\n \n-    public List<Property> getPropertiesPk() {\n+    List<Property> getPropertiesPk() {\n         return propertiesPk;\n     }\n \n-    public List<Property> getPropertiesNonPk() {\n+    List<Property> getPropertiesNonPk() {\n         return propertiesNonPk;\n     }\n \n-    public Property getPkProperty() {\n+    Property getPkProperty() {\n         return pkProperty;\n     }\n \n     public List<Index> getIndexes() {\n         return indexes;\n     }\n \n-    public String getPkType() {\n+    String getPkType() {\n         return pkType;\n     }\n ",
      "parent_sha": "1f72d14492b68922b08b38052a90d253ae0c12fc"
    }
  },
  {
    "oid": "ed2026a588ebd2267952f81187ab9bed750f241a",
    "message": "example: do not use all-args constructor for Note, it should be reserved for greenDAO",
    "date": "2017-03-03T09:57:06Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/ed2026a588ebd2267952f81187ab9bed750f241a",
    "details": {
      "sha": "648ce8cc11e933f412459305e703dca97d15255f",
      "filename": "examples/DaoExample/src/main/java/org/greenrobot/greendao/example/NoteActivity.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/ed2026a588ebd2267952f81187ab9bed750f241a/examples%2FDaoExample%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fexample%2FNoteActivity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/ed2026a588ebd2267952f81187ab9bed750f241a/examples%2FDaoExample%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fexample%2FNoteActivity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/examples%2FDaoExample%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fexample%2FNoteActivity.java?ref=ed2026a588ebd2267952f81187ab9bed750f241a",
      "patch": "@@ -119,7 +119,11 @@ private void addNote() {\n         final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);\n         String comment = \"Added on \" + df.format(new Date());\n \n-        Note note = new Note(null, noteText, comment, new Date(), NoteType.TEXT);\n+        Note note = new Note();\n+        note.setText(noteText);\n+        note.setComment(comment);\n+        note.setDate(new Date());\n+        note.setType(NoteType.TEXT);\n         noteDao.insert(note);\n         Log.d(\"DaoExample\", \"Inserted new note, ID: \" + note.getId());\n ",
      "parent_sha": "d6af329fa20a93fe93905d89aeb7d29ef5a977bf"
    }
  },
  {
    "oid": "e9868eeac99fe63b8c251fae3a0d2156b5065dff",
    "message": "check value is not an array where a primitive value is required for\ncondition",
    "date": "2013-01-12T14:16:25Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/e9868eeac99fe63b8c251fae3a0d2156b5065dff",
    "details": {
      "sha": "05bafa9e2d127232987f0b3195753e39fa10e0f9",
      "filename": "DaoCore/src/de/greenrobot/dao/WhereCondition.java",
      "status": "modified",
      "additions": 168,
      "deletions": 165,
      "changes": 333,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/e9868eeac99fe63b8c251fae3a0d2156b5065dff/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FWhereCondition.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/e9868eeac99fe63b8c251fae3a0d2156b5065dff/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FWhereCondition.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FWhereCondition.java?ref=e9868eeac99fe63b8c251fae3a0d2156b5065dff",
      "patch": "@@ -1,165 +1,168 @@\n-/*\r\n- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package de.greenrobot.dao;\r\n-\r\n-import java.util.Date;\r\n-import java.util.List;\r\n-\r\n-/**\r\n- * Internal interface to model WHERE conditions used in queries. Use the {@link Property} objects in the DAO classes to\r\n- * create new conditions.\r\n- */\r\n-public interface WhereCondition {\r\n-\r\n-    void appendTo(StringBuilder builder, String tableAlias);\r\n-\r\n-    void appendValuesTo(List<Object> values);\r\n-\r\n-    public abstract static class AbstractCondition implements WhereCondition {\r\n-\r\n-        protected final boolean hasSingleValue;\r\n-        protected final Object value;\r\n-        protected final Object[] values;\r\n-\r\n-        public AbstractCondition() {\r\n-            hasSingleValue = false;\r\n-            value = null;\r\n-            values = null;\r\n-        }\r\n-\r\n-        public AbstractCondition(Object value) {\r\n-            this.value = value;\r\n-            hasSingleValue = true;\r\n-            values = null;\r\n-        }\r\n-\r\n-        public AbstractCondition(Object[] values) {\r\n-            this.value = null;\r\n-            hasSingleValue = false;\r\n-            this.values = values;\r\n-        }\r\n-\r\n-        @Override\r\n-        public void appendValuesTo(List<Object> valuesTarget) {\r\n-            if (hasSingleValue) {\r\n-                valuesTarget.add(value);\r\n-            }\r\n-            if (values != null) {\r\n-                for (Object value : values) {\r\n-                    valuesTarget.add(value);\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public static class PropertyCondition extends AbstractCondition {\r\n-\r\n-        private static Object checkValueForType(Property property, Object value) {\r\n-            Class<?> type = property.type;\r\n-            if (type == Date.class) {\r\n-                if (value instanceof Date) {\r\n-                    return ((Date) value).getTime();\r\n-                } else if (value instanceof Long) {\r\n-                    return value;\r\n-                } else {\r\n-                    throw new DaoException(\"Illegal date value: expected java.util.Date or Long for value \" + value);\r\n-                }\r\n-            } else if (property.type == boolean.class || property.type == Boolean.class) {\r\n-                if (value instanceof Boolean) {\r\n-                    return ((Boolean) value) ? 1 : 0;\r\n-                } else if (value instanceof Number) {\r\n-                    int intValue = ((Number) value).intValue();\r\n-                    if (intValue != 0 && intValue != 1) {\r\n-                        throw new DaoException(\"Illegal boolean value: numbers must be 0 or 1, but was \" + value);\r\n-                    }\r\n-                } else if (value instanceof String) {\r\n-                    String stringValue = ((String) value);\r\n-                    if (\"TRUE\".equalsIgnoreCase(stringValue)) {\r\n-                        return 1;\r\n-                    } else if (\"FALSE\".equalsIgnoreCase(stringValue)) {\r\n-                        return 0;\r\n-                    } else {\r\n-                        throw new DaoException(\r\n-                                \"Illegal boolean value: Strings must be \\\"TRUE\\\" or \\\"FALSE\\\" (case insesnsitive), but was \"\r\n-                                        + value);\r\n-                    }\r\n-                }\r\n-            }\r\n-            return value;\r\n-        }\r\n-\r\n-        private static Object[] checkValuesForType(Property property, Object[] values) {\r\n-            for (int i = 0; i < values.length; i++) {\r\n-                values[i] = checkValueForType(property, values[i]);\r\n-            }\r\n-            return values;\r\n-        }\r\n-\r\n-        public final Property property;\r\n-        public final String op;\r\n-\r\n-        public PropertyCondition(Property property, String op) {\r\n-            this.property = property;\r\n-            this.op = op;\r\n-        }\r\n-\r\n-        public PropertyCondition(Property property, String op, Object value) {\r\n-            super(checkValueForType(property, value));\r\n-            this.property = property;\r\n-            this.op = op;\r\n-        }\r\n-\r\n-        public PropertyCondition(Property property, String op, Object[] values) {\r\n-            super(checkValuesForType(property, values));\r\n-            this.property = property;\r\n-            this.op = op;\r\n-        }\r\n-\r\n-        @Override\r\n-        public void appendTo(StringBuilder builder, String tableAlias) {\r\n-            if (tableAlias != null) {\r\n-                builder.append(tableAlias).append('.');\r\n-            }\r\n-            builder.append('\\'').append(property.columnName).append('\\'').append(op);\r\n-        }\r\n-    }\r\n-\r\n-    public static class StringCondition extends AbstractCondition {\r\n-\r\n-        protected final String string;\r\n-\r\n-        public StringCondition(String string) {\r\n-            this.string = string;\r\n-        }\r\n-\r\n-        public StringCondition(String string, Object value) {\r\n-            super(value);\r\n-            this.string = string;\r\n-        }\r\n-\r\n-        public StringCondition(String string, Object... values) {\r\n-            super(values);\r\n-            this.string = string;\r\n-        }\r\n-\r\n-        @Override\r\n-        public void appendTo(StringBuilder builder, String tableAlias) {\r\n-            builder.append(string);\r\n-        }\r\n-\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package de.greenrobot.dao;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Internal interface to model WHERE conditions used in queries. Use the {@link Property} objects in the DAO classes to\n+ * create new conditions.\n+ */\n+public interface WhereCondition {\n+\n+    void appendTo(StringBuilder builder, String tableAlias);\n+\n+    void appendValuesTo(List<Object> values);\n+\n+    public abstract static class AbstractCondition implements WhereCondition {\n+\n+        protected final boolean hasSingleValue;\n+        protected final Object value;\n+        protected final Object[] values;\n+\n+        public AbstractCondition() {\n+            hasSingleValue = false;\n+            value = null;\n+            values = null;\n+        }\n+\n+        public AbstractCondition(Object value) {\n+            this.value = value;\n+            hasSingleValue = true;\n+            values = null;\n+        }\n+\n+        public AbstractCondition(Object[] values) {\n+            this.value = null;\n+            hasSingleValue = false;\n+            this.values = values;\n+        }\n+\n+        @Override\n+        public void appendValuesTo(List<Object> valuesTarget) {\n+            if (hasSingleValue) {\n+                valuesTarget.add(value);\n+            }\n+            if (values != null) {\n+                for (Object value : values) {\n+                    valuesTarget.add(value);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static class PropertyCondition extends AbstractCondition {\n+\n+        private static Object checkValueForType(Property property, Object value) {\n+            if (value != null && value.getClass().isArray()) {\n+                throw new DaoException(\"Illegal value: found array, but simple object required\");\n+            }\n+            Class<?> type = property.type;\n+            if (type == Date.class) {\n+                if (value instanceof Date) {\n+                    return ((Date) value).getTime();\n+                } else if (value instanceof Long) {\n+                    return value;\n+                } else {\n+                    throw new DaoException(\"Illegal date value: expected java.util.Date or Long for value \" + value);\n+                }\n+            } else if (property.type == boolean.class || property.type == Boolean.class) {\n+                if (value instanceof Boolean) {\n+                    return ((Boolean) value) ? 1 : 0;\n+                } else if (value instanceof Number) {\n+                    int intValue = ((Number) value).intValue();\n+                    if (intValue != 0 && intValue != 1) {\n+                        throw new DaoException(\"Illegal boolean value: numbers must be 0 or 1, but was \" + value);\n+                    }\n+                } else if (value instanceof String) {\n+                    String stringValue = ((String) value);\n+                    if (\"TRUE\".equalsIgnoreCase(stringValue)) {\n+                        return 1;\n+                    } else if (\"FALSE\".equalsIgnoreCase(stringValue)) {\n+                        return 0;\n+                    } else {\n+                        throw new DaoException(\n+                                \"Illegal boolean value: Strings must be \\\"TRUE\\\" or \\\"FALSE\\\" (case insesnsitive), but was \"\n+                                        + value);\n+                    }\n+                }\n+            }\n+            return value;\n+        }\n+\n+        private static Object[] checkValuesForType(Property property, Object[] values) {\n+            for (int i = 0; i < values.length; i++) {\n+                values[i] = checkValueForType(property, values[i]);\n+            }\n+            return values;\n+        }\n+\n+        public final Property property;\n+        public final String op;\n+\n+        public PropertyCondition(Property property, String op) {\n+            this.property = property;\n+            this.op = op;\n+        }\n+\n+        public PropertyCondition(Property property, String op, Object value) {\n+            super(checkValueForType(property, value));\n+            this.property = property;\n+            this.op = op;\n+        }\n+\n+        public PropertyCondition(Property property, String op, Object[] values) {\n+            super(checkValuesForType(property, values));\n+            this.property = property;\n+            this.op = op;\n+        }\n+\n+        @Override\n+        public void appendTo(StringBuilder builder, String tableAlias) {\n+            if (tableAlias != null) {\n+                builder.append(tableAlias).append('.');\n+            }\n+            builder.append('\\'').append(property.columnName).append('\\'').append(op);\n+        }\n+    }\n+\n+    public static class StringCondition extends AbstractCondition {\n+\n+        protected final String string;\n+\n+        public StringCondition(String string) {\n+            this.string = string;\n+        }\n+\n+        public StringCondition(String string, Object value) {\n+            super(value);\n+            this.string = string;\n+        }\n+\n+        public StringCondition(String string, Object... values) {\n+            super(values);\n+            this.string = string;\n+        }\n+\n+        @Override\n+        public void appendTo(StringBuilder builder, String tableAlias) {\n+            builder.append(string);\n+        }\n+\n+    }\n+\n+}",
      "parent_sha": "0fbc67832d3d00f1c6c9f0473d32b152d3124fc2"
    }
  },
  {
    "oid": "e34876e83022851e27a73b2248f4699d2725736c",
    "message": "minor rename to pkAutoincrement",
    "date": "2012-06-06T09:35:08Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/e34876e83022851e27a73b2248f4699d2725736c",
    "details": {
      "sha": "8d1be98b0613995ffc754afc15c7ac9b9601a468",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/Property.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/e34876e83022851e27a73b2248f4699d2725736c/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FProperty.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/e34876e83022851e27a73b2248f4699d2725736c/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FProperty.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FProperty.java?ref=e34876e83022851e27a73b2248f4699d2725736c",
      "patch": "@@ -59,7 +59,7 @@ public PropertyBuilder autoincrement() {\n                 throw new RuntimeException(\r\n                         \"AUTOINCREMENT is only available to primary key properties of type long/Long\");\r\n             }\r\n-            property.autoincrement = true;\r\n+            property.pkAutoincrement = true;\r\n             return this;\r\n         }\r\n \r\n@@ -118,7 +118,7 @@ public Property getProperty() {\n     private boolean primaryKey;\r\n     private boolean pkAsc;\r\n     private boolean pkDesc;\r\n-    private boolean autoincrement;\r\n+    private boolean pkAutoincrement;\r\n \r\n     private boolean unique;\r\n     private boolean notNull;\r\n@@ -162,7 +162,7 @@ public boolean isPrimaryKey() {\n     }\r\n \r\n     public boolean isAutoincrement() {\r\n-        return autoincrement;\r\n+        return pkAutoincrement;\r\n     }\r\n \r\n     public String getConstraints() {\r\n@@ -218,7 +218,7 @@ private void initConstraint() {\n             if (pkDesc) {\r\n                 constraintBuilder.append(\" DESC\");\r\n             }\r\n-            if (autoincrement) {\r\n+            if (pkAutoincrement) {\r\n                 constraintBuilder.append(\" AUTOINCREMENT\");\r\n             }\r\n         }\r",
      "parent_sha": "3c6930db3d54ba9e6779b3b008252d6cc78b6efb"
    }
  },
  {
    "oid": "b35d4828ca363ec24baa56a9f296b1c1471ef41a",
    "message": "fix testConcurrentLockAndQueryDuringTxWAL",
    "date": "2016-06-29T18:57:36Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/b35d4828ca363ec24baa56a9f296b1c1471ef41a",
    "details": {
      "sha": "516adf603bbc1ce55aa8e5ad2d80811160fc2630",
      "filename": "DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/DaoSessionConcurrentWALTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/b35d4828ca363ec24baa56a9f296b1c1471ef41a/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2FDaoSessionConcurrentWALTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/b35d4828ca363ec24baa56a9f296b1c1471ef41a/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2FDaoSessionConcurrentWALTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2FDaoSessionConcurrentWALTest.java?ref=b35d4828ca363ec24baa56a9f296b1c1471ef41a",
      "patch": "@@ -22,8 +22,9 @@ protected Database createDatabase() {\n     public void testConcurrentLockAndQueryDuringTxWAL() throws InterruptedException {\n         if (Build.VERSION.SDK_INT >= 16) {\n             try {\n-                Method method = db.getClass().getMethod(\"isWriteAheadLoggingEnabled\");\n-                boolean walEnabled = (Boolean) method.invoke(db);\n+                Object rawDatabase = db.getRawDatabase();\n+                Method method = rawDatabase.getClass().getMethod(\"isWriteAheadLoggingEnabled\");\n+                boolean walEnabled = (Boolean) method.invoke(rawDatabase);\n                 if (!walEnabled) {\n                     throw new RuntimeException(\"WAL is disabled. This test will deadlock without WAL\");\n                 }",
      "parent_sha": "8d085fb35036ed4742687567759d22b5bc5ae698"
    }
  },
  {
    "oid": "359f721f3264ea4c402acfca4ccfd5553244f220",
    "message": "Add remaining RxRao tests.",
    "date": "2016-08-16T10:30:23Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/359f721f3264ea4c402acfca4ccfd5553244f220",
    "details": {
      "sha": "45c0a9802ca6e42ab890d677c87a8cc194835e6c",
      "filename": "tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java",
      "status": "modified",
      "additions": 191,
      "deletions": 12,
      "changes": 203,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/359f721f3264ea4c402acfca4ccfd5553244f220/tests%2FDaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/359f721f3264ea4c402acfca4ccfd5553244f220/tests%2FDaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/tests%2FDaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java?ref=359f721f3264ea4c402acfca4ccfd5553244f220",
      "patch": "@@ -26,8 +26,10 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import rx.Observable;\n import rx.observers.TestSubscriber;\n \n+@SuppressWarnings(\"unchecked\")\n public class RxDaoTest extends AbstractDaoTest<TestEntityDao, TestEntity, Long> {\n \n     private RxDao rxDao;\n@@ -94,6 +96,13 @@ public void testLoad_noResult() {\n         assertNull(testSubscriber.getOnNextEvents().get(0));\n     }\n \n+    public void testRefresh() {\n+        TestEntity entity = insertEntity(\"foo\");\n+        entity.setSimpleStringNotNull(\"temp\");\n+        RxTestHelper.awaitTestSubscriber(rxDao.refresh(entity));\n+        assertEquals(\"foo\", entity.getSimpleStringNotNull());\n+    }\n+\n     public void testInsert() {\n         TestEntity foo = RxTestHelper.createEntity(\"foo\");\n         TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insert(foo));\n@@ -139,26 +148,70 @@ public void testInsertInTxList() {\n         assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());\n     }\n \n-    public void testCount() {\n+    public void testInsertOrReplace() {\n         TestEntity foo = insertEntity(\"foo\");\n-        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.count());\n-        assertEquals(1, testSubscriber.getValueCount());\n-        Long count = testSubscriber.getOnNextEvents().get(0);\n-        assertEquals(1L, (long) count);\n+\n+        foo.setSimpleStringNotNull(\"bar\");\n+\n+        assertUpdatedEntity(foo, rxDao.insertOrReplace(foo));\n     }\n \n-    public void testDelete() {\n+    public void testInsertOrReplaceInTx() {\n         TestEntity foo = insertEntity(\"foo\");\n-        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.delete(foo));\n-        assertEquals(1, testSubscriber.getValueCount());\n-        assertNull(testSubscriber.getOnNextEvents().get(0));\n-        assertEquals(0, dao.count());\n+        TestEntity bar = insertEntity(\"bar\");\n+\n+        foo.setSimpleStringNotNull(\"foo2\");\n+\n+        assertUpdatedEntities(foo, bar, rxDao.insertOrReplaceInTx(foo, bar));\n+    }\n+\n+    public void testInsertOrReplaceInTxList() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+\n+        foo.setSimpleStringNotNull(\"foo2\");\n+\n+        List<TestEntity> list = new ArrayList<>();\n+        list.add(foo);\n+        list.add(bar);\n+\n+        assertUpdatedEntities(list, rxDao.insertOrReplaceInTx(list));\n+    }\n+\n+    public void testSave() {\n+        TestEntity foo = insertEntity(\"foo\");\n+\n+        foo.setSimpleStringNotNull(\"bar\");\n+\n+        assertUpdatedEntity(foo, rxDao.save(foo));\n+    }\n+\n+    public void testSaveInTx() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+\n+        foo.setSimpleStringNotNull(\"foo2\");\n+\n+        assertUpdatedEntities(foo, bar, rxDao.saveInTx(foo, bar));\n+    }\n+\n+    public void testSaveInTxList() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+\n+        foo.setSimpleStringNotNull(\"foo2\");\n+\n+        List<TestEntity> list = new ArrayList<>();\n+        list.add(foo);\n+        list.add(bar);\n+\n+        assertUpdatedEntities(list, rxDao.saveInTx(list));\n     }\n \n     public void testUpdate() {\n         TestEntity foo = insertEntity(\"foo\");\n         foo.setSimpleString(\"foofoo\");\n-        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.update(foo));\n+        TestSubscriber testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.update(foo));\n         assertEquals(1, testSubscriber.getValueCount());\n         assertSame(foo, testSubscriber.getOnNextEvents().get(0));\n         List<TestEntity> testEntities = dao.loadAll();\n@@ -167,8 +220,134 @@ public void testUpdate() {\n         assertEquals(\"foofoo\", testEntities.get(0).getSimpleString());\n     }\n \n-    // TODO test remaining methods\n+    public void testUpdateInTx() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+\n+        foo.setSimpleStringNotNull(\"foo2\");\n+        bar.setSimpleStringNotNull(\"bar2\");\n+\n+        assertUpdatedEntities(foo, bar, rxDao.updateInTx(foo, bar));\n+    }\n+\n+    public void testUpdateInTxList() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+\n+        foo.setSimpleStringNotNull(\"foo2\");\n+        bar.setSimpleStringNotNull(\"bar2\");\n+\n+        List<TestEntity> list = new ArrayList<>();\n+        list.add(foo);\n+        list.add(bar);\n+\n+        assertUpdatedEntities(list, rxDao.updateInTx(list));\n+    }\n+\n+    private void assertUpdatedEntity(TestEntity foo, Observable<TestEntity> observable) {\n+        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);\n+        assertEquals(1, testSubscriber.getValueCount());\n+        TestEntity bar = testSubscriber.getOnNextEvents().get(0);\n+        assertSame(foo, bar);\n+\n+        List<TestEntity> all = dao.loadAll();\n+        assertEquals(1, all.size());\n+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());\n+    }\n+\n+    private void assertUpdatedEntities(TestEntity foo, TestEntity bar, Observable<Object[]> observable) {\n+        TestSubscriber<Object[]> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);\n+        assertEquals(1, testSubscriber.getValueCount());\n+        Object[] array = testSubscriber.getOnNextEvents().get(0);\n+        assertSame(foo, array[0]);\n+        assertSame(bar, array[1]);\n+\n+        List<TestEntity> all = dao.loadAll();\n+        assertEquals(2, all.size());\n+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());\n+        assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());\n+    }\n+\n+    private void assertUpdatedEntities(List<TestEntity> entities, Observable<List<TestEntity>> observable) {\n+        TestEntity foo = entities.get(0);\n+        TestEntity bar = entities.get(1);\n+\n+        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);\n+        assertEquals(1, testSubscriber.getValueCount());\n+        List<TestEntity> result = testSubscriber.getOnNextEvents().get(0);\n+        assertSame(foo, result.get(0));\n+        assertSame(bar, result.get(1));\n+\n+        List<TestEntity> all = dao.loadAll();\n+        assertEquals(2, all.size());\n+        assertEquals(foo.getSimpleStringNotNull(), all.get(0).getSimpleStringNotNull());\n+        assertEquals(bar.getSimpleStringNotNull(), all.get(1).getSimpleStringNotNull());\n+    }\n+\n+    public void testDelete() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        assertDeleted(rxDao.delete(foo));\n+    }\n+\n+    public void testDeleteByKey() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        assertDeleted(rxDao.deleteByKey(foo.getId()));\n+    }\n+\n+    public void testDeleteAll() {\n+        insertEntity(\"foo\");\n+        insertEntity(\"bar\");\n+        assertDeleted(rxDao.deleteAll());\n+    }\n+\n+    public void testDeleteInTx() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+        assertDeleted(rxDao.deleteInTx(foo, bar));\n+    }\n+\n+    public void testDeleteInTxList() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+\n+        List<TestEntity> list = new ArrayList<>();\n+        list.add(foo);\n+        list.add(bar);\n+\n+        assertDeleted(rxDao.deleteInTx(list));\n+    }\n+\n+    public void testDeleteByKeyInTx() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+        assertDeleted(rxDao.deleteByKeyInTx(foo.getId(), bar.getId()));\n+    }\n+\n+    public void testDeleteByKeyInTxList() {\n+        TestEntity foo = insertEntity(\"foo\");\n+        TestEntity bar = insertEntity(\"bar\");\n+\n+        List<Long> list = new ArrayList<>();\n+        list.add(foo.getId());\n+        list.add(bar.getId());\n+\n+        assertDeleted(rxDao.deleteByKeyInTx(list));\n+    }\n+\n+    private void assertDeleted(Observable<Void> observable) {\n+        TestSubscriber testSubscriber = RxTestHelper.awaitTestSubscriber(observable);\n+        assertEquals(1, testSubscriber.getValueCount());\n+        assertNull(testSubscriber.getOnNextEvents().get(0));\n+        assertEquals(0, dao.count());\n+    }\n \n+    public void testCount() {\n+        insertEntity(\"foo\");\n+        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.count());\n+        assertEquals(1, testSubscriber.getValueCount());\n+        Long count = testSubscriber.getOnNextEvents().get(0);\n+        assertEquals(1L, (long) count);\n+    }\n \n     protected TestEntity insertEntity(String simpleStringNotNull) {\n         return RxTestHelper.insertEntity(dao, simpleStringNotNull);",
      "parent_sha": "ef4e097c8fb6941037169618aa2a1fdca6376af6"
    }
  },
  {
    "oid": "eb674d5fa691e2288b5fb08f6ddceb6dc23edfda",
    "message": "DaoGenerator: fix using converter class name without package name",
    "date": "2016-04-29T19:21:11Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/eb674d5fa691e2288b5fb08f6ddceb6dc23edfda",
    "details": {
      "sha": "383c390b2b8c576b01ea74784159c9db535fa132",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/Entity.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/eb674d5fa691e2288b5fb08f6ddceb6dc23edfda/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/eb674d5fa691e2288b5fb08f6ddceb6dc23edfda/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java?ref=eb674d5fa691e2288b5fb08f6ddceb6dc23edfda",
      "patch": "@@ -662,18 +662,18 @@ private void init3rdPassAdditionalImports() {\n             String customType = property.getCustomType();\n             if (customType != null) {\n                 String pack = DaoUtil.getPackageFromFullyQualified(customType);\n-                if (!pack.equals(javaPackage)) {\n+                if (pack != null && !pack.equals(javaPackage)) {\n                     additionalImportsEntity.add(customType);\n                 }\n-                if (!pack.equals(javaPackageDao)) {\n+                if (pack != null && !pack.equals(javaPackageDao)) {\n                     additionalImportsDao.add(customType);\n                 }\n             }\n \n             String converter = property.getConverter();\n             if (converter != null) {\n                 String pack = DaoUtil.getPackageFromFullyQualified(converter);\n-                if (!pack.equals(javaPackageDao)) {\n+                if (pack != null && !pack.equals(javaPackageDao)) {\n                     additionalImportsDao.add(converter);\n                 }\n             }",
      "parent_sha": "ddae6ce952c05918041d13bf6f6f19b36490a881"
    }
  },
  {
    "oid": "5aa643cec6a394c82cf7d8d31eacd9bc6aa89770",
    "message": "added testWhereWithSpecialNamesWithValues",
    "date": "2012-04-24T07:30:52Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/5aa643cec6a394c82cf7d8d31eacd9bc6aa89770",
    "details": {
      "sha": "8e2d956a139149c08644856a80e64d4be97102a0",
      "filename": "DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java",
      "status": "modified",
      "additions": 18,
      "deletions": 4,
      "changes": 22,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/5aa643cec6a394c82cf7d8d31eacd9bc6aa89770/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQuerySpecialNamesTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/5aa643cec6a394c82cf7d8d31eacd9bc6aa89770/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQuerySpecialNamesTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQuerySpecialNamesTest.java?ref=5aa643cec6a394c82cf7d8d31eacd9bc6aa89770",
      "patch": "@@ -23,8 +23,8 @@\n import de.greenrobot.daotest.SpecialNamesEntityDao;\r\n import de.greenrobot.daotest.SpecialNamesEntityDao.Properties;\r\n \r\n-public class QuerySpecialNamesTest extends  AbstractDaoTest<SpecialNamesEntityDao, SpecialNamesEntity, Long> {\r\n-    \r\n+public class QuerySpecialNamesTest extends AbstractDaoTest<SpecialNamesEntityDao, SpecialNamesEntity, Long> {\r\n+\r\n     public QuerySpecialNamesTest() {\r\n         super(SpecialNamesEntityDao.class);\r\n     }\r\n@@ -48,7 +48,21 @@ public void testWhereWithSpecialNames() {\n         queryBuilder.where(Properties.Sum.isNotNull());\r\n         queryBuilder.where(Properties.Order.isNotNull());\r\n         queryBuilder.list();\r\n-    } \r\n+    }\r\n+\r\n+    public void testWhereWithSpecialNamesWithValues() {\r\n+        QueryBuilder<SpecialNamesEntity> queryBuilder = dao.queryBuilder();\r\n+        queryBuilder.where(Properties.Avg.eq(\"test\"));\r\n+        queryBuilder.where(Properties.Count.notIn(\"test\", \"test2\"));\r\n+        queryBuilder.where(Properties.Distinct.ge(\"test\"));\r\n+        queryBuilder.where(Properties.Index.le(\"test\"));\r\n+        queryBuilder.where(Properties.Join.like(\"test\"));\r\n+        queryBuilder.where(Properties.On.notEq(\"test\"));\r\n+        queryBuilder.where(Properties.Select.in(\"test\", \"test2\"));\r\n+        queryBuilder.where(Properties.Sum.lt(1));\r\n+        queryBuilder.where(Properties.Order.gt(1));\r\n+        queryBuilder.list();\r\n+    }\r\n \r\n     public void testOrderWithSpecialNames() {\r\n         QueryBuilder<SpecialNamesEntity> queryBuilder = dao.queryBuilder();\r\n@@ -62,6 +76,6 @@ public void testOrderWithSpecialNames() {\n         queryBuilder.orderAsc(Properties.Sum);\r\n         queryBuilder.orderAsc(Properties.Order);\r\n         queryBuilder.list();\r\n-    } \r\n+    }\r\n \r\n }\r",
      "parent_sha": "a375028ca2b8ff48c7573432e96a27e0d1c809d6"
    }
  },
  {
    "oid": "007ced5c92bc3bfcf344fd864803fdb9feab3f3d",
    "message": "execute SQL script in TX",
    "date": "2012-01-14T21:03:09Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/007ced5c92bc3bfcf344fd864803fdb9feab3f3d",
    "details": {
      "sha": "857826b5c30c1ec17cde294b09bebf376a341a0c",
      "filename": "DaoCore/src/de/greenrobot/dao/DbUtils.java",
      "status": "modified",
      "additions": 36,
      "deletions": 5,
      "changes": 41,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/007ced5c92bc3bfcf344fd864803fdb9feab3f3d/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDbUtils.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/007ced5c92bc3bfcf344fd864803fdb9feab3f3d/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDbUtils.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDbUtils.java?ref=007ced5c92bc3bfcf344fd864803fdb9feab3f3d",
      "patch": "@@ -25,23 +25,54 @@\n import android.database.sqlite.SQLiteDatabase;\r\n \r\n /** Database utils, for example to execute SQL scripts */\r\n+// TODO add unit tests\r\n public class DbUtils {\r\n \r\n     public static void vacuum(SQLiteDatabase db) {\r\n         db.execSQL(\"VACUUM\");\r\n     }\r\n \r\n     /**\r\n-     * Executes the given SQL asset in the given database. The database file may contain multiple SQL statements.\r\n-     * Statements are split using a simple regular expression (something like \"semicolon before a line break\"), not by\r\n-     * analyzing the SQL syntax. This will work for many SQL files, but check yours.\r\n+     * Calls {@link #executeSqlScript(Context, SQLiteDatabase, String, boolean)} with transactional set to true.\r\n+     * \r\n+     * @return number of statements executed.\r\n      */\r\n-    public static void executeSqlScript(Context context, SQLiteDatabase db, String assetFilename) throws IOException {\r\n+    public static int executeSqlScript(Context context, SQLiteDatabase db, String assetFilename) throws IOException {\r\n+        return executeSqlScript(context, db, assetFilename, true);\r\n+    }\r\n+\r\n+    /**\r\n+     * Executes the given SQL asset in the given database (SQL file should be UTF-8). The database file may contain\r\n+     * multiple SQL statements. Statements are split using a simple regular expression (something like\r\n+     * \"semicolon before a line break\"), not by analyzing the SQL syntax. This will work for many SQL files, but check\r\n+     * yours.\r\n+     * \r\n+     * @return number of statements executed.\r\n+     */\r\n+    public static int executeSqlScript(Context context, SQLiteDatabase db, String assetFilename, boolean transactional)\r\n+            throws IOException {\r\n         byte[] bytes = readAsset(context, assetFilename);\r\n         String sql = new String(bytes, \"UTF-8\");\r\n         String[] lines = sql.split(\";(\\\\s)*[\\n\\r]\");\r\n-        int count = executeSqlStatements(db, lines);\r\n+        int count;\r\n+        if (transactional) {\r\n+            count = executeSqlStatementsInTx(db, lines);\r\n+        } else {\r\n+            count = executeSqlStatements(db, lines);\r\n+        }\r\n         DaoLog.i(\"Executed \" + count + \" statements from SQL script '\" + assetFilename + \"'\");\r\n+        return count;\r\n+    }\r\n+\r\n+    public static int executeSqlStatementsInTx(SQLiteDatabase db, String[] statements) {\r\n+        db.beginTransaction();\r\n+        try {\r\n+            int count = executeSqlStatements(db, statements);\r\n+            db.setTransactionSuccessful();\r\n+            return count;\r\n+        } finally {\r\n+            db.endTransaction();\r\n+        }\r\n     }\r\n \r\n     public static int executeSqlStatements(SQLiteDatabase db, String[] statements) {\r",
      "parent_sha": "b8ed87939f8a758acb5cfa40a8d6e370e6cb0f60"
    }
  },
  {
    "oid": "2993dc4a525dcb7b0935981eb0c59be97419420a",
    "message": "minor fix",
    "date": "2011-10-22T14:35:32Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/2993dc4a525dcb7b0935981eb0c59be97419420a",
    "details": {
      "sha": "245f3728cb8b66d1c3d349f59f3bc8bc01c7498b",
      "filename": "DaoBase/src/de/greenrobot/dao/QueryBuilder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/2993dc4a525dcb7b0935981eb0c59be97419420a/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FQueryBuilder.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/2993dc4a525dcb7b0935981eb0c59be97419420a/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FQueryBuilder.java?ref=2993dc4a525dcb7b0935981eb0c59be97419420a",
      "patch": "@@ -109,7 +109,7 @@ protected WhereCondition combineWhereConditions(String combineOp, WhereCondition\n \r\n     protected void addCondition(StringBuilder builder, List<Object> values, WhereCondition condition) {\r\n         checkCondition(condition);\r\n-        condition.appendTo(builder, \"T\");\r\n+        condition.appendTo(builder, tablePrefix);\r\n         condition.appendValuesTo(values);\r\n     }\r\n \r\n@@ -135,7 +135,7 @@ public QueryBuilder<T> orderAsc(Property... properties) {\n \r\n     protected StringBuilder append(StringBuilder builder, Property property) {\r\n         checkProperty(property);\r\n-        builder.append(\"T.\").append(property.columnName);\r\n+        builder.append(tablePrefix).append('.').append(property.columnName);\r\n         return builder;\r\n     }\r\n \r\n@@ -172,7 +172,7 @@ public Query<T> build() {\n                     builder.append(\" AND \");\r\n                 }\r\n                 WhereCondition condition = iter.next();\r\n-                condition.appendTo(builder, \"T\");\r\n+                condition.appendTo(builder, tablePrefix);\r\n                 condition.appendValuesTo(values);\r\n             }\r\n         }\r",
      "parent_sha": "1a323860b0b9ade52c1deea40add3ae2a25e93a6"
    }
  },
  {
    "oid": "9ce53cd5dfd0308a70002dc3935c854d5ca1a136",
    "message": "Query: formatting, javadoc",
    "date": "2015-06-26T19:55:36Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/9ce53cd5dfd0308a70002dc3935c854d5ca1a136",
    "details": {
      "sha": "276c64f20b7ea6c9bf7f41f2d377f19c8e57d4c3",
      "filename": "DaoCore/src/de/greenrobot/dao/query/Query.java",
      "status": "modified",
      "additions": 18,
      "deletions": 21,
      "changes": 39,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/9ce53cd5dfd0308a70002dc3935c854d5ca1a136/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FQuery.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/9ce53cd5dfd0308a70002dc3935c854d5ca1a136/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FQuery.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FQuery.java?ref=9ce53cd5dfd0308a70002dc3935c854d5ca1a136",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,11 +24,9 @@\n \n /**\n  * A repeatable query returning entities.\n- * \n+ *\n+ * @param <T> The enitity class the query will return results for.\n  * @author Markus\n- * \n- * @param <T>\n- *            The enitity class the query will return results for.\n  */\n // TODO support long, double and other types, not just Strings, for parameters\n // TODO Make parameters setable by Property (if unique in paramaters)\n@@ -40,7 +38,7 @@ private final static class QueryData<T2> extends AbstractQueryData<T2, Query<T2>\n         private final int offsetPosition;\n \n         QueryData(AbstractDao<T2, ?> dao, String sql, String[] initialValues, int limitPosition, int offsetPosition) {\n-            super(dao,sql,initialValues);\n+            super(dao, sql, initialValues);\n             this.limitPosition = limitPosition;\n             this.offsetPosition = offsetPosition;\n         }\n@@ -58,7 +56,7 @@ public static <T2> Query<T2> internalCreate(AbstractDao<T2, ?> dao, String sql,\n     }\n \n     static <T2> Query<T2> create(AbstractDao<T2, ?> dao, String sql, Object[] initialValues, int limitPosition,\n-            int offsetPosition) {\n+                                 int offsetPosition) {\n         QueryData<T2> queryData = new QueryData<T2>(dao, sql, toStringArray(initialValues), limitPosition,\n                 offsetPosition);\n         return queryData.forCurrentThread();\n@@ -69,7 +67,7 @@ static <T2> Query<T2> create(AbstractDao<T2, ?> dao, String sql, Object[] initia\n     private final QueryData<T> queryData;\n \n     private Query(QueryData<T> queryData, AbstractDao<T, ?> dao, String sql, String[] initialValues, int limitPosition,\n-            int offsetPosition) {\n+                  int offsetPosition) {\n         super(dao, sql, initialValues);\n         this.queryData = queryData;\n         this.limitPosition = limitPosition;\n@@ -81,7 +79,8 @@ public Query<T> forCurrentThread() {\n     }\n \n     /**\n-     * Sets the parameter (0 based) using the position in which it was added during building the query.\n+     * Sets the parameter (0 based) using the position in which it was added during building the query. Note: all\n+     * standard WHERE parameters come first. After that come the WHERE parameters of joins (if any).\n      */\n     public void setParameter(int index, Object parameter) {\n         if (index >= 0 && (index == limitPosition || index == offsetPosition)) {\n@@ -91,8 +90,8 @@ public void setParameter(int index, Object parameter) {\n     }\n \n     /**\n-     * Sets the limit of the maximum number of results returned by this Query. {@link QueryBuilder#limit(int)} must have\n-     * been called on the QueryBuilder that created this Query object.\n+     * Sets the limit of the maximum number of results returned by this Query. {@link QueryBuilder#limit(int)} must\n+     * have been called on the QueryBuilder that created this Query object.\n      */\n     public void setLimit(int limit) {\n         checkThread();\n@@ -103,8 +102,8 @@ public void setLimit(int limit) {\n     }\n \n     /**\n-     * Sets the offset for results returned by this Query. {@link QueryBuilder#offset(int)} must have been called on the\n-     * QueryBuilder that created this Query object.\n+     * Sets the offset for results returned by this Query. {@link QueryBuilder#offset(int)} must have been called on\n+     * the QueryBuilder that created this Query object.\n      */\n     public void setOffset(int offset) {\n         checkThread();\n@@ -133,8 +132,8 @@ public LazyList<T> listLazy() {\n     }\n \n     /**\n-     * Executes the query and returns the result as a list that lazy loads the entities on every access (uncached). Make\n-     * sure to close the list to close the underlying cursor.\n+     * Executes the query and returns the result as a list that lazy loads the entities on every access (uncached).\n+     * Make sure to close the list to close the underlying cursor.\n      */\n     public LazyList<T> listLazyUncached() {\n         checkThread();\n@@ -152,10 +151,9 @@ public CloseableListIterator<T> listIterator() {\n \n     /**\n      * Executes the query and returns the unique result or null.\n-     * \n-     * @throws DaoException\n-     *             if the result is not unique\n+     *\n      * @return Entity or null if no matching entity was found\n+     * @throws DaoException if the result is not unique\n      */\n     public T unique() {\n         checkThread();\n@@ -165,10 +163,9 @@ public T unique() {\n \n     /**\n      * Executes the query and returns the unique result (never null).\n-     * \n-     * @throws DaoException\n-     *             if the result is not unique or no entity was found\n+     *\n      * @return Entity\n+     * @throws DaoException if the result is not unique or no entity was found\n      */\n     public T uniqueOrThrow() {\n         T entity = unique();",
      "parent_sha": "bb0cf4cb808a0f95a64ab5962b63bf527b2ccc71"
    }
  },
  {
    "oid": "afd51a0bef9a9bb7768fa74566f6778d5ef5982e",
    "message": "added insertOrReplace to DaoSessionConcurrentTest",
    "date": "2013-02-08T21:35:14Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/afd51a0bef9a9bb7768fa74566f6778d5ef5982e",
    "details": {
      "sha": "23ecd42ba9e01435e593038093121dbc4ece4324",
      "filename": "DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/afd51a0bef9a9bb7768fa74566f6778d5ef5982e/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/afd51a0bef9a9bb7768fa74566f6778d5ef5982e/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java?ref=afd51a0bef9a9bb7768fa74566f6778d5ef5982e",
      "patch": "@@ -89,7 +89,13 @@ public void run() {\n                 dao.insertWithoutSettingPk(createEntity(null));\n             }\n         };\n-        initThreads(runnable1, runnable2, runnable3, runnable4);\n+        Runnable runnable5 = new Runnable() {\n+            @Override\n+            public void run() {\n+                dao.insertOrReplace(createEntity(null));\n+            }\n+        };\n+        initThreads(runnable1, runnable2, runnable3, runnable4, runnable5);\n         // Builds the statement so it is ready immediately in the thread\n         dao.insert(createEntity(null));\n         doTx(new Runnable() {\n@@ -99,7 +105,7 @@ public void run() {\n             }\n         });\n         latchThreadsDone.await();\n-        assertEquals(6, dao.count());\n+        assertEquals(7, dao.count());\n     }\n \n     public void testConcurrentUpdateDuringTx() throws InterruptedException {",
      "parent_sha": "2faa6e6bdadf4f5148f1d4a89dc5bf4e866ef1a6"
    }
  },
  {
    "oid": "04a304e7cab0647052af43086955a72d0bbdd85a",
    "message": "QueryBuilder: escape table name for JOIN as well.\n\nCloses https://github.com/greenrobot/greenDAO/issues/888",
    "date": "2018-08-21T10:33:05Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/04a304e7cab0647052af43086955a72d0bbdd85a",
    "details": {
      "sha": "a278100311ff4fd21abd66bed7ba29de75d7f478",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/04a304e7cab0647052af43086955a72d0bbdd85a/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/04a304e7cab0647052af43086955a72d0bbdd85a/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java?ref=04a304e7cab0647052af43086955a72d0bbdd85a",
      "patch": "@@ -392,7 +392,8 @@ private void checkLog(String sql) {\n     private void appendJoinsAndWheres(StringBuilder builder, String tablePrefixOrNull) {\n         values.clear();\n         for (Join<T, ?> join : joins) {\n-            builder.append(\" JOIN \").append(join.daoDestination.getTablename()).append(' ');\n+            builder.append(\" JOIN \");\n+            builder.append('\"').append(join.daoDestination.getTablename()).append('\"').append(' ');\n             builder.append(join.tablePrefix).append(\" ON \");\n             SqlUtils.appendProperty(builder, join.sourceTablePrefix, join.joinPropertySource).append('=');\n             SqlUtils.appendProperty(builder, join.tablePrefix, join.joinPropertyDestination);",
      "parent_sha": "72cad8c9d5bf25d6ed3bdad493cee0aee5af8a70"
    }
  },
  {
    "oid": "f4dd4eabf397b9cd66e26fbfb672aa0a305971cd",
    "message": "Lock must be locked when entering LazyList.loadEntity",
    "date": "2014-05-28T20:26:51Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/f4dd4eabf397b9cd66e26fbfb672aa0a305971cd",
    "details": {
      "sha": "6c76ae714b09e56ebc1bbfbec7f86366e2b9a2c2",
      "filename": "DaoCore/src/de/greenrobot/dao/query/LazyList.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/f4dd4eabf397b9cd66e26fbfb672aa0a305971cd/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FLazyList.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/f4dd4eabf397b9cd66e26fbfb672aa0a305971cd/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FLazyList.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FLazyList.java?ref=f4dd4eabf397b9cd66e26fbfb672aa0a305971cd",
      "patch": "@@ -250,12 +250,21 @@ public E get(int location) {\n             }\n             return entity;\n         } else {\n-            return loadEntity(location);\n+            lock.lock();\n+            try {\n+                return loadEntity(location);\n+            } finally {\n+                lock.unlock();\n+            }\n         }\n     }\n \n+    /** Lock must be locked when entering this method. */\n     protected E loadEntity(int location) {\n-        cursor.moveToPosition(location);\n+        boolean ok = cursor.moveToPosition(location);\n+        if(!ok) {\n+            throw new DaoException(\"Could not move to cursor location \" + location);\n+        }\n         E entity = daoAccess.loadCurrent(cursor, 0, true);\n         if (entity == null) {\n             throw new DaoException(\"Loading of entity failed (null) at position \" + location);",
      "parent_sha": "1a1fc8cd197109d161df5ae2e3c4be336501e642"
    }
  },
  {
    "oid": "1dc71106ac626a6b0564257e3308827f76401635",
    "message": "added run/callInTx",
    "date": "2011-10-22T14:34:27Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/1dc71106ac626a6b0564257e3308827f76401635",
    "details": {
      "sha": "9837e10c702db2ad480b80b85c6040cd57868a7f",
      "filename": "DaoBase/src/de/greenrobot/dao/AbstractDaoMaster.java",
      "status": "modified",
      "additions": 32,
      "deletions": 3,
      "changes": 35,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/1dc71106ac626a6b0564257e3308827f76401635/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDaoMaster.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/1dc71106ac626a6b0564257e3308827f76401635/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDaoMaster.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDaoMaster.java?ref=1dc71106ac626a6b0564257e3308827f76401635",
      "patch": "@@ -18,12 +18,13 @@\n \r\n import java.util.HashMap;\r\n import java.util.Map;\r\n+import java.util.concurrent.Callable;\r\n \r\n import android.database.sqlite.SQLiteDatabase;\r\n \r\n /**\r\n  * Incomplete. Check back later.\r\n- *  \r\n+ * \r\n  * @author Markus\r\n  */\r\n public class AbstractDaoMaster {\r\n@@ -36,7 +37,7 @@ public AbstractDaoMaster(SQLiteDatabase db, int schemaVersion) {\n         this.schemaVersion = schemaVersion;\r\n         entityToDao = new HashMap<Class<?>, AbstractDao<?, ?>>();\r\n     }\r\n-    \r\n+\r\n     public int getSchemaVersion() {\r\n         return schemaVersion;\r\n     }\r\n@@ -60,9 +61,37 @@ public <T, K> T load(Class<T> entityClass, K key) {\n         }\r\n         return dao;\r\n     }\r\n-    \r\n+\r\n     protected void registerDao(Class<?> entityClass, AbstractDao<?, ?> dao) {\r\n         entityToDao.put(entityClass, dao);\r\n     }\r\n \r\n+    /**\r\n+     * Run the given Runnable inside a database transaction. If you except a result, consider callInTx.\r\n+     */\r\n+    public void runInTx(Runnable runnable) {\r\n+        db.beginTransaction();\r\n+        try {\r\n+            runnable.run();\r\n+            db.setTransactionSuccessful();\r\n+        } finally {\r\n+            db.endTransaction();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Calls the given Callable inside a database transaction and returns the result of the Callable. If you don't\r\n+     * except a result, consider runInTx.\r\n+     */\r\n+    public <V> V callInTx(Callable<V> callable) throws Exception {\r\n+        db.beginTransaction();\r\n+        try {\r\n+            V result = callable.call();\r\n+            db.setTransactionSuccessful();\r\n+            return result;\r\n+        } finally {\r\n+            db.endTransaction();\r\n+        }\r\n+    }\r\n+\r\n }\r",
      "parent_sha": "a9ea24bb4844d2689bf4aff35f3af05af5d44883"
    }
  },
  {
    "oid": "925b005f05476b4c774feb9a9b7f1deb2040c165",
    "message": "added test for order with upper/lower case and umlauts",
    "date": "2012-02-10T19:35:32Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/925b005f05476b4c774feb9a9b7f1deb2040c165",
    "details": {
      "sha": "e1676899973dd715f65eb81f8a95d2d127a9c546",
      "filename": "DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java",
      "status": "modified",
      "additions": 48,
      "deletions": 5,
      "changes": 53,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/925b005f05476b4c774feb9a9b7f1deb2040c165/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryBuilderOrderTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/925b005f05476b4c774feb9a9b7f1deb2040c165/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryBuilderOrderTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryBuilderOrderTest.java?ref=925b005f05476b4c774feb9a9b7f1deb2040c165",
      "patch": "@@ -18,6 +18,7 @@\n package de.greenrobot.daotest.query;\r\n \r\n import java.util.ArrayList;\r\n+import java.util.Collections;\r\n import java.util.List;\r\n \r\n import de.greenrobot.dao.QueryBuilder;\r\n@@ -33,27 +34,69 @@ protected void setUp() {\n         QueryBuilder.LOG_VALUES = true;\r\n     }\r\n \r\n-\r\n     public void testOrderAsc() {\r\n         ArrayList<TestEntity> inserted = insert(2);\r\n         TestEntity entity = inserted.get(0);\r\n         List<TestEntity> result = dao.queryBuilder().orderAsc(Properties.SimpleInteger).list();\r\n         assertEquals(2, result.size());\r\n-        assertEquals(entity.getId(), result.get(0). getId());\r\n+        assertEquals(entity.getId(), result.get(0).getId());\r\n         result = dao.queryBuilder().orderAsc(Properties.SimpleInteger, Properties.SimpleString).list();\r\n         assertEquals(2, result.size());\r\n-        assertEquals(entity.getId(), result.get(0). getId());\r\n+        assertEquals(entity.getId(), result.get(0).getId());\r\n     }\r\n \r\n     public void testOrderDesc() {\r\n         ArrayList<TestEntity> inserted = insert(2);\r\n         TestEntity entity = inserted.get(1);\r\n         List<TestEntity> result = dao.queryBuilder().orderDesc(Properties.SimpleInteger).list();\r\n         assertEquals(2, result.size());\r\n-        assertEquals(entity.getId(), result.get(0). getId());\r\n+        assertEquals(entity.getId(), result.get(0).getId());\r\n         result = dao.queryBuilder().orderDesc(Properties.SimpleInteger, Properties.SimpleString).list();\r\n         assertEquals(2, result.size());\r\n-        assertEquals(entity.getId(), result.get(0). getId());\r\n+        assertEquals(entity.getId(), result.get(0).getId());\r\n+    }\r\n+\r\n+    public void testOrderUpperLowercase() {\r\n+        List<TestEntity> list = new ArrayList<TestEntity>();\r\n+        TestEntity entityAA = addEntity(list, \"aa\");\r\n+        TestEntity entityAB = addEntity(list, \"Ab\");\r\n+        TestEntity entityAC = addEntity(list, \"ac\");\r\n+        TestEntity entityZA = addEntity(list, \"ZA\");\r\n+        TestEntity entityZB = addEntity(list, \"zB\");\r\n+        TestEntity entityZC = addEntity(list, \"ZC\");\r\n+        Collections.shuffle(list);\r\n+        dao.insertInTx(list);\r\n+\r\n+        List<TestEntity> result = dao.queryBuilder().orderAsc(Properties.SimpleString).list();\r\n+        assertEquals(list.size(), result.size());\r\n+        assertEquals(entityAA.getId(), result.get(0).getId());\r\n+        assertEquals(entityAB.getId(), result.get(1).getId());\r\n+        assertEquals(entityAC.getId(), result.get(2).getId());\r\n+        assertEquals(entityZA.getId(), result.get(3).getId());\r\n+        assertEquals(entityZB.getId(), result.get(4).getId());\r\n+        assertEquals(entityZC.getId(), result.get(5).getId());\r\n+    }\r\n+\r\n+    public void testOrderUmlauts() {\r\n+        List<TestEntity> list = new ArrayList<TestEntity>();\r\n+        TestEntity entityV = addEntity(list, \"V\");\r\n+        TestEntity entityB = addEntity(list, \"B\");\r\n+        TestEntity entityUE = addEntity(list, \"\ufffd\");\r\n+        TestEntity entityAE = addEntity(list, \"\ufffd\");\r\n+        dao.insertInTx(list);\r\n+\r\n+        List<TestEntity> result = dao.queryBuilder().orderAsc(Properties.SimpleString).list();\r\n+        assertEquals(list.size(), result.size());\r\n+        assertEquals(entityAE.getId(), result.get(0).getId());\r\n+        assertEquals(entityB.getId(), result.get(1).getId());\r\n+        assertEquals(entityUE.getId(), result.get(2).getId());\r\n+        assertEquals(entityV.getId(), result.get(3).getId());\r\n+    }\r\n+\r\n+    private TestEntity addEntity(List<TestEntity> list, String simpleString) {\r\n+        TestEntity entityAB = createEntity(42, simpleString);\r\n+        list.add(entityAB);\r\n+        return entityAB;\r\n     }\r\n \r\n }\r",
      "parent_sha": "e89b433cefeded7809a9ee6af96dffd90dbab6e8"
    }
  },
  {
    "oid": "c85513d7abea8005a921350c8135e36ac21793dc",
    "message": "Allow collation for SQLCipher databases.\n\n- Closes https://github.com/greenrobot/greenDAO/issues/727.\n- SQLCipher just does not support collation that requires Android libraries\n  (like 'COLLATE LOCALIZED'). Everything else standard SQLite is supported,\n  so allow it.",
    "date": "2017-07-17T05:56:21Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/c85513d7abea8005a921350c8135e36ac21793dc",
    "details": {
      "sha": "99d48eb65631233f1f7817d0f3e20a80e423239e",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/c85513d7abea8005a921350c8135e36ac21793dc/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/c85513d7abea8005a921350c8135e36ac21793dc/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java?ref=c85513d7abea8005a921350c8135e36ac21793dc",
      "patch": "@@ -122,11 +122,8 @@ public QueryBuilder<T> preferLocalizedStringOrder() {\n      * @see #preferLocalizedStringOrder\n      */\n     public QueryBuilder<T> stringOrderCollation(String stringOrderCollation) {\n-        // SQLCipher 3.5.0+ does not understand \"COLLATE LOCALIZED\"\n-        if (dao.getDatabase().getRawDatabase() instanceof SQLiteDatabase) {\n-            this.stringOrderCollation = stringOrderCollation == null || stringOrderCollation.startsWith(\" \") ?\n-                    stringOrderCollation : \" \" + stringOrderCollation;\n-        }\n+        this.stringOrderCollation = stringOrderCollation == null || stringOrderCollation.startsWith(\" \") ?\n+                stringOrderCollation : \" \" + stringOrderCollation;\n         return this;\n     }\n ",
      "parent_sha": "59c66587bbf996bc2baddd0e7dee4dee87931a84"
    }
  },
  {
    "oid": "e8544942361bc846d93bae7e8a421dc8de143bfa",
    "message": "clean up",
    "date": "2016-07-28T12:35:46Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/e8544942361bc846d93bae7e8a421dc8de143bfa",
    "details": {
      "sha": "c93d40aac7751c3240b3cbc73c89f6c864e62696",
      "filename": "DaoGenerator/src/org/greenrobot/greendao/generator/Entity.java",
      "status": "modified",
      "additions": 36,
      "deletions": 34,
      "changes": 70,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/e8544942361bc846d93bae7e8a421dc8de143bfa/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FEntity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/e8544942361bc846d93bae7e8a421dc8de143bfa/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FEntity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FEntity.java?ref=e8544942361bc846d93bae7e8a421dc8de143bfa",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)\n  *\n  * This file is part of greenDAO Generator.\n  * \n@@ -17,6 +17,8 @@\n  */\n package org.greenrobot.greendao.generator;\n \n+import org.greenrobot.greendao.generator.Property.PropertyBuilder;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -36,6 +38,7 @@\n  * @see <a href=\"http://greendao-orm.com/documentation/modelling-entities/\">Modelling Entities (Documentation page)</a>\n  * @see <a href=\"http://greendao-orm.com/documentation/relations/\">Relations (Documentation page)</a>\n  */\n+@SuppressWarnings(\"unused\")\n public class Entity {\n     private final Schema schema;\n     private final String className;\n@@ -78,74 +81,74 @@ public class Entity {\n     Entity(Schema schema, String className) {\n         this.schema = schema;\n         this.className = className;\n-        properties = new ArrayList<Property>();\n-        propertiesPk = new ArrayList<Property>();\n-        propertiesNonPk = new ArrayList<Property>();\n-        propertyNames = new HashSet<String>();\n-        indexes = new ArrayList<Index>();\n-        multiIndexes = new ArrayList<Index>();\n-        toOneRelations = new ArrayList<ToOne>();\n-        toManyRelations = new ArrayList<ToManyBase>();\n-        incomingToManyRelations = new ArrayList<ToManyBase>();\n-        additionalImportsEntity = new TreeSet<String>();\n-        additionalImportsDao = new TreeSet<String>();\n-        interfacesToImplement = new ArrayList<String>();\n-        contentProviders = new ArrayList<ContentProvider>();\n+        properties = new ArrayList<>();\n+        propertiesPk = new ArrayList<>();\n+        propertiesNonPk = new ArrayList<>();\n+        propertyNames = new HashSet<>();\n+        indexes = new ArrayList<>();\n+        multiIndexes = new ArrayList<>();\n+        toOneRelations = new ArrayList<>();\n+        toManyRelations = new ArrayList<>();\n+        incomingToManyRelations = new ArrayList<>();\n+        additionalImportsEntity = new TreeSet<>();\n+        additionalImportsDao = new TreeSet<>();\n+        interfacesToImplement = new ArrayList<>();\n+        contentProviders = new ArrayList<>();\n         constructors = true;\n     }\n \n-    public Property.PropertyBuilder addBooleanProperty(String propertyName) {\n+    public PropertyBuilder addBooleanProperty(String propertyName) {\n         return addProperty(PropertyType.Boolean, propertyName);\n     }\n \n-    public Property.PropertyBuilder addByteProperty(String propertyName) {\n+    public PropertyBuilder addByteProperty(String propertyName) {\n         return addProperty(PropertyType.Byte, propertyName);\n     }\n \n-    public Property.PropertyBuilder addShortProperty(String propertyName) {\n+    public PropertyBuilder addShortProperty(String propertyName) {\n         return addProperty(PropertyType.Short, propertyName);\n     }\n \n-    public Property.PropertyBuilder addIntProperty(String propertyName) {\n+    public PropertyBuilder addIntProperty(String propertyName) {\n         return addProperty(PropertyType.Int, propertyName);\n     }\n \n-    public Property.PropertyBuilder addLongProperty(String propertyName) {\n+    public PropertyBuilder addLongProperty(String propertyName) {\n         return addProperty(PropertyType.Long, propertyName);\n     }\n \n-    public Property.PropertyBuilder addFloatProperty(String propertyName) {\n+    public PropertyBuilder addFloatProperty(String propertyName) {\n         return addProperty(PropertyType.Float, propertyName);\n     }\n \n-    public Property.PropertyBuilder addDoubleProperty(String propertyName) {\n+    public PropertyBuilder addDoubleProperty(String propertyName) {\n         return addProperty(PropertyType.Double, propertyName);\n     }\n \n-    public Property.PropertyBuilder addByteArrayProperty(String propertyName) {\n+    public PropertyBuilder addByteArrayProperty(String propertyName) {\n         return addProperty(PropertyType.ByteArray, propertyName);\n     }\n \n-    public Property.PropertyBuilder addStringProperty(String propertyName) {\n+    public PropertyBuilder addStringProperty(String propertyName) {\n         return addProperty(PropertyType.String, propertyName);\n     }\n \n-    public Property.PropertyBuilder addDateProperty(String propertyName) {\n+    public PropertyBuilder addDateProperty(String propertyName) {\n         return addProperty(PropertyType.Date, propertyName);\n     }\n \n-    public Property.PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {\n+    public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {\n         if (!propertyNames.add(propertyName)) {\n             throw new RuntimeException(\"Property already defined: \" + propertyName);\n         }\n-        Property.PropertyBuilder builder = new Property.PropertyBuilder(schema, this, propertyType, propertyName);\n+        PropertyBuilder builder = new PropertyBuilder(schema, this, propertyType, propertyName);\n         properties.add(builder.getProperty());\n         return builder;\n     }\n \n     /** Adds a standard _id column required by standard Android classes, e.g. list adapters. */\n-    public Property.PropertyBuilder addIdProperty() {\n-        Property.PropertyBuilder builder = addLongProperty(\"id\");\n+    public PropertyBuilder addIdProperty() {\n+        PropertyBuilder builder = addLongProperty(\"id\");\n         builder.columnName(\"_id\").primaryKey();\n         return builder;\n     }\n@@ -194,7 +197,6 @@ public ToManyWithJoinEntity addToMany(Entity target, Entity joinEntity, Property\n         return toMany;\n     }\n \n-\n     /**\n      * Adds a to-one relationship to the given target entity using the given given foreign key property (which belongs\n      * to this entity).\n@@ -223,7 +225,7 @@ public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumn\n \n     public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumnName, boolean notNull,\n                                          boolean unique) {\n-        Property.PropertyBuilder propertyBuilder = new Property.PropertyBuilder(schema, this, null, name);\n+        PropertyBuilder propertyBuilder = new PropertyBuilder(schema, this, null, name);\n         if (notNull) {\n             propertyBuilder.notNull();\n         }\n@@ -244,7 +246,7 @@ protected void addIncomingToMany(ToMany toMany) {\n     }\n \n     public ContentProvider addContentProvider() {\n-        List<Entity> entities = new ArrayList<Entity>();\n+        List<Entity> entities = new ArrayList<>();\n         entities.add(this);\n         ContentProvider contentProvider = new ContentProvider(schema, entities);\n         contentProviders.add(contentProvider);\n@@ -515,7 +517,7 @@ void init2ndPass() {\n             pkType = \"Void\";\n         }\n \n-        propertiesColumns = new ArrayList<Property>(properties);\n+        propertiesColumns = new ArrayList<>(properties);\n         for (ToOne toOne : toOneRelations) {\n             toOne.init2ndPass();\n             Property[] fkProperties = toOne.getFkProperties();\n@@ -612,15 +614,15 @@ void init3rdPass() {\n     }\n \n     private void init3rdPassRelations() {\n-        Set<String> toOneNames = new HashSet<String>();\n+        Set<String> toOneNames = new HashSet<>();\n         for (ToOne toOne : toOneRelations) {\n             toOne.init3ndPass();\n             if (!toOneNames.add(toOne.getName().toLowerCase())) {\n                 throw new RuntimeException(\"Duplicate name for \" + toOne);\n             }\n         }\n \n-        Set<String> toManyNames = new HashSet<String>();\n+        Set<String> toManyNames = new HashSet<>();\n         for (ToManyBase toMany : toManyRelations) {\n             toMany.init3rdPass();\n             if (toMany instanceof ToMany) {",
      "parent_sha": "770b678731fc5539a655ed50d4cc2a6e92fba7f7"
    }
  },
  {
    "oid": "1f803e6d5f0cf84ecbd021886eec69aa11e4e603",
    "message": "added some value tests for CustomTypeEntityTest",
    "date": "2015-07-05T18:13:12Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/1f803e6d5f0cf84ecbd021886eec69aa11e4e603",
    "details": {
      "sha": "933035fc93d7d331bc7663dcdd567b9554b63d08",
      "filename": "DaoTest/src/de/greenrobot/daotest/entity/CustomTypeEntityTest.java",
      "status": "modified",
      "additions": 26,
      "deletions": 1,
      "changes": 27,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/1f803e6d5f0cf84ecbd021886eec69aa11e4e603/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FCustomTypeEntityTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/1f803e6d5f0cf84ecbd021886eec69aa11e4e603/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FCustomTypeEntityTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FCustomTypeEntityTest.java?ref=1f803e6d5f0cf84ecbd021886eec69aa11e4e603",
      "patch": "@@ -1,9 +1,11 @@\n package de.greenrobot.daotest.entity;\n \n import de.greenrobot.dao.test.AbstractDaoTestLongPk;\n-\n import de.greenrobot.daotest.CustomTypeEntity;\n import de.greenrobot.daotest.CustomTypeEntityDao;\n+import de.greenrobot.daotest.customtype.MyTimestamp;\n+\n+import java.util.List;\n \n public class CustomTypeEntityTest extends AbstractDaoTestLongPk<CustomTypeEntityDao, CustomTypeEntity> {\n \n@@ -15,7 +17,30 @@ public CustomTypeEntityTest() {\n     protected CustomTypeEntity createEntity(Long key) {\n         CustomTypeEntity entity = new CustomTypeEntity();\n         entity.setId(key);\n+        MyTimestamp myCustomTimestamp = new MyTimestamp();\n+        myCustomTimestamp.timestamp = System.currentTimeMillis();\n+        entity.setMyCustomTimestamp(myCustomTimestamp);\n         return entity;\n     }\n \n+    public void testCustomTypeValue() {\n+        CustomTypeEntity entity = createEntityWithRandomPk();\n+        long timestamp = entity.getMyCustomTimestamp().timestamp;\n+        dao.insert(entity);\n+\n+        List<CustomTypeEntity> all = dao.loadAll();\n+        assertEquals(1, all.size());\n+        assertEquals(timestamp, all.get(0).getMyCustomTimestamp().timestamp);\n+    }\n+\n+    public void testCustomTypeValueNull() {\n+        CustomTypeEntity entity = createEntityWithRandomPk();\n+        entity.setMyCustomTimestamp(null);\n+        dao.insert(entity);\n+\n+        List<CustomTypeEntity> all = dao.loadAll();\n+        assertEquals(1, all.size());\n+        assertNull(all.get(0).getMyCustomTimestamp());\n+    }\n+\n }",
      "parent_sha": "8d2a799e8f479bcb7b60a0e1e3b987bcdf929108"
    }
  },
  {
    "oid": "e130a88d45c2244eeb8b5630c8b97f90e72b253e",
    "message": "using SQLiteStatement when possible",
    "date": "2016-06-29T19:44:46Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/e130a88d45c2244eeb8b5630c8b97f90e72b253e",
    "details": {
      "sha": "8c8cb403e2d50954cccc49e7ba1396ecba648f36",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/AbstractDao.java",
      "status": "modified",
      "additions": 76,
      "deletions": 44,
      "changes": 120,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/e130a88d45c2244eeb8b5630c8b97f90e72b253e/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/e130a88d45c2244eeb8b5630c8b97f90e72b253e/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2FAbstractDao.java?ref=e130a88d45c2244eeb8b5630c8b97f90e72b253e",
      "patch": "@@ -19,6 +19,7 @@\n import android.database.CrossProcessCursor;\n import android.database.Cursor;\n import android.database.CursorWindow;\n+import android.database.sqlite.SQLiteDatabase;\n import android.database.sqlite.SQLiteStatement;\n \n import org.greenrobot.greendao.database.Database;\n@@ -55,8 +56,9 @@\n  * 3.) identityScope\n  */\n public abstract class AbstractDao<T, K> {\n-    protected final Database db;\n     protected final DaoConfig config;\n+    protected final Database db;\n+    protected final boolean isStandardSQLite;\n     protected IdentityScope<K, T> identityScope;\n     protected IdentityScopeLong<T> identityScopeLong;\n     protected TableStatements statements;\n@@ -73,6 +75,7 @@ public AbstractDao(DaoConfig config, AbstractDaoSession daoSession) {\n         this.config = config;\n         this.session = daoSession;\n         db = config.db;\n+        isStandardSQLite = db.getRawDatabase() instanceof SQLiteDatabase;\n         identityScope = (IdentityScope<K, T>) config.getIdentityScope();\n         if (identityScope instanceof IdentityScopeLong) {\n             identityScopeLong = (IdentityScopeLong<T>) identityScope;\n@@ -264,13 +267,26 @@ private void executeInsertInTx(DatabaseStatement stmt, Iterable<T> entities, boo\n                     identityScope.lock();\n                 }\n                 try {\n-                    for (T entity : entities) {\n-                        bindValues(stmt, entity);\n-                        if (setPrimaryKey) {\n-                            long rowId = stmt.executeInsert();\n-                            updateKeyAfterInsertAndAttach(entity, rowId, false);\n-                        } else {\n-                            stmt.execute();\n+                    if (isStandardSQLite) {\n+                        SQLiteStatement rawStmt = (SQLiteStatement) stmt.getRawStatement();\n+                        for (T entity : entities) {\n+                            bindValues(rawStmt, entity);\n+                            if (setPrimaryKey) {\n+                                long rowId = rawStmt.executeInsert();\n+                                updateKeyAfterInsertAndAttach(entity, rowId, false);\n+                            } else {\n+                                rawStmt.execute();\n+                            }\n+                        }\n+                    } else {\n+                        for (T entity : entities) {\n+                            bindValues(stmt, entity);\n+                            if (setPrimaryKey) {\n+                                long rowId = stmt.executeInsert();\n+                                updateKeyAfterInsertAndAttach(entity, rowId, false);\n+                            } else {\n+                                stmt.execute();\n+                            }\n                         }\n                     }\n                 } finally {\n@@ -291,7 +307,7 @@ private void executeInsertInTx(DatabaseStatement stmt, Iterable<T> entities, boo\n      * @return row ID of newly inserted entity\n      */\n     public long insert(T entity) {\n-        return executeInsert(entity, statements.getInsertStatement());\n+        return executeInsert(entity, statements.getInsertStatement(), true);\n     }\n \n     /**\n@@ -303,27 +319,7 @@ public long insert(T entity) {\n      * @return row ID of newly inserted entity\n      */\n     public long insertWithoutSettingPk(T entity) {\n-        DatabaseStatement stmt = statements.getInsertStatement();\n-        long rowId;\n-        if (db.isDbLockedByCurrentThread()) {\n-            synchronized (stmt) {\n-                bindValues(stmt, entity);\n-                rowId = stmt.executeInsert();\n-            }\n-        } else {\n-            // Do TX to acquire a connection before locking the stmt to avoid deadlocks\n-            db.beginTransaction();\n-            try {\n-                synchronized (stmt) {\n-                    bindValues(stmt, entity);\n-                    rowId = stmt.executeInsert();\n-                }\n-                db.setTransactionSuccessful();\n-            } finally {\n-                db.endTransaction();\n-            }\n-        }\n-        return rowId;\n+        return executeInsert(entity, statements.getInsertOrReplaceStatement(), false);\n     }\n \n     /**\n@@ -332,33 +328,42 @@ public long insertWithoutSettingPk(T entity) {\n      * @return row ID of newly inserted entity\n      */\n     public long insertOrReplace(T entity) {\n-        return executeInsert(entity, statements.getInsertOrReplaceStatement());\n+        return executeInsert(entity, statements.getInsertOrReplaceStatement(), true);\n     }\n \n-    private long executeInsert(T entity, DatabaseStatement stmt) {\n+    private long executeInsert(T entity, DatabaseStatement stmt, boolean setKeyAndAttach) {\n         long rowId;\n         if (db.isDbLockedByCurrentThread()) {\n-            synchronized (stmt) {\n-                bindValues(stmt, entity);\n-                rowId = stmt.executeInsert();\n-            }\n+            rowId = insertInsideTx(entity, stmt);\n         } else {\n             // Do TX to acquire a connection before locking the stmt to avoid deadlocks\n             db.beginTransaction();\n             try {\n-                synchronized (stmt) {\n-                    bindValues(stmt, entity);\n-                    rowId = stmt.executeInsert();\n-                }\n+                rowId = insertInsideTx(entity, stmt);\n                 db.setTransactionSuccessful();\n             } finally {\n                 db.endTransaction();\n             }\n         }\n-        updateKeyAfterInsertAndAttach(entity, rowId, true);\n+        if (setKeyAndAttach) {\n+            updateKeyAfterInsertAndAttach(entity, rowId, true);\n+        }\n         return rowId;\n     }\n \n+    private long insertInsideTx(T entity, DatabaseStatement stmt) {\n+        synchronized (stmt) {\n+            if (isStandardSQLite) {\n+                SQLiteStatement rawStmt = (SQLiteStatement) stmt.getRawStatement();\n+                bindValues(rawStmt, entity);\n+                return rawStmt.executeInsert();\n+            } else {\n+                bindValues(stmt, entity);\n+                return stmt.executeInsert();\n+            }\n+        }\n+    }\n+\n     protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock) {\n         if (rowId != -1) {\n             K key = updateKeyAfterInsert(entity, rowId);\n@@ -690,7 +695,11 @@ public void update(T entity) {\n         DatabaseStatement stmt = statements.getUpdateStatement();\n         if (db.isDbLockedByCurrentThread()) {\n             synchronized (stmt) {\n-                updateInsideSynchronized(entity, stmt, true);\n+                if (isStandardSQLite) {\n+                    updateInsideSynchronized(entity, (SQLiteStatement) stmt.getRawStatement(), true);\n+                } else {\n+                    updateInsideSynchronized(entity, stmt, true);\n+                }\n             }\n         } else {\n             // Do TX to acquire a connection before locking the stmt to avoid deadlocks\n@@ -726,6 +735,22 @@ protected void updateInsideSynchronized(T entity, DatabaseStatement stmt, boolea\n         attachEntity(key, entity, lock);\n     }\n \n+    protected void updateInsideSynchronized(T entity, SQLiteStatement stmt, boolean lock) {\n+        // To do? Check if it's worth not to bind PKs here (performance).\n+        bindValues(stmt, entity);\n+        int index = config.allColumns.length + 1;\n+        K key = getKey(entity);\n+        if (key instanceof Long) {\n+            stmt.bindLong(index, (Long) key);\n+        } else if (key == null) {\n+            throw new DaoException(\"Cannot update entity without key - was it inserted before?\");\n+        } else {\n+            stmt.bindString(index, key.toString());\n+        }\n+        stmt.execute();\n+        attachEntity(key, entity, lock);\n+    }\n+\n     /**\n      * Attaches the entity to the identity scope. Calls attachEntity(T entity).\n      *\n@@ -767,8 +792,15 @@ public void updateInTx(Iterable<T> entities) {\n                     identityScope.lock();\n                 }\n                 try {\n-                    for (T entity : entities) {\n-                        updateInsideSynchronized(entity, stmt, false);\n+                    if (isStandardSQLite) {\n+                        SQLiteStatement rawStmt = (SQLiteStatement) stmt.getRawStatement();\n+                        for (T entity : entities) {\n+                            updateInsideSynchronized(entity, rawStmt, false);\n+                        }\n+                    } else {\n+                        for (T entity : entities) {\n+                            updateInsideSynchronized(entity, stmt, false);\n+                        }\n                     }\n                 } finally {\n                     if (identityScope != null) {",
      "parent_sha": "50ee9c8e18c1ff55a5b3eec650bbfb440325b10f"
    }
  },
  {
    "oid": "4831f5583ac1bdc9413628aa5af8f6a792d2c369",
    "message": "added enqueueEntityOperation helper methods",
    "date": "2012-08-13T16:42:08Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/4831f5583ac1bdc9413628aa5af8f6a792d2c369",
    "details": {
      "sha": "7e2411775fed837c48200fcb81cba6ea91a9298c",
      "filename": "DaoCore/src/de/greenrobot/dao/AsyncSession.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/4831f5583ac1bdc9413628aa5af8f6a792d2c369/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAsyncSession.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/4831f5583ac1bdc9413628aa5af8f6a792d2c369/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAsyncSession.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAsyncSession.java?ref=4831f5583ac1bdc9413628aa5af8f6a792d2c369",
      "patch": "@@ -57,10 +57,7 @@ public AsyncOperation insert(Object entity) {\n \r\n     /** Asynchronous version of {@link AbstractDao#insert(Object)}. */\r\n     public AsyncOperation insert(Object entity, int flags) {\r\n-        AbstractDao<?, ?> dao = session.getDao(entity.getClass());\r\n-        AsyncOperation operation = new AsyncOperation(OperationType.Insert, dao, entity, flags);\r\n-        executor.enqueue(operation);\r\n-        return operation;\r\n+        return enqueueEntityOperation(OperationType.Insert, entity, flags);\r\n     }\r\n \r\n     /** Asynchronous version of {@link AbstractDao#insertInTx(Iterable)}. */\r\n@@ -70,8 +67,16 @@ public <E> AsyncOperation insertInTx(Class<E> entityClass, Iterable<E> entities)\n \r\n     /** Asynchronous version of {@link AbstractDao#insertInTx(Iterable)}. */\r\n     public <E> AsyncOperation insertInTx(Class<E> entityClass, Iterable<E> entities, int flags) {\r\n+        return enqueEntityOperation(OperationType.InsertInTxIterable, entityClass, entities, flags);\r\n+    }\r\n+\r\n+    private AsyncOperation enqueueEntityOperation(OperationType type, Object entity, int flags) {\r\n+        return enqueEntityOperation(type, entity.getClass(), entity, flags);\r\n+    }\r\n+\r\n+    private <E> AsyncOperation enqueEntityOperation(OperationType type, Class<E> entityClass, Object param, int flags) {\r\n         AbstractDao<?, ?> dao = session.getDao(entityClass);\r\n-        AsyncOperation operation = new AsyncOperation(OperationType.InsertInTxIterable, dao, entities, flags);\r\n+        AsyncOperation operation = new AsyncOperation(type, dao, param, flags);\r\n         executor.enqueue(operation);\r\n         return operation;\r\n     }\r",
      "parent_sha": "9acb129d511901af4bbfa29aceeb91ac98058e07"
    }
  },
  {
    "oid": "13353325ee741ed402629047759f0f891628571a",
    "message": "fix leak introduced 2 days in 1fd5a337edb91ad53439ab9828f71d7e7df63a59",
    "date": "2016-08-04T10:38:44Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/13353325ee741ed402629047759f0f891628571a",
    "details": {
      "sha": "880370c5466e1c47400dc327f67c7223660ec2ec",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/13353325ee741ed402629047759f0f891628571a/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FAbstractQueryData.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/13353325ee741ed402629047759f0f891628571a/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FAbstractQueryData.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FAbstractQueryData.java?ref=13353325ee741ed402629047759f0f891628571a",
      "patch": "@@ -79,7 +79,7 @@ void gc() {\n             Iterator<Entry<Long, WeakReference<Q>>> iterator = queriesForThreads.entrySet().iterator();\n             while (iterator.hasNext()) {\n                 Entry<Long, WeakReference<Q>> entry = iterator.next();\n-                if (entry.getValue() == null) {\n+                if (entry.getValue().get() == null) {\n                     iterator.remove();\n                 }\n             }",
      "parent_sha": "f6fdf5b5ef58f980c11fb26012868259e0e0d464"
    }
  },
  {
    "oid": "93655a4e5fa6cd4011fa158482e6d31447161eed",
    "message": "removed redundant != null",
    "date": "2013-02-24T09:04:33Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/93655a4e5fa6cd4011fa158482e6d31447161eed",
    "details": {
      "sha": "b63ec1b43ccae53f3844ca15e6b6a1069c88443d",
      "filename": "DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java",
      "status": "modified",
      "additions": 366,
      "deletions": 368,
      "changes": 734,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/93655a4e5fa6cd4011fa158482e6d31447161eed/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fasync%2FAsyncOperationExecutor.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/93655a4e5fa6cd4011fa158482e6d31447161eed/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fasync%2FAsyncOperationExecutor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fasync%2FAsyncOperationExecutor.java?ref=93655a4e5fa6cd4011fa158482e6d31447161eed",
      "patch": "@@ -1,368 +1,366 @@\n-/*\r\n- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package de.greenrobot.dao.async;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.concurrent.BlockingQueue;\r\n-import java.util.concurrent.Callable;\r\n-import java.util.concurrent.ExecutorService;\r\n-import java.util.concurrent.Executors;\r\n-import java.util.concurrent.LinkedBlockingQueue;\r\n-import java.util.concurrent.TimeUnit;\r\n-\r\n-import android.database.sqlite.SQLiteDatabase;\r\n-import android.os.Handler;\r\n-import android.os.Looper;\r\n-import android.os.Message;\r\n-import de.greenrobot.dao.DaoException;\r\n-import de.greenrobot.dao.DaoLog;\r\n-import de.greenrobot.dao.query.Query;\r\n-\r\n-class AsyncOperationExecutor implements Runnable, Handler.Callback {\r\n-\r\n-    private static ExecutorService executorService = Executors.newCachedThreadPool();\r\n-\r\n-    private final BlockingQueue<AsyncOperation> queue;\r\n-    private volatile boolean executorRunning;\r\n-    private volatile int maxOperationCountToMerge;\r\n-    private volatile AsyncOperationListener listener;\r\n-    private volatile AsyncOperationListener listenerMainThread;\r\n-    private volatile int waitForMergeMillis;\r\n-\r\n-    private int countOperationsEnqueued;\r\n-    private int countOperationsCompleted;\r\n-\r\n-    private Handler handlerMainThread;\r\n-    private int lastSequenceNumber;\r\n-\r\n-    AsyncOperationExecutor() {\r\n-        queue = new LinkedBlockingQueue<AsyncOperation>();\r\n-        maxOperationCountToMerge = 50;\r\n-        waitForMergeMillis = 50;\r\n-    }\r\n-\r\n-    public void enqueue(AsyncOperation operation) {\r\n-        synchronized (this) {\r\n-            operation.sequenceNumber = ++lastSequenceNumber;\r\n-            queue.add(operation);\r\n-            countOperationsEnqueued++;\r\n-            if (!executorRunning) {\r\n-                executorRunning = true;\r\n-                executorService.execute(this);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public int getMaxOperationCountToMerge() {\r\n-        return maxOperationCountToMerge;\r\n-    }\r\n-\r\n-    public void setMaxOperationCountToMerge(int maxOperationCountToMerge) {\r\n-        this.maxOperationCountToMerge = maxOperationCountToMerge;\r\n-    }\r\n-\r\n-    public int getWaitForMergeMillis() {\r\n-        return waitForMergeMillis;\r\n-    }\r\n-\r\n-    public void setWaitForMergeMillis(int waitForMergeMillis) {\r\n-        this.waitForMergeMillis = waitForMergeMillis;\r\n-    }\r\n-\r\n-    public AsyncOperationListener getListener() {\r\n-        return listener;\r\n-    }\r\n-\r\n-    public void setListener(AsyncOperationListener listener) {\r\n-        this.listener = listener;\r\n-    }\r\n-\r\n-    public AsyncOperationListener getListenerMainThread() {\r\n-        return listenerMainThread;\r\n-    }\r\n-\r\n-    public void setListenerMainThread(AsyncOperationListener listenerMainThread) {\r\n-        this.listenerMainThread = listenerMainThread;\r\n-    }\r\n-\r\n-    public synchronized boolean isCompleted() {\r\n-        return countOperationsEnqueued == countOperationsCompleted;\r\n-    }\r\n-\r\n-    /**\r\n-     * Waits until all enqueued operations are complete. If the thread gets interrupted, any\r\n-     * {@link InterruptedException} will be rethrown as a {@link DaoException}.\r\n-     */\r\n-    public synchronized void waitForCompletion() {\r\n-        while (!isCompleted()) {\r\n-            try {\r\n-                wait();\r\n-            } catch (InterruptedException e) {\r\n-                throw new DaoException(\"Interrupted while waiting for all operations to complete\", e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Waits until all enqueued operations are complete, but at most the given amount of milliseconds. If the thread\r\n-     * gets interrupted, any {@link InterruptedException} will be rethrown as a {@link DaoException}.\r\n-     * \r\n-     * @return true if operations completed in the given time frame.\r\n-     */\r\n-    public synchronized boolean waitForCompletion(int maxMillis) {\r\n-        if (!isCompleted()) {\r\n-            try {\r\n-                wait(maxMillis);\r\n-            } catch (InterruptedException e) {\r\n-                throw new DaoException(\"Interrupted while waiting for all operations to complete\", e);\r\n-            }\r\n-        }\r\n-        return isCompleted();\r\n-    }\r\n-\r\n-    @Override\r\n-    public void run() {\r\n-        try {\r\n-            try {\r\n-                while (true) {\r\n-                    AsyncOperation operation = queue.poll(1, TimeUnit.SECONDS);\r\n-                    if (operation == null) {\r\n-                        synchronized (this) {\r\n-                            // Check again, this time in synchronized\r\n-                            operation = queue.poll();\r\n-                            if (operation == null) {\r\n-                                executorRunning = false;\r\n-                                return;\r\n-                            }\r\n-                        }\r\n-                    }\r\n-                    if (operation != null) {\r\n-                        if (operation.isMergeTx()) {\r\n-                            // Wait some ms for another operation to merge because a TX is expensive\r\n-                            AsyncOperation operation2 = queue.poll(waitForMergeMillis, TimeUnit.MILLISECONDS);\r\n-                            if (operation2 != null) {\r\n-                                if (operation.isMergeableWith(operation2)) {\r\n-                                    mergeTxAndExecute(operation, operation2);\r\n-                                } else {\r\n-                                    // Cannot merge, execute both\r\n-                                    executeOperationAndPostCompleted(operation);\r\n-                                    executeOperationAndPostCompleted(operation2);\r\n-                                }\r\n-                                continue;\r\n-                            }\r\n-                        }\r\n-                        executeOperationAndPostCompleted(operation);\r\n-                    }\r\n-                }\r\n-            } catch (InterruptedException e) {\r\n-                DaoLog.w(Thread.currentThread().getName() + \" was interruppted\", e);\r\n-            }\r\n-        } finally {\r\n-            executorRunning = false;\r\n-        }\r\n-    }\r\n-\r\n-    private void mergeTxAndExecute(AsyncOperation operation1, AsyncOperation operation2) {\r\n-        ArrayList<AsyncOperation> mergedOps = new ArrayList<AsyncOperation>();\r\n-        mergedOps.add(operation1);\r\n-        mergedOps.add(operation2);\r\n-\r\n-        SQLiteDatabase db = operation1.getDatabase();\r\n-        db.beginTransaction();\r\n-        boolean failed = false;\r\n-        try {\r\n-            for (int i = 0; i < mergedOps.size(); i++) {\r\n-                AsyncOperation operation = mergedOps.get(i);\r\n-                executeOperation(operation);\r\n-                if (operation.isFailed()) {\r\n-                    // Operation may still have changed the DB, roll back everything\r\n-                    failed = true;\r\n-                    break;\r\n-                }\r\n-                if (i == mergedOps.size() - 1) {\r\n-                    AsyncOperation peekedOp = queue.peek();\r\n-                    if (i < maxOperationCountToMerge && operation.isMergeableWith(peekedOp)) {\r\n-                        AsyncOperation removedOp = queue.remove();\r\n-                        if (removedOp != peekedOp) {\r\n-                            // Paranoia check, should not occur unless threading is broken\r\n-                            throw new DaoException(\"Internal error: peeked op did not match removed op\");\r\n-                        }\r\n-                        mergedOps.add(removedOp);\r\n-                    } else {\r\n-                        // No more ops in the queue to merge, finish it\r\n-                        db.setTransactionSuccessful();\r\n-                    }\r\n-                }\r\n-            }\r\n-        } finally {\r\n-            db.endTransaction();\r\n-        }\r\n-        if (failed) {\r\n-            DaoLog.i(\"Revered merged transaction because one of the operations failed. Executing operations one by one instead...\");\r\n-            for (AsyncOperation asyncOperation : mergedOps) {\r\n-                asyncOperation.reset();\r\n-                executeOperationAndPostCompleted(asyncOperation);\r\n-            }\r\n-        } else {\r\n-            int mergedCount = mergedOps.size();\r\n-            for (AsyncOperation asyncOperation : mergedOps) {\r\n-                asyncOperation.mergedOperationsCount = mergedCount;\r\n-                handleOperationCompleted(asyncOperation);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private void handleOperationCompleted(AsyncOperation operation) {\r\n-        operation.setCompleted();\r\n-\r\n-        AsyncOperationListener listenerToCall = listener;\r\n-        if (listenerToCall != null) {\r\n-            listenerToCall.onAsyncOperationCompleted(operation);\r\n-        }\r\n-        if (listenerMainThread != null) {\r\n-            if (handlerMainThread == null) {\r\n-                handlerMainThread = new Handler(Looper.getMainLooper(), this);\r\n-            }\r\n-            Message msg = handlerMainThread.obtainMessage(1, operation);\r\n-            handlerMainThread.sendMessage(msg);\r\n-        }\r\n-        synchronized (this) {\r\n-            countOperationsCompleted++;\r\n-            if (countOperationsCompleted == countOperationsEnqueued) {\r\n-                notifyAll();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private void executeOperationAndPostCompleted(AsyncOperation operation) {\r\n-        executeOperation(operation);\r\n-        handleOperationCompleted(operation);\r\n-    }\r\n-\r\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n-    private void executeOperation(AsyncOperation operation) {\r\n-        operation.timeStarted = System.currentTimeMillis();\r\n-        try {\r\n-            switch (operation.type) {\r\n-            case Delete:\r\n-                operation.dao.delete(operation.parameter);\r\n-                break;\r\n-            case DeleteInTxIterable:\r\n-                operation.dao.deleteInTx((Iterable<Object>) operation.parameter);\r\n-                break;\r\n-            case DeleteInTxArray:\r\n-                operation.dao.deleteInTx((Object[]) operation.parameter);\r\n-                break;\r\n-            case Insert:\r\n-                operation.dao.insert(operation.parameter);\r\n-                break;\r\n-            case InsertInTxIterable:\r\n-                operation.dao.insertInTx((Iterable<Object>) operation.parameter);\r\n-                break;\r\n-            case InsertInTxArray:\r\n-                operation.dao.insertInTx((Object[]) operation.parameter);\r\n-                break;\r\n-            case InsertOrReplace:\r\n-                operation.dao.insertOrReplace(operation.parameter);\r\n-                break;\r\n-            case InsertOrReplaceInTxIterable:\r\n-                operation.dao.insertOrReplaceInTx((Iterable<Object>) operation.parameter);\r\n-                break;\r\n-            case InsertOrReplaceInTxArray:\r\n-                operation.dao.insertOrReplaceInTx((Object[]) operation.parameter);\r\n-                break;\r\n-            case Update:\r\n-                operation.dao.update(operation.parameter);\r\n-                break;\r\n-            case UpdateInTxIterable:\r\n-                operation.dao.updateInTx((Iterable<Object>) operation.parameter);\r\n-                break;\r\n-            case UpdateInTxArray:\r\n-                operation.dao.updateInTx((Object[]) operation.parameter);\r\n-                break;\r\n-            case TransactionRunnable:\r\n-                executeTransactionRunnable(operation);\r\n-                break;\r\n-            case TransactionCallable:\r\n-                executeTransactionCallable(operation);\r\n-                break;\r\n-            case QueryList:\r\n-                operation.result = ((Query) operation.parameter).list();\r\n-                break;\r\n-            case QueryUnique:\r\n-                operation.result = ((Query) operation.parameter).unique();\r\n-                break;\r\n-            case DeleteByKey:\r\n-                operation.dao.deleteByKey(operation.parameter);\r\n-                break;\r\n-            case DeleteAll:\r\n-                operation.dao.deleteAll();\r\n-                break;\r\n-            case Load:\r\n-                operation.result = operation.dao.load(operation.parameter);\r\n-                break;\r\n-            case LoadAll:\r\n-                operation.result = operation.dao.loadAll();\r\n-                break;\r\n-            case Count:\r\n-                operation.result = operation.dao.count();\r\n-                break;\r\n-            case Refresh:\r\n-                operation.dao.refresh(operation.parameter);\r\n-                break;\r\n-            default:\r\n-                throw new DaoException(\"Unsupported operation: \" + operation.type);\r\n-            }\r\n-        } catch (Throwable th) {\r\n-            operation.throwable = th;\r\n-        }\r\n-        operation.timeCompleted = System.currentTimeMillis();\r\n-        // Do not set it to completed here because it might be a merged TX\r\n-    }\r\n-\r\n-    private void executeTransactionRunnable(AsyncOperation operation) {\r\n-        SQLiteDatabase db = operation.getDatabase();\r\n-        db.beginTransaction();\r\n-        try {\r\n-            ((Runnable) operation.parameter).run();\r\n-            db.setTransactionSuccessful();\r\n-        } finally {\r\n-            db.endTransaction();\r\n-        }\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    private void executeTransactionCallable(AsyncOperation operation) throws Exception {\r\n-        SQLiteDatabase db = operation.getDatabase();\r\n-        db.beginTransaction();\r\n-        try {\r\n-            operation.result = ((Callable<Object>) operation.parameter).call();\r\n-            db.setTransactionSuccessful();\r\n-        } finally {\r\n-            db.endTransaction();\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean handleMessage(Message msg) {\r\n-        AsyncOperationListener listenerToCall = listenerMainThread;\r\n-        if (listenerToCall != null) {\r\n-            listenerToCall.onAsyncOperationCompleted((AsyncOperation) msg.obj);\r\n-        }\r\n-        return false;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package de.greenrobot.dao.async;\n+\n+import java.util.ArrayList;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+import android.database.sqlite.SQLiteDatabase;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.os.Message;\n+import de.greenrobot.dao.DaoException;\n+import de.greenrobot.dao.DaoLog;\n+import de.greenrobot.dao.query.Query;\n+\n+class AsyncOperationExecutor implements Runnable, Handler.Callback {\n+\n+    private static ExecutorService executorService = Executors.newCachedThreadPool();\n+\n+    private final BlockingQueue<AsyncOperation> queue;\n+    private volatile boolean executorRunning;\n+    private volatile int maxOperationCountToMerge;\n+    private volatile AsyncOperationListener listener;\n+    private volatile AsyncOperationListener listenerMainThread;\n+    private volatile int waitForMergeMillis;\n+\n+    private int countOperationsEnqueued;\n+    private int countOperationsCompleted;\n+\n+    private Handler handlerMainThread;\n+    private int lastSequenceNumber;\n+\n+    AsyncOperationExecutor() {\n+        queue = new LinkedBlockingQueue<AsyncOperation>();\n+        maxOperationCountToMerge = 50;\n+        waitForMergeMillis = 50;\n+    }\n+\n+    public void enqueue(AsyncOperation operation) {\n+        synchronized (this) {\n+            operation.sequenceNumber = ++lastSequenceNumber;\n+            queue.add(operation);\n+            countOperationsEnqueued++;\n+            if (!executorRunning) {\n+                executorRunning = true;\n+                executorService.execute(this);\n+            }\n+        }\n+    }\n+\n+    public int getMaxOperationCountToMerge() {\n+        return maxOperationCountToMerge;\n+    }\n+\n+    public void setMaxOperationCountToMerge(int maxOperationCountToMerge) {\n+        this.maxOperationCountToMerge = maxOperationCountToMerge;\n+    }\n+\n+    public int getWaitForMergeMillis() {\n+        return waitForMergeMillis;\n+    }\n+\n+    public void setWaitForMergeMillis(int waitForMergeMillis) {\n+        this.waitForMergeMillis = waitForMergeMillis;\n+    }\n+\n+    public AsyncOperationListener getListener() {\n+        return listener;\n+    }\n+\n+    public void setListener(AsyncOperationListener listener) {\n+        this.listener = listener;\n+    }\n+\n+    public AsyncOperationListener getListenerMainThread() {\n+        return listenerMainThread;\n+    }\n+\n+    public void setListenerMainThread(AsyncOperationListener listenerMainThread) {\n+        this.listenerMainThread = listenerMainThread;\n+    }\n+\n+    public synchronized boolean isCompleted() {\n+        return countOperationsEnqueued == countOperationsCompleted;\n+    }\n+\n+    /**\n+     * Waits until all enqueued operations are complete. If the thread gets interrupted, any\n+     * {@link InterruptedException} will be rethrown as a {@link DaoException}.\n+     */\n+    public synchronized void waitForCompletion() {\n+        while (!isCompleted()) {\n+            try {\n+                wait();\n+            } catch (InterruptedException e) {\n+                throw new DaoException(\"Interrupted while waiting for all operations to complete\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Waits until all enqueued operations are complete, but at most the given amount of milliseconds. If the thread\n+     * gets interrupted, any {@link InterruptedException} will be rethrown as a {@link DaoException}.\n+     * \n+     * @return true if operations completed in the given time frame.\n+     */\n+    public synchronized boolean waitForCompletion(int maxMillis) {\n+        if (!isCompleted()) {\n+            try {\n+                wait(maxMillis);\n+            } catch (InterruptedException e) {\n+                throw new DaoException(\"Interrupted while waiting for all operations to complete\", e);\n+            }\n+        }\n+        return isCompleted();\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            try {\n+                while (true) {\n+                    AsyncOperation operation = queue.poll(1, TimeUnit.SECONDS);\n+                    if (operation == null) {\n+                        synchronized (this) {\n+                            // Check again, this time in synchronized\n+                            operation = queue.poll();\n+                            if (operation == null) {\n+                                executorRunning = false;\n+                                return;\n+                            }\n+                        }\n+                    }\n+                    if (operation.isMergeTx()) {\n+                        // Wait some ms for another operation to merge because a TX is expensive\n+                        AsyncOperation operation2 = queue.poll(waitForMergeMillis, TimeUnit.MILLISECONDS);\n+                        if (operation2 != null) {\n+                            if (operation.isMergeableWith(operation2)) {\n+                                mergeTxAndExecute(operation, operation2);\n+                            } else {\n+                                // Cannot merge, execute both\n+                                executeOperationAndPostCompleted(operation);\n+                                executeOperationAndPostCompleted(operation2);\n+                            }\n+                            continue;\n+                        }\n+                    }\n+                    executeOperationAndPostCompleted(operation);\n+                }\n+            } catch (InterruptedException e) {\n+                DaoLog.w(Thread.currentThread().getName() + \" was interruppted\", e);\n+            }\n+        } finally {\n+            executorRunning = false;\n+        }\n+    }\n+\n+    private void mergeTxAndExecute(AsyncOperation operation1, AsyncOperation operation2) {\n+        ArrayList<AsyncOperation> mergedOps = new ArrayList<AsyncOperation>();\n+        mergedOps.add(operation1);\n+        mergedOps.add(operation2);\n+\n+        SQLiteDatabase db = operation1.getDatabase();\n+        db.beginTransaction();\n+        boolean failed = false;\n+        try {\n+            for (int i = 0; i < mergedOps.size(); i++) {\n+                AsyncOperation operation = mergedOps.get(i);\n+                executeOperation(operation);\n+                if (operation.isFailed()) {\n+                    // Operation may still have changed the DB, roll back everything\n+                    failed = true;\n+                    break;\n+                }\n+                if (i == mergedOps.size() - 1) {\n+                    AsyncOperation peekedOp = queue.peek();\n+                    if (i < maxOperationCountToMerge && operation.isMergeableWith(peekedOp)) {\n+                        AsyncOperation removedOp = queue.remove();\n+                        if (removedOp != peekedOp) {\n+                            // Paranoia check, should not occur unless threading is broken\n+                            throw new DaoException(\"Internal error: peeked op did not match removed op\");\n+                        }\n+                        mergedOps.add(removedOp);\n+                    } else {\n+                        // No more ops in the queue to merge, finish it\n+                        db.setTransactionSuccessful();\n+                    }\n+                }\n+            }\n+        } finally {\n+            db.endTransaction();\n+        }\n+        if (failed) {\n+            DaoLog.i(\"Revered merged transaction because one of the operations failed. Executing operations one by one instead...\");\n+            for (AsyncOperation asyncOperation : mergedOps) {\n+                asyncOperation.reset();\n+                executeOperationAndPostCompleted(asyncOperation);\n+            }\n+        } else {\n+            int mergedCount = mergedOps.size();\n+            for (AsyncOperation asyncOperation : mergedOps) {\n+                asyncOperation.mergedOperationsCount = mergedCount;\n+                handleOperationCompleted(asyncOperation);\n+            }\n+        }\n+    }\n+\n+    private void handleOperationCompleted(AsyncOperation operation) {\n+        operation.setCompleted();\n+\n+        AsyncOperationListener listenerToCall = listener;\n+        if (listenerToCall != null) {\n+            listenerToCall.onAsyncOperationCompleted(operation);\n+        }\n+        if (listenerMainThread != null) {\n+            if (handlerMainThread == null) {\n+                handlerMainThread = new Handler(Looper.getMainLooper(), this);\n+            }\n+            Message msg = handlerMainThread.obtainMessage(1, operation);\n+            handlerMainThread.sendMessage(msg);\n+        }\n+        synchronized (this) {\n+            countOperationsCompleted++;\n+            if (countOperationsCompleted == countOperationsEnqueued) {\n+                notifyAll();\n+            }\n+        }\n+    }\n+\n+    private void executeOperationAndPostCompleted(AsyncOperation operation) {\n+        executeOperation(operation);\n+        handleOperationCompleted(operation);\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private void executeOperation(AsyncOperation operation) {\n+        operation.timeStarted = System.currentTimeMillis();\n+        try {\n+            switch (operation.type) {\n+            case Delete:\n+                operation.dao.delete(operation.parameter);\n+                break;\n+            case DeleteInTxIterable:\n+                operation.dao.deleteInTx((Iterable<Object>) operation.parameter);\n+                break;\n+            case DeleteInTxArray:\n+                operation.dao.deleteInTx((Object[]) operation.parameter);\n+                break;\n+            case Insert:\n+                operation.dao.insert(operation.parameter);\n+                break;\n+            case InsertInTxIterable:\n+                operation.dao.insertInTx((Iterable<Object>) operation.parameter);\n+                break;\n+            case InsertInTxArray:\n+                operation.dao.insertInTx((Object[]) operation.parameter);\n+                break;\n+            case InsertOrReplace:\n+                operation.dao.insertOrReplace(operation.parameter);\n+                break;\n+            case InsertOrReplaceInTxIterable:\n+                operation.dao.insertOrReplaceInTx((Iterable<Object>) operation.parameter);\n+                break;\n+            case InsertOrReplaceInTxArray:\n+                operation.dao.insertOrReplaceInTx((Object[]) operation.parameter);\n+                break;\n+            case Update:\n+                operation.dao.update(operation.parameter);\n+                break;\n+            case UpdateInTxIterable:\n+                operation.dao.updateInTx((Iterable<Object>) operation.parameter);\n+                break;\n+            case UpdateInTxArray:\n+                operation.dao.updateInTx((Object[]) operation.parameter);\n+                break;\n+            case TransactionRunnable:\n+                executeTransactionRunnable(operation);\n+                break;\n+            case TransactionCallable:\n+                executeTransactionCallable(operation);\n+                break;\n+            case QueryList:\n+                operation.result = ((Query) operation.parameter).list();\n+                break;\n+            case QueryUnique:\n+                operation.result = ((Query) operation.parameter).unique();\n+                break;\n+            case DeleteByKey:\n+                operation.dao.deleteByKey(operation.parameter);\n+                break;\n+            case DeleteAll:\n+                operation.dao.deleteAll();\n+                break;\n+            case Load:\n+                operation.result = operation.dao.load(operation.parameter);\n+                break;\n+            case LoadAll:\n+                operation.result = operation.dao.loadAll();\n+                break;\n+            case Count:\n+                operation.result = operation.dao.count();\n+                break;\n+            case Refresh:\n+                operation.dao.refresh(operation.parameter);\n+                break;\n+            default:\n+                throw new DaoException(\"Unsupported operation: \" + operation.type);\n+            }\n+        } catch (Throwable th) {\n+            operation.throwable = th;\n+        }\n+        operation.timeCompleted = System.currentTimeMillis();\n+        // Do not set it to completed here because it might be a merged TX\n+    }\n+\n+    private void executeTransactionRunnable(AsyncOperation operation) {\n+        SQLiteDatabase db = operation.getDatabase();\n+        db.beginTransaction();\n+        try {\n+            ((Runnable) operation.parameter).run();\n+            db.setTransactionSuccessful();\n+        } finally {\n+            db.endTransaction();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void executeTransactionCallable(AsyncOperation operation) throws Exception {\n+        SQLiteDatabase db = operation.getDatabase();\n+        db.beginTransaction();\n+        try {\n+            operation.result = ((Callable<Object>) operation.parameter).call();\n+            db.setTransactionSuccessful();\n+        } finally {\n+            db.endTransaction();\n+        }\n+    }\n+\n+    @Override\n+    public boolean handleMessage(Message msg) {\n+        AsyncOperationListener listenerToCall = listenerMainThread;\n+        if (listenerToCall != null) {\n+            listenerToCall.onAsyncOperationCompleted((AsyncOperation) msg.obj);\n+        }\n+        return false;\n+    }\n+\n+}",
      "parent_sha": "1f2be606dcbeeab899995e147637f9ba1576fbcd"
    }
  },
  {
    "oid": "63dee0636d50668e7774204bd9e0cf734828d924",
    "message": "testDeleteAll",
    "date": "2011-10-22T15:06:40Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/63dee0636d50668e7774204bd9e0cf734828d924",
    "details": {
      "sha": "f708e609a2cd528efead0437cbfb06f8e023ad14",
      "filename": "DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/63dee0636d50668e7774204bd9e0cf734828d924/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/63dee0636d50668e7774204bd9e0cf734828d924/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java?ref=63dee0636d50668e7774204bd9e0cf734828d924",
      "patch": "@@ -149,22 +149,17 @@ public void testDelete() {\n \r\n     public void testDeleteAll() {\r\n         List<T> entityList = new ArrayList<T>();\r\n-        List<K> pkList = new ArrayList<K>();\r\n-        int LIST_SIZE = 10;\r\n-        for (int i = 0; i < LIST_SIZE; i++) {\r\n-            K pk = nextPk();\r\n-            T entity = createEntity(pk);\r\n+        for (int i = 0; i < 10; i++) {\r\n+            T entity = createEntityWithRandomPk();\r\n             entityList.add(entity);\r\n-            pkList.add(pk);\r\n         }\r\n         dao.insertInTx(entityList);\r\n-        for (K pk : pkList) {\r\n-            assertNotNull(dao.load(pk));\r\n-        }\r\n-\r\n         dao.deleteAll();\r\n-        for (K pk : pkList) {\r\n-            assertNull(dao.load(pk));\r\n+        assertEquals(0, dao.count());\r\n+        for (T entity : entityList) {\r\n+            K key = daoAccess.getKey(entity);\r\n+            assertNotNull(key);\r\n+            assertNull(dao.load(key));\r\n         }\r\n     }\r\n \r",
      "parent_sha": "84042bdee6445fcf600b0c7d99cf9982c62a7734"
    }
  },
  {
    "oid": "f6fdf5b5ef58f980c11fb26012868259e0e0d464",
    "message": "fixes for QueryForThreadTest",
    "date": "2016-08-03T20:07:49Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/f6fdf5b5ef58f980c11fb26012868259e0e0d464",
    "details": {
      "sha": "fa3c04b972a8e84917b55a738f4f39c59ad4aac1",
      "filename": "tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/f6fdf5b5ef58f980c11fb26012868259e0e0d464/tests%2FDaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Fquery%2FQueryForThreadTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/f6fdf5b5ef58f980c11fb26012868259e0e0d464/tests%2FDaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Fquery%2FQueryForThreadTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/tests%2FDaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Fquery%2FQueryForThreadTest.java?ref=f6fdf5b5ef58f980c11fb26012868259e0e0d464",
      "patch": "@@ -32,6 +32,7 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.util.Map;\n \n public class QueryForThreadTest extends TestEntityTestBase {\n     /** Takes longer when activated */\n@@ -53,7 +54,7 @@ public void testGetForCurrentThread_ParametersAreReset() {\n         TestEntity entityFor2 = query.unique();\n         assertEquals(value + 1, (int) entityFor2.getSimpleInteger());\n         query = query.forCurrentThread();\n-        TestEntity entityFor1 = query.unique();\n+        assertNotNull(query.unique());\n     }\n \n     public void testGetForCurrentThread_ManyThreadsDontLeak() throws Exception {\n@@ -83,7 +84,7 @@ public void run() {\n \n         Method gcMethod = dataSuperclass.getDeclaredMethod(\"gc\");\n         gcMethod.setAccessible(true);\n-        SparseArray<?> map = (SparseArray<?>) mapField.get(queryData);\n+        Map map = (Map) mapField.get(queryData);\n         for (int i = 0; map.size() > 1 && i < 1000; i++) {\n             DaoLog.d(\"Queries left after \" + i + \". GC: \" + map.size());\n             System.gc();\n@@ -122,41 +123,49 @@ public void testThrowOutsideOwnerThread() throws InterruptedException {\n             queryFromOtherThread.list();\n             fail(\"Did not throw\");\n         } catch (DaoException expected) {\n+            // OK\n         }\n         try {\n             queryFromOtherThread.listIterator();\n             fail(\"Did not throw\");\n         } catch (DaoException expected) {\n+            // OK\n         }\n         try {\n             queryFromOtherThread.listLazyUncached();\n             fail(\"Did not throw\");\n         } catch (DaoException expected) {\n+            // OK\n         }\n         try {\n             queryFromOtherThread.setLimit(2);\n             fail(\"Did not throw\");\n         } catch (DaoException expected) {\n+            // OK\n         }\n         try {\n             queryFromOtherThread.setOffset(2);\n             fail(\"Did not throw\");\n         } catch (DaoException expected) {\n+            // OK\n         }\n         try {\n             queryFromOtherThread.setParameter(0, 42);\n             fail(\"Did not throw\");\n         } catch (DaoException expected) {\n+            // OK\n         }\n         try {\n             queryFromOtherThread.unique();\n             fail(\"Did not throw\");\n         } catch (DaoException expected) {\n+            // OK\n         }\n         try {\n             queryFromOtherThread.uniqueOrThrow();\n             fail(\"Did not throw\");\n         } catch (DaoException expected) {\n+            // OK\n         }\n     }\n ",
      "parent_sha": "6ff4ac48a04969ea282d59d0036b8f6b98a76161"
    }
  },
  {
    "oid": "b8ccb6688a82f66d1205149bbf3a07511d1013d1",
    "message": "refactoring: TestThread and doTx",
    "date": "2013-02-08T20:40:41Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/b8ccb6688a82f66d1205149bbf3a07511d1013d1",
    "details": {
      "sha": "5d0dc14a0a578d31f8bd4899fd164e2009c74f5b",
      "filename": "DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java",
      "status": "modified",
      "additions": 67,
      "deletions": 46,
      "changes": 113,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/b8ccb6688a82f66d1205149bbf3a07511d1013d1/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/b8ccb6688a82f66d1205149bbf3a07511d1013d1/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java?ref=b8ccb6688a82f66d1205149bbf3a07511d1013d1",
      "patch": "@@ -10,6 +10,28 @@\n import de.greenrobot.dao.test.AbstractDaoSessionTest;\n \n public class DaoSessionConcurrentTest extends AbstractDaoSessionTest<Application, DaoMaster, DaoSession> {\n+    abstract class TestThread extends Thread {\n+        final CountDownLatch latchToCountDown;\n+        final CountDownLatch latchToWaitFor;\n+\n+        public TestThread(CountDownLatch latchToCountDown, CountDownLatch latchToWaitFor) {\n+            this.latchToCountDown = latchToCountDown;\n+            this.latchToWaitFor = latchToWaitFor;\n+        }\n+\n+        @Override\n+        public void run() {\n+            latchToCountDown.countDown();\n+            try {\n+                latchToWaitFor.await();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+            run2();\n+        }\n+\n+        abstract void run2();\n+    }\n \n     private final static int TIME_TO_WAIT_FOR_THREAD = 1000; // Use 1000 to be on the safe side, 100 once stable\n \n@@ -26,36 +48,28 @@ protected void setUp() {\n     }\n \n     public void testConcurrentInsertDuringTx() throws InterruptedException {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        Thread thread = new Thread(new Runnable() {\n+        CountDownLatch latchThreadsReady = new CountDownLatch(1);\n+        CountDownLatch latchInsideTx = new CountDownLatch(1);\n+        Thread thread = new TestThread(latchThreadsReady, latchInsideTx) {\n             @Override\n-            public void run() {\n-                try {\n-                    latch.await();\n-                    dao.insert(createEntity(null));\n-                    dao.insertInTx(createEntity(null));\n-                    daoSession.runInTx(new Runnable() {\n-                        @Override\n-                        public void run() {\n-                            dao.insert(createEntity(null));\n-                        }\n-                    });\n-                } catch (InterruptedException e) {\n-                }\n+            public void run2() {\n+                dao.insert(createEntity(null));\n+                dao.insertInTx(createEntity(null));\n+                daoSession.runInTx(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        dao.insert(createEntity(null));\n+                    }\n+                });\n             }\n-        });\n+        };\n         thread.start();\n         // Builds the statement so it is ready immediately in the thread\n         dao.insert(createEntity(null));\n-        daoSession.runInTx(new Runnable() {\n+        latchThreadsReady.await();\n+        doTx(latchInsideTx, new Runnable() {\n             @Override\n             public void run() {\n-                latch.countDown();\n-                // Give the concurrent thread time so it will try to acquire locks\n-                try {\n-                    Thread.sleep(TIME_TO_WAIT_FOR_THREAD);\n-                } catch (InterruptedException e) {\n-                }\n                 dao.insert(createEntity(null));\n             }\n         });\n@@ -65,36 +79,27 @@ public void run() {\n     public void testConcurrentUpdateDuringTx() throws InterruptedException {\n         final TestEntity entity = createEntity(null);\n         dao.insert(entity);\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        Thread thread = new Thread(new Runnable() {\n+        CountDownLatch latchThreadsReady = new CountDownLatch(1);\n+        final CountDownLatch latchInsideTx = new CountDownLatch(1);\n+        Thread thread = new TestThread(latchThreadsReady, latchInsideTx) {\n             @Override\n-            public void run() {\n-                try {\n-                    latch.await();\n-                    dao.update(entity);\n-                    dao.updateInTx(entity);\n-                    daoSession.runInTx(new Runnable() {\n-                        @Override\n-                        public void run() {\n-                            dao.update(entity);\n-                        }\n-                    });\n-                } catch (InterruptedException e) {\n-                }\n+            public void run2() {\n+                dao.update(entity);\n+                dao.updateInTx(entity);\n+                daoSession.runInTx(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        dao.update(entity);\n+                    }\n+                });\n             }\n-        });\n+        };\n         thread.start();\n         // Builds the statement so it is ready immediately in the thread\n         dao.update(entity);\n-        daoSession.runInTx(new Runnable() {\n+        doTx(latchInsideTx, new Runnable() {\n             @Override\n             public void run() {\n-                latch.countDown();\n-                // Give the concurrent thread time so it will try to acquire locks\n-                try {\n-                    Thread.sleep(TIME_TO_WAIT_FOR_THREAD);\n-                } catch (InterruptedException e) {\n-                }\n                 dao.update(entity);\n             }\n         });\n@@ -125,6 +130,22 @@ protected SQLiteStatement initialValue() {\n         assertTrue(time < 10);\n     }\n \n+    private void doTx(final CountDownLatch latchInsideTx, final Runnable runnableInsideTx) {\n+        daoSession.runInTx(new Runnable() {\n+            @Override\n+            public void run() {\n+                latchInsideTx.countDown();\n+                // Give the concurrent thread time so it will try to acquire locks\n+                try {\n+                    Thread.sleep(TIME_TO_WAIT_FOR_THREAD);\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+                runnableInsideTx.run();\n+            }\n+        });\n+    }\n+\n     protected TestEntity createEntity(Long key) {\n         TestEntity entity = new TestEntity(key);\n         entity.setSimpleStringNotNull(\"green\");",
      "parent_sha": "4bffe8def41cf5da6cca5bacaf63cf513a684891"
    }
  },
  {
    "oid": "6aedaf8d340245dee386438d7fd838efca138e26",
    "message": "Fix typo in the comment of QueryBuilder.offset() (#436)\n\nIs limit, but is meant to be offset instead.",
    "date": "2016-10-04T07:03:19Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/6aedaf8d340245dee386438d7fd838efca138e26",
    "details": {
      "sha": "a0667c02eb1fb48c9cb48f06a61ca41a06ac4226",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/query/QueryBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/6aedaf8d340245dee386438d7fd838efca138e26/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/6aedaf8d340245dee386438d7fd838efca138e26/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FQueryBuilder.java?ref=6aedaf8d340245dee386438d7fd838efca138e26",
      "patch": "@@ -269,7 +269,7 @@ public QueryBuilder<T> limit(int limit) {\n     }\n \n     /**\n-     * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code limit} results are\n+     * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code offset} results are\n      * skipped and the total number of results will be limited by {@code limit}. You cannot use offset without limit.\n      */\n     public QueryBuilder<T> offset(int offset) {",
      "parent_sha": "40320866b831fddeb6dead3d2c16ec40f2ab6c32"
    }
  },
  {
    "oid": "6bf001e205e2b63a5bbad2a1c83c3db7cd6313eb",
    "message": "added testToManyWithJoin",
    "date": "2015-06-29T21:09:25Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/6bf001e205e2b63a5bbad2a1c83c3db7cd6313eb",
    "details": {
      "sha": "592bdddf71e19ac03bb7bc5ffb1a62209f5c3871",
      "filename": "DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java",
      "status": "modified",
      "additions": 66,
      "deletions": 34,
      "changes": 100,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/6bf001e205e2b63a5bbad2a1c83c3db7cd6313eb/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FToManyEntityTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/6bf001e205e2b63a5bbad2a1c83c3db7cd6313eb/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FToManyEntityTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FToManyEntityTest.java?ref=6bf001e205e2b63a5bbad2a1c83c3db7cd6313eb",
      "patch": "@@ -17,13 +17,17 @@\n  */\n package de.greenrobot.daotest.entity;\n \n+import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import de.greenrobot.dao.test.AbstractDaoSessionTest;\n import de.greenrobot.daotest.DaoMaster;\n import de.greenrobot.daotest.DaoSession;\n+import de.greenrobot.daotest.DateEntity;\n+import de.greenrobot.daotest.DateEntityDao;\n+import de.greenrobot.daotest.JoinManyToDateEntity;\n import de.greenrobot.daotest.ToManyEntity;\n import de.greenrobot.daotest.ToManyEntityDao;\n import de.greenrobot.daotest.ToManyTargetEntity;\n@@ -62,40 +66,6 @@ public void runTestToManyBasics(long id, int count) {\n         assertSameEntities(targetEntities, resolvedToMany);\n     }\n \n-    private void assertSameEntities(ToManyTargetEntity[] targetEntities, List<ToManyTargetEntity> resolvedToMany) {\n-        int count = targetEntities.length;\n-        assertEquals(count, resolvedToMany.size());\n-\n-        Map<Long, ToManyTargetEntity> resolvedMap = new HashMap<Long, ToManyTargetEntity>();\n-        for (ToManyTargetEntity resolvedEntity : resolvedToMany) {\n-            resolvedMap.put(resolvedEntity.getId(), resolvedEntity);\n-        }\n-        for (int i = 0; i < count; i++) {\n-            long entityId = (long) targetEntities[i].getId();\n-            assertTrue(\"ID=\" + entityId, resolvedMap.containsKey(entityId));\n-            assertSame(targetEntities[i], resolvedMap.get(entityId));\n-        }\n-    }\n-\n-    private ToManyTargetEntity[] prepareToMany(long id, int count) {\n-        ToManyEntity entity = new ToManyEntity(id);\n-        daoSession.insert(entity);\n-        return insertTargetEntities(id, count, null);\n-    }\n-\n-    private ToManyTargetEntity[] insertTargetEntities(Long toManyId, int count, String joinProperty) {\n-        ToManyTargetEntity[] targetEntities = new ToManyTargetEntity[count];\n-        for (int i = 0; i < count; i++) {\n-            ToManyTargetEntity target = new ToManyTargetEntity();\n-            target.setToManyId(toManyId);\n-            target.setToManyIdDesc(toManyId);\n-            target.setTargetJoinProperty(joinProperty);\n-            targetEntities[i] = target;\n-        }\n-        toManyTargetEntityDao.insertInTx(targetEntities);\n-        return targetEntities;\n-    }\n-\n     public void testGetToManyTwice() {\n         prepareToMany(1, 3);\n \n@@ -194,4 +164,66 @@ public void testTwoJoinProperty() {\n         assertFalse(middleEntity.getId() == targetEntities.get(1).getId());\n     }\n \n+    public void testToManyWithJoin() {\n+        ToManyEntity entity = new ToManyEntity(1l);\n+        daoSession.insert(entity);\n+        List<DateEntity> dateEntities = entity.getDateEntityList();\n+        assertEquals(0, dateEntities.size());\n+\n+        DateEntityDao dateDao = daoSession.getDateEntityDao();\n+        Date now = new Date();\n+        DateEntity date1 = new DateEntity(1L, null, now);\n+        DateEntity date2 = new DateEntity(2L, null, now);\n+        DateEntity date3 = new DateEntity(3L, null, now);\n+        DateEntity date4 = new DateEntity(4L, null, now);\n+        dateDao.insertInTx(date1, date2, date3, date4);\n+\n+        daoSession.insert(new JoinManyToDateEntity(1L,2L,1L));\n+        daoSession.insert(new JoinManyToDateEntity(2L,1L,3L));\n+        entity.resetDateEntityList();\n+        dateEntities = entity.getDateEntityList();\n+        assertEquals(1, dateEntities.size());\n+        assertEquals(3L, (long) dateEntities.get(0).getId());\n+\n+        daoSession.insert(new JoinManyToDateEntity(3L, 1L, 4L));\n+        entity.resetDateEntityList();\n+        dateEntities = entity.getDateEntityList();\n+        assertEquals(2, dateEntities.size());\n+    }\n+\n+    private void assertSameEntities(ToManyTargetEntity[] targetEntities, List<ToManyTargetEntity> resolvedToMany) {\n+        int count = targetEntities.length;\n+        assertEquals(count, resolvedToMany.size());\n+\n+        Map<Long, ToManyTargetEntity> resolvedMap = new HashMap<Long, ToManyTargetEntity>();\n+        for (ToManyTargetEntity resolvedEntity : resolvedToMany) {\n+            resolvedMap.put(resolvedEntity.getId(), resolvedEntity);\n+        }\n+        for (int i = 0; i < count; i++) {\n+            long entityId = (long) targetEntities[i].getId();\n+            assertTrue(\"ID=\" + entityId, resolvedMap.containsKey(entityId));\n+            assertSame(targetEntities[i], resolvedMap.get(entityId));\n+        }\n+    }\n+\n+    private ToManyTargetEntity[] prepareToMany(long id, int count) {\n+        ToManyEntity entity = new ToManyEntity(id);\n+        daoSession.insert(entity);\n+        return insertTargetEntities(id, count, null);\n+    }\n+\n+    private ToManyTargetEntity[] insertTargetEntities(Long toManyId, int count, String joinProperty) {\n+        ToManyTargetEntity[] targetEntities = new ToManyTargetEntity[count];\n+        for (int i = 0; i < count; i++) {\n+            ToManyTargetEntity target = new ToManyTargetEntity();\n+            target.setToManyId(toManyId);\n+            target.setToManyIdDesc(toManyId);\n+            target.setTargetJoinProperty(joinProperty);\n+            targetEntities[i] = target;\n+        }\n+        toManyTargetEntityDao.insertInTx(targetEntities);\n+        return targetEntities;\n+    }\n+\n+\n }",
      "parent_sha": "c994c966b1406c36122b9f40f1857a1bb262709a"
    }
  },
  {
    "oid": "dfbb9202b12482c9b9ed95e942d0cb539798bd45",
    "message": "print schema version before generating",
    "date": "2012-02-16T19:01:07Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/dfbb9202b12482c9b9ed95e942d0cb539798bd45",
    "details": {
      "sha": "dfb310ad06832cbf09f0f7c179214b1a5c64986f",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/dfbb9202b12482c9b9ed95e942d0cb539798bd45/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/dfbb9202b12482c9b9ed95e942d0cb539798bd45/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java?ref=dfbb9202b12482c9b9ed95e942d0cb539798bd45",
      "patch": "@@ -93,8 +93,9 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws\n         schema.init2ndPass();\r\n         schema.init3ndPass();\r\n \r\n-        List<Entity> entities = schema.getEntities();\r\n+        System.out.println(\"Processing schema version \" + schema.getVersion() + \"...\");\r\n \r\n+        List<Entity> entities = schema.getEntities();\r\n         for (Entity entity : entities) {\r\n             generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);\r\n             if (!entity.isProtobuf() && !entity.isSkipGeneration()) {\r",
      "parent_sha": "27cf18d495b8d0c6254a727b4b4be47c0ef515a2"
    }
  },
  {
    "oid": "6f55fe71f1e7471723d8a10a17cd542ab943776c",
    "message": "test(No)Scheduler",
    "date": "2016-07-14T19:16:27Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/6f55fe71f1e7471723d8a10a17cd542ab943776c",
    "details": {
      "sha": "de5e1e69df41203152a1c29e64cc619be792cdbe",
      "filename": "DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java",
      "status": "modified",
      "additions": 24,
      "deletions": 11,
      "changes": 35,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/6f55fe71f1e7471723d8a10a17cd542ab943776c/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/6f55fe71f1e7471723d8a10a17cd542ab943776c/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java?ref=6f55fe71f1e7471723d8a10a17cd542ab943776c",
      "patch": "@@ -1,8 +1,8 @@\n package org.greenrobot.greendao.daotest.rx;\n \n-import org.greenrobot.greendao.rx.RxDao;\n import org.greenrobot.greendao.daotest.TestEntity;\n import org.greenrobot.greendao.daotest.TestEntityDao;\n+import org.greenrobot.greendao.rx.RxDao;\n import org.greenrobot.greendao.test.AbstractDaoTest;\n \n import java.util.List;\n@@ -25,20 +25,24 @@ protected void setUp() throws Exception {\n         rxDao = dao.rx();\n     }\n \n+    public void testScheduler() {\n+        TestSubscriber<List<TestEntity>> testSubscriber = awaitTestSubscriber(rxDao.loadAll());\n+        Thread lastSeenThread = testSubscriber.getLastSeenThread();\n+        assertNotSame(lastSeenThread, Thread.currentThread());\n+    }\n+\n+    public void testNoScheduler() {\n+        RxDao<TestEntity, Long> rxDaoNoScheduler = new RxDao<>(dao);\n+        TestSubscriber<List<TestEntity>> testSubscriber = awaitTestSubscriber(rxDaoNoScheduler.loadAll());\n+        Thread lastSeenThread = testSubscriber.getLastSeenThread();\n+        assertSame(lastSeenThread, Thread.currentThread());\n+    }\n+\n     public void testLoadAll() {\n         insertEntity(\"foo\");\n         insertEntity(\"bar\");\n \n-        Observable<List<TestEntity>> observable = rxDao.loadAll();\n-        TestSubscriber<List<TestEntity>> testSubscriber = new TestSubscriber<>();\n-        observable.subscribe(testSubscriber);\n-        testSubscriber.awaitTerminalEvent(3, TimeUnit.SECONDS);\n-        testSubscriber.assertCompleted();\n-        testSubscriber.assertNoErrors();\n-\n-        Thread lastSeenThread = testSubscriber.getLastSeenThread();\n-        assertNotSame(lastSeenThread, Thread.currentThread());\n-\n+        TestSubscriber<List<TestEntity>> testSubscriber = awaitTestSubscriber(rxDao.loadAll());\n         assertEquals(1, testSubscriber.getValueCount());\n         List<TestEntity> entities = testSubscriber.getOnNextEvents().get(0);\n \n@@ -58,6 +62,15 @@ public void testLoadAll() {\n         assertEquals(1, bar);\n     }\n \n+    private TestSubscriber<List<TestEntity>> awaitTestSubscriber(Observable<List<TestEntity>> observable) {\n+        TestSubscriber<List<TestEntity>> testSubscriber = new TestSubscriber<>();\n+        observable.subscribe(testSubscriber);\n+        testSubscriber.awaitTerminalEvent(3, TimeUnit.SECONDS);\n+        testSubscriber.assertCompleted();\n+        testSubscriber.assertNoErrors();\n+        return testSubscriber;\n+    }\n+\n     protected TestEntity insertEntity(String simpleStringNotNull) {\n         TestEntity entity = new TestEntity();\n         entity.setSimpleStringNotNull(simpleStringNotNull);",
      "parent_sha": "2147b2d477c7881739744783784ccfd5ee2c4905"
    }
  },
  {
    "oid": "c260191808f205438a2ca802428cf7084216fcfd",
    "message": "new tests for resetting to-many relations",
    "date": "2011-10-22T15:07:16Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/c260191808f205438a2ca802428cf7084216fcfd",
    "details": {
      "sha": "b2aa3965ac71743cf3ff3b9e6d60c43d4a4c7d76",
      "filename": "DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java",
      "status": "modified",
      "additions": 78,
      "deletions": 10,
      "changes": 88,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/c260191808f205438a2ca802428cf7084216fcfd/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FToManyEntityTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/c260191808f205438a2ca802428cf7084216fcfd/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FToManyEntityTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fentity%2FToManyEntityTest.java?ref=c260191808f205438a2ca802428cf7084216fcfd",
      "patch": "@@ -1,35 +1,62 @@\n package de.greenrobot.daotest.entity;\r\n \r\n+import java.util.HashMap;\r\n import java.util.List;\r\n+import java.util.Map;\r\n \r\n import de.greenrobot.dao.test.AbstractDaoSessionTest;\r\n import de.greenrobot.daotest.DaoMaster;\r\n import de.greenrobot.daotest.DaoSession;\r\n import de.greenrobot.daotest.ToManyEntity;\r\n+import de.greenrobot.daotest.ToManyEntityDao;\r\n import de.greenrobot.daotest.ToManyTargetEntity;\r\n import de.greenrobot.daotest.ToManyTargetEntityDao;\r\n \r\n public class ToManyEntityTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {\r\n \r\n+    private ToManyEntityDao toManyEntityDao;\r\n+    private ToManyTargetEntityDao toManyTargetEntityDao;\r\n+\r\n     public ToManyEntityTest() {\r\n         super(DaoMaster.class);\r\n     }\r\n \r\n+    @Override\r\n+    protected void setUp() {\r\n+        super.setUp();\r\n+        toManyEntityDao = daoSession.getToManyEntityDao();\r\n+        toManyTargetEntityDao = daoSession.getToManyTargetEntityDao();\r\n+    }\r\n+\r\n     public void testToManyBasics() {\r\n-        int count = 3;\r\n-        ToManyTargetEntity[] targetEntities = prepareToMany(1, count);\r\n+        int count = 0;\r\n+        for (int i = 0; i < 16; i++) {\r\n+            runTestToManyBasics(i + 1, i);\r\n+            count += i;\r\n+        }\r\n+        assertEquals(count, toManyTargetEntityDao.count());\r\n+    }\r\n+\r\n+    public void runTestToManyBasics(long id, int count) {\r\n+        ToManyTargetEntity[] targetEntities = prepareToMany(id, count);\r\n \r\n-        ToManyEntity testEntity = daoSession.load(ToManyEntity.class, 1l);\r\n+        ToManyEntity testEntity = toManyEntityDao.load(id);\r\n         List<ToManyTargetEntity> resolvedToMany = testEntity.getToManyTargetEntity();\r\n+        assertSameEntities(targetEntities, resolvedToMany);\r\n+    }\r\n+\r\n+    private void assertSameEntities(ToManyTargetEntity[] targetEntities, List<ToManyTargetEntity> resolvedToMany) {\r\n+        int count = targetEntities.length;\r\n         assertEquals(count, resolvedToMany.size());\r\n \r\n-        ToManyTargetEntity[] ordered = new ToManyTargetEntity[count];\r\n+        Map<Long, ToManyTargetEntity> resolvedMap = new HashMap<Long, ToManyTargetEntity>();\r\n         for (ToManyTargetEntity resolvedEntity : resolvedToMany) {\r\n-            ordered[resolvedEntity.getId().intValue() - 1] = resolvedEntity;\r\n+            resolvedMap.put(resolvedEntity.getId(), resolvedEntity);\r\n         }\r\n         for (int i = 0; i < count; i++) {\r\n-            assertEquals(i+1, ordered[i].getId().intValue());\r\n-            assertSame(targetEntities[i], ordered[i]);\r\n+            long entityId = (long) targetEntities[i].getId();\r\n+            assertTrue(\"ID=\" + entityId, resolvedMap.containsKey(entityId));\r\n+            assertSame(targetEntities[i], resolvedMap.get(entityId));\r\n         }\r\n     }\r\n \r\n@@ -38,13 +65,54 @@ private ToManyTargetEntity[] prepareToMany(long id, int count) {\n         daoSession.insert(entity);\r\n         ToManyTargetEntity[] targetEntities = new ToManyTargetEntity[count];\r\n         for (int i = 0; i < count; i++) {\r\n-            ToManyTargetEntity target = new ToManyTargetEntity((long) i + 1);\r\n+            ToManyTargetEntity target = new ToManyTargetEntity();\r\n             target.setToManyId(id);\r\n             targetEntities[i] = target;\r\n         }\r\n \r\n-        ToManyTargetEntityDao targetDao = (ToManyTargetEntityDao) daoSession.getDao(ToManyTargetEntity.class);\r\n-        targetDao.insertInTx(targetEntities);\r\n+        toManyTargetEntityDao.insertInTx(targetEntities);\r\n         return targetEntities;\r\n     }\r\n+\r\n+    public void testGetToManyTwice() {\r\n+        prepareToMany(1, 3);\r\n+\r\n+        ToManyEntity testEntity = toManyEntityDao.load(1l);\r\n+        List<ToManyTargetEntity> resolvedToMany1 = testEntity.getToManyTargetEntity();\r\n+        List<ToManyTargetEntity> resolvedToMany2 = testEntity.getToManyTargetEntity();\r\n+        assertSame(resolvedToMany1, resolvedToMany2);\r\n+    }\r\n+\r\n+    public void testResetToMany() {\r\n+        ToManyTargetEntity[] targetEntities = prepareToMany(1, 3);\r\n+\r\n+        ToManyEntity testEntity = toManyEntityDao.load(1l);\r\n+        List<ToManyTargetEntity> resolvedToMany1 = testEntity.getToManyTargetEntity();\r\n+        testEntity.resetToManyTargetEntity();\r\n+        List<ToManyTargetEntity> resolvedToMany2 = testEntity.getToManyTargetEntity();\r\n+        assertNotSame(resolvedToMany1, resolvedToMany2);\r\n+        assertSameEntities(targetEntities, resolvedToMany2);\r\n+    }\r\n+\r\n+    public void testChangeResetToMany() {\r\n+        prepareToMany(1, 3);\r\n+\r\n+        ToManyEntity testEntity = toManyEntityDao.load(1l);\r\n+        List<ToManyTargetEntity> resolvedToMany1 = testEntity.getToManyTargetEntity();\r\n+        testEntity.resetToManyTargetEntity();\r\n+\r\n+        ToManyTargetEntity newEntity = new ToManyTargetEntity();\r\n+        newEntity.setToManyId(1l);\r\n+        daoSession.insert(newEntity);\r\n+\r\n+        List<ToManyTargetEntity> resolvedToMany2 = testEntity.getToManyTargetEntity();\r\n+        assertNotSame(resolvedToMany1, resolvedToMany2);\r\n+        assertEquals(resolvedToMany1.size() + 1, resolvedToMany2.size());\r\n+\r\n+        testEntity.resetToManyTargetEntity();\r\n+        toManyTargetEntityDao.deleteAll();\r\n+        List<ToManyTargetEntity> resolvedToMany3 = testEntity.getToManyTargetEntity();\r\n+        assertEquals(0, resolvedToMany3.size());\r\n+    }\r\n+\r\n }\r",
      "parent_sha": "3d506f0aa7eaf56824feed7d6e00f9ed532d14a4"
    }
  },
  {
    "oid": "58d99f0f7fb32aadd5143ac1790d343c3081aefb",
    "message": "close cursor in tests",
    "date": "2011-10-22T14:36:01Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/58d99f0f7fb32aadd5143ac1790d343c3081aefb",
    "details": {
      "sha": "3c307fa7a34662de99c15f6191765f8b01b89f0f",
      "filename": "DaoBase/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java",
      "status": "modified",
      "additions": 22,
      "deletions": 9,
      "changes": 31,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/58d99f0f7fb32aadd5143ac1790d343c3081aefb/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/58d99f0f7fb32aadd5143ac1790d343c3081aefb/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java?ref=58d99f0f7fb32aadd5143ac1790d343c3081aefb",
      "patch": "@@ -193,8 +193,12 @@ public void testReadWithOffset() {\n         dao.insert(entity);\r\n \r\n         Cursor cursor = queryWithDummyColumnsInFront(5, \"42\", pk);\r\n-        T entity2 = daoAccess.readEntity(cursor, 5);\r\n-        assertEquals(pk, daoAccess.getKey(entity2));\r\n+        try {\r\n+            T entity2 = daoAccess.readEntity(cursor, 5);\r\n+            assertEquals(pk, daoAccess.getKey(entity2));\r\n+        } finally {\r\n+            cursor.close();\r\n+        }\r\n     }\r\n \r\n     public void testLoadPkWithOffset() {\r\n@@ -211,8 +215,12 @@ protected void runLoadPkTest(int offset) {\n         dao.insert(entity);\r\n \r\n         Cursor cursor = queryWithDummyColumnsInFront(offset, \"42\", pk);\r\n-        K pk2 = daoAccess.readKey(cursor, offset);\r\n-        assertEquals(pk, pk2);\r\n+        try {\r\n+            K pk2 = daoAccess.readKey(cursor, offset);\r\n+            assertEquals(pk, pk2);\r\n+        } finally {\r\n+            cursor.close();\r\n+        }\r\n     }\r\n \r\n     protected Cursor queryWithDummyColumnsInFront(int dummyCount, String valueForColumn, K pk) {\r\n@@ -233,11 +241,16 @@ protected Cursor queryWithDummyColumnsInFront(int dummyCount, String valueForCol\n         String select = builder.toString();\r\n         Cursor cursor = db.rawQuery(select, null);\r\n         assertTrue(cursor.moveToFirst());\r\n-        for (int i = 0; i < dummyCount; i++) {\r\n-            assertEquals(valueForColumn, cursor.getString(i));\r\n-        }\r\n-        if (pk != null) {\r\n-            assertEquals(1, cursor.getCount());\r\n+        try {\r\n+            for (int i = 0; i < dummyCount; i++) {\r\n+                assertEquals(valueForColumn, cursor.getString(i));\r\n+            }\r\n+            if (pk != null) {\r\n+                assertEquals(1, cursor.getCount());\r\n+            }\r\n+        } catch (RuntimeException ex) {\r\n+            cursor.close();\r\n+            throw ex;\r\n         }\r\n         return cursor;\r\n     }\r",
      "parent_sha": "c545ecdad479e2326ca1f84514b00d73c00a8cf3"
    }
  },
  {
    "oid": "44fdb19e1c23463b7aa9a827c40f88ed92cf6e8c",
    "message": "update generated Order class",
    "date": "2016-04-29T19:24:21Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/44fdb19e1c23463b7aa9a827c40f88ed92cf6e8c",
    "details": {
      "sha": "36a6d8fbe0eec26620fa328f773eb11a51635715",
      "filename": "DaoExample/src/main/java/de/greenrobot/daoexample/Order.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/44fdb19e1c23463b7aa9a827c40f88ed92cf6e8c/DaoExample%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdaoexample%2FOrder.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/44fdb19e1c23463b7aa9a827c40f88ed92cf6e8c/DaoExample%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdaoexample%2FOrder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoExample%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdaoexample%2FOrder.java?ref=44fdb19e1c23463b7aa9a827c40f88ed92cf6e8c",
      "patch": "@@ -31,7 +31,7 @@ public class Order {\n     private Customer customer;\n \n     @Generated\n-    private Long customer__resolvedKey;\n+    private transient Long customer__resolvedKey;\n \n \n     public Order() {",
      "parent_sha": "c623a3f2e95332d0aec86205c2567c4d3b73184b"
    }
  },
  {
    "oid": "dd1c34f6d52e0b937000096f4cc58824dd2d8e8e",
    "message": "added dontCreateApplicationDuringSetUp to DbTest",
    "date": "2013-06-12T14:31:29Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/dd1c34f6d52e0b937000096f4cc58824dd2d8e8e",
    "details": {
      "sha": "ee3a29dffaaee20e4d864a85b101918d1b0a5c2c",
      "filename": "DaoCore/src/de/greenrobot/dao/test/DbTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/dd1c34f6d52e0b937000096f4cc58824dd2d8e8e/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FDbTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/dd1c34f6d52e0b937000096f4cc58824dd2d8e8e/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FDbTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FDbTest.java?ref=dd1c34f6d52e0b937000096f4cc58824dd2d8e8e",
      "patch": "@@ -35,6 +35,7 @@ public abstract class DbTest<T extends Application> extends ApplicationTestCase<\n     protected SQLiteDatabase db;\r\n     protected Random random;\r\n     protected final boolean inMemory;\r\n+    private boolean dontCreateApp;\r\n \r\n     public DbTest() {\r\n         this(true);\r\n@@ -51,14 +52,20 @@ public DbTest(Class<T> appClass, boolean inMemory) {\n         random = new Random();\r\n     }\r\n \r\n+    protected void dontCreateApplicationDuringSetUp() {\r\n+        dontCreateApp = true;\r\n+    }\r\n+\r\n     @Override\r\n     protected void setUp() {\r\n         try {\r\n             super.setUp();\r\n         } catch (Exception e) {\r\n             throw new RuntimeException(e);\r\n         }\r\n-        createApplication();\r\n+        if (!dontCreateApp) {\r\n+            createApplication();\r\n+        }\r\n         setUpDb();\r\n     }\r\n \r",
      "parent_sha": "59765ff7bf9d288d9f40cd742b6de847d960ad6f"
    }
  },
  {
    "oid": "486ab71119f56667659c62e6568e5f0623db25f8",
    "message": "minor",
    "date": "2011-08-01T18:21:07Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/486ab71119f56667659c62e6568e5f0623db25f8",
    "details": {
      "sha": "d9efedeb5acd91843e1a512f088a7ca5acde0620",
      "filename": "DaoBase/src/de/greenrobot/orm/AbstractDaoMaster.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/486ab71119f56667659c62e6568e5f0623db25f8/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Form%2FAbstractDaoMaster.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/486ab71119f56667659c62e6568e5f0623db25f8/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Form%2FAbstractDaoMaster.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Form%2FAbstractDaoMaster.java?ref=486ab71119f56667659c62e6568e5f0623db25f8",
      "patch": "@@ -53,18 +53,19 @@ public AbstractDaoMaster(SQLiteDatabase db) {\n     }\r\n \r\n     public <T> long insert(T entity) {\r\n-        AbstractDao<T, ?> dao = getDaoFor(entity.getClass());\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        AbstractDao<T, ?> dao = (AbstractDao<T, ?>) getDaoFor(entity.getClass());\r\n         return dao.insert(entity);\r\n     }\r\n \r\n     public <T, K> T load(Class<T> entityClass, K key) {\r\n+        @SuppressWarnings(\"unchecked\")\r\n         AbstractDao<T, K> dao = (AbstractDao<T, K>) getDaoFor(entityClass);\r\n         return dao.load(key);\r\n     }\r\n \r\n-    protected <T> AbstractDao<T, ?> getDaoFor(Class<? extends Object> entityClass) {\r\n-        @SuppressWarnings(\"unchecked\")\r\n-        AbstractDao<T, ?> dao = (AbstractDao<T, ?>) entityToDao.get(entityClass);\r\n+    protected AbstractDao<?, ?> getDaoFor(Class<? extends Object> entityClass) {\r\n+        AbstractDao<?, ?> dao = entityToDao.get(entityClass);\r\n         if (dao == null) {\r\n             throw new RuntimeException(\"No DAO registered for \" + entityClass);\r\n         }\r",
      "parent_sha": "5cbe5e778beb87206a32604c323c2d23e5386ca3"
    }
  },
  {
    "oid": "a375028ca2b8ff48c7573432e96a27e0d1c809d6",
    "message": "optimized modifier checking for Properties",
    "date": "2012-04-24T06:58:34Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/a375028ca2b8ff48c7573432e96a27e0d1c809d6",
    "details": {
      "sha": "0d146b152ab36c20050b2e90f6b750e53f62ac44",
      "filename": "DaoCore/src/de/greenrobot/dao/DaoConfig.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/a375028ca2b8ff48c7573432e96a27e0d1c809d6/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDaoConfig.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/a375028ca2b8ff48c7573432e96a27e0d1c809d6/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDaoConfig.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDaoConfig.java?ref=a375028ca2b8ff48c7573432e96a27e0d1c809d6",
      "patch": "@@ -96,9 +96,10 @@ private static Property[] reflectProperties(Class<? extends AbstractDao<?, ?>> d\n         Field[] fields = propertiesClass.getDeclaredFields();\r\n \r\n         ArrayList<Property> propertyList = new ArrayList<Property>();\r\n+        final int modifierMask = Modifier.STATIC | Modifier.PUBLIC;\r\n         for (Field field : fields) {\r\n             // There might be other fields introduced by some tools, just ignore them (see issue #28)\r\n-            if ((field.getModifiers() & Modifier.STATIC) != 0 && (field.getModifiers() & Modifier.PUBLIC) != 0) {\r\n+            if ((field.getModifiers() & modifierMask) == modifierMask) {\r\n                 Object fieldValue = field.get(null);\r\n                 if (fieldValue instanceof Property) {\r\n                     propertyList.add((Property) fieldValue);\r",
      "parent_sha": "282adc6229fd1f8b492f4fc3a6e8fcf4f9378882"
    }
  },
  {
    "oid": "8cd55dcebbd13d673e5609edd39dfa8f65fb8f30",
    "message": "Add runs to cupboard indexed test.",
    "date": "2015-09-22T10:42:23Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/8cd55dcebbd13d673e5609edd39dfa8f65fb8f30",
    "details": {
      "sha": "f27f48456c76a80bcfecf671ba46e5fde7c820e6",
      "filename": "PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/8cd55dcebbd13d673e5609edd39dfa8f65fb8f30/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/8cd55dcebbd13d673e5609edd39dfa8f65fb8f30/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java?ref=8cd55dcebbd13d673e5609edd39dfa8f65fb8f30",
      "patch": "@@ -9,12 +9,10 @@\n import de.greenrobot.performance.StringGenerator;\n import java.sql.SQLException;\n import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n import nl.qbusict.cupboard.Cupboard;\n import nl.qbusict.cupboard.CupboardBuilder;\n import nl.qbusict.cupboard.DatabaseCompartment;\n-import nl.qbusict.cupboard.QueryResultIterable;\n \n /**\n  * https://bitbucket.org/qbusict/cupboard/wiki/GettingStarted\n@@ -61,9 +59,17 @@ public void testIndexedStringEntityQuery() {\n             Log.d(TAG, \"Performance tests are disabled.\");\n             return;\n         }\n+        Log.d(TAG, \"--------Indexed Queries: Start\");\n \n-        Log.d(TAG, \"---------------Indexed Queries: Start\");\n+        for (int i = 0; i < RUNS; i++) {\n+            Log.d(TAG, \"----Run \" + (i + 1) + \" of \" + RUNS);\n+            doIndexedStringEntityQuery();\n+        }\n+\n+        Log.d(TAG, \"--------Indexed Queries: End\");\n+    }\n \n+    public void doIndexedStringEntityQuery() {\n         // set up database\n         cupboard.register(IndexedStringEntity.class);\n         DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);\n@@ -91,22 +97,18 @@ public void testIndexedStringEntityQuery() {\n         long start = System.currentTimeMillis();\n         for (int i = 0; i < INDEXED_RUNS; i++) {\n             int nextIndex = randomIndices[i];\n-            QueryResultIterable<IndexedStringEntity> query = database.query(\n+            //noinspection unused\n+            List<IndexedStringEntity> query = database.query(\n                     IndexedStringEntity.class)\n                     .withSelection(\"indexedString = ?\", fixedRandomStrings[nextIndex])\n-                    .query();\n-            //noinspection ForLoopReplaceableByForEach\n-            for (Iterator<IndexedStringEntity> iterator = query.iterator(); iterator.hasNext(); ) {\n-                // explicitly access each entity so it is reconstructed from queried data\n-                //noinspection unused\n-                IndexedStringEntity entity = iterator.next();\n-            }\n-            query.close();\n+                    .list();\n         }\n         long time = System.currentTimeMillis() - start;\n         Log.d(TAG, \"Queried for \" + INDEXED_RUNS + \" indexed entities in \" + time + \" ms\");\n \n-        Log.d(TAG, \"---------------Indexed Queries: End\");\n+        // delete all entities\n+        database.delete(IndexedStringEntity.class, \"\");\n+        Log.d(TAG, \"Deleted all entities.\");\n     }\n \n     public void testPerformance() throws Exception {",
      "parent_sha": "bf67b623c0e788a13b5394c3db4bad3654bcf8ae"
    }
  },
  {
    "oid": "e7e9585056d0e1c3c485645f15f27a590076a84e",
    "message": "JavaDoc typo",
    "date": "2016-05-23T19:28:20Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/e7e9585056d0e1c3c485645f15f27a590076a84e",
    "details": {
      "sha": "002b04baee0d4c73f11d153aa01a627196ca3e5f",
      "filename": "DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/e7e9585056d0e1c3c485645f15f27a590076a84e/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/e7e9585056d0e1c3c485645f15f27a590076a84e/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java?ref=e7e9585056d0e1c3c485645f15f27a590076a84e",
      "patch": "@@ -114,7 +114,7 @@ public String[] getNonPkColumns() {\n     }\n \n     /**\n-     * Loads and entity for the given PK.\n+     * Loads the entity for the given PK.\n      *\n      * @param key a PK value or null\n      * @return The entity or null, if no entity matched the PK value",
      "parent_sha": "bd74e5a1d31af9941bc58bbaeef8e9beeda330c8"
    }
  },
  {
    "oid": "7a76708e201698759df6e6c04f93a7a2944b7891",
    "message": "For completeness: access properties in ORMLite perf test.",
    "date": "2015-08-31T06:14:54Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/7a76708e201698759df6e6c04f93a7a2944b7891",
    "details": {
      "sha": "65ed02f61e1e7959b8264fb7654ebacc220a254e",
      "filename": "PerformanceTestOrmLite/src/de/greenrobot/performance/ormlite/PerformanceTestOrmLite.java",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/7a76708e201698759df6e6c04f93a7a2944b7891/PerformanceTestOrmLite%2Fsrc%2Fde%2Fgreenrobot%2Fperformance%2Formlite%2FPerformanceTestOrmLite.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/7a76708e201698759df6e6c04f93a7a2944b7891/PerformanceTestOrmLite%2Fsrc%2Fde%2Fgreenrobot%2Fperformance%2Formlite%2FPerformanceTestOrmLite.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/PerformanceTestOrmLite%2Fsrc%2Fde%2Fgreenrobot%2Fperformance%2Formlite%2FPerformanceTestOrmLite.java?ref=7a76708e201698759df6e6c04f93a7a2944b7891",
      "patch": "@@ -128,6 +128,24 @@ public Void call() throws Exception {\n         time = System.currentTimeMillis() - start;\n         Log.d(\"DAO\", \"ORMLite: Loaded \" + reloaded.size() + \" entities in \" + time + \"ms\");\n \n+        start = System.currentTimeMillis();\n+        for (int i = 0; i < reloaded.size(); i++) {\n+            SimpleEntityNotNull entity = reloaded.get(i);\n+            entity.getId();\n+            entity.getSimpleBoolean();\n+            entity.getSimpleByte();\n+            entity.getSimpleShort();\n+            entity.getSimpleInt();\n+            entity.getSimpleLong();\n+            entity.getSimpleFloat();\n+            entity.getSimpleDouble();\n+            entity.getSimpleString();\n+            entity.getSimpleByteArray();\n+        }\n+        time = System.currentTimeMillis() - start;\n+        Log.d(\"DAO\", \"ORMLite: Accessed properties of \" + reloaded.size() + \" entities in \" + time\n+                + \"ms\");\n+\n         System.gc();\n         Log.d(\"DAO\", \"---------------End: \" + entityCount);\n     }\n@@ -152,7 +170,8 @@ protected void runOneByOne(List<SimpleEntityNotNull> list, int count) throws SQL\n \n     public void testSemantics() {\n         try {\n-            Dao<MinimalEntity, Long> minimalDao = DaoManager.createDao(connectionSource, MinimalEntity.class);\n+            Dao<MinimalEntity, Long> minimalDao = DaoManager.createDao(connectionSource,\n+                    MinimalEntity.class);\n             MinimalEntity data = new MinimalEntity();\n             minimalDao.create(data);\n             assertNull(data.getId()); // ORMLite does not update PK after insert",
      "parent_sha": "c81e3a91e7521a4ae5b5ba27afd4de402c31e3d1"
    }
  },
  {
    "oid": "d40dc37d7d35150acc2e5648e3cc3663462d0ccf",
    "message": "added callInTxNoException",
    "date": "2012-05-10T10:14:36Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/d40dc37d7d35150acc2e5648e3cc3663462d0ccf",
    "details": {
      "sha": "664254ed1cd03ede0c95361f106cee055657a315",
      "filename": "DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java",
      "status": "modified",
      "additions": 22,
      "deletions": 2,
      "changes": 24,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/d40dc37d7d35150acc2e5648e3cc3663462d0ccf/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDaoSession.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/d40dc37d7d35150acc2e5648e3cc3663462d0ccf/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDaoSession.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDaoSession.java?ref=d40dc37d7d35150acc2e5648e3cc3663462d0ccf",
      "patch": "@@ -114,7 +114,7 @@ public <T, K> List<T> queryRaw(Class<T> entityClass, String where, String... sel\n         AbstractDao<T, K> dao = (AbstractDao<T, K>) getDao(entityClass);\r\n         return dao.queryRaw(where, selectionArgs);\r\n     }\r\n-    \r\n+\r\n     /** Convenient call for {@link AbstractDao#queryBuilder()}. */\r\n     public <T> QueryBuilder<T> queryBuilder(Class<T> entityClass) {\r\n         @SuppressWarnings(\"unchecked\")\r\n@@ -157,7 +157,27 @@ public <V> V callInTx(Callable<V> callable) throws Exception {\n             db.endTransaction();\r\n         }\r\n     }\r\n-    \r\n+\r\n+    /**\r\n+     * Like {@link #callInTx(Callable)} but does not require Exception handling (rethrows an Exception as a runtime\r\n+     * DaoException).\r\n+     */\r\n+    public <V> V callInTxNoException(Callable<V> callable) {\r\n+        db.beginTransaction();\r\n+        try {\r\n+            V result;\r\n+            try {\r\n+                result = callable.call();\r\n+            } catch (Exception e) {\r\n+                throw new DaoException(\"Callable failed\", e);\r\n+            }\r\n+            db.setTransactionSuccessful();\r\n+            return result;\r\n+        } finally {\r\n+            db.endTransaction();\r\n+        }\r\n+    }\r\n+\r\n     /** Gets the SQLiteDatabase for custom database access. Not needed for greenDAO entities. */\r\n     public SQLiteDatabase getDatabase() {\r\n         return db;\r",
      "parent_sha": "a291724a2c8b99f70fc2c6482a3f0a9445cac94a"
    }
  },
  {
    "oid": "8429248d79b2b2c7f55e2682be6fa6bce3acbcbb",
    "message": "testToOneLoadDeepNull",
    "date": "2011-10-22T14:34:53Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/8429248d79b2b2c7f55e2682be6fa6bce3acbcbb",
    "details": {
      "sha": "7df11d128fcaf3d881c775185dfb80a343510f42",
      "filename": "DaoTest/src/de/greenrobot/dao/test/RelationEntityTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/8429248d79b2b2c7f55e2682be6fa6bce3acbcbb/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FRelationEntityTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/8429248d79b2b2c7f55e2682be6fa6bce3acbcbb/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FRelationEntityTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FRelationEntityTest.java?ref=8429248d79b2b2c7f55e2682be6fa6bce3acbcbb",
      "patch": "@@ -98,6 +98,16 @@ public void testToOneLoadDeep() {\n         assertTestEntity(entity);\r\n     }\r\n \r\n+    public void testToOneLoadDeepNull() {\r\n+        RelationEntity entity = insertEntityWithRelations(42l);\r\n+        entity.setParentId(null);\r\n+        entity.setTestId(null);\r\n+        dao.update(entity);\r\n+        entity = dao.loadDeep(entity.getId());\r\n+        assertNull(entity.getParent());\r\n+        assertNull(entity.getTestEntity());\r\n+    }\r\n+\r\n     public void testQueryDeep() {\r\n         insertEntityWithRelations(42l);\r\n         String columnName = RelationEntityDao.Properties.SimpleString.columnName;\r\n@@ -136,7 +146,7 @@ protected void assertTestEntity(RelationEntity entity) {\n         assertEquals(\"mytest\", testEntity.getSimpleStringNotNull());\r\n         assertEquals(\"I'm a parent\", entity.getParent().getSimpleString());\r\n         assertEquals(entity.getParentId(), entity.getParent().getId());\r\n-        assertSame(testEntity, entity.getTestEntity());\r\n+        assertNotNull(entity.getTestNotNull());\r\n     }\r\n \r\n }\r",
      "parent_sha": "1dc7768a8a8a50f23ca5dcb9f224bf1083042483"
    }
  },
  {
    "oid": "2e86e8678f95f15b129bdd53a74d932d9cfa7224",
    "message": "extracted getConfiguration",
    "date": "2016-09-25T12:00:08Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/2e86e8678f95f15b129bdd53a74d932d9cfa7224",
    "details": {
      "sha": "bc49738ed21f2356eabf1703f1b14aa0ccbef7f5",
      "filename": "DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java",
      "status": "modified",
      "additions": 27,
      "deletions": 3,
      "changes": 30,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/2e86e8678f95f15b129bdd53a74d932d9cfa7224/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FDaoGenerator.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/2e86e8678f95f15b129bdd53a74d932d9cfa7224/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FDaoGenerator.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FDaoGenerator.java?ref=2e86e8678f95f15b129bdd53a74d932d9cfa7224",
      "patch": "@@ -30,6 +30,7 @@\n \n import freemarker.template.Configuration;\n import freemarker.template.Template;\n+import freemarker.template.TemplateNotFoundException;\n \n /**\n  * Once you have your model created, use this class to generate entities and DAOs.\n@@ -58,9 +59,7 @@ public DaoGenerator() throws IOException {\n         patternKeepFields = compilePattern(\"FIELDS\");\n         patternKeepMethods = compilePattern(\"METHODS\");\n \n-        Configuration config = new Configuration(Configuration.VERSION_2_3_23);\n-        config.setClassForTemplateLoading(this.getClass(), \"/\");\n-\n+        Configuration config = getConfiguration(\"dao.ftl\");\n         templateDao = config.getTemplate(\"dao.ftl\");\n         templateDaoMaster = config.getTemplate(\"dao-master.ftl\");\n         templateDaoSession = config.getTemplate(\"dao-session.ftl\");\n@@ -69,6 +68,31 @@ public DaoGenerator() throws IOException {\n         templateContentProvider = config.getTemplate(\"content-provider.ftl\");\n     }\n \n+    private Configuration getConfiguration(String probingTemplate) throws IOException {\n+        Configuration config = new Configuration(Configuration.VERSION_2_3_23);\n+        config.setClassForTemplateLoading(getClass(), \"/\");\n+\n+        try {\n+            config.getTemplate(probingTemplate);\n+        } catch (TemplateNotFoundException e) {\n+            // When running from an IDE like IntelliJ, class loading resources may fail for some reason (Gradle is OK)\n+\n+            // Working dir is module dir\n+            File dir = new File(\"src/main/resources/\");\n+            if (!dir.exists()) {\n+                // Working dir is base module dir\n+                dir = new File(\"DaoGenerator/src/main/resources/\");\n+            }\n+            if (dir.exists() && new File(dir, probingTemplate).exists()) {\n+                config.setDirectoryForTemplateLoading(dir);\n+                config.getTemplate(probingTemplate);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        return config;\n+    }\n+\n     private Pattern compilePattern(String sectionName) {\n         int flags = Pattern.DOTALL | Pattern.MULTILINE;\n         return Pattern.compile(\".*^\\\\s*?//\\\\s*?KEEP \" + sectionName + \".*?\\n(.*?)^\\\\s*// KEEP \" + sectionName",
      "parent_sha": "2228e8434e49f91e31076dde8cff38cb36127527"
    }
  },
  {
    "oid": "9f3a7655b575645d0af728b055d5e206bd72311c",
    "message": "fix for implementsInterface",
    "date": "2015-06-28T21:04:41Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/9f3a7655b575645d0af728b055d5e206bd72311c",
    "details": {
      "sha": "1e76deb7378587db38138e22fdeec9a963b44b99",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/Entity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/9f3a7655b575645d0af728b055d5e206bd72311c/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/9f3a7655b575645d0af728b055d5e206bd72311c/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java?ref=9f3a7655b575645d0af728b055d5e206bd72311c",
      "patch": "@@ -425,7 +425,7 @@ public List<ContentProvider> getContentProviders() {\n \n     public void implementsInterface(String... interfaces) {\n         for (String interfaceToImplement : interfaces) {\n-            if (interfaceToImplement.contains(interfaceToImplement)) {\n+            if (interfacesToImplement.contains(interfaceToImplement)) {\n                 throw new RuntimeException(\"Interface defined more than once: \" + interfaceToImplement);\n             }\n             interfacesToImplement.add(interfaceToImplement);",
      "parent_sha": "41711ec77ceaf8985ca56b3d3a7a54bd05ef66a4"
    }
  },
  {
    "oid": "f43956e5d7a4b03337e54c5027185d4f5d5197e7",
    "message": "Fixed typo.",
    "date": "2013-08-01T17:56:54Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/f43956e5d7a4b03337e54c5027185d4f5d5197e7",
    "details": {
      "sha": "3bf71021266d7e16b2dbd6041a1cecc2eaf521dc",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/f43956e5d7a4b03337e54c5027185d4f5d5197e7/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/f43956e5d7a4b03337e54c5027185d4f5d5197e7/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java?ref=f43956e5d7a4b03337e54c5027185d4f5d5197e7",
      "patch": "@@ -123,7 +123,7 @@ protected File toFileForceExists(String filename) throws IOException {\n         File file = new File(filename);\n         if (!file.exists()) {\n             throw new IOException(filename\n-                    + \" does not exist. This check is to prevent accidential file generation into a wrong path.\");\n+                    + \" does not exist. This check is to prevent accidental file generation into a wrong path.\");\n         }\n         return file;\n     }",
      "parent_sha": "465e2ef056ce2d9b5362e51bdffff8ba6bd0ed64"
    }
  },
  {
    "oid": "0f354ebcb0a65af0a55fa2ec43b47e6dda894d23",
    "message": "List count of entities for greendao access test.",
    "date": "2015-08-31T06:14:57Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/0f354ebcb0a65af0a55fa2ec43b47e6dda894d23",
    "details": {
      "sha": "57986b0fc371bb257910b8c937ca3640a414f7b4",
      "filename": "DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/0f354ebcb0a65af0a55fa2ec43b47e6dda894d23/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FPerformanceTestNotNull.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/0f354ebcb0a65af0a55fa2ec43b47e6dda894d23/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FPerformanceTestNotNull.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FPerformanceTestNotNull.java?ref=0f354ebcb0a65af0a55fa2ec43b47e6dda894d23",
      "patch": "@@ -51,7 +51,7 @@ protected void accessAll(List<SimpleEntityNotNull> list, String traceName) {\n             entity.getSimpleString();\n             entity.getSimpleByteArray();\n         }\n-        stopClock();\n+        stopClock(list.size() + \" entities\");\n     }\n \n }",
      "parent_sha": "5ae8cf23544e5d0486b5016ea792a4644d7bd660"
    }
  },
  {
    "oid": "c0e797920031e7b2ffc6a7f7a1fef3674bdd5af5",
    "message": "disable testLoadAll by default",
    "date": "2016-01-18T20:34:11Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/c0e797920031e7b2ffc6a7f7a1fef3674bdd5af5",
    "details": {
      "sha": "ae015fb2dc56b96cbebaf8ab2a19d49882999fc3",
      "filename": "DaoTest/src/de/greenrobot/daotest/DeadlockPreventionTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/c0e797920031e7b2ffc6a7f7a1fef3674bdd5af5/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDeadlockPreventionTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/c0e797920031e7b2ffc6a7f7a1fef3674bdd5af5/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDeadlockPreventionTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDeadlockPreventionTest.java?ref=c0e797920031e7b2ffc6a7f7a1fef3674bdd5af5",
      "patch": "@@ -37,7 +37,7 @@ public DeadlockPreventionTest() {\n     }\n \n     // Runs pretty long, only run manually\n-    public void testLoadAll() throws InterruptedException {\n+    public void _testLoadAll() throws InterruptedException {\n         dao = daoSession.getTestEntityDao();\n         List<TestEntity> entities = new ArrayList<>();\n         for (int i = 0; i < 10000; i++) {",
      "parent_sha": "49e84eca99db22abfd5df3bff6eb9b0514691028"
    }
  },
  {
    "oid": "cfe18346ea0ae078a7488f55ac920411c444f4ea",
    "message": "make loadAllFromCursor return an ArrayList again to allow modifications to the list\n(cherry picked from commit 49c75be)",
    "date": "2016-01-21T16:43:22Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/cfe18346ea0ae078a7488f55ac920411c444f4ea",
    "details": {
      "sha": "2d41fca821b141d21276c117918a5e914c6d40af",
      "filename": "DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/cfe18346ea0ae078a7488f55ac920411c444f4ea/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/cfe18346ea0ae078a7488f55ac920411c444f4ea/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java?ref=cfe18346ea0ae078a7488f55ac920411c444f4ea",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -37,6 +37,11 @@\n import de.greenrobot.dao.query.Query;\n import de.greenrobot.dao.query.QueryBuilder;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n /**\n  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.\n  * <p>\n@@ -360,7 +365,7 @@ protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock)\n     protected List<T> loadAllFromCursor(Cursor cursor) {\n         int count = cursor.getCount();\n         if (count == 0) {\n-            return Collections.EMPTY_LIST;\n+            return new ArrayList<T>();\n         }\n         List<T> list = new ArrayList<T>(count);\n         CursorWindow window = null;",
      "parent_sha": "f25d7731556fd3d8d682f0281035649425f7097e"
    }
  },
  {
    "oid": "a60c0d70079144e1052ca5dec0a63e689b137807",
    "message": "testDeleteAll",
    "date": "2011-10-22T14:36:19Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/a60c0d70079144e1052ca5dec0a63e689b137807",
    "details": {
      "sha": "4639622ca35f7d220f39065c566a0f641d75448d",
      "filename": "DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/a60c0d70079144e1052ca5dec0a63e689b137807/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/a60c0d70079144e1052ca5dec0a63e689b137807/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java?ref=a60c0d70079144e1052ca5dec0a63e689b137807",
      "patch": "@@ -148,20 +148,23 @@ public void testDelete() {\n     }\r\n \r\n     public void testDeleteAll() {\r\n+        List<T> entityList = new ArrayList<T>();\r\n         List<K> pkList = new ArrayList<K>();\r\n-        int LIST_SIZE = 100;\r\n+        int LIST_SIZE = 10;\r\n         for (int i = 0; i < LIST_SIZE; i++) {\r\n             K pk = nextPk();\r\n             T entity = createEntity(pk);\r\n-            dao.insert(entity);\r\n-            assertNotNull(dao.load(pk));\r\n+            entityList.add(entity);\r\n             pkList.add(pk);\r\n         }\r\n+        dao.insertInTx(entityList);\r\n+        for (K pk : pkList) {\r\n+            assertNotNull(dao.load(pk));\r\n+        }\r\n \r\n         dao.deleteAll();\r\n-\r\n-        for (int i = 0; i < LIST_SIZE; i++) {\r\n-            assertNull(dao.load(pkList.get(i)));\r\n+        for (K pk : pkList) {\r\n+            assertNull(dao.load(pk));\r\n         }\r\n     }\r\n \r",
      "parent_sha": "a7f90f88ae88c557625677391aa449783ccd27c2"
    }
  },
  {
    "oid": "1fd4b70fbb967c141fa56662c35e38e35e9de096",
    "message": "DeadlockPreventionTest: dump thread stacks when deadlock is detected",
    "date": "2015-11-04T19:46:18Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/1fd4b70fbb967c141fa56662c35e38e35e9de096",
    "details": {
      "sha": "a00f61051c31d1c34005b09b5b12e11533f49bc3",
      "filename": "DaoTest/src/de/greenrobot/daotest/DeadlockPreventionTest.java",
      "status": "modified",
      "additions": 65,
      "deletions": 18,
      "changes": 83,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/1fd4b70fbb967c141fa56662c35e38e35e9de096/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDeadlockPreventionTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/1fd4b70fbb967c141fa56662c35e38e35e9de096/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDeadlockPreventionTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDeadlockPreventionTest.java?ref=1fd4b70fbb967c141fa56662c35e38e35e9de096",
      "patch": "@@ -19,20 +19,25 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import de.greenrobot.dao.test.AbstractDaoSessionTest;\n \n+/**\n+ * Test to reproduce https://github.com/greenrobot/greenDAO/issues/223 (works at least on a Android 2.3 emulator).\n+ */\n public class DeadlockPreventionTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {\n \n-    volatile boolean done;\n+    CountDownLatch done = new CountDownLatch(1);\n     private TestEntityDao dao;\n \n     public DeadlockPreventionTest() {\n         super(DaoMaster.class);\n     }\n \n     // Runs pretty long, only run manually\n-    public void _testLoadAll() throws InterruptedException {\n+    public void testLoadAll() throws InterruptedException {\n         dao = daoSession.getTestEntityDao();\n         List<TestEntity> entities = new ArrayList<>();\n         for (int i = 0; i < 10000; i++) {\n@@ -41,28 +46,69 @@ public void _testLoadAll() throws InterruptedException {\n             entities.add(entity);\n         }\n         dao.insertInTx(entities);\n-\n         System.out.println(\"Entities inserted\");\n-        Thread thread = new InsertThread();\n-        Thread thread2 = new InsertBatchThread();\n-        thread.start();\n-        thread2.start();\n-\n-        for (int i = 0; i < 10; i++) {\n-            System.out.println(\"Starting loadAll #\" + i);\n-            dao.loadAll();\n+\n+        LoadThread loadThread = new LoadThread();\n+        InsertThread insertThread = new InsertThread();\n+        InsertBatchThread insertBatchThread = new InsertBatchThread();\n+        loadThread.start();\n+        insertThread.start();\n+        insertBatchThread.start();\n+\n+        int lastCounterInsert = insertThread.counter;\n+        int lastCounterInsertBatch = insertBatchThread.counter;\n+        int noProgressCount = 0;\n+        while (!done.await(10, TimeUnit.SECONDS)) {\n+            if (lastCounterInsert == insertThread.counter && lastCounterInsertBatch == insertBatchThread.counter) {\n+                noProgressCount++;\n+                System.err.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n+                System.err.println(\"No progress #\" + noProgressCount + \", dumping threads\");\n+                System.err.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n+                dumpStacktrace(\"LOAD\", loadThread);\n+                dumpStacktrace(\"INSERT\", insertThread);\n+                dumpStacktrace(\"INSERT BATCH\", insertBatchThread);\n+\n+                if (noProgressCount >= 3) {\n+                    // Test seems to be stuck, kill everything!\n+                    System.exit(1);\n+                }\n+            } else {\n+                lastCounterInsert = insertThread.counter;\n+                lastCounterInsertBatch = insertBatchThread.counter;\n+                noProgressCount = 0;\n+            }\n         }\n \n-        done = true;\n-        thread.join();\n-        thread2.join();\n+        loadThread.join();\n+        insertThread.join();\n+        insertBatchThread.join();\n+    }\n+\n+    private void dumpStacktrace(String name, Thread thread) {\n+        System.err.println(\"--- Thread dump of \" + name + \" ------------------------\");\n+        for (StackTraceElement element : thread.getStackTrace()) {\n+            System.err.println(element);\n+        }\n     }\n \n+    private class LoadThread extends Thread {\n+        @Override\n+        public void run() {\n+            for (int i = 0; i < 10; i++) {\n+                System.out.println(\"Starting loadAll #\" + i);\n+                dao.loadAll();\n+            }\n+            done.countDown();\n+        }\n+    }\n+\n+\n     private class InsertThread extends Thread {\n+        volatile int counter = 0;\n+\n         @Override\n         public void run() {\n-            int counter = 0;\n-            while (!done) {\n+            while (done.getCount() > 0) {\n                 TestEntity entity = new TestEntity();\n                 entity.setSimpleStringNotNull(\"TextThread\" + counter);\n                 dao.insert(entity);\n@@ -75,11 +121,12 @@ public void run() {\n     }\n \n     private class InsertBatchThread extends Thread {\n+        volatile int counter = 0;\n+\n         @Override\n         public void run() {\n-            int counter = 0;\n             List<TestEntity> batch = new ArrayList<>();\n-            while (!done) {\n+            while (done.getCount() > 0) {\n                 TestEntity entity = new TestEntity();\n                 entity.setSimpleStringNotNull(\"TextThreadBatch\" + counter);\n                 batch.add(entity);",
      "parent_sha": "326d15c3f07267445e36ee18d1bd28d4021bf634"
    }
  },
  {
    "oid": "8fe07e5dd343620241aa2f9c6c0c31980000b9a0",
    "message": "DeleteQuery also uses QueryData now",
    "date": "2013-10-11T20:20:43Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/8fe07e5dd343620241aa2f9c6c0c31980000b9a0",
    "details": {
      "sha": "1ce3d7fed5e9e1d06068779a445f511c7b53464a",
      "filename": "DaoCore/src/de/greenrobot/dao/query/DeleteQuery.java",
      "status": "modified",
      "additions": 11,
      "deletions": 19,
      "changes": 30,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/8fe07e5dd343620241aa2f9c6c0c31980000b9a0/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FDeleteQuery.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/8fe07e5dd343620241aa2f9c6c0c31980000b9a0/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FDeleteQuery.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FDeleteQuery.java?ref=8fe07e5dd343620241aa2f9c6c0c31980000b9a0",
      "patch": "@@ -29,41 +29,33 @@\n  *            The enitity class the query will delete from.\n  */\n public class DeleteQuery<T> extends AbstractQuery<T> {\n-    private final static class ThreadLocalQuery<T2> extends ThreadLocal<DeleteQuery<T2>> {\n-        private final String sql;\n-        private final AbstractDao<T2, ?> dao;\n-        private final String[] initialValues;\n+    private final static class QueryData<T2> extends AbstractQueryData<T2, DeleteQuery<T2>> {\n \n-        private ThreadLocalQuery(AbstractDao<T2, ?> dao, String sql, String[] initialValues) {\n-            this.dao = dao;\n-            this.sql = sql;\n-            this.initialValues = initialValues;\n+        private QueryData(AbstractDao<T2, ?> dao, String sql, String[] initialValues) {\n+            super(dao, sql, initialValues);\n         }\n \n         @Override\n-        protected DeleteQuery<T2> initialValue() {\n+        protected DeleteQuery<T2> createQuery() {\n             return new DeleteQuery<T2>(this, dao, sql, initialValues.clone());\n         }\n     }\n \n     static <T2> DeleteQuery<T2> create(AbstractDao<T2, ?> dao, String sql, Object[] initialValues) {\n-        ThreadLocalQuery<T2> threadLocal = new ThreadLocalQuery<T2>(dao, sql, toStringArray(initialValues));\n-        return threadLocal.get();\n+        QueryData<T2> queryData = new QueryData<T2>(dao, sql, toStringArray(initialValues));\n+        return queryData.forCurrentThread();\n     }\n \n+    private final QueryData<T> queryData;\n     private SQLiteStatement compiledStatement;\n-    private final ThreadLocalQuery<T> threadLocalQuery;\n \n-    private DeleteQuery(ThreadLocalQuery<T> threadLocalQuery, AbstractDao<T, ?> dao, String sql, String[] initialValues) {\n+    private DeleteQuery(QueryData<T> queryData, AbstractDao<T, ?> dao, String sql, String[] initialValues) {\n         super(dao, sql, initialValues);\n-        this.threadLocalQuery = threadLocalQuery;\n+        this.queryData = queryData;\n     }\n \n     public DeleteQuery<T> forCurrentThread() {\n-        DeleteQuery<T> query = threadLocalQuery.get();\n-        String[] initialValues = threadLocalQuery.initialValues;\n-        System.arraycopy(initialValues, 0, query.parameters, 0, initialValues.length);\n-        return query;\n+        return queryData.forCurrentThread(this);\n     }\n \n     /**\n@@ -89,7 +81,7 @@ public void executeDeleteWithoutDetachingEntities() {\n         }\n     }\n \n-    private synchronized void executeDeleteWithoutDetachingEntitiesInsideTx() {\n+    private void executeDeleteWithoutDetachingEntitiesInsideTx() {\n         if (compiledStatement != null) {\n             compiledStatement.clearBindings();\n         } else {",
      "parent_sha": "9e721a6140ae8bdb69973b70f6ddb1cccb668a53"
    }
  },
  {
    "oid": "1fd5a337edb91ad53439ab9828f71d7e7df63a59",
    "message": "Process.myTid() seems to have issues on some devices (see Github #376)",
    "date": "2016-08-02T18:31:59Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/1fd5a337edb91ad53439ab9828f71d7e7df63a59",
    "details": {
      "sha": "0fff9f045696edf0a113c15588680bc2d676dfb7",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/query/AbstractQueryData.java",
      "status": "modified",
      "additions": 17,
      "deletions": 19,
      "changes": 36,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/1fd5a337edb91ad53439ab9828f71d7e7df63a59/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FAbstractQueryData.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/1fd5a337edb91ad53439ab9828f71d7e7df63a59/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FAbstractQueryData.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fquery%2FAbstractQueryData.java?ref=1fd5a337edb91ad53439ab9828f71d7e7df63a59",
      "patch": "@@ -16,24 +16,25 @@\n \n package org.greenrobot.greendao.query;\n \n-import java.lang.ref.WeakReference;\n-\n-import android.os.Process;\n-import android.util.SparseArray;\n-\n import org.greenrobot.greendao.AbstractDao;\n \n+import java.lang.ref.WeakReference;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n abstract class AbstractQueryData<T, Q extends AbstractQuery<T>> {\n     final String sql;\n     final AbstractDao<T, ?> dao;\n     final String[] initialValues;\n-    final SparseArray<WeakReference<Q>> queriesForThreads;\n+    final Map<Long, WeakReference<Q>> queriesForThreads;\n \n     AbstractQueryData(AbstractDao<T, ?> dao, String sql, String[] initialValues) {\n         this.dao = dao;\n         this.sql = sql;\n         this.initialValues = initialValues;\n-        queriesForThreads = new SparseArray<WeakReference<Q>>();\n+        queriesForThreads = new HashMap<>();\n     }\n \n     /**\n@@ -53,15 +54,10 @@ Q forCurrentThread(Q query) {\n      * Note: all parameters are reset to their initial values specified in {@link QueryBuilder}.\n      */\n     Q forCurrentThread() {\n-        int threadId = Process.myTid();\n-        if (threadId == 0) {\n-            // Workaround for Robolectric, always returns 0\n-            long id = Thread.currentThread().getId();\n-            if (id < 0 || id > Integer.MAX_VALUE) {\n-                throw new RuntimeException(\"Cannot handle thread ID: \" + id);\n-            }\n-            threadId = (int) id;\n-        }\n+        // Process.myTid() seems to have issues on some devices (see Github #376) and Robolectric (#171):\n+        // We use currentThread().getId() instead (unfortunately return a long, can not use SparseArray).\n+        // PS.: thread ID may be reused, which should be fine because old thread will be gone anyway.\n+        long threadId = Thread.currentThread().getId();\n         synchronized (queriesForThreads) {\n             WeakReference<Q> queryRef = queriesForThreads.get(threadId);\n             Q query = queryRef != null ? queryRef.get() : null;\n@@ -80,9 +76,11 @@ Q forCurrentThread() {\n \n     void gc() {\n         synchronized (queriesForThreads) {\n-            for (int i = queriesForThreads.size() - 1; i >= 0; i--) {\n-                if (queriesForThreads.valueAt(i).get() == null) {\n-                    queriesForThreads.remove(queriesForThreads.keyAt(i));\n+            Iterator<Entry<Long, WeakReference<Q>>> iterator = queriesForThreads.entrySet().iterator();\n+            while (iterator.hasNext()) {\n+                Entry<Long, WeakReference<Q>> entry = iterator.next();\n+                if (entry.getValue() == null) {\n+                    iterator.remove();\n                 }\n             }\n         }",
      "parent_sha": "a48b8bcd69920da29f95c1f9b5c6879b550210e6"
    }
  },
  {
    "oid": "aa1cf1a787119fd3cea442b9734c30441cdd4a70",
    "message": "testNotEqString",
    "date": "2011-10-22T14:35:22Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/aa1cf1a787119fd3cea442b9734c30441cdd4a70",
    "details": {
      "sha": "c9aa0636f09e34ca25d5b0fdb4f01563a54bb321",
      "filename": "DaoTest/src/de/greenrobot/dao/test/QueryBuilderSimpleTest.java",
      "status": "modified",
      "additions": 42,
      "deletions": 2,
      "changes": 44,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/aa1cf1a787119fd3cea442b9734c30441cdd4a70/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FQueryBuilderSimpleTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/aa1cf1a787119fd3cea442b9734c30441cdd4a70/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FQueryBuilderSimpleTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FQueryBuilderSimpleTest.java?ref=aa1cf1a787119fd3cea442b9734c30441cdd4a70",
      "patch": "@@ -10,13 +10,53 @@ public class QueryBuilderSimpleTest extends TestEntityTestBase {\n     public void testEqInteger() {\r\n         ArrayList<TestEntity> inserted = insert(3);\r\n         int value = getSimpleInteger(1);\r\n-        \r\n+\r\n         List<TestEntity> result = dao.queryBuilder().eq(Properties.SimpleInteger, value).build().list();\r\n         assertEquals(1, result.size());\r\n-        \r\n+\r\n         TestEntity resultEntity = result.get(0);\r\n         assertEquals(value, (int) resultEntity.getSimpleInteger());\r\n         assertEquals(inserted.get(1).getId(), resultEntity.getId());\r\n     }\r\n \r\n+    public void testEqString() {\r\n+        ArrayList<TestEntity> inserted = insert(3);\r\n+        String value = getSimpleString(1);\r\n+\r\n+        List<TestEntity> result = dao.queryBuilder().eq(Properties.SimpleString, value).build().list();\r\n+        assertEquals(1, result.size());\r\n+\r\n+        TestEntity resultEntity = result.get(0);\r\n+        assertEquals(value, resultEntity.getSimpleString());\r\n+        assertEquals(inserted.get(1).getId(), resultEntity.getId());\r\n+    }\r\n+\r\n+    public void testEqStringAndInteger() {\r\n+        ArrayList<TestEntity> inserted = insert(3);\r\n+        String valueStr = getSimpleString(1);\r\n+        int valueInt = getSimpleInteger(1);\r\n+\r\n+        List<TestEntity> result = dao.queryBuilder().eq(Properties.SimpleString, valueStr)\r\n+                .eq(Properties.SimpleInteger, valueInt).build().list();\r\n+        assertEquals(1, result.size());\r\n+\r\n+        TestEntity resultEntity = result.get(0);\r\n+        assertEquals(inserted.get(1).getId(), resultEntity.getId());\r\n+    }\r\n+\r\n+    public void testNotEqString() {\r\n+        ArrayList<TestEntity> inserted = insert(3);\r\n+        String value = getSimpleString(1);\r\n+\r\n+        List<TestEntity> result = dao.queryBuilder().notEq(Properties.SimpleString, value).build().list();\r\n+        assertEquals(2, result.size());\r\n+\r\n+        TestEntity resultEntity1 = result.get(0);\r\n+        TestEntity resultEntity2 = result.get(1);\r\n+        long loId = Math.min(resultEntity1.getId(), resultEntity2.getId());\r\n+        long hiId = Math.max(resultEntity1.getId(), resultEntity2.getId());\r\n+        assertEquals((long) inserted.get(0).getId(), loId);\r\n+        assertEquals((long) inserted.get(2).getId(), hiId);\r\n+    }\r\n+\r\n }\r",
      "parent_sha": "cc7f5b5be48cdfb50dda633340812a8294dc49a8"
    }
  },
  {
    "oid": "ac7a1e06af6deae8b6d889abdd32a7a5b238494b",
    "message": "index bug fix within gc",
    "date": "2013-10-14T20:39:19Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/ac7a1e06af6deae8b6d889abdd32a7a5b238494b",
    "details": {
      "sha": "7a4736eceb6ea7474b4f07e21e0768e8abb28ad2",
      "filename": "DaoCore/src/de/greenrobot/dao/query/AbstractQueryData.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/ac7a1e06af6deae8b6d889abdd32a7a5b238494b/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FAbstractQueryData.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/ac7a1e06af6deae8b6d889abdd32a7a5b238494b/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FAbstractQueryData.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FAbstractQueryData.java?ref=ac7a1e06af6deae8b6d889abdd32a7a5b238494b",
      "patch": "@@ -49,8 +49,7 @@ Q forCurrentThread() {\n \n     void gc() {\n         synchronized (queriesForThreads) {\n-            int size = queriesForThreads.size();\n-            for (int i = 0; i < size; i++) {\n+            for (int i = queriesForThreads.size() - 1; i >= 0; i--) {\n                 if (queriesForThreads.valueAt(i).get() == null) {\n                     queriesForThreads.remove(queriesForThreads.keyAt(i));\n                 }",
      "parent_sha": "5f0acc16222cf9bcff76972c17d1320849ad2fce"
    }
  },
  {
    "oid": "20b254b7b18bef7a4a9cb823322d3b81fd8ff0a3",
    "message": "javadoc to mark internal property used by templates",
    "date": "2015-06-28T17:32:51Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/20b254b7b18bef7a4a9cb823322d3b81fd8ff0a3",
    "details": {
      "sha": "d635c3642ad5483f1d47a3ab3d02b266f74cff74",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/Entity.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/20b254b7b18bef7a4a9cb823322d3b81fd8ff0a3/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/20b254b7b18bef7a4a9cb823322d3b81fd8ff0a3/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java?ref=20b254b7b18bef7a4a9cb823322d3b81fd8ff0a3",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * This file is part of greenDAO Generator.\n  * \n@@ -314,14 +314,17 @@ public void setJavaPackageTest(String javaPackageTest) {\n         this.javaPackageTest = javaPackageTest;\n     }\n \n+    /** Internal property used by templates, don't use during entity definition. */\n     public List<Property> getPropertiesPk() {\n         return propertiesPk;\n     }\n \n+    /** Internal property used by templates, don't use during entity definition. */\n     public List<Property> getPropertiesNonPk() {\n         return propertiesNonPk;\n     }\n \n+    /** Internal property used by templates, don't use during entity definition. */\n     public Property getPkProperty() {\n         return pkProperty;\n     }\n@@ -330,6 +333,7 @@ public List<Index> getIndexes() {\n         return indexes;\n     }\n \n+    /** Internal property used by templates, don't use during entity definition. */\n     public String getPkType() {\n         return pkType;\n     }",
      "parent_sha": "5434a1c1559a3bff3f0ca6b1dcb602877444200a"
    }
  },
  {
    "oid": "bf67b623c0e788a13b5394c3db4bad3654bcf8ae",
    "message": "Add runs to Active Android indexed test.",
    "date": "2015-09-22T10:42:22Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/bf67b623c0e788a13b5394c3db4bad3654bcf8ae",
    "details": {
      "sha": "b00f88df30eb4556dd8448e80f101da27d712329",
      "filename": "PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/PerformanceTestActiveAndroid.java",
      "status": "modified",
      "additions": 19,
      "deletions": 6,
      "changes": 25,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/bf67b623c0e788a13b5394c3db4bad3654bcf8ae/PerformanceTests%2FActiveAndroid%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Factiveandroid%2FPerformanceTestActiveAndroid.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/bf67b623c0e788a13b5394c3db4bad3654bcf8ae/PerformanceTests%2FActiveAndroid%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Factiveandroid%2FPerformanceTestActiveAndroid.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/PerformanceTests%2FActiveAndroid%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Factiveandroid%2FPerformanceTestActiveAndroid.java?ref=bf67b623c0e788a13b5394c3db4bad3654bcf8ae",
      "patch": "@@ -20,8 +20,8 @@ public class PerformanceTestActiveAndroid extends ApplicationTestCase<Applicatio\n     private static final String TAG = \"PerfTestActiveAndroid\";\n \n     private static final int BATCH_SIZE = 10000;\n+    private static final int QUERY_COUNT = 1000;\n     private static final int RUNS = 8;\n-    private static final int INDEXED_RUNS = 1000;\n \n     private static final String DATABASE_NAME = \"active-android.db\";\n \n@@ -52,9 +52,17 @@ public void testIndexedStringEntityQuery() {\n             Log.d(TAG, \"Performance tests are disabled.\");\n             return;\n         }\n+        Log.d(TAG, \"--------Indexed Queries: Start\");\n \n-        Log.d(TAG, \"---------------Indexed Queries: Start\");\n+        for (int i = 0; i < RUNS; i++) {\n+            Log.d(TAG, \"----Run \" + (i + 1) + \" of \" + RUNS);\n+            doIndexedStringEntityQuery();\n+        }\n+\n+        Log.d(TAG, \"--------Indexed Queries: End\");\n+    }\n \n+    private void doIndexedStringEntityQuery() {\n         // set up database\n         Configuration dbConfiguration = new Configuration.Builder(getContext())\n                 .setDatabaseName(DATABASE_NAME)\n@@ -86,21 +94,26 @@ public void testIndexedStringEntityQuery() {\n         Log.d(TAG, \"Inserted entities.\");\n \n         // query for entities by indexed string at random\n-        int[] randomIndices = StringGenerator.getFixedRandomIndices(INDEXED_RUNS, BATCH_SIZE - 1);\n+        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);\n \n         long start = System.currentTimeMillis();\n-        for (int i = 0; i < INDEXED_RUNS; i++) {\n+        for (int i = 0; i < QUERY_COUNT; i++) {\n             int nextIndex = randomIndices[i];\n+            //noinspection unused\n             List<IndexedStringEntity> query = new Select()\n                     .from(IndexedStringEntity.class)\n                     .where(\"INDEXED_STRING = ?\", fixedRandomStrings[nextIndex])\n                     .execute();\n             // ActiveAndroid already builds all entities when executing the query, so move on\n         }\n         long time = System.currentTimeMillis() - start;\n-        Log.d(TAG, \"Queried for \" + INDEXED_RUNS + \" indexed entities in \" + time + \" ms\");\n+        Log.d(TAG,\n+                \"Queried for \" + QUERY_COUNT + \" of \" + BATCH_SIZE + \" indexed entities in \" + time\n+                        + \" ms.\");\n \n-        Log.d(TAG, \"---------------Indexed Queries: End\");\n+        // delete all entities\n+        ActiveAndroid.execSQL(\"DELETE FROM INDEXED_STRING_ENTITY\");\n+        Log.d(TAG, \"Deleted all entities.\");\n     }\n \n     public void testPerformance() throws Exception {",
      "parent_sha": "2f043f48daa8fa821994b115e6c92e5aa7b6e2e9"
    }
  },
  {
    "oid": "b05d37485289b93841d7a082aeaa20ec34605e8e",
    "message": "minor JavaDoc",
    "date": "2016-07-13T20:33:14Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/b05d37485289b93841d7a082aeaa20ec34605e8e",
    "details": {
      "sha": "f96bccf691342a11e1aaa1c2a6b36b49747ca1a6",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/test/AbstractDaoTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/b05d37485289b93841d7a082aeaa20ec34605e8e/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Ftest%2FAbstractDaoTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/b05d37485289b93841d7a082aeaa20ec34605e8e/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Ftest%2FAbstractDaoTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Ftest%2FAbstractDaoTest.java?ref=b05d37485289b93841d7a082aeaa20ec34605e8e",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,7 +27,7 @@\n import org.greenrobot.greendao.identityscope.IdentityScope;\n \n /**\n- * Base class for DAO related testing. Prepares an in-memory DB and DAO.\n+ * Base class for DAO related testing without any tests. Prepares an in-memory DB and DAO.\n  * \n  * @author Markus\n  * ",
      "parent_sha": "6f23481c2f790babda4782d7c4e0517452a68b87"
    }
  },
  {
    "oid": "bf81fff8a53039d071e37eecf3af37529a2a4e8c",
    "message": "Added second thread tests to QueryThreadLocalTest",
    "date": "2013-02-12T20:23:54Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/bf81fff8a53039d071e37eecf3af37529a2a4e8c",
    "details": {
      "sha": "a44fb2d58e282261dbdec826e7dfcf5bc8d4e160",
      "filename": "DaoTest/src/de/greenrobot/daotest/query/QueryThreadLocalTest.java",
      "status": "modified",
      "additions": 80,
      "deletions": 1,
      "changes": 81,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/bf81fff8a53039d071e37eecf3af37529a2a4e8c/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryThreadLocalTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/bf81fff8a53039d071e37eecf3af37529a2a4e8c/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryThreadLocalTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryThreadLocalTest.java?ref=bf81fff8a53039d071e37eecf3af37529a2a4e8c",
      "patch": "@@ -17,12 +17,15 @@\n  */\n package de.greenrobot.daotest.query;\n \n+import de.greenrobot.dao.DaoException;\n import de.greenrobot.dao.Query;\n+import de.greenrobot.dao.QueryBuilder;\n import de.greenrobot.daotest.TestEntity;\n import de.greenrobot.daotest.TestEntityDao.Properties;\n import de.greenrobot.daotest.entity.TestEntityTestBase;\n \n public class QueryThreadLocalTest extends TestEntityTestBase {\n+    private Query<TestEntity> queryFromOtherThread;\n \n     public void testGetForCurrentThread_SameInstance() {\n         Query<TestEntity> query = dao.queryBuilder().build();\n@@ -41,5 +44,81 @@ public void testGetForCurrentThread_ParametersAreReset() {\n         assertEquals(value, (int) entityFor1.getSimpleInteger());\n     }\n \n-    // TODO more tests\n+    public void testGetForCurrentThread_TwoThreads() throws InterruptedException {\n+        insert(3);\n+        createQueryFromOtherThread();\n+        Query<TestEntity> query = queryFromOtherThread.forCurrentThread();\n+        assertNotSame(queryFromOtherThread, query);\n+        query.setLimit(10);\n+        query.setOffset(0);\n+        assertEquals(getSimpleInteger(1), (int) query.uniqueOrThrow().getSimpleInteger());\n+        int expected = getSimpleInteger(2);\n+        query.setParameter(0, expected);\n+        assertEquals(expected, (int) query.list().get(0).getSimpleInteger());\n+        assertEquals(expected, (int) query.listLazy().get(0).getSimpleInteger());\n+        assertEquals(expected, (int) query.listLazyUncached().get(0).getSimpleInteger());\n+        assertEquals(expected, (int) query.unique().getSimpleInteger());\n+        assertEquals(expected, (int) query.uniqueOrThrow().getSimpleInteger());\n+    }\n+\n+    public void testThrowOutsideOwnerThread() throws InterruptedException {\n+        createQueryFromOtherThread();\n+        try {\n+            queryFromOtherThread.list();\n+            fail(\"Did not throw\");\n+        } catch (DaoException expected) {\n+        }\n+        try {\n+            queryFromOtherThread.listIterator();\n+            fail(\"Did not throw\");\n+        } catch (DaoException expected) {\n+        }\n+        try {\n+            queryFromOtherThread.listLazyUncached();\n+            fail(\"Did not throw\");\n+        } catch (DaoException expected) {\n+        }\n+        try {\n+            queryFromOtherThread.setLimit(2);\n+            fail(\"Did not throw\");\n+        } catch (DaoException expected) {\n+        }\n+        try {\n+            queryFromOtherThread.setOffset(2);\n+            fail(\"Did not throw\");\n+        } catch (DaoException expected) {\n+        }\n+        try {\n+            queryFromOtherThread.setParameter(0, 42);\n+            fail(\"Did not throw\");\n+        } catch (DaoException expected) {\n+        }\n+        try {\n+            queryFromOtherThread.unique();\n+            fail(\"Did not throw\");\n+        } catch (DaoException expected) {\n+        }\n+        try {\n+            queryFromOtherThread.uniqueOrThrow();\n+            fail(\"Did not throw\");\n+        } catch (DaoException expected) {\n+        }\n+    }\n+\n+    private void createQueryFromOtherThread() throws InterruptedException {\n+        Thread thread = new Thread() {\n+\n+            @Override\n+            public void run() {\n+                QueryBuilder<TestEntity> builder = dao.queryBuilder();\n+                builder.where(Properties.SimpleInteger.eq(getSimpleInteger(1)));\n+                builder.limit(10).offset(20);\n+                queryFromOtherThread = builder.build();\n+            }\n+        };\n+        thread.start();\n+        thread.join();\n+        assertNotNull(queryFromOtherThread);\n+    }\n+\n }",
      "parent_sha": "b7e9c23580518d2405cfc42e9ed9923840fff3e4"
    }
  },
  {
    "oid": "713896f0b8b18856e8f9f1771644ec618c813005",
    "message": "Use transactions for Couchbase, add batch test.\n\n- Turns out there are transactions for Couchbase (though nowhere mentioned in the docs, found out by accident), so add batch tests and measure again!",
    "date": "2015-09-22T10:42:25Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/713896f0b8b18856e8f9f1771644ec618c813005",
    "details": {
      "sha": "2876ca47651ea127598e21e3a1df8a44a6b214bb",
      "filename": "PerformanceTests/Couchbase/src/androidTest/java/de/greenrobot/performance/couchbase/PerformanceTestCouchbase.java",
      "status": "modified",
      "additions": 43,
      "deletions": 7,
      "changes": 50,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/713896f0b8b18856e8f9f1771644ec618c813005/PerformanceTests%2FCouchbase%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcouchbase%2FPerformanceTestCouchbase.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/713896f0b8b18856e8f9f1771644ec618c813005/PerformanceTests%2FCouchbase%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcouchbase%2FPerformanceTestCouchbase.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/PerformanceTests%2FCouchbase%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcouchbase%2FPerformanceTestCouchbase.java?ref=713896f0b8b18856e8f9f1771644ec618c813005",
      "patch": "@@ -25,7 +25,7 @@ public class PerformanceTestCouchbase extends ApplicationTestCase<Application> {\n \n     private static final String TAG = \"PerfTestCouchbase\";\n \n-    private static final int BATCH_SIZE = 1000;\n+    private static final int BATCH_SIZE = 10000;\n     private static final int RUNS = 8;\n \n     private static final String DB_NAME = \"couchbase-test\";\n@@ -78,28 +78,33 @@ protected void runTests(int entityCount) throws Exception {\n \n         long start, time;\n \n-        // In Couchbase there is no such thing as batching,\n-        // each document has to be created on its own.\n-        // Hence we can only measure one-by-one creation time.\n-\n         // precreate property maps for documents\n         List<Map<String, Object>> maps = new ArrayList<>(entityCount);\n         for (int i = 0; i < entityCount; i++) {\n             maps.add(createDocumentMap(i));\n         }\n+        System.gc();\n+\n+        runOneByOne(maps, entityCount / 10);\n+\n+        System.gc();\n+        deleteAll();\n \n         start = System.currentTimeMillis();\n         List<Document> documents = new ArrayList<>(entityCount);\n+        database.beginTransaction();\n         for (int i = 0; i < entityCount; i++) {\n             // use our own ids (use .createDocument() for random UUIDs)\n             Document document = database.getDocument(String.valueOf(i));\n             document.putProperties(maps.get(i));\n             documents.add(document);\n         }\n+        database.endTransaction(true);\n         time = System.currentTimeMillis() - start;\n-        Log.d(TAG, \"Created (one-by-one) \" + documents.size() + \" entities in \" + time + \" ms\");\n+        Log.d(TAG, \"Created (batch) \" + BATCH_SIZE + \" entities in \" + time + \" ms\");\n \n         start = System.currentTimeMillis();\n+        database.beginTransaction();\n         for (int i = 0; i < entityCount; i++) {\n             Document document = documents.get(i);\n             Map<String, Object> updatedProperties = new HashMap<>();\n@@ -108,8 +113,9 @@ protected void runTests(int entityCount) throws Exception {\n             updatedProperties.putAll(maps.get(i));\n             document.putProperties(updatedProperties);\n         }\n+        database.endTransaction(true);\n         time = System.currentTimeMillis() - start;\n-        Log.d(TAG, \"Updated (one-by-one) \" + documents.size() + \" entities in \" + time + \" ms\");\n+        Log.d(TAG, \"Updated (batch) \" + BATCH_SIZE + \" entities in \" + time + \" ms\");\n \n         start = System.currentTimeMillis();\n         List<Document> reloaded = new ArrayList<>();\n@@ -144,15 +150,45 @@ protected void runTests(int entityCount) throws Exception {\n         Log.d(TAG, \"---------------End: \" + entityCount);\n     }\n \n+    private void runOneByOne(List<Map<String, Object>> maps, int count)\n+            throws CouchbaseLiteException {\n+        long start;\n+        long time;\n+        start = System.currentTimeMillis();\n+        List<Document> documents = new ArrayList<>(count);\n+        for (int i = 0; i < count; i++) {\n+            // use our own ids (use .createDocument() for random UUIDs)\n+            Document document = database.getDocument(String.valueOf(i));\n+            document.putProperties(maps.get(i));\n+            documents.add(document);\n+        }\n+        time = System.currentTimeMillis() - start;\n+        Log.d(TAG, \"Inserted (one-by-one) \" + count + \" entities in \" + time + \" ms\");\n+\n+        start = System.currentTimeMillis();\n+        for (int i = 0; i < count; i++) {\n+            Document document = documents.get(i);\n+            Map<String, Object> updatedProperties = new HashMap<>();\n+            // copy existing properties to get _rev property\n+            updatedProperties.putAll(document.getProperties());\n+            updatedProperties.putAll(maps.get(i));\n+            document.putProperties(updatedProperties);\n+        }\n+        time = System.currentTimeMillis() - start;\n+        Log.d(TAG, \"Updated (one-by-one) \" + count + \" entities in \" + time + \" ms\");\n+    }\n+\n     protected void deleteAll() throws CouchbaseLiteException {\n         long start = System.currentTimeMillis();\n         // query all documents, mark them as deleted\n         Query query = database.createAllDocumentsQuery();\n         QueryEnumerator result = query.run();\n+        database.beginTransaction();\n         while (result.hasNext()) {\n             QueryRow row = result.next();\n             row.getDocument().delete();\n         }\n+        database.endTransaction(true);\n         long time = System.currentTimeMillis() - start;\n         Log.d(TAG, \"Deleted all entities in \" + time + \" ms\");\n     }",
      "parent_sha": "1fb18d9dd16df9e69d941f23a4a1050734e0735c"
    }
  },
  {
    "oid": "3573354653ccc6b3eac9bd4c169a48cb7a62cb77",
    "message": "avoid creating multiple statements in concurrent situations",
    "date": "2016-03-13T11:58:00Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/3573354653ccc6b3eac9bd4c169a48cb7a62cb77",
    "details": {
      "sha": "876c53edded80c8b955ec732f540485aa5504d88",
      "filename": "DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java",
      "status": "modified",
      "additions": 29,
      "deletions": 13,
      "changes": 42,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/3573354653ccc6b3eac9bd4c169a48cb7a62cb77/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/3573354653ccc6b3eac9bd4c169a48cb7a62cb77/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java?ref=3573354653ccc6b3eac9bd4c169a48cb7a62cb77",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,10 +25,10 @@ public class TableStatements {\n     private final String[] allColumns;\n     private final String[] pkColumns;\n \n-    private SQLiteStatement insertStatement;\n-    private SQLiteStatement insertOrReplaceStatement;\n-    private SQLiteStatement updateStatement;\n-    private SQLiteStatement deleteStatement;\n+    private volatile SQLiteStatement insertStatement;\n+    private volatile SQLiteStatement insertOrReplaceStatement;\n+    private volatile SQLiteStatement updateStatement;\n+    private volatile SQLiteStatement deleteStatement;\n \n     private volatile String selectAll;\n     private volatile String selectByKey;\n@@ -44,32 +44,48 @@ public TableStatements(SQLiteDatabase db, String tablename, String[] allColumns,\n \n     public SQLiteStatement getInsertStatement() {\n         if (insertStatement == null) {\n-            String sql = SqlUtils.createSqlInsert(\"INSERT INTO \", tablename, allColumns);\n-            insertStatement = db.compileStatement(sql);\n+            synchronized (this) {\n+                if (insertStatement == null) {\n+                    String sql = SqlUtils.createSqlInsert(\"INSERT INTO \", tablename, allColumns);\n+                    insertStatement = db.compileStatement(sql);\n+                }\n+            }\n         }\n         return insertStatement;\n     }\n \n     public SQLiteStatement getInsertOrReplaceStatement() {\n         if (insertOrReplaceStatement == null) {\n-            String sql = SqlUtils.createSqlInsert(\"INSERT OR REPLACE INTO \", tablename, allColumns);\n-            insertOrReplaceStatement = db.compileStatement(sql);\n+            synchronized (this) {\n+                if (insertOrReplaceStatement == null) {\n+                    String sql = SqlUtils.createSqlInsert(\"INSERT OR REPLACE INTO \", tablename, allColumns);\n+                    insertOrReplaceStatement = db.compileStatement(sql);\n+                }\n+            }\n         }\n         return insertOrReplaceStatement;\n     }\n \n     public SQLiteStatement getDeleteStatement() {\n         if (deleteStatement == null) {\n-            String sql = SqlUtils.createSqlDelete(tablename, pkColumns);\n-            deleteStatement = db.compileStatement(sql);\n+            synchronized (this) {\n+                if (deleteStatement == null) {\n+                    String sql = SqlUtils.createSqlDelete(tablename, pkColumns);\n+                    deleteStatement = db.compileStatement(sql);\n+                }\n+            }\n         }\n         return deleteStatement;\n     }\n \n     public SQLiteStatement getUpdateStatement() {\n         if (updateStatement == null) {\n-            String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);\n-            updateStatement = db.compileStatement(sql);\n+            synchronized (this) {\n+                if (updateStatement == null) {\n+                    String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);\n+                    updateStatement = db.compileStatement(sql);\n+                }\n+            }\n         }\n         return updateStatement;\n     }",
      "parent_sha": "96308484c70f518ae8b1df1ef82240db2640a255"
    }
  },
  {
    "oid": "afd7f199b61727f14e92f66fa8d0f5c462a8cf58",
    "message": "regenerate SimpleEntityContentProvider to fix compilation",
    "date": "2016-03-31T14:42:49Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/afd7f199b61727f14e92f66fa8d0f5c462a8cf58",
    "details": {
      "sha": "1a177585de8367166189c09f689c0e1237d673d6",
      "filename": "DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityContentProvider.java",
      "status": "modified",
      "additions": 43,
      "deletions": 41,
      "changes": 84,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/afd7f199b61727f14e92f66fa8d0f5c462a8cf58/DaoTest%2Fsrc-gen%2Fde%2Fgreenrobot%2Fdaotest%2FSimpleEntityContentProvider.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/afd7f199b61727f14e92f66fa8d0f5c462a8cf58/DaoTest%2Fsrc-gen%2Fde%2Fgreenrobot%2Fdaotest%2FSimpleEntityContentProvider.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc-gen%2Fde%2Fgreenrobot%2Fdaotest%2FSimpleEntityContentProvider.java?ref=afd7f199b61727f14e92f66fa8d0f5c462a8cf58",
      "patch": "@@ -5,11 +5,12 @@\n import android.content.ContentValues;\n import android.content.UriMatcher;\n import android.database.Cursor;\n-import android.database.sqlite.SQLiteDatabase;\n import android.database.sqlite.SQLiteQueryBuilder;\n import android.net.Uri;\n \n import de.greenrobot.dao.DaoLog;\n+import de.greenrobot.dao.database.AndroidSQLiteDatabase;\n+import de.greenrobot.dao.database.Database;\n \n import de.greenrobot.daotest.SimpleEntityDao;\n \n@@ -22,50 +23,51 @@\n \n public class SimpleEntityContentProvider extends ContentProvider {\n \n-    public static final String AUTHORITY = \"de.greenrobot.daotest\";\n-    public static final String BASE_PATH = \"SimpleEntity\";\n+    public static final String AUTHORITY = \"de.greenrobot.daotest.provider\";\n+    public static final String BASE_PATH = \"\";\n     public static final Uri CONTENT_URI = Uri.parse(\"content://\" + AUTHORITY + \"/\" + BASE_PATH);\n     public static final String CONTENT_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE\n             + \"/\" + BASE_PATH;\n     public static final String CONTENT_ITEM_TYPE = ContentResolver.CURSOR_ITEM_BASE_TYPE\n             + \"/\" + BASE_PATH;\n-            \n+\n     private static final String TABLENAME = SimpleEntityDao.TABLENAME;\n-    private static final String PK = SimpleEntityDao.Properties.Id.columnName;\n+    private static final String PK = SimpleEntityDao.Properties.Id\n+            .columnName;\n \n     private static final int SIMPLEENTITY_DIR = 0;\n     private static final int SIMPLEENTITY_ID = 1;\n \n     private static final UriMatcher sURIMatcher;\n-     \n+\n     static {\n-        sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);      \n+        sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n         sURIMatcher.addURI(AUTHORITY, BASE_PATH, SIMPLEENTITY_DIR);\n         sURIMatcher.addURI(AUTHORITY, BASE_PATH + \"/#\", SIMPLEENTITY_ID);\n     }\n-    \n-    /** \n-    * This must be set from outside, it's recommended to do this inside your Application object.\n-    * Subject to change (static isn't nice).\n-    */\n+\n+    /**\n+     * This must be set from outside, it's recommended to do this inside your Application object.\n+     * Subject to change (static isn't nice).\n+     */\n     public static DaoSession daoSession;\n-    \n+\n     @Override\n     public boolean onCreate() {\n         // if(daoSession == null) {\n-        //     throw new IllegalStateException(\"DaoSession must be set before content provider is created\");\n+        // throw new IllegalStateException(\"DaoSession must be set before content provider is created\");\n         // }\n         DaoLog.d(\"Content Provider started: \" + CONTENT_URI);\n         return true;\n     }\n-    \n-    protected SQLiteDatabase getDatabase() {\n-        if(daoSession == null) {\n+\n+    protected Database getDatabase() {\n+        if (daoSession == null) {\n             throw new IllegalStateException(\"DaoSession must be set during content provider is active\");\n         }\n         return daoSession.getDatabase();\n     }\n-        \n+\n     @Override\n     public Uri insert(Uri uri, ContentValues values) {\n         throw new UnsupportedOperationException(\"This content provider is readonly\");\n@@ -75,49 +77,49 @@ public Uri insert(Uri uri, ContentValues values) {\n     public int delete(Uri uri, String selection, String[] selectionArgs) {\n         throw new UnsupportedOperationException(\"This content provider is readonly\");\n     }\n-    \n+\n     @Override\n     public int update(Uri uri, ContentValues values, String selection,\n-            String[] selectionArgs) {\n+                      String[] selectionArgs) {\n         throw new UnsupportedOperationException(\"This content provider is readonly\");\n     }\n- \n+\n     @Override\n     public Cursor query(Uri uri, String[] projection, String selection,\n-            String[] selectionArgs, String sortOrder) {\n+                        String[] selectionArgs, String sortOrder) {\n \n         SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();\n         int uriType = sURIMatcher.match(uri);\n         switch (uriType) {\n-        case SIMPLEENTITY_DIR:\n-            queryBuilder.setTables(TABLENAME);\n-            break;\n-        case SIMPLEENTITY_ID:\n-            queryBuilder.setTables(TABLENAME);\n-            queryBuilder.appendWhere(PK + \"=\"\n-                    + uri.getLastPathSegment());\n-            break;\n-        default:\n-            throw new IllegalArgumentException(\"Unknown URI: \" + uri);\n+            case SIMPLEENTITY_DIR:\n+                queryBuilder.setTables(TABLENAME);\n+                break;\n+            case SIMPLEENTITY_ID:\n+                queryBuilder.setTables(TABLENAME);\n+                queryBuilder.appendWhere(PK + \"=\"\n+                        + uri.getLastPathSegment());\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown URI: \" + uri);\n         }\n \n-        SQLiteDatabase db = getDatabase();\n-        Cursor cursor = queryBuilder.query(db, projection, selection,\n+        Database db = getDatabase();\n+        Cursor cursor = queryBuilder.query(((AndroidSQLiteDatabase) db).getSQLiteDatabase(), projection, selection,\n                 selectionArgs, null, null, sortOrder);\n         cursor.setNotificationUri(getContext().getContentResolver(), uri);\n \n         return cursor;\n     }\n-    \n+\n     @Override\n     public final String getType(Uri uri) {\n         switch (sURIMatcher.match(uri)) {\n-        case SIMPLEENTITY_DIR:\n-            return CONTENT_TYPE;\n-        case SIMPLEENTITY_ID:\n-            return CONTENT_ITEM_TYPE;\n-        default :\n-            throw new IllegalArgumentException(\"Unsupported URI: \" + uri);\n+            case SIMPLEENTITY_DIR:\n+                return CONTENT_TYPE;\n+            case SIMPLEENTITY_ID:\n+                return CONTENT_ITEM_TYPE;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported URI: \" + uri);\n         }\n     }\n }",
      "parent_sha": "29061973380548972028de7dada0342a5a4cad58"
    }
  },
  {
    "oid": "eb6bbcb2c8aa72618aae28df7da5e28646ade6e6",
    "message": "renamed to QuerySpecialNamesTest (missing Test suffix)",
    "date": "2012-04-17T13:05:07Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/eb6bbcb2c8aa72618aae28df7da5e28646ade6e6",
    "details": {
      "sha": "34a0c44562241d93434338efa61e8850b4d32c70",
      "filename": "DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNamesTest.java",
      "status": "renamed",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/eb6bbcb2c8aa72618aae28df7da5e28646ade6e6/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQuerySpecialNamesTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/eb6bbcb2c8aa72618aae28df7da5e28646ade6e6/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQuerySpecialNamesTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQuerySpecialNamesTest.java?ref=eb6bbcb2c8aa72618aae28df7da5e28646ade6e6",
      "patch": "@@ -23,11 +23,10 @@\n import de.greenrobot.daotest.SpecialNamesEntityDao;\r\n import de.greenrobot.daotest.SpecialNamesEntityDao.Properties;\r\n \r\n-public class QuerySpecialNames extends  AbstractDaoTest<SpecialNamesEntityDao, SpecialNamesEntity, Long> {\r\n+public class QuerySpecialNamesTest extends  AbstractDaoTest<SpecialNamesEntityDao, SpecialNamesEntity, Long> {\r\n     \r\n-    public QuerySpecialNames() {\r\n+    public QuerySpecialNamesTest() {\r\n         super(SpecialNamesEntityDao.class);\r\n-        // TODO Auto-generated constructor stub\r\n     }\r\n \r\n     @Override\r",
      "previous_filename": "DaoTest/src/de/greenrobot/daotest/query/QuerySpecialNames.java",
      "parent_sha": "15a141c6438d9a1d2d8739ac2c523ed47559d97f"
    }
  },
  {
    "oid": "20169144092bba5c769f52622987e2f236e348fa",
    "message": "added testConcurrentQueryDuringTx: Query doesn't involve any statement\nlocking currently, but just to stay on the safe side...",
    "date": "2013-02-08T21:44:05Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/20169144092bba5c769f52622987e2f236e348fa",
    "details": {
      "sha": "5f439242686779270132762cbb026b3a82e4bd4b",
      "filename": "DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java",
      "status": "modified",
      "additions": 27,
      "deletions": 2,
      "changes": 29,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/20169144092bba5c769f52622987e2f236e348fa/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/20169144092bba5c769f52622987e2f236e348fa/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java?ref=20169144092bba5c769f52622987e2f236e348fa",
      "patch": "@@ -7,6 +7,7 @@\n import android.database.sqlite.SQLiteStatement;\n import android.os.SystemClock;\n import de.greenrobot.dao.DaoLog;\n+import de.greenrobot.dao.Query;\n import de.greenrobot.dao.test.AbstractDaoSessionTest;\n \n public class DaoSessionConcurrentTest extends AbstractDaoSessionTest<Application, DaoMaster, DaoSession> {\n@@ -31,7 +32,7 @@ public void run() {\n \n     }\n \n-    private final static int TIME_TO_WAIT_FOR_THREAD = 1000; // Use 1000 to be on the safe side, 100 once stable\n+    private final static int TIME_TO_WAIT_FOR_THREAD = 100; // Use 1000 to be on the safe side, 100 once stable\n \n     private TestEntityDao dao;\n \n@@ -145,7 +146,7 @@ public void run() {\n         });\n         latchThreadsDone.await();\n     }\n-    \n+\n     public void testConcurrentDeleteDuringTx() throws InterruptedException {\n         final TestEntity entity = createEntity(null);\n         dao.insert(entity);\n@@ -184,6 +185,30 @@ public void run() {\n         latchThreadsDone.await();\n     }\n \n+    // Query doesn't involve any statement locking currently, but just to stay on the safe side...\n+    public void testConcurrentQueryDuringTx() throws InterruptedException {\n+        final TestEntity entity = createEntity(null);\n+        dao.insert(entity);\n+        final Query<TestEntity> query = dao.queryBuilder().build();\n+        Runnable runnable1 = new Runnable() {\n+            @Override\n+            public void run() {\n+                query.list();\n+            }\n+        };\n+\n+        initThreads(runnable1);\n+        // Builds the statement so it is ready immediately in the thread\n+        query.list();\n+        doTx(new Runnable() {\n+            @Override\n+            public void run() {\n+                query.list();\n+            }\n+        });\n+        latchThreadsDone.await();\n+    }\n+\n     /**\n      * We could put the statements inside ThreadLocals (fast enough), but it comes with initialization penalty for new\n      * threads and costs more memory.",
      "parent_sha": "afd51a0bef9a9bb7768fa74566f6778d5ef5982e"
    }
  },
  {
    "oid": "6ed29c7484957a79ae78873222bfb42ceec42dfd",
    "message": "minor javadoc change",
    "date": "2016-04-25T15:12:56Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/6ed29c7484957a79ae78873222bfb42ceec42dfd",
    "details": {
      "sha": "b040a03ac92cd26e0fde140247881975bebcb272",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/annotations/ToMany.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/6ed29c7484957a79ae78873222bfb42ceec42dfd/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fannotations%2FToMany.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/6ed29c7484957a79ae78873222bfb42ceec42dfd/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fannotations%2FToMany.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fannotations%2FToMany.java?ref=6ed29c7484957a79ae78873222bfb42ceec42dfd",
      "patch": "@@ -11,6 +11,6 @@\n @Retention(RetentionPolicy.SOURCE)\n @Target(ElementType.FIELD)\n public @interface ToMany {\n-    /** Name of the property in target entity which holds id of the source (current) entity */\n+    /** Name of the property inside the target entity which holds id of the source (current) entity */\n     String mappedBy();\n }",
      "parent_sha": "bc1048c5e1b851a66de273dade196c79821978ff"
    }
  },
  {
    "oid": "7e1848e27c94d5ebd18ee1cb007f5ad0ae4ed4e3",
    "message": "check executeInsert for -1",
    "date": "2012-06-10T10:14:55Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/7e1848e27c94d5ebd18ee1cb007f5ad0ae4ed4e3",
    "details": {
      "sha": "af01658a3db3280a4b95d34f64cf472a971fba7f",
      "filename": "DaoCore/src/de/greenrobot/dao/AbstractDao.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/7e1848e27c94d5ebd18ee1cb007f5ad0ae4ed4e3/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/7e1848e27c94d5ebd18ee1cb007f5ad0ae4ed4e3/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java?ref=7e1848e27c94d5ebd18ee1cb007f5ad0ae4ed4e3",
      "patch": "@@ -310,8 +310,13 @@ private long executeInsert(T entity, SQLiteStatement stmt) {\n     }\r\n \r\n     protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock) {\r\n-        K key = updateKeyAfterInsert(entity, rowId);\r\n-        attachEntity(key, entity, lock);\r\n+        if (rowId != -1) {\r\n+            K key = updateKeyAfterInsert(entity, rowId);\r\n+            attachEntity(key, entity, lock);\r\n+        } else {\r\n+            // TODO When does this actually happen? Should we throw instead?\r\n+            DaoLog.w(\"Could not insert row (executeInsert returned -1)\");\r\n+        }\r\n     }\r\n \r\n     /** Reads all available rows from the given cursor and returns a list of entities. */\r",
      "parent_sha": "bb522d9719aad055bd78e81b6aaf6f142eb44fd5"
    }
  },
  {
    "oid": "86cfd1fbcb6783b6aaac656d315d92fa39912388",
    "message": "nullable update tests",
    "date": "2011-08-01T17:35:46Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/86cfd1fbcb6783b6aaac656d315d92fa39912388",
    "details": {
      "sha": "94a1f1171f186e40106962b51b5afa893df72e2e",
      "filename": "DaoTest/src/de/greenrobot/dao/test/SimpleEntityTest.java",
      "status": "modified",
      "additions": 69,
      "deletions": 24,
      "changes": 93,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/86cfd1fbcb6783b6aaac656d315d92fa39912388/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FSimpleEntityTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/86cfd1fbcb6783b6aaac656d315d92fa39912388/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FSimpleEntityTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FSimpleEntityTest.java?ref=86cfd1fbcb6783b6aaac656d315d92fa39912388",
      "patch": "@@ -26,47 +26,92 @@ public void testValuesNull() {\n         assertNotSame(entity, reloaded);\r\n \r\n         assertEquals(entity.getId(), reloaded.getId());\r\n-        assertNull(reloaded.getSimpleBoolean());\r\n-        assertNull(reloaded.getSimpleDouble());\r\n-        assertNull(reloaded.getSimpleFloat());\r\n-        assertNull(reloaded.getSimpleLong());\r\n-        assertNull(reloaded.getSimpleByte());\r\n-        assertNull(reloaded.getSimpleInt());\r\n-        assertNull(reloaded.getSimpleShort());\r\n-        assertNull(reloaded.getSimpleBoolean());\r\n-        assertNull(reloaded.getSimpleString());\r\n-        assertNull(reloaded.getSimpleByteArray());\r\n+        assertValuesNull(reloaded);\r\n     }\r\n \r\n     public void testValues() {\r\n         SimpleEntity entity = createEntity(1l);\r\n+        setValues(entity);\r\n+        dao.insert(entity);\r\n+        SimpleEntity reloaded = dao.load(1l);\r\n+        assertNotSame(entity, reloaded);\r\n+        assertValues(reloaded);\r\n+    }\r\n \r\n-        entity.setSimpleBoolean(true);\r\n-        entity.setSimpleByte    (Byte.MAX_VALUE);\r\n-        entity.setSimpleShort   (Short.MAX_VALUE);\r\n-        entity.setSimpleInt     (Integer.MAX_VALUE);\r\n-        entity.setSimpleLong    (Long.MAX_VALUE);\r\n-        entity.setSimpleFloat   (Float.MAX_VALUE);\r\n-        entity.setSimpleDouble  (Double.MAX_VALUE);\r\n-        entity.setSimpleString(\"greenrobot greenDAO\");\r\n-        byte[] bytes = { 42, -17, 23, 0, 127, -128 };\r\n-        entity.setSimpleByteArray(bytes);\r\n-\r\n+    public void testUpdateValues() {\r\n+        SimpleEntity entity = createEntity(1l);\r\n         dao.insert(entity);\r\n+        entity = dao.load(1l);\r\n+        setValues(entity);\r\n+        dao.update(entity);\r\n+        SimpleEntity reloaded = dao.load(1l);\r\n+        assertNotSame(entity, reloaded);\r\n+        assertValues(reloaded);\r\n+    }\r\n \r\n+    public void testUpdateValuesToNull() {\r\n+        SimpleEntity entity = createEntity(1l);\r\n+        setValues(entity);\r\n+        dao.insert(entity);\r\n+        entity = dao.load(1l);\r\n+        assertValues(entity);\r\n+        setValuesToNull(entity);\r\n+        dao.update(entity);\r\n         SimpleEntity reloaded = dao.load(1l);\r\n         assertNotSame(entity, reloaded);\r\n+        assertValuesNull(reloaded);\r\n+    }\r\n \r\n+    protected void assertValues(SimpleEntity reloaded) {\r\n         assertEquals(1l, (long) reloaded.getId());\r\n-        assertEquals(true, (boolean)reloaded.getSimpleBoolean());\r\n+        assertEquals(true, (boolean) reloaded.getSimpleBoolean());\r\n         assertEquals(Double.MAX_VALUE, reloaded.getSimpleDouble());\r\n         assertEquals(Float.MAX_VALUE, reloaded.getSimpleFloat());\r\n         assertEquals(Long.MAX_VALUE, (long) reloaded.getSimpleLong());\r\n-        assertEquals(Byte.MAX_VALUE,  (byte) reloaded.getSimpleByte());\r\n+        assertEquals(Byte.MAX_VALUE, (byte) reloaded.getSimpleByte());\r\n         assertEquals(Integer.MAX_VALUE, (int) reloaded.getSimpleInt());\r\n         assertEquals(Short.MAX_VALUE, (short) reloaded.getSimpleShort());\r\n-        assertEquals(\"greenrobot greenDAO\",  reloaded.getSimpleString());\r\n+        assertEquals(\"greenrobot greenDAO\", reloaded.getSimpleString());\r\n+        byte[] bytes = { 42, -17, 23, 0, 127, -128 };\r\n         assertTrue(Arrays.equals(bytes, reloaded.getSimpleByteArray()));\r\n     }\r\n \r\n+    protected void setValues(SimpleEntity entity) {\r\n+        entity.setSimpleBoolean(true);\r\n+        entity.setSimpleByte(Byte.MAX_VALUE);\r\n+        entity.setSimpleShort(Short.MAX_VALUE);\r\n+        entity.setSimpleInt(Integer.MAX_VALUE);\r\n+        entity.setSimpleLong(Long.MAX_VALUE);\r\n+        entity.setSimpleFloat(Float.MAX_VALUE);\r\n+        entity.setSimpleDouble(Double.MAX_VALUE);\r\n+        entity.setSimpleString(\"greenrobot greenDAO\");\r\n+        byte[] bytes = { 42, -17, 23, 0, 127, -128 };\r\n+        entity.setSimpleByteArray(bytes);\r\n+    }\r\n+\r\n+    protected void setValuesToNull(SimpleEntity entity) {\r\n+        entity.setSimpleBoolean(null);\r\n+        entity.setSimpleByte(null);\r\n+        entity.setSimpleShort(null);\r\n+        entity.setSimpleInt(null);\r\n+        entity.setSimpleLong(null);\r\n+        entity.setSimpleFloat(null);\r\n+        entity.setSimpleDouble(null);\r\n+        entity.setSimpleString(null);\r\n+        entity.setSimpleByteArray(null);\r\n+    }\r\n+\r\n+    protected void assertValuesNull(SimpleEntity reloaded) {\r\n+        assertNull(reloaded.getSimpleBoolean());\r\n+        assertNull(reloaded.getSimpleDouble());\r\n+        assertNull(reloaded.getSimpleFloat());\r\n+        assertNull(reloaded.getSimpleLong());\r\n+        assertNull(reloaded.getSimpleByte());\r\n+        assertNull(reloaded.getSimpleInt());\r\n+        assertNull(reloaded.getSimpleShort());\r\n+        assertNull(reloaded.getSimpleBoolean());\r\n+        assertNull(reloaded.getSimpleString());\r\n+        assertNull(reloaded.getSimpleByteArray());\r\n+    }\r\n+\r\n }\r",
      "parent_sha": "d26c9c4fed5eed00b03f267e35a70604a8d5b364"
    }
  },
  {
    "oid": "b94b223387f815941b485d68ded43a471ac1bf52",
    "message": "typo",
    "date": "2015-09-30T19:43:48Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/b94b223387f815941b485d68ded43a471ac1bf52",
    "details": {
      "sha": "49f17a7313a12c0cb4e394c0f1a05d12273f04f3",
      "filename": "DaoCore/src/main/java/de/greenrobot/dao/query/WhereCondition.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/b94b223387f815941b485d68ded43a471ac1bf52/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FWhereCondition.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/b94b223387f815941b485d68ded43a471ac1bf52/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FWhereCondition.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FWhereCondition.java?ref=b94b223387f815941b485d68ded43a471ac1bf52",
      "patch": "@@ -99,7 +99,7 @@ private static Object checkValueForType(Property property, Object value) {\n                         return 0;\n                     } else {\n                         throw new DaoException(\n-                                \"Illegal boolean value: Strings must be \\\"TRUE\\\" or \\\"FALSE\\\" (case insesnsitive), but was \"\n+                                \"Illegal boolean value: Strings must be \\\"TRUE\\\" or \\\"FALSE\\\" (case insensitive), but was \"\n                                         + value);\n                     }\n                 }",
      "parent_sha": "da0cae47f655626623925777bee4cd6e02fdeba5"
    }
  },
  {
    "oid": "e002b2c4750ba1ff5551d2cb8a2fd07e2aadaf5f",
    "message": "removed org.apache.commons.lang3.RandomStringUtils",
    "date": "2015-11-05T21:10:23Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/e002b2c4750ba1ff5551d2cb8a2fd07e2aadaf5f",
    "details": {
      "sha": "3fd8790241ef9821a5956874c39bda8442185f55",
      "filename": "DaoTest/src/de/greenrobot/daotest/performance/StringGenerator.java",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/e002b2c4750ba1ff5551d2cb8a2fd07e2aadaf5f/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FStringGenerator.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/e002b2c4750ba1ff5551d2cb8a2fd07e2aadaf5f/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FStringGenerator.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FStringGenerator.java?ref=e002b2c4750ba1ff5551d2cb8a2fd07e2aadaf5f",
      "patch": "@@ -1,7 +1,6 @@\n package de.greenrobot.daotest.performance;\n \n import java.util.Random;\n-import org.apache.commons.lang3.RandomStringUtils;\n \n /**\n  * Helper class to generate a pre-determined set of random strings.\n@@ -13,9 +12,9 @@ public class StringGenerator {\n     private static final int MIN_LENGTH = 5;\n     private static final int MAX_LENGTH = 500;\n     // limit to a fixed set of chars\n-    private static final char[] CHARS = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8',\n+    private static final char[] CHARS = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8',\n             '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n-            'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n+            'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n \n     /**\n      * Creates the same random sequence of strings.\n@@ -30,10 +29,12 @@ public static String[] createFixedRandomStrings(int count) {\n         stringRandom.setSeed(SEED);\n \n         for (int i = 0; i < count; i++) {\n-            int nextLength = lengthRandom.nextInt(MAX_LENGTH - MIN_LENGTH - 1);\n-            nextLength += MIN_LENGTH;\n-            strings[i] = RandomStringUtils.random(nextLength, 0, CHARS.length, true, true, CHARS,\n-                    stringRandom);\n+            int nextLength = MIN_LENGTH + lengthRandom.nextInt(MAX_LENGTH - MIN_LENGTH - 1);\n+            char[] chars = new char[nextLength];\n+            for (int j = 0; j < nextLength; j++) {\n+                chars[j] = CHARS[stringRandom.nextInt(CHARS.length)];\n+            }\n+            strings[i] = new String(chars);\n         }\n         return strings;\n     }",
      "parent_sha": "e0fc5daf0062f22777d1f6a99149e313a168efbc"
    }
  },
  {
    "oid": "d294e81b27fe774bba27079675bd5a85dbf834f9",
    "message": "Actually query for strings in Active Android test.",
    "date": "2015-09-22T10:42:21Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/d294e81b27fe774bba27079675bd5a85dbf834f9",
    "details": {
      "sha": "6f57e79e9903a76ae180bebb33f129bb6f20ec28",
      "filename": "PerformanceTests/ActiveAndroid/src/androidTest/java/de/greenrobot/performance/activeandroid/PerformanceTestActiveAndroid.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/d294e81b27fe774bba27079675bd5a85dbf834f9/PerformanceTests%2FActiveAndroid%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Factiveandroid%2FPerformanceTestActiveAndroid.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/d294e81b27fe774bba27079675bd5a85dbf834f9/PerformanceTests%2FActiveAndroid%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Factiveandroid%2FPerformanceTestActiveAndroid.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/PerformanceTests%2FActiveAndroid%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Factiveandroid%2FPerformanceTestActiveAndroid.java?ref=d294e81b27fe774bba27079675bd5a85dbf834f9",
      "patch": "@@ -93,7 +93,7 @@ public void testIndexedStringEntityQuery() {\n             int nextIndex = randomIndices[i];\n             List<IndexedStringEntity> query = new Select()\n                     .from(IndexedStringEntity.class)\n-                    .where(\"INDEXED_STRING = ?\", nextIndex)\n+                    .where(\"INDEXED_STRING = ?\", fixedRandomStrings[nextIndex])\n                     .execute();\n             // ActiveAndroid already builds all entities when executing the query, so move on\n         }",
      "parent_sha": "d0f56e2f4dedf47028f44540604c27e6ddf736a0"
    }
  },
  {
    "oid": "bb522d9719aad055bd78e81b6aaf6f142eb44fd5",
    "message": "fixed createEntityWithRandomPk: create collision free PKs",
    "date": "2012-06-10T08:33:39Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/bb522d9719aad055bd78e81b6aaf6f142eb44fd5",
    "details": {
      "sha": "ce3d450f901ee1cb9ed06dfd222f67c20c61f448",
      "filename": "DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/bb522d9719aad055bd78e81b6aaf6f142eb44fd5/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/bb522d9719aad055bd78e81b6aaf6f142eb44fd5/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java?ref=bb522d9719aad055bd78e81b6aaf6f142eb44fd5",
      "patch": "@@ -288,6 +288,7 @@ protected Cursor queryWithDummyColumnsInFront(int dummyCount, String valueForCol\n         return cursor;\r\n     }\r\n \r\n+    /** Provides a collision free PK () not returned before in the current test. */\r\n     protected K nextPk() {\r\n         for (int i = 0; i < 100000; i++) {\r\n             K pk = createRandomPk();\r\n@@ -299,7 +300,7 @@ protected K nextPk() {\n     }\r\n \r\n     protected T createEntityWithRandomPk() {\r\n-        return createEntity(createRandomPk());\r\n+        return createEntity(nextPk());\r\n     }\r\n \r\n     /** K does not have to be collision free, check nextPk for collision free PKs. */\r",
      "parent_sha": "5af7bd47a375b31e4ba765f9d7abc60ac167406c"
    }
  },
  {
    "oid": "ddcef55a80d1113064a2ce141a27bad8d6c6777f",
    "message": "improved testInsertOrReplaceInTx",
    "date": "2012-04-29T20:45:15Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/ddcef55a80d1113064a2ce141a27bad8d6c6777f",
    "details": {
      "sha": "dc0f6d49b7c64f31f841d3d41d6b02a2f0919a81",
      "filename": "DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/ddcef55a80d1113064a2ce141a27bad8d6c6777f/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/ddcef55a80d1113064a2ce141a27bad8d6c6777f/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Ftest%2FAbstractDaoTestSinglePk.java?ref=ddcef55a80d1113064a2ce141a27bad8d6c6777f",
      "patch": "@@ -140,16 +140,21 @@ public void testInsertOrReplaceTwice() {\n         long rowId2 = dao.insertOrReplace(entity);\r\n         assertEquals(rowId1, rowId2);\r\n     }\r\n-    \r\n+\r\n     public void testInsertOrReplaceInTx() {\r\n         dao.deleteAll();\r\n-        List<T> list = new ArrayList<T>();\r\n+        List<T> listPartial = new ArrayList<T>();\r\n+        List<T> listAll = new ArrayList<T>();\r\n         for (int i = 0; i < 20; i++) {\r\n-            list.add(createEntityWithRandomPk());\r\n+            T entity = createEntityWithRandomPk();\r\n+            if (i % 2 == 0) {\r\n+                listPartial.add(entity);\r\n+            }\r\n+            listAll.add(entity);\r\n         }\r\n-        dao.insertOrReplaceInTx(list);\r\n-        dao.insertOrReplaceInTx(list);\r\n-        assertEquals(list.size(), dao.count());\r\n+        dao.insertOrReplaceInTx(listPartial);\r\n+        dao.insertOrReplaceInTx(listAll);\r\n+        assertEquals(listAll.size(), dao.count());\r\n     }\r\n \r\n     public void testDelete() {\r",
      "parent_sha": "45e599460137da4dbcc46086ce83423e0ff1d819"
    }
  },
  {
    "oid": "282adc6229fd1f8b492f4fc3a6e8fcf4f9378882",
    "message": "Refelected Properties must be public also (issue #28)",
    "date": "2012-04-24T06:51:04Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/282adc6229fd1f8b492f4fc3a6e8fcf4f9378882",
    "details": {
      "sha": "7e106366e4d4fcda04a19e4c9bb5a6e11f2f498c",
      "filename": "DaoCore/src/de/greenrobot/dao/DaoConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/282adc6229fd1f8b492f4fc3a6e8fcf4f9378882/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDaoConfig.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/282adc6229fd1f8b492f4fc3a6e8fcf4f9378882/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDaoConfig.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FDaoConfig.java?ref=282adc6229fd1f8b492f4fc3a6e8fcf4f9378882",
      "patch": "@@ -98,7 +98,7 @@ private static Property[] reflectProperties(Class<? extends AbstractDao<?, ?>> d\n         ArrayList<Property> propertyList = new ArrayList<Property>();\r\n         for (Field field : fields) {\r\n             // There might be other fields introduced by some tools, just ignore them (see issue #28)\r\n-            if ((field.getModifiers() & Modifier.STATIC) != 0) {\r\n+            if ((field.getModifiers() & Modifier.STATIC) != 0 && (field.getModifiers() & Modifier.PUBLIC) != 0) {\r\n                 Object fieldValue = field.get(null);\r\n                 if (fieldValue instanceof Property) {\r\n                     propertyList.add((Property) fieldValue);\r",
      "parent_sha": "5b3260fa3dc90896139ec014cb96ffd689f331f7"
    }
  },
  {
    "oid": "35fe9a492fe4102c728eef43daa6c3937dbf643e",
    "message": "DeleteQuery: Don't use tableName here because it causes trouble when table name ends with tablePrefix.",
    "date": "2013-11-26T22:39:54Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/35fe9a492fe4102c728eef43daa6c3937dbf643e",
    "details": {
      "sha": "fdd58004f470bc7f4e5a53a73a07961b408fc480",
      "filename": "DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/35fe9a492fe4102c728eef43daa6c3937dbf643e/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FQueryBuilder.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/35fe9a492fe4102c728eef43daa6c3937dbf643e/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FQueryBuilder.java?ref=35fe9a492fe4102c728eef43daa6c3937dbf643e",
      "patch": "@@ -307,7 +307,11 @@ public DeleteQuery<T> buildDelete() {\n         String tablename = dao.getTablename();\n         String baseSql = SqlUtils.createSqlDelete(tablename, null);\n         StringBuilder builder = new StringBuilder(baseSql);\n-        appendWhereClause(builder, tablename);\n+\n+        // tablePrefix gets replaced by table name below. Don't use tableName here because it causes trouble when\n+        // table name ends with tablePrefix.\n+        appendWhereClause(builder, tablePrefix);\n+\n         String sql = builder.toString();\n \n         // Remove table aliases, not supported for DELETE queries.",
      "parent_sha": "12ea6eab57a12d499ab49a59ba5acc2b340be308"
    }
  },
  {
    "oid": "b75c1c23bcc587eeb26541bb30e1757d388ff19d",
    "message": "fix join entity is not imported into dao",
    "date": "2016-05-31T11:41:45Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/b75c1c23bcc587eeb26541bb30e1757d388ff19d",
    "details": {
      "sha": "41e63229fd18a4b40ebc1778a3911cbe46f92fdd",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/Entity.java",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/b75c1c23bcc587eeb26541bb30e1757d388ff19d/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/b75c1c23bcc587eeb26541bb30e1757d388ff19d/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java?ref=b75c1c23bcc587eeb26541bb30e1757d388ff19d",
      "patch": "@@ -632,16 +632,22 @@ private void init3rdPassAdditionalImports() {\n             Entity targetEntity = toOne.getTargetEntity();\n             checkAdditionalImportsEntityTargetEntity(targetEntity);\n             // For deep loading\n-            if (!targetEntity.getJavaPackage().equals(javaPackageDao)) {\n-                additionalImportsDao.add(targetEntity.getJavaPackage() + \".\" + targetEntity.getClassName());\n-            }\n+            checkAdditionalImportsDaoTargetEntity(targetEntity);\n         }\n \n         for (ToManyBase toMany : toManyRelations) {\n             Entity targetEntity = toMany.getTargetEntity();\n             checkAdditionalImportsEntityTargetEntity(targetEntity);\n         }\n \n+        for (ToManyBase incomingToMany : incomingToManyRelations) {\n+            if (incomingToMany instanceof ToManyWithJoinEntity) {\n+                final ToManyWithJoinEntity toManyWithJoinEntity = (ToManyWithJoinEntity) incomingToMany;\n+                final Entity joinEntity = toManyWithJoinEntity.getJoinEntity();\n+                checkAdditionalImportsDaoTargetEntity(joinEntity);\n+            }\n+        }\n+\n         for (Property property : properties) {\n             String customType = property.getCustomType();\n             if (customType != null) {\n@@ -674,6 +680,12 @@ private void checkAdditionalImportsEntityTargetEntity(Entity targetEntity) {\n         }\n     }\n \n+    private void checkAdditionalImportsDaoTargetEntity(Entity targetEntity) {\n+        if (!targetEntity.getJavaPackage().equals(javaPackageDao)) {\n+            additionalImportsDao.add(targetEntity.getJavaPackage() + \".\" + targetEntity.getClassName());\n+        }\n+    }\n+\n     public void validatePropertyExists(Property property) {\n         if (!properties.contains(property)) {\n             throw new RuntimeException(\"Property \" + property + \" does not exist in \" + this);",
      "parent_sha": "a9e78c94ebcc0070bb3bb42f77ad9ed5ae1bdbd9"
    }
  },
  {
    "oid": "af59c986223df02dbcbafffe4277417a63ac72a4",
    "message": "Support @ToOne without foreign key",
    "date": "2016-04-25T15:13:39Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/af59c986223df02dbcbafffe4277417a63ac72a4",
    "details": {
      "sha": "1bd7c5ca02aee8cdda5bade6ff5f785421a66883",
      "filename": "DaoCore/src/main/java/org/greenrobot/greendao/annotations/ToOne.java",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/af59c986223df02dbcbafffe4277417a63ac72a4/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fannotations%2FToOne.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/af59c986223df02dbcbafffe4277417a63ac72a4/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fannotations%2FToOne.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fannotations%2FToOne.java?ref=af59c986223df02dbcbafffe4277417a63ac72a4",
      "patch": "@@ -11,6 +11,20 @@\n @Retention(RetentionPolicy.SOURCE)\n @Target(ElementType.FIELD)\n public @interface ToOne {\n-    /** Name of the property which holds the key */\n-    String foreignKey();\n+    /**\n+     * Name of the property inside the current entity which holds the key of related entity\n+     * You should specify either foreignKey or {@link #mappedBy}\n+     */\n+    String foreignKey() default \"\";\n+\n+    /**\n+     * Name of the property inside the target entity which holds id of the source (current) entity\n+     * You should specify either {@link #foreignKey} or mappedBy\n+     */\n+    String mappedBy() default \"\";\n+\n+    /**\n+     * Whether the relation is unique. Applicable only if {@link #mappedBy} is in use\n+     */\n+    boolean unique() default false;\n }",
      "parent_sha": "6ed29c7484957a79ae78873222bfb42ceec42dfd"
    }
  },
  {
    "oid": "0d67e3dd616f7f54df02b22c4b688465a17d87ac",
    "message": "DaoGenerator: set freemarker incompatible improvements to 2.3.29.\n\nConfiguration does not appear to document breaking changes.",
    "date": "2020-02-18T14:12:32Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/0d67e3dd616f7f54df02b22c4b688465a17d87ac",
    "details": {
      "sha": "0726e163d6b62273496d26efbcc1bb656b92dff2",
      "filename": "DaoGenerator/src/org/greenrobot/greendao/generator/DaoGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/0d67e3dd616f7f54df02b22c4b688465a17d87ac/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FDaoGenerator.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/0d67e3dd616f7f54df02b22c4b688465a17d87ac/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FDaoGenerator.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2FDaoGenerator.java?ref=0d67e3dd616f7f54df02b22c4b688465a17d87ac",
      "patch": "@@ -69,7 +69,7 @@ public DaoGenerator() throws IOException {\n     }\n \n     private Configuration getConfiguration(String probingTemplate) throws IOException {\n-        Configuration config = new Configuration(Configuration.VERSION_2_3_23);\n+        Configuration config = new Configuration(Configuration.VERSION_2_3_29);\n         config.setClassForTemplateLoading(getClass(), \"/\");\n \n         try {",
      "parent_sha": "36acaa4179cf70cef4285c273000b7dab18f145d"
    }
  },
  {
    "oid": "25908b4aba7bf8a21010a8fb60d9b34a641e3b12",
    "message": "fix and reactivate testConcurrentLockAndQueryDuringTx",
    "date": "2015-09-30T20:37:58Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/25908b4aba7bf8a21010a8fb60d9b34a641e3b12",
    "details": {
      "sha": "e243c4c585468ea370361a1787e4f74908c61f1e",
      "filename": "DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/25908b4aba7bf8a21010a8fb60d9b34a641e3b12/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/25908b4aba7bf8a21010a8fb60d9b34a641e3b12/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java?ref=25908b4aba7bf8a21010a8fb60d9b34a641e3b12",
      "patch": "@@ -5,6 +5,7 @@\n import android.database.sqlite.SQLiteDatabase;\n import android.database.sqlite.SQLiteStatement;\n import android.os.SystemClock;\n+\n import de.greenrobot.dao.DaoLog;\n import de.greenrobot.dao.query.DeleteQuery;\n import de.greenrobot.dao.query.Query;\n@@ -209,17 +210,14 @@ public void run() {\n         latchThreadsDone.await();\n     }\n \n-    // No connection for read can be acquired while TX is active; this will deadlock!\n-    public void _testConcurrentLockAndQueryDuringTx() throws InterruptedException {\n+    public void testConcurrentLockAndQueryDuringTx() throws InterruptedException {\n         final TestEntity entity = createEntity(null);\n         dao.insert(entity);\n         final Query<TestEntity> query = dao.queryBuilder().build();\n         Runnable runnable1 = new Runnable() {\n             @Override\n             public void run() {\n-                synchronized (query) {\n-                    query.list();\n-                }\n+                query.forCurrentThread().list();\n             }\n         };\n \n@@ -229,9 +227,7 @@ public void run() {\n         doTx(new Runnable() {\n             @Override\n             public void run() {\n-                synchronized (query) {\n-                    query.list();\n-                }\n+                query.list();\n             }\n         });\n         latchThreadsDone.await();",
      "parent_sha": "0b65e85b3422d1a7b12507a1afbb657a9c1b5ee8"
    }
  },
  {
    "oid": "77a0107fbebdca1ee1c38f35fd6858bec5a2c579",
    "message": "fix async queries",
    "date": "2015-09-10T20:22:26Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/77a0107fbebdca1ee1c38f35fd6858bec5a2c579",
    "details": {
      "sha": "6e3b277a47cb3444545b06759255ade41b6628f9",
      "filename": "DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/77a0107fbebdca1ee1c38f35fd6858bec5a2c579/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fasync%2FAsyncOperationExecutor.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/77a0107fbebdca1ee1c38f35fd6858bec5a2c579/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fasync%2FAsyncOperationExecutor.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fasync%2FAsyncOperationExecutor.java?ref=77a0107fbebdca1ee1c38f35fd6858bec5a2c579",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -308,10 +308,10 @@ private void executeOperation(AsyncOperation operation) {\n                     executeTransactionCallable(operation);\n                     break;\n                 case QueryList:\n-                    operation.result = ((Query) operation.parameter).list();\n+                    operation.result = ((Query) operation.parameter).forCurrentThread().list();\n                     break;\n                 case QueryUnique:\n-                    operation.result = ((Query) operation.parameter).unique();\n+                    operation.result = ((Query) operation.parameter).forCurrentThread().unique();\n                     break;\n                 case DeleteByKey:\n                     operation.dao.deleteByKey(operation.parameter);",
      "parent_sha": "f065315ecea8e244f83f5f70287f2b1e2a85fce6"
    }
  },
  {
    "oid": "61719531977a5f0c8f5095095bc1cb07dde49fa9",
    "message": "added testOrderRaw",
    "date": "2012-02-10T20:23:19Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/61719531977a5f0c8f5095095bc1cb07dde49fa9",
    "details": {
      "sha": "4eaba9014634378ad4b70ec549f940229c14abcd",
      "filename": "DaoTest/src/de/greenrobot/daotest/query/QueryBuilderOrderTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/61719531977a5f0c8f5095095bc1cb07dde49fa9/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryBuilderOrderTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/61719531977a5f0c8f5095095bc1cb07dde49fa9/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryBuilderOrderTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryBuilderOrderTest.java?ref=61719531977a5f0c8f5095095bc1cb07dde49fa9",
      "patch": "@@ -92,21 +92,28 @@ public void testOrderUmlauts() {\n         assertEquals(entityUE.getId(), result.get(2).getId());\r\n         assertEquals(entityV.getId(), result.get(3).getId());\r\n     }\r\n-    \r\n+\r\n     public void testOrderCustom() {\r\n         List<TestEntity> list = new ArrayList<TestEntity>();\r\n         TestEntity entityAA = addEntity(list, \"Aa\");\r\n         TestEntity entityAB = addEntity(list, \"ab\");\r\n         TestEntity entityAC = addEntity(list, \"Ac\");\r\n         dao.insertInTx(list);\r\n \r\n-        List<TestEntity> result = dao.queryBuilder().orderCustom(Properties.SimpleString,\"ASC\").list();\r\n+        List<TestEntity> result = dao.queryBuilder().orderCustom(Properties.SimpleString, \"ASC\").list();\r\n         assertEquals(list.size(), result.size());\r\n         assertEquals(entityAA.getId(), result.get(0).getId());\r\n         assertEquals(entityAC.getId(), result.get(1).getId());\r\n         assertEquals(entityAB.getId(), result.get(2).getId());\r\n     }\r\n \r\n+    public void testOrderRaw() {\r\n+        ArrayList<TestEntity> inserted = insert(2);\r\n+        TestEntity entity = inserted.get(0);\r\n+        List<TestEntity> result = dao.queryBuilder().orderRaw(Properties.SimpleInteger.columnName + \" ASC\").list();\r\n+        assertEquals(2, result.size());\r\n+        assertEquals(entity.getId(), result.get(0).getId());\r\n+    }\r\n \r\n     private TestEntity addEntity(List<TestEntity> list, String simpleString) {\r\n         TestEntity entityAB = createEntity(42, simpleString);\r",
      "parent_sha": "3f1ee650ff7ccf6ab7e20a95a307e37d3b902dd6"
    }
  },
  {
    "oid": "c958b7b4b5629bdf54dfe7e32138de13def79e7d",
    "message": "deprecated query: groupBy & having does not make sense for entities.\nMethod will be removed",
    "date": "2012-02-12T20:22:00Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/c958b7b4b5629bdf54dfe7e32138de13def79e7d",
    "details": {
      "sha": "bec93e23e0ff33ee4dd8817184229d14d07eb95b",
      "filename": "DaoCore/src/de/greenrobot/dao/AbstractDao.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/c958b7b4b5629bdf54dfe7e32138de13def79e7d/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/c958b7b4b5629bdf54dfe7e32138de13def79e7d/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java?ref=c958b7b4b5629bdf54dfe7e32138de13def79e7d",
      "patch": "@@ -358,7 +358,7 @@ public List<T> queryRaw(String where, String... selectionArg) {\n         return loadAllAndCloseCursor(cursor);\r\n     }\r\n \r\n-    /** Performs a standard Android-style query for entities. */\r\n+    /** @deprecated  groupBy & having does not make sense for entities. Method will be removed. */\r\n     public List<T> query(String selection, String[] selectionArgs, String groupBy, String having, String orderby) {\r\n         Cursor cursor = db.query(config.tablename, getAllColumns(), selection, selectionArgs, groupBy, having, orderby);\r\n         return loadAllAndCloseCursor(cursor);\r",
      "parent_sha": "c2ff452e092f43b12c68832fa39293f35f99c96e"
    }
  },
  {
    "oid": "2a72c3a8357705f6e509ef7bbbe6b4f8aa621444",
    "message": "Revert \"make internal properties package private (#184)\"\n\nThis reverts commit d467bf5be97801b45b53822b3f0be083940ed016.",
    "date": "2015-06-28T13:04:34Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/2a72c3a8357705f6e509ef7bbbe6b4f8aa621444",
    "details": {
      "sha": "4900d1abc806c2019ae8878e9fc38c35d32bd7fd",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/Entity.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/2a72c3a8357705f6e509ef7bbbe6b4f8aa621444/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/2a72c3a8357705f6e509ef7bbbe6b4f8aa621444/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FEntity.java?ref=2a72c3a8357705f6e509ef7bbbe6b4f8aa621444",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011-2015 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n  *\n  * This file is part of greenDAO Generator.\n  * \n@@ -314,23 +314,23 @@ public void setJavaPackageTest(String javaPackageTest) {\n         this.javaPackageTest = javaPackageTest;\n     }\n \n-    List<Property> getPropertiesPk() {\n+    public List<Property> getPropertiesPk() {\n         return propertiesPk;\n     }\n \n-    List<Property> getPropertiesNonPk() {\n+    public List<Property> getPropertiesNonPk() {\n         return propertiesNonPk;\n     }\n \n-    Property getPkProperty() {\n+    public Property getPkProperty() {\n         return pkProperty;\n     }\n \n     public List<Index> getIndexes() {\n         return indexes;\n     }\n \n-    String getPkType() {\n+    public String getPkType() {\n         return pkType;\n     }\n ",
      "parent_sha": "d467bf5be97801b45b53822b3f0be083940ed016"
    }
  },
  {
    "oid": "b10b9118955d4047871a4b363865748712917d24",
    "message": "fix generation of unit test artifacts",
    "date": "2016-06-28T19:48:53Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/b10b9118955d4047871a4b363865748712917d24",
    "details": {
      "sha": "7a6ac9de277b28a06b0ea596820a27573117e7ce",
      "filename": "DaoTestGenerator/src/org/greenrobot/greendao/generator/gentest/TestDaoGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/b10b9118955d4047871a4b363865748712917d24/DaoTestGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2Fgentest%2FTestDaoGenerator.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/b10b9118955d4047871a4b363865748712917d24/DaoTestGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2Fgentest%2FTestDaoGenerator.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTestGenerator%2Fsrc%2Forg%2Fgreenrobot%2Fgreendao%2Fgenerator%2Fgentest%2FTestDaoGenerator.java?ref=b10b9118955d4047871a4b363865748712917d24",
      "patch": "@@ -70,7 +70,7 @@ public void generate() throws Exception {\n         DaoGenerator daoGenerator = new DaoGenerator();\n         daoGenerator.generateAll(schema, \"../DaoTestBase/src/main/java\");\n         daoGenerator.generateAll(schema2, \"../DaoTestBase/src/main/java\");\n-        daoGenerator.generateAll(schemaUnitTest, \"../DaoTestBase/src/test/java\");\n+        daoGenerator.generateAll(schemaUnitTest, \"../DaoTest/src/test/java\");\n     }\n \n     protected void createSimple() {",
      "parent_sha": "93ed44445ef691584b34cf7b930984902d4d5ac1"
    }
  },
  {
    "oid": "bebb04237ca0058702942e869364270c2c1d2a8f",
    "message": "Rethrow initial exception in updateInTx if endTransaction also throws",
    "date": "2014-05-25T06:47:43Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/bebb04237ca0058702942e869364270c2c1d2a8f",
    "details": {
      "sha": "51349dfb935e76a5639950f9313864243c82da91",
      "filename": "DaoCore/src/de/greenrobot/dao/AbstractDao.java",
      "status": "modified",
      "additions": 34,
      "deletions": 22,
      "changes": 56,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/bebb04237ca0058702942e869364270c2c1d2a8f/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/bebb04237ca0058702942e869364270c2c1d2a8f/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java?ref=bebb04237ca0058702942e869364270c2c1d2a8f",
      "patch": "@@ -37,11 +37,11 @@\n \n /**\n  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.\n- * \n+ *\n  * This class is thread-safe.\n- * \n+ *\n  * @author Markus\n- * \n+ *\n  * @param <T>\n  *            Entity type\n  * @param <K>\n@@ -117,7 +117,7 @@ public String[] getNonPkColumns() {\n \n     /**\n      * Loads and entity for the given PK.\n-     * \n+     *\n      * @param key\n      *            a PK value or null\n      * @return The entity or null, if no entity matched the PK value\n@@ -189,7 +189,7 @@ protected List<T> loadAllAndCloseCursor(Cursor cursor) {\n \n     /**\n      * Inserts the given entities in the database using a transaction.\n-     * \n+     *\n      * @param entities\n      *            The entities to insert.\n      */\n@@ -199,7 +199,7 @@ public void insertInTx(Iterable<T> entities) {\n \n     /**\n      * Inserts the given entities in the database using a transaction.\n-     * \n+     *\n      * @param entities\n      *            The entities to insert.\n      */\n@@ -210,7 +210,7 @@ public void insertInTx(T... entities) {\n     /**\n      * Inserts the given entities in the database using a transaction. The given entities will become tracked if the PK\n      * is set.\n-     * \n+     *\n      * @param entities\n      *            The entities to insert.\n      * @param setPrimaryKey\n@@ -224,7 +224,7 @@ public void insertInTx(Iterable<T> entities, boolean setPrimaryKey) {\n     /**\n      * Inserts or replaces the given entities in the database using a transaction. The given entities will become\n      * tracked if the PK is set.\n-     * \n+     *\n      * @param entities\n      *            The entities to insert.\n      * @param setPrimaryKey\n@@ -237,7 +237,7 @@ public void insertOrReplaceInTx(Iterable<T> entities, boolean setPrimaryKey) {\n \n     /**\n      * Inserts or replaces the given entities in the database using a transaction.\n-     * \n+     *\n      * @param entities\n      *            The entities to insert.\n      */\n@@ -247,7 +247,7 @@ public void insertOrReplaceInTx(Iterable<T> entities) {\n \n     /**\n      * Inserts or replaces the given entities in the database using a transaction.\n-     * \n+     *\n      * @param entities\n      *            The entities to insert.\n      */\n@@ -286,7 +286,7 @@ private void executeInsertInTx(SQLiteStatement stmt, Iterable<T> entities, boole\n \n     /**\n      * Insert an entity into the table associated with a concrete DAO.\n-     * \n+     *\n      * @return row ID of newly inserted entity\n      */\n     public long insert(T entity) {\n@@ -296,7 +296,7 @@ public long insert(T entity) {\n     /**\n      * Insert an entity into the table associated with a concrete DAO <b>without</b> setting key property. Warning: This\n      * may be faster, but the entity should not be used anymore. The entity also won't be attached to identy scope.\n-     * \n+     *\n      * @return row ID of newly inserted entity\n      */\n     public long insertWithoutSettingPk(T entity) {\n@@ -325,7 +325,7 @@ public long insertWithoutSettingPk(T entity) {\n \n     /**\n      * Insert an entity into the table associated with a concrete DAO.\n-     * \n+     *\n      * @return row ID of newly inserted entity\n      */\n     public long insertOrReplace(T entity) {\n@@ -579,7 +579,7 @@ private void deleteInTxInternal(Iterable<T> entities, Iterable<K> keys) {\n \n     /**\n      * Deletes the given entities in the database using a transaction.\n-     * \n+     *\n      * @param entities\n      *            The entities to delete.\n      */\n@@ -589,7 +589,7 @@ public void deleteInTx(Iterable<T> entities) {\n \n     /**\n      * Deletes the given entities in the database using a transaction.\n-     * \n+     *\n      * @param entities\n      *            The entities to delete.\n      */\n@@ -599,7 +599,7 @@ public void deleteInTx(T... entities) {\n \n     /**\n      * Deletes all entities with the given keys in the database using a transaction.\n-     * \n+     *\n      * @param keys\n      *            Keys of the entities to delete.\n      */\n@@ -609,7 +609,7 @@ public void deleteByKeyInTx(Iterable<K> keys) {\n \n     /**\n      * Deletes all entities with the given keys in the database using a transaction.\n-     * \n+     *\n      * @param keys\n      *            Keys of the entities to delete.\n      */\n@@ -682,7 +682,7 @@ protected void updateInsideSynchronized(T entity, SQLiteStatement stmt, boolean\n \n     /**\n      * Attaches the entity to the identity scope. Calls attachEntity(T entity).\n-     * \n+     *\n      * @param key\n      *            Needed only for identity scope, pass null if there's none.\n      * @param entity\n@@ -702,7 +702,7 @@ protected final void attachEntity(K key, T entity, boolean lock) {\n     /**\n      * Sub classes with relations additionally set the DaoMaster here. Must be called before the entity is attached to\n      * the identity scope.\n-     * \n+     *\n      * @param entity\n      *            The entitiy to attach\n      * */\n@@ -711,13 +711,14 @@ protected void attachEntity(T entity) {\n \n     /**\n      * Updates the given entities in the database using a transaction.\n-     * \n+     *\n      * @param entities\n      *            The entities to insert.\n      */\n     public void updateInTx(Iterable<T> entities) {\n         SQLiteStatement stmt = statements.getUpdateStatement();\n         db.beginTransaction();\n+        RuntimeException txEx = null;\n         try {\n             synchronized (stmt) {\n                 if (identityScope != null) {\n@@ -734,14 +735,25 @@ public void updateInTx(Iterable<T> entities) {\n                 }\n             }\n             db.setTransactionSuccessful();\n+        } catch (RuntimeException e) {\n+            txEx = e;\n         } finally {\n-            db.endTransaction();\n+            try {\n+                db.endTransaction();\n+            } catch (RuntimeException e) {\n+                if (txEx != null) {\n+                    DaoLog.w(\"Could not end transaction (rethrowing initial exception)\", e);\n+                    throw txEx;\n+                } else {\n+                    throw e;\n+                }\n+            }\n         }\n     }\n \n     /**\n      * Updates the given entities in the database using a transaction.\n-     * \n+     *\n      * @param entities\n      *            The entities to update.\n      */",
      "parent_sha": "d49f1800a64504e693962c47d0f49cda46301685"
    }
  },
  {
    "oid": "b9983904b9374af4a00a11307f46b9c43dd38fb6",
    "message": "Add tweaks from Active Android indexed test to cupboard test.\n\n- Create entities after database setup.\n- Add log output between steps.",
    "date": "2015-09-22T10:42:18Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/b9983904b9374af4a00a11307f46b9c43dd38fb6",
    "details": {
      "sha": "8397379e6198e6a66366ce643e05063831ddad71",
      "filename": "PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/b9983904b9374af4a00a11307f46b9c43dd38fb6/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/b9983904b9374af4a00a11307f46b9c43dd38fb6/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java?ref=b9983904b9374af4a00a11307f46b9c43dd38fb6",
      "patch": "@@ -6,21 +6,16 @@\n import android.database.sqlite.SQLiteOpenHelper;\n import android.test.ApplicationTestCase;\n import android.util.Log;\n-\n import de.greenrobot.performance.StringGenerator;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-\n-import java.util.Random;\n import nl.qbusict.cupboard.Cupboard;\n import nl.qbusict.cupboard.CupboardBuilder;\n import nl.qbusict.cupboard.DatabaseCompartment;\n import nl.qbusict.cupboard.QueryResultIterable;\n \n-import static nl.qbusict.cupboard.CupboardFactory.cupboard;\n-\n /**\n  * https://bitbucket.org/qbusict/cupboard/wiki/GettingStarted\n  */\n@@ -46,10 +41,10 @@ protected void setUp() throws Exception {\n         super.setUp();\n \n         createApplication();\n-        setupCupboard();\n+        setUpCupboard();\n     }\n \n-    private void setupCupboard() {\n+    private void setUpCupboard() {\n         cupboard = new CupboardBuilder().useAnnotations().build();\n     }\n \n@@ -69,6 +64,12 @@ public void testIndexedStringEntityQuery() {\n \n         Log.d(TAG, \"---------------Indexed Queries: Start\");\n \n+        // set up database\n+        cupboard.register(IndexedStringEntity.class);\n+        DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);\n+        DatabaseCompartment database = cupboard.withDatabase(dbHelper.getWritableDatabase());\n+        Log.d(TAG, \"Set up database.\");\n+\n         // create entities\n         List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);\n         String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);\n@@ -78,14 +79,11 @@ public void testIndexedStringEntityQuery() {\n             entity.indexedString = fixedRandomStrings[i];\n             entities.add(entity);\n         }\n-\n-        // setup database\n-        cupboard.register(IndexedStringEntity.class);\n-        DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);\n-        DatabaseCompartment database = cupboard.withDatabase(dbHelper.getWritableDatabase());\n+        Log.d(TAG, \"Built entities.\");\n \n         // insert entities\n         database.put(entities);\n+        Log.d(TAG, \"Inserted entities.\");\n \n         // query for entities by indexed string at random\n         int[] randomIndices = StringGenerator.getFixedRandomIndices(INDEXED_RUNS, BATCH_SIZE - 1);\n@@ -117,16 +115,17 @@ public void testPerformance() throws Exception {\n             Log.d(TAG, \"Performance tests are disabled.\");\n             return;\n         }\n+        Log.d(TAG, \"---------------Start\");\n \n-        // setup database\n+        // set up database\n         cupboard.register(SimpleEntityNotNull.class);\n         DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);\n         DatabaseCompartment database = cupboard.withDatabase(dbHelper.getWritableDatabase());\n \n-        Log.d(TAG, \"---------------Start\");\n         for (int i = 0; i < RUNS; i++) {\n             runTests(database, BATCH_SIZE);\n         }\n+\n         Log.d(TAG, \"---------------End\");\n     }\n ",
      "parent_sha": "8aa4e13df0cc2ae8a903ecd8b21f80e0243859b8"
    }
  },
  {
    "oid": "91607a2c7631ba0d09e36e76dd4df1f135429c79",
    "message": "update year",
    "date": "2013-02-21T23:38:01Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/91607a2c7631ba0d09e36e76dd4df1f135429c79",
    "details": {
      "sha": "52797205805d8324c4157847ce369d617104fa6a",
      "filename": "DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java",
      "status": "modified",
      "additions": 194,
      "deletions": 194,
      "changes": 388,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/91607a2c7631ba0d09e36e76dd4df1f135429c79/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/91607a2c7631ba0d09e36e76dd4df1f135429c79/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoGenerator%2Fsrc%2Fde%2Fgreenrobot%2Fdaogenerator%2FDaoGenerator.java?ref=91607a2c7631ba0d09e36e76dd4df1f135429c79",
      "patch": "@@ -1,194 +1,194 @@\n-/*\r\n- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\r\n- *\r\n- * This file is part of greenDAO Generator.\r\n- * \r\n- * greenDAO Generator is free software: you can redistribute it and/or modify\r\n- * it under the terms of the GNU General Public License as published by\r\n- * the Free Software Foundation, either version 3 of the License, or\r\n- * (at your option) any later version.\r\n- * greenDAO Generator is distributed in the hope that it will be useful,\r\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n- * GNU General Public License for more details.\r\n- * \r\n- * You should have received a copy of the GNU General Public License\r\n- * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.\r\n- */\r\n-package de.greenrobot.daogenerator;\r\n-\r\n-import java.io.File;\r\n-import java.io.FileWriter;\r\n-import java.io.IOException;\r\n-import java.io.Writer;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.regex.Matcher;\r\n-import java.util.regex.Pattern;\r\n-\r\n-import freemarker.template.Configuration;\r\n-import freemarker.template.DefaultObjectWrapper;\r\n-import freemarker.template.Template;\r\n-\r\n-/**\r\n- * Once you have your model created, use this class to generate entities and DAOs.\r\n- * \r\n- * @author Markus\r\n- */\r\n-public class DaoGenerator {\r\n-\r\n-    private Pattern patternKeepIncludes;\r\n-    private Pattern patternKeepFields;\r\n-    private Pattern patternKeepMethods;\r\n-\r\n-    private Template templateDao;\r\n-    private Template templateDaoMaster;\r\n-    private Template templateDaoSession;\r\n-    private Template templateEntity;\r\n-    private Template templateDaoUnitTest;\r\n-\r\n-    public DaoGenerator() throws IOException {\r\n-        System.out.println(\"greenDAO Generator\");\r\n-        System.out.println(\"Copyright 2011-2012 Markus Junginger, greenrobot.de. Licensed under GPL V3.\");\r\n-        System.out.println(\"This program comes with ABSOLUTELY NO WARRANTY\");\r\n-\r\n-        patternKeepIncludes = compilePattern(\"INCLUDES\");\r\n-        patternKeepFields = compilePattern(\"FIELDS\");\r\n-        patternKeepMethods = compilePattern(\"METHODS\");\r\n-\r\n-        Configuration config = new Configuration();\r\n-        config.setClassForTemplateLoading(this.getClass(), \"/\");\r\n-        config.setObjectWrapper(new DefaultObjectWrapper());\r\n-\r\n-        templateDao = config.getTemplate(\"dao.ftl\");\r\n-        templateDaoMaster = config.getTemplate(\"dao-master.ftl\");\r\n-        templateDaoSession = config.getTemplate(\"dao-session.ftl\");\r\n-        templateEntity = config.getTemplate(\"entity.ftl\");\r\n-        templateDaoUnitTest = config.getTemplate(\"dao-unit-test.ftl\");\r\n-    }\r\n-\r\n-    private Pattern compilePattern(String sectionName) {\r\n-        int flags = Pattern.DOTALL | Pattern.MULTILINE;\r\n-        return Pattern.compile(\".*^\\\\s*?//\\\\s*?KEEP \" + sectionName + \".*?\\n(.*?)^\\\\s*// KEEP \" + sectionName\r\n-                + \" END.*?\\n\", flags);\r\n-    }\r\n-\r\n-    /** Generates all entities and DAOs for the given schema. */\r\n-    public void generateAll(Schema schema, String outDir) throws Exception {\r\n-        generateAll(schema, outDir, null);\r\n-    }\r\n-\r\n-    /** Generates all entities and DAOs for the given schema. */\r\n-    public void generateAll(Schema schema, String outDir, String outDirTest) throws Exception {\r\n-        long start = System.currentTimeMillis();\r\n-\r\n-        File outDirFile = toFileForceExists(outDir);\r\n-\r\n-        File outDirTestFile = null;\r\n-        if (outDirTest != null) {\r\n-            outDirTestFile = toFileForceExists(outDirTest);\r\n-        }\r\n-\r\n-        schema.init2ndPass();\r\n-        schema.init3ndPass();\r\n-\r\n-        System.out.println(\"Processing schema version \" + schema.getVersion() + \"...\");\r\n-\r\n-        List<Entity> entities = schema.getEntities();\r\n-        for (Entity entity : entities) {\r\n-            generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);\r\n-            if (!entity.isProtobuf() && !entity.isSkipGeneration()) {\r\n-                generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);\r\n-            }\r\n-            if (outDirTestFile != null && !entity.isSkipGenerationTest()) {\r\n-                String javaPackageTest = entity.getJavaPackageTest();\r\n-                String classNameTest = entity.getClassNameTest();\r\n-                File javaFilename = toJavaFilename(outDirTestFile, javaPackageTest, classNameTest);\r\n-                if (!javaFilename.exists()) {\r\n-                    generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);\r\n-                } else {\r\n-                    System.out.println(\"Skipped \" + javaFilename.getCanonicalPath());\r\n-                }\r\n-            }\r\n-        }\r\n-        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), \"DaoMaster\", schema, null);\r\n-        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), \"DaoSession\", schema, null);\r\n-\r\n-        long time = System.currentTimeMillis() - start;\r\n-        System.out.println(\"Processed \" + entities.size() + \" entities in \" + time + \"ms\");\r\n-    }\r\n-\r\n-    protected File toFileForceExists(String filename) throws IOException {\r\n-        File file = new File(filename);\r\n-        if (!file.exists()) {\r\n-            throw new IOException(filename\r\n-                    + \" does not exist. This check is to prevent accidential file generation into a wrong path.\");\r\n-        }\r\n-        return file;\r\n-    }\r\n-\r\n-    private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,\r\n-            Entity entity) throws Exception {\r\n-        try {\r\n-            File file = toJavaFilename(outDirFile, javaPackage, javaClassName);\r\n-            file.getParentFile().mkdirs();\r\n-\r\n-            Map<String, Object> root = new HashMap<String, Object>();\r\n-            root.put(\"schema\", schema);\r\n-            root.put(\"entity\", entity);\r\n-\r\n-            if (entity != null && entity.getHasKeepSections()) {\r\n-                checkKeepSections(file, root);\r\n-            }\r\n-\r\n-            Writer writer = new FileWriter(file);\r\n-            try {\r\n-                template.process(root, writer);\r\n-                writer.flush();\r\n-                System.out.println(\"Written \" + file.getCanonicalPath());\r\n-            } finally {\r\n-                writer.close();\r\n-            }\r\n-        } catch (Exception ex) {\r\n-            System.err.println(\"Error while generating \" + javaPackage + \".\" + javaClassName + \" (\"\r\n-                    + outDirFile.getCanonicalPath() + \")\");\r\n-            throw ex;\r\n-        }\r\n-    }\r\n-\r\n-    private void checkKeepSections(File file, Map<String, Object> root) {\r\n-        if (file.exists()) {\r\n-            try {\r\n-                String contents = new String(DaoUtil.readAllBytes(file));\r\n-\r\n-                Matcher matcher;\r\n-\r\n-                matcher = patternKeepIncludes.matcher(contents);\r\n-                if (matcher.matches()) {\r\n-                    root.put(\"keepIncludes\", matcher.group(1));\r\n-                }\r\n-\r\n-                matcher = patternKeepFields.matcher(contents);\r\n-                if (matcher.matches()) {\r\n-                    root.put(\"keepFields\", matcher.group(1));\r\n-                }\r\n-\r\n-                matcher = patternKeepMethods.matcher(contents);\r\n-                if (matcher.matches()) {\r\n-                    root.put(\"keepMethods\", matcher.group(1));\r\n-                }\r\n-            } catch (IOException e) {\r\n-                e.printStackTrace();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    protected File toJavaFilename(File outDirFile, String javaPackage, String javaClassName) {\r\n-        String packageSubPath = javaPackage.replace('.', '/');\r\n-        File packagePath = new File(outDirFile, packageSubPath);\r\n-        File file = new File(packagePath, javaClassName + \".java\");\r\n-        return file;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)\n+ *\n+ * This file is part of greenDAO Generator.\n+ * \n+ * greenDAO Generator is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ * greenDAO Generator is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package de.greenrobot.daogenerator;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.DefaultObjectWrapper;\n+import freemarker.template.Template;\n+\n+/**\n+ * Once you have your model created, use this class to generate entities and DAOs.\n+ * \n+ * @author Markus\n+ */\n+public class DaoGenerator {\n+\n+    private Pattern patternKeepIncludes;\n+    private Pattern patternKeepFields;\n+    private Pattern patternKeepMethods;\n+\n+    private Template templateDao;\n+    private Template templateDaoMaster;\n+    private Template templateDaoSession;\n+    private Template templateEntity;\n+    private Template templateDaoUnitTest;\n+\n+    public DaoGenerator() throws IOException {\n+        System.out.println(\"greenDAO Generator\");\n+        System.out.println(\"Copyright 2011-2013 Markus Junginger, greenrobot.de. Licensed under GPL V3.\");\n+        System.out.println(\"This program comes with ABSOLUTELY NO WARRANTY\");\n+\n+        patternKeepIncludes = compilePattern(\"INCLUDES\");\n+        patternKeepFields = compilePattern(\"FIELDS\");\n+        patternKeepMethods = compilePattern(\"METHODS\");\n+\n+        Configuration config = new Configuration();\n+        config.setClassForTemplateLoading(this.getClass(), \"/\");\n+        config.setObjectWrapper(new DefaultObjectWrapper());\n+\n+        templateDao = config.getTemplate(\"dao.ftl\");\n+        templateDaoMaster = config.getTemplate(\"dao-master.ftl\");\n+        templateDaoSession = config.getTemplate(\"dao-session.ftl\");\n+        templateEntity = config.getTemplate(\"entity.ftl\");\n+        templateDaoUnitTest = config.getTemplate(\"dao-unit-test.ftl\");\n+    }\n+\n+    private Pattern compilePattern(String sectionName) {\n+        int flags = Pattern.DOTALL | Pattern.MULTILINE;\n+        return Pattern.compile(\".*^\\\\s*?//\\\\s*?KEEP \" + sectionName + \".*?\\n(.*?)^\\\\s*// KEEP \" + sectionName\n+                + \" END.*?\\n\", flags);\n+    }\n+\n+    /** Generates all entities and DAOs for the given schema. */\n+    public void generateAll(Schema schema, String outDir) throws Exception {\n+        generateAll(schema, outDir, null);\n+    }\n+\n+    /** Generates all entities and DAOs for the given schema. */\n+    public void generateAll(Schema schema, String outDir, String outDirTest) throws Exception {\n+        long start = System.currentTimeMillis();\n+\n+        File outDirFile = toFileForceExists(outDir);\n+\n+        File outDirTestFile = null;\n+        if (outDirTest != null) {\n+            outDirTestFile = toFileForceExists(outDirTest);\n+        }\n+\n+        schema.init2ndPass();\n+        schema.init3ndPass();\n+\n+        System.out.println(\"Processing schema version \" + schema.getVersion() + \"...\");\n+\n+        List<Entity> entities = schema.getEntities();\n+        for (Entity entity : entities) {\n+            generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);\n+            if (!entity.isProtobuf() && !entity.isSkipGeneration()) {\n+                generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);\n+            }\n+            if (outDirTestFile != null && !entity.isSkipGenerationTest()) {\n+                String javaPackageTest = entity.getJavaPackageTest();\n+                String classNameTest = entity.getClassNameTest();\n+                File javaFilename = toJavaFilename(outDirTestFile, javaPackageTest, classNameTest);\n+                if (!javaFilename.exists()) {\n+                    generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);\n+                } else {\n+                    System.out.println(\"Skipped \" + javaFilename.getCanonicalPath());\n+                }\n+            }\n+        }\n+        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), \"DaoMaster\", schema, null);\n+        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), \"DaoSession\", schema, null);\n+\n+        long time = System.currentTimeMillis() - start;\n+        System.out.println(\"Processed \" + entities.size() + \" entities in \" + time + \"ms\");\n+    }\n+\n+    protected File toFileForceExists(String filename) throws IOException {\n+        File file = new File(filename);\n+        if (!file.exists()) {\n+            throw new IOException(filename\n+                    + \" does not exist. This check is to prevent accidential file generation into a wrong path.\");\n+        }\n+        return file;\n+    }\n+\n+    private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,\n+            Entity entity) throws Exception {\n+        try {\n+            File file = toJavaFilename(outDirFile, javaPackage, javaClassName);\n+            file.getParentFile().mkdirs();\n+\n+            Map<String, Object> root = new HashMap<String, Object>();\n+            root.put(\"schema\", schema);\n+            root.put(\"entity\", entity);\n+\n+            if (entity != null && entity.getHasKeepSections()) {\n+                checkKeepSections(file, root);\n+            }\n+\n+            Writer writer = new FileWriter(file);\n+            try {\n+                template.process(root, writer);\n+                writer.flush();\n+                System.out.println(\"Written \" + file.getCanonicalPath());\n+            } finally {\n+                writer.close();\n+            }\n+        } catch (Exception ex) {\n+            System.err.println(\"Error while generating \" + javaPackage + \".\" + javaClassName + \" (\"\n+                    + outDirFile.getCanonicalPath() + \")\");\n+            throw ex;\n+        }\n+    }\n+\n+    private void checkKeepSections(File file, Map<String, Object> root) {\n+        if (file.exists()) {\n+            try {\n+                String contents = new String(DaoUtil.readAllBytes(file));\n+\n+                Matcher matcher;\n+\n+                matcher = patternKeepIncludes.matcher(contents);\n+                if (matcher.matches()) {\n+                    root.put(\"keepIncludes\", matcher.group(1));\n+                }\n+\n+                matcher = patternKeepFields.matcher(contents);\n+                if (matcher.matches()) {\n+                    root.put(\"keepFields\", matcher.group(1));\n+                }\n+\n+                matcher = patternKeepMethods.matcher(contents);\n+                if (matcher.matches()) {\n+                    root.put(\"keepMethods\", matcher.group(1));\n+                }\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    protected File toJavaFilename(File outDirFile, String javaPackage, String javaClassName) {\n+        String packageSubPath = javaPackage.replace('.', '/');\n+        File packagePath = new File(outDirFile, packageSubPath);\n+        File file = new File(packagePath, javaClassName + \".java\");\n+        return file;\n+    }\n+\n+}",
      "parent_sha": "18cc14443da23a521ec0a4ae52692e4b184e9bc6"
    }
  },
  {
    "oid": "a6b78eb44b8c70c3268928456e67f56ce88646fa",
    "message": "testGetForCurrentThread_ManyThreadsDontLeak does not work on newer API levels",
    "date": "2016-07-01T09:47:09Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/a6b78eb44b8c70c3268928456e67f56ce88646fa",
    "details": {
      "sha": "404d4f1226b956eb8be1c27b6b398cd9f41c5fed",
      "filename": "DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/query/QueryForThreadTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 7,
      "changes": 21,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/a6b78eb44b8c70c3268928456e67f56ce88646fa/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Fquery%2FQueryForThreadTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/a6b78eb44b8c70c3268928456e67f56ce88646fa/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Fquery%2FQueryForThreadTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Fquery%2FQueryForThreadTest.java?ref=a6b78eb44b8c70c3268928456e67f56ce88646fa",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2011-2013 Markus Junginger, greenrobot (http://greenrobot.de)\n+ * Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)\n  *\n  * This file is part of greenDAO Generator.\n  * \n@@ -17,17 +17,20 @@\n  */\n package org.greenrobot.greendao.daotest.query;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-\n+import android.os.Build.VERSION;\n+import android.os.Build.VERSION_CODES;\n import android.util.SparseArray;\n+\n import org.greenrobot.greendao.DaoException;\n import org.greenrobot.greendao.DaoLog;\n-import org.greenrobot.greendao.query.Query;\n-import org.greenrobot.greendao.query.QueryBuilder;\n import org.greenrobot.greendao.daotest.TestEntity;\n import org.greenrobot.greendao.daotest.TestEntityDao.Properties;\n import org.greenrobot.greendao.daotest.entity.TestEntityTestBase;\n+import org.greenrobot.greendao.query.Query;\n+import org.greenrobot.greendao.query.QueryBuilder;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n \n public class QueryForThreadTest extends TestEntityTestBase {\n     /** Takes longer when activated */\n@@ -53,13 +56,17 @@ public void testGetForCurrentThread_ParametersAreReset() {\n     }\n \n     public void testGetForCurrentThread_ManyThreadsDontLeak() throws Exception {\n+        if (VERSION.SDK_INT > VERSION_CODES.LOLLIPOP_MR1) {\n+            DaoLog.i(\"testGetForCurrentThread_ManyThreadsDontLeak does not work on API level \" + VERSION.SDK_INT);\n+            return;\n+        }\n         QueryBuilder<TestEntity> builder = dao.queryBuilder().where(Properties.SimpleInteger.eq(\"dummy\"));\n         final Query<TestEntity> query = builder.build();\n         for (int i = 1; i <= LEAK_TEST_ITERATIONS; i++) {\n             Thread thread = new Thread() {\n                 public void run() {\n                     query.forCurrentThread();\n-                };\n+                }\n             };\n             thread.start();\n             if (i % 10 == 0) {",
      "parent_sha": "79d6a5f062f824cddef02f3def06a7cb7d3c2a6a"
    }
  },
  {
    "oid": "99107c51478f113458441d828899f0072b496006",
    "message": "removed simple OR",
    "date": "2011-10-22T14:35:29Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/99107c51478f113458441d828899f0072b496006",
    "details": {
      "sha": "0b19bc52da46fb673ef8c545d6dae87af5a8fa30",
      "filename": "DaoBase/src/de/greenrobot/dao/QueryBuilder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 17,
      "changes": 20,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/99107c51478f113458441d828899f0072b496006/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FQueryBuilder.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/99107c51478f113458441d828899f0072b496006/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoBase%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FQueryBuilder.java?ref=99107c51478f113458441d828899f0072b496006",
      "patch": "@@ -54,11 +54,6 @@ private void checkOrderBuilder() {\n         }\r\n     }\r\n \r\n-    public QueryBuilder<T> or() {\r\n-        whereConditions.add(\"OR\");\r\n-        return this;\r\n-    }\r\n-\r\n     public QueryBuilder<T> eq(Property property, Object value) {\r\n         appendWhere(property, \"=?\", value);\r\n         return this;\r\n@@ -213,28 +208,19 @@ public Query<T> build() {\n         if (!whereConditions.isEmpty()) {\r\n             builder.append(\" WHERE \");\r\n             ListIterator<String> iter = whereConditions.listIterator();\r\n-            boolean lastWasOr = false;\r\n             while (iter.hasNext()) {\r\n                 if (iter.hasPrevious()) {\r\n-                    if (lastWasOr) {\r\n-                        builder.append(\" OR \");\r\n-                    } else {\r\n-                        builder.append(\" AND \");\r\n-                    }\r\n+                    builder.append(\" AND \");\r\n                 }\r\n                 String condition = iter.next();\r\n-                lastWasOr = condition.equalsIgnoreCase(\"OR\");\r\n-                if (!lastWasOr) {\r\n-                    builder.append(condition);\r\n-                }\r\n+                builder.append(condition);\r\n             }\r\n         }\r\n \r\n-\r\n         if (orderBuilder != null && orderBuilder.length() > 0) {\r\n             builder.append(\" ORDER BY \").append(orderBuilder);\r\n         }\r\n-        \r\n+\r\n         System.out.println(\"><>>>\" + builder);\r\n \r\n         return new Query<T>(dao, builder.toString(), values);\r",
      "parent_sha": "cbec8ffa205474c6a07188e0305e43628405ed1f"
    }
  },
  {
    "oid": "24662a92919d46523b7602ed6d3bb5b77bed4e81",
    "message": "DaoExample: fix NoteActivity compilation",
    "date": "2016-04-29T19:23:13Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/24662a92919d46523b7602ed6d3bb5b77bed4e81",
    "details": {
      "sha": "3427cbf6150e7dd2b1e96c5ff7a5095e2d0eeb26",
      "filename": "DaoExample/src/main/java/de/greenrobot/daoexample/NoteActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/24662a92919d46523b7602ed6d3bb5b77bed4e81/DaoExample%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdaoexample%2FNoteActivity.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/24662a92919d46523b7602ed6d3bb5b77bed4e81/DaoExample%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdaoexample%2FNoteActivity.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoExample%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdaoexample%2FNoteActivity.java?ref=24662a92919d46523b7602ed6d3bb5b77bed4e81",
      "patch": "@@ -116,7 +116,7 @@ private void addNote() {\n \n         final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);\n         String comment = \"Added on \" + df.format(new Date());\n-        Note note = new Note(null, noteText, comment, new Date());\n+        Note note = new Note(null, noteText, comment, new Date(), NoteType.TEXT);\n         noteDao.insert(note);\n         Log.d(\"DaoExample\", \"Inserted new note, ID: \" + note.getId());\n ",
      "parent_sha": "eb674d5fa691e2288b5fb08f6ddceb6dc23edfda"
    }
  },
  {
    "oid": "5d73ebcec4c12dffc35249c207923cad74080f30",
    "message": "DaoSessionConcurrentTest refactoring and 3 separate concurrent threads",
    "date": "2013-02-08T21:09:38Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/5d73ebcec4c12dffc35249c207923cad74080f30",
    "details": {
      "sha": "8032351744a5499525e10e6e99df7c1f3aa9823a",
      "filename": "DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java",
      "status": "modified",
      "additions": 54,
      "deletions": 26,
      "changes": 80,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/5d73ebcec4c12dffc35249c207923cad74080f30/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/5d73ebcec4c12dffc35249c207923cad74080f30/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2FDaoSessionConcurrentTest.java?ref=5d73ebcec4c12dffc35249c207923cad74080f30",
      "patch": "@@ -10,33 +10,35 @@\n import de.greenrobot.dao.test.AbstractDaoSessionTest;\n \n public class DaoSessionConcurrentTest extends AbstractDaoSessionTest<Application, DaoMaster, DaoSession> {\n-    abstract class TestThread extends Thread {\n-        final CountDownLatch latchToCountDown;\n-        final CountDownLatch latchToWaitFor;\n+    class TestThread extends Thread {\n+        final Runnable runnable;\n \n-        public TestThread(CountDownLatch latchToCountDown, CountDownLatch latchToWaitFor) {\n-            this.latchToCountDown = latchToCountDown;\n-            this.latchToWaitFor = latchToWaitFor;\n+        public TestThread(Runnable runnable) {\n+            this.runnable = runnable;\n         }\n \n         @Override\n         public void run() {\n-            latchToCountDown.countDown();\n+            latchThreadsReady.countDown();\n             try {\n-                latchToWaitFor.await();\n+                latchInsideTx.await();\n             } catch (InterruptedException e) {\n                 throw new RuntimeException(e);\n             }\n-            run2();\n+            runnable.run();\n+            latchThreadsDone.countDown();\n         }\n \n-        abstract void run2();\n     }\n \n     private final static int TIME_TO_WAIT_FOR_THREAD = 1000; // Use 1000 to be on the safe side, 100 once stable\n \n     private TestEntityDao dao;\n \n+    private CountDownLatch latchThreadsReady;\n+    private CountDownLatch latchInsideTx;\n+    private CountDownLatch latchThreadsDone;\n+\n     public DaoSessionConcurrentTest() {\n         super(DaoMaster.class);\n     }\n@@ -47,14 +49,32 @@ protected void setUp() {\n         dao = daoSession.getTestEntityDao();\n     }\n \n+    void initThreads(Runnable... runnables) throws InterruptedException {\n+        latchThreadsReady = new CountDownLatch(runnables.length);\n+        latchInsideTx = new CountDownLatch(1);\n+        latchThreadsDone = new CountDownLatch(runnables.length);\n+        for (Runnable runnable : runnables) {\n+            new TestThread(runnable).start();\n+        }\n+        latchThreadsReady.await();\n+    }\n+\n     public void testConcurrentInsertDuringTx() throws InterruptedException {\n-        CountDownLatch latchThreadsReady = new CountDownLatch(1);\n-        CountDownLatch latchInsideTx = new CountDownLatch(1);\n-        Thread thread = new TestThread(latchThreadsReady, latchInsideTx) {\n+        Runnable runnable1 = new Runnable() {\n             @Override\n-            public void run2() {\n+            public void run() {\n                 dao.insert(createEntity(null));\n+            }\n+        };\n+        Runnable runnable2 = new Runnable() {\n+            @Override\n+            public void run() {\n                 dao.insertInTx(createEntity(null));\n+            }\n+        };\n+        Runnable runnable3 = new Runnable() {\n+            @Override\n+            public void run() {\n                 daoSession.runInTx(new Runnable() {\n                     @Override\n                     public void run() {\n@@ -63,29 +83,37 @@ public void run() {\n                 });\n             }\n         };\n-        thread.start();\n+        initThreads(runnable1, runnable2, runnable3);\n         // Builds the statement so it is ready immediately in the thread\n         dao.insert(createEntity(null));\n-        latchThreadsReady.await();\n-        doTx(latchInsideTx, new Runnable() {\n+        doTx(new Runnable() {\n             @Override\n             public void run() {\n                 dao.insert(createEntity(null));\n             }\n         });\n-        thread.join();\n+        latchThreadsDone.await();\n+        assertEquals(5, dao.count());\n     }\n \n     public void testConcurrentUpdateDuringTx() throws InterruptedException {\n         final TestEntity entity = createEntity(null);\n         dao.insert(entity);\n-        CountDownLatch latchThreadsReady = new CountDownLatch(1);\n-        final CountDownLatch latchInsideTx = new CountDownLatch(1);\n-        Thread thread = new TestThread(latchThreadsReady, latchInsideTx) {\n+        Runnable runnable1 = new Runnable() {\n             @Override\n-            public void run2() {\n+            public void run() {\n                 dao.update(entity);\n+            }\n+        };\n+        Runnable runnable2 = new Runnable() {\n+            @Override\n+            public void run() {\n                 dao.updateInTx(entity);\n+            }\n+        };\n+        Runnable runnable3 = new Runnable() {\n+            @Override\n+            public void run() {\n                 daoSession.runInTx(new Runnable() {\n                     @Override\n                     public void run() {\n@@ -94,16 +122,16 @@ public void run() {\n                 });\n             }\n         };\n-        thread.start();\n+        initThreads(runnable1, runnable2, runnable3);\n         // Builds the statement so it is ready immediately in the thread\n         dao.update(entity);\n-        doTx(latchInsideTx, new Runnable() {\n+        doTx(new Runnable() {\n             @Override\n             public void run() {\n                 dao.update(entity);\n             }\n         });\n-        thread.join();\n+        latchThreadsDone.await();\n     }\n \n     /**\n@@ -130,7 +158,7 @@ protected SQLiteStatement initialValue() {\n         assertTrue(time < 10);\n     }\n \n-    private void doTx(final CountDownLatch latchInsideTx, final Runnable runnableInsideTx) {\n+    private void doTx(final Runnable runnableInsideTx) {\n         daoSession.runInTx(new Runnable() {\n             @Override\n             public void run() {",
      "parent_sha": "b8ccb6688a82f66d1205149bbf3a07511d1013d1"
    }
  },
  {
    "oid": "71a736fc00c0a9753b0486dc19473b84daf6a2f8",
    "message": "adjust TableStatements for db abstraction",
    "date": "2016-05-23T18:40:28Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/71a736fc00c0a9753b0486dc19473b84daf6a2f8",
    "details": {
      "sha": "e313a112d495d744d57deacfea98a91b34ce1a5b",
      "filename": "DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/71a736fc00c0a9753b0486dc19473b84daf6a2f8/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/71a736fc00c0a9753b0486dc19473b84daf6a2f8/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java?ref=71a736fc00c0a9753b0486dc19473b84daf6a2f8",
      "patch": "@@ -48,7 +48,7 @@ public TableStatements(Database db, String tablename, String[] allColumns, Strin\n     public DatabaseStatement getInsertStatement() {\n         if (insertStatement == null) {\n             String sql = SqlUtils.createSqlInsert(\"INSERT INTO \", tablename, allColumns);\n-            SQLiteStatement newInsertStatement = db.compileStatement(sql);\n+            DatabaseStatement newInsertStatement = db.compileStatement(sql);\n             synchronized (this) {\n                 if (insertStatement == null) {\n                     insertStatement = newInsertStatement;\n@@ -64,7 +64,7 @@ public DatabaseStatement getInsertStatement() {\n     public DatabaseStatement getInsertOrReplaceStatement() {\n         if (insertOrReplaceStatement == null) {\n             String sql = SqlUtils.createSqlInsert(\"INSERT OR REPLACE INTO \", tablename, allColumns);\n-            SQLiteStatement newInsertOrReplaceStatement = db.compileStatement(sql);\n+            DatabaseStatement newInsertOrReplaceStatement = db.compileStatement(sql);\n             synchronized (this) {\n                 if (insertOrReplaceStatement == null) {\n                     insertOrReplaceStatement = newInsertOrReplaceStatement;\n@@ -80,7 +80,7 @@ public DatabaseStatement getInsertOrReplaceStatement() {\n     public DatabaseStatement getDeleteStatement() {\n         if (deleteStatement == null) {\n             String sql = SqlUtils.createSqlDelete(tablename, pkColumns);\n-            SQLiteStatement newDeleteStatement = db.compileStatement(sql);\n+            DatabaseStatement newDeleteStatement = db.compileStatement(sql);\n             synchronized (this) {\n                 if (deleteStatement == null) {\n                     deleteStatement = newDeleteStatement;\n@@ -96,7 +96,7 @@ public DatabaseStatement getDeleteStatement() {\n     public DatabaseStatement getUpdateStatement() {\n         if (updateStatement == null) {\n             String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);\n-            SQLiteStatement newUpdateStatement = db.compileStatement(sql);\n+            DatabaseStatement newUpdateStatement = db.compileStatement(sql);\n             synchronized (this) {\n                 if (updateStatement == null) {\n                     updateStatement = newUpdateStatement;",
      "parent_sha": "6dcbc56a8b50b6b64a87e9f9d3770c64bd76b3d8"
    }
  },
  {
    "oid": "49c75be784906b6a85ee539608cd869e8711222b",
    "message": "make loadAllFromCursor return an ArrayList again to allow modifications to the list",
    "date": "2016-01-21T16:26:44Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/49c75be784906b6a85ee539608cd869e8711222b",
    "details": {
      "sha": "7272a6f9ed768dbe14620a683c9e1c398cb61abe",
      "filename": "DaoCore/src/main/java/de/greenrobot/dao/AbstractDao.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/49c75be784906b6a85ee539608cd869e8711222b/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/49c75be784906b6a85ee539608cd869e8711222b/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java?ref=49c75be784906b6a85ee539608cd869e8711222b",
      "patch": "@@ -34,7 +34,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n \n /**\n@@ -360,7 +359,7 @@ protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock)\n     protected List<T> loadAllFromCursor(Cursor cursor) {\n         int count = cursor.getCount();\n         if (count == 0) {\n-            return Collections.EMPTY_LIST;\n+            return new ArrayList<T>();\n         }\n         List<T> list = new ArrayList<T>(count);\n         CursorWindow window = null;",
      "parent_sha": "40313df9518297b33165dc9eb90740160681b7a6"
    }
  },
  {
    "oid": "5f0acc16222cf9bcff76972c17d1320849ad2fce",
    "message": "minor test improvement",
    "date": "2013-10-11T20:43:08Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/5f0acc16222cf9bcff76972c17d1320849ad2fce",
    "details": {
      "sha": "c99e2747949ae6c29c628c30dcb35f9719da598a",
      "filename": "DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/5f0acc16222cf9bcff76972c17d1320849ad2fce/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryForThreadTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/5f0acc16222cf9bcff76972c17d1320849ad2fce/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryForThreadTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FQueryForThreadTest.java?ref=5f0acc16222cf9bcff76972c17d1320849ad2fce",
      "patch": "@@ -72,13 +72,14 @@ public void run() {\n         Class<?> dataSuperclass = queryData.getClass().getSuperclass();\n         Field mapField = dataSuperclass.getDeclaredField(\"queriesForThreads\");\n         mapField.setAccessible(true);\n+\n+        Method gcMethod = dataSuperclass.getDeclaredMethod(\"gc\");\n+        gcMethod.setAccessible(true);\n         SparseArray<?> map = (SparseArray<?>) mapField.get(queryData);\n-        while (map.size() > 1) {\n-            DaoLog.d(\"Queries left: \" + map.size());\n+        for (int i = 0; map.size() > 1 && i < 1000; i++) {\n+            DaoLog.d(\"Queries left after \" + i + \". GC: \" + map.size());\n             System.gc();\n-            Method cleanupMethod = dataSuperclass.getDeclaredMethod(\"gc\");\n-            cleanupMethod.setAccessible(true);\n-            cleanupMethod.invoke(queryData);\n+            gcMethod.invoke(queryData);\n         }\n         assertEquals(1, map.size());\n     }",
      "parent_sha": "8fe07e5dd343620241aa2f9c6c0c31980000b9a0"
    }
  },
  {
    "oid": "90bab15cad1f8a7ca876c32533e5e691f70a63df",
    "message": "Simplify log output.",
    "date": "2015-09-14T10:19:06Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/90bab15cad1f8a7ca876c32533e5e691f70a63df",
    "details": {
      "sha": "2b9f96265cff86aedc0a6d94bb859810c417630c",
      "filename": "PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/90bab15cad1f8a7ca876c32533e5e691f70a63df/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/90bab15cad1f8a7ca876c32533e5e691f70a63df/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/PerformanceTests%2FCupboard%2Fsrc%2FandroidTest%2Fjava%2Fde%2Fgreenrobot%2Fperformance%2Fcupboard%2FPerformanceTestCupboard.java?ref=90bab15cad1f8a7ca876c32533e5e691f70a63df",
      "patch": "@@ -14,12 +14,14 @@\n \n public class PerformanceTestCupboard extends ApplicationTestCase<Application> {\n \n+    private static final String TAG = \"PerformanceTestCupboard\";\n+\n     private static final int BATCH_SIZE = 10000;\n     private static final int RUNS = 8;\n+\n     private static final String DATABASE_NAME = \"cupboard.db\";\n     private static final int DATABASE_VERSION = 1;\n \n-    private DbHelper dbHelper;\n     private DatabaseCompartment database;\n \n     public PerformanceTestCupboard() {\n@@ -34,7 +36,7 @@ protected void setUp() throws Exception {\n     }\n \n     protected void prepareDb() {\n-        dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);\n+        DbHelper dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);\n         database = cupboard().withDatabase(dbHelper.getWritableDatabase());\n     }\n \n@@ -47,7 +49,7 @@ protected void tearDown() throws Exception {\n     public void testPerformance() throws Exception {\n         //noinspection PointlessBooleanExpression\n         if (!BuildConfig.RUN_PERFORMANCE_TESTS) {\n-            Log.d(\"DAO\", \"Cupboard performance tests are disabled.\");\n+            Log.d(TAG, \"Performance tests are disabled.\");\n             return;\n         }\n \n@@ -58,18 +60,18 @@ public void testPerformance() throws Exception {\n             runTests(BATCH_SIZE);\n         }\n         deleteAll();\n-        Log.d(\"DAO\", \"---------------End\");\n+        Log.d(TAG, \"---------------End\");\n     }\n \n     protected void deleteAll() {\n         long start = System.currentTimeMillis();\n         database.delete(SimpleEntityNotNull.class, \"\");\n         long time = System.currentTimeMillis() - start;\n-        Log.d(\"DAO\", \"Cupboard: Deleted all entities in \" + time + \" ms\");\n+        Log.d(TAG, \"Deleted all entities in \" + time + \" ms\");\n     }\n \n     protected void runTests(int entityCount) throws Exception {\n-        Log.d(\"DAO\", \"---------------Start: \" + entityCount);\n+        Log.d(TAG, \"---------------Start: \" + entityCount);\n \n         long start, time;\n \n@@ -87,18 +89,17 @@ protected void runTests(int entityCount) throws Exception {\n         start = System.currentTimeMillis();\n         database.put(list);\n         time = System.currentTimeMillis() - start;\n-        Log.d(\"DAO\", \"Cupboard: Created (batch) \" + list.size() + \" entities in \" + time + \" ms\");\n+        Log.d(TAG, \"Created (batch) \" + list.size() + \" entities in \" + time + \" ms\");\n \n         start = System.currentTimeMillis();\n         database.put(list);\n         time = System.currentTimeMillis() - start;\n-        Log.d(\"DAO\", \"Cupboard: Updated (batch) \" + list.size() + \" entities in \" + time + \" ms\");\n+        Log.d(TAG, \"Updated (batch) \" + list.size() + \" entities in \" + time + \" ms\");\n \n         start = System.currentTimeMillis();\n         List<SimpleEntityNotNull> reloaded = database.query(SimpleEntityNotNull.class).list();\n         time = System.currentTimeMillis() - start;\n-        Log.d(\"DAO\",\n-                \"Cupboard: Loaded (batch) \" + reloaded.size() + \" entities in \" + time + \" ms\");\n+        Log.d(TAG, \"Loaded (batch) \" + reloaded.size() + \" entities in \" + time + \" ms\");\n \n         start = System.currentTimeMillis();\n         for (int i = 0; i < reloaded.size(); i++) {\n@@ -115,11 +116,10 @@ protected void runTests(int entityCount) throws Exception {\n             entity.getSimpleByteArray();\n         }\n         time = System.currentTimeMillis() - start;\n-        Log.d(\"DAO\", \"Cupboard: Accessed properties of \" + reloaded.size() + \" entities in \" + time\n-                + \" ms\");\n \n+        Log.d(TAG, \"Accessed properties of \" + reloaded.size() + \" entities in \" + time + \" ms\");\n         System.gc();\n-        Log.d(\"DAO\", \"---------------End: \" + entityCount);\n+        Log.d(TAG, \"---------------End: \" + entityCount);\n     }\n \n     protected void runOneByOne(List<SimpleEntityNotNull> list, int count) throws SQLException {\n@@ -130,13 +130,13 @@ protected void runOneByOne(List<SimpleEntityNotNull> list, int count) throws SQL\n             database.put(list.get(i));\n         }\n         time = System.currentTimeMillis() - start;\n-        Log.d(\"DAO\", \"Cupboard: Inserted (one-by-one) \" + count + \" entities in \" + time + \" ms\");\n+        Log.d(TAG, \"Inserted (one-by-one) \" + count + \" entities in \" + time + \" ms\");\n \n         start = System.currentTimeMillis();\n         for (int i = 0; i < count; i++) {\n             database.put(list.get(i));\n         }\n         time = System.currentTimeMillis() - start;\n-        Log.d(\"DAO\", \"Cupboard: Updated (one-by-one) \" + count + \" entities in \" + time + \" ms\");\n+        Log.d(TAG, \"Updated (one-by-one) \" + count + \" entities in \" + time + \" ms\");\n     }\n }",
      "parent_sha": "d42186cfee84b57c24df32161985185bd6579d7c"
    }
  },
  {
    "oid": "f319ff25df648530c94e270b65365b39da47d7ba",
    "message": "avoid locking while compiling any statement (accessing the db) to avoid deadlocks on lock-savvy DBs like SQLCipher.",
    "date": "2016-05-23T16:58:30Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/f319ff25df648530c94e270b65365b39da47d7ba",
    "details": {
      "sha": "313fbdb15e25e302073a3aa3653993d0bf12ccff",
      "filename": "DaoCore/src/main/java/de/greenrobot/dao/internal/TableStatements.java",
      "status": "modified",
      "additions": 26,
      "deletions": 8,
      "changes": 34,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/f319ff25df648530c94e270b65365b39da47d7ba/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/f319ff25df648530c94e270b65365b39da47d7ba/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fmain%2Fjava%2Fde%2Fgreenrobot%2Fdao%2Finternal%2FTableStatements.java?ref=f319ff25df648530c94e270b65365b39da47d7ba",
      "patch": "@@ -19,6 +19,8 @@\n import android.database.sqlite.SQLiteStatement;\n \n /** Helper class to create SQL statements for specific tables (used by greenDAO internally). */\n+// Note: avoid locking while compiling any statement (accessing the db) to avoid deadlocks on lock-savvy DBs like\n+// SQLCipher.\n public class TableStatements {\n     private final SQLiteDatabase db;\n     private final String tablename;\n@@ -44,48 +46,64 @@ public TableStatements(SQLiteDatabase db, String tablename, String[] allColumns,\n \n     public SQLiteStatement getInsertStatement() {\n         if (insertStatement == null) {\n+            String sql = SqlUtils.createSqlInsert(\"INSERT INTO \", tablename, allColumns);\n+            SQLiteStatement newInsertStatement = db.compileStatement(sql);\n             synchronized (this) {\n                 if (insertStatement == null) {\n-                    String sql = SqlUtils.createSqlInsert(\"INSERT INTO \", tablename, allColumns);\n-                    insertStatement = db.compileStatement(sql);\n+                    insertStatement = newInsertStatement;\n                 }\n             }\n+            if (insertStatement != newInsertStatement) {\n+                newInsertStatement.close();\n+            }\n         }\n         return insertStatement;\n     }\n \n     public SQLiteStatement getInsertOrReplaceStatement() {\n         if (insertOrReplaceStatement == null) {\n+            String sql = SqlUtils.createSqlInsert(\"INSERT OR REPLACE INTO \", tablename, allColumns);\n+            SQLiteStatement newInsertOrReplaceStatement = db.compileStatement(sql);\n             synchronized (this) {\n                 if (insertOrReplaceStatement == null) {\n-                    String sql = SqlUtils.createSqlInsert(\"INSERT OR REPLACE INTO \", tablename, allColumns);\n-                    insertOrReplaceStatement = db.compileStatement(sql);\n+                    insertOrReplaceStatement = newInsertOrReplaceStatement;\n                 }\n             }\n+            if (insertOrReplaceStatement != newInsertOrReplaceStatement) {\n+                newInsertOrReplaceStatement.close();\n+            }\n         }\n         return insertOrReplaceStatement;\n     }\n \n     public SQLiteStatement getDeleteStatement() {\n         if (deleteStatement == null) {\n+            String sql = SqlUtils.createSqlDelete(tablename, pkColumns);\n+            SQLiteStatement newDeleteStatement = db.compileStatement(sql);\n             synchronized (this) {\n                 if (deleteStatement == null) {\n-                    String sql = SqlUtils.createSqlDelete(tablename, pkColumns);\n-                    deleteStatement = db.compileStatement(sql);\n+                    deleteStatement = newDeleteStatement;\n                 }\n             }\n+            if (deleteStatement != newDeleteStatement) {\n+                newDeleteStatement.close();\n+            }\n         }\n         return deleteStatement;\n     }\n \n     public SQLiteStatement getUpdateStatement() {\n         if (updateStatement == null) {\n+            String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);\n+            SQLiteStatement newUpdateStatement = db.compileStatement(sql);\n             synchronized (this) {\n                 if (updateStatement == null) {\n-                    String sql = SqlUtils.createSqlUpdate(tablename, allColumns, pkColumns);\n-                    updateStatement = db.compileStatement(sql);\n+                    updateStatement = newUpdateStatement;\n                 }\n             }\n+            if (updateStatement != newUpdateStatement) {\n+                newUpdateStatement.close();\n+            }\n         }\n         return updateStatement;\n     }",
      "parent_sha": "354eb63ed54abc9aa4161e22d352e2459e5f1841"
    }
  },
  {
    "oid": "483bc3f37555681e76bbe4492845da400b14bec3",
    "message": "Additional check that key can be acquired (issue #5)",
    "date": "2012-02-13T19:04:15Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/483bc3f37555681e76bbe4492845da400b14bec3",
    "details": {
      "sha": "363ce235942931493c68a290bf5d69ecb7a6a848",
      "filename": "DaoCore/src/de/greenrobot/dao/AbstractDao.java",
      "status": "modified",
      "additions": 18,
      "deletions": 3,
      "changes": 21,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/483bc3f37555681e76bbe4492845da400b14bec3/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/483bc3f37555681e76bbe4492845da400b14bec3/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2FAbstractDao.java?ref=483bc3f37555681e76bbe4492845da400b14bec3",
      "patch": "@@ -153,7 +153,8 @@ public List<T> loadAll() {\n     /** Detaches an entity from the identity scope (session). Subsequent query results won't return this object. */\r\n     public boolean detach(T entity) {\r\n         if (identityScope != null) {\r\n-            return identityScope.detach(getKey(entity), entity);\r\n+            K key = getKeyVerified(entity);\r\n+            return identityScope.detach(key, entity);\r\n         } else {\r\n             return false;\r\n         }\r\n@@ -379,7 +380,7 @@ public void deleteAll() {\n     /** Deletes the given entity from the database. Currently, only single value PK entities are supported. */\r\n     public void delete(T entity) {\r\n         assertSinglePk();\r\n-        K key = getKey(entity);\r\n+        K key = getKeyVerified(entity);\r\n         deleteByKey(key);\r\n         if (identityScope != null) {\r\n             identityScope.remove(key);\r\n@@ -406,7 +407,7 @@ public void deleteByKey(K key) {\n     /** Resets all locally changed properties of the entity by reloading the values from the database. */\r\n     public void refresh(T entity) {\r\n         assertSinglePk();\r\n-        K key = getKey(entity);\r\n+        K key = getKeyVerified(entity);\r\n         String sql = statements.getSelectByKey();\r\n         String[] keyArray = new String[] { key.toString() };\r\n         Cursor cursor = db.rawQuery(sql, keyArray);\r\n@@ -521,6 +522,20 @@ public long count() {\n         return DatabaseUtils.queryNumEntries(db, '\\'' + config.tablename + '\\'');\r\n     }\r\n \r\n+    /** See {@link #getKey(Object)}, but guarantees that the returned key is never null (throws if null). */\r\n+    protected K getKeyVerified(T entity) {\r\n+        K key = getKey(entity);\r\n+        if (key == null) {\r\n+            if (entity == null) {\r\n+                throw new NullPointerException(\"Entity may not be null\");\r\n+            } else {\r\n+                throw new DaoException(\"Entity has no key\");\r\n+            }\r\n+        } else {\r\n+            return key;\r\n+        }\r\n+    }\r\n+\r\n     /** Reads the values from the current position of the given cursor and returns a new entity. */\r\n     abstract protected T readEntity(Cursor cursor, int offset);\r\n \r",
      "parent_sha": "c94df123bae46d31099b1f787b813cd129b3e59a"
    }
  },
  {
    "oid": "43857d507999f0a8ef9d60962e0ffe463c4df4d5",
    "message": "typo",
    "date": "2015-07-01T18:41:46Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/43857d507999f0a8ef9d60962e0ffe463c4df4d5",
    "details": {
      "sha": "c2e5bf9cf631c22871dc954b0a295c66abe84a7b",
      "filename": "DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/43857d507999f0a8ef9d60962e0ffe463c4df4d5/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FAbstractQuery.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/43857d507999f0a8ef9d60962e0ffe463c4df4d5/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FAbstractQuery.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoCore%2Fsrc%2Fde%2Fgreenrobot%2Fdao%2Fquery%2FAbstractQuery.java?ref=43857d507999f0a8ef9d60962e0ffe463c4df4d5",
      "patch": "@@ -25,7 +25,7 @@\n  * @author Markus\n  * \n  * @param <T>\n- *            The enitity class the query will return results for.\n+ *            The entity class the query will return results for.\n  */\n // TODO support long, double, blob types directly\n abstract class AbstractQuery<T> {",
      "parent_sha": "b3858b8b29e8f2c7ded846f1e7622667c5259ad9"
    }
  },
  {
    "oid": "7e092037540654369c9a59beb0cb5250465e21f7",
    "message": "testJoinMixedParameterValues",
    "date": "2015-06-26T19:55:51Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/7e092037540654369c9a59beb0cb5250465e21f7",
    "details": {
      "sha": "54b855463b7131ab1f15025328af4b7d2c8925d8",
      "filename": "DaoTest/src/de/greenrobot/daotest/query/JoinTest.java",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/7e092037540654369c9a59beb0cb5250465e21f7/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FJoinTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/7e092037540654369c9a59beb0cb5250465e21f7/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FJoinTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fquery%2FJoinTest.java?ref=7e092037540654369c9a59beb0cb5250465e21f7",
      "patch": "@@ -67,6 +67,26 @@ public void testJoinSimpleParameterValue() {\n         }\n     }\n \n+    public void testJoinMixedParameterValues() {\n+        prepareData();\n+        QueryBuilder<RelationEntity> queryBuilder = relationEntityDao.queryBuilder();\n+        queryBuilder.where(RelationEntityDao.Properties.SimpleString.like(\"\"), RelationEntityDao.Properties.SimpleString.ge(\"\"));\n+        Join<RelationEntity, TestEntity> join = queryBuilder.join(RelationEntityDao.Properties.TestIdNotNull,\n+                TestEntity.class);\n+        join.where(Properties.SimpleInt.le(0));\n+        queryBuilder.offset(0).limit(0);\n+        Query<RelationEntity> query = queryBuilder.build();\n+        query.setParameter(0, \"entity-%\");\n+        query.setParameter(1, \"entity-4\");\n+        query.setParameter(2, 6);\n+        query.setOffset(1);\n+        query.setLimit(99);\n+        List<RelationEntity> entities = query.list();\n+        assertEquals(2, entities.size());\n+        assertEquals(\"entity-5\", entities.get(0).getSimpleString());\n+        assertEquals(\"entity-6\", entities.get(1).getSimpleString());\n+    }\n+\n     public void testJoinDelete() {\n         prepareData();\n         QueryBuilder<RelationEntity> queryBuilder = createQueryBuilder(5);\n@@ -76,7 +96,7 @@ public void testJoinDelete() {\n             assertEquals(\"JOINs are not supported for DELETE queries\", e.getMessage());\n             return;\n         }\n-        // Unsupported by SQLite\n+        // Never executed, unsupported by SQLite\n         assertEquals(9, relationEntityDao.count());\n         assertEquals(10, testEntityDao.count());\n         assertNull(relationEntityDao.queryBuilder().where(Properties.SimpleString.eq(\"entity-5\")).unique());",
      "parent_sha": "9ce53cd5dfd0308a70002dc3935c854d5ca1a136"
    }
  },
  {
    "oid": "4dcb2d45f71ef979eda66145d6a283660bccd5ff",
    "message": "using TestSubscriber",
    "date": "2016-07-14T05:22:48Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/4dcb2d45f71ef979eda66145d6a283660bccd5ff",
    "details": {
      "sha": "e5c641877e09c1c70917eeca85d9087f74d9078a",
      "filename": "DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/4dcb2d45f71ef979eda66145d6a283660bccd5ff/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/4dcb2d45f71ef979eda66145d6a283660bccd5ff/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2FandroidTest%2Fjava%2Forg%2Fgreenrobot%2Fgreendao%2Fdaotest%2Frx%2FRxDaoTest.java?ref=4dcb2d45f71ef979eda66145d6a283660bccd5ff",
      "patch": "@@ -7,7 +7,8 @@\n \n import java.util.List;\n \n-import rx.observables.BlockingObservable;\n+import rx.Observable;\n+import rx.observers.TestSubscriber;\n \n public class RxDaoTest extends AbstractDaoTest<TestEntityDao, TestEntity, Long> {\n \n@@ -26,8 +27,17 @@ protected void setUp() throws Exception {\n     public void testLoadAll() {\n         insertEntity(\"foo\");\n         insertEntity(\"bar\");\n-        BlockingObservable<List<TestEntity>> blockingObservable = rxDao.loadAll().toBlocking();\n-        List<TestEntity> entities = blockingObservable.first();\n+\n+        Observable<List<TestEntity>> observable = rxDao.loadAll();\n+        TestSubscriber<List<TestEntity>> testSubscriber = new TestSubscriber<>();\n+        observable.subscribe(testSubscriber);\n+        testSubscriber.assertCompleted();\n+        testSubscriber.assertNoErrors();\n+\n+        assertEquals(1, testSubscriber.getValueCount());\n+        List<TestEntity> entities = testSubscriber.getOnNextEvents().get(0);\n+\n+        // Order of entities is unspecified\n         int foo = 0, bar = 0;\n         for (TestEntity entity : entities) {\n             String value = entity.getSimpleStringNotNull();",
      "parent_sha": "850369f77ea7819f38bfc48b089ee46aad4726f3"
    }
  },
  {
    "oid": "2f043f48daa8fa821994b115e6c92e5aa7b6e2e9",
    "message": "Add runs to greendao indexed test.",
    "date": "2015-09-22T10:42:22Z",
    "url": "https://github.com/greenrobot/greenDAO/commit/2f043f48daa8fa821994b115e6c92e5aa7b6e2e9",
    "details": {
      "sha": "1a0822ec31fb25313388a8db5e88b9bb64944e0d",
      "filename": "DaoTest/src/de/greenrobot/daotest/performance/IndexedStringPerformanceTest.java",
      "status": "modified",
      "additions": 17,
      "deletions": 9,
      "changes": 26,
      "blob_url": "https://github.com/greenrobot/greenDAO/blob/2f043f48daa8fa821994b115e6c92e5aa7b6e2e9/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FIndexedStringPerformanceTest.java",
      "raw_url": "https://github.com/greenrobot/greenDAO/raw/2f043f48daa8fa821994b115e6c92e5aa7b6e2e9/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FIndexedStringPerformanceTest.java",
      "contents_url": "https://api.github.com/repos/greenrobot/greenDAO/contents/DaoTest%2Fsrc%2Fde%2Fgreenrobot%2Fdaotest%2Fperformance%2FIndexedStringPerformanceTest.java?ref=2f043f48daa8fa821994b115e6c92e5aa7b6e2e9",
      "patch": "@@ -17,20 +17,24 @@ public class IndexedStringPerformanceTest\n         extends AbstractDaoTest<IndexedStringEntityDao, IndexedStringEntity, Long> {\n \n     private static final int BATCH_SIZE = 10000;\n-    private static final int INDEXED_RUNS = 1000;\n+    private static final int QUERY_COUNT = 1000;\n+    private static final int RUNS = 8;\n \n     public IndexedStringPerformanceTest() {\n         super(IndexedStringEntityDao.class, false);\n     }\n \n     public void testIndexedStringEntityQuery() {\n         // disabled for regular builds\n-//        doIndexedStringEntityQuery();\n+//        DaoLog.d(\"--------Indexed Queries: Start\");\n+//        for (int i = 0; i < RUNS; i++) {\n+//            DaoLog.d(\"----Run \" + (i + 1) + \" of \" + RUNS);\n+//            doIndexedStringEntityQuery();\n+//        }\n+//        DaoLog.d(\"--------Indexed Queries: End\");\n     }\n \n     private void doIndexedStringEntityQuery() {\n-        DaoLog.d(\"---------------Indexed Queries: Start\");\n-\n         // create entities\n         List<IndexedStringEntity> entities = new ArrayList<>(BATCH_SIZE);\n         String[] fixedRandomStrings = StringGenerator.createFixedRandomStrings(BATCH_SIZE);\n@@ -47,19 +51,23 @@ private void doIndexedStringEntityQuery() {\n         DaoLog.d(\"Inserted entities.\");\n \n         // query for entities by indexed string at random\n-        int[] randomIndices = StringGenerator.getFixedRandomIndices(INDEXED_RUNS, BATCH_SIZE - 1);\n+        int[] randomIndices = StringGenerator.getFixedRandomIndices(QUERY_COUNT, BATCH_SIZE - 1);\n \n         long start = System.currentTimeMillis();\n-        for (int i = 0; i < INDEXED_RUNS; i++) {\n+        for (int i = 0; i < QUERY_COUNT; i++) {\n             int nextIndex = randomIndices[i];\n-            dao.queryBuilder()\n+            //noinspection unused\n+            List<IndexedStringEntity> query = dao.queryBuilder()\n                     .where(IndexedStringEntityDao.Properties.IndexedString.eq(\n                             fixedRandomStrings[nextIndex]))\n                     .list();\n         }\n         long time = System.currentTimeMillis() - start;\n-        DaoLog.d(\"Queried for \" + INDEXED_RUNS + \" indexed entities in \" + time + \" ms\");\n+        DaoLog.d(\"Queried for \" + QUERY_COUNT + \" of \" + BATCH_SIZE + \" indexed entities in \" + time\n+                + \" ms.\");\n \n-        DaoLog.d(\"---------------Indexed Queries: End\");\n+        // delete all entities\n+        dao.deleteAll();\n+        DaoLog.d(\"Deleted all entities.\");\n     }\n }",
      "parent_sha": "d294e81b27fe774bba27079675bd5a85dbf834f9"
    }
  }
]