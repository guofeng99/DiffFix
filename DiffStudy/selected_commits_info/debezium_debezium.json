[
  {
    "oid": "950ee4d212e3ab87fecfee202dc2d2fefd6556fc",
    "message": "DBZ-4425 Fix Oracle Infinispan unavailable value serialization",
    "date": "2021-12-09T01:43:19Z",
    "url": "https://github.com/debezium/debezium/commit/950ee4d212e3ab87fecfee202dc2d2fefd6556fc",
    "details": {
      "sha": "a20a98a6edf86fc8611162e92d6f32f79b8c06ba",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/logminer/processor/infinispan/marshalling/LogMinerDmlEntryImplAdapter.java",
      "status": "modified",
      "additions": 27,
      "deletions": 7,
      "changes": 34,
      "blob_url": "https://github.com/debezium/debezium/blob/950ee4d212e3ab87fecfee202dc2d2fefd6556fc/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2Finfinispan%2Fmarshalling%2FLogMinerDmlEntryImplAdapter.java",
      "raw_url": "https://github.com/debezium/debezium/raw/950ee4d212e3ab87fecfee202dc2d2fefd6556fc/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2Finfinispan%2Fmarshalling%2FLogMinerDmlEntryImplAdapter.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2Finfinispan%2Fmarshalling%2FLogMinerDmlEntryImplAdapter.java?ref=950ee4d212e3ab87fecfee202dc2d2fefd6556fc",
      "patch": "@@ -11,6 +11,7 @@\n import org.infinispan.protostream.annotations.ProtoFactory;\n import org.infinispan.protostream.annotations.ProtoField;\n \n+import io.debezium.connector.oracle.OracleValueConverters;\n import io.debezium.connector.oracle.logminer.parser.LogMinerDmlEntryImpl;\n \n /**\n@@ -42,6 +43,14 @@ public class LogMinerDmlEntryImplAdapter {\n      */\n     private static final String NULL_VALUE_SENTINEL = \"$$DBZ-NULL$$\";\n \n+    /**\n+     * The supplied value arrays can now be populated with {@link OracleValueConverters#UNAVAILABLE_VALUE}\n+     * which is simple java object.  This cannot be represented as a string in the cached Infinispan record\n+     * and so this sentinel is used to translate the runtime object representation to a serializable form\n+     * and back during cache to object conversion.\n+     */\n+    private static final String UNAVAILABLE_VALUE_SENTINEL = \"$$DBZ-UNAVAILABLE-VALUE$$\";\n+\n     /**\n      * A ProtoStream factory that creates a {@link LogMinerDmlEntryImpl} instance from field values.\n      *\n@@ -119,27 +128,35 @@ public String getOwner(LogMinerDmlEntryImpl entry) {\n     /**\n      * Converts the provided object-array to a string-array.\n      *\n-     * This conversion is safe since LogMinerDmlParser always populates the object-array with strings.\n-     * Any element in the array that is {@code null} will be initialized as {@link #NULL_VALUE_SENTINEL}.\n+     * Internally this method examines the supplied object array and handles conversion for {@literal null}\n+     * and {@link OracleValueConverters#UNAVAILABLE_VALUE} values so that they can be serialized.\n      *\n      * @param values the values array to be converted, should never be {@code null}\n      * @return the values array converted to a string-array\n      */\n     private String[] objectArrayToStringArray(Object[] values) {\n-        String[] results = Arrays.copyOf(values, values.length, String[].class);\n-        for (int i = 0; i < results.length; ++i) {\n-            if (results[i] == null) {\n+        String[] results = new String[values.length];\n+        for (int i = 0; i < values.length; ++i) {\n+            if (values[i] == null) {\n                 results[i] = NULL_VALUE_SENTINEL;\n             }\n+            else if (values[i] == OracleValueConverters.UNAVAILABLE_VALUE) {\n+                results[i] = UNAVAILABLE_VALUE_SENTINEL;\n+            }\n+            else {\n+                results[i] = (String) values[i];\n+            }\n         }\n         return results;\n     }\n \n     /**\n      * Converters the provided string-array to an object-array.\n      *\n-     * This conversion is safe since Strings are also Objects.  This method also is responsible for the\n-     * conversion of {@link #NULL_VALUE_SENTINEL} sentinel values to {@code null}.\n+     * Internally this method examines the supplied string array and handles the conversion of specific\n+     * sentinel values back to their runtime equivalents.  For example, {@link #NULL_VALUE_SENTINEL}\n+     * will be interpreted as {@literal null} and {@link #UNAVAILABLE_VALUE_SENTINEL} will be converted\n+     * back to {@link OracleValueConverters#UNAVAILABLE_VALUE}.\n      *\n      * @param values the values array to eb converted, should never be {@code null}\n      * @return the values array converted to an object-array\n@@ -150,6 +167,9 @@ private Object[] stringArrayToObjectArray(String[] values) {\n             if (results[i].equals(NULL_VALUE_SENTINEL)) {\n                 results[i] = null;\n             }\n+            else if (results[i].equals(UNAVAILABLE_VALUE_SENTINEL)) {\n+                results[i] = OracleValueConverters.UNAVAILABLE_VALUE;\n+            }\n         }\n         return results;\n     }",
      "parent_sha": "cdf31f67c22a15c767d3e86a449ebfb8a1485f87"
    }
  },
  {
    "oid": "af2a55cc9b1d6548e70a24c3795e9bb0665fe952",
    "message": "DBZ-306 make JSON serializer a RecordMakers field to avoid object recreations\n\nalso fix some checkstyle violations which are not yet reported during build process\n\nsee full PR discussion about the rationale behind the taken approach here https://github.com/debezium/debezium/pull/258",
    "date": "2017-09-20T07:36:22Z",
    "url": "https://github.com/debezium/debezium/commit/af2a55cc9b1d6548e70a24c3795e9bb0665fe952",
    "details": {
      "sha": "544bd24a1fa4e3abd8afc34c1e136b5ffa2ca169",
      "filename": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/RecordMakers.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/debezium/debezium/blob/af2a55cc9b1d6548e70a24c3795e9bb0665fe952/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FRecordMakers.java",
      "raw_url": "https://github.com/debezium/debezium/raw/af2a55cc9b1d6548e70a24c3795e9bb0665fe952/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FRecordMakers.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FRecordMakers.java?ref=af2a55cc9b1d6548e70a24c3795e9bb0665fe952",
      "patch": "@@ -11,6 +11,7 @@\n \n import com.mongodb.DBCollection;\n import com.mongodb.util.JSONSerializers;\n+import com.mongodb.util.ObjectSerializer;\n import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.SchemaBuilder;\n import org.apache.kafka.connect.data.Struct;\n@@ -36,6 +37,7 @@\n @ThreadSafe\n public class RecordMakers {\n \n+    private static final ObjectSerializer jsonSerializer = JSONSerializers.getStrict();\n     private static final Map<String, Operation> operationLiterals = new HashMap<>();\n     static {\n         operationLiterals.put(\"i\", Operation.CREATE);\n@@ -204,13 +206,13 @@ record = new SourceRecord(sourcePartition, offset, topicName, partition, keySche\n         }\n \n         protected String idObjToJson(Object idObj) {\n-            if(idObj == null) {\n+            if (idObj == null) {\n                 return null;\n             }\n-            if(!(idObj instanceof Document)) {\n-                return JSONSerializers.getStrict().serialize(idObj);\n+            if (!(idObj instanceof Document)) {\n+                return jsonSerializer.serialize(idObj);\n             }\n-            return JSONSerializers.getStrict().serialize(\n+            return jsonSerializer.serialize(\n                     ((Document)idObj).get(DBCollection.ID_FIELD_NAME)\n             );\n         }",
      "parent_sha": "1d75cbdc4ea5d0b9bc65f93a905007c9d53ba1e9"
    }
  },
  {
    "oid": "6d686d75435522ea1534d488f99998dd9cc1da50",
    "message": "DBZ-3257 Use DebeziumException instead",
    "date": "2021-03-23T05:12:04Z",
    "url": "https://github.com/debezium/debezium/commit/6d686d75435522ea1534d488f99998dd9cc1da50",
    "details": {
      "sha": "03974495071e760e684debbf19ac6958efa05a27",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/OracleValueConverters.java",
      "status": "modified",
      "additions": 16,
      "deletions": 12,
      "changes": 28,
      "blob_url": "https://github.com/debezium/debezium/blob/6d686d75435522ea1534d488f99998dd9cc1da50/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleValueConverters.java",
      "raw_url": "https://github.com/debezium/debezium/raw/6d686d75435522ea1534d488f99998dd9cc1da50/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleValueConverters.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleValueConverters.java?ref=6d686d75435522ea1534d488f99998dd9cc1da50",
      "patch": "@@ -27,6 +27,7 @@\n import org.apache.kafka.connect.data.SchemaBuilder;\n import org.apache.kafka.connect.data.Struct;\n \n+import io.debezium.DebeziumException;\n import io.debezium.config.CommonConnectorConfig.BinaryHandlingMode;\n import io.debezium.data.SpecialValueDecimal;\n import io.debezium.data.VariableScaleDecimal;\n@@ -241,10 +242,13 @@ protected Object convertString(Column column, Field fieldDefn, Object data) {\n         if (data instanceof Clob) {\n             try {\n                 Clob clob = (Clob) data;\n+                // Note that java.sql.Clob specifies that the first character starts at 1\n+                // and that length must be greater-than or equal to 0.  So for an empty\n+                // clob field, a call to getSubString(1, 0) is perfectly valid.\n                 return clob.getSubString(1, (int) clob.length());\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n         if (data instanceof String) {\n@@ -291,7 +295,7 @@ protected Object convertBinary(Column column, Field fieldDefn, Object data, Bina\n                 return blob.getBytes(0, Long.valueOf(blob.length()).intValue());\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n         return super.convertBinary(column, fieldDefn, data, mode);\n@@ -304,7 +308,7 @@ protected Object convertInteger(Column column, Field fieldDefn, Object data) {\n                 data = ((NUMBER) data).intValue();\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n \n@@ -324,7 +328,7 @@ else if (data instanceof BINARY_FLOAT) {\n                 return ((BINARY_FLOAT) data).floatValue();\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n         else if (data instanceof String) {\n@@ -341,7 +345,7 @@ protected Object convertDouble(Column column, Field fieldDefn, Object data) {\n                 return ((BINARY_DOUBLE) data).doubleValue();\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n         else if (data instanceof String) {\n@@ -358,7 +362,7 @@ protected Object convertDecimal(Column column, Field fieldDefn, Object data) {\n                 data = ((NUMBER) data).bigDecimalValue();\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n \n@@ -396,7 +400,7 @@ protected Object convertNumericAsTinyInt(Column column, Field fieldDefn, Object\n                 data = ((NUMBER) data).byteValue();\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n \n@@ -409,7 +413,7 @@ protected Object convertNumericAsSmallInt(Column column, Field fieldDefn, Object\n                 data = ((NUMBER) data).shortValue();\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n \n@@ -422,7 +426,7 @@ protected Object convertNumericAsInteger(Column column, Field fieldDefn, Object\n                 data = ((NUMBER) data).intValue();\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n \n@@ -435,7 +439,7 @@ protected Object convertNumericAsBigInteger(Column column, Field fieldDefn, Obje\n                 data = ((NUMBER) data).longValue();\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n \n@@ -464,7 +468,7 @@ protected Object convertBoolean(Column column, Field fieldDefn, Object data) {\n                 return ((NUMBER) data).intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;\n             }\n             catch (SQLException e) {\n-                throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+                throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n             }\n         }\n         return super.convertBoolean(column, fieldDefn, data);\n@@ -528,7 +532,7 @@ else if (data instanceof TIMESTAMPLTZ) {\n             }\n         }\n         catch (SQLException e) {\n-            throw new RuntimeException(\"Couldn't convert value for column \" + column.name(), e);\n+            throw new DebeziumException(\"Couldn't convert value for column \" + column.name(), e);\n         }\n         return data;\n     }",
      "parent_sha": "9aa1ba1471924254476c5c834e2f927a77b7c391"
    }
  },
  {
    "oid": "77eaa0a293d947bd264c85e20205cb84a9a16a53",
    "message": "DBZ-1297 Add boolean type in test",
    "date": "2021-10-01T20:29:53Z",
    "url": "https://github.com/debezium/debezium/commit/77eaa0a293d947bd264c85e20205cb84a9a16a53",
    "details": {
      "sha": "88b7cddb9641c4548270438a19bd8033d95200fa",
      "filename": "debezium-core/src/test/java/io/debezium/transforms/outbox/EventRouterTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debezium/debezium/blob/77eaa0a293d947bd264c85e20205cb84a9a16a53/debezium-core%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftransforms%2Foutbox%2FEventRouterTest.java",
      "raw_url": "https://github.com/debezium/debezium/raw/77eaa0a293d947bd264c85e20205cb84a9a16a53/debezium-core%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftransforms%2Foutbox%2FEventRouterTest.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftransforms%2Foutbox%2FEventRouterTest.java?ref=77eaa0a293d947bd264c85e20205cb84a9a16a53",
      "patch": "@@ -911,7 +911,7 @@ public void canExpandJSONPayloadIfConfigured() {\n                 \"UserCreated\",\n                 \"10711fa5\",\n                 \"User\",\n-                \"{\\\"fullName\\\": \\\"John Doe\\\", \\\"rating\\\": 4.9, \\\"age\\\": 42, \\\"pets\\\": [\\\"dog\\\", \\\"cat\\\"]}\",\n+                \"{\\\"fullName\\\": \\\"John Doe\\\", \\\"enabled\\\": true, \\\"rating\\\": 4.9, \\\"age\\\": 42, \\\"pets\\\": [\\\"dog\\\", \\\"cat\\\"]}\",\n                 new HashMap<>(),\n                 new HashMap<>());\n         final SourceRecord eventRouted = router.apply(eventRecord);\n@@ -921,14 +921,16 @@ public void canExpandJSONPayloadIfConfigured() {\n         Schema valueSchema = eventRouted.valueSchema();\n         assertThat(valueSchema.type()).isEqualTo(SchemaBuilder.struct().type());\n \n-        assertThat(valueSchema.fields().size()).isEqualTo(4);\n+        assertThat(valueSchema.fields().size()).isEqualTo(5);\n         assertThat(valueSchema.field(\"fullName\").schema().type().getName()).isEqualTo(\"string\");\n+        assertThat(valueSchema.field(\"enabled\").schema().type().getName()).isEqualTo(\"boolean\");\n         assertThat(valueSchema.field(\"rating\").schema().type().getName()).isEqualTo(\"float64\");\n         assertThat(valueSchema.field(\"age\").schema().type().getName()).isEqualTo(\"int32\");\n         assertThat(valueSchema.field(\"pets\").schema().type().getName()).isEqualTo(\"array\");\n \n         Struct valueStruct = (Struct) eventRouted.value();\n         assertThat(valueStruct.get(\"fullName\")).isEqualTo(\"John Doe\");\n+        assertThat(valueStruct.get(\"enabled\")).isEqualTo(true);\n         assertThat(valueStruct.get(\"rating\")).isEqualTo(4.9);\n         assertThat(valueStruct.get(\"age\")).isEqualTo(42);\n         assertThat(valueStruct.getArray(\"pets\").size()).isEqualTo(2);",
      "parent_sha": "8fbbe5887a408297f005c8cc9420f03984c7c548"
    }
  },
  {
    "oid": "b51a4be01934567311a0af6b5655f1195761b606",
    "message": "DBZ-4331 Avoid holding metadata lock in R/O incremental snapshots",
    "date": "2021-11-30T08:28:44Z",
    "url": "https://github.com/debezium/debezium/commit/b51a4be01934567311a0af6b5655f1195761b606",
    "details": {
      "sha": "bd00a21610a3737840d0c51ff2825b074036dee0",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlReadOnlyIncrementalSnapshotChangeEventSource.java",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/debezium/debezium/blob/b51a4be01934567311a0af6b5655f1195761b606/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlReadOnlyIncrementalSnapshotChangeEventSource.java",
      "raw_url": "https://github.com/debezium/debezium/raw/b51a4be01934567311a0af6b5655f1195761b606/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlReadOnlyIncrementalSnapshotChangeEventSource.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlReadOnlyIncrementalSnapshotChangeEventSource.java?ref=b51a4be01934567311a0af6b5655f1195761b606",
      "patch": "@@ -177,14 +177,7 @@ public void processTransactionCommittedEvent(Partition partition, OffsetContext\n     }\n \n     protected void updateLowWatermark() {\n-        try {\n-            getExecutedGtidSet(getContext()::setLowWatermark);\n-            // it is required that the chunk selection sees the changes that are committed before its execution\n-            jdbcConnection.commit();\n-        }\n-        catch (SQLException e) {\n-            throw new DebeziumException(e);\n-        }\n+        getExecutedGtidSet(getContext()::setLowWatermark);\n     }\n \n     protected void updateHighWatermark() {\n@@ -205,6 +198,7 @@ private void getExecutedGtidSet(Consumer<GtidSet> watermark) {\n                     }\n                 }\n             });\n+            jdbcConnection.commit();\n         }\n         catch (SQLException e) {\n             throw new DebeziumException(e);",
      "parent_sha": "2347b58250e2d9720f0a07cc9172611474e8d8f1"
    }
  },
  {
    "oid": "eba134817ff7ff03732edd768390539efcd43468",
    "message": "DBZ-894 Making TableIdToStringMapper dedicated functional interface with specifically named method",
    "date": "2018-09-04T10:43:50Z",
    "url": "https://github.com/debezium/debezium/commit/eba134817ff7ff03732edd768390539efcd43468",
    "details": {
      "sha": "6ccf65fc8a4d9b5a732421c7992d115aae511095",
      "filename": "debezium-core/src/main/java/io/debezium/relational/Selectors.java",
      "status": "modified",
      "additions": 42,
      "deletions": 34,
      "changes": 76,
      "blob_url": "https://github.com/debezium/debezium/blob/eba134817ff7ff03732edd768390539efcd43468/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FSelectors.java",
      "raw_url": "https://github.com/debezium/debezium/raw/eba134817ff7ff03732edd768390539efcd43468/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FSelectors.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FSelectors.java?ref=eba134817ff7ff03732edd768390539efcd43468",
      "patch": "@@ -5,7 +5,6 @@\n  */\n package io.debezium.relational;\n \n-import java.util.function.Function;\n import java.util.function.Predicate;\n \n import io.debezium.annotation.Immutable;\n@@ -23,27 +22,32 @@\n  * By default all columns in included tables will be selected, except when they are specifically excluded using regular\n  * expressions that match the columns' fully-qualified names. Therefore, the predicate is constructed using a simple\n  * {@link #excludeColumns(String) static method}.\n- * \n+ *\n  * @author Randall Hauch\n  */\n @Immutable\n public class Selectors {\n-    \n+\n     /**\n      * Obtain a new {@link TableSelectionPredicateBuilder builder} for a table selection predicate.\n-     * \n+     *\n      * @return the builder; never null\n      */\n     public static DatabaseSelectionPredicateBuilder databaseSelector() {\n         return new DatabaseSelectionPredicateBuilder();\n     }\n-    \n+\n     private static boolean isEmpty(String value) {\n         return value == null || value.trim().isEmpty();\n     }\n \n+    /**\n+     * Implementations convert given {@link TableId}s to strings, so regular expressions can be applied to them for the\n+     * purpose of table filtering.\n+     */\n     @FunctionalInterface\n-    public static interface TableIdToStringMapper extends Function<TableId, String> {\n+    public static interface TableIdToStringMapper {\n+        String toString(TableId tableId);\n     }\n \n     /**\n@@ -56,7 +60,7 @@ public static class DatabaseSelectionPredicateBuilder {\n         /**\n          * Specify the names of the databases that should be included. This method will override previously included and\n          * {@link #excludeDatabases(String) excluded} databases.\n-         * \n+         *\n          * @param databaseNames the comma-separated list of database names to include; may be null or empty\n          * @return this builder so that methods can be chained together; never null\n          */\n@@ -73,7 +77,7 @@ public DatabaseSelectionPredicateBuilder includeDatabases(String databaseNames)\n          * Specify the names of the databases that should be excluded. This method will override previously {@link\n          * #excludeDatabases(String) excluded} databases, although {@link #includeDatabases(String) including databases} overrides\n          * exclusions.\n-         * \n+         *\n          * @param databaseNames the comma-separated list of database names to exclude; may be null or empty\n          * @return this builder so that methods can be chained together; never null\n          */\n@@ -88,7 +92,7 @@ public DatabaseSelectionPredicateBuilder excludeDatabases(String databaseNames)\n \n         /**\n          * Build the {@link Predicate} that determines whether a database identified by its name is to be included.\n-         * \n+         *\n          * @return the table selection predicate; never null\n          * @see #includeDatabases(String)\n          * @see #excludeDatabases(String)\n@@ -101,7 +105,7 @@ public Predicate<String> build() {\n \n     /**\n      * Obtain a new {@link TableSelectionPredicateBuilder builder} for a table selection predicate.\n-     * \n+     *\n      * @return the builder; never null\n      */\n     public static TableSelectionPredicateBuilder tableSelector() {\n@@ -122,7 +126,7 @@ public static class TableSelectionPredicateBuilder {\n         /**\n          * Specify the names of the databases that should be included. This method will override previously included and\n          * {@link #excludeDatabases(String) excluded} databases.\n-         * \n+         *\n          * @param databaseNames the comma-separated list of database names to include; may be null or empty\n          * @return this builder so that methods can be chained together; never null\n          */\n@@ -139,7 +143,7 @@ public TableSelectionPredicateBuilder includeDatabases(String databaseNames) {\n          * Specify the names of the databases that should be excluded. This method will override previously {@link\n          * #excludeDatabases(String) excluded} databases, although {@link #includeDatabases(String) including databases} overrides\n          * exclusions.\n-         * \n+         *\n          * @param databaseNames the comma-separated list of database names to exclude; may be null or empty\n          * @return this builder so that methods can be chained together; never null\n          */\n@@ -151,7 +155,7 @@ public TableSelectionPredicateBuilder excludeDatabases(String databaseNames) {\n             }\n             return this;\n         }\n-    \n+\n         /**\n          * Specify the names of the schemas that should be included. This method will override previously included and\n          * {@link #excludeSchemas(String) excluded} schemas.\n@@ -167,7 +171,7 @@ public TableSelectionPredicateBuilder includeSchemas(String schemaNames) {\n             }\n             return this;\n         }\n-    \n+\n         /**\n          * Specify the names of the schemas that should be excluded. This method will override previously {@link\n          * #excludeSchemas(String) excluded} schemas, although {@link #includeSchemas(String)} including schemas} overrides\n@@ -190,7 +194,7 @@ public TableSelectionPredicateBuilder excludeSchemas(String schemaNames) {\n          * {@link #excludeTables(String) excluded} table names.\n          * <p>\n          * Note that any specified tables that are in an {@link #excludeDatabases(String) excluded database} will not be included.\n-         * \n+         *\n          * @param fullyQualifiedTableNames the comma-separated list of fully-qualified table names to include; may be null or\n          *            empty\n          * @param tableIdMapper an arbitrary converter used to convert TableId into String for pattern matching.\n@@ -200,9 +204,11 @@ public TableSelectionPredicateBuilder excludeSchemas(String schemaNames) {\n         public TableSelectionPredicateBuilder includeTables(String fullyQualifiedTableNames, TableIdToStringMapper tableIdMapper) {\n             if (isEmpty(fullyQualifiedTableNames)) {\n                 tableInclusions = null;\n-            } else {\n-                tableInclusions = Predicates.includes(fullyQualifiedTableNames, tableIdMapper);\n             }\n+            else {\n+                tableInclusions = Predicates.includes(fullyQualifiedTableNames, tableId -> tableIdMapper.toString(tableId));\n+            }\n+\n             return this;\n         }\n \n@@ -211,7 +217,7 @@ public TableSelectionPredicateBuilder includeTables(String fullyQualifiedTableNa\n          * {@link #excludeTables(String) excluded} table names.\n          * <p>\n          * Note that any specified tables that are in an {@link #excludeDatabases(String) excluded database} will not be included.\n-         * \n+         *\n          * @param fullyQualifiedTableNames the comma-separated list of fully-qualified table names to include; may be null or\n          *            empty\n          * @return this builder so that methods can be chained together; never null\n@@ -226,7 +232,7 @@ public TableSelectionPredicateBuilder includeTables(String fullyQualifiedTableNa\n          * exclusions.\n          * <p>\n          * Note that any specified tables that are in an {@link #excludeDatabases(String) excluded database} will not be included.\n-         * \n+         *\n          * @param fullyQualifiedTableNames the comma-separated list of fully-qualified table names to exclude; may be null or\n          *            empty\n          * @param tableIdMapper an arbitrary converter used to convert TableId into String for pattern matching.\n@@ -236,9 +242,11 @@ public TableSelectionPredicateBuilder includeTables(String fullyQualifiedTableNa\n         public TableSelectionPredicateBuilder excludeTables(String fullyQualifiedTableNames, TableIdToStringMapper tableIdMapper) {\n             if (isEmpty(fullyQualifiedTableNames)) {\n                 tableExclusions = null;\n-            } else {\n-                tableExclusions = Predicates.excludes(fullyQualifiedTableNames, tableIdMapper);\n             }\n+            else {\n+                tableExclusions = Predicates.excludes(fullyQualifiedTableNames, tableId -> tableIdMapper.toString(tableId));\n+            }\n+\n             return this;\n         }\n \n@@ -248,7 +256,7 @@ public TableSelectionPredicateBuilder excludeTables(String fullyQualifiedTableNa\n          * exclusions.\n          * <p>\n          * Note that any specified tables that are in an {@link #excludeDatabases(String) excluded database} will not be included.\n-         * \n+         *\n          * @param fullyQualifiedTableNames the comma-separated list of fully-qualified table names to exclude; may be null or\n          *            empty\n          * @return this builder so that methods can be chained together; never null\n@@ -259,20 +267,20 @@ public TableSelectionPredicateBuilder excludeTables(String fullyQualifiedTableNa\n \n         /**\n          * Build the {@link Predicate} that determines whether a table identified by a given {@link TableId} is to be included.\n-         * \n+         *\n          * @return the table selection predicate; never null\n          * @see #includeDatabases(String)\n          * @see #excludeDatabases(String)\n          * @see #includeTables(String)\n-         * @see #excludeTables(String) \n-         * @see #includeSchemas(String) \n-         * @see #excludeSchemas(String) \n+         * @see #excludeTables(String)\n+         * @see #includeSchemas(String)\n+         * @see #excludeSchemas(String)\n          */\n         public Predicate<TableId> build() {\n             Predicate<TableId> tableFilter = tableInclusions != null ? tableInclusions : tableExclusions;\n             Predicate<String> dbFilter = dbInclusions != null ? dbInclusions : dbExclusions;\n             Predicate<String> schemaFilter = schemaInclusions != null ? schemaInclusions : schemaExclusions;\n-            \n+\n             if (dbFilter != null) {\n                 return buildStartingFromDbFilter(dbFilter, schemaFilter, tableFilter);\n             }\n@@ -284,10 +292,10 @@ public Predicate<TableId> build() {\n             if (tableFilter != null) {\n                 return tableFilter;\n             }\n-            \n+\n             return (id) -> true;\n         }\n-    \n+\n         private Predicate<TableId> buildStartingFromSchemaFilter(Predicate<String> schemaFilter, Predicate<TableId> tableFilter) {\n             assert schemaFilter != null;\n             if (tableFilter != null) {\n@@ -296,21 +304,21 @@ private Predicate<TableId> buildStartingFromSchemaFilter(Predicate<String> schem\n                 return (id) -> schemaFilter.test(id.schema());\n             }\n         }\n-    \n+\n         private Predicate<TableId> buildStartingFromDbFilter(Predicate<String> dbFilter, Predicate<String> schemaFilter,\n                                                              Predicate<TableId> tableFilter) {\n             assert dbFilter != null;\n-            \n+\n             if (schemaFilter != null) {\n                 if (tableFilter != null) {\n                     return (id) -> dbFilter.test(id.catalog()) && schemaFilter.test(id.schema()) && tableFilter.test(id);\n                 } else {\n-                    return (id) -> schemaFilter.test(id.schema());                        \n+                    return (id) -> schemaFilter.test(id.schema());\n                 }\n             } else if (tableFilter != null) {\n                 return (id) -> dbFilter.test(id.catalog()) && tableFilter.test(id);\n             } else {\n-                return (id) -> dbFilter.test(id.catalog());    \n+                return (id) -> dbFilter.test(id.catalog());\n             }\n         }\n     }\n@@ -321,7 +329,7 @@ private Predicate<TableId> buildStartingFromDbFilter(Predicate<String> dbFilter,\n      * <p>\n      * Note that this predicate is completely independent of the table selection predicate, so it is expected that this predicate\n      * be used only <i>after</i> the table selection predicate determined the table containing the column(s) is to be used.\n-     * \n+     *\n      * @param columnNames the comma-separated list of column names names to exclude; may be null or\n      *            empty\n      * @return this builder so that methods can be chained together; never null",
      "parent_sha": "1373ac84753fe6563b15939ab290394abdf46284"
    }
  },
  {
    "oid": "68f31f766275dc24408480ab2a06e553509fd883",
    "message": "[ci] Log records found when expecting no records",
    "date": "2024-02-21T14:00:45Z",
    "url": "https://github.com/debezium/debezium/commit/68f31f766275dc24408480ab2a06e553509fd883",
    "details": {
      "sha": "279e9b247c7dd35f1b6c6912c63eb6056fd78b1e",
      "filename": "debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/debezium/debezium/blob/68f31f766275dc24408480ab2a06e553509fd883/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAbstractConnectorTest.java",
      "raw_url": "https://github.com/debezium/debezium/raw/68f31f766275dc24408480ab2a06e553509fd883/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAbstractConnectorTest.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAbstractConnectorTest.java?ref=68f31f766275dc24408480ab2a06e553509fd883",
      "patch": "@@ -987,7 +987,14 @@ protected void assertConnectorNotRunning() {\n      * Assert that there are no records to consume.\n      */\n     protected void assertNoRecordsToConsume() {\n-        assertThat(consumedLines.isEmpty()).isTrue();\n+        try {\n+            assertThat(consumedLines.isEmpty()).isTrue();\n+        }\n+        catch (org.junit.ComparisonFailure e) {\n+            System.out.println(\"---Assert Expected No Records, Found These---\");\n+            consumedLines.forEach(System.out::println);\n+            throw e;\n+        }\n     }\n \n     /**",
      "parent_sha": "737dd7f814cd1d98d696334a57b434ed17ac9fe4"
    }
  },
  {
    "oid": "5be134eb422f96c14261e6da8a10b75dfa74da12",
    "message": "DBZ-7022 Use prefix names from Envelope class",
    "date": "2024-01-22T09:49:38Z",
    "url": "https://github.com/debezium/debezium/commit/5be134eb422f96c14261e6da8a10b75dfa74da12",
    "details": {
      "sha": "d9e4fab8d9e05eeb193ef67174fb9ed5f7e0fb9e",
      "filename": "debezium-core/src/main/java/io/debezium/transforms/TimezoneConverter.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debezium/debezium/blob/5be134eb422f96c14261e6da8a10b75dfa74da12/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FTimezoneConverter.java",
      "raw_url": "https://github.com/debezium/debezium/raw/5be134eb422f96c14261e6da8a10b75dfa74da12/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FTimezoneConverter.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FTimezoneConverter.java?ref=5be134eb422f96c14261e6da8a10b75dfa74da12",
      "patch": "@@ -92,11 +92,11 @@ public class TimezoneConverter<R extends ConnectRecord<R>> implements Transforma\n     private String convertedTimezone;\n     private List<String> includeList;\n     private List<String> excludeList;\n-    private static final String SOURCE = \"source\";\n+    private static final String SOURCE = Envelope.FieldName.SOURCE;\n     private static final String TOPIC = \"topic\";\n-    private static final String FIELD_SOURCE_PREFIX = \"source.\";\n-    private static final String FIELD_BEFORE_PREFIX = \"before.\";\n-    private static final String FIELD_AFTER_PREFIX = \"after.\";\n+    private static final String FIELD_SOURCE_PREFIX = Envelope.FieldName.SOURCE + \".\";\n+    private static final String FIELD_BEFORE_PREFIX = Envelope.FieldName.BEFORE + \".\";\n+    private static final String FIELD_AFTER_PREFIX = Envelope.FieldName.AFTER + \".\";\n     private static final Pattern TIMEZONE_OFFSET_PATTERN = Pattern.compile(\"^[+-]\\\\d{2}:\\\\d{2}(:\\\\d{2})?$\");\n     private static final Pattern LIST_PATTERN = Pattern.compile(\"^\\\\[(source|topic|[\\\".\\\\w\\\\s_]+):([\\\".\\\\w\\\\s_]+(?::[\\\".\\\\w\\\\s_]+)?(?:,|]$))+$\");\n     private final Map<String, Set<String>> topicFieldsMap = new HashMap<>();",
      "parent_sha": "78a54a3ff756268a56dcc5d48d193cc43e5b3ff5"
    }
  },
  {
    "oid": "a8fa33e44bacbed2b9f2240e41175d9ab5c68b7d",
    "message": "DBZ-85 Corrected log statements to be debug",
    "date": "2016-07-25T21:59:46Z",
    "url": "https://github.com/debezium/debezium/commit/a8fa33e44bacbed2b9f2240e41175d9ab5c68b7d",
    "details": {
      "sha": "9d747a295b39dae46d21823eddf1495162f79d9c",
      "filename": "debezium-core/src/main/java/io/debezium/relational/TableSchemaBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debezium/debezium/blob/a8fa33e44bacbed2b9f2240e41175d9ab5c68b7d/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FTableSchemaBuilder.java",
      "raw_url": "https://github.com/debezium/debezium/raw/a8fa33e44bacbed2b9f2240e41175d9ab5c68b7d/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FTableSchemaBuilder.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FTableSchemaBuilder.java?ref=a8fa33e44bacbed2b9f2240e41175d9ab5c68b7d",
      "patch": "@@ -625,7 +625,7 @@ protected Object handleUnknownData(Column column, Field fieldDefn, Object data)\n     protected Object convertTimestampWithZone(Column column, Field fieldDefn, Object data) {\n         if (data == null) return null;\n         OffsetDateTime dateTime = null;\n-        LoggerFactory.getLogger(getClass()).info(\"TimestampWithZone: \" + data + \" , class=\" + data.getClass());\n+        LOGGER.debug(\"TimestampWithZone: \" + data + \" , class=\" + data.getClass());\n         if (data instanceof OffsetDateTime) {\n             // JDBC specification indicates that this will be the canonical object for this JDBC type.\n             dateTime = (OffsetDateTime) data;\n@@ -687,7 +687,7 @@ protected OffsetDateTime unexpectedTimestampWithZone(Object value, Field fieldDe\n     protected Object convertTimeWithZone(Column column, Field fieldDefn, Object data) {\n         if (data == null) return null;\n         OffsetTime time = null;\n-        LoggerFactory.getLogger(getClass()).info(\"TimeWithZone: \" + data + \" , class=\" + data.getClass());\n+        LOGGER.debug(\"TimeWithZone: \" + data + \" , class=\" + data.getClass());\n         if (data instanceof OffsetTime) {\n             // JDBC specification indicates that this will be the canonical object for this JDBC type.\n             time = (OffsetTime) data;\n@@ -742,7 +742,7 @@ protected OffsetTime unexpectedTimeWithZone(Object value, Field fieldDefn) {\n     protected Object convertTimestamp(Column column, Field fieldDefn, Object data) {\n         if (data == null) return null;\n         java.util.Date date = null;\n-        LoggerFactory.getLogger(getClass()).info(\"Timestamp: \" + data + \" , class=\" + data.getClass());\n+        LOGGER.debug(\"Timestamp: \" + data + \" , class=\" + data.getClass());\n         if (data instanceof java.util.Date) {\n             ZonedDateTime zdt = timeZoneAdapter.toZonedDateTime((java.util.Date)data);\n             date = java.util.Date.from(zdt.toInstant());\n@@ -790,7 +790,7 @@ protected java.util.Date unexpectedTimestamp(Object value, Field fieldDefn) {\n     protected Object convertTime(Column column, Field fieldDefn, Object data) {\n         if (data == null) return null;\n         java.util.Date date = null;\n-        LoggerFactory.getLogger(getClass()).info(\"Time: \" + data + \" , class=\" + data.getClass());\n+        LOGGER.debug(\"Time: \" + data + \" , class=\" + data.getClass());\n         if (data instanceof java.util.Date) {\n             ZonedDateTime zdt = timeZoneAdapter.toZonedDateTime((java.util.Date)data);\n             date = java.util.Date.from(zdt.toInstant());\n@@ -838,7 +838,7 @@ protected java.util.Date unexpectedTime(Object value, Field fieldDefn) {\n     protected Object convertDate(Column column, Field fieldDefn, Object data) {\n         if (data == null) return null;\n         java.util.Date date = null;\n-        LoggerFactory.getLogger(getClass()).info(\"Date: \" + data + \" , class=\" + data.getClass());\n+        LOGGER.debug(\"Date: \" + data + \" , class=\" + data.getClass());\n         if (data instanceof java.util.Date) {\n             ZonedDateTime zdt = timeZoneAdapter.toZonedDateTime((java.util.Date)data);\n             date = java.util.Date.from(zdt.toInstant());",
      "parent_sha": "e3a00e1992c1270276fa6ff267b646bac21f21a9"
    }
  },
  {
    "oid": "98c270a79ea6fc0f1bdf2417868f61fded921856",
    "message": "DBZ-2211 Harden test against potential extra schema event",
    "date": "2020-06-23T15:13:26Z",
    "url": "https://github.com/debezium/debezium/commit/98c270a79ea6fc0f1bdf2417868f61fded921856",
    "details": {
      "sha": "807ca2ff747cdd19ed6c928be3d109954bda7680",
      "filename": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SchemaHistoryTopicIT.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/debezium/debezium/blob/98c270a79ea6fc0f1bdf2417868f61fded921856/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSchemaHistoryTopicIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/98c270a79ea6fc0f1bdf2417868f61fded921856/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSchemaHistoryTopicIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSchemaHistoryTopicIT.java?ref=98c270a79ea6fc0f1bdf2417868f61fded921856",
      "patch": "@@ -108,8 +108,13 @@ public void streamingSchemaChanges() throws Exception {\n \n         records = consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES, 24);\n         Assertions.assertThat(records.recordsForTopic(\"server1.dbo.tablea\")).hasSize(RECORDS_PER_TABLE);\n-        Assertions.assertThat(records.recordsForTopic(\"server1.dbo.tableb\")).hasSize(RECORDS_PER_TABLE);\n-        records.recordsForTopic(\"server1.dbo.tableb\").forEach(record -> {\n+        final List<SourceRecord> tablebRecords = records.recordsForTopic(\"server1.dbo.tableb\");\n+        // Additional schema change record was emitted\n+        if (tablebRecords.size() == RECORDS_PER_TABLE - 1) {\n+            tablebRecords.add(consumeRecord());\n+        }\n+        Assertions.assertThat(tablebRecords).hasSize(RECORDS_PER_TABLE);\n+        tablebRecords.forEach(record -> {\n             assertSchemaMatchesStruct(\n                     (Struct) ((Struct) record.value()).get(\"after\"),\n                     SchemaBuilder.struct()",
      "parent_sha": "d5d3eb6f64e96b674a8eedcc3835f359d52307cc"
    }
  },
  {
    "oid": "053bf602af252ef2fedac28e55656ed6e6fd47cc",
    "message": "DBZ-4979 Guard against NPE for non-table related DDLs",
    "date": "2022-04-12T13:36:14Z",
    "url": "https://github.com/debezium/debezium/commit/053bf602af252ef2fedac28e55656ed6e6fd47cc",
    "details": {
      "sha": "7b852d45a332c60ddac728dda2f35caf9b0f1c25",
      "filename": "debezium-core/src/main/java/io/debezium/pipeline/source/snapshot/incremental/AbstractIncrementalSnapshotChangeEventSource.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/053bf602af252ef2fedac28e55656ed6e6fd47cc/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fsnapshot%2Fincremental%2FAbstractIncrementalSnapshotChangeEventSource.java",
      "raw_url": "https://github.com/debezium/debezium/raw/053bf602af252ef2fedac28e55656ed6e6fd47cc/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fsnapshot%2Fincremental%2FAbstractIncrementalSnapshotChangeEventSource.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fsnapshot%2Fincremental%2FAbstractIncrementalSnapshotChangeEventSource.java?ref=053bf602af252ef2fedac28e55656ed6e6fd47cc",
      "patch": "@@ -102,7 +102,7 @@ public void closeWindow(P partition, String id, OffsetContext offsetContext) thr\n \n     @Override\n     public void processSchemaChange(P partition, DataCollectionId dataCollectionId) throws InterruptedException {\n-        if (dataCollectionId.equals(context.currentDataCollectionId())) {\n+        if (dataCollectionId != null && dataCollectionId.equals(context.currentDataCollectionId())) {\n             rereadChunk(partition);\n         }\n     }",
      "parent_sha": "7b95aa7bcb1d48c4290f75214eea88056724b7c7"
    }
  },
  {
    "oid": "7844b59c2f03eca02d04f1a56d6808ffc5a5d603",
    "message": "DBZ-3770 Optimize ObjectMapper initialization by replacing repeated initialization with one time initilization\n- Performance Improvement of approx 5% - 15%",
    "date": "2021-07-21T18:44:09Z",
    "url": "https://github.com/debezium/debezium/commit/7844b59c2f03eca02d04f1a56d6808ffc5a5d603",
    "details": {
      "sha": "0978ef69cbc1337270adad56e5605fe8885052b9",
      "filename": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/SourceInfo.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debezium/debezium/blob/7844b59c2f03eca02d04f1a56d6808ffc5a5d603/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FSourceInfo.java",
      "raw_url": "https://github.com/debezium/debezium/raw/7844b59c2f03eca02d04f1a56d6808ffc5a5d603/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FSourceInfo.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FSourceInfo.java?ref=7844b59c2f03eca02d04f1a56d6808ffc5a5d603",
      "patch": "@@ -82,6 +82,8 @@ public final class SourceInfo extends BaseSourceInfo {\n     public static final String LSN_KEY = \"lsn\";\n     public static final String LAST_SNAPSHOT_RECORD_KEY = \"last_snapshot_record\";\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n     private final String dbName;\n \n     private Lsn lsn;\n@@ -162,9 +164,8 @@ public String sequence() {\n                 }\n             }\n         }\n-        ObjectMapper mapper = new ObjectMapper();\n         try {\n-            return mapper.writeValueAsString(sequence);\n+            return MAPPER.writeValueAsString(sequence);\n         }\n         catch (JsonProcessingException e) {\n             throw new IllegalStateException(e);",
      "parent_sha": "73e19a6a7f35966878b355fe3f54e80f125750b9"
    }
  },
  {
    "oid": "62fc03a44df85452d900bd85aa293663ab7cd679",
    "message": "DBZ-1347 Commenting",
    "date": "2019-06-25T12:52:58Z",
    "url": "https://github.com/debezium/debezium/commit/62fc03a44df85452d900bd85aa293663ab7cd679",
    "details": {
      "sha": "ef5cda81a477d294fa1c8c7606750f819f3b36aa",
      "filename": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresReplicationConnection.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/debezium/debezium/blob/62fc03a44df85452d900bd85aa293663ab7cd679/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresReplicationConnection.java",
      "raw_url": "https://github.com/debezium/debezium/raw/62fc03a44df85452d900bd85aa293663ab7cd679/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresReplicationConnection.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresReplicationConnection.java?ref=62fc03a44df85452d900bd85aa293663ab7cd679",
      "patch": "@@ -246,7 +246,9 @@ else if (e.getMessage().matches(\"(?s)ERROR: requested WAL segment .* has already\n         }\n \n         final PGReplicationStream stream = s;\n-        final long lsnLong = lsn.asLong();\n+\n+        // the LSN where the replication streams starts from\n+        final long startingLsn = lsn.asLong();\n \n         return new ReplicationStream() {\n \n@@ -263,7 +265,7 @@ else if (e.getMessage().matches(\"(?s)ERROR: requested WAL segment .* has already\n             public void read(ReplicationMessageProcessor processor) throws SQLException, InterruptedException {\n                 ByteBuffer read = stream.read();\n                 // the lsn we started from is inclusive, so we need to avoid sending back the same message twice\n-                if (lsnLong >= stream.getLastReceiveLSN().asLong()) {\n+                if (startingLsn >= stream.getLastReceiveLSN().asLong()) {\n                     return;\n                 }\n                 deserializeMessages(read, processor);\n@@ -273,7 +275,7 @@ public void read(ReplicationMessageProcessor processor) throws SQLException, Int\n             public boolean readPending(ReplicationMessageProcessor processor) throws SQLException, InterruptedException {\n                 ByteBuffer read = stream.readPending();\n                 // the lsn we started from is inclusive, so we need to avoid sending back the same message twice\n-                if (read == null ||  lsnLong >= stream.getLastReceiveLSN().asLong()) {\n+                if (read == null || startingLsn >= stream.getLastReceiveLSN().asLong()) {\n                     return false;\n                 }\n                 deserializeMessages(read, processor);",
      "parent_sha": "e72d7edd2f4619b9d94f022822dd1c84320a2dd6"
    }
  },
  {
    "oid": "e472a06da43fd104c07041b872e394126806ace2",
    "message": "DBZ-4773 Fix formatting",
    "date": "2022-02-23T07:49:31Z",
    "url": "https://github.com/debezium/debezium/commit/e472a06da43fd104c07041b872e394126806ace2",
    "details": {
      "sha": "0dcc89bb1b6714886e4e09c4aee61f64e1ddaf66",
      "filename": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java",
      "status": "modified",
      "additions": 13,
      "deletions": 15,
      "changes": 28,
      "blob_url": "https://github.com/debezium/debezium/blob/e472a06da43fd104c07041b872e394126806ace2/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java",
      "raw_url": "https://github.com/debezium/debezium/raw/e472a06da43fd104c07041b872e394126806ace2/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java?ref=e472a06da43fd104c07041b872e394126806ace2",
      "patch": "@@ -6,7 +6,6 @@\n package io.debezium.relational.history;\n \n import java.io.IOException;\n-import java.lang.reflect.Constructor;\n import java.time.Duration;\n import java.time.temporal.ChronoUnit;\n import java.util.Collection;\n@@ -46,7 +45,6 @@\n import org.apache.kafka.common.errors.UnsupportedVersionException;\n import org.apache.kafka.common.serialization.StringDeserializer;\n import org.apache.kafka.common.serialization.StringSerializer;\n-import org.apache.kafka.common.utils.AppInfoParser;\n import org.apache.kafka.connect.errors.ConnectException;\n import org.apache.kafka.connect.source.SourceConnector;\n import org.apache.kafka.connect.source.SourceRecord;\n@@ -201,7 +199,7 @@ private static boolean hasNewTopicConstructorWithOptionals() {\n             return false;\n         }\n     }\n-    \n+\n     @Override\n     public void configure(Configuration config, HistoryRecordComparator comparator, DatabaseHistoryListener listener, boolean useCatalogBeforeSchema) {\n         super.configure(config, comparator, listener, useCatalogBeforeSchema);\n@@ -519,31 +517,31 @@ public void initializeStorage() {\n         super.initializeStorage();\n \n         try (AdminClient admin = AdminClient.create(this.producerConfig.asProperties())) {\n-        \t\n+\n             NewTopic topic = null;\n-            \n-\t\t\t// if possible (underlying client and server are Kafka API 2.4+), we create the\n-\t\t\t// topic without explicitly specifying the replication factor, relying on the\n-\t\t\t// broker default setting\n+\n+            // if possible (underlying client and server are Kafka API 2.4+), we create the\n+            // topic without explicitly specifying the replication factor, relying on the\n+            // broker default setting\n             try {\n-            \tif (USE_KAFKA_24_NEW_TOPIC_CONSTRUCTOR) {\n-            \t\ttopic = new NewTopic(topicName, Optional.of(PARTITION_COUNT), Optional.empty());\n-            \t}\n+                if (USE_KAFKA_24_NEW_TOPIC_CONSTRUCTOR) {\n+                    topic = new NewTopic(topicName, Optional.of(PARTITION_COUNT), Optional.empty());\n+                }\n             }\n             catch (Exception ex) {\n                 if (!(ex.getCause() instanceof UnsupportedVersionException)) {\n                     throw ex;\n                 }\n             }\n \n-\t\t\t// falling back to querying and providing the replication factor explicitly;\n-\t\t\t// that's not the preferred choice, as querying (\"DescribeConfigs\") requires an\n-\t\t\t// additional ACL/privilege, which we otherwise don't need\n+            // falling back to querying and providing the replication factor explicitly;\n+            // that's not the preferred choice, as querying (\"DescribeConfigs\") requires an\n+            // additional ACL/privilege, which we otherwise don't need\n             if (topic == null) {\n                 short replicationFactor = getDefaultTopicReplicationFactor(admin);\n                 topic = new NewTopic(topicName, PARTITION_COUNT, replicationFactor);\n             }\n-            \n+\n             topic.configs(Collect.hashMapOf(CLEANUP_POLICY_NAME, CLEANUP_POLICY_VALUE, RETENTION_MS_NAME, Long.toString(RETENTION_MS_MAX), RETENTION_BYTES_NAME,\n                     Long.toString(UNLIMITED_VALUE)));\n             admin.createTopics(Collections.singleton(topic));",
      "parent_sha": "a144d842577f602f813137670c35b4a7ade749ea"
    }
  },
  {
    "oid": "7b707a0b9b558ff022cf5061f1a4aff00b4b95ec",
    "message": "DBZ-3827 Debezium Server Kinesis Sink Cannot Handle Null Events",
    "date": "2021-08-06T09:32:20Z",
    "url": "https://github.com/debezium/debezium/commit/7b707a0b9b558ff022cf5061f1a4aff00b4b95ec",
    "details": {
      "sha": "508f30b98b9874887f6c85d27b68200b279efb97",
      "filename": "debezium-server/debezium-server-kinesis/src/main/java/io/debezium/server/kinesis/KinesisChangeConsumer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/debezium/debezium/blob/7b707a0b9b558ff022cf5061f1a4aff00b4b95ec/debezium-server%2Fdebezium-server-kinesis%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fkinesis%2FKinesisChangeConsumer.java",
      "raw_url": "https://github.com/debezium/debezium/raw/7b707a0b9b558ff022cf5061f1a4aff00b4b95ec/debezium-server%2Fdebezium-server-kinesis%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fkinesis%2FKinesisChangeConsumer.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-server%2Fdebezium-server-kinesis%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fkinesis%2FKinesisChangeConsumer.java?ref=7b707a0b9b558ff022cf5061f1a4aff00b4b95ec",
      "patch": "@@ -100,10 +100,15 @@ public void handleBatch(List<ChangeEvent<Object, Object>> records, RecordCommitt\n             throws InterruptedException {\n         for (ChangeEvent<Object, Object> record : records) {\n             LOGGER.trace(\"Received event '{}'\", record);\n+            Object rv = record.value();\n+            if (rv == null) {\n+                rv = \"\";\n+            }\n+\n             final PutRecordRequest putRecord = PutRecordRequest.builder()\n                     .partitionKey((record.key() != null) ? getString(record.key()) : nullKey)\n                     .streamName(streamNameMapper.map(record.destination()))\n-                    .data(SdkBytes.fromByteArray(getBytes(record.value())))\n+                    .data(SdkBytes.fromByteArray(getBytes(rv)))\n                     .build();\n             client.putRecord(putRecord);\n             committer.markProcessed(record);",
      "parent_sha": "07d937ee0afe665fc6dca4f51e4efc7a45ef566e"
    }
  },
  {
    "oid": "24965dd0769dc4e2e3815d899dcb0ccbd82a23e8",
    "message": "DBZ-638 Process tx as stream not as batch",
    "date": "2018-03-23T13:41:59Z",
    "url": "https://github.com/debezium/debezium/commit/24965dd0769dc4e2e3815d899dcb0ccbd82a23e8",
    "details": {
      "sha": "14e2aad079c1306d6399d8021b5d07939aee25e3",
      "filename": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/wal2json/Wal2JsonMessageDecoder.java",
      "status": "modified",
      "additions": 52,
      "deletions": 16,
      "changes": 68,
      "blob_url": "https://github.com/debezium/debezium/blob/24965dd0769dc4e2e3815d899dcb0ccbd82a23e8/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2Fwal2json%2FWal2JsonMessageDecoder.java",
      "raw_url": "https://github.com/debezium/debezium/raw/24965dd0769dc4e2e3815d899dcb0ccbd82a23e8/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2Fwal2json%2FWal2JsonMessageDecoder.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2Fwal2json%2FWal2JsonMessageDecoder.java?ref=24965dd0769dc4e2e3815d899dcb0ccbd82a23e8",
      "patch": "@@ -9,7 +9,6 @@\n import java.nio.ByteBuffer;\n import java.sql.SQLException;\n import java.util.Arrays;\n-import java.util.Iterator;\n \n import org.apache.kafka.connect.errors.ConnectException;\n import org.postgresql.replication.fluent.logical.ChainedLogicalStreamBuilder;\n@@ -19,11 +18,8 @@\n import io.debezium.connector.postgresql.TypeRegistry;\n import io.debezium.connector.postgresql.connection.MessageDecoder;\n import io.debezium.connector.postgresql.connection.ReplicationStream.ReplicationMessageProcessor;\n-import io.debezium.document.Array;\n-import io.debezium.document.Array.Entry;\n import io.debezium.document.Document;\n import io.debezium.document.DocumentReader;\n-import io.debezium.document.Value;\n \n /**\n  * JSON deserialization of a message sent by\n@@ -39,6 +35,14 @@ public class Wal2JsonMessageDecoder implements MessageDecoder {\n \n     private final DateTimeFormat dateTime = DateTimeFormat.get();\n     private boolean containsMetadata = false;\n+    private boolean messageInProgress = false;\n+    private String bufferedContent;\n+\n+    private int txId;\n+\n+    private String timestamp;\n+\n+    private long commitTime;\n \n     @Override\n     public void processMessage(ByteBuffer buffer, ReplicationMessageProcessor processor, TypeRegistry typeRegistry) throws SQLException, InterruptedException {\n@@ -47,24 +51,56 @@ public void processMessage(ByteBuffer buffer, ReplicationMessageProcessor proces\n                 throw new IllegalStateException(\"Invalid buffer received from PG server during streaming replication\");\n             }\n             final byte[] source = buffer.array();\n-            final byte[] content = Arrays.copyOfRange(source, buffer.arrayOffset(), source.length);\n-            final Document message = DocumentReader.floatNumbersAsTextReader().read(content);\n-            LOGGER.debug(\"Message arrived for decoding {}\", message);\n-            final int txId = message.getInteger(\"xid\");\n-            final String timestamp = message.getString(\"timestamp\");\n-            final long commitTime = dateTime.systemTimestamp(timestamp);\n-            final Array changes = message.getArray(\"change\");\n+            String content = new String(Arrays.copyOfRange(source, buffer.arrayOffset(), source.length)).trim();\n+            LOGGER.debug(\"Chunk arrived from database {}\", content);\n \n-            Iterator<Entry> it = changes.iterator();\n-            while (it.hasNext()) {\n-                Value value = it.next().getValue();\n-                processor.process(new Wal2JsonReplicationMessage(txId, commitTime, value.asDocument(), containsMetadata, !it.hasNext(), typeRegistry));\n+            if (!messageInProgress) {\n+                // We received the beginning of a transaction\n+                if (!content.endsWith(\"}\")) {\n+                    // Chunks are enabled and we have an unfinished message\n+                    content += \"]}\";\n+                }\n+                final Document message = DocumentReader.defaultReader().read(content + \"]}\");\n+                txId = message.getInteger(\"xid\");\n+                timestamp = message.getString(\"timestamp\");\n+                commitTime = dateTime.systemTimestamp(timestamp);\n+                messageInProgress = true;\n+                bufferedContent = null;\n+            }\n+            else {\n+                // We are receiving changes in chunks\n+                if (content.startsWith(\"{\")) {\n+                    // First change\n+                    bufferedContent = content;\n+                }\n+                else if (content.startsWith(\",\")) {\n+                    // following changes\n+                    doProcessMessage(processor, typeRegistry, bufferedContent, false);\n+                    bufferedContent = content.substring(1);\n+                }\n+                else if (content.startsWith(\"]\")) {\n+                    // No more changes\n+                    if (bufferedContent != null) {\n+                        doProcessMessage(processor, typeRegistry, bufferedContent, true);\n+                    }\n+                    messageInProgress = false;\n+                }\n+                else {\n+                    throw new ConnectException(\"Chunk arrived in unxepected state\");\n+                }\n             }\n         } catch (final IOException e) {\n             throw new ConnectException(e);\n         }\n     }\n \n+    private void doProcessMessage(ReplicationMessageProcessor processor, TypeRegistry typeRegistry, String content, boolean lastMessage)\n+            throws IOException, SQLException, InterruptedException {\n+        final Document change = DocumentReader.floatNumbersAsTextReader().read(content);\n+        LOGGER.debug(\"Change arrived for decoding {}\", change);\n+        processor.process(new Wal2JsonReplicationMessage(txId, commitTime, change, containsMetadata, lastMessage, typeRegistry));\n+    }\n+\n     @Override\n     public ChainedLogicalStreamBuilder optionsWithMetadata(ChainedLogicalStreamBuilder builder) {\n         return optionsWithoutMetadata(builder)\n@@ -75,7 +111,7 @@ public ChainedLogicalStreamBuilder optionsWithMetadata(ChainedLogicalStreamBuild\n     public ChainedLogicalStreamBuilder optionsWithoutMetadata(ChainedLogicalStreamBuilder builder) {\n         return builder\n             .withSlotOption(\"pretty-print\", 1)\n-            .withSlotOption(\"write-in-chunks\", 0)\n+            .withSlotOption(\"write-in-chunks\", 1)\n             .withSlotOption(\"include-xids\", 1)\n             .withSlotOption(\"include-timestamp\", 1);\n     }",
      "parent_sha": "8ef92678082415c799e73e35ce2203c571323dd6"
    }
  },
  {
    "oid": "446b102ad9a4f1625b304d2c3c298881369fd458",
    "message": "DBZ-534 Using correct datattype in list lookup",
    "date": "2018-01-12T11:30:44Z",
    "url": "https://github.com/debezium/debezium/commit/446b102ad9a4f1625b304d2c3c298881369fd458",
    "details": {
      "sha": "ee5ce3f28deaa4c5492b2ed915c09f88a37a268c",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlDdlParser.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/446b102ad9a4f1625b304d2c3c298881369fd458/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlDdlParser.java",
      "raw_url": "https://github.com/debezium/debezium/raw/446b102ad9a4f1625b304d2c3c298881369fd458/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlDdlParser.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlDdlParser.java?ref=446b102ad9a4f1625b304d2c3c298881369fd458",
      "patch": "@@ -1041,7 +1041,7 @@ protected void parseCreateView(Marker start) {\n                 List<String> fromTablePkColumnNames = fromTable.columnNames();\n                 List<String> viewPkColumnNames = new ArrayList<>();\n                 selectedColumnsByAlias.forEach((viewColumnName, fromTableColumn) -> {\n-                    if (fromTablePkColumnNames.contains(fromTableColumn)) {\n+                    if (fromTablePkColumnNames.contains(fromTableColumn.name())) {\n                         viewPkColumnNames.add(viewColumnName);\n                     }\n                 });",
      "parent_sha": "0b269a6e41bd35175266c6e3e13f50ba9d57f8bf"
    }
  },
  {
    "oid": "5f7aa142b7c03660ea39f02c3f4ac17bfe8a1350",
    "message": "DBZ-3546 default debezium.sink.pravega.transaction to false",
    "date": "2021-06-14T16:50:00Z",
    "url": "https://github.com/debezium/debezium/commit/5f7aa142b7c03660ea39f02c3f4ac17bfe8a1350",
    "details": {
      "sha": "6a5697c8bb51cf26a830d0364b139736a9ddfd46",
      "filename": "debezium-server/debezium-server-pravega/src/main/java/io/debezium/server/pravega/PravegaChangeConsumer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/5f7aa142b7c03660ea39f02c3f4ac17bfe8a1350/debezium-server%2Fdebezium-server-pravega%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fpravega%2FPravegaChangeConsumer.java",
      "raw_url": "https://github.com/debezium/debezium/raw/5f7aa142b7c03660ea39f02c3f4ac17bfe8a1350/debezium-server%2Fdebezium-server-pravega%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fpravega%2FPravegaChangeConsumer.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-server%2Fdebezium-server-pravega%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fpravega%2FPravegaChangeConsumer.java?ref=5f7aa142b7c03660ea39f02c3f4ac17bfe8a1350",
      "patch": "@@ -49,7 +49,7 @@ public class PravegaChangeConsumer extends BaseChangeConsumer implements ChangeC\n     @ConfigProperty(name = PROP_SCOPE)\n     String scope;\n \n-    @ConfigProperty(name = PROP_TXN)\n+    @ConfigProperty(name = PROP_TXN, defaultValue = \"false\")\n     boolean txn;\n \n     private ClientConfig clientConfig;",
      "parent_sha": "2b885fd1e92c89694a503d9cd70c6366a4b08ea1"
    }
  },
  {
    "oid": "8557c0752bcef28f73485f3fe0e079b28018feeb",
    "message": "DBZ-6317 Fix transaction rollback",
    "date": "2023-11-10T05:43:48Z",
    "url": "https://github.com/debezium/debezium/commit/8557c0752bcef28f73485f3fe0e079b28018feeb",
    "details": {
      "sha": "dd8bd38b06fc3117701e772c039ff045132e6a47",
      "filename": "debezium-connector-jdbc/src/main/java/io/debezium/connector/jdbc/JdbcChangeEventSink.java",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/debezium/debezium/blob/8557c0752bcef28f73485f3fe0e079b28018feeb/debezium-connector-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fjdbc%2FJdbcChangeEventSink.java",
      "raw_url": "https://github.com/debezium/debezium/raw/8557c0752bcef28f73485f3fe0e079b28018feeb/debezium-connector-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fjdbc%2FJdbcChangeEventSink.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fjdbc%2FJdbcChangeEventSink.java?ref=8557c0752bcef28f73485f3fe0e079b28018feeb",
      "patch": "@@ -218,16 +218,9 @@ private void writeBuffer(TableId tableId, List<SinkRecordDescriptor> records) {\n                     int[] batchResult = pstmt.executeBatch(); // TODO check result for error\n \n                 }\n-                catch (SQLException e) {\n-                    transaction.rollback();\n-                    throw e;\n-                }\n             });\n-\n             transaction.commit();\n-\n-        }\n-        catch (Exception e) {\n+        } catch (Exception e) {\n             transaction.rollback();\n             throw e;\n         }",
      "parent_sha": "29cd43b1942c9bd2478a92ffd78d275ddf82cdb0"
    }
  },
  {
    "oid": "8744bb6a164eb041bd0cdbf02a33de3c11872c92",
    "message": "DBZ-1781 Making idObjToJson() method more specific",
    "date": "2020-03-04T08:10:49Z",
    "url": "https://github.com/debezium/debezium/commit/8744bb6a164eb041bd0cdbf02a33de3c11872c92",
    "details": {
      "sha": "c1679b21ea63757d3b2c901e95a71f030215c154",
      "filename": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/RecordMakers.java",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/debezium/debezium/blob/8744bb6a164eb041bd0cdbf02a33de3c11872c92/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FRecordMakers.java",
      "raw_url": "https://github.com/debezium/debezium/raw/8744bb6a164eb041bd0cdbf02a33de3c11872c92/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FRecordMakers.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FRecordMakers.java?ref=8744bb6a164eb041bd0cdbf02a33de3c11872c92",
      "patch": "@@ -257,15 +257,12 @@ record = new SourceRecord(sourcePartition, offset, topicName, partition, keySche\n             return 1;\n         }\n \n-        protected String idObjToJson(Object idObj) {\n+        protected String idObjToJson(Document idObj) {\n             if (idObj == null) {\n                 return null;\n             }\n-            if (!(idObj instanceof Document)) {\n-                return jsonSerializer.serialize(idObj);\n-            }\n-            return jsonSerializer.serialize(\n-                    ((Document) idObj).get(DBCollection.ID_FIELD_NAME));\n+\n+            return jsonSerializer.serialize(idObj.get(DBCollection.ID_FIELD_NAME));\n         }\n \n         protected Struct keyFor(String objId) {",
      "parent_sha": "f41040d871027a106c1891d0e6a4dc28e4a55a4b"
    }
  },
  {
    "oid": "3d30b7371fe99e3432d300a843f366fc32fae704",
    "message": "DBZ-3664 Wording fix",
    "date": "2021-06-28T06:25:34Z",
    "url": "https://github.com/debezium/debezium/commit/3d30b7371fe99e3432d300a843f366fc32fae704",
    "details": {
      "sha": "a7816fd2d11195224280e20193c4c84ec25a9e34",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/OracleStreamingChangeEventSourceMetrics.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/3d30b7371fe99e3432d300a843f366fc32fae704/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleStreamingChangeEventSourceMetrics.java",
      "raw_url": "https://github.com/debezium/debezium/raw/3d30b7371fe99e3432d300a843f366fc32fae704/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleStreamingChangeEventSourceMetrics.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleStreamingChangeEventSourceMetrics.java?ref=3d30b7371fe99e3432d300a843f366fc32fae704",
      "patch": "@@ -474,10 +474,10 @@ else if (currentBatchSize > batchSizeMin) {\n \n         if (currentBatchSize == batchSizeMax) {\n             if (!lobEnabled) {\n-                LOGGER.info(\"LogMiner is now using the maximum batch size {}. This could be indicative of large SCN gaps\", currentBatchSize);\n+                LOGGER.info(\"The connector is now using the maximum batch size {} when querying the LogMiner view. This could be indicative of large SCN gaps\", currentBatchSize);\n             }\n             else {\n-                LOGGER.debug(\"LogMiner is now using the maximum batch size {}.\", currentBatchSize);\n+                LOGGER.debug(\"The connector is now using the maximum batch size {} when querying the LogMiner view.\", currentBatchSize);\n             }\n         }\n         else {",
      "parent_sha": "4a844aa36bcb6a87f037705545888b7680b3649d"
    }
  },
  {
    "oid": "d83139a54a7caca7df8e845f5ed2646a2c3bdb68",
    "message": "DBZ-6901 Fix formatting",
    "date": "2023-09-19T05:00:14Z",
    "url": "https://github.com/debezium/debezium/commit/d83139a54a7caca7df8e845f5ed2646a2c3bdb68",
    "details": {
      "sha": "036d39212ccb0777fd78aaf3e4650b6b1c8e1e4b",
      "filename": "debezium-core/src/main/java/io/debezium/transforms/ExtractNewRecordState.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/d83139a54a7caca7df8e845f5ed2646a2c3bdb68/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FExtractNewRecordState.java",
      "raw_url": "https://github.com/debezium/debezium/raw/d83139a54a7caca7df8e845f5ed2646a2c3bdb68/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FExtractNewRecordState.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FExtractNewRecordState.java?ref=d83139a54a7caca7df8e845f5ed2646a2c3bdb68",
      "patch": "@@ -553,7 +553,7 @@ private static class NewRecordValueMetadata {\n         private final Schema schema;\n         private final String operation;\n \n-        public NewRecordValueMetadata(Schema schema, String operation) {\n+        NewRecordValueMetadata(Schema schema, String operation) {\n             this.schema = schema;\n             this.operation = operation;\n         }",
      "parent_sha": "07abd6dbc22a350409c03b8fb0325dee351bc047"
    }
  },
  {
    "oid": "4c091f70f0b0e97650966e1ee8e36587d9ee63c3",
    "message": "DBZ-8943 Handle error codes 8180 through 8189 universally\n\nOracle error codes from ORA-08180 through ORA-08189 are all related to\nfailures with the Oracle flashback area, with the SCN or timestamp\nhaving aged out of the flashback area, etc. These conditions should\nall be treated identically.",
    "date": "2025-04-17T02:32:01Z",
    "url": "https://github.com/debezium/debezium/commit/4c091f70f0b0e97650966e1ee8e36587d9ee63c3",
    "details": {
      "sha": "1a636aedb2ab74c3282f418f74a39144eb793396",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/AbstractStreamingAdapter.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debezium/debezium/blob/4c091f70f0b0e97650966e1ee8e36587d9ee63c3/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FAbstractStreamingAdapter.java",
      "raw_url": "https://github.com/debezium/debezium/raw/4c091f70f0b0e97650966e1ee8e36587d9ee63c3/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FAbstractStreamingAdapter.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FAbstractStreamingAdapter.java?ref=4c091f70f0b0e97650966e1ee8e36587d9ee63c3",
      "patch": "@@ -114,9 +114,9 @@ protected Optional<Scn> getLatestTableDdlScn(RelationalSnapshotContext<OraclePar\n             }\n         }\n         catch (SQLException e) {\n-            if (e.getErrorCode() == 8180) {\n-                // DBZ-1446 In this use case we actually do not want to propagate the exception but\n-                // rather return an empty optional value allowing the current SCN to take prior.\n+            if (e.getErrorCode() >= 8180 && e.getErrorCode() <= 8189) {\n+                // These error codes are all related to failures with flashback area where\n+                // flashback may not be enabled, the SCN or its timestamp has aged out, etc\n                 LOGGER.info(\"No latest table SCN could be resolved, defaulting to current SCN\");\n                 return Optional.empty();\n             }",
      "parent_sha": "fc20869a74f486357f9b1d5ba78b8149e413aa34"
    }
  },
  {
    "oid": "423a9fe1d502cf265330209a909f4d1b64b5314d",
    "message": "DBZ-8886 refactor: parse method",
    "date": "2025-04-11T14:10:17Z",
    "url": "https://github.com/debezium/debezium/commit/423a9fe1d502cf265330209a909f4d1b64b5314d",
    "details": {
      "sha": "3168d27c5e6736ec18262b18cee34ac25c8cd9d7",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/OracleConnectorConfig.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/debezium/debezium/blob/423a9fe1d502cf265330209a909f4d1b64b5314d/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnectorConfig.java",
      "raw_url": "https://github.com/debezium/debezium/raw/423a9fe1d502cf265330209a909f4d1b64b5314d/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnectorConfig.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnectorConfig.java?ref=423a9fe1d502cf265330209a909f4d1b64b5314d",
      "patch": "@@ -1531,14 +1531,16 @@ public boolean isEhcache() {\n         }\n \n         public static LogMiningBufferType parse(String value) {\n-            if (value != null) {\n-                value = value.trim();\n-                for (LogMiningBufferType option : LogMiningBufferType.values()) {\n-                    if (option.getValue().equalsIgnoreCase(value)) {\n-                        return option;\n-                    }\n+            if (value == null) {\n+                return null;\n+            }\n+\n+            for (LogMiningBufferType option : LogMiningBufferType.values()) {\n+                if (option.getValue().equalsIgnoreCase(value.trim())) {\n+                    return option;\n                 }\n             }\n+\n             return null;\n         }\n ",
      "parent_sha": "97c0cd6279d6be77b1eea169278badd2c12337a0"
    }
  },
  {
    "oid": "5c61bc4341c370d504a62692438ff1db6d6746ff",
    "message": "DBZ-4733 Reordering fileds in MongoDbConnectorConfig",
    "date": "2022-08-19T10:55:58Z",
    "url": "https://github.com/debezium/debezium/commit/5c61bc4341c370d504a62692438ff1db6d6746ff",
    "details": {
      "sha": "54b066bece28c3150ef8a32772b2029aa4a4d127",
      "filename": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbConnectorConfig.java",
      "status": "modified",
      "additions": 77,
      "deletions": 76,
      "changes": 153,
      "blob_url": "https://github.com/debezium/debezium/blob/5c61bc4341c370d504a62692438ff1db6d6746ff/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FMongoDbConnectorConfig.java",
      "raw_url": "https://github.com/debezium/debezium/raw/5c61bc4341c370d504a62692438ff1db6d6746ff/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FMongoDbConnectorConfig.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FMongoDbConnectorConfig.java?ref=5c61bc4341c370d504a62692438ff1db6d6746ff",
      "patch": "@@ -195,6 +195,27 @@ public boolean isFullUpdate() {\n \n     protected static final int DEFAULT_SNAPSHOT_FETCH_SIZE = 0;\n \n+    public static final Field LOGICAL_NAME = Field.create(\"mongodb.name\")\n+            .withDisplayName(\"Namespace\")\n+            .withType(Type.STRING)\n+            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION, 0))\n+            .withWidth(Width.MEDIUM)\n+            .withImportance(Importance.HIGH)\n+            .required()\n+            .withDescription(\"Unique name that identifies the MongoDB replica set or cluster and all recorded offsets, and \"\n+                    + \"that is used as a prefix for all schemas and topics. \"\n+                    + \"Each distinct MongoDB installation should have a separate namespace and monitored by \"\n+                    + \"at most one Debezium connector.\");\n+\n+    public static final Field CONNECTION_STRING = Field.create(\"mongodb.connection.string\")\n+            .withDisplayName(\"Connection String\")\n+            .withType(Type.STRING)\n+            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION, 1))\n+            .withWidth(Width.MEDIUM)\n+            .withImportance(Importance.HIGH)\n+            .withValidation(MongoDbConnectorConfig::validateConnectionString)\n+            .withDescription(\"Database connection string.\");\n+\n     /**\n      * The comma-separated list of hostname and port pairs (in the form 'host' or 'host:port') of the MongoDB servers in the\n      * replica set.\n@@ -209,17 +230,18 @@ public boolean isFullUpdate() {\n             .withDescription(\"The hostname and port pairs (in the form 'host' or 'host:port') \"\n                     + \"of the MongoDB server(s) in the replica set.\");\n \n-    public static final Field LOGICAL_NAME = Field.create(\"mongodb.name\")\n-            .withDisplayName(\"Namespace\")\n-            .withType(Type.STRING)\n-            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION, 0))\n-            .withWidth(Width.MEDIUM)\n-            .withImportance(Importance.HIGH)\n-            .required()\n-            .withDescription(\"Unique name that identifies the MongoDB replica set or cluster and all recorded offsets, and \"\n-                    + \"that is used as a prefix for all schemas and topics. \"\n-                    + \"Each distinct MongoDB installation should have a separate namespace and monitored by \"\n-                    + \"at most one Debezium connector.\");\n+    public static final Field AUTO_DISCOVER_MEMBERS = Field.create(\"mongodb.members.auto.discover\")\n+            .withDisplayName(\"Auto-discovery\")\n+            .withType(Type.BOOLEAN)\n+            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION, 3))\n+            .withWidth(Width.SHORT)\n+            .withImportance(Importance.LOW)\n+            .withDefault(true)\n+            .withValidation(Field::isBoolean, MongoDbConnectorConfig::validateAutodiscovery)\n+            .withDescription(\"Specifies whether the addresses in 'hosts' are seeds that should be \"\n+                    + \"used to discover all members of the cluster or replica set ('true'), \"\n+                    + \"or whether the address(es) in 'hosts' should be used as is ('false'). \"\n+                    + \"The default is 'true'.\");\n \n     public static final Field USER = Field.create(\"mongodb.user\")\n             .withDisplayName(\"User\")\n@@ -237,23 +259,6 @@ public boolean isFullUpdate() {\n             .withImportance(Importance.HIGH)\n             .withDescription(\"Password to be used when connecting to MongoDB, if necessary.\");\n \n-    public static final Field CONNECTION_STRING = Field.create(\"mongodb.connection.string\")\n-            .withDisplayName(\"Connection String\")\n-            .withType(Type.STRING)\n-            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION, 1))\n-            .withWidth(Width.MEDIUM)\n-            .withImportance(Importance.HIGH)\n-            .withValidation(MongoDbConnectorConfig::validateConnectionString)\n-            .withDescription(\"Database connection string.\");\n-    public static final Field AUTH_SOURCE = Field.create(\"mongodb.authsource\")\n-            .withDisplayName(\"Credentials Database\")\n-            .withType(Type.STRING)\n-            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION_ADVANCED, 3))\n-            .withWidth(Width.SHORT)\n-            .withImportance(Importance.MEDIUM)\n-            .withDefault(ReplicaSetDiscovery.ADMIN_DATABASE_NAME)\n-            .withDescription(\"Database containing user credentials.\");\n-\n     public static final Field MONGODB_POLL_INTERVAL_MS = Field.create(\"mongodb.poll.interval.ms\")\n             .withDisplayName(\"Replica membership poll interval (ms)\")\n             .withType(Type.LONG)\n@@ -284,6 +289,15 @@ public boolean isFullUpdate() {\n             .withValidation(Field::isBoolean)\n             .withDescription(\"Whether invalid host names are allowed when using SSL. If true the connection will not prevent man-in-the-middle attacks\");\n \n+    public static final Field CONNECT_TIMEOUT_MS = Field.create(\"mongodb.connect.timeout.ms\")\n+            .withDisplayName(\"Connect Timeout MS\")\n+            .withType(Type.INT)\n+            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION_ADVANCED, 0))\n+            .withWidth(Width.SHORT)\n+            .withImportance(Importance.LOW)\n+            .withDefault(10_000)\n+            .withDescription(\"The connection timeout, given in milliseconds. Defaults to 10 seconds (10,000 ms).\");\n+\n     public static final Field CONNECT_BACKOFF_INITIAL_DELAY_MS = Field.create(\"connect.backoff.initial.delay.ms\")\n             .withDisplayName(\"Initial delay before reconnection (ms)\")\n             .withType(Type.LONG)\n@@ -306,6 +320,15 @@ public boolean isFullUpdate() {\n             .withDescription(\n                     \"The maximum delay when trying to reconnect to a primary after a connection cannot be made or when no primary is available, given in milliseconds. Defaults to 120 second (120,000 ms).\");\n \n+    public static final Field AUTH_SOURCE = Field.create(\"mongodb.authsource\")\n+            .withDisplayName(\"Credentials Database\")\n+            .withType(Type.STRING)\n+            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION_ADVANCED, 3))\n+            .withWidth(Width.SHORT)\n+            .withImportance(Importance.MEDIUM)\n+            .withDefault(ReplicaSetDiscovery.ADMIN_DATABASE_NAME)\n+            .withDescription(\"Database containing user credentials.\");\n+\n     public static final Field MAX_FAILED_CONNECTIONS = Field.create(\"connect.max.attempts\")\n             .withDisplayName(\"Connection attempt limit\")\n             .withType(Type.INT)\n@@ -320,18 +343,23 @@ public boolean isFullUpdate() {\n                     + CONNECT_BACKOFF_MAX_DELAY_MS + \"' results in \"\n                     + \"just over 20 minutes of attempts before failing.\");\n \n-    public static final Field AUTO_DISCOVER_MEMBERS = Field.create(\"mongodb.members.auto.discover\")\n-            .withDisplayName(\"Auto-discovery\")\n-            .withType(Type.BOOLEAN)\n-            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION, 3))\n+    public static final Field SERVER_SELECTION_TIMEOUT_MS = Field.create(\"mongodb.server.selection.timeout.ms\")\n+            .withDisplayName(\"Server selection timeout MS\")\n+            .withType(Type.INT)\n+            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION_ADVANCED, 5))\n             .withWidth(Width.SHORT)\n             .withImportance(Importance.LOW)\n-            .withDefault(true)\n-            .withValidation(Field::isBoolean, MongoDbConnectorConfig::validateAutodiscovery)\n-            .withDescription(\"Specifies whether the addresses in 'hosts' are seeds that should be \"\n-                    + \"used to discover all members of the cluster or replica set ('true'), \"\n-                    + \"or whether the address(es) in 'hosts' should be used as is ('false'). \"\n-                    + \"The default is 'true'.\");\n+            .withDefault(30_000)\n+            .withDescription(\"The server selection timeout, given in milliseconds. Defaults to 10 seconds (10,000 ms).\");\n+\n+    public static final Field SOCKET_TIMEOUT_MS = Field.create(\"mongodb.socket.timeout.ms\")\n+            .withDisplayName(\"Socket timeout MS\")\n+            .withType(Type.INT)\n+            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION_ADVANCED, 6))\n+            .withWidth(Width.SHORT)\n+            .withImportance(Importance.LOW)\n+            .withDefault(0)\n+            .withDescription(\"The socket timeout, given in milliseconds. Defaults to 0 ms.\");\n \n     /**\n      * A comma-separated list of regular expressions that match the databases to be monitored.\n@@ -419,17 +447,6 @@ public boolean isFullUpdate() {\n                     \" where databaseName and collectionName may contain the wildcard (*) which matches any characters,\" +\n                     \" the colon character (:) is used to determine rename mapping of field.\");\n \n-    public static final Field SNAPSHOT_MODE = Field.create(\"snapshot.mode\")\n-            .withDisplayName(\"Snapshot mode\")\n-            .withEnum(SnapshotMode.class, SnapshotMode.INITIAL)\n-            .withGroup(Field.createGroupEntry(Field.Group.CONNECTOR_SNAPSHOT, 0))\n-            .withWidth(Width.SHORT)\n-            .withImportance(Importance.LOW)\n-            .withDescription(\"The criteria for running a snapshot upon startup of the connector. \"\n-                    + \"Options include: \"\n-                    + \"'initial' (the default) to specify the connector should always perform an initial sync when required; \"\n-                    + \"'never' to specify the connector should never perform an initial sync \");\n-\n     public static final Field CAPTURE_MODE = Field.create(\"capture.mode\")\n             .withDisplayName(\"Capture mode\")\n             .withEnum(CaptureMode.class, CaptureMode.CHANGE_STREAMS_UPDATE_FULL)\n@@ -441,38 +458,22 @@ public boolean isFullUpdate() {\n                     + \"'change_streams' to capture changes via MongoDB Change Streams, update events do not contain full documents; \"\n                     + \"'change_streams_update_full' (the default) to capture changes via MongoDB Change Streams, update events contain full documents\");\n \n-    public static final Field CONNECT_TIMEOUT_MS = Field.create(\"mongodb.connect.timeout.ms\")\n-            .withDisplayName(\"Connect Timeout MS\")\n-            .withType(Type.INT)\n-            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION_ADVANCED, 0))\n-            .withWidth(Width.SHORT)\n-            .withImportance(Importance.LOW)\n-            .withDefault(10_000)\n-            .withDescription(\"The connection timeout, given in milliseconds. Defaults to 10 seconds (10,000 ms).\");\n-\n-    public static final Field SERVER_SELECTION_TIMEOUT_MS = Field.create(\"mongodb.server.selection.timeout.ms\")\n-            .withDisplayName(\"Server selection timeout MS\")\n-            .withType(Type.INT)\n-            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION_ADVANCED, 5))\n-            .withWidth(Width.SHORT)\n-            .withImportance(Importance.LOW)\n-            .withDefault(30_000)\n-            .withDescription(\"The server selection timeout, given in milliseconds. Defaults to 10 seconds (10,000 ms).\");\n-\n-    public static final Field SOCKET_TIMEOUT_MS = Field.create(\"mongodb.socket.timeout.ms\")\n-            .withDisplayName(\"Socket timeout MS\")\n-            .withType(Type.INT)\n-            .withGroup(Field.createGroupEntry(Field.Group.CONNECTION_ADVANCED, 6))\n-            .withWidth(Width.SHORT)\n-            .withImportance(Importance.LOW)\n-            .withDefault(0)\n-            .withDescription(\"The socket timeout, given in milliseconds. Defaults to 0 ms.\");\n-\n     protected static final Field TASK_ID = Field.create(\"mongodb.task.id\")\n             .withDescription(\"Internal use only\")\n             .withValidation(Field::isInteger)\n             .withInvisibleRecommender();\n \n+    public static final Field SNAPSHOT_MODE = Field.create(\"snapshot.mode\")\n+            .withDisplayName(\"Snapshot mode\")\n+            .withEnum(SnapshotMode.class, SnapshotMode.INITIAL)\n+            .withGroup(Field.createGroupEntry(Field.Group.CONNECTOR_SNAPSHOT, 0))\n+            .withWidth(Width.SHORT)\n+            .withImportance(Importance.LOW)\n+            .withDescription(\"The criteria for running a snapshot upon startup of the connector. \"\n+                    + \"Options include: \"\n+                    + \"'initial' (the default) to specify the connector should always perform an initial sync when required; \"\n+                    + \"'never' to specify the connector should never perform an initial sync \");\n+\n     public static final Field SNAPSHOT_FILTER_QUERY_BY_COLLECTION = Field.create(\"snapshot.collection.filter.overrides\")\n             .withDisplayName(\"Snapshot mode\")\n             .withType(Type.STRING)",
      "parent_sha": "b61319feb771855c52d0a4ebb9ba52dfd6dc7951"
    }
  },
  {
    "oid": "994e59988c839fa4b5d107c51327b5d4517fbdbb",
    "message": "DBZ-651 Change JavaDoc\n\nCo-authored-by: Gunnar Morling <gunnar.morling@googlemail.com>",
    "date": "2020-05-14T11:48:09Z",
    "url": "https://github.com/debezium/debezium/commit/994e59988c839fa4b5d107c51327b5d4517fbdbb",
    "details": {
      "sha": "7a655af7d40ca5dcf6094ce418e76ea4c7e5a1fa",
      "filename": "debezium-api/src/main/java/io/debezium/engine/ChangeEvent.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/994e59988c839fa4b5d107c51327b5d4517fbdbb/debezium-api%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fengine%2FChangeEvent.java",
      "raw_url": "https://github.com/debezium/debezium/raw/994e59988c839fa4b5d107c51327b5d4517fbdbb/debezium-api%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fengine%2FChangeEvent.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-api%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fengine%2FChangeEvent.java?ref=994e59988c839fa4b5d107c51327b5d4517fbdbb",
      "patch": "@@ -21,7 +21,7 @@ public interface ChangeEvent<K, V> {\n     public V value();\n \n     /**\n-     * @return - a name of the logical destination for which the event is intended\n+     * @return A name of the logical destination for which the event is intended\n      */\n     public String destination();\n }",
      "parent_sha": "d385129d919802d5430f91a879f92a0d0528de9f"
    }
  },
  {
    "oid": "1b77cf21b65e39f3fa623871453691e6113f2c45",
    "message": "DBZ-1826 Avoid default false warning with default value",
    "date": "2020-02-26T15:55:19Z",
    "url": "https://github.com/debezium/debezium/commit/1b77cf21b65e39f3fa623871453691e6113f2c45",
    "details": {
      "sha": "f7a604f03f76b1db2245fad2ab1c5de3ea5eeac3",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/1b77cf21b65e39f3fa623871453691e6113f2c45/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlConnectorConfig.java",
      "raw_url": "https://github.com/debezium/debezium/raw/1b77cf21b65e39f3fa623871453691e6113f2c45/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlConnectorConfig.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlConnectorConfig.java?ref=1b77cf21b65e39f3fa623871453691e6113f2c45",
      "patch": "@@ -1069,7 +1069,7 @@ private static int validateGtidNewChannelPositionNotSet(Configuration config, Fi\n     }\n \n     private static int validateEventDeserializationFailureHandlingModeNotSet(Configuration config, Field field, ValidationOutput problems) {\n-        final String modeName = config.getString(EVENT_DESERIALIZATION_FAILURE_HANDLING_MODE);\n+        final String modeName = config.asMap().get(EVENT_DESERIALIZATION_FAILURE_HANDLING_MODE.name());\n         if (modeName != null) {\n             LOGGER.warn(\"Configuration option '{}' is renamed to '{}'\", EVENT_DESERIALIZATION_FAILURE_HANDLING_MODE.name(),\n                     EVENT_PROCESSING_FAILURE_HANDLING_MODE.name());",
      "parent_sha": "c7c7183b117a0430345dcbf1782939e65f112aba"
    }
  },
  {
    "oid": "fd62e7d3ef62292a74deb555b05b1d1e17932b6e",
    "message": "DBZ-1588 Fresh timestamp for each snapshot event",
    "date": "2019-11-12T21:36:11Z",
    "url": "https://github.com/debezium/debezium/commit/fd62e7d3ef62292a74deb555b05b1d1e17932b6e",
    "details": {
      "sha": "f0a8b658f19f9f98e028af9506942a83cba9bbe9",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SnapshotReader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/fd62e7d3ef62292a74deb555b05b1d1e17932b6e/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java",
      "raw_url": "https://github.com/debezium/debezium/raw/fd62e7d3ef62292a74deb555b05b1d1e17932b6e/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java?ref=fd62e7d3ef62292a74deb555b05b1d1e17932b6e",
      "patch": "@@ -605,7 +605,7 @@ protected void execute() {\n                                                 Column actualColumn = table.columns().get(i);\n                                                 row[i] = readField(rs, j, actualColumn, table);\n                                             }\n-                                            recorder.recordRow(recordMaker, row, ts); // has no row number!\n+                                            recorder.recordRow(recordMaker, row, clock.currentTimeInMillis()); // has no row number!\n                                             rowNum.incrementAndGet();\n                                             if (rowNum.get() % 100 == 0 && !isRunning()) {\n                                                 // We've stopped running ...",
      "parent_sha": "73e1b8f5d8e6a5c4d6d39be34809cec393cff80d"
    }
  },
  {
    "oid": "b72f084eaca73f61897d7cd6e713bb46b445f2ae",
    "message": "DBZ-6486 Check schema fields",
    "date": "2023-05-26T09:30:37Z",
    "url": "https://github.com/debezium/debezium/commit/b72f084eaca73f61897d7cd6e713bb46b445f2ae",
    "details": {
      "sha": "7ebc526009f16ab8096ff75c55ce451ba2c78115",
      "filename": "debezium-core/src/main/java/io/debezium/transforms/ExtractNewRecordState.java",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/debezium/debezium/blob/b72f084eaca73f61897d7cd6e713bb46b445f2ae/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FExtractNewRecordState.java",
      "raw_url": "https://github.com/debezium/debezium/raw/b72f084eaca73f61897d7cd6e713bb46b445f2ae/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FExtractNewRecordState.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FExtractNewRecordState.java?ref=b72f084eaca73f61897d7cd6e713bb46b445f2ae",
      "patch": "@@ -517,12 +517,10 @@ Object getValue(Struct originalRecordValue) {\n         }\n \n         private Object getWithoutDefault(Struct parentStruct, Struct originalRecordValue) {\n-            try {\n-                return parentStruct.getWithoutDefault(field);\n-            }\n-            catch (DataException e) { // In case field was added by other SMT and is in the main payload object.\n-                return originalRecordValue.getWithoutDefault(field);\n-            }\n+            // In case field was added by other SMT and is in the main payload\n+            // object.\n+            return isInSchema(parentStruct.schema()) ? parentStruct.getWithoutDefault(field)\n+                    : originalRecordValue.getWithoutDefault(field);\n         }\n \n         Schema getSchema(Schema originalRecordSchema) {\n@@ -532,7 +530,7 @@ Schema getSchema(Schema originalRecordSchema) {\n \n             if (schemaField == null) {\n                 LOGGER.debug(\"Field {} not found in {}. Trying in main payload\", field, struct);\n-                if (!isInPayload(originalRecordSchema)) {\n+                if (!isInSchema(originalRecordSchema)) {\n                     throw new IllegalArgumentException(\"Unexpected field name: \" + field);\n                 }\n                 schemaField = originalRecordSchema.field(field);\n@@ -541,11 +539,8 @@ Schema getSchema(Schema originalRecordSchema) {\n             return SchemaUtil.copySchemaBasics(schemaField.schema()).optional().build();\n         }\n \n-        private boolean isInPayload(Schema originalRecordSchema) {\n-            return originalRecordSchema.fields().stream()\n-                    .map(org.apache.kafka.connect.data.Field::name)\n-                    .collect(Collectors.toList())\n-                    .contains(field);\n+        private boolean isInSchema(Schema originalRecordSchema) {\n+            return originalRecordSchema.field(field) != null;\n         }\n     }\n }",
      "parent_sha": "08122371eb18993f68690d7b1aad313cb9896804"
    }
  },
  {
    "oid": "e9ae316e39af6d94c8b8f9643234f8e2a1d6c4ac",
    "message": "DBZ-8250 Move engine running check to avoid premature exit",
    "date": "2024-09-19T05:12:52Z",
    "url": "https://github.com/debezium/debezium/commit/e9ae316e39af6d94c8b8f9643234f8e2a1d6c4ac",
    "details": {
      "sha": "f6cc5bb0d2e7252f1346356de2cb7276a81d817a",
      "filename": "debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debezium/debezium/blob/e9ae316e39af6d94c8b8f9643234f8e2a1d6c4ac/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAbstractConnectorTest.java",
      "raw_url": "https://github.com/debezium/debezium/raw/e9ae316e39af6d94c8b8f9643234f8e2a1d6c4ac/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAbstractConnectorTest.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAbstractConnectorTest.java?ref=e9ae316e39af6d94c8b8f9643234f8e2a1d6c4ac",
      "patch": "@@ -549,7 +549,7 @@ protected int consumeRecordsUntil(BiPredicate<Integer, SourceRecord> condition,\n         int recordsConsumed = 0;\n         int nullReturn = 0;\n         boolean isLastRecord = false;\n-        while (!isLastRecord && isEngineRunning.get()) {\n+        while (!isLastRecord) {\n             SourceRecord record = consumedLines.poll(pollTimeoutInMs, TimeUnit.MILLISECONDS);\n             if (record != null) {\n                 nullReturn = 0;\n@@ -574,6 +574,9 @@ else if (Testing.Print.isEnabled()) {\n                 if (++nullReturn >= breakAfterNulls) {\n                     return recordsConsumed;\n                 }\n+                if (!isEngineRunning.get()) {\n+                    break;\n+                }\n             }\n         }\n         return recordsConsumed;",
      "parent_sha": "5ee38583cfda83bf82793082b0a5b451c70f25f6"
    }
  },
  {
    "oid": "24ff3c9eba27fabff0c21e523ca317b47ec45961",
    "message": "DBZ-4478: Remove throws InterruptedException from DataChangeEventListener::onEvent",
    "date": "2022-02-16T10:31:38Z",
    "url": "https://github.com/debezium/debezium/commit/24ff3c9eba27fabff0c21e523ca317b47ec45961",
    "details": {
      "sha": "7a191e69ecfce93c2f453ed0eaa16014193e7f75",
      "filename": "debezium-core/src/main/java/io/debezium/pipeline/source/spi/DataChangeEventListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/24ff3c9eba27fabff0c21e523ca317b47ec45961/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fspi%2FDataChangeEventListener.java",
      "raw_url": "https://github.com/debezium/debezium/raw/24ff3c9eba27fabff0c21e523ca317b47ec45961/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fspi%2FDataChangeEventListener.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fspi%2FDataChangeEventListener.java?ref=24ff3c9eba27fabff0c21e523ca317b47ec45961",
      "patch": "@@ -24,7 +24,7 @@ public interface DataChangeEventListener {\n     /**\n      * Invoked if an event is processed for a captured table.\n      */\n-    void onEvent(DataCollectionId source, OffsetContext offset, Object key, Struct value, Operation operation) throws InterruptedException;\n+    void onEvent(DataCollectionId source, OffsetContext offset, Object key, Struct value, Operation operation);\n \n     /**\n      * Invoked for events pertaining to non-captured tables.",
      "parent_sha": "1df0f958fd298ca32d7ce85526eb788670bc9639"
    }
  },
  {
    "oid": "3edc61e4430e5974c2e42dbc1043c885097cf49e",
    "message": "DBZ-7024 Improve processor instantiation",
    "date": "2024-02-12T12:43:21Z",
    "url": "https://github.com/debezium/debezium/commit/3edc61e4430e5974c2e42dbc1043c885097cf49e",
    "details": {
      "sha": "711c4725d69b8d405fa51a4ad49a902c62d4b5cd",
      "filename": "debezium-embedded/src/main/java/io/debezium/embedded/AsyncEmbeddedEngine.java",
      "status": "modified",
      "additions": 44,
      "deletions": 16,
      "changes": 60,
      "blob_url": "https://github.com/debezium/debezium/blob/3edc61e4430e5974c2e42dbc1043c885097cf49e/debezium-embedded%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAsyncEmbeddedEngine.java",
      "raw_url": "https://github.com/debezium/debezium/raw/3edc61e4430e5974c2e42dbc1043c885097cf49e/debezium-embedded%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAsyncEmbeddedEngine.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-embedded%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fembedded%2FAsyncEmbeddedEngine.java?ref=3edc61e4430e5974c2e42dbc1043c885097cf49e",
      "patch": "@@ -390,8 +390,9 @@ private void runTasksPolling(final List<EngineSourceTask> tasks)\n             throws ExecutionException {\n         LOGGER.debug(\"Starting tasks polling.\");\n         final ExecutorCompletionService<Void> taskCompletionService = new ExecutorCompletionService(taskService);\n+        final String processorClassName = selectRecordProcessor();\n         for (EngineSourceTask task : tasks) {\n-            final RecordProcessor processor = selectRecordProcessor();\n+            final RecordProcessor processor = createRecordProcessor(processorClassName);\n             processor.initialize(recordService, transformations, new SourceRecordCommitter(task));\n             pollingFutures.add(taskCompletionService.submit(new PollRecords(task, processor, state)));\n         }\n@@ -408,43 +409,70 @@ private void runTasksPolling(final List<EngineSourceTask> tasks)\n     }\n \n     /**\n-     * Select and instantiate {@link RecordProcessor} based on the user configuration.\n+     * Select {@link RecordProcessor} class based on the user configuration.\n      *\n-     * @return {@link RecordProcessor} instance which will be used for processing the records.\n+     * @return Name of the class which should be used for creating {@link RecordProcessor} instances.\n      */\n-    private RecordProcessor selectRecordProcessor() {\n+    private String selectRecordProcessor() {\n         // If the change consumer is provided, it has precedence over the consumer.\n         if (handler != null && recordConverter == null) {\n-            LOGGER.debug(\"Using {} processor\", ParallelSmtBatchProcessor.class.getName());\n-            return new ParallelSmtBatchProcessor((DebeziumEngine.ChangeConsumer<SourceRecord>) handler);\n+            LOGGER.info(\"Using {} processor\", ParallelSmtBatchProcessor.class.getName());\n+            return ParallelSmtBatchProcessor.class.getName();\n         }\n         if (handler != null && recordConverter != null) {\n-            LOGGER.debug(\"Using {} processor\", ParallelSmtAndConvertBatchProcessor.class.getName());\n-            return new ParallelSmtAndConvertBatchProcessor(handler, recordConverter);\n+            LOGGER.info(\"Using {} processor\", ParallelSmtAndConvertBatchProcessor.class.getName());\n+            return ParallelSmtAndConvertBatchProcessor.class.getName();\n         }\n \n         // Only Consumer is used, records may be processed non-sequentially.\n         final RecordProcessingOrder processingOrder = RecordProcessingOrder.parse(this.config.getString(AsyncEngineConfig.RECORD_PROCESSING_ORDER));\n         if (processingOrder == RecordProcessingOrder.ORDERED && recordConverter == null) {\n-            LOGGER.debug(\"Using {} processor\", ParallelSmtConsumerProcessor.class.getName());\n-            return new ParallelSmtConsumerProcessor((Consumer<SourceRecord>) consumer);\n+            LOGGER.info(\"Using {} processor\", ParallelSmtConsumerProcessor.class.getName());\n+            return ParallelSmtConsumerProcessor.class.getName();\n         }\n         if (processingOrder == RecordProcessingOrder.ORDERED && recordConverter != null) {\n-            LOGGER.debug(\"Using {} processor\", ParallelSmtAndConvertConsumerProcessor.class.getName());\n-            return new ParallelSmtAndConvertConsumerProcessor(consumer, recordConverter);\n+            LOGGER.info(\"Using {} processor\", ParallelSmtAndConvertConsumerProcessor.class.getName());\n+            return ParallelSmtAndConvertConsumerProcessor.class.getName();\n         }\n         if (processingOrder == RecordProcessingOrder.UNORDERED && recordConverter == null) {\n-            LOGGER.debug(\"Using {} processor\", ParallelSmtAsyncConsumerProcessor.class.getName());\n-            return new ParallelSmtAsyncConsumerProcessor((Consumer<SourceRecord>) consumer);\n+            LOGGER.info(\"Using {} processor\", ParallelSmtAsyncConsumerProcessor.class.getName());\n+            return ParallelSmtAsyncConsumerProcessor.class.getName();\n         }\n         if (processingOrder == RecordProcessingOrder.UNORDERED && recordConverter != null) {\n-            LOGGER.debug(\"Using {} processor\", ParallelSmtAndConvertAsyncConsumerProcessor.class.getName());\n-            return new ParallelSmtAndConvertAsyncConsumerProcessor(consumer, recordConverter);\n+            LOGGER.info(\"Using {} processor\", ParallelSmtAndConvertAsyncConsumerProcessor.class.getName());\n+            return ParallelSmtAndConvertAsyncConsumerProcessor.class.getName();\n         }\n \n         throw new IllegalStateException(\"Unable to select RecordProcessor, this should never happen.\");\n     }\n \n+    /**\n+     * Instantiate {@link RecordProcessor} based on the class name deremined in {@link AsyncEmbeddedEngine#selectRecordProcessor()} method.\n+     *\n+     * @return {@link RecordProcessor} instance which will be used for processing the records.\n+     */\n+    private RecordProcessor createRecordProcessor(String processorClassName) {\n+        if (ParallelSmtBatchProcessor.class.getName().equals(processorClassName)) {\n+            return new ParallelSmtBatchProcessor((DebeziumEngine.ChangeConsumer<SourceRecord>) handler);\n+        }\n+        if (ParallelSmtAndConvertBatchProcessor.class.getName().equals(processorClassName)) {\n+            return new ParallelSmtAndConvertBatchProcessor(handler, recordConverter);\n+        }\n+        if (ParallelSmtConsumerProcessor.class.getName().equals(processorClassName)) {\n+            return new ParallelSmtConsumerProcessor((Consumer<SourceRecord>) consumer);\n+        }\n+        if (ParallelSmtAndConvertConsumerProcessor.class.getName().equals(processorClassName)) {\n+            return new ParallelSmtAndConvertConsumerProcessor(consumer, recordConverter);\n+        }\n+        if (ParallelSmtAsyncConsumerProcessor.class.getName().equals(processorClassName)) {\n+            return new ParallelSmtAsyncConsumerProcessor((Consumer<SourceRecord>) consumer);\n+        }\n+        if (ParallelSmtAndConvertAsyncConsumerProcessor.class.getName().equals(processorClassName)) {\n+            return new ParallelSmtAndConvertAsyncConsumerProcessor(consumer, recordConverter);\n+        }\n+        throw new IllegalStateException(\"Unable to create RecordProcessor instance, this should never happen.\");\n+    }\n+\n     /**\n      * Shuts down the {@link ExecutorService} which processes the change event records.\n      * Waits {@code RECORD_PROCESSING_SHUTDOWN_TIMEOUT_MS} milliseconds for already submitted records to finish.",
      "parent_sha": "cdf5e0255af0f1af6f3d0675b66ab61f98892c35"
    }
  },
  {
    "oid": "e9a1e2c108654482be8c8a2170a199d67f9af16b",
    "message": "DBZ-7790 Checkstyle fixes",
    "date": "2024-05-10T07:40:24Z",
    "url": "https://github.com/debezium/debezium/commit/e9a1e2c108654482be8c8a2170a199d67f9af16b",
    "details": {
      "sha": "9f63bba76041e31cf234b56e9dcd82d06acabc7e",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/logminer/processor/TransactionCommitConsumer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/e9a1e2c108654482be8c8a2170a199d67f9af16b/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2FTransactionCommitConsumer.java",
      "raw_url": "https://github.com/debezium/debezium/raw/e9a1e2c108654482be8c8a2170a199d67f9af16b/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2FTransactionCommitConsumer.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2FTransactionCommitConsumer.java?ref=e9a1e2c108654482be8c8a2170a199d67f9af16b",
      "patch": "@@ -158,7 +158,7 @@ private void acceptDmlEvent(DmlEvent event) throws InterruptedException {\n             return;\n         }\n \n-        if(table.primaryKeyColumnNames().isEmpty()){\n+        if (table.primaryKeyColumnNames().isEmpty()) {\n             LOGGER.debug(\"\\tEvent for table {} has no primary key, dispatching.\", table.id());\n             dispatchChangeEvent(event);\n             return;",
      "parent_sha": "b8fb83cd90ed51bd20f92b06480dcc40957ffab9"
    }
  },
  {
    "oid": "9d8cb8e534b84ec394ff21b5ecb5c9e7f3775fc1",
    "message": "DBZ-7693 Fix port resolution",
    "date": "2024-04-18T08:27:21Z",
    "url": "https://github.com/debezium/debezium/commit/9d8cb8e534b84ec394ff21b5ecb5c9e7f3775fc1",
    "details": {
      "sha": "16870c4b8c7b2380f15913dfd6874bb964db4657",
      "filename": "debezium-connector-binlog/src/main/java/io/debezium/connector/binlog/jdbc/BinlogConnectionConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/9d8cb8e534b84ec394ff21b5ecb5c9e7f3775fc1/debezium-connector-binlog%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fbinlog%2Fjdbc%2FBinlogConnectionConfiguration.java",
      "raw_url": "https://github.com/debezium/debezium/raw/9d8cb8e534b84ec394ff21b5ecb5c9e7f3775fc1/debezium-connector-binlog%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fbinlog%2Fjdbc%2FBinlogConnectionConfiguration.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-binlog%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fbinlog%2Fjdbc%2FBinlogConnectionConfiguration.java?ref=9d8cb8e534b84ec394ff21b5ecb5c9e7f3775fc1",
      "patch": "@@ -106,7 +106,7 @@ public char[] sslTrustStorePassword() {\n     public abstract String getUrlPattern();\n \n     protected Configuration.Builder getDatabaseConfiguration(Configuration configuration) {\n-        return configuration.edit().with(BinlogConnectorConfig.PORT, BinlogConnectorConfig.PORT.defaultValue());\n+        return configuration.edit().withDefault(BinlogConnectorConfig.PORT, BinlogConnectorConfig.PORT.defaultValue());\n     }\n \n     protected JdbcConfiguration getJdbcConfiguration(Configuration configuration) {",
      "parent_sha": "db58fa68563ed51a45689c8ddae491ce75752d25"
    }
  },
  {
    "oid": "3fb0b0d4d765b0735d3b1683aaf3b7a7558150b1",
    "message": "DBZ-40 Superfluous whitechars",
    "date": "2019-01-24T04:46:49Z",
    "url": "https://github.com/debezium/debezium/commit/3fb0b0d4d765b0735d3b1683aaf3b7a7558150b1",
    "details": {
      "sha": "b9c238f1541f5bbd8a4e9da9503641aba74007c9",
      "filename": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/Lsn.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/3fb0b0d4d765b0735d3b1683aaf3b7a7558150b1/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FLsn.java",
      "raw_url": "https://github.com/debezium/debezium/raw/3fb0b0d4d765b0735d3b1683aaf3b7a7558150b1/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FLsn.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FLsn.java?ref=3fb0b0d4d765b0735d3b1683aaf3b7a7558150b1",
      "patch": "@@ -24,7 +24,7 @@ public class Lsn implements Comparable<Lsn> {\n     private final byte[] binary;\n     private int[] unsignedBinary;\n \n-    private String string; \n+    private String string;\n \n     private Lsn(byte[] binary) {\n         this.binary = binary;\n@@ -140,7 +140,7 @@ public int compareTo(Lsn o) {\n         final int[] thisU = getUnsignedBinary();\n         final int[] thatU = o.getUnsignedBinary();\n         for (int i = 0; i < thisU.length; i++) {\n-            final int diff = thisU[i] - thatU[i]; \n+            final int diff = thisU[i] - thatU[i];\n             if (diff != 0) {\n                 return diff;\n             }",
      "parent_sha": "4ec4e4a10dd72a6faff5e49618cfa2b0f3c3d009"
    }
  },
  {
    "oid": "d374ca0464221b10d10570b0c68143e2cff34102",
    "message": "DBZ-759 Fix ColumnImpl.scale equality check\n\nAccording to ErrorProne, checking Optional via operator == leads to\nreference equality check. Probably want rather to check for contained\nvalues.",
    "date": "2018-06-22T07:08:27Z",
    "url": "https://github.com/debezium/debezium/commit/d374ca0464221b10d10570b0c68143e2cff34102",
    "details": {
      "sha": "36d83fd7a1af789e4d9451483e2478a074c126a5",
      "filename": "debezium-core/src/main/java/io/debezium/relational/ColumnImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/d374ca0464221b10d10570b0c68143e2cff34102/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FColumnImpl.java",
      "raw_url": "https://github.com/debezium/debezium/raw/d374ca0464221b10d10570b0c68143e2cff34102/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FColumnImpl.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FColumnImpl.java?ref=d374ca0464221b10d10570b0c68143e2cff34102",
      "patch": "@@ -145,7 +145,7 @@ public boolean equals(Object obj) {\n                     Strings.equalsIgnoreCase(this.charsetName(),that.charsetName()) &&\n                     this.position() == that.position() &&\n                     this.length() == that.length() &&\n-                    this.scale() == that.scale() &&\n+                    this.scale().equals(that.scale()) &&\n                     this.isOptional() == that.isOptional() &&\n                     this.isAutoIncremented() == that.isAutoIncremented() &&\n                     this.isGenerated() == that.isGenerated() &&",
      "parent_sha": "71bf9d6b72b256da00ad24bbe89476d26ace00fb"
    }
  },
  {
    "oid": "cdb6d7301cdf0815d251b47e4c1f9c7f3dab1bea",
    "message": "DBZ-855 Make BinlogReader.informAboutUnknownTableIfRequired log with tableId",
    "date": "2018-08-14T06:41:30Z",
    "url": "https://github.com/debezium/debezium/commit/cdb6d7301cdf0815d251b47e4c1f9c7f3dab1bea",
    "details": {
      "sha": "3606b0af52d0d1ef5fa65921ca7f082026ed4d8f",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/BinlogReader.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/debezium/debezium/blob/cdb6d7301cdf0815d251b47e4c1f9c7f3dab1bea/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FBinlogReader.java",
      "raw_url": "https://github.com/debezium/debezium/raw/cdb6d7301cdf0815d251b47e4c1f9c7f3dab1bea/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FBinlogReader.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FBinlogReader.java?ref=cdb6d7301cdf0815d251b47e4c1f9c7f3dab1bea",
      "patch": "@@ -687,24 +687,26 @@ private void informAboutUnknownTableIfRequired(Event event, TableId tableId, Str\n \n             if (inconsistentSchemaHandlingMode == EventProcessingFailureHandlingMode.FAIL) {\n                 logger.error(\n-                        \"Encountered change event '{}' at offset {} for table whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}\" +\n+                        \"Encountered change event '{}' at offset {} for table {} whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}\" +\n                         \"Use the mysqlbinlog tool to view the problematic event: mysqlbinlog --start-position={} --stop-position={} --verbose {}\",\n                         event,\n                         source.offset(),\n+                        tableId,\n                         System.lineSeparator(),\n                         eventHeader.getPosition(),\n                         eventHeader.getNextPosition(),\n                         source.binlogFilename()\n                 );\n-                throw new ConnectException(\"Encountered change event for table whose schema isn't known to this connector\");\n+                throw new ConnectException(\"Encountered change event for table \" + tableId + \"whose schema isn't known to this connector\");\n             }\n             else if (inconsistentSchemaHandlingMode == EventProcessingFailureHandlingMode.WARN) {\n                 logger.warn(\n-                        \"Encountered change event '{}' at offset {} for table whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}\" +\n+                        \"Encountered change event '{}' at offset {} for table {} whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}\" +\n                         \"The event will be ignored.{}\" +\n                         \"Use the mysqlbinlog tool to view the problematic event: mysqlbinlog --start-position={} --stop-position={} --verbose {}\",\n                         event,\n                         source.offset(),\n+                        tableId,\n                         System.lineSeparator(),\n                         System.lineSeparator(),\n                         eventHeader.getPosition(),\n@@ -714,11 +716,12 @@ else if (inconsistentSchemaHandlingMode == EventProcessingFailureHandlingMode.WA\n             }\n             else {\n                 logger.debug(\n-                        \"Encountered change event '{}' at offset {} for table whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}\" +\n+                        \"Encountered change event '{}' at offset {} for table {} whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}\" +\n                         \"The event will be ignored.{}\" +\n                         \"Use the mysqlbinlog tool to view the problematic event: mysqlbinlog --start-position={} --stop-position={} --verbose {}\",\n                         event,\n                         source.offset(),\n+                        tableId,\n                         System.lineSeparator(),\n                         System.lineSeparator(),\n                         eventHeader.getPosition(),",
      "parent_sha": "57fa31e1bc17cb3c0ab6a3138d429f5a2ae79a6c"
    }
  },
  {
    "oid": "3ec6a3f18e60994396bcbda22b3545c5085c9a31",
    "message": "DBZ-6843 change skipped change event log to debug",
    "date": "2023-08-29T10:18:17Z",
    "url": "https://github.com/debezium/debezium/commit/3ec6a3f18e60994396bcbda22b3545c5085c9a31",
    "details": {
      "sha": "c42a504e9e15bb9e1766a43400efc5cc36916377",
      "filename": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/3ec6a3f18e60994396bcbda22b3545c5085c9a31/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalChangeRecordEmitter.java",
      "raw_url": "https://github.com/debezium/debezium/raw/3ec6a3f18e60994396bcbda22b3545c5085c9a31/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalChangeRecordEmitter.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalChangeRecordEmitter.java?ref=3ec6a3f18e60994396bcbda22b3545c5085c9a31",
      "patch": "@@ -73,7 +73,7 @@ protected void emitCreateRecord(Receiver<P> receiver, TableSchema tableSchema)\n \n         if (skipEmptyMessages() && (newColumnValues == null || newColumnValues.length == 0)) {\n             // This case can be hit on UPDATE / DELETE when there's no primary key defined while using certain decoders\n-            LOGGER.warn(\"no new values found for table '{}' from create message at '{}'; skipping record\", tableSchema, getOffset().getSourceInfo());\n+            LOGGER.debug(\"no new values found for table '{}' from create message at '{}'; skipping record\", tableSchema, getOffset().getSourceInfo());\n             return;\n         }\n         receiver.changeRecord(getPartition(), tableSchema, Operation.CREATE, newKey, envelope, getOffset(), null);\n@@ -136,7 +136,7 @@ protected void emitDeleteRecord(Receiver<P> receiver, TableSchema tableSchema) t\n         Struct oldValue = tableSchema.valueFromColumnData(oldColumnValues);\n \n         if (skipEmptyMessages() && (oldColumnValues == null || oldColumnValues.length == 0)) {\n-            LOGGER.warn(\"no old values found for table '{}' from delete message at '{}'; skipping record\", tableSchema, getOffset().getSourceInfo());\n+            LOGGER.debug(\"no old values found for table '{}' from delete message at '{}'; skipping record\", tableSchema, getOffset().getSourceInfo());\n             return;\n         }\n ",
      "parent_sha": "ed88a73510c597bcb696105cd9079d886467fbf1"
    }
  },
  {
    "oid": "2a80931d038d629379345be0e41bd0077010474e",
    "message": "DBZ-962 Avoiding Short constructor",
    "date": "2019-01-29T09:28:48Z",
    "url": "https://github.com/debezium/debezium/commit/2a80931d038d629379345be0e41bd0077010474e",
    "details": {
      "sha": "e64a0aa480a67687a870a09293039fe42df7eb3b",
      "filename": "debezium-core/src/main/java/io/debezium/util/MathOps.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/debezium/debezium/blob/2a80931d038d629379345be0e41bd0077010474e/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Futil%2FMathOps.java",
      "raw_url": "https://github.com/debezium/debezium/raw/2a80931d038d629379345be0e41bd0077010474e/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Futil%2FMathOps.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Futil%2FMathOps.java?ref=2a80931d038d629379345be0e41bd0077010474e",
      "patch": "@@ -14,7 +14,7 @@\n \n /**\n  * Utilities for performing math operations with mixed native and advanced numeric types.\n- * \n+ *\n  * @author Randall Hauch\n  */\n @Immutable\n@@ -51,20 +51,20 @@ public static Number add(Short first, Number second) {\n \n     public static Number add(Short first, short second) {\n         int sum = first.shortValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         return Integer.valueOf(sum);\n     }\n \n     public static Number add(Short first, int second) {\n         long sum = first.longValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         if (Integer.MAX_VALUE >= sum && Integer.MIN_VALUE <= sum) return Integer.valueOf((int) sum);\n         return Long.valueOf(sum);\n     }\n \n     public static Number add(Short first, long second) {\n         long sum = first.longValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         if (Integer.MAX_VALUE >= sum && Integer.MIN_VALUE <= sum) return Integer.valueOf((int) sum);\n         return Long.valueOf(sum);\n     }\n@@ -132,21 +132,21 @@ public static Number add(Integer first, Number second) {\n \n     public static Number add(Integer first, short second) {\n         long sum = first.longValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         if (Integer.MAX_VALUE >= sum && Integer.MIN_VALUE <= sum) return Integer.valueOf((int) sum);\n         return Long.valueOf(sum);\n     }\n \n     public static Number add(Integer first, int second) {\n         long sum = first.longValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         if (Integer.MAX_VALUE >= sum && Integer.MIN_VALUE <= sum) return Integer.valueOf((int) sum);\n         return Long.valueOf(sum);\n     }\n \n     public static Number add(Integer first, long second) {\n         long sum = first.longValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         if (Integer.MAX_VALUE >= sum && Integer.MIN_VALUE <= sum) return Integer.valueOf((int) sum);\n         return Long.valueOf(sum);\n     }\n@@ -214,21 +214,21 @@ public static Number add(Long first, Number second) {\n \n     public static Number add(Long first, short second) {\n         long sum = first.longValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         if (Integer.MAX_VALUE >= sum && Integer.MIN_VALUE <= sum) return Integer.valueOf((int) sum);\n         return Long.valueOf(sum);\n     }\n \n     public static Number add(Long first, int second) {\n         long sum = first.longValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         if (Integer.MAX_VALUE >= sum && Integer.MIN_VALUE <= sum) return Integer.valueOf((int) sum);\n         return Long.valueOf(sum);\n     }\n \n     public static Number add(Long first, long second) {\n         long sum = first.longValue() + second;\n-        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return new Short((short) sum);\n+        if (Short.MAX_VALUE >= sum && Short.MIN_VALUE <= sum) return Short.valueOf((short) sum);\n         if (Integer.MAX_VALUE >= sum && Integer.MIN_VALUE <= sum) return Integer.valueOf((int) sum);\n         return Long.valueOf(sum);\n     }",
      "parent_sha": "e84c6e2238e2c35e67bff48470cea323e468dbcd"
    }
  },
  {
    "oid": "ea942a4268d5bbec3761eb307b091c763547a949",
    "message": "DBZ-2288 Test for pgoutput",
    "date": "2020-07-16T07:51:00Z",
    "url": "https://github.com/debezium/debezium/commit/ea942a4268d5bbec3761eb307b091c763547a949",
    "details": {
      "sha": "8510cdcdd356c9a0fe26c7d2ac75f0e2128c1a6f",
      "filename": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java",
      "status": "modified",
      "additions": 56,
      "deletions": 1,
      "changes": 57,
      "blob_url": "https://github.com/debezium/debezium/blob/ea942a4268d5bbec3761eb307b091c763547a949/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/ea942a4268d5bbec3761eb307b091c763547a949/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java?ref=ea942a4268d5bbec3761eb307b091c763547a949",
      "patch": "@@ -1121,6 +1121,7 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n \n     @Test\n     @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n     public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n         TestHelper.dropDefaultReplicationSlot();\n         TestHelper.createDefaultReplicationSlot();\n@@ -1156,7 +1157,57 @@ public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n         // Consume records from the snapshot\n         SourceRecords actualRecords = consumeRecordsByTopic(4);\n \n-        pgConnection.commit();\n+        // Consume records from concurrent transactions\n+        actualRecords = consumeRecordsByTopic(4);\n+\n+        List<SourceRecord> s1recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        List<SourceRecord> s2recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n+        assertThat(s1recs.size()).isEqualTo(2);\n+        assertThat(s2recs.size()).isEqualTo(2);\n+\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication not supported\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTxPgoutput() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+        TestHelper.execute(\"CREATE PUBLICATION dbz_publication FOR ALL TABLES;\");\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                inserted.set(true);\n+            }\n+        });\n+        assertConnectorIsRunning();\n+\n+        // Consume records from the snapshot\n+        SourceRecords actualRecords = consumeRecordsByTopic(4);\n \n         // Consume records from concurrent transactions\n         actualRecords = consumeRecordsByTopic(4);\n@@ -1166,6 +1217,10 @@ public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n         s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n         assertThat(s1recs.size()).isEqualTo(2);\n         assertThat(s2recs.size()).isEqualTo(2);\n+\n+        stopConnector();\n+        TestHelper.dropPublication();\n+        TestHelper.dropDefaultReplicationSlot();\n     }\n \n     @Test",
      "parent_sha": "8b0b252eb9b3e5b6f37e42cba7c4b0818a9d0ce4"
    }
  },
  {
    "oid": "9aa49736c8a4903a2d21e3751316b24ac08f2daa",
    "message": "DBZ-140 when locking individual tables, use a single statement with all the table names instead of issuing a statement per table which causes a MySQL error",
    "date": "2017-02-16T20:45:29Z",
    "url": "https://github.com/debezium/debezium/commit/9aa49736c8a4903a2d21e3751316b24ac08f2daa",
    "details": {
      "sha": "5e442e505f623f8a0af51c3d4338180cc3b8a5e4",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SnapshotReader.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/debezium/debezium/blob/9aa49736c8a4903a2d21e3751316b24ac08f2daa/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java",
      "raw_url": "https://github.com/debezium/debezium/raw/9aa49736c8a4903a2d21e3751316b24ac08f2daa/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java?ref=9aa49736c8a4903a2d21e3751316b24ac08f2daa",
      "patch": "@@ -277,8 +277,12 @@ protected void execute() {\n                     }\n                     // We have the required privileges, so try to lock all of the tables we're interested in ...\n                     logger.info(\"Step {}: flush and obtain read lock for {} tables (preventing writes)\", step++, tableIds.size());\n-                    for (TableId tableId : tableIds) {\n-                        sql.set(\"FLUSH TABLES \" + quote(tableId) + \" WITH READ LOCK\");\n+                    String tableList = tableIds.stream()\n+                            .map(tid -> quote(tid))\n+                            .reduce((r, element) -> r+ \",\" + element)\n+                            .orElse(null);\n+                    if (tableList != null) {\n+                        sql.set(\"FLUSH TABLES \" + tableList + \" WITH READ LOCK\");\n                         mysql.execute(sql.get());\n                     }\n                     lockAcquired = clock.currentTimeInMillis();",
      "parent_sha": "e86fee9834fb97ac15eb2ee9c89606115920def3"
    }
  },
  {
    "oid": "62fe7d1ee757b34170533cf3ad5e9841f91045fb",
    "message": "DBZ-604 Making sure connector cleanly shuts down also if records are produced after polling loop has stopped",
    "date": "2018-11-23T13:36:05Z",
    "url": "https://github.com/debezium/debezium/commit/62fe7d1ee757b34170533cf3ad5e9841f91045fb",
    "details": {
      "sha": "e4b5fe12ec8631db7e1966b2f3453bb78c81191f",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/AbstractReader.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/debezium/debezium/blob/62fe7d1ee757b34170533cf3ad5e9841f91045fb/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FAbstractReader.java",
      "raw_url": "https://github.com/debezium/debezium/raw/62fe7d1ee757b34170533cf3ad5e9841f91045fb/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FAbstractReader.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FAbstractReader.java?ref=62fe7d1ee757b34170533cf3ad5e9841f91045fb",
      "patch": "@@ -98,9 +98,17 @@ public void start() {\n     @Override\n     public void stop() {\n         try {\n+            // Emptying the queue so to make sure that enqueue() won't block indefinitely when adding records after\n+            // poll() isn't called anymore but before the binlog reader is stopped; note there's still a tiny chance for\n+            // this to happen if enough records are added again between here and the call to disconnect(); protecting\n+            // against it seems not worth though it as shouldn't happen for any practical queue size\n+            List<SourceRecord> unsent = new ArrayList<>();\n+            records.drainTo(unsent);\n+            logger.info(\"Discarding {} unsent record(s) due to the connector shutting down\", unsent.size());\n             doStop();\n             running.set(false);\n-        } finally {\n+        }\n+        finally {\n             if (failure.get() != null) {\n                 // We had a failure and it was propagated via poll(), after which Kafka Connect will stop\n                 // the connector, which will stop the task that will then stop this reader via this method.",
      "parent_sha": "2fd16a6bc0d8e642f0f7c2de420bc43e41852f1b"
    }
  },
  {
    "oid": "9f433b1e2444b2dd23a03b94398a279854b4af9c",
    "message": "DBZ-544 Comment fix",
    "date": "2018-01-17T14:16:37Z",
    "url": "https://github.com/debezium/debezium/commit/9f433b1e2444b2dd23a03b94398a279854b4af9c",
    "details": {
      "sha": "8b72e9cd4aebfd67ca7c3a5e4f43af87d2af4ffb",
      "filename": "debezium-core/src/main/java/io/debezium/function/Predicates.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/9f433b1e2444b2dd23a03b94398a279854b4af9c/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ffunction%2FPredicates.java",
      "raw_url": "https://github.com/debezium/debezium/raw/9f433b1e2444b2dd23a03b94398a279854b4af9c/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ffunction%2FPredicates.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ffunction%2FPredicates.java?ref=9f433b1e2444b2dd23a03b94398a279854b4af9c",
      "patch": "@@ -203,7 +203,7 @@ protected static <T> Predicate<T> includedInPatterns(Collection<Pattern> pattern\n     }\n \n     /**\n-     * Generate a predicate function that for any supplied string returns a {@link Pattern} if of the regular expression\n+     * Generate a predicate function that for any supplied string returns a {@link Pattern} representing the first regular expression\n      * in the supplied comma-separated list that matches the predicate parameter in a case-insensitive manner.\n      *\n      * @param regexPatterns the comma-separated regular expression pattern (or literal) strings; may not be null",
      "parent_sha": "cdf44faba464a1554e5ff3b9b9fa780cdecba4d7"
    }
  },
  {
    "oid": "559fb1f6009869d327e516b16289c64276a4ca62",
    "message": "DBZ-262 Passing enum constants to configuration in one more test",
    "date": "2017-05-30T09:18:56Z",
    "url": "https://github.com/debezium/debezium/commit/559fb1f6009869d327e516b16289c64276a4ca62",
    "details": {
      "sha": "ae99b9cc13986ac9a508d87abe046a35288d64cc",
      "filename": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlTableMaintenanceStatementsIT.java",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/debezium/debezium/blob/559fb1f6009869d327e516b16289c64276a4ca62/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlTableMaintenanceStatementsIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/559fb1f6009869d327e516b16289c64276a4ca62/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlTableMaintenanceStatementsIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlTableMaintenanceStatementsIT.java?ref=559fb1f6009869d327e516b16289c64276a4ca62",
      "patch": "@@ -55,19 +55,13 @@ public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws\n                 .with(MySqlConnectorConfig.PORT, System.getProperty(\"database.port\"))\n                 .with(MySqlConnectorConfig.USER, \"snapper\")\n                 .with(MySqlConnectorConfig.PASSWORD, \"snapperpass\")\n-                .with(\n-                        MySqlConnectorConfig.SSL_MODE,\n-                        MySqlConnectorConfig.SecureConnectionMode.DISABLED.name().toLowerCase()\n-                )\n+                .with(MySqlConnectorConfig.SSL_MODE, MySqlConnectorConfig.SecureConnectionMode.DISABLED)\n                 .with(MySqlConnectorConfig.SERVER_ID, 18765)\n                 .with(MySqlConnectorConfig.SERVER_NAME, \"tablemaintenanceit\")\n                 .with(MySqlConnectorConfig.POLL_INTERVAL_MS, 10)\n                 .with(MySqlConnectorConfig.DATABASE_WHITELIST, \"table_maintenance_test\")\n                 .with(MySqlConnectorConfig.DATABASE_HISTORY, FileDatabaseHistory.class)\n-                .with(\n-                        MySqlConnectorConfig.SNAPSHOT_MODE,\n-                        MySqlConnectorConfig.SnapshotMode.NEVER.toString()\n-                )\n+                .with(MySqlConnectorConfig.SNAPSHOT_MODE, MySqlConnectorConfig.SnapshotMode.NEVER)\n                 .with(FileDatabaseHistory.FILE_PATH, DB_HISTORY_PATH)\n                 .build();\n ",
      "parent_sha": "f17ced3b4af41db8632dd9cd54b5c41bc459056e"
    }
  },
  {
    "oid": "92b07d518f79f6ac5e0b212a0ef96146c765c924",
    "message": "DBZ-1166 Fix NPE for multiple schemas whitelist",
    "date": "2019-03-04T12:27:32Z",
    "url": "https://github.com/debezium/debezium/commit/92b07d518f79f6ac5e0b212a0ef96146c765c924",
    "details": {
      "sha": "d26c41e1913be4d6da6af8db0778e36f7304aa02",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/OracleConnection.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/92b07d518f79f6ac5e0b212a0ef96146c765c924/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnection.java",
      "raw_url": "https://github.com/debezium/debezium/raw/92b07d518f79f6ac5e0b212a0ef96146c765c924/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnection.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnection.java?ref=92b07d518f79f6ac5e0b212a0ef96146c765c924",
      "patch": "@@ -101,8 +101,8 @@ public void readSchema(Tables tables, String databaseCatalog, String schemaNameP\n \n         super.readSchema(tables, null, schemaNamePattern, null, columnFilter, removeTablesNotFoundInJdbc);\n \n-        Set<TableId> tableIds = new HashSet<>(tables.tableIds());\n-\n+        Set<TableId> tableIds = tables.tableIds().stream().filter(x -> schemaNamePattern.equals(x.schema())).collect(Collectors.toSet());\n+        \n         for (TableId tableId : tableIds) {\n             // super.readSchema() populates ids without the catalog; hence we apply the filtering only\n             // here and if a table is included, overwrite it with a new id including the catalog",
      "parent_sha": "42d7ac5a7eecd9f05cf7095976eccce89a912a1c"
    }
  },
  {
    "oid": "ea4697e7539e973162a50ad85678bbae5ef2775b",
    "message": "DBZ-1002 Avoiding NPEs when connector failed to start",
    "date": "2018-11-23T07:07:32Z",
    "url": "https://github.com/debezium/debezium/commit/ea4697e7539e973162a50ad85678bbae5ef2775b",
    "details": {
      "sha": "a1aec5c927481f492a19a30bb8ca22e8551dc752",
      "filename": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorTask.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/debezium/debezium/blob/ea4697e7539e973162a50ad85678bbae5ef2775b/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorTask.java",
      "raw_url": "https://github.com/debezium/debezium/raw/ea4697e7539e973162a50ad85678bbae5ef2775b/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorTask.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorTask.java?ref=ea4697e7539e973162a50ad85678bbae5ef2775b",
      "patch": "@@ -164,7 +164,9 @@ public List<SourceRecord> poll() throws InterruptedException {\n \n     @Override\n     public void commit() throws InterruptedException {\n-        coordinator.commitOffset(lastOffset);\n+        if (coordinator != null) {\n+            coordinator.commitOffset(lastOffset);\n+        }\n     }\n \n     @Override\n@@ -208,7 +210,9 @@ private void cleanupResources() {\n             LOGGER.error(\"Exception while closing JDBC connection\", e);\n         }\n \n-        schema.close();\n+        if (schema != null) {\n+            schema.close();\n+        }\n     }\n \n     @Override",
      "parent_sha": "13c91ca6bf7eba22978813bddc92d60722a1db66"
    }
  },
  {
    "oid": "83137d0a414a1d937dcad57a1b4b9a1814a5e98c",
    "message": "DBZ-965 Force heartbeat after end of each TX",
    "date": "2018-11-13T08:15:09Z",
    "url": "https://github.com/debezium/debezium/commit/83137d0a414a1d937dcad57a1b4b9a1814a5e98c",
    "details": {
      "sha": "c6e19a15a4cf8fafb3e62584080dc2a82bd77769",
      "filename": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/RecordsStreamProducer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debezium/debezium/blob/83137d0a414a1d937dcad57a1b4b9a1814a5e98c/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FRecordsStreamProducer.java",
      "raw_url": "https://github.com/debezium/debezium/raw/83137d0a414a1d937dcad57a1b4b9a1814a5e98c/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FRecordsStreamProducer.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FRecordsStreamProducer.java?ref=83137d0a414a1d937dcad57a1b4b9a1814a5e98c",
      "patch": "@@ -270,8 +270,14 @@ private void process(ReplicationMessage message, Long lsn, BlockingConsumer<Chan\n             }\n         }\n \n-        heartbeat.heartbeat(sourceInfo.partition(), sourceInfo.offset(),\n-                r -> consumer.accept(new ChangeEvent(r, message.isLastEventForLsn())));\n+        if (message.isLastEventForLsn()) {\n+            heartbeat.forcedBeat(sourceInfo.partition(), sourceInfo.offset(),\n+                    r -> consumer.accept(new ChangeEvent(r, message.isLastEventForLsn())));\n+        }\n+        else {\n+            heartbeat.heartbeat(sourceInfo.partition(), sourceInfo.offset(),\n+                    r -> consumer.accept(new ChangeEvent(r, message.isLastEventForLsn())));\n+        }\n     }\n \n     protected void generateCreateRecord(TableId tableId, Object[] rowData, boolean isLastEventForLsn, BlockingConsumer<ChangeEvent> recordConsumer) throws InterruptedException {",
      "parent_sha": "7c59023b9a9b47f7bcec4a8bcbe63b6235f7fbe8"
    }
  },
  {
    "oid": "4b29fe32ec4bf32d8fd2aa3191357fb5db94100d",
    "message": "DBZ-8353 Adjust retriable message to RetryingCallable class",
    "date": "2024-11-01T16:34:52Z",
    "url": "https://github.com/debezium/debezium/commit/4b29fe32ec4bf32d8fd2aa3191357fb5db94100d",
    "details": {
      "sha": "c5e1d16e2421c88768ebe21c787df32e944975d0",
      "filename": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SqlServerConnectorIT.java",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/debezium/debezium/blob/4b29fe32ec4bf32d8fd2aa3191357fb5db94100d/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/4b29fe32ec4bf32d8fd2aa3191357fb5db94100d/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorIT.java?ref=4b29fe32ec4bf32d8fd2aa3191357fb5db94100d",
      "patch": "@@ -66,11 +66,11 @@\n import io.debezium.data.VerifyRecord;\n import io.debezium.doc.FixFor;\n import io.debezium.embedded.async.AbstractAsyncEngineConnectorTest;\n+import io.debezium.embedded.async.RetryingCallable;\n import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n import io.debezium.junit.ConditionalFail;\n import io.debezium.junit.Flaky;\n import io.debezium.junit.logging.LogInterceptor;\n-import io.debezium.pipeline.ErrorHandler;\n import io.debezium.pipeline.spi.Offsets;\n import io.debezium.relational.RelationalDatabaseConnectorConfig;\n import io.debezium.relational.RelationalDatabaseSchema;\n@@ -3325,21 +3325,20 @@ private void shouldStopRetriableRestartsAtConfiguredMaximum(SqlRunnable scenario\n                 .with(\"errors.max.retries\", 1)\n                 .with(SqlServerConnectorConfig.LOG_POSITION_CHECK_ENABLED, false)\n                 .build();\n-        final LogInterceptor logInterceptor = new LogInterceptor(ErrorHandler.class);\n+        final LogInterceptor logInterceptor1 = new LogInterceptor(RetryingCallable.class);\n \n         try {\n             start(SqlServerConnector.class, config1);\n             assertConnectorIsRunning();\n             scenario.run();\n \n-            final String message1 = \"1 of 1 retries will be attempted\";\n-            final String message2 = \"The maximum number of 1 retries has been attempted\";\n+            final String message = \"Failed with retriable exception, will retry later; attempt #1 out of 1\";\n             Awaitility.await()\n-                    .alias(\"Checking for maximum restart messages\")\n+                    .alias(\"Checking for maximum restart messages1\")\n                     .pollInterval(100, TimeUnit.MILLISECONDS)\n                     .atMost(5, TimeUnit.SECONDS)\n                     .ignoreException(InstanceNotFoundException.class)\n-                    .until(() -> logInterceptor.containsMessage(message1) && logInterceptor.containsMessage(message2));\n+                    .until(() -> logInterceptor1.containsMessage(message));\n         }\n         finally {\n             // Set the database back online, since otherwise, it will be impossible to create it again",
      "parent_sha": "c008719ad332e5cc7a08a3b735137b33fb42c1fb"
    }
  },
  {
    "oid": "db61ad29804cb3a2389be5619a4ccfcbb9460298",
    "message": "DBZ-491 Asserting offsets as per the given time and timezone (instead of now)",
    "date": "2017-12-01T09:55:43Z",
    "url": "https://github.com/debezium/debezium/commit/db61ad29804cb3a2389be5619a4ccfcbb9460298",
    "details": {
      "sha": "478da5812c7a0dc48d5199b7e392c42109ce1b50",
      "filename": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlConnectorRegressionIT.java",
      "status": "modified",
      "additions": 20,
      "deletions": 8,
      "changes": 28,
      "blob_url": "https://github.com/debezium/debezium/blob/db61ad29804cb3a2389be5619a4ccfcbb9460298/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlConnectorRegressionIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/db61ad29804cb3a2389be5619a4ccfcbb9460298/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlConnectorRegressionIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlConnectorRegressionIT.java?ref=db61ad29804cb3a2389be5619a4ccfcbb9460298",
      "patch": "@@ -23,6 +23,7 @@\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.time.temporal.TemporalAdjuster;\n+import java.util.TimeZone;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.kafka.connect.data.Struct;\n@@ -224,8 +225,12 @@ public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws\n                 OffsetDateTime c4DateTime = OffsetDateTime.parse(c4, ZonedTimestamp.FORMATTER);\n \n                 // We're running the connector in the same timezone as the server, so the timezone in the timestamp\n-                // should match our current offset ...\n-                assertThat(c4DateTime.getOffset()).isEqualTo(OffsetDateTime.now().getOffset());\n+                // should match our current TZ's offset at the given time...\n+                ZoneOffset expectedOffset = ZonedDateTime.of(\n+                        LocalDate.of(1970, 1, 1).atTime(0, 0),\n+                        TimeZone.getDefault().toZoneId()\n+                ).getOffset();\n+                assertThat(c4DateTime.getOffset()).isEqualTo(expectedOffset);\n \n                 // In case the timestamp string not in our timezone, convert to UTC so we can compare ...\n                 c4DateTime = c4DateTime.withOffsetSameInstant(ZoneOffset.of(\"Z\"));\n@@ -480,8 +485,12 @@ public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshotAndConnect\n                 OffsetDateTime c4DateTime = OffsetDateTime.parse(c4, ZonedTimestamp.FORMATTER);\n \n                 // We're running the connector in the same timezone as the server, so the timezone in the timestamp\n-                // should match our current offset ...\n-                assertThat(c4DateTime.getOffset()).isEqualTo(OffsetDateTime.now().getOffset());\n+                // should match our TZ's offset at the given time...\n+                ZoneOffset expectedOffset = ZonedDateTime.of(\n+                        LocalDate.of(1970, 1, 1).atTime(0, 0),\n+                        TimeZone.getDefault().toZoneId()\n+                ).getOffset();\n+                assertThat(c4DateTime.getOffset()).isEqualTo(expectedOffset);\n \n                 // In case the timestamp string not in our timezone, convert to UTC so we can compare ...\n                 c4DateTime = c4DateTime.withOffsetSameInstant(ZoneOffset.of(\"Z\"));\n@@ -642,9 +651,15 @@ public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLExceptio\n \n                 // '2014-09-08 17:51:04.777'\n                 String c4 = after.getString(\"c4\"); // timestamp\n+\n+                ZoneOffset localOffset = ZonedDateTime.of(\n+                        LocalDate.of(2014, 9, 8).atTime(0, 0),\n+                        TimeZone.getDefault().toZoneId()\n+                ).getOffset();\n+\n                 OffsetDateTime c4DateTime = OffsetDateTime.parse(c4, ZonedTimestamp.FORMATTER);\n                 // In case the timestamp string not in our timezone, convert to ours so we can compare ...\n-                c4DateTime = c4DateTime.withOffsetSameInstant(OffsetDateTime.now().getOffset());\n+                c4DateTime = c4DateTime.withOffsetSameInstant(localOffset);\n                 assertThat(c4DateTime.getYear()).isEqualTo(2014);\n                 assertThat(c4DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);\n                 assertThat(c4DateTime.getDayOfMonth()).isEqualTo(8);\n@@ -653,9 +668,6 @@ public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLExceptio\n                 assertThat(c4DateTime.getMinute()).isEqualTo(51);\n                 assertThat(c4DateTime.getSecond()).isEqualTo(4);\n                 assertThat(c4DateTime.getNano()).isEqualTo((int) TimeUnit.MILLISECONDS.toNanos(780));\n-                // We're running the connector in the same timezone as the server, so the timezone in the timestamp\n-                // should match our current offset ...\n-                assertThat(c4DateTime.getOffset()).isEqualTo(OffsetDateTime.now().getOffset());\n             } else if (record.topic().endsWith(\"dbz_123_bitvaluetest\")) {\n                 // All row events should have the same values ...\n                 Struct after = value.getStruct(Envelope.FieldName.AFTER);",
      "parent_sha": "be52348bf19b5ea1306b0c5bb1aafb06ad437390"
    }
  },
  {
    "oid": "6b1455666ad04cc50c023f1ec6298c1563a3a5c3",
    "message": "DBZ-6411 Message content logged only at TRACE",
    "date": "2023-05-03T04:51:28Z",
    "url": "https://github.com/debezium/debezium/commit/6b1455666ad04cc50c023f1ec6298c1563a3a5c3",
    "details": {
      "sha": "e13d7f3d0a7ec82cde63cc396058d49af3372c95",
      "filename": "debezium-core/src/main/java/io/debezium/transforms/HeaderToValue.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/6b1455666ad04cc50c023f1ec6298c1563a3a5c3/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FHeaderToValue.java",
      "raw_url": "https://github.com/debezium/debezium/raw/6b1455666ad04cc50c023f1ec6298c1563a3a5c3/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FHeaderToValue.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FHeaderToValue.java?ref=6b1455666ad04cc50c023f1ec6298c1563a3a5c3",
      "patch": "@@ -146,7 +146,7 @@ public R apply(R record) {\n \n         final Struct value = requireStruct(record.value(), \"Header field insertion\");\n \n-        LOGGER.debug(\"Processing record {}\", value);\n+        LOGGER.trace(\"Processing record {}\", value);\n         Map<String, Header> headerToProcess = StreamSupport.stream(record.headers().spliterator(), false)\n                 .filter(header -> headers.contains(header.key()))\n                 .collect(Collectors.toMap(Header::key, Function.identity()));",
      "parent_sha": "e5d433283576eb304b7c057ffccbf3eb54bd0a04"
    }
  },
  {
    "oid": "2efdae1ffd2763f09bfafa60df4f356482ad3c92",
    "message": "DBZ-1179 Set the default replication factor property for history topics when none is provided",
    "date": "2019-03-21T11:07:10Z",
    "url": "https://github.com/debezium/debezium/commit/2efdae1ffd2763f09bfafa60df4f356482ad3c92",
    "details": {
      "sha": "c366d47645da8bdad8e5995687841923a97e72f2",
      "filename": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/debezium/debezium/blob/2efdae1ffd2763f09bfafa60df4f356482ad3c92/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java",
      "raw_url": "https://github.com/debezium/debezium/raw/2efdae1ffd2763f09bfafa60df4f356482ad3c92/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java?ref=2efdae1ffd2763f09bfafa60df4f356482ad3c92",
      "patch": "@@ -335,7 +335,17 @@ public void initializeStorage() {\n         try (AdminClient admin = AdminClient.create(this.producerConfig.asProperties())) {\n             // Find default replication factor\n             Config brokerConfig = getKafkaBrokerConfig(admin);\n-            final short replicationFactor = Short.parseShort(brokerConfig.get(DEFAULT_TOPIC_REPLICATION_FACTOR_PROP_NAME).value());\n+            String defaultReplicationFactorValue = brokerConfig.get(DEFAULT_TOPIC_REPLICATION_FACTOR_PROP_NAME).value();\n+            final short replicationFactor;\n+            // Ensure that the default replication factor property was returned by the Admin Client\n+            if (defaultReplicationFactorValue != null) {\n+                replicationFactor = Short.parseShort(defaultReplicationFactorValue);\n+            }\n+            else {\n+                // Otherwise warn that no property was obtained and default it to 1 - users can increase this later if desired\n+                logger.warn(\"Unable to obtain the default replication factor from the brokers at \" + producerConfig.getString(BOOTSTRAP_SERVERS) + \" - Setting value to 1 instead\");\n+                replicationFactor = 1;\n+            }\n \n             // Create topic\n             final NewTopic topic = new NewTopic(topicName, (short)1, replicationFactor);",
      "parent_sha": "915bdc9b7f6af8e361a0e8a82e498fc61f589426"
    }
  },
  {
    "oid": "4b5475391ca7823eb403715a172adc08acbe500e",
    "message": "DBZ-1440 Supports exported snapshots for Pg 9.4+",
    "date": "2019-08-19T18:25:53Z",
    "url": "https://github.com/debezium/debezium/commit/4b5475391ca7823eb403715a172adc08acbe500e",
    "details": {
      "sha": "53ac0e434d0ca8f94b0fee453a78d3e9c24770f4",
      "filename": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresReplicationConnection.java",
      "status": "modified",
      "additions": 14,
      "deletions": 18,
      "changes": 32,
      "blob_url": "https://github.com/debezium/debezium/blob/4b5475391ca7823eb403715a172adc08acbe500e/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresReplicationConnection.java",
      "raw_url": "https://github.com/debezium/debezium/raw/4b5475391ca7823eb403715a172adc08acbe500e/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresReplicationConnection.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresReplicationConnection.java?ref=4b5475391ca7823eb403715a172adc08acbe500e",
      "patch": "@@ -203,17 +203,16 @@ else if (shouldCreateSlot || !slotInfo.hasValidFlushedLsn()) {\n     }\n \n     private boolean useTemporarySlot() throws SQLException {\n-        return dropSlotOnClose && isPg10OrGreater();\n+        return dropSlotOnClose && isPg94OrGreater();\n     }\n \n     private boolean exportSnapshotOnCreate() throws SQLException {\n-        return exportSnapshot && isPg10OrGreater();\n+        return exportSnapshot && isPg94OrGreater();\n     }\n \n-    private boolean isPg10OrGreater() throws SQLException {\n-        return pgConnection().getServerMajorVersion() >= 10;\n+    private boolean isPg94OrGreater() throws SQLException {\n+        return pgConnection().haveMinimumServerVersion(90400);\n     }\n-\n     /**\n      * creating a replication connection and starting to stream involves a few steps:\n      * 1. we create the connection and ensure that\n@@ -270,37 +269,34 @@ public void initConnection() throws SQLException, InterruptedException {\n \n     @Override\n     public Optional<SlotCreationResult> createReplicationSlot() throws SQLException {\n-        // note that some of these options are only supported in pg10 or newer, additionally\n+        // note that some of these options are only supported in pg94+, additionally\n         // the options are not yet exported by the jdbc api wrapper, therefore, we just do this ourselves\n         // but eventually this should be moved back to the jdbc API\n         // see https://github.com/pgjdbc/pgjdbc/issues/1305\n \n         LOGGER.debug(\"Creating new replication slot '{}' for plugin '{}'\", slotName, plugin);\n         String tempPart = \"\";\n-        String exportPart = \"\";\n-        Boolean isPg10 = isPg10OrGreater();\n-        if ((dropSlotOnClose || exportSnapshot) && !isPg10OrGreater()) {\n-            LOGGER.warn(\"A slot marked as temporary or with an exported snapshot was created, but not on a supported version of Postgres, ignoring!\");\n+        Boolean canExportSnapshot = isPg94OrGreater();\n+        if ((dropSlotOnClose || exportSnapshot) && !canExportSnapshot) {\n+            LOGGER.warn(\"A slot marked as temporary or with an exported snapshot was created, \" +\n+                    \"but not on a supported version of Postgres, ignoring!\");\n         }\n         if (useTemporarySlot()) {\n             tempPart = \"TEMPORARY\";\n         }\n-        if (exportSnapshotOnCreate()) {\n-            exportPart = \"EXPORT_SNAPSHOT\";\n-        }\n+\n         try (Statement stmt = pgConnection().createStatement()) {\n             String createCommand = String.format(\n-                    \"CREATE_REPLICATION_SLOT %s %s LOGICAL %s %s\",\n+                    \"CREATE_REPLICATION_SLOT %s %s LOGICAL %s\",\n                     slotName,\n                     tempPart,\n-                    plugin.getPostgresPluginName(),\n-                    exportPart\n+                    plugin.getPostgresPluginName()\n             );\n             LOGGER.info(\"Creating replication slot with command {}\", createCommand);\n             stmt.execute(createCommand);\n-            // when we are in pg10, we can parse the slot creation info, otherwise, it returns\n+            // when we are in pg94+, we can parse the slot creation info, otherwise, it returns\n             // nothing\n-            if (isPg10) {\n+            if (canExportSnapshot) {\n                 this.slotCreationInfo = parseSlotCreation(stmt.getResultSet());\n             }\n ",
      "parent_sha": "4ae105bdcebad18b2e27b0fb0d5b3d9c4714ff85"
    }
  },
  {
    "oid": "e57c607bcf65f566045881e40a8cfc705c3c6e6d",
    "message": "DBZ-6762 Rename to general name",
    "date": "2023-11-22T05:10:40Z",
    "url": "https://github.com/debezium/debezium/commit/e57c607bcf65f566045881e40a8cfc705c3c6e6d",
    "details": {
      "sha": "5b2e352536eb3f08f219e0bfe8dadfcc8490102d",
      "filename": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/rest/DebeziumMongoDbConnectorResource.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/e57c607bcf65f566045881e40a8cfc705c3c6e6d/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2Frest%2FDebeziumMongoDbConnectorResource.java",
      "raw_url": "https://github.com/debezium/debezium/raw/e57c607bcf65f566045881e40a8cfc705c3c6e6d/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2Frest%2FDebeziumMongoDbConnectorResource.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2Frest%2FDebeziumMongoDbConnectorResource.java?ref=e57c607bcf65f566045881e40a8cfc705c3c6e6d",
      "patch": "@@ -61,8 +61,8 @@ protected MongoDbConnection getConnection(Configuration configuration) {\n \n     @Override\n     public List<DataCollection> getMatchingCollections(Configuration configuration) {\n-        try (MongoDbConnection primary = getConnection(configuration)) {\n-            return primary.collections().stream()\n+        try (MongoDbConnection connection = getConnection(configuration)) {\n+            return connection.collections().stream()\n                     .map(collectionId -> new DataCollection(collectionId.replicaSetName(), collectionId.dbName(), collectionId.name()))\n                     .collect(Collectors.toList());\n         }",
      "parent_sha": "aeaba3ae7032fc04c0c7ddac535da261db567841"
    }
  },
  {
    "oid": "807da1f9b8cc5f933be512d2e4b63d3ef607c533",
    "message": "DBZ-1278 Change log message wording\n\nCo-Authored-By: Gunnar Morling <gunnar.morling@googlemail.com>",
    "date": "2019-06-19T15:05:26Z",
    "url": "https://github.com/debezium/debezium/commit/807da1f9b8cc5f933be512d2e4b63d3ef607c533",
    "details": {
      "sha": "2de7dc0f6c8f7f5b82170c2eb5f309791c08f6b2",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/listener/AlterTableParserListener.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/807da1f9b8cc5f933be512d2e4b63d3ef607c533/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2Fantlr%2Flistener%2FAlterTableParserListener.java",
      "raw_url": "https://github.com/debezium/debezium/raw/807da1f9b8cc5f933be512d2e4b63d3ef607c533/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2Fantlr%2Flistener%2FAlterTableParserListener.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2Fantlr%2Flistener%2FAlterTableParserListener.java?ref=807da1f9b8cc5f933be512d2e4b63d3ef607c533",
      "patch": "@@ -53,7 +53,7 @@ public AlterTableParserListener(MySqlAntlrDdlParser parser, List<ParseTreeListen\n     public void enterAlterTable(MySqlParser.AlterTableContext ctx) {\n         final TableId tableId = parser.parseQualifiedTableId(ctx.tableName().fullId());\n         if (parser.databaseTables().forTable(tableId) == null) {\n-            LOG.debug(\"Ignoring ALTER TABLE statement for non-recorded table {}\", tableId);\n+            LOG.debug(\"Ignoring ALTER TABLE statement for non-captured table {}\", tableId);\n             return;\n         }\n         tableEditor = parser.databaseTables().editTable(tableId);\n@@ -333,4 +333,4 @@ public void exitAlterByRenameColumn(MySqlParser.AlterByRenameColumnContext ctx)\n         }, tableEditor, columnDefinitionListener);\n         super.exitAlterByRenameColumn(ctx);\n     }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "3012524ea1bde44c175cd465472cdeb9f430fbb4"
    }
  },
  {
    "oid": "7ba7929d7e78220f185224e89b9d3beacd9f2838",
    "message": "DBZ-5386 Missing \"previousId\" property with parsing the rename statement in kafka history topic",
    "date": "2022-07-11T05:44:14Z",
    "url": "https://github.com/debezium/debezium/commit/7ba7929d7e78220f185224e89b9d3beacd9f2838",
    "details": {
      "sha": "d500d015d9da10d81da798bd85f23320128769fa",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlDatabaseSchema.java",
      "status": "modified",
      "additions": 24,
      "deletions": 9,
      "changes": 33,
      "blob_url": "https://github.com/debezium/debezium/blob/7ba7929d7e78220f185224e89b9d3beacd9f2838/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlDatabaseSchema.java",
      "raw_url": "https://github.com/debezium/debezium/raw/7ba7929d7e78220f185224e89b9d3beacd9f2838/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlDatabaseSchema.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlDatabaseSchema.java?ref=7ba7929d7e78220f185224e89b9d3beacd9f2838",
      "patch": "@@ -291,15 +291,30 @@ else if (event instanceof SetVariableEvent) {\n     private void emitChangeEvent(MySqlPartition partition, MySqlOffsetContext offset, List<SchemaChangeEvent> schemaChangeEvents,\n                                  final String sanitizedDbName, Event event, TableId tableId, SchemaChangeEventType type,\n                                  boolean snapshot) {\n-        schemaChangeEvents.add(SchemaChangeEvent.of(\n-                type,\n-                partition,\n-                offset,\n-                sanitizedDbName,\n-                null,\n-                event.statement(),\n-                tableId != null ? tableFor(tableId) : null,\n-                snapshot));\n+        SchemaChangeEvent schemaChangeEvent;\n+        if (type.equals(SchemaChangeEventType.ALTER) && event instanceof TableAlteredEvent\n+                && ((TableAlteredEvent) event).previousTableId() != null) {\n+            schemaChangeEvent = SchemaChangeEvent.ofRename(\n+                    partition,\n+                    offset,\n+                    sanitizedDbName,\n+                    null,\n+                    event.statement(),\n+                    tableId != null ? tableFor(tableId) : null,\n+                    ((TableAlteredEvent) event).previousTableId());\n+        }\n+        else {\n+            schemaChangeEvent = SchemaChangeEvent.of(\n+                    type,\n+                    partition,\n+                    offset,\n+                    sanitizedDbName,\n+                    null,\n+                    event.statement(),\n+                    tableId != null ? tableFor(tableId) : null,\n+                    snapshot);\n+        }\n+        schemaChangeEvents.add(schemaChangeEvent);\n     }\n \n     private boolean acceptableDatabase(final String databaseName) {",
      "parent_sha": "366c95707af186892e8e6bf5d1347d714d0d2ac6"
    }
  },
  {
    "oid": "1c965e647a43d8b85ac36a0b9bdb9ce83042b1a3",
    "message": "DBZ-2054 Fix compatibility regression with Kafka 1.x",
    "date": "2020-05-07T07:15:55Z",
    "url": "https://github.com/debezium/debezium/commit/1c965e647a43d8b85ac36a0b9bdb9ce83042b1a3",
    "details": {
      "sha": "9a3237e613653587efc2a8f3dcbde77ffcec30ce",
      "filename": "debezium-embedded/src/main/java/io/debezium/embedded/EmbeddedEngine.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debezium/debezium/blob/1c965e647a43d8b85ac36a0b9bdb9ce83042b1a3/debezium-embedded%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fembedded%2FEmbeddedEngine.java",
      "raw_url": "https://github.com/debezium/debezium/raw/1c965e647a43d8b85ac36a0b9bdb9ce83042b1a3/debezium-embedded%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fembedded%2FEmbeddedEngine.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-embedded%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fembedded%2FEmbeddedEngine.java?ref=1c965e647a43d8b85ac36a0b9bdb9ce83042b1a3",
      "patch": "@@ -737,7 +737,8 @@ public OffsetStorageReader offsetStorageReader() {\n                                 return offsetReader;\n                             }\n \n-                            @Override\n+                            // Purposely not marking this method with @Override as it was introduced in Kafka 2.x\n+                            // and otherwise would break builds based on Kafka 1.x\n                             public Map<String, String> configs() {\n                                 // TODO Auto-generated method stub\n                                 return null;",
      "parent_sha": "0a58399b46360cd6f1ddefc192cff449cf1a36d6"
    }
  },
  {
    "oid": "d85d4965692acfab0582031eab43a716f5094837",
    "message": "DBZ-252 reorder columns",
    "date": "2018-06-15T09:42:23Z",
    "url": "https://github.com/debezium/debezium/commit/d85d4965692acfab0582031eab43a716f5094837",
    "details": {
      "sha": "cd3999bff7288e3d439754a0a2ceb6fa1759501f",
      "filename": "debezium-ddl-parser/src/main/java/io/debezium/antlr/mysql/MySqlAntlrDdlParser.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/debezium/debezium/blob/d85d4965692acfab0582031eab43a716f5094837/debezium-ddl-parser%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fantlr%2Fmysql%2FMySqlAntlrDdlParser.java",
      "raw_url": "https://github.com/debezium/debezium/raw/d85d4965692acfab0582031eab43a716f5094837/debezium-ddl-parser%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fantlr%2Fmysql%2FMySqlAntlrDdlParser.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-ddl-parser%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fantlr%2Fmysql%2FMySqlAntlrDdlParser.java?ref=d85d4965692acfab0582031eab43a716f5094837",
      "patch": "@@ -278,12 +278,6 @@ public void enterAlterTable(MySqlParser.AlterTableContext ctx) {\n         public void enterAlterByAddColumn(MySqlParser.AlterByAddColumnContext ctx) {\n             String columnName = parseColumnName(ctx.uid(0));\n             columnEditor = Column.editor().name(columnName);\n-            if (ctx.FIRST() != null) {\n-                //TODO: this new column should have the first position in table\n-            } else if (ctx.AFTER() != null) {\n-                String afterColumn = parseColumnName(ctx.uid(1));\n-                //TODO: this column should have position after the specified column\n-            }\n             super.exitAlterByAddColumn(ctx);\n         }\n \n@@ -301,7 +295,16 @@ public void enterAlterByAddColumns(MySqlParser.AlterByAddColumnsContext ctx) {\n \n         @Override\n         public void exitAlterByAddColumn(MySqlParser.AlterByAddColumnContext ctx) {\n+            String columnName = columnEditor.name();\n             tableEditor.addColumn(columnEditor.create());\n+\n+            if (ctx.FIRST() != null) {\n+                //TODO: this new column should have the first position in table\n+                tableEditor.reorderColumn(columnName, null);\n+            } else if (ctx.AFTER() != null) {\n+                String afterColumn = parseColumnName(ctx.uid(1));\n+                tableEditor.reorderColumn(columnName, afterColumn);\n+            }\n             super.exitAlterByAddColumn(ctx);\n         }\n ",
      "parent_sha": "a35d5aaa8c5f595627cccaef11d9da9b183f410b"
    }
  },
  {
    "oid": "0477ddf0e1ef97c8d174fc2c9bffd8e587bb3ff6",
    "message": "DBZ-5670 Use new driver prefix",
    "date": "2022-10-05T12:27:04Z",
    "url": "https://github.com/debezium/debezium/commit/0477ddf0e1ef97c8d174fc2c9bffd8e587bb3ff6",
    "details": {
      "sha": "138cc66e9629a7658bf00a295e530da5989b6481",
      "filename": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorTask.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/0477ddf0e1ef97c8d174fc2c9bffd8e587bb3ff6/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorTask.java",
      "raw_url": "https://github.com/debezium/debezium/raw/0477ddf0e1ef97c8d174fc2c9bffd8e587bb3ff6/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorTask.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorTask.java?ref=0477ddf0e1ef97c8d174fc2c9bffd8e587bb3ff6",
      "patch": "@@ -59,8 +59,8 @@ public ChangeEventSourceCoordinator<SqlServerPartition, SqlServerOffsetContext>\n \n         // By default do not load whole result sets into memory\n         config = config.edit()\n-                .withDefault(\"database.responseBuffering\", \"adaptive\")\n-                .withDefault(\"database.fetchSize\", 10_000)\n+                .withDefault(CommonConnectorConfig.DRIVER_CONFIG_PREFIX + \"responseBuffering\", \"adaptive\")\n+                .withDefault(CommonConnectorConfig.DRIVER_CONFIG_PREFIX + \"fetchSize\", 10_000)\n                 .build();\n \n         final SqlServerConnectorConfig connectorConfig = new SqlServerConnectorConfig(config);",
      "parent_sha": "b20afb9091562f4a37664878e03aebe4a959db0a"
    }
  },
  {
    "oid": "16d2d983a040c22d3020327135dd8bb5f274c463",
    "message": "DBZ-5009 Make ORA-00600 error `krvrdccs10` retriable",
    "date": "2024-09-05T16:32:24Z",
    "url": "https://github.com/debezium/debezium/commit/16d2d983a040c22d3020327135dd8bb5f274c463",
    "details": {
      "sha": "8b96f5ae7cd8034a80a28cf90d17bc6cad496cc7",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/OracleErrorHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/16d2d983a040c22d3020327135dd8bb5f274c463/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleErrorHandler.java",
      "raw_url": "https://github.com/debezium/debezium/raw/16d2d983a040c22d3020327135dd8bb5f274c463/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleErrorHandler.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleErrorHandler.java?ref=16d2d983a040c22d3020327135dd8bb5f274c463",
      "patch": "@@ -60,8 +60,8 @@ public class OracleErrorHandler extends ErrorHandler {\n      */\n     @Immutable\n     private static final Set<String> RETRIABLE_ORA600_ERROR_MESSAGES = Collect.unmodifiableSet(\n-            \"krvrdGetUID\" // Changes made to object identifier (schema change)\n-    );\n+            \"krvrdGetUID\", // Changes made to object identifier (schema change)\n+            \"krvrdccs10\");\n \n     public OracleErrorHandler(OracleConnectorConfig connectorConfig, ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n         super(OracleConnector.class, connectorConfig, queue, replacedErrorHandler);",
      "parent_sha": "df725cd87fc04cd36fb22f3dbea6557e7fcdfa9e"
    }
  },
  {
    "oid": "d376faa8e0b3155d95efae7ee7536957d23223d8",
    "message": "DBZ-4450 Fix * import",
    "date": "2022-04-28T12:43:09Z",
    "url": "https://github.com/debezium/debezium/commit/d376faa8e0b3155d95efae7ee7536957d23223d8",
    "details": {
      "sha": "7418821fe1e53b125f64a7a01a6cd2cf0e0926d9",
      "filename": "debezium-server/debezium-server-pubsub/src/main/java/io/debezium/server/pubsub/PubSubLiteChangeConsumer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debezium/debezium/blob/d376faa8e0b3155d95efae7ee7536957d23223d8/debezium-server%2Fdebezium-server-pubsub%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fpubsub%2FPubSubLiteChangeConsumer.java",
      "raw_url": "https://github.com/debezium/debezium/raw/d376faa8e0b3155d95efae7ee7536957d23223d8/debezium-server%2Fdebezium-server-pubsub%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fpubsub%2FPubSubLiteChangeConsumer.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-server%2Fdebezium-server-pubsub%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fserver%2Fpubsub%2FPubSubLiteChangeConsumer.java?ref=d376faa8e0b3155d95efae7ee7536957d23223d8",
      "patch": "@@ -26,7 +26,10 @@\n \n import com.google.api.core.ApiFuture;\n import com.google.api.core.ApiFutures;\n-import com.google.cloud.pubsublite.*;\n+import com.google.cloud.pubsublite.CloudRegionOrZone;\n+import com.google.cloud.pubsublite.ProjectId;\n+import com.google.cloud.pubsublite.TopicName;\n+import com.google.cloud.pubsublite.TopicPath;\n import com.google.cloud.pubsublite.cloudpubsub.Publisher;\n import com.google.cloud.pubsublite.cloudpubsub.PublisherSettings;\n import com.google.protobuf.ByteString;",
      "parent_sha": "ba6a6205439ac847aa5dcb669c97ad794a03ed9b"
    }
  },
  {
    "oid": "da143ef8b2e34e424a7b455fa56eb9e75f37a7b4",
    "message": "DBZ-8114: start connector after altering schema to avoid having to stop and start it again for Informix",
    "date": "2024-08-15T06:04:26Z",
    "url": "https://github.com/debezium/debezium/commit/da143ef8b2e34e424a7b455fa56eb9e75f37a7b4",
    "details": {
      "sha": "fbb33f53914c6a65291a9248e9eba64797b0e49a",
      "filename": "debezium-embedded/src/test/java/io/debezium/transforms/outbox/AbstractEventRouterTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/debezium/debezium/blob/da143ef8b2e34e424a7b455fa56eb9e75f37a7b4/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftransforms%2Foutbox%2FAbstractEventRouterTest.java",
      "raw_url": "https://github.com/debezium/debezium/raw/da143ef8b2e34e424a7b455fa56eb9e75f37a7b4/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftransforms%2Foutbox%2FAbstractEventRouterTest.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-embedded%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftransforms%2Foutbox%2FAbstractEventRouterTest.java?ref=da143ef8b2e34e424a7b455fa56eb9e75f37a7b4",
      "patch": "@@ -211,7 +211,6 @@ public void shouldRespectJsonFormatAsString() throws Exception {\n     @Test\n     @FixFor({ \"DBZ-1169\", \"DBZ-3940\" })\n     public void shouldSupportAllFeatures() throws Exception {\n-        startConnectorWithNoSnapshot();\n \n         final StringBuilder placements = new StringBuilder();\n         placements.append(envelope(getFieldSchemaVersion(), \"eventVersion\")).append(\",\");\n@@ -228,6 +227,8 @@ public void shouldSupportAllFeatures() throws Exception {\n \n         alterTableWithExtra4Fields();\n \n+        startConnectorWithNoSnapshot();\n+\n         databaseConnection().execute(createInsert(\n                 \"f9171eb6-19f3-4579-9206-0e179d2ebad7\",\n                 \"UserUpdated\",\n@@ -282,7 +283,6 @@ public void shouldSupportAllFeatures() throws Exception {\n     @Test\n     @FixFor({ \"DBZ-1707\", \"DBZ-3940\" })\n     public void shouldConvertMicrosecondsTimestampToMilliseconds() throws Exception {\n-        startConnectorWithNoSnapshot();\n \n         outboxEventRouter = new EventRouter<>();\n         final Map<String, String> config = new HashMap<>();\n@@ -291,6 +291,8 @@ public void shouldConvertMicrosecondsTimestampToMilliseconds() throws Exception\n \n         alterTableWithTimestampField();\n \n+        startConnectorWithNoSnapshot();\n+\n         databaseConnection().execute(createInsert(\n                 \"f9171eb6-19f3-4579-9206-0e179d2ebad7\",\n                 \"UserUpdated\",\n@@ -314,7 +316,6 @@ public void shouldConvertMicrosecondsTimestampToMilliseconds() throws Exception\n     @Test\n     @FixFor({ \"DBZ-1320\", \"DBZ-3940\" })\n     public void shouldNotProduceTombstoneEventForNullPayload() throws Exception {\n-        startConnectorWithNoSnapshot();\n \n         final StringBuilder placements = new StringBuilder();\n         placements.append(envelope(getFieldSchemaVersion(), \"eventVersion\")).append(\",\");\n@@ -332,6 +333,8 @@ public void shouldNotProduceTombstoneEventForNullPayload() throws Exception {\n \n         alterTableWithExtra4Fields();\n \n+        startConnectorWithNoSnapshot();\n+\n         databaseConnection().execute(createInsert(\n                 \"a9d76f78-bda6-48d3-97ed-13a146163218\",\n                 \"UserUpdated\",\n@@ -374,7 +377,6 @@ public void shouldNotProduceTombstoneEventForNullPayload() throws Exception {\n     @Test\n     @FixFor({ \"DBZ-1320\", \"DBZ-3940\" })\n     public void shouldProduceTombstoneEventForNullPayload() throws Exception {\n-        startConnectorWithNoSnapshot();\n \n         final StringBuilder placements = new StringBuilder();\n         placements.append(envelope(getFieldSchemaVersion(), \"eventVersion\")).append(\",\");\n@@ -393,6 +395,8 @@ public void shouldProduceTombstoneEventForNullPayload() throws Exception {\n \n         alterTableWithExtra4Fields();\n \n+        startConnectorWithNoSnapshot();\n+\n         databaseConnection().execute(createInsert(\n                 \"a9d76f78-bda6-48d3-97ed-13a146163218\",\n                 \"UserUpdated\",\n@@ -433,14 +437,16 @@ public void shouldProduceTombstoneEventForNullPayload() throws Exception {\n     @Test\n     @FixFor({ \"DBZ-1320\", \"DBZ-3940\" })\n     public void shouldProduceTombstoneEventForEmptyPayload() throws Exception {\n-        startConnectorWithNoSnapshot();\n \n         outboxEventRouter = new EventRouter<>();\n         final Map<String, String> config = new HashMap<>();\n         config.put(EventRouterConfigDefinition.ROUTE_TOMBSTONE_ON_EMPTY_PAYLOAD.name(), \"true\");\n         outboxEventRouter.configure(config);\n \n         alterTableModifyPayload();\n+\n+        startConnectorWithNoSnapshot();\n+\n         databaseConnection().execute(createInsert(\n                 \"a9d76f78-bda6-48d3-97ed-13a146163218\",\n                 \"UserUpdated\",",
      "parent_sha": "9780fe256eacc61b62bed69f58adacb4e8b75694"
    }
  },
  {
    "oid": "310e788c224685a12cdb83b96ca92b73e41cd720",
    "message": "DBZ-5202 Add retry/delay to offset transaction id resolution",
    "date": "2022-06-07T07:04:03Z",
    "url": "https://github.com/debezium/debezium/commit/310e788c224685a12cdb83b96ca92b73e41cd720",
    "details": {
      "sha": "a7c0197c732fd6956bd333602d5dd7caf3d0a08e",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/logminer/LogMinerAdapter.java",
      "status": "modified",
      "additions": 21,
      "deletions": 9,
      "changes": 30,
      "blob_url": "https://github.com/debezium/debezium/blob/310e788c224685a12cdb83b96ca92b73e41cd720/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerAdapter.java",
      "raw_url": "https://github.com/debezium/debezium/raw/310e788c224685a12cdb83b96ca92b73e41cd720/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerAdapter.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerAdapter.java?ref=310e788c224685a12cdb83b96ca92b73e41cd720",
      "patch": "@@ -43,6 +43,7 @@\n import io.debezium.relational.history.HistoryRecordComparator;\n import io.debezium.util.Clock;\n import io.debezium.util.HexConverter;\n+import io.debezium.util.Metronome;\n import io.debezium.util.Strings;\n \n /**\n@@ -228,6 +229,9 @@ private OracleOffsetContext determineSnapshotOffset(OracleConnectorConfig connec\n                         break;\n                     }\n                 }\n+                catch (InterruptedException e) {\n+                    throw new DebeziumException(\"Failed to resolve snapshot offset\", e);\n+                }\n                 finally {\n                     stopSession(connection);\n                 }\n@@ -310,20 +314,27 @@ private List<LogFile> getOrderedLogsFromScn(OracleConnectorConfig config, Scn si\n                 .collect(Collectors.toList());\n     }\n \n-    private Optional<String> getTransactionIdForScn(Scn scn, OracleConnection connection) throws SQLException {\n+    private Optional<String> getTransactionIdForScn(Scn scn, OracleConnection connection) throws SQLException, InterruptedException {\n         LOGGER.debug(\"\\tGet transaction id for SCN {}\", scn);\n         final AtomicReference<String> transactionId = new AtomicReference<>();\n-        connection.call(\"SELECT XID FROM V$LOGMNR_CONTENTS WHERE SCN = ?\",\n-                s -> s.setLong(1, scn.longValue()),\n-                rs -> {\n-                    if (rs.next()) {\n-                        transactionId.set(HexConverter.convertToHexString(rs.getBytes(\"XID\")));\n-                    }\n-                });\n+        for (int attempt = 1; attempt <= 5; ++attempt) {\n+            connection.call(\"SELECT XID FROM V$LOGMNR_CONTENTS WHERE SCN = ?\",\n+                    s -> s.setLong(1, scn.longValue()),\n+                    rs -> {\n+                        if (rs.next()) {\n+                            transactionId.set(HexConverter.convertToHexString(rs.getBytes(\"XID\")));\n+                        }\n+                    });\n+            if (!Strings.isNullOrEmpty(transactionId.get())) {\n+                break;\n+            }\n+            LOGGER.debug(\"\\tFailed to find transaction for SCN {}, trying again.\", scn);\n+            Metronome.sleeper(Duration.ofSeconds(1), Clock.SYSTEM).pause();\n+        }\n         return Optional.ofNullable(transactionId.get());\n     }\n \n-    private Scn getTransactionStartScn(String transactionId, Scn currentScn, OracleConnection connection) throws SQLException {\n+    private Scn getTransactionStartScn(String transactionId, Scn currentScn, OracleConnection connection) throws SQLException, InterruptedException {\n         LOGGER.debug(\"\\tGet start SCN for transaction '{}'\", transactionId);\n         // We perform this operation a maximum of 5 times before we fail.\n         final AtomicReference<Scn> startScn = new AtomicReference<>(Scn.NULL);\n@@ -348,6 +359,7 @@ private Scn getTransactionStartScn(String transactionId, Scn currentScn, OracleC\n             if (!startScn.get().isNull()) {\n                 break;\n             }\n+            Metronome.sleeper(Duration.ofSeconds(1), Clock.SYSTEM).pause();\n         }\n         return startScn.get();\n     }",
      "parent_sha": "565ccdd6a4f4a0d578450393d15df67874448c71"
    }
  },
  {
    "oid": "e984754c2a347f2a5e26d093b15f8b3e5b88a22e",
    "message": "DBZ-4932 Use LCR v1 format with Oracle 12.0 and 12.1",
    "date": "2022-04-11T05:09:39Z",
    "url": "https://github.com/debezium/debezium/commit/e984754c2a347f2a5e26d093b15f8b3e5b88a22e",
    "details": {
      "sha": "5397c75564daf589a0d2448231f634ae001c79c7",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/xstream/XstreamStreamingChangeEventSource.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/e984754c2a347f2a5e26d093b15f8b3e5b88a22e/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Fxstream%2FXstreamStreamingChangeEventSource.java",
      "raw_url": "https://github.com/debezium/debezium/raw/e984754c2a347f2a5e26d093b15f8b3e5b88a22e/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Fxstream%2FXstreamStreamingChangeEventSource.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Fxstream%2FXstreamStreamingChangeEventSource.java?ref=e984754c2a347f2a5e26d093b15f8b3e5b88a22e",
      "patch": "@@ -183,7 +183,7 @@ private static int resolvePosVersion(OracleConnection connection, OracleConnecto\n \n         // As fallback, resolve this based on the OracleDatabaseVersion\n         final OracleDatabaseVersion databaseVersion = connection.getOracleVersion();\n-        if (databaseVersion.getMajor() == 11) {\n+        if (databaseVersion.getMajor() == 11 || (databaseVersion.getMajor() == 12 && databaseVersion.getMaintenance() < 2)) {\n             return XStreamUtility.POS_VERSION_V1;\n         }\n         return XStreamUtility.POS_VERSION_V2;",
      "parent_sha": "a793d9e2ca367b3e584528e74accc6688c805baa"
    }
  },
  {
    "oid": "b7819600199cd686fae0fa630674b1d869677c88",
    "message": "DBZ-6179 Fix swallowing of exception cause of finally block in RelationalSnapshotChangeEventSource",
    "date": "2023-03-06T09:28:57Z",
    "url": "https://github.com/debezium/debezium/commit/b7819600199cd686fae0fa630674b1d869677c88",
    "details": {
      "sha": "3e3f2b61ebd27e93d3222201ba5e24bd4a5211c4",
      "filename": "debezium-core/src/main/java/io/debezium/relational/RelationalSnapshotChangeEventSource.java",
      "status": "modified",
      "additions": 20,
      "deletions": 5,
      "changes": 25,
      "blob_url": "https://github.com/debezium/debezium/blob/b7819600199cd686fae0fa630674b1d869677c88/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalSnapshotChangeEventSource.java",
      "raw_url": "https://github.com/debezium/debezium/raw/b7819600199cd686fae0fa630674b1d869677c88/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalSnapshotChangeEventSource.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalSnapshotChangeEventSource.java?ref=b7819600199cd686fae0fa630674b1d869677c88",
      "patch": "@@ -103,6 +103,7 @@ public SnapshotResult<O> doExecute(ChangeEventSourceContext context, O previousO\n         final RelationalSnapshotContext<P, O> ctx = (RelationalSnapshotContext<P, O>) snapshotContext;\n \n         Connection connection = null;\n+        Exception exceptionWhileSnapshot = null;\n         Queue<JdbcConnection> connectionPool = null;\n         try {\n             LOGGER.info(\"Snapshot step 1 - Preparing\");\n@@ -165,15 +166,29 @@ public SnapshotResult<O> doExecute(ChangeEventSourceContext context, O previousO\n             dispatcher.alwaysDispatchHeartbeatEvent(ctx.partition, ctx.offset);\n             return SnapshotResult.completed(ctx.offset);\n         }\n+        catch (final Exception e) {\n+            LOGGER.error(\"Error during snapshot\", e);\n+            exceptionWhileSnapshot = e;\n+            throw e;\n+        }\n         finally {\n-            if (connectionPool != null) {\n-                for (JdbcConnection conn : connectionPool) {\n-                    if (!jdbcConnection.equals(conn)) {\n-                        conn.close();\n+            try {\n+                if (connectionPool != null) {\n+                    for (JdbcConnection conn : connectionPool) {\n+                        if (!jdbcConnection.equals(conn)) {\n+                            conn.close();\n+                        }\n                     }\n                 }\n+                rollbackTransaction(connection);\n+            }\n+            catch (final Exception e) {\n+                LOGGER.error(\"Error in finally block\", e);\n+                if (exceptionWhileSnapshot != null) {\n+                    e.addSuppressed(exceptionWhileSnapshot);\n+                }\n+                throw e;\n             }\n-            rollbackTransaction(connection);\n         }\n     }\n ",
      "parent_sha": "6ad3df4d1975b11c96aa1c150a66138a38b44bff"
    }
  },
  {
    "oid": "ab8359b9cc043e94f014e1c1cfa36d496b77a5cc",
    "message": "DBZ-1726 Implemented getting transaction-id metadata",
    "date": "2020-03-11T09:15:00Z",
    "url": "https://github.com/debezium/debezium/commit/ab8359b9cc043e94f014e1c1cfa36d496b77a5cc",
    "details": {
      "sha": "16cfcfae23c6b0ee92916da629ad05bff48c42df",
      "filename": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/MongoDbEventMetadataProvider.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/debezium/debezium/blob/ab8359b9cc043e94f014e1c1cfa36d496b77a5cc/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FMongoDbEventMetadataProvider.java",
      "raw_url": "https://github.com/debezium/debezium/raw/ab8359b9cc043e94f014e1c1cfa36d496b77a5cc/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FMongoDbEventMetadataProvider.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FMongoDbEventMetadataProvider.java?ref=ab8359b9cc043e94f014e1c1cfa36d496b77a5cc",
      "patch": "@@ -52,7 +52,17 @@ public Map<String, String> getEventSourcePosition(DataCollectionId source, Offse\n \n     @Override\n     public String getTransactionId(DataCollectionId source, OffsetContext offset, Object key, Struct value) {\n-        // todo: DBZ-1726 for now this returns null; is there an implementation alternative?\n-        return null;\n+        if (value == null) {\n+            return null;\n+        }\n+        final Struct sourceInfo = value.getStruct(Envelope.FieldName.SOURCE);\n+        if (source == null) {\n+            return null;\n+        }\n+        final Long txOrder = sourceInfo.getInt64(SourceInfo.TX_ORD);\n+        if (txOrder == null) {\n+            return null;\n+        }\n+        return Long.toString(txOrder);\n     }\n }",
      "parent_sha": "3a4788cc333e397c573e5228e573ed6e98670faa"
    }
  },
  {
    "oid": "4e544debdc5f74f14bea0bcc4669b28434a91c4c",
    "message": "DBZ-6201: Fix validation message that reports null as value",
    "date": "2023-03-22T13:02:44Z",
    "url": "https://github.com/debezium/debezium/commit/4e544debdc5f74f14bea0bcc4669b28434a91c4c",
    "details": {
      "sha": "c9203a9c327f37bb40972c29e0fc08afff67b9a3",
      "filename": "debezium-core/src/main/java/io/debezium/transforms/SmtManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/4e544debdc5f74f14bea0bcc4669b28434a91c4c/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FSmtManager.java",
      "raw_url": "https://github.com/debezium/debezium/raw/4e544debdc5f74f14bea0bcc4669b28434a91c4c/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FSmtManager.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftransforms%2FSmtManager.java?ref=4e544debdc5f74f14bea0bcc4669b28434a91c4c",
      "patch": "@@ -66,7 +66,7 @@ public void validate(Configuration configuration, Field.Set fields) {\n         for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n             if (!entry.getValue().errorMessages().isEmpty()) {\n                 final ConfigValue value = entry.getValue();\n-                throw new ConfigException(value.name(), value.value(), value.errorMessages().get(0));\n+                throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n             }\n         }\n     }",
      "parent_sha": "df8eb9780ba840777a4e6a844e870f060ef797bc"
    }
  },
  {
    "oid": "4e74e0a4aca53301ee667adcbeba1d3e8ea48c6f",
    "message": "Revert default Postgres decoder plugin for testing",
    "date": "2018-02-20T09:29:06Z",
    "url": "https://github.com/debezium/debezium/commit/4e74e0a4aca53301ee667adcbeba1d3e8ea48c6f",
    "details": {
      "sha": "3205a02fb42c7f2f9e99284f18eded72698f8cb3",
      "filename": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/TestHelper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/4e74e0a4aca53301ee667adcbeba1d3e8ea48c6f/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FTestHelper.java",
      "raw_url": "https://github.com/debezium/debezium/raw/4e74e0a4aca53301ee667adcbeba1d3e8ea48c6f/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FTestHelper.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FTestHelper.java?ref=4e74e0a4aca53301ee667adcbeba1d3e8ea48c6f",
      "patch": "@@ -60,7 +60,7 @@ public static ReplicationConnection createForReplication(String slotName, boolea\n      */\n     static PostgresConnectorConfig.LogicalDecoder decoderPlugin() {\n         final String s = System.getProperty(PostgresConnectorConfig.PLUGIN_NAME.name());\n-        return (s == null || s.length() == 0) ? PostgresConnectorConfig.LogicalDecoder.WAL2JSON : PostgresConnectorConfig.LogicalDecoder.parse(s);\n+        return (s == null || s.length() == 0) ? PostgresConnectorConfig.LogicalDecoder.DECODERBUFS : PostgresConnectorConfig.LogicalDecoder.parse(s);\n     }\n \n     /**",
      "parent_sha": "ad181493da62d77566a410326dbef2a82006b4af"
    }
  },
  {
    "oid": "93fc39d92c7a520cc3da25f7dc37384272afca5b",
    "message": "DBZ-1414 Lock only monitored tables",
    "date": "2019-08-06T08:59:41Z",
    "url": "https://github.com/debezium/debezium/commit/93fc39d92c7a520cc3da25f7dc37384272afca5b",
    "details": {
      "sha": "42d0b22015764fc2b19c9407adf0e4ff1f577d0f",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SnapshotReader.java",
      "status": "modified",
      "additions": 21,
      "deletions": 21,
      "changes": 42,
      "blob_url": "https://github.com/debezium/debezium/blob/93fc39d92c7a520cc3da25f7dc37384272afca5b/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java",
      "raw_url": "https://github.com/debezium/debezium/raw/93fc39d92c7a520cc3da25f7dc37384272afca5b/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FSnapshotReader.java?ref=93fc39d92c7a520cc3da25f7dc37384272afca5b",
      "patch": "@@ -335,8 +335,8 @@ protected void execute() {\n                     return;\n                 }\n                 logger.info(\"Step {}: read list of available tables in each database\", step++);\n-                List<TableId> tableIds = new ArrayList<>();\n-                //List<TableId> allTableIds = new ArrayList<>();\n+                List<TableId> knownTableIds = new ArrayList<>();\n+                final List<TableId> monitoredTableIds = new ArrayList<>();\n                 final Filters createTableFilters = getCreateTableFilters(filters);\n                 final Map<String, List<TableId>> createTablesMap = new HashMap<>();\n                 final Set<String> readableDatabaseNames = new HashSet<>();\n@@ -354,10 +354,16 @@ protected void execute() {\n                                     createTablesMap.computeIfAbsent(dbName, k -> new ArrayList<>()).add(id);\n                                 }\n                                 if (shouldRecordTableSchema) {\n-                                    tableIds.add(id);\n+                                    knownTableIds.add(id);\n+                                    logger.info(\"\\t including '{}' among known tables\", id);\n+                                } else {\n+                                    logger.info(\"\\t '{}' is not added among known tables\", id);\n+                                }\n+                                if (filters.tableFilter().test(id)) {\n+                                    monitoredTableIds.add(id);\n                                     logger.info(\"\\t including '{}' for further processing\", id);\n                                 } else {\n-                                    logger.info(\"\\t '{}' is filtered out, discarding\", id);\n+                                    logger.info(\"\\t '{}' is filtered out of monitoring\", id);\n                                 }\n                             }\n                         });\n@@ -373,15 +379,15 @@ protected void execute() {\n                 List<Pattern> tableWhitelistPattern = Strings.listOfRegex(context.config().getString(MySqlConnectorConfig.TABLE_WHITELIST), Pattern.CASE_INSENSITIVE);\n                 List<TableId> tableIdsSorted = new ArrayList<>();\n                 tableWhitelistPattern.forEach(pattern -> {\n-                    List<TableId> tablesMatchedByPattern = tableIds.stream().filter(t -> pattern.asPredicate().test(t.toString()))\n+                    List<TableId> tablesMatchedByPattern = monitoredTableIds.stream().filter(t -> pattern.asPredicate().test(t.toString()))\n                             .collect(Collectors.toList());\n                                         tablesMatchedByPattern.forEach(t -> {\n                                                 if (!tableIdsSorted.contains(t)) {\n                                                     tableIdsSorted.add(t);\n                                                 }\n                                         });\n                 });\n-                tableIds.sort(Comparator.comparing(tableIdsSorted::indexOf));\n+                monitoredTableIds.sort(Comparator.comparing(tableIdsSorted::indexOf));\n                 final Set<String> includedDatabaseNames = readableDatabaseNames.stream().filter(filters.databaseFilter()).collect(Collectors.toSet());\n                 logger.info(\"\\tsnapshot continuing with database(s): {}\", includedDatabaseNames);\n \n@@ -399,8 +405,8 @@ protected void execute() {\n                                 + \"consistent snapshot by preventing concurrent writes to tables.\");\n                         }\n                         // We have the required privileges, so try to lock all of the tables we're interested in ...\n-                        logger.info(\"Step {}: flush and obtain read lock for {} tables (preventing writes)\", step++, tableIds.size());\n-                        String tableList = tableIds.stream()\n+                        logger.info(\"Step {}: flush and obtain read lock for {} tables (preventing writes)\", step++, knownTableIds.size());\n+                        String tableList = monitoredTableIds.stream()\n                             .map(tid -> quote(tid))\n                             .reduce((r, element) -> r + \",\" + element)\n                             .orElse(null);\n@@ -432,9 +438,7 @@ protected void execute() {\n                     schema.applyDdl(source, null, setSystemVariablesStatement, this::enqueueSchemaChanges);\n \n                     // Add DROP TABLE statements for all tables that we knew about AND those tables found in the databases ...\n-                    List<TableId> allTableIds = new ArrayList<>(schema.tableIds());\n-                    allTableIds.addAll(tableIds);\n-                    allTableIds.stream()\n+                    knownTableIds.stream()\n                                .filter(id -> isRunning()) // ignore all subsequent tables if this reader is stopped\n                                .forEach(tableId -> schema.applyDdl(source, tableId.schema(),\n                                                                    \"DROP TABLE IF EXISTS \" + quote(tableId),\n@@ -518,21 +522,17 @@ protected void execute() {\n                     BufferedBlockingConsumer<SourceRecord> bufferedRecordQueue = BufferedBlockingConsumer.bufferLast(super::enqueueRecord);\n \n                     // Dump all of the tables and generate source records ...\n-                    logger.info(\"Step {}: scanning contents of {} tables while still in transaction\", step, tableIds.size());\n-                    metrics.monitoredTablesDetermined(tableIds);\n+                    logger.info(\"Step {}: scanning contents of {} tables while still in transaction\", step, monitoredTableIds.size());\n+                    metrics.monitoredTablesDetermined(monitoredTableIds);\n \n                     long startScan = clock.currentTimeInMillis();\n                     AtomicLong totalRowCount = new AtomicLong();\n                     int counter = 0;\n                     int completedCounter = 0;\n                     long largeTableCount = context.rowCountForLargeTable();\n-                    Iterator<TableId> tableIdIter = tableIds.iterator();\n+                    Iterator<TableId> tableIdIter = monitoredTableIds.iterator();\n                     while (tableIdIter.hasNext()) {\n                         TableId tableId = tableIdIter.next();\n-                        if (!filters.tableFilter().test(tableId)) {\n-                            // Table schema was recorded but the table is filtered out so will not be snapshotted\n-                            continue;\n-                        }\n                         AtomicLong rowNum = new AtomicLong();\n                         if (!isRunning()) {\n                             break;\n@@ -572,7 +572,7 @@ protected void execute() {\n \n                             // Scan the rows in the table ...\n                             long start = clock.currentTimeInMillis();\n-                            logger.info(\"Step {}: - scanning table '{}' ({} of {} tables)\", step, tableId, ++counter, tableIds.size());\n+                            logger.info(\"Step {}: - scanning table '{}' ({} of {} tables)\", step, tableId, ++counter, monitoredTableIds.size());\n \n                             Map<TableId, String> selectOverrides = context.getConnectorConfig().getSnapshotSelectOverridesByTable();\n \n@@ -651,14 +651,14 @@ protected void execute() {\n                         bufferedRecordQueue.close(this::replaceOffsetAndSource);\n                         if (logger.isInfoEnabled()) {\n                             logger.info(\"Step {}: scanned {} rows in {} tables in {}\",\n-                                        step, totalRowCount, tableIds.size(), Strings.duration(stop - startScan));\n+                                        step, totalRowCount, monitoredTableIds.size(), Strings.duration(stop - startScan));\n                         }\n                     } catch (InterruptedException e) {\n                         Thread.interrupted();\n                         // We were not able to finish all rows in all tables ...\n                         if (logger.isInfoEnabled()) {\n                             logger.info(\"Step {}: aborting the snapshot after {} rows in {} of {} tables {}\",\n-                                        step, totalRowCount, completedCounter, tableIds.size(), Strings.duration(stop - startScan));\n+                                        step, totalRowCount, completedCounter, monitoredTableIds.size(), Strings.duration(stop - startScan));\n                         }\n                         interrupted.set(true);\n                     }",
      "parent_sha": "88635f9d932b7115121c93145aaa4fb93997e88d"
    }
  },
  {
    "oid": "8907d88f490aa4419eb141dfc4a6c8a6b30197a1",
    "message": "DBZ-7002 Remove the need for OCP cluster in non-OCP system tests",
    "date": "2024-02-13T07:49:16Z",
    "url": "https://github.com/debezium/debezium/commit/8907d88f490aa4419eb141dfc4a6c8a6b30197a1",
    "details": {
      "sha": "a6e0be41e08205a7855f6fffab9b71ab61100639",
      "filename": "debezium-testing/debezium-testing-system/src/test/java/io/debezium/testing/system/listeners/NamespacePreparationListener.java",
      "status": "modified",
      "additions": 48,
      "deletions": 43,
      "changes": 91,
      "blob_url": "https://github.com/debezium/debezium/blob/8907d88f490aa4419eb141dfc4a6c8a6b30197a1/debezium-testing%2Fdebezium-testing-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fsystem%2Flisteners%2FNamespacePreparationListener.java",
      "raw_url": "https://github.com/debezium/debezium/raw/8907d88f490aa4419eb141dfc4a6c8a6b30197a1/debezium-testing%2Fdebezium-testing-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fsystem%2Flisteners%2FNamespacePreparationListener.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-testing%2Fdebezium-testing-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fsystem%2Flisteners%2FNamespacePreparationListener.java?ref=8907d88f490aa4419eb141dfc4a6c8a6b30197a1",
      "patch": "@@ -35,8 +35,8 @@ public class NamespacePreparationListener implements TestExecutionListener {\n     private List<String> projectNames;\n \n     public void testPlanExecutionStarted(TestPlan testPlan) {\n-        // execute only before integration tests\n-        if (ConfigProperties.OCP_PROJECT_DBZ != null) {\n+        // execute only before OCP system tests\n+        if (ConfigProperties.OCP_PROJECT_DBZ != null && OpenShiftUtils.isRunningFromOcp()) {\n             projectNames = List.of(ConfigProperties.OCP_PROJECT_DBZ,\n                     ConfigProperties.OCP_PROJECT_ORACLE,\n                     ConfigProperties.OCP_PROJECT_MONGO,\n@@ -48,52 +48,24 @@ public void testPlanExecutionStarted(TestPlan testPlan) {\n             client = OpenShiftUtils.createOcpClient();\n \n             validateSystemParameters();\n-            prepareNamespaces();\n+            if (ConfigProperties.PREPARE_NAMESPACES_AND_STRIMZI) {\n+                prepareNamespaces();\n+            }\n         }\n     }\n \n     public void testPlanExecutionFinished(TestPlan testPlan) {\n-        // execute only after integration tests\n-        if (ConfigProperties.OCP_PROJECT_DBZ != null && ConfigProperties.PREPARE_NAMESPACES_AND_STRIMZI) {\n-            LOGGER.info(\"Cleaning namespaces\");\n-\n-            // delete projects if project names are set\n-            projectNames.forEach(name -> {\n-                Project project = client.projects().withName(name).get();\n-                if (project != null) {\n-                    client.projects().delete(project);\n-                }\n-            });\n-\n+        // execute only after OCP system tests\n+        if (ConfigProperties.OCP_PROJECT_DBZ != null && ConfigProperties.PREPARE_NAMESPACES_AND_STRIMZI && OpenShiftUtils.isRunningFromOcp()) {\n+            deleteNamespaces();\n             client.close();\n         }\n     }\n \n     private void prepareNamespaces() {\n-        if (!ConfigProperties.PREPARE_NAMESPACES_AND_STRIMZI) {\n-            return;\n-        }\n-\n         LOGGER.info(\"Preparing namespaces\");\n-        ClusterRoleBindingBuilder anyUidBindingBuilder = new ClusterRoleBindingBuilder()\n-                .withApiVersion(\"authorization.openshift.io/v1\")\n-                .withKind(\"ClusterRoleBinding\")\n-                .withMetadata(new ObjectMetaBuilder()\n-                        .withName(\"system:openshift:scc:anyuid\")\n-                        .build())\n-                .withRoleRef(new ObjectReferenceBuilder()\n-                        .withName(\"system:openshift:scc:anyuid\")\n-                        .build());\n-\n-        ClusterRoleBindingBuilder privilegedBindingBuilder = new ClusterRoleBindingBuilder()\n-                .withApiVersion(\"authorization.openshift.io/v1\")\n-                .withKind(\"ClusterRoleBinding\")\n-                .withMetadata(new ObjectMetaBuilder()\n-                        .withName(\"system:openshift:scc:privileged\")\n-                        .build())\n-                .withRoleRef(new ObjectReferenceBuilder()\n-                        .withName(\"system:openshift:scc:privileged\")\n-                        .build());\n+        ClusterRoleBindingBuilder anyUidBindingBuilder = prepareAnyUidBindingBuilder();\n+        ClusterRoleBindingBuilder privilegedBindingBuilder = preparePrivilegedBindingBuilder();\n \n         for (String project : projectNames) {\n             processNamespace(project, anyUidBindingBuilder, privilegedBindingBuilder);\n@@ -137,14 +109,47 @@ private void addServiceAccountToClusterRoleBinding(String saNamespace, ClusterRo\n      * Check for invalid states of test parameters related to namespace preparation\n      */\n     private void validateSystemParameters() {\n-        if (!ConfigProperties.PREPARE_NAMESPACES_AND_STRIMZI && !namespacesExist()) {\n+        LOGGER.trace(\"Validating OCP namespace environment\");\n+        assertThat(projectNames).isNotEmpty();\n+        assertThat(client).isNotNull();\n+        boolean namespacesExist = client.projects().withName(projectNames.get(0)).get() != null;\n+        if (!ConfigProperties.PREPARE_NAMESPACES_AND_STRIMZI && !namespacesExist) {\n             throw new IllegalArgumentException(\"Should not prepare strimzi/namespace but namespace is missing\");\n         }\n     }\n \n-    private boolean namespacesExist() {\n-        assertThat(projectNames).isNotEmpty();\n-        assertThat(client).isNotNull();\n-        return client.projects().withName(projectNames.get(0)).get() != null;\n+    private ClusterRoleBindingBuilder prepareAnyUidBindingBuilder() {\n+        return new ClusterRoleBindingBuilder()\n+                .withApiVersion(\"authorization.openshift.io/v1\")\n+                .withKind(\"ClusterRoleBinding\")\n+                .withMetadata(new ObjectMetaBuilder()\n+                        .withName(\"system:openshift:scc:anyuid\")\n+                        .build())\n+                .withRoleRef(new ObjectReferenceBuilder()\n+                        .withName(\"system:openshift:scc:anyuid\")\n+                        .build());\n+    }\n+\n+    private ClusterRoleBindingBuilder preparePrivilegedBindingBuilder() {\n+        return new ClusterRoleBindingBuilder()\n+                .withApiVersion(\"authorization.openshift.io/v1\")\n+                .withKind(\"ClusterRoleBinding\")\n+                .withMetadata(new ObjectMetaBuilder()\n+                        .withName(\"system:openshift:scc:privileged\")\n+                        .build())\n+                .withRoleRef(new ObjectReferenceBuilder()\n+                        .withName(\"system:openshift:scc:privileged\")\n+                        .build());\n+    }\n+\n+    private void deleteNamespaces() {\n+        LOGGER.info(\"Cleaning namespaces\");\n+        // delete projects if project names are set\n+        projectNames.forEach(name -> {\n+            Project project = client.projects().withName(name).get();\n+            if (project != null) {\n+                client.projects().delete(project);\n+            }\n+        });\n     }\n }",
      "parent_sha": "cb5a4d7a1a015264fe7da452584322ecd607e9bb"
    }
  },
  {
    "oid": "4d9cd1c267bfd5556b1a952010545acfd7b1a09a",
    "message": "DBZ-1064 Use convert value template",
    "date": "2019-01-17T12:53:17Z",
    "url": "https://github.com/debezium/debezium/commit/4d9cd1c267bfd5556b1a952010545acfd7b1a09a",
    "details": {
      "sha": "6e1b5371b8c62a9ae7a4ce2c6ebe9b5bc883a471",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/OracleValueConverters.java",
      "status": "modified",
      "additions": 55,
      "deletions": 75,
      "changes": 130,
      "blob_url": "https://github.com/debezium/debezium/blob/4d9cd1c267bfd5556b1a952010545acfd7b1a09a/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleValueConverters.java",
      "raw_url": "https://github.com/debezium/debezium/raw/4d9cd1c267bfd5556b1a952010545acfd7b1a09a/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleValueConverters.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleValueConverters.java?ref=4d9cd1c267bfd5556b1a952010545acfd7b1a09a",
      "patch": "@@ -311,33 +311,25 @@ protected Object convertNumericAsBigInteger(Column column, Field fieldDefn, Obje\n \n     @Override\n     protected Object convertTinyInt(Column column, Field fieldDefn, Object data) {\n-        if (data == null && !fieldDefn.schema().isOptional()) {\n-            data = fieldDefn.schema().defaultValue();\n-        }\n-        if (data == null) {\n-            if (column.isOptional()) {\n-                return null;\n+        return convertValue(column, fieldDefn, data, BYTE_FALSE, (r) -> {\n+            if (data instanceof Byte) {\n+                r.deliver(data);\n             }\n-            else {\n-                return BYTE_FALSE;\n+            else if (data instanceof Number) {\n+                Number value = (Number) data;\n+                r.deliver(value.byteValue());\n             }\n-        }\n-        if (data instanceof Byte) return data;\n-        if (data instanceof Number) {\n-            Number value = (Number) data;\n-            return value.byteValue();\n-        }\n-        if (data instanceof Boolean) {\n-            return NumberConversions.getByte((boolean) data);\n-        }\n-        if (data instanceof String) {\n-            return Byte.parseByte((String) data);\n-        }\n-        return handleUnknownData(column, fieldDefn, data);\n+            else if (data instanceof Boolean) {\n+                r.deliver(NumberConversions.getByte((boolean) data));\n+            }\n+            else if (data instanceof String) {\n+                r.deliver(Byte.parseByte((String) data));\n+            }\n+        });\n     }\n \n     protected Object convertVariableScale(Column column, Field fieldDefn, Object data) {\n-        data = convertNumeric(column, fieldDefn, data);\n+        data = convertNumeric(column, fieldDefn, data); // provides default value\n \n         if (data == null) {\n             return null;\n@@ -398,65 +390,53 @@ protected Object convertTimestampWithZone(Column column, Field fieldDefn, Object\n     }\n \n     protected Object convertIntervalYearMonth(Column column, Field fieldDefn, Object data) {\n-        if (data == null && !fieldDefn.schema().isOptional()) {\n-            data = fieldDefn.schema().defaultValue();\n-        }\n-        if (data == null) {\n-            if (column.isOptional()) return null;\n-            return NumberConversions.DOUBLE_FALSE;\n-        }\n-        if (data instanceof Number) {\n-            // we expect to get back from the plugin a double value\n-            return ((Number) data).doubleValue();\n-        }\n-        if (data instanceof INTERVALYM) {\n-            final String interval = ((INTERVALYM) data).stringValue();\n-            int sign = 1;\n-            int start = 0;\n-            if (interval.charAt(0) == '-') {\n-                sign = -1;\n-                start = 1;\n+        return convertValue(column, fieldDefn, data, NumberConversions.DOUBLE_FALSE, (r) -> {\n+            if (data instanceof Number) {\n+                // we expect to get back from the plugin a double value\n+                r.deliver(((Number) data).doubleValue());\n             }\n-            for (int i = 1; i < interval.length(); i++) {\n-                if (interval.charAt(i) == '-') {\n-                    final int year = sign * Integer.parseInt(interval.substring(start, i));\n-                    final int month = sign * Integer.parseInt(interval.substring(i + 1, interval.length()));\n-                    return MicroDuration.durationMicros(year, month, 0, 0,\n-                            0, 0, MicroDuration.DAYS_PER_MONTH_AVG);\n+            else if (data instanceof INTERVALYM) {\n+                final String interval = ((INTERVALYM) data).stringValue();\n+                int sign = 1;\n+                int start = 0;\n+                if (interval.charAt(0) == '-') {\n+                    sign = -1;\n+                    start = 1;\n+                }\n+                for (int i = 1; i < interval.length(); i++) {\n+                    if (interval.charAt(i) == '-') {\n+                        final int year = sign * Integer.parseInt(interval.substring(start, i));\n+                        final int month = sign * Integer.parseInt(interval.substring(i + 1, interval.length()));\n+                        r.deliver(MicroDuration.durationMicros(year, month, 0, 0,\n+                                0, 0, MicroDuration.DAYS_PER_MONTH_AVG));\n+                    }\n                 }\n             }\n-        }\n-        return handleUnknownData(column, fieldDefn, data);\n+        });\n     }\n \n     protected Object convertIntervalDaySecond(Column column, Field fieldDefn, Object data) {\n-        if (data == null && !fieldDefn.schema().isOptional()) {\n-            data = fieldDefn.schema().defaultValue();\n-        }\n-        if (data == null) {\n-            if (column.isOptional()) return null;\n-            return NumberConversions.DOUBLE_FALSE;\n-        }\n-        if (data instanceof Number) {\n-            // we expect to get back from the plugin a double value\n-            return ((Number) data).doubleValue();\n-        }\n-        if (data instanceof INTERVALDS) {\n-            final String interval = ((INTERVALDS) data).stringValue();\n-            final Matcher m = INTERVAL_DAY_SECOND_PATTERN.matcher(interval);\n-            if (m.matches()) {\n-                final int sign = \"-\".equals(m.group(1)) ? -1 : 1;\n-                return MicroDuration.durationMicros(\n-                        0,\n-                        0,\n-                        sign * Integer.valueOf(m.group(2)),\n-                        sign * Integer.valueOf(m.group(3)),\n-                        sign * Integer.valueOf(m.group(4)),\n-                        sign * Integer.valueOf(m.group(5)),\n-                        sign * Integer.valueOf(Strings.pad(m.group(6), 6, '0')),\n-                        MicroDuration.DAYS_PER_MONTH_AVG);\n+        return convertValue(column, fieldDefn, data, NumberConversions.DOUBLE_FALSE, (r) -> {\n+            if (data instanceof Number) {\n+                // we expect to get back from the plugin a double value\n+                r.deliver(((Number) data).doubleValue());\n             }\n-        }\n-        return handleUnknownData(column, fieldDefn, data);\n+            else if (data instanceof INTERVALDS) {\n+                final String interval = ((INTERVALDS) data).stringValue();\n+                final Matcher m = INTERVAL_DAY_SECOND_PATTERN.matcher(interval);\n+                if (m.matches()) {\n+                    final int sign = \"-\".equals(m.group(1)) ? -1 : 1;\n+                    r.deliver(MicroDuration.durationMicros(\n+                            0,\n+                            0,\n+                            sign * Integer.valueOf(m.group(2)),\n+                            sign * Integer.valueOf(m.group(3)),\n+                            sign * Integer.valueOf(m.group(4)),\n+                            sign * Integer.valueOf(m.group(5)),\n+                            sign * Integer.valueOf(Strings.pad(m.group(6), 6, '0')),\n+                            MicroDuration.DAYS_PER_MONTH_AVG));\n+                }\n+            }\n+        });\n     }\n }",
      "parent_sha": "501cbfc98ea9ef3a1d543579ea1c2f3a1bf44bc5"
    }
  },
  {
    "oid": "35ed1c128b4f90a1a569c9a5d3217505ea61fd94",
    "message": "DBZ-2386 setting commitfailure should not be in finally",
    "date": "2025-01-15T08:53:39Z",
    "url": "https://github.com/debezium/debezium/commit/35ed1c128b4f90a1a569c9a5d3217505ea61fd94",
    "details": {
      "sha": "461c46a3cceb1eecdd8e113571b59dc0e58ba561",
      "filename": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresStreamingChangeEventSource.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/35ed1c128b4f90a1a569c9a5d3217505ea61fd94/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresStreamingChangeEventSource.java",
      "raw_url": "https://github.com/debezium/debezium/raw/35ed1c128b4f90a1a569c9a5d3217505ea61fd94/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresStreamingChangeEventSource.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresStreamingChangeEventSource.java?ref=35ed1c128b4f90a1a569c9a5d3217505ea61fd94",
      "patch": "@@ -454,11 +454,9 @@ public void commitOffset(Map<String, ?> partition, Map<String, ?> offset) {\n             }\n         }\n         catch (SQLException e) {\n-            throw new ConnectException(e);\n-        }\n-        finally {\n             commitOffsetFailure = true;\n             cleanUpStreamingOnStop(null);\n+            throw new ConnectException(e);\n         }\n     }\n ",
      "parent_sha": "ee50f137f2112937f306ebb758d25a0f09fdadec"
    }
  },
  {
    "oid": "858cfbcb7a162bafc9a1f2227d5a50aa68831057",
    "message": "DBZ-3145 Removed unused code & irrelevant todo",
    "date": "2021-03-12T07:00:06Z",
    "url": "https://github.com/debezium/debezium/commit/858cfbcb7a162bafc9a1f2227d5a50aa68831057",
    "details": {
      "sha": "762d81af59efd3c150b989f28d6253cddf758842",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/logminer/LogMinerHelper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 10,
      "changes": 11,
      "blob_url": "https://github.com/debezium/debezium/blob/858cfbcb7a162bafc9a1f2227d5a50aa68831057/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerHelper.java",
      "raw_url": "https://github.com/debezium/debezium/raw/858cfbcb7a162bafc9a1f2227d5a50aa68831057/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerHelper.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerHelper.java?ref=858cfbcb7a162bafc9a1f2227d5a50aa68831057",
      "patch": "@@ -542,18 +542,9 @@ static void logError(TransactionalBufferMetrics metrics, String format, Object..\n         metrics.incrementErrorCounter();\n     }\n \n-    /**\n-     * get size of online REDO groups\n-     * @param connection connection\n-     * @return size\n-     */\n-    private static int getRedoLogGroupSize(OracleConnection connection) throws SQLException {\n-        return connection.queryAndMap(\"SELECT COUNT(DISTINCT GROUP#) FROM V$LOG\", (rs) -> rs.getInt(1));\n-    }\n-\n     /**\n      * This method returns all online log files, starting from one which contains offset SCN and ending with one containing largest SCN\n-     * 18446744073709551615 on Ora 19c is the max value of the nextScn in the current redo todo replace all Long with BigInteger for SCN\n+     * 18446744073709551615 on Ora 19c is the max value of the nextScn in the current redo\n      */\n     public static Map<String, Scn> getOnlineLogFilesForOffsetScn(OracleConnection connection, Scn offsetScn) throws SQLException {\n         LOGGER.trace(\"Getting online redo logs for offset scn {}\", offsetScn);",
      "parent_sha": "8bf8a7d40a46a3f578e81f0dd9f9a5b94aa20187"
    }
  },
  {
    "oid": "2b62943e4f1f513e624e9214a2222e176a257fcd",
    "message": "DBZ-438 Avoiding issues due to concurrent usage of BufferedBlockingConsumer",
    "date": "2017-11-13T13:19:39Z",
    "url": "https://github.com/debezium/debezium/commit/2b62943e4f1f513e624e9214a2222e176a257fcd",
    "details": {
      "sha": "ff0164ab54e3adb6a70aab7e34df9824d97ae4f5",
      "filename": "debezium-core/src/main/java/io/debezium/function/BufferedBlockingConsumer.java",
      "status": "modified",
      "additions": 16,
      "deletions": 11,
      "changes": 27,
      "blob_url": "https://github.com/debezium/debezium/blob/2b62943e4f1f513e624e9214a2222e176a257fcd/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ffunction%2FBufferedBlockingConsumer.java",
      "raw_url": "https://github.com/debezium/debezium/raw/2b62943e4f1f513e624e9214a2222e176a257fcd/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ffunction%2FBufferedBlockingConsumer.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ffunction%2FBufferedBlockingConsumer.java?ref=2b62943e4f1f513e624e9214a2222e176a257fcd",
      "patch": "@@ -5,22 +5,23 @@\n  */\n package io.debezium.function;\n \n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Function;\n \n /**\n  * A {@link BlockingConsumer} that retains a maximum number of values in a buffer before sending them to\n  * a delegate consumer. Note that any buffered values may need to be {@link #flush() flushed} periodically.\n  * <p>\n  * This maintains the same order of the values.\n- * \n+ *\n  * @param <T> the type of the input to the operation\n  * @author Randall Hauch\n  */\n public interface BufferedBlockingConsumer<T> extends BlockingConsumer<T> {\n \n     /**\n      * Flush all of the buffered values to the delegate.\n-     * \n+     *\n      * @throws InterruptedException if the thread is interrupted while this consumer is blocked\n      */\n     public default void flush() throws InterruptedException {\n@@ -30,7 +31,7 @@ public default void flush() throws InterruptedException {\n     /**\n      * Flush all of the buffered values to the delegate by first running each buffered value through the given function\n      * to generate a new value to be flushed to the delegate consumer.\n-     * \n+     *\n      * @param function the function to apply to the values that are flushed\n      * @throws InterruptedException if the thread is interrupted while this consumer is blocked\n      */\n@@ -42,27 +43,31 @@ public default void flush() throws InterruptedException {\n      * and buffer the latest.\n      * <p>\n      * The resulting consumer is not threadsafe.\n-     * \n+     *\n      * @param delegate the delegate to which values should be flushed; may not be null\n      * @return the blocking consumer that buffers a single value at a time; never null\n      */\n     public static <T> BufferedBlockingConsumer<T> bufferLast(BlockingConsumer<T> delegate) {\n         return new BufferedBlockingConsumer<T>() {\n-            private T last;\n+\n+            private final AtomicReference<T> last = new AtomicReference<>();\n \n             @Override\n             public void accept(T t) throws InterruptedException {\n-                if (last != null) delegate.accept(last);\n-                last = t;\n+                T previous = last.getAndSet(t);\n+                if (previous != null) {\n+                    delegate.accept(previous);\n+                }\n             }\n \n             @Override\n-            public void flush(Function<T, T> function) throws InterruptedException {\n-                if (last != null) {\n+            public synchronized void flush(Function<T, T> function) throws InterruptedException {\n+                T previous = last.get();\n+                if (previous != null) {\n                     try {\n-                        delegate.accept(function.apply(last));\n+                        delegate.accept(function.apply(previous));\n                     } finally {\n-                        last = null;\n+                        last.set(null);\n                     }\n                 }\n             }",
      "parent_sha": "c905c7a558f1a1792a51b8bdc480901a1dd29402"
    }
  },
  {
    "oid": "0697ad7cd9112991a20535697c300857506799aa",
    "message": "DBZ-424 Can't support PostgreSQL 10",
    "date": "2017-11-03T14:05:23Z",
    "url": "https://github.com/debezium/debezium/commit/0697ad7cd9112991a20535697c300857506799aa",
    "details": {
      "sha": "64b64fdf1ce1ea0e994b83d42570275b778ae52a",
      "filename": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresConnection.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debezium/debezium/blob/0697ad7cd9112991a20535697c300857506799aa/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresConnection.java",
      "raw_url": "https://github.com/debezium/debezium/raw/0697ad7cd9112991a20535697c300857506799aa/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresConnection.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2Fconnection%2FPostgresConnection.java?ref=0697ad7cd9112991a20535697c300857506799aa",
      "patch": "@@ -190,7 +190,8 @@ public Long currentTransactionId() throws SQLException {\n      */\n     public long currentXLogLocation() throws SQLException {\n         AtomicLong result = new AtomicLong(0);\n-        query(\"select * from pg_current_xlog_location()\", rs -> {\n+        int majorVersion = connection().getMetaData().getDatabaseMajorVersion();\n+        query(majorVersion >= 10 ? \"select * from pg_current_wal_lsn()\" : \"select * from pg_current_xlog_location()\", rs -> {\n             if (!rs.next()) {\n                 throw new IllegalStateException(\"there should always be a valid xlog position\");\n             }",
      "parent_sha": "a61c0ea6239b6db7ab3479e971d6f38ede6d8ece"
    }
  },
  {
    "oid": "6f0d11cc646a4ff1a5c24c91602c76c920fe0ff7",
    "message": "DBZ-784 Changing var name",
    "date": "2018-09-18T07:55:43Z",
    "url": "https://github.com/debezium/debezium/commit/6f0d11cc646a4ff1a5c24c91602c76c920fe0ff7",
    "details": {
      "sha": "3e205bd9729a8947d3e2a856a00b9f71e4531766",
      "filename": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/ConnectionContext.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debezium/debezium/blob/6f0d11cc646a4ff1a5c24c91602c76c920fe0ff7/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FConnectionContext.java",
      "raw_url": "https://github.com/debezium/debezium/raw/6f0d11cc646a4ff1a5c24c91602c76c920fe0ff7/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FConnectionContext.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mongodb%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2FConnectionContext.java?ref=6f0d11cc646a4ff1a5c24c91602c76c920fe0ff7",
      "patch": "@@ -223,7 +223,7 @@ public static class MongoPrimary {\n         private final Supplier<MongoClient> primaryConnectionSupplier;\n         private final Filters filters;\n         private final BiConsumer<String, Throwable> errorHandler;\n-        private final AtomicBoolean stop = new AtomicBoolean();\n+        private final AtomicBoolean stopped = new AtomicBoolean();\n \n         protected MongoPrimary(ConnectionContext context, ReplicaSet replicaSet, Filters filters, BiConsumer<String, Throwable> errorHandler) {\n             this.replicaSet = replicaSet;\n@@ -399,14 +399,14 @@ public List<CollectionId> collections() {\n         }\n \n         private boolean isRunning() {\n-            return stop.get();\n+            return stopped.get();\n         }\n \n         /**\n          * Terminates the execution loop of the current primary\n          */\n         public void stop() {\n-            stop.set(true);\n+            stopped.set(true);\n         }\n     }\n ",
      "parent_sha": "a459c2cc4db017774952e3eb04730eafaf5a0468"
    }
  },
  {
    "oid": "4e0c54d7824dc1e42d84ed00169d7c9b6ef9f4af",
    "message": "DBZ-3671 Add test for user exclusion SQL condition",
    "date": "2021-07-05T10:26:59Z",
    "url": "https://github.com/debezium/debezium/commit/4e0c54d7824dc1e42d84ed00169d7c9b6ef9f4af",
    "details": {
      "sha": "1a1a8f2e0e1d5b4b280d88faa1c20ecdad8da144",
      "filename": "debezium-connector-oracle/src/test/java/io/debezium/connector/oracle/logminer/LogMinerQueryBuilderTest.java",
      "status": "modified",
      "additions": 31,
      "deletions": 20,
      "changes": 51,
      "blob_url": "https://github.com/debezium/debezium/blob/4e0c54d7824dc1e42d84ed00169d7c9b6ef9f4af/debezium-connector-oracle%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerQueryBuilderTest.java",
      "raw_url": "https://github.com/debezium/debezium/raw/4e0c54d7824dc1e42d84ed00169d7c9b6ef9f4af/debezium-connector-oracle%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerQueryBuilderTest.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerQueryBuilderTest.java?ref=4e0c54d7824dc1e42d84ed00169d7c9b6ef9f4af",
      "patch": "@@ -58,7 +58,8 @@ public class LogMinerQueryBuilderTest {\n             \"${systemTablePredicate}\" +\n             \"${schemaPredicate}\" +\n             \"${tablePredicate}\" +\n-            \"))\";\n+            \"))\" +\n+            \"${userNamePredicate}\";\n \n     /**\n      * A template that defines the expected SQL output when the configuration specifies\n@@ -77,7 +78,8 @@ public class LogMinerQueryBuilderTest {\n             \"${systemTablePredicate}\" +\n             \"${schemaPredicate}\" +\n             \"${tablePredicate}\" +\n-            \"))\";\n+            \"))\" +\n+            \"${userNamePredicate}\";\n \n     private static final String USERNAME = \"USERNAME\";\n \n@@ -88,55 +90,55 @@ public void testLogMinerQueryWithNoFilters() {\n         OracleConnectorConfig connectorConfig = new OracleConnectorConfig(config);\n \n         String result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, null, null));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, null, null, null));\n \n         config = TestHelper.defaultConfig().with(LOB_ENABLED, true).build();\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, null, null));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, null, null, null));\n \n         config = TestHelper.defaultConfig().with(STORE_ONLY_CAPTURED_TABLES_DDL, true).build();\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, null, null));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, null, null, null));\n \n         config = TestHelper.defaultConfig().with(STORE_ONLY_CAPTURED_TABLES_DDL, true).with(LOB_ENABLED, true).build();\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, null, null));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, null, null, null));\n     }\n \n     @Test\n     @FixFor(\"DBZ-3009\")\n     public void testLogMinerQueryWithSchemaInclude() {\n         String schema = \"AND (REGEXP_LIKE(SEG_OWNER,'^SCHEMA1$','i') OR REGEXP_LIKE(SEG_OWNER,'^SCHEMA2$','i')) \";\n-        assertQueryWithConfig(SCHEMA_INCLUDE_LIST, \"SCHEMA1,SCHEMA2\", schema, null);\n+        assertQueryWithConfig(SCHEMA_INCLUDE_LIST, \"SCHEMA1,SCHEMA2\", schema, null, null);\n     }\n \n     @Test\n     @FixFor(\"DBZ-3009\")\n     public void testLogMinerQueryWithSchemaExclude() {\n         String schema = \"AND (NOT REGEXP_LIKE(SEG_OWNER,'^SCHEMA1$','i') AND NOT REGEXP_LIKE(SEG_OWNER,'^SCHEMA2$','i')) \";\n-        assertQueryWithConfig(OracleConnectorConfig.SCHEMA_EXCLUDE_LIST, \"SCHEMA1,SCHEMA2\", schema, null);\n+        assertQueryWithConfig(OracleConnectorConfig.SCHEMA_EXCLUDE_LIST, \"SCHEMA1,SCHEMA2\", schema, null, null);\n     }\n \n     @Test\n     @FixFor(\"DBZ-3009\")\n     public void testLogMinerQueryWithTableInclude() {\n         String table = \"AND (REGEXP_LIKE(SEG_OWNER || '.' || TABLE_NAME,'^DEBEZIUM\\\\.TABLEA$','i') \" +\n                 \"OR REGEXP_LIKE(SEG_OWNER || '.' || TABLE_NAME,'^DEBEZIUM\\\\.TABLEB$','i')) \";\n-        assertQueryWithConfig(TABLE_INCLUDE_LIST, \"DEBEZIUM\\\\.TABLEA,DEBEZIUM\\\\.TABLEB\", null, table);\n+        assertQueryWithConfig(TABLE_INCLUDE_LIST, \"DEBEZIUM\\\\.TABLEA,DEBEZIUM\\\\.TABLEB\", null, table, null);\n     }\n \n     @Test\n     @FixFor(\"DBZ-3009\")\n     public void testLogMinerQueryWithTableExcludes() {\n         String table = \"AND (NOT REGEXP_LIKE(SEG_OWNER || '.' || TABLE_NAME,'^DEBEZIUM\\\\.TABLEA$','i') \" +\n                 \"AND NOT REGEXP_LIKE(SEG_OWNER || '.' || TABLE_NAME,'^DEBEZIUM\\\\.TABLEB$','i')) \";\n-        assertQueryWithConfig(TABLE_EXCLUDE_LIST, \"DEBEZIUM\\\\.TABLEA,DEBEZIUM\\\\.TABLEB\", null, table);\n+        assertQueryWithConfig(TABLE_EXCLUDE_LIST, \"DEBEZIUM\\\\.TABLEA,DEBEZIUM\\\\.TABLEB\", null, table, null);\n     }\n \n     @Test\n@@ -166,51 +168,58 @@ public void testLogMinerQueryWithSchemaExcludeTableInclude() {\n         assertQueryWithConfig(SCHEMA_EXCLUDE_LIST, \"SCHEMA1,SCHEMA2\", TABLE_INCLUDE_LIST, \"DEBEZIUM\\\\.TABLEA,DEBEZIUM\\\\.TABLEB\", schema, table);\n     }\n \n-    private void assertQueryWithConfig(Field field, Object fieldValue, String schemaValue, String tableValue) {\n+    @Test\n+    @FixFor(\"DBZ-3671\")\n+    public void testLogMinerExcludeUsersInQuery() {\n+        String users = \" AND USERNAME NOT IN ('user1','user2','user')\";\n+        assertQueryWithConfig(OracleConnectorConfig.LOG_MINING_USERNAME_EXCLUDE_LIST, \"user1,user2,user\", null, null, users);\n+    }\n+\n+    private void assertQueryWithConfig(Field field, Object fieldValue, String schemaValue, String tableValue, String userValue) {\n         Configuration config = TestHelper.defaultConfig().with(field, fieldValue).build();\n         OracleConnectorConfig connectorConfig = new OracleConnectorConfig(config);\n \n         String result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue, userValue));\n \n         config = TestHelper.defaultConfig().with(field, fieldValue).with(LOB_ENABLED, true).build();\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue, userValue));\n \n         config = TestHelper.defaultConfig().with(field, fieldValue).with(STORE_ONLY_CAPTURED_TABLES_DDL, true).build();\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue, userValue));\n \n         config = TestHelper.defaultConfig().with(field, fieldValue).with(STORE_ONLY_CAPTURED_TABLES_DDL, true).with(LOB_ENABLED, true).build();\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue, userValue));\n     }\n \n     private void assertQueryWithConfig(Field field1, Object fieldValue1, Field field2, Object fieldValue2, String schemaValue, String tableValue) {\n         Configuration config = TestHelper.defaultConfig().with(field1, fieldValue1).with(field2, fieldValue2).build();\n         OracleConnectorConfig connectorConfig = new OracleConnectorConfig(config);\n \n         String result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue, null));\n \n         config = TestHelper.defaultConfig().with(field1, fieldValue1).with(field2, fieldValue2).with(LOB_ENABLED, true).build();\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue, null));\n \n         config = TestHelper.defaultConfig().with(field1, fieldValue1).with(field2, fieldValue2)\n                 .with(STORE_ONLY_CAPTURED_TABLES_DDL, true).build();\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue, null));\n \n         config = TestHelper.defaultConfig().with(field1, fieldValue1).with(field2, fieldValue2)\n                 .with(STORE_ONLY_CAPTURED_TABLES_DDL, true)\n@@ -219,12 +228,13 @@ private void assertQueryWithConfig(Field field1, Object fieldValue1, Field field\n         connectorConfig = new OracleConnectorConfig(config);\n \n         result = LogMinerQueryBuilder.build(connectorConfig, USERNAME);\n-        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue));\n+        assertThat(result).isEqualTo(resolveLogMineryContentQueryFromTemplate(connectorConfig, schemaValue, tableValue, null));\n     }\n \n     private String resolveLogMineryContentQueryFromTemplate(OracleConnectorConfig config,\n                                                             String schemaReplacement,\n-                                                            String tableReplacement) {\n+                                                            String tableReplacement,\n+                                                            String userNameReplacement) {\n         String query = config.getDatabaseHistory().storeOnlyCapturedTables()\n                 ? LOG_MINER_CONTENT_QUERY_TEMPLATE2\n                 : LOG_MINER_CONTENT_QUERY_TEMPLATE1;\n@@ -249,6 +259,7 @@ private String resolveLogMineryContentQueryFromTemplate(OracleConnectorConfig co\n         query = query.replace(\"${operationCodes}\", config.isLobEnabled() ? OPERATION_CODES_LOB_ENABLED : OPERATION_CODES_LOB_DISABLED);\n         query = query.replace(\"${schemaPredicate}\", schemaReplacement == null ? \"\" : schemaReplacement);\n         query = query.replace(\"${tablePredicate}\", tableReplacement == null ? \"\" : tableReplacement);\n+        query = query.replace(\"${userNamePredicate}\", userNameReplacement == null ? \"\" : userNameReplacement.toString());\n         query = query.replace(\"${user}\", USERNAME);\n         return query;\n     }",
      "parent_sha": "ddf25b144cbe2c2f72ab5d59507b5a1e96ab6cd9"
    }
  },
  {
    "oid": "f9034f21085fc572541a91876bcd8c9057d2e31e",
    "message": "DBZ-7421 Encapsulate data collection queue and its json version into a dedicated class",
    "date": "2024-01-31T10:05:04Z",
    "url": "https://github.com/debezium/debezium/commit/f9034f21085fc572541a91876bcd8c9057d2e31e",
    "details": {
      "sha": "8f61c08ecc2b65a735cded3bfde917aced20dff9",
      "filename": "debezium-core/src/main/java/io/debezium/pipeline/source/snapshot/incremental/AbstractIncrementalSnapshotContext.java",
      "status": "modified",
      "additions": 119,
      "deletions": 77,
      "changes": 196,
      "blob_url": "https://github.com/debezium/debezium/blob/f9034f21085fc572541a91876bcd8c9057d2e31e/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fsnapshot%2Fincremental%2FAbstractIncrementalSnapshotContext.java",
      "raw_url": "https://github.com/debezium/debezium/raw/f9034f21085fc572541a91876bcd8c9057d2e31e/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fsnapshot%2Fincremental%2FAbstractIncrementalSnapshotContext.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fpipeline%2Fsource%2Fsnapshot%2Fincremental%2FAbstractIncrementalSnapshotContext.java?ref=f9034f21085fc572541a91876bcd8c9057d2e31e",
      "patch": "@@ -51,22 +51,14 @@ public class AbstractIncrementalSnapshotContext<T> implements IncrementalSnapsho\n \n     // TODO Consider which (if any) information should be exposed in source info\n     public static final String INCREMENTAL_SNAPSHOT_KEY = \"incremental_snapshot\";\n-    public static final String DATA_COLLECTIONS_TO_SNAPSHOT_KEY = INCREMENTAL_SNAPSHOT_KEY + \"_collections\";\n-\n-    public static final String DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ID = DATA_COLLECTIONS_TO_SNAPSHOT_KEY + \"_id\";\n-\n-    public static final String DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ADDITIONAL_CONDITION = DATA_COLLECTIONS_TO_SNAPSHOT_KEY\n-            + \"_additional_condition\";\n-\n-    public static final String DATA_COLLECTIONS_TO_SNAPSHOT_KEY_SURROGATE_KEY = DATA_COLLECTIONS_TO_SNAPSHOT_KEY\n-            + \"_surrogate_key\";\n \n     public static final String EVENT_PRIMARY_KEY = INCREMENTAL_SNAPSHOT_KEY + \"_primary_key\";\n     public static final String TABLE_MAXIMUM_KEY = INCREMENTAL_SNAPSHOT_KEY + \"_maximum_key\";\n     public static final String CORRELATION_ID = INCREMENTAL_SNAPSHOT_KEY + \"_correlation_id\";\n+    private final SnapshotDataCollection<T> snapshotDataCollection = new SnapshotDataCollection<>();\n \n     /**\n-     * @code(true) if window is opened and deduplication should be executed\n+     * {@code true} if window is opened and deduplication should be executed\n      */\n     protected boolean windowOpened = false;\n \n@@ -78,7 +70,6 @@ public class AbstractIncrementalSnapshotContext<T> implements IncrementalSnapsho\n     // TODO After extracting add into source info optional block\n     // incrementalSnapshotWindow{String from, String to}\n     // State to be stored and recovered from offsets\n-    private final Queue<DataCollection<T>> dataCollectionsToSnapshot = new LinkedList<>();\n \n     private final boolean useCatalogBeforeSchema;\n     /**\n@@ -104,11 +95,6 @@ public class AbstractIncrementalSnapshotContext<T> implements IncrementalSnapsho\n      * Determines if the incremental snapshot was paused or not.\n      */\n     private final AtomicBoolean paused = new AtomicBoolean(false);\n-    private final ObjectMapper mapper = new ObjectMapper();\n-    private String dataCollectionsToSnapshotJson;\n-\n-    private final TypeReference<List<LinkedHashMap<String, String>>> mapperTypeRef = new TypeReference<>() {\n-    };\n \n     public AbstractIncrementalSnapshotContext(boolean useCatalogBeforeSchema) {\n         this.useCatalogBeforeSchema = useCatalogBeforeSchema;\n@@ -185,49 +171,8 @@ private Object[] serializedStringToArray(String field, String serialized) {\n         }\n     }\n \n-    private String dataCollectionsToSnapshotAsString() {\n-        // TODO Handle non-standard table ids containing dots, commas etc.\n-\n-        if (!Strings.isNullOrEmpty(dataCollectionsToSnapshotJson)) {\n-            // A cached value to improve performance since this method is called in the \"store\"\n-            // that is called during events processing\n-            return dataCollectionsToSnapshotJson;\n-        }\n-\n-        try {\n-            List<LinkedHashMap<String, String>> dataCollectionsMap = dataCollectionsToSnapshot.stream()\n-                    .map(x -> {\n-                        LinkedHashMap<String, String> map = new LinkedHashMap<>();\n-                        map.put(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ID, x.getId().toString());\n-                        map.put(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ADDITIONAL_CONDITION, x.getAdditionalCondition().orElse(null));\n-                        map.put(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_SURROGATE_KEY, x.getSurrogateKey().orElse(null));\n-                        return map;\n-                    })\n-                    .collect(Collectors.toList());\n-            return mapper.writeValueAsString(dataCollectionsMap);\n-        }\n-        catch (JsonProcessingException e) {\n-            throw new DebeziumException(\"Cannot serialize dataCollectionsToSnapshot information\");\n-        }\n-    }\n-\n-    private List<DataCollection<T>> stringToDataCollections(String dataCollectionsStr) {\n-        try {\n-            List<LinkedHashMap<String, String>> dataCollections = mapper.readValue(dataCollectionsStr, mapperTypeRef);\n-            List<DataCollection<T>> dataCollectionsList = dataCollections.stream()\n-                    .map(x -> new DataCollection<T>((T) TableId.parse(x.get(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ID), useCatalogBeforeSchema),\n-                            Optional.ofNullable(x.get(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ADDITIONAL_CONDITION)).orElse(\"\"),\n-                            Optional.ofNullable(x.get(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_SURROGATE_KEY)).orElse(\"\")))\n-                    .collect(Collectors.toList());\n-            return dataCollectionsList;\n-        }\n-        catch (JsonProcessingException e) {\n-            throw new DebeziumException(\"Cannot de-serialize dataCollectionsToSnapshot information\");\n-        }\n-    }\n-\n     public boolean snapshotRunning() {\n-        return !dataCollectionsToSnapshot.isEmpty();\n+        return !snapshotDataCollection.isEmpty();\n     }\n \n     public Map<String, Object> store(Map<String, Object> offset) {\n@@ -236,14 +181,13 @@ public Map<String, Object> store(Map<String, Object> offset) {\n         }\n         offset.put(EVENT_PRIMARY_KEY, arrayToSerializedString(lastEventKeySent));\n         offset.put(TABLE_MAXIMUM_KEY, arrayToSerializedString(maximumKey));\n-        offset.put(DATA_COLLECTIONS_TO_SNAPSHOT_KEY, dataCollectionsToSnapshotAsString());\n+        offset.put(SnapshotDataCollection.DATA_COLLECTIONS_TO_SNAPSHOT_KEY, snapshotDataCollection.dataCollectionsAsJsonString());\n         offset.put(CORRELATION_ID, correlationId);\n         return offset;\n     }\n \n     private void addTablesIdsToSnapshot(List<DataCollection<T>> dataCollectionIds) {\n-        dataCollectionsToSnapshot.addAll(dataCollectionIds);\n-        dataCollectionsToSnapshotJson = dataCollectionsToSnapshotAsString();\n+        snapshotDataCollection.add(dataCollectionIds);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -272,23 +216,20 @@ private Function<String, DataCollection<T>> buildDataCollection(List<AdditionalC\n \n     @Override\n     public void stopSnapshot() {\n-        this.dataCollectionsToSnapshot.clear();\n-        this.dataCollectionsToSnapshotJson = null;\n+        this.snapshotDataCollection.clear();\n         this.correlationId = null;\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean removeDataCollectionFromSnapshot(String dataCollectionId) {\n         final T collectionId = (T) TableId.parse(dataCollectionId, useCatalogBeforeSchema);\n-        boolean removed = dataCollectionsToSnapshot.removeAll(Arrays.asList(new DataCollection<T>(collectionId)));\n-        this.dataCollectionsToSnapshotJson = dataCollectionsToSnapshotAsString();\n-        return removed;\n+        return snapshotDataCollection.remove(List.of(new DataCollection<>(collectionId)));\n     }\n \n     @Override\n     public List<DataCollection<T>> getDataCollections() {\n-        return new ArrayList<>(dataCollectionsToSnapshot);\n+        return new ArrayList<>(snapshotDataCollection.getDataCollectionsToSnapshot());\n     }\n \n     @Override\n@@ -310,11 +251,10 @@ protected static <U> IncrementalSnapshotContext<U> init(AbstractIncrementalSnaps\n         final String maximumKeyStr = (String) offsets.get(TABLE_MAXIMUM_KEY);\n         context.maximumKey = (maximumKeyStr != null) ? context.serializedStringToArray(TABLE_MAXIMUM_KEY, maximumKeyStr)\n                 : null;\n-        final String dataCollectionsStr = (String) offsets.get(DATA_COLLECTIONS_TO_SNAPSHOT_KEY);\n-        context.dataCollectionsToSnapshot.clear();\n-        context.dataCollectionsToSnapshotJson = null;\n+        final String dataCollectionsStr = (String) offsets.get(SnapshotDataCollection.DATA_COLLECTIONS_TO_SNAPSHOT_KEY);\n+        context.snapshotDataCollection.clear();\n         if (dataCollectionsStr != null) {\n-            context.addTablesIdsToSnapshot(context.stringToDataCollections(dataCollectionsStr));\n+            context.addTablesIdsToSnapshot(context.snapshotDataCollection.stringToDataCollections(dataCollectionsStr, context.useCatalogBeforeSchema));\n         }\n         context.correlationId = (String) offsets.get(CORRELATION_ID);\n         return context;\n@@ -325,11 +265,11 @@ public void sendEvent(Object[] key) {\n     }\n \n     public DataCollection<T> currentDataCollectionId() {\n-        return dataCollectionsToSnapshot.peek();\n+        return snapshotDataCollection.peek();\n     }\n \n     public int dataCollectionsToBeSnapshottedCount() {\n-        return dataCollectionsToSnapshot.size();\n+        return snapshotDataCollection.size();\n     }\n \n     public void nextChunkPosition(Object[] end) {\n@@ -359,9 +299,7 @@ public boolean isNonInitialChunk() {\n \n     public DataCollection<T> nextDataCollection() {\n         resetChunk();\n-        DataCollection<T> nextDataCollection = dataCollectionsToSnapshot.poll();\n-        this.dataCollectionsToSnapshotJson = dataCollectionsToSnapshotAsString();\n-        return nextDataCollection;\n+        return snapshotDataCollection.getNext();\n     }\n \n     public void startNewChunk() {\n@@ -405,8 +343,112 @@ public void setSchemaVerificationPassed(boolean schemaVerificationPassed) {\n     @Override\n     public String toString() {\n         return \"IncrementalSnapshotContext [windowOpened=\" + windowOpened + \", chunkEndPosition=\"\n-                + Arrays.toString(chunkEndPosition) + \", dataCollectionsToSnapshot=\" + dataCollectionsToSnapshot\n+                + Arrays.toString(chunkEndPosition) + \", dataCollectionsToSnapshot=\" + snapshotDataCollection.getDataCollectionsToSnapshot()\n                 + \", lastEventKeySent=\" + Arrays.toString(lastEventKeySent) + \", maximumKey=\"\n                 + Arrays.toString(maximumKey) + \"]\";\n     }\n+\n+    public static class SnapshotDataCollection<T> extends LinkedList<DataCollection<T>> {\n+\n+        public static final String DATA_COLLECTIONS_TO_SNAPSHOT_KEY = INCREMENTAL_SNAPSHOT_KEY + \"_collections\";\n+\n+        public static final String DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ID = DATA_COLLECTIONS_TO_SNAPSHOT_KEY + \"_id\";\n+\n+        public static final String DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ADDITIONAL_CONDITION = DATA_COLLECTIONS_TO_SNAPSHOT_KEY\n+                + \"_additional_condition\";\n+\n+        public static final String DATA_COLLECTIONS_TO_SNAPSHOT_KEY_SURROGATE_KEY = DATA_COLLECTIONS_TO_SNAPSHOT_KEY\n+                + \"_surrogate_key\";\n+        private final ObjectMapper mapper = new ObjectMapper();\n+        private final TypeReference<List<LinkedHashMap<String, String>>> mapperTypeRef = new TypeReference<>() {\n+        };\n+        private final Queue<DataCollection<T>> dataCollectionsToSnapshot = new LinkedList<>();\n+        private String dataCollectionsToSnapshotJson;\n+\n+        public SnapshotDataCollection() {\n+        }\n+\n+        public void add(List<DataCollection<T>> dataCollectionIds) {\n+            this.dataCollectionsToSnapshot.addAll(dataCollectionIds);\n+            this.dataCollectionsToSnapshotJson = jsonString();\n+        }\n+\n+        public DataCollection<T> getNext() {\n+            DataCollection<T> nextDataCollection = this.dataCollectionsToSnapshot.poll();\n+            this.dataCollectionsToSnapshotJson = jsonString();\n+            return nextDataCollection;\n+        }\n+\n+        public DataCollection<T> peek() {\n+            return this.dataCollectionsToSnapshot.peek();\n+        }\n+\n+        public int size() {\n+            return this.dataCollectionsToSnapshot.size();\n+        }\n+\n+        public void clear() {\n+            this.dataCollectionsToSnapshot.clear();\n+            this.dataCollectionsToSnapshotJson = null;\n+        }\n+\n+        public boolean isEmpty() {\n+            return this.dataCollectionsToSnapshot.isEmpty();\n+        }\n+\n+        public boolean remove(List<DataCollection<T>> toRemove) {\n+            boolean removed = this.dataCollectionsToSnapshot.removeAll(toRemove);\n+            this.dataCollectionsToSnapshotJson = jsonString();\n+            return removed;\n+        }\n+\n+        public String dataCollectionsAsJsonString() {\n+            return this.dataCollectionsToSnapshotJson;\n+        }\n+\n+        public Queue<DataCollection<T>> getDataCollectionsToSnapshot() {\n+            return this.dataCollectionsToSnapshot;\n+        }\n+\n+        private String jsonString() {\n+            // TODO Handle non-standard table ids containing dots, commas etc.\n+\n+            if (!Strings.isNullOrEmpty(dataCollectionsToSnapshotJson)) {\n+                // A cached value to improve performance since this method is called in the \"store\"\n+                // that is called during events processing\n+                return dataCollectionsToSnapshotJson;\n+            }\n+\n+            try {\n+                List<LinkedHashMap<String, String>> dataCollectionsMap = dataCollectionsToSnapshot.stream()\n+                        .map(x -> {\n+                            LinkedHashMap<String, String> map = new LinkedHashMap<>();\n+                            map.put(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ID, x.getId().toString());\n+                            map.put(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ADDITIONAL_CONDITION, x.getAdditionalCondition().orElse(null));\n+                            map.put(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_SURROGATE_KEY, x.getSurrogateKey().orElse(null));\n+                            return map;\n+                        })\n+                        .collect(Collectors.toList());\n+\n+                return mapper.writeValueAsString(dataCollectionsMap);\n+            }\n+            catch (JsonProcessingException e) {\n+                throw new DebeziumException(\"Cannot serialize dataCollectionsToSnapshot information\");\n+            }\n+        }\n+\n+        private List<DataCollection<T>> stringToDataCollections(String dataCollectionsStr, boolean useCatalogBeforeSchema) {\n+            try {\n+                List<LinkedHashMap<String, String>> dataCollections = mapper.readValue(dataCollectionsStr, mapperTypeRef);\n+                return dataCollections.stream()\n+                        .map(x -> new DataCollection<>((T) TableId.parse(x.get(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ID), useCatalogBeforeSchema),\n+                                Optional.ofNullable(x.get(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_ADDITIONAL_CONDITION)).orElse(\"\"),\n+                                Optional.ofNullable(x.get(DATA_COLLECTIONS_TO_SNAPSHOT_KEY_SURROGATE_KEY)).orElse(\"\")))\n+                        .collect(Collectors.toList());\n+            }\n+            catch (JsonProcessingException e) {\n+                throw new DebeziumException(\"Cannot de-serialize dataCollectionsToSnapshot information\");\n+            }\n+        }\n+    }\n }",
      "parent_sha": "81298865a5bdbd1808596c090db25a8572e0c791"
    }
  },
  {
    "oid": "acabb806d38b8b1cf90f7d1a28c8176b67c75714",
    "message": "DBZ-7920 Use more reliable check on infinity value assertions",
    "date": "2024-07-09T12:57:40Z",
    "url": "https://github.com/debezium/debezium/commit/acabb806d38b8b1cf90f7d1a28c8176b67c75714",
    "details": {
      "sha": "3c6b47005d348c2fca1275d2ccfb36334ab692ac",
      "filename": "debezium-connector-jdbc/src/test/java/io/debezium/connector/jdbc/integration/postgres/JdbcSinkInsertModeIT.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debezium/debezium/blob/acabb806d38b8b1cf90f7d1a28c8176b67c75714/debezium-connector-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fjdbc%2Fintegration%2Fpostgres%2FJdbcSinkInsertModeIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/acabb806d38b8b1cf90f7d1a28c8176b67c75714/debezium-connector-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fjdbc%2Fintegration%2Fpostgres%2FJdbcSinkInsertModeIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fjdbc%2Fintegration%2Fpostgres%2FJdbcSinkInsertModeIT.java?ref=acabb806d38b8b1cf90f7d1a28c8176b67c75714",
      "patch": "@@ -7,7 +7,6 @@\n \n import java.sql.SQLException;\n import java.sql.Timestamp;\n-import java.time.LocalDateTime;\n import java.util.Arrays;\n import java.util.Base64;\n import java.util.List;\n@@ -27,6 +26,7 @@\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.ArgumentsSource;\n+import org.postgresql.PGStatement;\n import org.postgresql.geometric.PGpoint;\n import org.postgresql.util.PGobject;\n \n@@ -228,8 +228,8 @@ public void testInsertModeInsertInfinityValues(SinkRecordFactory factory) throws\n \n         getSink().assertColumnType(tableAssert, \"id\", ValueType.NUMBER, (byte) 1);\n \n-        getSink().assertColumnType(tableAssert, \"timestamp_infinity-\", Timestamp.class, Timestamp.valueOf(LocalDateTime.of(292269055, 12, 3, 0, 0, 0)));\n-        getSink().assertColumnType(tableAssert, \"timestamp_infinity+\", Timestamp.class, Timestamp.valueOf(LocalDateTime.of(292278994, 8, 17, 0, 0, 0)));\n+        getSink().assertColumnType(tableAssert, \"timestamp_infinity-\", Timestamp.class, new Timestamp(PGStatement.DATE_NEGATIVE_INFINITY));\n+        getSink().assertColumnType(tableAssert, \"timestamp_infinity+\", Timestamp.class, new Timestamp(PGStatement.DATE_POSITIVE_INFINITY));\n         getSink().assertColumnType(tableAssert, \"range_with_infinity\", String.class, \"[2010-01-01 14:30, +infinity)\");\n \n     }",
      "parent_sha": "2b9ad53b1aa1d886a58ece62ce4698ac03bec3b3"
    }
  },
  {
    "oid": "cd07b8a06d568769a76e7b16845f22bca47a990a",
    "message": "DBZ-5044 Rename and reorder schema attributes",
    "date": "2022-09-08T08:35:20Z",
    "url": "https://github.com/debezium/debezium/commit/cd07b8a06d568769a76e7b16845f22bca47a990a",
    "details": {
      "sha": "c8ec4c03c15cc7aa4e5082819c6998903b3ede64",
      "filename": "debezium-core/src/main/java/io/debezium/schema/SchemaBuilderFactory.java",
      "status": "modified",
      "additions": 19,
      "deletions": 10,
      "changes": 29,
      "blob_url": "https://github.com/debezium/debezium/blob/cd07b8a06d568769a76e7b16845f22bca47a990a/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fschema%2FSchemaBuilderFactory.java",
      "raw_url": "https://github.com/debezium/debezium/raw/cd07b8a06d568769a76e7b16845f22bca47a990a/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fschema%2FSchemaBuilderFactory.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fschema%2FSchemaBuilderFactory.java?ref=cd07b8a06d568769a76e7b16845f22bca47a990a",
      "patch": "@@ -21,20 +21,29 @@\n \n public class SchemaBuilderFactory {\n \n+    /*\n+     * Heartbeat schemas\n+     */\n+    private static final String HEARTBEAT_KEY_SCHEMA_NAME = \"io.debezium.connector.common.ServerNameKey\";\n     private static final int HEARTBEAT_KEY_SCHEMA_VERSION = 1;\n-    private static final int HEARTBEAT_VALUE_SCHEMA_VERSION = 1;\n-    private static final int TRANSACTION_KEY_SCHEMA_VERSION = 1;\n-    private static final int TRANSACTION_VALUE_SCHEMA_VERSION = 1;\n-    private static final int TRANSACTION_BLOCK_SCHEMA_VERSION = 1;\n-    private static final int TRANSACTION_EVENT_COUNT_COLLECTION_SCHEMA_VERSION = 1;\n \n-    private static final String HEARTBEAT_KEY_SCHEMA_NAME = \"io.debezium.connector.common.ServerNameKey\";\n     private static final String HEARTBEAT_VALUE_SCHEMA_NAME = \"io.debezium.connector.common.Heartbeat\";\n+    private static final int HEARTBEAT_VALUE_SCHEMA_VERSION = 1;\n \n-    private static final String TRANSACTION_BLOCK_SCHEMA_NAME = \"event.block\";\n-    private static final String TRANSACTION_EVENT_COUNT_COLLECTION_SCHEMA_NAME = \"event.collection\";\n+    /*\n+     * Transaction-related schemas\n+     */\n     private static final String TRANSACTION_METADATA_KEY_SCHEMA_NAME = \"io.debezium.connector.common.TransactionMetadataKey\";\n+    private static final int TRANSACTION_METADATA_KEY_SCHEMA_VERSION = 1;\n+\n     private static final String TRANSACTION_METADATA_VALUE_SCHEMA_NAME = \"io.debezium.connector.common.TransactionMetadataValue\";\n+    private static final int TRANSACTION_METADATA_VALUE_SCHEMA_VERSION = 1;\n+\n+    private static final String TRANSACTION_BLOCK_SCHEMA_NAME = \"event.block\";\n+    private static final int TRANSACTION_BLOCK_SCHEMA_VERSION = 1;\n+\n+    private static final String TRANSACTION_EVENT_COUNT_COLLECTION_SCHEMA_NAME = \"event.collection\";\n+    private static final int TRANSACTION_EVENT_COUNT_COLLECTION_SCHEMA_VERSION = 1;\n \n     private SchemaBuilderFactory() {\n     }\n@@ -81,15 +90,15 @@ public Schema transactionEventCountPerDataCollectionSchema() {\n     public Schema transactionKeySchema(SchemaNameAdjuster adjuster) {\n         return SchemaBuilder.struct()\n                 .name(adjuster.adjust(TRANSACTION_METADATA_KEY_SCHEMA_NAME))\n-                .version(TRANSACTION_KEY_SCHEMA_VERSION)\n+                .version(TRANSACTION_METADATA_KEY_SCHEMA_VERSION)\n                 .field(TransactionMonitor.DEBEZIUM_TRANSACTION_ID_KEY, Schema.STRING_SCHEMA)\n                 .build();\n     }\n \n     public Schema transactionValueSchema(SchemaNameAdjuster adjuster) {\n         return SchemaBuilder.struct()\n                 .name(adjuster.adjust(TRANSACTION_METADATA_VALUE_SCHEMA_NAME))\n-                .version(TRANSACTION_VALUE_SCHEMA_VERSION)\n+                .version(TRANSACTION_METADATA_VALUE_SCHEMA_VERSION)\n                 .field(TransactionMonitor.DEBEZIUM_TRANSACTION_STATUS_KEY, Schema.STRING_SCHEMA)\n                 .field(TransactionMonitor.DEBEZIUM_TRANSACTION_ID_KEY, Schema.STRING_SCHEMA)\n                 .field(TransactionMonitor.DEBEZIUM_TRANSACTION_EVENT_COUNT_KEY, Schema.OPTIONAL_INT64_SCHEMA)",
      "parent_sha": "1a55869f5b6d3e8abab130946a3d9c08b2bd0568"
    }
  },
  {
    "oid": "e9355c3589d1179bfc6bdbe4453c771e3c07235a",
    "message": "DBZ-2261 Take the full filter count into assert",
    "date": "2020-06-22T18:54:44Z",
    "url": "https://github.com/debezium/debezium/commit/e9355c3589d1179bfc6bdbe4453c771e3c07235a",
    "details": {
      "sha": "337f2d0781cb39ce3fd3e8a9fe2d80e3fdfedb85",
      "filename": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/BinlogReaderIT.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/debezium/debezium/blob/e9355c3589d1179bfc6bdbe4453c771e3c07235a/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FBinlogReaderIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/e9355c3589d1179bfc6bdbe4453c771e3c07235a/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FBinlogReaderIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FBinlogReaderIT.java?ref=e9355c3589d1179bfc6bdbe4453c771e3c07235a",
      "patch": "@@ -124,14 +124,13 @@ protected int consumeAtLeast(int minNumber, long timeout, TimeUnit unit) throws\n \n     protected long filterAtLeast(final int minNumber, final long timeout, final TimeUnit unit) throws InterruptedException {\n         final BinlogReaderMetrics metrics = reader.getMetrics();\n-        final long initialFilterCount = metrics.getNumberOfEventsFiltered();\n-        final long targetNumber = initialFilterCount + minNumber;\n+        final long targetNumber = minNumber;\n         long startTime = System.currentTimeMillis();\n         while (metrics.getNumberOfEventsFiltered() < targetNumber && (System.currentTimeMillis() - startTime) < unit.toMillis(timeout)) {\n             // Ignore the records polled.\n             reader.poll();\n         }\n-        return reader.getMetrics().getNumberOfEventsFiltered() - initialFilterCount;\n+        return reader.getMetrics().getNumberOfEventsFiltered();\n     }\n \n     protected Configuration.Builder simpleConfig() {",
      "parent_sha": "9aa14184f2a0d4468f9f03c64aadd8dbd2e9d245"
    }
  },
  {
    "oid": "86582a3802aa9253cf342069359712bd5ae68c45",
    "message": "DBZ-8054 Workaround bug with ISPN and toList() collection",
    "date": "2024-08-01T13:47:36Z",
    "url": "https://github.com/debezium/debezium/commit/86582a3802aa9253cf342069359712bd5ae68c45",
    "details": {
      "sha": "a5b7ca1bb54eb8571a4b55805001f1cb3fd7053b",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/logminer/processor/AbstractTransactionCachingLogMinerEventProcessor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 12,
      "changes": 15,
      "blob_url": "https://github.com/debezium/debezium/blob/86582a3802aa9253cf342069359712bd5ae68c45/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2FAbstractTransactionCachingLogMinerEventProcessor.java",
      "raw_url": "https://github.com/debezium/debezium/raw/86582a3802aa9253cf342069359712bd5ae68c45/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2FAbstractTransactionCachingLogMinerEventProcessor.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2Fprocessor%2FAbstractTransactionCachingLogMinerEventProcessor.java?ref=86582a3802aa9253cf342069359712bd5ae68c45",
      "patch": "@@ -13,8 +13,6 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Optional;\n-import java.util.TreeMap;\n-import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n@@ -163,16 +161,9 @@ protected List<String> getTransactionKeysWithPrefix(String prefix) {\n         return getEventCache()\n                 .streamAndReturn(stream -> stream.map(LogMinerCache.Entry::getKey)\n                         .filter(k -> k.startsWith(prefix))\n-                        .collect(\n-                                Collectors.toMap(\n-                                        Function.identity(),\n-                                        x -> Boolean.TRUE,\n-                                        (v1, v2) -> {\n-                                            throw new IllegalStateException();\n-                                        },\n-                                        () -> new TreeMap<>(EventKeySortComparator.INSTANCE.reversed())))\n-                        .keySet())\n-                .stream().toList();\n+                        .sorted(EventKeySortComparator.INSTANCE.reversed())\n+                        .collect(Collectors.toList()) // must use Collectors.toList to avoid bug in ISPN for now\n+                );\n     }\n \n     @Override",
      "parent_sha": "28ca70c396a3b3f7189a715df5384a4cd19e8b43"
    }
  },
  {
    "oid": "641fc21179910e84ae0a0dce46f917d7e50c02a9",
    "message": "DBZ-1283 Ensuring DB history topic name and server name don't conflict",
    "date": "2019-06-03T08:58:10Z",
    "url": "https://github.com/debezium/debezium/commit/641fc21179910e84ae0a0dce46f917d7e50c02a9",
    "details": {
      "sha": "eae3c3043d60ab2d1d788aa9c3e4da9474391c03",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/OracleConnectorConfig.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/debezium/debezium/blob/641fc21179910e84ae0a0dce46f917d7e50c02a9/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnectorConfig.java",
      "raw_url": "https://github.com/debezium/debezium/raw/641fc21179910e84ae0a0dce46f917d7e50c02a9/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnectorConfig.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2FOracleConnectorConfig.java?ref=641fc21179910e84ae0a0dce46f917d7e50c02a9",
      "patch": "@@ -83,13 +83,16 @@ public class OracleConnectorConfig extends HistorizedRelationalDatabaseConnector\n         .withDisplayName(\"Oracle version, 11 or 12+\")\n         .withEnum(OracleVersion.class, OracleVersion.V12Plus)\n         .withImportance(Importance.LOW)\n-        .withDescription(\"For default oracle 12+, use default pos_version value v2, for oracle 11, use pos_version value v1.\");\n+        .withDescription(\"For default Oracle 12+, use default pos_version value v2, for Oracle 11, use pos_version value v1.\");\n+\n+    public static final Field SERVER_NAME = RelationalDatabaseConnectorConfig.SERVER_NAME\n+            .withValidation(CommonConnectorConfig::validateServerNameIsDifferentFromHistoryTopicName);\n \n     /**\n      * The set of {@link Field}s defined as part of this configuration.\n      */\n     public static Field.Set ALL_FIELDS = Field.setOf(\n-            RelationalDatabaseConnectorConfig.SERVER_NAME,\n+            SERVER_NAME,\n             DATABASE_NAME,\n             PDB_NAME,\n             XSTREAM_SERVER_NAME,\n@@ -117,7 +120,7 @@ public class OracleConnectorConfig extends HistorizedRelationalDatabaseConnector\n     private final OracleVersion oracleVersion;\n \n     public OracleConnectorConfig(Configuration config) {\n-        super(config, config.getString(RelationalDatabaseConnectorConfig.SERVER_NAME), new SystemTablesPredicate());\n+        super(config, config.getString(SERVER_NAME), new SystemTablesPredicate());\n \n         this.databaseName = config.getString(DATABASE_NAME);\n         this.pdbName = config.getString(PDB_NAME);\n@@ -130,7 +133,7 @@ public OracleConnectorConfig(Configuration config) {\n     public static ConfigDef configDef() {\n         ConfigDef config = new ConfigDef();\n \n-        Field.group(config, \"Oracle\", RelationalDatabaseConnectorConfig.SERVER_NAME, DATABASE_NAME, PDB_NAME,\n+        Field.group(config, \"Oracle\", SERVER_NAME, DATABASE_NAME, PDB_NAME,\n                 XSTREAM_SERVER_NAME, SNAPSHOT_MODE);\n         Field.group(config, \"History Storage\", KafkaDatabaseHistory.BOOTSTRAP_SERVERS,\n                 KafkaDatabaseHistory.TOPIC, KafkaDatabaseHistory.RECOVERY_POLL_ATTEMPTS,",
      "parent_sha": "dc76aa4ea235e6ee9eaaa3d75f3b4650c511d7d6"
    }
  },
  {
    "oid": "d02d1294044a8b3637657253d83be9af17aea933",
    "message": "DBZ-8113 Preserve source info during emitting PK change",
    "date": "2024-08-08T08:51:11Z",
    "url": "https://github.com/debezium/debezium/commit/d02d1294044a8b3637657253d83be9af17aea933",
    "details": {
      "sha": "5554346adf58ddb7a4a589c87d4b33aacefe84ac",
      "filename": "debezium-core/src/main/java/io/debezium/relational/RelationalChangeRecordEmitter.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/debezium/debezium/blob/d02d1294044a8b3637657253d83be9af17aea933/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalChangeRecordEmitter.java",
      "raw_url": "https://github.com/debezium/debezium/raw/d02d1294044a8b3637657253d83be9af17aea933/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalChangeRecordEmitter.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2FRelationalChangeRecordEmitter.java?ref=d02d1294044a8b3637657253d83be9af17aea933",
      "patch": "@@ -171,16 +171,19 @@ protected boolean skipEmptyMessages() {\n     protected void emitUpdateAsPrimaryKeyChangeRecord(Receiver<P> receiver, TableSchema tableSchema, Struct oldKey,\n                                                       Struct newKey, Struct oldValue, Struct newValue)\n             throws InterruptedException {\n+        final OffsetContext offset = getOffset();\n+        final Struct sourceInfo = offset.getSourceInfo();\n+\n         ConnectHeaders headers = new ConnectHeaders();\n         headers.add(PK_UPDATE_NEWKEY_FIELD, newKey, tableSchema.keySchema());\n \n-        Struct envelope = tableSchema.getEnvelopeSchema().delete(oldValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n-        receiver.changeRecord(getPartition(), tableSchema, Operation.DELETE, oldKey, envelope, getOffset(), headers);\n+        Struct envelope = tableSchema.getEnvelopeSchema().delete(oldValue, sourceInfo, getClock().currentTimeAsInstant());\n+        receiver.changeRecord(getPartition(), tableSchema, Operation.DELETE, oldKey, envelope, offset, headers);\n \n         headers = new ConnectHeaders();\n         headers.add(PK_UPDATE_OLDKEY_FIELD, oldKey, tableSchema.keySchema());\n \n-        envelope = tableSchema.getEnvelopeSchema().create(newValue, getOffset().getSourceInfo(), getClock().currentTimeAsInstant());\n-        receiver.changeRecord(getPartition(), tableSchema, Operation.CREATE, newKey, envelope, getOffset(), headers);\n+        envelope = tableSchema.getEnvelopeSchema().create(newValue, sourceInfo, getClock().currentTimeAsInstant());\n+        receiver.changeRecord(getPartition(), tableSchema, Operation.CREATE, newKey, envelope, offset, headers);\n     }\n }",
      "parent_sha": "27bb2d261b89a79a1355da8fd3d7b2d8a695efde"
    }
  },
  {
    "oid": "b88d9b06d415d9e9d0a1669ea09eecf1e76ac3de",
    "message": "DBZ-1513 Align test names",
    "date": "2019-10-07T16:38:35Z",
    "url": "https://github.com/debezium/debezium/commit/b88d9b06d415d9e9d0a1669ea09eecf1e76ac3de",
    "details": {
      "sha": "0207a89221d5cd3426cf7e6e376fcd667e40a193",
      "filename": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/transforms/ExtractNewDocumentStateTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debezium/debezium/blob/b88d9b06d415d9e9d0a1669ea09eecf1e76ac3de/debezium-connector-mongodb%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2Ftransforms%2FExtractNewDocumentStateTest.java",
      "raw_url": "https://github.com/debezium/debezium/raw/b88d9b06d415d9e9d0a1669ea09eecf1e76ac3de/debezium-connector-mongodb%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2Ftransforms%2FExtractNewDocumentStateTest.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mongodb%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmongodb%2Ftransforms%2FExtractNewDocumentStateTest.java?ref=b88d9b06d415d9e9d0a1669ea09eecf1e76ac3de",
      "patch": "@@ -203,7 +203,7 @@ public void shouldPassHeartbeatMessages() {\n \n     @Test\n     @FixFor(\"DBZ-1430\")\n-    public void shouldDropMessagesWithoutDebeziumCdcEnvelopeDueToMissingSchemaName() {\n+    public void shouldSkipMessagesWithoutDebeziumCdcEnvelopeDueToMissingSchemaName() {\n         Schema valueSchema = SchemaBuilder.struct()\n                 .field(AbstractSourceInfo.TIMESTAMP_KEY, Schema.INT64_SCHEMA)\n                 .build();\n@@ -235,7 +235,7 @@ public void shouldDropMessagesWithoutDebeziumCdcEnvelopeDueToMissingSchemaName()\n \n     @Test\n     @FixFor(\"DBZ-1430\")\n-    public void shouldDropMessagesWithoutDebeziumCdcEnvelopeDueToMissingSchemaNameSuffix() {\n+    public void shouldSkipMessagesWithoutDebeziumCdcEnvelopeDueToMissingSchemaNameSuffix() {\n         Schema valueSchema = SchemaBuilder.struct()\n                 .name(\"io.debezium.connector.common.Heartbeat\")\n                 .field(AbstractSourceInfo.TIMESTAMP_KEY, Schema.INT64_SCHEMA)\n@@ -268,7 +268,7 @@ public void shouldDropMessagesWithoutDebeziumCdcEnvelopeDueToMissingSchemaNameSu\n \n     @Test\n     @FixFor(\"DBZ-1430\")\n-    public void shouldDropMessagesWithoutDebeziumCdcEnvelopeDueToMissingValueSchema() {\n+    public void shouldSkipMessagesWithoutDebeziumCdcEnvelopeDueToMissingValueSchema() {\n         Schema valueSchema = SchemaBuilder.struct()\n                 .name(\"io.debezium.connector.common.Heartbeat.Envelope\")\n                 .field(AbstractSourceInfo.TIMESTAMP_KEY, Schema.INT64_SCHEMA)",
      "parent_sha": "2c4cb832590037f9ae5781639aebd827fed5c6dd"
    }
  },
  {
    "oid": "0bea06ea09ba04a41444434d5f40b9dc2051583c",
    "message": "DBZ-5160 Setting pull secret after either image or build is configured for KC",
    "date": "2022-05-23T19:46:08Z",
    "url": "https://github.com/debezium/debezium/commit/0bea06ea09ba04a41444434d5f40b9dc2051583c",
    "details": {
      "sha": "4ecd13d3bcb28f6be07a9f80d8741676be7c39cf",
      "filename": "debezium-testing/debezium-testing-system/src/test/java/io/debezium/testing/system/fixtures/kafka/OcpKafka.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debezium/debezium/blob/0bea06ea09ba04a41444434d5f40b9dc2051583c/debezium-testing%2Fdebezium-testing-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fsystem%2Ffixtures%2Fkafka%2FOcpKafka.java",
      "raw_url": "https://github.com/debezium/debezium/raw/0bea06ea09ba04a41444434d5f40b9dc2051583c/debezium-testing%2Fdebezium-testing-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fsystem%2Ffixtures%2Fkafka%2FOcpKafka.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-testing%2Fdebezium-testing-system%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fsystem%2Ffixtures%2Fkafka%2FOcpKafka.java?ref=0bea06ea09ba04a41444434d5f40b9dc2051583c",
      "patch": "@@ -87,8 +87,7 @@ private void deployConnectCluster(StrimziOperatorController operatorController,\n                 .base(kafkaController.getLocalBootstrapAddress())\n                 .withLoggingFromConfigMap(configMap)\n                 .withMetricsFromConfigMap(configMap)\n-                .withConnectorResources(STRIMZI_OPERATOR_CONNECTORS)\n-                .withPullSecret(operatorController.getPullSecret());\n+                .withConnectorResources(STRIMZI_OPERATOR_CONNECTORS);\n \n         if (STRIMZI_KC_BUILD) {\n             OcpArtifactServerController artifactServerController = deployArtifactServer();\n@@ -98,6 +97,8 @@ private void deployConnectCluster(StrimziOperatorController operatorController,\n             builder.withImage(STRIMZI_KC_IMAGE);\n         }\n \n+        builder.withPullSecret(operatorController.getPullSecret());\n+\n         OcpKafkaConnectDeployer connectDeployer = new OcpKafkaConnectDeployer(\n                 project, builder, configMap, operatorController, ocp, new OkHttpClient());\n ",
      "parent_sha": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0"
    }
  },
  {
    "oid": "440c2cb509d2f7686a9667d9cbbb7d1b6b7537c5",
    "message": "DBZ-7302 Increase \"task.management.timeout.ms\" fro Oracles tests",
    "date": "2024-02-20T13:45:59Z",
    "url": "https://github.com/debezium/debezium/commit/440c2cb509d2f7686a9667d9cbbb7d1b6b7537c5",
    "details": {
      "sha": "682883ac3db5f8e5f90f9f5c3c587c1da4c9b43c",
      "filename": "debezium-connector-oracle/src/test/java/io/debezium/connector/oracle/util/TestHelper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/440c2cb509d2f7686a9667d9cbbb7d1b6b7537c5/debezium-connector-oracle%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Futil%2FTestHelper.java",
      "raw_url": "https://github.com/debezium/debezium/raw/440c2cb509d2f7686a9667d9cbbb7d1b6b7537c5/debezium-connector-oracle%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Futil%2FTestHelper.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Futil%2FTestHelper.java?ref=440c2cb509d2f7686a9667d9cbbb7d1b6b7537c5",
      "patch": "@@ -195,7 +195,7 @@ else if (adapter().equals(ConnectorAdapter.OLR)) {\n                 .with(OracleConnectorConfig.SCHEMA_HISTORY, FileSchemaHistory.class)\n                 .with(FileSchemaHistory.FILE_PATH, SCHEMA_HISTORY_PATH)\n                 .with(OracleConnectorConfig.INCLUDE_SCHEMA_CHANGES, false)\n-                .with(AsyncEmbeddedEngine.TASK_MANAGEMENT_TIMEOUT_MS, 10_000);\n+                .with(AsyncEmbeddedEngine.TASK_MANAGEMENT_TIMEOUT_MS, 90_000);\n     }\n \n     /**",
      "parent_sha": "d9deb7a9444eb0259452b6620f0291c3fc2f9c97"
    }
  },
  {
    "oid": "2f71e92a82ef5ce57490548ca228e377dc9fba63",
    "message": "DBZ-2325 Fix test failure - SqlServerConnectorIT#readOnlyApplicationIntent",
    "date": "2020-07-10T15:00:22Z",
    "url": "https://github.com/debezium/debezium/commit/2f71e92a82ef5ce57490548ca228e377dc9fba63",
    "details": {
      "sha": "8d4cf0d7115465e0d2b9205932ab27a62c3d8a83",
      "filename": "debezium-connector-sqlserver/src/test/java/io/debezium/connector/sqlserver/SqlServerConnectorIT.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/2f71e92a82ef5ce57490548ca228e377dc9fba63/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/2f71e92a82ef5ce57490548ca228e377dc9fba63/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-sqlserver%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorIT.java?ref=2f71e92a82ef5ce57490548ca228e377dc9fba63",
      "patch": "@@ -187,8 +187,10 @@ public void readOnlyApplicationIntent() throws Exception {\n         assertConnectorIsRunning();\n \n         // Wait for snapshot completion\n+        TestHelper.waitForSnapshotToBeCompleted();\n         consumeRecordsByTopic(1);\n \n+        TestHelper.waitForStreamingStarted();\n         for (int i = 0; i < RECORDS_PER_TABLE; i++) {\n             final int id = ID_START + i;\n             connection.execute(\n@@ -197,7 +199,7 @@ public void readOnlyApplicationIntent() throws Exception {\n                     \"INSERT INTO tableb VALUES(\" + id + \", 'b')\");\n         }\n \n-        final SourceRecords records = consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);\n+        final SourceRecords records = consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES, 24);\n         final List<SourceRecord> tableA = records.recordsForTopic(\"server1.dbo.tablea\");\n         final List<SourceRecord> tableB = records.recordsForTopic(\"server1.dbo.tableb\");\n         Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);",
      "parent_sha": "e3abc020c90556f3b6be0e1e245abfbe98588e00"
    }
  },
  {
    "oid": "c51ef3099a688efb41204702d3aa6d4722bb4825",
    "message": "DBZ-7445 LogMiner batch size does not increase automatically\n\nThe condition for increasing the LogMiner batch size must depend on log.mining.batch.size.max, and not on log.mining.batch.size.min.",
    "date": "2024-02-05T17:28:16Z",
    "url": "https://github.com/debezium/debezium/commit/c51ef3099a688efb41204702d3aa6d4722bb4825",
    "details": {
      "sha": "18ffcfa769f2ed7af06771ea98cc89e7925d2ec8",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/logminer/LogMinerStreamingChangeEventSource.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/debezium/debezium/blob/c51ef3099a688efb41204702d3aa6d4722bb4825/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerStreamingChangeEventSource.java",
      "raw_url": "https://github.com/debezium/debezium/raw/c51ef3099a688efb41204702d3aa6d4722bb4825/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerStreamingChangeEventSource.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FLogMinerStreamingChangeEventSource.java?ref=c51ef3099a688efb41204702d3aa6d4722bb4825",
      "patch": "@@ -680,19 +680,21 @@ public void endMiningSession(OracleConnection connection, OracleOffsetContext of\n     }\n \n     private void updateBatchSize(boolean increment) {\n-        if (increment && currentBatchSize < connectorConfig.getLogMiningBatchSizeMin()) {\n-            currentBatchSize += connectorConfig.getLogMiningBatchSizeMin();\n-            if (currentBatchSize == connectorConfig.getLogMiningBatchSizeMax()) {\n+        int batchSizeMin = connectorConfig.getLogMiningBatchSizeMin();\n+        int batchSizeMax = connectorConfig.getLogMiningBatchSizeMax();\n+        if (increment && currentBatchSize < batchSizeMax) {\n+            currentBatchSize = Math.min(currentBatchSize + batchSizeMin, batchSizeMax);\n+            if (currentBatchSize == batchSizeMax) {\n                 LOGGER.info(\"The connector is now using the maximum batch size {} when querying the LogMiner view.{}\",\n                         currentBatchSize,\n                         connectorConfig.isLobEnabled() ? \"\" : \" This could be indicate of a large SCN gap.\");\n             }\n         }\n-        else if (!increment && currentBatchSize > connectorConfig.getLogMiningBatchSizeMin()) {\n-            currentBatchSize -= connectorConfig.getLogMiningBatchSizeMin();\n+        else if (!increment && currentBatchSize > batchSizeMin) {\n+            currentBatchSize = Math.max(currentBatchSize - batchSizeMin, batchSizeMin);\n         }\n \n-        if (currentBatchSize != connectorConfig.getLogMiningBatchSizeMax()) {\n+        if (currentBatchSize != batchSizeMax) {\n             LOGGER.debug(\"Updated batch size window, using batch size {}\", currentBatchSize);\n         }\n ",
      "parent_sha": "c66985776099b555885260d7d4d92dfb0f50d11c"
    }
  },
  {
    "oid": "fa2a7ba60cfa08c85da7b83930b4d12066f1c9f0",
    "message": "DBZ-5044 Fix transaction metadata schema",
    "date": "2022-09-08T08:35:20Z",
    "url": "https://github.com/debezium/debezium/commit/fa2a7ba60cfa08c85da7b83930b4d12066f1c9f0",
    "details": {
      "sha": "08d9a86cc33f0f83610031ee246c70ddb3d6c5a8",
      "filename": "debezium-core/src/main/java/io/debezium/schema/SchemaFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debezium/debezium/blob/fa2a7ba60cfa08c85da7b83930b4d12066f1c9f0/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fschema%2FSchemaFactory.java",
      "raw_url": "https://github.com/debezium/debezium/raw/fa2a7ba60cfa08c85da7b83930b4d12066f1c9f0/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fschema%2FSchemaFactory.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fschema%2FSchemaFactory.java?ref=fa2a7ba60cfa08c85da7b83930b4d12066f1c9f0",
      "patch": "@@ -130,7 +130,8 @@ public Schema transactionValueSchema(SchemaNameAdjuster adjuster) {\n                 .field(TransactionMonitor.DEBEZIUM_TRANSACTION_STATUS_KEY, Schema.STRING_SCHEMA)\n                 .field(TransactionMonitor.DEBEZIUM_TRANSACTION_ID_KEY, Schema.STRING_SCHEMA)\n                 .field(TransactionMonitor.DEBEZIUM_TRANSACTION_EVENT_COUNT_KEY, Schema.OPTIONAL_INT64_SCHEMA)\n-                .field(TransactionMonitor.DEBEZIUM_TRANSACTION_DATA_COLLECTIONS_KEY, SchemaBuilder.array(transactionEventCountPerDataCollectionSchema()))\n+                .field(TransactionMonitor.DEBEZIUM_TRANSACTION_DATA_COLLECTIONS_KEY,\n+                        SchemaBuilder.array(transactionEventCountPerDataCollectionSchema()).optional().build())\n                 .field(TransactionMonitor.DEBEZIUM_TRANSACTION_TS_MS, Schema.INT64_SCHEMA)\n                 .build();\n     }",
      "parent_sha": "aea7c1ffa6a8be09019cf4cf5d1f278a29ee1e19"
    }
  },
  {
    "oid": "1d9ac71a9eddd11a981946e514eea8f8618bd012",
    "message": "DBZ-1698 Fix test timing issue",
    "date": "2020-02-03T21:38:02Z",
    "url": "https://github.com/debezium/debezium/commit/1d9ac71a9eddd11a981946e514eea8f8618bd012",
    "details": {
      "sha": "1f3007045eecaa3d34069431ad88eb97297b5df8",
      "filename": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java",
      "status": "modified",
      "additions": 34,
      "deletions": 24,
      "changes": 58,
      "blob_url": "https://github.com/debezium/debezium/blob/1d9ac71a9eddd11a981946e514eea8f8618bd012/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FRecordsStreamProducerIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/1d9ac71a9eddd11a981946e514eea8f8618bd012/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FRecordsStreamProducerIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FRecordsStreamProducerIT.java?ref=1d9ac71a9eddd11a981946e514eea8f8618bd012",
      "patch": "@@ -26,6 +26,7 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n@@ -1056,7 +1057,7 @@ public void shouldReceiveHeartbeatAlsoWhenChangingNonWhitelistedTable() throws E\n         // the low heartbeat interval should make sure that a heartbeat message is emitted after each change record\n         // received from Postgres\n         startConnector(config -> config\n-                .with(Heartbeat.HEARTBEAT_INTERVAL, \"1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, \"100\")\n                 .with(PostgresConnectorConfig.POLL_INTERVAL_MS, \"50\")\n                 .with(PostgresConnectorConfig.TABLE_WHITELIST, \"s1\\\\.b\")\n                 .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.NEVER),\n@@ -1066,33 +1067,39 @@ public void shouldReceiveHeartbeatAlsoWhenChangingNonWhitelistedTable() throws E\n         String statement = \"CREATE SCHEMA s1;\" +\n                 \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n                 \"CREATE TABLE s1.b (pk SERIAL, bb integer, PRIMARY KEY(pk));\" +\n-                \"INSERT INTO s1.a (aa) VALUES (11);\" +\n                 \"INSERT INTO s1.b (bb) VALUES (22);\";\n \n-        // streaming from database is non-blocking so we should receive many heartbeats\n-        final int expectedAtMostStartHeartbeats = 10;\n-        final int expectedHeartbeats = 5;\n-        // heartbeat for unfiltered table, data change, heartbeats\n-        consumer = testConsumer(expectedAtMostStartHeartbeats + 1 + expectedHeartbeats);\n-        consumer.setIgnoreExtraRecords(true);\n-        executeAndWait(statement);\n+        TestHelper.execute(statement);\n+        final AtomicInteger heartbeatCount = new AtomicInteger();\n \n-        // change record for s1.b and heartbeats\n-        Optional<SourceRecord> record;\n-        int startHeartbeats = 0;\n-        while (true) {\n-            record = isHeartBeatRecordInserted();\n-            if (record.isPresent()) {\n-                assertThat(startHeartbeats).describedAs(\"Too many start heartbeats\").isLessThanOrEqualTo(expectedAtMostStartHeartbeats);\n-                break;\n+        Awaitility.await().atMost(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS).until(() -> {\n+            final SourceRecord record = consumeRecord();\n+            System.out.println(record);\n+            if (record != null) {\n+                if (record.topic().endsWith(\"s1.b\")) {\n+                    assertRecordInserted(record, \"s1.b\", PK_FIELD, 1);\n+                    return true;\n+                }\n+                else {\n+                    assertHeartBeatRecord(record);\n+                    heartbeatCount.incrementAndGet();\n+                }\n             }\n-            startHeartbeats++;\n-        }\n+            return false;\n+        });\n+        Assertions.assertThat(heartbeatCount.get()).isGreaterThan(0);\n \n-        assertRecordInserted(record.get(), \"s1.b\", PK_FIELD, 1);\n-        for (int i = 0; i < expectedHeartbeats; i++) {\n-            assertHeartBeatRecordInserted();\n-        }\n+        final Set<Long> lsn = new HashSet<>();\n+        TestHelper.execute(\"INSERT INTO s1.a (aa) VALUES (11);\");\n+        Awaitility.await().atMost(TestHelper.waitTimeForRecords(), TimeUnit.SECONDS).until(() -> {\n+            final SourceRecord record = consumeRecord();\n+            if (record != null) {\n+                lsn.add((Long) record.sourceOffset().get(\"lsn\"));\n+                return lsn.size() >= 2;\n+            }\n+            return false;\n+        });\n+        Assertions.assertThat(lsn.size()).isGreaterThanOrEqualTo(2);\n     }\n \n     @Test\n@@ -2024,7 +2031,10 @@ private void testReceiveChangesForReplicaIdentityFullTableWithToastedValue(Postg\n     private void assertHeartBeatRecordInserted() {\n         assertFalse(\"records not generated\", consumer.isEmpty());\n \n-        SourceRecord heartbeat = consumer.remove();\n+        assertHeartBeatRecord(consumer.remove());\n+    }\n+\n+    private void assertHeartBeatRecord(SourceRecord heartbeat) {\n         assertEquals(\"__debezium-heartbeat.\" + TestHelper.TEST_SERVER, heartbeat.topic());\n \n         Struct key = (Struct) heartbeat.key();",
      "parent_sha": "2a6ea1c41fa376da3ded68e688f479001d437835"
    }
  },
  {
    "oid": "d540d6d7615df4e3b5cb7a4133df3fb73775a6db",
    "message": "DBZ-2410 Fix test.",
    "date": "2020-08-27T05:41:02Z",
    "url": "https://github.com/debezium/debezium/commit/d540d6d7615df4e3b5cb7a4133df3fb73775a6db",
    "details": {
      "sha": "c0f854020985e63b51e49258b6931a812a0aa82d",
      "filename": "debezium-connector-cassandra/src/test/java/io/debezium/connector/cassandra/CassandraConnectorConfigTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/debezium/debezium/blob/d540d6d7615df4e3b5cb7a4133df3fb73775a6db/debezium-connector-cassandra%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fcassandra%2FCassandraConnectorConfigTest.java",
      "raw_url": "https://github.com/debezium/debezium/raw/d540d6d7615df4e3b5cb7a4133df3fb73775a6db/debezium-connector-cassandra%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fcassandra%2FCassandraConnectorConfigTest.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-cassandra%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fcassandra%2FCassandraConnectorConfigTest.java?ref=d540d6d7615df4e3b5cb7a4133df3fb73775a6db",
      "patch": "@@ -126,9 +126,8 @@ public void testConfigs() {\n         config = buildTaskConfig(CassandraConnectorConfig.COMMIT_LOG_POST_PROCESSING_ENABLED.name(), \"false\");\n         assertEquals(false, config.postProcessEnabled());\n \n-        boolean shouldReprocessErrorCommitLogs = true;\n-        config = buildTaskConfig(CassandraConnectorConfig.COMMIT_LOG_ERROR_REPROCESSING_ENABLED.name(), shouldReprocessErrorCommitLogs);\n-        assertEquals(shouldReprocessErrorCommitLogs, config.errorCommitLogReprocessEnabled());\n+        config = buildTaskConfig(CassandraConnectorConfig.COMMIT_LOG_ERROR_REPROCESSING_ENABLED.name(), \"true\");\n+        assertTrue(config.errorCommitLogReprocessEnabled());\n \n         String transferClazz = \"io.debezium.connector.cassandra.BlackHoleCommitLogTransfer\";\n         config = buildTaskConfig(CassandraConnectorConfig.COMMIT_LOG_TRANSFER_CLASS.name(), transferClazz);",
      "parent_sha": "c0d61f27fed7d2e7d1df74278c69d236e418fe1e"
    }
  },
  {
    "oid": "90e4aa0dea3fff96f7f4d75a6f9b58b2d219388a",
    "message": "DBZ-278 Fail if topic is not created",
    "date": "2018-02-13T15:48:42Z",
    "url": "https://github.com/debezium/debezium/commit/90e4aa0dea3fff96f7f4d75a6f9b58b2d219388a",
    "details": {
      "sha": "c2c9643088610a83244f51993f2e6887b5cfc30f",
      "filename": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/debezium/debezium/blob/90e4aa0dea3fff96f7f4d75a6f9b58b2d219388a/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java",
      "raw_url": "https://github.com/debezium/debezium/raw/90e4aa0dea3fff96f7f4d75a6f9b58b2d219388a/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Frelational%2Fhistory%2FKafkaDatabaseHistory.java?ref=90e4aa0dea3fff96f7f4d75a6f9b58b2d219388a",
      "patch": "@@ -55,6 +55,13 @@\n @NotThreadSafe\n public class KafkaDatabaseHistory extends AbstractDatabaseHistory {\n \n+    /**\n+     * The name of broker property defining default replication factor for topics without the explicit setting.\n+     *\n+     * @see kafka.server.KafkaConfig.DefaultReplicationFactorProp\n+     */\n+    private static final String DEFAULT_TOPIC_REPLICATION_FACTOR_PROP_NAME = \"default.replication.factor\";\n+\n     public static final Field TOPIC = Field.create(CONFIGURATION_FIELD_PREFIX_STRING + \"kafka.topic\")\n                                            .withDisplayName(\"Database history topic name\")\n                                            .withType(Type.STRING)\n@@ -337,15 +344,15 @@ public void initializeStorage() {\n                 throw new ConnectException(\"No configs have been received\");\n             }\n             final Config config = configs.values().iterator().next();\n-            final short replicationFactor = Short.parseShort(config.get(\"default.replication.factor\").value());\n+            final short replicationFactor = Short.parseShort(config.get(DEFAULT_TOPIC_REPLICATION_FACTOR_PROP_NAME).value());\n \n             // Create topic\n             final NewTopic topic = new NewTopic(topicName, (short)1, replicationFactor);\n             topic.configs(Collect.hashMapOf(\"cleanup.policy\", \"delete\", \"retention.ms\", Long.toString(Long.MAX_VALUE)));\n             admin.createTopics(Collections.singleton(topic));\n             logger.info(\"Database history topic '{}' created\", topic);\n         } catch (Exception e) {\n-            logger.warn(\"Creation of database history topic failed, please create the topic manually\", e);\n+            throw new ConnectException(\"Creation of database history topic failed, please create the topic manually\", e);\n         }\n     }\n }",
      "parent_sha": "4541fc53c9b9250d2fdaa5fca61d443448c94152"
    }
  },
  {
    "oid": "ffa15b100fd1de1d1f939263f1cb3d232b393c71",
    "message": "DBZ-1666 Warn for drop slot on stop",
    "date": "2019-12-12T10:52:30Z",
    "url": "https://github.com/debezium/debezium/commit/ffa15b100fd1de1d1f939263f1cb3d232b393c71",
    "details": {
      "sha": "4dc1bdbe2c98b867348208827b6618afafb12860",
      "filename": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresTaskContext.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/debezium/debezium/blob/ffa15b100fd1de1d1f939263f1cb3d232b393c71/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresTaskContext.java",
      "raw_url": "https://github.com/debezium/debezium/raw/ffa15b100fd1de1d1f939263f1cb3d232b393c71/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresTaskContext.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresTaskContext.java?ref=ffa15b100fd1de1d1f939263f1cb3d232b393c71",
      "patch": "@@ -100,11 +100,17 @@ private SlotState getCurrentSlotState(PostgresConnection connection) throws SQLE\n     }\n \n     protected ReplicationConnection createReplicationConnection(boolean exportSnapshot) throws SQLException {\n+        final boolean dropSlotOnStop = config.dropSlotOnStop();\n+        if (dropSlotOnStop) {\n+            LOGGER.warn(\n+                    \"Connector has enabled automated replication slot removal upon restart ({} = true). This setting can lead to data loss in production environments!\",\n+                    PostgresConnectorConfig.DROP_SLOT_ON_STOP.name());\n+        }\n         return ReplicationConnection.builder(config.jdbcConfig())\n                 .withSlot(config.slotName())\n                 .withPublication(config.publicationName())\n                 .withPlugin(config.plugin())\n-                .dropSlotOnClose(config.dropSlotOnStop())\n+                .dropSlotOnClose(dropSlotOnStop)\n                 .streamParams(config.streamParams())\n                 .statusUpdateInterval(config.statusUpdateInterval())\n                 .withTypeRegistry(schema.getTypeRegistry())",
      "parent_sha": "0101e7d9084b204e053d40f588c30a8ec10e0329"
    }
  },
  {
    "oid": "20f6ecee2556854882a246bc6e1e2fb63f6b5cbe",
    "message": "DBZ-2132 Fixed formatting issues",
    "date": "2020-06-02T10:51:11Z",
    "url": "https://github.com/debezium/debezium/commit/20f6ecee2556854882a246bc6e1e2fb63f6b5cbe",
    "details": {
      "sha": "554c047b86446fad5559d11902a72e17ab55ffd1",
      "filename": "debezium-testing/debezium-testing-openshift/src/main/java/io/debezium/testing/openshift/tools/databases/DatabaseController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debezium/debezium/blob/20f6ecee2556854882a246bc6e1e2fb63f6b5cbe/debezium-testing%2Fdebezium-testing-openshift%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fopenshift%2Ftools%2Fdatabases%2FDatabaseController.java",
      "raw_url": "https://github.com/debezium/debezium/raw/20f6ecee2556854882a246bc6e1e2fb63f6b5cbe/debezium-testing%2Fdebezium-testing-openshift%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fopenshift%2Ftools%2Fdatabases%2FDatabaseController.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-testing%2Fdebezium-testing-openshift%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Ftesting%2Fopenshift%2Ftools%2Fdatabases%2FDatabaseController.java?ref=20f6ecee2556854882a246bc6e1e2fb63f6b5cbe",
      "patch": "@@ -54,7 +54,7 @@ public String getDatabaseUrl() {\n         Integer port = svc.getSpec().getPorts().stream().filter(p -> p.getName().equals(\"db\")).findAny().get().getPort();\n         return constructDatabaseUrl(hostname, port);\n     }\n-    \n+\n     public void reload() throws InterruptedException {\n         LOGGER.info(\"Recreating all pods of '\" + name + \"' deployment in namespace '\" + project + \"'\");\n         ocp.pods().inNamespace(project).withLabel(\"deployment\", name).delete();",
      "parent_sha": "6b5ac2494b4e91d2dcbe431086290dae9017270d"
    }
  },
  {
    "oid": "d886a565961775e0ff6c86a364bdcd676fe47947",
    "message": "DBZ-1643 Autoformat the code",
    "date": "2019-12-17T07:59:55Z",
    "url": "https://github.com/debezium/debezium/commit/d886a565961775e0ff6c86a364bdcd676fe47947",
    "details": {
      "sha": "b42f0de235ace6a7d855e84e1322ee19968b2fce",
      "filename": "debezium-connector-sqlserver/src/main/java/io/debezium/connector/sqlserver/SqlServerConnectorConfig.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debezium/debezium/blob/d886a565961775e0ff6c86a364bdcd676fe47947/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorConfig.java",
      "raw_url": "https://github.com/debezium/debezium/raw/d886a565961775e0ff6c86a364bdcd676fe47947/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorConfig.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-sqlserver%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fsqlserver%2FSqlServerConnectorConfig.java?ref=d886a565961775e0ff6c86a364bdcd676fe47947",
      "patch": "@@ -271,7 +271,8 @@ public static SnapshotIsolationMode parse(String value, String defaultValue) {\n                 if (value != null) {\n                     try {\n                         ZoneId.of(value, ZoneId.SHORT_IDS);\n-                    } catch (DateTimeException e) {\n+                    }\n+                    catch (DateTimeException e) {\n                         problems.accept(field, value, \"The value must be a valid ZoneId\");\n                         return 1;\n                     }",
      "parent_sha": "c8070d19b86d5654943fd2b49956ca9807f833fc"
    }
  },
  {
    "oid": "e722845717bd15061e903a3302ca26ee07492562",
    "message": "DBZ-1482 Don't initiate a transaction for every MariaDB GTID event.\n\nThere are use cases where MariaDB will send a GTID event to start a\ntransaction but that event will not conclude with a COMMIT and in\nthose cases, don't start a buffer transaction boundary.",
    "date": "2023-11-23T12:54:53Z",
    "url": "https://github.com/debezium/debezium/commit/e722845717bd15061e903a3302ca26ee07492562",
    "details": {
      "sha": "9df328841d58b714e15a0e16c060750d69fa5c72",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/EventBuffer.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/debezium/debezium/blob/e722845717bd15061e903a3302ca26ee07492562/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FEventBuffer.java",
      "raw_url": "https://github.com/debezium/debezium/raw/e722845717bd15061e903a3302ca26ee07492562/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FEventBuffer.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FEventBuffer.java?ref=e722845717bd15061e903a3302ca26ee07492562",
      "patch": "@@ -13,6 +13,7 @@\n \n import com.github.shyiko.mysql.binlog.event.Event;\n import com.github.shyiko.mysql.binlog.event.EventType;\n+import com.github.shyiko.mysql.binlog.event.MariadbGtidEventData;\n import com.github.shyiko.mysql.binlog.event.QueryEventData;\n \n import io.debezium.connector.mysql.MySqlStreamingChangeEventSource.BinlogPosition;\n@@ -107,8 +108,14 @@ else if (sql.equalsIgnoreCase(\"ROLLBACK\")) {\n             }\n         }\n         else if (event.getHeader().getEventType() == EventType.MARIADB_GTID) {\n-            // signals a new transaction for MariaDB, treat like QUERY events with BEGIN\n-            beginTransaction(partition, offsetContext, event);\n+            // When the GTID_EVENT has flag 1 set (meaning there is no following commit),\n+            // then we don't create a new transaction for this. This typically happens\n+            // for DDL operations which are always transaction scoped.\n+            MariadbGtidEventData gtidEventData = (MariadbGtidEventData) event.getData();\n+            if ((gtidEventData.getFlags() & 0x01) != 0x01) {\n+                // signals a new transaction for MariaDB, treat like QUERY events with BEGIN\n+                beginTransaction(partition, offsetContext, event);\n+            }\n         }\n         else if (event.getHeader().getEventType() == EventType.XID) {\n             completeTransaction(partition, offsetContext, true, event);",
      "parent_sha": "25a68ba3efc0223f872f3e3b84fbff8b618b5f09"
    }
  },
  {
    "oid": "b3877754483283755a77b4352ed53fd37f692dfe",
    "message": "DBZ-3655 Connection liveness check triggers replication earlier",
    "date": "2021-07-27T15:07:52Z",
    "url": "https://github.com/debezium/debezium/commit/b3877754483283755a77b4352ed53fd37f692dfe",
    "details": {
      "sha": "ed17a3336e2651adddd22665b4f0eea0804e2728",
      "filename": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debezium/debezium/blob/b3877754483283755a77b4352ed53fd37f692dfe/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/b3877754483283755a77b4352ed53fd37f692dfe/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java?ref=b3877754483283755a77b4352ed53fd37f692dfe",
      "patch": "@@ -1867,11 +1867,11 @@ public void shouldResumeStreamingFromSlotPositionForCustomSnapshotWal2Json() thr\n         waitForSnapshotToBeCompleted();\n \n         // Expect duplicate records from the snapshot and while streaming is running\n-        actualRecords = consumeRecordsByTopic(7);\n+        actualRecords = consumeRecordsByTopic(8);\n \n         s1recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n         s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n-        assertThat(s1recs.size()).isEqualTo(4);\n+        assertThat(s1recs.size()).isEqualTo(5);\n         assertThat(s2recs.size()).isEqualTo(3);\n \n         // Validate the first record is from streaming",
      "parent_sha": "f46e0ca9a659d17a34e37dba6dbcc7a05159d7e5"
    }
  },
  {
    "oid": "47c327398545890dce7a146389383904b2875a0c",
    "message": "DBZ-3892 Reuse precompiled pattern instance",
    "date": "2021-09-01T17:10:00Z",
    "url": "https://github.com/debezium/debezium/commit/47c327398545890dce7a146389383904b2875a0c",
    "details": {
      "sha": "e9685ea6db3c7b1bc1b361a6ed9604d4b5c312ab",
      "filename": "debezium-connector-oracle/src/main/java/io/debezium/connector/oracle/logminer/UnistrHelper.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debezium/debezium/blob/47c327398545890dce7a146389383904b2875a0c/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FUnistrHelper.java",
      "raw_url": "https://github.com/debezium/debezium/raw/47c327398545890dce7a146389383904b2875a0c/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FUnistrHelper.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-oracle%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Foracle%2Flogminer%2FUnistrHelper.java?ref=47c327398545890dce7a146389383904b2875a0c",
      "patch": "@@ -5,6 +5,8 @@\n  */\n package io.debezium.connector.oracle.logminer;\n \n+import java.util.regex.Pattern;\n+\n /**\n  * A utility/helper class to support decoding Oracle Unicode String function values, {@code UNISTR}.\n  *\n@@ -14,6 +16,7 @@ public class UnistrHelper {\n \n     private static final String UNITSTR_FUNCTION_START = \"UNISTR('\";\n     private static final String UNISTR_FUNCTION_END = \"')\";\n+    private static final Pattern CONCATENATION_PATTERN = Pattern.compile(\"\\\\|\\\\|\");\n \n     public static boolean isUnistrFunction(String data) {\n         return data != null && data.startsWith(UNITSTR_FUNCTION_START) && data.endsWith(UNISTR_FUNCTION_END);\n@@ -26,7 +29,7 @@ public static String convert(String data) {\n \n         // Multiple UNISTR function calls maybe concatenated together using \"||\".\n         // We split the values into their respective parts before parsing each one separately.\n-        final String[] parts = data.split(\"\\\\|\\\\|\");\n+        final String[] parts = CONCATENATION_PATTERN.split(data);\n \n         // Iterate each part and if the part is a UNISTR function call, decode it\n         // Append each part's value to the final result",
      "parent_sha": "8dc4a08c707f714c546d65cb1afc6d2abafac936"
    }
  },
  {
    "oid": "3527479cd8bebb3038783502dd5b2c00baa60be0",
    "message": "DBZ-5408 Make sure streaming is fully running before dropping connection",
    "date": "2022-07-14T15:10:22Z",
    "url": "https://github.com/debezium/debezium/commit/3527479cd8bebb3038783502dd5b2c00baa60be0",
    "details": {
      "sha": "6e44bbc539287442f1991376bccc6d9a2baf217e",
      "filename": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debezium/debezium/blob/3527479cd8bebb3038783502dd5b2c00baa60be0/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java",
      "raw_url": "https://github.com/debezium/debezium/raw/3527479cd8bebb3038783502dd5b2c00baa60be0/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-postgres%2Fsrc%2Ftest%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fpostgresql%2FPostgresConnectorIT.java?ref=3527479cd8bebb3038783502dd5b2c00baa60be0",
      "patch": "@@ -1022,10 +1022,14 @@ public void shouldRecoverFromRetriableException() throws Exception {\n \n         assertRecordsFromSnapshot(2, 1, 1);\n \n+        // DBZ-5408 make sure regular streaming is fully running\n+        TestHelper.execute(INSERT_STMT);\n+        assertRecordsAfterInsert(2, 2, 2);\n+\n         // kill all opened connections to the database\n         TestHelper.execute(\"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE backend_type='walsender'\");\n         TestHelper.execute(INSERT_STMT);\n-        assertRecordsAfterInsert(2, 2, 2);\n+        assertRecordsAfterInsert(2, 3, 3);\n     }\n \n     @Test",
      "parent_sha": "04941330c3e0141ab89589229fdaf7168f5db150"
    }
  },
  {
    "oid": "4df0d93b4d28673658fbf488a34039b384f1ee95",
    "message": "DBZ-2300 Make too many connections retriable",
    "date": "2021-05-13T12:07:38Z",
    "url": "https://github.com/debezium/debezium/commit/4df0d93b4d28673658fbf488a34039b384f1ee95",
    "details": {
      "sha": "425cb060de2c6791ec1556af6415a033832c030c",
      "filename": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlErrorHandler.java",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/debezium/debezium/blob/4df0d93b4d28673658fbf488a34039b384f1ee95/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlErrorHandler.java",
      "raw_url": "https://github.com/debezium/debezium/raw/4df0d93b4d28673658fbf488a34039b384f1ee95/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlErrorHandler.java",
      "contents_url": "https://api.github.com/repos/debezium/debezium/contents/debezium-connector-mysql%2Fsrc%2Fmain%2Fjava%2Fio%2Fdebezium%2Fconnector%2Fmysql%2FMySqlErrorHandler.java?ref=4df0d93b4d28673658fbf488a34039b384f1ee95",
      "patch": "@@ -5,22 +5,40 @@\n  */\n package io.debezium.connector.mysql;\n \n+import java.sql.SQLException;\n+\n+import com.github.shyiko.mysql.binlog.network.ServerException;\n+\n+import io.debezium.DebeziumException;\n import io.debezium.connector.base.ChangeEventQueue;\n import io.debezium.pipeline.ErrorHandler;\n \n /**\n- * Error handler for SQL Server.\n+ * Error handler for MySQL.\n  *\n- * @author Chris Cranford\n+ * @author Jiri Pechanec\n  */\n public class MySqlErrorHandler extends ErrorHandler {\n \n+    private static final String SQL_CODE_TOO_MANY_CONNECTIONS = \"08004\";\n+\n     public MySqlErrorHandler(String logicalName, ChangeEventQueue<?> queue) {\n         super(MySqlConnector.class, logicalName, queue);\n     }\n \n     @Override\n     protected boolean isRetriable(Throwable throwable) {\n+        if (throwable instanceof SQLException) {\n+            final SQLException sql = (SQLException) throwable;\n+            return SQL_CODE_TOO_MANY_CONNECTIONS.equals(sql.getSQLState());\n+        }\n+        else if (throwable instanceof ServerException) {\n+            final ServerException sql = (ServerException) throwable;\n+            return SQL_CODE_TOO_MANY_CONNECTIONS.equals(sql.getSqlState());\n+        }\n+        else if (throwable instanceof DebeziumException && throwable.getCause() != null) {\n+            return isRetriable(throwable.getCause());\n+        }\n         return false;\n     }\n }",
      "parent_sha": "95ed8149c148619bb056cf6678df4e2b0515b09d"
    }
  }
]