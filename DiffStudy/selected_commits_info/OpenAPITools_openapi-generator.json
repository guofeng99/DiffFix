[
  {
    "oid": "d2d5cf0d57bec4998d369578acfb205003078665",
    "message": "Add convention notes to Ruby CLI options",
    "date": "2015-06-16T04:17:11Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/d2d5cf0d57bec4998d369578acfb205003078665",
    "details": {
      "sha": "6ddd111f5ac7ee6e69f8d36b26978c2d85c54f32",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RubyClientCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/d2d5cf0d57bec4998d369578acfb205003078665/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FRubyClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/d2d5cf0d57bec4998d369578acfb205003078665/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FRubyClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FRubyClientCodegen.java?ref=d2d5cf0d57bec4998d369578acfb205003078665",
      "patch": "@@ -55,8 +55,8 @@ public RubyClientCodegen() {\n \n         // remove modelPackage and apiPackage added by default\n         cliOptions.clear();\n-        cliOptions.add(new CliOption(\"gemName\", \"gem name, default: swagger_client\"));\n-        cliOptions.add(new CliOption(\"moduleName\", \"top module name, usually corresponding to gem name, default: SwaggerClient\"));\n+        cliOptions.add(new CliOption(\"gemName\", \"gem name (convention: underscore_case), default: swagger_client\"));\n+        cliOptions.add(new CliOption(\"moduleName\", \"top module name (convention: CamelCase, usually corresponding to gem name), default: SwaggerClient\"));\n         cliOptions.add(new CliOption(\"gemVersion\", \"gem version, default: 1.0.0\"));\n     }\n ",
      "parent_sha": "6348f67b18cc41f5f19ec3cf7a2b6bd2d17aa3de"
    }
  },
  {
    "oid": "3266fbbf81cd3faf1730edbb84e8f7c5dff8840e",
    "message": "corrected JavaDos issues that were UNRELATED to this PR to get the CI server moving.",
    "date": "2015-12-27T00:18:14Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/3266fbbf81cd3faf1730edbb84e8f7c5dff8840e",
    "details": {
      "sha": "fb331918d87d0f5d87362a277c3606c6c81f0e18",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/3266fbbf81cd3faf1730edbb84e8f7c5dff8840e/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/3266fbbf81cd3faf1730edbb84e8f7c5dff8840e/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java?ref=3266fbbf81cd3faf1730edbb84e8f7c5dff8840e",
      "patch": "@@ -307,7 +307,7 @@ public String toVarName(String name) {\n      * Return the parameter name by removing invalid characters and proper escaping if\n      * it's a reserved word.\n      * \n-     * @param property Codegen property object\n+     * @param name Codegen property object\n      * @return the sanitized parameter name\n      */\n     public String toParamName(String name) {\n@@ -332,8 +332,9 @@ public String toEnumName(CodegenProperty property) {\n      * Return the escaped name of the reserved word\n      * \n      * @param name the name to be escaped\n-     * @throws Runtime exception as reserved word is not allowed (default behavior)\n      * @return the escaped reserved word\n+     *\n+     * throws Runtime exception as reserved word is not allowed (default behavior)\n      */\n     public String escapeReservedWord(String name) {\n         throw new RuntimeException(\"reserved word \" + name + \" not allowed\");\n@@ -369,9 +370,8 @@ public String toApiImport(String name) {\n      * between Swagger type and the corresponding import statement for the language. This will \n      * also add some language specified CLI options, if any.\n      *\n-     * @param path the path of the operation\n-     * @param operation Swagger operation object\n-     * @return string presentation of the example path\n+     *\n+     * returns string presentation of the example path (it's a constructor)\n      */\n     public DefaultCodegen() {\n         defaultIncludes = new HashSet<String>(\n@@ -1430,7 +1430,7 @@ public CodegenResponse fromResponse(String responseCode, Response response) {\n      * Convert Swagger Parameter object to Codegen Parameter object\n      *\n      * @param param Swagger parameter object\n-     * @param a set of imports for library/package/module\n+     * @param imports set of imports for library/package/module\n      * @return Codegen Parameter object\n      */\n     public CodegenParameter fromParameter(Parameter param, Set<String> imports) {\n@@ -2015,6 +2015,7 @@ public void setSkipOverwrite(boolean skipOverwrite) {\n     /**\n      * All library templates supported.\n      * (key: library name, value: library description)\n+     * @return the supported libraries\n      */\n     public Map<String, String> supportedLibraries() {\n         return supportedLibraries;",
      "parent_sha": "ef1222f2bf88ebd369312589489ef0e43b46fbab"
    }
  },
  {
    "oid": "f9ed8a9a084773d4bc29cf2623228c58ac8ef692",
    "message": "updated test to get expected value",
    "date": "2015-05-23T15:33:40Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/f9ed8a9a084773d4bc29cf2623228c58ac8ef692",
    "details": {
      "sha": "1bee31e074819c06bcb127c09ccfb555f5af560d",
      "filename": "samples/client/petstore/java/src/test/java/io/swagger/petstore/test/PetApiTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/f9ed8a9a084773d4bc29cf2623228c58ac8ef692/samples%2Fclient%2Fpetstore%2Fjava%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fpetstore%2Ftest%2FPetApiTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/f9ed8a9a084773d4bc29cf2623228c58ac8ef692/samples%2Fclient%2Fpetstore%2Fjava%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fpetstore%2Ftest%2FPetApiTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/samples%2Fclient%2Fpetstore%2Fjava%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fpetstore%2Ftest%2FPetApiTest.java?ref=f9ed8a9a084773d4bc29cf2623228c58ac8ef692",
      "patch": "@@ -104,7 +104,7 @@ public void testUpdatePetWithForm() throws Exception {\n     api.updatePetWithForm(String.valueOf(fetched.getId()), \"furt\", null);\n     Pet updated = api.getPetById(fetched.getId());\n \n-    assertEquals(updated.getName(), fetched.getName());\n+    assertEquals(updated.getName(), \"furt\");\n   }\n \n   @Test",
      "parent_sha": "3638d792912ba73903325d933d887f626f1d6e67"
    }
  },
  {
    "oid": "dbecb9e562cd489c98e2fc223a4a6902181568a5",
    "message": "Added ability to set a configuration file for custom code generators. This should work the same as when you're using one of the built-in generators.",
    "date": "2015-09-28T16:50:08Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/dbecb9e562cd489c98e2fc223a4a6902181568a5",
    "details": {
      "sha": "3b4ffecfe38f0664d55285a7bbbe57e0c940d739",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/Codegen.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/dbecb9e562cd489c98e2fc223a4a6902181568a5/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/dbecb9e562cd489c98e2fc223a4a6902181568a5/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FCodegen.java?ref=dbecb9e562cd489c98e2fc223a4a6902181568a5",
      "patch": "@@ -1,5 +1,7 @@\n package io.swagger.codegen;\n \n+import config.Config;\n+import config.ConfigParser;\n import io.swagger.models.Swagger;\n import io.swagger.parser.SwaggerParser;\n import org.apache.commons.cli.BasicParser;\n@@ -9,6 +11,7 @@\n import org.apache.commons.cli.Options;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n@@ -41,6 +44,7 @@ public static void main(String[] args) {\n         options.addOption(\"t\", \"template-dir\", true, \"folder containing the template files\");\n         options.addOption(\"d\", \"debug-info\", false, \"prints additional info for debugging\");\n         options.addOption(\"a\", \"auth\", true, \"adds authorization headers when fetching the swagger definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values\");\n+        options.addOption(\"c\", \"config\", true, \"location of the configuration file\");\n \n         ClientOptInput clientOptInput = new ClientOptInput();\n         ClientOpts clientOpts = new ClientOpts();\n@@ -84,6 +88,18 @@ public static void main(String[] args) {\n             if (cmd.hasOption(\"i\")) {\n                 swagger = new SwaggerParser().read(cmd.getOptionValue(\"i\"), clientOptInput.getAuthorizationValues(), true);\n             }\n+            if (cmd.hasOption(\"c\")) {\n+                String configFile = cmd.getOptionValue(\"c\");\n+                Config genConfig = ConfigParser.read(configFile);\n+                config = clientOptInput.getConfig();\n+                if (null != genConfig && null != config) {\n+                    for (CliOption langCliOption : config.cliOptions()) {\n+                        if (genConfig.hasOption(langCliOption.getOpt())) {\n+                            config.additionalProperties().put(langCliOption.getOpt(), genConfig.getOption(langCliOption.getOpt()));\n+                        }\n+                    }\n+                }\n+            }\n             if (cmd.hasOption(\"t\")) {\n                 clientOpts.getProperties().put(\"templateDir\", String.valueOf(cmd.getOptionValue(\"t\")));\n             }\n@@ -145,4 +161,4 @@ public static CodegenConfig getConfig(String name) {\n             configString = sb.toString();\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "47abfe7079f59f90808f901adaf18504ae8609f2"
    }
  },
  {
    "oid": "b5fe7d02b060853046da044d4952f849a85759f4",
    "message": "[csharp-netcore] Fix keys of the enum reference map (#13242)",
    "date": "2022-08-23T17:46:30Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/b5fe7d02b060853046da044d4952f849a85759f4",
    "details": {
      "sha": "a9c7381ec4b6aacca584358e58430f59f9702b2f",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractCSharpCodegen.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/b5fe7d02b060853046da044d4952f849a85759f4/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/b5fe7d02b060853046da044d4952f849a85759f4/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java?ref=b5fe7d02b060853046da044d4952f849a85759f4",
      "patch": "@@ -292,7 +292,7 @@ public void processOpts() {\n         // {{sourceFolder}}\n         if (additionalProperties.containsKey(CodegenConstants.SOURCE_FOLDER)) {\n             setSourceFolder((String) additionalProperties.get(CodegenConstants.SOURCE_FOLDER));\n-            \n+\n             // TODO: Move to its own option when a parameter for 'testFolder' is added.\n             setTestFolder((String) additionalProperties.get(CodegenConstants.SOURCE_FOLDER));\n         } else {\n@@ -472,7 +472,7 @@ protected List<Map<String, Object>> buildEnumVars(List<Object> values, String da\n         if (\"string?\".equals(dataType)){\n             enumVars.forEach((enumVar) -> {\n                 enumVar.put(\"isString\", true);\n-            }); \n+            });\n         }\n \n         return enumVars;\n@@ -493,7 +493,7 @@ private void postProcessEnumRefs(final Map<String, ModelsMap> models) {\n         for (Map.Entry<String, ModelsMap> entry : models.entrySet()) {\n             CodegenModel model = ModelUtils.getModelByName(entry.getKey(), models);\n             if (model.isEnum) {\n-                enumRefs.put(entry.getKey(), model);\n+                enumRefs.put(model.getClassname(), model);\n             }\n         }\n \n@@ -1172,7 +1172,7 @@ public void setPackageAuthors(String packageAuthors) {\n     public void setSourceFolder(String sourceFolder) {\n         this.sourceFolder = sourceFolder;\n     }\n-    \n+\n     public void setTestFolder(String testFolder) {\n         this.testFolder = testFolder;\n     }",
      "parent_sha": "9afcbabcd8f840a138bc5c8834d0d7e13dbe6e5a"
    }
  },
  {
    "oid": "58f00efcc3c8763540c8afa241e29386687041ea",
    "message": "sample update",
    "date": "2016-08-09T13:09:48Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/58f00efcc3c8763540c8afa241e29386687041ea",
    "details": {
      "sha": "b58449c7c1e2f4c2f26f16a8f554417aa050e333",
      "filename": "samples/client/petstore/java/jersey1/src/main/java/io/swagger/client/ApiClient.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/58f00efcc3c8763540c8afa241e29386687041ea/samples%2Fclient%2Fpetstore%2Fjava%2Fjersey1%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fclient%2FApiClient.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/58f00efcc3c8763540c8afa241e29386687041ea/samples%2Fclient%2Fpetstore%2Fjava%2Fjersey1%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fclient%2FApiClient.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/samples%2Fclient%2Fpetstore%2Fjava%2Fjersey1%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fclient%2FApiClient.java?ref=58f00efcc3c8763540c8afa241e29386687041ea",
      "patch": "@@ -509,9 +509,16 @@ public Object serialize(Object obj, String contentType, Map<String, Object> form\n     if (contentType.startsWith(\"multipart/form-data\")) {\n       FormDataMultiPart mp = new FormDataMultiPart();\n       for (Entry<String, Object> param: formParams.entrySet()) {\n-        if (param.getValue() instanceof File) {\n+        if( param.getValue() instanceof List && !( ( List ) param.getValue() ).isEmpty()\n+          && ( ( List ) param.getValue() ).get( 0 ) instanceof File ) {\n+          @SuppressWarnings( \"unchecked\" )\n+          List<File> files = ( List<File> ) param.getValue();\n+          for( File file : files ) {\n+            mp.bodyPart( new FileDataBodyPart( param.getKey(), file, MediaType.APPLICATION_OCTET_STREAM_TYPE ) );\n+          }\n+        } else if (param.getValue() instanceof File) {\n           File file = (File) param.getValue();\n-          mp.bodyPart(new FileDataBodyPart(param.getKey(), file, MediaType.MULTIPART_FORM_DATA_TYPE));\n+          mp.bodyPart(new FileDataBodyPart(param.getKey(), file, MediaType.APPLICATION_OCTET_STREAM_TYPE));\n         } else {\n           mp.field(param.getKey(), parameterToString(param.getValue()), MediaType.MULTIPART_FORM_DATA_TYPE);\n         }",
      "parent_sha": "03986761dc0e03ecab193a3e67189d78d365b956"
    }
  },
  {
    "oid": "16f9c8f7ddf1e7280bb28cb60352f566fdd740e2",
    "message": "Changing to INFO level in order for the following switches to work as\nexpected:\n-DdebugModels\n-DdebugOperations\n-DdebugSupportingFiles",
    "date": "2016-01-27T16:13:00Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/16f9c8f7ddf1e7280bb28cb60352f566fdd740e2",
    "details": {
      "sha": "6da8958fe13f22c1b15014aed3234fc57b00472f",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/16f9c8f7ddf1e7280bb28cb60352f566fdd740e2/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/16f9c8f7ddf1e7280bb28cb60352f566fdd740e2/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=16f9c8f7ddf1e7280bb28cb60352f566fdd740e2",
      "patch": "@@ -240,7 +240,7 @@ public Reader getTemplate(String name) {\n             }\n         }\n         if (System.getProperty(\"debugModels\") != null) {\n-            LOGGER.debug(\"############ Model info ############\");\n+            LOGGER.info(\"############ Model info ############\");\n             Json.prettyPrint(allModels);\n         }\n \n@@ -340,7 +340,7 @@ public Reader getTemplate(String name) {\n             }\n         }\n         if (System.getProperty(\"debugOperations\") != null) {\n-            LOGGER.debug(\"############ Operation info ############\");\n+            LOGGER.info(\"############ Operation info ############\");\n             Json.prettyPrint(allOperations);\n         }\n \n@@ -379,7 +379,7 @@ public Reader getTemplate(String name) {\n         config.postProcessSupportingFileData(bundle);\n \n         if (System.getProperty(\"debugSupportingFiles\") != null) {\n-            LOGGER.debug(\"############ Supporting file info ############\");\n+            LOGGER.info(\"############ Supporting file info ############\");\n             Json.prettyPrint(bundle);\n         }\n \n@@ -552,7 +552,8 @@ public SecuritySchemeDefinition fromSecurity(String name) {\n     public void processOperation(String resourcePath, String httpMethod, Operation operation, Map<String, List<CodegenOperation>> operations, Path path) {\n         if (operation != null) {\n             if (System.getProperty(\"debugOperations\") != null) {\n-                LOGGER.debug(\"processOperation: resourcePath= \" + resourcePath + \"\\t;\" + httpMethod + \" \" + operation + \"\\n\");\n+                LOGGER.info(\"processOperation: resourcePath= \" + resourcePath + \"\\t;\" + httpMethod + \" \" + operation\n+                        + \"\\n\");\n             }\n             List<String> tags = operation.getTags();\n             if (tags == null) {",
      "parent_sha": "8c3bd60a53042d8804bc82f8dc11c208fc642047"
    }
  },
  {
    "oid": "76e8e81668c0b762cfccf431d9902cfe9bd466e2",
    "message": "[core] Add back functionality to debug openapi spec, accidentally removed in 4.1.2 (#5147)",
    "date": "2020-01-29T13:30:20Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/76e8e81668c0b762cfccf431d9902cfe9bd466e2",
    "details": {
      "sha": "2debd1ba7fa1573cd1ea674ee5239f3e3ebc51a3",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/76e8e81668c0b762cfccf431d9902cfe9bd466e2/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/76e8e81668c0b762cfccf431d9902cfe9bd466e2/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultGenerator.java?ref=76e8e81668c0b762cfccf431d9902cfe9bd466e2",
      "patch": "@@ -186,12 +186,12 @@ private void configureGeneratorProperties() {\n         }\n \n         if (GlobalSettings.getProperty(\"debugOpenAPI\") != null) {\n-            SerializerUtils.toJsonString(openAPI);\n+            System.out.println(SerializerUtils.toJsonString(openAPI));\n         } else if (GlobalSettings.getProperty(\"debugSwagger\") != null) {\n             // This exists for backward compatibility\n             // We fall to this block only if debugOpenAPI is null. No need to dump this twice.\n             LOGGER.info(\"Please use system property 'debugOpenAPI' instead of 'debugSwagger'.\");\n-            SerializerUtils.toJsonString(openAPI);\n+            System.out.println(SerializerUtils.toJsonString(openAPI));\n         }\n \n         config.processOpts();",
      "parent_sha": "6cf58afdc5592198db28d1342be399e7130f31f7"
    }
  },
  {
    "oid": "e8bdf71ffcc4631c82cded65425d5662d62d5057",
    "message": "Added not null check in code generator. (#6079)\n\n* Added not null check in code generator.\r\n\r\n* Replaced tabs with whitespaces.",
    "date": "2017-07-17T07:10:43Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/e8bdf71ffcc4631c82cded65425d5662d62d5057",
    "details": {
      "sha": "92f1a483c0f442c22ddb416422d62e774a84f352",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/e8bdf71ffcc4631c82cded65425d5662d62d5057/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/e8bdf71ffcc4631c82cded65425d5662d62d5057/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java?ref=e8bdf71ffcc4631c82cded65425d5662d62d5057",
      "patch": "@@ -2578,7 +2578,9 @@ public CodegenParameter fromParameter(Parameter param, Set<String> imports) {\n                 // recursively add import\n                 CodegenProperty innerCp = cp;\n                 while(innerCp != null) {\n-                    imports.add(innerCp.complexType);\n+                    if(innerCp.complexType != null) {\n+                        imports.add(innerCp.complexType);\n+                    }\n                     innerCp = innerCp.items;\n                 }\n ",
      "parent_sha": "d24895f4bce29cff86bc38e684f7ae1512a67889"
    }
  },
  {
    "oid": "51887c64b518f60c0568e8b07340904830ee44be",
    "message": "Updated python codegen.\n\nUse File.separatorChar to create invokerPacakge variable instread of '\\'\nchar.",
    "date": "2015-06-05T08:17:29Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/51887c64b518f60c0568e8b07340904830ee44be",
    "details": {
      "sha": "44dfaeefcd434aadc57603db4f95504b9871d368",
      "filename": "modules/swagger-codegen/src/main/java/com/wordnik/swagger/codegen/languages/PythonClientCodegen.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/51887c64b518f60c0568e8b07340904830ee44be/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/51887c64b518f60c0568e8b07340904830ee44be/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java?ref=51887c64b518f60c0568e8b07340904830ee44be",
      "patch": "@@ -27,7 +27,9 @@ public PythonClientCodegen() {\n     super();\r\n \r\n     eggPackage = module + \"-python\";\r\n-    invokerPackage = eggPackage + \"/\" + module;\r\n+    \r\n+    invokerPackage = eggPackage + \".\" + module;\r\n+    invokerPackage = invokerPackage.replace('.', File.separatorChar);\r\n \r\n     outputFolder = \"generated-code/python\";\r\n     modelTemplateFiles.put(\"model.mustache\", \".py\");\r",
      "parent_sha": "654a73c5a8163080cb760fc3d8af5964b0d94cc5"
    }
  },
  {
    "oid": "1339222bbcbfc0a10c75e910e92557143cbc5464",
    "message": "[Java][Issue #1806] generate using java.util.UUID for UUIDs\n\nBefore this change if a model had a property of type=string and\nformat=uuid, it would be generated as a Java String.\nNow, it generates the property as java.util.UUID.",
    "date": "2017-02-07T11:38:20Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/1339222bbcbfc0a10c75e910e92557143cbc5464",
    "details": {
      "sha": "8f97b524d7bfedb920130a485e80a6687fd355d3",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/AbstractJavaCodegen.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/1339222bbcbfc0a10c75e910e92557143cbc5464/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractJavaCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/1339222bbcbfc0a10c75e910e92557143cbc5464/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractJavaCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractJavaCodegen.java?ref=1339222bbcbfc0a10c75e910e92557143cbc5464",
      "patch": "@@ -120,7 +120,6 @@ public AbstractJavaCodegen() {\n         instantiationTypes.put(\"map\", \"HashMap\");\n         typeMapping.put(\"date\", \"Date\");\n         typeMapping.put(\"file\", \"File\");\n-        typeMapping.put(\"UUID\", \"String\");\n \n         cliOptions.add(new CliOption(CodegenConstants.MODEL_PACKAGE, CodegenConstants.MODEL_PACKAGE_DESC));\n         cliOptions.add(new CliOption(CodegenConstants.API_PACKAGE, CodegenConstants.API_PACKAGE_DESC));\n@@ -400,7 +399,7 @@ private void sanitizeConfig() {\n     }\n \n     @Override\n-    public String escapeReservedWord(String name) {           \n+    public String escapeReservedWord(String name) {\n         if(this.reservedWordsMappings().containsKey(name)) {\n             return this.reservedWordsMappings().get(name);\n         }\n@@ -1126,7 +1125,7 @@ public void setSupportJava6(boolean value) {\n     public String toRegularExpression(String pattern) {\n         return escapeText(pattern);\n     }\n-    \n+\n     public boolean convertPropertyToBoolean(String propertyKey) {\n         boolean booleanValue = false;\n         if (additionalProperties.containsKey(propertyKey)) {\n@@ -1135,14 +1134,14 @@ public boolean convertPropertyToBoolean(String propertyKey) {\n \n        return booleanValue;\n     }\n-    \n+\n     public void writePropertyBack(String propertyKey, boolean value) {\n         additionalProperties.put(propertyKey, value);\n     }\n \n     @Override\n     public String sanitizeTag(String tag) {\n         return camelize(sanitizeName(tag));\n-    } \n+    }\n \n }",
      "parent_sha": "a123dd7ef1866c3036ce18bdcc7fb8438dd2eed2"
    }
  },
  {
    "oid": "051abb82dc11fa793f1c7cb58a13bf42e2f6de86",
    "message": "Bugfix/activate helidon versionutil tests (#18815)\n\n* Reactivate tests\r\n\r\nContrary to Junit5, classes containing TestNG tests need to have\r\npublic visibility, otherwise the tests will not be discovered and run.\r\n\r\n* Reformat tests for readability\r\n\r\n* Rewrite tests using fluent assertions",
    "date": "2024-06-02T13:42:02Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/051abb82dc11fa793f1c7cb58a13bf42e2f6de86",
    "details": {
      "sha": "09f1dabd862447da7309899d40ea4cadfe2b7fd4",
      "filename": "modules/openapi-generator/src/test/java/org/openapitools/codegen/languages/HelidonCommonCodegenTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 23,
      "changes": 35,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/051abb82dc11fa793f1c7cb58a13bf42e2f6de86/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FHelidonCommonCodegenTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/051abb82dc11fa793f1c7cb58a13bf42e2f6de86/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FHelidonCommonCodegenTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FHelidonCommonCodegenTest.java?ref=051abb82dc11fa793f1c7cb58a13bf42e2f6de86",
      "patch": "@@ -16,37 +16,26 @@\n  */\n package org.openapitools.codegen.languages;\n \n+import org.testng.annotations.Test;\n+\n import java.util.List;\n \n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n // This test class is in this package, not org.openapitools.codegen.java.helidon, so it can refer to elements of\n // JavaHelidonCommonCodegen without making them public; package-private is sufficient and we don't want to expose those methods\n // more broadly.\n-class HelidonCommonCodegenTest {\n+public class HelidonCommonCodegenTest {\n \n-    @Test\n-    void checkMajorVersionMatch() {\n-        Assert.assertEquals(\"1.2.3\",\n-                            JavaHelidonCommonCodegen.VersionUtil.instance().chooseVersion(\"1\",\n-                                                                                          List.of(\"3.2.1\",\n-                                                                                                  \"3.2.0\",\n-                                                                                                  \"2.0.4\",\n-                                                                                                  \"1.2.3\",\n-                                                                                                  \"1.2.2\",\n-                                                                                                  \"1.1.0\")));\n+    JavaHelidonCommonCodegen.VersionUtil test = JavaHelidonCommonCodegen.VersionUtil.instance();\n+    \n+    @Test void checkMajorVersionMatch() {\n+        assertThat(test.chooseVersion(\"1\", List.of(\"3.2.1\", \"3.2.0\", \"2.0.4\", \"1.2.3\", \"1.2.2\", \"1.1.0\")))\n+            .isEqualTo(\"1.2.3\");\n     }\n \n-    @Test\n-    void checkExactMatch() {\n-        Assert.assertEquals(\"1.2.2\",\n-                            JavaHelidonCommonCodegen.VersionUtil.instance().chooseVersion(\"1.2.2\",\n-                                                                                          List.of(\"3.2.1\",\n-                                                                                                  \"3.2.0\",\n-                                                                                                  \"2.0.4\",\n-                                                                                                  \"1.2.3\",\n-                                                                                                  \"1.2.2\",\n-                                                                                                  \"1.1.0\")));\n+    @Test void checkExactMatch() {\n+        assertThat(test.chooseVersion(\"1.2.2\", List.of(\"3.2.1\", \"3.2.0\", \"2.0.4\", \"1.2.3\", \"1.2.2\", \"1.1.0\")))\n+            .isEqualTo(\"1.2.2\");\n     }\n }",
      "parent_sha": "713aa92b22d10515b73501142ebeacaeef090b71"
    }
  },
  {
    "oid": "4477009ef80df7f8a10c29b16a358c99b3d66aae",
    "message": "Handle special characters in parameter names in ruby client",
    "date": "2015-08-29T08:19:43Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/4477009ef80df7f8a10c29b16a358c99b3d66aae",
    "details": {
      "sha": "59b62b0be6adddfa85011addb3369ac185bf6c9a",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/RubyClientCodegen.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/4477009ef80df7f8a10c29b16a358c99b3d66aae/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FRubyClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/4477009ef80df7f8a10c29b16a358c99b3d66aae/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FRubyClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FRubyClientCodegen.java?ref=4477009ef80df7f8a10c29b16a358c99b3d66aae",
      "patch": "@@ -196,8 +196,10 @@ public String toDefaultValue(Property p) {\n \n     @Override\n     public String toVarName(String name) {\n-        // replace - with _ e.g. created-at => created_at\n-        name = name.replaceAll(\"-\", \"_\");\n+        // remove trailing special characters, e.g. \"post[created-at]!!\" => \"post[created-at\"\n+        name = name.replaceAll(\"\\\\W+\\\\z\", \"\");\n+        // replace special characters with _, e.g. \"post[created-at\" => \"post_created_at\"\n+        name = name.replaceAll(\"\\\\W+\", \"_\");\n \n         // if it's all uppper case, convert to lower case\n         if (name.matches(\"^[A-Z_]*$\")) {",
      "parent_sha": "6d58d44542e883a84f1d1b117020297c424a733c"
    }
  },
  {
    "oid": "2979d938292fb5add41b98f520f05778755a713b",
    "message": "use replace instead of replaceAll",
    "date": "2015-06-23T13:47:10Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/2979d938292fb5add41b98f520f05778755a713b",
    "details": {
      "sha": "57fb52137e1454b65fd18f98260b51895671b9f6",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/PhpClientCodegen.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/2979d938292fb5add41b98f520f05778755a713b/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPhpClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/2979d938292fb5add41b98f520f05778755a713b/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPhpClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPhpClientCodegen.java?ref=2979d938292fb5add41b98f520f05778755a713b",
      "patch": "@@ -101,11 +101,12 @@ public String toPackagePath(String packageName, String basePath) {\n \n         return (getPackagePath() + File.separatorChar + basePath\n                     // Replace period, backslash, forward slash with file separator in package name\n-                    + packageName.replaceAll(\"[\\\\.\\\\\\\\/]\", File.separator)\n+                    + packageName.replace(\"\\\\\", File.separator).\n+                    replace(\".\", File.separator).replace(\"/\", File.separator)\n                     // Trim prefix file separators from package path\n                     .replaceAll(\"^\" + File.separator, \"\"))\n-                // Trim trailing file separators from the overall path\n-                .replaceAll(File.separator + \"$\", \"\");\n+                    // Trim trailing file separators from the overall path\n+                    .replaceAll(File.separator + \"$\", \"\");\n     }\n \n     public CodegenType getTag() {",
      "parent_sha": "550493ba848a9de97a55ac093522f1d3929a686a"
    }
  },
  {
    "oid": "5744bb405388943766b52a0b025c2ded129abec0",
    "message": "fix npe in empty operation scopes\n\nFix #1322",
    "date": "2015-10-01T15:35:07Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/5744bb405388943766b52a0b025c2ded129abec0",
    "details": {
      "sha": "990a7ffa00776551312a347ae54502a6f584a363",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/5744bb405388943766b52a0b025c2ded129abec0/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/5744bb405388943766b52a0b025c2ded129abec0/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=5744bb405388943766b52a0b025c2ded129abec0",
      "patch": "@@ -489,21 +489,22 @@ public void processOperation(String resourcePath, String httpMethod, Operation o\n                         SecuritySchemeDefinition securityDefinition = fromSecurity(securityName);\n                         if (securityDefinition != null) {\n                         \tif(securityDefinition instanceof OAuth2Definition) {\n-                        \t\tOAuth2Definition oauth2Definition = (OAuth2Definition) securityDefinition;\n-                        \t\tOAuth2Definition oauth2Operation = new OAuth2Definition();\n-                        \t\toauth2Operation.setType(oauth2Definition.getType());\n-                        \t\toauth2Operation.setAuthorizationUrl(oauth2Definition.getAuthorizationUrl());\n-                        \t\toauth2Operation.setFlow(oauth2Definition.getFlow());\n-                        \t\toauth2Operation.setTokenUrl(oauth2Definition.getTokenUrl());\n-                        \t\tfor (String scope : security.values().iterator().next()) {\n-                        \t\t\tif (oauth2Definition.getScopes().containsKey(scope)) {\n-                        \t\t\t\toauth2Operation.addScope(scope, oauth2Definition.getScopes().get(scope));\n-                        \t\t\t}\n-                        \t\t}\n-                        \t\tauthMethods.put(securityName, oauth2Operation);\n-                        \t} else {\n-                        \t\tauthMethods.put(securityName, securityDefinition);\n-                        \t}\n+                        \t    OAuth2Definition oauth2Definition = (OAuth2Definition) securityDefinition;\n+                                OAuth2Definition oauth2Operation = new OAuth2Definition();\n+                                oauth2Operation.setType(oauth2Definition.getType());\n+                                oauth2Operation.setAuthorizationUrl(oauth2Definition.getAuthorizationUrl());\n+                                oauth2Operation.setFlow(oauth2Definition.getFlow());\n+                                oauth2Operation.setTokenUrl(oauth2Definition.getTokenUrl());\n+                                oauth2Operation.setScopes(new HashMap<String, String>());\n+                                for (String scope : security.values().iterator().next()) {\n+                                    if (oauth2Definition.getScopes().containsKey(scope)) {\n+                                        oauth2Operation.addScope(scope, oauth2Definition.getScopes().get(scope));\n+                                    }\n+                                }\n+                                authMethods.put(securityName, oauth2Operation);\n+                            } else {\n+                                authMethods.put(securityName, securityDefinition);\n+                            }\n                         }\n                     }\n                     if (!authMethods.isEmpty()) {",
      "parent_sha": "053af7a7498c6f9e676718224cce4266b6920551"
    }
  },
  {
    "oid": "ad589c770098a4aebfbd23b9a390d751f7f7d4c4",
    "message": "better null check for schema types (#16564)",
    "date": "2023-09-12T06:58:05Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/ad589c770098a4aebfbd23b9a390d751f7f7d4c4",
    "details": {
      "sha": "ebe004e8fe58dc29baff36786c3098735645d907",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/OpenAPINormalizer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/ad589c770098a4aebfbd23b9a390d751f7f7d4c4/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FOpenAPINormalizer.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/ad589c770098a4aebfbd23b9a390d751f7f7d4c4/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FOpenAPINormalizer.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FOpenAPINormalizer.java?ref=ad589c770098a4aebfbd23b9a390d751f7f7d4c4",
      "patch": "@@ -153,7 +153,7 @@ public void processRules(Map<String, String> inputRules) {\n \n         // loop through all the rules\n         for (Map.Entry<String, String> rule : inputRules.entrySet()) {\n-            LOGGER.info(\"processing rule {} => {}\", rule.getKey(), rule.getValue());\n+            LOGGER.debug(\"processing rule {} => {}\", rule.getKey(), rule.getValue());\n             if (!ruleNames.contains(rule.getKey())) { // invalid rule name\n                 LOGGER.warn(\"Invalid openapi-normalizer rule name: \", rule.getKey());\n             } else if (enableAll) {\n@@ -882,6 +882,11 @@ private Schema processNormalize31Spec(Schema schema, Set<Schema> visitedSchemas)\n         if (!getRule(NORMALIZE_31SPEC)) {\n             return schema;\n         }\n+\n+        if (schema == null || schema.getTypes() == null) {\n+            return null;\n+        }\n+\n         // process null\n         if (schema.getTypes().contains(\"null\")) {\n             schema.setNullable(true);",
      "parent_sha": "cd0fde41f12615010999147fc99b98c1f5a62f52"
    }
  },
  {
    "oid": "aa1cfd81fe025acc02680754b442d63a00ce3679",
    "message": "Minor fixes for InlineModelResolver (#1756)\n\n* Delete unused methods\r\n\r\n* Improve access modifiers declaration\r\n\r\n* InlineModelResolver#flatten can be package-private\r\n\r\n* Delete unused import declaration\r\n\r\n* Sort properties",
    "date": "2018-12-26T02:53:39Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/aa1cfd81fe025acc02680754b442d63a00ce3679",
    "details": {
      "sha": "fa0f7de00ce8575d4ee8f9a1049592de67d5c3e0",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/InlineModelResolver.java",
      "status": "modified",
      "additions": 10,
      "deletions": 60,
      "changes": 70,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/aa1cfd81fe025acc02680754b442d63a00ce3679/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/aa1cfd81fe025acc02680754b442d63a00ce3679/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java?ref=aa1cfd81fe025acc02680754b442d63a00ce3679",
      "patch": "@@ -27,7 +27,6 @@\n import io.swagger.v3.oas.models.PathItem;\n import io.swagger.v3.oas.models.parameters.Parameter;\n import io.swagger.v3.oas.models.parameters.RequestBody;\n-import io.swagger.v3.oas.models.Paths;\n import io.swagger.v3.core.util.Json;\n import org.openapitools.codegen.utils.ModelUtils;\n import org.slf4j.Logger;\n@@ -42,12 +41,11 @@\n \n public class InlineModelResolver {\n     private OpenAPI openapi;\n-    private boolean skipMatches;\n+    private Map<String, Schema> addedModels = new HashMap<String, Schema>();\n+    private Map<String, String> generatedSignature = new HashMap<String, String>();\n     static Logger LOGGER = LoggerFactory.getLogger(InlineModelResolver.class);\n-    Map<String, Schema> addedModels = new HashMap<String, Schema>();\n-    Map<String, String> generatedSignature = new HashMap<String, String>();\n \n-    public void flatten(OpenAPI openapi) {\n+    void flatten(OpenAPI openapi) {\n         this.openapi = openapi;\n \n         if (openapi.getComponents() == null) {\n@@ -341,22 +339,19 @@ private String resolveModelName(String title, String key) {\n         }\n     }\n \n-    public String matchGenerated(Schema model) {\n-        if (this.skipMatches) {\n-            return null;\n-        }\n+    private String matchGenerated(Schema model) {\n         String json = Json.pretty(model);\n         if (generatedSignature.containsKey(json)) {\n             return generatedSignature.get(json);\n         }\n         return null;\n     }\n \n-    public void addGenerated(String name, Schema model) {\n+    private void addGenerated(String name, Schema model) {\n         generatedSignature.put(Json.pretty(model), name);\n     }\n \n-    public String uniqueName(String key) {\n+    private String uniqueName(String key) {\n         if (key == null) {\n             key = \"NULL_UNIQUE_NAME\";\n             LOGGER.warn(\"null key found. Default to NULL_UNIQUE_NAME\");\n@@ -380,7 +375,7 @@ public String uniqueName(String key) {\n         return key;\n     }\n \n-    public void flattenProperties(Map<String, Schema> properties, String path) {\n+    private void flattenProperties(Map<String, Schema> properties, String path) {\n         if (properties == null) {\n             return;\n         }\n@@ -465,28 +460,7 @@ public void flattenProperties(Map<String, Schema> properties, String path) {\n         }\n     }\n \n-    @SuppressWarnings(\"static-method\")\n-    public Schema modelFromProperty(ArraySchema object, @SuppressWarnings(\"unused\") String path) {\n-        String description = object.getDescription();\n-        String example = null;\n-        Object obj = object.getExample();\n-\n-        if (obj != null) {\n-            example = obj.toString();\n-        }\n-        Schema inner = object.getItems();\n-        if (inner instanceof ObjectSchema) {\n-            ArraySchema model = new ArraySchema();\n-            model.setDescription(description);\n-            model.setExample(example);\n-            model.setItems(object.getItems());\n-            model.setName(object.getName());\n-            return model;\n-        }\n-        return null;\n-    }\n-\n-    public Schema modelFromProperty(ObjectSchema object, String path) {\n+    private Schema modelFromProperty(ObjectSchema object, String path) {\n         String description = object.getDescription();\n         String example = null;\n         Object obj = object.getExample();\n@@ -508,30 +482,14 @@ public Schema modelFromProperty(ObjectSchema object, String path) {\n         return model;\n     }\n \n-    @SuppressWarnings(\"static-method\")\n-    public Schema modelFromProperty(MapSchema object, @SuppressWarnings(\"unused\") String path) {\n-        String description = object.getDescription();\n-        String example = null;\n-        Object obj = object.getExample();\n-        if (obj != null) {\n-            example = obj.toString();\n-        }\n-        ArraySchema model = new ArraySchema();\n-        model.setDescription(description);\n-        model.setName(object.getName());\n-        model.setExample(example);\n-        model.setItems(ModelUtils.getAdditionalProperties(object));\n-        return model;\n-    }\n-\n     /**\n      * Make a Schema\n      *\n      * @param ref      new property name\n      * @param property Schema\n      * @return {@link Schema} A constructed OpenAPI property\n      */\n-    public Schema makeSchema(String ref, Schema property) {\n+    private Schema makeSchema(String ref, Schema property) {\n         Schema newProperty = new Schema().$ref(ref);\n         this.copyVendorExtensions(property, newProperty);\n         return newProperty;\n@@ -544,7 +502,7 @@ public Schema makeSchema(String ref, Schema property) {\n      * @param target target property\n      */\n \n-    public void copyVendorExtensions(Schema source, Schema target) {\n+    private void copyVendorExtensions(Schema source, Schema target) {\n         Map<String, Object> vendorExtensions = source.getExtensions();\n         if (vendorExtensions == null) {\n              return;\n@@ -553,12 +511,4 @@ public void copyVendorExtensions(Schema source, Schema target) {\n             target.addExtension(extName, vendorExtensions.get(extName));\n         }\n     }\n-\n-    public boolean isSkipMatches() {\n-        return skipMatches;\n-    }\n-\n-    public void setSkipMatches(boolean skipMatches) {\n-        this.skipMatches = skipMatches;\n-    }\n }\n\\ No newline at end of file",
      "parent_sha": "e4f80dcc0e02de83227741dd5faa28e3fe860d79"
    }
  },
  {
    "oid": "03adae8e362c20aa52421edc4c837986990f9a3e",
    "message": "changed to use tag sanitization method",
    "date": "2016-04-05T14:08:32Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/03adae8e362c20aa52421edc4c837986990f9a3e",
    "details": {
      "sha": "bf1cdcbb9009d26d3ea0ddfdf755188825f8b39d",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/NodeJSServerCodegen.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/03adae8e362c20aa52421edc4c837986990f9a3e/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FNodeJSServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/03adae8e362c20aa52421edc4c837986990f9a3e/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FNodeJSServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FNodeJSServerCodegen.java?ref=03adae8e362c20aa52421edc4c837986990f9a3e",
      "patch": "@@ -278,7 +278,9 @@ public void preprocessSwagger(Swagger swagger) {\n                         if(operation.getOperationId() == null) {\n                             operation.setOperationId(getOrGenerateOperationId(operation, pathname, method.toString()));\n                         }\n-                        operation.getVendorExtensions().put(\"x-swagger-router-controller\", toApiName(tag));\n+                        if(operation.getVendorExtensions().get(\"x-swagger-router-controller\") == null) {\n+                            operation.getVendorExtensions().put(\"x-swagger-router-controller\", sanitizeTag(tag));\n+                        }\n                     }\n                 }\n             }",
      "parent_sha": "ee08d16ae5b23458414f05b3451e22f22a54f929"
    }
  },
  {
    "oid": "d91a2e4221003e0f9f95ca8830d24a68ebede3bc",
    "message": "replace tabs with spaces",
    "date": "2022-01-24T09:10:24Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/d91a2e4221003e0f9f95ca8830d24a68ebede3bc",
    "details": {
      "sha": "15aa8d7246f2067b269b2d89367fc2a0f4032414",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonLegacyClientCodegen.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/d91a2e4221003e0f9f95ca8830d24a68ebede3bc/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonLegacyClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/d91a2e4221003e0f9f95ca8830d24a68ebede3bc/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonLegacyClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonLegacyClientCodegen.java?ref=d91a2e4221003e0f9f95ca8830d24a68ebede3bc",
      "patch": "@@ -311,13 +311,13 @@ public void postProcessModelProperty(CodegenModel model, CodegenProperty propert\n      * The OpenAPI pattern spec follows the Perl convention and style of modifiers. Python\n      * does not support this in as natural a way so it needs to convert it. See\n      * https://docs.python.org/2/howto/regex.html#compilation-flags for details.\n-\t *\n-\t * @param pattern (the String pattern to convert from python to Perl convention)\n-\t * @param vendorExtensions (list of custom x-* properties for extra functionality-see https://swagger.io/docs/specification/openapi-extensions/)\n-\t * @return void\n-\t * @throws IllegalArgumentException if pattern does not follow the Perl /pattern/modifiers convention\n-\t *\n-\t * Includes fix for issue #6675\n+     *\n+     * @param pattern (the String pattern to convert from python to Perl convention)\n+     * @param vendorExtensions (list of custom x-* properties for extra functionality-see https://swagger.io/docs/specification/openapi-extensions/)\n+     * @return void\n+     * @throws IllegalArgumentException if pattern does not follow the Perl /pattern/modifiers convention\n+     *\n+     * Includes fix for issue #6675\n      */\n     public void postProcessPattern(String pattern, Map<String, Object> vendorExtensions) {\n         if (pattern != null) {\n@@ -328,9 +328,9 @@ public void postProcessPattern(String pattern, Map<String, Object> vendorExtensi\n                 throw new IllegalArgumentException(\"Pattern must follow the Perl \"\n                         + \"/pattern/modifiers convention. \" + pattern + \" is not valid.\");\n             }\n-\t\t\t\n-\t    //check for instances of extra backslash that could cause compile issues and remove\n-\t    int firstBackslash = pattern.indexOf(\"\\\\\");\n+\n+        //check for instances of extra backslash that could cause compile issues and remove\n+        int firstBackslash = pattern.indexOf(\"\\\\\");\n             int bracket = pattern.indexOf(\"[\");\n             if (firstBackslash == 0 || firstBackslash == 1 || firstBackslash == bracket+1) {\n                 pattern = pattern.substring(0,firstBackslash)+pattern.substring(firstBackslash+1);",
      "parent_sha": "a68babe86db3866241daf62c4b3727a6678e7d12"
    }
  },
  {
    "oid": "92a1c3a449202009a9313ad41de790180100e0df",
    "message": "[issue-6860] fix NPE of Could not generate api (#6868)",
    "date": "2017-11-07T07:46:20Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/92a1c3a449202009a9313ad41de790180100e0df",
    "details": {
      "sha": "f53b5943e19d40c5b5dd8bca745a0bcea6f2eed5",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/92a1c3a449202009a9313ad41de790180100e0df/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/92a1c3a449202009a9313ad41de790180100e0df/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java?ref=92a1c3a449202009a9313ad41de790180100e0df",
      "patch": "@@ -2886,7 +2886,7 @@ protected String getOrGenerateOperationId(Operation operation, String path, Stri\n      * @return true if the library/module/package of the corresponding type needs to be imported\n      */\n     protected boolean needToImport(String type) {\n-        return !defaultIncludes.contains(type)\n+        return StringUtils.isNotBlank(type) && !defaultIncludes.contains(type)\n             && !languageSpecificPrimitives.contains(type);\n     }\n ",
      "parent_sha": "39a9c5587fd2a83f33b15dba14539e7b6648713b"
    }
  },
  {
    "oid": "d5979d3180c480965ccdc1ea5faaa9e88ebfd856",
    "message": "[Protobuf-Schema] Added nullable (#11073)",
    "date": "2021-12-14T07:44:22Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/d5979d3180c480965ccdc1ea5faaa9e88ebfd856",
    "details": {
      "sha": "d842a935a0fea4c1187edbb8734e957274707780",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ProtobufSchemaCodegen.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/d5979d3180c480965ccdc1ea5faaa9e88ebfd856/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FProtobufSchemaCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/d5979d3180c480965ccdc1ea5faaa9e88ebfd856/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FProtobufSchemaCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FProtobufSchemaCodegen.java?ref=d5979d3180c480965ccdc1ea5faaa9e88ebfd856",
      "patch": "@@ -254,6 +254,9 @@ public Map<String, Object> postProcessModels(Map<String, Object> objs) {\n                 if (Boolean.TRUE.equals(var.isArray)) {\n                     var.vendorExtensions.put(\"x-protobuf-type\", \"repeated\");\n                 }\n+                else if (Boolean.TRUE.equals(var.isNullable &&  var.isPrimitiveType)) {\n+                    var.vendorExtensions.put(\"x-protobuf-type\", \"optional\");\n+                }\n \n                 // add x-protobuf-data-type\n                 // ref: https://developers.google.com/protocol-buffers/docs/proto3\n@@ -500,9 +503,14 @@ public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> o\n             int index = 1;\n             for (CodegenParameter p : op.allParams) {\n                 // add x-protobuf-type: repeated if it's an array\n+                \n                 if (Boolean.TRUE.equals(p.isArray)) {\n                     p.vendorExtensions.put(\"x-protobuf-type\", \"repeated\");\n-                } else if (Boolean.TRUE.equals(p.isMap)) {\n+                }\n+                else if (Boolean.TRUE.equals(p.isNullable &&  p.isPrimitiveType)) {\n+                    p.vendorExtensions.put(\"x-protobuf-type\", \"optional\");\n+                }\n+                else if (Boolean.TRUE.equals(p.isMap)) {\n                     LOGGER.warn(\"Map parameter (name: {}, operation ID: {}) not yet supported\", p.paramName, op.operationId);\n                 }\n ",
      "parent_sha": "fbb61658dfbcc2c1f5087511b0f74756553791ad"
    }
  },
  {
    "oid": "1e57ba96d7ef53d94216454b4c79ca278557347a",
    "message": "Correct source folder for generated files",
    "date": "2016-10-16T16:48:14Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/1e57ba96d7ef53d94216454b4c79ca278557347a",
    "details": {
      "sha": "aca8bbf673c87ca91c7b5aacb35804d7d7493c76",
      "filename": "modules/swagger-codegen-maven-plugin/src/main/java/io/swagger/codegen/plugin/CodeGenMojo.java",
      "status": "modified",
      "additions": 19,
      "deletions": 12,
      "changes": 31,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/1e57ba96d7ef53d94216454b4c79ca278557347a/modules%2Fswagger-codegen-maven-plugin%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fplugin%2FCodeGenMojo.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/1e57ba96d7ef53d94216454b4c79ca278557347a/modules%2Fswagger-codegen-maven-plugin%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fplugin%2FCodeGenMojo.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen-maven-plugin%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fplugin%2FCodeGenMojo.java?ref=1e57ba96d7ef53d94216454b4c79ca278557347a",
      "patch": "@@ -16,24 +16,30 @@\n  * limitations under the License.\n  */\n \n-import io.swagger.codegen.CliOption;\n-import io.swagger.codegen.ClientOptInput;\n-import io.swagger.codegen.CodegenConfig;\n-import io.swagger.codegen.DefaultGenerator;\n-import io.swagger.codegen.config.CodegenConfigurator;\n+import static io.swagger.codegen.config.CodegenConfiguratorUtils.applyAdditionalPropertiesKvp;\n+import static io.swagger.codegen.config.CodegenConfiguratorUtils.applyImportMappingsKvp;\n+import static io.swagger.codegen.config.CodegenConfiguratorUtils.applyInstantiationTypesKvp;\n+import static io.swagger.codegen.config.CodegenConfiguratorUtils.applyLanguageSpecificPrimitivesCsv;\n+import static io.swagger.codegen.config.CodegenConfiguratorUtils.applyTypeMappingsKvp;\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.plugins.annotations.LifecyclePhase;\n import org.apache.maven.plugins.annotations.Mojo;\n import org.apache.maven.plugins.annotations.Parameter;\n import org.apache.maven.project.MavenProject;\n \n-import java.io.File;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static io.swagger.codegen.config.CodegenConfiguratorUtils.*;\n-import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+import io.swagger.codegen.CliOption;\n+import io.swagger.codegen.ClientOptInput;\n+import io.swagger.codegen.CodegenConfig;\n+import io.swagger.codegen.CodegenConstants;\n+import io.swagger.codegen.DefaultGenerator;\n+import io.swagger.codegen.config.CodegenConfigurator;\n \n /**\n  * Goal which generates client/server code from a swagger json/yaml definition.\n@@ -304,7 +310,8 @@ public void execute() throws MojoExecutionException {\n         }\n \n         if (addCompileSourceRoot) {\n-            project.addCompileSourceRoot(output.toString());\n+            String sourceJavaFolder = output.toString() + \"/\" + configOptions.get(CodegenConstants.SOURCE_FOLDER);\n+            project.addCompileSourceRoot(sourceJavaFolder);\n         }\n     }\n }",
      "parent_sha": "20752049507a12838e0bbb59eff98d3980c10aed"
    }
  },
  {
    "oid": "10e970e7071424671c2d975b8d3f22382966d83c",
    "message": "fix date format in example generator",
    "date": "2016-06-07T15:46:06Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/10e970e7071424671c2d975b8d3f22382966d83c",
    "details": {
      "sha": "5c373607d5343756e230b4cd46841e904c05c768",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/examples/ExampleGenerator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/10e970e7071424671c2d975b8d3f22382966d83c/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fexamples%2FExampleGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/10e970e7071424671c2d975b8d3f22382966d83c/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fexamples%2FExampleGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fexamples%2FExampleGenerator.java?ref=10e970e7071424671c2d975b8d3f22382966d83c",
      "patch": "@@ -93,9 +93,9 @@ protected Object resolvePropertyToExample(String mediaType, Property property, S\n                 };\n             }\n         } else if (property instanceof DateProperty) {\n-            return \"2000-01-23T04:56:07.000+0000\";\n+            return \"2000-01-23T04:56:07.000+00:00\";\n         } else if (property instanceof DateTimeProperty) {\n-            return \"2000-01-23T04:56:07.000+0000\";\n+            return \"2000-01-23T04:56:07.000+00:00\";\n         } else if (property instanceof DecimalProperty) {\n             return new BigDecimal(1.3579);\n         } else if (property instanceof DoubleProperty) {",
      "parent_sha": "27cd38ba615e27e31372b9f27abdcd0ad16d171b"
    }
  },
  {
    "oid": "09b4bbc1e1414b7d403f608848ebf8ba64568021",
    "message": "Correct CLI option (#3340)",
    "date": "2019-07-12T15:59:12Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/09b4bbc1e1414b7d403f608848ebf8ba64568021",
    "details": {
      "sha": "a30f0bd7972ccef8029ed5dfacccb3b0e64ca319",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaPlayFrameworkServerCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/09b4bbc1e1414b7d403f608848ebf8ba64568021/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaPlayFrameworkServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/09b4bbc1e1414b7d403f608848ebf8ba64568021/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaPlayFrameworkServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaPlayFrameworkServerCodegen.java?ref=09b4bbc1e1414b7d403f608848ebf8ba64568021",
      "patch": "@@ -84,7 +84,7 @@ public ScalaPlayFrameworkServerCodegen() {\n         importMapping.put(\"TemporaryFile\", \"play.api.libs.Files.TemporaryFile\");\n \n         cliOptions.add(new CliOption(ROUTES_FILE_NAME, \"Name of the routes file to generate.\").defaultValue(routesFileName));\n-        cliOptions.add(new CliOption(ROUTES_FILE_NAME, \"Base package in which supporting classes are generated.\").defaultValue(basePackage));\n+        cliOptions.add(new CliOption(BASE_PACKAGE, \"Base package in which supporting classes are generated.\").defaultValue(basePackage));\n \n         addCliOptionWithDefault(SKIP_STUBS, \"If set, skips generation of stub classes.\", skipStubs);\n         addCliOptionWithDefault(SUPPORT_ASYNC, \"If set, wraps API return types with Futures and generates async actions.\", supportAsync);",
      "parent_sha": "99ee68128d5401a5f50b1a974b3d448f49c1b31c"
    }
  },
  {
    "oid": "b50b33e891502a1244c0442604dd1e46318a74f8",
    "message": "fix reserved word handling in model name (sinatra)",
    "date": "2016-10-18T10:51:08Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/b50b33e891502a1244c0442604dd1e46318a74f8",
    "details": {
      "sha": "e68d6c3509cd87a87db0f5138177f4fc50c86752",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SinatraServerCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/b50b33e891502a1244c0442604dd1e46318a74f8/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSinatraServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/b50b33e891502a1244c0442604dd1e46318a74f8/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSinatraServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSinatraServerCodegen.java?ref=b50b33e891502a1244c0442604dd1e46318a74f8",
      "patch": "@@ -195,7 +195,8 @@ public String toModelName(String name) {\n     public String toModelFilename(String name) {\n         // model name cannot use reserved keyword, e.g. return\n         if (isReservedWord(name)) {\n-            throw new RuntimeException(name + \" (reserved word) cannot be used as a model name\");\n+            LOGGER.warn(name + \" (reserved word) cannot be used as model filename. Renamed to \" + underscore(\"model_\" + name));\n+            name = \"model_\" + name; // e.g. return => ModelReturn (after camelize)\n         }\n \n         // underscore the model file name",
      "parent_sha": "702344ed75be418795a6cffbd2fe33ed82ef469e"
    }
  },
  {
    "oid": "4bb6d8993ca8fd33e760347edc9134e99c05e0a1",
    "message": "fix removeOperationIdPrefix in additional properties (#7301)",
    "date": "2018-01-07T03:15:13Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/4bb6d8993ca8fd33e760347edc9134e99c05e0a1",
    "details": {
      "sha": "9591a0ba77195ed8f6d6adae9a173d9f36cea2d5",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/4bb6d8993ca8fd33e760347edc9134e99c05e0a1/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/4bb6d8993ca8fd33e760347edc9134e99c05e0a1/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java?ref=4bb6d8993ca8fd33e760347edc9134e99c05e0a1",
      "patch": "@@ -152,7 +152,7 @@ public void processOpts() {\n         }\n \n         if (additionalProperties.containsKey(CodegenConstants.REMOVE_OPERATION_ID_PREFIX)) {\n-            this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties\n+            this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties\n                     .get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()));\n         }\n     }",
      "parent_sha": "a5009b592ec17d9f9f82c5a78ebf585e6ace9828"
    }
  },
  {
    "oid": "92621f2f2dd5f253f3ed5fe7bfbf13a86eb42631",
    "message": "fix for issue 567, added reserved words, rebuilt client",
    "date": "2015-03-28T17:41:51Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/92621f2f2dd5f253f3ed5fe7bfbf13a86eb42631",
    "details": {
      "sha": "bc47b4041daf2908eecf6e3905244179dd354bcb",
      "filename": "modules/swagger-codegen/src/main/java/com/wordnik/swagger/codegen/languages/PythonClientCodegen.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/92621f2f2dd5f253f3ed5fe7bfbf13a86eb42631/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/92621f2f2dd5f253f3ed5fe7bfbf13a86eb42631/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java?ref=92621f2f2dd5f253f3ed5fe7bfbf13a86eb42631",
      "patch": "@@ -4,6 +4,7 @@\n import com.wordnik.swagger.models.properties.*;\r\n \r\n import java.io.File;\r\n+import java.util.*;\r\n \r\n public class PythonClientCodegen extends DefaultCodegen implements CodegenConfig {\r\n   String module = \"client\";\r\n@@ -50,7 +51,14 @@ public PythonClientCodegen() {\n     typeMapping.put(\"string\", \"str\");\r\n     typeMapping.put(\"date\", \"datetime\");\r\n \r\n-    \r\n+    // from https://docs.python.org/release/2.5.4/ref/keywords.html\r\n+    reservedWords = new HashSet<String> (\r\n+      Arrays.asList(\r\n+        \"and\", \"del\", \"from\", \"not\", \"while\", \"as\", \"elif\", \"global\", \"or\", \"with\",\r\n+        \"assert\", \"else\", \"if\", \"pass\", \"yield\", \"break\", \"except\", \"import\",\r\n+        \"print\", \"class\", \"exec\", \"in\", \"raise\", \"continue\", \"finally\", \"is\",\r\n+        \"return\", \"def\", \"for\", \"lambda\", \"try\"));\r\n+\r\n     supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\r\n     supportingFiles.add(new SupportingFile(\"swagger.mustache\", module, \"swagger.py\"));\r\n     supportingFiles.add(new SupportingFile(\"__init__.mustache\", module, \"__init__.py\"));\r",
      "parent_sha": "0686a9169018094e8386bed4f6101191a5ec4a5c"
    }
  },
  {
    "oid": "3d89399b58eb60ae448e97308c1c09278121fce1",
    "message": "fixed syntax error",
    "date": "2015-08-24T12:28:13Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/3d89399b58eb60ae448e97308c1c09278121fce1",
    "details": {
      "sha": "bcc86be0558f93d13f0b37a70aef3c8049c69bf1",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/3d89399b58eb60ae448e97308c1c09278121fce1/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/3d89399b58eb60ae448e97308c1c09278121fce1/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=3d89399b58eb60ae448e97308c1c09278121fce1",
      "patch": "@@ -496,13 +496,13 @@ public void processOperation(String resourcePath, String httpMethod, Operation o\n                     if (!authMethods.isEmpty()) {\n                         co.authMethods = config.fromSecurity(authMethods);\n                     }\n-                    catch (Exception ex) {\n-                       LOGGER.error(\"Error while trying to get Config from Operation for tag(\" + tag + \")\\n\" //\n-                             + \"\\tResource: \" + httpMethod + \" \" + resourcePath + \"\\n\"//\n-                             + \"\\tOperation:\" + operation + \"\\n\" //\n-                             + \"\\tDefinitions: \" + swagger.getDefinitions() + \"\\n\");\n-                       ex.printStackTrace();\n-                    }\n+                }\n+                catch (Exception ex) {\n+                   LOGGER.error(\"Error while trying to get Config from Operation for tag(\" + tag + \")\\n\" //\n+                         + \"\\tResource: \" + httpMethod + \" \" + resourcePath + \"\\n\"//\n+                         + \"\\tOperation:\" + operation + \"\\n\" //\n+                         + \"\\tDefinitions: \" + swagger.getDefinitions() + \"\\n\");\n+                   ex.printStackTrace();\n                 }\n             }\n         }",
      "parent_sha": "0261121d780efff40de24d18c0f7630825b581fd"
    }
  },
  {
    "oid": "d750d6643d943e0763c60f0c39c9441917819210",
    "message": "NodeJS - Adds missing keyword (#5606)",
    "date": "2020-03-17T06:54:29Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/d750d6643d943e0763c60f0c39c9441917819210",
    "details": {
      "sha": "b52f3ac61bc447303eabe273ad253f19619b931a",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/NodeJSServerCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/d750d6643d943e0763c60f0c39c9441917819210/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FNodeJSServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/d750d6643d943e0763c60f0c39c9441917819210/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FNodeJSServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FNodeJSServerCodegen.java?ref=d750d6643d943e0763c60f0c39c9441917819210",
      "patch": "@@ -116,7 +116,7 @@ public NodeJSServerCodegen() {\n         setReservedWordsLowerCase(\n                 Arrays.asList(\n                         \"break\", \"case\", \"class\", \"catch\", \"const\", \"continue\", \"debugger\",\n-                        \"default\", \"delete\", \"do\", \"else\", \"export\", \"extends\", \"finally\",\n+                        \"default\", \"delete\", \"do\", \"else\", \"enum\", \"export\", \"extends\", \"finally\",\n                         \"for\", \"function\", \"if\", \"import\", \"in\", \"instanceof\", \"let\", \"new\",\n                         \"return\", \"super\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"var\",\n                         \"void\", \"while\", \"with\", \"yield\")",
      "parent_sha": "0cf5d356cc3b1148f8f6c4869cb2fc1279021560"
    }
  },
  {
    "oid": "5f9a9bda001114aea4b8af3f9e15a52f8e052eb3",
    "message": "fix array of body parameter type",
    "date": "2018-03-23T16:04:07Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/5f9a9bda001114aea4b8af3f9e15a52f8e052eb3",
    "details": {
      "sha": "416bf12fe773ad43742d9c3d96322b39e750402e",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/5f9a9bda001114aea4b8af3f9e15a52f8e052eb3/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/5f9a9bda001114aea4b8af3f9e15a52f8e052eb3/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java?ref=5f9a9bda001114aea4b8af3f9e15a52f8e052eb3",
      "patch": "@@ -2103,6 +2103,7 @@ public CodegenOperation fromOperation(String path,\n                     requestBody = openAPI.getComponents().getRequestBodies().get(getSimpleRef(requestBody.get$ref()));\n                 }\n \t\t\t\tbodyParam = fromRequestBody(requestBody, schemas, imports);\n+                bodyParam.description = requestBody.getDescription();\n \t\t\t\tbodyParams.add(bodyParam);\n \t\t\t\tif (schemas != null) {\n \t\t\t\t    // TODO fix NPE\n@@ -4042,11 +4043,13 @@ public CodegenParameter fromRequestBody(RequestBody body, Map<String, Schema> sc\n                 }\n                 innerCp = innerCp.items;\n             }\n+            codegenParameter.baseName = codegenProperty.baseType;\n+            codegenParameter.paramName = toParamName(codegenProperty.baseType);\n             codegenParameter.items = codegenProperty;\n-            codegenParameter.dataType = codegenProperty.datatype;\n+            codegenParameter.dataType = getTypeDeclaration(arraySchema);\n             codegenParameter.baseType = codegenProperty.complexType;\n-            codegenParameter.isContainer = codegenProperty.isContainer;\n-            codegenParameter.isListContainer = codegenProperty.isListContainer;\n+            codegenParameter.isContainer = Boolean.TRUE;\n+            codegenParameter.isListContainer = Boolean.TRUE;\n             codegenParameter.description = codegenProperty.description;\n \n             setParameterBooleanFlagWithCodegenProperty(codegenParameter, codegenProperty);",
      "parent_sha": "1d099629965e5e983db08b781585ca45a98c84b8"
    }
  },
  {
    "oid": "179369811ec182a560f7de2ef70f2c5d31ded01e",
    "message": "Support for international letters like \u00f8\u00e6\u00e5. (#13316)\n\nCo-authored-by: Sverre Kristian Valskr\u00e5 <Sverre.Valskra@skatteetaten.no>",
    "date": "2022-09-20T09:04:27Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/179369811ec182a560f7de2ef70f2c5d31ded01e",
    "details": {
      "sha": "a06268e50ed4d16db591cb2977970498ff65cd98",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractKotlinCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/179369811ec182a560f7de2ef70f2c5d31ded01e/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractKotlinCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/179369811ec182a560f7de2ef70f2c5d31ded01e/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractKotlinCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractKotlinCodegen.java?ref=179369811ec182a560f7de2ef70f2c5d31ded01e",
      "patch": "@@ -35,6 +35,7 @@\n import java.io.IOException;\n import java.util.*;\n import java.util.function.Function;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -778,7 +779,7 @@ private String sanitizeKotlinSpecificNames(final String name) {\n         }\n \n         // Fallback, replace unknowns with underscore.\n-        word = word.replaceAll(\"\\\\W+\", \"_\");\n+        word = Pattern.compile(\"\\\\W+\", Pattern.UNICODE_CHARACTER_CLASS).matcher(word).replaceAll(\"_\");\n         if (word.matches(\"\\\\d.*\")) {\n             word = \"_\" + word;\n         }",
      "parent_sha": "1f9f94066a5bf32ee5840e2025d339550a1b4f82"
    }
  },
  {
    "oid": "c27ddc67fe309298b2914c946ceb60b576c09a2b",
    "message": "show error when schema in discriminator mapping is undefined (#11127)",
    "date": "2021-12-15T14:18:39Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/c27ddc67fe309298b2914c946ceb60b576c09a2b",
    "details": {
      "sha": "a9780140f4c9921f1884b4550e154fe26d2e9e58",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/c27ddc67fe309298b2914c946ceb60b576c09a2b/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/c27ddc67fe309298b2914c946ceb60b576c09a2b/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java?ref=c27ddc67fe309298b2914c946ceb60b576c09a2b",
      "patch": "@@ -3170,10 +3170,16 @@ protected CodegenDiscriminator createDiscriminator(String schemaName, Schema sch\n         List<MappedModel> uniqueDescendants = new ArrayList();\n         if (sourceDiscriminator.getMapping() != null && !sourceDiscriminator.getMapping().isEmpty()) {\n             for (Entry<String, String> e : sourceDiscriminator.getMapping().entrySet()) {\n-                String nameOrRef = e.getValue();\n-                String name = nameOrRef.indexOf('/') >= 0 ? ModelUtils.getSimpleRef(nameOrRef) : nameOrRef;\n-                String modelName = toModelName(name);\n-                uniqueDescendants.add(new MappedModel(e.getKey(), modelName));\n+                String name;\n+                if (e.getValue().indexOf('/') >= 0) {\n+                    name = ModelUtils.getSimpleRef(e.getValue());\n+                    if (ModelUtils.getSchema(openAPI, name) == null) {\n+                        LOGGER.error(\"Failed to lookup the schema '{}' when processing the discriminator mapping of oneOf/anyOf. Please check to ensure it's defined properly.\", name);\n+                    }\n+                } else {\n+                    name = e.getValue();\n+                }\n+                uniqueDescendants.add(new MappedModel(e.getKey(), toModelName(name)));\n             }\n         }\n ",
      "parent_sha": "b2daa5a836fcea8be2e64542b9a57abfd799b204"
    }
  },
  {
    "oid": "82e3590eed5497b3c2b18ec0787843ea957c11eb",
    "message": "Update AbstractCSharpCodegen.java (#16577)\n\nFixed a bug in postProcessAllModels, changing an anyOf to a oneOf.",
    "date": "2023-09-14T04:03:26Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/82e3590eed5497b3c2b18ec0787843ea957c11eb",
    "details": {
      "sha": "46bb9df4aa1eabe7836830c0f3eff0ccb953e07c",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractCSharpCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/82e3590eed5497b3c2b18ec0787843ea957c11eb/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/82e3590eed5497b3c2b18ec0787843ea957c11eb/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java?ref=82e3590eed5497b3c2b18ec0787843ea957c11eb",
      "patch": "@@ -527,7 +527,7 @@ public Map<String, ModelsMap> postProcessAllModels(Map<String, ModelsMap> objs)\n             // GrandparentAnimal has a discriminator, but no oneOf nor anyOf\n             // modules\\openapi-generator\\src\\test\\resources\\3_0\\csharp\\petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml\n             model.setHasDiscriminatorWithNonEmptyMapping(\n-                    ((model.anyOf != null && model.anyOf.size() > 0) || (model.anyOf != null && model.oneOf.size() > 0)) &&\n+                    ((model.anyOf != null && model.anyOf.size() > 0) || (model.oneOf != null && model.oneOf.size() > 0)) &&\n                             model.discriminator != null &&\n                             model.discriminator.getMappedModels() != null &&\n                             model.discriminator.getMappedModels().size() > 0);",
      "parent_sha": "353507ef23caa898e7cebc70cf21a212c8e27e94"
    }
  },
  {
    "oid": "7fa02ee5f0da053d7943d8b07658d602fe23d1ac",
    "message": "use typeMapping instead of postProcessParameter (#7457)",
    "date": "2020-09-21T07:05:43Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/7fa02ee5f0da053d7943d8b07658d602fe23d1ac",
    "details": {
      "sha": "395d5533b8f2ee8ffe83c7f0db86c2a3dbac993c",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/JavaVertXWebServerCodegen.java",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/7fa02ee5f0da053d7943d8b07658d602fe23d1ac/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaVertXWebServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/7fa02ee5f0da053d7943d8b07658d602fe23d1ac/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaVertXWebServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaVertXWebServerCodegen.java?ref=7fa02ee5f0da053d7943d8b07658d602fe23d1ac",
      "patch": "@@ -68,6 +68,9 @@ public JavaVertXWebServerCodegen() {\n \n         // Override type mapping\n         typeMapping.put(\"file\", \"FileUpload\");\n+        typeMapping.put(\"UUID\", \"String\");\n+        typeMapping.put(\"date\", \"String\");\n+        typeMapping.put(\"DateTime\", \"String\");\n     }\n \n     public CodegenType getTag() {\n@@ -160,14 +163,6 @@ public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> o\n         return newObjs;\n     }\n \n-    @Override\n-    public void postProcessParameter(CodegenParameter parameter) {\n-        super.postProcessParameter(parameter);\n-        if (parameter.isUuid || parameter.isDate || parameter.isDateTime) {\n-            parameter.dataType = \"String\";\n-        }\n-    }\n-\n     @Override\n     public Map<String, Object> postProcessSupportingFileData(Map<String, Object> objs) {\n         generateYAMLSpecFile(objs);",
      "parent_sha": "be151fca642009e64946f0725cb8624d3e8cae9a"
    }
  },
  {
    "oid": "d0f0e175423dbf239c80f7633ea452890793ed53",
    "message": "remove fixme by setting param to final and creating local variable for sanitising model name (#3525)\n\n- general cleanup\r\n\r\n(cherry picked from commit 88cf7e801f78a6611fc0d63479c78296e7312419)",
    "date": "2019-08-02T09:33:15Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/d0f0e175423dbf239c80f7633ea452890793ed53",
    "details": {
      "sha": "95a12c1274cea430594ef17bad50d1676fc49932",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java",
      "status": "modified",
      "additions": 17,
      "deletions": 18,
      "changes": 35,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/d0f0e175423dbf239c80f7633ea452890793ed53/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractTypeScriptClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/d0f0e175423dbf239c80f7633ea452890793ed53/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractTypeScriptClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractTypeScriptClientCodegen.java?ref=d0f0e175423dbf239c80f7633ea452890793ed53",
      "patch": "@@ -98,7 +98,7 @@ public AbstractTypeScriptClientCodegen() {\n                 \"object\"\n         ));\n \n-        languageGenericTypes = new HashSet<>(Arrays.asList(\n+        languageGenericTypes = new HashSet<>(Collections.singletonList(\n                 \"Array\"\n         ));\n \n@@ -181,7 +181,7 @@ public void preprocessOpenAPI(OpenAPI openAPI) {\n                 this.setNpmVersion(openAPI.getInfo().getVersion());\n             }\n \n-            if (additionalProperties.containsKey(SNAPSHOT) && Boolean.valueOf(additionalProperties.get(SNAPSHOT).toString())) {\n+            if (additionalProperties.containsKey(SNAPSHOT) && Boolean.parseBoolean(additionalProperties.get(SNAPSHOT).toString())) {\n                 if (npmVersion.toUpperCase(Locale.ROOT).matches(\"^.*-SNAPSHOT$\")) {\n                     this.setNpmVersion(npmVersion + \".\" + SNAPSHOT_SUFFIX_FORMAT.format(new Date()));\n                 } else {\n@@ -264,46 +264,45 @@ private boolean propertyHasBreakingCharacters(String str) {\n         final String regex = \"^.*[+*:;,.()-]+.*$\";\n         final Pattern pattern = Pattern.compile(regex);\n         final Matcher matcher = pattern.matcher(str);\n-        boolean matches = matcher.matches();\n-        return matches;\n+        return matcher.matches();\n     }\n \n     @Override\n-    public String toModelName(String name) {\n+    public String toModelName(final String name) {\n         ArrayList<String> exceptions = new ArrayList<String>(Arrays.asList(\"\\\\|\", \" \"));\n-        name = sanitizeName(name, \"(?![| ])\\\\W\", exceptions); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.\n+        String sanName = sanitizeName(name, \"(?![| ])\\\\W\", exceptions);\n \n         if (!StringUtils.isEmpty(modelNamePrefix)) {\n-            name = modelNamePrefix + \"_\" + name;\n+            sanName = modelNamePrefix + \"_\" + sanName;\n         }\n \n         if (!StringUtils.isEmpty(modelNameSuffix)) {\n-            name = name + \"_\" + modelNameSuffix;\n+            sanName = sanName + \"_\" + modelNameSuffix;\n         }\n \n         // model name cannot use reserved keyword, e.g. return\n-        if (isReservedWord(name)) {\n-            String modelName = camelize(\"model_\" + name);\n-            LOGGER.warn(name + \" (reserved word) cannot be used as model name. Renamed to \" + modelName);\n+        if (isReservedWord(sanName)) {\n+            String modelName = camelize(\"model_\" + sanName);\n+            LOGGER.warn(sanName + \" (reserved word) cannot be used as model name. Renamed to \" + modelName);\n             return modelName;\n         }\n \n         // model name starts with number\n-        if (name.matches(\"^\\\\d.*\")) {\n-            String modelName = camelize(\"model_\" + name); // e.g. 200Response => Model200Response (after camelize)\n-            LOGGER.warn(name + \" (model name starts with number) cannot be used as model name. Renamed to \" + modelName);\n+        if (sanName.matches(\"^\\\\d.*\")) {\n+            String modelName = camelize(\"model_\" + sanName); // e.g. 200Response => Model200Response (after camelize)\n+            LOGGER.warn(sanName + \" (model name starts with number) cannot be used as model name. Renamed to \" + modelName);\n             return modelName;\n         }\n \n-        if (languageSpecificPrimitives.contains(name)) {\n-            String modelName = camelize(\"model_\" + name);\n-            LOGGER.warn(name + \" (model name matches existing language type) cannot be used as a model name. Renamed to \" + modelName);\n+        if (languageSpecificPrimitives.contains(sanName)) {\n+            String modelName = camelize(\"model_\" + sanName);\n+            LOGGER.warn(sanName + \" (model name matches existing language type) cannot be used as a model name. Renamed to \" + modelName);\n             return modelName;\n         }\n \n         // camelize the model name\n         // phone_number => PhoneNumber\n-        return camelize(name);\n+        return camelize(sanName);\n     }\n \n     @Override",
      "parent_sha": "ffaeb11a6122d7e3a75bb6e6f4401d65bb77f056"
    }
  },
  {
    "oid": "af4319015e0c1ab6da03083d793e465b7ca58def",
    "message": "When reading mustache template files assume UTF-8 encoding, fixes #4544. (#4545)",
    "date": "2017-01-12T16:11:07Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/af4319015e0c1ab6da03083d793e465b7ca58def",
    "details": {
      "sha": "abf77b59cb1248f5bc0e828deeb20da8ea9bc150",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/AbstractGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/af4319015e0c1ab6da03083d793e465b7ca58def/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FAbstractGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/af4319015e0c1ab6da03083d793e465b7ca58def/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FAbstractGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FAbstractGenerator.java?ref=af4319015e0c1ab6da03083d793e465b7ca58def",
      "patch": "@@ -56,7 +56,7 @@ public Reader getTemplateReader(String name) {\n             if (is == null) {\n                 is = new FileInputStream(new File(name)); // May throw but never return a null value\n             }\n-            return new InputStreamReader(is);\n+            return new InputStreamReader(is, \"UTF-8\");\n         } catch (Exception e) {\n             LOGGER.error(e.getMessage());\n         }",
      "parent_sha": "9bb58d204038c7bee8ed84aa4c1f55343d8529c8"
    }
  },
  {
    "oid": "ee12a6f7ee32c841adbb2203bb54c0cfdec2d3a3",
    "message": "revise invalid spec error message (#8735)",
    "date": "2021-02-20T03:49:31Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/ee12a6f7ee32c841adbb2203bb54c0cfdec2d3a3",
    "details": {
      "sha": "9fde6eaa04786e1d1d07dd48810481bb41395a69",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/ee12a6f7ee32c841adbb2203bb54c0cfdec2d3a3/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/ee12a6f7ee32c841adbb2203bb54c0cfdec2d3a3/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultGenerator.java?ref=ee12a6f7ee32c841adbb2203bb54c0cfdec2d3a3",
      "patch": "@@ -832,9 +832,8 @@ Map<String, Object> buildSupportFileBundle(List<Object> allOperations, List<Obje\n \n     @Override\n     public List<File> generate() {\n-\n         if (openAPI == null) {\n-            throw new RuntimeException(\"missing OpenAPI input!\");\n+            throw new RuntimeException(\"Issues with the OpenAPI input. Possible causes: invalid/missing spec, malformed JSON/YAML files, etc.\");\n         }\n \n         if (config == null) {",
      "parent_sha": "18a6f5a941f3b5777977693f3b59ac5d200928a8"
    }
  },
  {
    "oid": "5730f6224af27549b3f23e3b73cf097556bfc379",
    "message": "Delete unused method (#1744)\n\n* Delete unused method\r\n\r\n* Delete unused property \"typeMapping\"\r\n\r\n* Delete unused \"import\" declaration",
    "date": "2018-12-31T02:10:07Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/5730f6224af27549b3f23e3b73cf097556bfc379",
    "details": {
      "sha": "e16c6bf25c1bb9711357a768bfa8315c9c9b09fc",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenModelFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 25,
      "changes": 26,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/5730f6224af27549b3f23e3b73cf097556bfc379/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FCodegenModelFactory.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/5730f6224af27549b3f23e3b73cf097556bfc379/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FCodegenModelFactory.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FCodegenModelFactory.java?ref=5730f6224af27549b3f23e3b73cf097556bfc379",
      "patch": "@@ -18,36 +18,12 @@\n package org.openapitools.codegen;\n \n import java.lang.reflect.InvocationTargetException;\n-import java.util.HashMap;\n-import java.util.Map;\n \n public final class CodegenModelFactory {\n-\n-    private static final Map<CodegenModelType, Class<?>> typeMapping = new HashMap<CodegenModelType, Class<?>>();\n-\n-    /**\n-     * Configure a different implementation class.\n-     *\n-     * @param type           the type that shall be replaced\n-     * @param implementation the implementation class must extend the default class and must provide a public no-arg constructor\n-     */\n-    public static void setTypeMapping(CodegenModelType type, Class<?> implementation) {\n-        if (!type.getDefaultImplementation().isAssignableFrom(implementation)) {\n-            throw new IllegalArgumentException(implementation.getSimpleName() + \" doesn't extend \" + type.getDefaultImplementation().getSimpleName());\n-        }\n-        try {\n-            implementation.getDeclaredConstructor().newInstance();\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-        typeMapping.put(type, implementation);\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     public static <T> T newInstance(CodegenModelType type) {\n-        Class<?> classType = typeMapping.get(type);\n         try {\n-            return (T) (classType != null ? classType : type.getDefaultImplementation()).getDeclaredConstructor().newInstance();\n+            return (T) type.getDefaultImplementation().getDeclaredConstructor().newInstance();\n         } catch (IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) {\n             throw new RuntimeException(e);\n         }",
      "parent_sha": "0fca90133ce097f987098e6121936c0ffcb210a8"
    }
  },
  {
    "oid": "10d3716cd18e06ffc8c16c5c78caf27736e63c27",
    "message": "fix allowableValues test",
    "date": "2016-06-21T07:20:44Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/10d3716cd18e06ffc8c16c5c78caf27736e63c27",
    "details": {
      "sha": "aa81a3cf81ec7b6ec6b4c5e0276f050f82db37e1",
      "filename": "modules/swagger-codegen/src/test/java/io/swagger/codegen/java/jaxrs/AllowableValuesTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/10d3716cd18e06ffc8c16c5c78caf27736e63c27/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fjava%2Fjaxrs%2FAllowableValuesTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/10d3716cd18e06ffc8c16c5c78caf27736e63c27/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fjava%2Fjaxrs%2FAllowableValuesTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fjava%2Fjaxrs%2FAllowableValuesTest.java?ref=10d3716cd18e06ffc8c16c5c78caf27736e63c27",
      "patch": "@@ -17,7 +17,7 @@\n \n public class AllowableValuesTest {\n \n-    private static final String TEMPLATE_FILE = \"JavaJaxRS/libraries/jersey1/allowableValues.mustache\";\n+    private static final String TEMPLATE_FILE = \"JavaJaxRS/allowableValues.mustache\";\n     private static final String PROVIDER_NAME = \"operations\";\n \n     private static String loadClassResource(Class<?> cls, String name) throws IOException {",
      "parent_sha": "d4150d9a025c1b4dfdd4d4bcadcc2867b29e5331"
    }
  },
  {
    "oid": "643b4f703edcd4093f2e2d600708e4ff4eb85910",
    "message": "fix typo related to schema mapping optino (#13793)",
    "date": "2022-10-22T12:51:49Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/643b4f703edcd4093f2e2d600708e4ff4eb85910",
    "details": {
      "sha": "40ebf90595a5a04655f688a14416ff3c9173836d",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/InlineModelResolver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/643b4f703edcd4093f2e2d600708e4ff4eb85910/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/643b4f703edcd4093f2e2d600708e4ff4eb85910/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java?ref=643b4f703edcd4093f2e2d600708e4ff4eb85910",
      "patch": "@@ -903,7 +903,7 @@ private String addSchemas(String name, Schema schema) {\n         addGenerated(name, schema);\n         openAPI.getComponents().addSchemas(name, schema);\n         if (!name.equals(schema.getTitle()) && !inlineSchemaNameMappingValues.contains(name)) {\n-            LOGGER.info(\"Inline schema created as {}. To have complete control of the model name, set the `title` field or use the inlineSchemaNameMapping option (--inline-schema-name-mapping in CLI).\", name);\n+            LOGGER.info(\"Inline schema created as {}. To have complete control of the model name, set the `title` field or use the inlineSchemaNameMapping option (--inline-schema-name-mappings in CLI).\", name);\n         }\n \n         uniqueNames.add(name);",
      "parent_sha": "ca56242e4fd99cc99496fb703543207f2d39bd6f"
    }
  },
  {
    "oid": "bf50ea13662770de9f2a6546fa2cd40e83ba1aee",
    "message": "fix the value for @Generated java annotation (#4366)\n\ncom.my.Generator.class.toString() returns \"class com.my.Generator\", and this value is then used in the javax.annotation.Generated annotation like that: @Generated(value = \"class com.my.Generator\").\r\nShould use Generator.class.getName() instead, so we end up with @Generated(value = \"com.my.Generator\")",
    "date": "2016-12-12T10:38:39Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/bf50ea13662770de9f2a6546fa2cd40e83ba1aee",
    "details": {
      "sha": "5f11f99d99cb401f8eb7bcff9541a23a7a1b574f",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/bf50ea13662770de9f2a6546fa2cd40e83ba1aee/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/bf50ea13662770de9f2a6546fa2cd40e83ba1aee/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=bf50ea13662770de9f2a6546fa2cd40e83ba1aee",
      "patch": "@@ -113,7 +113,7 @@ private void configureGeneratorProperties() {\n         config.processOpts();\n         config.preprocessSwagger(swagger);\n         config.additionalProperties().put(\"generatedDate\", DateTime.now().toString());\n-        config.additionalProperties().put(\"generatorClass\", config.getClass().toString());\n+        config.additionalProperties().put(\"generatorClass\", config.getClass().getName());\n         config.additionalProperties().put(\"inputSpec\", config.getInputSpec());\n         if (swagger.getVendorExtensions() != null) {\n             config.vendorExtensions().putAll(swagger.getVendorExtensions());",
      "parent_sha": "f4fb79822ff4d5a647cf5cf3eb310f96957f840f"
    }
  },
  {
    "oid": "5cce9dc7d39598520571e4f8e664d4c395b3b570",
    "message": "replace tab with spaces in swift 5 codegen",
    "date": "2020-06-26T08:55:35Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/5cce9dc7d39598520571e4f8e664d4c395b3b570",
    "details": {
      "sha": "57325357218ba8c47ecf8b3b5cd370b163abc7df",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/Swift5ClientCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/5cce9dc7d39598520571e4f8e664d4c395b3b570/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FSwift5ClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/5cce9dc7d39598520571e4f8e664d4c395b3b570/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FSwift5ClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FSwift5ClientCodegen.java?ref=5cce9dc7d39598520571e4f8e664d4c395b3b570",
      "patch": "@@ -517,7 +517,7 @@ public String apiFileFolder() {\n \n     @Override\n     public String getTypeDeclaration(Schema p) {\n-    \tif (ModelUtils.isArraySchema(p)) {\n+        if (ModelUtils.isArraySchema(p)) {\n             ArraySchema ap = (ArraySchema) p;\n             Schema inner = ap.getItems();\n             return ModelUtils.isSet(p) ? \"Set<\" + getTypeDeclaration(inner) + \">\" : \"[\" + getTypeDeclaration(inner) + \"]\";\n@@ -634,7 +634,7 @@ public String toDefaultValue(Schema p) {\n \n     @Override\n     public String toInstantiationType(Schema p) {\n-    \tif (ModelUtils.isMapSchema(p)) {\n+        if (ModelUtils.isMapSchema(p)) {\n             return getSchemaType(getAdditionalProperties(p));\n         } else if (ModelUtils.isArraySchema(p)) {\n             ArraySchema ap = (ArraySchema) p;",
      "parent_sha": "933b2855687b830844f38a2555a2688c2f48d688"
    }
  },
  {
    "oid": "5c0ae7babecebc5e1cb9ba8d8008720806af4837",
    "message": "Defect (PR #905) : Add code to be able to override the configPackage in the spring mvc template.",
    "date": "2015-07-26T10:11:29Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/5c0ae7babecebc5e1cb9ba8d8008720806af4837",
    "details": {
      "sha": "8ee34768b5ee3215c7e2645c71d57ec110b50d46",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SpringMVCServerCodegen.java",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/5c0ae7babecebc5e1cb9ba8d8008720806af4837/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSpringMVCServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/5c0ae7babecebc5e1cb9ba8d8008720806af4837/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSpringMVCServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSpringMVCServerCodegen.java?ref=5c0ae7babecebc5e1cb9ba8d8008720806af4837",
      "patch": "@@ -1,10 +1,6 @@\n package io.swagger.codegen.languages;\n \n-import io.swagger.codegen.CodegenConfig;\n-import io.swagger.codegen.CodegenOperation;\n-import io.swagger.codegen.CodegenResponse;\n-import io.swagger.codegen.CodegenType;\n-import io.swagger.codegen.SupportingFile;\n+import io.swagger.codegen.*;\n import io.swagger.models.Operation;\n import io.swagger.models.properties.ArrayProperty;\n import io.swagger.models.properties.MapProperty;\n@@ -28,7 +24,7 @@ public class SpringMVCServerCodegen extends JavaClientCodegen implements Codegen\n     protected String configPackage = \"\";\n \n     public SpringMVCServerCodegen() {\n-        super.processOpts();\n+        super();\n         outputFolder = \"generated-code/javaSpringMVC\";\n         modelTemplateFiles.put(\"model.mustache\", \".java\");\n         apiTemplateFiles.put(\"api.mustache\", \".java\");\n@@ -56,6 +52,9 @@ public SpringMVCServerCodegen() {\n                         \"Long\",\n                         \"Float\")\n         );\n+\n+        cliOptions.add(new CliOption(\"configPackage\", \"configuration package for generated code\"));\n+\n     }\n \n     public CodegenType getTag() {\n@@ -74,6 +73,10 @@ public String getHelp() {\n     public void processOpts() {\n         super.processOpts();\n \n+        if (additionalProperties.containsKey(\"configPackage\")) {\n+            this.setConfigPackage((String) additionalProperties.get(\"configPackage\"));\n+        }\n+\n         supportingFiles.clear();\n         supportingFiles.add(new SupportingFile(\"pom.mustache\", \"\", \"pom.xml\"));\n         supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\n@@ -183,5 +186,9 @@ public Map<String, Object> postProcessOperations(Map<String, Object> objs) {\n         }\n         return objs;\n     }\n+\n+    public void setConfigPackage(String configPackage) {\n+        this.configPackage = configPackage;\n+    }\n }\n ",
      "parent_sha": "6719a6cc748ee185cea65c7444bcc60677e9cdbb"
    }
  },
  {
    "oid": "50945d0e17c9b741e7485fc2162ffb968fafc86a",
    "message": "[Kotlin] fix wrong type- and importMapping for kotlinx.date (#17597) (#18488)",
    "date": "2024-04-24T15:42:57Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/50945d0e17c9b741e7485fc2162ffb968fafc86a",
    "details": {
      "sha": "d550c452f328b2a316c2bf00643b4ba01e295c83",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/KotlinClientCodegen.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/50945d0e17c9b741e7485fc2162ffb968fafc86a/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FKotlinClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/50945d0e17c9b741e7485fc2162ffb968fafc86a/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FKotlinClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FKotlinClientCodegen.java?ref=50945d0e17c9b741e7485fc2162ffb968fafc86a",
      "patch": "@@ -578,9 +578,14 @@ private void processJava8Date(String dateLibrary) {\n     private void processKotlinxDate() {\n         additionalProperties.put(DateLibrary.KOTLINX_DATETIME.value, true);\n \n-        typeMapping.put(\"date-time\", \"kotlinx.datetime.Instant\");\n+        typeMapping.put(\"date-time\", \"Instant\");\n+        typeMapping.put(\"date\", \"LocalDate\");\n+\n         typeMapping.put(\"DateTime\", \"Instant\");\n+        typeMapping.put(\"Date\", \"LocalDate\");\n+\n         importMapping.put(\"Instant\", \"kotlinx.datetime.Instant\");\n+        importMapping.put(\"LocalDate\", \"kotlinx.datetime.LocalDate\");\n     }\n \n     private void processJVMRetrofit2Library(String infrastructureFolder) {",
      "parent_sha": "fbe2e0b18f08d980d92d2671f81127ad29000f49"
    }
  },
  {
    "oid": "2ea4025d2bc5e7c019877d52e7821106c90bd71b",
    "message": "Fix generation of optional file when model name prefix is selected (#2341)",
    "date": "2019-03-16T16:38:19Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/2ea4025d2bc5e7c019877d52e7821106c90bd71b",
    "details": {
      "sha": "2ae7e699d2ddf0d57837e6d6fb843cf4e7253610",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppQt5ClientCodegen.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/2ea4025d2bc5e7c019877d52e7821106c90bd71b/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCppQt5ClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/2ea4025d2bc5e7c019877d52e7821106c90bd71b/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCppQt5ClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCppQt5ClientCodegen.java?ref=2ea4025d2bc5e7c019877d52e7821106c90bd71b",
      "patch": "@@ -87,6 +87,12 @@ public CppQt5ClientCodegen() {\n     public void processOpts() {\n         super.processOpts();\n \n+        if (additionalProperties.containsKey(CodegenConstants.OPTIONAL_PROJECT_FILE)) {\n+            setOptionalProjectFileFlag(convertPropertyToBooleanAndWriteBack(CodegenConstants.OPTIONAL_PROJECT_FILE));\n+        } else {\n+            additionalProperties.put(CodegenConstants.OPTIONAL_PROJECT_FILE, optionalProjectFileFlag);\n+        }\n+        \n         if (additionalProperties.containsKey(\"modelNamePrefix\")) {\n             supportingFiles.clear();\n             supportingFiles.add(new SupportingFile(\"helpers-header.mustache\", sourceFolder, modelNamePrefix + \"Helpers.h\"));\n@@ -98,12 +104,9 @@ public void processOpts() {\n             typeMapping.put(\"file\", modelNamePrefix + \"HttpRequestInputFileElement\");\n             typeMapping.put(\"binary\", modelNamePrefix + \"HttpRequestInputFileElement\");\n             importMapping.put(modelNamePrefix + \"HttpRequestInputFileElement\", \"#include \\\"\" + modelNamePrefix + \"HttpRequest.h\\\"\");\n-        }\n-\n-        if (additionalProperties.containsKey(CodegenConstants.OPTIONAL_PROJECT_FILE)) {\n-            setOptionalProjectFileFlag(convertPropertyToBooleanAndWriteBack(CodegenConstants.OPTIONAL_PROJECT_FILE));\n-        } else {\n-            additionalProperties.put(CodegenConstants.OPTIONAL_PROJECT_FILE, optionalProjectFileFlag);\n+            if (optionalProjectFileFlag) {\n+                supportingFiles.add(new SupportingFile(\"Project.mustache\", sourceFolder, modelNamePrefix + \"client.pri\"));\n+            }\n         }\n     }\n ",
      "parent_sha": "f41f50c3e552d70a9bc950c44835fb8e8701b5c2"
    }
  },
  {
    "oid": "4bc99b9da8fa7e15fa17833c38c68a3b5087666f",
    "message": "minor fixes to haskell http client generator (#278)",
    "date": "2018-05-01T03:27:37Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/4bc99b9da8fa7e15fa17833c38c68a3b5087666f",
    "details": {
      "sha": "93e7efebf4627e4af6e481dcd8dc12542858767f",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/HaskellHttpClientCodegen.java",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/4bc99b9da8fa7e15fa17833c38c68a3b5087666f/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FHaskellHttpClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/4bc99b9da8fa7e15fa17833c38c68a3b5087666f/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FHaskellHttpClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FHaskellHttpClientCodegen.java?ref=4bc99b9da8fa7e15fa17833c38c68a3b5087666f",
      "patch": "@@ -544,7 +544,7 @@ public String getSchemaType(Schema p) {\n \n         if (typeMapping.containsKey(openAPIType)) {\n             return typeMapping.get(openAPIType);\n-        } else if (openAPIType == \"object\") {\n+        } else if (\"object\".equals(openAPIType)) {\n             return \"A.Value\";\n         } else {\n             return toModelName(openAPIType);\n@@ -564,8 +564,7 @@ public String toInstantiationType(Schema p) {\n             return \"(Map.Map Text \" + inner + \")\";\n         } else if (ModelUtils.isArraySchema(p)) {\n             ArraySchema ap = (ArraySchema) p;\n-            String inner = getSchemaType(ap.getItems());\n-            return inner;\n+            return getSchemaType(ap.getItems());\n         } else {\n             return null;\n         }\n@@ -575,7 +574,7 @@ public String toInstantiationType(Schema p) {\n     public void addOperationToGroup(String tag, String resourcePath, Operation operation, CodegenOperation op, Map<String, List<CodegenOperation>> operations) {\n \n         List<CodegenOperation> opList = operations.get(tag);\n-        if (opList == null) {\n+        if (opList == null || opList.isEmpty()) {\n             opList = new ArrayList<CodegenOperation>();\n             operations.put(tag, opList);\n         }\n@@ -797,7 +796,7 @@ private void processReturnType(CodegenOperation op) {\n                 }\n             }\n         }\n-        if (returnType.indexOf(\" \") >= 0) {\n+        if (returnType.contains(\" \")) {\n             returnType = \"(\" + returnType + \")\";\n         }\n         op.vendorExtensions.put(X_RETURN_TYPE, returnType);\n@@ -829,8 +828,8 @@ private void processInlineConsumesContentType(CodegenOperation op, Map<String, S\n         if (op.vendorExtensions.containsKey(X_INLINE_CONTENT_TYPE)) return;\n         if ((boolean) additionalProperties.get(PROP_INLINE_MIME_TYPES)\n                 && op.consumes.size() == 1\n-                && op.consumes.get(0).get(X_MEDIA_DATA_TYPE) != MIME_ANY\n-                && op.consumes.get(0).get(X_MEDIA_DATA_TYPE) != MIME_NO_CONTENT) {\n+                && !MIME_ANY.equals(op.consumes.get(0).get(X_MEDIA_DATA_TYPE))\n+                && !MIME_NO_CONTENT.equals(op.consumes.get(0).get(X_MEDIA_DATA_TYPE))) {\n             op.vendorExtensions.put(X_INLINE_CONTENT_TYPE, m);\n             for (CodegenParameter param : op.allParams) {\n                 if (param.isBodyParam && param.required) {\n@@ -843,8 +842,8 @@ private void processInlineConsumesContentType(CodegenOperation op, Map<String, S\n     private void processInlineProducesContentType(CodegenOperation op, Map<String, String> m) {\n         if ((boolean) additionalProperties.get(PROP_INLINE_MIME_TYPES)\n                 && op.produces.size() == 1\n-                && op.produces.get(0).get(X_MEDIA_DATA_TYPE) != MIME_ANY\n-                && op.produces.get(0).get(X_MEDIA_DATA_TYPE) != MIME_NO_CONTENT) {\n+                && !MIME_ANY.equals(op.produces.get(0).get(X_MEDIA_DATA_TYPE))\n+                && !MIME_NO_CONTENT.equals(op.produces.get(0).get(X_MEDIA_DATA_TYPE))) {\n             op.vendorExtensions.put(X_INLINE_ACCEPT, m);\n         }\n     }",
      "parent_sha": "9cb2f8472f2dfab244eedc133cc2f2df39ec197a"
    }
  },
  {
    "oid": "2edcd820942a960341864878b737c8416b6d50e9",
    "message": "minor fix to output path",
    "date": "2015-05-28T11:16:26Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/2edcd820942a960341864878b737c8416b6d50e9",
    "details": {
      "sha": "957c784fd6a84e3bf962b130aca085135e4cbad7",
      "filename": "modules/swagger-codegen/src/main/java/com/wordnik/swagger/codegen/languages/ObjcClientCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/2edcd820942a960341864878b737c8416b6d50e9/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FObjcClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/2edcd820942a960341864878b737c8416b6d50e9/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FObjcClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2Flanguages%2FObjcClientCodegen.java?ref=2edcd820942a960341864878b737c8416b6d50e9",
      "patch": "@@ -26,7 +26,7 @@ public String getHelp() {\n \n   public ObjcClientCodegen() {\n     super();\n-    outputFolder = \"generated-code/objc\";\n+    outputFolder = \"generated-code\" + File.separator + \"objc\";\n     modelTemplateFiles.put(\"model-header.mustache\", \".h\");\n     modelTemplateFiles.put(\"model-body.mustache\", \".m\");\n     apiTemplateFiles.put(\"api-header.mustache\", \".h\");",
      "parent_sha": "1657f2e5f79ce74bdb8fec6e80ea5a0f95575dd2"
    }
  },
  {
    "oid": "120c0a05f0fef5f05c3cc1ed4f8bdf4f1a96baa7",
    "message": "Restore Ruby tests after parser update (#1753)\n\n* uncomment ruby test after parser update\r\n\r\n* remove comment",
    "date": "2018-12-26T02:36:58Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/120c0a05f0fef5f05c3cc1ed4f8bdf4f1a96baa7",
    "details": {
      "sha": "1d998bba8678486a3bd8cef7910ffc6baf96df22",
      "filename": "modules/openapi-generator/src/test/java/org/openapitools/codegen/ruby/RubyClientCodegenTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/120c0a05f0fef5f05c3cc1ed4f8bdf4f1a96baa7/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fruby%2FRubyClientCodegenTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/120c0a05f0fef5f05c3cc1ed4f8bdf4f1a96baa7/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fruby%2FRubyClientCodegenTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fruby%2FRubyClientCodegenTest.java?ref=120c0a05f0fef5f05c3cc1ed4f8bdf4f1a96baa7",
      "patch": "@@ -325,8 +325,7 @@ public void nullableParameterOAS2Test() {\n         CodegenParameter name = op.formParams.get(0);\n         Assert.assertFalse(name.isNullable);\n         CodegenParameter status = op.formParams.get(1);\n-        // TODO comment out the following until https://github.com/swagger-api/swagger-parser/issues/820 is solved\n-        //Assert.assertTrue(status.isNullable);\n+        Assert.assertTrue(status.isNullable);\n     }\n \n     @Test(description = \"test anyOf (OAS3)\")",
      "parent_sha": "7595baef00abd15e3b2b2b787309c5159522948d"
    }
  },
  {
    "oid": "01e1fb2415c7dcbe4d95c907b865489e37e57072",
    "message": "fix numeric enum throwing npe",
    "date": "2018-04-08T09:40:12Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/01e1fb2415c7dcbe4d95c907b865489e37e57072",
    "details": {
      "sha": "1d530d859fda460a3fb86205972b3420f83ad724",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/01e1fb2415c7dcbe4d95c907b865489e37e57072/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/01e1fb2415c7dcbe4d95c907b865489e37e57072/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java?ref=01e1fb2415c7dcbe4d95c907b865489e37e57072",
      "patch": "@@ -1610,10 +1610,10 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             }\n \n             if (p.getEnum() != null) {\n-                List<Integer> _enum = p.getEnum();\n+                List<Object> _enum = p.getEnum();\n                 property._enum = new ArrayList<String>();\n-                for (Integer i : _enum) {\n-                    property._enum.add(i.toString());\n+                for (Object i : _enum) {\n+                    property._enum.add(String.valueOf(i));\n                 }\n                 property.isEnum = true;\n                 allowableValues.put(\"values\", _enum);\n@@ -1679,10 +1679,10 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             }\n \n             if (p.getEnum() != null && !p.getEnum().isEmpty()) {\n-                List<Number> _enum = p.getEnum();\n+                List<Object> _enum = p.getEnum();\n                 property._enum = new ArrayList<String>();\n-                for (Number i : _enum) {\n-                    property._enum.add(i.toString());\n+                for (Object i : _enum) {\n+                    property._enum.add(String.valueOf(i));\n                 }\n                 property.isEnum = true;\n ",
      "parent_sha": "113e8ad9fda576d014c03d8d6ce1a8fc5f7ef155"
    }
  },
  {
    "oid": "6861d17996e0d6a423afc2a54eda72c6542b34e3",
    "message": "Swagr codegen: Correcting package name in comments",
    "date": "2011-08-01T16:55:46Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/6861d17996e0d6a423afc2a54eda72c6542b34e3",
    "details": {
      "sha": "011f1423dbf493387c04aa1a0561b6981878faa8",
      "filename": "code-gen/conf/java/structure/src/main/java/com/wordnik/swagger/common/WordnikAPI.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/6861d17996e0d6a423afc2a54eda72c6542b34e3/code-gen%2Fconf%2Fjava%2Fstructure%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcommon%2FWordnikAPI.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/6861d17996e0d6a423afc2a54eda72c6542b34e3/code-gen%2Fconf%2Fjava%2Fstructure%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcommon%2FWordnikAPI.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/code-gen%2Fconf%2Fjava%2Fstructure%2Fsrc%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcommon%2FWordnikAPI.java?ref=6861d17996e0d6a423afc2a54eda72c6542b34e3",
      "patch": "@@ -110,7 +110,7 @@ private static void setApiServer(String server) {\n \t * @param method - Method we should use for communicating to the back end. \n \t * @param postObject - if the method is POST, provide the object that should be sent as part of post request.\n \t * @return JSON response of the API call. \n-\t * @throws com.wordnik.exception.APIException if the call to API server fails.\n+\t * @throws com.wordnik.swagger.exception.APIException if the call to API server fails.\n \t */\n \tprotected static String invokeAPI(String authToken, String resourceURL, String method, Map<String,\n             String> queryParams, Object postObject) throws APIException {",
      "parent_sha": "7a29714a37d4c95114c93b2f57f031e5b0d981a6"
    }
  },
  {
    "oid": "1e92469b9f9f56acc8c2d472a4ed27475e439517",
    "message": "Decouple Slim4 codegen from deprecated Slim3 (#9208)\n\nIt was a mistake to extend Slim4 from Slim3 codegen. When I need to fix\r\nsomething in Slim4 I have to overwrite code from Slim3 somehow and it's\r\nnot always possible. It's even more important that Slim3 codegen shouldn't\r\nbe touched as soon as it's deprecated long time ago.",
    "date": "2021-05-24T02:43:18Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/1e92469b9f9f56acc8c2d472a4ed27475e439517",
    "details": {
      "sha": "9105a4fe8de4f8dbbd4c9a014810416e705050be",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PhpSlim4ServerCodegen.java",
      "status": "modified",
      "additions": 207,
      "deletions": 1,
      "changes": 208,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/1e92469b9f9f56acc8c2d472a4ed27475e439517/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPhpSlim4ServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/1e92469b9f9f56acc8c2d472a4ed27475e439517/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPhpSlim4ServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPhpSlim4ServerCodegen.java?ref=1e92469b9f9f56acc8c2d472a4ed27475e439517",
      "patch": "@@ -16,6 +16,14 @@\n \n package org.openapitools.codegen.languages;\n \n+import io.swagger.v3.oas.models.Operation;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+import io.swagger.v3.oas.models.servers.Server;\n+import org.apache.commons.lang3.StringEscapeUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.CodegenType;\n+import org.openapitools.codegen.CodegenOperation;\n+import org.openapitools.codegen.CodegenSecurity;\n import org.openapitools.codegen.CliOption;\n import org.openapitools.codegen.CodegenConstants;\n import org.openapitools.codegen.SupportingFile;\n@@ -26,12 +34,22 @@\n import org.slf4j.LoggerFactory;\n \n import java.io.File;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.util.*;\n \n-public class PhpSlim4ServerCodegen extends PhpSlimServerCodegen {\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+\n+public class PhpSlim4ServerCodegen extends AbstractPhpCodegen {\n     private final Logger LOGGER = LoggerFactory.getLogger(PhpSlim4ServerCodegen.class);\n \n+    public static final String USER_CLASSNAME_KEY = \"userClassname\";\n     public static final String PSR7_IMPLEMENTATION = \"psr7Implementation\";\n \n+    protected String groupId = \"org.openapitools\";\n+    protected String artifactId = \"openapi-server\";\n+    protected String authDirName = \"Auth\";\n+    protected String authPackage = \"\";\n     protected String psr7Implementation = \"slim-psr7\";\n     protected String interfacesDirName = \"Interfaces\";\n     protected String interfacesPackage = \"\";\n@@ -40,17 +58,48 @@ public PhpSlim4ServerCodegen() {\n         super();\n \n         modifyFeatureSet(features -> features\n+                .includeDocumentationFeatures(DocumentationFeature.Readme)\n+                .wireFormatFeatures(EnumSet.of(WireFormatFeature.JSON, WireFormatFeature.XML))\n+                .securityFeatures(EnumSet.noneOf(SecurityFeature.class))\n+                .excludeGlobalFeatures(\n+                        GlobalFeature.XMLStructureDefinitions,\n+                        GlobalFeature.Callbacks,\n+                        GlobalFeature.LinkObjects,\n+                        GlobalFeature.ParameterStyling\n+                )\n+                .excludeSchemaSupportFeatures(\n+                        SchemaSupportFeature.Polymorphism\n+                )\n                 .includeClientModificationFeatures(ClientModificationFeature.MockServer)\n         );\n \n         generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata)\n                 .stability(Stability.STABLE)\n                 .build();\n \n+        // clear import mapping (from default generator) as slim does not use it\n+        // at the moment\n+        importMapping.clear();\n+\n+        variableNamingConvention = \"camelCase\";\n+        artifactVersion = \"1.0.0\";\n+        setInvokerPackage(\"OpenAPIServer\");\n+        apiPackage = invokerPackage + \"\\\\\" + apiDirName;\n+        modelPackage = invokerPackage + \"\\\\\" + modelDirName;\n+        authPackage = invokerPackage + \"\\\\\" + authDirName;\n         interfacesPackage = invokerPackage + \"\\\\\" + interfacesDirName;\n         outputFolder = \"generated-code\" + File.separator + \"slim4\";\n+\n+        modelTestTemplateFiles.put(\"model_test.mustache\", \".php\");\n+        // no doc files\n+        modelDocTemplateFiles.clear();\n+        apiDocTemplateFiles.clear();\n+\n         embeddedTemplateDir = templateDir = \"php-slim4-server\";\n \n+        additionalProperties.put(CodegenConstants.GROUP_ID, groupId);\n+        additionalProperties.put(CodegenConstants.ARTIFACT_ID, artifactId);\n+\n         // override cliOptions from AbstractPhpCodegen\n         updateOption(AbstractPhpCodegen.VARIABLE_NAMING_CONVENTION, \"camelCase\");\n \n@@ -68,6 +117,11 @@ public PhpSlim4ServerCodegen() {\n         cliOptions.add(psr7Option);\n     }\n \n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.SERVER;\n+    }\n+\n     @Override\n     public String getName() {\n         return \"php-slim4\";\n@@ -78,15 +132,39 @@ public String getHelp() {\n         return \"Generates a PHP Slim 4 Framework server library(with Mock server).\";\n     }\n \n+    @Override\n+    public String apiFileFolder() {\n+        if (apiPackage.startsWith(invokerPackage + \"\\\\\")) {\n+            // need to strip out invokerPackage from path\n+            return (outputFolder + File.separator + toSrcPath(StringUtils.removeStart(apiPackage, invokerPackage + \"\\\\\"), srcBasePath));\n+        }\n+        return (outputFolder + File.separator + toSrcPath(apiPackage, srcBasePath));\n+    }\n+\n+    @Override\n+    public String modelFileFolder() {\n+        if (modelPackage.startsWith(invokerPackage + \"\\\\\")) {\n+            // need to strip out invokerPackage from path\n+            return (outputFolder + File.separator + toSrcPath(StringUtils.removeStart(modelPackage, invokerPackage + \"\\\\\"), srcBasePath));\n+        }\n+        return (outputFolder + File.separator + toSrcPath(modelPackage, srcBasePath));\n+    }\n+\n     @Override\n     public void processOpts() {\n         super.processOpts();\n \n         if (additionalProperties.containsKey(CodegenConstants.INVOKER_PACKAGE)) {\n+            // Update the invokerPackage for the default authPackage\n+            authPackage = invokerPackage + \"\\\\\" + authDirName;\n             // Update interfacesPackage\n             interfacesPackage = invokerPackage + \"\\\\\" + interfacesDirName;\n         }\n \n+        // make auth src path available in mustache template\n+        additionalProperties.put(\"authPackage\", authPackage);\n+        additionalProperties.put(\"authSrcPath\", \"./\" + toSrcPath(authPackage, srcBasePath));\n+\n         // same for interfaces package\n         additionalProperties.put(\"interfacesPackage\", interfacesPackage);\n         additionalProperties.put(\"interfacesSrcPath\", \"./\" + toSrcPath(interfacesPackage, srcBasePath));\n@@ -121,6 +199,14 @@ public void processOpts() {\n                 additionalProperties.put(\"isSlimPsr7\", Boolean.TRUE);\n         }\n \n+        supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\n+        supportingFiles.add(new SupportingFile(\"composer.mustache\", \"\", \"composer.json\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", \"\", \"index.php\"));\n+        supportingFiles.add(new SupportingFile(\".htaccess\", \"\", \".htaccess\"));\n+        supportingFiles.add(new SupportingFile(\"SlimRouter.mustache\", toSrcPath(invokerPackage, srcBasePath), \"SlimRouter.php\"));\n+        supportingFiles.add(new SupportingFile(\"phpunit.xml.mustache\", \"\", \"phpunit.xml.dist\"));\n+        supportingFiles.add(new SupportingFile(\"phpcs.xml.mustache\", \"\", \"phpcs.xml.dist\"));\n+\n         // Slim 4 doesn't parse JSON body anymore we need to add suggested middleware\n         // ref: https://www.slimframework.com/docs/v4/objects/request.html#the-request-body\n         supportingFiles.add(new SupportingFile(\"htaccess_deny_all\", \"config\", \".htaccess\"));\n@@ -131,6 +217,126 @@ public void processOpts() {\n         supportingFiles.add(new SupportingFile(\"base_model_test.mustache\", toSrcPath(invokerPackage, testBasePath), \"BaseModelTest.php\"));\n     }\n \n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        Map<String, Object> operations = (Map<String, Object>) objs.get(\"operations\");\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operations.get(\"operation\");\n+        addUserClassnameToOperations(operations);\n+        escapeMediaType(operationList);\n+        return objs;\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessSupportingFileData(Map<String, Object> objs) {\n+        Map<String, Object> apiInfo = (Map<String, Object>) objs.get(\"apiInfo\");\n+        List<HashMap<String, Object>> apiList = (List<HashMap<String, Object>>) apiInfo.get(\"apis\");\n+        for (HashMap<String, Object> api : apiList) {\n+            HashMap<String, Object> operations = (HashMap<String, Object>) api.get(\"operations\");\n+            List<CodegenOperation> operationList = (List<CodegenOperation>) operations.get(\"operation\");\n+\n+            // Sort operations to avoid static routes shadowing\n+            // ref: https://github.com/nikic/FastRoute/blob/master/src/DataGenerator/RegexBasedAbstract.php#L92-L101\n+            Collections.sort(operationList, new Comparator<CodegenOperation>() {\n+                @Override\n+                public int compare(CodegenOperation one, CodegenOperation another) {\n+                    if (one.getHasPathParams() && !another.getHasPathParams()) return 1;\n+                    if (!one.getHasPathParams() && another.getHasPathParams()) return -1;\n+                    return 0;\n+                }\n+            });\n+        }\n+        return objs;\n+    }\n+\n+    @Override\n+    public List<CodegenSecurity> fromSecurity(Map<String, SecurityScheme> securitySchemeMap) {\n+        List<CodegenSecurity> codegenSecurities = super.fromSecurity(securitySchemeMap);\n+        if (Boolean.FALSE.equals(codegenSecurities.isEmpty())) {\n+            supportingFiles.add(new SupportingFile(\"abstract_authenticator.mustache\", toSrcPath(authPackage, srcBasePath), toAbstractName(\"Authenticator\") + \".php\"));\n+        }\n+        return codegenSecurities;\n+    }\n+\n+    @Override\n+    public String toApiName(String name) {\n+        if (name.length() == 0) {\n+            return toAbstractName(\"DefaultApi\");\n+        }\n+        return toAbstractName(camelize(name) + \"Api\");\n+    }\n+\n+    @Override\n+    public String toApiTestFilename(String name) {\n+        if (name.length() == 0) {\n+            return \"DefaultApiTest\";\n+        }\n+        return camelize(name) + \"ApiTest\";\n+    }\n+\n+    /**\n+     * Strips out abstract prefix and suffix from classname and puts it in \"userClassname\" property of operations object.\n+     *\n+     * @param operations codegen object with operations\n+     */\n+    private void addUserClassnameToOperations(Map<String, Object> operations) {\n+        String classname = (String) operations.get(\"classname\");\n+        classname = classname.replaceAll(\"^\" + abstractNamePrefix, \"\");\n+        classname = classname.replaceAll(abstractNameSuffix + \"$\", \"\");\n+        operations.put(USER_CLASSNAME_KEY, classname);\n+    }\n+\n+    @Override\n+    public String encodePath(String input) {\n+        if (input == null) {\n+            return input;\n+        }\n+\n+        // from DefaultCodegen.java\n+        // remove \\t, \\n, \\r\n+        // replace \\ with \\\\\n+        // replace \" with \\\"\n+        // outter unescape to retain the original multi-byte characters\n+        // finally escalate characters avoiding code injection\n+        input = super.escapeUnsafeCharacters(\n+                StringEscapeUtils.unescapeJava(\n+                        StringEscapeUtils.escapeJava(input)\n+                                .replace(\"\\\\/\", \"/\"))\n+                        .replaceAll(\"[\\\\t\\\\n\\\\r]\", \" \")\n+                        .replace(\"\\\\\", \"\\\\\\\\\"));\n+        // .replace(\"\\\"\", \"\\\\\\\"\"));\n+\n+        // from AbstractPhpCodegen.java\n+        // Trim the string to avoid leading and trailing spaces.\n+        input = input.trim();\n+        try {\n+\n+            input = URLEncoder.encode(input, \"UTF-8\")\n+                    .replaceAll(\"\\\\+\", \"%20\")\n+                    .replaceAll(\"\\\\%2F\", \"/\")\n+                    .replaceAll(\"\\\\%7B\", \"{\") // keep { part of complex placeholders\n+                    .replaceAll(\"\\\\%7D\", \"}\") // } part\n+                    .replaceAll(\"\\\\%5B\", \"[\") // [ part\n+                    .replaceAll(\"\\\\%5D\", \"]\") // ] part\n+                    .replaceAll(\"\\\\%3A\", \":\") // : part\n+                    .replaceAll(\"\\\\%2B\", \"+\") // + part\n+                    .replaceAll(\"\\\\%5C\\\\%5Cd\", \"\\\\\\\\d\"); // \\d part\n+        } catch (UnsupportedEncodingException e) {\n+            // continue\n+            LOGGER.error(e.getMessage(), e);\n+        }\n+        return input;\n+    }\n+\n+    @Override\n+    public CodegenOperation fromOperation(String path,\n+                                          String httpMethod,\n+                                          Operation operation,\n+                                          List<Server> servers) {\n+        CodegenOperation op = super.fromOperation(path, httpMethod, operation, servers);\n+        op.path = encodePath(path);\n+        return op;\n+    }\n+\n     /**\n      * Set PSR-7 implementation package.\n      * Ref: https://www.slimframework.com/docs/v4/concepts/value-objects.html",
      "parent_sha": "7c152daa482be272ab949ae48686288b0cc5a4a0"
    }
  },
  {
    "oid": "3346388056f82b9c9df37de92f7991c7a9deb6c9",
    "message": "null check",
    "date": "2016-07-16T04:39:58Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/3346388056f82b9c9df37de92f7991c7a9deb6c9",
    "details": {
      "sha": "20b6acca907ad10097be4edb4529314ad3e571d9",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/3346388056f82b9c9df37de92f7991c7a9deb6c9/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/3346388056f82b9c9df37de92f7991c7a9deb6c9/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=3346388056f82b9c9df37de92f7991c7a9deb6c9",
      "patch": "@@ -259,7 +259,10 @@ private int getInheritanceDepth(Model model) {\n \n                     private Model getParent(Model model) {\n                         if (model instanceof ComposedModel) {\n-                            return definitions.get(((ComposedModel) model).getParent().getReference());\n+                            Model parent = ((ComposedModel) model).getParent();\n+                            if(parent != null) {\n+                                return definitions.get(parent.getReference());\n+                            }\n                         }\n \n                         return null;",
      "parent_sha": "d9aa1dd98518b09aa9f8db4433fc065ee8c97bf4"
    }
  },
  {
    "oid": "b4d835f6836f7dff1577064249afa69cd701e7ac",
    "message": "rename perl environment variable (#1172)",
    "date": "2018-10-04T15:54:10Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/b4d835f6836f7dff1577064249afa69cd701e7ac",
    "details": {
      "sha": "f2c52611a26ffcf3003200e099d12c75427e2edf",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PerlClientCodegen.java",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/b4d835f6836f7dff1577064249afa69cd701e7ac/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPerlClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/b4d835f6836f7dff1577064249afa69cd701e7ac/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPerlClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPerlClientCodegen.java?ref=b4d835f6836f7dff1577064249afa69cd701e7ac",
      "patch": "@@ -133,8 +133,8 @@ public PerlClientCodegen() {\n     public void processOpts() {\n         super.processOpts();\n \n-        if (StringUtils.isEmpty(System.getenv(\"PERLTIDY_PATH\"))) {\n-            LOGGER.info(\"Environment variable PERLTIDY_PATH not defined so the Perl code may not be properly formatted. To define it, try 'export PERLTIDY_PATH=/usr/local/bin/perltidy' (Linux/Mac)\");\n+        if (StringUtils.isEmpty(System.getenv(\"PERL_POST_PROCESS_FILE\"))) {\n+            LOGGER.info(\"Environment variable PERL_POST_PROCESS_FILE not defined so the Perl code may not be properly formatted. To define it, try 'export PERL_POST_PROCESS_FILE=/usr/local/bin/perltidy -b -bext=\\\"/\\\"' (Linux/Mac)\");\n         }\n \n         if (additionalProperties.containsKey(MODULE_VERSION)) {\n@@ -571,9 +571,9 @@ public void postProcessFile(File file, String fileType) {\n             return;\n         }\n \n-        String perlTidyPath = System.getenv(\"PERLTIDY_PATH\");\n+        String perlTidyPath = System.getenv(\"PERL_POST_PROCESS_FILE\");\n         if (StringUtils.isEmpty(perlTidyPath)) {\n-            return; // skip if PERLTIDY_PATH env variable is not defined\n+            return; // skip if PERL_POST_PROCESS_FILE env variable is not defined\n         }\n \n         // only process files with .t, .pm extension\n@@ -583,11 +583,12 @@ public void postProcessFile(File file, String fileType) {\n             String command = perlTidyPath + \" -b -bext='/' \" + file.toString();\n             try {\n                 Process p = Runtime.getRuntime().exec(command);\n-                p.waitFor();\n-                if (p.exitValue() != 0) {\n-                    LOGGER.error(\"Error running the command ({}). Exit code: {}\", command, p.exitValue());\n+                int exitValue = p.waitFor();\n+                if (exitValue != 0) {\n+                    LOGGER.error(\"Error running the command ({}). Exit code: {}\", command, exitValue);\n+                } else {\n+                    LOGGER.info(\"Successfully executed: \" + command);\n                 }\n-                LOGGER.info(\"Successfully executed: \" + command);\n             } catch (Exception e) {\n                 LOGGER.error(\"Error running the command ({}). Exception: {}\", command, e.getMessage());\n             }",
      "parent_sha": "06d31cfedb7ad3bd74ab08b5df129da8fffd0732"
    }
  },
  {
    "oid": "a4b356c8b392c39508ac441d79783f2b7ce6e5e1",
    "message": "fix typo (#8452)",
    "date": "2021-01-15T14:00:01Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/a4b356c8b392c39508ac441d79783f2b7ce6e5e1",
    "details": {
      "sha": "b66b232129f2660f595bc8b3e4ef2e6c3fc0fe8a",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/a4b356c8b392c39508ac441d79783f2b7ce6e5e1/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FCodegenConstants.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/a4b356c8b392c39508ac441d79783f2b7ce6e5e1/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FCodegenConstants.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FCodegenConstants.java?ref=a4b356c8b392c39508ac441d79783f2b7ce6e5e1",
      "patch": "@@ -226,7 +226,7 @@ public static enum ENUM_PROPERTY_NAMING_TYPE {camelCase, PascalCase, snake_case,\n     public static final String API_NAME_PREFIX_DESC = \"Prefix that will be appended to all API names ('tags'). Default: empty string. e.g. Pet => Pet.\";\n \n     public static final String API_NAME_SUFFIX = \"apiNameSuffix\";\n-    public static final String API_NAME_SUFFIX_DESC = \"Suffix that will be appended to all API names ('tags'). Default: Api. e.g. Pet => PetApi. Note: Only ruby, python, jaxrs generators suppport this feature at the moment.\";\n+    public static final String API_NAME_SUFFIX_DESC = \"Suffix that will be appended to all API names ('tags'). Default: Api. e.g. Pet => PetApi. Note: Only ruby, python, jaxrs generators support this feature at the moment.\";\n \n     public static final String MODEL_NAME_PREFIX = \"modelNamePrefix\";\n     public static final String MODEL_NAME_PREFIX_DESC = \"Prefix that will be prepended to all model names.\";",
      "parent_sha": "e78183abdeea8ed342945c8bb27a86c75e335c0e"
    }
  },
  {
    "oid": "ac14e66da1a01d33a000f9c620816b1df7e2b7a3",
    "message": "skip warning, better code format for jetbrain http client generator (#18299)",
    "date": "2024-04-06T03:01:08Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/ac14e66da1a01d33a000f9c620816b1df7e2b7a3",
    "details": {
      "sha": "6f3f393534f7e58957fcce80c694d795ee3075a8",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/JetbrainsHttpClientClientCodegen.java",
      "status": "modified",
      "additions": 37,
      "deletions": 27,
      "changes": 64,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/ac14e66da1a01d33a000f9c620816b1df7e2b7a3/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJetbrainsHttpClientClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/ac14e66da1a01d33a000f9c620816b1df7e2b7a3/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJetbrainsHttpClientClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJetbrainsHttpClientClientCodegen.java?ref=ac14e66da1a01d33a000f9c620816b1df7e2b7a3",
      "patch": "@@ -109,11 +109,11 @@ public void processOpts() {\n \n         var additionalProperties = additionalProperties();\n \n-        if(additionalProperties.containsKey(BODY_VARIABLES)) {\n+        if (additionalProperties.containsKey(BODY_VARIABLES)) {\n             bodyVariables = Arrays.asList(additionalProperties.get(BODY_VARIABLES).toString().split(\"-\"));\n         }\n \n-        if(additionalProperties.containsKey(CUSTOM_HEADERS)) {\n+        if (additionalProperties.containsKey(CUSTOM_HEADERS)) {\n             customHeaders = Arrays.asList(additionalProperties.get(CUSTOM_HEADERS).toString().split(\"&\"));\n         }\n     }\n@@ -138,15 +138,15 @@ public void execute(Template.Fragment fragment, Writer writer) throws IOExceptio\n \n     @Override\n     public OperationsMap postProcessOperationsWithModels(OperationsMap objs, List<ModelMap> allModels) {\n-        OperationsMap results =  super.postProcessOperationsWithModels(objs, allModels);\n+        OperationsMap results = super.postProcessOperationsWithModels(objs, allModels);\n \n         OperationMap ops = results.getOperations();\n         List<CodegenOperation> opList = ops.getOperation();\n \n-        for(CodegenOperation codegenOperation : opList) {\n+        for (CodegenOperation codegenOperation : opList) {\n             List<RequestItem> requests = getRequests(codegenOperation);\n \n-            if(requests != null) {\n+            if (requests != null) {\n                 codegenOperation.vendorExtensions.put(\"requests\", requests);\n                 //Adding to each operation for now, we may be smarter later on\n                 codegenOperation.vendorExtensions.put(\"customHeaders\", customHeaders);\n@@ -158,7 +158,7 @@ public OperationsMap postProcessOperationsWithModels(OperationsMap objs, List<Mo\n     List<RequestItem> getRequests(CodegenOperation codegenOperation) {\n         List<RequestItem> items = new ArrayList<>();\n \n-        if(codegenOperation.getHasBodyParam()) {\n+        if (codegenOperation.getHasBodyParam()) {\n             // operation with bodyParam\n             if (requestParameterGeneration.equalsIgnoreCase(\"Schema\")) {\n                 // get from schema\n@@ -173,7 +173,7 @@ List<RequestItem> getRequests(CodegenOperation codegenOperation) {\n                     // find in components/examples\n                     for (Map.Entry<String, Example> entry : codegenOperation.bodyParam.getContent().get(\"application/json\").getExamples().entrySet()) {\n                         String exampleRef = entry.getValue().get$ref();\n-                        if(exampleRef != null){\n+                        if (exampleRef != null) {\n                             Example example = this.openAPI.getComponents().getExamples().get(extractExampleByName(exampleRef));\n                             String exampleAsString = getJsonFromExample(example);\n                             items.add(new RequestItem(example.getSummary(), exampleAsString));\n@@ -200,11 +200,11 @@ List<RequestItem> getRequests(CodegenOperation codegenOperation) {\n     }\n \n     private List<RequestItem> handleCustomVariablesInRequests(List<RequestItem> items) {\n-        if(!bodyVariables.isEmpty()){\n-            for(var item : items){\n-                for(var customVariable: bodyVariables){\n+        if (!bodyVariables.isEmpty()) {\n+            for (var item : items) {\n+                for (var customVariable : bodyVariables) {\n                     var body = item.getBody();\n-                    if(body != null){\n+                    if (body != null) {\n                         body = body.replace(customVariable, \"{{\" + customVariable + \"}}\");\n                         item.setBody(body);\n                     }\n@@ -269,7 +269,7 @@ public String getJsonFromSchema(CodegenParameter codegenParameter) {\n             ret = ret + JSON_ESCAPE_DOUBLE_QUOTE + codegenProperty.baseName + JSON_ESCAPE_DOUBLE_QUOTE + \": \" +\n                     JSON_ESCAPE_DOUBLE_QUOTE + \"<\" + getType(codegenProperty) + \">\" + JSON_ESCAPE_DOUBLE_QUOTE;\n \n-            if(counter < numVars) {\n+            if (counter < numVars) {\n                 // add comma unless last attribute\n                 ret = ret + \",\" + JSON_ESCAPE_NEW_LINE + \" \";\n             }\n@@ -283,9 +283,9 @@ public String getJsonFromSchema(CodegenParameter codegenParameter) {\n     }\n \n     public String getType(CodegenProperty codegenProperty) {\n-        if(codegenProperty.isNumeric) {\n+        if (codegenProperty.isNumeric) {\n             return \"number\";\n-        } else if(codegenProperty.isDate) {\n+        } else if (codegenProperty.isDate) {\n             return \"date\";\n         } else {\n             return \"string\";\n@@ -316,14 +316,14 @@ public String extractExampleByName(String ref) {\n     public String getJsonFromExample(Example example) {\n         String ret = \"\";\n \n-        if(example == null) {\n+        if (example == null) {\n             return ret;\n         }\n \n-        if(example.getValue() instanceof ObjectNode) {\n-            ret = convertToJson((ObjectNode)example.getValue());\n-        } else if(example.getValue() instanceof LinkedHashMap) {\n-            ret = convertToJson((LinkedHashMap)example.getValue());\n+        if (example.getValue() instanceof ObjectNode) {\n+            ret = convertToJson((ObjectNode) example.getValue());\n+        } else if (example.getValue() instanceof LinkedHashMap) {\n+            ret = convertToJson((LinkedHashMap) example.getValue());\n         }\n \n         return ret;\n@@ -350,9 +350,9 @@ private String traverseMap(LinkedHashMap<String, Object> linkedHashMap, String r\n             String key = mapElement.getKey();\n             Object value = mapElement.getValue();\n \n-            if(value instanceof String) {\n+            if (value instanceof String) {\n                 // unescape double quotes already escaped\n-                value = ((String)value).replace(\"\\\\\\\"\", \"\\\"\");\n+                value = ((String) value).replace(\"\\\\\\\"\", \"\\\"\");\n \n                 ret = ret + JSON_ESCAPE_DOUBLE_QUOTE + key + JSON_ESCAPE_DOUBLE_QUOTE + \": \" +\n                         JSON_ESCAPE_DOUBLE_QUOTE + value + JSON_ESCAPE_DOUBLE_QUOTE;\n@@ -369,20 +369,21 @@ private String traverseMap(LinkedHashMap<String, Object> linkedHashMap, String r\n \n                 for (int i = 0; i < items.size(); i++) {\n                     jsonBuilder.append(JSON_ESCAPE_DOUBLE_QUOTE).append(items.get(i)).append(JSON_ESCAPE_DOUBLE_QUOTE);\n-                    if (i < items.size() - 1) {jsonBuilder.append(\",\");}\n+                    if (i < items.size() - 1) {\n+                        jsonBuilder.append(\",\");\n+                    }\n                 }\n                 jsonBuilder.append(\"]\");\n \n-                ret = ret + JSON_ESCAPE_DOUBLE_QUOTE + key + JSON_ESCAPE_DOUBLE_QUOTE + \": \" + jsonBuilder ;\n-            }\n-            else {\n+                ret = ret + JSON_ESCAPE_DOUBLE_QUOTE + key + JSON_ESCAPE_DOUBLE_QUOTE + \": \" + jsonBuilder;\n+            } else {\n                 LOGGER.warn(\"Value type unrecognised: \" + value.getClass());\n                 //WARNING: here we are undoing what is done in \"add comma unless last attribute\"\n                 // This is meant to avoid dangling commas if we encounter an unknown type\n                 ret = ret.substring(0, ret.length() - 3);\n             }\n \n-            if(counter < numVars ) {\n+            if (counter < numVars) {\n                 // add comma unless last attribute\n                 ret = ret + \",\" + JSON_ESCAPE_NEW_LINE + \" \";\n             }\n@@ -394,4 +395,13 @@ private String traverseMap(LinkedHashMap<String, Object> linkedHashMap, String r\n         return ret;\n     }\n \n-}\n+    @Override\n+    public String escapeUnsafeCharacters(String input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public String escapeQuotationMark(String input) {\n+        return input;\n+    }\n+}\n\\ No newline at end of file",
      "parent_sha": "1024c7733eb9ec3f5acd3482593a9f3ff25fb61d"
    }
  },
  {
    "oid": "5aced550750ab9b7c8f4ca2700fb93cd9e5a0f03",
    "message": "Fix Java Play server generator when path variables aren't camelCase (#6086)",
    "date": "2017-07-17T17:33:52Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/5aced550750ab9b7c8f4ca2700fb93cd9e5a0f03",
    "details": {
      "sha": "b096af03982e744a0767617f03a32e4bbe9b59a6",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavaPlayFrameworkCodegen.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/5aced550750ab9b7c8f4ca2700fb93cd9e5a0f03/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FJavaPlayFrameworkCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/5aced550750ab9b7c8f4ca2700fb93cd9e5a0f03/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FJavaPlayFrameworkCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FJavaPlayFrameworkCodegen.java?ref=5aced550750ab9b7c8f4ca2700fb93cd9e5a0f03",
      "patch": "@@ -10,6 +10,8 @@\n import java.io.File;\n import java.util.List;\n import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n public class JavaPlayFrameworkCodegen extends AbstractJavaCodegen implements BeanValidationFeatures {\n \n@@ -264,8 +266,12 @@ public Map<String, Object> postProcessOperations(Map<String, Object> objs) {\n                     }\n                 }\n \n-                if (operation.path.contains(\"{\")) {\n-                    operation.path = operation.path.replace(\"{\", \":\").replace(\"}\", \"\");\n+                Pattern pathVariableMatcher = Pattern.compile(\"\\\\{(.+)}\");\n+                Matcher match = pathVariableMatcher.matcher(operation.path);\n+                while (match.find()) {\n+                    String completeMatch = match.group();\n+                    String replacement = \":\" + camelize(match.group(1), true);\n+                    operation.path = operation.path.replace(completeMatch, replacement);\n                 }\n \n                 if (operation.returnType != null) {",
      "parent_sha": "f999936c1d17199fa129746e717215a8d390737c"
    }
  },
  {
    "oid": "aebfacaa2251a201903175e1212f84995e710031",
    "message": "Adjusted codegen to fit pull request comments in https://github.com/swagger-api/swagger-codegen/pull/1619",
    "date": "2015-11-27T14:25:40Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/aebfacaa2251a201903175e1212f84995e710031",
    "details": {
      "sha": "ef318cb6bddf5f8b00e63a1ea0f0d293d6c0705e",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/SlimFrameworkServerCodegen.java",
      "status": "modified",
      "additions": 34,
      "deletions": 8,
      "changes": 42,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/aebfacaa2251a201903175e1212f84995e710031/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSlimFrameworkServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/aebfacaa2251a201903175e1212f84995e710031/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSlimFrameworkServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSlimFrameworkServerCodegen.java?ref=aebfacaa2251a201903175e1212f84995e710031",
      "patch": "@@ -8,6 +8,7 @@\n import io.swagger.models.properties.ArrayProperty;\n import io.swagger.models.properties.MapProperty;\n import io.swagger.models.properties.Property;\n+import io.swagger.models.properties.RefProperty;\n \n import java.io.File;\n import java.util.Arrays;\n@@ -19,6 +20,7 @@ public class SlimFrameworkServerCodegen extends DefaultCodegen implements Codege\n     protected String groupId = \"io.swagger\";\n     protected String artifactId = \"swagger-server\";\n     protected String artifactVersion = \"1.0.0\";\n+    private String variableNamingConvention = \"camelCase\";\n \n     public SlimFrameworkServerCodegen() {\n         super();\n@@ -73,10 +75,10 @@ public SlimFrameworkServerCodegen() {\n         typeMapping.put(\"double\", \"double\");\n         typeMapping.put(\"string\", \"string\");\n         typeMapping.put(\"byte\", \"int\");\n-        typeMapping.put(\"boolean\", \"boolean\");\n-        typeMapping.put(\"date\", \"DateTime\");\n-        typeMapping.put(\"datetime\", \"DateTime\");\n-        typeMapping.put(\"file\", \"string\");\n+        typeMapping.put(\"boolean\", \"bool\");\n+        typeMapping.put(\"date\", \"\\\\DateTime\");\n+        typeMapping.put(\"datetime\", \"\\\\DateTime\");\n+        typeMapping.put(\"file\", \"\\\\SplFileObject\");\n         typeMapping.put(\"map\", \"map\");\n         typeMapping.put(\"array\", \"array\");\n         typeMapping.put(\"list\", \"array\");\n@@ -119,11 +121,15 @@ public String getTypeDeclaration(Property p) {\n         if (p instanceof ArrayProperty) {\n             ArrayProperty ap = (ArrayProperty) p;\n             Property inner = ap.getItems();\n-            return getSwaggerType(p) + \"[\" + getTypeDeclaration(inner) + \"]\";\n+            return getTypeDeclaration(inner) + \"[]\";\n         } else if (p instanceof MapProperty) {\n             MapProperty mp = (MapProperty) p;\n             Property inner = mp.getAdditionalProperties();\n             return getSwaggerType(p) + \"[string,\" + getTypeDeclaration(inner) + \"]\";\n+        } else if (p instanceof RefProperty) {\n+            String type = super.getTypeDeclaration(p);\n+            return (!languageSpecificPrimitives.contains(type))\n+                    ? \"\\\\\" + modelPackage + \"\\\\\" + type : type;\n         }\n         return super.getTypeDeclaration(p);\n     }\n@@ -148,16 +154,36 @@ public String getSwaggerType(Property p) {\n         return toModelName(type);\n     }\n \n+    @Override\n+    public String getTypeDeclaration(String name) {\n+        if (!languageSpecificPrimitives.contains(name)) {\n+            return \"\\\\\" + modelPackage + \"\\\\\" + name;\n+        }\n+        return super.getTypeDeclaration(name);\n+    }\n+\n     public String toDefaultValue(Property p) {\n         return \"null\";\n     }\n \n+    public void setParameterNamingConvention(String variableNamingConvention) {\n+        this.variableNamingConvention = variableNamingConvention;\n+    }\n \n     @Override\n     public String toVarName(String name) {\n-        // return the name in underscore style\n-        // PhoneNumber => phone_number\n-        name = underscore(name);\n+        // sanitize name\n+        name = sanitizeName(name);\n+\n+        if (\"camelCase\".equals(variableNamingConvention)) {\n+            // return the name in camelCase style\n+            // phone_number => phoneNumber\n+            name =  camelize(name, true);\n+        } else { // default to snake case\n+            // return the name in underscore style\n+            // PhoneNumber => phone_number\n+            name =  underscore(name);\n+        }\n \n         // parameter name starting with number won't compile\n         // need to escape it by appending _ at the beginning",
      "parent_sha": "d38933f927e8914f60d2f791a4a58a2ec1fe3314"
    }
  },
  {
    "oid": "460e5befec4e5f821e6f0808b5fc166844f578c9",
    "message": "fixed index issue",
    "date": "2015-12-30T18:42:20Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/460e5befec4e5f821e6f0808b5fc166844f578c9",
    "details": {
      "sha": "1cf57b8bdef11a2833cfec0f0409fad8af7505c2",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/460e5befec4e5f821e6f0808b5fc166844f578c9/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FJaxRSServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/460e5befec4e5f821e6f0808b5fc166844f578c9/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FJaxRSServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FJaxRSServerCodegen.java?ref=460e5befec4e5f821e6f0808b5fc166844f578c9",
      "patch": "@@ -171,7 +171,7 @@ public void preprocessSwagger(Swagger swagger) {\n         String port = \"8080\";\n         if(host != null) {\n             String[] parts = host.split(\":\");\n-            if(parts.length > 0) {\n+            if(parts.length > 1) {\n                 port = parts[1];\n             }\n         }",
      "parent_sha": "05b0d8f1bf3229ebda5cb338362f56a5cce6096d"
    }
  },
  {
    "oid": "3993ef3dc8c2c6b88c1361324f7b5ccf5db9390c",
    "message": "Update python codegen.\n\nRemove leading underscore.",
    "date": "2015-07-16T10:58:23Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/3993ef3dc8c2c6b88c1361324f7b5ccf5db9390c",
    "details": {
      "sha": "8f78f2e1d490d4b9b0485128c738e41c162b8cf5",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/PythonClientCodegen.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/3993ef3dc8c2c6b88c1361324f7b5ccf5db9390c/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/3993ef3dc8c2c6b88c1361324f7b5ccf5db9390c/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPythonClientCodegen.java?ref=3993ef3dc8c2c6b88c1361324f7b5ccf5db9390c",
      "patch": "@@ -117,7 +117,7 @@ public String getHelp() {\n \r\n     @Override\r\n     public String escapeReservedWord(String name) {\r\n-        return \"_\" + name;\r\n+        return name + \"_\";\r\n     }\r\n \r\n     @Override\r\n@@ -160,8 +160,7 @@ public String getSwaggerType(Property p) {\n     }\r\n \r\n     public String toDefaultValue(Property p) {\r\n-        // TODO: Support Python def value\r\n-        return \"null\";\r\n+        return \"None\";\r\n     }\r\n \r\n     @Override\r\n@@ -183,6 +182,9 @@ public String toVarName(String name) {\n             name = escapeReservedWord(name);\r\n         }\r\n \r\n+        // remove leading underscore\r\n+        name = name.replaceAll(\"^_*\", \"\");\r\n+\r\n         return name;\r\n     }\r\n \r",
      "parent_sha": "8746f1544b3ebeb7b5019a069b2643cd1aa37c3a"
    }
  },
  {
    "oid": "c386da6ded5df709d714f538656a44ceb39b8bad",
    "message": "fix order of imports in operations",
    "date": "2016-11-15T20:45:15Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/c386da6ded5df709d714f538656a44ceb39b8bad",
    "details": {
      "sha": "c12d4062630bc1ac6a92ba19b77045218808621d",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/c386da6ded5df709d714f538656a44ceb39b8bad/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/c386da6ded5df709d714f538656a44ceb39b8bad/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=c386da6ded5df709d714f538656a44ceb39b8bad",
      "patch": "@@ -840,7 +840,7 @@ public Map<String, Object> processOperations(CodegenConfig config, String tag, L\n         operations.put(\"package\", config.apiPackage());\n \n \n-        Set<String> allImports = new LinkedHashSet<String>();\n+        Set<String> allImports = new TreeSet<String>();\n         for (CodegenOperation op : ops) {\n             allImports.addAll(op.imports);\n         }",
      "parent_sha": "97924c78a02629ff9b303a2aa171503feb701867"
    }
  },
  {
    "oid": "a20cee3024c84ab1bb11e017f45960903bfd7524",
    "message": "Add isSkipOperationExample check before generating op.requestBodyExamples in the DefaultCodeGe. This avoids the running out of heap space error one gets when generating a large spec file (#11144)\n\nCo-authored-by: Kristopher Tadlock <tadlockk@infintech.com>",
    "date": "2022-01-02T10:14:46Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/a20cee3024c84ab1bb11e017f45960903bfd7524",
    "details": {
      "sha": "8a96688f5fac7809c982e740517a20eb4ac0b6e8",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/a20cee3024c84ab1bb11e017f45960903bfd7524/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/a20cee3024c84ab1bb11e017f45960903bfd7524/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java?ref=a20cee3024c84ab1bb11e017f45960903bfd7524",
      "patch": "@@ -4103,7 +4103,7 @@ public CodegenOperation fromOperation(String path,\n                 }\n \n                 // add example\n-                if (schemas != null) {\n+                if (schemas != null && !isSkipOperationExample()) {\n                     op.requestBodyExamples = new ExampleGenerator(schemas, this.openAPI).generate(null, new ArrayList<>(getConsumesInfo(this.openAPI, operation)), bodyParam.baseType);\n                 }\n             }",
      "parent_sha": "2db3e6bb2563381d22c702b498cbdf1688b1b77b"
    }
  },
  {
    "oid": "97640e622ace44e4454d988e3e54de6428221777",
    "message": "fix dollar sign in parameter name (C#)",
    "date": "2016-02-17T02:44:23Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/97640e622ace44e4454d988e3e54de6428221777",
    "details": {
      "sha": "78b5560d53d460d32287b2847ed5c66d48b32025",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/AbstractCSharpCodegen.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/97640e622ace44e4454d988e3e54de6428221777/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/97640e622ace44e4454d988e3e54de6428221777/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractCSharpCodegen.java?ref=97640e622ace44e4454d988e3e54de6428221777",
      "patch": "@@ -292,7 +292,7 @@ public String toOperationId(String operationId) {\n     @Override\n     public String toVarName(String name) {\n         // sanitize name\n-        name = sanitizeName(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.\n+        name = sanitizeName(name);\n \n         // if it's all uppper case, do nothing\n         if (name.matches(\"^[A-Z_]*$\")) {\n@@ -313,6 +313,9 @@ public String toVarName(String name) {\n \n     @Override\n     public String toParamName(String name) {\n+        // sanitize name\n+        name = sanitizeName(name);\n+\n         // replace - with _ e.g. created-at => created_at\n         name = name.replaceAll(\"-\", \"_\");\n ",
      "parent_sha": "a87ce3181b1c1a6f666f9fd1ea0a082601bb7300"
    }
  },
  {
    "oid": "47813a88a2adb43e1b292190a6130912952c2f6b",
    "message": "update imports for enum (#14546)",
    "date": "2023-01-28T04:10:59Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/47813a88a2adb43e1b292190a6130912952c2f6b",
    "details": {
      "sha": "4021a92f502fbc764e4d17998b97ab93c11523cf",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java",
      "status": "modified",
      "additions": 47,
      "deletions": 20,
      "changes": 67,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/47813a88a2adb43e1b292190a6130912952c2f6b/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaSttpClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/47813a88a2adb43e1b292190a6130912952c2f6b/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaSttpClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaSttpClientCodegen.java?ref=47813a88a2adb43e1b292190a6130912952c2f6b",
      "patch": "@@ -79,6 +79,8 @@ public class ScalaSttpClientCodegen extends AbstractScalaCodegen implements Code\n     protected boolean renderJavadoc = true;\n     protected boolean removeOAuthSecurities = true;\n \n+    Map<String, ModelsMap> enumRefs = new HashMap<>();\n+\n     public ScalaSttpClientCodegen() {\n         super();\n         generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata)\n@@ -261,21 +263,16 @@ public Map<String, ModelsMap> postProcessAllModels(Map<String, ModelsMap> objs)\n     @SuppressWarnings(\"unchecked\")\n     private void postProcessUpdateImports(final Map<String, ModelsMap> models) {\n         final String prefix = modelPackage() + \".\";\n-        Map<String, ModelsMap> enumRefs = new HashMap<>();\n-        for (String key : models.keySet()) {\n-            CodegenModel model = ModelUtils.getModelByName(key, models);\n-            if (model.isEnum) {\n-                ModelsMap objs = models.get(key);\n-                enumRefs.put(key, objs);\n-            }\n-        }\n+\n+        enumRefs = getEnumRefs(models);\n \n         for (String openAPIName : models.keySet()) {\n             CodegenModel model = ModelUtils.getModelByName(openAPIName, models);\n             if (model == null) {\n                 LOGGER.warn(\"Expected to retrieve model {} by name, but no model was found. Check your -Dmodels inclusions.\", openAPIName);\n                 continue;\n             }\n+\n             ModelsMap objs = models.get(openAPIName);\n             List<Map<String, String>> imports = objs.getImports();\n             if (imports == null || imports.isEmpty()) {\n@@ -285,25 +282,35 @@ private void postProcessUpdateImports(final Map<String, ModelsMap> models) {\n             Iterator<Map<String, String>> iterator = imports.iterator();\n             while (iterator.hasNext()) {\n                 String importPath = iterator.next().get(\"import\");\n+                Map<String, String> item = new HashMap<>();\n                 if (importPath.startsWith(prefix)) {\n-                     if (isEnumClass(importPath, enumRefs)) {\n-                         Map<String, String> item = new HashMap<>();\n-                         item.put(\"import\", importPath.concat(\"._\"));\n-                         newImports.add(item);\n-                     }\n-                 }\n-                 else {\n-                      Map<String, String> item = new HashMap<>();\n-                      item.put(\"import\", importPath);\n-                      newImports.add(item);\n-                 }\n-\n+                    if (isEnumClass(importPath, enumRefs)) {\n+                        item.put(\"import\", importPath.concat(\"._\"));\n+                        newImports.add(item);\n+                    }\n+                }\n+                else {\n+                    item.put(\"import\", importPath);\n+                    newImports.add(item);\n+                }\n             }\n             // reset imports\n             objs.setImports(newImports);\n         }\n     }\n \n+    private Map<String, ModelsMap> getEnumRefs(final Map<String, ModelsMap> models) {\n+        Map<String, ModelsMap> enums = new HashMap<>();\n+        for (String key : models.keySet()) {\n+            CodegenModel model = ModelUtils.getModelByName(key, models);\n+            if (model.isEnum) {\n+                ModelsMap objs = models.get(key);\n+                enums.put(key, objs);\n+            }\n+        }\n+        return enums;\n+    }\n+\n     private boolean isEnumClass(final String importPath, final Map<String, ModelsMap> enumModels) {\n         if (enumModels == null || enumModels.isEmpty()) {\n             return false;\n@@ -351,6 +358,26 @@ public OperationsMap postProcessOperationsWithModels(OperationsMap objs, List<Mo\n                 LOGGER.error(\"Unable to find operations List\", e);\n             }\n         }\n+\n+        // update imports for enum class\n+        List<Map<String, String>> newImports = new ArrayList<>();\n+        List<Map<String, String>> imports = objs.getImports();\n+        if (imports != null && !imports.isEmpty()) {\n+            Iterator<Map<String, String>> iterator = imports.iterator();\n+            while (iterator.hasNext()) {\n+                String importPath = iterator.next().get(\"import\");\n+                Map<String, String> item = new HashMap<>();\n+                if (isEnumClass(importPath, enumRefs)) {\n+                    item.put(\"import\", importPath.concat(\"._\"));\n+                }\n+                else {\n+                    item.put(\"import\", importPath);\n+                }\n+                newImports.add(item);\n+            }\n+        }\n+        objs.setImports(newImports);\n+\n         return super.postProcessOperationsWithModels(objs, allModels);\n     }\n ",
      "parent_sha": "4ffdadfbcc42054b87a29bd85f5f9d6e5ab440f1"
    }
  },
  {
    "oid": "f6c738ed9e92a8b10488bc67216f0c57f6b9d4a3",
    "message": "Add #send to ruby reserved word list (#3146)",
    "date": "2019-06-21T16:33:16Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/f6c738ed9e92a8b10488bc67216f0c57f6b9d4a3",
    "details": {
      "sha": "e7af53297f3a35fba91fbaae2924aea71efa948d",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/f6c738ed9e92a8b10488bc67216f0c57f6b9d4a3/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FRubyClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/f6c738ed9e92a8b10488bc67216f0c57f6b9d4a3/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FRubyClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FRubyClientCodegen.java?ref=f6c738ed9e92a8b10488bc67216f0c57f6b9d4a3",
      "patch": "@@ -91,7 +91,7 @@ public RubyClientCodegen() {\n         // local variable names used in API methods (endpoints)\n         for (String word : Arrays.asList(\n                 \"local_var_path\", \"query_params\", \"header_params\", \"_header_accept\", \"_header_accept_result\",\n-                \"_header_content_type\", \"form_params\", \"post_body\", \"auth_names\")) {\n+                \"_header_content_type\", \"form_params\", \"post_body\", \"auth_names\", \"send\")) {\n             reservedWords.add(word.toLowerCase(Locale.ROOT));\n         }\n ",
      "parent_sha": "e3fe12eacf2a72c6870ccd876692b686d46e718f"
    }
  },
  {
    "oid": "69e72203aeca023cb2f3bd392d3c080af6e2a0fe",
    "message": "Fix flattenPath() in InlineModelResolver: use List instead of Map (#17579)\n\n* Fix flattenPath() in InlineModelResolver: use List instead of Map\r\n\r\nFix for https://github.com/OpenAPITools/openapi-generator/issues/17578\r\n\r\n* Update InlineModelResolver.java",
    "date": "2024-01-11T10:37:16Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/69e72203aeca023cb2f3bd392d3c080af6e2a0fe",
    "details": {
      "sha": "91cfe4f3482262cbf7bd853857e95e799bdc3d62",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/InlineModelResolver.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/69e72203aeca023cb2f3bd392d3c080af6e2a0fe/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/69e72203aeca023cb2f3bd392d3c080af6e2a0fe/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FInlineModelResolver.java?ref=69e72203aeca023cb2f3bd392d3c080af6e2a0fe",
      "patch": "@@ -120,7 +120,7 @@ private void flattenPaths() {\n \n         for (Map.Entry<String, PathItem> pathsEntry : paths.entrySet()) {\n             PathItem path = pathsEntry.getValue();\n-            Map<HttpMethod, Operation> operationsMap = new LinkedHashMap<>(path.readOperationsMap());\n+            List<Map.Entry<HttpMethod, Operation>> toFlatten = new ArrayList<>(path.readOperationsMap().entrySet());\n \n             // use path name (e.g. /foo/bar) and HTTP verb to come up with a name\n             // in case operationId is not defined later in other methods\n@@ -135,13 +135,13 @@ private void flattenPaths() {\n                         Callback callback = callbackEntry.getValue();\n                         for (Map.Entry<String, PathItem> pathItemEntry : callback.entrySet()) {\n                             PathItem pathItem = pathItemEntry.getValue();\n-                            operationsMap.putAll(pathItem.readOperationsMap());\n+                            toFlatten.addAll(pathItem.readOperationsMap().entrySet());\n                         }\n                     }\n                 }\n             }\n \n-            for (Map.Entry<HttpMethod, Operation> operationEntry : operationsMap.entrySet()) {\n+            for (Map.Entry<HttpMethod, Operation> operationEntry : toFlatten) {\n                 Operation operation = operationEntry.getValue();\n                 String inlineSchemaName = this.getInlineSchemaName(operationEntry.getKey(), pathname);\n                 flattenRequestBody(inlineSchemaName, operation);",
      "parent_sha": "76560e34c9aacd9d7593ac45bd204e2edf38abd9"
    }
  },
  {
    "oid": "344d6b19b2f4bd5a36cd6c2cb967cf4f56d1acb5",
    "message": "fix string comparison in scala sttp client (#13235)",
    "date": "2022-08-20T06:58:32Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/344d6b19b2f4bd5a36cd6c2cb967cf4f56d1acb5",
    "details": {
      "sha": "10c843cf34476cf7bd135a2fe63e8411061575a4",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/344d6b19b2f4bd5a36cd6c2cb967cf4f56d1acb5/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaSttpClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/344d6b19b2f4bd5a36cd6c2cb967cf4f56d1acb5/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaSttpClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FScalaSttpClientCodegen.java?ref=344d6b19b2f4bd5a36cd6c2cb967cf4f56d1acb5",
      "patch": "@@ -115,7 +115,7 @@ public ScalaSttpClientCodegen() {\n \n         String jsonLibrary = JSON_LIBRARY_PROPERTY.getValue(additionalProperties);\n \n-        String jsonValueClass = jsonLibrary == \"circe\" ? \"io.circe.Json\" : \"org.json4s.JValue\"; \n+        String jsonValueClass = \"circe\".equals(jsonLibrary) ? \"io.circe.Json\" : \"org.json4s.JValue\";\n \n         additionalProperties.put(CodegenConstants.GROUP_ID, groupId);\n         additionalProperties.put(CodegenConstants.ARTIFACT_ID, artifactId);",
      "parent_sha": "640010ad38cfdc671eb9373904686d0a73d70e0c"
    }
  },
  {
    "oid": "29a3a4b3364cce18bd0f9f23cad2b4b437a33856",
    "message": "[Java] Handle Long in enum correctly (#6342)\n\nResolves #6338",
    "date": "2017-09-06T18:19:19Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/29a3a4b3364cce18bd0f9f23cad2b4b437a33856",
    "details": {
      "sha": "13310ecc5c38b06585fb05907681d83c8e85bb4e",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/AbstractJavaCodegen.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/29a3a4b3364cce18bd0f9f23cad2b4b437a33856/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractJavaCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/29a3a4b3364cce18bd0f9f23cad2b4b437a33856/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractJavaCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FAbstractJavaCodegen.java?ref=29a3a4b3364cce18bd0f9f23cad2b4b437a33856",
      "patch": "@@ -1000,9 +1000,11 @@ public String toEnumVarName(String value, String datatype) {\n \n     @Override\n     public String toEnumValue(String value, String datatype) {\n-        if (\"Integer\".equals(datatype) || \"Long\".equals(datatype) ||\n-            \"Double\".equals(datatype)) {\n+        if (\"Integer\".equals(datatype) || \"Double\".equals(datatype)) {\n             return value;\n+        } else if (\"Long\".equals(datatype)) {\n+            // add l to number, e.g. 2048 => 2048l\n+            return value + \"l\";\n         } else if (\"Float\".equals(datatype)) {\n             // add f to number, e.g. 3.14 => 3.14f\n             return value + \"f\";",
      "parent_sha": "565844585ef27a2614c9cba241ab2ab26f8a3a64"
    }
  },
  {
    "oid": "45d55f6b73b166e55ed452cd384eb1a790082817",
    "message": "[aspnetcore] Fix incorrect logging messages (#9405)\n\n* fix incorrect aspnetcore logging messages\r\n\r\n* address comments from review\r\n\r\ncleans up log messages",
    "date": "2021-05-06T02:46:06Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/45d55f6b73b166e55ed452cd384eb1a790082817",
    "details": {
      "sha": "7786ba8b092d893bbb36991346f79c85969a372a",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AspNetCoreServerCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/45d55f6b73b166e55ed452cd384eb1a790082817/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAspNetCoreServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/45d55f6b73b166e55ed452cd384eb1a790082817/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAspNetCoreServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAspNetCoreServerCodegen.java?ref=45d55f6b73b166e55ed452cd384eb1a790082817",
      "patch": "@@ -592,6 +592,7 @@ private void setModelClassModifier() {\n     private void setBuildTarget() {\n         setCliOption(buildTarget);\n         if (\"library\".equals(buildTarget.getOptValue())) {\n+            LOGGER.warn(\"buildTarget is {} so changing default isLibrary to true\",  buildTarget.getOptValue());\n             isLibrary = true;\n             projectSdk = SDK_LIB;\n             additionalProperties.put(CLASS_MODIFIER, \"abstract\");\n@@ -636,7 +637,7 @@ private String determineTemplateVersion(String frameworkVersion) {\n \n     private void setUseSwashbuckle() {\n         if (isLibrary) {\n-            LOGGER.warn(\"buildTarget is \" + buildTarget.getOptValue() + \" so changing default isLibrary to false \");\n+            LOGGER.warn(\"isLibrary is true so changing default useSwashbuckle to false\");\n             useSwashbuckle = false;\n         } else {\n             useSwashbuckle = true;",
      "parent_sha": "ec085713cec7d51a5ee9e17e5fd4899740354efa"
    }
  },
  {
    "oid": "37184a1cd8914f7f11d910ec84a7677d4eb30ae3",
    "message": "Minor fix to body parameter in required parameter list (#6885)\n\n* minor fix to required parameter list\r\n\r\n* better if then else block",
    "date": "2017-11-05T02:22:36Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/37184a1cd8914f7f11d910ec84a7677d4eb30ae3",
    "details": {
      "sha": "8b3655000bbec530dd2c136df76801b8baf8faa2",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 4,
      "deletions": 11,
      "changes": 15,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/37184a1cd8914f7f11d910ec84a7677d4eb30ae3/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/37184a1cd8914f7f11d910ec84a7677d4eb30ae3/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultCodegen.java?ref=37184a1cd8914f7f11d910ec84a7677d4eb30ae3",
      "patch": "@@ -2227,17 +2227,7 @@ public CodegenOperation fromOperation(String path,\n                     }\n                 }\n \n-                // set isPrimitiveType and baseType for allParams\n-                /*if (languageSpecificPrimitives.contains(p.baseType)) {\n-                    p.isPrimitiveType = true;\n-                    p.baseType = getSwaggerType(p);\n-                }*/\n-\n-\n                 allParams.add(p);\n-                if (p.required || p.isBodyParam) {\n-                    requiredParams.add(p.copy());\n-                }\n                 // Issue #2561 (neilotoole) : Moved setting of is<Type>Param flags\n                 // from here to fromParameter().\n                 if (param instanceof QueryParameter) {\n@@ -2257,7 +2247,10 @@ public CodegenOperation fromOperation(String path,\n                 } else if (param instanceof FormParameter) {\n                     formParams.add(p.copy());\n                 }\n-                if (!p.required) {\n+\n+                if (p.required) { //required parameters\n+                    requiredParams.add(p.copy());\n+                } else { // optional parameters\n                     op.hasOptionalParams = true;\n                 }\n             }",
      "parent_sha": "cd1c2b13e3d86b69751990135b94433a74f2b263"
    }
  },
  {
    "oid": "8bb01ed1496017afa1683afbe828ce18ea5618b7",
    "message": "Unit tests should not be skipped when MediaType defines its underlying structure as `json` (`*/*+json`, according to [RFC6838, section 4.2.8](https://tools.ietf.org/html/rfc6838#section-4.2.8)). (#2390)",
    "date": "2019-03-20T10:18:45Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/8bb01ed1496017afa1683afbe828ce18ea5618b7",
    "details": {
      "sha": "42e62f4e1931661ac61007c8475bda2504340bd0",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonAbstractConnexionServerCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/8bb01ed1496017afa1683afbe828ce18ea5618b7/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonAbstractConnexionServerCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/8bb01ed1496017afa1683afbe828ce18ea5618b7/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonAbstractConnexionServerCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonAbstractConnexionServerCodegen.java?ref=8bb01ed1496017afa1683afbe828ce18ea5618b7",
      "patch": "@@ -802,7 +802,8 @@ public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> o\n             if (operation.consumes != null ) {\n                 if (operation.consumes.size() == 1) {\n                     Map<String, String> consume = operation.consumes.get(0);\n-                    if (! \"application/json\".equals(consume.get(MEDIA_TYPE))) {\n+                    if (!(\"application/json\".equals(consume.get(MEDIA_TYPE))\n+                            || consume.get(MEDIA_TYPE).endsWith(\"+json\"))) {\n                         skipTests.put(\"reason\", consume.get(MEDIA_TYPE) + \" not supported by Connexion\");\n                         if (\"multipart/form-data\".equals(consume.get(MEDIA_TYPE))) {\n                             operation.isMultipart = Boolean.TRUE;",
      "parent_sha": "218c2e75aba79264c55f3e39a05e5106b8fb0eee"
    }
  },
  {
    "oid": "81c0e81c7787dd450280b44dc5d3f70519b9bbad",
    "message": "Add \"Contact\" name, URL (#7164)\n\n* update swagger parser, core version the latest\r\n\r\n* add info name and email",
    "date": "2017-12-13T10:10:01Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/81c0e81c7787dd450280b44dc5d3f70519b9bbad",
    "details": {
      "sha": "bba4e9f051134562865f5c0af321db9b1c2d5e21",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/81c0e81c7787dd450280b44dc5d3f70519b9bbad/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/81c0e81c7787dd450280b44dc5d3f70519b9bbad/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=81c0e81c7787dd450280b44dc5d3f70519b9bbad",
      "patch": "@@ -207,11 +207,17 @@ private void configureSwaggerInfo() {\n \n         if (info.getContact() != null) {\n             Contact contact = info.getContact();\n-            config.additionalProperties().put(\"infoUrl\", config.escapeText(contact.getUrl()));\n             if (contact.getEmail() != null) {\n                 config.additionalProperties().put(\"infoEmail\", config.escapeText(contact.getEmail()));\n             }\n+            if (contact.getName() != null) {\n+                config.additionalProperties().put(\"infoName\", config.escapeText(contact.getName()));\n+            }\n+            if (contact.getUrl() != null) {\n+                config.additionalProperties().put(\"infoUrl\", config.escapeText(contact.getUrl()));\n+            }\n         }\n+\n         if (info.getLicense() != null) {\n             License license = info.getLicense();\n             if (license.getName() != null) {\n@@ -221,12 +227,14 @@ private void configureSwaggerInfo() {\n                 config.additionalProperties().put(\"licenseUrl\", config.escapeText(license.getUrl()));\n             }\n         }\n+\n         if (info.getVersion() != null) {\n             config.additionalProperties().put(\"version\", config.escapeText(info.getVersion()));\n         } else {\n             LOGGER.error(\"Missing required field info version. Default version set to 1.0.0\");\n             config.additionalProperties().put(\"version\", \"1.0.0\");\n         }\n+\n         if (info.getTermsOfService() != null) {\n             config.additionalProperties().put(\"termsOfService\", config.escapeText(info.getTermsOfService()));\n         }",
      "parent_sha": "c774e98464067841225a861c8faf67d63979d990"
    }
  },
  {
    "oid": "cec28261e1173adca3b6d6b008cefb0aeddf772a",
    "message": "Fix error in example return value for certain containers\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>",
    "date": "2022-10-14T15:16:51Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/cec28261e1173adca3b6d6b008cefb0aeddf772a",
    "details": {
      "sha": "ac87b1006be2a2e20de5eb5eb141cd9d48257cf3",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/JavaHelidonCommonCodegen.java",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/cec28261e1173adca3b6d6b008cefb0aeddf772a/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaHelidonCommonCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/cec28261e1173adca3b6d6b008cefb0aeddf772a/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaHelidonCommonCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaHelidonCommonCodegen.java?ref=cec28261e1173adca3b6d6b008cefb0aeddf772a",
      "patch": "@@ -19,8 +19,10 @@\n \n import java.nio.file.Paths;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n@@ -64,6 +66,14 @@ public abstract class JavaHelidonCommonCodegen extends AbstractJavaCodegen\n     private static final String VALIDATION_ARTIFACT_PREFIX_JAVAX = \"\";\n     private static final String VALIDATION_ARTIFACT_PREFIX_JAKARTA = MICROPROFILE_ROOT_PACKAGE_JAKARTA + \".\";\n \n+    private static final Map<String, String> EXAMPLE_RETURN_VALUES = new HashMap<String, String>() {\n+        {\n+            put(\"set\", \"Set\");\n+            put(\"array\", \"List\");\n+            put(\"map\", \"Map\");\n+        }\n+    };\n+\n     // for generated doc\n     static final String MICROPROFILE_ROOT_PACKAGE_DEFAULT =\n         \"Helidon 2.x and earlier: \" + MICROPROFILE_ROOT_PACKAGE_JAVAX\n@@ -273,15 +283,13 @@ protected void removeCliOptions(String... opt) {\n \n     private String chooseExampleReturnTypeValue(CodegenOperation op) {\n \n+\n         // See DefaultCodegen#handleMethodResponse to see how the various op fields related to the return type are set.\n         if (op.returnType == null) {\n             return \"\"; // won't be used anyway in the templates\n         }\n-        if (op.isMap) {\n-            return \"java.util.Collections.emptyMap()\";\n-        }\n-        if (op.isArray) {\n-            return \"java.util.Collections.emptyList()\";\n+        if (op.returnContainer != null) {\n+            return \"java.util.Collections.empty\" + EXAMPLE_RETURN_VALUES.get(op.returnContainer) + \"()\";\n         }\n         switch (op.returnType) {\n         case \"Integer\":",
      "parent_sha": "715bbfab56b082acba5d6b8b2603e5f3a02d2f97"
    }
  },
  {
    "oid": "0ed02c8e917e96e68ad53a24b11c1d8cad90918c",
    "message": "Fixes double prefixing during model import (#1398)",
    "date": "2018-11-09T15:49:47Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/0ed02c8e917e96e68ad53a24b11c1d8cad90918c",
    "details": {
      "sha": "fa812143330366f3057dcaea9a1d3d878f50b226",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppQt5ClientCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/0ed02c8e917e96e68ad53a24b11c1d8cad90918c/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCppQt5ClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/0ed02c8e917e96e68ad53a24b11c1d8cad90918c/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCppQt5ClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCppQt5ClientCodegen.java?ref=0ed02c8e917e96e68ad53a24b11c1d8cad90918c",
      "patch": "@@ -253,7 +253,7 @@ public String toModelImport(String name) {\n         if (!folder.isEmpty())\n             folder += File.separator;\n \n-        return \"#include \\\"\" + folder + toModelName(name) + \".h\\\"\";\n+        return \"#include \\\"\" + folder + sanitizeName(name) + \".h\\\"\";\n     }\n \n     /**",
      "parent_sha": "93e2fc635581131b509959c1ef7624d592ee6fb6"
    }
  },
  {
    "oid": "7bf953403456928c33ea7343191a12aef26f07ac",
    "message": "update option description (java client)",
    "date": "2023-11-21T04:29:43Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/7bf953403456928c33ea7343191a12aef26f07ac",
    "details": {
      "sha": "36d1646b18a32dc8f0e1ede74dbbb1d670f0641a",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/JavaClientCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/7bf953403456928c33ea7343191a12aef26f07ac/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/7bf953403456928c33ea7343191a12aef26f07ac/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FJavaClientCodegen.java?ref=7bf953403456928c33ea7343191a12aef26f07ac",
      "patch": "@@ -222,7 +222,7 @@ public JavaClientCodegen() {\n         cliOptions.add(CliOption.newString(CONFIG_KEY, \"Config key in @RegisterRestClient. Default to none. Only `microprofile` supports this option.\"));\n         cliOptions.add(CliOption.newBoolean(CodegenConstants.USE_ONEOF_DISCRIMINATOR_LOOKUP, CodegenConstants.USE_ONEOF_DISCRIMINATOR_LOOKUP_DESC + \" Only jersey2, jersey3, native, okhttp-gson support this option.\"));\n         cliOptions.add(CliOption.newString(MICROPROFILE_REST_CLIENT_VERSION, \"Version of MicroProfile Rest Client API.\"));\n-        cliOptions.add(CliOption.newBoolean(CodegenConstants.USE_SINGLE_REQUEST_PARAMETER, \"Setting this property to true will generate functions with a single argument containing all API endpoint parameters instead of one argument per parameter. ONLY jersey2, jersey3, okhttp-gson support this option.\"));\n+        cliOptions.add(CliOption.newBoolean(CodegenConstants.USE_SINGLE_REQUEST_PARAMETER, \"Setting this property to true will generate functions with a single argument containing all API endpoint parameters instead of one argument per parameter. ONLY jersey2, jersey3, okhttp-gson, microprofile support this option.\"));\n         cliOptions.add(CliOption.newBoolean(WEBCLIENT_BLOCKING_OPERATIONS, \"Making all WebClient operations blocking(sync). Note that if on operation 'x-webclient-blocking: false' then such operation won't be sync\", this.webclientBlockingOperations));\n         cliOptions.add(CliOption.newBoolean(GENERATE_CLIENT_AS_BEAN, \"For resttemplate, configure whether to create `ApiClient.java` and Apis clients as bean (with `@Component` annotation).\", this.generateClientAsBean));\n         cliOptions.add(CliOption.newBoolean(SUPPORT_URL_QUERY, \"Generate toUrlQueryString in POJO (default to true). Available on `native`, `apache-httpclient` libraries.\"));",
      "parent_sha": "87b86c78dca62703186895654a4189ac6174b3b9"
    }
  },
  {
    "oid": "8f9947a20a342f207f016d9089741d5cd1351172",
    "message": "Fix for the template resovling from classpath on Windows",
    "date": "2015-01-22T10:38:42Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/8f9947a20a342f207f016d9089741d5cd1351172",
    "details": {
      "sha": "4587a7df28ddd6f03e56718a21bf1cbf0c66db1b",
      "filename": "src/main/java/com/wordnik/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 35,
      "deletions": 10,
      "changes": 45,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/8f9947a20a342f207f016d9089741d5cd1351172/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/8f9947a20a342f207f016d9089741d5cd1351172/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=8f9947a20a342f207f016d9089741d5cd1351172",
      "patch": "@@ -1,16 +1,35 @@\n package com.wordnik.swagger.codegen;\n \n-import com.wordnik.swagger.models.*;\n-import com.wordnik.swagger.models.properties.*;\n-import com.wordnik.swagger.util.*;\n-\n-import com.wordnik.swagger.codegen.languages.*;\n-import com.samskivert.mustache.*;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n \n import org.apache.commons.io.FileUtils;\n \n-import java.util.*;\n-import java.io.*;\n+import com.samskivert.mustache.Mustache;\n+import com.samskivert.mustache.Template;\n+import com.wordnik.swagger.models.Contact;\n+import com.wordnik.swagger.models.Info;\n+import com.wordnik.swagger.models.License;\n+import com.wordnik.swagger.models.Model;\n+import com.wordnik.swagger.models.Operation;\n+import com.wordnik.swagger.models.Path;\n+import com.wordnik.swagger.models.Swagger;\n+import com.wordnik.swagger.util.Json;\n \n public class DefaultGenerator implements Generator {\n   private CodegenConfig config;\n@@ -282,7 +301,7 @@ public String readTemplate(String name) {\n \n   public Reader getTemplateReader(String name) {\n     try{\n-      InputStream is = this.getClass().getClassLoader().getResourceAsStream(name);\n+      InputStream is = this.getClass().getClassLoader().getResourceAsStream(getCPResourcePath(name));\n       if(is == null)\n         is = new FileInputStream(new File(name));\n       if(is == null)\n@@ -294,8 +313,14 @@ public Reader getTemplateReader(String name) {\n     }\n     throw new RuntimeException(\"can't load template \" + name);\n   }\n+  \n+  private String getCPResourcePath(String name) {\n+    if (!\"/\".equals(File.separator))\n+      return name.replaceAll(Pattern.quote(File.separator), \"/\");\n+    return name;\n+  }\n \n-  public Map<String, Object> processOperations(CodegenConfig config, String tag, List<CodegenOperation> ops) {\n+public Map<String, Object> processOperations(CodegenConfig config, String tag, List<CodegenOperation> ops) {\n     Map<String, Object> operations = new HashMap<String, Object>();\n     Map<String, Object> objs = new HashMap<String, Object>();\n     objs.put(\"classname\", config.toApiName(tag));",
      "parent_sha": "a15eb6f905a12c885ac3fdbd02ac1319006f2840"
    }
  },
  {
    "oid": "737e63976fda7dbd9e0ab35f57924104b7957af9",
    "message": "add unit tests to cover #5 (#18)",
    "date": "2018-05-13T07:24:25Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/737e63976fda7dbd9e0ab35f57924104b7957af9",
    "details": {
      "sha": "9a54eb276a45c25f9399ebcd424d5bc145fb507d",
      "filename": "modules/openapi-generator/src/test/java/org/openapitools/codegen/javascript/JavascriptClientCodegenTest.java",
      "status": "modified",
      "additions": 40,
      "deletions": 1,
      "changes": 41,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/737e63976fda7dbd9e0ab35f57924104b7957af9/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fjavascript%2FJavascriptClientCodegenTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/737e63976fda7dbd9e0ab35f57924104b7957af9/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fjavascript%2FJavascriptClientCodegenTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fjavascript%2FJavascriptClientCodegenTest.java?ref=737e63976fda7dbd9e0ab35f57924104b7957af9",
      "patch": "@@ -17,10 +17,16 @@\n \n package org.openapitools.codegen.javascript;\n \n+import io.swagger.parser.OpenAPIParser;\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.Operation;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.core.models.ParseOptions;\n+import org.openapitools.codegen.*;\n+\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n-import org.openapitools.codegen.CodegenConstants;\n import org.openapitools.codegen.languages.JavascriptClientCodegen;\n \n public class JavascriptClientCodegenTest {\n@@ -60,4 +66,37 @@ public void testAdditionalPropertiesPutForConfigValues() throws Exception {\n         Assert.assertEquals(codegen.isHideGenerationTimestamp(), false);\n     }\n \n+    @Test(description = \"test defaultValueWithParam for model's properties\")\n+    public void bodyParameterTest() {\n+        final OpenAPI openAPI = new OpenAPIParser().readLocation(\"src/test/resources/2_0/petstore.yaml\", null, new ParseOptions()).getOpenAPI();\n+        final JavascriptClientCodegen codegen = new JavascriptClientCodegen();\n+        final Schema pet = openAPI.getComponents().getSchemas().get(\"Pet\");\n+        final CodegenModel cm = codegen.fromModel(\"Pet\", pet);\n+\n+        Assert.assertEquals(cm.name, \"Pet\");\n+        Assert.assertEquals(cm.classname, \"Pet\");\n+        Assert.assertEquals(cm.description, \"A pet for sale in the pet store\");\n+        Assert.assertEquals(cm.vars.size(), 6);\n+\n+        // category (property)\n+        final CodegenProperty property1 = cm.vars.get(1);\n+        Assert.assertEquals(property1.baseName, \"category\");\n+        Assert.assertEquals(property1.datatype, \"Category\");\n+        Assert.assertEquals(property1.name, \"category\");\n+        Assert.assertEquals(property1.baseType, \"Category\");\n+        Assert.assertEquals(property1.defaultValueWithParam, \" = Category.constructFromObject(data['category']);\");\n+        Assert.assertFalse(property1.required);\n+        Assert.assertFalse(property1.isContainer);\n+\n+        // name (property)\n+        final CodegenProperty property2 = cm.vars.get(2);\n+        Assert.assertEquals(property2.baseName, \"name\");\n+        Assert.assertEquals(property2.datatype, \"String\");\n+        Assert.assertEquals(property2.name, \"name\");\n+        Assert.assertEquals(property2.baseType, \"String\");\n+        Assert.assertEquals(property2.defaultValueWithParam, \" = ApiClient.convertToType(data['name'], 'String');\");\n+        Assert.assertTrue(property2.required); // test required\n+        Assert.assertFalse(property2.isContainer);\n+    }\n+\n }",
      "parent_sha": "05a2f4b2407d94bde6e041ce70aa2fb1526ca38c"
    }
  },
  {
    "oid": "19ea3ecf66e1b53be13045bcaed0d76fc0841cf5",
    "message": "update test for inline body param flattening",
    "date": "2015-10-20T15:48:44Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/19ea3ecf66e1b53be13045bcaed0d76fc0841cf5",
    "details": {
      "sha": "fa1bf8bab4014a1fd1dd938b4608810f91bc2d00",
      "filename": "modules/swagger-codegen/src/test/java/io/swagger/codegen/InlineModelResolverTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/19ea3ecf66e1b53be13045bcaed0d76fc0841cf5/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2FInlineModelResolverTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/19ea3ecf66e1b53be13045bcaed0d76fc0841cf5/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2FInlineModelResolverTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2FInlineModelResolverTest.java?ref=19ea3ecf66e1b53be13045bcaed0d76fc0841cf5",
      "patch": "@@ -118,13 +118,13 @@ public void resolveInlineBodyParameter() throws Exception {\n \n         Operation operation = swagger.getPaths().get(\"/hello\").getGet();\n         BodyParameter bp = (BodyParameter)operation.getParameters().get(0);\n-        assertTrue(bp.getSchema() instanceof ModelImpl);\n+        assertTrue(bp.getSchema() instanceof RefModel);\n \n-        Model body = swagger.getDefinitions().get(\"hello_address\");\n+        Model body = swagger.getDefinitions().get(\"body\");\n         assertTrue(body instanceof ModelImpl);\n \n         ModelImpl impl = (ModelImpl) body;\n-        assertNotNull(impl.getProperties().get(\"street\"));\n+        assertNotNull(impl.getProperties().get(\"address\"));\n     }\n \n     @Test",
      "parent_sha": "5c295629263eaee41ad6ade7a36347cc48ea0cfb"
    }
  },
  {
    "oid": "1ad6701f02be2901ef6a398c2d2809620273e338",
    "message": "Wrote method to remove newline characters (Windows or Unix style) from both strings before comparing them. (#2927)",
    "date": "2019-05-20T07:53:19Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/1ad6701f02be2901ef6a398c2d2809620273e338",
    "details": {
      "sha": "e76f0bf6fe91803a1f5ef17ba9d9617c82f12061",
      "filename": "modules/openapi-generator/src/test/java/org/openapitools/codegen/java/jaxrs/JavaJaxrsBaseTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/1ad6701f02be2901ef6a398c2d2809620273e338/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fjava%2Fjaxrs%2FJavaJaxrsBaseTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/1ad6701f02be2901ef6a398c2d2809620273e338/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fjava%2Fjaxrs%2FJavaJaxrsBaseTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fjava%2Fjaxrs%2FJavaJaxrsBaseTest.java?ref=1ad6701f02be2901ef6a398c2d2809620273e338",
      "patch": "@@ -54,10 +54,14 @@ public void generateJsonAnnotationForPolymorphism() throws IOException {\n     }\n \n     private void checkFileContains(MockDefaultGenerator generator, String path, String... lines) {\n-        String file = generator.getFiles().get(path);\n+        String file = linearize(generator.getFiles().get(path));\n         assertNotNull(file);\n         for (String line : lines)\n-            assertTrue(file.contains(line));\n+            assertTrue(file.contains(linearize(line)));\n+    }\n+\n+    private String linearize(String target) {\n+        return target.replaceAll(\"\\r?\\n\", \"\").replaceAll(\"\\\\s+\", \"\\\\s\");\n     }\n \n     @Test\n@@ -92,10 +96,10 @@ public void doNotGenerateJsonAnnotationForPolymorphismIfJsonExclude() throws IOE\n     }\n \n     private void checkFileNotContains(MockDefaultGenerator generator, String path, String... lines) {\n-        String file = generator.getFiles().get(path);\n+        String file = linearize(generator.getFiles().get(path));\n         assertNotNull(file);\n         for (String line : lines)\n-            assertFalse(file.contains(line));\n+            assertFalse(file.contains(linearize(line)));\n     }\n \n     @Test",
      "parent_sha": "10ac54f1b35147e6bd875bd0da07db7a297587ef"
    }
  },
  {
    "oid": "6db283c03b0e461e7b1ca05b3a787c4c818ca7ef",
    "message": "[FIX][CLI] handle null result messages (#7472)\n\nswagger-parser has the potential to return null\r\nfor messages which will throw NPE on\r\ninitialization of the  validationMessages hashset.\r\nrather that allow this to happen we will assume\r\nthat a null message collection represents an empty\r\ncollection and continue.\r\n\r\nFixes #7453",
    "date": "2020-09-29T12:52:14Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/6db283c03b0e461e7b1ca05b3a787c4c818ca7ef",
    "details": {
      "sha": "cf0de7a73882c57a64c42495e8ac493af312fea2",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/config/CodegenConfigurator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/6db283c03b0e461e7b1ca05b3a787c4c818ca7ef/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fconfig%2FCodegenConfigurator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/6db283c03b0e461e7b1ca05b3a787c4c818ca7ef/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fconfig%2FCodegenConfigurator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fconfig%2FCodegenConfigurator.java?ref=6db283c03b0e461e7b1ca05b3a787c4c818ca7ef",
      "patch": "@@ -518,7 +518,7 @@ public Context<?> toContext() {\n         SwaggerParseResult result = new OpenAPIParser().readLocation(inputSpec, authorizationValues, options);\n \n         // TODO: Move custom validations to a separate type as part of a \"Workflow\"\n-        Set<String> validationMessages = new HashSet<>(result.getMessages());\n+        Set<String> validationMessages = new HashSet<>(null != result.getMessages() ? result.getMessages() : new ArrayList<>());\n         OpenAPI specification = result.getOpenAPI();\n         // TODO: The line below could be removed when at least one of the issue below has been resolved.\n         // https://github.com/swagger-api/swagger-parser/issues/1369",
      "parent_sha": "f7570df5c37088db84a9a92a486a9e226cc054a6"
    }
  },
  {
    "oid": "53f7e471c486fd445cad1a5ee7cc4a7c89efa883",
    "message": "unity error message and code cleanup (#20595)",
    "date": "2025-02-09T13:56:00Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/53f7e471c486fd445cad1a5ee7cc4a7c89efa883",
    "details": {
      "sha": "7b34c5b927fcdca4f8b7ae0b4e021e53ebb4d515",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CSharpClientCodegen.java",
      "status": "modified",
      "additions": 86,
      "deletions": 68,
      "changes": 154,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/53f7e471c486fd445cad1a5ee7cc4a7c89efa883/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/53f7e471c486fd445cad1a5ee7cc4a7c89efa883/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java?ref=53f7e471c486fd445cad1a5ee7cc4a7c89efa883",
      "patch": "@@ -698,6 +698,8 @@ public void processOpts() {\n \n         super.processOpts();\n \n+        final String library = getLibrary();\n+\n         /*\n          * NOTE: When supporting boolean additionalProperties, you should read the value and write it back as a boolean.\n          * This avoids oddities where additionalProperties contains \"false\" rather than false, which will cause the\n@@ -753,27 +755,37 @@ public void processOpts() {\n             setModelPackage(\"Model\");\n         }\n \n-        if (GENERICHOST.equals(getLibrary())) {\n-            setLibrary(GENERICHOST);\n-            additionalProperties.put(\"useGenericHost\", true);\n-        } else if (RESTSHARP.equals(getLibrary())) {\n-            additionalProperties.put(\"useRestSharp\", true);\n-            needsCustomHttpMethod = true;\n-        } else if (HTTPCLIENT.equals(getLibrary())) {\n-            setLibrary(HTTPCLIENT);\n-            additionalProperties.put(\"useHttpClient\", true);\n-            needsUriBuilder = true;\n-        } else if (UNITY_WEB_REQUEST.equals(getLibrary())) {\n-            setLibrary(UNITY_WEB_REQUEST);\n-            additionalProperties.put(\"useUnityWebRequest\", true);\n-            needsUriBuilder = true;\n+        final Map<String, Runnable> libraryActions = Map.of(\n+            GENERICHOST, () -> {\n+                setLibrary(GENERICHOST);\n+                additionalProperties.put(\"useGenericHost\", true);\n+            },\n+            RESTSHARP, () -> {\n+                additionalProperties.put(\"useRestSharp\", true);\n+                needsCustomHttpMethod = true;\n+            },\n+            HTTPCLIENT, () -> {\n+                setLibrary(HTTPCLIENT);\n+                additionalProperties.put(\"useHttpClient\", true);\n+                needsUriBuilder = true;\n+            },\n+            UNITY_WEB_REQUEST, () -> {\n+                setLibrary(UNITY_WEB_REQUEST);\n+                additionalProperties.put(\"useUnityWebRequest\", true);\n+                needsUriBuilder = true;\n+            }\n+        );\n+        final Runnable action = libraryActions.get(library);\n+        if (action != null) {\n+            action.run();\n         } else {\n-            throw new RuntimeException(\"Invalid HTTP library \" + getLibrary() + \". Only restsharp, httpclient, and generichost are supported.\");\n+            String supportedLibraries = String.join(\", \", libraryActions.keySet());\n+            throw new RuntimeException(\"Invalid HTTP library \" + library + \". Only \" + supportedLibraries + \" are supported.\");\n         }\n \n-        String inputFramework = (String) additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK, latestFramework.name);\n-        String[] frameworks;\n-        List<FrameworkStrategy> strategies = new ArrayList<>();\n+        final String inputFramework = (String) additionalProperties.getOrDefault(CodegenConstants.DOTNET_FRAMEWORK, latestFramework.name);\n+        final String[] frameworks;\n+        final List<FrameworkStrategy> strategies = new ArrayList<>();\n \n         if (inputFramework.contains(\";\")) {\n             // multiple target framework\n@@ -792,7 +804,7 @@ public void processOpts() {\n                     strategyMatched = true;\n                 }\n \n-                if (frameworkStrategy != FrameworkStrategy.NETSTANDARD_2_0 && \"restsharp\".equals(getLibrary())) {\n+                if (frameworkStrategy != FrameworkStrategy.NETSTANDARD_2_0 && RESTSHARP.equals(library)) {\n                     LOGGER.warn(\"If using built-in templates, RestSharp only supports netstandard 2.0 or later.\");\n                 }\n             }\n@@ -876,39 +888,43 @@ public void processOpts() {\n             apiTestTemplateFiles.put(\"api_test.mustache\", \".cs\");\n         }\n \n-        if (HTTPCLIENT.equals(getLibrary())) {\n-            supportingFiles.add(new SupportingFile(\"FileParameter.mustache\", clientPackageDir, \"FileParameter.cs\"));\n-            addSupportingFiles(clientPackageDir, packageFolder, excludeTests, testPackageFolder, testPackageName, modelPackageDir, authPackageDir);\n-            additionalProperties.put(\"apiDocPath\", apiDocPath);\n-            additionalProperties.put(\"modelDocPath\", modelDocPath);\n-        } else if (GENERICHOST.equals(getLibrary())) {\n-            addGenericHostSupportingFiles(clientPackageDir, packageFolder, excludeTests, testPackageFolder, testPackageName, modelPackageDir);\n-            additionalProperties.put(\"apiDocPath\", apiDocPath + File.separatorChar + \"apis\");\n-            additionalProperties.put(\"modelDocPath\", modelDocPath + File.separatorChar + \"models\");\n-        } else if (UNITY_WEB_REQUEST.equals(getLibrary())) {\n-            additionalProperties.put(CodegenConstants.VALIDATABLE, false);\n-            setValidatable(false);\n-            setSupportsRetry(false);\n-            setSupportsAsync(true);\n-            // Some consoles and tvOS do not support either Application.persistentDataPath or will refuse to\n-            // compile/link if you even reference GetTempPath as well.\n-            additionalProperties.put(\"supportsFileParameters\", false);\n-            setSupportsFileParameters(false);\n-\n-            addSupportingFiles(clientPackageDir, packageFolder, excludeTests, testPackageFolder, testPackageName, modelPackageDir, authPackageDir);\n-\n-            supportingFiles.add(new SupportingFile(\"ConnectionException.mustache\", clientPackageDir, \"ConnectionException.cs\"));\n-            supportingFiles.add(new SupportingFile(\"UnexpectedResponseException.mustache\", clientPackageDir, \"UnexpectedResponseException.cs\"));\n-        } else { //restsharp\n-            addSupportingFiles(clientPackageDir, packageFolder, excludeTests, testPackageFolder, testPackageName, modelPackageDir, authPackageDir);\n-            additionalProperties.put(\"apiDocPath\", apiDocPath);\n-            additionalProperties.put(\"modelDocPath\", modelDocPath);\n-\n-            if (ProcessUtils.hasOAuthMethods(openAPI)) {\n-                supportingFiles.add(new SupportingFile(\"auth/OAuthAuthenticator.mustache\", authPackageDir, \"OAuthAuthenticator.cs\"));\n-                supportingFiles.add(new SupportingFile(\"auth/TokenResponse.mustache\", authPackageDir, \"TokenResponse.cs\"));\n-                supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.mustache\", authPackageDir, \"OAuthFlow.cs\"));\n-            }\n+        switch (library) {\n+            case HTTPCLIENT:\n+                supportingFiles.add(new SupportingFile(\"FileParameter.mustache\", clientPackageDir, \"FileParameter.cs\"));\n+                addSupportingFiles(clientPackageDir, packageFolder, excludeTests, testPackageFolder, testPackageName, modelPackageDir, authPackageDir);\n+                additionalProperties.put(\"apiDocPath\", apiDocPath);\n+                additionalProperties.put(\"modelDocPath\", modelDocPath);\n+                break;\n+            case GENERICHOST:\n+                addGenericHostSupportingFiles(clientPackageDir, packageFolder, excludeTests, testPackageFolder, testPackageName, modelPackageDir);\n+                additionalProperties.put(\"apiDocPath\", apiDocPath + File.separatorChar + \"apis\");\n+                additionalProperties.put(\"modelDocPath\", modelDocPath + File.separatorChar + \"models\");\n+                break;\n+            case UNITY_WEB_REQUEST:\n+                additionalProperties.put(CodegenConstants.VALIDATABLE, false);\n+                setValidatable(false);\n+                setSupportsRetry(false);\n+                setSupportsAsync(true);\n+                // Some consoles and tvOS do not support either Application.persistentDataPath or will refuse to\n+                // compile/link if you even reference GetTempPath as well.\n+                additionalProperties.put(\"supportsFileParameters\", false);\n+                setSupportsFileParameters(false);\n+\n+                addSupportingFiles(clientPackageDir, packageFolder, excludeTests, testPackageFolder, testPackageName, modelPackageDir, authPackageDir);\n+                supportingFiles.add(new SupportingFile(\"ConnectionException.mustache\", clientPackageDir, \"ConnectionException.cs\"));\n+                supportingFiles.add(new SupportingFile(\"UnexpectedResponseException.mustache\", clientPackageDir, \"UnexpectedResponseException.cs\"));\n+                break;\n+            default: // restsharp\n+                addSupportingFiles(clientPackageDir, packageFolder, excludeTests, testPackageFolder, testPackageName, modelPackageDir, authPackageDir);\n+                additionalProperties.put(\"apiDocPath\", apiDocPath);\n+                additionalProperties.put(\"modelDocPath\", modelDocPath);\n+\n+                if (ProcessUtils.hasOAuthMethods(openAPI)) {\n+                    supportingFiles.add(new SupportingFile(\"auth/OAuthAuthenticator.mustache\", authPackageDir, \"OAuthAuthenticator.cs\"));\n+                    supportingFiles.add(new SupportingFile(\"auth/TokenResponse.mustache\", authPackageDir, \"TokenResponse.cs\"));\n+                    supportingFiles.add(new SupportingFile(\"auth/OAuthFlow.mustache\", authPackageDir, \"OAuthFlow.cs\"));\n+                }\n+                break;\n         }\n \n         if (useDateOnly()) {\n@@ -998,7 +1014,9 @@ public CodegenOperation fromOperation(String path,\n \n     public void addSupportingFiles(final String clientPackageDir, final String packageFolder,\n                                    final AtomicReference<Boolean> excludeTests, final String testPackageFolder, final String testPackageName, final String modelPackageDir, final String authPackageDir) {\n-        if (RESTSHARP.equals(getLibrary())) { // restsharp\n+        final String library = getLibrary();\n+        \n+        if (RESTSHARP.equals(library)) { // restsharp\n             if (useIntForTimeout) { // option to fall back to int for Timeout using v7.9.0 template\n                 supportingFiles.add(new SupportingFile(\"ApiClient.v790.mustache\", clientPackageDir, \"ApiClient.cs\"));\n                 supportingFiles.add(new SupportingFile(\"IReadableConfiguration.v790.mustache\", clientPackageDir, \"IReadableConfiguration.cs\"));\n@@ -1046,22 +1064,22 @@ public void addSupportingFiles(final String clientPackageDir, final String packa\n         supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n         supportingFiles.add(new SupportingFile(\"gitignore.mustache\", \"\", \".gitignore\"));\n \n-        if (UNITY_WEB_REQUEST.equals(getLibrary())) {\n+        if (UNITY_WEB_REQUEST.equals(library)) {\n             supportingFiles.add(new SupportingFile(\"asmdef.mustache\", packageFolder, packageName + \".asmdef\"));\n         } else {\n             supportingFiles.add(new SupportingFile(\"Solution.mustache\", \"\", packageName + \".sln\"));\n             supportingFiles.add(new SupportingFile(\"netcore_project.mustache\", packageFolder, packageName + \".csproj\"));\n         }\n \n         if (Boolean.FALSE.equals(excludeTests.get())) {\n-            if (UNITY_WEB_REQUEST.equals(getLibrary())) {\n+            if (UNITY_WEB_REQUEST.equals(library)) {\n                 supportingFiles.add(new SupportingFile(\"asmdef_test.mustache\", testPackageFolder, testPackageName + \".asmdef\"));\n             } else {\n                 supportingFiles.add(new SupportingFile(\"netcore_testproject.mustache\", testPackageFolder, testPackageName + \".csproj\"));\n             }\n         }\n \n-        if (!UNITY_WEB_REQUEST.equals(getLibrary())) {\n+        if (!UNITY_WEB_REQUEST.equals(library)) {\n             supportingFiles.add(new SupportingFile(\"appveyor.mustache\", \"\", \"appveyor.yml\"));\n         }\n         supportingFiles.add(new SupportingFile(\"AbstractOpenAPISchema.mustache\", modelPackageDir, \"AbstractOpenAPISchema.cs\"));\n@@ -1622,24 +1640,23 @@ public ModelsMap postProcessModels(ModelsMap objs) {\n         for (ModelMap mo : objs.getModels()) {\n             CodegenModel cm = mo.getModel();\n \n-            if (cm.oneOf != null && !cm.oneOf.isEmpty() && cm.oneOf.contains(\"Null\")) {\n+            if (cm.oneOf != null && !cm.oneOf.isEmpty() && cm.oneOf.remove(\"Null\")) {\n                 // if oneOf contains \"null\" type\n                 cm.isNullable = true;\n-                cm.oneOf.remove(\"Null\");\n             }\n \n-            if (cm.anyOf != null && !cm.anyOf.isEmpty() && cm.anyOf.contains(\"Null\")) {\n+            if (cm.anyOf != null && !cm.anyOf.isEmpty() && cm.anyOf.remove(\"Null\")) {\n                 // if anyOf contains \"null\" type\n                 cm.isNullable = true;\n-                cm.anyOf.remove(\"Null\");\n-            }\n-\n-            if (cm.getComposedSchemas() != null && cm.getComposedSchemas().getOneOf() != null && !cm.getComposedSchemas().getOneOf().isEmpty()) {\n-                cm.getComposedSchemas().getOneOf().removeIf(o -> o.dataType.equals(\"Null\"));\n             }\n \n-            if (cm.getComposedSchemas() != null && cm.getComposedSchemas().getAnyOf() != null && !cm.getComposedSchemas().getAnyOf().isEmpty()) {\n-                cm.getComposedSchemas().getAnyOf().removeIf(o -> o.dataType.equals(\"Null\"));\n+            if (cm.getComposedSchemas() != null) {\n+                if (cm.getComposedSchemas().getOneOf() != null) {\n+                    cm.getComposedSchemas().getOneOf().removeIf(o -> \"Null\".equals(o.dataType));\n+                }\n+                if (cm.getComposedSchemas().getAnyOf() != null) {\n+                    cm.getComposedSchemas().getAnyOf().removeIf(o -> \"Null\".equals(o.dataType));\n+                }\n             }\n \n             for (CodegenProperty cp : cm.readWriteVars) {\n@@ -1648,7 +1665,7 @@ public ModelsMap postProcessModels(ModelsMap objs) {\n                 // see modules\\openapi-generator\\src\\test\\resources\\3_0\\allOf.yaml\n                 // property boosterSeat will be in readWriteVars but not allVars\n                 // the property is present in the model but gets removed at CodegenModel#removeDuplicatedProperty\n-                if (Boolean.FALSE.equals(cm.allVars.stream().anyMatch(v -> v.baseName.equals(cp.baseName)))) {\n+                if (cm.allVars.stream().noneMatch(v -> v.baseName.equals(cp.baseName))) {\n                     LOGGER.debug(\"Property \" + cp.baseName + \" was found in readWriteVars but not in allVars. Adding it back to allVars\");\n                     cm.allVars.add(cp);\n                 }\n@@ -1658,6 +1675,7 @@ public ModelsMap postProcessModels(ModelsMap objs) {\n         return objs;\n     }\n \n+\n     // https://github.com/OpenAPITools/openapi-generator/issues/15867\n     @Override\n     protected void removePropertiesDeclaredInComposedTypes(Map<String, ModelsMap> objs, CodegenModel model, List<CodegenProperty> composedProperties) {\n@@ -1703,7 +1721,7 @@ protected void removePropertiesDeclaredInComposedTypes(Map<String, ModelsMap> ob\n     @Override\n     protected boolean isValueType(CodegenProperty var) {\n         // this is temporary until x-csharp-value-type is removed\n-        return this.getLibrary().equals(\"generichost\")\n+        return this.getLibrary().equals(GENERICHOST)\n                 ? super.isValueType(var)\n                 : this.getValueTypes().contains(var.dataType) || var.isEnum;\n     }",
      "parent_sha": "055605b075d5e03fefd8d514e3762741d2cb98bf"
    }
  },
  {
    "oid": "7f6d2d8801598217d6411663309e62ec0607f309",
    "message": "Fix docs for convertPropertyToTypeAndWriteBack and convertPropertyToStringAndWriteBack methods (#19072)",
    "date": "2024-07-07T08:58:24Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/7f6d2d8801598217d6411663309e62ec0607f309",
    "details": {
      "sha": "e57e31224c23c4376d31366c875b9c2bd31d7b35",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/7f6d2d8801598217d6411663309e62ec0607f309/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/7f6d2d8801598217d6411663309e62ec0607f309/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java?ref=7f6d2d8801598217d6411663309e62ec0607f309",
      "patch": "@@ -6751,33 +6751,33 @@ public boolean convertPropertyToBooleanAndWriteBack(String propertyKey, Consumer\n     }\n \n     /**\n-     * reads propertyKey from additionalProperties, converts it to a boolean and\n-     * writes it back to additionalProperties to be usable as a boolean in\n+     * reads propertyKey from additionalProperties, converts it to a string and\n+     * writes it back to additionalProperties to be usable as a string in\n      * mustache files.\n      *\n      * @param propertyKey property key\n      * @param stringSetter the setter function reference\n-     * @return property value as String or default if not found\n+     * @return property value as String or null if not found\n      */\n     public String convertPropertyToStringAndWriteBack(String propertyKey, Consumer<String> stringSetter) {\n         return convertPropertyToTypeAndWriteBack(propertyKey, Function.identity(), stringSetter);\n     }\n \n     /**\n-     * reads propertyKey from additionalProperties, converts it to a boolean and\n-     * writes it back to additionalProperties to be usable as a boolean in\n+     * reads propertyKey from additionalProperties, converts it to T and\n+     * writes it back to additionalProperties to be usable as T in\n      * mustache files.\n      *\n      * @param propertyKey property key\n-     * @param stringSetter the setter function reference\n-     * @return property value as String or null if not found\n+     * @param genericTypeSetter the setter function reference\n+     * @return property value as instance of type T or null if not found\n      */\n-    public <T> T convertPropertyToTypeAndWriteBack(String propertyKey, Function<String, T> converter, Consumer<T> stringSetter) {\n+    public <T> T convertPropertyToTypeAndWriteBack(String propertyKey, Function<String, T> converter, Consumer<T> genericTypeSetter) {\n         if (additionalProperties.containsKey(propertyKey)) {\n             String value = additionalProperties.get(propertyKey).toString();\n             T result = converter.apply(value);\n             writePropertyBack(propertyKey, result);\n-            stringSetter.accept(result);\n+            genericTypeSetter.accept(result);\n             return result;\n         }\n         return null;",
      "parent_sha": "aef9142c2c6a8b1f219b612e6af2591fce8e29f4"
    }
  },
  {
    "oid": "277e7cfa8dbc2f10aab85b5c8bee98940897970b",
    "message": "Remove defaultValue from project guid cliOption because the guid is a random value",
    "date": "2016-01-22T03:47:53Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/277e7cfa8dbc2f10aab85b5c8bee98940897970b",
    "details": {
      "sha": "3895e0e462a1f1d3ebd1b8517e6a55985063184e",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/CSharpClientCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/277e7cfa8dbc2f10aab85b5c8bee98940897970b/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/277e7cfa8dbc2f10aab85b5c8bee98940897970b/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java?ref=277e7cfa8dbc2f10aab85b5c8bee98940897970b",
      "patch": "@@ -123,8 +123,7 @@ public CSharpClientCodegen() {\n         cliOptions.add(CliOption.newBoolean(CodegenConstants.USE_DATETIME_OFFSET, CodegenConstants.USE_DATETIME_OFFSET_DESC));\n         cliOptions.add(CliOption.newBoolean(CodegenConstants.OPTIONAL_PROJECT_FILE,\n                 CodegenConstants.OPTIONAL_PROJECT_FILE_DESC).defaultValue(Boolean.FALSE.toString()));\n-        cliOptions.add(new CliOption(CodegenConstants.OPTIONAL_PROJECT_GUID, CodegenConstants.OPTIONAL_PROJECT_GUID_DESC)\n-                .defaultValue(this.packageGuid));      \n+        cliOptions.add(new CliOption(CodegenConstants.OPTIONAL_PROJECT_GUID, CodegenConstants.OPTIONAL_PROJECT_GUID_DESC));      \n     }\n \n     @Override",
      "parent_sha": "60c79d1cae2f3bd8b4ff09c02be1054273fdd4cd"
    }
  },
  {
    "oid": "13c94eeea05fb3b53d6442d1aef0ee9f7f5da007",
    "message": "[Typescript] Import path is invalid in windows. (#7175)\n\nUse `/` instead of `File.Separator`. `File.Separator` is `/` in Windows.",
    "date": "2020-08-11T09:39:43Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/13c94eeea05fb3b53d6442d1aef0ee9f7f5da007",
    "details": {
      "sha": "9e6d5264c8c80b99226d81d4b742f1acb9abd409",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/13c94eeea05fb3b53d6442d1aef0ee9f7f5da007/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FTypeScriptClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/13c94eeea05fb3b53d6442d1aef0ee9f7f5da007/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FTypeScriptClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FTypeScriptClientCodegen.java?ref=13c94eeea05fb3b53d6442d1aef0ee9f7f5da007",
      "patch": "@@ -295,7 +295,7 @@ public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> o\n         // Add additional filename information for model imports in the apis\n         List<Map<String, Object>> imports = (List<Map<String, Object>>) operations.get(\"imports\");\n         for (Map<String, Object> im : imports) {\n-            im.put(\"filename\", ((String) im.get(\"import\")).replace(\".\", File.separator));\n+            im.put(\"filename\", ((String) im.get(\"import\")).replace(\".\", \"/\"));\n             im.put(\"classname\", getModelnameFromModelFilename(im.get(\"import\").toString()));\n         }\n         ",
      "parent_sha": "c89a5c416d95c18a635ebcca7d683e68b703672d"
    }
  },
  {
    "oid": "146b10777413d022f642900082cf84314d3edebe",
    "message": "Eliminate all Java compilation warnings for swift4 codegen module (#6467)",
    "date": "2017-09-19T01:46:27Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/146b10777413d022f642900082cf84314d3edebe",
    "details": {
      "sha": "fa5f8e20c1ce9408943b9265749f4a1fd8387a4f",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/Swift4Codegen.java",
      "status": "modified",
      "additions": 200,
      "deletions": 109,
      "changes": 309,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/146b10777413d022f642900082cf84314d3edebe/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSwift4Codegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/146b10777413d022f642900082cf84314d3edebe/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSwift4Codegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FSwift4Codegen.java?ref=146b10777413d022f642900082cf84314d3edebe",
      "patch": "@@ -3,7 +3,16 @@\n import com.google.common.base.Predicate;\n import com.google.common.collect.Iterators;\n import com.google.common.collect.Lists;\n-import io.swagger.codegen.*;\n+\n+import io.swagger.codegen.CliOption;\n+import io.swagger.codegen.CodegenConfig;\n+import io.swagger.codegen.CodegenConstants;\n+import io.swagger.codegen.CodegenModel;\n+import io.swagger.codegen.CodegenProperty;\n+import io.swagger.codegen.CodegenType;\n+import io.swagger.codegen.DefaultCodegen;\n+import io.swagger.codegen.SupportingFile;\n+\n import io.swagger.models.Model;\n import io.swagger.models.ModelImpl;\n import io.swagger.models.Operation;\n@@ -13,15 +22,22 @@\n import io.swagger.models.properties.ArrayProperty;\n import io.swagger.models.properties.MapProperty;\n import io.swagger.models.properties.Property;\n+\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.text.WordUtils;\n \n-import javax.annotation.Nullable;\n import java.io.File;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n \n public class Swift4Codegen extends DefaultCodegen implements CodegenConfig {\n     public static final String PROJECT_NAME = \"projectName\";\n@@ -68,15 +84,19 @@ public String getHelp() {\n     }\n \n     @Override\n-    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel,\n+                                                       ModelImpl swaggerModel) {\n \n         final Property additionalProperties = swaggerModel.getAdditionalProperties();\n \n-        if(additionalProperties != null) {\n+        if (additionalProperties != null) {\n             codegenModel.additionalPropertiesType = getSwaggerType(additionalProperties);\n         }\n     }\n \n+    /**\n+     * Constructor for the swift4 language codegen module.\n+     */\n     public Swift4Codegen() {\n         super();\n         outputFolder = \"generated-code\" + File.separator + \"swift\";\n@@ -120,14 +140,18 @@ public Swift4Codegen() {\n                     \"ErrorResponse\", \"Response\",\n \n                     // swift keywords\n-                    \"Int\", \"Int32\", \"Int64\", \"Int64\", \"Float\", \"Double\", \"Bool\", \"Void\", \"String\", \"Character\", \"AnyObject\", \"Any\", \"Error\", \"URL\",\n-                    \"class\", \"Class\", \"break\", \"as\", \"associativity\", \"deinit\", \"case\", \"dynamicType\", \"convenience\", \"enum\", \"continue\",\n-                    \"false\", \"dynamic\", \"extension\", \"default\", \"is\", \"didSet\", \"func\", \"do\", \"nil\", \"final\", \"import\", \"else\",\n-                    \"self\", \"get\", \"init\", \"fallthrough\", \"Self\", \"infix\", \"internal\", \"for\", \"super\", \"inout\", \"let\", \"if\",\n-                    \"true\", \"lazy\", \"operator\", \"in\", \"COLUMN\", \"left\", \"private\", \"return\", \"FILE\", \"mutating\", \"protocol\",\n-                    \"switch\", \"FUNCTION\", \"none\", \"public\", \"where\", \"LINE\", \"nonmutating\", \"static\", \"while\", \"optional\",\n-                    \"struct\", \"override\", \"subscript\", \"postfix\", \"typealias\", \"precedence\", \"var\", \"prefix\", \"Protocol\",\n-                    \"required\", \"right\", \"set\", \"Type\", \"unowned\", \"weak\", \"Data\", \"Codable\", \"Encodable\", \"Decodable\")\n+                    \"Int\", \"Int32\", \"Int64\", \"Int64\", \"Float\", \"Double\", \"Bool\", \"Void\", \"String\",\n+                    \"Character\", \"AnyObject\", \"Any\", \"Error\", \"URL\", \"class\", \"Class\", \"break\",\n+                    \"as\", \"associativity\", \"deinit\", \"case\", \"dynamicType\", \"convenience\", \"enum\",\n+                    \"continue\", \"false\", \"dynamic\", \"extension\", \"default\", \"is\", \"didSet\",\n+                    \"func\", \"do\", \"nil\", \"final\", \"import\", \"else\", \"self\", \"get\", \"init\",\n+                    \"fallthrough\", \"Self\", \"infix\", \"internal\", \"for\", \"super\", \"inout\", \"let\",\n+                    \"if\", \"true\", \"lazy\", \"operator\", \"in\", \"COLUMN\", \"left\", \"private\", \"return\",\n+                    \"FILE\", \"mutating\", \"protocol\", \"switch\", \"FUNCTION\", \"none\", \"public\",\n+                    \"where\", \"LINE\", \"nonmutating\", \"static\", \"while\", \"optional\", \"struct\",\n+                    \"override\", \"subscript\", \"postfix\", \"typealias\", \"precedence\", \"var\",\n+                    \"prefix\", \"Protocol\", \"required\", \"right\", \"set\", \"Type\", \"unowned\", \"weak\",\n+                    \"Data\", \"Codable\", \"Encodable\", \"Decodable\")\n         );\n \n         typeMapping = new HashMap<>();\n@@ -157,11 +181,17 @@ public Swift4Codegen() {\n         importMapping = new HashMap<>();\n \n         cliOptions.add(new CliOption(PROJECT_NAME, \"Project name in Xcode\"));\n-        cliOptions.add(new CliOption(RESPONSE_AS, \"Optionally use libraries to manage response.  Currently \" +\n-                StringUtils.join(RESPONSE_LIBRARIES, \", \") + \" are available.\"));\n-        cliOptions.add(new CliOption(UNWRAP_REQUIRED, \"Treat 'required' properties in response as non-optional \" +\n-                \"(which would crash the app if api returns null as opposed to required option specified in json schema\"));\n-        cliOptions.add(new CliOption(OBJC_COMPATIBLE, \"Add additional properties and methods for Objective-C compatibility (default: false)\"));\n+        cliOptions.add(new CliOption(RESPONSE_AS,\n+                                     \"Optionally use libraries to manage response.  Currently \"\n+                                     + StringUtils.join(RESPONSE_LIBRARIES, \", \")\n+                                     + \" are available.\"));\n+        cliOptions.add(new CliOption(UNWRAP_REQUIRED,\n+                                     \"Treat 'required' properties in response as non-optional \"\n+                                     + \"(which would crash the app if api returns null as opposed \"\n+                                     + \"to required option specified in json schema\"));\n+        cliOptions.add(new CliOption(OBJC_COMPATIBLE,\n+                                     \"Add additional properties and methods for Objective-C \"\n+                                     + \"compatibility (default: false)\"));\n         cliOptions.add(new CliOption(POD_SOURCE, \"Source information used for Podspec\"));\n         cliOptions.add(new CliOption(CodegenConstants.POD_VERSION, \"Version used for Podspec\"));\n         cliOptions.add(new CliOption(POD_AUTHORS, \"Authors used for Podspec\"));\n@@ -172,11 +202,17 @@ public Swift4Codegen() {\n         cliOptions.add(new CliOption(POD_SUMMARY, \"Summary used for Podspec\"));\n         cliOptions.add(new CliOption(POD_DESCRIPTION, \"Description used for Podspec\"));\n         cliOptions.add(new CliOption(POD_SCREENSHOTS, \"Screenshots used for Podspec\"));\n-        cliOptions.add(new CliOption(POD_DOCUMENTATION_URL, \"Documentation URL used for Podspec\"));\n-        cliOptions.add(new CliOption(SWIFT_USE_API_NAMESPACE, \"Flag to make all the API classes inner-class of {{projectName}}API\"));\n-        cliOptions.add(new CliOption(CodegenConstants.HIDE_GENERATION_TIMESTAMP, \"hides the timestamp when files were generated\")\n+        cliOptions.add(new CliOption(POD_DOCUMENTATION_URL,\n+                                     \"Documentation URL used for Podspec\"));\n+        cliOptions.add(new CliOption(SWIFT_USE_API_NAMESPACE,\n+                                     \"Flag to make all the API classes inner-class \"\n+                                     + \"of {{projectName}}API\"));\n+        cliOptions.add(new CliOption(CodegenConstants.HIDE_GENERATION_TIMESTAMP,\n+                                     \"hides the timestamp when files were generated\")\n                 .defaultValue(Boolean.TRUE.toString()));\n-        cliOptions.add(new CliOption(LENIENT_TYPE_CAST, \"Accept and cast values for simple types (string->bool, string->int, int->string)\")\n+        cliOptions.add(new CliOption(LENIENT_TYPE_CAST,\n+                                     \"Accept and cast values for simple types (string->bool, \"\n+                                     + \"string->int, int->string)\")\n                 .defaultValue(Boolean.FALSE.toString()));\n     }\n \n@@ -186,10 +222,13 @@ public void processOpts() {\n \n         // default HIDE_GENERATION_TIMESTAMP to true\n         if (!additionalProperties.containsKey(CodegenConstants.HIDE_GENERATION_TIMESTAMP)) {\n-            additionalProperties.put(CodegenConstants.HIDE_GENERATION_TIMESTAMP, Boolean.TRUE.toString());\n-        } else {\n             additionalProperties.put(CodegenConstants.HIDE_GENERATION_TIMESTAMP,\n-                    Boolean.valueOf(additionalProperties().get(CodegenConstants.HIDE_GENERATION_TIMESTAMP).toString()));\n+                                     Boolean.TRUE.toString());\n+        } else {\n+            Boolean hide = Boolean.valueOf(additionalProperties()\n+                                           .get(CodegenConstants.HIDE_GENERATION_TIMESTAMP)\n+                                           .toString());\n+            additionalProperties.put(CodegenConstants.HIDE_GENERATION_TIMESTAMP, hide);\n         }\n \n         // Setup project name\n@@ -200,13 +239,15 @@ public void processOpts() {\n         }\n         sourceFolder = projectName + File.separator + sourceFolder;\n \n-        // Setup unwrapRequired option, which makes all the properties with \"required\" non-optional\n+        // Setup unwrapRequired option, which makes all the\n+        // properties with \"required\" non-optional\n         if (additionalProperties.containsKey(UNWRAP_REQUIRED)) {\n             setUnwrapRequired(convertPropertyToBooleanAndWriteBack(UNWRAP_REQUIRED));\n         }\n         additionalProperties.put(UNWRAP_REQUIRED, unwrapRequired);\n \n-        // Setup objcCompatible option, which adds additional properties and methods for Objective-C compatibility\n+        // Setup objcCompatible option, which adds additional properties\n+        // and methods for Objective-C compatibility\n         if (additionalProperties.containsKey(OBJC_COMPATIBLE)) {\n             setObjcCompatible(convertPropertyToBooleanAndWriteBack(OBJC_COMPATIBLE));\n         }\n@@ -229,7 +270,8 @@ public void processOpts() {\n             additionalProperties.put(\"useRxSwift\", true);\n         }\n \n-        // Setup swiftUseApiNamespace option, which makes all the API classes inner-class of {{projectName}}API\n+        // Setup swiftUseApiNamespace option, which makes all the API\n+        // classes inner-class of {{projectName}}API\n         if (additionalProperties.containsKey(SWIFT_USE_API_NAMESPACE)) {\n             setSwiftUseApiNamespace(convertPropertyToBooleanAndWriteBack(SWIFT_USE_API_NAMESPACE));\n         }\n@@ -240,20 +282,45 @@ public void processOpts() {\n \n         setLenientTypeCast(convertPropertyToBooleanAndWriteBack(LENIENT_TYPE_CAST));\n \n-        supportingFiles.add(new SupportingFile(\"Podspec.mustache\", \"\", projectName + \".podspec\"));\n-        supportingFiles.add(new SupportingFile(\"Cartfile.mustache\", \"\", \"Cartfile\"));\n-        supportingFiles.add(new SupportingFile(\"APIHelper.mustache\", sourceFolder, \"APIHelper.swift\"));\n-        supportingFiles.add(new SupportingFile(\"AlamofireImplementations.mustache\", sourceFolder,\n-                \"AlamofireImplementations.swift\"));\n-        supportingFiles.add(new SupportingFile(\"Configuration.mustache\", sourceFolder, \"Configuration.swift\"));\n-        supportingFiles.add(new SupportingFile(\"Extensions.mustache\", sourceFolder, \"Extensions.swift\"));\n-        supportingFiles.add(new SupportingFile(\"Models.mustache\", sourceFolder, \"Models.swift\"));\n-        supportingFiles.add(new SupportingFile(\"APIs.mustache\", sourceFolder, \"APIs.swift\"));\n-        supportingFiles.add(new SupportingFile(\"CodableHelper.mustache\", sourceFolder, \"CodableHelper.swift\"));\n-        supportingFiles.add(new SupportingFile(\"JSONEncodableEncoding.mustache\", sourceFolder, \"JSONEncodableEncoding.swift\"));\n-        supportingFiles.add(new SupportingFile(\"JSONEncodingHelper.mustache\", sourceFolder, \"JSONEncodingHelper.swift\"));\n-        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n-        supportingFiles.add(new SupportingFile(\"gitignore.mustache\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"Podspec.mustache\",\n+                                               \"\",\n+                                               projectName + \".podspec\"));\n+        supportingFiles.add(new SupportingFile(\"Cartfile.mustache\",\n+                                               \"\",\n+                                               \"Cartfile\"));\n+        supportingFiles.add(new SupportingFile(\"APIHelper.mustache\",\n+                                               sourceFolder,\n+                                               \"APIHelper.swift\"));\n+        supportingFiles.add(new SupportingFile(\"AlamofireImplementations.mustache\",\n+                                               sourceFolder,\n+                                               \"AlamofireImplementations.swift\"));\n+        supportingFiles.add(new SupportingFile(\"Configuration.mustache\",\n+                                               sourceFolder,\n+                                               \"Configuration.swift\"));\n+        supportingFiles.add(new SupportingFile(\"Extensions.mustache\",\n+                                               sourceFolder,\n+                                               \"Extensions.swift\"));\n+        supportingFiles.add(new SupportingFile(\"Models.mustache\",\n+                                               sourceFolder,\n+                                               \"Models.swift\"));\n+        supportingFiles.add(new SupportingFile(\"APIs.mustache\",\n+                                               sourceFolder,\n+                                               \"APIs.swift\"));\n+        supportingFiles.add(new SupportingFile(\"CodableHelper.mustache\",\n+                                               sourceFolder,\n+                                               \"CodableHelper.swift\"));\n+        supportingFiles.add(new SupportingFile(\"JSONEncodableEncoding.mustache\",\n+                                               sourceFolder,\n+                                               \"JSONEncodableEncoding.swift\"));\n+        supportingFiles.add(new SupportingFile(\"JSONEncodingHelper.mustache\",\n+                                               sourceFolder,\n+                                               \"JSONEncodingHelper.swift\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\",\n+                                               \"\",\n+                                               \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore.mustache\",\n+                                               \"\",\n+                                               \".gitignore\"));\n \n     }\n \n@@ -264,46 +331,50 @@ protected boolean isReservedWord(String word) {\n \n     @Override\n     public String escapeReservedWord(String name) {\n-        if(this.reservedWordsMappings().containsKey(name)) {\n+        if (this.reservedWordsMappings().containsKey(name)) {\n             return this.reservedWordsMappings().get(name);\n         }\n         return \"_\" + name;  // add an underscore to the name\n     }\n \n     @Override\n     public String modelFileFolder() {\n-        return outputFolder + File.separator + sourceFolder + modelPackage().replace('.', File.separatorChar);\n+        return outputFolder + File.separator + sourceFolder\n+               + modelPackage().replace('.', File.separatorChar);\n     }\n \n     @Override\n     public String apiFileFolder() {\n-        return outputFolder + File.separator + sourceFolder + apiPackage().replace('.', File.separatorChar);\n+        return outputFolder + File.separator + sourceFolder\n+               + apiPackage().replace('.', File.separatorChar);\n     }\n \n     @Override\n-    public String getTypeDeclaration(Property p) {\n-        if (p instanceof ArrayProperty) {\n-            ArrayProperty ap = (ArrayProperty) p;\n+    public String getTypeDeclaration(Property prop) {\n+        if (prop instanceof ArrayProperty) {\n+            ArrayProperty ap = (ArrayProperty) prop;\n             Property inner = ap.getItems();\n             return \"[\" + getTypeDeclaration(inner) + \"]\";\n-        } else if (p instanceof MapProperty) {\n-            MapProperty mp = (MapProperty) p;\n+        } else if (prop instanceof MapProperty) {\n+            MapProperty mp = (MapProperty) prop;\n             Property inner = mp.getAdditionalProperties();\n             return \"[String:\" + getTypeDeclaration(inner) + \"]\";\n         }\n-        return super.getTypeDeclaration(p);\n+        return super.getTypeDeclaration(prop);\n     }\n \n     @Override\n-    public String getSwaggerType(Property p) {\n-        String swaggerType = super.getSwaggerType(p);\n+    public String getSwaggerType(Property prop) {\n+        String swaggerType = super.getSwaggerType(prop);\n         String type;\n         if (typeMapping.containsKey(swaggerType)) {\n             type = typeMapping.get(swaggerType);\n-            if (languageSpecificPrimitives.contains(type) || defaultIncludes.contains(type))\n+            if (languageSpecificPrimitives.contains(type) || defaultIncludes.contains(type)) {\n                 return type;\n-        } else\n+            }\n+        } else {\n             type = swaggerType;\n+        }\n         return toModelName(type);\n     }\n \n@@ -318,14 +389,15 @@ public boolean isDataTypeBinary(final String dataType) {\n     }\n \n     /**\n-     * Output the proper model name (capitalized)\n+     * Output the proper model name (capitalized).\n      *\n      * @param name the name of the model\n      * @return capitalized model name\n      */\n     @Override\n     public String toModelName(String name) {\n-        name = sanitizeName(name);  // FIXME parameter should not be assigned. Also declare it as \"final\"\n+        // FIXME parameter should not be assigned. Also declare it as \"final\"\n+        name = sanitizeName(name);\n \n         if (!StringUtils.isEmpty(modelNameSuffix)) { // set model suffix\n             name = name + \"_\" + modelNameSuffix;\n@@ -342,22 +414,26 @@ public String toModelName(String name) {\n         // model name cannot use reserved keyword, e.g. return\n         if (isReservedWord(name)) {\n             String modelName = \"Model\" + name;\n-            LOGGER.warn(name + \" (reserved word) cannot be used as model name. Renamed to \" + modelName);\n+            LOGGER.warn(name + \" (reserved word) cannot be used as model name. Renamed to \"\n+                        + modelName);\n             return modelName;\n         }\n \n         // model name starts with number\n         if (name.matches(\"^\\\\d.*\")) {\n-            String modelName = \"Model\" + name; // e.g. 200Response => Model200Response (after camelize)\n-            LOGGER.warn(name + \" (model name starts with number) cannot be used as model name. Renamed to \" + modelName);\n+            // e.g. 200Response => Model200Response (after camelize)\n+            String modelName = \"Model\" + name;\n+            LOGGER.warn(name\n+                        + \" (model name starts with number) cannot be used as model name.\"\n+                        + \" Renamed to \" + modelName);\n             return modelName;\n         }\n \n         return name;\n     }\n \n     /**\n-     * Return the capitalized file name of the model\n+     * Return the capitalized file name of the model.\n      *\n      * @param name the model name\n      * @return the file name of the model\n@@ -369,19 +445,19 @@ public String toModelFilename(String name) {\n     }\n \n     @Override\n-    public String toDefaultValue(Property p) {\n+    public String toDefaultValue(Property prop) {\n         // nil\n         return null;\n     }\n \n     @Override\n-    public String toInstantiationType(Property p) {\n-        if (p instanceof MapProperty) {\n-            MapProperty ap = (MapProperty) p;\n+    public String toInstantiationType(Property prop) {\n+        if (prop instanceof MapProperty) {\n+            MapProperty ap = (MapProperty) prop;\n             String inner = getSwaggerType(ap.getAdditionalProperties());\n             return inner;\n-        } else if (p instanceof ArrayProperty) {\n-            ArrayProperty ap = (ArrayProperty) p;\n+        } else if (prop instanceof ArrayProperty) {\n+            ArrayProperty ap = (ArrayProperty) prop;\n             String inner = getSwaggerType(ap.getItems());\n             return \"[\" + inner + \"]\";\n         }\n@@ -390,24 +466,27 @@ public String toInstantiationType(Property p) {\n \n     @Override\n     public String toApiName(String name) {\n-        if (name.length() == 0)\n+        if (name.length() == 0) {\n             return \"DefaultAPI\";\n+        }\n         return initialCaps(name) + \"API\";\n     }\n \n     @Override\n     public String toOperationId(String operationId) {\n         operationId = camelize(sanitizeName(operationId), true);\n \n-        // throw exception if method name is empty. This should not happen but keep the check just in case\n+        // Throw exception if method name is empty.\n+        // This should not happen but keep the check just in case\n         if (StringUtils.isEmpty(operationId)) {\n             throw new RuntimeException(\"Empty method name (operationId) not allowed\");\n         }\n \n         // method name cannot use reserved keyword, e.g. return\n         if (isReservedWord(operationId)) {\n             String newOperationId = camelize((\"call_\" + operationId), true);\n-            LOGGER.warn(operationId + \" (reserved word) cannot be used as method name. Renamed to \" + newOperationId);\n+            LOGGER.warn(operationId + \" (reserved word) cannot be used as method name.\"\n+                        + \" Renamed to \" + newOperationId);\n             return newOperationId;\n         }\n \n@@ -464,21 +543,23 @@ public String toParamName(String name) {\n     @Override\n     public CodegenModel fromModel(String name, Model model, Map<String, Model> allDefinitions) {\n         CodegenModel codegenModel = super.fromModel(name, model, allDefinitions);\n-        if(codegenModel.description != null) {\n+        if (codegenModel.description != null) {\n             codegenModel.imports.add(\"ApiModel\");\n         }\n         if (allDefinitions != null) {\n-          String parentSchema = codegenModel.parentSchema;\n-\n-          // multilevel inheritance: reconcile properties of all the parents\n-          while (parentSchema != null) {\n-            final Model parentModel = allDefinitions.get(parentSchema);\n-            final CodegenModel parentCodegenModel = super.fromModel(codegenModel.parent, parentModel, allDefinitions);\n-            codegenModel = Swift4Codegen.reconcileProperties(codegenModel, parentCodegenModel);\n-\n-            // get the next parent\n-            parentSchema = parentCodegenModel.parentSchema;\n-          }\n+            String parentSchema = codegenModel.parentSchema;\n+\n+            // multilevel inheritance: reconcile properties of all the parents\n+            while (parentSchema != null) {\n+                final Model parentModel = allDefinitions.get(parentSchema);\n+                final CodegenModel parentCodegenModel = super.fromModel(codegenModel.parent,\n+                                                                        parentModel,\n+                                                                        allDefinitions);\n+                codegenModel = Swift4Codegen.reconcileProperties(codegenModel, parentCodegenModel);\n+\n+                // get the next parent\n+                parentSchema = parentCodegenModel.parentSchema;\n+            }\n         }\n \n         return codegenModel;\n@@ -552,8 +633,8 @@ public String toEnumVarName(String name, String datatype) {\n         }\n \n         // Check for numerical conversions\n-        if (\"Int\".equals(datatype) || \"Int32\".equals(datatype) || \"Int64\".equals(datatype) ||\n-                \"Float\".equals(datatype) || \"Double\".equals(datatype)) {\n+        if (\"Int\".equals(datatype) || \"Int32\".equals(datatype) || \"Int64\".equals(datatype)\n+                || \"Float\".equals(datatype) || \"Double\".equals(datatype)) {\n             String varName = \"number\" + camelize(name);\n             varName = varName.replaceAll(\"-\", \"minus\");\n             varName = varName.replaceAll(\"\\\\+\", \"plus\");\n@@ -568,7 +649,9 @@ public String toEnumVarName(String name, String datatype) {\n         }\n \n         char[] separators = {'-', '_', ' ', ':', '(', ')'};\n-        return camelize(WordUtils.capitalizeFully(StringUtils.lowerCase(name), separators).replaceAll(\"[-_ :\\\\(\\\\)]\", \"\"), true);\n+        return camelize(WordUtils.capitalizeFully(StringUtils.lowerCase(name), separators)\n+                                 .replaceAll(\"[-_ :\\\\(\\\\)]\", \"\"),\n+                        true);\n     }\n \n     @Override\n@@ -578,11 +661,13 @@ public String toEnumName(CodegenProperty property) {\n         // Ensure that the enum type doesn't match a reserved word or\n         // the variable name doesn't match the generated enum type or the\n         // Swift compiler will generate an error\n-        if (isReservedWord(property.datatypeWithEnum) || toVarName(property.name).equals(property.datatypeWithEnum)) {\n+        if (isReservedWord(property.datatypeWithEnum)\n+                || toVarName(property.name).equals(property.datatypeWithEnum)) {\n             enumName = property.datatypeWithEnum + \"Enum\";\n         }\n \n-        // TODO: toModelName already does something for names starting with number, so this code is probably never called\n+        // TODO: toModelName already does something for names starting with number,\n+        // so this code is probably never called\n         if (enumName.matches(\"\\\\d.*\")) { // starts with number\n             return \"_\" + enumName;\n         } else {\n@@ -600,9 +685,11 @@ public Map<String, Object> postProcessModels(Map<String, Object> objs) {\n     public void postProcessModelProperty(CodegenModel model, CodegenProperty property) {\n         super.postProcessModelProperty(model, property);\n \n-        // The default template code has the following logic for assigning a type as Swift Optional:\n+        // The default template code has the following logic for\n+        // assigning a type as Swift Optional:\n         //\n-        // {{^unwrapRequired}}?{{/unwrapRequired}}{{#unwrapRequired}}{{^required}}?{{/required}}{{/unwrapRequired}}\n+        // {{^unwrapRequired}}?{{/unwrapRequired}}\n+        // {{#unwrapRequired}}{{^required}}?{{/required}}{{/unwrapRequired}}\n         //\n         // which means:\n         //\n@@ -611,7 +698,8 @@ public void postProcessModelProperty(CodegenModel model, CodegenProperty propert\n         // We can drop the check for unwrapRequired in (unwrapRequired && !property.required)\n         // due to short-circuit evaluation of the || operator.\n         boolean isSwiftOptional = !unwrapRequired || !property.required;\n-        boolean isSwiftScalarType = property.isInteger || property.isLong || property.isFloat || property.isDouble || property.isBoolean;\n+        boolean isSwiftScalarType = property.isInteger || property.isLong || property.isFloat\n+                                    || property.isDouble || property.isBoolean;\n         if (isSwiftOptional && isSwiftScalarType) {\n             // Optional scalar types like Int?, Int64?, Float?, Double?, and Bool?\n             // do not translate to Objective-C. So we want to flag those\n@@ -632,11 +720,13 @@ public String escapeUnsafeCharacters(String input) {\n         return input.replace(\"*/\", \"*_/\").replace(\"/*\", \"/_*\");\n     }\n \n-    private static CodegenModel reconcileProperties(CodegenModel codegenModel, CodegenModel parentCodegenModel) {\n+    private static CodegenModel reconcileProperties(CodegenModel codegenModel,\n+                                                    CodegenModel parentCodegenModel) {\n         // To support inheritance in this generator, we will analyze\n         // the parent and child models, look for properties that match, and remove\n         // them from the child models and leave them in the parent.\n-        // Because the child models extend the parents, the properties will be available via the parent.\n+        // Because the child models extend the parents, the properties\n+        // will be available via the parent.\n \n         // Get the properties for the parent and child models\n         final List<CodegenProperty> parentModelCodegenProperties = parentCodegenModel.vars;\n@@ -648,24 +738,25 @@ private static CodegenModel reconcileProperties(CodegenModel codegenModel, Codeg\n         boolean removedChildProperty = false;\n \n         for (CodegenProperty parentModelCodegenProperty : parentModelCodegenProperties) {\n-          // Now that we have found a prop in the parent class,\n-          // and search the child class for the same prop.\n-          Iterator<CodegenProperty> iterator = codegenProperties.iterator();\n-          while (iterator.hasNext()) {\n-              CodegenProperty codegenProperty = iterator.next();\n-              if (codegenProperty.baseName == parentModelCodegenProperty.baseName) {\n-                  // We found a property in the child class that is\n-                  // a duplicate of the one in the parent, so remove it.\n-                  iterator.remove();\n-                  removedChildProperty = true;\n-              }\n-          }\n-        }\n-\n-        if(removedChildProperty) {\n+            // Now that we have found a prop in the parent class,\n+            // and search the child class for the same prop.\n+            Iterator<CodegenProperty> iterator = codegenProperties.iterator();\n+            while (iterator.hasNext()) {\n+                CodegenProperty codegenProperty = iterator.next();\n+                if (codegenProperty.baseName == parentModelCodegenProperty.baseName) {\n+                    // We found a property in the child class that is\n+                    // a duplicate of the one in the parent, so remove it.\n+                    iterator.remove();\n+                    removedChildProperty = true;\n+                }\n+            }\n+        }\n+\n+        if (removedChildProperty) {\n             // If we removed an entry from this model's vars, we need to ensure hasMore is updated\n-            int count = 0, numVars = codegenProperties.size();\n-            for(CodegenProperty codegenProperty : codegenProperties) {\n+            int count = 0;\n+            int numVars = codegenProperties.size();\n+            for (CodegenProperty codegenProperty : codegenProperties) {\n                 count += 1;\n                 codegenProperty.hasMore = (count < numVars) ? true : false;\n             }",
      "parent_sha": "5443c0a94c67e84fe98aa642a16b9a56c4c1624a"
    }
  },
  {
    "oid": "8d372fa66af8d7555415367cfcd36b33c715f9cf",
    "message": "better null check for response (#9105)",
    "date": "2021-03-29T04:05:17Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/8d372fa66af8d7555415367cfcd36b33c715f9cf",
    "details": {
      "sha": "590e925a14227a1b1d66eb44fe54366837d321ce",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/8d372fa66af8d7555415367cfcd36b33c715f9cf/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/8d372fa66af8d7555415367cfcd36b33c715f9cf/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2FDefaultCodegen.java?ref=8d372fa66af8d7555415367cfcd36b33c715f9cf",
      "patch": "@@ -813,11 +813,13 @@ public void preprocessOpenAPI(OpenAPI openAPI) {\n                             schemas.put(opId, requestSchema);\n                         }\n                         // process all response bodies\n-                        for (Map.Entry<String, ApiResponse> ar : op.getValue().getResponses().entrySet()) {\n-                            ApiResponse a = ModelUtils.getReferencedApiResponse(openAPI, ar.getValue());\n-                            Schema responseSchema = ModelUtils.getSchemaFromResponse(a);\n-                            if (responseSchema != null) {\n-                                schemas.put(opId + ar.getKey(), responseSchema);\n+                        if (op.getValue().getResponses() != null) {\n+                            for (Map.Entry<String, ApiResponse> ar : op.getValue().getResponses().entrySet()) {\n+                                ApiResponse a = ModelUtils.getReferencedApiResponse(openAPI, ar.getValue());\n+                                Schema responseSchema = ModelUtils.getSchemaFromResponse(a);\n+                                if (responseSchema != null) {\n+                                    schemas.put(opId + ar.getKey(), responseSchema);\n+                                }\n                             }\n                         }\n                     }",
      "parent_sha": "ab6c6962c2bd01cb9bf7b1012e0fcc2181a7f629"
    }
  },
  {
    "oid": "83e9986bba16c003b62b43d16f515cf80cf8a5a2",
    "message": "Style fix: correct copy-paste mistake in test package name (#8451)",
    "date": "2021-01-19T03:04:27Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/83e9986bba16c003b62b43d16f515cf80cf8a5a2",
    "details": {
      "sha": "3a6ce1df3717e426e24d0b02dc364b590f9fdcf2",
      "filename": "modules/openapi-generator/src/test/java/org/openapitools/codegen/csharpnetcore/CSharpNetCoreClientCodegenTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/83e9986bba16c003b62b43d16f515cf80cf8a5a2/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fcsharpnetcore%2FCSharpNetCoreClientCodegenTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/83e9986bba16c003b62b43d16f515cf80cf8a5a2/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fcsharpnetcore%2FCSharpNetCoreClientCodegenTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fcsharpnetcore%2FCSharpNetCoreClientCodegenTest.java?ref=83e9986bba16c003b62b43d16f515cf80cf8a5a2",
      "patch": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.openapitools.codegen.csharp;\n+package org.openapitools.codegen.csharpnetcore;\n \n import org.openapitools.codegen.languages.CSharpNetCoreClientCodegen;\n import org.testng.Assert;",
      "parent_sha": "cd936a66fdbb0d2e27e42868553a9efa709626f6"
    }
  },
  {
    "oid": "e1a1d7ab5a49e31ad08df2f7b1f625c29ac0aa0a",
    "message": "Uncomment File::deleteOnExit (#19624)",
    "date": "2024-09-22T16:18:06Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/e1a1d7ab5a49e31ad08df2f7b1f625c29ac0aa0a",
    "details": {
      "sha": "a9b570586a3b0d0af9ebc124f03a40a293881680",
      "filename": "modules/openapi-generator/src/test/java/org/openapitools/codegen/goginserver/GoGinServerCodegenTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/e1a1d7ab5a49e31ad08df2f7b1f625c29ac0aa0a/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fgoginserver%2FGoGinServerCodegenTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/e1a1d7ab5a49e31ad08df2f7b1f625c29ac0aa0a/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fgoginserver%2FGoGinServerCodegenTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Fgoginserver%2FGoGinServerCodegenTest.java?ref=e1a1d7ab5a49e31ad08df2f7b1f625c29ac0aa0a",
      "patch": "@@ -60,7 +60,7 @@ public void webhooks() throws IOException {\n \n         DefaultGenerator generator = new DefaultGenerator();\n         List<File> files = generator.opts(configurator.toClientOptInput()).generate();\n-        //files.forEach(File::deleteOnExit);\n+        files.forEach(File::deleteOnExit);\n \n         TestUtils.assertFileContains(Paths.get(output + \"/go/routers.go\"),\n                 \"NewPetPost\");",
      "parent_sha": "b4edca5ad4072e1a50be0b658b27a96c2f5ad704"
    }
  },
  {
    "oid": "e0c3aa276d1806d421d3b55714342ba53a4d729b",
    "message": "[codegen ignore] Lazy test setup\n\nMoved temp directory preparation to occur at the start of tests and\nadded temp directory prefix to help avoid conflicts with other tests.",
    "date": "2016-05-29T13:47:47Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/e0c3aa276d1806d421d3b55714342ba53a4d729b",
    "details": {
      "sha": "784fcfe848096228328ab415e2f1e99585bdbf14",
      "filename": "modules/swagger-codegen/src/test/java/io/swagger/codegen/ignore/CodegenIgnoreProcessorTest.java",
      "status": "modified",
      "additions": 37,
      "deletions": 17,
      "changes": 54,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/e0c3aa276d1806d421d3b55714342ba53a4d729b/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fignore%2FCodegenIgnoreProcessorTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/e0c3aa276d1806d421d3b55714342ba53a4d729b/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fignore%2FCodegenIgnoreProcessorTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fignore%2FCodegenIgnoreProcessorTest.java?ref=e0c3aa276d1806d421d3b55714342ba53a4d729b",
      "patch": "@@ -1,6 +1,8 @@\n package io.swagger.codegen.ignore;\n \n import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.testng.annotations.*;\n import static org.testng.Assert.*;\n \n@@ -12,23 +14,42 @@\n \n public class CodegenIgnoreProcessorTest {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(CodegenIgnoreProcessorTest.class);\n+\n     private Boolean allowed;\n+    private final String filename;\n+    private final String ignoreDefinition;\n     private final String description;\n     private String outputDir;\n     private File target;\n     private Path temp;\n \n     private CodegenIgnoreProcessorTest(String filename, String ignoreDefinition, String description) throws IOException {\n+        this.filename = filename;\n+        this.ignoreDefinition = ignoreDefinition;\n         this.description = description;\n+    }\n+\n+    CodegenIgnoreProcessorTest allowed() {\n+        this.allowed = true;\n+        return this;\n+    }\n+\n+    CodegenIgnoreProcessorTest ignored() {\n+        this.allowed = false;\n+        return this;\n+    }\n \n-        temp = Files.createTempDirectory(null);\n+    private void prepareTestFiles() throws IOException {\n+        // NOTE: Each test needs its own directory because .swagger-codegen-ignore needs to exist at the root.\n+        temp = Files.createTempDirectory(getClass().getSimpleName());\n         this.outputDir = temp.toFile().getAbsolutePath();\n \n-        target = new File(this.outputDir, filename);\n+        target = new File(this.outputDir, this.filename);\n \n         boolean mkdirs = target.getParentFile().mkdirs();\n         if(!mkdirs) {\n-            throw new IOException(\"Failed to create parent directories for CodegenIgnoreProcessorTest test file.\");\n+            LOGGER.warn(\"Failed to create directories for CodegenIgnoreProcessorTest test file. Directory may already exist.\");\n         }\n \n         Path created = Files.createFile(target.toPath());\n@@ -39,28 +60,27 @@ private CodegenIgnoreProcessorTest(String filename, String ignoreDefinition, Str\n         // System.out.print(String.format(\"Created codegen ignore processor test file: %s\\n\", created.toAbsolutePath()));\n         File ignoreFile = new File(this.outputDir, \".swagger-codegen-ignore\");\n         try (FileOutputStream stream = new FileOutputStream(ignoreFile)) {\n-            stream.write(ignoreDefinition.getBytes());\n+            stream.write(this.ignoreDefinition.getBytes());\n         }\n     }\n \n-    CodegenIgnoreProcessorTest allowed() {\n-        this.allowed = true;\n-        return this;\n-    }\n-\n-    CodegenIgnoreProcessorTest ignored() {\n-        this.allowed = false;\n-        return this;\n-    }\n-\n-    @AfterClass\n-    public void afterClass() throws IOException {\n-        FileUtils.deleteDirectory(temp.toFile());\n+    @AfterTest\n+    public void afterTest() throws IOException {\n+        if(temp != null && temp.toFile().exists() && temp.toFile().isDirectory()) {\n+            FileUtils.deleteDirectory(temp.toFile());\n+        }\n     }\n \n     @Test\n     public void evaluate() {\n         // Arrange\n+        try {\n+            // Lazily setup files to avoid conflicts and creation when these tests may not even run.\n+            prepareTestFiles();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            fail(\"Failed to prepare test files. \" + e.getMessage());\n+        }\n         CodegenIgnoreProcessor processor = new CodegenIgnoreProcessor(outputDir);\n         Boolean actual = null;\n ",
      "parent_sha": "d172de260da8d5477e05dcba85548306189ede36"
    }
  },
  {
    "oid": "4531bc41eb5dd433846de985cd753578268112bc",
    "message": "Update CodegenTest to apply InlineModelResolver to swagger",
    "date": "2015-11-26T09:44:56Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/4531bc41eb5dd433846de985cd753578268112bc",
    "details": {
      "sha": "3adc19e6db9b98d8b07914a755c2a1fae941af05",
      "filename": "modules/swagger-codegen/src/test/java/io/swagger/codegen/CodegenTest.java",
      "status": "modified",
      "additions": 16,
      "deletions": 9,
      "changes": 25,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/4531bc41eb5dd433846de985cd753578268112bc/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2FCodegenTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/4531bc41eb5dd433846de985cd753578268112bc/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2FCodegenTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Ftest%2Fjava%2Fio%2Fswagger%2Fcodegen%2FCodegenTest.java?ref=4531bc41eb5dd433846de985cd753578268112bc",
      "patch": "@@ -14,7 +14,7 @@ public class CodegenTest {\n \n     @Test(description = \"read a file upload param from a 2.0 spec\")\n     public void fileUploadParamTest() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/petstore.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/petstore.json\");\n         final DefaultCodegen codegen = new DefaultCodegen();\n         final String path = \"/pet/{petId}/uploadImage\";\n         final Operation p = model.getPaths().get(path).getPost();\n@@ -39,7 +39,7 @@ public void fileUploadParamTest() {\n \n     @Test(description = \"read formParam values from a 2.0 spec\")\n     public void formParamTest() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/petstore.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/petstore.json\");\n         final DefaultCodegen codegen = new DefaultCodegen();\n         final String path = \"/pet/{petId}\";\n         final Operation p = model.getPaths().get(path).getPost();\n@@ -83,7 +83,7 @@ public void formParamTest() {\n \n     @Test(description = \"handle required parameters from a 2.0 spec as required when figuring out Swagger types\")\n     public void requiredParametersTest() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/requiredTest.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/requiredTest.json\");\n \n         final DefaultCodegen codegen = new DefaultCodegen() {\n             public String getSwaggerType(Property p) {\n@@ -106,7 +106,7 @@ public String getSwaggerType(Property p) {\n \n     @Test(description = \"select main response from a 2.0 spec using the lowest 2XX code\")\n     public void responseSelectionTest1() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/responseSelectionTest.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/responseSelectionTest.json\");\n         final DefaultCodegen codegen = new DefaultCodegen();\n         final String path = \"/tests/withTwoHundredAndDefault\";\n         final Operation p = model.getPaths().get(path).getGet();\n@@ -117,7 +117,7 @@ public void responseSelectionTest1() {\n \n     @Test(description = \"select main response from a 2.0 spec using the default keyword when no 2XX code\")\n     public void responseSelectionTest2() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/responseSelectionTest.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/responseSelectionTest.json\");\n         final DefaultCodegen codegen = new DefaultCodegen();\n         final String path = \"/tests/withoutTwoHundredButDefault\";\n         final Operation p = model.getPaths().get(path).getGet();\n@@ -128,7 +128,7 @@ public void responseSelectionTest2() {\n \n     @Test(description = \"return byte array when response format is byte\")\n     public void binaryDataTest() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/binaryDataTest.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/binaryDataTest.json\");\n         final DefaultCodegen codegen = new DefaultCodegen();\n         final String path = \"/tests/binaryResponse\";\n         final Operation p = model.getPaths().get(path).getPost();\n@@ -142,7 +142,7 @@ public void binaryDataTest() {\n     \n     @Test(description = \"use operation consumes and produces\")\n     public void localConsumesAndProducesTest() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/globalConsumesAndProduces.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/globalConsumesAndProduces.json\");\n         final DefaultCodegen codegen = new DefaultCodegen();\n         final String path = \"/tests/localConsumesAndProduces\";\n         final Operation p = model.getPaths().get(path).getGet();\n@@ -158,7 +158,7 @@ public void localConsumesAndProducesTest() {\n     \n     @Test(description = \"use spec consumes and produces\")\n     public void globalConsumesAndProducesTest() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/globalConsumesAndProduces.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/globalConsumesAndProduces.json\");\n         final DefaultCodegen codegen = new DefaultCodegen();\n         final String path = \"/tests/globalConsumesAndProduces\";\n         final Operation p = model.getPaths().get(path).getGet();\n@@ -174,7 +174,7 @@ public void globalConsumesAndProducesTest() {\n  \n     @Test(description = \"use operation consumes and produces (reset in operation with empty array)\")\n     public void localResetConsumesAndProducesTest() {\n-        final Swagger model = new SwaggerParser().read(\"src/test/resources/2_0/globalConsumesAndProduces.json\");\n+        final Swagger model = parseAndPrepareSwagger(\"src/test/resources/2_0/globalConsumesAndProduces.json\");\n         final DefaultCodegen codegen = new DefaultCodegen();\n         final String path = \"/tests/localResetConsumesAndProduces\";\n         final Operation p = model.getPaths().get(path).getGet();\n@@ -187,4 +187,11 @@ public void localResetConsumesAndProducesTest() {\n         Assert.assertNull(op.produces);\n \n     }\n+\n+    private Swagger parseAndPrepareSwagger(String path) {\n+        Swagger swagger = new SwaggerParser().read(path);\n+        // resolve inline models\n+        new InlineModelResolver().flatten(swagger);\n+        return swagger;\n+    }\n }",
      "parent_sha": "d250ce3becedb89b8a404c9ad2e936c3023aa25b"
    }
  },
  {
    "oid": "802f9e4424a077095858a68b18ddd0e00ac23ae9",
    "message": "revert to `Object` when model missing",
    "date": "2016-02-08T21:48:20Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/802f9e4424a077095858a68b18ddd0e00ac23ae9",
    "details": {
      "sha": "f3ea72ed5fdd95d48f90e6328182b9b72dac8a37",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/InlineModelResolver.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/802f9e4424a077095858a68b18ddd0e00ac23ae9/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FInlineModelResolver.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/802f9e4424a077095858a68b18ddd0e00ac23ae9/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FInlineModelResolver.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2FInlineModelResolver.java?ref=802f9e4424a077095858a68b18ddd0e00ac23ae9",
      "patch": "@@ -218,7 +218,12 @@ public void flattenProperties(Map<String, Property> properties, String path) {\n         Map<String, Model> modelsToAdd = new HashMap<String, Model>();\n         for (String key : properties.keySet()) {\n             Property property = properties.get(key);\n-            if (property instanceof ObjectProperty && ((ObjectProperty)property).getProperties().size() > 0) {\n+            if(property instanceof ObjectProperty && ((ObjectProperty)property).getProperties() == null) {\n+                MapProperty mp = new MapProperty();\n+                mp.setAdditionalProperties(new StringProperty());\n+                properties.put(key, mp);\n+            }\n+            else if (property instanceof ObjectProperty && ((ObjectProperty)property).getProperties().size() > 0) {\n                 String modelName = uniqueName(path + \"_\" + key);\n \n                 ObjectProperty op = (ObjectProperty) property;\n@@ -276,7 +281,6 @@ public void flattenProperties(Map<String, Property> properties, String path) {\n                         swagger.addDefinition(modelName, innerModel);\n                     }\n                 }\n-            } else {\n             }\n         }\n         if (propsToUpdate.size() > 0) {",
      "parent_sha": "12ff5cc8cda9c80daf81588475f943f4d17e4e1c"
    }
  },
  {
    "oid": "e2eea606fdaddaae9a55f1fabda67ec9afc6573c",
    "message": "[python] Add missing keywords python (#4134)\n\n* Add missing keywords python\r\n\r\n* Correct shell script names\r\n\r\n* Revert \"Correct shell script names\"\r\n\r\nThis reverts commit 37f8fe5af14f00eb464d48f17b8db4d3935a6f9c.",
    "date": "2019-10-13T10:04:02Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/e2eea606fdaddaae9a55f1fabda67ec9afc6573c",
    "details": {
      "sha": "16ec0bd3c03a80addb87eb8a75ef7ca3307f4de7",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/e2eea606fdaddaae9a55f1fabda67ec9afc6573c/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/e2eea606fdaddaae9a55f1fabda67ec9afc6573c/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FPythonClientCodegen.java?ref=e2eea606fdaddaae9a55f1fabda67ec9afc6573c",
      "patch": "@@ -127,7 +127,8 @@ public PythonClientCodegen() {\n                         \"and\", \"del\", \"from\", \"not\", \"while\", \"as\", \"elif\", \"global\", \"or\", \"with\",\n                         \"assert\", \"else\", \"if\", \"pass\", \"yield\", \"break\", \"except\", \"import\",\n                         \"print\", \"class\", \"exec\", \"in\", \"raise\", \"continue\", \"finally\", \"is\",\n-                        \"return\", \"def\", \"for\", \"lambda\", \"try\", \"self\", \"nonlocal\", \"None\", \"True\", \"False\"));\n+                        \"return\", \"def\", \"for\", \"lambda\", \"try\", \"self\", \"nonlocal\", \"None\", \"True\", \n+                        \"False\", \"async\", \"await\"));\n \n         regexModifiers = new HashMap<Character, String>();\n         regexModifiers.put('i', \"IGNORECASE\");",
      "parent_sha": "7a22b14df2077c2e5a1cc33885ca6121401dc4c9"
    }
  },
  {
    "oid": "2651e83c0b8d5f01e8d0444fb5398a359ab524a0",
    "message": "added trim",
    "date": "2016-10-27T19:59:57Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/2651e83c0b8d5f01e8d0444fb5398a359ab524a0",
    "details": {
      "sha": "b5a6a6355be9b263af22e801aede369ad34fa3b3",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/config/CodegenConfiguratorUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/2651e83c0b8d5f01e8d0444fb5398a359ab524a0/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fconfig%2FCodegenConfiguratorUtils.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/2651e83c0b8d5f01e8d0444fb5398a359ab524a0/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fconfig%2FCodegenConfiguratorUtils.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Fconfig%2FCodegenConfiguratorUtils.java?ref=2651e83c0b8d5f01e8d0444fb5398a359ab524a0",
      "patch": "@@ -33,7 +33,7 @@ public static void applyInstantiationTypesKvp(String instantiationTypes, Codegen\n     public static void applyImportMappingsKvp(String importMappings, CodegenConfigurator configurator) {\n         final Map<String, String> map = createMapFromKeyValuePairs(importMappings);\n         for (Map.Entry<String, String> entry : map.entrySet()) {\n-            configurator.addImportMapping(entry.getKey(), entry.getValue());\n+            configurator.addImportMapping(entry.getKey().trim(), entry.getValue().trim());\n         }\n     }\n ",
      "parent_sha": "92af2cf8211a61291547eee137fdddaf862495e1"
    }
  },
  {
    "oid": "d06ab43dd6e0d3765d8138f23127050cb19f30c1",
    "message": "Update SharedTypeScriptTest.java (#13956)",
    "date": "2022-12-06T06:27:05Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/d06ab43dd6e0d3765d8138f23127050cb19f30c1",
    "details": {
      "sha": "3b2169950de0c5b846e619616ff05b08505808a3",
      "filename": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/SharedTypeScriptTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/d06ab43dd6e0d3765d8138f23127050cb19f30c1/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Ftypescript%2FSharedTypeScriptTest.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/d06ab43dd6e0d3765d8138f23127050cb19f30c1/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Ftypescript%2FSharedTypeScriptTest.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Ftypescript%2FSharedTypeScriptTest.java?ref=d06ab43dd6e0d3765d8138f23127050cb19f30c1",
      "patch": "@@ -15,6 +15,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.HashMap;\n+import java.util.Arrays;\n \n import static org.openapitools.codegen.typescript.TypeScriptGroups.*;\n \n@@ -85,14 +86,15 @@ public void toModelImportMapTest() {\n         TypeScriptAxiosClientCodegen codegen = new TypeScriptAxiosClientCodegen();\n \n         Map<String, String[]> types = new HashMap<String, String[]>() {{\n-            put(\"Schema & AnotherSchema\", new String[]{ \"Schema\", \"AnotherSchema\" });\n-            put(\"Schema | AnotherSchema\", new String[]{ \"Schema\", \"AnotherSchema\" });\n+            put(\"Schema & AnotherSchema\", new String[]{ \"AnotherSchema\", \"Schema\" });\n+            put(\"Schema | AnotherSchema\", new String[]{ \"AnotherSchema\", \"Schema\" });\n             put(\"Schema & object\", new String[]{ \"Schema\" });\n             put(\"Schema | object\", new String[]{ \"Schema\" });\n         }};\n \n         for (Map.Entry<String, String[]> entry : types.entrySet()) {\n             String[] mapped = codegen.toModelImportMap(entry.getKey()).values().toArray(new String[0]);\n+            Arrays.sort(mapped);\n             Assert.assertEquals(mapped, entry.getValue());\n         }\n     }",
      "parent_sha": "2524e8fb0abeb81ec16adc1f92e197275539f2d2"
    }
  },
  {
    "oid": "7b6cc2032ad2a6ec82cb2b30bb4ceb8bcb1e3b84",
    "message": "[kotlin] Fix imports of generated class (#7314)",
    "date": "2020-09-09T00:56:48Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/7b6cc2032ad2a6ec82cb2b30bb4ceb8bcb1e3b84",
    "details": {
      "sha": "e463c4bb7989a06eb402a3fd8a79bbc92c171520",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractKotlinCodegen.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/7b6cc2032ad2a6ec82cb2b30bb4ceb8bcb1e3b84/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractKotlinCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/7b6cc2032ad2a6ec82cb2b30bb4ceb8bcb1e3b84/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractKotlinCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FAbstractKotlinCodegen.java?ref=7b6cc2032ad2a6ec82cb2b30bb4ceb8bcb1e3b84",
      "patch": "@@ -771,7 +771,9 @@ protected boolean isReservedWord(String word) {\n     @Override\n     protected boolean needToImport(String type) {\n         // provides extra protection against improperly trying to import language primitives and java types\n-        boolean imports = !type.startsWith(\"kotlin.\") && !type.startsWith(\"java.\") && !defaultIncludes.contains(type) && !languageSpecificPrimitives.contains(type);\n+        boolean imports = !type.startsWith(\"kotlin.\") && !type.startsWith(\"java.\") &&\n+                !defaultIncludes.contains(type) && !languageSpecificPrimitives.contains(type) &&\n+                !type.contains(\".\");\n         return imports;\n     }\n ",
      "parent_sha": "e7f83595e5f61cc09b6f2983490c75c115365af0"
    }
  },
  {
    "oid": "658c6eb5678a9289f95a51793fe8f9f0addcc2a5",
    "message": "rename function to avoid confusion of function in parent class (#15775)",
    "date": "2023-06-07T06:57:15Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/658c6eb5678a9289f95a51793fe8f9f0addcc2a5",
    "details": {
      "sha": "43af4d40d941b8d33384bae9e77cc8fa2c7d0be1",
      "filename": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/658c6eb5678a9289f95a51793fe8f9f0addcc2a5/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FTypeScriptClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/658c6eb5678a9289f95a51793fe8f9f0addcc2a5/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FTypeScriptClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fopenapi-generator%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fcodegen%2Flanguages%2FTypeScriptClientCodegen.java?ref=658c6eb5678a9289f95a51793fe8f9f0addcc2a5",
      "patch": "@@ -1092,7 +1092,7 @@ protected void addImport(Set<String> importsToBeAddedTo, String type) {\n             return;\n         }\n \n-        String[] parts = splitComposedType(type);\n+        String[] parts = splitComposedTypes(type);\n         for (String s : parts) {\n             super.addImport(importsToBeAddedTo, s);\n         }\n@@ -1105,7 +1105,7 @@ protected void addImport(Set<String> importsToBeAddedTo, String type) {\n      * @param type String with composed types\n      * @return list of types\n      */\n-    protected String[] splitComposedType(String type) {\n+    protected String[] splitComposedTypes(String type) {\n         return type.replace(\" \", \"\").split(\"[|&<>]\");\n     }\n }",
      "parent_sha": "59ba00e1f3ddb1efa5ae064987cb4e5a6286e8d5"
    }
  },
  {
    "oid": "85ff15ac8ac6e0a3a41a54394173141a38940fbd",
    "message": "update samples",
    "date": "2021-05-10T11:05:02Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/85ff15ac8ac6e0a3a41a54394173141a38940fbd",
    "details": {
      "sha": "b8a53e2f94703f600b5d4d24b03a46820da3b544",
      "filename": "samples/client/petstore/java/webclient/src/main/java/org/openapitools/client/ApiClient.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/85ff15ac8ac6e0a3a41a54394173141a38940fbd/samples%2Fclient%2Fpetstore%2Fjava%2Fwebclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fclient%2FApiClient.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/85ff15ac8ac6e0a3a41a54394173141a38940fbd/samples%2Fclient%2Fpetstore%2Fjava%2Fwebclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fclient%2FApiClient.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/samples%2Fclient%2Fpetstore%2Fjava%2Fwebclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenapitools%2Fclient%2FApiClient.java?ref=85ff15ac8ac6e0a3a41a54394173141a38940fbd",
      "patch": "@@ -153,6 +153,7 @@ protected void init() {\n \n     /**\n     * Build the WebClientBuilder used to make WebClient.\n+    * @param mapper ObjectMapper used for serialize/deserialize\n     * @return WebClient\n     */\n     public static WebClient.Builder buildWebClientBuilder(ObjectMapper mapper) {\n@@ -176,6 +177,7 @@ public static WebClient.Builder buildWebClientBuilder() {\n \n     /**\n      * Build the WebClient used to make HTTP requests.\n+     * @param mapper ObjectMapper used for serialize/deserialize\n      * @return WebClient\n      */\n     public static WebClient buildWebClient(ObjectMapper mapper) {\n@@ -376,7 +378,7 @@ public String formatDate(Date date) {\n         return dateFormat.format(date);\n     }\n \n-        /**\n+    /**\n      * Get the ObjectMapper used to make HTTP requests.\n      * @return ObjectMapper objectMapper\n      */",
      "parent_sha": "808c0b03bde94579837e8df523a0a568bba751c4"
    }
  },
  {
    "oid": "09add2d87183a86486c6203ad1bf2f5e46c7eba1",
    "message": "Fix test failure by allowing backslash in model name",
    "date": "2015-09-22T06:03:27Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/09add2d87183a86486c6203ad1bf2f5e46c7eba1",
    "details": {
      "sha": "538a5c494a61c484a2d72de8c8cb69db123298e0",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/PhpClientCodegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/09add2d87183a86486c6203ad1bf2f5e46c7eba1/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPhpClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/09add2d87183a86486c6203ad1bf2f5e46c7eba1/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPhpClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FPhpClientCodegen.java?ref=09add2d87183a86486c6203ad1bf2f5e46c7eba1",
      "patch": "@@ -330,7 +330,8 @@ public String toParamName(String name) {\n \n     @Override\n     public String toModelName(String name) {\n-        name = sanitizeName(name);\n+        // Note: backslash (\"\\\\\") is allowed for e.g. \"\\\\DateTime\"\n+        name = name.replaceAll(\"[^\\\\w\\\\\\\\]+\", \"_\");\n \n         // model name cannot use reserved keyword\n         if (reservedWords.contains(name)) {",
      "parent_sha": "9cbf2d370762fc69ce434c916e8dfa200b94e2e2"
    }
  },
  {
    "oid": "350d736706902e5506f9b3ec9c583cfb3a3ea6cb",
    "message": "fixed case on scheme",
    "date": "2014-10-17T00:43:15Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/350d736706902e5506f9b3ec9c583cfb3a3ea6cb",
    "details": {
      "sha": "51bc4138e362b35cddb529601a137e5a7b31b288",
      "filename": "src/main/java/com/wordnik/swagger/codegen/DefaultGenerator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/350d736706902e5506f9b3ec9c583cfb3a3ea6cb/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/350d736706902e5506f9b3ec9c583cfb3a3ea6cb/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FDefaultGenerator.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FDefaultGenerator.java?ref=350d736706902e5506f9b3ec9c583cfb3a3ea6cb",
      "patch": "@@ -52,14 +52,12 @@ public void generate() {\n             config.additionalProperties().put(\"licenseInfo\", license.getName());\n           if(license.getUrl() != null)\n             config.additionalProperties().put(\"licenseUrl\", license.getUrl());\n-          // \n-          // licenseUrl\n         }\n       }\n \n       StringBuilder hostBuilder = new StringBuilder();\n       if(swagger.getSchemes() != null && swagger.getSchemes().size() > 0) {\n-        hostBuilder.append(swagger.getSchemes().get(0));\n+        hostBuilder.append(swagger.getSchemes().get(0).toValue());\n         hostBuilder.append(\"://\");\n       }\n       else\n@@ -338,4 +336,4 @@ public Map<String, Object> processModels(CodegenConfig config, Map<String, Model\n \n     return objs;\n   }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "e0aed88e98ec7f00034de62789920f89b1086557"
    }
  },
  {
    "oid": "f2c64a0fbba83fcb48b67d838b432197eeb9cea8",
    "message": "removed comments",
    "date": "2014-12-06T23:55:42Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/f2c64a0fbba83fcb48b67d838b432197eeb9cea8",
    "details": {
      "sha": "9239d9f7d789d1bc6371f6cb371e4ee0873f3e56",
      "filename": "src/main/java/com/wordnik/swagger/codegen/Codegen.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/f2c64a0fbba83fcb48b67d838b432197eeb9cea8/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/f2c64a0fbba83fcb48b67d838b432197eeb9cea8/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/src%2Fmain%2Fjava%2Fcom%2Fwordnik%2Fswagger%2Fcodegen%2FCodegen.java?ref=f2c64a0fbba83fcb48b67d838b432197eeb9cea8",
      "patch": "@@ -2,9 +2,10 @@\n \n import com.wordnik.swagger.codegen.languages.*;\n import com.wordnik.swagger.models.Swagger;\n-import io.swagger.parser.SwaggerParser;\n import com.wordnik.swagger.util.*;\n \n+import io.swagger.parser.SwaggerParser;\n+\n import org.apache.commons.cli.*;\n \n import java.io.File;\n@@ -53,7 +54,6 @@ public static void main(String[] args) {\n           }\n         }\n         else {\n-          // cmd = parser.parse(options, args);\n           options.addOption(\"h\", \"help\", true, \"config.getHelp()\");\n         }\n         usage(options);",
      "parent_sha": "f3ac9a579f0562e6fac9fe253a6ac51db3dfee5c"
    }
  },
  {
    "oid": "1b16d87dd5c96053e73b5fe0469dbb528244c8d0",
    "message": "Fix float default value\n\nDecimal literals for floats must be casted to float, because that are\ndoubles by default",
    "date": "2016-03-16T21:08:14Z",
    "url": "https://github.com/OpenAPITools/openapi-generator/commit/1b16d87dd5c96053e73b5fe0469dbb528244c8d0",
    "details": {
      "sha": "201dd410f8c552185927eb23b3f465175c7a7615",
      "filename": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/CSharpClientCodegen.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/1b16d87dd5c96053e73b5fe0469dbb528244c8d0/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java",
      "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/1b16d87dd5c96053e73b5fe0469dbb528244c8d0/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java",
      "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules%2Fswagger-codegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fcodegen%2Flanguages%2FCSharpClientCodegen.java?ref=1b16d87dd5c96053e73b5fe0469dbb528244c8d0",
      "patch": "@@ -299,11 +299,16 @@ public Map<String, Object> postProcessModels(Map<String, Object> objMap) {\n             for (CodegenProperty var : cm.vars) {\n                 Map<String, Object> allowableValues = var.allowableValues;\n \n+                //handle float defaults\n+                if((var.defaultValue != null) && (var.datatype.startsWith(\"float\"))) {\n+                \tvar.defaultValue = String.format(\"%1$sF\", var.defaultValue);\n+                }\n+                \n                 // handle ArrayProperty\n                 if (var.items != null) {\n                     allowableValues = var.items.allowableValues;\n                 }\n-\n+                \n                 if (allowableValues == null) {\n                     continue;\n                 }",
      "parent_sha": "3147061345e9647aeb45859ac35d0596052fd148"
    }
  }
]