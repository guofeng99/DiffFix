[
  {
    "oid": "398e6a4e00d46cb189847ad2cf04fa86d75d8b3e",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] interceptor \uac15\uc81c classLoader define\uc2dc superClass\uac00 \ucd94\uc0c1 \ud074\ub798\uc2a4 \uc77c \uacbd\uc6b0, \ucd94\uac00\uc801\uc73c\ub85c \ub85c\ub4dc\ud558\ub3c4\ub85d \ud568.\n - \uc644\uc804\ud55c \uacc4\uce35 \uad6c\uc870\ub97c \ub2e4 \ud3ec\ud568\ud558\ub824\uba74, \ucf54\ub4dc\uac00 \ubcf5\uc7a1\ud574\uc11c \uc81c\ud55c\uc801\uc73c\ub85c class\ub97c \ub85c\ub4dc\uc2dc\ud0a4\ub3c4\ub85d \ub418\uc5b4 \uc788\uc74c.  \n\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@2530 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-10-16T05:25:17Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/398e6a4e00d46cb189847ad2cf04fa86d75d8b3e",
    "details": {
      "sha": "a4f0e8aab7dd34d812bc955b749510cc73a61c76",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/interceptor/bci/JavaAssistByteCodeInstrumentor.java",
      "status": "modified",
      "additions": 28,
      "deletions": 8,
      "changes": 36,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/398e6a4e00d46cb189847ad2cf04fa86d75d8b3e/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Finterceptor%2Fbci%2FJavaAssistByteCodeInstrumentor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/398e6a4e00d46cb189847ad2cf04fa86d75d8b3e/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Finterceptor%2Fbci%2FJavaAssistByteCodeInstrumentor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Finterceptor%2Fbci%2FJavaAssistByteCodeInstrumentor.java?ref=398e6a4e00d46cb189847ad2cf04fa86d75d8b3e",
      "patch": "@@ -2,6 +2,7 @@\n \r\n import java.lang.reflect.Constructor;\r\n import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Modifier;\r\n import java.net.URL;\r\n import java.net.URLClassLoader;\r\n import java.security.ProtectionDomain;\r\n@@ -112,14 +113,18 @@ public Class<?> defineClass(ClassLoader classLoader, String defineClass, Protect\n             logger.info(\"defineClass class:{}, cl:{}\", defineClass, classLoader);\r\n         }\r\n         try {\r\n-//            \uc544\ub798 classLoaderChecker\uac00 \uc0dd\uacbc\uc73c\ub2c8 classLoader \ub97c \uac19\uc774 \ub77d\uc73c\ub85c \uc7a1\uc544\uc57c \ub418\uc9c0 \uc54a\ub294\uac00?\r\n-//            synchronized (classLoader)\r\n-            if (this.classLoadChecker.exist(classLoader, defineClass)) {\r\n-                return classLoader.loadClass(defineClass);\r\n-            } else {\r\n-                CtClass clazz = childClassPool.get(defineClass);\r\n-                defineNestedClass(clazz, classLoader, protectedDomain);\r\n-                return clazz.toClass(classLoader, protectedDomain);\r\n+            // classLoader\ub85c \ub77d\uc744 \uc7a1\ub294\uac8c \uc548\uc804\ud568.\r\n+            // \uc5b4\ucc28\ud53c classLoader\uc5d0\uc11c \ub77d\uc744 \uc7a1\uace0 \ub4e4\uc5b4\uc624\ub294\uc810\ub3c4 \uc788\uace0. \uc608\uc678 \uc0ac\ud56d\uc774 \ubc1c\uc0dd\ud560\uc218 \uc788\uae30 \ub54c\ubb38\uc5d0.\r\n+            // classLoader\uc758 \uc7ac\uc9c4\uc785 \ub77d\uc744 \uc7a1\uace0 \ub4e4\uc5b4\uc624\ub294\uac8c \ubb34\ub09c\ud568.\r\n+            synchronized (classLoader)  {\r\n+                if (this.classLoadChecker.exist(classLoader, defineClass)) {\r\n+                    return classLoader.loadClass(defineClass);\r\n+                } else {\r\n+                    final CtClass clazz = childClassPool.get(defineClass);\r\n+                    defineAbstractSuperClass(clazz, classLoader, protectedDomain);\r\n+                    defineNestedClass(clazz, classLoader, protectedDomain);\r\n+                    return clazz.toClass(classLoader, protectedDomain);\r\n+                }\r\n             }\r\n         } catch (NotFoundException e) {\r\n             throw new InstrumentException(defineClass + \" class not fund. Cause:\" + e.getMessage(), e);\r\n@@ -130,6 +135,21 @@ public Class<?> defineClass(ClassLoader classLoader, String defineClass, Protect\n         }\r\n     }\r\n \r\n+    private void defineAbstractSuperClass(CtClass clazz, ClassLoader classLoader, ProtectionDomain protectedDomain) throws NotFoundException, CannotCompileException {\r\n+        final CtClass superClass = clazz.getSuperclass();\r\n+        if (superClass == null) {\r\n+            // java.lang.Object\uac00 \uc544\ub2cc \uacbd\uc6b0 null\uc740 \uc548\ub098\uc62c\ub4ef.\r\n+            return;\r\n+        }\r\n+        final int modifiers = superClass.getModifiers();\r\n+        if (Modifier.isAbstract(modifiers)) {\r\n+            if (isInfo) {\r\n+                logger.info(\"defineAbstractSuperClass class:{} cl:{}\", superClass.getName(), classLoader);\r\n+            }\r\n+            superClass.toClass(classLoader, protectedDomain);\r\n+        }\r\n+    }\r\n+\r\n     private void defineNestedClass(CtClass clazz, ClassLoader classLoader, ProtectionDomain protectedDomain) throws NotFoundException, CannotCompileException {\r\n         CtClass[] nestedClasses = clazz.getNestedClasses();\r\n         if (nestedClasses.length == 0) {\r",
      "parent_sha": "5b74a242664b157541b434e3d3ef5967387b1088"
    }
  },
  {
    "oid": "fa9608641c5c678af9e772e84e1144be2378f79d",
    "message": "[#6156] Fix typo",
    "date": "2019-11-13T10:18:38Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/fa9608641c5c678af9e772e84e1144be2378f79d",
    "details": {
      "sha": "c527c4aecb01efaaf479a189f7a44dca8d1611c2",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/config/ConfigProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/fa9608641c5c678af9e772e84e1144be2378f79d/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fconfig%2FConfigProperties.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/fa9608641c5c678af9e772e84e1144be2378f79d/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fconfig%2FConfigProperties.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fconfig%2FConfigProperties.java?ref=fa9608641c5c678af9e772e84e1144be2378f79d",
      "patch": "@@ -63,7 +63,7 @@ public class ConfigProperties {\n     @Value(\"${config.show.stackTraceOnError:true}\")\r\n     private boolean showStackTraceOnError;\r\n \r\n-    @Value(\"${websocket.allowedOrigins:#{null}\")\r\n+    @Value(\"${websocket.allowedOrigins:#{null}}\")\r\n     private String webSocketAllowedOrigins;\r\n \r\n     public String getSecurityGuideUrl() {\r",
      "parent_sha": "04f3f97fdeb658c3a275a146b4770875be7af9af"
    }
  },
  {
    "oid": "b0dbe7bcaebd1984745c960f85d48ab2aa33e4ed",
    "message": "[\uc720\uce58\uc218] [NOBTS] test.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@2055 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-07-31T23:46:25Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/b0dbe7bcaebd1984745c960f85d48ab2aa33e4ed",
    "details": {
      "sha": "88f7cfc74e76a9e05843081f7ddae815da198b14",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/db/cubrid/CubridStatementModifier.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/b0dbe7bcaebd1984745c960f85d48ab2aa33e4ed/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2Fcubrid%2FCubridStatementModifier.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/b0dbe7bcaebd1984745c960f85d48ab2aa33e4ed/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2Fcubrid%2FCubridStatementModifier.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2Fcubrid%2FCubridStatementModifier.java?ref=b0dbe7bcaebd1984745c960f85d48ab2aa33e4ed",
      "patch": "@@ -35,14 +35,14 @@ public byte[] modify(ClassLoader classLoader, String javassistClassName, Protect\n \t\t\tstatementClass.addInterceptor(\"executeQuery\", new String[] { \"java.lang.String\" }, new StatementExecuteQueryInterceptor());\n \n \t\t\t// TODO \uc774\uac70 \uace0\uccd0\uc57c \ub428.\n-\t\t\tInterceptor executeUpdate1 = byteCodeInstrumentor.newInterceptor(classLoader, protectedDomain, \"com.nhn.pinpoint.profiler.modifier.db.interceptor.StatementExecuteUpdateInterceptor\");\n-\t\t\tstatementClass.addInterceptor(\"executeUpdate\", new String[] { \"java.lang.String\" }, executeUpdate1);\n+\t\t\t// Interceptor executeUpdate1 = byteCodeInstrumentor.newInterceptor(classLoader, protectedDomain, \"com.nhn.pinpoint.profiler.modifier.db.interceptor.StatementExecuteUpdateInterceptor\");\n+\t\t\t// statementClass.addInterceptor(\"executeUpdate\", new String[] { \"java.lang.String\" }, executeUpdate1);\n \n \t\t\tInterceptor executeUpdate2 = byteCodeInstrumentor.newInterceptor(classLoader, protectedDomain, \"com.nhn.pinpoint.profiler.modifier.db.interceptor.StatementExecuteUpdateInterceptor\");\n \t\t\tstatementClass.addInterceptor(\"executeUpdate\", new String[] { \"java.lang.String\", \"int\" }, executeUpdate2);\n \n-\t\t\tInterceptor executeUpdate3 = byteCodeInstrumentor.newInterceptor(classLoader, protectedDomain, \"com.nhn.pinpoint.profiler.modifier.db.interceptor.StatementExecuteUpdateInterceptor\");\n-\t\t\tstatementClass.addInterceptor(\"execute\", new String[] { \"java.lang.String\" }, executeUpdate3);\n+\t\t\t// Interceptor executeUpdate3 = byteCodeInstrumentor.newInterceptor(classLoader, protectedDomain, \"com.nhn.pinpoint.profiler.modifier.db.interceptor.StatementExecuteUpdateInterceptor\");\n+\t\t\t// statementClass.addInterceptor(\"execute\", new String[] { \"java.lang.String\" }, executeUpdate3);\n \n \t\t\tInterceptor executeUpdate4 = byteCodeInstrumentor.newInterceptor(classLoader, protectedDomain, \"com.nhn.pinpoint.profiler.modifier.db.interceptor.StatementExecuteUpdateInterceptor\");\n \t\t\tstatementClass.addInterceptor(\"execute\", new String[] { \"java.lang.String\", \"int\" }, executeUpdate4);",
      "parent_sha": "1a9a259aae5073279d793166a82a39ef1c1dd639"
    }
  },
  {
    "oid": "126fafed7d557b6a74c7ee9d6621f51982bb0fc9",
    "message": "[#NOISSUE] cleanup permission code.",
    "date": "2019-03-12T01:44:50Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/126fafed7d557b6a74c7ee9d6621f51982bb0fc9",
    "details": {
      "sha": "e478de0f6f52640db810b6d12e7aa26a3ace4d0c",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/controller/AdminController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/126fafed7d557b6a74c7ee9d6621f51982bb0fc9/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FAdminController.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/126fafed7d557b6a74c7ee9d6621f51982bb0fc9/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FAdminController.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FAdminController.java?ref=126fafed7d557b6a74c7ee9d6621f51982bb0fc9",
      "patch": "@@ -36,11 +36,12 @@\n  * @author HyunGil Jeong\n  */\n @Controller\n-@PreAuthorize(\"hasPermission(null, null, 'admin')\")\n+@PreAuthorize(\"hasPermission(null, null, T(com.navercorp.pinpoint.web.controller.AdminController).CALL_API_FOR_APP_AGENT_MANAGEMENT)\")\n @RequestMapping(\"/admin\")\n public class AdminController {\n \n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    public final static String CALL_API_FOR_APP_AGENT_MANAGEMENT = \"permission_administration_callApiForAppAgentManagement\";\n \n     @Autowired\n     private AdminService adminService;",
      "parent_sha": "e16e39cf4da395b4d15a1dc7b481e53218ddb095"
    }
  },
  {
    "oid": "d2ba1f83c3268f41183f819bdf4530b9fc1e7a00",
    "message": "[#4051] Fix openjdk6 compatibility",
    "date": "2018-04-25T08:54:35Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/d2ba1f83c3268f41183f819bdf4530b9fc1e7a00",
    "details": {
      "sha": "cf0d025fa6f3fc1326e3073382da7c66d6ca1d87",
      "filename": "bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/classloader/LauncherBootLoader.java",
      "status": "modified",
      "additions": 25,
      "deletions": 4,
      "changes": 29,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/d2ba1f83c3268f41183f819bdf4530b9fc1e7a00/bootstrap-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Fclassloader%2FLauncherBootLoader.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/d2ba1f83c3268f41183f819bdf4530b9fc1e7a00/bootstrap-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Fclassloader%2FLauncherBootLoader.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/bootstrap-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Fclassloader%2FLauncherBootLoader.java?ref=d2ba1f83c3268f41183f819bdf4530b9fc1e7a00",
      "patch": "@@ -29,20 +29,41 @@\n /**\n  * @author Woonduk Kang(emeroad)\n  */\n-class LauncherBootLoader implements BootLoader {\n+final class LauncherBootLoader implements BootLoader {\n \n     private final URLClassPath bootstrapClassPath = getBootstrapClassPath();\n \n     private static final Method FIND_BOOTSTRAP_CLASS_OR_NULL = findBootstrapClassOrNullMethod();\n \n     private static Method findBootstrapClassOrNullMethod() {\n+        // findBootstrapClassOrNull() jdk Compatibility\n+        // oracleJdk\n+        // oracleJdk 9~10 : reflection is not recommended\n+\n+        // old OracleJdk :\n+        // oracleJdk6_24 : success\n+\n+        // openjdk\n+        // openjdk8 : success\n+        // openjdk7 : success\n+        // openjdk6 : fail (findBootstrapClass0)\n+        NoSuchMethodException rootException;\n         try {\n             Method findBootstrapClassOrNull = ClassLoader.class.getDeclaredMethod(\"findBootstrapClassOrNull\", String.class);\n             findBootstrapClassOrNull.setAccessible(true);\n             return findBootstrapClassOrNull;\n-        } catch (NoSuchMethodException e) {\n-            throw new IllegalStateException(\"ClassLoader.findBootstrapClassOrNull() not found\", e);\n+        } catch (NoSuchMethodException ex) {\n+            rootException = ex;\n         }\n+        try {\n+            // for openjdk6\n+            Method findBootstrapClass0 = ClassLoader.class.getDeclaredMethod(\"findBootstrapClass0\", String.class);\n+            findBootstrapClass0.setAccessible(true);\n+            return findBootstrapClass0;\n+        } catch (NoSuchMethodException ignore) {\n+            // skip\n+        }\n+        throw new IllegalStateException(\"ClassLoader.findBootstrapClassOrNull api not found\", rootException);\n     }\n \n     LauncherBootLoader() {\n@@ -84,7 +105,7 @@ public Enumeration<URL> findResources(String name) throws IOException {\n     private static class URLEnumeration implements Enumeration<URL> {\n         private final Enumeration<Resource> enumeration;\n \n-        public URLEnumeration(Enumeration<Resource> enumeration) {\n+        private URLEnumeration(Enumeration<Resource> enumeration) {\n             this.enumeration = enumeration;\n         }\n ",
      "parent_sha": "4e2bc6ab38be7b2f16b848ad400e4c5b284a5978"
    }
  },
  {
    "oid": "1d7ae5e73583e6a383f2848936cd98333f7e520c",
    "message": "[#noissue] Change access modifier in KeepAliveService\n\nChange the access modifier from private to protected for that user can pass the data with the what user want to pass.",
    "date": "2020-06-09T15:24:28Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/1d7ae5e73583e6a383f2848936cd98333f7e520c",
    "details": {
      "sha": "7a2e1f9a8eba5ec491f366be19da04d45fc26e2f",
      "filename": "collector/src/main/java/com/navercorp/pinpoint/collector/receiver/grpc/service/KeepAliveService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/1d7ae5e73583e6a383f2848936cd98333f7e520c/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2Fgrpc%2Fservice%2FKeepAliveService.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/1d7ae5e73583e6a383f2848936cd98333f7e520c/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2Fgrpc%2Fservice%2FKeepAliveService.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2Fgrpc%2Fservice%2FKeepAliveService.java?ref=1d7ae5e73583e6a383f2848936cd98333f7e520c",
      "patch": "@@ -62,7 +62,7 @@ public void updateState() {\n         }\n     }\n \n-    private AgentProperty newChannelProperties(Header header) {\n+    protected AgentProperty newChannelProperties(Header header) {\n         final String agentId = header.getAgentId();\n         final long agentStartTime = header.getAgentStartTime();\n         return new DefaultAgentProperty(agentId, agentStartTime, Collections.emptyMap());",
      "parent_sha": "7679ae78dd20bd84fee5b4583f352dceda14dbb0"
    }
  },
  {
    "oid": "9a27ad5ea048bb8be5754aa8d6be29b406914dae",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] profiler\uc758 \ud328\ud0a4\uc9c0 \ubcc0\uacbd\uc5d0 \ub530\ub978 agent \uba85 \uc218\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-profiler-bootstrap/trunk@1785 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-06-04T08:11:22Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/9a27ad5ea048bb8be5754aa8d6be29b406914dae",
    "details": {
      "sha": "5eae1da914209b6cdd2b989a3bcacc085451519d",
      "filename": "src/main/java/com/nhn/pinpoint/bootstrap/TomcatBootStrap.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/9a27ad5ea048bb8be5754aa8d6be29b406914dae/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FTomcatBootStrap.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/9a27ad5ea048bb8be5754aa8d6be29b406914dae/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FTomcatBootStrap.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FTomcatBootStrap.java?ref=9a27ad5ea048bb8be5754aa8d6be29b406914dae",
      "patch": "@@ -16,7 +16,7 @@ public class TomcatBootStrap {\n \r\n     private static final Logger logger = Logger.getLogger(TomcatBootStrap.class.getName());\r\n \r\n-    public static final String BOOT_CLASS = \"com.nhn.pinpoint.DefaultAgent\";\r\n+    public static final String BOOT_CLASS = \"com.nhn.pinpoint.profiler.DefaultAgent\";\r\n \r\n \r\n     public static void premain(String agentArgs, Instrumentation instrumentation) {\r",
      "parent_sha": "2d6eca3dcc90b13bbec77ad1f9d648754cb5a6a0"
    }
  },
  {
    "oid": "7700b0414aa20e70826d850bb3d71179f968f2cc",
    "message": "[#11912] Fix missing close on Jar InputStream in Plugin",
    "date": "2025-01-07T02:47:55Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/7700b0414aa20e70826d850bb3d71179f968f2cc",
    "details": {
      "sha": "ec9c594cf1e969ceef467ae8da3390ac8791da8f",
      "filename": "agent-module/bootstraps/bootstrap-java9/src/main/java/com/navercorp/pinpoint/bootstrap/java9/module/JarFileAnalyzer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/7700b0414aa20e70826d850bb3d71179f968f2cc/agent-module%2Fbootstraps%2Fbootstrap-java9%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Fjava9%2Fmodule%2FJarFileAnalyzer.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/7700b0414aa20e70826d850bb3d71179f968f2cc/agent-module%2Fbootstraps%2Fbootstrap-java9%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Fjava9%2Fmodule%2FJarFileAnalyzer.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/agent-module%2Fbootstraps%2Fbootstrap-java9%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Fjava9%2Fmodule%2FJarFileAnalyzer.java?ref=7700b0414aa20e70826d850bb3d71179f968f2cc",
      "patch": "@@ -95,13 +95,16 @@ public Providers apply(JarEntry jarEntry) {\n             if (jarEntryName.indexOf('/', SERVICE_LOADER.length()) != -1) {\n                 return null;\n             }\n-            try {\n-                InputStream inputStream = jarFile.getInputStream(jarEntry);\n \n+            List<String> serviceImplClassName = readServiceProviderConfig(jarEntry);\n+            String serviceClassName = jarEntryName.substring(SERVICE_LOADER.length());\n+            return new Providers(serviceClassName, serviceImplClassName);\n+        }\n+\n+        private List<String> readServiceProviderConfig(JarEntry jarEntry) {\n+            try (InputStream inputStream = jarFile.getInputStream(jarEntry)) {\n                 ServiceDescriptorParser parser = new ServiceDescriptorParser();\n-                List<String> serviceImplClassName = parser.parse(inputStream);\n-                String serviceClassName = jarEntryName.substring(SERVICE_LOADER.length());\n-                return new Providers(serviceClassName, serviceImplClassName);\n+                return parser.parse(inputStream);\n             } catch (IOException e) {\n                 throw new IllegalStateException(jarFile.getName() + \" File read fail \", e);\n             }",
      "parent_sha": "a36ab5aa85baef88335c221ae7f948520b7a1db9"
    }
  },
  {
    "oid": "37b580e088f8196033b155036d88f5f780370b25",
    "message": "[#26] fix findbug issue",
    "date": "2014-09-30T05:48:04Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/37b580e088f8196033b155036d88f5f780370b25",
    "details": {
      "sha": "fbd9337a5329304f117a7bbbda715e0e9223246e",
      "filename": "thrift/src/main/java/com/navercorp/pinpoint/thrift/io/UnsafeByteArrayOutputStream.java",
      "status": "modified",
      "additions": 157,
      "deletions": 170,
      "changes": 327,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/37b580e088f8196033b155036d88f5f780370b25/thrift%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fthrift%2Fio%2FUnsafeByteArrayOutputStream.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/37b580e088f8196033b155036d88f5f780370b25/thrift%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fthrift%2Fio%2FUnsafeByteArrayOutputStream.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/thrift%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fthrift%2Fio%2FUnsafeByteArrayOutputStream.java?ref=37b580e088f8196033b155036d88f5f780370b25",
      "patch": "@@ -9,174 +9,161 @@\n /**\n  * @author emeroad\n  */\n-public class UnsafeByteArrayOutputStream extends OutputStream {\n-\n-    /**\n-     * The buffer where data is stored.\n-     */\n-    protected byte buf[];\n-\n-    /**\n-     * The number of valid bytes in the buffer.\n-     */\n-    protected int count;\n-\n-    /**\n-     * Creates a new byte array output stream. The buffer capacity is\n-     * initially 32 bytes, though its size increases if necessary.\n-     */\n-    public UnsafeByteArrayOutputStream() {\n-        this(32);\n-    }\n-\n-    /**\n-     * Creates a new byte array output stream, with a buffer capacity of\n-     * the specified size, in bytes.\n-     *\n-     * @param size the initial size.\n-     * @throws IllegalArgumentException if size is negative.\n-     */\n-    public UnsafeByteArrayOutputStream(int size) {\n-        if (size < 0) {\n-            throw new IllegalArgumentException(\"Negative initial size: \"\n-                    + size);\n-        }\n-        buf = new byte[size];\n-    }\n-\n-    /**\n-     * Writes the specified byte to this byte array output stream.\n-     *\n-     * @param b the byte to be written.\n-     */\n-    public void write(int b) {\n-        int newcount = count + 1;\n-        if (newcount > buf.length) {\n-            buf = Arrays.copyOf(buf, Math.max(buf.length << 1, newcount));\n-        }\n-        buf[count] = (byte) b;\n-        count = newcount;\n-    }\n-\n-    /**\n-     * Writes <code>len</code> bytes from the specified byte array\n-     * starting at offset <code>off</code> to this byte array output stream.\n-     *\n-     * @param b   the data.\n-     * @param off the start offset in the data.\n-     * @param len the number of bytes to write.\n-     */\n-    public void write(byte b[], int off, int len) {\n-        if ((off < 0) || (off > b.length) || (len < 0) ||\n-                ((off + len) > b.length) || ((off + len) < 0)) {\n-            throw new IndexOutOfBoundsException();\n-        } else if (len == 0) {\n-            return;\n-        }\n-        int newcount = count + len;\n-        if (newcount > buf.length) {\n-            buf = Arrays.copyOf(buf, Math.max(buf.length << 1, newcount));\n-        }\n-        System.arraycopy(b, off, buf, count, len);\n-        count = newcount;\n-    }\n-\n-    /**\n-     * Writes the complete contents of this byte array output stream to\n-     * the specified output stream argument, as if by calling the output\n-     * stream's write method using <code>out.write(buf, 0, count)</code>.\n-     *\n-     * @param out the output stream to which to write the data.\n-     * @throws java.io.IOException if an I/O error occurs.\n-     */\n-    public void writeTo(OutputStream out) throws IOException {\n-        out.write(buf, 0, count);\n-    }\n-\n-    /**\n-     * Resets the <code>count</code> field of this byte array output\n-     * stream to zero, so that all currently accumulated output in the\n-     * output stream is discarded. The output stream can be used again,\n-     * reusing the already allocated buffer space.\n-     *\n-     * @see java.io.ByteArrayInputStream#count\n-     */\n-    public void reset() {\n-        count = 0;\n-    }\n-\n-    /**\n-     * Creates a newly allocated byte array. Its size is the current\n-     * size of this output stream and the valid contents of the buffer\n-     * have been copied into it.\n-     *\n-     * @return the current contents of this output stream, as a byte array.\n-     * @see java.io.ByteArrayOutputStream#size()\n-     */\n-    public byte toByteArray()[] {\n-    \treturn buf;\n-    }\n-\n-    /**\n-     * Returns the current size of the buffer.\n-     *\n-     * @return the value of the <code>count</code> field, which is the number\n-     *         of valid bytes in this output stream.\n-     * @see java.io.ByteArrayOutputStream#count\n-     */\n-    public int size() {\n-        return count;\n-    }\n-\n-    /**\n-     * Converts the buffer's contents into a string decoding bytes using the\n-     * platform's default character set. The length of the new <tt>String</tt>\n-     * is a function of the character set, and hence may not be equal to the\n-     * size of the buffer.\n-     * <p/>\n-     * <p> This method always replaces malformed-input and unmappable-character\n-     * sequences with the default replacement string for the platform's\n-     * default character set. The {@linkplain java.nio.charset.CharsetDecoder}\n-     * class should be used when more control over the decoding process is\n-     * required.\n-     *\n-     * @return String decoded from the buffer's contents.\n-     * @since JDK1.1\n-     */\n-    public String toString() {\n-        return new String(buf, 0, count);\n-    }\n-\n-    /**\n-     * Converts the buffer's contents into a string by decoding the bytes using\n-     * the specified {@link java.nio.charset.Charset charsetName}. The length of\n-     * the new <tt>String</tt> is a function of the charset, and hence may not be\n-     * equal to the length of the byte array.\n-     * <p/>\n-     * <p> This method always replaces malformed-input and unmappable-character\n-     * sequences with this charset's default replacement string. The {@link\n-     * java.nio.charset.CharsetDecoder} class should be used when more control\n-     * over the decoding process is required.\n-     *\n-     * @param charsetName the name of a supported\n-     *                    {@linkplain java.nio.charset.Charset </code>charset<code>}\n-     * @return String decoded from the buffer's contents.\n-     * @throws java.io.UnsupportedEncodingException\n-     *          If the named charset is not supported\n-     * @since JDK1.1\n-     */\n-    public String toString(String charsetName)\n-            throws UnsupportedEncodingException {\n-        return new String(buf, 0, count, charsetName);\n-    }\n-\n-\n-    /**\n-     * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n-     * this class can be called after the stream has been closed without\n-     * generating an <tt>IOException</tt>.\n-     * <p/>\n-     */\n-    public void close() throws IOException {\n-    }\n+public class UnsafeByteArrayOutputStream extends ByteArrayOutputStream {\n+\n+\n+\t/**\n+\t * Creates a new byte array output stream. The buffer capacity is\n+\t * initially 32 bytes, though its size increases if necessary.\n+\t */\n+\tpublic UnsafeByteArrayOutputStream() {\n+\t\tthis(32);\n+\t}\n+\n+\t/**\n+\t * Creates a new byte array output stream, with a buffer capacity of\n+\t * the specified size, in bytes.\n+\t *\n+\t * @param size the initial size.\n+\t * @throws IllegalArgumentException if size is negative.\n+\t */\n+\tpublic UnsafeByteArrayOutputStream(int size) {\n+\t\tsuper(size);\n+\t}\n+\n+\t/**\n+\t * Writes the specified byte to this byte array output stream.\n+\t *\n+\t * @param b the byte to be written.\n+\t */\n+\tpublic void write(int b) {\n+\t\tint newcount = count + 1;\n+\t\tif (newcount > buf.length) {\n+\t\t\tbuf = Arrays.copyOf(buf, Math.max(buf.length << 1, newcount));\n+\t\t}\n+\t\tbuf[count] = (byte) b;\n+\t\tcount = newcount;\n+\t}\n+\n+\t/**\n+\t * Writes <code>len</code> bytes from the specified byte array\n+\t * starting at offset <code>off</code> to this byte array output stream.\n+\t *\n+\t * @param b   the data.\n+\t * @param off the start offset in the data.\n+\t * @param len the number of bytes to write.\n+\t */\n+\tpublic void write(byte b[], int off, int len) {\n+\t\tif ((off < 0) || (off > b.length) || (len < 0) ||\n+\t\t\t\t((off + len) > b.length) || ((off + len) < 0)) {\n+\t\t\tthrow new IndexOutOfBoundsException();\n+\t\t} else if (len == 0) {\n+\t\t\treturn;\n+\t\t}\n+\t\tint newcount = count + len;\n+\t\tif (newcount > buf.length) {\n+\t\t\tbuf = Arrays.copyOf(buf, Math.max(buf.length << 1, newcount));\n+\t\t}\n+\t\tSystem.arraycopy(b, off, buf, count, len);\n+\t\tcount = newcount;\n+\t}\n+\n+\t/**\n+\t * Writes the complete contents of this byte array output stream to\n+\t * the specified output stream argument, as if by calling the output\n+\t * stream's write method using <code>out.write(buf, 0, count)</code>.\n+\t *\n+\t * @param out the output stream to which to write the data.\n+\t * @throws java.io.IOException if an I/O error occurs.\n+\t */\n+\tpublic void writeTo(OutputStream out) throws IOException {\n+\t\tout.write(buf, 0, count);\n+\t}\n+\n+\t/**\n+\t * Resets the <code>count</code> field of this byte array output\n+\t * stream to zero, so that all currently accumulated output in the\n+\t * output stream is discarded. The output stream can be used again,\n+\t * reusing the already allocated buffer space.\n+\t *\n+\t * @see java.io.ByteArrayInputStream#count\n+\t */\n+\tpublic void reset() {\n+\t\tcount = 0;\n+\t}\n+\n+\t/**\n+\t * Creates a newly allocated byte array. Its size is the current\n+\t * size of this output stream and the valid contents of the buffer\n+\t * have been copied into it.\n+\t *\n+\t * @return the current contents of this output stream, as a byte array.\n+\t * @see java.io.ByteArrayOutputStream#size()\n+\t */\n+\tpublic byte toByteArray()[] {\n+\t\treturn buf;\n+\t}\n+\n+\t/**\n+\t * Returns the current size of the buffer.\n+\t *\n+\t * @return the value of the <code>count</code> field, which is the number\n+\t *         of valid bytes in this output stream.\n+\t * @see java.io.ByteArrayOutputStream#count\n+\t */\n+\tpublic int size() {\n+\t\treturn count;\n+\t}\n+\n+\t/**\n+\t * Converts the buffer's contents into a string decoding bytes using the\n+\t * platform's default character set. The length of the new <tt>String</tt>\n+\t * is a function of the character set, and hence may not be equal to the\n+\t * size of the buffer.\n+\t * <p/>\n+\t * <p> This method always replaces malformed-input and unmappable-character\n+\t * sequences with the default replacement string for the platform's\n+\t * default character set. The {@linkplain java.nio.charset.CharsetDecoder}\n+\t * class should be used when more control over the decoding process is\n+\t * required.\n+\t *\n+\t * @return String decoded from the buffer's contents.\n+\t * @since JDK1.1\n+\t */\n+\tpublic String toString() {\n+\t\treturn new String(buf, 0, count);\n+\t}\n+\n+\t/**\n+\t * Converts the buffer's contents into a string by decoding the bytes using\n+\t * the specified {@link java.nio.charset.Charset charsetName}. The length of\n+\t * the new <tt>String</tt> is a function of the charset, and hence may not be\n+\t * equal to the length of the byte array.\n+\t * <p/>\n+\t * <p> This method always replaces malformed-input and unmappable-character\n+\t * sequences with this charset's default replacement string. The {@link\n+\t * java.nio.charset.CharsetDecoder} class should be used when more control\n+\t * over the decoding process is required.\n+\t *\n+\t * @param charsetName the name of a supported\n+\t *                    {@linkplain java.nio.charset.Charset </code>charset<code>}\n+\t * @return String decoded from the buffer's contents.\n+\t * @throws java.io.UnsupportedEncodingException\n+\t *          If the named charset is not supported\n+\t * @since JDK1.1\n+\t */\n+\tpublic String toString(String charsetName)\n+\t\t\tthrows UnsupportedEncodingException {\n+\t\treturn new String(buf, 0, count, charsetName);\n+\t}\n+\n+\n+\t/**\n+\t * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n+\t * this class can be called after the stream has been closed without\n+\t * generating an <tt>IOException</tt>.\n+\t * <p/>\n+\t */\n+\tpublic void close() throws IOException {\n+\t}\n }",
      "parent_sha": "21b95c08f7f3001b1cdf8030d48ff508f69e24f2"
    }
  },
  {
    "oid": "4fd0f5b5ca9a43d48a5fca02dbb68a9df934fb51",
    "message": "[#9317] change SortByAgentInfo rules name",
    "date": "2022-12-15T09:28:27Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/4fd0f5b5ca9a43d48a5fca02dbb68a9df934fb51",
    "details": {
      "sha": "041749451caa5a8022f10e54cafec8d1a1e0c430",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/vo/tree/SortByAgentInfo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/4fd0f5b5ca9a43d48a5fca02dbb68a9df934fb51/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fvo%2Ftree%2FSortByAgentInfo.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/4fd0f5b5ca9a43d48a5fca02dbb68a9df934fb51/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fvo%2Ftree%2FSortByAgentInfo.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fvo%2Ftree%2FSortByAgentInfo.java?ref=4fd0f5b5ca9a43d48a5fca02dbb68a9df934fb51",
      "patch": "@@ -19,7 +19,7 @@ public enum Rules {\n \n         AGENT_ID_DESC(AGENT_ID_ASC.getRule().reversed()),\n \n-        LAST_STARTED_TIME(Comparator.comparingLong(AgentInfo::getStartTimestamp)\n+        RECENT(Comparator.comparingLong(AgentInfo::getStartTimestamp)\n                 .reversed()\n                 .thenComparing(AgentInfo::getAgentId));\n ",
      "parent_sha": "c819c70ff4e593f7d4d4cf6399cd4fcb540509c5"
    }
  },
  {
    "oid": "1d19d0fe17d65bd1c941f3c2999b108f9b1306f6",
    "message": "[#4558] Enhance missing exception handling\n\nEnhance missing exception handling",
    "date": "2019-11-19T03:36:44Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/1d19d0fe17d65bd1c941f3c2999b108f9b1306f6",
    "details": {
      "sha": "13b7f575530516b6645486eaea8f63256d65d51a",
      "filename": "profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/grpc/ReconnectExecutor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/1d19d0fe17d65bd1c941f3c2999b108f9b1306f6/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FReconnectExecutor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/1d19d0fe17d65bd1c941f3c2999b108f9b1306f6/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FReconnectExecutor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FReconnectExecutor.java?ref=1d19d0fe17d65bd1c941f3c2999b108f9b1306f6",
      "patch": "@@ -56,8 +56,9 @@ private void execute0(Runnable command) {\n                 final long failCount = rejectedCounter.incrementAndGet();\n                 logger.info(\"{} reconnectJob scheduled fail {}\", command, failCount);\n             }\n+        } else {\n+            throw new IllegalArgumentException(\"unknown command type \" + command);\n         }\n-        throw new IllegalArgumentException(\"unknown command type \" + command);\n     }\n \n     public void close() {",
      "parent_sha": "95fd7484e60043fa8ea9ff182e2f48dab119db1f"
    }
  },
  {
    "oid": "8baae4a6bee6bffa25f9fe02ccbaf18a63f27b6b",
    "message": "[\uac15\uc6b4\ub355] [WEB-96] filter\ub97c \ud1b5\ud55c map \uad6c\uc131\uc2dc target\ub370\uc774\ud130 \uc0dd\uc131 \ubd80\ubd84 \uc218\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@3607 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-04-07T08:42:13Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/8baae4a6bee6bffa25f9fe02ccbaf18a63f27b6b",
    "details": {
      "sha": "04e1e20a8cb7464edd919f7269b284d7917bc238",
      "filename": "src/main/java/com/nhn/pinpoint/web/service/FilteredMapServiceImpl.java",
      "status": "modified",
      "additions": 20,
      "deletions": 5,
      "changes": 25,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/8baae4a6bee6bffa25f9fe02ccbaf18a63f27b6b/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fservice%2FFilteredMapServiceImpl.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/8baae4a6bee6bffa25f9fe02ccbaf18a63f27b6b/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fservice%2FFilteredMapServiceImpl.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fservice%2FFilteredMapServiceImpl.java?ref=8baae4a6bee6bffa25f9fe02ccbaf18a63f27b6b",
      "patch": "@@ -207,8 +207,6 @@ private ApplicationMap createMap(Range range, Range scanRange, List<List<SpanBo>\n \r\n \r\n         final LinkDataDuplexMap linkDataDuplexMap = new LinkDataDuplexMap();\r\n-//        final LinkDataMap sourceLinkDataMap = new LinkDataMap();\r\n-        final LinkDataMap targetLinkDataMap = linkDataDuplexMap.getTargetLinkDataMap();\r\n \r\n         final DotExtractor dotExtractor = new DotExtractor(scanRange);\r\n         final MapResponseHistogramSummary mapHistogramSummary = new MapResponseHistogramSummary(range);\r\n@@ -237,12 +235,26 @@ private ApplicationMap createMap(Range range, Range scanRange, List<List<SpanBo>\n                 long timestamp = window.refineTimestamp(span.getCollectorAcceptTime());\r\n \r\n                 if (parentApplication.getServiceType() == ServiceType.USER) {\r\n-                    LinkDataMap sourceLinkData = linkDataDuplexMap.getSourceLinkDataMap();\r\n+                    // \uc815\ubc29\ud5a5 \ub370\uc774\ud130\r\n+                    if (logger.isTraceEnabled()) {\r\n+                        logger.trace(\"span user:{} {} -> span:{} {}\", parentApplication, span.getAgentId(), spanApplication, span.getAgentId());\r\n+                    }\r\n+                    final LinkDataMap sourceLinkData = linkDataDuplexMap.getSourceLinkDataMap();\r\n                     sourceLinkData.addLinkData(parentApplication, span.getAgentId(), spanApplication,  span.getAgentId(), timestamp, slotTime, 1);\r\n \r\n-//                    targetLinkDataMap.addLinkData(spanApplication, span.getAgentId(), parentApplication, span.getAgentId(), timestamp, slotTime, 1);\r\n+                    if (logger.isTraceEnabled()) {\r\n+                        logger.trace(\"span target user:{} {} -> span:{} {}\", parentApplication, span.getAgentId(), spanApplication, span.getAgentId());\r\n+                    }\r\n+                    // \uc5ed\uad00\uacc4 \ub370\uc774\ud130\r\n+                    final LinkDataMap targetLinkDataMap = linkDataDuplexMap.getTargetLinkDataMap();\r\n+                    targetLinkDataMap.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, slotTime, 1);\r\n                 } else {\r\n-                    targetLinkDataMap.addLinkData(spanApplication, span.getAgentId(), parentApplication, span.getAgentId(), timestamp, slotTime, 1);\r\n+                    // \uc5ed\uad00\uacc4 \ub370\uc774\ud130\r\n+                    if (logger.isTraceEnabled()) {\r\n+                        logger.trace(\"span target parent:{} {} -> span:{} {}\", parentApplication, span.getAgentId(), spanApplication, span.getAgentId());\r\n+                    }\r\n+                    final LinkDataMap targetLinkDataMap = linkDataDuplexMap.getTargetLinkDataMap();\r\n+                    targetLinkDataMap.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, slotTime, 1);\r\n                 }\r\n \r\n \r\n@@ -312,6 +324,9 @@ private void addNodeFromSpanEvent(SpanBo span, TimeWindow window, LinkDataDuplex\n \r\n             // FIXME\r\n             final long spanEventTimeStamp = window.refineTimestamp(span.getStartTime() + spanEvent.getStartElapsed());\r\n+            if (logger.isTraceEnabled()) {\r\n+                logger.trace(\"spanEvent  src:{} {} -> dest:{} {}\", srcApplication, span.getAgentId(), destApplication, spanEvent.getEndPoint());\r\n+            }\r\n             sourceLinkDataMap.addLinkData(srcApplication, span.getAgentId(), destApplication, spanEvent.getEndPoint(), spanEventTimeStamp, slotTime, 1);\r\n         }\r\n     }\r",
      "parent_sha": "db06a4a25301985209057988d5090d87cbf527a6"
    }
  },
  {
    "oid": "ed08e0fe2df74a1ae7323f9fde4cb3edee177198",
    "message": "[\uc720\uce58\uc218] [NOBTS] host - applicaiton \ub9e4\ud551\uc815\ubcf4 \uc800\uc7a5 \ubc84\uadf8 \uc784\uc2dc \ud328\uce58.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-server/trunk@2752 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-11-05T00:33:46Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/ed08e0fe2df74a1ae7323f9fde4cb3edee177198",
    "details": {
      "sha": "f23a18066cd7aca260e8e4d9beab77237e1986c6",
      "filename": "src/main/java/com/nhn/pinpoint/collector/dao/hbase/HbaseHostApplicationMapDao.java",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/ed08e0fe2df74a1ae7323f9fde4cb3edee177198/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2FHbaseHostApplicationMapDao.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/ed08e0fe2df74a1ae7323f9fde4cb3edee177198/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2FHbaseHostApplicationMapDao.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2FHbaseHostApplicationMapDao.java?ref=ed08e0fe2df74a1ae7323f9fde4cb3edee177198",
      "patch": "@@ -36,18 +36,19 @@ public class HbaseHostApplicationMapDao implements HostApplicationMapDao {\n \t@Autowired\n \tprivate AcceptedTimeService acceptedTimeService;\n \n-\tprivate final ConcurrentMap<String, Object> cache = new ConcurrentHashMap<String, Object>(1024);\n-\tprivate long lastUpdated = System.currentTimeMillis();\n+\t// FIXME \ub9e4\ud551\uc815\ubcf4 \ub9e4\ubc88 \uc800\uc7a5\ud558\uc9c0 \ub9d0\uace0 30~50\ucd08 \uc8fc\uae30\ub85c \ud55c \uac1c\ub9cc \uc800\uc7a5\ub418\ub3c4\ub85d \ubcc0\uacbd.\n+//\tprivate final ConcurrentMap<String, Object> cache = new ConcurrentHashMap<String, Object>(1024);\n+//\tprivate long lastUpdated = System.currentTimeMillis();\n \n \t@Override\n \tpublic void insert(String host, String applicationName, short serviceType) {\n-\t\tString cacheKey = host + applicationName + serviceType;\n-\n-\t\t// \ub9e4 \ubc88 \ub123\uc744 \ud544\uc694 \uc5c6\uc74c.\n-\t\tif (cache.containsKey(cacheKey)) {\n-\t\t\tlogger.debug(\"Skip insert host-application map. host={}, applicationName={}, serviceType={}\", host, applicationName, serviceType);\n-\t\t\treturn;\n-\t\t}\n+//\t\tString cacheKey = host + applicationName + serviceType;\n+//\n+//\t\t// \ub9e4 \ubc88 \ub123\uc744 \ud544\uc694 \uc5c6\uc74c.\n+//\t\tif (cache.containsKey(cacheKey)) {\n+//\t\t\tlogger.debug(\"Skip insert host-application map. host={}, applicationName={}, serviceType={}\", host, applicationName, serviceType);\n+//\t\t\treturn;\n+//\t\t}\n \n \t\tlogger.debug(\"Insert host-application map. host={}, applicationName={}, serviceType={}\", host, applicationName, serviceType);\n \n@@ -61,11 +62,11 @@ public void insert(String host, String applicationName, short serviceType) {\n \n \t\thbaseTemplate.put(HOST_APPLICATION_MAP, rowKey, HOST_APPLICATION_MAP_CF_MAP, columnName, value);\n \n-\t\tif (System.currentTimeMillis() - lastUpdated > 5000) {\n-\t\t\tcache.clear();\n-\t\t} else {\n-\t\t\tcache.put(cacheKey, 1);\n-\t\t}\n-\t\tlastUpdated = System.currentTimeMillis();\n+//\t\tif (System.currentTimeMillis() - lastUpdated > 5000) {\n+//\t\t\tcache.clear();\n+//\t\t} else {\n+//\t\t\tcache.put(cacheKey, 1);\n+//\t\t}\n+//\t\tlastUpdated = System.currentTimeMillis();\n \t}\n }",
      "parent_sha": "ee6b9737889e5daece9fa905c01af5bb3d614aaa"
    }
  },
  {
    "oid": "1313b61c3fe4d7da7e59b87fb20cea883e6b5eae",
    "message": "[\uac15\uc6b4\ub355] [WEB-57] DefaultFilterBuilder\uc5d0\uc11c objectMapper\ub97c \uc778\uc81d\uc158 \ubc1b\ub3c4\ub85d \uc218\uc815.\n\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@3466 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-03-12T07:35:33Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/1313b61c3fe4d7da7e59b87fb20cea883e6b5eae",
    "details": {
      "sha": "37d99b54dbcfc6ebc073e235dbcc92ce05ce456e",
      "filename": "src/main/java/com/nhn/pinpoint/web/filter/DefaultFilterBuilder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/1313b61c3fe4d7da7e59b87fb20cea883e6b5eae/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Ffilter%2FDefaultFilterBuilder.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/1313b61c3fe4d7da7e59b87fb20cea883e6b5eae/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Ffilter%2FDefaultFilterBuilder.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Ffilter%2FDefaultFilterBuilder.java?ref=1313b61c3fe4d7da7e59b87fb20cea883e6b5eae",
      "patch": "@@ -1,5 +1,6 @@\n package com.nhn.pinpoint.web.filter;\n \n+import java.io.IOException;\n import java.net.URLDecoder;\n import java.util.List;\n \n@@ -8,6 +9,7 @@\n import org.codehaus.jackson.type.TypeReference;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -20,7 +22,8 @@ public class DefaultFilterBuilder implements FilterBuilder {\n \n \tprivate final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n-\tprivate final ObjectMapper om = new ObjectMapper();\n+    @Autowired\n+\tprivate ObjectMapper jsonObjectMapper;\n \n \t@Override\n \tpublic Filter build(String filterText) {\n@@ -43,7 +46,7 @@ private Filter makeFilterFromJson(String jsonText) {\n \t\t}\n \t\tFilterChain chain = new FilterChain();\n \t\ttry {\n-\t\t\tList<FilterDescriptor> list = om.readValue(jsonText, new TypeReference<List<FilterDescriptor>>() {\n+\t\t\tList<FilterDescriptor> list = jsonObjectMapper.readValue(jsonText, new TypeReference<List<FilterDescriptor>>() {\n \t\t\t});\n \t\t\t\n \t\t\tfor (FilterDescriptor descriptor : list) {\n@@ -59,9 +62,8 @@ private Filter makeFilterFromJson(String jsonText) {\n \t\t\t\t\tchain.addFilter(new URLPatternFilter(descriptor));\n \t\t\t\t}\n \t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tlogger.error(e.getMessage(), e);\n-\t\t\treturn null;\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e.getMessage(), e);\n \t\t}\n \t\treturn chain.get();\n \t}",
      "parent_sha": "fa4018330885c1353aadb4b39f9feb499ddd3fea"
    }
  },
  {
    "oid": "144da44e5237a77f526b65f90708dc7a4af3778b",
    "message": "[#noissue] cleanup",
    "date": "2022-11-01T09:17:37Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/144da44e5237a77f526b65f90708dc7a4af3778b",
    "details": {
      "sha": "71c23df68bb14285a1680d935ca9cf83412ac6fe",
      "filename": "plugins/vertx/src/main/java/com/navercorp/pinpoint/plugin/vertx/interceptor/RoutingContextPutInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/144da44e5237a77f526b65f90708dc7a4af3778b/plugins%2Fvertx%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fvertx%2Finterceptor%2FRoutingContextPutInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/144da44e5237a77f526b65f90708dc7a4af3778b/plugins%2Fvertx%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fvertx%2Finterceptor%2FRoutingContextPutInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Fvertx%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fvertx%2Finterceptor%2FRoutingContextPutInterceptor.java?ref=144da44e5237a77f526b65f90708dc7a4af3778b",
      "patch": "@@ -22,7 +22,7 @@ public void before(Object target, Object[] args) {\n     public void after(Object target, Object[] args, Object result, Throwable throwable) {\n         RoutingContext context = (RoutingContext) target;\n         Object value = context.data().get(VertxConstants.VERTX_URL_STAT_TEMPLATE_KEY);\n-        if (!Objects.isNull(value)) {\n+        if (value != null) {\n             VertxUrlTemplate attachment = (VertxUrlTemplate)scope.getCurrentInvocation().getAttachment();\n             attachment.setUrlTemplate((String)value);\n         }",
      "parent_sha": "2b2a32f1f2bb308a4d4ccfe6993ca6c50d1e6a58"
    }
  },
  {
    "oid": "9780b930438ccc71c9148a26b23c2732af2cebd9",
    "message": "[#noissue] add default ProtectionDomain for BasePinpointTest",
    "date": "2020-04-09T10:05:39Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/9780b930438ccc71c9148a26b23c2732af2cebd9",
    "details": {
      "sha": "6b55e536f8275f3a88946dab8dcdd94aa44c5291",
      "filename": "profiler-test/src/main/java/com/navercorp/pinpoint/test/classloader/TransformClassLoader.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/9780b930438ccc71c9148a26b23c2732af2cebd9/profiler-test%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftest%2Fclassloader%2FTransformClassLoader.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/9780b930438ccc71c9148a26b23c2732af2cebd9/profiler-test%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftest%2Fclassloader%2FTransformClassLoader.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/profiler-test%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftest%2Fclassloader%2FTransformClassLoader.java?ref=9780b930438ccc71c9148a26b23c2732af2cebd9",
      "patch": "@@ -21,6 +21,8 @@\n import com.navercorp.pinpoint.profiler.util.JavaAssistUtils;\n \n import java.io.InputStream;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.security.ProtectionDomain;\n import java.util.List;\n import java.util.Set;\n@@ -45,6 +47,12 @@ public class TransformClassLoader extends ClassLoader {\n     private final Set<String> notDefinedClass = new CopyOnWriteArraySet<String>();\n     private final List<String> notDefinedPackages = new CopyOnWriteArrayList<String>();\n \n+    private final static ProtectionDomain DEFAULT_DOMAIN = (ProtectionDomain) AccessController.doPrivileged(new PrivilegedAction() {\n+        public Object run() {\n+            return TransformClassLoader.class.getProtectionDomain();\n+        }\n+    });\n+\n     private Translator translator;\n     private ProtectionDomain domain;\n \n@@ -210,7 +218,7 @@ protected Class<?> findClass(String name) throws ClassNotFoundException {\n             if (logger.isLoggable(Level.FINE)) {\n                 this.logger.fine(\"defineClass:\" + name);\n             }\n-            return defineClass(name, classfile, 0, classfile.length);\n+            return defineClass(name, classfile, 0, classfile.length, DEFAULT_DOMAIN);\n         }\n         else {\n             if (logger.isLoggable(Level.FINE)) {",
      "parent_sha": "b21546cfbe7eb47d120ec3ceb21cef7c4d52840b"
    }
  },
  {
    "oid": "cd0a030fc817b15c084a323d87ab0ef018760813",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] metadata\ub97c \ucc3e\uc744 \uacbd\uc6b0 agentInfo table\uc744 \ucc3e\uc9c0 \uc54a\ub3c4\ub85d \uc218\uc815\ud568.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-profiler-bootstrap/trunk@2481 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-10-10T05:01:41Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/cd0a030fc817b15c084a323d87ab0ef018760813",
    "details": {
      "sha": "989772afb00561cfe9febe884d3b280df3de2a20",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/util/MetaObject.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/cd0a030fc817b15c084a323d87ab0ef018760813/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Futil%2FMetaObject.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/cd0a030fc817b15c084a323d87ab0ef018760813/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Futil%2FMetaObject.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Futil%2FMetaObject.java?ref=cd0a030fc817b15c084a323d87ab0ef018760813",
      "patch": "@@ -40,7 +40,7 @@ public R invoke(Object target, Object... args) {\n         if (method == null) {\r\n             // \uba40\ud2f0\uc4f0\ub808\ub4dc\uc5d0\uc11c \uc911\ubcf5 \uc5d1\uc138\uc2a4\ud574\ub3c4 \ubcc4 \ubb38\uc81c \uc5c6\uc744\uac83\uc784.\r\n             final Class<?> aClass = target.getClass();\r\n-            method = getMethod(aClass);\r\n+            method = findMethod(aClass);\r\n             this.methodRef = method;\r\n         }\r\n         return invoke(method, target, args);\r\n@@ -61,7 +61,7 @@ private R invoke(Method method, Object target, Object[] args) {\n         }\r\n     }\r\n \r\n-    private Method getMethod(Class<?> aClass) {\r\n+    private Method findMethod(Class<?> aClass) {\r\n         try {\r\n             final Method method = aClass.getMethod(this.methodName, this.args);\r\n             if (!method.isAccessible()) {\r\n@@ -70,7 +70,7 @@ private Method getMethod(Class<?> aClass) {\n             }\r\n             return method;\r\n         } catch (NoSuchMethodException e) {\r\n-            logger.warn(\"{} not found cls:{} Caused:{}\", new Object[] { this.methodName, aClass, e.getMessage(), e });\r\n+            logger.warn(\"{} not found class:{} Caused:{}\", new Object[] { this.methodName, aClass, e.getMessage(), e });\r\n             return null;\r\n         }\r\n     }\r",
      "parent_sha": "2846c7bd2a5bd6598a1553805b4385958b524c46"
    }
  },
  {
    "oid": "ef90f3122e43ebc23243204241aeefd0f77b68a1",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] connection\uc758 \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791 \uc885\ub8cc \uc2dc\uac04 \uce21\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@645 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2012-09-13T07:09:52Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/ef90f3122e43ebc23243204241aeefd0f77b68a1",
    "details": {
      "sha": "84e014819a635d1b50bac73024fe560d3182f325",
      "filename": "src/main/java/com/profiler/modifier/db/mysql/interceptors/TransactionInterceptor.java",
      "status": "modified",
      "additions": 63,
      "deletions": 23,
      "changes": 86,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/ef90f3122e43ebc23243204241aeefd0f77b68a1/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fmodifier%2Fdb%2Fmysql%2Finterceptors%2FTransactionInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/ef90f3122e43ebc23243204241aeefd0f77b68a1/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fmodifier%2Fdb%2Fmysql%2Finterceptors%2FTransactionInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fmodifier%2Fdb%2Fmysql%2Finterceptors%2FTransactionInterceptor.java?ref=ef90f3122e43ebc23243204241aeefd0f77b68a1",
      "patch": "@@ -15,9 +15,9 @@\n \r\n public class TransactionInterceptor implements StaticAroundInterceptor {\r\n \r\n-    private final Logger logger = Logger.getLogger(TransactionInterceptor.class.getName());\r\n+        private final Logger logger = Logger.getLogger(TransactionInterceptor.class.getName());\r\n \r\n-     private final MetaObject<String> getUrl = new MetaObject<String>(\"_getUrl\", String.class);\r\n+    private final MetaObject<String> getUrl = new MetaObject<String>(\"__getUrl\");\r\n \r\n     @Override\r\n     public void before(Object target, String className, String methodName, String parameterDescription, Object[] args) {\r\n@@ -27,6 +27,16 @@ public void before(Object target, String className, String methodName, String pa\n         if (Trace.getCurrentTraceId() == null) {\r\n             return;\r\n         }\r\n+        if (target instanceof Connection) {\r\n+            Connection con = (Connection) target;\r\n+            if (\"setAutoCommit\".equals(methodName)) {\r\n+                beforeStartTransaction(con);\r\n+            } else if (\"commit\".equals(methodName)) {\r\n+                beforeCommit(con);\r\n+            } else if (\"rollback\".equals(methodName)) {\r\n+                beforeRollback(con);\r\n+            }\r\n+        }\r\n     }\r\n \r\n     @Override\r\n@@ -37,23 +47,33 @@ public void after(Object target, String className, String methodName, String par\n         if (Trace.getCurrentTraceId() == null) {\r\n             return;\r\n         }\r\n-\r\n-        if (\"setAutoCommit\".equals(methodName)) {\r\n-            startTransaction(target, args[0], result);\r\n-        } else if (\"commit\".equals(methodName)) {\r\n-            commit(target, result);\r\n-        } else if (\"rollback\".equals(methodName)) {\r\n-            rollback(target, result);\r\n+        if (target instanceof Connection) {\r\n+            Connection con = (Connection) target;\r\n+            if (\"setAutoCommit\".equals(methodName)) {\r\n+                afterStartTransaction(con, args[0], result);\r\n+            } else if (\"commit\".equals(methodName)) {\r\n+                afterCommit(con, result);\r\n+            } else if (\"rollback\".equals(methodName)) {\r\n+                afterRollback(con, result);\r\n+            }\r\n         }\r\n     }\r\n \r\n+    private void beforeStartTransaction(Connection target) {\r\n \r\n-\r\n-    private void startTransaction(Object target, Object arg, Object result) {\r\n         Trace.traceBlockBegin();\r\n         try {\r\n-            String connectionUrl = this.getUrl.invoke((Connection) target);\r\n+            String connectionUrl = this.getUrl.invoke(target);\r\n             Trace.recordRpcName(\"mysql\", connectionUrl);\r\n+            Trace.record(Annotation.ClientSend);\r\n+        } finally {\r\n+            Trace.traceBlockEnd();\r\n+        }\r\n+    }\r\n+\r\n+    private void afterStartTransaction(Connection target, Object arg, Object result) {\r\n+        Trace.traceBlockBegin();\r\n+        try {\r\n             Boolean autocommit = (Boolean) arg;\r\n             boolean success = InterceptorUtils.isSuccess(result);\r\n             if (!autocommit) {\r\n@@ -65,7 +85,6 @@ private void startTransaction(Object target, Object arg, Object result) {\n                     Throwable th = (Throwable) result;\r\n                     Trace.recordAttibute(\"Exception\", th.getMessage());\r\n                 }\r\n-                Trace.record(Annotation.ClientSend);\r\n                 Trace.record(Annotation.ClientRecv);\r\n             } else {\r\n                 if (success) {\r\n@@ -75,7 +94,6 @@ private void startTransaction(Object target, Object arg, Object result) {\n                     Throwable th = (Throwable) result;\r\n                     Trace.recordAttibute(\"Exception\", th.getMessage());\r\n                 }\r\n-                Trace.record(Annotation.ClientSend);\r\n                 Trace.record(Annotation.ClientRecv);\r\n             }\r\n         } catch (Exception e) {\r\n@@ -87,10 +105,21 @@ private void startTransaction(Object target, Object arg, Object result) {\n         }\r\n     }\r\n \r\n-    private void commit(Object target, Object result) {\r\n+    private void beforeCommit(Connection target) {\r\n         Trace.traceBlockBegin();\r\n         try {\r\n-            String connectionUrl = this.getUrl.invoke((Connection) target);\r\n+            String connectionUrl = this.getUrl.invoke(target);\r\n+            Trace.recordRpcName(\"mysql\", connectionUrl);\r\n+            Trace.record(Annotation.ClientSend);\r\n+        } finally {\r\n+            Trace.traceBlockEnd();\r\n+        }\r\n+    }\r\n+\r\n+    private void afterCommit(Connection target, Object result) {\r\n+        Trace.traceBlockBegin();\r\n+        try {\r\n+            String connectionUrl = this.getUrl.invoke(target);\r\n             Trace.recordRpcName(\"mysql\", connectionUrl);\r\n \r\n             boolean success = InterceptorUtils.isSuccess(result);\r\n@@ -101,7 +130,6 @@ private void commit(Object target, Object result) {\n                 Throwable th = (Throwable) result;\r\n                 Trace.recordAttibute(\"Exception\", th.getMessage());\r\n             }\r\n-            Trace.record(Annotation.ClientSend);\r\n             Trace.record(Annotation.ClientRecv);\r\n         } catch (Exception e) {\r\n             if (logger.isLoggable(Level.WARNING)) {\r\n@@ -112,18 +140,30 @@ private void commit(Object target, Object result) {\n         }\r\n     }\r\n \r\n-    private void rollback(Object target, Object result) {\r\n+\r\n+    private void beforeRollback(Connection target) {\r\n+        Trace.traceBlockBegin();\r\n+        try {\r\n+            String connectionUrl = this.getUrl.invoke(target);\r\n+            Trace.recordRpcName(\"mysql\", connectionUrl);\r\n+            Trace.record(Annotation.ClientSend);\r\n+        } finally {\r\n+            Trace.traceBlockEnd();\r\n+        }\r\n+    }\r\n+\r\n+    private void afterRollback(Connection target, Object result) {\r\n         Trace.traceBlockBegin();\r\n         try {\r\n             // TODO \ub108\ubb34 \uc778\ud130\ub110 \ub808\ubca8\ub85c byte code\ub97c \uc218\uc815\ud558\ub2e4\ubcf4\ub2c8, \ub4dc\ub77c\uc774\ubc84\ub0b4\uc758 close() \uba54\uc18c\ub4dc\uac00 rollback\uc744 \ud638\ucd9c\ud558\ub294 \uac83 \uae4c\uc9c0 \ubcf4\uc784.\r\n             // ex : mysql\r\n             //java.lang.Exception\r\n-\t        //  at com.profiler.modifier.db.mysql.interceptors.TransactionInterceptor.after(TransactionInterceptor.java:24)\r\n-\t        //\tat com.mysql.jdbc.ConnectionImpl.rollback(ConnectionImpl.java:4761) \uc5ec\uae30\uc5d0\uc11c \ub2e4\uc2dc \ubd80\ub984.\r\n-\t\t    //  at com.mysql.jdbc.ConnectionImpl.realClose(ConnectionImpl.java:4345)\r\n-\t\t    //  at com.mysql.jdbc.ConnectionImpl.close(ConnectionImpl.java:1564)\r\n+            //  at com.profiler.modifier.db.mysql.interceptor.TransactionInterceptor.after(TransactionInterceptor.java:24)\r\n+            //\tat com.mysql.jdbc.ConnectionImpl.rollback(ConnectionImpl.java:4761) \uc5ec\uae30\uc5d0\uc11c \ub2e4\uc2dc \ubd80\ub984.\r\n+            //  at com.mysql.jdbc.ConnectionImpl.realClose(ConnectionImpl.java:4345)\r\n+            //  at com.mysql.jdbc.ConnectionImpl.close(ConnectionImpl.java:1564)\r\n \r\n-            String connectionUrl = this.getUrl.invoke((Connection) target);\r\n+            String connectionUrl = this.getUrl.invoke(target);\r\n             Trace.recordRpcName(\"mysql\", connectionUrl);\r\n \r\n             boolean success = InterceptorUtils.isSuccess(result);\r",
      "parent_sha": "2a8232a9ec8230195cc38365396e35020672539a"
    }
  },
  {
    "oid": "abd6ee2497b6996674fa49a7f7665e4058c75e96",
    "message": "Use AnnoationKeyMatchers",
    "date": "2015-09-10T07:54:09Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/abd6ee2497b6996674fa49a7f7665e4058c75e96",
    "details": {
      "sha": "6583295ba4b38437c9c926a77fbab154db16b0ba",
      "filename": "plugins/okhttp/src/main/java/com/navercorp/pinpoint/plugin/okhttp/OkHttpTypeProvider.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/abd6ee2497b6996674fa49a7f7665e4058c75e96/plugins%2Fokhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fokhttp%2FOkHttpTypeProvider.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/abd6ee2497b6996674fa49a7f7665e4058c75e96/plugins%2Fokhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fokhttp%2FOkHttpTypeProvider.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Fokhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fokhttp%2FOkHttpTypeProvider.java?ref=abd6ee2497b6996674fa49a7f7665e4058c75e96",
      "patch": "@@ -16,7 +16,7 @@\n package com.navercorp.pinpoint.plugin.okhttp;\n \n import com.navercorp.pinpoint.common.trace.AnnotationKey;\n-import com.navercorp.pinpoint.common.trace.AnnotationKeyMatcher;\n+import com.navercorp.pinpoint.common.trace.AnnotationKeyMatchers;\n import com.navercorp.pinpoint.common.trace.TraceMetadataProvider;\n import com.navercorp.pinpoint.common.trace.TraceMetadataSetupContext;\n \n@@ -29,7 +29,7 @@ public class OkHttpTypeProvider implements TraceMetadataProvider, OkHttpConstant\n \n     @Override\n     public void setup(TraceMetadataSetupContext context) {\n-        context.addServiceType(OK_HTTP_CLIENT, new AnnotationKeyMatcher.ExactMatcher(AnnotationKey.HTTP_URL));\n-        context.addServiceType(OK_HTTP_CLIENT_INTERNAL, new AnnotationKeyMatcher.ExactMatcher(AnnotationKey.HTTP_INTERNAL_DISPLAY));\n+        context.addServiceType(OK_HTTP_CLIENT, AnnotationKeyMatchers.exact(AnnotationKey.HTTP_URL));\n+        context.addServiceType(OK_HTTP_CLIENT_INTERNAL, AnnotationKeyMatchers.exact(AnnotationKey.HTTP_INTERNAL_DISPLAY));\n     }\n }",
      "parent_sha": "7b8aae4001c18acb14a9fa440e4fc75de7323197"
    }
  },
  {
    "oid": "057ce0fdf24eb7577ee65594b379f5f55b2bdab6",
    "message": "[#9838] Fix wrong variable use of Range \n\ncause\uff1a'to' here is mistakenly written as' from'\r\naffected : getServerMapDataV2.pinpoint - range - toDateTime",
    "date": "2023-04-11T01:06:00Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/057ce0fdf24eb7577ee65594b379f5f55b2bdab6",
    "details": {
      "sha": "0158c61fd0bcff86bba72af306144a8d9283649b",
      "filename": "metric-module/metric/src/main/java/com/navercorp/pinpoint/metric/web/util/Range.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/057ce0fdf24eb7577ee65594b379f5f55b2bdab6/metric-module%2Fmetric%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fmetric%2Fweb%2Futil%2FRange.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/057ce0fdf24eb7577ee65594b379f5f55b2bdab6/metric-module%2Fmetric%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fmetric%2Fweb%2Futil%2FRange.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/metric-module%2Fmetric%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fmetric%2Fweb%2Futil%2FRange.java?ref=057ce0fdf24eb7577ee65594b379f5f55b2bdab6",
      "patch": "@@ -57,7 +57,7 @@ public long getTo() {\n     }\n \n     public String getToDateTime() {\n-        return DateTimeFormatUtils.formatSimple(from);\n+        return DateTimeFormatUtils.formatSimple(to);\n     }\n \n     public long getRange() {",
      "parent_sha": "748657b2c405bec344f15aab7b2a647d7a34e15a"
    }
  },
  {
    "oid": "b8338a4a2de9c81b16a0da9c44418b09341ab82a",
    "message": "[\uac15\uc6b4\ub355] [WEB-49] equals() \ud638\ucd9c\uc2dc serviceType\uc744 \uba3c\uc800 \ube44\uad50\ud558\ub3c4\ub85d \uc218\uc815. \ubb38\uc790\uc5f4 \ube44\uad50 \ubcf4\ub2e4 enum \ube44\uad50\uac00 \ub354 \ube60\ub974\ubbc0\ub85c \uc218\uc815\ud558\uc600\uc74c.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@3338 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-02-14T04:12:03Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/b8338a4a2de9c81b16a0da9c44418b09341ab82a",
    "details": {
      "sha": "e6b677cba94396c1f4a08d81dbff049fee4fb225",
      "filename": "src/main/java/com/nhn/pinpoint/web/vo/Application.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/b8338a4a2de9c81b16a0da9c44418b09341ab82a/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fvo%2FApplication.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/b8338a4a2de9c81b16a0da9c44418b09341ab82a/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fvo%2FApplication.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fvo%2FApplication.java?ref=b8338a4a2de9c81b16a0da9c44418b09341ab82a",
      "patch": "@@ -54,8 +54,8 @@ public boolean equals(String thatName, ServiceType thatServiceType) {\n         if (thatServiceType == null) {\n             throw new NullPointerException(\"thatServiceType must not be null\");\n         }\n-        if (!name.equals(thatName)) return false;\n         if (serviceType != thatServiceType) return false;\n+        if (!name.equals(thatName)) return false;\n \n         return true;\n     }",
      "parent_sha": "40a705484e4025c91de0b6bd716c80ae1f20e333"
    }
  },
  {
    "oid": "b6b999e8bf6e1af86d1f19ce2576da1c2e9ce18b",
    "message": "[\uac15\uc6b4\ub355] [PROFILER-7] \ub2e4\uc2dc 1024 * 5\ub85c \uc218\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-profiler-bootstrap/trunk@3481 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-03-18T01:35:33Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/b6b999e8bf6e1af86d1f19ce2576da1c2e9ce18b",
    "details": {
      "sha": "c5b66b9794d69a4f304013fa5f6f5daa4e0c0e8b",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/config/ProfilerConfig.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/b6b999e8bf6e1af86d1f19ce2576da1c2e9ce18b/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fconfig%2FProfilerConfig.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/b6b999e8bf6e1af86d1f19ce2576da1c2e9ce18b/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fconfig%2FProfilerConfig.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fconfig%2FProfilerConfig.java?ref=b6b999e8bf6e1af86d1f19ce2576da1c2e9ce18b",
      "patch": "@@ -24,8 +24,8 @@ public class ProfilerConfig {\n     private int collectorUdpServerPort = 9995;\n     private int collectorTcpServerPort = 9994;\n \n-    private int spanDataSenderWriteQueueSize = 128;\n-    private int statDataSenderWriteQueueSize = 128;\n+    private int spanDataSenderWriteQueueSize = 1024 * 5;\n+    private int statDataSenderWriteQueueSize = 1024 * 5;\n \n     private int jdbcSqlCacheSize = 1024;\n \tprivate boolean jdbcProfile = true;\n@@ -356,8 +356,8 @@ private void readPropertyValues(Properties prop) {\n \t\tthis.collectorUdpServerPort = readInt(prop, \"profiler.collector.udp.port\", 9995);\n         this.collectorTcpServerPort = readInt(prop, \"profiler.collector.tcp.port\", 9994);\n \n-        this.spanDataSenderWriteQueueSize = readInt(prop, \"profiler.spandatasender.write.queue.size\", 128);\n-        this.statDataSenderWriteQueueSize = readInt(prop, \"profiler.statdatasender.write.queue.size\", 128);\n+        this.spanDataSenderWriteQueueSize = readInt(prop, \"profiler.spandatasender.write.queue.size\", 1024 * 5);\n+        this.statDataSenderWriteQueueSize = readInt(prop, \"profiler.statdatasender.write.queue.size\", 1024 * 5);\n \n \n \t\t// JDBC",
      "parent_sha": "e37c0b4185651e8a6a60a5e91091691194ba0f78"
    }
  },
  {
    "oid": "186d5338e1004c648ba694e99886faa01175a542",
    "message": "[\uc720\uce58\uc218] [NOBTS] add timeout, 500error page\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-testweb/trunk@830 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2012-10-26T07:29:39Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/186d5338e1004c648ba694e99886faa01175a542",
    "details": {
      "sha": "c1e25b61c9b8dde9683e866cf02eafeaf4b6024c",
      "filename": "src/main/java/com/nhn/hippo/testweb/controller/HelloWorldController.java",
      "status": "modified",
      "additions": 26,
      "deletions": 5,
      "changes": 31,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/186d5338e1004c648ba694e99886faa01175a542/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Ftestweb%2Fcontroller%2FHelloWorldController.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/186d5338e1004c648ba694e99886faa01175a542/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Ftestweb%2Fcontroller%2FHelloWorldController.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Ftestweb%2Fcontroller%2FHelloWorldController.java?ref=186d5338e1004c648ba694e99886faa01175a542",
      "patch": "@@ -47,11 +47,13 @@ public String donothing(Model model) {\n \t */\r\n \t@RequestMapping(value = \"/arcus\")\r\n \tpublic String arcus(Model model) {\r\n+\t\tFuture<Boolean> future = null;\r\n \t\ttry {\r\n-\t\t\tFuture<Boolean> future = arcus.set(\"hippo:testkey\", 10, \"Hello, Hippo.\");\r\n+\t\t\tfuture = arcus.set(\"hippo:testkey\", 10, \"Hello, Hippo.\");\r\n \t\t\tfuture.get(1000L, TimeUnit.MILLISECONDS);\r\n \t\t} catch (Exception e) {\r\n-\t\t\te.printStackTrace();\r\n+\t\t\tif (future != null)\r\n+\t\t\t\tfuture.cancel(true);\r\n \t\t}\r\n \t\treturn \"arcus\";\r\n \t}\r\n@@ -76,20 +78,39 @@ public String mysql(Model model) {\n \r\n \t\treturn \"mysql\";\r\n \t}\r\n-\t\r\n+\r\n \t@RequestMapping(value = \"/remotecombination\")\r\n \tpublic String remotecombination(Model model) {\r\n \t\tHttpInvoker client = new HttpInvoker(new HttpConnectorOptions());\r\n \t\tclient.executeToBloc(\"http://localhost:8080/combination.hippo\", new HashMap<String, Object>());\r\n-\t\t\r\n+\r\n \t\treturn \"remotecombination\";\r\n \t}\r\n \r\n \t@RequestMapping(value = \"/combination\")\r\n \tpublic String combination(Model model) {\r\n \t\tmysql(model);\r\n \t\tarcus(model);\r\n-\t\t\r\n+\r\n \t\treturn \"combination\";\r\n \t}\r\n+\r\n+\t@RequestMapping(value = \"/error500\")\r\n+\tpublic String error500(Model model) {\r\n+\t\tint i = 1 / 0;\r\n+\t\treturn \"error\";\r\n+\t}\r\n+\r\n+\t@RequestMapping(value = \"/arcustimeout\")\r\n+\tpublic String arcustimeout(Model model) {\r\n+\t\tFuture<Boolean> future = null;\r\n+\t\ttry {\r\n+\t\t\tfuture = arcus.set(\"hippo:expect-timeout\", 10, \"Hello, Timeout.\");\r\n+\t\t\tfuture.get(100L, TimeUnit.MICROSECONDS);\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tif (future != null)\r\n+\t\t\t\tfuture.cancel(true);\r\n+\t\t}\r\n+\t\treturn \"timeout\";\r\n+\t}\r\n }\r",
      "parent_sha": "9e7b816974d3f44bbd804a250b4cce5b7d0902cf"
    }
  },
  {
    "oid": "7039987df52b1507b918825d1ebaf1591ad4e894",
    "message": "[#noissue] Apply @AutoClose",
    "date": "2024-12-30T02:38:14Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/7039987df52b1507b918825d1ebaf1591ad4e894",
    "details": {
      "sha": "296f8e7847d13505e1edfffee4616432439573db",
      "filename": "agent-module/plugins-it/rabbitmq-it/src/test/java/com/navercorp/pinpoint/it/plugin/rabbitmq/spring/SpringAmqpRabbitTestRunner.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/7039987df52b1507b918825d1ebaf1591ad4e894/agent-module%2Fplugins-it%2Frabbitmq-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fit%2Fplugin%2Frabbitmq%2Fspring%2FSpringAmqpRabbitTestRunner.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/7039987df52b1507b918825d1ebaf1591ad4e894/agent-module%2Fplugins-it%2Frabbitmq-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fit%2Fplugin%2Frabbitmq%2Fspring%2FSpringAmqpRabbitTestRunner.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/agent-module%2Fplugins-it%2Frabbitmq-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fit%2Fplugin%2Frabbitmq%2Fspring%2FSpringAmqpRabbitTestRunner.java?ref=7039987df52b1507b918825d1ebaf1591ad4e894",
      "patch": "@@ -21,13 +21,11 @@\n import com.navercorp.pinpoint.it.plugin.rabbitmq.util.RabbitMQTestConstants;\n import org.junit.jupiter.api.Assertions;\n import org.springframework.amqp.rabbit.connection.ConnectionFactory;\n-import org.testcontainers.shaded.com.google.common.util.concurrent.Uninterruptibles;\n import test.pinpoint.plugin.rabbitmq.MessageConverter;\n import test.pinpoint.plugin.rabbitmq.spring.TestMessageHolder;\n import test.pinpoint.plugin.rabbitmq.spring.service.TestReceiverService;\n import test.pinpoint.plugin.rabbitmq.spring.service.TestSenderService;\n \n-import java.time.Duration;\n import java.util.Objects;\n import java.util.concurrent.TimeUnit;\n \n@@ -105,12 +103,20 @@ private static void awaitAndVerifyTraceCount(PluginTestVerifier verifier, int ex\n                     return;\n                 } catch (AssertionError e) {\n                     // ignore and retry\n-                    Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(waitIntervalMs));\n+                    await(waitIntervalMs);\n                 }\n             }\n             verifier.verifyTraceCount(expectedTraceCount);\n         } finally {\n             verifier.printCache();\n         }\n     }\n+\n+    private static void await(long waitIntervalMs) {\n+        try {\n+            Thread.sleep(waitIntervalMs);\n+        } catch (InterruptedException ex) {\n+            Thread.currentThread().interrupt();\n+        }\n+    }\n }",
      "parent_sha": "52091584579ea8b8b1761289645543a70fa34212"
    }
  },
  {
    "oid": "8d2ea5571378f1e389378b7aa1eb6a73b494be41",
    "message": "[#noissue] Fix incorrect ARTIFACT_SEPARATOR",
    "date": "2020-03-19T05:18:33Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/8d2ea5571378f1e389378b7aa1eb6a73b494be41",
    "details": {
      "sha": "082cf0c40ca1f30dfd10902eedc0a8d4857b3ba6",
      "filename": "profiler/src/main/java/com/navercorp/pinpoint/profiler/context/provider/plugin/PluginJarsProvider.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/8d2ea5571378f1e389378b7aa1eb6a73b494be41/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fcontext%2Fprovider%2Fplugin%2FPluginJarsProvider.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/8d2ea5571378f1e389378b7aa1eb6a73b494be41/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fcontext%2Fprovider%2Fplugin%2FPluginJarsProvider.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fcontext%2Fprovider%2Fplugin%2FPluginJarsProvider.java?ref=8d2ea5571378f1e389378b7aa1eb6a73b494be41",
      "patch": "@@ -98,11 +98,12 @@ private List<PluginJar> createPluginJars(final List<String> pluginJarPaths,\n         pluginJars.addAll(unorderedPlugins);\n         return pluginJars;\n     }\n-\n+    // ArtifactIdUtils.ARTIFACT_SEPARATOR\n+    private static final String ARTIFACT_SEPARATOR = \";\";\n     private PluginFilter createPluginJarFilter(ProfilerConfig profilerConfig) {\n         final String importPluginIdString = profilerConfig.readString(DefaultProfilerConfig.IMPORT_PLUGIN, null);\n         if (StringUtils.hasLength(importPluginIdString)) {\n-            List<String> importPluginIds = StringUtils.tokenizeToStringList(importPluginIdString, \",\");\n+            List<String> importPluginIds = StringUtils.tokenizeToStringList(importPluginIdString, ARTIFACT_SEPARATOR);\n             PluginFilterFactory filterFactory = new ImportPluginFilterFactory(importPluginIds);\n             return filterFactory.newPluginFilter();\n         }",
      "parent_sha": "4d2249ab886b7208b49da4614aebb7d57912434f"
    }
  },
  {
    "oid": "833989d407116632cf9c765db65876baba0748eb",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] preparementStatemet create\uc2dc sql\uc774 \uc548\ubcf4\uc774\ub294 \ubb38\uc81c\uac00 \uc788\uc5b4 \uc218\uc815\ud568.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@1655 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-05-13T09:22:11Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/833989d407116632cf9c765db65876baba0748eb",
    "details": {
      "sha": "e21a599cffb36710d505aef306bf16052c9ba476",
      "filename": "src/main/java/com/profiler/modifier/db/interceptor/PreparedStatementCreateInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/833989d407116632cf9c765db65876baba0748eb/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fmodifier%2Fdb%2Finterceptor%2FPreparedStatementCreateInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/833989d407116632cf9c765db65876baba0748eb/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fmodifier%2Fdb%2Finterceptor%2FPreparedStatementCreateInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fmodifier%2Fdb%2Finterceptor%2FPreparedStatementCreateInterceptor.java?ref=833989d407116632cf9c765db65876baba0748eb",
      "patch": "@@ -70,7 +70,6 @@ public void after(Object target, Object[] args, Object result) {\n             // 1. traceContext\ub97c \uccb4\ud06c\ud558\uba74 \uc548\ub428. traceContext\uc5d0\uc11c \uc989 \uac19\uc740 thread\uc5d0\uc11c prearedStatement\uc5d0\uc11c \uc548\ub9cc\ub4e4\uc218\ub3c4 \uc788\uc74c.\r\n             // 2. sampling \ub3d9\uc791\uc774 \ub3d9\uc791\ud560 \uacbd\uc6b0 preparedStatement\ub97c create\ud558\ub294 thread\uac00 trace \ub300\uc0c1\uc774 \uc544\ub2d0\uc218 \uc788\uc74c. \uba3c\uc81c sql\uc744 \uc800\uc7a5\ud574\uc57c \ud55c\ub2e4.\r\n             String sql = (String) args[0];\r\n-\r\n             parsingResult = traceContext.parseSql(sql);\r\n             if (parsingResult != null) {\r\n                 this.setSql.invoke(result, parsingResult);\r\n@@ -85,7 +84,7 @@ public void after(Object target, Object[] args, Object result) {\n         if (trace == null) {\r\n             return;\r\n         }\r\n-\r\n+        trace.recordSqlParsingResult(parsingResult);\r\n         trace.recordException(result);\r\n         trace.recordApi(descriptor);\r\n \r",
      "parent_sha": "e65a6d581acf3399dd3bd03c8a745fa7544d6526"
    }
  },
  {
    "oid": "0ac56cc7ea40c37191adc6fff84cf01b3ed2690b",
    "message": "[#2524] fix singleton scope",
    "date": "2017-03-09T04:43:47Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/0ac56cc7ea40c37191adc6fff84cf01b3ed2690b",
    "details": {
      "sha": "9cb6d8c6145ed9dd54df8c10d9b4f6da9a62be39",
      "filename": "profiler/src/main/java/com/navercorp/pinpoint/profiler/context/ApplicationContextModule.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/0ac56cc7ea40c37191adc6fff84cf01b3ed2690b/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fcontext%2FApplicationContextModule.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/0ac56cc7ea40c37191adc6fff84cf01b3ed2690b/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fcontext%2FApplicationContextModule.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fcontext%2FApplicationContextModule.java?ref=0ac56cc7ea40c37191adc6fff84cf01b3ed2690b",
      "patch": "@@ -138,10 +138,10 @@ protected void configure() {\n \n         bindServiceComponent();\n \n-        bind(DataSourceMonitorRegistryService.class).toProvider(DataSourceMonitorRegistryServiceProvider.class);\n+        bind(DataSourceMonitorRegistryService.class).toProvider(DataSourceMonitorRegistryServiceProvider.class).in(Scopes.SINGLETON);\n \n-        bind(IdGenerator.class).to(AtomicIdGenerator.class);\n-        bind(AsyncIdGenerator.class).to(DefaultAsyncIdGenerator.class);\n+        bind(IdGenerator.class).to(AtomicIdGenerator.class).in(Scopes.SINGLETON);\n+        bind(AsyncIdGenerator.class).to(DefaultAsyncIdGenerator.class).in(Scopes.SINGLETON);\n         bind(TransactionCounter.class).to(DefaultTransactionCounter.class).in(Scopes.SINGLETON);\n \n         bind(Sampler.class).toProvider(SamplerProvider.class).in(Scopes.SINGLETON);",
      "parent_sha": "7f5a54c5af26db464e04a003b2cef43ea95d5942"
    }
  },
  {
    "oid": "3a3500d8e19ec3f7954c40b50e9404c776a9512c",
    "message": "[#11828] Cleanup",
    "date": "2024-12-19T06:57:28Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/3a3500d8e19ec3f7954c40b50e9404c776a9512c",
    "details": {
      "sha": "c5d4f6aaa7c53c22627d71193463428b20f6f40d",
      "filename": "agent-module/plugins/spring-data-r2dbc/src/main/java/com/navercorp/pinpoint/plugin/spring/r2dbc/SpringDataR2dbcConfiguration.java",
      "status": "modified",
      "additions": 6,
      "deletions": 42,
      "changes": 48,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/3a3500d8e19ec3f7954c40b50e9404c776a9512c/agent-module%2Fplugins%2Fspring-data-r2dbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fr2dbc%2FSpringDataR2dbcConfiguration.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/3a3500d8e19ec3f7954c40b50e9404c776a9512c/agent-module%2Fplugins%2Fspring-data-r2dbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fr2dbc%2FSpringDataR2dbcConfiguration.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/agent-module%2Fplugins%2Fspring-data-r2dbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fr2dbc%2FSpringDataR2dbcConfiguration.java?ref=3a3500d8e19ec3f7954c40b50e9404c776a9512c",
      "patch": "@@ -32,12 +32,12 @@ public class SpringDataR2dbcConfiguration {\n     public SpringDataR2dbcConfiguration(ProfilerConfig config) {\n         this.enabled = config.readBoolean(\"profiler.spring.data.r2dbc.enable\", true);\n \n-        this.mssqlConfig = MssqlConfig.of(config);\n-        this.oracleConfig = OracleConfig.of(config);\n-        this.mariadbConfig = MariadbConfig.of(config);\n-        this.mysqlConfig = MysqlConfig.of(config);\n-        this.h2Config = H2Config.of(config);\n-        this.postgresqlConfig = PostgresqlConfig.of(config);\n+        this.mssqlConfig = JdbcConfig.of(\"mssql\", config);\n+        this.oracleConfig = JdbcConfig.of(\"oracle\", config);\n+        this.mariadbConfig = JdbcConfig.of(\"mariadb\", config);\n+        this.mysqlConfig = JdbcConfig.of(\"mysql\", config);\n+        this.h2Config = JdbcConfig.of(\"h2\", config);\n+        this.postgresqlConfig = JdbcConfig.of(\"postgresql\", config);\n     }\n \n     public JdbcConfig getMssqlConfig() {\n@@ -80,40 +80,4 @@ public String toString() {\n                 \", postgresqlConfig=\" + postgresqlConfig +\n                 '}';\n     }\n-\n-    static class MssqlConfig {\n-        public static JdbcConfig of(ProfilerConfig config) {\n-            return JdbcConfig.of(\"mssql\", config);\n-        }\n-    }\n-\n-    static class OracleConfig {\n-        public static JdbcConfig of(ProfilerConfig config) {\n-            return JdbcConfig.of(\"oracle\", config);\n-        }\n-    }\n-\n-    static class MariadbConfig {\n-        public static JdbcConfig of(ProfilerConfig config) {\n-            return JdbcConfig.of(\"mariadb\", config);\n-        }\n-    }\n-\n-    static class MysqlConfig {\n-        public static JdbcConfig of(ProfilerConfig config) {\n-            return JdbcConfig.of(\"mysql\", config);\n-        }\n-    }\n-\n-    static class H2Config {\n-        public static JdbcConfig of(ProfilerConfig config) {\n-            return JdbcConfig.of(\"h2\", config);\n-        }\n-    }\n-\n-    static class PostgresqlConfig {\n-        public static JdbcConfig of(ProfilerConfig config) {\n-            return JdbcConfig.of(\"postgresql\", config);\n-        }\n-    }\n }",
      "parent_sha": "91161cbf86100426919d6dbd404afea235a9bd30"
    }
  },
  {
    "oid": "401baaf8539a433e7a7b52e9a37c5a46f9350b90",
    "message": "[\uc720\uce58\uc218] [tomcat-profiler-6] baseFramework interceptor \ub514\ubc84\uadf8\uc6a9 \ub85c\uadf8 \ucd94\uac00.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@3761 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-04-29T05:15:53Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/401baaf8539a433e7a7b52e9a37c5a46f9350b90",
    "details": {
      "sha": "670f0bac75f04fb10324f3a3f21c0e17fa5b5426",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/linegame/interceptor/InvokeTaskRunInterceptor.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/401baaf8539a433e7a7b52e9a37c5a46f9350b90/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Flinegame%2Finterceptor%2FInvokeTaskRunInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/401baaf8539a433e7a7b52e9a37c5a46f9350b90/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Flinegame%2Finterceptor%2FInvokeTaskRunInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Flinegame%2Finterceptor%2FInvokeTaskRunInterceptor.java?ref=401baaf8539a433e7a7b52e9a37c5a46f9350b90",
      "patch": "@@ -64,18 +64,26 @@ public void before(Object target, Object[] args) {\n \t\t\torg.jboss.netty.channel.ChannelHandlerContext channelHandlerContext = getChannelHandlerContext.invoke(target);\n \t\t\torg.jboss.netty.channel.MessageEvent e = getMessageEvent.invoke(target);\n \n-\t\t\tif (channelHandlerContext == null || e == null) {\n+\t\t\tif (channelHandlerContext == null) {\n+\t\t\t\tlogger.debug(\"ChannelHandlerContext is null.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tif (e == null) {\n+\t\t\t\tlogger.debug(\"MessageEvent is null.\");\n \t\t\t\treturn;\n \t\t\t}\n \n \t\t\tif (!(e.getMessage() instanceof org.jboss.netty.handler.codec.http.HttpRequest)) {\n+\t\t\t\tlogger.debug(\"MessageEvent is not instance of org.jboss.netty.handler.codec.http.HttpRequest. {}\", e.getMessage());\n \t\t\t\treturn;\n \t\t\t}\n \n \t\t\torg.jboss.netty.handler.codec.http.HttpRequest request = (org.jboss.netty.handler.codec.http.HttpRequest) e.getMessage();\n \n \t\t\tChannel channel = e.getChannel();\n \t\t\tif (channel == null) {\n+\t\t\t\tlogger.debug(\"Channel is null.\");\n \t\t\t\treturn;\n \t\t\t}\n \n@@ -201,6 +209,10 @@ public void after(Object target, Object[] args, Object result) {\n \t\t\ttrace.recordApi(descriptor);\n \t\t\ttrace.recordException(result);\n \t\t\ttrace.markAfterTime();\n+\t\t} catch (Throwable e) {\n+\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\tlogger.warn(\"com/linecorp/games/common/baseFramework/handlers/HttpCustomServerHandler$InvokeTask.run() trace end fail. Caused:{}\", e.getMessage(), e);\n+\t\t\t}\n \t\t} finally {\n \t\t\ttrace.traceRootBlockEnd();\n \t\t}",
      "parent_sha": "15ba6a653b04c8833839805e8f1c8c6140553673"
    }
  },
  {
    "oid": "62410a021e40e2a0fe35b554fedc469880bc6e69",
    "message": "[#8730] Update postgresql plugin\n\n(cherry picked from commit f1ac1920343ec458a8aa78dc8764c403bf17df7c)",
    "date": "2022-04-01T05:20:38Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/62410a021e40e2a0fe35b554fedc469880bc6e69",
    "details": {
      "sha": "f627e2edffb7051ca689cf534b6c8ef6afb343a1",
      "filename": "plugins/postgresql-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/postgresql/interceptor/PostgreSQLConnectionCreateInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/62410a021e40e2a0fe35b554fedc469880bc6e69/plugins%2Fpostgresql-jdbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjdbc%2Fpostgresql%2Finterceptor%2FPostgreSQLConnectionCreateInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/62410a021e40e2a0fe35b554fedc469880bc6e69/plugins%2Fpostgresql-jdbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjdbc%2Fpostgresql%2Finterceptor%2FPostgreSQLConnectionCreateInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Fpostgresql-jdbc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjdbc%2Fpostgresql%2Finterceptor%2FPostgreSQLConnectionCreateInterceptor.java?ref=62410a021e40e2a0fe35b554fedc469880bc6e69",
      "patch": "@@ -84,7 +84,7 @@ private String toUrl(final Object[] args) {\n         if (ArrayUtils.getLength(args) == 5) {\n             return ArrayArgumentUtils.getArgument(args, 4, String.class);\n         }\n-        return ArrayArgumentUtils.getArgument(args, 3, String.class);\n+        return ArrayArgumentUtils.getArgument(args, 2, String.class);\n     }\n \n     @Override",
      "parent_sha": "2f3b65050a7b531bb2545c0c0a95547c1a76ebc1"
    }
  },
  {
    "oid": "7d9395fbe10b187d9a05b5f193fb84e978542f2c",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] common\uc5d0 \uc788\ub294 SpanEvent\ub97c SpanEventBo\ub85c \ubcc0\uacbd. ServiceType\uc5d0 includeDestinationId\uc635\uc158\uc744 \ud3ec\ud568\uc2dc\ucf1c ApiType\uc5d0 \ucd9c\ub825\uc5ec\ubd80\ub97c \uc635\uc158\ud654 \uc2dc\ud0b4\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-server/trunk@1305 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-03-08T08:52:28Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/7d9395fbe10b187d9a05b5f193fb84e978542f2c",
    "details": {
      "sha": "532b9b727e273a399216c116c16796a7834f8f7f",
      "filename": "src/main/java/com/profiler/server/dao/hbase/HbaseTraceDao.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/7d9395fbe10b187d9a05b5f193fb84e978542f2c/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fserver%2Fdao%2Fhbase%2FHbaseTraceDao.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/7d9395fbe10b187d9a05b5f193fb84e978542f2c/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fserver%2Fdao%2Fhbase%2FHbaseTraceDao.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fserver%2Fdao%2Fhbase%2FHbaseTraceDao.java?ref=7d9395fbe10b187d9a05b5f193fb84e978542f2c",
      "patch": "@@ -2,7 +2,7 @@\n \n import com.profiler.common.bo.AnnotationBo;\n import com.profiler.common.bo.SpanBo;\n-import com.profiler.common.bo.SpanEvent;\n+import com.profiler.common.bo.SpanEventBo;\n import com.profiler.common.dto.thrift.Annotation;\n import com.profiler.common.dto.thrift.Span;\n import com.profiler.common.dto.thrift.SpanChunk;\n@@ -63,7 +63,7 @@ private void addNestedSpanEvent(Put put, Span span) {\n         }\n         long acceptedTime = AcceptedTime.getAcceptedTime();\n         for (com.profiler.common.dto.thrift.SpanEvent spanEvent : spanEventBoList) {\n-            SpanEvent spanEventBo = new SpanEvent(span, spanEvent);\n+            SpanEventBo spanEventBo = new SpanEventBo(span, spanEvent);\n             byte[] rowId = BytesUtils.add(spanEventBo.getSpanId(), spanEventBo.getSequence());\n             byte[] value = spanEventBo.writeValue();\n             put.add(TRACES_CF_TERMINALSPAN, rowId, acceptedTime, value);\n@@ -73,7 +73,7 @@ private void addNestedSpanEvent(Put put, Span span) {\n \n     @Override\n     public void insertEvent(final com.profiler.common.dto.thrift.SpanEvent spanEvent) {\n-        SpanEvent spanEventBo = new SpanEvent(spanEvent);\n+        SpanEventBo spanEventBo = new SpanEventBo(spanEvent);\n         byte[] value = spanEventBo.writeValue();\n         // TODO \uc11c\ubc84 \uc2dc\uac04\uc73c\ub85c \ubcc0\uacbd\ud574\uc57c \ub420\ub4ef \ud568. time\uc774 \uc0dd\ub7b5...\n         Put put = new Put(SpanUtils.getTraceId(spanEvent));\n@@ -91,7 +91,7 @@ public void insertSpanChunk(SpanChunk spanChunk) {\n         long acceptedTime = AcceptedTime.getAcceptedTime();\n         List<com.profiler.common.dto.thrift.SpanEvent> spanEventBoList = spanChunk.getSpanEventList();\n         for (com.profiler.common.dto.thrift.SpanEvent spanEvent : spanEventBoList) {\n-            SpanEvent spanEventBo = new SpanEvent(spanChunk, spanEvent);\n+            SpanEventBo spanEventBo = new SpanEventBo(spanChunk, spanEvent);\n \n             byte[] value = spanEventBo.writeValue();\n             byte[] rowId = BytesUtils.add(spanEventBo.getSpanId(), spanEventBo.getSequence());",
      "parent_sha": "daf4e26f82a736a1e1cb78e5379a9282e5a25c39"
    }
  },
  {
    "oid": "923bd5f55639aa4ce4b1a41e6276b72c73d96917",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] \uc0c1\uc218 \uce58\ud658\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-commons/trunk@2111 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-08-08T07:51:06Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/923bd5f55639aa4ce4b1a41e6276b72c73d96917",
    "details": {
      "sha": "d9566c8129169cdf14d800dfc29c5d84a1ebfe8b",
      "filename": "src/main/java/com/nhn/pinpoint/common/util/BytesUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/923bd5f55639aa4ce4b1a41e6276b72c73d96917/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Futil%2FBytesUtils.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/923bd5f55639aa4ce4b1a41e6276b72c73d96917/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Futil%2FBytesUtils.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Futil%2FBytesUtils.java?ref=923bd5f55639aa4ce4b1a41e6276b72c73d96917",
      "patch": "@@ -15,7 +15,7 @@ public final class BytesUtils {\n     private static final String UTF8 = \"UTF-8\";\r\n \r\n     public static byte[] longLongToBytes(final long value1, final long value2) {\r\n-        final byte[] buffer = new byte[16];\r\n+        final byte[] buffer = new byte[LONG_LONG_BYTE_LENGTH];\r\n         writeFirstLong0(value1, buffer);\r\n         writeSecondLong0(value2, buffer);\r\n         return buffer;\r",
      "parent_sha": "9c1a1c7aaf0b029729a629a9f276be977f8a3252"
    }
  },
  {
    "oid": "872436c5b2c15f42db6ece18ec48b820625f04fa",
    "message": "Increase resend interval to lessen error margin when testing",
    "date": "2015-12-02T09:41:10Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/872436c5b2c15f42db6ece18ec48b820625f04fa",
    "details": {
      "sha": "e00d77f7608d01fc1e9f310677ef8c6cd95a0214",
      "filename": "profiler/src/test/java/com/navercorp/pinpoint/profiler/AgentInfoSenderTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/872436c5b2c15f42db6ece18ec48b820625f04fa/profiler%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2FAgentInfoSenderTest.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/872436c5b2c15f42db6ece18ec48b820625f04fa/profiler%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2FAgentInfoSenderTest.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/profiler%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2FAgentInfoSenderTest.java?ref=872436c5b2c15f42db6ece18ec48b820625f04fa",
      "patch": "@@ -149,8 +149,8 @@ public void agentInfoShouldRetryUntilAttemptsAreExhaustedWhenRefreshing() throws\n         final AtomicInteger successServerRequestCount = new AtomicInteger();\n         final AtomicInteger failServerRequestCount = new AtomicInteger();\n         final AtomicInteger successCount = new AtomicInteger();\n-        final long agentInfoSendRetryIntervalMs = 100L;\n-        final long agentInfoSendRefreshIntervalMs = 1000L;\n+        final long agentInfoSendRetryIntervalMs = 1000L;\n+        final long agentInfoSendRefreshIntervalMs = 5000L;\n         final int expectedSuccessServerTries = 1;\n         final int expectedFailServerTries = AgentInfoSender.DEFAULT_MAX_TRY_COUNT_PER_ATTEMPT;\n         final CountDownLatch agentReconnectLatch = new CountDownLatch(1);\n@@ -181,11 +181,12 @@ public void reconnectPerformed(PinpointClient client) {\n                 Thread.sleep(agentInfoSendRetryIntervalMs);\n             }\n             successServerAcceptor.close();\n+            Thread.sleep(agentInfoSendRetryIntervalMs * AgentInfoSender.DEFAULT_MAX_TRY_COUNT_PER_ATTEMPT);\n             failServerAcceptor = createServerAcceptor(failServerListener);\n             // wait till agent reconnects\n             agentReconnectLatch.await();\n             while (failServerRequestCount.get() < expectedFailServerTries) {\n-                Thread.sleep(agentInfoSendRefreshIntervalMs);\n+                Thread.sleep(agentInfoSendRetryIntervalMs * AgentInfoSender.DEFAULT_MAX_TRY_COUNT_PER_ATTEMPT);\n             }\n             failServerAcceptor.close();\n         } finally {",
      "parent_sha": "6d01d380d704b6e2a5bd81e9c610ed3d36391af9"
    }
  },
  {
    "oid": "cd91c554008a3a69bee613c18cb2845b7d32826f",
    "message": "[#123] added default value (empty string) for Description",
    "date": "2014-12-19T08:54:00Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/cd91c554008a3a69bee613c18cb2845b7d32826f",
    "details": {
      "sha": "3bf073d1af0ee25952b2228b1c901673a09b9460",
      "filename": "examples/testapp/src/main/java/com/navercorp/pinpoint/testapp/util/Description.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/cd91c554008a3a69bee613c18cb2845b7d32826f/examples%2Ftestapp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftestapp%2Futil%2FDescription.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/cd91c554008a3a69bee613c18cb2845b7d32826f/examples%2Ftestapp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftestapp%2Futil%2FDescription.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/examples%2Ftestapp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftestapp%2Futil%2FDescription.java?ref=cd91c554008a3a69bee613c18cb2845b7d32826f",
      "patch": "@@ -8,5 +8,5 @@\n @Target(ElementType.METHOD)\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Description {\n-    String value();\n+    String value() default \"\";\n }",
      "parent_sha": "8b770d184b1bfcc6e856857e94b83a807e3bf1b8"
    }
  },
  {
    "oid": "ad12032f2505dbc50fded22f3e314b14401ce3ac",
    "message": "[#11497] Improved atomicity",
    "date": "2024-10-14T07:11:26Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/ad12032f2505dbc50fded22f3e314b14401ce3ac",
    "details": {
      "sha": "90610a8c3803bb3bb8186fb67c7e2a8c96a4ceef",
      "filename": "agent-module/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/grpc/PingStreamContext.java",
      "status": "modified",
      "additions": 51,
      "deletions": 19,
      "changes": 70,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/ad12032f2505dbc50fded22f3e314b14401ce3ac/agent-module%2Fprofiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FPingStreamContext.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/ad12032f2505dbc50fded22f3e314b14401ce3ac/agent-module%2Fprofiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FPingStreamContext.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/agent-module%2Fprofiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FPingStreamContext.java?ref=ad12032f2505dbc50fded22f3e314b14401ce3ac",
      "patch": "@@ -16,15 +16,14 @@\n \n package com.navercorp.pinpoint.profiler.sender.grpc;\n \n-import com.navercorp.pinpoint.grpc.MessageFormatUtils;\n+import com.navercorp.pinpoint.grpc.stream.ClientCallStateStreamObserver;\n import com.navercorp.pinpoint.grpc.stream.StreamUtils;\n import com.navercorp.pinpoint.grpc.trace.AgentGrpc;\n import com.navercorp.pinpoint.grpc.trace.PPing;\n import io.grpc.Metadata;\n import io.grpc.Status;\n import io.grpc.stub.ClientCallStreamObserver;\n import io.grpc.stub.ClientResponseObserver;\n-import io.grpc.stub.StreamObserver;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n@@ -43,11 +42,12 @@ public class PingStreamContext {\n     // for debug\n     private final StreamId streamId;\n \n-    private final StreamObserver<PPing> requestObserver;\n+    private ClientCallStateStreamObserver<PPing> requestStream;\n     private final PingClientResponseObserver responseObserver;\n     private final Reconnector reconnector;\n \n     private final ScheduledExecutorService retransmissionExecutor;\n+    private volatile boolean closed = false;\n \n     public PingStreamContext(AgentGrpc.AgentStub agentStub,\n                              Reconnector reconnector,\n@@ -60,12 +60,16 @@ public PingStreamContext(AgentGrpc.AgentStub agentStub,\n         this.retransmissionExecutor = Objects.requireNonNull(retransmissionExecutor, \"retransmissionExecutor\");\n         // WARNING\n         this.responseObserver = new PingClientResponseObserver();\n-        this.requestObserver = agentStub.pingSession(responseObserver);\n+\n+        agentStub.pingSession(responseObserver);\n     }\n \n     private PPing newPing() {\n-        PPing.Builder builder = PPing.newBuilder();\n-        return builder.build();\n+        return PPing.getDefaultInstance();\n+    }\n+\n+    public boolean isClosed() {\n+        return closed;\n     }\n \n \n@@ -74,8 +78,7 @@ private class PingClientResponseObserver implements ClientResponseObserver<PPing\n \n         @Override\n         public void onNext(PPing ping) {\n-            logger.info(\"{} success:{}\", streamId, MessageFormatUtils.debugLog(ping));\n-\n+            logger.info(\"Ping Response {}\", streamId);\n         }\n \n \n@@ -84,16 +87,29 @@ public void onError(Throwable t) {\n             final Status status = Status.fromThrowable(t);\n             Metadata metadata = Status.trailersFromThrowable(t);\n \n-            logger.info(\"Failed to ping stream, streamId={}, {} {}\", streamId, status, metadata);\n+            logger.info(\"onError PingResponse {}, {} {}\", streamId, status, metadata);\n \n-            cancelPingScheduler();\n-            PingStreamContext.this.reconnector.reconnect();\n+            dispose();\n+\n+            if (requestStream.isRun()) {\n+                StreamUtils.onCompleted(requestStream, (th) -> logger.info(\"PingStreamContext.onError\", th));\n+            }\n         }\n \n \n         @Override\n         public void onCompleted() {\n-            logger.info(\"{} completed\", streamId);\n+            logger.info(\"onCompleted {}\", streamId);\n+\n+            dispose();\n+\n+            if (requestStream.isRun()) {\n+                StreamUtils.onCompleted(requestStream, (th) -> logger.info(\"PingStreamContext.onCompleted\", th));\n+            }\n+        }\n+\n+        private void dispose() {\n+            closed = true;\n             cancelPingScheduler();\n             PingStreamContext.this.reconnector.reconnect();\n         }\n@@ -107,44 +123,60 @@ private void cancelPingScheduler() {\n             }\n         }\n \n+        private void registerSchedulerFuture(ScheduledFuture<?> pingScheduler) {\n+            synchronized (this) {\n+                final ScheduledFuture<?> copy = this.pingScheduler;\n+                if (copy != null) {\n+                    logger.info(\"registerSchedulerFuture : Cancel pingScheduler {}\", streamId);\n+                    copy.cancel(false);\n+                }\n+                this.pingScheduler = pingScheduler;\n+            }\n+        }\n+\n         @Override\n-        public void beforeStart(final ClientCallStreamObserver<PPing> requestStream) {\n+        public void beforeStart(final ClientCallStreamObserver<PPing> steram) {\n+            requestStream = ClientCallStateStreamObserver.clientCall(steram);\n+\n             requestStream.setOnReadyHandler(new Runnable() {\n                 @Override\n                 public void run() {\n-                    logger.info(\"{} onReady\", streamId);\n+                    logger.info(\"onReadyHandler {}\", streamId);\n                     PingStreamContext.this.reconnector.reset();\n \n                     final Runnable pingRunnable = new Runnable() {\n                         @Override\n                         public void run() {\n                             PPing pPing = newPing();\n                             if (requestStream.isReady()) {\n+                                if (logger.isTraceEnabled()) {\n+                                    logger.trace(\"Send Ping {}\", streamId);\n+                                }\n                                 requestStream.onNext(pPing);\n                             } else {\n-                                logger.debug(\"{} ping fail. client is not ready\", streamId);\n+                                logger.debug(\"Send Ping failed. isReady=false {}\", streamId);\n                             }\n                         }\n                     };\n \n-                    PingClientResponseObserver.this.pingScheduler = schedule(pingRunnable);\n+                    registerSchedulerFuture(schedule(pingRunnable));\n                 }\n             });\n         }\n     }\n \n     private ScheduledFuture<?> schedule(Runnable command) {\n         try {\n-            return retransmissionExecutor.scheduleAtFixedRate(command, 0, 1,TimeUnit.MINUTES);\n+            return retransmissionExecutor.scheduleAtFixedRate(command, 0, 1, TimeUnit.MINUTES);\n         } catch (RejectedExecutionException e) {\n             logger.info(\"Ping scheduling failed\");\n             return null;\n         }\n     }\n \n     public void close() {\n-        logger.info(\"{} close()\", streamId);\n-        StreamUtils.onCompleted(this.requestObserver, (th) -> this.logger.info(\"PingStreamContext.close\", th));\n+        logger.info(\"close() {}\", streamId);\n+        StreamUtils.onCompleted(this.requestStream, (th) -> this.logger.info(\"PingStreamContext.close\", th));\n     }\n \n     @Override",
      "parent_sha": "7ca2cbb7636099f8f68e4e46198a6fb7ae46f3e3"
    }
  },
  {
    "oid": "3dc1b8a972c7e947af8c2804102514e14e0ce9d5",
    "message": "[#noissue] Fix find bug issue",
    "date": "2018-08-13T02:20:26Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/3dc1b8a972c7e947af8c2804102514e14e0ce9d5",
    "details": {
      "sha": "d522d35fd38c87eac74ac908eb01be1aef0513dc",
      "filename": "thrift/src/main/java/com/navercorp/pinpoint/io/header/ByteArrayHeaderReader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/3dc1b8a972c7e947af8c2804102514e14e0ce9d5/thrift%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fio%2Fheader%2FByteArrayHeaderReader.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/3dc1b8a972c7e947af8c2804102514e14e0ce9d5/thrift%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fio%2Fheader%2FByteArrayHeaderReader.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/thrift%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fio%2Fheader%2FByteArrayHeaderReader.java?ref=3dc1b8a972c7e947af8c2804102514e14e0ce9d5",
      "patch": "@@ -78,7 +78,7 @@ public HeaderEntity readHeaderEntity(Header header) {\n             return readHeaderEntity();\n         }\n \n-        throw new InvalidHeaderException(String.format(\"invalid Header : \", header));\n+        throw new InvalidHeaderException(\"invalid Header : \" + header);\n     }\n \n     private HeaderEntity readHeaderEntity() {",
      "parent_sha": "9f1608d4e9c4ecd223595f3688b65a5409a9a586"
    }
  },
  {
    "oid": "9cd50be6a58b80184fffaa4f10794c1df1c8c2ef",
    "message": "[#noissue] Update amqp spring-rabbit for jdk8\n\nJDK8 is supported from Spring Framework version 3.2.9.\nhttps://github.com/spring-projects/spring-framework/issues/16341\nhttps://stackoverflow.com/questions/22526695/java-1-8-asm-classreader-failed-to-parse-class-file-probably-due-to-a-new-java",
    "date": "2022-06-17T05:39:58Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/9cd50be6a58b80184fffaa4f10794c1df1c8c2ef",
    "details": {
      "sha": "22dcaa76caa0f9da3febde7d9fe1e0c22278e3b0",
      "filename": "plugins-it/rabbitmq-it/src/test/java/com/navercorp/pinpoint/plugin/rabbitmq/spring/SpringAmqpRabbit_1_3_3_to_1_4_2_IT.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/9cd50be6a58b80184fffaa4f10794c1df1c8c2ef/plugins-it%2Frabbitmq-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Frabbitmq%2Fspring%2FSpringAmqpRabbit_1_3_3_to_1_4_2_IT.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/9cd50be6a58b80184fffaa4f10794c1df1c8c2ef/plugins-it%2Frabbitmq-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Frabbitmq%2Fspring%2FSpringAmqpRabbit_1_3_3_to_1_4_2_IT.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins-it%2Frabbitmq-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Frabbitmq%2Fspring%2FSpringAmqpRabbit_1_3_3_to_1_4_2_IT.java?ref=9cd50be6a58b80184fffaa4f10794c1df1c8c2ef",
      "patch": "@@ -54,7 +54,7 @@\n @PinpointAgent(AgentPath.PATH)\n @PinpointConfig(\"rabbitmq/client/pinpoint-rabbitmq.config\")\n @ImportPlugin({\"com.navercorp.pinpoint:pinpoint-rabbitmq-plugin\", \"com.navercorp.pinpoint:pinpoint-jetty-plugin\", \"com.navercorp.pinpoint:pinpoint-user-plugin\"})\n-@Dependency({\"org.springframework.amqp:spring-rabbit:[1.3.3.RELEASE,1.4.2.RELEASE)\", \"com.fasterxml.jackson.core:jackson-core:2.8.11\", \"org.apache.qpid:qpid-broker:6.1.1\"})\n+@Dependency({\"org.springframework.amqp:spring-rabbit:[1.3.5.RELEASE,1.4.2.RELEASE)\", \"com.fasterxml.jackson.core:jackson-core:2.8.11\", \"org.apache.qpid:qpid-broker:6.1.1\"})\n @JvmArgument(\"-DtestLoggerEnable=false\")\n public class SpringAmqpRabbit_1_3_3_to_1_4_2_IT extends SpringAmqpRabbitITBase {\n ",
      "parent_sha": "c98e7e4c1dace80287d70e4a5b394a1966647f3f"
    }
  },
  {
    "oid": "89c3087eaa06c0e1ddfcddeb69d46b367655c7e4",
    "message": "[#1415] Add methodFilter name exclusion function.",
    "date": "2018-09-21T01:56:13Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/89c3087eaa06c0e1ddfcddeb69d46b367655c7e4",
    "details": {
      "sha": "73ff2b485a0b28ee17c827b31be29f48f5f5e219",
      "filename": "bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/instrument/MethodFilters.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/89c3087eaa06c0e1ddfcddeb69d46b367655c7e4/bootstrap-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Finstrument%2FMethodFilters.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/89c3087eaa06c0e1ddfcddeb69d46b367655c7e4/bootstrap-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Finstrument%2FMethodFilters.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/bootstrap-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Finstrument%2FMethodFilters.java?ref=89c3087eaa06c0e1ddfcddeb69d46b367655c7e4",
      "patch": "@@ -35,7 +35,11 @@ public boolean accept(InstrumentMethod method) {\n     };\n \n     public static MethodFilter name(String... names) {\n-        return new MethodNameFilter(null, names);\n+        return new MethodNameFilter(null, names, false);\n+    }\n+\n+    public static MethodFilter nameExclude(String... names) {\n+        return new MethodNameFilter(null, names, true);\n     }\n \n     public static MethodFilter modifier(int required) {\n@@ -64,9 +68,11 @@ public static MethodFilter chain(MethodFilter... methodFilters) {\n \n     private static final class MethodNameFilter implements MethodFilter {\n         private final String[] names;\n+        private final boolean inverter;\n \n-        public MethodNameFilter(int[] rejectModifiers, String[] names) {\n+        public MethodNameFilter(int[] rejectModifiers, String[] names, boolean inverter) {\n             this.names = names;\n+            this.inverter = inverter;\n         }\n \n         @Override\n@@ -77,11 +83,11 @@ public boolean accept(InstrumentMethod method) {\n \n             for (String name : names) {\n                 if (name != null && name.equals(method.getName())) {\n-                    return ACCEPT;\n+                    return ACCEPT^inverter;\n                 }\n             }\n \n-            return REJECT;\n+            return REJECT^inverter;\n         }\n     }\n \n@@ -154,7 +160,6 @@ public boolean accept(InstrumentMethod method) {\n                     return REJECT;\n                 }\n             }\n-\n             return ACCEPT;\n         }\n     }",
      "parent_sha": "82b8c364dd4554678c7f90171d298d5b03760385"
    }
  },
  {
    "oid": "df3cf83f003c1611a4b203c0d71fe727dcfd581c",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] applicationMap \uad6c\uc131\uc694\uc131 \ub9ac\ud329\ud1a0\ub9c1\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@2923 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-11-14T11:04:14Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/df3cf83f003c1611a4b203c0d71fe727dcfd581c",
    "details": {
      "sha": "468f5fcb3b65f2ae29f137de296b8e016755d68e",
      "filename": "src/main/java/com/nhn/pinpoint/web/applicationmap/Application.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/df3cf83f003c1611a4b203c0d71fe727dcfd581c/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fapplicationmap%2FApplication.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/df3cf83f003c1611a4b203c0d71fe727dcfd581c/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fapplicationmap%2FApplication.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fapplicationmap%2FApplication.java?ref=df3cf83f003c1611a4b203c0d71fe727dcfd581c",
      "patch": "@@ -32,7 +32,7 @@ public class Application implements JsonSerializable {\n \t\n \n \tpublic Application(NodeId id, String applicationName, ServiceType serviceType, Set<AgentInfoBo> agentSet) {\n-\t\tlogger.debug(\"create application id={}, applicationName={}, serviceType={}, serverList={}, agentSet={}\", id, applicationName, serviceType, serverList, agentSet);\n+\t\tlogger.debug(\"create application id={}, applicationName={}, serviceType={}, agentSet={}\", id, applicationName, serviceType, agentSet);\n \t\tthis.id = id;\n \t\tthis.applicationName = (serviceType == ServiceType.CLIENT) ? \"CLIENT\" : applicationName;\n \t\tthis.serviceType = serviceType;\n@@ -41,7 +41,7 @@ public Application(NodeId id, String applicationName, ServiceType serviceType, S\n \t}\n \n     public Application(NodeId id, String applicationName, ServiceType serviceType, HostList serverList) {\n-        logger.debug(\"create application id={}, applicationName={}, serviceType={}, serverList={}, agentSet={}\", id, applicationName, serviceType, serverList, agentSet);\n+        logger.debug(\"create application id={}, applicationName={}, serviceType={}, serverList={}\", id, applicationName, serviceType, serverList);\n         this.id = id;\n         this.applicationName = (serviceType == ServiceType.CLIENT) ? \"CLIENT\" : applicationName;\n         this.serviceType = serviceType;",
      "parent_sha": "3607c5c7860b2fff142aec7a6ab3cee788515b8d"
    }
  },
  {
    "oid": "02b409c79fabd9eaf491c12d554a032f88314c25",
    "message": "change method(GET to POST)",
    "date": "2015-10-26T06:26:01Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/02b409c79fabd9eaf491c12d554a032f88314c25",
    "details": {
      "sha": "2884bd0a4bc7cb5fae60fa9f9affab2501faf656",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/controller/BusinessTransactionController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/02b409c79fabd9eaf491c12d554a032f88314c25/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FBusinessTransactionController.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/02b409c79fabd9eaf491c12d554a032f88314c25/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FBusinessTransactionController.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FBusinessTransactionController.java?ref=02b409c79fabd9eaf491c12d554a032f88314c25",
      "patch": "@@ -211,7 +211,7 @@ public ModelAndView transactionInfo(@RequestParam(\"traceId\") String traceIdParam\n         return mv;\n     }\n \n-    @RequestMapping(value = \"/sqlBind\", method = RequestMethod.GET)\n+    @RequestMapping(value = \"/sqlBind\", method = RequestMethod.POST)\n     @ResponseBody\n     public String sqlBind(Model model, HttpServletResponse response,\n                           @RequestParam(\"sql\") String sql,\n@@ -220,4 +220,4 @@ public String sqlBind(Model model, HttpServletResponse response,\n         final List<String> bindValues = parameterParser.parseOutputParameter(bind);\n         return sqlParser.combineBindValues(sql, bindValues);\n     }\n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "7f84039d9268aa82da60270e85d2f0712957414e"
    }
  },
  {
    "oid": "feba1d29d543fe65a157e2053adb71d493a9e985",
    "message": "refactoring",
    "date": "2015-05-20T09:18:26Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/feba1d29d543fe65a157e2053adb71d493a9e985",
    "details": {
      "sha": "3ff35a9d153e2bb8b8363d9119dfcff7e4da6ffe",
      "filename": "bootstrap/src/test/java/com/navercorp/pinpoint/bootstrap/interceptor/MockTraceContext.java",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/feba1d29d543fe65a157e2053adb71d493a9e985/bootstrap%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Finterceptor%2FMockTraceContext.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/feba1d29d543fe65a157e2053adb71d493a9e985/bootstrap%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Finterceptor%2FMockTraceContext.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/bootstrap%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbootstrap%2Finterceptor%2FMockTraceContext.java?ref=feba1d29d543fe65a157e2053adb71d493a9e985",
      "patch": "@@ -60,10 +60,6 @@ public Trace newTraceObject() {\n         return trace;\r\n     }\r\n \r\n-    @Override\r\n-    public void detachTraceObject() {\r\n-        trace = null;\r\n-    }\r\n \r\n     @Override\r\n     public String getAgentId() {\r\n@@ -165,18 +161,23 @@ public ServerMetaDataHolder getServerMetaDataHolder() {\n         return null;\r\n     }\r\n \r\n-    @Override\r\n-    public void attachTraceObject(Trace trace) {\r\n-    }\r\n-\r\n     @Override\r\n     public Trace continueAsyncTraceObject(TraceId traceId, int asyncId, long startTime) {\r\n-        // TODO Auto-generated method stub\r\n         return null;\r\n     }\r\n \r\n     @Override\r\n     public int getAsyncId() {\r\n         return 0;\r\n     }\r\n+\r\n+    @Override\r\n+    public Trace continueTraceObject(Trace trace) {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Trace removeTraceObject() {\r\n+        return null;\r\n+    }\r\n }\r",
      "parent_sha": "a53ff87c5df0304f628bbc37b37232ca97bb89b4"
    }
  },
  {
    "oid": "7b581079a60b962657a2dab2734a8d5b14b2a178",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] jdbc connection \uc758 \uc815\ubcf4\ub97c \ucd94\uc801\ud558\uae30 \uc704\ud55c __url \ubcc0\uc218 \uc758\ubbf8\uac00 \uc815\ud655\ud558\uc9c0 \uc54a\uc544 __databaseInfo\ub85c \ubcc0\uacbd\ud568.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-profiler-bootstrap/trunk@2395 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-10-02T08:09:08Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/7b581079a60b962657a2dab2734a8d5b14b2a178",
    "details": {
      "sha": "0253ccf416043398a7773bab7f3c9ff0ee84276a",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/util/MetaObject.java",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/7b581079a60b962657a2dab2734a8d5b14b2a178/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Futil%2FMetaObject.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/7b581079a60b962657a2dab2734a8d5b14b2a178/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Futil%2FMetaObject.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Futil%2FMetaObject.java?ref=7b581079a60b962657a2dab2734a8d5b14b2a178",
      "patch": "@@ -10,16 +10,19 @@ public class MetaObject<R> {\n \r\n     private final PLogger logger = PLoggerFactory.getLogger(this.getClass());\r\n \r\n-    private String methodName;\r\n-    private Class[] args;\r\n+    private final String methodName;\r\n+    private final Class<?>[] args;\r\n+    private final R defaultReturnValue;\r\n+\r\n     // \uc774\uac83\uc744 class loading\uc2dc \uc815\uc801 \ud0c0\uc784\uc5d0\uc11c \uc0dd\uc131\ud574 \ub458\uc218 \uc5c6\ub294\uac00?\r\n     private Method methodRef;\r\n \r\n-    private R defaultReturnValue = null;\r\n+\r\n \r\n     public MetaObject(String methodName, Class... args) {\r\n         this.methodName = methodName;\r\n         this.args = args;\r\n+        this.defaultReturnValue = null;\r\n     }\r\n \r\n     public MetaObject(R defaultReturnValue, String methodName, Class... args) {\r\n@@ -36,7 +39,7 @@ public R invoke(Object target, Object... args) {\n         Method method = this.methodRef;\r\n         if (method == null) {\r\n             // \uba40\ud2f0\uc4f0\ub808\ub4dc\uc5d0\uc11c \uc911\ubcf5 \uc5d1\uc138\uc2a4\ud574\ub3c4 \ubcc4 \ubb38\uc81c \uc5c6\uc744\uac83\uc784.\r\n-            Class aClass = target.getClass();\r\n+            final Class<?> aClass = target.getClass();\r\n             method = getMethod(aClass);\r\n             this.methodRef = method;\r\n         }\r\n@@ -58,11 +61,13 @@ private R invoke(Method method, Object target, Object[] args) {\n         }\r\n     }\r\n \r\n-    private Method getMethod(Class aClass) {\r\n+    private Method getMethod(Class<?> aClass) {\r\n         try {\r\n-            Method method = aClass.getMethod(this.methodName, this.args);\r\n-            // package\ub4f1\uacfc \uac19\uc774 access \uc81c\ud55c\uc774 \uac78\ub824 \uc788\uc744 \uacbd\uc6b0 \uac15 \ud47c\ub2e4.\r\n-            method.setAccessible(true);\r\n+            final Method method = aClass.getMethod(this.methodName, this.args);\r\n+            if (!method.isAccessible()) {\r\n+                // package\ub4f1\uacfc \uac19\uc774 access \uc81c\ud55c\uc774 \uac78\ub824 \uc788\uc744 \uacbd\uc6b0 \uac15 \ud47c\ub2e4.\r\n+                method.setAccessible(true);\r\n+            }\r\n             return method;\r\n         } catch (NoSuchMethodException e) {\r\n             logger.warn(\"{} not found cls:{} Caused:{}\", new Object[] { this.methodName, aClass, e.getMessage(), e });\r",
      "parent_sha": "3ca06eb2e2f268cc0f0ac58dd8c4f0e657a084a3"
    }
  },
  {
    "oid": "61c8bae44d465373af7d6673719d581ff4ac30a7",
    "message": "[\uc720\uce58\uc218] [NOBTS] change transaction detail view\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-commons/trunk@1103 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-01-15T06:08:50Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/61c8bae44d465373af7d6673719d581ff4ac30a7",
    "details": {
      "sha": "883094492fbdd34b7c8569a2d5b6d11ce2001c40",
      "filename": "src/main/java/com/profiler/common/util/AnnotationUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/61c8bae44d465373af7d6673719d581ff4ac30a7/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fcommon%2Futil%2FAnnotationUtils.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/61c8bae44d465373af7d6673719d581ff4ac30a7/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fcommon%2Futil%2FAnnotationUtils.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fcommon%2Futil%2FAnnotationUtils.java?ref=61c8bae44d465373af7d6673719d581ff4ac30a7",
      "patch": "@@ -16,9 +16,8 @@ public class AnnotationUtils {\n \n     private static final String FORMAT = \"yyyy-MM-dd HH:mm:ss SSS\";\n \n-    @Deprecated\n-    public static String longToDateStr(long date) {\n-        SimpleDateFormat format = new SimpleDateFormat(FORMAT);\n+    public static String longToDateStr(long date, String fmt) {\n+        SimpleDateFormat format = new SimpleDateFormat((fmt == null) ? FORMAT : fmt);\n         return format.format(new Date(date));\n     }\n ",
      "parent_sha": "5d54b8e0d39d1209f190f6b2e71a6d8f3c029a25"
    }
  },
  {
    "oid": "63419bf713d653b8d7bfb80e2e2e7dfad79aa5ab",
    "message": "[#13] \uae30\uc874 getSystemCpuLoadAverage\ub294 \uc870\uae08 \ub2e4\ub978 \uc218\uce58\ub97c \ub098\ud0c0\ub0b4\uae30 \ub54c\ubb38\uc5d0\nDefaultCpuLoadMetricSet\uc758 \uc2dc\uc2a4\ud15c CpuLoad\ub294 \uc218\uc9d1\ud558\uc9c0 \uc54a\ub3c4\ub85d \ubcc0\uacbd.",
    "date": "2014-08-05T02:48:11Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/63419bf713d653b8d7bfb80e2e2e7dfad79aa5ab",
    "details": {
      "sha": "f6ac7dfd0edb02e0410816be6cb8392362ac3a43",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/monitor/codahale/cpu/metric/DefaultCpuLoadMetricSet.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/63419bf713d653b8d7bfb80e2e2e7dfad79aa5ab/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmonitor%2Fcodahale%2Fcpu%2Fmetric%2FDefaultCpuLoadMetricSet.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/63419bf713d653b8d7bfb80e2e2e7dfad79aa5ab/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmonitor%2Fcodahale%2Fcpu%2Fmetric%2FDefaultCpuLoadMetricSet.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmonitor%2Fcodahale%2Fcpu%2Fmetric%2FDefaultCpuLoadMetricSet.java?ref=63419bf713d653b8d7bfb80e2e2e7dfad79aa5ab",
      "patch": "@@ -13,6 +13,7 @@ public final class DefaultCpuLoadMetricSet extends AbstractCpuLoadMetricSet {\n \r\n \tprivate static final int UNSUPPORTED = -1;\r\n \tprivate static final int UNINITIALIZED = -1;\r\n+\tprivate static final Double UNSUPPORTED_CPU_LOAD_METRIC = -1.0D;\r\n \r\n \tprivate final RuntimeMXBean runtimeMXBean;\r\n \r\n@@ -32,7 +33,7 @@ public Double getValue() {\n \t\t\t\t\r\n \t\t\t\tfinal long cpuTimeNS = operatingSystemMXBean.getProcessCpuTime();\r\n \t\t\t\tif (cpuTimeNS == UNSUPPORTED) {\r\n-\t\t\t\t\treturn (double)UNSUPPORTED;\r\n+\t\t\t\t\treturn UNSUPPORTED_CPU_LOAD_METRIC;\r\n \t\t\t\t}\r\n \t\t\t\tfinal long upTimeMS = runtimeMXBean.getUptime();\r\n \t\t\t\t\r\n@@ -63,7 +64,7 @@ protected Gauge<Double> getSystemCpuLoadGauge(final OperatingSystemMXBean operat\n \t\treturn new Gauge<Double>() {\r\n \t\t\t@Override\r\n \t\t\tpublic Double getValue() {\r\n-\t\t\t\treturn operatingSystemMXBean.getSystemLoadAverage();\r\n+\t\t\t\treturn UNSUPPORTED_CPU_LOAD_METRIC;\r\n \t\t\t}\r\n \t\t};\r\n \t}\r",
      "parent_sha": "0fda859a7b85fad2bb6a54488e0f5a1d640eccf8"
    }
  },
  {
    "oid": "85660cae091ee6075be253ee13debd316a7e1c07",
    "message": "[#2820]change access modifier to extend class",
    "date": "2017-04-17T07:53:55Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/85660cae091ee6075be253ee13debd316a7e1c07",
    "details": {
      "sha": "392e681514fd74865977957bf5021760ad382f15",
      "filename": "collector/src/main/java/com/navercorp/pinpoint/collector/receiver/UdpDispatchHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/85660cae091ee6075be253ee13debd316a7e1c07/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2FUdpDispatchHandler.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/85660cae091ee6075be253ee13debd316a7e1c07/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2FUdpDispatchHandler.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2FUdpDispatchHandler.java?ref=85660cae091ee6075be253ee13debd316a7e1c07",
      "patch": "@@ -40,7 +40,7 @@ public UdpDispatchHandler() {\n     }\n \n     @Override\n-    Handler getHandler(TBase<?, ?> tBase) {\n+    protected Handler getHandler(TBase<?, ?> tBase) {\n \n         // To change below code to switch table make it a little bit faster.\n         // FIXME (2014.08) Legacy - TAgentStats should not be sent over the wire.",
      "parent_sha": "43ee420b165035a56ee12cfe37cf980a3da5a6ce"
    }
  },
  {
    "oid": "93455162162000faaee76594e40011c35cc97de4",
    "message": "[\uc720\uce58\uc218] [NOBTS] all in one \ud14c\uc2a4\ud2b8\ucf00\uc774\uc2a4 \uc218\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-testweb/trunk@2712 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-11-02T02:30:39Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/93455162162000faaee76594e40011c35cc97de4",
    "details": {
      "sha": "3091f8e33ba80bc84238ac854dbe2e032c142d28",
      "filename": "src/main/java/com/nhn/pinpoint/testweb/controller/AllInOneController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/93455162162000faaee76594e40011c35cc97de4/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Ftestweb%2Fcontroller%2FAllInOneController.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/93455162162000faaee76594e40011c35cc97de4/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Ftestweb%2Fcontroller%2FAllInOneController.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Ftestweb%2Fcontroller%2FAllInOneController.java?ref=93455162162000faaee76594e40011c35cc97de4",
      "patch": "@@ -170,7 +170,7 @@ public String allInOne(Model model,\n \t\t\tparams.append(\"npc2=\").append(npc2).append(\"&\");\r\n \t\t\tparams.append(\"unknown2=\").append(unknown2).append(\"&\");\r\n \t\t\t\r\n-\t\t\tclient.execute(\"http://localhost:\" + port + \"/allInOne2.pinpoint?\", new HashMap<String, Object>());\r\n+\t\t\tclient.execute(\"http://localhost:\" + port + \"/allInOne2.pinpoint?\" + params.toString(), new HashMap<String, Object>());\r\n \t\t}\r\n \t\t\r\n \t\treturn \"remotecombination\";\r",
      "parent_sha": "48bfec135619e627d1ee5abeba987a5af598626b"
    }
  },
  {
    "oid": "c00601625b57e85e8feea244c35d67414cdf894b",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] traceIndex\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uac00\ubcc0\uc778\ucf54\ub529\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc218\uc815\ud558\uace0 agentId\ub97c \ucd94\uac00\ud568. dot\uc758 api\uba85\uc744 \uc880\ub354 \uba85\uc2dc\uc801\uc73c\ub85c \ubcc0\uacbd\ud568.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-server/trunk@2767 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-11-05T05:07:36Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/c00601625b57e85e8feea244c35d67414cdf894b",
    "details": {
      "sha": "e6f00e6f4eb0aaab9e1ee7b38924de12e310d4b2",
      "filename": "src/main/java/com/nhn/pinpoint/collector/dao/hbase/HbaseApplicationTraceIndexDao.java",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/c00601625b57e85e8feea244c35d67414cdf894b/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2FHbaseApplicationTraceIndexDao.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/c00601625b57e85e8feea244c35d67414cdf894b/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2FHbaseApplicationTraceIndexDao.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2FHbaseApplicationTraceIndexDao.java?ref=c00601625b57e85e8feea244c35d67414cdf894b",
      "patch": "@@ -1,10 +1,13 @@\n package com.nhn.pinpoint.collector.dao.hbase;\n \n+import static com.nhn.pinpoint.common.hbase.HBaseTables.AGENT_NAME_MAX_LEN;\n import static com.nhn.pinpoint.common.hbase.HBaseTables.APPLICATION_TRACE_INDEX;\n import static com.nhn.pinpoint.common.hbase.HBaseTables.APPLICATION_TRACE_INDEX_CF_TRACE;\n \n import com.nhn.pinpoint.collector.dao.ApplicationTraceIndexDao;\n import com.nhn.pinpoint.collector.util.AcceptedTimeService;\n+import com.nhn.pinpoint.common.buffer.AutomaticBuffer;\n+import com.nhn.pinpoint.common.buffer.Buffer;\n import com.nhn.pinpoint.thrift.dto.TSpan;\n import com.sematext.hbase.wd.AbstractRowKeyDistributor;\n import org.apache.hadoop.hbase.client.Put;\n@@ -37,19 +40,18 @@ public class HbaseApplicationTraceIndexDao implements ApplicationTraceIndexDao {\n \n \t@Override\n \tpublic void insert(final TSpan span) {\n-\t\tint elapsedTime = span.getElapsed();\n-\n-\t\tbyte[] value = new byte[8];\n-\t\tBytesUtils.writeInt(elapsedTime, value, 0);\n-\t\tBytesUtils.writeInt(span.getErr(), value, 4);\n \n+        final Buffer buffer = new AutomaticBuffer(10 + AGENT_NAME_MAX_LEN);\n+        buffer.putVar(span.getElapsed());\n+        buffer.putSVar(span.getErr());\n+        buffer.putPrefixedString(span.getAgentId());\n+        final byte[] value = buffer.getBuffer();\n \n         long acceptedTime = acceptedTimeService.getAcceptedTime();\n-\n-        byte[] distributedKey = crateRowKey(span, acceptedTime);\n+        final byte[] distributedKey = crateRowKey(span, acceptedTime);\n         Put put = new Put(distributedKey);\n \n-\t\tput.add(APPLICATION_TRACE_INDEX_CF_TRACE, SpanUtils.getTransactionId(span), acceptedTime, value);\n+        put.add(APPLICATION_TRACE_INDEX_CF_TRACE, SpanUtils.getTransactionId(span), acceptedTime, value);\n \n \t\thbaseTemplate.put(APPLICATION_TRACE_INDEX, put);\n \t}",
      "parent_sha": "11b8c1125f39d7ceaf347d6e9f294dc49d49ca84"
    }
  },
  {
    "oid": "bbc1265459e5c2215584264812de7571eb625165",
    "message": "[bug fix] to support Jetty 8.0",
    "date": "2018-01-05T06:35:21Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/bbc1265459e5c2215584264812de7571eb625165",
    "details": {
      "sha": "a90873b1f0315135b059adf27501bd2b58793cd8",
      "filename": "plugins/jetty/src/main/java/com/navercorp/pinpoint/plugin/jetty/JettyPlugin.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/bbc1265459e5c2215584264812de7571eb625165/plugins%2Fjetty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjetty%2FJettyPlugin.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/bbc1265459e5c2215584264812de7571eb625165/plugins%2Fjetty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjetty%2FJettyPlugin.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Fjetty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjetty%2FJettyPlugin.java?ref=bbc1265459e5c2215584264812de7571eb625165",
      "patch": "@@ -61,9 +61,15 @@ public byte[] doInTransform(Instrumentor instrumentor, ClassLoader classLoader,\n                     return target.toBytecode();\n                 }\n \n-                InstrumentMethod jetty8HandleMethodEditorBuilder = target.getDeclaredMethod(\"handle\", \"org.eclipse.jetty.server.AbstractHttpConnection\");\n-                if (jetty8HandleMethodEditorBuilder != null) {\n-                    jetty8HandleMethodEditorBuilder.addInterceptor(\"com.navercorp.pinpoint.plugin.jetty.interceptor.Jetty8ServerHandleInterceptor\", va(config.getJettyExcludeUrlFilter()));\n+                InstrumentMethod jetty80HandleMethodEditorBuilder = target.getDeclaredMethod(\"handle\", \"org.eclipse.jetty.server.HttpConnection\");\n+                if (jetty80HandleMethodEditorBuilder != null) {\n+                    jetty80HandleMethodEditorBuilder.addInterceptor(\"com.navercorp.pinpoint.plugin.jetty.interceptor.Jetty8ServerHandleInterceptor\", va(config.getJettyExcludeUrlFilter()));\n+                    return target.toBytecode();\n+                }\n+\n+                InstrumentMethod jetty82HandleMethodEditorBuilder = target.getDeclaredMethod(\"handle\", \"org.eclipse.jetty.server.AbstractHttpConnection\");\n+                if (jetty82HandleMethodEditorBuilder != null) {\n+                    jetty82HandleMethodEditorBuilder.addInterceptor(\"com.navercorp.pinpoint.plugin.jetty.interceptor.Jetty8ServerHandleInterceptor\", va(config.getJettyExcludeUrlFilter()));\n                     return target.toBytecode();\n                 }\n ",
      "parent_sha": "233c7294e185954fa020cecd6d37c3177e5f390c"
    }
  },
  {
    "oid": "695dde3c0dd21ed26321dc13931a861c55295c93",
    "message": "[\uae40\ud6c8\ubbfc] [NOBTS] interceptor test \ucd94\uac00\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@1796 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-06-05T02:33:37Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/695dde3c0dd21ed26321dc13931a861c55295c93",
    "details": {
      "sha": "e2e940b6c6f57d21d90bd47bb5779248edd05004",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/arcus/interceptor/ApiInterceptor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/695dde3c0dd21ed26321dc13931a861c55295c93/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Farcus%2Finterceptor%2FApiInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/695dde3c0dd21ed26321dc13931a861c55295c93/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Farcus%2Finterceptor%2FApiInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Farcus%2Finterceptor%2FApiInterceptor.java?ref=695dde3c0dd21ed26321dc13931a861c55295c93",
      "patch": "@@ -41,8 +41,10 @@ public void before(Object target, Object[] args) {\n \t\t\r\n \t\tTrace trace = traceContext.currentTraceObject();\r\n \t\tif (trace == null) {\r\n-\t\t\tlogger.info(\"trace not found\");\r\n-\t\t\treturn;\r\n+            if (logger.isInfoEnabled()) {\r\n+                logger.info(\"TraceID not exist. start new trace.\");\r\n+            }\r\n+\t\t\ttrace = traceContext.newTraceObject();\r\n \t\t}\r\n \t\t\r\n \t\ttrace.traceBlockBegin();\r",
      "parent_sha": "84fd661468880ca77954d926c73c3ba051988de1"
    }
  },
  {
    "oid": "3a4a2c704d4b1f3927635ce2fee297fe3dd5e687",
    "message": "[#noissue] Fix port range in thrift it",
    "date": "2022-08-11T02:19:42Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/3a4a2c704d4b1f3927635ce2fee297fe3dd5e687",
    "details": {
      "sha": "4595e4e253ef81eb55e69a393e31b5dfe126c9b3",
      "filename": "plugins-it/thrift-it/src/test/java/com/navercorp/pinpoint/plugin/thrift/common/TestEnvironment.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/3a4a2c704d4b1f3927635ce2fee297fe3dd5e687/plugins-it%2Fthrift-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fthrift%2Fcommon%2FTestEnvironment.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/3a4a2c704d4b1f3927635ce2fee297fe3dd5e687/plugins-it%2Fthrift-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fthrift%2Fcommon%2FTestEnvironment.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins-it%2Fthrift-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fthrift%2Fcommon%2FTestEnvironment.java?ref=3a4a2c704d4b1f3927635ce2fee297fe3dd5e687",
      "patch": "@@ -18,6 +18,7 @@\n \n import java.net.InetSocketAddress;\n \n+import com.navercorp.pinpoint.testcase.util.SocketUtils;\n import org.apache.thrift.protocol.TBinaryProtocol;\n import org.apache.thrift.protocol.TProtocolFactory;\n \n@@ -36,7 +37,7 @@ public class TestEnvironment {\n \n     private final String serverHost = SERVER_HOST;\n     private final String serverIp = SERVER_IP;\n-    private final int port = MIN_SERVER_PORT + (int)(Math.random() * (MAX_SERVER_PORT - MIN_SERVER_PORT) + 1);\n+    private final int port = SocketUtils.findAvailableTcpPort(10000, 19999);\n     private final String httpPath = HTTP_PATH;\n     private final String httpUrl = \"http://\" + serverHost + \":\" + port + httpPath;\n     private final InetSocketAddress serverAddress = new InetSocketAddress(SERVER_IP, this.port);",
      "parent_sha": "1b41ec53051ddcf6115645b32921edbc51cb03f0"
    }
  },
  {
    "oid": "2179393d60c05448330aaa18a7362126d545eae4",
    "message": "[#noissue] Fix pulsar plugin IT test",
    "date": "2025-02-26T08:25:22Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/2179393d60c05448330aaa18a7362126d545eae4",
    "details": {
      "sha": "71e6c7ddc776b04897220d763d3bca5846ced6ac",
      "filename": "agent-module/plugins-it/pulsar-it/src/test/java/com/navercorp/pinpoint/it/plugin/pulsar/PulsarClientITBase.java",
      "status": "modified",
      "additions": 11,
      "deletions": 13,
      "changes": 24,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/2179393d60c05448330aaa18a7362126d545eae4/agent-module%2Fplugins-it%2Fpulsar-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fit%2Fplugin%2Fpulsar%2FPulsarClientITBase.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/2179393d60c05448330aaa18a7362126d545eae4/agent-module%2Fplugins-it%2Fpulsar-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fit%2Fplugin%2Fpulsar%2FPulsarClientITBase.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/agent-module%2Fplugins-it%2Fpulsar-it%2Fsrc%2Ftest%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fit%2Fplugin%2Fpulsar%2FPulsarClientITBase.java?ref=2179393d60c05448330aaa18a7362126d545eae4",
      "patch": "@@ -19,15 +19,13 @@\n import com.navercorp.pinpoint.bootstrap.plugin.test.PluginTestVerifier;\n import com.navercorp.pinpoint.bootstrap.plugin.test.PluginTestVerifierHolder;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.impl.ConsumerImpl;\n import org.apache.pulsar.client.impl.ProducerImpl;\n import org.apache.pulsar.client.impl.SendCallback;\n import org.junit.jupiter.api.BeforeAll;\n \n import java.lang.reflect.Method;\n \n import static com.navercorp.pinpoint.bootstrap.plugin.test.Expectations.annotation;\n-import static com.navercorp.pinpoint.bootstrap.plugin.test.Expectations.event;\n import static test.pinpoint.plugin.pulsar.PulsarITConstants.MAX_TRACE_WAIT_TIME;\n import static test.pinpoint.plugin.pulsar.PulsarITConstants.PULSAR_CLIENT_SERVICE_TYPE;\n import static test.pinpoint.plugin.pulsar.PulsarITConstants.TOPIC;\n@@ -53,18 +51,18 @@ void verifySend() throws NoSuchMethodException {\n         eventBuilder.setMethod(sendAsyncMethod);\n         eventBuilder.setEndPoint(serviceUrl);\n         eventBuilder.setDestinationId(serviceUrl);\n-        eventBuilder.setAnnotations(annotation(\"pulsar.topic\", TOPIC));\n-        eventBuilder.setAnnotations(annotation(\"pulsar.broker.url\", serviceUrl));\n+        eventBuilder.setAnnotations(annotation(\"pulsar.topic\", TOPIC), annotation(\"pulsar.broker.url\", serviceUrl));\n         ExpectedTrace producerTraces = eventBuilder.build();\n         verifier.verifyDiscreteTrace(producerTraces);\n-        ExpectedTrace.Builder rootBuilder = ExpectedTrace.createRootBuilder(PULSAR_CLIENT_SERVICE_TYPE);\n-        rootBuilder.setMethodSignature(\"Pulsar Consumer Invocation\");\n-        rootBuilder.setRpc(\"pulsar://topic=\" + TOPIC + \"&partition=-1\");\n-        rootBuilder.setRemoteAddr(serviceUrl);\n-        rootBuilder.setAnnotations(annotation(\"pulsar.partition.index\", -1));\n-        Method messageProcessed = ConsumerImpl.class.getDeclaredMethod(\"messageProcessed\", Message.class);\n-        event(PULSAR_CLIENT_SERVICE_TYPE, messageProcessed);\n-        ExpectedTrace consumerTraces = rootBuilder.build();\n-        verifier.verifyDiscreteTrace(consumerTraces);\n+\n+//        ExpectedTrace.Builder rootBuilder = ExpectedTrace.createRootBuilder(PULSAR_CLIENT_SERVICE_TYPE);\n+//        rootBuilder.setMethodSignature(\"Pulsar Consumer Invocation\");\n+//        rootBuilder.setRpc(\"pulsar://topic=\" + TOPIC + \"&partition=-1\");\n+//        rootBuilder.setRemoteAddr(serviceUrl);\n+//        rootBuilder.setAnnotations(annotation(\"pulsar.partition.index\", -1));\n+//        Method messageProcessed = ConsumerImpl.class.getDeclaredMethod(\"messageProcessed\", Message.class);\n+//        event(PULSAR_CLIENT_SERVICE_TYPE, messageProcessed);\n+//        ExpectedTrace consumerTraces = rootBuilder.build();\n+//        verifier.verifyDiscreteTrace(consumerTraces);\n     }\n }",
      "parent_sha": "7eed0a1b9c9c8bb6429d09e2e6d79cec2aed32dc"
    }
  },
  {
    "oid": "8837eb095b758e80b2c01da784b4d66ab73f69ff",
    "message": "Trace current active requests info. #751",
    "date": "2015-10-30T08:10:43Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/8837eb095b758e80b2c01da784b4d66ab73f69ff",
    "details": {
      "sha": "b63da3d09b867b1a951e421f4823fdd81a5643b9",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/websocket/ActiveThreadCountErrorType.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/8837eb095b758e80b2c01da784b4d66ab73f69ff/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fwebsocket%2FActiveThreadCountErrorType.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/8837eb095b758e80b2c01da784b4d66ab73f69ff/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fwebsocket%2FActiveThreadCountErrorType.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fwebsocket%2FActiveThreadCountErrorType.java?ref=8837eb095b758e80b2c01da784b4d66ab73f69ff",
      "patch": "@@ -33,9 +33,10 @@ public enum ActiveThreadCountErrorType {\n     UNSUPPORTED_VERSION((short) 111, \"UNSUPPORTED VERSION\", StreamCode.TYPE_UNSUPPORT.name()),\n     CLUSTER_OPTION_NOT_SET((short) 121, \"CLUSTER OPTION NOT SET\", StreamCode.CONNECTION_UNSUPPORT.name()),\n \n+    TIMEOUT((short) 211, \"TIMEOUT\", TRouteResult.TIMEOUT.name()),\n+\n     NOT_FOUND((short) -1, \"NOT FOUND\", StreamCode.CONNECTION_NOT_FOUND.name()),\n     CLUSTER_CHANNEL_CLOSED((short) -1, \"CLUSTER CHANNEL CLOSED\", StreamCode.STATE_CLOSED.name()),\n-    TIMEOUT((short) -1, \"TIMEOUT\", TRouteResult.TIMEOUT.name()),\n     PINPOINT_INTERNAL_ERROR((short) -1, \"PINPOINT INTERNAL ERROR\");\n \n     private final static Map<String, ActiveThreadCountErrorType> CODE_MAP = Collections.unmodifiableMap(initializeCodeMapping());",
      "parent_sha": "203495cb7844c20fbae1fb248f4869ad3e842d60"
    }
  },
  {
    "oid": "d6ffaa2ed0f8a80036c297c203d86bb891a296ec",
    "message": "[\uc720\uce58\uc218] [NOBTS] bugfix histogram\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@929 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2012-11-27T07:50:41Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/d6ffaa2ed0f8a80036c297c203d86bb891a296ec",
    "details": {
      "sha": "72129775d27513d558cb6a9dde54e1aaa3d64dee",
      "filename": "src/main/java/com/nhn/hippo/web/calltree/server/Histogram.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/d6ffaa2ed0f8a80036c297c203d86bb891a296ec/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Fweb%2Fcalltree%2Fserver%2FHistogram.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/d6ffaa2ed0f8a80036c297c203d86bb891a296ec/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Fweb%2Fcalltree%2Fserver%2FHistogram.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Fweb%2Fcalltree%2Fserver%2FHistogram.java?ref=d6ffaa2ed0f8a80036c297c203d86bb891a296ec",
      "patch": "@@ -11,7 +11,7 @@ public class Histogram {\n \n \tprivate int min = 0;\n \tprivate int max = 0;\n-\tprivate int sampleCount = 0;\n+\tprivate int sampleCount = 1;\n \n \tpublic Histogram(int resolution) {\n \t\tthis.resolution = resolution;",
      "parent_sha": "5c2acde64ae23c4a3fe685a9c94cf0ae54ba2a1d"
    }
  },
  {
    "oid": "eaee85fde6cf88efee7bba16bf51818587cd37ff",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] flag\ub97c \ubb34\uc870\uaec0 \uae30\ub85d\ud558\ub3c4\ub85d \uc218\uc815. \ud638\ud658\uc131 \ucc98\ub9ac\uac00 \ud798\ub4e4\uc218 \uc788\uc5b4 \ubb34\uc870\uaec0 \ub123\ub294\uac83\uc73c\ub85c \ubcc0\uacbd\ud568.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-commons/trunk@2732 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-11-04T05:16:39Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/eaee85fde6cf88efee7bba16bf51818587cd37ff",
    "details": {
      "sha": "e1209b3d299c2690b73e97df8ac7122deeaf6b75",
      "filename": "src/main/java/com/nhn/pinpoint/common/bo/SpanBo.java",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/eaee85fde6cf88efee7bba16bf51818587cd37ff/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FSpanBo.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/eaee85fde6cf88efee7bba16bf51818587cd37ff/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FSpanBo.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FSpanBo.java?ref=eaee85fde6cf88efee7bba16bf51818587cd37ff",
      "patch": "@@ -381,10 +381,8 @@ public byte[] writeValue() {\n             buffer.put(false);\r\n         }\r\n \r\n-        // \uacf5\uac04 \uc808\uc57d\uc744 \uc704\ud574\uc11c flag\ub294 \ubb34\uc870\uaec0 \ub9c8\uc9c0\ub9c9\uc5d0 \ub123\uc5b4\uc57c \ud55c\ub2e4.\r\n-        if (flag != 0) {\r\n-            buffer.put(flag);\r\n-        }\r\n+        buffer.put(flag);\r\n+\r\n         return buffer.getBuffer();\r\n     }\r\n \r\n@@ -420,10 +418,8 @@ public int readValue(byte[] bytes, int offset) {\n             this.exceptionMessage = buffer.readPrefixedString();\r\n         }\r\n \r\n-        // flag\ub294 \ubb34\uc870\uaec0 \ub9c8\uc9c0\ub9c9\uc5d0 \ub123\uc5b4\uc57c \ud55c\ub2e4.\r\n-        if (buffer.limit() == 2) {\r\n-            this.flag = buffer.readShort();\r\n-        }\r\n+        this.flag = buffer.readShort();\r\n+\r\n         return buffer.getOffset();\r\n     }\r\n \r",
      "parent_sha": "f1eb4e4c1b046ed40c6c662e38ecb282d9d77536"
    }
  },
  {
    "oid": "77197b906716748415a1c67c3e0de0bffe0c810d",
    "message": "[#7455] The order of variable assignment is incorrect",
    "date": "2020-11-27T03:20:44Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/77197b906716748415a1c67c3e0de0bffe0c810d",
    "details": {
      "sha": "ad8a7f1f6ae759efb5ee74f410a9c5de74611962",
      "filename": "profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/grpc/PingStreamContext.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/77197b906716748415a1c67c3e0de0bffe0c810d/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FPingStreamContext.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/77197b906716748415a1c67c3e0de0bffe0c810d/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FPingStreamContext.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Fsender%2Fgrpc%2FPingStreamContext.java?ref=77197b906716748415a1c67c3e0de0bffe0c810d",
      "patch": "@@ -55,11 +55,11 @@ public PingStreamContext(AgentGrpc.AgentStub agentStub,\n \n         this.streamId = StreamId.newStreamId(\"PingStream\");\n \n-        this.responseObserver = new PingClientResponseObserver();\n-        this.requestObserver = agentStub.pingSession(responseObserver);\n-\n         this.reconnector = Assert.requireNonNull(reconnector, \"reconnector\");\n         this.retransmissionExecutor = Assert.requireNonNull(retransmissionExecutor, \"retransmissionExecutor\");\n+        // WARNING\n+        this.responseObserver = new PingClientResponseObserver();\n+        this.requestObserver = agentStub.pingSession(responseObserver);\n     }\n \n     private PPing newPing() {\n@@ -87,15 +87,15 @@ public void onError(Throwable t) {\n                 logger.warn(\"Failed to ping stream, streamId={}, cause={}\", streamId, statusError.getMessage(), statusError.getThrowable());\n             }\n             cancelPingScheduler();\n-            reconnector.reconnect();\n+            PingStreamContext.this.reconnector.reconnect();\n         }\n \n \n         @Override\n         public void onCompleted() {\n             logger.info(\"{} completed\", streamId);\n             cancelPingScheduler();\n-            reconnector.reconnect();\n+            PingStreamContext.this.reconnector.reconnect();\n         }\n \n         private void cancelPingScheduler() {\n@@ -113,7 +113,7 @@ public void beforeStart(final ClientCallStreamObserver<PPing> requestStream) {\n                 @Override\n                 public void run() {\n                     logger.info(\"{} onReady\", streamId);\n-                    reconnector.reset();\n+                    PingStreamContext.this.reconnector.reset();\n \n                     final Runnable pingRunnable = new Runnable() {\n                         @Override",
      "parent_sha": "d99fe94a835d74d41a1115b94fe9d4f61cd3abd5"
    }
  },
  {
    "oid": "4d42e8f0ef1e129b994f0445d2b921c34d4643ec",
    "message": "[\uac15\uc6b4\ub355] [WEB-98] Api \uc815\ub9ac. \ub9ac\ud329\ud1a0\ub9c1\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-commons/trunk@3654 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-04-11T08:40:58Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/4d42e8f0ef1e129b994f0445d2b921c34d4643ec",
    "details": {
      "sha": "00be5a0120bd3771adb5ab952beff63c81c02924",
      "filename": "src/main/java/com/nhn/pinpoint/common/bo/AgentInfoBo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/4d42e8f0ef1e129b994f0445d2b921c34d4643ec/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FAgentInfoBo.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/4d42e8f0ef1e129b994f0445d2b921c34d4643ec/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FAgentInfoBo.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FAgentInfoBo.java?ref=4d42e8f0ef1e129b994f0445d2b921c34d4643ec",
      "patch": "@@ -14,7 +14,7 @@\n  */\r\n public class AgentInfoBo  {\r\n \r\n-    public static final Comparator<AgentInfoBo> NAME_ASC = new Comparator<AgentInfoBo>() {\r\n+    public static final Comparator<AgentInfoBo> AGENT_NAME_ASC_COMPARATOR = new Comparator<AgentInfoBo>() {\r\n         @Override\r\n         public int compare(AgentInfoBo that, AgentInfoBo other) {\r\n             // null \uc77c\ub54c \uc0c1\ud669\uc774 \uc560\ub9e4\ud560\uc218 \uc788\uc5b4\uc11c \uadf8\ub0e5 \"\"\uc73c\ub85c \ucc98\ub9ac\ud568.\r",
      "parent_sha": "0a00bfd25b8353f1246811e529bbea4c237ae72b"
    }
  },
  {
    "oid": "65e14595b047d84bf72573cff37c359e98de58a9",
    "message": "[\uc720\uce58\uc218] [tomcat-profiler-11] npc interceptor\uc5d0\uc11c connection \ucd08\uae30\ud654 \uc2e4\ud328\uc2dc \uc11c\ubc84\ub9f5\uc5d0 \uc5f0\uacb0 \uc2e4\ud328 \ubcf4\uc5ec\uc8fc\uae30.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@3560 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-03-27T06:11:04Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/65e14595b047d84bf72573cff37c359e98de58a9",
    "details": {
      "sha": "4b21a49b7cc05d0c43bfd5f3dd1a6c25be49be49",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/connector/npc/interceptor/ConnectorConstructorInterceptor.java",
      "status": "modified",
      "additions": 38,
      "deletions": 6,
      "changes": 44,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/65e14595b047d84bf72573cff37c359e98de58a9/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fconnector%2Fnpc%2Finterceptor%2FConnectorConstructorInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/65e14595b047d84bf72573cff37c359e98de58a9/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fconnector%2Fnpc%2Finterceptor%2FConnectorConstructorInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fconnector%2Fnpc%2Finterceptor%2FConnectorConstructorInterceptor.java?ref=65e14595b047d84bf72573cff37c359e98de58a9",
      "patch": "@@ -2,6 +2,8 @@\n \n import java.net.InetSocketAddress;\n \n+import com.nhn.pinpoint.common.ServiceType;\n+import com.nhn.pinpoint.profiler.context.Trace;\n import com.nhn.pinpoint.profiler.context.TraceContext;\n import com.nhn.pinpoint.profiler.interceptor.*;\n import com.nhn.pinpoint.profiler.logging.PLogger;\n@@ -24,14 +26,16 @@ public class ConnectorConstructorInterceptor implements SimpleAroundInterceptor,\n \tprivate MethodDescriptor descriptor;\n \tprivate TraceContext traceContext;\n \n-\tprivate MetaObject<InetSocketAddress> setServerAddress = new MetaObject<InetSocketAddress>(\"__setServerAddress\", InetSocketAddress.class);\n+\tprivate final MetaObject<InetSocketAddress> setServerAddress = new MetaObject<InetSocketAddress>(\"__setServerAddress\", InetSocketAddress.class);\n \n \t@Override\n \tpublic void before(Object target, Object[] args) {\n \t\tif (isDebug) {\n \t\t\tlogger.beforeInterceptor(target, args);\n \t\t}\n \n+\t\tInetSocketAddress serverAddress = null;\n+\n \t\tif (target instanceof KeepAliveNpcHessianConnector) {\n \t\t\t/*\n \t\t\t * com.nhncorp.lucy.npc.connector.KeepAliveNpcHessianConnector.\n@@ -40,27 +44,55 @@ public void before(Object target, Object[] args) {\n \t\t\t */\n \t\t\tif (args.length == 4) {\n \t\t\t\tif (args[0] instanceof InetSocketAddress) {\n-\t\t\t\t\tsetServerAddress.invoke(target, (InetSocketAddress) args[0]);\n+\t\t\t\t\tserverAddress = (InetSocketAddress) args[0];\n \t\t\t\t}\n \t\t\t} else if (args.length == 1) {\n \t\t\t\tif (args[0] instanceof NpcConnectorOption) {\n \t\t\t\t\tNpcConnectorOption option = (NpcConnectorOption) args[0];\n-\t\t\t\t\tInetSocketAddress address = option.getAddress();\n-\t\t\t\t\tsetServerAddress.invoke(target, address);\n+\t\t\t\t\tserverAddress = option.getAddress();\n \t\t\t\t}\n \t\t\t}\n \t\t} else {\n \t\t\tif (args[0] instanceof NpcConnectorOption) {\n \t\t\t\tNpcConnectorOption option = (NpcConnectorOption) args[0];\n-\t\t\t\tInetSocketAddress address = option.getAddress();\n-\t\t\t\tsetServerAddress.invoke(target, address);\n+\t\t\t\tserverAddress = option.getAddress();\n \t\t\t}\n \t\t}\n+\n+\t\tsetServerAddress.invoke(target, serverAddress);\n+\n+\t\tTrace trace = traceContext.currentTraceObject();\n+\t\tif (trace == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttrace.traceBlockBegin();\n+\t\ttrace.markBeforeTime();\n+\t\ttrace.recordServiceType(ServiceType.NPC_CLIENT);\n+\n+\t\tint port = serverAddress.getPort();\n+\t\tString endPoint = serverAddress.getHostName() + ((port > 0) ? \":\" + port : \"\");\n+\t\ttrace.recordDestinationId(endPoint);\n \t}\n \n \t@Override\n \tpublic void after(Object target, Object[] args, Object result) {\n+\t\tif (isDebug) {\n+\t\t\tlogger.afterInterceptor(target, args);\n+\t\t}\n \n+\t\tTrace trace = traceContext.currentTraceObject();\n+\t\tif (trace == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\ttrace.recordApi(descriptor);\n+\t\t\ttrace.recordException(result);\n+\t\t\ttrace.markAfterTime();\n+\t\t} finally {\n+\t\t\ttrace.traceBlockEnd();\n+\t\t}\n \t}\n \n \t@Override",
      "parent_sha": "581c54433850ade80d2dfebfdd48dea37eb53c23"
    }
  },
  {
    "oid": "e2bbeac48caf27415b1a60804705525f1ed3525d",
    "message": "[#2496] Add datasource metric collection\n\n1. Limits the number of decimal point for active avg and max avg",
    "date": "2017-03-15T07:02:59Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/e2bbeac48caf27415b1a60804705525f1ed3525d",
    "details": {
      "sha": "621b9410f5c146f0053402a94296cfbf9b55f713",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/mapper/stat/sampling/sampler/DataSourceSampler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/e2bbeac48caf27415b1a60804705525f1ed3525d/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fmapper%2Fstat%2Fsampling%2Fsampler%2FDataSourceSampler.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/e2bbeac48caf27415b1a60804705525f1ed3525d/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fmapper%2Fstat%2Fsampling%2Fsampler%2FDataSourceSampler.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fmapper%2Fstat%2Fsampling%2Fsampler%2FDataSourceSampler.java?ref=e2bbeac48caf27415b1a60804705525f1ed3525d",
      "patch": "@@ -93,7 +93,7 @@ private Point<Long, Integer> createPoint(long timestamp, List<Integer> values) {\n                     timestamp,\n                     INTEGER_DOWN_SAMPLER.sampleMin(values),\n                     INTEGER_DOWN_SAMPLER.sampleMax(values),\n-                    INTEGER_DOWN_SAMPLER.sampleAvg(values),\n+                    INTEGER_DOWN_SAMPLER.sampleAvg(values, 3),\n                     INTEGER_DOWN_SAMPLER.sampleSum(values));\n         }\n     }",
      "parent_sha": "6a39fc199ff030a93eef26df0533916681986e49"
    }
  },
  {
    "oid": "6047e6e88cbc12d48ed3c20f0ce1e5e37624a585",
    "message": "#119 fix findbug issue\n - utf-8 encoding",
    "date": "2014-12-17T09:27:13Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/6047e6e88cbc12d48ed3c20f0ce1e5e37624a585",
    "details": {
      "sha": "5588505ec96794ab7e46a41ade67feed27071aac",
      "filename": "profiler/src/main/java/com/navercorp/pinpoint/test/fork/ForkRunner.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/6047e6e88cbc12d48ed3c20f0ce1e5e37624a585/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftest%2Ffork%2FForkRunner.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/6047e6e88cbc12d48ed3c20f0ce1e5e37624a585/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftest%2Ffork%2FForkRunner.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Ftest%2Ffork%2FForkRunner.java?ref=6047e6e88cbc12d48ed3c20f0ce1e5e37624a585",
      "patch": "@@ -30,6 +30,8 @@ public class ForkRunner extends BlockJUnit4ClassRunner {\n         \"pinpoint-profiler\",\n         \"pinpoint/profiler\"\n     };\n+\n+    private static final String DEFAULT_ENCODING = \"UTF-8\";\n     \n     private final String agentJar;\n     private final String configFile;\n@@ -115,7 +117,7 @@ public void evaluate() throws Throwable {\n             }\n \n             final InputStream inputStream = process.getInputStream();\n-            final Scanner out = new Scanner(inputStream);\n+            final Scanner out = new Scanner(inputStream, DEFAULT_ENCODING);\n             try {\n                 while (out.hasNextLine()) {\n                     String line = out.nextLine();\n@@ -170,6 +172,8 @@ private String[] buildCommand() throws URISyntaxException {\n             \n             list.add(\"-Dpinpoint.agentId=build.test.0\");\n             list.add(\"-Dpinpoint.applicationName=test\");\n+\n+            list.add(\"-Dfile.encoding=\" + DEFAULT_ENCODING);\n             \n             if (isDebugMode()) {\n                 list.addAll(getDebugOptions());",
      "parent_sha": "426279cda7e83f08e05d76fe5da9069bd60343fe"
    }
  },
  {
    "oid": "749bad359c70f0b5cdc4a268f69ea66573a5c5fd",
    "message": "[\uac15\uc6b4\ub355] [PROFILER-58] line \uc758 span \ud578\ub4e4\ub9c1 \ub85c\uc9c1\uc758 \ub85c\uadf8 \uc21c\uc11c \uc218\uc815\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@4123 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-07-02T06:36:06Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/749bad359c70f0b5cdc4a268f69ea66573a5c5fd",
    "details": {
      "sha": "611bf81f4b49990bff36e81ae5798868aa1cdf58",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/linegame/interceptor/InvokeTaskRunInterceptor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/749bad359c70f0b5cdc4a268f69ea66573a5c5fd/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Flinegame%2Finterceptor%2FInvokeTaskRunInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/749bad359c70f0b5cdc4a268f69ea66573a5c5fd/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Flinegame%2Finterceptor%2FInvokeTaskRunInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Flinegame%2Finterceptor%2FInvokeTaskRunInterceptor.java?ref=749bad359c70f0b5cdc4a268f69ea66573a5c5fd",
      "patch": "@@ -148,18 +148,19 @@ protected Trace createTrace(Object target, Object[] args) {\n             // TODO remote\uc5d0\uc11c sampling flag\ub85c \ub9c8\ud06c\uac00\ub418\ub294 \ub300\uc0c1\uc73c\ub85c \uc654\uc744 \uacbd\uc6b0\ub3c4 \ucd94\uac00\ub85c \uc0d8\ud50c\ub9c1 \uce60\uc218 \uc788\uc5b4\uc57c\n             // \ud560\uac83\uc73c\ub85c \ubcf4\uc784.\n             final Trace trace = getTraceContext().continueTraceObject(traceId);\n-            if (!trace.canSampled()) {\n+            if (trace.canSampled()) {\n                 if (isDebug) {\n                     String requestURL = request.getUri();\n                     String remoteAddr = getRemoteAddress(channel);\n-                    logger.debug(\"TraceID exist. camSampled is false. skip trace. traceId:{}, requestUrl:{}, remoteAddr:{}\", new Object[]{traceId, requestURL, remoteAddr});\n+                    logger.debug(\"TraceID exist. continue trace. traceId:{}, requestUrl:{}, remoteAddr:{}\", new Object[]{traceId, requestURL, remoteAddr});\n                 }\n                 return trace;\n             } else {\n                 if (isDebug) {\n                     String requestURL = request.getUri();\n                     String remoteAddr = getRemoteAddress(channel);\n-                    logger.debug(\"TraceID exist. continue trace. traceId:{}, requestUrl:{}, remoteAddr:{}\", new Object[]{traceId, requestURL, remoteAddr});\n+                    logger.debug(\"TraceID exist. camSampled is false. skip trace. traceId:{}, requestUrl:{}, remoteAddr:{}\", new Object[]{traceId, requestURL, remoteAddr});\n+\n                 }\n                 return trace;\n             }",
      "parent_sha": "ea1402a030500e9075b18bb05a30dc7f017e1fed"
    }
  },
  {
    "oid": "eacb9947d219c93494bf876b0de003b1e1859ab3",
    "message": "#9 profiler - collector \uac04\uc758 channel \uad00\ub9ac\ub97c \uc704\ud55c cluster \uac1c\ubc1c",
    "date": "2014-08-12T06:37:59Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/eacb9947d219c93494bf876b0de003b1e1859ab3",
    "details": {
      "sha": "ce047cbe18113ddabac21eeeb1df7ffec9f84117",
      "filename": "src/main/java/com/nhn/pinpoint/collector/cluster/zookeeper/ZookeeperLatestJobWorker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/eacb9947d219c93494bf876b0de003b1e1859ab3/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fcluster%2Fzookeeper%2FZookeeperLatestJobWorker.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/eacb9947d219c93494bf876b0de003b1e1859ab3/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fcluster%2Fzookeeper%2FZookeeperLatestJobWorker.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2Fcluster%2Fzookeeper%2FZookeeperLatestJobWorker.java?ref=eacb9947d219c93494bf876b0de003b1e1859ab3",
      "patch": "@@ -270,7 +270,7 @@ private boolean await(long waitTimeMillis, long waitUnitTimeMillis) {\n \r\n \t\t\tlong startTimeMillis = System.currentTimeMillis();\r\n \r\n-\t\t\twhile (latestJobRepository.size() == 0 && isOverWaitTime(waitTime, startTimeMillis) && workerState.get() == 1) {\r\n+\t\t\twhile (latestJobRepository.size() == 0 && !isOverWaitTime(waitTime, startTimeMillis) && workerState.get() == 1) {\r\n \t\t\t\ttry {\r\n \t\t\t\t\tlock.wait(waitUnitTime);\r\n \t\t\t\t} catch (InterruptedException e) {\r",
      "parent_sha": "0822d99b40d5d8021a30ef894bac8912d2f54e4d"
    }
  },
  {
    "oid": "24fe04e27bbd231e4a9c01459983fa85079888d6",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] \ub9ac\ud329\ud1a0\ub9c1\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-server/trunk@809 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2012-10-18T05:43:37Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/24fe04e27bbd231e4a9c01459983fa85079888d6",
    "details": {
      "sha": "08692acc1b2f1f8398cca791f6c9f7bbeaca478a",
      "filename": "src/test/java/com/profiler/server/dao/TraceDaoTest.java",
      "status": "renamed",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/24fe04e27bbd231e4a9c01459983fa85079888d6/src%2Ftest%2Fjava%2Fcom%2Fprofiler%2Fserver%2Fdao%2FTraceDaoTest.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/24fe04e27bbd231e4a9c01459983fa85079888d6/src%2Ftest%2Fjava%2Fcom%2Fprofiler%2Fserver%2Fdao%2FTraceDaoTest.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Ftest%2Fjava%2Fcom%2Fprofiler%2Fserver%2Fdao%2FTraceDaoTest.java?ref=24fe04e27bbd231e4a9c01459983fa85079888d6",
      "patch": "@@ -29,7 +29,7 @@\n @RunWith(SpringJUnit4ClassRunner.class)\r\n //@TestExecutionListeners({DependencyInjectionTestExecutionListener.class})\r\n @ContextConfiguration(\"classpath:test-applicationContext.xml\")\r\n-public class TracesTest {\r\n+public class TraceDaoTest {\r\n \r\n     private static final String TRACE = \"Trace\";\r\n     private static final String ID = \"ID\";\r\n@@ -96,7 +96,7 @@ public void insertSpan() throws InterruptedException, UnsupportedEncodingExcepti\n     private Span createSpan() {\r\n         UUID uuid = UUID.randomUUID();\r\n         List<Annotation> ano = Collections.emptyList();\r\n-\t\tSpan span = new Span(\"UnitTest\", System.currentTimeMillis(), uuid.getMostSignificantBits(), uuid.getLeastSignificantBits(), \"test\", \"rpc\", 1, ano, \"protocol:ip:port\", false);\r\n+        Span span = new Span(\"UnitTest\", System.currentTimeMillis(), uuid.getMostSignificantBits(), uuid.getLeastSignificantBits(), \"test\", \"rpc\", 1, ano, \"protocol:ip:port\", false);\r\n         return span;\r\n     }\r\n }\r",
      "previous_filename": "src/test/java/com/profiler/server/dao/TracesTest.java",
      "parent_sha": "dfcf26758d0fd6aec1a7cb28f4e941b2f5eda478"
    }
  },
  {
    "oid": "1f40d30a0d7c1f708e2a395a19483f33f27d85ed",
    "message": "[\uac15\uc6b4\ub355] [PROFILER-46] packet \uc5d0\ub7ec\uc2dc packet\uc758 \uc0ac\uc774\uc988\ub97c \ucd9c\ub825\ud558\ub3c4\ub85d \uc218\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@4036 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-06-17T10:46:13Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/1f40d30a0d7c1f708e2a395a19483f33f27d85ed",
    "details": {
      "sha": "8e9b8ee5f577111b18ac65ab7188926e003e7a87",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/sender/UdpDataSender.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/1f40d30a0d7c1f708e2a395a19483f33f27d85ed/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fsender%2FUdpDataSender.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/1f40d30a0d7c1f708e2a395a19483f33f27d85ed/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fsender%2FUdpDataSender.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fsender%2FUdpDataSender.java?ref=1f40d30a0d7c1f708e2a395a19483f33f27d85ed",
      "patch": "@@ -115,16 +115,16 @@ protected void sendPacket(Object message) {\n                 return;\n             }\n \n-            int interBufferSize = this.serializer.getInterBufferSize();\n+            final int interBufferSize = this.serializer.getInterBufferSize();\n             // single thread\uc774\ubbc0\ub85c \uadf8\ub0e5 \uc7ac\ud65c\uc6a9\ud55c\ub2e4.\n             reusePacket.setData(interBufferData, 0, interBufferSize);\n             try {\n                 udpSocket.send(reusePacket);\n-                if (isTrace) {\n-                    logger.trace(\"Data sent. {}\", dto);\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Data sent. {}, {}\", interBufferSize, dto);\n                 }\n             } catch (IOException e) {\n-                logger.warn(\"packet send error {}\", dto, e);\n+                logger.warn(\"packet send error {}, {}\", interBufferSize, dto, e);\n             }\n \t\t} else {\n \t\t\tlogger.warn(\"sendPacket fail. invalid type:{}\", message != null ? message.getClass() : null);",
      "parent_sha": "6d8bd96a2aff8fe6632b0674380c12e43f7c2d88"
    }
  },
  {
    "oid": "731de35894aab85367f9f265c40048cd0dde5c30",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] \uc5f0\uc0b0\uc790 \uc218\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-server/trunk@1951 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-07-05T07:35:55Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/731de35894aab85367f9f265c40048cd0dde5c30",
    "details": {
      "sha": "b8808f07123fe1b1cb262e0f42c0f8fea3541fb8",
      "filename": "src/main/java/com/nhn/pinpoint/collector/Server.java",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/731de35894aab85367f9f265c40048cd0dde5c30/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2FServer.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/731de35894aab85367f9f265c40048cd0dde5c30/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2FServer.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcollector%2FServer.java?ref=731de35894aab85367f9f265c40048cd0dde5c30",
      "patch": "@@ -28,15 +28,14 @@ public void start() {\n \t\tlogger.info(\"Initializing server components.\");\n \t\tcontext = createContext();\n \n-\t\tboolean successfullyStarted = true;\n-\n-\t\tlogger.info(\"Starting MultiplexedUDPReceiver receive UDP Thread.\");\n+        logger.info(\"Starting MultiplexedUDPReceiver receive UDP Thread.\");\n         MultiplexedPacketHandler multiplexedPacketHandlerBean = ApplicationContextUtils.getMultiplexedPacketHandler(context);\n         mulplexDataReceiver = new MultiplexedUDPReceiver(multiplexedPacketHandlerBean);\n-\t\tFuture<Boolean> startFuture = mulplexDataReceiver.start();\n+        Future<Boolean> startFuture = mulplexDataReceiver.start();\n \n-\t\ttry {\n-\t\t\tsuccessfullyStarted &= startFuture.get();\n+        boolean successfullyStarted = true;\n+        try {\n+\t\t\tsuccessfullyStarted = startFuture.get();\n \t\t} catch (Exception e) {\n \t\t\tstartFuture.cancel(true);\n \t\t\tlogger.error(\"Failed to start multiplexDataReceiver.\");",
      "parent_sha": "b19603d4f9d226c2e6a649bc15ff51fff18f709f"
    }
  },
  {
    "oid": "afbfae9f9a9656864d571db6f376fea1a5cb233e",
    "message": "[\uc720\uce58\uc218] [NOBTS] \ub85c\uadf8 \ub0b4\uc6a9 \ubcc0\uacbd. \ub108\ubb34 \ub9ce\uc774 \ub098\uc634.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@2902 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-11-13T09:13:31Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/afbfae9f9a9656864d571db6f376fea1a5cb233e",
    "details": {
      "sha": "f1e4530810abf4fed6f6d294d6c06e5b56b0ceb2",
      "filename": "src/main/java/com/nhn/pinpoint/web/controller/ScatterChartController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/afbfae9f9a9656864d571db6f376fea1a5cb233e/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fcontroller%2FScatterChartController.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/afbfae9f9a9656864d571db6f376fea1a5cb233e/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fcontroller%2FScatterChartController.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fcontroller%2FScatterChartController.java?ref=afbfae9f9a9656864d571db6f376fea1a5cb233e",
      "patch": "@@ -114,10 +114,10 @@ public String getScatterData(Model model,\n \t\t} else {\r\n \t\t\tfinal LimitedScanResult<List<TransactionId>> limitedScanResult = flow.selectTraceIdsFromApplicationTraceIndex(applicationName, from, to, limit);\r\n \t\t\tfinal List<TransactionId> traceIdList = limitedScanResult.getScanData();\r\n-\t\t\tlogger.trace(\"selected transactionId {}\", traceIdList);\r\n+\t\t\tlogger.trace(\"submitted transactionId count={}\", traceIdList.size());\r\n \t\t\t// TODO sorted\ub9cc \ud558\ub294\uac00? tree\uae30\ubc18\uc73c\ub85c \ub808\uc778\uc9c0 \uccb4\ud06c\ud558\ub3c4\ub85d \ud558\uace0 \uc0ad\uc81c\ud558\ub3c4\ub85d \ud558\uc790.\r\n \t\t\tSortedSet<TransactionId> traceIdSet = new TreeSet<TransactionId>(traceIdList);\r\n-\t\t\tlogger.debug(\"selectScatterData with {}\", traceIdSet);\r\n+\t\t\tlogger.debug(\"unified traceIdSet size={}\", traceIdSet.size());\r\n \r\n             Filter filter = filterBuilder.build(filterText);\r\n             scatterData = scatter.selectScatterData(traceIdSet, applicationName, filter);\r",
      "parent_sha": "921955e7ec9887c2debe0642dcdb1b26493a322d"
    }
  },
  {
    "oid": "29000f43d7d00ffa80317e24467da039f08c82d8",
    "message": "Modified jackson plugin to use new plugin api.",
    "date": "2015-08-21T07:32:04Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/29000f43d7d00ffa80317e24467da039f08c82d8",
    "details": {
      "sha": "a215c6ee79df3fa116132bb1a0a4439276063ede",
      "filename": "plugins/jackson/src/main/java/com/navercorp/pinpoint/plugin/jackson/JacksonPlugin.java",
      "status": "modified",
      "additions": 146,
      "deletions": 69,
      "changes": 215,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/29000f43d7d00ffa80317e24467da039f08c82d8/plugins%2Fjackson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjackson%2FJacksonPlugin.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/29000f43d7d00ffa80317e24467da039f08c82d8/plugins%2Fjackson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjackson%2FJacksonPlugin.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Fjackson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fjackson%2FJacksonPlugin.java?ref=29000f43d7d00ffa80317e24467da039f08c82d8",
      "patch": "@@ -14,14 +14,19 @@\n  */\n package com.navercorp.pinpoint.plugin.jackson;\n \n-import java.lang.instrument.ClassFileTransformer;\n-\n+import com.navercorp.pinpoint.bootstrap.instrument.InstrumentClass;\n+import com.navercorp.pinpoint.bootstrap.instrument.InstrumentException;\n+import com.navercorp.pinpoint.bootstrap.instrument.InstrumentMethod;\n import com.navercorp.pinpoint.bootstrap.instrument.MethodFilters;\n+import com.navercorp.pinpoint.bootstrap.interceptor.group.InterceptorGroup;\n+import com.navercorp.pinpoint.bootstrap.logging.PLogger;\n+import com.navercorp.pinpoint.bootstrap.logging.PLoggerFactory;\n import com.navercorp.pinpoint.bootstrap.plugin.ProfilerPlugin;\n+import com.navercorp.pinpoint.bootstrap.plugin.ProfilerPluginInstrumentContext;\n import com.navercorp.pinpoint.bootstrap.plugin.ProfilerPluginSetupContext;\n-import com.navercorp.pinpoint.bootstrap.plugin.transformer.ClassFileTransformerBuilder;\n-import com.navercorp.pinpoint.bootstrap.plugin.transformer.ConstructorTransformerBuilder;\n-import com.navercorp.pinpoint.bootstrap.plugin.transformer.MethodTransformerProperty;\n+import com.navercorp.pinpoint.bootstrap.plugin.transformer.PinpointClassFileTransformer;\n+\n+import java.security.ProtectionDomain;\n \n /**\n  * @author Sungkook Kim\n@@ -35,85 +40,157 @@ public class JacksonPlugin implements ProfilerPlugin, JacksonConstants {\n     private static final String WRITE_VALUE_AS_BYTES_INTERCEPTOR = \"com.navercorp.pinpoint.plugin.jackson.interceptor.WriteValueAsBytesInterceptor\";\n     private static final String WRITE_VALUE_AS_STRING_INTERCEPTOR = \"com.navercorp.pinpoint.plugin.jackson.interceptor.WriteValueAsStringInterceptor\";\n \n+    private final PLogger logger = PLoggerFactory.getLogger(this.getClass());\n+\n     @Override\n     public void setup(ProfilerPluginSetupContext context) {\n-        intercept_ObjectMapper(context);\n-        intercept_ObjectReader(context, \"com.fasterxml.jackson.databind.ObjectReader\");\n-        intercept_ObjectWriter(context, \"com.fasterxml.jackson.databind.ObjectWriter\");\n-        \n-        intercept_ObjectMapper_1_x(context);\n-        intercept_ObjectReader(context, \"org.codehaus.jackson.map.ObjectReader\");\n-        intercept_ObjectWriter(context, \"org.codehaus.jackson.map.ObjectWriter\");\n+        addObjectMapperEditor(context, \"com.fasterxml.jackson.databind.ObjectMapper\");\n+        addObjectReaderEditor(context, \"com.fasterxml.jackson.databind.ObjectReader\");\n+        addObjectWriterEditor(context, \"com.fasterxml.jackson.databind.ObjectWriter\");\n+\n+        addObjectMapper_1_X_Editor(context, \"org.codehaus.jackson.map.ObjectMapper\");\n+        addObjectReaderEditor(context, \"org.codehaus.jackson.map.ObjectReader\");\n+        addObjectWriterEditor(context, \"org.codehaus.jackson.map.ObjectWriter\");\n     }\n \n-    private void intercept_ObjectMapper(ProfilerPluginSetupContext context) {\n-        ClassFileTransformerBuilder builder = context.getClassFileTransformerBuilder(\"com.fasterxml.jackson.databind.ObjectMapper\"); \n+    private void addObjectMapperEditor(ProfilerPluginSetupContext context, String clazzName) {\n+        context.addClassFileTransformer(clazzName, new PinpointClassFileTransformer() {\n+\n+            @Override\n+            public byte[] transform(ProfilerPluginInstrumentContext instrumentContext, ClassLoader classLoader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws InstrumentException {\n+                InstrumentClass target = instrumentContext.getInstrumentClass(classLoader, className, classfileBuffer);\n+                InterceptorGroup group = instrumentContext.getInterceptorGroup(GROUP);\n+\n+                final InstrumentMethod constructor1 = target.getConstructor();\n+                addInterceptor(constructor1, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+\n+                final InstrumentMethod constructor2 = target.getConstructor(\"com.fasterxml.jackson.core.JsonFactory\");\n+                addInterceptor(constructor2, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+\n+                final InstrumentMethod constructor3 = target.getConstructor(\"com.fasterxml.jackson.core.JsonFactory\", \"com.fasterxml.jackson.databind.ser.DefaultSerializerProvider\", \"com.fasterxml.jackson.databind.deser.DefaultDeserializationContext\");\n+                addInterceptor(constructor3, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValue\"))) {\n+                    addInterceptor(method, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+                }\n \n-        /* constructor */\n-        builder.editConstructor().injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-        builder.editConstructor(\"com.fasterxml.jackson.core.JsonFactory\").injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-        builder.editConstructor(\"com.fasterxml.jackson.core.JsonFactory\", \"com.fasterxml.jackson.databind.ser.DefaultSerializerProvider\", \"com.fasterxml.jackson.databind.deser.DefaultDeserializationContext\").injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValueAsString\"))) {\n+                    addInterceptor(method, WRITE_VALUE_AS_STRING_INTERCEPTOR, group);\n+                }\n \n-        /* serialization */\n-        builder.editMethods(MethodFilters.name(\"writeValue\")).injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-        builder.editMethods(MethodFilters.name(\"writeValueAsString\")).injectInterceptor(WRITE_VALUE_AS_STRING_INTERCEPTOR).group(GROUP);\n-        builder.editMethods(MethodFilters.name(\"writeValueAsBytes\")).injectInterceptor(WRITE_VALUE_AS_BYTES_INTERCEPTOR).group(GROUP);\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValueAsBytes\"))) {\n+                    addInterceptor(method, WRITE_VALUE_AS_BYTES_INTERCEPTOR, group);\n+                }\n \n-        /* deserialization */\n-        builder.editMethods(MethodFilters.name(\"readValue\")).injectInterceptor(READ_VALUE_INTERCEPTOR).group(GROUP);\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"readValue\"))) {\n+                    addInterceptor(method, READ_VALUE_INTERCEPTOR, group);\n+                }\n \n-        ClassFileTransformer transformer = builder.build();\n-        context.addClassFileTransformer(transformer);\n+                return target.toBytecode();\n+            }\n+\n+        });\n     }\n-    \n-    private void intercept_ObjectReader(ProfilerPluginSetupContext context, String className) {\n-        ClassFileTransformerBuilder builder = context.getClassFileTransformerBuilder(className); \n \n-        /* deserialization */\n-        builder.editMethods(MethodFilters.name(\"readValue\", \"readValues\")).injectInterceptor(READ_VALUE_INTERCEPTOR).group(GROUP);\n+    private void addObjectMapper_1_X_Editor(ProfilerPluginSetupContext context, String clazzName) {\n+        context.addClassFileTransformer(clazzName, new PinpointClassFileTransformer() {\n+\n+            @Override\n+            public byte[] transform(ProfilerPluginInstrumentContext instrumentContext, ClassLoader classLoader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws InstrumentException {\n+                InstrumentClass target = instrumentContext.getInstrumentClass(classLoader, className, classfileBuffer);\n+                InterceptorGroup group = instrumentContext.getInterceptorGroup(GROUP);\n+\n+                final InstrumentMethod constructor1 = target.getConstructor();\n+                addInterceptor(constructor1, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+\n+                final InstrumentMethod constructor2 = target.getConstructor(\"org.codehaus.jackson.JsonFactory\");\n+                addInterceptor(constructor2, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+\n+                final InstrumentMethod constructor3 = target.getConstructor(\"org.codehaus.jackson.JsonFactory\", \"org.codehaus.jackson.map.SerializerProvider\", \"org.codehaus.jackson.map.DeserializerProvider\");\n+                addInterceptor(constructor3, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+\n+                final InstrumentMethod constructor4 = target.getConstructor(\"org.codehaus.jackson.map.SerializerFactory\");\n+                addInterceptor(constructor4, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValue\"))) {\n+                    addInterceptor(method, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+                }\n+\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValueAsString\"))) {\n+                    addInterceptor(method, WRITE_VALUE_AS_STRING_INTERCEPTOR, group);\n+                }\n \n-        ClassFileTransformer transformer = builder.build();\n-        context.addClassFileTransformer(transformer);\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValueAsBytes\"))) {\n+                    addInterceptor(method, WRITE_VALUE_AS_BYTES_INTERCEPTOR, group);\n+                }\n+\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"readValue\"))) {\n+                    addInterceptor(method, READ_VALUE_INTERCEPTOR, group);\n+                }\n+\n+                return target.toBytecode();\n+            }\n+\n+        });\n+    }\n+\n+\n+    private void addObjectReaderEditor(ProfilerPluginSetupContext context, String clazzName) {\n+        context.addClassFileTransformer(clazzName, new PinpointClassFileTransformer() {\n+\n+            @Override\n+            public byte[] transform(ProfilerPluginInstrumentContext instrumentContext, ClassLoader classLoader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws InstrumentException {\n+                InstrumentClass target = instrumentContext.getInstrumentClass(classLoader, className, classfileBuffer);\n+                InterceptorGroup group = instrumentContext.getInterceptorGroup(GROUP);\n+\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"readValue\", \"readValues\"))) {\n+                    addInterceptor(method, READ_VALUE_INTERCEPTOR, group);\n+                }\n+\n+                return target.toBytecode();\n+            }\n+\n+        });\n     }\n-    \n-    private void intercept_ObjectWriter(ProfilerPluginSetupContext context, String className) {\n-        ClassFileTransformerBuilder builder = context.getClassFileTransformerBuilder(className); \n \n-        /* deserialization */\n-        builder.editMethods(MethodFilters.name(\"writeValue\")).injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-        builder.editMethods(MethodFilters.name(\"writeValueAsString\")).injectInterceptor(WRITE_VALUE_AS_STRING_INTERCEPTOR).group(GROUP);\n-        builder.editMethods(MethodFilters.name(\"writeValueAsBytes\")).injectInterceptor(WRITE_VALUE_AS_BYTES_INTERCEPTOR).group(GROUP);\n+    private void addObjectWriterEditor(ProfilerPluginSetupContext context, String clazzName) {\n+        context.addClassFileTransformer(clazzName, new PinpointClassFileTransformer() {\n+\n+            @Override\n+            public byte[] transform(ProfilerPluginInstrumentContext instrumentContext, ClassLoader classLoader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws InstrumentException {\n+                InstrumentClass target = instrumentContext.getInstrumentClass(classLoader, className, classfileBuffer);\n+                InterceptorGroup group = instrumentContext.getInterceptorGroup(GROUP);\n+\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValue\"))) {\n+                    addInterceptor(method, BASIC_METHOD_INTERCEPTOR, group, SERVICE_TYPE);\n+                }\n \n-        ClassFileTransformer transformer = builder.build();\n-        context.addClassFileTransformer(transformer);\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValueAsString\"))) {\n+                    addInterceptor(method, WRITE_VALUE_AS_STRING_INTERCEPTOR, group);\n+                }\n+\n+                for (InstrumentMethod method : target.getDeclaredMethods(MethodFilters.name(\"writeValueAsBytes\"))) {\n+                    addInterceptor(method, WRITE_VALUE_AS_BYTES_INTERCEPTOR, group);\n+                }\n+\n+                return target.toBytecode();\n+            }\n+\n+        });\n     }\n \n-    \n-    private void intercept_ObjectMapper_1_x(ProfilerPluginSetupContext context) {\n-        ClassFileTransformerBuilder builder = context.getClassFileTransformerBuilder(\"org.codehaus.jackson.map.ObjectMapper\"); \n-\n-        /* constructor */\n-        builder.editConstructor().injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-        builder.editConstructor(\"org.codehaus.jackson.JsonFactory\").injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-        builder.editConstructor(\"org.codehaus.jackson.JsonFactory\", \"org.codehaus.jackson.map.SerializerProvider\", \"org.codehaus.jackson.map.DeserializerProvider\").injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-\n-        ConstructorTransformerBuilder cb0 = builder.editConstructor(\"org.codehaus.jackson.map.SerializerFactory\");\n-        cb0.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);\n-        cb0.injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-        \n-        ConstructorTransformerBuilder cb1 = builder.editConstructor(\"org.codehaus.jackson.JsonFactory\", \"org.codehaus.jackson.map.SerializerProvider\", \"org.codehaus.jackson.map.DeserializerProvider\", \"org.codehaus.jackson.map.SerializationConfig\", \"org.codehaus.jackson.map.DeserializationConfig\");\n-        cb1.property(MethodTransformerProperty.IGNORE_IF_NOT_EXIST);\n-        cb1.injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-\n-        /* serialization */\n-        builder.editMethods(MethodFilters.name(\"writeValue\")).injectInterceptor(BASIC_METHOD_INTERCEPTOR, SERVICE_TYPE).group(GROUP);\n-        builder.editMethods(MethodFilters.name(\"writeValueAsString\")).injectInterceptor(WRITE_VALUE_AS_STRING_INTERCEPTOR).group(GROUP);\n-        builder.editMethods(MethodFilters.name(\"writeValueAsBytes\")).injectInterceptor(WRITE_VALUE_AS_BYTES_INTERCEPTOR).group(GROUP);\n-\n-        /* deserialization */\n-        builder.editMethods(MethodFilters.name(\"readValue\")).injectInterceptor(READ_VALUE_INTERCEPTOR).group(GROUP);\n-\n-        ClassFileTransformer transformer = builder.build();\n-        context.addClassFileTransformer(transformer);\n+    private boolean addInterceptor(InstrumentMethod method, String interceptorClassName, InterceptorGroup group, Object... constructorArgs) {\n+        if (method != null) {\n+            try {\n+                method.addInterceptor(interceptorClassName, group, constructorArgs);\n+                return true;\n+            } catch (InstrumentException e) {\n+                if (logger.isWarnEnabled()) {\n+                    logger.warn(\"Unsupported method \" + method, e);\n+                }\n+            }\n+        }\n+        return false;\n     }\n+\n }",
      "parent_sha": "b2b52eb2450a940b1d6cf8d88d4013a7ac610b56"
    }
  },
  {
    "oid": "7c5c39ae0c0210ec28ae4c7d64c3cff7915c892e",
    "message": "[#7463] Fix Reactor-Netty HTTP client plugin",
    "date": "2020-12-17T02:48:50Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/7c5c39ae0c0210ec28ae4c7d64c3cff7915c892e",
    "details": {
      "sha": "00bf8a06520e9ed0dff8b511971b1f6de20aec57",
      "filename": "plugins/reactor-netty/src/main/java/com/navercorp/pinpoint/plugin/reactor/netty/ReactorNettyPlugin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/7c5c39ae0c0210ec28ae4c7d64c3cff7915c892e/plugins%2Freactor-netty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Freactor%2Fnetty%2FReactorNettyPlugin.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/7c5c39ae0c0210ec28ae4c7d64c3cff7915c892e/plugins%2Freactor-netty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Freactor%2Fnetty%2FReactorNettyPlugin.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Freactor-netty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Freactor%2Fnetty%2FReactorNettyPlugin.java?ref=7c5c39ae0c0210ec28ae4c7d64c3cff7915c892e",
      "patch": "@@ -191,14 +191,10 @@ public byte[] doInTransform(Instrumentor instrumentor, ClassLoader loader, Strin\n             InstrumentClass target = instrumentor.getInstrumentClass(loader, className, classfileBuffer);\n             target.addField(AsyncContextAccessor.class);\n \n-            final InstrumentMethod sendMethod = target.getDeclaredMethod(\"send\");\n+            final InstrumentMethod sendMethod = target.getDeclaredMethod(\"followRedirectPredicate\", \"java.util.function.BiPredicate\");\n             if (sendMethod != null) {\n                 sendMethod.addInterceptor(HttpClientOperationsSendInterceptor.class);\n             }\n-            final InstrumentMethod sendArgMethod = target.getDeclaredMethod(\"send\", \"org.reactivestreams.Publisher\");\n-            if (sendArgMethod != null) {\n-                sendArgMethod.addInterceptor(HttpClientOperationsSendInterceptor.class);\n-            }\n             final InstrumentMethod onOutboundCompleteMethod = target.getDeclaredMethod(\"onOutboundComplete\");\n             if (onOutboundCompleteMethod != null) {\n                 onOutboundCompleteMethod.addInterceptor(HttpClientOperationsOnOutboundCompleteInterceptor.class);",
      "parent_sha": "ae82532ca7dc84df610fc276a82596183ffda1ca"
    }
  },
  {
    "oid": "b7b5d1baf0d7db1b3d44c63dc6f1b30bd1a26b3d",
    "message": "[\uac15\uc6b4\ub355] [WEB-112] targetHosts\uc744 sourceHistogram\uacfc \ub3d9\uc77c\ud55c \ud3ec\uba67\uc73c\ub85c \uc218\uc815\ud568.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@3665 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-04-14T05:12:01Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/b7b5d1baf0d7db1b3d44c63dc6f1b30bd1a26b3d",
    "details": {
      "sha": "43fb277433956efebf420c365a71c9d25bc0c583",
      "filename": "src/main/java/com/nhn/pinpoint/web/view/LinkSerializer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 24,
      "changes": 30,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/b7b5d1baf0d7db1b3d44c63dc6f1b30bd1a26b3d/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fview%2FLinkSerializer.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/b7b5d1baf0d7db1b3d44c63dc6f1b30bd1a26b3d/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fview%2FLinkSerializer.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fview%2FLinkSerializer.java?ref=b7b5d1baf0d7db1b3d44c63dc6f1b30bd1a26b3d",
      "patch": "@@ -12,7 +12,6 @@\n import com.fasterxml.jackson.databind.SerializerProvider;\r\n \r\n import java.io.IOException;\r\n-import java.util.Collection;\r\n import java.util.List;\r\n \r\n /**\r\n@@ -43,8 +42,9 @@ public void serialize(Link link, JsonGenerator jgen, SerializerProvider provider\n \r\n         jgen.writeObjectField(\"histogram\", histogram);\r\n \r\n-        writeSourceHistogram(link, jgen);\r\n-        writeTargetHosts(link, jgen);\r\n+        // \ub9c1\ud06c\ubcc4 \uac01 agent\uac00 \uc5b4\ub5bb\uac8c \ud638\ucd9c\ud588\ub294\uc9c0 \ub370\uc774\ud130\r\n+        writeAgentHistogram(\"sourceHistogram\", link.getSourceList(), jgen);\r\n+        writeAgentHistogram(\"targetHistogram\", link.getTargetList(), jgen);\r\n \r\n         writeTimeSeriesHistogram(link, jgen);\r\n         writeSourceAgentTimeSeriesHistogram(link, jgen);\r\n@@ -65,29 +65,11 @@ private void writeTimeSeriesHistogram(Link link, JsonGenerator jgen) throws IOEx\n         jgen.writeObject(sourceApplicationTimeSeriesHistogram);\r\n     }\r\n \r\n-    private void writeTargetHosts(Link link, JsonGenerator jgen) throws IOException {\r\n-        CallHistogramList targetList = link.getTargetList();\r\n-        Collection<CallHistogram> targetCallHistogramList = targetList.getCallHistogramList();\r\n-        jgen.writeFieldName(\"targetHosts\");\r\n-        jgen.writeStartObject();\r\n-        for (CallHistogram callHistogram : targetCallHistogramList) {\r\n-            jgen.writeFieldName(callHistogram.getId());\r\n-            jgen.writeStartObject();\r\n \r\n-            jgen.writeFieldName(\"histogram\");\r\n-            jgen.writeObject(callHistogram.getHistogram());\r\n-\r\n-            jgen.writeEndObject();\r\n-        }\r\n-        jgen.writeEndObject();\r\n-    }\r\n-\r\n-    private void writeSourceHistogram(Link link, JsonGenerator jgen) throws IOException {\r\n-        jgen.writeFieldName(\"sourceHistogram\");\r\n-        final CallHistogramList sourceList = link.getSourceList();\r\n-        Collection<CallHistogram> callHistogramList = sourceList.getCallHistogramList();\r\n+    private void writeAgentHistogram(String fieldName, CallHistogramList callHistogramList, JsonGenerator jgen) throws IOException {\r\n+        jgen.writeFieldName(fieldName);\r\n         jgen.writeStartObject();\r\n-        for (CallHistogram callHistogram : callHistogramList) {\r\n+        for (CallHistogram callHistogram : callHistogramList.getCallHistogramList()) {\r\n             jgen.writeFieldName(callHistogram.getId());\r\n             jgen.writeObject(callHistogram.getHistogram());\r\n         }\r",
      "parent_sha": "79a8108c86f29976474d5aaf16182f45d7e5fbf1"
    }
  },
  {
    "oid": "9b58f891623add857de8e49a07d56f40457f13d4",
    "message": "[PROFILER-49] udp sendBuffersize, receiveBufferSize\uac00 \uc815\uc0c1\uc801\uc774\uc9c0 \uc54a\uc744 \uacbd\uc6b0 log\ub97c \ucd9c\ub825\ud558\ub3c4\ub85d \uc218\uc815\ud568.",
    "date": "2014-07-14T02:53:07Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/9b58f891623add857de8e49a07d56f40457f13d4",
    "details": {
      "sha": "af3bdc40db1596c2d79b01cf8fc0eb7413a62f35",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/sender/UdpDataSender.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/9b58f891623add857de8e49a07d56f40457f13d4/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fsender%2FUdpDataSender.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/9b58f891623add857de8e49a07d56f40457f13d4/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fsender%2FUdpDataSender.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fsender%2FUdpDataSender.java?ref=9b58f891623add857de8e49a07d56f40457f13d4",
      "patch": "@@ -111,8 +111,11 @@ private DatagramSocket createSocket(String host, int port, int timeout, int send\n \n \t\t\tdatagramSocket.setSoTimeout(timeout);\n             datagramSocket.setSendBufferSize(sendBufferSize);\n-            if (logger.isInfoEnabled()) {\n-                logger.info(\"verify sendBufferSize:{}\", datagramSocket.getSendBufferSize());\n+            if (logger.isWarnEnabled()) {\n+                final int checkSendBufferSize = datagramSocket.getSendBufferSize();\n+                if (sendBufferSize != checkSendBufferSize) {\n+                    logger.warn(\"DatagramSocket.setSendBufferSize() error. {}!={}\", sendBufferSize, checkSendBufferSize);\n+                }\n             }\n \n \t\t\tInetSocketAddress serverAddress = new InetSocketAddress(host, port);",
      "parent_sha": "8f2e75fd7232f86091751021f9d5dcfa513342e8"
    }
  },
  {
    "oid": "6a2935dbba33bf0114116aeedb6b9c5dbb43dab9",
    "message": "[\uc720\uce58\uc218] [NOBTS] detail view\uc758 server map\uc5d0\uc11c call count\uac00 \ub9de\uc9c0 \uc54a\ub294 \ud604\uc0c1 \ud328\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@1214 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-02-18T02:52:14Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/6a2935dbba33bf0114116aeedb6b9c5dbb43dab9",
    "details": {
      "sha": "6bb85198bf906e2d4ed80ac86432b59d9855f12a",
      "filename": "src/main/java/com/nhn/hippo/web/calltree/server/ServerCallTree.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/6a2935dbba33bf0114116aeedb6b9c5dbb43dab9/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Fweb%2Fcalltree%2Fserver%2FServerCallTree.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/6a2935dbba33bf0114116aeedb6b9c5dbb43dab9/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Fweb%2Fcalltree%2Fserver%2FServerCallTree.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fhippo%2Fweb%2Fcalltree%2Fserver%2FServerCallTree.java?ref=6a2935dbba33bf0114116aeedb6b9c5dbb43dab9",
      "patch": "@@ -163,7 +163,9 @@ public ServerCallTree build() {\n \t\t\tServer fromServer = servers.get(spanIdToServerId.get(from));\n \t\t\tServer toServer = servers.get(spanIdToServerId.get(to));\n \n-\t\t\tServerRequest serverRequest = new ServerRequest(fromServer, toServer, new ResponseHistogram(span.getServiceType()));\n+\t\t\tResponseHistogram histogram = new ResponseHistogram(span.getServiceType());\n+\t\t\thistogram.addSample(span.getEndElapsed());\n+\t\t\tServerRequest serverRequest = new ServerRequest(fromServer, toServer, histogram);\n \n \t\t\tif (serverRequests.containsKey(serverRequest.getId())) {\n \t\t\t\tserverRequests.get(serverRequest.getId()).getHistogram().addSample(span.getEndElapsed());",
      "parent_sha": "969d89197cfefe2863f50129544db48fd922bade"
    }
  },
  {
    "oid": "653bc8b641d65b75ed75e55599e63ca6b60db9ca",
    "message": "[PROFILER-24] \ud574\ub2f9 \uc218\uc815\uc5d0 \ub300\ud55c \uc0ac\uc774\ub4dc\uc774\ud399\ud2b8\uac00 \ubc1c\uacac\ub418\uc5b4 \uc81c\uac70\ud568.",
    "date": "2014-08-21T09:04:56Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/653bc8b641d65b75ed75e55599e63ca6b60db9ca",
    "details": {
      "sha": "96ef673d031be52f4093eb790072e7a217f4972c",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/DefaultModifierRegistry.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/653bc8b641d65b75ed75e55599e63ca6b60db9ca/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2FDefaultModifierRegistry.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/653bc8b641d65b75ed75e55599e63ca6b60db9ca/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2FDefaultModifierRegistry.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2FDefaultModifierRegistry.java?ref=653bc8b641d65b75ed75e55599e63ca6b60db9ca",
      "patch": "@@ -144,7 +144,8 @@ public void addArcusModifier() {\n             addModifier(memcachedClientModifier);\r\n \r\n             FrontCacheMemcachedClientModifier frontCacheMemcachedClientModifier = new FrontCacheMemcachedClientModifier(byteCodeInstrumentor, agent);\r\n-            addModifier(frontCacheMemcachedClientModifier);\r\n+//            \uad00\ub828 \uc218\uc815\uc5d0 \uc0ac\uc774\ub4dc \uc774\ud399\ud2b8\uac00 \uc788\uc774\uc11c \uc77c\ub2e8 disable\ud568.\r\n+//            addModifier(frontCacheMemcachedClientModifier);\r\n \r\n             if (arcus) {\r\n                 ArcusClientModifier arcusClientModifier = new ArcusClientModifier(byteCodeInstrumentor, agent);\r\n@@ -166,7 +167,8 @@ public void addArcusModifier() {\n             addModifier(operationFutureModifier);\r\n \r\n             FrontCacheGetFutureModifier frontCacheGetFutureModifier = new FrontCacheGetFutureModifier(byteCodeInstrumentor, agent);\r\n-            addModifier(frontCacheGetFutureModifier);\r\n+            //            \uad00\ub828 \uc218\uc815\uc5d0 \uc0ac\uc774\ub4dc \uc774\ud399\ud2b8\uac00 \uc788\uc774\uc11c \uc77c\ub2e8 disable\ud568.\r\n+//            addModifier(frontCacheGetFutureModifier);\r\n \r\n             // future modifier end ---------------------------------------------------\r\n \r",
      "parent_sha": "9cd249581e79b95396762eb24e3492a9e32d91c7"
    }
  },
  {
    "oid": "5fe28f6cd0f01c9a36d4d5e28a1ed1305691bb6a",
    "message": "[\uc815\ud604\uae38] [PROFILER-16] iBatis SqlMapClient \uc9c0\uc6d0\n\nRefined method scope\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@3784 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-05-02T05:12:40Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/5fe28f6cd0f01c9a36d4d5e28a1ed1305691bb6a",
    "details": {
      "sha": "7c142a33a7f55be817ccde69ff22a1b13f1e9b6d",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/orm/ibatis/filter/SqlMapClientMethodFilter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/5fe28f6cd0f01c9a36d4d5e28a1ed1305691bb6a/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Form%2Fibatis%2Ffilter%2FSqlMapClientMethodFilter.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/5fe28f6cd0f01c9a36d4d5e28a1ed1305691bb6a/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Form%2Fibatis%2Ffilter%2FSqlMapClientMethodFilter.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Form%2Fibatis%2Ffilter%2FSqlMapClientMethodFilter.java?ref=5fe28f6cd0f01c9a36d4d5e28a1ed1305691bb6a",
      "patch": "@@ -15,7 +15,7 @@ private static final Set<String> createWhiteListApi() {\n \t\treturn new HashSet<String>(Arrays.asList(IbatisInterfaceApi.sqlMapClientApis));\r\n \t}\r\n \t\r\n-\tprotected boolean shouldTrackMethod(String methodName) {\r\n+\tprotected final boolean shouldTrackMethod(String methodName) {\r\n \t\treturn WHITE_LIST_API.contains(methodName);\r\n \t}\r\n }\r",
      "parent_sha": "7884d426204ffe570ecdbb711cc3d417438a3bae"
    }
  },
  {
    "oid": "025cd471fd31542ae725ea2c399489d2b2bb598e",
    "message": "#71 profiler BO\uc5d0\uc11c \uba54\uc2dc\uc9c0 \ucc98\ub9ac \uac00\ub2a5\ud558\ub3c4\ub85d \ud568\n\n1. \ubc18\ud658\uac12 \uc798\ubabb\ud55c\uac83 \uc218\uc815",
    "date": "2014-08-13T09:49:34Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/025cd471fd31542ae725ea2c399489d2b2bb598e",
    "details": {
      "sha": "213b27828ec486b247b7f423f34ffa4a7806838b",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/receiver/CommandDispatcher.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/025cd471fd31542ae725ea2c399489d2b2bb598e/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Freceiver%2FCommandDispatcher.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/025cd471fd31542ae725ea2c399489d2b2bb598e/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Freceiver%2FCommandDispatcher.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Freceiver%2FCommandDispatcher.java?ref=025cd471fd31542ae725ea2c399489d2b2bb598e",
      "patch": "@@ -87,7 +87,7 @@ public void handleSend(SendPacket packet, Channel channel) {\n \t\tlogger.info(\"MessageReceive {} {}\", packet, channel);\r\n \t}\r\n \t\r\n-\tTBase deserialize(byte[] payload) {\r\n+\tprivate TBase deserialize(byte[] payload) {\r\n \t\tif (payload == null) {\r\n \t\t\tlogger.warn(\"Payload may not be null.\");\r\n \t\t\treturn null;\r\n@@ -104,7 +104,7 @@ TBase deserialize(byte[] payload) {\n     \treturn null;\r\n \t}\r\n \t\r\n-\tbyte[] serialize(TBase result) {\r\n+\tprivate byte[] serialize(TBase result) {\r\n \t\tif (result == null) {\r\n \t\t\tlogger.warn(\"tBase may not be null.\");\r\n \t\t\treturn null;\r\n@@ -113,6 +113,7 @@ byte[] serialize(TBase result) {\n     \ttry {\r\n \t\t\tHeaderTBaseSerializer serializer = serializerFactory.createSerializer();\r\n \t\t\tbyte[] payload = serializer.serialize(result);\r\n+\t\t\treturn payload;\r\n \t\t} catch (TException e) {\r\n \t\t\tlogger.warn(e.getMessage(), e);\r\n \t\t}\r",
      "parent_sha": "587819e5feac84bcb8353676fd99e7e106a11fe3"
    }
  },
  {
    "oid": "e9f39d830970690546fa3a3f4ed9b752bca2317c",
    "message": "[\uc720\uce58\uc218] [PINPOINT-30] CUBRID interceptor \ucd94\uac00.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-profiler-bootstrap/trunk@2051 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-07-31T07:46:06Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/e9f39d830970690546fa3a3f4ed9b752bca2317c",
    "details": {
      "sha": "d9ab90655c18b557557c129164529511247461b3",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/db/JDBCUrlParser.java",
      "status": "modified",
      "additions": 81,
      "deletions": 3,
      "changes": 84,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/e9f39d830970690546fa3a3f4ed9b752bca2317c/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2FJDBCUrlParser.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/e9f39d830970690546fa3a3f4ed9b752bca2317c/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2FJDBCUrlParser.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2FJDBCUrlParser.java?ref=e9f39d830970690546fa3a3f4ed9b752bca2317c",
      "patch": "@@ -1,5 +1,10 @@\n package com.nhn.pinpoint.profiler.modifier.db;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.regex.Matcher;\r\n+import java.util.regex.Pattern;\r\n+\r\n import com.nhn.pinpoint.common.ServiceType;\r\n import com.nhn.pinpoint.profiler.logging.Logger;\r\n import com.nhn.pinpoint.profiler.logging.LoggerFactory;\r\n@@ -8,9 +13,6 @@\n import com.nhn.pinpoint.profiler.modifier.db.oracle.OracleConnectionStringException;\r\n import com.nhn.pinpoint.profiler.modifier.db.oracle.OracleNetConnectionDescriptorParser;\r\n \r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n /**\r\n  *\r\n  */\r\n@@ -31,6 +33,9 @@ public DatabaseInfo parse(String url) {\n         if (driverTypeCheck(lowCaseURL, \"oracle\")) {\r\n             return parseOracle(url);\r\n         }\r\n+        if (driverTypeCheck(lowCaseURL, \"cubrid\")) {\r\n+        \treturn parseCubrid(url);\r\n+        }\r\n         return createUnknownDataBase(url);\r\n //        else if (url.indexOf(\"jdbc:oracle\") >= 0) {\r\n //            maker.lower().after(\"jdbc:oracle:\").after(':');\r\n@@ -187,6 +192,79 @@ private DatabaseInfo parseMysql(String url) {\n         String normalizedUrl = maker.clear().before('?').value();\r\n         return new DatabaseInfo(ServiceType.MYSQL, ServiceType.MYSQL_EXECUTE_QUERY, url, normalizedUrl, hostList, databaseId);\r\n     }\r\n+    \r\n+    /*\r\n+\tprivate DatabaseInfo parseCubrid(String url) {\r\n+\t\t// jdbc:cubrid:10.101.57.233:30102:pinpoint:::\r\n+\t\tStringMaker maker = new StringMaker(url);\r\n+\t\tmaker.after(\"jdbc:cubrid:\");\r\n+\t\t// 10.98.133.22:3306 replacation driver\uac19\uc740 \uacbd\uc6b0 n\uac1c\uac00 \uac00\ub2a5\ud560\ub4ef.\r\n+\t\t// mm db? \uc758 \uacbd\uc6b0\ub3c4 \uace0\ub824\ud574\uc57c \ub420\ub4ef\ud558\ub2e4.\r\n+\t\tString host = maker.after(\"//\").before('/').value();\r\n+\t\tList<String> hostList = new ArrayList<String>(1);\r\n+\t\thostList.add(host);\r\n+\t\t// String port = maker.next().after(':').before('/').value();\r\n+\r\n+\t\tString databaseId = maker.next().afterLast('/').before('?').value();\r\n+\t\tString normalizedUrl = maker.clear().before('?').value();\r\n+\t\t\r\n+\t\treturn new DatabaseInfo(ServiceType.CUBRID, ServiceType.CUBRID_EXECUTE_QUERY, url, normalizedUrl, hostList, databaseId);\r\n+\t}\r\n+\t*/\r\n+\t\r\n+\tprivate DatabaseInfo parseCubrid(String url) {\r\n+\t\tfinal String default_hostname = \"localhost\";\r\n+\t\tfinal int default_port = 30000;\r\n+\t\tfinal String default_user = \"public\";\r\n+\t\tfinal String default_password = \"\";\r\n+\r\n+\t\tfinal String URL_PATTERN = \"jdbc:cubrid(-oracle|-mysql)?:([a-zA-Z_0-9\\\\.-]*):([0-9]*):([^:]+):([^:]*):([^:]*):(\\\\?[a-zA-Z_0-9]+=[^&=?]+(&[a-zA-Z_0-9]+=[^&=?]+)*)?\";\r\n+\r\n+\t\tPattern pattern = Pattern.compile(URL_PATTERN, Pattern.CASE_INSENSITIVE);\r\n+\t\tMatcher matcher = pattern.matcher(url);\r\n+\r\n+\t\tif (!matcher.find()) {\r\n+\t\t\treturn createUnknownDataBase(url);\r\n+\t\t}\r\n+\r\n+\t\tString host = matcher.group(2);\r\n+\t\tString portString = matcher.group(3);\r\n+\t\tString db = matcher.group(4);\r\n+\t\tString user = matcher.group(5);\r\n+\t\tString pass = matcher.group(6);\r\n+\t\tString prop = matcher.group(7);\r\n+\t\tint port = default_port;\r\n+\r\n+\t\tString resolvedUrl;\r\n+\r\n+\t\tif (host == null || host.length() == 0) {\r\n+\t\t\thost = default_hostname;\r\n+\t\t}\r\n+\r\n+\t\tif (portString == null || portString.length() == 0) {\r\n+\t\t\tport = default_port;\r\n+\t\t} else {\r\n+\t\t\tport = Integer.parseInt(portString);\r\n+\t\t}\r\n+\r\n+\t\tif (user == null) {\r\n+\t\t\tuser = default_user;\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (pass == null) {\r\n+\t\t\tpass = default_password;\r\n+\t\t}\r\n+\r\n+\t\tresolvedUrl = \"jdbc:cubrid:\" + host + \":\" + port + \":\" + db + \":\" + user + \":********:\";\r\n+\r\n+\t\tStringMaker maker = new StringMaker(url);\r\n+\t\tString normalizedUrl = maker.clear().before('?').value();\r\n+\r\n+\t\tList<String> hostList = new ArrayList<String>(1);\r\n+\t\thostList.add(host);\r\n \r\n+\t\t// alt host\ub294 \uc81c\uc678.\r\n \r\n+\t\treturn new DatabaseInfo(ServiceType.CUBRID, ServiceType.CUBRID_EXECUTE_QUERY, url, normalizedUrl, hostList, db);\r\n+\t}\r\n }\r",
      "parent_sha": "1ca796369c46ac2b2321b4930f2da13c44fb34bf"
    }
  },
  {
    "oid": "c968b7fece37fa6352a0afdf5af52b9b4b4fa2dc",
    "message": "[\uc720\uce58\uc218] [NOBTS] \uc911\ubcf5\ub41c \ub85c\uadf8 \uc81c\uac70\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@4100 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-06-30T07:15:30Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/c968b7fece37fa6352a0afdf5af52b9b4b4fa2dc",
    "details": {
      "sha": "5c6c4fb0fb54938d2abcd0d722fe7ac6bab21f3c",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/bloc/handler/interceptor/ExecuteMethodInterceptor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/c968b7fece37fa6352a0afdf5af52b9b4b4fa2dc/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fbloc%2Fhandler%2Finterceptor%2FExecuteMethodInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/c968b7fece37fa6352a0afdf5af52b9b4b4fa2dc/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fbloc%2Fhandler%2Finterceptor%2FExecuteMethodInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fbloc%2Fhandler%2Finterceptor%2FExecuteMethodInterceptor.java?ref=c968b7fece37fa6352a0afdf5af52b9b4b4fa2dc",
      "patch": "@@ -57,27 +57,23 @@ public void before(Object target, Object[] args) {\n             TraceId traceId = populateTraceIdFromRequest(request);\n             Trace trace;\n             if (traceId != null) {\n-                if (isDebug) {\n-                    logger.debug(\"TraceID exist. continue trace. {} requestUrl:{}, remoteAddr:{}\", new Object[]{traceId, requestURL, remoteAddr});\n-                }\n                 trace = traceContext.continueTraceObject(traceId);\n                 if (!trace.canSampled()) {\n                     if (isDebug) {\n                         logger.debug(\"TraceID exist. camSampled is false. skip trace. traceId:{}, requestUrl:{}, remoteAddr:{}\", new Object[]{traceId, requestURL, remoteAddr});\n-                        return;\n                     }\n+                    return;\n                 } else {\n                     if (isDebug) {\n                         logger.debug(\"TraceID exist. continue trace. traceId:{}, requestUrl:{}, remoteAddr:{}\", new Object[]{traceId, requestURL, remoteAddr});\n                     }\n                 }\n             } else {\n-                if (isDebug) {\n-                    logger.debug(\"TraceID not exist. start new trace. {} requestUrl:{}, remoteAddr:{}\", new Object[]{traceId, requestURL, remoteAddr});\n-                }\n                 trace = traceContext.newTraceObject();\n                 if (!trace.canSampled()){\n-                    logger.debug(\"TraceID not exist. camSampled is false. skip trace. requestUrl:{}, remoteAddr:{}\", new Object[]{requestURL, remoteAddr});\n+                \tif (isDebug) {\n+                \t\tlogger.debug(\"TraceID not exist. camSampled is false. skip trace. requestUrl:{}, remoteAddr:{}\", new Object[]{requestURL, remoteAddr});\n+                \t}\n                     return;\n                 } else {\n                     if (isDebug) {",
      "parent_sha": "d39e46112888c562a18ba03882cf7a73d6ed0211"
    }
  },
  {
    "oid": "29ab8bead50540e20fe596149f7be511174cf732",
    "message": "[\uc815\ud604\uae38] [PROFILER-20] TestClassLoader\uc744 \uc0ac\uc6a9\ud558\ub294 JUnit ClassRunner \uc218\uc815\n\nJUnit \ud14c\uc2a4\ud2b8 \uc2e4\ud589 \ud6c4, currentThread\uc758 contextClassLoader \uc6d0\ubcf5\ud558\ub294 \ucf54\ub4dc \ucd94\uac00\n\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@3708 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-04-21T10:10:20Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/29ab8bead50540e20fe596149f7be511174cf732",
    "details": {
      "sha": "8748f1a2e016fe31da5b43568d29875c4aef1659",
      "filename": "src/test/java/com/nhn/pinpoint/profiler/junit4/PinpointJUnit4ClassRunner.java",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/29ab8bead50540e20fe596149f7be511174cf732/src%2Ftest%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fjunit4%2FPinpointJUnit4ClassRunner.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/29ab8bead50540e20fe596149f7be511174cf732/src%2Ftest%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fjunit4%2FPinpointJUnit4ClassRunner.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Ftest%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fjunit4%2FPinpointJUnit4ClassRunner.java?ref=29ab8bead50540e20fe596149f7be511174cf732",
      "patch": "@@ -9,6 +9,7 @@\n import org.junit.internal.runners.statements.Fail;\r\n import org.junit.internal.runners.statements.RunAfters;\r\n import org.junit.internal.runners.statements.RunBefores;\r\n+import org.junit.runner.notification.RunNotifier;\r\n import org.junit.runners.BlockJUnit4ClassRunner;\r\n import org.junit.runners.model.FrameworkMethod;\r\n import org.junit.runners.model.InitializationError;\r\n@@ -91,14 +92,23 @@ private final <T extends TestClassLoader> TestClassLoader createTestClassLoader(\n \t\t\tthrow new InitializationError(\"Error instantiating Test\");\r\n \t\t}\r\n \t}\r\n+\r\n+\t@Override\r\n+\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\r\n+\t\tClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();\r\n+\t\ttry {\r\n+\t\t\tThread.currentThread().setContextClassLoader(this.testClassLoader);\r\n+\t\t\tsuper.runChild(method, notifier);\r\n+\t\t} finally {\r\n+\t\t\tThread.currentThread().setContextClassLoader(originalClassLoader);\r\n+\t\t}\r\n+\t}\r\n \t\r\n \t@Override\r\n \tprotected Statement methodBlock(FrameworkMethod frameworkMethod) {\r\n-\t\tFrameworkMethod newFrameworkMethod = null;\r\n \t\ttry {\r\n-\t\t\tThread.currentThread().setContextClassLoader(this.testClassLoader);\r\n \t\t\tMethod newMethod = this.testContext.getTestClass().getJavaClass().getMethod(frameworkMethod.getName());\r\n-\t\t\tnewFrameworkMethod = new FrameworkMethod(newMethod);\r\n+\t\t\tFrameworkMethod newFrameworkMethod = new FrameworkMethod(newMethod);\r\n \t\t\treturn super.methodBlock(newFrameworkMethod);\r\n \t\t} catch (NoSuchMethodException e) {\r\n \t\t\treturn new Fail(e);\r",
      "parent_sha": "c5ce587ad2ebe73720085abdd3c57104bd5651f6"
    }
  },
  {
    "oid": "8dfb32cb90fb1a492094bca22480053ffaec3820",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] jdbcsope action\uc758 \ub85c\uadf8\ub808\ubca8 \uc870\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@2361 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-09-27T08:56:54Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/8dfb32cb90fb1a492094bca22480053ffaec3820",
    "details": {
      "sha": "5316d78162c368cbd6765f931a4c5a64ccde2ef7",
      "filename": "src/main/java/com/nhn/pinpoint/profiler/modifier/db/interceptor/JDBCScopeDelegateStaticInterceptor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/8dfb32cb90fb1a492094bca22480053ffaec3820/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2Finterceptor%2FJDBCScopeDelegateStaticInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/8dfb32cb90fb1a492094bca22480053ffaec3820/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2Finterceptor%2FJDBCScopeDelegateStaticInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fprofiler%2Fmodifier%2Fdb%2Finterceptor%2FJDBCScopeDelegateStaticInterceptor.java?ref=8dfb32cb90fb1a492094bca22480053ffaec3820",
      "patch": "@@ -13,7 +13,7 @@\n public class JDBCScopeDelegateStaticInterceptor implements StaticAroundInterceptor, TraceContextSupport {\r\n \r\n     private final PLogger logger = PLoggerFactory.getLogger(this.getClass());\r\n-    private final boolean isDebug = logger.isDebugEnabled();\r\n+    private final boolean isTrace = logger.isTraceEnabled();\r\n     private final StaticAroundInterceptor delegate;\r\n \r\n \r\n@@ -28,8 +28,8 @@ public JDBCScopeDelegateStaticInterceptor(StaticAroundInterceptor delegate) {\n     public void before(Object target, String className, String methodName, String parameterDescription, Object[] args) {\r\n         final int push = JDBCScope.push();\r\n         if (push != DepthScope.ZERO) {\r\n-            if (isDebug) {\r\n-                logger.debug(\"push bindValue scope. skip trace. {}\", delegate.getClass());\r\n+            if (isTrace) {\r\n+                logger.trace(\"push bindValue scope.  skip trace. level:{} {}\", push, delegate.getClass());\r\n             }\r\n             return;\r\n         }\r\n@@ -40,8 +40,8 @@ public void before(Object target, String className, String methodName, String pa\n     public void after(Object target, String className, String methodName, String parameterDescription, Object[] args, Object result) {\r\n         final int pop = JDBCScope.pop();\r\n         if (pop != DepthScope.ZERO) {\r\n-            if (isDebug) {\r\n-                logger.debug(\"pop bindValue scope. skip trace. {}\", delegate.getClass());\r\n+            if (isTrace) {\r\n+                logger.trace(\"pop bindValue scope. skip trace. level:{} {}\", pop, delegate.getClass());\r\n             }\r\n             return;\r\n         }\r",
      "parent_sha": "f50e179bd04679c85df7e29854235d4ed925ec50"
    }
  },
  {
    "oid": "09ec79f52773f98765ff70fc149eb040555d4726",
    "message": "[\uc720\uce58\uc218] [profiler-29] valid id check\ub85c\uc9c1 \ucd94\uac00. \ub85c\uadf8 \ubcc0\uacbd, author \ucd94\uac00.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-profiler-bootstrap/trunk@4051 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2014-06-18T09:49:51Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/09ec79f52773f98765ff70fc149eb040555d4726",
    "details": {
      "sha": "acc87ed70bf7b8bbe67412655d337a5bb3b0d0eb",
      "filename": "src/main/java/com/nhn/pinpoint/bootstrap/PinpointBootStrap.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/09ec79f52773f98765ff70fc149eb040555d4726/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FPinpointBootStrap.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/09ec79f52773f98765ff70fc149eb040555d4726/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FPinpointBootStrap.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FPinpointBootStrap.java?ref=09ec79f52773f98765ff70fc149eb040555d4726",
      "patch": "@@ -15,6 +15,7 @@\n \r\n /**\r\n  * @author emeroad\r\n+ * @author netspider\r\n  */\r\n public class PinpointBootStrap {\r\n \r\n@@ -116,7 +117,7 @@ private static boolean isValidId(String propertyName, int maxSize) {\n             value = value.trim();\r\n \r\n \t\t\tif (validIdPattern.matcher(value).find()) {\r\n-\t\t\t\tlogger.severe(\"invalid value. value can only contain alphanumeric, dot, dash and underscore. propertyName:\" + propertyName + \" propertyValue:\" + value);\r\n+\t\t\t\tlogger.severe(\"invalid Id. \" + propertyName + \" can only contain alphanumeric, dot, dash and underscore. value:\" + value);\r\n \t\t\t\treturn false;\r\n \t\t\t}\r\n             \r",
      "parent_sha": "11976df9762692a20050d56c9b3f54f3a1438a6c"
    }
  },
  {
    "oid": "73e9d6a0a33f90aa1f00933e102bbd6fa19b34cc",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] cacheupdate\ubd80\ubd84 \ub9ac\ud329\ud1a0\ub9c1, \ubcc4\ub3c4 class\ub85c \ubd84\ub9ac\ud568.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@2790 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-11-06T01:51:52Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/73e9d6a0a33f90aa1f00933e102bbd6fa19b34cc",
    "details": {
      "sha": "89d168d4f6f0b89a885366319daa1caacf88c909",
      "filename": "src/main/java/com/nhn/pinpoint/web/util/Stack.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/73e9d6a0a33f90aa1f00933e102bbd6fa19b34cc/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Futil%2FStack.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/73e9d6a0a33f90aa1f00933e102bbd6fa19b34cc/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Futil%2FStack.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Futil%2FStack.java?ref=73e9d6a0a33f90aa1f00933e102bbd6fa19b34cc",
      "patch": "@@ -3,7 +3,7 @@\n import java.util.LinkedList;\r\n \r\n /**\r\n- * @author\r\n+ * @author emeroad\r\n  */\r\n public class Stack<T> {\r\n \r",
      "parent_sha": "2d819034935f4f43a4d66aaa2370c36ae3d919ee"
    }
  },
  {
    "oid": "79a84112e4a6752b3094741dbf4eac7c154fa026",
    "message": "[#noissue] Fix typo createTrace.createTrace() -> traceFactory.createTrace",
    "date": "2020-08-31T23:12:55Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/79a84112e4a6752b3094741dbf4eac7c154fa026",
    "details": {
      "sha": "3cf574b8b26f41599cf917de7fb099ceead4b86c",
      "filename": "plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/interceptor/ConsumerRecordEntryPointInterceptor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/79a84112e4a6752b3094741dbf4eac7c154fa026/plugins%2Fkafka%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fkafka%2Finterceptor%2FConsumerRecordEntryPointInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/79a84112e4a6752b3094741dbf4eac7c154fa026/plugins%2Fkafka%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fkafka%2Finterceptor%2FConsumerRecordEntryPointInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Fkafka%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fkafka%2Finterceptor%2FConsumerRecordEntryPointInterceptor.java?ref=79a84112e4a6752b3094741dbf4eac7c154fa026",
      "patch": "@@ -95,12 +95,12 @@ protected Object getTargetParameter(Object[] args) {\n     }\n \n     private Trace createTrace(ConsumerRecord consumerRecord) {\n-        TraceFactoryProvider.TraceFactory createTrace = tracyFactoryReference.get();\n-        if (createTrace == null) {\n-            createTrace = TraceFactoryProvider.get(consumerRecord);\n-            tracyFactoryReference.compareAndSet(null, createTrace);\n+        TraceFactoryProvider.TraceFactory traceFactory = tracyFactoryReference.get();\n+        if (traceFactory == null) {\n+            traceFactory = TraceFactoryProvider.get(consumerRecord);\n+            tracyFactoryReference.compareAndSet(null, traceFactory);\n         }\n-        return createTrace.createTrace(traceContext, consumerRecord);\n+        return traceFactory.createTrace(traceContext, consumerRecord);\n     }\n \n     private static class TraceFactoryProvider {",
      "parent_sha": "b0b140dedd76fc55c44f5863eb628ff66663b444"
    }
  },
  {
    "oid": "3f4e159a665738371307efa5a7ff58fe09c309dc",
    "message": "[\uc720\uce58\uc218] [NOBTS] \uc11c\ubc84\ub9f5\uc758 terminal node \ud1b5\uacc4 \ub9de\uc9c0 \uc54a\ub294 \ud604\uc0c1 \uc218\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-commons/trunk@2376 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-10-01T07:38:53Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/3f4e159a665738371307efa5a7ff58fe09c309dc",
    "details": {
      "sha": "3e049de7151324116228d57380ad74cfaede3189",
      "filename": "src/main/java/com/nhn/pinpoint/common/bo/AgentInfoBo.java",
      "status": "modified",
      "additions": 20,
      "deletions": 4,
      "changes": 24,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/3f4e159a665738371307efa5a7ff58fe09c309dc/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FAgentInfoBo.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/3f4e159a665738371307efa5a7ff58fe09c309dc/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FAgentInfoBo.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fcommon%2Fbo%2FAgentInfoBo.java?ref=3f4e159a665738371307efa5a7ff58fe09c309dc",
      "patch": "@@ -1,5 +1,6 @@\n package com.nhn.pinpoint.common.bo;\r\n \r\n+import com.nhn.pinpoint.common.ServiceType;\r\n import com.nhn.pinpoint.common.buffer.AutomaticBuffer;\r\n import com.nhn.pinpoint.common.buffer.Buffer;\r\n import com.nhn.pinpoint.common.buffer.FixedBuffer;\r\n@@ -17,6 +18,7 @@ public class AgentInfoBo implements Comparable<AgentInfoBo> {\n     private boolean isAlive;\r\n     private long startTime;\r\n     private short identifier;\r\n+    private ServiceType serviceType;\r\n \r\n     public AgentInfoBo(AgentInfo agentInfo) {\r\n     \tthis.ip = agentInfo.getIp();\r\n@@ -27,6 +29,7 @@ public AgentInfoBo(AgentInfo agentInfo) {\n         this.isAlive = agentInfo.isIsAlive();\r\n         this.startTime = agentInfo.getTimestamp();\r\n         this.identifier = agentInfo.getIdentifier();\r\n+        this.serviceType = ServiceType.findServiceType(agentInfo.getServiceType());\r\n     }\r\n \r\n     public AgentInfoBo() {\r\n@@ -92,18 +95,27 @@ public short getIdentifier() {\n         return identifier;\r\n     }\r\n \r\n-    public void setIdentifier(short identifier) {\r\n-        this.identifier = identifier;\r\n-    }\r\n+\tpublic void setIdentifier(short identifier) {\r\n+\t\tthis.identifier = identifier;\r\n+\t}\r\n+\r\n+\tpublic ServiceType getServiceType() {\r\n+\t\treturn serviceType;\r\n+\t}\r\n+\r\n+\tpublic void setServiceType(ServiceType serviceType) {\r\n+\t\tthis.serviceType = serviceType;\r\n+\t}\r\n \r\n-    public byte[] writeValue() {\r\n+\tpublic byte[] writeValue() {\r\n         Buffer buffer = new AutomaticBuffer();\r\n         buffer.putPrefixedString(this.getIp());\r\n         buffer.putPrefixedString(this.getHostname());\r\n         buffer.putPrefixedString(this.getPorts());\r\n         buffer.putPrefixedString(this.getApplicationName());\r\n         buffer.put(this.isAlive());\r\n         buffer.put(this.getIdentifier());\r\n+        buffer.put(this.serviceType.getCode());\r\n         return buffer.getBuffer();\r\n     }\r\n \r\n@@ -115,6 +127,7 @@ public int readValue(byte[] value) {\n         this.applicationName = buffer.readPrefixedString();\r\n         this.isAlive = buffer.readBoolean();\r\n         this.identifier = buffer.readShort();\r\n+        this.serviceType = ServiceType.findServiceType(buffer.readShort());\r\n         return buffer.getOffset();\r\n     }\r\n     \r\n@@ -148,8 +161,11 @@ public String getJson() {\n \t\t\r\n \t\tsb.append(\"{\");\r\n \t\tsb.append(\"\\t\\\"ip\\\" : \\\"\").append(ip).append(\"\\\",\");\r\n+\t\tsb.append(\"\\t\\\"hostname\\\" : \\\"\").append(hostname).append(\"\\\",\");\r\n \t\tsb.append(\"\\t\\\"ports\\\" : \\\"\").append(ports).append(\"\\\",\");\r\n \t\tsb.append(\"\\t\\\"agentId\\\" : \\\"\").append(agentId).append(\"\\\",\");\r\n+\t\tsb.append(\"\\t\\\"applicationName\\\" : \\\"\").append(applicationName).append(\"\\\",\");\r\n+\t\tsb.append(\"\\t\\\"serviceType\\\" : \\\"\").append(serviceType).append(\"\\\",\");\r\n \t\tsb.append(\"\\t\\\"uptime\\\" : \\\"\").append(startTime).append(\"\\\"\");\r\n \t\tsb.append(\"}\");\r\n \t\t\r",
      "parent_sha": "8555539845ead5c2d5645b42bef8d6d80c9cd39d"
    }
  },
  {
    "oid": "572f309e287e965085558219587e36cf0ad3977b",
    "message": "[#11905] Fixing invalid message handlers",
    "date": "2025-01-17T04:17:14Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/572f309e287e965085558219587e36cf0ad3977b",
    "details": {
      "sha": "53669e097537aa6ba924fc4221e9ecfbc8a2aaf0",
      "filename": "collector/src/main/java/com/navercorp/pinpoint/collector/receiver/SpanDispatchHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/572f309e287e965085558219587e36cf0ad3977b/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2FSpanDispatchHandler.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/572f309e287e965085558219587e36cf0ad3977b/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2FSpanDispatchHandler.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Freceiver%2FSpanDispatchHandler.java?ref=572f309e287e965085558219587e36cf0ad3977b",
      "patch": "@@ -41,9 +41,9 @@ public SpanDispatchHandler(SimpleHandler<REQ> spanDataHandler, SimpleHandler<REQ\n     private SimpleHandler<REQ> getSimpleHandler(Header header) {\n         final int type = header.getType();\n         if (type == MessageType.SPAN.getCode()) {\n-            return spanChunkHandler;\n-        } else if (type == MessageType.SPANCHUNK.getCode()) {\n             return spanDataHandler;\n+        } else if (type == MessageType.SPANCHUNK.getCode()) {\n+            return spanChunkHandler;\n         }\n         throw new UnsupportedOperationException(\"unsupported header:\" + header);\n     }",
      "parent_sha": "a4a110c2ea846676723da34c2a6fb597f2bb7a25"
    }
  },
  {
    "oid": "67c4600569328fe9c8a215cd488fff3e41a76ba2",
    "message": "[#10776] Use the SamplingInterval value as the minimum time slotwhen searching data.",
    "date": "2024-11-18T07:14:00Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/67c4600569328fe9c8a215cd488fff3e41a76ba2",
    "details": {
      "sha": "52eeec8302488a85d2d002d64fe643591374d178",
      "filename": "otlpmetric/otlpmetric-web/src/main/java/com/navercorp/pinpoint/otlp/web/controller/OpenTelemetryMetricController.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/67c4600569328fe9c8a215cd488fff3e41a76ba2/otlpmetric%2Fotlpmetric-web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fotlp%2Fweb%2Fcontroller%2FOpenTelemetryMetricController.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/67c4600569328fe9c8a215cd488fff3e41a76ba2/otlpmetric%2Fotlpmetric-web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fotlp%2Fweb%2Fcontroller%2FOpenTelemetryMetricController.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/otlpmetric%2Fotlpmetric-web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fotlp%2Fweb%2Fcontroller%2FOpenTelemetryMetricController.java?ref=67c4600569328fe9c8a215cd488fff3e41a76ba2",
      "patch": "@@ -44,11 +44,11 @@\n \n import java.util.List;\n import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n \n @RestController\n @RequestMapping(value = \"/api/otlp\")\n public class OpenTelemetryMetricController {\n-    private final TimeWindowSampler DEFAULT_TIME_WINDOW_SAMPLER_30S = new TimeWindowSlotCentricSampler(30000L, 200);\n     private final OtlpMetricWebService otlpMetricWebService;\n     private static final String DEFAULT_SERVICE_NAME = \"\";\n     @NotBlank\n@@ -110,7 +110,8 @@ public MetricDataView getMetricChartDataV3(@Valid @RequestBody MetricDataRequest\n \n         Range range = Range.between(parameter.getFrom(), parameter.getTo());\n         rangeValidator.validate(range.getFromInstant(), range.getToInstant());\n-        TimeWindow timeWindow = new TimeWindow(range, DEFAULT_TIME_WINDOW_SAMPLER_30S);\n+        TimeWindowSlotCentricSampler timeSampler = new TimeWindowSlotCentricSampler(TimeUnit.SECONDS.toMillis(parameter.getSamplingInterval()), 200);\n+        TimeWindow timeWindow = new TimeWindow(range, timeSampler);\n \n         MetricData metricData = otlpMetricWebService.getMetricData(tenantId, DEFAULT_SERVICE_NAME, parameter.getApplicationName(), parameter.getAgentId(), parameter.getMetricGroupName(), parameter.getMetricName(), primaryForFieldAndTagRelation, tagGroupList, fieldNameList, chartType, aggregationFunction, timeWindow);\n         return new MetricDataView(metricData);",
      "parent_sha": "94f7cfd5ba0d44380f7ca434c49e17289977d859"
    }
  },
  {
    "oid": "2a971fba28581c9b9b1ad8a31af5d36b0b16278b",
    "message": "[\uc720\uce58\uc218] [NOBTS] transaction info\uc758 \uc11c\ubc84\ub9f5\uc5d0\uc11c WAS\ub294 agentid\uac00 \ubcf4\uc774\ub3c4\ub85d \ubcc0\uacbd.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@1939 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-07-04T08:00:08Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/2a971fba28581c9b9b1ad8a31af5d36b0b16278b",
    "details": {
      "sha": "a79123be75f3d76bbd5745cbdbb9578c9a045f22",
      "filename": "src/main/java/com/nhn/pinpoint/web/calltree/server/AgentIdNodeSelector.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/2a971fba28581c9b9b1ad8a31af5d36b0b16278b/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fcalltree%2Fserver%2FAgentIdNodeSelector.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/2a971fba28581c9b9b1ad8a31af5d36b0b16278b/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fcalltree%2Fserver%2FAgentIdNodeSelector.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Fcalltree%2Fserver%2FAgentIdNodeSelector.java?ref=2a971fba28581c9b9b1ad8a31af5d36b0b16278b",
      "patch": "@@ -10,7 +10,7 @@ public class AgentIdNodeSelector implements NodeSelector {\n \r\n     @Override\r\n     public String getServerId(SpanBo span) {\r\n-        return span.getEndPoint();\r\n+        return span.getAgentId();\r\n     }\r\n \r\n     @Override\r",
      "parent_sha": "2a4fff98c81edf9591b59cccd1924a0de7ffbd45"
    }
  },
  {
    "oid": "46aa16cb57121b275782e22dfc09a88adb63f211",
    "message": "add log message",
    "date": "2016-01-05T08:10:14Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/46aa16cb57121b275782e22dfc09a88adb63f211",
    "details": {
      "sha": "d84cdb2fb2c68cad0bcb0c71d01361cc6ec577ac",
      "filename": "collector/src/main/java/com/navercorp/pinpoint/collector/dao/hbase/filter/SequenceSpanEventFilter.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/46aa16cb57121b275782e22dfc09a88adb63f211/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2Ffilter%2FSequenceSpanEventFilter.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/46aa16cb57121b275782e22dfc09a88adb63f211/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2Ffilter%2FSequenceSpanEventFilter.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/collector%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcollector%2Fdao%2Fhbase%2Ffilter%2FSequenceSpanEventFilter.java?ref=46aa16cb57121b275782e22dfc09a88adb63f211",
      "patch": "@@ -18,14 +18,17 @@\n package com.navercorp.pinpoint.collector.dao.hbase.filter;\n \n import com.navercorp.pinpoint.common.bo.SpanEventBo;\n-import com.navercorp.pinpoint.common.util.BytesUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n /**\n  * @author Woonduk Kang(emeroad)\n  */\n public class SequenceSpanEventFilter implements SpanEventFilter {\n \n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n     public static final int MAX_SEQUENCE = Short.MAX_VALUE;\n     public static final int DEFAULT_SEQUENCE_LIMIT = 1024*10;\n \n@@ -49,6 +52,9 @@ public boolean filter(SpanEventBo spanEventBo) {\n         }\n         final int sequence = spanEventBo.getSequence();\n         if (sequence > sequenceLimit) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"discard spanEvent:{}\", spanEventBo);\n+            }\n             return REJECT;\n         }\n         return ACCEPT;",
      "parent_sha": "6ec6dc045ed3b403d05765ce5f9f919ef11d6085"
    }
  },
  {
    "oid": "65fa0f752a9472a8fbf5dd8760bc0cb627d041f5",
    "message": "[#noissue] Remove duplicate code of FilteredMapBuilder",
    "date": "2022-04-21T03:49:00Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/65fa0f752a9472a8fbf5dd8760bc0cb627d041f5",
    "details": {
      "sha": "5c7d87843dfb3a04555b00ce008f1585e4c7e64f",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/service/map/FilteredMapBuilder.java",
      "status": "modified",
      "additions": 20,
      "deletions": 18,
      "changes": 38,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/65fa0f752a9472a8fbf5dd8760bc0cb627d041f5/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fservice%2Fmap%2FFilteredMapBuilder.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/65fa0f752a9472a8fbf5dd8760bc0cb627d041f5/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fservice%2Fmap%2FFilteredMapBuilder.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fservice%2Fmap%2FFilteredMapBuilder.java?ref=65fa0f752a9472a8fbf5dd8760bc0cb627d041f5",
      "patch": "@@ -119,42 +119,27 @@ public FilteredMapBuilder addTransaction(List<SpanBo> transaction) {\n                 continue;\n             }\n \n-            final short slotTime = getHistogramSlotTime(span, spanApplication.getServiceType());\n-            final HistogramSchema histogramSchema = spanApplication.getServiceType().getHistogramSchema();\n-            final short sumElapsedSlotTime = histogramSchema.getSumStatSlot().getSlotTime();\n-            final short maxElapsedSlotTime = histogramSchema.getMaxStatSlot().getSlotTime();\n-            final int elapsed = span.getElapsed();\n-            // might need to reconsider using collector's accept time for link statistics.\n-            // we need to convert to time window's timestamp. If not, it may lead to OOM due to mismatch in timeslots.\n-            long timestamp = timeWindow.refineTimestamp(span.getCollectorAcceptTime());\n-\n             if (parentApplication.getServiceType().isUser()) {\n                 // Outbound data\n                 if (logger.isTraceEnabled()) {\n                     logger.trace(\"span user:{} {} -> span:{} {}\", parentApplication, span.getAgentId(), spanApplication, span.getAgentId());\n                 }\n                 final LinkDataMap sourceLinkData = linkDataDuplexMap.getSourceLinkDataMap();\n-                sourceLinkData.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, slotTime, 1);\n-                sourceLinkData.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, maxElapsedSlotTime, elapsed);\n-                sourceLinkData.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, sumElapsedSlotTime, elapsed);\n+                addLinkData(sourceLinkData, span, parentApplication, spanApplication);\n \n                 if (logger.isTraceEnabled()) {\n                     logger.trace(\"span target user:{} {} -> span:{} {}\", parentApplication, span.getAgentId(), spanApplication, span.getAgentId());\n                 }\n                 // Inbound data\n                 final LinkDataMap targetLinkDataMap = linkDataDuplexMap.getTargetLinkDataMap();\n-                targetLinkDataMap.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, slotTime, 1);\n-                targetLinkDataMap.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, maxElapsedSlotTime, elapsed);\n-                targetLinkDataMap.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, sumElapsedSlotTime, elapsed);\n+                addLinkData(targetLinkDataMap, span, parentApplication, spanApplication);\n             } else {\n                 // Inbound data\n                 if (logger.isTraceEnabled()) {\n                     logger.trace(\"span target parent:{} {} -> span:{} {}\", parentApplication, span.getAgentId(), spanApplication, span.getAgentId());\n                 }\n                 final LinkDataMap targetLinkDataMap = linkDataDuplexMap.getTargetLinkDataMap();\n-                targetLinkDataMap.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, slotTime, 1);\n-                targetLinkDataMap.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, maxElapsedSlotTime, elapsed);\n-                targetLinkDataMap.addLinkData(parentApplication, span.getAgentId(), spanApplication, span.getAgentId(), timestamp, sumElapsedSlotTime, elapsed);\n+                addLinkData(targetLinkDataMap, span, parentApplication, spanApplication);\n             }\n \n             addDot(span, spanApplication);\n@@ -168,6 +153,23 @@ public FilteredMapBuilder addTransaction(List<SpanBo> transaction) {\n         return this;\n     }\n \n+    private void addLinkData(LinkDataMap linkDataMap, SpanBo span, Application parentApplication, Application spanApplication) {\n+        final short slotTime = getHistogramSlotTime(span, spanApplication.getServiceType());\n+        // might need to reconsider using collector's accept time for link statistics.\n+        // we need to convert to time window's timestamp. If not, it may lead to OOM due to mismatch in timeslots.\n+        long timestamp = timeWindow.refineTimestamp(span.getCollectorAcceptTime());\n+\n+        final String spanAgentId = span.getAgentId();\n+        linkDataMap.addLinkData(parentApplication, spanAgentId, spanApplication, spanAgentId, timestamp, slotTime, 1);\n+\n+        final HistogramSchema histogramSchema = spanApplication.getServiceType().getHistogramSchema();\n+        final short sumElapsedSlotTime = histogramSchema.getSumStatSlot().getSlotTime();\n+        final short maxElapsedSlotTime = histogramSchema.getMaxStatSlot().getSlotTime();\n+        final int elapsed = span.getElapsed();\n+        linkDataMap.addLinkData(parentApplication, spanAgentId, spanApplication, spanAgentId, timestamp, maxElapsedSlotTime, elapsed);\n+        linkDataMap.addLinkData(parentApplication, spanAgentId, spanApplication, spanAgentId, timestamp, sumElapsedSlotTime, elapsed);\n+    }\n+\n     private void addDot(SpanBo span, Application srcApplication) {\n         final Dot dot = this.dotExtractor.newDot(span);\n         this.dotExtractor.addDot(srcApplication, dot);",
      "parent_sha": "a1ee7d309e211cfbdb50b7997aa652635302d909"
    }
  },
  {
    "oid": "ca3a997d6cb9dd73df952568e85468616904cb9a",
    "message": "spring plugin, trace async task executor submitListenable",
    "date": "2021-05-06T08:53:48Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/ca3a997d6cb9dd73df952568e85468616904cb9a",
    "details": {
      "sha": "d86baf7a4308fc45852e8fe2d3a20d1666701761",
      "filename": "plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/async/SpringAsyncPlugin.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/ca3a997d6cb9dd73df952568e85468616904cb9a/plugins%2Fspring%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fasync%2FSpringAsyncPlugin.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/ca3a997d6cb9dd73df952568e85468616904cb9a/plugins%2Fspring%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fasync%2FSpringAsyncPlugin.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Fspring%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fasync%2FSpringAsyncPlugin.java?ref=ca3a997d6cb9dd73df952568e85468616904cb9a",
      "patch": "@@ -99,11 +99,18 @@ public static class AsyncTaskExecutorTransform implements TransformCallback {\n         @Override\n         public byte[] doInTransform(Instrumentor instrumentor, ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws InstrumentException {\n             final InstrumentClass target = instrumentor.getInstrumentClass(loader, className, classfileBuffer);\n-            final InstrumentMethod submitMethod = target.getDeclaredMethod(\"submit\", \"java.util.concurrent.Callable\");\n+            final String callable = \"java.util.concurrent.Callable\";\n+\n+            final InstrumentMethod submitMethod = target.getDeclaredMethod(\"submit\", callable);\n             if (submitMethod != null) {\n                 submitMethod.addScopedInterceptor(AsyncTaskExecutorSubmitInterceptor.class, SpringAsyncConstants.ASYNC_TASK_EXECUTOR_SCOPE);\n             }\n \n+            final InstrumentMethod submitListenableMethod = target.getDeclaredMethod(\"submitListenable\", callable);\n+            if (submitListenableMethod != null) {\n+                submitListenableMethod.addScopedInterceptor(AsyncTaskExecutorSubmitInterceptor.class, SpringAsyncConstants.ASYNC_TASK_EXECUTOR_SCOPE);\n+            }\n+\n             return target.toBytecode();\n         }\n     }",
      "parent_sha": "886cee8a4c2dd16ea1942845fe59963d12aea7d6"
    }
  },
  {
    "oid": "f00ad0335ca7c7c265d27bff77774097365fcd09",
    "message": "[#1283] fix findbug",
    "date": "2015-12-01T06:39:31Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/f00ad0335ca7c7c265d27bff77774097365fcd09",
    "details": {
      "sha": "db42f09e415c58c7228abd420f0c9021fdda9885",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/controller/UserGroupController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/f00ad0335ca7c7c265d27bff77774097365fcd09/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FUserGroupController.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/f00ad0335ca7c7c265d27bff77774097365fcd09/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FUserGroupController.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FUserGroupController.java?ref=f00ad0335ca7c7c265d27bff77774097365fcd09",
      "patch": "@@ -127,7 +127,7 @@ public Map<String, String> updateUserGroup(@RequestBody UserGroup userGroup) {\n     @RequestMapping(value = \"/member\", method = RequestMethod.POST)\n     @ResponseBody\n     public Map<String, String> insertUserGroupMember(@RequestBody UserGroupMember userGroupMember) {\n-        if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getMemberId())) {\n+        if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getUserGroupId())) {\n             Map<String, String> result = new HashMap<>();\n             result.put(\"errorCode\", \"500\");\n             result.put(\"errorMessage\", \"there is not userGroupId or memberId in params to insert user group member\");",
      "parent_sha": "a72d5fe17a90fbad870d750178ee3710c9625c81"
    }
  },
  {
    "oid": "f17e38b18226bb3a67d3162704011f0a3a7a2cad",
    "message": "[\uc720\uce58\uc218] [NOBTS] modified\n\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@629 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2012-09-12T08:47:20Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/f17e38b18226bb3a67d3162704011f0a3a7a2cad",
    "details": {
      "sha": "b38391a835b82d66043e401f8beda374b4f7afdd",
      "filename": "src/main/java/com/profiler/sender/AgentInfoSender.java",
      "status": "modified",
      "additions": 40,
      "deletions": 37,
      "changes": 77,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/f17e38b18226bb3a67d3162704011f0a3a7a2cad/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fsender%2FAgentInfoSender.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/f17e38b18226bb3a67d3162704011f0a3a7a2cad/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fsender%2FAgentInfoSender.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Fsender%2FAgentInfoSender.java?ref=f17e38b18226bb3a67d3162704011f0a3a7a2cad",
      "patch": "@@ -20,7 +20,7 @@ public AgentInfoSender(boolean isAgentStart) {\n \t}\n \n \tpublic void run() {\n-        logger.info(\"send agent info\");\n+\t\tlogger.info(\"send agent info\");\n \n \t\tif (isAgentStart) {\n \t\t\tsendAgentStartInfo();\n@@ -36,21 +36,21 @@ private void sendAgentStopInfo() {\n \t\t\tObjectOutputStream stream = new ObjectOutputStream(requestSocket.getOutputStream());\n \t\t\tAgentInfoDTO dto = new AgentInfoDTO();\n \t\t\tdto.setIsDead();\n-            if (logger.isLoggable(Level.INFO)) {\n-\t\t\t    logger.info(\"send agent stop info. \" + dto.toString());\n-            }\n+\t\t\tif (logger.isLoggable(Level.INFO)) {\n+\t\t\t\tlogger.info(\"send agent stop info. \" + dto.toString());\n+\t\t\t}\n \n \t\t\tstream.writeObject(dto);\n \t\t\tstream.close();\n \n-            if (logger.isLoggable(Level.INFO)){\n-                logger.info(\"Agent Stopped message is sent. \" + dto.toString());\n-            }\n+\t\t\tif (logger.isLoggable(Level.INFO)) {\n+\t\t\t\tlogger.info(\"Agent Stopped message is sent. \" + dto.toString());\n+\t\t\t}\n \n \t\t} catch (Exception e) {\n-            if (logger.isLoggable(Level.WARNING)) {\n-\t\t\t    logger.log(Level.WARNING, \"AgentInfoSender Exception occured:\" + e.getMessage(), e);\n-            }\n+\t\t\tif (logger.isLoggable(Level.WARNING)) {\n+\t\t\t\tlogger.log(Level.WARNING, \"AgentInfoSender Exception occured:\" + e.getMessage(), e);\n+\t\t\t}\n \t\t} finally {\n \t\t\tcloseSocket();\n \t\t}\n@@ -69,12 +69,11 @@ private void sendAgentStartInfo() {\n \t\t\tObjectOutputStream stream = new ObjectOutputStream(requestSocket.getOutputStream());\n \t\t\tAgentInfoDTO dto = new AgentInfoDTO();\n \n-            if (logger.isLoggable(Level.INFO)) {\n-                logger.info(\"send agent startup info. \" + dto.toString());\n-            }\n-\n+\t\t\tif (logger.isLoggable(Level.INFO)) {\n+\t\t\t\tlogger.info(\"send agent startup info. \" + dto.toString());\n+\t\t\t}\n \n-            stream.writeObject(dto);\n+\t\t\tstream.writeObject(dto);\n \t\t\tstream.close();\n \t\t} catch (Exception e) {\n \t\t\te.printStackTrace();\n@@ -87,39 +86,43 @@ private void sendAgentStartInfo() {\n \n \tprivate boolean connectToServer() {\n \t\ttry {\n-            if (logger.isLoggable(Level.INFO)) {\n-                logger.info(\"Trying to connect server. \" + TomcatProfilerConfig.SERVER_IP + \":\" + TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT);\n-            }\n-            requestSocket = new Socket(TomcatProfilerConfig.SERVER_IP, TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT);\n-            // TODO timeout \ucc98\ub9ac\uac00 \uc5c6\uc74c. api\ub97c \ubcc0\uacbd\ud574\uc57c \ub420\ub4ef.\n-            if (logger.isLoggable(Level.INFO)) {\n-                logger.info(\"Connected to server. \" + TomcatProfilerConfig.SERVER_IP + \":\" + TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT);\n-            }\n-\n-            return false;\n+\t\t\tif (logger.isLoggable(Level.INFO)) {\n+\t\t\t\tlogger.info(\"Trying to connect server. \" + TomcatProfilerConfig.SERVER_IP + \":\" + TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT);\n+\t\t\t}\n+\t\t\trequestSocket = new Socket(TomcatProfilerConfig.SERVER_IP, TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT);\n+\t\t\t// TODO timeout \ucc98\ub9ac\uac00 \uc5c6\uc74c. api\ub97c \ubcc0\uacbd\ud574\uc57c \ub420\ub4ef.\n+\t\t\tif (logger.isLoggable(Level.INFO)) {\n+\t\t\t\tlogger.info(\"Connected to server. \" + TomcatProfilerConfig.SERVER_IP + \":\" + TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT);\n+\t\t\t}\n+\n+\t\t\treturn false;\n \t\t} catch (java.net.ConnectException ce) {\n \n-            if (logger.isLoggable(Level.SEVERE)) {\n-                logger.log(Level.SEVERE, \"Connect to TomcatProfiler server is failed. \" + TomcatProfilerConfig.SERVER_IP + \":\" + TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT, ce);\n-            }\n+\t\t\tif (logger.isLoggable(Level.SEVERE)) {\n+\t\t\t\tlogger.log(Level.SEVERE, \"Connect to TomcatProfiler server is failed. \" + TomcatProfilerConfig.SERVER_IP + \":\" + TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT, ce);\n+\t\t\t}\n \n-            return true;\n+\t\t\treturn true;\n \t\t} catch (Exception e) {\n-             if (logger.isLoggable(Level.SEVERE)) {\n-                logger.log(Level.SEVERE, \"Connect to TomcatProfiler server is failed. \" + TomcatProfilerConfig.SERVER_IP + \":\" + TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT, e);\n-            }\n+\t\t\tif (logger.isLoggable(Level.SEVERE)) {\n+\t\t\t\tlogger.log(Level.SEVERE, \"Connect to TomcatProfiler server is failed. \" + TomcatProfilerConfig.SERVER_IP + \":\" + TomcatProfilerConfig.SERVER_TCP_LISTEN_PORT, e);\n+\t\t\t}\n \t\t\treturn true;\n \t\t}\n \t}\n \n \tprivate void closeSocket() {\n \t\ttry {\n-\t\t\trequestSocket.close();\n-\t\t\tlogger.info(\"TCP RequestSocket is closed\");\n+\t\t\tif (requestSocket != null) {\n+\t\t\t\trequestSocket.close();\n+\t\t\t\tlogger.info(\"TCP RequestSocket is closed\");\n+\t\t\t} else {\n+\t\t\t\tlogger.info(\"TCP RequestSocket is already closed\");\n+\t\t\t}\n \t\t} catch (Exception e) {\n-            if (logger.isLoggable(Level.WARNING)) {\n-\t\t\t    logger.log(Level.WARNING, \"closeSocket(). \" + e.getMessage(), e);\n-            }\n+\t\t\tif (logger.isLoggable(Level.WARNING)) {\n+\t\t\t\tlogger.log(Level.WARNING, \"closeSocket(). \" + e.getMessage(), e);\n+\t\t\t}\n \t\t}\n \t}\n }",
      "parent_sha": "32fc52dbe94f726fdca1dc639465e2fb9ca4d28d"
    }
  },
  {
    "oid": "c4372a03040778ae22c4ce536f73a4cd2c0337d4",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] id \uc0ac\uc774\uc988 \uc798\ubabb \ub418\uc5c8\uc744 \uacbd\uc6b0 \ub85c\uadf8 \uba54\uc2dc\uc9c0\ub97c \ucd5c\uace0 \ub808\ubca8\ub85c \ubcc0\uacbd. id\uac00 \uc5c6\uc744 \uacbd\uc6b0\ub3c4 agent\uac00 \uc2dc\uc791\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud568.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-profiler-bootstrap/trunk@2452 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-10-07T09:23:04Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/c4372a03040778ae22c4ce536f73a4cd2c0337d4",
    "details": {
      "sha": "24102e00c0bb851c05f0f93383d8e1559d7b6564",
      "filename": "src/main/java/com/nhn/pinpoint/bootstrap/PinpointBootStrap.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/c4372a03040778ae22c4ce536f73a4cd2c0337d4/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FPinpointBootStrap.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/c4372a03040778ae22c4ce536f73a4cd2c0337d4/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FPinpointBootStrap.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fbootstrap%2FPinpointBootStrap.java?ref=c4372a03040778ae22c4ce536f73a4cd2c0337d4",
      "patch": "@@ -62,32 +62,36 @@ public static void premain(String agentArgs, Instrumentation instrumentation) {\n             List<URL> libUrlList = resolveLib(classPathResolver);\r\n             AgentClassLoader agentClassLoader = new AgentClassLoader(libUrlList.toArray(new URL[libUrlList.size()]));\r\n             agentClassLoader.setBootClass(BOOT_CLASS);\r\n+            logger.info(\"pinpoint agent start.\");\r\n             agentClassLoader.boot(agentArgs, instrumentation, profilerConfig);\r\n-\r\n+            logger.info(\"pinpoint agent start success.\");\r\n         } catch (Exception e) {\r\n             logger.log(Level.SEVERE, ProductInfo.CAMEL_NAME + \" start fail. Caused:\" + e.getMessage(), e);\r\n         }\r\n \r\n     }\r\n \r\n     private static boolean checkProfilerIdSize(String propertyName, int maxSize) {\r\n-        logger.info(\"check \" + propertyName);\r\n+        logger.info(\"check -D\" + propertyName);\r\n         final String value = System.getProperty(propertyName);\r\n         if (value != null) {\r\n             final byte[] bytes;\r\n             try {\r\n                 bytes = toBytes(value);\r\n             } catch (UnsupportedEncodingException e) {\r\n-                logger.warning(\"toBytes() fail. propertyName:\" + propertyName + \" propertyValue:\" + value);\r\n+                logger.severe(\"toBytes() fail. propertyName:\" + propertyName + \" propertyValue:\" + value);\r\n                 return false;\r\n             }\r\n             if (bytes.length > maxSize) {\r\n-                logger.warning(\"invalid \" + propertyName + \". too large bytes. length:\" + bytes.length + \" value:\" + value);\r\n+                logger.severe(\"invalid \" + propertyName + \". too large bytes. length:\" + bytes.length + \" value:\" + value);\r\n                 return false;\r\n             }\r\n+            logger.info(\"check success. -D\" + propertyName + \":\" + value);\r\n+            return true;\r\n+        } else {\r\n+            logger.severe(\"-D\" + propertyName + \" is null.\");\r\n+            return false;\r\n         }\r\n-        logger.info(\"check success. \" + propertyName + \":\" + value);\r\n-        return true;\r\n     }\r\n \r\n     private static byte[] toBytes(String property) throws UnsupportedEncodingException {\r",
      "parent_sha": "61d21bd82b4a4bfbc2c40be602202e012a35a519"
    }
  },
  {
    "oid": "0f5bb4b2fc4b0d84c0bc3f39c2cbac6d2cb65f5f",
    "message": "[#4558] Change to flush immediately in agent",
    "date": "2020-01-10T09:00:22Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/0f5bb4b2fc4b0d84c0bc3f39c2cbac6d2cb65f5f",
    "details": {
      "sha": "d1cae2bfbb05b2b0ada6365b2636406cc115e928",
      "filename": "profiler/src/main/java/com/navercorp/pinpoint/profiler/receiver/grpc/GrpcStreamService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/0f5bb4b2fc4b0d84c0bc3f39c2cbac6d2cb65f5f/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Freceiver%2Fgrpc%2FGrpcStreamService.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/0f5bb4b2fc4b0d84c0bc3f39c2cbac6d2cb65f5f/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Freceiver%2Fgrpc%2FGrpcStreamService.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/profiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Freceiver%2Fgrpc%2FGrpcStreamService.java?ref=0f5bb4b2fc4b0d84c0bc3f39c2cbac6d2cb65f5f",
      "patch": "@@ -59,7 +59,7 @@ public boolean register(GrpcProfilerStreamSocket streamSocket, TimerTask timerTa\n             boolean turnOn = currentTaskReference.compareAndSet(null, timerTask);\r\n             if (turnOn) {\r\n                 logger.info(\"turn on TimerTask.\");\r\n-                timer.scheduleAtFixedRate(timerTask, flushDelay, flushDelay);\r\n+                timer.scheduleAtFixedRate(timerTask, 0, flushDelay);\r\n                 return true;\r\n             }\r\n         }\r",
      "parent_sha": "65db41bd7400a46c26efacf742d96f9684e31a84"
    }
  },
  {
    "oid": "801bf00f21c280f00a1b633e6eba87c2a856d070",
    "message": "[#5672] Adds a function to warmup connection cache",
    "date": "2019-07-04T06:52:19Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/801bf00f21c280f00a1b633e6eba87c2a856d070",
    "details": {
      "sha": "67ef787228f136fd8baf40ccb65c6bc9f0f0235c",
      "filename": "commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/ConnectionFactoryBean.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/801bf00f21c280f00a1b633e6eba87c2a856d070/commons-hbase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcommon%2Fhbase%2FConnectionFactoryBean.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/801bf00f21c280f00a1b633e6eba87c2a856d070/commons-hbase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcommon%2Fhbase%2FConnectionFactoryBean.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/commons-hbase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fcommon%2Fhbase%2FConnectionFactoryBean.java?ref=801bf00f21c280f00a1b633e6eba87c2a856d070",
      "patch": "@@ -20,6 +20,7 @@\n import org.apache.hadoop.hbase.TableName;\n import org.apache.hadoop.hbase.client.Connection;\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.RegionLocator;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.DisposableBean;\n@@ -73,7 +74,8 @@ public void afterPropertiesSet() throws Exception {\n                 for (HbaseTable hBaseTable : HbaseTable.values()) {\n                     try {\n                         TableName tableName = tableNameProvider.getTableName(hBaseTable);\n-                        connection.getRegionLocator(tableName);\n+                        RegionLocator regionLocator = connection.getRegionLocator(tableName);\n+                        regionLocator.getAllRegionLocations();\n                     } catch (IOException e) {\n                         logger.warn(\"Failed to warmup for Table:{}. message:{}\", hBaseTable.getName(), e.getMessage(), e);\n                     }",
      "parent_sha": "857b0be56b213c54846c9d61730b6a8f6c93a4d4"
    }
  },
  {
    "oid": "a03f8fd52259117cee45ba9044f3d45943d09835",
    "message": "apply scatterChart format of version 3.",
    "date": "2015-09-04T06:16:58Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/a03f8fd52259117cee45ba9044f3d45943d09835",
    "details": {
      "sha": "92672070f640e5679bfbac1b603e365f991c1c12",
      "filename": "web/src/main/java/com/navercorp/pinpoint/web/controller/ScatterChartController.java",
      "status": "modified",
      "additions": 60,
      "deletions": 50,
      "changes": 110,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/a03f8fd52259117cee45ba9044f3d45943d09835/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FScatterChartController.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/a03f8fd52259117cee45ba9044f3d45943d09835/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FScatterChartController.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fweb%2Fcontroller%2FScatterChartController.java?ref=a03f8fd52259117cee45ba9044f3d45943d09835",
      "patch": "@@ -16,9 +16,7 @@\n \n package com.navercorp.pinpoint.web.controller;\n \n-import java.util.List;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n+import java.util.*;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -48,7 +46,6 @@\n import org.springframework.web.servlet.ModelAndView;\n \n /**\n- *\n  * @author netspider\n  * @author emeroad\n  */\n@@ -73,12 +70,12 @@ public class ScatterChartController {\n     @Deprecated\n     @RequestMapping(value = \"/scatterpopup\", method = RequestMethod.GET)\n     public String scatterPopup(Model model,\n-                                @RequestParam(\"application\") String applicationName,\n-                                @RequestParam(\"from\") long from,\n-                                @RequestParam(\"to\") long to,\n-                                @RequestParam(\"period\") long period,\n-                                @RequestParam(\"usePeriod\") boolean usePeriod,\n-                                @RequestParam(value = \"filter\", required = false) String filterText) {\n+                               @RequestParam(\"application\") String applicationName,\n+                               @RequestParam(\"from\") long from,\n+                               @RequestParam(\"to\") long to,\n+                               @RequestParam(\"period\") long period,\n+                               @RequestParam(\"usePeriod\") boolean usePeriod,\n+                               @RequestParam(value = \"filter\", required = false) String filterText) {\n         model.addAttribute(\"applicationName\", applicationName);\n         model.addAttribute(\"from\", from);\n         model.addAttribute(\"to\", to);\n@@ -89,38 +86,36 @@ public String scatterPopup(Model model,\n     }\n \n     /**\n-     *\n      * @param applicationName\n      * @param from\n      * @param to\n-     * @param limit\n-     *            max number of data return. if the requested data exceed this limit, we need additional calls to\n-     *                         fetch the rest of the data\n+     * @param limit           max number of data return. if the requested data exceed this limit, we need additional calls to\n+     *                        fetch the rest of the data\n      * @return\n      */\n     @RequestMapping(value = \"/getScatterData\", method = RequestMethod.GET)\n     public ModelAndView getScatterData(\n-                                @RequestParam(\"application\") String applicationName,\n-                                @RequestParam(\"from\") long from,\n-                                @RequestParam(\"to\") long to,\n-                                @RequestParam(\"limit\") int limit,\n-                                @RequestParam(value = \"filter\", required = false) String filterText,\n-                                @RequestParam(value = \"_callback\", required = false) String jsonpCallback,\n-                                @RequestParam(value = \"v\", required = false, defaultValue = \"2\") int version) {\n+            @RequestParam(\"application\") String applicationName,\n+            @RequestParam(\"from\") long from,\n+            @RequestParam(\"to\") long to,\n+            @RequestParam(\"limit\") int limit,\n+            @RequestParam(value = \"filter\", required = false) String filterText,\n+            @RequestParam(value = \"_callback\", required = false) String jsonpCallback,\n+            @RequestParam(value = \"v\", required = false, defaultValue = \"2\") int version) {\n         limit = LimitUtils.checkRange(limit);\n \n         StopWatch watch = new StopWatch();\n         watch.start(\"selectScatterData\");\n \n-                // TODO range check verification exception occurs. \"from\" is bigger than \"to\"\n+        // TODO range check verification exception occurs. \"from\" is bigger than \"to\"\n         final Range range = Range.createUncheckedRange(from, to);\n         logger.debug(\"fetch scatter data. {}, LIMIT={}, FILTER={}\", range, limit, filterText);\n \n         ModelAndView mv;\n         if (filterText == null) {\n-            mv = selectScatterData(applicationName, range, limit, jsonpCallback);\n+            mv = selectScatterData(applicationName, range, limit, jsonpCallback, version);\n         } else {\n-            mv = selectFilterScatterDataData(applicationName, range, filterText, limit, jsonpCallback);\n+            mv = selectFilterScatterDataData(applicationName, range, filterText, limit, jsonpCallback, version);\n         }\n \n         watch.stop();\n@@ -130,14 +125,14 @@ public ModelAndView getScatterData(\n         return mv;\n     }\n \n-    private ModelAndView selectFilterScatterDataData(String applicationName, Range range, String filterText, int limit, String jsonpCallback) {\n+    private ModelAndView selectFilterScatterDataData(String applicationName, Range range, String filterText, int limit, String jsonpCallback, int version) {\n \n         final LimitedScanResult<List<TransactionId>> limitedScanResult = flow.selectTraceIdsFromApplicationTraceIndex(applicationName, range, limit);\n \n         final List<TransactionId> traceIdList = limitedScanResult.getScanData();\n         logger.trace(\"submitted transactionId count={}\", traceIdList.size());\n \n-                // TODO just need sorted?  we need range check with tree-based structure.\n+        // TODO just need sorted?  we need range check with tree-based structure.\n         SortedSet<TransactionId> traceIdSet = new TreeSet<TransactionId>(traceIdList);\n         logger.debug(\"unified traceIdSet size={}\", traceIdSet.size());\n \n@@ -154,10 +149,10 @@ private ModelAndView selectFilterScatterDataData(String applicationName, Range r\n         } else {\n             resultRange = new Range(limitedScanResult.getLimitedTime(), range.getTo());\n         }\n-        return createModelAndView(resultRange, jsonpCallback, scatterData);\n+        return createModelAndView(resultRange, jsonpCallback, scatterData, version);\n     }\n \n-    private ModelAndView selectScatterData(String applicationName, Range range, int limit, String jsonpCallback) {\n+    private ModelAndView selectScatterData(String applicationName, Range range, int limit, String jsonpCallback, int version) {\n \n         final List<Dot> scatterData = scatter.selectScatterData(applicationName, range, limit);\n         Range resultRange;\n@@ -166,15 +161,30 @@ private ModelAndView selectScatterData(String applicationName, Range range, int\n         } else {\n             resultRange = new Range(scatterData.get(scatterData.size() - 1).getAcceptedTime(), range.getTo());\n         }\n-        return createModelAndView(resultRange, jsonpCallback, scatterData);\n+        return createModelAndView(resultRange, jsonpCallback, scatterData, version);\n     }\n \n-    private ModelAndView createModelAndView(Range range, String jsonpCallback, List<Dot> scatterData) {\n+    private ModelAndView createModelAndView(Range range, String jsonpCallback, List<Dot> scatterData, int version) {\n         ModelAndView mv = new ModelAndView();\n         mv.addObject(\"resultFrom\", range.getFrom());\n         mv.addObject(\"resultTo\", range.getTo());\n         mv.addObject(\"scatterIndex\", ScatterIndex.MATA_DATA);\n-        mv.addObject(\"scatter\", scatterData);\n+        if(version <= 2) {\n+            mv.addObject(\"scatter\", scatterData);\n+        } else {\n+            final Map<String, List<Dot>> scatterAgentData = new HashMap<String, List<Dot>>();\n+            for(Dot dot : scatterData) {\n+                List<Dot> list = scatterAgentData.get(dot.getAgentId());\n+                if(list == null) {\n+                    list = new ArrayList<Dot>();\n+                    scatterAgentData.put(dot.getAgentId(), list);\n+                }\n+                list.add(dot);\n+            }\n+\n+            mv.addObject(\"scatter\", scatterAgentData);\n+        }\n+\n         if (jsonpCallback == null) {\n             mv.setViewName(\"jsonView\");\n         } else {\n@@ -192,12 +202,12 @@ private ModelAndView createModelAndView(Range range, String jsonpCallback, List<\n      */\n     @RequestMapping(value = \"/getLastScatterData\", method = RequestMethod.GET)\n     public ModelAndView getLastScatterData(\n-                                    @RequestParam(\"application\") String applicationName,\n-                                    @RequestParam(\"period\") long period,\n-                                    @RequestParam(\"limit\") int limit,\n-                                    @RequestParam(value = \"filter\", required = false) String filterText,\n-                                    @RequestParam(value = \"_callback\", required = false) String jsonpCallback,\n-                                    @RequestParam(value = \"v\", required = false, defaultValue = \"1\") int version) {\n+            @RequestParam(\"application\") String applicationName,\n+            @RequestParam(\"period\") long period,\n+            @RequestParam(\"limit\") int limit,\n+            @RequestParam(value = \"filter\", required = false) String filterText,\n+            @RequestParam(value = \"_callback\", required = false) String jsonpCallback,\n+            @RequestParam(value = \"v\", required = false, defaultValue = \"1\") int version) {\n         limit = LimitUtils.checkRange(limit);\n \n         long to = TimeUtils.getDelayLastTime();\n@@ -223,8 +233,8 @@ public String transactionmetadata(Model model, HttpServletRequest request, HttpS\n             List<SpanBo> metadata = scatter.selectTransactionMetadata(query);\n             model.addAttribute(\"metadata\", metadata);\n         }\n-        \n-        \n+\n+\n         return \"transactionmetadata\";\n     }\n \n@@ -249,7 +259,7 @@ private TransactionMetadataQuery parseSelectTransaction(HttpServletRequest reque\n \n     /**\n      * transaction list query for selected points in scatter chart\n-     *\n+     * <p>\n      * <pre>\n      * TEST URL = http://localhost:7080/transactionmetadata2.pinpoint?application=FRONT-WEB&from=1394432299032&to=1394433498269&responseFrom=100&responseTo=200&responseOffset=100&limit=10\n      * </pre>\n@@ -261,16 +271,16 @@ private TransactionMetadataQuery parseSelectTransaction(HttpServletRequest reque\n      */\n     @RequestMapping(value = \"/transactionmetadata2\", method = RequestMethod.GET)\n     public String getTransaction(Model model,\n-                                @RequestParam(\"application\") String applicationName,\n-                                @RequestParam(\"from\") long from,\n-                                @RequestParam(\"to\") long to,\n-                                @RequestParam(\"responseFrom\") int responseFrom,\n-                                @RequestParam(\"responseTo\") int responseTo,\n-                                @RequestParam(\"limit\") int limit,\n-                                @RequestParam(value = \"offsetTime\", required = false, defaultValue = \"-1\") long offsetTime,\n-                                @RequestParam(value = \"offsetTransactionId\", required = false) String offsetTransactionId,\n-                                @RequestParam(value = \"offsetTransactionElapsed\", required = false, defaultValue = \"-1\") int offsetTransactionElapsed,\n-                                @RequestParam(value = \"filter\", required = false) String filterText) {\n+                                 @RequestParam(\"application\") String applicationName,\n+                                 @RequestParam(\"from\") long from,\n+                                 @RequestParam(\"to\") long to,\n+                                 @RequestParam(\"responseFrom\") int responseFrom,\n+                                 @RequestParam(\"responseTo\") int responseTo,\n+                                 @RequestParam(\"limit\") int limit,\n+                                 @RequestParam(value = \"offsetTime\", required = false, defaultValue = \"-1\") long offsetTime,\n+                                 @RequestParam(value = \"offsetTransactionId\", required = false) String offsetTransactionId,\n+                                 @RequestParam(value = \"offsetTransactionElapsed\", required = false, defaultValue = \"-1\") int offsetTransactionElapsed,\n+                                 @RequestParam(value = \"filter\", required = false) String filterText) {\n \n         limit = LimitUtils.checkRange(limit);\n ",
      "parent_sha": "b8dd1eb1f1982d5e5f6eb30f2a70cf4ca920eb2f"
    }
  },
  {
    "oid": "f73661b1d62b09908efe8e067924839b742c0f1f",
    "message": "[#noissue] Cleanup",
    "date": "2024-02-23T05:38:54Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/f73661b1d62b09908efe8e067924839b742c0f1f",
    "details": {
      "sha": "c4108d885c67b6abd9f4f912026c263cdb1aedcb",
      "filename": "batch/src/main/java/com/navercorp/pinpoint/batch/alarm/DataCollectorFactory.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/f73661b1d62b09908efe8e067924839b742c0f1f/batch%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbatch%2Falarm%2FDataCollectorFactory.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/f73661b1d62b09908efe8e067924839b742c0f1f/batch%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbatch%2Falarm%2FDataCollectorFactory.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/batch%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fbatch%2Falarm%2FDataCollectorFactory.java?ref=f73661b1d62b09908efe8e067924839b742c0f1f",
      "patch": "@@ -30,8 +30,8 @@\n import com.navercorp.pinpoint.web.alarm.CheckerCategory;\n import com.navercorp.pinpoint.web.alarm.DataCollectorCategory;\n import com.navercorp.pinpoint.web.dao.AgentEventDao;\n-import com.navercorp.pinpoint.web.dao.hbase.HbaseMapResponseTimeDao;\n-import com.navercorp.pinpoint.web.dao.hbase.HbaseMapStatisticsCallerDao;\n+import com.navercorp.pinpoint.web.dao.MapResponseDao;\n+import com.navercorp.pinpoint.web.dao.MapStatisticsCallerDao;\n import com.navercorp.pinpoint.web.dao.stat.AgentStatDao;\n import com.navercorp.pinpoint.web.vo.Application;\n import org.springframework.stereotype.Component;\n@@ -50,7 +50,7 @@ public class DataCollectorFactory {\n \n     public final static long SLOT_INTERVAL_THREE_MIN = 180000;\n \n-    private final HbaseMapResponseTimeDao hbaseMapResponseTimeDao;\n+    private final MapResponseDao mapResponseDao;\n \n     private final AgentStatDao<JvmGcBo> jvmGcDao;\n \n@@ -62,34 +62,34 @@ public class DataCollectorFactory {\n \n     private final AgentEventDao agentEventDao;\n \n-    private final HbaseMapStatisticsCallerDao mapStatisticsCallerDao;\n+    private final MapStatisticsCallerDao callerDao;\n \n-    public DataCollectorFactory(HbaseMapResponseTimeDao hbaseMapResponseTimeDao,\n+    public DataCollectorFactory(MapResponseDao mapResponseDao,\n                                 AgentStatDao<JvmGcBo> jvmGcDao,\n                                 AgentStatDao<CpuLoadBo> cpuLoadDao,\n                                 AgentStatDao<DataSourceListBo> dataSourceDao,\n                                 AgentStatDao<FileDescriptorBo> fileDescriptorDao,\n                                 AgentEventDao agentEventDao,\n-                                HbaseMapStatisticsCallerDao mapStatisticsCallerDao) {\n-        this.hbaseMapResponseTimeDao = Objects.requireNonNull(hbaseMapResponseTimeDao, \"hbaseMapResponseTimeDao\");\n+                                MapStatisticsCallerDao callerDao) {\n+        this.mapResponseDao = Objects.requireNonNull(mapResponseDao, \"mapResponseDao\");\n         this.jvmGcDao = Objects.requireNonNull(jvmGcDao, \"jvmGcDao\");\n         this.cpuLoadDao = Objects.requireNonNull(cpuLoadDao, \"cpuLoadDao\");\n         this.dataSourceDao = Objects.requireNonNull(dataSourceDao, \"dataSourceDao\");\n         this.fileDescriptorDao = Objects.requireNonNull(fileDescriptorDao, \"fileDescriptorDao\");\n         this.agentEventDao = Objects.requireNonNull(agentEventDao, \"agentEventDao\");\n-        this.mapStatisticsCallerDao = Objects.requireNonNull(mapStatisticsCallerDao, \"mapStatisticsCallerDao\");\n+        this.callerDao = Objects.requireNonNull(callerDao, \"callerDao\");\n     }\n \n     public DataCollector createDataCollector(CheckerCategory checker, Application application, Supplier<List<String>> agentIds, long timeSlotEndTime) {\n         return switch (checker.getDataCollectorCategory()) {\n             case RESPONSE_TIME ->\n-                    new ResponseTimeDataCollector(DataCollectorCategory.RESPONSE_TIME, application, hbaseMapResponseTimeDao, timeSlotEndTime, SLOT_INTERVAL_FIVE_MIN);\n+                    new ResponseTimeDataCollector(DataCollectorCategory.RESPONSE_TIME, application, mapResponseDao, timeSlotEndTime, SLOT_INTERVAL_FIVE_MIN);\n             case AGENT_STAT ->\n                     new AgentStatDataCollector(DataCollectorCategory.AGENT_STAT, jvmGcDao, cpuLoadDao, agentIds.get(), timeSlotEndTime, SLOT_INTERVAL_FIVE_MIN);\n             case AGENT_EVENT ->\n                     new AgentEventDataCollector(DataCollectorCategory.AGENT_EVENT, agentEventDao, agentIds.get(), timeSlotEndTime, SLOT_INTERVAL_FIVE_MIN);\n             case CALLER_STAT ->\n-                    new MapStatisticsCallerDataCollector(DataCollectorCategory.CALLER_STAT, application, mapStatisticsCallerDao, timeSlotEndTime, SLOT_INTERVAL_FIVE_MIN);\n+                    new MapStatisticsCallerDataCollector(DataCollectorCategory.CALLER_STAT, application, callerDao, timeSlotEndTime, SLOT_INTERVAL_FIVE_MIN);\n             case DATA_SOURCE_STAT ->\n                     new DataSourceDataCollector(DataCollectorCategory.DATA_SOURCE_STAT, dataSourceDao, agentIds.get(), timeSlotEndTime, SLOT_INTERVAL_FIVE_MIN);\n             case FILE_DESCRIPTOR ->",
      "parent_sha": "5aa20bd8681fdcdc21b599f740bdff6f9e2cfa85"
    }
  },
  {
    "oid": "6bb0478ede6e3bb61237fe1a64374545cdc18e95",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] \uc778\ud130\uc149\ud130 \uc7ac\uc0ac\uc6a9\ub85c\uc9c1 \ubc84\uadf8 \uc218\uc815.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-tomcat-profiler/trunk@658 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2012-09-14T09:35:50Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/6bb0478ede6e3bb61237fe1a64374545cdc18e95",
    "details": {
      "sha": "262a653fac7b5b04b342cc1d4ef878f287b4ee38",
      "filename": "src/main/java/com/profiler/interceptor/bci/JavaAssistClass.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/6bb0478ede6e3bb61237fe1a64374545cdc18e95/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Finterceptor%2Fbci%2FJavaAssistClass.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/6bb0478ede6e3bb61237fe1a64374545cdc18e95/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Finterceptor%2Fbci%2FJavaAssistClass.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fprofiler%2Finterceptor%2Fbci%2FJavaAssistClass.java?ref=6bb0478ede6e3bb61237fe1a64374545cdc18e95",
      "patch": "@@ -160,11 +160,17 @@ private int addInterceptor0(String methodName, String[] args, Interceptor interc\n             behavior = getBehavior(methodName, args);\r\n         } catch (NotFoundException e) {\r\n             // target method\ub098 constructor\ub97c \ucc28\uc9c0 \ubabb\ud588\uc744 \uacbd\uc6b0\ub294 NotFoundInstrumentException\uc744 \ub358\uc9c4\ub2e4.\r\n-            throw new NotFoundInstrumentException(interceptor.getClass().getSimpleName() + \" add fail. Cause:\" + e.getMessage(), e);\r\n+            if (interceptor == null) {\r\n+                throw new NotFoundInstrumentException(interceptorId + \" add fail. Cause:\" + e.getMessage(), e);\r\n+            } else {\r\n+                throw new NotFoundInstrumentException(interceptor.getClass().getSimpleName() + \" add fail. Cause:\" + e.getMessage(), e);\r\n+            }\r\n         }\r\n         try {\r\n             if (interceptor != null) {\r\n                 interceptorId = InterceptorRegistry.addInterceptor(interceptor);\r\n+            } else {\r\n+                interceptor = InterceptorRegistry.getInterceptor(interceptorId);\r\n             }\r\n             if (type == Type.auto) {\r\n                 if (interceptor instanceof StaticAroundInterceptor) {\r",
      "parent_sha": "92f35b7727c06c570d6092dbeb18d2a2082a9763"
    }
  },
  {
    "oid": "010cfd6546c6c07e7d0af67c67a2e0294c5f1b63",
    "message": "[#11153] Fix interceptor holder lazyloading",
    "date": "2024-06-17T06:07:33Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/010cfd6546c6c07e7d0af67c67a2e0294c5f1b63",
    "details": {
      "sha": "376528f30e790c9c106643b73785d169d9fccc18",
      "filename": "agent-module/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/interceptor/InterceptorLazyLoadingSupplier.java",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/010cfd6546c6c07e7d0af67c67a2e0294c5f1b63/agent-module%2Fprofiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Finstrument%2Finterceptor%2FInterceptorLazyLoadingSupplier.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/010cfd6546c6c07e7d0af67c67a2e0294c5f1b63/agent-module%2Fprofiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Finstrument%2Finterceptor%2FInterceptorLazyLoadingSupplier.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/agent-module%2Fprofiler%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fprofiler%2Finstrument%2Finterceptor%2FInterceptorLazyLoadingSupplier.java?ref=010cfd6546c6c07e7d0af67c67a2e0294c5f1b63",
      "patch": "@@ -18,12 +18,18 @@\n \n import com.navercorp.pinpoint.bootstrap.context.MethodDescriptor;\n import com.navercorp.pinpoint.bootstrap.interceptor.Interceptor;\n+import com.navercorp.pinpoint.bootstrap.interceptor.LoggingInterceptor;\n import com.navercorp.pinpoint.profiler.instrument.ScopeInfo;\n import com.navercorp.pinpoint.profiler.interceptor.factory.InterceptorFactory;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n \n import java.util.function.Supplier;\n \n public class InterceptorLazyLoadingSupplier implements Supplier<Interceptor> {\n+    private static final LoggingInterceptor LOGGING_INTERCEPTOR = new LoggingInterceptor(\"com.navercorp.pinpoint.profiler.interceptor.LAZYLOADING\");\n+    private final Logger logger = LogManager.getLogger(this.getClass());\n+\n     private final InterceptorFactory factory;\n     private final Class<?> interceptorClass;\n     private final Object[] providedArguments;\n@@ -40,7 +46,18 @@ public InterceptorLazyLoadingSupplier(InterceptorFactory factory, Class<?> inter\n \n     @Override\n     public Interceptor get() {\n-        Interceptor interceptor = factory.newInterceptor(interceptorClass, providedArguments, scopeInfo, methodDescriptor);\n+        Interceptor interceptor = null;\n+        try {\n+            interceptor = factory.newInterceptor(interceptorClass, providedArguments, scopeInfo, methodDescriptor);\n+        } catch (Throwable t) {\n+            logger.warn(\"Failed to new interceptor, interceptor={}\", interceptorClass.getName(), t);\n+        }\n+\n+        if (interceptor == null) {\n+            // defense\n+            return LOGGING_INTERCEPTOR;\n+        }\n         return interceptor;\n+\n     }\n }",
      "parent_sha": "ea6b21f434dcbad3fe6ca831eb0015ba9fe95e46"
    }
  },
  {
    "oid": "874c6791c254b275b92a2410f1b7f85ccbce6b6d",
    "message": "[\uac15\uc6b4\ub355] [LUCYSUS-1744] TemporaryMergeableCache\ub85c\uc9c1 \ud29c\ub2dd.\n\ngit-svn-id: http://svn.bds.nhncorp.com/pe/hippo-web/trunk@2911 84d0f5b1-2673-498c-a247-62c4ff18d310",
    "date": "2013-11-14T07:25:16Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/874c6791c254b275b92a2410f1b7f85ccbce6b6d",
    "details": {
      "sha": "18ba90eb1edf1051507bc0eca14553d21ac22c21",
      "filename": "src/main/java/com/nhn/pinpoint/web/util/TemporaryMergeableCache.java",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/874c6791c254b275b92a2410f1b7f85ccbce6b6d/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Futil%2FTemporaryMergeableCache.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/874c6791c254b275b92a2410f1b7f85ccbce6b6d/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Futil%2FTemporaryMergeableCache.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Fweb%2Futil%2FTemporaryMergeableCache.java?ref=874c6791c254b275b92a2410f1b7f85ccbce6b6d",
      "patch": "@@ -19,15 +19,13 @@ public V get(K key) {\n \t}\n \n \tpublic void add(K key, V value) {\n-\t\tif (cache.containsKey(key)) {\n-\t\t\tV v = cache.get(key);\n-\t\t\tif (v != null) {\n-\t\t\t\treplace(key, v.mergeWith(value));\n-\t\t\t} else {\n-\t\t\t\treplace(key, value);\n-\t\t\t}\n+        final Map<K, V> cache = this.cache;\n+\n+        final V find = cache.get(key);\n+        if (find != null) {\n+            find.mergeWith(value);\n \t\t} else {\n-\t\t\treplace(key, value);\n+            cache.put(key, value);\n \t\t}\n \t}\n ",
      "parent_sha": "41b0861859dcf94328579d1ef18817d35cd53ac2"
    }
  },
  {
    "oid": "c491c1c14b5a52f1a6e6f68a4591dc9ee72bd1d9",
    "message": "Improve spring plugins performacne. #1292\n\nMethod caching to improve performance.",
    "date": "2015-12-02T07:49:24Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/c491c1c14b5a52f1a6e6f68a4591dc9ee72bd1d9",
    "details": {
      "sha": "798a5bad750f4fcca0a9255ba3ee1ae9da7209e3",
      "filename": "plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/interceptor/CreateBeanInstanceInterceptor.java",
      "status": "modified",
      "additions": 29,
      "deletions": 8,
      "changes": 37,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/c491c1c14b5a52f1a6e6f68a4591dc9ee72bd1d9/plugins%2Fspring%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fbeans%2Finterceptor%2FCreateBeanInstanceInterceptor.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/c491c1c14b5a52f1a6e6f68a4591dc9ee72bd1d9/plugins%2Fspring%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fbeans%2Finterceptor%2FCreateBeanInstanceInterceptor.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/plugins%2Fspring%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fplugin%2Fspring%2Fbeans%2Finterceptor%2FCreateBeanInstanceInterceptor.java?ref=c491c1c14b5a52f1a6e6f68a4591dc9ee72bd1d9",
      "patch": "@@ -16,23 +16,24 @@\n \n package com.navercorp.pinpoint.plugin.spring.beans.interceptor;\n \n-import java.lang.reflect.Method;\n-\n import com.navercorp.pinpoint.bootstrap.instrument.Instrumentor;\n import com.navercorp.pinpoint.bootstrap.instrument.transformer.TransformCallback;\n import com.navercorp.pinpoint.bootstrap.interceptor.AroundInterceptor1;\n import com.navercorp.pinpoint.bootstrap.interceptor.annotation.IgnoreMethod;\n import com.navercorp.pinpoint.bootstrap.logging.PLogger;\n import com.navercorp.pinpoint.bootstrap.logging.PLoggerFactory;\n \n+import java.lang.reflect.Method;\n+\n /**\n- * \n  * @author Jongho Moon <jongho.moon@navercorp.com>\n- *\n+ * @Author Taejin Koo\n  */\n public class CreateBeanInstanceInterceptor extends AbstractSpringBeanCreationInterceptor implements AroundInterceptor1 {\n     private final PLogger logger = PLoggerFactory.getLogger(getClass());\n-    \n+\n+    private volatile Method getWrappedInstanceMethod;\n+\n     public CreateBeanInstanceInterceptor(Instrumentor instrumentor, TransformCallback transformer, TargetBeanFilter filter) {\n         super(instrumentor, transformer, filter);\n     }\n@@ -57,16 +58,36 @@ public void after(Object target, Object beanNameObject, Object result, Throwable\n \n             Object bean;\n             try {\n-                Method getter = result.getClass().getMethod(\"getWrappedInstance\"); \n-                bean = getter.invoke(result);\n+                Method getWrappedInstanceMethod = getGetWrappedInstanceMethod(result);\n+                bean = getWrappedInstanceMethod.invoke(result);\n             } catch (Exception e) {\n                 logger.warn(\"Fail to get create bean instance\", e);\n                 return;\n             }\n-            \n+\n             processBean(beanName, bean);\n         } catch (Throwable t) {\n             logger.warn(\"Unexpected exception\", t);\n         }\n     }\n+\n+    private Method getGetWrappedInstanceMethod(Object object) throws NoSuchMethodException {\n+        if (getWrappedInstanceMethod != null) {\n+            return getWrappedInstanceMethod;\n+        }\n+\n+        synchronized (this) {\n+            if (getWrappedInstanceMethod != null) {\n+                return getWrappedInstanceMethod;\n+            }\n+\n+            Method findedMethod = object.getClass().getMethod(\"getWrappedInstance\");\n+            if (findedMethod != null) {\n+                getWrappedInstanceMethod = findedMethod;\n+                return getWrappedInstanceMethod;\n+            }\n+        }\n+        return null;\n+    }\n+\n }",
      "parent_sha": "7b0ff630bcbfa0e48cbfc9ee43e31f8748c46d0f"
    }
  },
  {
    "oid": "e839bd85ed60b52cb85effe000c91beac18050ae",
    "message": "#2 PinpointSocket \uad6c\ud604\uccb4\uc5d0 ReconnectEvenetListener\ub97c \ub4f1\ub85d\n\n\ub370\uc774\ud130 \ucf5c\ub809\uc158 \uac1d\uccb4 \ubcc0\uacbd (arralist -> copyonwritearraylist)",
    "date": "2014-08-14T05:21:57Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/e839bd85ed60b52cb85effe000c91beac18050ae",
    "details": {
      "sha": "b2c646d530e8a28f86fc0a3b8c0f7773f05685c5",
      "filename": "src/main/java/com/nhn/pinpoint/rpc/client/PinpointSocket.java",
      "status": "modified",
      "additions": 6,
      "deletions": 14,
      "changes": 20,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/e839bd85ed60b52cb85effe000c91beac18050ae/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Frpc%2Fclient%2FPinpointSocket.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/e839bd85ed60b52cb85effe000c91beac18050ae/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Frpc%2Fclient%2FPinpointSocket.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/src%2Fmain%2Fjava%2Fcom%2Fnhn%2Fpinpoint%2Frpc%2Fclient%2FPinpointSocket.java?ref=e839bd85ed60b52cb85effe000c91beac18050ae",
      "patch": "@@ -2,6 +2,7 @@\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n \r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n@@ -26,7 +27,7 @@ public class PinpointSocket {\n \r\n     private volatile boolean closed;\r\n     \r\n-    private List<PinpointSocketReconnectEventListener> reconnectEventListeners = new ArrayList<PinpointSocketReconnectEventListener>();\r\n+    private List<PinpointSocketReconnectEventListener> reconnectEventListeners = new CopyOnWriteArrayList<PinpointSocketReconnectEventListener>();\r\n     \r\n     public PinpointSocket() {\r\n     \tthis(new ReconnectStateSocketHandler());\r\n@@ -81,28 +82,19 @@ public boolean addPinpointSocketReconnectEventListener(PinpointSocketReconnectEv\n     \t\treturn false;\r\n     \t}\r\n     \t\r\n-    \tsynchronized (this) {\r\n-    \t\treturn this.reconnectEventListeners.add(eventListener);\r\n-\t\t}\r\n+   \t\treturn this.reconnectEventListeners.add(eventListener);\r\n     }\r\n \r\n     public boolean removePinpointSocketReconnectEventListener(PinpointSocketReconnectEventListener eventListener) {\r\n     \tif (eventListener == null) {\r\n     \t\treturn false;\r\n     \t}\r\n-    \tsynchronized (this) {\r\n-    \t\treturn this.reconnectEventListeners.remove(eventListener);\r\n-\t\t}\r\n+\r\n+    \treturn this.reconnectEventListeners.remove(eventListener);\r\n     }\r\n \r\n     private List<PinpointSocketReconnectEventListener> getPinpointSocketReconnectEventListener() {\r\n-    \tList<PinpointSocketReconnectEventListener> result = new ArrayList<PinpointSocketReconnectEventListener>();\r\n-    \tsynchronized (this) {\r\n-        \tfor (PinpointSocketReconnectEventListener eventListener : this.reconnectEventListeners) {\r\n-        \t\tresult.add(eventListener);\r\n-        \t}\r\n-\t\t}\r\n-    \t\r\n+    \tList<PinpointSocketReconnectEventListener> result = new ArrayList<PinpointSocketReconnectEventListener>(reconnectEventListeners);\r\n     \treturn result;\r\n     }\r\n \r",
      "parent_sha": "9a5557a2695eae0da548d2386ebbe3a76b992dea"
    }
  },
  {
    "oid": "eebe59d28419717fe56c7ac2d6b0a65e71dccb2e",
    "message": "[#noissue] Replace Grpc Status conversion with build-in API",
    "date": "2024-07-16T05:22:24Z",
    "url": "https://github.com/pinpoint-apm/pinpoint/commit/eebe59d28419717fe56c7ac2d6b0a65e71dccb2e",
    "details": {
      "sha": "5299ffcfc06aa35ec13f3991a92a500af447e437",
      "filename": "grpc/src/main/java/com/navercorp/pinpoint/grpc/StatusErrors.java",
      "status": "modified",
      "additions": 6,
      "deletions": 21,
      "changes": 27,
      "blob_url": "https://github.com/pinpoint-apm/pinpoint/blob/eebe59d28419717fe56c7ac2d6b0a65e71dccb2e/grpc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fgrpc%2FStatusErrors.java",
      "raw_url": "https://github.com/pinpoint-apm/pinpoint/raw/eebe59d28419717fe56c7ac2d6b0a65e71dccb2e/grpc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fgrpc%2FStatusErrors.java",
      "contents_url": "https://api.github.com/repos/pinpoint-apm/pinpoint/contents/grpc%2Fsrc%2Fmain%2Fjava%2Fcom%2Fnavercorp%2Fpinpoint%2Fgrpc%2FStatusErrors.java?ref=eebe59d28419717fe56c7ac2d6b0a65e71dccb2e",
      "patch": "@@ -18,8 +18,6 @@\n \n import com.navercorp.pinpoint.common.util.StringUtils;\n import io.grpc.Status;\n-import io.grpc.StatusException;\n-import io.grpc.StatusRuntimeException;\n \n /**\n  * @author jaehong.kim\n@@ -28,11 +26,10 @@ public class StatusErrors {\n     static final String CONNECTION_REFUSED_MESSAGE = \"Connection refused: no further information\";\n     static final String CANCELLED_BEFORE_RECEIVING_HALF_CLOSE = \"CANCELLED: cancelled before receiving half close\";\n \n-\n-//    @NonNull\n+    //    @NonNull\n     public static StatusError throwable(final Throwable throwable) {\n-        final Status status = getStatus(throwable);\n-        if (status != null) {\n+        final Status status = Status.fromThrowable(throwable);\n+        if (status != Status.UNKNOWN) {\n             try {\n                 final SimpleStatusError message = getSimpleStatusError(status, throwable);\n                 if (message != null) {\n@@ -45,27 +42,15 @@ public static StatusError throwable(final Throwable throwable) {\n         return new DefaultStatusError(throwable);\n     }\n \n-    private static Status getStatus(Throwable throwable) {\n-        if (throwable instanceof StatusRuntimeException) {\n-            final StatusRuntimeException exception = (StatusRuntimeException) throwable;\n-            return exception.getStatus();\n-        }\n-        if (throwable instanceof StatusException) {\n-            final StatusException exception = (StatusException) throwable;\n-            return exception.getStatus();\n-        }\n-        return null;\n-    }\n-\n     private static SimpleStatusError getSimpleStatusError(Status status, Throwable throwable) {\n-        final Status.Code code = status.getCode();\n-        if (code == Status.UNAVAILABLE.getCode()) {\n+        final int code = status.getCode().value();\n+        if (code == Status.UNAVAILABLE.getCode().value()) {\n             final String causeMessage = findCauseMessage(throwable, CONNECTION_REFUSED_MESSAGE, 2);\n             if (causeMessage != null) {\n                 final String message = status.getDescription() + \": \" + causeMessage;\n                 return new SimpleStatusError(message, throwable);\n             }\n-        } else if (code == Status.CANCELLED.getCode()) {\n+        } else if (code == Status.CANCELLED.getCode().value()) {\n             final String message = throwable.getMessage();\n             if (StringUtils.contains(message, CANCELLED_BEFORE_RECEIVING_HALF_CLOSE)) {\n                 return new SimpleStatusError(CANCELLED_BEFORE_RECEIVING_HALF_CLOSE, throwable);",
      "parent_sha": "b283b834af5df1af4bbafc471e42172d80957fcd"
    }
  }
]