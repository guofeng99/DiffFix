[
  {
    "oid": "934b1005f9b76cd8cd92b440cb9a5e570f59e0e9",
    "message": "put renamed jar extension in a String constant so it could be safely referred by extensions",
    "date": "2020-07-24T08:07:04Z",
    "url": "https://github.com/quarkusio/quarkus/commit/934b1005f9b76cd8cd92b440cb9a5e570f59e0e9",
    "details": {
      "sha": "f1dfdc84ce4676c5ef43ca9d30fbea657f95a808",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/934b1005f9b76cd8cd92b440cb9a5e570f59e0e9/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FJarResultBuildStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/934b1005f9b76cd8cd92b440cb9a5e570f59e0e9/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FJarResultBuildStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FJarResultBuildStep.java?ref=934b1005f9b76cd8cd92b440cb9a5e570f59e0e9",
      "patch": "@@ -139,6 +139,7 @@ public class JarResultBuildStep {\n     public static final String APP = \"app\";\n     public static final String QUARKUS = \"quarkus\";\n     public static final String DEFAULT_FAST_JAR_DIRECTORY_NAME = \"quarkus-app\";\n+    public static final String RENAMED_JAR_EXTENSION = \".jar.original\";\n \n     @BuildStep\n     OutputTargetBuildItem outputTarget(BuildSystemTargetBuildItem bst, PackageConfig packageConfig) {\n@@ -257,7 +258,7 @@ private JarBuildItem buildUberJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n         final Path originalJar;\n         if (Files.exists(standardJar)) {\n             originalJar = outputTargetBuildItem.getOutputDirectory()\n-                    .resolve(outputTargetBuildItem.getBaseName() + \".jar.original\");\n+                    .resolve(outputTargetBuildItem.getBaseName() + RENAMED_JAR_EXTENSION);\n         } else {\n             originalJar = null;\n         }",
      "parent_sha": "c0a23521134c62476bac697af6b16d7a992a6f28"
    }
  },
  {
    "oid": "7d2c53c17cac2362afba921cfe91cde606fb01f3",
    "message": "Fix codestart properties conflict",
    "date": "2022-09-20T08:35:30Z",
    "url": "https://github.com/quarkusio/quarkus/commit/7d2c53c17cac2362afba921cfe91cde606fb01f3",
    "details": {
      "sha": "b725d3fc3bc3073ac321184c6c424df7efa067ac",
      "filename": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/core/strategy/SmartConfigMergeCodestartFileStrategyHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/7d2c53c17cac2362afba921cfe91cde606fb01f3/independent-projects%2Ftools%2Fcodestarts%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fcodestarts%2Fcore%2Fstrategy%2FSmartConfigMergeCodestartFileStrategyHandler.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/7d2c53c17cac2362afba921cfe91cde606fb01f3/independent-projects%2Ftools%2Fcodestarts%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fcodestarts%2Fcore%2Fstrategy%2FSmartConfigMergeCodestartFileStrategyHandler.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Ftools%2Fcodestarts%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fcodestarts%2Fcore%2Fstrategy%2FSmartConfigMergeCodestartFileStrategyHandler.java?ref=7d2c53c17cac2362afba921cfe91cde606fb01f3",
      "patch": "@@ -64,7 +64,8 @@ private void writePropertiesConfig(Path targetPath, Map<String, Object> config)\n         final HashMap<String, String> flat = new HashMap<>();\n         flatten(\"\", flat, config);\n         for (Map.Entry<String, String> entry : flat.entrySet()) {\n-            builder.append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\"\\n\");\n+            final String key = entry.getKey().replaceAll(\"\\\\.~$\", \"\");\n+            builder.append(key).append(\"=\").append(entry.getValue()).append(\"\\n\");\n         }\n         final Path propertiesTargetPath = targetPath.getParent()\n                 .resolve(targetPath.getFileName().toString().replace(\".yml\", \".properties\"));",
      "parent_sha": "dfb830c9cc01e5d1c7f9ebc2bf025638d4598f2a"
    }
  },
  {
    "oid": "9004c8a574391837bd56da3f20028e4d7cb884bc",
    "message": "Remove redundant codepath now that JDK 17 is the base\n\nWith the move to JDK 17 as the baseline,\ncreating AppCDS on exit is always possible",
    "date": "2024-01-23T10:16:59Z",
    "url": "https://github.com/quarkusio/quarkus/commit/9004c8a574391837bd56da3f20028e4d7cb884bc",
    "details": {
      "sha": "87267e781a4291ec6b331e7b7d347a28ef41314c",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java",
      "status": "modified",
      "additions": 2,
      "deletions": 20,
      "changes": 22,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/9004c8a574391837bd56da3f20028e4d7cb884bc/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FAppCDSBuildStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/9004c8a574391837bd56da3f20028e4d7cb884bc/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FAppCDSBuildStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FAppCDSBuildStep.java?ref=9004c8a574391837bd56da3f20028e4d7cb884bc",
      "patch": "@@ -75,28 +75,10 @@ public void build(Optional<AppCDSRequestedBuildItem> appCDsRequested,\n             }\n         }\n \n-        boolean useArchiveClassesAtExit = compiledJavaVersion.getJavaVersion()\n-                .isJava17OrHigher() == CompiledJavaVersionBuildItem.JavaVersion.Status.TRUE;\n-\n-        Path classesListPath = null;\n-        if (!useArchiveClassesAtExit) {\n-            classesListPath = createClassesList(jarResult, outputTarget, javaBinPath, containerImage,\n-                    appCDsRequested.get().getAppCDSDir(), packageConfig.isFastJar());\n-            if (classesListPath == null) {\n-                return;\n-            }\n-            log.debugf(\"'%s' successfully created.\", CLASSES_LIST_FILE_NAME);\n-        }\n-\n         Path appCDSPath;\n         log.info(\"Launching AppCDS creation process.\");\n-        if (useArchiveClassesAtExit) {\n-            appCDSPath = createAppCDSFromExit(jarResult, outputTarget, javaBinPath, containerImage,\n-                    packageConfig.isFastJar());\n-        } else {\n-            appCDSPath = createAppCDSFromClassesList(jarResult, outputTarget, javaBinPath, containerImage, classesListPath,\n-                    packageConfig.isFastJar());\n-        }\n+        appCDSPath = createAppCDSFromExit(jarResult, outputTarget, javaBinPath, containerImage,\n+                packageConfig.isFastJar());\n \n         if (appCDSPath == null) {\n             log.warn(\"Unable to create AppCDS.\");",
      "parent_sha": "b7159fc5558a87035d3f50a7c332e253b2ab1326"
    }
  },
  {
    "oid": "8b38ab9ae31b9a16a8d2da08426f25b3ab16194c",
    "message": "Some cleanup in RuntimeClassLoader\n\nRenamed a few variables and reorganized the methods for more clarity.\n\nNo behavior changes.",
    "date": "2019-04-26T08:35:24Z",
    "url": "https://github.com/quarkusio/quarkus/commit/8b38ab9ae31b9a16a8d2da08426f25b3ab16194c",
    "details": {
      "sha": "360173f60a060f46c1964c5ee8162e78211a4d7c",
      "filename": "core/deployment/src/main/java/io/quarkus/runner/RuntimeClassLoader.java",
      "status": "modified",
      "additions": 87,
      "deletions": 87,
      "changes": 174,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/8b38ab9ae31b9a16a8d2da08426f25b3ab16194c/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frunner%2FRuntimeClassLoader.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/8b38ab9ae31b9a16a8d2da08426f25b3ab16194c/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frunner%2FRuntimeClassLoader.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frunner%2FRuntimeClassLoader.java?ref=8b38ab9ae31b9a16a8d2da08426f25b3ab16194c",
      "patch": "@@ -61,7 +61,7 @@ public class RuntimeClassLoader extends ClassLoader implements ClassOutput, Tran\n \n     private volatile Map<String, List<BiFunction<String, ClassVisitor, ClassVisitor>>> bytecodeTransformers = null;\n \n-    private final List<Path> applicationClasses;\n+    private final List<Path> applicationClassDirectories;\n     private final Path frameworkClassesPath;\n     private final Path transformerCache;\n \n@@ -73,11 +73,11 @@ public class RuntimeClassLoader extends ClassLoader implements ClassOutput, Tran\n         registerAsParallelCapable();\n     }\n \n-    public RuntimeClassLoader(ClassLoader parent, List<Path> applicationClasses, Path frameworkClassesPath,\n+    public RuntimeClassLoader(ClassLoader parent, List<Path> applicationClassesDirectories, Path frameworkClassesDirectory,\n             Path transformerCache) {\n         super(parent);\n-        this.applicationClasses = applicationClasses;\n-        this.frameworkClassesPath = frameworkClassesPath;\n+        this.applicationClassDirectories = applicationClassesDirectories;\n+        this.frameworkClassesPath = frameworkClassesDirectory;\n         this.transformerCache = transformerCache;\n     }\n \n@@ -105,14 +105,6 @@ public Enumeration<URL> getResources(String nm) throws IOException {\n         return Collections.enumeration(resources);\n     }\n \n-    private String sanitizeName(String name) {\n-        if (name.startsWith(\"/\")) {\n-            return name.substring(1);\n-        }\n-\n-        return name;\n-    }\n-\n     @Override\n     public URL getResource(String nm) {\n         String name = sanitizeName(nm);\n@@ -162,54 +154,6 @@ protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundE\n         return super.loadClass(name, resolve);\n     }\n \n-    private byte[] handleTransform(String name, byte[] bytes) {\n-        if (bytecodeTransformers == null || bytecodeTransformers.isEmpty()) {\n-            return bytes;\n-        }\n-        List<BiFunction<String, ClassVisitor, ClassVisitor>> transformers = bytecodeTransformers.get(name);\n-        if (transformers == null) {\n-            return bytes;\n-        }\n-\n-        Path hashPath = null;\n-        if (transformerCache != null) {\n-\n-            try {\n-                MessageDigest md = MessageDigest.getInstance(\"MD5\");\n-                byte[] thedigest = md.digest(bytes);\n-                String hash = Base64.getUrlEncoder().encodeToString(thedigest);\n-                hashPath = transformerCache.resolve(hash);\n-                if (Files.exists(hashPath)) {\n-                    return readFileContent(hashPath);\n-                }\n-            } catch (Exception e) {\n-                log.error(\"Unable to load transformed class from cache\", e);\n-            }\n-        }\n-\n-        ClassReader cr = new ClassReader(bytes);\n-        ClassWriter writer = new QuarkusClassWriter(cr, ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n-        ClassVisitor visitor = writer;\n-        for (BiFunction<String, ClassVisitor, ClassVisitor> i : transformers) {\n-            visitor = i.apply(name, visitor);\n-        }\n-        cr.accept(visitor, 0);\n-        byte[] data = writer.toByteArray();\n-        if (hashPath != null) {\n-            try {\n-\n-                File file = hashPath.toFile();\n-                file.getParentFile().mkdirs();\n-                try (FileOutputStream out = new FileOutputStream(file)) {\n-                    out.write(data);\n-                }\n-            } catch (Exception e) {\n-                log.error(\"Unable to write class to cache\", e);\n-            }\n-        }\n-        return data;\n-    }\n-\n     @Override\n     protected Class<?> findClass(String name) throws ClassNotFoundException {\n         Class<?> existing = findLoadedClass(name);\n@@ -273,29 +217,6 @@ protected Class<?> findClass(String name) throws ClassNotFoundException {\n         throw new ClassNotFoundException(name);\n     }\n \n-    private void definePackage(String name) {\n-        final String pkgName = getPackageNameFromClassName(name);\n-        if ((pkgName != null) && getPackage(pkgName) == null) {\n-            synchronized (getClassLoadingLock(pkgName)) {\n-                if (getPackage(pkgName) == null) {\n-                    // this could certainly be improved to use the actual manifest\n-                    definePackage(pkgName, null, null, null, null, null, null, null);\n-                }\n-            }\n-        }\n-    }\n-\n-    private String getPackageNameFromClassName(String className) {\n-        final int index = className.lastIndexOf('.');\n-        if (index == -1) {\n-            // we return null here since in this case no package is defined\n-            // this is same behavior as Package.getPackage(clazz) exhibits\n-            // when the class is in the default package\n-            return null;\n-        }\n-        return className.substring(0, index);\n-    }\n-\n     @Override\n     public void writeClass(boolean applicationClass, String className, byte[] data) {\n         if (applicationClass) {\n@@ -345,7 +266,30 @@ public void writeResource(String name, byte[] data) throws IOException {\n         resources.put(name, data);\n     }\n \n-    public static byte[] readFileContent(final Path path) {\n+    private void definePackage(String name) {\n+        final String pkgName = getPackageNameFromClassName(name);\n+        if ((pkgName != null) && getPackage(pkgName) == null) {\n+            synchronized (getClassLoadingLock(pkgName)) {\n+                if (getPackage(pkgName) == null) {\n+                    // this could certainly be improved to use the actual manifest\n+                    definePackage(pkgName, null, null, null, null, null, null, null);\n+                }\n+            }\n+        }\n+    }\n+\n+    private String getPackageNameFromClassName(String className) {\n+        final int index = className.lastIndexOf('.');\n+        if (index == -1) {\n+            // we return null here since in this case no package is defined\n+            // this is same behavior as Package.getPackage(clazz) exhibits\n+            // when the class is in the default package\n+            return null;\n+        }\n+        return className.substring(0, index);\n+    }\n+\n+    private static byte[] readFileContent(final Path path) {\n         final File file = path.toFile();\n         final long fileLength = file.length();\n         if (fileLength > Integer.MAX_VALUE) {\n@@ -367,10 +311,66 @@ public static byte[] readFileContent(final Path path) {\n         }\n     }\n \n+    private byte[] handleTransform(String name, byte[] bytes) {\n+        if (bytecodeTransformers == null || bytecodeTransformers.isEmpty()) {\n+            return bytes;\n+        }\n+        List<BiFunction<String, ClassVisitor, ClassVisitor>> transformers = bytecodeTransformers.get(name);\n+        if (transformers == null) {\n+            return bytes;\n+        }\n+\n+        Path hashPath = null;\n+        if (transformerCache != null) {\n+\n+            try {\n+                MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+                byte[] thedigest = md.digest(bytes);\n+                String hash = Base64.getUrlEncoder().encodeToString(thedigest);\n+                hashPath = transformerCache.resolve(hash);\n+                if (Files.exists(hashPath)) {\n+                    return readFileContent(hashPath);\n+                }\n+            } catch (Exception e) {\n+                log.error(\"Unable to load transformed class from cache\", e);\n+            }\n+        }\n+\n+        ClassReader cr = new ClassReader(bytes);\n+        ClassWriter writer = new QuarkusClassWriter(cr, ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n+        ClassVisitor visitor = writer;\n+        for (BiFunction<String, ClassVisitor, ClassVisitor> i : transformers) {\n+            visitor = i.apply(name, visitor);\n+        }\n+        cr.accept(visitor, 0);\n+        byte[] data = writer.toByteArray();\n+        if (hashPath != null) {\n+            try {\n+\n+                File file = hashPath.toFile();\n+                file.getParentFile().mkdirs();\n+                try (FileOutputStream out = new FileOutputStream(file)) {\n+                    out.write(data);\n+                }\n+            } catch (Exception e) {\n+                log.error(\"Unable to write class to cache\", e);\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private String sanitizeName(String name) {\n+        if (name.startsWith(\"/\")) {\n+            return name.substring(1);\n+        }\n+\n+        return name;\n+    }\n+\n     private Path getClassInApplicationClassPaths(String name) {\n         final String fileName = name.replace('.', '/') + \".class\";\n         Path classLocation;\n-        for (Path i : applicationClasses) {\n+        for (Path i : applicationClassDirectories) {\n             classLocation = i.resolve(fileName);\n             if (Files.exists(classLocation)) {\n                 return classLocation;\n@@ -382,7 +382,7 @@ private Path getClassInApplicationClassPaths(String name) {\n     private URL findApplicationResource(String name) {\n         Path resourcePath = null;\n \n-        for (Path i : applicationClasses) {\n+        for (Path i : applicationClassDirectories) {\n             resourcePath = i.resolve(name);\n             if (Files.exists(resourcePath)) {\n                 break;\n@@ -399,7 +399,7 @@ private URL findApplicationResource(String name) {\n     private byte[] findApplicationResourceContent(String name) {\n         Path resourcePath = null;\n \n-        for (Path i : applicationClasses) {\n+        for (Path i : applicationClassDirectories) {\n             resourcePath = i.resolve(name);\n             if (Files.exists(resourcePath)) {\n                 return readFileContent(resourcePath);",
      "parent_sha": "861ad9b023cf5163494c71c16dc603b5999e9f44"
    }
  },
  {
    "oid": "bd23c2d3b096d75dec808b4f12ee804c8de87e64",
    "message": "Fix javadoc for quarkus.bootstrap.incubating-model-resolver\n\nNoticed while working on the config doc.",
    "date": "2024-09-10T20:12:14Z",
    "url": "https://github.com/quarkusio/quarkus/commit/bd23c2d3b096d75dec808b4f12ee804c8de87e64",
    "details": {
      "sha": "081810130ed9047f8c01cec8047645b9dc7750a0",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/BootstrapConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/bd23c2d3b096d75dec808b4f12ee804c8de87e64/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FBootstrapConfig.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/bd23c2d3b096d75dec808b4f12ee804c8de87e64/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FBootstrapConfig.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FBootstrapConfig.java?ref=bd23c2d3b096d75dec808b4f12ee804c8de87e64",
      "patch": "@@ -44,7 +44,7 @@ public class BootstrapConfig {\n     boolean disableJarCache;\n \n     /**\n-     * A temporary option introduced to avoid a logging warning when {@code }-Dquarkus.bootstrap.incubating-model-resolver}\n+     * A temporary option introduced to avoid a logging warning when {@code -Dquarkus.bootstrap.incubating-model-resolver}\n      * is added to the build command line.\n      * This option enables an incubating implementation of the Quarkus Application Model resolver.\n      * This option will be removed as soon as the incubating implementation becomes the default one.",
      "parent_sha": "089dafbed78b0f1124a97e9cd87a60a05304477e"
    }
  },
  {
    "oid": "66cd29ef9af47263dad98958e368a33b03f5da1e",
    "message": "Oracle JDBC drivers should not be initialized at runtime",
    "date": "2022-01-25T13:36:19Z",
    "url": "https://github.com/quarkusio/quarkus/commit/66cd29ef9af47263dad98958e368a33b03f5da1e",
    "details": {
      "sha": "87376ec0425a9a9b81a6d3e16f3b69601db12d29",
      "filename": "extensions/jdbc/jdbc-oracle/deployment/src/main/java/io/quarkus/jdbc/oracle/deployment/OracleMetadataOverrides.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/66cd29ef9af47263dad98958e368a33b03f5da1e/extensions%2Fjdbc%2Fjdbc-oracle%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fjdbc%2Foracle%2Fdeployment%2FOracleMetadataOverrides.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/66cd29ef9af47263dad98958e368a33b03f5da1e/extensions%2Fjdbc%2Fjdbc-oracle%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fjdbc%2Foracle%2Fdeployment%2FOracleMetadataOverrides.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fjdbc%2Fjdbc-oracle%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fjdbc%2Foracle%2Fdeployment%2FOracleMetadataOverrides.java?ref=66cd29ef9af47263dad98958e368a33b03f5da1e",
      "patch": "@@ -67,8 +67,12 @@ void build(BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n     @BuildStep\n     void runtimeInitializeDriver(BuildProducer<RuntimeInitializedClassBuildItem> runtimeInitialized) {\n         //These re-implement all the \"--initialize-at-build-time\" arguments found in the native-image.properties :\n-        runtimeInitialized.produce(new RuntimeInitializedClassBuildItem(\"oracle.jdbc.OracleDriver\"));\n-        runtimeInitialized.produce(new RuntimeInitializedClassBuildItem(\"oracle.jdbc.driver.OracleDriver\"));\n+\n+        // Override: the original metadata marks the drivers as \"runtime initialized\" but this makes it incompatible with\n+        // other systems (e.g. DB2 drivers) as it makes them incompatible with the JDK DriverManager integrations:\n+        // the DriverManager will typically (and most likely) need to load all drivers in a different phase.\n+        // runtimeInitialized.produce(new RuntimeInitializedClassBuildItem(\"oracle.jdbc.OracleDriver\"));\n+        // runtimeInitialized.produce(new RuntimeInitializedClassBuildItem(\"oracle.jdbc.driver.OracleDriver\"));\n \n         // The Oracle driver's metadata hints to require java.sql.DriverManager to be initialized at runtime, but:\n         //  A) I disagree with the fact that a driver makes changes outside of its scope (java.sql in this case)",
      "parent_sha": "cb1ff413ceb0f493a7e77ba02b7cf1ca837f0fef"
    }
  },
  {
    "oid": "817ada8f40d9501df72fb7dbfeaadabfd4f0bd22",
    "message": "More user-friendly exceptions for errors related to the syntax of the path passed to sql-load-script",
    "date": "2022-02-23T08:17:47Z",
    "url": "https://github.com/quarkusio/quarkus/commit/817ada8f40d9501df72fb7dbfeaadabfd4f0bd22",
    "details": {
      "sha": "73ddc379f4f241b97d165f5bd4f96b0909b83593",
      "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/817ada8f40d9501df72fb7dbfeaadabfd4f0bd22/extensions%2Fhibernate-orm%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fdeployment%2FHibernateOrmProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/817ada8f40d9501df72fb7dbfeaadabfd4f0bd22/extensions%2Fhibernate-orm%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fdeployment%2FHibernateOrmProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fhibernate-orm%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fdeployment%2FHibernateOrmProcessor.java?ref=817ada8f40d9501df72fb7dbfeaadabfd4f0bd22",
      "patch": "@@ -1109,7 +1109,16 @@ private static void producePersistenceUnitDescriptorFromConfig(\n \n         if (!importFiles.isEmpty()) {\n             for (String importFile : importFiles) {\n-                Path loadScriptPath = applicationArchivesBuildItem.getRootArchive().getChildPath(importFile);\n+                Path loadScriptPath;\n+                try {\n+                    loadScriptPath = applicationArchivesBuildItem.getRootArchive().getChildPath(importFile);\n+                } catch (RuntimeException e) {\n+                    throw new ConfigurationException(\n+                            \"Unable to interpret path referenced in '\"\n+                                    + HibernateOrmConfig.puPropertyKey(persistenceUnitName, \"sql-load-script\") + \"=\"\n+                                    + String.join(\",\", persistenceUnitConfig.sqlLoadScript.get())\n+                                    + \"': \" + e.getMessage());\n+                }\n \n                 if (loadScriptPath != null && !Files.isDirectory(loadScriptPath)) {\n                     // enlist resource if present",
      "parent_sha": "20ae4160832e733da6a2a2dc3b937bfa747e31f9"
    }
  },
  {
    "oid": "9eb061257ef0a2c2f29491b852c596ee6dc48f92",
    "message": "Apply minor fix to javadoc of MultipartForm",
    "date": "2022-08-10T12:12:54Z",
    "url": "https://github.com/quarkusio/quarkus/commit/9eb061257ef0a2c2f29491b852c596ee6dc48f92",
    "details": {
      "sha": "fa612a7ad549fafa0bff2161be37e0bbcc97f9c1",
      "filename": "independent-projects/resteasy-reactive/common/runtime/src/main/java/org/jboss/resteasy/reactive/MultipartForm.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/9eb061257ef0a2c2f29491b852c596ee6dc48f92/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2FMultipartForm.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/9eb061257ef0a2c2f29491b852c596ee6dc48f92/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2FMultipartForm.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2FMultipartForm.java?ref=9eb061257ef0a2c2f29491b852c596ee6dc48f92",
      "patch": "@@ -6,7 +6,7 @@\n import java.lang.annotation.Target;\n \n /**\n- * Annotation to be used on POJOs meant to map to the various parts of\n+ * Annotation to be used on POJOs meant to map to the various parts\n  * of {@code multipart/form-data} HTTP bodies.\n  * Each part of the POJO that should be mapped to a part of the body should be annotated with {@link RestForm}.\n  * In order to facilitate conversion to the field's body type, {@link PartType} should be used to determine the media",
      "parent_sha": "6a0ac61f93c2a96a7a7401c52e6cc094ead96630"
    }
  },
  {
    "oid": "3ee14dd38a7d1437ae643000620c9e7afe294a6d",
    "message": "Load base codestarts before extra codestarts\n\nThe precedence for the loaded codestarts should be `extensions < base < catalog < extra` so that the codestarts in the platform (i.e. catalog) and the extra provided codestarts can override any of the extension and base codestarts. This was not the case for base codestarts, which could not be overridden at all.",
    "date": "2021-05-14T08:40:43Z",
    "url": "https://github.com/quarkusio/quarkus/commit/3ee14dd38a7d1437ae643000620c9e7afe294a6d",
    "details": {
      "sha": "1959a4b97177b0ab168af3fa42c28c1456f8dfc7",
      "filename": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/3ee14dd38a7d1437ae643000620c9e7afe294a6d/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fproject%2FCodestartResourceLoadersBuilder.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/3ee14dd38a7d1437ae643000620c9e7afe294a6d/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fproject%2FCodestartResourceLoadersBuilder.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fproject%2FCodestartResourceLoadersBuilder.java?ref=3ee14dd38a7d1437ae643000620c9e7afe294a6d",
      "patch": "@@ -96,19 +96,11 @@ public List<ResourceLoader> build() {\n     }\n \n     private static List<ResourceLoader> getCodestartResourceLoaders(String baseCodestartsArtifactCoords,\n-            Collection<String> extraCodestartsArtifactCoords, ExtensionCatalog catalog,\n-            MavenArtifactResolver artifactResolver) {\n-        final List<String> coords = new ArrayList<>(extraCodestartsArtifactCoords);\n-        if (baseCodestartsArtifactCoords != null) {\n-            coords.add(baseCodestartsArtifactCoords);\n-        }\n-        return getCodestartResourceLoaders(coords, catalog, artifactResolver);\n-    }\n-\n-    private static List<ResourceLoader> getCodestartResourceLoaders(Collection<String> extraCodestartsArtifactCoords,\n+            Collection<String> extraCodestartsArtifactCoords,\n             ExtensionCatalog catalog,\n             MavenArtifactResolver mvn) {\n         final Map<String, Artifact> codestartsArtifacts = new LinkedHashMap<>();\n+\n         if (catalog != null) {\n             // Load codestarts from each extensions codestart artifacts\n             for (Extension e : catalog.getExtensions()) {\n@@ -118,7 +110,14 @@ private static List<ResourceLoader> getCodestartResourceLoaders(Collection<Strin\n                 }\n                 codestartsArtifacts.put(artifactCoords, DependencyNodeUtils.toArtifact(artifactCoords));\n             }\n+        }\n \n+        // Load base codestart artifacts\n+        if (baseCodestartsArtifactCoords != null) {\n+            codestartsArtifacts.put(baseCodestartsArtifactCoords, DependencyNodeUtils.toArtifact(baseCodestartsArtifactCoords));\n+        }\n+\n+        if (catalog != null) {\n             // Load codestarts from catalog codestart artifacts\n             final List<String> catalogCodestartArtifacts = getCodestartArtifacts(catalog);\n             for (String artifactCoords : catalogCodestartArtifacts) {\n@@ -128,6 +127,7 @@ private static List<ResourceLoader> getCodestartResourceLoaders(Collection<Strin\n                 codestartsArtifacts.put(artifactCoords, DependencyNodeUtils.toArtifact(artifactCoords));\n             }\n         }\n+\n         // Load codestarts from the given artifacts\n         for (String codestartArtifactCoords : extraCodestartsArtifactCoords) {\n             codestartsArtifacts.put(codestartArtifactCoords, DependencyNodeUtils.toArtifact(codestartArtifactCoords));",
      "parent_sha": "0b2e5b5220a5f14d95d65290de575f6e45784c4a"
    }
  },
  {
    "oid": "71d0e20d73ce03e3ce9c5b81e10ac7c73d060f08",
    "message": "Fix logging error message",
    "date": "2018-09-20T10:51:20Z",
    "url": "https://github.com/quarkusio/quarkus/commit/71d0e20d73ce03e3ce9c5b81e10ac7c73d060f08",
    "details": {
      "sha": "6d205f9851894fb251d131b8079d71d181293215",
      "filename": "ext/hibernate-protean/hibernate-orm-protean/src/main/java/org/hibernate/protean/impl/FlatClassLoaderService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/71d0e20d73ce03e3ce9c5b81e10ac7c73d060f08/ext%2Fhibernate-protean%2Fhibernate-orm-protean%2Fsrc%2Fmain%2Fjava%2Forg%2Fhibernate%2Fprotean%2Fimpl%2FFlatClassLoaderService.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/71d0e20d73ce03e3ce9c5b81e10ac7c73d060f08/ext%2Fhibernate-protean%2Fhibernate-orm-protean%2Fsrc%2Fmain%2Fjava%2Forg%2Fhibernate%2Fprotean%2Fimpl%2FFlatClassLoaderService.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/ext%2Fhibernate-protean%2Fhibernate-orm-protean%2Fsrc%2Fmain%2Fjava%2Forg%2Fhibernate%2Fprotean%2Fimpl%2FFlatClassLoaderService.java?ref=71d0e20d73ce03e3ce9c5b81e10ac7c73d060f08",
      "patch": "@@ -22,7 +22,7 @@\n  */\n public class FlatClassLoaderService implements ClassLoaderService {\n \n-\tprivate static final CoreMessageLogger log = CoreLogging.messageLogger( ClassLoaderServiceImpl.class );\n+\tprivate static final CoreMessageLogger log = CoreLogging.messageLogger( FlatClassLoaderService.class );\n \tpublic static final ClassLoaderService INSTANCE = new FlatClassLoaderService();\n \n \tprivate FlatClassLoaderService() {\n@@ -35,7 +35,7 @@ public <T> Class<T> classForName(String className) {\n \t\t\treturn (Class<T>) Class.forName( className, false, getClassLoader() );\n \t\t}\n \t\tcatch (ClassNotFoundException e) {\n-\t\t\tlog.errorf( \"Could not load class '%s' using Class.forName(String)\", className );\n+\t\t\tlog.errorf( \"Could not load class '%s' using Class.forName(String) and class loader %s\", className , getClassLoader());\n \t\t}\n \t\treturn null;\n \t}",
      "parent_sha": "bb3ab7ec93ea0c248c030d1129f1702cbb2f25b6"
    }
  },
  {
    "oid": "2532594aa16d43f088578c839084a34f20fda298",
    "message": "Strip additional suffixes for extension name\n\n-common and -internal will be in the way so let's strip them too.",
    "date": "2024-08-07T22:20:45Z",
    "url": "https://github.com/quarkusio/quarkus/commit/2532594aa16d43f088578c839084a34f20fda298",
    "details": {
      "sha": "3f290494cb1b4fe3b943c2b9d5fe7c24e225de1c",
      "filename": "core/processor/src/main/java/io/quarkus/annotation/processor/ExtensionAnnotationProcessor.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/2532594aa16d43f088578c839084a34f20fda298/core%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fannotation%2Fprocessor%2FExtensionAnnotationProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/2532594aa16d43f088578c839084a34f20fda298/core%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fannotation%2Fprocessor%2FExtensionAnnotationProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fannotation%2Fprocessor%2FExtensionAnnotationProcessor.java?ref=2532594aa16d43f088578c839084a34f20fda298",
      "patch": "@@ -42,8 +42,10 @@ public class ExtensionAnnotationProcessor extends AbstractProcessor {\n \n     private static final String DEBUG = \"debug-extension-annotation-processor\";\n     private static final String ARTIFACT_DEPLOYMENT_SUFFIX = \"-deployment\";\n+    private static final String ARTIFACT_COMMON_SUFFIX = \"-common\";\n+    private static final String ARTIFACT_INTERNAL_SUFFIX = \"-internal\";\n     private static final String NAME_RUNTIME_SUFFIX = \" - Runtime\";\n-    private static final String NAME_DEPLOYMENT_SUFFIX = \" - DEPLOYMENT\";\n+    private static final String NAME_DEPLOYMENT_SUFFIX = \" - Deployment\";\n \n     private List<ExtensionProcessor> extensionProcessors;\n \n@@ -201,6 +203,12 @@ private Extension getExtensionFromPom(Path pom, Document doc) {\n         if (artifactId.endsWith(ARTIFACT_DEPLOYMENT_SUFFIX)) {\n             artifactId = artifactId.substring(0, artifactId.length() - ARTIFACT_DEPLOYMENT_SUFFIX.length());\n         }\n+        if (artifactId.endsWith(ARTIFACT_COMMON_SUFFIX)) {\n+            artifactId = artifactId.substring(0, artifactId.length() - ARTIFACT_COMMON_SUFFIX.length());\n+        }\n+        if (artifactId.endsWith(ARTIFACT_INTERNAL_SUFFIX)) {\n+            artifactId = artifactId.substring(0, artifactId.length() - ARTIFACT_INTERNAL_SUFFIX.length());\n+        }\n \n         if (name != null) {\n             if (name.endsWith(NAME_DEPLOYMENT_SUFFIX)) {",
      "parent_sha": "e029b23c2def1e9a578124a88ee579fd4500f2ac"
    }
  },
  {
    "oid": "e16c51245093e1736659e5fccefffc801378e046",
    "message": "fix: typo in sync",
    "date": "2023-03-29T13:46:36Z",
    "url": "https://github.com/quarkusio/quarkus/commit/e16c51245093e1736659e5fccefffc801378e046",
    "details": {
      "sha": "0e652df70f89efb4653098221bdadd8b91ddc683",
      "filename": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/cli/plugin/PluginManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/e16c51245093e1736659e5fccefffc801378e046/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcli%2Fplugin%2FPluginManager.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/e16c51245093e1736659e5fccefffc801378e046/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcli%2Fplugin%2FPluginManager.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcli%2Fplugin%2FPluginManager.java?ref=e16c51245093e1736659e5fccefffc801378e046",
      "patch": "@@ -184,7 +184,7 @@ private boolean reconcile(PluginCatalog catalog) {\n      */\n     public boolean sync() {\n         boolean catalogModified = reconcile();\n-        Map<String, Plugin> installedPlugins = getInstallablePlugins();\n+        Map<String, Plugin> installedPlugins = getInstalledPlugins();\n         Map<String, Plugin> extensionPlugins = state.getExtensionPlugins();\n         Map<String, Plugin> pluginsToInstall = extensionPlugins.entrySet().stream()\n                 .filter(e -> !installedPlugins.containsKey(e.getKey()))",
      "parent_sha": "2af0da65233596cde798ee779fac1a7c3fb9bac3"
    }
  },
  {
    "oid": "1f96fbf6f7dc4ba293ab0baebb65eb1f8f974a2a",
    "message": "Introduce `server.port` tag into `http.server.active.requests` metric\n\nRelates to: #46539",
    "date": "2025-03-11T06:42:07Z",
    "url": "https://github.com/quarkusio/quarkus/commit/1f96fbf6f7dc4ba293ab0baebb65eb1f8f974a2a",
    "details": {
      "sha": "15b805583bbd106ecd8cd66a35a6a9802253430f",
      "filename": "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/vertx/VertxHttpServerMetrics.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/1f96fbf6f7dc4ba293ab0baebb65eb1f8f974a2a/extensions%2Fmicrometer%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmicrometer%2Fruntime%2Fbinder%2Fvertx%2FVertxHttpServerMetrics.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/1f96fbf6f7dc4ba293ab0baebb65eb1f8f974a2a/extensions%2Fmicrometer%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmicrometer%2Fruntime%2Fbinder%2Fvertx%2FVertxHttpServerMetrics.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fmicrometer%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmicrometer%2Fruntime%2Fbinder%2Fvertx%2FVertxHttpServerMetrics.java?ref=1f96fbf6f7dc4ba293ab0baebb65eb1f8f974a2a",
      "patch": "@@ -60,9 +60,16 @@ public class VertxHttpServerMetrics extends VertxTcpServerMetrics\n         this.openTelemetryContextUnwrapper = openTelemetryContextUnwrapper;\n \n         activeRequests = new LongAdder();\n-        Gauge.builder(config.getHttpServerActiveRequestsName(), activeRequests, LongAdder::doubleValue)\n-                .tag(\"url.scheme\", httpServerOptions.isSsl() ? \"https\" : \"http\")\n-                .register(registry);\n+        Gauge.Builder<LongAdder> activeRequestsBuilder = Gauge\n+                .builder(config.getHttpServerActiveRequestsName(), activeRequests, LongAdder::doubleValue)\n+                .tag(\"url.scheme\", httpServerOptions.isSsl() ? \"https\" : \"http\");\n+        // we add a port tag (the one the application should actually bind to on the network host,\n+        // not the public one which we can't know easily) only if it's not random\n+        if (httpServerOptions.getPort() > 0) {\n+            activeRequestsBuilder\n+                    .tag(\"server.port\", \"\" + httpServerOptions.getPort());\n+        }\n+        activeRequestsBuilder.register(registry);\n \n         httpServerMetricsTagsContributors = resolveHttpServerMetricsTagsContributors();\n ",
      "parent_sha": "1c095024734704709f6fb2583d90651e0bf2741d"
    }
  },
  {
    "oid": "0014b6411ffa2ca813c4956a2564b195e5a54622",
    "message": "Allow overwriting resource files in TestResourcesInBuildStepsTest\n\nSigned-off-by: Konstantin Gribov <grossws@gmail.com>",
    "date": "2023-04-16T05:41:08Z",
    "url": "https://github.com/quarkusio/quarkus/commit/0014b6411ffa2ca813c4956a2564b195e5a54622",
    "details": {
      "sha": "44cee1ad30eabc3fbbaa7e0a97a511e894bf4376",
      "filename": "integration-tests/gradle/src/main/resources/test-resources-in-build-steps/deployment/src/main/java/org/acme/ext/deployment/AcmeExtProcessor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/0014b6411ffa2ca813c4956a2564b195e5a54622/integration-tests%2Fgradle%2Fsrc%2Fmain%2Fresources%2Ftest-resources-in-build-steps%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Facme%2Fext%2Fdeployment%2FAcmeExtProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/0014b6411ffa2ca813c4956a2564b195e5a54622/integration-tests%2Fgradle%2Fsrc%2Fmain%2Fresources%2Ftest-resources-in-build-steps%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Facme%2Fext%2Fdeployment%2FAcmeExtProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/integration-tests%2Fgradle%2Fsrc%2Fmain%2Fresources%2Ftest-resources-in-build-steps%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Facme%2Fext%2Fdeployment%2FAcmeExtProcessor.java?ref=0014b6411ffa2ca813c4956a2564b195e5a54622",
      "patch": "@@ -8,6 +8,7 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n \n class AcmeExtProcessor {\n \n@@ -23,9 +24,9 @@ FeatureBuildItem feature(ApplicationArchivesBuildItem appArchivesBuildItem,\n \n         final Path output = p.getParent().getParent().getParent().resolve(launchModeBuildItem.getLaunchMode() + \"-\" + p.getFileName());\n         try {\n-            Files.copy(p, output);\n+            Files.copy(p, output, StandardCopyOption.REPLACE_EXISTING);\n         } catch(IOException e) {\n-            throw new IllegalStateException(\"Failed to copy \" + p + \" to \" + output);\n+            throw new IllegalStateException(\"Failed to copy \" + p + \" to \" + output, e);\n         }\n         return new FeatureBuildItem(FEATURE);\n     }",
      "parent_sha": "cd0c04cac892bce9251567faeb7331c9a5bbe3dd"
    }
  },
  {
    "oid": "519c7f678729d27f6bad91e64ff2755bc753197d",
    "message": "Have the JSchTest open ports on localhost rather than try guessing the address",
    "date": "2020-01-29T16:43:38Z",
    "url": "https://github.com/quarkusio/quarkus/commit/519c7f678729d27f6bad91e64ff2755bc753197d",
    "details": {
      "sha": "fe9f3db16f76240be72d0578f7a4909e66afa61e",
      "filename": "integration-tests/jsch/src/test/java/io/quarkus/it/jsch/JSchTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/519c7f678729d27f6bad91e64ff2755bc753197d/integration-tests%2Fjsch%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fjsch%2FJSchTest.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/519c7f678729d27f6bad91e64ff2755bc753197d/integration-tests%2Fjsch%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fjsch%2FJSchTest.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/integration-tests%2Fjsch%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fjsch%2FJSchTest.java?ref=519c7f678729d27f6bad91e64ff2755bc753197d",
      "patch": "@@ -4,7 +4,6 @@\n import static org.hamcrest.CoreMatchers.endsWith;\n import static org.hamcrest.core.Is.is;\n \n-import java.net.InetAddress;\n import java.nio.file.Files;\n \n import org.apache.sshd.server.SshServer;\n@@ -33,7 +32,7 @@ public void setupSSHDServer() throws Exception {\n         sshd.setPasswordAuthenticator(AcceptAllPasswordAuthenticator.INSTANCE);\n         sshd.setPublickeyAuthenticator(AcceptAllPublickeyAuthenticator.INSTANCE);\n         sshd.setCommandFactory(UnknownCommandFactory.INSTANCE);\n-        sshd.setHost(InetAddress.getLocalHost().getHostName());\n+        sshd.setHost(\"localhost\");\n         sshd.start();\n     }\n ",
      "parent_sha": "a86abaa1ab521b06df060affedf0026061f094be"
    }
  },
  {
    "oid": "45ba4e0107aac5228960e897873b909ba21b0e12",
    "message": "Add more detail to failure message",
    "date": "2025-02-28T15:10:17Z",
    "url": "https://github.com/quarkusio/quarkus/commit/45ba4e0107aac5228960e897873b909ba21b0e12",
    "details": {
      "sha": "881e41b83fda16bedcacc7444a1aeb92ca1c3491",
      "filename": "integration-tests/main/src/test/java/io/quarkus/it/main/BeanManagerInjectionInTestCase.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/45ba4e0107aac5228960e897873b909ba21b0e12/integration-tests%2Fmain%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fmain%2FBeanManagerInjectionInTestCase.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/45ba4e0107aac5228960e897873b909ba21b0e12/integration-tests%2Fmain%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fmain%2FBeanManagerInjectionInTestCase.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/integration-tests%2Fmain%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fmain%2FBeanManagerInjectionInTestCase.java?ref=45ba4e0107aac5228960e897873b909ba21b0e12",
      "patch": "@@ -1,5 +1,8 @@\n package io.quarkus.it.main;\n \n+import java.util.Set;\n+\n+import jakarta.enterprise.inject.spi.Bean;\n import jakarta.enterprise.inject.spi.BeanManager;\n import jakarta.inject.Inject;\n \n@@ -18,6 +21,7 @@ public class BeanManagerInjectionInTestCase {\n     @Test\n     public void testInjection() {\n         Assertions.assertNotNull(beanManager);\n-        Assertions.assertFalse(beanManager.getBeans(ExternalService.class).isEmpty());\n+        Set<Bean<?>> beans = beanManager.getBeans(ExternalService.class);\n+        Assertions.assertFalse(beans.isEmpty(), () -> \"Beans is \" + beans);\n     }\n }",
      "parent_sha": "bc14c861573a1b81bbf46119b04bdc8758d7a562"
    }
  },
  {
    "oid": "3b811678f4cd7a29687d5348e5e18583eb3d05f5",
    "message": "Qute: fix evaluation of section parameters\n\n- iterators of a HashMap#entrySet() are not guaranteed to be consistent;\neven if no modifications are made to the map\n- this issue was discovered by @mohitbadve with the\nhttps://github.com/TestingResearchIllinois/NonDex project\n- supersedes http://github.com/quarkusio/quarkus/pull/43820",
    "date": "2024-10-15T08:36:32Z",
    "url": "https://github.com/quarkusio/quarkus/commit/3b811678f4cd7a29687d5348e5e18583eb3d05f5",
    "details": {
      "sha": "d99aa6edefa6174321f568f12bf5bacee5597d63",
      "filename": "independent-projects/qute/core/src/main/java/io/quarkus/qute/Futures.java",
      "status": "modified",
      "additions": 26,
      "deletions": 18,
      "changes": 44,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/3b811678f4cd7a29687d5348e5e18583eb3d05f5/independent-projects%2Fqute%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fqute%2FFutures.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/3b811678f4cd7a29687d5348e5e18583eb3d05f5/independent-projects%2Fqute%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fqute%2FFutures.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fqute%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fqute%2FFutures.java?ref=3b811678f4cd7a29687d5348e5e18583eb3d05f5",
      "patch": "@@ -1,16 +1,13 @@\n package io.quarkus.qute;\n \n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ExecutionException;\n import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n \n public final class Futures {\n \n@@ -44,56 +41,67 @@ static CompletionStage<Map<String, Object>> evaluateParams(Map<String, Expressio\n             }\n         } else {\n             // multiple params\n-            List<Entry<String, CompletableFuture<Object>>> asyncResults = new ArrayList<>(parameters.size());\n-            for (Entry<String, Expression> e : parameters.entrySet()) {\n-                if (!e.getValue().isLiteral()) {\n-                    asyncResults.add(Map.entry(e.getKey(), resolutionContext.evaluate(e.getValue()).toCompletableFuture()));\n-                }\n-            }\n-            if (asyncResults.isEmpty()) {\n+            Map<String, CompletableFuture<Object>> asyncResults = collectAsyncResults(parameters, resolutionContext);\n+            if (asyncResults == null) {\n                 // only literals\n-                return CompletedStage.of(parameters.entrySet().stream()\n-                        .collect(Collectors.toMap(Entry::getKey, e -> e.getValue().getLiteral())));\n+                Map<String, Object> ret = new HashMap<>();\n+                for (Entry<String, Expression> e : parameters.entrySet()) {\n+                    ret.put(e.getKey(), e.getValue().getLiteral());\n+                }\n+                return CompletedStage.of(ret);\n             } else if (asyncResults.size() == 1) {\n                 // single non-literal param - avoid CompletableFuture.allOf() and add remaining literals\n-                return asyncResults.get(0).getValue().thenApply(v -> {\n+                return asyncResults.values().iterator().next().thenApply(v -> {\n                     try {\n-                        return singleValueMap(parameters, asyncResults.get(0));\n+                        return singleValueMap(parameters, asyncResults.entrySet().iterator().next());\n                     } catch (InterruptedException | ExecutionException e1) {\n                         throw new CompletionException(e1);\n                     }\n                 });\n             } else {\n                 // multiple non-literal params\n                 CompletableFuture<Map<String, Object>> result = new CompletableFuture<>();\n-                CompletableFuture.allOf(asyncResults.stream().map(Entry::getValue).toArray(CompletableFuture[]::new))\n+                CompletableFuture.allOf(asyncResults.values().toArray(CompletableFuture[]::new))\n                         .whenComplete((v, t1) -> {\n                             if (t1 != null) {\n                                 result.completeExceptionally(t1);\n                             } else {\n                                 // IMPL NOTE: Keep the map mutable - it can be modified in UserTagSectionHelper\n                                 Map<String, Object> values = new HashMap<>();\n-                                int j = 0;\n                                 try {\n                                     for (Entry<String, Expression> entry : parameters.entrySet()) {\n                                         if (entry.getValue().isLiteral()) {\n                                             values.put(entry.getKey(), entry.getValue().getLiteral());\n                                         } else {\n-                                            values.put(entry.getKey(), asyncResults.get(j++).getValue().get());\n+                                            values.put(entry.getKey(), asyncResults.get(entry.getKey()).get());\n                                         }\n                                     }\n                                     result.complete(values);\n                                 } catch (Throwable e) {\n                                     result.completeExceptionally(e);\n                                 }\n-\n                             }\n                         });\n                 return result;\n             }\n         }\n     }\n \n+    private static Map<String, CompletableFuture<Object>> collectAsyncResults(Map<String, Expression> parameters,\n+            ResolutionContext resolutionContext) {\n+        Map<String, CompletableFuture<Object>> asyncResults = null;\n+        for (Entry<String, Expression> e : parameters.entrySet()) {\n+            if (e.getValue().isLiteral()) {\n+                continue;\n+            }\n+            if (asyncResults == null) {\n+                asyncResults = new HashMap<>();\n+            }\n+            asyncResults.put(e.getKey(), resolutionContext.evaluate(e.getValue()).toCompletableFuture());\n+        }\n+        return asyncResults;\n+    }\n+\n     private static Map<String, Object> singleValueMap(String key, Object value) {\n         // IMPL NOTE: Keep the map mutable - it can be modified in UserTagSectionHelper\n         Map<String, Object> map = new HashMap<>();",
      "parent_sha": "af494da971938f23e2897ca512d24e35a1a104a9"
    }
  },
  {
    "oid": "7d43f4a5d252e37e5125193f3e852afd2a42d057",
    "message": "Some fixes in RestUriInfo",
    "date": "2020-11-23T16:07:36Z",
    "url": "https://github.com/quarkusio/quarkus/commit/7d43f4a5d252e37e5125193f3e852afd2a42d057",
    "details": {
      "sha": "da1a513c751cbf12ebc76699b85815429a558372",
      "filename": "extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestUriInfo.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/7d43f4a5d252e37e5125193f3e852afd2a42d057/extensions%2Fquarkus-rest%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frest%2Fruntime%2Fjaxrs%2FQuarkusRestUriInfo.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/7d43f4a5d252e37e5125193f3e852afd2a42d057/extensions%2Fquarkus-rest%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frest%2Fruntime%2Fjaxrs%2FQuarkusRestUriInfo.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fquarkus-rest%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frest%2Fruntime%2Fjaxrs%2FQuarkusRestUriInfo.java?ref=7d43f4a5d252e37e5125193f3e852afd2a42d057",
      "patch": "@@ -14,6 +14,7 @@\n import io.quarkus.rest.runtime.core.QuarkusRestRequestContext;\n import io.quarkus.rest.runtime.core.UriMatch;\n import io.quarkus.rest.runtime.util.MultivaluedMapImpl;\n+import io.quarkus.rest.runtime.util.PathSegmentImpl;\n import io.quarkus.rest.runtime.util.UnmodifiableMultivaluedMap;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpServerRequest;\n@@ -49,7 +50,7 @@ public List<PathSegment> getPathSegments() {\n \n     @Override\n     public List<PathSegment> getPathSegments(boolean decode) {\n-        return null;\n+        return PathSegmentImpl.parseSegments(getPath(), decode);\n     }\n \n     @Override\n@@ -72,12 +73,17 @@ public UriBuilder getRequestUriBuilder() {\n \n     @Override\n     public URI getAbsolutePath() {\n-        return null;\n+        HttpServerRequest request = currentRequest.getContext().request();\n+        try {\n+            return new URI(request.absoluteURI());\n+        } catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n     }\n \n     @Override\n     public UriBuilder getAbsolutePathBuilder() {\n-        return null;\n+        return UriBuilder.fromUri(getAbsolutePath());\n     }\n \n     @Override\n@@ -101,7 +107,7 @@ public URI getBaseUri() {\n \n     @Override\n     public UriBuilder getBaseUriBuilder() {\n-        return null;\n+        return UriBuilder.fromUri(getBaseUri());\n     }\n \n     @Override",
      "parent_sha": "39c514ef1698864bf0717ee905286acbb3f78cfc"
    }
  },
  {
    "oid": "d6a010b8773cc7b48414971f1a19184fcddb28ff",
    "message": "Revert \"Improve getResources performance\"\n\nThis reverts commit be2302ec\n\nReverted because it breaks integration tests in native (see flyway and main)",
    "date": "2020-05-06T09:37:17Z",
    "url": "https://github.com/quarkusio/quarkus/commit/d6a010b8773cc7b48414971f1a19184fcddb28ff",
    "details": {
      "sha": "da14e314d169709a1f0d46759828f8b02925af76",
      "filename": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/classloading/QuarkusClassLoader.java",
      "status": "modified",
      "additions": 28,
      "deletions": 32,
      "changes": 60,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/d6a010b8773cc7b48414971f1a19184fcddb28ff/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fclassloading%2FQuarkusClassLoader.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/d6a010b8773cc7b48414971f1a19184fcddb28ff/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fclassloading%2FQuarkusClassLoader.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fclassloading%2FQuarkusClassLoader.java?ref=d6a010b8773cc7b48414971f1a19184fcddb28ff",
      "patch": "@@ -146,6 +146,12 @@ public Enumeration<URL> getResources(String nm) throws IOException {\n         //for single resources we still respect this\n         boolean banned = state.bannedResources.contains(name);\n         Set<URL> resources = new LinkedHashSet<>();\n+        //ClassPathElement[] providers = loadableResources.get(name);\n+        //if (providers != null) {\n+        //    for (ClassPathElement element : providers) {\n+        //        resources.add(element.getResource(nm).getUrl());\n+        //    }\n+        //}\n \n         //this is a big of a hack, but is necessary to prevent service leakage\n         //in some situations (looking at you gradle) the parent can contain the same\n@@ -167,12 +173,10 @@ public Enumeration<URL> getResources(String nm) throws IOException {\n                 //ignore\n             }\n         }\n-        //TODO: in theory resources could have been added in dev mode\n-        //but I don't thing this really matters for this code path\n-        ClassPathElement[] providers = state.loadableResources.get(name);\n-        if (providers != null) {\n-            for (ClassPathElement element : providers) {\n-                resources.add(element.getResource(nm).getUrl());\n+        for (ClassPathElement i : elements) {\n+            ClassPathResource res = i.getResource(nm);\n+            if (res != null) {\n+                resources.add(res.getUrl());\n             }\n         }\n         if (!banned) {\n@@ -249,20 +253,15 @@ public URL getResource(String nm) {\n         if (state.bannedResources.contains(name)) {\n             return null;\n         }\n-        //TODO: because of dev mode we iterate, to see if any resources were added\n-        //not for .class files though, adding them causes a restart\n-        //this is very important for bytebuddy performance\n-        if (nm.endsWith(\".class\")) {\n-            ClassPathElement[] providers = state.loadableResources.get(name);\n-            if (providers != null) {\n-                return providers[0].getResource(nm).getUrl();\n-            }\n-        } else {\n-            for (ClassPathElement i : elements) {\n-                ClassPathResource res = i.getResource(name);\n-                if (res != null) {\n-                    return res.getUrl();\n-                }\n+        //        ClassPathElement[] providers = loadableResources.get(name);\n+        //        if (providers != null) {\n+        //            return providers[0].getResource(nm).getUrl();\n+        //        }\n+        //TODO: because of dev mode we can't use the fast path her, we need to iterate\n+        for (ClassPathElement i : elements) {\n+            ClassPathResource res = i.getResource(name);\n+            if (res != null) {\n+                return res.getUrl();\n             }\n         }\n         return parent.getResource(nm);\n@@ -275,18 +274,15 @@ public InputStream getResourceAsStream(String nm) {\n         if (state.bannedResources.contains(name)) {\n             return null;\n         }\n-        //dev mode may have added some files, so we iterate to check, but not for classes\n-        if (nm.endsWith(\".class\")) {\n-            ClassPathElement[] providers = state.loadableResources.get(name);\n-            if (providers != null) {\n-                return new ByteArrayInputStream(providers[0].getResource(nm).getData());\n-            }\n-        } else {\n-            for (ClassPathElement i : elements) {\n-                ClassPathResource res = i.getResource(name);\n-                if (res != null) {\n-                    return new ByteArrayInputStream(res.getData());\n-                }\n+        //        ClassPathElement[] providers = loadableResources.get(name);\n+        //        if (providers != null) {\n+        //            return new ByteArrayInputStream(providers[0].getResource(nm).getData());\n+        //        }\n+        //TODO: because of dev mode we can't use the fast path her, we need to iterate\n+        for (ClassPathElement i : elements) {\n+            ClassPathResource res = i.getResource(name);\n+            if (res != null) {\n+                return new ByteArrayInputStream(res.getData());\n             }\n         }\n         return parent.getResourceAsStream(nm);",
      "parent_sha": "8650fef2699b597b096a7d1f48c0367d35cc616a"
    }
  },
  {
    "oid": "f399671722319495d93349ecd9ed1337ddc218ea",
    "message": "Add host and port when error creating management interface\n\nFixes #42614",
    "date": "2024-08-19T08:27:42Z",
    "url": "https://github.com/quarkusio/quarkus/commit/f399671722319495d93349ecd9ed1337ddc218ea",
    "details": {
      "sha": "25492358cd06c6c0d8606e594f2dcbcf703c3098",
      "filename": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/VertxHttpRecorder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/f399671722319495d93349ecd9ed1337ddc218ea/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2FVertxHttpRecorder.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/f399671722319495d93349ecd9ed1337ddc218ea/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2FVertxHttpRecorder.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2FVertxHttpRecorder.java?ref=f399671722319495d93349ecd9ed1337ddc218ea",
      "patch": "@@ -688,7 +688,9 @@ private static CompletableFuture<HttpServer> initializeManagementInterface(Vertx\n                     .listen(ar -> {\n                         if (ar.failed()) {\n                             managementInterfaceFuture.completeExceptionally(\n-                                    new IllegalStateException(\"Unable to start the management interface\", ar.cause()));\n+                                    new IllegalStateException(\"Unable to start the management interface on \"\n+                                            + httpManagementServerOptions.getHost() + \":\"\n+                                            + httpManagementServerOptions.getPort(), ar.cause()));\n                         } else {\n                             if (httpManagementServerOptions.isSsl()\n                                     && (managementConfig.ssl.certificate.reloadPeriod.isPresent())) {",
      "parent_sha": "87d3c3091c037de791d7612201ad1055c4f2147a"
    }
  },
  {
    "oid": "07e1656111e2b9158125f3ddf30de0c371d9d61c",
    "message": "added additional error info in case 'client-id' or 'auth-server-url' are note available",
    "date": "2020-09-28T09:27:45Z",
    "url": "https://github.com/quarkusio/quarkus/commit/07e1656111e2b9158125f3ddf30de0c371d9d61c",
    "details": {
      "sha": "ac33064b27604b58b13ec4fa5129bff8a483f2e0",
      "filename": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/07e1656111e2b9158125f3ddf30de0c371d9d61c/extensions%2Foidc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Foidc%2Fruntime%2FOidcRecorder.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/07e1656111e2b9158125f3ddf30de0c371d9d61c/extensions%2Foidc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Foidc%2Fruntime%2FOidcRecorder.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Foidc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Foidc%2Fruntime%2FOidcRecorder.java?ref=07e1656111e2b9158125f3ddf30de0c371d9d61c",
      "patch": "@@ -99,9 +99,15 @@ private TenantConfigContext createTenantContext(Vertx vertx, OidcTenantConfig oi\n             return createdTenantContextFromPublicKey(options, oidcConfig);\n         }\n \n-        if (!oidcConfig.getAuthServerUrl().isPresent() || !oidcConfig.getClientId().isPresent()) {\n+        if (!oidcConfig.getAuthServerUrl().isPresent()) {\n             throw new ConfigurationException(\n-                    \"Both 'auth-server-url' and 'client-id' or alternatively 'public-key' must be configured\"\n+                    \"'auth-server-url' is not present. Both 'auth-server-url' and 'client-id' or alternatively 'public-key' must be configured\"\n+                            + \" when the quarkus-oidc extension is enabled\");\n+        }\n+\n+        if (!oidcConfig.getClientId().isPresent()) {\n+            throw new ConfigurationException(\n+                    \"'client-id' is not present. Both 'auth-server-url' and 'client-id' or alternatively 'public-key' must be configured\"\n                             + \" when the quarkus-oidc extension is enabled\");\n         }\n ",
      "parent_sha": "51ac9da82bf535e23827fe73c02db082025e154e"
    }
  },
  {
    "oid": "c04f0fef114f3cd38a528c2804f1e31d0cd11525",
    "message": "Fix concurrency modification exception that could happen in the reactive messaging tests.\n\nThe emission and the retrieval of the list are done on different thread. While checking the content of the retrieved list, new items can be added to the list leading to a concurrency exception.",
    "date": "2021-01-12T09:13:50Z",
    "url": "https://github.com/quarkusio/quarkus/commit/c04f0fef114f3cd38a528c2804f1e31d0cd11525",
    "details": {
      "sha": "81df71a8a8db06141c50996fcf820284c6693b7b",
      "filename": "extensions/smallrye-reactive-messaging/deployment/src/test/java/io/quarkus/smallrye/reactivemessaging/blocking/beans/InfiniteSubscriber.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/c04f0fef114f3cd38a528c2804f1e31d0cd11525/extensions%2Fsmallrye-reactive-messaging%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fsmallrye%2Freactivemessaging%2Fblocking%2Fbeans%2FInfiniteSubscriber.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/c04f0fef114f3cd38a528c2804f1e31d0cd11525/extensions%2Fsmallrye-reactive-messaging%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fsmallrye%2Freactivemessaging%2Fblocking%2Fbeans%2FInfiniteSubscriber.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fsmallrye-reactive-messaging%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fsmallrye%2Freactivemessaging%2Fblocking%2Fbeans%2FInfiniteSubscriber.java?ref=c04f0fef114f3cd38a528c2804f1e31d0cd11525",
      "patch": "@@ -1,7 +1,7 @@\n package io.quarkus.smallrye.reactivemessaging.blocking.beans;\n \n-import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n import javax.enterprise.context.ApplicationScoped;\n \n@@ -12,8 +12,8 @@\n @ApplicationScoped\n public class InfiniteSubscriber {\n \n-    private final List<Integer> payloads = new ArrayList<>();\n-    private final List<Integer> messages = new ArrayList<>();\n+    private final List<Integer> payloads = new CopyOnWriteArrayList<>();\n+    private final List<Integer> messages = new CopyOnWriteArrayList<>();\n \n     @Incoming(\"infinite-producer-payload\")\n     public SubscriberBuilder<Integer, Void> consumeFourItems() {",
      "parent_sha": "2851a887b9ac012dcbf9f8e7341b63b796cb64ae"
    }
  },
  {
    "oid": "4cf44caf22a1b4f03d65c9d27c793fce9cdab446",
    "message": "Fix user Maven config dir resolution in native mode",
    "date": "2022-02-25T13:44:24Z",
    "url": "https://github.com/quarkusio/quarkus/commit/4cf44caf22a1b4f03d65c9d27c793fce9cdab446",
    "details": {
      "sha": "8356d5b8adcb0f08415caf3318ef5e722d23cc7f",
      "filename": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/BootstrapMavenContext.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/4cf44caf22a1b4f03d65c9d27c793fce9cdab446/independent-projects%2Fbootstrap%2Fmaven-resolver%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2FBootstrapMavenContext.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/4cf44caf22a1b4f03d65c9d27c793fce9cdab446/independent-projects%2Fbootstrap%2Fmaven-resolver%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2FBootstrapMavenContext.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fbootstrap%2Fmaven-resolver%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2FBootstrapMavenContext.java?ref=4cf44caf22a1b4f03d65c9d27c793fce9cdab446",
      "patch": "@@ -94,9 +94,6 @@ public class BootstrapMavenContext {\n     private static final String MAVEN_TOP_LEVEL_PROJECT_BASEDIR = \"maven.top-level-basedir\";\n     private static final String SETTINGS_XML = \"settings.xml\";\n \n-    private static final String userHome = PropertyUtils.getUserHome();\n-    private static final File userMavenConfigurationHome = new File(userHome, \".m2\");\n-\n     private static final String EFFECTIVE_MODEL_BUILDER_PROP = \"quarkus.bootstrap.effective-model-builder\";\n \n     private boolean artifactTransferLogging;\n@@ -211,12 +208,16 @@ public File getUserSettings() {\n                         getCliOptions().getOptionValue(BootstrapMavenOptions.ALTERNATE_USER_SETTINGS),\n                         () -> {\n                             final String quarkusMavenSettings = getProperty(MAVEN_SETTINGS);\n-                            return quarkusMavenSettings == null ? new File(userMavenConfigurationHome, SETTINGS_XML)\n+                            return quarkusMavenSettings == null ? new File(getUserMavenConfigurationHome(), SETTINGS_XML)\n                                     : new File(quarkusMavenSettings);\n                         })\n                 : userSettings;\n     }\n \n+    private static File getUserMavenConfigurationHome() {\n+        return new File(PropertyUtils.getUserHome(), \".m2\");\n+    }\n+\n     private String getProperty(String name) {\n         String value = PropertyUtils.getProperty(name);\n         if (value != null) {\n@@ -326,7 +327,7 @@ private String resolveLocalRepo(Settings settings) {\n             return localRepo;\n         }\n         localRepo = settings.getLocalRepository();\n-        return localRepo == null ? new File(userMavenConfigurationHome, \"repository\").getAbsolutePath() : localRepo;\n+        return localRepo == null ? new File(getUserMavenConfigurationHome(), \"repository\").getAbsolutePath() : localRepo;\n     }\n \n     private File resolveSettingsFile(String settingsArg, Supplier<File> supplier) {",
      "parent_sha": "0574672bda6e2e7d26dba9590fc7acb47c079235"
    }
  },
  {
    "oid": "0f9d7ee74b7971065e9d76743b5760800f614c18",
    "message": "Possible NPE in camel extension, fixes #2273",
    "date": "2019-04-29T16:12:40Z",
    "url": "https://github.com/quarkusio/quarkus/commit/0f9d7ee74b7971065e9d76743b5760800f614c18",
    "details": {
      "sha": "6b5748f01f675e314159c6134bcb176cabc6d180",
      "filename": "extensions/camel/camel-core/runtime/src/main/java/io/quarkus/camel/core/runtime/support/FastCamelRuntime.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/0f9d7ee74b7971065e9d76743b5760800f614c18/extensions%2Fcamel%2Fcamel-core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcamel%2Fcore%2Fruntime%2Fsupport%2FFastCamelRuntime.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/0f9d7ee74b7971065e9d76743b5760800f614c18/extensions%2Fcamel%2Fcamel-core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcamel%2Fcore%2Fruntime%2Fsupport%2FFastCamelRuntime.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fcamel%2Fcamel-core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcamel%2Fcore%2Fruntime%2Fsupport%2FFastCamelRuntime.java?ref=0f9d7ee74b7971065e9d76743b5760800f614c18",
      "patch": "@@ -82,8 +82,8 @@ public void doInit() {\n             RuntimeSupport.bindProperties(pc.getInitialProperties(), pc, PFX_CAMEL_PROPERTIES);\n             context.addComponent(\"properties\", pc);\n \n-            fireEvent(InitializingEvent.class, new InitializingEvent());\n             this.context.getTypeConverterRegistry().setInjector(this.context.getInjector());\n+            fireEvent(InitializingEvent.class, new InitializingEvent());\n             if (buildTimeConfig.disableJaxb) {\n                 this.context.setModelJAXBContextFactory(() -> {\n                     throw new UnsupportedOperationException();",
      "parent_sha": "730f810b83e7795846e376203ac1835702f58678"
    }
  },
  {
    "oid": "9a3f2fef93c7511efd70af77491240f4a237c11b",
    "message": "Order REST resources on Resources overview alphabetically",
    "date": "2020-12-17T09:03:41Z",
    "url": "https://github.com/quarkusio/quarkus/commit/9a3f2fef93c7511efd70af77491240f4a237c11b",
    "details": {
      "sha": "ffc39c037020422b807c5b8000ce534d93e9e9dd",
      "filename": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java",
      "status": "modified",
      "additions": 27,
      "deletions": 5,
      "changes": 32,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/9a3f2fef93c7511efd70af77491240f4a237c11b/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2FNotFoundExceptionMapper.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/9a3f2fef93c7511efd70af77491240f4a237c11b/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2FNotFoundExceptionMapper.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2FNotFoundExceptionMapper.java?ref=9a3f2fef93c7511efd70af77491240f4a237c11b",
      "patch": "@@ -18,7 +18,6 @@\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -60,6 +59,8 @@ public class NotFoundExceptionMapper implements ExceptionMapper<NotFoundExceptio\n     private final static Variant JSON_VARIANT = new Variant(MediaType.APPLICATION_JSON_TYPE, (String) null, null);\n     private final static Variant HTML_VARIANT = new Variant(MediaType.TEXT_HTML_TYPE, (String) null, null);\n     private final static List<Variant> VARIANTS = Arrays.asList(JSON_VARIANT, HTML_VARIANT);\n+    private final static ResourceDescriptionComparator RESOURCE_DESCRIPTION_COMPARATOR = new ResourceDescriptionComparator();\n+    private final static MethodDescriptionComparator METHOD_DESCRIPTION_COMPARATOR = new MethodDescriptionComparator();\n \n     private volatile static String httpRoot = \"\";\n     private volatile static List<String> servletMappings = Collections.emptyList();\n@@ -123,7 +124,7 @@ private static String mostPreferredOrNull(MediaType[] mediaTypes) {\n \n         public static List<ResourceDescription> fromBoundResourceInvokers(\n                 Set<Map.Entry<String, List<ResourceInvoker>>> bound) {\n-            Map<String, ResourceDescription> descriptions = new HashMap<>();\n+            Map<String, ResourceDescription> descriptionMap = new HashMap<>();\n \n             for (Map.Entry<String, List<ResourceInvoker>> entry : bound) {\n                 for (ResourceInvoker invoker : entry.getValue()) {\n@@ -150,10 +151,10 @@ public static List<ResourceDescription> fromBoundResourceInvokers(\n                         continue;\n                     }\n \n-                    ResourceDescription description = descriptions.get(basePath);\n+                    ResourceDescription description = descriptionMap.get(basePath);\n                     if (description == null) {\n                         description = new ResourceDescription(basePath);\n-                        descriptions.put(basePath, description);\n+                        descriptionMap.put(basePath, description);\n                     }\n \n                     String subPath = \"\";\n@@ -184,7 +185,12 @@ public static List<ResourceDescription> fromBoundResourceInvokers(\n                 }\n             }\n \n-            return new LinkedList<>(descriptions.values());\n+            List<ResourceDescription> descriptions = new ArrayList<>(descriptionMap.values());\n+            descriptions.sort(RESOURCE_DESCRIPTION_COMPARATOR);\n+            for (ResourceDescription description : descriptions) {\n+                description.calls.sort(METHOD_DESCRIPTION_COMPARATOR);\n+            }\n+            return descriptions;\n         }\n     }\n \n@@ -404,4 +410,20 @@ public static void setAdditionalEndpoints(List<String> additionalEndpoints) {\n     public static void setReactiveRoutes(List<RouteDescription> reactiveRoutes) {\n         NotFoundExceptionMapper.reactiveRoutes = reactiveRoutes;\n     }\n+\n+    private static class ResourceDescriptionComparator implements Comparator<ResourceDescription> {\n+        @Override\n+        public int compare(\n+                NotFoundExceptionMapper.ResourceDescription d1, NotFoundExceptionMapper.ResourceDescription d2) {\n+            return d1.basePath.compareTo(d2.basePath);\n+        }\n+    }\n+\n+    private static class MethodDescriptionComparator implements Comparator<MethodDescription> {\n+        @Override\n+        public int compare(MethodDescription m1, MethodDescription m2) {\n+            int fullPathComparison = m1.fullPath.compareTo(m2.fullPath);\n+            return fullPathComparison == 0 ? m1.method.compareTo(m2.method) : fullPathComparison;\n+        }\n+    }\n }",
      "parent_sha": "b5067236af72ebba259057342dcc7fd00fb97438"
    }
  },
  {
    "oid": "f6388e08841129df8a50a92ad0bd0498b9a35660",
    "message": "Distinguish between Maven and Gradle for hint-text",
    "date": "2019-10-28T17:47:12Z",
    "url": "https://github.com/quarkusio/quarkus/commit/f6388e08841129df8a50a92ad0bd0498b9a35660",
    "details": {
      "sha": "96baee635ac59f5bdb7d91756782b1a1c342142e",
      "filename": "independent-projects/tools/common/src/main/java/io/quarkus/cli/commands/ListExtensions.java",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/f6388e08841129df8a50a92ad0bd0498b9a35660/independent-projects%2Ftools%2Fcommon%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcli%2Fcommands%2FListExtensions.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/f6388e08841129df8a50a92ad0bd0498b9a35660/independent-projects%2Ftools%2Fcommon%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcli%2Fcommands%2FListExtensions.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Ftools%2Fcommon%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcli%2Fcommands%2FListExtensions.java?ref=f6388e08841129df8a50a92ad0bd0498b9a35660",
      "patch": "@@ -16,6 +16,7 @@\n import org.apache.maven.model.Dependency;\n \n import io.quarkus.cli.commands.file.BuildFile;\n+import io.quarkus.cli.commands.file.GradleBuildFile;\n import io.quarkus.dependencies.Extension;\n \n public class ListExtensions {\n@@ -63,11 +64,22 @@ public void listExtensions(boolean all, String format, String search) throws IOE\n             loadedExtensions.forEach(extension -> display(extension, installed, all, currentFormatter));\n \n             if (\"concise\".equalsIgnoreCase(format)) {\n-                System.out.println(\"\\nTo get more information, append -Dquarkus.extension.format=full to your command line.\");\n+            \tif (this.buildFile instanceof GradleBuildFile) {\n+            \t\tSystem.out.println(\"\\nTo get more information, append --format=full to your command line.\");\n+            \t}\n+            \telse {\n+            \t\tSystem.out.println(\"\\nTo get more information, append -Dquarkus.extension.format=full to your command line.\");\n+            \t}\n             }\n \n-            System.out.println(\"\\nAdd an extension to your project by adding the dependency to your \" +\n-                    \"project or use `mvn quarkus:add-extension -Dextensions=\\\"artifactId\\\"`\");\n+            if (this.buildFile instanceof GradleBuildFile) {\n+            \tSystem.out.println(\"\\nAdd an extension to your project by adding the dependency to your \" +\n+                        \"build.gradle or use `./gradlew addExtension --extensions=\\\"artifactId\\\"`\");\n+            }\n+            else {\n+            \tSystem.out.println(\"\\nAdd an extension to your project by adding the dependency to your \" +\n+                        \"pom.xml or use `./mvnw quarkus:add-extension -Dextensions=\\\"artifactId\\\"`\");\n+            }\n         }\n     }\n ",
      "parent_sha": "63e3359846f5047b236d5380872bf87f39e0e825"
    }
  },
  {
    "oid": "9d0a0185979f7a68fc8b402de1372990dc3ff33e",
    "message": "Mojo parameter to skip the original jar renaming to xxx.original",
    "date": "2020-11-12T15:21:35Z",
    "url": "https://github.com/quarkusio/quarkus/commit/9d0a0185979f7a68fc8b402de1372990dc3ff33e",
    "details": {
      "sha": "04ff42b5acbf851724c65ae5f52a467f682f973b",
      "filename": "devtools/maven/src/main/java/io/quarkus/maven/BuildMojo.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/9d0a0185979f7a68fc8b402de1372990dc3ff33e/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FBuildMojo.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/9d0a0185979f7a68fc8b402de1372990dc3ff33e/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FBuildMojo.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FBuildMojo.java?ref=9d0a0185979f7a68fc8b402de1372990dc3ff33e",
      "patch": "@@ -52,6 +52,10 @@ public class BuildMojo extends QuarkusBootstrapMojo {\n     @Parameter(defaultValue = \"false\", property = \"quarkus.build.skip\")\n     private boolean skip = false;\n \n+    @Deprecated\n+    @Parameter(property = \"skipOriginalJarRename\")\n+    boolean skipOriginalJarRename;\n+\n     @Override\n     protected boolean beforeExecute() throws MojoExecutionException {\n         if (skip) {\n@@ -83,7 +87,8 @@ protected void doExecute() throws MojoExecutionException {\n                 Artifact original = mavenProject().getArtifact();\n                 if (result.getJar() != null) {\n \n-                    if (result.getJar().isUberJar() && result.getJar().getOriginalArtifact() != null) {\n+                    if (!skipOriginalJarRename && result.getJar().isUberJar()\n+                            && result.getJar().getOriginalArtifact() != null) {\n                         final Path standardJar = result.getJar().getOriginalArtifact();\n                         if (Files.exists(standardJar)) {\n                             final Path renamedOriginal = standardJar.getParent().toAbsolutePath()",
      "parent_sha": "bdb45e4dca8eb3fed9e36411d6ba229ccba3266c"
    }
  },
  {
    "oid": "ec5bccf43cfa301bc828fcf5cac5f8eff74fb002",
    "message": "Remove test-related entries in maven-compiler-plugin\n\nSome properties (like `testSource` and `testTarget`) are valid only for the `testCompile` mojo, however they are allowed to be declared as part of the maven-compiler-plugin configuration\n\nCo-authored-by: Justin Lee <julee@redhat.com>",
    "date": "2020-02-14T15:47:07Z",
    "url": "https://github.com/quarkusio/quarkus/commit/ec5bccf43cfa301bc828fcf5cac5f8eff74fb002",
    "details": {
      "sha": "089d4fcf293a6457760a7f5b0c1d51884caf68f3",
      "filename": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/ec5bccf43cfa301bc828fcf5cac5f8eff74fb002/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FDevMojo.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/ec5bccf43cfa301bc828fcf5cac5f8eff74fb002/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FDevMojo.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FDevMojo.java?ref=ec5bccf43cfa301bc828fcf5cac5f8eff74fb002",
      "patch": "@@ -370,9 +370,15 @@ private void handleAutoCompile() throws MojoExecutionException {\n     }\n \n     private void executeCompileGoal(Plugin plugin, String groupId, String artifactId) throws MojoExecutionException {\n-        Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();\n-        if (configuration == null) {\n-            configuration = MojoExecutor.configuration();\n+        Xpp3Dom configuration = MojoExecutor.configuration();\n+        Xpp3Dom pluginConfiguration = (Xpp3Dom) plugin.getConfiguration();\n+        if (pluginConfiguration != null) {\n+            //Filter out `test*` configurations\n+            for (Xpp3Dom child : pluginConfiguration.getChildren()) {\n+                if (!child.getName().startsWith(\"test\")) {\n+                    configuration.addChild(child);\n+                }\n+            }\n         }\n         MojoExecutor.executeMojo(\n                 MojoExecutor.plugin(",
      "parent_sha": "3c27c5c38585b554089d80a5870373b15a1bccd5"
    }
  },
  {
    "oid": "1924766f4f61127aebc292e5f5e278706f04dab1",
    "message": "Prevent 'response already written' exception\n\nIf auth fails here and the challenge has been sent there is nothing more\nto do.",
    "date": "2021-10-13T05:16:50Z",
    "url": "https://github.com/quarkusio/quarkus/commit/1924766f4f61127aebc292e5f5e278706f04dab1",
    "details": {
      "sha": "0b7ce8da9be292b974c7ed468581713c4f7a6d70",
      "filename": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpAuthorizer.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/1924766f4f61127aebc292e5f5e278706f04dab1/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fsecurity%2FHttpAuthorizer.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/1924766f4f61127aebc292e5f5e278706f04dab1/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fsecurity%2FHttpAuthorizer.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fsecurity%2FHttpAuthorizer.java?ref=1924766f4f61127aebc292e5f5e278706f04dab1",
      "patch": "@@ -9,8 +9,11 @@\n import javax.inject.Inject;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.quarkus.runtime.BlockingOperationControl;\n import io.quarkus.runtime.ExecutorRecorder;\n+import io.quarkus.security.AuthenticationFailedException;\n import io.quarkus.security.identity.IdentityProviderManager;\n import io.quarkus.security.identity.SecurityIdentity;\n import io.quarkus.security.spi.runtime.AuthorizationController;\n@@ -26,6 +29,8 @@\n @Singleton\n public class HttpAuthorizer {\n \n+    private static final Logger log = Logger.getLogger(HttpAuthorizer.class);\n+\n     @Inject\n     HttpAuthenticator httpAuthenticator;\n \n@@ -88,7 +93,6 @@ public void run() {\n     /**\n      * Checks that the request is allowed to proceed. If it is then {@link RoutingContext#next()} will\n      * be invoked, if not appropriate action will be taken to either report the failure or attempt authentication.\n-     *\n      */\n     public void checkPermission(RoutingContext routingContext) {\n         if (!controller.isAuthorizationEnabled()) {\n@@ -137,7 +141,12 @@ public void accept(HttpSecurityPolicy.CheckResult checkResult) {\n                 }, new Consumer<Throwable>() {\n                     @Override\n                     public void accept(Throwable throwable) {\n-                        routingContext.fail(throwable);\n+                        if (!routingContext.response().ended()) {\n+                            routingContext.fail(throwable);\n+                        } else if (!(throwable instanceof AuthenticationFailedException)) {\n+                            //don't log auth failure\n+                            log.error(\"Exception occurred during authorization\", throwable);\n+                        }\n                     }\n                 });\n     }",
      "parent_sha": "044ee5c8687c46d3f5beffb8cfe651a6d741363d"
    }
  },
  {
    "oid": "a2e9107ac4ae27877b3e2bf13bf48f93cac42468",
    "message": "Make delegate field of MongoTracingCommandListener final",
    "date": "2022-10-19T07:12:47Z",
    "url": "https://github.com/quarkusio/quarkus/commit/a2e9107ac4ae27877b3e2bf13bf48f93cac42468",
    "details": {
      "sha": "e218eab5960cab59d36637cc1c6f417e8db0b409",
      "filename": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/tracing/MongoTracingCommandListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/a2e9107ac4ae27877b3e2bf13bf48f93cac42468/extensions%2Fmongodb-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmongodb%2Ftracing%2FMongoTracingCommandListener.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/a2e9107ac4ae27877b3e2bf13bf48f93cac42468/extensions%2Fmongodb-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmongodb%2Ftracing%2FMongoTracingCommandListener.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fmongodb-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmongodb%2Ftracing%2FMongoTracingCommandListener.java?ref=a2e9107ac4ae27877b3e2bf13bf48f93cac42468",
      "patch": "@@ -18,7 +18,7 @@ public class MongoTracingCommandListener implements CommandListener {\n \n     private static final Logger LOGGER = Logger.getLogger(MongoTracingCommandListener.class);\n \n-    private TracingCommandListener delegate;\n+    private final TracingCommandListener delegate;\n \n     public MongoTracingCommandListener() {\n         this.delegate = new TracingCommandListener.Builder(GlobalTracer.get()).build();",
      "parent_sha": "53a2c09b5176151bbef59eeb340feeec81357fc3"
    }
  },
  {
    "oid": "c2362019fedec135bc6879e64f7b1d8fdd92420b",
    "message": "Do not acquire the per-request Session when getting the SessionFactory from a TransactionScopedSession\n\nThis is important for Hibernate Search in particular.\n\nSigned-off-by: Yoann Rodi\u00e8re <yoann@hibernate.org>",
    "date": "2020-12-07T10:40:42Z",
    "url": "https://github.com/quarkusio/quarkus/commit/c2362019fedec135bc6879e64f7b1d8fdd92420b",
    "details": {
      "sha": "3eafb8353c0516f7d6dc0bb27c5f28c239d96a70",
      "filename": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/session/TransactionScopedSession.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/c2362019fedec135bc6879e64f7b1d8fdd92420b/extensions%2Fhibernate-orm%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fruntime%2Fsession%2FTransactionScopedSession.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/c2362019fedec135bc6879e64f7b1d8fdd92420b/extensions%2Fhibernate-orm%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fruntime%2Fsession%2FTransactionScopedSession.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fhibernate-orm%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fruntime%2Fsession%2FTransactionScopedSession.java?ref=c2362019fedec135bc6879e64f7b1d8fdd92420b",
      "patch": "@@ -502,9 +502,7 @@ public Transaction getTransaction() {\n \n     @Override\n     public EntityManagerFactory getEntityManagerFactory() {\n-        try (SessionResult emr = acquireSession()) {\n-            return emr.session.getEntityManagerFactory();\n-        }\n+        return sessionFactory;\n     }\n \n     @Override\n@@ -596,9 +594,7 @@ public CacheMode getCacheMode() {\n \n     @Override\n     public SessionFactory getSessionFactory() {\n-        try (SessionResult emr = acquireSession()) {\n-            return emr.session.getSessionFactory();\n-        }\n+        return sessionFactory;\n     }\n \n     @Override",
      "parent_sha": "b5e6eb60cccfa8acad601662c6f855b37fd2c63e"
    }
  },
  {
    "oid": "98e054c240986514ebe3f5b766e84ef663daccc4",
    "message": "Fix #14836\n\nAvoid using `await` as it's forbidden from the event loop.",
    "date": "2021-02-08T11:47:15Z",
    "url": "https://github.com/quarkusio/quarkus/commit/98e054c240986514ebe3f5b766e84ef663daccc4",
    "details": {
      "sha": "469a53a9c3ddca35f3fe0a4ab981f3c560cea3b9",
      "filename": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailTemplateInstanceImpl.java",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/98e054c240986514ebe3f5b766e84ef663daccc4/extensions%2Fmailer%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmailer%2Fruntime%2FMailTemplateInstanceImpl.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/98e054c240986514ebe3f5b766e84ef663daccc4/extensions%2Fmailer%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmailer%2Fruntime%2FMailTemplateInstanceImpl.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fmailer%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmailer%2Fruntime%2FMailTemplateInstanceImpl.java?ref=98e054c240986514ebe3f5b766e84ef663daccc4",
      "patch": "@@ -115,7 +115,7 @@ public CompletionStage<? extends String> get() {\n             if (results.isEmpty()) {\n                 throw new IllegalStateException(\"No suitable template variant found\");\n             }\n-            List<Uni<String>> unis = results.stream().map(Result::getValue).collect(Collectors.toList());\n+            List<Uni<String>> unis = results.stream().map(Result::resolve).collect(Collectors.toList());\n             return Uni.combine().all().unis(unis)\n                     .combinedWith(combine(results))\n                     .chain(new Function<Mail, Uni<? extends Void>>() {\n@@ -132,13 +132,14 @@ public Uni<? extends Void> apply(Mail m) {\n     private Function<List<?>, Mail> combine(List<Result> results) {\n         return new Function<List<?>, Mail>() {\n             @Override\n-            public Mail apply(List<?> ignored) {\n-                for (Result res : results) {\n-                    // We can safely access the content here: 1. it has been resolved, 2. it's cached.\n-                    String content = res.value.await().indefinitely();\n-                    if (res.variant.getContentType().equals(Variant.TEXT_HTML)) {\n+            public Mail apply(List<?> resolved) {\n+                for (int i = 0; i < resolved.size(); i++) {\n+                    Result result = results.get(i);\n+                    // We can safely cast, as we know that the results are Strings.\n+                    String content = (String) resolved.get(i);\n+                    if (result.variant.getContentType().equals(Variant.TEXT_HTML)) {\n                         mail.setHtml(content);\n-                    } else if (res.variant.getContentType().equals(Variant.TEXT_PLAIN)) {\n+                    } else if (result.variant.getContentType().equals(Variant.TEXT_PLAIN)) {\n                         mail.setText(content);\n                     }\n                 }\n@@ -154,10 +155,10 @@ static class Result {\n \n         public Result(Variant variant, Uni<String> result) {\n             this.variant = variant;\n-            this.value = result.cache();\n+            this.value = result;\n         }\n \n-        Uni<String> getValue() {\n+        Uni<String> resolve() {\n             return value;\n         }\n     }",
      "parent_sha": "3121bac40ae8e6275d25ed60cb91a447f8699d3a"
    }
  },
  {
    "oid": "2d2b78d3b63154d4cdb2da80e659f8bbbc40a296",
    "message": "issue#7535 Enhance the NativeImageLauncher, used by the NativeImage test extension, to support guessing the application's native image path on Java 11+ runtimes",
    "date": "2020-03-04T04:32:47Z",
    "url": "https://github.com/quarkusio/quarkus/commit/2d2b78d3b63154d4cdb2da80e659f8bbbc40a296",
    "details": {
      "sha": "968d881e4fe2ce542509e86899591e300bf0e91a",
      "filename": "test-framework/common/src/main/java/io/quarkus/test/common/NativeImageLauncher.java",
      "status": "modified",
      "additions": 52,
      "deletions": 30,
      "changes": 82,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/2d2b78d3b63154d4cdb2da80e659f8bbbc40a296/test-framework%2Fcommon%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fcommon%2FNativeImageLauncher.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/2d2b78d3b63154d4cdb2da80e659f8bbbc40a296/test-framework%2Fcommon%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fcommon%2FNativeImageLauncher.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/test-framework%2Fcommon%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fcommon%2FNativeImageLauncher.java?ref=2d2b78d3b63154d4cdb2da80e659f8bbbc40a296",
      "patch": "@@ -9,6 +9,7 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.nio.charset.StandardCharsets;\n+import java.security.CodeSource;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -115,36 +116,19 @@ private static String guessPath(Class<?> testClass) {\n         if (cl instanceof URLClassLoader) {\n             URL[] urls = ((URLClassLoader) cl).getURLs();\n             for (URL url : urls) {\n-                if (url.getProtocol().equals(\"file\") && url.getPath().endsWith(\"test-classes/\")) {\n-                    //we have the maven test classes dir\n-                    File testClasses = new File(url.getPath());\n-                    for (File file : testClasses.getParentFile().listFiles()) {\n-                        if (file.getName().endsWith(\"-runner\")) {\n-                            logGuessedPath(file.getAbsolutePath());\n-                            return file.getAbsolutePath();\n-                        }\n-                    }\n-                } else if (url.getProtocol().equals(\"file\") && url.getPath().endsWith(\"test/\")) {\n-                    //we have the gradle test classes dir, build/classes/java/test\n-                    File testClasses = new File(url.getPath());\n-                    for (File file : testClasses.getParentFile().getParentFile().getParentFile().listFiles()) {\n-                        if (file.getName().endsWith(\"-runner\")) {\n-                            logGuessedPath(file.getAbsolutePath());\n-                            return file.getAbsolutePath();\n-                        }\n-                    }\n-                } else if (url.getProtocol().equals(\"file\") && url.getPath().contains(\"/target/surefire/\")) {\n-                    //this will make mvn failsafe:integration-test work\n-                    String path = url.getPath();\n-                    int index = path.lastIndexOf(\"/target/\");\n-                    File targetDir = new File(path.substring(0, index) + \"/target/\");\n-                    for (File file : targetDir.listFiles()) {\n-                        if (file.getName().endsWith(\"-runner\")) {\n-                            logGuessedPath(file.getAbsolutePath());\n-                            return file.getAbsolutePath();\n-                        }\n-                    }\n-\n+                final String applicationNativeImagePath = guessPath(url);\n+                if (applicationNativeImagePath != null) {\n+                    return applicationNativeImagePath;\n+                }\n+            }\n+        } else {\n+            // try the CodeSource way\n+            final CodeSource codeSource = testClass.getProtectionDomain().getCodeSource();\n+            if (codeSource != null) {\n+                final URL codeSourceLocation = codeSource.getLocation();\n+                final String applicationNativeImagePath = guessPath(codeSourceLocation);\n+                if (applicationNativeImagePath != null) {\n+                    return applicationNativeImagePath;\n                 }\n             }\n         }\n@@ -153,6 +137,44 @@ private static String guessPath(Class<?> testClass) {\n                 \"Unable to automatically find native image, please set the native.image.path to the native executable you wish to test\");\n     }\n \n+    private static String guessPath(final URL url) {\n+        if (url == null) {\n+            return null;\n+        }\n+        if (url.getProtocol().equals(\"file\") && url.getPath().endsWith(\"test-classes/\")) {\n+            //we have the maven test classes dir\n+            File testClasses = new File(url.getPath());\n+            for (File file : testClasses.getParentFile().listFiles()) {\n+                if (file.getName().endsWith(\"-runner\")) {\n+                    logGuessedPath(file.getAbsolutePath());\n+                    return file.getAbsolutePath();\n+                }\n+            }\n+        } else if (url.getProtocol().equals(\"file\") && url.getPath().endsWith(\"test/\")) {\n+            //we have the gradle test classes dir, build/classes/java/test\n+            File testClasses = new File(url.getPath());\n+            for (File file : testClasses.getParentFile().getParentFile().getParentFile().listFiles()) {\n+                if (file.getName().endsWith(\"-runner\")) {\n+                    logGuessedPath(file.getAbsolutePath());\n+                    return file.getAbsolutePath();\n+                }\n+            }\n+        } else if (url.getProtocol().equals(\"file\") && url.getPath().contains(\"/target/surefire/\")) {\n+            //this will make mvn failsafe:integration-test work\n+            String path = url.getPath();\n+            int index = path.lastIndexOf(\"/target/\");\n+            File targetDir = new File(path.substring(0, index) + \"/target/\");\n+            for (File file : targetDir.listFiles()) {\n+                if (file.getName().endsWith(\"-runner\")) {\n+                    logGuessedPath(file.getAbsolutePath());\n+                    return file.getAbsolutePath();\n+                }\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n     private static void logGuessedPath(String guessedPath) {\n         System.err.println(\"======================================================================================\");\n         System.err.println(\"  native.image.path was not set, making a guess for the correct path of native image\");",
      "parent_sha": "f87c4457248c402466cb9e34d1fc3013dd03d50b"
    }
  },
  {
    "oid": "f4b1a4b1226973d209267b2f079a2e67d74626da",
    "message": "Properly handle sources configured with ${project.basedir} in dev mode\n\nFixes: #2367",
    "date": "2019-05-09T15:13:55Z",
    "url": "https://github.com/quarkusio/quarkus/commit/f4b1a4b1226973d209267b2f079a2e67d74626da",
    "details": {
      "sha": "254de4bf024f6415a7d035b9b27614d96b4cd07a",
      "filename": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/f4b1a4b1226973d209267b2f079a2e67d74626da/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2Fworkspace%2FLocalProject.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/f4b1a4b1226973d209267b2f079a2e67d74626da/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2Fworkspace%2FLocalProject.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2Fworkspace%2FLocalProject.java?ref=f4b1a4b1226973d209267b2f079a2e67d74626da",
      "patch": "@@ -44,6 +44,7 @@ public class LocalProject {\n \n     public static final String PROJECT_GROUPID = \"${project.groupId}\";\n \n+    private static final String PROJECT_BASEDIR = \"${project.basedir}\";\n     private static final String POM_XML = \"pom.xml\";\n \n     public static LocalProject load(Path path) throws BootstrapException {\n@@ -187,7 +188,8 @@ public Path getClassesDir() {\n \n     public Path getSourcesSourcesDir() {\n         if (getRawModel().getBuild() != null && getRawModel().getBuild().getSourceDirectory() != null) {\n-            return Paths.get(getRawModel().getBuild().getSourceDirectory());\n+            String originalValue = getRawModel().getBuild().getSourceDirectory();\n+            return Paths.get(originalValue.startsWith(PROJECT_BASEDIR) ? originalValue.replace(PROJECT_BASEDIR, this.dir.toString()) : originalValue);\n         }\n         return dir.resolve(\"src/main/java\");\n     }",
      "parent_sha": "edeeb49cbcc3db1ef3b09f313519f5f20addc621"
    }
  },
  {
    "oid": "ab1c2ed72add0cc55561253885d3bd742f66d501",
    "message": "stream().anyMatch should be faster than .filter().count()",
    "date": "2021-11-24T19:42:34Z",
    "url": "https://github.com/quarkusio/quarkus/commit/ab1c2ed72add0cc55561253885d3bd742f66d501",
    "details": {
      "sha": "d4d7c80462c9018bf1d344f0975529f929965039",
      "filename": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/AdditionalJpaOperations.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/ab1c2ed72add0cc55561253885d3bd742f66d501/extensions%2Fpanache%2Fhibernate-orm-panache%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fpanache%2Fruntime%2FAdditionalJpaOperations.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/ab1c2ed72add0cc55561253885d3bd742f66d501/extensions%2Fpanache%2Fhibernate-orm-panache%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fpanache%2Fruntime%2FAdditionalJpaOperations.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fpanache%2Fhibernate-orm-panache%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fpanache%2Fruntime%2FAdditionalJpaOperations.java?ref=ab1c2ed72add0cc55561253885d3bd742f66d501",
      "patch": "@@ -88,9 +88,8 @@ private static boolean deleteOnCascadeDetected(AbstractJpaOperations<?> jpaOpera\n         boolean doCascade = Arrays.stream(propertyCascadeStyles)\n                 .anyMatch(cascadeStyle -> cascadeStyle.doCascade(CascadingActions.DELETE));\n         boolean hasElementCollection = declaredAttributes.stream()\n-                .filter(attribute -> attribute.getPersistentAttributeType()\n-                        .equals(Attribute.PersistentAttributeType.ELEMENT_COLLECTION))\n-                .count() > 0;\n+                .anyMatch(attribute -> attribute.getPersistentAttributeType()\n+                        .equals(Attribute.PersistentAttributeType.ELEMENT_COLLECTION));\n         return doCascade || hasElementCollection;\n \n     }",
      "parent_sha": "3baccd0d512d87b0e3d711caf457a28d4de179ef"
    }
  },
  {
    "oid": "3d22ce5bf3352b2463600583ca272c1845843207",
    "message": "Replace InputStream bytes with InputStream.readAllBytes in Spring Cloud Config client\n\nThis not only results is less code, but it's also more efficient as\nit generally results in less array copying",
    "date": "2022-08-01T12:23:54Z",
    "url": "https://github.com/quarkusio/quarkus/commit/3d22ce5bf3352b2463600583ca272c1845843207",
    "details": {
      "sha": "fee1dc0966d97cce4a1c663a3546533f51323e33",
      "filename": "extensions/spring-cloud-config-client/runtime/src/main/java/io/quarkus/spring/cloud/config/client/runtime/VertxSpringCloudConfigGateway.java",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/3d22ce5bf3352b2463600583ca272c1845843207/extensions%2Fspring-cloud-config-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fspring%2Fcloud%2Fconfig%2Fclient%2Fruntime%2FVertxSpringCloudConfigGateway.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/3d22ce5bf3352b2463600583ca272c1845843207/extensions%2Fspring-cloud-config-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fspring%2Fcloud%2Fconfig%2Fclient%2Fruntime%2FVertxSpringCloudConfigGateway.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fspring-cloud-config-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fspring%2Fcloud%2Fconfig%2Fclient%2Fruntime%2FVertxSpringCloudConfigGateway.java?ref=3d22ce5bf3352b2463600583ca272c1845843207",
      "patch": "@@ -2,7 +2,6 @@\n \n import static io.vertx.core.spi.resolver.ResolverProvider.DISABLE_DNS_RESOLVER_PROP_NAME;\n \n-import java.io.ByteArrayOutputStream;\n import java.io.InputStream;\n import java.net.URI;\n import java.net.URISyntaxException;\n@@ -168,14 +167,7 @@ private static byte[] storeBytes(Path keyStorePath)\n     }\n \n     private static byte[] allBytes(InputStream inputStream) throws Exception {\n-        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-        int nRead;\n-        byte[] data = new byte[1024];\n-        while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n-            buffer.write(data, 0, nRead);\n-        }\n-        buffer.flush();\n-        return buffer.toByteArray();\n+        return inputStream.readAllBytes();\n     }\n \n     private URI determineBaseUri(SpringCloudConfigClientConfig springCloudConfigClientConfig) throws URISyntaxException {",
      "parent_sha": "34f683a33a18d4d367b72f623fb91af98192bf8a"
    }
  },
  {
    "oid": "b361dbe92322bf8e70ae70afb28a07a99689be8c",
    "message": "Fix RESTEasy Reactive race\n\nThese executor dispatch has to be the last thing in the method, to\nprevent a possible race\n\nFixes #19471",
    "date": "2021-08-19T03:45:18Z",
    "url": "https://github.com/quarkusio/quarkus/commit/b361dbe92322bf8e70ae70afb28a07a99689be8c",
    "details": {
      "sha": "d84d27bb11bbf21bd959d008f869aa4f31cd4d8b",
      "filename": "independent-projects/resteasy-reactive/common/runtime/src/main/java/org/jboss/resteasy/reactive/common/core/AbstractResteasyReactiveContext.java",
      "status": "modified",
      "additions": 12,
      "deletions": 15,
      "changes": 27,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/b361dbe92322bf8e70ae70afb28a07a99689be8c/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fcore%2FAbstractResteasyReactiveContext.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/b361dbe92322bf8e70ae70afb28a07a99689be8c/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fcore%2FAbstractResteasyReactiveContext.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fcore%2FAbstractResteasyReactiveContext.java?ref=b361dbe92322bf8e70ae70afb28a07a99689be8c",
      "patch": "@@ -125,14 +125,15 @@ public void run() {\n         //if this is a blocking target we don't activate for the initial non-blocking part\n         //unless there are pre-mapping filters as these may require CDI\n         boolean disasociateRequestScope = false;\n+        boolean aborted = false;\n+        Executor exec = null;\n         try {\n             while (position < handlers.length) {\n                 int pos = position;\n                 position++; //increment before, as reset may reset it to zero\n                 try {\n                     handlers[pos].handle((T) this);\n                     if (suspended) {\n-                        Executor exec = null;\n                         synchronized (this) {\n                             if (isRequestScopeManagementRequired()) {\n                                 if (requestScopeActivated) {\n@@ -151,40 +152,29 @@ public void run() {\n                                 exec = this.executor;\n                                 // prevent future suspensions from re-submitting the task\n                                 this.executor = null;\n+                                return;\n                             } else if (suspended) {\n                                 running = false;\n                                 processingSuspended = true;\n                                 return;\n                             }\n                         }\n-                        if (exec != null) {\n-                            //outside sync block\n-                            exec.execute(this);\n-                            processingSuspended = true;\n-                            return;\n-                        }\n                     }\n                 } catch (Throwable t) {\n-                    boolean over = handlers == abortHandlerChain;\n+                    aborted = handlers == abortHandlerChain;\n                     if (t instanceof PreserveTargetException) {\n                         handleException(t.getCause(), true);\n                     } else {\n                         handleException(t);\n                     }\n-                    if (over) {\n-                        running = false;\n-                        return;\n-                    }\n                 }\n             }\n-            running = false;\n         } catch (Throwable t) {\n             handleUnrecoverableError(t);\n-            running = false;\n         } finally {\n             // we need to make sure we don't close the underlying stream in the event loop if the task\n             // has been offloaded to the executor\n-            if (position == handlers.length && !processingSuspended) {\n+            if ((position == handlers.length && !processingSuspended) || aborted) {\n                 close();\n             } else {\n                 if (disasociateRequestScope) {\n@@ -193,6 +183,13 @@ public void run() {\n                 }\n                 beginAsyncProcessing();\n             }\n+            synchronized (this) {\n+                running = false;\n+            }\n+            if (exec != null) {\n+                //outside sync block\n+                exec.execute(this);\n+            }\n         }\n     }\n ",
      "parent_sha": "77d652ed3ebac437870f7a72cca2ce9b02c26fb7"
    }
  },
  {
    "oid": "0e9a248b9882980b92e0161dda9dec16d7f7d726",
    "message": "Skip manifest entry properties that are missing values",
    "date": "2023-05-25T08:14:38Z",
    "url": "https://github.com/quarkusio/quarkus/commit/0e9a248b9882980b92e0161dda9dec16d7f7d726",
    "details": {
      "sha": "c5d3b5ccb613f000e828b90a93b1b002773c1c14",
      "filename": "devtools/maven/src/main/java/io/quarkus/maven/QuarkusBootstrapProvider.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/0e9a248b9882980b92e0161dda9dec16d7f7d726/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FQuarkusBootstrapProvider.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/0e9a248b9882980b92e0161dda9dec16d7f7d726/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FQuarkusBootstrapProvider.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FQuarkusBootstrapProvider.java?ref=0e9a248b9882980b92e0161dda9dec16d7f7d726",
      "patch": "@@ -197,8 +197,11 @@ private CuratedApplication doBootstrap(QuarkusBootstrapMojo mojo, LaunchMode mod\n             effectiveProperties.putIfAbsent(\"quarkus.application.version\", mojo.mavenProject().getVersion());\n \n             for (Map.Entry<String, String> attribute : mojo.manifestEntries().entrySet()) {\n-                effectiveProperties.put(toManifestAttributeKey(attribute.getKey()),\n-                        attribute.getValue());\n+                if (attribute.getValue() == null) {\n+                    mojo.getLog().warn(\"Skipping manifest entry property \" + attribute.getKey() + \" with a missing value\");\n+                } else {\n+                    effectiveProperties.put(toManifestAttributeKey(attribute.getKey()), attribute.getValue());\n+                }\n             }\n             for (ManifestSection section : mojo.manifestSections()) {\n                 for (Map.Entry<String, String> attribute : section.getManifestEntries().entrySet()) {",
      "parent_sha": "b0708bc9183f048867e89e7018ec1396035f9f42"
    }
  },
  {
    "oid": "56fdbd9d0efb313c4eb600573eda3d407d415164",
    "message": "Also handle the RHBQ Platform",
    "date": "2022-03-30T08:01:11Z",
    "url": "https://github.com/quarkusio/quarkus/commit/56fdbd9d0efb313c4eb600573eda3d407d415164",
    "details": {
      "sha": "de85810a434c5cb63d14a3150d9b7343742bd298",
      "filename": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/56fdbd9d0efb313c4eb600573eda3d407d415164/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fcodestarts%2Fquarkus%2FQuarkusCodestartCatalog.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/56fdbd9d0efb313c4eb600573eda3d407d415164/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fcodestarts%2Fquarkus%2FQuarkusCodestartCatalog.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fcodestarts%2Fquarkus%2FQuarkusCodestartCatalog.java?ref=56fdbd9d0efb313c4eb600573eda3d407d415164",
      "patch": "@@ -43,6 +43,7 @@ public final class QuarkusCodestartCatalog extends GenericCodestartCatalog<Quark\n     public static final String INPUT_PROVIDED_CODE_KEY = \"provided-code\";\n     private static final String IO_QUARKUS_GROUP_ID = \"io.quarkus\";\n     private static final String IO_QUARKUS_PLATFORM_GROUP_ID = \"io.quarkus.platform\";\n+    private static final String COM_REDHAT_QUARKUS_PLATFORM_GROUP_ID = \"com.redhat.quarkus.platform\";\n     private static final String QUARKUS_BOM = \"quarkus-bom\";\n     private static final String QUARKUS_UNIVERSE_BOM = \"quarkus-universe-bom\";\n     private static final Set<String> LANGUAGE_EXTENSIONS = Set.of(\"quarkus-kotlin\", \"quarkus-scala\");\n@@ -211,7 +212,8 @@ private boolean isUniverseBom(ArtifactCoords artifactCoords) {\n     }\n \n     private boolean isPlatformBom(ArtifactCoords artifactCoords) {\n-        return IO_QUARKUS_PLATFORM_GROUP_ID.equals(artifactCoords.getGroupId())\n+        return (IO_QUARKUS_PLATFORM_GROUP_ID.equals(artifactCoords.getGroupId()) ||\n+                COM_REDHAT_QUARKUS_PLATFORM_GROUP_ID.equals(artifactCoords.getGroupId()))\n                 && QUARKUS_BOM.equals(artifactCoords.getArtifactId());\n     }\n ",
      "parent_sha": "d2214047fc52537d3895dec43c0e8cdfd4adf956"
    }
  },
  {
    "oid": "aab2ab0435a02bc31409858b4fbc193bdaccee9a",
    "message": "Hibernate ORM: minor refactoring in mergeSettings",
    "date": "2019-08-29T08:04:29Z",
    "url": "https://github.com/quarkusio/quarkus/commit/aab2ab0435a02bc31409858b4fbc193bdaccee9a",
    "details": {
      "sha": "32127acbb2033d5d8b95bc95f52c495b478f6fbd",
      "filename": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/FastBootMetadataBuilder.java",
      "status": "modified",
      "additions": 23,
      "deletions": 22,
      "changes": 45,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/aab2ab0435a02bc31409858b4fbc193bdaccee9a/extensions%2Fhibernate-orm%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fruntime%2Fboot%2FFastBootMetadataBuilder.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/aab2ab0435a02bc31409858b4fbc193bdaccee9a/extensions%2Fhibernate-orm%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fruntime%2Fboot%2FFastBootMetadataBuilder.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fhibernate-orm%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Form%2Fruntime%2Fboot%2FFastBootMetadataBuilder.java?ref=aab2ab0435a02bc31409858b4fbc193bdaccee9a",
      "patch": "@@ -224,63 +224,64 @@ private BootstrapServiceRegistry buildBootstrapServiceRegistry(ClassLoaderServic\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     private MergedSettings mergeSettings(PersistenceUnitDescriptor persistenceUnit) {\n         final MergedSettings mergedSettings = new MergedSettings();\n+        final Map cfg = mergedSettings.configurationValues;\n \n         // first, apply persistence.xml-defined settings\n         if (persistenceUnit.getProperties() != null) {\n-            mergedSettings.configurationValues.putAll(persistenceUnit.getProperties());\n+            cfg.putAll(persistenceUnit.getProperties());\n         }\n \n-        mergedSettings.configurationValues.put(PERSISTENCE_UNIT_NAME, persistenceUnit.getName());\n+        cfg.put(PERSISTENCE_UNIT_NAME, persistenceUnit.getName());\n \n-        applyTransactionProperties(persistenceUnit, mergedSettings.configurationValues);\n-        applyJdbcConnectionProperties(mergedSettings.configurationValues);\n+        applyTransactionProperties(persistenceUnit, cfg);\n+        applyJdbcConnectionProperties(cfg);\n \n         // unsupported FLUSH_BEFORE_COMPLETION\n \n-        if (readBooleanConfigurationValue(mergedSettings.configurationValues, Environment.FLUSH_BEFORE_COMPLETION)) {\n-            mergedSettings.configurationValues.put(Environment.FLUSH_BEFORE_COMPLETION, \"false\");\n+        if (readBooleanConfigurationValue(cfg, Environment.FLUSH_BEFORE_COMPLETION)) {\n+            cfg.put(Environment.FLUSH_BEFORE_COMPLETION, \"false\");\n             LOG.definingFlushBeforeCompletionIgnoredInHem(Environment.FLUSH_BEFORE_COMPLETION);\n         }\n \n         // Quarkus specific\n \n-        mergedSettings.configurationValues.put(\"hibernate.temp.use_jdbc_metadata_defaults\", \"false\");\n+        cfg.put(\"hibernate.temp.use_jdbc_metadata_defaults\", \"false\");\n \n         //Enable the new Enhanced Proxies capability (unless it was specifically disabled):\n-        if (!mergedSettings.configurationValues.containsKey(AvailableSettings.ALLOW_ENHANCEMENT_AS_PROXY)) {\n-            mergedSettings.configurationValues.put(AvailableSettings.ALLOW_ENHANCEMENT_AS_PROXY, Boolean.TRUE.toString());\n+        if (!cfg.containsKey(AvailableSettings.ALLOW_ENHANCEMENT_AS_PROXY)) {\n+            cfg.put(AvailableSettings.ALLOW_ENHANCEMENT_AS_PROXY, Boolean.TRUE.toString());\n         }\n         //Always Order batch updates as it prevents contention on the data (unless it was disabled)\n-        if (!mergedSettings.configurationValues.containsKey(AvailableSettings.ORDER_UPDATES)) {\n-            mergedSettings.configurationValues.put(AvailableSettings.ORDER_UPDATES, Boolean.TRUE.toString());\n+        if (!cfg.containsKey(AvailableSettings.ORDER_UPDATES)) {\n+            cfg.put(AvailableSettings.ORDER_UPDATES, Boolean.TRUE.toString());\n         }\n         //Agroal already does disable auto-commit, so Hibernate ORM should trust that:\n-        mergedSettings.configurationValues.put(AvailableSettings.CONNECTION_PROVIDER_DISABLES_AUTOCOMMIT, Boolean.TRUE.toString());\n+        cfg.put(AvailableSettings.CONNECTION_PROVIDER_DISABLES_AUTOCOMMIT, Boolean.TRUE.toString());\n \n-        if (readBooleanConfigurationValue(mergedSettings.configurationValues, WRAP_RESULT_SETS)) {\n+        if (readBooleanConfigurationValue(cfg, WRAP_RESULT_SETS)) {\n             LOG.warn(\"Wrapping result sets is not supported. Setting \" + WRAP_RESULT_SETS + \" to false.\");\n         }\n-        mergedSettings.configurationValues.put(WRAP_RESULT_SETS, \"false\");\n+        cfg.put(WRAP_RESULT_SETS, \"false\");\n \n-        if (readBooleanConfigurationValue(mergedSettings.configurationValues, XML_MAPPING_ENABLED)) {\n+        if (readBooleanConfigurationValue(cfg, XML_MAPPING_ENABLED)) {\n             LOG.warn(\"XML mapping is not supported. Setting \" + XML_MAPPING_ENABLED + \" to false.\");\n         }\n-        mergedSettings.configurationValues.put(XML_MAPPING_ENABLED, \"false\");\n+        cfg.put(XML_MAPPING_ENABLED, \"false\");\n \n         // Note: this one is not a boolean, just having the property enables it\n-        if (mergedSettings.configurationValues.containsKey(JACC_ENABLED)) {\n+        if (cfg.containsKey(JACC_ENABLED)) {\n             LOG.warn(\"JACC is not supported. Disabling it.\");\n         }\n-        mergedSettings.configurationValues.remove(JACC_ENABLED);\n+        cfg.remove(JACC_ENABLED);\n \n-        enableCachingByDefault(mergedSettings.configurationValues);\n+        enableCachingByDefault(cfg);\n \n         // here we are going to iterate the merged config settings looking for:\n         // 1) additional JACC permissions\n         // 2) additional cache region declarations\n         //\n         // we will also clean up any references with null entries\n-        Iterator itr = mergedSettings.configurationValues.entrySet().iterator();\n+        Iterator itr = cfg.entrySet().iterator();\n         while (itr.hasNext()) {\n             final Map.Entry entry = (Map.Entry) itr.next();\n             if (entry.getValue() == null) {\n@@ -308,10 +309,10 @@ private MergedSettings mergeSettings(PersistenceUnitDescriptor persistenceUnit)\n             }\n         }\n \n-        mergedSettings.configurationValues.put(org.hibernate.cfg.AvailableSettings.CACHE_REGION_FACTORY,\n+        cfg.put(org.hibernate.cfg.AvailableSettings.CACHE_REGION_FACTORY,\n                 QuarkusInfinispanRegionFactory.class.getName());\n \n-        HibernateOrmIntegrations.contributeBootProperties((k, v) -> mergedSettings.configurationValues.put(k, v));\n+        HibernateOrmIntegrations.contributeBootProperties((k, v) -> cfg.put(k, v));\n \n         return mergedSettings;\n     }",
      "parent_sha": "9b01d9a8da6ab46a70aa068d3d57acd9b70d736e"
    }
  },
  {
    "oid": "1ea7c8bc54f582a58d0003480658fc246e6f1424",
    "message": "Relocate all profiles in smallrye.config to quarkus.config",
    "date": "2022-10-31T17:17:05Z",
    "url": "https://github.com/quarkusio/quarkus/commit/1ea7c8bc54f582a58d0003480658fc246e6f1424",
    "details": {
      "sha": "8b602411e5a77b3bf24982d4975b7360b79cd9b8",
      "filename": "core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigUtils.java",
      "status": "modified",
      "additions": 23,
      "deletions": 14,
      "changes": 37,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/1ea7c8bc54f582a58d0003480658fc246e6f1424/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConfigUtils.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/1ea7c8bc54f582a58d0003480658fc246e6f1424/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConfigUtils.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConfigUtils.java?ref=1ea7c8bc54f582a58d0003480658fc246e6f1424",
      "patch": "@@ -24,6 +24,7 @@\n import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.UUID;\n+import java.util.function.Function;\n import java.util.function.IntFunction;\n \n import org.eclipse.microprofile.config.Config;\n@@ -35,13 +36,12 @@\n import io.smallrye.config.ConfigSourceInterceptor;\n import io.smallrye.config.ConfigSourceInterceptorContext;\n import io.smallrye.config.ConfigSourceInterceptorFactory;\n-import io.smallrye.config.ConfigValue;\n import io.smallrye.config.DotEnvConfigSourceProvider;\n import io.smallrye.config.EnvConfigSource;\n import io.smallrye.config.FallbackConfigSourceInterceptor;\n import io.smallrye.config.KeyMap;\n+import io.smallrye.config.NameIterator;\n import io.smallrye.config.Priorities;\n-import io.smallrye.config.ProfileConfigSourceInterceptor;\n import io.smallrye.config.RelocateConfigSourceInterceptor;\n import io.smallrye.config.SmallRyeConfig;\n import io.smallrye.config.SmallRyeConfigBuilder;\n@@ -143,19 +143,28 @@ public ConfigSourceInterceptor getInterceptor(final ConfigSourceInterceptorConte\n                 relocations.put(SMALLRYE_CONFIG_LOCATIONS, \"quarkus.config.locations\");\n                 relocations.put(SMALLRYE_CONFIG_PROFILE_PARENT, \"quarkus.config.profile.parent\");\n \n-                // Also adds to the relocations the profile parent in the active profile\n-                ConfigValue profileValue = context.proceed(SMALLRYE_CONFIG_PROFILE);\n-                if (profileValue != null) {\n-                    List<String> profiles = ProfileConfigSourceInterceptor.convertProfile(profileValue.getValue());\n-                    for (String profile : profiles) {\n-                        relocations.put(\"%\" + profile + \".\" + SMALLRYE_CONFIG_LOCATIONS,\n-                                \"%\" + profile + \".\" + \"quarkus.config.locations\");\n-                        relocations.put(\"%\" + profile + \".\" + SMALLRYE_CONFIG_PROFILE_PARENT,\n-                                \"%\" + profile + \".\" + \"quarkus.config.profile.parent\");\n+                // Also adds relocations to all profiles\n+                return new RelocateConfigSourceInterceptor(new Function<String, String>() {\n+                    @Override\n+                    public String apply(final String name) {\n+                        String relocate = relocations.get(name);\n+                        if (relocate != null) {\n+                            return relocate;\n+                        }\n+\n+                        if (name.startsWith(\"%\") && name.endsWith(SMALLRYE_CONFIG_LOCATIONS)) {\n+                            io.smallrye.config.NameIterator ni = new io.smallrye.config.NameIterator(name);\n+                            return ni.getNextSegment() + \".\" + \"quarkus.config.locations\";\n+                        }\n+\n+                        if (name.startsWith(\"%\") && name.endsWith(SMALLRYE_CONFIG_PROFILE_PARENT)) {\n+                            io.smallrye.config.NameIterator ni = new NameIterator(name);\n+                            return ni.getNextSegment() + \".\" + \"quarkus.config.profile.parent\";\n+                        }\n+\n+                        return name;\n                     }\n-                }\n-\n-                return new RelocateConfigSourceInterceptor(relocations);\n+                });\n             }\n \n             @Override",
      "parent_sha": "64cdb4a583ff3e1b028062fce6f3285c963f61c3"
    }
  },
  {
    "oid": "25186e322f541f58d706573e22ec0754a497f92b",
    "message": "Fix QuarkusProdModeTest to work with fast-jar packaging",
    "date": "2021-02-03T16:53:19Z",
    "url": "https://github.com/quarkusio/quarkus/commit/25186e322f541f58d706573e22ec0754a497f92b",
    "details": {
      "sha": "2cb112146227e5271bc0c6a3c49222d39c41d7c5",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java",
      "status": "modified",
      "additions": 35,
      "deletions": 37,
      "changes": 72,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/25186e322f541f58d706573e22ec0754a497f92b/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FJarResultBuildStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/25186e322f541f58d706573e22ec0754a497f92b/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FJarResultBuildStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FJarResultBuildStep.java?ref=25186e322f541f58d706573e22ec0754a497f92b",
      "patch": "@@ -665,51 +665,49 @@ private void copyDependency(CurateOutcomeBuildItem curateOutcomeBuildItem, Map<A\n             return;\n         }\n         for (Path resolvedDep : depArtifact.getPaths()) {\n-            if (!Files.isDirectory(resolvedDep)) {\n-                if (allowParentFirst && curateOutcomeBuildItem.getEffectiveModel().getRunnerParentFirstArtifacts()\n-                        .contains(depArtifact.getKey())) {\n-                    final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n-                    final Path targetPath = baseLib.resolve(fileName);\n-                    Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n-                    classPath.append(\" \").append(LIB).append(\"/\").append(BOOT_LIB).append(\"/\").append(fileName);\n-                    runtimeArtifacts.computeIfAbsent(depArtifact.getKey(), (s) -> new ArrayList<>()).add(targetPath);\n-                } else {\n-                    final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n-                    final Path targetPath = libDir.resolve(fileName);\n-                    Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n-                    jars.add(targetPath);\n-                    runtimeArtifacts.computeIfAbsent(depArtifact.getKey(), (s) -> new ArrayList<>()).add(targetPath);\n-                }\n+            final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+            final Path targetPath;\n+\n+            if (allowParentFirst && curateOutcomeBuildItem.getEffectiveModel().getRunnerParentFirstArtifacts()\n+                    .contains(depArtifact.getKey())) {\n+                targetPath = baseLib.resolve(fileName);\n+                classPath.append(\" \").append(LIB).append(\"/\").append(BOOT_LIB).append(\"/\").append(fileName);\n             } else {\n+                targetPath = libDir.resolve(fileName);\n+                jars.add(targetPath);\n+            }\n+            runtimeArtifacts.computeIfAbsent(depArtifact.getKey(), (s) -> new ArrayList<>(1)).add(targetPath);\n+\n+            if (Files.isDirectory(resolvedDep)) {\n                 // This case can happen when we are building a jar from inside the Quarkus repository\n                 // and Quarkus Bootstrap's localProjectDiscovery has been set to true. In such a case\n                 // the non-jar dependencies are the Quarkus dependencies picked up on the file system\n-                // these should never be parent first\n-\n-                final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n-                final Path targetPath = libDir.resolve(fileName);\n-                runtimeArtifacts.computeIfAbsent(depArtifact.getKey(), (s) -> new ArrayList<>()).add(targetPath);\n-                jars.add(targetPath);\n-                try (FileSystem runnerZipFs = ZipUtils.newZip(targetPath)) {\n-                    Files.walkFileTree(resolvedDep, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,\n-                            new SimpleFileVisitor<Path>() {\n-                                @Override\n-                                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n-                                        throws IOException {\n-                                    final Path relativePath = resolvedDep.relativize(file);\n-                                    final Path targetPath = runnerZipFs.getPath(relativePath.toString());\n-                                    if (targetPath.getParent() != null) {\n-                                        Files.createDirectories(targetPath.getParent());\n-                                    }\n-                                    Files.copy(file, targetPath, StandardCopyOption.REPLACE_EXISTING); //replace only needed for testing\n-                                    return FileVisitResult.CONTINUE;\n-                                }\n-                            });\n-                }\n+                packageClasses(resolvedDep, targetPath);\n+            } else {\n+                Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n             }\n         }\n     }\n \n+    private void packageClasses(Path resolvedDep, final Path targetPath) throws IOException {\n+        try (FileSystem runnerZipFs = ZipUtils.newZip(targetPath)) {\n+            Files.walkFileTree(resolvedDep, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,\n+                    new SimpleFileVisitor<Path>() {\n+                        @Override\n+                        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n+                                throws IOException {\n+                            final Path relativePath = resolvedDep.relativize(file);\n+                            final Path targetPath = runnerZipFs.getPath(relativePath.toString());\n+                            if (targetPath.getParent() != null) {\n+                                Files.createDirectories(targetPath.getParent());\n+                            }\n+                            Files.copy(file, targetPath, StandardCopyOption.REPLACE_EXISTING); //replace only needed for testing\n+                            return FileVisitResult.CONTINUE;\n+                        }\n+                    });\n+        }\n+    }\n+\n     /**\n      * Native images are built from a specially created jar file. This allows for changes in how the jar file is generated.\n      *",
      "parent_sha": "b2772c1a7e25f86613cdcab9560aea72153262f6"
    }
  },
  {
    "oid": "12621d54660531a248e799f0b56f7471db204c17",
    "message": "Only consider the potential getters in the reflective hierarchy step\n\nThere's no reason methods with parameters could contribute to\nserialization.",
    "date": "2019-01-16T09:22:18Z",
    "url": "https://github.com/quarkusio/quarkus/commit/12621d54660531a248e799f0b56f7471db204c17",
    "details": {
      "sha": "29544ea43a3d547e039c18b1ab1001ed70172dbf",
      "filename": "core/deployment/src/main/java/org/jboss/shamrock/deployment/steps/ReflectiveHierarchyStep.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/12621d54660531a248e799f0b56f7471db204c17/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fdeployment%2Fsteps%2FReflectiveHierarchyStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/12621d54660531a248e799f0b56f7471db204c17/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fdeployment%2Fsteps%2FReflectiveHierarchyStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fdeployment%2Fsteps%2FReflectiveHierarchyStep.java?ref=12621d54660531a248e799f0b56f7471db204c17",
      "patch": "@@ -105,10 +105,10 @@ private void addClassTypeHierarchy(DotName name, Set<DotName> processedReflectiv\n             for (FieldInfo i : info.fields()) {\n                 addReflectiveHierarchy(i.type(), processedReflectiveHierarchies);\n             }\n-            for (MethodInfo i : info.methods()) {\n-                addReflectiveHierarchy(i.returnType(), processedReflectiveHierarchies);\n-                for (Type p : i.parameters()) {\n-                    addReflectiveHierarchy(p, processedReflectiveHierarchies);\n+            for (MethodInfo method : info.methods()) {\n+                // we only add the return types of the potential getters\n+                if (method.parameters().size() == 0) {\n+                    addReflectiveHierarchy(method.returnType(), processedReflectiveHierarchies);\n                 }\n             }\n         }",
      "parent_sha": "a5a01496dce1934c259ffc8c8e0a168fac4409bb"
    }
  },
  {
    "oid": "14e48d9218db22ef69610412476217334d24f0f8",
    "message": "fix the double locked idiom\n\nIt misses a volatile modifier to the synchronized field",
    "date": "2019-11-28T14:59:29Z",
    "url": "https://github.com/quarkusio/quarkus/commit/14e48d9218db22ef69610412476217334d24f0f8",
    "details": {
      "sha": "892f0c0ceb23c4efedc6e4db5fad98214885ca4b",
      "filename": "extensions/kafka-streams/deployment/src/main/java/io/quarkus/kafka/streams/deployment/KafkaStreamsHotReplacementSetup.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/14e48d9218db22ef69610412476217334d24f0f8/extensions%2Fkafka-streams%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fdeployment%2FKafkaStreamsHotReplacementSetup.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/14e48d9218db22ef69610412476217334d24f0f8/extensions%2Fkafka-streams%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fdeployment%2FKafkaStreamsHotReplacementSetup.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fkafka-streams%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fdeployment%2FKafkaStreamsHotReplacementSetup.java?ref=14e48d9218db22ef69610412476217334d24f0f8",
      "patch": "@@ -12,7 +12,7 @@ public class KafkaStreamsHotReplacementSetup implements HotReplacementSetup {\n     private static final long TWO_SECONDS = 2000;\n \n     private HotReplacementContext context;\n-    private long nextUpdate;\n+    private volatile long nextUpdate;\n     private final Executor executor = Executors.newSingleThreadExecutor();\n \n     @Override",
      "parent_sha": "8eab18b03f359ae83483688e40953d55b0656e68"
    }
  },
  {
    "oid": "609fb9fd6894d3e6c600d42768aa066bb2ddfe14",
    "message": "Panache: be better at finding subclasses of EntityBase, Model",
    "date": "2019-02-07T13:03:28Z",
    "url": "https://github.com/quarkusio/quarkus/commit/609fb9fd6894d3e6c600d42768aa066bb2ddfe14",
    "details": {
      "sha": "a33668fc722afc21c177cedd784ab00f863991c0",
      "filename": "extensions/panache/deployment/src/main/java/org/jboss/shamrock/panache/PanacheResourceProcessor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/609fb9fd6894d3e6c600d42768aa066bb2ddfe14/extensions%2Fpanache%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fpanache%2FPanacheResourceProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/609fb9fd6894d3e6c600d42768aa066bb2ddfe14/extensions%2Fpanache%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fpanache%2FPanacheResourceProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fpanache%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fpanache%2FPanacheResourceProcessor.java?ref=609fb9fd6894d3e6c600d42768aa066bb2ddfe14",
      "patch": "@@ -90,19 +90,21 @@ void build(CombinedIndexBuildItem index,\n                BuildProducer<NonJpaModelBuildItem> nonJpaModelBuildItems) throws Exception {\n \n         PanacheJpaDaoEnhancer daoEnhancer = new PanacheJpaDaoEnhancer();\n-        for (ClassInfo classInfo : index.getIndex().getKnownDirectImplementors(DOTNAME_DAO_BASE)) {\n+        for (ClassInfo classInfo : index.getIndex().getAllKnownImplementors(DOTNAME_DAO_BASE)) {\n             transformers.produce(new BytecodeTransformerBuildItem(classInfo.name().toString(), daoEnhancer));\n         }\n \n         PanacheJpaModelEnhancer modelEnhancer = new PanacheJpaModelEnhancer();\n         Set<String> modelClasses = new HashSet<>();\n-        for (ClassInfo classInfo : index.getIndex().getKnownDirectSubclasses(DOTNAME_ENTITY_BASE)) {\n+        // Note that we do this in two passes because for some reason Jandex does not give us subtypes\n+        // of Model if we ask for subtypes of EntityBase\n+        for (ClassInfo classInfo : index.getIndex().getAllKnownSubclasses(DOTNAME_ENTITY_BASE)) {\n             // skip Model\n             if(classInfo.name().equals(DOTNAME_MODEL))\n                 continue;\n             modelClasses.add(classInfo.name().toString());\n         }\n-        for (ClassInfo classInfo : index.getIndex().getKnownDirectSubclasses(DOTNAME_MODEL)) {\n+        for (ClassInfo classInfo : index.getIndex().getAllKnownSubclasses(DOTNAME_MODEL)) {\n             modelClasses.add(classInfo.name().toString());\n         }\n         for (String modelClass : modelClasses) {",
      "parent_sha": "c164bdfeb349724967532ccef6dd2ac4452d9297"
    }
  },
  {
    "oid": "5026f86dbfa0c0653be4148b531a2c3749c92073",
    "message": "Avoid build failures when cleaning up Gradle dev mode tests\n\nWe had several failures related to that with the build failing because\nit was unable to delete a Gradle file. It's probably related to the\ndaemon but I couldn't find a reliable way to avoid starting the daemon\nwith the Gradle TestKit - I just found several people complaining about\nit not working very well.\n\nIt's not a big deal if we let a couple of files survive the build from\ntime to time.",
    "date": "2020-05-13T13:08:33Z",
    "url": "https://github.com/quarkusio/quarkus/commit/5026f86dbfa0c0653be4148b531a2c3749c92073",
    "details": {
      "sha": "603bd9c5b992cbd9cf47ec1686f0025f24a4616a",
      "filename": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/devmode/QuarkusDevGradleTestBase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/5026f86dbfa0c0653be4148b531a2c3749c92073/devtools%2Fgradle%2Fsrc%2FfunctionalTest%2Fjava%2Fio%2Fquarkus%2Fgradle%2Fdevmode%2FQuarkusDevGradleTestBase.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/5026f86dbfa0c0653be4148b531a2c3749c92073/devtools%2Fgradle%2Fsrc%2FfunctionalTest%2Fjava%2Fio%2Fquarkus%2Fgradle%2Fdevmode%2FQuarkusDevGradleTestBase.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/devtools%2Fgradle%2Fsrc%2FfunctionalTest%2Fjava%2Fio%2Fquarkus%2Fgradle%2Fdevmode%2FQuarkusDevGradleTestBase.java?ref=5026f86dbfa0c0653be4148b531a2c3749c92073",
      "patch": "@@ -61,7 +61,7 @@ public void run() {\n             DevModeTestUtils.awaitUntilServerDown();\n \n             if (projectDir != null && projectDir.isDirectory()) {\n-                FileUtils.deleteDirectory(projectDir);\n+                FileUtils.deleteQuietly(projectDir);\n             }\n         }\n     }",
      "parent_sha": "08d1018cdac6b96d2996a7a24fd590ca9bd8b481"
    }
  },
  {
    "oid": "3cc95edac16136ad952e2ec7f86f0c08dd1a8caf",
    "message": "Minimal change in JavaDoc\n\nMinimal change in JavaDoc in disableGlobalTestResources",
    "date": "2021-02-10T10:45:13Z",
    "url": "https://github.com/quarkusio/quarkus/commit/3cc95edac16136ad952e2ec7f86f0c08dd1a8caf",
    "details": {
      "sha": "47a1633756f125d0dc0004cbeb4ab3a3f3ce7243",
      "filename": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestProfile.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/3cc95edac16136ad952e2ec7f86f0c08dd1a8caf/test-framework%2Fjunit5%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fjunit%2FQuarkusTestProfile.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/3cc95edac16136ad952e2ec7f86f0c08dd1a8caf/test-framework%2Fjunit5%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fjunit%2FQuarkusTestProfile.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/test-framework%2Fjunit5%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fjunit%2FQuarkusTestProfile.java?ref=3cc95edac16136ad952e2ec7f86f0c08dd1a8caf",
      "patch": "@@ -52,7 +52,7 @@ default List<TestResourceEntry> testResources() {\n     }\n \n     /**\n-     * If this is returns true then only the rest resources returned from {@link #testResources()} will be started,\n+     * If this is returns true then only the test resources returned from {@link #testResources()} will be started,\n      * global annotated test resources will be ignored.\n      */\n     default boolean disableGlobalTestResources() {",
      "parent_sha": "16c047f2e796ddb4396cf8f9d896313bd5811462"
    }
  },
  {
    "oid": "2567e00ad21ad3f864ee84fed0c50fceb825bb79",
    "message": "Fix #7180 create-extension mojo should accept absolute paths for the templatesUriBase option",
    "date": "2020-02-24T09:29:42Z",
    "url": "https://github.com/quarkusio/quarkus/commit/2567e00ad21ad3f864ee84fed0c50fceb825bb79",
    "details": {
      "sha": "542e32ca0f1257ec52c6abe42a0878983005b0b2",
      "filename": "devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/2567e00ad21ad3f864ee84fed0c50fceb825bb79/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FCreateExtensionMojo.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/2567e00ad21ad3f864ee84fed0c50fceb825bb79/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FCreateExtensionMojo.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FCreateExtensionMojo.java?ref=2567e00ad21ad3f864ee84fed0c50fceb825bb79",
      "patch": "@@ -434,9 +434,9 @@ public class CreateExtensionMojo extends AbstractMojo {\n     List<String> additionalRuntimeDependencies;\n \n     /**\n-     * A path relative to {@link #basedir} pointing at a {@code pom.xml} file that should serve as a parent for the\n-     * integration test Maven module this mojo generates. If {@link #itestParentPath} is not set, the integration test\n-     * module will not be generated.\n+     * An absolute path or a path relative to {@link #basedir} pointing at a {@code pom.xml} file that should serve as\n+     * a parent for the integration test Maven module this mojo generates. If {@link #itestParentPath} is not set,\n+     * the integration test module will not be generated.\n      *\n      * @since 0.22.0\n      */\n@@ -1025,10 +1025,10 @@ static TemplateLoader createTemplateLoader(File basedir, String templatesUriBase\n                             defaultLoader //\n                     });\n         } else if (templatesUriBase.startsWith(FILE_PREFIX)) {\n+            final Path resolvedTemplatesDir = basedir.toPath().resolve(templatesUriBase.substring(FILE_PREFIX.length()));\n             return new MultiTemplateLoader( //\n                     new TemplateLoader[] { //\n-                            new FileTemplateLoader(\n-                                    new File(basedir, templatesUriBase.substring(FILE_PREFIX.length()))), //\n+                            new FileTemplateLoader(resolvedTemplatesDir.toFile()),\n                             defaultLoader //\n                     });\n         } else {",
      "parent_sha": "3c7783c2e7d71251905d5206b95c814ed5e5d4ce"
    }
  },
  {
    "oid": "52d3cdf7f8d2f66fdea9eb183f72b232afcceac8",
    "message": "Integration tests: fix the 'jpa-postgresql-withxml' module",
    "date": "2023-02-21T10:27:04Z",
    "url": "https://github.com/quarkusio/quarkus/commit/52d3cdf7f8d2f66fdea9eb183f72b232afcceac8",
    "details": {
      "sha": "233fdc491238e9872ff123a59217ff7c1c1eaaae",
      "filename": "integration-tests/jpa-postgresql-withxml/src/test/java/io/quarkus/it/jpa/postgresql/JPAFunctionalityInGraalITCase.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/52d3cdf7f8d2f66fdea9eb183f72b232afcceac8/integration-tests%2Fjpa-postgresql-withxml%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fjpa%2Fpostgresql%2FJPAFunctionalityInGraalITCase.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/52d3cdf7f8d2f66fdea9eb183f72b232afcceac8/integration-tests%2Fjpa-postgresql-withxml%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fjpa%2Fpostgresql%2FJPAFunctionalityInGraalITCase.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/integration-tests%2Fjpa-postgresql-withxml%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fjpa%2Fpostgresql%2FJPAFunctionalityInGraalITCase.java?ref=52d3cdf7f8d2f66fdea9eb183f72b232afcceac8",
      "patch": "@@ -1,5 +1,6 @@\n package io.quarkus.it.jpa.postgresql;\n \n+import org.hibernate.type.descriptor.jdbc.UUIDJdbcType;\n import org.junit.jupiter.api.Test;\n \n import io.quarkus.test.junit.QuarkusIntegrationTest;\n@@ -18,7 +19,7 @@ public void verifyJDKXMLParsersAreIncluded() {\n         //if not, that would be a sign that this test has become too weak\n         //to identify the well working of the exclusions.\n         report.assertContains(org.postgresql.jdbc.PgSQLXML.class);\n-        report.assertContains(org.hibernate.type.PostgresUUIDType.class);\n+        report.assertContains(UUIDJdbcType.class);\n \n         //And finally verify we included the JDK XML by triggering\n         //io.quarkus.jdbc.postgresql.runtime.graal.SQLXLMFeature",
      "parent_sha": "9322f1739084d5e0a12c72ca977e681a44883e06"
    }
  },
  {
    "oid": "8002f4d847f18f095f1dcf78487a61c3fac0e3df",
    "message": "Class loading fixes around CT\n\n- Scan for @Testable annotations that are not in the deployment\n- Make sure that the engine is part of the same CL heirachy as unit\n  tests",
    "date": "2022-02-20T12:14:32Z",
    "url": "https://github.com/quarkusio/quarkus/commit/8002f4d847f18f095f1dcf78487a61c3fac0e3df",
    "details": {
      "sha": "169db922b76c4e6483ecc25f88905886c11ba4bd",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/dev/testing/JunitTestRunner.java",
      "status": "modified",
      "additions": 29,
      "deletions": 2,
      "changes": 31,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/8002f4d847f18f095f1dcf78487a61c3fac0e3df/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2Ftesting%2FJunitTestRunner.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/8002f4d847f18f095f1dcf78487a61c3fac0e3df/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2Ftesting%2FJunitTestRunner.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2Ftesting%2FJunitTestRunner.java?ref=8002f4d847f18f095f1dcf78487a61c3fac0e3df",
      "patch": "@@ -556,6 +556,15 @@ private DiscoveryResult discoverTestClasses() {\n                             enclosingClasses.put(classInfo.name(), enclosing);\n                         }\n                     }\n+                } else if (instance.target().kind() == AnnotationTarget.Kind.FIELD) {\n+                    ClassInfo classInfo = instance.target().asField().declaringClass();\n+                    allTestClasses.add(classInfo.name());\n+                    if (classInfo.classAnnotation(NESTED) != null) {\n+                        var enclosing = classInfo.enclosingClass();\n+                        if (enclosing != null) {\n+                            enclosingClasses.put(classInfo.name(), enclosing);\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -627,8 +636,8 @@ public String apply(Class<?> aClass) {\n                     log.error(\"Failed to instrument \" + i + \" for usage tracking\", e);\n                 }\n             }\n-            cl = testApplication.createRuntimeClassLoader(testApplication.getAugmentClassLoader(), Collections.emptyMap(),\n-                    transformedClasses);\n+            cl = testApplication.createDeploymentClassLoader();\n+            cl.reset(Collections.emptyMap(), transformedClasses);\n             for (String i : unitTestClasses) {\n                 try {\n                     utClasses.add(cl.loadClass(i));\n@@ -677,6 +686,24 @@ private static Set<DotName> collectTestAnnotations(Index index) {\n                 }\n             }\n         }\n+        Set<DotName> processed = new HashSet<>();\n+        processed.addAll(ret);\n+        for (ClassInfo clazz : index.getKnownClasses()) {\n+            for (DotName annotation : clazz.annotations().keySet()) {\n+                if (processed.contains(annotation)) {\n+                    continue;\n+                }\n+                processed.add(annotation);\n+                try {\n+                    Class<?> loadedAnnotation = Thread.currentThread().getContextClassLoader().loadClass(annotation.toString());\n+                    if (loadedAnnotation.isAnnotationPresent(Testable.class)) {\n+                        ret.add(annotation);\n+                    }\n+                } catch (ClassNotFoundException e) {\n+                    log.warn(\"Unable to load annotation type \" + annotation + \" cannot determine if it is @Testable\");\n+                }\n+            }\n+        }\n         return ret;\n     }\n ",
      "parent_sha": "68f0063bbde9507a81bf08c306f5236209106666"
    }
  },
  {
    "oid": "b401c5a3406eaa11b62d02d49c48b8f88a20c2b2",
    "message": "Make the boot jars in jib respect current timestamp",
    "date": "2024-08-12T13:47:06Z",
    "url": "https://github.com/quarkusio/quarkus/commit/b401c5a3406eaa11b62d02d49c48b8f88a20c2b2",
    "details": {
      "sha": "9f7a2b4330bb4b4e6a95f1c30d90e55cd2b1ae20",
      "filename": "extensions/container-image/container-image-jib/deployment/src/main/java/io/quarkus/container/image/jib/deployment/JibProcessor.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/b401c5a3406eaa11b62d02d49c48b8f88a20c2b2/extensions%2Fcontainer-image%2Fcontainer-image-jib%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcontainer%2Fimage%2Fjib%2Fdeployment%2FJibProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/b401c5a3406eaa11b62d02d49c48b8f88a20c2b2/extensions%2Fcontainer-image%2Fcontainer-image-jib%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcontainer%2Fimage%2Fjib%2Fdeployment%2FJibProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fcontainer-image%2Fcontainer-image-jib%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fcontainer%2Fimage%2Fjib%2Fdeployment%2FJibProcessor.java?ref=b401c5a3406eaa11b62d02d49c48b8f88a20c2b2",
      "patch": "@@ -540,15 +540,20 @@ private JibContainerBuilder createContainerBuilderFromFastJar(String baseJvmImag\n \n                 FileEntriesLayer.Builder bootLibsLayerBuilder = FileEntriesLayer.builder().setName(\"fast-jar-boot-libs\");\n                 Path bootLibPath = componentsPath.resolve(JarResultBuildStep.LIB).resolve(JarResultBuildStep.BOOT_LIB);\n-                try (Stream<Path> boolLibPaths = Files.list(bootLibPath)) {\n-                    boolLibPaths.forEach(lib -> {\n+                try (Stream<Path> bootLibPaths = Files.list(bootLibPath)) {\n+                    bootLibPaths.forEach(lib -> {\n                         try {\n                             AbsoluteUnixPath libPathInContainer = workDirInContainer.resolve(JarResultBuildStep.LIB)\n                                     .resolve(JarResultBuildStep.BOOT_LIB)\n                                     .resolve(lib.getFileName());\n-                            // the boot lib jars need to preserve the modification time because otherwise AppCDS won't work\n-                            bootLibsLayerBuilder.addEntry(lib, libPathInContainer,\n-                                    Files.getLastModifiedTime(lib).toInstant());\n+                            Instant bootLibModificationTime;\n+                            if (appCDSResult.isPresent()) {\n+                                // the boot lib jars need to preserve the modification time because otherwise AppCDS won't work\n+                                bootLibModificationTime = Files.getLastModifiedTime(lib).toInstant();\n+                            } else {\n+                                bootLibModificationTime = modificationTime;\n+                            }\n+                            bootLibsLayerBuilder.addEntry(lib, libPathInContainer, bootLibModificationTime);\n                         } catch (IOException e) {\n                             throw new UncheckedIOException(e);\n                         }",
      "parent_sha": "a1b4e8adeabc0faf369de08461feca378770d36d"
    }
  },
  {
    "oid": "b9da8b1ce00022d580a213f755e9e635a84e31bd",
    "message": "Prevent potential NPE during shutdown",
    "date": "2020-09-04T02:23:45Z",
    "url": "https://github.com/quarkusio/quarkus/commit/b9da8b1ce00022d580a213f755e9e635a84e31bd",
    "details": {
      "sha": "a601059087cb4c8a00faad27687bf67b7fddf3aa",
      "filename": "extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/devmode/GrpcServerReloader.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/b9da8b1ce00022d580a213f755e9e635a84e31bd/extensions%2Fgrpc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgrpc%2Fruntime%2Fdevmode%2FGrpcServerReloader.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/b9da8b1ce00022d580a213f755e9e635a84e31bd/extensions%2Fgrpc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgrpc%2Fruntime%2Fdevmode%2FGrpcServerReloader.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fgrpc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgrpc%2Fruntime%2Fdevmode%2FGrpcServerReloader.java?ref=b9da8b1ce00022d580a213f755e9e635a84e31bd",
      "patch": "@@ -87,7 +87,9 @@ private static void forceSet(Object object, String fieldName, Object value)\n     }\n \n     public static void shutdown() {\n-        server.shutdown();\n-        server = null;\n+        if (server != null) {\n+            server.shutdown();\n+            server = null;\n+        }\n     }\n }",
      "parent_sha": "c50a54b83a5fc7ae9d5683465372a45df51590d2"
    }
  },
  {
    "oid": "7f97992f8b4a14c21c8ef2ef6cd0a21637d69bcd",
    "message": "Fix some minor spelling errors",
    "date": "2019-06-25T22:02:02Z",
    "url": "https://github.com/quarkusio/quarkus/commit/7f97992f8b4a14c21c8ef2ef6cd0a21637d69bcd",
    "details": {
      "sha": "7c43016cfe2ccf52d8555dc88c5923f95b0fea65",
      "filename": "core/runtime/src/main/java/io/quarkus/runtime/configuration/ConverterSupport.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/7f97992f8b4a14c21c8ef2ef6cd0a21637d69bcd/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConverterSupport.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/7f97992f8b4a14c21c8ef2ef6cd0a21637d69bcd/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConverterSupport.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConverterSupport.java?ref=7f97992f8b4a14c21c8ef2ef6cd0a21637d69bcd",
      "patch": "@@ -24,7 +24,7 @@ public class ConverterSupport {\n      * A list of {@link ConverterItem} which will be loaded in static initialization. This needs\n      * to be static so we can load {@link Converter} implementations without producing reflective\n      * class build items in the deployment time. The {@link ConverterItem} instances uses generic\n-     * {@link Object} type to avoid typecast errors from complier.\n+     * {@link Object} type to avoid typecast errors from compiler.\n      */\n     private static final List<ConverterItem<Object>> CONVERTERS = getConverters();\n \n@@ -112,7 +112,7 @@ private static <T> Consumer<ConverterItem<T>> addConverterTo(final ConfigBuilder\n             final Converter<T> converter = item.getConverter();\n             final int priority = item.getPriority();\n \n-            LOG.debugf(\"Pupulate SmallRye config builder with converter for %s of priority %s\", type, priority);\n+            LOG.debugf(\"Populate SmallRye config builder with converter for %s of priority %s\", type, priority);\n \n             builder.withConverter(type, priority, converter);\n         };",
      "parent_sha": "31002876b5cf04e60684bfb1f74d6138d33ddff8"
    }
  },
  {
    "oid": "d3fd924b31680bc631c85b9f4f56523dce6ff6eb",
    "message": "Avoid NPE when RESTEasy Reactive is used together with the classic REST client\n\nFixes: #24120",
    "date": "2022-03-08T08:03:46Z",
    "url": "https://github.com/quarkusio/quarkus/commit/d3fd924b31680bc631c85b9f4f56523dce6ff6eb",
    "details": {
      "sha": "5a62bddfb6c3b9d3c01c171c9344633da7b3c8fb",
      "filename": "independent-projects/resteasy-reactive/common/runtime/src/main/java/org/jboss/resteasy/reactive/common/headers/HeaderUtil.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/d3fd924b31680bc631c85b9f4f56523dce6ff6eb/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fheaders%2FHeaderUtil.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/d3fd924b31680bc631c85b9f4f56523dce6ff6eb/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fheaders%2FHeaderUtil.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fheaders%2FHeaderUtil.java?ref=d3fd924b31680bc631c85b9f4f56523dce6ff6eb",
      "patch": "@@ -28,9 +28,10 @@\n /**\n  * These work for MultivaluedMap with String and Object\n  */\n+@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n public class HeaderUtil {\n \n-    private static final ClassValue<RuntimeDelegate.HeaderDelegate> HEADER_DELEGATE_CACHE = new ClassValue() {\n+    private static final ClassValue<RuntimeDelegate.HeaderDelegate<?>> HEADER_DELEGATE_CACHE = new ClassValue<>() {\n         @Override\n         protected RuntimeDelegate.HeaderDelegate<?> computeValue(Class type) {\n             return RuntimeDelegate.getInstance().createHeaderDelegate(type);\n@@ -41,7 +42,11 @@ public static String headerToString(Object obj) {\n         if (obj instanceof String) {\n             return (String) obj;\n         } else {\n-            return HEADER_DELEGATE_CACHE.get(obj.getClass()).toString(obj);\n+            RuntimeDelegate.HeaderDelegate delegate = HEADER_DELEGATE_CACHE.get(obj.getClass());\n+            if (delegate != null) {\n+                return delegate.toString(obj);\n+            }\n+            return obj.toString();\n         }\n     }\n ",
      "parent_sha": "b98c54c2f9ee1c5a496625526d460704114e40f1"
    }
  },
  {
    "oid": "830f91d2321bb606e105b5f0f1ac55dfb2bd38a3",
    "message": "Fix s2i capability name\n\nFixes: #16863",
    "date": "2021-04-28T09:19:10Z",
    "url": "https://github.com/quarkusio/quarkus/commit/830f91d2321bb606e105b5f0f1ac55dfb2bd38a3",
    "details": {
      "sha": "2059f878631dda7f2a0dd98afd6a384701accc5f",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/Capability.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/830f91d2321bb606e105b5f0f1ac55dfb2bd38a3/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FCapability.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/830f91d2321bb606e105b5f0f1ac55dfb2bd38a3/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FCapability.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FCapability.java?ref=830f91d2321bb606e105b5f0f1ac55dfb2bd38a3",
      "patch": "@@ -75,7 +75,7 @@ public interface Capability {\n     String METRICS = QUARKUS_PREFIX + \"metrics\";\n     String CONTAINER_IMAGE_JIB = QUARKUS_PREFIX + \"container.image.jib\";\n     String CONTAINER_IMAGE_DOCKER = QUARKUS_PREFIX + \"container.image.docker\";\n-    String CONTAINER_IMAGE_S2I = QUARKUS_PREFIX + \"container.image.openshift\";\n+    String CONTAINER_IMAGE_S2I = QUARKUS_PREFIX + \"container.image.s2i\";\n     String CONTAINER_IMAGE_OPENSHIFT = QUARKUS_PREFIX + \"container.image.openshift\";\n     String HIBERNATE_ORM = QUARKUS_PREFIX + \"hibernate.orm\";\n     String HIBERNATE_ENVERS = QUARKUS_PREFIX + \"hibernate.envers\";",
      "parent_sha": "302475bb7a390038b5a3d7e673e72c5cafa37f47"
    }
  },
  {
    "oid": "c2c579c83cd5625f941016e3d6a078ce67feca02",
    "message": "Update NotFoundExceptionMapper.java\n\nDo not append null.",
    "date": "2019-07-29T10:51:36Z",
    "url": "https://github.com/quarkusio/quarkus/commit/c2c579c83cd5625f941016e3d6a078ce67feca02",
    "details": {
      "sha": "0f66461914520f764d01c31c2dc4b043749ce94c",
      "filename": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/NotFoundExceptionMapper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/c2c579c83cd5625f941016e3d6a078ce67feca02/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2FNotFoundExceptionMapper.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/c2c579c83cd5625f941016e3d6a078ce67feca02/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2FNotFoundExceptionMapper.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2FNotFoundExceptionMapper.java?ref=c2c579c83cd5625f941016e3d6a078ce67feca02",
      "patch": "@@ -98,7 +98,7 @@ public static List<ResourceDescription> fromBoundResourceInvokers(\n                 for (ResourceInvoker invoker : entry.getValue()) {\n                     ResourceMethodInvoker method = (ResourceMethodInvoker) invoker;\n \n-                    String subPath = null;\n+                    String subPath = \"\";\n                     for (Annotation annotation : method.getMethodAnnotations()) {\n                         if (annotation.annotationType().equals(Path.class)) {\n                             subPath = ((Path) annotation).value();",
      "parent_sha": "8bc2113789afd8102341c12b131eca3517623487"
    }
  },
  {
    "oid": "1ddf9dde72ab784dbf972f4b298432c56f94e7dc",
    "message": "Maven workspace discovery: make sure the parent directory is not null looking for the parent pom.xml",
    "date": "2020-05-06T10:52:24Z",
    "url": "https://github.com/quarkusio/quarkus/commit/1ddf9dde72ab784dbf972f4b298432c56f94e7dc",
    "details": {
      "sha": "3aa55e21e0d024123fc64ca91ac9771398ec03df",
      "filename": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/1ddf9dde72ab784dbf972f4b298432c56f94e7dc/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2Fworkspace%2FLocalProject.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/1ddf9dde72ab784dbf972f4b298432c56f94e7dc/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2Fworkspace%2FLocalProject.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2Fworkspace%2FLocalProject.java?ref=1ddf9dde72ab784dbf972f4b298432c56f94e7dc",
      "patch": "@@ -125,7 +125,7 @@ private static LocalProject load(LocalWorkspace workspace, LocalProject parent,\n \n     private static Model loadRootModel(Path pomXml) throws BootstrapException {\n         Model model = null;\n-        while (Files.exists(pomXml)) {\n+        while (pomXml != null && Files.exists(pomXml)) {\n             model = readModel(pomXml);\n             final Parent parent = model.getParent();\n             if (parent != null\n@@ -136,7 +136,8 @@ private static Model loadRootModel(Path pomXml) throws BootstrapException {\n                     pomXml = pomXml.resolve(POM_XML);\n                 }\n             } else {\n-                pomXml = pomXml.getParent().getParent().resolve(POM_XML);\n+                final Path parentDir = pomXml.getParent().getParent();\n+                pomXml = parentDir == null ? null : parentDir.resolve(POM_XML);\n             }\n         }\n         return model;",
      "parent_sha": "8198722cb6ec9a3527eda9973ad02698bc9bf526"
    }
  },
  {
    "oid": "f704ef96e3a5f44f9234a4804c5ccc41d4ad1762",
    "message": "Use the same parent CL for both test and dev\n\nThe isolated test CL does not need to access anything from the dev CL,\nand it just causes leakage problems.\n\nFixes #19888",
    "date": "2021-09-07T01:11:46Z",
    "url": "https://github.com/quarkusio/quarkus/commit/f704ef96e3a5f44f9234a4804c5ccc41d4ad1762",
    "details": {
      "sha": "1e65b09d0782336b565b4facadaa0414b6c3f850",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/dev/testing/TestSupport.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/f704ef96e3a5f44f9234a4804c5ccc41d4ad1762/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2Ftesting%2FTestSupport.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/f704ef96e3a5f44f9234a4804c5ccc41d4ad1762/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2Ftesting%2FTestSupport.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2Ftesting%2FTestSupport.java?ref=f704ef96e3a5f44f9234a4804c5ccc41d4ad1762",
      "patch": "@@ -129,7 +129,7 @@ public void init() {\n                         .setAssertionsEnabled(true)\n                         .setDisableClasspathCache(false)\n                         .setIsolateDeployment(true)\n-                        .setBaseClassLoader(getClass().getClassLoader())\n+                        .setBaseClassLoader(getClass().getClassLoader().getParent())\n                         .setTest(true)\n                         .setAuxiliaryApplication(true)\n                         .setHostApplicationIsTestOnly(devModeType == DevModeType.TEST_ONLY)",
      "parent_sha": "06f9f636ca2bffcd91f4a2ddd794ef296dfe9458"
    }
  },
  {
    "oid": "e5344b4125f438a7cf2cb31512fefed72f87e81b",
    "message": "Added make-do config name to all-config page",
    "date": "2019-10-11T16:08:56Z",
    "url": "https://github.com/quarkusio/quarkus/commit/e5344b4125f438a7cf2cb31512fefed72f87e81b",
    "details": {
      "sha": "13172f4e7e8ab8fe054a9e8c097a63169ec53ebc",
      "filename": "core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigDocWriter.java",
      "status": "modified",
      "additions": 38,
      "deletions": 2,
      "changes": 40,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/e5344b4125f438a7cf2cb31512fefed72f87e81b/core%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fannotation%2Fprocessor%2Fgenerate_doc%2FConfigDocWriter.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/e5344b4125f438a7cf2cb31512fefed72f87e81b/core%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fannotation%2Fprocessor%2Fgenerate_doc%2FConfigDocWriter.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fannotation%2Fprocessor%2Fgenerate_doc%2FConfigDocWriter.java?ref=e5344b4125f438a7cf2cb31512fefed72f87e81b",
      "patch": "@@ -8,6 +8,8 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n \n import io.quarkus.annotation.processor.Constants;\n \n@@ -35,16 +37,50 @@ public void writeExtensionConfigDocumentation(Map<String, List<ConfigDocItem>> e\n     public void writeAllExtensionConfigDocumentation(Map<String, List<ConfigDocItem>> extensionsConfigurations)\n             throws IOException {\n         List<ConfigDocItem> allItems = new ArrayList<>();\n-        // FIXME: sort by extension name\n-        for (Map.Entry<String, List<ConfigDocItem>> entry : extensionsConfigurations.entrySet()) {\n+        SortedMap<String, List<ConfigDocItem>> sortedExtensions = new TreeMap<>();\n+        sortedExtensions.putAll(extensionsConfigurations);\n+        for (Map.Entry<String, List<ConfigDocItem>> entry : sortedExtensions.entrySet()) {\n             final List<ConfigDocItem> configDocItems = entry.getValue();\n \n             sort(configDocItems);\n+            ConfigDocSection header = new ConfigDocSection();\n+            String title = entry.getKey();\n+            // sanitise\n+            if (title.startsWith(\"quarkus-\"))\n+                title = title.substring(8);\n+            if (title.endsWith(\".adoc\"))\n+                title = title.substring(0, title.length() - 5);\n+            if (title.endsWith(\"-config\"))\n+                title = title.substring(0, title.length() - 7);\n+            if (title.endsWith(\"-configuration\"))\n+                title = title.substring(0, title.length() - 14);\n+            title = title.replace('-', ' ');\n+            title = capitalize(title);\n+            header.setSectionDetailsTitle(title);\n+            allItems.add(new ConfigDocItem(header, null));\n             allItems.addAll(configDocItems);\n         }\n         generateDocumentation(Constants.GENERATED_DOCS_PATH.resolve(\"all-config.adoc\"), allItems);\n     }\n \n+    private String capitalize(String title) {\n+        char[] chars = title.toCharArray();\n+        boolean capitalize = true;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            if (Character.isSpaceChar(c)) {\n+                capitalize = true;\n+                continue;\n+            }\n+            if (capitalize) {\n+                if (Character.isLetter(c))\n+                    chars[i] = Character.toUpperCase(c);\n+                capitalize = false;\n+            }\n+        }\n+        return new String(chars);\n+    }\n+\n     /**\n      * Sort docs keys. The sorted list will contain the properties in the following order\n      * - 1. Map config items as last elements of the generated docs.",
      "parent_sha": "47c96644b3dac4d420673d1a1e77f6f0a403e7be"
    }
  },
  {
    "oid": "bbed7b92639459bd885b344160e94721f3706d74",
    "message": "Make sure to return null for anonymous users",
    "date": "2020-04-20T02:59:51Z",
    "url": "https://github.com/quarkusio/quarkus/commit/bbed7b92639459bd885b344160e94721f3706d74",
    "details": {
      "sha": "3232c69f1069884e0ecd495fef06f940dead7e27",
      "filename": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/standalone/QuarkusResteasySecurityContext.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/bbed7b92639459bd885b344160e94721f3706d74/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2Fstandalone%2FQuarkusResteasySecurityContext.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/bbed7b92639459bd885b344160e94721f3706d74/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2Fstandalone%2FQuarkusResteasySecurityContext.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fresteasy%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Fruntime%2Fstandalone%2FQuarkusResteasySecurityContext.java?ref=bbed7b92639459bd885b344160e94721f3706d74",
      "patch": "@@ -23,7 +23,7 @@ public QuarkusResteasySecurityContext(HttpServerRequest request, RoutingContext\n     @Override\n     public Principal getUserPrincipal() {\n         QuarkusHttpUser user = (QuarkusHttpUser) routingContext.user();\n-        if (user == null) {\n+        if (user == null || user.getSecurityIdentity().isAnonymous()) {\n             return null;\n         }\n         return user.getSecurityIdentity().getPrincipal();",
      "parent_sha": "f772aa1de07c067b44b4a52cbac3a1ab1a252515"
    }
  },
  {
    "oid": "1ad254c0e895ad82971137fd744f0ef1a2ca3fbc",
    "message": "When a provider is used in Application, it should only be registered with the server\n\nFor now this only applies to providers that already had a constraint, but we probably\nneed to add this to the rest of providers as well",
    "date": "2020-11-23T16:07:45Z",
    "url": "https://github.com/quarkusio/quarkus/commit/1ad254c0e895ad82971137fd744f0ef1a2ca3fbc",
    "details": {
      "sha": "26e19e5060c51f37f50cb88e14a6115c9e88e086",
      "filename": "extensions/quarkus-rest/deployment/src/main/java/io/quarkus/rest/deployment/processor/QuarkusRestProcessor.java",
      "status": "modified",
      "additions": 40,
      "deletions": 15,
      "changes": 55,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/1ad254c0e895ad82971137fd744f0ef1a2ca3fbc/extensions%2Fquarkus-rest%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frest%2Fdeployment%2Fprocessor%2FQuarkusRestProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/1ad254c0e895ad82971137fd744f0ef1a2ca3fbc/extensions%2Fquarkus-rest%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frest%2Fdeployment%2Fprocessor%2FQuarkusRestProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fquarkus-rest%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frest%2Fdeployment%2Fprocessor%2FQuarkusRestProcessor.java?ref=1ad254c0e895ad82971137fd744f0ef1a2ca3fbc",
      "patch": "@@ -387,7 +387,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n \n         ParamConverterProviders converterProviders = new ParamConverterProviders();\n         for (ClassInfo converterClass : paramConverterProviders) {\n-            if (keepProvider(converterClass, filterClasses, allowedClasses)) {\n+            KeepProviderResult keepProviderResult = keepProvider(converterClass, filterClasses, allowedClasses);\n+            if (keepProviderResult != KeepProviderResult.DISCARD) {\n                 ResourceParamConverterProvider converter = new ResourceParamConverterProvider();\n                 converter.setFactory(factory(converterClass, singletonClasses, recorder, beanContainerBuildItem));\n                 AnnotationInstance priorityInstance = converterClass.classAnnotation(QuarkusRestDotNames.PRIORITY);\n@@ -481,7 +482,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n \n             ResourceInterceptors interceptors = new ResourceInterceptors();\n             for (ClassInfo filterClass : containerRequestFilters) {\n-                if (keepProvider(filterClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(filterClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     ResourceRequestInterceptor interceptor = new ResourceRequestInterceptor();\n                     interceptor.setFactory(factory(filterClass, singletonClasses, recorder, beanContainerBuildItem));\n                     interceptor.setPreMatching(filterClass.classAnnotation(QuarkusRestDotNames.PRE_MATCHING) != null);\n@@ -521,7 +523,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n             }\n \n             for (ClassInfo filterClass : containerResponseFilters) {\n-                if (keepProvider(filterClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(filterClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     ResourceResponseInterceptor interceptor = new ResourceResponseInterceptor();\n                     interceptor.setFactory(factory(filterClass, singletonClasses, recorder, beanContainerBuildItem));\n                     Set<String> nameBindingNames = endpointIndexer.nameBindingNames(filterClass);\n@@ -547,7 +550,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n             }\n \n             for (ClassInfo filterClass : writerInterceptors) {\n-                if (keepProvider(filterClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(filterClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     ResourceWriterInterceptor interceptor = new ResourceWriterInterceptor();\n                     interceptor.setFactory(factory(filterClass, singletonClasses, recorder, beanContainerBuildItem));\n                     Set<String> nameBindingNames = endpointIndexer.nameBindingNames(filterClass);\n@@ -564,7 +568,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n                 }\n             }\n             for (ClassInfo filterClass : readerInterceptors) {\n-                if (keepProvider(filterClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(filterClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     ResourceReaderInterceptor interceptor = new ResourceReaderInterceptor();\n                     interceptor.setFactory(factory(filterClass, singletonClasses, recorder, beanContainerBuildItem));\n                     Set<String> nameBindingNames = endpointIndexer.nameBindingNames(filterClass);\n@@ -584,7 +589,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n             ExceptionMapping exceptionMapping = new ExceptionMapping();\n             Map<DotName, ResourceExceptionMapper<Throwable>> handledExceptionToHigherPriorityMapper = new HashMap();\n             for (ClassInfo mapperClass : exceptionMappers) {\n-                if (keepProvider(mapperClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(mapperClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     List<Type> typeParameters = JandexUtil.resolveTypeParameters(mapperClass.name(),\n                             QuarkusRestDotNames.EXCEPTION_MAPPER,\n                             index);\n@@ -619,7 +625,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n \n             ContextResolvers ctxResolvers = new ContextResolvers();\n             for (ClassInfo resolverClass : contextResolvers) {\n-                if (keepProvider(resolverClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(resolverClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     List<Type> typeParameters = JandexUtil.resolveTypeParameters(resolverClass.name(),\n                             QuarkusRestDotNames.CONTEXT_RESOLVER,\n                             index);\n@@ -632,7 +639,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n \n             Features feats = new Features();\n             for (ClassInfo featureClass : features) {\n-                if (keepProvider(featureClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(featureClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     ResourceFeature resourceFeature = new ResourceFeature();\n                     resourceFeature.setFactory(factory(featureClass, singletonClasses, recorder, beanContainerBuildItem));\n                     feats.addFeature(resourceFeature);\n@@ -641,7 +649,8 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n \n             DynamicFeatures dynamicFeats = new DynamicFeatures();\n             for (ClassInfo dynamicFeatureClass : dynamicFeatures) {\n-                if (keepProvider(dynamicFeatureClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(dynamicFeatureClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     ResourceDynamicFeature resourceFeature = new ResourceDynamicFeature();\n                     resourceFeature\n                             .setFactory(factory(dynamicFeatureClass, singletonClasses, recorder, beanContainerBuildItem));\n@@ -669,9 +678,13 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n \n             Serialisers serialisers = new Serialisers();\n             for (ClassInfo writerClass : writers) {\n-                if (keepProvider(writerClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(writerClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     ResourceWriter writer = new ResourceWriter();\n                     writer.setBuiltin(false);\n+                    if (keepProviderResult == KeepProviderResult.SERVER_ONLY) {\n+                        writer.setConstraint(RuntimeType.SERVER);\n+                    }\n                     AnnotationInstance producesAnnotation = writerClass.classAnnotation(QuarkusRestDotNames.PRODUCES);\n                     if (producesAnnotation != null) {\n                         writer.setMediaTypeStrings(Arrays.asList(producesAnnotation.value().asStringArray()));\n@@ -690,12 +703,16 @@ public void setupEndpoints(BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n                 }\n             }\n             for (ClassInfo readerClass : readers) {\n-                if (keepProvider(readerClass, filterClasses, allowedClasses)) {\n+                KeepProviderResult keepProviderResult = keepProvider(readerClass, filterClasses, allowedClasses);\n+                if (keepProviderResult != KeepProviderResult.DISCARD) {\n                     List<Type> typeParameters = JandexUtil.resolveTypeParameters(readerClass.name(),\n                             QuarkusRestDotNames.MESSAGE_BODY_READER,\n                             index);\n                     ResourceReader reader = new ResourceReader();\n                     reader.setBuiltin(false);\n+                    if (keepProviderResult == KeepProviderResult.SERVER_ONLY) {\n+                        reader.setConstraint(RuntimeType.SERVER);\n+                    }\n                     String readerClassName = readerClass.name().toString();\n                     reader.setFactory(factory(readerClass, singletonClasses, recorder, beanContainerBuildItem));\n                     AnnotationInstance consumesAnnotation = readerClass.classAnnotation(QuarkusRestDotNames.CONSUMES);\n@@ -804,12 +821,14 @@ private void registerExceptionMapper(QuarkusRestRecorder recorder,\n         }\n     }\n \n-    private boolean keepProvider(ClassInfo providerClass, boolean filterClasses, Set<String> allowedClasses) {\n+    private KeepProviderResult keepProvider(ClassInfo providerClass, boolean filterClasses, Set<String> allowedClasses) {\n         if (filterClasses) {\n-            // we don't care about provider annotations, they're manually registered\n-            return allowedClasses.contains(providerClass.name().toString());\n+            // we don't care about provider annotations, they're manually registered (but for the server only)\n+            return allowedClasses.contains(providerClass.name().toString()) ? KeepProviderResult.SERVER_ONLY\n+                    : KeepProviderResult.DISCARD;\n         }\n-        return providerClass.classAnnotation(QuarkusRestDotNames.PROVIDER) != null;\n+        return providerClass.classAnnotation(QuarkusRestDotNames.PROVIDER) != null ? KeepProviderResult.NORMAL\n+                : KeepProviderResult.DISCARD;\n     }\n \n     private <T> BeanFactory<T> factory(ClassInfo providerClass, Set<String> singletons, QuarkusRestRecorder recorder,\n@@ -1034,4 +1053,10 @@ private MethodInfo hasJaxRsCtorParams(ClassInfo classInfo) {\n         return needsHandling ? ctor : null;\n     }\n \n+    enum KeepProviderResult {\n+        NORMAL,\n+        SERVER_ONLY,\n+        DISCARD\n+    }\n+\n }",
      "parent_sha": "54bc34b08d7db7d3ee1faeb5de9fe1ab75e1f88f"
    }
  },
  {
    "oid": "204f3b1f11beb95783c14c0d3e29588685743ae1",
    "message": "issue-6280 Address Class-Path parsing issues with Java 11 and Windows, for tests launched using QuarkusDevModeTest",
    "date": "2019-12-20T14:37:03Z",
    "url": "https://github.com/quarkusio/quarkus/commit/204f3b1f11beb95783c14c0d3e29588685743ae1",
    "details": {
      "sha": "6684c0d67a93684d9c56d71185c7ee5242197ffa",
      "filename": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java",
      "status": "modified",
      "additions": 61,
      "deletions": 5,
      "changes": 66,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/204f3b1f11beb95783c14c0d3e29588685743ae1/test-framework%2Fjunit5-internal%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2FQuarkusDevModeTest.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/204f3b1f11beb95783c14c0d3e29588685743ae1/test-framework%2Fjunit5-internal%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2FQuarkusDevModeTest.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/test-framework%2Fjunit5-internal%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2FQuarkusDevModeTest.java?ref=204f3b1f11beb95783c14c0d3e29588685743ae1",
      "patch": "@@ -4,6 +4,8 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.net.URLDecoder;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.FileVisitResult;\n import java.nio.file.FileVisitor;\n@@ -15,10 +17,13 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Enumeration;\n import java.util.List;\n import java.util.ServiceLoader;\n import java.util.function.Function;\n import java.util.function.Supplier;\n+import java.util.jar.Attributes;\n+import java.util.jar.Manifest;\n import java.util.stream.Stream;\n \n import org.jboss.shrinkwrap.api.exporter.ExplodedExporter;\n@@ -45,13 +50,12 @@\n  * testing their extension functionality in dev mode. Unlike {@link QuarkusUnitTest} this will test against\n  * a clean deployment for each test method. This is nessesary to prevent undefined behaviour by making sure the\n  * deployment starts in a clean state for each test.\n- *\n- *\n+ * <p>\n+ * <p>\n  * NOTE: These tests do not run with {@link io.quarkus.runtime.LaunchMode#TEST} but rather with\n  * {@link io.quarkus.runtime.LaunchMode#DEVELOPMENT}. This is necessary to ensure dev mode is tested correctly.\n- *\n+ * <p>\n  * A side effect of this is that the tests will run on port 8080 by default instead of port 8081.\n- *\n  */\n public class QuarkusDevModeTest\n         implements BeforeEachCallback, AfterEachCallback, TestInstanceFactory {\n@@ -275,12 +279,64 @@ private DevModeContext exportArchive(Path deploymentDir, Path testSourceDir) {\n                             Collections.singleton(deploymentSourcePath.toAbsolutePath().toString()),\n                             classes.toAbsolutePath().toString(), deploymentResourcePath.toAbsolutePath().toString()));\n \n+            setDevModeRunnerJarFile(context);\n             return context;\n         } catch (Exception e) {\n             throw new RuntimeException(\"Unable to create the archive\", e);\n         }\n     }\n \n+    private static void setDevModeRunnerJarFile(final DevModeContext context) {\n+        try {\n+            /*\n+             * See https://github.com/quarkusio/quarkus/issues/6280\n+             * Maven surefire plugin launches the (forked) JVM for tests using a \"surefirebooter\" jar file.\n+             * This jar file's name starts with the prefix \"surefirebooter\" and ends with the extension \".jar\".\n+             * The jar is launched using \"java -jar .../surefirebooter*.jar ...\" semantics. This jar has a\n+             * MANIFEST which contains \"Class-Path\" entries. These entries trigger a bug in the JDK code\n+             * https://bugs.openjdk.java.net/browse/JDK-8232170 which causes hot deployment related logic in Quarkus\n+             * to fail in dev mode.\n+             * The goal in this next section is to narrow down to this specific surefirebooter*.jar which was used to launch\n+             * the tests and mark it as the \"dev mode runner jar\" (through DevModeContext#setDevModeRunnerJarFile),\n+             * so that programmatic compilation of code (during hot deployment) doesn't run into issues noted in\n+             * https://bugs.openjdk.java.net/browse/JDK-8232170.\n+             * In reality the surefirebooter*.jar isn't really a \"dev mode runner jar\" (i.e. it's not the -dev.jar that\n+             * Quarkus generates), but it's fine to mark it as such to get past this issue. This is more of a workaround\n+             * on top of another workaround. In the medium/long term the actual JDK issue fix will make its way into\n+             * almost all prominently used Java versions.\n+             */\n+            final Enumeration<URL> manifests = QuarkusDevModeTest.class.getClassLoader().getResources(\"META-INF/MANIFEST.MF\");\n+            while (manifests.hasMoreElements()) {\n+                final URL url = manifests.nextElement();\n+                // don't open streams to manifest entries unless it resembles to the one\n+                // we are interested in\n+                if (!url.getPath().contains(\"surefirebooter\")) {\n+                    continue;\n+                }\n+                try (final InputStream is = url.openStream()) {\n+                    final Manifest manifest = new Manifest(is);\n+                    final String mainClass = manifest.getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+                    // additional check to make sure we are probing the right jar\n+                    if (\"org.apache.maven.surefire.booter.ForkedBooter\".equals(mainClass)) {\n+                        final String manifestFilePath = url.getPath();\n+                        if (manifestFilePath.startsWith(\"file:\")) {\n+                            // manifest file path will be of the form jar:file:....!META-INF/MANIFEST.MF\n+                            final String jarFilePath = manifestFilePath.substring(5, manifestFilePath.lastIndexOf('!'));\n+                            final File surefirebooterJar = new File(\n+                                    URLDecoder.decode(jarFilePath, StandardCharsets.UTF_8.name()));\n+                            context.setDevModeRunnerJarFile(surefirebooterJar);\n+                        }\n+                        break;\n+                    }\n+\n+                }\n+            }\n+        } catch (Throwable t) {\n+            // ignore and move on\n+            return;\n+        }\n+    }\n+\n     /**\n      * Modifies a source file.\n      *\n@@ -303,7 +359,7 @@ public void modifySourceFile(Class<?> sourceFile, Function<String, String> mutat\n \n     /**\n      * Adds the source file that corresponds to the given class to the deployment\n-     * \n+     *\n      * @param sourceFile\n      */\n     public void addSourceFile(Class<?> sourceFile) {",
      "parent_sha": "e9176e6f11b7c07f5a1f0bf8b5c1ed94d335a55d"
    }
  },
  {
    "oid": "4ba3a469181b17f9dcf3f8f39a2ae0df06b58e81",
    "message": "Don't allow requests into restarting application\n\nIf the app is restarting then we should not short-circuit the hot reload handler/scan lock logic.\n\nThis is not perfect, as there will always be a possible race, but makes it much less likely a request will hit a torn down app.",
    "date": "2025-01-18T06:16:22Z",
    "url": "https://github.com/quarkusio/quarkus/commit/4ba3a469181b17f9dcf3f8f39a2ae0df06b58e81",
    "details": {
      "sha": "d2e2ca3d626afee5d8d7e20bc7fe3e2ad920ca57",
      "filename": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/VertxHttpHotReplacementSetup.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/4ba3a469181b17f9dcf3f8f39a2ae0df06b58e81/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fdevmode%2FVertxHttpHotReplacementSetup.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/4ba3a469181b17f9dcf3f8f39a2ae0df06b58e81/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fdevmode%2FVertxHttpHotReplacementSetup.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fdevmode%2FVertxHttpHotReplacementSetup.java?ref=4ba3a469181b17f9dcf3f8f39a2ae0df06b58e81",
      "patch": "@@ -135,7 +135,9 @@ public Void call() {\n             routingContext.request().resume();\n             return;\n         }\n-        if ((nextUpdate > System.currentTimeMillis() && !hotReplacementContext.isTest())\n+        if ((nextUpdate > System.currentTimeMillis() &&\n+                !hotReplacementContext.isTest() &&\n+                !DevConsoleManager.isDoingHttpInitiatedReload()) // if there is a live reload possibly going on we don't want to let a request through to restarting application, this is best effort, but it narrows the window a lot\n                 || routingContext.request().headers().contains(HEADER_NAME)) {\n             if (hotReplacementContext.getDeploymentProblem() != null) {\n                 handleDeploymentProblem(routingContext, hotReplacementContext.getDeploymentProblem());",
      "parent_sha": "aec3f34e9c62243319e02895711b34aad1688a48"
    }
  },
  {
    "oid": "0005bff84cb75ce0b508b7a3d8fce7297578b9c0",
    "message": "Use MongoDB 4.4 consistently",
    "date": "2023-10-20T13:45:01Z",
    "url": "https://github.com/quarkusio/quarkus/commit/0005bff84cb75ce0b508b7a3d8fce7297578b9c0",
    "details": {
      "sha": "4b5f0edd38449ffbb46d5160627509a28f6160d0",
      "filename": "integration-tests/mongodb-client/src/test/java/io/quarkus/it/mongodb/BookResourceTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/0005bff84cb75ce0b508b7a3d8fce7297578b9c0/integration-tests%2Fmongodb-client%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fmongodb%2FBookResourceTest.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/0005bff84cb75ce0b508b7a3d8fce7297578b9c0/integration-tests%2Fmongodb-client%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fmongodb%2FBookResourceTest.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/integration-tests%2Fmongodb-client%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fit%2Fmongodb%2FBookResourceTest.java?ref=0005bff84cb75ce0b508b7a3d8fce7297578b9c0",
      "patch": "@@ -13,13 +13,12 @@\n \n import io.quarkus.mongodb.health.MongoHealthCheck;\n import io.quarkus.test.common.QuarkusTestResource;\n-import io.quarkus.test.common.ResourceArg;\n import io.quarkus.test.junit.QuarkusTest;\n import io.quarkus.test.mongodb.MongoTestResource;\n import io.restassured.RestAssured;\n \n @QuarkusTest\n-@QuarkusTestResource(value = MongoTestResource.class, initArgs = @ResourceArg(name = \"version\", value = \"V4_2\"))\n+@QuarkusTestResource(value = MongoTestResource.class)\n public class BookResourceTest {\n     private static Jsonb jsonb;\n ",
      "parent_sha": "d167d198bb54178df0b0de48de0a8111dac9057e"
    }
  },
  {
    "oid": "f9565b799d77732276098cd5706b04958c4dfa19",
    "message": "Use `NewCookie.Builder` instead of constructor",
    "date": "2023-02-13T17:21:04Z",
    "url": "https://github.com/quarkusio/quarkus/commit/f9565b799d77732276098cd5706b04958c4dfa19",
    "details": {
      "sha": "77bff616144ab47a6a8d3f7a7aaeecb369a72e39",
      "filename": "independent-projects/resteasy-reactive/common/runtime/src/main/java/org/jboss/resteasy/reactive/common/headers/NewCookieHeaderDelegate.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/f9565b799d77732276098cd5706b04958c4dfa19/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fheaders%2FNewCookieHeaderDelegate.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/f9565b799d77732276098cd5706b04958c4dfa19/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fheaders%2FNewCookieHeaderDelegate.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fresteasy-reactive%2Fcommon%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fresteasy%2Freactive%2Fcommon%2Fheaders%2FNewCookieHeaderDelegate.java?ref=f9565b799d77732276098cd5706b04958c4dfa19",
      "patch": "@@ -74,8 +74,18 @@ public Object fromString(String newCookie) throws IllegalArgumentException {\n             cookieValue = \"\";\n         }\n \n-        return new NewCookie(cookieName, cookieValue, path, domain, version, comment, maxAge, expiry, secure, httpOnly,\n-                sameSite);\n+        return new NewCookie.Builder(cookieName)\n+                .value(cookieValue)\n+                .path(path)\n+                .domain(domain)\n+                .version(version)\n+                .comment(comment)\n+                .maxAge(maxAge)\n+                .expiry(expiry)\n+                .secure(secure)\n+                .httpOnly(httpOnly)\n+                .sameSite(sameSite)\n+                .build();\n \n     }\n ",
      "parent_sha": "71e316fabf5671fa9dcbad978f748c6ef92d309e"
    }
  },
  {
    "oid": "82ce7574637124772ee6fd45ca4ecf4bb009274d",
    "message": "Fix typo in warn message",
    "date": "2020-09-08T08:29:10Z",
    "url": "https://github.com/quarkusio/quarkus/commit/82ce7574637124772ee6fd45ca4ecf4bb009274d",
    "details": {
      "sha": "b7aa1765d5920649fccc5b0837133fb10524e2ef",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/steps/ClassTransformingBuildStep.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/82ce7574637124772ee6fd45ca4ecf4bb009274d/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fsteps%2FClassTransformingBuildStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/82ce7574637124772ee6fd45ca4ecf4bb009274d/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fsteps%2FClassTransformingBuildStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fsteps%2FClassTransformingBuildStep.java?ref=82ce7574637124772ee6fd45ca4ecf4bb009274d",
      "patch": "@@ -80,7 +80,7 @@ TransformedClassesBuildItem handleClassTransformation(List<BytecodeTransformerBu\n                     ClassPathElement classPathElement = archives.get(0);\n                     Path jar = classPathElement.getRoot();\n                     if (jar == null) {\n-                        log.warnf(\"Cannot transform %s as it's containing application archive could not be found.\",\n+                        log.warnf(\"Cannot transform %s as its containing application archive could not be found.\",\n                                 entry.getKey());\n                         continue;\n                     }\n@@ -130,7 +130,7 @@ public TransformedClassesBuildItem.TransformedClass call() throws Exception {\n                         }\n                     }));\n                 } else {\n-                    log.warnf(\"Cannot transform %s as it's containing application archive could not be found.\",\n+                    log.warnf(\"Cannot transform %s as its containing application archive could not be found.\",\n                             entry.getKey());\n                 }\n             }",
      "parent_sha": "724047de11bd2aea3de2d38928669c92a2e149c2"
    }
  },
  {
    "oid": "636bfa215d5dc0bbc8721df573ee413dcad6c34d",
    "message": "change remote debug connection string for JDK 9+\nfixes #7889",
    "date": "2020-03-16T16:18:25Z",
    "url": "https://github.com/quarkusio/quarkus/commit/636bfa215d5dc0bbc8721df573ee413dcad6c34d",
    "details": {
      "sha": "6a2320bdf028b5072c8b0f6e2b48d4b5b301b9c9",
      "filename": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/636bfa215d5dc0bbc8721df573ee413dcad6c34d/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FDevMojo.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/636bfa215d5dc0bbc8721df573ee413dcad6c34d/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FDevMojo.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FDevMojo.java?ref=636bfa215d5dc0bbc8721df573ee413dcad6c34d",
      "patch": "@@ -494,7 +494,7 @@ void prepare() throws Exception {\n                 }\n                 if (useDebugMode) {\n                     args.add(\"-Xdebug\");\n-                    args.add(\"-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=\" + suspend);\n+                    args.add(\"-Xrunjdwp:transport=dt_socket,address=0.0.0.0:5005,server=y,suspend=\" + suspend);\n                 }\n             } else if (debug.toLowerCase().equals(\"client\")) {\n                 args.add(\"-Xdebug\");\n@@ -509,7 +509,7 @@ void prepare() throws Exception {\n                         throw new MojoFailureException(\"The specified debug port must be greater than 0\");\n                     }\n                     args.add(\"-Xdebug\");\n-                    args.add(\"-Xrunjdwp:transport=dt_socket,address=\" + port + \",server=y,suspend=\" + suspend);\n+                    args.add(\"-Xrunjdwp:transport=dt_socket,address=0.0.0.0:\" + port + \",server=y,suspend=\" + suspend);\n                 } catch (NumberFormatException e) {\n                     throw new MojoFailureException(\n                             \"Invalid value for debug parameter: \" + debug + \" must be true|false|client|{port}\");",
      "parent_sha": "82a7cf5c7183c7e6693d43a41b89ea9dceb729ff"
    }
  },
  {
    "oid": "5a65e49a58227cefb4346ae9573b60fdaa67e23b",
    "message": "Use MojoUtils.readPom to read POM\n\n- As discussed in https://github.com/quarkusio/quarkus/pull/40869/files/2bb3087a2d14fdcf807d3d7e80d83c9a753a8929#r1617860660",
    "date": "2024-05-29T13:24:36Z",
    "url": "https://github.com/quarkusio/quarkus/commit/5a65e49a58227cefb4346ae9573b60fdaa67e23b",
    "details": {
      "sha": "8cecb28fedae0ad6f0a7f3654bedb232f1a37084",
      "filename": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/5a65e49a58227cefb4346ae9573b60fdaa67e23b/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fproject%2Fbuildfile%2FMavenProjectBuildFile.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/5a65e49a58227cefb4346ae9573b60fdaa67e23b/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fproject%2Fbuildfile%2FMavenProjectBuildFile.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Ftools%2Fdevtools-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdevtools%2Fproject%2Fbuildfile%2FMavenProjectBuildFile.java?ref=5a65e49a58227cefb4346ae9573b60fdaa67e23b",
      "patch": "@@ -381,7 +381,7 @@ protected void refreshData() {\n             return;\n         }\n         try {\n-            model = ModelUtils.readModel(projectPom);\n+            model = MojoUtils.readPom(projectPom.toFile());\n         } catch (IOException e) {\n             throw new RuntimeException(\"Failed to read \" + projectPom, e);\n         }",
      "parent_sha": "41ae1b3a8024ef8c4357e21e05915b288b05da56"
    }
  },
  {
    "oid": "8f647729dafd0cd8d8bfbc4cfcde1b829eaed631",
    "message": "Try to stabilize PausedSchedulerTest\n\nLet's give things a bit more time as CI is slow.",
    "date": "2023-10-25T12:47:13Z",
    "url": "https://github.com/quarkusio/quarkus/commit/8f647729dafd0cd8d8bfbc4cfcde1b829eaed631",
    "details": {
      "sha": "db2c6412d910921ad3d05a92a087142e5fc90344",
      "filename": "extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/PausedSchedulerTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/8f647729dafd0cd8d8bfbc4cfcde1b829eaed631/extensions%2Fscheduler%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fscheduler%2Ftest%2FPausedSchedulerTest.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/8f647729dafd0cd8d8bfbc4cfcde1b829eaed631/extensions%2Fscheduler%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fscheduler%2Ftest%2FPausedSchedulerTest.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fscheduler%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fscheduler%2Ftest%2FPausedSchedulerTest.java?ref=8f647729dafd0cd8d8bfbc4cfcde1b829eaed631",
      "patch": "@@ -44,14 +44,14 @@ public void testSchedulerPauseResume() throws InterruptedException {\n \n         // this should have no effect because the scheduler is paused\n         jobs.running.set(true);\n-        assertFalse(Jobs.JOB_LATCH.await(2, TimeUnit.SECONDS));\n+        assertFalse(Jobs.JOB_LATCH.await(4, TimeUnit.SECONDS));\n \n         scheduler.resume();\n         assertTrue(scheduler.isRunning());\n         assertTrue(Jobs.RESUMED_EVENT.get());\n \n-        assertTrue(Jobs.JOB_LATCH.await(3, TimeUnit.SECONDS));\n-        assertTrue(Jobs.EVENT_LATCH.await(3, TimeUnit.SECONDS));\n+        assertTrue(Jobs.JOB_LATCH.await(4, TimeUnit.SECONDS));\n+        assertTrue(Jobs.EVENT_LATCH.await(4, TimeUnit.SECONDS));\n     }\n \n     @Singleton",
      "parent_sha": "8d8610a8426f9452731fed9c96121f16de4f82d1"
    }
  },
  {
    "oid": "5353234275cb6f19c40b60c8483af746acc69fff",
    "message": "Fix intermittent windows failures\n\nFixes #7643",
    "date": "2020-03-12T10:02:47Z",
    "url": "https://github.com/quarkusio/quarkus/commit/5353234275cb6f19c40b60c8483af746acc69fff",
    "details": {
      "sha": "0bf5032b1e678cc9f4199e3809dcdebbc49aba32",
      "filename": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java",
      "status": "modified",
      "additions": 21,
      "deletions": 4,
      "changes": 25,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/5353234275cb6f19c40b60c8483af746acc69fff/test-framework%2Fjunit5-internal%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2FQuarkusDevModeTest.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/5353234275cb6f19c40b60c8483af746acc69fff/test-framework%2Fjunit5-internal%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2FQuarkusDevModeTest.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/test-framework%2Fjunit5-internal%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2FQuarkusDevModeTest.java?ref=5353234275cb6f19c40b60c8483af746acc69fff",
      "patch": "@@ -404,10 +404,27 @@ public void addResourceFile(String path, byte[] data) {\n      */\n     public void deleteResourceFile(String path) {\n         final Path resourceFilePath = deploymentResourcePath.resolve(path);\n-        try {\n-            Files.delete(resourceFilePath);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n+        long timeout = System.currentTimeMillis() + 5000;\n+        //in general there is a potential race here\n+        //if you serve a file you will send the data to the client, then close the resource\n+        //this means that by the time the client request is run the file may not \n+        //have been closed yet, as the test sees the response as being complete after the last data is send\n+        //we wait up to 5s for this condition to be resolved\n+        for (;;) {\n+            try {\n+                Files.delete(resourceFilePath);\n+                break;\n+            } catch (IOException e) {\n+                try {\n+                    Thread.sleep(50);\n+                } catch (InterruptedException ex) {\n+                    //ignore\n+                }\n+                if (System.currentTimeMillis() < timeout) {\n+                    continue;\n+                }\n+                throw new UncheckedIOException(e);\n+            }\n         }\n         // wait for last modified time of the parent to get updated\n         sleepForFileChanges(resourceFilePath.getParent());",
      "parent_sha": "6c9de68532d133d8239a69bcb353c616c950c1cc"
    }
  },
  {
    "oid": "76335ec4a120efa880767b9e56da4f7c0be96286",
    "message": "Fix config instantiation to account for both \"Config\" and \"Configuration\" class name suffixes",
    "date": "2019-10-28T15:20:03Z",
    "url": "https://github.com/quarkusio/quarkus/commit/76335ec4a120efa880767b9e56da4f7c0be96286",
    "details": {
      "sha": "ad3d262b6ffbb376225fc1d658ea0437b1c025ab",
      "filename": "core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigInstantiator.java",
      "status": "modified",
      "additions": 60,
      "deletions": 9,
      "changes": 69,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/76335ec4a120efa880767b9e56da4f7c0be96286/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConfigInstantiator.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/76335ec4a120efa880767b9e56da4f7c0be96286/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConfigInstantiator.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fruntime%2Fconfiguration%2FConfigInstantiator.java?ref=76335ec4a120efa880767b9e56da4f7c0be96286",
      "patch": "@@ -4,11 +4,14 @@\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.OptionalDouble;\n import java.util.OptionalInt;\n import java.util.OptionalLong;\n+import java.util.Set;\n import java.util.regex.Pattern;\n \n import org.eclipse.microprofile.config.ConfigProvider;\n@@ -28,19 +31,33 @@\n public class ConfigInstantiator {\n \n     private static final Pattern COMMA_PATTERN = Pattern.compile(\",\");\n+    // certain well-known classname suffixes that we support\n+    private static Set<String> supportedClassNameSuffix;\n+\n+    static {\n+        final Set<String> suffixes = new HashSet<>();\n+        suffixes.add(\"Config\");\n+        suffixes.add(\"Configuration\");\n+        supportedClassNameSuffix = Collections.unmodifiableSet(suffixes);\n+    }\n \n     public static void handleObject(Object o) {\n-        SmallRyeConfig config = (SmallRyeConfig) ConfigProvider.getConfig();\n-        Class cls = o.getClass();\n-        String name = dashify(cls.getSimpleName().substring(0, cls.getSimpleName().length() - \"Config\".length()));\n+        final SmallRyeConfig config = (SmallRyeConfig) ConfigProvider.getConfig();\n+        final Class cls = o.getClass();\n+        final String clsNameSuffix = getClassNameSuffix(o);\n+        if (clsNameSuffix == null) {\n+            // unsupported object type\n+            return;\n+        }\n+        final String name = dashify(cls.getSimpleName().substring(0, cls.getSimpleName().length() - clsNameSuffix.length()));\n         handleObject(\"quarkus.\" + name, o, config);\n     }\n \n     private static void handleObject(String prefix, Object o, SmallRyeConfig config) {\n \n         try {\n-            Class cls = o.getClass();\n-            if (!cls.getName().endsWith(\"Config\") && !cls.getName().endsWith(\"Configuration\")) {\n+            final Class cls = o.getClass();\n+            if (!isClassNameSuffixSupported(o)) {\n                 return;\n             }\n             for (Field field : cls.getDeclaredFields()) {\n@@ -110,14 +127,48 @@ private static void handleObject(String prefix, Object o, SmallRyeConfig config)\n         }\n     }\n \n+    //    Configuration keys are normally derived from the field names that they are tied to.\n+    //    This is done by de-camel-casing the name and then joining the segments with hyphens (-).\n+    //    Some examples:\n+    //    bindAddress becomes bind-address\n+    //    keepAliveTime becomes keep-alive-time\n+    //    requestDNSTimeout becomes request-dns-timeout\n     private static String dashify(String substring) {\n-        StringBuilder ret = new StringBuilder();\n-        for (char i : substring.toCharArray()) {\n-            if (i >= 'A' && i <= 'Z') {\n+        final StringBuilder ret = new StringBuilder();\n+        final char[] chars = substring.toCharArray();\n+        for (int i = 0; i < chars.length; i++) {\n+            final char c = chars[i];\n+            if (i != 0 && i != (chars.length - 1) && c >= 'A' && c <= 'Z') {\n                 ret.append('-');\n             }\n-            ret.append(Character.toLowerCase(i));\n+            ret.append(Character.toLowerCase(c));\n         }\n         return ret.toString();\n     }\n+\n+    private static String getClassNameSuffix(final Object o) {\n+        if (o == null) {\n+            return null;\n+        }\n+        final String klassName = o.getClass().getName();\n+        for (final String supportedSuffix : supportedClassNameSuffix) {\n+            if (klassName.endsWith(supportedSuffix)) {\n+                return supportedSuffix;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static boolean isClassNameSuffixSupported(final Object o) {\n+        if (o == null) {\n+            return false;\n+        }\n+        final String klassName = o.getClass().getName();\n+        for (final String supportedSuffix : supportedClassNameSuffix) {\n+            if (klassName.endsWith(supportedSuffix)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n }",
      "parent_sha": "222edef1271c4374227641a898e384eae1d0ba32"
    }
  },
  {
    "oid": "c1443e8f5cbaccf57448f3859f658a6a3e507906",
    "message": "Add backcompatibility",
    "date": "2024-07-15T11:46:15Z",
    "url": "https://github.com/quarkusio/quarkus/commit/c1443e8f5cbaccf57448f3859f658a6a3e507906",
    "details": {
      "sha": "57d7f2008a37eecbab28f2562f380cdc9e63d855",
      "filename": "extensions/observability-devservices/testlibs/devresource-common/src/main/java/io/quarkus/observability/devresource/DevResourceLifecycleManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/c1443e8f5cbaccf57448f3859f658a6a3e507906/extensions%2Fobservability-devservices%2Ftestlibs%2Fdevresource-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fobservability%2Fdevresource%2FDevResourceLifecycleManager.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/c1443e8f5cbaccf57448f3859f658a6a3e507906/extensions%2Fobservability-devservices%2Ftestlibs%2Fdevresource-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fobservability%2Fdevresource%2FDevResourceLifecycleManager.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fobservability-devservices%2Ftestlibs%2Fdevresource-common%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fobservability%2Fdevresource%2FDevResourceLifecycleManager.java?ref=c1443e8f5cbaccf57448f3859f658a6a3e507906",
      "patch": "@@ -38,7 +38,9 @@ public interface DevResourceLifecycleManager<T extends ContainerConfig> extends\n      * @param catalog observability catalog. If OpenTelemetry or Micrometer are enabled.\n      * @return module's config\n      */\n-    T config(ModulesConfiguration configuration, ExtensionsCatalog catalog);\n+    default T config(ModulesConfiguration configuration, ExtensionsCatalog catalog) {\n+        return config(configuration);\n+    }\n \n     /**\n      * Should we enable / start this dev resource.",
      "parent_sha": "8f06375ac76065d95b52a02101af9f91d05fd190"
    }
  },
  {
    "oid": "3a7bf9742c284271d4db12eddcce7267c2824038",
    "message": "Upgrade the Gradle dependency test to match the ByteBuddy version of Hibernate ORM",
    "date": "2021-08-26T09:45:40Z",
    "url": "https://github.com/quarkusio/quarkus/commit/3a7bf9742c284271d4db12eddcce7267c2824038",
    "details": {
      "sha": "b968f724f5b5c2b32b50f47acd271a5851c3eba8",
      "filename": "integration-tests/gradle/src/test/java/io/quarkus/gradle/ConditionalDependenciesTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/3a7bf9742c284271d4db12eddcce7267c2824038/integration-tests%2Fgradle%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fgradle%2FConditionalDependenciesTest.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/3a7bf9742c284271d4db12eddcce7267c2824038/integration-tests%2Fgradle%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fgradle%2FConditionalDependenciesTest.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/integration-tests%2Fgradle%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fgradle%2FConditionalDependenciesTest.java?ref=3a7bf9742c284271d4db12eddcce7267c2824038",
      "patch": "@@ -79,10 +79,10 @@ public void shouldImportConditionalDependency() throws IOException, URISyntaxExc\n         assertThat(mainLib.resolve(\"org.acme.ext-c-1.0-SNAPSHOT.jar\")).exists();\n         assertThat(mainLib.resolve(\"org.acme.ext-e-1.0-SNAPSHOT.jar\")).exists();\n         assertThat(mainLib.resolve(\"org.acme.ext-d-1.0-SNAPSHOT.jar\")).doesNotExist();\n-        assertThat(mainLib.resolve(\"net.bytebuddy.byte-buddy-1.11.8.jar\")).doesNotExist();\n+        assertThat(mainLib.resolve(\"net.bytebuddy.byte-buddy-1.11.12.jar\")).doesNotExist();\n \n         final Path deploymentLib = buildDir.toPath().resolve(\"quarkus-app\").resolve(\"lib\").resolve(\"deployment\");\n-        assertThat(deploymentLib.resolve(\"net.bytebuddy.byte-buddy-1.11.8.jar\")).exists();\n+        assertThat(deploymentLib.resolve(\"net.bytebuddy.byte-buddy-1.11.12.jar\")).exists();\n     }\n \n     @Test",
      "parent_sha": "76ba10b8138c008f069a65c7755852d951a43c34"
    }
  },
  {
    "oid": "a65cdd5c9fcfd877f1e79981fb18c78d32e77db8",
    "message": "Lazily register testNative task in the gradle plugin",
    "date": "2022-01-19T20:25:23Z",
    "url": "https://github.com/quarkusio/quarkus/commit/a65cdd5c9fcfd877f1e79981fb18c78d32e77db8",
    "details": {
      "sha": "2a801469594d439149846f8268adc001b66f41e9",
      "filename": "devtools/gradle/gradle-application-plugin/src/main/java/io/quarkus/gradle/QuarkusPlugin.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/a65cdd5c9fcfd877f1e79981fb18c78d32e77db8/devtools%2Fgradle%2Fgradle-application-plugin%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgradle%2FQuarkusPlugin.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/a65cdd5c9fcfd877f1e79981fb18c78d32e77db8/devtools%2Fgradle%2Fgradle-application-plugin%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgradle%2FQuarkusPlugin.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/devtools%2Fgradle%2Fgradle-application-plugin%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgradle%2FQuarkusPlugin.java?ref=a65cdd5c9fcfd877f1e79981fb18c78d32e77db8",
      "patch": "@@ -241,9 +241,10 @@ public void execute(Task test) {\n                     configurations.maybeCreate(NATIVE_TEST_RUNTIME_ONLY_CONFIGURATION_NAME)\n                             .extendsFrom(configurations.findByName(JavaPlugin.TEST_RUNTIME_ONLY_CONFIGURATION_NAME));\n \n-                    Task testNative = tasks.create(TEST_NATIVE_TASK_NAME, QuarkusTestNative.class);\n-                    testNative.dependsOn(quarkusBuild);\n-                    testNative.setShouldRunAfter(Collections.singletonList(tasks.findByName(JavaPlugin.TEST_TASK_NAME)));\n+                    tasks.register(TEST_NATIVE_TASK_NAME, QuarkusTestNative.class, testNative -> {\n+                        testNative.dependsOn(quarkusBuild);\n+                        testNative.setShouldRunAfter(Collections.singletonList(tasks.findByName(JavaPlugin.TEST_TASK_NAME)));\n+                    });\n \n                     tasks.withType(Test.class).forEach(configureTestTask);\n                     tasks.withType(Test.class).whenTaskAdded(configureTestTask::accept);",
      "parent_sha": "5d653f8bd68114488e0b262a9f48c5321ab97ca7"
    }
  },
  {
    "oid": "a034d9f3e1914fa984f33cc0b3c65e7ca95f3c00",
    "message": "Fix ConfigDescriptionsManager misinterpreting a double-quote alone (`\"`) as a quoted part",
    "date": "2022-10-04T14:28:38Z",
    "url": "https://github.com/quarkusio/quarkus/commit/a034d9f3e1914fa984f33cc0b3c65e7ca95f3c00",
    "details": {
      "sha": "98becec8c3602ed86603f8f2653067f911318715",
      "filename": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ConfigDescriptionsManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/a034d9f3e1914fa984f33cc0b3c65e7ca95f3c00/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fdevmode%2FConfigDescriptionsManager.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/a034d9f3e1914fa984f33cc0b3c65e7ca95f3c00/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fdevmode%2FConfigDescriptionsManager.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fvertx-http%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fvertx%2Fhttp%2Fruntime%2Fdevmode%2FConfigDescriptionsManager.java?ref=a034d9f3e1914fa984f33cc0b3c65e7ca95f3c00",
      "patch": "@@ -297,7 +297,7 @@ private String ensureQuoted(String part) {\n     }\n \n     private boolean isQuoted(String part) {\n-        return part.charAt(0) == '\\\"' && part.charAt(part.length() - 1) == '\\\"';\n+        return part.length() >= 2 && part.charAt(0) == '\\\"' && part.charAt(part.length() - 1) == '\\\"';\n     }\n \n     @Override",
      "parent_sha": "726645a12046b23c6842df84b456d9b63f0ca5fb"
    }
  },
  {
    "oid": "ecccff6c7abf18907062a2c6745892e9777384aa",
    "message": "Move generated app-cds file into quarkus-app directory for fast-jar",
    "date": "2021-01-26T08:04:02Z",
    "url": "https://github.com/quarkusio/quarkus/commit/ecccff6c7abf18907062a2c6745892e9777384aa",
    "details": {
      "sha": "ae3071e813865ba3a634862019f876d64887ffa4",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/ecccff6c7abf18907062a2c6745892e9777384aa/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FAppCDSBuildStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/ecccff6c7abf18907062a2c6745892e9777384aa/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FAppCDSBuildStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FAppCDSBuildStep.java?ref=ecccff6c7abf18907062a2c6745892e9777384aa",
      "patch": "@@ -148,7 +148,7 @@ private Path createClassesLst(PackageConfig packageConfig, JarBuildItem jarResul\n     private Path createAppCDS(JarBuildItem jarResult, String javaBin,\n             Path classesLstPath, boolean isFastFar) {\n \n-        Path workingDirectory = isFastFar ? jarResult.getPath().getParent().getParent() : jarResult.getPath().getParent();\n+        Path workingDirectory = jarResult.getPath().getParent();\n         Path appCDSPath = workingDirectory.resolve(\"app-cds.jsa\");\n         if (appCDSPath.toFile().exists()) {\n             try {",
      "parent_sha": "9294528e20b2423d38eaee63432b1c826f89e104"
    }
  },
  {
    "oid": "0d04b73a33beb3e963d98dd3941a4158ed8891f6",
    "message": "Check if a container runtime is set or the container build is enabled for adding the librocksdbjni-linux64.so",
    "date": "2020-02-03T07:18:55Z",
    "url": "https://github.com/quarkusio/quarkus/commit/0d04b73a33beb3e963d98dd3941a4158ed8891f6",
    "details": {
      "sha": "07dbd0389aaf932cc3c4fb0590b32270493de660",
      "filename": "extensions/kafka-streams/deployment/src/main/java/io/quarkus/kafka/streams/deployment/KafkaStreamsProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/0d04b73a33beb3e963d98dd3941a4158ed8891f6/extensions%2Fkafka-streams%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fdeployment%2FKafkaStreamsProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/0d04b73a33beb3e963d98dd3941a4158ed8891f6/extensions%2Fkafka-streams%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fdeployment%2FKafkaStreamsProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fkafka-streams%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fdeployment%2FKafkaStreamsProcessor.java?ref=0d04b73a33beb3e963d98dd3941a4158ed8891f6",
      "patch": "@@ -107,7 +107,7 @@ private void registerDefaultSerdes(BuildProducer<ReflectiveClassBuildItem> refle\n \n     private void addSupportForRocksDbLib(BuildProducer<NativeImageResourceBuildItem> nativeLibs, NativeConfig nativeConfig) {\n         // for RocksDB, either add linux64 native lib when targeting containers\n-        if (nativeConfig.containerBuild) {\n+        if (nativeConfig.containerRuntime.isPresent() || nativeConfig.containerBuild) {\n             nativeLibs.produce(new NativeImageResourceBuildItem(\"librocksdbjni-linux64.so\"));\n         }\n         // otherwise the native lib of the platform this build runs on",
      "parent_sha": "75919c2e5df11d1ccdaa7eef8d48b5a2c1a5fa5d"
    }
  },
  {
    "oid": "676eb980e0556ea7584606b399808c3cd64a6951",
    "message": "[Quarkus issue #12325] Remove unnecesary code from RestClientRecorder.\n\n[#12325] Add ResteasyClientBuilderImpl.setProviderFactory(clientProviderFactory) to RestClientRecorder",
    "date": "2020-09-26T00:07:58Z",
    "url": "https://github.com/quarkusio/quarkus/commit/676eb980e0556ea7584606b399808c3cd64a6951",
    "details": {
      "sha": "133f7e359874829ee0bf2f629bcfeb4cf70c85a9",
      "filename": "extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/RestClientRecorder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/676eb980e0556ea7584606b399808c3cd64a6951/extensions%2Frest-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frestclient%2Fruntime%2FRestClientRecorder.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/676eb980e0556ea7584606b399808c3cd64a6951/extensions%2Frest-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frestclient%2Fruntime%2FRestClientRecorder.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Frest-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Frestclient%2Fruntime%2FRestClientRecorder.java?ref=676eb980e0556ea7584606b399808c3cd64a6951",
      "patch": "@@ -7,6 +7,7 @@\n import javax.ws.rs.RuntimeType;\n \n import org.eclipse.microprofile.rest.client.spi.RestClientBuilderResolver;\n+import org.jboss.resteasy.client.jaxrs.internal.ResteasyClientBuilderImpl;\n import org.jboss.resteasy.core.providerfactory.ResteasyProviderFactoryImpl;\n import org.jboss.resteasy.microprofile.client.RestClientBuilderImpl;\n import org.jboss.resteasy.microprofile.client.RestClientExtension;\n@@ -60,15 +61,8 @@ public InjectorFactory getInjectorFactory() {\n         };\n \n         registerProviders(clientProviderFactory, useBuiltIn, providersToRegister, contributedProviders);\n-\n-        if (ResteasyProviderFactory.peekInstance() != null) {\n-            ResteasyProviderFactory serverProviderFactory = ResteasyProviderFactory.getInstance();\n-            registerProviders(serverProviderFactory, useBuiltIn, providersToRegister, contributedProviders);\n-        } else {\n-            ResteasyProviderFactory.setInstance(clientProviderFactory);\n-        }\n-\n         RestClientBuilderImpl.setProviderFactory(clientProviderFactory);\n+        ResteasyClientBuilderImpl.setProviderFactory(clientProviderFactory);\n         providerFactory = clientProviderFactory;\n     }\n ",
      "parent_sha": "6c08bcdbe906fec6c30a68631aca59400ced9ec6"
    }
  },
  {
    "oid": "bdb046d824f7ebcecf32653bafdeab27a8db176c",
    "message": "Support outputDirectory in CreateProjectMojo\n\nThis will allow the quarkus:create to be used on any directory and also useful in pom.xml when wanting to generate a project automatically",
    "date": "2019-10-28T14:36:31Z",
    "url": "https://github.com/quarkusio/quarkus/commit/bdb046d824f7ebcecf32653bafdeab27a8db176c",
    "details": {
      "sha": "be8cb53e491430e772d267bc8d8334690a9e9b4d",
      "filename": "devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java",
      "status": "modified",
      "additions": 17,
      "deletions": 9,
      "changes": 26,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/bdb046d824f7ebcecf32653bafdeab27a8db176c/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FCreateProjectMojo.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/bdb046d824f7ebcecf32653bafdeab27a8db176c/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FCreateProjectMojo.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/devtools%2Fmaven%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmaven%2FCreateProjectMojo.java?ref=bdb046d824f7ebcecf32653bafdeab27a8db176c",
      "patch": "@@ -15,6 +15,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Files;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n@@ -96,9 +97,18 @@ public class CreateProjectMojo extends AbstractMojo {\n     @Parameter(property = \"extensions\")\n     private Set<String> extensions;\n \n+    @Parameter(property = \"outputDirectory\", defaultValue = \"${basedir}\")\n+    private File outputDirectory;\n+\n     @Parameter(defaultValue = \"${session}\")\n     private MavenSession session;\n \n+    @Parameter(defaultValue = \"${project.remoteProjectRepositories}\", readonly = true, required = true)\n+    private List<RemoteRepository> repos;\n+\n+    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n+    private RepositorySystemSession repoSession;\n+\n     @Component\n     private Prompter prompter;\n \n@@ -114,12 +124,6 @@ public class CreateProjectMojo extends AbstractMojo {\n     @Component\n     private RepositorySystem repoSystem;\n \n-    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n-    private RepositorySystemSession repoSession;\n-\n-    @Parameter(defaultValue = \"${project.remoteProjectRepositories}\", readonly = true, required = true)\n-    private List<RemoteRepository> repos;\n-\n     @Override\n     public void execute() throws MojoExecutionException {\n \n@@ -129,8 +133,12 @@ public void execute() throws MojoExecutionException {\n         // We detect the Maven version during the project generation to indicate the user immediately that the installed\n         // version may not be supported.\n         mavenVersionEnforcer.ensureMavenVersion(getLog(), session);\n-\n-        File projectRoot = new File(\".\");\n+        try {\n+            Files.createDirectories(outputDirectory.toPath());\n+        } catch (IOException e) {\n+            throw new MojoExecutionException(\"Could not create directory \" + outputDirectory, e);\n+        }\n+        File projectRoot = outputDirectory;\n         File pom = new File(projectRoot, \"pom.xml\");\n \n         if (pom.isFile()) {\n@@ -150,7 +158,7 @@ public void execute() throws MojoExecutionException {\n         } else {\n             askTheUserForMissingValues();\n             if (!isDirectoryEmpty(projectRoot)) {\n-                projectRoot = new File(projectArtifactId);\n+                projectRoot = new File(outputDirectory, projectArtifactId);\n                 if (projectRoot.exists()) {\n                     throw new MojoExecutionException(\"Unable to create the project - the current directory is not empty and\" +\n                             \" the directory \" + projectArtifactId + \" exists\");",
      "parent_sha": "222edef1271c4374227641a898e384eae1d0ba32"
    }
  },
  {
    "oid": "bb0707d88c7c1a7e4878b883a9b4ed2a65778bd6",
    "message": "fix logging for oidcprovider token introspection",
    "date": "2021-07-16T15:26:57Z",
    "url": "https://github.com/quarkusio/quarkus/commit/bb0707d88c7c1a7e4878b883a9b4ed2a65778bd6",
    "details": {
      "sha": "bb44eebb265897fb11deaaabb3137b29f1d4c19e",
      "filename": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcProvider.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/bb0707d88c7c1a7e4878b883a9b4ed2a65778bd6/extensions%2Foidc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Foidc%2Fruntime%2FOidcProvider.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/bb0707d88c7c1a7e4878b883a9b4ed2a65778bd6/extensions%2Foidc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Foidc%2Fruntime%2FOidcProvider.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Foidc%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Foidc%2Fruntime%2FOidcProvider.java?ref=bb0707d88c7c1a7e4878b883a9b4ed2a65778bd6",
      "patch": "@@ -153,7 +153,7 @@ public TokenVerificationResult apply(TokenIntrospection introspectionResult, Thr\n                             throw new AuthenticationFailedException(t);\n                         }\n                         if (!Boolean.TRUE.equals(introspectionResult.getBoolean(OidcConstants.INTROSPECTION_TOKEN_ACTIVE))) {\n-                            LOG.debugf(\"Token issued to client %s is not active: %s\", oidcConfig.clientId.get());\n+                            LOG.debugf(\"Token issued to client %s is not active\", oidcConfig.clientId.get());\n                             throw new AuthenticationFailedException();\n                         }\n                         Long exp = introspectionResult.getLong(OidcConstants.INTROSPECTION_TOKEN_EXP);\n@@ -162,7 +162,7 @@ public TokenVerificationResult apply(TokenIntrospection introspectionResult, Thr\n                                     ? client.getOidcConfig().token.lifespanGrace.getAsInt()\n                                     : 0;\n                             if (System.currentTimeMillis() / 1000 > exp + lifespanGrace) {\n-                                LOG.debugf(\"Token issued to client %s has expired %s\", oidcConfig.clientId.get());\n+                                LOG.debugf(\"Token issued to client %s has expired\", oidcConfig.clientId.get());\n                                 throw new AuthenticationFailedException();\n                             }\n                         }",
      "parent_sha": "dc60271dec2b7ab1e94b9d0e74d5b9520934a598"
    }
  },
  {
    "oid": "5721a4ce18ce7dacfa8f6fdae30bde6c8573e39b",
    "message": "Better log filter",
    "date": "2019-02-20T08:49:08Z",
    "url": "https://github.com/quarkusio/quarkus/commit/5721a4ce18ce7dacfa8f6fdae30bde6c8573e39b",
    "details": {
      "sha": "a05dd01b405304e249cdc5ce4c46dda86f73a9e3",
      "filename": "core/runtime/src/main/java/org/jboss/shamrock/runtime/logging/LogCleanupFilter.java",
      "status": "modified",
      "additions": 5,
      "deletions": 9,
      "changes": 14,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/5721a4ce18ce7dacfa8f6fdae30bde6c8573e39b/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fruntime%2Flogging%2FLogCleanupFilter.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/5721a4ce18ce7dacfa8f6fdae30bde6c8573e39b/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fruntime%2Flogging%2FLogCleanupFilter.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fshamrock%2Fruntime%2Flogging%2FLogCleanupFilter.java?ref=5721a4ce18ce7dacfa8f6fdae30bde6c8573e39b",
      "patch": "@@ -6,6 +6,8 @@\n import java.util.logging.Level;\n import java.util.logging.LogRecord;\n \n+import org.jboss.logging.Logger;\n+\n public class LogCleanupFilter implements Filter {\n \n     private static class Downgrade {\n@@ -47,24 +49,18 @@ private static void downgrade(String owner, String start) {\n     \n     @Override\n     public boolean isLoggable(LogRecord record) {\n-        if(record.getLevel() != Level.INFO\n-                && record.getLevel() != org.jboss.logmanager.Level.INFO)\n+        if(record.getLevel().intValue() != Level.INFO.intValue())\n             return true;\n         Downgrade downgrade = downgrades.get(record.getLoggerName());\n-        boolean untouched = true;\n         if(downgrade != null) {\n             if(record.getMessage().startsWith(downgrade.start)) {\n                 record.setLevel(org.jboss.logmanager.Level.DEBUG);\n-                untouched = false;\n+                return Logger.getLogger(record.getLoggerName()).isDebugEnabled();\n             }\n         }\n-        if(untouched) {\n //            System.err.println(\"isLoggable: \"+record.getLoggerName());\n //            System.err.println(\"isLoggable: \"+record.getMessage());\n-            return true;\n-        }\n-        // temporary because ajusting the level is not enough\n-        return false;\n+        return true;\n     }\n \n ",
      "parent_sha": "5fbc9fbcfcb6412b3cd8ee6b15055e02fb642bec"
    }
  },
  {
    "oid": "7d85723773770ee4c2d197f28b3d9877facc260a",
    "message": "Attempt to resolve users and roles externally\n\nFixes #4824",
    "date": "2019-10-28T02:00:41Z",
    "url": "https://github.com/quarkusio/quarkus/commit/7d85723773770ee4c2d197f28b3d9877facc260a",
    "details": {
      "sha": "fff0e886ec5d6916997b7072fd529b146c7fdc3b",
      "filename": "extensions/elytron-security-properties-file/runtime/src/main/java/io/quarkus/elytron/security/runtime/ElytronPropertiesFileRecorder.java",
      "status": "modified",
      "additions": 33,
      "deletions": 18,
      "changes": 51,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/7d85723773770ee4c2d197f28b3d9877facc260a/extensions%2Felytron-security-properties-file%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Felytron%2Fsecurity%2Fruntime%2FElytronPropertiesFileRecorder.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/7d85723773770ee4c2d197f28b3d9877facc260a/extensions%2Felytron-security-properties-file%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Felytron%2Fsecurity%2Fruntime%2FElytronPropertiesFileRecorder.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Felytron-security-properties-file%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Felytron%2Fsecurity%2Fruntime%2FElytronPropertiesFileRecorder.java?ref=7d85723773770ee4c2d197f28b3d9877facc260a",
      "patch": "@@ -3,6 +3,9 @@\n import java.io.IOException;\n import java.net.URL;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.security.Provider;\n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -50,25 +53,37 @@ public Runnable loadRealm(RuntimeValue<SecurityRealm> realm, PropertiesRealmConf\n         return new Runnable() {\n             @Override\n             public void run() {\n-                log.debugf(\"loadRealm, config=%s\", config);\n-                SecurityRealm secRealm = realm.getValue();\n-                if (!(secRealm instanceof LegacyPropertiesSecurityRealm)) {\n-                    return;\n-                }\n-                log.debugf(\"Trying to loader users: /%s\", config.users);\n-                URL users = Thread.currentThread().getContextClassLoader().getResource(config.users);\n-                log.debugf(\"users: %s\", users);\n-                log.debugf(\"Trying to loader roles: %s\", config.roles);\n-                URL roles = Thread.currentThread().getContextClassLoader().getResource(config.roles);\n-                log.debugf(\"roles: %s\", roles);\n-                if (users == null && roles == null) {\n-                    String msg = String.format(\n-                            \"No PropertiesRealmConfig users/roles settings found. Configure the quarkus.security.file.%s properties\",\n-                            config.help());\n-                    throw new IllegalStateException(msg);\n-                }\n-                LegacyPropertiesSecurityRealm propsRealm = (LegacyPropertiesSecurityRealm) secRealm;\n                 try {\n+                    log.debugf(\"loadRealm, config=%s\", config);\n+                    SecurityRealm secRealm = realm.getValue();\n+                    if (!(secRealm instanceof LegacyPropertiesSecurityRealm)) {\n+                        return;\n+                    }\n+                    log.debugf(\"Trying to loader users: /%s\", config.users);\n+                    URL users;\n+                    Path p = Paths.get(config.users);\n+                    if (Files.exists(p)) {\n+                        users = p.toUri().toURL();\n+                    } else {\n+                        users = Thread.currentThread().getContextClassLoader().getResource(config.users);\n+                    }\n+                    log.debugf(\"users: %s\", users);\n+                    log.debugf(\"Trying to loader roles: %s\", config.roles);\n+                    URL roles;\n+                    p = Paths.get(config.roles);\n+                    if (Files.exists(p)) {\n+                        roles = p.toUri().toURL();\n+                    } else {\n+                        roles = Thread.currentThread().getContextClassLoader().getResource(config.roles);\n+                    }\n+                    log.debugf(\"roles: %s\", roles);\n+                    if (users == null && roles == null) {\n+                        String msg = String.format(\n+                                \"No PropertiesRealmConfig users/roles settings found. Configure the quarkus.security.file.%s properties\",\n+                                config.help());\n+                        throw new IllegalStateException(msg);\n+                    }\n+                    LegacyPropertiesSecurityRealm propsRealm = (LegacyPropertiesSecurityRealm) secRealm;\n                     propsRealm.load(users.openStream(), roles.openStream());\n                 } catch (IOException e) {\n                     throw new RuntimeException(e);",
      "parent_sha": "38fef634ca8236010f5a5fe9aacfedd55bf860a8"
    }
  },
  {
    "oid": "2cdafc2f3ead84ed4618f4e9a052c80c4049cc7b",
    "message": "Look fo existing UncaughtExceptionHandler when producing KafkaStreams instance\n\nKafkaStreams UncaughtExceptionHandler can only be set before starting the stream. This change allows an user to define a bean that implmements UncaughtExceptionHandler and use that bean, if available,\nas the stream's UncaughtExceptionHandler.",
    "date": "2021-07-05T08:57:22Z",
    "url": "https://github.com/quarkusio/quarkus/commit/2cdafc2f3ead84ed4618f4e9a052c80c4049cc7b",
    "details": {
      "sha": "93ca55cbb33966a595051ccad6bef41d98339181",
      "filename": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsProducer.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/2cdafc2f3ead84ed4618f4e9a052c80c4049cc7b/extensions%2Fkafka-streams%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fruntime%2FKafkaStreamsProducer.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/2cdafc2f3ead84ed4618f4e9a052c80c4049cc7b/extensions%2Fkafka-streams%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fruntime%2FKafkaStreamsProducer.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fkafka-streams%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkafka%2Fstreams%2Fruntime%2FKafkaStreamsProducer.java?ref=2cdafc2f3ead84ed4618f4e9a052c80c4049cc7b",
      "patch": "@@ -39,6 +39,7 @@\n import org.apache.kafka.streams.KafkaStreams.StateListener;\n import org.apache.kafka.streams.StreamsConfig;\n import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.errors.StreamsUncaughtExceptionHandler;\n import org.apache.kafka.streams.processor.StateRestoreListener;\n import org.eclipse.microprofile.config.ConfigProvider;\n import org.jboss.logging.Logger;\n@@ -73,7 +74,8 @@ public class KafkaStreamsProducer {\n     public KafkaStreamsProducer(KafkaStreamsSupport kafkaStreamsSupport, KafkaStreamsRuntimeConfig runtimeConfig,\n             Instance<Topology> topology, Instance<KafkaClientSupplier> kafkaClientSupplier,\n             @Identifier(\"default-kafka-broker\") Instance<Map<String, Object>> defaultConfiguration,\n-            Instance<StateListener> stateListener, Instance<StateRestoreListener> globalStateRestoreListener) {\n+            Instance<StateListener> stateListener, Instance<StateRestoreListener> globalStateRestoreListener,\n+            Instance<StreamsUncaughtExceptionHandler> uncaughtExceptionHandlerListener) {\n         shutdown = false;\n         // No producer for Topology -> nothing to do\n         if (topology.isUnsatisfied()) {\n@@ -104,7 +106,8 @@ public KafkaStreamsProducer(KafkaStreamsSupport kafkaStreamsSupport, KafkaStream\n         this.executorService = Executors.newSingleThreadExecutor();\n \n         this.kafkaStreams = initializeKafkaStreams(kafkaStreamsProperties, runtimeConfig, kafkaAdminClient, topology.get(),\n-                kafkaClientSupplier, stateListener, globalStateRestoreListener, executorService);\n+                kafkaClientSupplier, stateListener, globalStateRestoreListener, uncaughtExceptionHandlerListener,\n+                executorService);\n         this.kafkaStreamsTopologyManager = new KafkaStreamsTopologyManager(kafkaAdminClient);\n     }\n \n@@ -149,7 +152,7 @@ private static KafkaStreams initializeKafkaStreams(Properties kafkaStreamsProper\n             KafkaStreamsRuntimeConfig runtimeConfig, Admin adminClient, Topology topology,\n             Instance<KafkaClientSupplier> kafkaClientSupplier,\n             Instance<StateListener> stateListener, Instance<StateRestoreListener> globalStateRestoreListener,\n-            ExecutorService executorService) {\n+            Instance<StreamsUncaughtExceptionHandler> uncaughtExceptionHandlerListener, ExecutorService executorService) {\n         KafkaStreams kafkaStreams;\n         if (kafkaClientSupplier.isUnsatisfied()) {\n             kafkaStreams = new KafkaStreams(topology, kafkaStreamsProperties);\n@@ -163,6 +166,9 @@ private static KafkaStreams initializeKafkaStreams(Properties kafkaStreamsProper\n         if (!globalStateRestoreListener.isUnsatisfied()) {\n             kafkaStreams.setGlobalStateRestoreListener(globalStateRestoreListener.get());\n         }\n+        if (!uncaughtExceptionHandlerListener.isUnsatisfied()) {\n+            kafkaStreams.setUncaughtExceptionHandler(uncaughtExceptionHandlerListener.get());\n+        }\n \n         executorService.execute(new Runnable() {\n ",
      "parent_sha": "fdc95c6ca8a0cc1a0f5cd0e991abd08f02b0d6cc"
    }
  },
  {
    "oid": "00720f3e3bc266df94c08cbff365fa00ffcb97e6",
    "message": "Schedule reflective type hierarchy visits instead of processing it recursively to avoid StackOverflowError",
    "date": "2021-08-11T12:59:41Z",
    "url": "https://github.com/quarkusio/quarkus/commit/00720f3e3bc266df94c08cbff365fa00ffcb97e6",
    "details": {
      "sha": "41269ff57b0346e54c69f9227ff3a7ed145054e6",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/steps/ReflectiveHierarchyStep.java",
      "status": "modified",
      "additions": 85,
      "deletions": 61,
      "changes": 146,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/00720f3e3bc266df94c08cbff365fa00ffcb97e6/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fsteps%2FReflectiveHierarchyStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/00720f3e3bc266df94c08cbff365fa00ffcb97e6/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fsteps%2FReflectiveHierarchyStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fsteps%2FReflectiveHierarchyStep.java?ref=00720f3e3bc266df94c08cbff365fa00ffcb97e6",
      "patch": "@@ -1,6 +1,8 @@\n package io.quarkus.deployment.steps;\n \n import java.lang.reflect.Modifier;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -37,6 +39,11 @@ public class ReflectiveHierarchyStep {\n \n     private static final Logger log = Logger.getLogger(ReflectiveHierarchyStep.class);\n \n+    @FunctionalInterface\n+    private interface ReflectiveHierarchyVisitor {\n+        void visit() throws Exception;\n+    }\n+\n     @BuildStep\n     public ReflectiveHierarchyIgnoreWarningBuildItem ignoreJavaClassWarnings() {\n         return new ReflectiveHierarchyIgnoreWarningBuildItem(ReflectiveHierarchyBuildItem.IgnoreWhiteListedPredicate.INSTANCE);\n@@ -51,14 +58,18 @@ public void build(CombinedIndexBuildItem combinedIndexBuildItem,\n         Set<DotName> processedReflectiveHierarchies = new HashSet<>();\n         Map<DotName, Set<String>> unindexedClasses = new TreeMap<>();\n \n-        Predicate<ClassInfo> finalFieldsWritable = (c) -> false; // no need to make final fields writable by default\n-        if (!finalFieldsWritablePredicates.isEmpty()) {\n-            // create a predicate that returns true if any of the predicates says that final fields need to be writable\n-            finalFieldsWritable = finalFieldsWritablePredicates\n-                    .stream()\n-                    .map(ReflectiveClassFinalFieldsWritablePredicateBuildItem::getPredicate)\n-                    .reduce(c -> false, Predicate::or);\n-        }\n+        final Predicate<ClassInfo> finalFieldsWritable = finalFieldsWritablePredicates.isEmpty() ?\n+        // no need to make final fields writable by default\n+                (c) -> false\n+                :\n+                // create a predicate that returns true if any of the predicates says that final fields need to be writable\n+                finalFieldsWritablePredicates\n+                        .stream()\n+                        .map(ReflectiveClassFinalFieldsWritablePredicateBuildItem::getPredicate)\n+                        .reduce(c -> false, Predicate::or);\n+\n+        // to avoid recursive processing of the hierarchy (which could lead to a StackOverflowError) we are going to be scheduling type visits instead\n+        final Deque<ReflectiveHierarchyVisitor> visits = new ArrayDeque<>();\n \n         for (ReflectiveHierarchyBuildItem i : hierarchy) {\n             addReflectiveHierarchy(combinedIndexBuildItem,\n@@ -67,7 +78,11 @@ public void build(CombinedIndexBuildItem combinedIndexBuildItem,\n                     i.getType(),\n                     processedReflectiveHierarchies,\n                     unindexedClasses,\n-                    finalFieldsWritable, reflectiveClass);\n+                    finalFieldsWritable, reflectiveClass, visits);\n+        }\n+\n+        while (!visits.isEmpty()) {\n+            visits.removeFirst().visit();\n         }\n \n         removeIgnored(unindexedClasses, ignored);\n@@ -114,7 +129,8 @@ private void removeIgnored(Map<DotName, Set<String>> unindexedClasses,\n     private void addReflectiveHierarchy(CombinedIndexBuildItem combinedIndexBuildItem,\n             ReflectiveHierarchyBuildItem reflectiveHierarchyBuildItem, String source, Type type,\n             Set<DotName> processedReflectiveHierarchies, Map<DotName, Set<String>> unindexedClasses,\n-            Predicate<ClassInfo> finalFieldsWritable, BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+            Predicate<ClassInfo> finalFieldsWritable, BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            Deque<ReflectiveHierarchyVisitor> visits) {\n         if (type instanceof VoidType ||\n                 type instanceof PrimitiveType ||\n                 type instanceof UnresolvedTypeVariable) {\n@@ -126,38 +142,38 @@ private void addReflectiveHierarchy(CombinedIndexBuildItem combinedIndexBuildIte\n \n             addClassTypeHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, type.name(), type.name(),\n                     processedReflectiveHierarchies, unindexedClasses,\n-                    finalFieldsWritable, reflectiveClass);\n+                    finalFieldsWritable, reflectiveClass, visits);\n \n             for (ClassInfo subclass : combinedIndexBuildItem.getIndex().getAllKnownSubclasses(type.name())) {\n                 addClassTypeHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, subclass.name(),\n                         subclass.name(),\n                         processedReflectiveHierarchies,\n-                        unindexedClasses, finalFieldsWritable, reflectiveClass);\n+                        unindexedClasses, finalFieldsWritable, reflectiveClass, visits);\n             }\n             for (ClassInfo subclass : combinedIndexBuildItem.getIndex().getAllKnownImplementors(type.name())) {\n                 addClassTypeHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, subclass.name(),\n                         subclass.name(),\n                         processedReflectiveHierarchies,\n-                        unindexedClasses, finalFieldsWritable, reflectiveClass);\n+                        unindexedClasses, finalFieldsWritable, reflectiveClass, visits);\n             }\n         } else if (type instanceof ArrayType) {\n-            addReflectiveHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source,\n+            visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source,\n                     type.asArrayType().component(),\n                     processedReflectiveHierarchies,\n-                    unindexedClasses, finalFieldsWritable, reflectiveClass);\n+                    unindexedClasses, finalFieldsWritable, reflectiveClass, visits));\n         } else if (type instanceof ParameterizedType) {\n-            ParameterizedType parameterizedType = (ParameterizedType) type;\n-            if (!reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(parameterizedType.name())\n-                    && !processedReflectiveHierarchies.contains(parameterizedType.name())) {\n-                addClassTypeHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, parameterizedType.name(),\n-                        parameterizedType.name(),\n+            if (!reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(type.name())) {\n+                addClassTypeHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, type.name(),\n+                        type.name(),\n                         processedReflectiveHierarchies,\n-                        unindexedClasses, finalFieldsWritable, reflectiveClass);\n+                        unindexedClasses, finalFieldsWritable, reflectiveClass, visits);\n             }\n+            final ParameterizedType parameterizedType = (ParameterizedType) type;\n             for (Type typeArgument : parameterizedType.arguments()) {\n-                addReflectiveHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, typeArgument,\n-                        processedReflectiveHierarchies,\n-                        unindexedClasses, finalFieldsWritable, reflectiveClass);\n+                visits.addLast(\n+                        () -> addReflectiveHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, typeArgument,\n+                                processedReflectiveHierarchies,\n+                                unindexedClasses, finalFieldsWritable, reflectiveClass, visits));\n             }\n         }\n     }\n@@ -170,7 +186,8 @@ private void addClassTypeHierarchy(CombinedIndexBuildItem combinedIndexBuildItem\n             Set<DotName> processedReflectiveHierarchies,\n             Map<DotName, Set<String>> unindexedClasses,\n             Predicate<ClassInfo> finalFieldsWritable,\n-            BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            Deque<ReflectiveHierarchyVisitor> visits) {\n         if (name == null) {\n             return;\n         }\n@@ -205,55 +222,62 @@ private void addClassTypeHierarchy(CombinedIndexBuildItem combinedIndexBuildItem\n             return;\n         }\n \n-        addClassTypeHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, info.superName(), initialName,\n+        visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source,\n+                info.superName(), initialName,\n                 processedReflectiveHierarchies,\n-                unindexedClasses, finalFieldsWritable, reflectiveClass);\n+                unindexedClasses, finalFieldsWritable, reflectiveClass, visits));\n         for (FieldInfo field : info.fields()) {\n-            if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field)) {\n+            if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) ||\n+            // skip the static fields (especially loggers)\n+                    Modifier.isStatic(field.flags()) ||\n+                    // also skip the outer class elements (unfortunately, we don't have a way to test for synthetic fields in Jandex)\n+                    field.name().startsWith(\"this$\") || field.name().startsWith(\"val$\")) {\n                 continue;\n             }\n-            if (Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\") || field.name().startsWith(\"val$\")) {\n-                // skip the static fields (especially loggers)\n-                // also skip the outer class elements (unfortunately, we don't have a way to test for synthetic fields in Jandex)\n+            final Type fieldType = getFieldType(combinedIndexBuildItem, initialName, info, field);\n+            visits.addLast(\n+                    () -> addReflectiveHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, fieldType,\n+                            processedReflectiveHierarchies,\n+                            unindexedClasses, finalFieldsWritable, reflectiveClass, visits));\n+        }\n+        for (MethodInfo method : info.methods()) {\n+            if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) ||\n+            // we will only consider potential getters\n+                    method.parameters().size() > 0 ||\n+                    Modifier.isStatic(method.flags()) ||\n+                    method.returnType().kind() == Kind.VOID) {\n                 continue;\n             }\n-            Type fieldType = field.type();\n-            if ((field.type().kind() == Kind.TYPE_VARIABLE) && (info.typeParameters().size() == 1)) {\n-                // handle the common case where the super type has a generic type in the class signature which\n-                // is completely resolved by the sub type\n-                // this could be made to handle more complex cases, but it is unlikely we will have to do so\n-                if (field.type().asTypeVariable().identifier().equals(info.typeParameters().get(0).identifier())) {\n-                    try {\n-                        List<Type> types = JandexUtil.resolveTypeParameters(initialName, info.name(),\n-                                combinedIndexBuildItem.getIndex());\n-                        if (types.size() == 1) {\n-                            fieldType = types.get(0);\n-                        }\n-                    } catch (IllegalArgumentException ignored) {\n+            visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source,\n+                    method.returnType(),\n+                    processedReflectiveHierarchies,\n+                    unindexedClasses, finalFieldsWritable, reflectiveClass, visits));\n+        }\n+    }\n \n+    private static Type getFieldType(CombinedIndexBuildItem combinedIndexBuildItem, DotName initialName, ClassInfo info,\n+            FieldInfo field) {\n+        Type fieldType = field.type();\n+        if ((field.type().kind() == Kind.TYPE_VARIABLE) && (info.typeParameters().size() == 1)) {\n+            // handle the common case where the super type has a generic type in the class signature which\n+            // is completely resolved by the sub type\n+            // this could be made to handle more complex cases, but it is unlikely we will have to do so\n+            if (field.type().asTypeVariable().identifier().equals(info.typeParameters().get(0).identifier())) {\n+                try {\n+                    List<Type> types = JandexUtil.resolveTypeParameters(initialName, info.name(),\n+                            combinedIndexBuildItem.getIndex());\n+                    if (types.size() == 1) {\n+                        fieldType = types.get(0);\n                     }\n+                } catch (IllegalArgumentException ignored) {\n+\n                 }\n             }\n-            addReflectiveHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, fieldType,\n-                    processedReflectiveHierarchies,\n-                    unindexedClasses, finalFieldsWritable, reflectiveClass);\n-        }\n-        for (MethodInfo method : info.methods()) {\n-            if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method)) {\n-                continue;\n-            }\n-            if (method.parameters().size() > 0 || Modifier.isStatic(method.flags())\n-                    || method.returnType().kind() == Kind.VOID) {\n-                // we will only consider potential getters\n-                continue;\n-            }\n-            addReflectiveHierarchy(combinedIndexBuildItem, reflectiveHierarchyBuildItem, source, method.returnType(),\n-                    processedReflectiveHierarchies,\n-                    unindexedClasses, finalFieldsWritable, reflectiveClass);\n         }\n+        return fieldType;\n     }\n \n-    private boolean doFinalFieldsNeedToBeWritable(ClassInfo classInfo, Predicate<ClassInfo> finalFieldsWritable) {\n+    private static boolean doFinalFieldsNeedToBeWritable(ClassInfo classInfo, Predicate<ClassInfo> finalFieldsWritable) {\n         if (classInfo == null) {\n             return false;\n         }",
      "parent_sha": "d12bfe145499c0b320d6112745dcf49acd781742"
    }
  },
  {
    "oid": "3d0dc7b2048a31e87d978bf53b3f928e8ec4b93d",
    "message": "Revert \"Postprocess in temporary files before moving all of them at the same time\"\n\nThis reverts commit 8d01ea5c6a54d786c271c59d4c74530c8afb88da.",
    "date": "2023-02-22T13:32:36Z",
    "url": "https://github.com/quarkusio/quarkus/commit/3d0dc7b2048a31e87d978bf53b3f928e8ec4b93d",
    "details": {
      "sha": "84cf4429aa1b611da2ea0dc73be3fecad9df3163",
      "filename": "extensions/grpc/codegen/src/main/java/io/quarkus/grpc/deployment/GrpcPostProcessing.java",
      "status": "modified",
      "additions": 2,
      "deletions": 44,
      "changes": 46,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/3d0dc7b2048a31e87d978bf53b3f928e8ec4b93d/extensions%2Fgrpc%2Fcodegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgrpc%2Fdeployment%2FGrpcPostProcessing.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/3d0dc7b2048a31e87d978bf53b3f928e8ec4b93d/extensions%2Fgrpc%2Fcodegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgrpc%2Fdeployment%2FGrpcPostProcessing.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fgrpc%2Fcodegen%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fgrpc%2Fdeployment%2FGrpcPostProcessing.java?ref=3d0dc7b2048a31e87d978bf53b3f928e8ec4b93d",
      "patch": "@@ -1,14 +1,7 @@\n package io.quarkus.grpc.deployment;\n \n import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.function.Consumer;\n \n import org.jboss.logging.Logger;\n \n@@ -72,7 +65,6 @@ private boolean isEnabled(CodeGenContext context, String name, boolean def) {\n \n     public void postprocess() {\n         SourceRoot sr = new SourceRoot(root);\n-        Map<Path, Path> changedFiles = new HashMap<Path, Path>();\n         try {\n             sr.parse(\"\", new SourceRoot.Callback() {\n                 @Override\n@@ -84,19 +76,9 @@ public com.github.javaparser.utils.SourceRoot.Callback.Result process(Path local\n                         if (unit.getPrimaryType().isPresent()) {\n                             TypeDeclaration<?> type = unit.getPrimaryType().get();\n                             postprocess(unit, type);\n-\n-                            // save to a temporary file first, then move all temporary unit files at the same time\n-                            try {\n-                                unit.setStorage(Files.createTempFile(null, null),\n-                                        sr.getParserConfiguration().getCharacterEncoding())\n-                                        .getStorage().get().save(sr.getPrinter());\n-                            } catch (IOException ex) {\n-                                throw new RuntimeException(ex);\n-                            }\n-\n-                            changedFiles.put(unit.getStorage().get().getPath(), absolutePath);\n-                            return Result.DONT_SAVE;\n+                            return Result.SAVE;\n                         }\n+\n                     } else {\n                         // Compilation issue - report and skip\n                         log.errorf(\n@@ -108,33 +90,9 @@ public com.github.javaparser.utils.SourceRoot.Callback.Result process(Path local\n                     return Result.DONT_SAVE;\n                 }\n             });\n-\n-            changedFiles.entrySet().forEach(new Consumer<Entry<Path, Path>>() {\n-                @Override\n-                public void accept(Entry<Path, Path> entry) {\n-                    try {\n-                        Files.move(entry.getKey(), entry.getValue(), StandardCopyOption.REPLACE_EXISTING);\n-                    } catch (IOException ex) {\n-                        throw new RuntimeException(ex);\n-                    }\n-                }\n-            });\n-            changedFiles.clear();\n-\n         } catch (Exception e) {\n             // read issue, report and exit\n             log.error(\"Unable to parse the classes generated using protoc - skipping gRPC post processing\", e);\n-        } finally {\n-            changedFiles.entrySet().forEach(new Consumer<Entry<Path, Path>>() {\n-                @Override\n-                public void accept(Entry<Path, Path> e) {\n-                    try {\n-                        Files.deleteIfExists(e.getKey());\n-                    } catch (IOException discard) {\n-                        // Ignore it.\n-                    }\n-                }\n-            });\n         }\n     }\n ",
      "parent_sha": "b6b346c29c114bb61bb3ce12e5f8f58fa73f3897"
    }
  },
  {
    "oid": "cc0da17e9a7c23bade8ca8d1f50c9f9f4e5ecaed",
    "message": "ExtensionLoader - fix processing of @Consume, @Produce and @ProduceWeak\n\n- before this change all build steps declared on a class were\naffected/configured",
    "date": "2020-05-12T10:49:32Z",
    "url": "https://github.com/quarkusio/quarkus/commit/cc0da17e9a7c23bade8ca8d1f50c9f9f4e5ecaed",
    "details": {
      "sha": "2f1c3145eb8305c80006f0c481a4b8919f4b24bc",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/cc0da17e9a7c23bade8ca8d1f50c9f9f4e5ecaed/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FExtensionLoader.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/cc0da17e9a7c23bade8ca8d1f50c9f9f4e5ecaed/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FExtensionLoader.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2FExtensionLoader.java?ref=cc0da17e9a7c23bade8ca8d1f50c9f9f4e5ecaed",
      "patch": "@@ -866,23 +866,23 @@ public static Consumer<BuildChainBuilder> loadStepsFrom(Class<?> clazz, BuildTim\n \n             final Consume[] consumes = method.getAnnotationsByType(Consume.class);\n             if (consumes.length > 0) {\n-                stepConfig = stepConfig.andThen(bsb -> {\n+                methodStepConfig = methodStepConfig.andThen(bsb -> {\n                     for (Consume consume : consumes) {\n                         bsb.afterProduce(consume.value());\n                     }\n                 });\n             }\n             final Produce[] produces = method.getAnnotationsByType(Produce.class);\n             if (produces.length > 0) {\n-                stepConfig = stepConfig.andThen(bsb -> {\n+                methodStepConfig = methodStepConfig.andThen(bsb -> {\n                     for (Produce produce : produces) {\n                         bsb.beforeConsume(produce.value());\n                     }\n                 });\n             }\n             final ProduceWeak[] produceWeaks = method.getAnnotationsByType(ProduceWeak.class);\n             if (produceWeaks.length > 0) {\n-                stepConfig = stepConfig.andThen(bsb -> {\n+                methodStepConfig = methodStepConfig.andThen(bsb -> {\n                     for (ProduceWeak produceWeak : produceWeaks) {\n                         bsb.beforeConsume(produceWeak.value(), ProduceFlag.WEAK);\n                     }",
      "parent_sha": "aec6bcbe75ccd2eeb7a90716fbb6ff5afecef621"
    }
  },
  {
    "oid": "b13ec50943ed138249eff3bc10ba0ba19c4d178e",
    "message": "Fix warnings about exposing build item classes outside their scope",
    "date": "2025-03-27T09:32:07Z",
    "url": "https://github.com/quarkusio/quarkus/commit/b13ec50943ed138249eff3bc10ba0ba19c4d178e",
    "details": {
      "sha": "e7e9f748f95d37657dc41f77925ae94bd5da139c",
      "filename": "extensions/websockets-next/deployment/src/main/java/io/quarkus/websockets/next/deployment/WebSocketProcessor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/b13ec50943ed138249eff3bc10ba0ba19c4d178e/extensions%2Fwebsockets-next%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fwebsockets%2Fnext%2Fdeployment%2FWebSocketProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/b13ec50943ed138249eff3bc10ba0ba19c4d178e/extensions%2Fwebsockets-next%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fwebsockets%2Fnext%2Fdeployment%2FWebSocketProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fwebsockets-next%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fwebsockets%2Fnext%2Fdeployment%2FWebSocketProcessor.java?ref=b13ec50943ed138249eff3bc10ba0ba19c4d178e",
      "patch": "@@ -285,7 +285,7 @@ void collectGlobalErrorHandlers(BeanArchiveIndexBuildItem beanArchiveIndex,\n     }\n \n     @BuildStep\n-    public void collectEndpoints(BeanArchiveIndexBuildItem beanArchiveIndex,\n+    void collectEndpoints(BeanArchiveIndexBuildItem beanArchiveIndex,\n             BeanDiscoveryFinishedBuildItem beanDiscoveryFinished,\n             CallbackArgumentsBuildItem callbackArguments,\n             TransformedAnnotationsBuildItem transformedAnnotations,\n@@ -400,7 +400,7 @@ public void collectEndpoints(BeanArchiveIndexBuildItem beanArchiveIndex,\n     }\n \n     @BuildStep\n-    public void validateConnectorInjectionPoints(List<WebSocketEndpointBuildItem> endpoints,\n+    void validateConnectorInjectionPoints(List<WebSocketEndpointBuildItem> endpoints,\n             ValidationPhaseBuildItem validationPhase, BuildProducer<ValidationErrorBuildItem> validationErrors) {\n         for (InjectionPointInfo injectionPoint : validationPhase.getContext().getInjectionPoints()) {\n             if (injectionPoint.getRequiredType().name().equals(WebSocketDotNames.WEB_SOCKET_CONNECTOR)\n@@ -420,7 +420,7 @@ public void validateConnectorInjectionPoints(List<WebSocketEndpointBuildItem> en\n     }\n \n     @BuildStep\n-    public void generateEndpoints(BeanArchiveIndexBuildItem index, List<WebSocketEndpointBuildItem> endpoints,\n+    void generateEndpoints(BeanArchiveIndexBuildItem index, List<WebSocketEndpointBuildItem> endpoints,\n             CallbackArgumentsBuildItem argumentProviders,\n             TransformedAnnotationsBuildItem transformedAnnotations,\n             GlobalErrorHandlersBuildItem globalErrorHandlers,\n@@ -466,7 +466,7 @@ public String apply(String name) {\n     @Consume(SyntheticBeansRuntimeInitBuildItem.class) // SecurityHttpUpgradeCheck is runtime init due to runtime config\n     @Record(RUNTIME_INIT)\n     @BuildStep\n-    public void registerRoutes(WebSocketServerRecorder recorder, List<WebSocketEndpointBuildItem> endpoints,\n+    void registerRoutes(WebSocketServerRecorder recorder, List<WebSocketEndpointBuildItem> endpoints,\n             List<GeneratedEndpointBuildItem> generatedEndpoints, WebSocketsServerBuildConfig config,\n             ValidationPhaseBuildItem validationPhase, BuildProducer<RouteBuildItem> routes,\n             Optional<PermissionsAllowedMetaAnnotationBuildItem> metaPermissionsAllowed,",
      "parent_sha": "c24fa850bb7f33e37d4b271dbee03c2be520f9e0"
    }
  },
  {
    "oid": "ed782c97c4b9d9c4569f998a4229b7ad5ad3388a",
    "message": "Take into account that configuration properties can contain a dot in RunTimeConfigurationGenerator\n\nOtherwise we sometimes get a bug where Quarkus would get to the wrong index\nwhen parsing a configuration property, and would end up mistakenly\nreporting missing configuration properties (in a really puzzling error\nmessage...).",
    "date": "2022-07-28T09:00:02Z",
    "url": "https://github.com/quarkusio/quarkus/commit/ed782c97c4b9d9c4569f998a4229b7ad5ad3388a",
    "details": {
      "sha": "d9fca767658fc3267eda99f5898fd0c9130e8fe5",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java",
      "status": "modified",
      "additions": 29,
      "deletions": 20,
      "changes": 49,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/ed782c97c4b9d9c4569f998a4229b7ad5ad3388a/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fconfiguration%2FRunTimeConfigurationGenerator.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/ed782c97c4b9d9c4569f998a4229b7ad5ad3388a/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fconfiguration%2FRunTimeConfigurationGenerator.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fconfiguration%2FRunTimeConfigurationGenerator.java?ref=ed782c97c4b9d9c4569f998a4229b7ad5ad3388a",
      "patch": "@@ -1310,10 +1310,7 @@ private MethodDescriptor generateParserBody(final ConfigPatternMap<Container> ke\n                         if (matched instanceof FieldContainer) {\n                             final FieldContainer fieldContainer = (FieldContainer) matched;\n                             if (dynamic) {\n-                                if (!itemMember.getPropertyName().isEmpty()) {\n-                                    // consume segment\n-                                    matchedBody.invokeVirtualMethod(NI_PREVIOUS, keyIter);\n-                                }\n+                                generateConsumeSegments(matchedBody, keyIter, itemMember.getPropertyName());\n                                 // we have to get or create all containing (and contained) groups of this member\n                                 matchedBody.invokeStaticMethod(generateGetEnclosing(fieldContainer, type), keyIter,\n                                         config);\n@@ -1467,10 +1464,7 @@ private MethodDescriptor generateGetEnclosing(final FieldContainer matchNode, fi\n                     // get the parent\n                     final FieldContainer fieldContainer = (FieldContainer) parent;\n                     final ClassDefinition.ClassMember classMember = fieldContainer.getClassMember();\n-                    if (!classMember.getPropertyName().isEmpty()) {\n-                        // consume segment\n-                        mc.invokeVirtualMethod(NI_PREVIOUS, keyIter);\n-                    }\n+                    int consumedSegmentsCount = generateConsumeSegments(mc, keyIter, classMember.getPropertyName());\n                     final ResultHandle enclosing = mc.invokeStaticMethod(generateGetEnclosing(fieldContainer, type),\n                             keyIter, config);\n \n@@ -1518,10 +1512,7 @@ private MethodDescriptor generateGetEnclosing(final FieldContainer matchNode, fi\n                     } else {\n                         mc.assign(group, fieldVal);\n                     }\n-                    if (!classMember.getPropertyName().isEmpty()) {\n-                        // restore\n-                        mc.invokeVirtualMethod(NI_NEXT, keyIter);\n-                    }\n+                    generateRestoreSegments(mc, keyIter, consumedSegmentsCount);\n                     mc.returnValue(group);\n                 } else {\n                     assert parent instanceof MapContainer;\n@@ -1576,16 +1567,11 @@ private MethodDescriptor generateGetEnclosing(final MapContainer matchNode, fina\n                 if (parent instanceof FieldContainer) {\n                     // get the parent\n                     final FieldContainer fieldContainer = (FieldContainer) parent;\n-                    if (!fieldContainer.getClassMember().getPropertyName().isEmpty()) {\n-                        // consume segment\n-                        mc.invokeVirtualMethod(NI_PREVIOUS, keyIter);\n-                    }\n+                    int consumedSegmentsCount = generateConsumeSegments(mc, keyIter,\n+                            fieldContainer.getClassMember().getPropertyName());\n                     final ResultHandle enclosing = mc.invokeStaticMethod(generateGetEnclosing(fieldContainer, type),\n                             keyIter, config);\n-                    if (!fieldContainer.getClassMember().getPropertyName().isEmpty()) {\n-                        // restore\n-                        mc.invokeVirtualMethod(NI_NEXT, keyIter);\n-                    }\n+                    generateRestoreSegments(mc, keyIter, consumedSegmentsCount);\n \n                     final ResultHandle result;\n                     if (isFieldEligibleForDirectAccess(fieldContainer.getClassMember())) {\n@@ -1619,6 +1605,29 @@ private MethodDescriptor generateGetEnclosing(final MapContainer matchNode, fina\n             return md;\n         }\n \n+        private int generateConsumeSegments(BytecodeCreator bc, ResultHandle keyIter, String propertyName) {\n+            if (propertyName.isEmpty()) {\n+                return 0;\n+            }\n+            bc.invokeVirtualMethod(NI_PREVIOUS, keyIter);\n+            int consumedSegmentsCount = 1;\n+            // For properties whose name contains dots,\n+            // we need to call previous() multiple times\n+            int dotIndex = propertyName.indexOf('.');\n+            while (dotIndex >= 0) {\n+                bc.invokeVirtualMethod(NI_PREVIOUS, keyIter);\n+                ++consumedSegmentsCount;\n+                dotIndex = propertyName.indexOf('.', dotIndex + 1);\n+            }\n+            return consumedSegmentsCount;\n+        }\n+\n+        private void generateRestoreSegments(BytecodeCreator bc, ResultHandle keyIter, int consumedSegmentsCount) {\n+            for (int i = 0; i < consumedSegmentsCount; i++) {\n+                bc.invokeVirtualMethod(NI_NEXT, keyIter);\n+            }\n+        }\n+\n         private FieldDescriptor getOrCreateConverterInstance(Field field) {\n             return getOrCreateConverterInstance(field, ConverterType.of(field));\n         }",
      "parent_sha": "80304e43b91906a6b58ceb85f74f9111f9cf2b1f"
    }
  },
  {
    "oid": "8ceee5fdd2dabf6734a5c85d18ea92b192fe18b3",
    "message": "Replace quarkus.log.console.color, which was deprecated in Quarkus 2.1 https://github.com/quarkusio/quarkus/pull/18506",
    "date": "2023-05-16T20:59:44Z",
    "url": "https://github.com/quarkusio/quarkus/commit/8ceee5fdd2dabf6734a5c85d18ea92b192fe18b3",
    "details": {
      "sha": "83389f7902a647f1a5a8a6e3cb26b1396690422e",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/console/ConsoleProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/8ceee5fdd2dabf6734a5c85d18ea92b192fe18b3/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fconsole%2FConsoleProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/8ceee5fdd2dabf6734a5c85d18ea92b192fe18b3/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fconsole%2FConsoleProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fconsole%2FConsoleProcessor.java?ref=8ceee5fdd2dabf6734a5c85d18ea92b192fe18b3",
      "patch": "@@ -74,7 +74,7 @@ ConsoleInstalledBuildItem setupConsole(TestConfig config,\n             ConsoleRuntimeConfig consoleRuntimeConfig = new ConsoleRuntimeConfig();\n             consoleRuntimeConfig.color = ConfigProvider.getConfig().getOptionalValue(\"quarkus.console.color\", Boolean.class);\n             io.quarkus.runtime.logging.ConsoleConfig loggingConsoleConfig = new io.quarkus.runtime.logging.ConsoleConfig();\n-            loggingConsoleConfig.color = ConfigProvider.getConfig().getOptionalValue(\"quarkus.log.console.color\",\n+            loggingConsoleConfig.color = ConfigProvider.getConfig().getOptionalValue(\"quarkus.console.color\",\n                     Boolean.class);\n             ConsoleHelper.installConsole(config, consoleConfig, consoleRuntimeConfig, loggingConsoleConfig,\n                     launchModeBuildItem.isTest());",
      "parent_sha": "9671727feb4a3e0f3f68133518da7482ab6bb7cb"
    }
  },
  {
    "oid": "4df8c5848d51f6f6136439d0d6bc6cdd811c14a2",
    "message": "Update BeanProcessor.Builder.setTransformUnproxyableClasses() javadoc",
    "date": "2020-03-17T10:42:27Z",
    "url": "https://github.com/quarkusio/quarkus/commit/4df8c5848d51f6f6136439d0d6bc6cdd811c14a2",
    "details": {
      "sha": "aef06410db09c9834b912b2f7c59ef60a7c22025",
      "filename": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/4df8c5848d51f6f6136439d0d6bc6cdd811c14a2/independent-projects%2Farc%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Farc%2Fprocessor%2FBeanProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/4df8c5848d51f6f6136439d0d6bc6cdd811c14a2/independent-projects%2Farc%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Farc%2Fprocessor%2FBeanProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Farc%2Fprocessor%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Farc%2Fprocessor%2FBeanProcessor.java?ref=4df8c5848d51f6f6136439d0d6bc6cdd811c14a2",
      "patch": "@@ -425,8 +425,7 @@ public Builder setRemoveFinalFromProxyableMethods(boolean removeFinalForProxyabl\n         }\n \n         /**\n-         * If set to true the container will attempt to remove the final flag from a bean class that must be proxyable during\n-         * validation.\n+         * If set to true the container will transform unproxyable bean classes during validation.\n          * \n          * @param value\n          * @return self",
      "parent_sha": "4ded145cd7a88ad826214336955c108bf5de4ce6"
    }
  },
  {
    "oid": "2a74a7623924e83d4c41136d1ae053fc90e59f2e",
    "message": "Remove dead code from some Hibernate Search test",
    "date": "2022-08-02T08:35:08Z",
    "url": "https://github.com/quarkusio/quarkus/commit/2a74a7623924e83d4c41136d1ae053fc90e59f2e",
    "details": {
      "sha": "32b29c4c61aa9770b793ee887a62c40c8862a388",
      "filename": "extensions/hibernate-search-orm-elasticsearch/deployment/src/test/java/io/quarkus/hibernate/search/orm/elasticsearch/test/configuration/ConfigEnabledFalseAndActiveTrueTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 34,
      "changes": 35,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/2a74a7623924e83d4c41136d1ae053fc90e59f2e/extensions%2Fhibernate-search-orm-elasticsearch%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Fsearch%2Form%2Felasticsearch%2Ftest%2Fconfiguration%2FConfigEnabledFalseAndActiveTrueTest.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/2a74a7623924e83d4c41136d1ae053fc90e59f2e/extensions%2Fhibernate-search-orm-elasticsearch%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Fsearch%2Form%2Felasticsearch%2Ftest%2Fconfiguration%2FConfigEnabledFalseAndActiveTrueTest.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fhibernate-search-orm-elasticsearch%2Fdeployment%2Fsrc%2Ftest%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Fsearch%2Form%2Felasticsearch%2Ftest%2Fconfiguration%2FConfigEnabledFalseAndActiveTrueTest.java?ref=2a74a7623924e83d4c41136d1ae053fc90e59f2e",
      "patch": "@@ -1,22 +1,12 @@\n package io.quarkus.hibernate.search.orm.elasticsearch.test.configuration;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n-import javax.inject.Inject;\n-\n-import org.hibernate.Session;\n-import org.hibernate.SessionFactory;\n-import org.hibernate.search.mapper.orm.Search;\n-import org.hibernate.search.mapper.orm.mapping.SearchMapping;\n-import org.hibernate.search.mapper.orm.session.SearchSession;\n-import org.hibernate.search.util.common.SearchException;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n import org.jboss.shrinkwrap.api.spec.JavaArchive;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n-import io.quarkus.arc.Arc;\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.test.QuarkusUnitTest;\n \n@@ -35,31 +25,8 @@ public class ConfigEnabledFalseAndActiveTrueTest {\n                             \"If you want Hibernate Search to be active at runtime, you must set 'quarkus.hibernate-search-orm.enabled' to 'true' at build time\",\n                             \"If you don't want Hibernate Search to be active at runtime, you must leave 'quarkus.hibernate-search-orm.active' unset or set it to 'false'\"));\n \n-    @Inject\n-    SessionFactory sessionFactory;\n-\n     @Test\n     public void test() {\n-        assertThatThrownBy(() -> Arc.container().instance(SearchMapping.class).get())\n-                .isInstanceOf(IllegalStateException.class)\n-                .hasMessageContainingAll(\n-                        \"Cannot retrieve the SearchMapping for persistence unit <default>\",\n-                        \"Hibernate Search was disabled through configuration properties\");\n-\n-        assertThatThrownBy(() -> Search.mapping(sessionFactory))\n-                .isInstanceOf(SearchException.class)\n-                .hasMessageContaining(\"Hibernate Search was not initialized.\");\n-\n-        assertThatThrownBy(() -> Arc.container().instance(SearchSession.class).get())\n-                .isInstanceOf(IllegalStateException.class)\n-                .hasMessageContainingAll(\n-                        \"Cannot retrieve the SearchSession for persistence unit <default>\",\n-                        \"Hibernate Search was disabled through configuration properties\");\n-\n-        try (Session session = sessionFactory.openSession()) {\n-            assertThatThrownBy(() -> Search.session(session).search(IndexedEntity.class))\n-                    .isInstanceOf(SearchException.class)\n-                    .hasMessageContaining(\"Hibernate Search was not initialized.\");\n-        }\n+        // Startup should fail\n     }\n }",
      "parent_sha": "d9dfbca31de33dd0abc59804f320e8809d21d146"
    }
  },
  {
    "oid": "084eddfe222e0ee5e5dbc9808a6bb34d1d0bda9f",
    "message": "Allow two stars as rolename as described in servlet spec",
    "date": "2024-05-01T07:03:12Z",
    "url": "https://github.com/quarkusio/quarkus/commit/084eddfe222e0ee5e5dbc9808a6bb34d1d0bda9f",
    "details": {
      "sha": "2e14e0bf8e015013499613a45f1b53435785ce9e",
      "filename": "extensions/undertow/deployment/src/main/java/io/quarkus/undertow/deployment/UndertowBuildStep.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/084eddfe222e0ee5e5dbc9808a6bb34d1d0bda9f/extensions%2Fundertow%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fundertow%2Fdeployment%2FUndertowBuildStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/084eddfe222e0ee5e5dbc9808a6bb34d1d0bda9f/extensions%2Fundertow%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fundertow%2Fdeployment%2FUndertowBuildStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fundertow%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fundertow%2Fdeployment%2FUndertowBuildStep.java?ref=084eddfe222e0ee5e5dbc9808a6bb34d1d0bda9f",
      "patch": "@@ -551,7 +551,7 @@ public ServletDeploymentManagerBuildItem build(List<ServletBuildItem> servlets,\n                 if (constraint.getAuthConstraint() == null) {\n                     // no auth constraint means we permit the empty roles\n                     securityConstraint.setEmptyRoleSemantic(PERMIT);\n-                } else if (roleNames.size() == 1 && roleNames.contains(\"*\")) {\n+                } else if (roleNames.size() == 1 && (roleNames.contains(\"*\") || roleNames.contains(\"**\"))) {\n                     securityConstraint.setEmptyRoleSemantic(AUTHENTICATE);\n                 } else {\n                     securityConstraint.addRolesAllowed(roleNames);",
      "parent_sha": "dfc948c20ca85726158c919e284871a5821f3afd"
    }
  },
  {
    "oid": "b8486294f65b5c544e41900a7f8db384a65088ee",
    "message": "Don't include optional deps for the deployment CP\n\nAs these are resolved indivisually Maven is including\ntop level optional deps for each -deployment artifact.\n\nThis is not desired behaviour, as only optional deps\nin the users project should be included.",
    "date": "2020-04-09T02:06:39Z",
    "url": "https://github.com/quarkusio/quarkus/commit/b8486294f65b5c544e41900a7f8db384a65088ee",
    "details": {
      "sha": "e3a09f82d6feed2056b4a846618814ef81bca177",
      "filename": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/BuildDependencyGraphVisitor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/b8486294f65b5c544e41900a7f8db384a65088ee/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2FBuildDependencyGraphVisitor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/b8486294f65b5c544e41900a7f8db384a65088ee/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2FBuildDependencyGraphVisitor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/independent-projects%2Fbootstrap%2Fcore%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fbootstrap%2Fresolver%2Fmaven%2FBuildDependencyGraphVisitor.java?ref=b8486294f65b5c544e41900a7f8db384a65088ee",
      "patch": "@@ -136,7 +136,10 @@ private void visitLeave(DependencyNode node) {\n         if (deploymentNode != null) {\n             if (runtimeNode == null && !appDeps.contains(new AppArtifactKey(artifact.getGroupId(),\n                     artifact.getArtifactId(), artifact.getClassifier(), artifact.getExtension()))) {\n-                deploymentDepNodes.add(node);\n+                //we never want optional deps on the deployment CP\n+                if (!node.getDependency().isOptional()) {\n+                    deploymentDepNodes.add(node);\n+                }\n             } else if (runtimeNode == node) {\n                 runtimeNode = null;\n                 runtimeArtifact = null;",
      "parent_sha": "eefaa2681bfe7ecf3ec77ace2cc8f69a4949db6c"
    }
  },
  {
    "oid": "e849b75d05deefaf718eba85f84ee421c295588d",
    "message": "Handle new format of used_classes_* reports in GraalVM for JDK 24\n\nStarting with GraalVM for JDK 24 the format of the report has changed\nprefixing each line with the class loader name and a colon, e.g.:\n\nGraalVM for JDK 22 (and 23 which is not released yet):\n```\norg.postgresql.jdbc.PgSQLXML\n```\n\nGraalVM for JDK 24:\n```\ncom.oracle.svm.hosted.NativeImageClassLoader:org.postgresql.jdbc.PgSQLXML\n```\n\nCloses https://github.com/quarkusio/quarkus/issues/41917",
    "date": "2024-07-16T17:53:43Z",
    "url": "https://github.com/quarkusio/quarkus/commit/e849b75d05deefaf718eba85f84ee421c295588d",
    "details": {
      "sha": "78da8657e4afd90d54db0858272dbfc90f58a835",
      "filename": "test-framework/junit5/src/main/java/io/quarkus/test/junit/nativeimage/ClassInclusionReport.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/e849b75d05deefaf718eba85f84ee421c295588d/test-framework%2Fjunit5%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fjunit%2Fnativeimage%2FClassInclusionReport.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/e849b75d05deefaf718eba85f84ee421c295588d/test-framework%2Fjunit5%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fjunit%2Fnativeimage%2FClassInclusionReport.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/test-framework%2Fjunit5%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Ftest%2Fjunit%2Fnativeimage%2FClassInclusionReport.java?ref=e849b75d05deefaf718eba85f84ee421c295588d",
      "patch": "@@ -37,7 +37,10 @@ public static ClassInclusionReport load() {\n         TreeSet<String> set = new TreeSet<>();\n         try (Scanner scanner = new Scanner(usedClassesReport.toFile())) {\n             while (scanner.hasNextLine()) {\n-                set.add(scanner.nextLine());\n+                // Starting with GraalVM for JDK 24 the format of the report has changed prefixing each line with\n+                // the class loader name and a colon. We need to strip that part.\n+                String[] line = scanner.nextLine().split(\":\");\n+                set.add(line[line.length - 1]);\n             }\n         } catch (FileNotFoundException e) {\n             throw new RuntimeException(\"Could not load used classes report\", e);",
      "parent_sha": "fdbcaf1423441a9fd935c4d913c8151ed7130a48"
    }
  },
  {
    "oid": "76fb7499aab16bb279e6d2c5b0a502d16922ba25",
    "message": "Add support for watching databases using custom ChangeStreamOptions in Reactive Mongo change streams.",
    "date": "2022-08-28T22:01:16Z",
    "url": "https://github.com/quarkusio/quarkus/commit/76fb7499aab16bb279e6d2c5b0a502d16922ba25",
    "details": {
      "sha": "fc99cdeebcb6efa866223c9f3402706e59b3d318",
      "filename": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoDatabaseImpl.java",
      "status": "modified",
      "additions": 15,
      "deletions": 7,
      "changes": 22,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/76fb7499aab16bb279e6d2c5b0a502d16922ba25/extensions%2Fmongodb-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmongodb%2Fimpl%2FReactiveMongoDatabaseImpl.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/76fb7499aab16bb279e6d2c5b0a502d16922ba25/extensions%2Fmongodb-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmongodb%2Fimpl%2FReactiveMongoDatabaseImpl.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fmongodb-client%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fmongodb%2Fimpl%2FReactiveMongoDatabaseImpl.java?ref=76fb7499aab16bb279e6d2c5b0a502d16922ba25",
      "patch": "@@ -10,6 +10,7 @@\n import com.mongodb.client.model.CreateViewOptions;\n import com.mongodb.client.model.changestream.ChangeStreamDocument;\n import com.mongodb.reactivestreams.client.AggregatePublisher;\n+import com.mongodb.reactivestreams.client.ChangeStreamPublisher;\n import com.mongodb.reactivestreams.client.ClientSession;\n import com.mongodb.reactivestreams.client.ListCollectionsPublisher;\n import com.mongodb.reactivestreams.client.MongoDatabase;\n@@ -217,7 +218,14 @@ public <T> Multi<ChangeStreamDocument<T>> watch(Class<T> clazz) {\n \n     @Override\n     public <T> Multi<ChangeStreamDocument<T>> watch(Class<T> clazz, ChangeStreamOptions options) {\n-        return null;\n+        return Wrappers.toMulti(apply(options, database.watch(clazz)));\n+    }\n+\n+    private <D> ChangeStreamPublisher<D> apply(ChangeStreamOptions options, ChangeStreamPublisher<D> watch) {\n+        if (options == null) {\n+            return watch;\n+        }\n+        return options.apply(watch);\n     }\n \n     @Override\n@@ -227,7 +235,7 @@ public Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline\n \n     @Override\n     public Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline, ChangeStreamOptions options) {\n-        return null;\n+        return Wrappers.toMulti(apply(options, database.watch(pipeline)));\n     }\n \n     @Override\n@@ -238,7 +246,7 @@ public <T> Multi<ChangeStreamDocument<T>> watch(List<? extends Bson> pipeline, C\n     @Override\n     public <T> Multi<ChangeStreamDocument<T>> watch(List<? extends Bson> pipeline, Class<T> clazz,\n             ChangeStreamOptions options) {\n-        return null;\n+        return Wrappers.toMulti(apply(options, database.watch(pipeline, clazz)));\n     }\n \n     @Override\n@@ -248,7 +256,7 @@ public Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession)\n \n     @Override\n     public Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, ChangeStreamOptions options) {\n-        return null;\n+        return Wrappers.toMulti(apply(options, database.watch(clientSession)));\n     }\n \n     @Override\n@@ -259,7 +267,7 @@ public <T> Multi<ChangeStreamDocument<T>> watch(ClientSession clientSession, Cla\n     @Override\n     public <T> Multi<ChangeStreamDocument<T>> watch(ClientSession clientSession, Class<T> clazz,\n             ChangeStreamOptions options) {\n-        return null;\n+        return Wrappers.toMulti(apply(options, database.watch(clientSession, clazz)));\n     }\n \n     @Override\n@@ -270,7 +278,7 @@ public Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n     @Override\n     public Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n             ChangeStreamOptions options) {\n-        return null;\n+        return Wrappers.toMulti(apply(options, database.watch(clientSession, pipeline)));\n     }\n \n     @Override\n@@ -282,7 +290,7 @@ public <T> Multi<ChangeStreamDocument<T>> watch(ClientSession clientSession, Lis\n     @Override\n     public <T> Multi<ChangeStreamDocument<T>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n             Class<T> clazz, ChangeStreamOptions options) {\n-        return null;\n+        return Wrappers.toMulti(apply(options, database.watch(clientSession, pipeline, clazz)));\n     }\n \n     @Override",
      "parent_sha": "4903a2bbc74c09e3a51ebd0580c675551446c3a8"
    }
  },
  {
    "oid": "f0cab2ad6b2b2a6af1988f6b4c11994aa559d89e",
    "message": "Make config method parameters instead of fields",
    "date": "2020-04-21T19:06:36Z",
    "url": "https://github.com/quarkusio/quarkus/commit/f0cab2ad6b2b2a6af1988f6b4c11994aa559d89e",
    "details": {
      "sha": "5e1014339ae595d90e90abc60bb498dc06d7eda4",
      "filename": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/f0cab2ad6b2b2a6af1988f6b4c11994aa559d89e/extensions%2Fhibernate-validator%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Fvalidator%2Fdeployment%2FHibernateValidatorProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/f0cab2ad6b2b2a6af1988f6b4c11994aa559d89e/extensions%2Fhibernate-validator%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Fvalidator%2Fdeployment%2FHibernateValidatorProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fhibernate-validator%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fhibernate%2Fvalidator%2Fdeployment%2FHibernateValidatorProcessor.java?ref=f0cab2ad6b2b2a6af1988f6b4c11994aa559d89e",
      "patch": "@@ -89,10 +89,6 @@ class HibernateValidatorProcessor {\n \n     private static final Pattern BUILT_IN_CONSTRAINT_REPEATABLE_CONTAINER_PATTERN = Pattern.compile(\"\\\\$List$\");\n \n-    private LocalesBuildTimeConfig localesBuildTimeConfig;\n-\n-    private HibernateValidatorBuildTimeConfig hibernateValidatorBuildTimeConfig;\n-\n     @BuildStep\n     HotDeploymentWatchedFileBuildItem configFile() {\n         return new HotDeploymentWatchedFileBuildItem(META_INF_VALIDATION_XML);\n@@ -146,7 +142,9 @@ public void build(HibernateValidatorRecorder recorder, RecorderContext recorderC\n             BuildProducer<BeanContainerListenerBuildItem> beanContainerListener,\n             ShutdownContextBuildItem shutdownContext,\n             List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n-            Capabilities capabilities) throws Exception {\n+            Capabilities capabilities,\n+            LocalesBuildTimeConfig localesBuildTimeConfig,\n+            HibernateValidatorBuildTimeConfig hibernateValidatorBuildTimeConfig) throws Exception {\n \n         feature.produce(new FeatureBuildItem(FeatureBuildItem.HIBERNATE_VALIDATOR));\n ",
      "parent_sha": "f7565c0cd50bb91028410c6037f85784d54b731b"
    }
  },
  {
    "oid": "e50f3a0d513070413c27a6f19d0fc8cc52c49904",
    "message": "Vert.x 4: Only end the upload when the file have been written to the FS and not when the uploaded file has been read.",
    "date": "2021-04-07T19:18:37Z",
    "url": "https://github.com/quarkusio/quarkus/commit/e50f3a0d513070413c27a6f19d0fc8cc52c49904",
    "details": {
      "sha": "f18c90c0005fad500c3ba17e5a2f926de0320f8e",
      "filename": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/MultipartFormHandler.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/e50f3a0d513070413c27a6f19d0fc8cc52c49904/extensions%2Fresteasy-reactive%2Fquarkus-resteasy-reactive%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Freactive%2Fserver%2Fruntime%2FMultipartFormHandler.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/e50f3a0d513070413c27a6f19d0fc8cc52c49904/extensions%2Fresteasy-reactive%2Fquarkus-resteasy-reactive%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Freactive%2Fserver%2Fruntime%2FMultipartFormHandler.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fresteasy-reactive%2Fquarkus-resteasy-reactive%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fresteasy%2Freactive%2Fserver%2Fruntime%2FMultipartFormHandler.java?ref=e50f3a0d513070413c27a6f19d0fc8cc52c49904",
      "patch": "@@ -133,12 +133,18 @@ public void handle(HttpServerFileUpload upload) {\n                     String uploadedFileName = new File(MultipartFormVertxHandler.this.uploadsDirectory,\n                             UUID.randomUUID().toString()).getPath();\n                     upload.exceptionHandler(new UploadExceptionHandler(rrContext));\n-                    upload.streamToFileSystem(uploadedFileName).exceptionHandler(new UploadExceptionHandler(rrContext))\n-                            .endHandler(new Handler<Void>() {\n+                    upload.streamToFileSystem(uploadedFileName)\n+                            .onSuccess(new Handler<Void>() {\n                                 @Override\n-                                public void handle(Void event) {\n+                                public void handle(Void x) {\n                                     uploadEnded();\n                                 }\n+                            })\n+                            .onFailure(new Handler<Throwable>() {\n+                                @Override\n+                                public void handle(Throwable ignored) {\n+                                    new UploadExceptionHandler(rrContext);\n+                                }\n                             });\n                     FileUploadImpl fileUpload = new FileUploadImpl(uploadedFileName, upload);\n                     fileUploads.add(fileUpload);",
      "parent_sha": "cb3be35df0ea2710d286bca848d60219d6b35d16"
    }
  },
  {
    "oid": "a9a167bbc9218e7a151bafeef962c1a9fb9e3431",
    "message": "Move detection of java home path into getNativeImageExecutable",
    "date": "2021-02-19T17:22:22Z",
    "url": "https://github.com/quarkusio/quarkus/commit/a9a167bbc9218e7a151bafeef962c1a9fb9e3431",
    "details": {
      "sha": "306b75bc4a683d4e2f8cc9eb36b91e3186298a0e",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/a9a167bbc9218e7a151bafeef962c1a9fb9e3431/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FNativeImageBuildStep.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/a9a167bbc9218e7a151bafeef962c1a9fb9e3431/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FNativeImageBuildStep.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fpkg%2Fsteps%2FNativeImageBuildStep.java?ref=a9a167bbc9218e7a151bafeef962c1a9fb9e3431",
      "patch": "@@ -316,22 +316,7 @@ private static List<String> getNativeImage(NativeConfig nativeConfig,\n             Path outputDir) {\n         boolean isContainerBuild = nativeConfig.containerRuntime.isPresent() || nativeConfig.containerBuild;\n         if (!isContainerBuild) {\n-            Optional<String> graal = nativeConfig.graalvmHome;\n-            File java = nativeConfig.javaHome;\n-            if (java == null) {\n-                // try system property first - it will be the JAVA_HOME used by the current JVM\n-                String home = System.getProperty(JAVA_HOME_SYS);\n-                if (home == null) {\n-                    // No luck, somewhat a odd JVM not enforcing this property\n-                    // try with the JAVA_HOME environment variable\n-                    home = System.getenv(JAVA_HOME_ENV);\n-                }\n-\n-                if (home != null) {\n-                    java = new File(home);\n-                }\n-            }\n-            List<String> nativeImageExecutable = getNativeImageExecutable(graal, java);\n+            List<String> nativeImageExecutable = getNativeImageExecutable(nativeConfig);\n             if (nativeImageExecutable != null) {\n                 return nativeImageExecutable;\n             }\n@@ -589,15 +574,30 @@ private void checkGraalVMVersion(GraalVM.Version version) {\n         }\n     }\n \n-    private static List<String> getNativeImageExecutable(Optional<String> graalVmHome, File javaHome) {\n+    private static List<String> getNativeImageExecutable(NativeConfig nativeConfig) {\n         String executableName = getNativeImageExecutableName();\n-        if (graalVmHome.isPresent()) {\n-            File file = Paths.get(graalVmHome.get(), \"bin\", executableName).toFile();\n+        if (nativeConfig.graalvmHome.isPresent()) {\n+            File file = Paths.get(nativeConfig.graalvmHome.get(), \"bin\", executableName).toFile();\n             if (file.exists()) {\n                 return Collections.singletonList(file.getAbsolutePath());\n             }\n         }\n \n+        File javaHome = nativeConfig.javaHome;\n+        if (javaHome == null) {\n+            // try system property first - it will be the JAVA_HOME used by the current JVM\n+            String home = System.getProperty(JAVA_HOME_SYS);\n+            if (home == null) {\n+                // No luck, somewhat a odd JVM not enforcing this property\n+                // try with the JAVA_HOME environment variable\n+                home = System.getenv(JAVA_HOME_ENV);\n+            }\n+\n+            if (home != null) {\n+                javaHome = new File(home);\n+            }\n+        }\n+\n         if (javaHome != null) {\n             File file = new File(javaHome, \"bin/\" + executableName);\n             if (file.exists()) {",
      "parent_sha": "e7c18138c5854d5f58b4a629fd9eaf1e868c802e"
    }
  },
  {
    "oid": "6348062c9db6bd8e8e860b98f8754b80a9b06bc0",
    "message": "Minor continous testing fix\n\nThis could cause issues if a dev mode\nrestart and CT scan happened at the\nsame time.",
    "date": "2021-04-25T23:19:16Z",
    "url": "https://github.com/quarkusio/quarkus/commit/6348062c9db6bd8e8e860b98f8754b80a9b06bc0",
    "details": {
      "sha": "b1925b536c768c6c646816294171ced8470cee9c",
      "filename": "core/deployment/src/main/java/io/quarkus/deployment/dev/RuntimeUpdatesProcessor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/6348062c9db6bd8e8e860b98f8754b80a9b06bc0/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2FRuntimeUpdatesProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/6348062c9db6bd8e8e860b98f8754b80a9b06bc0/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2FRuntimeUpdatesProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fdeployment%2Fdev%2FRuntimeUpdatesProcessor.java?ref=6348062c9db6bd8e8e860b98f8754b80a9b06bc0",
      "patch": "@@ -451,7 +451,9 @@ public Set<String> syncState(Map<String, String> fileHashes) {\n \n     ClassScanResult checkForChangedClasses(boolean firstScan) {\n         ClassScanResult classScanResult = checkForChangedClasses(compiler, DevModeContext.ModuleInfo::getMain, firstScan, main);\n-        test.merge(main);\n+        if (firstScan) {\n+            test.merge(main);\n+        }\n         return classScanResult;\n     }\n \n@@ -819,8 +821,8 @@ public RuntimeUpdatesProcessor setWatchedFilePaths(Map<String, Boolean> watchedF\n                     }\n                     if (includeTest) {\n                         test.watchedFileTimestamps.put(config, 0L);\n-                        main.watchedFileTimestamps.putAll(extraWatchedFileTimestamps);\n                     }\n+                    main.watchedFileTimestamps.putAll(extraWatchedFileTimestamps);\n                 }\n             }\n         }",
      "parent_sha": "c5d116a785ece47c5eca0147013b60193f19b505"
    }
  },
  {
    "oid": "84d72f8e476f5211597a011d8741579381c9162d",
    "message": "Use ConfigProvider.getConfig() in smallrye-reactive-messaging",
    "date": "2019-11-22T18:15:14Z",
    "url": "https://github.com/quarkusio/quarkus/commit/84d72f8e476f5211597a011d8741579381c9162d",
    "details": {
      "sha": "7eebdbc3607860171e54c8e21a2bddc734ea4e53",
      "filename": "extensions/smallrye-reactive-messaging/deployment/src/main/java/io/quarkus/smallrye/reactivemessaging/deployment/SmallRyeReactiveMessagingProcessor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/quarkusio/quarkus/blob/84d72f8e476f5211597a011d8741579381c9162d/extensions%2Fsmallrye-reactive-messaging%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fsmallrye%2Freactivemessaging%2Fdeployment%2FSmallRyeReactiveMessagingProcessor.java",
      "raw_url": "https://github.com/quarkusio/quarkus/raw/84d72f8e476f5211597a011d8741579381c9162d/extensions%2Fsmallrye-reactive-messaging%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fsmallrye%2Freactivemessaging%2Fdeployment%2FSmallRyeReactiveMessagingProcessor.java",
      "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions%2Fsmallrye-reactive-messaging%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fsmallrye%2Freactivemessaging%2Fdeployment%2FSmallRyeReactiveMessagingProcessor.java?ref=84d72f8e476f5211597a011d8741579381c9162d",
      "patch": "@@ -12,7 +12,7 @@\n import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.spi.DeploymentException;\n \n-import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.eclipse.microprofile.config.ConfigProvider;\n import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n import org.jboss.jandex.AnnotationInstance;\n import org.jboss.jandex.AnnotationTarget;\n@@ -236,7 +236,7 @@ public void build(SmallRyeReactiveMessagingRecorder recorder, RecorderContext re\n         recorder.registerMediators(configurations, beanContainer.getValue());\n \n         for (EmitterBuildItem it : emitterFields) {\n-            int defaultBufferSize = ConfigProviderResolver.instance().getConfig()\n+            int defaultBufferSize = ConfigProvider.getConfig()\n                     .getOptionalValue(\"smallrye.messaging.emitter.default-buffer-size\", Integer.class).orElse(127);\n             if (it.getOverflow() != null) {\n                 recorder.configureEmitter(beanContainer.getValue(), it.getName(), it.getOverflow(), it.getBufferSize(),",
      "parent_sha": "876f545147889e6bd03c87fbeb5aa476b4fb5003"
    }
  }
]