[
  {
    "oid": "ec4767aad0be23f00f8875d308a4b5f4392dec79",
    "message": "Replace local variable `activity` from test code",
    "date": "2015-12-29T02:03:42Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/ec4767aad0be23f00f8875d308a4b5f4392dec79",
    "details": {
      "sha": "3aa470fffd9650bbf3d8ef72126bb32109f5c71e",
      "filename": "processor/src/test/java/permissions/dispatcher/processor/data/Source.java",
      "status": "modified",
      "additions": 41,
      "deletions": 90,
      "changes": 131,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/ec4767aad0be23f00f8875d308a4b5f4392dec79/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/ec4767aad0be23f00f8875d308a4b5f4392dec79/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java?ref=ec4767aad0be23f00f8875d308a4b5f4392dec79",
      "patch": "@@ -870,7 +870,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -879,8 +878,7 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -1881,7 +1879,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -1892,16 +1889,14 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"       }\",\n                     \"   }\",\n                     \"   static void accessContactsWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_ACCESSCONTACTS)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_ACCESSCONTACTS)) {\",\n                     \"           target.accessContacts();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_ACCESSCONTACTS, REQUEST_ACCESSCONTACTS);\",\n@@ -2459,7 +2454,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -2471,11 +2465,10 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -2549,7 +2542,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -2561,11 +2553,10 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -2647,7 +2638,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -2659,11 +2649,10 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -2741,7 +2730,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -2750,8 +2738,7 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -2812,7 +2799,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -2821,8 +2807,7 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -2878,7 +2863,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -2891,8 +2875,7 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target, int value, String name) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value, name);\",\n                     \"       } else {\",\n                     \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value, name);\",\n@@ -2975,7 +2958,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -2988,12 +2970,11 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target, int value, String name) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value, name);\",\n                     \"       } else {\",\n                     \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value, name);\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(PENDING_SHOWCAMERA);\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -3075,7 +3056,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -3088,8 +3068,7 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target, int value, String name) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value, name);\",\n                     \"       } else {\",\n                     \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value, name);\",\n@@ -3181,7 +3160,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -3194,12 +3172,11 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target, int value, String name) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value, name);\",\n                     \"       } else {\",\n                     \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value, name);\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(PENDING_SHOWCAMERA);\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -3286,7 +3263,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -3297,16 +3273,14 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"       }\",\n                     \"   }\",\n                     \"   static void showCamera2WithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA2)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n                     \"           target.showCamera2();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA2, REQUEST_SHOWCAMERA2);\",\n@@ -3368,7 +3342,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -3382,23 +3355,21 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n                     \"       }\",\n                     \"   }\",\n                     \"   static void showCamera2WithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA2)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n                     \"           target.showCamera2();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA2)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n                     \"               target.cameraRationale(new ShowCamera2PermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA2, REQUEST_SHOWCAMERA2);\",\n@@ -3490,7 +3461,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -3501,16 +3471,14 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"       }\",\n                     \"   }\",\n                     \"   static void showCamera2WithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA2)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n                     \"           target.showCamera2();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA2, REQUEST_SHOWCAMERA2);\",\n@@ -3580,7 +3548,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -3594,23 +3561,21 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n                     \"       }\",\n                     \"   }\",\n                     \"   static void showCamera2WithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA2)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n                     \"           target.showCamera2();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA2)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n                     \"               target.cameraRationale(new ShowCamera2PermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA2, REQUEST_SHOWCAMERA2);\",\n@@ -3815,7 +3780,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -3829,20 +3793,18 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n                     \"       }\",\n                     \"   }\",\n                     \"   static void accessContactsWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_ACCESSCONTACTS)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_ACCESSCONTACTS)) {\",\n                     \"           target.accessContacts();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_ACCESSCONTACTS, REQUEST_ACCESSCONTACTS);\",\n@@ -4046,7 +4008,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -4060,23 +4021,21 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n                     \"       }\",\n                     \"   }\",\n                     \"   static void accessContactsWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_ACCESSCONTACTS)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_ACCESSCONTACTS)) {\",\n                     \"           target.accessContacts();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_ACCESSCONTACTS)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_ACCESSCONTACTS)) {\",\n                     \"               target.contactsRationale(new AccessContactsPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_ACCESSCONTACTS, REQUEST_ACCESSCONTACTS);\",\n@@ -4229,7 +4188,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -4238,8 +4196,7 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -4356,7 +4313,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -4365,8 +4321,7 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -4483,7 +4438,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -4492,8 +4446,7 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n@@ -4645,7 +4598,6 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n-                    \"import android.app.Activity;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -4657,11 +4609,10 @@ protected String[] getExpectSource() {\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n-                    \"       Activity activity = target.getActivity();\",\n-                    \"       if (PermissionUtils.hasSelfPermissions(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n-                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(activity, PERMISSION_SHOWCAMERA)) {\",\n+                    \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",",
      "parent_sha": "6e9d95695790ac38d256a91df3ee739f0f6196a3"
    }
  },
  {
    "oid": "4134b86edf036ba60a25e195cc721a2016cee594",
    "message": "Fix the logic.",
    "date": "2016-02-14T23:08:46Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/4134b86edf036ba60a25e195cc721a2016cee594",
    "details": {
      "sha": "781aca3a6f65bb34b82bf8285644c02b8729d986",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/4134b86edf036ba60a25e195cc721a2016cee594/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/4134b86edf036ba60a25e195cc721a2016cee594/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=4134b86edf036ba60a25e195cc721a2016cee594",
      "patch": "@@ -101,7 +101,8 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St\n      */\n     @TargetApi(Build.VERSION_CODES.DONUT)\n     public static synchronized int getTargetSdkVersion(Context context) {\n-        if (targetSdkVersion == -1) {\n+        if (targetSdkVersion != -1) {\n+            // target sdk version is already set\n             return targetSdkVersion;\n         }\n         try {",
      "parent_sha": "8b4b9ff2c39a347f684cb83bec48b34277663bef"
    }
  },
  {
    "oid": "5a3d190e17bb5a9c9e2113497676b95ae34901f8",
    "message": "Use PermissionChecker's checkSelfPermission",
    "date": "2016-12-25T11:41:23Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/5a3d190e17bb5a9c9e2113497676b95ae34901f8",
    "details": {
      "sha": "68c51abc41e584167dab3d810ad1b414ea14c936",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/5a3d190e17bb5a9c9e2113497676b95ae34901f8/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/5a3d190e17bb5a9c9e2113497676b95ae34901f8/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=5a3d190e17bb5a9c9e2113497676b95ae34901f8",
      "patch": "@@ -110,7 +110,7 @@ private static boolean hasSelfPermission(Context context, String permission) {\n     private static boolean hasSelfPermissionForXiaomi(Context context, String permission) {\n         AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);\n         int checkOp = appOpsManager.checkOp(AppOpsManager.permissionToOp(permission), Process.myUid(), context.getPackageName());\n-        return checkOp == AppOpsManager.MODE_ALLOWED && ActivityCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;\n+        return checkOp == AppOpsManager.MODE_ALLOWED && checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;\n     }\n \n     /**",
      "parent_sha": "17a0fdf2af06b04771f0f497e369513115bf80e7"
    }
  },
  {
    "oid": "fc02449ac6f376f39567d7a1d65072304c7b1ca6",
    "message": "Make better performance loop iteration",
    "date": "2016-02-26T16:13:17Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/fc02449ac6f376f39567d7a1d65072304c7b1ca6",
    "details": {
      "sha": "26e2b700977a14d6f92460524ae456e05f654733",
      "filename": "lint/src/main/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetector.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/fc02449ac6f376f39567d7a1d65072304c7b1ca6/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/fc02449ac6f376f39567d7a1d65072304c7b1ca6/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java?ref=fc02449ac6f376f39567d7a1d65072304c7b1ca6",
      "patch": "@@ -102,7 +102,7 @@ private boolean hasSameNodes(List<Node> first, List<Node> second) {\n                 return false;\n             }\n \n-            for (int i = 0; i < first.size(); i++) {\n+            for (int i = 0, size = first.size(); i < size; i++) {\n                 if (!first.get(i).toString().equals(second.get(i).toString())) {\n                     return false;\n                 }",
      "parent_sha": "cfe0587b2e8e35a445984cecb05f1280b610019c"
    }
  },
  {
    "oid": "2b863a57d9a29469db4ad1529d31a2ff8100fd78",
    "message": "Add ActivityCompat.checkSelfPermission check.",
    "date": "2016-12-13T13:19:08Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/2b863a57d9a29469db4ad1529d31a2ff8100fd78",
    "details": {
      "sha": "daf10df0e3fccde29212df78d9bb30730c7cc66d",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/2b863a57d9a29469db4ad1529d31a2ff8100fd78/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/2b863a57d9a29469db4ad1529d31a2ff8100fd78/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=2b863a57d9a29469db4ad1529d31a2ff8100fd78",
      "patch": "@@ -110,7 +110,7 @@ private static boolean hasSelfPermission(Context context, String permission) {\n     private static boolean hasSelfPermissionForXiaomi(Context context, String permission) {\n         AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);\n         int checkOp = appOpsManager.checkOp(AppOpsManager.permissionToOp(permission), Process.myUid(), context.getPackageName());\n-        return checkOp == AppOpsManager.MODE_ALLOWED;\n+        return checkOp == AppOpsManager.MODE_ALLOWED && ActivityCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;\n     }\n \n     /**",
      "parent_sha": "100fe832aea8dfb8f92e2aa362b35db8d447bdd3"
    }
  },
  {
    "oid": "39ba1ed14b84e08b26d3855c86f4698b77999dfc",
    "message": "Handle the case Build.MANUFACTURER = null",
    "date": "2016-12-18T02:28:46Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/39ba1ed14b84e08b26d3855c86f4698b77999dfc",
    "details": {
      "sha": "07d3ee13d9d8b849b6da44c7d8ee5d12dc03514a",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/39ba1ed14b84e08b26d3855c86f4698b77999dfc/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/39ba1ed14b84e08b26d3855c86f4698b77999dfc/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=39ba1ed14b84e08b26d3855c86f4698b77999dfc",
      "patch": "@@ -96,7 +96,7 @@ public static boolean hasSelfPermissions(Context context, String... permissions)\n      * @see #hasSelfPermissions(Context, String...)\n      */\n     private static boolean hasSelfPermission(Context context, String permission) {\n-        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M && Build.MANUFACTURER.equalsIgnoreCase(\"Xiaomi\")) {\n+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M && \"Xiaomi\".equalsIgnoreCase(Build.MANUFACTURER)) {\n             return hasSelfPermissionForXiaomi(context, permission);\n         }\n         try {",
      "parent_sha": "d609eb023ca2582848f1615cada6d64df4f88a6c"
    }
  },
  {
    "oid": "8b4b9ff2c39a347f684cb83bec48b34277663bef",
    "message": "Modify to use primitive int type.",
    "date": "2016-02-14T23:04:21Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/8b4b9ff2c39a347f684cb83bec48b34277663bef",
    "details": {
      "sha": "a43975b4c0b1797fb360a47f7bab5efddeca30f4",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/8b4b9ff2c39a347f684cb83bec48b34277663bef/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/8b4b9ff2c39a347f684cb83bec48b34277663bef/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=8b4b9ff2c39a347f684cb83bec48b34277663bef",
      "patch": "@@ -27,7 +27,7 @@ public final class PermissionUtils {\n         MIN_SDK_PERMISSIONS.put(\"android.permission.WRITE_CALL_LOG\", 16);\n     }\n \n-    private static Integer targetSdkVersion;\n+    private static int targetSdkVersion = -1;\n \n     private PermissionUtils() {\n     }\n@@ -101,17 +101,14 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St\n      */\n     @TargetApi(Build.VERSION_CODES.DONUT)\n     public static synchronized int getTargetSdkVersion(Context context) {\n-        if (targetSdkVersion != null) {\n+        if (targetSdkVersion == -1) {\n             return targetSdkVersion;\n         }\n         try {\n             PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n             targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n         } catch (PackageManager.NameNotFoundException ignored) {\n         }\n-        if (targetSdkVersion == null) {\n-            return -1;\n-        }\n         return targetSdkVersion;\n     }\n ",
      "parent_sha": "9da1f9b266d63fd8e9dc8a82a2e92dbb88e2805e"
    }
  },
  {
    "oid": "100fe832aea8dfb8f92e2aa362b35db8d447bdd3",
    "message": "Add workaround for Xiaomi devices.",
    "date": "2016-12-13T12:17:32Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/100fe832aea8dfb8f92e2aa362b35db8d447bdd3",
    "details": {
      "sha": "f364d5e5e02516d5c90d19e93cea3a580ee9e9ce",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/100fe832aea8dfb8f92e2aa362b35db8d447bdd3/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/100fe832aea8dfb8f92e2aa362b35db8d447bdd3/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=100fe832aea8dfb8f92e2aa362b35db8d447bdd3",
      "patch": "@@ -2,10 +2,12 @@\n \n import android.annotation.TargetApi;\n import android.app.Activity;\n+import android.app.AppOpsManager;\n import android.content.Context;\n import android.content.pm.PackageInfo;\n import android.content.pm.PackageManager;\n import android.os.Build;\n+import android.os.Process;\n import android.support.v4.app.ActivityCompat;\n import android.support.v4.util.SimpleArrayMap;\n \n@@ -94,13 +96,23 @@ public static boolean hasSelfPermissions(Context context, String... permissions)\n      * @see #hasSelfPermissions(Context, String...)\n      */\n     private static boolean hasSelfPermission(Context context, String permission) {\n+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M && Build.MANUFACTURER.equalsIgnoreCase(\"Xiaomi\")) {\n+            return hasSelfPermissionForXiaomi(context, permission);\n+        }\n         try {\n             return checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;\n         } catch (RuntimeException t) {\n             return false;\n         }\n     }\n \n+    @TargetApi(Build.VERSION_CODES.M)\n+    private static boolean hasSelfPermissionForXiaomi(Context context, String permission) {\n+        AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);\n+        int checkOp = appOpsManager.checkOp(AppOpsManager.permissionToOp(permission), Process.myUid(), context.getPackageName());\n+        return checkOp == AppOpsManager.MODE_ALLOWED;\n+    }\n+\n     /**\n      * Checks given permissions are needed to show rationale.\n      *\n@@ -135,5 +147,4 @@ public static int getTargetSdkVersion(Context context) {\n         }\n         return targetSdkVersion;\n     }\n-\n }",
      "parent_sha": "4511cdc0e5d7e82526361864d85b73c226ec9dd0"
    }
  },
  {
    "oid": "e3bcf3a83a92ed53bf09cb34223f93be6d9783b2",
    "message": "Delete synchronized.",
    "date": "2016-02-15T08:57:45Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/e3bcf3a83a92ed53bf09cb34223f93be6d9783b2",
    "details": {
      "sha": "3b35687f52539dd7582b4cdb6cfcacd15669c331",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/e3bcf3a83a92ed53bf09cb34223f93be6d9783b2/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/e3bcf3a83a92ed53bf09cb34223f93be6d9783b2/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=e3bcf3a83a92ed53bf09cb34223f93be6d9783b2",
      "patch": "@@ -101,16 +101,13 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St\n      */\n     @TargetApi(Build.VERSION_CODES.DONUT)\n     public static int getTargetSdkVersion(Context context) {\n-        if (targetSdkVersion == -1) {\n-            synchronized (PermissionUtils.class) {\n-                if (targetSdkVersion == -1) {\n-                    try {\n-                        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n-                        targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n-                    } catch (PackageManager.NameNotFoundException ignored) {\n-                    }\n-                }\n-            }\n+        if (targetSdkVersion != -1) {\n+            return targetSdkVersion;\n+        }\n+        try {\n+            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n+            targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n+        } catch (PackageManager.NameNotFoundException ignored) {\n         }\n         return targetSdkVersion;\n     }",
      "parent_sha": "698f21c1a83285861925465268936edb8b629638"
    }
  },
  {
    "oid": "cae27143d85ae66b63997aab7df103b20b54205f",
    "message": "fix hotchemi/PermissionsDispatcher#51 based on @aurae sketch code",
    "date": "2015-12-10T19:49:16Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/cae27143d85ae66b63997aab7df103b20b54205f",
    "details": {
      "sha": "3c4351596a3134bc9e6a09e4ba45b0eb319e22a9",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/cae27143d85ae66b63997aab7df103b20b54205f/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/cae27143d85ae66b63997aab7df103b20b54205f/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=cae27143d85ae66b63997aab7df103b20b54205f",
      "patch": "@@ -1,5 +1,6 @@\n package permissions.dispatcher;\n \n+import android.Manifest;\n import android.app.Activity;\n import android.content.Context;\n import android.content.Intent;\n@@ -25,12 +26,20 @@ public final class PermissionUtils {\n     private static final SimpleArrayMap<String, Integer> MIN_SDK_PERMISSIONS;\n     static {\n         MIN_SDK_PERMISSIONS = new SimpleArrayMap<>(6);\n-        MIN_SDK_PERMISSIONS.put(\"com.android.voicemail.permission.ADD_VOICEMAIL\", ICE_CREAM_SANDWICH);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.BODY_SENSORS\", KITKAT_WATCH);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.READ_CALL_LOG\", JELLY_BEAN);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.READ_EXTERNAL_STORAGE\", JELLY_BEAN);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.USE_SIP\", GINGERBREAD);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.WRITE_CALL_LOG\", JELLY_BEAN);\n+        if (Build.VERSION.SDK_INT >= GINGERBREAD) {\n+            MIN_SDK_PERMISSIONS.put(Manifest.permission.USE_SIP, GINGERBREAD);\n+        }\n+        if (Build.VERSION.SDK_INT >= ICE_CREAM_SANDWICH) {\n+            MIN_SDK_PERMISSIONS.put(Manifest.permission.ADD_VOICEMAIL, ICE_CREAM_SANDWICH);\n+        }\n+        if (Build.VERSION.SDK_INT >= JELLY_BEAN) {\n+            MIN_SDK_PERMISSIONS.put(Manifest.permission.READ_CALL_LOG, JELLY_BEAN);\n+            MIN_SDK_PERMISSIONS.put(Manifest.permission.READ_EXTERNAL_STORAGE, JELLY_BEAN);\n+            MIN_SDK_PERMISSIONS.put(Manifest.permission.WRITE_CALL_LOG, JELLY_BEAN);\n+        }\n+        if (Build.VERSION.SDK_INT >= KITKAT_WATCH) {\n+            MIN_SDK_PERMISSIONS.put(Manifest.permission.BODY_SENSORS, KITKAT_WATCH);\n+        }\n     }\n \n     private PermissionUtils() {",
      "parent_sha": "a445eb09fcf04cad32ed40aa05590433412036b1"
    }
  },
  {
    "oid": "6d6627b99dc41cb56298149b7c2656b88b77c6ad",
    "message": "Fix a logic of ONRequestPermissionsResultDetector.",
    "date": "2017-09-11T08:03:25Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/6d6627b99dc41cb56298149b7c2656b88b77c6ad",
    "details": {
      "sha": "f07aac44a2afea212b868f99308e3b8edf31f2f9",
      "filename": "lint/src/main/java/permissions/dispatcher/CallOnRequestPermissionsResultDetector.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/6d6627b99dc41cb56298149b7c2656b88b77c6ad/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/6d6627b99dc41cb56298149b7c2656b88b77c6ad/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java?ref=6d6627b99dc41cb56298149b7c2656b88b77c6ad",
      "patch": "@@ -107,9 +107,9 @@ private static boolean checkMethodCall(UMethod method, Set<String> targetClasses\n                         continue;\n                     }\n                     UQualifiedReferenceExpression referenceExpression = (UQualifiedReferenceExpression) expression;\n-                    String targetMethod = \"onRequestPermissionsResult(requestCode, permissions, grantResults)\";\n+                    String targetMethodName = \"onRequestPermissionsResult\";\n                     if (targetClasses.contains(referenceExpression.getReceiver().toString())\n-                            && targetMethod.equals(referenceExpression.getSelector().toString())) {\n+                            && referenceExpression.getSelector().toString().startsWith(targetMethodName)) {\n                         return true;\n                     }\n                 }",
      "parent_sha": "47d23e179a52bf0590833e91b68e2f5ef9edd72b"
    }
  },
  {
    "oid": "9d65b3737a575546ce549ed9fe08cbf4aa3dd319",
    "message": "Use the constant from `PermissionChecker` (#658)\n\n* use the constant from `PermissionChecker`\r\n\r\n* Updated to use `PermissionChecker`\r\n\r\n* Remove unused import",
    "date": "2020-02-10T08:03:52Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/9d65b3737a575546ce549ed9fe08cbf4aa3dd319",
    "details": {
      "sha": "327add5a0a51d2be0c1406c1998767fe11ebf191",
      "filename": "library/src/main/java/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/9d65b3737a575546ce549ed9fe08cbf4aa3dd319/library%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/9d65b3737a575546ce549ed9fe08cbf4aa3dd319/library%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=9d65b3737a575546ce549ed9fe08cbf4aa3dd319",
      "patch": "@@ -2,7 +2,6 @@\n \n import android.app.Activity;\n import android.content.Context;\n-import android.content.pm.PackageManager;\n import android.os.Build;\n \n import androidx.collection.SimpleArrayMap;\n@@ -47,7 +46,7 @@ public static boolean verifyPermissions(int... grantResults) {\n             return false;\n         }\n         for (int result : grantResults) {\n-            if (result != PackageManager.PERMISSION_GRANTED) {\n+            if (result != PermissionChecker.PERMISSION_GRANTED) {\n                 return false;\n             }\n         }\n@@ -97,7 +96,7 @@ public static boolean hasSelfPermissions(Context context, String... permissions)\n      */\n     private static boolean hasSelfPermission(Context context, String permission) {\n         try {\n-            return PermissionChecker.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;\n+            return PermissionChecker.checkSelfPermission(context, permission) == PermissionChecker.PERMISSION_GRANTED;\n         } catch (RuntimeException t) {\n             return false;\n         }",
      "parent_sha": "287bcdf67b8fa98522161b7dcb85a5049b577e88"
    }
  },
  {
    "oid": "59f9f04ca7363bfbede1c9dae5ae80b7786b4fe6",
    "message": "Minimized diffs",
    "date": "2016-11-23T16:41:45Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/59f9f04ca7363bfbede1c9dae5ae80b7786b4fe6",
    "details": {
      "sha": "10cd5e1f6a15d2fd2abc9f6611548cb49a85df9e",
      "filename": "sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreviewFragment.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/59f9f04ca7363bfbede1c9dae5ae80b7786b4fe6/sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2Fcamera%2FCameraPreviewFragment.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/59f9f04ca7363bfbede1c9dae5ae80b7786b4fe6/sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2Fcamera%2FCameraPreviewFragment.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2Fcamera%2FCameraPreviewFragment.java?ref=59f9f04ca7363bfbede1c9dae5ae80b7786b4fe6",
      "patch": "@@ -113,8 +113,7 @@ public void onPause() {\n         releaseCamera();\n     }\n \n-    /** A safe way to get an instance of the Camera object.\n-     */\n+    /** A safe way to get an instance of the Camera object. */\n     public static Camera getCameraInstance(int cameraId) {\n         Camera c = null;\n         try {",
      "parent_sha": "9ffb7f701f7b5feedca826fe1f3015a31e8c2608"
    }
  },
  {
    "oid": "9da1f9b266d63fd8e9dc8a82a2e92dbb88e2805e",
    "message": "Apply formatter.",
    "date": "2016-02-14T18:51:07Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/9da1f9b266d63fd8e9dc8a82a2e92dbb88e2805e",
    "details": {
      "sha": "db15fd1458dc836924ee5a7aedcb38c7e94e474d",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/9da1f9b266d63fd8e9dc8a82a2e92dbb88e2805e/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/9da1f9b266d63fd8e9dc8a82a2e92dbb88e2805e/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=9da1f9b266d63fd8e9dc8a82a2e92dbb88e2805e",
      "patch": "@@ -16,6 +16,7 @@ public final class PermissionUtils {\n     // Map of dangerous permissions introduced in later framework versions.\n     // Used to conditionally bypass permission-hold checks on older devices.\n     private static final SimpleArrayMap<String, Integer> MIN_SDK_PERMISSIONS;\n+\n     static {\n         MIN_SDK_PERMISSIONS = new SimpleArrayMap<>(6);\n         MIN_SDK_PERMISSIONS.put(\"com.android.voicemail.permission.ADD_VOICEMAIL\", 14);\n@@ -106,8 +107,7 @@ public static synchronized int getTargetSdkVersion(Context context) {\n         try {\n             PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n             targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n-        }\n-        catch (PackageManager.NameNotFoundException ignored) {\n+        } catch (PackageManager.NameNotFoundException ignored) {\n         }\n         if (targetSdkVersion == null) {\n             return -1;",
      "parent_sha": "21f38ef0e624eb66f77f39a5b3eb305ad1aaed63"
    }
  },
  {
    "oid": "6253b6bb30dd46cca08fca117165d8052b3a885b",
    "message": "Fix the problem with NoClassDefFoundError",
    "date": "2018-04-07T03:48:11Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/6253b6bb30dd46cca08fca117165d8052b3a885b",
    "details": {
      "sha": "35bfe1a30bc7c1c3c6d927408b7fc097e17968cf",
      "filename": "lint/src/main/java/permissions/dispatcher/CallOnRequestPermissionsResultDetector.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/6253b6bb30dd46cca08fca117165d8052b3a885b/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/6253b6bb30dd46cca08fca117165d8052b3a885b/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java?ref=6253b6bb30dd46cca08fca117165d8052b3a885b",
      "patch": "@@ -104,7 +104,15 @@ private static boolean isGeneratedMethodCalled(UMethod method, String className)\n                         continue;\n                     }\n \n-                    if (referenceExpression instanceof KotlinUQualifiedReferenceExpression) {\n+                    boolean isKotlin = false;\n+\n+                    try {\n+                        if (referenceExpression instanceof KotlinUQualifiedReferenceExpression) {\n+                            isKotlin = true;\n+                        }\n+                    } catch (NoClassDefFoundError ignored) {}\n+\n+                    if (isKotlin) {\n                         if (\"onRequestPermissionsResult\".equals(referenceExpression.getResolvedName())) {\n                             return true;\n                         }",
      "parent_sha": "06f4dc7cb0d84adc1c3538698270909370927de5"
    }
  },
  {
    "oid": "608a8e45406202eb507efa45c161d3228b1eeb05",
    "message": "Modify to use double check pattern.",
    "date": "2016-02-14T23:14:26Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/608a8e45406202eb507efa45c161d3228b1eeb05",
    "details": {
      "sha": "5d3a3b22b7ba9549042eec4e29cf5502ef7ce5f8",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/608a8e45406202eb507efa45c161d3228b1eeb05/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/608a8e45406202eb507efa45c161d3228b1eeb05/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=608a8e45406202eb507efa45c161d3228b1eeb05",
      "patch": "@@ -27,7 +27,7 @@ public final class PermissionUtils {\n         MIN_SDK_PERMISSIONS.put(\"android.permission.WRITE_CALL_LOG\", 16);\n     }\n \n-    private static int targetSdkVersion = -1;\n+    private static volatile int targetSdkVersion = -1;\n \n     private PermissionUtils() {\n     }\n@@ -100,15 +100,17 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St\n      * @return target sdk version\n      */\n     @TargetApi(Build.VERSION_CODES.DONUT)\n-    public static synchronized int getTargetSdkVersion(Context context) {\n+    public static int getTargetSdkVersion(Context context) {\n         if (targetSdkVersion != -1) {\n             // target sdk version is already set\n             return targetSdkVersion;\n         }\n-        try {\n-            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n-            targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n-        } catch (PackageManager.NameNotFoundException ignored) {\n+        synchronized (PermissionUtils.class) {\n+            try {\n+                PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n+                targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n+            } catch (PackageManager.NameNotFoundException ignored) {\n+            }\n         }\n         return targetSdkVersion;\n     }",
      "parent_sha": "4134b86edf036ba60a25e195cc721a2016cee594"
    }
  },
  {
    "oid": "70b67eaf482c47652d4a2bc98fa03a9a101049c0",
    "message": "Replace constant in PermissionUtils unknown to unit tests with literal",
    "date": "2017-08-30T09:55:43Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/70b67eaf482c47652d4a2bc98fa03a9a101049c0",
    "details": {
      "sha": "65ff268769f768600cff95da275b5447fa01e676",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/70b67eaf482c47652d4a2bc98fa03a9a101049c0/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/70b67eaf482c47652d4a2bc98fa03a9a101049c0/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=70b67eaf482c47652d4a2bc98fa03a9a101049c0",
      "patch": "@@ -93,7 +93,10 @@ public static boolean hasSelfPermissions(Context context, String... permissions)\n      * @see #hasSelfPermissions(Context, String...)\n      */\n     private static boolean hasSelfPermission(Context context, String permission) {\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && \"Xiaomi\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+        // Do not replace with Build.VERSION_CODES.M!\n+        // The Android version bundled with the annotation processor's unit tests\n+        // is ancient, doesn't know that constant, and a more recent dependency doesn't exist.\n+        if (Build.VERSION.SDK_INT >= 23 /* Build.VERSION_CODES.M */ && \"Xiaomi\".equalsIgnoreCase(Build.MANUFACTURER)) {\n             return hasSelfPermissionForXiaomi(context, permission);\n         }\n         try {",
      "parent_sha": "0f5578e6f4b9a2ad0f23fcb42750eed3092f68c0"
    }
  },
  {
    "oid": "50ddd166ae2b2735ae6e25850c3272131c4449c7",
    "message": "Call super onRequestPermissionResult.\n\nCleanup the sample.",
    "date": "2015-11-30T13:45:16Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/50ddd166ae2b2735ae6e25850c3272131c4449c7",
    "details": {
      "sha": "9bafdbbbb0a8a51210196d278025fa375dffc2c0",
      "filename": "sample/src/main/java/permissions/dispatcher/sample/MainActivity.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/50ddd166ae2b2735ae6e25850c3272131c4449c7/sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/50ddd166ae2b2735ae6e25850c3272131c4449c7/sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java?ref=50ddd166ae2b2735ae6e25850c3272131c4449c7",
      "patch": "@@ -8,7 +8,6 @@\n import android.support.v7.app.AlertDialog;\n import android.support.v7.app.AppCompatActivity;\n import android.view.View;\n-import android.widget.Button;\n import android.widget.Toast;\n import permissions.dispatcher.*;\n import permissions.dispatcher.sample.camera.CameraPreviewFragment;\n@@ -21,10 +20,8 @@ public class MainActivity extends AppCompatActivity implements View.OnClickListe\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.activity_main);\n-        Button cameraButton = (Button) findViewById(R.id.button_camera);\n-        cameraButton.setOnClickListener(this);\n-        Button contactsButton = (Button) findViewById(R.id.button_contacts);\n-        contactsButton.setOnClickListener(this);\n+        findViewById(R.id.button_camera).setOnClickListener(this);\n+        findViewById(R.id.button_contacts).setOnClickListener(this);\n     }\n \n     @Override\n@@ -43,6 +40,7 @@ public void onClick(@NonNull View v) {\n \n     @Override\n     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n         // NOTE: delegate the permission handling to generated method\n         MainActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);\n     }",
      "parent_sha": "04eec2eb1d92881b722182d5ec44a73107536c45"
    }
  },
  {
    "oid": "463d4ef55df5ef072b14889a5658c3cbac38d70c",
    "message": "Improve descriptions",
    "date": "2018-06-10T12:41:44Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/463d4ef55df5ef072b14889a5658c3cbac38d70c",
    "details": {
      "sha": "e14230c5388cd01eaf21a9b8346c3b04e1f89876",
      "filename": "lint/src/main/java/permissions/dispatcher/NoDelegateOnResumeDetector.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/463d4ef55df5ef072b14889a5658c3cbac38d70c/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoDelegateOnResumeDetector.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/463d4ef55df5ef072b14889a5658c3cbac38d70c/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoDelegateOnResumeDetector.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoDelegateOnResumeDetector.java?ref=463d4ef55df5ef072b14889a5658c3cbac38d70c",
      "patch": "@@ -25,8 +25,8 @@\n \n public class NoDelegateOnResumeDetector extends Detector implements Detector.UastScanner {\n     static final Issue ISSUE = Issue.create(\"NoDelegateOnResumeDetector\",\n-            \"Asking permissions at onResume will cause an infinite loop.\",\n-            \"Asking permissions at onResume will cause an infinite loop when user selects \\\"never ask again\\\" and denies the permission. This is because onResume method is called after returning from a permission request check. This problem can be solved by moving the method call to onStart.\",\n+            \"Asking permissions at `onResume()` will cause an infinite loop.\",\n+            \"Asking permissions in `onResume()` will cause an infinite loop when user selects \\\"Never ask again\\\" and denies the permission, since `onResume()` is called again after returning from a permission request check. This problem can be solved by moving this method call to `onStart()`.\",\n             Category.CORRECTNESS,\n             4,\n             Severity.ERROR,",
      "parent_sha": "89b52ce1be9f79aa45c08bdc5fbbf4beaba911e3"
    }
  },
  {
    "oid": "e3cb027ca849b57e6bd84f94c9667b282608bcac",
    "message": "Clean up test code.",
    "date": "2015-08-24T16:07:22Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/e3cb027ca849b57e6bd84f94c9667b282608bcac",
    "details": {
      "sha": "4e095c6569e0660d35f323eb9dc80843098764e7",
      "filename": "permissionsdispatcher/src/androidTest/java/permissions.dispatcher/PermissionUtilsTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/e3cb027ca849b57e6bd84f94c9667b282608bcac/permissionsdispatcher%2Fsrc%2FandroidTest%2Fjava%2Fpermissions.dispatcher%2FPermissionUtilsTest.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/e3cb027ca849b57e6bd84f94c9667b282608bcac/permissionsdispatcher%2Fsrc%2FandroidTest%2Fjava%2Fpermissions.dispatcher%2FPermissionUtilsTest.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/permissionsdispatcher%2Fsrc%2FandroidTest%2Fjava%2Fpermissions.dispatcher%2FPermissionUtilsTest.java?ref=e3cb027ca849b57e6bd84f94c9667b282608bcac",
      "patch": "@@ -3,7 +3,6 @@\n import android.Manifest;\n import android.content.pm.PackageManager;\n import android.test.AndroidTestCase;\n-\n import org.junit.Test;\n \n import static org.hamcrest.core.Is.is;\n@@ -16,11 +15,13 @@\n  */\n public class PermissionUtilsTest extends AndroidTestCase {\n \n+    private static final int GRANTED = PackageManager.PERMISSION_GRANTED;\n+\n     @Test\n     public void testVerifyPermissions() {\n-        assertThat(verifyPermissions(PackageManager.PERMISSION_GRANTED), is(true));\n-        assertThat(verifyPermissions(PackageManager.PERMISSION_GRANTED, PackageManager.PERMISSION_GRANTED), is(true));\n-        assertThat(verifyPermissions(1, 2, PackageManager.PERMISSION_GRANTED), is(false));\n+        assertThat(verifyPermissions(GRANTED), is(true));\n+        assertThat(verifyPermissions(GRANTED, GRANTED), is(true));\n+        assertThat(verifyPermissions(1, 2, GRANTED), is(false));\n         assertThat(verifyPermissions(1, 2, 3), is(false));\n     }\n ",
      "parent_sha": "2eb6e2efe0b133d08fb31f6bc3020d4545a110d1"
    }
  },
  {
    "oid": "bcaea3604e97a01be83807aa7b42b54fe213f417",
    "message": "Fix the condition of handling Xiaomi phone",
    "date": "2016-12-18T08:11:20Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/bcaea3604e97a01be83807aa7b42b54fe213f417",
    "details": {
      "sha": "75f532ee367fef47403d3a764d72a9af9836a498",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/bcaea3604e97a01be83807aa7b42b54fe213f417/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/bcaea3604e97a01be83807aa7b42b54fe213f417/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=bcaea3604e97a01be83807aa7b42b54fe213f417",
      "patch": "@@ -96,7 +96,7 @@ public static boolean hasSelfPermissions(Context context, String... permissions)\n      * @see #hasSelfPermissions(Context, String...)\n      */\n     private static boolean hasSelfPermission(Context context, String permission) {\n-        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M && \"Xiaomi\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && \"Xiaomi\".equalsIgnoreCase(Build.MANUFACTURER)) {\n             return hasSelfPermissionForXiaomi(context, permission);\n         }\n         try {",
      "parent_sha": "abfc692cd191087e25c77ad86799ee5b3f9c5ffa"
    }
  },
  {
    "oid": "b7d909c8b1f50ab609085fde5085d94656e12fbb",
    "message": "Update sample",
    "date": "2015-08-23T21:18:51Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/b7d909c8b1f50ab609085fde5085d94656e12fbb",
    "details": {
      "sha": "54158087394584f870d4269d044258344117b32a",
      "filename": "permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/MainActivity.java",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/b7d909c8b1f50ab609085fde5085d94656e12fbb/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/b7d909c8b1f50ab609085fde5085d94656e12fbb/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java?ref=b7d909c8b1f50ab609085fde5085d94656e12fbb",
      "patch": "@@ -8,10 +8,7 @@\n import android.view.View;\n import android.widget.Button;\n import android.widget.Toast;\n-\n-import permissions.dispatcher.NeedsPermission;\n-import permissions.dispatcher.RuntimePermissions;\n-import permissions.dispatcher.ShowsRationale;\n+import permissions.dispatcher.*;\n import permissions.dispatcher.sample.camera.CameraPreviewFragment;\n import permissions.dispatcher.sample.contacts.ContactsFragment;\n \n@@ -57,7 +54,7 @@ void showCamera() {\n                 .commitAllowingStateLoss();\n     }\n \n-    @NeedsPermission(Manifest.permission.READ_CONTACTS)\n+    @NeedsPermissions({Manifest.permission.READ_CONTACTS, Manifest.permission.WRITE_CONTACTS})\n     void showContacts() {\n         getSupportFragmentManager().beginTransaction()\n                 .replace(R.id.sample_content_fragment, ContactsFragment.newInstance())\n@@ -70,7 +67,7 @@ void showRationaleForCamera() {\n         Toast.makeText(this, R.string.permission_camera_rationale, Toast.LENGTH_SHORT).show();\n     }\n \n-    @ShowsRationale(Manifest.permission.READ_CONTACTS)\n+    @ShowsRationales({Manifest.permission.READ_CONTACTS, Manifest.permission.WRITE_CONTACTS})\n     void showRationaleForContact() {\n         Toast.makeText(this, R.string.permission_contacts_rationale, Toast.LENGTH_SHORT).show();\n     }",
      "parent_sha": "21dc762b10e348f566b1d22d2cecde545f386120"
    }
  },
  {
    "oid": "b279df0fa845ca94c54d3da9a0c62169d2c3ba90",
    "message": "Change description",
    "date": "2016-02-28T02:00:50Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/b279df0fa845ca94c54d3da9a0c62169d2c3ba90",
    "details": {
      "sha": "3e9d0a021463bcb329f7c6cc4a2834eaacec17d5",
      "filename": "lint/src/main/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetector.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/b279df0fa845ca94c54d3da9a0c62169d2c3ba90/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/b279df0fa845ca94c54d3da9a0c62169d2c3ba90/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java?ref=b279df0fa845ca94c54d3da9a0c62169d2c3ba90",
      "patch": "@@ -22,8 +22,8 @@\n public class NoCorrespondingNeedsPermissionDetector extends Detector implements Detector.JavaScanner {\n \n     public static final Issue ISSUE = Issue.create(\"NoCorrespondingNeedsPermission\",\n-            \"No corresponding @NeedsPermission found\",\n-            \"The processor would ignore @OnShowRationale annotation if there is no corresponding @NeedsPermissions. For instance, if there is @OnShowRationale(Manifest.permission.CAMERA), then there must be @NeedsPermission(Manifest.permission.CAMERA) in the same class.\",\n+            \"The method annotated with @OnShowRationale has no corresponding @NeedsPermission method, and will therefore be ignored by PermissionsDispatcher\",\n+            \"The @OnShowRationale method with a certain signature is internally connected to another method annotated with @NeedsPermission and the same annotation value. Please ensure that there is a @NeedsPermission method with matching annotation values for this method.\",\n             Category.CORRECTNESS,\n             4,\n             Severity.ERROR,\n@@ -89,7 +89,7 @@ public void afterVisitCompilationUnit(CompilationUnit node) {\n                 }\n \n                 if (!found) {\n-                    context.report(ISSUE, context.getLocation(onShowRationaleAnnotation), \"No corresponding @NeedsPermission found\");\n+                    context.report(ISSUE, context.getLocation(onShowRationaleAnnotation), \"Useless @OnShowRationale declaration\");\n                 }\n             }\n ",
      "parent_sha": "ef3aa3582480e3602ab7d9778d08b6349af938a8"
    }
  },
  {
    "oid": "c2f3c78a1044fc6ce1ca2d66300b5d70ed38534c",
    "message": "Clean up sample codes.",
    "date": "2015-09-25T23:58:41Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/c2f3c78a1044fc6ce1ca2d66300b5d70ed38534c",
    "details": {
      "sha": "fa043d478676db3a74761e1c6821e0886bc56e2a",
      "filename": "permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/MainActivity.java",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/c2f3c78a1044fc6ce1ca2d66300b5d70ed38534c/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/c2f3c78a1044fc6ce1ca2d66300b5d70ed38534c/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java?ref=c2f3c78a1044fc6ce1ca2d66300b5d70ed38534c",
      "patch": "@@ -5,8 +5,8 @@\n import android.support.annotation.NonNull;\n import android.support.v7.app.AppCompatActivity;\n import android.view.View;\n-import android.widget.Button;\n import android.widget.Toast;\n+\n import permissions.dispatcher.*;\n import permissions.dispatcher.sample.camera.CameraPreviewFragment;\n import permissions.dispatcher.sample.contacts.ContactsFragment;\n@@ -18,31 +18,28 @@ public class MainActivity extends AppCompatActivity implements View.OnClickListe\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.activity_main);\n-        Button cameraButton = (Button) findViewById(R.id.button_camera);\n-        cameraButton.setOnClickListener(this);\n-        Button contactsButton = (Button) findViewById(R.id.button_contacts);\n-        contactsButton.setOnClickListener(this);\n+        findViewById(R.id.button_camera).setOnClickListener(this);\n+        findViewById(R.id.button_contacts).setOnClickListener(this);\n     }\n \n     @Override\n     public void onClick(View v) {\n         switch (v.getId()) {\n             case R.id.button_camera:\n-                // NOTE: delegate the permission handling to generated method\n+                // delegate the permission handling to generated method\n                 MainActivityPermissionsDispatcher.showCameraWithCheck(this);\n                 break;\n             case R.id.button_contacts:\n-                // NOTE: delegate the permission handling to generated method\n+                // delegate the permission handling to generated method\n                 MainActivityPermissionsDispatcher.showContactsWithCheck(this);\n                 break;\n         }\n     }\n \n     @Override\n     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n-        // NOTE: delegate the permission handling to generated method\n-        MainActivityPermissionsDispatcher.\n-                onRequestPermissionsResult(this, requestCode, grantResults);\n+        // delegate the permission handling to generated method\n+        MainActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);\n     }\n \n     @NeedsPermission(Manifest.permission.CAMERA)",
      "parent_sha": "8f4d857be59dbeb146f38a86e405c50a227eb0a9"
    }
  },
  {
    "oid": "a02e2e4f31b40579473b9d9f5a66b17c361d0018",
    "message": "Add a workaround for RuntimeException when checking self permissions",
    "date": "2016-03-08T16:57:52Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/a02e2e4f31b40579473b9d9f5a66b17c361d0018",
    "details": {
      "sha": "5fa597e00d9e21cce037a8cccd9da41618730c02",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/a02e2e4f31b40579473b9d9f5a66b17c361d0018/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/a02e2e4f31b40579473b9d9f5a66b17c361d0018/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=a02e2e4f31b40579473b9d9f5a66b17c361d0018",
      "patch": "@@ -70,13 +70,32 @@ private static boolean permissionExists(String permission) {\n      */\n     public static boolean hasSelfPermissions(Context context, String... permissions) {\n         for (String permission : permissions) {\n-            if (permissionExists(permission) && checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\n+            if (permissionExists(permission) && !hasSelfPermission(context, permission)) {\n                 return false;\n             }\n         }\n         return true;\n     }\n \n+    /**\n+     * Determine context has access to the given permission.\n+     *\n+     * This is a workaround for RuntimeException of Parcel#readException.\n+     * For more detail, check this issue https://github.com/hotchemi/PermissionsDispatcher/issues/107\n+     *\n+     * @param context context\n+     * @param permission permission\n+     * @return returns true if context has access to the given permission, false otherwise.\n+     * @see #hasSelfPermissions(Context, String...)\n+     */\n+    private static boolean hasSelfPermission(Context context, String permission) {\n+        try {\n+            return checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;\n+        } catch (RuntimeException t) {\n+            return false;\n+        }\n+    }\n+\n     /**\n      * Checks given permissions are needed to show rationale.\n      *",
      "parent_sha": "714bcfb9b762d58fad34c7d08426297761408345"
    }
  },
  {
    "oid": "ac042807b320ad21a667380dd3a791ca57a8c07b",
    "message": "Fix to define expected method name as String.",
    "date": "2017-09-15T10:57:04Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/ac042807b320ad21a667380dd3a791ca57a8c07b",
    "details": {
      "sha": "5514832cc42886b04129c3d216ddd0de3b0698bf",
      "filename": "lint/src/main/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetector.java",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/ac042807b320ad21a667380dd3a791ca57a8c07b/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/ac042807b320ad21a667380dd3a791ca57a8c07b/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java?ref=ac042807b320ad21a667380dd3a791ca57a8c07b",
      "patch": "@@ -32,16 +32,6 @@ public final class NoCorrespondingNeedsPermissionDetector extends Detector imple\n             new Implementation(NoCorrespondingNeedsPermissionDetector.class,\n                     EnumSet.of(Scope.JAVA_FILE)));\n \n-    static final Set<String> NEEDS_PERMISSION_NAME = new HashSet<String>(2) {{\n-        add(\"NeedsPermission\");\n-        add(\"permissions.dispatcher.NeedsPermission\");\n-    }};\n-\n-    static final Set<String> ON_SHOW_RATIONALE_NAME = new HashSet<String>(2) {{\n-        add(\"OnShowRationale\");\n-        add(\"permissions.dispatcher.OnShowRationale\");\n-    }};\n-\n     @Override\n     public List<Class<? extends UElement>> getApplicableUastTypes() {\n         return Collections.<Class<? extends UElement>>singletonList(UClass.class);\n@@ -77,9 +67,9 @@ public boolean visitAnnotation(UAnnotation node) {\n             }\n             // Let's store NeedsPermission and OnShowRationale\n             String type = node.getQualifiedName();\n-            if (NEEDS_PERMISSION_NAME.contains(type)) {\n+            if (\"permissions.dispatcher.NeedsPermission\".equals(type)) {\n                 needsPermissionAnnotations.add(node);\n-            } else if (ON_SHOW_RATIONALE_NAME.contains(type)) {\n+            } else if (\"permissions.dispatcher.OnShowRationale\".equals(type)) {\n                 onShowRationaleAnnotations.add(node);\n             }\n             if (onShowRationaleAnnotations.isEmpty()) {",
      "parent_sha": "f50be7f0d77dc228d1644ac7814b639039cec65b"
    }
  },
  {
    "oid": "2eb6e2efe0b133d08fb31f6bc3020d4545a110d1",
    "message": "Update sample.",
    "date": "2015-08-24T16:06:51Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/2eb6e2efe0b133d08fb31f6bc3020d4545a110d1",
    "details": {
      "sha": "a58aceaa9aad6d87652e3062c75cecf81f2e011f",
      "filename": "permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/MainActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/2eb6e2efe0b133d08fb31f6bc3020d4545a110d1/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/2eb6e2efe0b133d08fb31f6bc3020d4545a110d1/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java?ref=2eb6e2efe0b133d08fb31f6bc3020d4545a110d1",
      "patch": "@@ -43,7 +43,7 @@ public void onClick(View v) {\n     public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n         // NOTE: delegate the permission handling to generated method\n         MainActivityPermissionsDispatcher.\n-                onRequestPermissionsResult(this, requestCode, permissions, grantResults);\n+                onRequestPermissionsResult(this, requestCode, grantResults);\n     }\n \n     @NeedsPermission(Manifest.permission.CAMERA)",
      "parent_sha": "d2684c3a6794f90164b8b69049c54836885cf240"
    }
  },
  {
    "oid": "089988fe809b68abf5b73ee0eea5ab9b82e234a8",
    "message": "Do tiny refactor.",
    "date": "2015-08-23T15:15:28Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/089988fe809b68abf5b73ee0eea5ab9b82e234a8",
    "details": {
      "sha": "7661c80a825e17a6a2e3a0df97b1ff0a74e20e61",
      "filename": "permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/RuntimePermissionsAnnotatedElement.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/089988fe809b68abf5b73ee0eea5ab9b82e234a8/permissionsdispatcher-processor%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2FRuntimePermissionsAnnotatedElement.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/089988fe809b68abf5b73ee0eea5ab9b82e234a8/permissionsdispatcher-processor%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2FRuntimePermissionsAnnotatedElement.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/permissionsdispatcher-processor%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2FRuntimePermissionsAnnotatedElement.java?ref=089988fe809b68abf5b73ee0eea5ab9b82e234a8",
      "patch": "@@ -34,14 +34,26 @@ public class RuntimePermissionsAnnotatedElement {\n     public RuntimePermissionsAnnotatedElement(TypeElement element) {\n         String qualifiedName = element.getQualifiedName().toString();\n         className = Utils.getClassName(qualifiedName);\n+        validateClassName();\n         packageName = Utils.getPackageName(qualifiedName);\n-        checkClassName(className);\n         classType = ClassType.getClassType(className);\n         needsPermissionMethods = findMethods(element, NeedsPermission.class);\n+        validateNeedsPermissionMethods();\n+        showsRationaleMethods = findMethods(element, ShowsRationale.class);\n+        validateShowRationaleMethods();\n+    }\n+\n+    private void validateClassName() {\n+        checkClassName(className);\n+    }\n+\n+    private void validateNeedsPermissionMethods() {\n         checkNeedsPermissionSize(needsPermissionMethods);\n         checkDuplicatedPermission(needsPermissionMethods);\n         checkPrivateMethod(needsPermissionMethods);\n-        showsRationaleMethods = findMethods(element, ShowsRationale.class);\n+    }\n+\n+    private void validateShowRationaleMethods() {\n         checkDuplicatedRationale(showsRationaleMethods);\n         checkPrivateMethod(showsRationaleMethods);\n     }",
      "parent_sha": "d85aed554aa3722043b9fc9ac4381fa6d3d60374"
    }
  },
  {
    "oid": "10a3a1c44c86e46352d19b6e9795a8561491e9d7",
    "message": "Support Kotlin of CallOnRequestPermissionsResultDetector",
    "date": "2018-04-05T13:47:37Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/10a3a1c44c86e46352d19b6e9795a8561491e9d7",
    "details": {
      "sha": "0e75899ac165d83718d117770080c64085ebea1b",
      "filename": "lint/src/main/java/permissions/dispatcher/CallOnRequestPermissionsResultDetector.java",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/10a3a1c44c86e46352d19b6e9795a8561491e9d7/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/10a3a1c44c86e46352d19b6e9795a8561491e9d7/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FCallOnRequestPermissionsResultDetector.java?ref=10a3a1c44c86e46352d19b6e9795a8561491e9d7",
      "patch": "@@ -16,6 +16,7 @@\n import org.jetbrains.uast.UExpression;\n import org.jetbrains.uast.UMethod;\n import org.jetbrains.uast.UQualifiedReferenceExpression;\n+import org.jetbrains.uast.kotlin.KotlinUQualifiedReferenceExpression;\n import org.jetbrains.uast.visitor.AbstractUastVisitor;\n \n import java.util.Collections;\n@@ -102,9 +103,16 @@ private static boolean isGeneratedMethodCalled(UMethod method, String className)\n                         // skip super method call\n                         continue;\n                     }\n-                    String targetClassName = className + \"PermissionsDispatcher\";\n-                    if (targetClassName.equals(receiverName) && \"onRequestPermissionsResult\".equals(referenceExpression.getResolvedName())) {\n-                        return true;\n+\n+                    if (referenceExpression instanceof KotlinUQualifiedReferenceExpression) {\n+                        if (\"onRequestPermissionsResult\".equals(referenceExpression.getResolvedName())) {\n+                            return true;\n+                        }\n+                    } else {\n+                        String targetClassName = className + \"PermissionsDispatcher\";\n+                        if (targetClassName.equals(receiverName) && \"onRequestPermissionsResult\".equals(referenceExpression.getResolvedName())) {\n+                            return true;\n+                        }\n                     }\n                 }\n             }",
      "parent_sha": "a9ab46cd103ab3653cda3b06f9ab7bef7909091f"
    }
  },
  {
    "oid": "72a0ef8d7655434c463157f8889a667cf3021947",
    "message": "Edit unit test sources to reflect new codegen (PermissionRequest prefix)",
    "date": "2017-08-30T10:25:50Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/72a0ef8d7655434c463157f8889a667cf3021947",
    "details": {
      "sha": "9a6be92764a7dddb238f59e259011156da44df60",
      "filename": "processor/src/test/java/permissions/dispatcher/processor/data/Source.java",
      "status": "modified",
      "additions": 132,
      "deletions": 132,
      "changes": 264,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/72a0ef8d7655434c463157f8889a667cf3021947/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/72a0ef8d7655434c463157f8889a667cf3021947/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java?ref=72a0ef8d7655434c463157f8889a667cf3021947",
      "patch": "@@ -996,7 +996,7 @@ protected String[] getExpectSource() {\n                     \"       if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value);\",\n                     \"       } else {\",\n-                    \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value);\",\n+                    \"           PENDING_SHOWCAMERA = new MyActivityShowCameraPermissionRequest(target, value);\",\n                     \"           ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"       }\",\n                     \"   }\",\n@@ -1014,10 +1014,10 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements GrantableRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements GrantableRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n                     \"        private final int value;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target, int value) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target, int value) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"            this.value = value;\",\n                     \"        }\",\n@@ -1090,7 +1090,7 @@ protected String[] getExpectSource() {\n                     \"       if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value);\",\n                     \"       } else {\",\n-                    \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value);\",\n+                    \"           PENDING_SHOWCAMERA = new MyActivityShowCameraPermissionRequest(target, value);\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(PENDING_SHOWCAMERA);\",\n                     \"           } else {\",\n@@ -1112,10 +1112,10 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements GrantableRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements GrantableRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n                     \"        private final int value;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target, int value) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target, int value) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"            this.value = value;\",\n                     \"        }\",\n@@ -1188,7 +1188,7 @@ protected String[] getExpectSource() {\n                     \"       if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value);\",\n                     \"       } else {\",\n-                    \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value);\",\n+                    \"           PENDING_SHOWCAMERA = new MyActivityShowCameraPermissionRequest(target, value);\",\n                     \"           ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"       }\",\n                     \"   }\",\n@@ -1208,10 +1208,10 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements GrantableRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements GrantableRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n                     \"        private final int value;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target, int value) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target, int value) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"            this.value = value;\",\n                     \"        }\",\n@@ -1291,7 +1291,7 @@ protected String[] getExpectSource() {\n                     \"       if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value);\",\n                     \"       } else {\",\n-                    \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value);\",\n+                    \"           PENDING_SHOWCAMERA = new MyActivityShowCameraPermissionRequest(target, value);\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(PENDING_SHOWCAMERA);\",\n                     \"           } else {\",\n@@ -1315,10 +1315,10 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements GrantableRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements GrantableRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n                     \"        private final int value;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target, int value) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target, int value) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"            this.value = value;\",\n                     \"        }\",\n@@ -1464,7 +1464,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -1485,9 +1485,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -1561,7 +1561,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -1584,9 +1584,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -1720,10 +1720,10 @@ protected String[] getExpectSource() {\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyActivityPermissionsDispatcher {\",\n-                    \"   private static final int REQUEST_SHOWCAMERA = 0;\",\n-                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n-                    \"   private static final int REQUEST_ACCESSCONTACTS = 1;\",\n+                    \"   private static final int REQUEST_ACCESSCONTACTS = 0;\",\n                     \"   private static final String[] PERMISSION_ACCESSCONTACTS = new String[] {\\\"android.permission.READ_CONTACTS\\\"};\",\n+                    \"   private static final int REQUEST_SHOWCAMERA = 1;\",\n+                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyActivity target) {\",\n@@ -1803,10 +1803,10 @@ protected String[] getExpectSource() {\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyActivityPermissionsDispatcher {\",\n-                    \"   private static final int REQUEST_SHOWCAMERA = 0;\",\n-                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n-                    \"   private static final int REQUEST_ACCESSCONTACTS = 1;\",\n+                    \"   private static final int REQUEST_ACCESSCONTACTS = 0;\",\n                     \"   private static final String[] PERMISSION_ACCESSCONTACTS = new String[] {\\\"android.permission.READ_CONTACTS\\\"};\",\n+                    \"   private static final int REQUEST_SHOWCAMERA = 1;\",\n+                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyActivity target) {\",\n@@ -1935,10 +1935,10 @@ protected String[] getExpectSource() {\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n-                    \"   private static final int REQUEST_SHOWCAMERA = 0;\",\n-                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n-                    \"   private static final int REQUEST_ACCESSCONTACTS = 1;\",\n+                    \"   private static final int REQUEST_ACCESSCONTACTS = 0;\",\n                     \"   private static final String[] PERMISSION_ACCESSCONTACTS = new String[] {\\\"android.permission.READ_CONTACTS\\\"};\",\n+                    \"   private static final int REQUEST_SHOWCAMERA = 1;\",\n+                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n                     \"   private  MyFragmentPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n@@ -2104,7 +2104,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -2115,7 +2115,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera2();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA2)) {\",\n-                    \"               target.cameraRationale(new ShowCamera2PermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCamera2PermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA2, REQUEST_SHOWCAMERA2);\",\n                     \"           }\",\n@@ -2137,9 +2137,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -2152,9 +2152,9 @@ protected String[] getExpectSource() {\n                     \"        public void cancel() {\",\n                     \"        }\",\n                     \"   }\",\n-                    \"   private static final class ShowCamera2PermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCamera2PermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCamera2PermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCamera2PermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -2312,7 +2312,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -2323,7 +2323,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera2();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA2)) {\",\n-                    \"               target.cameraRationale(new ShowCamera2PermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCamera2PermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA2, REQUEST_SHOWCAMERA2);\",\n                     \"           }\",\n@@ -2349,9 +2349,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -2367,9 +2367,9 @@ protected String[] getExpectSource() {\n                     \"            target.cameraDenied();\",\n                     \"        }\",\n                     \"   }\",\n-                    \"   private static final class ShowCamera2PermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCamera2PermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCamera2PermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCamera2PermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -2438,7 +2438,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -2455,9 +2455,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -2522,7 +2522,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -2539,9 +2539,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -2610,7 +2610,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -2631,9 +2631,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -2706,7 +2706,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -2729,9 +2729,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -2931,7 +2931,7 @@ protected String[] getExpectSource() {\n                     \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value, name);\",\n                     \"       } else {\",\n-                    \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value, name);\",\n+                    \"           PENDING_SHOWCAMERA = new MyFragmentShowCameraPermissionRequest(target, value, name);\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"       }\",\n                     \"   }\",\n@@ -2949,11 +2949,11 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements GrantableRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements GrantableRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n                     \"        private final int value;\",\n                     \"        private final String name;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target, int value, String name) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target, int value, String name) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"            this.value = value;\",\n                     \"            this.name = name;\",\n@@ -3026,7 +3026,7 @@ protected String[] getExpectSource() {\n                     \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value, name);\",\n                     \"       } else {\",\n-                    \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value, name);\",\n+                    \"           PENDING_SHOWCAMERA = new MyFragmentShowCameraPermissionRequest(target, value, name);\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(PENDING_SHOWCAMERA);\",\n                     \"           } else {\",\n@@ -3048,11 +3048,11 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements GrantableRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements GrantableRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n                     \"        private final int value;\",\n                     \"        private final String name;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target, int value, String name) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target, int value, String name) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"            this.value = value;\",\n                     \"            this.name = name;\",\n@@ -3124,7 +3124,7 @@ protected String[] getExpectSource() {\n                     \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value, name);\",\n                     \"       } else {\",\n-                    \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value, name);\",\n+                    \"           PENDING_SHOWCAMERA = new MyFragmentShowCameraPermissionRequest(target, value, name);\",\n                     \"           target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"       }\",\n                     \"   }\",\n@@ -3144,11 +3144,11 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements GrantableRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements GrantableRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n                     \"        private final int value;\",\n                     \"        private final String name;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target, int value, String name) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target, int value, String name) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"            this.value = value;\",\n                     \"            this.name = name;\",\n@@ -3228,7 +3228,7 @@ protected String[] getExpectSource() {\n                     \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera(value, name);\",\n                     \"       } else {\",\n-                    \"           PENDING_SHOWCAMERA = new ShowCameraPermissionRequest(target, value, name);\",\n+                    \"           PENDING_SHOWCAMERA = new MyFragmentShowCameraPermissionRequest(target, value, name);\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"               target.cameraRationale(PENDING_SHOWCAMERA);\",\n                     \"           } else {\",\n@@ -3252,11 +3252,11 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements GrantableRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements GrantableRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n                     \"        private final int value;\",\n                     \"        private final String name;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target, int value, String name) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target, int value, String name) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"            this.value = value;\",\n                     \"            this.name = name;\",\n@@ -3412,7 +3412,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -3423,7 +3423,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera2();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA2)) {\",\n-                    \"               target.cameraRationale(new ShowCamera2PermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCamera2PermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA2, REQUEST_SHOWCAMERA2);\",\n                     \"           }\",\n@@ -3445,9 +3445,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -3460,9 +3460,9 @@ protected String[] getExpectSource() {\n                     \"        public void cancel() {\",\n                     \"        }\",\n                     \"   }\",\n-                    \"   private static final class ShowCamera2PermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCamera2PermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCamera2PermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCamera2PermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -3618,7 +3618,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -3629,7 +3629,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera2();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA2)) {\",\n-                    \"               target.cameraRationale(new ShowCamera2PermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCamera2PermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA2, REQUEST_SHOWCAMERA2);\",\n                     \"           }\",\n@@ -3655,9 +3655,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -3673,9 +3673,9 @@ protected String[] getExpectSource() {\n                     \"            target.cameraDenied();\",\n                     \"        }\",\n                     \"   }\",\n-                    \"   private static final class ShowCamera2PermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCamera2PermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCamera2PermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCamera2PermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -3738,18 +3738,18 @@ protected String[] getExpectSource() {\n                     \"import permissions.dispatcher.PermissionRequest;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyActivityPermissionsDispatcher {\",\n-                    \"   private static final int REQUEST_SHOWCAMERA = 0;\",\n-                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n-                    \"   private static final int REQUEST_ACCESSCONTACTS = 1;\",\n+                    \"   private static final int REQUEST_ACCESSCONTACTS = 0;\",\n                     \"   private static final String[] PERMISSION_ACCESSCONTACTS = new String[] {\\\"android.permission.READ_CONTACTS\\\"};\",\n+                    \"   private static final int REQUEST_SHOWCAMERA = 1;\",\n+                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyActivity target) {\",\n                     \"       if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -3778,9 +3778,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -3839,18 +3839,18 @@ protected String[] getExpectSource() {\n                     \"import permissions.dispatcher.PermissionRequest;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n-                    \"   private static final int REQUEST_SHOWCAMERA = 0;\",\n-                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n-                    \"   private static final int REQUEST_ACCESSCONTACTS = 1;\",\n+                    \"   private static final int REQUEST_ACCESSCONTACTS = 0;\",\n                     \"   private static final String[] PERMISSION_ACCESSCONTACTS = new String[] {\\\"android.permission.READ_CONTACTS\\\"};\",\n+                    \"   private static final int REQUEST_SHOWCAMERA = 1;\",\n+                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n                     \"   private  MyFragmentPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n                     \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -3879,9 +3879,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -3944,18 +3944,18 @@ protected String[] getExpectSource() {\n                     \"import permissions.dispatcher.PermissionRequest;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyActivityPermissionsDispatcher {\",\n-                    \"   private static final int REQUEST_SHOWCAMERA = 0;\",\n-                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n-                    \"   private static final int REQUEST_ACCESSCONTACTS = 1;\",\n+                    \"   private static final int REQUEST_ACCESSCONTACTS = 0;\",\n                     \"   private static final String[] PERMISSION_ACCESSCONTACTS = new String[] {\\\"android.permission.READ_CONTACTS\\\"};\",\n+                    \"   private static final int REQUEST_SHOWCAMERA = 1;\",\n+                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n                     \"   private MyActivityPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyActivity target) {\",\n                     \"       if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -3966,7 +3966,7 @@ protected String[] getExpectSource() {\n                     \"           target.accessContacts();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_ACCESSCONTACTS)) {\",\n-                    \"               target.contactsRationale(new AccessContactsPermissionRequest(target));\",\n+                    \"               target.contactsRationale(new MyActivityAccessContactsPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_ACCESSCONTACTS, REQUEST_ACCESSCONTACTS);\",\n                     \"           }\",\n@@ -3988,9 +3988,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -4003,9 +4003,9 @@ protected String[] getExpectSource() {\n                     \"        public void cancel() {\",\n                     \"        }\",\n                     \"   }\",\n-                    \"   private static final class AccessContactsPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityAccessContactsPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private AccessContactsPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityAccessContactsPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -4067,18 +4067,18 @@ protected String[] getExpectSource() {\n                     \"import permissions.dispatcher.PermissionRequest;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n-                    \"   private static final int REQUEST_SHOWCAMERA = 0;\",\n-                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n-                    \"   private static final int REQUEST_ACCESSCONTACTS = 1;\",\n+                    \"   private static final int REQUEST_ACCESSCONTACTS = 0;\",\n                     \"   private static final String[] PERMISSION_ACCESSCONTACTS = new String[] {\\\"android.permission.READ_CONTACTS\\\"};\",\n+                    \"   private static final int REQUEST_SHOWCAMERA = 1;\",\n+                    \"   private static final String[] PERMISSION_SHOWCAMERA = new String[] {\\\"android.permission.CAMERA\\\"};\",\n                     \"   private  MyFragmentPermissionsDispatcher() {\",\n                     \"   }\",\n                     \"   static void showCameraWithCheck(MyFragment target) {\",\n                     \"       if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -4089,7 +4089,7 @@ protected String[] getExpectSource() {\n                     \"           target.accessContacts();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_ACCESSCONTACTS)) {\",\n-                    \"               target.contactsRationale(new AccessContactsPermissionRequest(target));\",\n+                    \"               target.contactsRationale(new MyFragmentAccessContactsPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_ACCESSCONTACTS, REQUEST_ACCESSCONTACTS);\",\n                     \"           }\",\n@@ -4111,9 +4111,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -4126,9 +4126,9 @@ protected String[] getExpectSource() {\n                     \"        public void cancel() {\",\n                     \"        }\",\n                     \"   }\",\n-                    \"   private static final class AccessContactsPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentAccessContactsPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private AccessContactsPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentAccessContactsPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -4573,7 +4573,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyActivityShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               ActivityCompat.requestPermissions(target, PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -4592,9 +4592,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyActivityShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyActivity> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyActivity target) {\",\n+                    \"        private MyActivityShowCameraPermissionRequest(MyActivity target) {\",\n                     \"            this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -4666,7 +4666,7 @@ protected String[] getExpectSource() {\n                     \"           target.showCamera();\",\n                     \"       } else {\",\n                     \"           if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWCAMERA)) {\",\n-                    \"               target.cameraRationale(new ShowCameraPermissionRequest(target));\",\n+                    \"               target.cameraRationale(new MyFragmentShowCameraPermissionRequest(target));\",\n                     \"           } else {\",\n                     \"               target.requestPermissions(PERMISSION_SHOWCAMERA, REQUEST_SHOWCAMERA);\",\n                     \"           }\",\n@@ -4685,9 +4685,9 @@ protected String[] getExpectSource() {\n                     \"               break;\",\n                     \"       }\",\n                     \"   }\",\n-                    \"   private static final class ShowCameraPermissionRequest implements PermissionRequest {\",\n+                    \"   private static final class MyFragmentShowCameraPermissionRequest implements PermissionRequest {\",\n                     \"        private final WeakReference<MyFragment> weakTarget;\",\n-                    \"        private ShowCameraPermissionRequest(MyFragment target) {\",\n+                    \"        private MyFragmentShowCameraPermissionRequest(MyFragment target) {\",\n                     \"            this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"        }\",\n                     \"        @Override\",\n@@ -5052,7 +5052,7 @@ protected String[] getExpectSource() {\n                     \"      target.writeSettings();\",\n                     \"    } else {\",\n                     \"      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_WRITESETTINGS)) {\",\n-                    \"        target.writeSettingOnShowRationale(new WriteSettingsPermissionRequest(target));\",\n+                    \"        target.writeSettingOnShowRationale(new MyFragmentWriteSettingsPermissionRequest(target));\",\n                     \"      } else {\",\n                     \"        Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS, Uri.parse(\\\"package:\\\" + target.getActivity().getPackageName()));\",\n                     \"        target.startActivityForResult(intent, REQUEST_WRITESETTINGS);\",\n@@ -5076,9 +5076,9 @@ protected String[] getExpectSource() {\n                     \"      break;\",\n                     \"    }\",\n                     \"  }\",\n-                    \"  private static final class WriteSettingsPermissionRequest implements PermissionRequest {\",\n+                    \"  private static final class MyFragmentWriteSettingsPermissionRequest implements PermissionRequest {\",\n                     \"    private final WeakReference<MyFragment> weakTarget;\",\n-                    \"    private WriteSettingsPermissionRequest(MyFragment target) {\",\n+                    \"    private MyFragmentWriteSettingsPermissionRequest(MyFragment target) {\",\n                     \"      this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"    }\",\n                     \"    @Override\",\n@@ -5158,7 +5158,7 @@ protected String[] getExpectSource() {\n                     \"      target.writeSettings();\",\n                     \"    } else {\",\n                     \"      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_WRITESETTINGS)) {\",\n-                    \"        target.writeSettingOnShowRationale(new WriteSettingsPermissionRequest(target));\",\n+                    \"        target.writeSettingOnShowRationale(new MyFragmentWriteSettingsPermissionRequest(target));\",\n                     \"      } else {\",\n                     \"        Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS, Uri.parse(\\\"package:\\\" + target.getActivity().getPackageName()));\",\n                     \"        target.startActivityForResult(intent, REQUEST_WRITESETTINGS);\",\n@@ -5182,9 +5182,9 @@ protected String[] getExpectSource() {\n                     \"      break;\",\n                     \"    }\",\n                     \"  }\",\n-                    \"  private static final class WriteSettingsPermissionRequest implements PermissionRequest {\",\n+                    \"  private static final class MyFragmentWriteSettingsPermissionRequest implements PermissionRequest {\",\n                     \"    private final WeakReference<MyFragment> weakTarget;\",\n-                    \"    private WriteSettingsPermissionRequest(MyFragment target) {\",\n+                    \"    private MyFragmentWriteSettingsPermissionRequest(MyFragment target) {\",\n                     \"      this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"    }\",\n                     \"    @Override\",\n@@ -5264,7 +5264,7 @@ protected String[] getExpectSource() {\n                     \"      target.systemAlertWindow();\",\n                     \"    } else {\",\n                     \"      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SYSTEMALERTWINDOW)) {\",\n-                    \"        target.systemAlertWindowOnShowRationale(new SystemAlertWindowPermissionRequest(target));\",\n+                    \"        target.systemAlertWindowOnShowRationale(new MyFragmentSystemAlertWindowPermissionRequest(target));\",\n                     \"      } else {\",\n                     \"        Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\\\"package:\\\" + target.getActivity().getPackageName()));\",\n                     \"        target.startActivityForResult(intent, REQUEST_SYSTEMALERTWINDOW);\",\n@@ -5288,9 +5288,9 @@ protected String[] getExpectSource() {\n                     \"      break;\",\n                     \"    }\",\n                     \"  }\",\n-                    \"  private static final class SystemAlertWindowPermissionRequest implements PermissionRequest {\",\n+                    \"  private static final class MyFragmentSystemAlertWindowPermissionRequest implements PermissionRequest {\",\n                     \"    private final WeakReference<MyFragment> weakTarget;\",\n-                    \"    private SystemAlertWindowPermissionRequest(MyFragment target) {\",\n+                    \"    private MyFragmentSystemAlertWindowPermissionRequest(MyFragment target) {\",\n                     \"      this.weakTarget = new WeakReference<MyFragment>(target);\",\n                     \"    }\",\n                     \"    @Override\",\n@@ -5370,7 +5370,7 @@ protected String[] getExpectSource() {\n                     \"      target.writeSettings();\",\n                     \"    } else {\",\n                     \"      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_WRITESETTINGS)) {\",\n-                    \"        target.writeSettingsOnShowRationale(new WriteSettingsPermissionRequest(target));\",\n+                    \"        target.writeSettingsOnShowRationale(new MyActivityWriteSettingsPermissionRequest(target));\",\n                     \"      } else {\",\n                     \"        Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS, Uri.parse(\\\"package:\\\" + target.getPackageName()));\",\n                     \"        target.startActivityForResult(intent, REQUEST_WRITESETTINGS);\",\n@@ -5394,9 +5394,9 @@ protected String[] getExpectSource() {\n                     \"      break;\",\n                     \"    }\",\n                     \"  }\",\n-                    \"  private static final class WriteSettingsPermissionRequest implements PermissionRequest {\",\n+                    \"  private static final class MyActivityWriteSettingsPermissionRequest implements PermissionRequest {\",\n                     \"    private final WeakReference<MyActivity> weakTarget;\",\n-                    \"    private WriteSettingsPermissionRequest(MyActivity target) {\",\n+                    \"    private MyActivityWriteSettingsPermissionRequest(MyActivity target) {\",\n                     \"      this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"    }\",\n                     \"    @Override\",\n@@ -5476,7 +5476,7 @@ protected String[] getExpectSource() {\n                     \"      target.systemAlertWindow();\",\n                     \"    } else {\",\n                     \"      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SYSTEMALERTWINDOW)) {\",\n-                    \"        target.systemAlertWindowOnShowRationale(new SystemAlertWindowPermissionRequest(target));\",\n+                    \"        target.systemAlertWindowOnShowRationale(new MyActivitySystemAlertWindowPermissionRequest(target));\",\n                     \"      } else {\",\n                     \"        Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\\\"package:\\\" + target.getPackageName()));\",\n                     \"        target.startActivityForResult(intent, REQUEST_SYSTEMALERTWINDOW);\",\n@@ -5500,9 +5500,9 @@ protected String[] getExpectSource() {\n                     \"      break;\",\n                     \"    }\",\n                     \"  }\",\n-                    \"  private static final class SystemAlertWindowPermissionRequest implements PermissionRequest {\",\n+                    \"  private static final class MyActivitySystemAlertWindowPermissionRequest implements PermissionRequest {\",\n                     \"    private final WeakReference<MyActivity> weakTarget;\",\n-                    \"    private SystemAlertWindowPermissionRequest(MyActivity target) {\",\n+                    \"    private MyActivitySystemAlertWindowPermissionRequest(MyActivity target) {\",\n                     \"      this.weakTarget = new WeakReference<MyActivity>(target);\",\n                     \"    }\",\n                     \"    @Override\",\n@@ -5587,7 +5587,7 @@ protected String[] getExpectSource() {\n                     \"      target.systemAlertWindow();\",\n                     \"    } else {\",\n                     \"      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SYSTEMALERTWINDOW)) {\",\n-                    \"        target.systemAlertWindowOnShowRationale(new SystemAlertWindowPermissionRequest(target));\",\n+                    \"        target.systemAlertWindowOnShowRationale(new MyFragmentSystemAlertWindowPermissionRequest(target));\",\n                     \"      } else {\",\n                     \"        Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\\\"package:\\\" + target.getActivity().getPackageName()));\",\n                     \"        target.startActivityForResult(intent, REQUEST_SYSTEMALERTWINDOW);\",\n@@ -5611,9 +5611,9 @@ protected String[] getExpectSource() {\n                     \"      break;\",\n                     \"    }\",\n                     \"  }\",\n-                    \"  private static final class SystemAlertWindowPermissionRequest<T, U extends Integer, V extends Map<? extends Annotation, ?>> implements PermissionRequest {\",\n+                    \"  private static final class MyFragmentSystemAlertWindowPermissionRequest<T, U extends Integer, V extends Map<? extends Annotation, ?>> implements PermissionRequest {\",\n                     \"    private final WeakReference<MyFragment<T, U, V>> weakTarget;\",\n-                    \"    private SystemAlertWindowPermissionRequest(MyFragment<T, U, V> target) {\",\n+                    \"    private MyFragmentSystemAlertWindowPermissionRequest(MyFragment<T, U, V> target) {\",\n                     \"      this.weakTarget = new WeakReference<MyFragment<T, U, V>>(target);\",\n                     \"    }\",\n                     \"    @Override\",\n@@ -5698,7 +5698,7 @@ protected String[] getExpectSource() {\n                     \"      target.systemAlertWindow();\",\n                     \"    } else {\",\n                     \"      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SYSTEMALERTWINDOW)) {\",\n-                    \"        target.systemAlertWindowOnShowRationale(new SystemAlertWindowPermissionRequest(target));\",\n+                    \"        target.systemAlertWindowOnShowRationale(new MyActivitySystemAlertWindowPermissionRequest(target));\",\n                     \"      } else {\",\n                     \"        Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\\\"package:\\\" + target.getPackageName()));\",\n                     \"        target.startActivityForResult(intent, REQUEST_SYSTEMALERTWINDOW);\",\n@@ -5722,9 +5722,9 @@ protected String[] getExpectSource() {\n                     \"      break;\",\n                     \"    }\",\n                     \"  }\",\n-                    \"  private static final class SystemAlertWindowPermissionRequest<T, U extends Integer, V extends Map<? extends Annotation, ?>> implements PermissionRequest {\",\n+                    \"  private static final class MyActivitySystemAlertWindowPermissionRequest<T, U extends Integer, V extends Map<? extends Annotation, ?>> implements PermissionRequest {\",\n                     \"    private final WeakReference<MyActivity<T, U, V>> weakTarget;\",\n-                    \"    private SystemAlertWindowPermissionRequest(MyActivity<T, U, V> target) {\",\n+                    \"    private MyActivitySystemAlertWindowPermissionRequest(MyActivity<T, U, V> target) {\",\n                     \"      this.weakTarget = new WeakReference<MyActivity<T, U, V>>(target);\",\n                     \"    }\",\n                     \"    @Override\",",
      "parent_sha": "08e22a42b9ab4420c58f36a76142ebc247cf472b"
    }
  },
  {
    "oid": "97704d7a76d2eba3a14813f1c0e6779bddc4e6ce",
    "message": "going back to hardcoded strings",
    "date": "2015-12-10T19:53:00Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/97704d7a76d2eba3a14813f1c0e6779bddc4e6ce",
    "details": {
      "sha": "d8c1fdd926d8582d6b7cbee432e6aca5a1f6075b",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 6,
      "deletions": 14,
      "changes": 20,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/97704d7a76d2eba3a14813f1c0e6779bddc4e6ce/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/97704d7a76d2eba3a14813f1c0e6779bddc4e6ce/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=97704d7a76d2eba3a14813f1c0e6779bddc4e6ce",
      "patch": "@@ -26,20 +26,12 @@ public final class PermissionUtils {\n     private static final SimpleArrayMap<String, Integer> MIN_SDK_PERMISSIONS;\n     static {\n         MIN_SDK_PERMISSIONS = new SimpleArrayMap<>(6);\n-        if (Build.VERSION.SDK_INT >= GINGERBREAD) {\n-            MIN_SDK_PERMISSIONS.put(Manifest.permission.USE_SIP, GINGERBREAD);\n-        }\n-        if (Build.VERSION.SDK_INT >= ICE_CREAM_SANDWICH) {\n-            MIN_SDK_PERMISSIONS.put(Manifest.permission.ADD_VOICEMAIL, ICE_CREAM_SANDWICH);\n-        }\n-        if (Build.VERSION.SDK_INT >= JELLY_BEAN) {\n-            MIN_SDK_PERMISSIONS.put(Manifest.permission.READ_CALL_LOG, JELLY_BEAN);\n-            MIN_SDK_PERMISSIONS.put(Manifest.permission.READ_EXTERNAL_STORAGE, JELLY_BEAN);\n-            MIN_SDK_PERMISSIONS.put(Manifest.permission.WRITE_CALL_LOG, JELLY_BEAN);\n-        }\n-        if (Build.VERSION.SDK_INT >= KITKAT_WATCH) {\n-            MIN_SDK_PERMISSIONS.put(Manifest.permission.BODY_SENSORS, KITKAT_WATCH);\n-        }\n+        MIN_SDK_PERMISSIONS.put(\"com.android.voicemail.permission.ADD_VOICEMAIL\", ICE_CREAM_SANDWICH);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.BODY_SENSORS\", KITKAT_WATCH);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.READ_CALL_LOG\", JELLY_BEAN);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.READ_EXTERNAL_STORAGE\", JELLY_BEAN);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.USE_SIP\", GINGERBREAD);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.WRITE_CALL_LOG\", JELLY_BEAN);\n     }\n \n     private PermissionUtils() {",
      "parent_sha": "cae27143d85ae66b63997aab7df103b20b54205f"
    }
  },
  {
    "oid": "846b9c94aa4b1f41516c179b3cf404f195abb459",
    "message": "Fix to use compat class.",
    "date": "2016-12-25T17:30:04Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/846b9c94aa4b1f41516c179b3cf404f195abb459",
    "details": {
      "sha": "b2008f7e7b485092ab99c5a3eaa077ea494caf44",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/846b9c94aa4b1f41516c179b3cf404f195abb459/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/846b9c94aa4b1f41516c179b3cf404f195abb459/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=846b9c94aa4b1f41516c179b3cf404f195abb459",
      "patch": "@@ -1,14 +1,13 @@\n package permissions.dispatcher;\n \n-import android.annotation.TargetApi;\n import android.app.Activity;\n-import android.app.AppOpsManager;\n import android.content.Context;\n import android.content.pm.PackageInfo;\n import android.content.pm.PackageManager;\n import android.os.Build;\n import android.os.Process;\n import android.support.v4.app.ActivityCompat;\n+import android.support.v4.app.AppOpsManagerCompat;\n import android.support.v4.util.SimpleArrayMap;\n \n import static android.support.v4.content.PermissionChecker.checkSelfPermission;\n@@ -106,11 +105,14 @@ private static boolean hasSelfPermission(Context context, String permission) {\n         }\n     }\n \n-    @TargetApi(Build.VERSION_CODES.M)\n     private static boolean hasSelfPermissionForXiaomi(Context context, String permission) {\n-        AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);\n-        int checkOp = appOpsManager.checkOp(AppOpsManager.permissionToOp(permission), Process.myUid(), context.getPackageName());\n-        return checkOp == AppOpsManager.MODE_ALLOWED && checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;\n+        String permissionToOp = AppOpsManagerCompat.permissionToOp(permission);\n+        if (permissionToOp == null) {\n+            // in case of normal permissions(e.g. INTERNET)\n+            return true;\n+        }\n+        int noteOp = AppOpsManagerCompat.noteOp(context, permissionToOp, Process.myUid(), context.getPackageName());\n+        return noteOp == AppOpsManagerCompat.MODE_ALLOWED && checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;\n     }\n \n     /**\n@@ -135,7 +137,6 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St\n      * @param context context\n      * @return target sdk version\n      */\n-    @TargetApi(Build.VERSION_CODES.DONUT)\n     public static int getTargetSdkVersion(Context context) {\n         if (targetSdkVersion != -1) {\n             return targetSdkVersion;",
      "parent_sha": "b9cbc0f5e3eb3ccf1f6c7908deb44663b1e37724"
    }
  },
  {
    "oid": "7343d0c373aa445526cbe1272f3085fa8644599c",
    "message": "Apply formatter.",
    "date": "2016-12-13T13:20:11Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/7343d0c373aa445526cbe1272f3085fa8644599c",
    "details": {
      "sha": "57978e17fe588a87f489b0ad6914cff4fd694c5d",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/7343d0c373aa445526cbe1272f3085fa8644599c/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/7343d0c373aa445526cbe1272f3085fa8644599c/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=7343d0c373aa445526cbe1272f3085fa8644599c",
      "patch": "@@ -86,11 +86,11 @@ public static boolean hasSelfPermissions(Context context, String... permissions)\n \n     /**\n      * Determine context has access to the given permission.\n-     *\n+     * <p>\n      * This is a workaround for RuntimeException of Parcel#readException.\n      * For more detail, check this issue https://github.com/hotchemi/PermissionsDispatcher/issues/107\n      *\n-     * @param context context\n+     * @param context    context\n      * @param permission permission\n      * @return returns true if context has access to the given permission, false otherwise.\n      * @see #hasSelfPermissions(Context, String...)",
      "parent_sha": "2b863a57d9a29469db4ad1529d31a2ff8100fd78"
    }
  },
  {
    "oid": "a445eb09fcf04cad32ed40aa05590433412036b1",
    "message": "fix hotchemi/PermissionsDispatcher#51 based on @aurae sketch code",
    "date": "2015-12-10T15:55:55Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/a445eb09fcf04cad32ed40aa05590433412036b1",
    "details": {
      "sha": "bd498fb60c60d081d41dc335e2df3ae223ee3431",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 33,
      "deletions": 1,
      "changes": 34,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/a445eb09fcf04cad32ed40aa05590433412036b1/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/a445eb09fcf04cad32ed40aa05590433412036b1/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=a445eb09fcf04cad32ed40aa05590433412036b1",
      "patch": "@@ -9,13 +9,30 @@\n import android.provider.Settings;\n import android.support.annotation.Nullable;\n import android.support.v4.app.ActivityCompat;\n+import android.support.v4.util.SimpleArrayMap;\n \n import static android.os.Build.VERSION_CODES.FROYO;\n import static android.os.Build.VERSION_CODES.GINGERBREAD;\n+import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;\n+import static android.os.Build.VERSION_CODES.KITKAT_WATCH;\n+import static android.os.Build.VERSION_CODES.JELLY_BEAN;\n import static android.support.v4.content.PermissionChecker.checkSelfPermission;\n \n public final class PermissionUtils {\n \n+    // Map of dangerous permissions introduced in later framework versions.\n+    // Used to conditionally bypass permission-hold checks on older devices.\n+    private static final SimpleArrayMap<String, Integer> MIN_SDK_PERMISSIONS;\n+    static {\n+        MIN_SDK_PERMISSIONS = new SimpleArrayMap<>(6);\n+        MIN_SDK_PERMISSIONS.put(\"com.android.voicemail.permission.ADD_VOICEMAIL\", ICE_CREAM_SANDWICH);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.BODY_SENSORS\", KITKAT_WATCH);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.READ_CALL_LOG\", JELLY_BEAN);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.READ_EXTERNAL_STORAGE\", JELLY_BEAN);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.USE_SIP\", GINGERBREAD);\n+        MIN_SDK_PERMISSIONS.put(\"android.permission.WRITE_CALL_LOG\", JELLY_BEAN);\n+    }\n+\n     private PermissionUtils() {\n     }\n \n@@ -34,6 +51,21 @@ public static boolean verifyPermissions(int... grantResults) {\n         return true;\n     }\n \n+    /**\n+     * Returns true if the permission exists in this SDK version\n+     *\n+     * @param permission permission\n+     * @return returns true if the permission exists in this SDK version\n+     */\n+    private static boolean permissionExists(String permission) {\n+        // Check if the permission could potentially be missing on this device\n+        Integer minVersion = MIN_SDK_PERMISSIONS.get(permission);\n+\n+        // If null was returned from the above call, there is no need for a device API level check for the permission;\n+        // otherwise, we check if its minimum API level requirement is met\n+        return minVersion == null || Build.VERSION.SDK_INT >= minVersion;\n+    }\n+\n     /**\n      * Returns true if the Activity or Fragment has access to all given permissions.\n      *\n@@ -43,7 +75,7 @@ public static boolean verifyPermissions(int... grantResults) {\n      */\n     public static boolean hasSelfPermissions(Context context, String... permissions) {\n         for (String permission : permissions) {\n-            if (checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\n+            if (permissionExists(permission) && checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\n                 return false;\n             }\n         }",
      "parent_sha": "e2f45f859a46dfb0ce544f7a988c85cc9f0d1bb9"
    }
  },
  {
    "oid": "7d181e05d5ce1e256564eecab37d087f642df150",
    "message": "Fix test cases for OnNeverAskAgain not being called",
    "date": "2016-01-21T15:06:32Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/7d181e05d5ce1e256564eecab37d087f642df150",
    "details": {
      "sha": "14ebb02bad5d967ab8c5741131508815349815ee",
      "filename": "processor/src/test/java/permissions/dispatcher/processor/data/Source.java",
      "status": "modified",
      "additions": 39,
      "deletions": 38,
      "changes": 77,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/7d181e05d5ce1e256564eecab37d087f642df150/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/7d181e05d5ce1e256564eecab37d087f642df150/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/processor%2Fsrc%2Ftest%2Fjava%2Fpermissions%2Fdispatcher%2Fprocessor%2Fdata%2FSource.java?ref=7d181e05d5ce1e256564eecab37d087f642df150",
      "patch": "@@ -1119,6 +1119,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n@@ -1142,7 +1143,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -1226,6 +1227,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n@@ -1253,7 +1255,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -1500,6 +1502,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n@@ -1525,7 +1528,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -1601,6 +1604,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n@@ -1619,7 +1623,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -2169,6 +2173,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n@@ -2196,7 +2201,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -2207,7 +2212,7 @@ protected String[] getExpectSource() {\n                     \"               }\",\n                     \"               break;\",\n                     \"           case REQUEST_SHOWCAMERA2:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA2)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA2)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -2265,6 +2270,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n@@ -2303,7 +2309,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -2314,7 +2320,7 @@ protected String[] getExpectSource() {\n                     \"               }\",\n                     \"               break;\",\n                     \"           case REQUEST_SHOWCAMERA2:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA2)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA2)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -2670,6 +2676,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -2694,7 +2701,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -2835,6 +2842,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -2852,7 +2860,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -3096,6 +3104,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -3118,7 +3127,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -3204,6 +3213,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -3230,7 +3240,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -3509,6 +3519,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -3535,7 +3546,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -3546,7 +3557,7 @@ protected String[] getExpectSource() {\n                     \"               }\",\n                     \"               break;\",\n                     \"           case REQUEST_SHOWCAMERA2:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -3604,6 +3615,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -3641,7 +3653,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -3652,7 +3664,7 @@ protected String[] getExpectSource() {\n                     \"               }\",\n                     \"               break;\",\n                     \"           case REQUEST_SHOWCAMERA2:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA2)) {\",\n                     \"                   target.cameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -4313,6 +4325,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n@@ -4331,7 +4344,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.onCameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -4381,6 +4394,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n                     \"final class MyFragmentPermissionsDispatcher {\",\n@@ -4398,7 +4412,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.onCameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -4576,6 +4590,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n@@ -4601,7 +4616,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.onCameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -4674,6 +4689,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import java.lang.Override;\",\n                     \"import java.lang.String;\",\n                     \"import java.lang.ref.WeakReference;\",\n@@ -4698,7 +4714,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.onCameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -4779,6 +4795,7 @@ protected String[] getActualSource() {\n         protected String[] getExpectSource() {\n             return new String[]{\n                     \"package tests;\",\n+                    \"import android.os.Build;\",\n                     \"import android.support.v4.app.ActivityCompat;\",\n                     \"import java.lang.String;\",\n                     \"import permissions.dispatcher.PermissionUtils;\",\n@@ -4806,7 +4823,7 @@ protected String[] getExpectSource() {\n                     \"   static void onRequestPermissionsResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"       switch (requestCode) {\",\n                     \"           case REQUEST_SHOWCAMERA:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWCAMERA)) {\",\n                     \"                   target.onShowCameraDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -4821,7 +4838,7 @@ protected String[] getExpectSource() {\n                     \"               }\",\n                     \"               break;\",\n                     \"           case REQUEST_SHOWGETSTORAGE:\",\n-                    \"               if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWGETSTORAGE)) {\",\n+                    \"               if (Build.VERSION.SDK_INT < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWGETSTORAGE)) {\",\n                     \"                   target.onGetStorageDenied();\",\n                     \"                   return;\",\n                     \"               }\",\n@@ -4948,10 +4965,6 @@ protected String[] getExpectSource() {\n                     \"  static void onActivityResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"    switch (requestCode) {\",\n                     \"      case REQUEST_WRITESETTINGS:\",\n-                    \"      if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_WRITESETTINGS)) {\",\n-                    \"        target.writeSettingOnPermissionDenied();\",\n-                    \"        return;\",\n-                    \"      }\",\n                     \"      if (Settings.System.canWrite(target.getActivity())) {\",\n                     \"        target.writeSettings();\",\n                     \"      } else {\",\n@@ -5058,10 +5071,6 @@ protected String[] getExpectSource() {\n                     \"  static void onActivityResult(MyFragment target, int requestCode, int[] grantResults) {\",\n                     \"    switch (requestCode) {\",\n                     \"      case REQUEST_SYSTEMALERTWINDOW:\",\n-                    \"      if (!PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SYSTEMALERTWINDOW)) {\",\n-                    \"        target.systemAlertWindowOnPermissionDenied();\",\n-                    \"        return;\",\n-                    \"      }\",\n                     \"      if (Settings.canDrawOverlays(target.getActivity())) {\",\n                     \"        target.systemAlertWindow();\",\n                     \"      } else {\",\n@@ -5168,10 +5177,6 @@ protected String[] getExpectSource() {\n                     \"  static void onActivityResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"    switch (requestCode) {\",\n                     \"      case REQUEST_WRITESETTINGS:\",\n-                    \"      if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_WRITESETTINGS)) {\",\n-                    \"        target.writeSettingsOnPermissionDenied();\",\n-                    \"        return;\",\n-                    \"      }\",\n                     \"      if (Settings.System.canWrite(target)) {\",\n                     \"        target.writeSettings();\",\n                     \"      } else {\",\n@@ -5278,10 +5283,6 @@ protected String[] getExpectSource() {\n                     \"  static void onActivityResult(MyActivity target, int requestCode, int[] grantResults) {\",\n                     \"    switch (requestCode) {\",\n                     \"      case REQUEST_SYSTEMALERTWINDOW:\",\n-                    \"      if (!PermissionUtils.hasSelfPermissions(target, PERMISSION_SYSTEMALERTWINDOW)) {\",\n-                    \"        target.systemAlertWindowOnPermissionDenied();\",\n-                    \"        return;\",\n-                    \"      }\",\n                     \"      if (Settings.canDrawOverlays(target)) {\",\n                     \"        target.systemAlertWindow();\",\n                     \"      } else {\",",
      "parent_sha": "5f66a68944b785c83f7f67642dbc7776010e9bf9"
    }
  },
  {
    "oid": "21f38ef0e624eb66f77f39a5b3eb305ad1aaed63",
    "message": "Modify to cache target sdk version.",
    "date": "2016-02-14T18:50:27Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/21f38ef0e624eb66f77f39a5b3eb305ad1aaed63",
    "details": {
      "sha": "a59e37a2b38351f97039391e0f32878241266acc",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/21f38ef0e624eb66f77f39a5b3eb305ad1aaed63/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/21f38ef0e624eb66f77f39a5b3eb305ad1aaed63/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=21f38ef0e624eb66f77f39a5b3eb305ad1aaed63",
      "patch": "@@ -1,5 +1,6 @@\n package permissions.dispatcher;\n \n+import android.annotation.TargetApi;\n import android.app.Activity;\n import android.content.Context;\n import android.content.pm.PackageInfo;\n@@ -25,6 +26,8 @@ public final class PermissionUtils {\n         MIN_SDK_PERMISSIONS.put(\"android.permission.WRITE_CALL_LOG\", 16);\n     }\n \n+    private static Integer targetSdkVersion;\n+\n     private PermissionUtils() {\n     }\n \n@@ -90,19 +93,26 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St\n     }\n \n     /**\n-     * Get target sdk version from context.\n+     * Get target sdk version.\n      *\n      * @param context context\n      * @return target sdk version\n      */\n-    public static int getTargetSdkVersion(Context context) {\n+    @TargetApi(Build.VERSION_CODES.DONUT)\n+    public static synchronized int getTargetSdkVersion(Context context) {\n+        if (targetSdkVersion != null) {\n+            return targetSdkVersion;\n+        }\n         try {\n             PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n-            return packageInfo.applicationInfo.targetSdkVersion;\n+            targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n         }\n         catch (PackageManager.NameNotFoundException ignored) {\n         }\n-        return -1;\n+        if (targetSdkVersion == null) {\n+            return -1;\n+        }\n+        return targetSdkVersion;\n     }\n \n }",
      "parent_sha": "a8a38b7a3c5a47e3bd35ad0506422e5c291ea503"
    }
  },
  {
    "oid": "d20242f45647d45c8f1745c4ea122c5488c11dd4",
    "message": "Fix tiny stuff.",
    "date": "2016-02-14T23:18:15Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/d20242f45647d45c8f1745c4ea122c5488c11dd4",
    "details": {
      "sha": "a9bdcc90afdcc6f315d3c2a12135120dc7e00115",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/d20242f45647d45c8f1745c4ea122c5488c11dd4/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/d20242f45647d45c8f1745c4ea122c5488c11dd4/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=d20242f45647d45c8f1745c4ea122c5488c11dd4",
      "patch": "@@ -101,15 +101,15 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St\n      */\n     @TargetApi(Build.VERSION_CODES.DONUT)\n     public static int getTargetSdkVersion(Context context) {\n-        if (targetSdkVersion != -1) {\n-            // target sdk version is already set\n-            return targetSdkVersion;\n-        }\n-        synchronized (PermissionUtils.class) {\n-            try {\n-                PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n-                targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n-            } catch (PackageManager.NameNotFoundException ignored) {\n+        if (targetSdkVersion == -1) {\n+            synchronized (PermissionUtils.class) {\n+                if (targetSdkVersion == -1) {\n+                    try {\n+                        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n+                        targetSdkVersion = packageInfo.applicationInfo.targetSdkVersion;\n+                    } catch (PackageManager.NameNotFoundException ignored) {\n+                    }\n+                }\n             }\n         }\n         return targetSdkVersion;",
      "parent_sha": "608a8e45406202eb507efa45c161d3228b1eeb05"
    }
  },
  {
    "oid": "e1a1a591c742c1aff8860b1790504db7593ed6ad",
    "message": "Using Manifest.permission constants on PermissionUtils\n\nfix hotchemi/PermissionsDispatcher#51\n\npermissionExists is necessary because of an architectural decision in\nthe Android framework, where non-existent permissions are never granted by design",
    "date": "2015-12-14T12:22:17Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/e1a1a591c742c1aff8860b1790504db7593ed6ad",
    "details": {
      "sha": "3c95b182624a24fef2168c864ff1a17dfd928b3f",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/e1a1a591c742c1aff8860b1790504db7593ed6ad/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/e1a1a591c742c1aff8860b1790504db7593ed6ad/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=e1a1a591c742c1aff8860b1790504db7593ed6ad",
      "patch": "@@ -26,12 +26,12 @@ public final class PermissionUtils {\n     private static final SimpleArrayMap<String, Integer> MIN_SDK_PERMISSIONS;\n     static {\n         MIN_SDK_PERMISSIONS = new SimpleArrayMap<>(6);\n-        MIN_SDK_PERMISSIONS.put(\"com.android.voicemail.permission.ADD_VOICEMAIL\", ICE_CREAM_SANDWICH);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.BODY_SENSORS\", KITKAT_WATCH);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.READ_CALL_LOG\", JELLY_BEAN);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.READ_EXTERNAL_STORAGE\", JELLY_BEAN);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.USE_SIP\", GINGERBREAD);\n-        MIN_SDK_PERMISSIONS.put(\"android.permission.WRITE_CALL_LOG\", JELLY_BEAN);\n+        MIN_SDK_PERMISSIONS.put(Manifest.permission.ADD_VOICEMAIL, ICE_CREAM_SANDWICH);\n+        MIN_SDK_PERMISSIONS.put(Manifest.permission.BODY_SENSORS, KITKAT_WATCH);\n+        MIN_SDK_PERMISSIONS.put(Manifest.permission.READ_CALL_LOG, JELLY_BEAN);\n+        MIN_SDK_PERMISSIONS.put(Manifest.permission.READ_EXTERNAL_STORAGE, JELLY_BEAN);\n+        MIN_SDK_PERMISSIONS.put(Manifest.permission.USE_SIP, GINGERBREAD);\n+        MIN_SDK_PERMISSIONS.put(Manifest.permission.WRITE_CALL_LOG, JELLY_BEAN);\n     }\n \n     private PermissionUtils() {",
      "parent_sha": "97704d7a76d2eba3a14813f1c0e6779bddc4e6ce"
    }
  },
  {
    "oid": "3c7900f28ce67b2ec6dfe23496a5ebe705cc0eeb",
    "message": "Added convenience method to redirect a user to the app's Settings to PermissionUtils",
    "date": "2015-12-03T20:58:39Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/3c7900f28ce67b2ec6dfe23496a5ebe705cc0eeb",
    "details": {
      "sha": "0c4a2f2fc719eb0ea52f109c5750606e6abe03aa",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 37,
      "deletions": 1,
      "changes": 38,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/3c7900f28ce67b2ec6dfe23496a5ebe705cc0eeb/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/3c7900f28ce67b2ec6dfe23496a5ebe705cc0eeb/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=3c7900f28ce67b2ec6dfe23496a5ebe705cc0eeb",
      "patch": "@@ -2,9 +2,16 @@\n \n import android.app.Activity;\n import android.content.Context;\n+import android.content.Intent;\n import android.content.pm.PackageManager;\n+import android.net.Uri;\n+import android.os.Build;\n+import android.provider.Settings;\n+import android.support.annotation.Nullable;\n import android.support.v4.app.ActivityCompat;\n \n+import static android.os.Build.VERSION_CODES.FROYO;\n+import static android.os.Build.VERSION_CODES.GINGERBREAD;\n import static android.support.v4.content.PermissionChecker.checkSelfPermission;\n \n public final class PermissionUtils {\n@@ -30,7 +37,7 @@ public static boolean verifyPermissions(int... grantResults) {\n     /**\n      * Returns true if the Activity or Fragment has access to all given permissions.\n      *\n-     * @param context context\n+     * @param context     context\n      * @param permissions permission list\n      * @return returns true if the Activity or Fragment has access to all given permissions.\n      */\n@@ -58,4 +65,33 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St\n         }\n         return false;\n     }\n+\n+    /**\n+     * Creates an {@link Intent} that redirects the user to the app's settings page.\n+     *\n+     * @param context Context used to access the app's package name\n+     * @return An intent that, when used to {@link Activity#startActivity(Intent)}, will open the running app's Settings page.\n+     * If no matching Activity could be found for the device's settings, this method returns null.\n+     */\n+    public static @Nullable Intent createAppSettingsIntent(Context context) {\n+        Intent intent;\n+        String packageName = context.getPackageName();\n+        if (Build.VERSION.SDK_INT >= GINGERBREAD) {\n+            // Utilize the dedicated Settings Action on API 9+\n+            intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n+            Uri uri = Uri.fromParts(\"package\", packageName, null);\n+            intent.setData(uri);\n+\n+        } else {\n+            // Compatibility implementation using a View intent and the native Settings app\n+            intent = new Intent(Intent.ACTION_VIEW);\n+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+            intent.setClassName(\"com.android.settings\", \"com.android.settings.InstalledAppDetails\");\n+            String extraKey = Build.VERSION.SDK_INT == FROYO ? \"pkg\" : \"com.android.settings.ApplicationPkgName\";\n+            intent.putExtra(extraKey, packageName);\n+        }\n+\n+        // If the intent can be used to resolve an Activity, return that intent. Otherwise, return null\n+        return context.getPackageManager().resolveActivity(intent, 0) != null ? intent : null;\n+    }\n }",
      "parent_sha": "247df56e1c516975b5c4e7c06b69e6c22f6275bc"
    }
  },
  {
    "oid": "9557bb234e5dc41fb97be2dcf6ed8d6e04831ea9",
    "message": "Fix sample.",
    "date": "2015-08-15T21:59:33Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/9557bb234e5dc41fb97be2dcf6ed8d6e04831ea9",
    "details": {
      "sha": "0abd802819060b63fc3fcc8119c7bf9f4e9477a9",
      "filename": "permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/MainActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/9557bb234e5dc41fb97be2dcf6ed8d6e04831ea9/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/9557bb234e5dc41fb97be2dcf6ed8d6e04831ea9/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/permissionsdispatcher-sample%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2Fsample%2FMainActivity.java?ref=9557bb234e5dc41fb97be2dcf6ed8d6e04831ea9",
      "patch": "@@ -53,7 +53,7 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions, in\n     void showCamera() {\n         getSupportFragmentManager().beginTransaction()\n                 .replace(R.id.sample_content_fragment, CameraPreviewFragment.newInstance())\n-                .addToBackStack(\"contacts\")\n+                .addToBackStack(\"camera\")\n                 .commitAllowingStateLoss();\n     }\n ",
      "parent_sha": "b6991eb58a4c66524c3eccc2f8103deaa1423935"
    }
  },
  {
    "oid": "ef3aa3582480e3602ab7d9778d08b6349af938a8",
    "message": "Replace member variables with constants",
    "date": "2016-02-26T16:14:20Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/ef3aa3582480e3602ab7d9778d08b6349af938a8",
    "details": {
      "sha": "83bc481ae5e6b175353dd2a66890fae8436e6c71",
      "filename": "lint/src/main/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetector.java",
      "status": "modified",
      "additions": 12,
      "deletions": 13,
      "changes": 25,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/ef3aa3582480e3602ab7d9778d08b6349af938a8/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/ef3aa3582480e3602ab7d9778d08b6349af938a8/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/lint%2Fsrc%2Fmain%2Fjava%2Fpermissions%2Fdispatcher%2FNoCorrespondingNeedsPermissionDetector.java?ref=ef3aa3582480e3602ab7d9778d08b6349af938a8",
      "patch": "@@ -29,30 +29,29 @@ public class NoCorrespondingNeedsPermissionDetector extends Detector implements\n             Severity.ERROR,\n             new Implementation(NoCorrespondingNeedsPermissionDetector.class, EnumSet.of(Scope.JAVA_FILE)));\n \n+    static final Set<String> NEEDS_PERMISSION_NAME = new HashSet<String>() {{\n+        add(\"NeedsPermission\");\n+        add(\"permissions.dispatcher.NeedsPermission\");\n+    }};\n+\n+    static final Set<String> ON_SHOW_RATIONALE_NAME = new HashSet<String>() {{\n+        add(\"OnShowRationale\");\n+        add(\"permissions.dispatcher.OnShowRationale\");\n+    }};\n+\n     @Override\n     public AstVisitor createJavaVisitor(JavaContext context) {\n         return new AnnotationChecker(context);\n     }\n \n     static class AnnotationChecker extends ForwardingAstVisitor {\n         private final JavaContext context;\n-        private Set<String> needsPermissionName;\n-        private Set<String> onShowRationaleName;\n-\n         private Set<Annotation> needsPermissionAnnotations;\n         private Set<Annotation> onShowRationaleAnnotations;\n \n         private AnnotationChecker(JavaContext context) {\n             this.context = context;\n \n-            needsPermissionName = new HashSet<>();\n-            needsPermissionName.add(\"NeedsPermission\");\n-            needsPermissionName.add(\"permissions.dispatcher.NeedsPermission\");\n-\n-            onShowRationaleName = new HashSet<>();\n-            onShowRationaleName.add(\"OnShowRationale\");\n-            onShowRationaleName.add(\"permissions.dispatcher.OnShowRationale\");\n-\n             needsPermissionAnnotations = new HashSet<>();\n             onShowRationaleAnnotations = new HashSet<>();\n         }\n@@ -65,9 +64,9 @@ public boolean visitAnnotation(Annotation node) {\n \n             // Let's store NeedsPermission and OnShowRationale\n             String type = node.astAnnotationTypeReference().getTypeName();\n-            if (needsPermissionName.contains(type)) {\n+            if (NEEDS_PERMISSION_NAME.contains(type)) {\n                 needsPermissionAnnotations.add(node);\n-            } else if (onShowRationaleName.contains(type)) {\n+            } else if (ON_SHOW_RATIONALE_NAME.contains(type)) {\n                 onShowRationaleAnnotations.add(node);\n             }\n             return super.visitAnnotation(node);",
      "parent_sha": "fc02449ac6f376f39567d7a1d65072304c7b1ca6"
    }
  },
  {
    "oid": "9c647cfb98009cd84308dd3c9641305d80092c16",
    "message": "Initial commit.",
    "date": "2017-07-16T08:31:22Z",
    "url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/commit/9c647cfb98009cd84308dd3c9641305d80092c16",
    "details": {
      "sha": "b6b3e9565bc9f269c3e0bce22bdb85f78675d5e5",
      "filename": "library/src/main/android/permissions/dispatcher/PermissionUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/blob/9c647cfb98009cd84308dd3c9641305d80092c16/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "raw_url": "https://github.com/permissions-dispatcher/PermissionsDispatcher/raw/9c647cfb98009cd84308dd3c9641305d80092c16/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java",
      "contents_url": "https://api.github.com/repos/permissions-dispatcher/PermissionsDispatcher/contents/library%2Fsrc%2Fmain%2Fandroid%2Fpermissions%2Fdispatcher%2FPermissionUtils.java?ref=9c647cfb98009cd84308dd3c9641305d80092c16",
      "patch": "@@ -72,7 +72,7 @@ private static boolean permissionExists(String permission) {\n      * @param permissions permission list\n      * @return returns true if the Activity or Fragment has access to all given permissions.\n      */\n-    public static boolean hasSelfPermissions(Context context, String... permissions) {\n+    public static boolean hasSelfPermissions(Context context, String[] permissions) {\n         for (String permission : permissions) {\n             if (permissionExists(permission) && !hasSelfPermission(context, permission)) {\n                 return false;\n@@ -120,7 +120,7 @@ private static boolean hasSelfPermissionForXiaomi(Context context, String permis\n      * @param permissions permission list\n      * @return returns true if one of the permission is needed to show rationale.\n      */\n-    public static boolean shouldShowRequestPermissionRationale(Activity activity, String... permissions) {\n+    public static boolean shouldShowRequestPermissionRationale(Activity activity, String[] permissions) {\n         for (String permission : permissions) {\n             if (ActivityCompat.shouldShowRequestPermissionRationale(activity, permission)) {\n                 return true;",
      "parent_sha": "8f627097b059f12c6d0fb4af436bd0796d741555"
    }
  }
]