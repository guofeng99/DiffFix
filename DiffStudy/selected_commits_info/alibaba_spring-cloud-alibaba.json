[
  {
    "oid": "d96b0759f4472f491ad3e3f3927c9131495ac378",
    "message": "[enhance issue #1492 ]Improved nacos configuration parsing, based on PropertySourceLoader---check",
    "date": "2020-06-19T01:22:01Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/d96b0759f4472f491ad3e3f3927c9131495ac378",
    "details": {
      "sha": "7dcdff659a6408aaacc03574528bc0979c448ee1",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/test/java/com/alibaba/cloud/nacos/NacosConfigurationNoSuffixTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/d96b0759f4472f491ad3e3f3927c9131495ac378/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigurationNoSuffixTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/d96b0759f4472f491ad3e3f3927c9131495ac378/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigurationNoSuffixTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigurationNoSuffixTest.java?ref=d96b0759f4472f491ad3e3f3927c9131495ac378",
      "patch": "@@ -51,7 +51,7 @@\n \n @RunWith(PowerMockRunner.class)\n @PowerMockIgnore({ \"javax.management.*\", \"javax.xml.parsers.*\",\n-\t\t\"com.sun.org.apache.xerces.internal.jaxp.*\" })\n+\t\t\"com.sun.org.apache.xerces.internal.jaxp.*\", \"org.w3c.dom.*\" })\n @PowerMockRunnerDelegate(SpringRunner.class)\n @PrepareForTest({ NacosConfigService.class })\n @SpringBootTest(classes = NacosConfigurationNoSuffixTest.TestConfig.class, properties = {",
      "parent_sha": "5135916175db5e7658ee1249a193bbc533463f84"
    }
  },
  {
    "oid": "fe55285e9c9fef5e80c2d6e827e92ef5545e7546",
    "message": "Replace native method invoke with `methodInvoke`",
    "date": "2019-08-20T12:53:57Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/fe55285e9c9fef5e80c2d6e827e92ef5545e7546",
    "details": {
      "sha": "7b3702644a3c2df6b8bfb8b9f55c2acadd094a5b",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelProtectInterceptor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 16,
      "changes": 22,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/fe55285e9c9fef5e80c2d6e827e92ef5545e7546/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fcustom%2FSentinelProtectInterceptor.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/fe55285e9c9fef5e80c2d6e827e92ef5545e7546/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fcustom%2FSentinelProtectInterceptor.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fcustom%2FSentinelProtectInterceptor.java?ref=fe55285e9c9fef5e80c2d6e827e92ef5545e7546",
      "patch": "@@ -69,19 +69,9 @@ public ClientHttpResponse intercept(HttpRequest request, byte[] body,\n \t\t\t\tsentinelRestTemplate.urlCleanerClass(),\n \t\t\t\tsentinelRestTemplate.urlCleaner());\n \t\tif (urlCleanerMethod != null) {\n-\t\t\ttry {\n-\t\t\t\thostWithPathResource = (String) urlCleanerMethod.invoke(null,\n-\t\t\t\t\t\thostWithPathResource);\n-\t\t\t}\n-\t\t\tcatch (IllegalAccessException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t}\n-\t\t\tcatch (InvocationTargetException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t}\n+\t\t\thostWithPathResource = (String) methodInvoke(urlCleanerMethod,\n+\t\t\t\t\thostWithPathResource);\n \t\t}\n-\t\tSystem.out.println(\"hostWithPathResource: \" + hostWithPathResource);\n-\t\tSystem.out.println(\"entryWithPath: \" + entryWithPath);\n \n \t\tEntry hostEntry = null, hostWithPathEntry = null;\n \t\tClientHttpResponse response = null;\n@@ -123,7 +113,7 @@ private ClientHttpResponse handleBlockException(HttpRequest request, byte[] body\n \t\t\tMethod fallbackMethod = extractFallbackMethod(sentinelRestTemplate.fallback(),\n \t\t\t\t\tsentinelRestTemplate.fallbackClass());\n \t\t\tif (fallbackMethod != null) {\n-\t\t\t\treturn methodInvoke(fallbackMethod, args);\n+\t\t\t\treturn (ClientHttpResponse) methodInvoke(fallbackMethod, args);\n \t\t\t}\n \t\t\telse {\n \t\t\t\treturn new SentinelClientHttpResponse();\n@@ -134,16 +124,16 @@ private ClientHttpResponse handleBlockException(HttpRequest request, byte[] body\n \t\t\t\tsentinelRestTemplate.blockHandler(),\n \t\t\t\tsentinelRestTemplate.blockHandlerClass());\n \t\tif (blockHandler != null) {\n-\t\t\treturn methodInvoke(blockHandler, args);\n+\t\t\treturn (ClientHttpResponse) methodInvoke(blockHandler, args);\n \t\t}\n \t\telse {\n \t\t\treturn new SentinelClientHttpResponse();\n \t\t}\n \t}\n \n-\tprivate ClientHttpResponse methodInvoke(Method method, Object... args) {\n+\tprivate Object methodInvoke(Method method, Object... args) {\n \t\ttry {\n-\t\t\treturn (ClientHttpResponse) method.invoke(null, args);\n+\t\t\treturn method.invoke(null, args);\n \t\t}\n \t\tcatch (IllegalAccessException e) {\n \t\t\tthrow new RuntimeException(e);",
      "parent_sha": "d9982c61434b2b5adc0467675c67572d64932fe6"
    }
  },
  {
    "oid": "3445ab0c63974d2c27d79a75c6c059cb23fd6f37",
    "message": "fix Optional.of() throw NPE\n\nfix Optional.of() throw NPE",
    "date": "2019-08-27T03:09:56Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/3445ab0c63974d2c27d79a75c6c059cb23fd6f37",
    "details": {
      "sha": "494a003053f7aa0b4bc58fd2674f2a7c3f170370",
      "filename": "spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/repository/DubboServiceMetadataRepository.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/3445ab0c63974d2c27d79a75c6c059cb23fd6f37/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fmetadata%2Frepository%2FDubboServiceMetadataRepository.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/3445ab0c63974d2c27d79a75c6c059cb23fd6f37/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fmetadata%2Frepository%2FDubboServiceMetadataRepository.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fmetadata%2Frepository%2FDubboServiceMetadataRepository.java?ref=3445ab0c63974d2c27d79a75c6c059cb23fd6f37",
      "patch": "@@ -616,7 +616,7 @@ private void excludeSelf(Set<String> subscribedServices) {\n \t}\n \n \tprotected void initSubscribedDubboMetadataService(String serviceName) {\n-\t\tOptional.of(loadBalancerClient.choose(serviceName))\n+\t\tOptional.ofNullable(loadBalancerClient.choose(serviceName))\n \t\t\t\t.map(this::getDubboMetadataServiceURLs)\n \t\t\t\t.ifPresent(dubboMetadataServiceURLs -> {\n \t\t\t\t\tdubboMetadataServiceURLs.forEach(dubboMetadataServiceURL -> {",
      "parent_sha": "cb5a9b940cf4d9e8ba634b0aa3a735c43eb543d0"
    }
  },
  {
    "oid": "5fd76cde30cce988ac8f1d0b594815e7b3e60f76",
    "message": "Fix wrong class name",
    "date": "2022-05-12T15:23:51Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/5fd76cde30cce988ac8f1d0b594815e7b3e60f76",
    "details": {
      "sha": "a0a9266c38dd5bb5448e2660ea01e6a7d13eff13",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/autoconfigurate/RocketMQBinderAutoConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/5fd76cde30cce988ac8f1d0b594815e7b3e60f76/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fautoconfigurate%2FRocketMQBinderAutoConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/5fd76cde30cce988ac8f1d0b594815e7b3e60f76/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fautoconfigurate%2FRocketMQBinderAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fautoconfigurate%2FRocketMQBinderAutoConfiguration.java?ref=5fd76cde30cce988ac8f1d0b594815e7b3e60f76",
      "patch": "@@ -35,6 +35,7 @@\n  *\n  * @author Timur Valiev\n  * @author <a href=\"mailto:fangjian0423@gmail.com\">Jim</a>\n+ * @author freeman\n  */\n @Configuration(proxyBeanMethods = false)\n @EnableConfigurationProperties({ RocketMQExtendedBindingProperties.class,\n@@ -62,7 +63,7 @@ public RocketMQMessageChannelBinder rocketMQMessageChannelBinder(\n \t@Configuration(proxyBeanMethods = false)\n \t@ConditionalOnClass(HealthIndicator.class)\n \t@ConditionalOnEnabledHealthIndicator(\"rocketmq\")\n-\tstatic class KafkaBinderHealthIndicatorConfiguration {\n+\tstatic class RocketMQBinderHealthIndicatorConfiguration {\n \n \t\t@Bean\n \t\tpublic RocketMQBinderHealthIndicator rocketMQBinderHealthIndicator() {",
      "parent_sha": "db3f4a8de894bbcd6a317d0f2937be7b67d20d03"
    }
  },
  {
    "oid": "2a8f6e98c07c73d9a57f076970f09d1b96f30e03",
    "message": "fix bug about sentinel commercialization",
    "date": "2018-12-19T15:43:00Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/2a8f6e98c07c73d9a57f076970f09d1b96f30e03",
    "details": {
      "sha": "6a5feca407228304e1923a187921ca2f4781ee14",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelDataSourceHandler.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/2a8f6e98c07c73d9a57f076970f09d1b96f30e03/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/2a8f6e98c07c73d9a57f076970f09d1b96f30e03/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java?ref=2a8f6e98c07c73d9a57f076970f09d1b96f30e03",
      "patch": "@@ -30,6 +30,7 @@\n import org.springframework.util.ReflectionUtils;\n import org.springframework.util.StringUtils;\n \n+import com.alibaba.csp.sentinel.datasource.AbstractDataSource;\n import com.alibaba.csp.sentinel.datasource.ReadableDataSource;\n import com.alibaba.csp.sentinel.property.SentinelProperty;\n import com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;\n@@ -253,7 +254,18 @@ else if (CONVERTERCLASS_FIELD.equals(propertyName)) {\n \n \t\tbeanFactory.registerBeanDefinition(dataSourceName, builder.getBeanDefinition());\n \t\t// init in Spring\n-\t\tbeanFactory.getBean(dataSourceName);\n+\t\tAbstractDataSource newDataSource = (AbstractDataSource) beanFactory\n+\t\t\t\t.getBean(dataSourceName);\n+\t\t// commercialization\n+\t\tif (!StringUtils.isEmpty(System.getProperties()\n+\t\t\t\t.getProperty(SentinelDataSourceConstants.NACOS_DATASOURCE_ENDPOINT))) {\n+\t\t\tif (dataSourceName.contains(SentinelConstants.FLOW_DATASOURCE_NAME)) {\n+\t\t\t\tFlowRuleManager.register2Property(newDataSource.getProperty());\n+\t\t\t}\n+\t\t\telse if (dataSourceName.contains(SentinelConstants.DEGRADE_DATASOURCE_NAME)) {\n+\t\t\t\tDegradeRuleManager.register2Property(newDataSource.getProperty());\n+\t\t\t}\n+\t\t}\n \t\tdataSourceBeanNameList.add(dataSourceName);\n \t}\n ",
      "parent_sha": "aaa68a04d5facbc8689c29c288cd4002ba3ab73d"
    }
  },
  {
    "oid": "4d697bb2948bb00a7453f7888084774882a72753",
    "message": "fix #2157",
    "date": "2021-07-10T10:13:32Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/4d697bb2948bb00a7453f7888084774882a72753",
    "details": {
      "sha": "d261080050abadac8e00f97a495a6957a6530f34",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/DubboServiceRegistrationAutoConfiguration.java",
      "status": "modified",
      "additions": 36,
      "deletions": 8,
      "changes": 44,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/4d697bb2948bb00a7453f7888084774882a72753/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboServiceRegistrationAutoConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/4d697bb2948bb00a7453f7888084774882a72753/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboServiceRegistrationAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboServiceRegistrationAutoConfiguration.java?ref=4d697bb2948bb00a7453f7888084774882a72753",
      "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -50,6 +51,7 @@\n import org.springframework.cloud.client.ServiceInstance;\n import org.springframework.cloud.client.serviceregistry.Registration;\n import org.springframework.cloud.client.serviceregistry.ServiceRegistry;\n+import org.springframework.cloud.consul.discovery.ConsulDiscoveryProperties;\n import org.springframework.cloud.consul.serviceregistry.ConsulRegistration;\n import org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean;\n import org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration;\n@@ -61,6 +63,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.event.EventListener;\n+import org.springframework.util.StringUtils;\n \n import static com.alibaba.cloud.dubbo.autoconfigure.DubboServiceRegistrationAutoConfiguration.CONSUL_AUTO_SERVICE_AUTO_CONFIGURATION_CLASS_NAME;\n import static com.alibaba.cloud.dubbo.autoconfigure.DubboServiceRegistrationAutoConfiguration.EUREKA_CLIENT_AUTO_CONFIGURATION_CLASS_NAME;\n@@ -77,12 +80,11 @@\n @Configuration(proxyBeanMethods = false)\n @Import({ DubboServiceRegistrationEventPublishingAspect.class,\n \t\tDubboBootstrapStartCommandLineRunner.class })\n-@ConditionalOnProperty(value = \"spring.cloud.service-registry.auto-registration.enabled\",\n-\t\tmatchIfMissing = true)\n+@ConditionalOnProperty(value = \"spring.cloud.service-registry.auto-registration.enabled\", matchIfMissing = true)\n @AutoConfigureAfter(name = { EUREKA_CLIENT_AUTO_CONFIGURATION_CLASS_NAME,\n \t\tCONSUL_AUTO_SERVICE_AUTO_CONFIGURATION_CLASS_NAME,\n-\t\t\"org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration\" },\n-\t\tvalue = { DubboMetadataAutoConfiguration.class })\n+\t\t\"org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration\" }, value = {\n+\t\t\t\tDubboMetadataAutoConfiguration.class })\n public class DubboServiceRegistrationAutoConfiguration {\n \n \t/**\n@@ -260,6 +262,9 @@ public void afterSingletonsInstantiated() {\n \t@AutoConfigureOrder\n \tclass ConsulConfiguration {\n \n+\t\t@Autowired\n+\t\tprivate ConsulDiscoveryProperties consulDiscoveryProperties;\n+\n \t\t@EventListener(DubboBootstrapStartedEvent.class)\n \t\tpublic void attachURLsIntoMetadataBeforeReRegist(\n \t\t\t\tDubboBootstrapStartedEvent event) {\n@@ -284,18 +289,41 @@ public void attachURLsIntoMetadataBeforeReRegist(\n \t\t\t\t\t}));\n \t\t}\n \n+\t\t@EventListener(ServiceInstancePreRegisteredEvent.class)\n+\t\tpublic void onServiceInstancePreRegistered(\n+\t\t\t\tServiceInstancePreRegisteredEvent event) {\n+\t\t\tRegistration registration = event.getSource();\n+\t\t\tattachURLsIntoMetadata((ConsulRegistration) registration);\n+\t\t}\n+\n \t\tprivate void attachURLsIntoMetadata(ConsulRegistration consulRegistration) {\n-\t\t\tNewService newService = consulRegistration.getService();\n \t\t\tMap<String, String> serviceMetadata = dubboServiceMetadataRepository\n \t\t\t\t\t.getDubboMetadataServiceMetadata();\n-\t\t\tif (!isEmpty(serviceMetadata)) {\n-\t\t\t\tList<String> tags = newService.getTags();\n+\t\t\tif (isEmpty(serviceMetadata)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tNewService newService = consulRegistration.getService();\n+\t\t\tif (consulDiscoveryProperties.isTagsAsMetadata()) {\n \t\t\t\tfor (Map.Entry<String, String> entry : serviceMetadata.entrySet()) {\n-\t\t\t\t\ttags.add(entry.getKey() + \"=\" + entry.getValue());\n+\t\t\t\t\tattAsTag(newService.getTags(), entry.getKey(), entry.getValue());\n \t\t\t\t}\n \t\t\t}\n+\t\t\telse {\n+\t\t\t\tnewService.getMeta().putAll(serviceMetadata);\n+\t\t\t}\n \t\t}\n \n+\t\tprivate void attAsTag(List<String> tags, String key, String value) {\n+\t\t\tIterator<String> iter = tags.iterator();\n+\t\t\twhile (iter.hasNext()) {\n+\t\t\t\tString tag = iter.next();\n+\t\t\t\tString[] tmp = tag.split(\"=\");\n+\t\t\t\tif (StringUtils.pathEquals(tmp[0], key)) {\n+\t\t\t\t\titer.remove();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\ttags.add(key + \"=\" + value);\n+\t\t}\n \t}\n \n }",
      "parent_sha": "350f87c79fcea07c0f0ed392ea11c2537f53a312"
    }
  },
  {
    "oid": "6495f4ca42e162c5de02de7220d357707b726040",
    "message": "Add after the comment.",
    "date": "2019-08-06T08:23:14Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/6495f4ca42e162c5de02de7220d357707b726040",
    "details": {
      "sha": "d19dbb8869693384010b72daca6848c09a770683",
      "filename": "spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/6495f4ca42e162c5de02de7220d357707b726040/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/6495f4ca42e162c5de02de7220d357707b726040/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java?ref=6495f4ca42e162c5de02de7220d357707b726040",
      "patch": "@@ -86,22 +86,22 @@ public class NacosConfigProperties {\n \tprivate int timeout = 3000;\n \n \t/**\n-\t* nacos maximum number of tolerable server reconnection errors\n+\t* nacos maximum number of tolerable server reconnection errors.\n \t*/\n \tprivate String maxRetry;\n \n \t/**\n-\t* nacos get config long poll timeout\n+\t* nacos get config long poll timeout.\n \t*/\n \tprivate String configLongPollTimeout;\n \n \t/**\n-\t* nacos get config failure retry time\n+\t* nacos get config failure retry time.\n \t*/\n \tprivate String configRetryTime;\n \n \t/**\n-\t* nacos enable add a listener when the configuration is obtained\n+\t* nacos enable add a listener when the configuration is obtained.\n \t*/\n \tprivate boolean enableRemoteSyncConfig = false;\n ",
      "parent_sha": "a859bf44eef313488daab16146ddedb2e92b2cd0"
    }
  },
  {
    "oid": "2a3ff1725a1a466daf913e94de1d9f07af9f324d",
    "message": "ignore test case",
    "date": "2019-04-16T12:07:32Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/2a3ff1725a1a466daf913e94de1d9f07af9f324d",
    "details": {
      "sha": "97f9acbe2298fb9fc71e3366608d16ca1cf294cb",
      "filename": "spring-cloud-alibaba-nacos-config/src/test/java/org/springframework/cloud/alibaba/nacos/NacosConfigurationTests.java",
      "status": "modified",
      "additions": 254,
      "deletions": 254,
      "changes": 508,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/2a3ff1725a1a466daf913e94de1d9f07af9f324d/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosConfigurationTests.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/2a3ff1725a1a466daf913e94de1d9f07af9f324d/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosConfigurationTests.java?ref=2a3ff1725a1a466daf913e94de1d9f07af9f324d",
      "patch": "@@ -1,254 +1,254 @@\n-/*\n- * Copyright (C) 2018 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.alibaba.nacos;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.NONE;\n-\n-import java.lang.reflect.InvocationHandler;\n-import java.lang.reflect.Method;\n-import java.util.Map;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.api.support.MethodProxy;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.cloud.alibaba.nacos.client.NacosPropertySourceLocator;\n-import org.springframework.cloud.alibaba.nacos.endpoint.NacosConfigEndpoint;\n-import org.springframework.cloud.alibaba.nacos.endpoint.NacosConfigEndpointAutoConfiguration;\n-import org.springframework.cloud.alibaba.nacos.refresh.NacosRefreshHistory;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.env.Environment;\n-import org.springframework.test.context.junit4.SpringRunner;\n-\n-import com.alibaba.nacos.client.config.NacosConfigService;\n-\n-/**\n- * @author xiaojing\n- */\n-\n-@RunWith(PowerMockRunner.class)\n-@PowerMockIgnore(\"javax.management.*\")\n-@PowerMockRunnerDelegate(SpringRunner.class)\n-@PrepareForTest({ NacosConfigService.class })\n-@SpringBootTest(classes = NacosConfigurationTests.TestConfig.class, properties = {\n-\t\t\"spring.application.name=myTestService1\", \"spring.profiles.active=dev,test\",\n-\t\t\"spring.cloud.nacos.config.server-addr=127.0.0.1:8848\",\n-\t\t\"spring.cloud.nacos.config.endpoint=test-endpoint\",\n-\t\t\"spring.cloud.nacos.config.namespace=test-namespace\",\n-\t\t\"spring.cloud.nacos.config.encode=utf-8\",\n-\t\t\"spring.cloud.nacos.config.timeout=1000\",\n-\t\t\"spring.cloud.nacos.config.group=test-group\",\n-\t\t\"spring.cloud.nacos.config.name=test-name\",\n-\t\t\"spring.cloud.nacos.config.cluster-name=test-cluster\",\n-\t\t\"spring.cloud.nacos.config.file-extension=properties\",\n-\t\t\"spring.cloud.nacos.config.contextPath=test-contextpath\",\n-\n-\t\t\"spring.cloud.nacos.config.ext-config[0].data-id=ext-config-common01.properties\",\n-\n-\t\t\"spring.cloud.nacos.config.ext-config[1].data-id=ext-config-common02.properties\",\n-\t\t\"spring.cloud.nacos.config.ext-config[1].group=GLOBAL_GROUP\",\n-\n-\t\t\"spring.cloud.nacos.config.shared-dataids=common1.properties,common2.properties\",\n-\n-\t\t\"spring.cloud.nacos.config.accessKey=test-accessKey\",\n-\t\t\"spring.cloud.nacos.config.secretKey=test-secretKey\" }, webEnvironment = NONE)\n-public class NacosConfigurationTests {\n-\n-\tstatic {\n-\n-\t\ttry {\n-\t\t\t// when(any(ConfigService.class).getConfig(eq(\"test-name.properties\"),\n-\t\t\t// eq(\"test-group\"), any())).thenReturn(\"user.name=hello\");\n-\n-\t\t\tMethod method = PowerMockito.method(NacosConfigService.class, \"getConfig\",\n-\t\t\t\t\tString.class, String.class, long.class);\n-\t\t\tMethodProxy.proxy(method, new InvocationHandler() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args)\n-\t\t\t\t\t\tthrows Throwable {\n-\n-\t\t\t\t\tif (\"test-name.properties\".equals(args[0])\n-\t\t\t\t\t\t\t&& \"test-group\".equals(args[1])) {\n-\t\t\t\t\t\treturn \"user.name=hello\\nuser.age=12\";\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (\"test-name-dev.properties\".equals(args[0])\n-\t\t\t\t\t\t\t&& \"test-group\".equals(args[1])) {\n-\t\t\t\t\t\treturn \"user.name=dev\";\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (\"ext-config-common01.properties\".equals(args[0])\n-\t\t\t\t\t\t\t&& \"DEFAULT_GROUP\".equals(args[1])) {\n-\t\t\t\t\t\treturn \"test-ext-config1=config1\\ntest-ext-config2=config1\";\n-\t\t\t\t\t}\n-\t\t\t\t\tif (\"ext-config-common02.properties\".equals(args[0])\n-\t\t\t\t\t\t\t&& \"GLOBAL_GROUP\".equals(args[1])) {\n-\t\t\t\t\t\treturn \"test-ext-config2=config2\";\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (\"common1.properties\".equals(args[0])\n-\t\t\t\t\t\t\t&& \"DEFAULT_GROUP\".equals(args[1])) {\n-\t\t\t\t\t\treturn \"test-common1=common1\\ntest-common2=common1\";\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (\"common2.properties\".equals(args[0])\n-\t\t\t\t\t\t\t&& \"DEFAULT_GROUP\".equals(args[1])) {\n-\t\t\t\t\t\treturn \"test-common2=common2\";\n-\t\t\t\t\t}\n-\n-\t\t\t\t\treturn \"\";\n-\t\t\t\t}\n-\t\t\t});\n-\n-\t\t}\n-\t\tcatch (Exception ignore) {\n-\t\t\tignore.printStackTrace();\n-\n-\t\t}\n-\t}\n-\n-\t@Autowired\n-\tprivate Environment environment;\n-\n-\t@Autowired\n-\tprivate NacosPropertySourceLocator locator;\n-\n-\t@Autowired\n-\tprivate NacosConfigProperties properties;\n-\n-\t@Autowired\n-\tprivate NacosRefreshHistory refreshHistory;\n-\n-\t// @Test\n-\tpublic void contextLoads() throws Exception {\n-\n-\t\tassertNotNull(\"NacosPropertySourceLocator was not created\", locator);\n-\t\tassertNotNull(\"NacosConfigProperties was not created\", properties);\n-\n-\t\tcheckoutNacosConfigServerAddr();\n-\t\tcheckoutNacosConfigEndpoint();\n-\t\tcheckoutNacosConfigNamespace();\n-\t\tcheckoutNacosConfigClusterName();\n-\t\tcheckoutNacosConfigAccessKey();\n-\t\tcheckoutNacosConfigSecrectKey();\n-\t\tcheckoutNacosConfigName();\n-\t\tcheckoutNacosConfigGroup();\n-\t\tcheckoutNacosConfigContextPath();\n-\t\tcheckoutNacosConfigFileExtension();\n-\t\tcheckoutNacosConfigTimeout();\n-\t\tcheckoutNacosConfigEncode();\n-\n-\t\tcheckoutEndpoint();\n-\t\tcheckoutDataLoad();\n-\n-\t}\n-\n-\tprivate void checkoutNacosConfigServerAddr() {\n-\t\tassertEquals(\"NacosConfigProperties server address is wrong\", \"127.0.0.1:8848\",\n-\t\t\t\tproperties.getServerAddr());\n-\n-\t}\n-\n-\tprivate void checkoutNacosConfigEndpoint() {\n-\t\tassertEquals(\"NacosConfigProperties endpoint is wrong\", \"test-endpoint\",\n-\t\t\t\tproperties.getEndpoint());\n-\n-\t}\n-\n-\tprivate void checkoutNacosConfigNamespace() {\n-\t\tassertEquals(\"NacosConfigProperties namespace is wrong\", \"test-namespace\",\n-\t\t\t\tproperties.getNamespace());\n-\n-\t}\n-\n-\tprivate void checkoutNacosConfigClusterName() {\n-\t\tassertEquals(\"NacosConfigProperties' cluster is wrong\", \"test-cluster\",\n-\t\t\t\tproperties.getClusterName());\n-\t}\n-\n-\tprivate void checkoutNacosConfigAccessKey() {\n-\t\tassertEquals(\"NacosConfigProperties' is access key is wrong\", \"test-accessKey\",\n-\t\t\t\tproperties.getAccessKey());\n-\t}\n-\n-\tprivate void checkoutNacosConfigSecrectKey() {\n-\t\tassertEquals(\"NacosConfigProperties' is secret key is wrong\", \"test-secretKey\",\n-\t\t\t\tproperties.getSecretKey());\n-\t}\n-\n-\tprivate void checkoutNacosConfigContextPath() {\n-\t\tassertEquals(\"NacosConfigProperties' context path is wrong\", \"test-contextpath\",\n-\t\t\t\tproperties.getContextPath());\n-\t}\n-\n-\tprivate void checkoutNacosConfigName() {\n-\t\tassertEquals(\"NacosConfigProperties' name is wrong\", \"test-name\",\n-\t\t\t\tproperties.getName());\n-\t}\n-\n-\tprivate void checkoutNacosConfigGroup() {\n-\t\tassertEquals(\"NacosConfigProperties' group is wrong\", \"test-group\",\n-\t\t\t\tproperties.getGroup());\n-\t}\n-\n-\tprivate void checkoutNacosConfigFileExtension() {\n-\t\tassertEquals(\"NacosConfigProperties' file extension is wrong\", \"properties\",\n-\t\t\t\tproperties.getFileExtension());\n-\t}\n-\n-\tprivate void checkoutNacosConfigTimeout() {\n-\t\tassertEquals(\"NacosConfigProperties' timeout is wrong\", 1000,\n-\t\t\t\tproperties.getTimeout());\n-\t}\n-\n-\tprivate void checkoutNacosConfigEncode() {\n-\t\tassertEquals(\"NacosConfigProperties' encode is wrong\", \"utf-8\",\n-\t\t\t\tproperties.getEncode());\n-\t}\n-\n-\tprivate void checkoutDataLoad() {\n-\n-\t\tAssert.assertEquals(environment.getProperty(\"user.name\"), \"dev\");\n-\t\tAssert.assertEquals(environment.getProperty(\"user.age\"), \"12\");\n-\t}\n-\n-\tprivate void checkoutEndpoint() throws Exception {\n-\t\tNacosConfigEndpoint nacosConfigEndpoint = new NacosConfigEndpoint(properties,\n-\t\t\t\trefreshHistory);\n-\t\tMap<String, Object> map = nacosConfigEndpoint.invoke();\n-\t\tassertEquals(map.get(\"NacosConfigProperties\"), properties);\n-\t\tassertEquals(map.get(\"RefreshHistory\"), refreshHistory.getRecords());\n-\t}\n-\n-\t@Configuration\n-\t@EnableAutoConfiguration\n-\t@ImportAutoConfiguration({ NacosConfigEndpointAutoConfiguration.class,\n-\t\t\tNacosConfigAutoConfiguration.class, NacosConfigBootstrapConfiguration.class })\n-\tpublic static class TestConfig {\n-\t}\n-}\n+///*\n+// * Copyright (C) 2018 the original author or authors.\n+// *\n+// * Licensed under the Apache License, Version 2.0 (the \"License\");\n+// * you may not use this file except in compliance with the License.\n+// * You may obtain a copy of the License at\n+// *\n+// *      http://www.apache.org/licenses/LICENSE-2.0\n+// *\n+// * Unless required by applicable law or agreed to in writing, software\n+// * distributed under the License is distributed on an \"AS IS\" BASIS,\n+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// * See the License for the specific language governing permissions and\n+// * limitations under the License.\n+// */\n+//\n+//package org.springframework.cloud.alibaba.nacos;\n+//\n+//import static org.junit.Assert.assertEquals;\n+//import static org.junit.Assert.assertNotNull;\n+//import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.NONE;\n+//\n+//import java.lang.reflect.InvocationHandler;\n+//import java.lang.reflect.Method;\n+//import java.util.Map;\n+//\n+//import org.junit.Assert;\n+//import org.junit.Test;\n+//import org.junit.runner.RunWith;\n+//import org.powermock.api.mockito.PowerMockito;\n+//import org.powermock.api.support.MethodProxy;\n+//import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+//import org.powermock.core.classloader.annotations.PrepareForTest;\n+//import org.powermock.modules.junit4.PowerMockRunner;\n+//import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+//import org.springframework.beans.factory.annotation.Autowired;\n+//import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+//import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n+//import org.springframework.boot.test.context.SpringBootTest;\n+//import org.springframework.cloud.alibaba.nacos.client.NacosPropertySourceLocator;\n+//import org.springframework.cloud.alibaba.nacos.endpoint.NacosConfigEndpoint;\n+//import org.springframework.cloud.alibaba.nacos.endpoint.NacosConfigEndpointAutoConfiguration;\n+//import org.springframework.cloud.alibaba.nacos.refresh.NacosRefreshHistory;\n+//import org.springframework.context.annotation.Configuration;\n+//import org.springframework.core.env.Environment;\n+//import org.springframework.test.context.junit4.SpringRunner;\n+//\n+//import com.alibaba.nacos.client.config.NacosConfigService;\n+//\n+///**\n+// * @author xiaojing\n+// */\n+//\n+//@RunWith(PowerMockRunner.class)\n+//@PowerMockIgnore(\"javax.management.*\")\n+//@PowerMockRunnerDelegate(SpringRunner.class)\n+//@PrepareForTest({ NacosConfigService.class })\n+//@SpringBootTest(classes = NacosConfigurationTests.TestConfig.class, properties = {\n+//\t\t\"spring.application.name=myTestService1\", \"spring.profiles.active=dev,test\",\n+//\t\t\"spring.cloud.nacos.config.server-addr=127.0.0.1:8848\",\n+//\t\t\"spring.cloud.nacos.config.endpoint=test-endpoint\",\n+//\t\t\"spring.cloud.nacos.config.namespace=test-namespace\",\n+//\t\t\"spring.cloud.nacos.config.encode=utf-8\",\n+//\t\t\"spring.cloud.nacos.config.timeout=1000\",\n+//\t\t\"spring.cloud.nacos.config.group=test-group\",\n+//\t\t\"spring.cloud.nacos.config.name=test-name\",\n+//\t\t\"spring.cloud.nacos.config.cluster-name=test-cluster\",\n+//\t\t\"spring.cloud.nacos.config.file-extension=properties\",\n+//\t\t\"spring.cloud.nacos.config.contextPath=test-contextpath\",\n+//\n+//\t\t\"spring.cloud.nacos.config.ext-config[0].data-id=ext-config-common01.properties\",\n+//\n+//\t\t\"spring.cloud.nacos.config.ext-config[1].data-id=ext-config-common02.properties\",\n+//\t\t\"spring.cloud.nacos.config.ext-config[1].group=GLOBAL_GROUP\",\n+//\n+//\t\t\"spring.cloud.nacos.config.shared-dataids=common1.properties,common2.properties\",\n+//\n+//\t\t\"spring.cloud.nacos.config.accessKey=test-accessKey\",\n+//\t\t\"spring.cloud.nacos.config.secretKey=test-secretKey\" }, webEnvironment = NONE)\n+//public class NacosConfigurationTests {\n+//\n+//\tstatic {\n+//\n+//\t\ttry {\n+//\t\t\t// when(any(ConfigService.class).getConfig(eq(\"test-name.properties\"),\n+//\t\t\t// eq(\"test-group\"), any())).thenReturn(\"user.name=hello\");\n+//\n+//\t\t\tMethod method = PowerMockito.method(NacosConfigService.class, \"getConfig\",\n+//\t\t\t\t\tString.class, String.class, long.class);\n+//\t\t\tMethodProxy.proxy(method, new InvocationHandler() {\n+//\t\t\t\t@Override\n+//\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args)\n+//\t\t\t\t\t\tthrows Throwable {\n+//\n+//\t\t\t\t\tif (\"test-name.properties\".equals(args[0])\n+//\t\t\t\t\t\t\t&& \"test-group\".equals(args[1])) {\n+//\t\t\t\t\t\treturn \"user.name=hello\\nuser.age=12\";\n+//\t\t\t\t\t}\n+//\n+//\t\t\t\t\tif (\"test-name-dev.properties\".equals(args[0])\n+//\t\t\t\t\t\t\t&& \"test-group\".equals(args[1])) {\n+//\t\t\t\t\t\treturn \"user.name=dev\";\n+//\t\t\t\t\t}\n+//\n+//\t\t\t\t\tif (\"ext-config-common01.properties\".equals(args[0])\n+//\t\t\t\t\t\t\t&& \"DEFAULT_GROUP\".equals(args[1])) {\n+//\t\t\t\t\t\treturn \"test-ext-config1=config1\\ntest-ext-config2=config1\";\n+//\t\t\t\t\t}\n+//\t\t\t\t\tif (\"ext-config-common02.properties\".equals(args[0])\n+//\t\t\t\t\t\t\t&& \"GLOBAL_GROUP\".equals(args[1])) {\n+//\t\t\t\t\t\treturn \"test-ext-config2=config2\";\n+//\t\t\t\t\t}\n+//\n+//\t\t\t\t\tif (\"common1.properties\".equals(args[0])\n+//\t\t\t\t\t\t\t&& \"DEFAULT_GROUP\".equals(args[1])) {\n+//\t\t\t\t\t\treturn \"test-common1=common1\\ntest-common2=common1\";\n+//\t\t\t\t\t}\n+//\n+//\t\t\t\t\tif (\"common2.properties\".equals(args[0])\n+//\t\t\t\t\t\t\t&& \"DEFAULT_GROUP\".equals(args[1])) {\n+//\t\t\t\t\t\treturn \"test-common2=common2\";\n+//\t\t\t\t\t}\n+//\n+//\t\t\t\t\treturn \"\";\n+//\t\t\t\t}\n+//\t\t\t});\n+//\n+//\t\t}\n+//\t\tcatch (Exception ignore) {\n+//\t\t\tignore.printStackTrace();\n+//\n+//\t\t}\n+//\t}\n+//\n+//\t@Autowired\n+//\tprivate Environment environment;\n+//\n+//\t@Autowired\n+//\tprivate NacosPropertySourceLocator locator;\n+//\n+//\t@Autowired\n+//\tprivate NacosConfigProperties properties;\n+//\n+//\t@Autowired\n+//\tprivate NacosRefreshHistory refreshHistory;\n+//\n+//\t// @Test\n+//\tpublic void contextLoads() throws Exception {\n+//\n+//\t\tassertNotNull(\"NacosPropertySourceLocator was not created\", locator);\n+//\t\tassertNotNull(\"NacosConfigProperties was not created\", properties);\n+//\n+//\t\tcheckoutNacosConfigServerAddr();\n+//\t\tcheckoutNacosConfigEndpoint();\n+//\t\tcheckoutNacosConfigNamespace();\n+//\t\tcheckoutNacosConfigClusterName();\n+//\t\tcheckoutNacosConfigAccessKey();\n+//\t\tcheckoutNacosConfigSecrectKey();\n+//\t\tcheckoutNacosConfigName();\n+//\t\tcheckoutNacosConfigGroup();\n+//\t\tcheckoutNacosConfigContextPath();\n+//\t\tcheckoutNacosConfigFileExtension();\n+//\t\tcheckoutNacosConfigTimeout();\n+//\t\tcheckoutNacosConfigEncode();\n+//\n+//\t\tcheckoutEndpoint();\n+//\t\tcheckoutDataLoad();\n+//\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigServerAddr() {\n+//\t\tassertEquals(\"NacosConfigProperties server address is wrong\", \"127.0.0.1:8848\",\n+//\t\t\t\tproperties.getServerAddr());\n+//\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigEndpoint() {\n+//\t\tassertEquals(\"NacosConfigProperties endpoint is wrong\", \"test-endpoint\",\n+//\t\t\t\tproperties.getEndpoint());\n+//\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigNamespace() {\n+//\t\tassertEquals(\"NacosConfigProperties namespace is wrong\", \"test-namespace\",\n+//\t\t\t\tproperties.getNamespace());\n+//\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigClusterName() {\n+//\t\tassertEquals(\"NacosConfigProperties' cluster is wrong\", \"test-cluster\",\n+//\t\t\t\tproperties.getClusterName());\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigAccessKey() {\n+//\t\tassertEquals(\"NacosConfigProperties' is access key is wrong\", \"test-accessKey\",\n+//\t\t\t\tproperties.getAccessKey());\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigSecrectKey() {\n+//\t\tassertEquals(\"NacosConfigProperties' is secret key is wrong\", \"test-secretKey\",\n+//\t\t\t\tproperties.getSecretKey());\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigContextPath() {\n+//\t\tassertEquals(\"NacosConfigProperties' context path is wrong\", \"test-contextpath\",\n+//\t\t\t\tproperties.getContextPath());\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigName() {\n+//\t\tassertEquals(\"NacosConfigProperties' name is wrong\", \"test-name\",\n+//\t\t\t\tproperties.getName());\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigGroup() {\n+//\t\tassertEquals(\"NacosConfigProperties' group is wrong\", \"test-group\",\n+//\t\t\t\tproperties.getGroup());\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigFileExtension() {\n+//\t\tassertEquals(\"NacosConfigProperties' file extension is wrong\", \"properties\",\n+//\t\t\t\tproperties.getFileExtension());\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigTimeout() {\n+//\t\tassertEquals(\"NacosConfigProperties' timeout is wrong\", 1000,\n+//\t\t\t\tproperties.getTimeout());\n+//\t}\n+//\n+//\tprivate void checkoutNacosConfigEncode() {\n+//\t\tassertEquals(\"NacosConfigProperties' encode is wrong\", \"utf-8\",\n+//\t\t\t\tproperties.getEncode());\n+//\t}\n+//\n+//\tprivate void checkoutDataLoad() {\n+//\n+//\t\tAssert.assertEquals(environment.getProperty(\"user.name\"), \"dev\");\n+//\t\tAssert.assertEquals(environment.getProperty(\"user.age\"), \"12\");\n+//\t}\n+//\n+//\tprivate void checkoutEndpoint() throws Exception {\n+//\t\tNacosConfigEndpoint nacosConfigEndpoint = new NacosConfigEndpoint(properties,\n+//\t\t\t\trefreshHistory);\n+//\t\tMap<String, Object> map = nacosConfigEndpoint.invoke();\n+//\t\tassertEquals(map.get(\"NacosConfigProperties\"), properties);\n+//\t\tassertEquals(map.get(\"RefreshHistory\"), refreshHistory.getRecords());\n+//\t}\n+//\n+//\t@Configuration\n+//\t@EnableAutoConfiguration\n+//\t@ImportAutoConfiguration({ NacosConfigEndpointAutoConfiguration.class,\n+//\t\t\tNacosConfigAutoConfiguration.class, NacosConfigBootstrapConfiguration.class })\n+//\tpublic static class TestConfig {\n+//\t}\n+//}",
      "parent_sha": "72349fa63ec9866250dcd3619c249aee55896a74"
    }
  },
  {
    "oid": "abeb164de4a36dc0ba23aed5549842a80a08bb47",
    "message": "Deleted unnecessary implement relationship (#3298)",
    "date": "2023-05-08T01:10:15Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/abeb164de4a36dc0ba23aed5549842a80a08bb47",
    "details": {
      "sha": "135d493f533202a28d9f1f5e6d8eaf795166770c",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosRegistration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/abeb164de4a36dc0ba23aed5549842a80a08bb47/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosRegistration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/abeb164de4a36dc0ba23aed5549842a80a08bb47/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosRegistration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosRegistration.java?ref=abeb164de4a36dc0ba23aed5549842a80a08bb47",
      "patch": "@@ -37,7 +37,7 @@\n  * @author xiaojing\n  * @author changjin wei(\u9b4f\u660c\u8fdb)\n  */\n-public class NacosRegistration implements Registration, ServiceInstance {\n+public class NacosRegistration implements Registration {\n \n \t/**\n \t * The metadata key of management port.",
      "parent_sha": "c65be336188ba0a35f034c65045ca2876e4049a1"
    }
  },
  {
    "oid": "be188031043c8d119e9db05fbd0dbd6806884ae5",
    "message": "Update The sample",
    "date": "2019-08-01T03:24:00Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/be188031043c8d119e9db05fbd0dbd6806884ae5",
    "details": {
      "sha": "37361fc85d5f11efce701dab3db5159dab9b6f90",
      "filename": "spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-consumer-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudConsumerBootstrap.java",
      "status": "modified",
      "additions": 159,
      "deletions": 146,
      "changes": 305,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/be188031043c8d119e9db05fbd0dbd6806884ae5/spring-cloud-alibaba-examples%2Fspring-cloud-alibaba-dubbo-examples%2Fspring-cloud-dubbo-consumer-sample%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fbootstrap%2FDubboSpringCloudConsumerBootstrap.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/be188031043c8d119e9db05fbd0dbd6806884ae5/spring-cloud-alibaba-examples%2Fspring-cloud-alibaba-dubbo-examples%2Fspring-cloud-dubbo-consumer-sample%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fbootstrap%2FDubboSpringCloudConsumerBootstrap.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-examples%2Fspring-cloud-alibaba-dubbo-examples%2Fspring-cloud-dubbo-consumer-sample%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fbootstrap%2FDubboSpringCloudConsumerBootstrap.java?ref=be188031043c8d119e9db05fbd0dbd6806884ae5",
      "patch": "@@ -27,12 +27,15 @@\n import org.springframework.boot.ApplicationRunner;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n import org.springframework.cloud.client.loadbalancer.LoadBalanced;\n import org.springframework.cloud.openfeign.EnableFeignClients;\n import org.springframework.cloud.openfeign.FeignClient;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n@@ -52,194 +55,204 @@\n @EnableDiscoveryClient\n @EnableAutoConfiguration\n @EnableFeignClients\n+@EnableScheduling\n+@EnableCaching\n public class DubboSpringCloudConsumerBootstrap {\n \n-\t@Reference\n-\tprivate UserService userService;\n+    @Reference\n+    private UserService userService;\n \n-\t@Reference(version = \"1.0.0\", protocol = \"dubbo\")\n-\tprivate RestService restService;\n+    @Reference(version = \"1.0.0\", protocol = \"dubbo\")\n+    private RestService restService;\n \n-\t@Autowired\n-\t@Lazy\n-\tprivate FeignRestService feignRestService;\n+    @Autowired\n+    @Lazy\n+    private FeignRestService feignRestService;\n \n-\t@Autowired\n-\t@Lazy\n-\tprivate DubboFeignRestService dubboFeignRestService;\n+    @Autowired\n+    @Lazy\n+    private DubboFeignRestService dubboFeignRestService;\n \n-\t@Value(\"${provider.application.name}\")\n-\tprivate String providerApplicationName;\n+    @Value(\"${provider.application.name}\")\n+    private String providerApplicationName;\n \n-\t@Autowired\n-\t@LoadBalanced\n-\tprivate RestTemplate restTemplate;\n+    @Autowired\n+    @LoadBalanced\n+    private RestTemplate restTemplate;\n \n-\t@FeignClient(\"${provider.application.name}\")\n-\tpublic interface FeignRestService {\n+    @FeignClient(\"${provider.application.name}\")\n+    public interface FeignRestService {\n \n-\t\t@GetMapping(value = \"/param\")\n-\t\tString param(@RequestParam(\"param\") String param);\n+        @GetMapping(value = \"/param\")\n+        String param(@RequestParam(\"param\") String param);\n \n-\t\t@PostMapping(\"/params\")\n-\t\tpublic String params(@RequestParam(\"b\") String b, @RequestParam(\"a\") int a);\n+        @PostMapping(\"/params\")\n+        public String params(@RequestParam(\"b\") String b, @RequestParam(\"a\") int a);\n \n-\t\t@PostMapping(value = \"/request/body/map\", produces = APPLICATION_JSON_UTF8_VALUE)\n-\t\tUser requestBody(@RequestParam(\"param\") String param,\n-\t\t\t\t@RequestBody Map<String, Object> data);\n+        @PostMapping(value = \"/request/body/map\", produces = APPLICATION_JSON_UTF8_VALUE)\n+        User requestBody(@RequestParam(\"param\") String param,\n+                         @RequestBody Map<String, Object> data);\n \n-\t\t@GetMapping(\"/headers\")\n-\t\tpublic String headers(@RequestHeader(\"h2\") String header2,\n-\t\t\t\t@RequestHeader(\"h\") String header, @RequestParam(\"v\") Integer value);\n+        @GetMapping(\"/headers\")\n+        public String headers(@RequestHeader(\"h2\") String header2,\n+                              @RequestHeader(\"h\") String header, @RequestParam(\"v\") Integer value);\n \n-\t\t@GetMapping(\"/path-variables/{p1}/{p2}\")\n-\t\tpublic String pathVariables(@PathVariable(\"p2\") String path2,\n-\t\t\t\t@PathVariable(\"p1\") String path1, @RequestParam(\"v\") String param);\n-\t}\n+        @GetMapping(\"/path-variables/{p1}/{p2}\")\n+        public String pathVariables(@PathVariable(\"p2\") String path2,\n+                                    @PathVariable(\"p1\") String path1, @RequestParam(\"v\") String param);\n+    }\n \n-\t@FeignClient(\"${provider.application.name}\")\n-\t@DubboTransported(protocol = \"dubbo\")\n-\tpublic interface DubboFeignRestService {\n+    @FeignClient(\"${provider.application.name}\")\n+    @DubboTransported(protocol = \"dubbo\")\n+    public interface DubboFeignRestService {\n \n-\t\t@GetMapping(value = \"/param\")\n-\t\tString param(@RequestParam(\"param\") String param);\n+        @GetMapping(value = \"/param\")\n+        String param(@RequestParam(\"param\") String param);\n \n-\t\t@PostMapping(\"/params\")\n-\t\tString params(@RequestParam(\"b\") String paramB, @RequestParam(\"a\") int paramA);\n+        @PostMapping(\"/params\")\n+        String params(@RequestParam(\"b\") String paramB, @RequestParam(\"a\") int paramA);\n \n-\t\t@PostMapping(value = \"/request/body/map\", produces = APPLICATION_JSON_UTF8_VALUE)\n-\t\tUser requestBody(@RequestParam(\"param\") String param,\n-\t\t\t\t@RequestBody Map<String, Object> data);\n+        @PostMapping(value = \"/request/body/map\", produces = APPLICATION_JSON_UTF8_VALUE)\n+        User requestBody(@RequestParam(\"param\") String param,\n+                         @RequestBody Map<String, Object> data);\n \n-\t\t@GetMapping(\"/headers\")\n-\t\tpublic String headers(@RequestHeader(\"h2\") String header2,\n-\t\t\t\t@RequestParam(\"v\") Integer value, @RequestHeader(\"h\") String header);\n+        @GetMapping(\"/headers\")\n+        public String headers(@RequestHeader(\"h2\") String header2,\n+                              @RequestParam(\"v\") Integer value, @RequestHeader(\"h\") String header);\n \n-\t\t@GetMapping(\"/path-variables/{p1}/{p2}\")\n-\t\tpublic String pathVariables(@RequestParam(\"v\") String param,\n-\t\t\t\t@PathVariable(\"p2\") String path2, @PathVariable(\"p1\") String path1);\n-\t}\n+        @GetMapping(\"/path-variables/{p1}/{p2}\")\n+        public String pathVariables(@RequestParam(\"v\") String param,\n+                                    @PathVariable(\"p2\") String path2, @PathVariable(\"p1\") String path1);\n+    }\n \n-\t@Bean\n-\tpublic ApplicationRunner userServiceRunner() {\n-\t\treturn arguments -> {\n+    @Bean\n+    public ApplicationRunner userServiceRunner() {\n+        return arguments -> {\n \n-\t\t\tUser user = new User();\n-\t\t\tuser.setId(1L);\n-\t\t\tuser.setName(\"\u5c0f\u9a6c\u54e5\");\n-\t\t\tuser.setAge(33);\n+            User user = new User();\n+            user.setId(1L);\n+            user.setName(\"\u5c0f\u9a6c\u54e5\");\n+            user.setAge(33);\n \n-\t\t\t// save User\n-\t\t\tSystem.out.printf(\"UserService.save(%s) : %s\\n\", user,\n-\t\t\t\t\tuserService.save(user));\n+            // save User\n+            System.out.printf(\"UserService.save(%s) : %s\\n\", user,\n+                    userService.save(user));\n \n-\t\t\t// find all Users\n-\t\t\tSystem.out.printf(\"UserService.findAll() : %s\\n\", user,\n-\t\t\t\t\tuserService.findAll());\n+            // find all Users\n+            System.out.printf(\"UserService.findAll() : %s\\n\", user,\n+                    userService.findAll());\n \n-\t\t\t// remove User\n-\t\t\tSystem.out.printf(\"UserService.remove(%d) : %s\\n\", user.getId(),\n-\t\t\t\t\tuserService.remove(user.getId()));\n+            // remove User\n+            System.out.printf(\"UserService.remove(%d) : %s\\n\", user.getId(),\n+                    userService.remove(user.getId()));\n \n-\t\t};\n-\t}\n+        };\n+    }\n \n-\t@Bean\n-\tpublic ApplicationRunner callRunner() {\n-\t\treturn arguments -> {\n+    @Bean\n+    public ApplicationRunner callRunner() {\n+        return arguments -> {\n+            callAll();\n+        };\n+    }\n \n-\t\t\t// To call /path-variables\n-\t\t\tcallPathVariables();\n+    private void callAll() {\n \n-\t\t\t// To call /headers\n-\t\t\tcallHeaders();\n+        // To call /path-variables\n+        callPathVariables();\n \n-\t\t\t// To call /param\n-\t\t\tcallParam();\n+        // To call /headers\n+        callHeaders();\n \n-\t\t\t// To call /params\n-\t\t\tcallParams();\n+        // To call /param\n+        callParam();\n \n-\t\t\t// To call /request/body/map\n-\t\t\tcallRequestBodyMap();\n+        // To call /params\n+        callParams();\n \n-\t\t};\n-\t}\n+        // To call /request/body/map\n+        callRequestBodyMap();\n+    }\n \n-\tprivate void callPathVariables() {\n-\t\t// Dubbo Service call\n-\t\tSystem.out.println(restService.pathVariables(\"a\", \"b\", \"c\"));\n-\t\t// Spring Cloud Open Feign REST Call (Dubbo Transported)\n-\t\tSystem.out.println(dubboFeignRestService.pathVariables(\"c\", \"b\", \"a\"));\n-\t\t// Spring Cloud Open Feign REST Call\n+    @Scheduled(fixedDelay = 10 * 1000L)\n+    public void onScheduled() {\n+        callAll();\n+    }\n+\n+    private void callPathVariables() {\n+        // Dubbo Service call\n+        System.out.println(restService.pathVariables(\"a\", \"b\", \"c\"));\n+        // Spring Cloud Open Feign REST Call (Dubbo Transported)\n+        System.out.println(dubboFeignRestService.pathVariables(\"c\", \"b\", \"a\"));\n+        // Spring Cloud Open Feign REST Call\n //\t\tSystem.out.println(feignRestService.pathVariables(\"b\", \"a\", \"c\"));\n \n-\t\t// RestTemplate call\n-\t\tSystem.out.println(restTemplate.getForEntity(\n-\t\t\t\t\"http://\" + providerApplicationName + \"//path-variables/{p1}/{p2}?v=c\",\n-\t\t\t\tString.class, \"a\", \"b\"));\n-\t}\n-\n-\tprivate void callHeaders() {\n-\t\t// Dubbo Service call\n-\t\tSystem.out.println(restService.headers(\"a\", \"b\", 10));\n-\t\t// Spring Cloud Open Feign REST Call (Dubbo Transported)\n-\t\tSystem.out.println(dubboFeignRestService.headers(\"b\", 10, \"a\"));\n-\t\t// Spring Cloud Open Feign REST Call\n+        // RestTemplate call\n+        System.out.println(restTemplate.getForEntity(\n+                \"http://\" + providerApplicationName + \"//path-variables/{p1}/{p2}?v=c\",\n+                String.class, \"a\", \"b\"));\n+    }\n+\n+    private void callHeaders() {\n+        // Dubbo Service call\n+        System.out.println(restService.headers(\"a\", \"b\", 10));\n+        // Spring Cloud Open Feign REST Call (Dubbo Transported)\n+        System.out.println(dubboFeignRestService.headers(\"b\", 10, \"a\"));\n+        // Spring Cloud Open Feign REST Call\n //\t\tSystem.out.println(feignRestService.headers(\"b\", \"a\", 10));\n-\t}\n-\n-\tprivate void callParam() {\n-\t\t// Dubbo Service call\n-\t\tSystem.out.println(restService.param(\"mercyblitz\"));\n-\t\t// Spring Cloud Open Feign REST Call (Dubbo Transported)\n-\t\tSystem.out.println(dubboFeignRestService.param(\"mercyblitz\"));\n-\t\t// Spring Cloud Open Feign REST Call\n+    }\n+\n+    private void callParam() {\n+        // Dubbo Service call\n+        System.out.println(restService.param(\"mercyblitz\"));\n+        // Spring Cloud Open Feign REST Call (Dubbo Transported)\n+        System.out.println(dubboFeignRestService.param(\"mercyblitz\"));\n+        // Spring Cloud Open Feign REST Call\n //\t\tSystem.out.println(feignRestService.param(\"mercyblitz\"));\n-\t}\n-\n-\tprivate void callParams() {\n-\t\t// Dubbo Service call\n-\t\tSystem.out.println(restService.params(1, \"1\"));\n-\t\t// Spring Cloud Open Feign REST Call (Dubbo Transported)\n-\t\tSystem.out.println(dubboFeignRestService.params(\"1\", 1));\n-\t\t// Spring Cloud Open Feign REST Call\n+    }\n+\n+    private void callParams() {\n+        // Dubbo Service call\n+        System.out.println(restService.params(1, \"1\"));\n+        // Spring Cloud Open Feign REST Call (Dubbo Transported)\n+        System.out.println(dubboFeignRestService.params(\"1\", 1));\n+        // Spring Cloud Open Feign REST Call\n //\t\tSystem.out.println(feignRestService.params(\"1\", 1));\n \n-\t\t// RestTemplate call\n-\t\tSystem.out.println(restTemplate.getForEntity(\n-\t\t\t\t\"http://\" + providerApplicationName + \"/param?param=\u5c0f\u9a6c\u54e5\", String.class));\n-\t}\n+        // RestTemplate call\n+        System.out.println(restTemplate.getForEntity(\n+                \"http://\" + providerApplicationName + \"/param?param=\u5c0f\u9a6c\u54e5\", String.class));\n+    }\n \n-\tprivate void callRequestBodyMap() {\n+    private void callRequestBodyMap() {\n \n-\t\tMap<String, Object> data = new HashMap<>();\n-\t\tdata.put(\"id\", 1);\n-\t\tdata.put(\"name\", \"\u5c0f\u9a6c\u54e5\");\n-\t\tdata.put(\"age\", 33);\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"id\", 1);\n+        data.put(\"name\", \"\u5c0f\u9a6c\u54e5\");\n+        data.put(\"age\", 33);\n \n-\t\t// Dubbo Service call\n-\t\tSystem.out.println(restService.requestBodyMap(data, \"Hello,World\"));\n-\t\t// Spring Cloud Open Feign REST Call (Dubbo Transported)\n-\t\tSystem.out.println(dubboFeignRestService.requestBody(\"Hello,World\", data));\n-\t\t// Spring Cloud Open Feign REST Call\n+        // Dubbo Service call\n+        System.out.println(restService.requestBodyMap(data, \"Hello,World\"));\n+        // Spring Cloud Open Feign REST Call (Dubbo Transported)\n+        System.out.println(dubboFeignRestService.requestBody(\"Hello,World\", data));\n+        // Spring Cloud Open Feign REST Call\n //\t\tSystem.out.println(feignRestService.requestBody(\"Hello,World\", data));\n \n-\t\t// RestTemplate call\n-\t\tSystem.out.println(restTemplate.postForObject(\n-\t\t\t\t\"http://\" + providerApplicationName + \"/request/body/map?param=\u5c0f\u9a6c\u54e5\", data,\n-\t\t\t\tUser.class));\n-\t}\n-\n-\t@Bean\n-\t@LoadBalanced\n-\t@DubboTransported\n-\tpublic RestTemplate restTemplate() {\n-\t\treturn new RestTemplate();\n-\t}\n-\n-\tpublic static void main(String[] args) {\n-\t\tnew SpringApplicationBuilder(DubboSpringCloudConsumerBootstrap.class)\n-\t\t\t\t.properties(\"spring.profiles.active=nacos\").run(args);\n-\t}\n+        // RestTemplate call\n+        System.out.println(restTemplate.postForObject(\n+                \"http://\" + providerApplicationName + \"/request/body/map?param=\u5c0f\u9a6c\u54e5\", data,\n+                User.class));\n+    }\n+\n+    @Bean\n+    @LoadBalanced\n+    @DubboTransported\n+    public RestTemplate restTemplate() {\n+        return new RestTemplate();\n+    }\n+\n+    public static void main(String[] args) {\n+        new SpringApplicationBuilder(DubboSpringCloudConsumerBootstrap.class)\n+                .properties(\"spring.profiles.active=nacos\").run(args);\n+    }\n }",
      "parent_sha": "a8b274e61b950daf20d8fd2d788c519407e11dc7"
    }
  },
  {
    "oid": "cf4fdaa3c8d21c6d4bb48ee33d0f6cf51f936f3b",
    "message": "Fix typo in NacosWatch",
    "date": "2020-08-03T09:52:34Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/cf4fdaa3c8d21c6d4bb48ee33d0f6cf51f936f3b",
    "details": {
      "sha": "b5dfc8e3afa232bdf1ffda2eed9f39f1230117be",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosWatch.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/cf4fdaa3c8d21c6d4bb48ee33d0f6cf51f936f3b/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosWatch.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/cf4fdaa3c8d21c6d4bb48ee33d0f6cf51f936f3b/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosWatch.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosWatch.java?ref=cf4fdaa3c8d21c6d4bb48ee33d0f6cf51f936f3b",
      "patch": "@@ -74,7 +74,7 @@ public NacosWatch(NacosDiscoveryProperties properties,\n \n \tprivate static ThreadPoolTaskScheduler getTaskScheduler() {\n \t\tThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();\n-\t\ttaskScheduler.setBeanName(\"Nacso-Watch-Task-Scheduler\");\n+\t\ttaskScheduler.setBeanName(\"Nacos-Watch-Task-Scheduler\");\n \t\ttaskScheduler.initialize();\n \t\treturn taskScheduler;\n \t}",
      "parent_sha": "f9f3bd8a545848dcf19c6f08950336560bc635bc"
    }
  },
  {
    "oid": "8911f253d4e3c06282123c9edac54c6f69824ee5",
    "message": "Modify the sentinelInterceptor default interception rule and backward compatibility",
    "date": "2020-02-18T08:16:23Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/8911f253d4e3c06282123c9edac54c6f69824ee5",
    "details": {
      "sha": "b6322c6f95134fc150f03b8edf201dcabc3f65be",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/SentinelProperties.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/8911f253d4e3c06282123c9edac54c6f69824ee5/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2FSentinelProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/8911f253d4e3c06282123c9edac54c6f69824ee5/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2FSentinelProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2FSentinelProperties.java?ref=8911f253d4e3c06282123c9edac54c6f69824ee5",
      "patch": "@@ -343,9 +343,9 @@ public static class Filter {\n \t\tprivate int order = Ordered.HIGHEST_PRECEDENCE;\n \n \t\t/**\n-\t\t * URL pattern for SentinelWebInterceptor, default is /*.\n+\t\t * URL pattern for SentinelWebInterceptor, default is /**.\n \t\t */\n-\t\tprivate List<String> urlPatterns = Arrays.asList(\"/*\");\n+\t\tprivate List<String> urlPatterns = Arrays.asList(\"/**\");\n \n \t\t/**\n \t\t * Enable to instance",
      "parent_sha": "88b8319eda22d45395420837c0f0e60c2a77add9"
    }
  },
  {
    "oid": "a80e9106a6744272808f153f8d824bfa24c83394",
    "message": "reformat",
    "date": "2021-03-18T06:59:56Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/a80e9106a6744272808f153f8d824bfa24c83394",
    "details": {
      "sha": "d0435bb1ca69df6c5ad7db95f635f38ee4c3f466",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sidecar/src/main/java/com/alibaba/cloud/sidecar/consul/SidecarConsulAutoRegistration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/a80e9106a6744272808f153f8d824bfa24c83394/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sidecar%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsidecar%2Fconsul%2FSidecarConsulAutoRegistration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/a80e9106a6744272808f153f8d824bfa24c83394/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sidecar%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsidecar%2Fconsul%2FSidecarConsulAutoRegistration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sidecar%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsidecar%2Fconsul%2FSidecarConsulAutoRegistration.java?ref=a80e9106a6744272808f153f8d824bfa24c83394",
      "patch": "@@ -86,7 +86,7 @@ public static ConsulAutoRegistration registration(\n \n \t/**\n \t * copyed from\n-\t * org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration#getMetadata\n+\t * org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration#getMetadata.\n \t */\n \tprivate static Map<String, String> getMetadata(ConsulDiscoveryProperties properties) {\n \t\tLinkedHashMap<String, String> metadata = new LinkedHashMap<>();",
      "parent_sha": "e8cd8f4dab0ec66f4c8a58c9056f7627ab0747e3"
    }
  },
  {
    "oid": "63ade07329ff0438989b7f3a165446ce0bea8ed3",
    "message": "rocketmq anonymous group test: use AssertJ instead of Junit5",
    "date": "2022-04-24T12:55:35Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/63ade07329ff0438989b7f3a165446ce0bea8ed3",
    "details": {
      "sha": "d6015c26b6fbc363f4c86728d7bb077937004946",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/test/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinderTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/63ade07329ff0438989b7f3a165446ce0bea8ed3/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketMQMessageChannelBinderTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/63ade07329ff0438989b7f3a165446ce0bea8ed3/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketMQMessageChannelBinderTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketMQMessageChannelBinderTest.java?ref=63ade07329ff0438989b7f3a165446ce0bea8ed3",
      "patch": "@@ -22,7 +22,7 @@\n import com.alibaba.cloud.stream.binder.rocketmq.autoconfigurate.RocketMQBinderAutoConfiguration;\n import com.alibaba.cloud.stream.binder.rocketmq.constant.RocketMQConst;\n import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties;\n-import org.junit.jupiter.api.Assertions;\n+import org.assertj.core.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -61,7 +61,7 @@ public void createConsumerEndpoint() throws Exception {\n \t\tTestConsumerDestination destination = new TestConsumerDestination(\"test\");\n \t\tMessageProducer consumerEndpoint = binder.createConsumerEndpoint(destination, \"test\",\n \t\t\t\tnew ExtendedConsumerProperties<>(new RocketMQConsumerProperties()));\n-\t\tAssertions.assertNotNull(consumerEndpoint);\n+\t\tAssertions.assertThat(consumerEndpoint).isNotNull();\n \t}\n \n \t@Test\n@@ -72,14 +72,15 @@ public void createAnymousConsumerEndpoint() throws Exception {\n \t\tTestConsumerDestination destination = new TestConsumerDestination(\"test\");\n \t\tMessageProducer consumerEndpoint = binder.createConsumerEndpoint(destination, null,\n \t\t\t\textendedConsumerProperties);\n-\t\tAssertions.assertNotNull(consumerEndpoint);\n-\t\tAssertions.assertEquals(RocketMQConst.DEFAULT_GROUP + \"_test\", extendedConsumerProperties.getExtension().getGroup());\n+\t\tAssertions.assertThat(consumerEndpoint).isNotNull();\n+\t\tAssertions.assertThat( extendedConsumerProperties.getExtension().getGroup())\n+\t\t\t\t.isEqualTo(RocketMQConst.DEFAULT_GROUP + \"_test\");\n \t}\n \n \t@Test\n \tpublic void createDLQAnymousConsumerEndpoint() throws Exception {\n \t\tTestConsumerDestination destination = new TestConsumerDestination(\"%DLQ%test\");\n-\t\tAssertions.assertThrows(RuntimeException.class, () -> {\n+\t\tAssertions.assertThatThrownBy(() -> {\n \t\t\tMessageProducer consumerEndpoint = binder.createConsumerEndpoint(destination, null,\n \t\t\t\t\tnew ExtendedConsumerProperties<>(new RocketMQConsumerProperties()));\n \t\t});",
      "parent_sha": "ead86ec2db587b38db4f432dc8490ba151778f4e"
    }
  },
  {
    "oid": "e8cd8f4dab0ec66f4c8a58c9056f7627ab0747e3",
    "message": "reformat",
    "date": "2021-03-18T03:25:28Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/e8cd8f4dab0ec66f4c8a58c9056f7627ab0747e3",
    "details": {
      "sha": "094010ae1d8c59e2333fbc1eab6cd2936de91c9d",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sidecar/src/main/java/com/alibaba/cloud/sidecar/consul/SidecarConsulAutoRegistration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/e8cd8f4dab0ec66f4c8a58c9056f7627ab0747e3/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sidecar%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsidecar%2Fconsul%2FSidecarConsulAutoRegistration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/e8cd8f4dab0ec66f4c8a58c9056f7627ab0747e3/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sidecar%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsidecar%2Fconsul%2FSidecarConsulAutoRegistration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sidecar%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsidecar%2Fconsul%2FSidecarConsulAutoRegistration.java?ref=e8cd8f4dab0ec66f4c8a58c9056f7627ab0747e3",
      "patch": "@@ -70,7 +70,8 @@ public static ConsulAutoRegistration registration(\n \n \t\t// set health check, use alibaba sidecar self's port rather than polyglot app's\n \t\t// port.\n-\t\tservice.setPort(Integer.valueOf(context.getEnvironment().getProperty(\"server.port\")));\n+\t\tservice.setPort(\n+\t\t\t\tInteger.valueOf(context.getEnvironment().getProperty(\"server.port\")));\n \t\tsetCheck(service, autoServiceRegistrationProperties, properties, context,\n \t\t\t\theartbeatProperties);\n \n@@ -84,7 +85,8 @@ public static ConsulAutoRegistration registration(\n \t}\n \n \t/**\n-\t * copyed from org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration#getMetadata\n+\t * copyed from\n+\t * org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration#getMetadata\n \t */\n \tprivate static Map<String, String> getMetadata(ConsulDiscoveryProperties properties) {\n \t\tLinkedHashMap<String, String> metadata = new LinkedHashMap<>();",
      "parent_sha": "65fd0ebeca7dbc02cab8b9cd5b8275e4b4933ad6"
    }
  },
  {
    "oid": "46c888f878fb1099270fe3e9003e2f42b868d049",
    "message": "update sentinel test case",
    "date": "2019-03-26T09:37:36Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/46c888f878fb1099270fe3e9003e2f42b868d049",
    "details": {
      "sha": "9371335c19ea3f0fa10093c2be0a300afee5d921",
      "filename": "spring-cloud-alibaba-sentinel/src/test/java/org/springframework/cloud/alibaba/sentinel/SentinelAutoConfigurationTests.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/46c888f878fb1099270fe3e9003e2f42b868d049/spring-cloud-alibaba-sentinel%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2FSentinelAutoConfigurationTests.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/46c888f878fb1099270fe3e9003e2f42b868d049/spring-cloud-alibaba-sentinel%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2FSentinelAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2FSentinelAutoConfigurationTests.java?ref=46c888f878fb1099270fe3e9003e2f42b868d049",
      "patch": "@@ -106,22 +106,24 @@ public class SentinelAutoConfigurationTests {\n \t@LocalServerPort\n \tprivate int port;\n \n-\tprivate String url = \"http://localhost:\" + port;\n+    private String flowUrl = \"http://localhost:\" + port + \"/flow\";\n+\n+    private String degradeUrl = \"http://localhost:\" + port + \"/degrade\";\n \n \t@Before\n \tpublic void setUp() {\n \t\tFlowRule rule = new FlowRule();\n \t\trule.setGrade(RuleConstant.FLOW_GRADE_QPS);\n \t\trule.setCount(0);\n-\t\trule.setResource(\"GET:\" + url);\n+\t\trule.setResource(\"GET:\" + flowUrl);\n \t\trule.setLimitApp(\"default\");\n \t\trule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);\n \t\trule.setStrategy(RuleConstant.STRATEGY_DIRECT);\n \t\tFlowRuleManager.loadRules(Arrays.asList(rule));\n \n \t\tDegradeRule degradeRule = new DegradeRule();\n \t\tdegradeRule.setGrade(RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT);\n-\t\tdegradeRule.setResource(\"GET:\" + url + \"/test\");\n+\t\tdegradeRule.setResource(\"GET:\" + degradeUrl);\n \t\tdegradeRule.setCount(0);\n \t\tdegradeRule.setTimeWindow(60);\n \t\tDegradeRuleManager.loadRules(Arrays.asList(degradeRule));\n@@ -247,14 +249,14 @@ public void testFlowRestTemplate() {\n \t\t\t\trestTemplate.getInterceptors().size());\n \t\tassertEquals(\"RestTemplateWithBlockClass interceptors size was wrong\", 1,\n \t\t\t\trestTemplateWithBlockClass.getInterceptors().size());\n-\t\tResponseEntity responseEntityBlock = restTemplateWithBlockClass.getForEntity(url,\n+\t\tResponseEntity responseEntityBlock = restTemplateWithBlockClass.getForEntity(flowUrl,\n \t\t\t\tString.class);\n \t\tassertEquals(\"RestTemplateWithBlockClass Sentinel Block Message was wrong\",\n \t\t\t\t\"Oops\", responseEntityBlock.getBody());\n \t\tassertEquals(\n \t\t\t\t\"RestTemplateWithBlockClass Sentinel Block Http Status Code was wrong\",\n \t\t\t\tHttpStatus.OK, responseEntityBlock.getStatusCode());\n-\t\tResponseEntity responseEntityRaw = restTemplate.getForEntity(url, String.class);\n+\t\tResponseEntity responseEntityRaw = restTemplate.getForEntity(flowUrl, String.class);\n \t\tassertEquals(\"RestTemplate Sentinel Block Message was wrong\",\n \t\t\t\t\"RestTemplate request block by sentinel\", responseEntityRaw.getBody());\n \t\tassertEquals(\"RestTemplate Sentinel Block Http Status Code was wrong\",\n@@ -266,14 +268,14 @@ public void testNormalRestTemplate() {\n \t\tassertEquals(\"RestTemplateWithoutBlockClass interceptors size was wrong\", 0,\n \t\t\t\trestTemplateWithoutBlockClass.getInterceptors().size());\n \t\tassertThatExceptionOfType(RestClientException.class).isThrownBy(() -> {\n-\t\t\trestTemplateWithoutBlockClass.getForEntity(url, String.class);\n+\t\t\trestTemplateWithoutBlockClass.getForEntity(flowUrl, String.class);\n \t\t});\n \t}\n \n \t@Test\n \tpublic void testFallbackRestTemplate() {\n \t\tResponseEntity responseEntity = restTemplateWithFallbackClass\n-\t\t\t\t.getForEntity(url + \"/test\", String.class);\n+\t\t\t\t.getForEntity(degradeUrl, String.class);\n \t\tassertEquals(\"RestTemplateWithFallbackClass Sentinel Message was wrong\",\n \t\t\t\t\"Oops fallback\", responseEntity.getBody());\n \t\tassertEquals(\"RestTemplateWithFallbackClass Sentinel Http Status Code was wrong\",",
      "parent_sha": "5995687dd5a87e8585068909acc8ec9fe415fde3"
    }
  },
  {
    "oid": "3a1a8c7d71bff21dbc80cfcab819dca3cd9b2a1f",
    "message": "add Executors",
    "date": "2022-05-15T17:06:36Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/3a1a8c7d71bff21dbc80cfcab819dca3cd9b2a1f",
    "details": {
      "sha": "d023c139c9d03d204554d16494c1119b2241d8c3",
      "filename": "spring-cloud-alibaba-examples/nacos-example/nacos-config-example/src/main/java/com/alibaba/cloud/examples/example/DockingInterfaceExample.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/3a1a8c7d71bff21dbc80cfcab819dca3cd9b2a1f/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fexample%2FDockingInterfaceExample.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/3a1a8c7d71bff21dbc80cfcab819dca3cd9b2a1f/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fexample%2FDockingInterfaceExample.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fexample%2FDockingInterfaceExample.java?ref=3a1a8c7d71bff21dbc80cfcab819dca3cd9b2a1f",
      "patch": "@@ -17,6 +17,7 @@\n package com.alibaba.cloud.examples.example;\n \n import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n \n import com.alibaba.cloud.commons.lang.StringUtils;\n import com.alibaba.cloud.nacos.NacosConfigManager;\n@@ -118,7 +119,7 @@ public String listenerConfig(@RequestParam(\"dataId\") String dataId,\n \t\tconfigService.addListener(dataId, group, new Listener() {\n \t\t\t@Override\n \t\t\tpublic Executor getExecutor() {\n-\t\t\t\treturn null;\n+\t\t\t\treturn Executors.newSingleThreadExecutor();\n \t\t\t}\n \n \t\t\t@Override",
      "parent_sha": "9f00dd17ca5a8a54f434fadc08fbbc7bc85181e5"
    }
  },
  {
    "oid": "2210917cd18959e62d07411eaae712c89e932750",
    "message": "Fix #2963 RocketMQ binder test NPE",
    "date": "2022-12-13T12:11:41Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/2210917cd18959e62d07411eaae712c89e932750",
    "details": {
      "sha": "41adeb3a3fe70a70b6b8366d3feca643309476cd",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/test/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinderTest.java",
      "status": "modified",
      "additions": 22,
      "deletions": 23,
      "changes": 45,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/2210917cd18959e62d07411eaae712c89e932750/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketMQMessageChannelBinderTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/2210917cd18959e62d07411eaae712c89e932750/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketMQMessageChannelBinderTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketMQMessageChannelBinderTest.java?ref=2210917cd18959e62d07411eaae712c89e932750",
      "patch": "@@ -16,12 +16,12 @@\n \n package com.alibaba.cloud.stream.binder.rocketmq;\n \n-import javax.annotation.Resource;\n \n import com.alibaba.cloud.stream.binder.rocketmq.autoconfigurate.ExtendedBindingHandlerMappingsProviderConfiguration;\n import com.alibaba.cloud.stream.binder.rocketmq.autoconfigurate.RocketMQBinderAutoConfiguration;\n import com.alibaba.cloud.stream.binder.rocketmq.constant.RocketMQConst;\n import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties;\n+import jakarta.annotation.Resource;\n import org.assertj.core.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n@@ -56,28 +56,27 @@\n public class RocketMQMessageChannelBinderTest {\n \t@Resource\n \tRocketMQMessageChannelBinder binder;\n-\t\n-\t// todo spring boot 3.0 upgrade: fix spring cloud stream binder\n-\t// @Test\n-\t// public void createConsumerEndpoint() throws Exception {\n-\t// \tTestConsumerDestination destination = new TestConsumerDestination(\"test\");\n-\t// \tMessageProducer consumerEndpoint = binder.createConsumerEndpoint(destination, \"test\",\n-\t// \t\t\tnew ExtendedConsumerProperties<>(new RocketMQConsumerProperties()));\n-\t// \tAssertions.assertThat(consumerEndpoint).isNotNull();\n-\t// }\n-\t//\n-\t// @Test\n-\t// public void createAnymousConsumerEndpoint() throws Exception {\n-\t// \tExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties\n-\t// \t\t\t= new ExtendedConsumerProperties<>(new RocketMQConsumerProperties());\n-\t//\n-\t// \tTestConsumerDestination destination = new TestConsumerDestination(\"test\");\n-\t// \tMessageProducer consumerEndpoint = binder.createConsumerEndpoint(destination, null,\n-\t// \t\t\textendedConsumerProperties);\n-\t// \tAssertions.assertThat(consumerEndpoint).isNotNull();\n-\t// \tAssertions.assertThat(extendedConsumerProperties.getExtension().getGroup())\n-\t// \t\t\t.isEqualTo(RocketMQConst.DEFAULT_GROUP + \"_test\");\n-\t// }\n+\n+\t@Test\n+\tpublic void createConsumerEndpoint() throws Exception {\n+\t\tTestConsumerDestination destination = new TestConsumerDestination(\"test\");\n+\t\tMessageProducer consumerEndpoint = binder.createConsumerEndpoint(destination, \"test\",\n+\t\t\t\tnew ExtendedConsumerProperties<>(new RocketMQConsumerProperties()));\n+\t\tAssertions.assertThat(consumerEndpoint).isNotNull();\n+\t}\n+\n+\t@Test\n+\tpublic void createAnymousConsumerEndpoint() throws Exception {\n+\t\tExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties\n+\t\t\t\t= new ExtendedConsumerProperties<>(new RocketMQConsumerProperties());\n+\n+\t\tTestConsumerDestination destination = new TestConsumerDestination(\"test\");\n+\t\tMessageProducer consumerEndpoint = binder.createConsumerEndpoint(destination, null,\n+\t\t\t\textendedConsumerProperties);\n+\t\tAssertions.assertThat(consumerEndpoint).isNotNull();\n+\t\tAssertions.assertThat(extendedConsumerProperties.getExtension().getGroup())\n+\t\t\t\t.isEqualTo(RocketMQConst.DEFAULT_GROUP + \"_test\");\n+\t}\n \n \t@Test\n \tpublic void createDLQAnymousConsumerEndpoint() throws Exception {",
      "parent_sha": "be2d0f6c38b5d85507ca281ce9c38925295c932c"
    }
  },
  {
    "oid": "b16ef5efeaab6d648ec6cb01a244e1d9bcda3e7d",
    "message": "fix bug for ansServer id",
    "date": "2019-01-10T03:44:49Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/b16ef5efeaab6d648ec6cb01a244e1d9bcda3e7d",
    "details": {
      "sha": "23964363bb055c7679222145ff6528eb08d04152",
      "filename": "spring-cloud-alicloud-ans/src/main/java/org/springframework/cloud/alicloud/ans/migrate/ServerListInvocationHandler.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/b16ef5efeaab6d648ec6cb01a244e1d9bcda3e7d/spring-cloud-alicloud-ans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fans%2Fmigrate%2FServerListInvocationHandler.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/b16ef5efeaab6d648ec6cb01a244e1d9bcda3e7d/spring-cloud-alicloud-ans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fans%2Fmigrate%2FServerListInvocationHandler.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alicloud-ans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fans%2Fmigrate%2FServerListInvocationHandler.java?ref=b16ef5efeaab6d648ec6cb01a244e1d9bcda3e7d",
      "patch": "@@ -88,17 +88,17 @@ private List<Server> mergeAnsServerList(final List<Server> source) {\n \t\t\tansServerList.forEach(ansServer -> {\n \t\t\t\tif (server.getHostPort()\n \t\t\t\t\t\t.equals(ansServer.getHealthService().toInetAddr())) {\n-\t\t\t\t\t// fix bug: mast be set the zone, update server list,will filter\n \t\t\t\t\t// by: ZoneAffinityPredicate\n-\t\t\t\t\tansServer.setZone(server.getZone());\n-\t\t\t\t\tansServer.setSchemea(server.getScheme());\n-\t\t\t\t\tansServer.setId(server.getId());\n-\t\t\t\t\tansServer.setReadyToServe(true);\n \t\t\t\t\tserverIterator.remove();\n \t\t\t\t\tlog.info(\"Source Server is remove \" + server.getHostPort()\n \t\t\t\t\t\t\t+ \", and from ANS Server is override\uff1a\"\n \t\t\t\t\t\t\t+ ansServer.toString());\n \t\t\t\t}\n+\t\t\t\t// fix bug: mast be set the zone, update server list,will filter\n+\t\t\t\tansServer.setZone(server.getZone());\n+\t\t\t\tansServer.setSchemea(server.getScheme());\n+\t\t\t\tansServer.setId(ansServer.getHealthService().toInetAddr());\n+\t\t\t\tansServer.setReadyToServe(true);\n \t\t\t});\n \t\t}\n ",
      "parent_sha": "e1635009801be14ad574e7e381f111850c346302"
    }
  },
  {
    "oid": "20741db009f319ab808c761680272fe6e41445ee",
    "message": "Polish #115 check ParamFlowRule",
    "date": "2018-12-14T10:10:49Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/20741db009f319ab808c761680272fe6e41445ee",
    "details": {
      "sha": "f93d889d49a4624eddfb038e41378edda2dea6db",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelDataSourceHandler.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/20741db009f319ab808c761680272fe6e41445ee/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/20741db009f319ab808c761680272fe6e41445ee/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java?ref=20741db009f319ab808c761680272fe6e41445ee",
      "patch": "@@ -35,6 +35,8 @@\n import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;\n import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;\n+import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;\n+import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRuleManager;\n import com.alibaba.csp.sentinel.slots.system.SystemRule;\n import com.alibaba.csp.sentinel.slots.system.SystemRuleManager;\n \n@@ -55,7 +57,7 @@ public class SentinelDataSourceHandler {\n \tprivate List<String> dataTypeList = Arrays.asList(\"json\", \"xml\");\n \n \tprivate List<Class> rulesList = Arrays.asList(FlowRule.class, DegradeRule.class,\n-\t\t\tSystemRule.class, AuthorityRule.class);\n+\t\t\tSystemRule.class, AuthorityRule.class, ParamFlowRule.class);\n \n \tprivate List<String> dataSourceBeanNameList = Collections\n \t\t\t.synchronizedList(new ArrayList<>());\n@@ -146,9 +148,12 @@ else if (ruleType == DegradeRule.class) {\n \t\t\t\telse if (ruleType == SystemRule.class) {\n \t\t\t\t\tSystemRuleManager.register2Property(sentinelProperty);\n \t\t\t\t}\n-\t\t\t\telse {\n+\t\t\t\telse if (ruleType == AuthorityRule.class) {\n \t\t\t\t\tAuthorityRuleManager.register2Property(sentinelProperty);\n \t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tParamFlowRuleManager.register2Property(sentinelProperty);\n+\t\t\t\t}\n \t\t\t}\n \t\t});\n \t}",
      "parent_sha": "5643c952a83bbf233d9f20230092ed511f899336"
    }
  },
  {
    "oid": "e5deb0835accde3f07ef5b02d3446a611cd28991",
    "message": "Sentinel zk datasource add default server-addr",
    "date": "2019-07-28T16:08:57Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/e5deb0835accde3f07ef5b02d3446a611cd28991",
    "details": {
      "sha": "3de046bc45963ca64645527ee1a939ec1318231b",
      "filename": "spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/ZookeeperDataSourceProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/e5deb0835accde3f07ef5b02d3446a611cd28991/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconfig%2FZookeeperDataSourceProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/e5deb0835accde3f07ef5b02d3446a611cd28991/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconfig%2FZookeeperDataSourceProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconfig%2FZookeeperDataSourceProperties.java?ref=e5deb0835accde3f07ef5b02d3446a611cd28991",
      "patch": "@@ -32,7 +32,7 @@ public ZookeeperDataSourceProperties() {\n \t\tsuper(ZookeeperDataSourceFactoryBean.class.getName());\n \t}\n \n-\tprivate String serverAddr;\n+\tprivate String serverAddr = \"localhost:2181\";\n \n \tprivate String path;\n ",
      "parent_sha": "a593f774e0733bcbb7523eb7fcb215a0b967cc53"
    }
  },
  {
    "oid": "15df0bff6b1f4489508e68c56ce59e09178f6cf0",
    "message": "Upgrade Sentinel to 1.8.1",
    "date": "2021-02-26T02:59:39Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/15df0bff6b1f4489508e68c56ce59e09178f6cf0",
    "details": {
      "sha": "8be1174a2dc021fdde0ab15e0ac179756500d40d",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/endpoint/SentinelHealthIndicator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/15df0bff6b1f4489508e68c56ce59e09178f6cf0/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/15df0bff6b1f4489508e68c56ce59e09178f6cf0/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java?ref=15df0bff6b1f4489508e68c56ce59e09178f6cf0",
      "patch": "@@ -16,17 +16,15 @@\n \n package com.alibaba.cloud.sentinel.endpoint;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n import com.alibaba.cloud.sentinel.SentinelProperties;\n import com.alibaba.csp.sentinel.datasource.AbstractDataSource;\n import com.alibaba.csp.sentinel.heartbeat.HeartbeatSenderProvider;\n import com.alibaba.csp.sentinel.transport.HeartbeatSender;\n import com.alibaba.csp.sentinel.transport.config.TransportConfig;\n-import com.alibaba.csp.sentinel.util.function.Tuple2;\n-\n+import com.alibaba.csp.sentinel.transport.endpoint.Endpoint;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.HashMap;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.boot.actuate.health.AbstractHealthIndicator;\n import org.springframework.boot.actuate.health.Health;\n@@ -84,8 +82,7 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {\n \n \t\t// Check health of Dashboard\n \t\tboolean dashboardUp = true;\n-\t\tList<Tuple2<String, Integer>> consoleServerList = TransportConfig\n-\t\t\t\t.getConsoleServerList();\n+\t\tList<Endpoint> consoleServerList = TransportConfig.getConsoleServerList();\n \t\tif (CollectionUtils.isEmpty(consoleServerList)) {\n \t\t\t// If Dashboard isn't configured, it's OK and mark the status of Dashboard\n \t\t\t// with UNKNOWN.",
      "parent_sha": "7684fe71ca9e1257e658c2635644311fc5edb51f"
    }
  },
  {
    "oid": "2551bcb8361e822c4505c15dbbe9ecdb31534792",
    "message": "adjust timeout",
    "date": "2022-08-10T02:25:45Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/2551bcb8361e822c4505c15dbbe9ecdb31534792",
    "details": {
      "sha": "59afcd65f06a15c3540d0f30da1ea6499a711e0b",
      "filename": "spring-cloud-alibaba-tests/nacos-tests/nacos-config-test/src/test/java/com/alibaba/cloud/tests/nacos/config/NacosConfigRefreshTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/2551bcb8361e822c4505c15dbbe9ecdb31534792/spring-cloud-alibaba-tests%2Fnacos-tests%2Fnacos-config-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Ftests%2Fnacos%2Fconfig%2FNacosConfigRefreshTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/2551bcb8361e822c4505c15dbbe9ecdb31534792/spring-cloud-alibaba-tests%2Fnacos-tests%2Fnacos-config-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Ftests%2Fnacos%2Fconfig%2FNacosConfigRefreshTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-tests%2Fnacos-tests%2Fnacos-config-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Ftests%2Fnacos%2Fconfig%2FNacosConfigRefreshTest.java?ref=2551bcb8361e822c4505c15dbbe9ecdb31534792",
      "patch": "@@ -41,7 +41,7 @@\n  */\n // @HasDockerAndItEnabled\n @SpringCloudAlibaba(composeFiles = \"docker/nacos-compose-test.yml\", serviceName = \"nacos-standalone\")\n-@TestExtend(time = 2 * TIME_OUT)\n+@TestExtend(time = 3 * TIME_OUT)\n public class NacosConfigRefreshTest {\n \n \t/**",
      "parent_sha": "acb5c7d7be3a52453c188242a34e88ab04cd9307"
    }
  },
  {
    "oid": "802958b21880acffa9e8902710ea41b96f698795",
    "message": "Revert \"fix nacos heart beat unit, second to millisecond.\"\n\nThis reverts commit 0e388707",
    "date": "2020-12-23T01:51:42Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/802958b21880acffa9e8902710ea41b96f698795",
    "details": {
      "sha": "75912ca45711657e70eeaf5bdcd98e4b9b91484a",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosRegistration.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/802958b21880acffa9e8902710ea41b96f698795/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosRegistration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/802958b21880acffa9e8902710ea41b96f698795/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosRegistration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosRegistration.java?ref=802958b21880acffa9e8902710ea41b96f698795",
      "patch": "@@ -19,7 +19,6 @@\n import java.net.URI;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n \n import javax.annotation.PostConstruct;\n \n@@ -100,15 +99,15 @@ public void init() {\n \n \t\tif (null != nacosDiscoveryProperties.getHeartBeatInterval()) {\n \t\t\tmetadata.put(PreservedMetadataKeys.HEART_BEAT_INTERVAL,\n-\t\t\t\t\tString.valueOf(TimeUnit.SECONDS.toMillis(nacosDiscoveryProperties.getHeartBeatInterval())));\n+\t\t\t\t\tnacosDiscoveryProperties.getHeartBeatInterval().toString());\n \t\t}\n \t\tif (null != nacosDiscoveryProperties.getHeartBeatTimeout()) {\n \t\t\tmetadata.put(PreservedMetadataKeys.HEART_BEAT_TIMEOUT,\n-\t\t\t\t\tString.valueOf(TimeUnit.SECONDS.toMillis(nacosDiscoveryProperties.getHeartBeatTimeout())));\n+\t\t\t\t\tnacosDiscoveryProperties.getHeartBeatTimeout().toString());\n \t\t}\n \t\tif (null != nacosDiscoveryProperties.getIpDeleteTimeout()) {\n \t\t\tmetadata.put(PreservedMetadataKeys.IP_DELETE_TIMEOUT,\n-\t\t\t\t\tString.valueOf(TimeUnit.SECONDS.toMillis(nacosDiscoveryProperties.getIpDeleteTimeout())));\n+\t\t\t\t\tnacosDiscoveryProperties.getIpDeleteTimeout().toString());\n \t\t}\n \t\tcustomize(registrationCustomizers, this);\n \t}",
      "parent_sha": "0e388707352bcda94a41d67100e28c0a2eaa10fc"
    }
  },
  {
    "oid": "b059e1f8e3cdeae8b05de679e9132509e20375a3",
    "message": "refactor log information",
    "date": "2019-01-15T13:59:25Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/b059e1f8e3cdeae8b05de679e9132509e20375a3",
    "details": {
      "sha": "18580aa523abf6e9eecbab44958b9b01dd4c873e",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelBeanPostProcessor.java",
      "status": "modified",
      "additions": 19,
      "deletions": 14,
      "changes": 33,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/b059e1f8e3cdeae8b05de679e9132509e20375a3/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelBeanPostProcessor.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/b059e1f8e3cdeae8b05de679e9132509e20375a3/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelBeanPostProcessor.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelBeanPostProcessor.java?ref=b059e1f8e3cdeae8b05de679e9132509e20375a3",
      "patch": "@@ -99,36 +99,41 @@ private void checkBlock4RestTemplate(Class<?> blockClass, String blockMethod,\n \t\t}\n \t\tif (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n \t\t\tlogger.error(\n-\t\t\t\t\t\"{} class property exists but {}\"\n-\t\t\t\t\t\t\t+ \" method property is not exists in bean[{}]\",\n+\t\t\t\t\t\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",\n \t\t\t\t\ttype, type, beanName);\n-\t\t\tSystem.exit(-1);\n+\t\t\tthrow new IllegalArgumentException(type + \" class attribute exists but \"\n+\t\t\t\t\t+ type + \" method attribute is not exists in bean[\" + beanName + \"]\");\n \t\t}\n \t\telse if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n \t\t\tlogger.error(\n-\t\t\t\t\t\"{} method property exists but {} class property is not exists in bean[{}]\",\n+\t\t\t\t\t\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",\n \t\t\t\t\ttype, type, beanName);\n-\t\t\tSystem.exit(-1);\n+\t\t\tthrow new IllegalArgumentException(type + \" method attribute exists but \"\n+\t\t\t\t\t+ type + \" class attribute is not exists in bean[\" + beanName + \"]\");\n \t\t}\n \t\tClass[] args = new Class[] { HttpRequest.class, byte[].class,\n \t\t\t\tClientHttpRequestExecution.class, BlockException.class };\n+\t\tString argsStr = Arrays.toString(\n+\t\t\t\tArrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n \t\tMethod foundMethod = ClassUtils.getStaticMethod(blockClass, blockMethod, args);\n \t\tif (foundMethod == null) {\n \t\t\tlogger.error(\n-\t\t\t\t\t\"{} method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",\n-\t\t\t\t\ttype, beanName, blockClass.getName(), blockMethod,\n-\t\t\t\t\tArrays.toString(Arrays.stream(args)\n-\t\t\t\t\t\t\t.map(clazz -> clazz.getSimpleName()).toArray()));\n-\t\t\tSystem.exit(-1);\n+\t\t\t\t\t\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",\n+\t\t\t\t\ttype, beanName, blockClass.getName(), blockMethod, argsStr);\n+\t\t\tthrow new IllegalArgumentException(type\n+\t\t\t\t\t+ \" static method can not be found in bean[\" + beanName\n+\t\t\t\t\t+ \"]. The right method signature is \" + blockClass.getName() + \"#\"\n+\t\t\t\t\t+ blockMethod + argsStr\n+\t\t\t\t\t+ \", please check your class name, method name and arguments\");\n \t\t}\n \n \t\tif (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n \t\t\tlogger.error(\n \t\t\t\t\t\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",\n-\t\t\t\t\ttype, beanName, blockClass.getName(), blockMethod,\n-\t\t\t\t\tArrays.toString(Arrays.stream(args)\n-\t\t\t\t\t\t\t.map(clazz -> clazz.getSimpleName()).toArray()));\n-\t\t\tSystem.exit(-1);\n+\t\t\t\t\ttype, beanName, blockClass.getName(), blockMethod, argsStr);\n+\t\t\tthrow new IllegalArgumentException(type + \" method return value in bean[\"\n+\t\t\t\t\t+ beanName + \"] is not ClientHttpResponse: \" + blockClass.getName()\n+\t\t\t\t\t+ \"#\" + blockMethod + argsStr);\n \t\t}\n \t\tif (type.equals(SentinelConstants.BLOCK_TYPE)) {\n \t\t\tBlockClassRegistry.updateBlockHandlerFor(blockClass, blockMethod,",
      "parent_sha": "0db43a3a5b3d7eb7aaa9d5645b620dbe1eb80dff"
    }
  },
  {
    "oid": "fa29783cff3dc9f8caaee2d5effc1b2fa09968bc",
    "message": "del duplicate blank",
    "date": "2018-12-12T13:53:02Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/fa29783cff3dc9f8caaee2d5effc1b2fa09968bc",
    "details": {
      "sha": "86b7b2a4688a0850690d7b6271544f93e14282f7",
      "filename": "spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/refresh/NacosContextRefresher.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/fa29783cff3dc9f8caaee2d5effc1b2fa09968bc/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Frefresh%2FNacosContextRefresher.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/fa29783cff3dc9f8caaee2d5effc1b2fa09968bc/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Frefresh%2FNacosContextRefresher.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Frefresh%2FNacosContextRefresher.java?ref=fa29783cff3dc9f8caaee2d5effc1b2fa09968bc",
      "patch": "@@ -124,10 +124,9 @@ public void receiveConfigInfo(String configInfo) {\n \t\t\t\t}\n \t\t\t\trefreshHistory.add(dataId, md5);\n \t\t\t\tapplicationContext.publishEvent(\n-\t\t\t\t\t\tnew RefreshEvent(this, null, \"Refresh  Nacos config\"));\n+\t\t\t\t\t\tnew RefreshEvent(this, null, \"Refresh Nacos config\"));\n \t\t\t\tif (LOGGER.isDebugEnabled()) {\n-\t\t\t\t\tLOGGER.debug(\"Refresh  Nacos config group[[]] dataId[]\", group,\n-\t\t\t\t\t\t\tdataId);\n+\t\t\t\t\tLOGGER.debug(\"Refresh Nacos config group{},dataId{}\", group, dataId);\n \t\t\t\t}\n \t\t\t}\n ",
      "parent_sha": "94f3de3b36a8510e8752c9b83409b75a004a4130"
    }
  },
  {
    "oid": "d5e7c82fdac10be86e1b9ddbc5dac6ad4be889fa",
    "message": "add discovery client getInstance in nacos-discovery-example",
    "date": "2018-09-17T09:54:14Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/d5e7c82fdac10be86e1b9ddbc5dac6ad4be889fa",
    "details": {
      "sha": "b896691bbc3eb6d49042e56a17863e2004c2e82a",
      "filename": "spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-discovery-consumer-example/src/main/java/org/springframework/cloud/alibaba/cloud/examples/TestController.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/d5e7c82fdac10be86e1b9ddbc5dac6ad4be889fa/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-discovery-example%2Fnacos-discovery-consumer-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fcloud%2Fexamples%2FTestController.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/d5e7c82fdac10be86e1b9ddbc5dac6ad4be889fa/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-discovery-example%2Fnacos-discovery-consumer-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fcloud%2Fexamples%2FTestController.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-discovery-example%2Fnacos-discovery-consumer-example%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fcloud%2Fexamples%2FTestController.java?ref=d5e7c82fdac10be86e1b9ddbc5dac6ad4be889fa",
      "patch": "@@ -34,9 +34,9 @@ public String feign(@PathVariable String str) {\n     }\n \n \n-    @RequestMapping(value=\"/client\",method = RequestMethod.GET)\n-    public Object client(){\n-        return discoveryClient.getInstances(\"service-consumer\");\n+    @RequestMapping(value=\"/services/{service}\",method = RequestMethod.GET)\n+    public Object client(@PathVariable String service){\n+        return discoveryClient.getInstances(service);\n     }\n     @RequestMapping(value=\"/services\",method = RequestMethod.GET)\n     public Object services(){",
      "parent_sha": "83aa947fc9297e2d299fdd5247322694c590dcce"
    }
  },
  {
    "oid": "4356f1be49455ef090082955384b13170cd9a7b2",
    "message": "fix #2157",
    "date": "2021-07-10T10:41:18Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/4356f1be49455ef090082955384b13170cd9a7b2",
    "details": {
      "sha": "8d8d8df12f267a60f1f671956e4966e3b0040647",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/DubboServiceRegistrationAutoConfiguration.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/4356f1be49455ef090082955384b13170cd9a7b2/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboServiceRegistrationAutoConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/4356f1be49455ef090082955384b13170cd9a7b2/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboServiceRegistrationAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboServiceRegistrationAutoConfiguration.java?ref=4356f1be49455ef090082955384b13170cd9a7b2",
      "patch": "@@ -80,11 +80,12 @@\n @Configuration(proxyBeanMethods = false)\n @Import({ DubboServiceRegistrationEventPublishingAspect.class,\n \t\tDubboBootstrapStartCommandLineRunner.class })\n-@ConditionalOnProperty(value = \"spring.cloud.service-registry.auto-registration.enabled\", matchIfMissing = true)\n+@ConditionalOnProperty(value = \"spring.cloud.service-registry.auto-registration.enabled\",\n+\t\tmatchIfMissing = true)\n @AutoConfigureAfter(name = { EUREKA_CLIENT_AUTO_CONFIGURATION_CLASS_NAME,\n \t\tCONSUL_AUTO_SERVICE_AUTO_CONFIGURATION_CLASS_NAME,\n-\t\t\"org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration\" }, value = {\n-\t\t\t\tDubboMetadataAutoConfiguration.class })\n+\t\t\"org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration\" },\n+\t\tvalue = { DubboMetadataAutoConfiguration.class })\n public class DubboServiceRegistrationAutoConfiguration {\n \n \t/**\n@@ -324,6 +325,7 @@ private void attAsTag(List<String> tags, String key, String value) {\n \t\t\t}\n \t\t\ttags.add(key + \"=\" + value);\n \t\t}\n+\n \t}\n \n }",
      "parent_sha": "4d697bb2948bb00a7453f7888084774882a72753"
    }
  },
  {
    "oid": "22862402d28c6c4f315659037e2ec8756c7abc72",
    "message": "fix dubbo ServiceParameterResolver NPE",
    "date": "2022-03-08T14:08:57Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/22862402d28c6c4f315659037e2ec8756c7abc72",
    "details": {
      "sha": "206d3e4a72aeb6d45dd1178be70059e1b5438638",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/parameter/AbstractNamedValueServiceParameterResolver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/22862402d28c6c4f315659037e2ec8756c7abc72/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fservice%2Fparameter%2FAbstractNamedValueServiceParameterResolver.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/22862402d28c6c4f315659037e2ec8756c7abc72/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fservice%2Fparameter%2FAbstractNamedValueServiceParameterResolver.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fservice%2Fparameter%2FAbstractNamedValueServiceParameterResolver.java?ref=22862402d28c6c4f315659037e2ec8756c7abc72",
      "patch": "@@ -112,7 +112,7 @@ public Object resolve(RestMethodMetadata restMethodMetadata,\n \t\t\t}\n \t\t}\n \n-\t\treturn index > -1 ? arguments[index] : null;\n+\t\treturn index != null && index > -1 ? arguments[index] : null;\n \t}\n \n \tprotected Collection<String> getNames(RestMethodMetadata restMethodMetadata,",
      "parent_sha": "c4c167b5934527eb5de7b8d861c1100c603c0776"
    }
  },
  {
    "oid": "ea0d1d709d26c502863627473651c145d9365600",
    "message": "fix bug",
    "date": "2020-04-22T14:23:27Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/ea0d1d709d26c502863627473651c145d9365600",
    "details": {
      "sha": "5b83b71f6f29f3381717ee0ee7296cce4fad7a72",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/web/SeataHandlerInterceptor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/ea0d1d709d26c502863627473651c145d9365600/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Fweb%2FSeataHandlerInterceptor.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/ea0d1d709d26c502863627473651c145d9365600/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Fweb%2FSeataHandlerInterceptor.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Fweb%2FSeataHandlerInterceptor.java?ref=ea0d1d709d26c502863627473651c145d9365600",
      "patch": "@@ -39,10 +39,10 @@ public class SeataHandlerInterceptor implements HandlerInterceptor {\n \n \tprivate static final Logger log = LoggerFactory\n \t\t\t.getLogger(SeataHandlerInterceptor.class);\n-\t\n-\tpublic static final String BIND_XID = \"BIND_XID\";\n \n-\tpublic static final String UNBIND_XID = \"UNBIND_XID\";\n+    private static final String BIND_XID = \"BIND_XID\";\n+\n+    private static final String UNBIND_XID = \"UNBIND_XID\";\n \n \t@Override\n \tpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response,",
      "parent_sha": "d383fb4677b3d210521e417b228da2c5be2155a9"
    }
  },
  {
    "oid": "89ad537f66927a647f6233cfc79d58b18f2f6928",
    "message": "To filter null , disable or unhealthy Nacos instances",
    "date": "2019-08-01T05:36:28Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/89ad537f66927a647f6233cfc79d58b18f2f6928",
    "details": {
      "sha": "8a54b7d82ab3699e16e4a70284e1fc2fc496a180",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosDiscoveryClient.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/89ad537f66927a647f6233cfc79d58b18f2f6928/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/89ad537f66927a647f6233cfc79d58b18f2f6928/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java?ref=89ad537f66927a647f6233cfc79d58b18f2f6928",
      "patch": "@@ -65,6 +65,9 @@ public List<ServiceInstance> getInstances(String serviceId) {\n \n     public static ServiceInstance hostToServiceInstance(Instance instance,\n                                                         String serviceId) {\n+        if (instance == null || !instance.isEnabled() || !instance.isHealthy()) {\n+            return null;\n+        }\n         NacosServiceInstance nacosServiceInstance = new NacosServiceInstance();\n         nacosServiceInstance.setHost(instance.getIp());\n         nacosServiceInstance.setPort(instance.getPort());\n@@ -89,7 +92,10 @@ public static List<ServiceInstance> hostToServiceInstanceList(\n             List<Instance> instances, String serviceId) {\n         List<ServiceInstance> result = new ArrayList<>(instances.size());\n         for (Instance instance : instances) {\n-            result.add(hostToServiceInstance(instance, serviceId));\n+            ServiceInstance serviceInstance = hostToServiceInstance(instance, serviceId);\n+            if (serviceInstance != null) {\n+                result.add(serviceInstance);\n+            }\n         }\n         return result;\n     }",
      "parent_sha": "7580d8b1cd79d2280bacb689df97b0197296332f"
    }
  },
  {
    "oid": "a49f6622d7d9d3593b60672df56318d8da1823a6",
    "message": "Polish spring-cloud-incubator/spring-cloud-alibaba#348 : Performance optimization",
    "date": "2019-02-20T08:21:56Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/a49f6622d7d9d3593b60672df56318d8da1823a6",
    "details": {
      "sha": "c74f2e9921ab062c67184a09e7e0fa76ca8347bd",
      "filename": "spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/http/ByteArrayHttpInputMessage.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/a49f6622d7d9d3593b60672df56318d8da1823a6/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fdubbo%2Fhttp%2FByteArrayHttpInputMessage.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/a49f6622d7d9d3593b60672df56318d8da1823a6/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fdubbo%2Fhttp%2FByteArrayHttpInputMessage.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fdubbo%2Fhttp%2FByteArrayHttpInputMessage.java?ref=a49f6622d7d9d3593b60672df56318d8da1823a6",
      "patch": "@@ -16,10 +16,11 @@\n  */\n package org.springframework.cloud.alibaba.dubbo.http;\n \n+import com.alibaba.dubbo.common.io.UnsafeByteArrayInputStream;\n+\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpInputMessage;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n \n@@ -28,7 +29,7 @@\n  *\n  * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy</a>\n  */\n-public class ByteArrayHttpInputMessage implements HttpInputMessage {\n+class ByteArrayHttpInputMessage implements HttpInputMessage {\n \n     private final HttpHeaders httpHeaders;\n \n@@ -40,7 +41,7 @@ public ByteArrayHttpInputMessage(byte[] body) {\n \n     public ByteArrayHttpInputMessage(HttpHeaders httpHeaders, byte[] body) {\n         this.httpHeaders = httpHeaders;\n-        this.inputStream = new ByteArrayInputStream(body);\n+        this.inputStream = new UnsafeByteArrayInputStream(body);\n     }\n \n     @Override",
      "parent_sha": "2f5ac6b7ad63713c46e11ee695caf592562e362c"
    }
  },
  {
    "oid": "c94eec582852111cb8ebc036ebfa2bf67f5907f7",
    "message": "Change log level when the service attribute of nacos is empty.",
    "date": "2019-02-28T06:18:26Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/c94eec582852111cb8ebc036ebfa2bf67f5907f7",
    "details": {
      "sha": "6c362af6fed6e1729162ca1795fac56002266f1f",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/registry/NacosServiceRegistry.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/c94eec582852111cb8ebc036ebfa2bf67f5907f7/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fregistry%2FNacosServiceRegistry.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/c94eec582852111cb8ebc036ebfa2bf67f5907f7/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fregistry%2FNacosServiceRegistry.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fregistry%2FNacosServiceRegistry.java?ref=c94eec582852111cb8ebc036ebfa2bf67f5907f7",
      "patch": "@@ -46,7 +46,7 @@ public NacosServiceRegistry(NacosDiscoveryProperties nacosDiscoveryProperties) {\n \tpublic void register(Registration registration) {\n \n \t\tif (StringUtils.isEmpty(registration.getServiceId())) {\n-\t\t\tlog.info(\"No service to register for nacos client...\");\n+\t\t\tlog.warn(\"No service to register for nacos client...\");\n \t\t\treturn;\n \t\t}\n \n@@ -76,7 +76,7 @@ public void deregister(Registration registration) {\n \t\tlog.info(\"De-registering from Nacos Server now...\");\n \n \t\tif (StringUtils.isEmpty(registration.getServiceId())) {\n-\t\t\tlog.info(\"No dom to de-register for nacos client...\");\n+\t\t\tlog.warn(\"No dom to de-register for nacos client...\");\n \t\t\treturn;\n \t\t}\n ",
      "parent_sha": "a543be5f9fa2be6086745d34f923fa2c0da21242"
    }
  },
  {
    "oid": "6c4d6024d717fb0bb8631f2af21cbabd2af01a41",
    "message": "optimize: optimize SeataHystrixConcurrencyStrategy",
    "date": "2020-04-08T13:11:31Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/6c4d6024d717fb0bb8631f2af21cbabd2af01a41",
    "details": {
      "sha": "94185c8a30f1714395a122d885e3fb5184cb0421",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/hystrix/SeataHystrixConcurrencyStrategy.java",
      "status": "modified",
      "additions": 82,
      "deletions": 9,
      "changes": 91,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/6c4d6024d717fb0bb8631f2af21cbabd2af01a41/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Ffeign%2Fhystrix%2FSeataHystrixConcurrencyStrategy.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/6c4d6024d717fb0bb8631f2af21cbabd2af01a41/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Ffeign%2Fhystrix%2FSeataHystrixConcurrencyStrategy.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Ffeign%2Fhystrix%2FSeataHystrixConcurrencyStrategy.java?ref=6c4d6024d717fb0bb8631f2af21cbabd2af01a41",
      "patch": "@@ -16,23 +16,93 @@\n \n package com.alibaba.cloud.seata.feign.hystrix;\n \n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n \n+import com.netflix.hystrix.HystrixThreadPoolKey;\n+import com.netflix.hystrix.HystrixThreadPoolProperties;\n import com.netflix.hystrix.strategy.HystrixPlugins;\n import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifier;\n+import com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHook;\n+import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisher;\n+import com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategy;\n+import com.netflix.hystrix.strategy.properties.HystrixProperty;\n import io.seata.core.context.RootContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.web.context.request.RequestAttributes;\n+import org.springframework.web.context.request.RequestContextHolder;\n \n /**\n  * @author xiaojing\n  */\n public class SeataHystrixConcurrencyStrategy extends HystrixConcurrencyStrategy {\n \n+\tprivate final Logger logger = LoggerFactory.getLogger(SeataHystrixConcurrencyStrategy.class);\n \tprivate HystrixConcurrencyStrategy delegate;\n \n \tpublic SeataHystrixConcurrencyStrategy() {\n-\t\tthis.delegate = HystrixPlugins.getInstance().getConcurrencyStrategy();\n-\t\tHystrixPlugins.reset();\n-\t\tHystrixPlugins.getInstance().registerConcurrencyStrategy(this);\n+\t\ttry {\n+\t\t\tthis.delegate = HystrixPlugins.getInstance().getConcurrencyStrategy();\n+\t\t\tif (this.delegate instanceof SeataHystrixConcurrencyStrategy) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tHystrixCommandExecutionHook commandExecutionHook = HystrixPlugins.getInstance().getCommandExecutionHook();\n+\t\t\tHystrixEventNotifier eventNotifier = HystrixPlugins.getInstance().getEventNotifier();\n+\t\t\tHystrixMetricsPublisher metricsPublisher = HystrixPlugins.getInstance().getMetricsPublisher();\n+\t\t\tHystrixPropertiesStrategy propertiesStrategy = HystrixPlugins.getInstance().getPropertiesStrategy();\n+\t\t\tlogCurrentStateOfHystrixPlugins(eventNotifier, metricsPublisher, propertiesStrategy);\n+\t\t\tHystrixPlugins.reset();\n+\t\t\tHystrixPlugins.getInstance().registerConcurrencyStrategy(this);\n+\t\t\tHystrixPlugins.getInstance().registerCommandExecutionHook(commandExecutionHook);\n+\t\t\tHystrixPlugins.getInstance().registerEventNotifier(eventNotifier);\n+\t\t\tHystrixPlugins.getInstance().registerMetricsPublisher(metricsPublisher);\n+\t\t\tHystrixPlugins.getInstance().registerPropertiesStrategy(propertiesStrategy);\n+\t\t} catch (Exception ex) {\n+\t\t\tlogger.error(\"Failed to register Seata Hystrix Concurrency Strategy\", ex);\n+\t\t}\n+\t}\n+\n+\tprivate void logCurrentStateOfHystrixPlugins(HystrixEventNotifier eventNotifier,\n+\t\t\t\t\t\t\t\t\t\t\t\t HystrixMetricsPublisher metricsPublisher,\n+\t\t\t\t\t\t\t\t\t\t\t\t HystrixPropertiesStrategy propertiesStrategy) {\n+\t\tif (logger.isDebugEnabled()) {\n+\t\t\tlogger.debug(\"Current Hystrix plugins configuration is [\" + \"concurrencyStrategy [\" + this.delegate + \"],\"\n+\t\t\t\t+ \"eventNotifier [\" + eventNotifier + \"],\" + \"metricPublisher [\" + metricsPublisher + \"],\"\n+\t\t\t\t+ \"propertiesStrategy [\" + propertiesStrategy + \"],\" + \"]\");\n+\t\t\tlogger.debug(\"Registering Seata Hystrix Concurrency Strategy.\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic ThreadPoolExecutor getThreadPool(HystrixThreadPoolKey threadPoolKey, HystrixProperty<Integer> corePoolSize,\n+\t\t\t\t\t\t\t\t\t\t\tHystrixProperty<Integer> maximumPoolSize,\n+\t\t\t\t\t\t\t\t\t\t\tHystrixProperty<Integer> keepAliveTime, TimeUnit unit,\n+\t\t\t\t\t\t\t\t\t\t\tBlockingQueue<Runnable> workQueue) {\n+\t\treturn this.delegate.getThreadPool(threadPoolKey, corePoolSize, maximumPoolSize, keepAliveTime, unit,\n+\t\t\tworkQueue);\n+\t}\n+\n+\t@Override\n+\tpublic ThreadPoolExecutor getThreadPool(HystrixThreadPoolKey threadPoolKey,\n+\t\t\t\t\t\t\t\t\t\t\tHystrixThreadPoolProperties threadPoolProperties) {\n+\t\treturn this.delegate.getThreadPool(threadPoolKey, threadPoolProperties);\n+\t}\n+\n+\t@Override\n+\tpublic BlockingQueue<Runnable> getBlockingQueue(int maxQueueSize) {\n+\t\treturn this.delegate.getBlockingQueue(maxQueueSize);\n+\t}\n+\n+\t@Override\n+\tpublic <T> HystrixRequestVariable<T> getRequestVariable(HystrixRequestVariableLifecycle<T> rv) {\n+\t\treturn this.delegate.getRequestVariable(rv);\n \t}\n \n \t@Override\n@@ -44,15 +114,14 @@ public <K> Callable<K> wrapCallable(Callable<K> c) {\n \t\tCallable<K> wrappedCallable;\n \t\tif (this.delegate != null) {\n \t\t\twrappedCallable = this.delegate.wrapCallable(c);\n-\t\t}\n-\t\telse {\n+\t\t} else {\n \t\t\twrappedCallable = c;\n \t\t}\n \t\tif (wrappedCallable instanceof SeataContextCallable) {\n \t\t\treturn wrappedCallable;\n \t\t}\n \n-\t\treturn new SeataContextCallable<>(wrappedCallable);\n+\t\treturn new SeataContextCallable<>(wrappedCallable, RequestContextHolder.getRequestAttributes());\n \t}\n \n \tprivate static class SeataContextCallable<K> implements Callable<K> {\n@@ -61,19 +130,23 @@ private static class SeataContextCallable<K> implements Callable<K> {\n \n \t\tprivate final String xid;\n \n-\t\tSeataContextCallable(Callable<K> actual) {\n+\t\tprivate final RequestAttributes requestAttributes;\n+\n+\t\tSeataContextCallable(Callable<K> actual, RequestAttributes requestAttribute) {\n \t\t\tthis.actual = actual;\n+\t\t\tthis.requestAttributes = requestAttribute;\n \t\t\tthis.xid = RootContext.getXID();\n \t\t}\n \n \t\t@Override\n \t\tpublic K call() throws Exception {\n \t\t\ttry {\n+\t\t\t\tRequestContextHolder.setRequestAttributes(requestAttributes);\n \t\t\t\tRootContext.bind(xid);\n \t\t\t\treturn actual.call();\n-\t\t\t}\n-\t\t\tfinally {\n+\t\t\t} finally {\n \t\t\t\tRootContext.unbind();\n+\t\t\t\tRequestContextHolder.resetRequestAttributes();\n \t\t\t}\n \t\t}\n ",
      "parent_sha": "a3299d529aa462c4de37bb99a0a88e2e08e94331"
    }
  },
  {
    "oid": "2d2ffd3560ffded605349181e4e2a723b05e34cc",
    "message": "update nacos-config test case",
    "date": "2019-04-16T08:57:33Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/2d2ffd3560ffded605349181e4e2a723b05e34cc",
    "details": {
      "sha": "10fdf1635e2f1b9a95b20b6627defa46107508e8",
      "filename": "spring-cloud-alibaba-nacos-config/src/test/java/org/springframework/cloud/alibaba/nacos/NacosConfigurationTests.java",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/2d2ffd3560ffded605349181e4e2a723b05e34cc/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosConfigurationTests.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/2d2ffd3560ffded605349181e4e2a723b05e34cc/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosConfigurationTests.java?ref=2d2ffd3560ffded605349181e4e2a723b05e34cc",
      "patch": "@@ -96,13 +96,11 @@ public class NacosConfigurationTests {\n \t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args)\n \t\t\t\t\t\tthrows Throwable {\n \n-\t\t\t\t\tif (\"test-name.properties\".equals(args[0])\n-\t\t\t\t\t\t\t&& \"test-group\".equals(args[1])) {\n+\t\t\t\t\tif (\"test-name.properties\".equals(args[0])) {\n \t\t\t\t\t\treturn \"user.nacos-age=1\";\n \t\t\t\t\t}\n \n-\t\t\t\t\tif (\"test-name-dev.properties\".equals(args[0])\n-\t\t\t\t\t\t\t&& \"test-group\".equals(args[1])) {\n+\t\t\t\t\tif (\"test-name-dev.properties\".equals(args[0])) {\n \t\t\t\t\t\treturn \"user.nacos-name=dev\";\n \t\t\t\t\t}\n \n@@ -149,7 +147,7 @@ public Object invoke(Object proxy, Method method, Object[] args)\n \tprivate NacosRefreshHistory refreshHistory;\n \n \t@Test\n-\tpublic void contextLoads() throws Exception {\n+\tpublic void contextLoads() {\n \n \t\tassertNotNull(\"NacosPropertySourceLocator was not created\", locator);\n \t\tassertNotNull(\"NacosConfigProperties was not created\", properties);\n@@ -237,11 +235,11 @@ private void checkoutNacosConfigEncode() {\n \n \tprivate void checkoutDataLoad() {\n \n-\t\tAssert.assertEquals(environment.getProperty(\"user.nacos-name\"), \"dev\");\n-\t\tAssert.assertEquals(environment.getProperty(\"user.nacos-age\"), \"1\");\n+\t\tAssert.assertEquals(\"dev\", environment.getProperty(\"user.nacos-name\"));\n+\t\tAssert.assertEquals(\"1\", environment.getProperty(\"user.nacos-age\"));\n \t}\n \n-\tprivate void checkoutEndpoint() throws Exception {\n+\tprivate void checkoutEndpoint() {\n \t\tNacosConfigEndpoint nacosConfigEndpoint = new NacosConfigEndpoint(properties,\n \t\t\t\trefreshHistory);\n \t\tMap<String, Object> map = nacosConfigEndpoint.invoke();",
      "parent_sha": "ca23643cd3a7644ec3c58442763bd8808681601c"
    }
  },
  {
    "oid": "695938280f96a81fbb2b17831a978c3e0514f920",
    "message": "fix: Remove dummy method",
    "date": "2022-01-14T12:57:45Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/695938280f96a81fbb2b17831a978c3e0514f920",
    "details": {
      "sha": "282eb72cb72fd92aab63a6cc8f5aed27b9094da5",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLocationResolver.java",
      "status": "modified",
      "additions": 6,
      "deletions": 27,
      "changes": 33,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/695938280f96a81fbb2b17831a978c3e0514f920/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fconfigdata%2FNacosConfigDataLocationResolver.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/695938280f96a81fbb2b17831a978c3e0514f920/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fconfigdata%2FNacosConfigDataLocationResolver.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fconfigdata%2FNacosConfigDataLocationResolver.java?ref=695938280f96a81fbb2b17831a978c3e0514f920",
      "patch": "@@ -25,10 +25,10 @@\n import com.alibaba.nacos.api.config.ConfigFactory;\n import com.alibaba.nacos.api.config.ConfigService;\n import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.utils.StringUtils;\n import org.apache.commons.logging.Log;\n \n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n import org.springframework.boot.BootstrapContextClosedEvent;\n@@ -53,6 +53,8 @@ public class NacosConfigDataLocationResolver\n \t */\n \tpublic static final String PREFIX = \"nacos:\";\n \n+\tpublic static final String DEFAULT_NAMESPACE = StringUtils.EMPTY;\n+\n \tprivate final Log log;\n \n \tpublic NacosConfigDataLocationResolver(Log log) {\n@@ -141,7 +143,8 @@ public List<NacosConfigDataResource> resolveProfileSpecific(\n \t\tNacosConfigDataResource resource = new NacosConfigDataResource(properties,\n \t\t\t\tlocation.isOptional(), profiles, log,\n \t\t\t\tnew NacosItemConfig()\n-\t\t\t\t\t\t.setNamespace(Objects.toString(properties.getNamespace(), \"\"))\n+\t\t\t\t\t\t.setNamespace(Objects.toString(properties.getNamespace(),\n+\t\t\t\t\t\t\t\tDEFAULT_NAMESPACE))\n \t\t\t\t\t\t.setGroup(groupFor(uris, properties))\n \t\t\t\t\t\t.setDataId(dataIdFor(uris, properties))\n \t\t\t\t\t\t.setSuffix(suffixFor(uris, properties))\n@@ -155,7 +158,7 @@ public List<NacosConfigDataResource> resolveProfileSpecific(\n \n \tprivate void registerOrUpdateIndexes(String uris, NacosConfigProperties properties,\n \t\t\tConfigurableBootstrapContext bootstrapContext) {\n-\t\tString namespace = Objects.toString(properties.getNamespace(), \"\");\n+\t\tString namespace = Objects.toString(properties.getNamespace(), DEFAULT_NAMESPACE);\n \t\tif (bootstrapContext.isRegistered(ConfigServiceIndexes.class)) {\n \t\t\tConfigServiceIndexes indexes = bootstrapContext\n \t\t\t\t\t.get(ConfigServiceIndexes.class);\n@@ -210,30 +213,6 @@ private void addNacosConfigProperties2BeanFactory(String uris,\n \t\t}\n \t}\n \n-\tprivate void addNacosConfigProperties2BeanFactory2(String uris,\n-\t\t\tBootstrapContextClosedEvent event) {\n-\t\tConfigurableListableBeanFactory factory = event.getApplicationContext()\n-\t\t\t\t.getBeanFactory();\n-\t\tNacosConfigProperties nacosConfigProperties = event.getBootstrapContext()\n-\t\t\t\t.get(NacosConfigProperties.class);\n-\n-\t\tString serverAddr = serverAddrFor(uris);\n-\t\t// override serverAddr\n-\t\tnacosConfigProperties.setServerAddr(serverAddr);\n-\n-\t\tString propertiesBeanDefinitionName = \"configDataNacosConfigProperties\";\n-\t\tBeanDefinitionRegistry definitionRegistry = (BeanDefinitionRegistry) factory;\n-\t\tif (!definitionRegistry.containsBeanDefinition(propertiesBeanDefinitionName)) {\n-\t\t\tAbstractBeanDefinition definition = BeanDefinitionBuilder\n-\t\t\t\t\t.genericBeanDefinition(NacosConfigProperties.class, () -> {\n-\t\t\t\t\t\treturn nacosConfigProperties;\n-\t\t\t\t\t}).getBeanDefinition();\n-\n-\t\t\tdefinitionRegistry.registerBeanDefinition(propertiesBeanDefinitionName,\n-\t\t\t\t\tdefinition);\n-\t\t}\n-\t}\n-\n \tprivate String serverAddrFor(String uris) {\n \t\tURI uri = getUri(uris);\n \t\tStringBuilder serverAddr = new StringBuilder();",
      "parent_sha": "83873e5fbefbe17ad6fce57f3ddecade9e1dce11"
    }
  },
  {
    "oid": "d2c427369e3fd9e9940b930d38c38057c46d9976",
    "message": "Fix multiple meaning of example",
    "date": "2022-03-18T08:11:28Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/d2c427369e3fd9e9940b930d38c38057c46d9976",
    "details": {
      "sha": "a03ff2eb81be505b661df99e282acf11191c7d32",
      "filename": "spring-cloud-alibaba-examples/nacos-example/nacos-config-example/src/main/java/com/alibaba/cloud/examples/Application.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/d2c427369e3fd9e9940b930d38c38057c46d9976/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2FApplication.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/d2c427369e3fd9e9940b930d38c38057c46d9976/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2FApplication.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2FApplication.java?ref=d2c427369e3fd9e9940b930d38c38057c46d9976",
      "patch": "@@ -63,7 +63,7 @@ class UserConfig {\n \n \tprivate int age;\n \n-\tprivate String name;\n+\tprivate String nickname;\n \n \tprivate String hr;\n \n@@ -79,12 +79,12 @@ public void setAge(int age) {\n \t\tthis.age = age;\n \t}\n \n-\tpublic String getName() {\n-\t\treturn name;\n+\tpublic String getNickname() {\n+\t\treturn nickname;\n \t}\n \n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n+\tpublic void setNickname(String nickname) {\n+\t\tthis.nickname = nickname;\n \t}\n \n \tpublic Map<String, Object> getMap() {\n@@ -113,7 +113,7 @@ public void setHr(String hr) {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"UserConfig{\" + \"age=\" + age + \", name='\" + name + '\\'' + \", map=\" + map\n+\t\treturn \"UserConfig{\" + \"age=\" + age + \", nickname='\" + nickname + '\\'' + \", map=\" + map\n \t\t\t\t+ \", hr='\" + hr + '\\'' + \", users=\" + users + '}';\n \t}\n \n@@ -208,21 +208,21 @@ class SampleController {\n \t@Autowired\n \tprivate Environment environment;\n \n-\t@Value(\"${user.name:zz}\")\n-\tString userName;\n+\t@Value(\"${user.nickname:zz}\")\n+\tString nickname;\n \n \t@Value(\"${user.age:25}\")\n \tInteger age;\n \n \t@RequestMapping(\"/user\")\n \tpublic String simple() {\n-\t\treturn \"Hello Nacos Config!\" + \"Hello \" + userName + \" \" + age + \" [UserConfig]: \"\n+\t\treturn \"Hello Nacos Config!\" + \"Hello \" + nickname + \" \" + age + \" [UserConfig]: \"\n \t\t\t\t+ userConfig + \"!\" + nacosConfigManager.getConfigService();\n \t}\n \n-\t@RequestMapping(\"/get/{name}\")\n-\tpublic String getValue(@PathVariable String name) {\n-\t\treturn String.valueOf(environment.getProperty(name));\n+\t@RequestMapping(\"/get/{nickname}\")\n+\tpublic String getValue(@PathVariable String nickname) {\n+\t\treturn String.valueOf(environment.getProperty(nickname));\n \t}\n \n \t@RequestMapping(\"/bool\")",
      "parent_sha": "2f0ad2032353c765da8ae4e57375d59be059bd45"
    }
  },
  {
    "oid": "ba101f479ed6330371f11e04807a96c22786ce1c",
    "message": "calculate exception ratio in Sentinel RestTemplate",
    "date": "2018-12-18T14:20:52Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/ba101f479ed6330371f11e04807a96c22786ce1c",
    "details": {
      "sha": "2bfb39e3a95f4e4deddea9f1ac4c9bf523cd91e6",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelProtectInterceptor.java",
      "status": "modified",
      "additions": 17,
      "deletions": 8,
      "changes": 25,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/ba101f479ed6330371f11e04807a96c22786ce1c/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelProtectInterceptor.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/ba101f479ed6330371f11e04807a96c22786ce1c/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelProtectInterceptor.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelProtectInterceptor.java?ref=ba101f479ed6330371f11e04807a96c22786ce1c",
      "patch": "@@ -33,6 +33,7 @@\n \n import com.alibaba.csp.sentinel.Entry;\n import com.alibaba.csp.sentinel.SphU;\n+import com.alibaba.csp.sentinel.Tracer;\n import com.alibaba.csp.sentinel.context.ContextUtil;\n import com.alibaba.csp.sentinel.slots.block.BlockException;\n import com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;\n@@ -69,16 +70,24 @@ public ClientHttpResponse intercept(HttpRequest request, byte[] body,\n \t\t\thostEntry = SphU.entry(hostResource);\n \t\t\tresponse = execution.execute(request, body);\n \t\t}\n-\t\tcatch (BlockException e) {\n-\t\t\ttry {\n-\t\t\t\treturn handleBlockException(request, body, execution, e);\n+\t\tcatch (Throwable e) {\n+\t\t\tif (!BlockException.isBlockException(e)) {\n+\t\t\t\tTracer.trace(e);\n+\t\t\t\tthrow new IllegalStateException(e);\n \t\t\t}\n-\t\t\tcatch (Exception ex) {\n-\t\t\t\tif (ex instanceof IllegalStateException) {\n-\t\t\t\t\tthrow (IllegalStateException) ex;\n+\t\t\telse {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn handleBlockException(request, body, execution,\n+\t\t\t\t\t\t\t(BlockException) e);\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tif (ex instanceof IllegalStateException) {\n+\t\t\t\t\t\tthrow (IllegalStateException) ex;\n+\t\t\t\t\t}\n+\t\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\t\"sentinel handle BlockException error: \" + ex.getMessage(),\n+\t\t\t\t\t\t\tex);\n \t\t\t\t}\n-\t\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\t\"sentinel handle BlockException error: \" + ex.getMessage(), ex);\n \t\t\t}\n \t\t}\n \t\tfinally {",
      "parent_sha": "89178bc913d03b92a03561dee18ff03b07b8edb0"
    }
  },
  {
    "oid": "a701f8ca742e7403d642ca3f3c3d95bf381c3dba",
    "message": "Let the private to be public",
    "date": "2019-08-01T05:07:05Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/a701f8ca742e7403d642ca3f3c3d95bf381c3dba",
    "details": {
      "sha": "8e11be7a226003f27aa6267bf4dab4c577d20aac",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosDiscoveryClient.java",
      "status": "modified",
      "additions": 78,
      "deletions": 81,
      "changes": 159,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/a701f8ca742e7403d642ca3f3c3d95bf381c3dba/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/a701f8ca742e7403d642ca3f3c3d95bf381c3dba/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java?ref=a701f8ca742e7403d642ca3f3c3d95bf381c3dba",
      "patch": "@@ -16,97 +16,94 @@\n \n package com.alibaba.cloud.nacos.discovery;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import com.alibaba.cloud.nacos.NacosDiscoveryProperties;\n+import com.alibaba.cloud.nacos.NacosServiceInstance;\n+import com.alibaba.nacos.api.naming.pojo.Instance;\n+import com.alibaba.nacos.api.naming.pojo.ListView;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.client.ServiceInstance;\n import org.springframework.cloud.client.discovery.DiscoveryClient;\n \n-import com.alibaba.cloud.nacos.NacosDiscoveryProperties;\n-import com.alibaba.cloud.nacos.NacosServiceInstance;\n-import com.alibaba.nacos.api.naming.pojo.Instance;\n-import com.alibaba.nacos.api.naming.pojo.ListView;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * @author xiaojing\n  * @author renhaojun\n  */\n public class NacosDiscoveryClient implements DiscoveryClient {\n \n-\tprivate static final Logger log = LoggerFactory.getLogger(NacosDiscoveryClient.class);\n-\tpublic static final String DESCRIPTION = \"Spring Cloud Nacos Discovery Client\";\n-\n-\tprivate NacosDiscoveryProperties discoveryProperties;\n-\n-\tpublic NacosDiscoveryClient(NacosDiscoveryProperties discoveryProperties) {\n-\t\tthis.discoveryProperties = discoveryProperties;\n-\t}\n-\n-\t@Override\n-\tpublic String description() {\n-\t\treturn DESCRIPTION;\n-\t}\n-\n-\t@Override\n-\tpublic List<ServiceInstance> getInstances(String serviceId) {\n-\t\ttry {\n-\t\t\tList<Instance> instances = discoveryProperties.namingServiceInstance()\n-\t\t\t\t\t.selectInstances(serviceId, true);\n-\t\t\treturn hostToServiceInstanceList(instances, serviceId);\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tthrow new RuntimeException(\n-\t\t\t\t\t\"Can not get hosts from nacos server. serviceId: \" + serviceId, e);\n-\t\t}\n-\t}\n-\n-\tprivate static ServiceInstance hostToServiceInstance(Instance instance,\n-\t\t\tString serviceId) {\n-\t\tNacosServiceInstance nacosServiceInstance = new NacosServiceInstance();\n-\t\tnacosServiceInstance.setHost(instance.getIp());\n-\t\tnacosServiceInstance.setPort(instance.getPort());\n-\t\tnacosServiceInstance.setServiceId(serviceId);\n-\n-\t\tMap<String, String> metadata = new HashMap<>();\n-\t\tmetadata.put(\"nacos.instanceId\", instance.getInstanceId());\n-\t\tmetadata.put(\"nacos.weight\", instance.getWeight() + \"\");\n-\t\tmetadata.put(\"nacos.healthy\", instance.isHealthy() + \"\");\n-\t\tmetadata.put(\"nacos.cluster\", instance.getClusterName() + \"\");\n-\t\tmetadata.putAll(instance.getMetadata());\n-\t\tnacosServiceInstance.setMetadata(metadata);\n-\n-\t\tif (metadata.containsKey(\"secure\")) {\n-\t\t\tboolean secure = Boolean.parseBoolean(metadata.get(\"secure\"));\n-\t\t\tnacosServiceInstance.setSecure(secure);\n-\t\t}\n-\t\treturn nacosServiceInstance;\n-\t}\n-\n-\tprivate static List<ServiceInstance> hostToServiceInstanceList(\n-\t\t\tList<Instance> instances, String serviceId) {\n-\t\tList<ServiceInstance> result = new ArrayList<>(instances.size());\n-\t\tfor (Instance instance : instances) {\n-\t\t\tresult.add(hostToServiceInstance(instance, serviceId));\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getServices() {\n-\n-\t\ttry {\n-\t\t\tListView<String> services = discoveryProperties.namingServiceInstance()\n-\t\t\t\t\t.getServicesOfServer(1, Integer.MAX_VALUE);\n-\t\t\treturn services.getData();\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tlog.error(\"get service name from nacos server fail,\", e);\n-\t\t\treturn Collections.emptyList();\n-\t\t}\n-\t}\n+    private static final Logger log = LoggerFactory.getLogger(NacosDiscoveryClient.class);\n+    public static final String DESCRIPTION = \"Spring Cloud Nacos Discovery Client\";\n+\n+    private NacosDiscoveryProperties discoveryProperties;\n+\n+    public NacosDiscoveryClient(NacosDiscoveryProperties discoveryProperties) {\n+        this.discoveryProperties = discoveryProperties;\n+    }\n+\n+    @Override\n+    public String description() {\n+        return DESCRIPTION;\n+    }\n+\n+    @Override\n+    public List<ServiceInstance> getInstances(String serviceId) {\n+        try {\n+            List<Instance> instances = discoveryProperties.namingServiceInstance()\n+                    .selectInstances(serviceId, true);\n+            return hostToServiceInstanceList(instances, serviceId);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\n+                    \"Can not get hosts from nacos server. serviceId: \" + serviceId, e);\n+        }\n+    }\n+\n+    public static ServiceInstance hostToServiceInstance(Instance instance,\n+                                                        String serviceId) {\n+        NacosServiceInstance nacosServiceInstance = new NacosServiceInstance();\n+        nacosServiceInstance.setHost(instance.getIp());\n+        nacosServiceInstance.setPort(instance.getPort());\n+        nacosServiceInstance.setServiceId(serviceId);\n+\n+        Map<String, String> metadata = new HashMap<>();\n+        metadata.put(\"nacos.instanceId\", instance.getInstanceId());\n+        metadata.put(\"nacos.weight\", instance.getWeight() + \"\");\n+        metadata.put(\"nacos.healthy\", instance.isHealthy() + \"\");\n+        metadata.put(\"nacos.cluster\", instance.getClusterName() + \"\");\n+        metadata.putAll(instance.getMetadata());\n+        nacosServiceInstance.setMetadata(metadata);\n+\n+        if (metadata.containsKey(\"secure\")) {\n+            boolean secure = Boolean.parseBoolean(metadata.get(\"secure\"));\n+            nacosServiceInstance.setSecure(secure);\n+        }\n+        return nacosServiceInstance;\n+    }\n+\n+    public static List<ServiceInstance> hostToServiceInstanceList(\n+            List<Instance> instances, String serviceId) {\n+        List<ServiceInstance> result = new ArrayList<>(instances.size());\n+        for (Instance instance : instances) {\n+            result.add(hostToServiceInstance(instance, serviceId));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<String> getServices() {\n+\n+        try {\n+            ListView<String> services = discoveryProperties.namingServiceInstance()\n+                    .getServicesOfServer(1, Integer.MAX_VALUE);\n+            return services.getData();\n+        } catch (Exception e) {\n+            log.error(\"get service name from nacos server fail,\", e);\n+            return Collections.emptyList();\n+        }\n+    }\n }",
      "parent_sha": "be188031043c8d119e9db05fbd0dbd6806884ae5"
    }
  },
  {
    "oid": "f7455bcf88d4c9e8731ae1f9fc62b484ea7627e4",
    "message": "add Json parser test cast",
    "date": "2020-01-13T02:44:15Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/f7455bcf88d4c9e8731ae1f9fc62b484ea7627e4",
    "details": {
      "sha": "b06cfd86267d9d0af165529f7b89531332c07730",
      "filename": "spring-cloud-alibaba-nacos-config/src/test/java/com/alibaba/cloud/nacos/NacosConfigurationXmlJsonTest.java",
      "status": "modified",
      "additions": 58,
      "deletions": 18,
      "changes": 76,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/f7455bcf88d4c9e8731ae1f9fc62b484ea7627e4/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigurationXmlJsonTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/f7455bcf88d4c9e8731ae1f9fc62b484ea7627e4/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigurationXmlJsonTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigurationXmlJsonTest.java?ref=f7455bcf88d4c9e8731ae1f9fc62b484ea7627e4",
      "patch": "@@ -39,6 +39,7 @@\n import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -51,24 +52,23 @@\n @PowerMockIgnore(\"javax.management.*\")\n @PowerMockRunnerDelegate(SpringRunner.class)\n @PrepareForTest({ NacosConfigService.class })\n-@SpringBootTest(classes = NacosConfigurationXmlJsonTest.TestConfig.class,\n-\t\tproperties = { \"spring.application.name=xmlApp\", \"spring.profiles.active=dev\",\n-\t\t\t\t\"spring.cloud.nacos.config.server-addr=127.0.0.1:8848\",\n-\t\t\t\t\"spring.cloud.nacos.config.namespace=test-namespace\",\n-\t\t\t\t\"spring.cloud.nacos.config.encode=utf-8\",\n-\t\t\t\t\"spring.cloud.nacos.config.timeout=1000\",\n-\t\t\t\t\"spring.cloud.nacos.config.group=test-group\",\n-\t\t\t\t\"spring.cloud.nacos.config.name=test-name\",\n-\t\t\t\t\"spring.cloud.nacos.config.cluster-name=test-cluster\",\n-\t\t\t\t\"spring.cloud.nacos.config.file-extension=xml\",\n-\t\t\t\t\"spring.cloud.nacos.config.contextPath=test-contextpath\",\n-\t\t\t\t\"spring.cloud.nacos.config.ext-config[0].data-id=ext-json-test.json\",\n-\t\t\t\t\"spring.cloud.nacos.config.ext-config[1].data-id=ext-common02.properties\",\n-\t\t\t\t\"spring.cloud.nacos.config.ext-config[1].group=GLOBAL_GROUP\",\n-\t\t\t\t\"spring.cloud.nacos.config.shared-dataids=shared-data1.properties\",\n-\t\t\t\t\"spring.cloud.nacos.config.accessKey=test-accessKey\",\n-\t\t\t\t\"spring.cloud.nacos.config.secretKey=test-secretKey\" },\n-\t\twebEnvironment = NONE)\n+@SpringBootTest(classes = NacosConfigurationXmlJsonTest.TestConfig.class, properties = {\n+\t\t\"spring.application.name=xmlApp\", \"spring.profiles.active=dev\",\n+\t\t\"spring.cloud.nacos.config.server-addr=127.0.0.1:8848\",\n+\t\t\"spring.cloud.nacos.config.namespace=test-namespace\",\n+\t\t\"spring.cloud.nacos.config.encode=utf-8\",\n+\t\t\"spring.cloud.nacos.config.timeout=1000\",\n+\t\t\"spring.cloud.nacos.config.group=test-group\",\n+\t\t\"spring.cloud.nacos.config.name=test-name\",\n+\t\t\"spring.cloud.nacos.config.cluster-name=test-cluster\",\n+\t\t\"spring.cloud.nacos.config.file-extension=xml\",\n+\t\t\"spring.cloud.nacos.config.contextPath=test-contextpath\",\n+\t\t\"spring.cloud.nacos.config.ext-config[0].data-id=ext-json-test.json\",\n+\t\t\"spring.cloud.nacos.config.ext-config[1].data-id=ext-common02.properties\",\n+\t\t\"spring.cloud.nacos.config.ext-config[1].group=GLOBAL_GROUP\",\n+\t\t\"spring.cloud.nacos.config.shared-dataids=shared-data1.properties,shared-data.json\",\n+\t\t\"spring.cloud.nacos.config.accessKey=test-accessKey\",\n+\t\t\"spring.cloud.nacos.config.secretKey=test-secretKey\" }, webEnvironment = NONE)\n public class NacosConfigurationXmlJsonTest {\n \n \tstatic {\n@@ -136,6 +136,22 @@ public Object invoke(Object proxy, Method method, Object[] args)\n \t\t\t\t\t\treturn \"shared-name=shared-value-1\";\n \t\t\t\t\t}\n \n+\t\t\t\t\tif (\"shared-data.json\".equals(args[0])\n+\t\t\t\t\t\t\t&& \"DEFAULT_GROUP\".equals(args[1])) {\n+\t\t\t\t\t\treturn \"{\\n\" + \"    \\\"test\\\" : {\\n\"\n+\t\t\t\t\t\t\t\t+ \"        \\\"name\\\" : \\\"test\\\",\\n\"\n+\t\t\t\t\t\t\t\t+ \"        \\\"list\\\" : [\\n\" + \"            {\\n\"\n+\t\t\t\t\t\t\t\t+ \"                \\\"name\\\" :\\\"listname1\\\",\\n\"\n+\t\t\t\t\t\t\t\t+ \"                \\\"age\\\":1\\n\" + \"            },\\n\"\n+\t\t\t\t\t\t\t\t+ \"            {\\n\"\n+\t\t\t\t\t\t\t\t+ \"                \\\"name\\\" :\\\"listname2\\\",\\n\"\n+\t\t\t\t\t\t\t\t+ \"                \\\"age\\\":2\\n\" + \"            }\\n\"\n+\t\t\t\t\t\t\t\t+ \"        ],\\n\" + \"        \\\"metadata\\\" : {\\n\"\n+\t\t\t\t\t\t\t\t+ \"            \\\"intKey\\\" : 123,\\n\"\n+\t\t\t\t\t\t\t\t+ \"            \\\"booleanKey\\\" : true\\n\" + \"        }\\n\"\n+\t\t\t\t\t\t\t\t+ \"    }\\n\" + \"}\";\n+\t\t\t\t\t}\n+\n \t\t\t\t\treturn \"\";\n \t\t\t\t}\n \t\t\t});\n@@ -156,6 +172,9 @@ public Object invoke(Object proxy, Method method, Object[] args)\n \t@Autowired\n \tprivate NacosRefreshHistory refreshHistory;\n \n+\t@Autowired\n+\tprivate Environment environment;\n+\n \t@Test\n \tpublic void contextLoads() throws Exception {\n \n@@ -176,6 +195,27 @@ public void contextLoads() throws Exception {\n \n \t\tcheckoutEndpoint();\n \n+\t\tcheckJsonParser();\n+\t}\n+\n+\tprivate void checkJsonParser() {\n+\t\tassertThat(environment.getProperty(\"test.name\", String.class)).isEqualTo(\"test\");\n+\n+\t\tassertThat(environment.getProperty(\"test.list[0].name\", String.class))\n+\t\t\t\t.isEqualTo(\"listname1\");\n+\t\tassertThat(environment.getProperty(\"test.list[0].age\", Integer.class))\n+\t\t\t\t.isEqualTo(1);\n+\n+\t\tassertThat(environment.getProperty(\"test.list[1].name\", String.class))\n+\t\t\t\t.isEqualTo(\"listname2\");\n+\t\tassertThat(environment.getProperty(\"test.list[1].age\", Integer.class))\n+\t\t\t\t.isEqualTo(2);\n+\n+\t\tassertThat(\n+\t\t\t\t(Integer) environment.getProperty(\"test.metadata.intKey\", Object.class))\n+\t\t\t\t\t\t.isEqualTo(123);\n+\t\tassertThat((Boolean) environment.getProperty(\"test.metadata.booleanKey\",\n+\t\t\t\tObject.class)).isEqualTo(true);\n \t}\n \n \tprivate void checkoutNacosConfigServerAddr() {",
      "parent_sha": "0b50a47a02244ac3a0dc8db650169866a3a81c45"
    }
  },
  {
    "oid": "8941c175ed126eb504bb87e4a29c872368c2fd1d",
    "message": "Remove useless dependency",
    "date": "2020-09-07T06:31:09Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/8941c175ed126eb504bb87e4a29c872368c2fd1d",
    "details": {
      "sha": "2d0bbc063bb6f11a0ecb09488607f57405bf63c0",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/DubboMetadataServiceProxy.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/8941c175ed126eb504bb87e4a29c872368c2fd1d/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fservice%2FDubboMetadataServiceProxy.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/8941c175ed126eb504bb87e4a29c872368c2fd1d/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fservice%2FDubboMetadataServiceProxy.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fservice%2FDubboMetadataServiceProxy.java?ref=8941c175ed126eb504bb87e4a29c872368c2fd1d",
      "patch": "@@ -21,10 +21,11 @@\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import com.alibaba.cloud.dubbo.metadata.repository.DubboServiceMetadataRepository;\n import com.alibaba.cloud.dubbo.metadata.repository.ServiceInstanceSelector;\n import com.alibaba.cloud.dubbo.util.DubboMetadataUtils;\n+\n import org.apache.dubbo.common.URL;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -60,7 +61,6 @@ public class DubboMetadataServiceProxy implements BeanClassLoaderAware, Disposab\n \n \tpublic DubboMetadataServiceProxy(\n \t\t\tDubboGenericServiceFactory dubboGenericServiceFactory,\n-\t\t\tDubboServiceMetadataRepository dubboServiceMetadataRepository,\n \t\t\tDubboMetadataUtils dubboMetadataUtils,\n \t\t\tServiceInstanceSelector serviceInstanceSelector,\n \t\t\tDiscoveryClient discoveryClient) {",
      "parent_sha": "f9835821af00cf14312a86532cd478261c6a9e8a"
    }
  },
  {
    "oid": "d56434f73a1ffb3492729190a47dc2d8c62a6d76",
    "message": "fallback Method throw exception but seata does not rollback (#3786)\n\nCo-authored-by: xjs1919 <xjs@163.com>",
    "date": "2024-07-05T03:08:38Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/d56434f73a1ffb3492729190a47dc2d8c62a6d76",
    "details": {
      "sha": "b5398d842d85ba28fcecccb662b4d3c03f695941",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/feign/SentinelInvocationHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/d56434f73a1ffb3492729190a47dc2d8c62a6d76/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Ffeign%2FSentinelInvocationHandler.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/d56434f73a1ffb3492729190a47dc2d8c62a6d76/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Ffeign%2FSentinelInvocationHandler.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Ffeign%2FSentinelInvocationHandler.java?ref=d56434f73a1ffb3492729190a47dc2d8c62a6d76",
      "patch": "@@ -124,7 +124,7 @@ else if (\"toString\".equals(method.getName())) {\n \t\t\t\t\t\t\tthrow new AssertionError(e);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tcatch (InvocationTargetException e) {\n-\t\t\t\t\t\t\tthrow new AssertionError(e.getCause());\n+\t\t\t\t\t\t\tthrow e.getCause();\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse {",
      "parent_sha": "058496d625e33c0cf3db6ff6a8efe63c22f3d80b"
    }
  },
  {
    "oid": "f8ee5dc71c9d173f6062915156bd631ebbf40909",
    "message": "fix style code",
    "date": "2021-04-13T10:36:19Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/f8ee5dc71c9d173f6062915156bd631ebbf40909",
    "details": {
      "sha": "ae735840ce2f4993a86ee1f94ab763349dcf28e3",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/properties/RocketMQBinderConfigurationProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/f8ee5dc71c9d173f6062915156bd631ebbf40909/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fproperties%2FRocketMQBinderConfigurationProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/f8ee5dc71c9d173f6062915156bd631ebbf40909/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fproperties%2FRocketMQBinderConfigurationProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fproperties%2FRocketMQBinderConfigurationProperties.java?ref=f8ee5dc71c9d173f6062915156bd631ebbf40909",
      "patch": "@@ -48,7 +48,7 @@ public class RocketMQBinderConfigurationProperties {\n \tprivate String secretKey;\n \n \t/**\n-\t * Enum type for accessChannel, values: LOCAL, CLOUD\n+\t * Enum type for accessChannel, values: LOCAL, CLOUD.\n \t */\n \tprivate String accessChannel;\n ",
      "parent_sha": "e3c791179b6b9e5a08493d6677b70431a7ac8c37"
    }
  },
  {
    "oid": "a859bf44eef313488daab16146ddedb2e92b2cd0",
    "message": "Update NacosConfigProperties.java",
    "date": "2019-08-06T08:01:44Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/a859bf44eef313488daab16146ddedb2e92b2cd0",
    "details": {
      "sha": "5eb1c4fddbeab67f350003c967b55d5d56843773",
      "filename": "spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java",
      "status": "modified",
      "additions": 44,
      "deletions": 44,
      "changes": 88,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/a859bf44eef313488daab16146ddedb2e92b2cd0/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/a859bf44eef313488daab16146ddedb2e92b2cd0/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java?ref=a859bf44eef313488daab16146ddedb2e92b2cd0",
      "patch": "@@ -85,25 +85,25 @@ public class NacosConfigProperties {\n \t */\n \tprivate int timeout = 3000;\n \n-    /**\n-     * nacos maximum number of tolerable server reconnection errors\n-     */\n-    private String maxRetry;\n+\t/**\n+\t* nacos maximum number of tolerable server reconnection errors\n+\t*/\n+\tprivate String maxRetry;\n \n-    /**\n-     * nacos get config long poll timeout\n-     */\n-    private String configLongPollTimeout;\n+\t/**\n+\t* nacos get config long poll timeout\n+\t*/\n+\tprivate String configLongPollTimeout;\n \n-    /**\n-     * nacos get config failure retry time\n-     */\n-    private String configRetryTime;\n+\t/**\n+\t* nacos get config failure retry time\n+\t*/\n+\tprivate String configRetryTime;\n \n-    /**\n-     * nacos enable add a listener when the configuration is obtained\n-     */\n-    private boolean enableRemoteSyncConfig = false;\n+\t/**\n+\t* nacos enable add a listener when the configuration is obtained\n+\t*/\n+\tprivate boolean enableRemoteSyncConfig = false;\n \n \t/**\n \t * endpoint for Nacos, the domain name of a service, through which the server address\n@@ -201,37 +201,37 @@ public void setTimeout(int timeout) {\n \t\tthis.timeout = timeout;\n \t}\n \n-    public String getMaxRetry() {\n-        return maxRetry;\n-    }\n+\tpublic String getMaxRetry() {\n+\t\treturn maxRetry;\n+\t}\n \n-    public void setMaxRetry(String maxRetry) {\n-        this.maxRetry = maxRetry;\n-    }\n+\tpublic void setMaxRetry(String maxRetry) {\n+        \tthis.maxRetry = maxRetry;\n+\t}\n \n-    public String getConfigLongPollTimeout() {\n-        return configLongPollTimeout;\n-    }\n+\tpublic String getConfigLongPollTimeout() {\n+        \treturn configLongPollTimeout;\n+\t}\n \n-    public void setConfigLongPollTimeout(String configLongPollTimeout) {\n-        this.configLongPollTimeout = configLongPollTimeout;\n-    }\n+\tpublic void setConfigLongPollTimeout(String configLongPollTimeout) {\n+        \tthis.configLongPollTimeout = configLongPollTimeout;\n+\t}\n \n-    public String getConfigRetryTime() {\n-        return configRetryTime;\n-    }\n+\tpublic String getConfigRetryTime() {\n+        \treturn configRetryTime;\n+\t}\n \n-    public void setConfigRetryTime(String configRetryTime) {\n-        this.configRetryTime = configRetryTime;\n-    }\n+\tpublic void setConfigRetryTime(String configRetryTime) {\n+        \tthis.configRetryTime = configRetryTime;\n+\t}\n \n-    public Boolean getEnableRemoteSyncConfig() {\n-        return enableRemoteSyncConfig;\n-    }\n+\tpublic Boolean getEnableRemoteSyncConfig() {\n+        \treturn enableRemoteSyncConfig;\n+\t}\n \n-    public void setEnableRemoteSyncConfig(Boolean enableRemoteSyncConfig) {\n-        this.enableRemoteSyncConfig = enableRemoteSyncConfig;\n-    }\n+\tpublic void setEnableRemoteSyncConfig(Boolean enableRemoteSyncConfig) {\n+\t\tthis.enableRemoteSyncConfig = enableRemoteSyncConfig;\n+\t}\n \n \tpublic String getEndpoint() {\n \t\treturn endpoint;\n@@ -387,10 +387,10 @@ public ConfigService configServiceInstance() {\n \t\tproperties.put(SECRET_KEY, Objects.toString(this.secretKey, \"\"));\n \t\tproperties.put(CONTEXT_PATH, Objects.toString(this.contextPath, \"\"));\n \t\tproperties.put(CLUSTER_NAME, Objects.toString(this.clusterName, \"\"));\n-        properties.put(MAX_RETRY, Objects.toString(this.maxRetry, \"\"));\n-        properties.put(CONFIG_LONG_POLL_TIMEOUT, Objects.toString(this.configLongPollTimeout, \"\"));\n-        properties.put(CONFIG_RETRY_TIME, Objects.toString(this.configRetryTime, \"\"));\n-        properties.put(ENABLE_REMOTE_SYNC_CONFIG, Objects.toString(this.enableRemoteSyncConfig, \"\"));\n+\t\tproperties.put(MAX_RETRY, Objects.toString(this.maxRetry, \"\"));\n+\t\tproperties.put(CONFIG_LONG_POLL_TIMEOUT, Objects.toString(this.configLongPollTimeout, \"\"));\n+\t\tproperties.put(CONFIG_RETRY_TIME, Objects.toString(this.configRetryTime, \"\"));\n+\t\tproperties.put(ENABLE_REMOTE_SYNC_CONFIG, Objects.toString(this.enableRemoteSyncConfig, \"\"));\n \n \t\tString endpoint = Objects.toString(this.endpoint, \"\");\n \t\tif (endpoint.contains(\":\")) {",
      "parent_sha": "845469122cc312f43eb42c497f0d9c72be04836f"
    }
  },
  {
    "oid": "2e4f1f415aa45dc0a59b0c6ddfb962c57e218945",
    "message": "fix #841 get DubboTransported annotation attributes npe",
    "date": "2019-08-18T13:00:44Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/2e4f1f415aa45dc0a59b0c6ddfb962c57e218945",
    "details": {
      "sha": "74bb1e38b0426187693255e4adf3236a0a97c5e3",
      "filename": "spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/DubboLoadBalancedRestTemplateAutoConfiguration.java",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/2e4f1f415aa45dc0a59b0c6ddfb962c57e218945/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboLoadBalancedRestTemplateAutoConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/2e4f1f415aa45dc0a59b0c6ddfb962c57e218945/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboLoadBalancedRestTemplateAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fautoconfigure%2FDubboLoadBalancedRestTemplateAutoConfiguration.java?ref=2e4f1f415aa45dc0a59b0c6ddfb962c57e218945",
      "patch": "@@ -15,10 +15,7 @@\n  */\n package com.alibaba.cloud.dubbo.autoconfigure;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n import org.springframework.beans.factory.BeanClassLoaderAware;\n import org.springframework.beans.factory.SmartInitializingSingleton;\n@@ -148,8 +145,8 @@ private Map<String, Object> getDubboTranslatedAttributes(String beanName,\n \t\t\tMethodMetadata factoryMethodMetadata = annotatedBeanDefinition\n \t\t\t\t\t.getFactoryMethodMetadata();\n \t\t\tattributes = factoryMethodMetadata != null\n-\t\t\t\t\t? factoryMethodMetadata\n-\t\t\t\t\t\t\t.getAnnotationAttributes(DUBBO_TRANSPORTED_CLASS_NAME)\n+\t\t\t\t\t? Optional.ofNullable(factoryMethodMetadata\n+\t\t\t\t\t\t\t.getAnnotationAttributes(DUBBO_TRANSPORTED_CLASS_NAME)).orElse(attributes)\n \t\t\t\t\t: Collections.emptyMap();\n \t\t}\n \t\treturn attributesResolver.resolve(attributes);",
      "parent_sha": "dd1d556ad383e52905b7fdc65b87418163fde408"
    }
  },
  {
    "oid": "51209ca9c6082ee2815785342bbfe8e6f88f8224",
    "message": "Sentinel endpoint refactor",
    "date": "2019-01-14T02:52:38Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/51209ca9c6082ee2815785342bbfe8e6f88f8224",
    "details": {
      "sha": "54c2bd87ba08c28195044cd0751b218f9930d071",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/endpoint/SentinelEndpoint.java",
      "status": "modified",
      "additions": 30,
      "deletions": 36,
      "changes": 66,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/51209ca9c6082ee2815785342bbfe8e6f88f8224/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fendpoint%2FSentinelEndpoint.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/51209ca9c6082ee2815785342bbfe8e6f88f8224/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fendpoint%2FSentinelEndpoint.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fendpoint%2FSentinelEndpoint.java?ref=51209ca9c6082ee2815785342bbfe8e6f88f8224",
      "patch": "@@ -17,25 +17,23 @@\n package org.springframework.cloud.alibaba.sentinel.endpoint;\n \n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n import org.springframework.cloud.alibaba.sentinel.SentinelProperties;\n-import org.springframework.cloud.alibaba.sentinel.custom.SentinelDataSourceHandler;\n-import org.springframework.context.ApplicationContext;\n \n-import com.alibaba.csp.sentinel.datasource.ReadableDataSource;\n-import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n-import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n-import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;\n+import com.alibaba.csp.sentinel.adapter.servlet.config.WebServletConfig;\n+import com.alibaba.csp.sentinel.config.SentinelConfig;\n+import com.alibaba.csp.sentinel.log.LogBase;\n+import com.alibaba.csp.sentinel.slots.block.authority.AuthorityRuleManager;\n import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;\n-import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;\n import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRuleManager;\n-import com.alibaba.csp.sentinel.slots.system.SystemRule;\n import com.alibaba.csp.sentinel.slots.system.SystemRuleManager;\n+import com.alibaba.csp.sentinel.transport.config.TransportConfig;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n /**\n  * Endpoint for Sentinel, contains ans properties and rules\n@@ -48,39 +46,35 @@ public class SentinelEndpoint {\n \tprivate SentinelProperties sentinelProperties;\n \n \t@Autowired\n-\tprivate SentinelDataSourceHandler dataSourceHandler;\n-\n-\t@Autowired\n-\tprivate ApplicationContext applicationContext;\n+\tprivate ObjectMapper objectMapper;\n \n \t@ReadOperation\n \tpublic Map<String, Object> invoke() {\n \t\tfinal Map<String, Object> result = new HashMap<>();\n+\t\tif (sentinelProperties.isEnabled()) {\n \n-\t\tList<FlowRule> flowRules = FlowRuleManager.getRules();\n-\t\tList<DegradeRule> degradeRules = DegradeRuleManager.getRules();\n-\t\tList<SystemRule> systemRules = SystemRuleManager.getRules();\n-\t\tList<ParamFlowRule> paramFlowRules = ParamFlowRuleManager.getRules();\n-\t\tresult.put(\"properties\", sentinelProperties);\n-\t\tresult.put(\"FlowRules\", flowRules);\n-\t\tresult.put(\"DegradeRules\", degradeRules);\n-\t\tresult.put(\"SystemRules\", systemRules);\n-\t\tresult.put(\"ParamFlowRule\", paramFlowRules);\n-\t\tresult.put(\"datasources\", new HashMap<String, Object>());\n-\t\tdataSourceHandler.getDataSourceBeanNameList().forEach(dataSourceBeanName -> {\n-\t\t\tReadableDataSource dataSource = applicationContext.getBean(dataSourceBeanName,\n-\t\t\t\t\tReadableDataSource.class);\n-\t\t\ttry {\n-\t\t\t\t((HashMap) result.get(\"datasources\")).put(dataSourceBeanName,\n-\t\t\t\t\t\tdataSource.loadConfig());\n-\t\t\t}\n-\t\t\tcatch (Exception e) {\n-\t\t\t\t((HashMap) result.get(\"datasources\")).put(dataSourceBeanName,\n-\t\t\t\t\t\t\"load error: \" + e.getMessage());\n-\t\t\t}\n-\n-\t\t});\n+\t\t\tresult.put(\"logDir\", LogBase.getLogBaseDir());\n+\t\t\tresult.put(\"logUsePid\", LogBase.isLogNameUsePid());\n+\t\t\tresult.put(\"blockPage\", WebServletConfig.getBlockPage());\n+\t\t\tresult.put(\"metricsFileSize\", SentinelConfig.singleMetricFileSize());\n+\t\t\tresult.put(\"metricsFileCharset\", SentinelConfig.charset());\n+\t\t\tresult.put(\"totalMetricsFileCount\", SentinelConfig.totalMetricFileCount());\n+\t\t\tresult.put(\"consoleServer\", TransportConfig.getConsoleServer());\n+\t\t\tresult.put(\"clientIp\", TransportConfig.getHeartbeatClientIp());\n+\t\t\tresult.put(\"heartbeatIntervalMs\", TransportConfig.getHeartbeatIntervalMs());\n+\t\t\tresult.put(\"clientPort\", TransportConfig.getPort());\n+\t\t\tresult.put(\"coldFactor\", sentinelProperties.getFlow().getColdFactor());\n+\t\t\tresult.put(\"filter\", sentinelProperties.getFilter());\n+\t\t\tresult.put(\"datasource\", sentinelProperties.getDatasource());\n \n+\t\t\tfinal Map<String, Object> rules = new HashMap<>();\n+\t\t\tresult.put(\"rules\", rules);\n+\t\t\trules.put(\"flowRules\", FlowRuleManager.getRules());\n+\t\t\trules.put(\"degradeRules\", SystemRuleManager.getRules());\n+\t\t\trules.put(\"systemRules\", SystemRuleManager.getRules());\n+\t\t\trules.put(\"authorityRule\", AuthorityRuleManager.getRules());\n+\t\t\trules.put(\"paramFlowRule\", ParamFlowRuleManager.getRules());\n+\t\t}\n \t\treturn result;\n \t}\n ",
      "parent_sha": "490d02af7e3376b5d36db7ed4d4ad276bbb3c4ac"
    }
  },
  {
    "oid": "af1ca01cf16b00c1421a3ea90d0dae2e95ae207d",
    "message": "\u4e3aDCL\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf\u6dfb\u52a0volatile\u7279\u6027\u3002",
    "date": "2022-06-17T05:53:12Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/af1ca01cf16b00c1421a3ea90d0dae2e95ae207d",
    "details": {
      "sha": "ad9792196da5101c3eeaed2306595fe1ff210a68",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosServiceManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/af1ca01cf16b00c1421a3ea90d0dae2e95ae207d/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/af1ca01cf16b00c1421a3ea90d0dae2e95ae207d/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java?ref=af1ca01cf16b00c1421a3ea90d0dae2e95ae207d",
      "patch": "@@ -43,9 +43,9 @@ public class NacosServiceManager {\n \n \tprivate NacosDiscoveryProperties nacosDiscoveryPropertiesCache;\n \n-\tprivate NamingService namingService;\n+\tprivate volatile NamingService namingService;\n \n-\tprivate NamingMaintainService namingMaintainService;\n+\tprivate volatile NamingMaintainService namingMaintainService;\n \n \tpublic NamingService getNamingService(Properties properties) {\n \t\tif (Objects.isNull(this.namingService)) {",
      "parent_sha": "977a8515c9c7d1d95cd4ec84566d0bb12e570e72"
    }
  },
  {
    "oid": "bd2cd3f39468cae824d2b1a65e6882eae9f58cdd",
    "message": "nacos watch enhance",
    "date": "2020-09-09T11:18:45Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/bd2cd3f39468cae824d2b1a65e6882eae9f58cdd",
    "details": {
      "sha": "d01089eb05a7271ce73596d9374d842c5ee62f74",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosWatch.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/bd2cd3f39468cae824d2b1a65e6882eae9f58cdd/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosWatch.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/bd2cd3f39468cae824d2b1a65e6882eae9f58cdd/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosWatch.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosWatch.java?ref=bd2cd3f39468cae824d2b1a65e6882eae9f58cdd",
      "patch": "@@ -19,7 +19,7 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n+import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n@@ -41,6 +41,7 @@\n \n /**\n  * @author xiaojing\n+ * @author yuhuangbin\n  */\n public class NacosWatch implements ApplicationEventPublisherAware, SmartLifecycle {\n \n@@ -88,13 +89,13 @@ public void onEvent(Event event) {\n \t\t\t\t\t\t\tif (event instanceof NamingEvent) {\n \t\t\t\t\t\t\t\tList<Instance> instances = ((NamingEvent) event)\n \t\t\t\t\t\t\t\t\t\t.getInstances();\n-\t\t\t\t\t\t\t\tInstance currentInstance = selectCurrentInstance(\n+\t\t\t\t\t\t\t\tOptional<Instance> instanceOptional = selectCurrentInstance(\n \t\t\t\t\t\t\t\t\t\tinstances);\n-\t\t\t\t\t\t\t\tif (Objects.nonNull(currentInstance)) {\n+\t\t\t\t\t\t\t\tinstanceOptional.ifPresent(currentInstance -> {\n \t\t\t\t\t\t\t\t\tresetIfNeeded(currentInstance);\n \t\t\t\t\t\t\t\t\tpublisher.publishEvent(\n \t\t\t\t\t\t\t\t\t\t\tnew HeartbeatEvent(this, currentInstance));\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t});\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t});\n@@ -121,11 +122,11 @@ private void resetIfNeeded(Instance instance) {\n \t\t}\n \t}\n \n-\tprivate Instance selectCurrentInstance(List<Instance> instances) {\n+\tprivate Optional<Instance> selectCurrentInstance(List<Instance> instances) {\n \t\treturn instances.stream()\n \t\t\t\t.filter(instance -> properties.getIp().equals(instance.getIp())\n \t\t\t\t\t\t&& properties.getPort() == instance.getPort())\n-\t\t\t\t.findFirst().orElse(null);\n+\t\t\t\t.findFirst();\n \t}\n \n \t@Override",
      "parent_sha": "cd8464d4a02d4ccc5c17a09a1936882dbc33b89e"
    }
  },
  {
    "oid": "1d1035bb924cc68e13ebda7c38c74b58be5cdb5b",
    "message": "Fix incorrect field comment",
    "date": "2022-05-11T06:10:12Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/1d1035bb924cc68e13ebda7c38c74b58be5cdb5b",
    "details": {
      "sha": "f41f08814aba06c610ac79af4d327dc86c2e8c85",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/1d1035bb924cc68e13ebda7c38c74b58be5cdb5b/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/1d1035bb924cc68e13ebda7c38c74b58be5cdb5b/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java?ref=1d1035bb924cc68e13ebda7c38c74b58be5cdb5b",
      "patch": "@@ -207,7 +207,7 @@ private void overrideFromEnv() {\n \tprivate String secretKey;\n \n \t/**\n-\t * access key for namespace.\n+\t * role name for aliyun ram.\n \t */\n \tprivate String ramRoleName;\n ",
      "parent_sha": "c61b7c09a0df7a4b06957c74739523e8ff6ca67a"
    }
  },
  {
    "oid": "8c59d6b51e365805a3273f0042952d31f33ad9ab",
    "message": "update sentinel test case",
    "date": "2019-03-18T05:59:55Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/8c59d6b51e365805a3273f0042952d31f33ad9ab",
    "details": {
      "sha": "434d0237a0ec84df2ad52f7fdb843d31c65e3644",
      "filename": "spring-cloud-alibaba-sentinel/src/test/java/org/springframework/cloud/alibaba/sentinel/SentinelAutoConfigurationTests.java",
      "status": "modified",
      "additions": 21,
      "deletions": 20,
      "changes": 41,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/8c59d6b51e365805a3273f0042952d31f33ad9ab/spring-cloud-alibaba-sentinel%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2FSentinelAutoConfigurationTests.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/8c59d6b51e365805a3273f0042952d31f33ad9ab/spring-cloud-alibaba-sentinel%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2FSentinelAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2FSentinelAutoConfigurationTests.java?ref=8c59d6b51e365805a3273f0042952d31f33ad9ab",
      "patch": "@@ -16,16 +16,15 @@\n \n package org.springframework.cloud.alibaba.sentinel;\n \n-import com.alibaba.csp.sentinel.adapter.servlet.config.WebServletConfig;\n-import com.alibaba.csp.sentinel.config.SentinelConfig;\n-import com.alibaba.csp.sentinel.log.LogBase;\n-import com.alibaba.csp.sentinel.slots.block.BlockException;\n-import com.alibaba.csp.sentinel.slots.block.RuleConstant;\n-import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n-import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n-import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;\n-import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;\n-import com.alibaba.csp.sentinel.transport.config.TransportConfig;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -51,14 +50,16 @@\n import org.springframework.web.client.RestClientException;\n import org.springframework.web.client.RestTemplate;\n \n-import java.util.Arrays;\n-import java.util.Map;\n-\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.mockito.Mockito.mock;\n-import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n+import com.alibaba.csp.sentinel.adapter.servlet.config.WebServletConfig;\n+import com.alibaba.csp.sentinel.config.SentinelConfig;\n+import com.alibaba.csp.sentinel.log.LogBase;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alibaba.csp.sentinel.slots.block.RuleConstant;\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n+import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;\n+import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;\n+import com.alibaba.csp.sentinel.transport.config.TransportConfig;\n \n /**\n  * @author <a href=\"mailto:fangjian0423@gmail.com\">Jim</a>\n@@ -112,15 +113,15 @@ public void setUp() {\n \t\tFlowRule rule = new FlowRule();\n \t\trule.setGrade(RuleConstant.FLOW_GRADE_QPS);\n \t\trule.setCount(0);\n-\t\trule.setResource(url);\n+\t\trule.setResource(\"GET:\" + url);\n \t\trule.setLimitApp(\"default\");\n \t\trule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);\n \t\trule.setStrategy(RuleConstant.STRATEGY_DIRECT);\n \t\tFlowRuleManager.loadRules(Arrays.asList(rule));\n \n \t\tDegradeRule degradeRule = new DegradeRule();\n \t\tdegradeRule.setGrade(RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT);\n-\t\tdegradeRule.setResource(url + \"/test\");\n+\t\tdegradeRule.setResource(\"GET:\" + url + \"/test\");\n \t\tdegradeRule.setCount(0);\n \t\tdegradeRule.setTimeWindow(60);\n \t\tDegradeRuleManager.loadRules(Arrays.asList(degradeRule));",
      "parent_sha": "1eef8f688fc6ac22847d1729abc2abbfb5793ef8"
    }
  },
  {
    "oid": "a0a4bb050797ac729985841cf44a67a2d70ae054",
    "message": "Fix error comment and add note comment for checking dataSource.",
    "date": "2019-05-29T04:38:27Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/a0a4bb050797ac729985841cf44a67a2d70ae054",
    "details": {
      "sha": "8ca863ab7ea838b52ed1eb449a13575b5a5629f6",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/endpoint/SentinelHealthIndicator.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/a0a4bb050797ac729985841cf44a67a2d70ae054/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/a0a4bb050797ac729985841cf44a67a2d70ae054/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java?ref=a0a4bb050797ac729985841cf44a67a2d70ae054",
      "patch": "@@ -37,10 +37,10 @@\n  *\n  * <p>\n  * Check the status of Sentinel Dashboard by sending a heartbeat message to it.\n- * If no Exception thrown, it's OK.\n+ * If return true, it's OK.\n  *\n  * Check the status of Sentinel DataSource by calling loadConfig method of {@link AbstractDataSource}.\n- * If return true, it's OK.\n+ * If no Exception thrown, it's OK.\n  *\n  * If Dashboard and DataSource are both OK, the health status is UP.\n  *</p>\n@@ -82,7 +82,7 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {\n         boolean dashboardUp = true;\n         String consoleServer = TransportConfig.getConsoleServer();\n         if (StringUtils.isEmpty(consoleServer)) {\n-            // If Dashboard isn't configured, mark the status of Dashboard with UNKNOWN and the dashboardUp is still true\n+            // If Dashboard isn't configured, it's OK and mark the status of Dashboard with UNKNOWN.\n             detailMap.put(\"dashboard\", new Status(Status.UNKNOWN.getCode(), \"dashboard isn't configured\"));\n         } else {\n             // If Dashboard is configured, send a heartbeat message to it and check the result\n@@ -103,6 +103,11 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {\n         detailMap.put(\"dataSource\", dataSourceDetailMap);\n \n         // Get all DataSources and each call loadConfig to check if it's OK\n+        // If no Exception thrown, it's OK\n+        // Note:\n+        // Even if the dynamic config center is down, the loadConfig() might return successfully\n+        // e.g. for Nacos client, it might retrieve from the local cache)\n+        // But in most circumstances it's okay\n         Map<String, AbstractDataSource> dataSourceMap = beanFactory.getBeansOfType(AbstractDataSource.class);\n         for (Map.Entry<String, AbstractDataSource> dataSourceMapEntry : dataSourceMap.entrySet()) {\n             String dataSourceBeanName = dataSourceMapEntry.getKey();",
      "parent_sha": "584d5f41075d0711f8e6e8736dbd643c535fde04"
    }
  },
  {
    "oid": "c2806b6a1c4a75db7d641cf3aa6f207c74bf29ef",
    "message": "refactor static final field name",
    "date": "2019-01-11T07:43:18Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/c2806b6a1c4a75db7d641cf3aa6f207c74bf29ef",
    "details": {
      "sha": "d73996e24141d0365c9b9c4f12cd6e0d0df1c821",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelDataSourceHandler.java",
      "status": "modified",
      "additions": 63,
      "deletions": 67,
      "changes": 130,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/c2806b6a1c4a75db7d641cf3aa6f207c74bf29ef/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/c2806b6a1c4a75db7d641cf3aa6f207c74bf29ef/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelDataSourceHandler.java?ref=c2806b6a1c4a75db7d641cf3aa6f207c74bf29ef",
      "patch": "@@ -54,9 +54,9 @@ public class SentinelDataSourceHandler {\n \tprivate List<String> dataSourceBeanNameList = Collections\n \t\t\t.synchronizedList(new ArrayList<>());\n \n-\tprivate final String DATATYPE_FIELD = \"dataType\";\n-\tprivate final String CUSTOM_DATATYPE = \"custom\";\n-\tprivate final String CONVERTERCLASS_FIELD = \"converterClass\";\n+\tprivate final String DATA_TYPE_FIELD = \"dataType\";\n+\tprivate final String CUSTOM_DATA_TYPE = \"custom\";\n+\tprivate final String CONVERTER_CLASS_FIELD = \"converterClass\";\n \n \t@Autowired\n \tprivate SentinelProperties sentinelProperties;\n@@ -132,85 +132,81 @@ private void registerBean(DefaultListableBeanFactory beanFactory,\n \t\t\t\t\t\t\t\te);\n \t\t\t\t\t}\n \t\t\t\t}, HashMap::putAll);\n-\t\tpropertyMap.put(CONVERTERCLASS_FIELD, dataSourceProperties.getConverterClass());\n-\t\tpropertyMap.put(DATATYPE_FIELD, dataSourceProperties.getDataType());\n+\t\tpropertyMap.put(CONVERTER_CLASS_FIELD, dataSourceProperties.getConverterClass());\n+\t\tpropertyMap.put(DATA_TYPE_FIELD, dataSourceProperties.getDataType());\n \n \t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n \t\t\t\t.genericBeanDefinition(dataSourceProperties.getFactoryBeanName());\n \n \t\tpropertyMap.forEach((propertyName, propertyValue) -> {\n \t\t\tField field = ReflectionUtils.findField(dataSourceProperties.getClass(),\n \t\t\t\t\tpropertyName);\n-\t\t\tif (field != null) {\n-\t\t\t\tif (DATATYPE_FIELD.equals(propertyName)) {\n-\t\t\t\t\tString dataType = StringUtils\n-\t\t\t\t\t\t\t.trimAllWhitespace(propertyValue.toString());\n-\t\t\t\t\tif (CUSTOM_DATATYPE.equals(dataType)) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tif (StringUtils\n-\t\t\t\t\t\t\t\t\t.isEmpty(dataSourceProperties.getConverterClass())) {\n-\t\t\t\t\t\t\t\tthrow new RuntimeException(\n-\t\t\t\t\t\t\t\t\t\t\"[Sentinel Starter] DataSource \" + dataSourceName\n-\t\t\t\t\t\t\t\t\t\t\t\t+ \"dataType is custom, please set converter-class \"\n-\t\t\t\t\t\t\t\t\t\t\t\t+ \"property\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t// construct custom Converter with 'converterClass'\n-\t\t\t\t\t\t\t// configuration and register\n-\t\t\t\t\t\t\tString customConvertBeanName = \"sentinel-\"\n-\t\t\t\t\t\t\t\t\t+ dataSourceProperties.getConverterClass();\n-\t\t\t\t\t\t\tif (!beanFactory.containsBean(customConvertBeanName)) {\n-\t\t\t\t\t\t\t\tbeanFactory.registerBeanDefinition(customConvertBeanName,\n-\t\t\t\t\t\t\t\t\t\tBeanDefinitionBuilder\n-\t\t\t\t\t\t\t\t\t\t\t\t.genericBeanDefinition(\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tClass.forName(dataSourceProperties\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getConverterClass()))\n-\t\t\t\t\t\t\t\t\t\t\t\t.getBeanDefinition());\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tbuilder.addPropertyReference(\"converter\",\n-\t\t\t\t\t\t\t\t\tcustomConvertBeanName);\n+\t\t\tif (null == field) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tif (DATA_TYPE_FIELD.equals(propertyName)) {\n+\t\t\t\tString dataType = StringUtils.trimAllWhitespace(propertyValue.toString());\n+\t\t\t\tif (CUSTOM_DATA_TYPE.equals(dataType)) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tif (StringUtils\n+\t\t\t\t\t\t\t\t.isEmpty(dataSourceProperties.getConverterClass())) {\n+\t\t\t\t\t\t\tthrow new RuntimeException(\"[Sentinel Starter] DataSource \"\n+\t\t\t\t\t\t\t\t\t+ dataSourceName\n+\t\t\t\t\t\t\t\t\t+ \"dataType is custom, please set converter-class \"\n+\t\t\t\t\t\t\t\t\t+ \"property\");\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (ClassNotFoundException e) {\n-\t\t\t\t\t\t\tlogger.error(\"[Sentinel Starter] DataSource \" + dataSourceName\n-\t\t\t\t\t\t\t\t\t+ \" handle \"\n-\t\t\t\t\t\t\t\t\t+ dataSourceProperties.getClass().getSimpleName()\n-\t\t\t\t\t\t\t\t\t+ \" error, class name: \"\n-\t\t\t\t\t\t\t\t\t+ dataSourceProperties.getConverterClass());\n-\t\t\t\t\t\t\tthrow new RuntimeException(\n-\t\t\t\t\t\t\t\t\t\"[Sentinel Starter] DataSource \" + dataSourceName\n-\t\t\t\t\t\t\t\t\t\t\t+ \" handle \"\n-\t\t\t\t\t\t\t\t\t\t\t+ dataSourceProperties.getClass()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.getSimpleName()\n-\t\t\t\t\t\t\t\t\t\t\t+ \" error, class name: \"\n-\t\t\t\t\t\t\t\t\t\t\t+ dataSourceProperties.getConverterClass(),\n-\t\t\t\t\t\t\t\t\te);\n+\t\t\t\t\t\t// construct custom Converter with 'converterClass'\n+\t\t\t\t\t\t// configuration and register\n+\t\t\t\t\t\tString customConvertBeanName = \"sentinel-\"\n+\t\t\t\t\t\t\t\t+ dataSourceProperties.getConverterClass();\n+\t\t\t\t\t\tif (!beanFactory.containsBean(customConvertBeanName)) {\n+\t\t\t\t\t\t\tbeanFactory.registerBeanDefinition(customConvertBeanName,\n+\t\t\t\t\t\t\t\t\tBeanDefinitionBuilder\n+\t\t\t\t\t\t\t\t\t\t\t.genericBeanDefinition(\n+\t\t\t\t\t\t\t\t\t\t\t\t\tClass.forName(dataSourceProperties\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getConverterClass()))\n+\t\t\t\t\t\t\t\t\t\t\t.getBeanDefinition());\n \t\t\t\t\t\t}\n+\t\t\t\t\t\tbuilder.addPropertyReference(\"converter\", customConvertBeanName);\n \t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\tif (!dataTypeList.contains(StringUtils\n-\t\t\t\t\t\t\t\t.trimAllWhitespace(propertyValue.toString()))) {\n-\t\t\t\t\t\t\tthrow new RuntimeException(\"[Sentinel Starter] DataSource \"\n-\t\t\t\t\t\t\t\t\t+ dataSourceName + \" dataType: \" + propertyValue\n-\t\t\t\t\t\t\t\t\t+ \" is not support now. please using these types: \"\n-\t\t\t\t\t\t\t\t\t+ dataTypeList.toString());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t// converter type now support xml or json.\n-\t\t\t\t\t\t// The bean name of these converters wrapped by\n-\t\t\t\t\t\t// 'sentinel-{converterType}-{ruleType}-converter'\n-\t\t\t\t\t\tbuilder.addPropertyReference(\"converter\",\n-\t\t\t\t\t\t\t\t\"sentinel-\" + propertyValue.toString() + \"-\"\n-\t\t\t\t\t\t\t\t\t\t+ dataSourceProperties.getRuleType().getName()\n-\t\t\t\t\t\t\t\t\t\t+ \"-converter\");\n+\t\t\t\t\tcatch (ClassNotFoundException e) {\n+\t\t\t\t\t\tlogger.error(\"[Sentinel Starter] DataSource \" + dataSourceName\n+\t\t\t\t\t\t\t\t+ \" handle \"\n+\t\t\t\t\t\t\t\t+ dataSourceProperties.getClass().getSimpleName()\n+\t\t\t\t\t\t\t\t+ \" error, class name: \"\n+\t\t\t\t\t\t\t\t+ dataSourceProperties.getConverterClass());\n+\t\t\t\t\t\tthrow new RuntimeException(\"[Sentinel Starter] DataSource \"\n+\t\t\t\t\t\t\t\t+ dataSourceName + \" handle \"\n+\t\t\t\t\t\t\t\t+ dataSourceProperties.getClass().getSimpleName()\n+\t\t\t\t\t\t\t\t+ \" error, class name: \"\n+\t\t\t\t\t\t\t\t+ dataSourceProperties.getConverterClass(), e);\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\telse if (CONVERTERCLASS_FIELD.equals(propertyName)) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\t// wired properties\n-\t\t\t\t\tOptional.ofNullable(propertyValue)\n-\t\t\t\t\t\t\t.ifPresent(v -> builder.addPropertyValue(propertyName, v));\n+\t\t\t\t\tif (!dataTypeList.contains(\n+\t\t\t\t\t\t\tStringUtils.trimAllWhitespace(propertyValue.toString()))) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"[Sentinel Starter] DataSource \"\n+\t\t\t\t\t\t\t\t+ dataSourceName + \" dataType: \" + propertyValue\n+\t\t\t\t\t\t\t\t+ \" is not support now. please using these types: \"\n+\t\t\t\t\t\t\t\t+ dataTypeList.toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t// converter type now support xml or json.\n+\t\t\t\t\t// The bean name of these converters wrapped by\n+\t\t\t\t\t// 'sentinel-{converterType}-{ruleType}-converter'\n+\t\t\t\t\tbuilder.addPropertyReference(\"converter\",\n+\t\t\t\t\t\t\t\"sentinel-\" + propertyValue.toString() + \"-\"\n+\t\t\t\t\t\t\t\t\t+ dataSourceProperties.getRuleType().getName()\n+\t\t\t\t\t\t\t\t\t+ \"-converter\");\n \t\t\t\t}\n \t\t\t}\n+\t\t\telse if (CONVERTER_CLASS_FIELD.equals(propertyName)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t// wired properties\n+\t\t\t\tOptional.ofNullable(propertyValue)\n+\t\t\t\t\t\t.ifPresent(v -> builder.addPropertyValue(propertyName, v));\n+\t\t\t}\n \t\t});\n \n \t\tbeanFactory.registerBeanDefinition(dataSourceName, builder.getBeanDefinition());",
      "parent_sha": "29a40ded8b77f058f420612c1fb179522cea4ce8"
    }
  },
  {
    "oid": "69c25ee412559215d2fb3deb1ab3905ce9c02388",
    "message": "remove all apache.commons",
    "date": "2021-01-19T02:29:05Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/69c25ee412559215d2fb3deb1ab3905ce9c02388",
    "details": {
      "sha": "009f057b38771e1af71c378e1c3309ad9589e37d",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-alibaba-commons/src/main/java/com/alibaba/cloud/commons/FileUtils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/69c25ee412559215d2fb3deb1ab3905ce9c02388/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-commons%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcommons%2FFileUtils.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/69c25ee412559215d2fb3deb1ab3905ce9c02388/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-commons%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcommons%2FFileUtils.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-commons%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcommons%2FFileUtils.java?ref=69c25ee412559215d2fb3deb1ab3905ce9c02388",
      "patch": "@@ -22,13 +22,13 @@\n \n /**\n  * FileUtils. copy from apache commons.io.\n+ *\n  * @author <a href=\"mailto:chenxilzx1@gmail.com\">theonefx</a>\n  */\n-public class FileUtils {\n+public final class FileUtils {\n \n \t/**\n \t * Reads the contents of a file into a String. The file is always closed.\n-\t *\n \t * @param file the file to read, must not be {@code null}\n \t * @param encoding the encoding to use, {@code null} means platform default\n \t * @return the file contents, never {@code null}\n@@ -46,7 +46,6 @@ public static String readFileToString(final File file, final String encoding)\n \t/**\n \t * Reads the contents of a file into a String using the default encoding for the VM.\n \t * The file is always closed.\n-\t *\n \t * @param file the file to read, must not be {@code null}\n \t * @return the file contents, never {@code null}\n \t * @throws IOException in case of an I/O error\n@@ -58,4 +57,5 @@ public static String readFileToString(final File file, final String encoding)\n \tpublic static String readFileToString(final File file) throws IOException {\n \t\treturn readFileToString(file, Charset.defaultCharset());\n \t}\n+\n }",
      "parent_sha": "75a5985c3ee90f5dd8aa7b71c8fb6da555f296ea"
    }
  },
  {
    "oid": "fd924146092d2741bf3f106c67035908aa390246",
    "message": "fix the issue SpringCloudRegistryFactory always create registry instance",
    "date": "2020-05-07T10:11:45Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/fd924146092d2741bf3f106c67035908aa390246",
    "details": {
      "sha": "a036b29d397993c7f899bd5b0cd55beddac7ac8f",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/registry/SpringCloudRegistryFactory.java",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/fd924146092d2741bf3f106c67035908aa390246/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FSpringCloudRegistryFactory.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/fd924146092d2741bf3f106c67035908aa390246/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FSpringCloudRegistryFactory.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FSpringCloudRegistryFactory.java?ref=fd924146092d2741bf3f106c67035908aa390246",
      "patch": "@@ -24,6 +24,7 @@\n import org.apache.dubbo.registry.Registry;\n import org.apache.dubbo.registry.RegistryFactory;\n \n+import org.apache.dubbo.registry.support.AbstractRegistryFactory;\n import org.springframework.cloud.client.discovery.DiscoveryClient;\n import org.springframework.context.ConfigurableApplicationContext;\n \n@@ -37,7 +38,7 @@\n  * @see RegistryFactory\n  * @see SpringCloudRegistry\n  */\n-public class SpringCloudRegistryFactory implements RegistryFactory {\n+public class SpringCloudRegistryFactory extends AbstractRegistryFactory {\n \n \t/**\n \t * Spring Cloud Protocol.\n@@ -65,8 +66,6 @@ public class SpringCloudRegistryFactory implements RegistryFactory {\n \n \tprivate DubboGenericServiceFactory dubboGenericServiceFactory;\n \n-\tprivate volatile boolean initialized = false;\n-\n \tpublic SpringCloudRegistryFactory() {\n \t}\n \n@@ -76,9 +75,6 @@ public static void setApplicationContext(\n \t}\n \n \tprotected void init() {\n-\t\tif (initialized || applicationContext == null) {\n-\t\t\treturn;\n-\t\t}\n \t\tthis.discoveryClient = applicationContext.getBean(DiscoveryClient.class);\n \t\tthis.dubboServiceMetadataRepository = applicationContext\n \t\t\t\t.getBean(DubboServiceMetadataRepository.class);\n@@ -90,7 +86,7 @@ protected void init() {\n \t}\n \n \t@Override\n-\tpublic Registry getRegistry(URL url) {\n+\tpublic Registry createRegistry(URL url) {\n \t\tinit();\n \t\treturn new SpringCloudRegistry(url, discoveryClient,\n \t\t\t\tdubboServiceMetadataRepository, dubboMetadataConfigServiceProxy,",
      "parent_sha": "0c39f71316f9df1bf8e52469710091a273d32e79"
    }
  },
  {
    "oid": "1ecd1644e61cefe4b2356a393dac0527af0777a6",
    "message": "adjust timeout",
    "date": "2022-08-21T02:44:16Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/1ecd1644e61cefe4b2356a393dac0527af0777a6",
    "details": {
      "sha": "bef88d5fcac8f4149b78aa801e66aab7185f19c1",
      "filename": "spring-cloud-alibaba-tests/nacos-tests/nacos-config-test/src/test/java/com/alibaba/cloud/tests/nacos/config/NacosConfigRefreshTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/1ecd1644e61cefe4b2356a393dac0527af0777a6/spring-cloud-alibaba-tests%2Fnacos-tests%2Fnacos-config-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Ftests%2Fnacos%2Fconfig%2FNacosConfigRefreshTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/1ecd1644e61cefe4b2356a393dac0527af0777a6/spring-cloud-alibaba-tests%2Fnacos-tests%2Fnacos-config-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Ftests%2Fnacos%2Fconfig%2FNacosConfigRefreshTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-tests%2Fnacos-tests%2Fnacos-config-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Ftests%2Fnacos%2Fconfig%2FNacosConfigRefreshTest.java?ref=1ecd1644e61cefe4b2356a393dac0527af0777a6",
      "patch": "@@ -41,7 +41,7 @@\n  */\n // @HasDockerAndItEnabled\n @SpringCloudAlibaba(composeFiles = \"docker/nacos-compose-test.yml\", serviceName = \"nacos-standalone\")\n-@TestExtend(time = 3 * TIME_OUT)\n+@TestExtend(time = 4 * TIME_OUT)\n public class NacosConfigRefreshTest {\n \n \t/**",
      "parent_sha": "6b8d05354587a811f3d50f6e8be11e01d4391817"
    }
  },
  {
    "oid": "7921da5ee63ee4f10084c9a2f55fccc2f3dc9e78",
    "message": "to avoid k8s readinessProbe remove the pod \n\nFor sentinel , we just no need remove the pod just because of the dashboard unreachable.",
    "date": "2020-07-15T13:26:54Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/7921da5ee63ee4f10084c9a2f55fccc2f3dc9e78",
    "details": {
      "sha": "996a483b769e694387c5158339175fab7e5a82b4",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/endpoint/SentinelHealthIndicator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/7921da5ee63ee4f10084c9a2f55fccc2f3dc9e78/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/7921da5ee63ee4f10084c9a2f55fccc2f3dc9e78/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java?ref=7921da5ee63ee4f10084c9a2f55fccc2f3dc9e78",
      "patch": "@@ -105,7 +105,7 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {\n \t\t\t\t// If failed to send heartbeat message, means that the Dashboard is DOWN\n \t\t\t\tdashboardUp = false;\n \t\t\t\tdetailMap.put(\"dashboard\",\n-\t\t\t\t\t\tnew Status(Status.DOWN.getCode(), String.format(\n+\t\t\t\t\t\tnew Status(Status.UNKNOWN.getCode(), String.format(\n \t\t\t\t\t\t\t\t\"the dashboard servers [%s] one of them can't be connected\",\n \t\t\t\t\t\t\t\tconsoleServerList)));\n \t\t\t}\n@@ -138,7 +138,7 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {\n \t\t\t\t// DOWN\n \t\t\t\tdataSourceUp = false;\n \t\t\t\tdataSourceDetailMap.put(dataSourceBeanName,\n-\t\t\t\t\t\tnew Status(Status.DOWN.getCode(), e.getMessage()));\n+\t\t\t\t\t\tnew Status(Status.UNKNOWN.getCode(), e.getMessage()));\n \t\t\t}\n \t\t}\n \n@@ -147,7 +147,7 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {\n \t\t\tbuilder.up().withDetails(detailMap);\n \t\t}\n \t\telse {\n-\t\t\tbuilder.down().withDetails(detailMap);\n+\t\t\tbuilder.unknown().withDetails(detailMap);\n \t\t}\n \t}\n ",
      "parent_sha": "f6fb6890b9305ad99cb19741103a23b8cb8b9cf7"
    }
  },
  {
    "oid": "7d9751304e58c63932ab8aba26f30d7e763563fd",
    "message": "enhance Nacos shutdown code",
    "date": "2021-08-03T05:59:44Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/7d9751304e58c63932ab8aba26f30d7e763563fd",
    "details": {
      "sha": "31f68cd997e2b823c648b994d263c11db40b0d18",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosServiceManager.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/7d9751304e58c63932ab8aba26f30d7e763563fd/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/7d9751304e58c63932ab8aba26f30d7e763563fd/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java?ref=7d9751304e58c63932ab8aba26f30d7e763563fd",
      "patch": "@@ -112,9 +112,14 @@ private NamingMaintainService createNamingMaintainService(Properties properties)\n \t}\n \n \tpublic void nacosServiceShutDown() throws NacosException {\n-\t\tthis.namingService.shutDown();\n-\t\tnamingService = null;\n-\t\tnamingMaintainService = null;\n+\t\tif (Objects.nonNull(this.namingService)) {\n+\t\t\tthis.namingService.shutDown();\n+\t\t\tthis.namingService = null;\n+\t\t}\n+\t\tif (Objects.nonNull(this.namingMaintainService)) {\n+\t\t\tthis.namingMaintainService.shutDown();\n+\t\t\tthis.namingMaintainService = null;\n+\t\t}\n \t}\n \n \t@EventListener",
      "parent_sha": "f1ef409fa7d397cc59afa920fa93f828cf490bed"
    }
  },
  {
    "oid": "df2f689bbd58cf5cae803026edd49c9d3efc1a95",
    "message": "Nacos Parameter init listener by conditional on class",
    "date": "2018-12-19T08:22:32Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/df2f689bbd58cf5cae803026edd49c9d3efc1a95",
    "details": {
      "sha": "73dcc75ddcad297c25e5b1ac4cc4df0caf46c196",
      "filename": "spring-cloud-alicloud-context/src/main/java/org/springframework/cloud/alicloud/context/nacos/NacosParameterInitListener.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/df2f689bbd58cf5cae803026edd49c9d3efc1a95/spring-cloud-alicloud-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fnacos%2FNacosParameterInitListener.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/df2f689bbd58cf5cae803026edd49c9d3efc1a95/spring-cloud-alicloud-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fnacos%2FNacosParameterInitListener.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alicloud-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fnacos%2FNacosParameterInitListener.java?ref=df2f689bbd58cf5cae803026edd49c9d3efc1a95",
      "patch": "@@ -3,27 +3,33 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;\n-import org.springframework.context.ApplicationListener;\n+import org.springframework.cloud.alicloud.context.listener.AbstractOnceApplicationListener;\n \n import com.alibaba.cloud.context.edas.EdasChangeOrderConfiguration;\n import com.alibaba.cloud.context.edas.EdasChangeOrderConfigurationFactory;\n \n public class NacosParameterInitListener\n-\t\timplements ApplicationListener<ApplicationEnvironmentPreparedEvent> {\n+\t\textends AbstractOnceApplicationListener<ApplicationEnvironmentPreparedEvent> {\n \tprivate static final Logger log = LoggerFactory\n \t\t\t.getLogger(NacosParameterInitListener.class);\n \n \t@Override\n-\tpublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n+\tprotected String conditionalOnClass() {\n+\t\treturn \"org.springframework.cloud.alibaba.nacos.NacosConfigAutoConfiguration\";\n+\t}\n \n+\t@Override\n+\tprotected void handleEvent(ApplicationEnvironmentPreparedEvent event) {\n \t\tpreparedNacosConfiguration();\n \t}\n \n \tprivate void preparedNacosConfiguration() {\n \t\tEdasChangeOrderConfiguration edasChangeOrderConfiguration = EdasChangeOrderConfigurationFactory\n \t\t\t\t.getEdasChangeOrderConfiguration();\n+\n \t\tlog.info(\"Initialize Nacos Parameter from edas change order,is edas managed {}.\",\n \t\t\t\tedasChangeOrderConfiguration.isEdasManaged());\n+\n \t\tif (!edasChangeOrderConfiguration.isEdasManaged()) {\n \t\t\treturn;\n \t\t}",
      "parent_sha": "2d842b6c9882bbeadcaed1679a34eb40c4ac4b3d"
    }
  },
  {
    "oid": "7ac3db5ff81b743e5b8722eef721437d57f18824",
    "message": "fix: sentinel circuit breaker FeignClientCircuitBreakerRuleTests (#3676)\n\nSigned-off-by: yuluo-yx <yuluo08290126@gmail.com>",
    "date": "2024-04-08T08:23:52Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/7ac3db5ff81b743e5b8722eef721437d57f18824",
    "details": {
      "sha": "65264030e612b1ff86ef521a129c33abf13bb284",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/test/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/FeignClientCircuitBreakerRuleIntegrationTest.java",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/7ac3db5ff81b743e5b8722eef721437d57f18824/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FFeignClientCircuitBreakerRuleIntegrationTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/7ac3db5ff81b743e5b8722eef721437d57f18824/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FFeignClientCircuitBreakerRuleIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FFeignClientCircuitBreakerRuleIntegrationTest.java?ref=7ac3db5ff81b743e5b8722eef721437d57f18824",
      "patch": "@@ -80,16 +80,19 @@ public void testDefaultRule() throws Exception {\n \t\t// the 3rd exception, circuit breaker open\n \t\tassertThat(orderClient.defaultConfig(false)).isEqualTo(\"fallback\");\n \n+\t\t// sleep 300, ensure circuit breaker status is open.\n+\t\tThread.sleep(300);\n+\n \t\t// test circuit breaker open\n \t\tassertThat(orderClient.defaultConfig(true)).isEqualTo(\"fallback\");\n-\t\tassertThat(orderClient.defaultConfig(true)).isEqualTo(\"fallback\");\n+\t\tassertThat(orderClient.defaultConfig(false)).isEqualTo(\"fallback\");\n \n \t\t// longer than timeWindow, circuit breaker half open\n \t\tThread.sleep(1200L);\n \n \t\t// let circuit breaker close\n \t\tassertThat(orderClient.defaultConfig(true)).isEqualTo(\"ok\");\n-\t\tassertThat(orderClient.defaultConfig(true)).isEqualTo(\"ok\");\n+\t\tassertThat(orderClient.defaultConfig(false)).isEqualTo(\"fallback\");\n \t}\n \n \t@Test\n@@ -109,16 +112,18 @@ public void testSpecificFeignRule() throws Exception {\n \t\t// the 3rd exception, circuit breaker open\n \t\tassertThat(userClient.specificFeign(false)).isEqualTo(\"fallback\");\n \n+\t\tThread.sleep(300);\n+\n \t\t// test circuit breaker open\n \t\tassertThat(userClient.specificFeign(true)).isEqualTo(\"fallback\");\n-\t\tassertThat(userClient.specificFeign(true)).isEqualTo(\"fallback\");\n+\t\tassertThat(userClient.specificFeign(false)).isEqualTo(\"fallback\");\n \n \t\t// longer than timeWindow, circuit breaker half open\n \t\tThread.sleep(1200L);\n \n \t\t// let circuit breaker close\n \t\tassertThat(userClient.specificFeign(true)).isEqualTo(\"ok\");\n-\t\tassertThat(userClient.specificFeign(true)).isEqualTo(\"ok\");\n+\t\tassertThat(userClient.specificFeign(false)).isEqualTo(\"fallback\");\n \t}\n \n \t@Test\n@@ -137,16 +142,18 @@ public void testSpecificFeignMethodRule() throws Exception {\n \t\t// occur the 2nd exception, circuit breaker open\n \t\tassertThat(userClient.specificFeignMethod(false)).isEqualTo(\"fallback\");\n \n+\t\tThread.sleep(300);\n+\n \t\t// test circuit breaker is open\n \t\tassertThat(userClient.specificFeignMethod(true)).isEqualTo(\"fallback\");\n-\t\tassertThat(userClient.specificFeignMethod(true)).isEqualTo(\"fallback\");\n+\t\tassertThat(userClient.specificFeignMethod(false)).isEqualTo(\"fallback\");\n \n \t\t// longer than timeWindow, circuit breaker half open\n \t\tThread.sleep(1200L);\n \n \t\t// let circuit breaker close\n \t\tassertThat(userClient.specificFeignMethod(true)).isEqualTo(\"ok\");\n-\t\tassertThat(userClient.specificFeignMethod(true)).isEqualTo(\"ok\");\n+\t\tassertThat(userClient.specificFeignMethod(false)).isEqualTo(\"fallback\");\n \t}\n \n \t@Configuration",
      "parent_sha": "2e3af0690134f881a0b48f4c79f8f8ffc139883e"
    }
  },
  {
    "oid": "4817ca53b86949dca8cbd1ca7cabcfd8057373f9",
    "message": "Upgrade Sentinel to 1.8.1",
    "date": "2021-02-26T03:32:15Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/4817ca53b86949dca8cbd1ca7cabcfd8057373f9",
    "details": {
      "sha": "b502fc54330c20c3c686ae09045bb1fc0f295b59",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/endpoint/SentinelHealthIndicator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/4817ca53b86949dca8cbd1ca7cabcfd8057373f9/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/4817ca53b86949dca8cbd1ca7cabcfd8057373f9/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fendpoint%2FSentinelHealthIndicator.java?ref=4817ca53b86949dca8cbd1ca7cabcfd8057373f9",
      "patch": "@@ -16,15 +16,17 @@\n \n package com.alibaba.cloud.sentinel.endpoint;\n \n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import com.alibaba.cloud.sentinel.SentinelProperties;\n import com.alibaba.csp.sentinel.datasource.AbstractDataSource;\n import com.alibaba.csp.sentinel.heartbeat.HeartbeatSenderProvider;\n import com.alibaba.csp.sentinel.transport.HeartbeatSender;\n import com.alibaba.csp.sentinel.transport.config.TransportConfig;\n import com.alibaba.csp.sentinel.transport.endpoint.Endpoint;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.HashMap;\n+\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.boot.actuate.health.AbstractHealthIndicator;\n import org.springframework.boot.actuate.health.Health;",
      "parent_sha": "15df0bff6b1f4489508e68c56ce59e09178f6cf0"
    }
  },
  {
    "oid": "8717bd098770055dffb1cf2a4b0d835457a2447a",
    "message": "Update SCX tests javadoc.",
    "date": "2018-12-14T09:45:21Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/8717bd098770055dffb1cf2a4b0d835457a2447a",
    "details": {
      "sha": "ca390ea99c93139db217bfd2f77ee90d8f500689",
      "filename": "spring-cloud-alicloud-context/src/test/java/org/springframework/cloud/alicloud/context/scx/ScxAutoConfigurationTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/8717bd098770055dffb1cf2a4b0d835457a2447a/spring-cloud-alicloud-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fscx%2FScxAutoConfigurationTests.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/8717bd098770055dffb1cf2a4b0d835457a2447a/spring-cloud-alicloud-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fscx%2FScxAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alicloud-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fscx%2FScxAutoConfigurationTests.java?ref=8717bd098770055dffb1cf2a4b0d835457a2447a",
      "patch": "@@ -22,14 +22,9 @@\n import org.springframework.boot.autoconfigure.AutoConfigurations;\n import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n import org.springframework.cloud.alicloud.context.edas.EdasProperties;\n-import org.springframework.cloud.alicloud.context.oss.OssProperties;\n-\n-import com.aliyun.oss.OSS;\n \n /**\n- * {@link OSS} {@link OssProperties} Test\n- *\n- * @author <a href=\"mailto:fangjian0423@gmail.com\">Jim</a>\n+ * @author xiaolongzuo\n  */\n public class ScxAutoConfigurationTests {\n ",
      "parent_sha": "28777fecd050a21c786a4c5c080d91b74b8a1cb1"
    }
  },
  {
    "oid": "c01748316d88fb63dc7efa365e5e49d1562c956c",
    "message": "fix RocketMQ SecretKey leakage risk (#3091)\n\nfix RocketMQ SecretKey leakage risk",
    "date": "2023-01-13T05:36:16Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/c01748316d88fb63dc7efa365e5e49d1562c956c",
    "details": {
      "sha": "91cebaba20bbcc0d372136d93e3fda95ae80f027",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/utils/RocketMQUtils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/c01748316d88fb63dc7efa365e5e49d1562c956c/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Futils%2FRocketMQUtils.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/c01748316d88fb63dc7efa365e5e49d1562c956c/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Futils%2FRocketMQUtils.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Futils%2FRocketMQUtils.java?ref=c01748316d88fb63dc7efa365e5e49d1562c956c",
      "patch": "@@ -77,10 +77,10 @@ public static String getInstanceName(RPCHook rpcHook, String identify) {\n \t\tif (null != rpcHook) {\n \t\t\tSessionCredentials sessionCredentials = ((AclClientRPCHook) rpcHook)\n \t\t\t\t\t.getSessionCredentials();\n-\t\t\tinstanceName.append(sessionCredentials.getAccessKey()).append(separator)\n-\t\t\t\t\t.append(sessionCredentials.getSecretKey()).append(separator);\n+\t\t\tinstanceName.append(sessionCredentials.getAccessKey()).append(separator);\n \t\t}\n-\t\tinstanceName.append(identify).append(separator).append(UtilAll.getPid());\n+\t\tinstanceName.append(identify).append(separator).append(UtilAll.getPid())\n+\t\t\t\t.append(separator).append(Long.toString(System.nanoTime(), 36));\n \t\treturn instanceName.toString();\n \t}\n ",
      "parent_sha": "11d258860132de0fcd25eb63dcb48caa7786cb69"
    }
  },
  {
    "oid": "d9982c61434b2b5adc0467675c67572d64932fe6",
    "message": "Adjust error message in the thrown exception",
    "date": "2019-08-20T12:53:11Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/d9982c61434b2b5adc0467675c67572d64932fe6",
    "details": {
      "sha": "ce94da20be18d4fd30c4b5f3afcb32ee14cd3ba2",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelBeanPostProcessor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/d9982c61434b2b5adc0467675c67572d64932fe6/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fcustom%2FSentinelBeanPostProcessor.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/d9982c61434b2b5adc0467675c67572d64932fe6/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fcustom%2FSentinelBeanPostProcessor.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fcustom%2FSentinelBeanPostProcessor.java?ref=d9982c61434b2b5adc0467675c67572d64932fe6",
      "patch": "@@ -149,8 +149,8 @@ else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n \t\t\t\t\tbeanName, standardReturnType.getName(), blockClass.getName(),\n \t\t\t\t\tblockMethod, argsStr);\n \t\t\tthrow new IllegalArgumentException(type + \" method return value in bean[\"\n-\t\t\t\t\t+ beanName + \"] is not ClientHttpResponse: \" + blockClass.getName()\n-\t\t\t\t\t+ \"#\" + blockMethod + argsStr);\n+\t\t\t\t\t+ beanName + \"] is not \" + standardReturnType.getName() + \": \"\n+\t\t\t\t\t+ blockClass.getName() + \"#\" + blockMethod + argsStr);\n \t\t}\n \t\tif (type.equals(SentinelConstants.BLOCK_TYPE)) {\n \t\t\tBlockClassRegistry.updateBlockHandlerFor(blockClass, blockMethod,",
      "parent_sha": "578d51c7da7a706b5e3fb237a288522669acd1e1"
    }
  },
  {
    "oid": "098b10316692b8bc31b0ba4a8c7dd7298b490bd1",
    "message": "fixes #150",
    "date": "2018-12-11T09:11:22Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/098b10316692b8bc31b0ba4a8c7dd7298b490bd1",
    "details": {
      "sha": "53347f7bad593bb0d611503416ae7db4efa2a084",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelAutoConfiguration.java",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/098b10316692b8bc31b0ba4a8c7dd7298b490bd1/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelAutoConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/098b10316692b8bc31b0ba4a8c7dd7298b490bd1/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fcustom%2FSentinelAutoConfiguration.java?ref=098b10316692b8bc31b0ba4a8c7dd7298b490bd1",
      "patch": "@@ -21,7 +21,6 @@\n import javax.annotation.PostConstruct;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -156,26 +155,22 @@ public SentinelDataSourceHandler sentinelDataSourceHandler() {\n \t}\n \n \t@Bean(\"sentinel-json-converter\")\n-\tpublic JsonConverter jsonConverter(\n-\t\t\t@Qualifier(\"sentinel-object-mapper\") ObjectMapper objectMapper) {\n-\t\treturn new JsonConverter(objectMapper);\n+\tpublic JsonConverter jsonConverter() {\n+\t\treturn new JsonConverter(objectMapper());\n \t}\n \n-\t@Bean(\"sentinel-object-mapper\")\n-\tpublic ObjectMapper objectMapper() {\n+\tprivate ObjectMapper objectMapper() {\n \t\treturn new ObjectMapper();\n \t}\n \n \t@ConditionalOnClass(XmlMapper.class)\n \tprotected static class SentinelXmlConfiguration {\n \t\t@Bean(\"sentinel-xml-converter\")\n-\t\tpublic XmlConverter xmlConverter(\n-\t\t\t\t@Qualifier(\"sentinel-xml-mapper\") XmlMapper xmlMapper) {\n-\t\t\treturn new XmlConverter(xmlMapper);\n+\t\tpublic XmlConverter xmlConverter() {\n+\t\t\treturn new XmlConverter(xmlMapper());\n \t\t}\n \n-\t\t@Bean(\"sentinel-xml-mapper\")\n-\t\tpublic XmlMapper xmlMapper() {\n+\t\tprivate XmlMapper xmlMapper() {\n \t\t\treturn new XmlMapper();\n \t\t}\n \t}",
      "parent_sha": "62c0326090be1e0a53c2dd58219ede7b0c77212c"
    }
  },
  {
    "oid": "1d44d73ebac46ed1e59322161e65dcd7ecaa2d67",
    "message": "sentinel add logs to query datasource process.",
    "date": "2018-10-25T02:43:01Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/1d44d73ebac46ed1e59322161e65dcd7ecaa2d67",
    "details": {
      "sha": "d54dd0299e8c931611d8a139a6fa98465d717ad3",
      "filename": "spring-cloud-alibaba-sentinel-datasource/src/main/java/org/springframework/cloud/alibaba/sentinel/datasource/SentinelDataSourcePostProcessor.java",
      "status": "modified",
      "additions": 22,
      "deletions": 8,
      "changes": 30,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/1d44d73ebac46ed1e59322161e65dcd7ecaa2d67/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fdatasource%2FSentinelDataSourcePostProcessor.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/1d44d73ebac46ed1e59322161e65dcd7ecaa2d67/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fdatasource%2FSentinelDataSourcePostProcessor.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fsentinel%2Fdatasource%2FSentinelDataSourcePostProcessor.java?ref=1d44d73ebac46ed1e59322161e65dcd7ecaa2d67",
      "patch": "@@ -195,37 +195,51 @@ private void registerDataSource(String beanName, Class targetClass,\n \n     @EventListener(classes = ApplicationStartedEvent.class)\n     public void appStartedListener(ApplicationStartedEvent event) throws Exception {\n+        logger.info(\"[Sentinel Starter] Start to find ReadableDataSource\");\n         Map<String, ReadableDataSource> dataSourceMap = event.getApplicationContext().getBeansOfType(\n             ReadableDataSource.class);\n         if (dataSourceMap.size() == 1) {\n+            logger.info(\"[Sentinel Starter] There exists only one ReadableDataSource named {}, start to load rules\",\n+                dataSourceMap.keySet().iterator().next());\n             ReadableDataSource dataSource = dataSourceMap.values().iterator().next();\n             Object ruleConfig = dataSource.loadConfig();\n             SentinelProperty sentinelProperty = dataSource.getProperty();\n-            if (checkRuleType(ruleConfig, FlowRule.class)) {\n+            Integer rulesNum;\n+            if ((rulesNum = checkRuleType(ruleConfig, FlowRule.class)) > 0) {\n                 FlowRuleManager.register2Property(sentinelProperty);\n+                logger.info(\"[Sentinel Starter] load {} flow rules\", rulesNum);\n             }\n-            if (checkRuleType(ruleConfig, DegradeRule.class)) {\n+            if ((rulesNum = checkRuleType(ruleConfig, DegradeRule.class)) > 0) {\n                 DegradeRuleManager.register2Property(sentinelProperty);\n+                logger.info(\"[Sentinel Starter] load {} degrade rules\", rulesNum);\n             }\n-            if (checkRuleType(ruleConfig, SystemRule.class)) {\n+            if ((rulesNum = checkRuleType(ruleConfig, SystemRule.class)) > 0) {\n                 SystemRuleManager.register2Property(sentinelProperty);\n+                logger.info(\"[Sentinel Starter] load {} system rules\", rulesNum);\n             }\n-            if (checkRuleType(ruleConfig, AuthorityRule.class)) {\n+            if ((rulesNum = checkRuleType(ruleConfig, AuthorityRule.class)) > 0) {\n                 AuthorityRuleManager.register2Property(sentinelProperty);\n+                logger.info(\"[Sentinel Starter] load {} authority rules\", rulesNum);\n             }\n+        } else if (dataSourceMap.size() > 1) {\n+            logger.warn(\n+                \"[Sentinel Starter] There exists more than one ReadableDataSource, can not choose which one to load\");\n+        } else {\n+            logger.warn(\n+                \"[Sentinel Starter] No ReadableDataSource exists\");\n         }\n     }\n \n-    private boolean checkRuleType(Object ruleConfig, Class type) {\n+    private Integer checkRuleType(Object ruleConfig, Class type) {\n         if (ruleConfig.getClass() == type) {\n-            return true;\n+            return 1;\n         } else if (ruleConfig instanceof List) {\n             List ruleList = (List)ruleConfig;\n             if (ruleList.stream().filter(rule -> rule.getClass() == type).toArray().length == ruleList.size()) {\n-                return true;\n+                return ruleList.size();\n             }\n         }\n-        return false;\n+        return -1;\n     }\n \n     class SentinelDataSourceField {",
      "parent_sha": "00aeb90df2d7152abcd3e3aefff3b2e024f4f89a"
    }
  },
  {
    "oid": "c1a20e15f1a6ed355f4a7a9fe7e230ed34ee97c2",
    "message": "Fix: method naming typo (#3301)",
    "date": "2023-05-08T11:03:38Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/c1a20e15f1a6ed355f4a7a9fe7e230ed34ee97c2",
    "details": {
      "sha": "2617163919b63c932f4ca9e4f2e259e6c1af4d64",
      "filename": "spring-cloud-alibaba-examples/nacos-example/nacos-config-example/src/main/java/com/alibaba/cloud/examples/example/DockingInterfaceExample.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/c1a20e15f1a6ed355f4a7a9fe7e230ed34ee97c2/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fexample%2FDockingInterfaceExample.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/c1a20e15f1a6ed355f4a7a9fe7e230ed34ee97c2/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fexample%2FDockingInterfaceExample.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-examples%2Fnacos-example%2Fnacos-config-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fexample%2FDockingInterfaceExample.java?ref=c1a20e15f1a6ed355f4a7a9fe7e230ed34ee97c2",
      "patch": "@@ -95,8 +95,8 @@ public boolean publishConfig(@RequestParam(\"dataId\") String dataId,\n \t * @param group group\n \t * @return boolean\n \t */\n-\t@RequestMapping(\"/remoteConfig\")\n-\tpublic boolean remoteConfig(@RequestParam(\"dataId\") String dataId,\n+\t@RequestMapping(\"/removeConfig\")\n+\tpublic boolean removeConfig(@RequestParam(\"dataId\") String dataId,\n \t\t\t@RequestParam(value = \"group\", required = false) String group)\n \t\t\tthrows NacosException {\n \t\tif (StringUtils.isEmpty(group)) {",
      "parent_sha": "abeb164de4a36dc0ba23aed5549842a80a08bb47"
    }
  },
  {
    "oid": "0c4f58f1f9a35dfc7efae06ef262a04002d25111",
    "message": "update sentinel rule convert",
    "date": "2019-07-30T04:34:00Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/0c4f58f1f9a35dfc7efae06ef262a04002d25111",
    "details": {
      "sha": "cf2645cdaa418daea3990bf8d4fdadd0382008b7",
      "filename": "spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/converter/SentinelConverter.java",
      "status": "modified",
      "additions": 16,
      "deletions": 41,
      "changes": 57,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/0c4f58f1f9a35dfc7efae06ef262a04002d25111/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconverter%2FSentinelConverter.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/0c4f58f1f9a35dfc7efae06ef262a04002d25111/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconverter%2FSentinelConverter.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconverter%2FSentinelConverter.java?ref=0c4f58f1f9a35dfc7efae06ef262a04002d25111",
      "patch": "@@ -16,6 +16,7 @@\n \n package com.alibaba.cloud.sentinel.datasource.converter;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -27,17 +28,13 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n \n-import com.alibaba.cloud.sentinel.datasource.RuleType;\n import com.alibaba.csp.sentinel.datasource.Converter;\n import com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;\n import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n-import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;\n-import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleUtil;\n import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;\n import com.alibaba.csp.sentinel.slots.system.SystemRule;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n@@ -88,56 +85,34 @@ public Collection<Object> convert(String source) {\n \t\t\tList sourceArray = objectMapper.readValue(source,\n \t\t\t\t\tnew TypeReference<List<HashMap>>() {\n \t\t\t\t\t});\n-\t\t\tsourceArray.stream().forEach(obj -> {\n \n+\t\t\tfor (Object obj : sourceArray) {\n \t\t\t\tString item = null;\n \t\t\t\ttry {\n \t\t\t\t\titem = objectMapper.writeValueAsString(obj);\n+\t\t\t\t\tOptional.ofNullable(convertRule(item))\n+\t\t\t\t\t\t\t.ifPresent(convertRule -> ruleCollection.add(convertRule));\n \t\t\t\t}\n-\t\t\t\tcatch (JsonProcessingException e) {\n-\t\t\t\t\t// won't be happen\n+\t\t\t\tcatch (IOException e) {\n+\t\t\t\t\tlog.error(\"sentinel rule convert error: \" + e.getMessage(), e);\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"sentinel rule convert error: \" + e.getMessage(), e);\n \t\t\t\t}\n-\n-\t\t\t\tOptional.ofNullable(convertRule(item))\n-\t\t\t\t\t\t.ifPresent(convertRule -> ruleCollection.add(convertRule));\n-\t\t\t});\n-\n-\t\t\tif (ruleCollection.size() != sourceArray.size()) {\n-\t\t\t\tthrow new IllegalArgumentException(\"convert \" + ruleCollection.size()\n-\t\t\t\t\t\t+ \" rules but there are \" + sourceArray.size()\n-\t\t\t\t\t\t+ \" rules from datasource. RuleClass: \"\n-\t\t\t\t\t\t+ ruleClass.getSimpleName());\n \t\t\t}\n \t\t}\n \t\tcatch (Exception e) {\n-\t\t\tthrow new RuntimeException(\"convert error: \" + e.getMessage(), e);\n+\t\t\tif (e instanceof RuntimeException) {\n+\t\t\t\tthrow (RuntimeException) e;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthrow new RuntimeException(\"convert error: \" + e.getMessage(), e);\n+\t\t\t}\n \t\t}\n \t\treturn ruleCollection;\n \t}\n \n-\tprivate Object convertRule(String ruleStr) {\n-\t\ttry {\n-\t\t\tfinal Object rule = objectMapper.readValue(ruleStr, ruleClass);\n-\t\t\tRuleType ruleType = RuleType.getByClass(ruleClass).get();\n-\t\t\tswitch (ruleType) {\n-\t\t\tcase FLOW:\n-\t\t\t\tif (!FlowRuleUtil.isValidRule((FlowRule) rule)) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase DEGRADE:\n-\t\t\t\tif (!DegradeRuleManager.isValidRule((DegradeRule) rule)) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\tdefault:\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\treturn rule;\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\t// ignore\n-\t\t}\n-\t\treturn null;\n+\tprivate Object convertRule(String ruleStr) throws IOException {\n+\t\treturn objectMapper.readValue(ruleStr, ruleClass);\n \t}\n \n }",
      "parent_sha": "368487931f80afbcaf5c758cc14f78f267595039"
    }
  },
  {
    "oid": "7a491030e674956e5925e1d355b568bfe58822d1",
    "message": "Fix reactive sentinel circuit breaker tests (#3054)\n\n* Fix reactive sentinel circuit breaker tests",
    "date": "2023-01-06T08:23:45Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/7a491030e674956e5925e1d355b568bfe58822d1",
    "details": {
      "sha": "1e18fc056582494ec0f6c350baca4f78c31487fc",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/test/java/com/alibaba/cloud/circuitbreaker/sentinel/ReactiveSentinelCircuitBreakerIntegrationTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/7a491030e674956e5925e1d355b568bfe58822d1/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2FReactiveSentinelCircuitBreakerIntegrationTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/7a491030e674956e5925e1d355b568bfe58822d1/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2FReactiveSentinelCircuitBreakerIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2FReactiveSentinelCircuitBreakerIntegrationTest.java?ref=7a491030e674956e5925e1d355b568bfe58822d1",
      "patch": "@@ -74,8 +74,9 @@ public void test() throws Exception {\n \t\t// Then in the next 5s, the fallback method should be called.\n \t\tfor (int i = 0; i < 5; i++) {\n \t\t\tStepVerifier.create(service.slow()).expectNext(\"fallback\").verifyComplete();\n-\t\t\tThread.sleep(1000);\n+\t\t\tThread.sleep(900);\n \t\t}\n+\t\tThread.sleep(500);\n \n \t\t// Half-open recovery (will re-open the circuit breaker).\n \t\tStepVerifier.create(service.slow()).expectNext(\"slow\").verifyComplete();\n@@ -91,8 +92,9 @@ public void test() throws Exception {\n \t\tfor (int i = 0; i < 5; i++) {\n \t\t\tStepVerifier.create(service.slowFlux()).expectNext(\"flux_fallback\")\n \t\t\t\t\t.verifyComplete();\n-\t\t\tThread.sleep(1000);\n+\t\t\tThread.sleep(900);\n \t\t}\n+\t\tThread.sleep(500);\n \n \t\t// Half-open recovery (will re-open the circuit breaker).\n \t\tStepVerifier.create(service.slowFlux()).expectNext(\"slowflux\").verifyComplete();",
      "parent_sha": "0cdd2d784d3c695d1377e1f4ef87003c832097fa"
    }
  },
  {
    "oid": "6f551713719dfe3e4fd13ab9250ad59d9ecfab4f",
    "message": "Rename HeartBeat bean name",
    "date": "2022-11-03T05:40:59Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/6f551713719dfe3e4fd13ab9250ad59d9ecfab4f",
    "details": {
      "sha": "3b6ef43caca7e26446cecd201898b5ccf09a6250",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/GatewayLocatorHeartBeatPublisher.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/6f551713719dfe3e4fd13ab9250ad59d9ecfab4f/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FGatewayLocatorHeartBeatPublisher.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/6f551713719dfe3e4fd13ab9250ad59d9ecfab4f/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FGatewayLocatorHeartBeatPublisher.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FGatewayLocatorHeartBeatPublisher.java?ref=6f551713719dfe3e4fd13ab9250ad59d9ecfab4f",
      "patch": "@@ -54,7 +54,7 @@ public GatewayLocatorHeartBeatPublisher(NacosDiscoveryProperties nacosDiscoveryP\n \n \tprivate static ThreadPoolTaskScheduler getTaskScheduler() {\n \t\tThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();\n-\t\ttaskScheduler.setBeanName(\"Nacos-SCG-HeartBeat-Task-Scheduler\");\n+\t\ttaskScheduler.setBeanName(\"HeartBeat-Task-Scheduler\");\n \t\ttaskScheduler.initialize();\n \t\treturn taskScheduler;\n \t}",
      "parent_sha": "de8d2c8cbf036c77a80dcf34f687e3f194dbda89"
    }
  },
  {
    "oid": "68c644f956a4c08da264fad44cc2091d00662b86",
    "message": "update default group to DEFAULT_GROUP",
    "date": "2019-08-26T10:05:59Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/68c644f956a4c08da264fad44cc2091d00662b86",
    "details": {
      "sha": "3826285faa552c662f4ed0b31fbbfced783638f1",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosDiscoveryProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/68c644f956a4c08da264fad44cc2091d00662b86/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosDiscoveryProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/68c644f956a4c08da264fad44cc2091d00662b86/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosDiscoveryProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosDiscoveryProperties.java?ref=68c644f956a4c08da264fad44cc2091d00662b86",
      "patch": "@@ -111,7 +111,7 @@ public class NacosDiscoveryProperties {\n \t/**\n \t * group name for nacos\n \t */\n-\tprivate String group = \"DEFAULT\";\n+\tprivate String group = \"DEFAULT_GROUP\";\n \n \t/**\n \t * naming load from local cache at application start. true is load.",
      "parent_sha": "d6addc49247d3a4dc23adf9d61d48890072e72e4"
    }
  },
  {
    "oid": "bec0f8830f39c624cfea2c60523322303ac27b04",
    "message": "Fix Incorrect letter , fixes #147",
    "date": "2018-12-28T07:50:37Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/bec0f8830f39c624cfea2c60523322303ac27b04",
    "details": {
      "sha": "93915dbe6cb90492569736bf4019c6bb7151063a",
      "filename": "spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/client/NacosPropertySourceLocator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/bec0f8830f39c624cfea2c60523322303ac27b04/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fclient%2FNacosPropertySourceLocator.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/bec0f8830f39c624cfea2c60523322303ac27b04/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fclient%2FNacosPropertySourceLocator.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fclient%2FNacosPropertySourceLocator.java?ref=bec0f8830f39c624cfea2c60523322303ac27b04",
      "patch": "@@ -106,7 +106,7 @@ private void loadSharedConfiguration(\n             return;\n         }\n \n-        String[] sharedDataIdArry = sharedDataIds.split(SHARED_CONFIG_SEPRATOR_CHAR);\n+        String[] sharedDataIdArry = sharedDataIds.split(SHARED_CONFIG_SEPARATOR_CHAR);\n         checkDataIdFileExtension(sharedDataIdArry);\n \n         for (int i = 0; i < sharedDataIdArry.length; i++) {\n@@ -209,7 +209,7 @@ private boolean checkDataIdIsRefreshbable(String refreshDataIds,\n             return false;\n         }\n \n-        String[] refreshDataIdArry = refreshDataIds.split(SHARED_CONFIG_SEPRATOR_CHAR);\n+        String[] refreshDataIdArry = refreshDataIds.split(SHARED_CONFIG_SEPARATOR_CHAR);\n         for (String refreshDataId : refreshDataIdArry) {\n             if (refreshDataId.equals(sharedDataId)) {\n                 return true;",
      "parent_sha": "5ee3b34f9d2d95d72a12f4f05453967b1d29d4b4"
    }
  },
  {
    "oid": "50d72cbb57e169eaf2bbeefd99d5a43f5462a45b",
    "message": "fix: 2023.x #3445 A bean for InetIPv6Utils that could not found at pr\u2026 (#3695)",
    "date": "2024-07-29T04:52:52Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/50d72cbb57e169eaf2bbeefd99d5a43f5462a45b",
    "details": {
      "sha": "14f40bd926a2eab4de6eac9da133a768f9c82cb6",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/configclient/NacosDiscoveryClientConfigServiceBootstrapConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/50d72cbb57e169eaf2bbeefd99d5a43f5462a45b/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2Fconfigclient%2FNacosDiscoveryClientConfigServiceBootstrapConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/50d72cbb57e169eaf2bbeefd99d5a43f5462a45b/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2Fconfigclient%2FNacosDiscoveryClientConfigServiceBootstrapConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2Fconfigclient%2FNacosDiscoveryClientConfigServiceBootstrapConfiguration.java?ref=50d72cbb57e169eaf2bbeefd99d5a43f5462a45b",
      "patch": "@@ -20,6 +20,7 @@\n import com.alibaba.cloud.nacos.discovery.NacosDiscoveryAutoConfiguration;\n import com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientConfiguration;\n import com.alibaba.cloud.nacos.discovery.reactive.NacosReactiveDiscoveryClientConfiguration;\n+import com.alibaba.cloud.nacos.util.UtilIPv6AutoConfiguration;\n \n import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -38,7 +39,7 @@\n @Configuration(proxyBeanMethods = false)\n @ImportAutoConfiguration({ NacosDiscoveryAutoConfiguration.class,\n \t\tNacosServiceAutoConfiguration.class, NacosDiscoveryClientConfiguration.class,\n-\t\tNacosReactiveDiscoveryClientConfiguration.class })\n+\t\tNacosReactiveDiscoveryClientConfiguration.class, UtilIPv6AutoConfiguration.class })\n public class NacosDiscoveryClientConfigServiceBootstrapConfiguration {\n \n }",
      "parent_sha": "22b89e7cd956ef9aeaab6926094603e23294feb8"
    }
  },
  {
    "oid": "62d3692dd1b70a1b3ee854970ed505de7dfec3cf",
    "message": "add group information in getServices",
    "date": "2019-08-22T05:55:05Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/62d3692dd1b70a1b3ee854970ed505de7dfec3cf",
    "details": {
      "sha": "71b1cafc3bebc08e7efc7ed6c14f6025b9441cba",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosDiscoveryClient.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/62d3692dd1b70a1b3ee854970ed505de7dfec3cf/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/62d3692dd1b70a1b3ee854970ed505de7dfec3cf/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fdiscovery%2FNacosDiscoveryClient.java?ref=62d3692dd1b70a1b3ee854970ed505de7dfec3cf",
      "patch": "@@ -105,8 +105,9 @@ public static List<ServiceInstance> hostToServiceInstanceList(\n     public List<String> getServices() {\n \n         try {\n+            String group = discoveryProperties.getGroup();\n             ListView<String> services = discoveryProperties.namingServiceInstance()\n-                    .getServicesOfServer(1, Integer.MAX_VALUE);\n+                    .getServicesOfServer(1, Integer.MAX_VALUE, group);\n             return services.getData();\n         } catch (Exception e) {\n             log.error(\"get service name from nacos server fail,\", e);",
      "parent_sha": "e419cac82924d0067afdf6bf85471df7c654ff04"
    }
  },
  {
    "oid": "483c7299136ebc0eb705c8c16755baf1c7e75804",
    "message": "add action",
    "date": "2022-08-28T04:20:04Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/483c7299136ebc0eb705c8c16755baf1c7e75804",
    "details": {
      "sha": "212241a5e0f8d9136d33592415dbcd471d690607",
      "filename": "spring-cloud-alibaba-tests/rocketmq-tests/rocketmq-stream-test/src/test/java/com/alibaba/cloud/stream/binder/rocketmq/RocketmqProduceAndConsumerTests.java",
      "status": "modified",
      "additions": 40,
      "deletions": 38,
      "changes": 78,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/483c7299136ebc0eb705c8c16755baf1c7e75804/spring-cloud-alibaba-tests%2Frocketmq-tests%2Frocketmq-stream-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketmqProduceAndConsumerTests.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/483c7299136ebc0eb705c8c16755baf1c7e75804/spring-cloud-alibaba-tests%2Frocketmq-tests%2Frocketmq-stream-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketmqProduceAndConsumerTests.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-tests%2Frocketmq-tests%2Frocketmq-stream-test%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2FRocketmqProduceAndConsumerTests.java?ref=483c7299136ebc0eb705c8c16755baf1c7e75804",
      "patch": "@@ -5,10 +5,13 @@\n \n import com.alibaba.cloud.rocketmq.SimpleMsg;\n import com.alibaba.cloud.stream.binder.rocketmq.autoconfigurate.RocketMQBinderAutoConfiguration;\n+import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQBinderConfigurationProperties;\n import com.alibaba.cloud.testsupport.SpringCloudAlibaba;\n import com.alibaba.cloud.testsupport.TestExtend;\n import org.apache.rocketmq.common.message.MessageConst;\n import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.platform.commons.util.StringUtils;\n import org.junit.runner.RunWith;\n@@ -24,6 +27,7 @@\n import org.springframework.cloud.stream.annotation.EnableBinding;\n import org.springframework.cloud.stream.annotation.Input;\n import org.springframework.cloud.stream.annotation.Output;\n+import org.springframework.cloud.stream.annotation.StreamListener;\n import org.springframework.cloud.stream.binder.PollableMessageSource;\n import org.springframework.cloud.stream.messaging.Processor;\n import org.springframework.cloud.stream.messaging.Sink;\n@@ -38,32 +42,56 @@\n import org.springframework.messaging.SubscribableChannel;\n import org.springframework.messaging.support.GenericMessage;\n import org.springframework.messaging.support.MessageBuilder;\n+import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import static com.alibaba.cloud.testsupport.Constant.TIME_OUT;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.NONE;\n \n @SpringCloudAlibaba(composeFiles = \"docker/rocket-compose-test.yml\", serviceName = \"rocketmq-standalone\")\n-@TestExtend(time = 11 * TIME_OUT)\n+@TestExtend(time = 10 * TIME_OUT)\n @RunWith(SpringRunner.class)\n @EnableBinding({Processor.class, RocketmqProduceAndConsumerTests.PolledProcessor.class})\n+@DirtiesContext\n @SpringBootTest(classes = RocketmqProduceAndConsumerTests.TestConfig.class, webEnvironment = NONE, properties = {\n \t\t\"spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876,127.0.0.1:9877\",\n-\t\t\"spring.cloud.stream.rocketmq.binder.group=test-group1\",\n-\t\t\"spring.cloud.stream.pollable-source=pollable\",\n+\t\t\"spring.cloud.stream.rocketmq.binder.group=flaky-group\",\n+//\t\t\"spring.cloud.stream.rocketmq.binder.consumer-group=flaky-group\",\n+//\t\t\"spring.cloud.stream.pollable-source=pollable\",\n \t\t\"spring.cloud.stream.bindings.output.destination=TopicOrderTest\",\n \t\t\"spring.cloud.stream.bindings.output.content-type=application/json\",\n+\t\t\"spring.cloud.stream.bindings.output.group=test-group1\",\n \t\t\"spring.cloud.stream.bindings.input1.destination=TopicOrderTest\",\n \t\t\"spring.cloud.stream.bindings.input1.content-type=application/json\",\n \t\t\"spring.cloud.stream.bindings.input1.group=test-group1\",\n \t\t\"spring.cloud.stream.rocketmq.bindings.input1.consumer.push.orderly=true\",\n-\t\t\"spring.cloud.stream.bindings.input1.consumer.maxAttempts=1\"})\n+\t\t\"spring.cloud.stream.bindings.input1.consumer.maxAttempts=1\",})\n public class RocketmqProduceAndConsumerTests {\n \n+\t@Autowired\n+\tprivate PolledProcessor processor;\n+\n+\t@BeforeAll\n+\tpublic static void prepare(){\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void setup(){\n+\t\tString key = \"KEY\";\n+\t\tString messageId = \"1\";\n+\t\tMap<String, Object> headers = new HashMap<>();\n+\t\theaders.put(MessageConst.PROPERTY_KEYS, key);\n+\t\theaders.put(MessageConst.PROPERTY_TAGS, \"TagA\");\n+\t\theaders.put(MessageConst.PROPERTY_ORIGIN_MESSAGE_ID, messageId);\n+\t\tMessage<SimpleMsg> msg = new GenericMessage(new SimpleMsg(\"Hello RocketMQ\"), headers);\n+\t\tprocessor.output().send(msg);\n+\t}\n \n \t@Test\n-\tpublic void testConsumeAndProduce(){\n+\t@StreamListener(PolledProcessor.CUSTOMIZE_OUTPUT)\n+\tpublic void testConsumeAndProduce() throws InterruptedException {\n \n+\t\tprocessor.input().subscribe(message -> Assertions.assertEquals(message,\"Hello RocketMQ\" ));\n \t}\n \n \t@Configuration\n@@ -72,46 +100,20 @@ public void testConsumeAndProduce(){\n \t\t\tRocketMQBinderAutoConfiguration.class })\n \tpublic static class TestConfig {\n \n-\t\t@Bean(name = \"produce\")\n-\t\t@Profile(\"test\")\n-\t\tpublic ApplicationRunner produceRunner(MessageChannel dest) {\n-\t\t\treturn args -> {\n-\t\t\t\t\tString key = \"KEY\";\n-\t\t\t\t\tString messageId = \"1\";\n-\t\t\t\t\tMap<String, Object> headers = new HashMap<>();\n-\t\t\t\t\theaders.put(MessageConst.PROPERTY_KEYS, key);\n-\t\t\t\t\theaders.put(MessageConst.PROPERTY_TAGS, \"TagA\");\n-\t\t\t\t\theaders.put(MessageConst.PROPERTY_ORIGIN_MESSAGE_ID, messageId);\n-\t\t\t\t\tMessage<SimpleMsg> msg = new GenericMessage(new SimpleMsg(\"Hello RocketMQ\"), headers);\n-\t\t\t\t\tdest.send(msg);\n-\t\t\t\t\tThread.sleep(5_000);\n-\t\t\t};\n-\t\t}\n-\n-\t\t@Bean(name = \"consumer\")\n-\t\t@Profile(\"test\")\n-\t\t@DependsOn(value = \"produce\")\n-\t\tpublic ApplicationRunner consumerRunner(MessageChannel dest) {\n-\t\t\treturn args -> {\n-\t\t\t\t((SubscribableChannel) dest).subscribe(message -> Assertions.assertEquals(message,\"Hello RocketMQ\" ));\n-\t\t\t};\n-\t\t}\n-\n \t}\n \t/**\n \t * \u81ea\u5b9a\u4e49\u53d1\u9001\u6d88\u606f\u63a5\u53e3\n \t */\n+\tpublic interface PolledProcessor {\n \n-\t\tpublic interface PolledProcessor extends Source, Sink {\n-\n-\t\t\tString CUSTOMIZE_OUTPUT = \"output\";\n+\t\tString CUSTOMIZE_OUTPUT = \"output\";\n \n-\t\t\t@Output(CUSTOMIZE_OUTPUT)\n-\t\t\tMessageChannel output();\n+\t\t@Output(CUSTOMIZE_OUTPUT)\n+\t\tMessageChannel output();\n \n-\t\t\tString CUSTOMIZE_INPUT = \"input1\";\n-\t\t\t@Input(CUSTOMIZE_INPUT)\n-\t\t\tSubscribableChannel input();\n+\t\tString CUSTOMIZE_INPUT = \"input1\";\n+\t\t@Input(CUSTOMIZE_INPUT)\n+\t\tSubscribableChannel input();\n \t}\n \n }",
      "parent_sha": "066580e7840e992f99b16cdbae1071f67bf2dbc1"
    }
  },
  {
    "oid": "e912820387da647eda532e1dc4cf801774207331",
    "message": "Refactor",
    "date": "2019-04-09T13:32:42Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/e912820387da647eda532e1dc4cf801774207331",
    "details": {
      "sha": "4674f0e18491c19eb9ca1c365c0776369103a9ec",
      "filename": "spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/AbstractSpringCloudRegistry.java",
      "status": "modified",
      "additions": 12,
      "deletions": 76,
      "changes": 88,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/e912820387da647eda532e1dc4cf801774207331/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fdubbo%2Fregistry%2FAbstractSpringCloudRegistry.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/e912820387da647eda532e1dc4cf801774207331/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fdubbo%2Fregistry%2FAbstractSpringCloudRegistry.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-dubbo%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fdubbo%2Fregistry%2FAbstractSpringCloudRegistry.java?ref=e912820387da647eda532e1dc4cf801774207331",
      "patch": "@@ -18,7 +18,6 @@\n \n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.URL;\n-import org.apache.dubbo.common.utils.UrlUtils;\n import org.apache.dubbo.registry.NotifyListener;\n import org.apache.dubbo.registry.RegistryFactory;\n import org.apache.dubbo.registry.support.FailbackRegistry;\n@@ -29,20 +28,21 @@\n import org.springframework.cloud.client.discovery.DiscoveryClient;\n \n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n import java.util.LinkedHashSet;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n \n+import static java.util.Collections.emptyList;\n import static java.util.Collections.singleton;\n import static org.apache.dubbo.common.Constants.PROVIDER_SIDE;\n import static org.apache.dubbo.common.Constants.SIDE_KEY;\n import static org.springframework.util.ObjectUtils.isEmpty;\n+import static org.springframework.util.StringUtils.hasText;\n \n /**\n  * Abstract Dubbo {@link RegistryFactory} uses Spring Cloud Service Registration abstraction, whose protocol is \"spring-cloud\"\n@@ -144,13 +144,8 @@ protected void shutdownServiceNamesLookup() {\n         }\n     }\n \n-    private void filterServiceNames(Collection<String> serviceNames) {\n-        filter(serviceNames, new Filter<String>() {\n-            @Override\n-            public boolean accept(String serviceName) {\n-                return supports(serviceName);\n-            }\n-        });\n+    private Set<String> filterServiceNames(Collection<String> serviceNames) {\n+        return new LinkedHashSet<>(filter(serviceNames, this::supports));\n     }\n \n     protected abstract boolean supports(String serviceName);\n@@ -185,8 +180,7 @@ protected boolean isAdminProtocol(URL url) {\n      */\n     protected Set<String> getServiceNamesForOps(URL url) {\n         Set<String> serviceNames = getAllServiceNames();\n-        filterServiceNames(serviceNames);\n-        return serviceNames;\n+        return filterServiceNames(serviceNames);\n     }\n \n     protected abstract String getServiceName(URL url);\n@@ -206,7 +200,7 @@ protected ScheduledFuture<?> schedule(Runnable runnable) {\n     }\n \n     protected List<ServiceInstance> getServiceInstances(String serviceName) {\n-        return discoveryClient.getInstances(serviceName);\n+        return hasText(serviceName) ? discoveryClient.getInstances(serviceName) : emptyList();\n     }\n \n     private void subscribe(final URL url, final NotifyListener listener, final Collection<String> serviceNames) {\n@@ -227,67 +221,9 @@ private void subscribe(final URL url, final NotifyListener listener, final Colle\n      */\n     protected abstract void notifySubscriber(URL url, NotifyListener listener, List<ServiceInstance> serviceInstances);\n \n-    protected void filterHealthyInstances(Collection<ServiceInstance> instances) {\n-        filter(instances, new Filter<ServiceInstance>() {\n-            @Override\n-            public boolean accept(ServiceInstance data) {\n-                // TODO check the details of status\n-//                return serviceRegistry.getStatus(new DubboRegistration(data)) != null;\n-                return true;\n-            }\n-        });\n-    }\n-\n-    protected List<URL> buildURLs(URL consumerURL, Collection<ServiceInstance> serviceInstances) {\n-        if (serviceInstances.isEmpty()) {\n-            return Collections.emptyList();\n-        }\n-        List<URL> urls = new LinkedList<URL>();\n-        for (ServiceInstance serviceInstance : serviceInstances) {\n-            URL url = buildURL(serviceInstance);\n-            if (UrlUtils.isMatch(consumerURL, url)) {\n-                urls.add(url);\n-            }\n-        }\n-        return urls;\n-    }\n-\n-    private URL buildURL(ServiceInstance serviceInstance) {\n-        URL url = new URL(serviceInstance.getMetadata().get(Constants.PROTOCOL_KEY),\n-                serviceInstance.getHost(),\n-                serviceInstance.getPort(),\n-                serviceInstance.getMetadata());\n-        return url;\n-    }\n-\n-    private <T> void filter(Collection<T> collection, Filter<T> filter) {\n-        Iterator<T> iterator = collection.iterator();\n-        while (iterator.hasNext()) {\n-            T data = iterator.next();\n-            if (!filter.accept(data)) { // remove if not accept\n-                iterator.remove();\n-            }\n-        }\n-    }\n-\n-    private static <T> T[] of(T... values) {\n-        return values;\n-    }\n-\n-    /**\n-     * A filter\n-     */\n-    public interface Filter<T> {\n-\n-        /**\n-         * Tests whether or not the specified data should be accepted.\n-         *\n-         * @param data The data to be tested\n-         * @return <code>true</code> if and only if <code>data</code>\n-         * should be accepted\n-         */\n-        boolean accept(T data);\n-\n+    protected <T> Collection<T> filter(Collection<T> collection, Predicate<T> filter) {\n+        return collection.stream()\n+                .filter(filter)\n+                .collect(Collectors.toList());\n     }\n-\n }",
      "parent_sha": "d5bdfbf127436891714a5a520a80944e559463d7"
    }
  },
  {
    "oid": "0ede54d0f44999cfb6962ca2cd1e3dda6884ad33",
    "message": "Adjust test config.",
    "date": "2022-02-24T05:44:02Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/0ede54d0f44999cfb6962ca2cd1e3dda6884ad33",
    "details": {
      "sha": "48fe46f715764c47faf6628f236e0aba45f699f7",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/test/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/FeignClientCircuitBreakerRuleIntegrationTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/0ede54d0f44999cfb6962ca2cd1e3dda6884ad33/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FFeignClientCircuitBreakerRuleIntegrationTest.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/0ede54d0f44999cfb6962ca2cd1e3dda6884ad33/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FFeignClientCircuitBreakerRuleIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FFeignClientCircuitBreakerRuleIntegrationTest.java?ref=0ede54d0f44999cfb6962ca2cd1e3dda6884ad33",
      "patch": "@@ -43,17 +43,17 @@\n \t\t\"feign.sentinel.rules.default[0].grade=2\",\n \t\t\"feign.sentinel.rules.default[0].count=2\",\n \t\t\"feign.sentinel.rules.default[0].timeWindow=2\",\n-\t\t\"feign.sentinel.rules.default[0].statIntervalMs=1000\",\n+\t\t\"feign.sentinel.rules.default[0].statIntervalMs=2000\",\n \t\t\"feign.sentinel.rules.default[0].minRequestAmount=5\",\n \t\t\"feign.sentinel.rules.user[0].grade=2\",\n \t\t\"feign.sentinel.rules.user[0].count=2\",\n \t\t\"feign.sentinel.rules.user[0].timeWindow=2\",\n-\t\t\"feign.sentinel.rules.user[0].statIntervalMs=1000\",\n+\t\t\"feign.sentinel.rules.user[0].statIntervalMs=2000\",\n \t\t\"feign.sentinel.rules.user[0].minRequestAmount=5\",\n \t\t\"feign.sentinel.rules.[user#specificFeignMethod(boolean)][0].grade=2\",\n \t\t\"feign.sentinel.rules.[user#specificFeignMethod(boolean)][0].count=1\",\n \t\t\"feign.sentinel.rules.[user#specificFeignMethod(boolean)][0].timeWindow=2\",\n-\t\t\"feign.sentinel.rules.[user#specificFeignMethod(boolean)][0].statIntervalMs=1000\",\n+\t\t\"feign.sentinel.rules.[user#specificFeignMethod(boolean)][0].statIntervalMs=2000\",\n \t\t\"feign.sentinel.rules.[user#specificFeignMethod(boolean)][0].minRequestAmount=5\"\n })\n public class FeignClientCircuitBreakerRuleIntegrationTest {",
      "parent_sha": "6fc14b77daccb35fd41944570d3b98fda57308d0"
    }
  },
  {
    "oid": "1c764463a1dc5f3011a466cd4e87f3d886a55045",
    "message": "remove useless imports",
    "date": "2019-05-24T06:50:14Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/1c764463a1dc5f3011a466cd4e87f3d886a55045",
    "details": {
      "sha": "3ea869524a3e002ed129d03c1bd37a15e1f78e5d",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryAutoConfiguration.java",
      "status": "modified",
      "additions": 23,
      "deletions": 26,
      "changes": 49,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/1c764463a1dc5f3011a466cd4e87f3d886a55045/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryAutoConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/1c764463a1dc5f3011a466cd4e87f3d886a55045/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryAutoConfiguration.java?ref=1c764463a1dc5f3011a466cd4e87f3d886a55045",
      "patch": "@@ -17,12 +17,9 @@\n package org.springframework.cloud.alibaba.nacos;\n \n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n-import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.cloud.alibaba.nacos.discovery.NacosDiscoveryClientAutoConfiguration;\n import org.springframework.cloud.alibaba.nacos.registry.NacosAutoServiceRegistration;\n import org.springframework.cloud.alibaba.nacos.registry.NacosRegistration;\n import org.springframework.cloud.alibaba.nacos.registry.NacosServiceRegistry;\n@@ -41,31 +38,31 @@\n @EnableConfigurationProperties\n @ConditionalOnNacosDiscoveryEnabled\n @ConditionalOnProperty(value = \"spring.cloud.service-registry.auto-registration.enabled\", matchIfMissing = true)\n-@AutoConfigureAfter({ AutoServiceRegistrationConfiguration.class,\n-\t\tAutoServiceRegistrationAutoConfiguration.class })\n+@AutoConfigureAfter({AutoServiceRegistrationConfiguration.class,\n+        AutoServiceRegistrationAutoConfiguration.class})\n public class NacosDiscoveryAutoConfiguration {\n \n-\t@Bean\n-\tpublic NacosServiceRegistry nacosServiceRegistry(\n-\t\t\tNacosDiscoveryProperties nacosDiscoveryProperties) {\n-\t\treturn new NacosServiceRegistry(nacosDiscoveryProperties);\n-\t}\n+    @Bean\n+    public NacosServiceRegistry nacosServiceRegistry(\n+            NacosDiscoveryProperties nacosDiscoveryProperties) {\n+        return new NacosServiceRegistry(nacosDiscoveryProperties);\n+    }\n \n-\t@Bean\n-\t@ConditionalOnBean(AutoServiceRegistrationProperties.class)\n-\tpublic NacosRegistration nacosRegistration(\n-\t\t\tNacosDiscoveryProperties nacosDiscoveryProperties,\n-\t\t\tApplicationContext context) {\n-\t\treturn new NacosRegistration(nacosDiscoveryProperties, context);\n-\t}\n+    @Bean\n+    @ConditionalOnBean(AutoServiceRegistrationProperties.class)\n+    public NacosRegistration nacosRegistration(\n+            NacosDiscoveryProperties nacosDiscoveryProperties,\n+            ApplicationContext context) {\n+        return new NacosRegistration(nacosDiscoveryProperties, context);\n+    }\n \n-\t@Bean\n-\t@ConditionalOnBean(AutoServiceRegistrationProperties.class)\n-\tpublic NacosAutoServiceRegistration nacosAutoServiceRegistration(\n-\t\t\tNacosServiceRegistry registry,\n-\t\t\tAutoServiceRegistrationProperties autoServiceRegistrationProperties,\n-\t\t\tNacosRegistration registration) {\n-\t\treturn new NacosAutoServiceRegistration(registry,\n-\t\t\t\tautoServiceRegistrationProperties, registration);\n-\t}\n+    @Bean\n+    @ConditionalOnBean(AutoServiceRegistrationProperties.class)\n+    public NacosAutoServiceRegistration nacosAutoServiceRegistration(\n+            NacosServiceRegistry registry,\n+            AutoServiceRegistrationProperties autoServiceRegistrationProperties,\n+            NacosRegistration registration) {\n+        return new NacosAutoServiceRegistration(registry,\n+                autoServiceRegistrationProperties, registration);\n+    }\n }\n\\ No newline at end of file",
      "parent_sha": "5fd04277cb0b650b3ca2b6246f85a0d3563420f2"
    }
  },
  {
    "oid": "d7edf9f8ee1c3a541276702f6722b13e5de5a726",
    "message": "correct spelling",
    "date": "2020-09-10T09:30:26Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/d7edf9f8ee1c3a541276702f6722b13e5de5a726",
    "details": {
      "sha": "33e31a71d9ef0b879e8cb19118db4d95cd6d0829",
      "filename": "spring-cloud-alibaba-examples/seata-example/order-service/src/main/java/com/alibaba/cloud/examples/OrderApplication.java",
      "status": "renamed",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/d7edf9f8ee1c3a541276702f6722b13e5de5a726/spring-cloud-alibaba-examples%2Fseata-example%2Forder-service%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2FOrderApplication.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/d7edf9f8ee1c3a541276702f6722b13e5de5a726/spring-cloud-alibaba-examples%2Fseata-example%2Forder-service%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2FOrderApplication.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-examples%2Fseata-example%2Forder-service%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2FOrderApplication.java?ref=d7edf9f8ee1c3a541276702f6722b13e5de5a726",
      "patch": "@@ -25,10 +25,10 @@\n  * @author xiaojing\n  */\n @SpringBootApplication\n-public class OderApplication {\n+public class OrderApplication {\n \n \tpublic static void main(String[] args) {\n-\t\tSpringApplication.run(OderApplication.class, args);\n+\t\tSpringApplication.run(OrderApplication.class, args);\n \t}\n \n \t@Bean",
      "previous_filename": "spring-cloud-alibaba-examples/seata-example/order-service/src/main/java/com/alibaba/cloud/examples/OderApplication.java",
      "parent_sha": "6d0a80ab0e1cce84d13883e67b36c1e07247d2ad"
    }
  },
  {
    "oid": "dec4c63b5275a60e111787ad44d537cf6d875b0e",
    "message": "Refresh feign client rules only.\n\n\u73b0\u5728\u53ea\u5237\u65b0 feign client \u7194\u65ad\u89c4\u5219, \u624b\u52a8\u6dfb\u52a0\u6216\u8005\u901a\u8fc7 dashboard \u548c\u6570\u636e\u6e90\u914d\u7f6e\u7684\u89c4\u5219\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd",
    "date": "2022-01-19T13:49:31Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/dec4c63b5275a60e111787ad44d537cf6d875b0e",
    "details": {
      "sha": "7b41d2257c62135911c73f23e940b78e62ffae20",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/main/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/CircuitBreakerRuleChangeListener.java",
      "status": "modified",
      "additions": 34,
      "deletions": 46,
      "changes": 80,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/dec4c63b5275a60e111787ad44d537cf6d875b0e/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FCircuitBreakerRuleChangeListener.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/dec4c63b5275a60e111787ad44d537cf6d875b0e/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FCircuitBreakerRuleChangeListener.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-circuitbreaker-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fcircuitbreaker%2Fsentinel%2Ffeign%2FCircuitBreakerRuleChangeListener.java?ref=dec4c63b5275a60e111787ad44d537cf6d875b0e",
      "patch": "@@ -2,11 +2,9 @@\n \n import java.lang.reflect.Method;\n import java.util.*;\n-import java.util.stream.Collectors;\n \n import com.alibaba.cloud.circuitbreaker.sentinel.SentinelConfigBuilder;\n import com.alibaba.csp.sentinel.EntryType;\n-import com.alibaba.csp.sentinel.datasource.AbstractDataSource;\n import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n import org.slf4j.Logger;\n@@ -16,16 +14,16 @@\n import org.springframework.beans.factory.SmartInitializingSingleton;\n import org.springframework.cloud.client.circuitbreaker.AbstractCircuitBreakerFactory;\n import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;\n+import org.springframework.cloud.openfeign.FeignClient;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ApplicationListener;\n-import org.springframework.util.CollectionUtils;\n+import org.springframework.core.annotation.AnnotationUtils;\n \n /**\n  * Sentinel circuit breaker config change listener.\n  *\n  * @author freeman\n- * @date 2022/1/10 12:23\n  */\n public class CircuitBreakerRuleChangeListener implements ApplicationContextAware,\n \t\tApplicationListener<RefreshScopeRefreshedEvent>, SmartInitializingSingleton {\n@@ -51,7 +49,6 @@ public void onApplicationEvent(RefreshScopeRefreshedEvent event) {\n \t\tclearRules();\n \n \t\t// rebind\n-\t\tconfigureRulesInDataSource();\n \t\tconfigureDefault();\n \t\tconfigureCustom();\n \n@@ -88,7 +85,7 @@ private void ensureReady() {\n \n \tprivate void clearRules() {\n \t\tclearCircuitBreakerFactory();\n-\t\tclearSentinelDegradeManager();\n+\t\tclearFeignClientRulesInDegradeManager();\n \t}\n \n \tprivate void configureDefault() {\n@@ -100,54 +97,45 @@ private void configureCustom() {\n \t}\n \n \tprivate void clearCircuitBreakerFactory() {\n-\t\tMap configurations = getConfigurations(circuitBreakerFactory);\n-\t\tif (configurations != null) {\n-\t\t\tconfigurations.clear();\n-\t\t}\n+\t\tOptional.ofNullable(getConfigurations(circuitBreakerFactory))\n+\t\t\t\t.ifPresent(Map::clear);\n \t}\n \n-\tprivate void clearSentinelDegradeManager() {\n-\t\tDegradeRuleManager.loadRules(new ArrayList<>());\n+\tprivate void clearFeignClientRulesInDegradeManager() {\n+\t\t// first, clear all manually configured feign clients and methods.\n+\t\tpropertiesBackup.getRules().keySet().stream()\n+\t\t\t\t.filter(key -> !Objects.equals(key, propertiesBackup.getDefaultRule()))\n+\t\t\t\t.forEach(resource -> Optional.ofNullable(DegradeRuleManager.getRulesOfResource(resource)).ifPresent(Set::clear));\n+\n+\t\t// Find all feign clients, clear the corresponding rules\n+\t\t// NOTE: feign client name cannot be the same as the general resource name !!!\n+\t\tArrays.stream(applicationContext.getBeanNamesForAnnotation(FeignClient.class))\n+\t\t\t\t// A little trick, FeignClient bean name is full class name.\n+\t\t\t\t// Simple exclusions, such as its subclass.\n+\t\t\t\t.filter(beanName -> beanName.contains(\".\"))\n+\t\t\t\t.map(beanName -> {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\treturn Class.forName(beanName);\n+\t\t\t\t\t} catch (ClassNotFoundException ignore) {\n+\t\t\t\t\t\t// definitely not a feign client, just ignore\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t})\n+\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t.forEach(clazz -> {\n+\t\t\t\t\tFeignClient anno = clazz.getAnnotation(FeignClient.class);\n+\t\t\t\t\tif (anno == null || AnnotationUtils.getValue(anno) == null) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tString feignClientName = AnnotationUtils.getValue(anno).toString();\n+\t\t\t\t\tOptional.ofNullable(DegradeRuleManager.getRulesOfResource(feignClientName)).ifPresent(Set::clear);\n+\t\t\t\t});\n \t}\n \n \tprivate void updateBackup() {\n \t\tthis.propertiesBackup = this.properties.copy();\n \t}\n \n-\tprivate void configureRulesInDataSource() {\n-\t\t// TODO allow feign client rules to be configured in the data source?\n-\t\t//  How to distinguish feign client rules from ordinary rules ?\n-\n-\t\t// Temporarily does not support configuring feign client rules in the data source.\n-\t\t// But need to keep the normal degrade rules.\n-\t\tString[] dataSourceNames = applicationContext.getBeanNamesForType(AbstractDataSource.class);\n-\n-\t\tList<DegradeRule> rules = Arrays.stream(dataSourceNames)\n-\t\t\t\t.map(this::getDegradeRules)\n-\t\t\t\t.flatMap(Collection::stream)\n-\t\t\t\t.distinct()\n-\t\t\t\t.collect(Collectors.toList());\n-\n-\t\tDegradeRuleManager.loadRules(rules);\n-\t}\n-\n-\tprivate List<DegradeRule> getDegradeRules(String dataSourceName) {\n-\t\tAbstractDataSource ds = applicationContext.getBean(dataSourceName, AbstractDataSource.class);\n-\t\ttry {\n-\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\tList<DegradeRule> result = (List<DegradeRule>) ds.loadConfig();\n-\t\t\t// be careful with generic wipes\n-\t\t\tif (!CollectionUtils.isEmpty(result)\n-\t\t\t\t\t&& DegradeRule.class.isAssignableFrom(result.get(0).getClass())) {\n-\t\t\t\treturn result;\n-\t\t\t}\n-\t\t}\n-\t\tcatch (Exception ignored) {\n-\t\t\t// illegal config, ignore\n-\t\t}\n-\t\treturn new ArrayList<>();\n-\t}\n-\n \t// static method\n \n \tpublic static void configureCustom(SentinelFeignClientProperties properties,",
      "parent_sha": "5786ba51ebfb08065e069916fa44adeb8c393b4d"
    }
  },
  {
    "oid": "49507f56c8ec42cc285d5e3a04e7468e249ce5e9",
    "message": "fix Application name prob.",
    "date": "2022-04-11T12:36:57Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/49507f56c8ec42cc285d5e3a04e7468e249ce5e9",
    "details": {
      "sha": "692fac32c9ad320beacb085dc940449728f3b1d3",
      "filename": "spring-cloud-alibaba-examples/rocketmq-example/rocketmq-broadcast-example/rocketmq-broadcast-producer-example/src/main/java/com/alibaba/cloud/examples/broadcast/RocketMQBroadcastProducerApplication.java",
      "status": "renamed",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/49507f56c8ec42cc285d5e3a04e7468e249ce5e9/spring-cloud-alibaba-examples%2Frocketmq-example%2Frocketmq-broadcast-example%2Frocketmq-broadcast-producer-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fbroadcast%2FRocketMQBroadcastProducerApplication.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/49507f56c8ec42cc285d5e3a04e7468e249ce5e9/spring-cloud-alibaba-examples%2Frocketmq-example%2Frocketmq-broadcast-example%2Frocketmq-broadcast-producer-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fbroadcast%2FRocketMQBroadcastProducerApplication.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-examples%2Frocketmq-example%2Frocketmq-broadcast-example%2Frocketmq-broadcast-producer-example%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fexamples%2Fbroadcast%2FRocketMQBroadcastProducerApplication.java?ref=49507f56c8ec42cc285d5e3a04e7468e249ce5e9",
      "patch": "@@ -36,12 +36,12 @@\n  * @author sorie\n  */\n @SpringBootApplication\n-public class RocketMQBroadcastConsumeApplication {\n+public class RocketMQBroadcastProducerApplication {\n \tprivate static final Logger log = LoggerFactory\n-\t\t\t.getLogger(RocketMQBroadcastConsumeApplication.class);\n+\t\t\t.getLogger(RocketMQBroadcastProducerApplication.class);\n \n \tpublic static void main(String[] args) {\n-\t\tSpringApplication.run(RocketMQBroadcastConsumeApplication.class, args);\n+\t\tSpringApplication.run(RocketMQBroadcastProducerApplication.class, args);\n \t}\n \n \t@Bean",
      "previous_filename": "spring-cloud-alibaba-examples/rocketmq-example/rocketmq-broadcast-example/rocketmq-broadcast-producer-example/src/main/java/com/alibaba/cloud/examples/broadcast/RocketMQBroadcastConsumeApplication.java",
      "parent_sha": "a7f21a9b94b79ee6e04b34ec9b4c264baf6cec68"
    }
  },
  {
    "oid": "da9a57ddf8612262da1032200e4d5b298025e645",
    "message": "cache onRegister",
    "date": "2020-09-09T03:44:49Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/da9a57ddf8612262da1032200e4d5b298025e645",
    "details": {
      "sha": "bedb4e2c6bc5fa513a79e1426fc89a8f553beced",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosServiceManager.java",
      "status": "modified",
      "additions": 25,
      "deletions": 9,
      "changes": 34,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/da9a57ddf8612262da1032200e4d5b298025e645/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/da9a57ddf8612262da1032200e4d5b298025e645/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosServiceManager.java?ref=da9a57ddf8612262da1032200e4d5b298025e645",
      "patch": "@@ -19,10 +19,15 @@\n import java.util.Objects;\n import java.util.Properties;\n \n+import com.alibaba.cloud.nacos.registry.NacosRegistration;\n import com.alibaba.nacos.api.exception.NacosException;\n import com.alibaba.nacos.api.naming.NamingMaintainService;\n import com.alibaba.nacos.api.naming.NamingService;\n \n+import org.springframework.cloud.client.discovery.event.InstancePreRegisteredEvent;\n+import org.springframework.cloud.client.serviceregistry.Registration;\n+import org.springframework.context.event.EventListener;\n+\n import static com.alibaba.nacos.api.NacosFactory.createMaintainService;\n import static com.alibaba.nacos.api.NacosFactory.createNamingService;\n import static org.springframework.beans.BeanUtils.copyProperties;\n@@ -54,12 +59,8 @@ public NamingMaintainService getNamingMaintainService(Properties properties) {\n \n \tpublic boolean isNacosDiscoveryInfoChanged(\n \t\t\tNacosDiscoveryProperties nacosDiscoveryProperties) {\n-\t\tif (Objects.isNull(nacosDiscoveryPropertiesCache)) {\n-\t\t\tnacosDiscoveryPropertiesCache = new NacosDiscoveryProperties();\n-\t\t\tcopyProperties(nacosDiscoveryProperties, nacosDiscoveryPropertiesCache);\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (this.nacosDiscoveryPropertiesCache.equals(nacosDiscoveryProperties)) {\n+\t\tif (Objects.isNull(nacosDiscoveryPropertiesCache)\n+\t\t\t\t|| this.nacosDiscoveryPropertiesCache.equals(nacosDiscoveryProperties)) {\n \t\t\treturn false;\n \t\t}\n \t\tcopyProperties(nacosDiscoveryProperties, nacosDiscoveryPropertiesCache);\n@@ -111,7 +112,22 @@ public void reBuildNacosService(Properties nacosProperties) {\n \t\tnamingMaintainService = createNamingMaintainService(nacosProperties);\n \t}\n \n-    public void nacosServiceShutDown() throws NacosException {\n-\t    this.namingService.shutDown();\n-    }\n+\tpublic void nacosServiceShutDown() throws NacosException {\n+\t\tthis.namingService.shutDown();\n+\t}\n+\n+\t@EventListener\n+\tpublic void onInstancePreRegisteredEvent(\n+\t\t\tInstancePreRegisteredEvent instancePreRegisteredEvent) {\n+\t\tRegistration registration = instancePreRegisteredEvent.getRegistration();\n+\t\tif (Objects.isNull(nacosDiscoveryPropertiesCache)\n+\t\t\t\t&& registration instanceof NacosRegistration) {\n+\t\t\tNacosDiscoveryProperties nacosDiscoveryProperties = ((NacosRegistration) registration)\n+\t\t\t\t\t.getNacosDiscoveryProperties();\n+\n+\t\t\tnacosDiscoveryPropertiesCache = new NacosDiscoveryProperties();\n+\t\t\tcopyProperties(nacosDiscoveryProperties, nacosDiscoveryPropertiesCache);\n+\t\t}\n+\t}\n+\n }",
      "parent_sha": "170edfa73ee4bcbc5f1077717950f5b97048d297"
    }
  },
  {
    "oid": "fdf8bda86bf13890d40df7c7b400d481c0b1305e",
    "message": "Use common execute service for all oss resource",
    "date": "2019-09-10T07:51:22Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/fdf8bda86bf13890d40df7c7b400d481c0b1305e",
    "details": {
      "sha": "215c6bab4a1cb4a57cbe4714e4073511f1d9af7e",
      "filename": "spring-cloud-alicloud-oss/src/main/java/com/alibaba/alicloud/oss/resource/OssStorageResource.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/fdf8bda86bf13890d40df7c7b400d481c0b1305e/spring-cloud-alicloud-oss%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Falicloud%2Foss%2Fresource%2FOssStorageResource.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/fdf8bda86bf13890d40df7c7b400d481c0b1305e/spring-cloud-alicloud-oss%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Falicloud%2Foss%2Fresource%2FOssStorageResource.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alicloud-oss%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Falicloud%2Foss%2Fresource%2FOssStorageResource.java?ref=fdf8bda86bf13890d40df7c7b400d481c0b1305e",
      "patch": "@@ -58,7 +58,8 @@ public class OssStorageResource implements WritableResource {\n \tprivate final URI location;\n \tprivate final boolean autoCreateFiles;\n \n-\tprivate final ExecutorService executorService;\n+\tprivate static final ExecutorService executorService = new ThreadPoolExecutor(8, 128,\n+\t\t\t60, TimeUnit.SECONDS, new SynchronousQueue<>());\n \n \tpublic OssStorageResource(OSS oss, String location) {\n \t\tthis(oss, location, false);\n@@ -86,9 +87,6 @@ public OssStorageResource(OSS oss, String location, boolean autoCreateFiles) {\n \t\t\tthrow new IllegalArgumentException(\"Invalid location: \" + location, e);\n \t\t}\n \n-\t\tthis.executorService = new ThreadPoolExecutor(\n-\t\t\t1, 1, 60, TimeUnit.SECONDS,\n-\t\t\tnew SynchronousQueue<>());\n \t}\n \n \tpublic boolean isAutoCreateFiles() {",
      "parent_sha": "572b13a0b3cbe1c20856c43bf1f2c784cea93a91"
    }
  },
  {
    "oid": "f64d794017f851db19ec8663ea2fd709387bcfeb",
    "message": "Fix bug: NPE Exception.\nhttps://github.com/apache/dubbo/issues/7079",
    "date": "2021-01-07T08:00:30Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/f64d794017f851db19ec8663ea2fd709387bcfeb",
    "details": {
      "sha": "be24b11fbcdd4843f22099193822549b1222414b",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/registry/DubboCloudRegistry.java",
      "status": "modified",
      "additions": 21,
      "deletions": 9,
      "changes": 30,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/f64d794017f851db19ec8663ea2fd709387bcfeb/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FDubboCloudRegistry.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/f64d794017f851db19ec8663ea2fd709387bcfeb/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FDubboCloudRegistry.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FDubboCloudRegistry.java?ref=f64d794017f851db19ec8663ea2fd709387bcfeb",
      "patch": "@@ -290,7 +290,7 @@ private List<URL> cloneExportedURLs(URL subscribedURL,\n \t\t\t\t\t.map(templateURL -> templateURL.removeParameter(PID_KEY))\n \t\t\t\t\t.map(templateURL -> {\n \t\t\t\t\t\tString protocol = templateURL.getProtocol();\n-\t\t\t\t\t\tint port = repository.getDubboProtocolPort(serviceInstance,\n+\t\t\t\t\t\tInteger port = repository.getDubboProtocolPort(serviceInstance,\n \t\t\t\t\t\t\t\tprotocol);\n \t\t\t\t\t\tif (Objects.equals(templateURL.getHost(), host)\n \t\t\t\t\t\t\t\t&& Objects.equals(templateURL.getPort(), port)) { // use\n@@ -300,15 +300,27 @@ private List<URL> cloneExportedURLs(URL subscribedURL,\n \t\t\t\t\t\t\treturn templateURL;\n \t\t\t\t\t\t}\n \n-\t\t\t\t\t\tURLBuilder clonedURLBuilder = from(templateURL) // remove the\n-\t\t\t\t\t\t\t\t// parameters from\n-\t\t\t\t\t\t\t\t// the template\n-\t\t\t\t\t\t\t\t// URL\n-\t\t\t\t\t\t\t\t.setHost(host) // reset the host\n-\t\t\t\t\t\t\t\t.setPort(port); // reset the port\n+\t\t\t\t\t\tif (port == null) {\n+\t\t\t\t\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\t\t\t\t\tlogger.warn(\n+\t\t\t\t\t\t\t\t\t\t\"The protocol[{}] port of Dubbo  service instance[host : {}] \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ \"can't be resolved\",\n+\t\t\t\t\t\t\t\t\t\tprotocol, host);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\tURLBuilder clonedURLBuilder = from(templateURL) // remove the\n+\t\t\t\t\t\t\t\t\t// parameters from\n+\t\t\t\t\t\t\t\t\t// the template\n+\t\t\t\t\t\t\t\t\t// URL\n+\t\t\t\t\t\t\t\t\t.setHost(host) // reset the host\n+\t\t\t\t\t\t\t\t\t.setPort(port); // reset the port\n+\n+\t\t\t\t\t\t\treturn clonedURLBuilder.build();\n+\t\t\t\t\t\t}\n \n-\t\t\t\t\t\treturn clonedURLBuilder.build();\n-\t\t\t\t\t}).forEach(clonedExportedURLs::add);\n+\t\t\t\t\t}).filter(Objects::nonNull).forEach(clonedExportedURLs::add);\n \t\t});\n \t\treturn clonedExportedURLs;\n \t}",
      "parent_sha": "573e8ed6c5425fc01d5398f043588930f29debbe"
    }
  },
  {
    "oid": "4266809b63f710991a5eea88ecadc74357b13ed7",
    "message": "change logger from parent class to log in current class(Fixes gh-2366) (#2791)",
    "date": "2022-09-19T01:41:44Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/4266809b63f710991a5eea88ecadc74357b13ed7",
    "details": {
      "sha": "6cede304eee96664f20a381e149a6a7b379edcba",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/outbound/RocketMQProducerMessageHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/4266809b63f710991a5eea88ecadc74357b13ed7/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fintegration%2Foutbound%2FRocketMQProducerMessageHandler.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/4266809b63f710991a5eea88ecadc74357b13ed7/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fintegration%2Foutbound%2FRocketMQProducerMessageHandler.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-stream-rocketmq%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fstream%2Fbinder%2Frocketmq%2Fintegration%2Foutbound%2FRocketMQProducerMessageHandler.java?ref=4266809b63f710991a5eea88ecadc74357b13ed7",
      "patch": "@@ -119,7 +119,7 @@ public void start() {\n \t\t\t\t\t\t.fetchPublishMessageQueues(destination.getName());\n \t\t\t\tif (extendedProducerProperties.getPartitionCount() != messageQueues\n \t\t\t\t\t\t.size()) {\n-\t\t\t\t\tlogger.info(String.format(\n+\t\t\t\t\tlog.info(String.format(\n \t\t\t\t\t\t\t\"The partition count of topic '%s' will change from '%s' to '%s'\",\n \t\t\t\t\t\t\tdestination.getName(),\n \t\t\t\t\t\t\textendedProducerProperties.getPartitionCount(),",
      "parent_sha": "ed26351e938f0eacb5882788cf0a0c9fe0da2d72"
    }
  },
  {
    "oid": "5316837f9f99806f81132055e6305e8106e44db8",
    "message": "fix bug about seata loadbalancer feignclient",
    "date": "2019-07-31T03:23:46Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/5316837f9f99806f81132055e6305e8106e44db8",
    "details": {
      "sha": "d68b2b5d7e0874c466ee2bc5e0112be4437c8691",
      "filename": "spring-cloud-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataLoadBalancerFeignClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/5316837f9f99806f81132055e6305e8106e44db8/spring-cloud-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Ffeign%2FSeataLoadBalancerFeignClient.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/5316837f9f99806f81132055e6305e8106e44db8/spring-cloud-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Ffeign%2FSeataLoadBalancerFeignClient.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-seata%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fseata%2Ffeign%2FSeataLoadBalancerFeignClient.java?ref=5316837f9f99806f81132055e6305e8106e44db8",
      "patch": "@@ -53,7 +53,7 @@ public class SeataLoadBalancerFeignClient extends LoadBalancerFeignClient {\n \t@Override\n \tpublic Response execute(Request request, Request.Options options) throws IOException {\n \t\tRequest modifiedRequest = getModifyRequest(request);\n-\t\treturn super.execute(request, options);\n+\t\treturn super.execute(modifiedRequest, options);\n \t}\n \n \tprivate static Client wrap(Client delegate, BeanFactory beanFactory) {",
      "parent_sha": "ad9ce6267c5f7df349cc31d429238d5520477714"
    }
  },
  {
    "oid": "85435b9acb8a6ba1cacb849ddedeef5a8942df66",
    "message": "pass code check",
    "date": "2020-01-20T09:00:12Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/85435b9acb8a6ba1cacb849ddedeef5a8942df66",
    "details": {
      "sha": "fff267a955d9cd6f178223e575c578d7bf4656fb",
      "filename": "spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/85435b9acb8a6ba1cacb849ddedeef5a8942df66/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/85435b9acb8a6ba1cacb849ddedeef5a8942df66/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java?ref=85435b9acb8a6ba1cacb849ddedeef5a8942df66",
      "patch": "@@ -32,7 +32,6 @@\n \n import com.alibaba.nacos.api.config.ConfigService;\n import com.alibaba.spring.util.PropertySourcesUtils;\n-\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -90,7 +89,7 @@ public class NacosConfigProperties {\n \t\t\t.getLogger(NacosConfigProperties.class);\n \n \t@Autowired\n-    @JsonIgnore\n+\t@JsonIgnore\n \tprivate Environment environment;\n \n \t@PostConstruct",
      "parent_sha": "d6042370d48b13ace1a8c9c191005d9f93e11600"
    }
  },
  {
    "oid": "d3f98b66a4d59058ffb588278d841cfdade54bc0",
    "message": "fixed netInterface NullPointerException",
    "date": "2019-01-25T07:33:03Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/d3f98b66a4d59058ffb588278d841cfdade54bc0",
    "details": {
      "sha": "ed568e24b1085d303fbd1652deda6e03d2f7319a",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/d3f98b66a4d59058ffb588278d841cfdade54bc0/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/d3f98b66a4d59058ffb588278d841cfdade54bc0/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryProperties.java?ref=d3f98b66a4d59058ffb588278d841cfdade54bc0",
      "patch": "@@ -160,7 +160,7 @@ public void init() throws SocketException {\n \t\t\telse {\n \t\t\t\tNetworkInterface netInterface = NetworkInterface\n \t\t\t\t\t\t.getByName(networkInterface);\n-\t\t\t\tif (null == networkInterface) {\n+\t\t\t\tif (null == netInterface) {\n \t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\"no such interface \" + networkInterface);\n \t\t\t\t}",
      "parent_sha": "a301c63f21fc0606234bbd38dd819ca2fbb166a0"
    }
  },
  {
    "oid": "c419c1ef5d65b9247044836cdb3455e7fe8c8588",
    "message": "Polish alibaba/spring-cloud-alibaba#1529 : spring-cloud-starter-dubbo\u6d88\u8d39\u8005\u8ba2\u9605\u670d\u52a1\u65f6No provider available from registry localhost:9090",
    "date": "2020-09-02T02:48:44Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/c419c1ef5d65b9247044836cdb3455e7fe8c8588",
    "details": {
      "sha": "9cfdccd927a678f90e46fed890a91e13b06e7683",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/registry/DubboCloudRegistry.java",
      "status": "modified",
      "additions": 23,
      "deletions": 9,
      "changes": 32,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/c419c1ef5d65b9247044836cdb3455e7fe8c8588/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FDubboCloudRegistry.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/c419c1ef5d65b9247044836cdb3455e7fe8c8588/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FDubboCloudRegistry.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-dubbo%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fdubbo%2Fregistry%2FDubboCloudRegistry.java?ref=c419c1ef5d65b9247044836cdb3455e7fe8c8588",
      "patch": "@@ -51,7 +51,6 @@\n \n import static java.lang.String.format;\n import static java.util.Collections.emptyList;\n-import static java.util.Collections.singleton;\n import static java.util.stream.StreamSupport.stream;\n import static org.apache.dubbo.common.URLBuilder.from;\n import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;\n@@ -437,19 +436,19 @@ private void subscribeDubboMetadataServiceURLs(URL subscribedURL,\n \n \t\t// Sync subscription\n \t\tsubscribeDubboMetadataServiceURLs(subscribedURL, listener,\n-\t\t\t\tsingleton(getServiceName(subscribedURL)));\n+\t\t\t\tgetServiceName(subscribedURL));\n \n \t\t// Sync subscription\n \t\tif (containsProviderCategory(subscribedURL)) {\n \t\t\tregisterServiceInstancesChangedListener(subscribedURL, event -> {\n \n-\t\t\t\tSet<String> serviceNames = getServices(subscribedURL);\n+\t\t\t\tString sourceServiceName = event.getServiceName();\n+\t\t\t\tString serviceName = getServiceName(subscribedURL);\n \n-\t\t\t\tif (!serviceNames.contains(event.getServiceName())) {\n-\t\t\t\t\treturn;\n+\t\t\t\tif (Objects.equals(sourceServiceName, serviceName)) {\n+\t\t\t\t\tsubscribeDubboMetadataServiceURLs(subscribedURL, listener,\n+\t\t\t\t\t\t\tsourceServiceName);\n \t\t\t\t}\n-\n-\t\t\t\tsubscribeDubboMetadataServiceURLs(subscribedURL, listener, serviceNames);\n \t\t\t});\n \t\t}\n \t}\n@@ -459,20 +458,35 @@ private String getServiceName(URL subscribedURL) {\n \t}\n \n \tprivate void subscribeDubboMetadataServiceURLs(URL subscribedURL,\n-\t\t\tNotifyListener listener, Set<String> serviceNames) {\n+\t\t\tNotifyListener listener, String serviceName) {\n \n \t\tString serviceInterface = subscribedURL.getServiceInterface();\n \t\tString version = subscribedURL.getParameter(VERSION_KEY);\n \t\tString protocol = subscribedURL.getParameter(PROTOCOL_KEY);\n \n-\t\tList<ServiceInstance> serviceInstances = getServiceInstances(serviceNames);\n+\t\tList<ServiceInstance> serviceInstances = getServiceInstances(serviceName);\n \n \t\tList<URL> urls = dubboMetadataUtils.getDubboMetadataServiceURLs(serviceInstances,\n \t\t\t\tserviceInterface, version, protocol);\n \n \t\tnotifyAllSubscribedURLs(subscribedURL, urls, listener);\n \t}\n \n+\t// private void subscribeDubboMetadataServiceURLs(URL subscribedURL,\n+\t// NotifyListener listener, Set<String> serviceNames) {\n+\t//\n+\t// String serviceInterface = subscribedURL.getServiceInterface();\n+\t// String version = subscribedURL.getParameter(VERSION_KEY);\n+\t// String protocol = subscribedURL.getParameter(PROTOCOL_KEY);\n+\t//\n+\t// List<ServiceInstance> serviceInstances = getServiceInstances(serviceNames);\n+\t//\n+\t// List<URL> urls = dubboMetadataUtils.getDubboMetadataServiceURLs(serviceInstances,\n+\t// serviceInterface, version, protocol);\n+\t//\n+\t// notifyAllSubscribedURLs(subscribedURL, urls, listener);\n+\t// }\n+\n \tprivate boolean containsProviderCategory(URL subscribedURL) {\n \t\tString category = subscribedURL.getParameter(CATEGORY_KEY);\n \t\treturn category == null ? false : category.contains(PROVIDER);",
      "parent_sha": "9b4975ad2a6b512f25afe7d2334847d44bb3acd0"
    }
  },
  {
    "oid": "528cd97c99a276feee6dbf725cec02f471c3eafa",
    "message": "SchedulerX support springIOC.",
    "date": "2018-12-17T09:53:59Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/528cd97c99a276feee6dbf725cec02f471c3eafa",
    "details": {
      "sha": "0d43e86f355d69d29dcf086d048e5c12944dc86a",
      "filename": "spring-cloud-alicloud-context/src/main/java/org/springframework/cloud/alicloud/context/scx/ScxContextAutoConfiguration.java",
      "status": "modified",
      "additions": 65,
      "deletions": 15,
      "changes": 80,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/528cd97c99a276feee6dbf725cec02f471c3eafa/spring-cloud-alicloud-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fscx%2FScxContextAutoConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/528cd97c99a276feee6dbf725cec02f471c3eafa/spring-cloud-alicloud-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fscx%2FScxContextAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alicloud-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fcontext%2Fscx%2FScxContextAutoConfiguration.java?ref=528cd97c99a276feee6dbf725cec02f471c3eafa",
      "patch": "@@ -16,22 +16,27 @@\n \n package org.springframework.cloud.alicloud.context.scx;\n \n-import javax.annotation.PostConstruct;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.cloud.alicloud.context.AliCloudProperties;\n import org.springframework.cloud.alicloud.context.edas.EdasContextAutoConfiguration;\n import org.springframework.cloud.alicloud.context.edas.EdasProperties;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n import com.alibaba.cloud.context.edas.AliCloudEdasSdk;\n-import com.alibaba.cloud.context.scx.AliCloudScxInitializer;\n+import com.alibaba.cloud.context.edas.EdasChangeOrderConfiguration;\n+import com.alibaba.cloud.context.edas.EdasChangeOrderConfigurationFactory;\n import com.alibaba.dts.common.exception.InitException;\n+import com.alibaba.edas.schedulerx.SchedulerXClient;\n+import com.aliyuncs.edas.model.v20170801.GetSecureTokenResponse;\n \n /**\n  * @author xiaolongzuo\n@@ -40,28 +45,73 @@\n @ConditionalOnClass(name = \"org.springframework.cloud.alicloud.scx.ScxAutoConfiguration\")\n @EnableConfigurationProperties(ScxProperties.class)\n @ImportAutoConfiguration(EdasContextAutoConfiguration.class)\n-public class ScxContextAutoConfiguration {\n+public class ScxContextAutoConfiguration implements InitializingBean {\n \n \tprivate static final Logger log = LoggerFactory\n \t\t\t.getLogger(ScxContextAutoConfiguration.class);\n \n-\t@Autowired\n-\tprivate AliCloudProperties aliCloudProperties;\n+\tprivate static final String TEST_REGION = \"cn-test\";\n \n-\t@Autowired\n-\tprivate EdasProperties edasProperties;\n+\tprivate static final String DEFAULT_KEY = \"123456\";\n \n \t@Autowired\n-\tprivate ScxProperties scxProperties;\n+\tprivate SchedulerXClient schedulerXClient;\n \n-\t@Autowired\n-\tprivate AliCloudEdasSdk aliCloudEdasSdk;\n+\t@Bean\n+\tpublic SchedulerXClient schedulerXClient(AliCloudProperties aliCloudProperties,\n+\t\t\tEdasProperties edasProperties, ScxProperties scxProperties,\n+\t\t\tAliCloudEdasSdk aliCloudEdasSdk) {\n+\t\tAssert.isTrue(!StringUtils.isEmpty(scxProperties.getGroupId()),\n+\t\t\t\t\"${spring.cloud.alicloud.scx.group-id} can't be null.\");\n+\t\tSchedulerXClient schedulerXClient = new SchedulerXClient();\n+\t\tschedulerXClient.setGroupId(scxProperties.getGroupId());\n+\n+\t\tEdasChangeOrderConfiguration edasChangeOrderConfiguration = EdasChangeOrderConfigurationFactory\n+\t\t\t\t.getEdasChangeOrderConfiguration();\n+\t\tif (edasChangeOrderConfiguration.isEdasManaged()) {\n+\t\t\tif (edasChangeOrderConfiguration.getRegionId() != null) {\n+\t\t\t\tschedulerXClient\n+\t\t\t\t\t\t.setRegionName(edasChangeOrderConfiguration.getRegionId());\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tAssert.isTrue(!StringUtils.isEmpty(edasProperties.getNamespace()),\n+\t\t\t\t\t\t\"${spring.cloud.alicloud.edas.namespace} can't be null.\");\n+\t\t\t\tschedulerXClient.setRegionName(edasProperties.getRegionId());\n+\t\t\t}\n+\t\t\tschedulerXClient.setDomainName(scxProperties.getDomainName());\n+\t\t\tschedulerXClient\n+\t\t\t\t\t.setAccessKey(edasChangeOrderConfiguration.getDauthAccessKey());\n+\t\t\tschedulerXClient\n+\t\t\t\t\t.setSecretKey(edasChangeOrderConfiguration.getDauthSecretKey());\n+\t\t}\n+\t\telse if (TEST_REGION.equals(edasProperties.getNamespace())) {\n+\t\t\tAssert.isTrue(!StringUtils.isEmpty(edasProperties.getNamespace()),\n+\t\t\t\t\t\"${spring.cloud.alicloud.edas.namespace} can't be null.\");\n+\t\t\tschedulerXClient.setRegionName(edasProperties.getNamespace());\n+\t\t\tschedulerXClient.setAccessKey(DEFAULT_KEY);\n+\t\t\tschedulerXClient.setSecretKey(DEFAULT_KEY);\n+\t\t}\n+\t\telse {\n+\t\t\tAssert.isTrue(!StringUtils.isEmpty(edasProperties.getNamespace()),\n+\t\t\t\t\t\"${spring.cloud.alicloud.edas.namespace} can't be null.\");\n+\t\t\tAssert.isTrue(!StringUtils.isEmpty(aliCloudProperties.getAccessKey()),\n+\t\t\t\t\t\"${spring.cloud.alicloud.access-key} can't be empty.\");\n+\t\t\tAssert.isTrue(!StringUtils.isEmpty(aliCloudProperties.getSecretKey()),\n+\t\t\t\t\t\"${spring.cloud.alicloud.secret-key} can't be empty.\");\n+\t\t\tGetSecureTokenResponse.SecureToken secureToken = aliCloudEdasSdk\n+\t\t\t\t\t.getSecureToken(edasProperties.getNamespace());\n+\t\t\tschedulerXClient.setRegionName(edasProperties.getRegionId());\n+\t\t\tschedulerXClient.setDomainName(scxProperties.getDomainName());\n+\t\t\tschedulerXClient.setAccessKey(secureToken.getAccessKey());\n+\t\t\tschedulerXClient.setSecretKey(secureToken.getSecretKey());\n+\t\t}\n+\t\treturn schedulerXClient;\n+\t}\n \n-\t@PostConstruct\n-\tpublic void initAcmProperties() {\n+\t@Override\n+\tpublic void afterPropertiesSet() {\n \t\ttry {\n-\t\t\tAliCloudScxInitializer.initialize(aliCloudProperties, edasProperties,\n-\t\t\t\t\tscxProperties, aliCloudEdasSdk);\n+\t\t\tschedulerXClient.init();\n \t\t}\n \t\tcatch (InitException e) {\n \t\t\tlog.error(\"Init SchedulerX failed.\", e);",
      "parent_sha": "202bd4a6b22d6feebcd7e1a512d0461ad3a3846f"
    }
  },
  {
    "oid": "85617c675748083ea4ca023491d0d36340631a8b",
    "message": "fix g sentinel-feign contextid bug",
    "date": "2019-08-13T02:59:50Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/85617c675748083ea4ca023491d0d36340631a8b",
    "details": {
      "sha": "3dbc00adbb3fbc916e87b55351cf21640f138a4f",
      "filename": "spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/feign/SentinelFeign.java",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/85617c675748083ea4ca023491d0d36340631a8b/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Ffeign%2FSentinelFeign.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/85617c675748083ea4ca023491d0d36340631a8b/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Ffeign%2FSentinelFeign.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-sentinel%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Ffeign%2FSentinelFeign.java?ref=85617c675748083ea4ca023491d0d36340631a8b",
      "patch": "@@ -26,6 +26,7 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.util.ReflectionUtils;\n+import org.springframework.util.StringUtils;\n \n import feign.Contract;\n import feign.Feign;\n@@ -82,20 +83,24 @@ public InvocationHandler create(Target target,\n \t\t\t\t\t\t\t\"fallback\");\n \t\t\t\t\tClass fallbackFactory = (Class) getFieldValue(feignClientFactoryBean,\n \t\t\t\t\t\t\t\"fallbackFactory\");\n-\t\t\t\t\tString name = (String) getFieldValue(feignClientFactoryBean, \"name\");\n+\t\t\t\t\tString beanName = (String) getFieldValue(feignClientFactoryBean,\n+\t\t\t\t\t\t\t\"contextId\");\n+\t\t\t\t\tif (!StringUtils.hasText(beanName)) {\n+\t\t\t\t\t\tbeanName = (String) getFieldValue(feignClientFactoryBean, \"name\");\n+\t\t\t\t\t}\n \n \t\t\t\t\tObject fallbackInstance;\n \t\t\t\t\tFallbackFactory fallbackFactoryInstance;\n \t\t\t\t\t// check fallback and fallbackFactory properties\n \t\t\t\t\tif (void.class != fallback) {\n-\t\t\t\t\t\tfallbackInstance = getFromContext(name, \"fallback\", fallback,\n+\t\t\t\t\t\tfallbackInstance = getFromContext(beanName, \"fallback\", fallback,\n \t\t\t\t\t\t\t\ttarget.type());\n \t\t\t\t\t\treturn new SentinelInvocationHandler(target, dispatch,\n \t\t\t\t\t\t\t\tnew FallbackFactory.Default(fallbackInstance));\n \t\t\t\t\t}\n \t\t\t\t\tif (void.class != fallbackFactory) {\n-\t\t\t\t\t\tfallbackFactoryInstance = (FallbackFactory) getFromContext(name,\n-\t\t\t\t\t\t\t\t\"fallbackFactory\", fallbackFactory,\n+\t\t\t\t\t\tfallbackFactoryInstance = (FallbackFactory) getFromContext(\n+\t\t\t\t\t\t\t\tbeanName, \"fallbackFactory\", fallbackFactory,\n \t\t\t\t\t\t\t\tFallbackFactory.class);\n \t\t\t\t\t\treturn new SentinelInvocationHandler(target, dispatch,\n \t\t\t\t\t\t\t\tfallbackFactoryInstance);",
      "parent_sha": "8832644850bcce7f84d10603da6c0e54c849a543"
    }
  },
  {
    "oid": "9a11f7932677f4bc79f1ca05f56a99326112259c",
    "message": "Lower log level\n\n\u6ca1\u6709\u914d\u7f6e\u89c4\u5219\u662f\u5f88\u6b63\u5e38\u7684\uff0c\u4f8b\u5982\u7528\u6237\u4fa7\u505a\u4e86\u5168\u5c40\u89c4\u5219\u5b9e\u73b0\uff0c\u8fd9\u91cc\u9891\u7e41\u5237warn\u65e5\u5fd7\u65e0\u6cd5\u63a7\u5236.",
    "date": "2021-07-08T01:37:53Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/9a11f7932677f4bc79f1ca05f56a99326112259c",
    "details": {
      "sha": "f3d4c1d1ba7cb66698e81bc304985dd7310f1f56",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/converter/SentinelConverter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/9a11f7932677f4bc79f1ca05f56a99326112259c/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconverter%2FSentinelConverter.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/9a11f7932677f4bc79f1ca05f56a99326112259c/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconverter%2FSentinelConverter.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconverter%2FSentinelConverter.java?ref=9a11f7932677f4bc79f1ca05f56a99326112259c",
      "patch": "@@ -77,7 +77,7 @@ public Collection<Object> convert(String source) {\n \t\t}\n \n \t\tif (StringUtils.isEmpty(source)) {\n-\t\t\tlog.warn(\"converter can not convert rules because source is empty\");\n+\t\t\tlog.info(\"converter can not convert rules because source is empty\");\n \t\t\treturn ruleCollection;\n \t\t}\n \t\ttry {",
      "parent_sha": "9d9c0a5306f715331d338ba273cf6432911e5ec8"
    }
  },
  {
    "oid": "b7f1dc9b04749b23e4cef0d2d0fd85ceac912816",
    "message": "\u6dfb\u52a0RamRoleName\u652f\u6301",
    "date": "2021-03-15T09:14:00Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/b7f1dc9b04749b23e4cef0d2d0fd85ceac912816",
    "details": {
      "sha": "6722f8bbaeb5fcd111a8363ebfb60f314052c476",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java",
      "status": "modified",
      "additions": 17,
      "deletions": 2,
      "changes": 19,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/b7f1dc9b04749b23e4cef0d2d0fd85ceac912816/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/b7f1dc9b04749b23e4cef0d2d0fd85ceac912816/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2FNacosConfigProperties.java?ref=b7f1dc9b04749b23e4cef0d2d0fd85ceac912816",
      "patch": "@@ -53,6 +53,7 @@\n import static com.alibaba.nacos.api.PropertyKeyConst.MAX_RETRY;\n import static com.alibaba.nacos.api.PropertyKeyConst.NAMESPACE;\n import static com.alibaba.nacos.api.PropertyKeyConst.PASSWORD;\n+import static com.alibaba.nacos.api.PropertyKeyConst.RAM_ROLE_NAME;\n import static com.alibaba.nacos.api.PropertyKeyConst.SECRET_KEY;\n import static com.alibaba.nacos.api.PropertyKeyConst.SERVER_ADDR;\n import static com.alibaba.nacos.api.PropertyKeyConst.USERNAME;\n@@ -202,6 +203,11 @@ private void overrideFromEnv() {\n \t */\n \tprivate String secretKey;\n \n+\t/**\n+\t * access key for namespace.\n+\t */\n+\tprivate String ramRoleName;\n+\n \t/**\n \t * context path for nacos config server.\n \t */\n@@ -356,6 +362,14 @@ public void setSecretKey(String secretKey) {\n \t\tthis.secretKey = secretKey;\n \t}\n \n+\tpublic String getRamRoleName() {\n+\t\treturn ramRoleName;\n+\t}\n+\n+\tpublic void setRamRoleName(String ramRoleName) {\n+\t\tthis.ramRoleName = ramRoleName;\n+\t}\n+\n \tpublic String getEncode() {\n \t\treturn encode;\n \t}\n@@ -548,6 +562,7 @@ public Properties assembleConfigServiceProperties() {\n \t\tproperties.put(NAMESPACE, Objects.toString(this.namespace, \"\"));\n \t\tproperties.put(ACCESS_KEY, Objects.toString(this.accessKey, \"\"));\n \t\tproperties.put(SECRET_KEY, Objects.toString(this.secretKey, \"\"));\n+\t\tproperties.put(RAM_ROLE_NAME, Objects.toString(this.ramRoleName, \"\"));\n \t\tproperties.put(CLUSTER_NAME, Objects.toString(this.clusterName, \"\"));\n \t\tproperties.put(MAX_RETRY, Objects.toString(this.maxRetry, \"\"));\n \t\tproperties.put(CONFIG_LONG_POLL_TIMEOUT,\n@@ -560,8 +575,7 @@ public Properties assembleConfigServiceProperties() {\n \t\t\tint index = endpoint.indexOf(\":\");\n \t\t\tproperties.put(ENDPOINT, endpoint.substring(0, index));\n \t\t\tproperties.put(ENDPOINT_PORT, endpoint.substring(index + 1));\n-\t\t}\n-\t\telse {\n+\t\t} else {\n \t\t\tproperties.put(ENDPOINT, endpoint);\n \t\t}\n \n@@ -597,6 +611,7 @@ public String toString() {\n \t\t\t\t+ \", enableRemoteSyncConfig=\" + enableRemoteSyncConfig + \", endpoint='\"\n \t\t\t\t+ endpoint + '\\'' + \", namespace='\" + namespace + '\\'' + \", accessKey='\"\n \t\t\t\t+ accessKey + '\\'' + \", secretKey='\" + secretKey + '\\''\n+\t\t\t\t+ \", ramRoleName='\" + ramRoleName + '\\''\n \t\t\t\t+ \", contextPath='\" + contextPath + '\\'' + \", clusterName='\" + clusterName\n \t\t\t\t+ '\\'' + \", name='\" + name + '\\'' + '\\'' + \", shares=\" + sharedConfigs\n \t\t\t\t+ \", extensions=\" + extensionConfigs + \", refreshEnabled=\"",
      "parent_sha": "884399d73babfd27aaec7d2fe025e53ae1160cca"
    }
  },
  {
    "oid": "4fd7df8d95a20f649a819c2b84803c9b2512bea2",
    "message": "'\u4fee\u590d\u5b57\u6bb5masterId\u5224\u65adbug'",
    "date": "2020-08-10T02:38:54Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/4fd7df8d95a20f649a819c2b84803c9b2512bea2",
    "details": {
      "sha": "1d73e8ba1e2d341ba47a72e1d82c1531849754c3",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/RedisDataSourceProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/4fd7df8d95a20f649a819c2b84803c9b2512bea2/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconfig%2FRedisDataSourceProperties.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/4fd7df8d95a20f649a819c2b84803c9b2512bea2/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconfig%2FRedisDataSourceProperties.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-alibaba-sentinel-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fsentinel%2Fdatasource%2Fconfig%2FRedisDataSourceProperties.java?ref=4fd7df8d95a20f649a819c2b84803c9b2512bea2",
      "patch": "@@ -93,7 +93,7 @@ public void preCheck(String dataSourceName) {\n \t\t\t\t\t\"RedisDataSource  channel can not be empty\");\n \t\t}\n \n-\t\tif (!StringUtils.isEmpty(masterId) && StringUtils.isEmpty(masterId)) {\n+\t\tif (StringUtils.isEmpty(masterId)) {\n \t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\"RedisDataSource  sentinel model\uff0cmasterId can not be empty\");\n \t\t}",
      "parent_sha": "899b7b4fe07603ec8ffa8a5207739c2585e6afa7"
    }
  },
  {
    "oid": "7f5c67b4ed4f3e2eeb61453b235d2c5a262329f8",
    "message": "resolve conflicts",
    "date": "2019-08-20T09:59:13Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/7f5c67b4ed4f3e2eeb61453b235d2c5a262329f8",
    "details": {
      "sha": "09c23068af97db78bfaf620683d19886243dab3b",
      "filename": "spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySourceBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/7f5c67b4ed4f3e2eeb61453b235d2c5a262329f8/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fclient%2FNacosPropertySourceBuilder.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/7f5c67b4ed4f3e2eeb61453b235d2c5a262329f8/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fclient%2FNacosPropertySourceBuilder.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fclient%2FNacosPropertySourceBuilder.java?ref=7f5c67b4ed4f3e2eeb61453b235d2c5a262329f8",
      "patch": "@@ -110,9 +110,9 @@ private Map<String, Object> propertiesToMap(Properties properties) {\n \t\tEnumeration<String> keys = (Enumeration<String>) properties.propertyNames();\n \t\twhile (keys.hasMoreElements()) {\n \t\t\tString key = keys.nextElement();\n-\t\t\tObject value = properties.getProperty(key);\n+\t\t\tString value = properties.getProperty(key);\n \t\t\tif (value != null) {\n-\t\t\t\tresult.put(key, ((String) value).trim());\n+\t\t\t\tresult.put(key, value.trim());\n \t\t\t}\n \t\t\telse {\n \t\t\t\tresult.put(key, null);",
      "parent_sha": "9f9b5b30ed44f62b61a05d0f24673b43d1de4881"
    }
  },
  {
    "oid": "0cc5e18e3fe2127abfceee6900e6e3f1d60beb1b",
    "message": "fix code format",
    "date": "2019-05-27T10:35:48Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/0cc5e18e3fe2127abfceee6900e6e3f1d60beb1b",
    "details": {
      "sha": "9e348a1af5e1c45c4ee086bc7c017f86de81af2f",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryAutoConfiguration.java",
      "status": "modified",
      "additions": 23,
      "deletions": 23,
      "changes": 46,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/0cc5e18e3fe2127abfceee6900e6e3f1d60beb1b/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryAutoConfiguration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/0cc5e18e3fe2127abfceee6900e6e3f1d60beb1b/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2FNacosDiscoveryAutoConfiguration.java?ref=0cc5e18e3fe2127abfceee6900e6e3f1d60beb1b",
      "patch": "@@ -38,31 +38,31 @@\n @EnableConfigurationProperties\n @ConditionalOnNacosDiscoveryEnabled\n @ConditionalOnProperty(value = \"spring.cloud.service-registry.auto-registration.enabled\", matchIfMissing = true)\n-@AutoConfigureAfter({AutoServiceRegistrationConfiguration.class,\n-        AutoServiceRegistrationAutoConfiguration.class})\n+@AutoConfigureAfter({ AutoServiceRegistrationConfiguration.class,\n+\t\tAutoServiceRegistrationAutoConfiguration.class })\n public class NacosDiscoveryAutoConfiguration {\n \n-    @Bean\n-    public NacosServiceRegistry nacosServiceRegistry(\n-            NacosDiscoveryProperties nacosDiscoveryProperties) {\n-        return new NacosServiceRegistry(nacosDiscoveryProperties);\n-    }\n+\t@Bean\n+\tpublic NacosServiceRegistry nacosServiceRegistry(\n+\t\t\tNacosDiscoveryProperties nacosDiscoveryProperties) {\n+\t\treturn new NacosServiceRegistry(nacosDiscoveryProperties);\n+\t}\n \n-    @Bean\n-    @ConditionalOnBean(AutoServiceRegistrationProperties.class)\n-    public NacosRegistration nacosRegistration(\n-            NacosDiscoveryProperties nacosDiscoveryProperties,\n-            ApplicationContext context) {\n-        return new NacosRegistration(nacosDiscoveryProperties, context);\n-    }\n+\t@Bean\n+\t@ConditionalOnBean(AutoServiceRegistrationProperties.class)\n+\tpublic NacosRegistration nacosRegistration(\n+\t\t\tNacosDiscoveryProperties nacosDiscoveryProperties,\n+\t\t\tApplicationContext context) {\n+\t\treturn new NacosRegistration(nacosDiscoveryProperties, context);\n+\t}\n \n-    @Bean\n-    @ConditionalOnBean(AutoServiceRegistrationProperties.class)\n-    public NacosAutoServiceRegistration nacosAutoServiceRegistration(\n-            NacosServiceRegistry registry,\n-            AutoServiceRegistrationProperties autoServiceRegistrationProperties,\n-            NacosRegistration registration) {\n-        return new NacosAutoServiceRegistration(registry,\n-                autoServiceRegistrationProperties, registration);\n-    }\n+\t@Bean\n+\t@ConditionalOnBean(AutoServiceRegistrationProperties.class)\n+\tpublic NacosAutoServiceRegistration nacosAutoServiceRegistration(\n+\t\t\tNacosServiceRegistry registry,\n+\t\t\tAutoServiceRegistrationProperties autoServiceRegistrationProperties,\n+\t\t\tNacosRegistration registration) {\n+\t\treturn new NacosAutoServiceRegistration(registry,\n+\t\t\t\tautoServiceRegistrationProperties, registration);\n+\t}\n }\n\\ No newline at end of file",
      "parent_sha": "1c764463a1dc5f3011a466cd4e87f3d886a55045"
    }
  },
  {
    "oid": "71036479a1ac3f84d04d2fdc81faff178f3dc88b",
    "message": "update test heart beat param value",
    "date": "2020-12-23T04:58:09Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/71036479a1ac3f84d04d2fdc81faff178f3dc88b",
    "details": {
      "sha": "3da9899c901e41be74ac90c806ccac7fd39367a2",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/test/java/com/alibaba/cloud/nacos/registry/NacosAutoServiceRegistrationTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/71036479a1ac3f84d04d2fdc81faff178f3dc88b/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosAutoServiceRegistrationTests.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/71036479a1ac3f84d04d2fdc81faff178f3dc88b/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosAutoServiceRegistrationTests.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FNacosAutoServiceRegistrationTests.java?ref=71036479a1ac3f84d04d2fdc81faff178f3dc88b",
      "patch": "@@ -69,9 +69,9 @@\n \t\t\t\t\"spring.cloud.nacos.discovery.accessKey=test-accessKey\",\n \t\t\t\t\"spring.cloud.nacos.discovery.ip=8.8.8.8\",\n \t\t\t\t\"spring.cloud.nacos.discovery.secretKey=test-secretKey\",\n-\t\t\t\t\"spring.cloud.nacos.discovery.heart-beat-interval=3\",\n-\t\t\t\t\"spring.cloud.nacos.discovery.heart-beat-timeout=6\",\n-\t\t\t\t\"spring.cloud.nacos.discovery.ip-delete-timeout=9\" },\n+\t\t\t\t\"spring.cloud.nacos.discovery.heart-beat-interval=3000\",\n+\t\t\t\t\"spring.cloud.nacos.discovery.heart-beat-timeout=6000\",\n+\t\t\t\t\"spring.cloud.nacos.discovery.ip-delete-timeout=9000\" },\n \t\twebEnvironment = RANDOM_PORT)\n public class NacosAutoServiceRegistrationTests {\n ",
      "parent_sha": "447171de80cd5b1ea3eb87b4b29d0f4d5db2386a"
    }
  },
  {
    "oid": "1b733af0d515895f1d122bb0f67a6ab9c5d63121",
    "message": "Fixes #19",
    "date": "2018-09-18T06:07:18Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/1b733af0d515895f1d122bb0f67a6ab9c5d63121",
    "details": {
      "sha": "0d4fdbb89ec99349e1b284cf6fc291b17f928945",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/ribbon/NacosServerList.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/1b733af0d515895f1d122bb0f67a6ab9c5d63121/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fribbon%2FNacosServerList.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/1b733af0d515895f1d122bb0f67a6ab9c5d63121/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fribbon%2FNacosServerList.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fribbon%2FNacosServerList.java?ref=1b733af0d515895f1d122bb0f67a6ab9c5d63121",
      "patch": "@@ -44,20 +44,24 @@ public NacosServerList(String serviceId) {\n \n \t@Override\n \tpublic List<NacosServer> getInitialListOfServers() {\n+\t\treturn getServers();\n+\t}\n+\n+\t@Override\n+\tpublic List<NacosServer> getUpdatedListOfServers() {\n+\t\treturn getServers();\n+\t}\n+\n+\tprivate List<NacosServer> getServers() {\n \t\ttry {\n-\t\t\tList<Instance> instances = registration.getNacosNamingService().selectInstances(serviceId,true);\n+\t\t\tList<Instance> instances = registration.getNacosNamingService().selectInstances(serviceId, true);\n \t\t\treturn instancesToServerList(instances);\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new IllegalStateException(\"Can not get service instances from nacos, serviceId=\" + serviceId, e);\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic List<NacosServer> getUpdatedListOfServers() {\n-\t\treturn getInitialListOfServers();\n-\t}\n-\n \tprivate List<NacosServer> instancesToServerList(List<Instance> instances) {\n \t\tList<NacosServer> result = new ArrayList<>(instances.size());\n \t\tfor (Instance instance : instances) {",
      "parent_sha": "625e85b0401f5837b48697667ea10e62fe7e3855"
    }
  },
  {
    "oid": "3998ea23f75cf22dce19e930ca02c2884a7ab013",
    "message": "NacosRule code format",
    "date": "2019-07-03T08:55:16Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/3998ea23f75cf22dce19e930ca02c2884a7ab013",
    "details": {
      "sha": "e86a08792fa2f686ef3d8f94aff0d45813135f0e",
      "filename": "spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/ribbon/NacosRule.java",
      "status": "modified",
      "additions": 55,
      "deletions": 46,
      "changes": 101,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/3998ea23f75cf22dce19e930ca02c2884a7ab013/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fribbon%2FNacosRule.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/3998ea23f75cf22dce19e930ca02c2884a7ab013/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fribbon%2FNacosRule.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-nacos-discovery%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falibaba%2Fnacos%2Fribbon%2FNacosRule.java?ref=3998ea23f75cf22dce19e930ca02c2884a7ab013",
      "patch": "@@ -1,69 +1,78 @@\n package org.springframework.cloud.alibaba.nacos.ribbon;\n \n-import com.alibaba.nacos.api.naming.NamingService;\n-import com.alibaba.nacos.api.naming.pojo.Instance;\n-import com.netflix.client.config.IClientConfig;\n-import com.netflix.loadbalancer.AbstractLoadBalancerRule;\n-import com.netflix.loadbalancer.DynamicServerListLoadBalancer;\n-import com.netflix.loadbalancer.Server;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.cloud.alibaba.nacos.NacosDiscoveryProperties;\n import org.springframework.util.CollectionUtils;\n \n-import java.util.List;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n+import com.alibaba.nacos.api.naming.NamingService;\n+import com.alibaba.nacos.api.naming.pojo.Instance;\n+\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.AbstractLoadBalancerRule;\n+import com.netflix.loadbalancer.DynamicServerListLoadBalancer;\n+import com.netflix.loadbalancer.Server;\n \n /**\n- * \u652f\u6301\u4f18\u5148\u8c03\u7528\u540c\u96c6\u7fa4\u5b9e\u4f8b\u7684ribbon\u8d1f\u8f7d\u5747\u8861\u89c4\u5219.\n+ * Supports preferentially calling the ribbon load balancing rules of the same cluster\n+ * instance.\n  *\n  * @author itmuch.com\n  */\n public class NacosRule extends AbstractLoadBalancerRule {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(NacosRule.class);\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(NacosRule.class);\n \n-    @Autowired\n-    private NacosDiscoveryProperties nacosDiscoveryProperties;\n+\t@Autowired\n+\tprivate NacosDiscoveryProperties nacosDiscoveryProperties;\n \n-    @Override\n-    public Server choose(Object key) {\n-        try {\n-            String clusterName = this.nacosDiscoveryProperties.getClusterName();\n-            DynamicServerListLoadBalancer loadBalancer = (DynamicServerListLoadBalancer) getLoadBalancer();\n-            String name = loadBalancer.getName();\n+\t@Override\n+\tpublic Server choose(Object key) {\n+\t\ttry {\n+\t\t\tString clusterName = this.nacosDiscoveryProperties.getClusterName();\n+\t\t\tDynamicServerListLoadBalancer loadBalancer = (DynamicServerListLoadBalancer) getLoadBalancer();\n+\t\t\tString name = loadBalancer.getName();\n \n-            NamingService namingService = this.nacosDiscoveryProperties.namingServiceInstance();\n-            List<Instance> instances = namingService.selectInstances(name, true);\n-            if (CollectionUtils.isEmpty(instances)) {\n-                LOGGER.warn(\"{}\u670d\u52a1\u5f53\u524d\u65e0\u4efb\u4f55\u5b9e\u4f8b\", name);\n-                return null;\n-            }\n+\t\t\tNamingService namingService = this.nacosDiscoveryProperties\n+\t\t\t\t\t.namingServiceInstance();\n+\t\t\tList<Instance> instances = namingService.selectInstances(name, true);\n+\t\t\tif (CollectionUtils.isEmpty(instances)) {\n+\t\t\t\tLOGGER.warn(\"no instance in service {}\", name);\n+\t\t\t\treturn null;\n+\t\t\t}\n \n-            List<Instance> instancesToChoose = instances;\n-            if (StringUtils.isNotBlank(clusterName)) {\n-                List<Instance> sameClusterInstances = instances.stream()\n-                        .filter(instance -> Objects.equals(clusterName, instance.getClusterName()))\n-                        .collect(Collectors.toList());\n-                if (!CollectionUtils.isEmpty(sameClusterInstances)) {\n-                    instancesToChoose = sameClusterInstances;\n-                } else {\n-                    LOGGER.warn(\"\u53d1\u751f\u8de8\u96c6\u7fa4\u7684\u8c03\u7528\uff0cname = {}, clusterName = {}, instance = {}\", name, clusterName, instances);\n-                }\n-            }\n+\t\t\tList<Instance> instancesToChoose = instances;\n+\t\t\tif (StringUtils.isNotBlank(clusterName)) {\n+\t\t\t\tList<Instance> sameClusterInstances = instances.stream()\n+\t\t\t\t\t\t.filter(instance -> Objects.equals(clusterName,\n+\t\t\t\t\t\t\t\tinstance.getClusterName()))\n+\t\t\t\t\t\t.collect(Collectors.toList());\n+\t\t\t\tif (!CollectionUtils.isEmpty(sameClusterInstances)) {\n+\t\t\t\t\tinstancesToChoose = sameClusterInstances;\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tLOGGER.warn(\n+\t\t\t\t\t\t\t\"A cross-cluster call occurs\uff0cname = {}, clusterName = {}, instance = {}\",\n+\t\t\t\t\t\t\tname, clusterName, instances);\n+\t\t\t\t}\n+\t\t\t}\n \n-            Instance instance = ExtendBalancer.getHostByRandomWeight2(instancesToChoose);\n+\t\t\tInstance instance = ExtendBalancer.getHostByRandomWeight2(instancesToChoose);\n \n-            return new NacosServer(instance);\n-        } catch (Exception e) {\n-            LOGGER.warn(\"NacosRule\u53d1\u751f\u5f02\u5e38\", e);\n-            return null;\n-        }\n-    }\n+\t\t\treturn new NacosServer(instance);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tLOGGER.warn(\"NacosRule error\", e);\n+\t\t\treturn null;\n+\t\t}\n+\t}\n \n-    @Override\n-    public void initWithNiwsConfig(IClientConfig iClientConfig) {\n-    }\n+\t@Override\n+\tpublic void initWithNiwsConfig(IClientConfig iClientConfig) {\n+\t}\n }",
      "parent_sha": "bbf7bdee5299986dd8ca8d93e15f59ec20f93f17"
    }
  },
  {
    "oid": "2b8e9192155bd86842ac2c545cc7d3044ae653a0",
    "message": "Improve MockNamingService: return emptyList rather than null",
    "date": "2022-03-14T13:49:54Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/2b8e9192155bd86842ac2c545cc7d3044ae653a0",
    "details": {
      "sha": "45f6085abe0938a2e9e37e107950e4ef9e1f1d76",
      "filename": "spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/test/java/com/alibaba/cloud/nacos/registry/MockNamingService.java",
      "status": "modified",
      "additions": 28,
      "deletions": 22,
      "changes": 50,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/2b8e9192155bd86842ac2c545cc7d3044ae653a0/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FMockNamingService.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/2b8e9192155bd86842ac2c545cc7d3044ae653a0/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FMockNamingService.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alibaba-starters%2Fspring-cloud-starter-alibaba-nacos-discovery%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fcloud%2Fnacos%2Fregistry%2FMockNamingService.java?ref=2b8e9192155bd86842ac2c545cc7d3044ae653a0",
      "patch": "@@ -16,6 +16,7 @@\n \n package com.alibaba.cloud.nacos.registry;\n \n+import java.util.Collections;\n import java.util.List;\n \n import com.alibaba.nacos.api.exception.NacosException;\n@@ -105,98 +106,98 @@ public void deregisterInstance(String serviceName, String groupName,\n \n \t@Override\n \tpublic List<Instance> getAllInstances(String serviceName) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> getAllInstances(String serviceName, String groupName)\n \t\t\tthrows NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> getAllInstances(String serviceName, boolean subscribe)\n \t\t\tthrows NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> getAllInstances(String serviceName, String groupName,\n \t\t\tboolean subscribe) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> getAllInstances(String serviceName, List<String> clusters)\n \t\t\tthrows NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> getAllInstances(String serviceName, String groupName,\n \t\t\tList<String> clusters) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> getAllInstances(String serviceName, List<String> clusters,\n \t\t\tboolean subscribe) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> getAllInstances(String serviceName, String groupName,\n \t\t\tList<String> clusters, boolean subscribe) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> selectInstances(String serviceName, boolean healthy)\n \t\t\tthrows NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> selectInstances(String serviceName, String groupName,\n \t\t\tboolean healthy) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> selectInstances(String serviceName, boolean healthy,\n \t\t\tboolean subscribe) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> selectInstances(String serviceName, String groupName,\n \t\t\tboolean healthy, boolean subscribe) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> selectInstances(String serviceName, List<String> clusters,\n \t\t\tboolean healthy) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> selectInstances(String serviceName, String groupName,\n \t\t\tList<String> clusters, boolean healthy) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> selectInstances(String serviceName, List<String> clusters,\n \t\t\tboolean healthy, boolean subscribe) throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n \tpublic List<Instance> selectInstances(String serviceName, String groupName,\n \t\t\tList<String> clusters, boolean healthy, boolean subscribe)\n \t\t\tthrows NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n@@ -297,30 +298,30 @@ public void unsubscribe(String serviceName, String groupName, List<String> clust\n \t@Override\n \tpublic ListView<String> getServicesOfServer(int pageNo, int pageSize)\n \t\t\tthrows NacosException {\n-\t\treturn null;\n+\t\treturn this.emptyListView();\n \t}\n \n \t@Override\n \tpublic ListView<String> getServicesOfServer(int pageNo, int pageSize,\n \t\t\tString groupName) throws NacosException {\n-\t\treturn null;\n+\t\treturn this.emptyListView();\n \t}\n \n \t@Override\n \tpublic ListView<String> getServicesOfServer(int pageNo, int pageSize,\n \t\t\tAbstractSelector selector) throws NacosException {\n-\t\treturn null;\n+\t\treturn this.emptyListView();\n \t}\n \n \t@Override\n \tpublic ListView<String> getServicesOfServer(int pageNo, int pageSize,\n \t\t\tString groupName, AbstractSelector selector) throws NacosException {\n-\t\treturn null;\n+\t\treturn this.emptyListView();\n \t}\n \n \t@Override\n \tpublic List<ServiceInfo> getSubscribeServices() throws NacosException {\n-\t\treturn null;\n+\t\treturn Collections.emptyList();\n \t}\n \n \t@Override\n@@ -332,5 +333,10 @@ public String getServerStatus() {\n \tpublic void shutDown() throws NacosException {\n \n \t}\n-\n+\tprivate ListView<String> emptyListView() {\n+\t\tListView<String> emptyListView = new ListView<>();\n+\t\temptyListView.setCount(0);\n+\t\temptyListView.setData(Collections.emptyList());\n+\t\treturn emptyListView;\n+\t}\n }",
      "parent_sha": "94871e20eced9bc4d1e4590ff30b251d1c5d0872"
    }
  },
  {
    "oid": "03788b58f993e62364f5d102cf027ee7d849d396",
    "message": "ans add  management.endpoints.web.base-path metadata",
    "date": "2019-03-12T09:58:32Z",
    "url": "https://github.com/alibaba/spring-cloud-alibaba/commit/03788b58f993e62364f5d102cf027ee7d849d396",
    "details": {
      "sha": "f04abadfae051ad187d481232d71d0a9dc2dc552",
      "filename": "spring-cloud-alicloud-ans/src/main/java/org/springframework/cloud/alicloud/ans/registry/AnsRegistration.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/alibaba/spring-cloud-alibaba/blob/03788b58f993e62364f5d102cf027ee7d849d396/spring-cloud-alicloud-ans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fans%2Fregistry%2FAnsRegistration.java",
      "raw_url": "https://github.com/alibaba/spring-cloud-alibaba/raw/03788b58f993e62364f5d102cf027ee7d849d396/spring-cloud-alicloud-ans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fans%2Fregistry%2FAnsRegistration.java",
      "contents_url": "https://api.github.com/repos/alibaba/spring-cloud-alibaba/contents/spring-cloud-alicloud-ans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Falicloud%2Fans%2Fregistry%2FAnsRegistration.java?ref=03788b58f993e62364f5d102cf027ee7d849d396",
      "patch": "@@ -37,6 +37,7 @@ public class AnsRegistration implements Registration, ServiceInstance {\n \tstatic final String MANAGEMENT_PORT = \"management.port\";\n \tstatic final String MANAGEMENT_CONTEXT_PATH = \"management.context-path\";\n \tstatic final String MANAGEMENT_ADDRESS = \"management.address\";\n+\tstatic final String MANAGEMENT_ENDPOINT_BASE_PATH = \"management.endpoints.web.base-path\";\n \n \tprivate AnsProperties ansProperties;\n \tprivate ApplicationContext context;\n@@ -49,10 +50,16 @@ public AnsRegistration(AnsProperties ansProperties, ApplicationContext context)\n \t@PostConstruct\n \tpublic void init() {\n \n+\t\tMap<String, String> metadata = ansProperties.getClientMetadata();\n \t\tEnvironment env = context.getEnvironment();\n+\n+\t\tString endpointBasePath = env.getProperty(MANAGEMENT_ENDPOINT_BASE_PATH);\n+\t\tif (!StringUtils.isEmpty(endpointBasePath)) {\n+\t\t\tmetadata.put(MANAGEMENT_ENDPOINT_BASE_PATH, endpointBasePath);\n+\t\t}\n+\n \t\tInteger managementPort = ManagementServerPortUtils.getPort(context);\n \t\tif (null != managementPort) {\n-\t\t\tMap<String, String> metadata = ansProperties.getClientMetadata();\n \t\t\tmetadata.put(MANAGEMENT_PORT, managementPort.toString());\n \t\t\tString contextPath = env\n \t\t\t\t\t.getProperty(\"management.server.servlet.context-path\");",
      "parent_sha": "4e357de08fa272df2f3efbcbba87dbf3364115cb"
    }
  }
]