[
  {
    "oid": "7b7c7dd0be616591df72e097b60e1f81d54a606d",
    "message": "[grid] Logging correct caps for session creation",
    "date": "2023-05-29T13:23:55Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/7b7c7dd0be616591df72e097b60e1f81d54a606d",
    "details": {
      "sha": "b34d3bf4f0e7c64273ccf7b292d3c9309688c78e",
      "filename": "java/src/org/openqa/selenium/grid/node/local/LocalNode.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/7b7c7dd0be616591df72e097b60e1f81d54a606d/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/7b7c7dd0be616591df72e097b60e1f81d54a606d/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java?ref=7b7c7dd0be616591df72e097b60e1f81d54a606d",
      "patch": "@@ -495,7 +495,10 @@ public Either<WebDriverException, CreateSessionResponse> newSession(\n                 desiredCapabilities);\n \n         String sessionCreatedMessage = \"Session created by the Node\";\n-        LOG.info(String.format(\"%s. Id: %s, Caps: %s\", sessionCreatedMessage, sessionId, caps));\n+        LOG.info(\n+            String.format(\n+                \"%s. Id: %s, Caps: %s\",\n+                sessionCreatedMessage, sessionId, externalSession.getCapabilities()));\n \n         return Either.right(\n             new CreateSessionResponse(",
      "parent_sha": "254e5340a526c4fdfd00d36b0df32e83c65d0e88"
    }
  },
  {
    "oid": "2136fd843da29315c7522c5fea0d9576f5337bec",
    "message": "the override of the ProxyHandler (somethig I use in BrowserMob and other companies I know use) really shouldn't be done statically. This is the first move to get it to be handled via a non-static solution (subclass)\n\nr6125",
    "date": "2009-01-17T00:22:39Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/2136fd843da29315c7522c5fea0d9576f5337bec",
    "details": {
      "sha": "72e27a07ea9daca7c72a727ed025d242885c88d5",
      "filename": "server-coreless/src/main/java/org/openqa/selenium/server/SeleniumServer.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/2136fd843da29315c7522c5fea0d9576f5337bec/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/2136fd843da29315c7522c5fea0d9576f5337bec/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java?ref=2136fd843da29315c7522c5fea0d9576f5337bec",
      "patch": "@@ -329,16 +329,12 @@ private void addSecurityHandler(HttpContext context) {\n         context.addHandler(sh);\r\n     }\r\n \r\n-    private HttpContext createRootContextWithProxyHandler(RemoteControlConfiguration configuration) {\r\n+    protected HttpContext createRootContextWithProxyHandler(RemoteControlConfiguration configuration) {\r\n         HttpContext root;\r\n         ProxyHandler proxyHandler;\r\n         root = new HttpContext();\r\n         root.setContextPath(\"/\");\r\n-        if (customProxyHandler == null) {\r\n-            proxyHandler = new ProxyHandler(configuration.trustAllSSLCertificates(), configuration.getDontInjectRegex(), configuration.getDebugURL());\r\n-        } else {\r\n-            proxyHandler = customProxyHandler;\r\n-        }\r\n+        proxyHandler = makeProxyHandler(configuration);\r\n \r\n         // see docs for the lock object for information on this and why it is IMPORTANT!\r\n         proxyHandler.setShutdownLock(shutdownLock);\r\n@@ -350,6 +346,16 @@ private HttpContext createRootContextWithProxyHandler(RemoteControlConfiguration\n         return root;\r\n     }\r\n \r\n+    protected ProxyHandler makeProxyHandler(RemoteControlConfiguration configuration) {\r\n+        ProxyHandler proxyHandler;\r\n+        if (customProxyHandler == null) {\r\n+            proxyHandler = new ProxyHandler(configuration.trustAllSSLCertificates(), configuration.getDontInjectRegex(), configuration.getDebugURL());\r\n+        } else {\r\n+            proxyHandler = customProxyHandler;\r\n+        }\r\n+        return proxyHandler;\r\n+    }\r\n+\r\n     private void configServer() {\r\n         if (null == configuration.getForcedBrowserMode()) {\r\n             if (null != System.getProperty(\"selenium.defaultBrowserString\")) {\r",
      "parent_sha": "6f7c2043e637122376f617cd64c85eb86e300021"
    }
  },
  {
    "oid": "70401ccf142a66cdcce2de6c12eda199c5eff002",
    "message": "DanielWagnerHall: Removing some repetition, adding some null safety\n\nr16819",
    "date": "2012-05-07T03:17:03Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/70401ccf142a66cdcce2de6c12eda199c5eff002",
    "details": {
      "sha": "54747a4b68c11b536ffc958a127392751805499c",
      "filename": "java/client/src/org/openqa/selenium/os/ExecutableFinder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/70401ccf142a66cdcce2de6c12eda199c5eff002/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FExecutableFinder.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/70401ccf142a66cdcce2de6c12eda199c5eff002/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FExecutableFinder.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FExecutableFinder.java?ref=70401ccf142a66cdcce2de6c12eda199c5eff002",
      "patch": "@@ -55,15 +55,18 @@ public String find(String named) {\n   private void addPathFromEnvironment() {\n     String pathName = \"PATH\";\n     Map<String, String> env = System.getenv();\n-    if (!env.containsKey(\"PATH\")) {\n+    if (!env.containsKey(pathName)) {\n       for (String key : env.keySet()) {\n-        if (\"path\".equalsIgnoreCase(key)) {\n+        if (pathName.equalsIgnoreCase(key)) {\n           pathName = key;\n           break;\n         }\n       }\n     }\n-    pathSegmentBuilder.add(env.get(pathName).split(File.pathSeparator));\n+    String pathVariable = env.get(pathName);\n+    if (path != null) {\n+      pathSegmentBuilder.add(path.split(File.pathSeparator));\n+    }\n   }\n \n   private void addMacSpecificPath() {\n@@ -101,4 +104,4 @@ private static Method findJdk6CanExecuteMethod() {\n       return null;\n     }\n   }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "839a97a4201d1f22f7358db3c512d5c1e23ca346"
    }
  },
  {
    "oid": "97c51183d975e5ff1a785bffd0c9b9cd02744ef2",
    "message": "[grid] check session ownership once",
    "date": "2024-11-04T18:06:01Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/97c51183d975e5ff1a785bffd0c9b9cd02744ef2",
    "details": {
      "sha": "b9e8fcc7399de989a81ad82a547b6529a2412be1",
      "filename": "java/test/org/openqa/selenium/grid/node/NodeTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 14,
      "changes": 20,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/97c51183d975e5ff1a785bffd0c9b9cd02744ef2/java%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2FNodeTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/97c51183d975e5ff1a785bffd0c9b9cd02744ef2/java%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2FNodeTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2FNodeTest.java?ref=97c51183d975e5ff1a785bffd0c9b9cd02744ef2",
      "patch": "@@ -23,8 +23,6 @@\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.assertj.core.api.InstanceOfAssertFactories.MAP;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.openqa.selenium.json.Json.MAP_TYPE;\n import static org.openqa.selenium.remote.http.Contents.string;\n import static org.openqa.selenium.remote.http.HttpMethod.DELETE;\n@@ -402,20 +400,14 @@ void shouldOnlyRespondToWebDriverCommandsForSessionsTheNodeOwns() {\n     assertThat(node2.matches(req2)).isTrue();\n \n     // Assert that should not respond to commands for sessions Node 1 does not own\n-    NoSuchSessionException exception =\n-        assertThrows(NoSuchSessionException.class, () -> node.execute(req2));\n-    assertTrue(\n-        exception\n-            .getMessage()\n-            .startsWith(String.format(\"Cannot find session with id: %s\", session2.getId())));\n+    HttpResponse res1 = node.execute(req2);\n+    assertThat(res1.getStatus()).isEqualTo(404);\n+    assertThat(Contents.string(res1)).contains(\"invalid session id\");\n \n     // Assert that should not respond to commands for sessions Node 2 does not own\n-    NoSuchSessionException exception2 =\n-        assertThrows(NoSuchSessionException.class, () -> node2.execute(req));\n-    assertTrue(\n-        exception2\n-            .getMessage()\n-            .startsWith(String.format(\"Cannot find session with id: %s\", session.getId())));\n+    HttpResponse res2 = node2.execute(req);\n+    assertThat(res2.getStatus()).isEqualTo(404);\n+    assertThat(Contents.string(res2)).contains(\"invalid session id\");\n   }\n \n   @Test",
      "parent_sha": "431c4124a8120559badd3ba5460ff813901b0710"
    }
  },
  {
    "oid": "46db47838e573e47f342db904b18d4d299ee7588",
    "message": "FirefoxOptions: be wary of numbers\n\nJSON decoders normally return numbers as Long instances, but\nthis isn't always the case. Apparently.",
    "date": "2017-03-26T12:23:06Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/46db47838e573e47f342db904b18d4d299ee7588",
    "details": {
      "sha": "5a7f2e209f9c1cb44f9ef7a37a411446aaf4b056",
      "filename": "java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/46db47838e573e47f342db904b18d4d299ee7588/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxOptions.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/46db47838e573e47f342db904b18d4d299ee7588/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxOptions.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxOptions.java?ref=46db47838e573e47f342db904b18d4d299ee7588",
      "patch": "@@ -120,8 +120,8 @@ static FirefoxOptions fromJsonMap(Map<String, Object> map) throws IOException {\n         Object value = entry.getValue();\n         if (value instanceof Boolean) {\n           options.addPreference(entry.getKey(), (Boolean) value);\n-        } else if (value instanceof Integer) {\n-          options.addPreference(entry.getKey(), (Integer) value);\n+        } else if (value instanceof Integer || value instanceof Long) {\n+          options.addPreference(entry.getKey(), ((Number) value).intValue());\n         } else if (value instanceof String) {\n           options.addPreference(entry.getKey(), (String) value);\n         } else {\n@@ -212,7 +212,7 @@ public FirefoxOptions setBinary(String path) {\n    * useful when actually starting firefox.\n    */\n   public FirefoxBinary getBinary() {\n-    return getBinaryOrNull().orElseGet(() -> new FirefoxBinary());\n+    return getBinaryOrNull().orElseGet(FirefoxBinary::new);\n   }\n \n   public Optional<FirefoxBinary> getBinaryOrNull() {",
      "parent_sha": "4b5a88ddb58d04005ad9334905304e724fabac2e"
    }
  },
  {
    "oid": "59889ce31840eb92309617547008b76d868ad5ee",
    "message": "DanielWagnerHall: Un-ignoring passing test (issue 320)\n\nr11068",
    "date": "2011-01-22T15:14:29Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/59889ce31840eb92309617547008b76d868ad5ee",
    "details": {
      "sha": "699fbde95bb28939120b2672c31ee71d09578a2d",
      "filename": "javatests/org/openqa/selenium/ExecutingJavascriptTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/59889ce31840eb92309617547008b76d868ad5ee/javatests%2Forg%2Fopenqa%2Fselenium%2FExecutingJavascriptTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/59889ce31840eb92309617547008b76d868ad5ee/javatests%2Forg%2Fopenqa%2Fselenium%2FExecutingJavascriptTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/javatests%2Forg%2Fopenqa%2Fselenium%2FExecutingJavascriptTest.java?ref=59889ce31840eb92309617547008b76d868ad5ee",
      "patch": "@@ -459,7 +459,7 @@ public void testJavascriptStringHandlingShouldWorkAsExpected() {\n   }\r\n \r\n   @JavascriptEnabled\r\n-  @Ignore({CHROME, FIREFOX})\r\n+  @Ignore(CHROME)\r\n   public void testShouldBeAbleToExecuteABigChunkOfJavascriptCode() throws IOException {\r\n     driver.get(pages.javascriptPage);\r\n \r",
      "parent_sha": "e77356147dc6a840dfd12a5ad277beafea0514b4"
    }
  },
  {
    "oid": "f3ff5da374966bd710ae801108ee87c5750c3101",
    "message": "Fix a spacing issue. No logical change",
    "date": "2018-02-22T22:36:06Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/f3ff5da374966bd710ae801108ee87c5750c3101",
    "details": {
      "sha": "be1ce00d8fba612f3c152896b6ef2343362ed4a1",
      "filename": "java/server/src/org/openqa/grid/internal/RemoteProxy.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/f3ff5da374966bd710ae801108ee87c5750c3101/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FRemoteProxy.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/f3ff5da374966bd710ae801108ee87c5750c3101/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FRemoteProxy.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FRemoteProxy.java?ref=f3ff5da374966bd710ae801108ee87c5750c3101",
      "patch": "@@ -172,7 +172,7 @@ default TestSlot createTestSlot(SeleniumProtocol protocol, Map<String, Object> c\n    * @deprecated Use {@link #getProxyStatus()}.\n    */\n   @Deprecated\n-  JsonObject getStatus() ;\n+  JsonObject getStatus();\n \n   Map<String, Object> getProxyStatus();\n ",
      "parent_sha": "f1a97a49d072198ef0976d40ac9c6003d8fc758b"
    }
  },
  {
    "oid": "eb8795bfa660979d7c8c0a3a5dbf6892105f2db5",
    "message": "remove RealDealIntegrationTest, because it starts its own server, and is thus incompatible with ClientDriverSuite (which also starts a selenium server)\n\nr5025",
    "date": "2008-04-03T02:46:30Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/eb8795bfa660979d7c8c0a3a5dbf6892105f2db5",
    "details": {
      "sha": "87c7665b1fa2b7eb2a14c8753e0ac5b827a11265",
      "filename": "clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverSuite.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/eb8795bfa660979d7c8c0a3a5dbf6892105f2db5/clients%2Fjava%2Fsrc%2Ftest%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FClientDriverSuite.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/eb8795bfa660979d7c8c0a3a5dbf6892105f2db5/clients%2Fjava%2Fsrc%2Ftest%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FClientDriverSuite.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/clients%2Fjava%2Fsrc%2Ftest%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FClientDriverSuite.java?ref=eb8795bfa660979d7c8c0a3a5dbf6892105f2db5",
      "patch": "@@ -75,15 +75,10 @@ public static TestSuite generateSuite(boolean isProxyInjectionMode, String force\n             TestSuite supersuite = new TestSuite(ClientDriverSuite.class\n                     .getName());\n             TestSuite suite = new TestSuite(ClientDriverSuite.class.getName());\n-            \n-            \n-            \n-            \n-               \n+           \n             suite.addTestSuite(ApacheMyFacesSuggestTest.class);\n             suite.addTest(I18nIntegrationTest.suite());\n             suite.addTestSuite(TestBasicAuth.class);\n-            suite.addTestSuite(RealDealIntegrationTest.class);\n             suite.addTestSuite(TestErrorChecking.class);\n             suite.addTestSuite(TestJavascriptParameters.class);\n             suite.addTestSuite(TestClick.class);",
      "parent_sha": "b67b8c9f2e2a058f6deef69d55d2a52cc9837f7f"
    }
  },
  {
    "oid": "3d30e5e57f001946bfcff51e3ac9511ea8b538d9",
    "message": "override stopClient without params in FirefoxDriver\n\nThis enables us to ensure we call quit on the Legacy FirefoxDriver\nAnd thus cleans up the temporary file system.\n\nFixes #2914\nFixes #2908",
    "date": "2016-10-13T22:40:48Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/3d30e5e57f001946bfcff51e3ac9511ea8b538d9",
    "details": {
      "sha": "83280e65e2b15f4daa45f8b4cf14214bbded82dc",
      "filename": "java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/3d30e5e57f001946bfcff51e3ac9511ea8b538d9/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxDriver.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/3d30e5e57f001946bfcff51e3ac9511ea8b538d9/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxDriver.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxDriver.java?ref=3d30e5e57f001946bfcff51e3ac9511ea8b538d9",
      "patch": "@@ -384,8 +384,8 @@ protected Lock obtainLock(FirefoxProfile profile) {\n   }\n \n   @Override\n-  protected void stopClient(Capabilities desiredCapabilities, Capabilities requiredCapabilities) {\n-    if (isLegacy(desiredCapabilities)) {\n+  protected void stopClient() {\n+    if (this.getCommandExecutor() instanceof LazyCommandExecutor) {\n       ((LazyCommandExecutor) this.getCommandExecutor()).quit();\n     }\n   }",
      "parent_sha": "aed9a772ea3339b56c20fc07d17b3af56f06910c"
    }
  },
  {
    "oid": "5986687e3dbba194cb12099be0430172bdfec158",
    "message": "Fixing a test to avoid fast-fail branch",
    "date": "2015-09-17T05:20:08Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/5986687e3dbba194cb12099be0430172bdfec158",
    "details": {
      "sha": "33ea6985be6c7512532c5f38520d5dd95d0dca57",
      "filename": "java/client/test/org/openqa/selenium/ImplicitWaitTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/5986687e3dbba194cb12099be0430172bdfec158/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FImplicitWaitTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/5986687e3dbba194cb12099be0430172bdfec158/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FImplicitWaitTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FImplicitWaitTest.java?ref=5986687e3dbba194cb12099be0430172bdfec158",
      "patch": "@@ -170,7 +170,7 @@ public void testShouldRetainImplicitlyWaitFromTheReturnedWebDriverOfFrameSwitchT\n \n     long start = System.currentTimeMillis();\n \n-    newWindow.findElements(By.id(\"This crazy thing doesn't exist\"));\n+    newWindow.findElements(By.id(\"this-crazy-thing-does-not-exist\"));\n \n     long end = System.currentTimeMillis();\n ",
      "parent_sha": "0da0d27e44103f2d63c5784aa49fb9b4257577d9"
    }
  },
  {
    "oid": "7d779eec03ead5fd50a86836c9ae22e4a81f5f3b",
    "message": "Make setEnsureCleanSession public\n\n\nr4587",
    "date": "2007-12-05T02:31:47Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/7d779eec03ead5fd50a86836c9ae22e4a81f5f3b",
    "details": {
      "sha": "cf87f45322bdad6556382b43b24a4808107d244d",
      "filename": "server-coreless/src/main/java/org/openqa/selenium/server/SeleniumServer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/7d779eec03ead5fd50a86836c9ae22e4a81f5f3b/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/7d779eec03ead5fd50a86836c9ae22e4a81f5f3b/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java?ref=7d779eec03ead5fd50a86836c9ae22e4a81f5f3b",
      "patch": "@@ -829,7 +829,7 @@ public static boolean isEnsureCleanSession() {\n         return ensureCleanSession;\r\n     }\r\n \r\n-    protected static void setEnsureCleanSession(boolean value) {\r\n+    public static void setEnsureCleanSession(boolean value) {\r\n         ensureCleanSession = value;\r\n     }\r\n \r",
      "parent_sha": "349badbdf3d8abd5edebb943865e87bd24b4d2bd"
    }
  },
  {
    "oid": "65f4daa99b25af591db28981fb93625063e09872",
    "message": "PatrickLightbody reformatting to conform to standard code style\n\nr7809",
    "date": "2009-12-09T17:39:25Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/65f4daa99b25af591db28981fb93625063e09872",
    "details": {
      "sha": "8d3e76015b49c0d0a94ebf7538c9012f997f4d14",
      "filename": "remote/server/src/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java",
      "status": "modified",
      "additions": 322,
      "deletions": 273,
      "changes": 595,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/65f4daa99b25af591db28981fb93625063e09872/remote%2Fserver%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FFirefoxChromeLauncher.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/65f4daa99b25af591db28981fb93625063e09872/remote%2Fserver%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FFirefoxChromeLauncher.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/remote%2Fserver%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FFirefoxChromeLauncher.java?ref=65f4daa99b25af591db28981fb93625063e09872",
      "patch": "@@ -31,324 +31,373 @@\n \n public class FirefoxChromeLauncher extends AbstractBrowserLauncher {\n \n-    public static final String CHROME_URL = \"chrome://killff/content/kill.html\";\n-    private static Log LOGGER = LogFactory.getLog(FirefoxChromeLauncher.class);\n-\n-    private File customProfileDir = null;\n-    private String[] cmdarray;\n-    private boolean closed = false;\n-    private BrowserInstallation browserInstallation;\n-    private Process process = null;\n-\n-    private AsyncExecute shell = new AsyncExecute();\n-\n-    private boolean changeMaxConnections = false;\n-\n-    public FirefoxChromeLauncher(BrowserConfigurationOptions browserOptions, RemoteControlConfiguration configuration, String sessionId, String browserString)  throws InvalidBrowserExecutableException {\n-    \tthis(browserOptions, configuration,\n-                sessionId, ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(\n-                        \"chrome\", browserString, new Firefox2or3Locator()));\n-    \tif (browserInstallation == null) {        \t\n-        \tthrow new InvalidBrowserExecutableException(\"The specified path to the browser executable is invalid.\");\n-        }\n+  public static final String CHROME_URL = \"chrome://killff/content/kill.html\";\n+  private static Log LOGGER = LogFactory.getLog(FirefoxChromeLauncher.class);\n+\n+  private File customProfileDir = null;\n+  private String[] cmdarray;\n+  private boolean closed = false;\n+  private BrowserInstallation browserInstallation;\n+  private Process process = null;\n+\n+  private AsyncExecute shell = new AsyncExecute();\n+\n+  private boolean changeMaxConnections = false;\n+\n+  public FirefoxChromeLauncher(BrowserConfigurationOptions browserOptions, RemoteControlConfiguration configuration, String sessionId, String browserString)\n+      throws InvalidBrowserExecutableException {\n+    this(browserOptions, configuration,\n+        sessionId, ApplicationRegistry.instance()\n+            .browserInstallationCache().locateBrowserInstallation(\n+            \"chrome\", browserString, new Firefox2or3Locator()));\n+    if (browserInstallation == null) {\n+      throw new InvalidBrowserExecutableException(\n+          \"The specified path to the browser executable is invalid.\");\n     }\n+  }\n \n-    public FirefoxChromeLauncher(BrowserConfigurationOptions browserOptions, RemoteControlConfiguration configuration, String sessionId, BrowserInstallation browserInstallation) {\n-        super(sessionId, configuration, browserOptions);\n+  public FirefoxChromeLauncher(BrowserConfigurationOptions browserOptions, RemoteControlConfiguration configuration, String sessionId, BrowserInstallation browserInstallation) {\n+    super(sessionId, configuration, browserOptions);\n \n-        if (browserInstallation == null) {\n-        \tthrow new InvalidBrowserExecutableException(\"The specified path to the browser executable is invalid.\");\n-        }\n-        this.browserInstallation = browserInstallation;\n-      \n-        shell.setLibraryPath(browserInstallation.libraryPath());\n-        // Set MOZ_NO_REMOTE in order to ensure we always get a new Firefox process\n-        // http://blog.dojotoolkit.org/2005/12/01/running-multiple-versions-of-firefox-side-by-side\n-        shell.setEnvironmentVariable(\"MOZ_NO_REMOTE\", \"1\");\n+    if (browserInstallation == null) {\n+      throw new InvalidBrowserExecutableException(\n+          \"The specified path to the browser executable is invalid.\");\n     }\n-\n-        \n-    /* (non-Javadoc)\n-     * @see org.openqa.selenium.server.browserlaunchers.AbstractBrowserLauncher#launch(java.lang.String)\n-     */\n-    @Override\n-    protected void launch(String url) {\n-        final String profilePath;\n-        final String homePage;\n-        String profile = \"\";\n-\n-        try {\n-            homePage = new ChromeUrlConvert().convert(url);\n-            profilePath = makeCustomProfile(homePage);\n-            populateCustomProfileDirectory(profilePath);\n-\n-            LOGGER.info(\"Launching Firefox...\");\n-            cmdarray = new String[]{browserInstallation.launcherFilePath(), \"-profile\", profilePath};\n-            shell.setCommandline(cmdarray);\n-            process = shell.asyncSpawn();\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n+    this.browserInstallation = browserInstallation;\n+\n+    shell.setLibraryPath(browserInstallation.libraryPath());\n+    // Set MOZ_NO_REMOTE in order to ensure we always get a new Firefox process\n+    // http://blog.dojotoolkit.org/2005/12/01/running-multiple-versions-of-firefox-side-by-side\n+    shell.setEnvironmentVariable(\"MOZ_NO_REMOTE\", \"1\");\n+  }\n+\n+\n+  /* (non-Javadoc)\n+  * @see org.openqa.selenium.server.browserlaunchers.AbstractBrowserLauncher#launch(java.lang.String)\n+  */\n+\n+  @Override\n+  protected void launch(String url) {\n+    final String profilePath;\n+    final String homePage;\n+    String profile = \"\";\n+\n+    try {\n+      homePage = new ChromeUrlConvert().convert(url);\n+      profilePath = makeCustomProfile(homePage);\n+      populateCustomProfileDirectory(profilePath);\n+\n+      LOGGER.info(\"Launching Firefox...\");\n+      cmdarray = new String[]{\n+          browserInstallation.launcherFilePath(),\n+          \"-profile\",\n+          profilePath\n+      };\n+      shell.setCommandline(cmdarray);\n+      process = shell.asyncSpawn();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    private void populateCustomProfileDirectory(String profilePath) throws IOException {\n-        /*\n+  private void populateCustomProfileDirectory(String profilePath) throws IOException {\n+    /*\n         * The first time we launch Firefox with an empty profile directory,\n     * Firefox will launch itself, populate the profile directory, then\n     * kill/relaunch itself, so our process handle goes out of date.\n     * So, the first time we launch Firefox, we'll start it up at an URL\n     * that will immediately shut itself down.\n     */\n-        cmdarray = new String[]{browserInstallation.launcherFilePath(), \"-profile\", profilePath, \"-chrome\", CHROME_URL};\n-        LOGGER.info(\"Preparing Firefox profile...\");\n-        shell.setCommandline(cmdarray);\n-        shell.execute();\n-        waitForFullProfileToBeCreated(20 * 1000);\n-    }\n-    \n-    protected void createCustomProfileDir() {\n-    \tcustomProfileDir = LauncherUtils.createCustomProfileDir(sessionId);\n-    }\n-    \n-    protected void copyDirectory(File sourceDir, File destDir) {\n-    \t LauncherUtils.copyDirectory(sourceDir, destDir);\n-    }\n-    \n-    protected File initProfileTemplate() {\n-        File firefoxProfileTemplate = null;\n-        \n-        String relativeProfile = browserConfigurationOptions.getProfile();\n-        if (relativeProfile == null) {\n-        \trelativeProfile = \"\";\n-        }\n-        \n-        File profilesLocation = getConfiguration().getProfilesLocation();\n-        if (profilesLocation != null && !\"\".equals(relativeProfile)) {\n-\n-            firefoxProfileTemplate = getFileFromParent(profilesLocation, relativeProfile);\n-            if (!firefoxProfileTemplate.exists()) {\n-                throw new RuntimeException(\"The profile specified '\" + firefoxProfileTemplate.getAbsolutePath() + \"' does not exist\");\n-            }\n-        } else  {\n-            firefoxProfileTemplate = browserConfigurationOptions.getFile(\"firefoxProfileTemplate\");\n-        }\n-        \n-        if (firefoxProfileTemplate != null) {\n-        \tcopyDirectory(firefoxProfileTemplate, customProfileDir);\n-        }\n-        \n-        return firefoxProfileTemplate;\n+    cmdarray = new String[]{\n+        browserInstallation.launcherFilePath(),\n+        \"-profile\",\n+        profilePath,\n+        \"-chrome\",\n+        CHROME_URL\n+    };\n+    LOGGER.info(\"Preparing Firefox profile...\");\n+    shell.setCommandline(cmdarray);\n+    shell.execute();\n+    waitForFullProfileToBeCreated(20 * 1000);\n+  }\n+\n+  protected void createCustomProfileDir() {\n+    customProfileDir = LauncherUtils.createCustomProfileDir(sessionId);\n+  }\n+\n+  protected void copyDirectory(File sourceDir, File destDir) {\n+    LauncherUtils.copyDirectory(sourceDir, destDir);\n+  }\n+\n+  protected File initProfileTemplate() {\n+    File firefoxProfileTemplate = null;\n+\n+    String relativeProfile = browserConfigurationOptions.getProfile();\n+    if (relativeProfile == null) {\n+      relativeProfile = \"\";\n     }\n-    \n-    protected void extractProfileFromJar() throws IOException {\n-    \tResourceExtractor.extractResourcePath(getClass(), \"/customProfileDirCUSTFFCHROME\", customProfileDir);\n-    }\n-    \n-    protected void copySingleFileWithOverwrite(File sourceFile, File destFile) {\n-    \tLauncherUtils.copySingleFileWithOverwrite(sourceFile, destFile, true);\n+\n+    File profilesLocation = getConfiguration().getProfilesLocation();\n+    if (profilesLocation != null && !\"\".equals(relativeProfile)) {\n+\n+      firefoxProfileTemplate = getFileFromParent(profilesLocation, relativeProfile);\n+      if (!firefoxProfileTemplate.exists()) {\n+        throw new RuntimeException(\n+            \"The profile specified '\" + firefoxProfileTemplate.getAbsolutePath()\n+            + \"' does not exist\");\n+      }\n+    } else {\n+      firefoxProfileTemplate = browserConfigurationOptions.getFile(\"firefoxProfileTemplate\");\n     }\n-    \n-    protected File getFileFromParent(final File parent, String child) {\n-    \treturn new File(parent, child);\n+\n+    if (firefoxProfileTemplate != null) {\n+      copyDirectory(firefoxProfileTemplate, customProfileDir);\n     }\n-    \n-    protected void copyCert8db(final File firefoxProfileTemplate) {\n-        // Make sure that cert8.db of firefoxProfileTemplate is stored into customProfileDir \n-        if (firefoxProfileTemplate != null) {\n-        \tFile sourceCertFile = getFileFromParent(firefoxProfileTemplate, \"cert8.db\");\n-        \tif (sourceCertFile.exists()) {\n-\t        \tFile destCertFile = new File(customProfileDir, \"cert8.db\");\n-\t        \tcopySingleFileWithOverwrite(sourceCertFile, destCertFile);\n-        \t}\n-        }\n+\n+    return firefoxProfileTemplate;\n+  }\n+\n+  protected void extractProfileFromJar() throws IOException {\n+    ResourceExtractor.extractResourcePath(getClass(), \"/customProfileDirCUSTFFCHROME\",\n+        customProfileDir);\n+  }\n+\n+  protected void copySingleFileWithOverwrite(File sourceFile, File destFile) {\n+    LauncherUtils.copySingleFileWithOverwrite(sourceFile, destFile, true);\n+  }\n+\n+  protected File getFileFromParent(final File parent, String child) {\n+    return new File(parent, child);\n+  }\n+\n+  protected void copyCert8db(final File firefoxProfileTemplate) {\n+    // Make sure that cert8.db of firefoxProfileTemplate is stored into customProfileDir\n+    if (firefoxProfileTemplate != null) {\n+      File sourceCertFile = getFileFromParent(firefoxProfileTemplate, \"cert8.db\");\n+      if (sourceCertFile.exists()) {\n+        File destCertFile = new File(customProfileDir, \"cert8.db\");\n+        copySingleFileWithOverwrite(sourceCertFile, destCertFile);\n+      }\n     }\n-    \n-    protected void generatePacAndPrefJs(String homePage) throws IOException {\n-        LauncherUtils.ProxySetting proxySetting = LauncherUtils.ProxySetting.NO_PROXY;\n-        if (browserConfigurationOptions.is(\"captureNetworkTraffic\") || browserConfigurationOptions.is(\"addCustomRequestHeaders\")) {\n-            proxySetting = LauncherUtils.ProxySetting.PROXY_EVERYTHING;\n-        }\n+  }\n \n-        LauncherUtils.generatePacAndPrefJs(customProfileDir, getPort(), proxySetting, homePage, changeMaxConnections, getTimeout(), browserConfigurationOptions.is(\"avoidProxy\"));\n+  protected void generatePacAndPrefJs(String homePage) throws IOException {\n+    LauncherUtils.ProxySetting proxySetting = LauncherUtils.ProxySetting.NO_PROXY;\n+    if (browserConfigurationOptions.is(\"captureNetworkTraffic\") || browserConfigurationOptions.is(\n+        \"addCustomRequestHeaders\")) {\n+      proxySetting = LauncherUtils.ProxySetting.PROXY_EVERYTHING;\n     }\n-    \n-    private String makeCustomProfile(String homePage) throws IOException {\n-    \t\n-    \tcreateCustomProfileDir();\n \n-        File firefoxProfileTemplate = initProfileTemplate();\n-                \n-        extractProfileFromJar();\n+    LauncherUtils.generatePacAndPrefJs(customProfileDir, getPort(), proxySetting, homePage,\n+        changeMaxConnections, getTimeout(), browserConfigurationOptions.is(\"avoidProxy\"));\n+  }\n \n-        copyCert8db(firefoxProfileTemplate);\n+  private String makeCustomProfile(String homePage) throws IOException {\n \n-        copyRunnerHtmlFiles();\n-        \n-        changeMaxConnections = browserConfigurationOptions.is(\"changeMaxConnections\");\n+    createCustomProfileDir();\n \n-        generatePacAndPrefJs(homePage);\n+    File firefoxProfileTemplate = initProfileTemplate();\n \n-        return customProfileDir.getAbsolutePath();\n-    }\n+    extractProfileFromJar();\n \n+    copyCert8db(firefoxProfileTemplate);\n \n-    private void copyRunnerHtmlFiles() {\n-        String guid = \"{503A0CD4-EDC8-489b-853B-19E0BAA8F0A4}\";\n-        File extensionDir = new File(customProfileDir, \"extensions/\" + guid);\n-        File htmlDir = new File(extensionDir, \"chrome\");\n-        htmlDir.mkdirs();\n+    copyRunnerHtmlFiles();\n \n-        LauncherUtils.extractHTAFile(htmlDir, getPort(), \"/core/TestRunner.html\", \"TestRunner.html\");\n-        LauncherUtils.extractHTAFile(htmlDir, getPort(), \"/core/TestPrompt.html\", \"TestPrompt.html\");\n-        LauncherUtils.extractHTAFile(htmlDir, getPort(), \"/core/RemoteRunner.html\", \"RemoteRunner.html\");\n+    changeMaxConnections = browserConfigurationOptions.is(\"changeMaxConnections\");\n \n-    }\n+    generatePacAndPrefJs(homePage);\n \n+    return customProfileDir.getAbsolutePath();\n+  }\n \n-    public void close() {\n-        if (closed) return;\n-        FileLockRemainedException fileLockException = null;\n-        if (process != null) {\n-            try {\n-              killFirefoxProcess();\n-            } catch (FileLockRemainedException flre) {\n-              fileLockException = flre;\n-            }\n-        }\n-        if (customProfileDir != null) {\n-            try {\n-                removeCustomProfileDir();\n-            } catch (RuntimeException e) {\n-                if (fileLockException != null) {\n-                    LOGGER.error(\"Couldn't delete custom Firefox profile directory\", e);\n-                    LOGGER.error(\"Perhaps caused by this exception:\");\n-                    if (fileLockException != null) LOGGER.error(\"Perhaps caused by this exception:\", fileLockException);\n-                    throw new RuntimeException(\"Couldn't delete custom Firefox \" +\n-                            \"profile directory, presumably because task kill failed; \" +\n-                            \"see error LOGGER!\", e);\n-                }\n-                throw e;\n-            }\n-        }\n-        closed = true;\n+\n+  private void copyRunnerHtmlFiles() {\n+    String guid = \"{503A0CD4-EDC8-489b-853B-19E0BAA8F0A4}\";\n+    File extensionDir = new File(customProfileDir, \"extensions/\" + guid);\n+    File htmlDir = new File(extensionDir, \"chrome\");\n+    htmlDir.mkdirs();\n+\n+    LauncherUtils.extractHTAFile(htmlDir, getPort(), \"/core/TestRunner.html\", \"TestRunner.html\");\n+    LauncherUtils.extractHTAFile(htmlDir, getPort(), \"/core/TestPrompt.html\", \"TestPrompt.html\");\n+    LauncherUtils.extractHTAFile(htmlDir, getPort(), \"/core/RemoteRunner.html\",\n+        \"RemoteRunner.html\");\n+\n+  }\n+\n+\n+  public void close() {\n+    if (closed) {\n+      return;\n     }\n-    \n-    /** Wrapper to allow for stubbed-out testing **/\n-    protected void removeCustomProfileDir() throws RuntimeException {\n-      LauncherUtils.deleteTryTryAgain(customProfileDir, 6);\n+    FileLockRemainedException fileLockException = null;\n+    if (process != null) {\n+      try {\n+        killFirefoxProcess();\n+      } catch (FileLockRemainedException flre) {\n+        fileLockException = flre;\n+      }\n     }\n-\n-    /** Wrapper to allow for stubbed-out testing **/\n-    protected void killFirefoxProcess() throws FileLockRemainedException {\n-      LOGGER.info(\"Killing Firefox...\");\n-      int exitValue = AsyncExecute.killProcess(process);\n-      if (exitValue == 0) {\n-          LOGGER.warn(\"Firefox seems to have ended on its own (did we kill the real browser???)\");\n+    if (customProfileDir != null) {\n+      try {\n+        removeCustomProfileDir();\n+      } catch (RuntimeException e) {\n+        if (fileLockException != null) {\n+          LOGGER.error(\"Couldn't delete custom Firefox profile directory\", e);\n+          LOGGER.error(\"Perhaps caused by this exception:\");\n+          if (fileLockException != null) {\n+            LOGGER.error(\"Perhaps caused by this exception:\", fileLockException);\n+          }\n+          throw new RuntimeException(\"Couldn't delete custom Firefox \" +\n+                                     \"profile directory, presumably because task kill failed; \" +\n+                                     \"see error LOGGER!\", e);\n+        }\n+        throw e;\n       }\n-      waitForFileLockToGoAway(0, 500);\n     }\n-\n-    public Process getProcess() {\n-        return process;\n+    closed = true;\n+  }\n+\n+  /**\n+   * Wrapper to allow for stubbed-out testing *\n+   */\n+  protected void removeCustomProfileDir() throws RuntimeException {\n+    LauncherUtils.deleteTryTryAgain(customProfileDir, 6);\n+  }\n+\n+  /**\n+   * Wrapper to allow for stubbed-out testing *\n+   */\n+  protected void killFirefoxProcess() throws FileLockRemainedException {\n+    LOGGER.info(\"Killing Firefox...\");\n+    int exitValue = AsyncExecute.killProcess(process);\n+    if (exitValue == 0) {\n+      LOGGER.warn(\"Firefox seems to have ended on its own (did we kill the real browser???)\");\n     }\n-\n-    /**\n-     * Firefox knows it's running by using a \"parent.lock\" file in\n-     * the profile directory.  Wait for this file to go away (and stay gone)\n-     *\n-     * @param timeout    max time to wait for the file to go away\n-     * @param timeToWait minimum time to wait to make sure the file is gone\n-     * @throws FileLockRemainedException\n-     */\n-    private void waitForFileLockToGoAway(long timeout, long timeToWait) throws FileLockRemainedException {\n-        File lock = new File(customProfileDir, \"parent.lock\");\n-        for (long start = System.currentTimeMillis(); System.currentTimeMillis() < start + timeout;) {\n-            AsyncExecute.sleepTight(500);\n-            if (!lock.exists() && makeSureFileLockRemainsGone(lock, timeToWait)) return;\n-        }\n-        if (lock.exists()) throw new FileLockRemainedException(\"Lock file still present! \" + lock.getAbsolutePath());\n+    waitForFileLockToGoAway(0, 500);\n+  }\n+\n+  public Process getProcess() {\n+    return process;\n+  }\n+\n+  /**\n+   * Firefox knows it's running by using a \"parent.lock\" file in\n+   * the profile directory.  Wait for this file to go away (and stay gone)\n+   *\n+   * @param timeout    max time to wait for the file to go away\n+   * @param timeToWait minimum time to wait to make sure the file is gone\n+   * @throws FileLockRemainedException\n+   */\n+  private void waitForFileLockToGoAway(long timeout, long timeToWait)\n+      throws FileLockRemainedException {\n+    File lock = new File(customProfileDir, \"parent.lock\");\n+    for (long start = System.currentTimeMillis(); System.currentTimeMillis() < start + timeout;) {\n+      AsyncExecute.sleepTight(500);\n+      if (!lock.exists() && makeSureFileLockRemainsGone(lock, timeToWait)) {\n+        return;\n+      }\n     }\n-\n-    /**\n-     * When initializing the profile, Firefox rapidly starts, stops, restarts and\n-     * stops again; we need to wait a bit to make sure the file lock is really gone.\n-     *\n-     * @param lock       the parent.lock file in the profile directory\n-     * @param timeToWait minimum time to wait to see if the file shows back\n-     *                   up again. This is not a timeout; we will always wait this amount of time or more.\n-     * @return true if the file stayed gone for the entire timeToWait; false if the\n-     *         file exists (or came back)\n-     */\n-    private boolean makeSureFileLockRemainsGone(File lock, long timeToWait) {\n-        for (long start = System.currentTimeMillis(); System.currentTimeMillis() < start + timeToWait;) {\n-            AsyncExecute.sleepTight(500);\n-            if (lock.exists()) return false;\n-        }\n-        return !lock.exists();\n+    if (lock.exists()) {\n+      throw new FileLockRemainedException(\"Lock file still present! \" + lock.getAbsolutePath());\n     }\n-\n-    /**\n-     * Wait for one of the Firefox-generated files to come into existence, then wait\n-     * for Firefox to exit\n-     *\n-     * @param timeout the maximum amount of time to wait for the profile to be created\n-     */\n-    private void waitForFullProfileToBeCreated(long timeout) {\n-        // This will be a characteristic file in the profile\n-        File testFile = new File(customProfileDir, \"extensions.ini\");\n-        long start = System.currentTimeMillis();\n-        for (; System.currentTimeMillis() < start + timeout;) {\n-\n-            AsyncExecute.sleepTight(500);\n-            if (testFile.exists()) break;\n-        }\n-        if (!testFile.exists()) throw new RuntimeException(\"Timed out waiting for profile to be created!\");\n-        // wait the rest of the timeout for the file lock to go away\n-        long subTimeout = timeout - (System.currentTimeMillis() - start);\n-        try {\n-            waitForFileLockToGoAway(subTimeout, 500);\n-        } catch (FileLockRemainedException e) {\n-            throw new RuntimeException(\"Firefox refused shutdown while preparing a profile\", e);\n-        }\n+  }\n+\n+  /**\n+   * When initializing the profile, Firefox rapidly starts, stops, restarts and\n+   * stops again; we need to wait a bit to make sure the file lock is really gone.\n+   *\n+   * @param lock       the parent.lock file in the profile directory\n+   * @param timeToWait minimum time to wait to see if the file shows back\n+   *                   up again. This is not a timeout; we will always wait this amount of time or more.\n+   * @return true if the file stayed gone for the entire timeToWait; false if the\n+   *         file exists (or came back)\n+   */\n+  private boolean makeSureFileLockRemainsGone(File lock, long timeToWait) {\n+    for (long start = System.currentTimeMillis();\n+         System.currentTimeMillis() < start + timeToWait;) {\n+      AsyncExecute.sleepTight(500);\n+      if (lock.exists()) {\n+        return false;\n+      }\n     }\n-    \n-    // visible for testing\n-    protected void setCustomProfileDir(File value) {\n-      customProfileDir = value;\n+    return !lock.exists();\n+  }\n+\n+  /**\n+   * Wait for one of the Firefox-generated files to come into existence, then wait\n+   * for Firefox to exit\n+   *\n+   * @param timeout the maximum amount of time to wait for the profile to be created\n+   */\n+  private void waitForFullProfileToBeCreated(long timeout) {\n+    // This will be a characteristic file in the profile\n+    File testFile = new File(customProfileDir, \"extensions.ini\");\n+    long start = System.currentTimeMillis();\n+    for (; System.currentTimeMillis() < start + timeout;) {\n+\n+      AsyncExecute.sleepTight(500);\n+      if (testFile.exists()) {\n+        break;\n+      }\n     }\n-    \n-    // visible for testing\n-    protected void setProcess(Process p) {\n-      process = p;\n+    if (!testFile.exists()) {\n+      throw new RuntimeException(\"Timed out waiting for profile to be created!\");\n     }\n-\n-    protected class FileLockRemainedException extends Exception {\n-        FileLockRemainedException(String message) {\n-            super(message);\n-        }\n+    // wait the rest of the timeout for the file lock to go away\n+    long subTimeout = timeout - (System.currentTimeMillis() - start);\n+    try {\n+      waitForFileLockToGoAway(subTimeout, 500);\n+    } catch (FileLockRemainedException e) {\n+      throw new RuntimeException(\"Firefox refused shutdown while preparing a profile\", e);\n     }\n+  }\n \n-    public static class ChromeUrlConvert {\n-        public String convert(String httpUrl) throws MalformedURLException {\n-            String query = LauncherUtils.getQueryString(httpUrl);\n-            String file = new File(new URL(httpUrl).getPath()).getName();\n-            return \"chrome://src/content/\" + file + \"?\" + query;\n-        }\n+  // visible for testing\n+\n+  protected void setCustomProfileDir(File value) {\n+    customProfileDir = value;\n+  }\n+\n+  // visible for testing\n+\n+  protected void setProcess(Process p) {\n+    process = p;\n+  }\n+\n+  protected class FileLockRemainedException extends Exception {\n+    FileLockRemainedException(String message) {\n+      super(message);\n     }\n+  }\n \n-    @Override // need to specify an absolute resultsUrl\n-    public void launchHTMLSuite(String suiteUrl, String browserURL) {\n-        // If navigating to TestPrompt, use the baked-in version instead.\n-        if (suiteUrl != null && suiteUrl.startsWith(\"TestPrompt.html?\")) {\n-            suiteUrl = suiteUrl.replaceFirst(\"^TestPrompt\\\\.html\\\\?\", \"chrome://src/content/TestPrompt.html?\");\n-        }\n-        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, (!browserConfigurationOptions.isSingleWindow()), getPort()));\n+  public static class ChromeUrlConvert {\n+    public String convert(String httpUrl) throws MalformedURLException {\n+      String query = LauncherUtils.getQueryString(httpUrl);\n+      String file = new File(new URL(httpUrl).getPath()).getName();\n+      return \"chrome://src/content/\" + file + \"?\" + query;\n     }\n-    \n-    @Override // need to specify an absolute driverUrl\n-    public void launchRemoteSession(String browserURL) { \n-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, (!browserConfigurationOptions.isSingleWindow()), getPort(), browserConfigurationOptions.is(\"browserSideLog\")));\n+  }\n+\n+  @Override\n+  // need to specify an absolute resultsUrl\n+  public void launchHTMLSuite(String suiteUrl, String browserURL) {\n+    // If navigating to TestPrompt, use the baked-in version instead.\n+    if (suiteUrl != null && suiteUrl.startsWith(\"TestPrompt.html?\")) {\n+      suiteUrl =\n+          suiteUrl.replaceFirst(\"^TestPrompt\\\\.html\\\\?\", \"chrome://src/content/TestPrompt.html?\");\n     }\n+    launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl,\n+        (!browserConfigurationOptions.isSingleWindow()), getPort()));\n+  }\n+\n+  @Override\n+  // need to specify an absolute driverUrl\n+  public void launchRemoteSession(String browserURL) {\n+    launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId,\n+        (!browserConfigurationOptions.isSingleWindow()), getPort(),\n+        browserConfigurationOptions.is(\"browserSideLog\")));\n+  }\n \n }\n ",
      "parent_sha": "94b71f1a84ae68c4c9970ac13f146580e8e60279"
    }
  },
  {
    "oid": "b45da6e552871fb95b526cc9eaaeff5fb2d5ea47",
    "message": "MichaelTamm: fixed SetProxyTest.testCanMakeIeDriverUseASpecifiedProxy()\n\nr9397",
    "date": "2010-07-26T14:51:42Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/b45da6e552871fb95b526cc9eaaeff5fb2d5ea47",
    "details": {
      "sha": "83ce463bc1cfbe46b1f86565ebdd9831dd773cb8",
      "filename": "remote/server/test/java/org/openqa/selenium/SetProxyTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/b45da6e552871fb95b526cc9eaaeff5fb2d5ea47/remote%2Fserver%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FSetProxyTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/b45da6e552871fb95b526cc9eaaeff5fb2d5ea47/remote%2Fserver%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FSetProxyTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/remote%2Fserver%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FSetProxyTest.java?ref=b45da6e552871fb95b526cc9eaaeff5fb2d5ea47",
      "patch": "@@ -5,7 +5,7 @@\n import org.openqa.selenium.environment.GlobalTestEnvironment;\r\n import org.openqa.selenium.environment.InProcessTestEnvironment;\r\n import org.openqa.selenium.environment.TestEnvironment;\r\n-import org.openqa.selenium.firefox.FirefoxDriverTestSuite;\r\n+import org.openqa.selenium.ie.InternetExplorerDriver;\r\n import org.openqa.selenium.internal.CommandLine;\r\n import org.openqa.selenium.remote.DesiredCapabilities;\r\n import org.openqa.selenium.remote.HttpRequest;\r\n@@ -54,9 +54,9 @@ public void testCanMakeIeDriverUseASpecifiedProxy() throws Exception {\n     caps.setCapability(PROXY, proxy);\r\n     caps.setCapability(ENSURING_CLEAN_SESSION, true);\r\n \r\n-    WebDriver driver = new FirefoxDriverTestSuite.TestFirefoxDriver(caps);\r\n+//    WebDriver driver = new FirefoxDriverTestSuite.TestFirefoxDriver(caps);\r\n //    WebDriver driver = new RemoteWebDriver(seleniumServer.getWebDriverUrl(), caps);\r\n-//    WebDriver driver = new InternetExplorerDriver(caps);\r\n+    WebDriver driver = new InternetExplorerDriver(caps);\r\n \r\n     driver.get(new Pages(env.getAppServer()).xhtmlTestPage);\r\n     driver.quit();\r",
      "parent_sha": "3b142334c20fae0d4ac1471c411849ad7d027936"
    }
  },
  {
    "oid": "b423e2bd8e2a721859dbb97af4fef94c80c39a44",
    "message": "Wrapping exceptions thrown by HtmlUnit javascript execution engine into\nWebDriverException",
    "date": "2013-05-01T12:22:21Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/b423e2bd8e2a721859dbb97af4fef94c80c39a44",
    "details": {
      "sha": "b6418d35a306dd22481bc6b8f5dc1a75c1dbafc5",
      "filename": "java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/b423e2bd8e2a721859dbb97af4fef94c80c39a44/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fhtmlunit%2FHtmlUnitDriver.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/b423e2bd8e2a721859dbb97af4fef94c80c39a44/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fhtmlunit%2FHtmlUnitDriver.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fhtmlunit%2FHtmlUnitDriver.java?ref=b423e2bd8e2a721859dbb97af4fef94c80c39a44",
      "patch": "@@ -487,11 +487,15 @@ public Object executeScript(String script, final Object... args) {\n \n     Object[] parameters = convertScriptArgs(page, args);\n \n-    result = page.executeJavaScriptFunctionIfPossible(\n-        func,\n-        (ScriptableObject) getCurrentWindow().getScriptObject(),\n-        parameters,\n-        page.getDocumentElement());\n+    try {\n+      result = page.executeJavaScriptFunctionIfPossible(\n+          func,\n+          (ScriptableObject) getCurrentWindow().getScriptObject(),\n+          parameters,\n+          page.getDocumentElement());\n+    } catch (Throwable ex) {\n+      throw new WebDriverException(ex);\n+    }\n \n     return parseNativeJavascriptResult(result);\n   }",
      "parent_sha": "10b8376c9d050d636c82113e2c3c8b263ddbfbb9"
    }
  },
  {
    "oid": "4d1f81af44a816d82e832f752b5eeeec695cd72b",
    "message": "Unignoring two tests that IE11 passed locally",
    "date": "2015-06-02T19:42:27Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/4d1f81af44a816d82e832f752b5eeeec695cd72b",
    "details": {
      "sha": "12a33cb1dd6efa2d67fd3af5203804dceea0f494",
      "filename": "java/client/test/org/openqa/selenium/interactions/DragAndDropTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/4d1f81af44a816d82e832f752b5eeeec695cd72b/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Finteractions%2FDragAndDropTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/4d1f81af44a816d82e832f752b5eeeec695cd72b/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Finteractions%2FDragAndDropTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Finteractions%2FDragAndDropTest.java?ref=4d1f81af44a816d82e832f752b5eeeec695cd72b",
      "patch": "@@ -116,7 +116,6 @@ public void testDragAndDropElementWithOffsetInIframeAtBottom() {\n   }\n \n   @JavascriptEnabled\n-  @Ignore(value = {IE})\n   @Test\n   public void testDragAndDropElementWithOffsetInScrolledDiv() {\n     assumeFalse(\"See issue 4241\", Browser.detect() == Browser.ff &&\n@@ -230,7 +229,7 @@ public void testDragAndDropOnJQueryItems() {\n \n   @JavascriptEnabled\n   @Test\n-  @Ignore({IE, PHANTOMJS, SAFARI})\n+  @Ignore({PHANTOMJS, SAFARI})\n   public void canDragAnElementNotVisibleInTheCurrentViewportDueToAParentOverflow() {\n     driver.get(pages.dragDropOverflow);\n ",
      "parent_sha": "8f4b69ffd14f7faf709bd5f15ed1f8d9945be26d"
    }
  },
  {
    "oid": "ab87a06d1efc6d11fb3912eb11ed8c2217dbcc36",
    "message": "At SeleniumConf: delete a deprecated method",
    "date": "2018-06-28T12:26:31Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/ab87a06d1efc6d11fb3912eb11ed8c2217dbcc36",
    "details": {
      "sha": "d2436b5e8068f26521d1895e8c89ac0229b50e34",
      "filename": "java/client/src/org/openqa/selenium/safari/SafariOptions.java",
      "status": "modified",
      "additions": 2,
      "deletions": 20,
      "changes": 22,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/ab87a06d1efc6d11fb3912eb11ed8c2217dbcc36/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsafari%2FSafariOptions.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/ab87a06d1efc6d11fb3912eb11ed8c2217dbcc36/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsafari%2FSafariOptions.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsafari%2FSafariOptions.java?ref=ab87a06d1efc6d11fb3912eb11ed8c2217dbcc36",
      "patch": "@@ -34,7 +34,7 @@\n  * <p>Example usage:\n  * <pre><code>\n  * SafariOptions options = new SafariOptions()\n- * options.setUseCleanSession(true);\n+ * options.setUseTechnologyPreview(true);\n  *\n  * // For use with SafariDriver:\n  * SafariDriver driver = new SafariDriver(options);\n@@ -53,7 +53,6 @@ public class SafariOptions extends MutableCapabilities {\n   public static final String CAPABILITY = \"safari.options\";\n \n   private interface Option {\n-    String CLEAN_SESSION = \"cleanSession\";\n     String TECHNOLOGY_PREVIEW = \"technologyPreview\";\n   }\n \n@@ -109,24 +108,7 @@ public static SafariOptions fromCapabilities(Capabilities capabilities)\n   }\n \n   // Setters\n-\n-  /**\n-   * Instruct the SafariDriver to delete all existing session data when starting a new session.\n-   * This includes browser history, cache, cookies, HTML5 local storage, and HTML5 databases.\n-   *\n-   * <p><strong>Warning:</strong> Since Safari uses a single profile for the\n-   * current user, enabling this capability will permanently erase any existing\n-   * session data.\n-   *\n-   * @param useCleanSession If true, the SafariDriver will erase all existing session data.\n-   * @deprecated SafariDriver always runs a clean session\n-   */\n-  @Deprecated\n-  public SafariOptions useCleanSession(boolean useCleanSession) {\n-    options.put(Option.CLEAN_SESSION, useCleanSession);\n-    return this;\n-  }\n-\n+  \n   /**\n    * Instruct the SafariDriver to use the Safari Technology Preview if true, otherwise use the\n    * release version of Safari. Defaults to using the release version of Safari.",
      "parent_sha": "0aa8dd4ff1046885d09f3659e035066130ea0bf4"
    }
  },
  {
    "oid": "529026cd5dd4575d2f1840284dd26e2f5209910b",
    "message": "Ignoring back two tests in IE, they fail if requireWindowFocus=true",
    "date": "2015-06-03T14:50:35Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/529026cd5dd4575d2f1840284dd26e2f5209910b",
    "details": {
      "sha": "b178c2a1541f83209b0fed73f89d383b30e8572b",
      "filename": "java/client/test/org/openqa/selenium/interactions/DragAndDropTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/529026cd5dd4575d2f1840284dd26e2f5209910b/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Finteractions%2FDragAndDropTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/529026cd5dd4575d2f1840284dd26e2f5209910b/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Finteractions%2FDragAndDropTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Finteractions%2FDragAndDropTest.java?ref=529026cd5dd4575d2f1840284dd26e2f5209910b",
      "patch": "@@ -116,6 +116,7 @@ public void testDragAndDropElementWithOffsetInIframeAtBottom() {\n   }\n \n   @JavascriptEnabled\n+  @Ignore(value = {IE}, reason = \"IE fails this test if requireWindowFocus=true\")\n   @Test\n   public void testDragAndDropElementWithOffsetInScrolledDiv() {\n     assumeFalse(\"See issue 4241\", Browser.detect() == Browser.ff &&\n@@ -229,7 +230,7 @@ public void testDragAndDropOnJQueryItems() {\n \n   @JavascriptEnabled\n   @Test\n-  @Ignore({PHANTOMJS, SAFARI})\n+  @Ignore(value = {IE, PHANTOMJS, SAFARI}, reason = \"IE fails this test if requireWindowFocus=true\")\n   public void canDragAnElementNotVisibleInTheCurrentViewportDueToAParentOverflow() {\n     driver.get(pages.dragDropOverflow);\n ",
      "parent_sha": "4d1f81af44a816d82e832f752b5eeeec695cd72b"
    }
  },
  {
    "oid": "3efe70284196590d6bef5c3a983c787d79a38536",
    "message": "streamlined exception message in the case of second server, same port\n\nr5997",
    "date": "2008-12-27T07:13:59Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/3efe70284196590d6bef5c3a983c787d79a38536",
    "details": {
      "sha": "ab6550f4d047d131123b400fc4bff25f0d540b21",
      "filename": "server-coreless/src/main/java/org/openqa/selenium/server/SeleniumServer.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/3efe70284196590d6bef5c3a983c787d79a38536/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/3efe70284196590d6bef5c3a983c787d79a38536/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumServer.java?ref=3efe70284196590d6bef5c3a983c787d79a38536",
      "patch": "@@ -24,6 +24,7 @@\n import org.mortbay.http.SocketListener;\r\n import org.mortbay.http.handler.SecurityHandler;\r\n import org.mortbay.jetty.Server;\r\n+import org.mortbay.util.MultiException;\r\n import org.openqa.selenium.server.BrowserSessionFactory.BrowserSessionInfo;\r\n import org.openqa.selenium.server.browserlaunchers.AsyncExecute;\r\n import org.openqa.selenium.server.cli.RemoteControlLauncher;\r\n@@ -36,6 +37,7 @@\n import java.io.*;\r\n import java.net.URL;\r\n import java.net.URLConnection;\r\n+import java.net.BindException;\r\n import java.util.Properties;\r\n \r\n /**\r\n@@ -207,7 +209,7 @@ public SeleniumServer(boolean slowResources) throws Exception {\n \r\n     /**\r\n      * Prepares a Jetty server with its HTTP handlers.\r\n-     *\r\n+     *                               p\r\n      * @param slowResources should the webserver return static resources more slowly?\r\n      *        (Note that this will not slow down ordinary RC test runs; this setting is used to debug Selenese HTML tests.)\r\n      * @param configuration  Remote Control configuration. Cannot be null.\r\n@@ -395,7 +397,14 @@ public void handleHTMLRunnerResults(HTMLResultsListener listener) {\n      */\r\n     public void start() throws Exception {\r\n         System.setProperty(\"org.mortbay.http.HttpRequest.maxFormContentSize\", \"0\"); // default max is 200k; zero is infinite\r\n-        server.start();\r\n+        try {\r\n+            server.start();\r\n+        } catch (MultiException e) {\r\n+            if (e.getExceptions().size() == 1 && e.getException(0) instanceof BindException) {\r\n+                throw new BindException(\"Selenium is already running on port \" + getPort() + \". Or some other service is.\" );\r\n+            }\r\n+            throw e;\r\n+        }\r\n \r\n         shutDownHook = new Thread(new ShutDownHook(this));\r\n         shutDownHook.setName(\"SeleniumServerShutDownHook\");\r",
      "parent_sha": "21b05962b8c3e6c66e8da7c23458665a822178d7"
    }
  },
  {
    "oid": "dde7a5019e99860d1cb3743d90a6679f6e4febf4",
    "message": "Adding finalization part to recently added Firefox-specific tests",
    "date": "2014-07-04T00:03:17Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/dde7a5019e99860d1cb3743d90a6679f6e4febf4",
    "details": {
      "sha": "f2a54ef0b47894f6727c36cda27ea249ebb06a9b",
      "filename": "java/client/test/org/openqa/selenium/firefox/internal/NewProfileExtensionConnectionTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/dde7a5019e99860d1cb3743d90a6679f6e4febf4/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2Finternal%2FNewProfileExtensionConnectionTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/dde7a5019e99860d1cb3743d90a6679f6e4febf4/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2Finternal%2FNewProfileExtensionConnectionTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2Finternal%2FNewProfileExtensionConnectionTest.java?ref=dde7a5019e99860d1cb3743d90a6679f6e4febf4",
      "patch": "@@ -3,6 +3,7 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n+import org.junit.After;\n import org.junit.Test;\n import org.openqa.selenium.WebDriverException;\n import org.openqa.selenium.firefox.FirefoxBinary;\n@@ -12,10 +13,12 @@\n \n public class NewProfileExtensionConnectionTest {\n \n+  private NewProfileExtensionConnection connection;\n+\n   @Test\n   @NeedsLocalEnvironment\n   public void canBeConstructed() throws Exception {\n-    new NewProfileExtensionConnection\n+    connection = new NewProfileExtensionConnection\n         (makeLock(), new FirefoxBinary(), new FirefoxProfile(), \"my-host\");\n   }\n \n@@ -27,7 +30,7 @@ public void shouldDefaultToPortSpecifiedInProfileWhenDeterminingNextFreePort() t\n     FirefoxProfile profile = new FirefoxProfile();\n     profile.setPreference(FirefoxProfile.PORT_PREFERENCE, expectedPort);\n \n-    NewProfileExtensionConnection connection = new NewProfileExtensionConnection\n+    connection = new NewProfileExtensionConnection\n         (makeLock(), new FirefoxBinary(), profile, \"my-host\");\n \n     try {\n@@ -43,6 +46,13 @@ public void shouldDefaultToPortSpecifiedInProfileWhenDeterminingNextFreePort() t\n \n   }\n \n+  @After\n+  public void destroyConnection() {\n+    if (connection != null) {\n+      connection.quit();\n+    }\n+  }\n+\n   private SocketLock makeLock() {\n     return new SocketLock(4200);\n   }",
      "parent_sha": "c545a3afddd87a1894d3c401a113572ab8b7c2b4"
    }
  },
  {
    "oid": "74e0af80bdf88d066cb1104f6f063b4167f2dc26",
    "message": "[Java] Using driver path always for Safari and Safari Technology Preview\n\nFixes #11952",
    "date": "2023-05-04T08:27:43Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/74e0af80bdf88d066cb1104f6f063b4167f2dc26",
    "details": {
      "sha": "dd8fc6acebd0778952f595de2d2004ca21270172",
      "filename": "java/src/org/openqa/selenium/remote/service/DriverFinder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/74e0af80bdf88d066cb1104f6f063b4167f2dc26/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fservice%2FDriverFinder.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/74e0af80bdf88d066cb1104f6f063b4167f2dc26/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fservice%2FDriverFinder.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fservice%2FDriverFinder.java?ref=74e0af80bdf88d066cb1104f6f063b4167f2dc26",
      "patch": "@@ -17,7 +17,8 @@ public static String getPath(DriverService service, Capabilities options) {\n     String defaultPath = new ExecutableFinder().find(service.getDriverName());\n     String exePath = System.getProperty(service.getDriverProperty(), defaultPath);\n \n-    if (exePath == null && service.getDriverExecutable() != null) {\n+    if (service.getDriverExecutable() != null) {\n+      // This is the case for Safari and Safari Technology Preview\n       exePath = service.getDriverExecutable().getAbsolutePath();\n     }\n \n@@ -35,10 +36,9 @@ public static String getPath(DriverService service, Capabilities options) {\n         \"see https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/\",\n         service.getDriverName());\n \n-      File exe = new File(validPath);\n-      Require.state(\"The driver executable\", exe).isFile();\n-      Require.stateCondition(exe.canExecute(), \"It must be an executable file: %s\", exe);\n-      return validPath;\n-    }\n-\n+    File exe = new File(validPath);\n+    Require.state(\"The driver executable\", exe).isFile();\n+    Require.stateCondition(exe.canExecute(), \"It must be an executable file: %s\", exe);\n+    return validPath;\n+  }\n }",
      "parent_sha": "59fa77c675f891cef9ef397eb7952eb2d5821cd2"
    }
  },
  {
    "oid": "f4e23dd62db40933f18ebe1fb9170b62171ffbdb",
    "message": "[java] Minor unit test improvements",
    "date": "2021-02-13T20:19:26Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/f4e23dd62db40933f18ebe1fb9170b62171ffbdb",
    "details": {
      "sha": "c594333b381b2ad622500949532e91d94a1f2fc7",
      "filename": "java/client/test/org/openqa/selenium/ByTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 21,
      "changes": 40,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/f4e23dd62db40933f18ebe1fb9170b62171ffbdb/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FByTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/f4e23dd62db40933f18ebe1fb9170b62171ffbdb/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FByTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FByTest.java?ref=f4e23dd62db40933f18ebe1fb9170b62171ffbdb",
      "patch": "@@ -27,7 +27,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.assertj.core.api.Assertions.fail;\n+import static org.assertj.core.api.Assertions.assertThatNoException;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n@@ -46,7 +46,7 @@ public class ByTest {\n \n   @Test\n   public void shouldUseFindsByNameToLocateElementsByName() {\n-    final AllDriver driver = mock(AllDriver.class);\n+    final SearchContext driver = mock(SearchContext.class);\n \n     By.cssSelector(\"cheese\").findElement(driver);\n     By.cssSelector(\"peas\").findElements(driver);\n@@ -58,7 +58,7 @@ public void shouldUseFindsByNameToLocateElementsByName() {\n \n   @Test\n   public void shouldUseXpathLocateElementsByXpath() {\n-    AllDriver driver = mock(AllDriver.class);\n+    SearchContext driver = mock(SearchContext.class);\n \n     By.xpath(\".//*[@name = 'cheese']\").findElement(driver);\n     By.xpath(\".//*[@name = 'peas']\").findElements(driver);\n@@ -70,7 +70,7 @@ public void shouldUseXpathLocateElementsByXpath() {\n \n   @Test\n   public void searchesByTagNameIfSupported() {\n-    AllDriver context = mock(AllDriver.class);\n+    SearchContext context = mock(SearchContext.class);\n \n     By.tagName(\"foo\").findElement(context);\n     By.tagName(\"bar\").findElements(context);\n@@ -82,14 +82,14 @@ public void searchesByTagNameIfSupported() {\n \n   @Test\n   public void innerClassesArePublicSoThatTheyCanBeReusedElsewhere() {\n-    assertThat(new ByXPath(\"a\").toString()).isEqualTo(\"By.xpath: a\");\n-    assertThat(new ById(\"a\").toString()).isEqualTo(\"By.id: a\");\n-    assertThat(new ByClassName(\"a\").toString()).isEqualTo(\"By.className: a\");\n-    assertThat(new ByLinkText(\"a\").toString()).isEqualTo(\"By.linkText: a\");\n-    assertThat(new ByName(\"a\").toString()).isEqualTo(\"By.name: a\");\n-    assertThat(new ByTagName(\"a\").toString()).isEqualTo(\"By.tagName: a\");\n-    assertThat(new ByCssSelector(\"a\").toString()).isEqualTo(\"By.cssSelector: a\");\n-    assertThat(new ByPartialLinkText(\"a\").toString()).isEqualTo(\"By.partialLinkText: a\");\n+    assertThat(new ByXPath(\"a\")).hasToString(\"By.xpath: a\");\n+    assertThat(new ById(\"a\")).hasToString(\"By.id: a\");\n+    assertThat(new ByClassName(\"a\")).hasToString(\"By.className: a\");\n+    assertThat(new ByLinkText(\"a\")).hasToString(\"By.linkText: a\");\n+    assertThat(new ByName(\"a\")).hasToString(\"By.name: a\");\n+    assertThat(new ByTagName(\"a\")).hasToString(\"By.tagName: a\");\n+    assertThat(new ByCssSelector(\"a\")).hasToString(\"By.cssSelector: a\");\n+    assertThat(new ByPartialLinkText(\"a\")).hasToString(\"By.partialLinkText: a\");\n   }\n \n   // See https://github.com/SeleniumHQ/selenium-google-code-issue-archive/issues/2917\n@@ -101,12 +101,13 @@ public List<WebElement> findElements(SearchContext context) {\n         return null;\n       }\n     };\n-    locator.hashCode();\n+    assertThatNoException().isThrownBy(locator::hashCode);\n   }\n \n   @Test\n   public void ensureMultipleClassNamesAreNotAccepted() {\n-    assertThatExceptionOfType(InvalidSelectorException.class).isThrownBy(() -> By.className(\"one two\"));\n+    assertThatExceptionOfType(InvalidSelectorException.class)\n+      .isThrownBy(() -> By.className(\"one two\"));\n   }\n \n   @Test\n@@ -117,12 +118,9 @@ public void ensureIdIsSerializedProperly() {\n     Json json = new Json();\n     Map<String, Object> blob = json.toType(json.toJson(by), MAP_TYPE);\n \n-    assertThat(blob.get(\"using\")).isEqualTo(\"css selector\");\n-    assertThat(blob.get(\"value\")).isEqualTo(\"#one\\\\ two\");\n+    assertThat(blob)\n+      .hasSize(2)\n+      .containsEntry(\"using\", \"css selector\")\n+      .containsEntry(\"value\", \"#one\\\\ two\");\n   }\n-\n-  private interface AllDriver extends SearchContext {\n-    // Place holder\n-  }\n-\n }",
      "parent_sha": "f07a95cbaf12bbbe23f87b0989d5ba3d7669e179"
    }
  },
  {
    "oid": "b17f30b5b841d29b558998b95f940458455b534c",
    "message": "Make the jettyMaxThreads parameter actually be effective\n\nCalling server.start() before setting a new thread pool caused the new thread\npool to be ignored. Moved the call to server.start() to after the thread pool\nhas been configured, which now makes the server use the newly configured thread\npool instead of the default one.\n\nFixes \"Selenium grid Jetty server thread count cannot be configured by\nparameter jettyMaxThreads\":\n\n\thttps://code.google.com/p/selenium/issues/detail?id=7240\n\nSigned-off-by: Andreas Tolfsen <ato@mozilla.com>",
    "date": "2014-08-08T11:13:21Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/b17f30b5b841d29b558998b95f940458455b534c",
    "details": {
      "sha": "17a3ef7d40e0005231eee69d826aa0a6ae68ef95",
      "filename": "java/server/src/org/openqa/grid/web/Hub.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/b17f30b5b841d29b558998b95f940458455b534c/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2FHub.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/b17f30b5b841d29b558998b95f940458455b534c/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2FHub.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2FHub.java?ref=b17f30b5b841d29b558998b95f940458455b534c",
      "patch": "@@ -164,12 +164,12 @@ public String getHost() {\n \n   public void start() throws Exception {\n     initServer();\n-    server.start();\n     if (maxThread>0){\n       QueuedThreadPool pool = new QueuedThreadPool();\n       pool.setMaxThreads(maxThread);\n       server.setThreadPool(pool);\n     }\n+    server.start();\n   }\n \n   public void stop() throws Exception {",
      "parent_sha": "43db645664da155f9dbd970df931b8ac6404dd72"
    }
  },
  {
    "oid": "bdec349760c778ac34b0991f638b16db61841ae5",
    "message": "more fixes\n\nr4695",
    "date": "2008-01-23T20:11:04Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/bdec349760c778ac34b0991f638b16db61841ae5",
    "details": {
      "sha": "e9738e5abb58bdc0b4763b049b0e23162cbe91a2",
      "filename": "tests/src/test/java/org/openqa/selenium/AbstractTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/bdec349760c778ac34b0991f638b16db61841ae5/tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FAbstractTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/bdec349760c778ac34b0991f638b16db61841ae5/tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FAbstractTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FAbstractTest.java?ref=bdec349760c778ac34b0991f638b16db61841ae5",
      "patch": "@@ -25,7 +25,11 @@ public void beforeTest() throws Exception {\n     @BeforeMethod\n     public void beforeMethod() throws Exception {\n         String browser = System.getProperty(\"browser\", \"FIREFOX2\");\n-        String browserLauncher = System.getProperty(\"browser.\" + browser, \"*firefox\");\n+        String browserLauncher = System.getProperty(\"browsers.\" + browser);\n+        if (browserLauncher == null && browser.equals(\"FIREFOX2\")) {\n+            // simple default which helps when running tests outside of maven\n+            browserLauncher = \"*firefox\";\n+        }\n \n         s = new DefaultSelenium(\"localhost\", 4444, browserLauncher, \"http://localhost:4444\");\n         s.start();",
      "parent_sha": "10f92d674819271fbbbd9d36b9a40c6928791505"
    }
  },
  {
    "oid": "545a8aab80cc247e8a5a1364d2df2bf7eec1b96a",
    "message": "Make output of info command more readable",
    "date": "2020-05-20T07:40:07Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/545a8aab80cc247e8a5a1364d2df2bf7eec1b96a",
    "details": {
      "sha": "c8cffdfe206772211d05bf1f966342bd6343855a",
      "filename": "java/server/src/org/openqa/selenium/grid/commands/InfoCommand.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/545a8aab80cc247e8a5a1364d2df2bf7eec1b96a/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fcommands%2FInfoCommand.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/545a8aab80cc247e8a5a1364d2df2bf7eec1b96a/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fcommands%2FInfoCommand.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fcommands%2FInfoCommand.java?ref=545a8aab80cc247e8a5a1364d2df2bf7eec1b96a",
      "patch": "@@ -140,8 +140,13 @@ private String readContent(String path) throws IOException {\n         } else if (\"```\".equals(line)) {\n           inCode = !inCode;\n         } else {\n+          if (line.startsWith(\"=\")) {\n+            formattedText.append(\"\\n\");\n+          }\n           formattedText.append(line);\n-          if (inCode || line.startsWith(\"* \")) {\n+          if (inCode ||\n+            line.matches(\"^\\\\s*\\\\*.*\") ||\n+            line.matches(\"^\\\\s*\\\\d+\\\\..*\")) {\n             formattedText.append(\"\\n\");\n           } else {\n             formattedText.append(\" \");",
      "parent_sha": "09315448aff0a8b5686449f3647e1d795afeb451"
    }
  },
  {
    "oid": "e14ab1feea04ff0b074e4f4c6a2f41ecfdf651d1",
    "message": "[java] Adding waits to upload test because it's a slow action",
    "date": "2018-11-23T21:40:25Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/e14ab1feea04ff0b074e4f4c6a2f41ecfdf651d1",
    "details": {
      "sha": "d97666e7408a7be2c66c088bbdb5d1a157bfa0cd",
      "filename": "java/client/test/org/openqa/selenium/environment/webserver/AppServerTestBase.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/e14ab1feea04ff0b074e4f4c6a2f41ecfdf651d1/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fenvironment%2Fwebserver%2FAppServerTestBase.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/e14ab1feea04ff0b074e4f4c6a2f41ecfdf651d1/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fenvironment%2Fwebserver%2FAppServerTestBase.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fenvironment%2Fwebserver%2FAppServerTestBase.java?ref=e14ab1feea04ff0b074e4f4c6a2f41ecfdf651d1",
      "patch": "@@ -32,6 +32,7 @@\n import org.openqa.selenium.remote.http.HttpMethod;\n import org.openqa.selenium.remote.http.HttpRequest;\n import org.openqa.selenium.remote.http.HttpResponse;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n import org.openqa.selenium.testing.drivers.WebDriverBuilder;\n \n import java.io.File;\n@@ -141,8 +142,8 @@ public void uploadsFile() throws Throwable {\n     Thread.sleep(50);\n \n     driver.switchTo().frame(\"upload_target\");\n-    WebElement body = driver.findElement(By.xpath(\"//body\"));\n-    assertEquals(FILE_CONTENTS, body.getText());\n+    new WebDriverWait(driver, 10).until(\n+        d -> d.findElement(By.xpath(\"//body\")).getText().equals(FILE_CONTENTS));\n   }\n \n   private void assertUrlHasContentType(String url, String appcacheMimeType) throws IOException {",
      "parent_sha": "6afcae4649aeb5cd0f8093caf894fa8cd76dd0eb"
    }
  },
  {
    "oid": "6aac5f3674fc68298ad06c51a0512cedc98330c6",
    "message": "Correctly set the URI of a JRE-backed HttpRequest\n\nWe were previously using the full request URI, which includes any\nfragments or query strings. This was incorrect. Oops.",
    "date": "2020-01-04T10:08:48Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/6aac5f3674fc68298ad06c51a0512cedc98330c6",
    "details": {
      "sha": "a4838e344ea58671744000f16b5e84b5ce4709db",
      "filename": "java/server/src/org/openqa/selenium/jre/server/JreMessages.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/6aac5f3674fc68298ad06c51a0512cedc98330c6/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fjre%2Fserver%2FJreMessages.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/6aac5f3674fc68298ad06c51a0512cedc98330c6/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fjre%2Fserver%2FJreMessages.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fjre%2Fserver%2FJreMessages.java?ref=6aac5f3674fc68298ad06c51a0512cedc98330c6",
      "patch": "@@ -31,7 +31,7 @@ class JreMessages {\n   static HttpRequest asRequest(HttpExchange exchange) {\n     HttpRequest request = new HttpRequest(\n       HttpMethod.valueOf(exchange.getRequestMethod()),\n-      exchange.getRequestURI().toString());\n+      exchange.getRequestURI().getPath());\n \n     String query = exchange.getRequestURI().getQuery();\n     if (query != null) {",
      "parent_sha": "ab6d09dfdf9c3955df37f88695dca4ffc812e8bf"
    }
  },
  {
    "oid": "84fad5e827c672ee08ba34f83cfebc24446d9693",
    "message": "fix bug preventing setting a timeout because the capability response is null",
    "date": "2021-09-22T19:00:19Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/84fad5e827c672ee08ba34f83cfebc24446d9693",
    "details": {
      "sha": "b0a5f6ba12a35cba4d7aedf23f459c836573b736",
      "filename": "java/src/org/openqa/selenium/remote/AbstractDriverOptions.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/84fad5e827c672ee08ba34f83cfebc24446d9693/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2FAbstractDriverOptions.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/84fad5e827c672ee08ba34f83cfebc24446d9693/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2FAbstractDriverOptions.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2FAbstractDriverOptions.java?ref=84fad5e827c672ee08ba34f83cfebc24446d9693",
      "patch": "@@ -139,11 +139,13 @@ public Map<String, Object> asMap() {\n   private Map<String, Number> getTimeouts() {\n     Map<String, Number> newTimeouts = new HashMap<>();\n     Object raw = getCapability(TIMEOUTS);\n-    ((Map<?, ?>) raw).forEach((key, value) -> {\n-      if (key instanceof String && value instanceof Number) {\n-        newTimeouts.put((String) key, (Number) value);\n-      }\n-    });\n+    if (raw != null) {\n+      ((Map<?, ?>) raw).forEach((key, value) -> {\n+        if (key instanceof String && value instanceof Number) {\n+          newTimeouts.put((String) key, (Number) value);\n+        }\n+      });\n+    }\n       return newTimeouts;\n   }\n }",
      "parent_sha": "9976521655ea84d06e2aa4172ceeb0ac471764b7"
    }
  },
  {
    "oid": "31a5afbc8fb87418513175b4c62173c1cad5dd7e",
    "message": "AlexeiBarantsev, on behalf of AlexandrSavchuk: Getting rid of NPE if invalid servlet class name is specified. Fixes issue 4433\n\nr17964",
    "date": "2012-10-14T04:39:12Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/31a5afbc8fb87418513175b4c62173c1cad5dd7e",
    "details": {
      "sha": "f25db4ea42d9a0e8fc25eeb098669d04bf02291d",
      "filename": "java/server/src/org/openqa/grid/web/Hub.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/31a5afbc8fb87418513175b4c62173c1cad5dd7e/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2FHub.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/31a5afbc8fb87418513175b4c62173c1cad5dd7e/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2FHub.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2FHub.java?ref=31a5afbc8fb87418513175b4c62173c1cad5dd7e",
      "patch": "@@ -115,7 +115,7 @@ public Hub(GridHubConfiguration config) {\n \r\n     for (String s : config.getServlets()) {\r\n       Class<? extends Servlet> servletClass = ExtraServletUtil.createServlet(s);\r\n-      if (s != null) {\r\n+      if (servletClass != null) {\r\n         String path = \"/grid/admin/\" + servletClass.getSimpleName() + \"/*\";\r\n         log.info(\"binding \" + servletClass.getCanonicalName() + \" to \" + path);\r\n         addServlet(path, servletClass);\r",
      "parent_sha": "5eb69385eea486c64bc00657c158680537b744e7"
    }
  },
  {
    "oid": "faad5d2dd28150b722b26a6e84509ff434124d43",
    "message": "SimonStewart: wdQuit causes memory corruption. Backing out the change in the Java code so that we get a green build again.\n\nr7056",
    "date": "2009-08-11T11:02:42Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/faad5d2dd28150b722b26a6e84509ff434124d43",
    "details": {
      "sha": "040616a0302b9570881f8013189cc2033d235bd1",
      "filename": "jobbie/src/java/org/openqa/selenium/ie/InternetExplorerDriver.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/faad5d2dd28150b722b26a6e84509ff434124d43/jobbie%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fie%2FInternetExplorerDriver.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/faad5d2dd28150b722b26a6e84509ff434124d43/jobbie%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fie%2FInternetExplorerDriver.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/jobbie%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fie%2FInternetExplorerDriver.java?ref=faad5d2dd28150b722b26a6e84509ff434124d43",
      "patch": "@@ -89,7 +89,10 @@ public void close() {\n     }\r\n     \r\n     public void quit() {\r\n-      lib.wdQuit(driver);\r\n+      lib.wdClose(driver);\r\n+//      lib.wdQuit(driver);\r\n+//      lib.wdFreeDriver(driver);\r\n+//      driver = null;\r\n     }\r\n \r\n   public Set<String> getWindowHandles() {\r",
      "parent_sha": "6f3d9851152d4b7838135a06c2dfb90d133f64e1"
    }
  },
  {
    "oid": "7a50ef9f7e75ec35725cd1b9cc587ad584d9e7c0",
    "message": "MichaelTamm: ExecutingJavascriptTest.testShouldBeAbleToExecuteABigChunkOfJavascriptCode() should now work in all test suites\n\nr7707",
    "date": "2009-11-24T23:06:49Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/7a50ef9f7e75ec35725cd1b9cc587ad584d9e7c0",
    "details": {
      "sha": "62083387725ebbfe32ad3aea8fbda283bd561f74",
      "filename": "common/test/java/org/openqa/selenium/ExecutingJavascriptTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/7a50ef9f7e75ec35725cd1b9cc587ad584d9e7c0/common%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FExecutingJavascriptTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/7a50ef9f7e75ec35725cd1b9cc587ad584d9e7c0/common%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FExecutingJavascriptTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/common%2Ftest%2Fjava%2Forg%2Fopenqa%2Fselenium%2FExecutingJavascriptTest.java?ref=7a50ef9f7e75ec35725cd1b9cc587ad584d9e7c0",
      "patch": "@@ -363,7 +363,12 @@ public void testShouldBeAbleToExecuteABigChunkOfJavascriptCode() throws IOExcept\n     driver.get(javascriptPage);\n \n     File jqueryFile = new File(\"common/src/web/jquery-1.2.6.min.js\");\n-    assertTrue(jqueryFile.getAbsolutePath() + \" should exist.\", jqueryFile.exists());\n+    if(!jqueryFile.isFile()) {\n+      jqueryFile = new File(\"../common/src/web/jquery-1.2.6.min.js\");\n+      if(!jqueryFile.isFile()) {\n+        jqueryFile = new File(\"../../common/src/web/jquery-1.2.6.min.js\");\n+      }\n+    }\n     String jquery = FileUtils.readFileToString(jqueryFile, \"US-ASCII\");\n     assertTrue(\"The javascript code should be at least 50 KB.\", jquery.length() > 50000);\n     // This should not throw an exception ...",
      "parent_sha": "a92f9d58c846000b1f9bcc0c12bc54abf96c1180"
    }
  },
  {
    "oid": "424ff53ecd8fed52cad08c04f64194ece5c73d05",
    "message": "Delete unusued tests",
    "date": "2020-12-09T14:53:43Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/424ff53ecd8fed52cad08c04f64194ece5c73d05",
    "details": {
      "sha": "87f95ac314a3f8b62ff321159f382e6ed3550ecd",
      "filename": "java/client/test/org/openqa/selenium/ByTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 57,
      "changes": 65,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/424ff53ecd8fed52cad08c04f64194ece5c73d05/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FByTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/424ff53ecd8fed52cad08c04f64194ece5c73d05/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FByTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FByTest.java?ref=424ff53ecd8fed52cad08c04f64194ece5c73d05",
      "patch": "@@ -17,6 +17,14 @@\n \n package org.openqa.selenium;\n \n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.openqa.selenium.json.Json;\n+import org.openqa.selenium.testing.UnitTests;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n@@ -31,13 +39,6 @@\n import static org.openqa.selenium.By.ByXPath;\n import static org.openqa.selenium.json.Json.MAP_TYPE;\n \n-import java.util.List;\n-import java.util.Map;\n-import org.junit.Test;\n-import org.junit.experimental.categories.Category;\n-import org.openqa.selenium.json.Json;\n-import org.openqa.selenium.testing.UnitTests;\n-\n @Category(UnitTests.class)\n public class ByTest {\n \n@@ -64,30 +65,6 @@ public void shouldUseXpathLocateElementsByXpath() {\n     verify(driver).findElements(By.xpath(\".//*[@name = 'peas']\"));\n     verifyNoMoreInteractions(driver);\n   }\n-//\n-//  @Test\n-//  public void shouldUseXPathToFindByNameIfDriverDoesNotImplementFindsByName() {\n-//    final OnlyXPath driver = mock(OnlyXPath.class);\n-//\n-//    By.name(\"cheese\").findElement(driver);\n-//    By.name(\"peas\").findElements(driver);\n-//\n-//    verify(driver).findElementByXPath(\".//*[@name = 'cheese']\");\n-//    verify(driver).findElementsByXPath(\".//*[@name = 'peas']\");\n-//    verifyNoMoreInteractions(driver);\n-//  }\n-\n-//  @Test\n-//  public void fallsBackOnXPathIfContextDoesNotImplementFallsById() {\n-//    OnlyXPath driver = mock(OnlyXPath.class);\n-//\n-//    By.id(\"foo\").findElement(driver);\n-//    By.id(\"bar\").findElements(driver);\n-//\n-//    verify(driver).findElementByXPath(\".//*[@id = 'foo']\");\n-//    verify(driver).findElementsByXPath(\".//*[@id = 'bar']\");\n-//    verifyNoMoreInteractions(driver);\n-//  }\n \n   @Test\n   public void doesNotUseXPathIfContextFindsById() {\n@@ -113,18 +90,6 @@ public void searchesByTagNameIfSupported() {\n     verifyNoMoreInteractions(context);\n   }\n \n-//  @Test\n-//  public void searchesByXPathIfCannotFindByTagName() {\n-//    OnlyXPath context = mock(OnlyXPath.class);\n-//\n-//    By.tagName(\"foo\").findElement(context);\n-//    By.tagName(\"bar\").findElements(context);\n-//\n-//    verify(context).findElementByXPath(\".//foo\");\n-//    verify(context).findElementsByXPath(\".//bar\");\n-//    verifyNoMoreInteractions(context);\n-//  }\n-\n   @Test\n   public void searchesByClassNameIfSupported() {\n     AllDriver context = mock(AllDriver.class);\n@@ -137,20 +102,6 @@ public void searchesByClassNameIfSupported() {\n     verifyNoMoreInteractions(context);\n   }\n \n-//  @Test\n-//  public void searchesByXPathIfFindingByClassNameNotSupported() {\n-//    OnlyXPath context = mock(OnlyXPath.class);\n-//\n-//    By.className(\"foo\").findElement(context);\n-//    By.className(\"bar\").findElements(context);\n-//\n-//    verify(context).findElementByXPath(\n-//        \".//*[contains(concat(' ',normalize-space(@class),' '),' foo ')]\");\n-//    verify(context).findElementsByXPath(\n-//        \".//*[contains(concat(' ',normalize-space(@class),' '),' bar ')]\");\n-//    verifyNoMoreInteractions(context);\n-//  }\n-\n   @Test\n   public void innerClassesArePublicSoThatTheyCanBeReusedElsewhere() {\n     assertThat(new ByXPath(\"a\").toString()).isEqualTo(\"By.xpath: a\");",
      "parent_sha": "f6715f20e3d708b3901847390885891ef019fda1"
    }
  },
  {
    "oid": "f4d445112d1cd778bd4ee2756beb04b83dc1967a",
    "message": "Tidy up getting headers in HttpMessage\n\nThis makes `getHeaders(String)` properly case-insensitive.",
    "date": "2018-08-07T17:31:04Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/f4d445112d1cd778bd4ee2756beb04b83dc1967a",
    "details": {
      "sha": "0372865b678d665e0aaeca01618b2d50c22589a2",
      "filename": "java/client/src/org/openqa/selenium/remote/http/HttpMessage.java",
      "status": "modified",
      "additions": 17,
      "deletions": 7,
      "changes": 24,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/f4d445112d1cd778bd4ee2756beb04b83dc1967a/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FHttpMessage.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/f4d445112d1cd778bd4ee2756beb04b83dc1967a/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FHttpMessage.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FHttpMessage.java?ref=f4d445112d1cd778bd4ee2756beb04b83dc1967a",
      "patch": "@@ -33,8 +33,10 @@\n import java.io.InputStream;\n import java.nio.charset.Charset;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.stream.Collectors;\n \n class HttpMessage {\n \n@@ -69,21 +71,29 @@ public Iterable<String> getHeaderNames() {\n   }\n \n   public Iterable<String> getHeaders(String name) {\n-    return headers.get(name);\n-  }\n-\n-  public String getHeader(String name) {\n     return headers.entries().stream()\n         .filter(e -> Objects.nonNull(e.getKey()))\n         .filter(e -> e.getKey().equalsIgnoreCase(name.toLowerCase()))\n         .map(Map.Entry::getValue)\n-        .findFirst()\n-        .orElse(null);\n+        .collect(Collectors.toList());\n+  }\n+\n+  public String getHeader(String name) {\n+    Iterable<String> initialHeaders = getHeaders(name);\n+    if (initialHeaders == null) {\n+      return null;\n+    }\n+\n+    Iterator<String> headers = initialHeaders.iterator();\n+    if (headers.hasNext()) {\n+      return headers.next();\n+    }\n+    return null;\n   }\n \n   public void setHeader(String name, String value) {\n     removeHeader(name);\n-    headers.put(name, value);\n+    addHeader(name, value);\n   }\n \n   public void addHeader(String name, String value) {",
      "parent_sha": "20e8ee0e09d53b1d340d6c475d9ac6a68ec8060a"
    }
  },
  {
    "oid": "d92b0ae3d77f0b422964b6b24d090c73872a9cac",
    "message": "[java] do not send driver logs to console by default (#12136)",
    "date": "2023-06-03T07:15:59Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/d92b0ae3d77f0b422964b6b24d090c73872a9cac",
    "details": {
      "sha": "d129f924d728437240d36a3827c9d961d1bd0b08",
      "filename": "java/src/org/openqa/selenium/remote/service/DriverService.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/d92b0ae3d77f0b422964b6b24d090c73872a9cac/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fservice%2FDriverService.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/d92b0ae3d77f0b422964b6b24d090c73872a9cac/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fservice%2FDriverService.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fservice%2FDriverService.java?ref=d92b0ae3d77f0b422964b6b24d090c73872a9cac",
      "patch": "@@ -465,7 +465,9 @@ protected OutputStream getLogOutput(String logProperty) {\n         }\n \n         if (logLocation == null) {\n-          return System.err;\n+          LOG.info(\"Driver logs no longer sent to console by default; \" +\n+            \"https://www.selenium.dev/documentation/webdriver/drivers/service/#setting-log-output\");\n+          return ByteStreams.nullOutputStream();\n         }\n \n         switch (logLocation) {",
      "parent_sha": "7e198932c15a8b0f8ef672a49acf82025603d22c"
    }
  },
  {
    "oid": "f79eb9cbf24ee3f49002b7a55f3719bd31825f1e",
    "message": "AlexeiBarantsev: Fixing test after changing the number of divs on the page (wouldn't it be better to create a new page again for a new test?..)\n\nr14617",
    "date": "2011-11-08T21:08:24Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/f79eb9cbf24ee3f49002b7a55f3719bd31825f1e",
    "details": {
      "sha": "b81ce0ea3c0ba43b92219690085869da36c20371",
      "filename": "java/client/test/org/openqa/selenium/XPathElementFindingTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/f79eb9cbf24ee3f49002b7a55f3719bd31825f1e/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FXPathElementFindingTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/f79eb9cbf24ee3f49002b7a55f3719bd31825f1e/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FXPathElementFindingTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FXPathElementFindingTest.java?ref=f79eb9cbf24ee3f49002b7a55f3719bd31825f1e",
      "patch": "@@ -62,7 +62,7 @@ public void testShouldFindElementsByXPath() {\n     driver.get(pages.xhtmlTestPage);\n     List<WebElement> divs = driver.findElements(By.xpath(\"//div\"));\n \n-    assertThat(divs.size(), equalTo(10));\n+    assertThat(divs.size(), equalTo(12));\n   }\n \n   @Ignore(SELENESE)",
      "parent_sha": "2fd8db3bd7f0aa5833497bdbf11517dfc8bf28b6"
    }
  },
  {
    "oid": "eb76902e06b4de58e009f998be9dc25f2f706b4e",
    "message": "Make BuckBuild use buckw\n\nThis reduces the number of places that need to know how\nto download and invoke buck to just the shell script. Not\ntested on Windows, but I eyeballed it, and I reckon it\nhas an excellent chance of not failing.",
    "date": "2018-09-01T14:40:13Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/eb76902e06b4de58e009f998be9dc25f2f706b4e",
    "details": {
      "sha": "8309b6882f7b13303f1297e101998755a7afc34f",
      "filename": "java/client/test/org/openqa/selenium/BuckBuild.java",
      "status": "modified",
      "additions": 5,
      "deletions": 68,
      "changes": 73,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/eb76902e06b4de58e009f998be9dc25f2f706b4e/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FBuckBuild.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/eb76902e06b4de58e009f998be9dc25f2f706b4e/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FBuckBuild.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FBuckBuild.java?ref=eb76902e06b4de58e009f998be9dc25f2f706b4e",
      "patch": "@@ -18,23 +18,18 @@\n package org.openqa.selenium;\n \n import static com.google.common.base.StandardSystemProperty.LINE_SEPARATOR;\n-import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.junit.Assert.assertTrue;\n import static org.openqa.selenium.Platform.WINDOWS;\n import static org.openqa.selenium.testing.DevMode.isInDevMode;\n \n import com.google.common.base.Preconditions;\n import com.google.common.base.Splitter;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.hash.HashCode;\n-import com.google.common.hash.Hashing;\n \n import org.openqa.selenium.os.CommandLine;\n-import org.openqa.selenium.os.ExecutableFinder;\n import org.openqa.selenium.testing.InProject;\n \n import java.io.IOException;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.List;\n@@ -71,7 +66,7 @@ public Path go() throws IOException {\n     builder.add(\"build\", \"--config\", \"color.ui=never\", target);\n \n     ImmutableList<String> command = builder.build();\n-    CommandLine commandLine = new CommandLine(command.toArray(new String[command.size()]));\n+    CommandLine commandLine = new CommandLine(command.toArray(new String[0]));\n     commandLine.copyOutputTo(System.err);\n     commandLine.execute();\n \n@@ -124,68 +119,10 @@ private Path findOutput(Path projectRoot) throws IOException {\n   }\n \n   private void findBuck(Path projectRoot, ImmutableList.Builder<String> builder) throws IOException {\n-    Path noBuckCheck = projectRoot.resolve(\".nobuckcheck\");\n-\n-    // If there's a .nobuckcheck in the root of the file, and we can execute \"buck\", then assume\n-    // that the developer knows what they're doing. Ha! Ahaha! Ahahahaha!\n-    if (Files.exists(noBuckCheck)) {\n-      String buckCommand = new ExecutableFinder().find(\"buck\");\n-      if (buckCommand != null) {\n-        builder.add(buckCommand);\n-        return;\n-      }\n-    }\n-\n-    downloadBuckPexIfNecessary(builder);\n-  }\n-\n-  private void downloadBuckPexIfNecessary(ImmutableList.Builder<String> builder)\n-    throws IOException {\n-    Path projectRoot = InProject.locate(\"Rakefile\").getParent();\n-    String buckVersion = new String(Files.readAllBytes(projectRoot.resolve(\".buckversion\"))).trim();\n-\n-    Path pex = projectRoot.resolve(\"buck-out/crazy-fun/\" + buckVersion + \"/buck.pex\");\n-\n-    String expectedHash = new String(Files.readAllBytes(projectRoot.resolve(\".buckhash\"))).trim();\n-    HashCode md5 = Files.exists(pex) ?\n-                   Hashing.md5().hashBytes(Files.readAllBytes(pex)) :\n-                   HashCode.fromString(\"aa\");  // So we have a non-null value\n-\n-    if (!Files.exists(pex) || !expectedHash.equals(md5.toString())) {\n-      log.warning(\"Downloading PEX\");\n+    Path buckw = projectRoot.resolve(Platform.getCurrent().is(WINDOWS) ? \"buckw.bat\" : \"buckw\");\n \n-      if (!Files.exists(pex.getParent())) {\n-        Files.createDirectories(pex.getParent());\n-      }\n-\n-      URL url = new URL(String.format(\n-          \"https://github.com/SeleniumHQ/buck/releases/download/buck-release-%s/buck.pex\",\n-          buckVersion));\n-      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-      connection.setInstanceFollowRedirects(true);\n-      Files.copy(connection.getInputStream(), pex, REPLACE_EXISTING);\n-      // Do our best to make this executable\n-      pex.toFile().setExecutable(true);\n-    }\n-\n-    md5 = Hashing.md5().hashBytes(Files.readAllBytes(pex));\n-    if (!expectedHash.equals(md5.toString())) {\n-      throw new WebDriverException(\"Unable to confirm that download is valid\");\n-    }\n-\n-    if (Platform.getCurrent().is(WINDOWS)) {\n-      String python = new ExecutableFinder().find(\"python2\");\n-      if (python == null) {\n-        python = new ExecutableFinder().find(\"python\");\n-      }\n-      Preconditions.checkNotNull(python, \"Unable to find python executable\");\n-      builder.add(python);\n-    }\n-\n-    builder.add(pex.toAbsolutePath().toString());\n-  }\n+    assertTrue(\"Unable to find buckw: \" + buckw, Files.exists(buckw));\n \n-  public static void main(String[] args) throws IOException {\n-    new BuckBuild().of(\"se3-server\").go();\n+    builder.add(buckw.toAbsolutePath().toString());\n   }\n }",
      "parent_sha": "a20bd51907b10fa5f26c0216bacf3d2797e8a3ef"
    }
  },
  {
    "oid": "6f789b2354c7197da158fbc5610ce99a24972e7b",
    "message": "[java] Deleting unused method in test base class",
    "date": "2018-10-11T18:40:32Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/6f789b2354c7197da158fbc5610ce99a24972e7b",
    "details": {
      "sha": "30ae23916080bd33bcf7bce41a12ecb68bd40752",
      "filename": "java/client/test/org/openqa/selenium/testing/JUnit4TestBase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/6f789b2354c7197da158fbc5610ce99a24972e7b/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2FJUnit4TestBase.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/6f789b2354c7197da158fbc5610ce99a24972e7b/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2FJUnit4TestBase.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2FJUnit4TestBase.java?ref=6f789b2354c7197da158fbc5610ce99a24972e7b",
      "patch": "@@ -37,7 +37,6 @@\n import org.openqa.selenium.environment.InProcessTestEnvironment;\n import org.openqa.selenium.environment.TestEnvironment;\n import org.openqa.selenium.environment.webserver.AppServer;\n-import org.openqa.selenium.WrapsDriver;\n import org.openqa.selenium.remote.RemoteWebDriver;\n import org.openqa.selenium.support.ui.Wait;\n import org.openqa.selenium.support.ui.WebDriverWait;\n@@ -49,7 +48,7 @@\n import java.util.stream.Stream;\n \n @RunWith(SeleniumTestRunner.class)\n-public abstract class JUnit4TestBase implements WrapsDriver {\n+public abstract class JUnit4TestBase {\n \n   private static final Logger logger = Logger.getLogger(JUnit4TestBase.class.getName());\n \n@@ -226,10 +225,6 @@ public void evaluate() throws Throwable {\n     }\n   }\n \n-  public WebDriver getWrappedDriver() {\n-    return storedDriver.get();\n-  }\n-\n   private void createDriver() {\n     driver = actuallyCreateDriver();\n     wait = new WebDriverWait(driver, 10);",
      "parent_sha": "01906b5a65c0056d54bb1fae39fee880efd36256"
    }
  },
  {
    "oid": "809b6aae356a1e6ca9ec2bc0d868eb0d607c9518",
    "message": "PatrickLightbody reverting r8711 temporarily until I can better understand how this affects the mac. It seems fine when running vanilla WebDriver, but BrowserMob's mac driver definitely is showing strange artifacts caused by this change.\n\nr8712",
    "date": "2010-04-18T06:51:57Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/809b6aae356a1e6ca9ec2bc0d868eb0d607c9518",
    "details": {
      "sha": "ac304eaf2d06d684186379371abb7dedca80d5c0",
      "filename": "firefox/src/java/org/openqa/selenium/firefox/FirefoxBinary.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/809b6aae356a1e6ca9ec2bc0d868eb0d607c9518/firefox%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxBinary.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/809b6aae356a1e6ca9ec2bc0d868eb0d607c9518/firefox%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxBinary.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/firefox%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxBinary.java?ref=809b6aae356a1e6ca9ec2bc0d868eb0d607c9518",
      "patch": "@@ -61,6 +61,7 @@ protected boolean isOnLinux() {\n \n   public void startProfile(FirefoxProfile profile, String... commandLineFlags) throws IOException {\n     String profileAbsPath = profile.getProfileDir().getAbsolutePath();\n+    setEnvironmentProperty(\"XRE_PROFILE_PATH\", profileAbsPath);\n     setEnvironmentProperty(\"MOZ_NO_REMOTE\", \"1\");\n \n     if (isOnLinux()\n@@ -70,8 +71,6 @@ public void startProfile(FirefoxProfile profile, String... commandLineFlags) thr\n \n     List<String> commands = new ArrayList<String>();\n     commands.add(getExecutable().getPath());\n-    commands.add(\"-profile\");\n-    commands.add(profileAbsPath);\n     commands.add(\"--verbose\");\n     commands.addAll(Arrays.asList(commandLineFlags));\n     ProcessBuilder builder = new ProcessBuilder(commands);",
      "parent_sha": "446835c42412e4950187b7b651795e9500cf466a"
    }
  },
  {
    "oid": "d6a1e7ec91118852e1767067d150f9486319230e",
    "message": "Partially revert 2edd481 since it can cause the entire hub to deadlock if BaseRemoteProxy#getStatus blocks.",
    "date": "2013-09-04T09:15:07Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/d6a1e7ec91118852e1767067d150f9486319230e",
    "details": {
      "sha": "115d7d2a56d44ba69159010bdc104f58e3f601ac",
      "filename": "java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/d6a1e7ec91118852e1767067d150f9486319230e/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FBaseRemoteProxy.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/d6a1e7ec91118852e1767067d150f9486319230e/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FBaseRemoteProxy.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FBaseRemoteProxy.java?ref=d6a1e7ec91118852e1767067d150f9486319230e",
      "patch": "@@ -336,12 +336,7 @@ public URL getRemoteHost() {\n \n   public TestSession getNewSession(Map<String, Object> requestedCapability) {\n     log.info(\"Trying to create a new session on node \" + this);\n-    try {\n-      getStatus();\n-    } catch (GridException ex) {\n-      log.info(\"Node \" + this + \" is down or doesn't recognize the /wd/hub/status request\");\n-      return null;\n-    }\n+\n     if (!hasCapability(requestedCapability)) {\n       log.info(\"Node \" + this + \" has no matching capability\");\n       return null;",
      "parent_sha": "929c9332024bef9cfef25b4de3dedcd53a5aafdc"
    }
  },
  {
    "oid": "dbae686b7bd2fdde05dda2c78e30fb8164d4b652",
    "message": "add some tests\n\nr2832",
    "date": "2006-07-27T16:19:52Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/dbae686b7bd2fdde05dda2c78e30fb8164d4b652",
    "details": {
      "sha": "bdd6f3edc624bea54027494b9691c96a720f60aa",
      "filename": "clients/java/src/test/java/com/thoughtworks/selenium/TestSomeStuff.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/dbae686b7bd2fdde05dda2c78e30fb8164d4b652/clients%2Fjava%2Fsrc%2Ftest%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FTestSomeStuff.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/dbae686b7bd2fdde05dda2c78e30fb8164d4b652/clients%2Fjava%2Fsrc%2Ftest%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FTestSomeStuff.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/clients%2Fjava%2Fsrc%2Ftest%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FTestSomeStuff.java?ref=dbae686b7bd2fdde05dda2c78e30fb8164d4b652",
      "patch": "@@ -1,10 +1,14 @@\n package com.thoughtworks.selenium;\r\n \r\n public class TestSomeStuff extends SeleneseTestCase {\r\n-    public void xtestTextArea() throws Throwable {\r\n+    public void testTextArea() throws Throwable {\r\n         selenium.setContext(\"Test text area\", \"error\");\r\n         selenium.open(\"/selenium-server/tests/html/test_verifications.html\");\r\n         String s = selenium.getText(\"theTextarea\");\r\n+        System.out.println(\"selenium.getElementHeight=\" + selenium.getElementHeight(\"theTextarea\"));\r\n+        System.out.println(\"selenium.getElementWidth=\" + selenium.getElementWidth(\"theTextarea\"));\r\n+        System.out.println(\"selenium.getElementPositionLeft=\" + selenium.getElementPositionLeft(\"theTextarea\"));\r\n+        System.out.println(\"selenium.getElementPositionTop=\" + selenium.getElementPositionTop(\"theTextarea\"));\r\n         boolean b = \"Line 1\\nLine 2\".equals(s)  // IE\r\n         || \"Line 1 Line 2\".equals(s);           // firefox\r\n         assertTrue(\"text area\", b);\r\n@@ -26,7 +30,7 @@ public void xtestTypeHang() throws Throwable{\n         selenium.click(\"btnG\");\r\n         selenium.waitForPageToLoad(\"50000\");\r\n     }    \r\n-    public void testCallxtestTypeHang() throws Throwable {\r\n+    public void xtestCallxtestTypeHang() throws Throwable {\r\n         xtestTypeHang();\r\n         xtestTypeHang();\r\n         xtestTypeHang();\r",
      "parent_sha": "f7bcad724100781458e05a0c3c48a2a2c0486327"
    }
  },
  {
    "oid": "95951f829a9bdfd7a6e142fb56e7fd726e18237b",
    "message": "LukeIS on behalf of RossPatterson: better error message reporting when browser launch fails. Fixes Issue 3043\n\nr18249",
    "date": "2012-12-04T19:10:32Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/95951f829a9bdfd7a6e142fb56e7fd726e18237b",
    "details": {
      "sha": "fb36962583e204941ad1a224ff9079535ca294fd",
      "filename": "java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/95951f829a9bdfd7a6e142fb56e7fd726e18237b/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumDriverResourceHandler.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/95951f829a9bdfd7a6e142fb56e7fd726e18237b/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumDriverResourceHandler.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumDriverResourceHandler.java?ref=95951f829a9bdfd7a6e142fb56e7fd726e18237b",
      "patch": "@@ -441,13 +441,13 @@ public String doCommand(String cmd, Vector<String> values, String sessionId, Htt\n           setDomain(sessionId, values.get(1));\n           results = \"OK,\" + sessionId;\n         } catch (RemoteCommandException rce) {\n-          results = \"Failed to start new browser session: \" + rce.getMessage();\n+          results = \"Failed to start new browser session: \" + rce;\n         } catch (InvalidBrowserExecutableException ibex) {\n-          results = \"Failed to start new browser session: \" + ibex.getMessage();\n+          results = \"Failed to start new browser session: \" + ibex;\n         } catch (IllegalArgumentException iaex) {\n-          results = \"Failed to start new browser session: \" + iaex.getMessage();\n+          results = \"Failed to start new browser session: \" + iaex;\n         } catch (RuntimeException rte) {\n-          results = \"Failed to start new browser session: \" + rte.getMessage();\n+          results = \"Failed to start new browser session: \" + rte;\n         }\n         // clear out any network traffic captured but never pulled back by the last client (this\n         // feature only works with one concurrent browser, similar to PI mode)",
      "parent_sha": "6b757e9904c4302ad73e6d3af219dae34603a4ce"
    }
  },
  {
    "oid": "57dd6759f7d15f69c1a0c0b8cf75008c06a062b4",
    "message": "use XML to determine parameter counts on selenium methods\n\nr3336",
    "date": "2006-10-19T22:19:17Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/57dd6759f7d15f69c1a0c0b8cf75008c06a062b4",
    "details": {
      "sha": "e5184004afe3c72d8d5d744d14f8b0ed2ef82b0d",
      "filename": "server/src/main/java/org/openqa/selenium/server/testgenerator/XlateHtmlSeleneseToJava.java",
      "status": "modified",
      "additions": 4,
      "deletions": 21,
      "changes": 25,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/57dd6759f7d15f69c1a0c0b8cf75008c06a062b4/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Ftestgenerator%2FXlateHtmlSeleneseToJava.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/57dd6759f7d15f69c1a0c0b8cf75008c06a062b4/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Ftestgenerator%2FXlateHtmlSeleneseToJava.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Ftestgenerator%2FXlateHtmlSeleneseToJava.java?ref=57dd6759f7d15f69c1a0c0b8cf75008c06a062b4",
      "patch": "@@ -23,6 +23,7 @@ public class XlateHtmlSeleneseToJava {\n     static Set<String> generatedJavaClassNames = new HashSet<String>();\r\n     \r\n     private static Map<String, Class> funcTypes = null;\r\n+    private static Map<String, Integer> funcArgCounts = null;\r\n \r\n     static final String BEGIN_SELENESE = \">>>>>\";\r\n     static final String END_SELENESE   = \"<<<<<\";\r\n@@ -114,6 +115,7 @@ else if (fileName.indexOf(\".htm\")!=-1 && fileName.indexOf(\"Suite\")==-1) {\n     private static void initializeFuncTypes() {\r\n         if (funcTypes != null) return;\r\n         funcTypes = new HashMap<String, Class>();\r\n+        funcArgCounts = new HashMap<String, Integer>();\r\n         InputStream stream = XlateHtmlSeleneseToJava.class.getResourceAsStream(\"/core/iedoc.xml\");\r\n         if (stream==null) {\r\n             throw new RuntimeException(\"could not find /core/iedoc.xml on the class path\");\r\n@@ -125,6 +127,7 @@ private static void initializeFuncTypes() {\n                 Element function = (Element) functions.item(i);\r\n                 String funcName = function.getAttribute(\"name\");\r\n                 NodeList returnElements = function.getElementsByTagName(\"return\");\r\n+                funcArgCounts.put(funcName, function.getElementsByTagName(\"param\").getLength());\r\n                 if (returnElements.getLength() == 0) {\r\n                     funcTypes.put(funcName, void.class);\r\n                 } else {\r\n@@ -621,27 +624,7 @@ else if (op.equals(\"Ordered\")) {\n             recordFirstDomain(tokens[1]);\r\n             tokens[1] = possiblyAdjustOpenURL(tokens[1]);\r\n         }\r\n-        int expectedArgCount = 2;\r\n-        if (op.equals(\"open\")\r\n-                || op.equals(\"answerOnNextPrompt\")\r\n-                || op.equals(\"click\")\r\n-                || op.equals(\"check\")\r\n-                || op.equals(\"selectWindow\")\r\n-                || op.equals(\"selectFrame\")\r\n-                || op.equals(\"submit\")\r\n-                || op.equals(\"uncheck\")\r\n-                || op.equals(\"answerOnNextPrompt\")\r\n-                || op.startsWith(\"window\")\r\n-                ) {\r\n-            expectedArgCount = 1;\r\n-        }\r\n-        else if (op.equals(\"chooseCancelOnNextConfirmation\")\r\n-                || op.equals(\"close\")\r\n-                || op.equals(\"refresh\")\r\n-                || op.equals(\"goBack\")) {\r\n-            expectedArgCount = 0;\r\n-        }\r\n-        return beginning + XlateSeleneseStatementDefault(expectedArgCount, \"selenium\", tokens) + ending;\r\n+        return beginning + XlateSeleneseStatementDefault(funcArgCounts.get(op), \"selenium\", tokens) + ending;\r\n     }\r\n \r\n     private static String possiblyAdjustOpenURL(String url) {\r",
      "parent_sha": "740030c8f2f51760298c3ffb975e4c1a39268dab"
    }
  },
  {
    "oid": "ad46da13c4699285209c281676979092b4dff105",
    "message": "SimonStewart: The opera driver has nothing in the legacy test suite any more\n\nr16114",
    "date": "2012-03-04T22:41:58Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/ad46da13c4699285209c281676979092b4dff105",
    "details": {
      "sha": "827924e6175f97751942b59df100a8c71e70bd54",
      "filename": "java/client/test/org/openqa/selenium/opera/OperaDriverTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 22,
      "changes": 23,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/ad46da13c4699285209c281676979092b4dff105/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fopera%2FOperaDriverTests.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/ad46da13c4699285209c281676979092b4dff105/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fopera%2FOperaDriverTests.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fopera%2FOperaDriverTests.java?ref=ad46da13c4699285209c281676979092b4dff105",
      "patch": "@@ -1,33 +1,12 @@\n package org.openqa.selenium.opera;\n \n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n-import org.junit.internal.runners.SuiteMethod;\n import org.junit.runner.RunWith;\n import org.junit.runners.Suite;\n import org.openqa.selenium.StandardSeleniumTests;\n-import org.openqa.selenium.TestSuiteBuilder;\n-\n-import static org.openqa.selenium.testing.drivers.Browser.opera;\n-\n \n @RunWith(Suite.class)\n @Suite.SuiteClasses({\n-    StandardSeleniumTests.class,\n-    OperaDriverTests.LegacyTests.class\n+    StandardSeleniumTests.class\n })\n public class OperaDriverTests {\n-\n-  @RunWith(SuiteMethod.class)\n-  public static class LegacyTests extends TestSuite {\n-  public static Test suite() throws Exception {\n-    return new TestSuiteBuilder()\n-        .addSourceDir(\"java/client/test\")\n-        .using(opera)\n-        .keepDriverInstance()\n-        .includeJavascriptTests()\n-        .create();\n-  }\n-  }\n }",
      "parent_sha": "6a9595980ddf92d5da78183dac1ed6f3bb9876ed"
    }
  },
  {
    "oid": "ddd3c7c3c6574a2d608f2f0873d35ab7d5970247",
    "message": "[java] Reworking the test testShouldGetTextOfAlertOpenedInSetTimeout",
    "date": "2018-09-23T10:01:38Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/ddd3c7c3c6574a2d608f2f0873d35ab7d5970247",
    "details": {
      "sha": "26296868aae3fe44cd6c95d4f7e909ff117e7e41",
      "filename": "java/client/test/org/openqa/selenium/AlertsTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 10,
      "changes": 11,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/ddd3c7c3c6574a2d608f2f0873d35ab7d5970247/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FAlertsTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/ddd3c7c3c6574a2d608f2f0873d35ab7d5970247/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FAlertsTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FAlertsTest.java?ref=ddd3c7c3c6574a2d608f2f0873d35ab7d5970247",
      "patch": "@@ -39,7 +39,6 @@\n import org.openqa.selenium.support.ui.ExpectedCondition;\n import org.openqa.selenium.testing.Ignore;\n import org.openqa.selenium.testing.JUnit4TestBase;\n-import org.openqa.selenium.testing.NeedsLocalEnvironment;\n import org.openqa.selenium.testing.NoDriverAfterTest;\n import org.openqa.selenium.testing.NotYetImplemented;\n import org.openqa.selenium.testing.SwitchToTopAfterTest;\n@@ -129,11 +128,7 @@ public void testShouldAllowUsersToAcceptAnAlertWithNoTextManually() {\n     assertThat(driver.getTitle()).isEqualTo(\"Testing Alerts\");\n   }\n \n-  @NeedsLocalEnvironment(reason = \"Carefully timing based\")\n   @Test\n-  @Ignore(CHROME)\n-  @Ignore(MARIONETTE)\n-  @Ignore(SAFARI)\n   public void testShouldGetTextOfAlertOpenedInSetTimeout() {\n     driver.get(appServer.create(new Page()\n         .withTitle(\"Testing Alerts\")\n@@ -143,11 +138,7 @@ public void testShouldGetTextOfAlertOpenedInSetTimeout() {\n             \"<a href='#' id='slow-alert' onclick='slowAlert();'>click me</a>\")));\n \n     driver.findElement(By.id(\"slow-alert\")).click();\n-\n-    // DO NOT WAIT OR SLEEP HERE.\n-    // This is a regression test for a bug where only the first switchTo call would throw,\n-    // and only if it happens before the alert actually loads.\n-    Alert alert = driver.switchTo().alert();\n+    Alert alert = wait.until(alertIsPresent());\n     try {\n       assertThat(alert.getText()).isEqualTo(\"Slow\");\n     } finally {",
      "parent_sha": "8f7dffe2516654451fe13af5cc62656d44fc5a05"
    }
  },
  {
    "oid": "f0f6a243637614c2939bc8d994b5776e21567ee7",
    "message": "[grid] Fixing allow cors parameter",
    "date": "2020-11-30T18:32:24Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/f0f6a243637614c2939bc8d994b5776e21567ee7",
    "details": {
      "sha": "399d8a73156eb2d016348e11afc0ec8af47ed01c",
      "filename": "java/server/src/org/openqa/selenium/grid/server/BaseServerFlags.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/f0f6a243637614c2939bc8d994b5776e21567ee7/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServerFlags.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/f0f6a243637614c2939bc8d994b5776e21567ee7/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServerFlags.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServerFlags.java?ref=f0f6a243637614c2939bc8d994b5776e21567ee7",
      "patch": "@@ -46,9 +46,11 @@ public class BaseServerFlags implements HasRoles {\n   @ConfigValue(section = \"server\", name = \"max-threads\", example = \"12\")\n   private int maxThreads = Runtime.getRuntime().availableProcessors() * 3;\n \n-  @Parameter(description = \"Whether the Selenium server should allow web browser connections from any host\", names = \"--allow-cors\")\n+  @Parameter(names = \"--allow-cors\",\n+    description = \"Whether the Selenium server should allow web browser connections from any host\",\n+    arity = 1)\n   @ConfigValue(section = \"server\", name = \"allow-cors\", example = \"true\")\n-  private Boolean allowCORS = false;\n+  private Boolean allowCORS;\n \n   @Parameter(description = \"Private key for https\", names = \"--https-private-key\")\n   @ConfigValue(section = \"server\", name = \"https-private-key\", example = \"\\\"/path/to/key.pkcs8\\\"\")",
      "parent_sha": "ddd4ccc5236415cc50aa2d2194b1a21510356df3"
    }
  },
  {
    "oid": "9656da70e574a77213cba49ff00e11a2d0f1f393",
    "message": "[grid] Sending a DELETE when a session times out.\n\nThis is a more graceful way to stop an idle session.\nGrid was only killing the browser driver, and in some\ncases the browser was left open. This change attempts\nto avoid that by stopping the session with a DELETE.\n\nFixes #10820",
    "date": "2022-08-16T08:36:36Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/9656da70e574a77213cba49ff00e11a2d0f1f393",
    "details": {
      "sha": "a99a36a8a2195e319b3944a043cfa5230487c8bb",
      "filename": "java/src/org/openqa/selenium/grid/node/local/LocalNode.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/9656da70e574a77213cba49ff00e11a2d0f1f393/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/9656da70e574a77213cba49ff00e11a2d0f1f393/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java?ref=9656da70e574a77213cba49ff00e11a2d0f1f393",
      "patch": "@@ -91,6 +91,7 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n import java.util.logging.Logger;\n import java.util.stream.Collectors;\n \n@@ -180,12 +181,17 @@ private LocalNode(\n       .ticker(ticker)\n       .removalListener((RemovalListener<SessionId, SessionSlot>) notification -> {\n         if (notification.getKey() != null && notification.getValue() != null) {\n-          // Attempt to stop the session\n           SessionSlot slot = notification.getValue();\n-          SessionId sessionId = notification.getKey();\n+          SessionId id = notification.getKey();\n+          if (notification.wasEvicted()) {\n+            // Session is timing out, stopping it by sending a DELETE\n+            LOG.log(Level.INFO, () -> String.format(\"Session id %s timed out, stopping...\", id));\n+            slot.execute(new HttpRequest(DELETE, \"/session/\" + id));\n+          }\n+          // Attempt to stop the session\n           slot.stop();\n           // Invalidate temp file system\n-          this.tempFileSystems.invalidate(sessionId);\n+          this.tempFileSystems.invalidate(id);\n           // Decrement pending sessions if Node is draining\n           if (this.isDraining()) {\n             int done = pendingSessions.decrementAndGet();",
      "parent_sha": "829e47681a23be06a3433c15ecd3d9351aba6142"
    }
  },
  {
    "oid": "b56aa82b23be827d682f48a38a86f6b560200993",
    "message": "KristianRosenvold: Now also compiles\n\nr13642",
    "date": "2011-08-30T11:56:44Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/b56aa82b23be827d682f48a38a86f6b560200993",
    "details": {
      "sha": "6e81ca409affb898591ce4d8aec50b0fa1e946be",
      "filename": "java/server/test/org/openqa/grid/internal/RemoteProxyTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/b56aa82b23be827d682f48a38a86f6b560200993/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fgrid%2Finternal%2FRemoteProxyTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/b56aa82b23be827d682f48a38a86f6b560200993/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fgrid%2Finternal%2FRemoteProxyTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fgrid%2Finternal%2FRemoteProxyTest.java?ref=b56aa82b23be827d682f48a38a86f6b560200993",
      "patch": "@@ -3,16 +3,16 @@\n import static org.openqa.grid.common.RegistrationRequest.APP;\r\n import static org.openqa.grid.common.RegistrationRequest.REMOTE_URL;\r\n \r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n import org.junit.Assert;\r\n import org.junit.BeforeClass;\r\n import org.junit.Test;\r\n import org.openqa.grid.common.RegistrationRequest;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n public class RemoteProxyTest {\r\n \r\n   private static RemoteProxy p1 = null;\r\n@@ -54,7 +54,7 @@ public void testEqual() {\n   public void create() {\r\n     Map<String, Object> cap = new HashMap<String, Object>();\r\n     cap.put(APP, \"corrupted\");\r\n-                                                   Thread\r\n+\r\n     Map<String, Object> config = new HashMap<String, Object>();\r\n     config.put(REMOTE_URL, \"ebay.com\");\r\n \r",
      "parent_sha": "a2ebd76e03fef1885da7f3f19e47a74c388f33d2"
    }
  },
  {
    "oid": "2d47c4283de2900abc598f608d273bcb04f4c8c1",
    "message": "[grid] Deleting two redundant tests\n\nSimilar case as https://github.com/SeleniumHQ/selenium/commit/44a41916259bc1ec2b13bbe44bd81623fc2b99f2,\nthe deleted tests were passing because the assertions were not accurate.",
    "date": "2021-01-02T01:07:56Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/2d47c4283de2900abc598f608d273bcb04f4c8c1",
    "details": {
      "sha": "23fef385856494b789bd67ae33b7145595d460cc",
      "filename": "java/server/test/org/openqa/selenium/grid/distributor/DistributorTest.java",
      "status": "modified",
      "additions": 117,
      "deletions": 167,
      "changes": 284,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/2d47c4283de2900abc598f608d273bcb04f4c8c1/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fdistributor%2FDistributorTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/2d47c4283de2900abc598f608d273bcb04f4c8c1/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fdistributor%2FDistributorTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fdistributor%2FDistributorTest.java?ref=2d47c4283de2900abc598f608d273bcb04f4c8c1",
      "patch": "@@ -31,14 +31,11 @@\n import org.openqa.selenium.SessionNotCreatedException;\n import org.openqa.selenium.TimeoutException;\n import org.openqa.selenium.events.EventBus;\n-import org.openqa.selenium.events.EventListener;\n-import org.openqa.selenium.events.EventName;\n import org.openqa.selenium.events.local.GuavaEventBus;\n import org.openqa.selenium.grid.data.Availability;\n import org.openqa.selenium.grid.data.CreateSessionRequest;\n import org.openqa.selenium.grid.data.CreateSessionResponse;\n import org.openqa.selenium.grid.data.DistributorStatus;\n-import org.openqa.selenium.grid.data.NodeAddedEvent;\n import org.openqa.selenium.grid.data.NodeRemovedEvent;\n import org.openqa.selenium.grid.data.NodeStatus;\n import org.openqa.selenium.grid.data.Session;\n@@ -100,45 +97,25 @@\n \n public class DistributorTest {\n \n-  private static class EitherAssert<A, B> extends AbstractAssert<EitherAssert<A, B>, Either<A, B>> {\n-    public EitherAssert(Either<A, B> actual) {\n-      super(actual, EitherAssert.class);\n-    }\n-\n-    public EitherAssert<A, B> isLeft() {\n-      isNotNull();\n-      if (actual.isRight()) {\n-        failWithMessage(\n-          \"Expected Either to be left but it is right: %s\", actual.right());\n-      }\n-      return this;\n-    }\n-\n-    public EitherAssert<A, B> isRight() {\n-      isNotNull();\n-      if (actual.isLeft()) {\n-        failWithMessage(\n-          \"Expected Either to be right but it is left: %s\", actual.left());\n-      }\n-      return this;\n-    }\n-  }\n-\n-  private static <A, B> EitherAssert<A, B> assertThatEither(Either<A, B> either) {\n-    return new EitherAssert<>(either);\n-  }\n-\n   private static final Logger LOG = Logger.getLogger(\"Distributor Test\");\n+  private final Secret registrationSecret = new Secret(\"hellim\");\n+  private final Wait<Object> wait = new FluentWait<>(new Object()).withTimeout(Duration.ofSeconds(5));\n   private Tracer tracer;\n   private EventBus bus;\n   private Distributor local;\n   private Capabilities stereotype;\n   private Capabilities caps;\n-  private final Secret registrationSecret = new Secret(\"hellim\");\n-  private final Wait<Object> wait = new FluentWait<>(new Object()).withTimeout(Duration.ofSeconds(5));\n+  private URI nodeUri;\n+  private URI routableUri;\n+\n+  private static <A, B> EitherAssert<A, B> assertThatEither(Either<A, B> either) {\n+    return new EitherAssert<>(either);\n+  }\n \n   @Before\n-  public void setUp() {\n+  public void setUp() throws URISyntaxException {\n+    nodeUri = new URI(\"http://example:5678\");\n+    routableUri = new URI(\"http://localhost:1234\");\n     tracer = DefaultTestTracer.createTracer();\n     bus = new GuavaEventBus();\n     LocalSessionMap sessions = new LocalSessionMap(tracer, bus);\n@@ -169,10 +146,7 @@ public void creatingANewSessionWithoutANodeEndsInFailure() {\n   }\n \n   @Test\n-  public void shouldBeAbleToAddANodeAndCreateASession() throws URISyntaxException {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n+  public void shouldBeAbleToAddANodeAndCreateASession() {\n     LocalSessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -181,7 +155,9 @@ public void shouldBeAbleToAddANodeAndCreateASession() throws URISyntaxException\n       Duration.ofSeconds(2));\n     LocalNewSessionQueuer queuer = new LocalNewSessionQueuer(tracer, bus, localNewSessionQueue);\n     LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n       .build();\n \n     Distributor distributor = new LocalDistributor(\n@@ -207,10 +183,7 @@ public void shouldBeAbleToAddANodeAndCreateASession() throws URISyntaxException\n   }\n \n   @Test\n-  public void creatingASessionAddsItToTheSessionMap() throws URISyntaxException {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n+  public void creatingASessionAddsItToTheSessionMap() {\n     LocalSessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -220,7 +193,9 @@ public void creatingASessionAddsItToTheSessionMap() throws URISyntaxException {\n     LocalNewSessionQueuer queuer = new LocalNewSessionQueuer(tracer, bus, localNewSessionQueue);\n \n     LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n       .build();\n \n     LocalDistributor distributor = new LocalDistributor(\n@@ -247,10 +222,7 @@ public void creatingASessionAddsItToTheSessionMap() throws URISyntaxException {\n   }\n \n   @Test\n-  public void shouldBeAbleToRemoveANode() throws URISyntaxException, MalformedURLException {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n+  public void shouldBeAbleToRemoveANode() throws MalformedURLException {\n     LocalSessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -260,7 +232,9 @@ public void shouldBeAbleToRemoveANode() throws URISyntaxException, MalformedURLE\n     LocalNewSessionQueuer queuer = new LocalNewSessionQueuer(tracer, bus, localNewSessionQueue);\n \n     LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n       .build();\n \n     Distributor local = new LocalDistributor(\n@@ -286,10 +260,7 @@ public void shouldBeAbleToRemoveANode() throws URISyntaxException, MalformedURLE\n   }\n \n   @Test\n-  public void testDrainingNodeDoesNotAcceptNewSessions() throws URISyntaxException {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n+  public void testDrainingNodeDoesNotAcceptNewSessions() {\n     SessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -298,7 +269,9 @@ public void testDrainingNodeDoesNotAcceptNewSessions() throws URISyntaxException\n       Duration.ofSeconds(2));\n     LocalNewSessionQueuer queuer = new LocalNewSessionQueuer(tracer, bus, localNewSessionQueue);\n     LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n       .build();\n \n     Distributor distributor = new LocalDistributor(\n@@ -320,12 +293,7 @@ public void testDrainingNodeDoesNotAcceptNewSessions() throws URISyntaxException\n   }\n \n   @Test\n-  public void testDrainedNodeShutsDownOnceEmpty()\n-    throws URISyntaxException, InterruptedException\n-  {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n+  public void testDrainedNodeShutsDownOnceEmpty() throws InterruptedException {\n     SessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -334,7 +302,9 @@ public void testDrainedNodeShutsDownOnceEmpty()\n       Duration.ofSeconds(2));\n     LocalNewSessionQueuer queuer = new LocalNewSessionQueuer(tracer, bus, localNewSessionQueue);\n     LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n       .build();\n \n     CountDownLatch latch = new CountDownLatch(1);\n@@ -366,12 +336,7 @@ public void testDrainedNodeShutsDownOnceEmpty()\n   }\n \n   @Test\n-  public void drainedNodeDoesNotShutDownIfNotEmpty()\n-    throws URISyntaxException, InterruptedException\n-  {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n+  public void drainedNodeDoesNotShutDownIfNotEmpty() throws InterruptedException {\n     SessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -380,7 +345,9 @@ public void drainedNodeDoesNotShutDownIfNotEmpty()\n       Duration.ofSeconds(2));\n     LocalNewSessionQueuer queuer = new LocalNewSessionQueuer(tracer, bus, localNewSessionQueue);\n     LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n       .build();\n \n     CountDownLatch latch = new CountDownLatch(1);\n@@ -411,12 +378,7 @@ public void drainedNodeDoesNotShutDownIfNotEmpty()\n   }\n \n   @Test\n-  public void drainedNodeShutsDownAfterSessionsFinish()\n-    throws URISyntaxException, InterruptedException\n-  {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n+  public void drainedNodeShutsDownAfterSessionsFinish() throws InterruptedException {\n     SessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -425,8 +387,12 @@ public void drainedNodeShutsDownAfterSessionsFinish()\n       Duration.ofSeconds(2));\n     LocalNewSessionQueuer queuer = new LocalNewSessionQueuer(tracer, bus, localNewSessionQueue);\n     LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n       .build();\n \n     CountDownLatch latch = new CountDownLatch(1);\n@@ -464,13 +430,11 @@ public void drainedNodeShutsDownAfterSessionsFinish()\n   }\n \n   @Test\n-  public void registeringTheSameNodeMultipleTimesOnlyCountsTheFirstTime()\n-    throws URISyntaxException\n-  {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n+  public void registeringTheSameNodeMultipleTimesOnlyCountsTheFirstTime() {\n     LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n       .build();\n \n     local.add(node);\n@@ -481,48 +445,6 @@ public void registeringTheSameNodeMultipleTimesOnlyCountsTheFirstTime()\n     assertThat(status.getNodes().size()).isEqualTo(1);\n   }\n \n-  @Test\n-  public void registeringTheWrongRegistrationSecretDoesNotWork()\n-    throws URISyntaxException, InterruptedException\n-  {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n-    EventName rejected = new EventName(\"node-rejected\");\n-    CountDownLatch latch = new CountDownLatch(1);\n-    bus.addListener(new EventListener<>(rejected, Object.class, obj -> latch.countDown()));\n-\n-    LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, new Secret(\"pickles\"))\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n-      .build();\n-\n-    local.add(node);\n-\n-    latch.await(1, TimeUnit.SECONDS);\n-\n-    assertThat(latch.getCount()).isEqualTo(1);\n-  }\n-\n-  @Test\n-  public void registeringTheCorrectRegistrationSecretWorks()\n-    throws URISyntaxException, InterruptedException\n-  {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n-    CountDownLatch latch = new CountDownLatch(1);\n-    bus.addListener(NodeAddedEvent.listener(ignored -> latch.countDown()));\n-    LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, stereotype, c, Instant.now())))\n-      .build();\n-\n-    local.add(node);\n-\n-    assertTrue(latch.await(1, TimeUnit.SECONDS));\n-\n-    assertThat(latch.getCount()).isEqualTo(0);\n-  }\n-\n   @Test\n   public void theMostLightlyLoadedNodeIsSelectedFirst() {\n     // Create enough hosts so that we avoid the scheduler returning hosts in:\n@@ -668,13 +590,17 @@ public void shouldIncludeHostsThatAreUpInHostList() {\n \n     URI uri = createUri();\n     Node alwaysDown = LocalNode.builder(tracer, bus, uri, uri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, uri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, uri, stereotype, c, Instant.now())))\n       .advanced()\n       .healthCheck(() -> new HealthCheck.Result(DOWN, \"Boo!\"))\n       .build();\n     handler.addHandler(alwaysDown);\n     Node alwaysUp = LocalNode.builder(tracer, bus, uri, uri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, c) -> new Session(id, uri, stereotype, c, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, c) -> new Session(id, uri, stereotype, c, Instant.now())))\n       .advanced()\n       .healthCheck(() -> new HealthCheck.Result(UP, \"Yay!\"))\n       .build();\n@@ -708,9 +634,7 @@ public void shouldIncludeHostsThatAreUpInHostList() {\n   }\n \n   @Test\n-  public void shouldNotScheduleAJobIfAllSlotsAreBeingUsed() throws URISyntaxException {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n+  public void shouldNotScheduleAJobIfAllSlotsAreBeingUsed() {\n     SessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -750,9 +674,7 @@ public void shouldNotScheduleAJobIfAllSlotsAreBeingUsed() throws URISyntaxExcept\n   }\n \n   @Test\n-  public void shouldReleaseSlotOnceSessionEnds() throws URISyntaxException {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n+  public void shouldReleaseSlotOnceSessionEnds() {\n     SessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -835,7 +757,8 @@ public void shouldNotStartASessionIfTheCapabilitiesAreNotSupported() {\n     distributor.add(node);\n     waitToHaveCapacity(distributor);\n \n-    ImmutableCapabilities unmatched = new ImmutableCapabilities(\"browserName\", \"transit of venus\");\n+    ImmutableCapabilities unmatched =\n+      new ImmutableCapabilities(\"browserName\", \"transit of venus\");\n     try (NewSessionPayload payload = NewSessionPayload.create(unmatched)) {\n       Either<SessionNotCreatedException, CreateSessionResponse> result =\n         distributor.newSession(createRequest(payload));\n@@ -844,10 +767,7 @@ public void shouldNotStartASessionIfTheCapabilitiesAreNotSupported() {\n   }\n \n   @Test\n-  public void attemptingToStartASessionWhichFailsMarksAsTheSlotAsAvailable() throws URISyntaxException {\n-    URI nodeUri = new URI(\"http://example:5678\");\n-    URI routableUri = new URI(\"http://localhost:1234\");\n-\n+  public void attemptingToStartASessionWhichFailsMarksAsTheSlotAsAvailable() {\n     SessionMap sessions = new LocalSessionMap(tracer, bus);\n     LocalNewSessionQueue localNewSessionQueue = new LocalNewSessionQueue(\n       tracer,\n@@ -897,7 +817,9 @@ public void shouldReturnNodesThatWereDownToPoolOfNodesOnceTheyMarkTheirHealthChe\n \n     URI uri = createUri();\n     Node node = LocalNode.builder(tracer, bus, uri, uri, registrationSecret)\n-      .add(caps, new TestSessionFactory((id, caps) -> new Session(id, uri, stereotype, caps, Instant.now())))\n+      .add(\n+        caps,\n+        new TestSessionFactory((id, caps) -> new Session(id, uri, stereotype, caps, Instant.now())))\n       .advanced()\n       .healthCheck(() -> new HealthCheck.Result(isUp.get(), \"TL;DR\"))\n       .build();\n@@ -939,7 +861,9 @@ private Set<Node> createNodeSet(Distributor distributor, int count, Capabilities\n       URI uri = createUri();\n       LocalNode.Builder builder = LocalNode.builder(tracer, bus, uri, uri, registrationSecret);\n       for (Capabilities caps: capabilities) {\n-        builder.add(caps, new TestSessionFactory((id, hostCaps) -> new HandledSession(uri, hostCaps)));\n+        builder.add(\n+          caps,\n+          new TestSessionFactory((id, hostCaps) -> new HandledSession(uri, hostCaps)));\n       }\n       Node node = builder.build();\n       distributor.add(node);\n@@ -950,7 +874,7 @@ private Set<Node> createNodeSet(Distributor distributor, int count, Capabilities\n \n   @Test\n   public void shouldPrioritizeHostsWithTheMostSlotsAvailableForASessionType() {\n-    //SS: Consider the case where you have 1 Windows machine and 5 linux machines. All of these hosts\n+    // Consider the case where you have 1 Windows machine and 5 linux machines. All of these hosts\n     // can run Chrome and Firefox sessions, but only one can run Edge sessions. Ideally, the machine\n     // able to run Edge would be sorted last.\n \n@@ -976,29 +900,28 @@ public void shouldPrioritizeHostsWithTheMostSlotsAvailableForASessionType() {\n     handler.addHandler(distributor);\n \n     //Create all three Capability types\n-    Capabilities edgeCapabilities = new ImmutableCapabilities(\"browserName\", \"edge\");\n-    Capabilities firefoxCapabilities = new ImmutableCapabilities(\"browserName\", \"firefox\");\n-    Capabilities chromeCapabilities = new ImmutableCapabilities(\"browserName\", \"chrome\");\n+    Capabilities edge = new ImmutableCapabilities(\"browserName\", \"edge\");\n+    Capabilities firefox = new ImmutableCapabilities(\"browserName\", \"firefox\");\n+    Capabilities chrome = new ImmutableCapabilities(\"browserName\", \"chrome\");\n \n-    //TODO This should probably be a map of browser -> all nodes that support <browser>\n     //Store our \"expected results\" sets for the various browser-specific nodes\n-    Set<Node> edgeNodes = createNodeSet(distributor, 3, edgeCapabilities, chromeCapabilities, firefoxCapabilities);\n+    Set<Node> edgeNodes = createNodeSet(distributor, 3, edge, chrome, firefox);\n \n     //chromeNodes is all these new nodes PLUS all the Edge nodes from before\n-    Set<Node> chromeNodes = createNodeSet(distributor,5, chromeCapabilities, firefoxCapabilities);\n+    Set<Node> chromeNodes = createNodeSet(distributor,5, chrome, firefox);\n     chromeNodes.addAll(edgeNodes);\n \n     //all nodes support firefox, so add them to the firefoxNodes set\n-    Set<Node> firefoxNodes = createNodeSet(distributor,3, firefoxCapabilities);\n+    Set<Node> firefoxNodes = createNodeSet(distributor,3, firefox);\n     firefoxNodes.addAll(edgeNodes);\n     firefoxNodes.addAll(chromeNodes);\n \n     waitForAllNodesToHaveCapacity(distributor, 11);\n \n     //Assign 5 Chrome and 5 Firefox sessions to the distributor, make sure they don't go to the Edge node\n     for (int i=0; i<5; i++) {\n-      try (NewSessionPayload chromePayload = NewSessionPayload.create(chromeCapabilities);\n-           NewSessionPayload firefoxPayload = NewSessionPayload.create(firefoxCapabilities)) {\n+      try (NewSessionPayload chromePayload = NewSessionPayload.create(chrome);\n+           NewSessionPayload firefoxPayload = NewSessionPayload.create(firefox)) {\n \n         Either<SessionNotCreatedException, CreateSessionResponse> chromeResult =\n           distributor.newSession(createRequest(chromePayload));\n@@ -1027,7 +950,7 @@ public void shouldPrioritizeHostsWithTheMostSlotsAvailableForASessionType() {\n     }\n \n     //The Chrome Nodes should be full at this point, but Firefox isn't... so send an Edge session and make sure it routes to an Edge node\n-    try (NewSessionPayload edgePayload = NewSessionPayload.create(edgeCapabilities)) {\n+    try (NewSessionPayload edgePayload = NewSessionPayload.create(edge)) {\n       Either<SessionNotCreatedException, CreateSessionResponse> edgeResult =\n         distributor.newSession(createRequest(edgePayload));\n       assertThatEither(edgeResult).isRight();\n@@ -1063,13 +986,14 @@ public void shouldCorrectlySetSessionCountsWhenStartedAfterNodeWithSession() {\n \n   @Test\n   public void statusShouldIndicateThatDistributorIsNotAvailableIfNodesAreDown()\n-    throws URISyntaxException\n-  {\n+    throws URISyntaxException {\n     Capabilities capabilities = new ImmutableCapabilities(\"cheese\", \"peas\");\n     URI uri = new URI(\"http://example.com\");\n \n     Node node = LocalNode.builder(tracer, bus, uri, uri, registrationSecret)\n-      .add(capabilities, new TestSessionFactory((id, caps) -> new Session(id, uri, stereotype, caps, Instant.now())))\n+      .add(\n+        capabilities,\n+        new TestSessionFactory((id, caps) -> new Session(id, uri, stereotype, caps, Instant.now())))\n       .advanced()\n       .healthCheck(() -> new HealthCheck.Result(DOWN, \"TL;DR\"))\n       .build();\n@@ -1088,7 +1012,9 @@ public void disabledNodeShouldNotAcceptNewRequests()\n \n     URI uri = new URI(\"http://example.com\");\n     Node node = LocalNode.builder(tracer, bus, uri, uri, registrationSecret)\n-      .add(capabilities, new TestSessionFactory((id, caps) -> new Session(id, uri, stereotype, caps, Instant.now())))\n+      .add(\n+        capabilities,\n+        new TestSessionFactory((id, caps) -> new Session(id, uri, stereotype, caps, Instant.now())))\n       .advanced()\n       .healthCheck(() -> new HealthCheck.Result(DOWN, \"TL;DR\"))\n       .build();\n@@ -1121,19 +1047,6 @@ private URI createUri() {\n     }\n   }\n \n-  class HandledSession extends Session implements HttpHandler {\n-\n-    HandledSession(URI uri, Capabilities caps) {\n-      super(new SessionId(UUID.randomUUID()), uri, stereotype, caps, Instant.now());\n-    }\n-\n-    @Override\n-    public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n-      // no-op\n-      return new HttpResponse();\n-    }\n-  }\n-\n   private void waitToHaveCapacity(Distributor distributor) {\n     new FluentWait<>(distributor)\n       .withTimeout(Duration.ofSeconds(5))\n@@ -1158,4 +1071,41 @@ private void waitForAllNodesToHaveCapacity(Distributor distributor, int nodeCoun\n       nodes.forEach(node -> System.out.println(\"\" + node.hasCapacity()));\n     }\n   }\n+\n+  private static class EitherAssert<A, B> extends AbstractAssert<EitherAssert<A, B>, Either<A, B>> {\n+    public EitherAssert(Either<A, B> actual) {\n+      super(actual, EitherAssert.class);\n+    }\n+\n+    public EitherAssert<A, B> isLeft() {\n+      isNotNull();\n+      if (actual.isRight()) {\n+        failWithMessage(\n+          \"Expected Either to be left but it is right: %s\", actual.right());\n+      }\n+      return this;\n+    }\n+\n+    public EitherAssert<A, B> isRight() {\n+      isNotNull();\n+      if (actual.isLeft()) {\n+        failWithMessage(\n+          \"Expected Either to be right but it is left: %s\", actual.left());\n+      }\n+      return this;\n+    }\n+  }\n+\n+  class HandledSession extends Session implements HttpHandler {\n+\n+    HandledSession(URI uri, Capabilities caps) {\n+      super(new SessionId(UUID.randomUUID()), uri, stereotype, caps, Instant.now());\n+    }\n+\n+    @Override\n+    public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n+      // no-op\n+      return new HttpResponse();\n+    }\n+  }\n }",
      "parent_sha": "44a41916259bc1ec2b13bbe44bd81623fc2b99f2"
    }
  },
  {
    "oid": "cfcfceeca1ce87bb83c787fdd0d063bec0ca3aa5",
    "message": "Fixing SessionHandlingTest to check session after some sleep.",
    "date": "2017-04-07T14:50:28Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/cfcfceeca1ce87bb83c787fdd0d063bec0ca3aa5",
    "details": {
      "sha": "6754130b890fe304fa60affabf836458ae393b82",
      "filename": "java/client/test/org/openqa/selenium/SessionHandlingTest.java",
      "status": "modified",
      "additions": 25,
      "deletions": 9,
      "changes": 34,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/cfcfceeca1ce87bb83c787fdd0d063bec0ca3aa5/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FSessionHandlingTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/cfcfceeca1ce87bb83c787fdd0d063bec0ca3aa5/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FSessionHandlingTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FSessionHandlingTest.java?ref=cfcfceeca1ce87bb83c787fdd0d063bec0ca3aa5",
      "patch": "@@ -28,6 +28,7 @@\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n import org.openqa.selenium.testing.Ignore;\n import org.openqa.selenium.testing.SeleniumTestRunner;\n import org.openqa.selenium.testing.drivers.WebDriverBuilder;\n@@ -41,37 +42,52 @@ public void callingQuitMoreThanOnceOnASessionIsANoOp() {\n     WebDriver driver = new WebDriverBuilder().get();\n \n     driver.quit();\n+    sleepTight(3000);\n     driver.quit();\n   }\n \n   @Test\n+  @Ignore(value = FIREFOX, issue = \"https://github.com/SeleniumHQ/selenium/issues/3792\")\n   @Ignore(PHANTOMJS)\n   public void callingQuitAfterClosingTheLastWindowIsANoOp() {\n     WebDriver driver = new WebDriverBuilder().get();\n \n     driver.close();\n+    sleepTight(3000);\n     driver.quit();\n   }\n \n   @Test\n-  @Ignore(value = SAFARI, reason = \"Safari: throws UnreachableBrowserException\")\n-  public void callingAnyOperationAfterQuitShouldThrowAnException() {\n+  @Ignore(value = FIREFOX, issue = \"3792\")\n+  @Ignore(value = PHANTOMJS, reason = \"throws NoSuchWindowException\")\n+  @Ignore(value = SAFARI, reason = \"throws NullPointerException\")\n+  @Ignore(MARIONETTE)\n+  public void callingAnyOperationAfterClosingTheLastWindowShouldThrowAnException() {\n     WebDriver driver = new WebDriverBuilder().get();\n-    driver.quit();\n+\n+    driver.close();\n+    sleepTight(3000);\n     Throwable t = catchThrowable(driver::getCurrentUrl);\n     assertThat(t, instanceOf(NoSuchSessionException.class));\n   }\n \n   @Test\n-  @Ignore(value = FIREFOX, reason = \"can perform an operation after closing the last window\")\n-  @Ignore(value = PHANTOMJS, reason = \"throws NoSuchWindowException\")\n-  @Ignore(value = SAFARI, reason = \"throws NullPointerException\")\n-  @Ignore(MARIONETTE)\n-  public void callingAnyOperationAfterClosingTheLastWindowShouldThrowAnException() {\n+  @Ignore(value = SAFARI, reason = \"Safari: throws UnreachableBrowserException\")\n+  public void callingAnyOperationAfterQuitShouldThrowAnException() {\n     WebDriver driver = new WebDriverBuilder().get();\n-    driver.close();\n+\n+    driver.quit();\n+    sleepTight(3000);\n     Throwable t = catchThrowable(driver::getCurrentUrl);\n     assertThat(t, instanceOf(NoSuchSessionException.class));\n   }\n \n+  private void sleepTight(long duration) {\n+    try {\n+      Thread.sleep(duration);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n }",
      "parent_sha": "4dbf9e080379334cf39c4452736ca9dec84d9bdd"
    }
  },
  {
    "oid": "a45808219ee42888d250c85b41bdf28638dbebb4",
    "message": "KristianRosenvold: Last attempt\n\nr16452",
    "date": "2012-04-04T16:30:07Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/a45808219ee42888d250c85b41bdf28638dbebb4",
    "details": {
      "sha": "b3f156c488efdaf2d54c0c4615aae76ad09ec627",
      "filename": "java/client/test/org/openqa/selenium/WindowTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/a45808219ee42888d250c85b41bdf28638dbebb4/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FWindowTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/a45808219ee42888d250c85b41bdf28638dbebb4/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FWindowTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FWindowTest.java?ref=a45808219ee42888d250c85b41bdf28638dbebb4",
      "patch": "@@ -92,7 +92,7 @@ public void testSetsThePositionOfTheCurrentWindow() throws InterruptedException\n     waitFor(yEqual(driver, targetPosition));\n   }\n \n-  @Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SELENESE}, platforms = Platform.LINUX)\n+  @Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SELENESE})\n   @Test\n   public void testCanMaximizeTheWindow() throws InterruptedException {\n     WebDriver.Window window = driver.manage().window();\n@@ -139,7 +139,7 @@ private Callable<Boolean> windowWidthToBeGreaterThan(final WebDriver driver, fin\n       public Boolean call() throws Exception {\n         Dimension newSize = driver.manage().window().getSize();\n         log.info(\"waiting for width, Current dimensions are \" + newSize);\n-        if(newSize.width > size.width) {\n+        if(newSize.width != size.width) {\n           return true;\n         }\n \n@@ -153,7 +153,7 @@ private Callable<Boolean> windowHeightToBeGreaterThan(final WebDriver driver, fi\n       public Boolean call() throws Exception {\n         Dimension newSize = driver.manage().window().getSize();\n         log.info(\"waiting for height, Current dimensions are \" + newSize);\n-        if(newSize.height > size.height) {\n+        if(newSize.height != size.height) {\n           return true;\n         }\n ",
      "parent_sha": "945e79613e093c87adaa989b1692cf155195a4ac"
    }
  },
  {
    "oid": "6e1850bb6fcad642cb8832a4c7c6e28ff1a51d40",
    "message": "make ConnectionType searilize as integer (#6176)\n\nhttps://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#device-modes\r\nexpects connection type to be serialized to an integer as well as\r\nchromedriver does not accept currently sent string value.",
    "date": "2018-07-26T15:19:43Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/6e1850bb6fcad642cb8832a4c7c6e28ff1a51d40",
    "details": {
      "sha": "fd72c14881a5fe4867f4a77fd0bcc10d7b414a90",
      "filename": "java/client/src/org/openqa/selenium/mobile/NetworkConnection.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/6e1850bb6fcad642cb8832a4c7c6e28ff1a51d40/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fmobile%2FNetworkConnection.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/6e1850bb6fcad642cb8832a4c7c6e28ff1a51d40/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fmobile%2FNetworkConnection.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fmobile%2FNetworkConnection.java?ref=6e1850bb6fcad642cb8832a4c7c6e28ff1a51d40",
      "patch": "@@ -109,8 +109,8 @@ public String toString() {\n       return Integer.toString(mask);\n     }\n \n-    public String toJson() {\n-      return toString();\n+    public Integer toJson() {\n+      return mask;\n     }\n   }\n ",
      "parent_sha": "3f3f34e152566ef78379aad5e4376b6a10c0875c"
    }
  },
  {
    "oid": "d6f4caa0894abde17d17f0423877ba4212ede0f0",
    "message": "Add one piece of whitespace to make me feel better",
    "date": "2018-10-29T13:41:01Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/d6f4caa0894abde17d17f0423877ba4212ede0f0",
    "details": {
      "sha": "efb5e7943720aeafd4d118b21595f2be8129f663",
      "filename": "java/client/test/org/openqa/selenium/support/ui/SelectTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/d6f4caa0894abde17d17f0423877ba4212ede0f0/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FSelectTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/d6f4caa0894abde17d17f0423877ba4212ede0f0/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FSelectTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FSelectTest.java?ref=d6f4caa0894abde17d17f0423877ba4212ede0f0",
      "patch": "@@ -34,7 +34,7 @@\n import java.util.Collections;\n import java.util.List;\n \n-public class SelectTest{\n+public class SelectTest {\n \n   @Test\n   public void shouldThrowAnExceptionIfTheElementIsNotASelectElement() {",
      "parent_sha": "22c25588c113a719f7b69c6b51ba45da653dfd66"
    }
  },
  {
    "oid": "08214f76f241988a4a94cb4de22ec84d312dc1c1",
    "message": "Fix for SRC-682 -- attached files don't have to be top-level dirs.\n\n\n\nr6806",
    "date": "2009-06-12T19:09:30Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/08214f76f241988a4a94cb4de22ec84d312dc1c1",
    "details": {
      "sha": "bb911457dd2b3a22d78f2b39fbd9d5e94ae468a4",
      "filename": "server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/08214f76f241988a4a94cb4de22ec84d312dc1c1/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumDriverResourceHandler.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/08214f76f241988a4a94cb4de22ec84d312dc1c1/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumDriverResourceHandler.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/server-coreless%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2FSeleniumDriverResourceHandler.java?ref=08214f76f241988a4a94cb4de22ec84d312dc1c1",
      "patch": "@@ -599,6 +599,7 @@ private Vector<String> parseSeleneseParameters(HttpRequest req) {\n     }\r\n     \r\n     protected void downloadWithAnt(final URL url, final File outputFile) {\r\n+\r\n         Project p = new Project();\r\n         p.addBuildListener(new AntJettyLoggerBuildListener(LOGGER));\r\n         Get g = new Get();\r\n@@ -607,11 +608,24 @@ protected void downloadWithAnt(final URL url, final File outputFile) {\n         g.setDest(outputFile);\r\n         g.execute();\r\n     }\r\n+   \r\n+    private void createParentDirsAndSetDeleteOnExit(String parent, File tmpFile) {\r\n+      File parentFile = tmpFile.getParentFile();\r\n+      if (!parentFile.getPath().equals(parent) && !parentFile.exists()) {\r\n+        createParentDirsAndSetDeleteOnExit(parent, parentFile);\r\n+      }\r\n+      parentFile.mkdir();\r\n+      parentFile.deleteOnExit();\r\n+    }\r\n     \r\n     protected File createTempFile(String name) {\r\n-    \tString parent = System.getProperty(\"java.io.tmpdir\");\r\n-    \treturn new File(parent, name);\r\n+      String parent = System.getProperty(\"java.io.tmpdir\");\r\n+      File tmpFile = new File(parent, name);\r\n+      createParentDirsAndSetDeleteOnExit(parent, tmpFile);\r\n+      tmpFile.deleteOnExit();\r\n+      return tmpFile;\r\n     }\r\n+ \r\n     \r\n     private File downloadFile(String urlString) {\r\n         URL url;\r\n@@ -624,7 +638,6 @@ private File downloadFile(String urlString) {\n         String fileName = url.getFile();\r\n \r\n         File outputFile = createTempFile(fileName);\r\n-        outputFile.deleteOnExit(); // to be on the safe side.\r\n         \r\n         downloadWithAnt(url, outputFile);\r\n         \r",
      "parent_sha": "bec8527bfb26fdaf998970422c8774eebae74b74"
    }
  },
  {
    "oid": "c0474b3de51e2b5d668ebf1731a0789088e3de4f",
    "message": "JasonLeyba: Removing some redundant public modifiers so IntelliJ will stop nagging me about it.\n\nr8692",
    "date": "2010-04-14T17:13:22Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/c0474b3de51e2b5d668ebf1731a0789088e3de4f",
    "details": {
      "sha": "cfbe98d8ebaa6403449beb0fed99a49a3804ba06",
      "filename": "common/src/java/org/openqa/selenium/WebDriver.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/c0474b3de51e2b5d668ebf1731a0789088e3de4f/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2FWebDriver.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/c0474b3de51e2b5d668ebf1731a0789088e3de4f/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2FWebDriver.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2FWebDriver.java?ref=c0474b3de51e2b5d668ebf1731a0789088e3de4f",
      "patch": "@@ -170,12 +170,12 @@ public interface WebDriver extends SearchContext {\n    * @return An option interface\r\n    * @see org.openqa.selenium.WebDriver.Options\r\n    */\r\n-  public Options manage();\r\n+  Options manage();\r\n \r\n   /**\r\n    * An interface for managing stuff you would do in a browser menu\r\n    */\r\n-  public interface Options {\r\n+  interface Options {\r\n \r\n     /**\r\n      * Add a specific cookie. If the cookie's domain name is left blank, it\r\n@@ -239,7 +239,7 @@ public interface Options {\n   /**\r\n    * Used to locate a given frame or window.\r\n    */\r\n-  public interface TargetLocator {\r\n+  interface TargetLocator {\r\n     /**\r\n      * Select a frame by its (zero-based) index. That is, if a page has\r\n      * three frames, the first frame would be at index \"0\", the second at\r\n@@ -292,7 +292,7 @@ public interface TargetLocator {\n //        Alert alert();\r\n   }\r\n \r\n-  public interface Navigation {\r\n+  interface Navigation {\r\n     /**\r\n      * Move back a single \"item\" in the browser's history.\r\n      */\r",
      "parent_sha": "4a9bc2a501fc15030adc7b12fd456871ed75e1d1"
    }
  },
  {
    "oid": "7830ff176b1b37cf37a66ecb5511f3a26c21141d",
    "message": "On behalf of Richard Atkins: Using DaemonExecutor from commons-exec instead of DefaultExecutor. Fixes issue 4734",
    "date": "2015-03-11T11:50:42Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/7830ff176b1b37cf37a66ecb5511f3a26c21141d",
    "details": {
      "sha": "62e7ddf7e059e4eab87aeaa9377df6c151514704",
      "filename": "java/client/src/org/openqa/selenium/os/UnixProcess.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/7830ff176b1b37cf37a66ecb5511f3a26c21141d/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FUnixProcess.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/7830ff176b1b37cf37a66ecb5511f3a26c21141d/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FUnixProcess.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FUnixProcess.java?ref=7830ff176b1b37cf37a66ecb5511f3a26c21141d",
      "patch": "@@ -25,7 +25,7 @@\n import com.google.common.collect.Maps;\n \n import org.apache.commons.exec.DefaultExecuteResultHandler;\n-import org.apache.commons.exec.DefaultExecutor;\n+import org.apache.commons.exec.DaemonExecutor;\n import org.apache.commons.exec.ExecuteWatchdog;\n import org.apache.commons.exec.Executor;\n import org.apache.commons.exec.PumpStreamHandler;\n@@ -48,7 +48,7 @@ class UnixProcess implements OsProcess {\n   private final ByteArrayOutputStream inputOut = new ByteArrayOutputStream();\n   private volatile String allInput;\n   private final DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n-  private final Executor executor = new DefaultExecutor();\n+  private final Executor executor = new DaemonExecutor();\n \n   private volatile OutputStream drainTo;\n   private SeleniumWatchDog executeWatchdog = new SeleniumWatchDog(",
      "parent_sha": "860db821d1b60adea7262d8cbdb82769fa92fd29"
    }
  },
  {
    "oid": "73807b61742b8e94bc401c399e9e5d75e908a873",
    "message": "Add android options to `FirefoxOptions`\n\nThe list of options comes from:\n\nhttps://developer.mozilla.org/en-US/docs/Web/WebDriver/Capabilities/firefoxOptions#android",
    "date": "2021-09-30T10:18:34Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/73807b61742b8e94bc401c399e9e5d75e908a873",
    "details": {
      "sha": "a47ca5ef1ba11e8c339d07d6b17546503e14e878",
      "filename": "java/src/org/openqa/selenium/firefox/FirefoxOptions.java",
      "status": "modified",
      "additions": 54,
      "deletions": 1,
      "changes": 55,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/73807b61742b8e94bc401c399e9e5d75e908a873/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxOptions.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/73807b61742b8e94bc401c399e9e5d75e908a873/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxOptions.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxOptions.java?ref=73807b61742b8e94bc401c399e9e5d75e908a873",
      "patch": "@@ -110,6 +110,16 @@ private void mirror(FirefoxOptions that) {\n     this.legacy = that.legacy;\n   }\n \n+  /**\n+   * Configures the following:\n+   * <dl>\n+   *   <dt>Binary</dt>\n+   *   <dd>{@code webdriver.firefox.bin} - the path to the firefox binary</dd>\n+   *\n+   *   <dt>Firefox profile</dt>\n+   *   <dd>{@code webdriver.firefox.profile} - a named firefox profile</dd>\n+   * </dl>\n+   */\n   public FirefoxOptions configureFromEnv() {\n     // Read system properties and use those if they are set, allowing users to override them later\n     // should they want to.\n@@ -280,6 +290,31 @@ public FirefoxOptions setHeadless(boolean headless) {\n     return setFirefoxOption(Keys.ARGS, Collections.unmodifiableList(newArgs));\n   }\n \n+  public FirefoxOptions setAndroidPackage(String androidPackage) {\n+    Require.nonNull(\"Android package\", androidPackage);\n+    return setFirefoxOption(\"androidPackage\", androidPackage);\n+  }\n+\n+  public FirefoxOptions setAndroidActivity(String activity) {\n+    Require.nonNull(\"Android activity\", activity);\n+    return setFirefoxOption(\"androidActivity\", activity);\n+  }\n+\n+  public FirefoxOptions setAndroidDeviceSerialNumber(String serial) {\n+    Require.nonNull(\"Android device serial number\", serial);\n+    return setFirefoxOption(\"androidDeviceSerial\", serial);\n+  }\n+\n+  public FirefoxOptions setAndroidIntentArguments(String[] args) {\n+    Require.nonNull(\"Android intent arguments\", args);\n+    return setAndroidIntentArguments(Arrays.asList(args));\n+  }\n+\n+  public FirefoxOptions setAndroidIntentArguments(List<String> args) {\n+    Require.nonNull(\"Android intent arguments\", args);\n+    return setFirefoxOption(\"androidIntentArguments\", args);\n+  }\n+\n   @Override\n   public void setCapability(String key, Object value) {\n     Require.nonNull(\"Capability name\", key);\n@@ -326,8 +361,15 @@ public void setCapability(String key, Object value) {\n   }\n \n   private FirefoxOptions setFirefoxOption(Keys key, Object value) {\n+    return setFirefoxOption(key.key(), value);\n+  }\n+\n+  private FirefoxOptions setFirefoxOption(String key, Object value) {\n+    Require.nonNull(\"Key\", key);\n+    Require.nonNull(\"Value\", value);\n+\n     Map<String, Object> newOptions = new TreeMap<>(firefoxOptions);\n-    newOptions.put(key.key(), value);\n+    newOptions.put(key, value);\n     firefoxOptions = Collections.unmodifiableMap(newOptions);\n     return this;\n   }\n@@ -374,6 +416,17 @@ public FirefoxOptions merge(Capabilities capabilities) {\n   }\n \n   private enum Keys {\n+    ANDROID_PACKAGE(\"androidPackage\") {\n+      @Override\n+      public void amend(Map<String, Object> sourceOptions, Map<String, Object> toAmend) {\n+\n+      }\n+\n+      @Override\n+      public Object mirror(Map<String, Object> first, Map<String, Object> second) {\n+        return null;\n+      }\n+    },\n     ARGS(\"args\") {\n       @Override\n       public void amend(Map<String, Object> sourceOptions, Map<String, Object> toAmend) {",
      "parent_sha": "cb0e61525c4d6c9b9e554333614c914b08298403"
    }
  },
  {
    "oid": "878f9ad8d0186f23be963e4043857c0f770d196e",
    "message": "EranMes, on behalf of AndreasHaas: turn on the InvalidSelectorError tests for Chrome and Remote.\n\nr13798",
    "date": "2011-09-09T00:31:24Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/878f9ad8d0186f23be963e4043857c0f770d196e",
    "details": {
      "sha": "185688e91ffd771a441ff934518c804fd76cb3f4",
      "filename": "java/client/test/org/openqa/selenium/XPathElementFindingTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/878f9ad8d0186f23be963e4043857c0f770d196e/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FXPathElementFindingTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/878f9ad8d0186f23be963e4043857c0f770d196e/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FXPathElementFindingTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FXPathElementFindingTest.java?ref=878f9ad8d0186f23be963e4043857c0f770d196e",
      "patch": "@@ -18,10 +18,8 @@\n package org.openqa.selenium;\n \n import static org.openqa.selenium.Ignore.Driver.ANDROID;\n-import static org.openqa.selenium.Ignore.Driver.CHROME;\n import static org.openqa.selenium.Ignore.Driver.IPHONE;\n import static org.openqa.selenium.Ignore.Driver.OPERA;\n-import static org.openqa.selenium.Ignore.Driver.REMOTE;\n import static org.openqa.selenium.Ignore.Driver.SELENESE;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -106,7 +104,7 @@ public void testShouldLocateElementsWithGivenText() {\n     }\n   }\n \n-  @Ignore({ANDROID, CHROME, IPHONE, REMOTE, SELENESE})\n+  @Ignore({ANDROID, IPHONE, SELENESE})\n   public void testShouldThrowInvalidSelectorExceptionWhenXPathIsSyntacticallyInvalidInDriverFindElement() {\n     driver.get(pages.formPage);\n \n@@ -119,7 +117,7 @@ public void testShouldThrowInvalidSelectorExceptionWhenXPathIsSyntacticallyInval\n     }\n   }\n \n-  @Ignore({ANDROID, CHROME, IPHONE, REMOTE, SELENESE})\n+  @Ignore({ANDROID, IPHONE, SELENESE})\n   public void testShouldThrowInvalidSelectorExceptionWhenXPathIsSyntacticallyInvalidInDriverFindElements() {\n     driver.get(pages.formPage);\n \n@@ -132,7 +130,7 @@ public void testShouldThrowInvalidSelectorExceptionWhenXPathIsSyntacticallyInval\n     }\n   }\n \n-  @Ignore({ANDROID, CHROME, IPHONE, OPERA, REMOTE, SELENESE})\n+  @Ignore({ANDROID, IPHONE, OPERA, SELENESE})\n   public void testShouldThrowInvalidSelectorExceptionWhenXPathIsSyntacticallyInvalidInElementFindElement() {\n     driver.get(pages.formPage);\n     WebElement body = driver.findElement(By.tagName(\"body\"));\n@@ -145,7 +143,7 @@ public void testShouldThrowInvalidSelectorExceptionWhenXPathIsSyntacticallyInval\n     }\n   }\n \n-  @Ignore({ANDROID, CHROME, IPHONE, OPERA, REMOTE, SELENESE})\n+  @Ignore({ANDROID, IPHONE, OPERA, SELENESE})\n   public void testShouldThrowInvalidSelectorExceptionWhenXPathIsSyntacticallyInvalidInElementFindElements() {\n     driver.get(pages.formPage);\n     WebElement body = driver.findElement(By.tagName(\"body\"));\n@@ -159,7 +157,7 @@ public void testShouldThrowInvalidSelectorExceptionWhenXPathIsSyntacticallyInval\n   }\n \n \n-  @Ignore({ANDROID, CHROME, IPHONE, OPERA, REMOTE, SELENESE})\n+  @Ignore({ANDROID, IPHONE, OPERA, SELENESE})\n   public void testShouldThrowInvalidSelectorExceptionWhenXPathReturnsWrongTypeInDriverFindElement() {\n     driver.get(pages.formPage);\n \n@@ -172,7 +170,7 @@ public void testShouldThrowInvalidSelectorExceptionWhenXPathReturnsWrongTypeInDr\n     }\n   }\n \n-  @Ignore({ANDROID, CHROME, IPHONE, OPERA, REMOTE, SELENESE})\n+  @Ignore({ANDROID, IPHONE, OPERA, SELENESE})\n   public void testShouldThrowInvalidSelectorExceptionWhenXPathReturnsWrongTypeInDriverFindElements() {\n     driver.get(pages.formPage);\n \n@@ -185,7 +183,7 @@ public void testShouldThrowInvalidSelectorExceptionWhenXPathReturnsWrongTypeInDr\n     }\n   }\n \n-  @Ignore({ANDROID, CHROME, IPHONE, OPERA, REMOTE, SELENESE})\n+  @Ignore({ANDROID, IPHONE, OPERA, SELENESE})\n   public void testShouldThrowInvalidSelectorExceptionWhenXPathReturnsWrongTypeInElementFindElement() {\n     driver.get(pages.formPage);\n \n@@ -200,7 +198,7 @@ public void testShouldThrowInvalidSelectorExceptionWhenXPathReturnsWrongTypeInEl\n     }\n   }\n \n-  @Ignore({ANDROID, CHROME, IPHONE, OPERA, REMOTE, SELENESE})\n+  @Ignore({ANDROID, IPHONE, OPERA, SELENESE})\n   public void testShouldThrowInvalidSelectorExceptionWhenXPathReturnsWrongTypeInElementFindElements() {\n     driver.get(pages.formPage);\n ",
      "parent_sha": "ad715b79c9911ba0de74cfdfeea5aba1376ea1db"
    }
  },
  {
    "oid": "e58ad4ade490a0d0fb7ac62f7523ce178ed460ec",
    "message": "Fix \"quiteDriver\" typo.",
    "date": "2017-03-14T00:24:47Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/e58ad4ade490a0d0fb7ac62f7523ce178ed460ec",
    "details": {
      "sha": "292c43016e3d594b236dd9d4b8395a29e7e2be06",
      "filename": "java/client/test/org/openqa/selenium/remote/StartingFirefoxRemotelyTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/e58ad4ade490a0d0fb7ac62f7523ce178ed460ec/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fremote%2FStartingFirefoxRemotelyTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/e58ad4ade490a0d0fb7ac62f7523ce178ed460ec/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fremote%2FStartingFirefoxRemotelyTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fremote%2FStartingFirefoxRemotelyTest.java?ref=e58ad4ade490a0d0fb7ac62f7523ce178ed460ec",
      "patch": "@@ -51,7 +51,7 @@ public void getRemoteServerUrl() {\n   }\n \n   @After\n-  public void quiteDriver() {\n+  public void quitDriver() {\n     if (localDriver != null) {\n       localDriver.quit();\n     }",
      "parent_sha": "07f6b7a037e500a2c94c4a026dbcf202c695cc4c"
    }
  },
  {
    "oid": "05c79402c3c86b5b248707504297cf06ed99906a",
    "message": "SimonStewart: Flakiness in our test suite isn't acceptable. Marking the content editable typing test as ignored for firefox and filing issue 3127 about it.\n\nr15304",
    "date": "2011-12-29T10:27:06Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/05c79402c3c86b5b248707504297cf06ed99906a",
    "details": {
      "sha": "64e20741ff8fd9d9b61c0725bab176925818dd81",
      "filename": "java/client/test/org/openqa/selenium/TypingTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/05c79402c3c86b5b248707504297cf06ed99906a/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FTypingTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/05c79402c3c86b5b248707504297cf06ed99906a/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FTypingTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FTypingTest.java?ref=05c79402c3c86b5b248707504297cf06ed99906a",
      "patch": "@@ -664,8 +664,8 @@ public void testShouldBeAbleToTypeOnAnEmailInputField() {\n     assertThat(email.getAttribute(\"value\"), equalTo(\"foobar\"));\r\n   }\r\n \r\n-  @Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SELENESE},\r\n-        reason = \"Untested browsers.\")\r\n+  @Ignore(value = {ANDROID, CHROME, FIREFOX, HTMLUNIT, IE, IPHONE, OPERA, SELENESE},\r\n+        reason = \"Untested browsers.\", issues = {3127})\r\n   public void testShouldBeAbleToTypeIntoEmptyContentEditableElement() {\r\n     driver.get(pages.readOnlyPage);\r\n     WebElement editable = driver.findElement(By.id(\"content-editable\"));\r",
      "parent_sha": "f32df151270ff30a421989390222c723bc90348e"
    }
  },
  {
    "oid": "6890ee9af6b8316d343a1f73e328ff84ff991eee",
    "message": "Disabling a couple of failing tests in Opera",
    "date": "2013-05-27T23:17:56Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/6890ee9af6b8316d343a1f73e328ff84ff991eee",
    "details": {
      "sha": "3cefd76c5c16bdaf78582507648e9ee9ce111f3f",
      "filename": "java/client/test/org/openqa/selenium/RenderedWebElementTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/6890ee9af6b8316d343a1f73e328ff84ff991eee/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FRenderedWebElementTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/6890ee9af6b8316d343a1f73e328ff84ff991eee/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FRenderedWebElementTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FRenderedWebElementTest.java?ref=6890ee9af6b8316d343a1f73e328ff84ff991eee",
      "patch": "@@ -334,7 +334,7 @@ public void testCanClickOnSuckerFishMenuItem() throws Exception {\n   }\n \n   @JavascriptEnabled\n-  @Ignore(value = {HTMLUNIT},\n+  @Ignore(value = {HTMLUNIT, OPERA},\n       reason = \"Advanced mouse actions only implemented in rendered browsers\")\n   @Test\n   public void testMovingMouseByRelativeOffset() {\n@@ -401,7 +401,7 @@ public void testMovingMouseToRelativeZeroElementOffset() {\n \n   @JavascriptEnabled\n   @NeedsFreshDriver\n-  @Ignore(value = {HTMLUNIT}, reason = \"Advanced mouse actions only implemented in rendered browsers\")\n+  @Ignore(value = {HTMLUNIT, OPERA}, reason = \"Advanced mouse actions only implemented in rendered browsers\")\n   @Test\n   public void testMoveRelativeToBody() {\n     if (!hasInputDevices()) {",
      "parent_sha": "6fd4c5ad00fb005335792c43474bcc8f39460ce2"
    }
  },
  {
    "oid": "e0a972a3a9a432a01b983205a12d5970235e70e5",
    "message": "AlexeiBarantsev: Linting, no functional changes\n\nr18021",
    "date": "2012-10-30T07:30:29Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/e0a972a3a9a432a01b983205a12d5970235e70e5",
    "details": {
      "sha": "717f5de89a5642bebf8033fd24f5deb3ab6d288f",
      "filename": "java/client/src/org/openqa/selenium/os/WindowsUtils.java",
      "status": "modified",
      "additions": 35,
      "deletions": 41,
      "changes": 76,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/e0a972a3a9a432a01b983205a12d5970235e70e5/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FWindowsUtils.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/e0a972a3a9a432a01b983205a12d5970235e70e5/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FWindowsUtils.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fos%2FWindowsUtils.java?ref=e0a972a3a9a432a01b983205a12d5970235e70e5",
      "patch": "@@ -32,7 +32,6 @@\n import java.io.File;\r\n import java.util.ArrayList;\r\n import java.util.HashMap;\r\n-import java.util.Iterator;\r\n import java.util.List;\r\n import java.util.Map;\r\n import java.util.Properties;\r\n@@ -47,7 +46,7 @@ public class WindowsUtils {\n \r\n   public static Boolean regVersion1 = null;\r\n \r\n-  private static Logger log = Logger.getLogger(WindowsUtils.class.getName());\r\n+  private static Logger LOG = Logger.getLogger(WindowsUtils.class.getName());\r\n   private static final boolean THIS_IS_WINDOWS = Platform.getCurrent().is(WINDOWS);\r\n   private static String wmic = null;\r\n   private static File wbem = null;\r\n@@ -69,7 +68,7 @@ public static void main(String[] args) throws Exception {\n   }\r\n \r\n   public static void traceWith(Logger log) {\r\n-    WindowsUtils.log = log;\r\n+    WindowsUtils.LOG = log;\r\n   }\r\n \r\n   /**\r\n@@ -89,7 +88,7 @@ public static void tryToKillByName(String name) {\n     try {\r\n       killByName(name);\r\n     } catch (WindowsRegistryException e) {\r\n-      log.log(Level.WARNING, \"Exception thrown\", e);\r\n+      LOG.log(Level.WARNING, \"Exception thrown\", e);\r\n     }\r\n   }\r\n \r\n@@ -101,7 +100,7 @@ public static void tryToKillByName(String name) {\n    *         command line\r\n    */\r\n   public static void kill(String[] cmdarray) throws Exception {\r\n-    StringBuffer pattern = new StringBuffer();\r\n+    StringBuilder pattern = new StringBuilder();\r\n     File executable = new File(cmdarray[0]);\r\n     /*\r\n      * For the first argument, the executable, Windows may modify the start path in any number of\r\n@@ -113,48 +112,46 @@ public static void kill(String[] cmdarray) throws Exception {\n     pattern.append(\"\\\"?.*?\\\\\\\\\");\r\n     pattern.append(executable.getName());\r\n     pattern.append(\"\\\"?\");\r\n-    for (int i = 1; i < cmdarray.length; i++) {\r\n+    for (String arg : cmdarray) {\r\n       /*\r\n        * There may be a space, but maybe not (\\\\s?), may be a quote or maybe not (\\\"?), but then\r\n        * turn on block quotation (as if *everything* had a regex backslash in front of it) with \\Q.\r\n        * Then look for the next argument (which may have ?s, \\s, \"s, who knows), turning off block\r\n        * quotation. Now ignore a final quote if any (\\\"?)\r\n        */\r\n       pattern.append(\"\\\\s?\\\"?\\\\Q\");\r\n-      String arg = cmdarray[i];\r\n       pattern.append(arg);\r\n       pattern.append(\"\\\\E\\\"?\");\r\n     }\r\n     pattern.append(\"\\\\s*\");\r\n     Pattern cmd = Pattern.compile(pattern.toString(), Pattern.CASE_INSENSITIVE);\r\n-    Map procMap = procMap();\r\n+    Map<String, String> procMap = procMap();\r\n     boolean killedOne = false;\r\n-    for (Iterator i = procMap.keySet().iterator(); i.hasNext();) {\r\n-      String commandLine = (String) i.next();\r\n+    for (String commandLine : procMap.keySet()) {\r\n       if (commandLine == null) {\r\n         continue;\r\n       }\r\n       Matcher m = cmd.matcher(commandLine);\r\n       if (m.matches()) {\r\n-        String processID = (String) procMap.get(commandLine);\r\n+        String processID = procMap.get(commandLine);\r\n         StringBuilder logMessage = new StringBuilder(\"Killing PID \");\r\n         logMessage.append(processID);\r\n         logMessage.append(\": \");\r\n         logMessage.append(commandLine);\r\n-        log.info(logMessage.toString());\r\n+        LOG.info(logMessage.toString());\r\n         killPID(processID);\r\n-        log.info(\"Killed\");\r\n+        LOG.info(\"Killed\");\r\n         killedOne = true;\r\n       }\r\n     }\r\n     if (!killedOne) {\r\n       StringBuilder errorMessage = new StringBuilder(\"Didn't find any matches for\");\r\n-      for (int i = 0; i < cmdarray.length; i++) {\r\n+      for (String arg : cmdarray) {\r\n         errorMessage.append(\" '\");\r\n-        errorMessage.append(cmdarray[i]);\r\n+        errorMessage.append(arg);\r\n         errorMessage.append('\\'');\r\n       }\r\n-      log.warning(errorMessage.toString());\r\n+      LOG.warning(errorMessage.toString());\r\n     }\r\n   }\r\n \r\n@@ -171,15 +168,15 @@ private static void killPID(String processID) {\n    * @return a map of process IDs to command lines\r\n    * @throws Exception - if something goes wrong while reading the process list\r\n    */\r\n-  public static Map procMap() throws Exception {\r\n-    log.info(\"Reading Windows Process List...\");\r\n+  public static Map<String, String> procMap() throws Exception {\r\n+    LOG.info(\"Reading Windows Process List...\");\r\n     String output = executeCommand(findWMIC(), \"process\", \"list\", \"full\", \"/format:rawxml.xsl\");\r\n     // exec.setFailonerror(true);\r\n-    log.info(\"Done, searching for processes to kill...\");\r\n+    LOG.info(\"Done, searching for processes to kill...\");\r\n     // WMIC drops an ugly zero-length batch file; clean that up\r\n-    File TempWmicBatchFile = new File(\"TempWmicBatchFile.bat\");\r\n-    if (TempWmicBatchFile.exists()) {\r\n-      TempWmicBatchFile.delete();\r\n+    File tempWmicBatchFile = new File(\"TempWmicBatchFile.bat\");\r\n+    if (tempWmicBatchFile.exists()) {\r\n+      tempWmicBatchFile.delete();\r\n     }\r\n \r\n     // TODO This would be faster if it used SAX instead of DOM\r\n@@ -190,7 +187,7 @@ public static Map procMap() throws Exception {\n     for (int i = 0; i < procList.getLength(); i++) {\r\n       Element process = (Element) procList.item(i);\r\n       NodeList propList = process.getElementsByTagName(\"PROPERTY\");\r\n-      Map<String, Object> procProps = new HashMap<String, Object>();\r\n+      Map<String, String> procProps = new HashMap<String, String>();\r\n       for (int j = 0; j < propList.getLength(); j++) {\r\n         Element property = (Element) propList.item(j);\r\n         String propName = property.getAttribute(\"NAME\");\r\n@@ -203,8 +200,8 @@ public static Map procMap() throws Exception {\n         }\r\n         procProps.put(propName, value);\r\n       }\r\n-      String processID = (String) procProps.get(\"ProcessId\");\r\n-      String commandLine = (String) procProps.get(\"CommandLine\");\r\n+      String processID = procProps.get(\"ProcessId\");\r\n+      String commandLine = procProps.get(\"CommandLine\");\r\n       processes.put(commandLine, processID);\r\n     }\r\n     return processes;\r\n@@ -241,12 +238,11 @@ public static String getProgramFiles86Path() {\n   }\r\n \r\n   private static String getEnvVarPath(final String envVar, final String defaultValue) {\r\n-    loadEnvironment();\r\n     String pf = getEnvVarIgnoreCase(envVar);\r\n     if (pf != null) {\r\n-      File ProgramFiles = new File(pf);\r\n-      if (ProgramFiles.exists()) {\r\n-        return ProgramFiles.getAbsolutePath();\r\n+      File programFiles = new File(pf);\r\n+      if (programFiles.exists()) {\r\n+        return programFiles.getAbsolutePath();\r\n       }\r\n     }\r\n     return new File(defaultValue).getAbsolutePath();\r\n@@ -269,7 +265,6 @@ private static String getFullPath(String parent, String child) {\n    * @return the path to Local AppData\r\n    */\r\n   public static String getLocalAppDataPath() {\r\n-    loadEnvironment();\r\n     final String keyLocalAppData =\r\n         \"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Shell Folders\\\\Local AppData\";\r\n     String localAppDataPath = readStringRegistryValue(keyLocalAppData);\r\n@@ -281,9 +276,8 @@ public static String getLocalAppDataPath() {\n   }\r\n \r\n   public static String getEnvVarIgnoreCase(String var) {\r\n-    loadEnvironment();\r\n-    for (Iterator i = env.keySet().iterator(); i.hasNext();) {\r\n-      String key = (String) i.next();\r\n+    Properties p = loadEnvironment();\r\n+    for (String key : p.stringPropertyNames()) {\r\n       if (key.equalsIgnoreCase(var)) {\r\n         return env.getProperty(key);\r\n       }\r\n@@ -296,12 +290,12 @@ public static String getEnvVarIgnoreCase(String var) {\n    */\r\n   public static File findSystemRoot() {\r\n     Properties p = loadEnvironment();\r\n-    String systemRootPath = (String) p.get(\"SystemRoot\");\r\n+    String systemRootPath = p.getProperty(\"SystemRoot\");\r\n     if (systemRootPath == null) {\r\n-      systemRootPath = (String) p.get(\"SYSTEMROOT\");\r\n+      systemRootPath = p.getProperty(\"SYSTEMROOT\");\r\n     }\r\n     if (systemRootPath == null) {\r\n-      systemRootPath = (String) p.get(\"systemroot\");\r\n+      systemRootPath = p.getProperty(\"systemroot\");\r\n     }\r\n     if (systemRootPath == null) {\r\n       throw new RuntimeException(\"SystemRoot apparently not set!\");\r\n@@ -331,7 +325,7 @@ public static String findWMIC() {\n         return wmic;\r\n       }\r\n     }\r\n-    log.warning(\"Couldn't find wmic! Hope it's on the path...\");\r\n+    LOG.warning(\"Couldn't find wmic! Hope it's on the path...\");\r\n     wmic = \"wmic\";\r\n     return wmic;\r\n   }\r\n@@ -348,7 +342,7 @@ public static File findWBEM() {\n     File systemRoot = findSystemRoot();\r\n     wbem = new File(systemRoot, \"system32/wbem\");\r\n     if (!wbem.exists()) {\r\n-      log.severe(\"Couldn't find wbem!\");\r\n+      LOG.severe(\"Couldn't find wbem!\");\r\n       return null;\r\n     }\r\n     return wbem;\r\n@@ -370,7 +364,7 @@ public static String findTaskKill() {\n       taskkill = taskkillExe.getAbsolutePath();\r\n       return taskkill;\r\n     }\r\n-    log.warning(\"Couldn't find taskkill! Hope it's on the path...\");\r\n+    LOG.warning(\"Couldn't find taskkill! Hope it's on the path...\");\r\n     taskkill = \"taskkill\";\r\n     return taskkill;\r\n   }\r\n@@ -400,7 +394,7 @@ public static String findReg() {\n     if (reg != null) {\r\n       return reg;\r\n     }\r\n-    log.severe(\"OS Version: \" + System.getProperty(\"os.version\"));\r\n+    LOG.severe(\"OS Version: \" + System.getProperty(\"os.version\"));\r\n     throw new WindowsRegistryException(\"Couldn't find reg.exe!\\n\" +\r\n         \"Please download it from Microsoft and install it in a standard location.\\n\"\r\n         +\r\n@@ -418,7 +412,7 @@ public static boolean isRegExeVersion1() {\n     return version1;\r\n   }\r\n \r\n-  public static Class discoverRegistryKeyType(String key) {\r\n+  public static Class<?> discoverRegistryKeyType(String key) {\r\n     if (!doesRegistryValueExist(key)) {\r\n       return null;\r\n     }\r",
      "parent_sha": "777f83214f11f3b9a43ce378863dbf58abeb944d"
    }
  },
  {
    "oid": "d4e11c4d1fd5a69f03b95b9c9bfbd4097be3f42a",
    "message": "SimonStewart: Restoring the ability to filter tests by onlyrun and method system properties\n\nr16053",
    "date": "2012-02-29T11:35:56Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/d4e11c4d1fd5a69f03b95b9c9bfbd4097be3f42a",
    "details": {
      "sha": "fadf1f2f98483f4852d42092bf698eceaf006dab",
      "filename": "java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/d4e11c4d1fd5a69f03b95b9c9bfbd4097be3f42a/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2Fdrivers%2FTestIgnorance.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/d4e11c4d1fd5a69f03b95b9c9bfbd4097be3f42a/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2Fdrivers%2FTestIgnorance.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2Fdrivers%2FTestIgnorance.java?ref=d4e11c4d1fd5a69f03b95b9c9bfbd4097be3f42a",
      "patch": "@@ -17,12 +17,16 @@\n \n package org.openqa.selenium.testing.drivers;\n \n+import com.google.common.collect.Sets;\n+\n import org.junit.runners.model.FrameworkMethod;\n import org.openqa.selenium.testing.Ignore;\n import org.openqa.selenium.testing.IgnoreComparator;\n import org.openqa.selenium.testing.JavascriptEnabled;\n \n import java.lang.reflect.AnnotatedElement;\n+import java.util.Arrays;\n+import java.util.Set;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n import static org.openqa.selenium.testing.Ignore.Driver.ALL;\n@@ -41,10 +45,22 @@\n  */\n public class TestIgnorance {\n   private IgnoreComparator ignoreComparator = new IgnoreComparator();\n+  private Set<String> methods = Sets.newHashSet();\n+  private Set<String> only = Sets.newHashSet();\n   private Browser browser;\n \n   public TestIgnorance(Browser browser) {\n     setBrowser(browser);\n+\n+    String onlyRun = System.getProperty(\"onlyrun\");\n+    if (onlyRun != null) {\n+      only.addAll(Arrays.asList(onlyRun.split(\",\")));\n+    }\n+    \n+    String method = System.getProperty(\"method\");\n+    if (method != null) {\n+      methods.addAll(Arrays.asList(method.split(\",\")));\n+    }\n   }\n \n   public boolean isIgnored(AnnotatedElement element) {\n@@ -62,10 +78,12 @@ public boolean isIgnored(FrameworkMethod method, Object test) {\n     \n     ignored |= isIgnoredDueToJavascript(test.getClass().getAnnotation(JavascriptEnabled.class));\n     ignored |= isIgnoredDueToJavascript(method.getMethod().getAnnotation(JavascriptEnabled.class));\n+\n+    ignored |= isIgnoredDueToEnvironmentVariables(method, test);\n     \n     return ignored;\n   }\n-  \n+\n   private boolean isIgnoredDueToJavascript(JavascriptEnabled enabled) {\n     if (enabled == null) {\n       return false;\n@@ -74,6 +92,11 @@ private boolean isIgnoredDueToJavascript(JavascriptEnabled enabled) {\n     return !browser.isJavascriptEnabled();\n   }\n \n+  private boolean isIgnoredDueToEnvironmentVariables(FrameworkMethod method, Object test) {\n+    return only.contains(test.getClass().getSimpleName()) ||\n+        methods.contains(method.getName());\n+  }\n+\n   public void setBrowser(Browser browser) {\n     this.browser = checkNotNull(browser, \"Browser to use must be set\");\n     addIgnoresForBrowser(browser, ignoreComparator);",
      "parent_sha": "c7e1e2c95823ef258903dbd0e67bc8d4367e0563"
    }
  },
  {
    "oid": "dc76b17d10e7bf28e11e2cacdff3fbaf4fa31d97",
    "message": "Attempt to only fail the test in marionette",
    "date": "2017-03-09T10:40:57Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/dc76b17d10e7bf28e11e2cacdff3fbaf4fa31d97",
    "details": {
      "sha": "4d732214597b8b8ae277f1749530ef2310be13b6",
      "filename": "java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/dc76b17d10e7bf28e11e2cacdff3fbaf4fa31d97/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxDriverTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/dc76b17d10e7bf28e11e2cacdff3fbaf4fa31d97/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxDriverTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FFirefoxDriverTest.java?ref=dc76b17d10e7bf28e11e2cacdff3fbaf4fa31d97",
      "patch": "@@ -422,7 +422,7 @@ private ExpectedCondition<Boolean> urlToBe(final String expectedUrl) {\n   }\n \n   @Test\n-  @NotYetImplemented(reason = \"https://github.com/mozilla/geckodriver/issues/519\")\n+  @NotYetImplemented(value = MARIONETTE, reason = \"https://github.com/mozilla/geckodriver/issues/519\")\n   public void canAccessUrlProtectedByBasicAuth() {\n     driver.get(appServer.whereIsWithCredentials(\"basicAuth\", \"test\", \"test\"));\n     assertEquals(\"authorized\", driver.findElement(By.tagName(\"h1\")).getText());",
      "parent_sha": "128ec4e2dd33f9421a529ea2f3075c062734f8fa"
    }
  },
  {
    "oid": "a5cf2d21613aecc928b8a34978079bb2f6d54347",
    "message": "It appears we do not use the SynthesizedFirefoxDriver much these days",
    "date": "2018-12-11T22:49:07Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/a5cf2d21613aecc928b8a34978079bb2f6d54347",
    "details": {
      "sha": "d948cc705c617587ecbacb094c5561389bd9680a",
      "filename": "java/client/test/org/openqa/selenium/testing/drivers/SynthesizedFirefoxDriver.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/a5cf2d21613aecc928b8a34978079bb2f6d54347/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2Fdrivers%2FSynthesizedFirefoxDriver.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/a5cf2d21613aecc928b8a34978079bb2f6d54347/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2Fdrivers%2FSynthesizedFirefoxDriver.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Ftesting%2Fdrivers%2FSynthesizedFirefoxDriver.java?ref=a5cf2d21613aecc928b8a34978079bb2f6d54347",
      "patch": "@@ -100,7 +100,7 @@ private static FirefoxProfile copyExtensionTo(FirefoxProfile profile) throws IOE\n         Files.copy(is, path);\n       }\n     } else if (runBuild) {\n-      Path output = new BuckBuild().of(\"//javascript/firefox-driver:webdriver\").go();\n+      Path output = new BuckBuild().of(\"//third_party/js/selenium:webdriver\").go();\n       ext = output.toFile();\n       cachedExt = ext;\n       runBuild = false;\n@@ -148,7 +148,7 @@ private Path actuallyGetPrefsPath() {\n       synchronized (CustomProfile.class) {\n         if (prefs == null) {\n           try {\n-            prefs = new BuckBuild().of(\"//javascript/firefox-driver:webdriver_prefs\").go();\n+            prefs = new BuckBuild().of(\"//third_party/js/selenium:webdriver_prefs\").go();\n           } catch (IOException ioe) {\n             throw new WebDriverException(ioe);\n           }",
      "parent_sha": "501d844b5706e5d2455aab600f8f953c9c75a8fd"
    }
  },
  {
    "oid": "c230149e29a69c1bb74a67963fb7183a89f69baf",
    "message": "[java] Adding a new expected condition for the new command getDomAttribute",
    "date": "2020-11-29T11:07:49Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/c230149e29a69c1bb74a67963fb7183a89f69baf",
    "details": {
      "sha": "2edc086181faf9e3a182d1299e39bcc1cfefafae",
      "filename": "java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java",
      "status": "modified",
      "additions": 30,
      "deletions": 2,
      "changes": 32,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/c230149e29a69c1bb74a67963fb7183a89f69baf/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FExpectedConditions.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/c230149e29a69c1bb74a67963fb7183a89f69baf/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FExpectedConditions.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FExpectedConditions.java?ref=c230149e29a69c1bb74a67963fb7183a89f69baf",
      "patch": "@@ -1033,12 +1033,12 @@ public String toString() {\n   }\n \n   /**\n-   * An expectation for checking given WebElement has property with a specific value\n+   * An expectation for checking given WebElement has DOM property with a specific value\n    *\n    * @param element   used to check its parameters\n    * @param property  property name\n    * @param value     used as expected property value\n-   * @return Boolean true when element has property with the value\n+   * @return Boolean true when element has DOM property with the value\n    */\n   public static ExpectedCondition<Boolean> domPropertyToBe(final WebElement element,\n                                                            final String property,\n@@ -1060,6 +1060,34 @@ public String toString() {\n     };\n   }\n \n+  /**\n+   * An expectation for checking given WebElement has DOM attribute with a specific value\n+   *\n+   * @param element   used to check its parameters\n+   * @param attribute attribute name\n+   * @param value     used as expected attribute value\n+   * @return Boolean true when element has DOM attribute with the value\n+   */\n+  public static ExpectedCondition<Boolean> domAttributeToBe(final WebElement element,\n+                                                            final String attribute,\n+                                                            final String value) {\n+    return new ExpectedCondition<Boolean>() {\n+      private String currentValue = null;\n+\n+      @Override\n+      public Boolean apply(WebDriver driver) {\n+        currentValue = element.getDomAttribute(attribute);\n+        return value.equals(currentValue);\n+      }\n+\n+      @Override\n+      public String toString() {\n+        return String.format(attribute + \" to be \\\"%s\\\". Current \" + attribute + \": \\\"%s\\\"\", value,\n+                             currentValue);\n+      }\n+    };\n+  }\n+\n   /**\n    * An expectation for checking given WebElement has attribute with a specific value\n    *",
      "parent_sha": "3b5bdf28803bb37a4c52383b7ffffdaa0db03822"
    }
  },
  {
    "oid": "32a1e5a9fe1fec30ec04bb70ac1236aed58c12f7",
    "message": "Removing a redundant private utility method",
    "date": "2013-05-06T04:54:04Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/32a1e5a9fe1fec30ec04bb70ac1236aed58c12f7",
    "details": {
      "sha": "be98c40ff28ad7c334b6d90dc2e786f10de8f987",
      "filename": "java/server/src/org/openqa/grid/common/GridDocHelper.java",
      "status": "modified",
      "additions": 6,
      "deletions": 10,
      "changes": 16,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/32a1e5a9fe1fec30ec04bb70ac1236aed58c12f7/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fcommon%2FGridDocHelper.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/32a1e5a9fe1fec30ec04bb70ac1236aed58c12f7/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fcommon%2FGridDocHelper.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fcommon%2FGridDocHelper.java?ref=32a1e5a9fe1fec30ec04bb70ac1236aed58c12f7",
      "patch": "@@ -26,20 +26,15 @@ public class GridDocHelper {\n   private static Properties gridProperties = load(\"org/openqa/grid/common/defaults/GridParameters.properties\");\n \n   public static void printHelp(String msg) {\n-    printHelpInConsole(gridProperties, msg, true);\n+    printHelpInConsole(msg, true);\n   }\n \n   public static void printHelp(String msg, boolean error) {\n-    printHelpInConsole(gridProperties, msg, error);\n+    printHelpInConsole(msg, error);\n   }\n \n \n   public static String getGridParam(String param) {\n-    return getParam(gridProperties, param);\n-  }\n-\n-\n-  private static String getParam(Properties p, String param) {\n     if (param == null) {\n       return \"\";\n     }\n@@ -51,7 +46,8 @@ private static String getParam(Properties p, String param) {\n     }\n   }\n \n-  private static void printHelpInConsole(Properties p, String msg, boolean error) {\n+\n+  private static void printHelpInConsole(String msg, boolean error) {\n     String indent = \"  \";\n     String indent2x = indent + indent;\n     if (msg != null) {\n@@ -63,9 +59,9 @@ private static void printHelpInConsole(Properties p, String msg, boolean error)\n     }\n \n     System.out.println(\"Usage :\");\n-    for (Object key : p.keySet()) {\n+    for (Object key : gridProperties.keySet()) {\n       System.out.println(indent + \"-\" + key + \":\\t\");\n-      printWrappedErrorLine(indent2x, getParam(p, key.toString()), true);\n+      printWrappedErrorLine(indent2x, getGridParam(key.toString()), true);\n       System.out.println(\"\");\n     }\n   }",
      "parent_sha": "2edd481c09fe220bd10d4d292eb24069605467f7"
    }
  },
  {
    "oid": "7ba1186d9516ae4ac8672f7dd73eb7fe7a89d295",
    "message": "Avoid re-inventing wheels with null output streams.\n\nI'm pretty sure that there's at least one of these in our\nown codebase too.",
    "date": "2017-04-11T17:24:28Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/7ba1186d9516ae4ac8672f7dd73eb7fe7a89d295",
    "details": {
      "sha": "0406a41eceb701b0c60663cce9aa2895f076b1b8",
      "filename": "java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/7ba1186d9516ae4ac8672f7dd73eb7fe7a89d295/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FGeckoDriverService.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/7ba1186d9516ae4ac8672f7dd73eb7fe7a89d295/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FGeckoDriverService.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2FGeckoDriverService.java?ref=7ba1186d9516ae4ac8672f7dd73eb7fe7a89d295",
      "patch": "@@ -22,6 +22,7 @@\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.ByteStreams;\n \n //import org.apache.commons.io.output.NullOutputStream;\n import org.openqa.selenium.WebDriverException;\n@@ -135,6 +136,7 @@ protected GeckoDriverService createDriverService(File exe, int port,\n       try {\n         GeckoDriverService service = new GeckoDriverService(exe, port, args, environment);\n         if (getLogFile() !=  null) {\n+          // TODO: This stream is leaked.\n           service.sendOutputTo(new FileOutputStream(getLogFile()));\n         } else {\n           String firefoxLogFile = System.getProperty(FirefoxDriver.SystemProperty.BROWSER_LOGFILE);\n@@ -144,12 +146,9 @@ protected GeckoDriverService createDriverService(File exe, int port,\n             } else if (\"/dev/stderr\".equals(firefoxLogFile)) {\n               service.sendOutputTo(System.err);\n             } else if (\"/dev/null\".equals(firefoxLogFile)) {\n-              service.sendOutputTo(new OutputStream() {\n-                @Override\n-                public void write(int b) throws IOException {\n-                }\n-              });\n+              service.sendOutputTo(ByteStreams.nullOutputStream());\n             } else {\n+              // TODO: The stream is leaked.\n               service.sendOutputTo(new FileOutputStream(firefoxLogFile));\n             }\n           }",
      "parent_sha": "6c7b4b4741419dfb231c7541bb2dbd3fe32d3291"
    }
  },
  {
    "oid": "aad7fe4d2aa6815a5dccfa38b0060948a69bd1e0",
    "message": "[java] Fix FluentWait's sample usage wrt durations (#10208)\n\nCommit 502301edeb4c4caf27aad125e8e75da3f22691f1 removed some\r\ndeprecated methods which used the deprecated TimeUnit class and kept\r\nonly the overloaded methods that use Java's java.time.Duration class.\r\n\r\nHowever, it missed fixing the sample usage at the beginning of the\r\njavadoc that still referred to these methods.\r\nThis patch fixes the issue and replaces the method calls in the sample\r\nusage with the newer methods that accept a Duration argument.\r\n\r\nFixes #10207",
    "date": "2021-12-31T14:05:13Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/aad7fe4d2aa6815a5dccfa38b0060948a69bd1e0",
    "details": {
      "sha": "62f7c3e9dd270cad4c881663714525665b56f25a",
      "filename": "java/src/org/openqa/selenium/support/ui/FluentWait.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/aad7fe4d2aa6815a5dccfa38b0060948a69bd1e0/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FFluentWait.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/aad7fe4d2aa6815a5dccfa38b0060948a69bd1e0/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FFluentWait.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fsupport%2Fui%2FFluentWait.java?ref=aad7fe4d2aa6815a5dccfa38b0060948a69bd1e0",
      "patch": "@@ -49,8 +49,8 @@\n  *   // Waiting 30 seconds for an element to be present on the page, checking\n  *   // for its presence once every 5 seconds.\n  *   Wait&lt;WebDriver&gt; wait = new FluentWait&lt;WebDriver&gt;(driver)\n- *       .withTimeout(30, SECONDS)\n- *       .pollingEvery(5, SECONDS)\n+ *       .withTimeout(Duration.ofSeconds(30L))\n+ *       .pollingEvery(Duration.ofSeconds(5L))\n  *       .ignoring(NoSuchElementException.class);\n  *\n  *   WebElement foo = wait.until(new Function&lt;WebDriver, WebElement&gt;() {",
      "parent_sha": "ad48d31a7d88d4dcc6f2ead77f7e0490118a023c"
    }
  },
  {
    "oid": "c46671f96e9be203c627ca1920c23cecfd69c8b1",
    "message": "fix mixed content issue\n\nSigned-off-by: Luke Inman-Semerau <luke.semerau@gmail.com>",
    "date": "2016-02-23T18:19:18Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/c46671f96e9be203c627ca1920c23cecfd69c8b1",
    "details": {
      "sha": "ebabd4250b8cf8a73a8b280bf5b170e6d9ec6e87",
      "filename": "java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/c46671f96e9be203c627ca1920c23cecfd69c8b1/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2Fservlet%2Fbeta%2FConsoleServlet.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/c46671f96e9be203c627ca1920c23cecfd69c8b1/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2Fservlet%2Fbeta%2FConsoleServlet.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fweb%2Fservlet%2Fbeta%2FConsoleServlet.java?ref=c46671f96e9be203c627ca1920c23cecfd69c8b1",
      "patch": "@@ -92,7 +92,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)\n     builder.append(\"<html>\");\n     builder.append(\"<head>\");\n     builder\n-        .append(\"<script src='http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js'></script>\");\n+        .append(\"<script src='//ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js'></script>\");\n \n     builder.append(\"<script src='/grid/resources/org/openqa/grid/images/console-beta.js'></script>\");\n ",
      "parent_sha": "076203a4d335ad9130c6ff111d71a1adfab89084"
    }
  },
  {
    "oid": "80b69094eb44536c57a83c53ac036d05625cd377",
    "message": "Make the BeanToJsonConverter a little less if/then",
    "date": "2018-05-01T09:12:30Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/80b69094eb44536c57a83c53ac036d05625cd377",
    "details": {
      "sha": "d83eba2435b81b075d512cb2bd61ea981e4459d1",
      "filename": "java/client/src/org/openqa/selenium/json/BeanToJsonConverter.java",
      "status": "modified",
      "additions": 98,
      "deletions": 133,
      "changes": 231,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/80b69094eb44536c57a83c53ac036d05625cd377/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fjson%2FBeanToJsonConverter.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/80b69094eb44536c57a83c53ac036d05625cd377/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fjson%2FBeanToJsonConverter.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fjson%2FBeanToJsonConverter.java?ref=80b69094eb44536c57a83c53ac036d05625cd377",
      "patch": "@@ -17,29 +17,31 @@\n \n package org.openqa.selenium.json;\n \n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import com.google.common.collect.ImmutableMap;\n import com.google.gson.Gson;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonNull;\n import com.google.gson.JsonObject;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.JsonParser;\n import com.google.gson.JsonPrimitive;\n \n-import org.openqa.selenium.Cookie;\n import org.openqa.selenium.WebDriverException;\n import org.openqa.selenium.logging.LogLevelMapping;\n import org.openqa.selenium.remote.SessionId;\n \n import java.io.File;\n-import java.lang.reflect.Array;\n import java.lang.reflect.Method;\n import java.net.URL;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Date;\n import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n import java.util.logging.Level;\n+import java.util.stream.Collector;\n \n /**\n  * Utility class for converting between JSON and Java Objects.\n@@ -50,12 +52,75 @@ class BeanToJsonConverter {\n \n   private final Gson gson;\n \n+  private final Map<Predicate<Class<?>>, BiFunction<Integer, Object, JsonElement>> converters;\n+\n   public BeanToJsonConverter() {\n     this(Json.GSON);\n   }\n \n   public BeanToJsonConverter(Gson gson) {\n     this.gson = gson;\n+\n+    this.converters = ImmutableMap.<Predicate<Class<?>>, BiFunction<Integer, Object, JsonElement>>builder()\n+        // Java types\n+\n+        .put(Boolean.class::isAssignableFrom, (depth, o) -> new JsonPrimitive((Boolean) o))\n+        .put(CharSequence.class::isAssignableFrom, (depth, o) -> new JsonPrimitive(String.valueOf(o)))\n+        .put(Date.class::isAssignableFrom, (depth, o) -> new JsonPrimitive(MILLISECONDS.toSeconds(((Date) o).getTime())))\n+        .put(Enum.class::isAssignableFrom, (depth, o) -> new JsonPrimitive(o.toString()))\n+        .put(File.class::isAssignableFrom, (depth, o) -> new JsonPrimitive(((File) o).getAbsolutePath()))\n+        .put(Number.class::isAssignableFrom, (depth, o) -> new JsonPrimitive((Number) o))\n+        .put(URL.class::isAssignableFrom, (depth, o) -> new JsonPrimitive(((URL) o).toExternalForm()))\n+\n+        // *sigh* gson\n+        .put(JsonElement.class::isAssignableFrom, (depth, o) -> (JsonElement) o)\n+\n+        // Selenium classes\n+        .put(Level.class::isAssignableFrom, (depth, o) -> new JsonPrimitive(LogLevelMapping.getName((Level) o)))\n+        .put(SessionId.class::isAssignableFrom, (depth, o) -> {\n+          JsonObject converted = new JsonObject();\n+          converted.addProperty(\"value\", o.toString());\n+          return converted;\n+        })\n+\n+\n+        // Special handling of asMap and toJson\n+        .put(\n+            cls -> getMethod(cls, \"toJson\") != null,\n+            (depth, o) -> convertUsingMethod(\"toJson\", o, depth))\n+        .put(\n+            cls -> getMethod(cls, \"asMap\") != null,\n+            (depth, o) -> convertUsingMethod(\"asMap\", o, depth))\n+        .put(\n+            cls -> getMethod(cls, \"toMap\") != null,\n+            (depth, o) -> convertUsingMethod(\"toMap\", o, depth))\n+\n+        // And then the collection types\n+        .put(\n+            Collection.class::isAssignableFrom,\n+            (depth, o) -> ((Collection<?>) o).stream()\n+                .map(obj -> convertObject(obj, depth - 1))\n+                .collect(Collector.of(JsonArray::new, JsonArray::add, (l, r) -> { l.addAll(r); return l;})))\n+        .put(\n+            Map.class::isAssignableFrom,\n+            (depth, o) -> {\n+               JsonObject converted = new JsonObject();\n+               ((Map<?, ?>) o).forEach(\n+                   (key, value) -> converted.add(String.valueOf(key), convertObject(value, depth - 1)));\n+               return converted;\n+             })\n+        .put(\n+            Class::isArray,\n+            (depth, o) -> {\n+              JsonArray converted = new JsonArray();\n+              Arrays.stream(((Object[]) o)).forEach(value -> converted.add(convertObject(value, depth -1)));\n+              return converted;\n+            }\n+        )\n+\n+        // Finally, attempt to convert as an object\n+        .put(cls -> true, (depth, o) -> mapObject(o, depth - 1))\n+        .build();\n   }\n \n   /**\n@@ -71,8 +136,10 @@ public String convert(Object object) {\n     }\n \n     try {\n-      JsonElement json = convertObject(object);\n+      JsonElement json = convertObject(object, MAX_DEPTH);\n       return gson.toJson(json);\n+    } catch (WebDriverException e) {\n+      throw e;\n     } catch (Exception e) {\n       throw new WebDriverException(\"Unable to convert: \" + object, e);\n     }\n@@ -88,15 +155,7 @@ public String convert(Object object) {\n    */\n   @Deprecated\n   JsonElement convertObject(Object object) {\n-    if (object == null) {\n-      return JsonNull.INSTANCE;\n-    }\n-\n-    try {\n-      return convertObject(object, MAX_DEPTH);\n-    } catch (Exception e) {\n-      throw new WebDriverException(\"Unable to convert: \" + object, e);\n-    }\n+    return convertObject(object, MAX_DEPTH);\n   }\n \n   @SuppressWarnings(\"unchecked\")\n@@ -105,124 +164,17 @@ private JsonElement convertObject(Object toConvert, int maxDepth) {\n       return JsonNull.INSTANCE;\n     }\n \n-    if (toConvert instanceof Boolean) {\n-      return new JsonPrimitive((Boolean) toConvert);\n-    }\n-\n-    if (toConvert instanceof CharSequence) {\n-      return new JsonPrimitive(String.valueOf(toConvert));\n-    }\n-\n-    if (toConvert instanceof Number) {\n-      return new JsonPrimitive((Number) toConvert);\n-    }\n-\n-    if (toConvert instanceof Level) {\n-      return new JsonPrimitive(LogLevelMapping.getName((Level) toConvert));\n-    }\n-\n-    if (toConvert.getClass().isEnum() || toConvert instanceof Enum) {\n-      return new JsonPrimitive(toConvert.toString());\n-    }\n-\n-    if (toConvert instanceof Map) {\n-      Map<String, Object> map = (Map<String, Object>) toConvert;\n-      if (map.size() == 1 && map.containsKey(\"w3c cookie\")) {\n-        return convertObject(map.get(\"w3c cookie\"));\n-      }\n-\n-      JsonObject converted = new JsonObject();\n-      for (Map.Entry<String, Object> entry : map.entrySet()) {\n-        converted.add(entry.getKey(), convertObject(entry.getValue(), maxDepth - 1));\n-      }\n-      return converted;\n-    }\n-\n-    if (toConvert instanceof JsonElement) {\n-      return (JsonElement) toConvert;\n-    }\n-\n-    if (toConvert instanceof Collection) {\n-      JsonArray array = new JsonArray();\n-      for (Object o : (Collection<?>) toConvert) {\n-        array.add(convertObject(o, maxDepth - 1));\n-      }\n-      return array;\n-    }\n-\n-    if (toConvert.getClass().isArray()) {\n-      JsonArray converted = new JsonArray();\n-      int length = Array.getLength(toConvert);\n-      for (int i = 0; i < length; i++) {\n-        converted.add(convertObject(Array.get(toConvert, i), maxDepth - 1));\n-      }\n-      return converted;\n-    }\n-\n-    if (toConvert instanceof SessionId) {\n-      JsonObject converted = new JsonObject();\n-      converted.addProperty(\"value\", toConvert.toString());\n-      return converted;\n-    }\n-\n-    if (toConvert instanceof Date) {\n-      return new JsonPrimitive(TimeUnit.MILLISECONDS.toSeconds(((Date) toConvert).getTime()));\n-    }\n-\n-    if (toConvert instanceof File) {\n-      return new JsonPrimitive(((File) toConvert).getAbsolutePath());\n-    }\n-\n-    if (toConvert instanceof URL) {\n-      return new JsonPrimitive(((URL) toConvert).toExternalForm());\n-    }\n-\n-    Method toJson = getMethod(toConvert, \"toJson\");\n-    if (toJson != null) {\n-      try {\n-        Object res = toJson.invoke(toConvert);\n-        if (res instanceof JsonElement) {\n-          return (JsonElement) res;\n-        }\n-\n-        if (res instanceof Map) {\n-          return convertObject(res);\n-        } else if (res instanceof Collection) {\n-          return convertObject(res);\n-        } else if (res instanceof String) {\n-          try {\n-            return new JsonParser().parse((String) res);\n-          } catch (JsonParseException e) {\n-            return new JsonPrimitive((String) res);\n-          }\n-        }\n-      } catch (ReflectiveOperationException e) {\n-        throw new WebDriverException(e);\n-      }\n-    }\n-\n-    Method toMap = getMethod(toConvert, \"toMap\");\n-    if (toMap == null) {\n-      toMap = getMethod(toConvert, \"asMap\");\n-    }\n-    if (toMap != null) {\n-      try {\n-        return convertObject(toMap.invoke(toConvert), maxDepth - 1);\n-      } catch (ReflectiveOperationException e) {\n-        throw new WebDriverException(e);\n-      }\n-    }\n-\n-    try {\n-      return mapObject(toConvert, maxDepth - 1, toConvert instanceof Cookie);\n-    } catch (Exception e) {\n-      throw new WebDriverException(e);\n-    }\n+    return converters.entrySet().stream()\n+        .filter(entry -> entry.getKey().test(toConvert.getClass()))\n+        .map(Map.Entry::getValue)\n+        .findFirst()\n+        .map(to -> to.apply(maxDepth, toConvert))\n+        .orElse(null);\n   }\n \n-  private Method getMethod(Object toConvert, String methodName) {\n+  private Method getMethod(Class<?> clazz, String methodName) {\n     try {\n-      Method method = toConvert.getClass().getMethod(methodName);\n+      Method method = clazz.getMethod(methodName);\n       method.setAccessible(true);\n       return method;\n     } catch (NoSuchMethodException | SecurityException e) {\n@@ -233,7 +185,18 @@ private Method getMethod(Object toConvert, String methodName) {\n \n   }\n \n-  private JsonElement mapObject(Object toConvert, int maxDepth, boolean skipNulls) throws Exception {\n+  private JsonElement convertUsingMethod(String methodName, Object toConvert, int depth) {\n+    try {\n+      Method method = getMethod(toConvert.getClass(), methodName);\n+      Object value = method.invoke(toConvert);\n+\n+      return convertObject(value, depth);\n+    } catch (ReflectiveOperationException e) {\n+      throw new WebDriverException(e);\n+    }\n+  }\n+\n+  private JsonElement mapObject(Object toConvert, int maxDepth) {\n     if (maxDepth < 1) {\n       return JsonNull.INSTANCE;\n     }\n@@ -259,9 +222,11 @@ private JsonElement mapObject(Object toConvert, int maxDepth, boolean skipNulls)\n \n       readMethod.setAccessible(true);\n \n-      Object result = readMethod.invoke(toConvert);\n-      if (!skipNulls || result != null) {\n+      try {\n+        Object result = readMethod.invoke(toConvert);\n         mapped.add(pd.getName(), convertObject(result, maxDepth - 1));\n+      } catch (ReflectiveOperationException e) {\n+        throw new WebDriverException(e);\n       }\n     }\n ",
      "parent_sha": "211fd70f83f95c0e7fd09f5092510ccf49ae9ff6"
    }
  },
  {
    "oid": "3b7428a4a8df371a24baa9e1136991b90616f75a",
    "message": "[grid] Switching to fine log level when clearing caches in LocalNode",
    "date": "2023-06-28T21:02:19Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/3b7428a4a8df371a24baa9e1136991b90616f75a",
    "details": {
      "sha": "875962e03c8251c3e5757ec61f4e921d4a874b8d",
      "filename": "java/src/org/openqa/selenium/grid/node/local/LocalNode.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/3b7428a4a8df371a24baa9e1136991b90616f75a/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/3b7428a4a8df371a24baa9e1136991b90616f75a/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fnode%2Flocal%2FLocalNode.java?ref=3b7428a4a8df371a24baa9e1136991b90616f75a",
      "patch": "@@ -223,15 +223,15 @@ protected LocalNode(\n                           .ifPresent(\n                               value -> {\n                                 downloadsTempFileSystem.invalidate(value);\n-                                LOG.warning(\n+                                LOG.fine(\n                                     \"Removing Downloads folder associated with \"\n                                         + notification.getKey());\n                               });\n                       Optional.ofNullable(notification.getKey())\n                           .ifPresent(\n                               value -> {\n                                 uploadsTempFileSystem.invalidate(value);\n-                                LOG.warning(\n+                                LOG.fine(\n                                     \"Removing Uploads folder associated with \"\n                                         + notification.getKey());\n                               });",
      "parent_sha": "5ba17d6a3babe57e1c0616045cdfec7f0843d280"
    }
  },
  {
    "oid": "b34c23e66f106897824512b0a9eb62ab15b1127a",
    "message": "DanielWagnerHall: Don't change the paths of tests looked up in the prod code, as it is part of the external API - we don't actually use these paths in our tests, so it shouldn't break things.\n\nr18434",
    "date": "2013-01-09T12:13:51Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/b34c23e66f106897824512b0a9eb62ab15b1127a",
    "details": {
      "sha": "bb0bf945be8add27ac8778baa3ea0a0785fa9de7",
      "filename": "java/server/src/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/b34c23e66f106897824512b0a9eb62ab15b1127a/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fhtmlrunner%2FHTMLLauncher.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/b34c23e66f106897824512b0a9eb62ab15b1127a/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fhtmlrunner%2FHTMLLauncher.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fhtmlrunner%2FHTMLLauncher.java?ref=b34c23e66f106897824512b0a9eb62ab15b1127a",
      "patch": "@@ -188,10 +188,10 @@ public String runHTMLSuite(String browser, String browserURL, File suiteFile, Fi\n         browser.startsWith(\"*iehta\") || browser.startsWith(\"*iexplore\")) {\r\n       suiteURL =\r\n           \"http://localhost:\" + remoteControl.getConfiguration().getPortDriversShouldContact() +\r\n-              \"/selenium-server/org/openqa/selenium/tests/\" + suiteFile.getName();\r\n+              \"/selenium-server/tests/\" + suiteFile.getName();\r\n     } else {\r\n       suiteURL =\r\n-          Urls.toProtocolHostAndPort(browserURL) + \"/selenium-server/org/openqa/selenium/tests/\" + suiteFile.getName();\r\n+          Urls.toProtocolHostAndPort(browserURL) + \"/selenium-server/tests/\" + suiteFile.getName();\r\n     }\r\n     return runHTMLSuite(browser, browserURL, suiteURL, outputFile, timeoutInSeconds, multiWindow,\r\n         \"info\");\r",
      "parent_sha": "6608e16d7520bfd6221b61662e1d08e3ac19a3d1"
    }
  },
  {
    "oid": "8755948934a75a4d497bb35b143017fc6f477fe0",
    "message": "[grid] Improving DistributorTest (#9546)",
    "date": "2021-06-04T11:34:44Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/8755948934a75a4d497bb35b143017fc6f477fe0",
    "details": {
      "sha": "ebb387bca82c801d2cc2af3a2e5a8dca1b4785bb",
      "filename": "java/server/test/org/openqa/selenium/grid/distributor/DistributorTest.java",
      "status": "modified",
      "additions": 22,
      "deletions": 21,
      "changes": 43,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/8755948934a75a4d497bb35b143017fc6f477fe0/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fdistributor%2FDistributorTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/8755948934a75a4d497bb35b143017fc6f477fe0/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fdistributor%2FDistributorTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fdistributor%2FDistributorTest.java?ref=8755948934a75a4d497bb35b143017fc6f477fe0",
      "patch": "@@ -29,7 +29,6 @@\n import org.openqa.selenium.MutableCapabilities;\n import org.openqa.selenium.NoSuchSessionException;\n import org.openqa.selenium.SessionNotCreatedException;\n-import org.openqa.selenium.TimeoutException;\n import org.openqa.selenium.events.EventBus;\n import org.openqa.selenium.events.local.GuavaEventBus;\n import org.openqa.selenium.grid.data.Availability;\n@@ -119,7 +118,7 @@ private static <A, B> EitherAssert<A, B> assertThatEither(Either<A, B> either) {\n   @Before\n   public void setUp() throws URISyntaxException {\n     nodeUri = new URI(\"http://example:5678\");\n-    routableUri = new URI(String.format(\"http://localhost:%s\", PortProber.findFreePort()));\n+    routableUri = createUri();\n     tracer = DefaultTestTracer.createTracer();\n     bus = new GuavaEventBus();\n     LocalSessionMap sessions = new LocalSessionMap(tracer, bus);\n@@ -198,7 +197,7 @@ public void shouldStartHeartBeatOnNodeRegistration() {\n     }\n \n     assertThat(eventFired).isTrue();\n-    assertThat(heartbeatStarted).isTrue();\n+    assertThat(heartbeatStarted.get()).isTrue();\n   }\n \n   @Test\n@@ -559,6 +558,8 @@ public void theMostLightlyLoadedNodeIsSelectedFirst() {\n       .add(massive);\n \n     wait.until(obj -> distributor.getStatus().getNodes().size() == 4);\n+    wait.until(ignored -> distributor.getStatus().getNodes().stream().allMatch(\n+      node -> node.getAvailability() == UP && node.hasCapacity()));\n     wait.until(obj -> distributor.getStatus().hasCapacity());\n \n     Either<SessionNotCreatedException, CreateSessionResponse> result =\n@@ -684,10 +685,11 @@ public void shouldIncludeHostsThatAreUpInHostList() {\n       queue,\n       new DefaultSlotSelector(),\n       registrationSecret,\n-      Duration.ofMinutes(5),\n+      Duration.ofSeconds(1),\n       false);\n     handler.addHandler(distributor);\n     distributor.add(alwaysDown);\n+    waitForAllNodesToMeetCondition(distributor, 1, DOWN);\n \n     // Should be unable to create a session because the node is down.\n     Either<SessionNotCreatedException, CreateSessionResponse> result =\n@@ -904,10 +906,11 @@ public void shouldReturnNodesThatWereDownToPoolOfNodesOnceTheyMarkTheirHealthChe\n       queue,\n       new DefaultSlotSelector(),\n       registrationSecret,\n-      Duration.ofMinutes(5),\n+      Duration.ofSeconds(1),\n       false);\n     handler.addHandler(distributor);\n     distributor.add(node);\n+    waitForAllNodesToMeetCondition(distributor, 1, DOWN);\n \n     // Should be unable to create a session because the node is down.\n     Either<SessionNotCreatedException, CreateSessionResponse> result =\n@@ -1131,7 +1134,7 @@ public void shouldFallbackToSecondAvailableCapabilitiesIfFirstNotAvailable() {\n   public void shouldFallbackToSecondAvailableCapabilitiesIfFirstThrowsOnCreation() {\n     local.add(createBrokenNode(new ImmutableCapabilities(\"browserName\", \"not cheese\")));\n     local.add(createNode(new ImmutableCapabilities(\"browserName\", \"cheese\"), 1, 0));\n-    waitToHaveCapacity(local);\n+    waitForAllNodesToHaveCapacity(local, 2);\n \n     SessionRequest sessionRequest = new SessionRequest(\n       new RequestId(UUID.randomUUID()),\n@@ -1179,21 +1182,19 @@ private void waitToHaveCapacity(Distributor distributor) {\n   }\n \n   private void waitForAllNodesToHaveCapacity(Distributor distributor, int nodeCount) {\n-    try {\n-      new FluentWait<>(distributor)\n-        .withTimeout(Duration.ofSeconds(5))\n-        .pollingEvery(Duration.ofMillis(100))\n-        .until(d -> {\n-          Set<NodeStatus> nodes = d.getStatus().getNodes();\n-          return nodes.size() == nodeCount && nodes.stream().allMatch(\n-            node -> node.getAvailability() == UP && node.hasCapacity());\n-        });\n-    } catch (TimeoutException ex) {\n-      Set<NodeStatus> nodes = distributor.getStatus().getNodes();\n-      System.out.println(\"*************\");\n-      System.out.println(\"\" + nodes.size());\n-      nodes.forEach(node -> System.out.println(\"\" + node.hasCapacity()));\n-    }\n+    waitForAllNodesToMeetCondition(distributor, nodeCount, UP);\n+  }\n+\n+  private void waitForAllNodesToMeetCondition(Distributor distributor, int nodeCount,\n+                                              Availability availability) {\n+    new FluentWait<>(distributor)\n+      .withTimeout(Duration.ofSeconds(5))\n+      .pollingEvery(Duration.ofMillis(100))\n+      .until(d -> {\n+        Set<NodeStatus> nodes = d.getStatus().getNodes();\n+        return nodes.size() == nodeCount && nodes.stream().allMatch(\n+          node -> node.getAvailability() == availability && node.hasCapacity());\n+      });\n   }\n \n   class HandledSession extends Session implements HttpHandler {",
      "parent_sha": "6f25a6f9de78812c3dc3d4cc726071637a2187b9"
    }
  },
  {
    "oid": "505abc310f078cb07c5a8792f29c6165f98cb1bd",
    "message": "[java] Drop the prefix created by Bazel (#12173)\n\nDrop the prefix created by Bazel\r\n\r\nCo-authored-by: Diego Molina <diemol@users.noreply.github.com>",
    "date": "2023-06-09T09:03:53Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/505abc310f078cb07c5a8792f29c6165f98cb1bd",
    "details": {
      "sha": "4b87a8a75718c51cfb9984e26169ff856fb3ace7",
      "filename": "java/src/dev/selenium/tools/modules/ModuleGenerator.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/505abc310f078cb07c5a8792f29c6165f98cb1bd/java%2Fsrc%2Fdev%2Fselenium%2Ftools%2Fmodules%2FModuleGenerator.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/505abc310f078cb07c5a8792f29c6165f98cb1bd/java%2Fsrc%2Fdev%2Fselenium%2Ftools%2Fmodules%2FModuleGenerator.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Fdev%2Fselenium%2Ftools%2Fmodules%2FModuleGenerator.java?ref=505abc310f078cb07c5a8792f29c6165f98cb1bd",
      "patch": "@@ -466,8 +466,14 @@ private static class MyModuleVisitor extends VoidVisitorAdapter<Void> {\n \n     @Override\n     public void visit(ModuleRequiresDirective n, Void arg) {\n+      String name = n.getNameAsString();\n+      if (name.startsWith(\"processed_\")) {\n+        // When 'Automatic-Module-Name' is not set, we must derive the module name from the jar file\n+        // name. Therefore, the 'processed_' prefix added by bazel must be removed to get the name.\n+        name = name.substring(10);\n+      }\n       byteBuddyVisitor.visitRequire(\n-          n.getNameAsString(), getByteBuddyModifier(n.getModifiers()), null);\n+        name, getByteBuddyModifier(n.getModifiers()), null);\n     }\n \n     @Override",
      "parent_sha": "3dc8903766f121e638352ff9c27f87bd8bceb0ae"
    }
  },
  {
    "oid": "1af46f64e8ff1034da4e0e449f7dea1e803b44a3",
    "message": "DouniaBerrada: Fixing JS bug in Android driver.\n\n\nr9487",
    "date": "2010-08-19T12:11:27Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/1af46f64e8ff1034da4e0e449f7dea1e803b44a3",
    "details": {
      "sha": "0ecc2198d912f773d0061e75f6dea3861e9c4d60",
      "filename": "android/server/src/java/org/openqa/selenium/android/JavascriptDomAccessor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/1af46f64e8ff1034da4e0e449f7dea1e803b44a3/android%2Fserver%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fandroid%2FJavascriptDomAccessor.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/1af46f64e8ff1034da4e0e449f7dea1e803b44a3/android%2Fserver%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fandroid%2FJavascriptDomAccessor.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/android%2Fserver%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fandroid%2FJavascriptDomAccessor.java?ref=1af46f64e8ff1034da4e0e449f7dea1e803b44a3",
      "patch": "@@ -116,7 +116,10 @@ public WebElement getElementById(String using, String elementId) {\n         CONTEXT_NODE + \r\n         \"var result = [];\" +\r\n         \"if (\" + driver.getCurrentFrame() + \".document.getElementById) {\" +\r\n-        \"  result.push(\" + driver.getCurrentFrame() +\".document.getElementById(arguments[0]));\" +\r\n+        \"  var element = \" + driver.getCurrentFrame() +\".document.getElementById(arguments[0]);\" +\r\n+        \"  if (element != null) {\" +\r\n+        \"    result.push(element);\" +\r\n+        \"  }\" +\r\n         \"} else {\" +\r\n         installXPathJs() +\r\n         \"  var it = \" + driver.getCurrentFrame() +\r",
      "parent_sha": "bfa880851e64cc4219f6bcfd857212ca897f3e6c"
    }
  },
  {
    "oid": "3d3cdc1a2cf185aa38f647e97dc87cca27001698",
    "message": "[java] Deleting unnecessary check, looping over an empty collection is OK",
    "date": "2020-04-14T20:41:21Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/3d3cdc1a2cf185aa38f647e97dc87cca27001698",
    "details": {
      "sha": "1db35e31d5a2b62de2198e1c4a2de874aa11500b",
      "filename": "java/server/src/org/openqa/selenium/grid/server/HelpFlags.java",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/3d3cdc1a2cf185aa38f647e97dc87cca27001698/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FHelpFlags.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/3d3cdc1a2cf185aa38f647e97dc87cca27001698/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FHelpFlags.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FHelpFlags.java?ref=3d3cdc1a2cf185aa38f647e97dc87cca27001698",
      "patch": "@@ -27,7 +27,6 @@\n \n import java.io.PrintStream;\n import java.util.Map;\n-import java.util.Set;\n import java.util.TreeMap;\n \n public class HelpFlags {\n@@ -92,17 +91,12 @@ public boolean dumpConfig(Config config, PrintStream dumpTo) {\n         continue;\n       }\n \n-      Set<String> allOptions = config.getOptions(section);\n-      if (allOptions.isEmpty()) {\n-        continue;\n-      }\n-\n-      for (String option : allOptions) {\n+      config.getOptions(section).forEach(option -> {\n         config.get(section, option).ifPresent(value -> {\n           Map<String, Object> values = toOutput.computeIfAbsent(section, ignored -> new TreeMap<>());\n           values.put(option, value);\n         });\n-      }\n+      });\n     }\n \n     dumpTo.print(new Json().toJson(toOutput));",
      "parent_sha": "58b3485b826c2544ee98a898cf699da076caec1f"
    }
  },
  {
    "oid": "1caa6bf5ee8f6550c4965086314b975be5513ed1",
    "message": "Fixing SRC-23, adding more logging when reg.exe fails\n\nr2090",
    "date": "2006-04-15T00:42:35Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/1caa6bf5ee8f6550c4965086314b975be5513ed1",
    "details": {
      "sha": "ec2dd9729153450c0b2a6183dc03923fa827c565",
      "filename": "server/src/main/java/org/openqa/selenium/server/browserlaunchers/WindowsUtils.java",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/1caa6bf5ee8f6550c4965086314b975be5513ed1/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FWindowsUtils.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/1caa6bf5ee8f6550c4965086314b975be5513ed1/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FWindowsUtils.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FWindowsUtils.java?ref=1caa6bf5ee8f6550c4965086314b975be5513ed1",
      "patch": "@@ -451,7 +451,9 @@ public static void writeStringRegistryValue(String key, String data) {\n         exec.setProject(p);\r\n         exec.setTaskType(\"reg\");\r\n         exec.setExecutable(findReg());\r\n-        exec.setFailonerror(true);\r\n+        exec.setFailonerror(false);\r\n+        exec.setResultProperty(\"result\");\r\n+        exec.setOutputproperty(\"output\");\r\n         exec.createArg().setValue(\"add\");\r\n         if (isRegExeVersion1()) {\r\n         \texec.createArg().setValue(key + \"=\" + data);\r\n@@ -465,6 +467,11 @@ public static void writeStringRegistryValue(String key, String data) {\n             exec.createArg().setValue(\"/f\");\r\n         }\r\n         exec.execute();\r\n+        String result = p.getProperty(\"result\");\r\n+        String output = p.getProperty(\"output\");\r\n+        if (!\"0\".equals(result)) {\r\n+            throw new RuntimeException(\"exec return code \" + result + \": \" + output);\r\n+        }\r\n     }\r\n     \r\n     public static void writeIntRegistryValue(String key, int data) {\r\n@@ -473,7 +480,9 @@ public static void writeIntRegistryValue(String key, int data) {\n         exec.setProject(p);\r\n         exec.setTaskType(\"reg\");\r\n         exec.setExecutable(findReg());\r\n-        exec.setFailonerror(true);\r\n+        exec.setFailonerror(false);\r\n+        exec.setResultProperty(\"result\");\r\n+        exec.setOutputproperty(\"output\");\r\n         exec.createArg().setValue(\"add\");\r\n         if (isRegExeVersion1()) {\r\n         \texec.createArg().setValue(key + \"=\" + Integer.toString(data));\r\n@@ -490,6 +499,11 @@ public static void writeIntRegistryValue(String key, int data) {\n             exec.createArg().setValue(\"/f\");\r\n         }\r\n         exec.execute();\r\n+        String result = p.getProperty(\"result\");\r\n+        String output = p.getProperty(\"output\");\r\n+        if (!\"0\".equals(result)) {\r\n+            throw new RuntimeException(\"exec return code \" + result + \": \" + output);\r\n+        }\r\n     }\r\n     \r\n     public static void writeBooleanRegistryValue(String key, boolean data) {\r\n@@ -502,7 +516,9 @@ public static void deleteRegistryValue(String key) {\n         exec.setProject(p);\r\n         exec.setTaskType(\"reg\");\r\n         exec.setExecutable(findReg());\r\n-        exec.setFailonerror(true);\r\n+        exec.setFailonerror(false);\r\n+        exec.setResultProperty(\"result\");\r\n+        exec.setOutputproperty(\"output\");\r\n         if (isRegExeVersion1()) {\r\n         \texec.createArg().setValue(\"delete\");\r\n             exec.createArg().setValue(key);\r\n@@ -516,6 +532,11 @@ public static void deleteRegistryValue(String key) {\n             exec.createArg().setValue(\"/f\");\r\n         }\r\n         exec.execute();\r\n+        String result = p.getProperty(\"result\");\r\n+        String output = p.getProperty(\"output\");\r\n+        if (!\"0\".equals(result)) {\r\n+            throw new RuntimeException(\"exec return code \" + result + \": \" + output);\r\n+        }\r\n     }\r\n \r\n     /** Executes reg.exe to query the registry */\r\n@@ -525,7 +546,9 @@ private static String runRegQuery(String key) {\n         exec.setProject(p);\r\n         exec.setTaskType(\"reg\");\r\n         exec.setExecutable(findReg());\r\n-        exec.setFailonerror(true);\r\n+        exec.setFailonerror(false);\r\n+        exec.setResultProperty(\"result\");\r\n+        exec.setOutputproperty(\"output\");\r\n         exec.createArg().setValue(\"query\");\r\n         if (isRegExeVersion1()) {\r\n         \texec.createArg().setValue(key);\r",
      "parent_sha": "e077df0131c9398d687e9fe691297a73e3e616d4"
    }
  },
  {
    "oid": "7510ff9a5af893d18155bc1befe5e8980a6bb754",
    "message": "server: Catching more specific exception and improving the warning message",
    "date": "2015-05-28T22:00:06Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/7510ff9a5af893d18155bc1befe5e8980a6bb754",
    "details": {
      "sha": "d6e53c7a175909aa54f33ddb92973db4c2fafe56",
      "filename": "java/server/src/org/openqa/grid/common/RegistrationRequest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/7510ff9a5af893d18155bc1befe5e8980a6bb754/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fcommon%2FRegistrationRequest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/7510ff9a5af893d18155bc1befe5e8980a6bb754/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fcommon%2FRegistrationRequest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Fcommon%2FRegistrationRequest.java?ref=7510ff9a5af893d18155bc1befe5e8980a6bb754",
      "patch": "@@ -62,7 +62,7 @@ public class RegistrationRequest {\n \n   private String[] args;\n \n-  private static final Logger log = Logger.getLogger(RegistrationRequest.class.getName());\n+  private static final Logger LOG = Logger.getLogger(RegistrationRequest.class.getName());\n \n   // some special param for capability\n   public static final String APP = \"applicationName\";\n@@ -195,8 +195,10 @@ public int getConfigAsInt(String param, int defaultValue) {\n     }\n     try {\n       return Integer.parseInt(o.toString());\n-    } catch (Throwable t) {\n-      log.warning(\"Error. \" + param + \" is supposed to be an int. Keeping default of \" + defaultValue);\n+    } catch (NumberFormatException t) {\n+      LOG.warning(String.format(\n+        \"Parameter %s has value '%s', but it is supposed to be an int. Keeping default of %s\",\n+        param, o, defaultValue));\n       return defaultValue;\n     }\n \n@@ -321,7 +323,7 @@ private static RegistrationRequest parseGrid1Request(String clientRequest) {\n         registrationInfo.put(URLDecoder.decode(configItem[0], \"UTF-8\"),\n             URLDecoder.decode(configItem[1], \"UTF-8\"));\n       } catch (UnsupportedEncodingException e) {\n-        log.warning(String.format(\"Unable to decode registration request portion: %s\", part));\n+        LOG.warning(String.format(\"Unable to decode registration request portion: %s\", part));\n       }\n     }\n \n@@ -499,7 +501,7 @@ private void loadFromCommandLine(String[] args) {\n   }\n \n   private DesiredCapabilities addCapabilityFromString(String capability) {\n-    log.info(\"Adding \" + capability);\n+    LOG.info(\"Adding \" + capability);\n     String[] s = capability.split(\",\");\n     if (s.length == 0) {\n       throw new GridConfigurationException(\"-browser must be followed by a browser description\");",
      "parent_sha": "16fac7965d51934c61513202b9ddeb6ce79d9d28"
    }
  },
  {
    "oid": "53b9f89004013cac0b387b74cec0cfd53c7461b1",
    "message": "Start the netty appserver on a well-known port",
    "date": "2020-11-24T15:20:03Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/53b9f89004013cac0b387b74cec0cfd53c7461b1",
    "details": {
      "sha": "47a9cee5879a75290f6817e96b527e797ef1b02c",
      "filename": "java/client/test/org/openqa/selenium/environment/webserver/NettyAppServer.java",
      "status": "modified",
      "additions": 22,
      "deletions": 7,
      "changes": 29,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/53b9f89004013cac0b387b74cec0cfd53c7461b1/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fenvironment%2Fwebserver%2FNettyAppServer.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/53b9f89004013cac0b387b74cec0cfd53c7461b1/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fenvironment%2Fwebserver%2FNettyAppServer.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2Fenvironment%2Fwebserver%2FNettyAppServer.java?ref=53b9f89004013cac0b387b74cec0cfd53c7461b1",
      "patch": "@@ -18,6 +18,7 @@\n package org.openqa.selenium.environment.webserver;\n \n import com.google.common.collect.ImmutableMap;\n+import org.openqa.selenium.grid.config.Config;\n import org.openqa.selenium.grid.config.MapConfig;\n import org.openqa.selenium.grid.config.MemoizedConfig;\n import org.openqa.selenium.grid.server.BaseServerOptions;\n@@ -40,9 +41,9 @@\n import java.net.URL;\n \n import static com.google.common.net.HttpHeaders.CONTENT_TYPE;\n-import static com.google.common.net.MediaType.JSON_UTF_8;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Collections.singletonMap;\n+import static org.openqa.selenium.json.Json.JSON_UTF_8;\n import static org.openqa.selenium.remote.http.Contents.bytes;\n import static org.openqa.selenium.remote.http.Contents.string;\n \n@@ -65,12 +66,16 @@ public NettyAppServer() {\n   }\n \n   public NettyAppServer(HttpHandler handler) {\n+    this(\n+      new MapConfig(singletonMap(\"server\", singletonMap(\"port\", PortProber.findFreePort()))),\n+      Require.nonNull(\"Handler\", handler));\n+  }\n+\n+  private NettyAppServer(Config config, HttpHandler handler) {\n+    Require.nonNull(\"Config\", config);\n     Require.nonNull(\"Handler\", handler);\n \n-    int port = PortProber.findFreePort();\n-    server = new NettyServer(\n-      new BaseServerOptions(new MapConfig(singletonMap(\"server\", singletonMap(\"port\", port)))),\n-      handler);\n+    server = new NettyServer(new BaseServerOptions(new MemoizedConfig(config)), handler);\n   }\n \n   @Override\n@@ -135,7 +140,7 @@ public String create(Page page) {\n \n       HttpClient client = HttpClient.Factory.createDefault().createClient(new URL(whereIs(\"/\")));\n       HttpRequest request = new HttpRequest(HttpMethod.POST, \"/common/createPage\");\n-      request.setHeader(CONTENT_TYPE, JSON_UTF_8.toString());\n+      request.setHeader(CONTENT_TYPE, JSON_UTF_8);\n       request.setContent(bytes(data));\n       HttpResponse response = client.execute(request);\n       return string(response);\n@@ -155,7 +160,17 @@ public String getAlternateHostName() {\n   }\n \n   public static void main(String[] args) {\n-    NettyAppServer server = new NettyAppServer();\n+    MemoizedConfig config = new MemoizedConfig(new MapConfig(singletonMap(\"server\", singletonMap(\"port\", 2310))));\n+    BaseServerOptions options = new BaseServerOptions(config);\n+\n+    HttpHandler handler = new HandlersForTests(\n+      options.getHostname().orElse(\"localhost\"),\n+      options.getPort(),\n+      TemporaryFilesystem.getDefaultTmpFS().createTempDir(\"netty\", \"server\").toPath());\n+\n+    NettyAppServer server = new NettyAppServer(\n+      config,\n+      handler);\n     server.start();\n \n     System.out.printf(\"Server started. Root URL: %s%n\", server.whereIs(\"/\"));",
      "parent_sha": "bdb1aadfdf612f4b37fe4bed9c14ba2446a8cb13"
    }
  },
  {
    "oid": "fa12020714d1e56e2f5bbf43b5af8572633cd9e5",
    "message": "EranMes: Some CookieImpl tests failed because cookies were set on a domain.\nSince domains may not be resolvable, the checks in ReturnedCookie were relaxed.\nThe absolutely correct thing to do is probably to query the DNS, but the\nexpected response has not been determined yet.\n\n\n\nr7482",
    "date": "2009-10-27T12:57:56Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/fa12020714d1e56e2f5bbf43b5af8572633cd9e5",
    "details": {
      "sha": "f6d567ea70966f4d9165d69576d790cb6bde1800",
      "filename": "common/src/java/org/openqa/selenium/internal/ReturnedCookie.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/fa12020714d1e56e2f5bbf43b5af8572633cd9e5/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Finternal%2FReturnedCookie.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/fa12020714d1e56e2f5bbf43b5af8572633cd9e5/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Finternal%2FReturnedCookie.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Finternal%2FReturnedCookie.java?ref=fa12020714d1e56e2f5bbf43b5af8572633cd9e5",
      "patch": "@@ -46,16 +46,27 @@ protected void validate() {\n     super.validate();\n \n     String domain = getDomain();\n+    InetAddress localhost = null;\n \n     if (domain != null && !\"\".equals(domain)) {\n       try {\n         String domainToUse = domain.startsWith(\"http\") ? domain : \"http://\" + domain;\n         URL url = new URL(domainToUse);\n+        localhost = InetAddress.getLocalHost();\n         InetAddress.getByName(url.getHost());\n       } catch (MalformedURLException e) {\n         throw new IllegalArgumentException(String.format(\"URL not valid: %s\", domain));\n       } catch (UnknownHostException e) {\n-        throw new IllegalArgumentException(String.format(\"Domain does not exist: %s\", domain));\n+        // Domains must not be resolvable - it is perfectly valid for a domain not to\n+        // have an IP address - hence, just throwing is incorrect. As a safety measure,\n+        // check to see if the domain is a part of the fqdn of the local host - this will\n+        // make sure some tests in CookieImplementationTest will pass.\n+        if (localhost != null) {\n+          if (!localhost.getCanonicalHostName().contains(domain)) {\n+            throw new IllegalArgumentException(String.format(\"Domain unknown: %s\", domain));\n+          }\n+        } // If localhost is null, it means it triggered UnknownHostException, as this host has\n+        // no IP - unreasonable in any modern os has localhost address.\n       }\n     }\n   }",
      "parent_sha": "09699cc18b59a3edb15429eaac3cac7b8790de9c"
    }
  },
  {
    "oid": "a01fb62c429ed82edb297d686482c51d53aba448",
    "message": "Replace HashBiMap with thread-safe and lighter-weight ConcurrentHashMap (#3151)\n\nHashBiMap is not thread safe. And its ability to map back from value\r\nto key is used in a single place and can be easily replaced.",
    "date": "2016-11-25T20:23:47Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/a01fb62c429ed82edb297d686482c51d53aba448",
    "details": {
      "sha": "1dff155a741ed2d5efc3f2f964a78a40a34cd566",
      "filename": "java/client/src/org/openqa/selenium/remote/http/AbstractHttpCommandCodec.java",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/a01fb62c429ed82edb297d686482c51d53aba448/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FAbstractHttpCommandCodec.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/a01fb62c429ed82edb297d686482c51d53aba448/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FAbstractHttpCommandCodec.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FAbstractHttpCommandCodec.java?ref=a01fb62c429ed82edb297d686482c51d53aba448",
      "patch": "@@ -109,9 +109,7 @@\n import com.google.common.base.Objects;\n import com.google.common.base.Splitter;\n import com.google.common.base.Strings;\n-import com.google.common.collect.BiMap;\n-import com.google.common.collect.FluentIterable;\n-import com.google.common.collect.HashBiMap;\n+\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Maps;\n \n@@ -123,6 +121,7 @@\n import org.openqa.selenium.remote.JsonToBeanConverter;\n import org.openqa.selenium.remote.SessionId;\n \n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -136,7 +135,7 @@ public abstract class AbstractHttpCommandCodec implements CommandCodec<HttpReque\n   private static final Splitter PATH_SPLITTER = Splitter.on('/').omitEmptyStrings();\n   private static final String SESSION_ID_PARAM = \"sessionId\";\n \n-  private final BiMap<String, CommandSpec> nameToSpec = HashBiMap.create();\n+  private final ConcurrentHashMap<String, CommandSpec> nameToSpec = new ConcurrentHashMap();\n   private final Map<String, String> aliases = new HashMap<>();\n   private final BeanToJsonConverter beanToJsonConverter = new BeanToJsonConverter();\n   private final JsonToBeanConverter jsonToBeanConverter = new JsonToBeanConverter();\n@@ -281,18 +280,20 @@ public Command decode(final HttpRequest encodedCommand) {\n     final String path = Strings.isNullOrEmpty(encodedCommand.getUri())\n                         ? \"/\" : encodedCommand.getUri();\n     final ImmutableList<String> parts = ImmutableList.copyOf(PATH_SPLITTER.split(path));\n-    List<CommandSpec> matchingSpecs = FluentIterable.from(nameToSpec.inverse().keySet())\n-        .filter(spec -> {\n-          return spec.isFor(encodedCommand.getMethod(), parts);\n-        })\n-        .toSortedList((a, b) -> a.pathSegments.size() - b.pathSegments.size());\n-\n-    if (matchingSpecs.isEmpty()) {\n+    int minPathLength = Integer.MAX_VALUE;\n+    CommandSpec spec = null;\n+    String name = null;\n+    for (Map.Entry<String, CommandSpec> nameValue : nameToSpec.entrySet()) {\n+      if ((nameValue.getValue().pathSegments.size() < minPathLength)\n+          && nameValue.getValue().isFor(encodedCommand.getMethod(), parts)) {\n+        name = nameValue.getKey();\n+        spec = nameValue.getValue();\n+      }\n+    }\n+    if (name == null) {\n       throw new UnsupportedCommandException(\n           encodedCommand.getMethod() + \" \" + encodedCommand.getUri());\n     }\n-    CommandSpec spec = matchingSpecs.get(0);\n-\n     Map<String, Object> parameters = Maps.newHashMap();\n     spec.parsePathParameters(parts, parameters);\n \n@@ -303,7 +304,6 @@ public Command decode(final HttpRequest encodedCommand) {\n       parameters.putAll(tmp);\n     }\n \n-    String name = nameToSpec.inverse().get(spec);\n     SessionId sessionId = null;\n     if (parameters.containsKey(SESSION_ID_PARAM)) {\n       String id = (String) parameters.remove(SESSION_ID_PARAM);",
      "parent_sha": "a4402d65d5d8a30ee11d54663dac442a7bc96229"
    }
  },
  {
    "oid": "cd5f2e6afb27075bdfc262696d3d420bed87e7ba",
    "message": "Make use of the createDefaultService that takes a Capabilities if present",
    "date": "2017-10-24T10:45:31Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/cd5f2e6afb27075bdfc262696d3d420bed87e7ba",
    "details": {
      "sha": "b21a39283ecfc7d4b2cf1b37705f7b104edbc677",
      "filename": "java/server/src/org/openqa/selenium/remote/server/ServicedSession.java",
      "status": "modified",
      "additions": 35,
      "deletions": 9,
      "changes": 44,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/cd5f2e6afb27075bdfc262696d3d420bed87e7ba/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2FServicedSession.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/cd5f2e6afb27075bdfc262696d3d420bed87e7ba/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2FServicedSession.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2FServicedSession.java?ref=cd5f2e6afb27075bdfc262696d3d420bed87e7ba",
      "patch": "@@ -57,7 +57,7 @@\n import java.net.URL;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Supplier;\n+import java.util.function.Function;\n \n class ServicedSession implements ActiveSession {\n \n@@ -146,7 +146,7 @@ public void stop() {\n \n   public static class Factory implements SessionFactory {\n \n-    private final Supplier<? extends DriverService> createService;\n+    private final Function<Capabilities, ? extends DriverService> createService;\n     private final String serviceClassName;\n \n     Factory(String serviceClassName) {\n@@ -155,25 +155,51 @@ public static class Factory implements SessionFactory {\n         Class<? extends DriverService> driverClazz =\n             Class.forName(serviceClassName).asSubclass(DriverService.class);\n \n-        Method serviceMethod = driverClazz.getMethod(\"createDefaultService\");\n-        serviceMethod.setAccessible(true);\n+        Function<Capabilities, ? extends DriverService> factory =\n+            get(driverClazz, \"createDefaultService\", Capabilities.class);\n+        if (factory == null) {\n+          factory = get(driverClazz, \"createDefaultService\");\n+        }\n+\n+        if (factory == null) {\n+          throw new IllegalArgumentException(\n+              \"DriverService has no mechansim to create a default instance\");\n+        }\n+\n+        this.createService = factory;\n+      } catch (ReflectiveOperationException e) {\n+        throw new IllegalArgumentException(\n+            \"DriverService class does not exist: \" + serviceClassName);\n+      }\n+    }\n \n-        this.createService = () -> {\n+    private Function<Capabilities, ? extends DriverService> get(\n+        Class<? extends DriverService> driverServiceClazz,\n+        String methodName,\n+        Class... args) {\n+      try {\n+        Method serviceMethod = driverServiceClazz.getDeclaredMethod(methodName, args);\n+        serviceMethod.setAccessible(true);\n+        return caps -> {\n           try {\n-            return (DriverService) serviceMethod.invoke(null);\n+            if (args.length > 0) {\n+              return (DriverService) serviceMethod.invoke(null, caps);\n+            } else {\n+              return (DriverService) serviceMethod.invoke(null);\n+            }\n           } catch (ReflectiveOperationException e) {\n             throw new SessionNotCreatedException(\n-                \"Unable to create new service: \" + driverClazz.getSimpleName(), e);\n+                \"Unable to create new service: \" + driverServiceClazz.getSimpleName(), e);\n           }\n         };\n       } catch (ReflectiveOperationException e) {\n-        throw new SessionNotCreatedException(\"Cannot find service factory method\", e);\n+        return null;\n       }\n     }\n \n     @Override\n     public ActiveSession apply(Set<Dialect> downstreamDialects, Capabilities capabilities) {\n-      DriverService service = createService.get();\n+      DriverService service = createService.apply(capabilities);\n \n       try {\n         service.start();",
      "parent_sha": "be96afd03db9a892067e566fd49fd4185e1b0072"
    }
  },
  {
    "oid": "396efb19de28e5cf410c6d21332a7b64910490fc",
    "message": "Specify charset utf-8; jetty assumes form posted data is ISO8859-1\n\n\nr4158",
    "date": "2007-08-14T00:36:26Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/396efb19de28e5cf410c6d21332a7b64910490fc",
    "details": {
      "sha": "1fbfef3308f1073431c232f52892413cbc315679",
      "filename": "clients/java/src/main/java/com/thoughtworks/selenium/HttpCommandProcessor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/396efb19de28e5cf410c6d21332a7b64910490fc/clients%2Fjava%2Fsrc%2Fmain%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FHttpCommandProcessor.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/396efb19de28e5cf410c6d21332a7b64910490fc/clients%2Fjava%2Fsrc%2Fmain%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FHttpCommandProcessor.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/clients%2Fjava%2Fsrc%2Fmain%2Fjava%2Fcom%2Fthoughtworks%2Fselenium%2FHttpCommandProcessor.java?ref=396efb19de28e5cf410c6d21332a7b64910490fc",
      "patch": "@@ -109,7 +109,8 @@ private InputStream getCommandResponse(String command, InputStream is) throws IO\n         while (responsecode == HttpURLConnection.HTTP_MOVED_PERM) {\r\n             URL result = new URL(pathToServlet); \r\n             String body = buildCommandBody(command);\r\n-            HttpURLConnection uc = (HttpURLConnection) result.openConnection();            \r\n+            HttpURLConnection uc = (HttpURLConnection) result.openConnection();\r\n+            uc.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\r\n             uc.setInstanceFollowRedirects(false);\r\n             uc.setDoOutput(true);\r\n             OutputStreamWriter wr = new OutputStreamWriter(uc.getOutputStream());\r",
      "parent_sha": "16fbac5667a220c323b55c308a69ad5888af0723"
    }
  },
  {
    "oid": "3dfb07c4e8738fafa48c85d6593a1ca8a7ca5dad",
    "message": "Let's try to guess Firefox's location on OSX, and add Firefox's directory to the DYLD_LIBRARY_PATH on OSX\n\nr1991",
    "date": "2006-04-03T20:37:07Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/3dfb07c4e8738fafa48c85d6593a1ca8a7ca5dad",
    "details": {
      "sha": "cb06e115877e64f52c058d2c97d5241841952c6a",
      "filename": "server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java",
      "status": "modified",
      "additions": 21,
      "deletions": 5,
      "changes": 26,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/3dfb07c4e8738fafa48c85d6593a1ca8a7ca5dad/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FFirefoxCustomProfileLauncher.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/3dfb07c4e8738fafa48c85d6593a1ca8a7ca5dad/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FFirefoxCustomProfileLauncher.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/server%2Fsrc%2Fmain%2Fjava%2Forg%2Fopenqa%2Fselenium%2Fserver%2Fbrowserlaunchers%2FFirefoxCustomProfileLauncher.java?ref=3dfb07c4e8738fafa48c85d6593a1ca8a7ca5dad",
      "patch": "@@ -20,11 +20,13 @@\n \r\n import org.apache.tools.ant.*;\r\n import org.apache.tools.ant.taskdefs.*;\r\n+import org.apache.tools.ant.taskdefs.condition.*;\r\n import org.openqa.selenium.server.*;\r\n \r\n public class FirefoxCustomProfileLauncher extends DestroyableRuntimeExecutingBrowserLauncher {\r\n \r\n-    private static final String DEFAULT_LOCATION = \"c:\\\\program files\\\\mozilla firefox\\\\firefox.exe\"; \r\n+    private static final String DEFAULT_WINDOWS_LOCATION = \"c:\\\\program files\\\\mozilla firefox\\\\firefox.exe\"; \r\n+    private static final String DEFAULT_NONWINDOWS_LOCATION = \"/Applications/Firefox.app/Contents/MacOS/firefox-bin\";\r\n     \r\n     private static boolean simple = false;\r\n     \r\n@@ -55,18 +57,32 @@ public FirefoxCustomProfileLauncher(int port, String sessionId, String browserLa\n                 if (execDirect.isAbsolute() && execDirect.exists()) firefoxBin = execDirect;\r\n             }\r\n             if (firefoxBin != null) {\r\n-                // TODO other unix?\r\n-                String libPath = WindowsUtils.loadEnvironment().getProperty(\"LD_LIBRARY_PATH\");\r\n+                String libPathKey = getLibPathKey();\r\n+                String libPath = WindowsUtils.loadEnvironment().getProperty(libPathKey);\r\n                 exe.setEnvironment(new String[] {\r\n                     \"MOZ_NO_REMOTE=1\",\r\n-                    \"LD_LIBRARY_PATH=\"+libPath+\":\" + firefoxBin.getParent(),\r\n+                    libPathKey+\"=\"+libPath+\":\" + firefoxBin.getParent(),\r\n                 });\r\n             }\r\n         }\r\n     }\r\n     \r\n+    private static String getLibPathKey() {\r\n+        if (WindowsUtils.thisIsWindows()) return WindowsUtils.getExactPathEnvKey();\r\n+        if (Os.isFamily(\"mac\")) return \"DYLD_LIBRARY_PATH\";\r\n+        // TODO other linux?\r\n+        return \"LD_LIBRARY_PATH\";\r\n+    }\r\n+    \r\n     private static String findBrowserLaunchLocation() {\r\n-        String defaultPath = System.getProperty(\"firefoxDefaultPath\", DEFAULT_LOCATION);\r\n+        String defaultPath = System.getProperty(\"firefoxDefaultPath\");\r\n+        if (defaultPath == null) {\r\n+            if (WindowsUtils.thisIsWindows()) {\r\n+                defaultPath = DEFAULT_WINDOWS_LOCATION;\r\n+            } else {\r\n+                defaultPath = DEFAULT_NONWINDOWS_LOCATION;\r\n+            }\r\n+        }\r\n         File defaultLocation = new File(defaultPath);\r\n         if (defaultLocation.exists()) {\r\n             return defaultLocation.getAbsolutePath();\r",
      "parent_sha": "bdb85b27694d309b392bd22f7a1ff69ce49f87d7"
    }
  },
  {
    "oid": "fcb4049a40e7986b70d126de971d19af93e31ef5",
    "message": "SimonStewart: when using RC, only *firefoxchrome (which is the default firefox mode) can type into a file upload element\n\nr15272",
    "date": "2011-12-23T19:07:36Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/fcb4049a40e7986b70d126de971d19af93e31ef5",
    "details": {
      "sha": "9c2cac7d7fb97f41fb4ac0f4be05ffdd61b3e878",
      "filename": "java/client/test/com/thoughtworks/selenium/corebased/TestType.java",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/fcb4049a40e7986b70d126de971d19af93e31ef5/java%2Fclient%2Ftest%2Fcom%2Fthoughtworks%2Fselenium%2Fcorebased%2FTestType.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/fcb4049a40e7986b70d126de971d19af93e31ef5/java%2Fclient%2Ftest%2Fcom%2Fthoughtworks%2Fselenium%2Fcorebased%2FTestType.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Fcom%2Fthoughtworks%2Fselenium%2Fcorebased%2FTestType.java?ref=fcb4049a40e7986b70d126de971d19af93e31ef5",
      "patch": "@@ -3,6 +3,7 @@\n import com.thoughtworks.selenium.InternalSelenseTestBase;\n \n import org.junit.Test;\n+import org.openqa.selenium.internal.WrapsDriver;\n \n public class TestType extends InternalSelenseTestBase {\n   @Test\n@@ -22,9 +23,17 @@ public void testType() throws Exception {\n     verifyEquals(selenium.getValue(\"password\"), \"testUserPasswordIsVe\");\n     selenium.type(\"password\", \"testUserPassword\");\n     verifyEquals(selenium.getValue(\"password\"), \"testUserPassword\");\n-    selenium.type(\"file\", \"/test/file\");\n-    selenium.click(\"submitButton\");\n-    selenium.waitForPageToLoad(\"30000\");\n-    verifyTrue(selenium.isTextPresent(\"Welcome, TestUser!\"));\n+    if (isAbleToUpdateFileElements()) {\n+      selenium.type(\"file\", \"/test/file\");\n+      selenium.click(\"submitButton\");\n+      selenium.waitForPageToLoad(\"30000\");\n+      verifyTrue(selenium.isTextPresent(\"Welcome, TestUser!\"));\n+    }\n+  }\n+\n+  private boolean isAbleToUpdateFileElements() {\n+    String browser = runtimeBrowserString();\n+    return selenium instanceof WrapsDriver ||\n+           \"*firefox\".equals(browser) || \"*firefoxchrome\".equals(browser);\n   }\n }",
      "parent_sha": "7458aec0534d8c4c899c4ebdffea6fc699bea196"
    }
  },
  {
    "oid": "0bb8a9b1e5478ff35ea36a24dacc43edca87278e",
    "message": "Use correct error when session does not exist.",
    "date": "2017-06-20T05:12:55Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/0bb8a9b1e5478ff35ea36a24dacc43edca87278e",
    "details": {
      "sha": "ac38197399a35f86b3ae5dfd52a382d78c6f4aed",
      "filename": "java/server/src/org/openqa/selenium/remote/server/AllHandlers.java",
      "status": "modified",
      "additions": 35,
      "deletions": 2,
      "changes": 37,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/0bb8a9b1e5478ff35ea36a24dacc43edca87278e/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2FAllHandlers.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/0bb8a9b1e5478ff35ea36a24dacc43edca87278e/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2FAllHandlers.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2FAllHandlers.java?ref=0bb8a9b1e5478ff35ea36a24dacc43edca87278e",
      "patch": "@@ -23,6 +23,7 @@\n import static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n import static java.net.HttpURLConnection.HTTP_OK;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.openqa.selenium.remote.ErrorCodes.NO_SUCH_SESSION;\n import static org.openqa.selenium.remote.ErrorCodes.UNKNOWN_COMMAND;\n \n import com.google.common.base.Splitter;\n@@ -67,9 +68,10 @@ public CommandHandler match(HttpServletRequest req) {\n \n     if (id != null) {\n       ActiveSession session = allSessions.get(id);\n-      if (session != null) {\n-        return session;\n+      if (session == null) {\n+        return new NoSessionHandler(id);\n       }\n+      return session;\n     }\n \n     if (\"POST\".equalsIgnoreCase(req.getMethod()) && \"/session\".equals(path)) {\n@@ -111,6 +113,37 @@ public void execute(HttpRequest req, HttpResponse resp) throws IOException {\n     }\n   }\n \n+  private static class NoSessionHandler implements CommandHandler {\n+\n+    private final SessionId sessionId;\n+\n+    public NoSessionHandler(SessionId sessionId) {\n+      this.sessionId = sessionId;\n+    }\n+\n+    @Override\n+    public void execute(HttpRequest req, HttpResponse resp) throws IOException {\n+      // We're not using ImmutableMap for the outer map because it disallows null values.\n+      Map<String, Object> responseMap = new HashMap<>();\n+      responseMap.put(\"sessionId\", sessionId.toString());\n+      responseMap.put(\"status\", NO_SUCH_SESSION);\n+      responseMap.put(\"value\", ImmutableMap.of(\n+          \"error\", \"invalid session id\",\n+          \"message\", String.format(\"No active session with ID %s\", sessionId),\n+          \"stacktrace\", \"\"));\n+      responseMap = Collections.unmodifiableMap(responseMap);\n+\n+      byte[] payload = new GsonBuilder().serializeNulls().create().toJson(responseMap)\n+          .getBytes(UTF_8);\n+\n+      resp.setStatus(HTTP_NOT_FOUND);\n+      resp.setHeader(\"Content-Type\", JSON_UTF_8.toString());\n+      resp.setHeader(\"Content-Length\", String.valueOf(payload.length));\n+\n+      resp.setContent(payload);\n+    }\n+  }\n+\n   private static class StatusHandler implements CommandHandler {\n \n     @Override",
      "parent_sha": "50b49f5ac67c624383bc54903dcf3301772a8497"
    }
  },
  {
    "oid": "b313712f468c72b0b096f6298e374af3f8ab379a",
    "message": "Update javadoc for getCssValue() (#9346)",
    "date": "2021-03-30T07:26:56Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/b313712f468c72b0b096f6298e374af3f8ab379a",
    "details": {
      "sha": "515327c89449a3fec638845f03e4fda2c20d80c1",
      "filename": "java/client/src/org/openqa/selenium/WebElement.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/b313712f468c72b0b096f6298e374af3f8ab379a/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2FWebElement.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/b313712f468c72b0b096f6298e374af3f8ab379a/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2FWebElement.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2FWebElement.java?ref=b313712f468c72b0b096f6298e374af3f8ab379a",
      "patch": "@@ -306,9 +306,12 @@ default String getAccessibleName() {\n \n   /**\n    * Get the value of a given CSS property.\n-   * Color values should be returned as rgba strings, so,\n-   * for example if the \"background-color\" property is set as \"green\" in the\n-   * HTML source, the returned value will be \"rgba(0, 255, 0, 1)\".\n+   * Color values could be returned as rgba or rgb strings.\n+   * This depends on whether the browser omits the implicit opacity value or not.\n+   *\n+   * For example if the \"background-color\" property is set as \"green\" in the\n+   * HTML source, the returned value could be \"rgba(0, 255, 0, 1)\" if implicit opacity value is\n+   * preserved or \"rgb(0, 255, 0)\" if it is omitted.\n    *\n    * Note that shorthand CSS properties (e.g. background, font, border, border-top, margin,\n    * margin-top, padding, padding-top, list-style, outline, pause, cue) are not returned,",
      "parent_sha": "c8548774d90eee7b05e5f5eafcb3dbc2270d1a6f"
    }
  },
  {
    "oid": "064ebc250dc8dce470639f8cbd0a52060df5f97f",
    "message": "Remove a sysout debug line. No logical change",
    "date": "2018-02-20T17:22:23Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/064ebc250dc8dce470639f8cbd0a52060df5f97f",
    "details": {
      "sha": "0312f741f1378c790b676cbf1dcd0b97d58f4c56",
      "filename": "java/client/src/org/openqa/selenium/remote/internal/ApacheHttpClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/064ebc250dc8dce470639f8cbd0a52060df5f97f/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Finternal%2FApacheHttpClient.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/064ebc250dc8dce470639f8cbd0a52060df5f97f/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Finternal%2FApacheHttpClient.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Finternal%2FApacheHttpClient.java?ref=064ebc250dc8dce470639f8cbd0a52060df5f97f",
      "patch": "@@ -220,10 +220,8 @@ private HttpHost getHost(HttpUriRequest method) {\n     synchronized (cachedHosts) {\n       Map.Entry<String, Integer> entry =\n           new AbstractMap.SimpleImmutableEntry<>(host, port);\n-      HttpHost\n-          httpHost =\n+      HttpHost httpHost =\n           cachedHosts.computeIfAbsent(entry, e -> new HttpHost(e.getKey(), e.getValue()));\n-      System.out.println(\"cachedHosts = \" + cachedHosts);\n       return httpHost;\n     }\n   }",
      "parent_sha": "8e1de21d6761246702e8658c581d8d4581935164"
    }
  },
  {
    "oid": "4965564f1061914cb0451cd182fdb15cadb9eb95",
    "message": "Precalculate the port to use and extend the existing race a little",
    "date": "2018-08-07T22:44:52Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/4965564f1061914cb0451cd182fdb15cadb9eb95",
    "details": {
      "sha": "787fac2f2392a34dcc99adc60a878367a122bf72",
      "filename": "java/server/src/org/openqa/selenium/grid/server/BaseServer.java",
      "status": "modified",
      "additions": 25,
      "deletions": 16,
      "changes": 41,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/4965564f1061914cb0451cd182fdb15cadb9eb95/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServer.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/4965564f1061914cb0451cd182fdb15cadb9eb95/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServer.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServer.java?ref=4965564f1061914cb0451cd182fdb15cadb9eb95",
      "patch": "@@ -25,9 +25,11 @@\n import com.google.common.collect.ImmutableMap;\n import com.google.common.net.MediaType;\n \n+import org.openqa.selenium.WebDriverException;\n import org.openqa.selenium.grid.web.CommandHandler;\n import org.openqa.selenium.injector.Injector;\n import org.openqa.selenium.json.Json;\n+import org.openqa.selenium.net.NetworkUtils;\n import org.openqa.selenium.net.PortProber;\n import org.openqa.selenium.remote.http.HttpRequest;\n import org.seleniumhq.jetty9.security.ConstraintMapping;\n@@ -40,6 +42,8 @@\n import org.seleniumhq.jetty9.util.security.Constraint;\n import org.seleniumhq.jetty9.util.thread.QueuedThreadPool;\n \n+import java.io.UncheckedIOException;\n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -52,14 +56,26 @@\n public class BaseServer implements Server<BaseServer> {\n \n   private final org.seleniumhq.jetty9.server.Server server;\n-  private final int port;\n   private final Map<Predicate<HttpRequest>, BiFunction<Injector, HttpRequest, CommandHandler>> handlers;\n   private final ServletContextHandler servletContextHandler;\n   private final Injector injector;\n-  private URL url;\n+  private final URL url;\n \n   public BaseServer(BaseServerOptions options) {\n-    this.port = options.getPort();\n+    int port = options.getPort() == 0 ? PortProber.findFreePort() : options.getPort();\n+\n+    String host;\n+    try {\n+      host = new NetworkUtils().getNonLoopbackAddressOfThisMachine();\n+    } catch (WebDriverException ignored) {\n+      host = \"localhost\";\n+    }\n+    try {\n+      this.url = new URL(\"http\", host, port, \"\");\n+    } catch (MalformedURLException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+\n     this.server = new org.seleniumhq.jetty9.server.Server(\n         new QueuedThreadPool(options.getMaxServerThreads()));\n \n@@ -107,6 +123,11 @@ public BaseServer(BaseServerOptions options) {\n \n     server.setHandler(servletContextHandler);\n \n+    HttpConfiguration httpConfig = new HttpConfiguration();\n+    ServerConnector http = new ServerConnector(server, new HttpConnectionFactory(httpConfig));\n+    http.setPort(getUrl().getPort());\n+    server.addConnector(http);\n+\n     addServlet(new CommandHandlerServlet(injector, handlers), \"/*\");\n   }\n \n@@ -136,19 +157,10 @@ public void addHandler(\n \n   @Override\n   public BaseServer start() {\n-    int portToUse = port < 1 ? PortProber.findFreePort() : port;\n-\n-    HttpConfiguration httpConfig = new HttpConfiguration();\n-    ServerConnector http = new ServerConnector(server, new HttpConnectionFactory(httpConfig));\n-    http.setPort(portToUse);\n-    server.addConnector(http);\n-\n     try {\n       server.start();\n \n-      url = server.getURI().toURL();\n-\n-      PortProber.waitForPortUp(portToUse, 10, SECONDS);\n+      PortProber.waitForPortUp(getUrl().getPort(), 10, SECONDS);\n \n       return this;\n     } catch (RuntimeException e) {\n@@ -172,9 +184,6 @@ public BaseServer stop() {\n \n   @Override\n   public URL getUrl() {\n-    if (!server.isRunning()) {\n-      throw new RuntimeException(\"Server is not running\");\n-    }\n     return url;\n   }\n }",
      "parent_sha": "63c86bb68bd921d0cd27f187d16d708b035221e4"
    }
  },
  {
    "oid": "0fc2338bbc9c90a6a8a8b0334b25328eb3a19ec5",
    "message": "AlexeiBarantsev: Ignoring StaleElementReferenceException that can be thrown when you move focus from a removed element to some other element. Fixes issue 1521\n\nr17096",
    "date": "2012-06-01T19:01:49Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/0fc2338bbc9c90a6a8a8b0334b25328eb3a19ec5",
    "details": {
      "sha": "195151ec673e0ee911b2bcd60774a9f1fa29ec29",
      "filename": "java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/0fc2338bbc9c90a6a8a8b0334b25328eb3a19ec5/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fhtmlunit%2FHtmlUnitWebElement.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/0fc2338bbc9c90a6a8a8b0334b25328eb3a19ec5/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fhtmlunit%2FHtmlUnitWebElement.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fhtmlunit%2FHtmlUnitWebElement.java?ref=0fc2338bbc9c90a6a8a8b0334b25328eb3a19ec5",
      "patch": "@@ -310,13 +310,17 @@ private void switchFocusToThisIfNeeded() {\n \n     boolean jsEnabled = parent.isJavascriptEnabled();\n     boolean oldActiveEqualsCurrent = oldActiveElement.equals(this);\n-    boolean isBody = oldActiveElement.getTagName().toLowerCase().equals(\"body\");\n-    if (jsEnabled &&\n-        !oldActiveEqualsCurrent &&\n-        !isBody) {\n-      oldActiveElement.element.blur();\n-      element.focus();\n+    try {\n+      boolean isBody = oldActiveElement.getTagName().toLowerCase().equals(\"body\");\n+      if (jsEnabled &&\n+          !oldActiveEqualsCurrent &&\n+          !isBody) {\n+        oldActiveElement.element.blur();\n+      }\n+    } catch (StaleElementReferenceException ex) {\n+      // old element has gone, do nothing\n     }\n+    element.focus();\n   }\n \n   public void sendKeyDownEvent(Keys modifierKey) {",
      "parent_sha": "ff81e3676af4286d32d529c3dda45db93d99a7a0"
    }
  },
  {
    "oid": "eeb0e5116943988ec9a782d5a3a60ffed08d143a",
    "message": "KristianRosenvold: Memory model issue, code reading\n\nr13475",
    "date": "2011-08-20T11:44:28Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/eeb0e5116943988ec9a782d5a3a60ffed08d143a",
    "details": {
      "sha": "cff16720323431674fa4a9b326ef079d69dd6892",
      "filename": "java/server/src/org/openqa/jetty/jetty/Server.java",
      "status": "modified",
      "additions": 11,
      "deletions": 15,
      "changes": 26,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/eeb0e5116943988ec9a782d5a3a60ffed08d143a/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fjetty%2Fjetty%2FServer.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/eeb0e5116943988ec9a782d5a3a60ffed08d143a/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fjetty%2Fjetty%2FServer.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fjetty%2Fjetty%2FServer.java?ref=eeb0e5116943988ec9a782d5a3a60ffed08d143a",
      "patch": "@@ -15,24 +15,22 @@\n \n package org.openqa.jetty.jetty;\n \n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Iterator;\n-\n import org.apache.commons.logging.Log;\n-import org.openqa.jetty.log.LogFactory;\n import org.openqa.jetty.http.HttpContext;\n import org.openqa.jetty.http.HttpServer;\n import org.openqa.jetty.jetty.servlet.ServletHttpContext;\n import org.openqa.jetty.jetty.servlet.WebApplicationContext;\n+import org.openqa.jetty.log.LogFactory;\n import org.openqa.jetty.util.LogSupport;\n import org.openqa.jetty.util.Resource;\n import org.openqa.jetty.xml.XmlConfiguration;\n \n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.util.*;\n+\n \n /* ------------------------------------------------------------ */\n /** The Jetty HttpServer.\n@@ -479,9 +477,9 @@ public static void main(String[] arg)\n     * \n     * Thread is hooked first time list of servers is changed.\n     */\n-  private static class ShutdownHookThread extends Thread {\n-    private boolean hooked = false;\n-    private ArrayList servers = new ArrayList();\n+  private static class ShutdownHookThread extends Thread {  // Memory model reviewed\n+    private volatile boolean hooked = false;\n+    private final List<Server> servers = Collections.synchronizedList(new ArrayList<Server>());\n \n     /**\n      * Hooks this thread for shutdown.\n@@ -553,9 +551,7 @@ public boolean removeAll(Collection c) {\n     public void run() {\n       setName(\"Shutdown\");\n       log.info(\"Shutdown hook executing\");\n-      Iterator it = servers.iterator();\n-      while (it.hasNext()) {\n-        Server svr = (Server) it.next();\n+      for (Server svr : servers) {\n         if (svr == null) continue;\n         try {\n           svr.stop();",
      "parent_sha": "b24e5bcf81ec59b052441c19d75ca77caf6a9917"
    }
  },
  {
    "oid": "3f799b825688cd39c07480724e939cf117854ce5",
    "message": "[java] Synchronizing access to listener list to avoid concurrent modification exceptions.",
    "date": "2019-10-21T16:37:08Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/3f799b825688cd39c07480724e939cf117854ce5",
    "details": {
      "sha": "7021230892c44ee07ab039d582c0495e2eafab9d",
      "filename": "java/client/src/org/openqa/selenium/devtools/Connection.java",
      "status": "modified",
      "additions": 38,
      "deletions": 32,
      "changes": 70,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/3f799b825688cd39c07480724e939cf117854ce5/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fdevtools%2FConnection.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/3f799b825688cd39c07480724e939cf117854ce5/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fdevtools%2FConnection.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fdevtools%2FConnection.java?ref=3f799b825688cd39c07480724e939cf117854ce5",
      "patch": "@@ -111,11 +111,15 @@ public <X> void addListener(Event<X> event, Consumer<X> handler) {\n     Objects.requireNonNull(event);\n     Objects.requireNonNull(handler);\n \n-    eventCallbacks.put(event, handler);\n+    synchronized (eventCallbacks) {\n+      eventCallbacks.put(event, handler);\n+    }\n   }\n \n   public void clearListeners() {\n-    eventCallbacks.clear();\n+    synchronized (eventCallbacks) {\n+      eventCallbacks.clear();\n+    }\n   }\n \n   @Override\n@@ -159,41 +163,43 @@ public void onText(CharSequence data) {\n       } else if (raw.get(\"method\") instanceof String && raw.get(\"params\") instanceof Map) {\n         LOG.fine(\"Seen: \" + raw);\n \n-        // TODO: Also only decode once.\n-        eventCallbacks.keySet().stream()\n-            .filter(event -> raw.get(\"method\").equals(event.getMethod()))\n-            .forEach(event -> {\n-              // TODO: This is grossly inefficient. I apologise, and we should fix this.\n-              try (StringReader reader = new StringReader(asString);\n-                   JsonInput input = JSON.newInput(reader)) {\n-                Object value = null;\n-                input.beginObject();\n-                while (input.hasNext()) {\n-                  switch (input.nextName()) {\n-                    case \"params\":\n-                      value = event.getMapper().apply(input);\n-                      break;\n-\n-                    default:\n-                      input.skipValue();\n-                      break;\n+        synchronized (eventCallbacks) {\n+          // TODO: Also only decode once.\n+          eventCallbacks.keySet().stream()\n+              .filter(event -> raw.get(\"method\").equals(event.getMethod()))\n+              .forEach(event -> {\n+                // TODO: This is grossly inefficient. I apologise, and we should fix this.\n+                try (StringReader reader = new StringReader(asString);\n+                     JsonInput input = JSON.newInput(reader)) {\n+                  Object value = null;\n+                  input.beginObject();\n+                  while (input.hasNext()) {\n+                    switch (input.nextName()) {\n+                      case \"params\":\n+                        value = event.getMapper().apply(input);\n+                        break;\n+\n+                      default:\n+                        input.skipValue();\n+                        break;\n+                    }\n                   }\n-                }\n-                input.endObject();\n+                  input.endObject();\n \n-                if (value == null) {\n-                  // Do nothing.\n-                  return;\n-                }\n+                  if (value == null) {\n+                    // Do nothing.\n+                    return;\n+                  }\n \n-                final Object finalValue = value;\n+                  final Object finalValue = value;\n \n-                for (Consumer<?> action : eventCallbacks.get(event)) {\n-                  @SuppressWarnings(\"unchecked\") Consumer<Object> obj = (Consumer<Object>) action;\n-                  obj.accept(finalValue);\n+                  for (Consumer<?> action : eventCallbacks.get(event)) {\n+                    @SuppressWarnings(\"unchecked\") Consumer<Object> obj = (Consumer<Object>) action;\n+                    obj.accept(finalValue);\n+                  }\n                 }\n-              }\n-            });\n+              });\n+        }\n       } else {\n         LOG.warning(\"Unhandled type: \" + data);\n       }",
      "parent_sha": "36f0c8592310ee1d4e109df7da35f16058cac6a4"
    }
  },
  {
    "oid": "1a9fba6579d9e9d1f96a2f9cdd94b04dcb6d4a9c",
    "message": "DouniaBerrada: Removing capital letter in testShouldBeAbleToEnterTextIntoAreaBySettingItsValue and adding a test for capitalization.\n\nr14273",
    "date": "2011-10-20T18:20:10Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/1a9fba6579d9e9d1f96a2f9cdd94b04dcb6d4a9c",
    "details": {
      "sha": "0da8e2a4be049d9bf31d6beabc1b4cd2a9be5a88",
      "filename": "java/client/test/org/openqa/selenium/FormHandlingTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/1a9fba6579d9e9d1f96a2f9cdd94b04dcb6d4a9c/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FFormHandlingTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/1a9fba6579d9e9d1f96a2f9cdd94b04dcb6d4a9c/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FFormHandlingTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FFormHandlingTest.java?ref=1a9fba6579d9e9d1f96a2f9cdd94b04dcb6d4a9c",
      "patch": "@@ -95,7 +95,18 @@ public void testShouldBeAbleToEnterTextIntoATextAreaBySettingItsValue() {\n     driver.get(pages.javascriptPage);\n     WebElement textarea = driver.findElement(By\n         .id(\"keyUpArea\"));\n-    String cheesey = \"Brie and cheddar\";\n+    String cheesey = \"brie and cheddar\";\n+    textarea.sendKeys(cheesey);\n+    assertThat(textarea.getAttribute(\"value\"), equalTo(cheesey));\n+  }\n+\n+  @Ignore(value = {ANDROID}, reason = \"Android: capitalizatin bug in ICS keeps\"\n+      + \"caps on after a capital letter is sent.\")\n+  public void testSendKeysKeepsCapitalization() {\n+    driver.get(pages.javascriptPage);\n+    WebElement textarea = driver.findElement(By\n+        .id(\"keyUpArea\"));\n+    String cheesey = \"BrIe And CheDdar\";\n     textarea.sendKeys(cheesey);\n     assertThat(textarea.getAttribute(\"value\"), equalTo(cheesey));\n   }",
      "parent_sha": "d3a57f1d7e0f0480edcb8d2a7dd36ceef3173fa7"
    }
  },
  {
    "oid": "f29a03b83c4f3f6d843788277ac72a3f4c3bea48",
    "message": "DanielWagnerHall: Ignore test not yet implemented in Chrome\n\nr13132",
    "date": "2011-07-29T15:41:08Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/f29a03b83c4f3f6d843788277ac72a3f4c3bea48",
    "details": {
      "sha": "2288483b6ad6ed3f9fc85a3c46062ece0764f2ac",
      "filename": "java/client/test/org/openqa/selenium/ClickTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/f29a03b83c4f3f6d843788277ac72a3f4c3bea48/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FClickTest.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/f29a03b83c4f3f6d843788277ac72a3f4c3bea48/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FClickTest.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Ftest%2Forg%2Fopenqa%2Fselenium%2FClickTest.java?ref=f29a03b83c4f3f6d843788277ac72a3f4c3bea48",
      "patch": "@@ -18,6 +18,7 @@\n \n package org.openqa.selenium;\n \n+import static org.openqa.selenium.Ignore.Driver.CHROME;\n import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;\n import static org.openqa.selenium.Ignore.Driver.IPHONE;\n import static org.openqa.selenium.Ignore.Driver.OPERA;\n@@ -121,7 +122,7 @@ public void testCanClickOnAnElementWithTopSetToANegativeNumber() {\n   }\n \n   @JavascriptEnabled\n-  @Ignore({HTMLUNIT, OPERA, SELENESE})\n+  @Ignore({CHROME, HTMLUNIT, OPERA, SELENESE})\n   public void testShouldSetRelatedTargetForMouseOver() {\n     driver.get(pages.javascriptPage);\n ",
      "parent_sha": "5f50f8b0ec45ea63d77ad9a3b179390388a851a9"
    }
  },
  {
    "oid": "07c8ca6cd93076b4147081423f67268f5fe2dec6",
    "message": "[java] Fixing Java 8 compatibility issues",
    "date": "2020-05-12T17:50:02Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/07c8ca6cd93076b4147081423f67268f5fe2dec6",
    "details": {
      "sha": "81ea5ec687e09f17fcd511da52d814129839705a",
      "filename": "java/client/src/org/openqa/selenium/remote/http/HttpClient.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/07c8ca6cd93076b4147081423f67268f5fe2dec6/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FHttpClient.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/07c8ca6cd93076b4147081423f67268f5fe2dec6/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FHttpClient.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fhttp%2FHttpClient.java?ref=07c8ca6cd93076b4147081423f67268f5fe2dec6",
      "patch": "@@ -22,6 +22,7 @@\n import java.util.ServiceLoader;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n import static org.openqa.selenium.remote.http.ClientConfig.defaultConfig;\n \n@@ -44,10 +45,9 @@ interface Factory {\n      */\n     static Factory create(String name) {\n       ServiceLoader<HttpClient.Factory> loader = ServiceLoader.load(HttpClient.Factory.class);\n-      Set<Factory> factories = loader.stream()\n-          .filter(p -> p.type().isAnnotationPresent(HttpClientName.class))\n-          .filter(p -> name.equals(p.type().getAnnotation(HttpClientName.class).value()))\n-          .map(ServiceLoader.Provider::get)\n+      Set<Factory> factories = StreamSupport.stream(loader.spliterator(), true)\n+          .filter(p -> p.getClass().isAnnotationPresent(HttpClientName.class))\n+          .filter(p -> name.equals(p.getClass().getAnnotation(HttpClientName.class).value()))\n           .collect(Collectors.toSet());\n       if (factories.isEmpty()) {\n         throw new IllegalArgumentException(\"Unknown HttpClient factory \" + name);",
      "parent_sha": "80860a073ff46331290e7235e6f8e4e3bff388a0"
    }
  },
  {
    "oid": "09fba58d6f63e0fe3c5b8153d309020b776c096a",
    "message": "JasonLeyba: The OperaDriver does not implement the new logging commands yet,\nso attempting to collect logs on quit results in a NoSuchMethodError. To\nprevent tests from failing, we must catch and ignore all Throwables (ick).\n\nr17855",
    "date": "2012-09-24T01:51:18Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/09fba58d6f63e0fe3c5b8153d309020b776c096a",
    "details": {
      "sha": "0c68808ede7125388fe769c97e839f4fb648730b",
      "filename": "java/server/src/org/openqa/selenium/remote/server/handler/DeleteSession.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/09fba58d6f63e0fe3c5b8153d309020b776c096a/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2Fhandler%2FDeleteSession.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/09fba58d6f63e0fe3c5b8153d309020b776c096a/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2Fhandler%2FDeleteSession.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fremote%2Fserver%2Fhandler%2FDeleteSession.java?ref=09fba58d6f63e0fe3c5b8153d309020b776c096a",
      "patch": "@@ -41,7 +41,7 @@ public ResultType call() throws Exception {\n \n     try {\n       LoggingManager.perSessionLogHandler().fetchAndStoreLogsFromDriver(getSessionId(), driver);\n-    } catch (RuntimeException ignored) {\n+    } catch (Throwable ignored) {\n       // A failure to retrieve logs should not cause a test to fail.\n       // Silently ignore this exception.\n     }",
      "parent_sha": "3508e14189c910bcbf1d7c057561a8176e9b8cc1"
    }
  },
  {
    "oid": "7f5279e9a300f6207202f8f7417864e4cea90651",
    "message": "Be more generous about acceptable JSON content-types\n\nFixes a problem when reading data from a chromedriver\nwhen using passthrough mode.\n\nAlso use a try-with-resources to make sure that we\nclose the inputstream when reading an entity from a\nresponse.",
    "date": "2017-06-06T15:26:00Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/7f5279e9a300f6207202f8f7417864e4cea90651",
    "details": {
      "sha": "db91ff6bce0883a0a0a0db3bd952a7a651ccfeb9",
      "filename": "java/server/src/org/openqa/grid/internal/TestSession.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/7f5279e9a300f6207202f8f7417864e4cea90651/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FTestSession.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/7f5279e9a300f6207202f8f7417864e4cea90651/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FTestSession.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fgrid%2Finternal%2FTestSession.java?ref=7f5279e9a300f6207202f8f7417864e4cea90651",
      "patch": "@@ -322,9 +322,9 @@ private byte[] updateHubIfNewWebDriverSession(\n       Header h = proxyResponse.getFirstHeader(\"Location\");\n       if (h == null) {\n         if (isSuccessJsonResponse(proxyResponse) && proxyResponse.getEntity() != null) {\n-          InputStream stream = proxyResponse.getEntity().getContent();\n-          consumedData = ByteStreams.toByteArray(stream);\n-          stream.close();\n+          try (InputStream stream = proxyResponse.getEntity().getContent()) {\n+            consumedData = ByteStreams.toByteArray(stream);\n+          }\n \n           String contentString = new String(consumedData, Charsets.UTF_8);\n           ExternalSessionKey key = ExternalSessionKey.fromJsonResponseBody(contentString);\n@@ -355,7 +355,7 @@ private static boolean isSuccessJsonResponse(HttpResponse response) {\n           continue;\n         }\n \n-        if (MediaType.JSON_UTF_8.is(type)) {\n+        if (MediaType.JSON_UTF_8.is(type) || MediaType.JAVASCRIPT_UTF_8.is(type)) {\n           return true;\n         }\n       }",
      "parent_sha": "9bc8c9a280ec437b9efd86c1e253ff6629cbb4c7"
    }
  },
  {
    "oid": "c7f5aef737dafbf6db23fbdd94106250fe52afae",
    "message": "JariBakken: Can't remove shutdown hook while the JVM is shutting down.\n\nr10432",
    "date": "2010-11-27T16:17:38Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/c7f5aef737dafbf6db23fbdd94106250fe52afae",
    "details": {
      "sha": "85fbb349cdb595790e320260a60005cccfbc8cbb",
      "filename": "common/src/java/org/openqa/selenium/internal/CommandLine.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/c7f5aef737dafbf6db23fbdd94106250fe52afae/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Finternal%2FCommandLine.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/c7f5aef737dafbf6db23fbdd94106250fe52afae/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Finternal%2FCommandLine.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/common%2Fsrc%2Fjava%2Forg%2Fopenqa%2Fselenium%2Finternal%2FCommandLine.java?ref=c7f5aef737dafbf6db23fbdd94106250fe52afae",
      "patch": "@@ -263,7 +263,11 @@ public void destroy() {\n   private void postRunCleanup() {\r\n     proc = null;\r\n     if (cleanup != null) {\r\n-      Runtime.getRuntime().removeShutdownHook(cleanup);\r\n+      try {\r\n+        Runtime.getRuntime().removeShutdownHook(cleanup);\r\n+      } catch (IllegalStateException e) {\r\n+        // VM is shutting down\r\n+      }\r\n       cleanup = null;\r\n     }\r\n   }\r\n@@ -333,7 +337,7 @@ public void run() {\n         }\r\n       } catch (IOException e) {\r\n         // it's possible that the stream has been closed. That's okay.\r\n-        // Swallow the exception        \r\n+        // Swallow the exception\r\n       } finally {\r\n         try {\r\n           inputOut.close();\r",
      "parent_sha": "b0bdf52c3315c898a00985b6b8c8a3dc37e0351a"
    }
  },
  {
    "oid": "4d026f6c9da0349eb2aa420ccb8b90a9381b1514",
    "message": "SimonStewart: Catch any exceptions thrown when closing the socket in a try/catch block\n\nr13063",
    "date": "2011-07-25T16:43:19Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/4d026f6c9da0349eb2aa420ccb8b90a9381b1514",
    "details": {
      "sha": "1702fd7f44bfc29b642f9ab0e20cadb186eceaef",
      "filename": "java/client/src/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/4d026f6c9da0349eb2aa420ccb8b90a9381b1514/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2Finternal%2FNewProfileExtensionConnection.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/4d026f6c9da0349eb2aa420ccb8b90a9381b1514/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2Finternal%2FNewProfileExtensionConnection.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fclient%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Ffirefox%2Finternal%2FNewProfileExtensionConnection.java?ref=4d026f6c9da0349eb2aa420ccb8b90a9381b1514",
      "patch": "@@ -26,7 +26,9 @@\n import java.net.Socket;\n import java.net.URL;\n \n+import com.google.common.io.Closeables;\n import org.openqa.selenium.internal.Lock;\n+import org.openqa.selenium.io.Cleanly;\n import org.openqa.selenium.net.NetworkUtils;\n import org.openqa.selenium.WebDriverException;\n import org.openqa.selenium.firefox.ExtensionConnection;\n@@ -138,7 +140,11 @@ protected int determineNextFreePort(int port) throws IOException {\n       } catch (BindException e) {\n         // Port is already bound. Skip it and continue\n       } finally {\n-        socket.close();\n+        try {\n+          socket.close();\n+        } catch (IOException ignored) {\n+          // Nothing sane to do. Ignore this.\n+        }\n       }\n     }\n ",
      "parent_sha": "fe8f91a26237df3fee1e17f736da79a9ae9c434a"
    }
  },
  {
    "oid": "3c8453c328ad75489dc08af50b67d412732115d1",
    "message": "Rename CommonConfig to BaseServerConfig to make it easier to find",
    "date": "2018-08-09T15:55:51Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/3c8453c328ad75489dc08af50b67d412732115d1",
    "details": {
      "sha": "fab0666feae399d2df3047ff9636def439bf61b0",
      "filename": "java/server/src/org/openqa/selenium/grid/server/BaseServerConfig.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/3c8453c328ad75489dc08af50b67d412732115d1/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServerConfig.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/3c8453c328ad75489dc08af50b67d412732115d1/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServerConfig.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fserver%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fgrid%2Fserver%2FBaseServerConfig.java?ref=3c8453c328ad75489dc08af50b67d412732115d1",
      "patch": "@@ -23,7 +23,7 @@\n \n import java.util.Optional;\n \n-public class CommonConfig implements Config {\n+public class BaseServerConfig implements Config {\n \n   @Parameter(description = \"Port to listen on\", names = {\"-p\", \"--port\"})\n   private int port = 0;",
      "previous_filename": "java/server/src/org/openqa/selenium/grid/server/CommonConfig.java",
      "parent_sha": "6ca14aaa925ffd1970781444f1a4a3ee1d9c52e3"
    }
  },
  {
    "oid": "7e8c43001ed9972fb9b0645c5c4134bd39b93fb2",
    "message": "fixed reading the data from the stream and fixed the size of chunks (#10409)\n\nInputStream.read may read less bytes than actually are in the stream,\r\nthis might corrupt the forwarded data. Also fixed the size of the chunks\r\nsend after the initial chunk.\r\n\r\n[skip ci]",
    "date": "2022-03-11T22:47:34Z",
    "url": "https://github.com/SeleniumHQ/selenium/commit/7e8c43001ed9972fb9b0645c5c4134bd39b93fb2",
    "details": {
      "sha": "ead50e74ed6d85aff8aeab5ad714a6529151c92a",
      "filename": "java/src/org/openqa/selenium/netty/server/ResponseConverter.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/SeleniumHQ/selenium/blob/7e8c43001ed9972fb9b0645c5c4134bd39b93fb2/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fnetty%2Fserver%2FResponseConverter.java",
      "raw_url": "https://github.com/SeleniumHQ/selenium/raw/7e8c43001ed9972fb9b0645c5c4134bd39b93fb2/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fnetty%2Fserver%2FResponseConverter.java",
      "contents_url": "https://api.github.com/repos/SeleniumHQ/selenium/contents/java%2Fsrc%2Forg%2Fopenqa%2Fselenium%2Fnetty%2Fserver%2FResponseConverter.java?ref=7e8c43001ed9972fb9b0645c5c4134bd39b93fb2",
      "patch": "@@ -17,6 +17,7 @@\n \n package org.openqa.selenium.netty.server;\n \n+import com.google.common.io.ByteStreams;\n import io.netty.buffer.Unpooled;\n import io.netty.channel.ChannelFuture;\n import io.netty.channel.ChannelHandlerContext;\n@@ -59,7 +60,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)\n     // We may not know how large the response is, but figure it out if we can.\n     byte[] ary = new byte[CHUNK_SIZE];\n     InputStream is = seResponse.getContent().get();\n-    int byteCount = is.read(ary);\n+    int byteCount = ByteStreams.read(is, ary, 0, ary.length);\n     // If there are no bytes left to read, then -1 is returned by read, and this is bad.\n     byteCount = byteCount == -1 ? 0 : byteCount;\n \n@@ -84,7 +85,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)\n       // We need to write the first response.\n       ctx.write(new DefaultHttpContent(Unpooled.wrappedBuffer(ary)));\n \n-      HttpChunkedInput writer = new HttpChunkedInput(new ChunkedStream(is));\n+      HttpChunkedInput writer = new HttpChunkedInput(new ChunkedStream(is, CHUNK_SIZE));\n       ChannelFuture future = ctx.write(writer);\n       future.addListener(ignored -> {\n         is.close();",
      "parent_sha": "d1c5a43c3ccef86488ddd2b1f4ef00e148c611c5"
    }
  }
]