[
  {
    "oid": "efdf3aa6036efd186ad0c0dc8e0f723882cc981c",
    "message": "Fix meta header to show project parents as well",
    "date": "2022-05-06T00:30:24Z",
    "url": "https://github.com/theonedev/onedev/commit/efdf3aa6036efd186ad0c0dc8e0f723882cc981c",
    "details": {
      "sha": "36fb4f82e7da2c6e0e3b56fdeb4ec8a927d3f0a4",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/ProjectPage.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/efdf3aa6036efd186ad0c0dc8e0f723882cc981c/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2FProjectPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/efdf3aa6036efd186ad0c0dc8e0f723882cc981c/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2FProjectPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2FProjectPage.java?ref=efdf3aa6036efd186ad0c0dc8e0f723882cc981c",
      "patch": "@@ -415,7 +415,7 @@ public void renderHead(IHeaderResponse response) {\n \t\tString urlOfProjectImage = getSettingManager().getSystemSetting().getServerUrl() +\n \t\t\t\tOneDev.getInstance(AvatarManager.class).getAvatarUrl(getProject().getId());\n \t\t\n-\t\tnew OpenGraphHeaderMeta(OpenGraphHeaderMetaType.Title, getProject().getName()).render(response);\n+\t\tnew OpenGraphHeaderMeta(OpenGraphHeaderMetaType.Title, getProject().getPath()).render(response);\n \t\tnew OpenGraphHeaderMeta(OpenGraphHeaderMetaType.Description, description).render(response);\n \t\tnew OpenGraphHeaderMeta(OpenGraphHeaderMetaType.Image, \n \t\t\t\turlOfProjectImage).render(response);",
      "parent_sha": "4f96e39c75e581063e871cda0c0111c0c52dc931"
    }
  },
  {
    "oid": "f5805a47546f24f8918463b1196ee7d2636ab8bc",
    "message": "Fix issue #856 - Automatic escaping of characters in secret during git\nsync",
    "date": "2022-08-11T13:39:37Z",
    "url": "https://github.com/theonedev/onedev/commit/f5805a47546f24f8918463b1196ee7d2636ab8bc",
    "details": {
      "sha": "60b017225bcddf7af1d4f8f0dbdeb2332725188d",
      "filename": "server-core/src/main/java/io/onedev/server/buildspec/step/SyncRepository.java",
      "status": "modified",
      "additions": 16,
      "deletions": 7,
      "changes": 23,
      "blob_url": "https://github.com/theonedev/onedev/blob/f5805a47546f24f8918463b1196ee7d2636ab8bc/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fbuildspec%2Fstep%2FSyncRepository.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/f5805a47546f24f8918463b1196ee7d2636ab8bc/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fbuildspec%2Fstep%2FSyncRepository.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fbuildspec%2Fstep%2FSyncRepository.java?ref=f5805a47546f24f8918463b1196ee7d2636ab8bc",
      "patch": "@@ -1,5 +1,8 @@\n package io.onedev.server.buildspec.step;\n \n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.concurrent.locks.Lock;\n import java.util.stream.Collectors;\n@@ -114,21 +117,27 @@ public void setForce(boolean force) {\n \t}\n \n \tpublic String getRemoteUrlWithCredential(Build build) {\n-\t\tString password = null;\n-\t\tif (getPasswordSecret() != null)\n-\t\t\tpassword = build.getJobSecretAuthorizationContext().getSecretValue(getPasswordSecret());\n+\t\tString encodedPassword = null;\n+\t\tif (getPasswordSecret() != null) {\n+\t\t\ttry {\n+\t\t\t\tString password = build.getJobSecretAuthorizationContext().getSecretValue(getPasswordSecret());\n+\t\t\t\tencodedPassword = URLEncoder.encode(password, StandardCharsets.UTF_8.name());\n+\t\t\t} catch (UnsupportedEncodingException e) {\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t}\n+\t\t}\n \n \t\tString protocol = StringUtils.substringBefore(getRemoteUrl(), \"//\");\n \t\tString hostAndPath = StringUtils.substringAfter(getRemoteUrl(), \"//\");\n \t\t\n \t\tString remoteUrlWithCredentials = protocol + \"//\";\n \t\t\n-\t\tif (getUserName() != null && password != null)\n-\t\t\tremoteUrlWithCredentials += getUserName() + \":\" + password + \"@\" + hostAndPath;\n+\t\tif (getUserName() != null && encodedPassword != null)\n+\t\t\tremoteUrlWithCredentials += getUserName() + \":\" + encodedPassword + \"@\" + hostAndPath;\n \t\telse if (getUserName() != null)\n \t\t\tremoteUrlWithCredentials += getUserName() + \"@\" + hostAndPath;\n-\t\telse if (password != null)\n-\t\t\tremoteUrlWithCredentials += password + \"@\" + hostAndPath;\n+\t\telse if (encodedPassword != null)\n+\t\t\tremoteUrlWithCredentials += encodedPassword + \"@\" + hostAndPath;\n \t\telse\n \t\t\tremoteUrlWithCredentials += hostAndPath;\n \t\t",
      "parent_sha": "5c112ba131d810cb566fcf928ed2fb03f5f6af07"
    }
  },
  {
    "oid": "53f4ddc0d4ceaab84fb69460e5485e454d9f8906",
    "message": "fix: Sometimes url is incorrect after login",
    "date": "2024-10-11T09:10:36Z",
    "url": "https://github.com/theonedev/onedev/commit/53f4ddc0d4ceaab84fb69460e5485e454d9f8906",
    "details": {
      "sha": "8f338a25b8a6309ed9e6e6ee63fe2355fd833f54",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/simple/security/SignUpPage.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/theonedev/onedev/blob/53f4ddc0d4ceaab84fb69460e5485e454d9f8906/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fsimple%2Fsecurity%2FSignUpPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/53f4ddc0d4ceaab84fb69460e5485e454d9f8906/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fsimple%2Fsecurity%2FSignUpPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fsimple%2Fsecurity%2FSignUpPage.java?ref=53f4ddc0d4ceaab84fb69460e5485e454d9f8906",
      "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.shiro.authc.credential.PasswordService;\n import org.apache.shiro.authz.UnauthenticatedException;\n+import org.apache.wicket.RestartResponseException;\n import org.apache.wicket.Session;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.SubmitLink;\n@@ -110,7 +111,7 @@ protected void onSubmit() {\n \n \t\t\t@Override\n \t\t\tpublic void onClick() {\n-\t\t\t\tsetResponsePage(HomePage.class);\n+\t\t\t\tthrow new RestartResponseException(HomePage.class);\n \t\t\t}\n \t\t\t\n \t\t});",
      "parent_sha": "5b3e4d9481b60157bfb73c4d206032382ed5e438"
    }
  },
  {
    "oid": "b82cba7773fad77f00e7ff001cd4ff359ca27f1e",
    "message": "Avoid file already exists error when upgrade",
    "date": "2019-04-17T12:59:30Z",
    "url": "https://github.com/theonedev/onedev/commit/b82cba7773fad77f00e7ff001cd4ff359ca27f1e",
    "details": {
      "sha": "b795c7093969c0ed00285afd00cefa04dda8e55c",
      "filename": "core/src/main/java/io/onedev/server/command/UpgradeCommand.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/theonedev/onedev/blob/b82cba7773fad77f00e7ff001cd4ff359ca27f1e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fcommand%2FUpgradeCommand.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/b82cba7773fad77f00e7ff001cd4ff359ca27f1e/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fcommand%2FUpgradeCommand.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fcommand%2FUpgradeCommand.java?ref=b82cba7773fad77f00e7ff001cd4ff359ca27f1e",
      "patch": "@@ -132,7 +132,10 @@ public void start() {\n \t\t\t\t\t|| file.getName().contains(\"ojdbc\") || file.getName().contains(\"postgresql\") \r\n \t\t\t\t\t|| file.getName().contains(\"sqljdbc\")) {\r\n \t\t\t\ttry {\r\n-\t\t\t\t\tFileUtils.moveFileToDirectory(file, new File(upgradeDir, \"site/lib\"), true);\r\n+\t\t\t\t\tFile destDir = new File(upgradeDir, \"site/lib\");\r\n+\t\t\t\t\tFileUtils.createDir(destDir);\r\n+\t\t\t\t\tFileUtils.copyFileToDirectory(file, destDir);\r\n+\t\t\t\t\tFileUtils.deleteFile(file);\r\n \t\t\t\t} catch (IOException e) {\r\n \t\t\t\t\tthrow new RuntimeException(e);\r\n \t\t\t\t}\r",
      "parent_sha": "cc1d4cae6abfa6b5374458e6fd6619ee2ac3c1eb"
    }
  },
  {
    "oid": "62c15337c0329db8f88014e34aab9a02d5baec65",
    "message": "Fix pipeline page exception",
    "date": "2023-01-31T08:46:05Z",
    "url": "https://github.com/theonedev/onedev/commit/62c15337c0329db8f88014e34aab9a02d5baec65",
    "details": {
      "sha": "86e995d534d2a219725b05bdbb048a45b1224e8e",
      "filename": "server-core/src/main/java/io/onedev/server/model/Project.java",
      "status": "modified",
      "additions": 21,
      "deletions": 7,
      "changes": 28,
      "blob_url": "https://github.com/theonedev/onedev/blob/62c15337c0329db8f88014e34aab9a02d5baec65/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2FProject.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/62c15337c0329db8f88014e34aab9a02d5baec65/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2FProject.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2FProject.java?ref=62c15337c0329db8f88014e34aab9a02d5baec65",
      "patch": "@@ -162,9 +162,11 @@ public static void pop() {\n \t\tstack.get().pop();\n \t}\n \t\n-\tprivate static final ReferenceMap<ObjectId, Optional<byte[]>> buildSpecCache = \n+\tprivate static final ReferenceMap<ObjectId, Optional<byte[]>> buildSpecBytesCache = \n \t\t\tnew ReferenceMap<>(ReferenceStrength.HARD, ReferenceStrength.SOFT);\n-    \n+\n+\tprivate transient Map<ObjectId, Optional<BuildSpec>> buildSpecCache;\n+\n \t@ManyToOne(fetch=FetchType.LAZY)\n \t@JoinColumn(nullable=true)\n \t@Api(description=\"Represents the project from which this project is forked. Remove this property if \"\n@@ -739,10 +741,10 @@ public void cacheCommitStatus(Map<ObjectId, Map<String, Collection<StatusInfo>>>\n \t * \t\t\tException when build spec is defined but not valid\n \t */\n \t@Nullable\n-\tpublic BuildSpec getBuildSpec(ObjectId commitId) {\n+\tprivate BuildSpec loadBuildSpec(ObjectId commitId) {\n \t\tOptional<byte[]> buildSpecBytes;\n-\t\tsynchronized (buildSpecCache) {\n-\t\t\tbuildSpecBytes = buildSpecCache.get(commitId);\n+\t\tsynchronized (buildSpecBytesCache) {\n+\t\t\tbuildSpecBytes = buildSpecBytesCache.get(commitId);\n \t\t}\n \t\tif (buildSpecBytes == null) {\n \t\t\tBlob blob = getBlob(new BlobIdent(commitId.name(), BuildSpec.BLOB_PATH, FileMode.TYPE_FILE), false);\n@@ -760,8 +762,8 @@ public BuildSpec getBuildSpec(ObjectId commitId) {\n \t\t\t\tbuildSpecBytes = Optional.of(SerializationUtils.serialize(buildSpec));\n \t\t\telse\n \t\t\t\tbuildSpecBytes = Optional.absent();\n-\t\t\tsynchronized (buildSpecCache) {\n-\t\t\t\tbuildSpecCache.put(commitId, buildSpecBytes);\n+\t\t\tsynchronized (buildSpecBytesCache) {\n+\t\t\t\tbuildSpecBytesCache.put(commitId, buildSpecBytes);\n \t\t\t}\n \t\t\treturn buildSpec;\n \t\t} else if (buildSpecBytes.isPresent()) {\n@@ -771,6 +773,18 @@ public BuildSpec getBuildSpec(ObjectId commitId) {\n \t\t}\n \t}\n \t\n+\t@Nullable\n+\tpublic BuildSpec getBuildSpec(ObjectId commitId) {\n+\t\tif (buildSpecCache == null)\n+\t\t\tbuildSpecCache = new HashMap<>();\n+\t\tOptional<BuildSpec> buildSpec = buildSpecCache.get(commitId);\n+\t\tif (buildSpec == null) {\n+\t\t\tbuildSpec = Optional.fromNullable(loadBuildSpec(commitId));\n+\t\t\tbuildSpecCache.put(commitId, buildSpec);\n+\t\t}\n+\t\treturn buildSpec.orNull();\n+\t}\n+\t\n \tpublic List<String> getJobNames() {\n \t\tList<String> jobNames = new ArrayList<>();\n \t\tif (getDefaultBranch() != null) {",
      "parent_sha": "18e43995c751ff14624d8150cf9d4f6a1ba16f3d"
    }
  },
  {
    "oid": "d55d23ddc2f4c2479cd2463c39ef4f440f3bf3f1",
    "message": "Fix ApprovedBySpecifiedUser bug that error message is incorrect",
    "date": "2016-10-12T08:54:58Z",
    "url": "https://github.com/theonedev/onedev/commit/d55d23ddc2f4c2479cd2463c39ef4f440f3bf3f1",
    "details": {
      "sha": "7fb45088c8e4e7e3da73350cb21ed137bd568e16",
      "filename": "gitplex.core/src/main/java/com/pmease/gitplex/core/gatekeeper/ApprovedBySpecifiedUser.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/theonedev/onedev/blob/d55d23ddc2f4c2479cd2463c39ef4f440f3bf3f1/gitplex.core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fcore%2Fgatekeeper%2FApprovedBySpecifiedUser.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/d55d23ddc2f4c2479cd2463c39ef4f440f3bf3f1/gitplex.core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fcore%2Fgatekeeper%2FApprovedBySpecifiedUser.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fcore%2Fgatekeeper%2FApprovedBySpecifiedUser.java?ref=d55d23ddc2f4c2479cd2463c39ef4f440f3bf3f1",
      "patch": "@@ -53,12 +53,14 @@ public GateCheckResult doCheckRequest(PullRequest request) {\n \n \t@Override\n \tprotected GateCheckResult doCheckFile(Account user, Depot depot, String branch, String file) {\n-    \treturn pending(Lists.newArrayList(\"Need approval from \" + user.getName())); \n+        Account approveUser = Preconditions.checkNotNull(GitPlex.getInstance(AccountManager.class).findByName(userName));\n+    \treturn pending(Lists.newArrayList(\"Need approval from \" + approveUser.getDisplayName())); \n \t}\n \n \t@Override\n \tprotected GateCheckResult doCheckPush(Account user, Depot depot, String refName, ObjectId oldCommit, ObjectId newCommit) {\n-    \treturn pending(Lists.newArrayList(\"Need approval from \" + user.getName())); \n+        Account approveUser = Preconditions.checkNotNull(GitPlex.getInstance(AccountManager.class).findByName(userName));\n+    \treturn pending(Lists.newArrayList(\"Need approval from \" + approveUser.getDisplayName())); \n \t}\n \n \t@Override",
      "parent_sha": "5596885b949bf8f3b0950315914c4c30c71c21f3"
    }
  },
  {
    "oid": "c5bd7775f39572538fd1a94c07b7c77e14bedf72",
    "message": "Have markdown renderer show '.mkd' as well",
    "date": "2022-05-03T00:45:00Z",
    "url": "https://github.com/theonedev/onedev/commit/c5bd7775f39572538fd1a94c07b7c77e14bedf72",
    "details": {
      "sha": "774007d84d5098c3131a14b03d6579c7ad71014e",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/blob/render/renderers/markdown/MarkdownRenderer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/c5bd7775f39572538fd1a94c07b7c77e14bedf72/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Frenderers%2Fmarkdown%2FMarkdownRenderer.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/c5bd7775f39572538fd1a94c07b7c77e14bedf72/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Frenderers%2Fmarkdown%2FMarkdownRenderer.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Frenderers%2Fmarkdown%2FMarkdownRenderer.java?ref=c5bd7775f39572538fd1a94c07b7c77e14bedf72",
      "patch": "@@ -13,7 +13,7 @@\n public class MarkdownRenderer implements BlobRendererer {\n \n \tprivate boolean isMarkdown(@Nullable String blobPath) {\n-\t\treturn blobPath != null && blobPath.endsWith(\".md\");\n+\t\treturn blobPath != null && (blobPath.endsWith(\".md\") || blobPath.endsWith(\".mkd\"));\n \t}\n \t\n \t@Override",
      "parent_sha": "9bcba525db8851e1fac560c49a7f72f3d964c894"
    }
  },
  {
    "oid": "cc779b4d2f567959831773b25920a6e2d2418e0c",
    "message": "Leave docker image as is even if alternate docker registry is specified",
    "date": "2019-06-08T14:28:34Z",
    "url": "https://github.com/theonedev/onedev/commit/cc779b4d2f567959831773b25920a6e2d2418e0c",
    "details": {
      "sha": "a86719f1c3f047e7dcbb004fd03a8fe085b10b49",
      "filename": "server-core/src/main/java/io/onedev/server/model/support/jobexecutor/ServerDockerExecutor.java",
      "status": "modified",
      "additions": 89,
      "deletions": 74,
      "changes": 163,
      "blob_url": "https://github.com/theonedev/onedev/blob/cc779b4d2f567959831773b25920a6e2d2418e0c/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fjobexecutor%2FServerDockerExecutor.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/cc779b4d2f567959831773b25920a6e2d2418e0c/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fjobexecutor%2FServerDockerExecutor.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fjobexecutor%2FServerDockerExecutor.java?ref=cc779b4d2f567959831773b25920a6e2d2418e0c",
      "patch": "@@ -5,9 +5,12 @@\n import java.io.IOException;\r\n import java.io.Serializable;\r\n import java.io.UnsupportedEncodingException;\r\n+import java.util.ArrayList;\r\n import java.util.Collection;\r\n+import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n import java.util.UUID;\r\n import java.util.concurrent.Callable;\r\n \r\n@@ -43,7 +46,6 @@\n import io.onedev.server.web.editable.annotation.NameOfEmptyValue;\r\n import io.onedev.server.web.editable.annotation.OmitName;\r\n import io.onedev.server.web.editable.annotation.Password;\r\n-import io.onedev.server.web.editable.annotation.ShowCondition;\r\n import io.onedev.server.web.util.Testable;\r\n \r\n @Editable(order=100, description=\"This executor interpretates job environments as docker images, \"\r\n@@ -58,64 +60,16 @@ public class ServerDockerExecutor extends JobExecutor implements Testable<TestDa\n \t\r\n \tprivate static final Logger logger = LoggerFactory.getLogger(ServerDockerExecutor.class);\r\n \r\n-\tprivate String dockerRegistry;\r\n-\t\r\n-\tprivate boolean authenticateToRegistry;\r\n-\t\r\n-\tprivate String userName;\r\n-\t\r\n-\tprivate String password;\r\n-\t\r\n \tprivate String dockerExecutable;\r\n \t\r\n \tprivate String runOptions;\r\n \t\r\n \tprivate int capacity = Runtime.getRuntime().availableProcessors();\r\n \t\r\n+\tprivate List<RegistryLogin> registryLogins = new ArrayList<>();\r\n+\t\r\n \tprivate transient ConstrainedRunner constrainedRunner;\r\n \r\n-\t@Editable(order=1100, description=\"Optionally specify a docker registry to use. Leave empty to use the default registry\")\r\n-\t@NameOfEmptyValue(\"Use default\")\r\n-\tpublic String getDockerRegistry() {\r\n-\t\treturn dockerRegistry;\r\n-\t}\r\n-\r\n-\tpublic void setDockerRegistry(String dockerRegistry) {\r\n-\t\tthis.dockerRegistry = dockerRegistry;\r\n-\t}\r\n-\r\n-\t@Editable(order=1150)\r\n-\tpublic boolean isAuthenticateToRegistry() {\r\n-\t\treturn authenticateToRegistry;\r\n-\t}\r\n-\r\n-\tpublic void setAuthenticateToRegistry(boolean authenticateToRegistry) {\r\n-\t\tthis.authenticateToRegistry = authenticateToRegistry;\r\n-\t}\r\n-\r\n-\t@Editable(order=1200, description=\"Specify user name to access docker registry\")\r\n-\t@NotEmpty\r\n-\t@ShowCondition(\"isRegistryAuthenticationRequired\")\r\n-\tpublic String getUserName() {\r\n-\t\treturn userName;\r\n-\t}\r\n-\r\n-\tpublic void setUserName(String userName) {\r\n-\t\tthis.userName = userName;\r\n-\t}\r\n-\r\n-\t@Editable(order=1300, description=\"Specify password to access docker registry\")\r\n-\t@Password\r\n-\t@NotEmpty\r\n-\t@ShowCondition(\"isRegistryAuthenticationRequired\")\r\n-\tpublic String getPassword() {\r\n-\t\treturn password;\r\n-\t}\r\n-\r\n-\tpublic void setPassword(String password) {\r\n-\t\tthis.password = password;\r\n-\t}\r\n-\t\r\n \t@Editable(order=20000, group=\"More Settings\", description=\"Optionally specify docker executable, for instance <i>/usr/local/bin/docker</i>. \"\r\n \t\t\t+ \"Leave empty to use docker executable in PATH\")\r\n \tpublic String getDockerExecutable() {\r\n@@ -150,24 +104,22 @@ public void setCapacity(int capacity) {\n \t\tthis.capacity = capacity;\r\n \t}\r\n \r\n+\t@Editable(order=20300, group=\"More Settings\", description=\"Specify login information for docker registries if necessary\")\r\n+\tpublic List<RegistryLogin> getRegistryLogins() {\r\n+\t\treturn registryLogins;\r\n+\t}\r\n+\r\n+\tpublic void setRegistryLogins(List<RegistryLogin> registryLogins) {\r\n+\t\tthis.registryLogins = registryLogins;\r\n+\t}\r\n+\r\n \tprivate Commandline getDockerCmd() {\r\n \t\tif (getDockerExecutable() != null)\r\n \t\t\treturn new Commandline(getDockerExecutable());\r\n \t\telse\r\n \t\t\treturn new Commandline(\"docker\");\r\n \t}\r\n \t\r\n-\tprivate String getPullImage(String image) {\r\n-\t\tif (getDockerRegistry() != null) {\r\n-\t\t\tif (image.contains(\"/\"))\r\n-\t\t\t\treturn getDockerRegistry() + \"/\" + image;\r\n-\t\t\telse\r\n-\t\t\t\treturn getDockerRegistry() + \"/library/\" + image;\r\n-\t\t} else {\r\n-\t\t\treturn image;\r\n-\t\t}\r\n-\t}\r\n-\t\r\n \t@SuppressWarnings(\"unchecked\")\r\n \tprivate String getImageOS(Logger logger, String image) {\r\n \t\tlogger.info(\"Checking image OS...\");\r\n@@ -226,7 +178,7 @@ public Void call(Collection<CacheAllocation> allocations) {\n \t\t\t\t\t\t\r\n \t\t\t\t\t\tlogger.info(\"Pulling image...\") ;\r\n \t\t\t\t\t\tCommandline cmd = getDockerCmd();\r\n-\t\t\t\t\t\tcmd.addArgs(\"pull\", getPullImage(environment));\r\n+\t\t\t\t\t\tcmd.addArgs(\"pull\", environment);\r\n \t\t\t\t\t\tcmd.execute(newInfoLogger(logger), newErrorLogger(logger)).checkReturnCode();\r\n \t\t\t\t\t\t\r\n \t\t\t\t\t\tcmd.clearArgs();\r\n@@ -357,15 +309,18 @@ public void consume(String line) {\n \t}\r\n \t\r\n \tprivate void login(Logger logger) {\r\n-\t\tif (isAuthenticateToRegistry()) {\r\n-\t\t\tlogger.info(\"Login to docker registry...\");\r\n+\t\tfor (RegistryLogin login: getRegistryLogins()) {\r\n+\t\t\tif (login.getRegistryUrl() != null)\r\n+\t\t\t\tlogger.info(\"Login to docker registry '{}'...\", login.getRegistryUrl());\r\n+\t\t\telse\r\n+\t\t\t\tlogger.info(\"Login to official docker registry...\");\r\n \t\t\tCommandline cmd = getDockerCmd();\r\n-\t\t\tcmd.addArgs(\"login\", \"-u\", getUserName(), \"--password-stdin\");\r\n-\t\t\tif (getDockerRegistry() != null)\r\n-\t\t\t\tcmd.addArgs(getDockerRegistry());\r\n+\t\t\tcmd.addArgs(\"login\", \"-u\", login.getUserName(), \"--password-stdin\");\r\n+\t\t\tif (login.getRegistryUrl() != null)\r\n+\t\t\t\tcmd.addArgs(login.getRegistryUrl());\r\n \t\t\tByteArrayInputStream input;\r\n \t\t\ttry {\r\n-\t\t\t\tinput = new ByteArrayInputStream(getPassword().getBytes(Charsets.UTF_8.name()));\r\n+\t\t\t\tinput = new ByteArrayInputStream(login.getPassword().getBytes(Charsets.UTF_8.name()));\r\n \t\t\t} catch (UnsupportedEncodingException e) {\r\n \t\t\t\tthrow new RuntimeException(e);\r\n \t\t\t}\r\n@@ -422,20 +377,36 @@ public Void call() throws Exception {\n \t\r\n \t@Override\r\n \tpublic boolean isValid(ConstraintValidatorContext context) {\r\n+\t\tboolean isValid = true;\r\n+\t\tSet<String> registryUrls = new HashSet<>();\r\n+\t\tfor (RegistryLogin login: getRegistryLogins()) {\r\n+\t\t\tif (!registryUrls.add(login.getRegistryUrl())) {\r\n+\t\t\t\tisValid = false;\r\n+\t\t\t\tString message;\r\n+\t\t\t\tif (login.getRegistryUrl() != null)\r\n+\t\t\t\t\tmessage = \"Duplicate login entry for registry '\" + login.getRegistryUrl() + \"'\";\r\n+\t\t\t\telse\r\n+\t\t\t\t\tmessage = \"Duplicate login entry for official registry\";\r\n+\t\t\t\tcontext.buildConstraintViolationWithTemplate(message)\r\n+\t\t\t\t\t\t.addPropertyNode(\"registryLogins\").addConstraintViolation();\r\n+\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t}\r\n \t\tif (getRunOptions() != null) {\r\n \t\t\tString[] arguments = StringUtils.parseQuoteTokens(getRunOptions());\r\n \t\t\tString invalidOptions[] = new String[] {\"-w\", \"--workdir\", \"-d\", \"--detach\", \"-a\", \"--attach\", \"-t\", \"--tty\", \r\n \t\t\t\t\t\"-i\", \"--interactive\", \"--rm\", \"--restart\", \"--name\"}; \r\n \t\t\tif (hasOptions(arguments, invalidOptions)) {\r\n-\t\t\t\tcontext.disableDefaultConstraintViolation();\r\n \t\t\t\tStringBuilder errorMessage = new StringBuilder(\"Can not use options: \"\r\n \t\t\t\t\t\t+ Joiner.on(\", \").join(invalidOptions));\r\n \t\t\t\tcontext.buildConstraintViolationWithTemplate(errorMessage.toString())\r\n \t\t\t\t\t\t.addPropertyNode(\"runOptions\").addConstraintViolation();\r\n-\t\t\t\treturn false;\r\n+\t\t\t\tisValid = false;\r\n \t\t\t} \r\n \t\t}\r\n-\t\treturn true;\r\n+\t\tif (!isValid)\r\n+\t\t\tcontext.disableDefaultConstraintViolation();\r\n+\t\treturn isValid;\r\n \t}\r\n \t\r\n \t@Override\r\n@@ -447,7 +418,7 @@ public void test(TestData testData) {\n \t\tlogger.info(\"Pulling image...\");\r\n \t\t\r\n \t\tCommandline cmd = getDockerCmd();\r\n-\t\tcmd.addArgs(\"pull\", getPullImage(testData.getDockerImage()));\r\n+\t\tcmd.addArgs(\"pull\", testData.getDockerImage());\r\n \t\tcmd.execute(newInfoLogger(logger), newErrorLogger(logger)).checkReturnCode();\r\n \t\t\r\n \t\tboolean windows = getImageOS(logger, testData.getDockerImage()).equals(\"windows\");\r\n@@ -479,7 +450,7 @@ public void test(TestData testData) {\n \t\t\tcmd.addArgs(\"-v\", cacheDir.getAbsolutePath() + \":\" + containerCachePath);\r\n \t\t\t\r\n \t\t\tcmd.addArgs(\"-w\", containerWorkspacePath);\r\n-\t\t\tcmd.addArgs(getPullImage(testData.getDockerImage()));\r\n+\t\t\tcmd.addArgs(testData.getDockerImage());\r\n \t\t\t\r\n \t\t\tif (windows) \r\n \t\t\t\tcmd.addArgs(\"cmd\", \"/c\", \"echo hello from container\");\r\n@@ -516,6 +487,50 @@ public void cleanDir(File dir) {\n \t\t\tcmd.execute(newInfoLogger(logger), newErrorLogger(logger)).checkReturnCode();\r\n \t\t}\r\n \t}\r\n+\t\r\n+\t@Editable\r\n+\tpublic static class RegistryLogin implements Serializable {\r\n+\t\t\r\n+\t\tprivate static final long serialVersionUID = 1L;\r\n+\r\n+\t\tprivate String registryUrl;\r\n+\t\t\r\n+\t\tprivate String userName;\r\n+\t\t\r\n+\t\tprivate String password;\r\n+\r\n+\t\t@Editable(order=100, description=\"Specify registry url. Leave empty for official registry\")\r\n+\t\t@NameOfEmptyValue(\"Default Registry\")\r\n+\t\tpublic String getRegistryUrl() {\r\n+\t\t\treturn registryUrl;\r\n+\t\t}\r\n+\r\n+\t\tpublic void setRegistryUrl(String registryUrl) {\r\n+\t\t\tthis.registryUrl = registryUrl;\r\n+\t\t}\r\n+\r\n+\t\t@Editable(order=200)\r\n+\t\t@NotEmpty\r\n+\t\tpublic String getUserName() {\r\n+\t\t\treturn userName;\r\n+\t\t}\r\n+\r\n+\t\tpublic void setUserName(String userName) {\r\n+\t\t\tthis.userName = userName;\r\n+\t\t}\r\n+\r\n+\t\t@Editable(order=300)\r\n+\t\t@NotEmpty\r\n+\t\t@Password\r\n+\t\tpublic String getPassword() {\r\n+\t\t\treturn password;\r\n+\t\t}\r\n+\r\n+\t\tpublic void setPassword(String password) {\r\n+\t\t\tthis.password = password;\r\n+\t\t}\r\n+\t\t\r\n+\t}\r\n \r\n \t@Editable(name=\"Specify a Docker Image to Test Against\")\r\n \tpublic static class TestData implements Serializable {\r",
      "parent_sha": "2971df6a5d3dd55f0a93757312224cb457f3421b"
    }
  },
  {
    "oid": "aa9b2a3ce1dc942f4979d0737878973abcd8e3fb",
    "message": "Fix typo",
    "date": "2023-02-24T10:12:37Z",
    "url": "https://github.com/theonedev/onedev/commit/aa9b2a3ce1dc942f4979d0737878973abcd8e3fb",
    "details": {
      "sha": "ae5d030cefd39b8b8e9542306bea145d80483dc4",
      "filename": "server-core/src/main/java/io/onedev/server/rest/JobRunResource.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/aa9b2a3ce1dc942f4979d0737878973abcd8e3fb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Frest%2FJobRunResource.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/aa9b2a3ce1dc942f4979d0737878973abcd8e3fb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Frest%2FJobRunResource.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Frest%2FJobRunResource.java?ref=aa9b2a3ce1dc942f4979d0737878973abcd8e3fb",
      "patch": "@@ -119,7 +119,7 @@ public String getDescription() {\n \n \t\t\tMergePreview preview = pullRequest.checkMergePreview();\n \t\t\tif (preview == null)\n-\t\t\t\tthrow new ValidationException(\"Pull request merge preview not calcualted yet\");\n+\t\t\t\tthrow new ValidationException(\"Pull request merge preview not calculated yet\");\n \t\t\tif (preview.getMergeCommitHash() == null)\n \t\t\t\tthrow new ValidationException(\"Pull request has merge conflicts\");\n \t\t\t",
      "parent_sha": "b41624fdc9b7826150db94fd33476362ce35d21f"
    }
  },
  {
    "oid": "9ae56a80381b08d736345e3173d82017812aa137",
    "message": "minor format fix",
    "date": "2023-03-01T14:10:48Z",
    "url": "https://github.com/theonedev/onedev/commit/9ae56a80381b08d736345e3173d82017812aa137",
    "details": {
      "sha": "bc98d5ea5295aff988bab2f87d5c06feed43d837",
      "filename": "server-core/src/main/java/io/onedev/server/job/DefaultJobManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/theonedev/onedev/blob/9ae56a80381b08d736345e3173d82017812aa137/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fjob%2FDefaultJobManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/9ae56a80381b08d736345e3173d82017812aa137/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fjob%2FDefaultJobManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fjob%2FDefaultJobManager.java?ref=9ae56a80381b08d736345e3173d82017812aa137",
      "patch": "@@ -703,7 +703,8 @@ public void run() {\n \t\t\t\t\t\t\t\t\t\t\t\t@Override\n \t\t\t\t\t\t\t\t\t\t\t\tpublic void run(Map<String, List<String>> paramMap) {\n \t\t\t\t\t\t\t\t\t\t\t\t\tsubmit(project, commitId, job.getName(), paramMap,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpipeline, match.getRefName(), SecurityUtils.getUser(), match.getRequest(), match.getReason());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpipeline, match.getRefName(), SecurityUtils.getUser(), \n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmatch.getRequest(), match.getReason());\n \t\t\t\t\t\t\t\t\t\t\t\t}\n \n \t\t\t\t\t\t\t\t\t\t\t}.run();\n@@ -1084,7 +1085,8 @@ public void run() {\n \n \t\t\t\t\t\t\t@Override\n \t\t\t\t\t\t\tpublic void run(Map<String, List<String>> paramMap) {\n-\t\t\t\t\t\t\t\tsubmit(project, commitId, job.getName(), paramMap, pipeline, refName, SecurityUtils.getUser(), null, reason);\n+\t\t\t\t\t\t\t\tsubmit(project, commitId, job.getName(), paramMap, pipeline, \n+\t\t\t\t\t\t\t\t\t\trefName, SecurityUtils.getUser(), null, reason);\n \t\t\t\t\t\t\t}\n \n \t\t\t\t\t\t}.run();",
      "parent_sha": "8760a5264eec977de03232ab6ff936d7a621228a"
    }
  },
  {
    "oid": "0a4b82a549211d40d89cf6737a7a976b0969d5da",
    "message": "Also check pack-refs when dealing with git.hasCommits",
    "date": "2013-12-19T07:09:37Z",
    "url": "https://github.com/theonedev/onedev/commit/0a4b82a549211d40d89cf6737a7a976b0969d5da",
    "details": {
      "sha": "a34752264b657f65489243dc8a8a1e8778d8295d",
      "filename": "commons.git/src/main/java/com/pmease/commons/git/Git.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/0a4b82a549211d40d89cf6737a7a976b0969d5da/commons.git%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fgit%2FGit.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/0a4b82a549211d40d89cf6737a7a976b0969d5da/commons.git%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fgit%2FGit.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/commons.git%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fgit%2FGit.java?ref=0a4b82a549211d40d89cf6737a7a976b0969d5da",
      "patch": "@@ -354,7 +354,7 @@ public Map<String, String> listSubModules(String revision) {\n \n \tpublic boolean hasCommits() {\n \t\tFile headsDir = new File(repoDir, \"refs/heads\");\n-\t\treturn headsDir.exists() && headsDir.list().length != 0;\n+\t\treturn headsDir.exists() && headsDir.list().length != 0 || new File(repoDir, \"packed-refs\").exists();\n \t}\n \t\n \tpublic boolean isValid() {",
      "parent_sha": "96fc67dd438cb8cec1d64b31d2bc755edc7c8f17"
    }
  },
  {
    "oid": "a2d3f6ada91b562a4e13289e7ab214876245ab59",
    "message": "Fix issue #1153 - Show unresolved code comments by default in pull request",
    "date": "2023-01-27T09:08:17Z",
    "url": "https://github.com/theonedev/onedev/commit/a2d3f6ada91b562a4e13289e7ab214876245ab59",
    "details": {
      "sha": "e9ef714a360a895dbc946bc2483af7e04a6b9454",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/pullrequests/detail/PullRequestDetailPage.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/theonedev/onedev/blob/a2d3f6ada91b562a4e13289e7ab214876245ab59/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fpullrequests%2Fdetail%2FPullRequestDetailPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/a2d3f6ada91b562a4e13289e7ab214876245ab59/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fpullrequests%2Fdetail%2FPullRequestDetailPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fpullrequests%2Fdetail%2FPullRequestDetailPage.java?ref=a2d3f6ada91b562a4e13289e7ab214876245ab59",
      "patch": "@@ -1568,7 +1568,8 @@ public Component render(String componentId) {\n \t\t\tif (getMainPageClass() == PullRequestCodeCommentsPage.class) {\n \t\t\t\tFragment fragment = new Fragment(componentId, \"codeCommentsTabLinkFrag\", PullRequestDetailPage.this);\n \t\t\t\tLink<Void> link = new ViewStateAwarePageLink<Void>(\"link\", \n-\t\t\t\t\t\tPullRequestCodeCommentsPage.class, paramsOf(getPullRequest()));\n+\t\t\t\t\t\tPullRequestCodeCommentsPage.class, \n+\t\t\t\t\t\tPullRequestCodeCommentsPage.paramsOf(getPullRequest(), \"unresolved\"));\n \t\t\t\tlink.add(AttributeAppender.append(\"class\", new LoadableDetachableModel<String>() {\n \n \t\t\t\t\t@Override",
      "parent_sha": "35b8595ac62f9baead3cf3299a8ec7523b5fccf6"
    }
  },
  {
    "oid": "7139ecbde38dba99ac76896944d11fbfd8ccb6c9",
    "message": "Switched confirmation modal for key deletion to standard ConfirmModal\ncomponent",
    "date": "2020-03-02T17:25:56Z",
    "url": "https://github.com/theonedev/onedev/commit/7139ecbde38dba99ac76896944d11fbfd8ccb6c9",
    "details": {
      "sha": "59a2cad2c191cb1479347a483449cf2e7313ebd7",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/my/sshkeys/SshKeysListPanel.java",
      "status": "modified",
      "additions": 22,
      "deletions": 17,
      "changes": 39,
      "blob_url": "https://github.com/theonedev/onedev/blob/7139ecbde38dba99ac76896944d11fbfd8ccb6c9/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fmy%2Fsshkeys%2FSshKeysListPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/7139ecbde38dba99ac76896944d11fbfd8ccb6c9/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fmy%2Fsshkeys%2FSshKeysListPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fmy%2Fsshkeys%2FSshKeysListPanel.java?ref=7139ecbde38dba99ac76896944d11fbfd8ccb6c9",
      "patch": "@@ -2,22 +2,22 @@\n \n import java.time.format.DateTimeFormatter;\n import java.util.List;\n-import org.apache.wicket.Component;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.attributes.AjaxCallListener;\n-import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n+\n import io.onedev.server.OneDev;\n import io.onedev.server.OneException;\n import io.onedev.server.model.SshKey;\n import io.onedev.server.persistence.dao.Dao;\n import io.onedev.server.web.OneWebApplication;\n+import io.onedev.server.web.component.modal.confirm.ConfirmModal;\n \n @SuppressWarnings(\"serial\")\n public class SshKeysListPanel extends Panel {\n@@ -46,26 +46,31 @@ public void populateItem(final ListItem<SshKey> item)\n                 item.add(new AjaxLink<Void>(\"delete\") {\n                     @Override\n                     public void onClick(AjaxRequestTarget target) {\n-                        Dao dao = OneDev.getInstance(Dao.class);\n-                        dao.remove(sshKey);\n-                        target.add(keyList);\n-                    }\n-                    \n-                    @Override\n-                    protected void updateAjaxAttributes(AjaxRequestAttributes attributes) {\n-                        super.updateAjaxAttributes(attributes);\n-                        AjaxCallListener myAjaxCallListener = new AjaxCallListener() {\n+                        \n+                        new ConfirmModal(target) {\n+\n+                            @Override\n+                            protected void onConfirm(AjaxRequestTarget target) {\n+                                Dao dao = OneDev.getInstance(Dao.class);\n+                                dao.remove(sshKey);\n+                                target.add(keyList);\n+                            }\n+\n+                            @Override\n+                            protected String getConfirmInput() {\n+                                return null;\n+                            }\n+\n                             @Override\n-                            public CharSequence getPrecondition(Component component) {\n-                                return \"return confirm(\\\"Are you sure you want to delete key \\'\" \n-                                        + sshKey.getName() + \"\\'?\\\")\";\n+                            protected String getConfirmMessage() {\n+                                return \"Are you sure you want to delete key '\" + sshKey.getName() + \"'?\";\n                             }\n+                            \n                         };\n-                        attributes.getAjaxCallListeners().add(myAjaxCallListener);\n                     }\n                 });\n             }\n-        });\n+        }).setOutputMarkupId(true);\n         \n         add(keyList);\n     }",
      "parent_sha": "54ebeec73ecdd2165be70c5db0165c117f0c2139"
    }
  },
  {
    "oid": "3e83719f77da0feb260a02f0b2236713704208bb",
    "message": "Minor email notification template fix",
    "date": "2023-02-10T08:20:58Z",
    "url": "https://github.com/theonedev/onedev/commit/3e83719f77da0feb260a02f0b2236713704208bb",
    "details": {
      "sha": "92fbefa482dc095ae71e6b4b13ab93094aade7c6",
      "filename": "server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultEmailAddressManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/3e83719f77da0feb260a02f0b2236713704208bb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultEmailAddressManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/3e83719f77da0feb260a02f0b2236713704208bb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultEmailAddressManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultEmailAddressManager.java?ref=3e83719f77da0feb260a02f0b2236713704208bb",
      "patch": "@@ -224,7 +224,7 @@ public void sendVerificationEmail(EmailAddress emailAddress) {\n \t\t\t\tserverUrl, emailAddress.getId(), emailAddress.getVerificationCode());\n \t\tString htmlBody = String.format(\"Hello,\"\n \t\t\t+ \"<p style='margin: 16px 0;'>\"\n-\t\t\t+ \"The account \\\"%s\\\" at \\\"%s\\\" tries to use email address '%s', please visit below link to verify if this is you:<br><br>\"\n+\t\t\t+ \"The account \\\"%s\\\" at \\\"%s\\\" tries to use email address \\\"%s\\\", please visit below link to verify if this is you:<br><br>\"\n \t\t\t+ \"<a href='%s'>%s</a>\",\n \t\t\tuser.getName(), serverUrl, emailAddress.getValue(), verificationUrl, verificationUrl);\n ",
      "parent_sha": "845bf322530400f8bc6f9b88d068558dc28b94c3"
    }
  },
  {
    "oid": "deaaa10e4eff1746bdaa5b30f55509acb691ab99",
    "message": "Fix the issue that resources are not packed even in production mode",
    "date": "2017-01-16T08:53:28Z",
    "url": "https://github.com/theonedev/onedev/commit/deaaa10e4eff1746bdaa5b30f55509acb691ab99",
    "details": {
      "sha": "34af060c5138163b6d5e152f90cb2a8c8f045c1e",
      "filename": "commons.wicket/src/main/java/com/gitplex/commons/wicket/AbstractWicketConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/deaaa10e4eff1746bdaa5b30f55509acb691ab99/commons.wicket%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fcommons%2Fwicket%2FAbstractWicketConfig.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/deaaa10e4eff1746bdaa5b30f55509acb691ab99/commons.wicket%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fcommons%2Fwicket%2FAbstractWicketConfig.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/commons.wicket%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fcommons%2Fwicket%2FAbstractWicketConfig.java?ref=deaaa10e4eff1746bdaa5b30f55509acb691ab99",
      "patch": "@@ -125,7 +125,7 @@ protected void encodePageComponentInfo(Url url, PageComponentInfo info) {\n \t\t\t\n \t\t});\n \n-\t\tif (Bootstrap.prodMode) {\n+\t\tif (getConfigurationType() == RuntimeConfigurationType.DEPLOYMENT) {\n \t\t\tList<Class<?>> resourcePackScopes = new ArrayList<>();\n \t\t\tfor (ResourcePackScopeContribution contribution: AppLoader.getExtensions(ResourcePackScopeContribution.class)) {\n \t\t\t\tresourcePackScopes.addAll(contribution.getResourcePackScopes());",
      "parent_sha": "17e80aaebfc1054dbbf77c0c6ad8013727cb6780"
    }
  },
  {
    "oid": "47ab5d1e1d7ccf962704af3a312919e4ad2fb50e",
    "message": "Add date format description",
    "date": "2015-07-15T12:00:39Z",
    "url": "https://github.com/theonedev/onedev/commit/47ab5d1e1d7ccf962704af3a312919e4ad2fb50e",
    "details": {
      "sha": "40395c32f8a2c985dfc8a5b2d3fa4deb1c55af0e",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/page/repository/pullrequest/requestlist/SearchOption.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/theonedev/onedev/blob/47ab5d1e1d7ccf962704af3a312919e4ad2fb50e/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fpullrequest%2Frequestlist%2FSearchOption.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/47ab5d1e1d7ccf962704af3a312919e4ad2fb50e/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fpullrequest%2Frequestlist%2FSearchOption.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fpullrequest%2Frequestlist%2FSearchOption.java?ref=47ab5d1e1d7ccf962704af3a312919e4ad2fb50e",
      "patch": "@@ -111,7 +111,7 @@ public void setDescription(String description) {\n \t\tthis.description = description;\n \t}\n \n-\t@Editable(order=700, name=\"Created After\")\n+\t@Editable(order=700, name=\"Created After\", description=\"Date should be specified with format <i>yyyy-MM-dd</i>.\")\n \tpublic Date getBeginDate() {\n \t\treturn beginDate;\n \t}\n@@ -120,7 +120,7 @@ public void setBeginDate(Date beginDate) {\n \t\tthis.beginDate = beginDate;\n \t}\n \n-\t@Editable(order=800, name=\"Created Before\")\n+\t@Editable(order=800, name=\"Created Before\", description=\"Date should be specified with format <i>yyyy-MM-dd</i>.\")\n \tpublic Date getEndDate() {\n \t\treturn endDate;\n \t}",
      "parent_sha": "273f48c816d2a4ba9da5643615fc70a7badc271d"
    }
  },
  {
    "oid": "681f08889c43a301ce53358e35327d20635c3b28",
    "message": "Disable issue management for forked projects per default",
    "date": "2020-06-15T06:01:14Z",
    "url": "https://github.com/theonedev/onedev/commit/681f08889c43a301ce53358e35327d20635c3b28",
    "details": {
      "sha": "8d76636152d2e39e8ecadb9ffe69dbde921c4fe0",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/info/ForkOptionPanel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/681f08889c43a301ce53358e35327d20635c3b28/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Finfo%2FForkOptionPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/681f08889c43a301ce53358e35327d20635c3b28/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Finfo%2FForkOptionPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Finfo%2FForkOptionPanel.java?ref=681f08889c43a301ce53358e35327d20635c3b28",
      "patch": "@@ -39,7 +39,7 @@ protected void onInitialize() {\n \t\tProject project = new Project();\n \t\tproject.setForkedFrom(getProject());\n \t\tproject.setName(getProject().getName() + \".\" + SecurityUtils.getUser().getName());\n-\t\tproject.setIssueManagementEnabled(getProject().isIssueManagementEnabled());\n+\t\tproject.setIssueManagementEnabled(false);\n \t\t\n \t\tCollection<String> properties = Sets.newHashSet(\"name\", \"description\", \"issueManagementEnabled\");\n \t\t",
      "parent_sha": "498c5e4bab21ed60894beac60df7513c46b2ed79"
    }
  },
  {
    "oid": "b0705401f7df1b8493dfbb58063723fb9c378b5e",
    "message": "Fix diff stat bar issue",
    "date": "2020-08-31T01:05:10Z",
    "url": "https://github.com/theonedev/onedev/commit/b0705401f7df1b8493dfbb58063723fb9c378b5e",
    "details": {
      "sha": "b85fec17a8d7ce6be587c47583f703e9a27ef51c",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/diff/diffstat/DiffStatBar.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/theonedev/onedev/blob/b0705401f7df1b8493dfbb58063723fb9c378b5e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Fdiffstat%2FDiffStatBar.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/b0705401f7df1b8493dfbb58063723fb9c378b5e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Fdiffstat%2FDiffStatBar.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Fdiffstat%2FDiffStatBar.java?ref=b0705401f7df1b8493dfbb58063723fb9c378b5e",
      "patch": "@@ -36,7 +36,7 @@ protected void onInitialize() {\n \t\t\tpublic String getObject() {\n \t\t\t\tStringBuffer sb = new StringBuffer();\n \t\t\t\tfor (int i=0; i<getAdditionBlocks(); i++)\n-\t\t\t\t\tsb.append(\"&#xf0c8; \");\n+\t\t\t\t\tsb.append(\"&#9632; \");\n \t\t\t\treturn sb.toString();\n \t\t\t}\n \t\t\t\n@@ -48,7 +48,7 @@ public String getObject() {\n \t\t\tpublic String getObject() {\n \t\t\t\tStringBuffer sb = new StringBuffer();\n \t\t\t\tfor (int i=0; i<getDeletionBlocks(); i++)\n-\t\t\t\t\tsb.append(\"&#xf0c8; \");\n+\t\t\t\t\tsb.append(\"&#9632; \");\n \t\t\t\treturn sb.toString();\n \t\t\t}\n \t\t}).setEscapeModelStrings(false));\n@@ -59,7 +59,7 @@ public String getObject() {\n \t\t\tpublic String getObject() {\n \t\t\t\tStringBuffer sb = new StringBuffer();\n \t\t\t\tfor (int i=0; i<MAX_BLOCKS - getAdditionBlocks() - getDeletionBlocks(); i++)\n-\t\t\t\t\tsb.append(\"&#xf0c8; \");\n+\t\t\t\t\tsb.append(\"&#9632; \");\n \t\t\t\t\n \t\t\t\treturn sb.toString();\n \t\t\t}",
      "parent_sha": "8d0796327ee6fa9a4fd8fc39b5cf67bda33ecd65"
    }
  },
  {
    "oid": "94ba6d8a4d51478c402cd13e79a6bd8de3f0c23c",
    "message": "Exclude websocket response from response commit diagnostics logic",
    "date": "2020-01-26T08:53:47Z",
    "url": "https://github.com/theonedev/onedev/commit/94ba6d8a4d51478c402cd13e79a6bd8de3f0c23c",
    "details": {
      "sha": "a9eadf8b2b2e3d3ac64478262b69dda9e1c0c3c7",
      "filename": "server-core/src/main/java/org/apache/wicket/page/PageStoreManager.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/theonedev/onedev/blob/94ba6d8a4d51478c402cd13e79a6bd8de3f0c23c/server-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2Fpage%2FPageStoreManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/94ba6d8a4d51478c402cd13e79a6bd8de3f0c23c/server-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2Fpage%2FPageStoreManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2Fpage%2FPageStoreManager.java?ref=94ba6d8a4d51478c402cd13e79a6bd8de3f0c23c",
      "patch": "@@ -276,8 +276,8 @@ protected void storeTouchedPages(final List<IManageablePage> touchedPages)\n \t\t{\n \t\t\tif (!touchedPages.isEmpty())\n \t\t\t{\n-\t\t\t\tSessionEntry entry = null;\n-\t\t\t\tif (RequestCycle.get() != null) {\n+\t\t\t\tSessionEntry entry;\n+\t\t\t\tif (RequestCycle.get() != null && RequestCycle.get().getResponse() instanceof HttpServletResponse) {\n \t\t\t\t\tHttpServletResponse response = (HttpServletResponse) RequestCycle.get().getResponse().getContainerResponse();\n \t\t\t\t\tif (response.isCommitted()) {\n \t\t\t\t\t\tentry = getSessionEntry(false);\n@@ -287,19 +287,21 @@ protected void storeTouchedPages(final List<IManageablePage> touchedPages)\n \t\t\t\t\t\t\tString url = request.getRequestURL().toString();\n \t\t\t\t\t\t\tif (request.getQueryString() != null)\n \t\t\t\t\t\t\t\turl += \"?\" + request.getQueryString();\n-\t\t\t\t\t\t\tlogger.debug(\"url: \" + url); \n-\t\t\t\t\t\t\tlogger.debug(\"method: \" + request.getMethod());\n+\t\t\t\t\t\t\tlogger.debug(\"    url: \" + url); \n+\t\t\t\t\t\t\tlogger.debug(\"    method: \" + request.getMethod());\n \t\t\t\t\t\t\tEnumeration<String> headerNames = request.getHeaderNames();\n \t\t\t\t\t\t\twhile (headerNames.hasMoreElements()) {\n \t\t\t\t\t\t\t\tString headerName = headerNames.nextElement();\n \t\t\t\t\t\t\t\tEnumeration<String> headerValues = request.getHeaders(headerName);\n \t\t\t\t\t\t\t\twhile (headerValues.hasMoreElements()) \n-\t\t\t\t\t\t\t\t\tlogger.debug(headerName + \": \" + headerValues.nextElement());\n+\t\t\t\t\t\t\t\t\tlogger.debug(\"    \" + headerName + \": \" + headerValues.nextElement());\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n \t\t\t\t\t\tentry = getSessionEntry(true);\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tentry = getSessionEntry(true);\n \t\t\t\t}\n \t\t\t\tif (entry != null) {\n \t\t\t\t\tentry.setSessionCache(touchedPages);",
      "parent_sha": "0693dcd5c069f0b8d4754c914ac81ed78d29788e"
    }
  },
  {
    "oid": "bde812ab9073417405aee68e3a4a9fa842098a28",
    "message": "Fix incorrect url issue in merge conflict page",
    "date": "2017-07-14T13:58:09Z",
    "url": "https://github.com/theonedev/onedev/commit/bde812ab9073417405aee68e3a4a9fa842098a28",
    "details": {
      "sha": "221bee8628e098583df514710988b6e56eeb698f",
      "filename": "core/src/main/java/com/gitplex/server/model/Project.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/bde812ab9073417405aee68e3a4a9fa842098a28/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmodel%2FProject.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/bde812ab9073417405aee68e3a4a9fa842098a28/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmodel%2FProject.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmodel%2FProject.java?ref=bde812ab9073417405aee68e3a4a9fa842098a28",
      "patch": "@@ -341,7 +341,7 @@ public Repository getRepository() {\n \t}\n \t\n \tpublic String getUrl() {\n-\t\treturn GitPlex.getInstance(ConfigManager.class).getSystemSetting().getServerUrl() + \"/\" + getName();\n+\t\treturn GitPlex.getInstance(ConfigManager.class).getSystemSetting().getServerUrl() + \"/projects/\" + getName();\n \t}\n \t\n \t@Nullable",
      "parent_sha": "f676bc7cefa0db358a5455f6fff5e1b2e10178e6"
    }
  },
  {
    "oid": "547e4abd9cf3b09fee7d67b6df6775a8d3f2440e",
    "message": "midwork",
    "date": "2016-02-14T14:11:23Z",
    "url": "https://github.com/theonedev/onedev/commit/547e4abd9cf3b09fee7d67b6df6775a8d3f2440e",
    "details": {
      "sha": "8090c13174d0f2970d48a9bce4627d229aa10b99",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/page/repository/compare/RevisionComparePage.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/theonedev/onedev/blob/547e4abd9cf3b09fee7d67b6df6775a8d3f2440e/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcompare%2FRevisionComparePage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/547e4abd9cf3b09fee7d67b6df6775a8d3f2440e/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcompare%2FRevisionComparePage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcompare%2FRevisionComparePage.java?ref=547e4abd9cf3b09fee7d67b6df6775a8d3f2440e",
      "patch": "@@ -332,7 +332,15 @@ public void renderHead(IHeaderResponse response) {\n \tprivate void newTabPanel(@Nullable AjaxRequestTarget target) {\r\n \t\tfinal WebMarkupContainer tabPanel;\r\n \t\tif (path != null) {\r\n-\t\t\ttabPanel = new Fragment(TAB_PANEL_ID, \"compareFrag\", this);\r\n+\t\t\ttabPanel = new Fragment(TAB_PANEL_ID, \"compareFrag\", this) {\r\n+\r\n+\t\t\t\t@Override\r\n+\t\t\t\tprotected void onConfigure() {\r\n+\t\t\t\t\tsuper.onConfigure();\r\n+\t\t\t\t\tsetVisible(!commitsModel.getObject().isEmpty());\r\n+\t\t\t\t}\r\n+\t\t\t\t\r\n+\t\t\t};\r\n \t\t\t\r\n \t\t\tdiffOption = new DiffOptionPanel(\"diffOption\", new AbstractReadOnlyModel<Repository>() {\r\n \r\n@@ -391,7 +399,7 @@ protected void onConfigure() {\n \tprivate void newRevDiffPanel(final WebMarkupContainer tabPanel, @Nullable AjaxRequestTarget target) {\r\n \t\tRevisionDiffPanel diffPanel = new RevisionDiffPanel(\"revisionDiff\", repoModel, \r\n \t\t\t\tnew Model<PullRequest>(null), new Model<Comment>(null), \r\n-\t\t\t\tRevisionComparePage.this.target.getRevision(), source.getRevision(), \r\n+\t\t\t\tmergeBaseModel.getObject(), source.getRevision(), \r\n \t\t\t\tStringUtils.isBlank(path)?null:path, null, diffOption.getLineProcessor(), \r\n \t\t\t\tdiffOption.getDiffMode()) {\r\n \r",
      "parent_sha": "2cd5f804c45fb97a03dbcfa2adef06fb2a42e17e"
    }
  },
  {
    "oid": "0d0a87028e38c5fe2f442e31fd373bf4e94b33eb",
    "message": "Minor help fix",
    "date": "2022-11-29T02:43:29Z",
    "url": "https://github.com/theonedev/onedev/commit/0d0a87028e38c5fe2f442e31fd373bf4e94b33eb",
    "details": {
      "sha": "43893f62fb577ce10cf0ce732bb66a5b240d606e",
      "filename": "server-core/src/main/java/io/onedev/server/model/support/role/JobPrivilege.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/theonedev/onedev/blob/0d0a87028e38c5fe2f442e31fd373bf4e94b33eb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Frole%2FJobPrivilege.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/0d0a87028e38c5fe2f442e31fd373bf4e94b33eb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Frole%2FJobPrivilege.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Frole%2FJobPrivilege.java?ref=0d0a87028e38c5fe2f442e31fd373bf4e94b33eb",
      "patch": "@@ -100,8 +100,8 @@ private static boolean isAccessLogDisabled() {\n \t\treturn !(boolean) EditContext.get().getInputValue(\"accessLog\");\n \t}\n \t\n-\t@Editable(order=400, name=\"Access Build Reports\", description=\"Optionally specify space-separated reports. \"\n-\t\t\t+ \"Use '*' or '?' for wildcard match. Prefix with '-' to exclude. Leave empty to match all\")\n+\t@Editable(order=400, name=\"Access Build Reports\", placeholder=\"No accessible reports\", description=\"Optionally specify space-separated reports. \"\n+\t\t\t+ \"Use '*' or '?' for wildcard match. Prefix with '-' to exclude\")\n \t@ShowCondition(\"isAccessLogDisabled\")\n \t@Patterns\n \t@Nullable",
      "parent_sha": "5c53a09709d0dcd234e871145d2829942c51df57"
    }
  },
  {
    "oid": "b635bd031ea4b5174dc9303c6be14d06875cbcfb",
    "message": "chore: error message improvement for conventional commits validation",
    "date": "2023-05-11T09:42:41Z",
    "url": "https://github.com/theonedev/onedev/commit/b635bd031ea4b5174dc9303c6be14d06875cbcfb",
    "details": {
      "sha": "8fb83da286556c253585a99a25bd574d4f920133",
      "filename": "server-core/src/main/java/io/onedev/server/model/support/code/BranchProtection.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/theonedev/onedev/blob/b635bd031ea4b5174dc9303c6be14d06875cbcfb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fcode%2FBranchProtection.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/b635bd031ea4b5174dc9303c6be14d06875cbcfb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fcode%2FBranchProtection.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fcode%2FBranchProtection.java?ref=b635bd031ea4b5174dc9303c6be14d06875cbcfb",
      "patch": "@@ -420,14 +420,14 @@ public String checkCommitMessage(String commitMessage, boolean merged) {\n \t\t\t\t\t\treturn \"Line 1: Scope not specified\";\n \t\t\t\t}\n \t\t\t} else {\n-\t\t\t\treturn \"Line 1: Subject is expected of format: <type>[optional scope][!]: <description>\";\n+\t\t\t\treturn \"Line 1: Subject is expected of format: <type>[optional (scope)][!]: <description>\";\n \t\t\t}\n \t\t\n \t\t\tfor (int i=1; i<lines.size(); i++) {\n \t\t\t\tvar line = lines.get(i);\n \t\t\t\tif (line.length() != 0) {\n \t\t\t\t\tif (i != 2) \n-\t\t\t\t\t\treturn \"One and only one blank line is expected between subject and body\";\n+\t\t\t\t\t\treturn \"One and only one blank line is expected between subject and body/footer\";\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}",
      "parent_sha": "e6104f76afce3e4a86abd7af7c7612707bd33283"
    }
  },
  {
    "oid": "dfde57c0235c868a912cd81fe7ccb356d2c5b7c4",
    "message": "Fix issue #902 - Exception when starting server on 7.4.27 on Windows",
    "date": "2022-09-01T00:24:59Z",
    "url": "https://github.com/theonedev/onedev/commit/dfde57c0235c868a912cd81fe7ccb356d2c5b7c4",
    "details": {
      "sha": "4208fa20d2b468a57e918f8acd8867514491280d",
      "filename": "server-product/src/main/java/io/onedev/server/product/ProductServletConfigurator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/dfde57c0235c868a912cd81fe7ccb356d2c5b7c4/server-product%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fproduct%2FProductServletConfigurator.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/dfde57c0235c868a912cd81fe7ccb356d2c5b7c4/server-product%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fproduct%2FProductServletConfigurator.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-product%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fproduct%2FProductServletConfigurator.java?ref=dfde57c0235c868a912cd81fe7ccb356d2c5b7c4",
      "patch": "@@ -129,7 +129,7 @@ public void sessionDestroyed(HttpSessionEvent se) {\n \t\tServletHolder rootAssetsServletHolder = new ServletHolder(new FileAssetServlet(rootAssetsDir));\n \t\tfor (File file: FileUtils.listFiles(rootAssetsDir, Lists.newArrayList(\"**\"), Lists.newArrayList())) {\n \t\t\tString path = file.getAbsolutePath().substring(rootAssetsDir.getAbsolutePath().length());\n-\t\t\tcontext.addServlet(rootAssetsServletHolder, path);\n+\t\t\tcontext.addServlet(rootAssetsServletHolder, path.replace('\\\\', '/'));\n \t\t}\n \t\t\n \t\tcontext.addServlet(new ServletHolder(jerseyServlet), \"/api/*\");\t",
      "parent_sha": "1bc336e241099e405f1738c992e68b48e913faa2"
    }
  },
  {
    "oid": "24bccfc719dd0bc73ba278afb1f996269a202d56",
    "message": "FileNavigator midwork3",
    "date": "2015-07-06T04:34:47Z",
    "url": "https://github.com/theonedev/onedev/commit/24bccfc719dd0bc73ba278afb1f996269a202d56",
    "details": {
      "sha": "e3e086d7336ea6b10ce15c61aa0a5a9b99624a45",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/component/filenavigator/FileNavigator.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/theonedev/onedev/blob/24bccfc719dd0bc73ba278afb1f996269a202d56/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fcomponent%2Ffilenavigator%2FFileNavigator.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/24bccfc719dd0bc73ba278afb1f996269a202d56/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fcomponent%2Ffilenavigator%2FFileNavigator.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fcomponent%2Ffilenavigator%2FFileNavigator.java?ref=24bccfc719dd0bc73ba278afb1f996269a202d56",
      "patch": "@@ -11,6 +11,7 @@\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.OnChangeAjaxBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.extensions.markup.html.repeater.tree.ITreeProvider;\n import org.apache.wicket.extensions.markup.html.repeater.tree.NestedTree;\n@@ -255,7 +256,16 @@ protected void onComponentTag(ComponentTag tag) {\n \t\tWebMarkupContainer lastSegment;\n \t\tif (callback != null) {\n \t\t\tlastSegment = new Fragment(LAST_SEGMENT_ID, \"nameEditFrag\", this);\n-\t\t\tlastSegment.add(new TextField<String>(\"name\"));\n+\t\t\tfinal TextField<String> nameInput = new TextField<String>(\"name\");\n+\t\t\tlastSegment.add(nameInput);\n+\t\t\tnameInput.add(new OnChangeAjaxBehavior() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tprotected void onUpdate(AjaxRequestTarget target) {\n+\t\t\t\t\tcallback.onChange(target, nameInput.getInput());\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t});\n \t\t} \n \t\tadd(lastSegment);\n \t\t",
      "parent_sha": "6171fe19dd23c5eb524648e5717250cf89969d0a"
    }
  },
  {
    "oid": "0523e78d5e59248613212f9566c674bdc047ce1d",
    "message": "Improve sanity check",
    "date": "2016-01-07T01:57:52Z",
    "url": "https://github.com/theonedev/onedev/commit/0523e78d5e59248613212f9566c674bdc047ce1d",
    "details": {
      "sha": "6c751304abfea364cb2451685b2597405a114fb4",
      "filename": "gitplex.core/src/main/java/com/pmease/gitplex/core/model/Repository.java",
      "status": "modified",
      "additions": 29,
      "deletions": 1,
      "changes": 30,
      "blob_url": "https://github.com/theonedev/onedev/blob/0523e78d5e59248613212f9566c674bdc047ce1d/gitplex.core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fcore%2Fmodel%2FRepository.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/0523e78d5e59248613212f9566c674bdc047ce1d/gitplex.core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fcore%2Fmodel%2FRepository.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fcore%2Fmodel%2FRepository.java?ref=0523e78d5e59248613212f9566c674bdc047ce1d",
      "patch": "@@ -320,17 +320,45 @@ public Git git() {\n \t * \t\t\t<tt>true</tt> if valid; <tt>false</tt> otherwise\n \t */\n \tpublic boolean isValid() {\n+\t\treturn isUpdateHookValid() && isPostReceiveHookValid();\n+\t}\n+\t\n+\tpublic boolean isUpdateHookValid() {\n         File updateHook = new File(git().repoDir(), \"hooks/update\");\n         if (!updateHook.exists()) \n         \treturn false;\n         \n         try {\n \t\t\tString content = FileUtils.readFileToString(updateHook);\n-\t\t\treturn content.contains(\"GITPLEX_USER_ID\");\n+\t\t\tif (!content.contains(\"GITPLEX_USER_ID\"))\n+\t\t\t\treturn false;\n \t\t} catch (IOException e) {\n \t\t\tthrow new RuntimeException(e);\n \t\t}\n \t\t\n+        if (!updateHook.canExecute())\n+        \treturn false;\n+        \n+        return true;\n+\t}\n+\t\n+\tpublic boolean isPostReceiveHookValid() {\n+        File postReceiveHook = new File(git().repoDir(), \"hooks/post-receive\");\n+        if (!postReceiveHook.exists()) \n+        \treturn false;\n+        \n+        try {\n+\t\t\tString content = FileUtils.readFileToString(postReceiveHook);\n+\t\t\tif (!content.contains(\"GITPLEX_USER_ID\"))\n+\t\t\t\treturn false;\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\t\n+        if (!postReceiveHook.canExecute())\n+        \treturn false;\n+        \n+        return true;\n \t}\n \t\n \tpublic GateKeeper getGateKeeper() {",
      "parent_sha": "86b10d3de6cf3cafcdc26fb7bf44882a7e6c94bf"
    }
  },
  {
    "oid": "829d274da8220424de514aacbc735100daa8b609",
    "message": "fix: Unable to create SSO connector via REST API (OD-2303)",
    "date": "2025-03-05T12:59:31Z",
    "url": "https://github.com/theonedev/onedev/commit/829d274da8220424de514aacbc735100daa8b609",
    "details": {
      "sha": "d277531c9449dd6062ced2fccc86070460e334ad",
      "filename": "server-plugin/server-plugin-sso-openid/src/main/java/io/onedev/server/plugin/sso/openid/OpenIdConnector.java",
      "status": "modified",
      "additions": 46,
      "deletions": 27,
      "changes": 73,
      "blob_url": "https://github.com/theonedev/onedev/blob/829d274da8220424de514aacbc735100daa8b609/server-plugin%2Fserver-plugin-sso-openid%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fsso%2Fopenid%2FOpenIdConnector.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/829d274da8220424de514aacbc735100daa8b609/server-plugin%2Fserver-plugin-sso-openid%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fsso%2Fopenid%2FOpenIdConnector.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-plugin%2Fserver-plugin-sso-openid%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fsso%2Fopenid%2FOpenIdConnector.java?ref=829d274da8220424de514aacbc735100daa8b609",
      "patch": "@@ -1,19 +1,59 @@\n package io.onedev.server.plugin.sso.openid;\n \n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.validation.constraints.NotEmpty;\n+\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.request.cycle.RequestCycle;\n+import org.apache.wicket.request.flow.RedirectToUrlException;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.request.resource.PackageResourceReference;\n+import org.apache.wicket.request.resource.ResourceReference;\n+import org.joda.time.DateTime;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.nimbusds.common.contenttype.ContentType;\n import com.nimbusds.jwt.JWT;\n import com.nimbusds.jwt.JWTClaimsSet;\n-import com.nimbusds.oauth2.sdk.*;\n+import com.nimbusds.oauth2.sdk.AuthorizationCodeGrant;\n+import com.nimbusds.oauth2.sdk.AuthorizationGrant;\n+import com.nimbusds.oauth2.sdk.ErrorObject;\n+import com.nimbusds.oauth2.sdk.ParseException;\n+import com.nimbusds.oauth2.sdk.ResponseType;\n+import com.nimbusds.oauth2.sdk.Scope;\n+import com.nimbusds.oauth2.sdk.SerializeException;\n+import com.nimbusds.oauth2.sdk.TokenRequest;\n+import com.nimbusds.oauth2.sdk.TokenResponse;\n import com.nimbusds.oauth2.sdk.auth.ClientAuthentication;\n import com.nimbusds.oauth2.sdk.auth.ClientSecretBasic;\n import com.nimbusds.oauth2.sdk.http.HTTPRequest;\n import com.nimbusds.oauth2.sdk.http.HTTPResponse;\n import com.nimbusds.oauth2.sdk.id.ClientID;\n import com.nimbusds.oauth2.sdk.id.State;\n import com.nimbusds.oauth2.sdk.token.BearerAccessToken;\n-import com.nimbusds.openid.connect.sdk.*;\n+import com.nimbusds.openid.connect.sdk.AuthenticationErrorResponse;\n+import com.nimbusds.openid.connect.sdk.AuthenticationRequest;\n+import com.nimbusds.openid.connect.sdk.AuthenticationResponse;\n+import com.nimbusds.openid.connect.sdk.AuthenticationResponseParser;\n+import com.nimbusds.openid.connect.sdk.AuthenticationSuccessResponse;\n+import com.nimbusds.openid.connect.sdk.Nonce;\n+import com.nimbusds.openid.connect.sdk.OIDCTokenResponse;\n+import com.nimbusds.openid.connect.sdk.OIDCTokenResponseParser;\n+import com.nimbusds.openid.connect.sdk.UserInfoErrorResponse;\n+import com.nimbusds.openid.connect.sdk.UserInfoRequest;\n+\n import io.onedev.commons.utils.ExceptionUtils;\n import io.onedev.commons.utils.StringUtils;\n import io.onedev.server.OneDev;\n@@ -28,26 +68,6 @@\n import io.onedev.server.web.page.admin.ssosetting.SsoProcessPage;\n import net.minidev.json.JSONArray;\n import net.minidev.json.JSONObject;\n-import org.apache.shiro.authc.AuthenticationException;\n-import org.apache.wicket.Session;\n-import org.apache.wicket.request.cycle.RequestCycle;\n-import org.apache.wicket.request.flow.RedirectToUrlException;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.request.resource.PackageResourceReference;\n-import org.apache.wicket.request.resource.ResourceReference;\n-import org.joda.time.DateTime;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.annotation.Nullable;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.validation.constraints.NotEmpty;\n-import java.io.IOException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.UUID;\n \n @Editable(name=\"OpenID\", order=10000, description=\"Refer to this <a href='https://docs.onedev.io/tutorials/security/sso-with-okta' target='_blank'>tutorial</a> for an example setup\")\n public class OpenIdConnector extends SsoConnector {\n@@ -72,11 +92,6 @@ public class OpenIdConnector extends SsoConnector {\n \t\n \tprivate String buttonImageUrl;\n \t\n-\tpublic OpenIdConnector() {\n-\t\tResourceReference logo = new PackageResourceReference(OpenIdConnector.class, \"openid.png\");\n-\t\tbuttonImageUrl = RequestCycle.get().urlFor(logo, new PageParameters()).toString();\n-\t}\n-\n \t@Editable(order=100, description=\"Name of the provider will serve two purpose: \"\n \t\t\t+ \"<ul>\"\n \t\t\t+ \"<li>Display on login button\"\n@@ -330,6 +345,10 @@ public void setGroupsClaim(String groupsClaim) {\n \t@NotEmpty\n \t@Override\n \tpublic String getButtonImageUrl() {\n+\t\tif (buttonImageUrl == null) {\n+\t\t\tResourceReference logo = new PackageResourceReference(OpenIdConnector.class, \"openid.png\");\n+\t\t\tbuttonImageUrl = RequestCycle.get().urlFor(logo, new PageParameters()).toString();\n+\t\t}\n \t\treturn buttonImageUrl;\n \t}\n ",
      "parent_sha": "cce316c4c94fa12e2029da96101696291d6f5619"
    }
  },
  {
    "oid": "a57da674e6453537366ae74fedf9addcd57a049a",
    "message": "chore: Only clean job cache for active projects",
    "date": "2024-02-13T02:24:02Z",
    "url": "https://github.com/theonedev/onedev/commit/a57da674e6453537366ae74fedf9addcd57a049a",
    "details": {
      "sha": "5ac1fd3da885866c94d3b0ebddc9f8c63f86b0b7",
      "filename": "server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultJobCacheManager.java",
      "status": "modified",
      "additions": 17,
      "deletions": 8,
      "changes": 25,
      "blob_url": "https://github.com/theonedev/onedev/blob/a57da674e6453537366ae74fedf9addcd57a049a/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultJobCacheManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/a57da674e6453537366ae74fedf9addcd57a049a/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultJobCacheManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultJobCacheManager.java?ref=a57da674e6453537366ae74fedf9addcd57a049a",
      "patch": "@@ -27,6 +27,8 @@\n import org.joda.time.DateTime;\n import org.quartz.CronScheduleBuilder;\n import org.quartz.ScheduleBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.annotation.Nullable;\n import javax.inject.Inject;\n@@ -59,6 +61,8 @@ public class DefaultJobCacheManager extends BaseEntityManager<JobCache>\n \t\n \tprivate static final int CACHE_VERSION = 1;\n \t\n+\tprivate static final Logger logger = LoggerFactory.getLogger(DefaultJobCacheManager.class);\n+\t\n \tprivate final ProjectManager projectManager;\n \t\n \tprivate final SessionManager sessionManager;\n@@ -425,14 +429,19 @@ public void on(SystemStopping event) {\n \t@Override\n \tpublic void execute() {\n \t\tvar now = new DateTime();\n-\t\tfor (var project: projectManager.query()) {\n-\t\t\tvar preserveDays = project.getHierarchyCachePreserveDays();\n-\t\t\tvar threshold = now.minusDays(preserveDays);\n-\t\t\tvar criteria = newCriteria();\n-\t\t\tcriteria.add(Restrictions.eq(PROP_PROJECT, project));\n-\t\t\tcriteria.add(Restrictions.lt(PROP_ACCESS_DATE, threshold.toDate()));\n-\t\t\tfor (var cache: query(criteria)) \n-\t\t\t\tdelete(cache);\n+\t\tfor (var projectId: projectManager.getActiveIds()) {\n+\t\t\ttry {\n+\t\t\t\tvar project = projectManager.load(projectId);\n+\t\t\t\tvar preserveDays = project.getHierarchyCachePreserveDays();\n+\t\t\t\tvar threshold = now.minusDays(preserveDays);\n+\t\t\t\tvar criteria = newCriteria();\n+\t\t\t\tcriteria.add(Restrictions.eq(PROP_PROJECT, project));\n+\t\t\t\tcriteria.add(Restrictions.lt(PROP_ACCESS_DATE, threshold.toDate()));\n+\t\t\t\tfor (var cache: query(criteria))\n+\t\t\t\t\tdelete(cache);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlogger.error(\"Error cleaning up job caches\", e);\n+\t\t\t}\n \t\t}\n \t}\n ",
      "parent_sha": "dbc79c3359c3ec2b06d990783da1f9f05565800d"
    }
  },
  {
    "oid": "eedcba73e6b7d0a75fe47e0457c244c46fe8804e",
    "message": "Convert to unix eol for CoreModule.java",
    "date": "2020-04-10T03:52:56Z",
    "url": "https://github.com/theonedev/onedev/commit/eedcba73e6b7d0a75fe47e0457c244c46fe8804e",
    "details": {
      "sha": "42e298bde47e848ce1910cc5a26491c275decfa7",
      "filename": "server-core/src/main/java/io/onedev/server/CoreModule.java",
      "status": "modified",
      "additions": 794,
      "deletions": 794,
      "changes": 1588,
      "blob_url": "https://github.com/theonedev/onedev/blob/eedcba73e6b7d0a75fe47e0457c244c46fe8804e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2FCoreModule.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/eedcba73e6b7d0a75fe47e0457c244c46fe8804e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2FCoreModule.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2FCoreModule.java?ref=eedcba73e6b7d0a75fe47e0457c244c46fe8804e",
      "patch": "@@ -1,794 +1,794 @@\n-package io.onedev.server;\r\n-\r\n-import java.io.Serializable;\r\n-import java.lang.reflect.AnnotatedElement;\r\n-import java.lang.reflect.Field;\r\n-import java.lang.reflect.Method;\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.List;\r\n-import java.util.concurrent.Callable;\r\n-import java.util.concurrent.ExecutionException;\r\n-import java.util.concurrent.ExecutorService;\r\n-import java.util.concurrent.ForkJoinPool;\r\n-import java.util.concurrent.ForkJoinTask;\r\n-import java.util.concurrent.Future;\r\n-import java.util.concurrent.RejectedExecutionException;\r\n-import java.util.concurrent.SynchronousQueue;\r\n-import java.util.concurrent.ThreadPoolExecutor;\r\n-import java.util.concurrent.TimeUnit;\r\n-import java.util.concurrent.TimeoutException;\r\n-\r\n-import javax.inject.Singleton;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.persistence.EntityNotFoundException;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Transient;\r\n-import javax.persistence.Version;\r\n-import javax.validation.Configuration;\r\n-import javax.validation.Validation;\r\n-import javax.validation.Validator;\r\n-import javax.validation.ValidatorFactory;\r\n-\r\n-import org.apache.shiro.authc.credential.PasswordService;\r\n-import org.apache.shiro.authz.UnauthorizedException;\r\n-import org.apache.shiro.guice.aop.ShiroAopModule;\r\n-import org.apache.shiro.mgt.RememberMeManager;\r\n-import org.apache.shiro.realm.Realm;\r\n-import org.apache.shiro.web.filter.mgt.FilterChainManager;\r\n-import org.apache.shiro.web.filter.mgt.FilterChainResolver;\r\n-import org.apache.shiro.web.mgt.WebSecurityManager;\r\n-import org.apache.shiro.web.servlet.ShiroFilter;\r\n-import org.apache.wicket.Application;\r\n-import org.apache.wicket.core.request.mapper.StalePageException;\r\n-import org.apache.wicket.protocol.http.PageExpiredException;\r\n-import org.apache.wicket.protocol.http.WebApplication;\r\n-import org.apache.wicket.protocol.http.WicketFilter;\r\n-import org.apache.wicket.protocol.http.WicketServlet;\r\n-import org.eclipse.jetty.servlet.ServletContextHandler;\r\n-import org.eclipse.jetty.websocket.api.WebSocketPolicy;\r\n-import org.glassfish.jersey.server.ResourceConfig;\r\n-import org.glassfish.jersey.servlet.ServletContainer;\r\n-import org.hibernate.CallbackException;\r\n-import org.hibernate.Interceptor;\r\n-import org.hibernate.ObjectNotFoundException;\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.StaleStateException;\r\n-import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\r\n-import org.hibernate.collection.internal.PersistentBag;\r\n-import org.hibernate.exception.ConstraintViolationException;\r\n-import org.hibernate.type.Type;\r\n-import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;\r\n-\r\n-import com.fasterxml.jackson.databind.ObjectMapper;\r\n-import com.google.common.collect.Lists;\r\n-import com.google.common.collect.Sets;\r\n-import com.google.inject.Provider;\r\n-import com.google.inject.matcher.AbstractMatcher;\r\n-import com.google.inject.matcher.Matchers;\r\n-import com.thoughtworks.xstream.XStream;\r\n-import com.thoughtworks.xstream.annotations.XStreamOmitField;\r\n-import com.thoughtworks.xstream.converters.basic.NullConverter;\r\n-import com.thoughtworks.xstream.converters.extended.ISO8601DateConverter;\r\n-import com.thoughtworks.xstream.converters.extended.ISO8601SqlTimestampConverter;\r\n-import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;\r\n-import com.thoughtworks.xstream.core.JVM;\r\n-import com.thoughtworks.xstream.mapper.MapperWrapper;\r\n-import com.vladsch.flexmark.Extension;\r\n-\r\n-import io.onedev.commons.launcher.bootstrap.Bootstrap;\r\n-import io.onedev.commons.launcher.loader.AbstractPlugin;\r\n-import io.onedev.commons.launcher.loader.AbstractPluginModule;\r\n-import io.onedev.commons.launcher.loader.ImplementationProvider;\r\n-import io.onedev.commons.utils.ExceptionUtils;\r\n-import io.onedev.commons.utils.StringUtils;\r\n-import io.onedev.server.buildspec.job.DefaultJobManager;\r\n-import io.onedev.server.buildspec.job.JobManager;\r\n-import io.onedev.server.buildspec.job.log.DefaultLogManager;\r\n-import io.onedev.server.buildspec.job.log.LogManager;\r\n-import io.onedev.server.buildspec.job.log.instruction.LogInstruction;\r\n-import io.onedev.server.entitymanager.BuildDependenceManager;\r\n-import io.onedev.server.entitymanager.BuildManager;\r\n-import io.onedev.server.entitymanager.BuildParamManager;\r\n-import io.onedev.server.entitymanager.BuildQuerySettingManager;\r\n-import io.onedev.server.entitymanager.CodeCommentManager;\r\n-import io.onedev.server.entitymanager.CodeCommentQuerySettingManager;\r\n-import io.onedev.server.entitymanager.CodeCommentRelationManager;\r\n-import io.onedev.server.entitymanager.CodeCommentReplyManager;\r\n-import io.onedev.server.entitymanager.CommitQuerySettingManager;\r\n-import io.onedev.server.entitymanager.GroupAuthorizationManager;\r\n-import io.onedev.server.entitymanager.GroupManager;\r\n-import io.onedev.server.entitymanager.IssueChangeManager;\r\n-import io.onedev.server.entitymanager.IssueCommentManager;\r\n-import io.onedev.server.entitymanager.IssueFieldManager;\r\n-import io.onedev.server.entitymanager.IssueManager;\r\n-import io.onedev.server.entitymanager.IssueQuerySettingManager;\r\n-import io.onedev.server.entitymanager.IssueVoteManager;\r\n-import io.onedev.server.entitymanager.IssueWatchManager;\r\n-import io.onedev.server.entitymanager.MembershipManager;\r\n-import io.onedev.server.entitymanager.MilestoneManager;\r\n-import io.onedev.server.entitymanager.ProjectManager;\r\n-import io.onedev.server.entitymanager.PullRequestBuildManager;\r\n-import io.onedev.server.entitymanager.PullRequestChangeManager;\r\n-import io.onedev.server.entitymanager.PullRequestCommentManager;\r\n-import io.onedev.server.entitymanager.PullRequestManager;\r\n-import io.onedev.server.entitymanager.PullRequestQuerySettingManager;\r\n-import io.onedev.server.entitymanager.PullRequestReviewManager;\r\n-import io.onedev.server.entitymanager.PullRequestUpdateManager;\r\n-import io.onedev.server.entitymanager.PullRequestWatchManager;\r\n-import io.onedev.server.entitymanager.RoleManager;\r\n-import io.onedev.server.entitymanager.SettingManager;\r\n-import io.onedev.server.entitymanager.UrlManager;\r\n-import io.onedev.server.entitymanager.UserAuthorizationManager;\r\n-import io.onedev.server.entitymanager.UserManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultBuildDependenceManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultBuildManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultBuildParamManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultBuildQuerySettingManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultCodeCommentManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultCodeCommentQuerySettingManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultCodeCommentRelationManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultCodeCommentReplyManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultCommitQuerySettingManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultGroupAuthorizationManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultGroupManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultIssueChangeManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultIssueCommentManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultIssueFieldManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultIssueManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultIssueQuerySettingManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultIssueVoteManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultIssueWatchManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultMembershipManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultMilestoneManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultProjectManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultPullRequestBuildManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultPullRequestChangeManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultPullRequestCommentManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultPullRequestManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultPullRequestQuerySettingManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultPullRequestReviewManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultPullRequestUpdateManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultPullRequestWatchManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultRoleManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultSettingManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultUserAuthorizationManager;\r\n-import io.onedev.server.entitymanager.impl.DefaultUserManager;\r\n-import io.onedev.server.git.GitFilter;\r\n-import io.onedev.server.git.GitPostReceiveCallback;\r\n-import io.onedev.server.git.GitPreReceiveCallback;\r\n-import io.onedev.server.git.config.GitConfig;\r\n-import io.onedev.server.infomanager.CodeCommentRelationInfoManager;\r\n-import io.onedev.server.infomanager.CommitInfoManager;\r\n-import io.onedev.server.infomanager.DefaultCodeCommentRelationInfoManager;\r\n-import io.onedev.server.infomanager.DefaultCommitInfoManager;\r\n-import io.onedev.server.infomanager.DefaultUserInfoManager;\r\n-import io.onedev.server.infomanager.UserInfoManager;\r\n-import io.onedev.server.maintenance.ApplyDatabaseConstraints;\r\n-import io.onedev.server.maintenance.BackupDatabase;\r\n-import io.onedev.server.maintenance.CheckDataVersion;\r\n-import io.onedev.server.maintenance.CleanDatabase;\r\n-import io.onedev.server.maintenance.DataManager;\r\n-import io.onedev.server.maintenance.DefaultDataManager;\r\n-import io.onedev.server.maintenance.ResetAdminPassword;\r\n-import io.onedev.server.maintenance.RestoreDatabase;\r\n-import io.onedev.server.maintenance.Upgrade;\r\n-import io.onedev.server.model.support.administration.GroovyScript;\r\n-import io.onedev.server.model.support.administration.authenticator.Authenticator;\r\n-import io.onedev.server.model.support.administration.jobexecutor.AutoDiscoveredJobExecutor;\r\n-import io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\r\n-import io.onedev.server.notification.BuildNotificationManager;\r\n-import io.onedev.server.notification.CodeCommentNotificationManager;\r\n-import io.onedev.server.notification.CommitNotificationManager;\r\n-import io.onedev.server.notification.DefaultMailManager;\r\n-import io.onedev.server.notification.IssueNotificationManager;\r\n-import io.onedev.server.notification.MailManager;\r\n-import io.onedev.server.notification.PullRequestNotificationManager;\r\n-import io.onedev.server.notification.WebHookManager;\r\n-import io.onedev.server.persistence.DefaultIdManager;\r\n-import io.onedev.server.persistence.DefaultPersistManager;\r\n-import io.onedev.server.persistence.DefaultSessionManager;\r\n-import io.onedev.server.persistence.DefaultTransactionManager;\r\n-import io.onedev.server.persistence.HibernateInterceptor;\r\n-import io.onedev.server.persistence.IdManager;\r\n-import io.onedev.server.persistence.PersistListener;\r\n-import io.onedev.server.persistence.PersistManager;\r\n-import io.onedev.server.persistence.PrefixedNamingStrategy;\r\n-import io.onedev.server.persistence.SessionFactoryProvider;\r\n-import io.onedev.server.persistence.SessionInterceptor;\r\n-import io.onedev.server.persistence.SessionManager;\r\n-import io.onedev.server.persistence.SessionProvider;\r\n-import io.onedev.server.persistence.TransactionInterceptor;\r\n-import io.onedev.server.persistence.TransactionManager;\r\n-import io.onedev.server.persistence.annotation.Sessional;\r\n-import io.onedev.server.persistence.annotation.Transactional;\r\n-import io.onedev.server.persistence.dao.Dao;\r\n-import io.onedev.server.persistence.dao.DefaultDao;\r\n-import io.onedev.server.rest.RestConstants;\r\n-import io.onedev.server.rest.jersey.DefaultServletContainer;\r\n-import io.onedev.server.rest.jersey.JerseyConfigurator;\r\n-import io.onedev.server.rest.jersey.ResourceConfigProvider;\r\n-import io.onedev.server.search.code.DefaultIndexManager;\r\n-import io.onedev.server.search.code.DefaultSearchManager;\r\n-import io.onedev.server.search.code.IndexManager;\r\n-import io.onedev.server.search.code.SearchManager;\r\n-import io.onedev.server.security.BasicAuthenticationFilter;\r\n-import io.onedev.server.security.CodePullAuthorizationSource;\r\n-import io.onedev.server.security.FilterChainConfigurator;\r\n-import io.onedev.server.security.OneAuthorizingRealm;\r\n-import io.onedev.server.security.OneFilterChainResolver;\r\n-import io.onedev.server.security.OnePasswordService;\r\n-import io.onedev.server.security.OneRememberMeManager;\r\n-import io.onedev.server.security.OneWebSecurityManager;\r\n-import io.onedev.server.storage.AttachmentStorageManager;\r\n-import io.onedev.server.storage.DefaultAttachmentStorageManager;\r\n-import io.onedev.server.storage.DefaultStorageManager;\r\n-import io.onedev.server.storage.StorageManager;\r\n-import io.onedev.server.util.SecurityUtils;\r\n-import io.onedev.server.util.jackson.ObjectMapperConfigurator;\r\n-import io.onedev.server.util.jackson.ObjectMapperProvider;\r\n-import io.onedev.server.util.jackson.git.GitObjectMapperConfigurator;\r\n-import io.onedev.server.util.jackson.hibernate.HibernateObjectMapperConfigurator;\r\n-import io.onedev.server.util.jetty.DefaultJettyRunner;\r\n-import io.onedev.server.util.jetty.JettyRunner;\r\n-import io.onedev.server.util.markdown.DefaultMarkdownManager;\r\n-import io.onedev.server.util.markdown.EntityReferenceManager;\r\n-import io.onedev.server.util.markdown.MarkdownManager;\r\n-import io.onedev.server.util.markdown.MarkdownProcessor;\r\n-import io.onedev.server.util.schedule.DefaultTaskScheduler;\r\n-import io.onedev.server.util.schedule.TaskScheduler;\r\n-import io.onedev.server.util.script.ScriptContribution;\r\n-import io.onedev.server.util.validation.DefaultEntityValidator;\r\n-import io.onedev.server.util.validation.EntityValidator;\r\n-import io.onedev.server.util.validation.ValidatorProvider;\r\n-import io.onedev.server.util.work.BatchWorkManager;\r\n-import io.onedev.server.util.work.DefaultBatchWorkManager;\r\n-import io.onedev.server.util.work.DefaultWorkExecutor;\r\n-import io.onedev.server.util.work.WorkExecutor;\r\n-import io.onedev.server.util.xstream.CollectionConverter;\r\n-import io.onedev.server.util.xstream.HibernateProxyConverter;\r\n-import io.onedev.server.util.xstream.MapConverter;\r\n-import io.onedev.server.util.xstream.ReflectionConverter;\r\n-import io.onedev.server.util.xstream.StringConverter;\r\n-import io.onedev.server.util.xstream.VersionedDocumentConverter;\r\n-import io.onedev.server.web.DefaultUrlManager;\r\n-import io.onedev.server.web.DefaultWicketFilter;\r\n-import io.onedev.server.web.DefaultWicketServlet;\r\n-import io.onedev.server.web.ExpectedExceptionContribution;\r\n-import io.onedev.server.web.OneWebApplication;\r\n-import io.onedev.server.web.ResourcePackScopeContribution;\r\n-import io.onedev.server.web.WebApplicationConfigurator;\r\n-import io.onedev.server.web.avatar.AvatarManager;\r\n-import io.onedev.server.web.avatar.DefaultAvatarManager;\r\n-import io.onedev.server.web.component.diff.DiffRenderer;\r\n-import io.onedev.server.web.component.markdown.AttachmentUploadServlet;\r\n-import io.onedev.server.web.component.markdown.SourcePositionTrackExtension;\r\n-import io.onedev.server.web.component.markdown.emoji.EmojiExtension;\r\n-import io.onedev.server.web.component.taskbutton.TaskButton;\r\n-import io.onedev.server.web.editable.DefaultEditSupportRegistry;\r\n-import io.onedev.server.web.editable.EditSupport;\r\n-import io.onedev.server.web.editable.EditSupportLocator;\r\n-import io.onedev.server.web.editable.EditSupportRegistry;\r\n-import io.onedev.server.web.mapper.OnePageMapper;\r\n-import io.onedev.server.web.page.DashboardPage;\r\n-import io.onedev.server.web.page.base.BasePage;\r\n-import io.onedev.server.web.page.layout.BuildListTab;\r\n-import io.onedev.server.web.page.layout.IssueListTab;\r\n-import io.onedev.server.web.page.layout.MainTab;\r\n-import io.onedev.server.web.page.layout.ProjectListTab;\r\n-import io.onedev.server.web.page.layout.PullRequestListTab;\r\n-import io.onedev.server.web.page.layout.UICustomization;\r\n-import io.onedev.server.web.page.project.blob.render.BlobRendererContribution;\r\n-import io.onedev.server.web.page.test.TestPage;\r\n-import io.onedev.server.web.websocket.BuildEventBroadcaster;\r\n-import io.onedev.server.web.websocket.CodeCommentEventBroadcaster;\r\n-import io.onedev.server.web.websocket.CommitIndexedBroadcaster;\r\n-import io.onedev.server.web.websocket.DefaultWebSocketManager;\r\n-import io.onedev.server.web.websocket.IssueEventBroadcaster;\r\n-import io.onedev.server.web.websocket.PullRequestEventBroadcaster;\r\n-import io.onedev.server.web.websocket.WebSocketManager;\r\n-import io.onedev.server.web.websocket.WebSocketPolicyProvider;\r\n-\r\n-/**\r\n- * NOTE: Do not forget to rename moduleClass property defined in the pom if you've renamed this class.\r\n- *\r\n- */\r\n-public class CoreModule extends AbstractPluginModule {\r\n-\r\n-\t@Override\r\n-\tprotected void configure() {\r\n-\t\tsuper.configure();\r\n-\t\t\r\n-\t\tbind(JettyRunner.class).to(DefaultJettyRunner.class);\r\n-\t\tbind(ServletContextHandler.class).toProvider(DefaultJettyRunner.class);\r\n-\t\t\r\n-\t\tbind(ObjectMapper.class).toProvider(ObjectMapperProvider.class).in(Singleton.class);\r\n-\t\t\r\n-\t\tbind(ValidatorFactory.class).toProvider(new com.google.inject.Provider<ValidatorFactory>() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic ValidatorFactory get() {\r\n-\t\t\t\tConfiguration<?> configuration = Validation\r\n-\t\t\t\t\t\t.byDefaultProvider()\r\n-\t\t\t\t\t\t.configure()\r\n-\t\t\t\t\t\t.messageInterpolator(new ParameterMessageInterpolator());\r\n-\t\t\t\treturn configuration.buildValidatorFactory();\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t}).in(Singleton.class);\r\n-\t\t\r\n-\t\tbind(Validator.class).toProvider(ValidatorProvider.class).in(Singleton.class);\r\n-\r\n-\t\t// configure markdown\r\n-\t\tbind(MarkdownManager.class).to(DefaultMarkdownManager.class);\t\t\r\n-\t\t\r\n-\t\tconfigurePersistence();\r\n-\t\tconfigureRestServices();\r\n-\t\tconfigureWeb();\r\n-\t\tconfigureBuild();\r\n-\t\t\r\n-\t\tbind(GitConfig.class).toProvider(GitConfigProvider.class);\r\n-\r\n-\t\t/*\r\n-\t\t * Declare bindings explicitly instead of using ImplementedBy annotation as\r\n-\t\t * HK2 to guice bridge can only search in explicit bindings in Guice   \r\n-\t\t */\r\n-\t\tbind(StorageManager.class).to(DefaultStorageManager.class);\r\n-\t\tbind(SettingManager.class).to(DefaultSettingManager.class);\r\n-\t\tbind(DataManager.class).to(DefaultDataManager.class);\r\n-\t\tbind(TaskScheduler.class).to(DefaultTaskScheduler.class);\r\n-\t\tbind(PullRequestCommentManager.class).to(DefaultPullRequestCommentManager.class);\r\n-\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\r\n-\t\tbind(PullRequestManager.class).to(DefaultPullRequestManager.class);\r\n-\t\tbind(PullRequestUpdateManager.class).to(DefaultPullRequestUpdateManager.class);\r\n-\t\tbind(ProjectManager.class).to(DefaultProjectManager.class);\r\n-\t\tbind(UserManager.class).to(DefaultUserManager.class);\r\n-\t\tbind(PullRequestReviewManager.class).to(DefaultPullRequestReviewManager.class);\r\n-\t\tbind(BuildManager.class).to(DefaultBuildManager.class);\r\n-\t\tbind(BuildDependenceManager.class).to(DefaultBuildDependenceManager.class);\r\n-\t\tbind(JobManager.class).to(DefaultJobManager.class);\r\n-\t\tbind(LogManager.class).to(DefaultLogManager.class);\r\n-\t\tbind(PullRequestBuildManager.class).to(DefaultPullRequestBuildManager.class);\r\n-\t\tbind(MailManager.class).to(DefaultMailManager.class);\r\n-\t\tbind(IssueManager.class).to(DefaultIssueManager.class);\r\n-\t\tbind(IssueFieldManager.class).to(DefaultIssueFieldManager.class);\r\n-\t\tbind(BuildParamManager.class).to(DefaultBuildParamManager.class);\r\n-\t\tbind(UserAuthorizationManager.class).to(DefaultUserAuthorizationManager.class);\r\n-\t\tbind(GroupAuthorizationManager.class).to(DefaultGroupAuthorizationManager.class);\r\n-\t\tbind(PullRequestWatchManager.class).to(DefaultPullRequestWatchManager.class);\r\n-\t\tbind(RoleManager.class).to(DefaultRoleManager.class);\r\n-\t\tbind(CommitInfoManager.class).to(DefaultCommitInfoManager.class);\r\n-\t\tbind(UserInfoManager.class).to(DefaultUserInfoManager.class);\r\n-\t\tbind(BatchWorkManager.class).to(DefaultBatchWorkManager.class);\r\n-\t\tbind(GroupManager.class).to(DefaultGroupManager.class);\r\n-\t\tbind(MembershipManager.class).to(DefaultMembershipManager.class);\r\n-\t\tbind(PullRequestChangeManager.class).to(DefaultPullRequestChangeManager.class);\r\n-\t\tbind(CodeCommentReplyManager.class).to(DefaultCodeCommentReplyManager.class);\r\n-\t\tbind(AttachmentStorageManager.class).to(DefaultAttachmentStorageManager.class);\r\n-\t\tbind(CodeCommentRelationInfoManager.class).to(DefaultCodeCommentRelationInfoManager.class);\r\n-\t\tbind(CodeCommentRelationManager.class).to(DefaultCodeCommentRelationManager.class);\r\n-\t\tbind(WorkExecutor.class).to(DefaultWorkExecutor.class);\r\n-\t\tbind(PullRequestNotificationManager.class);\r\n-\t\tbind(CommitNotificationManager.class);\r\n-\t\tbind(BuildNotificationManager.class);\r\n-\t\tbind(IssueNotificationManager.class);\r\n-\t\tbind(EntityReferenceManager.class);\r\n-\t\tbind(CodeCommentNotificationManager.class);\r\n-\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\r\n-\t\tbind(IssueWatchManager.class).to(DefaultIssueWatchManager.class);\r\n-\t\tbind(IssueChangeManager.class).to(DefaultIssueChangeManager.class);\r\n-\t\tbind(IssueVoteManager.class).to(DefaultIssueVoteManager.class);\r\n-\t\tbind(MilestoneManager.class).to(DefaultMilestoneManager.class);\r\n-\t\tbind(Session.class).toProvider(SessionProvider.class);\r\n-\t\tbind(EntityManager.class).toProvider(SessionProvider.class);\r\n-\t\tbind(SessionFactory.class).toProvider(SessionFactoryProvider.class);\r\n-\t\tbind(EntityManagerFactory.class).toProvider(SessionFactoryProvider.class);\r\n-\t\tbind(IssueCommentManager.class).to(DefaultIssueCommentManager.class);\r\n-\t\tbind(IssueQuerySettingManager.class).to(DefaultIssueQuerySettingManager.class);\r\n-\t\tbind(PullRequestQuerySettingManager.class).to(DefaultPullRequestQuerySettingManager.class);\r\n-\t\tbind(CodeCommentQuerySettingManager.class).to(DefaultCodeCommentQuerySettingManager.class);\r\n-\t\tbind(CommitQuerySettingManager.class).to(DefaultCommitQuerySettingManager.class);\r\n-\t\tbind(BuildQuerySettingManager.class).to(DefaultBuildQuerySettingManager.class);\r\n-\t\tbind(WebHookManager.class);\r\n-\r\n-\t\tcontribute(ObjectMapperConfigurator.class, GitObjectMapperConfigurator.class);\r\n-\t    contribute(ObjectMapperConfigurator.class, HibernateObjectMapperConfigurator.class);\r\n-\t    \r\n-\t\tbind(Realm.class).to(OneAuthorizingRealm.class);\r\n-\t\tbind(RememberMeManager.class).to(OneRememberMeManager.class);\r\n-\t\tbind(WebSecurityManager.class).to(OneWebSecurityManager.class);\r\n-\t\tbind(FilterChainResolver.class).to(OneFilterChainResolver.class);\r\n-\t\tbind(BasicAuthenticationFilter.class);\r\n-\t\tbind(PasswordService.class).to(OnePasswordService.class);\r\n-\t\tbind(ShiroFilter.class);\r\n-\t\tinstall(new ShiroAopModule());\r\n-        contribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\r\n-\r\n-            @Override\r\n-            public void configure(FilterChainManager filterChainManager) {\r\n-                filterChainManager.createChain(\"/**/info/refs\", \"noSessionCreation, authcBasic\");\r\n-                filterChainManager.createChain(\"/**/git-upload-pack\", \"noSessionCreation, authcBasic\");\r\n-                filterChainManager.createChain(\"/**/git-receive-pack\", \"noSessionCreation, authcBasic\");\r\n-            }\r\n-            \r\n-        });\r\n-        contributeFromPackage(Authenticator.class, Authenticator.class);\r\n-        \r\n-\t\tcontribute(ImplementationProvider.class, new ImplementationProvider() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic Class<?> getAbstractClass() {\r\n-\t\t\t\treturn JobExecutor.class;\r\n-\t\t\t}\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic Collection<Class<?>> getImplementations() {\r\n-\t\t\t\treturn Sets.newHashSet(AutoDiscoveredJobExecutor.class);\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t});\r\n-\t\t\r\n-\t\tcontribute(CodePullAuthorizationSource.class, DefaultJobManager.class);\r\n-        \r\n-\t\tbind(IndexManager.class).to(DefaultIndexManager.class);\r\n-\t\tbind(SearchManager.class).to(DefaultSearchManager.class);\r\n-\t\t\r\n-\t\tbind(EntityValidator.class).to(DefaultEntityValidator.class);\r\n-\t\t\r\n-\t\tbind(GitFilter.class);\r\n-\t\tbind(GitPreReceiveCallback.class);\r\n-\t\tbind(GitPostReceiveCallback.class);\r\n-\t\t\r\n-\t    bind(ExecutorService.class).toProvider(new Provider<ExecutorService>() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic ExecutorService get() {\r\n-\t\t        return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \r\n-\t\t        \t\tnew SynchronousQueue<Runnable>()) {\r\n-\r\n-\t\t\t\t\t@Override\r\n-\t\t\t\t\tpublic void execute(Runnable command) {\r\n-\t\t\t\t\t\ttry {\r\n-\t\t\t\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(command));\r\n-\t\t\t\t\t\t} catch (RejectedExecutionException e) {\r\n-\t\t\t\t\t\t\tif (!isShutdown())\r\n-\t\t\t\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\r\n-\t\t\t\t\t\t}\r\n-\t\t\t\t\t}\r\n-\r\n-\t\t        };\r\n-\t\t\t}\r\n-\t    \t\r\n-\t    }).in(Singleton.class);\r\n-\t    \r\n-\t    bind(ForkJoinPool.class).toInstance(new ForkJoinPool() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic ForkJoinTask<?> submit(Runnable task) {\r\n-\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\r\n-\t\t\t}\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic void execute(Runnable task) {\r\n-\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(task));\r\n-\t\t\t}\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic <T> ForkJoinTask<T> submit(Callable<T> task) {\r\n-\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\r\n-\t\t\t}\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic <T> ForkJoinTask<T> submit(Runnable task, T result) {\r\n-\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task), result);\r\n-\t\t\t}\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks)\r\n-\t\t\t\t\tthrows InterruptedException, ExecutionException {\r\n-\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks));\r\n-\t\t\t}\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\r\n-\t\t\t\t\tthrows InterruptedException, ExecutionException, TimeoutException {\r\n-\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks), timeout, unit);\r\n-\t\t\t}\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, \r\n-\t\t\t\t\tlong timeout, TimeUnit unit) throws InterruptedException {\r\n-\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks), timeout, unit);\r\n-\t\t\t}\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {\r\n-\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks));\r\n-\t\t\t}\r\n-\r\n-\t    });\r\n-\t}\r\n-\t\r\n-\tprivate void configureRestServices() {\r\n-\t\tbind(ResourceConfig.class).toProvider(ResourceConfigProvider.class).in(Singleton.class);\r\n-\t\tbind(ServletContainer.class).to(DefaultServletContainer.class);\r\n-\t\t\r\n-\t\tcontribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic void configure(FilterChainManager filterChainManager) {\r\n-\t\t\t\tfilterChainManager.createChain(\"/rest/**\", \"noSessionCreation, authcBasic\");\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t});\r\n-\t\t\r\n-\t\tcontribute(JerseyConfigurator.class, new JerseyConfigurator() {\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic void configure(ResourceConfig resourceConfig) {\r\n-\t\t\t\tresourceConfig.packages(RestConstants.class.getPackage().getName());\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t});\r\n-\t}\r\n-\r\n-\tprivate void configureWeb() {\r\n-\t\tbind(WicketServlet.class).to(DefaultWicketServlet.class);\r\n-\t\tbind(WicketFilter.class).to(DefaultWicketFilter.class);\r\n-\t\tbind(WebSocketPolicy.class).toProvider(WebSocketPolicyProvider.class);\r\n-\t\tbind(EditSupportRegistry.class).to(DefaultEditSupportRegistry.class);\r\n-\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\r\n-\r\n-\t\tbind(AttachmentUploadServlet.class);\r\n-\t\t\r\n-\t\tcontributeFromPackage(EditSupport.class, EditSupport.class);\r\n-\t\t\r\n-\t\tbind(WebApplication.class).to(OneWebApplication.class);\r\n-\t\tbind(Application.class).to(OneWebApplication.class);\r\n-\t\tbind(AvatarManager.class).to(DefaultAvatarManager.class);\r\n-\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\r\n-\t\t\r\n-\t\tcontributeFromPackage(EditSupport.class, EditSupportLocator.class);\r\n-\t\t\r\n-\t\tcontribute(WebApplicationConfigurator.class, new WebApplicationConfigurator() {\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic void configure(WebApplication application) {\r\n-\t\t\t\tapplication.mount(new OnePageMapper(\"/test\", TestPage.class));\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t});\r\n-\t\t\r\n-\t\tbind(CommitIndexedBroadcaster.class);\r\n-\t\t\r\n-\t\tcontributeFromPackage(DiffRenderer.class, DiffRenderer.class);\r\n-\t\tcontributeFromPackage(BlobRendererContribution.class, BlobRendererContribution.class);\r\n-\r\n-\t\tcontribute(Extension.class, new EmojiExtension());\r\n-\t\tcontribute(Extension.class, new SourcePositionTrackExtension());\r\n-\t\t\r\n-\t\tcontributeFromPackage(MarkdownProcessor.class, MarkdownProcessor.class);\r\n-\r\n-\t\tcontribute(ResourcePackScopeContribution.class, new ResourcePackScopeContribution() {\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic Collection<Class<?>> getResourcePackScopes() {\r\n-\t\t\t\treturn Lists.newArrayList(OneWebApplication.class);\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t});\r\n-\t\tcontribute(ExpectedExceptionContribution.class, new ExpectedExceptionContribution() {\r\n-\t\t\t\r\n-\t\t\t@SuppressWarnings(\"unchecked\")\r\n-\t\t\t@Override\r\n-\t\t\tpublic Collection<Class<? extends Exception>> getExpectedExceptionClasses() {\r\n-\t\t\t\treturn Sets.newHashSet(ConstraintViolationException.class, EntityNotFoundException.class, \r\n-\t\t\t\t\t\tObjectNotFoundException.class, StaleStateException.class, UnauthorizedException.class, \r\n-\t\t\t\t\t\tOneException.class, PageExpiredException.class, StalePageException.class);\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t});\r\n-\r\n-\t\tbind(UrlManager.class).to(DefaultUrlManager.class);\r\n-\t\tbind(CodeCommentEventBroadcaster.class);\r\n-\t\tbind(PullRequestEventBroadcaster.class);\r\n-\t\tbind(IssueEventBroadcaster.class);\r\n-\t\tbind(BuildEventBroadcaster.class);\r\n-\t\t\r\n-\t\tbind(TaskButton.TaskFutureManager.class);\r\n-\t\t\r\n-\t\tbind(UICustomization.class).toInstance(new UICustomization() {\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic Class<? extends BasePage> getHomePage() {\r\n-\t\t\t\treturn DashboardPage.class;\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic List<MainTab> getMainTabs() {\r\n-\t\t\t\treturn Lists.newArrayList(\r\n-\t\t\t\t\t\tnew ProjectListTab(), new IssueListTab(), \r\n-\t\t\t\t\t\tnew PullRequestListTab(), new BuildListTab());\r\n-\t\t\t}\r\n-\r\n-\t\t});\r\n-\t}\r\n-\t\r\n-\tprivate void configureBuild() {\r\n-\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic GroovyScript getScript() {\r\n-\t\t\t\tGroovyScript script = new GroovyScript();\r\n-\t\t\t\tscript.setName(\"determine-build-failure-investigator\");\r\n-\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.determineBuildFailureInvestigator()\"));\r\n-\t\t\t\treturn script;\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t});\r\n-\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic GroovyScript getScript() {\r\n-\t\t\t\tGroovyScript script = new GroovyScript();\r\n-\t\t\t\tscript.setName(\"get-build-number\");\r\n-\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.getBuildNumber()\"));\r\n-\t\t\t\treturn script;\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t});\r\n-\t}\r\n-\t\r\n-\tprivate void configurePersistence() {\r\n-\t\t// Use an optional binding here in case our client does not like to \r\n-\t\t// start persist service provided by this plugin\r\n-\t\tbind(Interceptor.class).to(HibernateInterceptor.class);\r\n-\t\tbind(PhysicalNamingStrategy.class).toInstance(new PrefixedNamingStrategy(\"o_\"));\r\n-\t\t\r\n-\t\tbind(SessionManager.class).to(DefaultSessionManager.class);\r\n-\t\tbind(TransactionManager.class).to(DefaultTransactionManager.class);\r\n-\t\tbind(IdManager.class).to(DefaultIdManager.class);\r\n-\t\tbind(Dao.class).to(DefaultDao.class);\r\n-\t\t\r\n-\t    TransactionInterceptor transactionInterceptor = new TransactionInterceptor();\r\n-\t    requestInjection(transactionInterceptor);\r\n-\t    \r\n-\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic boolean matches(AnnotatedElement element) {\r\n-\t\t\t\treturn element.isAnnotationPresent(Transactional.class) && !((Method) element).isSynthetic();\r\n-\t\t\t}\r\n-\t    \t\r\n-\t    }, transactionInterceptor);\r\n-\t    \r\n-\t    SessionInterceptor sessionInterceptor = new SessionInterceptor();\r\n-\t    requestInjection(sessionInterceptor);\r\n-\t    \r\n-\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic boolean matches(AnnotatedElement element) {\r\n-\t\t\t\treturn element.isAnnotationPresent(Sessional.class) && !((Method) element).isSynthetic();\r\n-\t\t\t}\r\n-\t    \t\r\n-\t    }, sessionInterceptor);\r\n-\t    \r\n-\t    contributeFromPackage(LogInstruction.class, LogInstruction.class);\r\n-\t    \r\n-\t    contribute(PersistListener.class, new PersistListener() {\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n-\t\t\t\t\tthrows CallbackException {\r\n-\t\t\t\treturn false;\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n-\t\t\t\t\tthrows CallbackException {\r\n-\t\t\t\treturn false;\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState,\r\n-\t\t\t\t\tString[] propertyNames, Type[] types) throws CallbackException {\r\n-\t\t\t\treturn false;\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t\t@Override\r\n-\t\t\tpublic void onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n-\t\t\t\t\tthrows CallbackException {\r\n-\t\t\t}\r\n-\r\n-\t\t});\r\n-\t    \r\n-\t\tbind(XStream.class).toProvider(new com.google.inject.Provider<XStream>() {\r\n-\r\n-\t\t\t@SuppressWarnings(\"rawtypes\")\r\n-\t\t\t@Override\r\n-\t\t\tpublic XStream get() {\r\n-\t\t\t\tReflectionProvider reflectionProvider = JVM.newReflectionProvider();\r\n-\t\t\t\tXStream xstream = new XStream(reflectionProvider) {\r\n-\r\n-\t\t\t\t\t@Override\r\n-\t\t\t\t\tprotected MapperWrapper wrapMapper(MapperWrapper next) {\r\n-\t\t\t\t\t\treturn new MapperWrapper(next) {\r\n-\t\t\t\t\t\t\t\r\n-\t\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\t\tpublic boolean shouldSerializeMember(Class definedIn, String fieldName) {\r\n-\t\t\t\t\t\t\t\tField field = reflectionProvider.getField(definedIn, fieldName);\r\n-\t\t\t\t\t\t\t\t\r\n-\t\t\t\t\t\t\t\treturn field.getAnnotation(XStreamOmitField.class) == null && \r\n-\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Transient.class) == null && \r\n-\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(OneToMany.class) == null &&\r\n-\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Version.class) == null;\r\n-\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\t\r\n-\t\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\t\tpublic String serializedClass(Class type) {\r\n-\t\t\t\t\t\t\t\tif (type == null)\r\n-\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\r\n-\t\t\t\t\t\t\t\telse if (type == PersistentBag.class)\r\n-\t\t\t\t\t\t\t\t\treturn super.serializedClass(ArrayList.class);\r\n-\t\t\t\t\t\t\t\telse if (type.getName().contains(\"$HibernateProxy$\"))\r\n-\t\t\t\t\t\t\t\t\treturn StringUtils.substringBefore(type.getName(), \"$HibernateProxy$\");\r\n-\t\t\t\t\t\t\t\telse\r\n-\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\r\n-\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\t\r\n-\t\t\t\t\t\t};\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\t\r\n-\t\t\t\t};\r\n-\t\t\t\tXStream.setupDefaultSecurity(xstream);\r\n-\t\t\t\txstream.allowTypesByWildcard(new String[] {\"io.onedev.**\"});\t\t\t\t\r\n-\t\t\t\t\r\n-\t\t\t\t// register NullConverter as highest; otherwise NPE when unmarshal a map \r\n-\t\t\t\t// containing an entry with value set to null.\r\n-\t\t\t\txstream.registerConverter(new NullConverter(), XStream.PRIORITY_VERY_HIGH);\r\n-\t\t\t\txstream.registerConverter(new StringConverter(), XStream.PRIORITY_VERY_HIGH);\r\n-\t\t\t\txstream.registerConverter(new VersionedDocumentConverter(), XStream.PRIORITY_VERY_HIGH);\r\n-\t\t\t\txstream.registerConverter(new HibernateProxyConverter(), XStream.PRIORITY_VERY_HIGH);\r\n-\t\t\t\txstream.registerConverter(new CollectionConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\r\n-\t\t\t\txstream.registerConverter(new MapConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\r\n-\t\t\t\txstream.registerConverter(new ISO8601DateConverter(), XStream.PRIORITY_VERY_HIGH);\r\n-\t\t\t\txstream.registerConverter(new ISO8601SqlTimestampConverter(), XStream.PRIORITY_VERY_HIGH); \r\n-\t\t\t\txstream.registerConverter(new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider()), \r\n-\t\t\t\t\t\tXStream.PRIORITY_VERY_LOW);\r\n-\t\t\t\txstream.autodetectAnnotations(true);\r\n-\t\t\t\treturn xstream;\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t}).in(Singleton.class);\r\n-\t\t\r\n-\t\tif (Bootstrap.command != null) {\r\n-\t\t\tif (RestoreDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n-\t\t\t\tbind(PersistManager.class).to(RestoreDatabase.class);\r\n-\t\t\telse if (ApplyDatabaseConstraints.COMMAND.equals(Bootstrap.command.getName()))\r\n-\t\t\t\tbind(PersistManager.class).to(ApplyDatabaseConstraints.class);\r\n-\t\t\telse if (BackupDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n-\t\t\t\tbind(PersistManager.class).to(BackupDatabase.class);\r\n-\t\t\telse if (CheckDataVersion.COMMAND.equals(Bootstrap.command.getName()))\r\n-\t\t\t\tbind(PersistManager.class).to(CheckDataVersion.class);\r\n-\t\t\telse if (Upgrade.COMMAND.equals(Bootstrap.command.getName()))\r\n-\t\t\t\tbind(PersistManager.class).to(Upgrade.class);\r\n-\t\t\telse if (CleanDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n-\t\t\t\tbind(PersistManager.class).to(CleanDatabase.class);\r\n-\t\t\telse if (ResetAdminPassword.COMMAND.equals(Bootstrap.command.getName()))\r\n-\t\t\t\tbind(PersistManager.class).to(ResetAdminPassword.class);\r\n-\t\t\telse\t\r\n-\t\t\t\tthrow new RuntimeException(\"Unrecognized command: \" + Bootstrap.command.getName());\r\n-\t\t} else {\r\n-\t\t\tbind(PersistManager.class).to(DefaultPersistManager.class);\r\n-\t\t}\t\t\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tprotected Class<? extends AbstractPlugin> getPluginClass() {\r\n-\t\treturn OneDev.class;\r\n-\t}\r\n-\r\n-}\r\n+package io.onedev.server;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ForkJoinTask;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityNotFoundException;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Transient;\n+import javax.persistence.Version;\n+import javax.validation.Configuration;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+\n+import org.apache.shiro.authc.credential.PasswordService;\n+import org.apache.shiro.authz.UnauthorizedException;\n+import org.apache.shiro.guice.aop.ShiroAopModule;\n+import org.apache.shiro.mgt.RememberMeManager;\n+import org.apache.shiro.realm.Realm;\n+import org.apache.shiro.web.filter.mgt.FilterChainManager;\n+import org.apache.shiro.web.filter.mgt.FilterChainResolver;\n+import org.apache.shiro.web.mgt.WebSecurityManager;\n+import org.apache.shiro.web.servlet.ShiroFilter;\n+import org.apache.wicket.Application;\n+import org.apache.wicket.core.request.mapper.StalePageException;\n+import org.apache.wicket.protocol.http.PageExpiredException;\n+import org.apache.wicket.protocol.http.WebApplication;\n+import org.apache.wicket.protocol.http.WicketFilter;\n+import org.apache.wicket.protocol.http.WicketServlet;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.websocket.api.WebSocketPolicy;\n+import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.servlet.ServletContainer;\n+import org.hibernate.CallbackException;\n+import org.hibernate.Interceptor;\n+import org.hibernate.ObjectNotFoundException;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.StaleStateException;\n+import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\n+import org.hibernate.collection.internal.PersistentBag;\n+import org.hibernate.exception.ConstraintViolationException;\n+import org.hibernate.type.Type;\n+import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import com.google.inject.Provider;\n+import com.google.inject.matcher.AbstractMatcher;\n+import com.google.inject.matcher.Matchers;\n+import com.thoughtworks.xstream.XStream;\n+import com.thoughtworks.xstream.annotations.XStreamOmitField;\n+import com.thoughtworks.xstream.converters.basic.NullConverter;\n+import com.thoughtworks.xstream.converters.extended.ISO8601DateConverter;\n+import com.thoughtworks.xstream.converters.extended.ISO8601SqlTimestampConverter;\n+import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;\n+import com.thoughtworks.xstream.core.JVM;\n+import com.thoughtworks.xstream.mapper.MapperWrapper;\n+import com.vladsch.flexmark.Extension;\n+\n+import io.onedev.commons.launcher.bootstrap.Bootstrap;\n+import io.onedev.commons.launcher.loader.AbstractPlugin;\n+import io.onedev.commons.launcher.loader.AbstractPluginModule;\n+import io.onedev.commons.launcher.loader.ImplementationProvider;\n+import io.onedev.commons.utils.ExceptionUtils;\n+import io.onedev.commons.utils.StringUtils;\n+import io.onedev.server.buildspec.job.DefaultJobManager;\n+import io.onedev.server.buildspec.job.JobManager;\n+import io.onedev.server.buildspec.job.log.DefaultLogManager;\n+import io.onedev.server.buildspec.job.log.LogManager;\n+import io.onedev.server.buildspec.job.log.instruction.LogInstruction;\n+import io.onedev.server.entitymanager.BuildDependenceManager;\n+import io.onedev.server.entitymanager.BuildManager;\n+import io.onedev.server.entitymanager.BuildParamManager;\n+import io.onedev.server.entitymanager.BuildQuerySettingManager;\n+import io.onedev.server.entitymanager.CodeCommentManager;\n+import io.onedev.server.entitymanager.CodeCommentQuerySettingManager;\n+import io.onedev.server.entitymanager.CodeCommentRelationManager;\n+import io.onedev.server.entitymanager.CodeCommentReplyManager;\n+import io.onedev.server.entitymanager.CommitQuerySettingManager;\n+import io.onedev.server.entitymanager.GroupAuthorizationManager;\n+import io.onedev.server.entitymanager.GroupManager;\n+import io.onedev.server.entitymanager.IssueChangeManager;\n+import io.onedev.server.entitymanager.IssueCommentManager;\n+import io.onedev.server.entitymanager.IssueFieldManager;\n+import io.onedev.server.entitymanager.IssueManager;\n+import io.onedev.server.entitymanager.IssueQuerySettingManager;\n+import io.onedev.server.entitymanager.IssueVoteManager;\n+import io.onedev.server.entitymanager.IssueWatchManager;\n+import io.onedev.server.entitymanager.MembershipManager;\n+import io.onedev.server.entitymanager.MilestoneManager;\n+import io.onedev.server.entitymanager.ProjectManager;\n+import io.onedev.server.entitymanager.PullRequestBuildManager;\n+import io.onedev.server.entitymanager.PullRequestChangeManager;\n+import io.onedev.server.entitymanager.PullRequestCommentManager;\n+import io.onedev.server.entitymanager.PullRequestManager;\n+import io.onedev.server.entitymanager.PullRequestQuerySettingManager;\n+import io.onedev.server.entitymanager.PullRequestReviewManager;\n+import io.onedev.server.entitymanager.PullRequestUpdateManager;\n+import io.onedev.server.entitymanager.PullRequestWatchManager;\n+import io.onedev.server.entitymanager.RoleManager;\n+import io.onedev.server.entitymanager.SettingManager;\n+import io.onedev.server.entitymanager.UrlManager;\n+import io.onedev.server.entitymanager.UserAuthorizationManager;\n+import io.onedev.server.entitymanager.UserManager;\n+import io.onedev.server.entitymanager.impl.DefaultBuildDependenceManager;\n+import io.onedev.server.entitymanager.impl.DefaultBuildManager;\n+import io.onedev.server.entitymanager.impl.DefaultBuildParamManager;\n+import io.onedev.server.entitymanager.impl.DefaultBuildQuerySettingManager;\n+import io.onedev.server.entitymanager.impl.DefaultCodeCommentManager;\n+import io.onedev.server.entitymanager.impl.DefaultCodeCommentQuerySettingManager;\n+import io.onedev.server.entitymanager.impl.DefaultCodeCommentRelationManager;\n+import io.onedev.server.entitymanager.impl.DefaultCodeCommentReplyManager;\n+import io.onedev.server.entitymanager.impl.DefaultCommitQuerySettingManager;\n+import io.onedev.server.entitymanager.impl.DefaultGroupAuthorizationManager;\n+import io.onedev.server.entitymanager.impl.DefaultGroupManager;\n+import io.onedev.server.entitymanager.impl.DefaultIssueChangeManager;\n+import io.onedev.server.entitymanager.impl.DefaultIssueCommentManager;\n+import io.onedev.server.entitymanager.impl.DefaultIssueFieldManager;\n+import io.onedev.server.entitymanager.impl.DefaultIssueManager;\n+import io.onedev.server.entitymanager.impl.DefaultIssueQuerySettingManager;\n+import io.onedev.server.entitymanager.impl.DefaultIssueVoteManager;\n+import io.onedev.server.entitymanager.impl.DefaultIssueWatchManager;\n+import io.onedev.server.entitymanager.impl.DefaultMembershipManager;\n+import io.onedev.server.entitymanager.impl.DefaultMilestoneManager;\n+import io.onedev.server.entitymanager.impl.DefaultProjectManager;\n+import io.onedev.server.entitymanager.impl.DefaultPullRequestBuildManager;\n+import io.onedev.server.entitymanager.impl.DefaultPullRequestChangeManager;\n+import io.onedev.server.entitymanager.impl.DefaultPullRequestCommentManager;\n+import io.onedev.server.entitymanager.impl.DefaultPullRequestManager;\n+import io.onedev.server.entitymanager.impl.DefaultPullRequestQuerySettingManager;\n+import io.onedev.server.entitymanager.impl.DefaultPullRequestReviewManager;\n+import io.onedev.server.entitymanager.impl.DefaultPullRequestUpdateManager;\n+import io.onedev.server.entitymanager.impl.DefaultPullRequestWatchManager;\n+import io.onedev.server.entitymanager.impl.DefaultRoleManager;\n+import io.onedev.server.entitymanager.impl.DefaultSettingManager;\n+import io.onedev.server.entitymanager.impl.DefaultUserAuthorizationManager;\n+import io.onedev.server.entitymanager.impl.DefaultUserManager;\n+import io.onedev.server.git.GitFilter;\n+import io.onedev.server.git.GitPostReceiveCallback;\n+import io.onedev.server.git.GitPreReceiveCallback;\n+import io.onedev.server.git.config.GitConfig;\n+import io.onedev.server.infomanager.CodeCommentRelationInfoManager;\n+import io.onedev.server.infomanager.CommitInfoManager;\n+import io.onedev.server.infomanager.DefaultCodeCommentRelationInfoManager;\n+import io.onedev.server.infomanager.DefaultCommitInfoManager;\n+import io.onedev.server.infomanager.DefaultUserInfoManager;\n+import io.onedev.server.infomanager.UserInfoManager;\n+import io.onedev.server.maintenance.ApplyDatabaseConstraints;\n+import io.onedev.server.maintenance.BackupDatabase;\n+import io.onedev.server.maintenance.CheckDataVersion;\n+import io.onedev.server.maintenance.CleanDatabase;\n+import io.onedev.server.maintenance.DataManager;\n+import io.onedev.server.maintenance.DefaultDataManager;\n+import io.onedev.server.maintenance.ResetAdminPassword;\n+import io.onedev.server.maintenance.RestoreDatabase;\n+import io.onedev.server.maintenance.Upgrade;\n+import io.onedev.server.model.support.administration.GroovyScript;\n+import io.onedev.server.model.support.administration.authenticator.Authenticator;\n+import io.onedev.server.model.support.administration.jobexecutor.AutoDiscoveredJobExecutor;\n+import io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\n+import io.onedev.server.notification.BuildNotificationManager;\n+import io.onedev.server.notification.CodeCommentNotificationManager;\n+import io.onedev.server.notification.CommitNotificationManager;\n+import io.onedev.server.notification.DefaultMailManager;\n+import io.onedev.server.notification.IssueNotificationManager;\n+import io.onedev.server.notification.MailManager;\n+import io.onedev.server.notification.PullRequestNotificationManager;\n+import io.onedev.server.notification.WebHookManager;\n+import io.onedev.server.persistence.DefaultIdManager;\n+import io.onedev.server.persistence.DefaultPersistManager;\n+import io.onedev.server.persistence.DefaultSessionManager;\n+import io.onedev.server.persistence.DefaultTransactionManager;\n+import io.onedev.server.persistence.HibernateInterceptor;\n+import io.onedev.server.persistence.IdManager;\n+import io.onedev.server.persistence.PersistListener;\n+import io.onedev.server.persistence.PersistManager;\n+import io.onedev.server.persistence.PrefixedNamingStrategy;\n+import io.onedev.server.persistence.SessionFactoryProvider;\n+import io.onedev.server.persistence.SessionInterceptor;\n+import io.onedev.server.persistence.SessionManager;\n+import io.onedev.server.persistence.SessionProvider;\n+import io.onedev.server.persistence.TransactionInterceptor;\n+import io.onedev.server.persistence.TransactionManager;\n+import io.onedev.server.persistence.annotation.Sessional;\n+import io.onedev.server.persistence.annotation.Transactional;\n+import io.onedev.server.persistence.dao.Dao;\n+import io.onedev.server.persistence.dao.DefaultDao;\n+import io.onedev.server.rest.RestConstants;\n+import io.onedev.server.rest.jersey.DefaultServletContainer;\n+import io.onedev.server.rest.jersey.JerseyConfigurator;\n+import io.onedev.server.rest.jersey.ResourceConfigProvider;\n+import io.onedev.server.search.code.DefaultIndexManager;\n+import io.onedev.server.search.code.DefaultSearchManager;\n+import io.onedev.server.search.code.IndexManager;\n+import io.onedev.server.search.code.SearchManager;\n+import io.onedev.server.security.BasicAuthenticationFilter;\n+import io.onedev.server.security.CodePullAuthorizationSource;\n+import io.onedev.server.security.FilterChainConfigurator;\n+import io.onedev.server.security.OneAuthorizingRealm;\n+import io.onedev.server.security.OneFilterChainResolver;\n+import io.onedev.server.security.OnePasswordService;\n+import io.onedev.server.security.OneRememberMeManager;\n+import io.onedev.server.security.OneWebSecurityManager;\n+import io.onedev.server.storage.AttachmentStorageManager;\n+import io.onedev.server.storage.DefaultAttachmentStorageManager;\n+import io.onedev.server.storage.DefaultStorageManager;\n+import io.onedev.server.storage.StorageManager;\n+import io.onedev.server.util.SecurityUtils;\n+import io.onedev.server.util.jackson.ObjectMapperConfigurator;\n+import io.onedev.server.util.jackson.ObjectMapperProvider;\n+import io.onedev.server.util.jackson.git.GitObjectMapperConfigurator;\n+import io.onedev.server.util.jackson.hibernate.HibernateObjectMapperConfigurator;\n+import io.onedev.server.util.jetty.DefaultJettyRunner;\n+import io.onedev.server.util.jetty.JettyRunner;\n+import io.onedev.server.util.markdown.DefaultMarkdownManager;\n+import io.onedev.server.util.markdown.EntityReferenceManager;\n+import io.onedev.server.util.markdown.MarkdownManager;\n+import io.onedev.server.util.markdown.MarkdownProcessor;\n+import io.onedev.server.util.schedule.DefaultTaskScheduler;\n+import io.onedev.server.util.schedule.TaskScheduler;\n+import io.onedev.server.util.script.ScriptContribution;\n+import io.onedev.server.util.validation.DefaultEntityValidator;\n+import io.onedev.server.util.validation.EntityValidator;\n+import io.onedev.server.util.validation.ValidatorProvider;\n+import io.onedev.server.util.work.BatchWorkManager;\n+import io.onedev.server.util.work.DefaultBatchWorkManager;\n+import io.onedev.server.util.work.DefaultWorkExecutor;\n+import io.onedev.server.util.work.WorkExecutor;\n+import io.onedev.server.util.xstream.CollectionConverter;\n+import io.onedev.server.util.xstream.HibernateProxyConverter;\n+import io.onedev.server.util.xstream.MapConverter;\n+import io.onedev.server.util.xstream.ReflectionConverter;\n+import io.onedev.server.util.xstream.StringConverter;\n+import io.onedev.server.util.xstream.VersionedDocumentConverter;\n+import io.onedev.server.web.DefaultUrlManager;\n+import io.onedev.server.web.DefaultWicketFilter;\n+import io.onedev.server.web.DefaultWicketServlet;\n+import io.onedev.server.web.ExpectedExceptionContribution;\n+import io.onedev.server.web.OneWebApplication;\n+import io.onedev.server.web.ResourcePackScopeContribution;\n+import io.onedev.server.web.WebApplicationConfigurator;\n+import io.onedev.server.web.avatar.AvatarManager;\n+import io.onedev.server.web.avatar.DefaultAvatarManager;\n+import io.onedev.server.web.component.diff.DiffRenderer;\n+import io.onedev.server.web.component.markdown.AttachmentUploadServlet;\n+import io.onedev.server.web.component.markdown.SourcePositionTrackExtension;\n+import io.onedev.server.web.component.markdown.emoji.EmojiExtension;\n+import io.onedev.server.web.component.taskbutton.TaskButton;\n+import io.onedev.server.web.editable.DefaultEditSupportRegistry;\n+import io.onedev.server.web.editable.EditSupport;\n+import io.onedev.server.web.editable.EditSupportLocator;\n+import io.onedev.server.web.editable.EditSupportRegistry;\n+import io.onedev.server.web.mapper.OnePageMapper;\n+import io.onedev.server.web.page.DashboardPage;\n+import io.onedev.server.web.page.base.BasePage;\n+import io.onedev.server.web.page.layout.BuildListTab;\n+import io.onedev.server.web.page.layout.IssueListTab;\n+import io.onedev.server.web.page.layout.MainTab;\n+import io.onedev.server.web.page.layout.ProjectListTab;\n+import io.onedev.server.web.page.layout.PullRequestListTab;\n+import io.onedev.server.web.page.layout.UICustomization;\n+import io.onedev.server.web.page.project.blob.render.BlobRendererContribution;\n+import io.onedev.server.web.page.test.TestPage;\n+import io.onedev.server.web.websocket.BuildEventBroadcaster;\n+import io.onedev.server.web.websocket.CodeCommentEventBroadcaster;\n+import io.onedev.server.web.websocket.CommitIndexedBroadcaster;\n+import io.onedev.server.web.websocket.DefaultWebSocketManager;\n+import io.onedev.server.web.websocket.IssueEventBroadcaster;\n+import io.onedev.server.web.websocket.PullRequestEventBroadcaster;\n+import io.onedev.server.web.websocket.WebSocketManager;\n+import io.onedev.server.web.websocket.WebSocketPolicyProvider;\n+\n+/**\n+ * NOTE: Do not forget to rename moduleClass property defined in the pom if you've renamed this class.\n+ *\n+ */\n+public class CoreModule extends AbstractPluginModule {\n+\n+\t@Override\n+\tprotected void configure() {\n+\t\tsuper.configure();\n+\t\t\n+\t\tbind(JettyRunner.class).to(DefaultJettyRunner.class);\n+\t\tbind(ServletContextHandler.class).toProvider(DefaultJettyRunner.class);\n+\t\t\n+\t\tbind(ObjectMapper.class).toProvider(ObjectMapperProvider.class).in(Singleton.class);\n+\t\t\n+\t\tbind(ValidatorFactory.class).toProvider(new com.google.inject.Provider<ValidatorFactory>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic ValidatorFactory get() {\n+\t\t\t\tConfiguration<?> configuration = Validation\n+\t\t\t\t\t\t.byDefaultProvider()\n+\t\t\t\t\t\t.configure()\n+\t\t\t\t\t\t.messageInterpolator(new ParameterMessageInterpolator());\n+\t\t\t\treturn configuration.buildValidatorFactory();\n+\t\t\t}\n+\t\t\t\n+\t\t}).in(Singleton.class);\n+\t\t\n+\t\tbind(Validator.class).toProvider(ValidatorProvider.class).in(Singleton.class);\n+\n+\t\t// configure markdown\n+\t\tbind(MarkdownManager.class).to(DefaultMarkdownManager.class);\t\t\n+\t\t\n+\t\tconfigurePersistence();\n+\t\tconfigureRestServices();\n+\t\tconfigureWeb();\n+\t\tconfigureBuild();\n+\t\t\n+\t\tbind(GitConfig.class).toProvider(GitConfigProvider.class);\n+\n+\t\t/*\n+\t\t * Declare bindings explicitly instead of using ImplementedBy annotation as\n+\t\t * HK2 to guice bridge can only search in explicit bindings in Guice   \n+\t\t */\n+\t\tbind(StorageManager.class).to(DefaultStorageManager.class);\n+\t\tbind(SettingManager.class).to(DefaultSettingManager.class);\n+\t\tbind(DataManager.class).to(DefaultDataManager.class);\n+\t\tbind(TaskScheduler.class).to(DefaultTaskScheduler.class);\n+\t\tbind(PullRequestCommentManager.class).to(DefaultPullRequestCommentManager.class);\n+\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\n+\t\tbind(PullRequestManager.class).to(DefaultPullRequestManager.class);\n+\t\tbind(PullRequestUpdateManager.class).to(DefaultPullRequestUpdateManager.class);\n+\t\tbind(ProjectManager.class).to(DefaultProjectManager.class);\n+\t\tbind(UserManager.class).to(DefaultUserManager.class);\n+\t\tbind(PullRequestReviewManager.class).to(DefaultPullRequestReviewManager.class);\n+\t\tbind(BuildManager.class).to(DefaultBuildManager.class);\n+\t\tbind(BuildDependenceManager.class).to(DefaultBuildDependenceManager.class);\n+\t\tbind(JobManager.class).to(DefaultJobManager.class);\n+\t\tbind(LogManager.class).to(DefaultLogManager.class);\n+\t\tbind(PullRequestBuildManager.class).to(DefaultPullRequestBuildManager.class);\n+\t\tbind(MailManager.class).to(DefaultMailManager.class);\n+\t\tbind(IssueManager.class).to(DefaultIssueManager.class);\n+\t\tbind(IssueFieldManager.class).to(DefaultIssueFieldManager.class);\n+\t\tbind(BuildParamManager.class).to(DefaultBuildParamManager.class);\n+\t\tbind(UserAuthorizationManager.class).to(DefaultUserAuthorizationManager.class);\n+\t\tbind(GroupAuthorizationManager.class).to(DefaultGroupAuthorizationManager.class);\n+\t\tbind(PullRequestWatchManager.class).to(DefaultPullRequestWatchManager.class);\n+\t\tbind(RoleManager.class).to(DefaultRoleManager.class);\n+\t\tbind(CommitInfoManager.class).to(DefaultCommitInfoManager.class);\n+\t\tbind(UserInfoManager.class).to(DefaultUserInfoManager.class);\n+\t\tbind(BatchWorkManager.class).to(DefaultBatchWorkManager.class);\n+\t\tbind(GroupManager.class).to(DefaultGroupManager.class);\n+\t\tbind(MembershipManager.class).to(DefaultMembershipManager.class);\n+\t\tbind(PullRequestChangeManager.class).to(DefaultPullRequestChangeManager.class);\n+\t\tbind(CodeCommentReplyManager.class).to(DefaultCodeCommentReplyManager.class);\n+\t\tbind(AttachmentStorageManager.class).to(DefaultAttachmentStorageManager.class);\n+\t\tbind(CodeCommentRelationInfoManager.class).to(DefaultCodeCommentRelationInfoManager.class);\n+\t\tbind(CodeCommentRelationManager.class).to(DefaultCodeCommentRelationManager.class);\n+\t\tbind(WorkExecutor.class).to(DefaultWorkExecutor.class);\n+\t\tbind(PullRequestNotificationManager.class);\n+\t\tbind(CommitNotificationManager.class);\n+\t\tbind(BuildNotificationManager.class);\n+\t\tbind(IssueNotificationManager.class);\n+\t\tbind(EntityReferenceManager.class);\n+\t\tbind(CodeCommentNotificationManager.class);\n+\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\n+\t\tbind(IssueWatchManager.class).to(DefaultIssueWatchManager.class);\n+\t\tbind(IssueChangeManager.class).to(DefaultIssueChangeManager.class);\n+\t\tbind(IssueVoteManager.class).to(DefaultIssueVoteManager.class);\n+\t\tbind(MilestoneManager.class).to(DefaultMilestoneManager.class);\n+\t\tbind(Session.class).toProvider(SessionProvider.class);\n+\t\tbind(EntityManager.class).toProvider(SessionProvider.class);\n+\t\tbind(SessionFactory.class).toProvider(SessionFactoryProvider.class);\n+\t\tbind(EntityManagerFactory.class).toProvider(SessionFactoryProvider.class);\n+\t\tbind(IssueCommentManager.class).to(DefaultIssueCommentManager.class);\n+\t\tbind(IssueQuerySettingManager.class).to(DefaultIssueQuerySettingManager.class);\n+\t\tbind(PullRequestQuerySettingManager.class).to(DefaultPullRequestQuerySettingManager.class);\n+\t\tbind(CodeCommentQuerySettingManager.class).to(DefaultCodeCommentQuerySettingManager.class);\n+\t\tbind(CommitQuerySettingManager.class).to(DefaultCommitQuerySettingManager.class);\n+\t\tbind(BuildQuerySettingManager.class).to(DefaultBuildQuerySettingManager.class);\n+\t\tbind(WebHookManager.class);\n+\n+\t\tcontribute(ObjectMapperConfigurator.class, GitObjectMapperConfigurator.class);\n+\t    contribute(ObjectMapperConfigurator.class, HibernateObjectMapperConfigurator.class);\n+\t    \n+\t\tbind(Realm.class).to(OneAuthorizingRealm.class);\n+\t\tbind(RememberMeManager.class).to(OneRememberMeManager.class);\n+\t\tbind(WebSecurityManager.class).to(OneWebSecurityManager.class);\n+\t\tbind(FilterChainResolver.class).to(OneFilterChainResolver.class);\n+\t\tbind(BasicAuthenticationFilter.class);\n+\t\tbind(PasswordService.class).to(OnePasswordService.class);\n+\t\tbind(ShiroFilter.class);\n+\t\tinstall(new ShiroAopModule());\n+        contribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\n+\n+            @Override\n+            public void configure(FilterChainManager filterChainManager) {\n+                filterChainManager.createChain(\"/**/info/refs\", \"noSessionCreation, authcBasic\");\n+                filterChainManager.createChain(\"/**/git-upload-pack\", \"noSessionCreation, authcBasic\");\n+                filterChainManager.createChain(\"/**/git-receive-pack\", \"noSessionCreation, authcBasic\");\n+            }\n+            \n+        });\n+        contributeFromPackage(Authenticator.class, Authenticator.class);\n+        \n+\t\tcontribute(ImplementationProvider.class, new ImplementationProvider() {\n+\n+\t\t\t@Override\n+\t\t\tpublic Class<?> getAbstractClass() {\n+\t\t\t\treturn JobExecutor.class;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Collection<Class<?>> getImplementations() {\n+\t\t\t\treturn Sets.newHashSet(AutoDiscoveredJobExecutor.class);\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\t\n+\t\tcontribute(CodePullAuthorizationSource.class, DefaultJobManager.class);\n+        \n+\t\tbind(IndexManager.class).to(DefaultIndexManager.class);\n+\t\tbind(SearchManager.class).to(DefaultSearchManager.class);\n+\t\t\n+\t\tbind(EntityValidator.class).to(DefaultEntityValidator.class);\n+\t\t\n+\t\tbind(GitFilter.class);\n+\t\tbind(GitPreReceiveCallback.class);\n+\t\tbind(GitPostReceiveCallback.class);\n+\t\t\n+\t    bind(ExecutorService.class).toProvider(new Provider<ExecutorService>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic ExecutorService get() {\n+\t\t        return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \n+\t\t        \t\tnew SynchronousQueue<Runnable>()) {\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void execute(Runnable command) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(command));\n+\t\t\t\t\t\t} catch (RejectedExecutionException e) {\n+\t\t\t\t\t\t\tif (!isShutdown())\n+\t\t\t\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t        };\n+\t\t\t}\n+\t    \t\n+\t    }).in(Singleton.class);\n+\t    \n+\t    bind(ForkJoinPool.class).toInstance(new ForkJoinPool() {\n+\n+\t\t\t@Override\n+\t\t\tpublic ForkJoinTask<?> submit(Runnable task) {\n+\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void execute(Runnable task) {\n+\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(task));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T> ForkJoinTask<T> submit(Callable<T> task) {\n+\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T> ForkJoinTask<T> submit(Runnable task, T result) {\n+\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task), result);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks)\n+\t\t\t\t\tthrows InterruptedException, ExecutionException {\n+\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n+\t\t\t\t\tthrows InterruptedException, ExecutionException, TimeoutException {\n+\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks), timeout, unit);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, \n+\t\t\t\t\tlong timeout, TimeUnit unit) throws InterruptedException {\n+\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks), timeout, unit);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {\n+\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks));\n+\t\t\t}\n+\n+\t    });\n+\t}\n+\t\n+\tprivate void configureRestServices() {\n+\t\tbind(ResourceConfig.class).toProvider(ResourceConfigProvider.class).in(Singleton.class);\n+\t\tbind(ServletContainer.class).to(DefaultServletContainer.class);\n+\t\t\n+\t\tcontribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void configure(FilterChainManager filterChainManager) {\n+\t\t\t\tfilterChainManager.createChain(\"/rest/**\", \"noSessionCreation, authcBasic\");\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\t\n+\t\tcontribute(JerseyConfigurator.class, new JerseyConfigurator() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void configure(ResourceConfig resourceConfig) {\n+\t\t\t\tresourceConfig.packages(RestConstants.class.getPackage().getName());\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t}\n+\n+\tprivate void configureWeb() {\n+\t\tbind(WicketServlet.class).to(DefaultWicketServlet.class);\n+\t\tbind(WicketFilter.class).to(DefaultWicketFilter.class);\n+\t\tbind(WebSocketPolicy.class).toProvider(WebSocketPolicyProvider.class);\n+\t\tbind(EditSupportRegistry.class).to(DefaultEditSupportRegistry.class);\n+\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\n+\n+\t\tbind(AttachmentUploadServlet.class);\n+\t\t\n+\t\tcontributeFromPackage(EditSupport.class, EditSupport.class);\n+\t\t\n+\t\tbind(WebApplication.class).to(OneWebApplication.class);\n+\t\tbind(Application.class).to(OneWebApplication.class);\n+\t\tbind(AvatarManager.class).to(DefaultAvatarManager.class);\n+\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\n+\t\t\n+\t\tcontributeFromPackage(EditSupport.class, EditSupportLocator.class);\n+\t\t\n+\t\tcontribute(WebApplicationConfigurator.class, new WebApplicationConfigurator() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void configure(WebApplication application) {\n+\t\t\t\tapplication.mount(new OnePageMapper(\"/test\", TestPage.class));\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\t\n+\t\tbind(CommitIndexedBroadcaster.class);\n+\t\t\n+\t\tcontributeFromPackage(DiffRenderer.class, DiffRenderer.class);\n+\t\tcontributeFromPackage(BlobRendererContribution.class, BlobRendererContribution.class);\n+\n+\t\tcontribute(Extension.class, new EmojiExtension());\n+\t\tcontribute(Extension.class, new SourcePositionTrackExtension());\n+\t\t\n+\t\tcontributeFromPackage(MarkdownProcessor.class, MarkdownProcessor.class);\n+\n+\t\tcontribute(ResourcePackScopeContribution.class, new ResourcePackScopeContribution() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic Collection<Class<?>> getResourcePackScopes() {\n+\t\t\t\treturn Lists.newArrayList(OneWebApplication.class);\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\tcontribute(ExpectedExceptionContribution.class, new ExpectedExceptionContribution() {\n+\t\t\t\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t@Override\n+\t\t\tpublic Collection<Class<? extends Exception>> getExpectedExceptionClasses() {\n+\t\t\t\treturn Sets.newHashSet(ConstraintViolationException.class, EntityNotFoundException.class, \n+\t\t\t\t\t\tObjectNotFoundException.class, StaleStateException.class, UnauthorizedException.class, \n+\t\t\t\t\t\tOneException.class, PageExpiredException.class, StalePageException.class);\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\n+\t\tbind(UrlManager.class).to(DefaultUrlManager.class);\n+\t\tbind(CodeCommentEventBroadcaster.class);\n+\t\tbind(PullRequestEventBroadcaster.class);\n+\t\tbind(IssueEventBroadcaster.class);\n+\t\tbind(BuildEventBroadcaster.class);\n+\t\t\n+\t\tbind(TaskButton.TaskFutureManager.class);\n+\t\t\n+\t\tbind(UICustomization.class).toInstance(new UICustomization() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic Class<? extends BasePage> getHomePage() {\n+\t\t\t\treturn DashboardPage.class;\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic List<MainTab> getMainTabs() {\n+\t\t\t\treturn Lists.newArrayList(\n+\t\t\t\t\t\tnew ProjectListTab(), new IssueListTab(), \n+\t\t\t\t\t\tnew PullRequestListTab(), new BuildListTab());\n+\t\t\t}\n+\n+\t\t});\n+\t}\n+\t\n+\tprivate void configureBuild() {\n+\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\n+\n+\t\t\t@Override\n+\t\t\tpublic GroovyScript getScript() {\n+\t\t\t\tGroovyScript script = new GroovyScript();\n+\t\t\t\tscript.setName(\"determine-build-failure-investigator\");\n+\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.determineBuildFailureInvestigator()\"));\n+\t\t\t\treturn script;\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\n+\n+\t\t\t@Override\n+\t\t\tpublic GroovyScript getScript() {\n+\t\t\t\tGroovyScript script = new GroovyScript();\n+\t\t\t\tscript.setName(\"get-build-number\");\n+\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.getBuildNumber()\"));\n+\t\t\t\treturn script;\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t}\n+\t\n+\tprivate void configurePersistence() {\n+\t\t// Use an optional binding here in case our client does not like to \n+\t\t// start persist service provided by this plugin\n+\t\tbind(Interceptor.class).to(HibernateInterceptor.class);\n+\t\tbind(PhysicalNamingStrategy.class).toInstance(new PrefixedNamingStrategy(\"o_\"));\n+\t\t\n+\t\tbind(SessionManager.class).to(DefaultSessionManager.class);\n+\t\tbind(TransactionManager.class).to(DefaultTransactionManager.class);\n+\t\tbind(IdManager.class).to(DefaultIdManager.class);\n+\t\tbind(Dao.class).to(DefaultDao.class);\n+\t\t\n+\t    TransactionInterceptor transactionInterceptor = new TransactionInterceptor();\n+\t    requestInjection(transactionInterceptor);\n+\t    \n+\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean matches(AnnotatedElement element) {\n+\t\t\t\treturn element.isAnnotationPresent(Transactional.class) && !((Method) element).isSynthetic();\n+\t\t\t}\n+\t    \t\n+\t    }, transactionInterceptor);\n+\t    \n+\t    SessionInterceptor sessionInterceptor = new SessionInterceptor();\n+\t    requestInjection(sessionInterceptor);\n+\t    \n+\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean matches(AnnotatedElement element) {\n+\t\t\t\treturn element.isAnnotationPresent(Sessional.class) && !((Method) element).isSynthetic();\n+\t\t\t}\n+\t    \t\n+\t    }, sessionInterceptor);\n+\t    \n+\t    contributeFromPackage(LogInstruction.class, LogInstruction.class);\n+\t    \n+\t    contribute(PersistListener.class, new PersistListener() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n+\t\t\t\t\tthrows CallbackException {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n+\t\t\t\t\tthrows CallbackException {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState,\n+\t\t\t\t\tString[] propertyNames, Type[] types) throws CallbackException {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n+\t\t\t\t\tthrows CallbackException {\n+\t\t\t}\n+\n+\t\t});\n+\t    \n+\t\tbind(XStream.class).toProvider(new com.google.inject.Provider<XStream>() {\n+\n+\t\t\t@SuppressWarnings(\"rawtypes\")\n+\t\t\t@Override\n+\t\t\tpublic XStream get() {\n+\t\t\t\tReflectionProvider reflectionProvider = JVM.newReflectionProvider();\n+\t\t\t\tXStream xstream = new XStream(reflectionProvider) {\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tprotected MapperWrapper wrapMapper(MapperWrapper next) {\n+\t\t\t\t\t\treturn new MapperWrapper(next) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean shouldSerializeMember(Class definedIn, String fieldName) {\n+\t\t\t\t\t\t\t\tField field = reflectionProvider.getField(definedIn, fieldName);\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\treturn field.getAnnotation(XStreamOmitField.class) == null && \n+\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Transient.class) == null && \n+\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(OneToMany.class) == null &&\n+\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Version.class) == null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String serializedClass(Class type) {\n+\t\t\t\t\t\t\t\tif (type == null)\n+\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\n+\t\t\t\t\t\t\t\telse if (type == PersistentBag.class)\n+\t\t\t\t\t\t\t\t\treturn super.serializedClass(ArrayList.class);\n+\t\t\t\t\t\t\t\telse if (type.getName().contains(\"$HibernateProxy$\"))\n+\t\t\t\t\t\t\t\t\treturn StringUtils.substringBefore(type.getName(), \"$HibernateProxy$\");\n+\t\t\t\t\t\t\t\telse\n+\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t};\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t};\n+\t\t\t\tXStream.setupDefaultSecurity(xstream);\n+\t\t\t\txstream.allowTypesByWildcard(new String[] {\"io.onedev.**\"});\t\t\t\t\n+\t\t\t\t\n+\t\t\t\t// register NullConverter as highest; otherwise NPE when unmarshal a map \n+\t\t\t\t// containing an entry with value set to null.\n+\t\t\t\txstream.registerConverter(new NullConverter(), XStream.PRIORITY_VERY_HIGH);\n+\t\t\t\txstream.registerConverter(new StringConverter(), XStream.PRIORITY_VERY_HIGH);\n+\t\t\t\txstream.registerConverter(new VersionedDocumentConverter(), XStream.PRIORITY_VERY_HIGH);\n+\t\t\t\txstream.registerConverter(new HibernateProxyConverter(), XStream.PRIORITY_VERY_HIGH);\n+\t\t\t\txstream.registerConverter(new CollectionConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\n+\t\t\t\txstream.registerConverter(new MapConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\n+\t\t\t\txstream.registerConverter(new ISO8601DateConverter(), XStream.PRIORITY_VERY_HIGH);\n+\t\t\t\txstream.registerConverter(new ISO8601SqlTimestampConverter(), XStream.PRIORITY_VERY_HIGH); \n+\t\t\t\txstream.registerConverter(new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider()), \n+\t\t\t\t\t\tXStream.PRIORITY_VERY_LOW);\n+\t\t\t\txstream.autodetectAnnotations(true);\n+\t\t\t\treturn xstream;\n+\t\t\t}\n+\t\t\t\n+\t\t}).in(Singleton.class);\n+\t\t\n+\t\tif (Bootstrap.command != null) {\n+\t\t\tif (RestoreDatabase.COMMAND.equals(Bootstrap.command.getName()))\n+\t\t\t\tbind(PersistManager.class).to(RestoreDatabase.class);\n+\t\t\telse if (ApplyDatabaseConstraints.COMMAND.equals(Bootstrap.command.getName()))\n+\t\t\t\tbind(PersistManager.class).to(ApplyDatabaseConstraints.class);\n+\t\t\telse if (BackupDatabase.COMMAND.equals(Bootstrap.command.getName()))\n+\t\t\t\tbind(PersistManager.class).to(BackupDatabase.class);\n+\t\t\telse if (CheckDataVersion.COMMAND.equals(Bootstrap.command.getName()))\n+\t\t\t\tbind(PersistManager.class).to(CheckDataVersion.class);\n+\t\t\telse if (Upgrade.COMMAND.equals(Bootstrap.command.getName()))\n+\t\t\t\tbind(PersistManager.class).to(Upgrade.class);\n+\t\t\telse if (CleanDatabase.COMMAND.equals(Bootstrap.command.getName()))\n+\t\t\t\tbind(PersistManager.class).to(CleanDatabase.class);\n+\t\t\telse if (ResetAdminPassword.COMMAND.equals(Bootstrap.command.getName()))\n+\t\t\t\tbind(PersistManager.class).to(ResetAdminPassword.class);\n+\t\t\telse\t\n+\t\t\t\tthrow new RuntimeException(\"Unrecognized command: \" + Bootstrap.command.getName());\n+\t\t} else {\n+\t\t\tbind(PersistManager.class).to(DefaultPersistManager.class);\n+\t\t}\t\t\n+\t}\n+\t\n+\t@Override\n+\tprotected Class<? extends AbstractPlugin> getPluginClass() {\n+\t\treturn OneDev.class;\n+\t}\n+\n+}",
      "parent_sha": "9380e3f211934dcd3f52759738d478c6ba27b697"
    }
  },
  {
    "oid": "9853c24fe9774db2012a5e1f84dcfdab982c369e",
    "message": "Fix issue #812 - Deleting issue in board view (through issue details\npopup) does not refresh board view",
    "date": "2022-07-15T16:04:14Z",
    "url": "https://github.com/theonedev/onedev/commit/9853c24fe9774db2012a5e1f84dcfdab982c369e",
    "details": {
      "sha": "c2c3636a788b1b0ae56c5fa96ee939b6305c3b1a",
      "filename": "server-core/src/main/java/io/onedev/server/web/websocket/IssueEventBroadcaster.java",
      "status": "modified",
      "additions": 16,
      "deletions": 7,
      "changes": 23,
      "blob_url": "https://github.com/theonedev/onedev/blob/9853c24fe9774db2012a5e1f84dcfdab982c369e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fwebsocket%2FIssueEventBroadcaster.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/9853c24fe9774db2012a5e1f84dcfdab982c369e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fwebsocket%2FIssueEventBroadcaster.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fwebsocket%2FIssueEventBroadcaster.java?ref=9853c24fe9774db2012a5e1f84dcfdab982c369e",
      "patch": "@@ -4,6 +4,7 @@\n import javax.inject.Singleton;\n \n import io.onedev.commons.loader.Listen;\n+import io.onedev.server.event.entity.EntityRemoved;\n import io.onedev.server.event.issue.IssueEvent;\n import io.onedev.server.model.Issue;\n import io.onedev.server.model.Project;\n@@ -21,13 +22,21 @@ public IssueEventBroadcaster(WebSocketManager webSocketManager) {\n \t@Listen\n \tpublic void on(IssueEvent event) {\n \t\twebSocketManager.notifyObservableChange(Issue.getWebSocketObservable(event.getIssue().getId()));\n-\t\tif (event.affectsListing()) {\n-\t\t\tProject project = event.getIssue().getProject();\n-\t\t\tdo {\n-\t\t\t\twebSocketManager.notifyObservableChange(Issue.getListWebSocketObservable(project.getId()));\n-\t\t\t\tproject = project.getParent();\n-\t\t\t} while (project != null);\n-\t\t}\n+\t\tif (event.affectsListing()) \n+\t\t\tnotifyIssueListObservableChange(event.getIssue().getProject());\n \t}\n \n+\tprivate void notifyIssueListObservableChange(Project project) {\n+\t\tdo {\n+\t\t\twebSocketManager.notifyObservableChange(Issue.getListWebSocketObservable(project.getId()));\n+\t\t\tproject = project.getParent();\n+\t\t} while (project != null);\n+\t}\n+\t\n+\t@Listen\n+\tpublic void on(EntityRemoved event) {\n+\t\tif (event.getEntity() instanceof Issue) \n+\t\t\tnotifyIssueListObservableChange(((Issue) event.getEntity()).getProject());\n+\t}\n+\t\n }\n\\ No newline at end of file",
      "parent_sha": "1096623a4c8f895fea06088ad538705d3593b3ee"
    }
  },
  {
    "oid": "7ceb2eeb347195cf812891d8936902ffdbf1c571",
    "message": "Fix issue #267 - Kubernetes Job Executer docker.sock is not of type file",
    "date": "2021-03-26T13:14:14Z",
    "url": "https://github.com/theonedev/onedev/commit/7ceb2eeb347195cf812891d8936902ffdbf1c571",
    "details": {
      "sha": "f0a5cefb77e3599638d3287f0a0ff8bc3f16f849",
      "filename": "server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesExecutor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/theonedev/onedev/blob/7ceb2eeb347195cf812891d8936902ffdbf1c571/server-plugin%2Fserver-plugin-executor-kubernetes%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fexecutor%2Fkubernetes%2FKubernetesExecutor.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/7ceb2eeb347195cf812891d8936902ffdbf1c571/server-plugin%2Fserver-plugin-executor-kubernetes%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fexecutor%2Fkubernetes%2FKubernetesExecutor.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-plugin%2Fserver-plugin-executor-kubernetes%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fexecutor%2Fkubernetes%2FKubernetesExecutor.java?ref=7ceb2eeb347195cf812891d8936902ffdbf1c571",
      "patch": "@@ -877,8 +877,7 @@ public void consume(String line) {\n \t\t\t\t\tMap<Object, Object> dockerSockVolume = CollectionUtils.newLinkedHashMap(\n \t\t\t\t\t\t\t\"name\", \"docker-sock\", \n \t\t\t\t\t\t\t\"hostPath\", CollectionUtils.newLinkedHashMap(\n-\t\t\t\t\t\t\t\t\t\"path\", dockerSock, \n-\t\t\t\t\t\t\t\t\t\"type\", \"File\"));\n+\t\t\t\t\t\t\t\t\t\"path\", dockerSock));\n \t\t\t\t\tvolumes.add(dockerSockVolume);\n \t\t\t\t}\n \t\t\t\tpodSpec.put(\"volumes\", volumes);",
      "parent_sha": "77212c2a3dd4faf16471e874345c4a7d94a6af17"
    }
  },
  {
    "oid": "14d1d9c23b94c6e0743fdfbb6c8fb50702b78c75",
    "message": "Index each repository separately to avoid potential issues",
    "date": "2019-12-23T13:13:39Z",
    "url": "https://github.com/theonedev/onedev/commit/14d1d9c23b94c6e0743fdfbb6c8fb50702b78c75",
    "details": {
      "sha": "8c7d4acf06dd733e121cd87bf278e160544cf78c",
      "filename": "server-core/src/main/java/io/onedev/server/search/code/DefaultIndexManager.java",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/theonedev/onedev/blob/14d1d9c23b94c6e0743fdfbb6c8fb50702b78c75/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fcode%2FDefaultIndexManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/14d1d9c23b94c6e0743fdfbb6c8fb50702b78c75/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fcode%2FDefaultIndexManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fcode%2FDefaultIndexManager.java?ref=14d1d9c23b94c6e0743fdfbb6c8fb50702b78c75",
      "patch": "@@ -77,7 +77,6 @@\n import io.onedev.server.entitymanager.ProjectManager;\n import io.onedev.server.event.RefUpdated;\n import io.onedev.server.event.system.SystemStarted;\n-import io.onedev.server.git.GitUtils;\n import io.onedev.server.model.Project;\n import io.onedev.server.persistence.SessionManager;\n import io.onedev.server.persistence.annotation.Sessional;\n@@ -297,8 +296,8 @@ private void indexBlob(IndexWriter writer, Repository repository,\n \t\twriter.addDocument(document);\n \t}\n \t\n-\tprivate BatchWorker getBatchWorker(Long projectId, Long forkRootId) {\n-\t\treturn new BatchWorker(\"project-\" + forkRootId + \"-indexBlob\", 1) {\n+\tprivate BatchWorker getBatchWorker(Long projectId) {\n+\t\treturn new BatchWorker(\"project-\" + projectId + \"-indexBlob\", 1) {\n \n \t\t\t@Override\n \t\t\tpublic void doWorks(Collection<Prioritized> works) {\n@@ -309,13 +308,8 @@ public void run() {\n \t\t\t\t\t\tPreconditions.checkState(works.size() == 1);\n \n \t\t\t\t\t\tProject project = projectManager.load(projectId);\n-\t\t\t\t\t\tProject forkRoot = project.getForkRoot();\n-\t\t\t\t\t\t\n \t\t\t\t\t\tObjectId commitId = ((IndexWork) works.iterator().next()).getCommitId();\n-\t\t\t\t\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\tif (!forkRootId.equals(projectId) && !forkRoot.getRepository().hasObject(commitId))\n-\t\t\t\t\t\t\tGitUtils.fetch(project.getRepository(), commitId, forkRoot.getRepository());\n-\t\t\t\t\t\tdoIndex(forkRoot, commitId);\n+\t\t\t\t\t\tdoIndex(project, commitId);\n \t\t\t\t\t\t\n \t\t\t\t\t\tlistenerRegistry.post(new CommitIndexed(project, commitId.copy()));\n \t\t\t\t\t}\n@@ -379,7 +373,7 @@ public String getIndexVersion(SymbolExtractor<Symbol> extractor) {\n \n \t@Override\n \tpublic boolean isIndexed(Project project, ObjectId commit) {\n-\t\tFile indexDir = storageManager.getProjectIndexDir(project.getForkRoot().getId());\n+\t\tFile indexDir = storageManager.getProjectIndexDir(project.getId());\n \t\ttry (Directory directory = FSDirectory.open(indexDir.toPath())) {\n \t\t\tif (DirectoryReader.indexExists(directory)) {\n \t\t\t\ttry (IndexReader reader = DirectoryReader.open(directory)) {\n@@ -401,7 +395,7 @@ public void on(RefUpdated event) {\n \t\t// as many tags might be pushed all at once when the repository is imported \n \t\tif (event.getRefName().startsWith(Constants.R_HEADS) && !event.getNewCommitId().equals(ObjectId.zeroId())) {\n \t\t\tIndexWork work = new IndexWork(BACKEND_INDEXING_PRIORITY, event.getNewCommitId());\n-\t\t\tbatchWorkManager.submit(getBatchWorker(event.getProject().getId(), event.getProject().getForkRoot().getId()), work);\n+\t\t\tbatchWorkManager.submit(getBatchWorker(event.getProject().getId()), work);\n \t\t}\n \t}\n \t\n@@ -434,7 +428,7 @@ public void indexAsync(Project project, ObjectId commit) {\n \t\telse\n \t\t\tpriority = BACKEND_INDEXING_PRIORITY;\n \t\tIndexWork work = new IndexWork(priority, commit);\n-\t\tbatchWorkManager.submit(getBatchWorker(project.getId(), project.getForkRoot().getId()), work);\n+\t\tbatchWorkManager.submit(getBatchWorker(project.getId()), work);\n \t}\n \t\n \tprivate static class IndexWork extends Prioritized {",
      "parent_sha": "b348a2a44f4d96ed4206a6bf3658e81dfe00f1e7"
    }
  },
  {
    "oid": "66f53bd14b32c39e604875b103d1b605e85430fa",
    "message": "Fix url mapper issue of attachment resource.",
    "date": "2015-09-16T13:53:13Z",
    "url": "https://github.com/theonedev/onedev/commit/66f53bd14b32c39e604875b103d1b605e85430fa",
    "details": {
      "sha": "845953287354f6a728d7aa1743c485c09077a125",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/UrlMapper.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/theonedev/onedev/blob/66f53bd14b32c39e604875b103d1b605e85430fa/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2FUrlMapper.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/66f53bd14b32c39e604875b103d1b605e85430fa/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2FUrlMapper.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2FUrlMapper.java?ref=66f53bd14b32c39e604875b103d1b605e85430fa",
      "patch": "@@ -74,11 +74,11 @@ public int getCompatibilityScore(Request request) {\n \t\t\t}\n \t\t\t\n \t\t});\n-\t\tadd(new ResourceMapper(\"${user}/${repo}/pulls/${request}/attachments/{attachment}\", new AttachmentResourceReference()) {\n+\t\tadd(new ResourceMapper(\"${user}/${repo}/pulls/${request}/attachments/${attachment}\", new AttachmentResourceReference()) {\n \n \t\t\t@Override\n \t\t\tpublic int getCompatibilityScore(Request request) {\n-\t\t\t\treturn 3;\n+\t\t\t\treturn 8;\n \t\t\t}\n \t\t\t\n \t\t});",
      "parent_sha": "4481347577415c6f46e30dbcc4e813351207feb3"
    }
  },
  {
    "oid": "3a2d97df56ad91aba1d88bedcb2555459677adbe",
    "message": "Rename issue board column to list",
    "date": "2018-06-15T07:22:21Z",
    "url": "https://github.com/theonedev/onedev/commit/3a2d97df56ad91aba1d88bedcb2555459677adbe",
    "details": {
      "sha": "a1de0f70152ce60d2111a1b77c0765781c4a4b3d",
      "filename": "core/src/main/java/io/onedev/server/model/support/issue/IssueBoard.java",
      "status": "modified",
      "additions": 26,
      "deletions": 26,
      "changes": 52,
      "blob_url": "https://github.com/theonedev/onedev/blob/3a2d97df56ad91aba1d88bedcb2555459677adbe/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fissue%2FIssueBoard.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/3a2d97df56ad91aba1d88bedcb2555459677adbe/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fissue%2FIssueBoard.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fissue%2FIssueBoard.java?ref=3a2d97df56ad91aba1d88bedcb2555459677adbe",
      "patch": "@@ -44,7 +44,7 @@ public class IssueBoard implements Serializable {\n \t\n \tprivate String identifyField;\n \t\n-\tprivate List<String> columns = new ArrayList<>();\n+\tprivate List<String> lists = new ArrayList<>();\n \n \t@Editable(order=100)\n \t@NotEmpty\n@@ -67,7 +67,7 @@ public void setIssueFilter(String issueFilter) {\n \t\tthis.issueFilter = issueFilter;\n \t}\n \n-\t@Editable(order=300, description=\"Specify issue field to identify different columns of the board\")\n+\t@Editable(order=300, description=\"Specify issue field to identify different lists of the board\")\n \t@ChoiceProvider(\"getIdentifyFieldChoices\")\n \t@NotEmpty\n \tpublic String getIdentifyField() {\n@@ -78,16 +78,16 @@ public void setIdentifyField(String identifyField) {\n \t\tthis.identifyField = identifyField;\n \t}\n \n-\t@Editable(order=400, description=\"Specify columns of the board. Each column corresponds to \"\n+\t@Editable(order=400, description=\"Specify lists of the board. Each list corresponds to \"\n \t\t\t+ \"a value of the issue field specified above\")\n-\t@Size(min=2, message=\"At least two columns need to be defined\")\n-\t@ChoiceProvider(\"getColumnChoices\")\n-\tpublic List<String> getColumns() {\n-\t\treturn columns;\n+\t@Size(min=2, message=\"At least two lists need to be defined\")\n+\t@ChoiceProvider(\"getListChoices\")\n+\tpublic List<String> getLists() {\n+\t\treturn lists;\n \t}\n \n-\tpublic void setColumns(List<String> columns) {\n-\t\tthis.columns = columns;\n+\tpublic void setLists(List<String> lists) {\n+\t\tthis.lists = lists;\n \t}\n \n \t@SuppressWarnings(\"unused\")\n@@ -103,7 +103,7 @@ private static List<String> getIdentifyFieldChoices() {\n \t}\n \t\n \t@SuppressWarnings(\"unused\")\n-\tprivate static Map<String, String> getColumnChoices() {\n+\tprivate static Map<String, String> getListChoices() {\n \t\tMap<String, String> choices = new LinkedHashMap<>();\n \t\tProject project = OneContext.get().getProject();\n \t\tString fieldName = (String) OneContext.get().getEditContext().getInputValue(\"identifyField\");\n@@ -137,9 +137,9 @@ public Set<String> getUndefinedStates(Project project) {\n \t\t\t}\n \t\t}\n \t\tif (getIdentifyField().equals(Issue.STATE)) {\n-\t\t\tfor (String column: getColumns()) {\n-\t\t\t\tif (project.getIssueWorkflow().getStateSpec(column) == null)\n-\t\t\t\t\tundefinedStates.add(column);\n+\t\t\tfor (String list: getLists()) {\n+\t\t\t\tif (project.getIssueWorkflow().getStateSpec(list) == null)\n+\t\t\t\t\tundefinedStates.add(list);\n \t\t\t}\n \t\t}\n \t\treturn undefinedStates;\n@@ -158,9 +158,9 @@ public void fixUndefinedStates(Project project, Map<String, UndefinedStateResolu\n \t\t}\n \t\tif (getIdentifyField().equals(Issue.STATE)) {\n \t\t\tfor (Map.Entry<String, UndefinedStateResolution> entry: resolutions.entrySet()) {\n-\t\t\t\tint index = getColumns().indexOf(entry.getKey());\n+\t\t\t\tint index = getLists().indexOf(entry.getKey());\n \t\t\t\tif (index != -1)\n-\t\t\t\t\tgetColumns().set(index, entry.getValue().getNewState());\n+\t\t\t\t\tgetLists().set(index, entry.getValue().getNewState());\n \t\t\t}\n \t\t}\n \t}\n@@ -252,11 +252,11 @@ public InputContext getInputContext() {\n \t\t\t}\n \n \t\t\tif (!getIdentifyField().equals(Issue.STATE)) {\n-\t\t\t\tfor (String column: getColumns()) {\n+\t\t\t\tfor (String list: getLists()) {\n \t\t\t\t\tInputSpec fieldSpec = project.getIssueWorkflow().getFieldSpec(getIdentifyField());\n \t\t\t\t\tList<String> choices = fieldSpec.getPossibleValues();\n-\t\t\t\t\tif (!choices.contains(column))\n-\t\t\t\t\t\tundefinedFieldValues.add(new UndefinedFieldValue(getIdentifyField(), column));\n+\t\t\t\t\tif (!choices.contains(list))\n+\t\t\t\t\t\tundefinedFieldValues.add(new UndefinedFieldValue(getIdentifyField(), list));\n \t\t\t\t}\n \t\t\t}\n \t\t\t\n@@ -290,30 +290,30 @@ public boolean fixUndefinedFieldValues(Project project, Map<UndefinedFieldValue,\n \t\t\t}\n \t\t}\n \n-\t\tfor (Iterator<String> it = getColumns().iterator(); it.hasNext();) {\n-\t\t\tString column = it.next();\n+\t\tfor (Iterator<String> it = getLists().iterator(); it.hasNext();) {\n+\t\t\tString list = it.next();\n \t\t\tfor (Map.Entry<UndefinedFieldValue, UndefinedFieldValueResolution> entry: resolutions.entrySet()) {\n \t\t\t\tUndefinedFieldValueResolution resolution = entry.getValue();\n \t\t\t\tif (resolution.getFixType() == UndefinedFieldValueResolution.FixType.DELETE_THIS_VALUE) {\n \t\t\t\t\tif (entry.getKey().getFieldName().equals(getIdentifyField()) \n-\t\t\t\t\t\t\t&& entry.getKey().getFieldValue().equals(column)) {\n+\t\t\t\t\t\t\t&& entry.getKey().getFieldValue().equals(list)) {\n \t\t\t\t\t\tit.remove();\n \t\t\t\t\t}\n \t\t\t\t} \n \t\t\t}\t\t\t\t\n \t\t}\n \t\t\n-\t\tif (getColumns().size() < 2)\n+\t\tif (getLists().size() < 2)\n \t\t\treturn true;\n \t\t\n-\t\tfor (int i=0; i<getColumns().size(); i++) {\n-\t\t\tString column = getColumns().get(i);\n+\t\tfor (int i=0; i<getLists().size(); i++) {\n+\t\t\tString list = getLists().get(i);\n \t\t\tfor (Map.Entry<UndefinedFieldValue, UndefinedFieldValueResolution> entry: resolutions.entrySet()) {\n \t\t\t\tUndefinedFieldValueResolution resolution = entry.getValue();\n \t\t\t\tif (resolution.getFixType() == UndefinedFieldValueResolution.FixType.CHANGE_TO_ANOTHER_VALUE) {\n \t\t\t\t\tif (entry.getKey().getFieldName().equals(getIdentifyField()) \n-\t\t\t\t\t\t\t&& entry.getKey().getFieldValue().equals(column)) {\n-\t\t\t\t\t\tgetColumns().set(i, resolution.getNewValue());\n+\t\t\t\t\t\t\t&& entry.getKey().getFieldValue().equals(list)) {\n+\t\t\t\t\t\tgetLists().set(i, resolution.getNewValue());\n \t\t\t\t\t}\n \t\t\t\t} \n \t\t\t}\t\t\t\t",
      "parent_sha": "a67de74b01d0067ff477db9f2afe5a4972227691"
    }
  },
  {
    "oid": "52aaaf52a00e89a06b80a3a4af1390b0d9b70937",
    "message": "before analyzing websocket issue",
    "date": "2016-04-15T07:03:24Z",
    "url": "https://github.com/theonedev/onedev/commit/52aaaf52a00e89a06b80a3a4af1390b0d9b70937",
    "details": {
      "sha": "4689abb7a533d17ff9e018d8f4d2880a3b8f9dbe",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/UrlMapper.java",
      "status": "modified",
      "additions": 38,
      "deletions": 19,
      "changes": 57,
      "blob_url": "https://github.com/theonedev/onedev/blob/52aaaf52a00e89a06b80a3a4af1390b0d9b70937/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2FUrlMapper.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/52aaaf52a00e89a06b80a3a4af1390b0d9b70937/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2FUrlMapper.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2FUrlMapper.java?ref=52aaaf52a00e89a06b80a3a4af1390b0d9b70937",
      "patch": "@@ -91,23 +91,33 @@ private void addResources() {\n \r\n \t\t\t@Override\r\n \t\t\tpublic int getCompatibilityScore(Request request) {\r\n-\t\t\t\treturn 3;\r\n+\t\t\t\tif (isDepotUrl(request.getUrl()))\r\n+\t\t\t\t\treturn 3;\r\n+\t\t\t\telse\r\n+\t\t\t\t\treturn 0;\r\n \t\t\t}\r\n \t\t\t\r\n \t\t});\r\n \t\tadd(new ResourceMapper(\"${account}/${depot}/raw\", new BlobResourceReference()) {\r\n \r\n \t\t\t@Override\r\n \t\t\tpublic int getCompatibilityScore(Request request) {\r\n-\t\t\t\treturn 3;\r\n+\t\t\t\tif (isDepotUrl(request.getUrl()))\r\n+\t\t\t\t\treturn 3;\r\n+\t\t\t\telse\r\n+\t\t\t\t\treturn 0;\r\n \t\t\t}\r\n \t\t\t\r\n \t\t});\r\n-\t\tadd(new ResourceMapper(\"${account}/${depot}/pulls/${request}/attachments/${attachment}\", new AttachmentResourceReference()) {\r\n+\t\tadd(new ResourceMapper(\"${account}/${depot}/pulls/${request}/attachments/${attachment}\", \r\n+\t\t\t\tnew AttachmentResourceReference()) {\r\n \r\n \t\t\t@Override\r\n \t\t\tpublic int getCompatibilityScore(Request request) {\r\n-\t\t\t\treturn 8;\r\n+\t\t\t\tif (isDepotUrl(request.getUrl()))\r\n+\t\t\t\t\treturn 8;\r\n+\t\t\t\telse\r\n+\t\t\t\t\treturn 0;\r\n \t\t\t}\r\n \t\t\t\r\n \t\t});\r\n@@ -137,17 +147,21 @@ public List<String> normalize(List<String> urlSegments) {\n \t\treturn normalized;\r\n \t}\r\n \r\n+\tprivate boolean isAccountUrl(Url url) {\r\n+\t\tList<String> urlSegments = normalize(url.getSegments());\r\n+\t\tif (urlSegments.size() < 1)\r\n+\t\t\treturn false;\r\n+\t\tString accountName = urlSegments.get(0);\r\n+\t\t\r\n+\t\treturn !AccountNameValidator.getReservedNames().contains(accountName);\r\n+\t}\r\n+\t\r\n \tprivate void addAccountPages() {\r\n \t\tadd(new MountedMapper(\"${account}\", AccountOverviewPage.class) {\r\n \r\n \t\t\t@Override\r\n \t\t\tprotected boolean urlStartsWith(Url url, String... segments) {\r\n-\t\t\t\tList<String> urlSegments = normalize(url.getSegments());\r\n-\t\t\t\tif (urlSegments.size() < 1)\r\n-\t\t\t\t\treturn false;\r\n-\t\t\t\tString accountName = urlSegments.get(0);\r\n-\t\t\t\t\r\n-\t\t\t\treturn !AccountNameValidator.getReservedNames().contains(accountName);\r\n+\t\t\t\treturn isAccountUrl(url);\r\n \t\t\t}\r\n \r\n \t\t});\r\n@@ -182,20 +196,25 @@ protected boolean urlStartsWith(Url url, String... segments) {\n \t\t\t\tCollaboratorPrivilegeSourcePage.class));\r\n \t}\r\n \r\n+\tprivate boolean isDepotUrl(Url url) {\r\n+\t\tList<String> urlSegments = normalize(url.getSegments());\r\n+\t\tif (urlSegments.size() < 2)\r\n+\t\t\treturn false;\r\n+\t\t\r\n+\t\tString accountName = urlSegments.get(0);\r\n+\t\tif (AccountNameValidator.getReservedNames().contains(accountName))\r\n+\t\t\treturn false;\r\n+\r\n+\t\tString depotName = urlSegments.get(1);\r\n+\t\treturn !DepotNameValidator.getReservedNames().contains(depotName);\r\n+\t}\r\n+\t\r\n \tprivate void addDepotPages() {\r\n \t\tadd(new MountedMapper(\"${account}/${depot}\", DepotOverviewPage.class) {\r\n \r\n \t\t\t@Override\r\n \t\t\tprotected boolean urlStartsWith(Url url, String... segments) {\r\n-\t\t\t\tList<String> urlSegments = normalize(url.getSegments());\r\n-\t\t\t\tif (urlSegments.size() < 2)\r\n-\t\t\t\t\treturn false;\r\n-\t\t\t\tString accountName = urlSegments.get(0);\r\n-\t\t\t\tif (AccountNameValidator.getReservedNames().contains(accountName))\r\n-\t\t\t\t\treturn false;\r\n-\r\n-\t\t\t\tString depotName = urlSegments.get(1);\r\n-\t\t\t\treturn !DepotNameValidator.getReservedNames().contains(depotName);\r\n+\t\t\t\treturn isDepotUrl(url);\r\n \t\t\t}\r\n \r\n \t\t});\r",
      "parent_sha": "4d545a4c9658511bfd7779818c2c3cdbb08af8b9"
    }
  },
  {
    "oid": "adaa2b8addb9909f7958bab9a5ad508cc8f2df7b",
    "message": "Minor UI description fix",
    "date": "2021-08-06T01:24:38Z",
    "url": "https://github.com/theonedev/onedev/commit/adaa2b8addb9909f7958bab9a5ad508cc8f2df7b",
    "details": {
      "sha": "1dbd3d40572cba5fded867b80f030d379e748790",
      "filename": "server-core/src/main/java/io/onedev/server/model/support/administration/ServiceDeskSetting.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/theonedev/onedev/blob/adaa2b8addb9909f7958bab9a5ad508cc8f2df7b/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2FServiceDeskSetting.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/adaa2b8addb9909f7958bab9a5ad508cc8f2df7b/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2FServiceDeskSetting.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2FServiceDeskSetting.java?ref=adaa2b8addb9909f7958bab9a5ad508cc8f2df7b",
      "patch": "@@ -79,8 +79,7 @@ private static List<String> getProjectChoices() {\n \t}\n \t\n \t@Editable(order=300, description=\"Specify issue creation settings. For a particular sender and project, \"\n-\t\t\t+ \"the first matching entry will take effect. If no entry matches, default issue creation \"\n-\t\t\t+ \"settings defined below will be used\")\n+\t\t\t+ \"the first matching entry will take effect\")\n \tpublic List<IssueCreationSetting> getIssueCreationSettings() {\n \t\treturn issueCreationSettings;\n \t}",
      "parent_sha": "7a05c0f47d1f4cdd0892e76859ae1f56865d941c"
    }
  },
  {
    "oid": "6810aed4c8a330c491e7d1e7afd1a47969a5bf88",
    "message": "Fix bug: page navigation in project page throws exception",
    "date": "2017-09-08T05:26:06Z",
    "url": "https://github.com/theonedev/onedev/commit/6810aed4c8a330c491e7d1e7afd1a47969a5bf88",
    "details": {
      "sha": "02c5213af4b7a2b1dbfea7a45632a9bb275c090e",
      "filename": "web/src/main/java/com/gitplex/server/web/component/projectlist/ProjectListPanel.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/theonedev/onedev/blob/6810aed4c8a330c491e7d1e7afd1a47969a5bf88/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fcomponent%2Fprojectlist%2FProjectListPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/6810aed4c8a330c491e7d1e7afd1a47969a5bf88/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fcomponent%2Fprojectlist%2FProjectListPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fcomponent%2Fprojectlist%2FProjectListPanel.java?ref=6810aed4c8a330c491e7d1e7afd1a47969a5bf88",
      "patch": "@@ -5,11 +5,11 @@\n import java.util.List;\n \n import org.apache.wicket.behavior.AttributeAppender;\n-import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxNavigationToolbar;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.DataTable;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.NavigationToolbar;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.NoRecordsToolbar;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.markup.head.CssHeaderItem;\n@@ -37,7 +37,7 @@\n import com.gitplex.server.web.page.project.commit.CommitDetailPage;\n import com.gitplex.server.web.util.DateUtils;\n \n-import de.agilecoders.wicket.core.markup.html.bootstrap.navigation.ajax.BootstrapAjaxPagingNavigator;\n+import de.agilecoders.wicket.core.markup.html.bootstrap.navigation.BootstrapPagingNavigator;\n \n @SuppressWarnings(\"serial\")\n public class ProjectListPanel extends Panel {\n@@ -152,11 +152,11 @@ public IModel<ProjectFacade> model(ProjectFacade object) {\n \t\t\n \t\tDataTable<ProjectFacade, Void> projectsTable = \n \t\t\t\tnew DataTable<ProjectFacade, Void>(\"projects\", columns, dataProvider, WebConstants.PAGE_SIZE);\t\t\n-\t\tprojectsTable.addBottomToolbar(new AjaxNavigationToolbar(projectsTable) {\n+\t\tprojectsTable.addBottomToolbar(new NavigationToolbar(projectsTable) {\n \n \t\t\t@Override\n \t\t\tprotected PagingNavigator newPagingNavigator(String navigatorId, DataTable<?, ?> table) {\n-\t\t\t\treturn new BootstrapAjaxPagingNavigator(navigatorId, table);\n+\t\t\t\treturn new BootstrapPagingNavigator(navigatorId, table);\n \t\t\t}\n \t\t\t\n \t\t});",
      "parent_sha": "5864072bf8aa2e3057e2adf5e71935bb857e2899"
    }
  },
  {
    "oid": "a63416d34b96ef59dee671595c5fc1103985649f",
    "message": "midwork",
    "date": "2015-11-09T12:56:48Z",
    "url": "https://github.com/theonedev/onedev/commit/a63416d34b96ef59dee671595c5fc1103985649f",
    "details": {
      "sha": "462c945bfb29f9eca867469716139dfeb8d62d94",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/page/repository/commit/QueryAssistBehavior.java",
      "status": "modified",
      "additions": 41,
      "deletions": 1,
      "changes": 42,
      "blob_url": "https://github.com/theonedev/onedev/blob/a63416d34b96ef59dee671595c5fc1103985649f/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcommit%2FQueryAssistBehavior.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/a63416d34b96ef59dee671595c5fc1103985649f/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcommit%2FQueryAssistBehavior.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcommit%2FQueryAssistBehavior.java?ref=a63416d34b96ef59dee671595c5fc1103985649f",
      "patch": "@@ -9,6 +9,7 @@\n import org.antlr.v4.runtime.BaseErrorListener;\n import org.antlr.v4.runtime.CommonToken;\n import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.Parser;\n import org.antlr.v4.runtime.RecognitionException;\n import org.antlr.v4.runtime.Recognizer;\n import org.antlr.v4.runtime.Token;\n@@ -90,7 +91,46 @@ public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int\n \n \t@Override\n \tprotected List<InputAssist> getAssists(String input, int caret) {\n-\t\treturn new ArrayList<>();\n+\t\tfinal List<InputAssist> assists = new ArrayList<>();\n+\t\t\n+\t\tString inputBeforeCaret;\n+\t\tif (caret > input.length())\n+\t\t\tinputBeforeCaret = input;\n+\t\telse\n+\t\t\tinputBeforeCaret = input.substring(0, caret);\n+\n+\t\tANTLRInputStream is = new ANTLRInputStream(inputBeforeCaret); \n+\t\tCommitQueryLexer lexer = new CommitQueryLexer(is);\n+\t\tCommonTokenStream tokens = new CommonTokenStream(lexer);\n+\t\tCommitQueryParser parser = new CommitQueryParser(tokens);\n+\t\tlexer.removeErrorListeners();\n+\t\tparser.removeErrorListeners();\n+\n+\t\tSystem.out.println(\"********************************\");\n+\t\tlexer.addErrorListener(new BaseErrorListener() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line,\n+\t\t\t\t\tint charPositionInLine, String msg, RecognitionException e) {\n+\t\t\t\tSystem.out.println(\"lexer :: symbol: \" + offendingSymbol + \", msg: \" + msg + \", exception: \" + e);\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\tparser.addErrorListener(new BaseErrorListener() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line,\n+\t\t\t\t\tint charPositionInLine, String msg, RecognitionException e) {\n+\t\t\t\tParser parser = (Parser) recognizer;\n+\t\t\t\tSystem.out.println(\"expected tokens: \" + parser.getExpectedTokens());\n+\t\t\t\tSystem.out.println(\"parser :: symbol: \" + offendingSymbol + \", msg: \" + msg + \", exception: \" + e);\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\t\n+\t\tparser.query();\n+\n+\t\treturn assists;\n \t}\n \t\n }",
      "parent_sha": "33255377817663d91718ec15473e0738afa4cdb0"
    }
  },
  {
    "oid": "03dcb6d23b6bdf024b65e2972b667c5c91e63d96",
    "message": "Fix the issue that url \"/<account>/<depot>\" is redirected to \n\"/<account>/<depot>/blob\"",
    "date": "2017-03-10T12:14:59Z",
    "url": "https://github.com/theonedev/onedev/commit/03dcb6d23b6bdf024b65e2972b667c5c91e63d96",
    "details": {
      "sha": "8ce4c019f01fba59e4bcdc1d5eabc70900b43fef",
      "filename": "web/src/main/java/com/gitplex/server/web/UrlMapper.java",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/theonedev/onedev/blob/03dcb6d23b6bdf024b65e2972b667c5c91e63d96/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2FUrlMapper.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/03dcb6d23b6bdf024b65e2972b667c5c91e63d96/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2FUrlMapper.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2FUrlMapper.java?ref=03dcb6d23b6bdf024b65e2972b667c5c91e63d96",
      "patch": "@@ -1,8 +1,10 @@\n package com.gitplex.server.web;\n \n+import org.apache.wicket.core.request.handler.IPageClassRequestHandler;\n import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.request.IRequestHandler;\n import org.apache.wicket.request.Request;\n+import org.apache.wicket.request.Url;\n import org.apache.wicket.request.mapper.CompoundRequestMapper;\n \n import com.gitplex.server.web.page.account.collaborators.AccountCollaboratorListPage;\n@@ -165,7 +167,25 @@ public IRequestHandler mapRequest(Request request) {\n \t\t\t\n \t\t});\n \n-\t\tadd(new DepotMapper(\"${account}/${depot}/blob/#{revision}/#{path}\", DepotBlobPage.class));\n+\t\tadd(new DepotMapper(\"${account}/${depot}/blob/#{revision}/#{path}\", DepotBlobPage.class) {\n+\t\t\t\n+\t\t\t/*\n+\t\t\t * This logic is added to prevent url \"/<account>/<depot>\" from being redirected to \n+\t\t\t * \"/<account>/<depot>/blob\"\n+\t\t\t */\n+\t\t\t@Override\n+\t\t\tpublic Url mapHandler(IRequestHandler requestHandler) {\n+\t\t\t\tif (requestHandler instanceof IPageClassRequestHandler) {\n+\t\t\t\t\tIPageClassRequestHandler pageClassRequestHandler = (IPageClassRequestHandler) requestHandler;\n+\t\t\t\t\tif (pageClassRequestHandler.getPageClass() == DepotBlobPage.class \n+\t\t\t\t\t\t\t&& pageClassRequestHandler.getPageParameters().get(\"revision\").toString() == null) {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn super.mapHandler(requestHandler);\n+\t\t\t}\n+\t\t\t\n+\t\t});\n \t\tadd(new DepotMapper(\"${account}/${depot}/commit/${revision}\", CommitDetailPage.class));\n \t\tadd(new DepotMapper(\"${account}/${depot}/commits\", DepotCommitsPage.class));\n \t\tadd(new DepotMapper(\"${account}/${depot}/compare\", RevisionComparePage.class));",
      "parent_sha": "381b3112ae025a6fd12dec328239e368853e18cb"
    }
  },
  {
    "oid": "b8e2a482b37f939b1ed5cd47f48e0344814076bd",
    "message": "fix: Cache of suggested gradle job not working (#1806)",
    "date": "2024-03-14T12:09:20Z",
    "url": "https://github.com/theonedev/onedev/commit/b8e2a482b37f939b1ed5cd47f48e0344814076bd",
    "details": {
      "sha": "4e92cf9f1714890f461301bfb52df804697ecd32",
      "filename": "server-plugin/server-plugin-buildspec-gradle/src/main/java/io/onedev/server/plugin/buildspec/gradle/GradleJobSuggestion.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/b8e2a482b37f939b1ed5cd47f48e0344814076bd/server-plugin%2Fserver-plugin-buildspec-gradle%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fbuildspec%2Fgradle%2FGradleJobSuggestion.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/b8e2a482b37f939b1ed5cd47f48e0344814076bd/server-plugin%2Fserver-plugin-buildspec-gradle%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fbuildspec%2Fgradle%2FGradleJobSuggestion.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-plugin%2Fserver-plugin-buildspec-gradle%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fbuildspec%2Fgradle%2FGradleJobSuggestion.java?ref=b8e2a482b37f939b1ed5cd47f48e0344814076bd",
      "patch": "@@ -41,7 +41,7 @@ public Collection<Job> suggestJobs(Project project, ObjectId commitId) {\n \t\t\tvar setupCache = new SetupCacheStep();\n \t\t\tsetupCache.setName(\"set up gradle cache\");\n \t\t\tsetupCache.setKey(\"gradle_@file:checksum@\");\n-\t\t\tsetupCache.setPath(\"/home/gradle/.gradle/cache\");\n+\t\t\tsetupCache.setPath(\"/home/gradle/.gradle/caches\");\n \t\t\tsetupCache.getLoadKeys().add(\"gradle\");\n \t\t\tjob.getSteps().add(setupCache);\n \t\t\t",
      "parent_sha": "c0b9bc965a6c689c22d7555db1298fa9482079a9"
    }
  },
  {
    "oid": "6d01037f8c73604d76cea8bcc161ee31f5a98c72",
    "message": "Fix issue #1067 - NPE when importing projects from YouTrack",
    "date": "2022-12-31T07:17:14Z",
    "url": "https://github.com/theonedev/onedev/commit/6d01037f8c73604d76cea8bcc161ee31f5a98c72",
    "details": {
      "sha": "f60901f5ae95500485c919456d90e6e6b64605db",
      "filename": "server-plugin/server-plugin-import-youtrack/src/main/java/io/onedev/server/plugin/imports/youtrack/ImportServer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/theonedev/onedev/blob/6d01037f8c73604d76cea8bcc161ee31f5a98c72/server-plugin%2Fserver-plugin-import-youtrack%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fimports%2Fyoutrack%2FImportServer.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/6d01037f8c73604d76cea8bcc161ee31f5a98c72/server-plugin%2Fserver-plugin-import-youtrack%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fimports%2Fyoutrack%2FImportServer.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-plugin%2Fserver-plugin-import-youtrack%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fimports%2Fyoutrack%2FImportServer.java?ref=6d01037f8c73604d76cea8bcc161ee31f5a98c72",
      "patch": "@@ -895,8 +895,12 @@ public void consume(List<JsonNode> pageData) throws InterruptedException {\n \t\t\t\t\t\t\t\t\tList<JsonNode> attachmentNodes = new ArrayList<>();\n \t\t\t\t\t\t\t\t\tfor (JsonNode attachmentNode: commentNode.get(\"attachments\"))\n \t\t\t\t\t\t\t\t\t\tattachmentNodes.add(attachmentNode);\n-\t\t\t\t\t\t\t\t\tcomment.setContent(processAttachments(issue.getUUID(), readableId, \n-\t\t\t\t\t\t\t\t\t\t\tcommentContent, attachmentNodes, tooLargeAttachments));\n+\t\t\t\t\t\t\t\t\tString processedContent = processAttachments(issue.getUUID(), readableId,\n+\t\t\t\t\t\t\t\t\t\t\tcommentContent, attachmentNodes, tooLargeAttachments);\n+\t\t\t\t\t\t\t\t\tif (processedContent != null)\n+\t\t\t\t\t\t\t\t\t\tcomment.setContent(processedContent);\n+\t\t\t\t\t\t\t\t\telse \n+\t\t\t\t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\tcomment.setDate(new Date(commentNode.get(\"created\").asLong(System.currentTimeMillis())));\n \t\t\t\t\t\t\t\tif (commentNode.hasNonNull(\"author\")) {",
      "parent_sha": "b4e637e14eaea0fa9612b3880f61f825e3616fa7"
    }
  },
  {
    "oid": "4aec6f01fa6fbfbea84651f76e51eb523f1228ed",
    "message": "Validate role editing to make sure code read privilege is assigned when\njob manage/run privilege is assigned",
    "date": "2022-01-19T08:29:32Z",
    "url": "https://github.com/theonedev/onedev/commit/4aec6f01fa6fbfbea84651f76e51eb523f1228ed",
    "details": {
      "sha": "b6f928e7669e0498761d10c30865f96f30e0cdf7",
      "filename": "server-core/src/main/java/io/onedev/server/model/Role.java",
      "status": "modified",
      "additions": 33,
      "deletions": 1,
      "changes": 34,
      "blob_url": "https://github.com/theonedev/onedev/blob/4aec6f01fa6fbfbea84651f76e51eb523f1228ed/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2FRole.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/4aec6f01fa6fbfbea84651f76e51eb523f1228ed/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2FRole.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2FRole.java?ref=4aec6f01fa6fbfbea84651f76e51eb523f1228ed",
      "patch": "@@ -14,6 +14,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n+import javax.validation.ConstraintValidatorContext;\n import javax.validation.constraints.NotNull;\n \n import org.apache.shiro.authz.Permission;\n@@ -50,6 +51,8 @@\n import io.onedev.server.security.permission.ScheduleIssues;\n import io.onedev.server.security.permission.WriteCode;\n import io.onedev.server.util.EditContext;\n+import io.onedev.server.util.validation.Validatable;\n+import io.onedev.server.util.validation.annotation.ClassValidating;\n import io.onedev.server.util.validation.annotation.RoleName;\n import io.onedev.server.web.editable.annotation.ChoiceProvider;\n import io.onedev.server.web.editable.annotation.Editable;\n@@ -63,8 +66,9 @@\n @Entity\n @Table(indexes={@Index(columnList=\"name\")})\n @Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n+@ClassValidating\n @Editable\n-public class Role extends AbstractEntity implements Permission {\n+public class Role extends AbstractEntity implements Permission, Validatable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n@@ -379,5 +383,33 @@ private Collection<Permission> getPermissions() {\n \t\t\n \t\treturn permissions;\n \t}\n+\n+\t@Override\n+\tpublic boolean isValid(ConstraintValidatorContext context) {\n+\t\tboolean isValid = true;\n+\t\tif (!isManageProject() && !isManagePullRequests() && !isManageCodeComments() && getCodePrivilege() == CodePrivilege.NONE) {\n+\t\t\tif (isManageBuilds()) {\n+\t\t\t\tisValid = false;\n+\t\t\t\tcontext.disableDefaultConstraintViolation();\n+\t\t\t\tcontext.buildConstraintViolationWithTemplate(\"Code read privilege is required to manage builds\")\n+\t\t\t\t\t\t.addPropertyNode(\"manageBuilds\").addConstraintViolation();\n+\t\t\t} else {\n+\t\t\t\tfor (JobPrivilege privilege: getJobPrivileges()) {\n+\t\t\t\t\tif (privilege.isManageJob()) {\n+\t\t\t\t\t\tisValid = false;\n+\t\t\t\t\t\tcontext.disableDefaultConstraintViolation();\n+\t\t\t\t\t\tcontext.buildConstraintViolationWithTemplate(\"Code read privilege is required to manage jobs\")\n+\t\t\t\t\t\t\t\t.addPropertyNode(\"jobPrivileges\").addConstraintViolation();\n+\t\t\t\t\t} else if (privilege.isRunJob()) {\n+\t\t\t\t\t\tisValid = false;\n+\t\t\t\t\t\tcontext.disableDefaultConstraintViolation();\n+\t\t\t\t\t\tcontext.buildConstraintViolationWithTemplate(\"Code read privilege is required to run jobs\")\n+\t\t\t\t\t\t\t\t.addPropertyNode(\"jobPrivileges\").addConstraintViolation();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn isValid;\n+\t}\n \t\n }\n\\ No newline at end of file",
      "parent_sha": "c783bd3284d212bce6ebb96f758ea892d4bb525e"
    }
  },
  {
    "oid": "7d0f9a2f07fc18d5020ab9857911515a6b65e74a",
    "message": "Minor improvement of inbox mail handling",
    "date": "2022-03-15T09:08:50Z",
    "url": "https://github.com/theonedev/onedev/commit/7d0f9a2f07fc18d5020ab9857911515a6b65e74a",
    "details": {
      "sha": "c8c78779439f172b8aa16974604c4d1c14df3f70",
      "filename": "server-core/src/main/java/io/onedev/server/notification/DefaultMailManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/theonedev/onedev/blob/7d0f9a2f07fc18d5020ab9857911515a6b65e74a/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FDefaultMailManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/7d0f9a2f07fc18d5020ab9857911515a6b65e74a/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FDefaultMailManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FDefaultMailManager.java?ref=7d0f9a2f07fc18d5020ab9857911515a6b65e74a",
      "patch": "@@ -494,6 +494,7 @@ private String stripQuotation(String content) {\n \t\t\r\n \t\tDocument document = HtmlUtils.parse(content);\r\n \t\tdocument.select(\".gmail_quote\").remove();\r\n+\t\tdocument.outputSettings().prettyPrint(false);\r\n \t\t\r\n \t\tElement quotedSenderElement = null;\r\n \t\tfor (Element element: document.getElementsContainingOwnText(quotedSender)) {\r\n@@ -899,7 +900,7 @@ private String readText(Project project, String attachmentGroup, Message message\n \t\t\tList<String> markdowns = new ArrayList<>();\r\n \t\t\tfor (Attachment attachment: attachments.nonIdentifiable)\r\n \t\t\t\tmarkdowns.add(attachment.getMarkdown());\r\n-\t\t\ttext += \"\\n\" + Joiner.on(\" &nbsp;&nbsp;&nbsp;&bull;&nbsp;&nbsp;&nbsp; \").join(markdowns);\r\n+\t\t\ttext += \"\\n\\n\" + Joiner.on(\" &nbsp;&nbsp;&nbsp;&bull;&nbsp;&nbsp;&nbsp; \").join(markdowns);\r\n \t\t}\r\n \t\treturn text;\r\n \t}\r",
      "parent_sha": "496b8e5ee481e22a59e8e2e2af8b2a265289b3b4"
    }
  },
  {
    "oid": "d0d5ea754b95d020fcfd42d95f185eb2e4e317e0",
    "message": "Improve performance of finding project by path",
    "date": "2022-02-26T12:39:07Z",
    "url": "https://github.com/theonedev/onedev/commit/d0d5ea754b95d020fcfd42d95f185eb2e4e317e0",
    "details": {
      "sha": "77286da9cfaf9bfb9db269a0736a12a9e5130054",
      "filename": "server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultProjectManager.java",
      "status": "modified",
      "additions": 63,
      "deletions": 22,
      "changes": 85,
      "blob_url": "https://github.com/theonedev/onedev/blob/d0d5ea754b95d020fcfd42d95f185eb2e4e317e0/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultProjectManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/d0d5ea754b95d020fcfd42d95f185eb2e4e317e0/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultProjectManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultProjectManager.java?ref=d0d5ea754b95d020fcfd42d95f185eb2e4e317e0",
      "patch": "@@ -12,6 +12,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReadWriteLock;\n@@ -40,7 +41,6 @@\n import org.eclipse.jgit.lib.Repository;\n import org.eclipse.jgit.lib.StoredConfig;\n import org.hibernate.Session;\n-import org.hibernate.criterion.Restrictions;\n import org.hibernate.query.Query;\n import org.quartz.ScheduleBuilder;\n import org.quartz.SimpleScheduleBuilder;\n@@ -90,7 +90,6 @@\n import io.onedev.server.persistence.annotation.Transactional;\n import io.onedev.server.persistence.dao.BaseEntityManager;\n import io.onedev.server.persistence.dao.Dao;\n-import io.onedev.server.persistence.dao.EntityCriteria;\n import io.onedev.server.search.entity.EntityQuery;\n import io.onedev.server.search.entity.EntitySort;\n import io.onedev.server.search.entity.EntitySort.Direction;\n@@ -364,23 +363,48 @@ public void delete(Project project) {\n     @Sessional\n     @Override\n     public Project findByPath(String path) {\n-    \tList<String> names = Splitter.on(\"/\").omitEmptyStrings().trimResults().splitToList(path);\n-    \tProject project = null;\n-    \tfor (String name: names) {\n-    \t\tproject = find(project, name);\n-    \t\tif (project == null)\n+\t\tcacheLock.readLock().lock();\n+\t\ttry {\n+\t\t\tLong projectId = findProjectId(path);\n+\t\t\tif (projectId != null)\n+\t\t\t\treturn load(projectId);\n+\t\t\telse\n+\t\t\t\treturn null;\n+\t\t} finally {\n+\t\t\tcacheLock.readLock().unlock();\n+\t\t}\n+    }\n+\n+    @Nullable\n+    private Long findProjectId(String path) {\n+    \tLong projectId = null;\n+    \tfor (String name: Splitter.on(\"/\").omitEmptyStrings().trimResults().split(path)) {\n+    \t\tprojectId = findProjectId(projectId, name);\n+    \t\tif (projectId == null)\n     \t\t\tbreak;\n     \t}\n-    \treturn project;\n+    \treturn projectId;\n     }\n-\n+    \n     @Sessional\n     @Override\n     public Project findByServiceDeskName(String serviceDeskName) {\n-\t\tEntityCriteria<Project> criteria = newCriteria();\n-\t\tcriteria.add(Restrictions.ilike(Project.PROP_SERVICE_DESK_NAME, serviceDeskName));\n-\t\tcriteria.setCacheable(true);\n-\t\treturn find(criteria);\n+\t\tcacheLock.readLock().lock();\n+\t\ttry {\n+\t\t\tLong projectId = null;\n+\t\t\tfor (ProjectFacade facade: cache.values()) {\n+\t\t\t\tif (facade.getServiceDeskName().equalsIgnoreCase(serviceDeskName)) {\n+\t\t\t\t\tprojectId = facade.getId();\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (projectId != null)\n+\t\t\t\treturn load(projectId);\n+\t\t\telse\n+\t\t\t\treturn null;\n+\t\t} finally {\n+\t\t\tcacheLock.readLock().unlock();\n+\t\t}\n     }\n     \n     @Sessional\n@@ -422,14 +446,22 @@ public Project initialize(String path) {\n     @Sessional\n     @Override\n     public Project find(Project parent, String name) {\n-\t\tEntityCriteria<Project> criteria = newCriteria();\n-\t\tif (parent != null)\n-\t\t\tcriteria.add(Restrictions.eq(Project.PROP_PARENT, parent));\n-\t\telse\n-\t\t\tcriteria.add(Restrictions.isNull(Project.PROP_PARENT));\n-\t\tcriteria.add(Restrictions.ilike(Project.PROP_NAME, name));\n-\t\tcriteria.setCacheable(true);\n-\t\treturn find(criteria);\n+\t\tcacheLock.readLock().lock();\n+\t\ttry {\n+\t\t\tLong projectId = null;\n+\t\t\tfor (ProjectFacade facade: cache.values()) {\n+\t\t\t\tif (facade.getName().equalsIgnoreCase(name) && Objects.equals(Project.idOf(parent), facade.getParentId())) {\n+\t\t\t\t\tprojectId = facade.getId();\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (projectId != null)\n+\t\t\t\treturn load(projectId);\n+\t\t\telse\n+\t\t\t\treturn null;\n+\t\t} finally {\n+\t\t\tcacheLock.readLock().unlock();\n+\t\t}\n     }\n     \n     @Transactional\n@@ -885,5 +917,14 @@ public void delete(Collection<Project> projects) {\n \t\tfor (Project independent: independents)\n \t\t\tdelete(independent);\n \t}\n-\t\n+    \n+\t@Nullable\n+    private Long findProjectId(@Nullable Long parentId, String name) {\n+\t\tfor (ProjectFacade facade: cache.values()) {\n+\t\t\tif (facade.getName().equalsIgnoreCase(name) && Objects.equals(parentId, facade.getParentId())) \n+\t\t\t\treturn facade.getId();\n+\t\t}\n+\t\treturn null;\n+    }\n+    \n }",
      "parent_sha": "a90d5a683917b9cbaa390d3bacfc62e16de0db9d"
    }
  },
  {
    "oid": "8c7958e54e8481ff0ba124697fdcaacafbc96ac6",
    "message": "midwork",
    "date": "2015-11-11T01:45:42Z",
    "url": "https://github.com/theonedev/onedev/commit/8c7958e54e8481ff0ba124697fdcaacafbc96ac6",
    "details": {
      "sha": "6b99114dcb2060c4313bf9c01f785236ab46596a",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/page/repository/commit/QueryAssistBehavior.java",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/theonedev/onedev/blob/8c7958e54e8481ff0ba124697fdcaacafbc96ac6/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcommit%2FQueryAssistBehavior.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/8c7958e54e8481ff0ba124697fdcaacafbc96ac6/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcommit%2FQueryAssistBehavior.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fcommit%2FQueryAssistBehavior.java?ref=8c7958e54e8481ff0ba124697fdcaacafbc96ac6",
      "patch": "@@ -113,17 +113,17 @@ protected List<InputError> getErrors(String input) {\n \t\n \tprivate static class InputInfo {\n \t\t\n-\t\tprivate String input;\n+\t\tprivate final String input;\n \t\t\n-\t\tprivate int caret;\n+\t\tprivate final int caret;\n \t\t\n-\t\tprivate List<Token> tokensBeforeCaret;\n+\t\tprivate final List<Token> tokensBeforeCaret = new ArrayList<>();\n \t\t\n-\t\tprivate String textToMatch;\n+\t\tprivate final String textToMatch;\n \t\t\n-\t\tprivate int replaceStart;\n+\t\tprivate final int replaceStart;\n \t\t\n-\t\tprivate int replaceEnd;\n+\t\tprivate final int replaceEnd;\n \t\t\n \t\tInputInfo(@Nullable String input, int caret) {\n \t\t\tif (input == null)\n@@ -186,8 +186,11 @@ private static class InputInfo {\n \t\t\t\n \t\t}\n \n-\t\tInputInfo replaceToken(String tokenText, int caretOffset) {\n-\t\t\t\n+\t\tInputInfo insertToken(String tokenText, int caretOffset) {\n+\t\t\tString inputBeforeStart = input.substring(0, replaceStart);\n+\t\t\tString inputAfterEnd = input.substring(replaceEnd);\n+\t\t\tString newInput = inputBeforeStart + tokenText + inputAfterEnd;\n+\t\t\treturn new InputInfo(newInput, replaceStart + caretOffset);\n \t\t}\n \t\t\n \t}",
      "parent_sha": "15692a74c3d4fa6b3fb9e9461967efd2d63126fe"
    }
  },
  {
    "oid": "678e4f95493306d5f282fa188351eda3c4263eee",
    "message": "Fix the bug that user permission is displayed incorrectly at project\nauthorization page",
    "date": "2017-07-14T02:43:56Z",
    "url": "https://github.com/theonedev/onedev/commit/678e4f95493306d5f282fa188351eda3c4263eee",
    "details": {
      "sha": "91bb24dc15f655312a2683d5e609faf57ed67d43",
      "filename": "web/src/main/java/com/gitplex/server/web/page/project/setting/authorization/ProjectAuthorizationsPage.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/678e4f95493306d5f282fa188351eda3c4263eee/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fauthorization%2FProjectAuthorizationsPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/678e4f95493306d5f282fa188351eda3c4263eee/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fauthorization%2FProjectAuthorizationsPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fauthorization%2FProjectAuthorizationsPage.java?ref=678e4f95493306d5f282fa188351eda3c4263eee",
      "patch": "@@ -137,7 +137,7 @@ protected Map<Long, ProjectPrivilege> load() {\n \t\t\t}\n \t\t\tif (getProject().isPublicRead()) {\n \t\t\t\tfor (UserFacade user: cacheManager.getUsers().values()) {\n-\t\t\t\t\tProjectPrivilege userPrivilege = userAuthorizations.get(user);\n+\t\t\t\t\tProjectPrivilege userPrivilege = userAuthorizations.get(user.getId());\n \t\t\t\t\tif (userPrivilege == null || ProjectPrivilege.READ.implies(userPrivilege))\n \t\t\t\t\t\tuserAuthorizations.put(user.getId(), ProjectPrivilege.READ);\n \t\t\t\t\tusersAuthorizedFromOtherSources.add(user.getId());",
      "parent_sha": "5742cdc1af9790ba812ff9b5fa81b2137ac61fa2"
    }
  },
  {
    "oid": "a91e5d49c423039ccb25f0f80bce51e620c26a45",
    "message": "Escape special html characters in issue and pull request title",
    "date": "2020-02-03T09:22:51Z",
    "url": "https://github.com/theonedev/onedev/commit/a91e5d49c423039ccb25f0f80bce51e620c26a45",
    "details": {
      "sha": "bc8df787c388728ecf1e3606063c786b708416c7",
      "filename": "server-core/src/main/java/io/onedev/server/web/util/ReferenceTransformer.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/theonedev/onedev/blob/a91e5d49c423039ccb25f0f80bce51e620c26a45/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Futil%2FReferenceTransformer.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/a91e5d49c423039ccb25f0f80bce51e620c26a45/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Futil%2FReferenceTransformer.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Futil%2FReferenceTransformer.java?ref=a91e5d49c423039ccb25f0f80bce51e620c26a45",
      "patch": "@@ -70,12 +70,10 @@ protected String toHtml(ProjectScopedNumber referenceable, String referenceText)\n \t\tif (url != null) {\n \t\t\tStringBuilder builder = new StringBuilder();\n \t\t\tfor (Node node: Jsoup.parseBodyFragment(doc.body().html()).body().child(0).childNodes()) {\n-\t\t\t\tif (node instanceof TextNode) {\n-\t\t\t\t\tTextNode textNode = (TextNode) node;\n-\t\t\t\t\tbuilder.append(\"<a href='\" + url + \"'>\" + textNode.getWholeText() + \"</a>\");\n-\t\t\t\t} else {\n+\t\t\t\tif (node instanceof TextNode) \n+\t\t\t\t\tbuilder.append(\"<a href='\" + url + \"'>\" + node.outerHtml() + \"</a>\");\n+\t\t\t\telse \n \t\t\t\t\tbuilder.append(node.outerHtml());\n-\t\t\t\t}\n \t\t\t}\n \t\t\treturn builder.toString();\n \t\t} else {",
      "parent_sha": "35ff0c12d7081a19ee6e57861069fb044367c99f"
    }
  },
  {
    "oid": "4a96e28c3e9dbeb1761345907ac7d5a1a7b433ac",
    "message": "Adjust raw blob buffer copy size",
    "date": "2017-12-05T09:36:58Z",
    "url": "https://github.com/theonedev/onedev/commit/4a96e28c3e9dbeb1761345907ac7d5a1a7b433ac",
    "details": {
      "sha": "7a49c926d1c8c476686e881a8861507aeba6eedb",
      "filename": "web/src/main/java/com/gitplex/server/web/util/resource/RawBlobResource.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/4a96e28c3e9dbeb1761345907ac7d5a1a7b433ac/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Futil%2Fresource%2FRawBlobResource.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/4a96e28c3e9dbeb1761345907ac7d5a1a7b433ac/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Futil%2Fresource%2FRawBlobResource.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Futil%2Fresource%2FRawBlobResource.java?ref=4a96e28c3e9dbeb1761345907ac7d5a1a7b433ac",
      "patch": "@@ -38,7 +38,7 @@ public class RawBlobResource extends AbstractResource {\n \n \tprivate static final String PARAM_PATH = \"path\";\n \t\n-\tprivate static final int BUFFER_SIZE = 64*1024;\n+\tprivate static final int BUFFER_SIZE = 8*1024;\n \n \t@Override\n \tprotected ResourceResponse newResourceResponse(Attributes attributes) {",
      "parent_sha": "3606ab1f809ee30ca156e46b01421dbc40d3b550"
    }
  },
  {
    "oid": "0db054ff6048f33592953b110f499d39369c2b7b",
    "message": "Fix the issue that everyone can be @ in comment input",
    "date": "2017-03-08T03:42:35Z",
    "url": "https://github.com/theonedev/onedev/commit/0db054ff6048f33592953b110f499d39369c2b7b",
    "details": {
      "sha": "4b496988e03814ba7f8d90fbc59f7026afc189eb",
      "filename": "web/src/main/java/com/gitplex/server/web/component/comment/CommentInput.java",
      "status": "modified",
      "additions": 15,
      "deletions": 8,
      "changes": 23,
      "blob_url": "https://github.com/theonedev/onedev/blob/0db054ff6048f33592953b110f499d39369c2b7b/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fcomponent%2Fcomment%2FCommentInput.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/0db054ff6048f33592953b110f499d39369c2b7b/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fcomponent%2Fcomment%2FCommentInput.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fweb%2Fcomponent%2Fcomment%2FCommentInput.java?ref=0db054ff6048f33592953b110f499d39369c2b7b",
      "patch": "@@ -1,6 +1,7 @@\n package com.gitplex.server.web.component.comment;\n \n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -27,6 +28,8 @@\n import com.gitplex.server.model.PullRequest;\n import com.gitplex.server.persistence.dao.Dao;\n import com.gitplex.server.persistence.dao.EntityCriteria;\n+import com.gitplex.server.security.SecurityUtils;\n+import com.gitplex.server.security.privilege.DepotPrivilege;\n import com.gitplex.server.util.StringUtils;\n import com.gitplex.server.web.behavior.markdown.AttachmentSupport;\n import com.gitplex.server.web.behavior.markdown.MarkdownBehavior;\n@@ -124,15 +127,19 @@ public void renderHead(Component component, IHeaderResponse response) {\n \t}\n \t\n \tprotected List<Account> queryUsers(String query, int count) {\n-\t\tEntityCriteria<Account> criteria = EntityCriteria.of(Account.class);\n-\t\tif (StringUtils.isNotBlank(query)) {\n-\t\t\tcriteria.add(Restrictions.or(\n-\t\t\t\t\tRestrictions.ilike(\"noSpaceName\", query, MatchMode.ANYWHERE), \n-\t\t\t\t\tRestrictions.ilike(\"noSpaceFullName\", query, MatchMode.ANYWHERE)));\n+\t\tList<Account> users = new ArrayList<>();\n+\t\tfor (Account user: SecurityUtils.findUsersCan(getDepot(), DepotPrivilege.READ)) {\n+\t\t\tif (users.size() < count) {\n+\t\t\t\tif (StringUtils.deleteWhitespace(user.getName()).toLowerCase().contains(query) \n+\t\t\t\t\t\t|| user.getFullName() != null && StringUtils.deleteWhitespace(user.getFullName()).toLowerCase().contains(query)) {\n+\t\t\t\t\tusers.add(user);\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n-\t\tcriteria.add(Restrictions.eq(\"organization\", false));\n-\t\tcriteria.addOrder(Order.asc(\"name\"));\n-\t\treturn GitPlex.getInstance(Dao.class).findRange(criteria, 0, count);\n+\t\tusers.sort(Comparator.comparing(Account::getName));\n+\t\treturn users;\n \t}\n \n \tprotected List<PullRequest> queryRequests(String query, int count) {",
      "parent_sha": "d1bb857b642b3727b2a70191b85c54bef2558f35"
    }
  },
  {
    "oid": "5593ce94c33c3799dcd7bcb91f11426aafc4de14",
    "message": "chore: Pass subscription info upon update check",
    "date": "2025-02-07T14:52:58Z",
    "url": "https://github.com/theonedev/onedev/commit/5593ce94c33c3799dcd7bcb91f11426aafc4de14",
    "details": {
      "sha": "737b737a8a772f7250028a7a2ee098e0a357e706",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/layout/LayoutPage.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/theonedev/onedev/blob/5593ce94c33c3799dcd7bcb91f11426aafc4de14/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Flayout%2FLayoutPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/5593ce94c33c3799dcd7bcb91f11426aafc4de14/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Flayout%2FLayoutPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Flayout%2FLayoutPage.java?ref=5593ce94c33c3799dcd7bcb91f11426aafc4de14",
      "patch": "@@ -484,7 +484,8 @@ protected void onConfigure() {\n \t\t\tthrow new RuntimeException(e);\n \t\t}\n \n-\t\tvar checkUpdateUrl = \"https://onedev.io/check-update/\" + commitHash;\n+\t\tvar checkUpdateUrl = \"https://onedev.io/check-update/\" + commitHash + \"-\"\n+\t\t\t\t+ (WicketUtils.isSubscriptionActive()? \"1\": \"0\");\n \t\tsidebar.add(new AjaxLink<Void>(\"checkUpdate\") {\n \n \t\t\t@Override",
      "parent_sha": "bf8f85870f851087c1ab3bf74f6edbfba0cf989c"
    }
  },
  {
    "oid": "0f82a18e772c554112510f7c84a5cf960e56fca4",
    "message": "Check if lucene index is too old when OneDev starts up",
    "date": "2018-12-06T06:34:53Z",
    "url": "https://github.com/theonedev/onedev/commit/0f82a18e772c554112510f7c84a5cf960e56fca4",
    "details": {
      "sha": "e5a438bee0a793ece462f97401cd00185bcb8296",
      "filename": "core/src/main/java/io/onedev/server/search/code/DefaultIndexManager.java",
      "status": "modified",
      "additions": 36,
      "deletions": 29,
      "changes": 65,
      "blob_url": "https://github.com/theonedev/onedev/blob/0f82a18e772c554112510f7c84a5cf960e56fca4/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fcode%2FDefaultIndexManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/0f82a18e772c554112510f7c84a5cf960e56fca4/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fcode%2FDefaultIndexManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fcode%2FDefaultIndexManager.java?ref=0f82a18e772c554112510f7c84a5cf960e56fca4",
      "patch": "@@ -37,6 +37,7 @@\n import org.apache.lucene.document.StringField;\n import org.apache.lucene.document.TextField;\n import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexFormatTooOldException;\n import org.apache.lucene.index.IndexReader;\n import org.apache.lucene.index.IndexWriter;\n import org.apache.lucene.index.IndexWriterConfig;\n@@ -71,6 +72,7 @@\n import io.onedev.launcher.loader.Listen;\n import io.onedev.launcher.loader.ListenerRegistry;\n import io.onedev.server.event.RefUpdated;\n+import io.onedev.server.event.system.SystemStarted;\n import io.onedev.server.git.GitUtils;\n import io.onedev.server.manager.BatchWorkManager;\n import io.onedev.server.manager.ProjectManager;\n@@ -82,6 +84,7 @@\n import io.onedev.server.util.ContentDetector;\n import io.onedev.server.util.IndexResult;\n import io.onedev.utils.ExceptionUtils;\n+import io.onedev.utils.FileUtils;\n import io.onedev.utils.StringUtils;\n import io.onedev.utils.concurrent.Prioritized;\n \n@@ -291,12 +294,6 @@ private void indexBlob(IndexWriter writer, Repository repository,\n \t\twriter.addDocument(document);\n \t}\n \t\n-\tprivate IndexWriterConfig newIndexWriterConfig() {\n-\t\tIndexWriterConfig config = new IndexWriterConfig(new NGramAnalyzer(NGRAM_SIZE, NGRAM_SIZE));\n-\t\tconfig.setOpenMode(OpenMode.CREATE_OR_APPEND);\n-\t\treturn config;\n-\t}\n-\t\n \tprivate BatchWorker getBatchWorker(Long projectId, Long forkRootId) {\n \t\treturn new BatchWorker(\"project-\" + forkRootId + \"-indexBlob\", 1) {\n \n@@ -332,31 +329,21 @@ private IndexResult doIndex(Project project, ObjectId commit) {\n \t\t\tif (DirectoryReader.indexExists(directory)) {\n \t\t\t\ttry (IndexReader reader = DirectoryReader.open(directory)) {\n \t\t\t\t\tIndexSearcher searcher = new IndexSearcher(reader);\n-\t\t\t\t\tif (getIndexVersion().equals(getCommitIndexVersion(searcher, commit))) {\n+\t\t\t\t\tif (getIndexVersion().equals(getCommitIndexVersion(searcher, commit)))\n \t\t\t\t\t\treturn new IndexResult(0, 0);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry (IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig())) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tlogger.debug(\"Indexing commit (project: {}, commit: {})\", project.getName(), commit.getName());\n-\t\t\t\t\t\t\t\tindexResult = index(project.getRepository(), commit, writer, searcher);\n-\t\t\t\t\t\t\t\twriter.commit();\n-\t\t\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\t\twriter.rollback();\n-\t\t\t\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\ttry (IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig())) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tlogger.debug(\"Indexing commit (project: {}, commit: {})\", project.getName(), commit.getName());\n-\t\t\t\t\t\tindexResult = index(project.getRepository(), commit, writer, null);\n-\t\t\t\t\t\twriter.commit();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\twriter.rollback();\n-\t\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n-\t\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\tIndexWriterConfig writerConfig = new IndexWriterConfig(new NGramAnalyzer(NGRAM_SIZE, NGRAM_SIZE));\n+\t\t\twriterConfig.setOpenMode(OpenMode.CREATE_OR_APPEND);\n+\t\t\ttry (IndexWriter writer = new IndexWriter(directory, writerConfig)) {\n+\t\t\t\ttry {\n+\t\t\t\t\tlogger.debug(\"Indexing commit (project: {}, commit: {})\", project.getName(), commit.getName());\n+\t\t\t\t\tindexResult = index(project.getRepository(), commit, writer, null);\n+\t\t\t\t\twriter.commit();\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\twriter.rollback();\n+\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (IOException e) {\n@@ -409,6 +396,26 @@ public void on(RefUpdated event) {\n \t\t}\n \t}\n \t\n+\t@Sessional\n+\t@Listen\n+\tpublic void on(SystemStarted event) {\n+\t\tfor (Project project: projectManager.query()) {\n+\t\t\tFile indexDir = storageManager.getProjectIndexDir(project.getId());\n+\t\t\tif (indexDir.exists()) {\n+\t\t\t\ttry (Directory directory = FSDirectory.open(indexDir.toPath())) {\n+\t\t\t\t\tif (DirectoryReader.indexExists(directory)) {\n+\t\t\t\t\t\ttry (IndexReader reader = DirectoryReader.open(directory)) {\n+\t\t\t\t\t\t} catch (IndexFormatTooOldException e) {\n+\t\t\t\t\t\t\tFileUtils.cleanDir(indexDir);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} \n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n \t@Sessional\n \t@Override\n \tpublic void indexAsync(Project project, ObjectId commit) {",
      "parent_sha": "bba4c5ac7d776cb78e5c4b502020f7802739e47d"
    }
  },
  {
    "oid": "6e1f7d15730340c1e5a5099ec57fcd6ed4ce17c8",
    "message": "chore: correct updated issues between 9.7.0 and 10.0.0",
    "date": "2024-01-23T14:07:41Z",
    "url": "https://github.com/theonedev/onedev/commit/6e1f7d15730340c1e5a5099ec57fcd6ed4ce17c8",
    "details": {
      "sha": "f85cbfba0d83e96f0f226fa4f3f6c89be5209ac4",
      "filename": "server-core/src/main/java/io/onedev/server/search/entity/issue/FixedBetweenCriteria.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/theonedev/onedev/blob/6e1f7d15730340c1e5a5099ec57fcd6ed4ce17c8/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fentity%2Fissue%2FFixedBetweenCriteria.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/6e1f7d15730340c1e5a5099ec57fcd6ed4ce17c8/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fentity%2Fissue%2FFixedBetweenCriteria.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fentity%2Fissue%2FFixedBetweenCriteria.java?ref=6e1f7d15730340c1e5a5099ec57fcd6ed4ce17c8",
      "patch": "@@ -90,7 +90,14 @@ public Predicate getPredicate(CriteriaQuery<?> query, From<Issue, Issue> from, C\n \t\t\n \t\tObjectId mergeBaseId = getGitService().getMergeBase(project, firstCommitId, project, secondCommitId);\n \t\tif (mergeBaseId != null) {\n-\t\t\tCollection<ObjectId> startCommitIds = Lists.newArrayList(secondCommitId, firstCommitId);\n+\t\t\tCollection<ObjectId> startCommitIds;\n+\t\t\t// Check this special commit to avoid displaying a lot of resolved issues \n+\t\t\t// when check update between <=9.7.0 and >=10.0.0 for OneDev. Can safely \n+\t\t\t// remove this if fewer sites are using <=9.7.0\n+\t\t\tif (mergeBaseId.name().equals(\"3d1c4d2b6de888ba0f42467f7a36418ade8ca688\"))  \n+\t\t\t\tstartCommitIds = Lists.newArrayList(secondCommitId);\n+\t\t\telse\t\t\t\t\n+\t\t\t\tstartCommitIds = Lists.newArrayList(secondCommitId, firstCommitId);\n \t\t\tCollection<ObjectId> uninterestingCommitIds = Lists.newArrayList(mergeBaseId);\n \t\t\tfor (RevCommit commit: getGitService().getReachableCommits(project, startCommitIds, uninterestingCommitIds))\n \t\t\t\tfixedIssueIds.addAll(project.parseFixedIssueIds(commit.getFullMessage()));",
      "parent_sha": "dc99654b22dedc365dab15fa887f352dca61afe1"
    }
  },
  {
    "oid": "95d849e5f4901584434fd87bff4e159385567107",
    "message": "fix issue #284 - Couldn't create new issue",
    "date": "2021-05-19T00:17:22Z",
    "url": "https://github.com/theonedev/onedev/commit/95d849e5f4901584434fd87bff4e159385567107",
    "details": {
      "sha": "ee2e1f30a62855ea2adeee80bda0b5da6e870cb5",
      "filename": "server-core/src/main/java/io/onedev/server/security/permission/EditIssueField.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/theonedev/onedev/blob/95d849e5f4901584434fd87bff4e159385567107/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsecurity%2Fpermission%2FEditIssueField.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/95d849e5f4901584434fd87bff4e159385567107/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsecurity%2Fpermission%2FEditIssueField.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsecurity%2Fpermission%2FEditIssueField.java?ref=95d849e5f4901584434fd87bff4e159385567107",
      "patch": "@@ -2,21 +2,28 @@\n \n import java.util.Collection;\n \n+import javax.annotation.Nullable;\n+\n import org.apache.shiro.authz.Permission;\n \n public class EditIssueField implements Permission {\n \n \tprivate final Collection<String> fields;\n \t\n-\tpublic EditIssueField(Collection<String> fields) {\n+\tpublic EditIssueField(@Nullable Collection<String> fields) {\n \t\tthis.fields = fields;\n \t}\n \t\n \t@Override\n \tpublic boolean implies(Permission p) {\n \t\tif (p instanceof EditIssueField) {\n \t\t\tEditIssueField editIssueField = (EditIssueField) p;\n-\t\t\treturn fields.containsAll(editIssueField.fields);\n+\t\t\tif (fields == null)\n+\t\t\t\treturn true;\n+\t\t\telse if (editIssueField.fields == null)\n+\t\t\t\treturn false;\n+\t\t\telse\n+\t\t\t\treturn fields.containsAll(editIssueField.fields);\n \t\t} else {\n \t\t\treturn new AccessProject().implies(p);\n \t\t}",
      "parent_sha": "17379d51fd037b74e2ee07547355f3d1036bffca"
    }
  },
  {
    "oid": "dd134e7b3c78af48f300e4cc1fe10f42a7003aeb",
    "message": "chore: Branding setting refactoring",
    "date": "2024-07-23T11:32:15Z",
    "url": "https://github.com/theonedev/onedev/commit/dd134e7b3c78af48f300e4cc1fe10f42a7003aeb",
    "details": {
      "sha": "7627fd81a27ed9d3c97dae3194a0f8f06d04c1fe",
      "filename": "server-core/src/main/java/io/onedev/server/model/support/administration/BrandingSetting.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/dd134e7b3c78af48f300e4cc1fe10f42a7003aeb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2FBrandingSetting.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/dd134e7b3c78af48f300e4cc1fe10f42a7003aeb/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2FBrandingSetting.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2FBrandingSetting.java?ref=dd134e7b3c78af48f300e4cc1fe10f42a7003aeb",
      "patch": "@@ -31,7 +31,7 @@ public void setUrl(String url) {\n \t}\n \t\n \tpublic static boolean isOEM(String brandName) {\n-\t\treturn \"\".equals(brandName);\n+\t\treturn \"GitOn\".equals(brandName);\n \t}\n \t\n \tpublic boolean isOEM() {",
      "parent_sha": "74e539f104da03a5e7b9e6526c4ddf1325e14361"
    }
  },
  {
    "oid": "9da9a5d8e9dd264e788209c40b56dab6dbc37f65",
    "message": "Use poll instead of idle to check incoming email for reliability reason",
    "date": "2022-04-14T14:22:52Z",
    "url": "https://github.com/theonedev/onedev/commit/9da9a5d8e9dd264e788209c40b56dab6dbc37f65",
    "details": {
      "sha": "419d571967e92325863926d8a0ea812ddf40931e",
      "filename": "server-core/src/main/java/io/onedev/server/notification/DefaultMailManager.java",
      "status": "modified",
      "additions": 6,
      "deletions": 24,
      "changes": 30,
      "blob_url": "https://github.com/theonedev/onedev/blob/9da9a5d8e9dd264e788209c40b56dab6dbc37f65/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FDefaultMailManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/9da9a5d8e9dd264e788209c40b56dab6dbc37f65/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FDefaultMailManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FDefaultMailManager.java?ref=9da9a5d8e9dd264e788209c40b56dab6dbc37f65",
      "patch": "@@ -101,8 +101,8 @@\n import io.onedev.server.security.permission.AccessProject;\r\n import io.onedev.server.security.permission.ProjectPermission;\r\n import io.onedev.server.security.permission.ReadCode;\r\n-import io.onedev.server.util.ParsedEmailAddress;\r\n import io.onedev.server.util.HtmlUtils;\r\n+import io.onedev.server.util.ParsedEmailAddress;\r\n import io.onedev.server.util.validation.UserNameValidator;\r\n \r\n @Singleton\r\n@@ -815,7 +815,6 @@ public void run() {\n \t\t\t\tSession session = Session.getInstance(properties);\r\n \t\t\t\tStore store = null;\r\n \t\t\t\tIMAPFolder inbox = null;\r\n-\t\t\t\tFuture<?> future = null;\r\n \t\t\t\ttry {\r\n \t\t\t\t\tstore = session.getStore(\"imap\");\r\n \t\t\t\t\tstore.connect(receiveMailSetting.getImapUser(), receiveMailSetting.getImapPassword());\r\n@@ -848,31 +847,14 @@ public void run() {\n \t\t\t\t\t\tlogger.trace(\"Inbox uid validity changed (uid reset to: {})\", lastPosition.getUid());\r\n \t\t\t\t\t}\r\n \r\n-\t\t\t\t\tIMAPFolder inboxCopy = inbox;\r\n-\t\t\t\t\tfuture = executorService.submit(new Runnable() {\r\n-\r\n-\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\tpublic void run() {\r\n-\t\t\t\t\t\t\twhile (!Thread.interrupted()) { \r\n-\t\t\t\t\t\t\t\ttry {\r\n-\t\t\t\t\t\t\t\t\tinboxCopy.idle(true);\r\n-\t\t\t\t\t\t\t\t\tif (inboxCopy.isOpen()) \r\n-\t\t\t\t\t\t\t\t\t\tprocessMessages(inboxCopy, messageNumber);\r\n-\t\t\t\t\t\t\t\t\telse \r\n-\t\t\t\t\t\t\t\t\t\tthrow new FolderClosedException(inboxCopy, \"Inbox closed for unknown reason\");\r\n-\t\t\t\t\t\t\t\t} catch (MessagingException e) {\r\n-\t\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t\t\t\t\t\t} \r\n-\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\r\n-\t\t\t\t\t});\r\n-\t\t\t\t\tfuture.get();\r\n+\t\t\t\t\twhile (true) { \r\n+\t\t\t\t\t\tThread.sleep(5000);\r\n+\t\t\t\t\t\tprocessMessages(inbox, messageNumber);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\t\r\n \t\t\t\t} catch (Exception e) {\r\n \t\t\t\t\tthrow ExceptionUtils.unchecked(e);\r\n \t\t\t\t} finally {\r\n-\t\t\t\t\tif (future != null)\r\n-\t\t\t\t\t\tfuture.cancel(true);\r\n \t\t\t\t\tif (inbox != null && inbox.isOpen()) {\r\n \t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\tinbox.close(false);\r",
      "parent_sha": "d03e197c3db581a4955dd030de6443efef41ac9d"
    }
  },
  {
    "oid": "a7e3931378c0fc6db520137ea9a77f937bf007be",
    "message": "chore: Show terminal link",
    "date": "2024-04-19T01:00:37Z",
    "url": "https://github.com/theonedev/onedev/commit/a7e3931378c0fc6db520137ea9a77f937bf007be",
    "details": {
      "sha": "758f15ab8782e3efc10749f46718d033fcd85b8a",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/builds/detail/BuildDetailPage.java",
      "status": "modified",
      "additions": 21,
      "deletions": 13,
      "changes": 34,
      "blob_url": "https://github.com/theonedev/onedev/blob/a7e3931378c0fc6db520137ea9a77f937bf007be/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fbuilds%2Fdetail%2FBuildDetailPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/a7e3931378c0fc6db520137ea9a77f937bf007be/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fbuilds%2Fdetail%2FBuildDetailPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fbuilds%2Fdetail%2FBuildDetailPage.java?ref=a7e3931378c0fc6db520137ea9a77f937bf007be",
      "patch": "@@ -37,6 +37,7 @@\n import io.onedev.server.web.component.link.DropdownLink;\n import io.onedev.server.web.component.link.ViewStateAwarePageLink;\n import io.onedev.server.web.component.markdown.MarkdownViewer;\n+import io.onedev.server.web.component.modal.message.MessageModal;\n import io.onedev.server.web.component.sideinfo.SideInfoLink;\n import io.onedev.server.web.component.sideinfo.SideInfoPanel;\n import io.onedev.server.web.component.tabbable.PageTabHead;\n@@ -53,7 +54,10 @@\n import io.onedev.server.web.page.project.builds.detail.pack.BuildPacksPage;\n import io.onedev.server.web.page.project.builds.detail.pipeline.BuildPipelinePage;\n import io.onedev.server.web.page.project.dashboard.ProjectDashboardPage;\n-import io.onedev.server.web.util.*;\n+import io.onedev.server.web.util.BuildAware;\n+import io.onedev.server.web.util.ConfirmClickModifier;\n+import io.onedev.server.web.util.Cursor;\n+import io.onedev.server.web.util.CursorSupport;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n@@ -321,24 +325,28 @@ private TerminalManager getTerminalManager() {\n \n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n-\t\t\t\t\t\ttarget.appendJavaScript(String.format(\"onedev.server.buildDetail.openTerminal('%s');\",\n-\t\t\t\t\t\t\t\tgetTerminalManager().getTerminalUrl(getBuild())));\n+\t\t\t\t\t\tif (isSubscriptionActive()) {\n+\t\t\t\t\t\t\ttarget.appendJavaScript(String.format(\"onedev.server.buildDetail.openTerminal('%s');\",\n+\t\t\t\t\t\t\t\t\tgetTerminalManager().getTerminalUrl(getBuild())));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnew MessageModal(target) {\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tprotected Component newMessageContent(String componentId) {\n+\t\t\t\t\t\t\t\t\treturn new Label(componentId, \"Web shell access to running job \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"is an enterprise feature. <a href='https://onedev.io/pricing' target='_blank'>Try free</a> for 30 days\").setEscapeModelStrings(false);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t@Override\n \t\t\t\t\tprotected void onConfigure() {\n \t\t\t\t\t\tsuper.onConfigure();\n \n-\t\t\t\t\t\tif (WicketUtils.isSubscriptionActive()) {\n-\t\t\t\t\t\t\tJobManager jobManager = OneDev.getInstance(JobManager.class);\n-\t\t\t\t\t\t\tJobContext jobContext = jobManager.getJobContext(getBuild().getId());\n-\t\t\t\t\t\t\tif (jobContext!= null) \n-\t\t\t\t\t\t\t\tsetVisible(SecurityUtils.canOpenTerminal(getBuild()));\n-\t\t\t\t\t\t\telse \n-\t\t\t\t\t\t\t\tsetVisible(false);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tsetVisible(false);\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tJobManager jobManager = OneDev.getInstance(JobManager.class);\n+\t\t\t\t\t\tJobContext jobContext = jobManager.getJobContext(getBuild().getId());\n+\t\t\t\t\t\tsetVisible(jobContext!= null && SecurityUtils.canOpenTerminal(getBuild()));\n \t\t\t\t\t}\n \n \t\t\t\t}.setOutputMarkupId(true));",
      "parent_sha": "a6b9f7161ae4c73c213879112811f6d6f47e67bd"
    }
  },
  {
    "oid": "af2ec118956bd23dbc82d2f5ff6c0778112c455e",
    "message": "Remove child creator role",
    "date": "2022-04-21T06:53:46Z",
    "url": "https://github.com/theonedev/onedev/commit/af2ec118956bd23dbc82d2f5ff6c0778112c455e",
    "details": {
      "sha": "33ab1d50cb6105398d0aa8df4c8dbb4f871f7bde",
      "filename": "server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultRoleManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 18,
      "changes": 19,
      "blob_url": "https://github.com/theonedev/onedev/blob/af2ec118956bd23dbc82d2f5ff6c0778112c455e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultRoleManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/af2ec118956bd23dbc82d2f5ff6c0778112c455e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultRoleManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultRoleManager.java?ref=af2ec118956bd23dbc82d2f5ff6c0778112c455e",
      "patch": "@@ -108,32 +108,15 @@ public Role find(String name) {\n \t\n \t@Transactional\n \tpublic void setupDefaults() {\n-\t\tRole childCreator = new Role();\n-\t\tchildCreator.setName(\"Child Creator\");\n-\t\tchildCreator.setCreateChildren(true);\n-\t\tchildCreator.setCodePrivilege(CodePrivilege.READ);\n-\n \t\tboolean hasAssigneesField = settingManager.getIssueSetting().getFieldSpec(\"Assignees\") != null;\n \t\t\n-\t\tif (hasAssigneesField) {\n-\t\t\tExcludeIssueFields allfieldsExcept = new ExcludeIssueFields();\n-\t\t\tallfieldsExcept.getExcludeFields().add(\"Assignees\");\n-\t\t\tchildCreator.setEditableIssueFields(allfieldsExcept);\n-\t\t}\n-\t\t\n-\t\tJobPrivilege jobPrivilege = new JobPrivilege();\n-\t\tjobPrivilege.setJobNames(\"*\");\n-\t\tchildCreator.getJobPrivileges().add(jobPrivilege);\n-\t\t\n-\t\tsave(childCreator, new ArrayList<>(), null);\n-\t\t\n \t\tRole codeWriter = new Role();\n \t\tcodeWriter.setName(\"Code Writer\");\n \t\tcodeWriter.setCodePrivilege(CodePrivilege.WRITE);\n \t\tcodeWriter.setScheduleIssues(true);\n \t\tcodeWriter.setEditableIssueFields(new AllIssueFields());\n \t\t\n-\t\tjobPrivilege = new JobPrivilege();\n+\t\tJobPrivilege jobPrivilege = new JobPrivilege();\n \t\tjobPrivilege.setJobNames(\"*\");\n \t\tjobPrivilege.setRunJob(true);\n \t\tcodeWriter.getJobPrivileges().add(jobPrivilege);",
      "parent_sha": "fdbf29e14d54208bf0612cfdcde87a4a8c2dda8e"
    }
  },
  {
    "oid": "b12e6ae2950fd236d28eb4981b9f9afa68fac28f",
    "message": "Fix issue #1260 - Fuzzy query crashes when switch to a different page in returned result",
    "date": "2023-03-09T05:26:58Z",
    "url": "https://github.com/theonedev/onedev/commit/b12e6ae2950fd236d28eb4981b9f9afa68fac28f",
    "details": {
      "sha": "02842079ce45856a5ab00b52c4f588ae55566c5c",
      "filename": "server-core/src/main/java/io/onedev/server/search/entitytext/ProjectTextManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 11,
      "changes": 15,
      "blob_url": "https://github.com/theonedev/onedev/blob/b12e6ae2950fd236d28eb4981b9f9afa68fac28f/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fentitytext%2FProjectTextManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/b12e6ae2950fd236d28eb4981b9f9afa68fac28f/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fentitytext%2FProjectTextManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fsearch%2Fentitytext%2FProjectTextManager.java?ref=b12e6ae2950fd236d28eb4981b9f9afa68fac28f",
      "patch": "@@ -1,6 +1,5 @@\n package io.onedev.server.search.entitytext;\n \n-import edu.emory.mathcs.backport.java.util.Collections;\n import io.onedev.commons.utils.ExceptionUtils;\n import io.onedev.commons.utils.FileUtils;\n import io.onedev.commons.utils.WordUtils;\n@@ -451,16 +450,10 @@ public Map<Long, Float> call() throws Exception {\n \t\t}\n \t\t\n \t\tList<Long> entityIds = new ArrayList<>(entityScores.keySet());\n-\t\tCollections.sort(entityIds, new Comparator<>() {\n-\n-\t\t\t@Override\n-\t\t\tpublic int compare(Object o1, Object o2) {\n-\t\t\t\tif (entityScores.get(o1) < entityScores.get(o2))\n-\t\t\t\t\treturn 1;\n-\t\t\t\telse\n-\t\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t\t\n+\t\tCollections.sort(entityIds, (o1, o2) -> {\n+\t\t\tFloat score1 = entityScores.get(o1);\n+\t\t\tFloat score2 = entityScores.get(o2);\n+\t\t\treturn Float.compare(score1, score2) * -1;\n \t\t});\n \t\t\n \t\tif (firstResult < entityIds.size()) {",
      "parent_sha": "4a8e1274933d74306d7659ebe706bc375a128e4f"
    }
  },
  {
    "oid": "01e9a624cdf51dc8cf1de35acb24be1a43e9c2e8",
    "message": "fix: cannot view builds page (#1387)",
    "date": "2023-06-02T04:53:58Z",
    "url": "https://github.com/theonedev/onedev/commit/01e9a624cdf51dc8cf1de35acb24be1a43e9c2e8",
    "details": {
      "sha": "9a9d0f156f738ffc08a6e3ba26a15ddb55957a8b",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/build/list/BuildListPanel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/01e9a624cdf51dc8cf1de35acb24be1a43e9c2e8/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fbuild%2Flist%2FBuildListPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/01e9a624cdf51dc8cf1de35acb24be1a43e9c2e8/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fbuild%2Flist%2FBuildListPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fbuild%2Flist%2FBuildListPanel.java?ref=01e9a624cdf51dc8cf1de35acb24be1a43e9c2e8",
      "patch": "@@ -1129,7 +1129,7 @@ public void populateItem(Item<ICellPopulator<Build>> cellItem, String componentI\n \t\t\t\t\t\t} else if (build.getTag() != null) {\n \t\t\t\t\t\t\tFragment fragment = new Fragment(componentId, \"linkFrag\", BuildListPanel.this);\n \t\t\t\t\t\t\tvar revision = build.getTag();\n-\t\t\t\t\t\t\tif (getProject().getBranchRef(revision) != null)\n+\t\t\t\t\t\t\tif (build.getProject().getBranchRef(revision) != null)\n \t\t\t\t\t\t\t\trevision = GitUtils.tag2ref(revision);\n \t\t\t\t\t\t\tPageParameters params = ProjectBlobPage.paramsOf(build.getProject(),\n \t\t\t\t\t\t\t\t\tnew BlobIdent(revision, null, FileMode.TREE.getBits()));",
      "parent_sha": "8d7349b87de3e9128318b970e632b4f7897e82b5"
    }
  },
  {
    "oid": "0c2495514de2c5402a0fe920d79578e1fbaf5c76",
    "message": "Prefix build number with \"#\" for pure number build versions",
    "date": "2018-09-25T02:13:27Z",
    "url": "https://github.com/theonedev/onedev/commit/0c2495514de2c5402a0fe920d79578e1fbaf5c76",
    "details": {
      "sha": "4a324da7c299edc5725dfcfe2be650413ad31ac9",
      "filename": "core/src/main/java/io/onedev/server/rest/github/CommitStatusResource.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/theonedev/onedev/blob/0c2495514de2c5402a0fe920d79578e1fbaf5c76/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Frest%2Fgithub%2FCommitStatusResource.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/0c2495514de2c5402a0fe920d79578e1fbaf5c76/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Frest%2Fgithub%2FCommitStatusResource.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Frest%2Fgithub%2FCommitStatusResource.java?ref=0c2495514de2c5402a0fe920d79578e1fbaf5c76",
      "patch": "@@ -18,6 +18,7 @@\n import javax.ws.rs.core.UriBuilder;\n import javax.ws.rs.core.UriInfo;\n \n+import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.shiro.authz.UnauthorizedException;\n import org.eclipse.jgit.lib.ObjectId;\n \n@@ -94,7 +95,11 @@ public Response save(@PathParam(\"projectName\") String projectName, @PathParam(\"c\n     \t\tbuild.setConfiguration(configuration);\n         \tbuild.setCommitHash(commit.name());\n     \t}\n-    \tbuild.setVersion(StringUtils.substringBefore(commitStatus.get(\"description\"), \":\"));\n+    \tString version = StringUtils.substringBefore(commitStatus.get(\"description\"), \":\");\n+    \tif (NumberUtils.isDigits(version))\n+    \t\tversion = \"#\" + version;\n+    \tbuild.setVersion(version);\n+    \t\n     \tbuild.setStatus(Build.Status.valueOf(status));\n     \tbuild.setDate(new Date());\n     \tbuild.setUrl(commitStatus.get(\"target_url\"));",
      "parent_sha": "b62bd18f2193bf8bd518713e6ead8e02c62f8d3f"
    }
  },
  {
    "oid": "94328e2a619ce00360d88cc24730bf50fa1ce74b",
    "message": "Fix issue #683 - Login with remember me ticked result in impersonation",
    "date": "2022-04-16T02:38:45Z",
    "url": "https://github.com/theonedev/onedev/commit/94328e2a619ce00360d88cc24730bf50fa1ce74b",
    "details": {
      "sha": "57daf3c6c4f374645b61223a9dfec17de913f938",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/simple/security/LoginPage.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/theonedev/onedev/blob/94328e2a619ce00360d88cc24730bf50fa1ce74b/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fsimple%2Fsecurity%2FLoginPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/94328e2a619ce00360d88cc24730bf50fa1ce74b/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fsimple%2Fsecurity%2FLoginPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fsimple%2Fsecurity%2FLoginPage.java?ref=94328e2a619ce00360d88cc24730bf50fa1ce74b",
      "patch": "@@ -209,10 +209,13 @@ private UserManager getUserManager() {\n \t}\n \n \tprivate void afterLogin(User user) {\n-\t\tSecurityUtils.getSubject().runAs(user.getPrincipals());\n \t\tRememberMeManager rememberMeManager = OneDev.getInstance(RememberMeManager.class);\n-\t\tAuthenticationToken token = new UsernamePasswordToken(userName, password, rememberMe);\n-\t\trememberMeManager.onSuccessfulLogin(SecurityUtils.getSubject(), token, user);\n+\t\tif (rememberMe) {\n+\t\t\tAuthenticationToken token = new UsernamePasswordToken(userName, password, rememberMe);\n+\t\t\trememberMeManager.onSuccessfulLogin(SecurityUtils.getSubject(), token, user);\n+\t\t} else {\n+\t\t\tSecurityUtils.getSubject().runAs(user.getPrincipals());\n+\t\t}\n \t\t\n \t\tcontinueToOriginalDestination();\n \t\tthrow new RestartResponseException(getApplication().getHomePage());",
      "parent_sha": "7d954cafb8aeab292d017a50e0cffd45b764bff3"
    }
  },
  {
    "oid": "891c386d88ff64dc7118d6865a82543ba2deef49",
    "message": "midwork",
    "date": "2016-03-06T02:57:08Z",
    "url": "https://github.com/theonedev/onedev/commit/891c386d88ff64dc7118d6865a82543ba2deef49",
    "details": {
      "sha": "b9edb65874130adcb1b6ce93b114112407829f17",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/page/depot/compare/RevisionComparePage.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/theonedev/onedev/blob/891c386d88ff64dc7118d6865a82543ba2deef49/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Fdepot%2Fcompare%2FRevisionComparePage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/891c386d88ff64dc7118d6865a82543ba2deef49/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Fdepot%2Fcompare%2FRevisionComparePage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Fdepot%2Fcompare%2FRevisionComparePage.java?ref=891c386d88ff64dc7118d6865a82543ba2deef49",
      "patch": "@@ -50,7 +50,6 @@\n import com.pmease.gitplex.web.component.revisionpicker.AffinalRevisionPicker;\r\n import com.pmease.gitplex.web.page.depot.NoCommitsPage;\r\n import com.pmease.gitplex.web.page.depot.DepotPage;\r\n-import com.pmease.gitplex.web.page.depot.branches.DepotBranchesPage;\r\n import com.pmease.gitplex.web.page.depot.pullrequest.newrequest.NewRequestPage;\r\n import com.pmease.gitplex.web.page.depot.pullrequest.requestdetail.RequestDetailPage;\r\n import com.pmease.gitplex.web.page.depot.pullrequest.requestdetail.overview.RequestOverviewPage;\r\n@@ -509,7 +508,7 @@ protected void onDetach() {\n \r\n \t@Override\r\n \tprotected void onSelect(AjaxRequestTarget target, Depot depot) {\r\n-\t\tsetResponsePage(DepotBranchesPage.class, paramsOf(depot));\r\n+\t\tsetResponsePage(RevisionComparePage.class, paramsOf(depot));\r\n \t}\r\n \r\n }\r",
      "parent_sha": "4f1ee1e53e7c53240407a9dc760095fd6ee85e37"
    }
  },
  {
    "oid": "b2b9c114e4453798dadfcb05f714dea3239b526c",
    "message": "chore: Minor ui fix",
    "date": "2024-12-22T13:05:29Z",
    "url": "https://github.com/theonedev/onedev/commit/b2b9c114e4453798dadfcb05f714dea3239b526c",
    "details": {
      "sha": "75a0ed5daa2731c81980e27730b03a907db08ec0",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/setting/build/JobSecretsPage.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/theonedev/onedev/blob/b2b9c114e4453798dadfcb05f714dea3239b526c/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fbuild%2FJobSecretsPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/b2b9c114e4453798dadfcb05f714dea3239b526c/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fbuild%2FJobSecretsPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fbuild%2FJobSecretsPage.java?ref=b2b9c114e4453798dadfcb05f714dea3239b526c",
      "patch": "@@ -59,8 +59,9 @@ protected void onInitialize() {\n \t\t\t\t\t\t\"Define job secrets to be used in build spec. Secrets with <b>same name</b> \" +\n \t\t\t\t\t\t\"can be defined. For a particular name, the first \" +\n \t\t\t\t\t\t\"authorized secret with that name will be used (search in current \" +\n-\t\t\t\t\t\t\"project first, then search in parent projects). Note that secret value \" +\n-\t\t\t\t\t\t\"less than <b>%d</b> characters will not be masked in build log\", \n+\t\t\t\t\t\t\"project first, then search in parent projects). Note that secret \" +\n+\t\t\t\t\t\t\"value containing line breaks or less than <b>%d</b> characters will \" +\n+\t\t\t\t\t\t\"not be masked in build log\",\n \t\t\t\tSpriteImage.getVersionedHref(\"bulb\"), SecretInput.MASK.length());\n \t\tadd(new Label(\"secretsNote\", note).setEscapeModelStrings(false));\n ",
      "parent_sha": "0b538d834a5bf15c074a222a28c3db77f84da146"
    }
  },
  {
    "oid": "7fc02cf6aa831679b892d0252f9e18b76df2f2a2",
    "message": "fix unit test error",
    "date": "2015-10-02T13:37:26Z",
    "url": "https://github.com/theonedev/onedev/commit/7fc02cf6aa831679b892d0252f9e18b76df2f2a2",
    "details": {
      "sha": "6d7b8ac80cd7434cfeed9e18f65b2924b55c108c",
      "filename": "gitplex.search/src/test/java/com/pmease/gitplex/search/IndexAndSearchTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/theonedev/onedev/blob/7fc02cf6aa831679b892d0252f9e18b76df2f2a2/gitplex.search%2Fsrc%2Ftest%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fsearch%2FIndexAndSearchTest.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/7fc02cf6aa831679b892d0252f9e18b76df2f2a2/gitplex.search%2Fsrc%2Ftest%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fsearch%2FIndexAndSearchTest.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.search%2Fsrc%2Ftest%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fsearch%2FIndexAndSearchTest.java?ref=7fc02cf6aa831679b892d0252f9e18b76df2f2a2",
      "patch": "@@ -107,15 +107,15 @@ protected void setup() {\n \t\twhen(storageManager.getRepoDir(Mockito.any(Repository.class))).thenReturn(new File(git.repoDir(), \".git\"));\n \t\t\n \t\tdao = mock(Dao.class);\n-\t\twhen(dao.load(Repository.class, Mockito.any(Long.class))).thenReturn(repository);\n+\t\twhen(dao.load(Repository.class, 1L)).thenReturn(repository);\n \t\t\n-\t\tMockito.when(AppLoader.getInstance(StorageManager.class)).thenReturn(storageManager);\n+\t\twhen(AppLoader.getInstance(StorageManager.class)).thenReturn(storageManager);\n \t\t\n \t\textractors = mock(Extractors.class);\n \t\twhen(extractors.getVersion()).thenReturn(\"java:1\");\n \t\twhen(extractors.getExtractor(anyString())).thenReturn(new JavaExtractor());\n \n-\t\tMockito.when(AppLoader.getInstance(Extractors.class)).thenReturn(extractors);\n+\t\twhen(AppLoader.getInstance(Extractors.class)).thenReturn(extractors);\n \t\t\n \t\tsearchManager = new DefaultSearchManager(storageManager);\n \t\t",
      "parent_sha": "3d02dec1ca3f23da19eb09b92e9a4fc86385c6bc"
    }
  },
  {
    "oid": "51661080db90dd9a7256f6810d5d87ac7b00658e",
    "message": "Fix issue #1045 - Unable to create issue comment from email if it\ncontains character '%'",
    "date": "2022-12-16T02:19:35Z",
    "url": "https://github.com/theonedev/onedev/commit/51661080db90dd9a7256f6810d5d87ac7b00658e",
    "details": {
      "sha": "bc5a7c659e31548b1cda8834433ad6b903933d16",
      "filename": "server-core/src/main/java/io/onedev/server/mail/DefaultMailManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/51661080db90dd9a7256f6810d5d87ac7b00658e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmail%2FDefaultMailManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/51661080db90dd9a7256f6810d5d87ac7b00658e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmail%2FDefaultMailManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmail%2FDefaultMailManager.java?ref=51661080db90dd9a7256f6810d5d87ac7b00658e",
      "patch": "@@ -692,7 +692,7 @@ private void addComment(MailSendSetting sendSetting, Issue issue, Message messag\n \t\tcomment.setUser(user);\r\n \t\tString content = stripQuotation(sendSetting, readText(issue.getProject(), issue.getUUID(), message));\r\n \t\tif (content != null) {\r\n-\t\t\tcomment.setContent(String.format(\"<div class='%s'>\" + content + \"</div>\", COMMENT_MARKER));\r\n+\t\t\tcomment.setContent(String.format(\"<div class='%s'>\", COMMENT_MARKER) + content + \"</div>\");\r\n \t\t\tissueCommentManager.save(comment, receiverEmailAddresses);\r\n \t\t}\r\n \t}\r",
      "parent_sha": "71a9c9e04ac6971f2d352f814fba093953b9e412"
    }
  },
  {
    "oid": "51e3ec7f9e2889a390a41fb43204db183545849c",
    "message": "fix: Branding logo broken (#1749)",
    "date": "2024-02-18T11:39:39Z",
    "url": "https://github.com/theonedev/onedev/commit/51e3ec7f9e2889a390a41fb43204db183545849c",
    "details": {
      "sha": "21846c966c44863160647c1bc08d9d28509a72fe",
      "filename": "server-product/src/main/java/io/onedev/server/product/ProductServletConfigurator.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/theonedev/onedev/blob/51e3ec7f9e2889a390a41fb43204db183545849c/server-product%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fproduct%2FProductServletConfigurator.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/51e3ec7f9e2889a390a41fb43204db183545849c/server-product%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fproduct%2FProductServletConfigurator.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-product%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fproduct%2FProductServletConfigurator.java?ref=51e3ec7f9e2889a390a41fb43204db183545849c",
      "patch": "@@ -126,13 +126,16 @@ public void sessionDestroyed(HttpSessionEvent se) {\n \t\tFile assetsDir = OneDev.getAssetsDir();\n \t\t\n \t\tboolean hasCustomLogo = false;\n+\t\tboolean hasCustomDarkLogo = false;\n \t\tboolean hasSiteMapTxt = false;\n \t\tboolean hasSiteMapXml = false;\n \t\tfor (File file: assetsDir.listFiles()) {\n \t\t\tif (file.isFile()) {\n \t\t\t\tcontext.addServlet(new ServletHolder(new FileAssetServlet(assetsDir)), \"/\" + file.getName());\n \t\t\t\tif (file.getName().equals(\"logo.png\"))\n \t\t\t\t\thasCustomLogo = true;\n+\t\t\t\telse if (file.getName().equals(\"logo-dark.png\"))\n+\t\t\t\t\thasCustomDarkLogo = true;\n \t\t\t\telse if (file.getName().equals(\"sitemap.xml\"))\n \t\t\t\t\thasSiteMapXml = true;\n \t\t\t\telse if (file.getName().equals(\"sitemap.txt\"))\n@@ -141,8 +144,10 @@ else if (file.getName().equals(\"sitemap.txt\"))\n \t\t\t\tcontext.addServlet(new ServletHolder(new FileAssetServlet(file)), \"/\" + file.getName() + \"/*\");\n \t\t\t}\n \t\t}\n-\t\tif (!hasCustomLogo)\n+\t\tif (!hasCustomLogo) \n \t\t\tcontext.addServlet(new ServletHolder(new FileAssetServlet(assetsDir)), \"/logo.png\");\n+\t\tif (!hasCustomDarkLogo)\n+\t\t\tcontext.addServlet(new ServletHolder(new FileAssetServlet(assetsDir)), \"/logo-dark.png\");\n \t\tif (!hasSiteMapTxt)\n \t\t\tcontext.addServlet(new ServletHolder(new FileAssetServlet(assetsDir)), \"/sitemap.txt\");\n \t\tif (!hasSiteMapXml)",
      "parent_sha": "57d00ede31fcd131f18decbc49962f3353f9d99e"
    }
  },
  {
    "oid": "c60ee6c0c3d0fa6df30eb827331b8d2053bfaacc",
    "message": "Fix the issue that removing required reviewer clears its notification\nstatus",
    "date": "2017-07-09T08:49:23Z",
    "url": "https://github.com/theonedev/onedev/commit/c60ee6c0c3d0fa6df30eb827331b8d2053bfaacc",
    "details": {
      "sha": "7f879b600bdf9d81e4cd1826d7f9f5f569183e0d",
      "filename": "core/src/main/java/com/gitplex/server/manager/impl/DefaultReviewInvitationManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/theonedev/onedev/blob/c60ee6c0c3d0fa6df30eb827331b8d2053bfaacc/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmanager%2Fimpl%2FDefaultReviewInvitationManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/c60ee6c0c3d0fa6df30eb827331b8d2053bfaacc/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmanager%2Fimpl%2FDefaultReviewInvitationManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmanager%2Fimpl%2FDefaultReviewInvitationManager.java?ref=c60ee6c0c3d0fa6df30eb827331b8d2053bfaacc",
      "patch": "@@ -40,13 +40,13 @@ public boolean exclude(ReviewInvitation invitation) {\n \t\tinvitation.setType(ReviewInvitation.Type.EXCLUDE);\n \t\tPullRequest request = invitation.getRequest();\n \t\t\n-\t\tsave(invitation);\n-\t\t\n \t\tUser reviewer = invitation.getUser();\n \t\tif (request.getQualityCheckStatus().getAwaitingReviewers().contains(reviewer) \n \t\t\t\t|| request.getQualityCheckStatus().getEffectiveReviews().containsKey(reviewer)) {\n \t\t\treturn false;\n \t\t} else {\n+\t\t\tsave(invitation);\n+\t\t\t\n \t\t\tPullRequestStatusChange statusChange = new PullRequestStatusChange();\n \t\t\tstatusChange.setDate(new Date());\n \t\t\tstatusChange.setRequest(request);",
      "parent_sha": "bfd72434eee6df750dc6f1ed76a69c001a835082"
    }
  },
  {
    "oid": "c164c7dfa3f700dbe51b70333932a7c2bde2db6d",
    "message": "mount administration page to sys/* instead of admin/*\nstill need discussion!",
    "date": "2013-12-21T18:17:29Z",
    "url": "https://github.com/theonedev/onedev/commit/c164c7dfa3f700dbe51b70333932a7c2bde2db6d",
    "details": {
      "sha": "527acd7ef74acd02f6a82293fbdd4a7abd159d69",
      "filename": "gitop.web/src/main/java/com/pmease/gitop/web/GitopWebApp.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/theonedev/onedev/blob/c164c7dfa3f700dbe51b70333932a7c2bde2db6d/gitop.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitop%2Fweb%2FGitopWebApp.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/c164c7dfa3f700dbe51b70333932a7c2bde2db6d/gitop.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitop%2Fweb%2FGitopWebApp.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitop.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitop%2Fweb%2FGitopWebApp.java?ref=c164c7dfa3f700dbe51b70333932a7c2bde2db6d",
      "patch": "@@ -294,8 +294,9 @@ protected boolean urlStartsWith(Url url, String... segments) {\n \t\t// project related\n \t\tmountPage(\"new\", CreateProjectPage.class);\n \t\t\n-\t\t// administration related\n-\t\tmountPage(\"admin/#{tabId}\", AdministrationPage.class);\n+\t\t// system administration related\n+\t\t// TODO: is it suitable to mount to sys?\n+\t\tmountPage(\"sys/#{tabId}\", AdministrationPage.class);\n \n \t\tmountPage(\"/test\", TestPage.class);\n \t\tmountPage(\"/test/project\", ProjectPage.class);",
      "parent_sha": "a32090c8497e5cb93e821b8b55c6d1ca99eadcd6"
    }
  },
  {
    "oid": "042160bc6ee610339ce8db39d686f1d2b84c6a77",
    "message": "Add new way of checking extension",
    "date": "2022-05-03T22:19:41Z",
    "url": "https://github.com/theonedev/onedev/commit/042160bc6ee610339ce8db39d686f1d2b84c6a77",
    "details": {
      "sha": "20d5786f600f752883c4d8f2e2b967ad04bafdb1",
      "filename": "server-core/src/main/java/io/onedev/server/infomanager/DefaultCommitInfoManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 137,
      "changes": 140,
      "blob_url": "https://github.com/theonedev/onedev/blob/042160bc6ee610339ce8db39d686f1d2b84c6a77/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Finfomanager%2FDefaultCommitInfoManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/042160bc6ee610339ce8db39d686f1d2b84c6a77/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Finfomanager%2FDefaultCommitInfoManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Finfomanager%2FDefaultCommitInfoManager.java?ref=042160bc6ee610339ce8db39d686f1d2b84c6a77",
      "patch": "@@ -144,139 +144,7 @@ public class DefaultCommitInfoManager extends AbstractMultiEnvironmentManager im\n \tprivate static final ByteIterable COMMIT_COUNT_KEY = new StringByteIterable(\"commitCount\");\r\n \t\r\n \tprivate static final int PRIORITY = 100;\r\n-\t\r\n-\tprivate static final Map<String, String> PROGRAMMING_LANGUAGES = new HashMap<>();\r\n-\t\r\n-\tstatic {\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"java\", \"Java\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"h\", \"C\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"c\", \"C\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"h++\", \"C++\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"c++\", \"C++\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"hpp\", \"C++\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cpp\", \"C++\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"hxx\", \"C++\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cxx\", \"C++\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"hh\", \"C++\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cc\", \"C++\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cob\", \"Cobol\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cpy\", \"Cobol\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cs\", \"CSharp\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"clj\", \"Clojure\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cljc\", \"Clojure\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cljx\", \"Clojure\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cljs\", \"ClojureScript\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"gss\", \"Closure Stylesheets\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"coffee\", \"CoffeeScript\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"cl\", \"Common Lisp\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"lisp\", \"Common Lisp\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"el\", \"Emacs Lisp\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"css\", \"CSS\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"d\", \"D\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"dart\", \"Dart\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"dtd\", \"DTD\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"erl\", \"Erlang\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"f\", \"Fortran\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"for\", \"Fortran\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"f77\", \"Fortran\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"f90\", \"Fortran\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"go\", \"Go\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"groovy\", \"Groovy\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"gradle\", \"Groovy\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"hs\", \"Haskell\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"aspx\", \"ASP.NET\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"html\", \"HTML\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"htm\", \"HTML\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"jsp\", \"Java Server Pages\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"js\", \"JavaScript\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"json\", \"JSON\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"jsx\", \"JSX\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"kt\", \"Kotlin\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"less\", \"LESS\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"lua\", \"Lua\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"md\", \"Markdown\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"mkd\", \"Markdown\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"m\", \"Objective-C\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"mm\", \"Objective-C\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"p\", \"Pascal\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"pas\", \"Pascal\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"pl\", \"Perl\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"pm\", \"Perl\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"php\", \"PHP\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"php3\", \"PHP\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"php4\", \"PHP\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"php5\", \"PHP\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"php7\", \"PHP\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"phtml\", \"PHP\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"sql\", \"SQL\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"ps1\", \"PowerShell\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"psd1\", \"PowerShell\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"psm1\", \"PowerShell\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"psm1\", \"PowerShell\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"properties\", \"Properties\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"ini\", \"INI\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"in\", \"INI\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"proto\", \"ProtoBuf\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"BUILD\", \"Python\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"py\", \"Python\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"pyw\", \"Python\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"bzl\", \"Python\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"pp\", \"Puppet\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"r\", \"R\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"R\", \"R\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"rb\", \"Ruby\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"rs\", \"Rust\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"sas\", \"SAS\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"sass\", \"Sass\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"scala\", \"Scala\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"scm\", \"Scheme\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"ss\", \"Scheme\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"scss\", \"Scss\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"sh\", \"Shell\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"ksh\", \"Shell\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"bash\", \"Shell\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"st\", \"SmallTalk\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"soy\", \"Soy\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"styl\", \"Stylus\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"swift\", \"Swift\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"tex\", \"LaTeX\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"tcl\", \"TCL\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"ts\", \"TypeScript\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"tsx\", \"TypeScript-JSX\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"vb\", \"VB.NET\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"vbs\", \"VBScript\");\r\n-\t\t\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"vue\", \"Vue.js Component\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"xml\", \"XML\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"xsl\", \"XML\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"xsd\", \"XML\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"svg\", \"XML\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"yaml\", \"Yaml\");\r\n-\t\tPROGRAMMING_LANGUAGES.put(\"yml\", \"Yaml\");\r\n-\t}\r\n-\t\r\n+\t\t\n \tprivate final StorageManager storageManager;\r\n \t\r\n \tprivate final BatchWorkManager batchWorkManager;\r\n@@ -859,10 +727,8 @@ private void updateLineStats(Transaction txn, GitCommit currentCommit, Map<Integ\n \t\tMap<String, Integer> languageLines = new HashMap<>();\r\n \t\tfor (FileChange change: currentCommit.getFileChanges()) {\r\n \t\t\tint lines = change.getAdditions() - change.getDeletions();\r\n-\t\t\tint lastIndexOfDot = change.getNewPath().lastIndexOf('.');\r\n-\t\t\tif (lastIndexOfDot != -1 && lines != 0) {\r\n-\t\t\t\tString fileExt = change.getNewPath().substring(lastIndexOfDot+1).toLowerCase();\r\n-\t\t\t\tString language = PROGRAMMING_LANGUAGES.get(fileExt);\r\n+\t\t\tif (lines != 0 && change.getNewExtension() != \"\") {\r\n+\t\t\t\tString language = ProgrammingLanguageInfoManager.getLanguageForExtension(change.getNewExtension());\r\n \t\t\t\tif (language != null) {\r\n \t\t\t\t\tInteger accumulatedLines = languageLines.get(language);\r\n \t\t\t\t\tif (accumulatedLines != null) \r",
      "parent_sha": "5fe684f3648cdf59819ac28944ed046af0e5ebaa"
    }
  },
  {
    "oid": "277b7360729159eebc34f7132941500dfb60c522",
    "message": "Fix issue #520 - Convert EOL in multi-line secret value from CRLF to LF",
    "date": "2022-01-08T03:27:57Z",
    "url": "https://github.com/theonedev/onedev/commit/277b7360729159eebc34f7132941500dfb60c522",
    "details": {
      "sha": "1c367c7a08441dfb6ded5f41ad594da128bb3211",
      "filename": "server-core/src/main/java/io/onedev/server/util/JobSecretAuthorizationContext.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/theonedev/onedev/blob/277b7360729159eebc34f7132941500dfb60c522/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Futil%2FJobSecretAuthorizationContext.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/277b7360729159eebc34f7132941500dfb60c522/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Futil%2FJobSecretAuthorizationContext.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Futil%2FJobSecretAuthorizationContext.java?ref=277b7360729159eebc34f7132941500dfb60c522",
      "patch": "@@ -66,7 +66,7 @@ public String getSecretValue(String secretName) {\n \t\t\tfor (JobSecret secret: project.getHierarchyJobSecrets()) {\n \t\t\t\tif (secret.getName().equals(secretName)) {\n \t\t\t\t\tif (isOnBranches(secret.getAuthorizedBranches())) {\t\t\t\n-\t\t\t\t\t\treturn secret.getValue();\n+\t\t\t\t\t\treturn secret.getValue().replace(\"\\r\\n\", \"\\n\");\n \t\t\t\t\t} else {\n \t\t\t\t\t\tthrow new ExplicitException(String.format(\n \t\t\t\t\t\t\t\t\"Job secret not authorized (project: %s, job secret: %s)\", \n@@ -108,7 +108,7 @@ public String getSecretValue(String branchName, String secretName) {\n \t\t\t\t\t\t\"Job secret not authorized (project: %s, job secret: %s)\", \n \t\t\t\t\t\tproject.getPath(), secretName));\n \t\t\t}\n-\t\t\treturn secret.getValue();\n+\t\t\treturn secret.getValue().replace(\"\\r\\n\", \"\\n\");\n \t\t}\n \t}\n \t",
      "parent_sha": "d05276a937af4ea88b80cd1b41e784a056681075"
    }
  },
  {
    "oid": "2552ea12b2c77dafbfd3219525fcee4067db18a4",
    "message": "Fix issue that upper case in path filter of revision diff does not work",
    "date": "2019-12-08T09:21:01Z",
    "url": "https://github.com/theonedev/onedev/commit/2552ea12b2c77dafbfd3219525fcee4067db18a4",
    "details": {
      "sha": "7492d8b1efb1ff93801d3e11c51c766af5737506",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/diff/revision/RevisionDiffPanel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/2552ea12b2c77dafbfd3219525fcee4067db18a4/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Frevision%2FRevisionDiffPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/2552ea12b2c77dafbfd3219525fcee4067db18a4/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Frevision%2FRevisionDiffPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Frevision%2FRevisionDiffPanel.java?ref=2552ea12b2c77dafbfd3219525fcee4067db18a4",
      "patch": "@@ -204,7 +204,7 @@ public Blob getBlob(BlobIdent blobIdent) {\n     \t\tString patternSetString = pathFilterModel.getObject();\n     \t\tif (StringUtils.isNotBlank(patternSetString)) {\n     \t\t\ttry {\n-    \t\t\t\tPatternSet patternSet = PatternSet.fromString(patternSetString);\n+    \t\t\t\tPatternSet patternSet = PatternSet.fromString(patternSetString.toLowerCase());\n     \t\t\t\tMatcher matcher = new PathMatcher();\n     \t\t\t\tfor (BlobChange change: changes) {\n \t        \t\t\tString oldPath = change.getOldBlobIdent().path;",
      "parent_sha": "afcea07482944ab5dbd8e177690c2e34fa89858c"
    }
  },
  {
    "oid": "83d1ab24dbef9a3a869bb85a98068c0b222362ac",
    "message": "fix: The SavedQueries save button respond slowly when type a duplicate query name",
    "date": "2024-10-20T07:04:13Z",
    "url": "https://github.com/theonedev/onedev/commit/83d1ab24dbef9a3a869bb85a98068c0b222362ac",
    "details": {
      "sha": "fc5590d1c6216116741245bb1015ae9667ce6e73",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/savedquery/SavedQueriesPanel.java",
      "status": "modified",
      "additions": 23,
      "deletions": 24,
      "changes": 47,
      "blob_url": "https://github.com/theonedev/onedev/blob/83d1ab24dbef9a3a869bb85a98068c0b222362ac/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fsavedquery%2FSavedQueriesPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/83d1ab24dbef9a3a869bb85a98068c0b222362ac/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fsavedquery%2FSavedQueriesPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fsavedquery%2FSavedQueriesPanel.java?ref=83d1ab24dbef9a3a869bb85a98068c0b222362ac",
      "patch": "@@ -1,13 +1,21 @@\n package io.onedev.server.web.component.savedquery;\n \n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import javax.annotation.Nullable;\n-import javax.servlet.http.Cookie;\n-\n+import io.onedev.server.model.Project;\n+import io.onedev.server.model.support.NamedQuery;\n+import io.onedev.server.model.support.QueryPersonalization;\n+import io.onedev.server.security.SecurityUtils;\n+import io.onedev.server.util.watch.WatchStatus;\n+import io.onedev.server.web.ajaxlistener.ConfirmClickListener;\n+import io.onedev.server.web.ajaxlistener.ConfirmLeaveListener;\n+import io.onedev.server.web.component.modal.ModalLink;\n+import io.onedev.server.web.component.modal.ModalPanel;\n+import io.onedev.server.web.component.subscriptionstatus.SubscriptionStatusLink;\n+import io.onedev.server.web.component.tabbable.AjaxActionTab;\n+import io.onedev.server.web.component.tabbable.Tab;\n+import io.onedev.server.web.component.tabbable.Tabbable;\n+import io.onedev.server.web.component.watchstatus.WatchStatusLink;\n+import io.onedev.server.web.editable.BeanContext;\n+import io.onedev.server.web.page.base.BasePage;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n@@ -32,22 +40,12 @@\n import org.apache.wicket.request.http.WebRequest;\n import org.apache.wicket.request.http.WebResponse;\n \n-import io.onedev.server.model.Project;\n-import io.onedev.server.model.support.NamedQuery;\n-import io.onedev.server.model.support.QueryPersonalization;\n-import io.onedev.server.security.SecurityUtils;\n-import io.onedev.server.util.watch.WatchStatus;\n-import io.onedev.server.web.ajaxlistener.ConfirmClickListener;\n-import io.onedev.server.web.ajaxlistener.ConfirmLeaveListener;\n-import io.onedev.server.web.component.modal.ModalLink;\n-import io.onedev.server.web.component.modal.ModalPanel;\n-import io.onedev.server.web.component.subscriptionstatus.SubscriptionStatusLink;\n-import io.onedev.server.web.component.tabbable.AjaxActionTab;\n-import io.onedev.server.web.component.tabbable.Tab;\n-import io.onedev.server.web.component.tabbable.Tabbable;\n-import io.onedev.server.web.component.watchstatus.WatchStatusLink;\n-import io.onedev.server.web.editable.BeanContext;\n-import io.onedev.server.web.page.base.BasePage;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.Cookie;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n \n @SuppressWarnings(\"serial\")\n public abstract class SavedQueriesPanel<T extends NamedQuery> extends Panel {\n@@ -472,6 +470,7 @@ protected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n \t\t\t\t\tfor (NamedQuery namedQuery: bean.getQueries()) {\n \t\t\t\t\t\tif (names.contains(namedQuery.getName())) {\n \t\t\t\t\t\t\tform.error(\"Duplicate name found: \" + namedQuery.getName());\n+\t\t\t\t\t\t\ttarget.add(form);\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tnames.add(namedQuery.getName());",
      "parent_sha": "1d1d8e2f1054c3aff33eb1ce4bfc92a28899b348"
    }
  },
  {
    "oid": "61528cbc376efdff54d8255795027cca864e85df",
    "message": "fix: NPE during upgrade from 9.4.7 -> 10.2.0 with custom authenticator (#1775)",
    "date": "2024-03-02T13:32:02Z",
    "url": "https://github.com/theonedev/onedev/commit/61528cbc376efdff54d8255795027cca864e85df",
    "details": {
      "sha": "175e2b005609591b40a73aeeef11afd0405cdfa2",
      "filename": "server-core/src/main/java/io/onedev/server/data/migration/DataMigrator.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/theonedev/onedev/blob/61528cbc376efdff54d8255795027cca864e85df/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fdata%2Fmigration%2FDataMigrator.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/61528cbc376efdff54d8255795027cca864e85df/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fdata%2Fmigration%2FDataMigrator.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fdata%2Fmigration%2FDataMigrator.java?ref=61528cbc376efdff54d8255795027cca864e85df",
      "patch": "@@ -6217,8 +6217,10 @@ private void migrate156(File dataDir, Stack<Integer> versions) {\n \t\t\t\t\t\tElement valueElement = element.element(\"value\");\n \t\t\t\t\t\tif (valueElement != null) {\n \t\t\t\t\t\t\tvar userSearchBaseElement = valueElement.element(\"userSearchBase\");\n-\t\t\t\t\t\t\tvalueElement.addElement(\"userSearchBases\").addElement(\"string\").setText(userSearchBaseElement.getText().trim());\n-\t\t\t\t\t\t\tuserSearchBaseElement.detach();\n+\t\t\t\t\t\t\tif (userSearchBaseElement != null) {\n+\t\t\t\t\t\t\t\tvalueElement.addElement(\"userSearchBases\").addElement(\"string\").setText(userSearchBaseElement.getText().trim());\n+\t\t\t\t\t\t\t\tuserSearchBaseElement.detach();\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t} else if (key.equals(\"SSO_CONNECTORS\")) {\n \t\t\t\t\t\tElement valueElement = element.element(\"value\");",
      "parent_sha": "1c2a0d37bf6dc011486c6f3e5022715516d8e4ea"
    }
  },
  {
    "oid": "c8dac4834f9fb9349257b70aea603c90a3e40f88",
    "message": "Change tooltip of request review for current user to avoid confusion",
    "date": "2023-04-23T23:37:42Z",
    "url": "https://github.com/theonedev/onedev/commit/c8dac4834f9fb9349257b70aea603c90a3e40f88",
    "details": {
      "sha": "b262b8745dc64854eaed9f60c672a9bf304ee8fb",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/pullrequest/review/ReviewListPanel.java",
      "status": "modified",
      "additions": 24,
      "deletions": 19,
      "changes": 43,
      "blob_url": "https://github.com/theonedev/onedev/blob/c8dac4834f9fb9349257b70aea603c90a3e40f88/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fpullrequest%2Freview%2FReviewListPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/c8dac4834f9fb9349257b70aea603c90a3e40f88/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fpullrequest%2Freview%2FReviewListPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fpullrequest%2Freview%2FReviewListPanel.java?ref=c8dac4834f9fb9349257b70aea603c90a3e40f88",
      "patch": "@@ -1,23 +1,6 @@\n package io.onedev.server.web.component.pullrequest.review;\n \n-import java.util.Collection;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n-import org.apache.wicket.ajax.markup.html.AjaxLink;\n-import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;\n-import org.apache.wicket.markup.head.CssHeaderItem;\n-import org.apache.wicket.markup.head.IHeaderResponse;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.LoadableDetachableModel;\n-\n import com.google.common.collect.Sets;\n-\n import io.onedev.server.OneDev;\n import io.onedev.server.entitymanager.PullRequestManager;\n import io.onedev.server.entitymanager.PullRequestReviewManager;\n@@ -30,6 +13,22 @@\n import io.onedev.server.web.behavior.WebSocketObserver;\n import io.onedev.server.web.component.user.ident.Mode;\n import io.onedev.server.web.component.user.ident.UserIdentPanel;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.head.CssHeaderItem;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n @SuppressWarnings(\"serial\")\n public abstract class ReviewListPanel extends Panel {\n@@ -102,6 +101,13 @@ protected void updateAjaxAttributes(AjaxRequestAttributes attributes) {\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \n+\t\t\t\t\t@Override\n+\t\t\t\t\tprotected void onComponentTag(ComponentTag tag) {\n+\t\t\t\t\t\tsuper.onComponentTag(tag);\n+\t\t\t\t\t\tif (review.getUser().equals(SecurityUtils.getUser()))\n+\t\t\t\t\t\t\ttag.put(\"title\", \"Reset my review\");\n+\t\t\t\t\t}\n+\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n \t\t\t\t\t\tPullRequestReview review = item.getModelObject();\n@@ -189,8 +195,7 @@ protected void onConfigure() {\n \t\t\t@Override\n \t\t\tprotected void onSelect(AjaxRequestTarget target, User user) {\n \t\t\t\tsuper.onSelect(target, user);\n-\t\t\t\tif (getPullRequest().isNew())\n-\t\t\t\t\ttarget.add(ReviewListPanel.this);\n+\t\t\t\ttarget.add(ReviewListPanel.this);\n \t\t\t}\n \n \t\t\t@Override",
      "parent_sha": "f6939ea4bb0accff946149595cfdcd037f8b85c3"
    }
  },
  {
    "oid": "2c3a13abd89a1bb32b35fdd8996bef7838724d7f",
    "message": "Prevent empty password from ldap authenticator",
    "date": "2020-02-10T05:40:13Z",
    "url": "https://github.com/theonedev/onedev/commit/2c3a13abd89a1bb32b35fdd8996bef7838724d7f",
    "details": {
      "sha": "1b41c14df88fb7a0be3f4920f8fe5f9dc144e9a9",
      "filename": "server-core/src/main/java/io/onedev/server/model/support/administration/authenticator/ldap/LdapAuthenticator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/2c3a13abd89a1bb32b35fdd8996bef7838724d7f/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2Fauthenticator%2Fldap%2FLdapAuthenticator.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/2c3a13abd89a1bb32b35fdd8996bef7838724d7f/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2Fauthenticator%2Fldap%2FLdapAuthenticator.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmodel%2Fsupport%2Fadministration%2Fauthenticator%2Fldap%2FLdapAuthenticator.java?ref=2c3a13abd89a1bb32b35fdd8996bef7838724d7f",
      "patch": "@@ -334,7 +334,7 @@ public Authenticated authenticate(UsernamePasswordToken token) {\n                     \t\t\"'follow referrals' to true to avoid this exception.\", pre);\n                 }\n             }\n-            if (email == null)\n+            if (StringUtils.isBlank(email))\n             \tthrow new AccountException(\"Email is required but not available in ldap directory\");\n             else\n             \treturn new Authenticated(email, fullName, groupNames);",
      "parent_sha": "a86215dc2b5c3c82dee5aad8e86645766f46e767"
    }
  },
  {
    "oid": "4301df79e7593f593d4d9bd80b58e0b28591b5b0",
    "message": "Fix issue #1040 - Unable to open commit detail page",
    "date": "2022-12-14T02:03:34Z",
    "url": "https://github.com/theonedev/onedev/commit/4301df79e7593f593d4d9bd80b58e0b28591b5b0",
    "details": {
      "sha": "f7b3e9e22d98b9ecec93b2e5a7c9e75b255e9fb4",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/diff/blob/text/BlobTextDiffPanel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/theonedev/onedev/blob/4301df79e7593f593d4d9bd80b58e0b28591b5b0/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Fblob%2Ftext%2FBlobTextDiffPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/4301df79e7593f593d4d9bd80b58e0b28591b5b0/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Fblob%2Ftext%2FBlobTextDiffPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fdiff%2Fblob%2Ftext%2FBlobTextDiffPanel.java?ref=4301df79e7593f593d4d9bd80b58e0b28591b5b0",
      "patch": "@@ -498,8 +498,7 @@ public void renderHead(IHeaderResponse response) {\n \t\t\t\texplicit(\"param3\"), explicit(\"param4\"), explicit(\"param5\"),\n \t\t\t\texplicit(\"param6\"), explicit(\"param7\"), explicit(\"param8\")); \n \t\t\n-\t\tString script = String.format(\"onedev.server.blobTextDiff.onDomReady('%s', '%s', '%s', '%s', %s, %s, %s,\"\n-\t\t\t\t+ \"%s, %s, %s, '%s');\", getMarkupId(), symbolTooltip.getMarkupId(), \n+\t\tString script = String.format(\"onedev.server.blobTextDiff.onDomReady('%s', '%s', '%s', '%s', %s, %s, %s, %s, %s, %s);\", getMarkupId(), symbolTooltip.getMarkupId(), \n \t\t\t\tchange.getOldBlobIdent().revision, change.getNewBlobIdent().revision,\n \t\t\t\tcallback, blameMessageBehavior.getCallback(),\n \t\t\t\tconvertToJson(markRange), convertToJson(openCommentInfo), ",
      "parent_sha": "b68c5112fb7263f4a16a8df0cd08afb3bbd3fa98"
    }
  },
  {
    "oid": "18bc3b9d0471f3d91b724e8c4e4dd64527c1030e",
    "message": "Add comments to notification mails\n\nresolve issue #147",
    "date": "2020-06-13T17:55:45Z",
    "url": "https://github.com/theonedev/onedev/commit/18bc3b9d0471f3d91b724e8c4e4dd64527c1030e",
    "details": {
      "sha": "82f8d627f17fc1595d3482222fb8c1c91e513596",
      "filename": "server-core/src/main/java/io/onedev/server/notification/IssueNotificationManager.java",
      "status": "modified",
      "additions": 21,
      "deletions": 15,
      "changes": 36,
      "blob_url": "https://github.com/theonedev/onedev/blob/18bc3b9d0471f3d91b724e8c4e4dd64527c1030e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FIssueNotificationManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/18bc3b9d0471f3d91b724e8c4e4dd64527c1030e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FIssueNotificationManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FIssueNotificationManager.java?ref=18bc3b9d0471f3d91b724e8c4e4dd64527c1030e",
      "patch": "@@ -57,8 +57,8 @@ public class IssueNotificationManager {\n \tprivate final SettingManager settingManager;\n \t\n \t@Inject\n-\tpublic IssueNotificationManager(MarkdownManager markdownManager, MailManager mailManager, \n-\t\t\tUrlManager urlManager, IssueWatchManager issueWatchManager, UserInfoManager userInfoManager, \n+\tpublic IssueNotificationManager(MarkdownManager markdownManager, MailManager mailManager,\n+\t\t\tUrlManager urlManager, IssueWatchManager issueWatchManager, UserInfoManager userInfoManager,\n \t\t\tUserManager userManager, SettingManager settingManager) {\n \t\tthis.mailManager = mailManager;\n \t\tthis.urlManager = urlManager;\n@@ -76,11 +76,11 @@ public void on(IssueEvent event) {\n \t\tUser user = event.getUser();\n \n \t\tString url;\n-\t\tif (event instanceof IssueCommented) \n+\t\tif (event instanceof IssueCommented)\n \t\t\turl = urlManager.urlFor(((IssueCommented)event).getComment());\n \t\telse if (event instanceof IssueChangeEvent)\n \t\t\turl = urlManager.urlFor(((IssueChangeEvent)event).getChange());\n-\t\telse \n+\t\telse\n \t\t\turl = urlManager.urlFor(issue);\n \t\t\n \t\tfor (Map.Entry<User, Boolean> entry: new QueryWatchBuilder<Issue>() {\n@@ -190,21 +190,21 @@ protected Collection<? extends NamedQuery> getNamedQueries() {\n \t\t\t\t\t\tString htmlBody = String.format(\"Visit <a href='%s'>%s</a> for details\", url, url);\n \t\t\t\t\t\tString textBody = String.format(\"Visit %s for details\", url);\n \t\t\t\t\t\t\n-\t\t\t\t\t\tmailManager.sendMailAsync(Sets.newHashSet(mentionedUser.getEmail()), \n+\t\t\t\t\t\tmailManager.sendMailAsync(Sets.newHashSet(mentionedUser.getEmail()),\n \t\t\t\t\t\t\t\tsubject, htmlBody, textBody);\n \t\t\t\t\t\t\n \t\t\t\t\t\tissueWatchManager.watch(issue, mentionedUser, true);\n \t\t\t\t\t\tnotifiedUsers.add(mentionedUser);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t} \t\t\n+\t\t}\n \t\t\n \t\tboolean notifyWatchers = false;\n \t\tif (event instanceof IssueChangeEvent) {\n \t\t\tIssueChangeData changeData = ((IssueChangeEvent) event).getChange().getData();\n \t\t\tif (!(changeData instanceof IssueReferencedFromCodeCommentData\n-\t\t\t\t\t|| changeData instanceof IssueReferencedFromIssueData \n+\t\t\t\t\t|| changeData instanceof IssueReferencedFromIssueData\n \t\t\t\t\t|| changeData instanceof IssueReferencedFromPullRequestData)) {\n \t\t\t\tnotifyWatchers = true;\n \t\t\t}\n@@ -217,26 +217,32 @@ protected Collection<? extends NamedQuery> getNamedQueries() {\n \t\t\t\n \t\t\tfor (IssueWatch watch: issue.getWatches()) {\n \t\t\t\tDate visitDate = userInfoManager.getIssueVisitDate(watch.getUser(), issue);\n-\t\t\t\tif (watch.isWatching() \n-\t\t\t\t\t\t&& (visitDate == null || visitDate.before(event.getDate())) \n+\t\t\t\tif (watch.isWatching()\n+\t\t\t\t\t\t&& (visitDate == null || visitDate.before(event.getDate()))\n \t\t\t\t\t\t&& !notifiedUsers.contains(watch.getUser())) {\n \t\t\t\t\tusersToNotify.add(watch.getUser());\n \t\t\t\t}\n \t\t\t}\n \n \t\t\tif (!usersToNotify.isEmpty()) {\n \t\t\t\tString subject;\n-\t\t\t\tif (user != null) \n+\t\t\t\tif (user != null)\n \t\t\t\t\tsubject = String.format(\"%s %s\", user.getDisplayName(), event.getActivity(true));\n-\t\t\t\telse \n+\t\t\t\telse\n \t\t\t\t\tsubject = event.getActivity(true);\n+\n \t\t\t\tString htmlBody = String.format(\"Visit <a href='%s'>%s</a> for details\", url, url);\n \t\t\t\tString textBody = String.format(\"Visit %s for details\", url);\n-\t\t\t\t\n-\t\t\t\tmailManager.sendMailAsync(usersToNotify.stream().map(User::getEmail).collect(Collectors.toList()), \n+\n+\t\t\t\tif (event instanceof MarkdownAware) {\n+\t\t\t\t\tString markdown = ((MarkdownAware) event).getMarkdown();\n+\t\t\t\t\thtmlBody = String.format(\"<pre>%s</pre><p>%s</p>\", markdown, htmlBody);\n+\t\t\t\t\ttextBody = String.format(\"%s\\n\\n%s\", markdown, textBody);\n+\t\t\t\t}\n+\n+\t\t\t\tmailManager.sendMailAsync(usersToNotify.stream().map(User::getEmail).collect(Collectors.toList()),\n \t\t\t\t\t\tsubject, htmlBody, textBody);\n-\t\t\t}\t\t\t\n+\t\t\t}\n \t\t}\n \t}\n-\t\n }",
      "parent_sha": "f98d667c940282a72b68d5ee700451f79bf5284e"
    }
  },
  {
    "oid": "673f67b2993efc2085e0d18fa2d7421dfe381f06",
    "message": "Fix issue #1027 - Error \"go to\" /projects/project in command palette",
    "date": "2022-12-06T00:21:51Z",
    "url": "https://github.com/theonedev/onedev/commit/673f67b2993efc2085e0d18fa2d7421dfe381f06",
    "details": {
      "sha": "1d1a1260e6ab2a1b8c7e4f341b62fd002563b11b",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/commandpalette/CommandPalettePanel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/673f67b2993efc2085e0d18fa2d7421dfe381f06/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommandpalette%2FCommandPalettePanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/673f67b2993efc2085e0d18fa2d7421dfe381f06/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommandpalette%2FCommandPalettePanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommandpalette%2FCommandPalettePanel.java?ref=673f67b2993efc2085e0d18fa2d7421dfe381f06",
      "patch": "@@ -64,7 +64,7 @@ public abstract class CommandPalettePanel extends Panel {\n \t\t\t+ \"~reset-password/** ~signup/** ~logout/** ~login/** ~loading/** ~init/** ~help/** ~builds/** issues/** \"\n \t\t\t+ \"~pulls/** **/invalid **/${issue}/** -**/${issue} **/${request}/** -**/${request} \"\n \t\t\t+ \"**/${build}/** -**/${build} **/${milestone}/** -**/${milestone} **/${agent}/** -**/${agent} \"\n-\t\t\t+ \"**/${group}/** -**/${group}\");\n+\t\t\t+ \"**/${group}/** -**/${group} projects/**\");\n \t\n \tstatic {\n \t\tfor (IRequestMapper mapper: OneDev.getInstance(WebApplication.class).getRequestMappers())",
      "parent_sha": "8a863e78109696a525b3eee5f9d9ac170a420fb2"
    }
  },
  {
    "oid": "611255702a68349be8d88009478ff84fd37d22d3",
    "message": "Fix the issue that switch to request code comments page can cause\nStackOverflowException",
    "date": "2016-10-11T01:26:37Z",
    "url": "https://github.com/theonedev/onedev/commit/611255702a68349be8d88009478ff84fd37d22d3",
    "details": {
      "sha": "5883c58d0562db6e2bc0dc5b1336e23199d69b70",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/page/depot/pullrequest/requestdetail/codecomments/RequestCodeCommentsPage.java",
      "status": "modified",
      "additions": 14,
      "deletions": 7,
      "changes": 21,
      "blob_url": "https://github.com/theonedev/onedev/blob/611255702a68349be8d88009478ff84fd37d22d3/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Fdepot%2Fpullrequest%2Frequestdetail%2Fcodecomments%2FRequestCodeCommentsPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/611255702a68349be8d88009478ff84fd37d22d3/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Fdepot%2Fpullrequest%2Frequestdetail%2Fcodecomments%2FRequestCodeCommentsPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Fdepot%2Fpullrequest%2Frequestdetail%2Fcodecomments%2FRequestCodeCommentsPage.java?ref=611255702a68349be8d88009478ff84fd37d22d3",
      "patch": "@@ -19,17 +19,12 @@ public class RequestCodeCommentsPage extends RequestDetailPage implements CodeCo\n \n \tprivate final CodeCommentFilter filterOption;\n \t\n-\tprivate final List<String> commentedFiles = new ArrayList<>();\n+\tprivate List<String> commentedFiles;\n \t\n \tpublic RequestCodeCommentsPage(PageParameters params) {\n \t\tsuper(params);\n-\t\t\n+\n \t\tfilterOption = new CodeCommentFilter(params);\n-\t\t\n-\t\tfor (CodeComment comment: getPullRequest().getCodeComments()) {\n-\t\t\tcommentedFiles.add(comment.getCommentPos().getPath());\n-\t\t}\n-\t\tcommentedFiles.sort((file1, file2)->Paths.get(file1).compareTo(Paths.get(file2)));\n \t}\n \n \t@Override\n@@ -66,6 +61,18 @@ protected PullRequest getPullRequest() {\n \n \t@Override\n \tpublic List<String> getCommentedFiles() {\n+\t\tif (commentedFiles == null) {\n+\t\t\t/*\n+\t\t\t * Lazy initializing the commentedFiles as otherwise it may result in recursive initialization as\n+\t\t\t * getPullRequest().getCodeComments() can save CodeCommentRelation which again triggering \n+\t\t\t * instantiation of RequestCodeComments in PullRequestChangeBroadcaster when calling WicketUtils.getPage()\n+\t\t\t */\n+\t\t\tcommentedFiles = new ArrayList<>();\n+\t\t\tfor (CodeComment comment: getPullRequest().getCodeComments()) {\n+\t\t\t\tcommentedFiles.add(comment.getCommentPos().getPath());\n+\t\t\t}\n+\t\t\tcommentedFiles.sort((file1, file2)->Paths.get(file1).compareTo(Paths.get(file2)));\n+\t\t}\n \t\treturn commentedFiles;\n \t}\n ",
      "parent_sha": "3dce865b89dd85f329509d8d006f5a0f7a580ad1"
    }
  },
  {
    "oid": "08d552a741f539558c4de282834aec6d692ad9d8",
    "message": "chore: Improve default commit message when edit files from UI",
    "date": "2024-12-04T23:27:46Z",
    "url": "https://github.com/theonedev/onedev/commit/08d552a741f539558c4de282834aec6d692ad9d8",
    "details": {
      "sha": "b464474d67e307aa241ab6964984323ca4a1a806",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/blob/render/commitoption/CommitOptionPanel.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/theonedev/onedev/blob/08d552a741f539558c4de282834aec6d692ad9d8/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Fcommitoption%2FCommitOptionPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/08d552a741f539558c4de282834aec6d692ad9d8/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Fcommitoption%2FCommitOptionPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Fcommitoption%2FCommitOptionPanel.java?ref=08d552a741f539558c4de282834aec6d692ad9d8",
      "patch": "@@ -90,8 +90,9 @@ public String getDefaultCommitMessage() {\n \t\telse\n \t\t\toldName = oldPath;\n \t\t\n+\t\tString commitMessage;\n \t\tif (newContentProvider == null) { \n-\t\t\treturn \"Delete \" + oldName;\n+\t\t\tcommitMessage = \"Delete \" + oldName;\n \t\t} else {\n \t\t\tString newPath = context.getNewPath();\n \n@@ -103,16 +104,18 @@ public String getDefaultCommitMessage() {\n \t\t\t\n \t\t\tif (oldPath == null) {\n \t\t\t\tif (newName != null)\n-\t\t\t\t\treturn \"Add \" + newName;\n+\t\t\t\t\tcommitMessage = \"Add \" + newName;\n \t\t\t\telse\n-\t\t\t\t\treturn \"Add new file\";\n+\t\t\t\t\tcommitMessage = \"Add new file\";\n \t\t\t} else if (oldPath.equals(newPath)) {\n-\t\t\t\treturn \"Edit \" + oldName;\n+\t\t\t\tcommitMessage = \"Edit \" + oldName;\n \t\t\t} else {\n-\t\t\t\treturn \"Rename \" + oldName;\n+\t\t\t\tcommitMessage = \"Rename \" + oldName;\n \t\t\t}\n \t\t}\n-\t\t\t\n+\t\tif (context.getProject().getBranchProtection(context.getBlobIdent().revision, SecurityUtils.getUser()).isEnforceConventionalCommits())\n+\t\t\tcommitMessage = \"chore: \" + commitMessage;\n+\t\treturn commitMessage;\n \t}\n \t\n \tprivate GitService getGitService() {",
      "parent_sha": "1cb79b4b14d0f19c9e5e8ae3308f8a85b36d1a4e"
    }
  },
  {
    "oid": "4440f0c57e440488d7e653417b2547eaae8ad19c",
    "message": "Fix issue #304 - Potential information leak via Ldap injection when ldap\nauthenticator is enabled",
    "date": "2021-05-29T02:41:52Z",
    "url": "https://github.com/theonedev/onedev/commit/4440f0c57e440488d7e653417b2547eaae8ad19c",
    "details": {
      "sha": "2cf4963b695af1d33ae86bd87494095096c1d52c",
      "filename": "server-plugin/server-plugin-authenticator-ldap/src/main/java/io/onedev/server/plugin/authenticator/ldap/LdapAuthenticator.java",
      "status": "modified",
      "additions": 45,
      "deletions": 1,
      "changes": 46,
      "blob_url": "https://github.com/theonedev/onedev/blob/4440f0c57e440488d7e653417b2547eaae8ad19c/server-plugin%2Fserver-plugin-authenticator-ldap%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fauthenticator%2Fldap%2FLdapAuthenticator.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/4440f0c57e440488d7e653417b2547eaae8ad19c/server-plugin%2Fserver-plugin-authenticator-ldap%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fauthenticator%2Fldap%2FLdapAuthenticator.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-plugin%2Fserver-plugin-authenticator-ldap%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fplugin%2Fauthenticator%2Fldap%2FLdapAuthenticator.java?ref=4440f0c57e440488d7e653417b2547eaae8ad19c",
      "patch": "@@ -181,7 +181,9 @@ public Authenticated authenticate(UsernamePasswordToken token) {\n \t\t} catch (InvalidNameException e) {\n \t\t\tthrow new RuntimeException(e);\n \t\t}\n-        String userSearchFilter = StringUtils.replace(getUserSearchFilter(), \"{0}\", token.getUsername());\n+\t\t\n+        String userSearchFilter = StringUtils.replace(getUserSearchFilter(), \"{0}\", \n+        \t\tescape(token.getUsername()));\n         userSearchFilter = StringUtils.replace(userSearchFilter, \"\\\\\", \"\\\\\\\\\");\n         logger.debug(\"Evaluated user search filter: \" + userSearchFilter);\n         \n@@ -437,4 +439,46 @@ public boolean isManagingSshKeys() {\n \t\treturn getUserSshKeyAttribute() != null;\n \t}\n \t\n+\t/* Copied from Spring LdapEncoder.java */\n+    private static String[] FILTER_ESCAPE_TABLE = new String['\\\\' + 1];\n+\n+    static {\n+\n+        // Filter encoding table -------------------------------------\n+\n+        // fill with char itself\n+        for (char c = 0; c < FILTER_ESCAPE_TABLE.length; c++) {\n+            FILTER_ESCAPE_TABLE[c] = String.valueOf(c);\n+        }\n+\n+        // escapes (RFC2254)\n+        FILTER_ESCAPE_TABLE['*'] = \"\\\\2a\";\n+        FILTER_ESCAPE_TABLE['('] = \"\\\\28\";\n+        FILTER_ESCAPE_TABLE[')'] = \"\\\\29\";\n+        FILTER_ESCAPE_TABLE['\\\\'] = \"\\\\5c\";\n+        FILTER_ESCAPE_TABLE[0] = \"\\\\00\";\n+\n+    }\n+\n+    private static String escape(String value) {\n+        // make buffer roomy\n+        StringBuilder encodedValue = new StringBuilder(value.length() * 2);\n+\n+        int length = value.length();\n+\n+        for (int i = 0; i < length; i++) {\n+\n+            char c = value.charAt(i);\n+\n+            if (c < FILTER_ESCAPE_TABLE.length) {\n+                encodedValue.append(FILTER_ESCAPE_TABLE[c]);\n+            } else {\n+                // default: add the char\n+                encodedValue.append(c);\n+            }\n+        }\n+\n+        return encodedValue.toString();\n+    }\t\n+\t\n }",
      "parent_sha": "a61e1a016c20f4f3eafb257640883edb19771578"
    }
  },
  {
    "oid": "4e1ec99cae9add41e0d5295e4beb9efaa2ebe63d",
    "message": "Improve branches page performance.",
    "date": "2016-02-06T11:53:21Z",
    "url": "https://github.com/theonedev/onedev/commit/4e1ec99cae9add41e0d5295e4beb9efaa2ebe63d",
    "details": {
      "sha": "97272dbf4a0705849417e8150bae34eacccedd88",
      "filename": "gitplex.web/src/main/java/com/pmease/gitplex/web/page/repository/branches/RepoBranchesPage.java",
      "status": "modified",
      "additions": 39,
      "deletions": 34,
      "changes": 73,
      "blob_url": "https://github.com/theonedev/onedev/blob/4e1ec99cae9add41e0d5295e4beb9efaa2ebe63d/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fbranches%2FRepoBranchesPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/4e1ec99cae9add41e0d5295e4beb9efaa2ebe63d/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fbranches%2FRepoBranchesPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/gitplex.web%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fgitplex%2Fweb%2Fpage%2Frepository%2Fbranches%2FRepoBranchesPage.java?ref=4e1ec99cae9add41e0d5295e4beb9efaa2ebe63d",
      "patch": "@@ -35,6 +35,7 @@\n import org.apache.wicket.request.mapper.parameter.PageParameters;\r\n import org.apache.wicket.request.resource.CssResourceReference;\r\n import org.eclipse.jgit.internal.storage.file.FileRepository;\r\n+import org.eclipse.jgit.lib.Constants;\r\n import org.eclipse.jgit.lib.ObjectId;\r\n import org.eclipse.jgit.lib.Ref;\r\n import org.eclipse.jgit.revwalk.RevCommit;\r\n@@ -60,7 +61,6 @@\n import com.pmease.gitplex.core.model.Repository;\r\n import com.pmease.gitplex.core.model.User;\r\n import com.pmease.gitplex.core.security.SecurityUtils;\r\n-import com.pmease.gitplex.web.Constants;\r\n import com.pmease.gitplex.web.component.UserLink;\r\n import com.pmease.gitplex.web.component.branchchoice.BranchChoiceProvider;\r\n import com.pmease.gitplex.web.component.branchchoice.BranchSingleChoice;\r\n@@ -79,8 +79,32 @@\n @SuppressWarnings(\"serial\")\r\n public class RepoBranchesPage extends RepositoryPage {\r\n \r\n+\t// use a small page size to load page quickly\r\n+\tprivate static final int PAGE_SIZE = 10;\r\n+\t\r\n \tprivate String baseBranch;\r\n \t\r\n+\tprivate IModel<List<Ref>> branchesModel = new AbstractReadOnlyModel<List<Ref>>() {\r\n+\r\n+\t\t@Override\r\n+\t\tpublic List<Ref> getObject() {\r\n+\t\t\tList<Ref> refs = getRepository().getBranchRefs();\r\n+\t\t\tsearchFor = searchInput.getInput();\r\n+\t\t\tif (StringUtils.isNotBlank(searchFor)) {\r\n+\t\t\t\tsearchFor = searchFor.trim().toLowerCase();\r\n+\t\t\t\tfor (Iterator<Ref> it = refs.iterator(); it.hasNext();) {\r\n+\t\t\t\t\tString branch = GitUtils.ref2branch(it.next().getName());\r\n+\t\t\t\t\tif (!branch.toLowerCase().contains(searchFor))\r\n+\t\t\t\t\t\tit.remove();\r\n+\t\t\t\t}\r\n+\t\t\t} else {\r\n+\t\t\t\tsearchFor = null;\r\n+\t\t\t}\r\n+\t\t\treturn refs;\r\n+\t\t}\r\n+\t\t\r\n+\t};\r\n+\t\r\n \tprivate PageableListView<Ref> branchesView;\r\n \t\r\n \tprivate Component pagingNavigator;\r\n@@ -91,28 +115,28 @@ public class RepoBranchesPage extends RepositoryPage {\n \t\r\n \tprivate String searchFor;\r\n \t\r\n-\tprivate final IModel<Map<String, AheadBehind>> aheadBehindsModel = \r\n-\t\t\tnew LoadableDetachableModel<Map<String, AheadBehind>>() {\r\n+\tprivate final IModel<Map<ObjectId, AheadBehind>> aheadBehindsModel = \r\n+\t\t\tnew LoadableDetachableModel<Map<ObjectId, AheadBehind>>() {\r\n \r\n \t\t@SuppressWarnings(\"unused\")\r\n \t\t@Override\r\n-\t\tprotected Map<String, AheadBehind> load() {\r\n+\t\tprotected Map<ObjectId, AheadBehind> load() {\r\n \t\t\tList<ObjectId> compareIds = new ArrayList<>(); \r\n-\t\t\tList<Ref> branchesInView = branchesView.getModelObject();\r\n-\t\t\tfor (long i=branchesView.getFirstItemOffset(); i<branchesInView.size(); i++) {\r\n+\t\t\tList<Ref> branches = branchesModel.getObject();\r\n+\t\t\tfor (long i=branchesView.getFirstItemOffset(); i<branches.size(); i++) {\r\n \t\t\t\tif (i-branchesView.getFirstItemOffset() >= branchesView.getItemsPerPage())\r\n \t\t\t\t\tbreak;\r\n-\t\t\t\tRef ref = branchesInView.get((int)i); \r\n+\t\t\t\tRef ref = branches.get((int)i); \r\n \t\t\t\tcompareIds.add(ref.getObjectId());\r\n \t\t\t}\r\n \r\n-\t\t\tObjectId baseId = getRepository().getObjectId(GitUtils.branch2ref(getBaseBranch()));\r\n-\t\t\t\r\n-\t\t\tMap<String, AheadBehind> aheadBehinds = new HashMap<>();\r\n+\t\t\tRef baseRef = getRepository().getRefs(Constants.R_HEADS).get(getBaseBranch());\r\n+\t\t\tPreconditions.checkNotNull(baseRef);\r\n+\t\t\tMap<ObjectId, AheadBehind> aheadBehinds = new HashMap<>();\r\n \t\t\ttry (\tFileRepository jgitRepo = getRepository().openAsJGitRepo();\r\n \t\t\t\t\tRevWalk revWalk = new RevWalk(jgitRepo);) {\r\n \r\n-\t\t\t\tRevCommit baseCommit = revWalk.lookupCommit(baseId);\r\n+\t\t\t\tRevCommit baseCommit = revWalk.lookupCommit(baseRef.getObjectId());\r\n \t\t\t\tfor (ObjectId compareId: compareIds) {\r\n \t\t\t\t\tRevCommit compareCommit = revWalk.lookupCommit(compareId);\r\n \t\t\t\t\trevWalk.markUninteresting(baseCommit);\r\n@@ -129,7 +153,7 @@ protected Map<String, AheadBehind> load() {\n \t\t\t\t\t\tbehind++;\r\n \t\t\t\t\trevWalk.reset();\r\n \t\t\t\t\t\r\n-\t\t\t\t\taheadBehinds.put(compareId.name(), new AheadBehind(ahead, behind));\r\n+\t\t\t\t\taheadBehinds.put(compareId, new AheadBehind(ahead, behind));\r\n \t\t\t\t}\r\n \t\t\t} catch (IOException e) {\r\n \t\t\t\tthrow new RuntimeException(e);\r\n@@ -258,26 +282,7 @@ protected void onUpdate(AjaxRequestTarget target) {\n \t\tbranchesContainer.setOutputMarkupId(true);\r\n \t\tadd(branchesContainer);\r\n \t\t\r\n-\t\tbranchesContainer.add(branchesView = new PageableListView<Ref>(\"branches\", new AbstractReadOnlyModel<List<Ref>>() {\r\n-\r\n-\t\t\t@Override\r\n-\t\t\tpublic List<Ref> getObject() {\r\n-\t\t\t\tList<Ref> refs = getRepository().getBranchRefs();\r\n-\t\t\t\tsearchFor = searchInput.getInput();\r\n-\t\t\t\tif (StringUtils.isNotBlank(searchFor)) {\r\n-\t\t\t\t\tsearchFor = searchFor.trim().toLowerCase();\r\n-\t\t\t\t\tfor (Iterator<Ref> it = refs.iterator(); it.hasNext();) {\r\n-\t\t\t\t\t\tString branch = GitUtils.ref2branch(it.next().getName());\r\n-\t\t\t\t\t\tif (!branch.toLowerCase().contains(searchFor))\r\n-\t\t\t\t\t\t\tit.remove();\r\n-\t\t\t\t\t}\r\n-\t\t\t\t} else {\r\n-\t\t\t\t\tsearchFor = null;\r\n-\t\t\t\t}\r\n-\t\t\t\treturn refs;\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t}, Constants.DEFAULT_PAGE_SIZE) {\r\n+\t\tbranchesContainer.add(branchesView = new PageableListView<Ref>(\"branches\", branchesModel, PAGE_SIZE) {\r\n \r\n \t\t\t@Override\r\n \t\t\tprotected void populateItem(final ListItem<Ref> item) {\r\n@@ -306,8 +311,7 @@ protected void onConfigure() {\n \t\t\t\t\t\r\n \t\t\t\t});\r\n \t\t\t\t\r\n-\t\t\t\tString branchHash = lastCommit.name();\r\n-\t\t\t\tfinal AheadBehind ab = Preconditions.checkNotNull(aheadBehindsModel.getObject().get(branchHash));\r\n+\t\t\t\tfinal AheadBehind ab = Preconditions.checkNotNull(aheadBehindsModel.getObject().get(lastCommit));\r\n \t\t\t\t\r\n \t\t\t\titem.add(new Link<Void>(\"behindLink\") {\r\n \r\n@@ -546,6 +550,7 @@ public void renderHead(IHeaderResponse response) {\n \r\n \t@Override\r\n \tpublic void onDetach() {\r\n+\t\tbranchesModel.detach();\r\n \t\taheadOpenRequestsModel.detach();\r\n \t\tbehindOpenRequestsModel.detach();\r\n \t\tbranchWatchesModel.detach();\r",
      "parent_sha": "45300395e57421da9ea6a9477ee7a6f6ee4180f0"
    }
  },
  {
    "oid": "77b2d2d37d705a9f3357bb56cb51140a045dce2e",
    "message": "Fix the issue that some html file can not be displayed",
    "date": "2017-12-05T14:28:33Z",
    "url": "https://github.com/theonedev/onedev/commit/77b2d2d37d705a9f3357bb56cb51140a045dce2e",
    "details": {
      "sha": "f24e63ee27e6289557e40d7251b92c42a49890f8",
      "filename": "core/src/main/java/com/gitplex/server/util/ContentDetector.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/theonedev/onedev/blob/77b2d2d37d705a9f3357bb56cb51140a045dce2e/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Futil%2FContentDetector.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/77b2d2d37d705a9f3357bb56cb51140a045dce2e/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Futil%2FContentDetector.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Futil%2FContentDetector.java?ref=77b2d2d37d705a9f3357bb56cb51140a045dce2e",
      "patch": "@@ -56,11 +56,13 @@ public static boolean isBinary(byte[] contentBytes, @Nullable String fileName) {\n \t\tMediaType mediaType = detectMediaType(contentBytes, fileName);\n \t\t\n \t\treturn !mediaType.getType().equalsIgnoreCase(\"text\")\n+\t\t\t\t&& !mediaType.equals(MediaType.application(\"xhtml+xml\"))\n \t\t\t\t&& !mediaType.equals(MediaType.APPLICATION_XML)\n \t\t\t\t&& !mediaType.equals(MediaType.application(\"json\"))\n \t\t\t\t&& !mediaType.equals(MediaType.application(\"x-sh\"))\n \t\t\t\t&& !mediaType.equals(MediaType.application(\"javascript\"))\n-\t\t\t\t&& !mediaType.equals(\"x-httpd-jsp\");\n+\t\t\t\t&& !mediaType.equals(MediaType.application(\"x-httpd-jsp\"))\n+\t\t\t\t&& !mediaType.equals(MediaType.application(\"x-httpd-php\"));\n \t}\n \t\n \t/**",
      "parent_sha": "33307bbdb6437ad2a5d6a5a9aafa7aaeaaa90d4c"
    }
  },
  {
    "oid": "6fc61dd020c01286b3a9e27c0be6c061ba24062c",
    "message": "Add alternative file extension for markdown rendering",
    "date": "2022-05-02T23:29:26Z",
    "url": "https://github.com/theonedev/onedev/commit/6fc61dd020c01286b3a9e27c0be6c061ba24062c",
    "details": {
      "sha": "f8c4bb14e00f5efbb4541eb1bbe361ac9d91374f",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/blob/render/folder/FolderViewPanel.java",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/theonedev/onedev/blob/6fc61dd020c01286b3a9e27c0be6c061ba24062c/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Ffolder%2FFolderViewPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/6fc61dd020c01286b3a9e27c0be6c061ba24062c/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Ffolder%2FFolderViewPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fblob%2Frender%2Ffolder%2FFolderViewPanel.java?ref=6fc61dd020c01286b3a9e27c0be6c061ba24062c",
      "patch": "@@ -124,12 +124,31 @@ protected List<BlobIdent> load() {\n \t};\n \t\n \tprivate final IModel<BlobIdent> readmeModel = new LoadableDetachableModel<BlobIdent>() {\n-\n+\t\tprivate String[] possibleReadmeNames = {\n+\t\t\t\t\"readme.md\",\n+\t\t\t\t\"readme.mkd\",\n+\t\t};\t\n+\t\t\n+\t\tprivate boolean isReadme(BlobIdent blobIdent) {\n+\t\t\tif(!blobIdent.isFile()) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\t\n+\t\t\tfor(String possibleName: possibleReadmeNames) {\n+\t\t\t\tif(blobIdent.getName().equalsIgnoreCase(possibleName)) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n \t\t@Override\n \t\tprotected BlobIdent load() {\n \t\t\tfor (BlobIdent blobIdent: childrenModel.getObject()) {\n-\t\t\t\tif (blobIdent.isFile() && blobIdent.getName().equalsIgnoreCase(\"readme.md\"))\n+\t\t\t\tif(isReadme(blobIdent)) {\n \t\t\t\t\treturn blobIdent;\n+\t\t\t\t}\n \t\t\t}\n \t\t\treturn null;\n \t\t}",
      "parent_sha": "6f18b24c47d00bbec4ba6356095f2a05350a3fbe"
    }
  },
  {
    "oid": "d4e8f071511b74a76f4335ff6182b021026f5655",
    "message": "feat: cache cherry-pick and revert result.",
    "date": "2025-01-29T00:22:43Z",
    "url": "https://github.com/theonedev/onedev/commit/d4e8f071511b74a76f4335ff6182b021026f5655",
    "details": {
      "sha": "a3aa88168a2d88c529c33413cf7e655520a8fc5b",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/commit/revert/CommitRevertCherryPickPanel.java",
      "status": "modified",
      "additions": 9,
      "deletions": 14,
      "changes": 23,
      "blob_url": "https://github.com/theonedev/onedev/blob/d4e8f071511b74a76f4335ff6182b021026f5655/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommit%2Frevert%2FCommitRevertCherryPickPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/d4e8f071511b74a76f4335ff6182b021026f5655/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommit%2Frevert%2FCommitRevertCherryPickPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommit%2Frevert%2FCommitRevertCherryPickPanel.java?ref=d4e8f071511b74a76f4335ff6182b021026f5655",
      "patch": "@@ -151,19 +151,19 @@ protected void onUpdate(AjaxRequestTarget target) {\n \t\t\t\tvar user = SecurityUtils.getAuthUser();\n \t\t\t\tvar protection = project.getBranchProtection(branch, user);\n \t\t\t\tRevCommit sourceHead = (RevCommit) project.getBranchRef(\"refs/heads/\" + branch).getObj();\n-\t\t\t\tRevCommit commitId = project.getRevCommit(mergeCommitId, false);\n+\t\t\t\tRevCommit mergeCommit = project.getRevCommit(mergeCommitId, true);\n \n-\t\t\t\tif (protection.isReviewRequiredForPush(project, sourceHead, commitId, new HashMap<>())){\n+\t\t\t\tif (protection.isReviewRequiredForPush(project, sourceHead, mergeCommit, new HashMap<>())){\n \t\t\t\t\tgetSession().error(\"Review required for this change. Submit pull request instead\");\n \t\t\t\t\treturn;\n \t\t\t\t}\n-\t\t\t\tvar buildRequirement = protection.getBuildRequirement(project, sourceHead, commitId, new HashMap<>());\n+\t\t\t\tvar buildRequirement = protection.getBuildRequirement(project, sourceHead, mergeCommit, new HashMap<>());\n \t\t\t\tif (!buildRequirement.getRequiredJobs().isEmpty()) {\n \t\t\t\t\tgetSession().error(\"This change needs to be verified by some jobs. Submit pull request instead\");\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tif (!project.isCommitSignatureRequirementSatisfied(user, branch, commitId)) {\n+\t\t\t\tif (!project.isCommitSignatureRequirementSatisfied(user, branch, mergeCommit)) {\n \t\t\t\t\tgetSession().error(\"No valid signature for head commit of target branch\");\n \t\t\t\t\treturn;\n \t\t\t\t}\n@@ -193,24 +193,19 @@ protected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n \t\t\t\tvar project = projectModel.getObject();\n \t\t\t\tvar branch = baseChoice.getModel().getObject();\n \t\t\t\tvar user = SecurityUtils.getAuthUser();\n-\t\t\t\tvar commitMessage = helperBean.getCommitMessage();\n \t\t\t\tvar protection = project.getBranchProtection(branch, user);\n \t\t\t\tRevCommit sourceHead = (RevCommit) project.getBranchRef(\"refs/heads/\" + branch).getObj();\n-\t\t\t\tRevCommit commitId = project.getRevCommit(revision, true);\n \n+\t\t\t\tvar mergeCommit = project.getRevCommit(mergeCommitId, true);\n+\t\t\t\tvar amendedCommitId = OneDev.getInstance(GitService.class).amendCommit(project, mergeCommit.copy(),\n+\t\t\t\t\t\tmergeCommit.getAuthorIdent(), mergeCommit.getCommitterIdent(), helperBean.getCommitMessage());\n \t\t\t\ttry {\n-\t\t\t\t\tif (type == CommitRevertCherryPickType.REVERT) {\n-\t\t\t\t\t\tmergeCommitId = OneDev.getInstance(GitService.class).revert(project, revision, branch, commitMessage, user.asPerson());\n-\t\t\t\t\t} else if (type == CommitRevertCherryPickType.CHERRY_PICK) {\n-\t\t\t\t\t\tmergeCommitId = OneDev.getInstance(GitService.class).cherryPick(project, revision, branch, commitMessage, user.asPerson());\n-\t\t\t\t\t}\n-\t\t\t\t\tvar error = OneDev.getInstance(GitService.class).checkCommitMessages(protection, project, sourceHead, commitId, new HashMap<>());\n+\t\t\t\t\tvar error = OneDev.getInstance(GitService.class).checkCommitMessages(protection, project, sourceHead, amendedCommitId, new HashMap<>());\n \t\t\t\t\tif (error != null) {\n \t\t\t\t\t\tgetSession().error(\"Error validating commit message of '\" + error.getCommitId().name() + \"': \" + error.getErrorMessage());\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t\tOneDev.getInstance(GitService.class).updateRef(project, \"refs/heads/\" + branch,\n-\t\t\t\t\t\t\tmergeCommitId, sourceHead);\n+\t\t\t\t\tOneDev.getInstance(GitService.class).updateRef(project, \"refs/heads/\" + branch, amendedCommitId, sourceHead);\n \t\t\t\t\tonCreate(target, branch);\n \t\t\t\t\tif (type == CommitRevertCherryPickType.REVERT) {\n \t\t\t\t\t\tgetSession().success(\"Revert successfully\");",
      "parent_sha": "103892c733611ef9e2298848d45dd68de5d01855"
    }
  },
  {
    "oid": "1453e74b2a7fa3d3da2c6d31804a3e9157e18b06",
    "message": "mdiwork",
    "date": "2022-06-01T11:11:47Z",
    "url": "https://github.com/theonedev/onedev/commit/1453e74b2a7fa3d3da2c6d31804a3e9157e18b06",
    "details": {
      "sha": "411b7f0baf4390c036e72ec7c40607fd45f2516d",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/commit/list/CommitListPanel.java",
      "status": "modified",
      "additions": 24,
      "deletions": 4,
      "changes": 28,
      "blob_url": "https://github.com/theonedev/onedev/blob/1453e74b2a7fa3d3da2c6d31804a3e9157e18b06/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommit%2Flist%2FCommitListPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/1453e74b2a7fa3d3da2c6d31804a3e9157e18b06/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommit%2Flist%2FCommitListPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Fcommit%2Flist%2FCommitListPanel.java?ref=1453e74b2a7fa3d3da2c6d31804a3e9157e18b06",
      "patch": "@@ -12,6 +12,8 @@\n \n import javax.annotation.Nullable;\n \n+import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength;\n+import org.apache.commons.collections4.map.ReferenceMap;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -98,6 +100,9 @@ public abstract class CommitListPanel extends Panel {\n \t\n \tprivate static final int MAX_PAGES = 50;\n \t\n+\tprivate static final ReferenceMap<ObjectId, RevCommit> commitCache = \n+\t\t\tnew ReferenceMap<>(ReferenceStrength.HARD, ReferenceStrength.WEAK);\n+\t\n \tprivate final IModel<String> queryStringModel;\n \t\n \tprivate final IModel<CommitQuery> queryModel = new LoadableDetachableModel<CommitQuery>() {\n@@ -183,26 +188,41 @@ protected Commits load() {\n \t\t\t\tcommits.last = new ArrayList<>();\n \t\t\t\t\n \t\t\t\tfor (int i=0; i<lastMaxCount; i++) { \n-\t\t\t\t\tcommits.last.add(revWalk.parseCommit(ObjectId.fromString(commitHashes.get(i))));\n+\t\t\t\t\tcommits.last.add(loadCommit(revWalk, ObjectId.fromString(commitHashes.get(i))));\n \t\t\t\t}\n \t\t\t\t\n \t\t\t\tsort(commits.last, 0);\n \t\t\t\t\n \t\t\t\tcommits.current = new ArrayList<>(commits.last);\n \t\t\t\tfor (int i=lastMaxCount; i<commitHashes.size(); i++)\n-\t\t\t\t\tcommits.current.add(revWalk.parseCommit(ObjectId.fromString(commitHashes.get(i))));\n+\t\t\t\t\tcommits.current.add(loadCommit(revWalk, ObjectId.fromString(commitHashes.get(i))));\n \t\t\t\t\n \t\t\t\tsort(commits.current, lastMaxCount);\n \n \t\t\t\tcommits.last = separateByDate(commits.last);\n \t\t\t\tcommits.current = separateByDate(commits.current);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n \t\t\t}\n \t\t\t\n \t\t\treturn commits;\n \t\t}\n \t\t\n+\t\tprivate RevCommit loadCommit(RevWalk revWalk, ObjectId commitId) {\n+\t\t\tRevCommit commit;\n+\t\t\tsynchronized (commitCache) {\n+\t\t\t\tcommit = commitCache.get(commitId);\n+\t\t\t}\n+\t\t\tif (commit == null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tcommit = revWalk.parseCommit(commitId);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t\tsynchronized (commitCache) {\n+\t\t\t\t\tcommitCache.put(commitId, commit);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn commit;\n+\t\t}\n \t};\n \t\n \tprivate final IModel<Map<String, List<String>>> labelsModel = new LoadableDetachableModel<Map<String, List<String>>>() {",
      "parent_sha": "49ba9bab4af0809bf02eb3ba888ea679dbb1e005"
    }
  },
  {
    "oid": "b943e7527a431524235a2513fb0d7cb2357436b4",
    "message": "Fix issue #1190 - Boards crashing, potentially due to unhandled priviliges",
    "date": "2023-02-11T06:07:47Z",
    "url": "https://github.com/theonedev/onedev/commit/b943e7527a431524235a2513fb0d7cb2357436b4",
    "details": {
      "sha": "33c8c8df6c9942ccdd911d2b08453c7b5202f599",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/issues/boards/BoardColumnPanel.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/theonedev/onedev/blob/b943e7527a431524235a2513fb0d7cb2357436b4/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fissues%2Fboards%2FBoardColumnPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/b943e7527a431524235a2513fb0d7cb2357436b4/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fissues%2Fboards%2FBoardColumnPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fissues%2Fboards%2FBoardColumnPanel.java?ref=b943e7527a431524235a2513fb0d7cb2357436b4",
      "patch": "@@ -29,6 +29,7 @@\n import org.apache.wicket.request.IRequestParameters;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.hibernate.Hibernate;\n import org.unbescape.html.HtmlEscape;\n \n import io.onedev.commons.utils.ExplicitException;\n@@ -165,9 +166,9 @@ public void onEvent(IEvent<?> event) {\n \t\t\t\t\t\t\t\t// move issue between board columns\n \t\t\t\t\t\t\t\tString identifyField = getBoard().getIdentifyField();\n \t\t\t\t\t\t\t\tif (identifyField.equals(Issue.NAME_STATE)) {\n-\t\t\t\t\t\t\t\t\tissue = SerializationUtils.clone(issue);\n \t\t\t\t\t\t\t\t\tfor (TransitionSpec transition: getIssueSetting().getTransitionSpecs()) {\n \t\t\t\t\t\t\t\t\t\tif (transition.canTransitManually(issue, getColumn())) {\n+\t\t\t\t\t\t\t\t\t\t\tissue = SerializationUtils.clone(issue);\n \t\t\t\t\t\t\t\t\t\t\tissue.setState(getColumn());\n \t\t\t\t\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t\t\t\t\t}\n@@ -182,6 +183,7 @@ public void onEvent(IEvent<?> event) {\n \t\t\t\t\t\t\t} else if (SecurityUtils.canScheduleIssues(issue.getProject())) { \n \t\t\t\t\t\t\t\t// move issue between backlog column and board column\n \t\t\t\t\t\t\t\tissue = SerializationUtils.clone(issue);\n+\t\t\t\t\t\t\t\tissue.setProject(getProjectScope().getProject());\n \t\t\t\t\t\t\t\tIssueSchedule schedule = new IssueSchedule();\n \t\t\t\t\t\t\t\tschedule.setIssue(issue);\n \t\t\t\t\t\t\t\tschedule.setMilestone(getMilestone());",
      "parent_sha": "b324670d262342fb06747bb95dfbbbb1fc7457f7"
    }
  },
  {
    "oid": "2dc6640c10c951ec8a3d7e271d8a7021270d43a3",
    "message": "Able to accept merged verification from TeamCity",
    "date": "2017-11-25T12:28:35Z",
    "url": "https://github.com/theonedev/onedev/commit/2dc6640c10c951ec8a3d7e271d8a7021270d43a3",
    "details": {
      "sha": "759565b440fc9361cab6851a2c218cf670dc8d06",
      "filename": "core/src/main/java/com/gitplex/server/util/QualityCheckStatus.java",
      "status": "modified",
      "additions": 29,
      "deletions": 19,
      "changes": 48,
      "blob_url": "https://github.com/theonedev/onedev/blob/2dc6640c10c951ec8a3d7e271d8a7021270d43a3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Futil%2FQualityCheckStatus.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/2dc6640c10c951ec8a3d7e271d8a7021270d43a3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Futil%2FQualityCheckStatus.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Futil%2FQualityCheckStatus.java?ref=2dc6640c10c951ec8a3d7e271d8a7021270d43a3",
      "patch": "@@ -133,31 +133,41 @@ private boolean isAwaitingReviewer(Long userId) {\n \t}\n \t\n \tprivate void checkVerifications(List<String> verificationNames, boolean verifyMerges) {\n-\t\tString commit;\n+\t\tVerificationManager verificationManager = GitPlex.getInstance(VerificationManager.class);\n \t\tif (verifyMerges) {\n \t\t\tMergePreview preview = request.getMergePreview();\n \t\t\tif (preview != null && preview.getMerged() != null) {\n-\t\t\t\tcommit = preview.getMerged();\n+\t\t\t\tMap<String, Verification> mergeVerifications = \n+\t\t\t\t\t\tverificationManager.getVerifications(request.getTargetProject(), preview.getMerged());\n+\t\t\t\tMap<String, Verification> headVerifications = \n+\t\t\t\t\t\tverificationManager.getVerifications(request.getTargetProject(), request.getHeadCommitHash());\n+\t\t\t\tfor (String verificationName: verificationNames) {\n+\t\t\t\t\tVerification verification = mergeVerifications.get(verificationName);\n+\t\t\t\t\tif (verification == null) {\n+\t\t\t\t\t\t/*\n+\t\t\t\t\t\t * TeamCity always publishes build status against head commit hash, and for merged commit, it\n+\t\t\t\t\t\t * appends \" - merge\" after the verification name  \n+\t\t\t\t\t\t */\n+\t\t\t\t\t\tverification = headVerifications.get(verificationName + \" - merge\");\n+\t\t\t\t\t}\n+\t\t\t\t\tif (verification != null) \n+\t\t\t\t\t\teffectiveVerifications.put(verificationName, verification);\n+\t\t\t\t\telse \n+\t\t\t\t\t\tawaitingVerifications.add(verificationName);\n+\t\t\t\t}\n \t\t\t} else {\n-\t\t\t\tcommit = null;\n+\t\t\t\tawaitingVerifications.addAll(verificationNames);\n \t\t\t}\n \t\t} else {\n-\t\t\tcommit = request.getHeadCommitHash();\t\t\t\n-\t\t}\n-\t\t\n-\t\tMap<String, Verification> verifications;\n-\t\tif (commit != null) {\n-\t\t\tverifications = GitPlex.getInstance(VerificationManager.class)\n-\t\t\t\t\t.getVerifications(request.getTargetProject(), commit);\n-\t\t} else {\n-\t\t\tverifications = new HashMap<>();\n-\t\t}\n-\t\tfor (String verificationName: verificationNames) {\n-\t\t\tVerification verification = verifications.get(verificationName);\n-\t\t\tif (verification != null) \n-\t\t\t\teffectiveVerifications.put(verificationName, verification);\n-\t\t\telse\n-\t\t\t\tawaitingVerifications.add(verificationName);\n+\t\t\tMap<String, Verification> verifications = \n+\t\t\t\t\tverificationManager.getVerifications(request.getTargetProject(), request.getHeadCommitHash());\n+\t\t\tfor (String verificationName: verificationNames) {\n+\t\t\t\tVerification verification = verifications.get(verificationName);\n+\t\t\t\tif (verification != null) \n+\t\t\t\t\teffectiveVerifications.put(verificationName, verification);\n+\t\t\t\telse\n+\t\t\t\t\tawaitingVerifications.add(verificationName);\n+\t\t\t}\n \t\t}\n \t}\n \t",
      "parent_sha": "1fc5fde928088aef0147331b35c674492903b8c1"
    }
  },
  {
    "oid": "f1220fc597a4047ba6dccbe3cb4a05b275c8761e",
    "message": "Add support of html5 video tags",
    "date": "2017-12-05T02:32:13Z",
    "url": "https://github.com/theonedev/onedev/commit/f1220fc597a4047ba6dccbe3cb4a05b275c8761e",
    "details": {
      "sha": "efb8f6d51f89edfb1821cc883f1e6144eb7546d2",
      "filename": "core/src/main/java/com/gitplex/server/manager/impl/DefaultMarkdownManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/theonedev/onedev/blob/f1220fc597a4047ba6dccbe3cb4a05b275c8761e/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmanager%2Fimpl%2FDefaultMarkdownManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/f1220fc597a4047ba6dccbe3cb4a05b275c8761e/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmanager%2Fimpl%2FDefaultMarkdownManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fmanager%2Fimpl%2FDefaultMarkdownManager.java?ref=f1220fc597a4047ba6dccbe3cb4a05b275c8761e",
      "patch": "@@ -41,7 +41,7 @@ public class DefaultMarkdownManager implements MarkdownManager {\n \tprivate static final String[] SAFE_TAGS = new String[] { \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"h7\", \"h8\", \"br\", \"b\",\n \t\t\t\"i\", \"strong\", \"em\", \"a\", \"pre\", \"code\", \"img\", \"tt\", \"div\", \"ins\", \"del\", \"sup\", \"sub\", \"p\", \"ol\", \"ul\",\n \t\t\t\"li\", \"table\", \"thead\", \"tbody\", \"tfoot\", \"th\", \"tr\", \"td\", \"rt\", \"rp\", \"blockquote\", \"dl\", \"dt\", \"dd\",\n-\t\t\t\"kbd\", \"q\", \"hr\", \"strike\", \"caption\", \"cite\", \"col\", \"colgroup\", \"small\", \"span\", \"u\", \"input\" };\n+\t\t\t\"kbd\", \"q\", \"hr\", \"strike\", \"caption\", \"cite\", \"col\", \"colgroup\", \"small\", \"span\", \"u\", \"input\", \"video\", \"source\"};\n \n \tprivate static final String[] SAFE_ATTRIBUTES = new String[] { \"abbr\", \"accept\", \"accept-charset\", \"accesskey\",\n \t\t\t\"action\", \"align\", \"alt\", \"axis\", \"border\", \"cellpadding\", \"cellspacing\", \"char\", \"charoff\", \"charset\",\n@@ -50,7 +50,7 @@ public class DefaultMarkdownManager implements MarkdownManager {\n \t\t\t\"longdesc\", \"maxlength\", \"media\", \"method\", \"multiple\", \"name\", \"nohref\", \"noshade\", \"nowrap\", \"prompt\",\n \t\t\t\"readonly\", \"rel\", \"rev\", \"rows\", \"rowspan\", \"rules\", \"scope\", \"selected\", \"shape\", \"size\", \"span\", \"start\",\n \t\t\t\"style\", \"summary\", \"tabindex\", \"target\", \"title\", \"type\", \"usemap\", \"valign\", \"value\", \"vspace\", \"width\",\n-\t\t\t\"itemprop\", \"class\" };\n+\t\t\t\"itemprop\", \"class\", \"controls\"};\n \n \tprivate static final String[] SAFE_ANCHOR_SCHEMES = new String[] { \"http\", \"https\", \"mailto\", };\n \n@@ -81,6 +81,7 @@ protected boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n \t\t\t\t.addAttributes(\"a\", \"href\", \"title\")\n \t\t\t\t.addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n \t\t\t\t.addAttributes(\"div\", \"itemscope\", \"itemtype\")\n+\t\t\t\t.addAttributes(\"source\", \"src\")\n \t\t\t\t.addAttributes(\":all\", SAFE_ATTRIBUTES)\n \t\t\t\t.addProtocols(\"a\", \"href\", SAFE_ANCHOR_SCHEMES)\n \t\t\t\t.addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")",
      "parent_sha": "ad83f967e74194b0951811e92f3a8a006b5880af"
    }
  },
  {
    "oid": "7d27b442297579fbd13dd2235d59f95e386ebb6e",
    "message": "Change role job default permissions",
    "date": "2019-11-09T11:55:28Z",
    "url": "https://github.com/theonedev/onedev/commit/7d27b442297579fbd13dd2235d59f95e386ebb6e",
    "details": {
      "sha": "316e2f4573422970b6b7659e5907cbb4a8d6f6d8",
      "filename": "server-core/src/main/java/io/onedev/server/maintenance/DefaultDataManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 14,
      "changes": 18,
      "blob_url": "https://github.com/theonedev/onedev/blob/7d27b442297579fbd13dd2235d59f95e386ebb6e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmaintenance%2FDefaultDataManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/7d27b442297579fbd13dd2235d59f95e386ebb6e/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmaintenance%2FDefaultDataManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fmaintenance%2FDefaultDataManager.java?ref=7d27b442297579fbd13dd2235d59f95e386ebb6e",
      "patch": "@@ -131,13 +131,8 @@ public void complete() {\n \t\t\tdeveloper.setEditableIssueFields(Lists.newArrayList(\"Type\", \"Priority\", \"Assignee\", \"Resolution\", \"Duplicate With\"));\r\n \t\t\t\r\n \t\t\tJobPrivilege jobPrivilege = new JobPrivilege();\r\n-\t\t\tjobPrivilege.setJobNames(\"-Release -Production\");\r\n-\t\t\tjobPrivilege.setManageJob(true);\r\n-\t\t\tdeveloper.getJobPrivileges().add(jobPrivilege);\r\n-\t\t\t\r\n-\t\t\tjobPrivilege = new JobPrivilege();\r\n-\t\t\tjobPrivilege.setJobNames(\"Release Production\");\r\n-\t\t\tjobPrivilege.setAccessLog(true);\r\n+\t\t\tjobPrivilege.setJobNames(\"*\");\r\n+\t\t\tjobPrivilege.setRunJob(true);\r\n \t\t\tdeveloper.getJobPrivileges().add(jobPrivilege);\r\n \t\t\t\r\n \t\t\troleManager.save(developer, null);\r\n@@ -148,12 +143,7 @@ public void complete() {\n \t\t\ttester.setEditableIssueFields(Lists.newArrayList(\"Type\", \"Priority\", \"Assignee\", \"Resolution\", \"Duplicate With\"));\r\n \t\t\t\r\n \t\t\tjobPrivilege = new JobPrivilege();\r\n-\t\t\tjobPrivilege.setJobNames(\"QA\");\r\n-\t\t\tjobPrivilege.setManageJob(true);\r\n-\t\t\ttester.getJobPrivileges().add(jobPrivilege);\r\n-\t\t\t\r\n-\t\t\tjobPrivilege = new JobPrivilege();\r\n-\t\t\tjobPrivilege.setJobNames(\"-QA\");\r\n+\t\t\tjobPrivilege.setJobNames(\"*\");\r\n \t\t\tjobPrivilege.setAccessLog(true);\r\n \t\t\ttester.getJobPrivileges().add(jobPrivilege);\r\n \t\t\t\r\n@@ -165,7 +155,7 @@ public void complete() {\n \t\t\treporter.setEditableIssueFields(Lists.newArrayList(\"Type\", \"Priority\"));\r\n \t\t\t\r\n \t\t\tjobPrivilege = new JobPrivilege();\r\n-\t\t\tjobPrivilege.setJobNames(\"Release Production\");\r\n+\t\t\tjobPrivilege.setJobNames(\"*\");\r\n \t\t\treporter.getJobPrivileges().add(jobPrivilege);\r\n \r\n \t\t\troleManager.save(reporter, null);\r",
      "parent_sha": "e79be8d355671e4c1b3f388ccf4ed6aef0abde44"
    }
  },
  {
    "oid": "6030e49db09fca2fcb4af1b7217037eb0b8a3ae0",
    "message": "Use LinkedHashSet instead of HashSet to ensure suggestion orders",
    "date": "2016-01-05T02:37:56Z",
    "url": "https://github.com/theonedev/onedev/commit/6030e49db09fca2fcb4af1b7217037eb0b8a3ae0",
    "details": {
      "sha": "ffe0cbec07da8cc71d24f8335a68381633b6a773",
      "filename": "commons.antlr/src/main/java/com/pmease/commons/antlr/parser/EarleyParser.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/theonedev/onedev/blob/6030e49db09fca2fcb4af1b7217037eb0b8a3ae0/commons.antlr%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fantlr%2Fparser%2FEarleyParser.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/6030e49db09fca2fcb4af1b7217037eb0b8a3ae0/commons.antlr%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fantlr%2Fparser%2FEarleyParser.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/commons.antlr%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fantlr%2Fparser%2FEarleyParser.java?ref=6030e49db09fca2fcb4af1b7217037eb0b8a3ae0",
      "patch": "@@ -2,7 +2,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n \n@@ -41,7 +41,7 @@ public EarleyParser(RuleSpec rule, List<Token> tokens) {\n \t\tthis.rule = rule;\n \t\tthis.tokens = tokens;\n \t\t\n-\t\tSet<State> states = new HashSet<>();\n+\t\tSet<State> states = new LinkedHashSet<>();\n \t\tfor (int i=0; i<rule.getAlternatives().size(); i++) \n \t\t\tstates.add(new State(tokenIndex, rule, i, 0, false, new ArrayList<Element>()));\n \n@@ -54,7 +54,7 @@ public EarleyParser(RuleSpec rule, List<Token> tokens) {\n \t\t\tif (tokenIndex == tokens.size())\n \t\t\t\tbreak;\n \t\t\t\n-\t\t\tstates = new HashSet<>();\n+\t\t\tstates = new LinkedHashSet<>();\n \t\t\tfor (State state: chart.getStates()) \n \t\t\t\tscan(state, states);\n \t\t\ttokenIndex++;",
      "parent_sha": "a32f78be17b82319e61ae03909306efc2e1f1616"
    }
  },
  {
    "oid": "a00472aa43c50d459db0908aa999b4c8d31bf7c6",
    "message": "Fix a minor import issue\n\nA successful project import will not go back to project list sometimes",
    "date": "2022-08-06T10:24:42Z",
    "url": "https://github.com/theonedev/onedev/commit/a00472aa43c50d459db0908aa999b4c8d31bf7c6",
    "details": {
      "sha": "d9ee305bc9283b6d6a9b587c2e269357c1615615",
      "filename": "server-core/src/main/java/io/onedev/server/web/component/taskbutton/TaskButton.java",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/theonedev/onedev/blob/a00472aa43c50d459db0908aa999b4c8d31bf7c6/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Ftaskbutton%2FTaskButton.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/a00472aa43c50d459db0908aa999b4c8d31bf7c6/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Ftaskbutton%2FTaskButton.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fcomponent%2Ftaskbutton%2FTaskButton.java?ref=a00472aa43c50d459db0908aa999b4c8d31bf7c6",
      "patch": "@@ -198,6 +198,8 @@ public void log(String message, String sessionId) {\n \t\t\n \t\tnew ModalPanel(target) {\n \t\t\t\n+\t\t\tprivate TaskResult result;\n+\t\t\t\n \t\t\t@Override\n \t\t\tprotected void onClosed() {\n \t\t\t\tsuper.onClosed();\n@@ -208,11 +210,7 @@ protected void onClosed() {\n \t\t\t\t\tfuture.cancel(true);\n \t\t\t\t\tonCancelled(target);\n \t\t\t\t} else {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tonCompleted(target, future != null && future.get().successful);\n-\t\t\t\t\t} catch (InterruptedException | ExecutionException e) {\n-\t\t\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t\t\t}\n+\t\t\t\t\tonCompleted(target, result != null && result.isSuccessful());\n \t\t\t\t}\n \t\t\t}\n \n@@ -244,7 +242,8 @@ protected TaskResult getResult() {\n \t\t\t\t\t\tTaskFuture future = getTaskFutures().get(path);\n \t\t\t\t\t\tif (future != null && future.isDone() && !future.isCancelled()) { \n \t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\treturn future.get();\n+\t\t\t\t\t\t\t\tresult = future.get();\n+\t\t\t\t\t\t\t\treturn result;\n \t\t\t\t\t\t\t} catch (InterruptedException | ExecutionException e) {\n \t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n \t\t\t\t\t\t\t}",
      "parent_sha": "7a42f02be41e385db0a4448b964f84306eabf8e0"
    }
  },
  {
    "oid": "1aea5851e0a3807a56009b24081693faf59fb6a2",
    "message": "Fix occasional milestone OutOfBoundsException",
    "date": "2021-12-12T08:23:39Z",
    "url": "https://github.com/theonedev/onedev/commit/1aea5851e0a3807a56009b24081693faf59fb6a2",
    "details": {
      "sha": "49c1439a54ffbbb69757709dee10a8707c0db5e8",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/issues/milestones/MilestoneBurndownPage.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/theonedev/onedev/blob/1aea5851e0a3807a56009b24081693faf59fb6a2/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fissues%2Fmilestones%2FMilestoneBurndownPage.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/1aea5851e0a3807a56009b24081693faf59fb6a2/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fissues%2Fmilestones%2FMilestoneBurndownPage.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fissues%2Fmilestones%2FMilestoneBurndownPage.java?ref=1aea5851e0a3807a56009b24081693faf59fb6a2",
      "patch": "@@ -227,8 +227,10 @@ protected LineSeries load() {\n \t\t\t\t\t}\n \n \t\t\t\t\tMap<String, Integer> guidelineYAxisValues = new HashMap<>();\n-\t\t\t\t\tguidelineYAxisValues.put(xAxisValues.get(0), initialIssueWeight);\n-\t\t\t\t\tguidelineYAxisValues.put(xAxisValues.get(xAxisValues.size()-1), 0);\n+\t\t\t\t\tif (!xAxisValues.isEmpty()) {\n+\t\t\t\t\t\tguidelineYAxisValues.put(xAxisValues.get(0), initialIssueWeight);\n+\t\t\t\t\t\tguidelineYAxisValues.put(xAxisValues.get(xAxisValues.size()-1), 0);\n+\t\t\t\t\t}\n \t\t\t\t\tlines.add(new Line(\"Guide Line\", guidelineYAxisValues, \"black\", null, \"dashed\"));\n \t\t\t\t\t\n \t\t\t\t\tString yAxisValueFormatter;",
      "parent_sha": "1dd22099a59ee037871c654fec33a5b02e58d363"
    }
  },
  {
    "oid": "0693dcd5c069f0b8d4754c914ac81ed78d29788e",
    "message": "Add debug information to analyze the \"Response is committed\" issue",
    "date": "2020-01-26T08:25:19Z",
    "url": "https://github.com/theonedev/onedev/commit/0693dcd5c069f0b8d4754c914ac81ed78d29788e",
    "details": {
      "sha": "11701d689379793f0497451075e3d8785f7e8dca",
      "filename": "server-core/src/main/java/org/apache/wicket/page/PageStoreManager.java",
      "status": "modified",
      "additions": 27,
      "deletions": 1,
      "changes": 28,
      "blob_url": "https://github.com/theonedev/onedev/blob/0693dcd5c069f0b8d4754c914ac81ed78d29788e/server-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2Fpage%2FPageStoreManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/0693dcd5c069f0b8d4754c914ac81ed78d29788e/server-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2Fpage%2FPageStoreManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fwicket%2Fpage%2FPageStoreManager.java?ref=0693dcd5c069f0b8d4754c914ac81ed78d29788e",
      "patch": "@@ -17,22 +17,28 @@\n package org.apache.wicket.page;\n \n import java.io.Serializable;\n+import java.util.Enumeration;\n import java.util.List;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSessionBindingEvent;\n import javax.servlet.http.HttpSessionBindingListener;\n \n import org.apache.wicket.pageStore.IPageStore;\n import org.apache.wicket.request.cycle.RequestCycle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * \n  */\n public class PageStoreManager extends AbstractPageManager\n {\n+\tprivate static final Logger logger = LoggerFactory.getLogger(PageStoreManager.class);\n+\t\n \t/**\n \t * A cache that holds all registered page managers. <br/>\n \t * applicationName -> page manager\n@@ -273,7 +279,27 @@ protected void storeTouchedPages(final List<IManageablePage> touchedPages)\n \t\t\t\tSessionEntry entry = null;\n \t\t\t\tif (RequestCycle.get() != null) {\n \t\t\t\t\tHttpServletResponse response = (HttpServletResponse) RequestCycle.get().getResponse().getContainerResponse();\n-\t\t\t\t\tentry = getSessionEntry(!response.isCommitted());\n+\t\t\t\t\tif (response.isCommitted()) {\n+\t\t\t\t\t\tentry = getSessionEntry(false);\n+\t\t\t\t\t\tif (entry == null) {\n+\t\t\t\t\t\t\tHttpServletRequest request = (HttpServletRequest) RequestCycle.get().getRequest().getContainerRequest();\n+\t\t\t\t\t\t\tlogger.debug(\"Unable to store touched page as response is committed and session is not available\");\n+\t\t\t\t\t\t\tString url = request.getRequestURL().toString();\n+\t\t\t\t\t\t\tif (request.getQueryString() != null)\n+\t\t\t\t\t\t\t\turl += \"?\" + request.getQueryString();\n+\t\t\t\t\t\t\tlogger.debug(\"url: \" + url); \n+\t\t\t\t\t\t\tlogger.debug(\"method: \" + request.getMethod());\n+\t\t\t\t\t\t\tEnumeration<String> headerNames = request.getHeaderNames();\n+\t\t\t\t\t\t\twhile (headerNames.hasMoreElements()) {\n+\t\t\t\t\t\t\t\tString headerName = headerNames.nextElement();\n+\t\t\t\t\t\t\t\tEnumeration<String> headerValues = request.getHeaders(headerName);\n+\t\t\t\t\t\t\t\twhile (headerValues.hasMoreElements()) \n+\t\t\t\t\t\t\t\t\tlogger.debug(headerName + \": \" + headerValues.nextElement());\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tentry = getSessionEntry(true);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (entry != null) {\n \t\t\t\t\tentry.setSessionCache(touchedPages);",
      "parent_sha": "740f4ba5beb62a8bf9283cd3597f1cec0b725b2d"
    }
  },
  {
    "oid": "cf2a9a9bee66544569cf317b6e8599fef743b2fd",
    "message": "Fix the issue that updating existing code comment throws exception",
    "date": "2019-12-05T14:47:55Z",
    "url": "https://github.com/theonedev/onedev/commit/cf2a9a9bee66544569cf317b6e8599fef743b2fd",
    "details": {
      "sha": "ce5ca1b4fa16b1682f7c81ec65dd4000bb0ed3f1",
      "filename": "server-core/src/main/java/io/onedev/server/notification/CodeCommentNotificationManager.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/theonedev/onedev/blob/cf2a9a9bee66544569cf317b6e8599fef743b2fd/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FCodeCommentNotificationManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/cf2a9a9bee66544569cf317b6e8599fef743b2fd/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FCodeCommentNotificationManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fnotification%2FCodeCommentNotificationManager.java?ref=cf2a9a9bee66544569cf317b6e8599fef743b2fd",
      "patch": "@@ -45,14 +45,18 @@ public void on(CodeCommentEvent event) {\n \t\t\t\tString url;\n \t\t\t\tif (event instanceof CodeCommentCreated)\n \t\t\t\t\turl = urlManager.urlFor(((CodeCommentCreated)event).getComment(), null);\n-\t\t\t\telse \n+\t\t\t\telse if (event instanceof CodeCommentReplied)\n \t\t\t\t\turl = urlManager.urlFor(((CodeCommentReplied)event).getReply(), null);\n+\t\t\t\telse \n+\t\t\t\t\turl = null;\n \t\t\t\t\n-\t\t\t\tString subject = String.format(\"You are mentioned in a code comment on file '%s'\", \n-\t\t\t\t\t\tevent.getComment().getMarkPos().getPath());\n-\t\t\t\tString body = String.format(\"Visit <a href='%s'>%s</a> for details\", url, url);\n-\t\t\t\tmailManager.sendMailAsync(mentionUsers.stream().map(User::getEmail).collect(Collectors.toList()), \n-\t\t\t\t\t\tsubject, body);\n+\t\t\t\tif (url != null) {\n+\t\t\t\t\tString subject = String.format(\"You are mentioned in a code comment on file '%s'\", \n+\t\t\t\t\t\t\tevent.getComment().getMarkPos().getPath());\n+\t\t\t\t\tString body = String.format(\"Visit <a href='%s'>%s</a> for details\", url, url);\n+\t\t\t\t\tmailManager.sendMailAsync(mentionUsers.stream().map(User::getEmail).collect(Collectors.toList()), \n+\t\t\t\t\t\t\tsubject, body);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}",
      "parent_sha": "526cbd314bfe007f3c8a543b5d7b0e0f7e227387"
    }
  },
  {
    "oid": "06ab7f9f726df78f090d07ce6eac00fa9e9e99ce",
    "message": "Fix issue #598 - Build fired repeatedly in some cases",
    "date": "2022-02-28T06:30:29Z",
    "url": "https://github.com/theonedev/onedev/commit/06ab7f9f726df78f090d07ce6eac00fa9e9e99ce",
    "details": {
      "sha": "86dc882c6737bc506c48995b769ad3de9705ab94",
      "filename": "server-core/src/main/java/io/onedev/server/buildspec/job/DefaultJobManager.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/theonedev/onedev/blob/06ab7f9f726df78f090d07ce6eac00fa9e9e99ce/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fbuildspec%2Fjob%2FDefaultJobManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/06ab7f9f726df78f090d07ce6eac00fa9e9e99ce/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fbuildspec%2Fjob%2FDefaultJobManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fbuildspec%2Fjob%2FDefaultJobManager.java?ref=06ab7f9f726df78f090d07ce6eac00fa9e9e99ce",
      "patch": "@@ -86,6 +86,7 @@\n import io.onedev.server.event.ProjectEvent;\n import io.onedev.server.event.RefUpdated;\n import io.onedev.server.event.ScheduledTimeReaches;\n+import io.onedev.server.event.build.BuildEvent;\n import io.onedev.server.event.build.BuildFinished;\n import io.onedev.server.event.build.BuildPending;\n import io.onedev.server.event.build.BuildRetrying;\n@@ -800,7 +801,11 @@ public void on(ProjectEvent event) {\n \t\tif (event instanceof CommitAware) {\n \t\t\tObjectId commitId = ((CommitAware) event).getCommit().getCommitId();\n \t\t\tif (!commitId.equals(ObjectId.zeroId())) {\n-\t\t\t\tString triggerChain = UUID.randomUUID().toString();\n+\t\t\t\tString triggerChain;\n+\t\t\t\tif (event instanceof BuildEvent) \n+\t\t\t\t\ttriggerChain = ((BuildEvent) event).getBuild().getTriggerChain();\n+\t\t\t\telse\n+\t\t\t\t\ttriggerChain = UUID.randomUUID().toString();\n \t\t\t\tPullRequest request = null;\n \t\t\t\tif (event instanceof PullRequestEvent)\n \t\t\t\t\trequest = ((PullRequestEvent) event).getRequest();",
      "parent_sha": "15b2507281f54ef013549b7953001b865b80d6e7"
    }
  },
  {
    "oid": "fcc1ee5575debaebefac60432ed94d15c2e13133",
    "message": "Do not show job secret value after creation",
    "date": "2020-07-03T22:56:11Z",
    "url": "https://github.com/theonedev/onedev/commit/fcc1ee5575debaebefac60432ed94d15c2e13133",
    "details": {
      "sha": "6e01b7c58827fb1ab243058e651e4bde446c6edd",
      "filename": "server-core/src/main/java/io/onedev/server/web/page/project/setting/build/JobSecretEditPanel.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/theonedev/onedev/blob/fcc1ee5575debaebefac60432ed94d15c2e13133/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fbuild%2FJobSecretEditPanel.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/fcc1ee5575debaebefac60432ed94d15c2e13133/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fbuild%2FJobSecretEditPanel.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fweb%2Fpage%2Fproject%2Fsetting%2Fbuild%2FJobSecretEditPanel.java?ref=fcc1ee5575debaebefac60432ed94d15c2e13133",
      "patch": "@@ -37,10 +37,12 @@ protected void onInitialize() {\n \t\tform.setOutputMarkupId(true);\n \t\t\n \t\tJobSecret editingSecret;\n-\t\tif (index != -1) \n+\t\tif (index != -1) {\n \t\t\teditingSecret = getProject().getBuildSetting().getJobSecrets().get(index);\n-\t\telse \n+\t\t\teditingSecret.setValue(null);\n+\t\t} else { \n \t\t\teditingSecret = new JobSecret();\n+\t\t}\n \t\t\n \t\tBeanEditor editor = BeanContext.edit(\"editor\", editingSecret);\n \t\tform.add(editor);",
      "parent_sha": "2810c5f9c2d3e2ec00abb959d9844fbad2103a36"
    }
  },
  {
    "oid": "0314dbded63641b4e152e5c7fa295ad61b5cb49d",
    "message": "chore: Write cache stamp after uploading cache to ensure cache integrity",
    "date": "2024-09-01T10:25:52Z",
    "url": "https://github.com/theonedev/onedev/commit/0314dbded63641b4e152e5c7fa295ad61b5cb49d",
    "details": {
      "sha": "c273a3804e493d5b742a188d99b74a86971db32b",
      "filename": "server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultJobCacheManager.java",
      "status": "modified",
      "additions": 40,
      "deletions": 25,
      "changes": 65,
      "blob_url": "https://github.com/theonedev/onedev/blob/0314dbded63641b4e152e5c7fa295ad61b5cb49d/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultJobCacheManager.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/0314dbded63641b4e152e5c7fa295ad61b5cb49d/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultJobCacheManager.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/server-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fonedev%2Fserver%2Fentitymanager%2Fimpl%2FDefaultJobCacheManager.java?ref=0314dbded63641b4e152e5c7fa295ad61b5cb49d",
      "patch": "@@ -172,15 +172,18 @@ private InputStream openCacheInputStream(Long projectId, Long cacheId, List<Stri\n \t\tvar cacheHome = projectManager.getCacheDir(projectId);\n \t\tvar cacheDir = new File(cacheHome, String.valueOf(cacheId));\n \t\tif (cacheDir.exists()) {\n-\t\t\tvar stamp = readString(new File(cacheDir, \"stamp\"));\n-\t\t\tif (stamp.equals(CACHE_VERSION + \":\" + Joiner.on('\\n').join(cachePaths))) {\n-\t\t\t\ttry {\n-\t\t\t\t\tvar marks = FileUtils.readFileToByteArray(new File(cacheDir, \"marks\"));\n-\t\t\t\t\treturn new SequenceInputStream(\n-\t\t\t\t\t\t\tnew ByteArrayInputStream(marks), \n-\t\t\t\t\t\t\tnew FileInputStream(new File(cacheDir, \"data\")));\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\tvar stampFile = new File(cacheDir, \"stamp\");\n+\t\t\tif (stampFile.exists()) {\n+\t\t\t\tvar stamp = readString(stampFile);\n+\t\t\t\tif (stamp.equals(CACHE_VERSION + \":\" + Joiner.on('\\n').join(cachePaths))) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tvar marks = FileUtils.readFileToByteArray(new File(cacheDir, \"marks\"));\n+\t\t\t\t\t\treturn new SequenceInputStream(\n+\t\t\t\t\t\t\t\tnew ByteArrayInputStream(marks),\n+\t\t\t\t\t\t\t\tnew FileInputStream(new File(cacheDir, \"data\")));\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -220,13 +223,16 @@ public Long getCacheIdForUpload(Long projectId, String cacheKey) {\n \t\treturn cacheId;\n \t}\n \t\n-\tprivate OutputStream openCacheOutputStream(Long projectId, Long cacheId, List<String> cachePaths) {\n+\tprivate void writeStamp(File cacheDir, List<String> cachePaths) {\n+\t\twriteString(new File(cacheDir, \"stamp\"), CACHE_VERSION + \":\" + Joiner.on('\\n').join(cachePaths));\n+\t}\n+\t\n+\tprivate Pair<File, OutputStream> openCacheOutputStream(Long projectId, Long cacheId) {\n \t\tvar cacheHome = projectManager.getCacheDir(projectId);\n \t\tvar cacheDir = new File(cacheHome, String.valueOf(cacheId));\n-\t\tFileUtils.createDir(cacheDir);\n-\t\twriteString(new File(cacheDir, \"stamp\"), CACHE_VERSION + \":\" + Joiner.on('\\n').join(cachePaths));\n+\t\tFileUtils.cleanDir(cacheDir);\n \t\ttry {\n-\t\t\treturn new FilterOutputStream(new FileOutputStream(new File(cacheDir, \"data\"))) {\n+\t\t\treturn new ImmutablePair<>(cacheDir, new FilterOutputStream(new FileOutputStream(new File(cacheDir, \"data\"))) {\n \n \t\t\t\tprivate final byte[] buffer = new byte[CacheHelper.MARK_BUFFER_SIZE];\n \t\t\t\t\n@@ -271,7 +277,7 @@ public void close() throws IOException {\n \t\t\t\t\tFileUtils.writeByteArrayToFile(new File(cacheDir, \"marks\"), buffer);\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t};\t\t\n+\t\t\t});\t\t\n \t\t} catch (FileNotFoundException e) {\n \t\t\tthrow new RuntimeException(e);\n \t\t}\n@@ -281,23 +287,29 @@ public void close() throws IOException {\n \tpublic void uploadCache(Long projectId, Long cacheId, List<String> cachePaths,\n \t\t\t\t\t\t\tConsumer<OutputStream> cacheStreamHandler) {\n \t\twrite(JobCache.getLockName(projectId, cacheId), () -> {\n-\t\t\ttry (var os = openCacheOutputStream(projectId, cacheId, cachePaths)) {\n-\t\t\t\tcacheStreamHandler.accept(os);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n+\t\t\tvar result = openCacheOutputStream(projectId, cacheId);\n+\t\t\ttry {\n+\t\t\t\tcacheStreamHandler.accept(result.getRight());\n+\t\t\t} finally {\n+\t\t\t\tIOUtils.closeQuietly(result.getRight());\n \t\t\t}\n+\t\t\twriteStamp(result.getLeft(), cachePaths);\n \t\t});\n \t}\n \t\n \t@Override\n \tpublic void uploadCache(Long projectId, Long cacheId, List<String> cachePaths,\n \t\t\t\t\t\t\tInputStream cacheStream) {\n \t\twrite(JobCache.getLockName(projectId, cacheId), () -> {\n-\t\t\ttry (var os = openCacheOutputStream(projectId, cacheId, cachePaths)) {\n-\t\t\t\tIOUtils.copy(cacheStream, os, BUFFER_SIZE);\t\n+\t\t\tvar result = openCacheOutputStream(projectId, cacheId);\n+\t\t\ttry {\n+\t\t\t\tIOUtils.copy(cacheStream, result.getRight(), BUFFER_SIZE);\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new RuntimeException(e);\n+\t\t\t} finally {\n+\t\t\t\tIOUtils.closeQuietly(result.getRight());\n \t\t\t}\n+\t\t\twriteStamp(result.getLeft(), cachePaths);\n \t\t});\n \t}\n \n@@ -319,11 +331,14 @@ public Long getCacheSize(Long projectId, Long cacheId) {\n \t\treturn projectManager.runOnActiveServer(projectId, () -> read(JobCache.getLockName(projectId, cacheId), () -> {\n \t\t\tvar cacheDir = new File(projectManager.getCacheDir(projectId), String.valueOf(cacheId));\n \t\t\tif (cacheDir.exists()) {\n-\t\t\t\tvar stamp = readString(new File(cacheDir, \"stamp\"));\n-\t\t\t\tif (stamp.startsWith(CACHE_VERSION + \":\")) {\n-\t\t\t\t\tvar dataFile = new File(cacheDir, \"data\");\n-\t\t\t\t\tif (dataFile.exists())\n-\t\t\t\t\t\treturn dataFile.length();\n+\t\t\t\tvar stampFile = new File(cacheDir, \"stamp\");\n+\t\t\t\tif (stampFile.exists()) {\n+\t\t\t\t\tvar stamp = readString(stampFile);\n+\t\t\t\t\tif (stamp.startsWith(CACHE_VERSION + \":\")) {\n+\t\t\t\t\t\tvar dataFile = new File(cacheDir, \"data\");\n+\t\t\t\t\t\tif (dataFile.exists())\n+\t\t\t\t\t\t\treturn dataFile.length();\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn null;",
      "parent_sha": "706b596dca4a67abb74ce10761339b6845667f00"
    }
  },
  {
    "oid": "694f086b6da8f00aaede523acc606cff4792df4b",
    "message": "Add --find-renames parameter to LogCommand",
    "date": "2017-12-21T13:31:36Z",
    "url": "https://github.com/theonedev/onedev/commit/694f086b6da8f00aaede523acc606cff4792df4b",
    "details": {
      "sha": "49d8a33842725f9ff5d8d306e16990c4053d7950",
      "filename": "core/src/main/java/com/gitplex/server/git/command/LogCommand.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/theonedev/onedev/blob/694f086b6da8f00aaede523acc606cff4792df4b/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fgit%2Fcommand%2FLogCommand.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/694f086b6da8f00aaede523acc606cff4792df4b/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fgit%2Fcommand%2FLogCommand.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgitplex%2Fserver%2Fgit%2Fcommand%2FLogCommand.java?ref=694f086b6da8f00aaede523acc606cff4792df4b",
      "patch": "@@ -50,7 +50,7 @@ public Void call() {\n         \tcmd.addArgs(\"--branches\");\n         }\n   \n-        cmd.addArgs(\"--name-status\", \"--find-renames=50%\");\n+        cmd.addArgs(\"--name-status\", \"--find-renames\");\n         \n         AtomicReference<LogCommit.Builder> commitBuilderRef = new AtomicReference<>();\n         AtomicBoolean inFileChangesBlock = new AtomicBoolean();",
      "parent_sha": "7c77c208fbb1ebf337f13e372ea53d13e49b6d81"
    }
  },
  {
    "oid": "b9681b59192bbace98dfcbeb2589ff80a859ef8c",
    "message": "Improve AbstractEntity.equals/hash/compareTo to handle null id case.",
    "date": "2014-04-08T06:58:49Z",
    "url": "https://github.com/theonedev/onedev/commit/b9681b59192bbace98dfcbeb2589ff80a859ef8c",
    "details": {
      "sha": "c2ae2f50bb2bd4485f257d9b8f10fcdffc0d5bd2",
      "filename": "commons.hibernate/src/main/java/com/pmease/commons/hibernate/AbstractEntity.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/theonedev/onedev/blob/b9681b59192bbace98dfcbeb2589ff80a859ef8c/commons.hibernate%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fhibernate%2FAbstractEntity.java",
      "raw_url": "https://github.com/theonedev/onedev/raw/b9681b59192bbace98dfcbeb2589ff80a859ef8c/commons.hibernate%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fhibernate%2FAbstractEntity.java",
      "contents_url": "https://api.github.com/repos/theonedev/onedev/contents/commons.hibernate%2Fsrc%2Fmain%2Fjava%2Fcom%2Fpmease%2Fcommons%2Fhibernate%2FAbstractEntity.java?ref=b9681b59192bbace98dfcbeb2589ff80a859ef8c",
      "patch": "@@ -38,7 +38,7 @@ public boolean equals(Object other) {\n \t\tif (this == other)\n \t\t\treturn true;\n \t\tAbstractEntity otherEntity = (AbstractEntity) other;\n-\t\tif (getId() == null && otherEntity.getId() == null)\n+\t\tif (getId() == null || otherEntity.getId() == null)\n \t\t\treturn super.equals(other);\n \t\telse \n \t\t\treturn new EqualsBuilder().append(getId(), otherEntity.getId()).isEquals();\n@@ -53,7 +53,16 @@ public int hashCode() {\n \n \t@Override\n \tpublic int compareTo(AbstractEntity entity) {\n-\t\treturn getId().compareTo(entity.getId());\n+\t\tif (getId() != null) {\n+\t\t\tif (entity.getId() != null)\n+\t\t\t\treturn getId().compareTo(entity.getId());\n+\t\t\telse\n+\t\t\t\treturn -1;\n+\t\t} else if (entity.getId() != null) {\n+\t\t\treturn 1;\n+\t\t} else {\n+\t\t\treturn 0;\n+\t\t}\n \t}\n \t\n \tpublic boolean isNew() {",
      "parent_sha": "2556890b8a5e4f4f451c24b98b9361a49870c728"
    }
  }
]