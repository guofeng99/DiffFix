[
  {
    "oid": "503acc94086fb2db311b1327ea0bb42f5b97bd61",
    "message": "Introduced protections against HTTP header injection / smuggling attacks",
    "date": "2024-05-07T03:44:03Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/503acc94086fb2db311b1327ea0bb42f5b97bd61",
    "details": {
      "sha": "8910769745524f7347784cfd3af0c55a4e34e294",
      "filename": "src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/503acc94086fb2db311b1327ea0bb42f5b97bd61/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserBasedRateLimitingFilter.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/503acc94086fb2db311b1327ea0bb42f5b97bd61/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserBasedRateLimitingFilter.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserBasedRateLimitingFilter.java?ref=503acc94086fb2db311b1327ea0bb42f5b97bd61",
      "patch": "@@ -1,5 +1,6 @@\n package stirling.software.SPDF.config.security;\n \n+import io.github.pixee.security.Newlines;\n import java.io.IOException;\n import java.time.Duration;\n import java.util.Map;\n@@ -125,12 +126,12 @@ private void processRequest(\n         ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n \n         if (probe.isConsumed()) {\n-            response.setHeader(\"X-Rate-Limit-Remaining\", Long.toString(probe.getRemainingTokens()));\n+            response.setHeader(\"X-Rate-Limit-Remaining\", Newlines.stripAll(Long.toString(probe.getRemainingTokens())));\n             filterChain.doFilter(request, response);\n         } else {\n             long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n             response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n-            response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", String.valueOf(waitForRefill));\n+            response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", Newlines.stripAll(String.valueOf(waitForRefill)));\n             response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n         }\n     }",
      "parent_sha": "9b166da57dd9930e56fbeff494f71aea3f4d6b68"
    }
  },
  {
    "oid": "005b158ad340aa55a6353fa45a15440871d022d4",
    "message": "naming fix",
    "date": "2023-05-31T17:44:32Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/005b158ad340aa55a6353fa45a15440871d022d4",
    "details": {
      "sha": "c82e5f4ab54f9068b2dcb161204bd020d7c93015",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/other/MultiPageLayoutController.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/005b158ad340aa55a6353fa45a15440871d022d4/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FMultiPageLayoutController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/005b158ad340aa55a6353fa45a15440871d022d4/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FMultiPageLayoutController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FMultiPageLayoutController.java?ref=005b158ad340aa55a6353fa45a15440871d022d4",
      "patch": "@@ -6,7 +6,6 @@\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n@@ -25,6 +24,7 @@\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.media.Schema;\n+import stirling.software.SPDF.utils.PdfUtils;\n \n @RestController\n public class MultiPageLayoutController {\n@@ -92,9 +92,8 @@ public ResponseEntity<byte[]> mergeMultiplePagesIntoOne(\n \t\toutputPdf.close();\n \t\tbyte[] pdfContent = baos.toByteArray();\n \t\tpdfDoc.close();\n-\t\treturn ResponseEntity.ok()\n-\t\t\t\t.header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"modifiedDocument.pdf\\\"\")\n-\t\t\t\t.body(pdfContent);\n+\t\t\n+\t\treturn PdfUtils.bytesToWebResponse(pdfContent, file.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_layoutChanged.pdf\");\n \t}\n \n }",
      "parent_sha": "26d003e84048d84b4320c8e951500205b381bdce"
    }
  },
  {
    "oid": "ea6d4a293e3b4d103a310f947c8c906d943b1912",
    "message": "blank pages returns removed pages for verification #1574  (#1619)\n\nseparated blank and non-blank pages and created unified ZIP archive\r\n\r\nCo-authored-by: mannam <101550345+ManoharMannam@users.noreply.github.com>\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>",
    "date": "2024-08-03T09:30:53Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/ea6d4a293e3b4d103a310f947c8c906d943b1912",
    "details": {
      "sha": "4c050355363b22285048fc966b3d1ee551ca45f3",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java",
      "status": "modified",
      "additions": 53,
      "deletions": 29,
      "changes": 82,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/ea6d4a293e3b4d103a310f947c8c906d943b1912/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FBlankPageController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/ea6d4a293e3b4d103a310f947c8c906d943b1912/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FBlankPageController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FBlankPageController.java?ref=ea6d4a293e3b4d103a310f947c8c906d943b1912",
      "patch": "@@ -1,12 +1,12 @@\n package stirling.software.SPDF.controller.api.misc;\n \n import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.pdmodel.PDDocument;\n@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n@@ -50,66 +51,89 @@ public ResponseEntity<byte[]> removeBlankPages(@ModelAttribute RemoveBlankPagesR\n         int threshold = request.getThreshold();\n         float whitePercent = request.getWhitePercent();\n \n-        PDDocument document = null;\n-        try {\n-            document = Loader.loadPDF(inputFile.getBytes());\n+        try (PDDocument document = Loader.loadPDF(inputFile.getBytes())) {\n             PDPageTree pages = document.getDocumentCatalog().getPages();\n             PDFTextStripper textStripper = new PDFTextStripper();\n \n-            List<Integer> pagesToKeepIndex = new ArrayList<>();\n+            List<PDPage> nonBlankPages = new ArrayList<>();\n+            List<PDPage> blankPages = new ArrayList<>();\n             int pageIndex = 0;\n+\n             PDFRenderer pdfRenderer = new PDFRenderer(document);\n             pdfRenderer.setSubsamplingAllowed(true);\n             for (PDPage page : pages) {\n-                logger.info(\"checking page \" + pageIndex);\n+                logger.info(\"checking page {}\", pageIndex);\n                 textStripper.setStartPage(pageIndex + 1);\n                 textStripper.setEndPage(pageIndex + 1);\n                 String pageText = textStripper.getText(document);\n                 boolean hasText = !pageText.trim().isEmpty();\n \n-                Boolean blank = true;\n+                boolean blank = true;\n                 if (hasText) {\n-                    logger.info(\"page \" + pageIndex + \" has text, not blank\");\n+                    logger.info(\"page {} has text, not blank\", pageIndex);\n                     blank = false;\n                 } else {\n                     boolean hasImages = PdfUtils.hasImagesOnPage(page);\n                     if (hasImages) {\n-                        logger.info(\"page \" + pageIndex + \" has image, running blank detection\");\n+                        logger.info(\"page {} has image, running blank detection\", pageIndex);\n                         // Render image and save as temp file\n                         BufferedImage image = pdfRenderer.renderImageWithDPI(pageIndex, 30);\n                         blank = isBlankImage(image, threshold, whitePercent, threshold);\n                     }\n                 }\n \n                 if (blank) {\n-                    logger.info(\"Skipping, Image was  blank for page #\" + pageIndex);\n+                    logger.info(\"Skipping, Image was  blank for page #{}\", pageIndex);\n+                    blankPages.add(page);\n                 } else {\n-                    logger.info(\"page \" + pageIndex + \" has image which is not blank\");\n-                    pagesToKeepIndex.add(pageIndex);\n+                    logger.info(\"page {} has image which is not blank\", pageIndex);\n+                    nonBlankPages.add(page);\n                 }\n \n                 pageIndex++;\n             }\n-            // Remove pages not present in pagesToKeepIndex\n-            List<Integer> pageIndices =\n-                    IntStream.range(0, pages.getCount()).boxed().collect(Collectors.toList());\n-            Collections.reverse(pageIndices); // Reverse to prevent index shifting during removal\n-            for (Integer i : pageIndices) {\n-                if (!pagesToKeepIndex.contains(i)) {\n-                    pages.remove(i);\n-                }\n-            }\n \n-            return WebResponseUtils.pdfDocToWebResponse(\n-                    document,\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            ZipOutputStream zos = new ZipOutputStream(baos);\n+\n+            String filename =\n                     Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n-                                    .replaceFirst(\"[.][^.]+$\", \"\")\n-                            + \"_blanksRemoved.pdf\");\n+                            .replaceFirst(\"[.][^.]+$\", \"\");\n+\n+            if (!nonBlankPages.isEmpty()) {\n+                createZipEntry(zos, nonBlankPages, filename + \"_nonBlankPages.pdf\");\n+            } else {\n+                createZipEntry(zos, blankPages, filename + \"_allBlankPages.pdf\");\n+            }\n+\n+            if (!nonBlankPages.isEmpty() && !blankPages.isEmpty()) {\n+                createZipEntry(zos, blankPages, filename + \"_blankPages.pdf\");\n+            }\n+\n+            zos.close();\n+\n+            logger.info(\"Returning ZIP file: {}\", filename + \"_processed.zip\");\n+            return WebResponseUtils.boasToWebResponse(\n+                    baos, filename + \"_processed.zip\", MediaType.APPLICATION_OCTET_STREAM);\n+\n         } catch (IOException e) {\n             logger.error(\"exception\", e);\n             return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);\n-        } finally {\n-            if (document != null) document.close();\n+        }\n+    }\n+\n+    public void createZipEntry(ZipOutputStream zos, List<PDPage> pages, String entryName)\n+            throws IOException {\n+        try (PDDocument document = new PDDocument()) {\n+\n+            for (PDPage page : pages) {\n+                document.addPage(page);\n+            }\n+\n+            ZipEntry zipEntry = new ZipEntry(entryName);\n+            zos.putNextEntry(zipEntry);\n+            document.save(zos);\n+            zos.closeEntry();\n         }\n     }\n ",
      "parent_sha": "191e79da18eee10b75246084cee6245455962ccb"
    }
  },
  {
    "oid": "4dcf2f5870ebee2a49222ae5ce5af4b3ef74b369",
    "message": "Update CustomOAuth2LogoutSuccessHandler.java",
    "date": "2024-05-25T16:25:13Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/4dcf2f5870ebee2a49222ae5ce5af4b3ef74b369",
    "details": {
      "sha": "f8b76ab96e80754364b3ae87687bd8201703bc15",
      "filename": "src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2LogoutSuccessHandler.java",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/4dcf2f5870ebee2a49222ae5ce5af4b3ef74b369/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Foauth2%2FCustomOAuth2LogoutSuccessHandler.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/4dcf2f5870ebee2a49222ae5ce5af4b3ef74b369/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Foauth2%2FCustomOAuth2LogoutSuccessHandler.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Foauth2%2FCustomOAuth2LogoutSuccessHandler.java?ref=4dcf2f5870ebee2a49222ae5ce5af4b3ef74b369",
      "patch": "@@ -37,29 +37,26 @@ public void onLogoutSuccess(\n             HttpServletRequest request, HttpServletResponse response, Authentication authentication)\n             throws IOException, ServletException {\n         String param = \"logout=true\";\n-        String provider = null;\n+        String registrationId = null;\n         String issuer = null;\n         String clientId = null;\n \n         OAUTH2 oauth = applicationProperties.getSecurity().getOAUTH2();\n \n         if (authentication instanceof OAuth2AuthenticationToken) {\n             OAuth2AuthenticationToken oauthToken = (OAuth2AuthenticationToken) authentication;\n-            String registrationId = oauthToken.getAuthorizedClientRegistrationId();\n+            registrationId = oauthToken.getAuthorizedClientRegistrationId();\n \n-            provider = registrationId;\n-            logger.info(registrationId);\n-            Provider pro;\n             try {\n-                pro = oauth.getClient().get(registrationId);\n-                issuer = pro.getIssuer();\n-                clientId = pro.getClientId();\n+                Provider provider = oauth.getClient().get(registrationId);\n+                issuer = provider.getIssuer();\n+                clientId = provider.getClientId();\n             } catch (Exception e) {\n                 e.printStackTrace();\n             }\n \n         } else {\n-            provider = oauth.getProvider() != null ? oauth.getProvider() : \"\";\n+            registrationId = oauth.getProvider() != null ? oauth.getProvider() : \"\";\n             issuer = oauth.getIssuer();\n             clientId = oauth.getClientId();\n         }\n@@ -84,7 +81,7 @@ public void onLogoutSuccess(\n             logger.info(\"Session invalidated: \" + sessionId);\n         }\n \n-        switch (provider) {\n+        switch (registrationId) {\n             case \"keycloak\":\n                 // Add Keycloak specific logout URL if needed\n                 String logoutUrl =",
      "parent_sha": "c2179ccd63bd476aeeb2b5e265a28ac3147b5455"
    }
  },
  {
    "oid": "3469beb5b31e795dd664e4e0f816aa923834a52c",
    "message": "feat: merge pdf into multiple frames if the format is TIFF instead of a single big image",
    "date": "2023-12-25T03:52:39Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/3469beb5b31e795dd664e4e0f816aa923834a52c",
    "details": {
      "sha": "22e09d6a90b26fca797449a324221e1e90d19ca8",
      "filename": "src/main/java/stirling/software/SPDF/utils/PdfUtils.java",
      "status": "modified",
      "additions": 38,
      "deletions": 12,
      "changes": 50,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/3469beb5b31e795dd664e4e0f816aa923834a52c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/3469beb5b31e795dd664e4e0f816aa923834a52c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java?ref=3469beb5b31e795dd664e4e0f816aa923834a52c",
      "patch": "@@ -16,7 +16,11 @@\n import java.util.zip.ZipOutputStream;\r\n \r\n import javax.imageio.ImageIO;\r\n+import javax.imageio.IIOImage;\r\n import javax.imageio.ImageReader;\r\n+import javax.imageio.ImageWriter;\r\n+import javax.imageio.ImageWriteParam;\r\n+import javax.imageio.stream.ImageOutputStream;\r\n \r\n import org.apache.pdfbox.pdmodel.PDDocument;\r\n import org.apache.pdfbox.pdmodel.PDPage;\r\n@@ -206,21 +210,43 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT\n                 images.add(pdfRenderer.renderImageWithDPI(i, DPI, colorType));\r\n             }\r\n \r\n-            if (singleImage) {\r\n-                // Combine all images into a single big image\r\n-                BufferedImage combined = new BufferedImage(images.get(0).getWidth(), images.get(0).getHeight() * pageCount, BufferedImage.TYPE_INT_RGB);\r\n-                Graphics g = combined.getGraphics();\r\n-                for (int i = 0; i < images.size(); i++) {\r\n-                    g.drawImage(images.get(i), 0, i * images.get(0).getHeight(), null);\r\n-                }\r\n-                images = Arrays.asList(combined);\r\n-            }\r\n-\r\n             // Create a ByteArrayOutputStream to save the image(s) to\r\n             ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n+\r\n             if (singleImage) {\r\n-                // Write the image to the output stream\r\n-                ImageIO.write(images.get(0), imageType, baos);\r\n+                if (imageType.toLowerCase().equals(\"tiff\") || imageType.toLowerCase().equals(\"tif\")) {\r\n+                    // Write the images to the output stream as a TIFF with multiple frames\r\n+                    ImageWriter writer = ImageIO.getImageWritersByFormatName(\"tiff\").next();\r\n+                    ImageWriteParam param = writer.getDefaultWriteParam();\r\n+                    param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\r\n+                    param.setCompressionType(\"ZLib\");\r\n+                    param.setCompressionQuality(1.0f);\r\n+\r\n+                    try (ImageOutputStream ios = ImageIO.createImageOutputStream(baos)) {\r\n+                        writer.setOutput(ios);\r\n+                        writer.prepareWriteSequence(null);\r\n+\r\n+                        for (int i = 0; i < images.size(); ++i) {\r\n+                            BufferedImage image = images.get(i);\r\n+                            writer.writeToSequence(new IIOImage(image, null, null), param);\r\n+                        }\r\n+\r\n+                        writer.endWriteSequence();\r\n+                    }\r\n+\r\n+                    writer.dispose();\r\n+                } else {\r\n+                    // Combine all images into a single big image\r\n+                    BufferedImage combined = new BufferedImage(images.get(0).getWidth(), images.get(0).getHeight() * pageCount, BufferedImage.TYPE_INT_RGB);\r\n+                    Graphics g = combined.getGraphics();\r\n+\r\n+                    for (int i = 0; i < images.size(); i++) {\r\n+                        g.drawImage(images.get(i), 0, i * images.get(0).getHeight(), null);\r\n+                    }\r\n+\r\n+                    // Write the image to the output stream\r\n+                    ImageIO.write(combined, imageType, baos);\r\n+                }\r\n \r\n                 // Log that the image was successfully written to the byte array\r\n                 logger.info(\"Image successfully written to byte array\");\r",
      "parent_sha": "491be75e1fca516f76657d0e270a31a02f649d0c"
    }
  },
  {
    "oid": "74df26db0c39a3f1019ac5bc80948c84ea885231",
    "message": "\ud83d\udd27 Replace toList() with collect(Collectors.toList()) (#3259)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Replaced the usage of `toList()` with `collect(Collectors.toList())`\nin `DatabaseService.java`.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.",
    "date": "2025-03-27T21:06:43Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/74df26db0c39a3f1019ac5bc80948c84ea885231",
    "details": {
      "sha": "a8daede36dbfbefb62f4942cd608afd6d5a84d99",
      "filename": "src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/74df26db0c39a3f1019ac5bc80948c84ea885231/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseService.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/74df26db0c39a3f1019ac5bc80948c84ea885231/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseService.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseService.java?ref=74df26db0c39a3f1019ac5bc80948c84ea885231",
      "patch": "@@ -17,6 +17,7 @@\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import javax.sql.DataSource;\n \n@@ -169,7 +170,7 @@ public void exportDatabase() {\n         List<FileInfo> filteredBackupList =\n                 this.getBackupList().stream()\n                         .filter(backup -> !backup.getFileName().startsWith(BACKUP_PREFIX + \"user_\"))\n-                        .toList();\n+                        .collect(Collectors.toList());\n \n         if (filteredBackupList.size() > 5) {\n             deleteOldestBackup(filteredBackupList);",
      "parent_sha": "8836093fff29fa19bb013658d6a62f9a3780e6a5"
    }
  },
  {
    "oid": "edde1a643651bf24924c05a5840535b2bbf50281",
    "message": "fix: version showing as 0.0.0",
    "date": "2024-01-10T02:13:35Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/edde1a643651bf24924c05a5840535b2bbf50281",
    "details": {
      "sha": "8083f2837f05a140c6a985cf12376883cdb2a389",
      "filename": "src/main/java/stirling/software/SPDF/config/AppConfig.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/edde1a643651bf24924c05a5840535b2bbf50281/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/edde1a643651bf24924c05a5840535b2bbf50281/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java?ref=edde1a643651bf24924c05a5840535b2bbf50281",
      "patch": "@@ -1,8 +1,13 @@\n package stirling.software.SPDF.config;\n \n+import java.io.IOException;\n+import java.util.Properties;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n \n import stirling.software.SPDF.model.ApplicationProperties;\n \n@@ -24,8 +29,15 @@ public String appName() {\n \n     @Bean(name = \"appVersion\")\n     public String appVersion() {\n-        String version = getClass().getPackage().getImplementationVersion();\n-        return (version != null) ? version : \"0.0.0\";\n+        Resource resource = new ClassPathResource(\"version.properties\");\n+        Properties props = new Properties();\n+        try {\n+            props.load(resource.getInputStream());\n+            return props.getProperty(\"version\");\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return \"0.0.0\";\n     }\n \n     @Bean(name = \"homeText\")",
      "parent_sha": "362a7ff434b404eb6220831baa6f04d361850b3c"
    }
  },
  {
    "oid": "cada1fd80fc5179c4b2f2958b0423cf1c4668243",
    "message": "Update FromPDFController.java",
    "date": "2023-01-28T12:49:37Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/cada1fd80fc5179c4b2f2958b0423cf1c4668243",
    "details": {
      "sha": "17a28c27a63cc0c48f4c8314abb10a617992fe5a",
      "filename": "src/main/java/stirling/software/SPDF/controller/FromPDFController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/cada1fd80fc5179c4b2f2958b0423cf1c4668243/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2FFromPDFController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/cada1fd80fc5179c4b2f2958b0423cf1c4668243/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2FFromPDFController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2FFromPDFController.java?ref=cada1fd80fc5179c4b2f2958b0423cf1c4668243",
      "patch": "@@ -42,7 +42,7 @@ public ResponseEntity<byte[]> convertToImage(@RequestParam(\"fileInput\") Multipar\n \tprivate String getMediaType(String imageFormat) {\r\n \t    if(imageFormat.equalsIgnoreCase(\"PNG\"))\r\n \t        return \"image/png\";\r\n-\t    else if(imageFormat.equalsIgnoreCase(\"JPEG\"))\r\n+\t    else if(imageFormat.equalsIgnoreCase(\"JPEG\") || imageFormat.equalsIgnoreCase(\"JPG\") )\r\n \t        return \"image/jpeg\";\r\n \t    else if(imageFormat.equalsIgnoreCase(\"GIF\"))\r\n \t        return \"image/gif\";\r",
      "parent_sha": "ae638eec9424a74d7725e849709beaac4fd7ab29"
    }
  },
  {
    "oid": "507d21772d212299514f254471008433a64ed3ff",
    "message": "Fix issue #2842: Handle qpdf exit code 3 as success with warnings (#2883)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**:\n- Modified the `ProcessExecutor` class to accept exit code `3` from\n**qpdf** as a success with warnings.\n- Added a check to ensure that only **qpdf**\u2019s exit code `3` is treated\nas a warning.\n- Added a warning log for **qpdf** exit code `3` to provide better\nvisibility into the repair process.\n\n- **Why the change was made**:\n- The repair process was failing when **qpdf** returned exit code `3`,\neven though the operation succeeded with warnings. This caused\nunnecessary errors for users.\n- The changes ensure that PDFs with minor structural issues (e.g.,\nmismatched object counts) are still repaired successfully, while logging\nwarnings for transparency.\n- Added a check to ensure that only **qpdf**\u2019s exit code `3` is treated\nas a warning, preventing potential issues with other tools that might\nuse exit code `3` for actual errors.\n\nCloses #2842\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally.\n- Verified that exit code `3` is only treated as a warning for **qpdf**\nand not for other tools.\n\n---\n\n### Additional Notes\n- The changes align with **qpdf**'s behavior, where exit code `3`\nindicates a successful operation with warnings.\n- Added a check to ensure that only **qpdf**\u2019s exit code `3` is treated\nas a warning, preventing potential issues with other tools.\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>",
    "date": "2025-02-04T21:01:41Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/507d21772d212299514f254471008433a64ed3ff",
    "details": {
      "sha": "dd1e7e894e8c409cd35317f449f2d1417ec54f99",
      "filename": "src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java",
      "status": "modified",
      "additions": 21,
      "deletions": 10,
      "changes": 31,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/507d21772d212299514f254471008433a64ed3ff/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/507d21772d212299514f254471008433a64ed3ff/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java?ref=507d21772d212299514f254471008433a64ed3ff",
      "patch": "@@ -218,6 +218,9 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n             errorReaderThread.join();\n             outputReaderThread.join();\n \n+            boolean isQpdf =\n+                    command != null && !command.isEmpty() && command.get(0).contains(\"qpdf\");\n+\n             if (outputLines.size() > 0) {\n                 String outputMessage = String.join(\"\\n\", outputLines);\n                 messages += outputMessage;\n@@ -233,20 +236,28 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n                     log.warn(\"Command error output:\\n\" + errorMessage);\n                 }\n                 if (exitCode != 0) {\n-                    throw new IOException(\n-                            \"Command process failed with exit code \"\n-                                    + exitCode\n-                                    + \". Error message: \"\n-                                    + errorMessage);\n+                    if (isQpdf && exitCode == 3) {\n+                        log.warn(\"qpdf succeeded with warnings: {}\", messages);\n+                    } else {\n+                        throw new IOException(\n+                                \"Command process failed with exit code \"\n+                                        + exitCode\n+                                        + \". Error message: \"\n+                                        + errorMessage);\n+                    }\n                 }\n             }\n \n             if (exitCode != 0) {\n-                throw new IOException(\n-                        \"Command process failed with exit code \"\n-                                + exitCode\n-                                + \"\\nLogs: \"\n-                                + messages);\n+                if (isQpdf && exitCode == 3) {\n+                    log.warn(\"qpdf succeeded with warnings: {}\", messages);\n+                } else {\n+                    throw new IOException(\n+                            \"Command process failed with exit code \"\n+                                    + exitCode\n+                                    + \"\\nLogs: \"\n+                                    + messages);\n+                }\n             }\n         } finally {\n             semaphore.release();",
      "parent_sha": "5bf050d77f7feceedc24292a6cfa278a6c3a3b84"
    }
  },
  {
    "oid": "efc07522ab659fc1ba4888c058a97617d3d40b76",
    "message": "minor",
    "date": "2024-06-02T11:04:29Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/efc07522ab659fc1ba4888c058a97617d3d40b76",
    "details": {
      "sha": "06e195126ca9aa46ea3d59ea74076ae434a72c60",
      "filename": "src/main/java/stirling/software/SPDF/LibreOfficeListener.java",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/efc07522ab659fc1ba4888c058a97617d3d40b76/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FLibreOfficeListener.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/efc07522ab659fc1ba4888c058a97617d3d40b76/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FLibreOfficeListener.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FLibreOfficeListener.java?ref=efc07522ab659fc1ba4888c058a97617d3d40b76",
      "patch": "@@ -31,14 +31,12 @@ public static LibreOfficeListener getInstance() {\n     private LibreOfficeListener() {}\n \n     private boolean isListenerRunning() {\n-        try {\n-            System.out.println(\"waiting for listener to start\");\n-            try (Socket socket = new Socket()) {\n-                socket.connect(\n-                        new InetSocketAddress(\"localhost\", 2002), 1000); // Timeout after 1 second\n-                return true;\n-            }\n-        } catch (IOException e) {\n+        System.out.println(\"waiting for listener to start\");\n+        try (Socket socket = new Socket()) {\n+            socket.connect(\n+                    new InetSocketAddress(\"localhost\", 2002), 1000); // Timeout after 1 second\n+            return true;\n+        } catch (Exception e) {\n             return false;\n         }\n     }",
      "parent_sha": "31938b662cab920e2f162d5cad442d50487ec415"
    }
  },
  {
    "oid": "d3ae9f9a81224dbc149c4872c3ec8f238c303d65",
    "message": "Prohibit the registration of unauthorized usernames (#2240)",
    "date": "2024-11-15T09:36:59Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/d3ae9f9a81224dbc149c4872c3ec8f238c303d65",
    "details": {
      "sha": "6b1457dc3828f85f7ac61ea8cf3808f57f6d83b3",
      "filename": "src/main/java/stirling/software/SPDF/config/security/UserService.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/d3ae9f9a81224dbc149c4872c3ec8f238c303d65/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserService.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/d3ae9f9a81224dbc149c4872c3ec8f238c303d65/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserService.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserService.java?ref=d3ae9f9a81224dbc149c4872c3ec8f238c303d65",
      "patch": "@@ -304,7 +304,13 @@ public boolean isUsernameValid(String username) {\n         boolean isValidEmail =\n                 username.matches(\n                         \"^(?=.{1,64}@)[A-Za-z0-9]+(\\\\.[A-Za-z0-9_+.-]+)*@[^-][A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*(\\\\.[A-Za-z]{2,})$\");\n-        return isValidSimpleUsername || isValidEmail;\n+\n+        List<String> notAllowedUserList = new ArrayList<>();\n+        notAllowedUserList.add(\"ALL_USERS\".toLowerCase());\n+\n+        boolean notAllowedUser = notAllowedUserList.contains(username.toLowerCase());\n+\n+        return (isValidSimpleUsername || isValidEmail) && !notAllowedUser;\n     }\n \n     private String getInvalidUsernameMessage() {",
      "parent_sha": "4a70d680a4fefd55dabfa6fc528ebf020848d979"
    }
  },
  {
    "oid": "db488b39bb18ecb992409775584ac868e068a819",
    "message": "Introduced protections against predictable RNG abuse",
    "date": "2023-10-05T20:29:56Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/db488b39bb18ecb992409775584ac868e068a819",
    "details": {
      "sha": "099e84116eabeb45caef11ccdae2db9a18fa00cf",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/FakeScanControllerWIP.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/db488b39bb18ecb992409775584ac868e068a819/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FFakeScanControllerWIP.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/db488b39bb18ecb992409775584ac868e068a819/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FFakeScanControllerWIP.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FFakeScanControllerWIP.java?ref=db488b39bb18ecb992409775584ac868e068a819",
      "patch": "@@ -13,6 +13,7 @@\n //Required for file input/output\n import java.io.File;\n import java.io.IOException;\n+import java.security.SecureRandom;\n //Other required classes\n import java.util.Random;\n \n@@ -85,7 +86,7 @@ public ResponseEntity<byte[]> repairPdf(@ModelAttribute PDFFile request) throws\n     \top.filter(sourceImage, destinationImage);\n \n     \t// Apply a rotation effect\n-    \tdouble rotationRequired = Math.toRadians((new Random().nextInt(3 - 1) + 1));  // Random angle between 1 and 3 degrees\n+    \tdouble rotationRequired = Math.toRadians((new SecureRandom().nextInt(3 - 1) + 1));  // Random angle between 1 and 3 degrees\n     \tdouble locationX = destinationImage.getWidth() / 2;\n     \tdouble locationY = destinationImage.getHeight() / 2;\n     \tAffineTransform tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);\n@@ -103,7 +104,7 @@ public ResponseEntity<byte[]> repairPdf(@ModelAttribute PDFFile request) throws\n     \tdestinationImage = blurOp.filter(destinationImage, null);\n \n     \t// Add noise to the image based on the \"dirtiness\"\n-    \tRandom random = new Random();\n+    \tRandom random = new SecureRandom();\n     \tfor (int y = 0; y < destinationImage.getHeight(); y++) {\n     \t    for (int x = 0; x < destinationImage.getWidth(); x++) {\n     \t        if (random.nextInt(100) < dirtiness) {",
      "parent_sha": "e9fc0243326506cb4d5965bed4468ab42e2544f6"
    }
  },
  {
    "oid": "9da88b7652835cdc17c18fae749d527bf39e1caf",
    "message": "fixed wrong filename generation through stamp tool #757",
    "date": "2024-02-09T14:05:34Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/9da88b7652835cdc17c18fae749d527bf39e1caf",
    "details": {
      "sha": "bb4673312fa46999c88ef7e3c040bfaf7dd63157",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java",
      "status": "modified",
      "additions": 15,
      "deletions": 17,
      "changes": 32,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/9da88b7652835cdc17c18fae749d527bf39e1caf/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/9da88b7652835cdc17c18fae749d527bf39e1caf/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java?ref=9da88b7652835cdc17c18fae749d527bf39e1caf",
      "patch": "@@ -48,13 +48,13 @@ public class StampController {\n     @Operation(\n             summary = \"Add stamp to a PDF file\",\n             description =\n-                    \"This endpoint adds a stamp to a given PDF file. Users can specify the watermark type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO\")\n+                    \"This endpoint adds a stamp to a given PDF file. Users can specify the stamp type (text or image), rotation, opacity, width spacer, and height spacer. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n             throws IOException, Exception {\n         MultipartFile pdfFile = request.getFileInput();\n-        String watermarkType = request.getStampType();\n-        String watermarkText = request.getStampText();\n-        MultipartFile watermarkImage = request.getStampImage();\n+        String stampType = request.getStampType();\n+        String stampText = request.getStampText();\n+        MultipartFile stampImage = request.getStampImage();\n         String alphabet = request.getAlphabet();\n         float fontSize = request.getFontSize();\n         float rotation = request.getRotation();\n@@ -99,10 +99,10 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n             graphicsState.setNonStrokingAlphaConstant(opacity);\n             contentStream.setGraphicsStateParameters(graphicsState);\n \n-            if (\"text\".equalsIgnoreCase(watermarkType)) {\n+            if (\"text\".equalsIgnoreCase(stampType)) {\n                 addTextStamp(\n                         contentStream,\n-                        watermarkText,\n+                        stampText,\n                         document,\n                         page,\n                         rotation,\n@@ -113,10 +113,10 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n                         overrideY,\n                         margin,\n                         customColor);\n-            } else if (\"image\".equalsIgnoreCase(watermarkType)) {\n+            } else if (\"image\".equalsIgnoreCase(stampType)) {\n                 addImageStamp(\n                         contentStream,\n-                        watermarkImage,\n+                        stampImage,\n                         document,\n                         page,\n                         rotation,\n@@ -134,12 +134,12 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n                 document,\n                 Filenames.toSimpleFileName(pdfFile.getOriginalFilename())\n                                 .replaceFirst(\"[.][^.]+$\", \"\")\n-                        + \"_watermarked.pdf\");\n+                        + \"_stamped.pdf\");\n     }\n \n     private void addTextStamp(\n             PDPageContentStream contentStream,\n-            String watermarkText,\n+            String stampText,\n             PDDocument document,\n             PDPage page,\n             float rotation,\n@@ -208,23 +208,21 @@ private void addTextStamp(\n             x = overrideX;\n             y = overrideY;\n         } else {\n-            x =\n-                    calculatePositionX(\n-                            pageSize, position, fontSize, font, fontSize, watermarkText, margin);\n+            x = calculatePositionX(pageSize, position, fontSize, font, fontSize, stampText, margin);\n             y =\n                     calculatePositionY(\n                             pageSize, position, calculateTextCapHeight(font, fontSize), margin);\n         }\n \n         contentStream.beginText();\n         contentStream.setTextMatrix(Matrix.getRotateInstance(Math.toRadians(rotation), x, y));\n-        contentStream.showText(watermarkText);\n+        contentStream.showText(stampText);\n         contentStream.endText();\n     }\n \n     private void addImageStamp(\n             PDPageContentStream contentStream,\n-            MultipartFile watermarkImage,\n+            MultipartFile stampImage,\n             PDDocument document,\n             PDPage page,\n             float rotation,\n@@ -235,8 +233,8 @@ private void addImageStamp(\n             float margin)\n             throws IOException {\n \n-        // Load the watermark image\n-        BufferedImage image = ImageIO.read(watermarkImage.getInputStream());\n+        // Load the stamp image\n+        BufferedImage image = ImageIO.read(stampImage.getInputStream());\n \n         // Compute width based on original aspect ratio\n         float aspectRatio = (float) image.getWidth() / (float) image.getHeight();",
      "parent_sha": "729c8006d2533a69cce53a8e6855d2b5e5c6e784"
    }
  },
  {
    "oid": "6fef4ea82c1ce5b0f037803f06b51c85c41d7077",
    "message": "Update SPdfApplication.java",
    "date": "2024-02-23T18:31:20Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/6fef4ea82c1ce5b0f037803f06b51c85c41d7077",
    "details": {
      "sha": "b2291186f4b2f9c27f925bab8875d3c0824ad3d1",
      "filename": "src/main/java/stirling/software/SPDF/SPdfApplication.java",
      "status": "modified",
      "additions": 21,
      "deletions": 11,
      "changes": 32,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/6fef4ea82c1ce5b0f037803f06b51c85c41d7077/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/6fef4ea82c1ce5b0f037803f06b51c85c41d7077/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java?ref=6fef4ea82c1ce5b0f037803f06b51c85c41d7077",
      "patch": "@@ -1,6 +1,8 @@\n package stirling.software.SPDF;\n \n+import java.io.IOException;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Collections;\n \n@@ -9,7 +11,8 @@\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.core.env.Environment;\n import org.springframework.scheduling.annotation.EnableScheduling;\n-\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import io.github.pixee.security.SystemCommand;\n \n import jakarta.annotation.PostConstruct;\n@@ -20,6 +23,8 @@\n @EnableScheduling\n public class SPdfApplication {\n \n+    private static final Logger logger = LoggerFactory.getLogger(SPdfApplication.class);\n+\n     @Autowired private Environment env;\n \n     @PostConstruct\n@@ -39,38 +44,43 @@ public void init() {\n                     SystemCommand.runCommand(rt, \"rundll32 url.dll,FileProtocolHandler \" + url);\n                 }\n             } catch (Exception e) {\n-                e.printStackTrace();\n+                logger.error(\"Error opening browser: {}\", e.getMessage());\n             }\n         }\n     }\n \n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws IOException, InterruptedException {\n         SpringApplication app = new SpringApplication(SPdfApplication.class);\n         app.addInitializers(new ConfigInitializer());\n         if (Files.exists(Paths.get(\"configs/settings.yml\"))) {\n             app.setDefaultProperties(\n                     Collections.singletonMap(\n                             \"spring.config.additional-location\", \"file:configs/settings.yml\"));\n         } else {\n-            System.out.println(\n-                    \"External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.\");\n+            logger.warn(\"External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.\");\n         }\n         app.run(args);\n \n         try {\n             Thread.sleep(1000);\n         } catch (InterruptedException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n+            throw new InterruptedException(\"Error\");\n         }\n \n-        GeneralUtils.createDir(\"customFiles/static/\");\n-        GeneralUtils.createDir(\"customFiles/templates/\");\n+        try {\n+            Files.createDirectories(Path.of(\"customFiles/static/\"));\n+            Files.createDirectories(Path.of(\"customFiles/templates/\"));\n+        } catch (Exception e) {\n+            logger.error(\"Error creating directories: {}\", e.getMessage());\n+        }\n+        printStartupLogs();\n+    }\n \n-        System.out.println(\"Stirling-PDF Started.\");\n+    private static void printStartupLogs() {\n+        logger.info(\"Stirling-PDF Started.\");\n \n         String url = \"http://localhost:\" + getPort();\n-        System.out.println(\"Navigate to \" + url);\n+        logger.info(\"Navigate to {}\", url);\n     }\n \n     public static String getPort() {",
      "parent_sha": "8670afb96f52cce3d172f48813546355fac08ba2"
    }
  },
  {
    "oid": "39b9ea9f1d466c106f246d185e22c8c09cf4df63",
    "message": "fix typo",
    "date": "2023-06-05T17:25:36Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/39b9ea9f1d466c106f246d185e22c8c09cf4df63",
    "details": {
      "sha": "84b5a7b1fce408c9859a0088215c688358739692",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/39b9ea9f1d466c106f246d185e22c8c09cf4df63/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/39b9ea9f1d466c106f246d185e22c8c09cf4df63/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java?ref=39b9ea9f1d466c106f246d185e22c8c09cf4df63",
      "patch": "@@ -99,7 +99,7 @@ public ResponseEntity<byte[]> convertToPdf(\n                     boolean autoRotate) throws IOException {\n         // Convert the file to PDF and get the resulting bytes\n         byte[] bytes = PdfUtils.imageToPdf(file, stretchToFit, autoRotate, colorType);\n-        return WebResponseUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_coverted.pdf\");\n+        return WebResponseUtils.bytesToWebResponse(bytes, file[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_converted.pdf\");\n     }\n \n     private String getMediaType(String imageFormat) {",
      "parent_sha": "e2a787e519bf4e4f4163acff2819ffbf223a89bf"
    }
  },
  {
    "oid": "23672cd18d968fac55a9ccb4b1fb63a4cc0d9697",
    "message": "Modernize and secure temp file creation",
    "date": "2024-02-10T00:08:18Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/23672cd18d968fac55a9ccb4b1fb63a4cc0d9697",
    "details": {
      "sha": "da408a23cdf869220be3a4f5480bdc3aded02a94",
      "filename": "src/main/java/stirling/software/SPDF/utils/FileToPdf.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/23672cd18d968fac55a9ccb4b1fb63a4cc0d9697/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileToPdf.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/23672cd18d968fac55a9ccb4b1fb63a4cc0d9697/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileToPdf.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileToPdf.java?ref=23672cd18d968fac55a9ccb4b1fb63a4cc0d9697",
      "patch": "@@ -54,7 +54,7 @@ public static byte[] convertHtmlToPdf(\n \n                 if (request.getZoom() != 1.0) {\n                     // Create a temporary CSS file\n-                    File tempCssFile = File.createTempFile(\"customStyle\", \".css\");\n+                    File tempCssFile = Files.createTempFile(\"customStyle\", \".css\").toFile();\n                     try (FileWriter writer = new FileWriter(tempCssFile)) {\n                         // Write the CSS rule to the file\n                         writer.write(\"body { zoom: \" + request.getZoom() + \"; }\");",
      "parent_sha": "68c094166603bd0a5c54ff3706fc4bb2ca68bdf9"
    }
  },
  {
    "oid": "ff6c55d1d01ceb47a6c86c1fd3406b13302b0ed6",
    "message": "fix naming issues in split and made it allign with others",
    "date": "2023-06-07T13:01:37Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/ff6c55d1d01ceb47a6c86c1fd3406b13302b0ed6",
    "details": {
      "sha": "afee784c5a9ea6c2391507fa710b8cfabb1ab500",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/SplitPDFController.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/ff6c55d1d01ceb47a6c86c1fd3406b13302b0ed6/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPDFController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/ff6c55d1d01ceb47a6c86c1fd3406b13302b0ed6/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPDFController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPDFController.java?ref=ff6c55d1d01ceb47a6c86c1fd3406b13302b0ed6",
      "patch": "@@ -29,6 +29,7 @@\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.Parameter;\n import stirling.software.SPDF.utils.GeneralUtils;\n+import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n public class SplitPDFController {\n@@ -38,7 +39,7 @@ public class SplitPDFController {\n     @PostMapping(consumes = \"multipart/form-data\", value = \"/split-pages\")\n     @Operation(summary = \"Split a PDF file into separate documents\",\n             description = \"This endpoint splits a given PDF file into separate documents based on the specified page numbers or ranges. Users can specify pages using individual numbers, ranges, or 'all' for every page.\")\n-    public ResponseEntity<Resource> splitPdf(\n+    public ResponseEntity<byte[]> splitPdf(\n             @RequestPart(required = true, value = \"fileInput\")\n             @Parameter(description = \"The input PDF file to be split\")\n                     MultipartFile file,\n@@ -97,10 +98,11 @@ public ResponseEntity<Resource> splitPdf(\n \n         Path zipFile = Files.createTempFile(\"split_documents\", \".zip\");\n \n+        String filename = file.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\");\n         try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(zipFile))) {\n             // loop through the split documents and write them to the zip file\n             for (int i = 0; i < splitDocumentsBoas.size(); i++) {\n-                String fileName = \"split_document_\" + (i + 1) + \".pdf\";\n+                String fileName = filename + \"_\" + (i + 1) + \".pdf\";\n                 ByteArrayOutputStream baos = splitDocumentsBoas.get(i);\n                 byte[] pdf = baos.toByteArray();\n \n@@ -119,12 +121,11 @@ public ResponseEntity<Resource> splitPdf(\n \n         logger.info(\"Successfully created zip file with split documents: {}\", zipFile.toString());\n         byte[] data = Files.readAllBytes(zipFile);\n-        ByteArrayResource resource = new ByteArrayResource(data);\n         Files.delete(zipFile);\n \n         // return the Resource in the response\n-        return ResponseEntity.ok().header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\" + file.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_split.zip\")\n-                .contentType(MediaType.APPLICATION_OCTET_STREAM).contentLength(resource.contentLength()).body(resource);\n+        return WebResponseUtils.bytesToWebResponse(data, filename + \".zip\", MediaType.APPLICATION_OCTET_STREAM);\n+        \n     }\n \n }",
      "parent_sha": "d9f8facf2e00254006fea3cdf40f0ec911316d0d"
    }
  },
  {
    "oid": "83ba1899b7c42fc6f4e0c182d300d6eab31b9012",
    "message": "metric filters",
    "date": "2023-08-09T19:30:19Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/83ba1899b7c42fc6f4e0c182d300d6eab31b9012",
    "details": {
      "sha": "326ba09db6778969528442207a4ce1dfe9f4c804",
      "filename": "src/main/java/stirling/software/SPDF/config/MetricsFilter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/83ba1899b7c42fc6f4e0c182d300d6eab31b9012/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FMetricsFilter.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/83ba1899b7c42fc6f4e0c182d300d6eab31b9012/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FMetricsFilter.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FMetricsFilter.java?ref=83ba1899b7c42fc6f4e0c182d300d6eab31b9012",
      "patch": "@@ -30,7 +30,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n         \n         //System.out.println(\"uri=\"+uri + \", method=\" + request.getMethod() );\n         // Ignore static resources\n-        if (!(uri.startsWith(\"/js\") || uri.startsWith(\"api-docs\") || uri.startsWith(\"/images\") || uri.endsWith(\".png\") || uri.endsWith(\".ico\") || uri.endsWith(\".css\") || uri.endsWith(\".svg\")|| uri.endsWith(\".js\") || uri.contains(\"swagger\") || uri.startsWith(\"/api\"))) {\n+        if (!(uri.startsWith(\"/js\") || uri.startsWith(\"api-docs\") || uri.endsWith(\"robots.txt\") || uri.startsWith(\"/images\") || uri.endsWith(\".png\") || uri.endsWith(\".ico\") || uri.endsWith(\".css\") || uri.endsWith(\".svg\")|| uri.endsWith(\".js\") || uri.contains(\"swagger\") || uri.startsWith(\"/api\"))) {\n             Counter counter = Counter.builder(\"http.requests\")\n                     .tag(\"uri\", uri)\n                     .tag(\"method\", request.getMethod())",
      "parent_sha": "3420adc7c9e3d155bbc3ef50dbe633c26df25b9b"
    }
  },
  {
    "oid": "5cf53e39d0b3809a453bb7316a8ebc66eae746a0",
    "message": "Increase watermark coverage to fill page (#2049) (#2220)\n\n* Increase watermark coverage to fill page (#2049)\r\n\r\n* Increase watermark coverage to fill page with the new calculation (#2049)",
    "date": "2024-11-13T11:12:30Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/5cf53e39d0b3809a453bb7316a8ebc66eae746a0",
    "details": {
      "sha": "7bf9bbb75a548f5bbaea308d8702f182e4a42301",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java",
      "status": "modified",
      "additions": 20,
      "deletions": 6,
      "changes": 26,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/5cf53e39d0b3809a453bb7316a8ebc66eae746a0/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FWatermarkController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/5cf53e39d0b3809a453bb7316a8ebc66eae746a0/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FWatermarkController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FWatermarkController.java?ref=5cf53e39d0b3809a453bb7316a8ebc66eae746a0",
      "patch": "@@ -187,18 +187,32 @@ private void addTextWatermark(\n         float watermarkHeight = heightSpacer + fontSize * textLines.length;\n         float pageWidth = page.getMediaBox().getWidth();\n         float pageHeight = page.getMediaBox().getHeight();\n-        int watermarkRows = (int) (pageHeight / watermarkHeight + 1);\n-        int watermarkCols = (int) (pageWidth / watermarkWidth + 1);\n+\n+\n+        //Calculating the new width and height depending on the angle.\n+        float radians = (float) Math.toRadians(rotation);\n+        float newWatermarkWidth =\n+                (float)\n+                        (Math.abs(watermarkWidth * Math.cos(radians))\n+                                + Math.abs(watermarkHeight * Math.sin(radians)));\n+        float newWatermarkHeight =\n+                (float)\n+                        (Math.abs(watermarkWidth * Math.sin(radians))\n+                                + Math.abs(watermarkHeight * Math.cos(radians)));\n+\n+        //Calculating the number of rows and columns.\n+        int watermarkRows = (int) (pageHeight / newWatermarkHeight + 1);\n+        int watermarkCols = (int) (pageWidth / newWatermarkWidth + 1);\n \n         // Add the text watermark\n-        for (int i = 0; i < watermarkRows; i++) {\n-            for (int j = 0; j < watermarkCols; j++) {\n+        for (int i = 0; i <= watermarkRows; i++) {\n+            for (int j = 0; j <= watermarkCols; j++) {\n                 contentStream.beginText();\n                 contentStream.setTextMatrix(\n                         Matrix.getRotateInstance(\n                                 (float) Math.toRadians(rotation),\n-                                j * watermarkWidth,\n-                                i * watermarkHeight));\n+                                j * newWatermarkWidth,\n+                                i * newWatermarkHeight));\n \n                 for (int k = 0; k < textLines.length; ++k) {\n                     contentStream.showText(textLines[k]);",
      "parent_sha": "7f566d5de8f28c7f8d4f053d7928cd6a03708573"
    }
  },
  {
    "oid": "a715dbb25d8b0bc0470261517e9461cb6c85bb9c",
    "message": "cleanup",
    "date": "2023-12-29T11:43:36Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/a715dbb25d8b0bc0470261517e9461cb6c85bb9c",
    "details": {
      "sha": "886581e42d599dc00ae6467ecbfeb8fecf15e6d9",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineController.java",
      "status": "modified",
      "additions": 53,
      "deletions": 77,
      "changes": 130,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/a715dbb25d8b0bc0470261517e9461cb6c85bb9c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fpipeline%2FPipelineController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/a715dbb25d8b0bc0470261517e9461cb6c85bb9c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fpipeline%2FPipelineController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fpipeline%2FPipelineController.java?ref=a715dbb25d8b0bc0470261517e9461cb6c85bb9c",
      "patch": "@@ -317,14 +317,11 @@ List<Resource> processFiles(List<Resource> outputFiles, String jsonString) throw\n \t\t\t\tinputFileExtension = \".pdf\";\r\n \t\t\t}\r\n \t\t\tfinal String finalInputFileExtension = inputFileExtension;\r\n-\t\t\tRestTemplate restTemplate = new RestTemplate();\r\n+\t\t\t\r\n \t\t\tString url = getBaseUrl() + operation;\r\n \t\t\t\r\n \t\t\tList<Resource> newOutputFiles = new ArrayList<>();\r\n \t\t\tif (!isMultiInputOperation) {\r\n-\t\t\t\t\r\n-\t\t\t\t\r\n-\r\n \t\t\t\tfor (Resource file : outputFiles) {\r\n \t\t\t\t\tboolean hasInputFileType = false;\r\n \t\t\t\t\tif (file.getFilename().endsWith(inputFileExtension)) {\r\n@@ -338,16 +335,7 @@ List<Resource> processFiles(List<Resource> outputFiles, String jsonString) throw\n \t\t\t\t\t\t\tbody.add(parameter.getKey(), parameter.getValue().asText());\r\n \t\t\t\t\t\t}\r\n \r\n-\t\t\t\t\t\tHttpHeaders headers = new HttpHeaders();\r\n-\r\n-\t\t\t\t\t\tString apiKey = getApiKeyForUser();\r\n-\t\t\t\t\t\theaders.add(\"X-API-Key\", apiKey);\r\n-\t\t\t\t\t\theaders.setContentType(MediaType.MULTIPART_FORM_DATA);\r\n-\r\n-\t\t\t\t\t\tHttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(body, headers);\r\n-\r\n-\t\t\t\t\t\tResponseEntity<byte[]> response = restTemplate.exchange(url, HttpMethod.POST, entity,\r\n-\t\t\t\t\t\t\t\tbyte[].class);\r\n+\t\t\t\t\t\tResponseEntity<byte[]> response = sendWebRequest(url, body);\r\n \r\n \t\t\t\t\t\t// If the operation is filter and the response body is null or empty, skip this\r\n \t\t\t\t\t\t// file\r\n@@ -362,32 +350,8 @@ List<Resource> processFiles(List<Resource> outputFiles, String jsonString) throw\n \t\t\t\t\t\t\thasErrors = true;\r\n \t\t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t\t}\r\n-\r\n-\t\t\t\t\t\t// Define filename\r\n-\t\t\t\t\t\tString filename;\r\n-\t\t\t\t\t\tif (\"auto-rename\".equals(operation)) {\r\n-\t\t\t\t\t\t\t// If the operation is \"auto-rename\", generate a new filename.\r\n-\t\t\t\t\t\t\t// This is a simple example of generating a filename using current timestamp.\r\n-\t\t\t\t\t\t\t// Modify as per your needs.\r\n-\t\t\t\t\t\t\tfilename = \"file_\" + System.currentTimeMillis();\r\n-\t\t\t\t\t\t} else {\r\n-\t\t\t\t\t\t\t// Otherwise, keep the original filename.\r\n-\t\t\t\t\t\t\tfilename = file.getFilename();\r\n-\t\t\t\t\t\t}\r\n-\r\n-\t\t\t\t\t\t// Check if the response body is a zip file\r\n-\t\t\t\t\t\tif (isZip(response.getBody())) {\r\n-\t\t\t\t\t\t\t// Unzip the file and add all the files to the new output files\r\n-\t\t\t\t\t\t\tnewOutputFiles.addAll(unzip(response.getBody()));\r\n-\t\t\t\t\t\t} else {\r\n-\t\t\t\t\t\t\tResource outputResource = new ByteArrayResource(response.getBody()) {\r\n-\t\t\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\t\t\tpublic String getFilename() {\r\n-\t\t\t\t\t\t\t\t\treturn filename;\r\n-\t\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\t};\r\n-\t\t\t\t\t\t\tnewOutputFiles.add(outputResource);\r\n-\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tprocessOutputFiles(operation, file.getFilename(), response, newOutputFiles);\r\n+\t\t\t\t\t\t\r\n \t\t\t\t\t}\r\n \r\n \t\t\t\t\tif (!hasInputFileType) {\r\n@@ -421,46 +385,12 @@ public String getFilename() {\n \t\t\t            Map.Entry<String, JsonNode> parameter = parameters.next();\r\n \t\t\t            body.add(parameter.getKey(), parameter.getValue().asText());\r\n \t\t\t        }\r\n-\r\n-\t\t\t        // Set up headers, including API key\r\n-\t\t\t        HttpHeaders headers = new HttpHeaders();\r\n-\t\t\t        String apiKey = getApiKeyForUser();\r\n-\t\t\t        headers.add(\"X-API-Key\", apiKey);\r\n-\t\t\t        headers.setContentType(MediaType.MULTIPART_FORM_DATA);\r\n-\r\n-\t\t\t        // Create HttpEntity with the body and headers\r\n-\t\t\t        HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(body, headers);\r\n-\r\n-\t\t\t        // Make the request to the REST endpoint\r\n-\t\t\t        ResponseEntity<byte[]> response = restTemplate.exchange(url, HttpMethod.POST, entity, byte[].class);\r\n+\t\t        \r\n+\t\t\t        ResponseEntity<byte[]> response = sendWebRequest(url, body);\r\n \r\n \t\t\t        // Handle the response\r\n \t\t\t        if (response.getStatusCode().equals(HttpStatus.OK)) {\r\n-\t\t\t        \t// Define filename\r\n-\t\t\t\t\t\tString filename;\r\n-\t\t\t\t\t\tif (\"auto-rename\".equals(operation)) {\r\n-\t\t\t\t\t\t\t// If the operation is \"auto-rename\", generate a new filename.\r\n-\t\t\t\t\t\t\t// This is a simple example of generating a filename using current timestamp.\r\n-\t\t\t\t\t\t\t// Modify as per your needs.\r\n-\t\t\t\t\t\t\tfilename = \"file_\" + System.currentTimeMillis();\r\n-\t\t\t\t\t\t} else {\r\n-\t\t\t\t\t\t\t// Otherwise, keep the original filename.\r\n-\t\t\t\t\t\t\tfilename = matchingFiles.get(0).getFilename();\r\n-\t\t\t\t\t\t}\r\n-\r\n-\t\t\t\t\t\t// Check if the response body is a zip file\r\n-\t\t\t\t\t\tif (isZip(response.getBody())) {\r\n-\t\t\t\t\t\t\t// Unzip the file and add all the files to the new output files\r\n-\t\t\t\t\t\t\tnewOutputFiles.addAll(unzip(response.getBody()));\r\n-\t\t\t\t\t\t} else {\r\n-\t\t\t\t\t\t\tResource outputResource = new ByteArrayResource(response.getBody()) {\r\n-\t\t\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\t\t\tpublic String getFilename() {\r\n-\t\t\t\t\t\t\t\t\treturn filename;\r\n-\t\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\t};\r\n-\t\t\t\t\t\t\tnewOutputFiles.add(outputResource);\r\n-\t\t\t\t\t\t}\r\n+\t\t\t        \tprocessOutputFiles(operation, matchingFiles.get(0).getFilename(), response, newOutputFiles);\r\n \t\t\t        } else {\r\n \t\t\t            // Log error if the response status is not OK\r\n \t\t\t            logPrintStream.println(\"Error in multi-input operation: \" + response.getBody());\r\n@@ -480,6 +410,52 @@ public String getFilename() {\n \t\treturn outputFiles;\r\n \t}\r\n \r\n+\tprivate ResponseEntity<byte[]> sendWebRequest(String url, MultiValueMap<String, Object> body ){\r\n+\t\tRestTemplate restTemplate = new RestTemplate();\r\n+\t\t\r\n+\t\t // Set up headers, including API key\r\n+        HttpHeaders headers = new HttpHeaders();\r\n+        String apiKey = getApiKeyForUser();\r\n+        headers.add(\"X-API-Key\", apiKey);\r\n+        headers.setContentType(MediaType.MULTIPART_FORM_DATA);\r\n+\r\n+        // Create HttpEntity with the body and headers\r\n+        HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(body, headers);\r\n+\r\n+        // Make the request to the REST endpoint\r\n+        return restTemplate.exchange(url, HttpMethod.POST, entity, byte[].class);\r\n+\t}\r\n+\t\r\n+\tprivate List<Resource> processOutputFiles(String operation, String fileName, ResponseEntity<byte[]> response, List<Resource> newOutputFiles) throws IOException{\r\n+\t\t// Define filename\r\n+\t\tString newFilename;\r\n+\t\tif (\"auto-rename\".equals(operation)) {\r\n+\t\t\t// If the operation is \"auto-rename\", generate a new filename.\r\n+\t\t\t// This is a simple example of generating a filename using current timestamp.\r\n+\t\t\t// Modify as per your needs.\r\n+\t\t\tnewFilename = \"file_\" + System.currentTimeMillis();\r\n+\t\t} else {\r\n+\t\t\t// Otherwise, keep the original filename.\r\n+\t\t\tnewFilename = fileName;\r\n+\t\t}\r\n+\r\n+\t\t// Check if the response body is a zip file\r\n+\t\tif (isZip(response.getBody())) {\r\n+\t\t\t// Unzip the file and add all the files to the new output files\r\n+\t\t\tnewOutputFiles.addAll(unzip(response.getBody()));\r\n+\t\t} else {\r\n+\t\t\tResource outputResource = new ByteArrayResource(response.getBody()) {\r\n+\t\t\t\t@Override\r\n+\t\t\t\tpublic String getFilename() {\r\n+\t\t\t\t\treturn newFilename;\r\n+\t\t\t\t}\r\n+\t\t\t};\r\n+\t\t\tnewOutputFiles.add(outputResource);\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn newOutputFiles;\r\n+\t\t\r\n+\t}\r\n \tList<Resource> handleFiles(File[] files, String jsonString) throws Exception {\r\n \t\tif (files == null || files.length == 0) {\r\n \t\t\tlogger.info(\"No files\");\r",
      "parent_sha": "aeadc88f92b3517c06f6f088dc8e9205c06f85e8"
    }
  },
  {
    "oid": "3220ad2045fda632309084490339bf26950464ba",
    "message": "\ud83e\udd16 format everything with pre-commit by <stirlingbot> (#2794)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>",
    "date": "2025-01-30T11:01:35Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/3220ad2045fda632309084490339bf26950464ba",
    "details": {
      "sha": "f1d3942f41f3b0842964bde551a9b951902a6247",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/3220ad2045fda632309084490339bf26950464ba/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FAnalysisController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/3220ad2045fda632309084490339bf26950464ba/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FAnalysisController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FAnalysisController.java?ref=3220ad2045fda632309084490339bf26950464ba",
      "patch": "@@ -23,18 +23,18 @@\n @Tag(name = \"Analysis\", description = \"Analysis APIs\")\n public class AnalysisController {\n \n-\t\n+\n \t@PostMapping(value = \"/page-count\", consumes = \"multipart/form-data\")\n-\t@Operation(summary = \"Get PDF page count\", \n+\t@Operation(summary = \"Get PDF page count\",\n \t          description = \"Returns total number of pages in PDF. Input:PDF Output:JSON Type:SISO\")\n \tpublic Map<String, Integer> getPageCount(@ModelAttribute PDFFile file) throws IOException {\n \t\ttry (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n \t       return Map.of(\"pageCount\", document.getNumberOfPages());\n \t   }\n \t}\n-\t\n+\n     @PostMapping(value =\"/basic-info\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get basic PDF information\", \n+    @Operation(summary = \"Get basic PDF information\",\n                description = \"Returns page count, version, file size. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getBasicInfo(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n@@ -47,7 +47,7 @@ public Map<String, Object> getBasicInfo(@ModelAttribute PDFFile file) throws IOE\n     }\n \n     @PostMapping(value =\"/document-properties\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get PDF document properties\", \n+    @Operation(summary = \"Get PDF document properties\",\n                description = \"Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, String> getDocumentProperties(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n@@ -66,13 +66,13 @@ public Map<String, String> getDocumentProperties(@ModelAttribute PDFFile file) t\n     }\n \n     @PostMapping(value =\"/page-dimensions\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get page dimensions for all pages\", \n+    @Operation(summary = \"Get page dimensions for all pages\",\n                description = \"Returns width and height of each page. Input:PDF Output:JSON Type:SISO\")\n     public List<Map<String, Float>> getPageDimensions(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n             List<Map<String, Float>> dimensions = new ArrayList<>();\n             PDPageTree pages = document.getPages();\n-            \n+\n             for (PDPage page : pages) {\n                 Map<String, Float> pageDim = new HashMap<>();\n                 pageDim.put(\"width\", page.getBBox().getWidth());\n@@ -84,13 +84,13 @@ public List<Map<String, Float>> getPageDimensions(@ModelAttribute PDFFile file)\n     }\n \n     @PostMapping(value =\"/form-fields\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get form field information\", \n+    @Operation(summary = \"Get form field information\",\n                description = \"Returns count and details of form fields. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getFormFields(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n             Map<String, Object> formInfo = new HashMap<>();\n             PDAcroForm form = document.getDocumentCatalog().getAcroForm();\n-            \n+\n             if (form != null) {\n                 formInfo.put(\"fieldCount\", form.getFields().size());\n                 formInfo.put(\"hasXFA\", form.hasXFA());\n@@ -105,7 +105,7 @@ public Map<String, Object> getFormFields(@ModelAttribute PDFFile file) throws IO\n     }\n \n     @PostMapping(value =\"/annotation-info\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get annotation information\", \n+    @Operation(summary = \"Get annotation information\",\n                description = \"Returns count and types of annotations. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getAnnotationInfo(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n@@ -128,7 +128,7 @@ public Map<String, Object> getAnnotationInfo(@ModelAttribute PDFFile file) throw\n     }\n \n     @PostMapping(value =\"/font-info\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get font information\", \n+    @Operation(summary = \"Get font information\",\n                description = \"Returns list of fonts used in the document. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getFontInfo(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n@@ -148,33 +148,33 @@ public Map<String, Object> getFontInfo(@ModelAttribute PDFFile file) throws IOEx\n     }\n \n     @PostMapping(value =\"/security-info\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get security information\", \n+    @Operation(summary = \"Get security information\",\n                description = \"Returns encryption and permission details. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getSecurityInfo(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n             Map<String, Object> securityInfo = new HashMap<>();\n             PDEncryption encryption = document.getEncryption();\n-            \n+\n             if (encryption != null) {\n                 securityInfo.put(\"isEncrypted\", true);\n                 securityInfo.put(\"keyLength\", encryption.getLength());\n-                \n+\n                 // Get permissions\n                 Map<String, Boolean> permissions = new HashMap<>();\n                 permissions.put(\"canPrint\", document.getCurrentAccessPermission().canPrint());\n                 permissions.put(\"canModify\", document.getCurrentAccessPermission().canModify());\n                 permissions.put(\"canExtractContent\", document.getCurrentAccessPermission().canExtractContent());\n                 permissions.put(\"canModifyAnnotations\", document.getCurrentAccessPermission().canModifyAnnotations());\n-                \n+\n                 securityInfo.put(\"permissions\", permissions);\n             } else {\n                 securityInfo.put(\"isEncrypted\", false);\n             }\n-            \n+\n             return securityInfo;\n         }\n     }\n-    \n \n \n-}\n\\ No newline at end of file\n+\n+}",
      "parent_sha": "e690b09ed239c0694f461fd3a3c985fd3991b08f"
    }
  },
  {
    "oid": "167c792bf0f2a3b703764d541e6a37dc3b8ba309",
    "message": "Draw image with the original PDF page dimensions",
    "date": "2024-12-19T11:34:13Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/167c792bf0f2a3b703764d541e6a37dc3b8ba309",
    "details": {
      "sha": "55a83cf2e3784a853896f7c72b6dd29afd79f3be",
      "filename": "src/main/java/stirling/software/SPDF/utils/PdfUtils.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/167c792bf0f2a3b703764d541e6a37dc3b8ba309/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/167c792bf0f2a3b703764d541e6a37dc3b8ba309/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java?ref=167c792bf0f2a3b703764d541e6a37dc3b8ba309",
      "patch": "@@ -352,12 +352,17 @@ public static PDDocument convertPdfToPdfImage(PDDocument document) throws IOExce\n         pdfRenderer.setSubsamplingAllowed(true);\n         for (int page = 0; page < document.getNumberOfPages(); ++page) {\n             BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);\n-            PDPage newPage = new PDPage(new PDRectangle(bim.getWidth(), bim.getHeight()));\n+            PDPage originalPage = document.getPage(page);\n+\n+            float width = originalPage.getMediaBox().getWidth();\n+            float height = originalPage.getMediaBox().getHeight();\n+\n+            PDPage newPage = new PDPage(new PDRectangle(width, height));\n             imageDocument.addPage(newPage);\n             PDImageXObject pdImage = LosslessFactory.createFromImage(imageDocument, bim);\n             PDPageContentStream contentStream =\n                     new PDPageContentStream(imageDocument, newPage, AppendMode.APPEND, true, true);\n-            contentStream.drawImage(pdImage, 0, 0);\n+            contentStream.drawImage(pdImage, 0, 0, width, height);\n             contentStream.close();\n         }\n         return imageDocument;",
      "parent_sha": "95a9e10dc8a86a79c3e9055daea8b81d47aaa352"
    }
  },
  {
    "oid": "688e01d70dbee1f19bf08e30044f59582b8e2493",
    "message": "fixed colorspace array exception (#1925)\n\n* fixed colorspace array exception\n\n* used lsf4j logger instead of prntln\n\n* removed unnecessary comment",
    "date": "2024-09-17T11:29:11Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/688e01d70dbee1f19bf08e30044f59582b8e2493",
    "details": {
      "sha": "3dff43e8492f98ebd793eee749b2f8e9004c4a16",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java",
      "status": "modified",
      "additions": 24,
      "deletions": 11,
      "changes": 35,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/688e01d70dbee1f19bf08e30044f59582b8e2493/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImagesController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/688e01d70dbee1f19bf08e30044f59582b8e2493/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImagesController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImagesController.java?ref=688e01d70dbee1f19bf08e30044f59582b8e2493",
      "patch": "@@ -90,22 +90,35 @@ public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFExtractImagesRequ\n             // Iterate over each page\n             for (int pgNum = 0; pgNum < document.getPages().getCount(); pgNum++) {\n                 PDPage page = document.getPage(pgNum);\n-                int pageNum = document.getPages().indexOf(page) + 1;\n-                // Submit a task for processing each page\n                 Future<Void> future =\n                         executor.submit(\n                                 () -> {\n-                                    extractImagesFromPage(\n-                                            page,\n-                                            format,\n-                                            filename,\n-                                            pageNum,\n-                                            processedImages,\n-                                            zos,\n-                                            allowDuplicates);\n-                                    return null;\n+                                    // Use the page number directly from the iterator, so no need to\n+                                    // calculate manually\n+                                    int pageNum = document.getPages().indexOf(page) + 1;\n+\n+                                    try {\n+                                        // Call the image extraction method for each page\n+                                        extractImagesFromPage(\n+                                                page,\n+                                                format,\n+                                                filename,\n+                                                pageNum,\n+                                                processedImages,\n+                                                zos,\n+                                                allowDuplicates);\n+                                    } catch (IOException e) {\n+                                        // Log the error and continue processing other pages\n+                                        logger.error(\n+                                                \"Error extracting images from page {}: {}\",\n+                                                pageNum,\n+                                                e.getMessage());\n+                                    }\n+\n+                                    return null; // Callable requires a return type\n                                 });\n \n+                // Add the Future object to the list to track completion\n                 futures.add(future);\n             }\n ",
      "parent_sha": "0014560a96dd77afed4b0c445ee4edadd4dbcf46"
    }
  },
  {
    "oid": "68c094166603bd0a5c54ff3706fc4bb2ca68bdf9",
    "message": "Sanitized user-provided file names in HTTP multipart uploads",
    "date": "2024-02-10T00:08:18Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/68c094166603bd0a5c54ff3706fc4bb2ca68bdf9",
    "details": {
      "sha": "0a93bf1d4b223a6687cb80fd5a2e616517aabc37",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/68c094166603bd0a5c54ff3706fc4bb2ca68bdf9/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FShowJavascript.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/68c094166603bd0a5c54ff3706fc4bb2ca68bdf9/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FShowJavascript.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FShowJavascript.java?ref=68c094166603bd0a5c54ff3706fc4bb2ca68bdf9",
      "patch": "@@ -75,7 +75,7 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr\n \n             return WebResponseUtils.bytesToWebResponse(\n                     script.getBytes(StandardCharsets.UTF_8),\n-                    inputFile.getOriginalFilename() + \".js\");\n+                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + \".js\");\n         }\n     }\n }",
      "parent_sha": "96e399a617122e64a1fcd23e9957d6c4038aa744"
    }
  },
  {
    "oid": "2d37c707e2192550d57d2839f60725d1a7267b8b",
    "message": "feat: support '\\n' literal in add watermark",
    "date": "2024-01-31T05:54:51Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/2d37c707e2192550d57d2839f60725d1a7267b8b",
    "details": {
      "sha": "6630a200fc92680ff6d8b7d91a396a9ff853ef79",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/2d37c707e2192550d57d2839f60725d1a7267b8b/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FWatermarkController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/2d37c707e2192550d57d2839f60725d1a7267b8b/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FWatermarkController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FWatermarkController.java?ref=2d37c707e2192550d57d2839f60725d1a7267b8b",
      "patch": "@@ -155,9 +155,16 @@ private void addTextWatermark(\n         contentStream.setFont(font, fontSize);\n         contentStream.setNonStrokingColor(Color.LIGHT_GRAY);\n \n+        String[] textLines = watermarkText.split(\"\\\\\\\\n\");\n+        float maxLineWidth = 0;\n+\n+        for (int i = 0; i < textLines.length; ++i) {\n+            maxLineWidth = Math.max(maxLineWidth, font.getStringWidth(textLines[i]));\n+        }\n+\n         // Set size and location of text watermark\n-        float watermarkWidth = widthSpacer + font.getStringWidth(watermarkText) * fontSize / 1000;\n-        float watermarkHeight = heightSpacer + fontSize;\n+        float watermarkWidth = widthSpacer + maxLineWidth * fontSize / 1000;\n+        float watermarkHeight = heightSpacer + fontSize * textLines.length;\n         float pageWidth = page.getMediaBox().getWidth();\n         float pageHeight = page.getMediaBox().getHeight();\n         int watermarkRows = (int) (pageHeight / watermarkHeight + 1);\n@@ -172,7 +179,12 @@ private void addTextWatermark(\n                                 (float) Math.toRadians(rotation),\n                                 j * watermarkWidth,\n                                 i * watermarkHeight));\n-                contentStream.showText(watermarkText);\n+\n+                for (int k = 0; k < textLines.length; ++k) {\n+                    contentStream.showText(textLines[k]);\n+                    contentStream.newLineAtOffset(0, -fontSize);\n+                }\n+\n                 contentStream.endText();\n             }\n         }",
      "parent_sha": "53afb865c53b0a000afb50a9932f28e2563b5142"
    }
  },
  {
    "oid": "450e090252d911970f5c580a2b6ae4e71ce1fdd9",
    "message": "Protect `readLine()` against DoS",
    "date": "2024-02-01T23:01:04Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/450e090252d911970f5c580a2b6ae4e71ce1fdd9",
    "details": {
      "sha": "f75367a7fe08cab8beb4e88494c9e9f8c98bbb2d",
      "filename": "src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/450e090252d911970f5c580a2b6ae4e71ce1fdd9/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/450e090252d911970f5c580a2b6ae4e71ce1fdd9/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java?ref=450e090252d911970f5c580a2b6ae4e71ce1fdd9",
      "patch": "@@ -1,5 +1,6 @@\n package stirling.software.SPDF.utils;\n \n+import io.github.pixee.security.BoundedLineReader;\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.IOException;\n@@ -109,7 +110,7 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n                                                         process.getErrorStream(),\n                                                         StandardCharsets.UTF_8))) {\n                                     String line;\n-                                    while ((line = errorReader.readLine()) != null) {\n+                                    while ((line = BoundedLineReader.readLine(errorReader, 5_000_000)) != null) {\n                                         errorLines.add(line);\n                                         if (liveUpdates) logger.info(line);\n                                     }\n@@ -130,7 +131,7 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n                                                         process.getInputStream(),\n                                                         StandardCharsets.UTF_8))) {\n                                     String line;\n-                                    while ((line = outputReader.readLine()) != null) {\n+                                    while ((line = BoundedLineReader.readLine(outputReader, 5_000_000)) != null) {\n                                         outputLines.add(line);\n                                         if (liveUpdates) logger.info(line);\n                                     }",
      "parent_sha": "61cd473e6cb20f78e92a51dfaa592f29be65aad8"
    }
  },
  {
    "oid": "9eed761346018c84f029abb5fa90029c8c14c6bf",
    "message": "Correct default fit",
    "date": "2024-12-18T00:36:04Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/9eed761346018c84f029abb5fa90029c8c14c6bf",
    "details": {
      "sha": "cee8b962a1c0d000e35ab1e9d38173fd2e93bf18",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/9eed761346018c84f029abb5fa90029c8c14c6bf/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/9eed761346018c84f029abb5fa90029c8c14c6bf/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java?ref=9eed761346018c84f029abb5fa90029c8c14c6bf",
      "patch": "@@ -215,7 +215,7 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n             colorType = \"color\";\n         }\n         if (fitOption == null || fitOption.isEmpty()) {\n-            fitOption = \"fitDocumentToImage\";\n+            fitOption = \"fillPage\";\n         }\n         // Convert the file to PDF and get the resulting bytes\n         byte[] bytes =",
      "parent_sha": "12d86049f6cd030ac8ff9f0e4df2564f17546e08"
    }
  },
  {
    "oid": "4e937a6024662242171431918401466bfb108c70",
    "message": "Sanitized user-provided file names in HTTP multipart uploads",
    "date": "2024-02-08T02:46:39Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/4e937a6024662242171431918401466bfb108c70",
    "details": {
      "sha": "e1355c30bbfddbc908fb593cad2cf3d769d8d363",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/4e937a6024662242171431918401466bfb108c70/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FShowJavascript.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/4e937a6024662242171431918401466bfb108c70/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FShowJavascript.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FShowJavascript.java?ref=4e937a6024662242171431918401466bfb108c70",
      "patch": "@@ -68,7 +68,7 @@ public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile request) thr\n \n             if (script.isEmpty()) {\n                 script =\n-                        \"PDF '\" + inputFile.getOriginalFilename() + \"' does not contain Javascript\";\n+                        \"PDF '\" + Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + \"' does not contain Javascript\";\n             }\n \n             return WebResponseUtils.bytesToWebResponse(",
      "parent_sha": "4af58118c932b1cc6f0931d863995f77baed52e6"
    }
  },
  {
    "oid": "8cbb4367abc78018c5d992ee9dbd0a5e60702d2c",
    "message": "PDF-to-Image different page formats fix (#1460)\n\n* Improve the PDF rendering process for pages of varying sizes\r\n\r\nThis commit includes changes to handle the rendering of PDF documents with pages of different sizes. The updated code calculates the dimensions of each page upfront and assembles a final combined image that accommodates for the differing page dimensions. This approach avoids repetitive renderings of the same page sizes.\r\n\r\n* Refactor image preparation for Pdf to Image",
    "date": "2024-06-14T22:39:30Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/8cbb4367abc78018c5d992ee9dbd0a5e60702d2c",
    "details": {
      "sha": "91cbb5cd4109cc307abbe0fb4f7e721cadc44ed1",
      "filename": "src/main/java/stirling/software/SPDF/utils/PdfUtils.java",
      "status": "modified",
      "additions": 83,
      "deletions": 15,
      "changes": 98,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/8cbb4367abc78018c5d992ee9dbd0a5e60702d2c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/8cbb4367abc78018c5d992ee9dbd0a5e60702d2c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java?ref=8cbb4367abc78018c5d992ee9dbd0a5e60702d2c",
      "patch": "@@ -1,27 +1,27 @@\n package stirling.software.SPDF.utils;\n \n-import java.awt.Graphics;\n+import java.awt.*;\n import java.awt.image.BufferedImage;\n import java.awt.image.RenderedImage;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Calendar;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n \n-import javax.imageio.IIOImage;\n-import javax.imageio.ImageIO;\n-import javax.imageio.ImageReader;\n-import javax.imageio.ImageWriteParam;\n-import javax.imageio.ImageWriter;\n+import javax.imageio.*;\n import javax.imageio.stream.ImageOutputStream;\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.cos.COSName;\n-import org.apache.pdfbox.pdmodel.*;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.PDPageContentStream;\n import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;\n+import org.apache.pdfbox.pdmodel.PDResources;\n import org.apache.pdfbox.pdmodel.common.PDRectangle;\n import org.apache.pdfbox.pdmodel.graphics.PDXObject;\n import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;\n@@ -245,19 +245,64 @@ public static byte[] convertFromPdf(\n                     writer.dispose();\n                 } else {\n                     // Combine all images into a single big image\n-                    BufferedImage image = pdfRenderer.renderImageWithDPI(0, DPI, colorType);\n+\n+                    // Calculate the combined image dimensions\n+                    int maxWidth = 0;\n+                    int totalHeight = 0;\n+\n+                    BufferedImage pdfSizeImage = null;\n+                    int pdfSizeImageIndex = -1;\n+\n+                    // Using a map to store the rendered dimensions of each page size\n+                    // to avoid rendering the same page sizes multiple times\n+                    HashMap<PdfRenderSettingsKey, PdfImageDimensionValue> pageSizes =\n+                            new HashMap<>();\n+                    for (int i = 0; i < pageCount; ++i) {\n+                        PDPage page = document.getPage(i);\n+                        PDRectangle mediaBox = page.getMediaBox();\n+                        int rotation = page.getRotation();\n+                        PdfRenderSettingsKey settings =\n+                                new PdfRenderSettingsKey(\n+                                        mediaBox.getWidth(), mediaBox.getHeight(), rotation);\n+                        PdfImageDimensionValue dimension = pageSizes.get(settings);\n+                        if (dimension == null) {\n+                            // Render the image to get the dimensions\n+                            pdfSizeImage = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\n+                            pdfSizeImageIndex = i;\n+                            dimension =\n+                                    new PdfImageDimensionValue(\n+                                            pdfSizeImage.getWidth(), pdfSizeImage.getHeight());\n+                            pageSizes.put(settings, dimension);\n+                            if (pdfSizeImage.getWidth() > maxWidth) {\n+                                maxWidth = pdfSizeImage.getWidth();\n+                            }\n+                        }\n+                        totalHeight += dimension.height();\n+                    }\n+\n+                    // Create a new BufferedImage to store the combined images\n                     BufferedImage combined =\n-                            new BufferedImage(\n-                                    image.getWidth(),\n-                                    image.getHeight() * pageCount,\n-                                    BufferedImage.TYPE_INT_RGB);\n+                            prepareImageForPdfToImage(maxWidth, totalHeight, imageType);\n                     Graphics g = combined.getGraphics();\n \n+                    int currentHeight = 0;\n+                    BufferedImage pageImage;\n+\n+                    // Check if the first image is the last rendered image\n+                    boolean firstImageAlreadyRendered = pdfSizeImageIndex == 0;\n+\n                     for (int i = 0; i < pageCount; ++i) {\n-                        if (i != 0) {\n-                            image = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\n+                        if (firstImageAlreadyRendered && i == 0) {\n+                            pageImage = pdfSizeImage;\n+                        } else {\n+                            pageImage = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\n                         }\n-                        g.drawImage(image, 0, i * image.getHeight(), null);\n+\n+                        // Calculate the x-coordinate to center the image\n+                        int x = (maxWidth - pageImage.getWidth()) / 2;\n+\n+                        g.drawImage(pageImage, x, currentHeight, null);\n+                        currentHeight += pageImage.getHeight();\n                     }\n \n                     // Write the image to the output stream\n@@ -296,6 +341,23 @@ public static byte[] convertFromPdf(\n         }\n     }\n \n+    private static BufferedImage prepareImageForPdfToImage(\n+            int maxWidth, int height, String imageType) {\n+        BufferedImage combined;\n+        if (\"png\".equalsIgnoreCase(imageType)) {\n+            combined = new BufferedImage(maxWidth, height, BufferedImage.TYPE_INT_ARGB);\n+        } else {\n+            combined = new BufferedImage(maxWidth, height, BufferedImage.TYPE_INT_RGB);\n+        }\n+        if (!\"png\".equalsIgnoreCase(imageType)) {\n+            Graphics g = combined.getGraphics();\n+            g.setColor(Color.WHITE);\n+            g.fillRect(0, 0, combined.getWidth(), combined.getHeight());\n+            g.dispose();\n+        }\n+        return combined;\n+    }\n+\n     public static byte[] imageToPdf(\n             MultipartFile[] files, String fitOption, boolean autoRotate, String colorType)\n             throws IOException {\n@@ -443,4 +505,10 @@ public static void setMetadataToPdf(PDDocument pdf, PdfMetadata pdfMetadata) {\n         pdf.getDocumentInformation().setCreationDate(pdfMetadata.getCreationDate());\n         pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n     }\n+\n+    /** Key for storing the dimensions of a rendered image in a map. */\n+    private record PdfRenderSettingsKey(float mediaBoxWidth, float mediaBoxHeight, int rotation) {}\n+\n+    /** Value for storing the dimensions of a rendered image in a map. */\n+    private record PdfImageDimensionValue(int width, int height) {}\n }",
      "parent_sha": "3ede2049181ae5b1c943b830f6a09d666da82573"
    }
  },
  {
    "oid": "3afacf2405a3f8e973e2756cd0654e5cebb8976b",
    "message": "Switch order of literals to prevent NullPointerException (#2769)\n\nThis change defensively switches the order of literals in comparison\nexpressions to ensure that no null pointer exceptions are unexpectedly\nthrown. Runtime exceptions especially can cause exceptional and\nunexpected code paths to be taken, and this can result in unexpected\nbehavior.\n\nBoth simple vulnerabilities (like information disclosure) and complex\nvulnerabilities (like business logic flaws) can take advantage of these\nunexpected code paths.\n\nOur changes look something like this:\n\n```diff\n  String fieldName = header.getFieldName();\n  String fieldValue = header.getFieldValue();\n- if(fieldName.equals(\"requestId\")) {\n+ if(\"requestId\".equals(fieldName)) {\n    logRequest(fieldValue);\n  }\n```\n\n<details>\n  <summary>More reading</summary>\n\n*\n[https://cwe.mitre.org/data/definitions/476.html](https://cwe.mitre.org/data/definitions/476.html)\n*\n[https://en.wikibooks.org/wiki/Java_Programming/Preventing_NullPointerException](https://en.wikibooks.org/wiki/Java_Programming/Preventing_NullPointerException)\n*\n[https://rules.sonarsource.com/java/RSPEC-1132/](https://rules.sonarsource.com/java/RSPEC-1132/)\n</details>\n\n\ud83e\uddda\ud83e\udd16  Powered by Pixeebot  \n\n[Feedback](https://ask.pixee.ai/feedback) |\n[Community](https://pixee-community.slack.com/signup#/domain-signup) |\n[Docs](https://docs.pixee.ai/) | Codemod ID:\npixee:java/switch-literal-first\n![](https://d1zaessa2hpsmj.cloudfront.net/pixel/v1/track?writeKey=2PI43jNm7atYvAuK7rJUz3Kcd6A&event=DRIP_PR%7CStirling-Tools%2FStirling-PDF%7Cc45a84d1797c774f11f1a6a0ccbbd8ee5a208be3)\n\n\n<!--{\"type\":\"DRIP\",\"codemod\":\"pixee:java/switch-literal-first\"}-->\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>",
    "date": "2025-01-22T10:39:47Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/3afacf2405a3f8e973e2756cd0654e5cebb8976b",
    "details": {
      "sha": "ad911f969b0307e500c451dfae00c8463dc06886",
      "filename": "src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/3afacf2405a3f8e973e2756cd0654e5cebb8976b/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FMetricsAggregatorService.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/3afacf2405a3f8e973e2756cd0654e5cebb8976b/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FMetricsAggregatorService.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FMetricsAggregatorService.java?ref=3afacf2405a3f8e973e2756cd0654e5cebb8976b",
      "patch": "@@ -39,7 +39,7 @@ public void aggregateAndSendMetrics() {\n                             if (method == null || uri == null) {\n                                 return;\n                             }\n-                            if (!method.equals(\"GET\") && !method.equals(\"POST\")) {\n+                            if (!\"GET\".equals(method) && !\"POST\".equals(method)) {\n                                 return;\n                             }\n                             // Skip URIs that are 2 characters or shorter",
      "parent_sha": "ba259a2d8d535b8366d441895e25151b2fffee21"
    }
  },
  {
    "oid": "82b1ab4263b40c67951a3fc555885c7f9fa7a45b",
    "message": "Fix/full invert crash 2942 (#2957)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Modified the `convertToBufferedImageTpFile` to use\n`File.createTempFile()` instead of writing to `\"image.png\"` in the\ncurrent directory.\n- This change ensures the file is saved in the default temporary\ndirectory, preventing permission issues.\n\n- Why the change was made\n- Previously, the method attempted to save the file in the current\nworking directory, which caused permission errors\n(`java.io.FileNotFoundException: image.png (Permission denied)`).\n \n- Any challenges encountered\n\nCloses #2942\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.",
    "date": "2025-02-17T10:26:47Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/82b1ab4263b40c67951a3fc555885c7f9fa7a45b",
    "details": {
      "sha": "c75659584ee68609526130058227ca47a05a19ce",
      "filename": "src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java",
      "status": "modified",
      "additions": 63,
      "deletions": 46,
      "changes": 109,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/82b1ab4263b40c67951a3fc555885c7f9fa7a45b/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2Fmisc%2FInvertFullColorStrategy.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/82b1ab4263b40c67951a3fc555885c7f9fa7a45b/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2Fmisc%2FInvertFullColorStrategy.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2Fmisc%2FInvertFullColorStrategy.java?ref=82b1ab4263b40c67951a3fc555885c7f9fa7a45b",
      "patch": "@@ -30,52 +30,69 @@ public InvertFullColorStrategy(MultipartFile file, ReplaceAndInvert replaceAndIn\n     @Override\n     public InputStreamResource replace() throws IOException {\n \n-        // Create a temporary file, with the original filename from the multipart file\n-        File file = Files.createTempFile(\"temp\", getFileInput().getOriginalFilename()).toFile();\n-\n-        // Transfer the content of the multipart file to the file\n-        getFileInput().transferTo(file);\n-\n-        // Load the uploaded PDF\n-        PDDocument document = Loader.loadPDF(file);\n-\n-        // Render each page and invert colors\n-        PDFRenderer pdfRenderer = new PDFRenderer(document);\n-        for (int page = 0; page < document.getNumberOfPages(); page++) {\n-            BufferedImage image =\n-                    pdfRenderer.renderImageWithDPI(page, 300); // Render page at 300 DPI\n-\n-            // Invert the colors\n-            invertImageColors(image);\n-\n-            // Create a new PDPage from the inverted image\n-            PDPage pdPage = document.getPage(page);\n-            PDImageXObject pdImage =\n-                    PDImageXObject.createFromFileByContent(\n-                            convertToBufferedImageTpFile(image), document);\n-\n-            PDPageContentStream contentStream =\n-                    new PDPageContentStream(\n-                            document, pdPage, PDPageContentStream.AppendMode.OVERWRITE, true);\n-            contentStream.drawImage(\n-                    pdImage,\n-                    0,\n-                    0,\n-                    pdPage.getMediaBox().getWidth(),\n-                    pdPage.getMediaBox().getHeight());\n-            contentStream.close();\n-        }\n-\n-        // Save the modified PDF to a ByteArrayOutputStream\n-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n-        document.save(byteArrayOutputStream);\n-        document.close();\n+        File file = null;\n+        try {\n+            // Create a temporary file, with the original filename from the multipart file\n+            file = Files.createTempFile(\"temp\", getFileInput().getOriginalFilename()).toFile();\n+\n+            // Transfer the content of the multipart file to the file\n+            getFileInput().transferTo(file);\n+\n+            // Load the uploaded PDF\n+            PDDocument document = Loader.loadPDF(file);\n+\n+            // Render each page and invert colors\n+            PDFRenderer pdfRenderer = new PDFRenderer(document);\n+            for (int page = 0; page < document.getNumberOfPages(); page++) {\n+                BufferedImage image =\n+                        pdfRenderer.renderImageWithDPI(page, 300); // Render page at 300 DPI\n+\n+                // Invert the colors\n+                invertImageColors(image);\n+\n+                // Create a new PDPage from the inverted image\n+                PDPage pdPage = document.getPage(page);\n+                File tempImageFile = null;\n+                try {\n+                    tempImageFile = convertToBufferedImageTpFile(image);\n+                    PDImageXObject pdImage =\n+                            PDImageXObject.createFromFileByContent(tempImageFile, document);\n+\n+                    PDPageContentStream contentStream =\n+                            new PDPageContentStream(\n+                                    document,\n+                                    pdPage,\n+                                    PDPageContentStream.AppendMode.OVERWRITE,\n+                                    true);\n+                    contentStream.drawImage(\n+                            pdImage,\n+                            0,\n+                            0,\n+                            pdPage.getMediaBox().getWidth(),\n+                            pdPage.getMediaBox().getHeight());\n+                    contentStream.close();\n+                } finally {\n+                    if (tempImageFile != null && tempImageFile.exists()) {\n+                        Files.delete(tempImageFile.toPath());\n+                    }\n+                }\n+            }\n \n-        // Prepare the modified PDF for download\n-        ByteArrayInputStream inputStream =\n-                new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n-        InputStreamResource resource = new InputStreamResource(inputStream);\n-        return resource;\n+            // Save the modified PDF to a ByteArrayOutputStream\n+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+            document.save(byteArrayOutputStream);\n+            document.close();\n+\n+            // Prepare the modified PDF for download\n+            ByteArrayInputStream inputStream =\n+                    new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n+            InputStreamResource resource = new InputStreamResource(inputStream);\n+            return resource;\n+        } finally {\n+            if (file != null && file.exists()) {\n+                Files.delete(file.toPath());\n+            }\n+        }\n     }\n \n     // Method to invert image colors\n@@ -98,7 +115,7 @@ private void invertImageColors(BufferedImage image) {\n \n     // Helper method to convert BufferedImage to InputStream\n     private File convertToBufferedImageTpFile(BufferedImage image) throws IOException {\n-        File file = new File(\"image.png\");\n+        File file = File.createTempFile(\"image\", \".png\");\n         ImageIO.write(image, \"png\", file);\n         return file;\n     }",
      "parent_sha": "c1d72172426cd984a7b917bff99b8b397846282c"
    }
  },
  {
    "oid": "76dc90d58716be6ab5128110127859b113027997",
    "message": "fi: type correction around google OAUTH2 provider",
    "date": "2024-05-30T08:42:23Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/76dc90d58716be6ab5128110127859b113027997",
    "details": {
      "sha": "8b78e130684fe4ce596a82b24d2c768122db9d68",
      "filename": "src/main/java/stirling/software/SPDF/model/ApplicationProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/76dc90d58716be6ab5128110127859b113027997/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FApplicationProperties.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/76dc90d58716be6ab5128110127859b113027997/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FApplicationProperties.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FApplicationProperties.java?ref=76dc90d58716be6ab5128110127859b113027997",
      "patch": "@@ -357,7 +357,7 @@ public static class Client {\n \n                 public Provider get(String registrationId) throws Exception {\n                     switch (registrationId) {\n-                        case \"gogole\":\n+                        case \"google\":\n                             return getGoogle();\n                         case \"github\":\n                             return getGithub();",
      "parent_sha": "316b4e42afbac31696dc188bb2de1ab783d47a03"
    }
  },
  {
    "oid": "a5f07778926da2e883b202c637906b44577e6a4d",
    "message": "Update ConfigInitializer.java for auto settings removal",
    "date": "2024-02-17T13:10:00Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/a5f07778926da2e883b202c637906b44577e6a4d",
    "details": {
      "sha": "7bceaf8f85db21c41c6ab32b382c8cf79142199d",
      "filename": "src/main/java/stirling/software/SPDF/config/ConfigInitializer.java",
      "status": "modified",
      "additions": 78,
      "deletions": 1,
      "changes": 79,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/a5f07778926da2e883b202c637906b44577e6a4d/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/a5f07778926da2e883b202c637906b44577e6a4d/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java?ref=a5f07778926da2e883b202c637906b44577e6a4d",
      "patch": "@@ -79,6 +79,16 @@ public void mergeYamlFiles(List<String> templateLines, Path userFilePath, Path o\n                     return parts.length > 0 ? parts[0].trim().replace(\"#\", \"\").trim() : \"\";\n                 };\n \n+        Function<String, Integer> getIndentationLevel =\n+                line -> {\n+                    int count = 0;\n+                    for (char ch : line.toCharArray()) {\n+                        if (ch == ' ') count++;\n+                        else break;\n+                    }\n+                    return count;\n+                };\n+\n         Set<String> userKeys = userLines.stream().map(extractKey).collect(Collectors.toSet());\n \n         for (String line : templateLines) {\n@@ -134,10 +144,77 @@ public void mergeYamlFiles(List<String> templateLines, Path userFilePath, Path o\n                             .map(extractKey)\n                             .anyMatch(templateKey -> templateKey.equalsIgnoreCase(userKey));\n             if (!isPresentInTemplate && !isCommented.apply(userLine)) {\n-                mergedLines.add(userLine);\n+                if (!childOfTemplateEntry(\n+                        isCommented,\n+                        extractKey,\n+                        getIndentationLevel,\n+                        userLines,\n+                        userLine,\n+                        templateLines)) {\n+                    // check if userLine is a child of a entry within templateLines or not, if child\n+                    // of parent in templateLines then dont add to mergedLines, if anything else\n+                    // then add\n+                    mergedLines.add(userLine);\n+                }\n             }\n         }\n \n         Files.write(outputPath, mergedLines, StandardCharsets.UTF_8);\n     }\n+\n+    // New method to check if a userLine is a child of an entry in templateLines\n+    boolean childOfTemplateEntry(\n+            Function<String, Boolean> isCommented,\n+            Function<String, String> extractKey,\n+            Function<String, Integer> getIndentationLevel,\n+            List<String> userLines,\n+            String userLine,\n+            List<String> templateLines) {\n+        String userKey = extractKey.apply(userLine).trim();\n+        int userIndentation = getIndentationLevel.apply(userLine);\n+\n+        // Start by assuming the line is not a child of an entry in templateLines\n+        boolean isChild = false;\n+\n+        // Iterate backwards through userLines from the current line to find any parent\n+        for (int i = userLines.indexOf(userLine) - 1; i >= 0; i--) {\n+            String potentialParentLine = userLines.get(i);\n+            int parentIndentation = getIndentationLevel.apply(potentialParentLine);\n+\n+            // Check if we've reached a potential parent based on indentation\n+            if (parentIndentation < userIndentation) {\n+                String parentKey = extractKey.apply(potentialParentLine).trim();\n+\n+                // Now, check if this potential parent or any of its parents exist in templateLines\n+                boolean parentExistsInTemplate =\n+                        templateLines.stream()\n+                                .filter(line -> !isCommented.apply(line)) // Skip commented lines\n+                                .anyMatch(\n+                                        templateLine -> {\n+                                            String templateKey =\n+                                                    extractKey.apply(templateLine).trim();\n+                                            return parentKey.equalsIgnoreCase(templateKey);\n+                                        });\n+\n+                if (!parentExistsInTemplate) {\n+                    // If the parent does not exist in template, check the next level parent\n+                    userIndentation =\n+                            parentIndentation; // Update userIndentation to the parent's indentation\n+                    // for next iteration\n+                    if (parentIndentation == 0) {\n+                        // If we've reached the top-level parent and it's not in template, the\n+                        // original line is considered not a child\n+                        isChild = false;\n+                        break;\n+                    }\n+                } else {\n+                    // If any parent exists in template, the original line is considered a child\n+                    isChild = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return isChild; // Return true if the line is not a child of any entry in templateLines\n+    }\n }",
      "parent_sha": "010426d488adae315bc6f118b9367e1d5f5570c1"
    }
  },
  {
    "oid": "15d5387fdc01d50fafa4a0443816dff4d0968206",
    "message": "fix desktop client stuck at 90% (#3111)\n\nSo I have added a timer to force show the desktop client after 7seconds\nof intiliazation (if not already visible) because it gets stuck at 90%\nsometimes\n\n#2487 #2595 \n\n---\n\n## Checklist\n\n### General\n\n- [X] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [X] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [X] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [X] I have performed a self-review of my own code\n- [X] My changes generate no new warnings\n\n### Documentation \n-- No functionality change.\n### UI Changes (if applicable)\n\n- [X] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n\n- [X] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n\n\n\nhttps://github.com/user-attachments/assets/e889701e-bb21-4a06-b221-98a0faad6f2e",
    "date": "2025-03-04T15:09:08Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/15d5387fdc01d50fafa4a0443816dff4d0968206",
    "details": {
      "sha": "2f65937342234a909cef12060fff65039bafb27e",
      "filename": "src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java",
      "status": "modified",
      "additions": 86,
      "deletions": 7,
      "changes": 93,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/15d5387fdc01d50fafa4a0443816dff4d0968206/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FUI%2Fimpl%2FDesktopBrowser.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/15d5387fdc01d50fafa4a0443816dff4d0968206/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FUI%2Fimpl%2FDesktopBrowser.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FUI%2Fimpl%2FDesktopBrowser.java?ref=15d5387fdc01d50fafa4a0443816dff4d0968206",
      "patch": "@@ -93,8 +93,21 @@ public void initWebUI(String url) {\n                                     setupMainFrame();\n                                     setupLoadHandler();\n \n-                                    // Show the frame immediately but transparent\n-                                    frame.setVisible(true);\n+                                    // Force initialize UI after 7 seconds if not already done\n+                                    Timer timeoutTimer =\n+                                            new Timer(\n+                                                    2500,\n+                                                    e -> {\n+                                                        log.warn(\n+                                                                \"Loading timeout reached. Forcing\"\n+                                                                        + \" UI transition.\");\n+                                                        if (!browserInitialized) {\n+                                                            // Force UI initialization\n+                                                            forceInitializeUI();\n+                                                        }\n+                                                    });\n+                                    timeoutTimer.setRepeats(false);\n+                                    timeoutTimer.start();\n                                 });\n                     } catch (Exception e) {\n                         log.error(\"Error initializing JCEF browser: \", e);\n@@ -238,8 +251,8 @@ public void onLoadingStateChange(\n                             boolean canGoBack,\n                             boolean canGoForward) {\n                         log.debug(\n-                                \"Loading state change - isLoading: {}, canGoBack: {}, canGoForward: {}, \"\n-                                        + \"browserInitialized: {}, Time elapsed: {}ms\",\n+                                \"Loading state change - isLoading: {}, canGoBack: {}, canGoForward:\"\n+                                        + \" {}, browserInitialized: {}, Time elapsed: {}ms\",\n                                 isLoading,\n                                 canGoBack,\n                                 canGoForward,\n@@ -248,7 +261,8 @@ public void onLoadingStateChange(\n \n                         if (!isLoading && !browserInitialized) {\n                             log.info(\n-                                    \"Browser finished loading, preparing to initialize UI components\");\n+                                    \"Browser finished loading, preparing to initialize UI\"\n+                                            + \" components\");\n                             browserInitialized = true;\n                             SwingUtilities.invokeLater(\n                                     () -> {\n@@ -289,10 +303,12 @@ public void onLoadingStateChange(\n                                                                         browser.getUIComponent()\n                                                                                 .requestFocus();\n                                                                         log.info(\n-                                                                                \"Browser component focused\");\n+                                                                                \"Browser component\"\n+                                                                                        + \" focused\");\n                                                                     } catch (Exception ex) {\n                                                                         log.error(\n-                                                                                \"Error focusing browser\",\n+                                                                                \"Error focusing\"\n+                                                                                        + \" browser\",\n                                                                                 ex);\n                                                                     }\n                                                                 });\n@@ -415,4 +431,67 @@ public void cleanup() {\n         if (cefApp != null) cefApp.dispose();\n         if (loadingWindow != null) loadingWindow.dispose();\n     }\n+\n+    public static void forceInitializeUI() {\n+        try {\n+            if (loadingWindow != null) {\n+                log.info(\"Forcing start of UI initialization sequence\");\n+\n+                // Close loading window first\n+                loadingWindow.setVisible(false);\n+                loadingWindow.dispose();\n+                loadingWindow = null;\n+                log.info(\"Loading window disposed\");\n+\n+                // Then setup the main frame\n+                frame.setVisible(false);\n+                frame.dispose();\n+                frame.setOpacity(1.0f);\n+                frame.setUndecorated(false);\n+                frame.pack();\n+                frame.setSize(UIScaling.scaleWidth(1280), UIScaling.scaleHeight(800));\n+                frame.setLocationRelativeTo(null);\n+                log.debug(\"Frame reconfigured\");\n+\n+                // Show the main frame\n+                frame.setVisible(true);\n+                frame.requestFocus();\n+                frame.toFront();\n+                log.info(\"Main frame displayed and focused\");\n+\n+                // Focus the browser component if available\n+                if (browser != null) {\n+                    Timer focusTimer =\n+                            new Timer(\n+                                    100,\n+                                    e -> {\n+                                        try {\n+                                            browser.getUIComponent().requestFocus();\n+                                            log.info(\"Browser component focused\");\n+                                        } catch (Exception ex) {\n+                                            log.error(\n+                                                    \"Error focusing browser during force ui\"\n+                                                            + \" initialization.\",\n+                                                    ex);\n+                                        }\n+                                    });\n+                    focusTimer.setRepeats(false);\n+                    focusTimer.start();\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Error during Forced UI initialization.\", e);\n+            // Attempt cleanup on error\n+            if (loadingWindow != null) {\n+                loadingWindow.dispose();\n+                loadingWindow = null;\n+            }\n+            if (frame != null) {\n+                frame.setVisible(true);\n+                frame.setOpacity(1.0f);\n+                frame.setUndecorated(false);\n+                frame.requestFocus();\n+            }\n+        }\n+    }\n }",
      "parent_sha": "57a49444c6ba6c1c99d0f8a69ba67a8e30049d6c"
    }
  },
  {
    "oid": "089b2290bd49b77ebeefe0e1ec2cedf1df0eedff",
    "message": "blank page path problem fixed",
    "date": "2023-05-22T15:26:29Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/089b2290bd49b77ebeefe0e1ec2cedf1df0eedff",
    "details": {
      "sha": "40228e8cbc173c5a63b93a61e862abb1d0a47547",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/other/BlankPageController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/089b2290bd49b77ebeefe0e1ec2cedf1df0eedff/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FBlankPageController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/089b2290bd49b77ebeefe0e1ec2cedf1df0eedff/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FBlankPageController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FBlankPageController.java?ref=089b2290bd49b77ebeefe0e1ec2cedf1df0eedff",
      "patch": "@@ -81,7 +81,7 @@ public ResponseEntity<byte[]> removeBlankPages(\n                         BufferedImage image = pdfRenderer.renderImageWithDPI(pageIndex, 300);\n                         ImageIO.write(image, \"png\", tempFile.toFile());\n     \n-                        List<String> command = new ArrayList<>(Arrays.asList(\"python3\", System.getProperty(\"user.dir\") + \"scripts/detect-blank-pages.py\", tempFile.toString() ,\"--threshold\", String.valueOf(threshold), \"--white_percent\", String.valueOf(whitePercent)));\n+                        List<String> command = new ArrayList<>(Arrays.asList(\"python3\", System.getProperty(\"user.dir\") + \"/scripts/detect-blank-pages.py\", tempFile.toString() ,\"--threshold\", String.valueOf(threshold), \"--white_percent\", String.valueOf(whitePercent)));\n     \n                         // Run CLI command\n                         int returnCode = ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV).runCommandWithOutputHandling(command);",
      "parent_sha": "c4e5bfdabb44fd0371724d3d9afa65c934c11cb2"
    }
  },
  {
    "oid": "e04cfcdde7813c51d2e7a5102ae0b506d97ec59e",
    "message": "Fix: Session of admin is destroyed instead of the deleted user (#3218)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Replaced `authentication.getPrincipal()` with `username` in the\n`sessionRegistry.getAllSessions(...)` call inside the `deleteUser`\nmethod of `UserController`.\n- The original implementation incorrectly used the currently\nauthenticated principal to fetch sessions, which could lead to only\ninvalidating the sessions of the user performing the deletion \u2014 not the\ntarget user being deleted.\n- By using the `username` parameter directly, this ensures **all\nsessions of the user being deleted are properly expired and removed**.\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.",
    "date": "2025-03-22T21:09:37Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/e04cfcdde7813c51d2e7a5102ae0b506d97ec59e",
    "details": {
      "sha": "c676169c8910c9ff4abfeafde077d790882e8b6d",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/UserController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/e04cfcdde7813c51d2e7a5102ae0b506d97ec59e/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FUserController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/e04cfcdde7813c51d2e7a5102ae0b506d97ec59e/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FUserController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FUserController.java?ref=e04cfcdde7813c51d2e7a5102ae0b506d97ec59e",
      "patch": "@@ -333,7 +333,7 @@ public RedirectView deleteUser(\n         }\n         // Invalidate all sessions before deleting the user\n         List<SessionInformation> sessionsInformations =\n-                sessionRegistry.getAllSessions(authentication.getPrincipal(), false);\n+                sessionRegistry.getAllSessions(username, false);\n         for (SessionInformation sessionsInformation : sessionsInformations) {\n             sessionRegistry.expireSession(sessionsInformation.getSessionId());\n             sessionRegistry.removeSessionInformation(sessionsInformation.getSessionId());",
      "parent_sha": "d8cca66560664cfd24134bbe0ae245f1f3587ff0"
    }
  },
  {
    "oid": "e6622dfdc44541df654571f4501a590e97fdce27",
    "message": "overlay fix for sequential",
    "date": "2023-12-29T22:53:46Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/e6622dfdc44541df654571f4501a590e97fdce27",
    "details": {
      "sha": "9551754a192ab664083c295bea7a56c989d49abc",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java",
      "status": "modified",
      "additions": 95,
      "deletions": 47,
      "changes": 142,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/e6622dfdc44541df654571f4501a590e97fdce27/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FPdfOverlayController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/e6622dfdc44541df654571f4501a590e97fdce27/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FPdfOverlayController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FPdfOverlayController.java?ref=e6622dfdc44541df654571f4501a590e97fdce27",
      "patch": "@@ -3,8 +3,9 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n-\n+import java.util.ArrayList;\n import org.apache.pdfbox.multipdf.Overlay;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.springframework.http.MediaType;\n@@ -25,52 +26,61 @@\n @Tag(name = \"General\", description = \"General APIs\")\n public class PdfOverlayController {\n \n-    @PostMapping(value = \"/overlay-pdfs\", consumes = \"multipart/form-data\")\n+\t@PostMapping(value = \"/overlay-pdfs\", consumes = \"multipart/form-data\")\n     @Operation(summary = \"Overlay PDF files in various modes\", description = \"Overlay PDF files onto a base PDF with different modes: Sequential, Interleaved, or Fixed Repeat. Input:PDF Output:PDF Type:MIMO\")\n     public ResponseEntity<byte[]> overlayPdfs(@ModelAttribute OverlayPdfsRequest request) throws IOException {\n         MultipartFile baseFile = request.getFileInput();\n         int overlayPos = request.getOverlayPosition();\n         \n         MultipartFile[] overlayFiles = request.getOverlayFiles();\n         File[] overlayPdfFiles = new File[overlayFiles.length];\n-        try{ \n-\t        for (int i = 0; i < overlayFiles.length; i++) {\n-\t            overlayPdfFiles[i] = GeneralUtils.multipartToFile(overlayFiles[i]);\n-\t        }\n-\t        \n-\t        String mode = request.getOverlayMode(); // \"SequentialOverlay\", \"InterleavedOverlay\", \"FixedRepeatOverlay\"\n-\t        int[] counts = request.getCounts(); // Used for FixedRepeatOverlay mode\n-\t\n-\t        try (PDDocument basePdf = PDDocument.load(baseFile.getInputStream());\n-\t\t\t\t\tOverlay overlay = new Overlay()) {\n-\t            Map<Integer, String> overlayGuide = prepareOverlayGuide(basePdf.getNumberOfPages(), overlayPdfFiles, mode, counts);\n-\t            \n-\t            overlay.setInputPDF(basePdf);\n-\t            if(overlayPos == 0) {\n-\t            \toverlay.setOverlayPosition(Overlay.Position.FOREGROUND);\n-\t            } else {\n-\t            \toverlay.setOverlayPosition(Overlay.Position.BACKGROUND);\n-\t            }\n-\t\n-\t            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-\t            overlay.overlay(overlayGuide).save(outputStream);\n-\t            byte[] data = outputStream.toByteArray();\n-\t            String outputFilename = baseFile.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_overlayed.pdf\";  // Remove file extension and append .pdf\n-\t\t        \n-\t            return WebResponseUtils.bytesToWebResponse(data, outputFilename, MediaType.APPLICATION_PDF);\n-\t        } \n+        List<File> tempFiles = new ArrayList<>(); // List to keep track of temporary files\n+\n+        try { \n+            for (int i = 0; i < overlayFiles.length; i++) {\n+                overlayPdfFiles[i] = GeneralUtils.multipartToFile(overlayFiles[i]);\n+            }\n+            \n+            String mode = request.getOverlayMode(); // \"SequentialOverlay\", \"InterleavedOverlay\", \"FixedRepeatOverlay\"\n+            int[] counts = request.getCounts(); // Used for FixedRepeatOverlay mode\n+\n+            try (PDDocument basePdf = PDDocument.load(baseFile.getInputStream());\n+                    Overlay overlay = new Overlay()) {\n+                Map<Integer, String> overlayGuide = prepareOverlayGuide(basePdf.getNumberOfPages(), overlayPdfFiles, mode, counts, tempFiles);\n+                \n+                overlay.setInputPDF(basePdf);\n+                if (overlayPos == 0) {\n+                    overlay.setOverlayPosition(Overlay.Position.FOREGROUND);\n+                } else {\n+                    overlay.setOverlayPosition(Overlay.Position.BACKGROUND);\n+                }\n+\n+                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+                overlay.overlay(overlayGuide).save(outputStream);\n+                byte[] data = outputStream.toByteArray();\n+                String outputFilename = baseFile.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_overlayed.pdf\";  // Remove file extension and append .pdf\n+                \n+                return WebResponseUtils.bytesToWebResponse(data, outputFilename, MediaType.APPLICATION_PDF);\n+            } \n         } finally {\n             for (File overlayPdfFile : overlayPdfFiles) {\n-                if (overlayPdfFile != null) overlayPdfFile.delete();\n+                if (overlayPdfFile != null) {\n+                    overlayPdfFile.delete();\n+                }\n+            }\n+            for (File tempFile : tempFiles) { // Delete temporary files\n+                if (tempFile != null) {\n+                    tempFile.delete();\n+                }\n             }\n         }\n     }\n \n-    private Map<Integer, String> prepareOverlayGuide(int basePageCount, File[] overlayFiles, String mode, int[] counts) throws IOException {\n+    private Map<Integer, String> prepareOverlayGuide(int basePageCount, File[] overlayFiles, String mode, int[] counts, List<File> tempFiles) throws IOException {\n         Map<Integer, String> overlayGuide = new HashMap<>();\n         switch (mode) {\n             case \"SequentialOverlay\":\n-                sequentialOverlay(overlayGuide, overlayFiles, basePageCount);\n+                sequentialOverlay(overlayGuide, overlayFiles, basePageCount, tempFiles);\n                 break;\n             case \"InterleavedOverlay\":\n                 interleavedOverlay(overlayGuide, overlayFiles, basePageCount);\n@@ -84,42 +94,80 @@ private Map<Integer, String> prepareOverlayGuide(int basePageCount, File[] overl\n         return overlayGuide;\n     }\n \n-    private void sequentialOverlay(Map<Integer, String> overlayGuide, File[] overlayFiles, int basePageCount) throws IOException {\n-        if (overlayFiles.length != 1 || basePageCount != PDDocument.load(overlayFiles[0]).getNumberOfPages()) {\n-            throw new IllegalArgumentException(\"Overlay file count and base page count must match for sequential overlay.\");\n-        }\n+    private void sequentialOverlay(Map<Integer, String> overlayGuide, File[] overlayFiles, int basePageCount, List<File> tempFiles) throws IOException {\n+        int overlayFileIndex = 0;\n+        int pageCountInCurrentOverlay = 0;\n+\n+        for (int basePageIndex = 1; basePageIndex <= basePageCount; basePageIndex++) {\n+            if (pageCountInCurrentOverlay == 0 || pageCountInCurrentOverlay >= getNumberOfPages(overlayFiles[overlayFileIndex])) {\n+                pageCountInCurrentOverlay = 0;\n+                overlayFileIndex = (overlayFileIndex + 1) % overlayFiles.length;\n+            }\n \n-        File overlayFile = overlayFiles[0];\n-        try (PDDocument overlayPdf = PDDocument.load(overlayFile)) {\n-            for (int i = 1; i <= overlayPdf.getNumberOfPages(); i++) {\n-                if (i > basePageCount) break;\n-                overlayGuide.put(i, overlayFile.getAbsolutePath());\n+            try (PDDocument overlayPdf = PDDocument.load(overlayFiles[overlayFileIndex])) {\n+                PDDocument singlePageDocument = new PDDocument();\n+                singlePageDocument.addPage(overlayPdf.getPage(pageCountInCurrentOverlay));\n+                File tempFile = File.createTempFile(\"overlay-page-\", \".pdf\");\n+                singlePageDocument.save(tempFile);\n+                singlePageDocument.close();\n+\n+                overlayGuide.put(basePageIndex, tempFile.getAbsolutePath());\n+                tempFiles.add(tempFile); // Keep track of the temporary file for cleanup\n             }\n+\n+            pageCountInCurrentOverlay++;\n+        }\n+    }\n+\n+    private int getNumberOfPages(File file) throws IOException {\n+        try (PDDocument doc = PDDocument.load(file)) {\n+            return doc.getNumberOfPages();\n         }\n     }\n \n \n+\n+\n+\n+\n+\n     private void interleavedOverlay(Map<Integer, String> overlayGuide, File[] overlayFiles, int basePageCount) throws IOException {\n-        for (int i = 0; i < basePageCount; i++) {\n-        \tFile overlayFile = overlayFiles[i % overlayFiles.length];\n-            overlayGuide.put(i + 1, overlayFile.getAbsolutePath());\n+        for (int basePageIndex = 1; basePageIndex <= basePageCount; basePageIndex++) {\n+            File overlayFile = overlayFiles[(basePageIndex - 1) % overlayFiles.length];\n+\n+            // Load the overlay document to check its page count\n+            try (PDDocument overlayPdf = PDDocument.load(overlayFile)) {\n+                int overlayPageCount = overlayPdf.getNumberOfPages();\n+                if ((basePageIndex - 1) % overlayPageCount < overlayPageCount) {\n+                    overlayGuide.put(basePageIndex, overlayFile.getAbsolutePath());\n+                }\n+            }\n         }\n     }\n \n+\n     private void fixedRepeatOverlay(Map<Integer, String> overlayGuide, File[] overlayFiles, int[] counts, int basePageCount) throws IOException {\n         if (overlayFiles.length != counts.length) {\n             throw new IllegalArgumentException(\"Counts array length must match the number of overlay files\");\n         }\n         int currentPage = 1;\n         for (int i = 0; i < overlayFiles.length; i++) {\n-        \tFile overlayFile = overlayFiles[i];\n+            File overlayFile = overlayFiles[i];\n             int repeatCount = counts[i];\n-            for (int j = 0; j < repeatCount; j++) {\n-                if (currentPage > basePageCount) break;\n-                overlayGuide.put(currentPage++, overlayFile.getAbsolutePath());\n+\n+            // Load the overlay document to check its page count\n+            try (PDDocument overlayPdf = PDDocument.load(overlayFile)) {\n+                int overlayPageCount = overlayPdf.getNumberOfPages();\n+                for (int j = 0; j < repeatCount; j++) {\n+                    for (int page = 0; page < overlayPageCount; page++) {\n+                        if (currentPage > basePageCount) break;\n+                        overlayGuide.put(currentPage++, overlayFile.getAbsolutePath());\n+                    }\n+                }\n             }\n         }\n     }\n+\n }\n \n // Additional classes like OverlayPdfsRequest, WebResponseUtils, etc. are assumed to be defined elsewhere.",
      "parent_sha": "80a59205fa7927c21d34deef2ebb409696ce3c1b"
    }
  },
  {
    "oid": "f4fcede77149875d9d0f295179c7b01ec3e1bd48",
    "message": "Update ProcessExecutor.java",
    "date": "2024-05-05T19:45:52Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/f4fcede77149875d9d0f295179c7b01ec3e1bd48",
    "details": {
      "sha": "93fdbd54b7d7f4fe5ebfd33eb5daea5ce3a12be7",
      "filename": "src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/f4fcede77149875d9d0f295179c7b01ec3e1bd48/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/f4fcede77149875d9d0f295179c7b01ec3e1bd48/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutor.java?ref=f4fcede77149875d9d0f295179c7b01ec3e1bd48",
      "patch": "@@ -58,10 +58,10 @@ public static ProcessExecutor getInstance(Processes processType, boolean liveUpd\n                     long timeoutMinutes =\n                             switch (key) {\n                                 case LIBRE_OFFICE -> 30;\n-                                case PDFTOHTML -> 5;\n+                                case PDFTOHTML -> 20;\n                                 case OCR_MY_PDF -> 30;\n                                 case PYTHON_OPENCV -> 30;\n-                                case GHOSTSCRIPT -> 5;\n+                                case GHOSTSCRIPT -> 30;\n                                 case WEASYPRINT -> 30;\n                                 case INSTALL_APP -> 60;\n                                 case CALIBRE -> 30;",
      "parent_sha": "66ce7511caa5a510cf06cf1277927c3dee02fb04"
    }
  },
  {
    "oid": "33f8d609009d2b18c4e3b9961d5b715233f6f0c4",
    "message": "Update SPdfApplication.java",
    "date": "2024-02-23T18:16:36Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/33f8d609009d2b18c4e3b9961d5b715233f6f0c4",
    "details": {
      "sha": "673bbf16e076fc0639eab89137c329c89637dcc3",
      "filename": "src/main/java/stirling/software/SPDF/SPdfApplication.java",
      "status": "modified",
      "additions": 51,
      "deletions": 52,
      "changes": 103,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/33f8d609009d2b18c4e3b9961d5b715233f6f0c4/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/33f8d609009d2b18c4e3b9961d5b715233f6f0c4/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java?ref=33f8d609009d2b18c4e3b9961d5b715233f6f0c4",
      "patch": "@@ -1,36 +1,72 @@\n-package stirling.software.SPDF;\n-\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.Collections;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n+import io.github.pixee.security.SystemCommand;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.env.Environment;\n import org.springframework.scheduling.annotation.EnableScheduling;\n \n-import io.github.pixee.security.SystemCommand;\n-\n-import jakarta.annotation.PostConstruct;\n-import stirling.software.SPDF.config.ConfigInitializer;\n-import stirling.software.SPDF.utils.GeneralUtils;\n+import static java.nio.file.Files.createDirectories;\n \n @SpringBootApplication\n @EnableScheduling\n public class SPdfApplication {\n \n-    @Autowired private Environment env;\n+    private static Environment env;\n+\n+    public SPdfApplication(Environment env) {\n+        SPdfApplication.env = env;\n+    }\n+\n+    public static void main(String[] args) {\n+        SpringApplication app = new SpringApplication(SPdfApplication.class);\n+        app.addInitializers((ApplicationContextInitializer<ConfigurableApplicationContext>) applicationContext -> {\n+            if (Files.exists(Paths.get(\"configs/settings.yml\"))) {\n+                app.setDefaultProperties(\n+                        Collections.singletonMap(\n+                                \"spring.config.additional-location\", \"file:configs/settings.yml\"));\n+            } else {\n+                System.out.println(\n+                        \"External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.\");\n+            }\n+        ConfigurableApplicationContext context = app.run(args);\n+\n+        createDirectories();\n+        printStartupMessage(context);\n+    }\n+    }\n+\n+    private static void createDirectories() {\n+        try {\n+            createDirectories(Paths.get(\"customFiles/static/\"));\n+            createDirectories(Paths.get(\"customFiles/templates/\"));\n+        } catch (Exception e) {\n+            System.err.println(\"Error creating directories: \" + e.getMessage());\n+        }\n+    }\n+\n+    private static void printStartupMessage(ConfigurableApplicationContext context) {\n+        String port = context.getEnvironment().getProperty(\"local.server.port\", \"8080\");\n+        String url = \"http://localhost:\" + port;\n+        System.out.println(\"Stirling-PDF Started.\");\n+        System.out.println(\"Navigate to \" + url);\n+\n+        // Open browser if BROWSER_OPEN environment variable is set to true\n+        openBrowserIfRequired(context);\n+    }\n \n-    @PostConstruct\n-    public void init() {\n-        // Check if the BROWSER_OPEN environment variable is set to true\n-        String browserOpenEnv = env.getProperty(\"BROWSER_OPEN\");\n+    private static void openBrowserIfRequired(ConfigurableApplicationContext context) {\n+        Environment environment = context.getEnvironment();\n+        String browserOpenEnv = environment.getProperty(\"BROWSER_OPEN\");\n         boolean browserOpen = browserOpenEnv != null && \"true\".equalsIgnoreCase(browserOpenEnv);\n \n         if (browserOpen) {\n             try {\n-                String url = \"http://localhost:\" + getPort();\n+                String url = \"http://localhost:\" + context.getEnvironment().getProperty(\"local.server.port\", \"8080\");\n \n                 String os = System.getProperty(\"os.name\").toLowerCase();\n                 Runtime rt = Runtime.getRuntime();\n@@ -39,45 +75,8 @@ public void init() {\n                     SystemCommand.runCommand(rt, \"rundll32 url.dll,FileProtocolHandler \" + url);\n                 }\n             } catch (Exception e) {\n-                e.printStackTrace();\n+                System.err.println(\"Error opening browser: \" + e.getMessage());\n             }\n         }\n     }\n-\n-    public static void main(String[] args) {\n-        SpringApplication app = new SpringApplication(SPdfApplication.class);\n-        app.addInitializers(new ConfigInitializer());\n-        if (Files.exists(Paths.get(\"configs/settings.yml\"))) {\n-            app.setDefaultProperties(\n-                    Collections.singletonMap(\n-                            \"spring.config.additional-location\", \"file:configs/settings.yml\"));\n-        } else {\n-            System.out.println(\n-                    \"External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.\");\n-        }\n-        app.run(args);\n-\n-        try {\n-            Thread.sleep(1000);\n-        } catch (InterruptedException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-\n-        GeneralUtils.createDir(\"customFiles/static/\");\n-        GeneralUtils.createDir(\"customFiles/templates/\");\n-\n-        System.out.println(\"Stirling-PDF Started.\");\n-\n-        String url = \"http://localhost:\" + getPort();\n-        System.out.println(\"Navigate to \" + url);\n-    }\n-\n-    public static String getPort() {\n-        String port = System.getProperty(\"local.server.port\");\n-        if (port == null || port.isEmpty()) {\n-            port = \"8080\";\n-        }\n-        return port;\n-    }\n }",
      "parent_sha": "4e2156ad791af621a339dae5ded836aff257cf7d"
    }
  },
  {
    "oid": "d532db91f92134fb0579925187313f7a7a31ff73",
    "message": "fixes for #438 and #423",
    "date": "2023-10-28T09:40:26Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/d532db91f92134fb0579925187313f7a7a31ff73",
    "details": {
      "sha": "0651949ec20dcbd8e8724d9650dd59da99ac3626",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/SplitPDFController.java",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/d532db91f92134fb0579925187313f7a7a31ff73/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPDFController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/d532db91f92134fb0579925187313f7a7a31ff73/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPDFController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPDFController.java?ref=d532db91f92134fb0579925187313f7a7a31ff73",
      "patch": "@@ -27,7 +27,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n import stirling.software.SPDF.model.api.PDFWithPageNums;\n import stirling.software.SPDF.utils.WebResponseUtils;\n-import org.apache.pdfbox.multipdf.Splitter;\n+\n @RestController\n @RequestMapping(\"/api/v1/general\")\n @Tag(name = \"General\", description = \"General APIs\")\n@@ -50,24 +50,26 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute PDFWithPageNums request)\n         \tpageNumbers.add(document.getNumberOfPages()- 1);\n         logger.info(\"Splitting PDF into pages: {}\", pageNumbers.stream().map(String::valueOf).collect(Collectors.joining(\",\")));\n \n-        Splitter splitter = new Splitter();\n+        // split the document\n         List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<>();\n-\n-        int previousPageNumber = 1; // PDFBox uses 1-based indexing for pages.\n+        int previousPageNumber = 0;\n         for (int splitPoint : pageNumbers) {\n-        \tsplitPoint = splitPoint + 1;\n-            splitter.setStartPage(previousPageNumber);\n-            splitter.setEndPage(splitPoint);\n-            List<PDDocument> splitDocuments = splitter.split(document);\n+            try (PDDocument splitDocument = new PDDocument()) {\n+                for (int i = previousPageNumber; i <= splitPoint; i++) {\n+                    PDPage page = document.getPage(i);\n+                    splitDocument.addPage(page);\n+                    logger.debug(\"Adding page {} to split document\", i);\n+                }\n+                previousPageNumber = splitPoint + 1;\n \n-            for (PDDocument splitDoc : splitDocuments) {\n                 ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                splitDoc.save(baos);\n+                splitDocument.save(baos);\n+\n                 splitDocumentsBoas.add(baos);\n-                splitDoc.close();\n+            } catch (Exception e) {\n+                logger.error(\"Failed splitting documents and saving them\", e);\n+                throw e;\n             }\n-\n-            previousPageNumber = splitPoint + 1;\n         }\n \n \n@@ -106,4 +108,4 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute PDFWithPageNums request)\n         \n     }\n \n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "bd0bf404f58b61e60f11b64ac88d15a89febf88b"
    }
  },
  {
    "oid": "949b87005c90d2d5347e80ef657e44b5d9c6a9c0",
    "message": "Fix metricCollection",
    "date": "2024-10-22T14:36:22Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/949b87005c90d2d5347e80ef657e44b5d9c6a9c0",
    "details": {
      "sha": "25d88335a0137f4796e01b2635ef18e70bf94e65",
      "filename": "src/main/java/stirling/software/SPDF/service/PostHogService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/949b87005c90d2d5347e80ef657e44b5d9c6a9c0/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FPostHogService.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/949b87005c90d2d5347e80ef657e44b5d9c6a9c0/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FPostHogService.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FPostHogService.java?ref=949b87005c90d2d5347e80ef657e44b5d9c6a9c0",
      "patch": "@@ -43,7 +43,7 @@ public PostHogService(\n     }\n \n     private void captureSystemInfo() {\n-        if (!Boolean.getBoolean(applicationProperties.getSystem().getEnableAnalytics())) {\n+        if (!Boolean.parseBoolean(applicationProperties.getSystem().getEnableAnalytics())) {\n             return;\n         }\n         try {",
      "parent_sha": "532f7cdbbf167d8c2e4897be2e8d36fe3e191af0"
    }
  },
  {
    "oid": "6ca9001fe6115ded1d147051795d870ae1c9c9bf",
    "message": "enable status check without apikey",
    "date": "2023-12-30T13:42:24Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/6ca9001fe6115ded1d147051795d870ae1c9c9bf",
    "details": {
      "sha": "71394b09ffc57f6afcb8ee90a3e4f71b8cde0e34",
      "filename": "src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/6ca9001fe6115ded1d147051795d870ae1c9c9bf/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FSecurityConfiguration.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/6ca9001fe6115ded1d147051795d870ae1c9c9bf/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FSecurityConfiguration.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FSecurityConfiguration.java?ref=6ca9001fe6115ded1d147051795d870ae1c9c9bf",
      "patch": "@@ -90,7 +90,8 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception  {\n \t                        return trimmedUri.startsWith(\"/login\") || trimmedUri.endsWith(\".svg\") || \r\n \t                               trimmedUri.startsWith(\"/register\") || trimmedUri.startsWith(\"/error\") || \r\n \t                               trimmedUri.startsWith(\"/images/\") || trimmedUri.startsWith(\"/public/\") || \r\n-\t                               trimmedUri.startsWith(\"/css/\") || trimmedUri.startsWith(\"/js/\");\r\n+\t                               trimmedUri.startsWith(\"/css/\") || trimmedUri.startsWith(\"/js/\")   ||\r\n+\t                               trimmedUri.startsWith(\"api/v1/info/status\");\r\n \t                    }\r\n \t                    ).permitAll()\r\n \t                    .anyRequest().authenticated()\r",
      "parent_sha": "a5ee10e02936e6c1992a200a4b1d5d8e52167580"
    }
  },
  {
    "oid": "135f9611dfead102856d5f4094ca11b2a0b588e7",
    "message": "hometext fix",
    "date": "2023-08-26T22:45:43Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/135f9611dfead102856d5f4094ca11b2a0b588e7",
    "details": {
      "sha": "9645c82038a0c3ce825bac6c44a77602cdcbdfab",
      "filename": "src/main/java/stirling/software/SPDF/config/AppConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/135f9611dfead102856d5f4094ca11b2a0b588e7/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/135f9611dfead102856d5f4094ca11b2a0b588e7/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java?ref=135f9611dfead102856d5f4094ca11b2a0b588e7",
      "patch": "@@ -36,7 +36,7 @@ public String appVersion() {\n \r\n     @Bean(name = \"homeText\")\r\n     public String homeText() {\r\n-        return applicationProperties.getUi().getHomeDescription();\r\n+    \treturn (applicationProperties.getUi().getHomeDescription() != null) ? applicationProperties.getUi().getHomeDescription() : \"null\";\r\n     }\r\n \r\n \r",
      "parent_sha": "cfaaeebd4a6b8ff72c93c77fd8c7e18ed2fbb79b"
    }
  },
  {
    "oid": "af68c7023957e2ce11094980ed2740ece206be9c",
    "message": "Update SPdfApplication.java (#853)\n\n* Update SPdfApplication.java\r\n\r\n* Update SPdfApplication.java\r\n\r\n* Update SPdfApplication.java\r\n\r\n---------\r\n\r\nCo-authored-by: Eric <71648843+sbplat@users.noreply.github.com>",
    "date": "2024-02-24T20:22:47Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/af68c7023957e2ce11094980ed2740ece206be9c",
    "details": {
      "sha": "d72d02fb3e45b1c5716659d0e647dcd4e37ae05e",
      "filename": "src/main/java/stirling/software/SPDF/SPdfApplication.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/af68c7023957e2ce11094980ed2740ece206be9c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/af68c7023957e2ce11094980ed2740ece206be9c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java?ref=af68c7023957e2ce11094980ed2740ece206be9c",
      "patch": "@@ -64,7 +64,8 @@ public static void main(String[] args) throws IOException, InterruptedException\n         try {\n             Thread.sleep(1000);\n         } catch (InterruptedException e) {\n-            throw new InterruptedException(\"Error\");\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(\"Thread interrupted while sleeping\", e);\n         }\n \n         try {",
      "parent_sha": "5bd544dcd725cb3ebab21bf541ff56a914746484"
    }
  },
  {
    "oid": "19c564a6f7d6a1f09fc2082376198a15fca5481e",
    "message": "Fix: Initialization Issue and Enhance Configuration Management for ConfigInitializer #1324",
    "date": "2024-05-31T21:51:42Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/19c564a6f7d6a1f09fc2082376198a15fca5481e",
    "details": {
      "sha": "874d43c38269b81e2d277c268b92ac4377ce6433",
      "filename": "src/main/java/stirling/software/SPDF/config/ConfigInitializer.java",
      "status": "modified",
      "additions": 23,
      "deletions": 8,
      "changes": 31,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/19c564a6f7d6a1f09fc2082376198a15fca5481e/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/19c564a6f7d6a1f09fc2082376198a15fca5481e/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java?ref=19c564a6f7d6a1f09fc2082376198a15fca5481e",
      "patch": "@@ -1,8 +1,10 @@\n package stirling.software.SPDF.config;\n \n+import java.io.BufferedReader;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.net.URISyntaxException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n@@ -45,15 +47,27 @@ public void ensureConfigExists() throws IOException, URISyntaxException {\n                 }\n             }\n         } else {\n-            Path templatePath =\n-                    Paths.get(\n-                            getClass()\n-                                    .getClassLoader()\n-                                    .getResource(\"settings.yml.template\")\n-                                    .toURI());\n-            Path userPath = Paths.get(\"configs\", \"settings.yml\");\n+            // Load the template content from classpath\n+            List<String> templateLines;\n+            try (InputStream in =\n+                    getClass().getClassLoader().getResourceAsStream(\"settings.yml.template\")) {\n+                if (in == null) {\n+                    throw new FileNotFoundException(\n+                            \"Resource file not found: settings.yml.template\");\n+                }\n+                templateLines = new ArrayList<>();\n+                try (var reader = new InputStreamReader(in)) {\n+                    try (var bufferedReader = new BufferedReader(reader)) {\n+                        String line;\n+                        while ((line = bufferedReader.readLine()) != null) {\n+                            templateLines.add(line);\n+                        }\n+                    }\n+                }\n+            }\n \n-            List<String> templateLines = Files.readAllLines(templatePath);\n+            // Read the user settings file if it exists\n+            Path userPath = Paths.get(\"configs\", \"settings.yml\");\n             List<String> userLines =\n                     Files.exists(userPath) ? Files.readAllLines(userPath) : new ArrayList<>();\n \n@@ -87,6 +101,7 @@ else if (templateLine.trim().length() == 0) {\n             Files.write(userPath, resultLines);\n         }\n \n+        // Ensure the custom settings file exists\n         Path customSettingsPath = Paths.get(\"configs\", \"custom_settings.yml\");\n         if (!Files.exists(customSettingsPath)) {\n             Files.createFile(customSettingsPath);",
      "parent_sha": "6afbd8bd249cf9c9c1318166108716fb7bcc68c3"
    }
  },
  {
    "oid": "80604517137406eb7cae316f933c0c46d5d61a7f",
    "message": "Update AutoSplitPdfController.java",
    "date": "2024-01-28T18:16:59Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/80604517137406eb7cae316f933c0c46d5d61a7f",
    "details": {
      "sha": "cf9b622035f77b57e244c14b0c3a70869f7d62c0",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/AutoSplitPdfController.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/80604517137406eb7cae316f933c0c46d5d61a7f/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FAutoSplitPdfController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/80604517137406eb7cae316f933c0c46d5d61a7f/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FAutoSplitPdfController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FAutoSplitPdfController.java?ref=80604517137406eb7cae316f933c0c46d5d61a7f",
      "patch": "@@ -43,6 +43,7 @@\n public class AutoSplitPdfController {\n \n     private static final String QR_CONTENT = \"https://github.com/Stirling-Tools/Stirling-PDF\";\n+    private static final String QR_CONTENT_OLD = \"https://github.com/Frooodle/Stirling-PDF\";\n \n     @PostMapping(value = \"/auto-split-pdf\", consumes = \"multipart/form-data\")\n     @Operation(\n@@ -63,12 +64,14 @@ public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute AutoSplitPdfRequest r\n         for (int page = 0; page < document.getNumberOfPages(); ++page) {\n             BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 150);\n             String result = decodeQRCode(bim);\n-\n-            if (QR_CONTENT.equals(result) && page != 0) {\n+            System.out.println(\"result =  \" + result);\n+            if ((QR_CONTENT.equals(result) || QR_CONTENT_OLD.equals(result)) && page != 0) {\n+                System.out.println(\"page \" + (page + 1) + \" is QR\");\n                 splitDocuments.add(new PDDocument());\n             }\n \n-            if (!splitDocuments.isEmpty() && !QR_CONTENT.equals(result)) {\n+            if (!splitDocuments.isEmpty() && !QR_CONTENT.equals(result) && !QR_CONTENT_OLD.equals(result)) {\n+                System.out.println(\"page \" + (page + 1) + \" is NOT QR\");\n                 splitDocuments.get(splitDocuments.size() - 1).addPage(document.getPage(page));\n             } else if (page == 0) {\n                 PDDocument firstDocument = new PDDocument();\n@@ -77,7 +80,7 @@ public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute AutoSplitPdfRequest r\n             }\n \n             // If duplexMode is true and current page is a divider, then skip next page\n-            if (duplexMode && QR_CONTENT.equals(result)) {\n+            if (duplexMode && (QR_CONTENT.equals(result) || QR_CONTENT_OLD.equals(result))) {\n                 page++;\n             }\n         }",
      "parent_sha": "6130f14d5a801323be280804dba030c4cf7e191f"
    }
  },
  {
    "oid": "65b9544942d7792b845d8722fe7d2560162dcba6",
    "message": "#1214 Fix unable to create FileMonitor if the root directory does not exist",
    "date": "2024-05-29T15:03:24Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/65b9544942d7792b845d8722fe7d2560162dcba6",
    "details": {
      "sha": "c11352ef66f941aea292d025d03b2ae85958b259",
      "filename": "src/main/java/stirling/software/SPDF/utils/FileMonitor.java",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/65b9544942d7792b845d8722fe7d2560162dcba6/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileMonitor.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/65b9544942d7792b845d8722fe7d2560162dcba6/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileMonitor.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileMonitor.java?ref=65b9544942d7792b845d8722fe7d2560162dcba6",
      "patch": "@@ -24,13 +24,12 @@ public class FileMonitor {\n     private final ConcurrentHashMap.KeySetView<Path, Boolean> readyForProcessingFiles;\n     private final WatchService watchService;\n     private final Predicate<Path> pathFilter;\n+    private final Path rootDir;\n     private Set<Path> stagingFiles;\n \n     /**\n      * @param rootDirectory the root directory to monitor\n-     * @param pathFilter the filter to apply to the paths, return true if the path should be\n-     *     monitored, false otherwise\n-     * @throws IOException\n+     * @param pathFilter the filter to apply to the paths, return true if the path should be monitored, false otherwise\n      */\n     @Autowired\n     public FileMonitor(\n@@ -43,11 +42,7 @@ public FileMonitor(\n         this.pathFilter = pathFilter;\n         this.readyForProcessingFiles = ConcurrentHashMap.newKeySet();\n         this.watchService = FileSystems.getDefault().newWatchService();\n-\n-        Path path = Path.of(rootDirectory);\n-        recursivelyRegisterEntry(path);\n-\n-        logger.info(\"Created a new file tracker for directory: {}\", rootDirectory);\n+        this.rootDir = Path.of(rootDirectory);\n     }\n \n     private boolean shouldNotProcess(Path path) {\n@@ -82,6 +77,20 @@ public void trackFiles() {\n         */\n         stagingFiles = new HashSet<>(newlyDiscoveredFiles);\n         readyForProcessingFiles.clear();\n+\n+        if (path2KeyMapping.isEmpty()) {\n+            logger.warn(\n+                    \"not monitoring any directory, even the root directory itself: {}\", rootDir);\n+            if (Files.exists(\n+                    rootDir)) { // if the root directory exists, re-register the root directory\n+                try {\n+                    recursivelyRegisterEntry(rootDir);\n+                } catch (IOException e) {\n+                    logger.error(\"unable to register monitoring\", e);\n+                }\n+            }\n+        }\n+\n         WatchKey key;\n         while ((key = watchService.poll()) != null) {\n             final Path watchingDir = (Path) key.watchable();\n@@ -119,10 +128,6 @@ public void trackFiles() {\n             boolean isKeyValid = key.reset();\n             if (!isKeyValid) { // key is invalid when the directory itself is no longer exists\n                 path2KeyMapping.remove((Path) key.watchable());\n-                if (path2KeyMapping.isEmpty()) {\n-                    logger.warn(\n-                            \"FileMonitor is not monitoring any directory, no even the root directory.\");\n-                }\n             }\n         }\n         readyForProcessingFiles.addAll(stagingFiles);",
      "parent_sha": "17ef2e9b5dc7c7d8cbba5d426f2d34b0b2702062"
    }
  },
  {
    "oid": "58ad7a1e8a81f80024511af4b1612051412447c6",
    "message": "info permission fix",
    "date": "2023-08-29T23:12:40Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/58ad7a1e8a81f80024511af4b1612051412447c6",
    "details": {
      "sha": "393ac7ed028a45a89b02a650db04e1c2ed264ab5",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/58ad7a1e8a81f80024511af4b1612051412447c6/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/58ad7a1e8a81f80024511af4b1612051412447c6/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java?ref=58ad7a1e8a81f80024511af4b1612051412447c6",
      "patch": "@@ -1,6 +1,7 @@\n package stirling.software.SPDF.controller.api.security;\n \n import java.io.IOException;\n+import org.apache.pdfbox.pdmodel.encryption.AccessPermission;\n import java.nio.charset.StandardCharsets;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n@@ -331,8 +332,21 @@ public ResponseEntity<byte[]> getPdfInfo(\n                 PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                 encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                 encryption.put(\"KeyLength\", pdfEncryption.getLength());\n-                encryption.put(\"Permissions\", pdfBoxDoc.getCurrentAccessPermission().toString());\n-                \n+                AccessPermission ap = pdfBoxDoc.getCurrentAccessPermission();\n+                if (ap != null) {\n+                    ObjectNode permissionsNode = objectMapper.createObjectNode();\n+                    \n+                    permissionsNode.put(\"CanAssembleDocument\", ap.canAssembleDocument());\n+                    permissionsNode.put(\"CanExtractContent\", ap.canExtractContent());\n+                    permissionsNode.put(\"CanExtractForAccessibility\", ap.canExtractForAccessibility());\n+                    permissionsNode.put(\"CanFillInForm\", ap.canFillInForm());\n+                    permissionsNode.put(\"CanModify\", ap.canModify());\n+                    permissionsNode.put(\"CanModifyAnnotations\", ap.canModifyAnnotations());\n+                    permissionsNode.put(\"CanPrint\", ap.canPrint());\n+                    permissionsNode.put(\"CanPrintDegraded\", ap.canPrintDegraded());\n+\n+                    encryption.set(\"Permissions\", permissionsNode);  // set the node under \"Permissions\"\n+                } \n                 // Add other encryption-related properties as needed\n             } else {\n             \tencryption.put(\"IsEncrypted\", false);",
      "parent_sha": "622ee29dd8f79dec01a6af58f8577e9d1700ca0f"
    }
  },
  {
    "oid": "e7e3b34b37de10a60751421d5e3f572fa8d2eaed",
    "message": "fix for #1035 (#1137)\n\n* fix for #1035\r\n\r\n* Update ConvertImgPDFController.java",
    "date": "2024-04-28T21:37:40Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/e7e3b34b37de10a60751421d5e3f572fa8d2eaed",
    "details": {
      "sha": "eeb4db0861b18ed8c826fe980ea04f2fbea4bec2",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java",
      "status": "modified",
      "additions": 8,
      "deletions": 19,
      "changes": 27,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/e7e3b34b37de10a60751421d5e3f572fa8d2eaed/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/e7e3b34b37de10a60751421d5e3f572fa8d2eaed/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java?ref=e7e3b34b37de10a60751421d5e3f572fa8d2eaed",
      "patch": "@@ -6,10 +6,6 @@\n import org.apache.pdfbox.rendering.ImageType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.core.io.ByteArrayResource;\n-import org.springframework.core.io.Resource;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n@@ -39,7 +35,7 @@ public class ConvertImgPDFController {\n             summary = \"Convert PDF to image(s)\",\n             description =\n                     \"This endpoint converts a PDF file to image(s) with the specified image format, color type, and DPI. Users can choose to get a single image or multiple images.  Input:PDF Output:Image Type:SI-Conditional\")\n-    public ResponseEntity<Resource> convertToImage(@ModelAttribute ConvertToImageRequest request)\n+    public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageRequest request)\n             throws IOException {\n         MultipartFile file = request.getFileInput();\n         String imageFormat = request.getImageFormat();\n@@ -76,22 +72,15 @@ public ResponseEntity<Resource> convertToImage(@ModelAttribute ConvertToImageReq\n             // TODO Auto-generated catch block\n             e.printStackTrace();\n         }\n+\n         if (singleImage) {\n-            HttpHeaders headers = new HttpHeaders();\n-            headers.setContentType(MediaType.parseMediaType(getMediaType(imageFormat)));\n-            ResponseEntity<Resource> response =\n-                    new ResponseEntity<>(new ByteArrayResource(result), headers, HttpStatus.OK);\n-            return response;\n+            String docName = filename + \".\" + imageFormat; \n+            MediaType mediaType = MediaType.parseMediaType(getMediaType(imageFormat));\n+            return WebResponseUtils.bytesToWebResponse(result, docName, mediaType);\n         } else {\n-            ByteArrayResource resource = new ByteArrayResource(result);\n-            // return the Resource in the response\n-            return ResponseEntity.ok()\n-                    .header(\n-                            HttpHeaders.CONTENT_DISPOSITION,\n-                            \"attachment; filename=\" + filename + \"_convertedToImages.zip\")\n-                    .contentType(MediaType.APPLICATION_OCTET_STREAM)\n-                    .contentLength(resource.contentLength())\n-                    .body(resource);\n+            String zipFilename = filename + \"_convertedToImages.zip\";\n+            return WebResponseUtils.bytesToWebResponse(\n+                    result, zipFilename, MediaType.APPLICATION_OCTET_STREAM);\n         }\n     }\n ",
      "parent_sha": "6ed9e1c707df3709eaf840edadaeb06b187550d6"
    }
  },
  {
    "oid": "a4f923eb3a0c7f26cce156177dba92d57d8f0942",
    "message": "Update StampController.java",
    "date": "2024-02-10T11:19:22Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/a4f923eb3a0c7f26cce156177dba92d57d8f0942",
    "details": {
      "sha": "68a65d711f2b272067942106fb340fe654f34c73",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 38,
      "changes": 39,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/a4f923eb3a0c7f26cce156177dba92d57d8f0942/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/a4f923eb3a0c7f26cce156177dba92d57d8f0942/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java?ref=a4f923eb3a0c7f26cce156177dba92d57d8f0942",
      "patch": "@@ -88,44 +88,7 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n         // Load the input PDF\n         PDDocument document = Loader.loadPDF(pdfFile.getBytes());\n \n-        for (PDPage page : document.getPages()) {\n-            PDRectangle pageSize = page.getMediaBox();\n-            float margin = marginFactor * (pageSize.getWidth() + pageSize.getHeight()) / 2;\n-\n-            PDPageContentStream contentStream =\n-                    new PDPageContentStream(\n-                            document, page, PDPageContentStream.AppendMode.APPEND, true, true);\n-\n-            PDExtendedGraphicsState graphicsState = new PDExtendedGraphicsState();\n-            graphicsState.setNonStrokingAlphaConstant(opacity);\n-            contentStream.setGraphicsStateParameters(graphicsState);\n-\n-            if (\"text\".equalsIgnoreCase(stampType)) {\n-                addTextStamp(\n-                        contentStream,\n-                        stampText,\n-                        document,\n-                        page,\n-                        rotation,\n-                        position,\n-                        fontSize,\n-                        alphabet,\n-                        overrideX,\n-                        overrideY,\n-                        margin,\n-                        customColor);\n-            } else if (\"image\".equalsIgnoreCase(stampType)) {\n-                addImageStamp(\n-                        contentStream,\n-                        stampImage,\n-                        document,\n-                        page,\n-                        rotation,\n-                        position,\n-                        fontSize,\n-                        overrideX,\n-                        overrideY,\n-                        margin);\n+      \n \n         List<Integer> pageNumbers = request.getPageNumbersList();\n ",
      "parent_sha": "bf8b9021004a92a050c9e5369013125460006805"
    }
  },
  {
    "oid": "c20d37518d6a36db57ec174491fe7b6a512b7930",
    "message": "prop fixes",
    "date": "2024-12-11T22:09:35Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/c20d37518d6a36db57ec174491fe7b6a512b7930",
    "details": {
      "sha": "2258bb055d1962a2ee552c8813603cab77b89900",
      "filename": "src/main/java/stirling/software/SPDF/SPdfApplication.java",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/c20d37518d6a36db57ec174491fe7b6a512b7930/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/c20d37518d6a36db57ec174491fe7b6a512b7930/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java?ref=c20d37518d6a36db57ec174491fe7b6a512b7930",
      "patch": "@@ -79,10 +79,15 @@ public static void main(String[] args) throws IOException, InterruptedException\n \n         SpringApplication app = new SpringApplication(SPdfApplication.class);\n         \n+        Properties props = new Properties();\n+        \n         if(\"true\".equals(System.getenv(\"STIRLING_PDF_DESKTOP_UI\"))) {\n \t        System.setProperty(\"java.awt.headless\", \"false\");\n \t        app.setHeadless(false);\n+\t        props.put(\"java.awt.headless\", \"false\");\n+\t        props.put(\"spring.main.web-application-type\", \"servlet\");\n         }\n+        \n         app.setAdditionalProfiles(\"default\");\n         app.addInitializers(new ConfigInitializer());\n         Map<String, String> propertyFiles = new HashMap<>();\n@@ -106,18 +111,12 @@ public static void main(String[] args) throws IOException, InterruptedException\n         } else {\n             logger.warn(\"Custom configuration file 'configs/custom_settings.yml' does not exist.\");\n         }\n-\n-        if (!propertyFiles.isEmpty()) {\n-            app.setDefaultProperties(\n-                    Collections.singletonMap(\n-                            \"spring.config.additional-location\",\n-                            propertyFiles.get(\"spring.config.additional-location\")));\n-        }\n-\n-        Properties props = new Properties();\n-        props.put(\"java.awt.headless\", \"false\");\n-        props.put(\"spring.main.web-application-type\", \"servlet\");\n-        app.setDefaultProperties(props);\n+        Properties finalProps = new Properties();\n+        finalProps.putAll(Collections.singletonMap(\n+                \"spring.config.additional-location\",\n+                propertyFiles.get(\"spring.config.additional-location\")));\n+        finalProps.putAll(props);\n+        app.setDefaultProperties(finalProps);\n \n         app.run(args);\n ",
      "parent_sha": "eb20f5195837de6e2b9ac89802433f4390b717e8"
    }
  },
  {
    "oid": "3799ab529f5b92e68eb25e06d7f0751c3ce60de2",
    "message": "Update OptimizePdfRequest.java (#2720)\n\n# Description\n\nPlease provide a summary of the changes, including relevant motivation\nand context.\n\nCloses #2417\n\n## Checklist\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [ ] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)",
    "date": "2025-01-16T19:31:37Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/3799ab529f5b92e68eb25e06d7f0751c3ce60de2",
    "details": {
      "sha": "5ddfba5775d7a692bb038047a6ebe8c492fdbad8",
      "filename": "src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/3799ab529f5b92e68eb25e06d7f0751c3ce60de2/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2Fapi%2Fmisc%2FOptimizePdfRequest.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/3799ab529f5b92e68eb25e06d7f0751c3ce60de2/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2Fapi%2Fmisc%2FOptimizePdfRequest.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2Fapi%2Fmisc%2FOptimizePdfRequest.java?ref=3799ab529f5b92e68eb25e06d7f0751c3ce60de2",
      "patch": "@@ -26,7 +26,7 @@ public class OptimizePdfRequest extends PDFFile {\n \n     @Schema(\n             description =\n-                    \"Whether to normalize the PDF content for better compatibility. Default is true.\",\n-            defaultValue = \"true\")\n-    private Boolean normalize = true;\n+                    \"Whether to normalize the PDF content for better compatibility. Default is false.\",\n+            defaultValue = \"false\")\n+    private Boolean normalize = false;\n }",
      "parent_sha": "65370a19a2f1500c381e071fea9cdad5e0604c9b"
    }
  },
  {
    "oid": "e50391a44a3b36557c3602b0c6c018a639f3eae8",
    "message": "Added multithreaded feature for image extraction (#1641)\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>",
    "date": "2024-08-07T21:16:57Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/e50391a44a3b36557c3602b0c6c018a639f3eae8",
    "details": {
      "sha": "7fe27a0337ce4e5a381a28da319ead9bda66fd94",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java",
      "status": "modified",
      "additions": 121,
      "deletions": 73,
      "changes": 194,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/e50391a44a3b36557c3602b0c6c018a639f3eae8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImagesController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/e50391a44a3b36557c3602b0c6c018a639f3eae8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImagesController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImagesController.java?ref=e50391a44a3b36557c3602b0c6c018a639f3eae8",
      "patch": "@@ -1,19 +1,8 @@\n package stirling.software.SPDF.controller.api.misc;\n \n-import java.awt.Graphics2D;\n-import java.awt.Image;\n-import java.awt.image.BufferedImage;\n-import java.awt.image.RenderedImage;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.zip.Deflater;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipOutputStream;\n-\n-import javax.imageio.ImageIO;\n-\n+import io.github.pixee.security.Filenames;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.pdmodel.PDDocument;\n@@ -28,14 +17,25 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import org.springframework.web.multipart.MultipartFile;\n-\n-import io.github.pixee.security.Filenames;\n-import io.swagger.v3.oas.annotations.Operation;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-\n import stirling.software.SPDF.model.api.PDFWithImageFormatRequest;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.RenderedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.zip.Deflater;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n @RestController\n @RequestMapping(\"/api/v1/misc\")\n @Tag(name = \"Misc\", description = \"Miscellaneous APIs\")\n@@ -47,16 +47,19 @@ public class ExtractImagesController {\n     @Operation(\n             summary = \"Extract images from a PDF file\",\n             description =\n-                    \"This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format. Input:PDF Output:IMAGE/ZIP Type:SIMO\")\n+                    \"This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format. Input: PDF Output: IMAGE/ZIP Type: SIMO\")\n     public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFWithImageFormatRequest request)\n-            throws IOException {\n+            throws IOException, InterruptedException, ExecutionException {\n         MultipartFile file = request.getFileInput();\n         String format = request.getFormat();\n \n         System.out.println(\n-                System.currentTimeMillis() + \"file=\" + file.getName() + \", format=\" + format);\n+                System.currentTimeMillis() + \" file=\" + file.getName() + \", format=\" + format);\n         PDDocument document = Loader.loadPDF(file.getBytes());\n \n+        // Determine if multithreading should be used based on PDF size or number of pages\n+        boolean useMultithreading = shouldUseMultithreading(file, document);\n+\n         // Create ByteArrayOutputStream to write zip file to byte array\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n@@ -66,76 +69,121 @@ public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFWithImageFormatRe\n         // Set compression level\n         zos.setLevel(Deflater.BEST_COMPRESSION);\n \n-        int imageIndex = 1;\n         String filename =\n                 Filenames.toSimpleFileName(file.getOriginalFilename())\n                         .replaceFirst(\"[.][^.]+$\", \"\");\n-        int pageNum = 0;\n         Set<Integer> processedImages = new HashSet<>();\n-        // Iterate over each page\n-        for (PDPage page : document.getPages()) {\n-            ++pageNum;\n-            // Extract images from page\n-            for (COSName name : page.getResources().getXObjectNames()) {\n-                if (page.getResources().isImageXObject(name)) {\n-                    PDImageXObject image = (PDImageXObject) page.getResources().getXObject(name);\n-                    int imageHash = image.hashCode();\n+\n+        if (useMultithreading) {\n+            // Executor service to handle multithreading\n+            ExecutorService executor =\n+                    Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n+            Set<Future<Void>> futures = new HashSet<>();\n+\n+            // Iterate over each page\n+            for (int pgNum = 0; pgNum < document.getPages().getCount(); pgNum++) {\n+                PDPage page = document.getPage(pgNum);\n+                int pageNum = document.getPages().indexOf(page) + 1;\n+                // Submit a task for processing each page\n+                Future<Void> future =\n+                        executor.submit(\n+                                () -> {\n+                                    extractImagesFromPage(\n+                                            page, format, filename, pageNum, processedImages, zos);\n+                                    return null;\n+                                });\n+\n+                futures.add(future);\n+            }\n+\n+            // Wait for all tasks to complete\n+            for (Future<Void> future : futures) {\n+                future.get();\n+            }\n+\n+            // Close executor service\n+            executor.shutdown();\n+        } else {\n+            // Single-threaded extraction\n+            for (int pgNum = 0; pgNum < document.getPages().getCount(); pgNum++) {\n+                PDPage page = document.getPage(pgNum);\n+                extractImagesFromPage(page, format, filename, pgNum + 1, processedImages, zos);\n+            }\n+        }\n+\n+        // Close PDDocument and ZipOutputStream\n+        document.close();\n+        zos.close();\n+\n+        // Create ByteArrayResource from byte array\n+        byte[] zipContents = baos.toByteArray();\n+\n+        return WebResponseUtils.boasToWebResponse(\n+                baos, filename + \"_extracted-images.zip\", MediaType.APPLICATION_OCTET_STREAM);\n+    }\n+\n+    private boolean shouldUseMultithreading(MultipartFile file, PDDocument document) {\n+        // Criteria: Use multithreading if file size > 10MB or number of pages > 20\n+        long fileSizeInMB = file.getSize() / (1024 * 1024);\n+        int numberOfPages = document.getPages().getCount();\n+        return fileSizeInMB > 10 || numberOfPages > 20;\n+    }\n+\n+    private void extractImagesFromPage(\n+            PDPage page,\n+            String format,\n+            String filename,\n+            int pageNum,\n+            Set<Integer> processedImages,\n+            ZipOutputStream zos)\n+            throws IOException {\n+        for (COSName name : page.getResources().getXObjectNames()) {\n+            if (page.getResources().isImageXObject(name)) {\n+                PDImageXObject image = (PDImageXObject) page.getResources().getXObject(name);\n+                int imageHash = image.hashCode();\n+                synchronized (processedImages) {\n                     if (processedImages.contains(imageHash)) {\n                         continue; // Skip already processed images\n                     }\n                     processedImages.add(imageHash);\n+                }\n \n-                    // Convert image to desired format\n-                    RenderedImage renderedImage = image.getImage();\n-                    BufferedImage bufferedImage = null;\n-                    if (\"png\".equalsIgnoreCase(format)) {\n-                        bufferedImage =\n-                                new BufferedImage(\n-                                        renderedImage.getWidth(),\n-                                        renderedImage.getHeight(),\n-                                        BufferedImage.TYPE_INT_ARGB);\n-                    } else if (\"jpeg\".equalsIgnoreCase(format) || \"jpg\".equalsIgnoreCase(format)) {\n-                        bufferedImage =\n-                                new BufferedImage(\n-                                        renderedImage.getWidth(),\n-                                        renderedImage.getHeight(),\n-                                        BufferedImage.TYPE_INT_RGB);\n-                    } else if (\"gif\".equalsIgnoreCase(format)) {\n-                        bufferedImage =\n-                                new BufferedImage(\n-                                        renderedImage.getWidth(),\n-                                        renderedImage.getHeight(),\n-                                        BufferedImage.TYPE_BYTE_INDEXED);\n-                    }\n+                RenderedImage renderedImage = image.getImage();\n \n-                    // Write image to zip file\n-                    String imageName =\n-                            filename + \"_\" + imageIndex + \" (Page \" + pageNum + \").\" + format;\n-                    ZipEntry zipEntry = new ZipEntry(imageName);\n-                    zos.putNextEntry(zipEntry);\n+                // Convert to standard RGB colorspace if needed\n+                BufferedImage bufferedImage = convertToRGB(renderedImage, format);\n \n-                    Graphics2D g = bufferedImage.createGraphics();\n-                    g.drawImage((Image) renderedImage, 0, 0, null);\n-                    g.dispose();\n-                    // Write image bytes to zip file\n+                // Write image to zip file\n+                String imageName = filename + \"_\" + imageHash + \" (Page \" + pageNum + \").\" + format;\n+                synchronized (zos) {\n+                    zos.putNextEntry(new ZipEntry(imageName));\n                     ByteArrayOutputStream imageBaos = new ByteArrayOutputStream();\n                     ImageIO.write(bufferedImage, format, imageBaos);\n                     zos.write(imageBaos.toByteArray());\n-\n                     zos.closeEntry();\n-                    imageIndex++;\n                 }\n             }\n         }\n+    }\n \n-        // Close ZipOutputStream and PDDocument\n-        zos.close();\n-        document.close();\n-\n-        // Create ByteArrayResource from byte array\n-        byte[] zipContents = baos.toByteArray();\n+    private BufferedImage convertToRGB(RenderedImage renderedImage, String format) {\n+        int width = renderedImage.getWidth();\n+        int height = renderedImage.getHeight();\n+        BufferedImage rgbImage;\n+\n+        if (\"png\".equalsIgnoreCase(format)) {\n+            rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+        } else if (\"jpeg\".equalsIgnoreCase(format) || \"jpg\".equalsIgnoreCase(format)) {\n+            rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n+        } else if (\"gif\".equalsIgnoreCase(format)) {\n+            rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_INDEXED);\n+        } else {\n+            rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n+        }\n \n-        return WebResponseUtils.boasToWebResponse(\n-                baos, filename + \"_extracted-images.zip\", MediaType.APPLICATION_OCTET_STREAM);\n+        Graphics2D g = rgbImage.createGraphics();\n+        g.drawImage((Image) renderedImage, 0, 0, null);\n+        g.dispose();\n+        return rgbImage;\n     }\n }",
      "parent_sha": "96b080528bb5f3b1a6646a8fa4cfe92f19d6757b"
    }
  },
  {
    "oid": "1670a09d049231045cb012d382e60af2c58c4c19",
    "message": "Update SanitizeController.java",
    "date": "2023-08-19T10:58:18Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/1670a09d049231045cb012d382e60af2c58c4c19",
    "details": {
      "sha": "a3adc5eb5ae7fb64b44fb7e7c68e1f802d04563e",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/1670a09d049231045cb012d382e60af2c58c4c19/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FSanitizeController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/1670a09d049231045cb012d382e60af2c58c4c19/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FSanitizeController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FSanitizeController.java?ref=1670a09d049231045cb012d382e60af2c58c4c19",
      "patch": "@@ -38,19 +38,19 @@ public ResponseEntity<byte[]> sanitizePDF(\n \t        @RequestPart(required = true, value = \"fileInput\")\r\n \t        @Parameter(description = \"The input PDF file to be sanitized\")\r\n \t                MultipartFile inputFile,\r\n-\t        @RequestParam(name = \"removeJavaScript\", required = false, defaultValue = \"true\")\r\n+\t        @RequestParam(name = \"removeJavaScript\", required = false, defaultValue = \"false\")\r\n \t        @Parameter(description = \"Remove JavaScript actions from the PDF if set to true\")\r\n \t                Boolean removeJavaScript,\r\n-\t        @RequestParam(name = \"removeEmbeddedFiles\", required = false, defaultValue = \"true\")\r\n+\t        @RequestParam(name = \"removeEmbeddedFiles\", required = false, defaultValue = \"false\")\r\n \t        @Parameter(description = \"Remove embedded files from the PDF if set to true\")\r\n \t                Boolean removeEmbeddedFiles,\r\n-\t        @RequestParam(name = \"removeMetadata\", required = false, defaultValue = \"true\")\r\n+\t        @RequestParam(name = \"removeMetadata\", required = false, defaultValue = \"false\")\r\n \t        @Parameter(description = \"Remove metadata from the PDF if set to true\")\r\n \t                Boolean removeMetadata,\r\n-\t        @RequestParam(name = \"removeLinks\", required = false, defaultValue = \"true\")\r\n+\t        @RequestParam(name = \"removeLinks\", required = false, defaultValue = \"false\")\r\n \t        @Parameter(description = \"Remove links from the PDF if set to true\")\r\n \t                Boolean removeLinks,\r\n-\t        @RequestParam(name = \"removeFonts\", required = false, defaultValue = \"true\")\r\n+\t        @RequestParam(name = \"removeFonts\", required = false, defaultValue = \"false\")\r\n \t        @Parameter(description = \"Remove fonts from the PDF if set to true\")\r\n \t                Boolean removeFonts) throws IOException {\r\n \r",
      "parent_sha": "620b954336f5a5dcd8390c727bdc49728a01c95a"
    }
  },
  {
    "oid": "94aba370e09c522fef965d85c74dd0e954e2d872",
    "message": "refactor: expose local application server port",
    "date": "2023-12-29T18:05:01Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/94aba370e09c522fef965d85c74dd0e954e2d872",
    "details": {
      "sha": "73142f3e27186c10e2715dd32c76eec6c9ea9802",
      "filename": "src/main/java/stirling/software/SPDF/SPdfApplication.java",
      "status": "modified",
      "additions": 16,
      "deletions": 20,
      "changes": 36,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/94aba370e09c522fef965d85c74dd0e954e2d872/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/94aba370e09c522fef965d85c74dd0e954e2d872/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java?ref=94aba370e09c522fef965d85c74dd0e954e2d872",
      "patch": "@@ -16,7 +16,7 @@\n \r\n //@EnableScheduling\r\n public class SPdfApplication {\r\n-\t\r\n+\r\n \t@Autowired\r\n     private Environment env;\r\n \r\n@@ -28,11 +28,7 @@ public void init() {\n \r\n         if (browserOpen) {\r\n             try {\r\n-                String port = env.getProperty(\"local.server.port\");\r\n-                if(port == null || port.length() == 0) {\r\n-                \tport=\"8080\";\r\n-                }\r\n-                String url = \"http://localhost:\" + port;\r\n+                String url = \"http://localhost:\" + getPort();\r\n \r\n                 String os = System.getProperty(\"os.name\").toLowerCase();\r\n                 Runtime rt = Runtime.getRuntime();\r\n@@ -45,7 +41,7 @@ public void init() {\n             }\r\n         }\r\n     }\r\n-\t\r\n+\r\n     public static void main(String[] args) {\r\n     \tSpringApplication app = new SpringApplication(SPdfApplication.class);\r\n     \tapp.addInitializers(new ConfigInitializer());\r\n@@ -55,28 +51,28 @@ public static void main(String[] args) {\n             System.out.println(\"External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.\");\r\n         }\r\n         app.run(args);\r\n-        \r\n+\r\n         try {\r\n \t\t\tThread.sleep(1000);\r\n \t\t} catch (InterruptedException e) {\r\n \t\t\t// TODO Auto-generated catch block\r\n \t\t\te.printStackTrace();\r\n \t\t}\r\n-        \r\n+\r\n         GeneralUtils.createDir(\"customFiles/static/\");\r\n         GeneralUtils.createDir(\"customFiles/templates/\");\r\n-        \r\n-        \r\n-        \r\n+\r\n         System.out.println(\"Stirling-PDF Started.\");\r\n-        \r\n+\r\n+        String url = \"http://localhost:\" + getPort();\r\n+        System.out.println(\"Navigate to \" + url);\r\n+    }\r\n+\r\n+    public static String getPort() {\r\n         String port = System.getProperty(\"local.server.port\");\r\n-        if(port == null || port.length() == 0) {\r\n-        \tport=\"8080\";\r\n+        if (port == null || port.isEmpty()) {\r\n+            port = \"8080\";\r\n         }\r\n-        String url = \"http://localhost:\" + port;\r\n-        System.out.println(\"Navigate to \" + url);\r\n+        return port;\r\n     }\r\n-    \r\n-    \r\n-}\n\\ No newline at end of file\n+}\r",
      "parent_sha": "27e8335f79740fb08686821da83d48829243ce5a"
    }
  },
  {
    "oid": "3c0a8071dca0de436e519a30bafb6ef701922e00",
    "message": "added support for new line break in stampController (#2370)\n\nadded support for new line in stampController\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>",
    "date": "2024-12-02T17:48:19Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/3c0a8071dca0de436e519a30bafb6ef701922e00",
    "details": {
      "sha": "cdd5c5c8edb04a4551b94580afbd84d2dbb7ef7f",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/3c0a8071dca0de436e519a30bafb6ef701922e00/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/3c0a8071dca0de436e519a30bafb6ef701922e00/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FStampController.java?ref=3c0a8071dca0de436e519a30bafb6ef701922e00",
      "patch": "@@ -147,7 +147,7 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(pdfFile.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_stamped.pdf\");\n     }\n \n@@ -191,7 +191,7 @@ private void addTextStamp(\n             String fileExtension = resourceDir.substring(resourceDir.lastIndexOf(\".\"));\n             File tempFile = Files.createTempFile(\"NotoSansFont\", fileExtension).toFile();\n             try (InputStream is = classPathResource.getInputStream();\n-                    FileOutputStream os = new FileOutputStream(tempFile)) {\n+                 FileOutputStream os = new FileOutputStream(tempFile)) {\n                 IOUtils.copy(is, os);\n                 font = PDType0Font.load(document, tempFile);\n             } finally {\n@@ -229,10 +229,22 @@ private void addTextStamp(\n                     calculatePositionY(\n                             pageSize, position, calculateTextCapHeight(font, fontSize), margin);\n         }\n+        // Split the stampText into multiple lines\n+        String[] lines = stampText.split(\"\\\\\\\\n\");\n+\n+        // Calculate dynamic line height based on font ascent and descent\n+        float ascent = font.getFontDescriptor().getAscent();\n+        float descent = font.getFontDescriptor().getDescent();\n+        float lineHeight = ((ascent - descent) / 1000) * fontSize;\n \n         contentStream.beginText();\n-        contentStream.setTextMatrix(Matrix.getRotateInstance(Math.toRadians(rotation), x, y));\n-        contentStream.showText(stampText);\n+        for (int i = 0; i < lines.length; i++) {\n+            String line = lines[i];\n+            // Set the text matrix for each line with rotation\n+            contentStream.setTextMatrix(\n+                    Matrix.getRotateInstance(Math.toRadians(rotation), x, y - (i * lineHeight)));\n+            contentStream.showText(line);\n+        }\n         contentStream.endText();\n     }\n \n@@ -327,4 +339,4 @@ private float calculateTextWidth(String text, PDFont font, float fontSize) throw\n     private float calculateTextCapHeight(PDFont font, float fontSize) {\n         return font.getFontDescriptor().getCapHeight() / 1000 * fontSize;\n     }\n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "04ccdf6f762475b3b70d4512016790ae87789696"
    }
  },
  {
    "oid": "8670afb96f52cce3d172f48813546355fac08ba2",
    "message": "Revert \"Update SPdfApplication.java\"\n\nThis reverts commit 33f8d609009d2b18c4e3b9961d5b715233f6f0c4.",
    "date": "2024-02-23T18:16:42Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/8670afb96f52cce3d172f48813546355fac08ba2",
    "details": {
      "sha": "62cbfe10a3513ae010490aec9b0ef1d66490b727",
      "filename": "src/main/java/stirling/software/SPDF/SPdfApplication.java",
      "status": "modified",
      "additions": 52,
      "deletions": 51,
      "changes": 103,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/8670afb96f52cce3d172f48813546355fac08ba2/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/8670afb96f52cce3d172f48813546355fac08ba2/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java?ref=8670afb96f52cce3d172f48813546355fac08ba2",
      "patch": "@@ -1,72 +1,36 @@\n+package stirling.software.SPDF;\n+\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.Collections;\n \n-import io.github.pixee.security.SystemCommand;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.context.ApplicationContextInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.env.Environment;\n import org.springframework.scheduling.annotation.EnableScheduling;\n \n-import static java.nio.file.Files.createDirectories;\n+import io.github.pixee.security.SystemCommand;\n+\n+import jakarta.annotation.PostConstruct;\n+import stirling.software.SPDF.config.ConfigInitializer;\n+import stirling.software.SPDF.utils.GeneralUtils;\n \n @SpringBootApplication\n @EnableScheduling\n public class SPdfApplication {\n \n-    private static Environment env;\n-\n-    public SPdfApplication(Environment env) {\n-        SPdfApplication.env = env;\n-    }\n-\n-    public static void main(String[] args) {\n-        SpringApplication app = new SpringApplication(SPdfApplication.class);\n-        app.addInitializers((ApplicationContextInitializer<ConfigurableApplicationContext>) applicationContext -> {\n-            if (Files.exists(Paths.get(\"configs/settings.yml\"))) {\n-                app.setDefaultProperties(\n-                        Collections.singletonMap(\n-                                \"spring.config.additional-location\", \"file:configs/settings.yml\"));\n-            } else {\n-                System.out.println(\n-                        \"External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.\");\n-            }\n-        ConfigurableApplicationContext context = app.run(args);\n-\n-        createDirectories();\n-        printStartupMessage(context);\n-    }\n-    }\n-\n-    private static void createDirectories() {\n-        try {\n-            createDirectories(Paths.get(\"customFiles/static/\"));\n-            createDirectories(Paths.get(\"customFiles/templates/\"));\n-        } catch (Exception e) {\n-            System.err.println(\"Error creating directories: \" + e.getMessage());\n-        }\n-    }\n-\n-    private static void printStartupMessage(ConfigurableApplicationContext context) {\n-        String port = context.getEnvironment().getProperty(\"local.server.port\", \"8080\");\n-        String url = \"http://localhost:\" + port;\n-        System.out.println(\"Stirling-PDF Started.\");\n-        System.out.println(\"Navigate to \" + url);\n-\n-        // Open browser if BROWSER_OPEN environment variable is set to true\n-        openBrowserIfRequired(context);\n-    }\n+    @Autowired private Environment env;\n \n-    private static void openBrowserIfRequired(ConfigurableApplicationContext context) {\n-        Environment environment = context.getEnvironment();\n-        String browserOpenEnv = environment.getProperty(\"BROWSER_OPEN\");\n+    @PostConstruct\n+    public void init() {\n+        // Check if the BROWSER_OPEN environment variable is set to true\n+        String browserOpenEnv = env.getProperty(\"BROWSER_OPEN\");\n         boolean browserOpen = browserOpenEnv != null && \"true\".equalsIgnoreCase(browserOpenEnv);\n \n         if (browserOpen) {\n             try {\n-                String url = \"http://localhost:\" + context.getEnvironment().getProperty(\"local.server.port\", \"8080\");\n+                String url = \"http://localhost:\" + getPort();\n \n                 String os = System.getProperty(\"os.name\").toLowerCase();\n                 Runtime rt = Runtime.getRuntime();\n@@ -75,8 +39,45 @@ private static void openBrowserIfRequired(ConfigurableApplicationContext context\n                     SystemCommand.runCommand(rt, \"rundll32 url.dll,FileProtocolHandler \" + url);\n                 }\n             } catch (Exception e) {\n-                System.err.println(\"Error opening browser: \" + e.getMessage());\n+                e.printStackTrace();\n             }\n         }\n     }\n+\n+    public static void main(String[] args) {\n+        SpringApplication app = new SpringApplication(SPdfApplication.class);\n+        app.addInitializers(new ConfigInitializer());\n+        if (Files.exists(Paths.get(\"configs/settings.yml\"))) {\n+            app.setDefaultProperties(\n+                    Collections.singletonMap(\n+                            \"spring.config.additional-location\", \"file:configs/settings.yml\"));\n+        } else {\n+            System.out.println(\n+                    \"External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.\");\n+        }\n+        app.run(args);\n+\n+        try {\n+            Thread.sleep(1000);\n+        } catch (InterruptedException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+\n+        GeneralUtils.createDir(\"customFiles/static/\");\n+        GeneralUtils.createDir(\"customFiles/templates/\");\n+\n+        System.out.println(\"Stirling-PDF Started.\");\n+\n+        String url = \"http://localhost:\" + getPort();\n+        System.out.println(\"Navigate to \" + url);\n+    }\n+\n+    public static String getPort() {\n+        String port = System.getProperty(\"local.server.port\");\n+        if (port == null || port.isEmpty()) {\n+            port = \"8080\";\n+        }\n+        return port;\n+    }\n }",
      "parent_sha": "33f8d609009d2b18c4e3b9961d5b715233f6f0c4"
    }
  },
  {
    "oid": "cf3693186a2c3cdcf0325cdd762ef42aba2379df",
    "message": "Fixes headers issue in merge pdfs.",
    "date": "2023-12-25T21:27:08Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/cf3693186a2c3cdcf0325cdd762ef42aba2379df",
    "details": {
      "sha": "7db00a3141bf31535c2df989e902d283161f1376",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/MergeController.java",
      "status": "modified",
      "additions": 14,
      "deletions": 24,
      "changes": 38,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/cf3693186a2c3cdcf0325cdd762ef42aba2379df/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FMergeController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/cf3693186a2c3cdcf0325cdd762ef42aba2379df/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FMergeController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FMergeController.java?ref=cf3693186a2c3cdcf0325cdd762ef42aba2379df",
      "patch": "@@ -1,35 +1,32 @@\n package stirling.software.SPDF.controller.api;\n \n-import java.io.*;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Comparator;\n-import java.util.List;\n-\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n import org.apache.pdfbox.io.MemoryUsageSetting;\n import org.apache.pdfbox.multipdf.PDFMergerUtility;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import org.springframework.web.multipart.MultipartFile;\n-\n-import io.swagger.v3.oas.annotations.Operation;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import stirling.software.SPDF.model.api.general.MergePdfsRequest;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+\n @RestController\n @RequestMapping(\"/api/v1/general\")\n @Tag(name = \"General\", description = \"General APIs\")\n@@ -93,7 +90,6 @@ private Comparator<MultipartFile> getSortComparator(String sortType) {\n     @Operation(summary = \"Merge multiple PDF files into one\",\n             description = \"This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO\")\n     public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest form) throws IOException {\n-\n         try {\n             MultipartFile[] files = form.getFileInput();\n             Arrays.sort(files, getSortComparator(form.getSortType()));\n@@ -105,17 +101,11 @@ public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest form) t\n                 mergedDoc.addSource(new ByteArrayInputStream(file.getBytes()));\n             }\n \n-            mergedDoc.setDestinationFileName(files[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\"));\n+            mergedDoc.setDestinationFileName(files[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_merged.pdf\");\n             mergedDoc.setDestinationStream(docOutputstream);\n             mergedDoc.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());\n \n-            HttpHeaders headers = new HttpHeaders();\n-            headers.setContentType(MediaType.APPLICATION_PDF);\n-\n-            // Here you have to set the actual filename of your pdf\n-            headers.setContentDispositionFormData(mergedDoc.getDestinationFileName(), mergedDoc.getDestinationFileName());\n-            headers.setCacheControl(\"must-revalidate, post-check=0, pre-check=0\");\n-            return new ResponseEntity<>(docOutputstream.toByteArray(), headers, HttpStatus.OK);\n+            return WebResponseUtils.bytesToWebResponse(docOutputstream.toByteArray(), mergedDoc.getDestinationFileName());\n         } catch (Exception ex) {\n             logger.error(\"Error in merge pdf process\", ex);\n            throw ex;",
      "parent_sha": "fb18d0d04db51e5c255532872aa68f0f7aaead74"
    }
  },
  {
    "oid": "ad5f057733238a172856d78a2ce49654155ad81c",
    "message": "Fix for #306",
    "date": "2023-08-12T18:53:14Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/ad5f057733238a172856d78a2ce49654155ad81c",
    "details": {
      "sha": "bcc7e37fb287fc45feabf62c3ee6b63c680a2942",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/ad5f057733238a172856d78a2ce49654155ad81c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FPasswordController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/ad5f057733238a172856d78a2ce49654155ad81c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FPasswordController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FPasswordController.java?ref=ad5f057733238a172856d78a2ce49654155ad81c",
      "patch": "@@ -52,13 +52,13 @@ public ResponseEntity<byte[]> addPassword(\n         @RequestPart(required = true, value = \"fileInput\")\n         @Parameter(description = \"The input PDF file to which the password should be added\", required = true)\n             MultipartFile fileInput,\n-            @RequestParam(value = \"\", name = \"ownerPassword\")\n+            @RequestParam(value = \"\", name = \"ownerPassword\", required = false, defaultValue = \"\")\n         @Parameter(description = \"The owner password to be added to the PDF file (Restricts what can be done with the document once it is opened)\")\n             String ownerPassword,\n-            @RequestParam( name = \"password\", required = false)\n+            @RequestParam( name = \"password\", required = false, defaultValue = \"\")\n         @Parameter(description = \"The password to be added to the PDF file (Restricts the opening of the document itself.)\")\n             String password,\n-            @RequestParam( name = \"keyLength\", required = false)\n+            @RequestParam( name = \"keyLength\", required = false, defaultValue = \"256\")\n         @Parameter(description = \"The length of the encryption key\", schema = @Schema(allowableValues = {\"40\", \"128\", \"256\"}))\n             int keyLength,\n             @RequestParam( name = \"canAssembleDocument\", required = false)\n@@ -98,15 +98,15 @@ public ResponseEntity<byte[]> addPassword(\n         ap.setCanPrint(!canPrint);\n         ap.setCanPrintFaithful(!canPrintFaithful);\n         StandardProtectionPolicy spp = new StandardProtectionPolicy(ownerPassword, password, ap);\n-        \n-     \n-        \n-        spp.setEncryptionKeyLength(keyLength);\n \n+        if(!\"\".equals(ownerPassword) || !\"\".equals(password)) {\n+        \tspp.setEncryptionKeyLength(keyLength);\n+        }\n         spp.setPermissions(ap);\n-\n         document.protect(spp);\n \n+        if(\"\".equals(ownerPassword) && \"\".equals(password))\n+        \treturn WebResponseUtils.pdfDocToWebResponse(document, fileInput.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_permissions.pdf\");\n         return WebResponseUtils.pdfDocToWebResponse(document, fileInput.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_passworded.pdf\");\n     }\n ",
      "parent_sha": "6f325b5fdbfa8831a92d8f94b681e0cceab273f4"
    }
  },
  {
    "oid": "41b41996c582b7dca84c4743211889054f479110",
    "message": "fix(pdf): resolve compression error and file overwrite issues (#2937)\n\n# Description of Changes\n\n- **What was changed:**\n- Modified the file handling logic to avoid overwriting the source PDF\nwhile it is being read, which previously led to corrupted output files.\n-Modified the logic where optimizeLevel is 9 and we are chacking for\noptimizeLevel < 9.\n- **Why the change was made:**\n- The original compression process would stuck when dealing with larger\nfiles, failing to meet the specified target size limits.\n- Overwriting the input file during processing was causing warnings and\npotential file corruption, which could lead to instability and incorrect\noutputs.\n\n- **Any challenges encountered:**\n\nCloses #2930\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally",
    "date": "2025-02-12T22:15:30Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/41b41996c582b7dca84c4743211889054f479110",
    "details": {
      "sha": "beff8261b399e06112bb8f2bb77df016c27e2cd3",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/41b41996c582b7dca84c4743211889054f479110/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FCompressController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/41b41996c582b7dca84c4743211889054f479110/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FCompressController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FCompressController.java?ref=41b41996c582b7dca84c4743211889054f479110",
      "patch": "@@ -5,6 +5,7 @@\n import java.io.ByteArrayOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -94,7 +95,9 @@ private void compressImagesInPDF(Path pdfFile, double initialScaleFactor) throws\n                     }\n                 }\n             }\n-            doc.save(pdfFile.toString());\n+            Path tempOutput = Files.createTempFile(\"output_\", \".pdf\");\n+            doc.save(tempOutput.toString());\n+            Files.move(tempOutput, pdfFile, StandardCopyOption.REPLACE_EXISTING);\n         }\n     }\n \n@@ -188,7 +191,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                     optimizeLevel =\n                             incrementOptimizeLevel(\n                                     optimizeLevel, outputFileSize, expectedOutputSize);\n-                    if (autoMode && optimizeLevel > 9) {\n+                    if (autoMode && optimizeLevel >= 9) {\n                         log.info(\"Maximum compression level reached in auto mode\");\n                         sizeMet = true;\n                     }",
      "parent_sha": "2abf48a57be164226a695f4cb752b3a4563f3c58"
    }
  },
  {
    "oid": "3a6969cad0b29988c6d4b985cd7b568ce2408818",
    "message": "Fix: synchronizing the browser settings to the database  #1481 (#1510)\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>",
    "date": "2024-06-26T20:48:50Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/3a6969cad0b29988c6d4b985cd7b568ce2408818",
    "details": {
      "sha": "0a6ccc7018534ba5f558c16b5b66df3446c17e44",
      "filename": "src/main/java/stirling/software/SPDF/model/User.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/3a6969cad0b29988c6d4b985cd7b568ce2408818/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FUser.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/3a6969cad0b29988c6d4b985cd7b568ce2408818/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FUser.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FUser.java?ref=3a6969cad0b29988c6d4b985cd7b568ce2408818",
      "patch": "@@ -16,6 +16,7 @@\n import jakarta.persistence.GenerationType;\n import jakarta.persistence.Id;\n import jakarta.persistence.JoinColumn;\n+import jakarta.persistence.Lob;\n import jakarta.persistence.MapKeyColumn;\n import jakarta.persistence.OneToMany;\n import jakarta.persistence.Table;\n@@ -55,7 +56,8 @@ public class User {\n \n     @ElementCollection\n     @MapKeyColumn(name = \"setting_key\")\n-    @Column(name = \"setting_value\")\n+    @Lob\n+    @Column(name = \"setting_value\", columnDefinition = \"CLOB\")\n     @CollectionTable(name = \"user_settings\", joinColumns = @JoinColumn(name = \"user_id\"))\n     private Map<String, String> settings = new HashMap<>(); // Key-value pairs of settings.\n ",
      "parent_sha": "88e8663d4449dedbadd84bc95fc5be6f40707a3d"
    }
  },
  {
    "oid": "eb20f5195837de6e2b9ac89802433f4390b717e8",
    "message": "headless",
    "date": "2024-12-11T21:56:50Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/eb20f5195837de6e2b9ac89802433f4390b717e8",
    "details": {
      "sha": "5b2c1bed87628d5c96d77b0f1da7912f4a2e2e31",
      "filename": "src/main/java/stirling/software/SPDF/SPdfApplication.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/eb20f5195837de6e2b9ac89802433f4390b717e8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/eb20f5195837de6e2b9ac89802433f4390b717e8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2FSPdfApplication.java?ref=eb20f5195837de6e2b9ac89802433f4390b717e8",
      "patch": "@@ -75,10 +75,14 @@ private static boolean isPortAvailable(int port) {\n \n     public static void main(String[] args) throws IOException, InterruptedException {\n \n-        System.setProperty(\"java.awt.headless\", \"false\");\n+        \n \n         SpringApplication app = new SpringApplication(SPdfApplication.class);\n-        app.setHeadless(false);\n+        \n+        if(\"true\".equals(System.getenv(\"STIRLING_PDF_DESKTOP_UI\"))) {\n+\t        System.setProperty(\"java.awt.headless\", \"false\");\n+\t        app.setHeadless(false);\n+        }\n         app.setAdditionalProfiles(\"default\");\n         app.addInitializers(new ConfigInitializer());\n         Map<String, String> propertyFiles = new HashMap<>();",
      "parent_sha": "97d28ac6d24a52e4e36bae5b1cabc4bc120c05ff"
    }
  },
  {
    "oid": "a9679da719322da551936c335d9b55ebfc50acc2",
    "message": "Revert weasy",
    "date": "2024-03-28T19:38:56Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/a9679da719322da551936c335d9b55ebfc50acc2",
    "details": {
      "sha": "da8d0677059552e87a3b13640b5bbbb4f1a3532e",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/a9679da719322da551936c335d9b55ebfc50acc2/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertWebsiteToPDF.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/a9679da719322da551936c335d9b55ebfc50acc2/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertWebsiteToPDF.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertWebsiteToPDF.java?ref=a9679da719322da551936c335d9b55ebfc50acc2",
      "patch": "@@ -28,10 +28,6 @@\n @RequestMapping(\"/api/v1/convert\")\n public class ConvertWebsiteToPDF {\n \n-    @Autowired\n-    @Qualifier(\"bookAndHtmlFormatsInstalled\")\n-    private boolean bookAndHtmlFormatsInstalled;\n-\n     @PostMapping(consumes = \"multipart/form-data\", value = \"/url/pdf\")\n     @Operation(\n             summary = \"Convert a URL to a PDF\",\n@@ -53,11 +49,7 @@ public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request)\n \n             // Prepare the OCRmyPDF command\n             List<String> command = new ArrayList<>();\n-            if (!bookAndHtmlFormatsInstalled) {\n-                command.add(\"weasyprint\");\n-            } else {\n-                command.add(\"wkhtmltopdf\");\n-            }\n+            command.add(\"weasyprint\");\n             command.add(URL);\n             command.add(tempOutputFile.toString());\n ",
      "parent_sha": "f10b3ffe3c32e010543d3c1fb8764e8bc7d4ff34"
    }
  },
  {
    "oid": "c9cb1959b301c5b1eafac8a3e0303445aec5d240",
    "message": "Update WatermarkController.java",
    "date": "2023-02-06T10:52:11Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/c9cb1959b301c5b1eafac8a3e0303445aec5d240",
    "details": {
      "sha": "6fd2c8cb0d06b98e3739a733dd7c0d651d188150",
      "filename": "src/main/java/stirling/software/SPDF/controller/security/WatermarkController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/c9cb1959b301c5b1eafac8a3e0303445aec5d240/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fsecurity%2FWatermarkController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/c9cb1959b301c5b1eafac8a3e0303445aec5d240/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fsecurity%2FWatermarkController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fsecurity%2FWatermarkController.java?ref=c9cb1959b301c5b1eafac8a3e0303445aec5d240",
      "patch": "@@ -34,7 +34,7 @@ public String addWatermarkForm(Model model) {\n \t}\r\n \r\n \t@PostMapping(\"/add-watermark\")\r\n-\tpublic ResponseEntity<byte[]> addWatermark(@RequestParam(\"pdfFile\") MultipartFile pdfFile,\r\n+\tpublic ResponseEntity<byte[]> addWatermark(@RequestParam(\"fileInput\") MultipartFile pdfFile,\r\n \t\t\t@RequestParam(\"watermarkText\") String watermarkText,\r\n \t\t\t@RequestParam(defaultValue = \"30\", name = \"fontSize\") float fontSize,\r\n \t\t\t@RequestParam(defaultValue = \"0\", name = \"rotation\") float rotation,\r",
      "parent_sha": "cab3fe1bf42ea6287d0077dd63ac957b2e49e5fe"
    }
  },
  {
    "oid": "a4afe5b708fc3c434f0202787d3b5203b1f00148",
    "message": "@Qualifier(\"runningEE\")",
    "date": "2025-01-08T15:22:04Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/a4afe5b708fc3c434f0202787d3b5203b1f00148",
    "details": {
      "sha": "66ab1881ebb73c7612053f3805a62b4b5f417388",
      "filename": "src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/a4afe5b708fc3c434f0202787d3b5203b1f00148/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseConfig.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/a4afe5b708fc3c434f0202787d3b5203b1f00148/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseConfig.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseConfig.java?ref=a4afe5b708fc3c434f0202787d3b5203b1f00148",
      "patch": "@@ -27,7 +27,7 @@ public class DatabaseConfig {\n     private final ApplicationProperties applicationProperties;\n     private final boolean runningEE;\n \n-    public DatabaseConfig(ApplicationProperties applicationProperties, boolean runningEE) {\n+    public DatabaseConfig(ApplicationProperties applicationProperties, @Qualifier(\"runningEE\") boolean runningEE) {\n         this.applicationProperties = applicationProperties;\n         this.runningEE = runningEE;\n     }",
      "parent_sha": "d1ed70146cc6d4cbe4e23c939b3362bcfa21426d"
    }
  },
  {
    "oid": "12d86049f6cd030ac8ff9f0e4df2564f17546e08",
    "message": "Add default to convert image to pdf api",
    "date": "2024-12-18T00:30:06Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/12d86049f6cd030ac8ff9f0e4df2564f17546e08",
    "details": {
      "sha": "3e4fa6ba0ba5e7d9a5a73e7af35de82930e4c63b",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/12d86049f6cd030ac8ff9f0e4df2564f17546e08/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/12d86049f6cd030ac8ff9f0e4df2564f17546e08/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fconverters%2FConvertImgPDFController.java?ref=12d86049f6cd030ac8ff9f0e4df2564f17546e08",
      "patch": "@@ -210,7 +210,13 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n         String fitOption = request.getFitOption();\n         String colorType = request.getColorType();\n         boolean autoRotate = request.isAutoRotate();\n-\n+        // Handle Null entries for formdata\n+        if (colorType == null || colorType.isBlank()) {\n+            colorType = \"color\";\n+        }\n+        if (fitOption == null || fitOption.isEmpty()) {\n+            fitOption = \"fitDocumentToImage\";\n+        }\n         // Convert the file to PDF and get the resulting bytes\n         byte[] bytes =\n                 PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType, pdfDocumentFactory);",
      "parent_sha": "e9f80d03ea38eebb3c3a3a2f5cafbd12f05df137"
    }
  },
  {
    "oid": "c8acddb251ca3fd55bbea48f7d3259135fc68ebc",
    "message": "Resolve split sections",
    "date": "2024-01-13T01:05:43Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/c8acddb251ca3fd55bbea48f7d3259135fc68ebc",
    "details": {
      "sha": "de3e5a4b0655a5d82ab271763b94ab660602acb6",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/c8acddb251ca3fd55bbea48f7d3259135fc68ebc/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPdfBySectionsController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/c8acddb251ca3fd55bbea48f7d3259135fc68ebc/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPdfBySectionsController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPdfBySectionsController.java?ref=c8acddb251ca3fd55bbea48f7d3259135fc68ebc",
      "patch": "@@ -118,13 +118,12 @@ public List<PDDocument> splitPdfPages(\n \n                     try (PDPageContentStream contentStream =\n                             new PDPageContentStream(\n-                                    subDoc, subPage, AppendMode.OVERWRITE, true, true)) {\n+                                    subDoc, subPage, AppendMode.APPEND, true, true)) {\n                         // Set clipping area and position\n                         float translateX = -subPageWidth * i;\n-                        float translateY = height - subPageHeight * (verticalDivisions - j);\n-\n-                        // Code for google Docs pdfs..\n-                        // float translateY = -subPageHeight * (verticalDivisions - 1 - j);\n+                       \n+                        //float translateY = height - subPageHeight * (verticalDivisions - j);\n+                        float translateY = -subPageHeight * (verticalDivisions - 1 - j);\n \n                         contentStream.saveGraphicsState();\n                         contentStream.addRect(0, 0, subPageWidth, subPageHeight);",
      "parent_sha": "d8cf7e81b9d338976178030b73a48095437f573a"
    }
  },
  {
    "oid": "d832a90de0ea3373de21f71c298230d27195de70",
    "message": "(CodeQL) Fixed finding: \"Arbitrary file access during archive extraction (\"Zip Slip\")\n\" (#2344)\n\n(CodeQL) Fixed finding: \"Arbitrary file access during archive extraction (\"Zip Slip\")\n\"\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>",
    "date": "2024-11-27T07:16:03Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/d832a90de0ea3373de21f71c298230d27195de70",
    "details": {
      "sha": "3dabef54908c3eb85e3c49415f15298670f4d83c",
      "filename": "src/main/java/stirling/software/SPDF/utils/FileToPdf.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/d832a90de0ea3373de21f71c298230d27195de70/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileToPdf.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/d832a90de0ea3373de21f71c298230d27195de70/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileToPdf.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FFileToPdf.java?ref=d832a90de0ea3373de21f71c298230d27195de70",
      "patch": "@@ -105,7 +105,7 @@ private static void sanitizeHtmlFilesInZip(Path zipFilePath) throws IOException\n                         new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n             ZipEntry entry = zipIn.getNextEntry();\n             while (entry != null) {\n-                Path filePath = tempUnzippedDir.resolve(entry.getName());\n+                Path filePath = tempUnzippedDir.resolve(sanitizeZipFilename(entry.getName()));\n                 if (!entry.isDirectory()) {\n                     Files.createDirectories(filePath.getParent());\n                     if (entry.getName().toLowerCase().endsWith(\".html\")\n@@ -175,7 +175,7 @@ private static Path unzipAndGetMainHtml(byte[] fileBytes) throws IOException {\n                 ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(fileBytes))) {\n             ZipEntry entry = zipIn.getNextEntry();\n             while (entry != null) {\n-                Path filePath = tempDirectory.resolve(entry.getName());\n+                Path filePath = tempDirectory.resolve(sanitizeZipFilename(entry.getName()));\n                 if (entry.isDirectory()) {\n                     Files.createDirectories(filePath); // Explicitly create the directory structure\n                 } else {\n@@ -241,4 +241,14 @@ public static byte[] convertBookTypeToPdf(byte[] bytes, String originalFilename)\n             Files.deleteIfExists(tempOutputFile);\n         }\n     }\n+    \n+    static String sanitizeZipFilename(String entryName) {\n+        if (entryName == null || entryName.trim().isEmpty()) {\n+            return entryName;\n+        }\n+        while (entryName.contains(\"../\") || entryName.contains(\"..\\\\\")) {\n+            entryName = entryName.replace(\"../\", \"\").replace(\"..\\\\\", \"\");\n+        }\n+        return entryName;\n+    }\n }",
      "parent_sha": "212e52123888d234afeb168b323eb3478048f089"
    }
  },
  {
    "oid": "c1f78d0f9b75d8ef0cbf568cbc8b101f4baa69c6",
    "message": "Validates the file name (#1793)",
    "date": "2024-09-02T20:03:04Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/c1f78d0f9b75d8ef0cbf568cbc8b101f4baa69c6",
    "details": {
      "sha": "3fd7993ff0802a3e70e9fa7595996e9dfb892e4c",
      "filename": "src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/c1f78d0f9b75d8ef0cbf568cbc8b101f4baa69c6/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/c1f78d0f9b75d8ef0cbf568cbc8b101f4baa69c6/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java?ref=c1f78d0f9b75d8ef0cbf568cbc8b101f4baa69c6",
      "patch": "@@ -163,6 +163,10 @@ public String getH2Version() {\n \n     // Deletes a backup file.\n     public boolean deleteBackupFile(String fileName) throws IOException {\n+        if (!isValidFileName(fileName)) {\n+            log.error(\"Invalid file name: {}\", fileName);\n+            return false;\n+        }\n         Path filePath = this.getBackupFilePath(fileName);\n         if (Files.deleteIfExists(filePath)) {\n             log.info(\"Deleted backup file: {}\", fileName);\n@@ -175,7 +179,11 @@ public boolean deleteBackupFile(String fileName) throws IOException {\n \n     // Gets the Path object for a given backup file name.\n     public Path getBackupFilePath(String fileName) {\n-        return Paths.get(backupPath.toString(), fileName);\n+        Path filePath = Paths.get(backupPath.toString(), fileName).normalize();\n+        if (!filePath.startsWith(backupPath)) {\n+            throw new SecurityException(\"Path traversal detected\");\n+        }\n+        return filePath;\n     }\n \n     private boolean executeDatabaseScript(Path scriptPath) {\n@@ -202,4 +210,19 @@ private void ensureBackupDirectoryExists() {\n             }\n         }\n     }\n+\n+    private boolean isValidFileName(String fileName) {\n+        // Check for invalid characters or sequences\n+        return fileName != null\n+                && !fileName.contains(\"..\")\n+                && !fileName.contains(\"/\")\n+                && !fileName.contains(\"\\\\\")\n+                && !fileName.contains(\":\")\n+                && !fileName.contains(\"*\")\n+                && !fileName.contains(\"?\")\n+                && !fileName.contains(\"\\\"\")\n+                && !fileName.contains(\"<\")\n+                && !fileName.contains(\">\")\n+                && !fileName.contains(\"|\");\n+    }\n }",
      "parent_sha": "b31d565c75df27901c4a0a103a6b1dfe9a3ee4e6"
    }
  },
  {
    "oid": "9ece6dacbde6d86fda12898bbefebdc66fc10361",
    "message": "removal",
    "date": "2023-09-02T19:32:44Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/9ece6dacbde6d86fda12898bbefebdc66fc10361",
    "details": {
      "sha": "02f40bd1a311d93c9dd8b4c24815d1b4daf771b0",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/CropController.java",
      "status": "modified",
      "additions": 77,
      "deletions": 39,
      "changes": 116,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/9ece6dacbde6d86fda12898bbefebdc66fc10361/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FCropController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/9ece6dacbde6d86fda12898bbefebdc66fc10361/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FCropController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FCropController.java?ref=9ece6dacbde6d86fda12898bbefebdc66fc10361",
      "patch": "@@ -4,6 +4,9 @@\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n \n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.common.PDRectangle;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.ResponseEntity;\n@@ -25,54 +28,89 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.tags.Tag;\n import stirling.software.SPDF.utils.WebResponseUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.PDPageContentStream;\n+import org.apache.pdfbox.pdmodel.font.PDFont;\n+import org.apache.pdfbox.pdmodel.font.PDType0Font;\n+import org.apache.pdfbox.pdmodel.font.PDType1Font;\n+import org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory;\n+import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n+import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;\n+import org.apache.pdfbox.util.Matrix;\n+import org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;\n+import org.apache.pdfbox.pdmodel.graphics.color.PDICCBased;\n+import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;\n+import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n+import org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup;\n+import org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties;\n+import stirling.software.SPDF.utils.WebResponseUtils;\n+import org.apache.pdfbox.pdmodel.PDPageContentStream;\n+import org.apache.pdfbox.multipdf.LayerUtility;\n \n @RestController\n @Tag(name = \"General\", description = \"General APIs\")\n public class CropController {\n \n-    private static final Logger logger = LoggerFactory.getLogger(CropController.class);\n-\n+\tprivate static final Logger logger = LoggerFactory.getLogger(CropController.class);\n \n \t@PostMapping(value = \"/crop\", consumes = \"multipart/form-data\")\n \t@Operation(summary = \"Crops a PDF document\", description = \"This operation takes an input PDF file and crops it according to the given coordinates. Input:PDF Output:PDF Type:SISO\")\n \tpublic ResponseEntity<byte[]> cropPdf(\n-\t        @Parameter(description = \"The input PDF file\", required = true) @RequestParam(\"fileInput\") MultipartFile file,\n-\t        @Parameter(description = \"The x-coordinate of the top-left corner of the crop area\", required = true, schema = @Schema(type = \"number\")) @RequestParam(\"x\") float x,\n-\t        @Parameter(description = \"The y-coordinate of the top-left corner of the crop area\", required = true, schema = @Schema(type = \"number\")) @RequestParam(\"y\") float y,\n-\t        @Parameter(description = \"The width of the crop area\", required = true, schema = @Schema(type = \"number\")) @RequestParam(\"width\") float width,\n-\t        @Parameter(description = \"The height of the crop area\", required = true, schema = @Schema(type = \"number\")) @RequestParam(\"height\") float height) throws IOException {\n-\t    byte[] bytes = file.getBytes();\n-\t    System.out.println(\"x=\" + x + \", \" + \"y=\" + y + \", \" + \"width=\" + width + \", \" +\"height=\" + height  );\n-\t    PdfReader reader = new PdfReader(new ByteArrayInputStream(bytes));\n-\t    PdfDocument pdfDoc = new PdfDocument(reader);\n-\t\n-\t    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\t    PdfWriter writer = new PdfWriter(baos);\n-\t    PdfDocument outputPdf = new PdfDocument(writer);\n-\t\n-\t    int totalPages = pdfDoc.getNumberOfPages();\n-\t\n-\t    for (int i = 1; i <= totalPages; i++) {\n-\t        PdfPage page = outputPdf.addNewPage(new PageSize(width, height));\n-\t        PdfCanvas pdfCanvas = new PdfCanvas(page);\n-\n-\t        PdfFormXObject formXObject = pdfDoc.getPage(i).copyAsFormXObject(outputPdf);\n-\n-\t        // Save the graphics state, apply the transformations, add the object, and then\n-\t        // restore the graphics state\n-\t        pdfCanvas.saveState();\n-\t        pdfCanvas.rectangle(x, y, width, height);\n-\t        pdfCanvas.clip();\n-\t        pdfCanvas.addXObject(formXObject, -x, -y);\n-\t        pdfCanvas.restoreState();\n-\t    }\n-\t\n-\n-\t    outputPdf.close();\n-\t\tbyte[] pdfContent = baos.toByteArray();\n-\t\tpdfDoc.close();\n-\t\treturn WebResponseUtils.bytesToWebResponse(pdfContent,\n-\t\t\t\tfile.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_cropped.pdf\");\n+\t\t\t@Parameter(description = \"The input PDF file\", required = true) @RequestParam(\"fileInput\") MultipartFile file,\n+\t\t\t@Parameter(description = \"The x-coordinate of the top-left corner of the crop area\", required = true, schema = @Schema(type = \"number\")) @RequestParam(\"x\") float x,\n+\t\t\t@Parameter(description = \"The y-coordinate of the top-left corner of the crop area\", required = true, schema = @Schema(type = \"number\")) @RequestParam(\"y\") float y,\n+\t\t\t@Parameter(description = \"The width of the crop area\", required = true, schema = @Schema(type = \"number\")) @RequestParam(\"width\") float width,\n+\t\t\t@Parameter(description = \"The height of the crop area\", required = true, schema = @Schema(type = \"number\")) @RequestParam(\"height\") float height)\n+\t\t\tthrows IOException {\n+\n+\n+\n+\n+PDDocument sourceDocument = PDDocument.load(new ByteArrayInputStream(file.getBytes()));\n+\n+PDDocument newDocument = new PDDocument();\n+\n+int totalPages = sourceDocument.getNumberOfPages();\n+\n+LayerUtility layerUtility = new LayerUtility(newDocument);\n+\n+for (int i = 0; i < totalPages; i++) {\n+    PDPage sourcePage = sourceDocument.getPage(i);\n+    \n+    // Create a new page with the size of the source page\n+    PDPage newPage = new PDPage(sourcePage.getMediaBox());\n+    newDocument.addPage(newPage);\n+    PDPageContentStream contentStream = new PDPageContentStream(newDocument, newPage);\n+\n+    // Import the source page as a form XObject\n+    PDFormXObject formXObject = layerUtility.importPageAsForm(sourceDocument, i);\n+\n+    contentStream.saveGraphicsState();\n+    \n+    // Define the crop area\n+    contentStream.addRect(x, y, width, height);\n+    contentStream.clip();\n+\n+    // Draw the entire formXObject\n+    contentStream.drawForm(formXObject);\n+\n+    contentStream.restoreGraphicsState();\n+\n+    contentStream.close();\n+    \n+    // Now, set the new page's media box to the cropped size\n+    newPage.setMediaBox(new PDRectangle(x, y, width, height));\n+}\n+\n+ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+newDocument.save(baos);\n+newDocument.close();\n+sourceDocument.close();\n+\n+byte[] pdfContent = baos.toByteArray();\n+return WebResponseUtils.bytesToWebResponse(pdfContent, file.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_cropped.pdf\");\n \t}\n \n }",
      "parent_sha": "ef07963d790e8671826712ec152d09efc170dcde"
    }
  },
  {
    "oid": "989c468db2b0789a34a965f3d45994f030d594e9",
    "message": "Change PDF load Get Info on PDF to readonly (#3254)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Fixed the behavior, that the metadata of a pdf was changed when using\nthe \"Get info on PDF\" function. Notably the Producer and\nModificationDate are updated currently, wich is not in line with the\ndescription \"Get Info\".\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\nCo-authored-by: maxi322 <maxi322@users.noreply.github.com>",
    "date": "2025-03-26T22:29:27Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/989c468db2b0789a34a965f3d45994f030d594e9",
    "details": {
      "sha": "3ce586491473ec88f5a047f05de6cf5718d2f8df",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/989c468db2b0789a34a965f3d45994f030d594e9/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/989c468db2b0789a34a965f3d45994f030d594e9/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java?ref=989c468db2b0789a34a965f3d45994f030d594e9",
      "patch": "@@ -126,7 +126,8 @@ public static boolean checkForStandard(PDDocument document, String standardKeywo\n     @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n     public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n         MultipartFile inputFile = request.getFileInput();\n-        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile); ) {\n+        boolean readonly = true;\n+        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly); ) {\n             ObjectMapper objectMapper = new ObjectMapper();\n             ObjectNode jsonOutput = objectMapper.createObjectNode();\n ",
      "parent_sha": "ccbde393f15e45a70f4a2cabd28ad7f1bc36d5c4"
    }
  },
  {
    "oid": "ee6fbdd61f16887ab84cbcfdf16d66a76c322d91",
    "message": "Enhance AppUpdateService: Add `@Configuration` Annotation for Improved Spring Boot Integration (#3036)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\nThe AppUpdateService class now includes the `@Configuration` annotation\nin addition to the existing `@Service` annotation.\n\nThis update ensures that the class is properly registered as a\nconfiguration class within the Spring application context, thereby\nimproving bean management and integration.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.",
    "date": "2025-02-23T20:02:46Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/ee6fbdd61f16887ab84cbcfdf16d66a76c322d91",
    "details": {
      "sha": "a8afc16e722c4a9912f519a1dc8a19143c09f40a",
      "filename": "src/main/java/stirling/software/SPDF/config/AppUpdateService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/ee6fbdd61f16887ab84cbcfdf16d66a76c322d91/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppUpdateService.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/ee6fbdd61f16887ab84cbcfdf16d66a76c322d91/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppUpdateService.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppUpdateService.java?ref=ee6fbdd61f16887ab84cbcfdf16d66a76c322d91",
      "patch": "@@ -2,13 +2,13 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Service;\n \n import stirling.software.SPDF.config.interfaces.ShowAdminInterface;\n import stirling.software.SPDF.model.ApplicationProperties;\n \n-@Service\n+@Configuration\n class AppUpdateService {\n \n     private final ApplicationProperties applicationProperties;",
      "parent_sha": "a5da7fc2c386dbd31b86948f63a57e35a8752117"
    }
  },
  {
    "oid": "cfaaeebd4a6b8ff72c93c77fd8c7e18ed2fbb79b",
    "message": "test",
    "date": "2023-08-26T22:33:35Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/cfaaeebd4a6b8ff72c93c77fd8c7e18ed2fbb79b",
    "details": {
      "sha": "9715128e0efc0443b9a5b28d85c501454e8e0dc3",
      "filename": "src/main/java/stirling/software/SPDF/config/AppConfig.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/cfaaeebd4a6b8ff72c93c77fd8c7e18ed2fbb79b/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/cfaaeebd4a6b8ff72c93c77fd8c7e18ed2fbb79b/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FAppConfig.java?ref=cfaaeebd4a6b8ff72c93c77fd8c7e18ed2fbb79b",
      "patch": "@@ -24,7 +24,8 @@ public boolean loginEnabled() {\n \r\n     @Bean(name = \"appName\")\r\n     public String appName() {\r\n-        return applicationProperties.getUi().getHomeName();\r\n+        String homeTitle =  applicationProperties.getUi().getHomeName();\r\n+        return (homeTitle != null) ? homeTitle : \"Stirling PDF\";\r\n     }\r\n \r\n     @Bean(name = \"appVersion\")\r\n@@ -42,7 +43,7 @@ public String homeText() {\n     @Bean(name = \"navBarText\")\r\n     public String navBarText() {\r\n         String defaultNavBar = applicationProperties.getUi().getNavbarName() != null ? applicationProperties.getUi().getNavbarName() : applicationProperties.getUi().getHomeName();\r\n-        return defaultNavBar;\r\n+        return (defaultNavBar != null) ? defaultNavBar : \"Stirling PDF\";\r\n     }\r\n \t\r\n \t@Bean(name = \"rateLimit\")\r",
      "parent_sha": "09a07791808e518749a0db836679cc9939c43238"
    }
  },
  {
    "oid": "873a4ecb7e8f6b9a33709c7945ab0c3043338b4a",
    "message": "revert",
    "date": "2024-01-10T00:39:26Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/873a4ecb7e8f6b9a33709c7945ab0c3043338b4a",
    "details": {
      "sha": "61b209de685dd54f46a7f1d7f753737d21715f19",
      "filename": "src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java",
      "status": "modified",
      "additions": 10,
      "deletions": 47,
      "changes": 57,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/873a4ecb7e8f6b9a33709c7945ab0c3043338b4a/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserAuthenticationFilter.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/873a4ecb7e8f6b9a33709c7945ab0c3043338b4a/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserAuthenticationFilter.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserAuthenticationFilter.java?ref=873a4ecb7e8f6b9a33709c7945ab0c3043338b4a",
      "patch": "@@ -1,12 +1,9 @@\n package stirling.software.SPDF.config.security;\n \n import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.core.Authentication;\n@@ -21,7 +18,6 @@\n import jakarta.servlet.ServletException;\n import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n-import jakarta.servlet.http.HttpServletResponseWrapper;\n import stirling.software.SPDF.model.ApiKeyAuthenticationToken;\n \n @Component\n@@ -35,28 +31,14 @@ public class UserAuthenticationFilter extends OncePerRequestFilter {\n     @Qualifier(\"loginEnabled\")\n     public boolean loginEnabledValue;\n \n-    @Value(\"${redirect.port:}\") // Default to empty if not set\n-    private String redirectPort;\n-\n     @Override\n     protected void doFilterInternal(\n             HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n             throws ServletException, IOException {\n \n-        // Custom response wrapper to modify the redirect location\n-        HttpServletResponseWrapper responseWrapper =\n-                new HttpServletResponseWrapper(response) {\n-                    @Override\n-                    public void sendRedirect(String location) throws IOException {\n-                        // Modify the location to include the correct port\n-                        String modifiedLocation = modifyLocation(location, request);\n-                        super.sendRedirect(modifiedLocation);\n-                    }\n-                };\n-\n         if (!loginEnabledValue) {\n             // If login is not enabled, just pass all requests without authentication\n-            filterChain.doFilter(request, responseWrapper);\n+            filterChain.doFilter(request, response);\n             return;\n         }\n         String requestURI = request.getRequestURI();\n@@ -71,8 +53,8 @@ public void sendRedirect(String location) throws IOException {\n                     // provider for API keys.\n                     UserDetails userDetails = userService.loadUserByApiKey(apiKey);\n                     if (userDetails == null) {\n-                        responseWrapper.setStatus(HttpStatus.UNAUTHORIZED.value());\n-                        responseWrapper.getWriter().write(\"Invalid API Key.\");\n+                        response.setStatus(HttpStatus.UNAUTHORIZED.value());\n+                        response.getWriter().write(\"Invalid API Key.\");\n                         return;\n                     }\n                     authentication =\n@@ -81,8 +63,8 @@ public void sendRedirect(String location) throws IOException {\n                     SecurityContextHolder.getContext().setAuthentication(authentication);\n                 } catch (AuthenticationException e) {\n                     // If API key authentication fails, deny the request\n-                    responseWrapper.setStatus(HttpStatus.UNAUTHORIZED.value());\n-                    responseWrapper.getWriter().write(\"Invalid API Key.\");\n+                    response.setStatus(HttpStatus.UNAUTHORIZED.value());\n+                    response.getWriter().write(\"Invalid API Key.\");\n                     return;\n                 }\n             }\n@@ -94,37 +76,18 @@ public void sendRedirect(String location) throws IOException {\n             String contextPath = request.getContextPath();\n \n             if (\"GET\".equalsIgnoreCase(method) && !(contextPath + \"/login\").equals(requestURI)) {\n-                responseWrapper.sendRedirect(contextPath + \"/login\"); // redirect to the login page\n+                response.sendRedirect(contextPath + \"/login\"); // redirect to the login page\n                 return;\n             } else {\n-                responseWrapper.setStatus(HttpStatus.UNAUTHORIZED.value());\n-                responseWrapper\n-                        .getWriter()\n+                response.setStatus(HttpStatus.UNAUTHORIZED.value());\n+                response.getWriter()\n                         .write(\n                                 \"Authentication required. Please provide a X-API-KEY in request header.\\nThis is found in Settings -> Account Settings -> API Key\\nAlternativly you can disable authentication if this is unexpected\");\n                 return;\n             }\n         }\n \n-        filterChain.doFilter(request, responseWrapper);\n-    }\n-\n-    private String modifyLocation(String location, HttpServletRequest request) {\n-        if (!location.matches(\"https?://[^/]+:\\\\d+.*\")\n-                && redirectPort != null\n-                && redirectPort.length() > 0) {\n-            try {\n-                int port = Integer.parseInt(redirectPort); // Parse the port\n-                URL url = new URL(location);\n-                String modifiedUrl =\n-                        new URL(url.getProtocol(), url.getHost(), port, url.getFile()).toString();\n-                return modifiedUrl;\n-            } catch (MalformedURLException | NumberFormatException e) {\n-                // Log error and return the original location if URL parsing fails\n-                e.printStackTrace();\n-            }\n-        }\n-        return location;\n+        filterChain.doFilter(request, response);\n     }\n \n     @Override\n@@ -152,4 +115,4 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce\n \n         return false;\n     }\n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "32da14acbf85dd2f1f33cd67f3707ec820ffc392"
    }
  },
  {
    "oid": "4e63a684b5bb10a075e75c20b082cc236ff9ab93",
    "message": "Exclude Internal API User from Total User Count (#3299)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**:  \nModified the `getTotalUsersCount()` method in `UserService` to subtract\none user from the count if the internal API user is present in the\ndatabase. This ensures that the internal service account does not skew\nuser metrics.\n\n- **Why the change was made**:  \nTo prevent the internal API user (used for backend operations) from\nbeing included in total user statistics, which should reflect only real\nuser accounts.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.",
    "date": "2025-04-09T10:03:12Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/4e63a684b5bb10a075e75c20b082cc236ff9ab93",
    "details": {
      "sha": "464676710246df12535100db134ada0e7263287c",
      "filename": "src/main/java/stirling/software/SPDF/config/security/UserService.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/4e63a684b5bb10a075e75c20b082cc236ff9ab93/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserService.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/4e63a684b5bb10a075e75c20b082cc236ff9ab93/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserService.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FUserService.java?ref=4e63a684b5bb10a075e75c20b082cc236ff9ab93",
      "patch": "@@ -475,6 +475,12 @@ public void syncCustomApiUser(String customApiKey) {\n \n     @Override\n     public long getTotalUsersCount() {\n-        return userRepository.count();\n+        // Count all users in the database\n+        long userCount = userRepository.count();\n+        // Exclude the internal API user from the count\n+        if (findByUsernameIgnoreCase(Role.INTERNAL_API_USER.getRoleId()).isPresent()) {\n+            userCount -= 1;\n+        }\n+        return userCount;\n     }\n }",
      "parent_sha": "b28cabe63b606e7d7a74a73b3b26779340a9bff5"
    }
  },
  {
    "oid": "8e0c02a1512c53395e6efbe7f39484315bc87432",
    "message": "Sandboxed URL creation to prevent SSRF attacks",
    "date": "2024-02-01T23:35:05Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/8e0c02a1512c53395e6efbe7f39484315bc87432",
    "details": {
      "sha": "1b0c315af433d5dcfdde6cb8004aa56393121bfc",
      "filename": "src/main/java/stirling/software/SPDF/utils/GeneralUtils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/8e0c02a1512c53395e6efbe7f39484315bc87432/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/8e0c02a1512c53395e6efbe7f39484315bc87432/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java?ref=8e0c02a1512c53395e6efbe7f39484315bc87432",
      "patch": "@@ -1,5 +1,7 @@\n package stirling.software.SPDF.utils;\n \n+import io.github.pixee.security.HostValidator;\n+import io.github.pixee.security.Urls;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n@@ -57,7 +59,7 @@ public static String convertToFileName(String name) {\n \n     public static boolean isValidURL(String urlStr) {\n         try {\n-            new URL(urlStr);\n+            Urls.create(urlStr, Urls.HTTP_PROTOCOLS, HostValidator.DENY_COMMON_INFRASTRUCTURE_TARGETS);\n             return true;\n         } catch (MalformedURLException e) {\n             return false;",
      "parent_sha": "271906097d0c8865d7728c546d75d6082045c036"
    }
  },
  {
    "oid": "3715c555d3e13e4c5904c35f2bcc0e507a107334",
    "message": "fix for #213",
    "date": "2023-05-26T14:25:18Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/3715c555d3e13e4c5904c35f2bcc0e507a107334",
    "details": {
      "sha": "bb172a7b68a68dc97c6c523422c76833d81af6dd",
      "filename": "src/main/java/stirling/software/SPDF/utils/PdfUtils.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/3715c555d3e13e4c5904c35f2bcc0e507a107334/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/3715c555d3e13e4c5904c35f2bcc0e507a107334/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java?ref=3715c555d3e13e4c5904c35f2bcc0e507a107334",
      "patch": "@@ -30,6 +30,7 @@\n import org.apache.pdfbox.pdmodel.PDPage;\r\n import org.apache.pdfbox.pdmodel.PDPageContentStream;\r\n import org.apache.pdfbox.pdmodel.common.PDRectangle;\r\n+import org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory;\r\n import org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory;\r\n import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\r\n import org.apache.pdfbox.rendering.ImageType;\r\n@@ -125,6 +126,7 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT\n     public static byte[] imageToPdf(MultipartFile[] files, boolean stretchToFit, boolean autoRotate, String colorType) throws IOException {\r\n         try (PDDocument doc = new PDDocument()) {\r\n             for (MultipartFile file : files) {\r\n+            \tString contentType = file.getContentType();\r\n                 String originalFilename = file.getOriginalFilename();\r\n                 if (originalFilename != null && (originalFilename.toLowerCase().endsWith(\".tiff\") || originalFilename.toLowerCase().endsWith(\".tif\")) ) {\r\n                     ImageReader reader = ImageIO.getImageReadersByFormatName(\"tiff\").next();\r\n@@ -146,7 +148,12 @@ public static byte[] imageToPdf(MultipartFile[] files, boolean stretchToFit, boo\n                         }\r\n                         BufferedImage image = ImageIO.read(imageFile);\r\n                         BufferedImage convertedImage = convertColorType(image, colorType);\r\n-                        PDImageXObject pdImage = LosslessFactory.createFromImage(doc, convertedImage);\r\n+                        PDImageXObject pdImage;\r\n+                        if (contentType != null && (contentType.equals(\"image/jpeg\"))) {\r\n+                            pdImage = JPEGFactory.createFromImage(doc, convertedImage);\r\n+                        } else {\r\n+                            pdImage = LosslessFactory.createFromImage(doc, convertedImage);\r\n+                        }\r\n                         addImageToDocument(doc, pdImage, stretchToFit, autoRotate);\r\n                     } catch (IOException e) {\r\n                         logger.error(\"Error writing image to file: {}\", imageFile.getAbsolutePath(), e);\r",
      "parent_sha": "5e4de6cc5f9a9e58c21ec77b1b38f3a56eeb7fd6"
    }
  },
  {
    "oid": "1d243a0ca5c62a7812531d981d92feaf819551f4",
    "message": "fix: clean up redundant variable",
    "date": "2023-12-28T03:43:30Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/1d243a0ca5c62a7812531d981d92feaf819551f4",
    "details": {
      "sha": "7ae91cf9c07562af615575e85ca6eaf6853789da",
      "filename": "src/main/java/stirling/software/SPDF/utils/PdfUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/1d243a0ca5c62a7812531d981d92feaf819551f4/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/1d243a0ca5c62a7812531d981d92feaf819551f4/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java?ref=1d243a0ca5c62a7812531d981d92feaf819551f4",
      "patch": "@@ -203,7 +203,6 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT\n         try (PDDocument document = PDDocument.load(new ByteArrayInputStream(inputStream))) {\r\n             PDFRenderer pdfRenderer = new PDFRenderer(document);\r\n             int pageCount = document.getNumberOfPages();\r\n-            List<BufferedImage> images = new ArrayList<>();\r\n \r\n             // Create a ByteArrayOutputStream to save the image(s) to\r\n             ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n@@ -232,7 +231,8 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT\n                     writer.dispose();\r\n                 } else {\r\n                     // Combine all images into a single big image\r\n-                    BufferedImage combined = new BufferedImage(images.get(0).getWidth(), images.get(0).getHeight() * pageCount, BufferedImage.TYPE_INT_RGB);\r\n+                    BufferedImage image = pdfRenderer.renderImageWithDPI(0, DPI, colorType);\r\n+                    BufferedImage combined = new BufferedImage(image.getWidth(), image.getHeight() * pageCount, BufferedImage.TYPE_INT_RGB);\r\n                     Graphics g = combined.getGraphics();\r\n \r\n                     for (int i = 0; i < pageCount; ++i) {\r",
      "parent_sha": "1f10693eafdd60c34443a44c22641773496e77ee"
    }
  },
  {
    "oid": "b7d37deb85aa80f8cc19755082da682c99c9600c",
    "message": "Refactored to use parameterized SQL APIs (#1545)\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>",
    "date": "2024-07-09T20:18:32Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/b7d37deb85aa80f8cc19755082da682c99c9600c",
    "details": {
      "sha": "0cf1e612ddbd9e2e8d73e89362648fd125a8e3b1",
      "filename": "src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/b7d37deb85aa80f8cc19755082da682c99c9600c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/b7d37deb85aa80f8cc19755082da682c99c9600c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java?ref=b7d37deb85aa80f8cc19755082da682c99c9600c",
      "patch": "@@ -8,6 +8,7 @@\n import java.nio.file.attribute.BasicFileAttributes;\n import java.sql.Connection;\n import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n@@ -131,11 +132,12 @@ public void exportDatabase() throws IOException {\n         DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(\"yyyyMMddHHmm\");\n         Path insertOutputFilePath =\n                 this.getBackupFilePath(\"backup_\" + dateNow.format(myFormatObj) + \".sql\");\n-        String query = \"SCRIPT SIMPLE COLUMNS DROP to '\" + insertOutputFilePath.toString() + \"';\";\n+        String query = \"SCRIPT SIMPLE COLUMNS DROP to ?;\";\n \n         try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n-                Statement stmt = conn.createStatement()) {\n-            stmt.execute(query);\n+                PreparedStatement stmt = conn.prepareStatement(query)) {\n+            stmt.setString(1, insertOutputFilePath.toString());\n+            stmt.execute();\n             log.info(\"Database export completed: {}\", insertOutputFilePath);\n         } catch (SQLException e) {\n             log.error(\"Error during database export: {}\", e.getMessage(), e);",
      "parent_sha": "2a65fd08257c3128d9518496d6578ae5ca626272"
    }
  },
  {
    "oid": "29dab5e47dbb6042efb14e29d968536d9460806e",
    "message": "numbers name",
    "date": "2023-07-24T23:01:20Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/29dab5e47dbb6042efb14e29d968536d9460806e",
    "details": {
      "sha": "9096e64e9d2fa3015ece7babe3fb449583018e72",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/other/PageNumbersController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/29dab5e47dbb6042efb14e29d968536d9460806e/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FPageNumbersController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/29dab5e47dbb6042efb14e29d968536d9460806e/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FPageNumbersController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fother%2FPageNumbersController.java?ref=29dab5e47dbb6042efb14e29d968536d9460806e",
      "patch": "@@ -165,10 +165,8 @@ public ResponseEntity<byte[]> addPageNumbers(\n         pdfDoc.close();\r\n         byte[] resultBytes = baos.toByteArray();\r\n \r\n-        return ResponseEntity.ok()\r\n-                .header(\"Content-Type\", \"application/pdf; charset=UTF-8\")\r\n-                .header(\"Content-Disposition\", \"inline; filename=\" + URLEncoder.encode(file.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_numbersAdded.pdf\", \"UTF-8\"))\r\n-                .body(resultBytes);\r\n+        return WebResponseUtils.bytesToWebResponse(resultBytes, URLEncoder.encode(file.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_numbersAdded.pdf\", \"UTF-8\"), MediaType.APPLICATION_PDF);\r\n+\r\n     }\r\n \r\n \r",
      "parent_sha": "9e655631b444da74cb7ba0c4b50244aafd735be7"
    }
  },
  {
    "oid": "1f10693eafdd60c34443a44c22641773496e77ee",
    "message": "fix: sequentially convert each pdf page into a BufferedImage to avoid getting MLE for large pdf files",
    "date": "2023-12-28T03:23:55Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/1f10693eafdd60c34443a44c22641773496e77ee",
    "details": {
      "sha": "000a8294c385efd1a510be0370726e66814eb2fe",
      "filename": "src/main/java/stirling/software/SPDF/utils/PdfUtils.java",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/1f10693eafdd60c34443a44c22641773496e77ee/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/1f10693eafdd60c34443a44c22641773496e77ee/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java?ref=1f10693eafdd60c34443a44c22641773496e77ee",
      "patch": "@@ -205,11 +205,6 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT\n             int pageCount = document.getNumberOfPages();\r\n             List<BufferedImage> images = new ArrayList<>();\r\n \r\n-            // Create images of all pages\r\n-            for (int i = 0; i < pageCount; i++) {\r\n-                images.add(pdfRenderer.renderImageWithDPI(i, DPI, colorType));\r\n-            }\r\n-\r\n             // Create a ByteArrayOutputStream to save the image(s) to\r\n             ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n \r\n@@ -226,8 +221,8 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT\n                         writer.setOutput(ios);\r\n                         writer.prepareWriteSequence(null);\r\n \r\n-                        for (int i = 0; i < images.size(); ++i) {\r\n-                            BufferedImage image = images.get(i);\r\n+                        for (int i = 0; i < pageCount; ++i) {\r\n+                            BufferedImage image = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\r\n                             writer.writeToSequence(new IIOImage(image, null, null), param);\r\n                         }\r\n \r\n@@ -240,8 +235,9 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT\n                     BufferedImage combined = new BufferedImage(images.get(0).getWidth(), images.get(0).getHeight() * pageCount, BufferedImage.TYPE_INT_RGB);\r\n                     Graphics g = combined.getGraphics();\r\n \r\n-                    for (int i = 0; i < images.size(); i++) {\r\n-                        g.drawImage(images.get(i), 0, i * images.get(0).getHeight(), null);\r\n+                    for (int i = 0; i < pageCount; ++i) {\r\n+                        BufferedImage image = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\r\n+                        g.drawImage(image, 0, i * image.getHeight(), null);\r\n                     }\r\n \r\n                     // Write the image to the output stream\r\n@@ -253,8 +249,8 @@ public static byte[] convertFromPdf(byte[] inputStream, String imageType, ImageT\n             } else {\r\n                 // Zip the images and return as byte array\r\n                 try (ZipOutputStream zos = new ZipOutputStream(baos)) {\r\n-                    for (int i = 0; i < images.size(); i++) {\r\n-                        BufferedImage image = images.get(i);\r\n+                    for (int i = 0; i < pageCount; ++i) {\r\n+                        BufferedImage image = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\r\n                         try (ByteArrayOutputStream baosImage = new ByteArrayOutputStream()) {\r\n                             ImageIO.write(image, imageType, baosImage);\r\n \r",
      "parent_sha": "4e991e7ec20f73925be9a59f792d05e6477822ef"
    }
  },
  {
    "oid": "c3f88f716c214a57492c0f3745f97814c4c38475",
    "message": "Update GeneralUtils.java",
    "date": "2024-12-11T20:10:18Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/c3f88f716c214a57492c0f3745f97814c4c38475",
    "details": {
      "sha": "ce09430c0955b4a211690366e141a68192031001",
      "filename": "src/main/java/stirling/software/SPDF/utils/GeneralUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/c3f88f716c214a57492c0f3745f97814c4c38475/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/c3f88f716c214a57492c0f3745f97814c4c38475/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java?ref=c3f88f716c214a57492c0f3745f97814c4c38475",
      "patch": "@@ -106,8 +106,8 @@ public static boolean isURLReachable(String urlStr) {\n             // Check if the URL is reachable\n             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n             connection.setRequestMethod(\"HEAD\");\n-            connection.setConnectTimeout(5000); // Set connection timeout\n-            connection.setReadTimeout(5000);    // Set read timeout\n+            // connection.setConnectTimeout(5000); // Set connection timeout\n+            // connection.setReadTimeout(5000);    // Set read timeout\n             int responseCode = connection.getResponseCode();\n             return (200 <= responseCode && responseCode <= 399);\n         } catch (Exception e) {",
      "parent_sha": "67f983f00d591d7c09a06963439574e762723593"
    }
  },
  {
    "oid": "d96a3db60a2ced90141d8fcac398589ce6e95323",
    "message": "fix: add pem support for cert sign",
    "date": "2024-01-03T23:21:59Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/d96a3db60a2ced90141d8fcac398589ce6e95323",
    "details": {
      "sha": "c4e5fe116daec5097a1938b400580d83a2d5ac19",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java",
      "status": "modified",
      "additions": 57,
      "deletions": 22,
      "changes": 79,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/d96a3db60a2ced90141d8fcac398589ce6e95323/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FCertSignController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/d96a3db60a2ced90141d8fcac398589ce6e95323/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FCertSignController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FCertSignController.java?ref=d96a3db60a2ced90141d8fcac398589ce6e95323",
      "patch": "@@ -1,21 +1,37 @@\n package stirling.software.SPDF.controller.api.security;\n \n+import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.io.OutputStream;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n import java.security.Security;\n import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n import java.util.Calendar;\n \n import org.apache.pdfbox.examples.signature.CreateSignatureBase;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature;\n+import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.openssl.PEMDecryptorProvider;\n+import org.bouncycastle.openssl.PEMEncryptedKeyPair;\n+import org.bouncycastle.openssl.PEMKeyPair;\n+import org.bouncycastle.openssl.PEMParser;\n+import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\n+import org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder;\n+import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\n+import org.bouncycastle.operator.InputDecryptorProvider;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;\n+import org.bouncycastle.pkcs.PKCSException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.ResponseEntity;\n@@ -76,36 +92,34 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n             throw new IllegalArgumentException(\"Cert type must be provided\");\n         }\n \n-        InputStream ksInputStream = null;\n+        KeyStore ks = null;\n \n         switch (certType) {\n             case \"PKCS12\":\n-                ksInputStream = p12File.getInputStream();\n+                ks = KeyStore.getInstance(\"PKCS12\");\n+                ks.load(p12File.getInputStream(), password.toCharArray());\n                 break;\n             case \"PEM\":\n-                throw new IllegalArgumentException(\"TODO: PEM not supported yet\");\n-                // ksInputStream = privateKeyFile.getInputStream();\n-                // break;\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(null);\n+                PrivateKey privateKey = getPrivateKeyFromPEM(privateKeyFile.getBytes(), password);\n+                Certificate cert = (Certificate) getCertificateFromPEM(certFile.getBytes());\n+                ks.setKeyEntry(\n+                        \"alias\", privateKey, password.toCharArray(), new Certificate[] {cert});\n+                break;\n             default:\n                 throw new IllegalArgumentException(\"Invalid cert type: \" + certType);\n         }\n \n         // TODO: page number\n \n-        KeyStore ks = getKeyStore(ksInputStream, password);\n         CreateSignature createSignature = new CreateSignature(ks, password.toCharArray());\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         sign(pdf.getBytes(), baos, createSignature, name, location, reason);\n         return WebResponseUtils.boasToWebResponse(\n                 baos, pdf.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_signed.pdf\");\n     }\n \n-    private static KeyStore getKeyStore(InputStream is, String password) throws Exception {\n-        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n-        ks.load(is, password.toCharArray());\n-        return ks;\n-    }\n-\n     private static void sign(\n             byte[] input,\n             OutputStream output,\n@@ -129,14 +143,35 @@ private static void sign(\n         }\n     }\n \n-    // private byte[] parsePEM(byte[] content) throws IOException {\n-    //     PemReader pemReader =\n-    //             new PemReader(new InputStreamReader(new ByteArrayInputStream(content)));\n-    //     return pemReader.readPemObject().getContent();\n-    // }\n+    private PrivateKey getPrivateKeyFromPEM(byte[] pemBytes, String password)\n+            throws IOException, OperatorCreationException, PKCSException {\n+        try (PEMParser pemParser =\n+                new PEMParser(new InputStreamReader(new ByteArrayInputStream(pemBytes)))) {\n+            Object pemObject = pemParser.readObject();\n+            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\"BC\");\n+            PrivateKeyInfo pkInfo;\n+            if (pemObject instanceof PKCS8EncryptedPrivateKeyInfo) {\n+                InputDecryptorProvider decProv =\n+                        new JceOpenSSLPKCS8DecryptorProviderBuilder().build(password.toCharArray());\n+                pkInfo = ((PKCS8EncryptedPrivateKeyInfo) pemObject).decryptPrivateKeyInfo(decProv);\n+            } else if (pemObject instanceof PEMEncryptedKeyPair) {\n+                PEMDecryptorProvider decProv =\n+                        new JcePEMDecryptorProviderBuilder().build(password.toCharArray());\n+                pkInfo =\n+                        ((PEMEncryptedKeyPair) pemObject)\n+                                .decryptKeyPair(decProv)\n+                                .getPrivateKeyInfo();\n+            } else {\n+                pkInfo = ((PEMKeyPair) pemObject).getPrivateKeyInfo();\n+            }\n+            return converter.getPrivateKey(pkInfo);\n+        }\n+    }\n \n-    // private boolean isPEM(byte[] content) {\n-    //     String contentStr = new String(content);\n-    //     return contentStr.contains(\"-----BEGIN\") && contentStr.contains(\"-----END\");\n-    // }\n+    private Certificate getCertificateFromPEM(byte[] pemBytes)\n+            throws IOException, CertificateException {\n+        try (ByteArrayInputStream bis = new ByteArrayInputStream(pemBytes)) {\n+            return CertificateFactory.getInstance(\"X.509\").generateCertificate(bis);\n+        }\n+    }\n }",
      "parent_sha": "4b0df4ffd5248efa365377dedba2e087ace65514"
    }
  },
  {
    "oid": "fb18d0d04db51e5c255532872aa68f0f7aaead74",
    "message": "WIP: Fixes issue - needs refactor",
    "date": "2023-12-25T20:36:08Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/fb18d0d04db51e5c255532872aa68f0f7aaead74",
    "details": {
      "sha": "cc890ee94c03bc47e8550884499c9c4c831bc7c3",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/MergeController.java",
      "status": "modified",
      "additions": 78,
      "deletions": 69,
      "changes": 147,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/fb18d0d04db51e5c255532872aa68f0f7aaead74/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FMergeController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/fb18d0d04db51e5c255532872aa68f0f7aaead74/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FMergeController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FMergeController.java?ref=fb18d0d04db51e5c255532872aa68f0f7aaead74",
      "patch": "@@ -1,7 +1,6 @@\n package stirling.software.SPDF.controller.api;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n+import java.io.*;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.nio.file.attribute.BasicFileAttributes;\n@@ -10,10 +9,15 @@\n import java.util.Comparator;\n import java.util.List;\n \n+import org.apache.pdfbox.io.MemoryUsageSetting;\n+import org.apache.pdfbox.multipdf.PDFMergerUtility;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n@@ -34,82 +38,87 @@ public class MergeController {\n     private static final Logger logger = LoggerFactory.getLogger(MergeController.class);\n \n \n-private PDDocument mergeDocuments(List<PDDocument> documents) throws IOException {\n-\tPDDocument mergedDoc = new PDDocument();\n-    for (PDDocument doc : documents) {\n-        for (PDPage page : doc.getPages()) {\n-            mergedDoc.addPage(page);\n+    private PDDocument mergeDocuments(List<PDDocument> documents) throws IOException {\n+        PDDocument mergedDoc = new PDDocument();\n+        for (PDDocument doc : documents) {\n+            for (PDPage page : doc.getPages()) {\n+                mergedDoc.addPage(page);\n+            }\n         }\n+        return mergedDoc;\n     }\n-    return mergedDoc;\n-}\n \n-private Comparator<MultipartFile> getSortComparator(String sortType) {\n-    switch (sortType) {\n-        case \"byFileName\":\n-            return Comparator.comparing(MultipartFile::getOriginalFilename);\n-        case \"byDateModified\":\n-            return (file1, file2) -> {\n-                try {\n-                    BasicFileAttributes attr1 = Files.readAttributes(Paths.get(file1.getOriginalFilename()), BasicFileAttributes.class);\n-                    BasicFileAttributes attr2 = Files.readAttributes(Paths.get(file2.getOriginalFilename()), BasicFileAttributes.class);\n-                    return attr1.lastModifiedTime().compareTo(attr2.lastModifiedTime());\n-                } catch (IOException e) {\n-                    return 0;  // If there's an error, treat them as equal\n-                }\n-            };\n-        case \"byDateCreated\":\n-            return (file1, file2) -> {\n-                try {\n-                    BasicFileAttributes attr1 = Files.readAttributes(Paths.get(file1.getOriginalFilename()), BasicFileAttributes.class);\n-                    BasicFileAttributes attr2 = Files.readAttributes(Paths.get(file2.getOriginalFilename()), BasicFileAttributes.class);\n-                    return attr1.creationTime().compareTo(attr2.creationTime());\n-                } catch (IOException e) {\n-                    return 0;  // If there's an error, treat them as equal\n-                }\n-            };\n-        case \"byPDFTitle\":\n-            return (file1, file2) -> {\n-                try (PDDocument doc1 = PDDocument.load(file1.getInputStream());\n-                     PDDocument doc2 = PDDocument.load(file2.getInputStream())) {\n-                    String title1 = doc1.getDocumentInformation().getTitle();\n-                    String title2 = doc2.getDocumentInformation().getTitle();\n-                    return title1.compareTo(title2);\n-                } catch (IOException e) {\n-                    return 0;\n-                }\n-            };\n-        case \"orderProvided\":\n-        default:\n-            return (file1, file2) -> 0;  // Default is the order provided\n+    private Comparator<MultipartFile> getSortComparator(String sortType) {\n+        switch (sortType) {\n+            case \"byFileName\":\n+                return Comparator.comparing(MultipartFile::getOriginalFilename);\n+            case \"byDateModified\":\n+                return (file1, file2) -> {\n+                    try {\n+                        BasicFileAttributes attr1 = Files.readAttributes(Paths.get(file1.getOriginalFilename()), BasicFileAttributes.class);\n+                        BasicFileAttributes attr2 = Files.readAttributes(Paths.get(file2.getOriginalFilename()), BasicFileAttributes.class);\n+                        return attr1.lastModifiedTime().compareTo(attr2.lastModifiedTime());\n+                    } catch (IOException e) {\n+                        return 0;  // If there's an error, treat them as equal\n+                    }\n+                };\n+            case \"byDateCreated\":\n+                return (file1, file2) -> {\n+                    try {\n+                        BasicFileAttributes attr1 = Files.readAttributes(Paths.get(file1.getOriginalFilename()), BasicFileAttributes.class);\n+                        BasicFileAttributes attr2 = Files.readAttributes(Paths.get(file2.getOriginalFilename()), BasicFileAttributes.class);\n+                        return attr1.creationTime().compareTo(attr2.creationTime());\n+                    } catch (IOException e) {\n+                        return 0;  // If there's an error, treat them as equal\n+                    }\n+                };\n+            case \"byPDFTitle\":\n+                return (file1, file2) -> {\n+                    try (PDDocument doc1 = PDDocument.load(file1.getInputStream());\n+                         PDDocument doc2 = PDDocument.load(file2.getInputStream())) {\n+                        String title1 = doc1.getDocumentInformation().getTitle();\n+                        String title2 = doc2.getDocumentInformation().getTitle();\n+                        return title1.compareTo(title2);\n+                    } catch (IOException e) {\n+                        return 0;\n+                    }\n+                };\n+            case \"orderProvided\":\n+            default:\n+                return (file1, file2) -> 0;  // Default is the order provided\n+        }\n     }\n-}\n \n-@PostMapping(consumes = \"multipart/form-data\", value = \"/merge-pdfs\")\n-@Operation(summary = \"Merge multiple PDF files into one\",\n-        description = \"This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO\")\n-public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest form) throws IOException {\n+    @PostMapping(consumes = \"multipart/form-data\", value = \"/merge-pdfs\")\n+    @Operation(summary = \"Merge multiple PDF files into one\",\n+            description = \"This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO\")\n+    public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest form) throws IOException {\n \n-\tMultipartFile[]  files = form.getFileInput();\n-    Arrays.sort(files, getSortComparator(form.getSortType()));\n+        try {\n+            MultipartFile[] files = form.getFileInput();\n+            Arrays.sort(files, getSortComparator(form.getSortType()));\n \n-    List<PDDocument> documents = new ArrayList<>();\n-    for (MultipartFile file : files) {\n-        try (InputStream is = file.getInputStream()) {\n-            documents.add(PDDocument.load(is));\n-        }\n-    }\n+            PDFMergerUtility mergedDoc = new PDFMergerUtility();\n+            ByteArrayOutputStream docOutputstream = new ByteArrayOutputStream();\n \n-    try (PDDocument mergedDoc = mergeDocuments(documents)) {\n-        ResponseEntity<byte[]> response = WebResponseUtils.pdfDocToWebResponse(mergedDoc, files[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_merged.pdf\");\n-        return response;\n-    } finally {\n-        for (PDDocument doc : documents) {\n-            if (doc != null) {\n-                doc.close();\n+            for (MultipartFile file : files) {\n+                mergedDoc.addSource(new ByteArrayInputStream(file.getBytes()));\n             }\n+\n+            mergedDoc.setDestinationFileName(files[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\"));\n+            mergedDoc.setDestinationStream(docOutputstream);\n+            mergedDoc.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_PDF);\n+\n+            // Here you have to set the actual filename of your pdf\n+            headers.setContentDispositionFormData(mergedDoc.getDestinationFileName(), mergedDoc.getDestinationFileName());\n+            headers.setCacheControl(\"must-revalidate, post-check=0, pre-check=0\");\n+            return new ResponseEntity<>(docOutputstream.toByteArray(), headers, HttpStatus.OK);\n+        } catch (Exception ex) {\n+            logger.error(\"Error in merge pdf process\", ex);\n+           throw ex;\n         }\n     }\n }\n-\n-}\n\\ No newline at end of file",
      "parent_sha": "9652f59ae95ffc830a6e49c0260178aea983e584"
    }
  },
  {
    "oid": "0f367c23aa43e671786c0cfee44cd89459aa5428",
    "message": "359 split metadata lost (#1049)\n\n* Closes #359\n\n* Adds a minor fix, the modified date should be changed after a modification is made.",
    "date": "2024-04-08T20:53:00Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/0f367c23aa43e671786c0cfee44cd89459aa5428",
    "details": {
      "sha": "24f51c6a56f41d43ad89520c98f52b7e4f3a9973",
      "filename": "src/main/java/stirling/software/SPDF/utils/PdfUtils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/0f367c23aa43e671786c0cfee44cd89459aa5428/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/0f367c23aa43e671786c0cfee44cd89459aa5428/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java?ref=0f367c23aa43e671786c0cfee44cd89459aa5428",
      "patch": "@@ -6,6 +6,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Calendar;\n import java.util.List;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n@@ -434,16 +435,14 @@ public static PdfMetadata extractMetadataFromPdf(PDDocument pdf) {\n                 .build();\n     }\n \n-    public static PDDocument setMetadataToPdf(PDDocument pdf, PdfMetadata pdfMetadata) {\n+    public static void setMetadataToPdf(PDDocument pdf, PdfMetadata pdfMetadata) {\n         pdf.getDocumentInformation().setAuthor(pdfMetadata.getAuthor());\n         pdf.getDocumentInformation().setProducer(pdfMetadata.getProducer());\n         pdf.getDocumentInformation().setTitle(pdfMetadata.getTitle());\n         pdf.getDocumentInformation().setCreator(pdfMetadata.getCreator());\n         pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n         pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n         pdf.getDocumentInformation().setCreationDate(pdfMetadata.getCreationDate());\n-        pdf.getDocumentInformation().setModificationDate(pdfMetadata.getModificationDate());\n-\n-        return pdf;\n+        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n     }\n }",
      "parent_sha": "7dd16795887eaee84d86ac2ef4de29b59cd9cc6c"
    }
  },
  {
    "oid": "fa0152aa2db61d00cd5be70b4fe3cec3b8bb8e04",
    "message": "Fix ConcurrentModificationException by modifying resources outside the iteration. (#1719)\n\nFix ConcurrentModificationException by collecting XObject names\r\n\r\n- Changed  to use a list to collect XObject names before removal.\r\n- Avoids ConcurrentModificationException by modifying resources outside the iteration.\r\n\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>",
    "date": "2024-08-19T18:42:55Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/fa0152aa2db61d00cd5be70b4fe3cec3b8bb8e04",
    "details": {
      "sha": "029d0924c32f71090880c89bd388f73e0ece1af2",
      "filename": "src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/fa0152aa2db61d00cd5be70b4fe3cec3b8bb8e04/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FPdfImageRemovalService.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/fa0152aa2db61d00cd5be70b4fe3cec3b8bb8e04/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FPdfImageRemovalService.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fservice%2FPdfImageRemovalService.java?ref=fa0152aa2db61d00cd5be70b4fe3cec3b8bb8e04",
      "patch": "@@ -1,6 +1,8 @@\n package stirling.software.SPDF.service;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.pdmodel.PDDocument;\n@@ -16,7 +18,7 @@ public class PdfImageRemovalService {\n     /**\n      * Removes all image objects from the provided PDF document.\n      *\n-     * This method iterates over each page in the document and removes any image XObjects found\n+     * <p>This method iterates over each page in the document and removes any image XObjects found\n      * in the page's resources.\n      *\n      * @param document The PDF document from which images will be removed.\n@@ -27,14 +29,22 @@ public PDDocument removeImagesFromPdf(PDDocument document) throws IOException {\n         // Iterate over each page in the PDF document\n         for (PDPage page : document.getPages()) {\n             PDResources resources = page.getResources();\n+            // Collect the XObject names to remove\n+            List<COSName> namesToRemove = new ArrayList<>();\n+\n             // Iterate over all XObject names in the page's resources\n             for (COSName name : resources.getXObjectNames()) {\n                 // Check if the XObject is an image\n                 if (resources.isImageXObject(name)) {\n-                    // Remove the image XObject by setting it to null\n-                    resources.put(name, (PDXObject) null);\n+                    // Collect the name for removal\n+                    namesToRemove.add(name);\n                 }\n             }\n+\n+            // Now, modify the resources by removing the collected names\n+            for (COSName name : namesToRemove) {\n+                resources.put(name, (PDXObject) null);\n+            }\n         }\n         return document;\n     }",
      "parent_sha": "e1d0f2cd3e68d41bd88500069d14452fb9c299f9"
    }
  },
  {
    "oid": "67f983f00d591d7c09a06963439574e762723593",
    "message": "Security fix: Server-Side Request Forgery\n\nhttps://github.com/Stirling-Tools/Stirling-PDF/security/advisories/GHSA-4v4c-9hpr-93vx",
    "date": "2024-12-11T20:06:07Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/67f983f00d591d7c09a06963439574e762723593",
    "details": {
      "sha": "4824db367481be591a8fdddb862d7e79a72e11d6",
      "filename": "src/main/java/stirling/software/SPDF/utils/GeneralUtils.java",
      "status": "modified",
      "additions": 34,
      "deletions": 4,
      "changes": 38,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/67f983f00d591d7c09a06963439574e762723593/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/67f983f00d591d7c09a06963439574e762723593/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java?ref=67f983f00d591d7c09a06963439574e762723593",
      "patch": "@@ -88,15 +88,45 @@ public static boolean isValidURL(String urlStr) {\n \n     public static boolean isURLReachable(String urlStr) {\n         try {\n+            // Parse the URL\n             URL url = URI.create(urlStr).toURL();\n+\n+            // Allow only http and https protocols\n+            String protocol = url.getProtocol();\n+            if (!protocol.equals(\"http\") && !protocol.equals(\"https\")) {\n+                return false; // Disallow other protocols\n+            }\n+\n+            // Check if the host is a local address\n+            String host = url.getHost();\n+            if (isLocalAddress(host)) {\n+                return false; // Exclude local addresses\n+            }\n+\n+            // Check if the URL is reachable\n             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n             connection.setRequestMethod(\"HEAD\");\n+            connection.setConnectTimeout(5000); // Set connection timeout\n+            connection.setReadTimeout(5000);    // Set read timeout\n             int responseCode = connection.getResponseCode();\n             return (200 <= responseCode && responseCode <= 399);\n-        } catch (MalformedURLException e) {\n-            return false;\n-        } catch (IOException e) {\n-            return false;\n+        } catch (Exception e) {\n+            return false; // Return false in case of any exception\n+        }\n+    }\n+\n+    private static boolean isLocalAddress(String host) {\n+        try {\n+            // Resolve DNS to IP address\n+            InetAddress address = InetAddress.getByName(host);\n+\n+            // Check for local addresses\n+            return address.isAnyLocalAddress() ||  // Matches 0.0.0.0 or similar\n+                   address.isLoopbackAddress() || // Matches 127.0.0.1 or ::1\n+                   address.isSiteLocalAddress() || // Matches private IPv4 ranges: 192.168.x.x, 10.x.x.x, 172.16.x.x to 172.31.x.x\n+                   address.getHostAddress().startsWith(\"fe80:\"); // Matches link-local IPv6 addresses\n+        } catch (Exception e) {\n+            return false; // Return false for invalid or unresolved addresses\n         }\n     }\n ",
      "parent_sha": "93e190fdeb16a8c60f557d0e33028679098ac612"
    }
  },
  {
    "oid": "3f50979d3e6f7d01585bcdb8207260140c50c7c3",
    "message": "fix: use JPEGFactory for jpeg",
    "date": "2023-12-24T17:52:55Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/3f50979d3e6f7d01585bcdb8207260140c50c7c3",
    "details": {
      "sha": "e4e577b8eeb79b719106fbd58f7181a818ac6b94",
      "filename": "src/main/java/stirling/software/SPDF/utils/PdfUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/3f50979d3e6f7d01585bcdb8207260140c50c7c3/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/3f50979d3e6f7d01585bcdb8207260140c50c7c3/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FPdfUtils.java?ref=3f50979d3e6f7d01585bcdb8207260140c50c7c3",
      "patch": "@@ -266,7 +266,10 @@ public static byte[] imageToPdf(MultipartFile[] files, String fitOption, boolean\n                 } else {\r\n                     BufferedImage image = ImageIO.read(file.getInputStream());\r\n                     BufferedImage convertedImage = ImageProcessingUtils.convertColorType(image, colorType);\r\n-                    PDImageXObject pdImage = LosslessFactory.createFromImage(doc, convertedImage);\r\n+                    // Use JPEGFactory if it's JPEG since JPEG is lossy\r\n+                    PDImageXObject pdImage = (contentType != null && contentType.equals(\"image/jpeg\"))\r\n+                                           ? JPEGFactory.createFromImage(doc, convertedImage)\r\n+                                           : LosslessFactory.createFromImage(doc, convertedImage);\r\n                     addImageToDocument(doc, pdImage, fitOption, autoRotate);\r\n                 }\r\n             }\r",
      "parent_sha": "1efefcfcb8d1be88abe8a8837d3cf3d360617b3f"
    }
  },
  {
    "oid": "805848e627c1e9be3b31dc3f6e198d2b99bba8df",
    "message": "Fix one test in Class ProcessExecutorTest",
    "date": "2024-06-07T07:38:05Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/805848e627c1e9be3b31dc3f6e198d2b99bba8df",
    "details": {
      "sha": "cab78313a2939887a9475c4c6818ca8eca49b6cc",
      "filename": "src/test/java/stirling/software/SPDF/utils/ProcessExecutorTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/805848e627c1e9be3b31dc3f6e198d2b99bba8df/src%2Ftest%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutorTest.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/805848e627c1e9be3b31dc3f6e198d2b99bba8df/src%2Ftest%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutorTest.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Ftest%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FProcessExecutorTest.java?ref=805848e627c1e9be3b31dc3f6e198d2b99bba8df",
      "patch": "@@ -45,7 +45,11 @@ public void testRunCommandWithOutputHandling_Error() {\n             processExecutor.runCommandWithOutputHandling(command);\n         });\n \n-        // Check the exception message to ensure it is about the nonexistent command\n-        assertTrue(thrown.getMessage().contains(\"CreateProcess error=2, The system cannot find the file specified\"));\n+        // Log the actual error message\n+        System.out.println(\"Caught IOException: \" + thrown.getMessage());\n+\n+        // Check the exception message to ensure it indicates the command was not found\n+        String errorMessage = thrown.getMessage();\n+        assertTrue(errorMessage.contains(\"error=2\") || errorMessage.contains(\"No such file or directory\"), \"Unexpected error message: \" + errorMessage);\n     }\n }",
      "parent_sha": "5277cf2b59263f309b3e5de7283fe19d53a842d8"
    }
  },
  {
    "oid": "e5990dba81a4d5e043c467f88d68943293226bea",
    "message": "Update Beans.java",
    "date": "2023-06-12T16:31:42Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/e5990dba81a4d5e043c467f88d68943293226bea",
    "details": {
      "sha": "7a963ba43a2f3eccd2b1825332c153e155f19fbb",
      "filename": "src/main/java/stirling/software/SPDF/config/Beans.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/e5990dba81a4d5e043c467f88d68943293226bea/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FBeans.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/e5990dba81a4d5e043c467f88d68943293226bea/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FBeans.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FBeans.java?ref=e5990dba81a4d5e043c467f88d68943293226bea",
      "patch": "@@ -39,10 +39,17 @@ public LocaleResolver localeResolver() {\n             Locale tempLocale = Locale.forLanguageTag(appLocaleEnv);\n             String tempLanguageTag = tempLocale.toLanguageTag();\n \n-            if (appLocaleEnv.equalsIgnoreCase(tempLanguageTag)) {\n+             if (appLocaleEnv.equalsIgnoreCase(tempLanguageTag)) {\n                 defaultLocale = tempLocale;\n             } else {\n-                System.err.println(\"Invalid APP_LOCALE environment variable value. Falling back to default Locale.UK.\");\n+                tempLocale = Locale.forLanguageTag(appLocaleEnv.replace(\"_\",\"-\"));\n+                tempLanguageTag = tempLocale.toLanguageTag();\n+\n+                if (appLocaleEnv.equalsIgnoreCase(tempLanguageTag)) {\n+                    defaultLocale = tempLocale;\n+                } else {\n+                    System.err.println(\"Invalid APP_LOCALE environment variable value. Falling back to default Locale.UK.\");\n+                }\n             }\n         }\n ",
      "parent_sha": "c9b0d01250df07de0495c0ca3c1e8bac1126fe8d"
    }
  },
  {
    "oid": "54c3bee205b5745a59c6571ce0090f54e899b47c",
    "message": "Replaced `Stream.collect(Collectors.toList())` with `Stream.toList()` (Sonar) (#1018)\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>",
    "date": "2024-04-03T21:41:24Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/54c3bee205b5745a59c6571ce0090f54e899b47c",
    "details": {
      "sha": "dc17dc9cd042d5736d3d94de70982660b135480e",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/54c3bee205b5745a59c6571ce0090f54e899b47c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImageScansController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/54c3bee205b5745a59c6571ce0090f54e899b47c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImageScansController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fmisc%2FExtractImageScansController.java?ref=54c3bee205b5745a59c6571ce0090f54e899b47c",
      "patch": "@@ -144,7 +144,7 @@ public ResponseEntity<byte[]> extractImageScans(\n \n                 // Read the output photos in temp directory\n                 List<Path> tempOutputFiles =\n-                        Files.list(tempDir).sorted().collect(Collectors.toList());\n+                        Files.list(tempDir).sorted().toList();\n                 for (Path tempOutputFile : tempOutputFiles) {\n                     byte[] imageBytes = Files.readAllBytes(tempOutputFile);\n                     processedImageBytes.add(imageBytes);",
      "parent_sha": "a63c0a3625856effe4dd648ab56df5f0535985e0"
    }
  },
  {
    "oid": "5e1aac0b84da4f7a834d79a2800c5eb7ed024bfe",
    "message": "Read login data from application.properties (#2263)\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>",
    "date": "2024-11-17T14:08:41Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/5e1aac0b84da4f7a834d79a2800c5eb7ed024bfe",
    "details": {
      "sha": "85cef66f474ba7107e9098c9a4110cfb53e13a2d",
      "filename": "src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/5e1aac0b84da4f7a834d79a2800c5eb7ed024bfe/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/5e1aac0b84da4f7a834d79a2800c5eb7ed024bfe/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2Fdatabase%2FDatabaseBackupHelper.java?ref=5e1aac0b84da4f7a834d79a2800c5eb7ed024bfe",
      "patch": "@@ -34,6 +34,12 @@ public class DatabaseBackupHelper implements DatabaseBackupInterface {\n     @Value(\"${spring.datasource.url}\")\n     private String url;\n \n+    @Value(\"${spring.datasource.username}\")\n+    private String databaseUsername;\n+\n+    @Value(\"${spring.datasource.password}\")\n+    private String databasePassword;\n+\n     private Path backupPath = Paths.get(\"configs/db/backup/\");\n \n     @Override\n@@ -134,7 +140,8 @@ public void exportDatabase() throws IOException {\n                 this.getBackupFilePath(\"backup_\" + dateNow.format(myFormatObj) + \".sql\");\n         String query = \"SCRIPT SIMPLE COLUMNS DROP to ?;\";\n \n-        try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n+        try (Connection conn =\n+                        DriverManager.getConnection(url, databaseUsername, databasePassword);\n                 PreparedStatement stmt = conn.prepareStatement(query)) {\n             stmt.setString(1, insertOutputFilePath.toString());\n             stmt.execute();\n@@ -147,7 +154,8 @@ public void exportDatabase() throws IOException {\n     // Retrieves the H2 database version.\n     public String getH2Version() {\n         String version = \"Unknown\";\n-        try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\")) {\n+        try (Connection conn =\n+                DriverManager.getConnection(url, databaseUsername, databasePassword)) {\n             try (Statement stmt = conn.createStatement();\n                     ResultSet rs = stmt.executeQuery(\"SELECT H2VERSION() AS version\")) {\n                 if (rs.next()) {\n@@ -189,7 +197,8 @@ public Path getBackupFilePath(String fileName) {\n     private boolean executeDatabaseScript(Path scriptPath) {\n         String query = \"RUNSCRIPT from ?;\";\n \n-        try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n+        try (Connection conn =\n+                        DriverManager.getConnection(url, databaseUsername, databasePassword);\n                 PreparedStatement stmt = conn.prepareStatement(query)) {\n             stmt.setString(1, scriptPath.toString());\n             stmt.execute();",
      "parent_sha": "60bf6492605106fa7334437d1c39cc8e5cbb338d"
    }
  },
  {
    "oid": "1e2eb9b07a05a6a7a93cada4d74a61963fa4edf0",
    "message": "additional fix to #364",
    "date": "2023-09-24T20:21:01Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/1e2eb9b07a05a6a7a93cada4d74a61963fa4edf0",
    "details": {
      "sha": "b0e5f2aa7c378149ee57bc571a8289f7c3b73128",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/1e2eb9b07a05a6a7a93cada4d74a61963fa4edf0/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FCertSignController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/1e2eb9b07a05a6a7a93cada4d74a61963fa4edf0/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FCertSignController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FCertSignController.java?ref=1e2eb9b07a05a6a7a93cada4d74a61963fa4edf0",
      "patch": "@@ -12,6 +12,7 @@\n import java.security.cert.X509Certificate;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n import java.util.Collections;\n import java.util.Date;\n \n@@ -130,7 +131,8 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n \t\tsignature.setName(name);\n \t\tsignature.setLocation(location);\n \t\tsignature.setReason(reason);\n-\n+\t\tsignature.setSignDate(Calendar.getInstance());\n+\t\t\n \t\t// Load the PDF\n \t\ttry (PDDocument document = PDDocument.load(pdf.getBytes())) {\n \t\t\tlogger.info(\"Successfully loaded the provided PDF\");",
      "parent_sha": "ece00956d9ff03fe579374a25390d8273c1d5f73"
    }
  },
  {
    "oid": "9795c682204a8df81ab3b4c894ee0a3d17c1d7f8",
    "message": "revert",
    "date": "2024-01-01T19:30:43Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/9795c682204a8df81ab3b4c894ee0a3d17c1d7f8",
    "details": {
      "sha": "bc4e2cce547f2fa37264d527b7bdb955d02359d6",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/9795c682204a8df81ab3b4c894ee0a3d17c1d7f8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPdfBySectionsController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/9795c682204a8df81ab3b4c894ee0a3d17c1d7f8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPdfBySectionsController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FSplitPdfBySectionsController.java?ref=9795c682204a8df81ab3b4c894ee0a3d17c1d7f8",
      "patch": "@@ -118,8 +118,12 @@ public List<PDDocument> splitPdfPages(\n                             new PDPageContentStream(subDoc, subPage)) {\n                         // Set clipping area and position\n                         float translateX = -subPageWidth * i;\n-                        float translateY = -subPageHeight * (verticalDivisions - 1 - j);\n-\n+                        float translateY = height - subPageHeight * (verticalDivisions - j);\n+                        \n+                        \n+                        //Code for google Docs pdfs..\n+                        //float translateY = -subPageHeight * (verticalDivisions - 1 - j);\n+                        \n                         contentStream.saveGraphicsState();\n                         contentStream.addRect(0, 0, subPageWidth, subPageHeight);\n                         contentStream.clip();",
      "parent_sha": "7ffa447cbc7dfbb91b588fd0e39fef116735f4cb"
    }
  },
  {
    "oid": "dcf13e9ade0ca5216958942306ad7410539563e8",
    "message": "Update InitialSecuritySetup.java",
    "date": "2024-05-12T18:17:46Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/dcf13e9ade0ca5216958942306ad7410539563e8",
    "details": {
      "sha": "529dd4dfeaff4fe223076d0953437963cedfc4e0",
      "filename": "src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/dcf13e9ade0ca5216958942306ad7410539563e8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FInitialSecuritySetup.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/dcf13e9ade0ca5216958942306ad7410539563e8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FInitialSecuritySetup.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2Fsecurity%2FInitialSecuritySetup.java?ref=dcf13e9ade0ca5216958942306ad7410539563e8",
      "patch": "@@ -33,21 +33,21 @@ public void init() {\n                     applicationProperties.getSecurity().getInitialLogin().getUsername();\n             String initialPassword =\n                     applicationProperties.getSecurity().getInitialLogin().getPassword();\n-            try {\n-                // https://github.com/Stirling-Tools/Stirling-PDF/issues/976\n-                userService.isUsernameValidWithReturn(initialUsername);\n-            } catch (IllegalArgumentException e) {\n-                Path pathToFile = Paths.get(\"configs/settings.yml\");\n+            if (initialUsername != null && initialPassword != null) {\n                 try {\n-                    if (Files.exists(pathToFile)) {\n-                        Files.delete(pathToFile);\n+                    // https://github.com/Stirling-Tools/Stirling-PDF/issues/976\n+                    userService.isUsernameValidWithReturn(initialUsername);\n+                } catch (IllegalArgumentException e) {\n+                    Path pathToFile = Paths.get(\"configs/settings.yml\");\n+                    try {\n+                        if (Files.exists(pathToFile)) {\n+                            Files.delete(pathToFile);\n+                        }\n+                    } catch (IOException ex) {\n+                        logger.info(ex.getMessage());\n                     }\n-                } catch (IOException ex) {\n-                    logger.info(ex.getMessage());\n+                    throw e;\n                 }\n-                throw e;\n-            }\n-            if (initialUsername != null && initialPassword != null) {\n                 userService.saveUser(initialUsername, initialPassword, Role.ADMIN.getRoleId());\n             } else {\n                 initialUsername = \"admin\";",
      "parent_sha": "811c19e00d150d732c279faefa6ad2b0b5f47171"
    }
  },
  {
    "oid": "a531f53893c59291aef394a2ccb4d452574561cb",
    "message": "Exclude Sensitive and Error-Prone Fields from toString() in SAML2 Configuration",
    "date": "2024-12-18T12:40:24Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/a531f53893c59291aef394a2ccb4d452574561cb",
    "details": {
      "sha": "fd7c278bf6058f3955b7916930643295abfc40b4",
      "filename": "src/main/java/stirling/software/SPDF/model/ApplicationProperties.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/a531f53893c59291aef394a2ccb4d452574561cb/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FApplicationProperties.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/a531f53893c59291aef394a2ccb4d452574561cb/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FApplicationProperties.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fmodel%2FApplicationProperties.java?ref=a531f53893c59291aef394a2ccb4d452574561cb",
      "patch": "@@ -122,18 +122,19 @@ public static class InitialLogin {\n \n         @Getter\n         @Setter\n+        @ToString\n         public static class SAML2 {\n             private Boolean enabled = false;\n             private Boolean autoCreateUser = false;\n             private Boolean blockRegistration = false;\n             private String registrationId = \"stirling\";\n-            private String idpMetadataUri;\n+            @ToString.Exclude private String idpMetadataUri;\n             private String idpSingleLogoutUrl;\n             private String idpSingleLoginUrl;\n             private String idpIssuer;\n             private String idpCert;\n-            private String privateKey;\n-            private String spCert;\n+            @ToString.Exclude private String privateKey;\n+            @ToString.Exclude private String spCert;\n \n             public InputStream getIdpMetadataUri() throws IOException {\n                 if (idpMetadataUri.startsWith(\"classpath:\")) {",
      "parent_sha": "74d6d96f4ed8d573d95909c20478f1df18a0ee2e"
    }
  },
  {
    "oid": "5564f378e542a0ec379c28d44514b3b07402373c",
    "message": "(Sonar) Fix \"`String#replace` should be preferred to `String#replaceAll`\" (#1056)\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>",
    "date": "2024-04-09T05:52:52Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/5564f378e542a0ec379c28d44514b3b07402373c",
    "details": {
      "sha": "1d7f7b01fb2c4d6481456bb752f4f1b6e323b16b",
      "filename": "src/main/java/stirling/software/SPDF/utils/GeneralUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/5564f378e542a0ec379c28d44514b3b07402373c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/5564f378e542a0ec379c28d44514b3b07402373c/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Futils%2FGeneralUtils.java?ref=5564f378e542a0ec379c28d44514b3b07402373c",
      "patch": "@@ -185,7 +185,7 @@ private static String insertMultiplicationBeforeN(String expression, int nValue)\n         // Insert multiplication between a number and 'n' (e.g., \"4n\" becomes \"4*n\")\n         String withMultiplication = expression.replaceAll(\"(\\\\d)n\", \"$1*n\");\n         // Now replace 'n' with its current value\n-        return withMultiplication.replaceAll(\"n\", String.valueOf(nValue));\n+        return withMultiplication.replace(\"n\", String.valueOf(nValue));\n     }\n \n     private static List<Integer> handlePart(String part, int totalPages, int offset) {",
      "parent_sha": "66d5f3e4b5d529eec673cfb256f52d875bb7c38c"
    }
  },
  {
    "oid": "f8f137a30a728341d9cd362778318844dc265ca8",
    "message": "Feature: Show permissions as a separate tab (#2396)\n\nShow permissions as a separate tab\n\n- Move permissions code into a separate for better readability and maintainability.\n- Separate `Permissions` node from `Encryption` so that it would be displayed in the frontend as a separate tab.\n- Use more user friendly permission labels such as replacing `canModify` with `Modifying` and values such as `Allowed` and `Not Allowed` instead of `true`, `false`.\n- Show permissions regardless of the encryption state.",
    "date": "2024-12-05T17:00:23Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/f8f137a30a728341d9cd362778318844dc265ca8",
    "details": {
      "sha": "96745c4a514c4e89db17abcefa718b4bcee558d5",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java",
      "status": "modified",
      "additions": 20,
      "deletions": 16,
      "changes": 36,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/f8f137a30a728341d9cd362778318844dc265ca8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/f8f137a30a728341d9cd362778318844dc265ca8/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2Fsecurity%2FGetInfoOnPDF.java?ref=f8f137a30a728341d9cd362778318844dc265ca8",
      "patch": "@@ -322,27 +322,14 @@ public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws\n                 PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                 encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                 encryption.put(\"KeyLength\", pdfEncryption.getLength());\n-                AccessPermission ap = pdfBoxDoc.getCurrentAccessPermission();\n-                if (ap != null) {\n-                    ObjectNode permissionsNode = objectMapper.createObjectNode();\n-\n-                    permissionsNode.put(\"CanAssembleDocument\", ap.canAssembleDocument());\n-                    permissionsNode.put(\"CanExtractContent\", ap.canExtractContent());\n-                    permissionsNode.put(\n-                            \"CanExtractForAccessibility\", ap.canExtractForAccessibility());\n-                    permissionsNode.put(\"CanFillInForm\", ap.canFillInForm());\n-                    permissionsNode.put(\"CanModify\", ap.canModify());\n-                    permissionsNode.put(\"CanModifyAnnotations\", ap.canModifyAnnotations());\n-                    permissionsNode.put(\"CanPrint\", ap.canPrint());\n-\n-                    encryption.set(\n-                            \"Permissions\", permissionsNode); // set the node under \"Permissions\"\n-                }\n                 // Add other encryption-related properties as needed\n             } else {\n                 encryption.put(\"IsEncrypted\", false);\n             }\n \n+            ObjectNode permissionsNode = objectMapper.createObjectNode();\n+            setNodePermissions(pdfBoxDoc, permissionsNode);\n+\n             ObjectNode pageInfoParent = objectMapper.createObjectNode();\n             for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                 ObjectNode pageInfo = objectMapper.createObjectNode();\n@@ -584,6 +571,7 @@ public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws\n             jsonOutput.set(\"DocumentInfo\", docInfoNode);\n             jsonOutput.set(\"Compliancy\", compliancy);\n             jsonOutput.set(\"Encryption\", encryption);\n+            jsonOutput.set(\"Permissions\", permissionsNode); // set the node under \"Permissions\"\n             jsonOutput.set(\"Other\", other);\n             jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n \n@@ -602,6 +590,22 @@ public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws\n         return null;\n     }\n \n+    private void setNodePermissions(PDDocument pdfBoxDoc, ObjectNode permissionsNode) {\n+        AccessPermission ap = pdfBoxDoc.getCurrentAccessPermission();\n+\n+        permissionsNode.put(\"Document Assembly\", getPermissionState(ap.canAssembleDocument()));\n+        permissionsNode.put(\"Extracting Content\", getPermissionState(ap.canExtractContent()));\n+        permissionsNode.put(\"Extracting for accessibility\", getPermissionState(ap.canExtractForAccessibility()));\n+        permissionsNode.put(\"Form Filling\", getPermissionState(ap.canFillInForm()));\n+        permissionsNode.put(\"Modifying\", getPermissionState(ap.canModify()));\n+        permissionsNode.put(\"Modifying annotations\", getPermissionState(ap.canModifyAnnotations()));\n+        permissionsNode.put(\"Printing\", getPermissionState(ap.canPrint()));\n+    }\n+\n+    private String getPermissionState(boolean state) {\n+        return state ? \"Allowed\" : \"Not Allowed\";\n+    }\n+\n     private static void addOutlinesToArray(PDOutlineItem outline, ArrayNode arrayNode) {\n         if (outline == null) return;\n ",
      "parent_sha": "f6a2d4784b20202ae173f6121e6f5c55e61fafb5"
    }
  },
  {
    "oid": "fa746a2b518b55310d4b62b95b06b8df3cdf7551",
    "message": "config stuff",
    "date": "2024-05-19T10:54:45Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/fa746a2b518b55310d4b62b95b06b8df3cdf7551",
    "details": {
      "sha": "e82e8f3fba7d3ff0c87311e9dbb778085ef8bcce",
      "filename": "src/main/java/stirling/software/SPDF/config/ConfigInitializer.java",
      "status": "modified",
      "additions": 58,
      "deletions": 122,
      "changes": 180,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/fa746a2b518b55310d4b62b95b06b8df3cdf7551/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/fa746a2b518b55310d4b62b95b06b8df3cdf7551/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fconfig%2FConfigInitializer.java?ref=fa746a2b518b55310d4b62b95b06b8df3cdf7551",
      "patch": "@@ -61,142 +61,78 @@ public void ensureConfigExists() throws IOException, URISyntaxException {\n             List<String> userLines =\n                     Files.exists(userPath) ? Files.readAllLines(userPath) : new ArrayList<>();\n \n-            Map<String, String> templateEntries = extractEntries(templateLines);\n-            Map<String, String> userEntries = extractEntries(userLines);\n-\n-            List<String> mergedLines = mergeConfigs(templateLines, templateEntries, userEntries);\n-            mergedLines = cleanInvalidYamlEntries(mergedLines);\n-            Files.write(userPath, mergedLines);\n+            List<String> resultLines = new ArrayList<>();\n+\n+            for (String templateLine : templateLines) {\n+                // Check if the line is a comment\n+                if (templateLine.trim().startsWith(\"#\")) {\n+                    String entry = templateLine.trim().substring(1).trim();\n+                    if (!entry.isEmpty()) {\n+                        // Check if this comment has been uncommented in userLines\n+                        String key = entry.split(\":\")[0].trim();\n+                        System.out.println(\"key=\" + key + \", entry=\" + entry );\n+                        addLine(resultLines, userLines, templateLine, key);\n+                    } else {\n+                        resultLines.add(templateLine);\n+                    }\n+                }\n+                // Check if the line is a key-value pair\n+                else if (templateLine.contains(\":\")) {\n+                    String key = templateLine.split(\":\")[0].trim();\n+                    addLine(resultLines, userLines, templateLine, key);\n+                }\n+                // Handle empty lines\n+                else if (templateLine.trim().length() == 0) {\n+                    resultLines.add(\"\");\n+                }\n+            }\n+            \n+         // Write the result to the user settings file\n+            Files.write(userPath, resultLines);\n         }\n \n         Path customSettingsPath = Paths.get(\"configs\", \"custom_settings.yml\");\n         if (!Files.exists(customSettingsPath)) {\n             Files.createFile(customSettingsPath);\n         }\n     }\n-\n-    private static Map<String, String> extractEntries(List<String> lines) {\n-        Map<String, String> entries = new HashMap<>();\n-        StringBuilder currentEntry = new StringBuilder();\n-        String currentKey = null;\n-        int blockIndent = -1;\n-\n-        for (String line : lines) {\n-            if (line.trim().isEmpty()) {\n-                if (currentKey != null) {\n-                    currentEntry.append(line).append(\"\\n\");\n+    \n+    \n+    \n+    //TODO check parent value instead of just indent lines for duplicate keys (like enabled etc)\n+    private static void addLine(List<String> resultLines, List<String> userLines, String templateLine, String key) {\n+        boolean added = false;\n+        int templateIndentationLevel = getIndentationLevel(templateLine);\n+        for (String settingsLine : userLines) {\n+        \tif(settingsLine.contains(\"oauth2\") || settingsLine.contains(\"enabled\") )\n+            if (settingsLine.trim().startsWith(key + \":\")) {\n+                int settingsIndentationLevel = getIndentationLevel(settingsLine);\n+                // Check if it is correct settingsLine and has the same parent as templateLine\n+                if (settingsIndentationLevel == templateIndentationLevel) {\n+                    resultLines.add(settingsLine);\n+                    added = true;\n+                    break;\n                 }\n-                continue;\n-            }\n-\n-            int indentLevel = getIndentationLevel(line);\n-            if (line.trim().startsWith(\"#\")) {\n-                if (indentLevel <= blockIndent || blockIndent == -1) {\n-                    if (currentKey != null) {\n-                        entries.put(currentKey, currentEntry.toString().trim());\n-                        currentEntry = new StringBuilder();\n-                    }\n-                    currentKey = line.trim().replaceAll(\"#\", \"\").split(\":\")[0].trim();\n-                    blockIndent = indentLevel;\n-                }\n-                currentEntry.append(line).append(\"\\n\");\n-            } else if (indentLevel == 0 || indentLevel <= blockIndent) {\n-                if (currentKey != null) {\n-                    entries.put(currentKey, currentEntry.toString().trim());\n-                    currentEntry = new StringBuilder();\n-                }\n-                currentKey = line.split(\":\")[0].trim();\n-                blockIndent = indentLevel;\n-                currentEntry.append(line).append(\"\\n\");\n-            } else {\n-                currentEntry.append(line).append(\"\\n\");\n             }\n         }\n-\n-        if (currentKey != null) {\n-            entries.put(currentKey, currentEntry.toString().trim());\n+        if (!added) {\n+            resultLines.add(templateLine);\n         }\n+    } \n \n-        return entries;\n-    }\n-\n-    private static List<String> mergeConfigs(\n-            List<String> templateLines,\n-            Map<String, String> templateEntries,\n-            Map<String, String> userEntries) {\n-        List<String> mergedLines = new ArrayList<>();\n-        Set<String> handledKeys = new HashSet<>();\n-\n-        String currentBlockKey = null;\n-        int blockIndent = -1;\n-\n-        for (String line : templateLines) {\n-            if (line.trim().isEmpty()) {\n-                mergedLines.add(line);\n-                continue;\n-            }\n-\n-            int indentLevel = getIndentationLevel(line);\n-            if (indentLevel == 0 || (indentLevel <= blockIndent && !line.trim().startsWith(\"#\"))) {\n-                currentBlockKey = line.split(\":\")[0].trim();\n-                blockIndent = indentLevel;\n-            }\n-\n-            if (userEntries.containsKey(currentBlockKey)\n-                    && !handledKeys.contains(currentBlockKey)) {\n-                mergedLines.add(userEntries.get(currentBlockKey));\n-                handledKeys.add(currentBlockKey);\n-            } else if (!handledKeys.contains(currentBlockKey)) {\n-                mergedLines.add(line);\n-            }\n+    private static int getIndentationLevel(String line) {\n+        int indentationLevel = 0;\n+        String trimmedLine = line.trim();\n+        if (trimmedLine.startsWith(\"#\")) {\n+        \tline = trimmedLine.substring(1);\n         }\n-\n-        return mergedLines;\n-    }\n-\n-    private static List<String> cleanInvalidYamlEntries(List<String> lines) {\n-        List<String> cleanedLines = new ArrayList<>();\n-        for (int i = 0; i < lines.size(); i++) {\n-            String line = lines.get(i);\n-            String trimmedLine = line.trim();\n-\n-            if (trimmedLine.startsWith(\"#\")\n-                    || !trimmedLine.endsWith(\":\")\n-                    || trimmedLine.contains(\" \")) {\n-                cleanedLines.add(line);\n-                continue;\n-            }\n-\n-            if (isKeyWithoutChildrenOrValue(i, lines)) {\n-                continue;\n+        for (char c : line.toCharArray()) {\n+            if (c == ' ') {\n+                indentationLevel++;\n+            } else {\n+                break;\n             }\n-\n-            cleanedLines.add(line);\n-        }\n-        return cleanedLines;\n-    }\n-\n-    private static boolean isKeyWithoutChildrenOrValue(int currentIndex, List<String> lines) {\n-        if (currentIndex + 1 < lines.size()) {\n-            String currentLine = lines.get(currentIndex);\n-            String nextLine = lines.get(currentIndex + 1);\n-            int currentIndentation = getIndentationLevel(currentLine);\n-            int nextIndentation = getIndentationLevel(nextLine);\n-\n-            // If the next line is less or equally indented, it's not a child or value\n-            return nextIndentation <= currentIndentation;\n-        }\n-\n-        // If it's the last line, then it definitely has no children or value\n-        return true;\n-    }\n-\n-    private static int getIndentationLevel(String line) {\n-        int count = 0;\n-        for (char ch : line.toCharArray()) {\n-            if (ch == ' ') count++;\n-            else break;\n         }\n-        return count;\n+        return indentationLevel;\n     }\n }",
      "parent_sha": "e30665e7c80f92ee50ce4c0165382005600d523c"
    }
  },
  {
    "oid": "d039c8e62e9493af71fa2bc7cb33b2f4658626de",
    "message": "Use tabs instead of spaces",
    "date": "2023-09-05T18:06:18Z",
    "url": "https://github.com/Stirling-Tools/Stirling-PDF/commit/d039c8e62e9493af71fa2bc7cb33b2f4658626de",
    "details": {
      "sha": "78df1f41d2d48bebc8c3f13677b778d5c1bb3fc3",
      "filename": "src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/Stirling-Tools/Stirling-PDF/blob/d039c8e62e9493af71fa2bc7cb33b2f4658626de/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FRearrangePagesPDFController.java",
      "raw_url": "https://github.com/Stirling-Tools/Stirling-PDF/raw/d039c8e62e9493af71fa2bc7cb33b2f4658626de/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FRearrangePagesPDFController.java",
      "contents_url": "https://api.github.com/repos/Stirling-Tools/Stirling-PDF/contents/src%2Fmain%2Fjava%2Fstirling%2Fsoftware%2FSPDF%2Fcontroller%2Fapi%2FRearrangePagesPDFController.java?ref=d039c8e62e9493af71fa2bc7cb33b2f4658626de",
      "patch": "@@ -114,16 +114,16 @@ private List<Integer> bookletSort(int totalPages) {\n \t\treturn newPageOrder;\n \t}\n \n-    private List<Integer> sideStitchBooklet(int totalPages) {\n-        List<Integer> newPageOrder = new ArrayList<>();\n-        for (int i = 0; i < (totalPages + 3) / 4; i++) {\n-            int begin = i * 4;\n-            newPageOrder.add(Math.min(begin + 3, totalPages - 1));\n-            newPageOrder.add(Math.min(begin, totalPages - 1));\n-            newPageOrder.add(Math.min(begin + 1, totalPages - 1));\n-            newPageOrder.add(Math.min(begin + 2, totalPages - 1));\n-        }\n-        return newPageOrder;\n+\tprivate List<Integer> sideStitchBooklet(int totalPages) {\n+\t\tList<Integer> newPageOrder = new ArrayList<>();\n+\t\tfor (int i = 0; i < (totalPages + 3) / 4; i++) {\n+\t\t\tint begin = i * 4;\n+\t\t\tnewPageOrder.add(Math.min(begin + 3, totalPages - 1));\n+\t\t\tnewPageOrder.add(Math.min(begin, totalPages - 1));\n+\t\t\tnewPageOrder.add(Math.min(begin + 1, totalPages - 1));\n+\t\t\tnewPageOrder.add(Math.min(begin + 2, totalPages - 1));\n+\t\t}\n+\t\treturn newPageOrder;\n     }\n \n \tprivate List<Integer> oddEvenSplit(int totalPages) {\n@@ -147,8 +147,8 @@ private List<Integer> processCustomMode(String customMode, int totalPages) {\n \t\t\t\treturn duplexSort(totalPages);\n \t\t\tcase BOOKLET_SORT:\n \t\t\t\treturn bookletSort(totalPages);\n-            case SIDE_STITCH_BOOKLET_SORT:\n-                return sideStitchBooklet(totalPages);\n+\t\t\tcase SIDE_STITCH_BOOKLET_SORT:\n+\t\t\t\treturn sideStitchBooklet(totalPages);\n \t\t\tcase ODD_EVEN_SPLIT:\n \t\t\t\treturn oddEvenSplit(totalPages);\n \t\t\tcase REMOVE_FIRST:",
      "parent_sha": "da7f0561cba7526dc060570fd673bdbeacf60b6f"
    }
  }
]