[
  {
    "oid": "d6bc3f0bc6dab555853722614d8638b400df884b",
    "message": "Fix build\n\nAssert using epoch time",
    "date": "2016-03-04T16:43:15Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/d6bc3f0bc6dab555853722614d8638b400df884b",
    "details": {
      "sha": "74d1bd0fd8f5d877a754a2713214977ebad6fee8",
      "filename": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/d6bc3f0bc6dab555853722614d8638b400df884b/spring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Finfo%2FProjectInfoAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/d6bc3f0bc6dab555853722614d8638b400df884b/spring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Finfo%2FProjectInfoAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Finfo%2FProjectInfoAutoConfigurationTests.java?ref=d6bc3f0bc6dab555853722614d8638b400df884b",
      "patch": "@@ -59,7 +59,7 @@ public void gitLocationTakesPrecedenceOverLegacyKey() {\n \t\tGitInfo gitInfo = this.context.getBean(GitInfo.class);\n \t\tassertThat(gitInfo.getBranch()).isNull();\n \t\tassertThat(gitInfo.getCommit().getId()).isEqualTo(\"f95038e\");\n-\t\tassertThat(gitInfo.getCommit().getTime()).isEqualTo(\"2016-03-03T10:02:00+0100\");\n+\t\tassertThat(gitInfo.getCommit().getTime().getTime()).isEqualTo(1456995720000L);\n \t}\n \n \t@Test\n@@ -68,7 +68,7 @@ public void gitLegacyKeyIsUsedAsFallback() {\n \t\tGitInfo gitInfo = this.context.getBean(GitInfo.class);\n \t\tassertThat(gitInfo.getBranch()).isEqualTo(\"master\");\n \t\tassertThat(gitInfo.getCommit().getId()).isEqualTo(\"5009933\");\n-\t\tassertThat(gitInfo.getCommit().getTime()).isEqualTo(\"2016-03-04T16:04:10+0100\");\n+\t\tassertThat(gitInfo.getCommit().getTime().getTime()).isEqualTo(1457103850000L);\n \t}\n \n \t@Test",
      "parent_sha": "76edaa7e1e22a8da8e25a2afa890a3967a0fd229"
    }
  },
  {
    "oid": "19b5431ba4ab74f8368848c92077172a37492191",
    "message": "Polish \"Remove redundant ResourceLoaders from GraphQL auto-configuration\"\n\nSee gh-29976",
    "date": "2022-02-28T11:16:04Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/19b5431ba4ab74f8368848c92077172a37492191",
    "details": {
      "sha": "e781b0717540c2fb9e522d0b8cf6dbd456cafaf3",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/graphql/reactive/GraphQlWebFluxAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/19b5431ba4ab74f8368848c92077172a37492191/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fgraphql%2Freactive%2FGraphQlWebFluxAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/19b5431ba4ab74f8368848c92077172a37492191/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fgraphql%2Freactive%2FGraphQlWebFluxAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fgraphql%2Freactive%2FGraphQlWebFluxAutoConfiguration.java?ref=19b5431ba4ab74f8368848c92077172a37492191",
      "patch": "@@ -38,7 +38,6 @@\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.ResourceLoader;\n import org.springframework.core.log.LogMessage;\n import org.springframework.graphql.GraphQlService;\n import org.springframework.graphql.execution.GraphQlSource;\n@@ -102,8 +101,7 @@ public WebGraphQlHandler webGraphQlHandler(GraphQlService service,\n \t}\n \n \t@Bean\n-\tpublic RouterFunction<ServerResponse> graphQlEndpoint(GraphQlHttpHandler httpHandler,\n-\t\t\tGraphQlSource graphQlSource,\n+\tpublic RouterFunction<ServerResponse> graphQlEndpoint(GraphQlHttpHandler httpHandler, GraphQlSource graphQlSource,\n \t\t\tGraphQlProperties properties) {\n \t\tString path = properties.getPath();\n \t\tlogger.info(LogMessage.format(\"GraphQL endpoint HTTP POST %s\", path));",
      "parent_sha": "5a52b36ec70c66d8b6b0b57b6a66a8092a38091e"
    }
  },
  {
    "oid": "6ebc9b887e52cb4635477adf59fc0995bc645506",
    "message": "Use ArchiveOperations instead of Project's zipTree\n\nCloses gh-41999",
    "date": "2024-08-28T13:23:04Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/6ebc9b887e52cb4635477adf59fc0995bc645506",
    "details": {
      "sha": "8eeb291bc70321e12b53f8313c550942fb201861",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/mavenplugin/PrepareMavenBinaries.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/6ebc9b887e52cb4635477adf59fc0995bc645506/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fmavenplugin%2FPrepareMavenBinaries.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/6ebc9b887e52cb4635477adf59fc0995bc645506/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fmavenplugin%2FPrepareMavenBinaries.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fmavenplugin%2FPrepareMavenBinaries.java?ref=6ebc9b887e52cb4635477adf59fc0995bc645506",
      "patch": "@@ -21,6 +21,7 @@\n import org.gradle.api.DefaultTask;\n import org.gradle.api.Task;\n import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.ArchiveOperations;\n import org.gradle.api.file.DirectoryProperty;\n import org.gradle.api.file.FileSystemOperations;\n import org.gradle.api.provider.SetProperty;\n@@ -37,9 +38,12 @@ public abstract class PrepareMavenBinaries extends DefaultTask {\n \n \tprivate final FileSystemOperations fileSystemOperations;\n \n+\tprivate final ArchiveOperations archiveOperations;\n+\n \t@Inject\n-\tpublic PrepareMavenBinaries(FileSystemOperations fileSystemOperations) {\n+\tpublic PrepareMavenBinaries(FileSystemOperations fileSystemOperations, ArchiveOperations archiveOperations) {\n \t\tthis.fileSystemOperations = fileSystemOperations;\n+\t\tthis.archiveOperations = archiveOperations;\n \t}\n \n \t@OutputDirectory\n@@ -53,10 +57,9 @@ public void prepareBinaries() {\n \t\tthis.fileSystemOperations.sync((sync) -> {\n \t\t\tsync.into(getOutputDir());\n \t\t\tfor (String version : getVersions().get()) {\n-\t\t\t\tConfiguration configuration = getProject().getConfigurations()\n-\t\t\t\t\t.detachedConfiguration(getProject().getDependencies()\n-\t\t\t\t\t\t.create(\"org.apache.maven:apache-maven:\" + version + \":bin@zip\"));\n-\t\t\t\tsync.from(getProject().zipTree(configuration.getSingleFile()));\n+\t\t\t\tConfiguration configuration = getProject().getConfigurations().detachedConfiguration(\n+\t\t\t\t\t\tgetProject().getDependencies().create(\"org.apache.maven:apache-maven:\" + version + \":bin@zip\"));\n+\t\t\t\tsync.from(this.archiveOperations.zipTree(configuration.getSingleFile()));\n \t\t\t}\n \t\t});\n ",
      "parent_sha": "ea0142f849f8cf4da24211c8c0717915d5d1349d"
    }
  },
  {
    "oid": "17631486f29d6eced09e058d1884a69b713c53a4",
    "message": "Defer WebApplicationContext initialization\n\nUpdate SpringBootServletInitializer so that the WebApplicationContext is\nnot initialized until ServletContextListener.contextInitialized() is\ncalled. This makes it easier to subclass SpringBootServletInitializer\nto add additional listeners to be called in a specific order.\n\nFixes gh-2070",
    "date": "2014-12-09T02:21:24Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/17631486f29d6eced09e058d1884a69b713c53a4",
    "details": {
      "sha": "b27f8afad4d69bca792cdc0710ddcbbb896ebf3d",
      "filename": "spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java",
      "status": "modified",
      "additions": 34,
      "deletions": 14,
      "changes": 48,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/17631486f29d6eced09e058d1884a69b713c53a4/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fweb%2FSpringBootServletInitializer.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/17631486f29d6eced09e058d1884a69b713c53a4/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fweb%2FSpringBootServletInitializer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fweb%2FSpringBootServletInitializer.java?ref=17631486f29d6eced09e058d1884a69b713c53a4",
      "patch": "@@ -20,6 +20,7 @@\n import javax.servlet.Servlet;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n import javax.servlet.ServletException;\n \n import org.apache.commons.logging.Log;\n@@ -62,20 +63,7 @@ public abstract class SpringBootServletInitializer implements WebApplicationInit\n \n \t@Override\n \tpublic void onStartup(ServletContext servletContext) throws ServletException {\n-\t\tWebApplicationContext rootAppContext = createRootApplicationContext(servletContext);\n-\t\tif (rootAppContext != null) {\n-\t\t\tservletContext.addListener(new ContextLoaderListener(rootAppContext) {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void contextInitialized(ServletContextEvent event) {\n-\t\t\t\t\t// no-op because the application context is already initialized\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t\telse {\n-\t\t\tthis.logger.debug(\"No ContextLoaderListener registered, as \"\n-\t\t\t\t\t+ \"createRootApplicationContext() did not \"\n-\t\t\t\t\t+ \"return an application context\");\n-\t\t}\n+\t\tservletContext.addListener(new Listener());\n \t}\n \n \tprotected WebApplicationContext createRootApplicationContext(\n@@ -136,4 +124,36 @@ protected SpringApplicationBuilder configure(SpringApplicationBuilder applicatio\n \t\treturn application;\n \t}\n \n+\t/**\n+\t * {@link ServletContextListener} used to load the context\n+\t */\n+\tprivate class Listener implements ServletContextListener {\n+\n+\t\tprivate ContextLoaderListener contextLoaderListener;\n+\n+\t\t@Override\n+\t\tpublic void contextInitialized(ServletContextEvent event) {\n+\t\t\tServletContext servletContext = event.getServletContext();\n+\t\t\tWebApplicationContext applicationContext = createRootApplicationContext(servletContext);\n+\t\t\tif (applicationContext == null) {\n+\t\t\t\tSpringBootServletInitializer.this.logger\n+\t\t\t\t\t\t.debug(\"No ContextLoaderListener registered, as \"\n+\t\t\t\t\t\t\t\t+ \"createRootApplicationContext() did not \"\n+\t\t\t\t\t\t\t\t+ \"return an application context\");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthis.contextLoaderListener = new ContextLoaderListener(applicationContext);\n+\t\t\t\t// Don't delegate contextInitialized event as we're already setup\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void contextDestroyed(ServletContextEvent event) {\n+\t\t\tif (this.contextLoaderListener != null) {\n+\t\t\t\tthis.contextLoaderListener.contextDestroyed(event);\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n }",
      "parent_sha": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267"
    }
  },
  {
    "oid": "b575be339e2f38c7c53141d5cdc3ddf1e53859c8",
    "message": "Fix endpoint id\n\nSee gh-7579",
    "date": "2017-01-26T13:00:48Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/b575be339e2f38c7c53141d5cdc3ddf1e53859c8",
    "details": {
      "sha": "b1d54dbba334e1c37548c707b4c63e5b9111dcdf",
      "filename": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporterTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/b575be339e2f38c7c53141d5cdc3ddf1e53859c8/spring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fjmx%2FEndpointMBeanExporterTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/b575be339e2f38c7c53141d5cdc3ddf1e53859c8/spring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fjmx%2FEndpointMBeanExporterTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fjmx%2FEndpointMBeanExporterTests.java?ref=b575be339e2f38c7c53141d5cdc3ddf1e53859c8",
      "patch": "@@ -337,7 +337,7 @@ public static class JsonMapConversionEndpoint\n \t\t\textends AbstractEndpoint<Map<String, Object>> {\n \n \t\tpublic JsonMapConversionEndpoint() {\n-\t\t\tsuper(\"json-map-conversion\");\n+\t\t\tsuper(\"json_map_conversion\");\n \t\t}\n \n \t\t@Override\n@@ -353,7 +353,7 @@ public static class JsonListConversionEndpoint\n \t\t\textends AbstractEndpoint<List<Object>> {\n \n \t\tpublic JsonListConversionEndpoint() {\n-\t\t\tsuper(\"json-list-conversion\");\n+\t\t\tsuper(\"json_list_conversion\");\n \t\t}\n \n \t\t@Override",
      "parent_sha": "74ac5851177d41f2e07bccc9bca31f1cdb4c2f4a"
    }
  },
  {
    "oid": "7108a1fc49df0a3ab1d1f30b23a6059d59489482",
    "message": "Optimize ApplicationHome.isUnitTest()\n\nCloses gh-11910",
    "date": "2018-02-07T11:57:03Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/7108a1fc49df0a3ab1d1f30b23a6059d59489482",
    "details": {
      "sha": "05e3e5ddea1f5694e88593ac1b23d6945a70e9df",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationHome.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/7108a1fc49df0a3ab1d1f30b23a6059d59489482/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fsystem%2FApplicationHome.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/7108a1fc49df0a3ab1d1f30b23a6059d59489482/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fsystem%2FApplicationHome.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fsystem%2FApplicationHome.java?ref=7108a1fc49df0a3ab1d1f30b23a6059d59489482",
      "patch": "@@ -105,7 +105,9 @@ private File findSource(Class<?> sourceClass) {\n \n \tprivate boolean isUnitTest() {\n \t\ttry {\n-\t\t\tfor (StackTraceElement element : Thread.currentThread().getStackTrace()) {\n+\t\t\tStackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n+\t\t\tfor (int i = stackTrace.length - 1; i >= 0; i--) {\n+\t\t\t\tStackTraceElement element = stackTrace[i];\n \t\t\t\tif (element.getClassName().startsWith(\"org.junit.\")) {\n \t\t\t\t\treturn true;\n \t\t\t\t}",
      "parent_sha": "825397bc574f2df2077e2235e71829f50c840d82"
    }
  },
  {
    "oid": "d6a14c2b9956c81314e2f4da0816b727a326279a",
    "message": "Revert \"Add @Conditional to prevent HATEOAS blowing up\"\n\nThis reverts commit e6e890777040620d4e259fb79d1c56af6d1f3c71\nwhich has an incorrect commit message.",
    "date": "2014-06-16T19:42:41Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/d6a14c2b9956c81314e2f4da0816b727a326279a",
    "details": {
      "sha": "fe5b047c6ba23e30f5d40cda06babce1c0a33866",
      "filename": "spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/d6a14c2b9956c81314e2f4da0816b727a326279a/spring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Fmain%2Fgroovy%2Forg%2Fspringframework%2Fboot%2Fgradle%2Frepackage%2FRepackageTask.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/d6a14c2b9956c81314e2f4da0816b727a326279a/spring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Fmain%2Fgroovy%2Forg%2Fspringframework%2Fboot%2Fgradle%2Frepackage%2FRepackageTask.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Fmain%2Fgroovy%2Forg%2Fspringframework%2Fboot%2Fgradle%2Frepackage%2FRepackageTask.java?ref=d6a14c2b9956c81314e2f4da0816b727a326279a",
      "patch": "@@ -114,16 +114,13 @@ public void execute(Jar archive) {\n \t\t}\n \n \t\tprivate void setMainClass(Repackager repackager) {\n-\t\t\tString mainClass = (String) getProject().property(\"mainClassName\");\n+\t\t\trepackager.setMainClass((String) getProject().property(\"mainClassName\"));\n+\t\t\tif (this.extension.getMainClass() != null) {\n+\t\t\t\trepackager.setMainClass(this.extension.getMainClass());\n+\t\t\t}\n \t\t\tif (RepackageTask.this.mainClass != null) {\n-\t\t\t\tmainClass = RepackageTask.this.mainClass;\n-\t\t\t} else if (this.extension.getMainClass() != null) {\n-\t\t\t\tmainClass = this.extension.getMainClass();\n-\t\t\t} else if (getProject().getTasks().getByName(\"run\").hasProperty(\"main\")) {\n-\t\t\t\tmainClass = (String) getProject().getTasks().getByName(\"run\").property(\"main\");\n+\t\t\t\trepackager.setMainClass(RepackageTask.this.mainClass);\n \t\t\t}\n-\t\t\tgetLogger().info(\"Setting mainClass: \" + mainClass);\n-\t\t\trepackager.setMainClass(mainClass);\n \t\t}\n \t}\n ",
      "parent_sha": "24471bc51e080e1fbf1c3f059316265c4f212bb2"
    }
  },
  {
    "oid": "9b184e3955d490ccd0181e6917520b8dc100afd4",
    "message": "Polishing",
    "date": "2017-01-13T23:47:43Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/9b184e3955d490ccd0181e6917520b8dc100afd4",
    "details": {
      "sha": "5a461d0c54ab64c88db10944a2ae07455d4dc3fe",
      "filename": "spring-boot/src/main/java/org/springframework/boot/diagnostics/FailureAnalyzers.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/9b184e3955d490ccd0181e6917520b8dc100afd4/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdiagnostics%2FFailureAnalyzers.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/9b184e3955d490ccd0181e6917520b8dc100afd4/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdiagnostics%2FFailureAnalyzers.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdiagnostics%2FFailureAnalyzers.java?ref=9b184e3955d490ccd0181e6917520b8dc100afd4",
      "patch": "@@ -122,7 +122,7 @@ private FailureAnalysis analyze(Throwable failure, List<FailureAnalyzer> analyze\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n-\t\t\t\tlog.debug(\"FailureAnalyzer \" + analyzer + \" failed\", ex);\n+\t\t\t\tlogger.debug(\"FailureAnalyzer \" + analyzer + \" failed\", ex);\n \t\t\t}\n \t\t}\n \t\treturn null;",
      "parent_sha": "ae3434ba4ce30566e88346cd0cbe82bbae45c156"
    }
  },
  {
    "oid": "5b9d45b231f6c8485ba31d5a19717561c9102c76",
    "message": "Inject any existing JMS DestinationResolver bean\n\nUpdate JmsAutoConfiguration to inject any existing DestinationResolver\nbean into JmsTemplate and DefaultJmsListenerContainerFactory.\n\nFixes gh-1443",
    "date": "2014-08-26T18:44:19Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/5b9d45b231f6c8485ba31d5a19717561c9102c76",
    "details": {
      "sha": "c39f53f92fd2f9c650e4ade69b63fd0e95133caf",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration.java",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/5b9d45b231f6c8485ba31d5a19717561c9102c76/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fjms%2FJmsAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/5b9d45b231f6c8485ba31d5a19717561c9102c76/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fjms%2FJmsAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fjms%2FJmsAutoConfiguration.java?ref=5b9d45b231f6c8485ba31d5a19717561c9102c76",
      "patch": "@@ -31,6 +31,7 @@\n import org.springframework.jms.config.DefaultJmsListenerContainerFactory;\n import org.springframework.jms.core.JmsMessagingTemplate;\n import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.jms.support.destination.DestinationResolver;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring JMS.\n@@ -50,11 +51,17 @@ public class JmsAutoConfiguration {\n \t@Autowired\n \tprivate ConnectionFactory connectionFactory;\n \n+\t@Autowired(required = false)\n+\tprivate DestinationResolver destinationResolver;\n+\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic JmsTemplate jmsTemplate() {\n \t\tJmsTemplate jmsTemplate = new JmsTemplate(this.connectionFactory);\n \t\tjmsTemplate.setPubSubDomain(this.properties.isPubSubDomain());\n+\t\tif (this.destinationResolver != null) {\n+\t\t\tjmsTemplate.setDestinationResolver(this.destinationResolver);\n+\t\t}\n \t\treturn jmsTemplate;\n \t}\n \n@@ -73,12 +80,18 @@ public JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {\n \t@ConditionalOnBean(JmsListenerAnnotationBeanPostProcessor.class)\n \tprotected static class AnnotationDrivenConfiguration {\n \n-\t\t@ConditionalOnMissingBean(name = \"jmsListenerContainerFactory\")\n+\t\t@Autowired(required = false)\n+\t\tprivate DestinationResolver destinationResolver;\n+\n \t\t@Bean\n+\t\t@ConditionalOnMissingBean(name = \"jmsListenerContainerFactory\")\n \t\tpublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\n \t\t\t\tConnectionFactory connectionFactory) {\n \t\t\tDefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n \t\t\tfactory.setConnectionFactory(connectionFactory);\n+\t\t\tif (this.destinationResolver != null) {\n+\t\t\t\tfactory.setDestinationResolver(this.destinationResolver);\n+\t\t\t}\n \t\t\treturn factory;\n \t\t}\n ",
      "parent_sha": "7a5248e38c9578bedc254985f3294c2da75e127c"
    }
  },
  {
    "oid": "5219697eb7654bf74a4baa815d5221c316d501bd",
    "message": "Fix GitHub tag determination following main branch rename\n\nSee gh-26253",
    "date": "2021-04-27T14:26:26Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/5219697eb7654bf74a4baa815d5221c316d501bd",
    "details": {
      "sha": "7f53696ebe2cd38514724d3dc043a85310fe7ad3",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/5219697eb7654bf74a4baa815d5221c316d501bd/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2FAsciidoctorConventions.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/5219697eb7654bf74a4baa815d5221c316d501bd/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2FAsciidoctorConventions.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2FAsciidoctorConventions.java?ref=5219697eb7654bf74a4baa815d5221c316d501bd",
      "patch": "@@ -125,7 +125,7 @@ private void configureCommonAttributes(Project project, AbstractAsciidoctorTask\n \n \tprivate String determineGitHubTag(Project project) {\n \t\tString version = \"v\" + project.getVersion();\n-\t\treturn (version.endsWith(\"-SNAPSHOT\")) ? \"master\" : version;\n+\t\treturn (version.endsWith(\"-SNAPSHOT\")) ? \"main\" : version;\n \t}\n \n \tprivate void configureOptions(AbstractAsciidoctorTask asciidoctorTask) {",
      "parent_sha": "6953da20135604268e13732e552866c9f1dbb324"
    }
  },
  {
    "oid": "82b839e4fb0a4c221de25c4eebff542a10286785",
    "message": "Polish OnWebApplicationCondition message",
    "date": "2017-04-27T20:58:52Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/82b839e4fb0a4c221de25c4eebff542a10286785",
    "details": {
      "sha": "af98818e56fc9d4544219a8851a9daac47f081f7",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/82b839e4fb0a4c221de25c4eebff542a10286785/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcondition%2FOnWebApplicationCondition.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/82b839e4fb0a4c221de25c4eebff542a10286785/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcondition%2FOnWebApplicationCondition.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcondition%2FOnWebApplicationCondition.java?ref=82b839e4fb0a4c221de25c4eebff542a10286785",
      "patch": "@@ -27,8 +27,8 @@\n import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ObjectUtils;\n+import org.springframework.web.context.ConfigurableWebEnvironment;\n import org.springframework.web.context.WebApplicationContext;\n-import org.springframework.web.context.support.StandardServletEnvironment;\n \n /**\n  * {@link Condition} that checks for the presence or absence of\n@@ -102,9 +102,9 @@ private ConditionOutcome isServletWebApplication(ConditionContext context) {\n \t\t\t\treturn ConditionOutcome.match(message.foundExactly(\"'session' scope\"));\n \t\t\t}\n \t\t}\n-\t\tif (context.getEnvironment() instanceof StandardServletEnvironment) {\n+\t\tif (context.getEnvironment() instanceof ConfigurableWebEnvironment) {\n \t\t\treturn ConditionOutcome\n-\t\t\t\t\t.match(message.foundExactly(\"StandardServletEnvironment\"));\n+\t\t\t\t\t.match(message.foundExactly(\"ConfigurableWebEnvironment\"));\n \t\t}\n \t\tif (context.getResourceLoader() instanceof WebApplicationContext) {\n \t\t\treturn ConditionOutcome.match(message.foundExactly(\"WebApplicationContext\"));",
      "parent_sha": "102da8b3c6354c8d60bbc5e39565abc7dd125c66"
    }
  },
  {
    "oid": "1a7fd6c359abf3bda0ecfd531a35ca2dad936424",
    "message": "Fix typo\n\nCloses gh-11388",
    "date": "2017-12-22T17:12:06Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/1a7fd6c359abf3bda0ecfd531a35ca2dad936424",
    "details": {
      "sha": "5f9ef26c64b041b5b3d7cd5c08ee3f2e29ecc887",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/package-info.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/1a7fd6c359abf3bda0ecfd531a35ca2dad936424/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2Ferror%2Fpackage-info.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/1a7fd6c359abf3bda0ecfd531a35ca2dad936424/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2Ferror%2Fpackage-info.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2Ferror%2Fpackage-info.java?ref=1a7fd6c359abf3bda0ecfd531a35ca2dad936424",
      "patch": "@@ -15,6 +15,6 @@\n  */\n \n /**\n- * Auto-configuration for for Spring MVC error handling.\n+ * Auto-configuration for Spring MVC error handling.\n  */\n package org.springframework.boot.autoconfigure.web.servlet.error;",
      "parent_sha": "2fa0539e7f7bf93505f67303955cc7da6f9f5846"
    }
  },
  {
    "oid": "91a10e12b625ac452d6bb5024de4ef05a8d6fea6",
    "message": "BasicBatchConfigurer is public again\n\nCloses gh-4533\nCloses gh-4608",
    "date": "2015-11-25T08:51:33Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/91a10e12b625ac452d6bb5024de4ef05a8d6fea6",
    "details": {
      "sha": "094c72fc6b661eb1747e26d4b6299e7813cf92d1",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/91a10e12b625ac452d6bb5024de4ef05a8d6fea6/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fbatch%2FBasicBatchConfigurer.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/91a10e12b625ac452d6bb5024de4ef05a8d6fea6/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fbatch%2FBasicBatchConfigurer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fbatch%2FBasicBatchConfigurer.java?ref=91a10e12b625ac452d6bb5024de4ef05a8d6fea6",
      "patch": "@@ -43,7 +43,7 @@\n  * @author Andy Wilkinson\n  */\n @Component\n-class BasicBatchConfigurer implements BatchConfigurer {\n+public class BasicBatchConfigurer implements BatchConfigurer {\n \n \tprivate static Log logger = LogFactory.getLog(BasicBatchConfigurer.class);\n ",
      "parent_sha": "095e7291d8f9ea9c44f7334c9d6ed99f1f4ab4a6"
    }
  },
  {
    "oid": "7ecb99757bb227ff5dacaf95079e03f8654871b4",
    "message": "Prevent test failures under Windows\n\nCleaned up file separators to prevent tests failing on Windows.",
    "date": "2013-09-06T00:14:14Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/7ecb99757bb227ff5dacaf95079e03f8654871b4",
    "details": {
      "sha": "8210e10de7c78a536338b35a0b4c09c92d766b22",
      "filename": "spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/7ecb99757bb227ff5dacaf95079e03f8654871b4/spring-boot-tools%2Fspring-boot-loader%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Floader%2FExplodedArchiveTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/7ecb99757bb227ff5dacaf95079e03f8654871b4/spring-boot-tools%2Fspring-boot-loader%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Floader%2FExplodedArchiveTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-tools%2Fspring-boot-loader%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Floader%2FExplodedArchiveTests.java?ref=7ecb99757bb227ff5dacaf95079e03f8654871b4",
      "patch": "@@ -109,7 +109,7 @@ public void getNestedArchive() throws Exception {\n \t\tEntry entry = getEntriesMap(this.archive).get(\"nested.jar\");\n \t\tArchive nested = this.archive.getNestedArchive(entry);\n \t\tassertThat(nested.getUrl().toString(),\n-\t\t\t\tequalTo(\"jar:file:\" + this.rootFolder.getPath() + \"/nested.jar!/\"));\n+\t\t\t\tequalTo(\"jar:file:\" + this.rootFolder.getPath() + File.separator + \"nested.jar!/\"));\n \t}\n \n \t@Test\n@@ -119,7 +119,7 @@ public void nestedDirArchive() throws Exception {\n \t\tMap<String, Entry> nestedEntries = getEntriesMap(nested);\n \t\tassertThat(nestedEntries.size(), equalTo(1));\n \t\tassertThat(nested.getUrl().toString(),\n-\t\t\t\tequalTo(\"file:\" + this.rootFolder.getPath() + \"/d/\"));\n+\t\t\t\tequalTo(\"file:\" + this.rootFolder.getPath() + File.separator + \"d/\"));\n \t}\n \n \t@Test",
      "parent_sha": "3c5fa0daa02c46a18ca048cfeb3826f2396abd23"
    }
  },
  {
    "oid": "0a9fe654431555dd36a4aa0f62a7ed386c86df40",
    "message": "Use line endings on all OSs when writing image config JSON\n\nPreviously \\r\\n was used on Windows and \\n was used on other\nplatforms. This resulted in different JSON content being written to\nthe archive. As the config's entry name is the SHA-256 hash of its\ncontent, it also resulted in the entry name being different.\n\nThis commit updates the JSON that's written into the archive to use\n\\n line endings, irrespective of the OS on which the image is being\nbuilt.\n\nSee gh-19828",
    "date": "2020-01-23T14:37:06Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/0a9fe654431555dd36a4aa0f62a7ed386c86df40",
    "details": {
      "sha": "e9baf846bdf8acf15e786ca53f7bdd7a72b95c82",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/type/ImageArchive.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/0a9fe654431555dd36a4aa0f62a7ed386c86df40/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2Ftype%2FImageArchive.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/0a9fe654431555dd36a4aa0f62a7ed386c86df40/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2Ftype%2FImageArchive.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2Ftype%2FImageArchive.java?ref=0a9fe654431555dd36a4aa0f62a7ed386c86df40",
      "patch": "@@ -136,7 +136,7 @@ private LayerId writeLayer(Layout writer, Layer layer) throws IOException {\n \tprivate String writeConfig(Layout writer, List<LayerId> writtenLayers) throws IOException {\n \t\ttry {\n \t\t\tObjectNode config = createConfig(writtenLayers);\n-\t\t\tString json = this.objectMapper.writeValueAsString(config);\n+\t\t\tString json = this.objectMapper.writeValueAsString(config).replace(\"\\r\\n\", \"\\n\");\n \t\t\tMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n \t\t\tInspectedContent content = InspectedContent.of(Content.of(json), digest::update);\n \t\t\tString name = \"/\" + LayerId.ofSha256Digest(digest.digest()).getHash() + \".json\";",
      "parent_sha": "a0b4cdee443b2b3bb0be4bec129c86f980ec37a6"
    }
  },
  {
    "oid": "3290313eb7ffbc1397d15b2e4b11404dd374f65b",
    "message": "Fix Docker socket creation on Windows\n\nCloses gh-19908",
    "date": "2020-01-27T06:29:16Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/3290313eb7ffbc1397d15b2e4b11404dd374f65b",
    "details": {
      "sha": "66e6c6a4d0cab44ef3cdab24b06b3e390d836737",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/DockerConnectionSocketFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/3290313eb7ffbc1397d15b2e4b11404dd374f65b/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2FDockerConnectionSocketFactory.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/3290313eb7ffbc1397d15b2e4b11404dd374f65b/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2FDockerConnectionSocketFactory.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2FDockerConnectionSocketFactory.java?ref=3290313eb7ffbc1397d15b2e4b11404dd374f65b",
      "patch": "@@ -43,7 +43,7 @@ class DockerConnectionSocketFactory implements ConnectionSocketFactory {\n \t@Override\n \tpublic Socket createSocket(HttpContext context) throws IOException {\n \t\tif (Platform.isWindows()) {\n-\t\t\tNamedPipeSocket.get(WINDOWS_NAMED_PIPE_PATH);\n+\t\t\treturn NamedPipeSocket.get(WINDOWS_NAMED_PIPE_PATH);\n \t\t}\n \t\treturn DomainSocket.get(DOMAIN_SOCKET_PATH);\n \t}",
      "parent_sha": "3b1745173b0e29e058e36c231a4a3a8dbc14a8bf"
    }
  },
  {
    "oid": "c84e09f6119233d59ae42a89eb8adc65202db69b",
    "message": "Fix incorrect usage of Assert.notNull()\n\nCloses gh-5931",
    "date": "2016-05-13T07:16:23Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/c84e09f6119233d59ae42a89eb8adc65202db69b",
    "details": {
      "sha": "06838001fa2fefcaaa91a0c3d4c7093e20088215",
      "filename": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/c84e09f6119233d59ae42a89eb8adc65202db69b/spring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2FCacheStatisticsAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/c84e09f6119233d59ae42a89eb8adc65202db69b/spring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2FCacheStatisticsAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2FCacheStatisticsAutoConfigurationTests.java?ref=c84e09f6119233d59ae42a89eb8adc65202db69b",
      "patch": "@@ -199,7 +199,7 @@ private void getOrCreate(Cache cache, String... ids) {\n \n \tprivate Cache getCache(String cacheName) {\n \t\tCache cache = this.cacheManager.getCache(cacheName);\n-\t\tAssert.notNull(\"No cache with name '\" + cacheName + \"' found.\");\n+\t\tAssert.notNull(cache, \"No cache with name '\" + cacheName + \"' found.\");\n \t\treturn cache;\n \t}\n ",
      "parent_sha": "075d5e8d12d02a93b8fdc828baec42f6a0aa802b"
    }
  },
  {
    "oid": "7ff41e7c8c7fd160d8fa97400ebbce707093e064",
    "message": "Polish",
    "date": "2018-09-05T11:39:51Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/7ff41e7c8c7fd160d8fa97400ebbce707093e064",
    "details": {
      "sha": "057703cb3dedf695fd6f0da8b77bbca04e1f86ab",
      "filename": "spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthTests.java",
      "status": "modified",
      "additions": 9,
      "deletions": 10,
      "changes": 19,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/7ff41e7c8c7fd160d8fa97400ebbce707093e064/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fhealth%2FHealthTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/7ff41e7c8c7fd160d8fa97400ebbce707093e064/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fhealth%2FHealthTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fhealth%2FHealthTests.java?ref=7ff41e7c8c7fd160d8fa97400ebbce707093e064",
      "patch": "@@ -32,6 +32,7 @@\n  *\n  * @author Phillip Webb\n  * @author Michael Pratt\n+ * @author Stephane Nicoll\n  */\n public class HealthTests {\n \n@@ -57,7 +58,7 @@ public void createWithDetails() {\n \t\tHealth health = new Health.Builder(Status.UP, Collections.singletonMap(\"a\", \"b\"))\n \t\t\t\t.build();\n \t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n-\t\tassertThat(health.getDetails().get(\"a\")).isEqualTo(\"b\");\n+\t\tassertThat(health.getDetails()).containsOnly(entry(\"a\", \"b\"));\n \t}\n \n \t@Test\n@@ -80,17 +81,15 @@ public void withException() {\n \t\tRuntimeException ex = new RuntimeException(\"bang\");\n \t\tHealth health = new Health.Builder(Status.UP, Collections.singletonMap(\"a\", \"b\"))\n \t\t\t\t.withException(ex).build();\n-\t\tassertThat(health.getDetails().get(\"a\")).isEqualTo(\"b\");\n-\t\tassertThat(health.getDetails().get(\"error\"))\n-\t\t\t\t.isEqualTo(\"java.lang.RuntimeException: bang\");\n+\t\tassertThat(health.getDetails()).containsOnly(entry(\"a\", \"b\"),\n+\t\t\t\tentry(\"error\", \"java.lang.RuntimeException: bang\"));\n \t}\n \n \t@Test\n \tpublic void withDetails() {\n \t\tHealth health = new Health.Builder(Status.UP, Collections.singletonMap(\"a\", \"b\"))\n \t\t\t\t.withDetail(\"c\", \"d\").build();\n-\t\tassertThat(health.getDetails().get(\"a\")).isEqualTo(\"b\");\n-\t\tassertThat(health.getDetails().get(\"c\")).isEqualTo(\"d\");\n+\t\tassertThat(health.getDetails()).containsOnly(entry(\"a\", \"b\"), entry(\"c\", \"d\"));\n \t}\n \n \t@Test\n@@ -128,7 +127,7 @@ public void withDetailsMultipleMaps() {\n \tpublic void unknownWithDetails() {\n \t\tHealth health = new Health.Builder().unknown().withDetail(\"a\", \"b\").build();\n \t\tassertThat(health.getStatus()).isEqualTo(Status.UNKNOWN);\n-\t\tassertThat(health.getDetails().get(\"a\")).isEqualTo(\"b\");\n+\t\tassertThat(health.getDetails()).containsOnly(entry(\"a\", \"b\"));\n \t}\n \n \t@Test\n@@ -142,7 +141,7 @@ public void unknown() {\n \tpublic void upWithDetails() {\n \t\tHealth health = new Health.Builder().up().withDetail(\"a\", \"b\").build();\n \t\tassertThat(health.getStatus()).isEqualTo(Status.UP);\n-\t\tassertThat(health.getDetails().get(\"a\")).isEqualTo(\"b\");\n+\t\tassertThat(health.getDetails()).containsOnly(entry(\"a\", \"b\"));\n \t}\n \n \t@Test\n@@ -157,8 +156,8 @@ public void downWithException() {\n \t\tRuntimeException ex = new RuntimeException(\"bang\");\n \t\tHealth health = Health.down(ex).build();\n \t\tassertThat(health.getStatus()).isEqualTo(Status.DOWN);\n-\t\tassertThat(health.getDetails().get(\"error\"))\n-\t\t\t\t.isEqualTo(\"java.lang.RuntimeException: bang\");\n+\t\tassertThat(health.getDetails())\n+\t\t\t\t.containsOnly(entry(\"error\", \"java.lang.RuntimeException: bang\"));\n \t}\n \n \t@Test",
      "parent_sha": "ca8be3f6bd40ca3353ba3fc7d2e634eb853e2941"
    }
  },
  {
    "oid": "a9d8befe7236ebbb91039000b1bf315b7fb8e4d0",
    "message": "Fix build failures\n\nSee gh-29290",
    "date": "2022-01-07T14:39:33Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/a9d8befe7236ebbb91039000b1bf315b7fb8e4d0",
    "details": {
      "sha": "996be24636d91fc5756dd1dc31c4e20521c0329e",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayPropertiesTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/a9d8befe7236ebbb91039000b1bf315b7fb8e4d0/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fflyway%2FFlywayPropertiesTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/a9d8befe7236ebbb91039000b1bf315b7fb8e4d0/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fflyway%2FFlywayPropertiesTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fflyway%2FFlywayPropertiesTests.java?ref=a9d8befe7236ebbb91039000b1bf315b7fb8e4d0",
      "patch": "@@ -108,8 +108,7 @@ void expectedPropertiesAreManaged() {\n \t\tMap<String, PropertyDescriptor> configuration = indexProperties(\n \t\t\t\tPropertyAccessorFactory.forBeanPropertyAccess(new ClassicConfiguration()));\n \t\t// Properties specific settings\n-\t\tignoreProperties(properties, \"url\", \"driverClassName\", \"user\", \"password\", \"enabled\", \"checkLocation\",\n-\t\t\t\t\"createDataSource\");\n+\t\tignoreProperties(properties, \"url\", \"driverClassName\", \"user\", \"password\", \"enabled\");\n \t\t// Property that moved to a separate SQL plugin\n \t\tignoreProperties(properties, \"sqlServerKerberosLoginFile\");\n \t\t// High level object we can't set with properties",
      "parent_sha": "94fa50af1c83f4fd51e346a8568bd73ff4239ba3"
    }
  },
  {
    "oid": "6556bb2e8912717a00e781b483c8d83f72a69571",
    "message": "Fix checkstyle violations",
    "date": "2018-05-05T03:13:57Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/6556bb2e8912717a00e781b483c8d83f72a69571",
    "details": {
      "sha": "79894be539cf6a8a3169a6d8aec907635dc1d614",
      "filename": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/6556bb2e8912717a00e781b483c8d83f72a69571/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fsecurity%2Fservlet%2FEndpointRequest.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/6556bb2e8912717a00e781b483c8d83f72a69571/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fsecurity%2Fservlet%2FEndpointRequest.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fsecurity%2Fservlet%2FEndpointRequest.java?ref=6556bb2e8912717a00e781b483c8d83f72a69571",
      "patch": "@@ -115,12 +115,12 @@ public static LinksRequestMatcher toLinks() {\n \t/**\n \t * Base class for supported request matchers.\n \t */\n-\tprivate static abstract class AbstractRequestMatcher\n+\tprivate abstract static class AbstractRequestMatcher\n \t\t\textends ApplicationContextRequestMatcher<WebApplicationContext> {\n \n \t\tprivate volatile RequestMatcher delegate;\n \n-\t\tpublic AbstractRequestMatcher() {\n+\t\tAbstractRequestMatcher() {\n \t\t\tsuper(WebApplicationContext.class);\n \t\t}\n ",
      "parent_sha": "975e986fef1517b80eaf280edf24409ff79c5f8e"
    }
  },
  {
    "oid": "ecaa6340e2ea30f47a2404285c3cd400e304c309",
    "message": "Update path in actuator sample tests",
    "date": "2017-07-18T02:22:33Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/ecaa6340e2ea30f47a2404285c3cd400e304c309",
    "details": {
      "sha": "004f9e8f0556e0df9d1f3e95ef73df20fe7a8313",
      "filename": "spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/CorsSampleActuatorApplicationTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/ecaa6340e2ea30f47a2404285c3cd400e304c309/spring-boot-samples%2Fspring-boot-sample-actuator%2Fsrc%2Ftest%2Fjava%2Fsample%2Factuator%2FCorsSampleActuatorApplicationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/ecaa6340e2ea30f47a2404285c3cd400e304c309/spring-boot-samples%2Fspring-boot-sample-actuator%2Fsrc%2Ftest%2Fjava%2Fsample%2Factuator%2FCorsSampleActuatorApplicationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-samples%2Fspring-boot-sample-actuator%2Fsrc%2Ftest%2Fjava%2Fsample%2Factuator%2FCorsSampleActuatorApplicationTests.java?ref=ecaa6340e2ea30f47a2404285c3cd400e304c309",
      "patch": "@@ -51,13 +51,13 @@ public void setUp() throws Exception {\n \n \t@Test\n \tpublic void sensitiveEndpointShouldReturnUnauthorized() throws Exception {\n-\t\tResponseEntity<Map> entity = this.testRestTemplate.getForEntity(\"/env\", Map.class);\n+\t\tResponseEntity<Map> entity = this.testRestTemplate.getForEntity(\"/application/env\", Map.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\n \t}\n \n \t@Test\n \tpublic void preflightRequestForInsensitiveShouldReturnOk() throws Exception {\n-\t\tRequestEntity<?> healthRequest = RequestEntity.options(new URI(\"/health\"))\n+\t\tRequestEntity<?> healthRequest = RequestEntity.options(new URI(\"/application/health\"))\n \t\t\t\t.header(\"Origin\",\"http://localhost:8080\")\n \t\t\t\t.header(\"Access-Control-Request-Method\", \"GET\")\n \t\t\t\t.build();\n@@ -67,7 +67,7 @@ public void preflightRequestForInsensitiveShouldReturnOk() throws Exception {\n \n \t@Test\n \tpublic void preflightRequestForSensitiveEndpointShouldReturnOk() throws Exception {\n-\t\tRequestEntity<?> entity = RequestEntity.options(new URI(\"/env\"))\n+\t\tRequestEntity<?> entity = RequestEntity.options(new URI(\"/application/env\"))\n \t\t\t\t.header(\"Origin\",\"http://localhost:8080\")\n \t\t\t\t.header(\"Access-Control-Request-Method\", \"GET\")\n \t\t\t\t.build();\n@@ -77,7 +77,7 @@ public void preflightRequestForSensitiveEndpointShouldReturnOk() throws Exceptio\n \n \t@Test\n \tpublic void preflightRequestWhenCorsConfigInvalidShouldReturnForbidden() throws Exception {\n-\t\tRequestEntity<?> entity = RequestEntity.options(new URI(\"/health\"))\n+\t\tRequestEntity<?> entity = RequestEntity.options(new URI(\"/application/health\"))\n \t\t\t\t.header(\"Origin\",\"http://localhost:9095\")\n \t\t\t\t.header(\"Access-Control-Request-Method\", \"GET\")\n \t\t\t\t.build();",
      "parent_sha": "c8951ae9384b156e45b1368fbe4569568e97d414"
    }
  },
  {
    "oid": "de3c3cd7559e879b0fcd89603cbe93d71bea9103",
    "message": "Add CLIENT_NAME_NONE to WebClientExchangeTags",
    "date": "2018-06-12T07:20:46Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/de3c3cd7559e879b0fcd89603cbe93d71bea9103",
    "details": {
      "sha": "c70aa216500e9f767496c3e2191920f902aaea5d",
      "filename": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/de3c3cd7559e879b0fcd89603cbe93d71bea9103/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fmetrics%2Fweb%2Freactive%2Fclient%2FWebClientExchangeTags.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/de3c3cd7559e879b0fcd89603cbe93d71bea9103/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fmetrics%2Fweb%2Freactive%2Fclient%2FWebClientExchangeTags.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fmetrics%2Fweb%2Freactive%2Fclient%2FWebClientExchangeTags.java?ref=de3c3cd7559e879b0fcd89603cbe93d71bea9103",
      "patch": "@@ -45,6 +45,8 @@ public final class WebClientExchangeTags {\n \tprivate static final Pattern PATTERN_BEFORE_PATH = Pattern\n \t\t\t.compile(\"^https?://[^/]+/\");\n \n+\tprivate static final Tag CLIENT_NAME_NONE = Tag.of(\"clientName\", \"none\");\n+\n \tprivate WebClientExchangeTags() {\n \t}\n \n@@ -104,7 +106,7 @@ public static Tag status(Throwable throwable) {\n \tpublic static Tag clientName(ClientRequest request) {\n \t\tString host = request.url().getHost();\n \t\tif (host == null) {\n-\t\t\thost = \"none\";\n+\t\t\treturn CLIENT_NAME_NONE;\n \t\t}\n \t\treturn Tag.of(\"clientName\", host);\n \t}",
      "parent_sha": "2ecd70416ce58fde65729fd37a9806751eae50c9"
    }
  },
  {
    "oid": "65684957eabc66203cc67067c6b88060eda7c7d4",
    "message": "Use @ConfigurationProperties for Thymeleaf\n\nFixes gh-1250",
    "date": "2014-07-14T09:08:16Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/65684957eabc66203cc67067c6b88060eda7c7d4",
    "details": {
      "sha": "8705f09e81edb4d0ef0501c210c43bef33dfe4d4",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java",
      "status": "modified",
      "additions": 79,
      "deletions": 19,
      "changes": 98,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/65684957eabc66203cc67067c6b88060eda7c7d4/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fthymeleaf%2FThymeleafAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/65684957eabc66203cc67067c6b88060eda7c7d4/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fthymeleaf%2FThymeleafAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fthymeleaf%2FThymeleafAutoConfiguration.java?ref=65684957eabc66203cc67067c6b88060eda7c7d4",
      "patch": "@@ -31,6 +31,8 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -53,6 +55,7 @@\n  *\n  * @author Dave Syer\n  * @author Andy Wilkinson\n+ * @author Stephane Nicoll\n  */\n @Configuration\n @ConditionalOnClass(SpringTemplateEngine.class)\n@@ -64,27 +67,22 @@ public class ThymeleafAutoConfiguration {\n \tpublic static final String DEFAULT_SUFFIX = \".html\";\n \n \t@Configuration\n+\t@EnableConfigurationProperties(ThymeleafProperties.class)\n \t@ConditionalOnMissingBean(name = \"defaultTemplateResolver\")\n-\tpublic static class DefaultTemplateResolverConfiguration implements EnvironmentAware {\n+\tpublic static class DefaultTemplateResolverConfiguration  {\n+\n+\t\t@Autowired\n+\t\tprivate ThymeleafProperties properties;\n \n \t\t@Autowired\n \t\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n \n-\t\tprivate RelaxedPropertyResolver environment;\n-\n-\t\t@Override\n-\t\tpublic void setEnvironment(Environment environment) {\n-\t\t\tthis.environment = new RelaxedPropertyResolver(environment,\n-\t\t\t\t\t\"spring.thymeleaf.\");\n-\t\t}\n \n \t\t@PostConstruct\n \t\tpublic void checkTemplateLocationExists() {\n-\t\t\tBoolean checkTemplateLocation = this.environment.getProperty(\n-\t\t\t\t\t\"checkTemplateLocation\", Boolean.class, true);\n+\t\t\tBoolean checkTemplateLocation = this.properties.isCheckTemplateLocation();\n \t\t\tif (checkTemplateLocation) {\n-\t\t\t\tResource resource = this.resourceLoader.getResource(this.environment\n-\t\t\t\t\t\t.getProperty(\"prefix\", DEFAULT_PREFIX));\n+\t\t\t\tResource resource = this.resourceLoader.getResource(this.properties.getPrefix());\n \t\t\t\tAssert.state(resource.exists(), \"Cannot find template location: \"\n \t\t\t\t\t\t+ resource + \" (please add some templates \"\n \t\t\t\t\t\t+ \"or check your Thymeleaf configuration)\");\n@@ -95,13 +93,11 @@ public void checkTemplateLocationExists() {\n \t\tpublic ITemplateResolver defaultTemplateResolver() {\n \t\t\tTemplateResolver resolver = new TemplateResolver();\n \t\t\tresolver.setResourceResolver(thymeleafResourceResolver());\n-\t\t\tresolver.setPrefix(this.environment.getProperty(\"prefix\", DEFAULT_PREFIX));\n-\t\t\tresolver.setSuffix(this.environment.getProperty(\"suffix\", DEFAULT_SUFFIX));\n-\t\t\tresolver.setTemplateMode(this.environment.getProperty(\"mode\", \"HTML5\"));\n-\t\t\tresolver.setCharacterEncoding(this.environment.getProperty(\"encoding\",\n-\t\t\t\t\t\"UTF-8\"));\n-\t\t\tresolver.setCacheable(this.environment.getProperty(\"cache\", Boolean.class,\n-\t\t\t\t\ttrue));\n+\t\t\tresolver.setPrefix(this.properties.getPrefix());\n+\t\t\tresolver.setSuffix(this.properties.getSuffix());\n+\t\t\tresolver.setTemplateMode(this.properties.getMode());\n+\t\t\tresolver.setCharacterEncoding(this.properties.getEncoding());\n+\t\t\tresolver.setCacheable(this.properties.isCache());\n \t\t\treturn resolver;\n \t\t}\n \n@@ -111,6 +107,70 @@ protected SpringResourceResourceResolver thymeleafResourceResolver() {\n \t\t}\n \t}\n \n+\t@ConfigurationProperties(\"spring.thymeleaf\")\n+\tpublic static class ThymeleafProperties {\n+\n+\t\tprivate boolean checkTemplateLocation = true;\n+\n+\t\tprivate String prefix = DEFAULT_PREFIX;\n+\n+\t\tprivate String suffix = DEFAULT_SUFFIX;\n+\n+\t\tprivate String mode = \"HTML5\";\n+\n+\t\tprivate String encoding = \"UTF-8\";\n+\n+\t\tprivate boolean cache = true;\n+\n+\t\tpublic boolean isCheckTemplateLocation() {\n+\t\t\treturn checkTemplateLocation;\n+\t\t}\n+\n+\t\tpublic void setCheckTemplateLocation(boolean checkTemplateLocation) {\n+\t\t\tthis.checkTemplateLocation = checkTemplateLocation;\n+\t\t}\n+\n+\t\tpublic String getPrefix() {\n+\t\t\treturn prefix;\n+\t\t}\n+\n+\t\tpublic void setPrefix(String prefix) {\n+\t\t\tthis.prefix = prefix;\n+\t\t}\n+\n+\t\tpublic String getSuffix() {\n+\t\t\treturn suffix;\n+\t\t}\n+\n+\t\tpublic void setSuffix(String suffix) {\n+\t\t\tthis.suffix = suffix;\n+\t\t}\n+\n+\t\tpublic String getMode() {\n+\t\t\treturn mode;\n+\t\t}\n+\n+\t\tpublic void setMode(String mode) {\n+\t\t\tthis.mode = mode;\n+\t\t}\n+\n+\t\tpublic String getEncoding() {\n+\t\t\treturn encoding;\n+\t\t}\n+\n+\t\tpublic void setEncoding(String encoding) {\n+\t\t\tthis.encoding = encoding;\n+\t\t}\n+\n+\t\tpublic boolean isCache() {\n+\t\t\treturn cache;\n+\t\t}\n+\n+\t\tpublic void setCache(boolean cache) {\n+\t\t\tthis.cache = cache;\n+\t\t}\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n \tprotected static class ThymeleafDefaultConfiguration {",
      "parent_sha": "90cf722365cf03c3377cedb15eb9688598555480"
    }
  },
  {
    "oid": "4eb458f7d888f8a66f8aa62e95011ab6254b2e86",
    "message": "Prevent early resolution of factory beans\n\nThis commit updates DatabaseInitializationDependencyConfigurer so that\nit does not inject the Environment anymore. Doing so in such a low-level\ncallback can lead to early resolution of factory beans. Rather, this\ncommit uses the EnvironmentAware callback that short-circuit dependency\nresolution.\n\nCloses gh-29475",
    "date": "2022-01-19T10:49:56Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/4eb458f7d888f8a66f8aa62e95011ab6254b2e86",
    "details": {
      "sha": "fa92b46e2725b61c8f44ba7a70e65a8c23a354f9",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/sql/init/dependency/DatabaseInitializationDependencyConfigurer.java",
      "status": "modified",
      "additions": 9,
      "deletions": 17,
      "changes": 26,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/4eb458f7d888f8a66f8aa62e95011ab6254b2e86/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fsql%2Finit%2Fdependency%2FDatabaseInitializationDependencyConfigurer.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/4eb458f7d888f8a66f8aa62e95011ab6254b2e86/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fsql%2Finit%2Fdependency%2FDatabaseInitializationDependencyConfigurer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fsql%2Finit%2Fdependency%2FDatabaseInitializationDependencyConfigurer.java?ref=4eb458f7d888f8a66f8aa62e95011ab6254b2e86",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2021 the original author or authors.\n+ * Copyright 2012-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,6 +34,7 @@\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n import org.springframework.boot.util.Instantiator;\n+import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\n import org.springframework.core.Ordered;\n@@ -63,36 +64,27 @@\n  */\n public class DatabaseInitializationDependencyConfigurer implements ImportBeanDefinitionRegistrar {\n \n-\tprivate final Environment environment;\n-\n-\tDatabaseInitializationDependencyConfigurer(Environment environment) {\n-\t\tthis.environment = environment;\n-\t}\n-\n \t@Override\n \tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n \t\tString name = DependsOnDatabaseInitializationPostProcessor.class.getName();\n \t\tif (!registry.containsBeanDefinition(name)) {\n-\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(\n-\t\t\t\t\tDependsOnDatabaseInitializationPostProcessor.class,\n-\t\t\t\t\tthis::createDependsOnDatabaseInitializationPostProcessor);\n+\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n+\t\t\t\t\t.genericBeanDefinition(DependsOnDatabaseInitializationPostProcessor.class);\n \t\t\tregistry.registerBeanDefinition(name, builder.getBeanDefinition());\n \t\t}\n \t}\n \n-\tprivate DependsOnDatabaseInitializationPostProcessor createDependsOnDatabaseInitializationPostProcessor() {\n-\t\treturn new DependsOnDatabaseInitializationPostProcessor(this.environment);\n-\t}\n-\n \t/**\n \t * {@link BeanFactoryPostProcessor} used to configure database initialization\n \t * dependency relationships.\n \t */\n-\tstatic class DependsOnDatabaseInitializationPostProcessor implements BeanFactoryPostProcessor, Ordered {\n+\tstatic class DependsOnDatabaseInitializationPostProcessor\n+\t\t\timplements BeanFactoryPostProcessor, EnvironmentAware, Ordered {\n \n-\t\tprivate final Environment environment;\n+\t\tprivate Environment environment;\n \n-\t\tDependsOnDatabaseInitializationPostProcessor(Environment environment) {\n+\t\t@Override\n+\t\tpublic void setEnvironment(Environment environment) {\n \t\t\tthis.environment = environment;\n \t\t}\n ",
      "parent_sha": "cdd479556f7345405a5995f2c5a0c70207258bf3"
    }
  },
  {
    "oid": "d0918f87b2200e36d5a367b39f76434c3e705e18",
    "message": "Fix OAuth2WebSecurityConfigurationTests\n\nCloses gh-13872",
    "date": "2018-07-24T07:57:42Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/d0918f87b2200e36d5a367b39f76434c3e705e18",
    "details": {
      "sha": "36990dcb8bc771a70db7d862f3228e2460ade234",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfigurationTests.java",
      "status": "modified",
      "additions": 5,
      "deletions": 12,
      "changes": 17,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/d0918f87b2200e36d5a367b39f76434c3e705e18/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fsecurity%2Foauth2%2Fclient%2Fservlet%2FOAuth2WebSecurityConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/d0918f87b2200e36d5a367b39f76434c3e705e18/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fsecurity%2Foauth2%2Fclient%2Fservlet%2FOAuth2WebSecurityConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fsecurity%2Foauth2%2Fclient%2Fservlet%2FOAuth2WebSecurityConfigurationTests.java?ref=d0918f87b2200e36d5a367b39f76434c3e705e18",
      "patch": "@@ -85,12 +85,8 @@ public void securityConfigurerBacksOffWhenClientRegistrationBeanAbsent() {\n \tpublic void configurationRegistersAuthorizedClientServiceBean() {\n \t\tthis.contextRunner.withUserConfiguration(ClientRepositoryConfiguration.class,\n \t\t\t\tOAuth2WebSecurityConfiguration.class).run((context) -> {\n-\t\t\t\t\tOAuth2AuthorizedClientService bean = context\n-\t\t\t\t\t\t\t.getBean(OAuth2AuthorizedClientService.class);\n-\t\t\t\t\tOAuth2AuthorizedClientService authorizedClientService = (OAuth2AuthorizedClientService) ReflectionTestUtils\n-\t\t\t\t\t\t\t.getField(getAuthCodeFilters(context).get(0),\n-\t\t\t\t\t\t\t\t\t\"authorizedClientService\");\n-\t\t\t\t\tassertThat(authorizedClientService).isEqualTo(bean);\n+\t\t\t\t\tassertThat(context)\n+\t\t\t\t\t\t\t.hasSingleBean(OAuth2AuthorizedClientService.class);\n \t\t\t\t});\n \t}\n \n@@ -110,12 +106,9 @@ public void authorizedClientServiceBeanIsConditionalOnMissingBean() {\n \t\t\t\t.withUserConfiguration(OAuth2AuthorizedClientServiceConfiguration.class,\n \t\t\t\t\t\tOAuth2WebSecurityConfiguration.class)\n \t\t\t\t.run((context) -> {\n-\t\t\t\t\tOAuth2AuthorizedClientService bean = context\n-\t\t\t\t\t\t\t.getBean(OAuth2AuthorizedClientService.class);\n-\t\t\t\t\tOAuth2AuthorizedClientService authorizedClientService = (OAuth2AuthorizedClientService) ReflectionTestUtils\n-\t\t\t\t\t\t\t.getField(getAuthCodeFilters(context).get(0),\n-\t\t\t\t\t\t\t\t\t\"authorizedClientService\");\n-\t\t\t\t\tassertThat(authorizedClientService).isEqualTo(bean);\n+\t\t\t\t\tassertThat(context)\n+\t\t\t\t\t\t\t.hasSingleBean(OAuth2AuthorizedClientService.class);\n+\t\t\t\t\tassertThat(context).hasBean(\"testAuthorizedClientService\");\n \t\t\t\t});\n \t}\n ",
      "parent_sha": "2ad548485ca04acde51ba8f54ddd8c2b77972944"
    }
  },
  {
    "oid": "0d532042cb68580fb035463a3fa9e8d019664f88",
    "message": "Use RequestDispatcher.ERROR_STATUS_CODE constant\n\nSee gh-20923",
    "date": "2020-04-17T14:01:11Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/0d532042cb68580fb035463a3fa9e8d019664f88",
    "details": {
      "sha": "ffccf3fa5985083d9983572072e43ea43d1b339d",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/AbstractErrorController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/0d532042cb68580fb035463a3fa9e8d019664f88/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2Ferror%2FAbstractErrorController.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/0d532042cb68580fb035463a3fa9e8d019664f88/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2Ferror%2FAbstractErrorController.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2Ferror%2FAbstractErrorController.java?ref=0d532042cb68580fb035463a3fa9e8d019664f88",
      "patch": "@@ -20,6 +20,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import javax.servlet.RequestDispatcher;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n@@ -103,7 +104,7 @@ protected boolean getBooleanParameter(HttpServletRequest request, String paramet\n \t}\n \n \tprotected HttpStatus getStatus(HttpServletRequest request) {\n-\t\tInteger statusCode = (Integer) request.getAttribute(\"javax.servlet.error.status_code\");\n+\t\tInteger statusCode = (Integer) request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n \t\tif (statusCode == null) {\n \t\t\treturn HttpStatus.INTERNAL_SERVER_ERROR;\n \t\t}",
      "parent_sha": "a2350e58d2b2281272047b08b8810c7a18b0b04a"
    }
  },
  {
    "oid": "729f6758f770cc075a502da792da93eab7b593c0",
    "message": "Polish \"Fix web session javadoc typos\"\n\nSee gh-39821",
    "date": "2024-03-15T17:07:41Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/729f6758f770cc075a502da792da93eab7b593c0",
    "details": {
      "sha": "b777c1fd63c9157ba3b79df289f82109702ee5c2",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/server/Session.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/729f6758f770cc075a502da792da93eab7b593c0/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Fservlet%2Fserver%2FSession.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/729f6758f770cc075a502da792da93eab7b593c0/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Fservlet%2Fserver%2FSession.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Fservlet%2Fserver%2FSession.java?ref=729f6758f770cc075a502da792da93eab7b593c0",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2023 the original author or authors.\n+ * Copyright 2012-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.",
      "parent_sha": "f5d45fd31f38cec29427c595c7b8070204570765"
    }
  },
  {
    "oid": "51dfd528bd6de6ecb0d3d2c1a35fe0c0e3fd463c",
    "message": "Close TomcatMetrics on shutdown for cleanup\n\nSee micrometer-metrics/micrometer#1424\nSee gh-19880",
    "date": "2020-01-24T13:04:13Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/51dfd528bd6de6ecb0d3d2c1a35fe0c0e3fd463c",
    "details": {
      "sha": "6a8a2bea6fc81326e27d217465d5ed4833cc6bf9",
      "filename": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/tomcat/TomcatMetricsBinder.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/51dfd528bd6de6ecb0d3d2c1a35fe0c0e3fd463c/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fmetrics%2Fweb%2Ftomcat%2FTomcatMetricsBinder.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/51dfd528bd6de6ecb0d3d2c1a35fe0c0e3fd463c/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fmetrics%2Fweb%2Ftomcat%2FTomcatMetricsBinder.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fmetrics%2Fweb%2Ftomcat%2FTomcatMetricsBinder.java?ref=51dfd528bd6de6ecb0d3d2c1a35fe0c0e3fd463c",
      "patch": "@@ -25,6 +25,7 @@\n import org.apache.catalina.Context;\n import org.apache.catalina.Manager;\n \n+import org.springframework.beans.factory.DisposableBean;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n import org.springframework.boot.web.context.WebServerApplicationContext;\n import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n@@ -38,12 +39,14 @@\n  * @author Andy Wilkinson\n  * @since 2.1.0\n  */\n-public class TomcatMetricsBinder implements ApplicationListener<ApplicationStartedEvent> {\n+public class TomcatMetricsBinder implements ApplicationListener<ApplicationStartedEvent>, DisposableBean {\n \n \tprivate final MeterRegistry meterRegistry;\n \n \tprivate final Iterable<Tag> tags;\n \n+\tprivate volatile TomcatMetrics tomcatMetrics;\n+\n \tpublic TomcatMetricsBinder(MeterRegistry meterRegistry) {\n \t\tthis(meterRegistry, Collections.emptyList());\n \t}\n@@ -57,7 +60,8 @@ public TomcatMetricsBinder(MeterRegistry meterRegistry, Iterable<Tag> tags) {\n \tpublic void onApplicationEvent(ApplicationStartedEvent event) {\n \t\tApplicationContext applicationContext = event.getApplicationContext();\n \t\tManager manager = findManager(applicationContext);\n-\t\tnew TomcatMetrics(manager, this.tags).bindTo(this.meterRegistry);\n+\t\tthis.tomcatMetrics = new TomcatMetrics(manager, this.tags);\n+\t\tthis.tomcatMetrics.bindTo(this.meterRegistry);\n \t}\n \n \tprivate Manager findManager(ApplicationContext applicationContext) {\n@@ -80,4 +84,9 @@ private Context findContext(TomcatWebServer tomcatWebServer) {\n \t\treturn null;\n \t}\n \n+\t@Override\n+\tpublic void destroy() {\n+\t\tthis.tomcatMetrics.close();\n+\t}\n+\n }",
      "parent_sha": "c3d0b9c43a1d88c1fe084c5f6e950611d7ea7cfa"
    }
  },
  {
    "oid": "7dd8dfc19741d149fe2a93ccd8147c505d8181b1",
    "message": "Handle zero-offset timezone in logging test\n\nSee gh-28654",
    "date": "2022-05-03T22:48:09Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/7dd8dfc19741d149fe2a93ccd8147c505d8181b1",
    "details": {
      "sha": "3308792759b1c748dc7939e9e8c92e245f33b862",
      "filename": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/7dd8dfc19741d149fe2a93ccd8147c505d8181b1/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Flogging%2Flogback%2FLogbackLoggingSystemTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/7dd8dfc19741d149fe2a93ccd8147c505d8181b1/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Flogging%2Flogback%2FLogbackLoggingSystemTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Flogging%2Flogback%2FLogbackLoggingSystemTests.java?ref=7dd8dfc19741d149fe2a93ccd8147c505d8181b1",
      "patch": "@@ -554,7 +554,7 @@ void testDateformatPatternDefault(CapturedOutput output) {\n \t\tinitialize(loggingInitializationContext, null, null);\n \t\tthis.logger.info(\"Hello world\");\n \t\tassertThat(getLineWithText(output, \"Hello world\"))\n-\t\t\t\t.containsPattern(\"\\\\d{4}-\\\\d{2}\\\\-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}[-+]\\\\d{2}:\\\\d{2}\");\n+\t\t\t\t.containsPattern(\"\\\\d{4}-\\\\d{2}\\\\-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}([-+]\\\\d{2}:\\\\d{2}|Z)\");\n \t}\n \n \t@Test",
      "parent_sha": "7f395941c72fe5be8ed405c724b5b8e204c00abf"
    }
  },
  {
    "oid": "b2327cb5f9cbda4ad5f7beb2f4f2aa884bf9004e",
    "message": "Fix comment",
    "date": "2014-02-20T16:44:23Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/b2327cb5f9cbda4ad5f7beb2f4f2aa884bf9004e",
    "details": {
      "sha": "1a31b89506d93b6036a532efefd983e409ee48af",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/b2327cb5f9cbda4ad5f7beb2f4f2aa884bf9004e/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2FAutoConfigurationSorter.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/b2327cb5f9cbda4ad5f7beb2f4f2aa884bf9004e/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2FAutoConfigurationSorter.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2FAutoConfigurationSorter.java?ref=b2327cb5f9cbda4ad5f7beb2f4f2aa884bf9004e",
      "patch": "@@ -62,7 +62,7 @@ public List<String> getInPriorityOrder(Collection<String> classNames)\n \n \t\tList<String> orderedClassNames = new ArrayList<String>(classNames);\n \n-\t\t// Sort initially by order\n+\t\t// Initially sort alphabetically\n \t\tCollections.sort(orderedClassNames);\n \n \t\t// Then sort by order",
      "parent_sha": "56a693198bafb768e7512e81f98d7da5f8241faf"
    }
  },
  {
    "oid": "6a18fa072fb8657f0224c3b68fe684171b8ea160",
    "message": "Fix import ordering",
    "date": "2015-10-20T19:25:50Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/6a18fa072fb8657f0224c3b68fe684171b8ea160",
    "details": {
      "sha": "9a61da8e6199249105e5b4512521da9dc5748955",
      "filename": "spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/6a18fa072fb8657f0224c3b68fe684171b8ea160/spring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbind%2FRelaxedDataBinderTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/6a18fa072fb8657f0224c3b68fe684171b8ea160/spring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbind%2FRelaxedDataBinderTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbind%2FRelaxedDataBinderTests.java?ref=6a18fa072fb8657f0224c3b68fe684171b8ea160",
      "patch": "@@ -16,14 +16,6 @@\n \n package org.springframework.boot.bind;\n \n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertThat;\n-\n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n@@ -48,6 +40,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n+\n import org.springframework.beans.MutablePropertyValues;\n import org.springframework.beans.NotWritablePropertyException;\n import org.springframework.context.support.StaticMessageSource;\n@@ -60,6 +53,14 @@\n import org.springframework.validation.FieldError;\n import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n \n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+\n /**\n  * Tests for {@link RelaxedDataBinder}.\n  *",
      "parent_sha": "90ddd857f47c6e44d559e3487f2dc673ce694702"
    }
  },
  {
    "oid": "f4723efaed4345e91e28b5babf344deaa896e167",
    "message": "Fix typo",
    "date": "2015-08-04T12:30:09Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/f4723efaed4345e91e28b5babf344deaa896e167",
    "details": {
      "sha": "4852ebbcf3fc4d7c12980f0e691ea65a69e48ab1",
      "filename": "spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/f4723efaed4345e91e28b5babf344deaa896e167/spring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbind%2FRelaxedDataBinderTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/f4723efaed4345e91e28b5babf344deaa896e167/spring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbind%2FRelaxedDataBinderTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbind%2FRelaxedDataBinderTests.java?ref=f4723efaed4345e91e28b5babf344deaa896e167",
      "patch": "@@ -551,7 +551,7 @@ public void testBindCaseInsensitiveEnumsWithConverter() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void testBindWithoutAlais() throws Exception {\n+\tpublic void testBindWithoutAlias() throws Exception {\n \t\tVanillaTarget target = new VanillaTarget();\n \t\tMutablePropertyValues properties = new MutablePropertyValues();\n \t\tproperties.add(\"flub\", \"a\");",
      "parent_sha": "d18180e2e42c0347501524e62812b23ca03a414a"
    }
  },
  {
    "oid": "316d2cce89166b09fa6b6fcfa184db5b5400bdad",
    "message": "Don't offer upgrade for version that is already aligned\n\nSee gh-27044",
    "date": "2021-06-24T09:02:14Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/316d2cce89166b09fa6b6fcfa184db5b5400bdad",
    "details": {
      "sha": "d56525412b647f9890222fdbd4145025f2b29c5d",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/bom/bomr/InteractiveUpgradeResolver.java",
      "status": "modified",
      "additions": 20,
      "deletions": 8,
      "changes": 28,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/316d2cce89166b09fa6b6fcfa184db5b5400bdad/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2FInteractiveUpgradeResolver.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/316d2cce89166b09fa6b6fcfa184db5b5400bdad/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2FInteractiveUpgradeResolver.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2FInteractiveUpgradeResolver.java?ref=316d2cce89166b09fa6b6fcfa184db5b5400bdad",
      "patch": "@@ -86,13 +86,12 @@ private Upgrade resolveUpgrade(Library library, Map<String, Library> libraries)\n \n \tprivate List<VersionOption> getVersionOptions(Library library, Map<String, Library> libraries) {\n \t\tif (library.getVersion().getVersionAlignment() != null) {\n-\t\t\tVersionOption alignedVersionOption = alignedVersionOption(library, libraries);\n-\t\t\tif (!isPermitted(alignedVersionOption.version, library.getProhibitedVersions())) {\n-\t\t\t\tthrow new InvalidUserDataException(\"Version alignment failed. Version \" + alignedVersionOption.version\n-\t\t\t\t\t\t+ \" from \" + library.getName() + \" is prohibited\");\n-\t\t\t}\n-\t\t\treturn Collections.singletonList(alignedVersionOption);\n+\t\t\treturn determineAlignedVersionOption(library, libraries);\n \t\t}\n+\t\treturn determineResolvedVersionOptions(library);\n+\t}\n+\n+\tprivate List<VersionOption> determineResolvedVersionOptions(Library library) {\n \t\tMap<String, SortedSet<DependencyVersion>> moduleVersions = new LinkedHashMap<>();\n \t\tDependencyVersion libraryVersion = library.getVersion().getVersion();\n \t\tfor (Group group : library.getGroups()) {\n@@ -120,6 +119,18 @@ private List<VersionOption> getVersionOptions(Library library, Map<String, Libra\n \t\t\t\t.collect(Collectors.toList());\n \t}\n \n+\tprivate List<VersionOption> determineAlignedVersionOption(Library library, Map<String, Library> libraries) {\n+\t\tVersionOption alignedVersionOption = alignedVersionOption(library, libraries);\n+\t\tif (alignedVersionOption == null) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\t\tif (!isPermitted(alignedVersionOption.version, library.getProhibitedVersions())) {\n+\t\t\tthrow new InvalidUserDataException(\"Version alignment failed. Version \" + alignedVersionOption.version\n+\t\t\t\t\t+ \" from \" + library.getName() + \" is prohibited\");\n+\t\t}\n+\t\treturn Collections.singletonList(alignedVersionOption);\n+\t}\n+\n \tprivate VersionOption alignedVersionOption(Library library, Map<String, Library> libraries) {\n \t\tVersionAlignment versionAlignment = library.getVersion().getVersionAlignment();\n \t\tLibrary alignmentLibrary = libraries.get(versionAlignment.getLibraryName());\n@@ -148,8 +159,9 @@ private VersionOption alignedVersionOption(Library library, Map<String, Library>\n \t\t\tthrow new InvalidUserDataException(\"Cannot align with library '\" + versionAlignment.getLibraryName()\n \t\t\t\t\t+ \"' as it uses multiple different versions of this library's modules\");\n \t\t}\n-\t\tString requiredVersion = versions.iterator().next();\n-\t\treturn new AlignedVersionOption(DependencyVersion.parse(requiredVersion), alignmentLibrary);\n+\t\tDependencyVersion version = DependencyVersion.parse(versions.iterator().next());\n+\t\treturn library.getVersion().getVersion().equals(version) ? null\n+\t\t\t\t: new AlignedVersionOption(version, alignmentLibrary);\n \t}\n \n \tprivate boolean isPermitted(DependencyVersion dependencyVersion, List<ProhibitedVersion> prohibitedVersions) {",
      "parent_sha": "a7872f47da1fa824c0eb6e7249c94ea6a5b8d4c8"
    }
  },
  {
    "oid": "9f13d291ecbf5e12be0a6cfd71dedf6adbc05b4d",
    "message": "Return early if no plugins should be disabled",
    "date": "2013-11-06T09:35:15Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/9f13d291ecbf5e12be0a6cfd71dedf6adbc05b4d",
    "details": {
      "sha": "7c02a7728dcfcca901951b22856d774aaabb4ff5",
      "filename": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/9f13d291ecbf5e12be0a6cfd71dedf6adbc05b4d/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2FCrshAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/9f13d291ecbf5e12be0a6cfd71dedf6adbc05b4d/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2FCrshAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2FCrshAutoConfiguration.java?ref=9f13d291ecbf5e12be0a6cfd71dedf6adbc05b4d",
      "patch": "@@ -324,18 +324,19 @@ public Iterable<CRaSHPlugin<?>> getPlugins() {\n \t\tprotected boolean shouldFilter(CRaSHPlugin<?> plugin) {\n \t\t\tAssert.notNull(plugin);\n \n+\t\t\tif (this.disabledPlugins == null || this.disabledPlugins.length == 0) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n \t\t\tSet<Class> classes = ClassUtils.getAllInterfacesAsSet(plugin);\n \t\t\tclasses.add(plugin.getClass());\n \n \t\t\tfor (Class<?> clazz : classes) {\n-\t\t\t\tif (this.disabledPlugins != null && this.disabledPlugins.length > 0) {\n-\t\t\t\t\tfor (String disabledPlugin : this.disabledPlugins) {\n-\t\t\t\t\t\tif (ClassUtils.getShortName(clazz).equalsIgnoreCase(\n-\t\t\t\t\t\t\t\tdisabledPlugin)\n-\t\t\t\t\t\t\t\t|| ClassUtils.getQualifiedName(clazz).equalsIgnoreCase(\n-\t\t\t\t\t\t\t\t\t\tdisabledPlugin)) {\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (String disabledPlugin : this.disabledPlugins) {\n+\t\t\t\t\tif (ClassUtils.getShortName(clazz).equalsIgnoreCase(disabledPlugin)\n+\t\t\t\t\t\t\t|| ClassUtils.getQualifiedName(clazz).equalsIgnoreCase(\n+\t\t\t\t\t\t\t\t\tdisabledPlugin)) {\n+\t\t\t\t\t\treturn true;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
      "parent_sha": "4c757001641cef56fbc75a2d8b0ca0bb2ce6a1fa"
    }
  },
  {
    "oid": "a94f3a0cbf58e9fa1e02007d96c4f8e6fd1aca7e",
    "message": "Only try to auto-configure Jetty when jetty-webapp is on the classpath\n\nCloses gh-4089",
    "date": "2015-10-05T10:41:23Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/a94f3a0cbf58e9fa1e02007d96c4f8e6fd1aca7e",
    "details": {
      "sha": "17b3b2d99a25d63000d7f7591fad3f18f3c9498e",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/a94f3a0cbf58e9fa1e02007d96c4f8e6fd1aca7e/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2FEmbeddedServletContainerAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/a94f3a0cbf58e9fa1e02007d96c4f8e6fd1aca7e/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2FEmbeddedServletContainerAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2FEmbeddedServletContainerAutoConfiguration.java?ref=a94f3a0cbf58e9fa1e02007d96c4f8e6fd1aca7e",
      "patch": "@@ -21,6 +21,7 @@\n import org.apache.catalina.startup.Tomcat;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.WebAppContext;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n@@ -82,7 +83,7 @@ public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFacto\n \t * Nested configuration if Jetty is being used.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class })\n+\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n \t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n \tpublic static class EmbeddedJetty {\n ",
      "parent_sha": "87a515f6a0be669ad5b93194011c880e9cf168b8"
    }
  },
  {
    "oid": "2c856124e17c1643add12c33603230390d4b5739",
    "message": "Polish ModifiedClassPathRunner",
    "date": "2016-11-21T13:20:37Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/2c856124e17c1643add12c33603230390d4b5739",
    "details": {
      "sha": "8f8abd935c0771d4a745dbe61dd1c086d92acb54",
      "filename": "spring-boot-junit-runners/src/main/java/org/springframework/boot/junit/runner/classpath/ModifiedClassPathRunner.java",
      "status": "modified",
      "additions": 30,
      "deletions": 23,
      "changes": 53,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/2c856124e17c1643add12c33603230390d4b5739/spring-boot-junit-runners%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fjunit%2Frunner%2Fclasspath%2FModifiedClassPathRunner.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/2c856124e17c1643add12c33603230390d4b5739/spring-boot-junit-runners%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fjunit%2Frunner%2Fclasspath%2FModifiedClassPathRunner.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-junit-runners%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fjunit%2Frunner%2Fclasspath%2FModifiedClassPathRunner.java?ref=2c856124e17c1643add12c33603230390d4b5739",
      "patch": "@@ -72,7 +72,7 @@ public ModifiedClassPathRunner(Class<?> testClass) throws InitializationError {\n \tprotected TestClass createTestClass(Class<?> testClass) {\n \t\ttry {\n \t\t\tClassLoader classLoader = createTestClassLoader(testClass);\n-\t\t\treturn new FilteredTestClass(classLoader, testClass.getName());\n+\t\t\treturn new ModifiedClassPathTestClass(classLoader, testClass.getName());\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(ex);\n@@ -81,9 +81,9 @@ protected TestClass createTestClass(Class<?> testClass) {\n \n \t@Override\n \tprotected Object createTest() throws Exception {\n-\t\tFilteredTestClass testClass = (FilteredTestClass) getTestClass();\n-\t\treturn testClass.doWithFilteredContextClassLoader(\n-\t\t\t\tnew FilteredTestClass.FilteredTcclAction<Object, Exception>() {\n+\t\tModifiedClassPathTestClass testClass = (ModifiedClassPathTestClass) getTestClass();\n+\t\treturn testClass.doWithModifiedClassPathThreadContextClassLoader(\n+\t\t\t\tnew ModifiedClassPathTestClass.ModifiedClassPathTcclAction<Object, Exception>() {\n \n \t\t\t\t\t@Override\n \t\t\t\t\tpublic Object perform() throws Exception {\n@@ -94,8 +94,9 @@ public Object perform() throws Exception {\n \n \tprivate URLClassLoader createTestClassLoader(Class<?> testClass) throws Exception {\n \t\tURLClassLoader classLoader = (URLClassLoader) this.getClass().getClassLoader();\n-\t\treturn new FilteredClassLoader(processUrls(extractUrls(classLoader), testClass),\n-\t\t\t\tclassLoader.getParent(), classLoader);\n+\t\treturn new ModifiedClassPathClassLoader(\n+\t\t\t\tprocessUrls(extractUrls(classLoader), testClass), classLoader.getParent(),\n+\t\t\t\tclassLoader);\n \t}\n \n \tprivate URL[] extractUrls(URLClassLoader classLoader) throws Exception {\n@@ -222,13 +223,13 @@ private boolean isExcluded(URL url) throws Exception {\n \t}\n \n \t/**\n-\t * Filtered version of JUnit's {@link TestClass}.\n+\t * Custom {@link TestClass} that uses a modified class path.\n \t */\n-\tprivate static final class FilteredTestClass extends TestClass {\n+\tprivate static final class ModifiedClassPathTestClass extends TestClass {\n \n \t\tprivate final ClassLoader classLoader;\n \n-\t\tFilteredTestClass(ClassLoader classLoader, String testClassName)\n+\t\tModifiedClassPathTestClass(ClassLoader classLoader, String testClassName)\n \t\t\t\tthrows ClassNotFoundException {\n \t\t\tsuper(classLoader.loadClass(testClassName));\n \t\t\tthis.classLoader = classLoader;\n@@ -259,13 +260,14 @@ private List<FrameworkMethod> wrapFrameworkMethods(\n \t\t\tList<FrameworkMethod> wrapped = new ArrayList<FrameworkMethod>(\n \t\t\t\t\tmethods.size());\n \t\t\tfor (FrameworkMethod frameworkMethod : methods) {\n-\t\t\t\twrapped.add(new FilteredFrameworkMethod(frameworkMethod.getMethod()));\n+\t\t\t\twrapped.add(new ModifiedClassPathFrameworkMethod(\n+\t\t\t\t\t\tframeworkMethod.getMethod()));\n \t\t\t}\n \t\t\treturn wrapped;\n \t\t}\n \n-\t\tprivate <T, E extends Throwable> T doWithFilteredContextClassLoader(\n-\t\t\t\tFilteredTcclAction<T, E> action) throws E {\n+\t\tprivate <T, E extends Throwable> T doWithModifiedClassPathThreadContextClassLoader(\n+\t\t\t\tModifiedClassPathTcclAction<T, E> action) throws E {\n \t\t\tClassLoader originalClassLoader = Thread.currentThread()\n \t\t\t\t\t.getContextClassLoader();\n \t\t\tThread.currentThread().setContextClassLoader(this.classLoader);\n@@ -278,33 +280,34 @@ private <T, E extends Throwable> T doWithFilteredContextClassLoader(\n \t\t}\n \n \t\t/**\n-\t\t * An action to be performed with the {@link FilteredClassLoader} set as the\n-\t\t * thread context class loader.\n+\t\t * An action to be performed with the {@link ModifiedClassPathClassLoader} set as\n+\t\t * the thread context class loader.\n \t\t */\n-\t\tprivate interface FilteredTcclAction<T, E extends Throwable> {\n+\t\tprivate interface ModifiedClassPathTcclAction<T, E extends Throwable> {\n \n \t\t\tT perform() throws E;\n \n \t\t}\n \n \t\t/**\n-\t\t * Filtered version of JUnit's {@link FrameworkMethod}.\n+\t\t * Custom {@link FrameworkMethod} that runs methods with\n+\t\t * {@link ModifiedClassPathClassLoader} as the thread context class loader.\n \t\t */\n-\t\tprivate final class FilteredFrameworkMethod extends FrameworkMethod {\n+\t\tprivate final class ModifiedClassPathFrameworkMethod extends FrameworkMethod {\n \n-\t\t\tprivate FilteredFrameworkMethod(Method method) {\n+\t\t\tprivate ModifiedClassPathFrameworkMethod(Method method) {\n \t\t\t\tsuper(method);\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic Object invokeExplosively(final Object target, final Object... params)\n \t\t\t\t\tthrows Throwable {\n-\t\t\t\treturn doWithFilteredContextClassLoader(\n-\t\t\t\t\t\tnew FilteredTcclAction<Object, Throwable>() {\n+\t\t\t\treturn doWithModifiedClassPathThreadContextClassLoader(\n+\t\t\t\t\t\tnew ModifiedClassPathTcclAction<Object, Throwable>() {\n \n \t\t\t\t\t\t\t@Override\n \t\t\t\t\t\t\tpublic Object perform() throws Throwable {\n-\t\t\t\t\t\t\t\treturn FilteredFrameworkMethod.super.invokeExplosively(\n+\t\t\t\t\t\t\t\treturn ModifiedClassPathFrameworkMethod.super.invokeExplosively(\n \t\t\t\t\t\t\t\t\t\ttarget, params);\n \t\t\t\t\t\t\t}\n \n@@ -315,11 +318,15 @@ public Object perform() throws Throwable {\n \n \t}\n \n-\tprivate static final class FilteredClassLoader extends URLClassLoader {\n+\t/**\n+\t * Custom {@link URLClassLoader} that modifies the class path.\n+\t */\n+\tprivate static final class ModifiedClassPathClassLoader extends URLClassLoader {\n \n \t\tprivate final ClassLoader junitLoader;\n \n-\t\tFilteredClassLoader(URL[] urls, ClassLoader parent, ClassLoader junitLoader) {\n+\t\tModifiedClassPathClassLoader(URL[] urls, ClassLoader parent,\n+\t\t\t\tClassLoader junitLoader) {\n \t\t\tsuper(urls, parent);\n \t\t\tthis.junitLoader = junitLoader;\n \t\t}",
      "parent_sha": "f4b119cb533c8f4dfc8b05abc881b4425fa96a77"
    }
  },
  {
    "oid": "f3bcf94fb0d66dfb65f3a4b951f36dddd8225da4",
    "message": "Refine validator cleanup logic\n\nRefine the validator memory optimization so that only directly created\nvalidators are nulled out. Also update the logic to ensure that\n`destroy` is also called.\n\nSee gh-4734",
    "date": "2015-12-10T19:43:29Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/f3bcf94fb0d66dfb65f3a4b951f36dddd8225da4",
    "details": {
      "sha": "c68acd7618d05d237c077b23c2bbbc8987fa34c2",
      "filename": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java",
      "status": "modified",
      "additions": 45,
      "deletions": 37,
      "changes": 82,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/f3bcf94fb0d66dfb65f3a4b951f36dddd8225da4/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2FConfigurationPropertiesBindingPostProcessor.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/f3bcf94fb0d66dfb65f3a4b951f36dddd8225da4/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2FConfigurationPropertiesBindingPostProcessor.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2FConfigurationPropertiesBindingPostProcessor.java?ref=f3bcf94fb0d66dfb65f3a4b951f36dddd8225da4",
      "patch": "@@ -90,9 +90,9 @@ public class ConfigurationPropertiesBindingPostProcessor\n \n \tprivate PropertySources propertySources;\n \n-\tprivate volatile Validator validator;\n+\tprivate Validator validator;\n \n-\tprivate boolean ownedValidator = false;\n+\tprivate volatile Validator localValidator;\n \n \tprivate ConversionService conversionService;\n \n@@ -195,7 +195,9 @@ public void afterPropertiesSet() throws Exception {\n \t\tif (this.propertySources == null) {\n \t\t\tthis.propertySources = deducePropertySources();\n \t\t}\n-\t\tinitializeValidator();\n+\t\tif (this.validator == null) {\n+\t\t\tthis.validator = getOptionalBean(VALIDATOR_BEAN_NAME, Validator.class);\n+\t\t}\n \t\tif (this.conversionService == null) {\n \t\t\tthis.conversionService = getOptionalBean(\n \t\t\t\t\tConfigurableApplicationContext.CONVERSION_SERVICE_BEAN_NAME,\n@@ -205,36 +207,24 @@ public void afterPropertiesSet() throws Exception {\n \n \t@Override\n \tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n-\t\tif (this.ownedValidator && this.validator != null && isJsr303Present()) {\n-\t\t\tthis.validator = null; // allow it to be garbage collected\n-\t\t}\n+\t\tfreeLocalValidator();\n \t}\n \n-\tprivate void initializeValidator() {\n-\t\tif (this.validator == null) {\n-\t\t\tthis.validator = getOptionalBean(VALIDATOR_BEAN_NAME, Validator.class);\n-\t\t\tif (this.validator == null && isJsr303Present()) {\n-\t\t\t\tthis.validator = new Jsr303ValidatorFactory()\n-\t\t\t\t\t\t.run(this.applicationContext);\n-\t\t\t\tthis.ownedValidator = true;\n-\t\t\t}\n-\t\t}\n+\t@Override\n+\tpublic void destroy() throws Exception {\n+\t\tfreeLocalValidator();\n \t}\n \n-\tprivate boolean isJsr303Present() {\n-\t\tfor (String validatorClass : VALIDATOR_CLASSES) {\n-\t\t\tif (!ClassUtils.isPresent(validatorClass,\n-\t\t\t\t\tthis.applicationContext.getClassLoader())) {\n-\t\t\t\treturn false;\n+\tprivate void freeLocalValidator() {\n+\t\ttry {\n+\t\t\tValidator validator = this.localValidator;\n+\t\t\tthis.localValidator = null;\n+\t\t\tif (validator != null) {\n+\t\t\t\t((DisposableBean) validator).destroy();\n \t\t\t}\n \t\t}\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic void destroy() throws Exception {\n-\t\tif (this.ownedValidator && this.validator != null) {\n-\t\t\t((DisposableBean) this.validator).destroy();\n+\t\tcatch (Exception ex) {\n+\t\t\tthrow new IllegalStateException(ex);\n \t\t}\n \t}\n \n@@ -244,13 +234,11 @@ private PropertySources deducePropertySources() {\n \t\t\t// Flatten the sources into a single list so they can be iterated\n \t\t\treturn new FlatPropertySources(configurer.getAppliedPropertySources());\n \t\t}\n-\n \t\tif (this.environment instanceof ConfigurableEnvironment) {\n \t\t\tMutablePropertySources propertySources = ((ConfigurableEnvironment) this.environment)\n \t\t\t\t\t.getPropertySources();\n \t\t\treturn new FlatPropertySources(propertySources);\n \t\t}\n-\n \t\t// empty, so not very useful, but fulfils the contract\n \t\treturn new MutablePropertySources();\n \t}\n@@ -353,16 +341,36 @@ private String getAnnotationDetails(ConfigurationProperties annotation) {\n \t}\n \n \tprivate Validator determineValidator(Object bean) {\n-\t\tinitializeValidator();\n-\t\tboolean globalValidatorSupportBean = (this.validator != null\n-\t\t\t\t&& this.validator.supports(bean.getClass()));\n+\t\tValidator validator = getValidator();\n+\t\tboolean supportsBean = (validator != null && validator.supports(bean.getClass()));\n \t\tif (ClassUtils.isAssignable(Validator.class, bean.getClass())) {\n-\t\t\tif (!globalValidatorSupportBean) {\n-\t\t\t\treturn (Validator) bean;\n+\t\t\tif (supportsBean) {\n+\t\t\t\treturn new ChainingValidator(validator, (Validator) bean);\n \t\t\t}\n-\t\t\treturn new ChainingValidator(this.validator, (Validator) bean);\n+\t\t\treturn (Validator) bean;\n \t\t}\n-\t\treturn (globalValidatorSupportBean ? this.validator : null);\n+\t\treturn (supportsBean ? validator : null);\n+\t}\n+\n+\tprivate Validator getValidator() {\n+\t\tif (this.validator != null) {\n+\t\t\treturn this.validator;\n+\t\t}\n+\t\tif (this.localValidator == null && isJsr303Present()) {\n+\t\t\tthis.localValidator = new LocalValidatorFactory()\n+\t\t\t\t\t.run(this.applicationContext);\n+\t\t}\n+\t\treturn this.localValidator;\n+\t}\n+\n+\tprivate boolean isJsr303Present() {\n+\t\tfor (String validatorClass : VALIDATOR_CLASSES) {\n+\t\t\tif (!ClassUtils.isPresent(validatorClass,\n+\t\t\t\t\tthis.applicationContext.getClassLoader())) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n \t}\n \n \tprivate PropertySources loadPropertySources(String[] locations,\n@@ -408,7 +416,7 @@ private ConversionService getDefaultConversionService() {\n \t * Factory to create JSR 303 LocalValidatorFactoryBean. Inner class to prevent class\n \t * loader issues.\n \t */\n-\tprivate static class Jsr303ValidatorFactory {\n+\tprivate static class LocalValidatorFactory {\n \n \t\tpublic Validator run(ApplicationContext applicationContext) {\n \t\t\tLocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();",
      "parent_sha": "bbbe4fdcd0855868c40f307b14738934d897db15"
    }
  },
  {
    "oid": "cb1eed42b84017f376cf8872662861ae45411510",
    "message": "Polish",
    "date": "2018-02-23T12:57:19Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/cb1eed42b84017f376cf8872662861ae45411510",
    "details": {
      "sha": "3ec4e829f63d19f847dc2fc543a97f5e7af7c07c",
      "filename": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementContextAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/cb1eed42b84017f376cf8872662861ae45411510/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fservlet%2FServletManagementContextAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/cb1eed42b84017f376cf8872662861ae45411510/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fservlet%2FServletManagementContextAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fservlet%2FServletManagementContextAutoConfiguration.java?ref=cb1eed42b84017f376cf8872662861ae45411510",
      "patch": "@@ -49,7 +49,7 @@ public ServletManagementContextFactory servletWebChildContextFactory() {\n \t@Bean\n \tpublic ManagementServletContext managementServletContext(\n \t\t\tWebEndpointProperties properties) {\n-\t\treturn () -> properties.getBasePath();\n+\t\treturn properties::getBasePath;\n \t}\n \n \t// Put Servlets and Filters in their own nested class so they don't force early",
      "parent_sha": "e1fd9df7b958e6a53661849e9a2d1d58fff24f7c"
    }
  },
  {
    "oid": "5111b03aa3e7510c8d321070702a0fa0d0a515c0",
    "message": "Remove duplicated method\n\nThis commit removes the beanNamesForAnnotationIncludingAncestors\nmethod as it is now part of Spring Framework's BeanFactoryUtils.\n\nCloses gh-10150",
    "date": "2017-09-05T07:51:33Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/5111b03aa3e7510c8d321070702a0fa0d0a515c0",
    "details": {
      "sha": "3f6af441ad044796c67d145d77558659bc598daf",
      "filename": "spring-boot/src/main/java/org/springframework/boot/endpoint/AnnotationEndpointDiscoverer.java",
      "status": "modified",
      "additions": 3,
      "deletions": 28,
      "changes": 31,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/5111b03aa3e7510c8d321070702a0fa0d0a515c0/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fendpoint%2FAnnotationEndpointDiscoverer.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/5111b03aa3e7510c8d321070702a0fa0d0a515c0/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fendpoint%2FAnnotationEndpointDiscoverer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fendpoint%2FAnnotationEndpointDiscoverer.java?ref=5111b03aa3e7510c8d321070702a0fa0d0a515c0",
      "patch": "@@ -19,7 +19,6 @@\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -29,16 +28,14 @@\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n-import org.springframework.beans.factory.HierarchicalBeanFactory;\n-import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.BeanFactoryUtils;\n import org.springframework.context.ApplicationContext;\n import org.springframework.core.MethodIntrospector;\n import org.springframework.core.annotation.AnnotatedElementUtils;\n import org.springframework.core.annotation.AnnotationAttributes;\n import org.springframework.util.Assert;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.ObjectUtils;\n-import org.springframework.util.StringUtils;\n \n /**\n  * A base {@link EndpointDiscoverer} implementation that discovers {@link Endpoint} beans\n@@ -92,7 +89,7 @@ protected Collection<EndpointInfoDescriptor<T, K>> discoverEndpoints(\n \t}\n \n \tprivate Map<Class<?>, EndpointInfo<T>> discoverEndpoints(EndpointExposure exposure) {\n-\t\tString[] beanNames = beanNamesForAnnotationIncludingAncestors(\n+\t\tString[] beanNames = BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(\n \t\t\t\tthis.applicationContext, Endpoint.class);\n \t\tMap<Class<?>, EndpointInfo<T>> endpoints = new LinkedHashMap<>();\n \t\tMap<String, EndpointInfo<T>> endpointsById = new LinkedHashMap<>();\n@@ -125,7 +122,7 @@ private Map<Class<?>, EndpointExtensionInfo<T>> discoverExtensions(\n \t\tif (extensionType == null) {\n \t\t\treturn Collections.emptyMap();\n \t\t}\n-\t\tString[] beanNames = beanNamesForAnnotationIncludingAncestors(\n+\t\tString[] beanNames = BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(\n \t\t\t\tthis.applicationContext, extensionType);\n \t\tMap<Class<?>, EndpointExtensionInfo<T>> extensions = new HashMap<>();\n \t\tfor (String beanName : beanNames) {\n@@ -154,28 +151,6 @@ private Map<Class<?>, EndpointExtensionInfo<T>> discoverExtensions(\n \n \t}\n \n-\tprivate static String[] beanNamesForAnnotationIncludingAncestors(\n-\t\t\tListableBeanFactory lbf, Class<? extends Annotation> annotationType) {\n-\t\tAssert.notNull(lbf, \"ListableBeanFactory must not be null\");\n-\t\tString[] result = lbf.getBeanNamesForAnnotation(annotationType);\n-\t\tif (lbf instanceof HierarchicalBeanFactory) {\n-\t\t\tHierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf;\n-\t\t\tif (hbf.getParentBeanFactory() instanceof ListableBeanFactory) {\n-\t\t\t\tString[] parentResult = beanNamesForAnnotationIncludingAncestors(\n-\t\t\t\t\t\t(ListableBeanFactory) hbf.getParentBeanFactory(), annotationType);\n-\t\t\t\tList<String> resultList = new ArrayList<>();\n-\t\t\t\tresultList.addAll(Arrays.asList(result));\n-\t\t\t\tfor (String beanName : parentResult) {\n-\t\t\t\t\tif (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) {\n-\t\t\t\t\t\tresultList.add(beanName);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tresult = StringUtils.toStringArray(resultList);\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n \tprivate EndpointInfo<T> getEndpointInfo(Map<Class<?>, EndpointInfo<T>> endpoints,\n \t\t\tClass<?> beanType, Class<?> endpointClass) {\n \t\tEndpointInfo<T> endpoint = endpoints.get(endpointClass);",
      "parent_sha": "2d79d63a9d553d98cefefeb3fc944341be2bce56"
    }
  },
  {
    "oid": "17902c9cec8ec045b02b1983c4776039e8b481f5",
    "message": "Remove unnecessary toString calls\n\nSee gh-39259",
    "date": "2024-01-23T17:07:00Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/17902c9cec8ec045b02b1983c4776039e8b481f5",
    "details": {
      "sha": "8643e81a54c8ba58e63bbed725a9542bf6795d31",
      "filename": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/StaticResourceJarsTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/17902c9cec8ec045b02b1983c4776039e8b481f5/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Fservlet%2Fserver%2FStaticResourceJarsTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/17902c9cec8ec045b02b1983c4776039e8b481f5/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Fservlet%2Fserver%2FStaticResourceJarsTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Fservlet%2Fserver%2FStaticResourceJarsTests.java?ref=17902c9cec8ec045b02b1983c4776039e8b481f5",
      "patch": "@@ -95,7 +95,7 @@ void ignoreWildcardUrls() throws Exception {\n \tvoid doesNotCloseJarFromCachedConnection() throws Exception {\n \t\tFile jarFile = createResourcesJar(\"test-resources.jar\");\n \t\tTrackedURLStreamHandler handler = new TrackedURLStreamHandler(true);\n-\t\tURL url = new URL(\"jar\", null, 0, jarFile.toURI().toURL().toString() + \"!/\", handler);\n+\t\tURL url = new URL(\"jar\", null, 0, jarFile.toURI().toURL() + \"!/\", handler);\n \t\ttry {\n \t\t\tnew StaticResourceJars().getUrlsFrom(url);\n \t\t\tassertThatNoException()\n@@ -110,7 +110,7 @@ void doesNotCloseJarFromCachedConnection() throws Exception {\n \tvoid closesJarFromNonCachedConnection() throws Exception {\n \t\tFile jarFile = createResourcesJar(\"test-resources.jar\");\n \t\tTrackedURLStreamHandler handler = new TrackedURLStreamHandler(false);\n-\t\tURL url = new URL(\"jar\", null, 0, jarFile.toURI().toURL().toString() + \"!/\", handler);\n+\t\tURL url = new URL(\"jar\", null, 0, jarFile.toURI().toURL() + \"!/\", handler);\n \t\tnew StaticResourceJars().getUrlsFrom(url);\n \t\tassertThatIllegalStateException()\n \t\t\t.isThrownBy(() -> ((JarURLConnection) handler.getConnection()).getJarFile().getComment())",
      "parent_sha": "a31319caaa025ba364af83990eccf2ed227f0e02"
    }
  },
  {
    "oid": "08768b58210b2839f7f6978351cd2873329eb453",
    "message": "Join compile classpath using system-dependent separator\n\nSee gh-30525",
    "date": "2022-05-16T11:37:30Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/08768b58210b2839f7f6978351cd2873329eb453",
    "details": {
      "sha": "6864f6668f7d8a7826629b75cce2af79b3e2d10e",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AotGenerateMojo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/08768b58210b2839f7f6978351cd2873329eb453/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-maven-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fmaven%2FAotGenerateMojo.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/08768b58210b2839f7f6978351cd2873329eb453/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-maven-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fmaven%2FAotGenerateMojo.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-maven-plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fmaven%2FAotGenerateMojo.java?ref=08768b58210b2839f7f6978351cd2873329eb453",
      "patch": "@@ -155,8 +155,8 @@ private void compileSourceFiles(URL[] classpathUrls) throws IOException {\n \t\tJavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n \t\ttry (StandardJavaFileManager fm = compiler.getStandardFileManager(null, null, null)) {\n \t\t\tList<String> options = List.of(\"-cp\",\n-\t\t\t\t\tArrays.stream(classpathUrls).map(URL::toString).collect(Collectors.joining(\":\")), \"-d\",\n-\t\t\t\t\tthis.classesDirectory.toPath().toAbsolutePath().toString());\n+\t\t\t\t\tArrays.stream(classpathUrls).map(URL::toString).collect(Collectors.joining(File.pathSeparator)),\n+\t\t\t\t\t\"-d\", this.classesDirectory.toPath().toAbsolutePath().toString());\n \t\t\tIterable<? extends JavaFileObject> compilationUnits = fm.getJavaFileObjectsFromPaths(sourceFiles);\n \t\t\tErrors errors = new Errors();\n \t\t\tCompilationTask task = compiler.getTask(null, fm, errors, options, null, compilationUnits);",
      "parent_sha": "6c01b341fa5282ecd1424d58e54541666d2ced9c"
    }
  },
  {
    "oid": "7c942679ad85f254acaa0318cf07753c65a21716",
    "message": "Polish 'Switch ImportsContextCustomizer to use MergedAnnotations.search'\n\nSee gh-36211",
    "date": "2023-07-04T13:05:48Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/7c942679ad85f254acaa0318cf07753c65a21716",
    "details": {
      "sha": "ca5786240bbee691549bccbf84b54d87d66de1fe",
      "filename": "spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/ImportsContextCustomizer.java",
      "status": "modified",
      "additions": 36,
      "deletions": 41,
      "changes": 77,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/7c942679ad85f254acaa0318cf07753c65a21716/spring-boot-project%2Fspring-boot-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fcontext%2FImportsContextCustomizer.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/7c942679ad85f254acaa0318cf07753c65a21716/spring-boot-project%2Fspring-boot-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fcontext%2FImportsContextCustomizer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fcontext%2FImportsContextCustomizer.java?ref=7c942679ad85f254acaa0318cf07753c65a21716",
      "patch": "@@ -18,10 +18,9 @@\n \n import java.lang.reflect.Constructor;\n import java.util.Collections;\n-import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n@@ -41,7 +40,6 @@\n import org.springframework.context.annotation.ImportSelector;\n import org.springframework.context.support.AbstractApplicationContext;\n import org.springframework.core.Ordered;\n-import org.springframework.core.annotation.AnnotatedElementUtils;\n import org.springframework.core.annotation.AnnotationFilter;\n import org.springframework.core.annotation.MergedAnnotation;\n import org.springframework.core.annotation.MergedAnnotations;\n@@ -52,14 +50,13 @@\n import org.springframework.test.context.MergedContextConfiguration;\n import org.springframework.util.ReflectionUtils;\n \n-import static org.springframework.core.annotation.AnnotationFilter.packages;\n-\n /**\n  * {@link ContextCustomizer} to allow {@code @Import} annotations to be used directly on\n  * test classes.\n  *\n  * @author Phillip Webb\n  * @author Andy Wilkinson\n+ * @author Laurent Martelli\n  * @see ImportsContextCustomizerFactory\n  */\n class ImportsContextCustomizer implements ContextCustomizer {\n@@ -218,41 +215,43 @@ public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) t\n \t */\n \tstatic class ContextCustomizerKey {\n \n-\t\tprivate static final AnnotationFilter ANNOTATION_FILTERS = or(packages(\"java.lang.annotation\"),\n-\t\t\t\tpackages(\"org.spockframework\", \"spock\"),\n-\t\t\t\tor(isEqualTo(\"kotlin.Metadata\"), packages(\"kotlin.annotation\")), packages((\"org.junit\")));\n-\n-\t\tprivate final Object key;\n+\t\tprivate static final Set<AnnotationFilter> ANNOTATION_FILTERS;\n+\t\tstatic {\n+\t\t\tSet<AnnotationFilter> annotationFilters = new LinkedHashSet<>();\n+\t\t\tannotationFilters.add(AnnotationFilter.PLAIN);\n+\t\t\tannotationFilters.add(\"kotlin.Metadata\"::equals);\n+\t\t\tannotationFilters.add(AnnotationFilter.packages(\"kotlin.annotation\"));\n+\t\t\tannotationFilters.add(AnnotationFilter.packages(\"org.spockframework\", \"spock\"));\n+\t\t\tannotationFilters.add(AnnotationFilter.packages(\"org.junit\"));\n+\t\t\tANNOTATION_FILTERS = Collections.unmodifiableSet(annotationFilters);\n+\t\t}\n+\t\tprivate final Set<Object> key;\n \n \t\tContextCustomizerKey(Class<?> testClass) {\n-\t\t\tMergedAnnotations mergedAnnotations = MergedAnnotations\n-\t\t\t\t.search(MergedAnnotations.SearchStrategy.TYPE_HIERARCHY)\n-\t\t\t\t.withAnnotationFilter(ANNOTATION_FILTERS)\n+\t\t\tMergedAnnotations annotations = MergedAnnotations.search(MergedAnnotations.SearchStrategy.TYPE_HIERARCHY)\n+\t\t\t\t.withAnnotationFilter(this::isFilteredAnnotation)\n \t\t\t\t.from(testClass);\n-\t\t\tSet<Object> determinedImports = determineImports(mergedAnnotations, testClass);\n-\t\t\tif (determinedImports != null) {\n-\t\t\t\tthis.key = determinedImports;\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tthis.key = AnnotatedElementUtils.findAllMergedAnnotations(testClass,\n-\t\t\t\t\t\tmergedAnnotations.stream().map(MergedAnnotation::getType).collect(Collectors.toSet()));\n-\t\t\t}\n+\t\t\tSet<Object> determinedImports = determineImports(annotations, testClass);\n+\t\t\tthis.key = (determinedImports != null) ? determinedImports : synthesize(annotations);\n+\t\t}\n+\n+\t\tprivate boolean isFilteredAnnotation(String typeName) {\n+\t\t\treturn ANNOTATION_FILTERS.stream().anyMatch((filter) -> filter.matches(typeName));\n \t\t}\n \n-\t\tprivate Set<Object> determineImports(MergedAnnotations mergedAnnotations, Class<?> testClass) {\n-\t\t\tAnnotationMetadata testClassMetadata = AnnotationMetadata.introspect(testClass);\n-\t\t\treturn mergedAnnotations.stream(Import.class)\n-\t\t\t\t.flatMap((ma) -> Stream.of(ma.getClassArray(\"value\")))\n-\t\t\t\t.map((source) -> determineImports(source, testClassMetadata))\n-\t\t\t\t.reduce(new HashSet<>(), (a, b) -> {\n-\t\t\t\t\tif (a == null || b == null) {\n+\t\tprivate Set<Object> determineImports(MergedAnnotations annotations, Class<?> testClass) {\n+\t\t\tSet<Object> determinedImports = new LinkedHashSet<>();\n+\t\t\tAnnotationMetadata metadata = AnnotationMetadata.introspect(testClass);\n+\t\t\tfor (MergedAnnotation<Import> annotation : annotations.stream(Import.class).toList()) {\n+\t\t\t\tfor (Class<?> source : annotation.getClassArray(MergedAnnotation.VALUE)) {\n+\t\t\t\t\tSet<Object> determinedSourceImports = determineImports(source, metadata);\n+\t\t\t\t\tif (determinedSourceImports == null) {\n \t\t\t\t\t\treturn null;\n \t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\ta.add(b);\n-\t\t\t\t\t\treturn a;\n-\t\t\t\t\t}\n-\t\t\t\t});\n+\t\t\t\t\tdeterminedImports.addAll(determinedSourceImports);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn determinedImports;\n \t\t}\n \n \t\tprivate Set<Object> determineImports(Class<?> source, AnnotationMetadata metadata) {\n@@ -270,6 +269,10 @@ private Set<Object> determineImports(Class<?> source, AnnotationMetadata metadat\n \t\t\treturn Collections.singleton(source.getName());\n \t\t}\n \n+\t\tprivate Set<Object> synthesize(MergedAnnotations annotations) {\n+\t\t\treturn annotations.stream().map(MergedAnnotation::synthesize).collect(Collectors.toSet());\n+\t\t}\n+\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tprivate <T> T instantiate(Class<T> source) {\n \t\t\ttry {\n@@ -300,12 +303,4 @@ public String toString() {\n \n \t}\n \n-\tstatic AnnotationFilter or(AnnotationFilter... filters) {\n-\t\treturn typeName -> Stream.of(filters).anyMatch(filter -> filter.matches(typeName));\n-\t}\n-\n-\tstatic AnnotationFilter isEqualTo(String expectedTypeName) {\n-\t\treturn typeName -> typeName.equals(expectedTypeName);\n-\t}\n-\n }",
      "parent_sha": "4562189125d2894e27aaac122591aac44f2ef1bb"
    }
  },
  {
    "oid": "e89063cc073de91f29c733fdffb22517201f33b6",
    "message": "Close connection after use in LiquibaseEndpoint\n\nUpdate LiquibaseEndpoint so that connections are closed and returned to\nthe pool after use.\n\nFixes gh-6118",
    "date": "2016-06-11T04:03:15Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/e89063cc073de91f29c733fdffb22517201f33b6",
    "details": {
      "sha": "132567fb6ddacf352e0d57747fc8b1d528cfeded",
      "filename": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/e89063cc073de91f29c733fdffb22517201f33b6/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2FLiquibaseEndpoint.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/e89063cc073de91f29c733fdffb22517201f33b6/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2FLiquibaseEndpoint.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2FLiquibaseEndpoint.java?ref=e89063cc073de91f29c733fdffb22517201f33b6",
      "patch": "@@ -54,8 +54,13 @@ public LiquibaseEndpoint(SpringLiquibase liquibase) {\n \t\t\tDatabaseFactory factory = DatabaseFactory.getInstance();\n \t\t\tDataSource dataSource = this.liquibase.getDataSource();\n \t\t\tJdbcConnection connection = new JdbcConnection(dataSource.getConnection());\n-\t\t\tDatabase database = factory.findCorrectDatabaseImplementation(connection);\n-\t\t\treturn service.queryDatabaseChangeLogTable(database);\n+\t\t\ttry {\n+\t\t\t\tDatabase database = factory.findCorrectDatabaseImplementation(connection);\n+\t\t\t\treturn service.queryDatabaseChangeLogTable(database);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(\"Unable to get Liquibase changelog\", ex);",
      "parent_sha": "452281ca8d200c61b2ca35054658a9961d77b9ba"
    }
  },
  {
    "oid": "58fc3373157b64bd32698442457dad6eeae880bd",
    "message": "Polish",
    "date": "2019-10-02T21:30:49Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/58fc3373157b64bd32698442457dad6eeae880bd",
    "details": {
      "sha": "00fb040d7d32c99720748c06d0dfa4beba624c06",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/58fc3373157b64bd32698442457dad6eeae880bd/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2FConfigurationProperties.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/58fc3373157b64bd32698442457dad6eeae880bd/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2FConfigurationProperties.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2FConfigurationProperties.java?ref=58fc3373157b64bd32698442457dad6eeae880bd",
      "patch": "@@ -29,7 +29,7 @@\n  * {@code @Bean} method in a {@code @Configuration} class if you want to bind and validate\n  * some external Properties (e.g. from a .properties file).\n  * <p>\n- * Binding can is either performed by calling setters on the annotated class or, if\n+ * Binding is either performed by calling setters on the annotated class or, if\n  * {@link ConstructorBinding @ConstructorBinding} is in use, by binding to the constructor\n  * parameters.\n  * <p>",
      "parent_sha": "fd721575f01b655e286473a1fc9e9dc4842cef81"
    }
  },
  {
    "oid": "8322dda8cc06e34b5239f8343fbda9214cf0f655",
    "message": "Fix variant selection in spring-boot-maven-plugin\n\nSee gh-28877",
    "date": "2021-12-01T12:16:14Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/8322dda8cc06e34b5239f8343fbda9214cf0f655",
    "details": {
      "sha": "18fcffb4932ede2d85885aad7032c53159db0d9f",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/mavenplugin/MavenPluginPlugin.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/8322dda8cc06e34b5239f8343fbda9214cf0f655/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fmavenplugin%2FMavenPluginPlugin.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/8322dda8cc06e34b5239f8343fbda9214cf0f655/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fmavenplugin%2FMavenPluginPlugin.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fmavenplugin%2FMavenPluginPlugin.java?ref=8322dda8cc06e34b5239f8343fbda9214cf0f655",
      "patch": "@@ -38,6 +38,7 @@\n import org.gradle.api.artifacts.component.ModuleComponentIdentifier;\n import org.gradle.api.artifacts.result.ResolvedArtifactResult;\n import org.gradle.api.attributes.DocsType;\n+import org.gradle.api.attributes.Usage;\n import org.gradle.api.file.CopySpec;\n import org.gradle.api.file.DirectoryProperty;\n import org.gradle.api.model.ObjectFactory;\n@@ -296,13 +297,16 @@ public MavenRepositoryComponentMetadataRule(ObjectFactory objects) {\n \t\tpublic void execute(ComponentMetadataContext context) {\n \t\t\tcontext.getDetails().maybeAddVariant(\"compileWithMetadata\", \"compile\",\n \t\t\t\t\t(variant) -> configureVariant(context, variant));\n-\t\t\tcontext.getDetails().maybeAddVariant(\"runtimeElementsWithMetadata\", \"runtimeElements\",\n+\t\t\tcontext.getDetails().maybeAddVariant(\"apiElementsWithMetadata\", \"apiElements\",\n \t\t\t\t\t(variant) -> configureVariant(context, variant));\n \t\t}\n \n \t\tprivate void configureVariant(ComponentMetadataContext context, VariantMetadata variant) {\n-\t\t\tvariant.attributes((attributes) -> attributes.attribute(DocsType.DOCS_TYPE_ATTRIBUTE,\n-\t\t\t\t\tthis.objects.named(DocsType.class, \"maven-repository\")));\n+\t\t\tvariant.attributes((attributes) -> {\n+\t\t\t\tattributes.attribute(DocsType.DOCS_TYPE_ATTRIBUTE,\n+\t\t\t\t\t\tthis.objects.named(DocsType.class, \"maven-repository\"));\n+\t\t\t\tattributes.attribute(Usage.USAGE_ATTRIBUTE, this.objects.named(Usage.class, \"maven-repository\"));\n+\t\t\t});\n \t\t\tvariant.withFiles((files) -> {\n \t\t\t\tModuleVersionIdentifier id = context.getDetails().getId();\n \t\t\t\tfiles.addFile(id.getName() + \"-\" + id.getVersion() + \".pom\");",
      "parent_sha": "25bdc097a0bd8b3fdb190687ec4d2fe9ca4b2eae"
    }
  },
  {
    "oid": "1d900f67e70572f7b66eca3f6f576ae92c052043",
    "message": "FilteringSpringBootCondition uses Class.forName instead of classLoader\n\nSee gh-19490",
    "date": "2019-12-31T08:42:06Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/1d900f67e70572f7b66eca3f6f576ae92c052043",
    "details": {
      "sha": "f470245267c70eaae4615968bda094f10961aed7",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/FilteringSpringBootCondition.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/1d900f67e70572f7b66eca3f6f576ae92c052043/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcondition%2FFilteringSpringBootCondition.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/1d900f67e70572f7b66eca3f6f576ae92c052043/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcondition%2FFilteringSpringBootCondition.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcondition%2FFilteringSpringBootCondition.java?ref=1d900f67e70572f7b66eca3f6f576ae92c052043",
      "patch": "@@ -105,7 +105,7 @@ protected final List<String> filter(Collection<String> classNames, ClassNameFilt\n \t */\n \tprotected static Class<?> resolve(String className, ClassLoader classLoader) throws ClassNotFoundException {\n \t\tif (classLoader != null) {\n-\t\t\treturn classLoader.loadClass(className);\n+\t\t\treturn Class.forName(className, false, classLoader);\n \t\t}\n \t\treturn Class.forName(className);\n \t}",
      "parent_sha": "61ae4fbc0439667c2d88463e21bbcfb2bda7ec78"
    }
  },
  {
    "oid": "2ff2d52509da0047a832c9de6c68d61ab9fe086f",
    "message": "Ignore irrelevant changes to StarterMetadata's dependencies\n\nCloses gh-21594",
    "date": "2020-05-27T19:21:08Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/2ff2d52509da0047a832c9de6c68d61ab9fe086f",
    "details": {
      "sha": "48370dfed2675ba5cbf6beec7fae37762236a54e",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/starters/StarterMetadata.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/2ff2d52509da0047a832c9de6c68d61ab9fe086f/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fstarters%2FStarterMetadata.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/2ff2d52509da0047a832c9de6c68d61ab9fe086f/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fstarters%2FStarterMetadata.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fstarters%2FStarterMetadata.java?ref=2ff2d52509da0047a832c9de6c68d61ab9fe086f",
      "patch": "@@ -28,7 +28,7 @@\n import org.gradle.api.artifacts.ResolvedArtifact;\n import org.gradle.api.file.FileCollection;\n import org.gradle.api.internal.AbstractTask;\n-import org.gradle.api.tasks.InputFiles;\n+import org.gradle.api.tasks.Classpath;\n import org.gradle.api.tasks.OutputFile;\n import org.gradle.api.tasks.TaskAction;\n \n@@ -50,7 +50,7 @@ public StarterMetadata() {\n \t\tgetInputs().property(\"description\", (Callable<String>) () -> getProject().getDescription());\n \t}\n \n-\t@InputFiles\n+\t@Classpath\n \tpublic FileCollection getDependencies() {\n \t\treturn this.dependencies;\n \t}",
      "parent_sha": "b50b00d6297672b3d424a0b04c954cf31bede4fa"
    }
  },
  {
    "oid": "8d75aa0ea946d94c0f4a57503bec86c741483e35",
    "message": "Fix Oracle XA datasource class name\n\nCloses gh-3846",
    "date": "2015-09-02T14:44:29Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/8d75aa0ea946d94c0f4a57503bec86c741483e35",
    "details": {
      "sha": "455e6fdfbe4725e2bbde2c4bcdf6370157888dec",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/8d75aa0ea946d94c0f4a57503bec86c741483e35/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fjdbc%2FDatabaseDriver.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/8d75aa0ea946d94c0f4a57503bec86c741483e35/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fjdbc%2FDatabaseDriver.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fjdbc%2FDatabaseDriver.java?ref=8d75aa0ea946d94c0f4a57503bec86c741483e35",
      "patch": "@@ -71,7 +71,7 @@ enum DatabaseDriver {\n \t/**\n \t * Oracle\n \t */\n-\tORACLE(\"oracle.jdbc.OracleDriver\", \"oracle.jdbc.xa.OracleXADataSource\"),\n+\tORACLE(\"oracle.jdbc.OracleDriver\", \"oracle.jdbc.xa.client.OracleXADataSource\"),\n \n \t/**\n \t * Postres",
      "parent_sha": "5043c959a26fff62f4047076099d71ace86dedb9"
    }
  },
  {
    "oid": "c154a014a1d7149aaf3b6902cccc146895eb51dc",
    "message": "Remove invalid example of spring.mvc.async.request-timout property\n\nSee gh-19057",
    "date": "2019-11-21T13:13:22Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/c154a014a1d7149aaf3b6902cccc146895eb51dc",
    "details": {
      "sha": "d81b67c31d4ba1c672f10d56c16302e2f624b529",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/c154a014a1d7149aaf3b6902cccc146895eb51dc/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2FWebMvcProperties.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/c154a014a1d7149aaf3b6902cccc146895eb51dc/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2FWebMvcProperties.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2FWebMvcProperties.java?ref=c154a014a1d7149aaf3b6902cccc146895eb51dc",
      "patch": "@@ -207,8 +207,7 @@ public static class Async {\n \n \t\t/**\n \t\t * Amount of time before asynchronous request handling times out. If this value is\n-\t\t * not set, the default timeout of the underlying implementation is used, e.g. 10\n-\t\t * seconds on Tomcat with Servlet 3.\n+\t\t * not set, the default timeout of the underlying implementation is used.\n \t\t */\n \t\tprivate Duration requestTimeout;\n ",
      "parent_sha": "c2221b9f1879cae6d415eb93d875476a0e96f334"
    }
  },
  {
    "oid": "b7499222b87e493e3ce480fab79913ea9d7982ba",
    "message": "Fix possible NPE when moving to snapshots\n\nSee gh-43045",
    "date": "2025-02-08T10:09:38Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/b7499222b87e493e3ce480fab79913ea9d7982ba",
    "details": {
      "sha": "f5f885be8d155bd46ac28126893926310149fe66",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/bom/bomr/MoveToSnapshots.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/b7499222b87e493e3ce480fab79913ea9d7982ba/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2FMoveToSnapshots.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/b7499222b87e493e3ce480fab79913ea9d7982ba/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2FMoveToSnapshots.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2FMoveToSnapshots.java?ref=b7499222b87e493e3ce480fab79913ea9d7982ba",
      "patch": "@@ -92,19 +92,21 @@ private BiFunction<Library, DependencyVersion, VersionOption> createOpenSourceVe\n \t\t\tVersionOption versionOption = resolver.apply(library, dependencyVersion);\n \t\t\tif (versionOption != null) {\n \t\t\t\tList<Release> releases = scheduledReleases.get(library.getCalendarName());\n-\t\t\t\tList<Release> matches = releases.stream()\n-\t\t\t\t\t.filter((release) -> dependencyVersion.isSnapshotFor(release.getVersion()))\n-\t\t\t\t\t.toList();\n-\t\t\t\tif (matches.isEmpty()) {\n-\t\t\t\t\tif (logger.isInfoEnabled()) {\n-\t\t\t\t\t\tlogger.info(\"Ignoring {}. No release of {} scheduled before {}\", dependencyVersion,\n-\t\t\t\t\t\t\t\tlibrary.getName(), milestone.getDueOn());\n+\t\t\t\tif (releases != null) {\n+\t\t\t\t\tList<Release> matches = releases.stream()\n+\t\t\t\t\t\t.filter((release) -> dependencyVersion.isSnapshotFor(release.getVersion()))\n+\t\t\t\t\t\t.toList();\n+\t\t\t\t\tif (!matches.isEmpty()) {\n+\t\t\t\t\t\treturn new VersionOption.SnapshotVersionOption(versionOption.getVersion(),\n+\t\t\t\t\t\t\t\tmatches.get(0).getVersion());\n \t\t\t\t\t}\n-\t\t\t\t\treturn null;\n \t\t\t\t}\n-\t\t\t\treturn new VersionOption.SnapshotVersionOption(versionOption.getVersion(), matches.get(0).getVersion());\n+\t\t\t\tif (logger.isInfoEnabled()) {\n+\t\t\t\t\tlogger.info(\"Ignoring {}. No release of {} scheduled before {}\", dependencyVersion,\n+\t\t\t\t\t\t\tlibrary.getName(), milestone.getDueOn());\n+\t\t\t\t}\n \t\t\t}\n-\t\t\treturn versionOption;\n+\t\t\treturn null;\n \t\t};\n \t}\n ",
      "parent_sha": "e40a7686cdad99b4bc803f04a6f2af8d1395cafe"
    }
  },
  {
    "oid": "69320180d9d33ad682232c11f901671ef8da05b3",
    "message": "Make FileSystemWatcherTests.waitsForPollingInterval more robust\n\nThe intent of the test is to:\n\n1. Make a change\n2. Sleep for long enough for that change to be picked up\n3. Make another change\n4. Stop that watcher after 1 further scan has been performed\n5. Assert that a further scan was performed by checking that two\n   separate sets of changes (step 1 and step 3) have been picked up\n\nPreviously, step 2 relied on simply sleeping for a period of time\nlonger than the polling interval. In reality, the polling interval\nis only a minimum time between scans and the actual time between them\ndepends on thread scheduling, GC pauses, etc. This lead to the\ntest failing intermittently if the scan didn't happen in a timely\nmanner.\n\nThis commit removes the sleep and replaces it with a while loop that\nwaits for first change to be picked up. This ensures that the second\nchange will be detected separately from the first and that two\nseparate change sets should always be available once the watcher has\nstopped.\n\nSee gh-7782",
    "date": "2017-01-17T10:30:47Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/69320180d9d33ad682232c11f901671ef8da05b3",
    "details": {
      "sha": "a39f2a3a8f0ae1d6f61c1e762a861f9117890c60",
      "filename": "spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/69320180d9d33ad682232c11f901671ef8da05b3/spring-boot-devtools%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdevtools%2Ffilewatch%2FFileSystemWatcherTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/69320180d9d33ad682232c11f901671ef8da05b3/spring-boot-devtools%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdevtools%2Ffilewatch%2FFileSystemWatcherTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-devtools%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdevtools%2Ffilewatch%2FFileSystemWatcherTests.java?ref=69320180d9d33ad682232c11f901671ef8da05b3",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -155,10 +155,12 @@ public void addNestedFile() throws Exception {\n \n \t@Test\n \tpublic void waitsForPollingInterval() throws Exception {\n-\t\tsetupWatcher(100, 1);\n+\t\tsetupWatcher(10, 1);\n \t\tFile folder = startWithNewFolder();\n \t\ttouch(new File(folder, \"test1.txt\"));\n-\t\tThread.sleep(200);\n+\t\twhile (this.changes.size() != 1) {\n+\t\t\tThread.sleep(10);\n+\t\t}\n \t\ttouch(new File(folder, \"test2.txt\"));\n \t\tthis.watcher.stopAfter(1);\n \t\tassertThat(this.changes.size()).isEqualTo(2);",
      "parent_sha": "7c2664f9591262b43468ae168a391e381f51f1c5"
    }
  },
  {
    "oid": "7d1cc78d6bb2e4cdbdb1396e0622c1017fe22e05",
    "message": "Retry on failed plainWar test\n\nAdd retry logic for plainWar in an attempt to deal with flaky Tomcat\ndownloads.",
    "date": "2024-11-15T22:24:32Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/7d1cc78d6bb2e4cdbdb1396e0622c1017fe22e05",
    "details": {
      "sha": "fc180caed1af957c079a9e84eab670876a361bb5",
      "filename": "spring-boot-system-tests/spring-boot-image-tests/src/systemTest/java/org/springframework/boot/image/paketo/PaketoBuilderTests.java",
      "status": "modified",
      "additions": 26,
      "deletions": 1,
      "changes": 27,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/7d1cc78d6bb2e4cdbdb1396e0622c1017fe22e05/spring-boot-system-tests%2Fspring-boot-image-tests%2Fsrc%2FsystemTest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fimage%2Fpaketo%2FPaketoBuilderTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/7d1cc78d6bb2e4cdbdb1396e0622c1017fe22e05/spring-boot-system-tests%2Fspring-boot-image-tests%2Fsrc%2FsystemTest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fimage%2Fpaketo%2FPaketoBuilderTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-system-tests%2Fspring-boot-image-tests%2Fsrc%2FsystemTest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fimage%2Fpaketo%2FPaketoBuilderTests.java?ref=7d1cc78d6bb2e4cdbdb1396e0622c1017fe22e05",
      "patch": "@@ -20,6 +20,7 @@\n import java.io.FileWriter;\n import java.io.IOException;\n import java.io.PrintWriter;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.function.Consumer;\n@@ -262,7 +263,7 @@ void plainWarApp() throws Exception {\n \t\twriteServletInitializerClass();\n \t\tString imageName = \"paketo-integration/\" + this.gradleBuild.getProjectDir().getName();\n \t\tImageReference imageReference = ImageReference.of(ImageName.of(imageName));\n-\t\tBuildResult result = buildImage(imageName);\n+\t\tBuildResult result = buildImageWithRetry(imageName);\n \t\tassertThat(result.task(\":bootBuildImage\").getOutcome()).isEqualTo(TaskOutcome.SUCCESS);\n \t\ttry (GenericContainer<?> container = new GenericContainer<>(imageName)) {\n \t\t\tcontainer.withExposedPorts(8080);\n@@ -336,6 +337,30 @@ void nativeApp() throws Exception {\n \t\t}\n \t}\n \n+\tprivate BuildResult buildImageWithRetry(String imageName, String... arguments) {\n+\t\tlong start = System.nanoTime();\n+\t\twhile (true) {\n+\t\t\ttry {\n+\t\t\t\treturn buildImage(imageName, arguments);\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tif (Duration.ofNanos(System.nanoTime() - start).toMinutes() > 6) {\n+\t\t\t\t\tthrow ex;\n+\t\t\t\t}\n+\t\t\t\tsleep(500);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void sleep(long time) {\n+\t\ttry {\n+\t\t\tThread.sleep(time);\n+\t\t}\n+\t\tcatch (InterruptedException ex) {\n+\t\t\tThread.currentThread().interrupt();\n+\t\t}\n+\t}\n+\n \tprivate BuildResult buildImage(String imageName, String... arguments) {\n \t\tString[] buildImageArgs = { \"bootBuildImage\", \"--imageName=\" + imageName, \"--pullPolicy=IF_NOT_PRESENT\" };\n \t\tString[] args = StringUtils.concatenateStringArrays(arguments, buildImageArgs);",
      "parent_sha": "a20cc3d4e6c92c08f2e4b257778a48faff4958d7"
    }
  },
  {
    "oid": "7ed4273fc33ab625ee0e289fb817003bb07f23e1",
    "message": "Fix Redis Cache tests after key prefix changes\n\nUpdate Redis Cache tests after changes in DATAREDIS-715.",
    "date": "2018-02-16T13:43:45Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/7ed4273fc33ab625ee0e289fb817003bb07f23e1",
    "details": {
      "sha": "14fe38176c71d2ef9a5e1e039c7a30a25b83cf24",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/7ed4273fc33ab625ee0e289fb817003bb07f23e1/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcache%2FCacheAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/7ed4273fc33ab625ee0e289fb817003bb07f23e1/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcache%2FCacheAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcache%2FCacheAutoConfigurationTests.java?ref=7ed4273fc33ab625ee0e289fb817003bb07f23e1",
      "patch": "@@ -283,8 +283,8 @@ public void redisCacheExplicit() {\n \t\t\t\t.withPropertyValues(\"spring.cache.type=redis\",\n \t\t\t\t\t\t\"spring.cache.redis.time-to-live=15000\",\n \t\t\t\t\t\t\"spring.cache.redis.cacheNullValues=false\",\n-\t\t\t\t\t\t\"spring.cache.redis.keyPrefix=foo\",\n-\t\t\t\t\t\t\"spring.cache.redis.useKeyPrefix=false\")\n+\t\t\t\t\t\t\"spring.cache.redis.keyPrefix=prefix\",\n+\t\t\t\t\t\t\"spring.cache.redis.useKeyPrefix=true\")\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tRedisCacheManager cacheManager = getCacheManager(context,\n \t\t\t\t\t\t\tRedisCacheManager.class);\n@@ -295,8 +295,8 @@ public void redisCacheExplicit() {\n \t\t\t\t\t\t\t.isEqualTo(java.time.Duration.ofSeconds(15));\n \t\t\t\t\tassertThat(redisCacheConfiguration.getAllowCacheNullValues())\n \t\t\t\t\t\t\t.isFalse();\n-\t\t\t\t\tassertThat(redisCacheConfiguration.getKeyPrefix()).contains(\"foo\");\n-\t\t\t\t\tassertThat(redisCacheConfiguration.usePrefix()).isFalse();\n+\t\t\t\t\tassertThat(redisCacheConfiguration.getKeyPrefixFor(\"keyName\")).isEqualTo(\"prefix\");\n+\t\t\t\t\tassertThat(redisCacheConfiguration.usePrefix()).isTrue();\n \t\t\t\t});\n \t}\n \n@@ -342,7 +342,7 @@ public void redisCacheExplicitWithCaches() {\n \t\t\t\t\t\t\t.isEqualTo(java.time.Duration.ofMinutes(0));\n \t\t\t\t\tassertThat(redisCacheConfiguration.getAllowCacheNullValues())\n \t\t\t\t\t\t\t.isTrue();\n-\t\t\t\t\tassertThat(redisCacheConfiguration.getKeyPrefix()).isEmpty();\n+\t\t\t\t\tassertThat(redisCacheConfiguration.getKeyPrefixFor(\"test\")).isEqualTo(\"test::\");\n \t\t\t\t\tassertThat(redisCacheConfiguration.usePrefix()).isTrue();\n \t\t\t\t});\n \t}",
      "parent_sha": "99466e7fa60a1211a15bd18a1cf5463b7bc21027"
    }
  },
  {
    "oid": "3def99ad7b2559a0d6f90ca32ca64a4911fd870a",
    "message": "Align with breaking API changes in latest Spring Framework snapshots",
    "date": "2017-05-23T08:40:14Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/3def99ad7b2559a0d6f90ca32ca64a4911fd870a",
    "details": {
      "sha": "43dc1a73b04d0bd17a20e833a53576eb8a6b1095",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/3def99ad7b2559a0d6f90ca32ca64a4911fd870a/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Freactive%2FHttpHandlerAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/3def99ad7b2559a0d6f90ca32ca64a4911fd870a/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Freactive%2FHttpHandlerAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Freactive%2FHttpHandlerAutoConfiguration.java?ref=3def99ad7b2559a0d6f90ca32ca64a4911fd870a",
      "patch": "@@ -38,7 +38,7 @@\n import org.springframework.web.reactive.function.server.RouterFunctions;\n import org.springframework.web.reactive.result.view.ViewResolver;\n import org.springframework.web.server.WebFilter;\n-import org.springframework.web.server.WebHandler;\n+import org.springframework.web.server.adapter.HttpWebHandlerAdapter;\n import org.springframework.web.server.adapter.WebHttpHandlerBuilder;\n import org.springframework.web.server.session.WebSessionManager;\n \n@@ -108,15 +108,19 @@ public HttpHandler httpHandler(List<RouterFunction<?>> routerFunctions) {\n \t\t\tif (this.handlerStrategiesBuilder == null) {\n \t\t\t\tthis.handlerStrategiesBuilder = HandlerStrategies.builder();\n \t\t\t}\n+\t\t\tif (this.webFilters != null) {\n+\t\t\t\tthis.webFilters.forEach(this.handlerStrategiesBuilder::webFilter);\n+\t\t\t}\n \t\t\tif (this.viewResolvers != null) {\n \t\t\t\tthis.viewResolvers.forEach(this.handlerStrategiesBuilder::viewResolver);\n \t\t\t}\n-\t\t\tWebHandler webHandler = RouterFunctions.toHttpHandler(routerFunction,\n+\t\t\tHttpHandler httpHandler = RouterFunctions.toHttpHandler(routerFunction,\n \t\t\t\t\tthis.handlerStrategiesBuilder.build());\n-\t\t\tWebHttpHandlerBuilder builder = WebHttpHandlerBuilder.webHandler(webHandler)\n-\t\t\t\t\t.sessionManager(this.webSessionManager);\n-\t\t\tbuilder.filters(this.webFilters);\n-\t\t\treturn builder.build();\n+\t\t\tif (this.webSessionManager != null) {\n+\t\t\t\t((HttpWebHandlerAdapter) httpHandler)\n+\t\t\t\t\t\t.setSessionManager(this.webSessionManager);\n+\t\t\t}\n+\t\t\treturn httpHandler;\n \t\t}\n \n \t}",
      "parent_sha": "b60d3fb4cbbdf459255536825f183db2f3d13c29"
    }
  },
  {
    "oid": "0233178855fed6b135c1166c31dde5273912a02a",
    "message": "Use explicit matchers following Spring Security 6.0.5 upgrade\n\nSee gh-36293",
    "date": "2023-07-18T08:49:11Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/0233178855fed6b135c1166c31dde5273912a02a",
    "details": {
      "sha": "5b7b1f266a17c1ae76821511541a70c362b8b5ea",
      "filename": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-custom-security/src/main/java/smoketest/actuator/customsecurity/SecurityConfiguration.java",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/0233178855fed6b135c1166c31dde5273912a02a/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-actuator-custom-security%2Fsrc%2Fmain%2Fjava%2Fsmoketest%2Factuator%2Fcustomsecurity%2FSecurityConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/0233178855fed6b135c1166c31dde5273912a02a/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-actuator-custom-security%2Fsrc%2Fmain%2Fjava%2Fsmoketest%2Factuator%2Fcustomsecurity%2FSecurityConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-actuator-custom-security%2Fsrc%2Fmain%2Fjava%2Fsmoketest%2Factuator%2Fcustomsecurity%2FSecurityConfiguration.java?ref=0233178855fed6b135c1166c31dde5273912a02a",
      "patch": "@@ -31,6 +31,9 @@\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.web.servlet.handler.HandlerMappingIntrospector;\n \n @Configuration(proxyBeanMethods = false)\n public class SecurityConfiguration {\n@@ -54,16 +57,18 @@ private UserDetails createUserDetails(String username, String password, String..\n \t}\n \n \t@Bean\n-\tSecurityFilterChain configure(HttpSecurity http) throws Exception {\n+\tSecurityFilterChain configure(HttpSecurity http, HandlerMappingIntrospector handlerMappingIntrospector)\n+\t\t\tthrows Exception {\n \t\thttp.authorizeHttpRequests((requests) -> {\n-\t\t\trequests.requestMatchers(\"/actuator/beans\").hasRole(\"BEANS\");\n+\t\t\trequests.requestMatchers(new MvcRequestMatcher(handlerMappingIntrospector, \"/actuator/beans\"))\n+\t\t\t\t.hasRole(\"BEANS\");\n \t\t\trequests.requestMatchers(EndpointRequest.to(\"health\")).permitAll();\n \t\t\trequests.requestMatchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class))\n \t\t\t\t.hasRole(\"ACTUATOR\");\n \t\t\trequests.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll();\n \t\t\trequests.requestMatchers(\"/foo\").permitAll();\n-\t\t\trequests.requestMatchers(\"/error\").permitAll();\n-\t\t\trequests.requestMatchers(\"/**\").hasRole(\"USER\");\n+\t\t\trequests.requestMatchers(new AntPathRequestMatcher(\"/error\")).permitAll();\n+\t\t\trequests.requestMatchers(new AntPathRequestMatcher(\"/**\")).hasRole(\"USER\");\n \t\t});\n \t\thttp.cors(Customizer.withDefaults());\n \t\thttp.httpBasic();",
      "parent_sha": "12011fb4d91735c9451e384ee1d5937cdc67f044"
    }
  },
  {
    "oid": "af2b5b457147c27b6bd8b613fad9e795cd82f5cf",
    "message": "Increase sleep duration after creating GitHib issue in BOMR\n\nCloses gh-30304",
    "date": "2023-01-17T09:32:36Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/af2b5b457147c27b6bd8b613fad9e795cd82f5cf",
    "details": {
      "sha": "2a15f1ecb25786258cbcc592245f35fb938a90e2",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/bom/bomr/github/StandardGitHubRepository.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/af2b5b457147c27b6bd8b613fad9e795cd82f5cf/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2Fgithub%2FStandardGitHubRepository.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/af2b5b457147c27b6bd8b613fad9e795cd82f5cf/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2Fgithub%2FStandardGitHubRepository.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Fbom%2Fbomr%2Fgithub%2FStandardGitHubRepository.java?ref=af2b5b457147c27b6bd8b613fad9e795cd82f5cf",
      "patch": "@@ -16,6 +16,7 @@\n \n package org.springframework.boot.build.bom.bomr.github;\n \n+import java.time.Duration;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -54,14 +55,10 @@ public int openIssue(String title, String body, List<String> labels, Milestone m\n \t\t\trequestBody.put(\"labels\", labels);\n \t\t}\n \t\trequestBody.put(\"body\", body);\n-\t\ttry {\n-\t\t\tThread.sleep(1000);\n-\t\t}\n-\t\tcatch (InterruptedException ex) {\n-\t\t\tThread.currentThread().interrupt();\n-\t\t}\n \t\ttry {\n \t\t\tResponseEntity<Map> response = this.rest.postForEntity(\"issues\", requestBody, Map.class);\n+\t\t\t// See gh-30304\n+\t\t\tsleep(Duration.ofSeconds(3));\n \t\t\treturn (Integer) response.getBody().get(\"number\");\n \t\t}\n \t\tcatch (RestClientException ex) {\n@@ -98,4 +95,13 @@ private <T> List<T> get(String name, Function<Map<String, Object>, T> mapper) {\n \t\treturn body.stream().map(mapper).collect(Collectors.toList());\n \t}\n \n+\tprivate static void sleep(Duration duration) {\n+\t\ttry {\n+\t\t\tThread.sleep(duration.toMillis());\n+\t\t}\n+\t\tcatch (InterruptedException ex) {\n+\t\t\tThread.currentThread().interrupt();\n+\t\t}\n+\t}\n+\n }",
      "parent_sha": "9f2ed201b29c84a92db32b7a74d55c996d48e389"
    }
  },
  {
    "oid": "70b7326b737e8c0ccd35ea40e968297f329c13e9",
    "message": "Refine exception handling in logging listener\n\nRefine the exception handling block to cover initialization exceptions\nwithout a log file.\n\nCloses gh-23802",
    "date": "2020-10-25T16:21:17Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/70b7326b737e8c0ccd35ea40e968297f329c13e9",
    "details": {
      "sha": "c22c7ba127dec348f2b4c5fa433ff4fade32d637",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/70b7326b737e8c0ccd35ea40e968297f329c13e9/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Flogging%2FLoggingApplicationListener.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/70b7326b737e8c0ccd35ea40e968297f329c13e9/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Flogging%2FLoggingApplicationListener.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Flogging%2FLoggingApplicationListener.java?ref=70b7326b737e8c0ccd35ea40e968297f329c13e9",
      "patch": "@@ -305,26 +305,26 @@ private boolean isSet(ConfigurableEnvironment environment, String property) {\n \t}\n \n \tprivate void initializeSystem(ConfigurableEnvironment environment, LoggingSystem system, LogFile logFile) {\n-\t\tLoggingInitializationContext initializationContext = new LoggingInitializationContext(environment);\n \t\tString logConfig = StringUtils.trimWhitespace(environment.getProperty(CONFIG_PROPERTY));\n-\t\tif (ignoreLogConfig(logConfig)) {\n-\t\t\tsystem.initialize(initializationContext, null, logFile);\n-\t\t}\n-\t\telse {\n-\t\t\ttry {\n+\t\ttry {\n+\t\t\tLoggingInitializationContext initializationContext = new LoggingInitializationContext(environment);\n+\t\t\tif (ignoreLogConfig(logConfig)) {\n+\t\t\t\tsystem.initialize(initializationContext, null, logFile);\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\tsystem.initialize(initializationContext, logConfig, logFile);\n \t\t\t}\n-\t\t\tcatch (Exception ex) {\n-\t\t\t\tThrowable exceptionToReport = ex;\n-\t\t\t\twhile (exceptionToReport != null && !(exceptionToReport instanceof FileNotFoundException)) {\n-\t\t\t\t\texceptionToReport = exceptionToReport.getCause();\n-\t\t\t\t}\n-\t\t\t\texceptionToReport = (exceptionToReport != null) ? exceptionToReport : ex;\n-\t\t\t\t// NOTE: We can't use the logger here to report the problem\n-\t\t\t\tSystem.err.println(\"Logging system failed to initialize using configuration from '\" + logConfig + \"'\");\n-\t\t\t\texceptionToReport.printStackTrace(System.err);\n-\t\t\t\tthrow new IllegalStateException(ex);\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tThrowable exceptionToReport = ex;\n+\t\t\twhile (exceptionToReport != null && !(exceptionToReport instanceof FileNotFoundException)) {\n+\t\t\t\texceptionToReport = exceptionToReport.getCause();\n \t\t\t}\n+\t\t\texceptionToReport = (exceptionToReport != null) ? exceptionToReport : ex;\n+\t\t\t// NOTE: We can't use the logger here to report the problem\n+\t\t\tSystem.err.println(\"Logging system failed to initialize using configuration from '\" + logConfig + \"'\");\n+\t\t\texceptionToReport.printStackTrace(System.err);\n+\t\t\tthrow new IllegalStateException(ex);\n \t\t}\n \t}\n ",
      "parent_sha": "c85cc33ca9de96820d494f289db61f8e22986f46"
    }
  },
  {
    "oid": "c1ab3eab69bc9473b518254bd078e5d13c0e0e75",
    "message": "Polish",
    "date": "2018-06-04T22:02:06Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/c1ab3eab69bc9473b518254bd078e5d13c0e0e75",
    "details": {
      "sha": "a855d780caceb7645450a29a6a437ddf9eb90444",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java",
      "status": "modified",
      "additions": 46,
      "deletions": 51,
      "changes": 97,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/c1ab3eab69bc9473b518254bd078e5d13c0e0e75/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fwebservices%2Fclient%2FWebServiceTemplateBuilder.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/c1ab3eab69bc9473b518254bd078e5d13c0e0e75/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fwebservices%2Fclient%2FWebServiceTemplateBuilder.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fwebservices%2Fclient%2FWebServiceTemplateBuilder.java?ref=c1ab3eab69bc9473b518254bd078e5d13c0e0e75",
      "patch": "@@ -26,6 +26,7 @@\n import javax.xml.transform.TransformerFactory;\n \n import org.springframework.beans.BeanUtils;\n+import org.springframework.boot.context.properties.PropertyMapper;\n import org.springframework.oxm.Marshaller;\n import org.springframework.oxm.Unmarshaller;\n import org.springframework.util.Assert;\n@@ -76,9 +77,17 @@ public class WebServiceTemplateBuilder {\n \tprivate final WebServiceMessageFactory messageFactory;\n \n \tpublic WebServiceTemplateBuilder(WebServiceTemplateCustomizer... customizers) {\n-\t\tthis(true, Collections.emptySet(), Collections.emptySet(),\n-\t\t\t\tappend(Collections.<WebServiceTemplateCustomizer>emptySet(), customizers),\n-\t\t\t\tnew WebServiceMessageSenders(), null, null, null, null, null);\n+\t\tthis.detectHttpMessageSender = true;\n+\t\tthis.interceptors = null;\n+\t\tthis.internalCustomizers = null;\n+\t\tthis.customizers = Collections\n+\t\t\t\t.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(customizers)));\n+\t\tthis.messageSenders = new WebServiceMessageSenders();\n+\t\tthis.marshaller = null;\n+\t\tthis.unmarshaller = null;\n+\t\tthis.destinationProvider = null;\n+\t\tthis.transformerFactoryClass = null;\n+\t\tthis.messageFactory = null;\n \t}\n \n \tprivate WebServiceTemplateBuilder(boolean detectHttpMessageSender,\n@@ -89,11 +98,11 @@ private WebServiceTemplateBuilder(boolean detectHttpMessageSender,\n \t\t\tUnmarshaller unmarshaller, DestinationProvider destinationProvider,\n \t\t\tClass<? extends TransformerFactory> transformerFactoryClass,\n \t\t\tWebServiceMessageFactory messageFactory) {\n+\t\tthis.detectHttpMessageSender = detectHttpMessageSender;\n \t\tthis.interceptors = interceptors;\n \t\tthis.internalCustomizers = internalCustomizers;\n \t\tthis.customizers = customizers;\n \t\tthis.messageSenders = messageSenders;\n-\t\tthis.detectHttpMessageSender = detectHttpMessageSender;\n \t\tthis.marshaller = marshaller;\n \t\tthis.unmarshaller = unmarshaller;\n \t\tthis.destinationProvider = destinationProvider;\n@@ -357,7 +366,7 @@ public WebServiceTemplateBuilder setCheckConnectionForError(\n \t **/\n \tpublic WebServiceTemplateBuilder setWebServiceMessageFactory(\n \t\t\tWebServiceMessageFactory messageFactory) {\n-\t\tAssert.notNull(messageFactory, \"messageFactory must not be null\");\n+\t\tAssert.notNull(messageFactory, \"MessageFactory must not be null\");\n \t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n \t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n \t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n@@ -425,7 +434,6 @@ public WebServiceTemplateBuilder setTransformerFactoryClass(\n \n \t/**\n \t * Set the default URI to be used on operations that do not have a URI parameter.\n-\t * <p>\n \t * Typically, either this property is set, or\n \t * {@link #setDestinationProvider(DestinationProvider)}, but not both.\n \t * @param defaultUri the destination provider URI to be used on operations that do not\n@@ -439,18 +447,16 @@ public WebServiceTemplateBuilder setDefaultUri(String defaultUri) {\n \t}\n \n \t/**\n-\t * Set the {@link DestinationProvider} to use\n-\t * <p>\n-\t * Typically, either this property is set, or {@link #setDefaultUri(String)}, but not\n-\t * both.\n+\t * Set the {@link DestinationProvider} to use. Typically, either this property is set,\n+\t * or {@link #setDefaultUri(String)}, but not both.\n \t * @param destinationProvider the destination provider to be used on operations that\n \t * do not have a URI parameter.\n \t * @return a new builder instance.\n \t * @see WebServiceTemplate#setDestinationProvider(DestinationProvider)\n \t */\n \tpublic WebServiceTemplateBuilder setDestinationProvider(\n \t\t\tDestinationProvider destinationProvider) {\n-\t\tAssert.notNull(destinationProvider, \"destinationProvider must not be null\");\n+\t\tAssert.notNull(destinationProvider, \"DestinationProvider must not be null\");\n \t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n \t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n \t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n@@ -492,65 +498,54 @@ public <T extends WebServiceTemplate> T build(Class<T> webServiceTemplateClass)\n \t * @see #build(Class)\n \t */\n \tpublic <T extends WebServiceTemplate> T configure(T webServiceTemplate) {\n-\t\tAssert.notNull(webServiceTemplate, \"webServiceTemplate must not be null\");\n+\t\tAssert.notNull(webServiceTemplate, \"WebServiceTemplate must not be null\");\n \t\tconfigureMessageSenders(webServiceTemplate);\n-\t\tif (!CollectionUtils.isEmpty(this.internalCustomizers)) {\n-\t\t\tfor (WebServiceTemplateCustomizer internalCustomizer : this.internalCustomizers) {\n-\t\t\t\tinternalCustomizer.customize(webServiceTemplate);\n-\t\t\t}\n-\t\t}\n-\t\tif (this.marshaller != null) {\n-\t\t\twebServiceTemplate.setMarshaller(this.marshaller);\n-\t\t}\n-\t\tif (this.unmarshaller != null) {\n-\t\t\twebServiceTemplate.setUnmarshaller(this.unmarshaller);\n-\t\t}\n-\t\tif (this.destinationProvider != null) {\n-\t\t\twebServiceTemplate.setDestinationProvider(this.destinationProvider);\n-\t\t}\n-\t\tif (this.transformerFactoryClass != null) {\n-\t\t\twebServiceTemplate.setTransformerFactoryClass(this.transformerFactoryClass);\n-\t\t}\n-\t\tif (this.messageFactory != null) {\n-\t\t\twebServiceTemplate.setMessageFactory(this.messageFactory);\n-\t\t}\n+\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n+\t\tapplyCustomizers(webServiceTemplate, this.internalCustomizers);\n+\t\tmap.from(() -> this.marshaller).to(webServiceTemplate::setMarshaller);\n+\t\tmap.from(() -> this.unmarshaller).to(webServiceTemplate::setUnmarshaller);\n+\t\tmap.from(() -> this.destinationProvider)\n+\t\t\t\t.to(webServiceTemplate::setDestinationProvider);\n+\t\tmap.from(() -> this.transformerFactoryClass)\n+\t\t\t\t.to(webServiceTemplate::setTransformerFactoryClass);\n+\t\tmap.from(() -> this.messageFactory).to(webServiceTemplate::setMessageFactory);\n \t\tif (!CollectionUtils.isEmpty(this.interceptors)) {\n-\t\t\twebServiceTemplate.setInterceptors(\n-\t\t\t\t\tappend(this.interceptors, webServiceTemplate.getInterceptors())\n-\t\t\t\t\t\t\t.toArray(new ClientInterceptor[0]));\n-\t\t}\n-\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n-\t\t\tfor (WebServiceTemplateCustomizer customizer : this.customizers) {\n-\t\t\t\tcustomizer.customize(webServiceTemplate);\n+\t\t\tSet<ClientInterceptor> merged = new LinkedHashSet<>(this.interceptors);\n+\t\t\tif (webServiceTemplate.getInterceptors() != null) {\n+\t\t\t\tmerged.addAll(Arrays.asList(webServiceTemplate.getInterceptors()));\n \t\t\t}\n+\t\t\twebServiceTemplate.setInterceptors(merged.toArray(new ClientInterceptor[0]));\n \t\t}\n+\t\tapplyCustomizers(webServiceTemplate, this.customizers);\n \t\treturn webServiceTemplate;\n \t}\n \n+\tprivate void applyCustomizers(WebServiceTemplate webServiceTemplate,\n+\t\t\tSet<WebServiceTemplateCustomizer> customizers) {\n+\t\tif (!CollectionUtils.isEmpty(customizers)) {\n+\t\t\tfor (WebServiceTemplateCustomizer internalCustomizer : customizers) {\n+\t\t\t\tinternalCustomizer.customize(webServiceTemplate);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tprivate <T extends WebServiceTemplate> void configureMessageSenders(\n \t\t\tT webServiceTemplate) {\n \t\tif (this.messageSenders.isOnlyAdditional() && this.detectHttpMessageSender) {\n-\t\t\tSet<WebServiceMessageSender> mergedMessageSenders = append(\n+\t\t\tSet<WebServiceMessageSender> merged = append(\n \t\t\t\t\tthis.messageSenders.getMessageSenders(),\n \t\t\t\t\tnew HttpWebServiceMessageSenderBuilder().build());\n-\t\t\twebServiceTemplate.setMessageSenders(\n-\t\t\t\t\tmergedMessageSenders.toArray(new WebServiceMessageSender[0]));\n+\t\t\twebServiceTemplate\n+\t\t\t\t\t.setMessageSenders(merged.toArray(new WebServiceMessageSender[0]));\n \t\t}\n \t\telse if (!CollectionUtils.isEmpty(this.messageSenders.getMessageSenders())) {\n \t\t\twebServiceTemplate.setMessageSenders(this.messageSenders.getMessageSenders()\n \t\t\t\t\t.toArray(new WebServiceMessageSender[0]));\n \t\t}\n \t}\n \n-\tprivate static <T> Set<T> append(Set<T> set, T[] additions) {\n-\t\treturn append(set, additions != null\n-\t\t\t\t? new LinkedHashSet<>(Arrays.asList(additions)) : Collections.emptySet());\n-\t}\n-\n-\tprivate static <T> Set<T> append(Set<T> set, T addition) {\n-\t\tSet<T> result = new LinkedHashSet<>(set != null ? set : Collections.emptySet());\n-\t\tresult.add(addition);\n-\t\treturn Collections.unmodifiableSet(result);\n+\tprivate <T> Set<T> append(Set<T> set, T addition) {\n+\t\treturn append(set, Collections.singleton(addition));\n \t}\n \n \tprivate static <T> Set<T> append(Set<T> set, Collection<? extends T> additions) {",
      "parent_sha": "87af880446a2117df3eafa1d13bda205fd554bf8"
    }
  },
  {
    "oid": "b1a3849b270c814382381066cb396e4027e144d6",
    "message": "Disable Jackson XML support in RSocket codecs\n\nPrior to this commit, having the `spring-boot-starter-rsocket` and the\n`jackson-dataformat-xml` dependencies on classpath would result in a\n`ClassCastException` when the RSocket auto-configuration tries to\nconfigure Jackson CBOR codecs for RSocket strategies.\n\nThis commit disables the Jackson XML support for the CBOR codec in\nRSocket.\n\nFixes gh-17425",
    "date": "2019-07-10T10:06:26Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/b1a3849b270c814382381066cb396e4027e144d6",
    "details": {
      "sha": "3274377fa1165da58a8b30862d8a4e6e4d437fe0",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/b1a3849b270c814382381066cb396e4027e144d6/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Frsocket%2FRSocketStrategiesAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/b1a3849b270c814382381066cb396e4027e144d6/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Frsocket%2FRSocketStrategiesAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Frsocket%2FRSocketStrategiesAutoConfiguration.java?ref=b1a3849b270c814382381066cb396e4027e144d6",
      "patch": "@@ -78,7 +78,7 @@ protected static class JacksonCborStrategyConfiguration {\n \t\t@ConditionalOnBean(Jackson2ObjectMapperBuilder.class)\n \t\tpublic RSocketStrategiesCustomizer jacksonCborRSocketStrategyCustomizer(Jackson2ObjectMapperBuilder builder) {\n \t\t\treturn (strategy) -> {\n-\t\t\t\tObjectMapper objectMapper = builder.factory(new CBORFactory()).build();\n+\t\t\t\tObjectMapper objectMapper = builder.createXmlMapper(false).factory(new CBORFactory()).build();\n \t\t\t\tstrategy.decoder(new Jackson2CborDecoder(objectMapper, SUPPORTED_TYPES));\n \t\t\t\tstrategy.encoder(new Jackson2CborEncoder(objectMapper, SUPPORTED_TYPES));\n \t\t\t};",
      "parent_sha": "2830847344fbc538c821faf13d74a6c541a8d8d8"
    }
  },
  {
    "oid": "742983fc5e1d6064c8e1baf2189e38560218d5cd",
    "message": "Update copyright of changed file\n\nSee gh-24866",
    "date": "2021-01-18T13:38:58Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/742983fc5e1d6064c8e1baf2189e38560218d5cd",
    "details": {
      "sha": "c3ef53ba17e17c2cff9652886278d5003ca78605",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfigurationTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/742983fc5e1d6064c8e1baf2189e38560218d5cd/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fdao%2FPersistenceExceptionTranslationAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/742983fc5e1d6064c8e1baf2189e38560218d5cd/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fdao%2FPersistenceExceptionTranslationAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fdao%2FPersistenceExceptionTranslationAutoConfigurationTests.java?ref=742983fc5e1d6064c8e1baf2189e38560218d5cd",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2019 the original author or authors.\n+ * Copyright 2012-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.",
      "parent_sha": "41fcc427c653912a6a52ccba72854f79aa8d04dc"
    }
  },
  {
    "oid": "668993c4bf0b672cb869c458299daa54e83c09ad",
    "message": "Fix typo\n\nCloses gh-7117",
    "date": "2016-10-06T11:35:21Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/668993c4bf0b672cb869c458299daa54e83c09ad",
    "details": {
      "sha": "86d61192859d068254205b45aff0c34e27521373",
      "filename": "spring-boot/src/main/java/org/springframework/boot/SpringBootConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/668993c4bf0b672cb869c458299daa54e83c09ad/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2FSpringBootConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/668993c4bf0b672cb869c458299daa54e83c09ad/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2FSpringBootConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2FSpringBootConfiguration.java?ref=668993c4bf0b672cb869c458299daa54e83c09ad",
      "patch": "@@ -31,7 +31,7 @@\n  * automatically (for example in tests).\n  * <p>\n  * Application should only ever include <em>one</em>\n- * {@code @SpringApplicationConfiguration} and most idiomatic Spring Boot applications\n+ * {@code @SpringBootConfiguration} and most idiomatic Spring Boot applications\n  * will inherit it from {@code @SpringBootApplication}.\n  *\n  * @author Phillip Webb",
      "parent_sha": "cbb3418059e633807276337bce304bd823f291bf"
    }
  },
  {
    "oid": "477b199cd658a297c99bb1d69ee7a33db279095e",
    "message": "Add ApplicationEventPublisher explicitly to security publisher\n\nFor some reason the exception mappings are only created with the\npublisher is initialized in the constructor of DefaultAuthenticationEventPublisher.\nChanged SpringBootWebSecurityConfiguration to do that rather then\nrelying on the ApplicationEventPublisherAware behaviour to inject it.\n\nFixes gh-719",
    "date": "2014-04-26T11:15:30Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/477b199cd658a297c99bb1d69ee7a33db279095e",
    "details": {
      "sha": "e42cd717404a66bb8ac21bcaf9dd621a2a7b0281",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/477b199cd658a297c99bb1d69ee7a33db279095e/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fsecurity%2FSpringBootWebSecurityConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/477b199cd658a297c99bb1d69ee7a33db279095e/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fsecurity%2FSpringBootWebSecurityConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fsecurity%2FSpringBootWebSecurityConfiguration.java?ref=477b199cd658a297c99bb1d69ee7a33db279095e",
      "patch": "@@ -29,6 +29,7 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n@@ -90,8 +91,9 @@ public class SpringBootWebSecurityConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic AuthenticationEventPublisher authenticationEventPublisher() {\n-\t\treturn new DefaultAuthenticationEventPublisher();\n+\tpublic AuthenticationEventPublisher authenticationEventPublisher(\n+\t\t\tApplicationEventPublisher publisher) {\n+\t\treturn new DefaultAuthenticationEventPublisher(publisher);\n \t}\n \n \t@Bean",
      "parent_sha": "6ac85c17597a482288fb76bd03a64b185bbd200e"
    }
  },
  {
    "oid": "472afafd4bc351f139716edf8b899a5a79df6808",
    "message": "Stop WebFilterChainPostProcessor from causing eager init\n\nFixes gh-35163",
    "date": "2023-04-25T21:08:58Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/472afafd4bc351f139716edf8b899a5a79df6808",
    "details": {
      "sha": "dd109244b628eaaea4357527e8bcf42e492c74fb",
      "filename": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundryActuatorAutoConfiguration.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/472afafd4bc351f139716edf8b899a5a79df6808/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fcloudfoundry%2Freactive%2FReactiveCloudFoundryActuatorAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/472afafd4bc351f139716edf8b899a5a79df6808/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fcloudfoundry%2Freactive%2FReactiveCloudFoundryActuatorAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fcloudfoundry%2Freactive%2FReactiveCloudFoundryActuatorAutoConfiguration.java?ref=472afafd4bc351f139716edf8b899a5a79df6808",
      "patch": "@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n import org.springframework.beans.BeansException;\n@@ -64,6 +65,7 @@\n import org.springframework.security.web.server.WebFilterChainProxy;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n+import org.springframework.util.function.SingletonSupplier;\n import org.springframework.web.cors.CorsConfiguration;\n import org.springframework.web.reactive.function.client.WebClient;\n import org.springframework.web.server.WebFilter;\n@@ -155,25 +157,26 @@ private CorsConfiguration getCorsConfiguration() {\n \tstatic class IgnoredPathsSecurityConfiguration {\n \n \t\t@Bean\n-\t\tWebFilterChainPostProcessor webFilterChainPostProcessor(\n-\t\t\t\tCloudFoundryWebFluxEndpointHandlerMapping handlerMapping) {\n+\t\tstatic WebFilterChainPostProcessor webFilterChainPostProcessor(\n+\t\t\t\tObjectProvider<CloudFoundryWebFluxEndpointHandlerMapping> handlerMapping) {\n \t\t\treturn new WebFilterChainPostProcessor(handlerMapping);\n \t\t}\n \n \t}\n \n \tstatic class WebFilterChainPostProcessor implements BeanPostProcessor {\n \n-\t\tprivate final PathMappedEndpoints pathMappedEndpoints;\n+\t\tprivate Supplier<PathMappedEndpoints> pathMappedEndpoints;\n \n-\t\tWebFilterChainPostProcessor(CloudFoundryWebFluxEndpointHandlerMapping handlerMapping) {\n-\t\t\tthis.pathMappedEndpoints = new PathMappedEndpoints(BASE_PATH, handlerMapping::getAllEndpoints);\n+\t\tWebFilterChainPostProcessor(ObjectProvider<CloudFoundryWebFluxEndpointHandlerMapping> handlerMapping) {\n+\t\t\tthis.pathMappedEndpoints = SingletonSupplier\n+\t\t\t\t.of(() -> new PathMappedEndpoints(BASE_PATH, () -> handlerMapping.getObject().getAllEndpoints()));\n \t\t}\n \n \t\t@Override\n \t\tpublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n \t\t\tif (bean instanceof WebFilterChainProxy) {\n-\t\t\t\treturn postProcess((WebFilterChainProxy) bean, this.pathMappedEndpoints);\n+\t\t\t\treturn postProcess((WebFilterChainProxy) bean, this.pathMappedEndpoints.get());\n \t\t\t}\n \t\t\treturn bean;\n \t\t}",
      "parent_sha": "a707c5e83e479099f8dd71fb06806e143efdd119"
    }
  },
  {
    "oid": "a4bafa88bc167eaff7e0cbf7bfe36da742db2b15",
    "message": "Disable schema validation when testing against Hazelcast 3\n\nWe have hazelcast configuration files that are used with multiple\nversions of Hazelcast. Version 3's scheme doesn't allow us to set\n<auto-detection enabled=\"false\" />. To work around this, we\nconfigure a system property that causes Hazelcast to disable schema\nvalidation.\n\nSee gh-38163",
    "date": "2022-07-27T17:29:54Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/a4bafa88bc167eaff7e0cbf7bfe36da742db2b15",
    "details": {
      "sha": "59e646809e686287063e3231cc15402d2986505d",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/Hazelcast3AutoConfigurationTests.java",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/a4bafa88bc167eaff7e0cbf7bfe36da742db2b15/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fhazelcast%2FHazelcast3AutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/a4bafa88bc167eaff7e0cbf7bfe36da742db2b15/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fhazelcast%2FHazelcast3AutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fhazelcast%2FHazelcast3AutoConfigurationTests.java?ref=a4bafa88bc167eaff7e0cbf7bfe36da742db2b15",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2020 the original author or authors.\n+ * Copyright 2012-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,7 +20,10 @@\n import com.hazelcast.config.Config;\n import com.hazelcast.core.Hazelcast;\n import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.BuildInfoProvider;\n import org.assertj.core.api.Condition;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.boot.autoconfigure.AutoConfigurations;\n@@ -45,6 +48,16 @@ class Hazelcast3AutoConfigurationTests {\n \tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n \t\t\t.withConfiguration(AutoConfigurations.of(HazelcastAutoConfiguration.class));\n \n+\t@BeforeEach\n+\tvoid setHazelcastVersionOverride() {\n+\t\tSystem.setProperty(BuildInfoProvider.HAZELCAST_INTERNAL_OVERRIDE_VERSION, \"3.12.8\");\n+\t}\n+\n+\t@AfterEach\n+\tvoid clearHazelcastVersionOverride() {\n+\t\tSystem.clearProperty(BuildInfoProvider.HAZELCAST_INTERNAL_OVERRIDE_VERSION);\n+\t}\n+\n \t@Test\n \tvoid defaultConfigFile() {\n \t\t// no hazelcast-client.xml and hazelcast.xml is present in root classpath",
      "parent_sha": "9184d5483a987ccd7e15d2599ad49e6e2a634836"
    }
  },
  {
    "oid": "2da8bc1f3b0169e50faa95c15609496a67d9c42d",
    "message": "Reduce Gradle versions used for compatibility testing\n\nCloses gh-33401",
    "date": "2022-11-28T19:14:41Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/2da8bc1f3b0169e50faa95c15609496a67d9c42d",
    "details": {
      "sha": "87e6e0bce0271287ea58723048a95988795e8b38",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-gradle-test-support/src/main/java/org/springframework/boot/testsupport/gradle/testkit/GradleVersions.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/2da8bc1f3b0169e50faa95c15609496a67d9c42d/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Fgradle%2Ftestkit%2FGradleVersions.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/2da8bc1f3b0169e50faa95c15609496a67d9c42d/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Fgradle%2Ftestkit%2FGradleVersions.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Fgradle%2Ftestkit%2FGradleVersions.java?ref=2da8bc1f3b0169e50faa95c15609496a67d9c42d",
      "patch": "@@ -34,16 +34,15 @@ private GradleVersions() {\n \n \tpublic static List<String> allCompatible() {\n \t\tif (isJava18()) {\n-\t\t\treturn Arrays.asList(\"7.3.3\", \"7.4.2\", GradleVersion.current().getVersion());\n+\t\t\treturn Arrays.asList(\"7.3.3\", GradleVersion.current().getVersion());\n \t\t}\n \t\tif (isJava17()) {\n-\t\t\treturn Arrays.asList(\"7.2\", \"7.3.3\", \"7.4.2\", GradleVersion.current().getVersion());\n+\t\t\treturn Arrays.asList(\"7.2\", GradleVersion.current().getVersion());\n \t\t}\n \t\tif (isJava16()) {\n-\t\t\treturn Arrays.asList(\"7.0.2\", \"7.1\", \"7.2\", \"7.3.3\", \"7.4.2\", GradleVersion.current().getVersion());\n+\t\t\treturn Arrays.asList(\"7.0.2\", GradleVersion.current().getVersion());\n \t\t}\n-\t\treturn Arrays.asList(\"6.8.3\", \"6.9.3\", \"7.0.2\", \"7.1.1\", \"7.2\", \"7.3.3\", \"7.4.2\",\n-\t\t\t\tGradleVersion.current().getVersion());\n+\t\treturn Arrays.asList(\"6.8.3\", \"6.9.3\", \"7.0.2\", GradleVersion.current().getVersion());\n \t}\n \n \tpublic static String minimumCompatible() {",
      "parent_sha": "7ea58810660e45cd89e7b1a6e7b9a623de67586e"
    }
  },
  {
    "oid": "e0d1cf0e3898f5a3e918c3be2dd7efab27b11e79",
    "message": "Polish JarFile to extra anonymous inner class\n\nSee gh-20882",
    "date": "2020-04-15T07:33:24Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/e0d1cf0e3898f5a3e918c3be2dd7efab27b11e79",
    "details": {
      "sha": "2bd4816c69d1c2f2b1b7e93239c74c41c651bed7",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java",
      "status": "modified",
      "additions": 30,
      "deletions": 13,
      "changes": 43,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/e0d1cf0e3898f5a3e918c3be2dd7efab27b11e79/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-loader%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Floader%2Fjar%2FJarFile.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/e0d1cf0e3898f5a3e918c3be2dd7efab27b11e79/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-loader%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Floader%2Fjar%2FJarFile.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-loader%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Floader%2Fjar%2FJarFile.java?ref=e0d1cf0e3898f5a3e918c3be2dd7efab27b11e79",
      "patch": "@@ -192,19 +192,7 @@ public Manifest getManifest() throws IOException {\n \t@Override\n \tpublic Enumeration<java.util.jar.JarEntry> entries() {\n \t\tfinal Iterator<JarEntry> iterator = this.entries.iterator();\n-\t\treturn new Enumeration<java.util.jar.JarEntry>() {\n-\n-\t\t\t@Override\n-\t\t\tpublic boolean hasMoreElements() {\n-\t\t\t\treturn iterator.hasNext();\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic java.util.jar.JarEntry nextElement() {\n-\t\t\t\treturn iterator.next();\n-\t\t\t}\n-\n-\t\t};\n+\t\treturn new EnumerationJarEntry(iterator);\n \t}\n \n \tpublic JarEntry getJarEntry(CharSequence name) {\n@@ -421,4 +409,33 @@ enum JarFileType {\n \n \t}\n \n+\t/**\n+\t * The type Enumeration jar entry.\n+\t */\n+\tstatic class EnumerationJarEntry implements Enumeration<java.util.jar.JarEntry> {\n+\n+\t\t/**\n+\t\t * The Iterator.\n+\t\t */\n+\t\tIterator<JarEntry> iterator;\n+\n+\t\t/**\n+\t\t * Instantiates a new Enumeration jar entry.\n+\t\t *\n+\t\t * @param iterator the iterator\n+\t\t */\n+\t\tEnumerationJarEntry(Iterator<JarEntry> iterator) {\n+\t\t\tthis.iterator = iterator;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean hasMoreElements() {\n+\t\t\treturn this.iterator.hasNext();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic java.util.jar.JarEntry nextElement() {\n+\t\t\treturn this.iterator.next();\n+\t\t}\n+\t}\n }",
      "parent_sha": "947594addd00987bead2a4d6f6ae99138762b511"
    }
  },
  {
    "oid": "b798d001d77db5ef0c751a86554d90472dd23d63",
    "message": "Add missing @Param annotations to CityRepository in Data REST sample\n\nWithout the @Param annotations, using either of the search URIs would\nresulted in a 400 response and an error describing the lack of @Param\nannotation.\n\nSee gh-1627",
    "date": "2014-09-30T09:18:26Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/b798d001d77db5ef0c751a86554d90472dd23d63",
    "details": {
      "sha": "42819566419b55e0f32d8247654c10f583a7bbfc",
      "filename": "spring-boot-samples/spring-boot-sample-data-rest/src/main/java/sample/data/jpa/service/CityRepository.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/b798d001d77db5ef0c751a86554d90472dd23d63/spring-boot-samples%2Fspring-boot-sample-data-rest%2Fsrc%2Fmain%2Fjava%2Fsample%2Fdata%2Fjpa%2Fservice%2FCityRepository.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/b798d001d77db5ef0c751a86554d90472dd23d63/spring-boot-samples%2Fspring-boot-sample-data-rest%2Fsrc%2Fmain%2Fjava%2Fsample%2Fdata%2Fjpa%2Fservice%2FCityRepository.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-samples%2Fspring-boot-sample-data-rest%2Fsrc%2Fmain%2Fjava%2Fsample%2Fdata%2Fjpa%2Fservice%2FCityRepository.java?ref=b798d001d77db5ef0c751a86554d90472dd23d63",
      "patch": "@@ -19,16 +19,19 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n \n import sample.data.jpa.domain.City;\n \n @RepositoryRestResource(collectionResourceRel = \"citys\", path = \"cities\")\n interface CityRepository extends PagingAndSortingRepository<City, Long> {\n \n-\tPage<City> findByNameContainingAndCountryContainingAllIgnoringCase(String name,\n-\t\t\tString country, Pageable pageable);\n+\tPage<City> findByNameContainingAndCountryContainingAllIgnoringCase(\n+\t\t\t@Param(\"name\") String name, @Param(\"country\") String country,\n+\t\t\tPageable pageable);\n \n-\tCity findByNameAndCountryAllIgnoringCase(String name, String country);\n+\tCity findByNameAndCountryAllIgnoringCase(@Param(\"name\") String name,\n+\t\t\t@Param(\"country\") String country);\n \n }",
      "parent_sha": "d0990c06a620fd7cb4a6296df767fb462c5e45fb"
    }
  },
  {
    "oid": "28abcf88a03d11d4e69c96eb6b571d50cc1e2692",
    "message": "Upgrade to spring-asciidoctor-backends 0.0.2\n\nCloses gh-26846",
    "date": "2021-06-10T07:18:34Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/28abcf88a03d11d4e69c96eb6b571d50cc1e2692",
    "details": {
      "sha": "2c00c500398e8107fddac680390f4dee3a2bfab7",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/AsciidoctorConventions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/28abcf88a03d11d4e69c96eb6b571d50cc1e2692/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2FAsciidoctorConventions.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/28abcf88a03d11d4e69c96eb6b571d50cc1e2692/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2FAsciidoctorConventions.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2FAsciidoctorConventions.java?ref=28abcf88a03d11d4e69c96eb6b571d50cc1e2692",
      "patch": "@@ -108,7 +108,7 @@ private void createAsciidoctorExtensionsConfiguration(Project project) {\n \t\t\tproject.getConfigurations().matching((candidate) -> \"dependencyManagement\".equals(candidate.getName()))\n \t\t\t\t\t.all((dependencyManagement) -> configuration.extendsFrom(dependencyManagement));\n \t\t\tconfiguration.getDependencies().add(project.getDependencies()\n-\t\t\t\t\t.create(\"io.spring.asciidoctor.backends:spring-asciidoctor-backends:0.0.1\"));\n+\t\t\t\t\t.create(\"io.spring.asciidoctor.backends:spring-asciidoctor-backends:0.0.2\"));\n \t\t\tconfiguration.getDependencies()\n \t\t\t\t\t.add(project.getDependencies().create(\"org.asciidoctor:asciidoctorj-pdf:1.5.3\"));\n \t\t});",
      "parent_sha": "17671980dc6600b22bc328cc361a2d5742e44381"
    }
  },
  {
    "oid": "a0b4cdee443b2b3bb0be4bec129c86f980ec37a6",
    "message": "Make line ending expectations in TotalProgressBarTests OS-independent\n\nSee gh-19828",
    "date": "2020-01-23T14:14:14Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/a0b4cdee443b2b3bb0be4bec129c86f980ec37a6",
    "details": {
      "sha": "345e0d4544cc9ec1e462c1113704140fcdd7eeea",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/java/org/springframework/boot/buildpack/platform/docker/TotalProgressBarTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/a0b4cdee443b2b3bb0be4bec129c86f980ec37a6/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2FTotalProgressBarTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/a0b4cdee443b2b3bb0be4bec129c86f980ec37a6/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2FTotalProgressBarTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-buildpack-platform%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuildpack%2Fplatform%2Fdocker%2FTotalProgressBarTests.java?ref=a0b4cdee443b2b3bb0be4bec129c86f980ec37a6",
      "patch": "@@ -40,7 +40,8 @@ void withPrefixAndBookends() {\n \t\tbar.accept(new TotalProgressEvent(50));\n \t\tassertThat(out.toString()).isEqualTo(\"prefix: [ #########################\");\n \t\tbar.accept(new TotalProgressEvent(100));\n-\t\tassertThat(out.toString()).isEqualTo(\"prefix: [ ################################################## ]\\n\");\n+\t\tassertThat(out.toString())\n+\t\t\t\t.isEqualTo(String.format(\"prefix: [ ################################################## ]%n\"));\n \t}\n \n \t@Test\n@@ -53,7 +54,7 @@ void withoutPrefix() {\n \t\tbar.accept(new TotalProgressEvent(50));\n \t\tassertThat(out.toString()).isEqualTo(\"[ #########################\");\n \t\tbar.accept(new TotalProgressEvent(100));\n-\t\tassertThat(out.toString()).isEqualTo(\"[ ################################################## ]\\n\");\n+\t\tassertThat(out.toString()).isEqualTo(String.format(\"[ ################################################## ]%n\"));\n \t}\n \n \t@Test\n@@ -66,7 +67,7 @@ void withoutBookends() {\n \t\tbar.accept(new TotalProgressEvent(50));\n \t\tassertThat(out.toString()).isEqualTo(\".........................\");\n \t\tbar.accept(new TotalProgressEvent(100));\n-\t\tassertThat(out.toString()).isEqualTo(\"..................................................\\n\");\n+\t\tassertThat(out.toString()).isEqualTo(String.format(\"..................................................%n\"));\n \t}\n \n \tstatic class TestPrintStream extends PrintStream {",
      "parent_sha": "c1ebd5abb8fddfa07b136f72df1ea255fe283f80"
    }
  },
  {
    "oid": "d5d7152e5dcad80722e270fa998360f64dfabc62",
    "message": "Polish 'Add test for nullSafeValue with mapper transformation'\n\nSee gh-43441",
    "date": "2024-12-11T23:14:14Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/d5d7152e5dcad80722e270fa998360f64dfabc62",
    "details": {
      "sha": "c0c23acb4755766f3df992cc55b34b170ab32bf0",
      "filename": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jackson/JsonObjectDeserializerTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/d5d7152e5dcad80722e270fa998360f64dfabc62/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fjackson%2FJsonObjectDeserializerTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/d5d7152e5dcad80722e270fa998360f64dfabc62/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fjackson%2FJsonObjectDeserializerTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fjackson%2FJsonObjectDeserializerTests.java?ref=d5d7152e5dcad80722e270fa998360f64dfabc62",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2023 the original author or authors.\n+ * Copyright 2012-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.InputStream;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.time.LocalDate;\n import java.util.function.Function;\n \n import com.fasterxml.jackson.core.JsonParser;\n@@ -149,12 +150,8 @@ void nullSafeValueWhenClassIsBigIntegerShouldReturnBigInteger() {\n \tvoid nullSafeValueWithMapperShouldTransformValue() {\n \t\tJsonNode node = mock(JsonNode.class);\n \t\tgiven(node.textValue()).willReturn(\"2023-12-01\");\n-\n-\t\tjava.time.LocalDate result = this.testDeserializer.testNullSafeValue(\n-\t\t\t\tnode, String.class, java.time.LocalDate::parse\n-\t\t);\n-\n-\t\tassertThat(result).isEqualTo(java.time.LocalDate.of(2023, 12, 1));\n+\t\tLocalDate result = this.testDeserializer.testNullSafeValue(node, String.class, LocalDate::parse);\n+\t\tassertThat(result).isEqualTo(LocalDate.of(2023, 12, 1));\n \t}\n \n \t@Test\n@@ -206,7 +203,6 @@ <D, R> R testNullSafeValue(JsonNode jsonNode, Class<D> type, Function<D, R> mapp\n \t\t\treturn nullSafeValue(jsonNode, type, mapper);\n \t\t}\n \n-\n \t\t<D> D testNullSafeValue(JsonNode jsonNode, Class<D> type) {\n \t\t\treturn nullSafeValue(jsonNode, type);\n \t\t}",
      "parent_sha": "22f527af6aeb02fdc244cdc931de4dc8147760db"
    }
  },
  {
    "oid": "fe9d9ec4e2eefd3ec29d9fa9288531ea10b237f7",
    "message": "Test the Gradle plugin against Gradle 5.0-rc-3\n\nCloses gh-15171",
    "date": "2018-11-15T10:32:34Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/fe9d9ec4e2eefd3ec29d9fa9288531ea10b237f7",
    "details": {
      "sha": "1f209bafc8d52a32adc7f982329995bd6454cdde",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/fe9d9ec4e2eefd3ec29d9fa9288531ea10b237f7/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fgradle%2Fjunit%2FGradleCompatibilitySuite.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/fe9d9ec4e2eefd3ec29d9fa9288531ea10b237f7/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fgradle%2Fjunit%2FGradleCompatibilitySuite.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fgradle%2Fjunit%2FGradleCompatibilitySuite.java?ref=fe9d9ec4e2eefd3ec29d9fa9288531ea10b237f7",
      "patch": "@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-rc-1\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-rc-3\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
      "parent_sha": "c1b1f14f5a2c0c81da5ac85623659d182c349241"
    }
  },
  {
    "oid": "5264fb3d1e4edf14f34989eeaa027b5750a58b9a",
    "message": "Test our Gradle Plugin against Gradle 7.4.1\n\nCloses gh-30139",
    "date": "2022-03-09T18:09:07Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/5264fb3d1e4edf14f34989eeaa027b5750a58b9a",
    "details": {
      "sha": "e9f445c1f0361f7f44a4b27286a1193bfe661fdd",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/5264fb3d1e4edf14f34989eeaa027b5750a58b9a/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fgradle%2Fjunit%2FGradleCompatibilityExtension.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/5264fb3d1e4edf14f34989eeaa027b5750a58b9a/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fgradle%2Fjunit%2FGradleCompatibilityExtension.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-plugin%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fgradle%2Fjunit%2FGradleCompatibilityExtension.java?ref=5264fb3d1e4edf14f34989eeaa027b5750a58b9a",
      "patch": "@@ -48,16 +48,16 @@ final class GradleCompatibilityExtension implements TestTemplateInvocationContex\n \tstatic {\n \t\tJavaVersion javaVersion = JavaVersion.current();\n \t\tif (javaVersion.isCompatibleWith(JavaVersion.VERSION_HIGHER)) {\n-\t\t\tGRADLE_VERSIONS = Arrays.asList(\"7.3.3\", \"7.4\");\n+\t\t\tGRADLE_VERSIONS = Arrays.asList(\"7.3.3\", \"7.4.1\");\n \t\t}\n \t\telse if (javaVersion.isCompatibleWith(JavaVersion.VERSION_17)) {\n-\t\t\tGRADLE_VERSIONS = Arrays.asList(\"7.2\", \"7.3.3\", \"7.4\");\n+\t\t\tGRADLE_VERSIONS = Arrays.asList(\"7.2\", \"7.3.3\", \"7.4.1\");\n \t\t}\n \t\telse if (javaVersion.isCompatibleWith(JavaVersion.VERSION_16)) {\n-\t\t\tGRADLE_VERSIONS = Arrays.asList(\"7.0.2\", \"7.1.1\", \"7.2\", \"7.3.3\", \"7.4\");\n+\t\t\tGRADLE_VERSIONS = Arrays.asList(\"7.0.2\", \"7.1.1\", \"7.2\", \"7.3.3\", \"7.4.1\");\n \t\t}\n \t\telse {\n-\t\t\tGRADLE_VERSIONS = Arrays.asList(\"6.8.3\", \"current\", \"7.0.2\", \"7.1.1\", \"7.2\", \"7.3.3\", \"7.4\");\n+\t\t\tGRADLE_VERSIONS = Arrays.asList(\"6.8.3\", \"current\", \"7.0.2\", \"7.1.1\", \"7.2\", \"7.3.3\", \"7.4.1\");\n \t\t}\n \t}\n ",
      "parent_sha": "0e627b00b303bef8eab70d5001157a480b679532"
    }
  },
  {
    "oid": "f3b5e6bb3e13b97c568f2d89f7cb7ca3a24fef22",
    "message": "Adapt to removal of static resource location filtering\n\nSee gh-28506",
    "date": "2021-11-10T20:15:56Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/f3b5e6bb3e13b97c568f2d89f7cb7ca3a24fef22",
    "details": {
      "sha": "9eef700a9d558917d098d5d648d300d14b6df644",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/f3b5e6bb3e13b97c568f2d89f7cb7ca3a24fef22/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Freactive%2FWebFluxAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/f3b5e6bb3e13b97c568f2d89f7cb7ca3a24fef22/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Freactive%2FWebFluxAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Freactive%2FWebFluxAutoConfigurationTests.java?ref=f3b5e6bb3e13b97c568f2d89f7cb7ca3a24fef22",
      "patch": "@@ -50,6 +50,7 @@\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.io.ClassPathResource;\n import org.springframework.format.Parser;\n import org.springframework.format.Printer;\n import org.springframework.format.support.FormattingConversionService;\n@@ -150,13 +151,12 @@ void shouldRegisterResourceHandlerMapping() {\n \t\t\tSimpleUrlHandlerMapping hm = context.getBean(\"resourceHandlerMapping\", SimpleUrlHandlerMapping.class);\n \t\t\tassertThat(hm.getUrlMap().get(\"/**\")).isInstanceOf(ResourceWebHandler.class);\n \t\t\tResourceWebHandler staticHandler = (ResourceWebHandler) hm.getUrlMap().get(\"/**\");\n-\t\t\tassertThat(staticHandler).extracting(\"locationValues\").asList().hasSize(4);\n-\t\t\tassertThat(staticHandler.getLocations()).hasSize(1);\n-\t\t\tassertThat(staticHandler.getLocations().get(0)).hasToString(\"class path resource [public/]\");\n+\t\t\tassertThat(staticHandler.getLocations()).hasSize(4);\n \t\t\tassertThat(hm.getUrlMap().get(\"/webjars/**\")).isInstanceOf(ResourceWebHandler.class);\n \t\t\tResourceWebHandler webjarsHandler = (ResourceWebHandler) hm.getUrlMap().get(\"/webjars/**\");\n-\t\t\tassertThat(webjarsHandler).extracting(\"locationValues\").asList()\n-\t\t\t\t\t.containsExactly(\"classpath:/META-INF/resources/webjars/\");\n+\t\t\tassertThat(webjarsHandler.getLocations()).hasSize(1);\n+\t\t\tassertThat(webjarsHandler.getLocations().get(0))\n+\t\t\t\t\t.isEqualTo(new ClassPathResource(\"/META-INF/resources/webjars/\"));\n \t\t});\n \t}\n ",
      "parent_sha": "85e06438e3827f55cc8686bf2d95c84d45574be9"
    }
  },
  {
    "oid": "6ffe47cd0672e755da48c4d3574b4c3e4e4cf854",
    "message": "Remove deprecated usage of WebTestClientBuilderCustomizer\n\nSee gh-19536",
    "date": "2020-01-06T11:59:12Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/6ffe47cd0672e755da48c4d3574b4c3e4e4cf854",
    "details": {
      "sha": "e8906ca0810e6cad15e3c2376e68cbc61c49cb29",
      "filename": "spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsWebTestClientBuilderCustomizer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/6ffe47cd0672e755da48c4d3574b4c3e4e4cf854/spring-boot-project%2Fspring-boot-test-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fautoconfigure%2Frestdocs%2FRestDocsWebTestClientBuilderCustomizer.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/6ffe47cd0672e755da48c4d3574b4c3e4e4cf854/spring-boot-project%2Fspring-boot-test-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fautoconfigure%2Frestdocs%2FRestDocsWebTestClientBuilderCustomizer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-test-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fautoconfigure%2Frestdocs%2FRestDocsWebTestClientBuilderCustomizer.java?ref=6ffe47cd0672e755da48c4d3574b4c3e4e4cf854",
      "patch": "@@ -16,7 +16,7 @@\n \n package org.springframework.boot.test.autoconfigure.restdocs;\n \n-import org.springframework.boot.test.autoconfigure.web.reactive.WebTestClientBuilderCustomizer;\n+import org.springframework.boot.test.web.reactive.server.WebTestClientBuilderCustomizer;\n import org.springframework.restdocs.webtestclient.WebTestClientRestDocumentationConfigurer;\n import org.springframework.test.web.reactive.server.WebTestClient;\n import org.springframework.util.StringUtils;",
      "parent_sha": "620f5801a27cd2a7e19112418e383e222212e5a0"
    }
  },
  {
    "oid": "216e93fc5c0ce4be2e97de5870b1342bd3104d61",
    "message": "Improve Jetty third-party integration support\n\nMake JettyEmbeddedServletContainerFactory more useful for third-parties\nby providing protected configureWebAppContext, addDefaultServlet and\naddJspServlet methods that sub-classes can call.\n\nFixes gh-1056",
    "date": "2014-06-09T18:42:28Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/216e93fc5c0ce4be2e97de5870b1342bd3104d61",
    "details": {
      "sha": "940157422f3af09a9e65461cd52bcbc627a5dbcf",
      "filename": "spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java",
      "status": "modified",
      "additions": 30,
      "deletions": 10,
      "changes": 40,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/216e93fc5c0ce4be2e97de5870b1342bd3104d61/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fembedded%2Fjetty%2FJettyEmbeddedServletContainerFactory.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/216e93fc5c0ce4be2e97de5870b1342bd3104d61/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fembedded%2Fjetty%2FJettyEmbeddedServletContainerFactory.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fembedded%2Fjetty%2FJettyEmbeddedServletContainerFactory.java?ref=216e93fc5c0ce4be2e97de5870b1342bd3104d61",
      "patch": "@@ -55,6 +55,7 @@\n  * \n  * @author Phillip Webb\n  * @author Dave Syer\n+ * @author Andrey Hihlovskiy\n  * @see #setPort(int)\n  * @see #setConfigurations(Collection)\n  * @see JettyEmbeddedServletContainer\n@@ -100,7 +101,24 @@ public EmbeddedServletContainer getEmbeddedServletContainer(\n \t\tJettyEmbeddedWebAppContext context = new JettyEmbeddedWebAppContext();\n \t\tint port = (getPort() >= 0 ? getPort() : 0);\n \t\tServer server = new Server(new InetSocketAddress(getAddress(), port));\n+\t\tconfigureWebAppContext(context, initializers);\n+\t\tserver.setHandler(context);\n+\t\tthis.logger.info(\"Server initialized with port: \" + port);\n+\t\tfor (JettyServerCustomizer customizer : getServerCustomizers()) {\n+\t\t\tcustomizer.customize(server);\n+\t\t}\n+\n+\t\treturn getJettyEmbeddedServletContainer(server);\n+\t}\n \n+\t/**\n+\t * Configure the given Jetty {@link WebAppContext} for use.\n+\t * @param context the context to configure\n+\t * @param initializers the set of initializers to apply\n+\t */\n+\tprotected final void configureWebAppContext(WebAppContext context,\n+\t\t\tServletContextInitializer... initializers) {\n+\t\tAssert.notNull(context, \"Context must not be null\");\n \t\tif (this.resourceLoader != null) {\n \t\t\tcontext.setClassLoader(this.resourceLoader.getClassLoader());\n \t\t}\n@@ -123,14 +141,6 @@ public EmbeddedServletContainer getEmbeddedServletContainer(\n \t\tcontext.getSessionHandler().getSessionManager()\n \t\t\t\t.setMaxInactiveInterval(getSessionTimeout());\n \t\tpostProcessWebAppContext(context);\n-\n-\t\tserver.setHandler(context);\n-\t\tthis.logger.info(\"Server initialized with port: \" + port);\n-\t\tfor (JettyServerCustomizer customizer : getServerCustomizers()) {\n-\t\t\tcustomizer.customize(server);\n-\t\t}\n-\n-\t\treturn getJettyEmbeddedServletContainer(server);\n \t}\n \n \tprivate void configureDocumentRoot(WebAppContext handler) {\n@@ -151,7 +161,12 @@ private void configureDocumentRoot(WebAppContext handler) {\n \t\t}\n \t}\n \n-\tprivate void addDefaultServlet(WebAppContext context) {\n+\t/**\n+\t * Add Jetty's {@code DefaultServlet} to the given {@link WebAppContext}.\n+\t * @param context the jetty {@link WebAppContext}\n+\t */\n+\tprotected final void addDefaultServlet(WebAppContext context) {\n+\t\tAssert.notNull(context, \"Context must not be null\");\n \t\tServletHolder holder = new ServletHolder();\n \t\tholder.setName(\"default\");\n \t\tholder.setClassName(\"org.eclipse.jetty.servlet.DefaultServlet\");\n@@ -161,7 +176,12 @@ private void addDefaultServlet(WebAppContext context) {\n \t\tcontext.getServletHandler().getServletMapping(\"/\").setDefault(true);\n \t}\n \n-\tprivate void addJspServlet(WebAppContext context) {\n+\t/**\n+\t * Add Jetty's {@code JspServlet} to the given {@link WebAppContext}.\n+\t * @param context the jetty {@link WebAppContext}\n+\t */\n+\tprotected final void addJspServlet(WebAppContext context) {\n+\t\tAssert.notNull(context, \"Context must not be null\");\n \t\tServletHolder holder = new ServletHolder();\n \t\tholder.setName(\"jsp\");\n \t\tholder.setClassName(getJspServletClassName());",
      "parent_sha": "2ad4c47d18a40f95ccb0972d3ed494850f214e9f"
    }
  },
  {
    "oid": "d37e7175001199768e0008087ee7d18bf3655af8",
    "message": "Polish",
    "date": "2018-07-26T10:35:12Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/d37e7175001199768e0008087ee7d18bf3655af8",
    "details": {
      "sha": "b613000a0629d85384bb68d1feb8e8201c09605a",
      "filename": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerMapping.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/d37e7175001199768e0008087ee7d18bf3655af8/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fservlet%2FCompositeHandlerMapping.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/d37e7175001199768e0008087ee7d18bf3655af8/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fservlet%2FCompositeHandlerMapping.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fservlet%2FCompositeHandlerMapping.java?ref=d37e7175001199768e0008087ee7d18bf3655af8",
      "patch": "@@ -24,12 +24,11 @@\n import org.springframework.beans.factory.ListableBeanFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n-import org.springframework.web.servlet.HandlerExceptionResolver;\n import org.springframework.web.servlet.HandlerExecutionChain;\n import org.springframework.web.servlet.HandlerMapping;\n \n /**\n- * Composite {@link HandlerExceptionResolver}.\n+ * Composite {@link HandlerMapping}.\n  *\n  * @author Andy Wilkinson\n  * @author Stephane Nicoll",
      "parent_sha": "94ea7d800d81682f9f8db815bc0f10ea309dddff"
    }
  },
  {
    "oid": "1697174cd85b1e0681d10b4fdf9ba0359084eec8",
    "message": "Remove ExtendedPathMatchingResourcePatternResolver\n\nRemove ExtendedPathMatchingResourcePatternResolver which is not required\nwith Spring 4.1\n\nFixes gh-1420",
    "date": "2014-09-04T01:44:02Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/1697174cd85b1e0681d10b4fdf9ba0359084eec8",
    "details": {
      "sha": "6163d590e4e2b71a061c0f7354a0bcc2fe6c6415",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 103,
      "changes": 105,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/1697174cd85b1e0681d10b4fdf9ba0359084eec8/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2FMessageSourceAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/1697174cd85b1e0681d10b4fdf9ba0359084eec8/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2FMessageSourceAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2FMessageSourceAutoConfiguration.java?ref=1697174cd85b1e0681d10b4fdf9ba0359084eec8",
      "patch": "@@ -17,15 +17,7 @@\n package org.springframework.boot.autoconfigure;\n \n import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.util.Arrays;\n-import java.util.LinkedHashSet;\n-import java.util.Set;\n-\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration.ResourceBundleCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -41,10 +33,8 @@\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n import org.springframework.core.io.Resource;\n-import org.springframework.core.io.UrlResource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n-import org.springframework.util.ResourceUtils;\n import org.springframework.util.StringUtils;\n \n import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\n@@ -128,7 +118,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,\n \n \t\tprivate Resource[] getResources(ClassLoader classLoader, String name) {\n \t\t\ttry {\n-\t\t\t\treturn new ExtendedPathMatchingResourcePatternResolver(classLoader)\n+\t\t\t\treturn new PathMatchingResourcePatternResolver(classLoader)\n \t\t\t\t\t\t.getResources(\"classpath*:\" + name + \"*.properties\");\n \t\t\t}\n \t\t\tcatch (IOException ex) {\n@@ -138,95 +128,4 @@ private Resource[] getResources(ClassLoader classLoader, String name) {\n \n \t}\n \n-\t/**\n-\t * Extended version of {@link PathMatchingResourcePatternResolver} to deal with the\n-\t * fact that \"{@code classpath*:...*.properties}\" patterns don't work with\n-\t * {@link URLClassLoader}s.\n-\t */\n-\tprivate static class ExtendedPathMatchingResourcePatternResolver extends\n-\t\t\tPathMatchingResourcePatternResolver {\n-\n-\t\tprivate static final Log logger = LogFactory\n-\t\t\t\t.getLog(PathMatchingResourcePatternResolver.class);\n-\n-\t\tprivate static final String JAR_FILE_EXTENSION = \".jar\";\n-\n-\t\tprivate static final String JAR_URL_PREFIX = \"jar:\";\n-\n-\t\tpublic ExtendedPathMatchingResourcePatternResolver(ClassLoader classLoader) {\n-\t\t\tsuper(classLoader);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected Resource[] findAllClassPathResources(String location)\n-\t\t\t\tthrows IOException {\n-\t\t\tString path = location;\n-\t\t\tif (path.startsWith(\"/\")) {\n-\t\t\t\tpath = path.substring(1);\n-\t\t\t}\n-\t\t\tif (\"\".equals(path)) {\n-\t\t\t\tSet<Resource> result = new LinkedHashSet<Resource>(16);\n-\t\t\t\tresult.addAll(Arrays.asList(super.findAllClassPathResources(location)));\n-\t\t\t\taddAllClassLoaderJarRoots(getClassLoader(), result);\n-\t\t\t\treturn result.toArray(new Resource[result.size()]);\n-\t\t\t}\n-\t\t\treturn super.findAllClassPathResources(location);\n-\t\t}\n-\n-\t\tprivate void addAllClassLoaderJarRoots(ClassLoader classLoader,\n-\t\t\t\tSet<Resource> result) {\n-\t\t\tif (classLoader != null) {\n-\t\t\t\tif (classLoader instanceof URLClassLoader) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\taddAllClassLoaderJarUrls(\n-\t\t\t\t\t\t\t\t((URLClassLoader) classLoader).getURLs(), result);\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (Exception ex) {\n-\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\t\tlogger.debug(\"Cannot introspect jar files since \"\n-\t\t\t\t\t\t\t\t\t+ \"ClassLoader [\" + classLoader\n-\t\t\t\t\t\t\t\t\t+ \"] does not support 'getURLs()': \" + ex);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\taddAllClassLoaderJarRoots(classLoader.getParent(), result);\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception ex) {\n-\t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(\"Cannot introspect jar files in parent \"\n-\t\t\t\t\t\t\t\t+ \"ClassLoader since [\" + classLoader\n-\t\t\t\t\t\t\t\t+ \"] does not support 'getParent()': \" + ex);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tprivate void addAllClassLoaderJarUrls(URL[] urls, Set<Resource> result) {\n-\t\t\tfor (URL url : urls) {\n-\t\t\t\tif (isJarFileUrl(url)) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tUrlResource jarResource = new UrlResource(JAR_URL_PREFIX\n-\t\t\t\t\t\t\t\t+ url.toString() + ResourceUtils.JAR_URL_SEPARATOR);\n-\t\t\t\t\t\tif (jarResource.exists()) {\n-\t\t\t\t\t\t\tresult.add(jarResource);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (MalformedURLException ex) {\n-\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\t\tlogger.debug(\"Cannot search for matching files underneath \"\n-\t\t\t\t\t\t\t\t\t+ url + \" because it cannot be accessed as a JAR\", ex);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tprivate boolean isJarFileUrl(URL url) {\n-\t\t\treturn ResourceUtils.URL_PROTOCOL_FILE.equals(url.getProtocol())\n-\t\t\t\t\t&& url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION);\n-\t\t}\n-\n-\t}\n-\n }",
      "parent_sha": "d4ad29782de02df6e8067fb709bf4fcbf018ae7a"
    }
  },
  {
    "oid": "f42b6199aec787d2912c77baf479edf9727bb0e7",
    "message": "Polish",
    "date": "2019-04-09T10:21:28Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/f42b6199aec787d2912c77baf479edf9727bb0e7",
    "details": {
      "sha": "5dedd831461d29eddfa129beb0a5f9f0227b8102",
      "filename": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LogFileWebEndpointAutoConfigurationTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/f42b6199aec787d2912c77baf479edf9727bb0e7/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Flogging%2FLogFileWebEndpointAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/f42b6199aec787d2912c77baf479edf9727bb0e7/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Flogging%2FLogFileWebEndpointAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Flogging%2FLogFileWebEndpointAutoConfigurationTests.java?ref=f42b6199aec787d2912c77baf479edf9727bb0e7",
      "patch": "@@ -25,6 +25,7 @@\n import org.junit.rules.TemporaryFolder;\n \n import org.springframework.boot.actuate.logging.LogFileWebEndpoint;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n import org.springframework.core.io.Resource;\n import org.springframework.util.FileCopyUtils;\n@@ -43,7 +44,8 @@\n public class LogFileWebEndpointAutoConfigurationTests {\n \n \tprivate WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n-\t\t\t.withUserConfiguration(LogFileWebEndpointAutoConfiguration.class);\n+\t\t\t.withConfiguration(\n+\t\t\t\t\tAutoConfigurations.of(LogFileWebEndpointAutoConfiguration.class));\n \n \t@Rule\n \tpublic final TemporaryFolder temp = new TemporaryFolder();",
      "parent_sha": "a82807213209443ec6db5a3760995fbabea02a33"
    }
  },
  {
    "oid": "4db4c81b9bea4e487d2a9aacb054ee54ad18ea64",
    "message": "Polish",
    "date": "2017-04-28T16:38:56Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/4db4c81b9bea4e487d2a9aacb054ee54ad18ea64",
    "details": {
      "sha": "49db8492e698df832a6235d068a9299f0370ff9b",
      "filename": "spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfigurationTests.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/4db4c81b9bea4e487d2a9aacb054ee54ad18ea64/spring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fvalidation%2FValidationAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/4db4c81b9bea4e487d2a9aacb054ee54ad18ea64/spring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fvalidation%2FValidationAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fvalidation%2FValidationAutoConfigurationTests.java?ref=4db4c81b9bea4e487d2a9aacb054ee54ad18ea64",
      "patch": "@@ -121,8 +121,8 @@ public void validationAutoConfigurationWhenUserProvidesSpringValidatorShouldCrea\n \t\tString[] springValidatorNames = this.context\n \t\t\t\t.getBeanNamesForType(org.springframework.validation.Validator.class);\n \t\tassertThat(jsrValidatorNames).containsExactly(\"defaultValidator\");\n-\t\tassertThat(springValidatorNames).containsExactly(\n-\t\t\t\t\"customValidator\", \"anotherCustomValidator\", \"defaultValidator\");\n+\t\tassertThat(springValidatorNames).containsExactly(\"customValidator\",\n+\t\t\t\t\"anotherCustomValidator\", \"defaultValidator\");\n \t\tValidator jsrValidator = this.context.getBean(Validator.class);\n \t\torg.springframework.validation.Validator springValidator = this.context\n \t\t\t\t.getBean(org.springframework.validation.Validator.class);\n@@ -138,14 +138,14 @@ public void validationAutoConfigurationWhenUserProvidesPrimarySpringValidatorSho\n \t\tString[] springValidatorNames = this.context\n \t\t\t\t.getBeanNamesForType(org.springframework.validation.Validator.class);\n \t\tassertThat(jsrValidatorNames).containsExactly(\"defaultValidator\");\n-\t\tassertThat(springValidatorNames).containsExactly(\n-\t\t\t\t\"customValidator\", \"anotherCustomValidator\", \"defaultValidator\");\n+\t\tassertThat(springValidatorNames).containsExactly(\"customValidator\",\n+\t\t\t\t\"anotherCustomValidator\", \"defaultValidator\");\n \t\tValidator jsrValidator = this.context.getBean(Validator.class);\n \t\torg.springframework.validation.Validator springValidator = this.context\n \t\t\t\t.getBean(org.springframework.validation.Validator.class);\n \t\tassertThat(jsrValidator).isInstanceOf(LocalValidatorFactoryBean.class);\n-\t\tassertThat(springValidator).isEqualTo(\n-\t\t\t\tthis.context.getBean(\"anotherCustomValidator\"));\n+\t\tassertThat(springValidator)\n+\t\t\t\t.isEqualTo(this.context.getBean(\"anotherCustomValidator\"));\n \t\tassertThat(isPrimaryBean(\"defaultValidator\")).isFalse();\n \t}\n ",
      "parent_sha": "df05aa47015505e182bb61ea28bac0feafbe74ce"
    }
  },
  {
    "oid": "61ad227178485e87b69f335c1fa384ce69a53cec",
    "message": "Update copyright",
    "date": "2023-01-19T10:51:20Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/61ad227178485e87b69f335c1fa384ce69a53cec",
    "details": {
      "sha": "bb5403b4133b84c02061168808c2a198e0f1d8e8",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/61ad227178485e87b69f335c1fa384ce69a53cec/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fgroovy%2Ftemplate%2FGroovyTemplateAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/61ad227178485e87b69f335c1fa384ce69a53cec/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fgroovy%2Ftemplate%2FGroovyTemplateAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fgroovy%2Ftemplate%2FGroovyTemplateAutoConfiguration.java?ref=61ad227178485e87b69f335c1fa384ce69a53cec",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2022 the original author or authors.\n+ * Copyright 2012-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.",
      "parent_sha": "fe7aeffc0dc0ed4f279458aa7ee2c23c6b575f7c"
    }
  },
  {
    "oid": "6e6d8de8eda35fa015d0a92a9009501e9f53adb5",
    "message": "Fixing typos in StandardStackTracePrinter\n\nSee gh-44396\n\nSigned-off-by: Tyler Gregory <tyler.w.gregory@gmail.com>",
    "date": "2025-02-21T17:30:43Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/6e6d8de8eda35fa015d0a92a9009501e9f53adb5",
    "details": {
      "sha": "14af65ea35172d8d25984f79e58320077f1faa70",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/StandardStackTracePrinter.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/6e6d8de8eda35fa015d0a92a9009501e9f53adb5/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Flogging%2FStandardStackTracePrinter.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/6e6d8de8eda35fa015d0a92a9009501e9f53adb5/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Flogging%2FStandardStackTracePrinter.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Flogging%2FStandardStackTracePrinter.java?ref=6e6d8de8eda35fa015d0a92a9009501e9f53adb5",
      "patch": "@@ -46,7 +46,7 @@ public final class StandardStackTracePrinter implements StackTracePrinter {\n \tprivate static final ToIntFunction<StackTraceElement> DEFAULT_FRAME_HASHER = (frame) -> Objects\n \t\t.hash(frame.getClassName(), frame.getMethodName(), frame.getLineNumber());\n \n-\tprivate static final int UNLIMTED = Integer.MAX_VALUE;\n+\tprivate static final int UNLIMITED = Integer.MAX_VALUE;\n \n \tprivate final EnumSet<Option> options;\n \n@@ -286,7 +286,7 @@ private boolean hasOption(Option option) {\n \t * @return a {@link StandardStackTracePrinter} that prints the stack trace root last\n \t */\n \tpublic static StandardStackTracePrinter rootLast() {\n-\t\treturn new StandardStackTracePrinter(EnumSet.noneOf(Option.class), UNLIMTED, null, null, null, null, null,\n+\t\treturn new StandardStackTracePrinter(EnumSet.noneOf(Option.class), UNLIMITED, null, null, null, null, null,\n \t\t\t\tnull);\n \t}\n \n@@ -296,7 +296,7 @@ public static StandardStackTracePrinter rootLast() {\n \t * @return a {@link StandardStackTracePrinter} that prints the stack trace root first\n \t */\n \tpublic static StandardStackTracePrinter rootFirst() {\n-\t\treturn new StandardStackTracePrinter(EnumSet.of(Option.ROOT_FIRST), UNLIMTED, null, null, null, null, null,\n+\t\treturn new StandardStackTracePrinter(EnumSet.of(Option.ROOT_FIRST), UNLIMITED, null, null, null, null, null,\n \t\t\t\tnull);\n \t}\n \n@@ -385,7 +385,7 @@ void println(String indent, String string) throws IOException {\n \n \t/**\n \t * Holds the stacktrace for a specific throwable and caches things that are expensive\n-\t * to calcualte.\n+\t * to calculate.\n \t */\n \tprivate static final class StackTrace {\n ",
      "parent_sha": "ea0eea371d35346493564f022c0f54604e0955a8"
    }
  },
  {
    "oid": "eb4144eb97aeb056a96f69808fea415cc6368dc5",
    "message": "Add clarification on when @DevaultValue is used during binding\n\nCloses gh-26742",
    "date": "2021-07-01T22:39:16Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/eb4144eb97aeb056a96f69808fea415cc6368dc5",
    "details": {
      "sha": "a1363161cc6812537f2f7678c3ba92e5fc01f6f6",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/DefaultValue.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/eb4144eb97aeb056a96f69808fea415cc6368dc5/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2Fbind%2FDefaultValue.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/eb4144eb97aeb056a96f69808fea415cc6368dc5/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2Fbind%2FDefaultValue.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fcontext%2Fproperties%2Fbind%2FDefaultValue.java?ref=eb4144eb97aeb056a96f69808fea415cc6368dc5",
      "patch": "@@ -25,7 +25,13 @@\n /**\n  * Annotation that can be used to specify the default value when binding to an immutable\n  * property. This annotation can also be used with nested properties to indicate that a\n- * value should always be bound (rather than binding {@code null}).\n+ * value should always be bound (rather than binding {@code null}). The value from this\n+ * annotation will only be used if the property is not found in the property sources used\n+ * by the {@link Binder}. For example, if the property is present in the\n+ * {@link org.springframework.core.env.Environment} when binding to\n+ * {@link org.springframework.boot.context.properties.ConfigurationProperties @ConfigurationProperties},\n+ * the default value for the property will not be used even if the property value is\n+ * empty.\n  *\n  * @author Madhura Bhave\n  * @since 2.2.0",
      "parent_sha": "44b0bd43a415fe4404c1dab938f5489cee77ec9b"
    }
  },
  {
    "oid": "dd11b8adba6226e5be30944b4c8c8d42eaf12430",
    "message": "Fix checkstyle violation\n\nSee gh-21266",
    "date": "2020-04-30T10:43:51Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/dd11b8adba6226e5be30944b4c8c8d42eaf12430",
    "details": {
      "sha": "adea52ebdaa13017c81f33583c598e45ebbe9f2b",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveDataAutoConfigurationTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/dd11b8adba6226e5be30944b4c8c8d42eaf12430/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fdata%2Fmongo%2FMongoReactiveDataAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/dd11b8adba6226e5be30944b4c8c8d42eaf12430/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fdata%2Fmongo%2FMongoReactiveDataAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fdata%2Fmongo%2FMongoReactiveDataAutoConfigurationTests.java?ref=dd11b8adba6226e5be30944b4c8c8d42eaf12430",
      "patch": "@@ -49,16 +49,13 @@ void templateExists() {\n \n \t@Test\n \tvoid whenNoGridFsDatabaseIsConfiguredTheGridFsTemplateUsesTheMainDatabase() {\n-\t\tthis.contextRunner.run((context) -> {\n-\t\t\tassertThat(grisFsTemplateDatabaseName(context)).isEqualTo(\"test\");\n-\t\t});\n+\t\tthis.contextRunner.run((context) -> assertThat(grisFsTemplateDatabaseName(context)).isEqualTo(\"test\"));\n \t}\n \n \t@Test\n \tvoid whenGridFsDatabaseIsConfiguredThenGridFsTemplateUsesIt() {\n-\t\tthis.contextRunner.withPropertyValues(\"spring.data.mongodb.gridFsDatabase:grid\").run((context) -> {\n-\t\t\tassertThat(grisFsTemplateDatabaseName(context)).isEqualTo(\"grid\");\n-\t\t});\n+\t\tthis.contextRunner.withPropertyValues(\"spring.data.mongodb.gridFsDatabase:grid\")\n+\t\t\t\t.run((context) -> assertThat(grisFsTemplateDatabaseName(context)).isEqualTo(\"grid\"));\n \t}\n \n \t@Test",
      "parent_sha": "1abe0f16d0575e53464182935e6ba8a7646fd265"
    }
  },
  {
    "oid": "13202eb278c85cf4879fe7e7e9d6b61d46ce3fe7",
    "message": "Prevent duplicate RequestMatcher in RequestMatcherFactory.antPath()\n\nCloses gh-13706",
    "date": "2018-07-13T07:35:34Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/13202eb278c85cf4879fe7e7e9d6b61d46ce3fe7",
    "details": {
      "sha": "f1c41b47897bc7589f0b3e5f9fb575f7383176a4",
      "filename": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/13202eb278c85cf4879fe7e7e9d6b61d46ce3fe7/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fsecurity%2Fservlet%2FEndpointRequest.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/13202eb278c85cf4879fe7e7e9d6b61d46ce3fe7/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fsecurity%2Fservlet%2FEndpointRequest.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fsecurity%2Fservlet%2FEndpointRequest.java?ref=13202eb278c85cf4879fe7e7e9d6b61d46ce3fe7",
      "patch": "@@ -299,12 +299,12 @@ private static class RequestMatcherFactory {\n \t\tList<RequestMatcher> antPath(String... parts) {\n \t\t\tList<RequestMatcher> matchers = new ArrayList<>();\n \t\t\tthis.servletPaths.stream().map((p) -> {\n-\t\t\t\tif (StringUtils.hasText(p)) {\n+\t\t\t\tif (StringUtils.hasText(p) && !p.equals(\"/\")) {\n \t\t\t\t\treturn p;\n \t\t\t\t}\n \t\t\t\treturn \"\";\n \t\t\t}).distinct().forEach((path) -> {\n-\t\t\t\tString pattern = (path.equals(\"/\") ? \"\" : path);\n+\t\t\t\tString pattern = path;\n \t\t\t\tfor (String part : parts) {\n \t\t\t\t\tpattern += part;\n \t\t\t\t}",
      "parent_sha": "174cc2bc4eb81868fa3f2dd43a6854af8538dd7c"
    }
  },
  {
    "oid": "98ce54c4c32ba0a5f849f2dbd955e369f97a0875",
    "message": "Fix typo in test methods' names",
    "date": "2015-06-25T03:36:01Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/98ce54c4c32ba0a5f849f2dbd955e369f97a0875",
    "details": {
      "sha": "82fbfdc599244f26ceed7c072439914ae7322fa8",
      "filename": "spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/98ce54c4c32ba0a5f849f2dbd955e369f97a0875/spring-boot-devtools%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdevtools%2Fautoconfigure%2FLocalDevToolsAutoConfigurationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/98ce54c4c32ba0a5f849f2dbd955e369f97a0875/spring-boot-devtools%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdevtools%2Fautoconfigure%2FLocalDevToolsAutoConfigurationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-devtools%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdevtools%2Fautoconfigure%2FLocalDevToolsAutoConfigurationTests.java?ref=98ce54c4c32ba0a5f849f2dbd955e369f97a0875",
      "patch": "@@ -134,7 +134,7 @@ public void liveReloadDisabled() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void restartTriggerdOnClassPathChangeWithRestart() throws Exception {\n+\tpublic void restartTriggeredOnClassPathChangeWithRestart() throws Exception {\n \t\tthis.context = initializeAndRun(Config.class);\n \t\tClassPathChangedEvent event = new ClassPathChangedEvent(this.context,\n \t\t\t\tCollections.<ChangedFiles> emptySet(), true);\n@@ -143,7 +143,7 @@ public void restartTriggerdOnClassPathChangeWithRestart() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void restartNotTriggerdOnClassPathChangeWithRestart() throws Exception {\n+\tpublic void restartNotTriggeredOnClassPathChangeWithRestart() throws Exception {\n \t\tthis.context = initializeAndRun(Config.class);\n \t\tClassPathChangedEvent event = new ClassPathChangedEvent(this.context,\n \t\t\t\tCollections.<ChangedFiles> emptySet(), false);",
      "parent_sha": "4236a9336d264fe0606220ed9de2065e5fdad0f6"
    }
  },
  {
    "oid": "24202a0a785d3789d8b729a1da9983fdff0d2652",
    "message": "Update copyright year of changed files",
    "date": "2024-10-26T01:21:53Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/24202a0a785d3789d8b729a1da9983fdff0d2652",
    "details": {
      "sha": "aaf630b1ad0e335262f7feac1b079c3f9b910598",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletPath.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/24202a0a785d3789d8b729a1da9983fdff0d2652/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2FDispatcherServletPath.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/24202a0a785d3789d8b729a1da9983fdff0d2652/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2FDispatcherServletPath.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fweb%2Fservlet%2FDispatcherServletPath.java?ref=24202a0a785d3789d8b729a1da9983fdff0d2652",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2019 the original author or authors.\n+ * Copyright 2012-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.",
      "parent_sha": "387b14183a604a909b36f0178c90af120b236eb6"
    }
  },
  {
    "oid": "988d65030464a8e93e49df70a1053e2aa6e5f80b",
    "message": "Adapt server not running check\n\nThe upgrade to the Couchbase SDK v3 changed how errors are reported\nwhen the cluster is not available. This commit updates the check to\nlook for the new exception in the hope a more solid check can be found\nshortly.",
    "date": "2020-03-17T16:55:57Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/988d65030464a8e93e49df70a1053e2aa6e5f80b",
    "details": {
      "sha": "8ccc86883240ecdae8b914cf317dc01b0fd4ede4",
      "filename": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/test/java/smoketest/data/couchbase/SampleCouchbaseApplicationTests.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/988d65030464a8e93e49df70a1053e2aa6e5f80b/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-data-couchbase%2Fsrc%2Ftest%2Fjava%2Fsmoketest%2Fdata%2Fcouchbase%2FSampleCouchbaseApplicationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/988d65030464a8e93e49df70a1053e2aa6e5f80b/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-data-couchbase%2Fsrc%2Ftest%2Fjava%2Fsmoketest%2Fdata%2Fcouchbase%2FSampleCouchbaseApplicationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-data-couchbase%2Fsrc%2Ftest%2Fjava%2Fsmoketest%2Fdata%2Fcouchbase%2FSampleCouchbaseApplicationTests.java?ref=988d65030464a8e93e49df70a1053e2aa6e5f80b",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2019 the original author or authors.\n+ * Copyright 2012-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,8 +15,7 @@\n  */\n package smoketest.data.couchbase;\n \n-import java.net.ConnectException;\n-\n+import com.couchbase.client.core.error.FeatureNotAvailableException;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n \n@@ -47,9 +46,10 @@ private boolean serverNotRunning(RuntimeException ex) {\n \t\t@SuppressWarnings(\"serial\")\n \t\tNestedCheckedException nested = new NestedCheckedException(\"failed\", ex) {\n \t\t};\n-\t\tif (nested.contains(ConnectException.class)) {\n+\t\tif (nested.contains(FeatureNotAvailableException.class)) {\n \t\t\tThrowable root = nested.getRootCause();\n-\t\t\tif (root.getMessage().contains(\"Connection refused\")) {\n+\t\t\t// This is not ideal, we should have a better way to know what is going on\n+\t\t\tif (root.getMessage().contains(\"The cluster does not support cluster-level queries\")) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}",
      "parent_sha": "58eb0ba4d3919743901c9900c17f6f8c34d80aed"
    }
  },
  {
    "oid": "184cd0c708f6767d190d2168b1ae84f0106bef70",
    "message": "Avoid CGLIB requirement in MessageSourceAutoConfiguration\n\nCloses gh-13824",
    "date": "2018-07-19T11:58:19Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/184cd0c708f6767d190d2168b1ae84f0106bef70",
    "details": {
      "sha": "ec87833c6fcc5fea1e6964df37653de5a51b6cbe",
      "filename": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/184cd0c708f6767d190d2168b1ae84f0106bef70/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcontext%2FMessageSourceAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/184cd0c708f6767d190d2168b1ae84f0106bef70/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcontext%2FMessageSourceAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fcontext%2FMessageSourceAutoConfiguration.java?ref=184cd0c708f6767d190d2168b1ae84f0106bef70",
      "patch": "@@ -64,8 +64,7 @@ public MessageSourceProperties messageSourceProperties() {\n \t}\n \n \t@Bean\n-\tpublic MessageSource messageSource() {\n-\t\tMessageSourceProperties properties = messageSourceProperties();\n+\tpublic MessageSource messageSource(MessageSourceProperties properties) {\n \t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n \t\tif (StringUtils.hasText(properties.getBasename())) {\n \t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(",
      "parent_sha": "ceaac988473481fc56cfbfc84f914289ff79fb37"
    }
  },
  {
    "oid": "52f1799c20e7a754336d60f2ef8ed9ae17283f53",
    "message": "Polish formatting",
    "date": "2022-02-05T18:15:43Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/52f1799c20e7a754336d60f2ef8ed9ae17283f53",
    "details": {
      "sha": "ff2c5d3d3668d78b803af93bec6ad6a061b55f83",
      "filename": "spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/using/usingthespringbootapplicationannotation/springapplication/MyApplication.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/52f1799c20e7a754336d60f2ef8ed9ae17283f53/spring-boot-project%2Fspring-boot-docs%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdocs%2Fusing%2Fusingthespringbootapplicationannotation%2Fspringapplication%2FMyApplication.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/52f1799c20e7a754336d60f2ef8ed9ae17283f53/spring-boot-project%2Fspring-boot-docs%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdocs%2Fusing%2Fusingthespringbootapplicationannotation%2Fspringapplication%2FMyApplication.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-docs%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fdocs%2Fusing%2Fusingthespringbootapplicationannotation%2Fspringapplication%2FMyApplication.java?ref=52f1799c20e7a754336d60f2ef8ed9ae17283f53",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2021 the original author or authors.\n+ * Copyright 2012-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,8 +19,8 @@\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n \n-@SpringBootApplication // same as @SpringBootConfiguration @EnableAutoConfiguration\n-\t\t\t\t\t\t// @ComponentScan\n+// Same as @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan\n+@SpringBootApplication\n public class MyApplication {\n \n \tpublic static void main(String[] args) {",
      "parent_sha": "12a33a2eaf3fd0d506475660495edf56b607af8b"
    }
  },
  {
    "oid": "f573f19aa5b5451f626efaffbe8d9d4563dba7d2",
    "message": "Fix race condition in SampleQuartzApplicationWebTests",
    "date": "2025-03-28T13:16:46Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/f573f19aa5b5451f626efaffbe8d9d4563dba7d2",
    "details": {
      "sha": "2194f9f700de53cd4b5f147f752b6afd1a45ead8",
      "filename": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-quartz/src/test/java/smoketest/quartz/SampleQuartzApplicationWebTests.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/f573f19aa5b5451f626efaffbe8d9d4563dba7d2/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-quartz%2Fsrc%2Ftest%2Fjava%2Fsmoketest%2Fquartz%2FSampleQuartzApplicationWebTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/f573f19aa5b5451f626efaffbe8d9d4563dba7d2/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-quartz%2Fsrc%2Ftest%2Fjava%2Fsmoketest%2Fquartz%2FSampleQuartzApplicationWebTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-tests%2Fspring-boot-smoke-tests%2Fspring-boot-smoke-test-quartz%2Fsrc%2Ftest%2Fjava%2Fsmoketest%2Fquartz%2FSampleQuartzApplicationWebTests.java?ref=f573f19aa5b5451f626efaffbe8d9d4563dba7d2",
      "patch": "@@ -16,13 +16,15 @@\n \n package smoketest.quartz;\n \n+import java.time.Duration;\n import java.time.Instant;\n import java.time.temporal.ChronoUnit;\n import java.util.Map;\n \n import org.assertj.core.api.InstanceOfAssertFactories;\n import org.assertj.core.api.InstanceOfAssertFactory;\n import org.assertj.core.api.MapAssert;\n+import org.awaitility.Awaitility;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n \n@@ -110,7 +112,9 @@ void quartzJobTriggeredManually(CapturedOutput output) {\n \t\tassertThat(content).extractingByKey(\"triggerTime\", InstanceOfAssertFactories.STRING)\n \t\t\t.satisfies((triggerTime) -> assertThat(Instant.parse(triggerTime)).isCloseTo(Instant.now(),\n \t\t\t\t\twithin(10, ChronoUnit.SECONDS)));\n-\t\tassertThat(output).contains(\"Hello On Demand Job\");\n+\t\tAwaitility.await()\n+\t\t\t.atMost(Duration.ofSeconds(30))\n+\t\t\t.untilAsserted(() -> assertThat(output).contains(\"Hello On Demand Job\"));\n \t}\n \n \tprivate Map<String, Object> getContent(String path) {",
      "parent_sha": "2a92c0df1e3bc3c48773563aa8c5f435d0711d2f"
    }
  },
  {
    "oid": "cc88a1db973080f5776c336840b4dc80c189e4df",
    "message": "Test Gradle Plugin against Gradle 8.10\n\nCloses gh-41870",
    "date": "2024-08-15T10:07:15Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/cc88a1db973080f5776c336840b4dc80c189e4df",
    "details": {
      "sha": "c21c84badac7d509e1fd4b57496a97da44cf74ca",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-gradle-test-support/src/main/java/org/springframework/boot/testsupport/gradle/testkit/GradleVersions.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/cc88a1db973080f5776c336840b4dc80c189e4df/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Fgradle%2Ftestkit%2FGradleVersions.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/cc88a1db973080f5776c336840b4dc80c189e4df/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Fgradle%2Ftestkit%2FGradleVersions.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-gradle-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Fgradle%2Ftestkit%2FGradleVersions.java?ref=cc88a1db973080f5776c336840b4dc80c189e4df",
      "patch": "@@ -34,9 +34,9 @@ private GradleVersions() {\n \n \tpublic static List<String> allCompatible() {\n \t\tif (isJavaVersion(JavaVersion.VERSION_20)) {\n-\t\t\treturn Arrays.asList(\"8.1.1\", \"8.9\");\n+\t\t\treturn Arrays.asList(\"8.1.1\", \"8.10\");\n \t\t}\n-\t\treturn Arrays.asList(\"7.5.1\", GradleVersion.current().getVersion(), \"8.0.2\", \"8.9\");\n+\t\treturn Arrays.asList(\"7.5.1\", GradleVersion.current().getVersion(), \"8.0.2\", \"8.10\");\n \t}\n \n \tpublic static String minimumCompatible() {",
      "parent_sha": "e9da0c237eeba885a55a98428c7576f4ec07911f"
    }
  },
  {
    "oid": "a0fb13877187cbdaca308f9a099925fca45353db",
    "message": "Fix to assert parameter names in EndpointServlet.withInitParameters()\n\nSee gh-11809",
    "date": "2018-01-27T04:31:56Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/a0fb13877187cbdaca308f9a099925fca45353db",
    "details": {
      "sha": "44239b2fde550b26cc4759558ede69e2b0ca2118",
      "filename": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointServlet.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/a0fb13877187cbdaca308f9a099925fca45353db/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fweb%2FEndpointServlet.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/a0fb13877187cbdaca308f9a099925fca45353db/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fweb%2FEndpointServlet.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fweb%2FEndpointServlet.java?ref=a0fb13877187cbdaca308f9a099925fca45353db",
      "patch": "@@ -61,9 +61,9 @@ public EndpointServlet withInitParameter(String name, String value) {\n \n \tpublic EndpointServlet withInitParameters(Map<String, String> initParameters) {\n \t\tAssert.notNull(initParameters, \"InitParameters must not be null\");\n-\t\tboolean hasEmptyKey = initParameters.values().stream()\n-\t\t\t\t.anyMatch((key) -> !StringUtils.hasText(key));\n-\t\tAssert.isTrue(!hasEmptyKey, \"InitParameters must not contain empty keys\");\n+\t\tboolean hasEmptyName = initParameters.keySet().stream()\n+\t\t\t\t.anyMatch((name) -> !StringUtils.hasText(name));\n+\t\tAssert.isTrue(!hasEmptyName, \"InitParameters must not contain empty names\");\n \t\tMap<String, String> mergedInitParameters = new LinkedHashMap<>(\n \t\t\t\tthis.initParameters);\n \t\tmergedInitParameters.putAll(initParameters);",
      "parent_sha": "6830ad7892626f5fba33f6c1db929c1ff0f40959"
    }
  },
  {
    "oid": "0e815d234248d60f4c509fd708b62066f2f654e7",
    "message": "Polish \"Use Stream.toList()\"\n\nSee gh-36167",
    "date": "2023-07-05T08:39:38Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/0e815d234248d60f4c509fd708b62066f2f654e7",
    "details": {
      "sha": "4f9217847e4fffcab40dc0f7023cc0bd509ee4d1",
      "filename": "buildSrc/src/main/java/org/springframework/boot/build/architecture/ArchitectureCheck.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/0e815d234248d60f4c509fd708b62066f2f654e7/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Farchitecture%2FArchitectureCheck.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/0e815d234248d60f4c509fd708b62066f2f654e7/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Farchitecture%2FArchitectureCheck.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/buildSrc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fbuild%2Farchitecture%2FArchitectureCheck.java?ref=0e815d234248d60f4c509fd708b62066f2f654e7",
      "patch": "@@ -21,6 +21,7 @@\n import java.nio.file.Files;\n import java.nio.file.StandardOpenOption;\n import java.util.List;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import com.tngtech.archunit.base.DescribedPredicate;\n@@ -74,7 +75,7 @@ void checkArchitecture() throws IOException {\n \t\t\t\tallBeanPostProcessorBeanMethodsShouldBeStaticAndHaveParametersThatWillNotCausePrematureInitialization(),\n \t\t\t\tallBeanFactoryPostProcessorBeanMethodsShouldBeStaticAndHaveNoParameters(),\n \t\t\t\tnoClassesShouldCallStepVerifierStepVerifyComplete(),\n-\t\t\t\tnoClassesShouldConfigureDefaultStepVerifierTimeout())\n+\t\t\t\tnoClassesShouldConfigureDefaultStepVerifierTimeout(), noClassesShouldCallCollectorsToList())\n \t\t\t.map((rule) -> rule.evaluate(javaClasses))\n \t\t\t.filter(EvaluationResult::hasViolation)\n \t\t\t.toList();\n@@ -177,6 +178,13 @@ private ArchRule noClassesShouldConfigureDefaultStepVerifierTimeout() {\n \t\t\t.because(\"expectComplete().verify(Duration) should be used instead\");\n \t}\n \n+\tprivate ArchRule noClassesShouldCallCollectorsToList() {\n+\t\treturn ArchRuleDefinition.noClasses()\n+\t\t\t.should()\n+\t\t\t.callMethod(Collectors.class, \"toList\")\n+\t\t\t.because(\"java.util.stream.Stream.toList() should be used instead\");\n+\t}\n+\n \tpublic void setClasses(FileCollection classes) {\n \t\tthis.classes = classes;\n \t}",
      "parent_sha": "0fa58c04e7ba504a291736fa6d829e80e5cdb80a"
    }
  },
  {
    "oid": "2884d99a5dcd2c32f06e6bc48ae9ba189241154e",
    "message": "Complete move to Testcontainers' Neo4j container\n\nCloses gh-15638",
    "date": "2019-02-12T09:46:11Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/2884d99a5dcd2c32f06e6bc48ae9ba189241154e",
    "details": {
      "sha": "842e35faeda05b0f512ec56886e67d36ee9ef1b3",
      "filename": "spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/data/neo4j/DataNeo4jTestPropertiesIntegrationTests.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/2884d99a5dcd2c32f06e6bc48ae9ba189241154e/spring-boot-project%2Fspring-boot-test-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fautoconfigure%2Fdata%2Fneo4j%2FDataNeo4jTestPropertiesIntegrationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/2884d99a5dcd2c32f06e6bc48ae9ba189241154e/spring-boot-project%2Fspring-boot-test-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fautoconfigure%2Fdata%2Fneo4j%2FDataNeo4jTestPropertiesIntegrationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-test-autoconfigure%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftest%2Fautoconfigure%2Fdata%2Fneo4j%2FDataNeo4jTestPropertiesIntegrationTests.java?ref=2884d99a5dcd2c32f06e6bc48ae9ba189241154e",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,10 +19,10 @@\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.testcontainers.containers.Neo4jContainer;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.boot.testsupport.testcontainers.Neo4jContainer;\n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.env.Environment;\n@@ -43,7 +43,8 @@\n public class DataNeo4jTestPropertiesIntegrationTests {\n \n \t@ClassRule\n-\tpublic static Neo4jContainer neo4j = new Neo4jContainer();\n+\tpublic static Neo4jContainer<?> neo4j = new Neo4jContainer<>()\n+\t\t\t.withAdminPassword(null);\n \n \t@Autowired\n \tprivate Environment environment;\n@@ -59,8 +60,7 @@ static class Initializer\n \t\t@Override\n \t\tpublic void initialize(\n \t\t\t\tConfigurableApplicationContext configurableApplicationContext) {\n-\t\t\tTestPropertyValues\n-\t\t\t\t\t.of(\"spring.data.neo4j.uri=bolt://localhost:\" + neo4j.getMappedPort())\n+\t\t\tTestPropertyValues.of(\"spring.data.neo4j.uri=\" + neo4j.getBoltUrl())\n \t\t\t\t\t.applyTo(configurableApplicationContext.getEnvironment());\n \t\t}\n ",
      "parent_sha": "365ea31a516ea4cae87a37d9b0c60c8355e74125"
    }
  },
  {
    "oid": "af5338f26e04a980f9dc762a3ebdad1cef9b8e87",
    "message": "Formatting",
    "date": "2015-06-17T00:26:26Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/af5338f26e04a980f9dc762a3ebdad1cef9b8e87",
    "details": {
      "sha": "45578677ec3f17b38bf0f8d6db047798bebd4e8f",
      "filename": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/af5338f26e04a980f9dc762a3ebdad1cef9b8e87/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fcache%2FEhCacheStatisticsProvider.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/af5338f26e04a980f9dc762a3ebdad1cef9b8e87/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fcache%2FEhCacheStatisticsProvider.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fcache%2FEhCacheStatisticsProvider.java?ref=af5338f26e04a980f9dc762a3ebdad1cef9b8e87",
      "patch": "@@ -37,8 +37,9 @@ public CacheStatistics getCacheStatistics(CacheManager cacheManager,\n \t\tstatistics.setSize(ehCacheStatistics.getSize());\n \t\tDouble hitRatio = ehCacheStatistics.cacheHitRatio();\n \t\tif (!hitRatio.isNaN()) {\n-\t\t\t// ratio is calculated 'racily' and can drift marginally above unity, so we cap it here\n-\t\t\tdouble sanitizedHitRatio = hitRatio > 1 ? 1 : hitRatio;\n+\t\t\t// ratio is calculated 'racily' and can drift marginally above unity,\n+\t\t\t// so we cap it here\n+\t\t\tdouble sanitizedHitRatio = (hitRatio > 1 ? 1 : hitRatio);\n \t\t\tstatistics.setHitRatio(sanitizedHitRatio);\n \t\t\tstatistics.setMissRatio(1 - sanitizedHitRatio);\n \t\t}",
      "parent_sha": "a33deee9f3ce051654b70c39c12d24defd3bcb98"
    }
  },
  {
    "oid": "fff06822dc6d7bd2f5acd41475223e8a0027a7be",
    "message": "Polish",
    "date": "2018-06-05T11:15:38Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/fff06822dc6d7bd2f5acd41475223e8a0027a7be",
    "details": {
      "sha": "0236567801bb399a7947f7958824058aadcd2ce3",
      "filename": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/fff06822dc6d7bd2f5acd41475223e8a0027a7be/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fmappings%2FMappingsEndpointAutoConfiguration.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/fff06822dc6d7bd2f5acd41475223e8a0027a7be/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fmappings%2FMappingsEndpointAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-actuator-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fautoconfigure%2Fweb%2Fmappings%2FMappingsEndpointAutoConfiguration.java?ref=fff06822dc6d7bd2f5acd41475223e8a0027a7be",
      "patch": "@@ -91,8 +91,7 @@ DispatcherServletsMappingDescriptionProvider dispatcherServletMappingDescription\n \tstatic class ReactiveWebConfiguration {\n \n \t\t@Bean\n-\t\tpublic DispatcherHandlersMappingDescriptionProvider dispatcherHandlerMappingDescriptionProvider(\n-\t\t\t\tApplicationContext applicationContext) {\n+\t\tpublic DispatcherHandlersMappingDescriptionProvider dispatcherHandlerMappingDescriptionProvider() {\n \t\t\treturn new DispatcherHandlersMappingDescriptionProvider();\n \t\t}\n ",
      "parent_sha": "d84e2b90d77f6f5f90f6eedb306b5fa6259469bd"
    }
  },
  {
    "oid": "3b410719e6ee339d1a2164cb27e9d99b57578882",
    "message": "Remove use of reflection in MustacheViewResolver\n\nPrior to this commit the MustacheViewResolver used reflection\nto instantiate a MustacheView class, which fails when using AOT.\nCreating the view without reflection (analogous to the\nFreemarkerViewResolver) will fix this without the need for additional\nconstructor hints.\n\nSee gh-32030",
    "date": "2022-08-17T06:00:43Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/3b410719e6ee339d1a2164cb27e9d99b57578882",
    "details": {
      "sha": "7e4991d2f61762832e9e38a30bbd54e0c74d7023",
      "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheViewResolver.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/3b410719e6ee339d1a2164cb27e9d99b57578882/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Freactive%2Fresult%2Fview%2FMustacheViewResolver.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/3b410719e6ee339d1a2164cb27e9d99b57578882/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Freactive%2Fresult%2Fview%2FMustacheViewResolver.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fweb%2Freactive%2Fresult%2Fview%2FMustacheViewResolver.java?ref=3b410719e6ee339d1a2164cb27e9d99b57578882",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2019 the original author or authors.\n+ * Copyright 2012-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,6 +27,7 @@\n  * Spring WebFlux {@link ViewResolver} for Mustache.\n  *\n  * @author Brian Clozel\n+ * @author Marten Deinum\n  * @since 2.0.0\n  */\n public class MustacheViewResolver extends UrlBasedViewResolver {\n@@ -75,4 +76,9 @@ protected AbstractUrlBasedView createView(String viewName) {\n \t\treturn view;\n \t}\n \n+\t@Override\n+\tprotected AbstractUrlBasedView instantiateView() {\n+\t\treturn (getViewClass() == MustacheView.class) ? new MustacheView() : super.instantiateView();\n+\t}\n+\n }",
      "parent_sha": "cea6492c4a57acd72ab79f84af630a7aa49c41e9"
    }
  },
  {
    "oid": "0de5988c0e2cb7d8521fc7fa5dec4f1b6886c9d5",
    "message": "Use Mongo 3.0 specific API\n\nSee gh-6176",
    "date": "2016-06-27T13:28:08Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/0de5988c0e2cb7d8521fc7fa5dec4f1b6886c9d5",
    "details": {
      "sha": "caeb476a27f2c6999e1d57610d57f6669b3df914",
      "filename": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java",
      "status": "modified",
      "additions": 2,
      "deletions": 27,
      "changes": 29,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/0de5988c0e2cb7d8521fc7fa5dec4f1b6886c9d5/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fmongo%2FMongoProperties.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/0de5988c0e2cb7d8521fc7fa5dec4f1b6886c9d5/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fmongo%2FMongoProperties.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-autoconfigure%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Fautoconfigure%2Fmongo%2FMongoProperties.java?ref=0de5988c0e2cb7d8521fc7fa5dec4f1b6886c9d5",
      "patch": "@@ -249,35 +249,10 @@ private int determinePort(Environment environment) {\n \t}\n \n \tprivate Builder builder(MongoClientOptions options) {\n-\t\tBuilder builder = MongoClientOptions.builder();\n \t\tif (options != null) {\n-\t\t\tbuilder.alwaysUseMBeans(options.isAlwaysUseMBeans());\n-\t\t\tbuilder.connectionsPerHost(options.getConnectionsPerHost());\n-\t\t\tbuilder.connectTimeout(options.getConnectTimeout());\n-\t\t\tbuilder.cursorFinalizerEnabled(options.isCursorFinalizerEnabled());\n-\t\t\tbuilder.dbDecoderFactory(options.getDbDecoderFactory());\n-\t\t\tbuilder.dbEncoderFactory(options.getDbEncoderFactory());\n-\t\t\tbuilder.description(options.getDescription());\n-\t\t\tbuilder.heartbeatConnectTimeout(options.getHeartbeatConnectTimeout());\n-\t\t\tbuilder.heartbeatFrequency(options.getHeartbeatFrequency());\n-\t\t\tbuilder.heartbeatSocketTimeout(options.getHeartbeatSocketTimeout());\n-\t\t\tbuilder.localThreshold(options.getLocalThreshold());\n-\t\t\tbuilder.minConnectionsPerHost(options.getMinConnectionsPerHost());\n-\t\t\tbuilder.minHeartbeatFrequency(options.getMinHeartbeatFrequency());\n-\t\t\tbuilder.maxConnectionIdleTime(options.getMaxConnectionIdleTime());\n-\t\t\tbuilder.maxConnectionLifeTime(options.getMaxConnectionLifeTime());\n-\t\t\tbuilder.maxWaitTime(options.getMaxWaitTime());\n-\t\t\tbuilder.readPreference(options.getReadPreference());\n-\t\t\tbuilder.requiredReplicaSetName(options.getRequiredReplicaSetName());\n-\t\t\tbuilder.sslEnabled(options.isSslEnabled());\n-\t\t\tbuilder.socketFactory(options.getSocketFactory());\n-\t\t\tbuilder.socketKeepAlive(options.isSocketKeepAlive());\n-\t\t\tbuilder.socketTimeout(options.getSocketTimeout());\n-\t\t\tbuilder.threadsAllowedToBlockForConnectionMultiplier(\n-\t\t\t\t\toptions.getThreadsAllowedToBlockForConnectionMultiplier());\n-\t\t\tbuilder.writeConcern(options.getWriteConcern());\n+\t\t\treturn MongoClientOptions.builder(options);\n \t\t}\n-\t\treturn builder;\n+\t\treturn MongoClientOptions.builder();\n \t}\n \n }",
      "parent_sha": "958a0a45f164601d01cb706c19f22ed3e25eff56"
    }
  },
  {
    "oid": "244f7c595c2eae20350383eb632a4892add7c836",
    "message": "Remove redpanda image compatibility\n\nTestcontainers added redpandadata/redpanda as valid image\n\nCloses gh-39801",
    "date": "2024-02-29T14:30:12Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/244f7c595c2eae20350383eb632a4892add7c836",
    "details": {
      "sha": "4bec3630820e0a229cd701dbe740a8f41407a821",
      "filename": "spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/DockerImageNames.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/244f7c595c2eae20350383eb632a4892add7c836/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Ftestcontainers%2FDockerImageNames.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/244f7c595c2eae20350383eb632a4892add7c836/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Ftestcontainers%2FDockerImageNames.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project%2Fspring-boot-tools%2Fspring-boot-test-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Ftestsupport%2Ftestcontainers%2FDockerImageNames.java?ref=244f7c595c2eae20350383eb632a4892add7c836",
      "patch": "@@ -212,9 +212,7 @@ public static DockerImageName redis() {\n \t * @return a docker image name for running redpanda\n \t */\n \tpublic static DockerImageName redpanda() {\n-\t\treturn DockerImageName.parse(\"redpandadata/redpanda\")\n-\t\t\t.withTag(REDPANDA_VERSION)\n-\t\t\t.asCompatibleSubstituteFor(\"docker.redpanda.com/redpandadata/redpanda\");\n+\t\treturn DockerImageName.parse(\"redpandadata/redpanda\").withTag(REDPANDA_VERSION);\n \t}\n \n \t/**",
      "parent_sha": "306d52db7776a8b1ee0c228ce4d246f80fbefa60"
    }
  },
  {
    "oid": "2ba978b4ad9119ad6ac808dbb4ce89641db674cc",
    "message": "Polish",
    "date": "2016-10-21T17:23:13Z",
    "url": "https://github.com/spring-projects/spring-boot/commit/2ba978b4ad9119ad6ac808dbb4ce89641db674cc",
    "details": {
      "sha": "d113b7ec0d3b235c74fb62903638c188dd8f2a27",
      "filename": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMapping.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-boot/blob/2ba978b4ad9119ad6ac808dbb4ce89641db674cc/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fmvc%2FAbstractEndpointHandlerMapping.java",
      "raw_url": "https://github.com/spring-projects/spring-boot/raw/2ba978b4ad9119ad6ac808dbb4ce89641db674cc/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fmvc%2FAbstractEndpointHandlerMapping.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-actuator%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fboot%2Factuate%2Fendpoint%2Fmvc%2FAbstractEndpointHandlerMapping.java?ref=2ba978b4ad9119ad6ac808dbb4ce89641db674cc",
      "patch": "@@ -212,7 +212,7 @@ public void setDisabled(boolean disabled) {\n \n \t/**\n \t * Returns if this mapping is disabled.\n-\t * @return if the mapping is disabled\n+\t * @return {@code true} if the mapping is disabled\n \t */\n \tpublic boolean isDisabled() {\n \t\treturn this.disabled;",
      "parent_sha": "ab81d993e6618dcab51a077e201ebd0911b6e18f"
    }
  }
]