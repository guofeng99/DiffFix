[
  {
    "oid": "2c2bb64c09b2bf8e024d80b707e2a64645745271",
    "message": "fix(tests): ResXmlGenTest fails on Windows (PR #1972)\n\n* fix(core): fix ResXmlGenTest fails on Windows\r\n* code style",
    "date": "2023-07-31T16:51:59Z",
    "url": "https://github.com/skylot/jadx/commit/2c2bb64c09b2bf8e024d80b707e2a64645745271",
    "details": {
      "sha": "90cbdfd4e79c6e33afd447d1eaf069ffd0a46ceb",
      "filename": "jadx-core/src/test/java/jadx/core/xmlgen/ResXmlGenTest.java",
      "status": "modified",
      "additions": 23,
      "deletions": 16,
      "changes": 39,
      "blob_url": "https://github.com/skylot/jadx/blob/2c2bb64c09b2bf8e024d80b707e2a64645745271/jadx-core%2Fsrc%2Ftest%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGenTest.java",
      "raw_url": "https://github.com/skylot/jadx/raw/2c2bb64c09b2bf8e024d80b707e2a64645745271/jadx-core%2Fsrc%2Ftest%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGenTest.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Ftest%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGenTest.java?ref=2c2bb64c09b2bf8e024d80b707e2a64645745271",
      "patch": "@@ -27,12 +27,12 @@ void testSimpleAttr() {\n \t\tList<ResContainer> files = resXmlGen.makeResourcesXml();\n \n \t\tassertEquals(1, files.size());\n-\t\tassertEquals(\"res/values/attrs.xml\", files.get(0).getFileName());\n+\t\tassertEquals(\"res/values/attrs.xml\", files.get(0).getName());\n \t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n \t\t\t\t+ \"<resources>\\n\"\n \t\t\t\t+ \"    <attr name=\\\"size\\\" format=\\\"dimension\\\">\\n\"\n \t\t\t\t+ \"    </attr>\\n\"\n-\t\t\t\t+ \"</resources>\", files.get(0).getText().toString());\n+\t\t\t\t+ \"</resources>\", adaptLineEndings(files.get(0).getText().toString()));\n \t}\n \n \t@Test\n@@ -48,13 +48,13 @@ void testAttrEnum() {\n \t\tList<ResContainer> files = resXmlGen.makeResourcesXml();\n \n \t\tassertEquals(1, files.size());\n-\t\tassertEquals(\"res/values/attrs.xml\", files.get(0).getFileName());\n+\t\tassertEquals(\"res/values/attrs.xml\", files.get(0).getName());\n \t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n \t\t\t\t+ \"<resources>\\n\"\n \t\t\t\t+ \"    <attr name=\\\"size\\\">\\n\"\n \t\t\t\t+ \"        <enum name=\\\"android:string.aerr_wait\\\" value=\\\"1\\\" />\\n\"\n \t\t\t\t+ \"    </attr>\\n\"\n-\t\t\t\t+ \"</resources>\", files.get(0).getText().toString());\n+\t\t\t\t+ \"</resources>\", adaptLineEndings(files.get(0).getText().toString()));\n \t}\n \n \t@Test\n@@ -70,13 +70,13 @@ void testAttrFlag() {\n \t\tList<ResContainer> files = resXmlGen.makeResourcesXml();\n \n \t\tassertEquals(1, files.size());\n-\t\tassertEquals(\"res/values/attrs.xml\", files.get(0).getFileName());\n+\t\tassertEquals(\"res/values/attrs.xml\", files.get(0).getName());\n \t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n \t\t\t\t+ \"<resources>\\n\"\n \t\t\t\t+ \"    <attr name=\\\"size\\\">\\n\"\n \t\t\t\t+ \"        <flag name=\\\"android:string.aerr_wait\\\" value=\\\"1\\\" />\\n\"\n \t\t\t\t+ \"    </attr>\\n\"\n-\t\t\t\t+ \"</resources>\", files.get(0).getText().toString());\n+\t\t\t\t+ \"</resources>\", adaptLineEndings(files.get(0).getText().toString()));\n \t}\n \n \t@Test\n@@ -92,12 +92,12 @@ void testAttrMin() {\n \t\tList<ResContainer> files = resXmlGen.makeResourcesXml();\n \n \t\tassertEquals(1, files.size());\n-\t\tassertEquals(\"res/values/attrs.xml\", files.get(0).getFileName());\n+\t\tassertEquals(\"res/values/attrs.xml\", files.get(0).getName());\n \t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n \t\t\t\t+ \"<resources>\\n\"\n \t\t\t\t+ \"    <attr name=\\\"size\\\" format=\\\"integer\\\" min=\\\"1\\\">\\n\"\n \t\t\t\t+ \"    </attr>\\n\"\n-\t\t\t\t+ \"</resources>\", files.get(0).getText().toString());\n+\t\t\t\t+ \"</resources>\", adaptLineEndings(files.get(0).getText().toString()));\n \t}\n \n \t@Test\n@@ -116,15 +116,15 @@ void testStyle() {\n \t\tList<ResContainer> files = resXmlGen.makeResourcesXml();\n \n \t\tassertEquals(1, files.size());\n-\t\tassertEquals(\"res/values/styles.xml\", files.get(0).getFileName());\n+\t\tassertEquals(\"res/values/styles.xml\", files.get(0).getName());\n \t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n \t\t\t\t+ \"<resources>\\n\"\n \t\t\t\t+ \"    <style name=\\\"JadxGui\\\" parent=\\\"\\\">\\n\"\n \t\t\t\t+ \"        <item name=\\\"android:windowBackground\\\">@android:color/transparent</item>\\n\"\n \t\t\t\t+ \"    </style>\\n\"\n \t\t\t\t+ \"    <style name=\\\"JadxGui.Dialog\\\" parent=\\\"@style/JadxGui\\\">\\n\"\n \t\t\t\t+ \"    </style>\\n\"\n-\t\t\t\t+ \"</resources>\", files.get(0).getText().toString());\n+\t\t\t\t+ \"</resources>\", adaptLineEndings(files.get(0).getText().toString()));\n \t}\n \n \t@Test\n@@ -142,11 +142,11 @@ void testString() {\n \t\tList<ResContainer> files = resXmlGen.makeResourcesXml();\n \n \t\tassertEquals(1, files.size());\n-\t\tassertEquals(\"res/values/strings.xml\", files.get(0).getFileName());\n+\t\tassertEquals(\"res/values/strings.xml\", files.get(0).getName());\n \t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n \t\t\t\t+ \"<resources>\\n\"\n \t\t\t\t+ \"    <string name=\\\"app_name\\\">Jadx Decompiler App</string>\\n\"\n-\t\t\t\t+ \"</resources>\", files.get(0).getText().toString());\n+\t\t\t\t+ \"</resources>\", adaptLineEndings(files.get(0).getText().toString()));\n \t}\n \n \t@Test\n@@ -164,11 +164,11 @@ void testStringFormattedFalse() {\n \t\tList<ResContainer> files = resXmlGen.makeResourcesXml();\n \n \t\tassertEquals(1, files.size());\n-\t\tassertEquals(\"res/values/strings.xml\", files.get(0).getFileName());\n+\t\tassertEquals(\"res/values/strings.xml\", files.get(0).getName());\n \t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n \t\t\t\t+ \"<resources>\\n\"\n \t\t\t\t+ \"    <string name=\\\"app_name\\\" formatted=\\\"false\\\">%s at %s</string>\\n\"\n-\t\t\t\t+ \"</resources>\", files.get(0).getText().toString());\n+\t\t\t\t+ \"</resources>\", adaptLineEndings(files.get(0).getText().toString()));\n \t}\n \n \t@Test\n@@ -186,12 +186,19 @@ void testArrayEscape() {\n \t\tList<ResContainer> files = resXmlGen.makeResourcesXml();\n \n \t\tassertEquals(1, files.size());\n-\t\tassertEquals(\"res/values/arrays.xml\", files.get(0).getFileName());\n+\t\tassertEquals(\"res/values/arrays.xml\", files.get(0).getName());\n \t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n \t\t\t\t+ \"<resources>\\n\"\n \t\t\t\t+ \"    <array name=\\\"single_quote_escape_sample\\\">\\n\"\n \t\t\t\t+ \"        <item>Let\\\\'s go</item>\\n\"\n \t\t\t\t+ \"    </array>\\n\"\n-\t\t\t\t+ \"</resources>\", files.get(0).getText().toString());\n+\t\t\t\t+ \"</resources>\", adaptLineEndings(files.get(0).getText().toString()));\n+\t}\n+\n+\tprivate static String adaptLineEndings(String input) {\n+\t\tif (System.lineSeparator().equals(\"\\n\")) {\n+\t\t\treturn input; // no adaption necessary\n+\t\t}\n+\t\treturn input.replaceAll(System.lineSeparator(), \"\\n\");\n \t}\n }",
      "parent_sha": "0f5d07c6b14c1a77842feb2c7a9b7032583bb194"
    }
  },
  {
    "oid": "592eef3cdaa2da3aadb65a4c9da99d31de2357bf",
    "message": "fix: resolve NPE in enum processing",
    "date": "2021-06-04T19:21:38Z",
    "url": "https://github.com/skylot/jadx/commit/592eef3cdaa2da3aadb65a4c9da99d31de2357bf",
    "details": {
      "sha": "1007e4691698fe0929380d8152462eac602f915b",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/skylot/jadx/blob/592eef3cdaa2da3aadb65a4c9da99d31de2357bf/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FEnumVisitor.java",
      "raw_url": "https://github.com/skylot/jadx/raw/592eef3cdaa2da3aadb65a4c9da99d31de2357bf/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FEnumVisitor.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FEnumVisitor.java?ref=592eef3cdaa2da3aadb65a4c9da99d31de2357bf",
      "patch": "@@ -192,12 +192,13 @@ private void processConstructorInsn(ClassNode cls, EnumField enumField, MethodNo\n \t\tif (ctrMth != null) {\n \t\t\tmarkArgsForSkip(ctrMth);\n \t\t}\n-\t\tif (co.getResult().getSVar().getUseList().size() <= 2) {\n+\t\tRegisterArg coResArg = co.getResult();\n+\t\tif (coResArg == null || coResArg.getSVar().getUseList().size() <= 2) {\n \t\t\tInsnRemover.removeWithoutUnbind(classInitMth, staticBlock, co);\n \t\t} else {\n \t\t\t// constructor result used in other places -> replace constructor with enum field get (SGET)\n \t\t\tIndexInsnNode enumGet = new IndexInsnNode(InsnType.SGET, enumField.getField().getFieldInfo(), 0);\n-\t\t\tenumGet.setResult(co.getResult().duplicate());\n+\t\t\tenumGet.setResult(coResArg.duplicate());\n \t\t\tBlockUtils.replaceInsn(classInitMth, staticBlock, co, enumGet);\n \t\t}\n \t}",
      "parent_sha": "0541748e5feea66618c3d2eacdfde6f6cb38bdc3"
    }
  },
  {
    "oid": "068e4b8e3d79d01a48416e0d84af5f1fd68e1f40",
    "message": "fix: allow `altMetafactory` method in lambda call site (#1760)",
    "date": "2023-01-15T16:08:34Z",
    "url": "https://github.com/skylot/jadx/commit/068e4b8e3d79d01a48416e0d84af5f1fd68e1f40",
    "details": {
      "sha": "9410b279ed1d0f9792a99e0f1c7eb3aec9e16d67",
      "filename": "jadx-core/src/main/java/jadx/core/dex/instructions/invokedynamic/CustomLambdaCall.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/skylot/jadx/blob/068e4b8e3d79d01a48416e0d84af5f1fd68e1f40/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Finstructions%2Finvokedynamic%2FCustomLambdaCall.java",
      "raw_url": "https://github.com/skylot/jadx/raw/068e4b8e3d79d01a48416e0d84af5f1fd68e1f40/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Finstructions%2Finvokedynamic%2FCustomLambdaCall.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Finstructions%2Finvokedynamic%2FCustomLambdaCall.java?ref=068e4b8e3d79d01a48416e0d84af5f1fd68e1f40",
      "patch": "@@ -39,13 +39,11 @@ public static boolean isLambdaInvoke(List<EncodedValue> values) {\n \t\t\treturn false;\n \t\t}\n \t\tIMethodRef methodRef = methodHandle.getMethodRef();\n-\t\tif (!methodRef.getName().equals(\"metafactory\")) {\n-\t\t\treturn false;\n-\t\t}\n \t\tif (!methodRef.getParentClassType().equals(\"Ljava/lang/invoke/LambdaMetafactory;\")) {\n \t\t\treturn false;\n \t\t}\n-\t\treturn true;\n+\t\tString mthName = methodRef.getName();\n+\t\treturn mthName.equals(\"metafactory\") || mthName.equals(\"altMetafactory\");\n \t}\n \n \tpublic static InvokeCustomNode buildLambdaMethodCall(MethodNode mth, InsnData insn, boolean isRange, List<EncodedValue> values) {",
      "parent_sha": "df38a6424f51ad04588be2a6ef017da9af2889e2"
    }
  },
  {
    "oid": "7fd46633a3c8d37530fb5cc9347885038d4858fd",
    "message": "First near working example for first sample.",
    "date": "2014-12-21T21:37:50Z",
    "url": "https://github.com/skylot/jadx/commit/7fd46633a3c8d37530fb5cc9347885038d4858fd",
    "details": {
      "sha": "65065f1fd886ee21493a971a0ea2b7ebabb1f537",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java",
      "status": "modified",
      "additions": 21,
      "deletions": 17,
      "changes": 38,
      "blob_url": "https://github.com/skylot/jadx/blob/7fd46633a3c8d37530fb5cc9347885038d4858fd/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/7fd46633a3c8d37530fb5cc9347885038d4858fd/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java?ref=7fd46633a3c8d37530fb5cc9347885038d4858fd",
      "patch": "@@ -52,7 +52,7 @@ public void parse() {\n \t\t\telse if(type==0x0103) parseElementEnd();\n \t\t\telse if(type==0x0000) continue; // NullType is just doing nothing\n \t\t\telse die(\"Type: \" + Integer.toHexString(type) + \" not yet implemented\");\n-\t\t\tSystem.out.println(\"COUNT: \"+Integer.toHexString(count));\n+\t\t\t//System.out.println(\"COUNT: \"+Integer.toHexString(count));\n \t\t}\n \t\t//die(\"Done\");\n \t}\n@@ -109,23 +109,25 @@ private void parseNameSpace() {\n \t\tif(cInt32(bytes, count) != 0x18) die(\"NAMESPACE header chunk is not 0x18 big\");\n \t\tint beginLineNumber = cInt32(bytes, count);\n \t\t//if(beginLineNumber!=2) die(\"NAMESPACE beginning line number != 2 not supported yet\");\n-\t\tSystem.out.println(\"NAMESPACE BEGIN Line: \" + beginLineNumber);\n-\t\tSystem.out.println(\"Comment: 0x\" + Integer.toHexString(cInt32(bytes, count)));\n+\t\t//System.out.println(\"NAMESPACE BEGIN Line: \" + beginLineNumber);\n+\t\tint comment = cInt32(bytes, count);\n+\t\t//System.out.println(\"Comment: 0x\" + Integer.toHexString(comment));\n \t\tint beginPrefix = cInt32(bytes, count);\n \t\tSystem.out.println(\"Prefix: \" + strings[beginPrefix]);\n \t\tnsPrefix = strings[beginPrefix];\n \t\tint beginURI = cInt32(bytes, count);\n \t\tSystem.out.println(\"URI: \" + strings[beginURI]);\n-\t\tSystem.out.println(\"COUNT: \"+Integer.toHexString(count));\n+\t\t//System.out.println(\"COUNT: \"+Integer.toHexString(count));\n \t}\n \n \tprivate void parseNameSpaceEnd() {\n \t\tif(cInt16(bytes, count) != 0x0010) die(\"NAMESPACE header is not 0x0010\");\n \t\tif(cInt32(bytes, count) != 0x18) die(\"NAMESPACE header chunk is not 0x18 big\");\n \t\tint endLineNumber = cInt32(bytes, count);\n \t\t//if(endLineNumber!=2) die(\"NAMESPACE begining line number != 2 not supported yet\");\n-\t\tSystem.out.println(\"NAMESPACE END Line: \" + endLineNumber);\n-\t\tSystem.out.println(\"Comment: 0x\" + Integer.toHexString(cInt32(bytes, count)));\n+\t\t//System.out.println(\"NAMESPACE END Line: \" + endLineNumber);\n+\t\tint comment = cInt32(bytes, count);\n+\t\t//System.out.println(\"Comment: 0x\" + Integer.toHexString(comment));\n \t\tint endPrefix = cInt32(bytes, count);\n \t\tSystem.out.println(\"Prefix: \" + strings[endPrefix]);\n \t\tnsPrefix = strings[endPrefix];\n@@ -138,26 +140,27 @@ private void parseElement() {\n \t\t//if(cInt32(bytes, count) != 0x0060) die(\"ELEMENT CHUNK SIZE is not 0x60\");\n \t\tcount+=4;\n \t\tint elementLineNumber = cInt32(bytes, count);\n-\t\tSystem.out.println(\"elementLineNumber: \" + elementLineNumber);\n-\t\tSystem.out.println(\"Comment: 0x\" + Integer.toHexString(cInt32(bytes, count)));\n-\t\tSystem.out.println(\"COUNT: \"+Integer.toHexString(count));\n+\t\t//System.out.println(\"elementLineNumber: \" + elementLineNumber);\n+\t\tint comment = cInt32(bytes, count);\n+\t\t//System.out.println(\"Comment: 0x\" + Integer.toHexString(comment));\n+\t\t//System.out.println(\"COUNT: \"+Integer.toHexString(count));\n \t\tint startNS = cInt32(bytes, count);\n-\t\tSystem.out.println(\"Namespace: 0x\" + Integer.toHexString(startNS));\n+\t\t//System.out.println(\"Namespace: 0x\" + Integer.toHexString(startNS));\n \t\tint startNSName = cInt32(bytes, count); // what to do with this id?\n-\t\tSystem.out.println(\"Namespace name: \" + strings[startNSName]);\n+\t\t//System.out.println(\"Namespace name: \" + strings[startNSName]);\n \t\tSystem.out.println(\"<\" + strings[startNSName] + \"\");\n \t\tint attributeStart = cInt16(bytes, count);\n \t\tif(attributeStart != 0x14) die(\"startNS's attributeStart is not 0x14\");\n \t\tint attributeSize = cInt16(bytes, count);\n \t\tif(attributeSize != 0x14) die(\"startNS's attributeSize is not 0x14\");\n \t\tint attributeCount = cInt16(bytes, count); \n-\t\tSystem.out.println(\"startNS: attributeCount: \" + attributeCount);\n+\t\t//System.out.println(\"startNS: attributeCount: \" + attributeCount);\n \t\tint idIndex = cInt16(bytes, count);\n-\t\tSystem.out.println(\"startNS: idIndex: \" + idIndex);\n+\t\t//System.out.println(\"startNS: idIndex: \" + idIndex);\n \t\tint classIndex = cInt16(bytes, count);\n-\t\tSystem.out.println(\"startNS: classIndex: \" + classIndex);\n+\t\t//System.out.println(\"startNS: classIndex: \" + classIndex);\n \t\tint styleIndex = cInt16(bytes, count);\n-\t\tSystem.out.println(\"startNS: styleIndex: \" + styleIndex);\n+\t\t//System.out.println(\"startNS: styleIndex: \" + styleIndex);\n \t\tfor(int i=0; i<attributeCount; i++) {\n \t\t\tint attributeNS = cInt32(bytes, count);\n \t\t\tint attributeName = cInt32(bytes, count);\n@@ -188,8 +191,9 @@ private void parseElementEnd() {\n \t\tif(cInt32(bytes, count) != 0x18) die(\"ELEMENT END header chunk is not 0x18 big\");\n \t\tint endLineNumber = cInt32(bytes, count);\n \t\t//if(endLineNumber!=2) die(\"NAMESPACE beginning line number != 2 not supported yet\");\n-\t\tSystem.out.println(\"ELEMENT END Line:\" + endLineNumber);\n-\t\tSystem.out.println(\"Comment: 0x\" + Integer.toHexString(cInt32(bytes, count)));\n+\t\t//System.out.println(\"ELEMENT END Line:\" + endLineNumber);\n+\t\tint comment = cInt32(bytes, count);\n+\t\t//System.out.println(\"Comment: 0x\" + Integer.toHexString(comment));\n \t\tint elementNS = cInt32(bytes, count);\n \t\tint elementName = cInt32(bytes, count);\n \t\tSystem.out.print(\"</\");",
      "parent_sha": "3c425990f6b627e68f91036b14b2914cb045373e"
    }
  },
  {
    "oid": "295befbaaaceddb0f455c0579dc2e9ab35a05fd4",
    "message": "fix: check class alias for Kotlin Intrinsics search (#1590)",
    "date": "2023-12-18T18:14:56Z",
    "url": "https://github.com/skylot/jadx/commit/295befbaaaceddb0f455c0579dc2e9ab35a05fd4",
    "details": {
      "sha": "e670c58a58f995305aa178069b837cc1365175be",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/kotlin/ProcessKotlinInternals.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/skylot/jadx/blob/295befbaaaceddb0f455c0579dc2e9ab35a05fd4/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fkotlin%2FProcessKotlinInternals.java",
      "raw_url": "https://github.com/skylot/jadx/raw/295befbaaaceddb0f455c0579dc2e9ab35a05fd4/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fkotlin%2FProcessKotlinInternals.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fkotlin%2FProcessKotlinInternals.java?ref=295befbaaaceddb0f455c0579dc2e9ab35a05fd4",
      "patch": "@@ -52,7 +52,8 @@ public class ProcessKotlinInternals extends AbstractVisitor {\n \tprivate static final Logger LOG = LoggerFactory.getLogger(ProcessKotlinInternals.class);\n \n \tprivate static final String KOTLIN_INTERNAL_PKG = \"kotlin.jvm.internal.\";\n-\tprivate static final String KOTLIN_INTRINSICS_CLS = KOTLIN_INTERNAL_PKG + \"Intrinsics\";\n+\tprivate static final String KOTLIN_INTRINSICS_CLS_SHORT_NAME = \"Intrinsics\";\n+\tprivate static final String KOTLIN_INTRINSICS_CLS = KOTLIN_INTERNAL_PKG + KOTLIN_INTRINSICS_CLS_SHORT_NAME;\n \tprivate static final String KOTLIN_VARNAME_SOURCE_MTH1 = \"(Ljava/lang/Object;Ljava/lang/String;)V\";\n \tprivate static final String KOTLIN_VARNAME_SOURCE_MTH2 = \"(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)V\";\n \n@@ -194,7 +195,12 @@ private static ClassNode searchKotlinIntrinsicsClass(RootNode root) {\n \t}\n \n \tprivate static boolean isKotlinIntrinsicsClass(ClassNode cls) {\n-\t\tif (!cls.getClassInfo().getFullName().startsWith(KOTLIN_INTERNAL_PKG)) {\n+\t\tClassInfo clsInfo = cls.getClassInfo();\n+\t\tif (clsInfo.getAliasShortName().equals(KOTLIN_INTRINSICS_CLS_SHORT_NAME)\n+\t\t\t\t&& clsInfo.getAliasFullName().equals(KOTLIN_INTRINSICS_CLS)) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (!clsInfo.getFullName().startsWith(KOTLIN_INTERNAL_PKG)) {\n \t\t\treturn false;\n \t\t}\n \t\tif (cls.getMethods().size() < 5) {",
      "parent_sha": "5f20033f180b9494cb385d81bb20c4af17d44893"
    }
  },
  {
    "oid": "2e5d73a7e4c509b09357e055230cc6c4eb2f291b",
    "message": "Fixes bug with NS declaration duplicates",
    "date": "2018-04-08T18:21:45Z",
    "url": "https://github.com/skylot/jadx/commit/2e5d73a7e4c509b09357e055230cc6c4eb2f291b",
    "details": {
      "sha": "04d492ce20611c1306ee8b2576d2099739ca713c",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/skylot/jadx/blob/2e5d73a7e4c509b09357e055230cc6c4eb2f291b/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/2e5d73a7e4c509b09357e055230cc6c4eb2f291b/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java?ref=2e5d73a7e4c509b09357e055230cc6c4eb2f291b",
      "patch": "@@ -174,7 +174,11 @@ private void parseNameSpace() throws IOException {\n \t\tint comment = is.readInt32();\n \t\tint beginPrefix = is.readInt32();\n \t\tint beginURI = is.readInt32();\n-\t\tnsMap.computeIfAbsent(getString(beginURI), k -> getString(beginPrefix));\n+\t\t\n+\t\tString nsValue = getString(beginPrefix);\n+\t\tif(!nsMap.containsValue(nsValue)) {\n+\t\t\tnsMap.putIfAbsent(getString(beginURI), nsValue);\n+\t\t}\n \t\tnamespaceDepth++;\n \t}\n \n@@ -190,7 +194,11 @@ private void parseNameSpaceEnd() throws IOException {\n \t\tint endPrefix = is.readInt32();\n \t\tint endURI = is.readInt32();\n \t\tnamespaceDepth--;\n-\t\tnsMap.computeIfAbsent(getString(endURI), k -> getString(endPrefix));\n+\t\t\n+\t\tString nsValue = getString(endPrefix);\n+\t\tif(!nsMap.containsValue(nsValue)) {\n+\t\t\tnsMap.putIfAbsent(getString(endURI), nsValue);\n+\t\t}\n \t}\n \n \tprivate void parseCData() throws IOException {",
      "parent_sha": "1c352cc81b42ad60d5d9094edd499beb936a636b"
    }
  },
  {
    "oid": "e4fc3cebfd6965a5d16d3210837bbaa9f843c0ce",
    "message": "Update JadxArgs.java\n\nChanges flags to true",
    "date": "2018-01-14T18:34:17Z",
    "url": "https://github.com/skylot/jadx/commit/e4fc3cebfd6965a5d16d3210837bbaa9f843c0ce",
    "details": {
      "sha": "8dc0f9f4ba0e769849217ca5b38a51c29dfafaaf",
      "filename": "jadx-core/src/main/java/jadx/api/JadxArgs.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/e4fc3cebfd6965a5d16d3210837bbaa9f843c0ce/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FJadxArgs.java",
      "raw_url": "https://github.com/skylot/jadx/raw/e4fc3cebfd6965a5d16d3210837bbaa9f843c0ce/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FJadxArgs.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FJadxArgs.java?ref=e4fc3cebfd6965a5d16d3210837bbaa9f843c0ce",
      "patch": "@@ -14,7 +14,7 @@ public class JadxArgs implements IJadxArgs {\n \tprivate boolean fallbackMode = false;\n \tprivate boolean showInconsistentCode = false;\n \t\n-\tprivate boolean useImports = false;\n+\tprivate boolean useImports = true;\n \n \tprivate boolean isSkipResources = false;\n \tprivate boolean isSkipSources = false;",
      "parent_sha": "75135819cfcb4b2147f658dec55fea2176009dfe"
    }
  },
  {
    "oid": "92e28326a4f5ba68485d86d6f7f29c397d46d883",
    "message": "misc: don't add same edge insn several times",
    "date": "2019-07-13T10:24:52Z",
    "url": "https://github.com/skylot/jadx/commit/92e28326a4f5ba68485d86d6f7f29c397d46d883",
    "details": {
      "sha": "41324d9f4965dfe806cc21932611495d43be4c3f",
      "filename": "jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EdgeInsnAttr.java",
      "status": "modified",
      "additions": 27,
      "deletions": 2,
      "changes": 29,
      "blob_url": "https://github.com/skylot/jadx/blob/92e28326a4f5ba68485d86d6f7f29c397d46d883/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fattributes%2Fnodes%2FEdgeInsnAttr.java",
      "raw_url": "https://github.com/skylot/jadx/raw/92e28326a4f5ba68485d86d6f7f29c397d46d883/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fattributes%2Fnodes%2FEdgeInsnAttr.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fattributes%2Fnodes%2FEdgeInsnAttr.java?ref=92e28326a4f5ba68485d86d6f7f29c397d46d883",
      "patch": "@@ -1,5 +1,7 @@\n package jadx.core.dex.attributes.nodes;\n \n+import java.util.Objects;\n+\n import jadx.core.dex.attributes.AType;\n import jadx.core.dex.attributes.AttrList;\n import jadx.core.dex.attributes.IAttribute;\n@@ -14,8 +16,12 @@ public class EdgeInsnAttr implements IAttribute {\n \n \tpublic static void addEdgeInsn(BlockNode start, BlockNode end, InsnNode insn) {\n \t\tEdgeInsnAttr edgeInsnAttr = new EdgeInsnAttr(start, end, insn);\n-\t\tstart.addAttr(AType.EDGE_INSN, edgeInsnAttr);\n-\t\tend.addAttr(AType.EDGE_INSN, edgeInsnAttr);\n+\t\tif (!start.getAll(AType.EDGE_INSN).contains(edgeInsnAttr)) {\n+\t\t\tstart.addAttr(AType.EDGE_INSN, edgeInsnAttr);\n+\t\t}\n+\t\tif (!end.getAll(AType.EDGE_INSN).contains(edgeInsnAttr)) {\n+\t\t\tend.addAttr(AType.EDGE_INSN, edgeInsnAttr);\n+\t\t}\n \t}\n \n \tpublic EdgeInsnAttr(BlockNode start, BlockNode end, InsnNode insn) {\n@@ -41,6 +47,25 @@ public InsnNode getInsn() {\n \t\treturn insn;\n \t}\n \n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tEdgeInsnAttr that = (EdgeInsnAttr) o;\n+\t\treturn start.equals(that.start)\n+\t\t\t\t&& end.equals(that.end)\n+\t\t\t\t&& insn.isDeepEquals(that.insn);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(start, end, insn);\n+\t}\n+\n \t@Override\n \tpublic String toString() {\n \t\treturn \"EDGE_INSN: \" + start + \"->\" + end + ' ' + insn;",
      "parent_sha": "2dbdd1f0794f01362ba10856a60b2150fdd6bd24"
    }
  },
  {
    "oid": "164123f542383c923171f896a8fe34495cef4fc2",
    "message": "core: improve variable names after 'toString' invoke",
    "date": "2015-03-01T12:21:13Z",
    "url": "https://github.com/skylot/jadx/commit/164123f542383c923171f896a8fe34495cef4fc2",
    "details": {
      "sha": "e90e188e3c8d0cf34d7cff45bf0d1c85f51b935d",
      "filename": "jadx-core/src/main/java/jadx/core/codegen/NameGen.java",
      "status": "modified",
      "additions": 20,
      "deletions": 8,
      "changes": 28,
      "blob_url": "https://github.com/skylot/jadx/blob/164123f542383c923171f896a8fe34495cef4fc2/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FNameGen.java",
      "raw_url": "https://github.com/skylot/jadx/raw/164123f542383c923171f896a8fe34495cef4fc2/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FNameGen.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FNameGen.java?ref=164123f542383c923171f896a8fe34495cef4fc2",
      "patch": "@@ -4,6 +4,7 @@\n import jadx.core.deobf.NameMapper;\n import jadx.core.dex.attributes.nodes.LoopLabelAttr;\n import jadx.core.dex.info.ClassInfo;\n+import jadx.core.dex.info.MethodInfo;\n import jadx.core.dex.instructions.InvokeNode;\n import jadx.core.dex.instructions.args.ArgType;\n import jadx.core.dex.instructions.args.InsnArg;\n@@ -187,14 +188,7 @@ private static String makeNameFromInsn(InsnNode insn) {\n \t\tswitch (insn.getType()) {\n \t\t\tcase INVOKE:\n \t\t\t\tInvokeNode inv = (InvokeNode) insn;\n-\t\t\t\tString name = inv.getCallMth().getName();\n-\t\t\t\tif (name.startsWith(\"get\") || name.startsWith(\"set\")) {\n-\t\t\t\t\treturn fromName(name.substring(3));\n-\t\t\t\t}\n-\t\t\t\tif (\"iterator\".equals(name)) {\n-\t\t\t\t\treturn \"it\";\n-\t\t\t\t}\n-\t\t\t\treturn name;\n+\t\t\t\treturn makeNameFromInvoke(inv.getCallMth());\n \n \t\t\tcase CONSTRUCTOR:\n \t\t\t\tConstructorInsn co = (ConstructorInsn) insn;\n@@ -222,4 +216,22 @@ private static String makeNameFromInsn(InsnNode insn) {\n \t\t}\n \t\treturn null;\n \t}\n+\n+\tprivate static String makeNameFromInvoke(MethodInfo callMth) {\n+\t\tString name = callMth.getName();\n+\t\tif (name.startsWith(\"get\") || name.startsWith(\"set\")) {\n+\t\t\treturn fromName(name.substring(3));\n+\t\t}\n+\t\tArgType declType = callMth.getDeclClass().getType();\n+\t\tif (\"iterator\".equals(name)) {\n+\t\t\treturn \"it\";\n+\t\t}\n+\t\tif (\"toString\".equals(name)) {\n+\t\t\treturn makeNameForType(declType);\n+\t\t}\n+\t\tif (\"forName\".equals(name) && declType.equals(ArgType.CLASS)) {\n+\t\t\treturn OBJ_ALIAS.get(Consts.CLASS_CLASS);\n+\t\t}\n+\t\treturn name;\n+\t}\n }",
      "parent_sha": "72c301dc548ceacabdc80707b42fe389046afc12"
    }
  },
  {
    "oid": "37b1bff8f2816f9d2acb7df101b1eb120b27acc0",
    "message": "fix(gui): adjust node by offset search in code area (#1845)",
    "date": "2023-04-25T20:28:27Z",
    "url": "https://github.com/skylot/jadx/commit/37b1bff8f2816f9d2acb7df101b1eb120b27acc0",
    "details": {
      "sha": "3134d0a9e91799636f2b02d1c3b1dbc31b518347",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/codearea/CodeArea.java",
      "status": "modified",
      "additions": 12,
      "deletions": 18,
      "changes": 30,
      "blob_url": "https://github.com/skylot/jadx/blob/37b1bff8f2816f9d2acb7df101b1eb120b27acc0/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FCodeArea.java",
      "raw_url": "https://github.com/skylot/jadx/raw/37b1bff8f2816f9d2acb7df101b1eb120b27acc0/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FCodeArea.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FCodeArea.java?ref=37b1bff8f2816f9d2acb7df101b1eb120b27acc0",
      "patch": "@@ -141,31 +141,25 @@ public int adjustOffsetForToken(@Nullable Token token) {\n \t\tif (token == null) {\n \t\t\treturn -1;\n \t\t}\n-\t\tint type = token.getType();\n-\t\tfinal int sourceOffset;\n-\t\tif (node instanceof JClass) {\n-\t\t\tif (type == TokenTypes.IDENTIFIER) {\n-\t\t\t\tsourceOffset = token.getOffset();\n-\t\t\t} else if (type == TokenTypes.ANNOTATION && token.length() > 1) {\n-\t\t\t\tsourceOffset = token.getOffset() + 1;\n-\t\t\t} else {\n-\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (type == TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE) {\n-\t\t\t\tsourceOffset = token.getOffset() + 1; // skip quote at start (\")\n-\t\t\t} else {\n-\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t}\n \t\t// fast skip\n \t\tif (token.length() == 1) {\n \t\t\tchar ch = token.getTextArray()[token.getTextOffset()];\n \t\t\tif (ch == '.' || ch == ',' || ch == ';') {\n \t\t\t\treturn -1;\n \t\t\t}\n \t\t}\n-\t\treturn sourceOffset;\n+\t\tint type = token.getType();\n+\t\tif (node instanceof JClass) {\n+\t\t\tif (type == TokenTypes.IDENTIFIER || type == TokenTypes.FUNCTION) {\n+\t\t\t\treturn token.getOffset();\n+\t\t\t}\n+\t\t\tif (type == TokenTypes.ANNOTATION && token.length() > 1) {\n+\t\t\t\treturn token.getOffset() + 1;\n+\t\t\t}\n+\t\t} else if (type == TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE) {\n+\t\t\treturn token.getOffset() + 1; // skip quote at start (\")\n+\t\t}\n+\t\treturn -1;\n \t}\n \n \t/**",
      "parent_sha": "5e8f9b900fa73973ecf9d890a6b90b9e33487b00"
    }
  },
  {
    "oid": "fcb120a3edff42a423d037eb4cb22105d37630b6",
    "message": "core: suppress type error exception",
    "date": "2014-11-09T12:34:19Z",
    "url": "https://github.com/skylot/jadx/commit/fcb120a3edff42a423d037eb4cb22105d37630b6",
    "details": {
      "sha": "9a8e48fa25b21fbba583cf1fb9d0f11238e9e230",
      "filename": "jadx-core/src/main/java/jadx/core/codegen/TypeGen.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/skylot/jadx/blob/fcb120a3edff42a423d037eb4cb22105d37630b6/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FTypeGen.java",
      "raw_url": "https://github.com/skylot/jadx/raw/fcb120a3edff42a423d037eb4cb22105d37630b6/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FTypeGen.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FTypeGen.java?ref=fcb120a3edff42a423d037eb4cb22105d37630b6",
      "patch": "@@ -6,7 +6,11 @@\n import jadx.core.utils.Utils;\n import jadx.core.utils.exceptions.JadxRuntimeException;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class TypeGen {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(TypeGen.class);\n \n \tprivate TypeGen() {\n \t}\n@@ -59,7 +63,8 @@ public static String literalToString(long lit, ArgType type) {\n \t\t\tcase OBJECT:\n \t\t\tcase ARRAY:\n \t\t\t\tif (lit != 0) {\n-\t\t\t\t\tthrow new JadxRuntimeException(\"Wrong object literal: \" + type + \" = \" + lit);\n+\t\t\t\t\tLOG.warn(\"Wrong object literal: \" + lit + \" for type: \" + type);\n+\t\t\t\t\treturn Long.toString(lit);\n \t\t\t\t}\n \t\t\t\treturn \"null\";\n ",
      "parent_sha": "988628a2e7ed3a4d81c42438b9d0295c08b124ef"
    }
  },
  {
    "oid": "58365a8907fa7ad18381884d070a67f274a77ed5",
    "message": "fix(gui): remove tree children expansions as well (PR #630)",
    "date": "2019-04-24T16:45:36Z",
    "url": "https://github.com/skylot/jadx/commit/58365a8907fa7ad18381884d070a67f274a77ed5",
    "details": {
      "sha": "687d6a0090e8eff558304abebed3b05cfa22426f",
      "filename": "jadx-gui/src/main/java/jadx/gui/settings/JadxProject.java",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/skylot/jadx/blob/58365a8907fa7ad18381884d070a67f274a77ed5/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxProject.java",
      "raw_url": "https://github.com/skylot/jadx/raw/58365a8907fa7ad18381884d070a67f274a77ed5/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxProject.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxProject.java?ref=58365a8907fa7ad18381884d070a67f274a77ed5",
      "patch": "@@ -78,13 +78,26 @@ public void addTreeExpansion(String[] expansion) {\n \n \tpublic void removeTreeExpansion(String[] expansion) {\n \t\tfor (Iterator<String[]> it = treeExpansions.iterator(); it.hasNext(); ) {\n-\t\t\tif (Arrays.equals(it.next(), expansion)) {\n+\t\t\tif (isParentOfExpansion(expansion, it.next())) {\n \t\t\t\tit.remove();\n \t\t\t}\n \t\t}\n \t\tchanged();\n \t}\n \n+\tprivate boolean isParentOfExpansion(String[] parent, String[] child) {\n+\t\tif (Arrays.equals(parent, child)) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tfor (int i = child.length - parent.length; i > 0; i--) {\n+\t\t\tString[] arr = Arrays.copyOfRange(child, i, child.length);\n+\t\t\tif (Arrays.equals(parent, arr)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n \tprivate void changed() {\n \t\tif (settings.isAutoSaveProject()) {\n \t\t\tsave();",
      "parent_sha": "172f7f753458b50743e220f3039a7084e2d971f6"
    }
  },
  {
    "oid": "95afe1219e7c8e9c8f3102357668c62453d162a9",
    "message": "core: don't cache dex strings (old workaround for bug in dx)",
    "date": "2014-08-16T11:07:06Z",
    "url": "https://github.com/skylot/jadx/commit/95afe1219e7c8e9c8f3102357668c62453d162a9",
    "details": {
      "sha": "6fce65c497543b7298493725d8596e49b9e11587",
      "filename": "jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/skylot/jadx/blob/95afe1219e7c8e9c8f3102357668c62453d162a9/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FDexNode.java",
      "raw_url": "https://github.com/skylot/jadx/raw/95afe1219e7c8e9c8f3102357668c62453d162a9/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FDexNode.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FDexNode.java?ref=95afe1219e7c8e9c8f3102357668c62453d162a9",
      "patch": "@@ -31,16 +31,12 @@ public class DexNode {\n \tprivate final RootNode root;\n \tprivate final Dex dexBuf;\n \tprivate final List<ClassNode> classes = new ArrayList<ClassNode>();\n-\tprivate final String[] strings;\n \n \tprivate final Map<Object, FieldNode> constFields = new HashMap<Object, FieldNode>();\n \n \tpublic DexNode(RootNode root, InputFile input) {\n \t\tthis.root = root;\n \t\tthis.dexBuf = input.getDexBuffer();\n-\n-\t\tList<String> stringList = dexBuf.strings();\n-\t\tthis.strings = stringList.toArray(new String[stringList.size()]);\n \t}\n \n \tpublic void loadClasses() throws DecodeException {\n@@ -80,7 +76,7 @@ public Map<Object, FieldNode> getConstFields() {\n \t// DexBuffer wrappers\n \n \tpublic String getString(int index) {\n-\t\treturn strings[index];\n+\t\treturn dexBuf.strings().get(index);\n \t}\n \n \tpublic ArgType getType(int index) {",
      "parent_sha": "07937f1d71717ce64f57c724e11c7062fea05751"
    }
  },
  {
    "oid": "db7f2cf54878159eb6975f6ac2edfd569e442a13",
    "message": "fix: loading aar/jar files (#631) (PR #632)",
    "date": "2019-04-25T08:11:03Z",
    "url": "https://github.com/skylot/jadx/commit/db7f2cf54878159eb6975f6ac2edfd569e442a13",
    "details": {
      "sha": "b1e683314f8c48b0a131f173e75d371dc2aafb1f",
      "filename": "jadx-core/src/main/java/jadx/core/utils/files/InputFile.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/skylot/jadx/blob/db7f2cf54878159eb6975f6ac2edfd569e442a13/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java",
      "raw_url": "https://github.com/skylot/jadx/raw/db7f2cf54878159eb6975f6ac2edfd569e442a13/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java?ref=db7f2cf54878159eb6975f6ac2edfd569e442a13",
      "patch": "@@ -9,6 +9,7 @@\n import java.io.InputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.List;\n@@ -134,7 +135,7 @@ private boolean loadFromZip(String ext) throws IOException, DecodeException {\n \t\t\t\t\t\t\tcase \".jar\":\n \t\t\t\t\t\t\t\tindex++;\n \t\t\t\t\t\t\t\tPath jarFile = Files.createTempFile(entryName, \".jar\");\n-\t\t\t\t\t\t\t\tFiles.copy(inputStream, jarFile);\n+\t\t\t\t\t\t\t\tFiles.copy(inputStream, jarFile, StandardCopyOption.REPLACE_EXISTING);\n \t\t\t\t\t\t\t\tfor (Dex dex : loadFromJar(jarFile)) {\n \t\t\t\t\t\t\t\t\taddDexFile(entryName, dex);\n \t\t\t\t\t\t\t\t}",
      "parent_sha": "58365a8907fa7ad18381884d070a67f274a77ed5"
    }
  },
  {
    "oid": "43538902a3334c09fd5ddf42e0292335734c0b0b",
    "message": "fix: restore support for AAR files (issue #95) (PR #464)",
    "date": "2019-03-09T14:20:34Z",
    "url": "https://github.com/skylot/jadx/commit/43538902a3334c09fd5ddf42e0292335734c0b0b",
    "details": {
      "sha": "470d26118fcd99c0edbf3fbfa93b512c1e693a39",
      "filename": "jadx-core/src/main/java/jadx/core/utils/files/InputFile.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/skylot/jadx/blob/43538902a3334c09fd5ddf42e0292335734c0b0b/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java",
      "raw_url": "https://github.com/skylot/jadx/raw/43538902a3334c09fd5ddf42e0292335734c0b0b/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java?ref=43538902a3334c09fd5ddf42e0292335734c0b0b",
      "patch": "@@ -59,8 +59,8 @@ private void searchDexFiles(boolean skipSources) throws IOException, DecodeExcep\n \t\t\tloadFromZip(\".dex\");\n \t\t\treturn;\n \t\t}\n-\t\tif (fileName.endsWith(\".jar\")) {\n-\t\t\t// check if jar contains '.dex' files\n+\t\tif (fileName.endsWith(\".jar\") || fileName.endsWith(\".aar\")) {\n+\t\t\t// check if jar/aar contains '.dex' files\n \t\t\tif (loadFromZip(\".dex\")) {\n \t\t\t\treturn;\n \t\t\t}",
      "parent_sha": "28d348b3645473b39ead83575423bccc8736b838"
    }
  },
  {
    "oid": "f101e9a775608ee43cfa57821d91b8d895d043fe",
    "message": "fix thread-safe bug\n\nChange HashMap to ConcurrentHashMap, because it can be used by many worker threads.",
    "date": "2017-12-21T07:58:37Z",
    "url": "https://github.com/skylot/jadx/commit/f101e9a775608ee43cfa57821d91b8d895d043fe",
    "details": {
      "sha": "b16481e8d27b586accbf52d342cad77ed3d3298f",
      "filename": "jadx-core/src/main/java/jadx/api/JadxDecompiler.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/skylot/jadx/blob/f101e9a775608ee43cfa57821d91b8d895d043fe/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FJadxDecompiler.java",
      "raw_url": "https://github.com/skylot/jadx/raw/f101e9a775608ee43cfa57821d91b8d895d043fe/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FJadxDecompiler.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FJadxDecompiler.java?ref=f101e9a775608ee43cfa57821d91b8d895d043fe",
      "patch": "@@ -66,9 +66,9 @@ public final class JadxDecompiler {\n \n \tprivate BinaryXMLParser xmlParser;\n \n-\tprivate Map<ClassNode, JavaClass> classesMap = new HashMap<ClassNode, JavaClass>();\n-\tprivate Map<MethodNode, JavaMethod> methodsMap = new HashMap<MethodNode, JavaMethod>();\n-\tprivate Map<FieldNode, JavaField> fieldsMap = new HashMap<FieldNode, JavaField>();\n+\tprivate Map<ClassNode, JavaClass> classesMap = new java.util.concurrent.ConcurrentHashMap<ClassNode, JavaClass>();\n+\tprivate Map<MethodNode, JavaMethod> methodsMap = new java.util.concurrent.ConcurrentHashMap<MethodNode, JavaMethod>();\n+\tprivate Map<FieldNode, JavaField> fieldsMap = new java.util.concurrent.ConcurrentHashMap<FieldNode, JavaField>();\n \n \tpublic JadxDecompiler() {\n \t\tthis(new JadxArgs());",
      "parent_sha": "a9ae971602f848de773b189afba8d995f2d9f44f"
    }
  },
  {
    "oid": "8052a90d04202667819b20b88f2059db8664edac",
    "message": "Extended string concatenation code to handle arguments in 'new\nStringBuilder()' constructer, ie  'new StringBuilder(\"str\")' or 'new\nStringBuilder(String.valueof(varName))'",
    "date": "2014-12-03T16:58:04Z",
    "url": "https://github.com/skylot/jadx/commit/8052a90d04202667819b20b88f2059db8664edac",
    "details": {
      "sha": "030e9b15ca9df28fefa1fb44d0c46be5397ea1a0",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java",
      "status": "modified",
      "additions": 60,
      "deletions": 35,
      "changes": 95,
      "blob_url": "https://github.com/skylot/jadx/blob/8052a90d04202667819b20b88f2059db8664edac/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FSimplifyVisitor.java",
      "raw_url": "https://github.com/skylot/jadx/raw/8052a90d04202667819b20b88f2059db8664edac/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FSimplifyVisitor.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FSimplifyVisitor.java?ref=8052a90d04202667819b20b88f2059db8664edac",
      "patch": "@@ -5,6 +5,7 @@\n import jadx.core.dex.info.MethodInfo;\n import jadx.core.dex.instructions.ArithNode;\n import jadx.core.dex.instructions.ArithOp;\n+import jadx.core.dex.instructions.ConstStringNode;\n import jadx.core.dex.instructions.IfNode;\n import jadx.core.dex.instructions.IndexInsnNode;\n import jadx.core.dex.instructions.InsnType;\n@@ -86,17 +87,6 @@ private static InsnNode simplifyInsn(MethodNode mth, InsnNode insn) {\n \t\t\t\t}\n \t\t\t\tbreak;\n \n-\t\t\tcase MOVE:\n-\t\t\t\tInsnArg firstArg = insn.getArg(0);\n-\t\t\t\tif (firstArg.isLiteral()) {\n-\t\t\t\t\tInsnNode constInsn = new InsnNode(InsnType.CONST, 1);\n-\t\t\t\t\tconstInsn.setResult(insn.getResult());\n-\t\t\t\t\tconstInsn.addArg(firstArg);\n-\t\t\t\t\tconstInsn.copyAttributesFrom(insn);\n-\t\t\t\t\treturn constInsn;\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\n \t\t\tdefault:\n \t\t\t\tbreak;\n \t\t}\n@@ -134,30 +124,65 @@ private static void simplifyTernary(TernaryInsn insn) {\n \t}\n \n \tprivate static InsnNode convertInvoke(MethodNode mth, InsnNode insn) {\n-\t\tMethodInfo callMth = ((InvokeNode) insn).getCallMth();\n-\t\tif (callMth.getDeclClass().getFullName().equals(Consts.CLASS_STRING_BUILDER)\n-\t\t\t\t&& callMth.getShortId().equals(Consts.MTH_TOSTRING_SIGNATURE)\n-\t\t\t\t&& insn.getArg(0).isInsnWrap()) {\n-\t\t\ttry {\n-\t\t\t\tList<InsnNode> chain = flattenInsnChain(insn);\n-\t\t\t\tif (chain.size() > 1 && chain.get(0).getType() == InsnType.CONSTRUCTOR) {\n-\t\t\t\t\tConstructorInsn constr = (ConstructorInsn) chain.get(0);\n-\t\t\t\t\tif (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)\n-\t\t\t\t\t\t\t&& constr.getArgsCount() == 0) {\n-\t\t\t\t\t\tint len = chain.size();\n-\t\t\t\t\t\tInsnNode concatInsn = new InsnNode(InsnType.STR_CONCAT, len - 1);\n-\t\t\t\t\t\tfor (int i = 1; i < len; i++) {\n-\t\t\t\t\t\t\tconcatInsn.addArg(chain.get(i).getArg(1));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tconcatInsn.setResult(insn.getResult());\n-\t\t\t\t\t\treturn concatInsn;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (Throwable e) {\n-\t\t\t\tLOG.debug(\"Can't convert string concatenation: {} insn: {}\", mth, insn, e);\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n+\t  MethodInfo callMth = ((InvokeNode) insn).getCallMth();\n+\n+          // If this is a 'new StringBuilder(xxx).append(yyy).append(zzz).toString(), \n+          // convert it to STRING_CONCAT pseudo instruction.\n+\t  if (callMth.getDeclClass().getFullName().equals(Consts.CLASS_STRING_BUILDER)\n+\t      && callMth.getShortId().equals(Consts.MTH_TOSTRING_SIGNATURE)\n+\t      && insn.getArg(0).isInsnWrap()) {\n+\t    try {\n+\t      List<InsnNode> chain = flattenInsnChain(insn);\n+\t      int constrIndex = -1;  //RAF\n+\t      // Case where new StringBuilder() is called with NO args (the entire\n+\t      // string is created using .append() calls:\n+\t      if (chain.size()>1 && chain.get(0).getType()==InsnType.CONSTRUCTOR) {\n+\t        constrIndex = 0;\n+\t      } else if (chain.size()>2 && chain.get(1).getType()==InsnType.CONSTRUCTOR) {\n+\t        //RAF Case where the first string element is String arg to the \n+\t        // new StringBuilder(\"xxx\") constructor\n+\t        constrIndex = 1;\n+\t      } else if (chain.size()>3 && chain.get(2).getType()==InsnType.CONSTRUCTOR) {\n+\t        //RAF Case where the first string element is String.valueOf() arg \n+\t        // to the new StringBuilder(String.valueOf(zzz)) constructor\n+\t        constrIndex = 2;\n+\t      }\n+\n+\t      if (constrIndex != -1) {  // If we found a CONSTRUCTOR, is it a StringBuilder?\n+\t        ConstructorInsn constr = (ConstructorInsn) chain.get(constrIndex);\n+\t        if (constr.getClassType().getFullName().equals(Consts.CLASS_STRING_BUILDER)) {\n+\t          int len = chain.size(),  argInd = 1;\n+\t          InsnNode concatInsn = new InsnNode(InsnType.STR_CONCAT, len-1);\n+\t          InsnNode argInsn;\n+\t          if (constrIndex > 0) {  // There was an arg to the StringBuilder constr\n+\t            InsnWrapArg iwa;\n+\t            if (constrIndex==2 \n+\t                && (argInsn = chain.get(1)).getType()==InsnType.INVOKE\n+\t                && ((InvokeNode)argInsn).getCallMth().getName().compareTo(\"valueOf\")==0) {\n+\t              // The argument of new StringBuilder() is a String.valueOf(chainElement0)\n+\t              iwa = (InsnWrapArg)argInsn.getArg(0);\n+\t              argInd = 3;  // Cause for loop below to skip to after the constructor\n+\t            } else {\n+\t              ConstStringNode csn = (ConstStringNode)chain.get(0);\n+\t              iwa = new InsnWrapArg(csn);\n+\t              argInd = 2;  // Cause for loop below to skip to after the constructor\n+\t            }\n+\t            concatInsn.addArg(iwa);\n+\t          }\n+\n+\t          for (; argInd < len; argInd++) {  // Add the .append(xxx) arg string to concat \n+\t            concatInsn.addArg(chain.get(argInd).getArg(1));\n+\t          }\n+\t          concatInsn.setResult(insn.getResult());\n+\t          return concatInsn;\n+\t        } // end of if constructor is for StringBuilder\n+\t      } // end of if we found a constructor early in the chain\n+\n+\t    } catch (Throwable e) {\n+\t      LOG.debug(\"Can't convert string concatenation: {} insn: {}\", mth, insn, e);\n+\t    }\n+\t  }\n+\t  return null;\n \t}\n \n \tprivate static InsnNode simplifyArith(InsnNode insn) {",
      "parent_sha": "3d20d7d330bda54b22fde23ed600b7d51c09d8e3"
    }
  },
  {
    "oid": "1ac2cdfc411de23d13e6b2ab3fce43b9dd9a6033",
    "message": "fix: wait time for background jobs too short",
    "date": "2018-12-26T17:21:16Z",
    "url": "https://github.com/skylot/jadx/commit/1ac2cdfc411de23d13e6b2ab3fce43b9dd9a6033",
    "details": {
      "sha": "cd86c3747a98eabfc1593c8cb6d48f7c0d1b7e01",
      "filename": "jadx-gui/src/main/java/jadx/gui/jobs/BackgroundJob.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/1ac2cdfc411de23d13e6b2ab3fce43b9dd9a6033/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fjobs%2FBackgroundJob.java",
      "raw_url": "https://github.com/skylot/jadx/raw/1ac2cdfc411de23d13e6b2ab3fce43b9dd9a6033/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fjobs%2FBackgroundJob.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fjobs%2FBackgroundJob.java?ref=1ac2cdfc411de23d13e6b2ab3fce43b9dd9a6033",
      "patch": "@@ -44,7 +44,7 @@ public ShutdownTask() {\n \t\t\t\tpublic Boolean call() throws Exception {\n \t\t\t\t\trunJob();\n \t\t\t\t\texecutor.shutdown();\n-\t\t\t\t\treturn executor.awaitTermination(5, TimeUnit.MINUTES);\n+\t\t\t\t\treturn executor.awaitTermination(5, TimeUnit.DAYS);\n \t\t\t\t}\n \t\t\t});\n \t\t}",
      "parent_sha": "eadf046b2c08f8188adebee4915fd2108d5043e9"
    }
  },
  {
    "oid": "1d7bb43dfd04323a51310fb563cf743260af6089",
    "message": "fix: correct code line number calculation",
    "date": "2018-10-29T15:43:22Z",
    "url": "https://github.com/skylot/jadx/commit/1d7bb43dfd04323a51310fb563cf743260af6089",
    "details": {
      "sha": "dec89c983ae2efc1dc9095c070a05848b8d42d32",
      "filename": "jadx-core/src/main/java/jadx/core/codegen/ClassGen.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/1d7bb43dfd04323a51310fb563cf743260af6089/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FClassGen.java",
      "raw_url": "https://github.com/skylot/jadx/raw/1d7bb43dfd04323a51310fb563cf743260af6089/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FClassGen.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FClassGen.java?ref=1d7bb43dfd04323a51310fb563cf743260af6089",
      "patch": "@@ -341,7 +341,7 @@ private void insertDecompilationProblems(CodeWriter code, AttrNode node) {\n \t\t\t});\n \t\t}\n \t\tif (!warns.isEmpty()) {\n-\t\t\twarns.forEach(warn -> code.startLine(\"/* JADX WARNING: \").add(warn.getWarn()).add(\" */\"));\n+\t\t\twarns.forEach(warn -> code.startLine(\"/* JADX WARNING: \").addMultiLine(warn.getWarn()).add(\" */\"));\n \t\t}\n \t}\n ",
      "parent_sha": "6b3e8f083c06aef2f8eabe5cfe507db8cf29aab8"
    }
  },
  {
    "oid": "702b88228cda3fa850ce4f6905ad39a3b21edb91",
    "message": "fix(gui): resolve popup menu action run (#1514, #1529)",
    "date": "2022-06-11T14:08:28Z",
    "url": "https://github.com/skylot/jadx/commit/702b88228cda3fa850ce4f6905ad39a3b21edb91",
    "details": {
      "sha": "94537e546d7683c77944910d17d0d699ac51c63b",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/codearea/JNodePopupListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/702b88228cda3fa850ce4f6905ad39a3b21edb91/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FJNodePopupListener.java",
      "raw_url": "https://github.com/skylot/jadx/raw/702b88228cda3fa850ce4f6905ad39a3b21edb91/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FJNodePopupListener.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FJNodePopupListener.java?ref=702b88228cda3fa850ce4f6905ad39a3b21edb91",
      "patch": "@@ -33,7 +33,7 @@ public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n \n \t@Override\n \tpublic void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n-\t\tupdateNode(null);\n+\t\t// this event can be called just before running action, so can't reset node here\n \t}\n \n \t@Override",
      "parent_sha": "14fd88b2f8e3a18fe2bfb7a9cdece3451341a029"
    }
  },
  {
    "oid": "e6fde48b69f92dc35ad056e250af0bf65bcbaeed",
    "message": "fix: don't add same 'loaded from:' comment for inner classes",
    "date": "2024-09-21T19:28:18Z",
    "url": "https://github.com/skylot/jadx/commit/e6fde48b69f92dc35ad056e250af0bf65bcbaeed",
    "details": {
      "sha": "778cbe668dddcd5eb45c0873453b1ca0e51e0bc2",
      "filename": "jadx-core/src/main/java/jadx/core/codegen/utils/CodeGenUtils.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/skylot/jadx/blob/e6fde48b69f92dc35ad056e250af0bf65bcbaeed/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2Futils%2FCodeGenUtils.java",
      "raw_url": "https://github.com/skylot/jadx/raw/e6fde48b69f92dc35ad056e250af0bf65bcbaeed/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2Futils%2FCodeGenUtils.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2Futils%2FCodeGenUtils.java?ref=e6fde48b69f92dc35ad056e250af0bf65bcbaeed",
      "patch": "@@ -135,10 +135,15 @@ public static void addSourceFileInfo(ICodeWriter code, ClassNode node) {\n \t\t}\n \t}\n \n-\tpublic static void addInputFileInfo(ICodeWriter code, ClassNode node) {\n-\t\tif (node.getClsData() != null && node.checkCommentsLevel(CommentsLevel.INFO)) {\n-\t\t\tString inputFileName = node.getClsData().getInputFileName();\n+\tpublic static void addInputFileInfo(ICodeWriter code, ClassNode cls) {\n+\t\tif (cls.checkCommentsLevel(CommentsLevel.INFO) && cls.getClsData() != null) {\n+\t\t\tString inputFileName = cls.getClsData().getInputFileName();\n \t\t\tif (inputFileName != null) {\n+\t\t\t\tClassNode declCls = cls.getDeclaringClass();\n+\t\t\t\tif (declCls != null && inputFileName.equals(declCls.getClsData().getInputFileName())) {\n+\t\t\t\t\t// don't add same comment for inner classes\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t\tcode.startLine(\"/* loaded from: \").add(inputFileName).add(\" */\");\n \t\t\t}\n \t\t}",
      "parent_sha": "109dea085744292998fd5b4fe6a379bdacfc200e"
    }
  },
  {
    "oid": "e53a72c5f5d1efbd19741da7359834fada1b1801",
    "message": "support for Android InstantRun Apk\n we should consider the input file could contain only one single dex, multi-dex, or instantRun support dex for Android .apk files",
    "date": "2016-05-12T10:40:00Z",
    "url": "https://github.com/skylot/jadx/commit/e53a72c5f5d1efbd19741da7359834fada1b1801",
    "details": {
      "sha": "add89bfee20b3efed1e7ca5279426036c1083b5d",
      "filename": "jadx-core/src/main/java/jadx/core/utils/files/InputFile.java",
      "status": "modified",
      "additions": 35,
      "deletions": 17,
      "changes": 52,
      "blob_url": "https://github.com/skylot/jadx/blob/e53a72c5f5d1efbd19741da7359834fada1b1801/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java",
      "raw_url": "https://github.com/skylot/jadx/raw/e53a72c5f5d1efbd19741da7359834fada1b1801/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java?ref=e53a72c5f5d1efbd19741da7359834fada1b1801",
      "patch": "@@ -10,6 +10,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n+import java.util.Enumeration;\n import java.util.List;\n import java.util.jar.JarOutputStream;\n import java.util.zip.ZipEntry;\n@@ -81,36 +82,53 @@ private void addDexFile(String fileName, Dex dexBuf) throws IOException {\n \n \tprivate boolean loadFromZip(String ext) throws IOException, DecodeException {\n \t\tZipFile zf = new ZipFile(file);\n+\n+\t\t// Input file could be .apk or .zip files\n+\t\t// we should consider the input file could contain only one single dex, multi-dex, or instantRun support dex for Android .apk files\n+\t\tString instantRunDexSuffix = \"classes\" + ext;\n \t\tint index = 0;\n-\t\twhile (true) {\n-\t\t\tString entryName = \"classes\" + (index == 0 ? \"\" : index) + ext;\n-\t\t\tZipEntry entry = zf.getEntry(entryName);\n-\t\t\tif (entry == null) {\n-\t\t\t\tbreak;\n-\t\t\t}\n+\t\tfor (Enumeration<? extends ZipEntry> e = zf.entries(); e.hasMoreElements(); ) {\n+\t\t\tZipEntry entry = e.nextElement();\n+\t\t\tString entryName = entry.getName();\n+\n \t\t\tInputStream inputStream = zf.getInputStream(entry);\n \t\t\ttry {\n-\t\t\t\tif (ext.equals(\".dex\")) {\n-\t\t\t\t\taddDexFile(entryName, new Dex(inputStream));\n-\t\t\t\t} else if (ext.equals(\".jar\")) {\n-\t\t\t\t\tFile jarFile = FileUtils.createTempFile(entryName);\n+\t\t\t\tif ((entryName.startsWith(\"classes\") && entryName.endsWith(ext)) || entryName.endsWith(instantRunDexSuffix)) {\n+\t\t\t\t\tif (ext.equals(\".dex\")) {\n+\t\t\t\t\t\tindex++;\n+\t\t\t\t\t\taddDexFile(entryName, new Dex(inputStream));\n+\t\t\t\t\t} else if (ext.equals(\".jar\")) {\n+\t\t\t\t\t\tindex++;\n+\t\t\t\t\t\tFile jarFile = FileUtils.createTempFile(entryName);\n+\t\t\t\t\t\tFileOutputStream fos = new FileOutputStream(jarFile);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tIOUtils.copy(inputStream, fos);\n+\t\t\t\t\t\t} finally {\n+\t\t\t\t\t\t\tclose(fos);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\taddDexFile(entryName, loadFromJar(jarFile));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tthrow new JadxRuntimeException(\"Unexpected extension in zip: \" + ext);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (entryName.equals(\"instant-run.zip\") && ext.equals(\".dex\")) {\n+\t\t\t\t\tFile jarFile = FileUtils.createTempFile(\"instant-run.zip\");\n \t\t\t\t\tFileOutputStream fos = new FileOutputStream(jarFile);\n \t\t\t\t\ttry {\n \t\t\t\t\t\tIOUtils.copy(inputStream, fos);\n \t\t\t\t\t} finally {\n \t\t\t\t\t\tclose(fos);\n \t\t\t\t\t}\n-\t\t\t\t\taddDexFile(entryName, loadFromJar(jarFile));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new JadxRuntimeException(\"Unexpected extension in zip: \" + ext);\n+\t\t\t\t\tInputFile tempFile = new InputFile(jarFile);\n+\t\t\t\t\ttempFile.loadFromZip(ext);\n+\t\t\t\t\tList<DexFile> dexFiles = tempFile.getDexFiles();\n+\t\t\t\t\tif (!dexFiles.isEmpty()) {\n+\t\t\t\t\t\tindex += dexFiles.size();\n+\t\t\t\t\t\tthis.dexFiles.addAll(dexFiles);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} finally {\n \t\t\t\tclose(inputStream);\n \t\t\t}\n-\t\t\tindex++;\n-\t\t\tif (index == 1) {\n-\t\t\t\tindex = 2;\n-\t\t\t}\n \t\t}\n \t\tzf.close();\n \t\treturn index > 0;",
      "parent_sha": "b2f41e95bfce73936b4d316917c95977daf6e1a4"
    }
  },
  {
    "oid": "df520a11341e0fa3a08ad339d44ac07baade46b5",
    "message": "core: ClassNode: Check is field really static or not in loadStaticValues()\n\nFixes appearing of the 0/null/false initializers for instance final fields.",
    "date": "2020-01-03T03:09:16Z",
    "url": "https://github.com/skylot/jadx/commit/df520a11341e0fa3a08ad339d44ac07baade46b5",
    "details": {
      "sha": "9e92e69a04b8a012230c3a4e0ca86dbfccbc306c",
      "filename": "jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/skylot/jadx/blob/df520a11341e0fa3a08ad339d44ac07baade46b5/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java",
      "raw_url": "https://github.com/skylot/jadx/raw/df520a11341e0fa3a08ad339d44ac07baade46b5/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java?ref=df520a11341e0fa3a08ad339d44ac07baade46b5",
      "patch": "@@ -171,7 +171,9 @@ private void loadAnnotations(ClassDef cls) {\n \n \tprivate void loadStaticValues(ClassDef cls, List<FieldNode> staticFields) throws DecodeException {\n \t\tfor (FieldNode f : staticFields) {\n-\t\t\tif (f.getAccessFlags().isFinal()) {\n+\t\t\tAccessInfo flags = f.getAccessFlags();\n+\t\t\tif (flags.isStatic() && flags.isFinal()) {\n+\t\t\t\tLOG.debug(\"loadStaticValues(): Adding NULL initializer to static final field {}\", f.getAlias());\n \t\t\t\tf.addAttr(FieldInitAttr.NULL_VALUE);\n \t\t\t}\n \t\t}",
      "parent_sha": "f90fc1d5ec8413cb9a4bcca03930e6c721fe4161"
    }
  },
  {
    "oid": "7bb752715f5571e25ed4a036ac8ff836ebdc5a4e",
    "message": "fix: NPE if loading local file from CLI (`jadx sample.apk`)",
    "date": "2019-05-15T14:01:52Z",
    "url": "https://github.com/skylot/jadx/commit/7bb752715f5571e25ed4a036ac8ff836ebdc5a4e",
    "details": {
      "sha": "d7d2c30c70b52f7e84775dfd33e74d27a7d2807f",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/7bb752715f5571e25ed4a036ac8ff836ebdc5a4e/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java",
      "raw_url": "https://github.com/skylot/jadx/raw/7bb752715f5571e25ed4a036ac8ff836ebdc5a4e/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java?ref=7bb752715f5571e25ed4a036ac8ff836ebdc5a4e",
      "patch": "@@ -32,7 +32,7 @@ public void init(RootNode root) {\n \t\t\treturn;\n \t\t}\n \t\tInputFile firstInputFile = dexNodes.get(0).getDexFile().getInputFile();\n-\t\tPath inputFilePath = firstInputFile.getFile().toPath();\n+\t\tPath inputFilePath = firstInputFile.getFile().getAbsoluteFile().toPath();\n \n \t\tString inputName = inputFilePath.getFileName().toString();\n \t\tString baseName = inputName.substring(0, inputName.lastIndexOf('.'));",
      "parent_sha": "9622c948c987c5e10f53a1d9fc931687be718ad0"
    }
  },
  {
    "oid": "1f3aebf584687c162cabf572e5f78d0bd5be5032",
    "message": "res: close tag before cdata (#231)",
    "date": "2018-03-11T14:09:17Z",
    "url": "https://github.com/skylot/jadx/commit/1f3aebf584687c162cabf572e5f78d0bd5be5032",
    "details": {
      "sha": "d15dd77a2f99d275f13b0821a8078d9ceff8f94c",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/skylot/jadx/blob/1f3aebf584687c162cabf572e5f78d0bd5be5032/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/1f3aebf584687c162cabf572e5f78d0bd5be5032/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java?ref=1f3aebf584687c162cabf572e5f78d0bd5be5032",
      "patch": "@@ -194,10 +194,13 @@ private void parseCData() throws IOException {\n \n \t\tint strIndex = is.readInt32();\n \t\tString str = getString(strIndex);\n-\n-\t\twriter.startLine().addIndent();\n+\t\tif (!isLastEnd) {\n+\t\t\tisLastEnd = true;\n+\t\t\twriter.add(\">\");\n+\t\t}\n \t\twriter.attachSourceLine(lineNumber);\n-\t\twriter.add(StringUtils.escapeXML(str.trim()));\n+\t\tString escapedStr = StringUtils.escapeXML(str);\n+\t\twriter.add(escapedStr);\n \n \t\tlong size = is.readInt16();\n \t\tis.skip(size - 2);\n@@ -384,9 +387,9 @@ private void parseElementEnd() throws IOException {\n \t\t} else {\n \t\t\twriter.startLine(\"</\");\n \t\t\twriter.attachSourceLine(endLineNumber);\n-\t\t\tif (elementNS != -1) {\n-\t\t\t\twriter.add(getString(elementNS)).add(':');\n-\t\t\t}\n+//\t\t\tif (elementNS != -1) {\n+//\t\t\t\twriter.add(getString(elementNS)).add(':');\n+//\t\t\t}\n \t\t\twriter.add(getString(elementName)).add(\">\");\n \t\t}\n \t\tisLastEnd = true;",
      "parent_sha": "b39d79a0f91e0fd37a28bc1251c3877e7ad6024c"
    }
  },
  {
    "oid": "287275d8865ec13f5b2149ff136692b1cb0c449f",
    "message": "fix(gui): resolve --select-class option regression (PR #816)",
    "date": "2019-12-26T17:29:47Z",
    "url": "https://github.com/skylot/jadx/commit/287275d8865ec13f5b2149ff136692b1cb0c449f",
    "details": {
      "sha": "d99fd9cca5a87aadb46fc5f599fbfe5bfd37bf48",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/MainWindow.java",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/skylot/jadx/blob/287275d8865ec13f5b2149ff136692b1cb0c449f/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java",
      "raw_url": "https://github.com/skylot/jadx/raw/287275d8865ec13f5b2149ff136692b1cb0c449f/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java?ref=287275d8865ec13f5b2149ff136692b1cb0c449f",
      "patch": "@@ -200,16 +200,19 @@ private void processCommandLineArgs() {\n \t\t\topenFileOrProject();\n \t\t} else {\n \t\t\topen(Paths.get(settings.getFiles().get(0)));\n-\t\t\tif (settings.getCmdSelectClass() != null) {\n-\t\t\t\tJavaNode javaNode = wrapper.searchJavaClassByClassName(settings.getCmdSelectClass());\n-\t\t\t\tif (javaNode == null) {\n-\t\t\t\t\tJOptionPane.showMessageDialog(this,\n-\t\t\t\t\t\t\tNLS.str(\"msg.cmd_select_class_error\", settings.getCmdSelectClass()),\n-\t\t\t\t\t\t\tNLS.str(\"error_dialog.title\"), JOptionPane.ERROR_MESSAGE);\n-\t\t\t\t} else {\n-\t\t\t\t\tJNode node = cacheObject.getNodeCache().makeFrom(javaNode);\n-\t\t\t\t\ttabbedPane.codeJump(new JumpPosition(node.getRootClass(), node.getLine()));\n-\t\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void handleSelectClassOption() {\n+\t\tif (settings.getCmdSelectClass() != null) {\n+\t\t\tJavaNode javaNode = wrapper.searchJavaClassByClassName(settings.getCmdSelectClass());\n+\t\t\tif (javaNode == null) {\n+\t\t\t\tJOptionPane.showMessageDialog(this,\n+\t\t\t\t\t\tNLS.str(\"msg.cmd_select_class_error\", settings.getCmdSelectClass()),\n+\t\t\t\t\t\tNLS.str(\"error_dialog.title\"), JOptionPane.ERROR_MESSAGE);\n+\t\t\t} else {\n+\t\t\t\tJNode node = cacheObject.getNodeCache().makeFrom(javaNode);\n+\t\t\t\ttabbedPane.codeJump(new JumpPosition(node.getRootClass(), node.getLine()));\n \t\t\t}\n \t\t}\n \t}\n@@ -313,6 +316,7 @@ void open(Path path) {\n \t\t\t\t\t\tdeobfToggleBtn.setSelected(settings.isDeobfuscationOn());\n \t\t\t\t\t\tinitTree();\n \t\t\t\t\t\tupdate();\n+\t\t\t\t\t\thandleSelectClassOption();\n \t\t\t\t\t\trunBackgroundJobs();\n \t\t\t\t\t});\n \t\t}",
      "parent_sha": "af6f8b53911a02f3ad625e2702c478e0763074de"
    }
  },
  {
    "oid": "1c89c7290c171130ec81b79a161e5a45c154abf4",
    "message": "fix(gui): discard old settings migrations",
    "date": "2023-04-20T16:22:15Z",
    "url": "https://github.com/skylot/jadx/commit/1c89c7290c171130ec81b79a161e5a45c154abf4",
    "details": {
      "sha": "e682726ed9b1d8b3b5c06f79c8d64f8d8ce84b70",
      "filename": "jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java",
      "status": "modified",
      "additions": 5,
      "deletions": 62,
      "changes": 67,
      "blob_url": "https://github.com/skylot/jadx/blob/1c89c7290c171130ec81b79a161e5a45c154abf4/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettings.java",
      "raw_url": "https://github.com/skylot/jadx/raw/1c89c7290c171130ec81b79a161e5a45c154abf4/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettings.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettings.java?ref=1c89c7290c171130ec81b79a161e5a45c154abf4",
      "patch": "@@ -66,12 +66,12 @@ public class JadxSettings extends JadxCLIArgs {\n \tprivate List<Path> recentProjects = new ArrayList<>();\n \tprivate String fontStr = \"\";\n \tprivate String smaliFontStr = \"\";\n-\tprivate String editorThemePath = \"\";\n+\tprivate String editorThemePath = EditorTheme.getDefaultTheme().getPath();\n \tprivate String lafTheme = LafManager.INITIAL_THEME_NAME;\n \tprivate LangLocale langLocale = NLS.defaultLocale();\n \tprivate boolean autoStartJobs = false;\n \tprivate String excludedPackages = \"\";\n-\tprivate boolean autoSaveProject = false;\n+\tprivate boolean autoSaveProject = true;\n \n \tprivate boolean showHeapUsageBar = false;\n \tprivate boolean alwaysSelectOpened = false;\n@@ -107,7 +107,7 @@ public class JadxSettings extends JadxCLIArgs {\n \n \tprivate boolean dockLogViewer = true;\n \n-\tprivate int settingsVersion = 0;\n+\tprivate int settingsVersion = CURRENT_SETTINGS_VERSION;\n \n \t@JadxSettingsAdapter.GsonExclude\n \t@Parameter(names = { \"-sc\", \"--select-class\" }, description = \"GUI: Open the selected class and show the decompiled code\")\n@@ -699,65 +699,8 @@ public void setDockLogViewer(boolean dockLogViewer) {\n \n \tprivate void upgradeSettings(int fromVersion) {\n \t\tLOG.debug(\"upgrade settings from version: {} to {}\", fromVersion, CURRENT_SETTINGS_VERSION);\n-\t\tif (fromVersion == 0) {\n-\t\t\tsetDeobfuscationMinLength(3);\n-\t\t\tsetDeobfuscationMaxLength(64);\n-\t\t\tsetDeobfuscationUseSourceNameAsAlias(true);\n-\t\t\tsetDeobfuscationParseKotlinMetadata(true);\n-\t\t\tsetGeneratedRenamesMappingFileMode(GeneratedRenamesMappingFileMode.getDefault());\n-\t\t\tsetThreadsCount(JadxArgs.DEFAULT_THREADS_COUNT);\n-\t\t\tsetReplaceConsts(true);\n-\t\t\tsetSkipResources(false);\n-\t\t\tsetAutoStartJobs(false);\n-\t\t\tsetAutoSaveProject(true);\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 1) {\n-\t\t\tsetEditorThemePath(EditorTheme.getDefaultTheme().getPath());\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 2) {\n-\t\t\tif (getDeobfuscationMinLength() == 4) {\n-\t\t\t\tsetDeobfuscationMinLength(3);\n-\t\t\t}\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 3) {\n-\t\t\tsetLangLocale(NLS.defaultLocale());\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 4) {\n-\t\t\tsetUseImports(true);\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 5) {\n-\t\t\tsetRespectBytecodeAccessModifiers(false);\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 6) {\n-\t\t\tif (getFont().getFontName().equals(\"Hack Regular\")) {\n-\t\t\t\tsetFont(null);\n-\t\t\t}\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 7) {\n-\t\t\toutDir = null;\n-\t\t\toutDirSrc = null;\n-\t\t\toutDirRes = null;\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 8) {\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 9) {\n-\t\t\tshowHeapUsageBar = false;\n-\t\t\tfromVersion++;\n-\t\t}\n-\t\tif (fromVersion == 10) {\n-\t\t\tsrhResourceSkipSize = 3;\n-\t\t\tsrhResourceFileExt = \".xml|.html|.js|.json|.txt\";\n-\t\t\tfontStr = fontStr.replace('-', '/');\n-\t\t\tfromVersion++;\n+\t\tif (fromVersion <= 10) {\n+\t\t\tfromVersion = 11;\n \t\t}\n \t\tif (fromVersion == 11) {\n \t\t\tinlineMethods = true;",
      "parent_sha": "1891f6fd7eb8c7d45f858460e13053c41ebfcb17"
    }
  },
  {
    "oid": "009749cf8b73bfa521e7252fe27a464db2f82451",
    "message": "core: ignore errors in debug info parser (fix #176)",
    "date": "2018-01-02T12:22:49Z",
    "url": "https://github.com/skylot/jadx/commit/009749cf8b73bfa521e7252fe27a464db2f82451",
    "details": {
      "sha": "69375ff847923ac42fc2978beb070c2c133431bf",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/DebugInfoVisitor.java",
      "status": "modified",
      "additions": 56,
      "deletions": 29,
      "changes": 85,
      "blob_url": "https://github.com/skylot/jadx/blob/009749cf8b73bfa521e7252fe27a464db2f82451/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FDebugInfoVisitor.java",
      "raw_url": "https://github.com/skylot/jadx/raw/009749cf8b73bfa521e7252fe27a464db2f82451/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FDebugInfoVisitor.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FDebugInfoVisitor.java?ref=009749cf8b73bfa521e7252fe27a464db2f82451",
      "patch": "@@ -1,53 +1,80 @@\n package jadx.core.dex.visitors;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import jadx.core.dex.instructions.args.ArgType;\n import jadx.core.dex.instructions.args.RegisterArg;\n import jadx.core.dex.nodes.BlockNode;\n import jadx.core.dex.nodes.InsnNode;\n import jadx.core.dex.nodes.MethodNode;\n import jadx.core.dex.nodes.parser.DebugInfoParser;\n import jadx.core.utils.BlockUtils;\n+import jadx.core.utils.ErrorsCounter;\n+import jadx.core.utils.exceptions.DecodeException;\n import jadx.core.utils.exceptions.JadxException;\n \n public class DebugInfoVisitor extends AbstractVisitor {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(DebugInfoVisitor.class);\n+\n \t@Override\n \tpublic void visit(MethodNode mth) throws JadxException {\n-\t\tint debugOffset = mth.getDebugInfoOffset();\n-\t\tif (debugOffset > 0) {\n-\t\t\tInsnNode[] insnArr = mth.getInstructions();\n-\t\t\tDebugInfoParser debugInfoParser = new DebugInfoParser(mth, debugOffset, insnArr);\n-\t\t\tdebugInfoParser.process();\n-\n-\t\t\t// set method source line from first instruction\n-\t\t\tif (insnArr.length != 0) {\n-\t\t\t\tfor (InsnNode insn : insnArr) {\n-\t\t\t\t\tif (insn != null) {\n-\t\t\t\t\t\tint line = insn.getSourceLine();\n-\t\t\t\t\t\tif (line != 0) {\n-\t\t\t\t\t\t\tmth.setSourceLine(line - 1);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\ttry {\n+\t\t\tint debugOffset = mth.getDebugInfoOffset();\n+\t\t\tif (debugOffset > 0) {\n+\t\t\t\tprocessDebugInfo(mth, debugOffset);\n \t\t\t}\n-\t\t\tif (!mth.getReturnType().equals(ArgType.VOID)) {\n-\t\t\t\t// fix debug info for splitter 'return' instructions\n-\t\t\t\tfor (BlockNode exit : mth.getExitBlocks()) {\n-\t\t\t\t\tInsnNode ret = BlockUtils.getLastInsn(exit);\n-\t\t\t\t\tif (ret == null) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\t\t\t\t\tInsnNode oldRet = insnArr[ret.getOffset()];\n-\t\t\t\t\tif (oldRet == ret) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tLOG.error(\"Error in debug info parser: \" + ErrorsCounter.formatErrorMsg(mth, e.getMessage()), e);\n+\t\t} finally {\n+\t\t\tmth.unloadInsnArr();\n+\t\t}\n+\t}\n+\n+\tprivate void processDebugInfo(MethodNode mth, int debugOffset) throws DecodeException {\n+\t\tInsnNode[] insnArr = mth.getInstructions();\n+\t\tDebugInfoParser debugInfoParser = new DebugInfoParser(mth, debugOffset, insnArr);\n+\t\tdebugInfoParser.process();\n+\n+\t\tif (insnArr.length != 0) {\n+\t\t\tsetMethodSourceLine(mth, insnArr);\n+\t\t}\n+\t\tif (!mth.getReturnType().equals(ArgType.VOID)) {\n+\t\t\tsetLineForReturn(mth, insnArr);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Fix debug info for splitter 'return' instructions\n+\t */\n+\tprivate void setLineForReturn(MethodNode mth, InsnNode[] insnArr) {\n+\t\tfor (BlockNode exit : mth.getExitBlocks()) {\n+\t\t\tInsnNode ret = BlockUtils.getLastInsn(exit);\n+\t\t\tif (ret != null) {\n+\t\t\t\tInsnNode oldRet = insnArr[ret.getOffset()];\n+\t\t\t\tif (oldRet != ret) {\n \t\t\t\t\tRegisterArg oldArg = (RegisterArg) oldRet.getArg(0);\n \t\t\t\t\tRegisterArg newArg = (RegisterArg) ret.getArg(0);\n \t\t\t\t\tnewArg.mergeDebugInfo(oldArg.getType(), oldArg.getName());\n \t\t\t\t\tret.setSourceLine(oldRet.getSourceLine());\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tmth.unloadInsnArr();\n+\t}\n+\n+\t/**\n+\t * Set method source line from first instruction\n+\t */\n+\tprivate void setMethodSourceLine(MethodNode mth, InsnNode[] insnArr) {\n+\t\tfor (InsnNode insn : insnArr) {\n+\t\t\tif (insn != null) {\n+\t\t\t\tint line = insn.getSourceLine();\n+\t\t\t\tif (line != 0) {\n+\t\t\t\t\tmth.setSourceLine(line - 1);\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n \t}\n }",
      "parent_sha": "da94e7b1be7109d03a4f1a629eefbf1ae472cf9a"
    }
  },
  {
    "oid": "e7151ad7b2e41cbd823ddd362c907c4e0db1d39b",
    "message": "fix(gui): IllegalArgumentException when saving project to a different directory than the APK file (#1387)(PR #1388)",
    "date": "2022-02-23T09:27:04Z",
    "url": "https://github.com/skylot/jadx/commit/e7151ad7b2e41cbd823ddd362c907c4e0db1d39b",
    "details": {
      "sha": "3df8946859055f825f2ebe37b48fce0fa53089bd",
      "filename": "jadx-gui/src/main/java/jadx/gui/utils/RelativePathTypeAdapter.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/skylot/jadx/blob/e7151ad7b2e41cbd823ddd362c907c4e0db1d39b/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FRelativePathTypeAdapter.java",
      "raw_url": "https://github.com/skylot/jadx/raw/e7151ad7b2e41cbd823ddd362c907c4e0db1d39b/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FRelativePathTypeAdapter.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FRelativePathTypeAdapter.java?ref=e7151ad7b2e41cbd823ddd362c907c4e0db1d39b",
      "patch": "@@ -5,12 +5,18 @@\n import java.nio.file.Paths;\n import java.util.Objects;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import com.google.gson.TypeAdapter;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n \n public class RelativePathTypeAdapter extends TypeAdapter<Path> {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(RelativePathTypeAdapter.class);\n+\n \tprivate final Path basePath;\n \n \tpublic RelativePathTypeAdapter(Path basePath) {\n@@ -23,8 +29,14 @@ public void write(JsonWriter out, Path value) throws IOException {\n \t\t\tout.nullValue();\n \t\t} else {\n \t\t\tvalue = value.toAbsolutePath().normalize();\n-\t\t\tString relativePath = basePath.relativize(value).toString();\n-\t\t\tout.value(relativePath);\n+\t\t\tPath resultPath;\n+\t\t\ttry {\n+\t\t\t\tresultPath = basePath.relativize(value);\n+\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\tLOG.warn(\"Unable to build a relative path to {} - using absolute path\", value);\n+\t\t\t\tresultPath = value;\n+\t\t\t}\n+\t\t\tout.value(resultPath.toString());\n \t\t}\n \t}\n ",
      "parent_sha": "ed2a3c8458cdb3fb55e7a2abca9c8acb26822e20"
    }
  },
  {
    "oid": "df9ae295db40a051fcd5e8f94454353957cc8544",
    "message": "feat: make the import class name clickable (#378)",
    "date": "2018-10-25T13:36:37Z",
    "url": "https://github.com/skylot/jadx/commit/df9ae295db40a051fcd5e8f94454353957cc8544",
    "details": {
      "sha": "344c07fe34b1272005f5835aa70e3786c491e9d4",
      "filename": "jadx-core/src/main/java/jadx/core/codegen/ClassGen.java",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/skylot/jadx/blob/df9ae295db40a051fcd5e8f94454353957cc8544/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FClassGen.java",
      "raw_url": "https://github.com/skylot/jadx/raw/df9ae295db40a051fcd5e8f94454353957cc8544/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FClassGen.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FClassGen.java?ref=df9ae295db40a051fcd5e8f94454353957cc8544",
      "patch": "@@ -91,7 +91,24 @@ public CodeWriter makeClass() throws CodegenException {\n \t\t\tCollections.sort(sortImports);\n \n \t\t\tfor (String imp : sortImports) {\n-\t\t\t\tclsCode.startLine(\"import \").add(imp).add(';');\n+\t\t\t\tClassInfo importClassInfo = ClassInfo.fromName(cls.dex().root(), imp);\n+\t\t\t\tClassNode classNode = cls.dex().resolveClass(importClassInfo);\n+\t\t\t\t// Clickable element seems to be limited by the next dot, therefore\n+\t\t\t\t// we can't just use the complete class name including packagename\n+\t\t\t\tint clsDotIdx = imp.lastIndexOf('.');\n+\t\t\t\tString pkg = \"\";\n+\t\t\t\tif (clsDotIdx >= 0) {\n+\t\t\t\t\tpkg = imp.substring(0, clsDotIdx + 1);\n+\t\t\t\t\timp = imp.substring(clsDotIdx + 1);\n+\t\t\t\t}\n+\t\t\t\tclsCode.startLine(\"import \");\n+\t\t\t\tclsCode.add(pkg);\n+\t\t\t\tif (classNode != null) {\n+\t\t\t\t\t// attach the clickable link info to the class name\n+\t\t\t\t\tclsCode.attachAnnotation(classNode);\n+\t\t\t\t}\n+\t\t\t\tclsCode.add(imp);\n+\t\t\t\tclsCode.add(';');\n \t\t\t}\n \t\t\tclsCode.newLine();\n ",
      "parent_sha": "8c348c935c18351dfb4fedcf7d4a2a05132e680f"
    }
  },
  {
    "oid": "f5307636efec26db3b8f4437a795b85bd85b45fc",
    "message": "fix(gui): merge full class name tokens for constructors (#2261)",
    "date": "2024-08-30T19:39:43Z",
    "url": "https://github.com/skylot/jadx/commit/f5307636efec26db3b8f4437a795b85bd85b45fc",
    "details": {
      "sha": "51cd5a4fcc3e8130db73636a7ce84492ee401bd6",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/codearea/CodeArea.java",
      "status": "modified",
      "additions": 17,
      "deletions": 6,
      "changes": 23,
      "blob_url": "https://github.com/skylot/jadx/blob/f5307636efec26db3b8f4437a795b85bd85b45fc/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FCodeArea.java",
      "raw_url": "https://github.com/skylot/jadx/raw/f5307636efec26db3b8f4437a795b85bd85b45fc/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FCodeArea.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FCodeArea.java?ref=f5307636efec26db3b8f4437a795b85bd85b45fc",
      "patch": "@@ -298,19 +298,30 @@ public JavaNode getEnclosingJavaNode(int offset) {\n \t\t}\n \t}\n \n-\tpublic JavaClass getJavaClassIfAtPos(int pos) {\n+\tpublic @Nullable JavaClass getJavaClassIfAtPos(int pos) {\n \t\ttry {\n \t\t\tICodeInfo codeInfo = getCodeInfo();\n-\t\t\tif (codeInfo.hasMetadata()) {\n-\t\t\t\tICodeAnnotation ann = codeInfo.getCodeMetadata().getAt(pos);\n-\t\t\t\tif (ann != null && ann.getAnnType() == ICodeAnnotation.AnnType.CLASS) {\n+\t\t\tif (!codeInfo.hasMetadata()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tICodeAnnotation ann = codeInfo.getCodeMetadata().getAt(pos);\n+\t\t\tif (ann == null) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tswitch (ann.getAnnType()) {\n+\t\t\t\tcase CLASS:\n \t\t\t\t\treturn (JavaClass) getJadxWrapper().getDecompiler().getJavaNodeByCodeAnnotation(codeInfo, ann);\n-\t\t\t\t}\n+\t\t\t\tcase METHOD:\n+\t\t\t\t\t// use class from constructor call\n+\t\t\t\t\tJavaNode node = getJadxWrapper().getDecompiler().getJavaNodeByCodeAnnotation(codeInfo, ann);\n+\t\t\t\t\treturn node != null ? node.getDeclaringClass() : null;\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn null;\n \t\t\t}\n \t\t} catch (Exception e) {\n \t\t\tLOG.error(\"Can't get java node by offset: {}\", pos, e);\n+\t\t\treturn null;\n \t\t}\n-\t\treturn null;\n \t}\n \n \tpublic void refreshClass() {",
      "parent_sha": "9a39b70a4647c2f1aae3bf5df8d6535c9e038961"
    }
  },
  {
    "oid": "11db454b84044d45e73b34e9c5c7297974a52e14",
    "message": "fix: duplicate result arg on instruction copy",
    "date": "2019-10-30T20:59:14Z",
    "url": "https://github.com/skylot/jadx/commit/11db454b84044d45e73b34e9c5c7297974a52e14",
    "details": {
      "sha": "6e2d9024620b02acb29e22f0a6230b8c4e429de1",
      "filename": "jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/skylot/jadx/blob/11db454b84044d45e73b34e9c5c7297974a52e14/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FInsnNode.java",
      "raw_url": "https://github.com/skylot/jadx/raw/11db454b84044d45e73b34e9c5c7297974a52e14/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FInsnNode.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FInsnNode.java?ref=11db454b84044d45e73b34e9c5c7297974a52e14",
      "patch": "@@ -323,7 +323,9 @@ public boolean isDeepEquals(InsnNode other) {\n \t}\n \n \tprotected final <T extends InsnNode> T copyCommonParams(T copy) {\n-\t\tcopy.setResult(result);\n+\t\tif (result != null) {\n+\t\t\tcopy.setResult(result.duplicate());\n+\t\t}\n \t\tif (copy.getArgsCount() == 0) {\n \t\t\tfor (InsnArg arg : this.getArguments()) {\n \t\t\t\tif (arg.isInsnWrap()) {",
      "parent_sha": "1b60c1d1a8a0e65237b1fec8abbea347de395127"
    }
  },
  {
    "oid": "8760b4ddde79a10ce05b46f2110181b8cabf18be",
    "message": "fix(gui): copy strings without quotes (PR #2121)\n\n* Update AbstractCodeArea.java\r\n\r\nIn general, we need data, not text in code. But now every time you copy the highlighted text, you copy the highlighted quotes as well. This often results in an extra need to delete the quotation marks around the sides, which is confusing.\r\nNow when copying selected highlighted text, quotes are not copied in.\r\n\r\n* Update AbstractCodeArea.java\r\n\r\nfix code format\r\n\r\n* additional checks, move to common method\r\n\r\n---------\r\n\r\nCo-authored-by: Skylot <skylot@gmail.com>",
    "date": "2024-03-16T18:55:57Z",
    "url": "https://github.com/skylot/jadx/commit/8760b4ddde79a10ce05b46f2110181b8cabf18be",
    "details": {
      "sha": "655b14de776181b1ded318ed30b263d18cc8e9fc",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/codearea/AbstractCodeArea.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/skylot/jadx/blob/8760b4ddde79a10ce05b46f2110181b8cabf18be/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FAbstractCodeArea.java",
      "raw_url": "https://github.com/skylot/jadx/raw/8760b4ddde79a10ce05b46f2110181b8cabf18be/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FAbstractCodeArea.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FAbstractCodeArea.java?ref=8760b4ddde79a10ce05b46f2110181b8cabf18be",
      "patch": "@@ -272,10 +272,15 @@ public String getWordUnderCaret() {\n \n \tpublic @Nullable String getWordByPosition(int offset) {\n \t\tToken token = getWordTokenAtOffset(offset);\n-\t\tif (token != null) {\n-\t\t\treturn token.getLexeme();\n+\t\tif (token == null) {\n+\t\t\treturn null;\n \t\t}\n-\t\treturn null;\n+\t\tString str = token.getLexeme();\n+\t\tint len = str.length();\n+\t\tif (len > 2 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\")) {\n+\t\t\treturn str.substring(1, len - 1);\n+\t\t}\n+\t\treturn str;\n \t}\n \n \t/**",
      "parent_sha": "3599b248a413434f63c2c173d55de1e86e5595a0"
    }
  },
  {
    "oid": "d22db30166e7cb369d72be41382bb63ac8b81c52",
    "message": "fix: use secure xml parser for process manifest",
    "date": "2022-01-20T11:17:12Z",
    "url": "https://github.com/skylot/jadx/commit/d22db30166e7cb369d72be41382bb63ac8b81c52",
    "details": {
      "sha": "8272bf3a03256ffb8dd992693de3d930292c9368",
      "filename": "jadx-core/src/main/java/jadx/core/export/ExportGradleProject.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/skylot/jadx/blob/d22db30166e7cb369d72be41382bb63ac8b81c52/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fexport%2FExportGradleProject.java",
      "raw_url": "https://github.com/skylot/jadx/raw/d22db30166e7cb369d72be41382bb63ac8b81c52/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fexport%2FExportGradleProject.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fexport%2FExportGradleProject.java?ref=d22db30166e7cb369d72be41382bb63ac8b81c52",
      "patch": "@@ -8,7 +8,6 @@\n import java.util.Set;\n \n import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -24,6 +23,7 @@\n import jadx.core.utils.exceptions.JadxRuntimeException;\n import jadx.core.utils.files.FileUtils;\n import jadx.core.xmlgen.ResContainer;\n+import jadx.core.xmlgen.XmlSecurity;\n \n public class ExportGradleProject {\n \n@@ -139,7 +139,7 @@ private ApplicationParams getApplicationParams(Document androidManifest, Documen\n \n \tprivate Document parseXml(String xmlContent) {\n \t\ttry {\n-\t\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+\t\t\tDocumentBuilder builder = XmlSecurity.getSecureDbf().newDocumentBuilder();\n \t\t\tDocument document = builder.parse(new InputSource(new StringReader(xmlContent)));\n \n \t\t\tdocument.getDocumentElement().normalize();",
      "parent_sha": "6db61e7a5908db0138a3a15d42c0a46ae787c72c"
    }
  },
  {
    "oid": "42b784376195082f9766e492f940033e4f03d9b0",
    "message": "fix: use quantity attribute for plurals (PR #486)",
    "date": "2019-03-22T08:04:30Z",
    "url": "https://github.com/skylot/jadx/commit/42b784376195082f9766e492f940033e4f03d9b0",
    "details": {
      "sha": "a23768495b8c462167f53201b04c60032c4cba4a",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ResXmlGen.java",
      "status": "modified",
      "additions": 18,
      "deletions": 10,
      "changes": 28,
      "blob_url": "https://github.com/skylot/jadx/blob/42b784376195082f9766e492f940033e4f03d9b0/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGen.java",
      "raw_url": "https://github.com/skylot/jadx/raw/42b784376195082f9766e492f940033e4f03d9b0/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGen.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGen.java?ref=42b784376195082f9766e492f940033e4f03d9b0",
      "patch": "@@ -15,6 +15,8 @@\n import jadx.core.xmlgen.entry.ResourceEntry;\n import jadx.core.xmlgen.entry.ValuesParser;\n \n+import static jadx.core.xmlgen.ParserConstants.PLURALS_MAP;\n+\n public class ResXmlGen {\n \n \tprivate static final Set<String> SKIP_RES_TYPES = new HashSet<>(Arrays.asList(\n@@ -147,16 +149,22 @@ private void addItem(CodeWriter cw, String itemTag, String typeName, RawNamedVal\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tif (typeName.equals(\"attr\")) {\n-\t\t\tif (nameStr != null) {\n-\t\t\t\taddSimpleValue(cw, typeName, itemTag, nameStr, valueStr, \"\");\n-\t\t\t}\n-\t\t} else if (typeName.equals(\"style\")) {\n-\t\t\tif (nameStr != null) {\n-\t\t\t\taddSimpleValue(cw, typeName, itemTag, nameStr, \"\", valueStr);\n-\t\t\t}\n-\t\t} else {\n-\t\t\taddSimpleValue(cw, typeName, itemTag, null, null, valueStr);\n+\t\tswitch (typeName) {\n+\t\t\tcase \"attr\":\n+\t\t\t\tif (nameStr != null)\n+\t\t\t\t\taddSimpleValue(cw, typeName, itemTag, nameStr, valueStr, \"\");\n+\t\t\t\tbreak;\n+\t\t\tcase \"style\":\n+\t\t\t\tif (nameStr != null)\n+\t\t\t\t\taddSimpleValue(cw, typeName, itemTag, nameStr, \"\", valueStr);\n+\t\t\t\tbreak;\n+\t\t\tcase \"plurals\":\n+\t\t\t\tfinal String quantity = PLURALS_MAP.get(value.getNameRef());\n+\t\t\t\taddSimpleValue(cw, typeName, itemTag, \"quantity\", quantity, valueStr);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\taddSimpleValue(cw, typeName, itemTag, null, null, valueStr);\n+\t\t\t\tbreak;\n \t\t}\n \t}\n ",
      "parent_sha": "d5f42662835a861064564bebbe26a514cd3430fa"
    }
  },
  {
    "oid": "bd0d248fd01d792076a8767788a3bf9aa09b5aa1",
    "message": "fix: additionally show smali code of all inner classes (recursively) (PR #849, #848)",
    "date": "2020-02-10T19:00:32Z",
    "url": "https://github.com/skylot/jadx/commit/bd0d248fd01d792076a8767788a3bf9aa09b5aa1",
    "details": {
      "sha": "9d51039b163184c8a785d31573fa672d11b45240",
      "filename": "jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/skylot/jadx/blob/bd0d248fd01d792076a8767788a3bf9aa09b5aa1/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java",
      "raw_url": "https://github.com/skylot/jadx/raw/bd0d248fd01d792076a8767788a3bf9aa09b5aa1/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java?ref=bd0d248fd01d792076a8767788a3bf9aa09b5aa1",
      "patch": "@@ -2,6 +2,7 @@\n \n import java.io.StringWriter;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -451,6 +452,18 @@ public List<ClassNode> getInnerClasses() {\n \t\treturn innerClasses;\n \t}\n \n+\t/**\n+\t * Get all inner classes recursively\n+\t *\n+\t * @param innerClassesColl all identified inner classes are added to this collection\n+\t */\n+\tpublic void getInnerClassesRecursive(Collection<ClassNode> innerClassesColl) {\n+\t\tfor (ClassNode innerClass : innerClasses) {\n+\t\t\tinnerClassesColl.add(innerClass);\n+\t\t\tinnerClass.getInnerClassesRecursive(innerClassesColl);\n+\t\t}\n+\t}\n+\n \tpublic void addInnerClass(ClassNode cls) {\n \t\tif (innerClasses.isEmpty()) {\n \t\t\tinnerClasses = new ArrayList<>(5);\n@@ -537,7 +550,9 @@ public String getSmali() {\n \t\t\tStringWriter stringWriter = new StringWriter(4096);\n \t\t\tgetSmali(this, stringWriter);\n \t\t\tstringWriter.append(System.lineSeparator());\n-\t\t\tfor (ClassNode innerClass : innerClasses) {\n+\t\t\tList<ClassNode> allInnerClasses = new ArrayList<>();\n+\t\t\tgetInnerClassesRecursive(allInnerClasses);\n+\t\t\tfor (ClassNode innerClass : allInnerClasses) {\n \t\t\t\tgetSmali(innerClass, stringWriter);\n \t\t\t\tstringWriter.append(System.lineSeparator());\n \t\t\t}",
      "parent_sha": "c24a3edb4489d008cd771c0f851fdc209b945f21"
    }
  },
  {
    "oid": "937dd20794c66dccb3a284160876b3875759ce65",
    "message": "feat(res): support 16-bit entry offsets (PR #2269)",
    "date": "2024-09-06T22:21:21Z",
    "url": "https://github.com/skylot/jadx/commit/937dd20794c66dccb3a284160876b3875759ce65",
    "details": {
      "sha": "a7c4381a997d65469654f08ff33a4d83afc4af51",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ResTableBinaryParser.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/skylot/jadx/blob/937dd20794c66dccb3a284160876b3875759ce65/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableBinaryParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/937dd20794c66dccb3a284160876b3875759ce65/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableBinaryParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableBinaryParser.java?ref=937dd20794c66dccb3a284160876b3875759ce65",
      "patch": "@@ -279,10 +279,6 @@ private void parseTypeChunk(long start, PackageChunk pkg) throws IOException {\n \t\tboolean isSparse = (flags & FLAG_SPARSE) != 0;\n \t\tboolean isOffset16 = (flags & FLAG_OFFSET16) != 0;\n \n-\t\tif (isOffset16) {\n-\t\t\tthrow new JadxRuntimeException(\"16-bit entry offsets are not supported yet\");\n-\t\t}\n-\n \t\tis.checkInt16(0, \"type chunk, reserved\");\n \t\tint entryCount = is.readInt32();\n \t\tlong entriesStart = start + is.readInt32();\n@@ -301,6 +297,12 @@ private void parseTypeChunk(long start, PackageChunk pkg) throws IOException {\n \t\t\t\tint offset = is.readInt16() * 4; // The offset in ResTable_sparseTypeEntry::offset is stored divided by 4.\n \t\t\t\tentryOffsetMap.put(idx, offset);\n \t\t\t}\n+\t\t} else if (isOffset16) {\n+\t\t\tfor (int i = 0; i < entryCount; i++) {\n+\t\t\t\tint offset = is.readInt16();\n+\t\t\t\tint realOffset = offset == 0xFFFF ? NO_ENTRY : offset * 4;\n+\t\t\t\tentryOffsetMap.put(i, realOffset);\n+\t\t\t}\n \t\t} else {\n \t\t\tfor (int i = 0; i < entryCount; i++) {\n \t\t\t\tentryOffsetMap.put(i, is.readInt32());",
      "parent_sha": "ea5e87560a45f0aa6cb20d82d0ed51c7e1e45179"
    }
  },
  {
    "oid": "94e9291c406935f8b71395b5421a3292e91b704e",
    "message": "Fixed issue where postProcess may overwrite Deobfuscated method names.\nThe function will now check if the method name was aliased by Deobfuscation and if so it will use that name for all the overriden methods. Note: If the deobfuscation file contains two names for the same overriden method in two related Classes then the name that \"wins\" is non-deterministic.",
    "date": "2017-05-01T01:22:59Z",
    "url": "https://github.com/skylot/jadx/commit/94e9291c406935f8b71395b5421a3292e91b704e",
    "details": {
      "sha": "629f335c2124289e438532c9eb44bf7a91d85b95",
      "filename": "jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/skylot/jadx/blob/94e9291c406935f8b71395b5421a3292e91b704e/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdeobf%2FDeobfuscator.java",
      "raw_url": "https://github.com/skylot/jadx/raw/94e9291c406935f8b71395b5421a3292e91b704e/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdeobf%2FDeobfuscator.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdeobf%2FDeobfuscator.java?ref=94e9291c406935f8b71395b5421a3292e91b704e",
      "patch": "@@ -16,7 +16,6 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -111,22 +110,23 @@ private void process() {\n \tprivate void postProcess() {\n \t\tint id = 1;\n \t\tfor (OverridedMethodsNode o : ovrd) {\n-\n-\t\t\tIterator<MethodInfo> it = o.getMethods().iterator();\n-\t\t\tif (it.hasNext()) {\n-\t\t\t\tMethodInfo mth = it.next();\n-\n-\t\t\t\tif (mth.isRenamed() && !mth.isAliasFromPreset()) {\n-\t\t\t\t\tmth.setAlias(String.format(\"mo%d%s\", id, makeName(mth.getName())));\n+\t\t\tboolean aliasFromPreset = false;\n+\t\t\tString aliasToUse = null;\n+\t\t\tfor(MethodInfo mth : o.getMethods()){\n+\t\t\t\tif(mth.isAliasFromPreset()) {\n+\t\t\t\t\taliasToUse = mth.getAlias();\n+\t\t\t\t\taliasFromPreset = true;\n \t\t\t\t}\n-\t\t\t\tString firstMethodAlias = mth.getAlias();\n-\n-\t\t\t\twhile (it.hasNext()) {\n-\t\t\t\t\tmth = it.next();\n-\t\t\t\t\tif (!mth.getAlias().equals(firstMethodAlias)) {\n-\t\t\t\t\t\tmth.setAlias(firstMethodAlias);\n+\t\t\t}\n+\t\t\tfor(MethodInfo mth : o.getMethods()){\n+\t\t\t\tif(aliasToUse == null) {\n+\t\t\t\t\tif (mth.isRenamed() && !mth.isAliasFromPreset()) {\n+\t\t\t\t\t\tmth.setAlias(String.format(\"mo%d%s\", id, makeName(mth.getName())));\n \t\t\t\t\t}\n+\t\t\t\t\taliasToUse = mth.getAlias();\n \t\t\t\t}\n+\t\t\t\tmth.setAlias(aliasToUse);\n+\t\t\t\tmth.setAliasFromPreset(aliasFromPreset);\n \t\t\t}\n \n \t\t\tid++;",
      "parent_sha": "459d133b5d637a5587d31b541ffccba2613c458c"
    }
  },
  {
    "oid": "15d56abeb659538f793e6e16dade3ce4e2f9e121",
    "message": "fix: read correct buffer size for string pool parsing (#712)",
    "date": "2019-07-15T18:19:58Z",
    "url": "https://github.com/skylot/jadx/commit/15d56abeb659538f793e6e16dade3ce4e2f9e121",
    "details": {
      "sha": "3377f614a493e1e84a22ccd86185499c83e59521",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/CommonBinaryParser.java",
      "status": "modified",
      "additions": 4,
      "deletions": 12,
      "changes": 16,
      "blob_url": "https://github.com/skylot/jadx/blob/15d56abeb659538f793e6e16dade3ce4e2f9e121/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FCommonBinaryParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/15d56abeb659538f793e6e16dade3ce4e2f9e121/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FCommonBinaryParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FCommonBinaryParser.java?ref=15d56abeb659538f793e6e16dade3ce4e2f9e121",
      "patch": "@@ -27,30 +27,22 @@ protected String[] parseStringPoolNoType() throws IOException {\n \t\tint[] stylesOffset = is.readInt32Array(styleCount);\n \n \t\tis.checkPos(start + stringsStart, \"Expected strings start\");\n-\t\tlong stringsEnd = stylesStart == 0 ? chunkEnd : start + stylesStart;\n \t\tString[] strings = new String[stringCount];\n-\t\tbyte[] strArray = is.readInt8Array((int) (stringsEnd - is.getPos()));\n+\t\tbyte[] strData = is.readInt8Array((int) (chunkEnd - is.getPos()));\n \t\tif ((flags & UTF8_FLAG) != 0) {\n \t\t\t// UTF-8\n \t\t\tfor (int i = 0; i < stringCount; i++) {\n-\t\t\t\tstrings[i] = extractString8(strArray, stringsOffset[i]);\n+\t\t\t\tstrings[i] = extractString8(strData, stringsOffset[i]);\n \t\t\t}\n \t\t} else {\n \t\t\t// UTF-16\n \t\t\tfor (int i = 0; i < stringCount; i++) {\n \t\t\t\t// don't trust specified string length, read until \\0\n \t\t\t\t// stringsOffset can be same for different indexes\n-\t\t\t\tstrings[i] = extractString16(strArray, stringsOffset[i]);\n+\t\t\t\tstrings[i] = extractString16(strData, stringsOffset[i]);\n \t\t\t}\n \t\t}\n-\t\tif (stylesStart != 0) {\n-\t\t\tis.checkPos(start + stylesStart, \"Expected styles start\");\n-\t\t\tif (styleCount != 0) {\n-\t\t\t\t// TODO: implement styles parsing\n-\t\t\t}\n-\t\t}\n-\t\t// skip padding zeroes\n-\t\tis.skipToPos(chunkEnd, \"Skip string pool padding\");\n+\t\tis.checkPos(chunkEnd, \"Expected strings pool end\");\n \t\treturn strings;\n \t}\n ",
      "parent_sha": "d89ec67888fc86a82eb7d26d06a4689f8499f321"
    }
  },
  {
    "oid": "49a82c83887839d126d195c3d34fc6801f3cbe32",
    "message": "fix: method info cache error (#868)",
    "date": "2020-02-29T19:22:18Z",
    "url": "https://github.com/skylot/jadx/commit/49a82c83887839d126d195c3d34fc6801f3cbe32",
    "details": {
      "sha": "b0a79a5a29c81bc4462ae721f86576c810927a8b",
      "filename": "jadx-core/src/main/java/jadx/core/dex/info/InfoStorage.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/skylot/jadx/blob/49a82c83887839d126d195c3d34fc6801f3cbe32/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Finfo%2FInfoStorage.java",
      "raw_url": "https://github.com/skylot/jadx/raw/49a82c83887839d126d195c3d34fc6801f3cbe32/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Finfo%2FInfoStorage.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Finfo%2FInfoStorage.java?ref=49a82c83887839d126d195c3d34fc6801f3cbe32",
      "patch": "@@ -26,20 +26,22 @@ public ClassInfo putCls(ClassInfo cls) {\n \t\t}\n \t}\n \n-\tprivate int generateMethodLookupId(DexNode dex, int mthId) {\n+\tprivate static int generateMethodLookupId(DexNode dex, int mthId) {\n \t\treturn dex.getDexId() << 16 | mthId;\n \t}\n \n \tpublic MethodInfo getMethod(DexNode dex, int mtdId) {\n-\t\treturn methods.get(generateMethodLookupId(dex, mtdId));\n+\t\tsynchronized (methods) {\n+\t\t\treturn methods.get(generateMethodLookupId(dex, mtdId));\n+\t\t}\n \t}\n \n \tpublic MethodInfo putMethod(DexNode dex, int mthId, MethodInfo methodInfo) {\n \t\tsynchronized (methods) {\n \t\t\tMethodInfo uniqueMethodInfo = putMethod(methodInfo);\n \t\t\tMethodInfo prev = methods.put(generateMethodLookupId(dex, mthId), uniqueMethodInfo);\n-\t\t\tif (prev != null) {\n-\t\t\t\tthrow new JadxRuntimeException(\"Method info already added: \" + methodInfo);\n+\t\t\tif (prev != null && prev != uniqueMethodInfo) {\n+\t\t\t\tthrow new JadxRuntimeException(\"Method lookup id collision: \" + methodInfo + \", \" + prev + \", \" + uniqueMethodInfo);\n \t\t\t}\n \t\t\treturn uniqueMethodInfo;\n \t\t}",
      "parent_sha": "26bad4a1cd797c886661a50f9376b8e03be282e8"
    }
  },
  {
    "oid": "82d4099541790f31f5cd00964f60436748f47f0b",
    "message": "fix(res): skip unused bytes in xml attributes parsing (#1013)",
    "date": "2020-11-11T16:46:26Z",
    "url": "https://github.com/skylot/jadx/commit/82d4099541790f31f5cd00964f60436748f47f0b",
    "details": {
      "sha": "8e37d5cef71f1b3547ab3fcd6816ffbd05718516",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/skylot/jadx/blob/82d4099541790f31f5cd00964f60436748f47f0b/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/82d4099541790f31f5cd00964f60436748f47f0b/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java?ref=82d4099541790f31f5cd00964f60436748f47f0b",
      "patch": "@@ -280,13 +280,7 @@ private void parseAttribute(int i, boolean newLine) throws IOException {\n \t\tint attributeNS = is.readInt32();\n \t\tint attributeName = is.readInt32();\n \t\tint attributeRawValue = is.readInt32();\n-\t\tint attrValSize = is.readInt16();\n-\t\tif (attrValSize != 0x08) {\n-\t\t\tdie(\"attrValSize != 0x08 not supported\");\n-\t\t}\n-\t\tif (is.readInt8() != 0) {\n-\t\t\tdie(\"res0 is not 0\");\n-\t\t}\n+\t\tis.skip(3);\n \t\tint attrValDataType = is.readInt8();\n \t\tint attrValData = is.readInt32();\n ",
      "parent_sha": "5f659c8de7c6a289670041a31a5099feb73c76da"
    }
  },
  {
    "oid": "dd51783d9ea26228e210df7cce09768f99965886",
    "message": "fix(cli): make enum CLI arguments match documented format (PR #1787)\n\nCurrently if you do `jadx --help`, it says the `--deobf-cfg-file-mode` option accepts the value `read-or-save`. \r\n\r\nHowever, if you give it that option, it instead prints the following error message:\r\n\r\n```\r\njava.lang.IllegalArgumentException: 'read-or-save' is unknown, possible values are: read, read-or-save, overwrite, ignore\r\n\tat jadx.cli.JadxCLIArgs$DeobfuscationMapFileModeConverter.convert(JadxCLIArgs.java:524)\r\n\tat jadx.cli.JadxCLIArgs$DeobfuscationMapFileModeConverter.convert(JadxCLIArgs.java:516)\r\n\tat com.beust.jcommander.JCommander.convertValue(JCommander.java:1340)\r\n\tat com.beust.jcommander.ParameterDescription.addValue(ParameterDescription.java:249)\r\n\tat com.beust.jcommander.JCommander.processFixedArity(JCommander.java:920)\r\n\tat com.beust.jcommander.JCommander.processFixedArity(JCommander.java:901)\r\n\tat com.beust.jcommander.JCommander.parseValues(JCommander.java:731)\r\n\tat com.beust.jcommander.JCommander.parse(JCommander.java:363)\r\n\tat com.beust.jcommander.JCommander.parse(JCommander.java:342)\r\n\tat jadx.cli.JCommanderWrapper.parse(JCommanderWrapper.java:37)\r\n\tat jadx.cli.JadxCLIArgs.processArgs(JadxCLIArgs.java:211)\r\n\tat jadx.cli.JadxCLI.execute(JadxCLI.java:35)\r\n\tat jadx.cli.JadxCLI.main(JadxCLI.java:20)\r\n```\r\n\r\nThis commit changes all the enum parsers to do the inverse string of `enumValuesString`, so the documented behavior works.",
    "date": "2023-02-27T19:08:07Z",
    "url": "https://github.com/skylot/jadx/commit/dd51783d9ea26228e210df7cce09768f99965886",
    "details": {
      "sha": "4d6152044dd8218aa47ff8d32a0328c234136aed",
      "filename": "jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/skylot/jadx/blob/dd51783d9ea26228e210df7cce09768f99965886/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java",
      "raw_url": "https://github.com/skylot/jadx/raw/dd51783d9ea26228e210df7cce09768f99965886/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java?ref=dd51783d9ea26228e210df7cce09768f99965886",
      "patch": "@@ -491,7 +491,7 @@ public static class CommentsLevelConverter implements IStringConverter<CommentsL\n \t\t@Override\n \t\tpublic CommentsLevel convert(String value) {\n \t\t\ttry {\n-\t\t\t\treturn CommentsLevel.valueOf(value.toUpperCase());\n+\t\t\t\treturn CommentsLevel.valueOf(stringAsEnumName(value));\n \t\t\t} catch (Exception e) {\n \t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t'\\'' + value + \"' is unknown comments level, possible values are: \"\n@@ -504,7 +504,7 @@ public static class UseKotlinMethodsForVarNamesConverter implements IStringConve\n \t\t@Override\n \t\tpublic UseKotlinMethodsForVarNames convert(String value) {\n \t\t\ttry {\n-\t\t\t\treturn UseKotlinMethodsForVarNames.valueOf(value.replace('-', '_').toUpperCase());\n+\t\t\t\treturn UseKotlinMethodsForVarNames.valueOf(stringAsEnumName(value));\n \t\t\t} catch (Exception e) {\n \t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t'\\'' + value + \"' is unknown, possible values are: \"\n@@ -517,7 +517,7 @@ public static class DeobfuscationMapFileModeConverter implements IStringConverte\n \t\t@Override\n \t\tpublic DeobfuscationMapFileMode convert(String value) {\n \t\t\ttry {\n-\t\t\t\treturn DeobfuscationMapFileMode.valueOf(value.toUpperCase());\n+\t\t\t\treturn DeobfuscationMapFileMode.valueOf(stringAsEnumName(value));\n \t\t\t} catch (Exception e) {\n \t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t'\\'' + value + \"' is unknown, possible values are: \"\n@@ -530,7 +530,7 @@ public static class ResourceNameSourceConverter implements IStringConverter<Reso\n \t\t@Override\n \t\tpublic ResourceNameSource convert(String value) {\n \t\t\ttry {\n-\t\t\t\treturn ResourceNameSource.valueOf(value.toUpperCase());\n+\t\t\t\treturn ResourceNameSource.valueOf(stringAsEnumName(value));\n \t\t\t} catch (Exception e) {\n \t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t'\\'' + value + \"' is unknown, possible values are: \"\n@@ -543,7 +543,7 @@ public static class DecompilationModeConverter implements IStringConverter<Decom\n \t\t@Override\n \t\tpublic DecompilationMode convert(String value) {\n \t\t\ttry {\n-\t\t\t\treturn DecompilationMode.valueOf(value.toUpperCase());\n+\t\t\t\treturn DecompilationMode.valueOf(stringAsEnumName(value));\n \t\t\t} catch (Exception e) {\n \t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t'\\'' + value + \"' is unknown, possible values are: \"\n@@ -557,4 +557,9 @@ public static String enumValuesString(Enum<?>[] values) {\n \t\t\t\t.map(v -> v.name().replace('_', '-').toLowerCase(Locale.ROOT))\n \t\t\t\t.collect(Collectors.joining(\", \"));\n \t}\n+\n+\tprivate static String stringAsEnumName(String raw) {\n+        // inverse of enumValuesString conversion\n+\t\treturn value.replace('-', '_').toUpperCase();\n+\t}\n }",
      "parent_sha": "158fc2fca3aef3c5672b6f2c48540da56a857b1e"
    }
  },
  {
    "oid": "e4fbbcf2d667c8c0275d3d164b184da144a50c99",
    "message": "core: skip annotations parsing if error occurs (#57)",
    "date": "2015-03-25T19:30:22Z",
    "url": "https://github.com/skylot/jadx/commit/e4fbbcf2d667c8c0275d3d164b184da144a50c99",
    "details": {
      "sha": "e55606a695fc737c91195816411a675cdf2fe4bc",
      "filename": "jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/e4fbbcf2d667c8c0275d3d164b184da144a50c99/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java",
      "raw_url": "https://github.com/skylot/jadx/raw/e4fbbcf2d667c8c0275d3d164b184da144a50c99/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fnodes%2FClassNode.java?ref=e4fbbcf2d667c8c0275d3d164b184da144a50c99",
      "patch": "@@ -152,7 +152,7 @@ private void loadAnnotations(ClassDef cls) {\n \t\tif (offset != 0) {\n \t\t\ttry {\n \t\t\t\tnew AnnotationsParser(this).parse(offset);\n-\t\t\t} catch (DecodeException e) {\n+\t\t\t} catch (Exception e) {\n \t\t\t\tLOG.error(\"Error parsing annotations in {}\", this, e);\n \t\t\t}\n \t\t}",
      "parent_sha": "9afacf72f8e4325684c6478cd7c0af3b4d482b5e"
    }
  },
  {
    "oid": "804c8eff911e2236c530c7b792ecb61c95a568aa",
    "message": "fix(res): fixes deobfuscated resource text files saving (PR #1004)\n\nCo-authored-by: sergey-wowwow <bugi@MacBook-Pro.local>",
    "date": "2020-10-30T17:28:46Z",
    "url": "https://github.com/skylot/jadx/commit/804c8eff911e2236c530c7b792ecb61c95a568aa",
    "details": {
      "sha": "4e3d9248b8ccf7829e3f5b2dbc0110c2e8edbe1d",
      "filename": "jadx-core/src/main/java/jadx/api/ResourcesLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/804c8eff911e2236c530c7b792ecb61c95a568aa/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FResourcesLoader.java",
      "raw_url": "https://github.com/skylot/jadx/raw/804c8eff911e2236c530c7b792ecb61c95a568aa/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FResourcesLoader.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FResourcesLoader.java?ref=804c8eff911e2236c530c7b792ecb61c95a568aa",
      "patch": "@@ -96,7 +96,7 @@ private static ResContainer loadContent(JadxDecompiler jadxRef, ResourceFile rf,\n \t\t\tcase MANIFEST:\n \t\t\tcase XML:\n \t\t\t\tICodeInfo content = jadxRef.getXmlParser().parse(inputStream);\n-\t\t\t\treturn ResContainer.textResource(rf.getOriginalName(), content);\n+\t\t\t\treturn ResContainer.textResource(rf.getDeobfName(), content);\n \n \t\t\tcase ARSC:\n \t\t\t\treturn new ResTableParser(jadxRef.getRoot()).decodeFiles(inputStream);",
      "parent_sha": "aec8ebe23760ec0181e652e48af6217bfee1cf5f"
    }
  },
  {
    "oid": "dc73fc92beb580b0e07a7cc75c440261619f5298",
    "message": "fix(gui): don't use hardcoded color for link component (#1398)",
    "date": "2022-02-28T18:39:51Z",
    "url": "https://github.com/skylot/jadx/commit/dc73fc92beb580b0e07a7cc75c440261619f5298",
    "details": {
      "sha": "a2c3dc5dcff0dea8ecc56e8ab983dac323eb67ea",
      "filename": "jadx-gui/src/main/java/jadx/gui/utils/Link.java",
      "status": "modified",
      "additions": 13,
      "deletions": 34,
      "changes": 47,
      "blob_url": "https://github.com/skylot/jadx/blob/dc73fc92beb580b0e07a7cc75c440261619f5298/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FLink.java",
      "raw_url": "https://github.com/skylot/jadx/raw/dc73fc92beb580b0e07a7cc75c440261619f5298/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FLink.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FLink.java?ref=dc73fc92beb580b0e07a7cc75c440261619f5298",
      "patch": "@@ -1,10 +1,9 @@\n package jadx.gui.utils;\n \n-import java.awt.Color;\n import java.awt.Cursor;\n import java.awt.Desktop;\n+import java.awt.event.MouseAdapter;\n import java.awt.event.MouseEvent;\n-import java.awt.event.MouseListener;\n import java.util.Map;\n \n import javax.swing.JLabel;\n@@ -16,7 +15,7 @@\n \n import static java.awt.Desktop.Action;\n \n-public class Link extends JLabel implements MouseListener {\n+public class Link extends JLabel {\n \tprivate static final long serialVersionUID = 3655322136444908178L;\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(Link.class);\n@@ -26,34 +25,15 @@ public class Link extends JLabel implements MouseListener {\n \tpublic Link(String text, String url) {\n \t\tsuper(text);\n \t\tthis.url = url;\n-\t\tthis.setToolTipText(\"Open \" + url + \" in your browser\");\n-\t\tthis.addMouseListener(this);\n-\t\tthis.setForeground(Color.BLUE);\n-\t}\n-\n-\t@Override\n-\tpublic void mouseClicked(MouseEvent arg0) {\n-\t\tbrowse();\n-\t}\n-\n-\t@Override\n-\tpublic void mouseEntered(MouseEvent arg0) {\n-\t\tsetCursor(new Cursor(Cursor.HAND_CURSOR));\n-\t}\n-\n-\t@Override\n-\tpublic void mouseExited(MouseEvent arg0) {\n-\t\tsetCursor(new Cursor(Cursor.DEFAULT_CURSOR));\n-\t}\n-\n-\t@Override\n-\tpublic void mousePressed(MouseEvent arg0) {\n-\t\t// ignore\n-\t}\n-\n-\t@Override\n-\tpublic void mouseReleased(MouseEvent arg0) {\n-\t\t// ignore\n+\t\tsetText(text);\n+\t\tsetToolTipText(\"Open \" + url + \" in your browser\");\n+\t\tsetCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n+\t\tthis.addMouseListener(new MouseAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void mouseClicked(MouseEvent e) {\n+\t\t\t\tbrowse();\n+\t\t\t}\n+\t\t});\n \t}\n \n \tprivate void browse() {\n@@ -69,14 +49,13 @@ private void browse() {\n \t\t\t}\n \t\t}\n \t\ttry {\n-\t\t\tString os = System.getProperty(\"os.name\").toLowerCase();\n-\t\t\tif (os.contains(\"win\")) {\n+\t\t\tif (SystemInfo.IS_WINDOWS) {\n \t\t\t\tnew ProcessBuilder()\n \t\t\t\t\t\t.command(new String[] { \"rundll32\", \"url.dll,FileProtocolHandler\", url })\n \t\t\t\t\t\t.start();\n \t\t\t\treturn;\n \t\t\t}\n-\t\t\tif (os.contains(\"mac\")) {\n+\t\t\tif (SystemInfo.IS_MAC) {\n \t\t\t\tnew ProcessBuilder()\n \t\t\t\t\t\t.command(new String[] { \"open\", url })\n \t\t\t\t\t\t.start();",
      "parent_sha": "592215db66a8591878e27d01eda438537dc11cec"
    }
  },
  {
    "oid": "f91c5d3647473ef7eaf2a40bf67887e0c31db595",
    "message": "res: skip padding on file end (#225)",
    "date": "2018-03-11T16:19:06Z",
    "url": "https://github.com/skylot/jadx/commit/f91c5d3647473ef7eaf2a40bf67887e0c31db595",
    "details": {
      "sha": "cd430155a41b407d3d15d595578c547d193dc82a",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/skylot/jadx/blob/f91c5d3647473ef7eaf2a40bf67887e0c31db595/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/f91c5d3647473ef7eaf2a40bf67887e0c31db595/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FBinaryXMLParser.java?ref=f91c5d3647473ef7eaf2a40bf67887e0c31db595",
      "patch": "@@ -48,6 +48,7 @@ public class BinaryXMLParser extends CommonBinaryParser {\n \tprivate ValuesParser valuesParser;\n \tprivate boolean isLastEnd = true;\n \tprivate boolean isOneLine = true;\n+\tprivate int namespaceDepth = 0;\n \tprivate int[] resourceIds;\n \n \tpublic BinaryXMLParser(RootNode root) {\n@@ -136,6 +137,10 @@ void decode() throws IOException {\n \t\t\t\t\tbreak;\n \n \t\t\t\tdefault:\n+\t\t\t\t\tif (namespaceDepth == 0) {\n+\t\t\t\t\t\t// skip padding on file end\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n \t\t\t\t\tdie(\"Type: 0x\" + Integer.toHexString(type) + \" not yet implemented\");\n \t\t\t\t\tbreak;\n \t\t\t}\n@@ -166,6 +171,7 @@ private void parseNameSpace() throws IOException {\n \t\tint beginPrefix = is.readInt32();\n \t\tint beginURI = is.readInt32();\n \t\tnsMap.computeIfAbsent(getString(beginURI), k -> getString(beginPrefix));\n+\t\tnamespaceDepth++;\n \t}\n \n \tprivate void parseNameSpaceEnd() throws IOException {\n@@ -179,6 +185,7 @@ private void parseNameSpaceEnd() throws IOException {\n \t\tint comment = is.readInt32();\n \t\tint endPrefix = is.readInt32();\n \t\tint endURI = is.readInt32();\n+\t\tnamespaceDepth--;\n \t\tnsMap.computeIfAbsent(getString(endURI), k -> getString(endPrefix));\n \t}\n \n@@ -381,16 +388,17 @@ private void parseElementEnd() throws IOException {\n \t\tint endLineNumber = is.readInt32();\n \t\tint comment = is.readInt32();\n \t\tint elementNS = is.readInt32();\n-\t\tint elementName = is.readInt32();\n-\t\tif (currentTag.equals(getString(elementName)) && isOneLine && !isLastEnd) {\n+\t\tint elementNameId = is.readInt32();\n+\t\tString elemName = getString(elementNameId);\n+\t\tif (currentTag.equals(elemName) && isOneLine && !isLastEnd) {\n \t\t\twriter.add(\"/>\");\n \t\t} else {\n \t\t\twriter.startLine(\"</\");\n \t\t\twriter.attachSourceLine(endLineNumber);\n //\t\t\tif (elementNS != -1) {\n //\t\t\t\twriter.add(getString(elementNS)).add(':');\n //\t\t\t}\n-\t\t\twriter.add(getString(elementName)).add(\">\");\n+\t\t\twriter.add(elemName).add(\">\");\n \t\t}\n \t\tisLastEnd = true;\n \t\tif (writer.getIndent() != 0) {",
      "parent_sha": "1f3aebf584687c162cabf572e5f78d0bd5be5032"
    }
  },
  {
    "oid": "37a42d14183092d7b75157f6171121669f00f744",
    "message": "fix(gui): show correct content of binary resources in hex view (#2160) (PR #2166)",
    "date": "2024-04-24T18:29:52Z",
    "url": "https://github.com/skylot/jadx/commit/37a42d14183092d7b75157f6171121669f00f744",
    "details": {
      "sha": "4478c275ae66063ffe90619d44e50d2d9ccc79a4",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/codearea/HexArea.java",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/skylot/jadx/blob/37a42d14183092d7b75157f6171121669f00f744/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FHexArea.java",
      "raw_url": "https://github.com/skylot/jadx/raw/37a42d14183092d7b75157f6171121669f00f744/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FHexArea.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FHexArea.java?ref=37a42d14183092d7b75157f6171121669f00f744",
      "patch": "@@ -15,7 +15,10 @@\n import org.slf4j.LoggerFactory;\n \n import jadx.api.ICodeInfo;\n+import jadx.api.ResourcesLoader;\n+import jadx.core.utils.exceptions.JadxException;\n import jadx.gui.treemodel.JNode;\n+import jadx.gui.treemodel.JResource;\n import jadx.gui.ui.panel.ContentPanel;\n import jadx.gui.utils.UiUtils;\n \n@@ -48,7 +51,18 @@ public HexArea(ContentPanel contentPanel, JNode node) {\n \n \t@Override\n \tpublic void load() {\n-\t\tbyte[] bytes = binaryNode.getCodeInfo().getCodeStr().getBytes(StandardCharsets.UTF_8);\n+\t\tbyte[] bytes = null;\n+\t\tif (binaryNode instanceof JResource) {\n+\t\t\tJResource jResource = ((JResource) binaryNode);\n+\t\t\ttry {\n+\t\t\t\tbytes = ResourcesLoader.decodeStream(jResource.getResFile(), (size, is) -> is.readAllBytes());\n+\t\t\t} catch (JadxException e) {\n+\t\t\t\tLOG.error(\"Failed to directly load resource binary data {}: {}\", jResource.getName(), e.getMessage());\n+\t\t\t}\n+\t\t}\n+\t\tif (bytes == null) {\n+\t\t\tbytes = binaryNode.getCodeInfo().getCodeStr().getBytes(StandardCharsets.UTF_8);\n+\t\t}\n \t\tsetBytes(bytes);\n \t\tif (getBytes().length > 0) {\n \t\t\t// We set the caret after the first byte to prevent it from being highlighted",
      "parent_sha": "07dde05337d08ebb94aa6e97dbd08ac4ed140990"
    }
  },
  {
    "oid": "c338652045990b32829ee0ab66b74ecd4a2dbb25",
    "message": "no limit to the package id",
    "date": "2016-10-31T03:24:33Z",
    "url": "https://github.com/skylot/jadx/commit/c338652045990b32829ee0ab66b74ecd4a2dbb25",
    "details": {
      "sha": "1e995ab1c4b9c3128910e12164de4c022f4f74dd",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/skylot/jadx/blob/c338652045990b32829ee0ab66b74ecd4a2dbb25/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/c338652045990b32829ee0ab66b74ecd4a2dbb25/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java?ref=c338652045990b32829ee0ab66b74ecd4a2dbb25",
      "patch": "@@ -136,9 +136,9 @@ private PackageChunk parsePackage() throws IOException {\n \t\t}\n \n \t\tPackageChunk pkg = new PackageChunk(id, name, typeStrings, keyStrings);\n-\t\tif (id == 0x7F) {\n+\t\t//if (id == 0x7F) {\n \t\t\tresStorage.setAppPackage(name);\n-\t\t}\n+\t\t//}\n \n \t\twhile (is.getPos() < endPos) {\n \t\t\tlong chunkStart = is.getPos();",
      "parent_sha": "1f5cdeb01bd8d7f382815a21fafb0c2d5d0be1bf"
    }
  },
  {
    "oid": "28e334a0ba95a1c66bef3d106c184f3b1b9318ae",
    "message": "gui: fix code cell renderer in find/usage dialogs",
    "date": "2015-09-19T17:10:43Z",
    "url": "https://github.com/skylot/jadx/commit/28e334a0ba95a1c66bef3d106c184f3b1b9318ae",
    "details": {
      "sha": "b02bd30505ee003a0902bd6b5f0d05e8a8761d59",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/CommonSearchDialog.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/skylot/jadx/blob/28e334a0ba95a1c66bef3d106c184f3b1b9318ae/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FCommonSearchDialog.java",
      "raw_url": "https://github.com/skylot/jadx/raw/28e334a0ba95a1c66bef3d106c184f3b1b9318ae/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FCommonSearchDialog.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FCommonSearchDialog.java?ref=28e334a0ba95a1c66bef3d106c184f3b1b9318ae",
      "patch": "@@ -42,6 +42,7 @@\n import java.awt.event.MouseAdapter;\n import java.awt.event.MouseEvent;\n import java.util.ArrayList;\n+import java.util.Enumeration;\n import java.util.List;\n \n import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;\n@@ -155,14 +156,20 @@ protected JPanel initResultsTable() {\n \t\tresultsModel = new ResultsModel();\n \t\tresultsTable = new ResultsTable(resultsModel);\n \t\tresultsTable.setShowHorizontalLines(false);\n-//\t\tresultsTable.setAutoCreateColumnsFromModel(true);\n \t\tresultsTable.setDragEnabled(false);\n \t\tresultsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n \t\tresultsTable.setBackground(ContentArea.BACKGROUND);\n \t\tresultsTable.setColumnSelectionAllowed(false);\n \t\tresultsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n \t\tresultsTable.setAutoscrolls(false);\n-\t\tresultsTable.setDefaultRenderer(Object.class, new ResultsTableCellRenderer());\n+\n+\t\tResultsTableCellRenderer renderer = new ResultsTableCellRenderer();\n+\t\tEnumeration<TableColumn> columns = resultsTable.getColumnModel().getColumns();\n+\t\twhile (columns.hasMoreElements()) {\n+\t\t\tTableColumn column = columns.nextElement();\n+\t\t\tcolumn.setCellRenderer(renderer);\n+\t\t}\n+\n \t\tresultsTable.addMouseListener(new MouseAdapter() {\n \t\t\tpublic void mouseClicked(MouseEvent evt) {\n \t\t\t\tif (evt.getClickCount() == 2) {",
      "parent_sha": "d060f5b877910a968ce2d677f8528d57a01d3692"
    }
  },
  {
    "oid": "454519220f27ff37ef78b149e9c46546e9b291ac",
    "message": "ui: don't run full decompilation on start",
    "date": "2018-01-02T12:24:20Z",
    "url": "https://github.com/skylot/jadx/commit/454519220f27ff37ef78b149e9c46546e9b291ac",
    "details": {
      "sha": "2dc4b47cacc55178d7576354029d6c197c873b8d",
      "filename": "jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/454519220f27ff37ef78b149e9c46546e9b291ac/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettings.java",
      "raw_url": "https://github.com/skylot/jadx/raw/454519220f27ff37ef78b149e9c46546e9b291ac/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettings.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettings.java?ref=454519220f27ff37ef78b149e9c46546e9b291ac",
      "patch": "@@ -31,7 +31,7 @@ public class JadxSettings extends JadxCLIArgs {\n \tprivate boolean checkForUpdates = false;\n \tprivate List<String> recentFiles = new ArrayList<String>();\n \tprivate String fontStr = \"\";\n-\tprivate boolean autoStartJobs = true;\n+\tprivate boolean autoStartJobs = false;\n \n \tprivate Map<String, WindowLocation> windowPos = new HashMap<String, WindowLocation>();\n ",
      "parent_sha": "118fa98ca9ccd58c1d1ce391b51cf1a95ad68501"
    }
  },
  {
    "oid": "f0e6c8ea8e13d80929e9b20c4932164dac0ccfbb",
    "message": "fix(res): put deobfuscated files to res/ folder (PR #995)",
    "date": "2020-10-25T20:28:06Z",
    "url": "https://github.com/skylot/jadx/commit/f0e6c8ea8e13d80929e9b20c4932164dac0ccfbb",
    "details": {
      "sha": "8cc04fa400ed0b4520c8eaf489a4ee4a7916be84",
      "filename": "jadx-core/src/main/java/jadx/api/ResourceFile.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/f0e6c8ea8e13d80929e9b20c4932164dac0ccfbb/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FResourceFile.java",
      "raw_url": "https://github.com/skylot/jadx/raw/f0e6c8ea8e13d80929e9b20c4932164dac0ccfbb/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FResourceFile.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fapi%2FResourceFile.java?ref=f0e6c8ea8e13d80929e9b20c4932164dac0ccfbb",
      "patch": "@@ -72,7 +72,7 @@ void setZipRef(ZipRef zipRef) {\n \n \tpublic void setAlias(ResourceEntry ri) {\n \t\tint index = name.lastIndexOf('.');\n-\t\tdeobfName = String.format(\"%s%s/%s%s\",\n+\t\tdeobfName = String.format(\"res/%s%s/%s%s\",\n \t\t\t\tri.getTypeName(),\n \t\t\t\tri.getConfig(),\n \t\t\t\tri.getKeyName(),",
      "parent_sha": "c94c204da21ec237d26a69f9b6265ec4a6a78bba"
    }
  },
  {
    "oid": "0efca29e9584e95a67a369d1e85fcc717e58c740",
    "message": "fix: configured resource indexing size limit is now correctly considered (PR #1278)",
    "date": "2021-11-18T15:58:20Z",
    "url": "https://github.com/skylot/jadx/commit/0efca29e9584e95a67a369d1e85fcc717e58c740",
    "details": {
      "sha": "fe3493852aa3c971737e7256ebba81ace996da0a",
      "filename": "jadx-gui/src/main/java/jadx/gui/utils/search/ResourceIndex.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/skylot/jadx/blob/0efca29e9584e95a67a369d1e85fcc717e58c740/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2Fsearch%2FResourceIndex.java",
      "raw_url": "https://github.com/skylot/jadx/raw/0efca29e9584e95a67a369d1e85fcc717e58c740/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2Fsearch%2FResourceIndex.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2Fsearch%2FResourceIndex.java?ref=0efca29e9584e95a67a369d1e85fcc717e58c740",
      "patch": "@@ -202,12 +202,14 @@ private void filter(JResource resNode, ZipFile zip) {\n \t\t\t\t} else {\n \t\t\t\t\tresNodes.add(resNode);\n \t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tLOG.debug(\"Resource skipped because of size limit: {} res size {} bytes\", resNode, size);\n \t\t\t}\n \t\t}\n \t}\n \n \tprivate void refreshSettings() {\n-\t\tint size = cache.getJadxSettings().getSrhResourceSkipSize() * 10240;\n+\t\tint size = cache.getJadxSettings().getSrhResourceSkipSize() * 1048576;\n \t\tif (size != sizeLimit\n \t\t\t\t|| !cache.getJadxSettings().getSrhResourceFileExt().equals(fileExts)) {\n \t\t\tclear();\n@@ -224,14 +226,10 @@ private void refreshSettings() {\n \t\t\t\t\textSet.add(ext);\n \t\t\t\t}\n \t\t\t}\n-\t\t\ttry {\n-\t\t\t\tZipFile zipFile = getZipFile(cache.getJRoot());\n+\t\t\ttry (ZipFile zipFile = getZipFile(cache.getJRoot())) {\n \t\t\t\ttraverseTree(cache.getJRoot(), zipFile); // reindex\n-\t\t\t\tif (zipFile != null) {\n-\t\t\t\t\tzipFile.close();\n-\t\t\t\t}\n \t\t\t} catch (Exception e) {\n-\t\t\t\te.printStackTrace();\n+\t\t\t\tLOG.error(\"Failed to apply settings to resource index\", e);\n \t\t\t}\n \t\t}\n \t}",
      "parent_sha": "0ab933efffbb9b45bcca0432f08061cfcd7b8157"
    }
  },
  {
    "oid": "533883b5aa3692e2b53ba5bc00a3dd29a200568b",
    "message": "Fix arguments types in array-put instruction",
    "date": "2013-04-28T15:10:09Z",
    "url": "https://github.com/skylot/jadx/commit/533883b5aa3692e2b53ba5bc00a3dd29a200568b",
    "details": {
      "sha": "efaa0c6b6b2a0a8e69615abc6a699d51ada2c66e",
      "filename": "src/main/java/jadx/dex/visitors/typeresolver/finish/PostTypeResolver.java",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/skylot/jadx/blob/533883b5aa3692e2b53ba5bc00a3dd29a200568b/src%2Fmain%2Fjava%2Fjadx%2Fdex%2Fvisitors%2Ftyperesolver%2Ffinish%2FPostTypeResolver.java",
      "raw_url": "https://github.com/skylot/jadx/raw/533883b5aa3692e2b53ba5bc00a3dd29a200568b/src%2Fmain%2Fjava%2Fjadx%2Fdex%2Fvisitors%2Ftyperesolver%2Ffinish%2FPostTypeResolver.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/src%2Fmain%2Fjava%2Fjadx%2Fdex%2Fvisitors%2Ftyperesolver%2Ffinish%2FPostTypeResolver.java?ref=533883b5aa3692e2b53ba5bc00a3dd29a200568b",
      "patch": "@@ -40,16 +40,11 @@ public static boolean visit(InsnNode insn) {\n \t\t\t\treturn change;\n \t\t\t}\n \n-\t\t\tcase AGET: {\n-\t\t\t\tboolean change = false;\n-\t\t\t\tRegisterArg elem = insn.getResult();\n-\t\t\t\tInsnArg array = insn.getArg(0);\n-\t\t\t\tif (!elem.getType().isTypeKnown() && elem.merge(array.getType().getArrayElement()))\n-\t\t\t\t\tchange = true;\n-\t\t\t\tif (!array.getType().isTypeKnown() && array.merge(ArgType.array(elem.getType())))\n-\t\t\t\t\tchange = true;\n-\t\t\t\treturn change;\n-\t\t\t}\n+\t\t\tcase AGET:\n+\t\t\t\treturn fixArrayTypes(insn.getArg(0), insn.getResult());\n+\n+\t\t\tcase APUT:\n+\t\t\t\treturn fixArrayTypes(insn.getArg(0), insn.getArg(2));\n \n \t\t\tcase IF: {\n \t\t\t\tboolean change = false;\n@@ -69,4 +64,13 @@ public static boolean visit(InsnNode insn) {\n \t\treturn false;\n \n \t}\n+\n+\tprivate static boolean fixArrayTypes(InsnArg array, InsnArg elem) {\n+\t\tboolean change = false;\n+\t\tif (!elem.getType().isTypeKnown() && elem.merge(array.getType().getArrayElement()))\n+\t\t\tchange = true;\n+\t\tif (!array.getType().isTypeKnown() && array.merge(ArgType.array(elem.getType())))\n+\t\t\tchange = true;\n+\t\treturn change;\n+\t}\n }",
      "parent_sha": "2e40ca17dc90afb715dda06fd058ab0c216a18c5"
    }
  },
  {
    "oid": "cbd36aeb8f9d87668737a4c7b8a8292177b08dbb",
    "message": "core: fix unused variables declaration",
    "date": "2014-07-29T18:34:18Z",
    "url": "https://github.com/skylot/jadx/commit/cbd36aeb8f9d87668737a4c7b8a8292177b08dbb",
    "details": {
      "sha": "e6e030ea61d6676b3a51473b6c726358c3037756",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessVariables.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/skylot/jadx/blob/cbd36aeb8f9d87668737a4c7b8a8292177b08dbb/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FProcessVariables.java",
      "raw_url": "https://github.com/skylot/jadx/raw/cbd36aeb8f9d87668737a4c7b8a8292177b08dbb/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FProcessVariables.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FProcessVariables.java?ref=cbd36aeb8f9d87668737a4c7b8a8292177b08dbb",
      "patch": "@@ -200,10 +200,15 @@ && canDeclareInRegion(u, assignRegion, regionsOrder)) {\n \t\t\t\t\tit.remove();\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (set.isEmpty()) {\n+\t\t\tIRegion region = null;\n+\t\t\tif (!set.isEmpty()) {\n+\t\t\t\tregion = set.iterator().next();\n+\t\t\t} else if (!u.getAssigns().isEmpty()) {\n+\t\t\t\tregion = u.getAssigns().iterator().next();\n+\t\t\t}\n+\t\t\tif (region == null) {\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tIRegion region = set.iterator().next();\n \t\t\tIRegion parent = region;\n \t\t\tboolean declare = false;\n \t\t\twhile (parent != null) {\n@@ -215,7 +220,6 @@ && canDeclareInRegion(u, assignRegion, regionsOrder)) {\n \t\t\t\tregion = parent;\n \t\t\t\tparent = region.getParent();\n \t\t\t}\n-\n \t\t\tif (!declare) {\n \t\t\t\tdeclareVar(mth.getRegion(), u.getArg());\n \t\t\t}",
      "parent_sha": "2963bb3f41b6e32e2cc069f303b5d23c0b15043e"
    }
  },
  {
    "oid": "6d4caca6cc46019ce66469171b918aa16f62b59e",
    "message": "core: ClassModifier: Don't skip methods with SKIP_FIRST_ARG attr\n\nSkipping those methods on class refresh leads to \"M.this = r1;\" like\nassigments appears in the inner class constructors.\n\nUnsure is this saint or not.",
    "date": "2020-01-03T03:09:20Z",
    "url": "https://github.com/skylot/jadx/commit/6d4caca6cc46019ce66469171b918aa16f62b59e",
    "details": {
      "sha": "5518f4e82b3a2bc3dfb7cb103ef23e43eb2ae765",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/6d4caca6cc46019ce66469171b918aa16f62b59e/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FClassModifier.java",
      "raw_url": "https://github.com/skylot/jadx/raw/6d4caca6cc46019ce66469171b918aa16f62b59e/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FClassModifier.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FClassModifier.java?ref=6d4caca6cc46019ce66469171b918aa16f62b59e",
      "patch": "@@ -105,7 +105,7 @@ private static boolean removeFieldUsageFromConstructor(MethodNode mth, FieldNode\n \t\t\treturn false;\n \t\t}\n \t\tList<RegisterArg> args = mth.getArgRegs();\n-\t\tif (args.isEmpty() || mth.contains(AFlag.SKIP_FIRST_ARG)) {\n+\t\tif (args.isEmpty()) {\n \t\t\treturn false;\n \t\t}\n \t\tRegisterArg arg = args.get(0);",
      "parent_sha": "15953f832f8863cdd141e04f81c872448be9701b"
    }
  },
  {
    "oid": "b54b2d47e9a70762b34293d47dd8d99a2e9e895f",
    "message": "fix(res): use lowercase for resource filename and only use underscore for compatibility with newer android studio (#1043, PR #1057)",
    "date": "2020-12-20T16:14:09Z",
    "url": "https://github.com/skylot/jadx/commit/b54b2d47e9a70762b34293d47dd8d99a2e9e895f",
    "details": {
      "sha": "e34089ec6f0b08b74b13c410da983f8fb9bfa7dc",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/skylot/jadx/blob/b54b2d47e9a70762b34293d47dd8d99a2e9e895f/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/b54b2d47e9a70762b34293d47dd8d99a2e9e895f/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java?ref=b54b2d47e9a70762b34293d47dd8d99a2e9e895f",
      "patch": "@@ -7,6 +7,7 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n import org.slf4j.Logger;\n@@ -27,7 +28,7 @@\n public class ResTableParser extends CommonBinaryParser {\n \tprivate static final Logger LOG = LoggerFactory.getLogger(ResTableParser.class);\n \n-\tprivate static final Pattern VALID_RES_KEY_PATTERN = Pattern.compile(\"\\\\$+[\\\\w\\\\d-_.]+\");\n+\tprivate static final Pattern VALID_RES_KEY_PATTERN = Pattern.compile(\"[\\\\w\\\\d_]+\");\n \n \tprivate static final class PackageChunk {\n \t\tprivate final int id;\n@@ -315,7 +316,24 @@ private String getResName(int resRef, String origKeyName) {\n \t\t\tconstField.add(AFlag.DONT_RENAME);\n \t\t\treturn constField.getName();\n \t\t}\n-\t\treturn \"RES_\" + resRef; // autogenerate key name\n+\t\t// Making sure origKeyName compliant with resource file name rules\n+\t\tMatcher m = VALID_RES_KEY_PATTERN.matcher(origKeyName);\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tboolean first = true;\n+\t\twhile (m.find()) {\n+\t\t\tif (!first) {\n+\t\t\t\tsb.append(\"_\");\n+\t\t\t}\n+\t\t\tsb.append(m.group());\n+\t\t\tfirst = false;\n+\t\t}\n+\t\t// autogenerate key name, appended with cleaned origKeyName to be human-friendly\n+\t\tString newResName = \"res_\" + resRef;\n+\t\tString cleanedResName = sb.toString();\n+\t\tif (!cleanedResName.isEmpty()) {\n+\t\t\tnewResName += \"_\" + cleanedResName.toLowerCase();\n+\t\t}\n+\t\treturn newResName;\n \t}\n \n \tprivate RawNamedValue parseValueMap() throws IOException {",
      "parent_sha": "64fb587d0f26da26a96ee0ea5ec9f79cebe62878"
    }
  },
  {
    "oid": "9be62fb16ec1c32aacb069aaec91bf59aecf76b0",
    "message": "fix: lower regions count limit (#354)",
    "date": "2018-09-08T14:45:04Z",
    "url": "https://github.com/skylot/jadx/commit/9be62fb16ec1c32aacb069aaec91bf59aecf76b0",
    "details": {
      "sha": "80860bf5a72116cf7ae64411bc8785424d28c0d8",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/skylot/jadx/blob/9be62fb16ec1c32aacb069aaec91bf59aecf76b0/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FRegionMaker.java",
      "raw_url": "https://github.com/skylot/jadx/raw/9be62fb16ec1c32aacb069aaec91bf59aecf76b0/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FRegionMaker.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FRegionMaker.java?ref=9be62fb16ec1c32aacb069aaec91bf59aecf76b0",
      "patch": "@@ -55,16 +55,16 @@\n public class RegionMaker {\n \tprivate static final Logger LOG = LoggerFactory.getLogger(RegionMaker.class);\n \n-\t// 'dumb' guard to prevent endless loop in regions processing\n-\tprivate static final int REGIONS_LIMIT = 1000 * 1000;\n-\n \tprivate final MethodNode mth;\n+\tprivate final int regionsLimit;\n \tprivate int regionsCount;\n \tprivate BitSet processedBlocks;\n \n \tpublic RegionMaker(MethodNode mth) {\n \t\tthis.mth = mth;\n-\t\tthis.processedBlocks = new BitSet(mth.getBasicBlocks().size());\n+\t\tint blocksCount = mth.getBasicBlocks().size();\n+\t\tthis.processedBlocks = new BitSet(blocksCount);\n+\t\tthis.regionsLimit = blocksCount * 100;\n \t}\n \n \tpublic Region makeRegion(BlockNode startBlock, RegionStack stack) {\n@@ -84,7 +84,7 @@ public Region makeRegion(BlockNode startBlock, RegionStack stack) {\n \t\twhile (next != null) {\n \t\t\tnext = traverse(r, next, stack);\n \t\t\tregionsCount++;\n-\t\t\tif (regionsCount > REGIONS_LIMIT) {\n+\t\t\tif (regionsCount > regionsLimit) {\n \t\t\t\tthrow new JadxRuntimeException(\"Regions count limit reached\");\n \t\t\t}\n \t\t}",
      "parent_sha": "f6f883b9d121250d18572734c8831c76e284a161"
    }
  },
  {
    "oid": "5e81bd833bd9864aff7aae7671a96e8c67ccdccf",
    "message": "Decode attributes which may contain either enums or values, e.g. layout_width\n\nandroid:layout_width=\"UNKNOWN_DATA_0x6401\" becomes android:layout_width=\"100dp\".",
    "date": "2018-01-16T11:56:21Z",
    "url": "https://github.com/skylot/jadx/commit/5e81bd833bd9864aff7aae7671a96e8c67ccdccf",
    "details": {
      "sha": "3e70d1cf66c517f5f40c673e767fcf5d0685d2b2",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ManifestAttributes.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/skylot/jadx/blob/5e81bd833bd9864aff7aae7671a96e8c67ccdccf/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FManifestAttributes.java",
      "raw_url": "https://github.com/skylot/jadx/raw/5e81bd833bd9864aff7aae7671a96e8c67ccdccf/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FManifestAttributes.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FManifestAttributes.java?ref=5e81bd833bd9864aff7aae7671a96e8c67ccdccf",
      "patch": "@@ -168,10 +168,7 @@ public String decode(String attrName, long value) {\n \t\t\treturn null;\n \t\t}\n \t\tif (attr.getType() == MAttrType.ENUM) {\n-\t\t\tString name = attr.getValues().get(value);\n-\t\t\tif (name != null) {\n-\t\t\t\treturn name;\n-\t\t\t}\n+\t\t\treturn attr.getValues().get(value);\n \t\t} else if (attr.getType() == MAttrType.FLAG) {\n \t\t\tStringBuilder sb = new StringBuilder();\n \t\t\tfor (Map.Entry<Long, String> entry : attr.getValues().entrySet()) {",
      "parent_sha": "b921f6097d266cf08f3f72c48fc78edcfd76cc2b"
    }
  },
  {
    "oid": "1336c47d18d2c5f2e176e8c12c650d49afbb6205",
    "message": "fix: speed up switch processing by skip not relevant exits (#846)",
    "date": "2020-02-16T15:50:02Z",
    "url": "https://github.com/skylot/jadx/commit/1336c47d18d2c5f2e176e8c12c650d49afbb6205",
    "details": {
      "sha": "832b8123a4f952becbe2218adcf451fe8b1fef4a",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/skylot/jadx/blob/1336c47d18d2c5f2e176e8c12c650d49afbb6205/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FRegionMaker.java",
      "raw_url": "https://github.com/skylot/jadx/raw/1336c47d18d2c5f2e176e8c12c650d49afbb6205/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FRegionMaker.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FRegionMaker.java?ref=1336c47d18d2c5f2e176e8c12c650d49afbb6205",
      "patch": "@@ -865,10 +865,12 @@ private static BlockNode calcPostDomOut(MethodNode mth, BlockNode block, List<Bl\n \t\t\t// slow search: calculate partial post-dominance for every exit node\n \t\t\tBitSet ipdoms = BlockUtils.newBlocksBitSet(mth);\n \t\t\tfor (BlockNode exitBlock : exits) {\n-\t\t\t\tSet<BlockNode> pathBlocks = BlockUtils.getAllPathsBlocks(block, exitBlock);\n-\t\t\t\tBlockNode ipdom = BlockUtils.calcPartialImmediatePostDominator(mth, block, pathBlocks, exitBlock);\n-\t\t\t\tif (ipdom != null) {\n-\t\t\t\t\tipdoms.set(ipdom.getId());\n+\t\t\t\tif (BlockUtils.isAnyPathExists(block, exitBlock)) {\n+\t\t\t\t\tSet<BlockNode> pathBlocks = BlockUtils.getAllPathsBlocks(block, exitBlock);\n+\t\t\t\t\tBlockNode ipdom = BlockUtils.calcPartialImmediatePostDominator(mth, block, pathBlocks, exitBlock);\n+\t\t\t\t\tif (ipdom != null) {\n+\t\t\t\t\t\tipdoms.set(ipdom.getId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\touts.and(ipdoms);",
      "parent_sha": "519a74e8d27ae8e738a9f5b7fb940f91a91d3f9f"
    }
  },
  {
    "oid": "9aacb4f312b80009e56606a1a74b6e677645922c",
    "message": "fix: config dir was used instead cache dir",
    "date": "2024-06-11T19:55:49Z",
    "url": "https://github.com/skylot/jadx/commit/9aacb4f312b80009e56606a1a74b6e677645922c",
    "details": {
      "sha": "f58e8d5356d50c46e0545383c85cff7d20abd696",
      "filename": "jadx-commons/jadx-app-commons/src/main/java/jadx/commons/app/JadxCommonFiles.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/skylot/jadx/blob/9aacb4f312b80009e56606a1a74b6e677645922c/jadx-commons%2Fjadx-app-commons%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcommons%2Fapp%2FJadxCommonFiles.java",
      "raw_url": "https://github.com/skylot/jadx/raw/9aacb4f312b80009e56606a1a74b6e677645922c/jadx-commons%2Fjadx-app-commons%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcommons%2Fapp%2FJadxCommonFiles.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-commons%2Fjadx-app-commons%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcommons%2Fapp%2FJadxCommonFiles.java?ref=9aacb4f312b80009e56606a1a74b6e677645922c",
      "patch": "@@ -3,6 +3,7 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.function.Function;\n \n import org.jetbrains.annotations.Nullable;\n \n@@ -35,20 +36,20 @@ private static final class DirsLoader {\n \n \t\tpublic void init() {\n \t\t\ttry {\n-\t\t\t\tconfigDir = loadEnvDir(\"JADX_CONFIG_DIR\");\n-\t\t\t\tcacheDir = loadEnvDir(\"JADX_CACHE_DIR\");\n+\t\t\t\tconfigDir = loadEnvDir(\"JADX_CONFIG_DIR\", pd -> pd.configDir);\n+\t\t\t\tcacheDir = loadEnvDir(\"JADX_CACHE_DIR\", pd -> pd.cacheDir);\n \t\t\t} catch (Exception e) {\n \t\t\t\tthrow new RuntimeException(\"Failed to init common directories\", e);\n \t\t\t}\n \t\t}\n \n-\t\tprivate Path loadEnvDir(String envVar) throws IOException {\n+\t\tprivate Path loadEnvDir(String envVar, Function<ProjectDirectories, String> dirFunc) throws IOException {\n \t\t\tString envDir = JadxCommonEnv.get(envVar, null);\n \t\t\tString dirStr;\n \t\t\tif (envDir != null) {\n \t\t\t\tdirStr = envDir;\n \t\t\t} else {\n-\t\t\t\tdirStr = loadDirs().configDir;\n+\t\t\t\tdirStr = dirFunc.apply(loadDirs());\n \t\t\t}\n \t\t\tPath path = Path.of(dirStr).toAbsolutePath();\n \t\t\tFiles.createDirectories(path);",
      "parent_sha": "82e2104f3c65dc88a52c9cf7eb67ac793e58b40d"
    }
  },
  {
    "oid": "e8fd1e1dc796f4e3bd9c22327deefe7a69a45d51",
    "message": "core: fix debug info processing NPE",
    "date": "2015-02-24T20:20:54Z",
    "url": "https://github.com/skylot/jadx/commit/e8fd1e1dc796f4e3bd9c22327deefe7a69a45d51",
    "details": {
      "sha": "6cae4a3404b530fed6a0d4e62e9016449cb854a3",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/DebugInfoVisitor.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/skylot/jadx/blob/e8fd1e1dc796f4e3bd9c22327deefe7a69a45d51/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FDebugInfoVisitor.java",
      "raw_url": "https://github.com/skylot/jadx/raw/e8fd1e1dc796f4e3bd9c22327deefe7a69a45d51/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FDebugInfoVisitor.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FDebugInfoVisitor.java?ref=e8fd1e1dc796f4e3bd9c22327deefe7a69a45d51",
      "patch": "@@ -19,9 +19,14 @@ public void visit(MethodNode mth) throws JadxException {\n \t\t\tdebugInfoParser.process();\n \n \t\t\tif (insnArr.length != 0) {\n-\t\t\t\tint line = insnArr[0].getSourceLine();\n-\t\t\t\tif (line != 0) {\n-\t\t\t\t\tmth.setSourceLine(line - 1);\n+\t\t\t\tfor (InsnNode insn : insnArr) {\n+\t\t\t\t\tif (insn != null) {\n+\t\t\t\t\t\tint line = insn.getSourceLine();\n+\t\t\t\t\t\tif (line != 0) {\n+\t\t\t\t\t\t\tmth.setSourceLine(line - 1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (!mth.getReturnType().equals(ArgType.VOID)) {",
      "parent_sha": "2b7f8931a478861f82fae865057a46bbc7ea33a2"
    }
  },
  {
    "oid": "22ed241d50a422127e3eec66af8ff95e309e3d7b",
    "message": "fix(gui): correct html render in comments search results",
    "date": "2022-11-15T13:53:48Z",
    "url": "https://github.com/skylot/jadx/commit/22ed241d50a422127e3eec66af8ff95e309e3d7b",
    "details": {
      "sha": "ce3e57db3d3ee87884f5168fdf76bc04f40579d9",
      "filename": "jadx-gui/src/main/java/jadx/gui/search/providers/CommentSearchProvider.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/skylot/jadx/blob/22ed241d50a422127e3eec66af8ff95e309e3d7b/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsearch%2Fproviders%2FCommentSearchProvider.java",
      "raw_url": "https://github.com/skylot/jadx/raw/22ed241d50a422127e3eec66af8ff95e309e3d7b/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsearch%2Fproviders%2FCommentSearchProvider.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsearch%2Fproviders%2FCommentSearchProvider.java?ref=22ed241d50a422127e3eec66af8ff95e309e3d7b",
      "patch": "@@ -5,6 +5,7 @@\n \n import javax.swing.Icon;\n \n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n import org.slf4j.Logger;\n@@ -197,7 +198,7 @@ public Icon getIcon() {\n \n \t\t@Override\n \t\tpublic String getSyntaxName() {\n-\t\t\treturn node.getSyntaxName();\n+\t\t\treturn SyntaxConstants.SYNTAX_STYLE_NONE; // comment is always plain text\n \t\t}\n \n \t\t@Override\n@@ -220,6 +221,11 @@ public String makeLongStringHtml() {\n \t\t\treturn node.makeLongStringHtml();\n \t\t}\n \n+\t\t@Override\n+\t\tpublic boolean disableHtml() {\n+\t\t\treturn node.disableHtml();\n+\t\t}\n+\n \t\t@Override\n \t\tpublic int getPos() {\n \t\t\treturn node.getPos();",
      "parent_sha": "28e5a3c5be70a8f283774e375b0f3a052c667627"
    }
  },
  {
    "oid": "484e07df8d1187e81c16a0db49056cdaf9230904",
    "message": "Fix setting variable name from debug info",
    "date": "2013-04-27T17:03:01Z",
    "url": "https://github.com/skylot/jadx/commit/484e07df8d1187e81c16a0db49056cdaf9230904",
    "details": {
      "sha": "35f8e35e81422b62aca720a25f949835597245ea",
      "filename": "src/main/java/jadx/dex/nodes/parser/DebugInfoParser.java",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/skylot/jadx/blob/484e07df8d1187e81c16a0db49056cdaf9230904/src%2Fmain%2Fjava%2Fjadx%2Fdex%2Fnodes%2Fparser%2FDebugInfoParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/484e07df8d1187e81c16a0db49056cdaf9230904/src%2Fmain%2Fjava%2Fjadx%2Fdex%2Fnodes%2Fparser%2FDebugInfoParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/src%2Fmain%2Fjava%2Fjadx%2Fdex%2Fnodes%2Fparser%2FDebugInfoParser.java?ref=484e07df8d1187e81c16a0db49056cdaf9230904",
      "patch": "@@ -78,8 +78,7 @@ public void process(InsnNode[] insnByOffset) throws DecodeException {\n \t\t\t\t\tint nameId = section.readUleb128() - 1;\n \t\t\t\t\tint type = section.readUleb128() - 1;\n \t\t\t\t\tLocalVarInfo var = new LocalVarInfo(dex, regNum, nameId, type, DexNode.NO_INDEX);\n-\t\t\t\t\tvar.start(addr, line);\n-\t\t\t\t\tlocals[regNum] = var;\n+\t\t\t\t\tstartVar(var, locals, insnByOffset, addr, line);\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\tcase DBG_START_LOCAL_EXTENDED: {\n@@ -88,15 +87,17 @@ public void process(InsnNode[] insnByOffset) throws DecodeException {\n \t\t\t\t\tint type = section.readUleb128() - 1;\n \t\t\t\t\tint sign = section.readUleb128() - 1;\n \t\t\t\t\tLocalVarInfo var = new LocalVarInfo(dex, regNum, nameId, type, sign);\n-\t\t\t\t\tvar.start(addr, line);\n-\t\t\t\t\tlocals[regNum] = var;\n+\t\t\t\t\tstartVar(var, locals, insnByOffset, addr, line);\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\tcase DBG_RESTART_LOCAL: {\n \t\t\t\t\tint regNum = section.readUleb128();\n \t\t\t\t\tLocalVarInfo var = locals[regNum];\n-\t\t\t\t\tif (var != null)\n+\t\t\t\t\tif (var != null) {\n+\t\t\t\t\t\tvar.end(addr, line);\n+\t\t\t\t\t\tsetVar(var, insnByOffset);\n \t\t\t\t\t\tvar.start(addr, line);\n+\t\t\t\t\t}\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\tcase DBG_END_LOCAL: {\n@@ -141,6 +142,17 @@ public void process(InsnNode[] insnByOffset) throws DecodeException {\n \t\t}\n \t}\n \n+\tprivate void startVar(LocalVarInfo var, LocalVarInfo[] locals, InsnNode[] insnByOffset, int addr, int line) {\n+\t\tint regNum = var.getRegNum();\n+\t\tLocalVarInfo prev = locals[regNum];\n+\t\tif (prev != null && !prev.isEnd()) {\n+\t\t\tprev.end(addr, line);\n+\t\t\tsetVar(prev, insnByOffset);\n+\t\t}\n+\t\tvar.start(addr, line);\n+\t\tlocals[regNum] = var;\n+\t}\n+\n \tprivate void setVar(LocalVarInfo var, InsnNode[] insnByOffset) {\n \t\tint start = var.getStartAddr();\n \t\tint end = var.getEndAddr();",
      "parent_sha": "a55f4c59cecbfd7061f4839c54415df3a62c5949"
    }
  },
  {
    "oid": "fa41874e303f3570de389c118f59444a1139e948",
    "message": "feat(gui): add parameters logging in Frida code snippet (#1497)(PR #1498)",
    "date": "2022-05-28T13:39:02Z",
    "url": "https://github.com/skylot/jadx/commit/fa41874e303f3570de389c118f59444a1139e948",
    "details": {
      "sha": "6668ac95702ded55fc24bc2cbfad3e5df70126b8",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/codearea/FridaAction.java",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/skylot/jadx/blob/fa41874e303f3570de389c118f59444a1139e948/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FFridaAction.java",
      "raw_url": "https://github.com/skylot/jadx/raw/fa41874e303f3570de389c118f59444a1139e948/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FFridaAction.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FFridaAction.java?ref=fa41874e303f3570de389c118f59444a1139e948",
      "patch": "@@ -92,15 +92,24 @@ private String generateMethodSnippet(JMethod jMth) {\n \t\t} else {\n \t\t\tfunctionUntilImplementation = String.format(\"%s[\\\"%s\\\"].implementation\", shortClassName, methodName);\n \t\t}\n-\t\tString functionParametersString = String.join(\", \", collectMethodArgNames(javaMethod));\n+\n+\t\tList<String> methodArgNames = collectMethodArgNames(javaMethod);\n+\n+\t\tString functionParametersString = String.join(\", \", methodArgNames);\n+\t\tString logParametersString =\n+\t\t\t\tmethodArgNames.stream().map(e -> String.format(\"'%s: ' + %s\", e, e)).collect(Collectors.joining(\" + ', ' + \"));\n+\t\tif (logParametersString.length() > 0) {\n+\t\t\tlogParametersString = \" + ', ' + \" + logParametersString;\n+\t\t}\n \t\tString functionParameterAndBody = String.format(\n-\t\t\t\t\"%s = function(%s){\\n\"\n-\t\t\t\t\t\t+ \"    console.log('%s is called');\\n\"\n+\t\t\t\t\"%s = function (%s) {\\n\"\n+\t\t\t\t\t\t+ \"    console.log('%s is called'%s);\\n\"\n \t\t\t\t\t\t+ \"    let ret = this.%s(%s);\\n\"\n \t\t\t\t\t\t+ \"    console.log('%s ret value is ' + ret);\\n\"\n \t\t\t\t\t\t+ \"    return ret;\\n\"\n \t\t\t\t\t\t+ \"};\",\n-\t\t\t\tfunctionUntilImplementation, functionParametersString, methodName, methodName, functionParametersString, methodName);\n+\t\t\t\tfunctionUntilImplementation, functionParametersString, methodName, logParametersString, methodName,\n+\t\t\t\tfunctionParametersString, methodName);\n \n \t\treturn generateClassSnippet(jMth.getJParent()) + \"\\n\" + functionParameterAndBody;\n \t}",
      "parent_sha": "2aa6c99c90740770678d0aa88a8a8b14052bd48a"
    }
  },
  {
    "oid": "813b7bca6e3a2cc67c2ea0507714b6dc53d7edab",
    "message": "core: sort error nodes in execution report",
    "date": "2014-06-23T19:37:39Z",
    "url": "https://github.com/skylot/jadx/commit/813b7bca6e3a2cc67c2ea0507714b6dc53d7edab",
    "details": {
      "sha": "47da988c64bc7af43af706fcaabf2deec0f04f7f",
      "filename": "jadx-core/src/main/java/jadx/core/utils/ErrorsCounter.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/skylot/jadx/blob/813b7bca6e3a2cc67c2ea0507714b6dc53d7edab/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2FErrorsCounter.java",
      "raw_url": "https://github.com/skylot/jadx/raw/813b7bca6e3a2cc67c2ea0507714b6dc53d7edab/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2FErrorsCounter.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2FErrorsCounter.java?ref=813b7bca6e3a2cc67c2ea0507714b6dc53d7edab",
      "patch": "@@ -7,7 +7,11 @@\n import jadx.core.dex.nodes.MethodNode;\n import jadx.core.utils.exceptions.JadxOverflowException;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n \n import org.slf4j.Logger;\n@@ -66,7 +70,14 @@ public static String methodError(MethodNode mth, String errorMsg) {\n \tpublic static void printReport() {\n \t\tif (getErrorCount() > 0) {\n \t\t\tLOG.error(getErrorCount() + \" errors occured in following nodes:\");\n-\t\t\tfor (Object node : ERROR_NODES) {\n+\t\t\tList<Object> nodes = new ArrayList<Object>(ERROR_NODES);\n+\t\t\tCollections.sort(nodes, new Comparator<Object>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic int compare(Object o1, Object o2) {\n+\t\t\t\t\treturn String.valueOf(o1).compareTo(String.valueOf(o2));\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tfor (Object node : nodes) {\n \t\t\t\tString nodeName = node.getClass().getSimpleName().replace(\"Node\", \"\");\n \t\t\t\tLOG.error(\"  \" + nodeName + \": \" + node);\n \t\t\t}",
      "parent_sha": "e2945f2a421b0a0599cf3e73020333c823faa0c9"
    }
  },
  {
    "oid": "a06df187c949f3e2b743c515cd6b778f3f432405",
    "message": "fix(gui): ask for project file path on exit (#1474)",
    "date": "2022-05-08T11:55:25Z",
    "url": "https://github.com/skylot/jadx/commit/a06df187c949f3e2b743c515cd6b778f3f432405",
    "details": {
      "sha": "0ca366a7a7fb16f21106b1f2777faf3b3453b648",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/MainWindow.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/a06df187c949f3e2b743c515cd6b778f3f432405/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java",
      "raw_url": "https://github.com/skylot/jadx/raw/a06df187c949f3e2b743c515cd6b778f3f432405/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java?ref=a06df187c949f3e2b743c515cd6b778f3f432405",
      "patch": "@@ -443,7 +443,7 @@ private boolean ensureProjectIsSaved() {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tif (res == JOptionPane.YES_OPTION) {\n-\t\t\t\tproject.save();\n+\t\t\t\tsaveProject();\n \t\t\t}\n \t\t}\n \t\treturn true;",
      "parent_sha": "e784c7f7dfa1b8a6ced69b55ab808877cdbefba4"
    }
  },
  {
    "oid": "caad78885d41e75889bc6ff0fab7de3fe2ec873f",
    "message": "core: check for duplicated code generation",
    "date": "2014-08-02T12:39:14Z",
    "url": "https://github.com/skylot/jadx/commit/caad78885d41e75889bc6ff0fab7de3fe2ec873f",
    "details": {
      "sha": "ab7b650c74fe01f9708a7dc9a5be0308e793608d",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/skylot/jadx/blob/caad78885d41e75889bc6ff0fab7de3fe2ec873f/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FCheckRegions.java",
      "raw_url": "https://github.com/skylot/jadx/raw/caad78885d41e75889bc6ff0fab7de3fe2ec873f/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FCheckRegions.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2Fregions%2FCheckRegions.java?ref=caad78885d41e75889bc6ff0fab7de3fe2ec873f",
      "patch": "@@ -33,8 +33,20 @@ public void visit(MethodNode mth) throws JadxException {\n \t\tDepthRegionTraversal.traverseAll(mth, new AbstractRegionVisitor() {\n \t\t\t@Override\n \t\t\tpublic void processBlock(MethodNode mth, IBlock container) {\n-\t\t\t\tif (container instanceof BlockNode) {\n-\t\t\t\t\tblocksInRegions.add((BlockNode) container);\n+\t\t\t\tif (!(container instanceof BlockNode)) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tBlockNode block = (BlockNode) container;\n+\t\t\t\tif (blocksInRegions.add(block)) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tif (!block.contains(AFlag.RETURN)\n+\t\t\t\t\t\t&& !block.contains(AFlag.SKIP)\n+\t\t\t\t\t\t&& !block.contains(AFlag.SYNTHETIC)\n+\t\t\t\t\t\t&& !block.getInstructions().isEmpty()) {\n+\t\t\t\t\t// TODO\n+\t\t\t\t\t// mth.add(AFlag.INCONSISTENT_CODE);\n+\t\t\t\t\tLOG.debug(\" Duplicated block: {} in {}\", block, mth);\n \t\t\t\t}\n \t\t\t}\n \t\t});",
      "parent_sha": "a234227b9f8cf3957f1d4807d3d390e96369f912"
    }
  },
  {
    "oid": "a046f1caec356fdd58dcc9666e9102c6e7b46032",
    "message": "core: ignore dex loading errors (#233)",
    "date": "2018-02-28T18:55:19Z",
    "url": "https://github.com/skylot/jadx/commit/a046f1caec356fdd58dcc9666e9102c6e7b46032",
    "details": {
      "sha": "cd6623fec971f10bcd6f3b4c88d20bfba1349b8b",
      "filename": "jadx-core/src/main/java/jadx/core/utils/files/InputFile.java",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/skylot/jadx/blob/a046f1caec356fdd58dcc9666e9102c6e7b46032/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java",
      "raw_url": "https://github.com/skylot/jadx/raw/a046f1caec356fdd58dcc9666e9102c6e7b46032/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FInputFile.java?ref=a046f1caec356fdd58dcc9666e9102c6e7b46032",
      "patch": "@@ -13,6 +13,7 @@\n \n import com.android.dex.Dex;\n import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.Nullable;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -105,8 +106,11 @@ private boolean loadFromZip(String ext) throws IOException, DecodeException {\n \t\t\t\t\t\t\t|| entryName.endsWith(instantRunDexSuffix)) {\n \t\t\t\t\t\tswitch (ext) {\n \t\t\t\t\t\t\tcase \".dex\":\n-\t\t\t\t\t\t\t\tindex++;\n-\t\t\t\t\t\t\t\taddDexFile(entryName, new Dex(inputStream));\n+\t\t\t\t\t\t\t\tDex dexBuf = makeDexBuf(entryName, inputStream);\n+\t\t\t\t\t\t\t\tif (dexBuf != null) {\n+\t\t\t\t\t\t\t\t\taddDexFile(entryName, dexBuf);\n+\t\t\t\t\t\t\t\t\tindex++;\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase \".jar\":\n@@ -140,6 +144,16 @@ private boolean loadFromZip(String ext) throws IOException, DecodeException {\n \t\treturn index > 0;\n \t}\n \n+\t@Nullable\n+\tprivate Dex makeDexBuf(String entryName, InputStream inputStream) {\n+\t\ttry {\n+\t\t\treturn new Dex(inputStream);\n+\t\t} catch (Exception e) {\n+\t\t\tLOG.error(\"Failed to load file: {}, error: {}\", entryName, e.getMessage(), e);\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n \tprivate static Dex loadFromJar(File jarFile) throws DecodeException {\n \t\tJavaToDex j2d = new JavaToDex();\n \t\ttry {",
      "parent_sha": "c25f918cc52c591020b4710bb4fbadcc2ab9417d"
    }
  },
  {
    "oid": "4db50fb74956ea94a52c8c0bbdd0f8e45dba69f3",
    "message": "fix(gui): correct html disabling in search results",
    "date": "2022-10-27T09:29:50Z",
    "url": "https://github.com/skylot/jadx/commit/4db50fb74956ea94a52c8c0bbdd0f8e45dba69f3",
    "details": {
      "sha": "5c685ea10322f683c8dcd01eb70264046385cbd7",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/dialog/CommonSearchDialog.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/4db50fb74956ea94a52c8c0bbdd0f8e45dba69f3/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FCommonSearchDialog.java",
      "raw_url": "https://github.com/skylot/jadx/raw/4db50fb74956ea94a52c8c0bbdd0f8e45dba69f3/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FCommonSearchDialog.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FCommonSearchDialog.java?ref=4db50fb74956ea94a52c8c0bbdd0f8e45dba69f3",
      "patch": "@@ -454,10 +454,10 @@ private void updateSelection(JTable table, Component comp, int column, boolean i\n \n \t\tprivate Component makeCell(JNode node, int column) {\n \t\t\tif (column == 0) {\n+\t\t\t\tlabel.disableHtml(node.disableHtml());\n \t\t\t\tlabel.setText(node.makeLongStringHtml());\n \t\t\t\tlabel.setToolTipText(node.getTooltip());\n \t\t\t\tlabel.setIcon(node.getIcon());\n-\t\t\t\tlabel.disableHtml(node.disableHtml());\n \t\t\t\treturn label;\n \t\t\t}\n \t\t\tif (!node.hasDescString()) {",
      "parent_sha": "1dd0c90a04548a4832d04327ad6f6214d20986ca"
    }
  },
  {
    "oid": "49137c97519919ea2c2c6c43430799331712f76c",
    "message": "fix(cli): don't ignore critical errors (#1150)\n\nThrown java.lang.Error was ignored and not logged.",
    "date": "2022-05-19T22:12:19Z",
    "url": "https://github.com/skylot/jadx/commit/49137c97519919ea2c2c6c43430799331712f76c",
    "details": {
      "sha": "94cb4719da25d0cd8691b8905a049217653d2bc3",
      "filename": "jadx-cli/src/main/java/jadx/cli/JadxCLI.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/49137c97519919ea2c2c6c43430799331712f76c/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLI.java",
      "raw_url": "https://github.com/skylot/jadx/raw/49137c97519919ea2c2c6c43430799331712f76c/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLI.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLI.java?ref=49137c97519919ea2c2c6c43430799331712f76c",
      "patch": "@@ -21,7 +21,7 @@ public static void main(String[] args) {\n \t\t} catch (JadxArgsValidateException e) {\n \t\t\tLOG.error(\"Incorrect arguments: {}\", e.getMessage());\n \t\t\tresult = 1;\n-\t\t} catch (Exception e) {\n+\t\t} catch (Throwable e) {\n \t\t\tLOG.error(\"Process error:\", e);\n \t\t\tresult = 1;\n \t\t} finally {",
      "parent_sha": "0606c90f22934145e16bf0cc145def50cfbbde32"
    }
  },
  {
    "oid": "1ec041a48f8e9b8e3cb6562be8565103844cbe88",
    "message": "Directory Bug \n\nThe correct pattern to make a directory is: `if (!dir.mkdirs() && !dir.isDirectory()) { error }` mkdirs checks for exists so the exists check is redundant.",
    "date": "2018-07-29T22:09:54Z",
    "url": "https://github.com/skylot/jadx/commit/1ec041a48f8e9b8e3cb6562be8565103844cbe88",
    "details": {
      "sha": "fa523eb7cffc935ac8e172d8178b67f59bdb63be",
      "filename": "jadx-core/src/main/java/jadx/core/utils/files/FileUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/1ec041a48f8e9b8e3cb6562be8565103844cbe88/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FFileUtils.java",
      "raw_url": "https://github.com/skylot/jadx/raw/1ec041a48f8e9b8e3cb6562be8565103844cbe88/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FFileUtils.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Futils%2Ffiles%2FFileUtils.java?ref=1ec041a48f8e9b8e3cb6562be8565103844cbe88",
      "patch": "@@ -57,7 +57,7 @@ public static void makeDirsForFile(File file) {\n \tpublic static void makeDirs(@Nullable File dir) {\n \t\tif (dir != null) {\n \t\t\tsynchronized (MKDIR_SYNC) {\n-\t\t\t\tif (!dir.exists() && !dir.mkdirs()) {\n+\t\t\t\tif (!dir.mkdirs() && !dir.isDirectory()) {\n \t\t\t\t\tthrow new JadxRuntimeException(\"Can't create directory \" + dir);\n \t\t\t\t}\n \t\t\t}",
      "parent_sha": "2433a7e89c0f1214c8ca4494b68a07a3c95fa5b5"
    }
  },
  {
    "oid": "fdaf8492ef8b7dfcdb135f3abbbd8b8124195e5a",
    "message": "Performance issue when building strings \n\nImprove performance by using StringBuilder instead of StringBuffer.",
    "date": "2018-07-29T22:02:14Z",
    "url": "https://github.com/skylot/jadx/commit/fdaf8492ef8b7dfcdb135f3abbbd8b8124195e5a",
    "details": {
      "sha": "25a6a9e601de28deda7c834e3e9b34db86628e51",
      "filename": "jadx-gui/src/main/java/jadx/gui/utils/CertificateManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/fdaf8492ef8b7dfcdb135f3abbbd8b8124195e5a/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FCertificateManager.java",
      "raw_url": "https://github.com/skylot/jadx/raw/fdaf8492ef8b7dfcdb135f3abbbd8b8124195e5a/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FCertificateManager.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FCertificateManager.java?ref=fdaf8492ef8b7dfcdb135f3abbbd8b8124195e5a",
      "patch": "@@ -193,7 +193,7 @@ public static String hexify(byte bytes[]) {\n \t\tchar[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n \t\t\t\t'A', 'B', 'C', 'D', 'E', 'F'};\n \n-\t\tStringBuffer buf = new StringBuffer(bytes.length * 3);\n+\t\tStringBuilder buf = new StringBuilder(bytes.length * 3);\n \n \t\tfor (int i = 0; i < bytes.length; ++i) {\n \t\t\tbuf.append(hexDigits[(bytes[i] & 0xf0) >> 4]);",
      "parent_sha": "2433a7e89c0f1214c8ca4494b68a07a3c95fa5b5"
    }
  },
  {
    "oid": "3556e591b0df283f6361fa787bba20b909313c43",
    "message": "gui: hide deobf options if not enabled (#281)",
    "date": "2018-05-26T17:41:54Z",
    "url": "https://github.com/skylot/jadx/commit/3556e591b0df283f6361fa787bba20b909313c43",
    "details": {
      "sha": "9c2ce32837949e2349e4bf92c77880b455beb4ef",
      "filename": "jadx-gui/src/main/java/jadx/gui/settings/JadxSettingsWindow.java",
      "status": "modified",
      "additions": 15,
      "deletions": 2,
      "changes": 17,
      "blob_url": "https://github.com/skylot/jadx/blob/3556e591b0df283f6361fa787bba20b909313c43/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsWindow.java",
      "raw_url": "https://github.com/skylot/jadx/raw/3556e591b0df283f6361fa787bba20b909313c43/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsWindow.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsWindow.java?ref=3556e591b0df283f6361fa787bba20b909313c43",
      "patch": "@@ -10,6 +10,8 @@\n import java.awt.event.ItemListener;\n import java.awt.event.MouseAdapter;\n import java.awt.event.MouseEvent;\n+import java.util.Arrays;\n+import java.util.Collection;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -160,9 +162,17 @@ public void itemStateChanged(ItemEvent e) {\n \t\tdeobfGroup.addRow(NLS.str(\"preferences.deobfuscation_max_len\"), maxLen);\n \t\tdeobfGroup.addRow(NLS.str(\"preferences.deobfuscation_source_alias\"), deobfSourceAlias);\n \t\tdeobfGroup.end();\n+\n+\t\tCollection<JComponent> connectedComponents = Arrays.asList(deobfForce, minLen, maxLen, deobfSourceAlias);\n+\t\tdeobfOn.addItemListener(e -> enableComponentList(connectedComponents, e.getStateChange() == ItemEvent.SELECTED));\n+\t\tenableComponentList(connectedComponents, settings.isDeobfuscationOn());\n \t\treturn deobfGroup;\n \t}\n \n+\tprivate void enableComponentList(Collection<JComponent> connectedComponents, boolean enabled) {\n+\t\tconnectedComponents.forEach(comp -> comp.setEnabled(enabled));\n+\t}\n+\n \tprivate SettingsGroup makeEditorGroup() {\n \t\tJButton fontBtn = new JButton(NLS.str(\"preferences.select_font\"));\n \t\tfontBtn.addMouseListener(new MouseAdapter() {\n@@ -213,8 +223,9 @@ public void itemStateChanged(ItemEvent e) {\n \t\t\t}\n \t\t});\n \n-\t\tfinal JSpinner threadsCount = new JSpinner();\n-\t\tthreadsCount.setValue(settings.getThreadsCount());\n+\t\tSpinnerNumberModel spinnerModel = new SpinnerNumberModel(\n+\t\t\t\tsettings.getThreadsCount(), 1, Runtime.getRuntime().availableProcessors() * 2, 1);\n+\t\tfinal JSpinner threadsCount = new JSpinner(spinnerModel);\n \t\tthreadsCount.addChangeListener(new ChangeListener() {\n \t\t\t@Override\n \t\t\tpublic void stateChanged(ChangeEvent e) {\n@@ -329,6 +340,8 @@ public void addRow(String label, JComponent comp) {\n \t\t\tc.weightx = 0.2;\n \t\t\tc.fill = GridBagConstraints.HORIZONTAL;\n \t\t\tadd(comp, c);\n+\n+\t\t\tcomp.addPropertyChangeListener(\"enabled\", evt -> jLabel.setEnabled((boolean) evt.getNewValue()));\n \t\t}\n \n \t\tpublic void end() {",
      "parent_sha": "8fdb473d781cc2ffa50f016c7e316b5e33353fd7"
    }
  },
  {
    "oid": "d5cfdfb50dfb38a65f1709cfadc1628ff32e546d",
    "message": "Prevents command injections when opening links",
    "date": "2018-04-08T18:23:01Z",
    "url": "https://github.com/skylot/jadx/commit/d5cfdfb50dfb38a65f1709cfadc1628ff32e546d",
    "details": {
      "sha": "f306dbc01be5a43c8876330b5b72223c13762a8d",
      "filename": "jadx-gui/src/main/java/jadx/gui/utils/Link.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/skylot/jadx/blob/d5cfdfb50dfb38a65f1709cfadc1628ff32e546d/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FLink.java",
      "raw_url": "https://github.com/skylot/jadx/raw/d5cfdfb50dfb38a65f1709cfadc1628ff32e546d/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FLink.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FLink.java?ref=d5cfdfb50dfb38a65f1709cfadc1628ff32e546d",
      "patch": "@@ -66,16 +66,22 @@ private void browse() {\n \t\ttry {\n \t\t\tString os = System.getProperty(\"os.name\").toLowerCase();\n \t\t\tif (os.contains(\"win\")) {\n-\t\t\t\tRuntime.getRuntime().exec(\"rundll32 url.dll,FileProtocolHandler \" + url);\n+\t\t\t\tnew ProcessBuilder()\n+\t\t\t\t\t.command(new String[] {\"rundll32\", \"url.dll,FileProtocolHandler\", url})\n+\t\t\t\t\t.start();\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tif (os.contains(\"mac\")) {\n-\t\t\t\tRuntime.getRuntime().exec(\"open \" + url);\n+\t\t\t\tnew ProcessBuilder()\n+\t\t\t\t\t.command(new String[] {\"open\", url})\n+\t\t\t\t\t.start();\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tMap<String, String> env = System.getenv();\n \t\t\tif (env.get(\"BROWSER\") != null) {\n-\t\t\t\tRuntime.getRuntime().exec(env.get(\"BROWSER\") + \" \" + url);\n+\t\t\t\tnew ProcessBuilder()\n+\t\t\t\t\t.command(new String[] {env.get(\"BROWSER\"), url})\n+\t\t\t\t\t.start();\n \t\t\t\treturn;\n \t\t\t}\n \t\t} catch (Exception e) {",
      "parent_sha": "2e5d73a7e4c509b09357e055230cc6c4eb2f291b"
    }
  },
  {
    "oid": "904f0a1197eaffb1d7da2d26335f42a61a8742d1",
    "message": "A subtle bug repairing",
    "date": "2018-08-19T07:24:34Z",
    "url": "https://github.com/skylot/jadx/commit/904f0a1197eaffb1d7da2d26335f42a61a8742d1",
    "details": {
      "sha": "01b2ab128f01a97a89ac1c1a69c3d89c230c7467",
      "filename": "jadx-gui/src/main/java/jadx/gui/settings/JadxSettingsAdapter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/skylot/jadx/blob/904f0a1197eaffb1d7da2d26335f42a61a8742d1/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsAdapter.java",
      "raw_url": "https://github.com/skylot/jadx/raw/904f0a1197eaffb1d7da2d26335f42a61a8742d1/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsAdapter.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsAdapter.java?ref=904f0a1197eaffb1d7da2d26335f42a61a8742d1",
      "patch": "@@ -46,7 +46,8 @@ public static JadxSettings load() {\n \t\t\tString jsonSettings = PREFS.get(JADX_GUI_KEY, \"\");\n \t\t\tJadxSettings settings = fromString(jsonSettings);\n \t\t\tif (settings == null) {\n-\t\t\t\treturn new JadxSettings();\n+\t\t\t\tLOG.debug(\"Created new settings.\");\n+\t\t\t\tsettings = new JadxSettings();\n \t\t\t}\n \t\t\tsettings.fixOnLoad();\n \t\t\tLOG.debug(\"Loaded settings: {}\", makeString(settings));",
      "parent_sha": "4d3f2740ce6e35e2e6f7ded6d7f78e041b38128a"
    }
  },
  {
    "oid": "510035b7b72325ff51a0d6821513e919c9df2d93",
    "message": "core: fix used name/path to the deobfuscation map file\n      (used the same name/path as the APK file, but extension 'jobf')",
    "date": "2015-05-18T18:03:50Z",
    "url": "https://github.com/skylot/jadx/commit/510035b7b72325ff51a0d6821513e919c9df2d93",
    "details": {
      "sha": "9e30130252f5eabb9c68bbd849dbbe061faef867",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/skylot/jadx/blob/510035b7b72325ff51a0d6821513e919c9df2d93/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java",
      "raw_url": "https://github.com/skylot/jadx/raw/510035b7b72325ff51a0d6821513e919c9df2d93/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java?ref=510035b7b72325ff51a0d6821513e919c9df2d93",
      "patch": "@@ -30,7 +30,13 @@ public class RenameVisitor extends AbstractVisitor {\n \t@Override\n \tpublic void init(RootNode root) {\n \t\tIJadxArgs args = root.getArgs();\n-\t\tFile deobfMapFile = new File(args.getOutDir(), \"deobf_map.jobf\");\n+\n+\t\tfinal String firstInputFileName = root.getDexNodes().get(0).getInputFile().getFile().getAbsolutePath();\n+\t\tfinal String inputPath = org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(\n+\t\t\t\tfirstInputFileName);\n+\t\tfinal String inputName = org.apache.commons.io.FilenameUtils.getBaseName(firstInputFileName);\n+\n+\t\tFile deobfMapFile = new File(inputPath, inputName + \".jobf\");\n \t\tdeobfuscator = new Deobfuscator(args, root.getDexNodes(), deobfMapFile);\n \t\tboolean deobfuscationOn = args.isDeobfuscationOn();\n \t\tif (deobfuscationOn) {",
      "parent_sha": "c923d19bcc6f8ed1dce269aa4d5cf307fb506898"
    }
  },
  {
    "oid": "c7a12ad75b93be2c27a6befa6d7e27c98b72bd19",
    "message": "fix(res): resource XML generation for parent attribute added (PR #933, #931)",
    "date": "2020-05-13T17:25:45Z",
    "url": "https://github.com/skylot/jadx/commit/c7a12ad75b93be2c27a6befa6d7e27c98b72bd19",
    "details": {
      "sha": "7794ef096e7dc8f6b0ee89a35622bbeafd084f24",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ResXmlGen.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/skylot/jadx/blob/c7a12ad75b93be2c27a6befa6d7e27c98b72bd19/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGen.java",
      "raw_url": "https://github.com/skylot/jadx/raw/c7a12ad75b93be2c27a6befa6d7e27c98b72bd19/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGen.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResXmlGen.java?ref=c7a12ad75b93be2c27a6befa6d7e27c98b72bd19",
      "patch": "@@ -17,6 +17,7 @@\n import jadx.core.xmlgen.entry.ValuesParser;\n \n import static jadx.core.xmlgen.ParserConstants.PLURALS_MAP;\n+import static jadx.core.xmlgen.ParserConstants.TYPE_REFERENCE;\n \n public class ResXmlGen {\n \n@@ -85,10 +86,16 @@ private void addValue(CodeWriter cw, ResourceEntry ri) {\n \t\t\t\tif (formatValue != null) {\n \t\t\t\t\tcw.add(\"\\\" format=\\\"\").add(formatValue);\n \t\t\t\t}\n-\t\t\t\tcw.add(\"\\\">\");\n+\t\t\t\tcw.add(\"\\\"\");\n \t\t\t} else {\n-\t\t\t\tcw.add(\"name=\\\"\").add(ri.getKeyName()).add(\"\\\">\");\n+\t\t\t\tcw.add(\"name=\\\"\").add(ri.getKeyName()).add('\\\"');\n \t\t\t}\n+\t\t\tif (ri.getParentRef() != 0) {\n+\t\t\t\tString parent = vp.decodeValue(TYPE_REFERENCE, ri.getParentRef());\n+\t\t\t\tcw.add(\" parent=\\\"\").add(parent).add('\\\"');\n+\t\t\t}\n+\t\t\tcw.add(\">\");\n+\n \t\t\tcw.incIndent();\n \t\t\tfor (RawNamedValue value : ri.getNamedValues()) {\n \t\t\t\taddItem(cw, itemTag, ri.getTypeName(), value);",
      "parent_sha": "7cd77ae379065bed253e11e7bce24c5d9252b7e8"
    }
  },
  {
    "oid": "2f548dd9eb87c907b9e5947e23690de05813456b",
    "message": "core: fix help for jadx-gui, improve code",
    "date": "2015-04-06T19:30:48Z",
    "url": "https://github.com/skylot/jadx/commit/2f548dd9eb87c907b9e5947e23690de05813456b",
    "details": {
      "sha": "cc0b7cb22be41ec6986c4a6ed05d7f8f6ea503ac",
      "filename": "jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/skylot/jadx/blob/2f548dd9eb87c907b9e5947e23690de05813456b/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java",
      "raw_url": "https://github.com/skylot/jadx/raw/2f548dd9eb87c907b9e5947e23690de05813456b/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java?ref=2f548dd9eb87c907b9e5947e23690de05813456b",
      "patch": "@@ -8,7 +8,9 @@\n import java.io.PrintStream;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -132,28 +134,27 @@ public void printUsage() {\n \t\tout.println(\"options:\");\n \n \t\tList<ParameterDescription> params = jc.getParameters();\n-\n+\t\tMap<String, ParameterDescription> paramsMap = new LinkedHashMap<String, ParameterDescription>(params.size());\n \t\tint maxNamesLen = 0;\n \t\tfor (ParameterDescription p : params) {\n+\t\t\tparamsMap.put(p.getParameterized().getName(), p);\n \t\t\tint len = p.getNames().length();\n \t\t\tif (len > maxNamesLen) {\n \t\t\t\tmaxNamesLen = len;\n \t\t\t}\n \t\t}\n-\n-\t\tField[] fields = this.getClass().getDeclaredFields();\n+\t\tField[] fields = JadxCLIArgs.class.getDeclaredFields();\n \t\tfor (Field f : fields) {\n-\t\t\tfor (ParameterDescription p : params) {\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tif (name.equals(p.getParameterized().getName())) {\n-\t\t\t\t\tStringBuilder opt = new StringBuilder();\n-\t\t\t\t\topt.append(' ').append(p.getNames());\n-\t\t\t\t\taddSpaces(opt, maxNamesLen - opt.length() + 2);\n-\t\t\t\t\topt.append(\"- \").append(p.getDescription());\n-\t\t\t\t\tout.println(opt.toString());\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n+\t\t\tString name = f.getName();\n+\t\t\tParameterDescription p = paramsMap.get(name);\n+\t\t\tif (p == null) {\n+\t\t\t\tcontinue;\n \t\t\t}\n+\t\t\tStringBuilder opt = new StringBuilder();\n+\t\t\topt.append(' ').append(p.getNames());\n+\t\t\taddSpaces(opt, maxNamesLen - opt.length() + 2);\n+\t\t\topt.append(\"- \").append(p.getDescription());\n+\t\t\tout.println(opt);\n \t\t}\n \t\tout.println(\"Example:\");\n \t\tout.println(\" jadx -d out classes.dex\");",
      "parent_sha": "f715d6ce6802ab586d95648095c461c5b6a69726"
    }
  },
  {
    "oid": "a6f935ed681b9d13e1b0b1170a1bbb38f232203f",
    "message": "fix: close resource (PR #546)",
    "date": "2019-03-31T18:33:45Z",
    "url": "https://github.com/skylot/jadx/commit/a6f935ed681b9d13e1b0b1170a1bbb38f232203f",
    "details": {
      "sha": "d961f1be984562a33a281644bc00f14884e8730e",
      "filename": "jadx-core/src/main/java/jadx/core/Jadx.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/skylot/jadx/blob/a6f935ed681b9d13e1b0b1170a1bbb38f232203f/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2FJadx.java",
      "raw_url": "https://github.com/skylot/jadx/raw/a6f935ed681b9d13e1b0b1170a1bbb38f232203f/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2FJadx.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2FJadx.java?ref=a6f935ed681b9d13e1b0b1170a1bbb38f232203f",
      "patch": "@@ -1,5 +1,6 @@\n package jadx.core;\n \n+import java.io.InputStream;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Enumeration;\n@@ -126,10 +127,12 @@ public static String getVersion() {\n \t\t\tif (classLoader != null) {\n \t\t\t\tEnumeration<URL> resources = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n \t\t\t\twhile (resources.hasMoreElements()) {\n-\t\t\t\t\tManifest manifest = new Manifest(resources.nextElement().openStream());\n-\t\t\t\t\tString ver = manifest.getMainAttributes().getValue(\"jadx-version\");\n-\t\t\t\t\tif (ver != null) {\n-\t\t\t\t\t\treturn ver;\n+\t\t\t\t\ttry (InputStream is = resources.nextElement().openStream()) {\n+\t\t\t\t\t\tManifest manifest = new Manifest(is);\n+\t\t\t\t\t\tString ver = manifest.getMainAttributes().getValue(\"jadx-version\");\n+\t\t\t\t\t\tif (ver != null) {\n+\t\t\t\t\t\t\treturn ver;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
      "parent_sha": "b09c7ba6b838e1b82e6aaa738758a7393367a0c9"
    }
  },
  {
    "oid": "ca03406a3d91be14c42c24bfc011ef56b03092d2",
    "message": "fix: correct type for generic params in Xposed snippet, add fields support (PR #2047)\n\n* Fix: Resolved an issue with incorrectly generated xposedMethodSnippet when the parameter type is generic.\r\nAdd: Introduced xposedGenerateFieldSnippet.\r\n\r\n* fix code format\r\n\r\n---------\r\n\r\nCo-authored-by: skylot <118523+skylot@users.noreply.github.com>",
    "date": "2023-11-25T17:55:53Z",
    "url": "https://github.com/skylot/jadx/commit/ca03406a3d91be14c42c24bfc011ef56b03092d2",
    "details": {
      "sha": "956dcaef2f697b99f67c74645f7fbde0e2323914",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/codearea/XposedAction.java",
      "status": "modified",
      "additions": 30,
      "deletions": 4,
      "changes": 34,
      "blob_url": "https://github.com/skylot/jadx/blob/ca03406a3d91be14c42c24bfc011ef56b03092d2/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FXposedAction.java",
      "raw_url": "https://github.com/skylot/jadx/raw/ca03406a3d91be14c42c24bfc011ef56b03092d2/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FXposedAction.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fcodearea%2FXposedAction.java?ref=ca03406a3d91be14c42c24bfc011ef56b03092d2",
      "patch": "@@ -1,6 +1,7 @@\n package jadx.gui.ui.codearea;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.stream.Collectors;\n \n import javax.swing.JOptionPane;\n@@ -9,11 +10,13 @@\n import org.slf4j.LoggerFactory;\n \n import jadx.api.JavaClass;\n+import jadx.api.JavaField;\n import jadx.api.JavaMethod;\n import jadx.core.dex.instructions.args.ArgType;\n import jadx.core.dex.nodes.MethodNode;\n import jadx.core.utils.exceptions.JadxRuntimeException;\n import jadx.gui.treemodel.JClass;\n+import jadx.gui.treemodel.JField;\n import jadx.gui.treemodel.JMethod;\n import jadx.gui.treemodel.JNode;\n import jadx.gui.ui.action.ActionModel;\n@@ -24,6 +27,16 @@ public class XposedAction extends JNodeAction {\n \tprivate static final Logger LOG = LoggerFactory.getLogger(XposedAction.class);\n \tprivate static final long serialVersionUID = 2641585141624592578L;\n \n+\tprivate static final Map<String, String> PRIMITIVE_TYPE_MAPPING = Map.of(\n+\t\t\t\"int\", \"Int\",\n+\t\t\t\"byte\", \"Byte\",\n+\t\t\t\"short\", \"Short\",\n+\t\t\t\"long\", \"Long\",\n+\t\t\t\"float\", \"Float\",\n+\t\t\t\"double\", \"Double\",\n+\t\t\t\"char\", \"Char\",\n+\t\t\t\"boolean\", \"Boolean\");\n+\n \tpublic XposedAction(CodeArea codeArea) {\n \t\tsuper(ActionModel.XPOSED_COPY, codeArea);\n \t}\n@@ -43,7 +56,7 @@ public void runAction(JNode node) {\n \n \t@Override\n \tpublic boolean isActionEnabled(JNode node) {\n-\t\treturn node instanceof JMethod || node instanceof JClass;\n+\t\treturn node instanceof JMethod || node instanceof JClass || node instanceof JField;\n \t}\n \n \tprivate String generateXposedSnippet(JNode node) {\n@@ -53,6 +66,9 @@ private String generateXposedSnippet(JNode node) {\n \t\tif (node instanceof JClass) {\n \t\t\treturn generateClassSnippet((JClass) node);\n \t\t}\n+\t\tif (node instanceof JField) {\n+\t\t\treturn generateFieldSnippet((JField) node);\n+\t\t}\n \t\tthrow new JadxRuntimeException(\"Unsupported node type: \" + (node != null ? node.getClass() : \"null\"));\n \t}\n \n@@ -84,16 +100,26 @@ private String generateMethodSnippet(JMethod jMth) {\n \t\tif (mthArgs.isEmpty()) {\n \t\t\treturn String.format(xposedFormatStr, xposedMethod, rawClassName, methodName);\n \t\t}\n-\t\tString params = mthArgs.stream().map(type -> type + \".class, \").collect(Collectors.joining());\n+\t\tString params = mthArgs.stream()\n+\t\t\t\t.map(type -> (type.isGeneric() ? type.getObject() : type) + \".class, \")\n+\t\t\t\t.collect(Collectors.joining());\n \t\treturn String.format(xposedFormatStr, xposedMethod, rawClassName, methodName + params);\n \t}\n \n \tprivate String generateClassSnippet(JClass jc) {\n \t\tJavaClass javaClass = jc.getCls();\n \t\tString rawClassName = javaClass.getRawName();\n \t\tString shortClassName = javaClass.getName();\n-\t\treturn String.format(\"ClassLoader classLoader=lpparam.classLoader;\\n\"\n-\t\t\t\t+ \"Class %sClass=classLoader.loadClass(\\\"%s\\\");\",\n+\t\treturn String.format(\"ClassLoader classLoader = lpparam.classLoader;\\n\"\n+\t\t\t\t+ \"Class<?> %sClass = classLoader.loadClass(\\\"%s\\\");\",\n \t\t\t\tshortClassName, rawClassName);\n \t}\n+\n+\tprivate String generateFieldSnippet(JField jf) {\n+\t\tJavaField javaField = jf.getJavaField();\n+\t\tString isStatic = javaField.getAccessFlags().isStatic() ? \"Static\" : \"\";\n+\t\tString type = PRIMITIVE_TYPE_MAPPING.getOrDefault(javaField.getFieldNode().getType().toString(), \"Object\");\n+\t\tString xposedMethod = \"XposedHelpers.get\" + isStatic + type + \"Field\";\n+\t\treturn String.format(\"%s(/*runtimeObject*/, \\\"%s\\\");\", xposedMethod, javaField.getName());\n+\t}\n }",
      "parent_sha": "2d28da9b0e2b704a77946dcd5ef409d46944e2b2"
    }
  },
  {
    "oid": "ca2c935f6538cea3c1227c0ecb8f8ed261cbf382",
    "message": "gui: don't create output directory on startup",
    "date": "2013-07-24T13:40:55Z",
    "url": "https://github.com/skylot/jadx/commit/ca2c935f6538cea3c1227c0ecb8f8ed261cbf382",
    "details": {
      "sha": "fa1fe2deb179cd2f87a8f11b8efd814c0adb9f51",
      "filename": "jadx-cli/src/main/java/jadx/cli/JadxArgs.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/skylot/jadx/blob/ca2c935f6538cea3c1227c0ecb8f8ed261cbf382/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxArgs.java",
      "raw_url": "https://github.com/skylot/jadx/raw/ca2c935f6538cea3c1227c0ecb8f8ed261cbf382/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxArgs.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxArgs.java?ref=ca2c935f6538cea3c1227c0ecb8f8ed261cbf382",
      "patch": "@@ -121,10 +121,8 @@ public void processArgs() throws JadxException {\n \t\t}\n \n \t\toutputDir = new File(outDirName);\n-\t\tif (!outputDir.exists() && !outputDir.mkdirs())\n-\t\t\tthrow new JadxException(\"Can't create directory \" + outputDir);\n-\t\tif (!outputDir.isDirectory())\n-\t\t\tthrow new JadxException(\"Output file exists as file \" + outputDir);\n+\t\tif (outputDir.exists() && !outputDir.isDirectory())\n+\t\t\tthrow new JadxException(\"Output directory exists as file \" + outputDir);\n \t}\n \n \tpublic void printUsage() {",
      "parent_sha": "ddf2174cae752395b30669c8f17f1b1e77c8bb54"
    }
  },
  {
    "oid": "dc004f37ee490afc578e84926708f8e1bc8b9abc",
    "message": "style: fix code formatting",
    "date": "2019-04-21T13:23:34Z",
    "url": "https://github.com/skylot/jadx/commit/dc004f37ee490afc578e84926708f8e1bc8b9abc",
    "details": {
      "sha": "6cca2b78f23ec3c7f965827d19f740cb1eeb2a58",
      "filename": "jadx-gui/src/main/java/jadx/gui/utils/Utils.java",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/skylot/jadx/blob/dc004f37ee490afc578e84926708f8e1bc8b9abc/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FUtils.java",
      "raw_url": "https://github.com/skylot/jadx/raw/dc004f37ee490afc578e84926708f8e1bc8b9abc/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FUtils.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Futils%2FUtils.java?ref=dc004f37ee490afc578e84926708f8e1bc8b9abc",
      "patch": "@@ -203,13 +203,18 @@ public static void setWindowIcons(Window window) {\n \t\ticons.add(Utils.openImage(\"/logos/jadx-logo.png\"));\n \t\twindow.setIconImages(icons);\n \t}\n-\t\n-\tpublic static int ctrlButton() {\n+\n+\tpublic static final int CTRL_BNT_KEY = getCtrlButton();\n+\n+\tprivate static int getCtrlButton() {\n \t\tif (System.getProperty(\"os.name\").toLowerCase().contains(\"mac\")) {\n- \t\t\treturn Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();\n- \t\t}\n- \t\telse {\n- \t\t\treturn InputEvent.CTRL_DOWN_MASK;\n- \t\t}\n+\t\t\treturn Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();\n+\t\t} else {\n+\t\t\treturn InputEvent.CTRL_DOWN_MASK;\n+\t\t}\n+\t}\n+\n+\tpublic static int ctrlButton() {\n+\t\treturn CTRL_BNT_KEY;\n \t}\n }",
      "parent_sha": "cfbbd99bb8db986afba51bd83945077848d2780c"
    }
  },
  {
    "oid": "958ab245aecb416a6a0e4e620a0cc5049950adf6",
    "message": "fix(res): don't rename resource entries when useRawResName = true (PR #2306)",
    "date": "2024-10-14T19:32:12Z",
    "url": "https://github.com/skylot/jadx/commit/958ab245aecb416a6a0e4e620a0cc5049950adf6",
    "details": {
      "sha": "e854fbb9edb5a12875eccddf7c80d4e3671d1291",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ResTableBinaryParser.java",
      "status": "modified",
      "additions": 19,
      "deletions": 13,
      "changes": 32,
      "blob_url": "https://github.com/skylot/jadx/blob/958ab245aecb416a6a0e4e620a0cc5049950adf6/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableBinaryParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/958ab245aecb416a6a0e4e620a0cc5049950adf6/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableBinaryParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableBinaryParser.java?ref=958ab245aecb416a6a0e4e620a0cc5049950adf6",
      "patch": "@@ -425,20 +425,26 @@ private ResourceEntry buildResourceEntry(PackageChunk pkg, String config, int re\n \t\t\treturn STUB_ENTRY;\n \t\t}\n \n-\t\tString resName = getResName(typeName, resRef, origKeyName);\n-\t\tResourceEntry newResEntry = new ResourceEntry(resRef, pkg.getName(), typeName, resName, config);\n-\t\tResourceEntry prevResEntry = resStorage.searchEntryWithSameName(newResEntry);\n-\t\tif (prevResEntry != null) {\n-\t\t\tnewResEntry = newResEntry.copyWithId();\n-\n-\t\t\t// rename also previous entry for consistency\n-\t\t\tResourceEntry replaceForPrevEntry = prevResEntry.copyWithId();\n-\t\t\tresStorage.replace(prevResEntry, replaceForPrevEntry);\n-\t\t\tresStorage.addRename(replaceForPrevEntry);\n-\t\t}\n-\t\tif (!Objects.equals(origKeyName, newResEntry.getKeyName())) {\n-\t\t\tresStorage.addRename(newResEntry);\n+\t\tResourceEntry newResEntry;\n+\t\tif (useRawResName) {\n+\t\t\tnewResEntry = new ResourceEntry(resRef, pkg.getName(), typeName, origKeyName, config);\n+\t\t} else {\n+\t\t\tString resName = getResName(typeName, resRef, origKeyName);\n+\t\t\tnewResEntry = new ResourceEntry(resRef, pkg.getName(), typeName, resName, config);\n+\t\t\tResourceEntry prevResEntry = resStorage.searchEntryWithSameName(newResEntry);\n+\t\t\tif (prevResEntry != null) {\n+\t\t\t\tnewResEntry = newResEntry.copyWithId();\n+\n+\t\t\t\t// rename also previous entry for consistency\n+\t\t\t\tResourceEntry replaceForPrevEntry = prevResEntry.copyWithId();\n+\t\t\t\tresStorage.replace(prevResEntry, replaceForPrevEntry);\n+\t\t\t\tresStorage.addRename(replaceForPrevEntry);\n+\t\t\t}\n+\t\t\tif (!Objects.equals(origKeyName, newResEntry.getKeyName())) {\n+\t\t\t\tresStorage.addRename(newResEntry);\n+\t\t\t}\n \t\t}\n+\n \t\tresStorage.add(newResEntry);\n \t\treturn newResEntry;\n \t}",
      "parent_sha": "8f3cc3e8c178632e61fd57eccd5182bfee458fd3"
    }
  },
  {
    "oid": "8e0df4c423b71c319ec6bddb6412e05a3cdd6532",
    "message": "fix(gui): printUsage for jadx-gui now shows the new gui only parameter(s) (PR #660)",
    "date": "2019-05-10T19:42:32Z",
    "url": "https://github.com/skylot/jadx/commit/8e0df4c423b71c319ec6bddb6412e05a3cdd6532",
    "details": {
      "sha": "a24fdf7c084341fda90f53c5481ab48214bf7613",
      "filename": "jadx-cli/src/main/java/jadx/cli/JCommanderWrapper.java",
      "status": "modified",
      "additions": 20,
      "deletions": 3,
      "changes": 23,
      "blob_url": "https://github.com/skylot/jadx/blob/8e0df4c423b71c319ec6bddb6412e05a3cdd6532/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJCommanderWrapper.java",
      "raw_url": "https://github.com/skylot/jadx/raw/8e0df4c423b71c319ec6bddb6412e05a3cdd6532/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJCommanderWrapper.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJCommanderWrapper.java?ref=8e0df4c423b71c319ec6bddb6412e05a3cdd6532",
      "patch": "@@ -3,7 +3,9 @@\n import java.io.PrintStream;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n \n@@ -66,9 +68,9 @@ public void printUsage() {\n \t\t\t\tmaxNamesLen = len;\n \t\t\t}\n \t\t}\n-\t\tJadxCLIArgs args = new JadxCLIArgs();\n-\t\tField[] fields = args.getClass().getDeclaredFields();\n-\t\tfor (Field f : fields) {\n+\n+\t\tJadxCLIArgs args = (JadxCLIArgs) jc.getObjects().get(0);\n+\t\tfor (Field f : getFields(args.getClass())) {\n \t\t\tString name = f.getName();\n \t\t\tParameterDescription p = paramsMap.get(name);\n \t\t\tif (p == null) {\n@@ -85,6 +87,21 @@ public void printUsage() {\n \t\tout.println(\"  jadx -d out classes.dex\");\n \t}\n \n+\t/**\n+\t * Get all declared fields of the specified class and all super classes\n+\t *\n+\t * @param clazz\n+\t * @return\n+\t */\n+\tprivate List<Field> getFields(Class<?> clazz) {\n+\t\tList<Field> fieldList = new LinkedList<>();\n+\t\twhile (clazz != null) {\n+\t\t\tfieldList.addAll(Arrays.asList(clazz.getDeclaredFields()));\n+\t\t\tclazz = clazz.getSuperclass();\n+\t\t}\n+\t\treturn fieldList;\n+\t}\n+\n \tprivate void addDefaultValue(JadxCLIArgs args, Field f, StringBuilder opt) {\n \t\tClass<?> fieldType = f.getType();\n \t\tif (fieldType == int.class) {",
      "parent_sha": "86a4ed7fb346b1e2936a6c85b5c7558ba94a82af"
    }
  },
  {
    "oid": "3ca1357af4ad94ca28e7ef6a263c6f20d8b0fab7",
    "message": "fix(gui): sort resources by deobfuscated name (#1595)(PR #1598)\n\nCo-authored-by: /paul-nguyen-goldenowl <paul.nguyen.goldenowl@gmail.com>",
    "date": "2022-08-01T13:54:22Z",
    "url": "https://github.com/skylot/jadx/commit/3ca1357af4ad94ca28e7ef6a263c6f20d8b0fab7",
    "details": {
      "sha": "5e66812079397dbf1de41860a61633ef0c0851e8",
      "filename": "jadx-gui/src/main/java/jadx/gui/treemodel/JRoot.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/3ca1357af4ad94ca28e7ef6a263c6f20d8b0fab7/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Ftreemodel%2FJRoot.java",
      "raw_url": "https://github.com/skylot/jadx/raw/3ca1357af4ad94ca28e7ef6a263c6f20d8b0fab7/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Ftreemodel%2FJRoot.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Ftreemodel%2FJRoot.java?ref=3ca1357af4ad94ca28e7ef6a263c6f20d8b0fab7",
      "patch": "@@ -66,7 +66,7 @@ private JResource getHierarchyResources(List<ResourceFile> resources) {\n \t\t\t\t\tif (i != count - 1) {\n \t\t\t\t\t\tsubRF = new JResource(null, name, JResType.DIR);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tsubRF = new JResource(rf, rf.getOriginalName(), name, JResType.FILE);\n+\t\t\t\t\t\tsubRF = new JResource(rf, rf.getDeobfName(), name, JResType.FILE);\n \t\t\t\t\t}\n \t\t\t\t\tcurRf.getFiles().add(subRF);\n \t\t\t\t}",
      "parent_sha": "90e95213e4c8f243f7f8cc831c895181d51624a6"
    }
  },
  {
    "oid": "a5bd64461d3e800f3af987f358018966cc5e94e3",
    "message": "fix(gui): remember selected device in debugger (PR #2153)\n\n* ADBDialog->launchApp() if multiple devices presented should let user select the one they desire.\r\n\r\n* compare objects directly instead parsing\r\n\r\n---------\r\n\r\nCo-authored-by: \u00d6mer Faruk KAYIKCI <omer.kayikci@tubitak.gov.tr>\r\nCo-authored-by: Skylot <118523+skylot@users.noreply.github.com>",
    "date": "2024-04-19T18:02:12Z",
    "url": "https://github.com/skylot/jadx/commit/a5bd64461d3e800f3af987f358018966cc5e94e3",
    "details": {
      "sha": "bacabacd0e3a0eec84b9221beabe27a5b303111a",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/dialog/ADBDialog.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/skylot/jadx/blob/a5bd64461d3e800f3af987f358018966cc5e94e3/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FADBDialog.java",
      "raw_url": "https://github.com/skylot/jadx/raw/a5bd64461d3e800f3af987f358018966cc5e94e3/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FADBDialog.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FADBDialog.java?ref=a5bd64461d3e800f3af987f358018966cc5e94e3",
      "patch": "@@ -69,6 +69,7 @@ public class ADBDialog extends JDialog implements ADB.DeviceStateListener, ADB.J\n \tprivate transient JTree procTree;\n \tprivate Socket deviceSocket;\n \tprivate transient List<DeviceNode> deviceNodes = new ArrayList<>();\n+\tprivate transient DeviceNode lastSelectedDeviceNode;\n \n \tpublic ADBDialog(MainWindow mainWindow) {\n \t\tsuper(mainWindow);\n@@ -147,6 +148,15 @@ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean\n \t\t\t}\n \t\t});\n \n+\t\tprocTree.addTreeSelectionListener(event -> {\n+\t\t\tObject selectedNode = procTree.getLastSelectedPathComponent();\n+\t\t\tif (selectedNode instanceof DeviceTreeNode) {\n+\t\t\t\tlastSelectedDeviceNode = deviceNodes.stream()\n+\t\t\t\t\t\t.filter(item -> item.tNode == selectedNode)\n+\t\t\t\t\t\t.findFirst().orElse(null);\n+\t\t\t}\n+\t\t});\n+\n \t\tJPanel btnPane = new JPanel();\n \t\tBoxLayout boxLayout = new BoxLayout(btnPane, BoxLayout.LINE_AXIS);\n \t\tbtnPane.setLayout(boxLayout);\n@@ -511,7 +521,8 @@ private void launchApp() {\n \t\t\treturn;\n \t\t}\n \t\tString fullName = pkg + \"/\" + cls.getCls().getClassNode().getClassInfo().getFullName();\n-\t\tADBDevice device = deviceNodes.get(0).device; // TODO: if multiple devices presented should let user select the one they desire.\n+\n+\t\tADBDevice device = (lastSelectedDeviceNode == null) ? deviceNodes.get(0).device : lastSelectedDeviceNode.device;\n \t\tif (device != null) {\n \t\t\ttry {\n \t\t\t\tdevice.launchApp(fullName);",
      "parent_sha": "54bf79ccc565459603d74549bea10ef445ec1046"
    }
  },
  {
    "oid": "0df5aa80fecd36833dd4cad687b409abcdfb12e7",
    "message": "refactor(cli): add missing generic for JCommanderWrapper",
    "date": "2019-02-26T17:12:40Z",
    "url": "https://github.com/skylot/jadx/commit/0df5aa80fecd36833dd4cad687b409abcdfb12e7",
    "details": {
      "sha": "b2eafb7707e5bf83155cd9bc0408fa82934c3061",
      "filename": "jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/0df5aa80fecd36833dd4cad687b409abcdfb12e7/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java",
      "raw_url": "https://github.com/skylot/jadx/raw/0df5aa80fecd36833dd4cad687b409abcdfb12e7/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-cli%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcli%2FJadxCLIArgs.java?ref=0df5aa80fecd36833dd4cad687b409abcdfb12e7",
      "patch": "@@ -107,7 +107,7 @@ public boolean overrideProvided(String[] args) {\n \t\treturn process(jcw);\n \t}\n \n-\tprivate boolean process(JCommanderWrapper jcw) {\n+\tprivate boolean process(JCommanderWrapper<JadxCLIArgs> jcw) {\n \t\tif (printHelp) {\n \t\t\tjcw.printUsage();\n \t\t\treturn false;",
      "parent_sha": "28bcad202a4fcf652e844777637d16d26ff50716"
    }
  },
  {
    "oid": "8551c6c903da16b24b4f2c8322f254c2633fc68b",
    "message": "fix(res): ignore resource chunk entries that are located after the resource chunk end (#751)(PR #1436)",
    "date": "2022-04-04T17:05:07Z",
    "url": "https://github.com/skylot/jadx/commit/8551c6c903da16b24b4f2c8322f254c2633fc68b",
    "details": {
      "sha": "6c5554e0b146480812cfd11828e7380906b03ea1",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/skylot/jadx/blob/8551c6c903da16b24b4f2c8322f254c2633fc68b/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/8551c6c903da16b24b4f2c8322f254c2633fc68b/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java?ref=8551c6c903da16b24b4f2c8322f254c2633fc68b",
      "patch": "@@ -212,7 +212,8 @@ private void parseTypeChunk(long start, PackageChunk pkg) throws IOException {\n \t\t/* int headerSize = */\n \t\tis.readInt16();\n \t\t/* int size = */\n-\t\tis.readInt32();\n+\t\tlong chunkSize = is.readUInt32();\n+\t\tlong chunkEnd = start + chunkSize;\n \n \t\tint id = is.readInt8();\n \t\tis.checkInt8(0, \"type chunk, res0\");\n@@ -231,10 +232,15 @@ private void parseTypeChunk(long start, PackageChunk pkg) throws IOException {\n \t\tfor (int i = 0; i < entryCount; i++) {\n \t\t\tentryIndexes[i] = is.readInt32();\n \t\t}\n-\n \t\tis.checkPos(entriesStart, \"Expected entry start\");\n \t\tfor (int i = 0; i < entryCount; i++) {\n \t\t\tif (entryIndexes[i] != NO_ENTRY) {\n+\t\t\t\tif (is.getPos() >= chunkEnd) {\n+\t\t\t\t\t// Certain resource obfuscated apps like com.facebook.orca have more entries defined\n+\t\t\t\t\t// than actually fit into the chunk size -> ignore the remaining entries\n+\t\t\t\t\tLOG.warn(\"End of chunk reached - ignoring remaining {} entries\", entryCount - i);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t\tparseEntry(pkg, id, i, config.getQualifiers());\n \t\t\t}\n \t\t}",
      "parent_sha": "9a9ac4308e0f5c1e036a501d74c0ea146c56f550"
    }
  },
  {
    "oid": "994973ac01d2a3b2c621ca60ce1ddb08f0adda22",
    "message": "fix(gui): check free memory after GC attempt",
    "date": "2022-04-05T18:46:10Z",
    "url": "https://github.com/skylot/jadx/commit/994973ac01d2a3b2c621ca60ce1ddb08f0adda22",
    "details": {
      "sha": "e84a126624fb81fb36ace7aef83c3ae84f000487",
      "filename": "jadx-gui/src/main/java/jadx/gui/jobs/BackgroundExecutor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/skylot/jadx/blob/994973ac01d2a3b2c621ca60ce1ddb08f0adda22/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fjobs%2FBackgroundExecutor.java",
      "raw_url": "https://github.com/skylot/jadx/raw/994973ac01d2a3b2c621ca60ce1ddb08f0adda22/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fjobs%2FBackgroundExecutor.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fjobs%2FBackgroundExecutor.java?ref=994973ac01d2a3b2c621ca60ce1ddb08f0adda22",
      "patch": "@@ -195,7 +195,11 @@ private Supplier<TaskStatus> buildCancelCheck(long startTime) {\n \t\t\t\t\t// reduce thread count and continue\n \t\t\t\t\texecutor.setCorePoolSize(1);\n \t\t\t\t\tSystem.gc();\n-\t\t\t\t\tUiUtils.sleep(500); // wait GC\n+\t\t\t\t\tUiUtils.sleep(1000); // wait GC\n+\t\t\t\t\tif (!UiUtils.isFreeMemoryAvailable()) {\n+\t\t\t\t\t\tLOG.error(\"Task '{}' memory limit reached (after GC), force cancel\", task.getTitle());\n+\t\t\t\t\t\treturn TaskStatus.CANCEL_BY_MEMORY;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn null;\n \t\t\t};",
      "parent_sha": "c9622c07712f646894b781788da605b88780dc31"
    }
  },
  {
    "oid": "75a671405701a28e9c7824ef21e7d6365080340a",
    "message": "fix: regenerate method code if unexpected instruction is found (#462)",
    "date": "2019-05-17T17:01:01Z",
    "url": "https://github.com/skylot/jadx/commit/75a671405701a28e9c7824ef21e7d6365080340a",
    "details": {
      "sha": "9483d698c9e2212791f9afc10b081a6197bb75ca",
      "filename": "jadx-core/src/main/java/jadx/core/codegen/InsnGen.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/skylot/jadx/blob/75a671405701a28e9c7824ef21e7d6365080340a/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FInsnGen.java",
      "raw_url": "https://github.com/skylot/jadx/raw/75a671405701a28e9c7824ef21e7d6365080340a/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FInsnGen.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fcodegen%2FInsnGen.java?ref=75a671405701a28e9c7824ef21e7d6365080340a",
      "patch": "@@ -559,7 +559,11 @@ private void oneArgInsn(CodeWriter code, InsnNode insn, Set<Flags> state, char o\n \n \tprivate void fallbackOnlyInsn(InsnNode insn) throws CodegenException {\n \t\tif (!fallback) {\n-\t\t\tthrow new CodegenException(insn.getType() + \" can be used only in fallback mode\");\n+\t\t\tString msg = insn.getType() + \" instruction can be used only in fallback mode\";\n+\t\t\tCodegenException e = new CodegenException(msg);\n+\t\t\tmth.addError(msg, e);\n+\t\t\tmth.getParentClass().getTopParentClass().add(AFlag.RESTART_CODEGEN);\n+\t\t\tthrow e;\n \t\t}\n \t}\n ",
      "parent_sha": "6339cc20889a9653ca025434d23065e1c92eee3a"
    }
  },
  {
    "oid": "444a04e2f7ee721432c534917a6e2162b363c5ab",
    "message": "fix(gui): redirect jump from search for inlined classes",
    "date": "2023-03-24T15:34:46Z",
    "url": "https://github.com/skylot/jadx/commit/444a04e2f7ee721432c534917a6e2162b363c5ab",
    "details": {
      "sha": "b674f9f6e3f5cb6bfe2ff51d6134530d5f2fb386",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/dialog/CommonSearchDialog.java",
      "status": "modified",
      "additions": 38,
      "deletions": 1,
      "changes": 39,
      "blob_url": "https://github.com/skylot/jadx/blob/444a04e2f7ee721432c534917a6e2162b363c5ab/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FCommonSearchDialog.java",
      "raw_url": "https://github.com/skylot/jadx/raw/444a04e2f7ee721432c534917a6e2162b363c5ab/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FCommonSearchDialog.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FCommonSearchDialog.java?ref=444a04e2f7ee721432c534917a6e2162b363c5ab",
      "patch": "@@ -17,6 +17,7 @@\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.List;\n+import java.util.Objects;\n \n import javax.swing.AbstractAction;\n import javax.swing.BorderFactory;\n@@ -44,6 +45,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import jadx.api.JavaClass;\n+import jadx.api.metadata.ICodeAnnotation;\n+import jadx.api.metadata.annotations.NodeDeclareRef;\n+import jadx.gui.treemodel.JClass;\n import jadx.gui.treemodel.JNode;\n import jadx.gui.treemodel.JResSearchNode;\n import jadx.gui.ui.MainWindow;\n@@ -142,13 +147,45 @@ protected void openItem(JNode node) {\n \t\t\tJumpPosition jmpPos = new JumpPosition(((JResSearchNode) node).getResNode(), node.getPos());\n \t\t\ttabbedPane.codeJump(jmpPos);\n \t\t} else {\n-\t\t\ttabbedPane.codeJump(node);\n+\t\t\tif (!checkForRedirects(node)) {\n+\t\t\t\ttabbedPane.codeJump(node);\n+\t\t\t}\n \t\t}\n \t\tif (!mainWindow.getSettings().getKeepCommonDialogOpen()) {\n \t\t\tdispose();\n \t\t}\n \t}\n \n+\t// TODO: temp solution, move implementation into corresponding nodes\n+\tprivate boolean checkForRedirects(JNode node) {\n+\t\tif (node instanceof JClass) {\n+\t\t\tJavaClass cls = ((JClass) node).getCls();\n+\t\t\tJavaClass origTopCls = cls.getOriginalTopParentClass();\n+\t\t\tJavaClass codeParent = cls.getTopParentClass();\n+\t\t\tif (Objects.equals(codeParent, origTopCls)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tJClass jumpCls = mainWindow.getCacheObject().getNodeCache().makeFrom(codeParent);\n+\t\t\tmainWindow.getBackgroundExecutor().execute(\n+\t\t\t\t\tNLS.str(\"progress.load\"),\n+\t\t\t\t\tjumpCls::loadNode, // load code in background\n+\t\t\t\t\tstatus -> {\n+\t\t\t\t\t\t// search original node in jump class\n+\t\t\t\t\t\tcodeParent.getCodeInfo().getCodeMetadata().searchDown(0, (pos, ann) -> {\n+\t\t\t\t\t\t\tif (ann.getAnnType() == ICodeAnnotation.AnnType.DECLARATION) {\n+\t\t\t\t\t\t\t\tif (((NodeDeclareRef) ann).getNode().equals(cls.getClassNode())) {\n+\t\t\t\t\t\t\t\t\ttabbedPane.codeJump(new JumpPosition(jumpCls, pos));\n+\t\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t});\n+\t\t\t\t\t});\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n \t@Nullable\n \tprivate JNode getSelectedNode() {\n \t\ttry {",
      "parent_sha": "157e702ffd9c9b2aa53a47060369760ff5835824"
    }
  },
  {
    "oid": "23e643c6864a021642da646c51f081df882dc664",
    "message": "fix(gui): attempt to resolve field rename issues with shortcut (#1440)(PR#2075)\n\nThis is an attempt to fix the issues that sometimes arise when renaming functions or variables using the \"n\" shortcut as stated in issue #1440.\r\n\r\nThe reasoning behind the change: The instance creation of the RenameDialog was somehow affecting the UI thread and not allowing for the key release event to be dispatched. By running everything inside the invokeLater block, this might get fixed as it will execute after all previous tasks are finished.\r\nWe now also only show the dialog after EVERYTHING is set up, not before.",
    "date": "2024-01-05T18:42:06Z",
    "url": "https://github.com/skylot/jadx/commit/23e643c6864a021642da646c51f081df882dc664",
    "details": {
      "sha": "de36f0c204575e40f5c1fb123aee76172dd35175",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/dialog/RenameDialog.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/skylot/jadx/blob/23e643c6864a021642da646c51f081df882dc664/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FRenameDialog.java",
      "raw_url": "https://github.com/skylot/jadx/raw/23e643c6864a021642da646c51f081df882dc664/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FRenameDialog.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2Fdialog%2FRenameDialog.java?ref=23e643c6864a021642da646c51f081df882dc664",
      "patch": "@@ -15,6 +15,7 @@\n import javax.swing.JPanel;\n import javax.swing.JPopupMenu;\n import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n import javax.swing.WindowConstants;\n \n import org.jetbrains.annotations.NotNull;\n@@ -42,9 +43,11 @@ public class RenameDialog extends JDialog {\n \tprivate transient JButton renameBtn;\n \n \tpublic static boolean rename(MainWindow mainWindow, JRenameNode node) {\n-\t\tRenameDialog renameDialog = new RenameDialog(mainWindow, node);\n-\t\tUiUtils.uiRun(() -> renameDialog.setVisible(true));\n-\t\tUiUtils.uiRun(renameDialog::initRenameField); // wait for UI events to propagate\n+\t\tSwingUtilities.invokeLater(() -> {\n+\t\t\tRenameDialog renameDialog = new RenameDialog(mainWindow, node);\n+\t\t\trenameDialog.initRenameField();\n+\t\t\trenameDialog.setVisible(true);\n+\t\t});\n \t\treturn true;\n \t}\n ",
      "parent_sha": "faeae086d120f9625023a0d94dae63c90225fce3"
    }
  },
  {
    "oid": "e3189fae37bd54e881d804465854ee8cb8047b10",
    "message": "gui: add deobfuscation button to menu",
    "date": "2015-09-23T19:31:38Z",
    "url": "https://github.com/skylot/jadx/commit/e3189fae37bd54e881d804465854ee8cb8047b10",
    "details": {
      "sha": "afffc143de4d8ad692be18660c60f2ead71bbbe9",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/MainWindow.java",
      "status": "modified",
      "additions": 35,
      "deletions": 16,
      "changes": 51,
      "blob_url": "https://github.com/skylot/jadx/blob/e3189fae37bd54e881d804465854ee8cb8047b10/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java",
      "raw_url": "https://github.com/skylot/jadx/raw/e3189fae37bd54e881d804465854ee8cb8047b10/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java?ref=e3189fae37bd54e881d804465854ee8cb8047b10",
      "patch": "@@ -110,10 +110,13 @@ public class MainWindow extends JFrame {\n \tprivate JRoot treeRoot;\n \tprivate TabbedPane tabbedPane;\n \n-\tprivate JCheckBoxMenuItem flatPkgMenuItem;\n+\tprivate boolean isFlattenPackage;\n \tprivate JToggleButton flatPkgButton;\n+\tprivate JCheckBoxMenuItem flatPkgMenuItem;\n+\n \tprivate JToggleButton deobfToggleBtn;\n-\tprivate boolean isFlattenPackage;\n+\tprivate JCheckBoxMenuItem deobfMenuItem;\n+\n \tprivate Link updateLink;\n \tprivate ProgressPanel progressPane;\n \tprivate BackgroundWorker backgroundWorker;\n@@ -278,6 +281,16 @@ private void setFlattenPackage(boolean value) {\n \t\t}\n \t}\n \n+\tprivate void toggleDeobfuscation() {\n+\t\tboolean deobfOn = !settings.isDeobfuscationOn();\n+\t\tsettings.setDeobfuscationOn(deobfOn);\n+\t\tsettings.sync();\n+\n+\t\tdeobfToggleBtn.setSelected(deobfOn);\n+\t\tdeobfMenuItem.setState(deobfOn);\n+\t\treOpenFile();\n+\t}\n+\n \tprivate void treeClickAction() {\n \t\ttry {\n \t\t\tObject obj = tree.getLastSelectedPathComponent();\n@@ -383,8 +396,8 @@ public void actionPerformed(ActionEvent e) {\n \t\t\t}\n \t\t};\n \t\ttextSearchAction.putValue(Action.SHORT_DESCRIPTION, NLS.str(\"menu.text_search\"));\n-\t\ttextSearchAction.putValue(Action.ACCELERATOR_KEY, getKeyStroke(KeyEvent.VK_F,\n-\t\t\t\tKeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK));\n+\t\ttextSearchAction.putValue(Action.ACCELERATOR_KEY,\n+\t\t\t\tgetKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK));\n \n \t\tAction clsSearchAction = new AbstractAction(NLS.str(\"menu.class_search\"), ICON_FIND) {\n \t\t\t@Override\n@@ -395,6 +408,23 @@ public void actionPerformed(ActionEvent e) {\n \t\tclsSearchAction.putValue(Action.SHORT_DESCRIPTION, NLS.str(\"menu.class_search\"));\n \t\tclsSearchAction.putValue(Action.ACCELERATOR_KEY, getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK));\n \n+\t\tAction deobfAction = new AbstractAction(NLS.str(\"preferences.deobfuscation\"), ICON_DEOBF) {\n+\t\t\t@Override\n+\t\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\t\ttoggleDeobfuscation();\n+\t\t\t}\n+\t\t};\n+\t\tdeobfAction.putValue(Action.SHORT_DESCRIPTION, NLS.str(\"preferences.deobfuscation\"));\n+\t\tdeobfAction.putValue(Action.ACCELERATOR_KEY,\n+\t\t\t\tgetKeyStroke(KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK | KeyEvent.ALT_DOWN_MASK));\n+\n+\t\tdeobfToggleBtn = new JToggleButton(deobfAction);\n+\t\tdeobfToggleBtn.setSelected(settings.isDeobfuscationOn());\n+\t\tdeobfToggleBtn.setText(\"\");\n+\n+\t\tdeobfMenuItem = new JCheckBoxMenuItem(deobfAction);\n+\t\tdeobfMenuItem.setState(settings.isDeobfuscationOn());\n+\n \t\tAction logAction = new AbstractAction(NLS.str(\"menu.log\"), ICON_LOG) {\n \t\t\t@Override\n \t\t\tpublic void actionPerformed(ActionEvent e) {\n@@ -458,6 +488,7 @@ public void actionPerformed(ActionEvent e) {\n \n \t\tJMenu tools = new JMenu(NLS.str(\"menu.tools\"));\n \t\ttools.setMnemonic(KeyEvent.VK_T);\n+\t\ttools.add(deobfMenuItem);\n \t\ttools.add(logAction);\n \n \t\tJMenu help = new JMenu(NLS.str(\"menu.help\"));\n@@ -484,18 +515,6 @@ public void actionPerformed(ActionEvent e) {\n \t\tflatPkgButton.addActionListener(flatPkgAction);\n \t\tflatPkgButton.setToolTipText(NLS.str(\"menu.flatten\"));\n \n-\t\tdeobfToggleBtn = new JToggleButton(ICON_DEOBF);\n-\t\tdeobfToggleBtn.setSelected(settings.isDeobfuscationOn());\n-\t\tdeobfToggleBtn.setToolTipText(NLS.str(\"preferences.deobfuscation\"));\n-\t\tdeobfToggleBtn.addActionListener(new ActionListener() {\n-\t\t\t@Override\n-\t\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\t\tsettings.setDeobfuscationOn(deobfToggleBtn.isSelected());\n-\t\t\t\tsettings.sync();\n-\t\t\t\treOpenFile();\n-\t\t\t}\n-\t\t});\n-\n \t\tupdateLink = new Link(\"\", JadxUpdate.JADX_RELEASES_URL);\n \t\tupdateLink.setVisible(false);\n ",
      "parent_sha": "6d963b378c74b08daca8df91ea113fd1a1a96239"
    }
  },
  {
    "oid": "46eeb0bc22a71d96f8fc18d48061f28fe2766c30",
    "message": "fix(gui): forward navigation shortcut on macOS (#1297)(PR #1301)\n\n* fix: forward navigation shortcut on macOS\r\n* apply suggestion",
    "date": "2021-12-06T13:45:29Z",
    "url": "https://github.com/skylot/jadx/commit/46eeb0bc22a71d96f8fc18d48061f28fe2766c30",
    "details": {
      "sha": "ceff56fa9f63a34397f5fcf2a7e4ecdedffdaa44",
      "filename": "jadx-gui/src/main/java/jadx/gui/ui/MainWindow.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/skylot/jadx/blob/46eeb0bc22a71d96f8fc18d48061f28fe2766c30/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java",
      "raw_url": "https://github.com/skylot/jadx/raw/46eeb0bc22a71d96f8fc18d48061f28fe2766c30/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fui%2FMainWindow.java?ref=46eeb0bc22a71d96f8fc18d48061f28fe2766c30",
      "patch": "@@ -948,7 +948,7 @@ public void actionPerformed(ActionEvent e) {\n \t\t\t}\n \t\t};\n \t\tforwardAction.putValue(Action.SHORT_DESCRIPTION, NLS.str(\"nav.forward\"));\n-\t\tforwardAction.putValue(Action.ACCELERATOR_KEY, getKeyStroke(KeyEvent.VK_RIGHT, KeyEvent.ALT_DOWN_MASK));\n+\t\tforwardAction.putValue(Action.ACCELERATOR_KEY, getKeyStroke(KeyEvent.VK_RIGHT, KeyEvent.ALT_DOWN_MASK, SystemInfo.IS_MAC));\n \n \t\tAction quarkAction = new AbstractAction(\"Quark Engine\", ICON_QUARK) {\n \t\t\t@Override",
      "parent_sha": "6e8baef9b2f9e3f8697ca07df2e3ca7549513325"
    }
  },
  {
    "oid": "982307b1acdf43335ee4980ee524d3cf7aeef4f4",
    "message": "fix(gui): use correct section filter in plugins list",
    "date": "2024-10-25T18:01:43Z",
    "url": "https://github.com/skylot/jadx/commit/982307b1acdf43335ee4980ee524d3cf7aeef4f4",
    "details": {
      "sha": "8e0aaa68a2d01a9570ff827002d163f6b1e6c58f",
      "filename": "jadx-gui/src/main/java/jadx/gui/settings/ui/plugins/PluginSettingsGroup.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/skylot/jadx/blob/982307b1acdf43335ee4980ee524d3cf7aeef4f4/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2Fui%2Fplugins%2FPluginSettingsGroup.java",
      "raw_url": "https://github.com/skylot/jadx/raw/982307b1acdf43335ee4980ee524d3cf7aeef4f4/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2Fui%2Fplugins%2FPluginSettingsGroup.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2Fui%2Fplugins%2FPluginSettingsGroup.java?ref=982307b1acdf43335ee4980ee524d3cf7aeef4f4",
      "patch": "@@ -141,11 +141,11 @@ private static void fillListModel(DefaultListModel<BasePluginListNode> listModel\n \t\t\tList<BasePluginListNode> nodes, List<AvailablePluginNode> available) {\n \t\tlistModel.clear();\n \t\tlistModel.addElement(new TitleNode(\"Installed\"));\n-\t\tnodes.stream().filter(n -> n.getVersion() != null).forEach(listModel::addElement);\n+\t\tnodes.stream().filter(n -> n.getAction() == PluginAction.UNINSTALL).forEach(listModel::addElement);\n \t\tlistModel.addElement(new TitleNode(\"Available\"));\n \t\tlistModel.addAll(available);\n \t\tlistModel.addElement(new TitleNode(\"Bundled\"));\n-\t\tnodes.stream().filter(n -> n.getVersion() == null).forEach(listModel::addElement);\n+\t\tnodes.stream().filter(n -> n.getAction() == PluginAction.NONE).forEach(listModel::addElement);\n \t}\n \n \tprivate void loadAvailablePlugins(DefaultListModel<BasePluginListNode> listModel,",
      "parent_sha": "37054dc84eb9efc3b51a973bb923cb8c53ddca03"
    }
  },
  {
    "oid": "45b37dcd1058f6c744fece9bc9852e96168a0b89",
    "message": "core: fix class name checker execution after deobfuscator (#286)",
    "date": "2018-06-27T13:25:40Z",
    "url": "https://github.com/skylot/jadx/commit/45b37dcd1058f6c744fece9bc9852e96168a0b89",
    "details": {
      "sha": "cd32cedea7132605638a84dcad83a444ccd7be49",
      "filename": "jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/skylot/jadx/blob/45b37dcd1058f6c744fece9bc9852e96168a0b89/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java",
      "raw_url": "https://github.com/skylot/jadx/raw/45b37dcd1058f6c744fece9bc9852e96168a0b89/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fdex%2Fvisitors%2FRenameVisitor.java?ref=45b37dcd1058f6c744fece9bc9852e96168a0b89",
      "patch": "@@ -77,7 +77,8 @@ private void checkClasses(RootNode root, boolean caseSensitive) {\n \n \tprivate void checkClassName(ClassNode cls) {\n \t\tClassInfo classInfo = cls.getClassInfo();\n-\t\tString clsName = classInfo.getAlias().getShortName();\n+\t\tClassInfo alias = classInfo.getAlias();\n+\t\tString clsName = alias.getShortName();\n \t\tString newShortName = null;\n \t\tchar firstChar = clsName.charAt(0);\n \t\tif (Character.isDigit(firstChar)) {\n@@ -86,10 +87,10 @@ private void checkClassName(ClassNode cls) {\n \t\t\tnewShortName = \"C\" + clsName;\n \t\t}\n \t\tif (newShortName != null) {\n-\t\t\tclassInfo.rename(cls.root(), classInfo.makeFullClsName(newShortName, true));\n+\t\t\tclassInfo.rename(cls.root(), alias.makeFullClsName(newShortName, true));\n \t\t}\n-\t\tif (classInfo.getAlias().getPackage().isEmpty()) {\n-\t\t\tString fullName = classInfo.makeFullClsName(classInfo.getAlias().getShortName(), true);\n+\t\tif (alias.getPackage().isEmpty()) {\n+\t\t\tString fullName = alias.makeFullClsName(alias.getShortName(), true);\n \t\t\tString newFullName = Consts.DEFAULT_PACKAGE_NAME + \".\" + fullName;\n \t\t\tclassInfo.rename(cls.root(), newFullName);\n \t\t}",
      "parent_sha": "c0b2230b0bfc8495028ae1404dc92db4991e2f03"
    }
  },
  {
    "oid": "0a08d8b65336053185be4f1a7ffe754417c6c524",
    "message": "fix(gui): NPE if the autosave is enabled and project is initial (PR #565)",
    "date": "2019-04-08T10:05:22Z",
    "url": "https://github.com/skylot/jadx/commit/0a08d8b65336053185be4f1a7ffe754417c6c524",
    "details": {
      "sha": "f1508b499c468801a489c635f034d95faff27f6f",
      "filename": "jadx-gui/src/main/java/jadx/gui/settings/JadxProject.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/skylot/jadx/blob/0a08d8b65336053185be4f1a7ffe754417c6c524/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxProject.java",
      "raw_url": "https://github.com/skylot/jadx/raw/0a08d8b65336053185be4f1a7ffe754417c6c524/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxProject.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxProject.java?ref=0a08d8b65336053185be4f1a7ffe754417c6c524",
      "patch": "@@ -91,11 +91,13 @@ public void saveAs(Path path) {\n \t}\n \n \tpublic void save() {\n-\t\ttry (BufferedWriter writer = Files.newBufferedWriter(getProjectPath())) {\n-\t\t\twriter.write(GSON.toJson(this));\n-\t\t\tsaved = true;\n-\t\t} catch (Exception e) {\n-\t\t\tLOG.error(\"Error saving project\", e);\n+\t\tif (getProjectPath() != null) {\n+\t\t\ttry (BufferedWriter writer = Files.newBufferedWriter(getProjectPath())) {\n+\t\t\t\twriter.write(GSON.toJson(this));\n+\t\t\t\tsaved = true;\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tLOG.error(\"Error saving project\", e);\n+\t\t\t}\n \t\t}\n \t}\n ",
      "parent_sha": "7b18d3a3a85ee030da59438436b8d7012796341a"
    }
  },
  {
    "oid": "ac1d1a585881805f5cb56088fb3a4cd551f27cbc",
    "message": "fix(gui): disable all components on saving the settings (PR #586)",
    "date": "2019-04-12T15:10:16Z",
    "url": "https://github.com/skylot/jadx/commit/ac1d1a585881805f5cb56088fb3a4cd551f27cbc",
    "details": {
      "sha": "157c51769d3e4f3d20fa16f257df73182a5c253e",
      "filename": "jadx-gui/src/main/java/jadx/gui/settings/JadxSettingsWindow.java",
      "status": "modified",
      "additions": 25,
      "deletions": 12,
      "changes": 37,
      "blob_url": "https://github.com/skylot/jadx/blob/ac1d1a585881805f5cb56088fb3a4cd551f27cbc/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsWindow.java",
      "raw_url": "https://github.com/skylot/jadx/raw/ac1d1a585881805f5cb56088fb3a4cd551f27cbc/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsWindow.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-gui%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fgui%2Fsettings%2FJadxSettingsWindow.java?ref=ac1d1a585881805f5cb56088fb3a4cd551f27cbc",
      "patch": "@@ -83,18 +83,22 @@ private void initUI() {\n \t\tJButton saveBtn = new JButton(NLS.str(\"preferences.save\"));\n \t\tsaveBtn.addActionListener(event -> {\n \t\t\tsettings.sync();\n-\t\t\tif (needReload) {\n-\t\t\t\tmainWindow.reOpenFile();\n-\t\t\t}\n-\t\t\tif (!settings.getLangLocale().equals(prevLang)) {\n-\t\t\t\tJOptionPane.showMessageDialog(\n-\t\t\t\t\t\tthis,\n-\t\t\t\t\t\tNLS.str(\"msg.language_changed\", settings.getLangLocale()),\n-\t\t\t\t\t\tNLS.str(\"msg.language_changed_title\", settings.getLangLocale()),\n-\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE\n-\t\t\t\t);\n-\t\t\t}\n-\t\t\tdispose();\n+\t\t\tenableComponents(this, false);\n+\n+\t\t\tSwingUtilities.invokeLater(() -> {\n+\t\t\t\tif (needReload) {\n+\t\t\t\t\tmainWindow.reOpenFile();\n+\t\t\t\t}\n+\t\t\t\tif (!settings.getLangLocale().equals(prevLang)) {\n+\t\t\t\t\tJOptionPane.showMessageDialog(\n+\t\t\t\t\t\t\tthis,\n+\t\t\t\t\t\t\tNLS.str(\"msg.language_changed\", settings.getLangLocale()),\n+\t\t\t\t\t\t\tNLS.str(\"msg.language_changed_title\", settings.getLangLocale()),\n+\t\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE\n+\t\t\t\t\t\t\t);\n+\t\t\t\t}\n+\t\t\t\tdispose();\n+\t\t\t});\n \t\t});\n \t\tJButton cancelButton = new JButton(NLS.str(\"preferences.cancel\"));\n \t\tcancelButton.addActionListener(event -> {\n@@ -139,6 +143,15 @@ private void initUI() {\n \t\tgetRootPane().setDefaultButton(saveBtn);\n \t}\n \n+\tprivate static void enableComponents(Container container, boolean enable) {\n+        for (Component component : container.getComponents()) {\n+            if (component instanceof Container) {\n+                enableComponents((Container) component, enable);\n+            }\n+            component.setEnabled(enable);\n+        }\n+    }\n+\n \tprivate SettingsGroup makeDeobfuscationGroup() {\n \t\tJCheckBox deobfOn = new JCheckBox();\n \t\tdeobfOn.setSelected(settings.isDeobfuscationOn());",
      "parent_sha": "74a72a5ce01ea9b81353ef39ab40a9f18e7bb18d"
    }
  },
  {
    "oid": "61684ea73d525e4a5a104928d9419363d44053e4",
    "message": "Prevent adding duplicate ids for resource entries with different entry configs",
    "date": "2018-06-27T16:55:24Z",
    "url": "https://github.com/skylot/jadx/commit/61684ea73d525e4a5a104928d9419363d44053e4",
    "details": {
      "sha": "c24f2a08a4d46cbfe78d0cb878ba7b559be2547b",
      "filename": "jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/skylot/jadx/blob/61684ea73d525e4a5a104928d9419363d44053e4/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java",
      "raw_url": "https://github.com/skylot/jadx/raw/61684ea73d525e4a5a104928d9419363d44053e4/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fxmlgen%2FResTableParser.java?ref=61684ea73d525e4a5a104928d9419363d44053e4",
      "patch": "@@ -3,7 +3,9 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -89,10 +91,13 @@ public CodeWriter makeXmlDump() {\n \t\twriter.startLine(\"<resources>\");\n \t\twriter.incIndent();\n \n+\t\tSet<String> addedValues = new HashSet<>();\n \t\tfor (ResourceEntry ri : resStorage.getResources()) {\n-\t\t\tString format = String.format(\"<public type=\\\"%s\\\" name=\\\"%s\\\" id=\\\"%s\\\" />\",\n-\t\t\t\t\tri.getTypeName(), ri.getKeyName(), ri.getId());\n-\t\t\twriter.startLine(format);\n+\t\t\tif(addedValues.add(ri.getTypeName() + \".\" + ri.getKeyName())) {\n+\t\t\t\tString format = String.format(\"<public type=\\\"%s\\\" name=\\\"%s\\\" id=\\\"%s\\\" />\",\n+\t\t\t\t\t\tri.getTypeName(), ri.getKeyName(), ri.getId());\n+\t\t\t\twriter.startLine(format);\n+\t\t\t}\n \t\t}\n \t\twriter.decIndent();\n \t\twriter.startLine(\"</resources>\");",
      "parent_sha": "45b37dcd1058f6c744fece9bc9852e96168a0b89"
    }
  },
  {
    "oid": "9e9270a8b7b9c32d9018d1492d4ff01125061ae0",
    "message": "core: fix type inference StackOverflowError",
    "date": "2018-05-01T13:29:50Z",
    "url": "https://github.com/skylot/jadx/commit/9e9270a8b7b9c32d9018d1492d4ff01125061ae0",
    "details": {
      "sha": "6143e23c10f66fc2030d0d1f80c91192e31d0b61",
      "filename": "jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/skylot/jadx/blob/9e9270a8b7b9c32d9018d1492d4ff01125061ae0/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fclsp%2FClspGraph.java",
      "raw_url": "https://github.com/skylot/jadx/raw/9e9270a8b7b9c32d9018d1492d4ff01125061ae0/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fclsp%2FClspGraph.java",
      "contents_url": "https://api.github.com/repos/skylot/jadx/contents/jadx-core%2Fsrc%2Fmain%2Fjava%2Fjadx%2Fcore%2Fclsp%2FClspGraph.java?ref=9e9270a8b7b9c32d9018d1492d4ff01125061ae0",
      "patch": "@@ -120,9 +120,11 @@ private Set<String> getAncestors(String clsName) {\n \t}\n \n \tprivate void addAncestorsNames(NClass cls, Set<String> result) {\n-\t\tresult.add(cls.getName());\n-\t\tfor (NClass p : cls.getParents()) {\n-\t\t\taddAncestorsNames(p, result);\n+\t\tboolean isNew = result.add(cls.getName());\n+\t\tif (isNew) {\n+\t\t\tfor (NClass p : cls.getParents()) {\n+\t\t\t\taddAncestorsNames(p, result);\n+\t\t\t}\n \t\t}\n \t}\n ",
      "parent_sha": "2c904c56f45182f93f48471750b171066ae34dd2"
    }
  }
]