[
  {
    "oid": "4fbd9380dee44658f5c554d9839ffd8f959eeda8",
    "message": "Update MailUtils.java\n\nif there is no receivers && no receiversCc, no need to process",
    "date": "2019-04-11T09:19:42Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/4fbd9380dee44658f5c554d9839ffd8f959eeda8",
    "details": {
      "sha": "0e514ffee6e38bceb007fd563aef4495c15f59c7",
      "filename": "escheduler-alert/src/main/java/cn/escheduler/alert/utils/MailUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/4fbd9380dee44658f5c554d9839ffd8f959eeda8/escheduler-alert%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Falert%2Futils%2FMailUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/4fbd9380dee44658f5c554d9839ffd8f959eeda8/escheduler-alert%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Falert%2Futils%2FMailUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-alert%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Falert%2Futils%2FMailUtils.java?ref=4fbd9380dee44658f5c554d9839ffd8f959eeda8",
      "patch": "@@ -102,16 +102,15 @@ public static Map<String,Object> sendMails(Collection<String> receivers, String\n      */\n     public static Map<String,Object> sendMails(Collection<String> receivers, Collection<String> receiversCc, String title, String content, ShowType showType) {\n         Map<String,Object> retMap = new HashMap<>();\n-\n-        receivers.removeIf((from) -> (StringUtils.isEmpty(from)));\n-\n+        retMap.put(Constants.STATUS, false);\n+        \n         // if there is no receivers && no receiversCc, no need to process\n         if (CollectionUtils.isEmpty(receivers) && CollectionUtils.isEmpty(receiversCc)) {\n-            retMap.put(Constants.STATUS, true);\n             return retMap;\n         }\n \n-        retMap.put(Constants.STATUS, false);\n+        receivers.removeIf((from) -> (StringUtils.isEmpty(from)));\n+        \n         if (showType == ShowType.TABLE || showType == ShowType.TEXT){\n             // send email\n             HtmlEmail email = new HtmlEmail();",
      "parent_sha": "2714cb1e6d408fd7f108733507ccef3ffc16af22"
    }
  },
  {
    "oid": "110de68fccd04e637fa44541538a13cfa02047f0",
    "message": "fix Stirng format bug",
    "date": "2019-12-27T04:05:34Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/110de68fccd04e637fa44541538a13cfa02047f0",
    "details": {
      "sha": "5b937ce46d825da019cd25bcbf5dfe9d92550471",
      "filename": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/AbstractZKClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/110de68fccd04e637fa44541538a13cfa02047f0/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fzk%2FAbstractZKClient.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/110de68fccd04e637fa44541538a13cfa02047f0/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fzk%2FAbstractZKClient.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fzk%2FAbstractZKClient.java?ref=110de68fccd04e637fa44541538a13cfa02047f0",
      "patch": "@@ -461,7 +461,7 @@ protected boolean checkServerSelfDead(String serverHost, ZKNodeType zkNodeType)\n \t\tif (serverHost.equals(OSUtils.getHost())) {\n \t\t\tlogger.error(\"{} server({}) of myself dead , stopping...\",\n \t\t\t\t\tzkNodeType.toString(), serverHost);\n-\t\t\tstoppable.stop(String.format(\" {} server {} of myself dead , stopping...\",\n+\t\t\tstoppable.stop(String.format(\" %s server %s of myself dead , stopping...\",\n \t\t\t\t\tzkNodeType.toString(), serverHost));\n \t\t\treturn true;\n \t\t}",
      "parent_sha": "9a7f262deee1be4df60d37f1d7f4c10830a1eb0d"
    }
  },
  {
    "oid": "57c80f2af5d1f29417fdbea09b27221f54987655",
    "message": "[Fix-16382] Fix the bug of async master task casthread pool invocations ramp-up",
    "date": "2024-08-15T12:46:51Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/57c80f2af5d1f29417fdbea09b27221f54987655",
    "details": {
      "sha": "14ec0918865fc250b5306d4c046db8aa7f3a4fc9",
      "filename": "dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/AsyncTaskExecutionContext.java",
      "status": "modified",
      "additions": 4,
      "deletions": 15,
      "changes": 19,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/57c80f2af5d1f29417fdbea09b27221f54987655/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2Fexecute%2FAsyncTaskExecutionContext.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/57c80f2af5d1f29417fdbea09b27221f54987655/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2Fexecute%2FAsyncTaskExecutionContext.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2Fexecute%2FAsyncTaskExecutionContext.java?ref=57c80f2af5d1f29417fdbea09b27221f54987655",
      "patch": "@@ -18,7 +18,6 @@\n package org.apache.dolphinscheduler.server.master.runner.execute;\n \n import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;\n-import org.apache.dolphinscheduler.plugin.task.api.enums.TaskTimeoutStrategy;\n \n import java.util.concurrent.Delayed;\n import java.util.concurrent.TimeUnit;\n@@ -38,7 +37,6 @@ public class AsyncTaskExecutionContext implements Delayed {\n     private long currentStartTime;\n     private int executeTimes;\n     private final long executeInterval;\n-    private long timeout;\n \n     public AsyncTaskExecutionContext(@NonNull TaskExecutionContext taskExecutionContext,\n                                      @NonNull AsyncTaskExecuteFunction asyncTaskExecuteFunction,\n@@ -48,29 +46,20 @@ public AsyncTaskExecutionContext(@NonNull TaskExecutionContext taskExecutionCont\n         this.asyncTaskCallbackFunction = asyncTaskCallbackFunction;\n         this.currentStartTime = 0;\n         this.executeTimes = 0;\n-        if (TaskTimeoutStrategy.FAILED.equals(taskExecutionContext.getTaskTimeoutStrategy())\n-                || TaskTimeoutStrategy.WARNFAILED.equals(taskExecutionContext.getTaskTimeoutStrategy())) {\n-            // will timeout\n-            this.timeout = taskExecutionContext.getStartTime()\n-                    + TimeUnit.SECONDS.toMillis(taskExecutionContext.getTaskTimeout());\n-        } else {\n-            this.timeout = TimeUnit.SECONDS.toMillis(Integer.MAX_VALUE);\n-        }\n         this.executeInterval = Math.max(asyncTaskExecuteFunction.getAsyncTaskStateCheckInterval().toMillis(), 1000L);\n     }\n \n-    public void refreshStartTime() {\n-        if (executeTimes == 0) {\n+    public synchronized void refreshStartTime() {\n+        if (executeTimes != 0) {\n             // The first time doesn't have delay\n-            executeTimes++;\n-        } else {\n             currentStartTime = System.currentTimeMillis();\n         }\n+        executeTimes++;\n     }\n \n     @Override\n     public long getDelay(TimeUnit unit) {\n-        long nextExecuteTimeDelay = Math.min(currentStartTime + executeInterval, timeout) - System.currentTimeMillis();\n+        long nextExecuteTimeDelay = currentStartTime + executeInterval - System.currentTimeMillis();\n         return unit.convert(nextExecuteTimeDelay, TimeUnit.MILLISECONDS);\n     }\n ",
      "parent_sha": "b47732c140c69647f93e3aebc66e2202f69e5388"
    }
  },
  {
    "oid": "7586710d49ea86a22798a3f401a875e2f8669dbc",
    "message": "[fix-13625] Modify systemd-run from MemoryMax to MemoryLimit for more generality (#13627)\n\nCo-authored-by: xiecao <haolong.zhl@alibaba-inc.com>",
    "date": "2023-02-28T06:17:54Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/7586710d49ea86a22798a3f401a875e2f8669dbc",
    "details": {
      "sha": "c80898744bace96a2f8fb3b74e1e4a611375e4e9",
      "filename": "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/7586710d49ea86a22798a3f401a875e2f8669dbc/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2FAbstractCommandExecutor.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/7586710d49ea86a22798a3f401a875e2f8669dbc/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2FAbstractCommandExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2FAbstractCommandExecutor.java?ref=7586710d49ea86a22798a3f401a875e2f8669dbc",
      "patch": "@@ -155,7 +155,7 @@ private void buildProcess(String commandFile) throws IOException {\n \n     /**\n      * generate systemd command.\n-     * eg: sudo systemd-run -q --scope -p CPUQuota=100% -p MemoryMax=200M --uid=root\n+     * eg: sudo systemd-run -q --scope -p CPUQuota=100% -p MemoryLimit=200M --uid=root\n      * @param command command\n      */\n     private void generateCgroupCommand(List<String> command) {\n@@ -175,12 +175,13 @@ private void generateCgroupCommand(List<String> command) {\n             command.add(String.format(\"CPUQuota=%s%%\", taskRequest.getCpuQuota()));\n         }\n \n+        // use `man systemd.resource-control` to find available parameter\n         if (memoryMax == -1) {\n             command.add(\"-p\");\n-            command.add(String.format(\"MemoryMax=%s\", \"infinity\"));\n+            command.add(String.format(\"MemoryLimit=%s\", \"infinity\"));\n         } else {\n             command.add(\"-p\");\n-            command.add(String.format(\"MemoryMax=%sM\", taskRequest.getMemoryMax()));\n+            command.add(String.format(\"MemoryLimit=%sM\", taskRequest.getMemoryMax()));\n         }\n \n         command.add(String.format(\"--uid=%s\", taskRequest.getTenantCode()));",
      "parent_sha": "c1fd1cba1ba64dc3b8165d171d60d1f1bb39319e"
    }
  },
  {
    "oid": "ca6872a9a7f51f22142786a3f1c1418e4eb8b99b",
    "message": "fix\uff1aDepend check bug (#2229)\n\n* fix\uff1a#1787\n\n* fix\uff1a#1787",
    "date": "2020-03-20T13:27:52Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/ca6872a9a7f51f22142786a3f1c1418e4eb8b99b",
    "details": {
      "sha": "3ef795938f49161491dace9d956bb6c015c0135f",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/ca6872a9a7f51f22142786a3f1c1418e4eb8b99b/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/ca6872a9a7f51f22142786a3f1c1418e4eb8b99b/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java?ref=ca6872a9a7f51f22142786a3f1c1418e4eb8b99b",
      "patch": "@@ -674,9 +674,9 @@ private DependResult isTaskDepsComplete(String taskName) {\n         TaskNode taskNode = dag.getNode(taskName);\n         List<String> depNameList = taskNode.getDepList();\n         for(String depsNode : depNameList ){\n-\n-            if(forbiddenTaskList.containsKey(depsNode) ||\n-                    skipTaskNodeList.containsKey(depsNode)){\n+            if(!dag.containsNode(depsNode)\n+                    || forbiddenTaskList.containsKey(depsNode)\n+                    || skipTaskNodeList.containsKey(depsNode)){\n                 continue;\n             }\n             // dependencies must be fully completed",
      "parent_sha": "4318e860d5c05ecb2a34b9c29eb75afce6cba727"
    }
  },
  {
    "oid": "01a2b9684a4c6478ca4aea74b2307558c57468a7",
    "message": "Update ProcessDefinitionServiceImpl.java (#7470)\n\nfix typos for logger.error",
    "date": "2021-12-18T06:12:39Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/01a2b9684a4c6478ca4aea74b2307558c57468a7",
    "details": {
      "sha": "8b2b4c2dc3d843505a13dd0726121f3a0180e0dc",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/01a2b9684a4c6478ca4aea74b2307558c57468a7/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FProcessDefinitionServiceImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/01a2b9684a4c6478ca4aea74b2307558c57468a7/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FProcessDefinitionServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FProcessDefinitionServiceImpl.java?ref=01a2b9684a4c6478ca4aea74b2307558c57468a7",
      "patch": "@@ -308,7 +308,7 @@ private Map<String, Object> checkTaskRelationList(List<ProcessTaskRelationLog> t\n                 Set<Long> taskNodeCodes = taskNodeList.stream().map(TaskNode::getCode).collect(Collectors.toSet());\n                 Collection<Long> codes = CollectionUtils.subtract(postTaskCodes, taskNodeCodes);\n                 if (CollectionUtils.isNotEmpty(codes)) {\n-                    logger.error(\"the task code is not exit\");\n+                    logger.error(\"the task code is not exist\");\n                     putMsg(result, Status.TASK_DEFINE_NOT_EXIST, org.apache.commons.lang.StringUtils.join(codes, Constants.COMMA));\n                     return result;\n                 }",
      "parent_sha": "92bbb9e4af3fb6132331828282bbe6e4bb97040d"
    }
  },
  {
    "oid": "a65cb48191b81faea7c200f989ce5ff181d5aee1",
    "message": "always send emails no matter there are results (#3015)\n\n* always send emails no matter there are results\r\n\r\n* always send emails no matter there are results",
    "date": "2020-06-19T06:50:10Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/a65cb48191b81faea7c200f989ce5ff181d5aee1",
    "details": {
      "sha": "4781143c9d2dbf068a433241f0be53bf4c5c04b2",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java",
      "status": "modified",
      "additions": 3,
      "deletions": 10,
      "changes": 13,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/a65cb48191b81faea7c200f989ce5ff181d5aee1/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/a65cb48191b81faea7c200f989ce5ff181d5aee1/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java?ref=a65cb48191b81faea7c200f989ce5ff181d5aee1",
      "patch": "@@ -270,16 +270,9 @@ private void resultProcess(ResultSet resultSet) throws Exception{\n         String result = JSONUtils.toJsonString(resultJSONArray);\n         logger.debug(\"execute sql : {}\", result);\n \n-        // if there is a result set\n-        if (!resultJSONArray.isEmpty(null) ) {\n-            if (StringUtils.isNotEmpty(sqlParameters.getTitle())) {\n-                sendAttachment(sqlParameters.getTitle(),\n-                        JSONUtils.toJsonString(resultJSONArray));\n-            }else{\n-                sendAttachment(taskExecutionContext.getTaskName() + \" query resultsets \",\n-                        JSONUtils.toJsonString(resultJSONArray));\n-            }\n-        }\n+        sendAttachment(StringUtils.isNotEmpty(sqlParameters.getTitle()) ?\n+                        sqlParameters.getTitle(): taskExecutionContext.getTaskName() + \" query result sets\",\n+                JSONUtils.toJsonString(resultJSONArray));\n     }\n \n     /**",
      "parent_sha": "eef397675b72ad894b08045305435e0ef5946f7e"
    }
  },
  {
    "oid": "af996be47b53bce5e55a118e5a4b83d0f51fb27c",
    "message": "Update ShellCommandExecutorTest.java",
    "date": "2021-01-30T06:15:37Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/af996be47b53bce5e55a118e5a4b83d0f51fb27c",
    "details": {
      "sha": "5aaeac866b37cc0f055951da91e248ee023eb554",
      "filename": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/af996be47b53bce5e55a118e5a4b83d0f51fb27c/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fshell%2FShellCommandExecutorTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/af996be47b53bce5e55a118e5a4b83d0f51fb27c/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fshell%2FShellCommandExecutorTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fshell%2FShellCommandExecutorTest.java?ref=af996be47b53bce5e55a118e5a4b83d0f51fb27c",
      "patch": "@@ -15,7 +15,7 @@\n  * limitations under the License.\n  */\n package org.apache.dolphinscheduler.server.worker.shell;\n-\n+import java.lang.reflect.Method;\n import com.alibaba.fastjson.JSON;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.ExecutionStatus;\n@@ -38,7 +38,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n-import java.lang.reflect.Method;\n import java.util.Date;\n \n /**",
      "parent_sha": "f5f3f8972d718467fec7e78d17d4d6a8c4d53553"
    }
  },
  {
    "oid": "7d2b9e5925e7a2dd3893409c4f08cfba1428f2f7",
    "message": "remove the auth for query list.",
    "date": "2019-07-02T06:58:34Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/7d2b9e5925e7a2dd3893409c4f08cfba1428f2f7",
    "details": {
      "sha": "555275273f889af9df9800d13e1d2bd001b8740d",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/service/TenantService.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/7d2b9e5925e7a2dd3893409c4f08cfba1428f2f7/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FTenantService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/7d2b9e5925e7a2dd3893409c4f08cfba1428f2f7/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FTenantService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FTenantService.java?ref=7d2b9e5925e7a2dd3893409c4f08cfba1428f2f7",
      "patch": "@@ -125,9 +125,9 @@ public Map<String,Object> createTenant(User loginUser,\n   public Map<String,Object> queryTenantList(User loginUser, String searchVal, Integer pageNo, Integer pageSize) {\n \n     Map<String, Object> result = new HashMap<>(5);\n-//    if (checkAdmin(loginUser, result)) {\n-//      return result;\n-//    }\n+    if (checkAdmin(loginUser, result)) {\n+      return result;\n+    }\n \n     Integer count = tenantMapper.countTenantPaging(searchVal);\n \n@@ -269,9 +269,9 @@ public Map<String, Object> deleteTenantById(User loginUser, int id) throws Excep\n   public Map<String, Object> queryTenantList(User loginUser) {\n \n     Map<String, Object> result = new HashMap<>(5);\n-    if (checkAdmin(loginUser, result)) {\n-      return result;\n-    }\n+//    if (checkAdmin(loginUser, result)) {\n+//      return result;\n+//    }\n \n     List<Tenant> resourceList = tenantMapper.queryAllTenant();\n     result.put(Constants.DATA_LIST, resourceList);",
      "parent_sha": "671c296da6b3469b23685723738476e7170f8102"
    }
  },
  {
    "oid": "138eab6eb3003ef1c3dbaf25528c9050ca5c2ffc",
    "message": "fix import (#12529)",
    "date": "2022-10-25T13:39:06Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/138eab6eb3003ef1c3dbaf25528c9050ca5c2ffc",
    "details": {
      "sha": "531290ff855804e7a93ed04d473bfeab82d79d3b",
      "filename": "dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptSender.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/138eab6eb3003ef1c3dbaf25528c9050ca5c2ffc/dolphinscheduler-alert%2Fdolphinscheduler-alert-plugins%2Fdolphinscheduler-alert-script%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Falert%2Fscript%2FScriptSender.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/138eab6eb3003ef1c3dbaf25528c9050ca5c2ffc/dolphinscheduler-alert%2Fdolphinscheduler-alert-plugins%2Fdolphinscheduler-alert-script%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Falert%2Fscript%2FScriptSender.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-alert%2Fdolphinscheduler-alert-plugins%2Fdolphinscheduler-alert-script%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Falert%2Fscript%2FScriptSender.java?ref=138eab6eb3003ef1c3dbaf25528c9050ca5c2ffc",
      "patch": "@@ -18,7 +18,8 @@\n package org.apache.dolphinscheduler.plugin.alert.script;\n \n import org.apache.dolphinscheduler.alert.api.AlertResult;\n-import org.apache.dolphinscheduler.spi.utils.StringUtils;\n+\n+import org.apache.commons.lang3.StringUtils;\n \n import java.io.File;\n import java.util.Map;",
      "parent_sha": "f5c814f23b93b69aafb4e5a4302b813c9454c5e8"
    }
  },
  {
    "oid": "cca1c4a17292e2a71d39be4ce4d828eed75d4a5c",
    "message": "fix can't stop bug (#15191)\n\nCo-authored-by: Leoric Yue <leoric.yue@zoom.us>",
    "date": "2023-11-20T13:02:44Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/cca1c4a17292e2a71d39be4ce4d828eed75d4a5c",
    "details": {
      "sha": "018cff565ae42cb25ff2f40a8ef007a920ca35e9",
      "filename": "dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/WorkflowStateEventHandler.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/cca1c4a17292e2a71d39be4ce4d828eed75d4a5c/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fevent%2FWorkflowStateEventHandler.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/cca1c4a17292e2a71d39be4ce4d828eed75d4a5c/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fevent%2FWorkflowStateEventHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fevent%2FWorkflowStateEventHandler.java?ref=cca1c4a17292e2a71d39be4ce4d828eed75d4a5c",
      "patch": "@@ -63,10 +63,13 @@ public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,\n             }\n             workflowExecuteRunnable.endProcess();\n         }\n-        if (processInstance.getState().isReadyStop()) {\n-            workflowExecuteRunnable.killAllTasks();\n-        }\n \n+        if (workflowStateEvent.getStatus().isReadyStop()) {\n+            workflowExecuteRunnable.refreshProcessInstance(processInstance.getId());\n+            if (processInstance.getState().isReadyStop()) {\n+                workflowExecuteRunnable.killAllTasks();\n+            }\n+        }\n         return true;\n     }\n ",
      "parent_sha": "9be81be32824c5e639cf98fcecdcf49e9b1d23f9"
    }
  },
  {
    "oid": "cb55476235c6a5d5fddfa24f5944e2cc8aeae390",
    "message": "[Fix-14721] [K8S Task] Handle job delete event when user manually delete the job in k8s cluster (#14722)\n\nCo-authored-by: Jay Chung <zhongjiajie955@gmail.com>",
    "date": "2023-08-11T09:15:07Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/cb55476235c6a5d5fddfa24f5944e2cc8aeae390",
    "details": {
      "sha": "d799978763f93d63fb1b71b193103dc2910933cf",
      "filename": "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/impl/K8sTaskExecutor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/cb55476235c6a5d5fddfa24f5944e2cc8aeae390/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2Fk8s%2Fimpl%2FK8sTaskExecutor.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/cb55476235c6a5d5fddfa24f5944e2cc8aeae390/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2Fk8s%2Fimpl%2FK8sTaskExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2Fk8s%2Fimpl%2FK8sTaskExecutor.java?ref=cb55476235c6a5d5fddfa24f5944e2cc8aeae390",
      "patch": "@@ -198,7 +198,11 @@ public void eventReceived(Action action, Job job) {\n                         final LogUtils.MDCAutoClosableContext mdcAutoClosableContext =\n                                 LogUtils.setTaskInstanceLogFullPathMDC(taskRequest.getLogPath())) {\n                     log.info(\"event received : job:{} action:{}\", job.getMetadata().getName(), action);\n-                    if (action != Action.ADDED) {\n+                    if (action == Action.DELETED) {\n+                        log.error(\"[K8sJobExecutor-{}] fail in k8s\", job.getMetadata().getName());\n+                        taskResponse.setExitStatusCode(EXIT_CODE_FAILURE);\n+                        countDownLatch.countDown();\n+                    } else if (action != Action.ADDED) {\n                         int jobStatus = getK8sJobStatus(job);\n                         log.info(\"job {} status {}\", job.getMetadata().getName(), jobStatus);\n                         if (jobStatus == TaskConstants.RUNNING_CODE) {",
      "parent_sha": "8e64026e93ed5451ade1d16549290028cc3fb0d9"
    }
  },
  {
    "oid": "d1b115c1cf6cc6d4798fedf42b45278ea8ea9e5f",
    "message": "change desc to description. (#1082)\n\n* update english documents\r\n\r\n* refactor zk client\r\n\r\n* update documents\r\n\r\n* update zkclient\r\n\r\n* update zkclient\r\n\r\n* update documents\r\n\r\n* add architecture-design\r\n\r\n* change i18n\r\n\r\n* update i18n\r\n\r\n* update english documents\r\n\r\n* add architecture-design\r\n\r\n* update english documents\r\n\r\n* update en-US documents\r\n\r\n* add architecture-design\r\n\r\n* update demo site\r\n\r\n* add mybatis plus model\r\n\r\n* modify mybatisplus\r\n\r\n* modify mybatisplus\r\n\r\n* change interface by mybatisplus\r\n\r\n* add unit test\r\n\r\n* refactor dao interface.\r\n\r\n* add unit test for dao...\r\n\r\n* add unit test for dao...\r\n\r\n* add unit test for dao...\r\n\r\n* Merge remote-tracking branch 'upstream/dev-db' into dev-db\r\n\r\n# Conflicts:\r\n#\tdolphinscheduler-dao/src/main/resources/cn.escheduler.dao.mapper/ProjectMapper.xml\r\n#\tdolphinscheduler-dao/src/main/resources/cn.escheduler.dao.mapper/ScheduleMapper.xml\r\n#\tescheduler-dao/src/main/resources/cn.escheduler.dao.mapper/ProcessInstanceMapper.xml\r\n#\tescheduler-dao/src/main/resources/cn.escheduler.dao.mapper/ProjectUserMapper.xml\r\n#\tescheduler-dao/src/main/resources/cn.escheduler.dao.mapper/QueueMapper.xml\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/ProcessInstanceMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/ProjectUserMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/QueueMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/ResourceUserMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/ScheduleMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/SessionMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/TenantMapperTest.java\r\n\r\n* Merge remote-tracking branch 'upstream/dev-db' into dev-db\r\n\r\n# Conflicts:\r\n#\tdolphinscheduler-dao/src/main/resources/cn.escheduler.dao.mapper/ProjectMapper.xml\r\n#\tdolphinscheduler-dao/src/main/resources/cn.escheduler.dao.mapper/ScheduleMapper.xml\r\n#\tescheduler-dao/src/main/resources/cn.escheduler.dao.mapper/ProcessInstanceMapper.xml\r\n#\tescheduler-dao/src/main/resources/cn.escheduler.dao.mapper/ProjectUserMapper.xml\r\n#\tescheduler-dao/src/main/resources/cn.escheduler.dao.mapper/QueueMapper.xml\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/ProcessInstanceMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/ProjectUserMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/QueueMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/ResourceUserMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/ScheduleMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/SessionMapperTest.java\r\n#\tescheduler-dao/src/test/java/cn/escheduler/dao/mapper/TenantMapperTest.java\r\n\r\n* Merge remote-tracking branch 'upstream/dev-db' into dev-db\r\n\r\n# Conflicts:\r\n#\tdolphinscheduler-dao/src/main/resources/org/apache/dolphinscheduler/dao/mapper/ProjectMapper.xml\r\n#\tdolphinscheduler-dao/src/main/resources/org/apache/dolphinscheduler/dao/mapper/ResourceMapper.xml\r\n#\tdolphinscheduler-dao/src/main/resources/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.xml\r\n\r\n* update some dao bugs\r\n\r\n* update for some bugs\r\n\r\n* update some bugs\r\n\r\n* Merge remote-tracking branch 'upstream/dev-db' into dev-db\r\n\r\n# Conflicts:\r\n#\tdolphinscheduler-dao/src/main/resources/org/apache/dolphinscheduler/dao/mapper/ProjectMapper.xml\r\n#\tdolphinscheduler-dao/src/main/resources/org/apache/dolphinscheduler/dao/mapper/ResourceMapper.xml\r\n#\tdolphinscheduler-dao/src/main/resources/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.xml\r\n\r\n* update\r\n\r\n* update\r\n\r\n* add multiply settings for application.yml\r\n\r\n* add multiply settings for application.yml\r\n\r\n* revert\r\n\r\n* update configuration settings in task record dao...\r\n\r\n* change application_master to application-master\r\n\r\n* change application_master to application-master\r\n\r\n* update application.yml to application.properties\r\n\r\n* revert\r\n\r\n* revert\r\n\r\n* add properties\r\n\r\n* add properties\r\n\r\n* revert\r\n\r\n* revert\r\n\r\n* add api start up..\r\nadd alert send try catch\r\n\r\n* update dao info level\r\n\r\n* fix bug: task cannot submit when recovery failover\r\n\r\n* fix bug: task cannot submit when recovery failover\r\n\r\n* merge from dev-db\r\n\r\n* revert\r\n\r\n* revert\r\n\r\n* fix bug: get process definition list failed.\r\n\r\n* fix bug: process instance interval is error\r\n\r\n* revert\r\n\r\n* revert\r\n\r\n* update\r\n\r\n* support stop submit success tasks\r\n\r\n* update kill process\r\n\r\n* update for stop process\r\n\r\n* update for stop process\r\n\r\n* add some logs for stop process\r\n\r\n* update for small bug.\r\n\r\n* add check strategy before submit task\r\n\r\n* revert\r\n\r\n* update\r\n\r\n* update\r\n\r\n* revert\r\n\r\n* wait task instance exists if null.\r\n\r\n* revert\r\n\r\n* update\r\n\r\n* change desc to description.\r\n\r\n* add check user and definitions function when delete tenant\r\n\r\n* update\r\n\r\n* change desc to description.\r\n\r\n* change desc to description.",
    "date": "2019-10-23T10:04:18Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/d1b115c1cf6cc6d4798fedf42b45278ea8ea9e5f",
    "details": {
      "sha": "14dfc888913f3da68532b576ef833ed9b865cc36",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/d1b115c1cf6cc6d4798fedf42b45278ea8ea9e5f/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fcontroller%2FResourcesController.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/d1b115c1cf6cc6d4798fedf42b45278ea8ea9e5f/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fcontroller%2FResourcesController.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fcontroller%2FResourcesController.java?ref=d1b115c1cf6cc6d4798fedf42b45278ea8ea9e5f",
      "patch": "@@ -65,26 +65,26 @@ public class ResourcesController extends BaseController{\n      *\n      * @param loginUser\n      * @param alias\n-     * @param desc\n+     * @param description\n      * @param file\n      */\n     @ApiOperation(value = \"createResource\", notes= \"CREATE_RESOURCE_NOTES\")\n     @ApiImplicitParams({\n             @ApiImplicitParam(name = \"type\", value = \"RESOURCE_TYPE\", required = true, dataType =\"ResourceType\"),\n             @ApiImplicitParam(name = \"name\", value = \"RESOURCE_NAME\", required = true, dataType =\"String\"),\n-            @ApiImplicitParam(name = \"des\", value = \"RESOURCE_DESC\",  dataType =\"String\"),\n+            @ApiImplicitParam(name = \"description\", value = \"RESOURCE_DESC\",  dataType =\"String\"),\n             @ApiImplicitParam(name = \"file\", value = \"RESOURCE_FILE\", required = true, dataType = \"MultipartFile\")\n     })\n     @PostMapping(value = \"/create\")\n     public Result createResource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                  @RequestParam(value = \"type\") ResourceType type,\n                                  @RequestParam(value =\"name\")String alias,\n-                                 @RequestParam(value = \"desc\", required = false) String desc,\n+                                 @RequestParam(value = \"description\", required = false) String description,\n                                  @RequestParam(\"file\") MultipartFile file) {\n         try {\n             logger.info(\"login user {}, create resource, type: {}, resource alias: {}, desc: {}, file: {},{}\",\n-                    loginUser.getUserName(),type, alias, desc, file.getName(), file.getOriginalFilename());\n-            return resourceService.createResource(loginUser,alias, desc,type ,file);\n+                    loginUser.getUserName(),type, alias, description, file.getName(), file.getOriginalFilename());\n+            return resourceService.createResource(loginUser,alias, description,type ,file);\n         } catch (Exception e) {\n             logger.error(CREATE_RESOURCE_ERROR.getMsg(),e);\n             return error(CREATE_RESOURCE_ERROR.getCode(), CREATE_RESOURCE_ERROR.getMsg());\n@@ -96,26 +96,26 @@ public Result createResource(@ApiIgnore @RequestAttribute(value = Constants.SESS\n      *\n      * @param loginUser\n      * @param alias\n-     * @param desc\n+     * @param description\n      */\n     @ApiOperation(value = \"createResource\", notes= \"CREATE_RESOURCE_NOTES\")\n     @ApiImplicitParams({\n             @ApiImplicitParam(name = \"id\", value = \"RESOURCE_ID\", required = true, dataType =\"Int\", example = \"100\"),\n             @ApiImplicitParam(name = \"type\", value = \"RESOURCE_TYPE\", required = true, dataType =\"ResourceType\"),\n             @ApiImplicitParam(name = \"name\", value = \"RESOURCE_NAME\", required = true, dataType =\"String\"),\n-            @ApiImplicitParam(name = \"des\", value = \"RESOURCE_DESC\",  dataType =\"String\"),\n+            @ApiImplicitParam(name = \"description\", value = \"RESOURCE_DESC\",  dataType =\"String\"),\n             @ApiImplicitParam(name = \"file\", value = \"RESOURCE_FILE\", required = true,dataType = \"MultipartFile\")\n     })\n     @PostMapping(value = \"/update\")\n     public Result updateResource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                  @RequestParam(value =\"id\") int resourceId,\n                                  @RequestParam(value = \"type\") ResourceType type,\n                                  @RequestParam(value =\"name\")String alias,\n-                                 @RequestParam(value = \"desc\", required = false) String desc) {\n+                                 @RequestParam(value = \"description\", required = false) String description) {\n         try {\n             logger.info(\"login user {}, update resource, type: {}, resource alias: {}, desc: {}\",\n-                    loginUser.getUserName(),type, alias, desc);\n-            return resourceService.updateResource(loginUser,resourceId,alias, desc,type);\n+                    loginUser.getUserName(),type, alias, description);\n+            return resourceService.updateResource(loginUser,resourceId,alias, description,type);\n         } catch (Exception e) {\n             logger.error(UPDATE_RESOURCE_ERROR.getMsg(),e);\n             return error(Status.UPDATE_RESOURCE_ERROR.getCode(), Status.UPDATE_RESOURCE_ERROR.getMsg());\n@@ -280,7 +280,7 @@ public Result viewResource(@ApiIgnore @RequestAttribute(value = Constants.SESSIO\n      * @param type\n      * @param fileName\n      * @param fileSuffix\n-     * @param desc\n+     * @param description\n      * @param content\n      * @return\n      */\n@@ -289,25 +289,25 @@ public Result viewResource(@ApiIgnore @RequestAttribute(value = Constants.SESSIO\n             @ApiImplicitParam(name = \"type\", value = \"RESOURCE_TYPE\", required = true, dataType =\"ResourceType\"),\n             @ApiImplicitParam(name = \"fileName\", value = \"RESOURCE_NAME\",required = true,  dataType =\"String\"),\n             @ApiImplicitParam(name = \"suffix\", value = \"SUFFIX\", required = true, dataType =\"String\"),\n-            @ApiImplicitParam(name = \"des\", value = \"RESOURCE_DESC\",  dataType =\"String\"),\n+            @ApiImplicitParam(name = \"description\", value = \"RESOURCE_DESC\",  dataType =\"String\"),\n             @ApiImplicitParam(name = \"content\", value = \"CONTENT\",required = true,  dataType =\"String\")\n     })\n     @PostMapping(value = \"/online-create\")\n     public Result onlineCreateResource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                        @RequestParam(value = \"type\") ResourceType type,\n                                        @RequestParam(value =\"fileName\")String fileName,\n                                        @RequestParam(value =\"suffix\")String fileSuffix,\n-                                       @RequestParam(value = \"desc\", required = false) String desc,\n+                                       @RequestParam(value = \"description\", required = false) String description,\n                                        @RequestParam(value = \"content\") String content\n     ) {\n         try{\n             logger.info(\"login user {}, online create resource! fileName : {}, type : {}, suffix : {},desc : {},content : {}\",\n-                    loginUser.getUserName(),type,fileName,fileSuffix,desc,content);\n+                    loginUser.getUserName(),type,fileName,fileSuffix,description,content);\n             if(StringUtils.isEmpty(content)){\n                 logger.error(\"resource file contents are not allowed to be empty\");\n                 return error(Status.RESOURCE_FILE_IS_EMPTY.getCode(), RESOURCE_FILE_IS_EMPTY.getMsg());\n             }\n-            return resourceService.onlineCreateResource(loginUser,type,fileName,fileSuffix,desc,content);\n+            return resourceService.onlineCreateResource(loginUser,type,fileName,fileSuffix,description,content);\n         }catch (Exception e){\n             logger.error(CREATE_RESOURCE_FILE_ON_LINE_ERROR.getMsg(),e);\n             return error(Status.CREATE_RESOURCE_FILE_ON_LINE_ERROR.getCode(), Status.CREATE_RESOURCE_FILE_ON_LINE_ERROR.getMsg());",
      "parent_sha": "0fc419ed8f073217f5ee4e42b9f6e18cfda2eb32"
    }
  },
  {
    "oid": "9a3a6f5a3d5ec613b49ae1a5a947d58c351f1fc7",
    "message": "fix comment error (#1446)",
    "date": "2019-12-12T06:20:27Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/9a3a6f5a3d5ec613b49ae1a5a947d58c351f1fc7",
    "details": {
      "sha": "69c2304cd7641777309c28587611747545d8b5d0",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerThread.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/9a3a6f5a3d5ec613b49ae1a5a947d58c351f1fc7/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterSchedulerThread.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/9a3a6f5a3d5ec613b49ae1a5a947d58c351f1fc7/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterSchedulerThread.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterSchedulerThread.java?ref=9a3a6f5a3d5ec613b49ae1a5a947d58c351f1fc7",
      "patch": "@@ -101,7 +101,7 @@ public void run() {\n                 if(OSUtils.checkResource(masterConfig.getMasterMaxCpuloadAvg(), masterConfig.getMasterReservedMemory())){\n                     if (zkMasterClient.getZkClient().getState() == CuratorFrameworkState.STARTED) {\n \n-                        // create distributed lock with the root node path of the lock space as /dolphinscheduler/lock/failover/master\n+                        // create distributed lock with the root node path of the lock space as /dolphinscheduler/lock/masters\n                         String znodeLock = zkMasterClient.getMasterLockPath();\n \n                         mutex = new InterProcessMutex(zkMasterClient.getZkClient(), znodeLock);",
      "parent_sha": "a1ded5ee041a387d56757fcdd27e39efd3a6000a"
    }
  },
  {
    "oid": "6493c9a6b8aa5f55a60f1c1700f6da215c226d55",
    "message": "double check \u53d8\u91cf\u9700\u8981volatile\u4fee\u9970",
    "date": "2019-07-18T11:12:39Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/6493c9a6b8aa5f55a60f1c1700f6da215c226d55",
    "details": {
      "sha": "2febb6ee13d39777a0979dbd443149b736dbfe1f",
      "filename": "escheduler-common/src/main/java/cn/escheduler/common/queue/TaskQueueZkImpl.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/6493c9a6b8aa5f55a60f1c1700f6da215c226d55/escheduler-common%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/6493c9a6b8aa5f55a60f1c1700f6da215c226d55/escheduler-common%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-common%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java?ref=6493c9a6b8aa5f55a60f1c1700f6da215c226d55",
      "patch": "@@ -17,20 +17,26 @@\n package cn.escheduler.common.queue;\n \n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n import cn.escheduler.common.Constants;\n import cn.escheduler.common.utils.Bytes;\n import cn.escheduler.common.utils.IpUtils;\n import cn.escheduler.common.utils.OSUtils;\n import cn.escheduler.common.zk.AbstractZKClient;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.curator.framework.CuratorFramework;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.*;\n-\n /**\n  * A singleton of a task queue implemented with zookeeper\n  * tasks queue implemention\n@@ -39,7 +45,7 @@ public class TaskQueueZkImpl extends AbstractZKClient implements ITaskQueue {\n \n     private static final Logger logger = LoggerFactory.getLogger(TaskQueueZkImpl.class);\n \n-    private static TaskQueueZkImpl instance;\n+    private static volatile TaskQueueZkImpl instance;\n \n     private TaskQueueZkImpl(){\n         init();",
      "parent_sha": "5e36557cb4b6248c0306e5ff1af39260149a7561"
    }
  },
  {
    "oid": "35f32cd16eb7d89a900863755506858e84c699dd",
    "message": "[Improvement][Task]Improve seatunnel task command log (#11027)",
    "date": "2022-07-20T03:06:10Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/35f32cd16eb7d89a900863755506858e84c699dd",
    "details": {
      "sha": "a077aa1c7c598edb7cb80bf8e633e00eb5ab5e80",
      "filename": "dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/SeatunnelTask.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/35f32cd16eb7d89a900863755506858e84c699dd/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-seatunnel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fseatunnel%2FSeatunnelTask.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/35f32cd16eb7d89a900863755506858e84c699dd/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-seatunnel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fseatunnel%2FSeatunnelTask.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-seatunnel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fseatunnel%2FSeatunnelTask.java?ref=35f32cd16eb7d89a900863755506858e84c699dd",
      "patch": "@@ -29,7 +29,6 @@\n import org.apache.dolphinscheduler.plugin.task.api.parser.ParamUtils;\n import org.apache.dolphinscheduler.plugin.task.api.parser.ParameterUtils;\n \n-import org.apache.commons.collections4.MapUtils;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.BooleanUtils;\n \n@@ -39,7 +38,6 @@\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -115,7 +113,7 @@ private String buildCommand() throws Exception {\n         args.addAll(buildOptions());\n \n         String command = String.join(\" \", args);\n-        logger.info(\"SeaTunnel Flink task command: {}\", command);\n+        logger.info(\"SeaTunnel task command: {}\", command);\n \n         return command;\n     }",
      "parent_sha": "2f0d907bcb2ab7f78cbc0bddf4f894041623c26b"
    }
  },
  {
    "oid": "2ec9943f647d4e58c32d64278fe419ca9a71f4a5",
    "message": "fix bug: zk hasTask method NPE (#1785)",
    "date": "2020-01-09T06:50:15Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/2ec9943f647d4e58c32d64278fe419ca9a71f4a5",
    "details": {
      "sha": "5f834a20048a2ab56cadc444f77df64863123c70",
      "filename": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/TaskQueueZkImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/2ec9943f647d4e58c32d64278fe419ca9a71f4a5/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/2ec9943f647d4e58c32d64278fe419ca9a71f4a5/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java?ref=2ec9943f647d4e58c32d64278fe419ca9a71f4a5",
      "patch": "@@ -83,7 +83,7 @@ public List<String> getAllTasks(String key) {\n     @Override\n     public boolean hasTask(String key) {\n         try {\n-            return zookeeperOperator.hasChildren(key);\n+            return zookeeperOperator.hasChildren(getTasksPath(key));\n         } catch (Exception e) {\n             logger.error(\"check has task in tasks queue exception\",e);\n         }",
      "parent_sha": "a96e17ea4ea9e8ecebf9d333455ab71c764e2254"
    }
  },
  {
    "oid": "588c003860ab6ffb5099c70e32c2626f646a3290",
    "message": "resolve shell task build command nullpointexception (#2267)\n\nCo-authored-by: sunchaohe <sunzhaohe@linklogis.com>",
    "date": "2020-06-29T09:36:34Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/588c003860ab6ffb5099c70e32c2626f646a3290",
    "details": {
      "sha": "0f34cf61a1acb1e128ec72e9f5e7ac0559b1cce2",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/588c003860ab6ffb5099c70e32c2626f646a3290/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fshell%2FShellTask.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/588c003860ab6ffb5099c70e32c2626f646a3290/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fshell%2FShellTask.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fshell%2FShellTask.java?ref=588c003860ab6ffb5099c70e32c2626f646a3290",
      "patch": "@@ -133,7 +133,6 @@ private String buildCommand() throws Exception {\n \n     String script = shellParameters.getRawScript().replaceAll(\"\\\\r\\\\n\", \"\\n\");\n \n-\n     /**\n      *  combining local and global parameters\n      */\n@@ -142,13 +141,9 @@ private String buildCommand() throws Exception {\n             shellParameters.getLocalParametersMap(),\n             taskProps.getCmdTypeIfComplement(),\n             taskProps.getScheduleTime());\n-//    if (paramsMap != null){\n-//      script = ParameterUtils.convertParameterPlaceholders(script, ParamUtils.convert(paramsMap));\n-//    }\n \n-    //new\n //    replace variable TIME with $[YYYYmmddd...] in shell file when history run job and batch complement job\n-    if (paramsMap != null) {\n+    if(paramsMap != null && taskProps.getScheduleTime()!=null) {\n       String dateTime = DateUtils.format(taskProps.getScheduleTime(), Constants.PARAMETER_FORMAT_TIME);\n       Property p = new Property();\n       p.setValue(dateTime);\n@@ -177,6 +172,4 @@ public AbstractParameters getParameters() {\n     return shellParameters;\n   }\n \n-\n-\n }",
      "parent_sha": "30b98b89a26372aa404b45dd5e55d248ab3ce823"
    }
  },
  {
    "oid": "87a88e36627017607c73cfc66a92be08d1da22ee",
    "message": "[feat] Support set execute type to pydolphinscheduler (#12871)\n\nUp to now, we can only submit workflow with parallel mode. this patch give users ability specific execute type to workflow",
    "date": "2022-11-12T02:31:08Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/87a88e36627017607c73cfc66a92be08d1da22ee",
    "details": {
      "sha": "95a7dde6b0fa5fefe06e569d10eb56f80b8c562c",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/87a88e36627017607c73cfc66a92be08d1da22ee/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fpython%2FPythonGateway.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/87a88e36627017607c73cfc66a92be08d1da22ee/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fpython%2FPythonGateway.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fpython%2FPythonGateway.java?ref=87a88e36627017607c73cfc66a92be08d1da22ee",
      "patch": "@@ -245,26 +245,29 @@ public Long createOrUpdateProcessDefinition(String userName,\n                                                 String taskRelationJson,\n                                                 String taskDefinitionJson,\n                                                 String otherParamsJson,\n-                                                ProcessExecutionTypeEnum executionType) {\n+                                                String executionType) {\n         User user = usersService.queryUser(userName);\n         Project project = projectMapper.queryByName(projectName);\n         long projectCode = project.getCode();\n \n         ProcessDefinition processDefinition = getProcessDefinition(user, projectCode, name);\n+        ProcessExecutionTypeEnum executionTypeEnum = ProcessExecutionTypeEnum.valueOf(executionType);\n         long processDefinitionCode;\n         // create or update process definition\n         if (processDefinition != null) {\n             processDefinitionCode = processDefinition.getCode();\n             // make sure process definition offline which could edit\n             processDefinitionService.releaseProcessDefinition(user, projectCode, processDefinitionCode,\n                     ReleaseState.OFFLINE);\n-            Map<String, Object> result = processDefinitionService.updateProcessDefinition(user, projectCode, name,\n+            processDefinitionService.updateProcessDefinition(user, projectCode, name,\n                     processDefinitionCode, description, globalParams,\n-                    null, timeout, tenantCode, taskRelationJson, taskDefinitionJson, otherParamsJson, executionType);\n+                    null, timeout, tenantCode, taskRelationJson, taskDefinitionJson, otherParamsJson,\n+                    executionTypeEnum);\n         } else {\n             Map<String, Object> result = processDefinitionService.createProcessDefinition(user, projectCode, name,\n                     description, globalParams,\n-                    null, timeout, tenantCode, taskRelationJson, taskDefinitionJson, otherParamsJson, executionType);\n+                    null, timeout, tenantCode, taskRelationJson, taskDefinitionJson, otherParamsJson,\n+                    executionTypeEnum);\n             processDefinition = (ProcessDefinition) result.get(Constants.DATA_LIST);\n             processDefinitionCode = processDefinition.getCode();\n         }",
      "parent_sha": "229c5549129dabaeaf721dd15af9e8f73dcfadf9"
    }
  },
  {
    "oid": "a7ddfac360091cab4f6e6e3103327ad365954b37",
    "message": "modify annotation and enum desc (#1342)\n\n* rename from DatasourceUserMapper to DataSourceUserMapper\r\n\r\n* add unit test in UserMapper and WorkerGroupMapper\r\n\r\n* change cn.escheduler to org.apache.dolphinscheduler\r\n\r\n* add unit test in UdfFuncMapperTest\r\n\r\n* add unit test in UdfFuncMapperTest\r\n\r\n* remove DatabaseConfiguration\r\n\r\n* add ConnectionFactoryTest\r\n\r\n* cal duration in processInstancesList\r\n\r\n* change desc to description\r\n\r\n* change table name in mysql ddl\r\n\r\n* change table name in mysql ddl\r\n\r\n* change escheduler to dolphinscheduler\r\n\r\n* change escheduler to dolphinscheduler\r\n\r\n* change escheduler to dolphinscheduler\r\n\r\n* remove log4j-1.2-api and modify AlertMapperTest\r\n\r\n* remove log4j-1.2-api\r\n\r\n* Add alertDao to spring management\r\n\r\n* Add alertDao to spring management\r\n\r\n* get SqlSessionFactory from MybatisSqlSessionFactoryBean\r\n\r\n* get processDao by DaoFactory\r\n\r\n* read druid properties in ConneciontFactory\r\n\r\n* read druid properties in ConneciontFactory\r\n\r\n* change get alertDao by spring to DaoFactory\r\n\r\n* add log4j to resolve #967\r\n\r\n* resole verify udf name error and delete udf error\r\n\r\n* Determine if principal is empty\r\n\r\n* Determine whether the logon user has the right to delete the project\r\n\r\n* Fixed an issue that produced attatch file named such as ATT00002.bin\r\n\r\n* fix too many connection in upgrade or create\r\n\r\n* fix NEED_FAULT_TOLERANCE and WAITTING_THREAD count fail\r\n\r\n* Added a judgment on whether the currently login user is an administrator\r\n\r\n* fix update udf database not change and create time is changed\r\n\r\n* add enterprise.wechat.enable to decide whether to send enterprise WeChat\r\n\r\n* change method check\r\n\r\n* Remove the administrator's judgment on query access token list\r\n\r\n* only admin can create worker group\r\n\r\n* delete alert group need delete the relation of user and alert group\r\n\r\n* add timeout in proxy when upload large resource\r\n\r\n* add gets scheduled times by expect fire times\r\n\r\n* add gets scheduled times by expect fire times\r\n\r\n* Increase the judgment of whether it is admin\r\n\r\n* Increase the judgment of whether it is admin\r\n\r\n* when delete access token add whether login user has perm to delete\r\n\r\n* change mysql-connector-java scope to test\r\n\r\n* update scm test\r\n\r\n* add profile test\r\n\r\n* Add method and parameters comments\r\n\r\n* roll back\r\n\r\n* modify annotation and enum desc",
    "date": "2019-11-27T06:36:13Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/a7ddfac360091cab4f6e6e3103327ad365954b37",
    "details": {
      "sha": "d6ba6e31af18f33a1eccf42c100fb80bb1b148d3",
      "filename": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/a7ddfac360091cab4f6e6e3103327ad365954b37/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fenums%2FCommandType.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/a7ddfac360091cab4f6e6e3103327ad365954b37/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fenums%2FCommandType.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fenums%2FCommandType.java?ref=a7ddfac360091cab4f6e6e3103327ad365954b37",
      "patch": "@@ -29,27 +29,27 @@ public enum CommandType {\n      * command types\n      * 0 start a new process\n      * 1 start a new process from current nodes\n-     * 2 recover tolerance fault work flow\n-     * 3 start process from paused task nodes\n+     * 2 recover tolerance fault process\n+     * 3 recover suspended process\n      * 4 start process from failure task nodes\n      * 5 complement data\n      * 6 start a new process from scheduler\n-     * 7 repeat running a work flow\n+     * 7 repeat running a process\n      * 8 pause a process\n      * 9 stop a process\n      * 10 recover waiting thread\n      */\n     START_PROCESS(0, \"start a new process\"),\n     START_CURRENT_TASK_PROCESS(1, \"start a new process from current nodes\"),\n-    RECOVER_TOLERANCE_FAULT_PROCESS(2, \"recover tolerance fault work flow\"),\n-    RECOVER_SUSPENDED_PROCESS(3, \"start process from paused task nodes\"),\n-    START_FAILURE_TASK_PROCESS(4, \"start a new process\"),\n+    RECOVER_TOLERANCE_FAULT_PROCESS(2, \"recover tolerance fault process\"),\n+    RECOVER_SUSPENDED_PROCESS(3, \"recover suspended process\"),\n+    START_FAILURE_TASK_PROCESS(4, \"start process from failure task nodes\"),\n     COMPLEMENT_DATA(5, \"complement data\"),\n     SCHEDULER(6, \"start a new process from scheduler\"),\n-    REPEAT_RUNNING(7, \"start a new process\"),\n-    PAUSE(8, \"start a new process\"),\n-    STOP(9, \"start a new process\"),\n-    RECOVER_WAITTING_THREAD(10, \"start a new process\");\n+    REPEAT_RUNNING(7, \"repeat running a process\"),\n+    PAUSE(8, \"pause a process\"),\n+    STOP(9, \"stop a process\"),\n+    RECOVER_WAITTING_THREAD(10, \"recover waitting thread\");\n \n     CommandType(int code, String descp){\n         this.code = code;",
      "parent_sha": "07353e0fd805e3340e58d83faa0da8487045e1d5"
    }
  },
  {
    "oid": "cae656c1bc230e9097a94ab88b6cef379cbb51e0",
    "message": "uniform naming",
    "date": "2020-01-03T11:26:06Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/cae656c1bc230e9097a94ab88b6cef379cbb51e0",
    "details": {
      "sha": "f4e865e4f53e21d0fc01f679fd3d8f4b14d042c6",
      "filename": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/TaskQueueZkImpl.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/cae656c1bc230e9097a94ab88b6cef379cbb51e0/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/cae656c1bc230e9097a94ab88b6cef379cbb51e0/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Fqueue%2FTaskQueueZkImpl.java?ref=cae656c1bc230e9097a94ab88b6cef379cbb51e0",
      "patch": "@@ -45,10 +45,10 @@ public TaskQueueZkImpl(ZookeeperOperator zookeeperOperator) {\n \n         try {\n             String tasksQueuePath = getTasksPath(Constants.DOLPHINSCHEDULER_TASKS_QUEUE);\n-            String tasksCancelPath = getTasksPath(Constants.DOLPHINSCHEDULER_TASKS_KILL);\n+            String tasksKillPath = getTasksPath(Constants.DOLPHINSCHEDULER_TASKS_KILL);\n \n-            for(String key : new String[]{tasksQueuePath,tasksCancelPath}){\n-                if(!zookeeperOperator.isExisted(key)){\n+            for (String key : new String[]{tasksQueuePath,tasksKillPath}){\n+                if (!zookeeperOperator.isExisted(key)){\n                     zookeeperOperator.persist(key, \"\");\n                     logger.info(\"create tasks queue parent node success : {}\", key);\n                 }\n@@ -340,20 +340,20 @@ public Set<String> smembers(String key) {\n     public void delete(){\n         try {\n             String tasksQueuePath = getTasksPath(Constants.DOLPHINSCHEDULER_TASKS_QUEUE);\n-            String tasksCancelPath = getTasksPath(Constants.DOLPHINSCHEDULER_TASKS_KILL);\n+            String tasksKillPath = getTasksPath(Constants.DOLPHINSCHEDULER_TASKS_KILL);\n \n-            for(String taskQueuePath : new String[]{tasksQueuePath,tasksCancelPath}){\n-                if(zookeeperOperator.isExisted(taskQueuePath)){\n-                    List<String> list = zookeeperOperator.getChildrenKeys(taskQueuePath);\n+            for (String key : new String[]{tasksQueuePath,tasksKillPath}){\n+                if (zookeeperOperator.isExisted(key)){\n+                    List<String> list = zookeeperOperator.getChildrenKeys(key);\n                     for (String task : list) {\n-                        zookeeperOperator.remove(taskQueuePath + Constants.SINGLE_SLASH + task);\n-                        logger.info(\"delete task from tasks queue : {}/{} \",taskQueuePath,task);\n+                        zookeeperOperator.remove(key + Constants.SINGLE_SLASH + task);\n+                        logger.info(\"delete task from tasks queue : {}/{} \", key, task);\n                     }\n                 }\n             }\n \n         } catch (Exception e) {\n-            logger.error(\"delete all tasks in tasks queue failure\",e);\n+            logger.error(\"delete all tasks in tasks queue failure\", e);\n         }\n     }\n ",
      "parent_sha": "c21d25edf2b89cbf1c19db0d2da311503652a185"
    }
  },
  {
    "oid": "ee8581b21ecb766870fd35d9a1d12c6692ce95b5",
    "message": "change delete status according to delete action result",
    "date": "2020-06-10T07:15:03Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/ee8581b21ecb766870fd35d9a1d12c6692ce95b5",
    "details": {
      "sha": "e7f808719e8c8f54e9f14a798874fe094f99d099",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/log/LoggerRequestProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/ee8581b21ecb766870fd35d9a1d12c6692ce95b5/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Flog%2FLoggerRequestProcessor.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/ee8581b21ecb766870fd35d9a1d12c6692ce95b5/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Flog%2FLoggerRequestProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Flog%2FLoggerRequestProcessor.java?ref=ee8581b21ecb766870fd35d9a1d12c6692ce95b5",
      "patch": "@@ -96,7 +96,7 @@ public void process(Channel channel, Command command) {\n                 Boolean status = true;\n                 try {\n                     if (taskLogFile.exists()){\n-                        taskLogFile.delete();\n+                        status = taskLogFile.delete();\n                     }\n                 }catch (Exception e){\n                     status = false;",
      "parent_sha": "b10a06b2bc76b832418bfebe8c63bdf6715ec482"
    }
  },
  {
    "oid": "2b0b93b9123a5853b15f578a72b7f0d6e5fbbd42",
    "message": "[optimization]\uff1aremove duplicate code (#2377)\n\n* sqlTask failed to run\r\n\r\n* remove duplicate code\r\n\r\n* remove duplicate code\r\n\r\n* remove duplicate code\r\n\r\n* remove duplicate code\r\n\r\n* remove duplicate code\r\n\r\nCo-authored-by: songqh <songquanhe@foxmail.com>",
    "date": "2020-04-07T14:27:28Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/2b0b93b9123a5853b15f578a72b7f0d6e5fbbd42",
    "details": {
      "sha": "dda960d2e6d3c3b9948c775b15fa016b3cc2f666",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/2b0b93b9123a5853b15f578a72b7f0d6e5fbbd42/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FExecutorService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/2b0b93b9123a5853b15f578a72b7f0d6e5fbbd42/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FExecutorService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FExecutorService.java?ref=2b0b93b9123a5853b15f578a72b7f0d6e5fbbd42",
      "patch": "@@ -453,7 +453,7 @@ private int createCommand(CommandType commandType, int processDefineId,\n                               TaskDependType nodeDep, FailureStrategy failureStrategy,\n                               String startNodeList, String schedule, WarningType warningType,\n                               int excutorId, int warningGroupId,\n-                              RunMode runMode,Priority processInstancePriority, int workerGroupId) throws ParseException {\n+                              RunMode runMode,Priority processInstancePriority, int workerGroupId){\n \n         /**\n          * instantiate command schedule instance\n@@ -496,6 +496,7 @@ private int createCommand(CommandType commandType, int processDefineId,\n             }\n         }\n \n+        // determine whether to complement\n         if(commandType == CommandType.COMPLEMENT_DATA){\n             runMode = (runMode == null) ? RunMode.RUN_MODE_SERIAL : runMode;\n             if(null != start && null != end && start.before(end)){\n@@ -540,7 +541,7 @@ private int createCommand(CommandType commandType, int processDefineId,\n                         processDefineId, schedule);\n             }\n         }else{\n-            command.setCommandParam(JSONUtils.toJson(cmdParam));\n+\n             return processService.createCommand(command);\n         }\n ",
      "parent_sha": "d3990dfdb4d6fd0e5ac48aa345edb99ee8313a3c"
    }
  },
  {
    "oid": "54e110d17b2558c05ed896d383897ff7e9fdfdea",
    "message": "fix the exception of update null point of workflow instance due to no\u2026 (#4459)\n\n* fix the exception of update null point of workflow instance due to not add global parameter when create workflow definition\r\n\r\n* optimization of the leading package\r\n\r\nCo-authored-by: yaoshui <huangqitao@accesscorporate.com.cn>",
    "date": "2021-01-15T02:32:16Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/54e110d17b2558c05ed896d383897ff7e9fdfdea",
    "details": {
      "sha": "3f55fae66fbe89f1effd56c5ade0d114ba8e08c1",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/54e110d17b2558c05ed896d383897ff7e9fdfdea/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FProcessInstanceService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/54e110d17b2558c05ed896d383897ff7e9fdfdea/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FProcessInstanceService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FProcessInstanceService.java?ref=54e110d17b2558c05ed896d383897ff7e9fdfdea",
      "patch": "@@ -66,11 +66,13 @@\n import java.nio.charset.StandardCharsets;\n import java.text.ParseException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n@@ -449,7 +451,7 @@ public Map<String, Object> updateProcessInstance(User loginUser, String projectN\n \n             originDefParams = JSONUtils.toJsonString(processData.getGlobalParams());\n             List<Property> globalParamList = processData.getGlobalParams();\n-            Map<String, String> globalParamMap = globalParamList.stream().collect(Collectors.toMap(Property::getProp, Property::getValue));\n+            Map<String, String> globalParamMap = Optional.ofNullable(globalParamList).orElse(Collections.emptyList()).stream().collect(Collectors.toMap(Property::getProp, Property::getValue));\n             globalParams = ParameterUtils.curingGlobalParams(globalParamMap, globalParamList,\n                     processInstance.getCmdTypeIfComplement(), schedule);\n             timeout = processData.getTimeout();",
      "parent_sha": "b6ce3cfdf0cd4206028072bac9a00a9272e6e79f"
    }
  },
  {
    "oid": "467ac35f7fac0e0e714cbe04ff42de3449307f8d",
    "message": "fix ZKWorkerClient not close PathChildrenCache (#1185)\n\n* move updateTaskState into try/catch block in case of exception\r\n\r\n* fix NPE\r\n\r\n* using conf.getInt instead of getString\r\n\r\n* for AbstractZKClient, remove the log, for it will print the same log message in createZNodePath.\r\nfor AlertDao, correct the spelling.\r\n\r\n* duplicate\r\n\r\n* refactor getTaskWorkerGroupId\r\n\r\n* add friendly log\r\n\r\n* update hearbeat thread num = 1\r\n\r\n* fix the bug when worker execute task using queue. and remove checking Tenant user anymore in TaskScheduleThread\r\n\r\n* 1. move verifyTaskInstanceIsNull after taskInstance\r\n2. keep verifyTenantIsNull/verifyTaskInstanceIsNull clean and readable\r\n\r\n* fix the message\r\n\r\n* delete before check to avoid KeeperException$NoNodeException\r\n\r\n* fix the message\r\n\r\n* check processInstance state before delete tenant\r\n\r\n* check processInstance state before delete worker group\r\n\r\n* refactor\r\n\r\n* merge api constants into common constatns\r\n\r\n* update the resource perm\r\n\r\n* update the dataSource perm\r\n\r\n* fix CheckUtils.checkUserParams method\r\n\r\n* update AlertGroupService, extends from BaseService, remove duplicate methods\r\n\r\n* refactor\r\n\r\n* modify method name\r\n\r\n* add hasProjectAndPerm method\r\n\r\n* using checkProject instead of getResultStatus\r\n\r\n* delete checkAuth method, using hasProjectAndPerm instead.\r\n\r\n* correct spelling\r\n\r\n* add transactional for deleteWorkerGroupById\r\n\r\n* add Transactional for deleteProcessInstanceById method\r\n\r\n* change sqlSessionTemplate singleton\r\n\r\n* change sqlSessionTemplate singleton and reformat code\r\n\r\n* fix unsuitable error message\r\n\r\n* update shutdownhook methods\r\n\r\n* fix worker log bug\r\n\r\n* fix api server debug mode bug\r\n\r\n* upgrade zk version\r\n\r\n* delete this line ,for zkClient.close() will do the whole thing\r\n\r\n* fix master server shutdown error\r\n\r\n* degrade zk version and add FourLetterWordMain class\r\n\r\n* fix PathChildrenCache not close",
    "date": "2019-11-08T09:22:12Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/467ac35f7fac0e0e714cbe04ff42de3449307f8d",
    "details": {
      "sha": "df6575bcb1686815d043ad32feb15d1e10238879",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKWorkerClient.java",
      "status": "modified",
      "additions": 15,
      "deletions": 11,
      "changes": 26,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/467ac35f7fac0e0e714cbe04ff42de3449307f8d/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fzk%2FZKWorkerClient.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/467ac35f7fac0e0e714cbe04ff42de3449307f8d/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fzk%2FZKWorkerClient.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fzk%2FZKWorkerClient.java?ref=467ac35f7fac0e0e714cbe04ff42de3449307f8d",
      "patch": "@@ -28,7 +28,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.Date;\n import java.util.concurrent.ThreadFactory;\n \n \n@@ -49,16 +48,14 @@ public class ZKWorkerClient extends AbstractZKClient {\n \t */\n \tprivate String workerZNode = null;\n \n-\t/**\n-\t *  create time\n-\t */\n-\tprivate Date createTime = null;\n \n \t/**\n \t *  zkWorkerClient\n \t */\n \tprivate static ZKWorkerClient zkWorkerClient = null;\n \n+\tprivate PathChildrenCache workerPathChildrenCache;\n+\n \tprivate ZKWorkerClient(){\n \t\tinit();\n \t}\n@@ -78,6 +75,16 @@ private void init(){\n \t\tthis.registWorker();\n \t}\n \n+\tpublic void close(){\n+\t\ttry {\n+\t\t\tif(workerPathChildrenCache != null){\n+\t\t\t\tworkerPathChildrenCache.close();\n+\t\t\t}\n+\t\t\tsuper.close();\n+\t\t} catch (Exception ignore) {\n+\t\t}\n+\t}\n+\n \n \t/**\n \t * get zkWorkerClient\n@@ -112,13 +119,10 @@ private void registWorker(){\n \t *  monitor worker\n \t */\n \tprivate void listenerWorker(){\n-\t\tPathChildrenCache workerPc = new PathChildrenCache(zkClient, getZNodeParentPath(ZKNodeType.WORKER), true, defaultThreadFactory);\n+\t\tworkerPathChildrenCache = new PathChildrenCache(zkClient, getZNodeParentPath(ZKNodeType.WORKER), true, defaultThreadFactory);\n \t\ttry {\n-\n-\t\t\tDate now = new Date();\n-\t\t\tcreateTime = now ;\n-\t\t\tworkerPc.start();\n-\t\t\tworkerPc.getListenable().addListener(new PathChildrenCacheListener() {\n+\t\t\tworkerPathChildrenCache.start();\n+\t\t\tworkerPathChildrenCache.getListenable().addListener(new PathChildrenCacheListener() {\n \t\t\t\t@Override\n \t\t\t\tpublic void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception {\n \t\t\t\t\tswitch (event.getType()) {",
      "parent_sha": "b5aab02da9fc08c0ab882619d02af8dc511fabe4"
    }
  },
  {
    "oid": "e349ab4b23a367d888ae35066c3c8190e77f74fe",
    "message": "Update ProcessDefinitionService.java",
    "date": "2019-07-15T02:57:18Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/e349ab4b23a367d888ae35066c3c8190e77f74fe",
    "details": {
      "sha": "39133eeb5ff1a4bc95049d96edc1e18a667b0dc0",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/e349ab4b23a367d888ae35066c3c8190e77f74fe/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/e349ab4b23a367d888ae35066c3c8190e77f74fe/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java?ref=e349ab4b23a367d888ae35066c3c8190e77f74fe",
      "patch": "@@ -487,7 +487,7 @@ public Map<String, Object> releaseProcessDefinition(User loginUser, String proje\n                     // set status\n                     schedule.setReleaseState(ReleaseState.OFFLINE);\n                     scheduleMapper.update(schedule);\n-                    deleteSchedule(project.getId(), id);\n+                    deleteSchedule(project.getId(), schedule.getId());\n                 }\n                 break;\n             }",
      "parent_sha": "f9dc929a8a110e8fa2f8b85ebae541b469871984"
    }
  },
  {
    "oid": "02b2de2a1e3198b96eb5b6a4c42411ec265e1731",
    "message": "[fix] mlflow project success status (#10897)\n\nclose: #10902",
    "date": "2022-07-12T12:58:53Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/02b2de2a1e3198b96eb5b6a4c42411ec265e1731",
    "details": {
      "sha": "6c871623543cf8de21b1edc2c065d7028fab63f0",
      "filename": "dolphinscheduler-task-plugin/dolphinscheduler-task-mlflow/src/main/java/org/apache/dolphinscheduler/plugin/task/mlflow/MlflowTask.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/02b2de2a1e3198b96eb5b6a4c42411ec265e1731/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-mlflow%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fmlflow%2FMlflowTask.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/02b2de2a1e3198b96eb5b6a4c42411ec265e1731/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-mlflow%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fmlflow%2FMlflowTask.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-mlflow%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fmlflow%2FMlflowTask.java?ref=02b2de2a1e3198b96eb5b6a4c42411ec265e1731",
      "patch": "@@ -86,11 +86,11 @@ public void handle() throws Exception {\n             // construct process\n             String command = buildCommand();\n             TaskResponse commandExecuteResult = shellCommandExecutor.run(command);\n-            int exitCode = exitStatusCode;\n+            int exitCode;\n             if (mlflowParameters.getIsDeployDocker()){\n                 exitCode = checkDockerHealth();\n             }else {\n-                exitCode = getExitStatusCode();\n+                exitCode = commandExecuteResult.getExitStatusCode();\n             }\n             setExitStatusCode(exitCode);\n             setAppIds(commandExecuteResult.getAppIds());",
      "parent_sha": "59cd86157ff8d5ab25f0b200d6a30abd95a64c03"
    }
  },
  {
    "oid": "f21837076e0647103fc901e604013d0e21139460",
    "message": "Solve the failure to execute non-query sql (#2413)\n\nCo-authored-by: sunchaohe <sunzhaohe@linklogis.com>\r\nCo-authored-by: qiaozhanwei <qiaozhanwei@outlook.com>\r\nCo-authored-by: lgcareer <18610854716@163.com>",
    "date": "2020-04-15T09:39:12Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/f21837076e0647103fc901e604013d0e21139460",
    "details": {
      "sha": "22fa91dc1d0460f6eddc307c4abcebf4c50c3bf7",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/f21837076e0647103fc901e604013d0e21139460/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/f21837076e0647103fc901e604013d0e21139460/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java?ref=f21837076e0647103fc901e604013d0e21139460",
      "patch": "@@ -214,25 +214,21 @@ public void executeFuncAndSql(SqlBinds mainSqlBinds,\n         try {\n             // if upload resource is HDFS and kerberos startup\n             CommonUtils.loadKerberosConf();\n-\n-\n             // create connection\n             connection = createConnection();\n-\n             // create temp function\n             if (CollectionUtils.isNotEmpty(createFuncs)) {\n                 createTempFunction(connection,createFuncs);\n             }\n \n             // pre sql\n             preSql(connection,preStatementsBinds);\n-\n-\n             stmt = prepareStatementAndBind(connection, mainSqlBinds);\n-            resultSet = stmt.executeQuery();\n+\n             // decide whether to executeQuery or executeUpdate based on sqlType\n             if (sqlParameters.getSqlType() == SqlType.QUERY.ordinal()) {\n                 // query statements need to be convert to JsonArray and inserted into Alert to send\n+                resultSet = stmt.executeQuery();\n                 resultProcess(resultSet);\n \n             } else if (sqlParameters.getSqlType() == SqlType.NON_QUERY.ordinal()) {",
      "parent_sha": "c4acbdcfd0159df3c3336ff9b491b9fc7387116f"
    }
  },
  {
    "oid": "bc995752d6b52f2f94bf17ea806c60f8d63b7342",
    "message": "[DS-7256][refactor] Optimization for task instances query (#7331)\n\n- assemble a Map<Long, User> outside of the loop instead of the query inside\r\n\r\nCo-authored-by: gq47193 <gq47193@ly.com>",
    "date": "2021-12-15T02:53:52Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/bc995752d6b52f2f94bf17ea806c60f8d63b7342",
    "details": {
      "sha": "ab53c5887853b2103e54f6c13d32f64401bce9c9",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/bc995752d6b52f2f94bf17ea806c60f8d63b7342/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FTaskInstanceServiceImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/bc995752d6b52f2f94bf17ea806c60f8d63b7342/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FTaskInstanceServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FTaskInstanceServiceImpl.java?ref=bc995752d6b52f2f94bf17ea806c60f8d63b7342",
      "patch": "@@ -42,6 +42,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -137,12 +138,13 @@ public Result queryTaskListPaging(User loginUser,\n         exclusionSet.add(Constants.CLASS);\n         exclusionSet.add(\"taskJson\");\n         List<TaskInstance> taskInstanceList = taskInstanceIPage.getRecords();\n-\n+        List<Integer> executorIds = taskInstanceList.stream().map(TaskInstance::getExecutorId).distinct().collect(Collectors.toList());\n+        List<User> users = usersService.queryUser(executorIds);\n+        Map<Integer, User> userMap = users.stream().collect(Collectors.toMap(User::getId, v -> v));\n         for (TaskInstance taskInstance : taskInstanceList) {\n             taskInstance.setDuration(DateUtils.format2Duration(taskInstance.getStartTime(), taskInstance.getEndTime()));\n-            User executor = usersService.queryUser(taskInstance.getExecutorId());\n-            if (null != executor) {\n-                taskInstance.setExecutorName(executor.getUserName());\n+            if (userMap.containsKey(taskInstance.getExecutorId())) {\n+                taskInstance.setExecutorName(userMap.get(taskInstance.getExecutorId()).getUserName());\n             }\n         }\n         pageInfo.setTotal((int) taskInstanceIPage.getTotal());",
      "parent_sha": "6b5c3934490027c57e8e8651d02d696060b290f5"
    }
  },
  {
    "oid": "c42531e39c84af08b795d76e01f088e97367839a",
    "message": "to #7108 (#7109)",
    "date": "2021-12-02T08:34:38Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/c42531e39c84af08b795d76e01f088e97367839a",
    "details": {
      "sha": "152aaeaa2cf1570e868576d039a98307f7e233f5",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/c42531e39c84af08b795d76e01f088e97367839a/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FWorkflowExecuteThread.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/c42531e39c84af08b795d76e01f088e97367839a/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FWorkflowExecuteThread.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FWorkflowExecuteThread.java?ref=c42531e39c84af08b795d76e01f088e97367839a",
      "patch": "@@ -251,7 +251,7 @@ public boolean isStart() {\n     }\n \n     private void handleEvents() {\n-        while (this.stateEvents.size() > 0) {\n+        while (!this.stateEvents.isEmpty()) {\n \n             try {\n                 StateEvent stateEvent = this.stateEvents.peek();",
      "parent_sha": "e0623973e000ba3c5cc90ac72c0ba222e6947d1e"
    }
  },
  {
    "oid": "de27d9db81823ed21504d50aa0b337844b029fa0",
    "message": "fix graphHasCycle",
    "date": "2019-04-19T08:20:42Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/de27d9db81823ed21504d50aa0b337844b029fa0",
    "details": {
      "sha": "00bfe6dd6a0ddf10f02931427e495062a3d5c7e2",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/de27d9db81823ed21504d50aa0b337844b029fa0/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/de27d9db81823ed21504d50aa0b337844b029fa0/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java?ref=de27d9db81823ed21504d50aa0b337844b029fa0",
      "patch": "@@ -114,7 +114,7 @@ public Map<String, Object> createProcessDefinition(User loginUser, String projec\n         ProcessData processData = JSONUtils.parseObject(processDefinitionJson, ProcessData.class);\n         Map<String, Object> checkProcessJson = checkProcessNodeList(processData, processDefinitionJson);\n         if (checkProcessJson.get(Constants.STATUS) != Status.SUCCESS) {\n-            return result;\n+            return checkProcessJson;\n         }\n \n         processDefine.setName(name);\n@@ -262,7 +262,7 @@ public Map<String, Object> updateProcessDefinition(User loginUser, String projec\n         ProcessData processData = JSONUtils.parseObject(processDefinitionJson, ProcessData.class);\n         Map<String, Object> checkProcessJson = checkProcessNodeList(processData, processDefinitionJson);\n         if ((checkProcessJson.get(Constants.STATUS) != Status.SUCCESS)) {\n-            return result;\n+            return checkProcessJson;\n         }\n         ProcessDefinition processDefinition = processDao.findProcessDefineById(id);\n         if (processDefinition == null) {\n@@ -717,7 +717,9 @@ private boolean graphHasCycle(List<TaskNode> taskNodeResponseList) {\n             List<String> preTasks = JSONUtils.toList(taskNodeResponse.getPreTasks(),String.class);\n             if (CollectionUtils.isNotEmpty(preTasks)) {\n                 for (String preTask : preTasks) {\n-                    graph.addEdge(preTask, taskNodeResponse.getName());\n+                    if (!graph.addEdge(preTask, taskNodeResponse.getName())) {\n+                        return true;\n+                    }\n                 }\n             }\n         }",
      "parent_sha": "222c7ca476b91554712b737f7a1c2ed63a8218c6"
    }
  },
  {
    "oid": "5e57036831e2f0135c8545a3a98ce2bf76903a6d",
    "message": "update TaskQueueImplTest",
    "date": "2019-07-03T12:22:49Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/5e57036831e2f0135c8545a3a98ce2bf76903a6d",
    "details": {
      "sha": "72a6e46200025e40aec5ebb88eaf1f97aa8c5d02",
      "filename": "escheduler-common/src/test/java/cn/escheduler/common/queue/TaskQueueImplTest.java",
      "status": "modified",
      "additions": 38,
      "deletions": 39,
      "changes": 77,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/5e57036831e2f0135c8545a3a98ce2bf76903a6d/escheduler-common%2Fsrc%2Ftest%2Fjava%2Fcn%2Fescheduler%2Fcommon%2Fqueue%2FTaskQueueImplTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/5e57036831e2f0135c8545a3a98ce2bf76903a6d/escheduler-common%2Fsrc%2Ftest%2Fjava%2Fcn%2Fescheduler%2Fcommon%2Fqueue%2FTaskQueueImplTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-common%2Fsrc%2Ftest%2Fjava%2Fcn%2Fescheduler%2Fcommon%2Fqueue%2FTaskQueueImplTest.java?ref=5e57036831e2f0135c8545a3a98ce2bf76903a6d",
      "patch": "@@ -17,12 +17,15 @@\n package cn.escheduler.common.queue;\n \n import cn.escheduler.common.Constants;\n+import org.junit.After;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.util.Arrays;\n+import java.util.List;\n import java.util.Random;\n \n import static org.junit.Assert.assertEquals;\n@@ -34,61 +37,62 @@ public class TaskQueueImplTest {\n \n     private static final Logger logger = LoggerFactory.getLogger(TaskQueueImplTest.class);\n \n+    ITaskQueue tasksQueue = null;\n+\n+    @Before\n+    public void before(){\n+        tasksQueue = TaskQueueFactory.getTaskQueueInstance();\n+        //clear all data\n+        tasksQueue.delete();\n+\n+    }\n \n-    @Test\n-    public void testTaskQueue(){\n \n-        ITaskQueue tasksQueue = TaskQueueFactory.getTaskQueueInstance();\n+    @After\n+    public void after(){\n         //clear all data\n         tasksQueue.delete();\n+    }\n+\n+\n+    @Test\n+    public void testAdd(){\n \n         //add\n-        tasksQueue.add(Constants.SCHEDULER_TASKS_QUEUE,\"1\");\n-        tasksQueue.add(Constants.SCHEDULER_TASKS_QUEUE,\"2\");\n-        tasksQueue.add(Constants.SCHEDULER_TASKS_QUEUE,\"3\");\n-        tasksQueue.add(Constants.SCHEDULER_TASKS_QUEUE,\"4\");\n+        tasksQueue.add(Constants.SCHEDULER_TASKS_QUEUE,\"1_1_1_1_2130706433,3232236775\");\n+        tasksQueue.add(Constants.SCHEDULER_TASKS_QUEUE,\"0_1_1_1_2130706433,3232236775\");\n+        tasksQueue.add(Constants.SCHEDULER_TASKS_QUEUE,\"1_1_0_1_2130706433,3232236775\");\n+        tasksQueue.add(Constants.SCHEDULER_TASKS_QUEUE,\"1_2_1_1_2130706433,3232236775\");\n \n-        //pop\n-        String node1 = tasksQueue.poll(Constants.SCHEDULER_TASKS_QUEUE, 1).get(0);\n+        List<String> tasks = tasksQueue.poll(Constants.SCHEDULER_TASKS_QUEUE, 1);\n \n-        assertEquals(node1,\"1\");\n+        if(tasks.size() < 0){\n+            return;\n+        }\n \n-        String node2 = tasksQueue.poll(Constants.SCHEDULER_TASKS_QUEUE, 1).get(0);\n-        assertEquals(node2,\"2\");\n+        //pop\n+        String node1 = tasks.get(0);\n \n-        //sadd\n-        String task1 = \"1.1.1.1-1-mr\";\n-        String task2 = \"1.1.1.2-2-mr\";\n-        String task3 = \"1.1.1.3-3-mr\";\n-        String task4 = \"1.1.1.4-4-mr\";\n-        String task5 = \"1.1.1.5-5-mr\";\n+        assertEquals(node1,\"0_0000000001_1_0000000001\");\n \n-        tasksQueue.sadd(Constants.SCHEDULER_TASKS_KILL,task1);\n-        tasksQueue.sadd(Constants.SCHEDULER_TASKS_KILL,task2);\n-        tasksQueue.sadd(Constants.SCHEDULER_TASKS_KILL,task3);\n-        tasksQueue.sadd(Constants.SCHEDULER_TASKS_KILL,task4);\n-        tasksQueue.sadd(Constants.SCHEDULER_TASKS_KILL,task5);\n-        tasksQueue.sadd(Constants.SCHEDULER_TASKS_KILL,task5); //repeat task\n+        tasks = tasksQueue.poll(Constants.SCHEDULER_TASKS_QUEUE, 1);\n \n-        Assert.assertEquals(tasksQueue.smembers(Constants.SCHEDULER_TASKS_KILL).size(),5);\n-        logger.info(Arrays.toString(tasksQueue.smembers(Constants.SCHEDULER_TASKS_KILL).toArray()));\n-        //srem\n-        tasksQueue.srem(Constants.SCHEDULER_TASKS_KILL,task5);\n-        //smembers\n-        Assert.assertEquals(tasksQueue.smembers(Constants.SCHEDULER_TASKS_KILL).size(),4);\n-        logger.info(Arrays.toString(tasksQueue.smembers(Constants.SCHEDULER_TASKS_KILL).toArray()));\n+        if(tasks.size() < 0){\n+            return;\n+        }\n \n+        String node2 = tasks.get(0);\n+        assertEquals(node2,\"0_0000000001_1_0000000001\");\n \n     }\n \n+\n+\n     /**\n      * test one million data from zookeeper queue\n      */\n     @Test\n     public void extremeTest(){\n-        ITaskQueue tasksQueue = TaskQueueFactory.getTaskQueueInstance();\n-        //clear all data\n-        tasksQueue.delete();\n         int total = 30 * 10000;\n \n         for(int i = 0; i < total; i++)\n@@ -104,11 +108,6 @@ public void extremeTest(){\n         String node1 = tasksQueue.poll(Constants.SCHEDULER_TASKS_QUEUE, 1).get(0);\n         assertEquals(node1,\"0\");\n \n-        //clear all data\n-        tasksQueue.delete();\n-\n-\n-\n     }\n \n }",
      "parent_sha": "c8906686d414363b7066c2e33221ce2172cbe781"
    }
  },
  {
    "oid": "4ea0466bc3ed9ecca62d41128aa4ccc6843d1cc4",
    "message": "cal duration in processInstancesList (#944)\n\n* rename from DatasourceUserMapper to DataSourceUserMapper\r\n\r\n* add unit test in UserMapper and WorkerGroupMapper\r\n\r\n* change cn.escheduler to org.apache.dolphinscheduler\r\n\r\n* add unit test in UdfFuncMapperTest\r\n\r\n* add unit test in UdfFuncMapperTest\r\n\r\n* remove DatabaseConfiguration\r\n\r\n* add ConnectionFactoryTest\r\n\r\n* cal duration in processInstancesList\r\n\r\n* change desc to description",
    "date": "2019-09-30T07:47:36Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/4ea0466bc3ed9ecca62d41128aa4ccc6843d1cc4",
    "details": {
      "sha": "7f68c7f4f3b50bacd5c7a32f05375f44a7032904",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UdfFuncService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/4ea0466bc3ed9ecca62d41128aa4ccc6843d1cc4/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FUdfFuncService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/4ea0466bc3ed9ecca62d41128aa4ccc6843d1cc4/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FUdfFuncService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FUdfFuncService.java?ref=4ea0466bc3ed9ecca62d41128aa4ccc6843d1cc4",
      "patch": "@@ -115,7 +115,7 @@ public Result createUdfFunction(User loginUser,\n         if (StringUtils.isNotEmpty(argTypes)) {\n             udf.setDatabase(database);\n         }\n-        udf.setDesc(desc);\n+        udf.setDescription(desc);\n         udf.setResourceId(resourceId);\n         udf.setResourceName(resource.getAlias());\n         udf.setType(type);\n@@ -220,7 +220,7 @@ public Map<String, Object> updateUdfFunc(int udfFuncId,\n         if (StringUtils.isNotEmpty(argTypes)) {\n             udf.setDatabase(database);\n         }\n-        udf.setDesc(desc);\n+        udf.setDescription(desc);\n         udf.setResourceId(resourceId);\n         udf.setResourceName(resource.getAlias());\n         udf.setType(type);",
      "parent_sha": "60a13bf5eca2f6a60edad254838dad5ad7ec321c"
    }
  },
  {
    "oid": "52c87a6fda8ff58dd4ce6998a2385aaa2e3f2706",
    "message": "fix send4LetterWord bug",
    "date": "2020-02-11T13:47:18Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/52c87a6fda8ff58dd4ce6998a2385aaa2e3f2706",
    "details": {
      "sha": "d4c11c769a075dcb66e2e246a8d90088e53b6f2b",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/FourLetterWordMain.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/52c87a6fda8ff58dd4ce6998a2385aaa2e3f2706/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Futils%2FFourLetterWordMain.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/52c87a6fda8ff58dd4ce6998a2385aaa2e3f2706/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Futils%2FFourLetterWordMain.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Futils%2FFourLetterWordMain.java?ref=52c87a6fda8ff58dd4ce6998a2385aaa2e3f2706",
      "patch": "@@ -60,21 +60,22 @@ public static String send4LetterWord(String host, int port, String cmd)\n     public static String send4LetterWord(String host, int port, String cmd, int timeout)\n             throws IOException {\n         LOG.info(\"connecting to {} {}\", host, port);\n+        Socket sock = new Socket();\n         InetSocketAddress hostaddress= host != null ? new InetSocketAddress(host, port) :\n                 new InetSocketAddress(InetAddress.getByName(null), port);\n-        \n-        try (Socket sock = new Socket();\n-             OutputStream outstream = sock.getOutputStream();\n-             BufferedReader reader =\n-                    new BufferedReader(\n-                            new InputStreamReader(sock.getInputStream()))) {\n+        BufferedReader reader = null;\n+        try {\n             sock.setSoTimeout(timeout);\n             sock.connect(hostaddress, timeout);\n+            OutputStream outstream = sock.getOutputStream();\n             outstream.write(cmd.getBytes());\n             outstream.flush();\n             // this replicates NC - close the output stream before reading\n             sock.shutdownOutput();\n \n+            reader =\n+                    new BufferedReader(\n+                            new InputStreamReader(sock.getInputStream()));\n             StringBuilder sb = new StringBuilder();\n             String line;\n             while((line = reader.readLine()) != null) {\n@@ -83,6 +84,11 @@ public static String send4LetterWord(String host, int port, String cmd, int time\n             return sb.toString();\n         } catch (SocketTimeoutException e) {\n             throw new IOException(\"Exception while executing four letter word: \" + cmd, e);\n+        } finally {\n+            sock.close();\n+            if (reader != null) {\n+                reader.close();\n+            }\n         }\n     }\n }",
      "parent_sha": "b1a68c645df5f47a4d6e25d50090b01c981debbb"
    }
  },
  {
    "oid": "b997746e6257be4236e8451d17d8bf9e4737d990",
    "message": "kill pid need kill sub process pids update",
    "date": "2019-06-05T09:26:43Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/b997746e6257be4236e8451d17d8bf9e4737d990",
    "details": {
      "sha": "0c3aec602bdbddce9e82dcbe9e536cdbfd6b7606",
      "filename": "escheduler-server/src/main/java/cn/escheduler/server/utils/ProcessUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/b997746e6257be4236e8451d17d8bf9e4737d990/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Futils%2FProcessUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/b997746e6257be4236e8451d17d8bf9e4737d990/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Futils%2FProcessUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Futils%2FProcessUtils.java?ref=b997746e6257be4236e8451d17d8bf9e4737d990",
      "patch": "@@ -264,7 +264,7 @@ public static void kill(TaskInstance taskInstance) {\n \n       logger.info(\"process id:{}, cmd:{}\", processId, cmd);\n \n-      Runtime.getRuntime().exec(cmd);\n+      OSUtils.exeCmd(cmd);\n \n       // find log and kill yarn job\n       killYarnJob(taskInstance);",
      "parent_sha": "341333655386b5e21621a5176a6b1eac6be482a1"
    }
  },
  {
    "oid": "6466cc7c41bc32596499b023ed483387cb32d02a",
    "message": "[Improvement][Master] Construct processInstance may NPE when master handling command (#12056)\n\n* [Improvement][Master] Construct processInstance may NPE when master handling command\r\n\r\n* use an enpty map\r\n\r\nCo-authored-by: xuhaihui <xuhaihui@cmss.chinamobile.com>",
    "date": "2022-09-27T01:13:48Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/6466cc7c41bc32596499b023ed483387cb32d02a",
    "details": {
      "sha": "5d9c952617b98008b5721ee51fcdc8517a022830",
      "filename": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java",
      "status": "modified",
      "additions": 27,
      "deletions": 22,
      "changes": 49,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/6466cc7c41bc32596499b023ed483387cb32d02a/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessServiceImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/6466cc7c41bc32596499b023ed483387cb32d02a/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessServiceImpl.java?ref=6466cc7c41bc32596499b023ed483387cb32d02a",
      "patch": "@@ -169,6 +169,7 @@\n import com.google.common.base.Joiner;\n import com.google.common.base.Strings;\n import com.google.common.collect.Lists;\n+\n import io.micrometer.core.annotation.Counted;\n \n /**\n@@ -938,6 +939,9 @@ private Boolean checkCmdParam(Command command, Map<String, String> cmdParam) {\n             throw new IllegalArgumentException(\"Cannot find the process definition for this workflowInstance\");\n         }\n         Map<String, String> cmdParam = JSONUtils.toMap(command.getCommandParam());\n+        if(cmdParam == null){\n+            cmdParam = new HashMap<>();\n+        }\n         int processInstanceId = command.getProcessInstanceId();\n         if (processInstanceId == 0) {\n             processInstance = generateNewProcessInstance(processDefinition, command, cmdParam);\n@@ -947,36 +951,37 @@ private Boolean checkCmdParam(Command command, Map<String, String> cmdParam) {\n                 return null;\n             }\n         }\n-        if (cmdParam != null) {\n-            CommandType commandTypeIfComplement = getCommandTypeIfComplement(processInstance, command);\n-            // reset global params while repeat running is needed by cmdParam\n-            if (commandTypeIfComplement == CommandType.REPEAT_RUNNING) {\n-                setGlobalParamIfCommanded(processDefinition, cmdParam);\n-            }\n-\n-            // time zone\n-            String timezoneId = cmdParam.get(Constants.SCHEDULE_TIMEZONE);\n \n-            // Recalculate global parameters after rerun.\n-            String globalParams = curingGlobalParamsService.curingGlobalParams(processInstance.getId(),\n-                    processDefinition.getGlobalParamMap(),\n-                    processDefinition.getGlobalParamList(),\n-                    commandTypeIfComplement,\n-                    processInstance.getScheduleTime(), timezoneId);\n-            processInstance.setGlobalParams(globalParams);\n-            processInstance.setProcessDefinition(processDefinition);\n+        CommandType commandTypeIfComplement = getCommandTypeIfComplement(processInstance, command);\n+        // reset global params while repeat running is needed by cmdParam\n+        if (commandTypeIfComplement == CommandType.REPEAT_RUNNING) {\n+            setGlobalParamIfCommanded(processDefinition, cmdParam);\n         }\n+\n+        // time zone\n+        String timezoneId = cmdParam.get(Constants.SCHEDULE_TIMEZONE);\n+\n+        // Recalculate global parameters after rerun.\n+        String globalParams = curingGlobalParamsService.curingGlobalParams(processInstance.getId(),\n+            processDefinition.getGlobalParamMap(),\n+            processDefinition.getGlobalParamList(),\n+            commandTypeIfComplement,\n+            processInstance.getScheduleTime(), timezoneId);\n+        processInstance.setGlobalParams(globalParams);\n+        processInstance.setProcessDefinition(processDefinition);\n+\n         // reset command parameter\n         if (processInstance.getCommandParam() != null) {\n             Map<String, String> processCmdParam = JSONUtils.toMap(processInstance.getCommandParam());\n+            Map<String, String> finalCmdParam = cmdParam;\n             processCmdParam.forEach((key, value) -> {\n-                if (!cmdParam.containsKey(key)) {\n-                    cmdParam.put(key, value);\n+                if (!finalCmdParam.containsKey(key)) {\n+                    finalCmdParam.put(key, value);\n                 }\n             });\n         }\n         // reset command parameter if sub process\n-        if (cmdParam != null && cmdParam.containsKey(Constants.CMD_PARAM_SUB_PROCESS)) {\n+        if (cmdParam.containsKey(Constants.CMD_PARAM_SUB_PROCESS)) {\n             processInstance.setCommandParam(command.getCommandParam());\n         }\n         if (Boolean.FALSE.equals(checkCmdParam(command, cmdParam))) {\n@@ -1009,7 +1014,7 @@ private Boolean checkCmdParam(Command command, Map<String, String> cmdParam) {\n                     initTaskInstance(this.findTaskInstanceById(taskId));\n                 }\n                 cmdParam.put(Constants.CMD_PARAM_RECOVERY_START_NODE_STRING,\n-                        String.join(Constants.COMMA, convertIntListToString(failedList)));\n+                    String.join(Constants.COMMA, convertIntListToString(failedList)));\n                 processInstance.setCommandParam(JSONUtils.toJsonString(cmdParam));\n                 processInstance.setRunTimes(runTime + 1);\n                 break;\n@@ -1027,7 +1032,7 @@ private Boolean checkCmdParam(Command command, Map<String, String> cmdParam) {\n                     initTaskInstance(this.findTaskInstanceById(taskId));\n                 }\n                 cmdParam.put(Constants.CMD_PARAM_RECOVERY_START_NODE_STRING,\n-                        String.join(\",\", convertIntListToString(stopNodeList)));\n+                    String.join(Constants.COMMA, convertIntListToString(stopNodeList)));\n                 processInstance.setCommandParam(JSONUtils.toJsonString(cmdParam));\n                 processInstance.setRunTimes(runTime + 1);\n                 break;",
      "parent_sha": "b95db4413044e48f97a6e8cf15c5d7667ddf5619"
    }
  },
  {
    "oid": "c50ad1240c4789403e9518c855c0217fc9030b5b",
    "message": "Add query result set limit. (#2459)\n\n* Optimize PropertyUtils instantiation.\r\n\r\n* Fix info error.\r\n\r\n* Add query result set limit.\r\n\r\n* fix code smell\r\n\r\nCo-authored-by: dailidong <dailidong66@gmail.com>\r\nCo-authored-by: qiaozhanwei <qiaozhanwei@outlook.com>",
    "date": "2020-04-27T02:23:29Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/c50ad1240c4789403e9518c855c0217fc9030b5b",
    "details": {
      "sha": "84e4e54a5092ffa62efcf51383658b5fd0d829f3",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/c50ad1240c4789403e9518c855c0217fc9030b5b/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/c50ad1240c4789403e9518c855c0217fc9030b5b/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java?ref=c50ad1240c4789403e9518c855c0217fc9030b5b",
      "patch": "@@ -16,15 +16,13 @@\n  */\n package org.apache.dolphinscheduler.server.worker.task.sql;\n \n-import com.alibaba.fastjson.JSON;\n import com.alibaba.fastjson.JSONArray;\n import com.alibaba.fastjson.JSONObject;\n import com.alibaba.fastjson.serializer.SerializerFeature;\n import org.apache.commons.lang.StringUtils;\n import org.apache.dolphinscheduler.alert.utils.MailUtils;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.*;\n-import org.apache.dolphinscheduler.common.enums.AuthorizationType;\n import org.apache.dolphinscheduler.common.enums.DbType;\n import org.apache.dolphinscheduler.common.enums.ShowType;\n import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;\n@@ -37,7 +35,6 @@\n import org.apache.dolphinscheduler.dao.AlertDao;\n import org.apache.dolphinscheduler.dao.datasource.BaseDataSource;\n import org.apache.dolphinscheduler.dao.datasource.DataSourceFactory;\n-import org.apache.dolphinscheduler.dao.entity.ProcessInstance;\n import org.apache.dolphinscheduler.dao.entity.User;\n import org.apache.dolphinscheduler.server.entity.SQLTaskExecutionContext;\n import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;\n@@ -78,6 +75,10 @@ public class SqlTask extends AbstractTask {\n      */\n     private TaskExecutionContext taskExecutionContext;\n \n+    /**\n+     * default query sql limit\n+     */\n+    private static final int LIMIT = 10000;\n \n     public SqlTask(TaskExecutionContext taskExecutionContext, Logger logger) {\n         super(taskExecutionContext, logger);\n@@ -257,12 +258,15 @@ private void resultProcess(ResultSet resultSet) throws Exception{\n         ResultSetMetaData md = resultSet.getMetaData();\n         int num = md.getColumnCount();\n \n-        while (resultSet.next()) {\n+        int rowCount = 0;\n+\n+        while (rowCount < LIMIT && resultSet.next()) {\n             JSONObject mapOfColValues = new JSONObject(true);\n             for (int i = 1; i <= num; i++) {\n                 mapOfColValues.put(md.getColumnName(i), resultSet.getObject(i));\n             }\n             resultJSONArray.add(mapOfColValues);\n+            rowCount++;\n         }\n         logger.debug(\"execute sql : {}\", JSONObject.toJSONString(resultJSONArray, SerializerFeature.WriteMapNullValue));\n ",
      "parent_sha": "e13c08d04f0b796050819ffe0dca5d2f8d9d7cd3"
    }
  },
  {
    "oid": "b2a2fbda1d25c4eb18cf58ceb6d062b74855cedd",
    "message": "Revert \"fix the magic number userId '0' (#6368)\" (#6378)\n\nThis reverts commit 7413b578410a53c4839920edfdf98ac89344b959.\r\n\r\nCo-authored-by: OS <29528966+lenboo@users.noreply.github.com>",
    "date": "2021-09-27T10:50:08Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/b2a2fbda1d25c4eb18cf58ceb6d062b74855cedd",
    "details": {
      "sha": "f0cbcc9a7f0bd5fb31317b9471b19ec10d2e921b",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/b2a2fbda1d25c4eb18cf58ceb6d062b74855cedd/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FResourcesServiceImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/b2a2fbda1d25c4eb18cf58ceb6d062b74855cedd/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FResourcesServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FResourcesServiceImpl.java?ref=b2a2fbda1d25c4eb18cf58ceb6d062b74855cedd",
      "patch": "@@ -136,7 +136,7 @@ public Result<Object> createDirectory(User loginUser,\n             return result;\n         }\n \n-        if (checkResourceExists(fullName, loginUser.getId(), type.ordinal())) {\n+        if (checkResourceExists(fullName, 0, type.ordinal())) {\n             logger.error(\"resource directory {} has exist, can't recreate\", fullName);\n             putMsg(result, Status.RESOURCE_EXIST);\n             return result;\n@@ -208,7 +208,7 @@ public Result<Object> createResource(User loginUser,\n \n         // check resource name exists\n         String fullName = currentDir.equals(\"/\") ? String.format(\"%s%s\",currentDir,name) : String.format(\"%s/%s\",currentDir,name);\n-        if (checkResourceExists(fullName, loginUser.getId(), type.ordinal())) {\n+        if (checkResourceExists(fullName, 0, type.ordinal())) {\n             logger.error(\"resource {} has exist, can't recreate\", RegexUtils.escapeNRT(name));\n             putMsg(result, Status.RESOURCE_EXIST);\n             return result;\n@@ -298,7 +298,7 @@ public Result<Object> updateResource(User loginUser,\n         String originResourceName = resource.getAlias();\n \n         String fullName = String.format(\"%s%s\",originFullName.substring(0,originFullName.lastIndexOf(\"/\") + 1),name);\n-        if (!originResourceName.equals(name) && checkResourceExists(fullName, loginUser.getId(), type.ordinal())) {\n+        if (!originResourceName.equals(name) && checkResourceExists(fullName, 0, type.ordinal())) {\n             logger.error(\"resource {} already exists, can't recreate\", name);\n             putMsg(result, Status.RESOURCE_EXIST);\n             return result;\n@@ -751,7 +751,7 @@ public Result<Object> delete(User loginUser, int resourceId) throws IOException\n     public Result<Object> verifyResourceName(String fullName, ResourceType type, User loginUser) {\n         Result<Object> result = new Result<>();\n         putMsg(result, Status.SUCCESS);\n-        if (checkResourceExists(fullName, loginUser.getId(), type.ordinal())) {\n+        if (checkResourceExists(fullName, 0, type.ordinal())) {\n             logger.error(\"resource type:{} name:{} has exist, can't create again.\", type, RegexUtils.escapeNRT(fullName));\n             putMsg(result, Status.RESOURCE_EXIST);\n         } else {",
      "parent_sha": "7413b578410a53c4839920edfdf98ac89344b959"
    }
  },
  {
    "oid": "e8b20def544a203bb9c927e19dae531b6f98d512",
    "message": "Fix task instance will generate multiple times when retry interval is 0/s (#13571)",
    "date": "2023-02-18T15:41:16Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/e8b20def544a203bb9c927e19dae531b6f98d512",
    "details": {
      "sha": "7a6e0c3072f771d95d7152d53899fdf08ae003ed",
      "filename": "dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/TaskStateEventHandler.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/e8b20def544a203bb9c927e19dae531b6f98d512/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fevent%2FTaskStateEventHandler.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/e8b20def544a203bb9c927e19dae531b6f98d512/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fevent%2FTaskStateEventHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fevent%2FTaskStateEventHandler.java?ref=e8b20def544a203bb9c927e19dae531b6f98d512",
      "patch": "@@ -57,10 +57,19 @@ public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,\n                 task.getState(), taskStateEvent.getStatus());\n \n         Map<Long, Integer> completeTaskMap = workflowExecuteRunnable.getCompleteTaskMap();\n+        if (task.getState().isFinished()\n+                && (taskStateEvent.getStatus() != null && taskStateEvent.getStatus().isRunning())) {\n+            String errorMessage = String.format(\n+                    \"The current task instance state is %s, but the task state event status is %s, so the task state event will be ignored\",\n+                    task.getState(),\n+                    taskStateEvent.getStatus());\n+            log.warn(errorMessage);\n+            throw new StateEventHandleError(errorMessage);\n+        }\n \n         if (task.getState().isFinished()) {\n             if (completeTaskMap.containsKey(task.getTaskCode())\n-                    && completeTaskMap.get(task.getTaskCode()) == task.getId()) {\n+                    && completeTaskMap.get(task.getTaskCode()).equals(task.getId())) {\n                 log.warn(\"The task instance is already complete, stateEvent: {}\", stateEvent);\n                 return true;\n             }",
      "parent_sha": "dd4804ee4c466066d1a02e6381904ac0225eec63"
    }
  },
  {
    "oid": "daae917320eb82a7483014424c60af535d3e2a09",
    "message": "Update ShellCommandExecutorTest.java\n\nadd unit test",
    "date": "2021-01-30T07:22:09Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/daae917320eb82a7483014424c60af535d3e2a09",
    "details": {
      "sha": "b562ee71bcf57e217b504668d7877d993dbd3dea",
      "filename": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/daae917320eb82a7483014424c60af535d3e2a09/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fshell%2FShellCommandExecutorTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/daae917320eb82a7483014424c60af535d3e2a09/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fshell%2FShellCommandExecutorTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fshell%2FShellCommandExecutorTest.java?ref=daae917320eb82a7483014424c60af535d3e2a09",
      "patch": "@@ -161,7 +161,7 @@ public int exitValue() {\n \n                 @Override\n                 public void destroy() {\n-\n+                   logger.info(\"unit test\");\n                 }\n             }};\n             ShellCommandExecutor result = (ShellCommandExecutor) method.invoke(instance, arg1s);",
      "parent_sha": "658016731fc3a04e628da18f79e53501168e0972"
    }
  },
  {
    "oid": "af217278d8472852b124d13861a8607640df9fd3",
    "message": "add note",
    "date": "2019-07-10T06:38:42Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/af217278d8472852b124d13861a8607640df9fd3",
    "details": {
      "sha": "16d2bd078a7a2dd7fe670a26c3b882733e577d05",
      "filename": "escheduler-dao/src/main/java/cn/escheduler/dao/ProcessDao.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/af217278d8472852b124d13861a8607640df9fd3/escheduler-dao%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fdao%2FProcessDao.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/af217278d8472852b124d13861a8607640df9fd3/escheduler-dao%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fdao%2FProcessDao.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-dao%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fdao%2FProcessDao.java?ref=af217278d8472852b124d13861a8607640df9fd3",
      "patch": "@@ -1011,11 +1011,11 @@ public Boolean submitTaskToQueue(TaskInstance task) {\n     }\n \n     /**\n-     * ${processInstancePriority}_${processInstanceId}_${taskInstancePriority}_${taskId}\n+     * ${processInstancePriority}_${processInstanceId}_${taskInstancePriority}_${taskId}_${task executed by ip1},${ip2}...\n      *\n      * The tasks with the highest priority are selected by comparing the priorities of the above four levels from high to low.\n      *\n-     * \u6d41\u7a0b\u5b9e\u4f8b\u4f18\u5148\u7ea7_\u6d41\u7a0b\u5b9e\u4f8bid_\u4efb\u52a1\u4f18\u5148\u7ea7_\u4efb\u52a1id       high <- low\n+     * \u6d41\u7a0b\u5b9e\u4f8b\u4f18\u5148\u7ea7_\u6d41\u7a0b\u5b9e\u4f8bid_\u4efb\u52a1\u4f18\u5148\u7ea7_\u4efb\u52a1id_\u4efb\u52a1\u6267\u884c\u673a\u5668ip1\uff0cip2...          high <- low\n      *\n      * @param taskInstance\n      * @return",
      "parent_sha": "f9d4cf46c0924140946a754f50e8185f9beb3b2a"
    }
  },
  {
    "oid": "a6e2d1eb82043b6f9654d22e0ff841caaeb38405",
    "message": "the process instance is deleted, the task corresponding to the zk queue still exists, and the task is squeezed. #754 bug fix (#775)\n\n* mission log disorder\uff0cbug #751 fix\r\n\r\n* the log path of the task and the log path of the task instance are different. The log cannot be viewed. #723\r\n\r\n* the log path of the task and the log path of the task instance are different. The log cannot be viewed. #723 bug fix\r\n\r\n* after starting kerberos authentication, tgt expires after one day\uff0cbug #742 fix\r\n\r\n* log pattern modify\r\n\r\n* LoggerServer remove comment code and ShellCommandExecutor modify\r\n\r\n* PythonCommandExecutor modify\r\n\r\n* Concurrent task log bug #730 fix\r\n\r\n* remove invalid commit\r\n\r\n* The process instance is deleted, the task corresponding to the zk queue still exists, and the task is squeezed. #754 fix bug\r\n\r\n* The process instance is deleted, the task corresponding to the zk queue still exists, and the task is squeezed. #754 re fix\r\n\r\n* The process instance is deleted, the task corresponding to the zk queue still exists, and the task is squeezed. #754 bug fix",
    "date": "2019-09-09T06:34:35Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/a6e2d1eb82043b6f9654d22e0ff841caaeb38405",
    "details": {
      "sha": "0e05d944ae8fc6a2e655439d1a7d7328d4e01595",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/service/ProcessInstanceService.java",
      "status": "modified",
      "additions": 50,
      "deletions": 18,
      "changes": 68,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/a6e2d1eb82043b6f9654d22e0ff841caaeb38405/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessInstanceService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/a6e2d1eb82043b6f9654d22e0ff841caaeb38405/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessInstanceService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessInstanceService.java?ref=a6e2d1eb82043b6f9654d22e0ff841caaeb38405",
      "patch": "@@ -32,10 +32,7 @@\n import cn.escheduler.common.process.Property;\n import cn.escheduler.common.queue.ITaskQueue;\n import cn.escheduler.common.queue.TaskQueueFactory;\n-import cn.escheduler.common.utils.CollectionUtils;\n-import cn.escheduler.common.utils.DateUtils;\n-import cn.escheduler.common.utils.JSONUtils;\n-import cn.escheduler.common.utils.ParameterUtils;\n+import cn.escheduler.common.utils.*;\n import cn.escheduler.common.utils.placeholder.BusinessTimeUtils;\n import cn.escheduler.dao.ProcessDao;\n import cn.escheduler.dao.mapper.*;\n@@ -493,29 +490,64 @@ public Map<String, Object> deleteProcessInstanceById(User loginUser, String proj\n             return result;\n         }\n \n-        int delete = processDao.deleteWorkProcessInstanceById(processInstanceId);\n-        processDao.deleteAllSubWorkProcessByParentId(processInstanceId);\n-        processDao.deleteWorkProcessMapByParentId(processInstanceId);\n+        // delete zk queue\n+        if (CollectionUtils.isNotEmpty(taskInstanceList)){\n+            for (TaskInstance taskInstance : taskInstanceList){\n+                // task instance priority\n+                int taskInstancePriority = taskInstance.getTaskInstancePriority().ordinal();\n+\n+                StringBuilder nodeValueSb = new StringBuilder(100);\n+                nodeValueSb.append(processInstancePriority)\n+                        .append(UNDERLINE)\n+                        .append(processInstanceId)\n+                        .append(UNDERLINE)\n+                        .append(taskInstancePriority)\n+                        .append(UNDERLINE)\n+                        .append(taskInstance.getId())\n+                        .append(UNDERLINE);\n+\n+                int taskWorkerGroupId = processDao.getTaskWorkerGroupId(taskInstance);\n+                WorkerGroup workerGroup = workerGroupMapper.queryById(taskWorkerGroupId);\n+\n+                if(workerGroup == null){\n+                    nodeValueSb.append(DEFAULT_WORKER_ID);\n+                }else {\n+\n+                    String ips = workerGroup.getIpList();\n+                    StringBuilder ipSb = new StringBuilder(100);\n+                    String[] ipArray = ips.split(COMMA);\n+\n+                    for (String ip : ipArray) {\n+                        long ipLong = IpUtils.ipToLong(ip);\n+                        ipSb.append(ipLong).append(COMMA);\n+                    }\n \n-        if (delete > 0) {\n-            if (CollectionUtils.isNotEmpty(taskInstanceList)){\n-                for (TaskInstance taskInstance : taskInstanceList){\n-                    // task instance priority\n-                    int taskInstancePriority = taskInstance.getTaskInstancePriority().ordinal();\n-                    String nodeValue=processInstancePriority + \"_\" + processInstanceId + \"_\" +taskInstancePriority + \"_\" + taskInstance.getId();\n-                    try {\n-                        logger.info(\"delete task queue node : {}\",nodeValue);\n-                        tasksQueue.removeNode(cn.escheduler.common.Constants.SCHEDULER_TASKS_QUEUE, nodeValue);\n-                    }catch (Exception e){\n-                        logger.error(\"delete task queue node : {}\", nodeValue);\n+                    if(ipSb.length() > 0) {\n+                        ipSb.deleteCharAt(ipSb.length() - 1);\n                     }\n+                    nodeValueSb.append(ipSb);\n+                }\n+\n+                try {\n+                    logger.info(\"delete task queue node : {}\",nodeValueSb.toString());\n+                    tasksQueue.removeNode(cn.escheduler.common.Constants.SCHEDULER_TASKS_QUEUE, nodeValueSb.toString());\n+                }catch (Exception e){\n+                    logger.error(\"delete task queue node : {}\", nodeValueSb.toString());\n                 }\n             }\n+        }\n \n+        // delete database cascade\n+        int delete = processDao.deleteWorkProcessInstanceById(processInstanceId);\n+        processDao.deleteAllSubWorkProcessByParentId(processInstanceId);\n+        processDao.deleteWorkProcessMapByParentId(processInstanceId);\n+\n+        if (delete > 0) {\n             putMsg(result, Status.SUCCESS);\n         } else {\n             putMsg(result, Status.DELETE_PROCESS_INSTANCE_BY_ID_ERROR);\n         }\n+\n         return result;\n     }\n ",
      "parent_sha": "ac8e93e76221da530340ce595805747a180348f0"
    }
  },
  {
    "oid": "ede78950836b77cceda0caafb0503a47b10fbbbd",
    "message": "Dev imp server process utils (#4263)\n\n\r\n* Adds the comment on the WINDOWSATTERN\r\n\r\nCo-authored-by: Kirs <acm_master@163.com>\r\nCo-authored-by: 0002939 <licongyang@mininglamp.com>",
    "date": "2020-12-24T09:26:51Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/ede78950836b77cceda0caafb0503a47b10fbbbd",
    "details": {
      "sha": "6c54c790fbb90473d665eabc08e8d797c05ecf23",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ProcessUtils.java",
      "status": "modified",
      "additions": 28,
      "deletions": 24,
      "changes": 52,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/ede78950836b77cceda0caafb0503a47b10fbbbd/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FProcessUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/ede78950836b77cceda0caafb0503a47b10fbbbd/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FProcessUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FProcessUtils.java?ref=ede78950836b77cceda0caafb0503a47b10fbbbd",
      "patch": "@@ -30,31 +30,35 @@\n import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;\n import org.apache.dolphinscheduler.service.log.LogClientService;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import java.io.File;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * mainly used to get the start command line of a process.\n  */\n public class ProcessUtils {\n+\n     /**\n-     * logger.\n+     * logger\n      */\n-    private static final Logger logger = LoggerFactory.getLogger(ProcessUtils.class);\n+    private static final  Logger logger = LoggerFactory.getLogger(ProcessUtils.class);\n \n     /**\n      * Initialization regularization, solve the problem of pre-compilation performance,\n-     * avoid the thread safety problem of multi-thread operation.\n+     * avoid the thread safety problem of multi-thread operation\n      */\n     private static final Pattern MACPATTERN = Pattern.compile(\"-[+|-]-\\\\s(\\\\d+)\");\n \n+    /**\n+     * Expression of PID recognition in Windows scene\n+     */\n     private static final Pattern WINDOWSATTERN = Pattern.compile(\"(\\\\d+)\");\n \n     private static final String LOCAL_PROCESS_EXEC = \"jdk.lang.Process.allowAmbiguousCommands\";\n@@ -79,7 +83,7 @@ public static String buildCommandStr(List<String> commandList) {\n             }\n \n             cmdstr = createCommandLine(\n-                VERIFICATION_LEGACY, executablePath, cmd);\n+                    VERIFICATION_LEGACY, executablePath, cmd);\n         } else {\n             String executablePath;\n             try {\n@@ -102,7 +106,7 @@ public static String buildCommandStr(List<String> commandList) {\n \n             cmdstr = createCommandLine(\n \n-                isShellFile(executablePath) ? VERIFICATION_CMD_BAT : VERIFICATION_WIN32, quoteString(executablePath), cmd);\n+                    isShellFile(executablePath) ? VERIFICATION_CMD_BAT : VERIFICATION_WIN32, quoteString(executablePath), cmd);\n         }\n         return cmdstr;\n     }\n@@ -211,8 +215,8 @@ private static class LazyPattern {\n      * create command line.\n      *\n      * @param verificationType verification type\n-     * @param executablePath   executable path\n-     * @param cmd              cmd\n+     * @param executablePath executable path\n+     * @param cmd cmd\n      * @return command line\n      */\n     private static String createCommandLine(int verificationType, final String executablePath, final String[] cmd) {\n@@ -241,8 +245,8 @@ private static String createCommandLine(int verificationType, final String execu\n      * whether is quoted.\n      *\n      * @param noQuotesInside no quotes inside\n-     * @param arg            arg\n-     * @param errorMessage   error message\n+     * @param arg arg\n+     * @param errorMessage error message\n      * @return boolean\n      */\n     private static boolean isQuoted(boolean noQuotesInside, String arg, String errorMessage) {\n@@ -266,7 +270,7 @@ private static boolean isQuoted(boolean noQuotesInside, String arg, String error\n      * whether needs escaping.\n      *\n      * @param verificationType verification type\n-     * @param arg              arg\n+     * @param arg arg\n      * @return boolean\n      */\n     private static boolean needsEscaping(int verificationType, String arg) {\n@@ -287,9 +291,9 @@ private static boolean needsEscaping(int verificationType, String arg) {\n     /**\n      * kill yarn application.\n      *\n-     * @param appIds      app id list\n-     * @param logger      logger\n-     * @param tenantCode  tenant code\n+     * @param appIds app id list\n+     * @param logger logger\n+     * @param tenantCode tenant code\n      * @param executePath execute path\n      */\n     public static void cancelApplication(List<String> appIds, Logger logger, String tenantCode, String executePath) {\n@@ -301,7 +305,7 @@ public static void cancelApplication(List<String> appIds, Logger logger, String\n \n                     if (!applicationStatus.typeIsFinished()) {\n                         String commandFile = String\n-                            .format(\"%s/%s.kill\", executePath, appId);\n+                                .format(\"%s/%s.kill\", executePath, appId);\n                         String cmd = \"yarn application -kill \" + appId;\n                         execYarnKillCommand(logger, tenantCode, appId, commandFile, cmd);\n                     }\n@@ -315,11 +319,11 @@ public static void cancelApplication(List<String> appIds, Logger logger, String\n     /**\n      * build kill command for yarn application\n      *\n-     * @param logger      logger\n-     * @param tenantCode  tenant code\n-     * @param appId       app id\n+     * @param logger logger\n+     * @param tenantCode tenant code\n+     * @param appId app id\n      * @param commandFile command file\n-     * @param cmd         cmd\n+     * @param cmd cmd\n      */\n     private static void execYarnKillCommand(Logger logger, String tenantCode, String appId, String commandFile, String cmd) {\n         try {\n@@ -361,7 +365,7 @@ public static void kill(TaskExecutionContext taskExecutionContext) {\n             int processId = taskExecutionContext.getProcessId();\n             if (processId == 0) {\n                 logger.error(\"process kill failed, process id :{}, task id:{}\",\n-                    processId, taskExecutionContext.getTaskInstanceId());\n+                        processId, taskExecutionContext.getTaskInstanceId());\n                 return;\n             }\n \n@@ -422,8 +426,8 @@ public static void killYarnJob(TaskExecutionContext taskExecutionContext) {\n             try {\n                 logClient = new LogClientService();\n                 log = logClient.viewLog(Host.of(taskExecutionContext.getHost()).getIp(),\n-                    Constants.RPC_PORT,\n-                    taskExecutionContext.getLogPath());\n+                        Constants.RPC_PORT,\n+                        taskExecutionContext.getLogPath());\n             } finally {\n                 if (logClient != null) {\n                     logClient.close();",
      "parent_sha": "ec84695323190a24a0d277b1598a3bdd2baa901f"
    }
  },
  {
    "oid": "6868876a29c3099a3ea82ce1b65e82c9302fdd8d",
    "message": "fix workflow keep running when task fail (#11930)",
    "date": "2022-09-15T01:06:10Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/6868876a29c3099a3ea82ce1b65e82c9302fdd8d",
    "details": {
      "sha": "67ac86808c063ec6c44dc477438bc18697fc77cf",
      "filename": "dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/6868876a29c3099a3ea82ce1b65e82c9302fdd8d/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FWorkflowExecuteRunnable.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/6868876a29c3099a3ea82ce1b65e82c9302fdd8d/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FWorkflowExecuteRunnable.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FWorkflowExecuteRunnable.java?ref=6868876a29c3099a3ea82ce1b65e82c9302fdd8d",
      "patch": "@@ -116,6 +116,7 @@\n import org.springframework.beans.BeanUtils;\n \n import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n \n /**\n  * Workflow execute task, used to execute a workflow instance.\n@@ -180,9 +181,9 @@ public class WorkflowExecuteRunnable implements Callable<WorkflowSubmitStatue> {\n     private final Map<Long, Integer> completeTaskMap = new ConcurrentHashMap<>();\n \n     /**\n-     * depend failed task map, taskCode as key, taskId as value\n+     * depend failed task set\n      */\n-    private final Map<Long, Integer> dependFailedTaskMap = new ConcurrentHashMap<>();\n+    private final Set<Long> dependFailedTaskSet = Sets.newConcurrentHashSet();\n \n     /**\n      * forbidden task map, code as key\n@@ -805,7 +806,7 @@ private void initTaskQueue() throws StateEventHandleException, CronParseExceptio\n \n         taskFailedSubmit = false;\n         activeTaskProcessorMaps.clear();\n-        dependFailedTaskMap.clear();\n+        dependFailedTaskSet.clear();\n         completeTaskMap.clear();\n         errorTaskMap.clear();\n \n@@ -908,8 +909,8 @@ private void initTaskQueue() throws StateEventHandleException, CronParseExceptio\n                 }\n             }\n         }\n-        logger.info(\"Initialize task queue, dependFailedTaskMap: {}, completeTaskMap: {}, errorTaskMap: {}\",\n-                dependFailedTaskMap,\n+        logger.info(\"Initialize task queue, dependFailedTaskSet: {}, completeTaskMap: {}, errorTaskMap: {}\",\n+                dependFailedTaskSet,\n                 completeTaskMap,\n                 errorTaskMap);\n     }\n@@ -1494,7 +1495,7 @@ private boolean hasFailedTask() {\n         if (this.errorTaskMap.size() > 0) {\n             return true;\n         }\n-        return this.dependFailedTaskMap.size() > 0;\n+        return this.dependFailedTaskSet.size() > 0;\n     }\n \n     /**\n@@ -1845,7 +1846,7 @@ public void submitStandByTask() throws StateEventHandleException {\n                 }\n             } else if (DependResult.FAILED == dependResult) {\n                 // if the dependency fails, the current node is not submitted and the state changes to failure.\n-                dependFailedTaskMap.put(task.getTaskCode(), task.getId());\n+                dependFailedTaskSet.add(task.getTaskCode());\n                 removeTaskFromStandbyList(task);\n                 logger.info(\"Task dependent result is failed, taskInstanceId:{} depend result : {}\", task.getId(),\n                         dependResult);",
      "parent_sha": "e70c501f9aafa5b456e01a897259a940d4a0a0ed"
    }
  },
  {
    "oid": "bd10b78e292c12995e17fee32f068075a1c9e268",
    "message": "delete dup code",
    "date": "2020-02-09T02:09:31Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/bd10b78e292c12995e17fee32f068075a1c9e268",
    "details": {
      "sha": "a36253f8ef1738c55c07acff675d7089f1971e20",
      "filename": "dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/ScriptRunnerTest.java",
      "status": "modified",
      "additions": 17,
      "deletions": 24,
      "changes": 41,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/bd10b78e292c12995e17fee32f068075a1c9e268/dolphinscheduler-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FScriptRunnerTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/bd10b78e292c12995e17fee32f068075a1c9e268/dolphinscheduler-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FScriptRunnerTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-common%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FScriptRunnerTest.java?ref=bd10b78e292c12995e17fee32f068075a1c9e268",
      "patch": "@@ -36,41 +36,34 @@ public void testRunScript() {\n \n         //connect is not null\n         try {\n-            Connection conn = Mockito.mock(Connection.class);\n-            Mockito.when(conn.getAutoCommit()).thenReturn(true);\n-            PreparedStatement st = Mockito.mock(PreparedStatement.class);\n-            Mockito.when(conn.createStatement()).thenReturn(st);\n-            ResultSet rs = Mockito.mock(ResultSet.class);\n-            Mockito.when(st.getResultSet()).thenReturn(rs);\n-            ResultSetMetaData md = Mockito.mock(ResultSetMetaData.class);\n-            Mockito.when(rs.getMetaData()).thenReturn(md);\n-            Mockito.when(md.getColumnCount()).thenReturn(1);\n-            Mockito.when(rs.next()).thenReturn(true, false);\n-            ScriptRunner s2 = new ScriptRunner(conn, true, true);\n+            ScriptRunner s2 = getScriptRunner();\n             s2.runScript(new StringReader(\"select 1;\"));\n-            Mockito.verify(md).getColumnLabel(0);\n         } catch(Exception e) {\n             Assert.assertNotNull(e);\n         }\n     }\n \n+    private ScriptRunner getScriptRunner() throws SQLException {\n+        Connection conn = Mockito.mock(Connection.class);\n+        Mockito.when(conn.getAutoCommit()).thenReturn(true);\n+        PreparedStatement st = Mockito.mock(PreparedStatement.class);\n+        Mockito.when(conn.createStatement()).thenReturn(st);\n+        ResultSet rs = Mockito.mock(ResultSet.class);\n+        Mockito.when(st.getResultSet()).thenReturn(rs);\n+        ResultSetMetaData md = Mockito.mock(ResultSetMetaData.class);\n+        Mockito.when(rs.getMetaData()).thenReturn(md);\n+        Mockito.when(md.getColumnCount()).thenReturn(1);\n+        Mockito.when(rs.next()).thenReturn(true, false);\n+        ScriptRunner s2 = new ScriptRunner(conn, true, true);\n+        Mockito.verify(md).getColumnLabel(0);\n+    }\n+\n     @Test\n     public void testRunScriptWithDbName() {\n         //connect is not null\n         try {\n-            Connection conn = Mockito.mock(Connection.class);\n-            Mockito.when(conn.getAutoCommit()).thenReturn(true);\n-            PreparedStatement st = Mockito.mock(PreparedStatement.class);\n-            Mockito.when(conn.createStatement()).thenReturn(st);\n-            ResultSet rs = Mockito.mock(ResultSet.class);\n-            Mockito.when(st.getResultSet()).thenReturn(rs);\n-            ResultSetMetaData md = Mockito.mock(ResultSetMetaData.class);\n-            Mockito.when(rs.getMetaData()).thenReturn(md);\n-            Mockito.when(md.getColumnCount()).thenReturn(1);\n-            Mockito.when(rs.next()).thenReturn(true, false);\n-            ScriptRunner s = new ScriptRunner(conn, true, true);\n+            ScriptRunner s = getScriptRunner();\n             s.runScript(new StringReader(\"select 1;\"), \"test_db\");\n-            Mockito.verify(md).getColumnLabel(0);\n         } catch(Exception e) {\n             Assert.assertNotNull(e);\n         }",
      "parent_sha": "3364a8c8a971f17b0483f2c9161b4fe814607a9c"
    }
  },
  {
    "oid": "3efcf0c5acc55df05b09187e17042f7552847b04",
    "message": "Fix message in MessageRetryRunner might disorder (#14725)",
    "date": "2023-08-09T12:19:02Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/3efcf0c5acc55df05b09187e17042f7552847b04",
    "details": {
      "sha": "44befbe31de14675f5931e410c3f2b369f3d5bca",
      "filename": "dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/message/MessageRetryRunner.java",
      "status": "modified",
      "additions": 60,
      "deletions": 19,
      "changes": 79,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/3efcf0c5acc55df05b09187e17042f7552847b04/dolphinscheduler-worker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fmessage%2FMessageRetryRunner.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/3efcf0c5acc55df05b09187e17042f7552847b04/dolphinscheduler-worker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fmessage%2FMessageRetryRunner.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-worker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Fmessage%2FMessageRetryRunner.java?ref=3efcf0c5acc55df05b09187e17042f7552847b04",
      "patch": "@@ -27,19 +27,24 @@\n import org.apache.commons.collections4.MapUtils;\n \n import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import lombok.Data;\n import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Objects;\n+\n @Component\n @Slf4j\n public class MessageRetryRunner extends BaseDaemonThread {\n@@ -48,15 +53,15 @@ protected MessageRetryRunner() {\n         super(\"WorkerMessageRetryRunnerThread\");\n     }\n \n-    private static long MESSAGE_RETRY_WINDOW = Duration.ofMinutes(5L).toMillis();\n+    private static final long MESSAGE_RETRY_WINDOW = Duration.ofMinutes(5L).toMillis();\n \n     @Lazy\n     @Autowired\n     private List<MessageSender> messageSenders;\n \n-    private Map<MessageType, MessageSender<BaseMessage>> messageSenderMap = new HashMap<>();\n+    private final Map<MessageType, MessageSender<BaseMessage>> messageSenderMap = new HashMap<>();\n \n-    private Map<Integer, Map<MessageType, BaseMessage>> needToRetryMessages = new ConcurrentHashMap<>();\n+    private final Map<Integer, List<TaskInstanceMessage>> needToRetryMessages = new ConcurrentHashMap<>();\n \n     @Override\n     public synchronized void start() {\n@@ -70,14 +75,14 @@ public synchronized void start() {\n     }\n \n     public void addRetryMessage(int taskInstanceId, @NonNull MessageType messageType, BaseMessage baseMessage) {\n-        needToRetryMessages.computeIfAbsent(taskInstanceId, k -> new ConcurrentHashMap<>()).put(messageType,\n-                baseMessage);\n+        needToRetryMessages.computeIfAbsent(taskInstanceId, k -> Collections.synchronizedList(new ArrayList<>()))\n+                .add(TaskInstanceMessage.of(taskInstanceId, messageType, baseMessage));\n     }\n \n     public void removeRetryMessage(int taskInstanceId, @NonNull MessageType messageType) {\n-        Map<MessageType, BaseMessage> retryMessages = needToRetryMessages.get(taskInstanceId);\n-        if (retryMessages != null) {\n-            retryMessages.remove(messageType);\n+        List<TaskInstanceMessage> taskInstanceMessages = needToRetryMessages.get(taskInstanceId);\n+        if (taskInstanceMessages != null) {\n+            taskInstanceMessages.remove(TaskInstanceMessage.of(taskInstanceId, messageType, null));\n         }\n     }\n \n@@ -86,10 +91,10 @@ public void removeRetryMessages(int taskInstanceId) {\n     }\n \n     public void updateMessageHost(int taskInstanceId, String messageReceiverHost) {\n-        Map<MessageType, BaseMessage> needToRetryMessages = this.needToRetryMessages.get(taskInstanceId);\n-        if (needToRetryMessages != null) {\n-            needToRetryMessages.values().forEach(baseMessage -> {\n-                baseMessage.setMessageReceiverAddress(messageReceiverHost);\n+        List<TaskInstanceMessage> taskInstanceMessages = this.needToRetryMessages.get(taskInstanceId);\n+        if (taskInstanceMessages != null) {\n+            taskInstanceMessages.forEach(taskInstanceMessage -> {\n+                taskInstanceMessage.getMessage().setMessageReceiverAddress(messageReceiverHost);\n             });\n         }\n     }\n@@ -102,21 +107,21 @@ public void run() {\n                 }\n \n                 long now = System.currentTimeMillis();\n-                Iterator<Map.Entry<Integer, Map<MessageType, BaseMessage>>> iterator =\n+                Iterator<Map.Entry<Integer, List<TaskInstanceMessage>>> iterator =\n                         needToRetryMessages.entrySet().iterator();\n                 while (iterator.hasNext()) {\n-                    Map.Entry<Integer, Map<MessageType, BaseMessage>> taskEntry = iterator.next();\n+                    Map.Entry<Integer, List<TaskInstanceMessage>> taskEntry = iterator.next();\n                     Integer taskInstanceId = taskEntry.getKey();\n-                    Map<MessageType, BaseMessage> retryMessageMap = taskEntry.getValue();\n-                    if (retryMessageMap.isEmpty()) {\n+                    List<TaskInstanceMessage> taskInstanceMessages = taskEntry.getValue();\n+                    if (taskInstanceMessages.isEmpty()) {\n                         iterator.remove();\n                         continue;\n                     }\n                     LogUtils.setTaskInstanceIdMDC(taskInstanceId);\n                     try {\n-                        for (Map.Entry<MessageType, BaseMessage> messageEntry : retryMessageMap.entrySet()) {\n-                            MessageType messageType = messageEntry.getKey();\n-                            BaseMessage message = messageEntry.getValue();\n+                        for (TaskInstanceMessage taskInstanceMessage : taskInstanceMessages) {\n+                            MessageType messageType = taskInstanceMessage.getMessageType();\n+                            BaseMessage message = taskInstanceMessage.getMessage();\n                             if (now - message.getMessageSendTime() > MESSAGE_RETRY_WINDOW) {\n                                 log.info(\"Begin retry send message to master, message: {}\", message);\n                                 message.setMessageSendTime(now);\n@@ -144,4 +149,40 @@ public void run() {\n     public void clearMessage() {\n         needToRetryMessages.clear();\n     }\n+\n+    /**\n+     * If two message has the same taskInstanceId and messageType they will be considered as the same message\n+     */\n+    @Data\n+    public static class TaskInstanceMessage {\n+\n+        private long taskInstanceId;\n+        private MessageType messageType;\n+        private BaseMessage message;\n+\n+        public static TaskInstanceMessage of(long taskInstanceId, MessageType messageType, BaseMessage message) {\n+            TaskInstanceMessage taskInstanceMessage = new TaskInstanceMessage();\n+            taskInstanceMessage.setTaskInstanceId(taskInstanceId);\n+            taskInstanceMessage.setMessageType(messageType);\n+            taskInstanceMessage.setMessage(message);\n+            return taskInstanceMessage;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (o == null || getClass() != o.getClass()) {\n+                return false;\n+            }\n+            TaskInstanceMessage that = (TaskInstanceMessage) o;\n+            return taskInstanceId == that.taskInstanceId && messageType == that.messageType;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hashCode(taskInstanceId, messageType);\n+        }\n+    }\n }",
      "parent_sha": "7c37a7f9feb9df0f3c92ccab4dfdb67e25d1bfae"
    }
  },
  {
    "oid": "a92554fdb2f2146693a3f82c322e2ba002863feb",
    "message": "fix master server shutdown error (#1177)\n\n* move updateTaskState into try/catch block in case of exception\r\n\r\n* fix NPE\r\n\r\n* using conf.getInt instead of getString\r\n\r\n* for AbstractZKClient, remove the log, for it will print the same log message in createZNodePath.\r\nfor AlertDao, correct the spelling.\r\n\r\n* duplicate\r\n\r\n* refactor getTaskWorkerGroupId\r\n\r\n* add friendly log\r\n\r\n* update hearbeat thread num = 1\r\n\r\n* fix the bug when worker execute task using queue. and remove checking Tenant user anymore in TaskScheduleThread\r\n\r\n* 1. move verifyTaskInstanceIsNull after taskInstance\r\n2. keep verifyTenantIsNull/verifyTaskInstanceIsNull clean and readable\r\n\r\n* fix the message\r\n\r\n* delete before check to avoid KeeperException$NoNodeException\r\n\r\n* fix the message\r\n\r\n* check processInstance state before delete tenant\r\n\r\n* check processInstance state before delete worker group\r\n\r\n* refactor\r\n\r\n* merge api constants into common constatns\r\n\r\n* update the resource perm\r\n\r\n* update the dataSource perm\r\n\r\n* fix CheckUtils.checkUserParams method\r\n\r\n* update AlertGroupService, extends from BaseService, remove duplicate methods\r\n\r\n* refactor\r\n\r\n* modify method name\r\n\r\n* add hasProjectAndPerm method\r\n\r\n* using checkProject instead of getResultStatus\r\n\r\n* delete checkAuth method, using hasProjectAndPerm instead.\r\n\r\n* correct spelling\r\n\r\n* add transactional for deleteWorkerGroupById\r\n\r\n* add Transactional for deleteProcessInstanceById method\r\n\r\n* change sqlSessionTemplate singleton\r\n\r\n* change sqlSessionTemplate singleton and reformat code\r\n\r\n* fix unsuitable error message\r\n\r\n* update shutdownhook methods\r\n\r\n* fix worker log bug\r\n\r\n* fix api server debug mode bug\r\n\r\n* upgrade zk version\r\n\r\n* delete this line ,for zkClient.close() will do the whole thing\r\n\r\n* fix master server shutdown error",
    "date": "2019-11-08T07:48:36Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/a92554fdb2f2146693a3f82c322e2ba002863feb",
    "details": {
      "sha": "fdc6eddba8dff26f39da189b415f3b09efd5aebb",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java",
      "status": "modified",
      "additions": 24,
      "deletions": 7,
      "changes": 31,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/a92554fdb2f2146693a3f82c322e2ba002863feb/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fzk%2FZKMasterClient.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/a92554fdb2f2146693a3f82c322e2ba002863feb/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fzk%2FZKMasterClient.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fzk%2FZKMasterClient.java?ref=a92554fdb2f2146693a3f82c322e2ba002863feb",
      "patch": "@@ -73,6 +73,11 @@ public class ZKMasterClient extends AbstractZKClient {\n \tprivate static ZKMasterClient zkMasterClient = null;\n \n \n+\tprivate PathChildrenCache masterPathChildrenCache;\n+\n+\tprivate PathChildrenCache workerPathChildrenCache;\n+\n+\n \tprivate ZKMasterClient(ProcessDao processDao){\n \t\tthis.processDao = processDao;\n \t\tinit();\n@@ -133,6 +138,19 @@ public void init(){\n \t\t}\n \t}\n \n+\tpublic void close(){\n+\t\ttry {\n+\t\t\tif(masterPathChildrenCache != null){\n+\t\t\t\tmasterPathChildrenCache.close();\n+\t\t\t}\n+\t\t\tif(workerPathChildrenCache != null){\n+\t\t\t\tworkerPathChildrenCache.close();\n+\t\t\t}\n+\t\t\tsuper.close();\n+\t\t} catch (Exception ignore) {\n+\t\t}\n+\t}\n+\n \n \n \n@@ -175,12 +193,12 @@ public void registerMaster(){\n \t *  monitor master\n \t */\n \tpublic void listenerMaster(){\n-\t\tPathChildrenCache masterPc = new PathChildrenCache(zkClient,\n+\t\tmasterPathChildrenCache = new PathChildrenCache(zkClient,\n \t\t\t\tgetZNodeParentPath(ZKNodeType.MASTER), true ,defaultThreadFactory);\n \n \t\ttry {\n-\t\t\tmasterPc.start();\n-\t\t\tmasterPc.getListenable().addListener(new PathChildrenCacheListener() {\n+\t\t\tmasterPathChildrenCache.start();\n+\t\t\tmasterPathChildrenCache.getListenable().addListener(new PathChildrenCacheListener() {\n \t\t\t\t@Override\n \t\t\t\tpublic void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception {\n \t\t\t\t\tswitch (event.getType()) {\n@@ -273,12 +291,11 @@ private void alertServerDown(String serverHost, ZKNodeType zkNodeType) {\n \t *  monitor worker\n \t */\n \tpublic void listenerWorker(){\n-\n-\t\tPathChildrenCache workerPc = new PathChildrenCache(zkClient,\n+\t\tworkerPathChildrenCache = new PathChildrenCache(zkClient,\n \t\t\t\tgetZNodeParentPath(ZKNodeType.WORKER),true ,defaultThreadFactory);\n \t\ttry {\n-\t\t\tworkerPc.start();\n-\t\t\tworkerPc.getListenable().addListener(new PathChildrenCacheListener() {\n+\t\t\tworkerPathChildrenCache.start();\n+\t\t\tworkerPathChildrenCache.getListenable().addListener(new PathChildrenCacheListener() {\n \t\t\t\t@Override\n \t\t\t\tpublic void childEvent(CuratorFramework client, PathChildrenCacheEvent event) {\n \t\t\t\t\tswitch (event.getType()) {",
      "parent_sha": "5140535e120855f0ec85400fdafdd8149ff7c0b5"
    }
  },
  {
    "oid": "d772f2492b83e38c6615f4e48d6c6253f7ef74bc",
    "message": "fix: when sudo enable is false, execute command will failed (#13860)",
    "date": "2023-04-07T09:13:22Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/d772f2492b83e38c6615f4e48d6c6253f7ef74bc",
    "details": {
      "sha": "f8bfeae4943edee660a15ab1c6813bd89d06ba16",
      "filename": "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/OSUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/d772f2492b83e38c6615f4e48d6c6253f7ef74bc/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2Futils%2FOSUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/d772f2492b83e38c6615f4e48d6c6253f7ef74bc/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2Futils%2FOSUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2Futils%2FOSUtils.java?ref=d772f2492b83e38c6615f4e48d6c6253f7ef74bc",
      "patch": "@@ -39,7 +39,7 @@ private OSUtils() {\n      * @return result of sudo execute command\n      */\n     public static String getSudoCmd(String tenantCode, String command) {\n-        return StringUtils.isEmpty(tenantCode) ? command : \"sudo -u \" + tenantCode + \" \" + command;\n+        return StringUtils.isEmpty(tenantCode) || !isSudoEnable() ? command : \"sudo -u \" + tenantCode + \" \" + command;\n     }\n \n     /**",
      "parent_sha": "7e3ecfa68fbed74623dec97ae061dd386222d6a9"
    }
  },
  {
    "oid": "9a53c6ac3430c9edb1ded218d5a0190214fadc80",
    "message": "fix work oom when task logs's size is very large (#11224)",
    "date": "2022-08-01T07:28:06Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/9a53c6ac3430c9edb1ded218d5a0190214fadc80",
    "details": {
      "sha": "aa169676edc2cb38cd31957e8bfe18d49c15100c",
      "filename": "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java",
      "status": "modified",
      "additions": 14,
      "deletions": 31,
      "changes": 45,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/9a53c6ac3430c9edb1ded218d5a0190214fadc80/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2FAbstractCommandExecutor.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/9a53c6ac3430c9edb1ded218d5a0190214fadc80/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2FAbstractCommandExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fapi%2FAbstractCommandExecutor.java?ref=9a53c6ac3430c9edb1ded218d5a0190214fadc80",
      "patch": "@@ -404,48 +404,31 @@ private void parseProcessOutput(Process process) {\n      * @return app id list\n      */\n     private List<String> getAppIds(String logPath) {\n-        List<String> logs = convertFile2List(logPath);\n-\n         List<String> appIds = new ArrayList<>();\n-        /*\n-         * analysis log?get submited yarn application id\n-         */\n-        for (String log : logs) {\n-            String appId = findAppId(log);\n-            if (StringUtils.isNotEmpty(appId) && !appIds.contains(appId)) {\n-                logger.info(\"find app id: {}\", appId);\n-                appIds.add(appId);\n-            }\n-        }\n-        return appIds;\n-    }\n-\n-    /**\n-     * convert file to list\n-     *\n-     * @param filename file name\n-     * @return line list\n-     */\n-    private List<String> convertFile2List(String filename) {\n-        List<String> lineList = new ArrayList<>(100);\n-        File file = new File(filename);\n \n+        File file = new File(logPath);\n         if (!file.exists()) {\n-            return lineList;\n+            return appIds;\n         }\n \n-        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filename), StandardCharsets.UTF_8))) {\n+        /*\n+         * analysis log?get submited yarn application id\n+         */\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(logPath), StandardCharsets.UTF_8))) {\n             String line;\n             while ((line = br.readLine()) != null) {\n-                lineList.add(line);\n+                String appId = findAppId(line);\n+                if (StringUtils.isNotEmpty(appId) && !appIds.contains(appId)) {\n+                    logger.info(\"find app id: {}\", appId);\n+                    appIds.add(appId);\n+                }\n             }\n         } catch (Exception e) {\n-            logger.error(String.format(\"read file: %s failed : \", filename), e);\n+            logger.error(String.format(\"read file: %s failed : \", logPath), e);\n         }\n-\n-        return lineList;\n+        return appIds;\n     }\n-    \n+\n     /**\n      * find var pool\n      * @param line",
      "parent_sha": "0141aa511b6077fca610d6964b4727bfabeda52a"
    }
  },
  {
    "oid": "d7af3678eee75d864cfcbe8a4618829e547539c7",
    "message": "add info: master send heartbeat to zk failed: can't find zookeeper regist path of master server",
    "date": "2019-06-10T08:40:26Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/d7af3678eee75d864cfcbe8a4618829e547539c7",
    "details": {
      "sha": "bf0dcbfe75b8c36d9bd8ebce9a2a62decfdfeeaf",
      "filename": "escheduler-server/src/main/java/cn/escheduler/server/master/MasterServer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/d7af3678eee75d864cfcbe8a4618829e547539c7/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fmaster%2FMasterServer.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/d7af3678eee75d864cfcbe8a4618829e547539c7/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fmaster%2FMasterServer.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fmaster%2FMasterServer.java?ref=d7af3678eee75d864cfcbe8a4618829e547539c7",
      "patch": "@@ -216,7 +216,7 @@ public void run() {\n                 if(Stopper.isRunning()) {\n                     // send heartbeat to zk\n                     if (StringUtils.isBlank(zkMasterClient.getMasterZNode())) {\n-                        logger.error(\"master send heartbeat to zk failed\");\n+                        logger.error(\"master send heartbeat to zk failed: can't find zookeeper regist path of master server\");\n                         return;\n                     }\n ",
      "parent_sha": "1f8cc8a80727cdedb8112c251b46749a2f30a296"
    }
  },
  {
    "oid": "836bf483f8b59bb5b429d86812636e687695a4ec",
    "message": "sleep when resource in not satisfy. fix #1522",
    "date": "2019-12-19T07:01:41Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/836bf483f8b59bb5b429d86812636e687695a4ec",
    "details": {
      "sha": "6e95285ce33b62195c9d3b5a02001b851117ff87",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerThread.java",
      "status": "modified",
      "additions": 28,
      "deletions": 29,
      "changes": 57,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/836bf483f8b59bb5b429d86812636e687695a4ec/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterSchedulerThread.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/836bf483f8b59bb5b429d86812636e687695a4ec/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterSchedulerThread.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterSchedulerThread.java?ref=836bf483f8b59bb5b429d86812636e687695a4ec",
      "patch": "@@ -98,39 +98,38 @@ public void run() {\n             InterProcessMutex mutex = null;\n             try {\n \n-                if(OSUtils.checkResource(masterConfig.getMasterMaxCpuloadAvg(), masterConfig.getMasterReservedMemory())){\n-                    if (zkMasterClient.getZkClient().getState() == CuratorFrameworkState.STARTED) {\n-\n-                        // create distributed lock with the root node path of the lock space as /dolphinscheduler/lock/masters\n-                        String znodeLock = zkMasterClient.getMasterLockPath();\n-\n-                        mutex = new InterProcessMutex(zkMasterClient.getZkClient(), znodeLock);\n-                        mutex.acquire();\n-\n-                        ThreadPoolExecutor poolExecutor = (ThreadPoolExecutor) masterExecService;\n-                        int activeCount = poolExecutor.getActiveCount();\n-                        // make sure to scan and delete command  table in one transaction\n-                        Command command = processDao.findOneCommand();\n-                        if (command != null) {\n-                            logger.info(String.format(\"find one command: id: %d, type: %s\", command.getId(),command.getCommandType().toString()));\n-\n-                            try{\n-                                processInstance = processDao.handleCommand(logger, OSUtils.getHost(), this.masterExecThreadNum - activeCount, command);\n-                                if (processInstance != null) {\n-                                    logger.info(\"start master exec thread , split DAG ...\");\n-                                    masterExecService.execute(new MasterExecThread(processInstance,processDao));\n-                                }\n-                            }catch (Exception e){\n-                                logger.error(\"scan command error \", e);\n-                                processDao.moveToErrorCommand(command, e.toString());\n+                boolean runCheckFlag = OSUtils.checkResource(masterConfig.getMasterMaxCpuloadAvg(), masterConfig.getMasterReservedMemory());\n+                if(!runCheckFlag) {\n+                    Thread.sleep(Constants.SLEEP_TIME_MILLIS);\n+                    continue;\n+                }\n+                if (zkMasterClient.getZkClient().getState() == CuratorFrameworkState.STARTED) {\n+\n+                    // create distributed lock with the root node path of the lock space as /dolphinscheduler/lock/masters\n+                    String znodeLock = zkMasterClient.getMasterLockPath();\n+\n+                    mutex = new InterProcessMutex(zkMasterClient.getZkClient(), znodeLock);\n+                    mutex.acquire();\n+\n+                    ThreadPoolExecutor poolExecutor = (ThreadPoolExecutor) masterExecService;\n+                    int activeCount = poolExecutor.getActiveCount();\n+                    // make sure to scan and delete command  table in one transaction\n+                    Command command = processDao.findOneCommand();\n+                    if (command != null) {\n+                        logger.info(String.format(\"find one command: id: %d, type: %s\", command.getId(),command.getCommandType().toString()));\n+\n+                        try{\n+                            processInstance = processDao.handleCommand(logger, OSUtils.getHost(), this.masterExecThreadNum - activeCount, command);\n+                            if (processInstance != null) {\n+                                logger.info(\"start master exec thread , split DAG ...\");\n+                                masterExecService.execute(new MasterExecThread(processInstance,processDao));\n                             }\n+                        }catch (Exception e){\n+                            logger.error(\"scan command error \", e);\n+                            processDao.moveToErrorCommand(command, e.toString());\n                         }\n                     }\n                 }\n-\n-                // accessing the command table every SLEEP_TIME_MILLIS milliseconds\n-                Thread.sleep(Constants.SLEEP_TIME_MILLIS);\n-\n             }catch (Exception e){\n                 logger.error(\"master scheduler thread exception : \" + e.getMessage(),e);\n             }finally{",
      "parent_sha": "ac426f9025131e1f6fa0a75c138a48608bb0735f"
    }
  },
  {
    "oid": "c99de2010e94fa1ec90584ad9ac4af4726e3ea3f",
    "message": "[Improvement-16501][dolphinscheduler-api]typo in Status.java\uff08#16501\uff09 (#16504)",
    "date": "2024-08-23T01:05:12Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/c99de2010e94fa1ec90584ad9ac4af4726e3ea3f",
    "details": {
      "sha": "d5d79ced37401c7dbe833661efff0478a823321f",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/c99de2010e94fa1ec90584ad9ac4af4726e3ea3f/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/c99de2010e94fa1ec90584ad9ac4af4726e3ea3f/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java?ref=c99de2010e94fa1ec90584ad9ac4af4726e3ea3f",
      "patch": "@@ -239,7 +239,7 @@ public enum Status {\n     TASK_INSTANCE_HOST_IS_NULL(10191, \"task instance host is null\", \"\u4efb\u52a1\u5b9e\u4f8bhost\u4e3a\u7a7a\"),\n     QUERY_EXECUTING_WORKFLOW_ERROR(10192, \"query executing workflow error\", \"\u67e5\u8be2\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u9519\u8bef\"),\n     DELETE_PROCESS_DEFINITION_USE_BY_OTHER_FAIL(10193, \"delete process definition fail, cause used by other tasks: {0}\",\n-            \"\u5220\u9664\u5de5\u4f5c\u6d41\u5b9a\u65f6\u5931\u8d25\uff0c\u88ab\u5176\u4ed6\u4efb\u52a1\u5f15\u7528\uff1a{0}\"),\n+            \"\u5220\u9664\u5de5\u4f5c\u6d41\u5b9a\u4e49\u5931\u8d25\uff0c\u88ab\u5176\u4ed6\u4efb\u52a1\u5f15\u7528\uff1a{0}\"),\n     DELETE_TASK_USE_BY_OTHER_FAIL(10194, \"delete task {0} fail, the reason is that used by other tasks: {1}\",\n             \"\u5220\u9664\u4efb\u52a1 {0} \u5931\u8d25\uff0c\u88ab\u5176\u4ed6\u4efb\u52a1\u5f15\u7528\uff1a{1}\"),\n     TASK_WITH_DEPENDENT_ERROR(10195, \"task used in other tasks\", \"\u5220\u9664\u88ab\u5176\u4ed6\u4efb\u52a1\u5f15\u7528\"),",
      "parent_sha": "10295d322a34868c455f14d892689b7f032818f1"
    }
  },
  {
    "oid": "9b6ab81e6034e248cc1c1588156b83ba074aa499",
    "message": "fix #2334 (#2335)\n\nCo-authored-by: dailidong <dailidong66@gmail.com>",
    "date": "2020-06-29T09:36:38Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/9b6ab81e6034e248cc1c1588156b83ba074aa499",
    "details": {
      "sha": "3001ea8e545349bfa016e0dea35748bded345b0e",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/9b6ab81e6034e248cc1c1588156b83ba074aa499/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/9b6ab81e6034e248cc1c1588156b83ba074aa499/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java?ref=9b6ab81e6034e248cc1c1588156b83ba074aa499",
      "patch": "@@ -309,7 +309,11 @@ public Connection executeFuncAndSql(SqlBinds mainSqlBinds,\n                     while (resultSet.next()) {\n                         JSONObject mapOfColValues = new JSONObject(true);\n                         for (int i = 1; i <= num; i++) {\n-                            mapOfColValues.put(md.getColumnName(i), resultSet.getObject(i));\n+                            if (StringUtils.isNotEmpty(md.getColumnLabel(i))) {\n+                                mapOfColValues.put(md.getColumnLabel(i), resultSet.getObject(i));\n+                            } else {\n+                                mapOfColValues.put(md.getColumnName(i), resultSet.getObject(i));\n+                            }\n                         }\n                         resultJSONArray.add(mapOfColValues);\n                     }",
      "parent_sha": "d8c7a44e824380e7a011230fb8a54c4b43752546"
    }
  },
  {
    "oid": "8db1e36ccc710f5d8857cee055f4ed31b9b3c962",
    "message": "add PREVIEW_SCHEDULE_ERROR and PARSE_TO_CRON_EXPRESSION_ERROR",
    "date": "2019-06-12T09:34:58Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/8db1e36ccc710f5d8857cee055f4ed31b9b3c962",
    "details": {
      "sha": "df4cebac13530ab28f3a71d0ce751fa958d5db48",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/enums/Status.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/8db1e36ccc710f5d8857cee055f4ed31b9b3c962/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fenums%2FStatus.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/8db1e36ccc710f5d8857cee055f4ed31b9b3c962/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fenums%2FStatus.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fenums%2FStatus.java?ref=8db1e36ccc710f5d8857cee055f4ed31b9b3c962",
      "patch": "@@ -161,7 +161,8 @@ public enum Status {\n     SAVE_ERROR(10136, \"save error\"),\n     DELETE_PROJECT_ERROR_DEFINES_NOT_NULL(10137, \"please delete the process definitions in project first!\"),\n     BATCH_DELETE_PROCESS_INSTANCE_BY_IDS_ERROR(10117,\"batch delete process instance by ids {0} error\"),\n-\n+    PREVIEW_SCHEDULE_ERROR(10139,\"preview schedule error\"),\n+    PARSE_TO_CRON_EXPRESSION_ERROR(10140,\"parse cron to cron expression error\"),\n \n \n     UDF_FUNCTION_NOT_EXIST(20001, \"UDF function not found\"),",
      "parent_sha": "32fae4380b53bc605219c851a8cbed733964aa4b"
    }
  },
  {
    "oid": "6b0f9b7b2157de1cd48b7801164cf5d89da5f5d2",
    "message": "delete checkAuth method, using hasProjectAndPerm instead. (#1109)\n\n* move updateTaskState into try/catch block in case of exception\r\n\r\n* fix NPE\r\n\r\n* using conf.getInt instead of getString\r\n\r\n* for AbstractZKClient, remove the log, for it will print the same log message in createZNodePath.\r\nfor AlertDao, correct the spelling.\r\n\r\n* duplicate\r\n\r\n* refactor getTaskWorkerGroupId\r\n\r\n* add friendly log\r\n\r\n* update hearbeat thread num = 1\r\n\r\n* fix the bug when worker execute task using queue. and remove checking Tenant user anymore in TaskScheduleThread\r\n\r\n* 1. move verifyTaskInstanceIsNull after taskInstance\r\n2. keep verifyTenantIsNull/verifyTaskInstanceIsNull clean and readable\r\n\r\n* fix the message\r\n\r\n* delete before check to avoid KeeperException$NoNodeException\r\n\r\n* fix the message\r\n\r\n* check processInstance state before delete tenant\r\n\r\n* check processInstance state before delete worker group\r\n\r\n* refactor\r\n\r\n* merge api constants into common constatns\r\n\r\n* update the resource perm\r\n\r\n* update the dataSource perm\r\n\r\n* fix CheckUtils.checkUserParams method\r\n\r\n* update AlertGroupService, extends from BaseService, remove duplicate methods\r\n\r\n* refactor\r\n\r\n* modify method name\r\n\r\n* add hasProjectAndPerm method\r\n\r\n* using checkProject instead of getResultStatus\r\n\r\n* delete checkAuth method, using hasProjectAndPerm instead.",
    "date": "2019-10-29T02:48:09Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/6b0f9b7b2157de1cd48b7801164cf5d89da5f5d2",
    "details": {
      "sha": "317b40e58765e1f2b73e85ca826c8865aaf5d0df",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java",
      "status": "modified",
      "additions": 17,
      "deletions": 33,
      "changes": 50,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/6b0f9b7b2157de1cd48b7801164cf5d89da5f5d2/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FSchedulerService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/6b0f9b7b2157de1cd48b7801164cf5d89da5f5d2/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FSchedulerService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FSchedulerService.java?ref=6b0f9b7b2157de1cd48b7801164cf5d89da5f5d2",
      "patch": "@@ -104,9 +104,9 @@ public Map<String, Object> insertSchedule(User loginUser, String projectName, In\n         Project project = projectMapper.queryByName(projectName);\n \n         // check project auth\n-        Map<String, Object> checkResult = checkAuth(loginUser, projectName, project);\n-        if (checkResult != null) {\n-            return checkResult;\n+        boolean hasProjectAndPerm = projectService.hasProjectAndPerm(loginUser, project, result);\n+        if (!hasProjectAndPerm) {\n+            return result;\n         }\n \n         // check work flow define release state\n@@ -186,9 +186,9 @@ public Map<String, Object> updateSchedule(User loginUser, String projectName, In\n         Project project = projectMapper.queryByName(projectName);\n \n         // check project auth\n-        Map<String, Object> checkResult = checkAuth(loginUser, projectName, project);\n-        if (checkResult != null) {\n-            return checkResult;\n+        boolean hasProjectAndPerm = projectService.hasProjectAndPerm(loginUser, project, result);\n+        if (!hasProjectAndPerm) {\n+            return result;\n         }\n \n         // check schedule exists\n@@ -276,9 +276,10 @@ public Map<String, Object> setScheduleState(User loginUser, String projectName,\n         Map<String, Object> result = new HashMap<String, Object>(5);\n \n         Project project = projectMapper.queryByName(projectName);\n-        Map<String, Object> checkResult = checkAuth(loginUser, projectName, project);\n-        if (checkResult != null) {\n-            return checkResult;\n+        // check project auth\n+        boolean hasProjectAndPerm = projectService.hasProjectAndPerm(loginUser, project, result);\n+        if (!hasProjectAndPerm) {\n+            return result;\n         }\n \n         // check schedule exists\n@@ -389,9 +390,9 @@ public Map<String, Object> querySchedule(User loginUser, String projectName, Int\n         Project project = projectMapper.queryByName(projectName);\n \n         // check project auth\n-        Map<String, Object> checkResult = checkAuth(loginUser, projectName, project);\n-        if (checkResult != null) {\n-            return checkResult;\n+        boolean hasProjectAndPerm = projectService.hasProjectAndPerm(loginUser, project, result);\n+        if (!hasProjectAndPerm) {\n+            return result;\n         }\n \n         ProcessDefinition processDefinition = processDao.findProcessDefineById(processDefineId);\n@@ -426,9 +427,9 @@ public Map<String, Object> queryScheduleList(User loginUser, String projectName)\n         Project project = projectMapper.queryByName(projectName);\n \n         // check project auth\n-        Map<String, Object> checkResult = checkAuth(loginUser, projectName, project);\n-        if (checkResult != null) {\n-            return checkResult;\n+        boolean hasProjectAndPerm = projectService.hasProjectAndPerm(loginUser, project, result);\n+        if (!hasProjectAndPerm) {\n+            return result;\n         }\n \n         List<Schedule> schedules = scheduleMapper.querySchedulerListByProjectName(projectName);\n@@ -500,23 +501,6 @@ private boolean checkValid(Map<String, Object> result, boolean bool, Status stat\n         return false;\n     }\n \n-    /**\n-     *\n-     * @param loginUser\n-     * @param projectName\n-     * @param project\n-     * @return\n-     */\n-    private Map<String, Object> checkAuth(User loginUser, String projectName, Project project) {\n-        // check project auth\n-        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n-        Status resultEnum = (Status) checkResult.get(Constants.STATUS);\n-        if (resultEnum != Status.SUCCESS) {\n-            return checkResult;\n-        }\n-        return null;\n-    }\n-\n     /**\n      * delete schedule by id\n      *\n@@ -589,7 +573,7 @@ public Map<String,Object> previewSchedule(User loginUser, String projectName, St\n             return result;\n         }\n         List<Date> selfFireDateList = CronUtils.getSelfFireDateList(startTime, endTime,cronExpression);\n-        result.put(Constants.DATA_LIST, selfFireDateList.stream().map(t -> DateUtils.dateToString(t)).limit(org.apache.dolphinscheduler.common.Constants.PREVIEW_SCHEDULE_EXECUTE_COUNT));\n+        result.put(Constants.DATA_LIST, selfFireDateList.stream().map(t -> DateUtils.dateToString(t)).limit(Constants.PREVIEW_SCHEDULE_EXECUTE_COUNT));\n         putMsg(result, Status.SUCCESS);\n         return result;\n     }",
      "parent_sha": "4275fe32db18820968afdb583a17739f22aa227e"
    }
  },
  {
    "oid": "2902c2e0d54fbe8733c53327a82f81003b245a7f",
    "message": "the task is abnormal and task is running bug fix (#1143)\n\n* add ConnectionFactoryTest and ConnectionFactory read datasource from appliction.yml\r\n\r\n* .escheduler_env.sh to dolphinscheduler_env.sh\r\n\r\n* dao yml assembly to conf directory\r\n\r\n* table name modify\r\n\r\n* entity title table  name modify\r\n\r\n* logback log name modify\r\n\r\n* running through the big process\r\n\r\n* running through the big process error modify\r\n\r\n* logback log name modify\r\n\r\n* data_source.properties rename\r\n\r\n* logback log name modify\r\n\r\n* install.sh optimization\r\n\r\n* install.sh optimization\r\n\r\n* command count modify\r\n\r\n* command state update\r\n\r\n* countCommandState sql update\r\n\r\n* countCommandState sql update\r\n\r\n* remove application.yml file\r\n\r\n* master.properties modify\r\n\r\n* install.sh modify\r\n\r\n* install.sh modify\r\n\r\n* api server startup modify\r\n\r\n* the current user quits and the session is completely emptied. bug fix\r\n\r\n* remove pom package resources\r\n\r\n* checkQueueNameExist method update\r\n\r\n* checkQueueExist\r\n\r\n* install.sh error output update\r\n\r\n* signOut error update\r\n\r\n* ProcessDao is null bug fix\r\n\r\n* install.sh add mail.user\r\n\r\n* request url variables replace\r\n\r\n* process define import bug fix\r\n\r\n* process define import export bug fix\r\n\r\n* processdefine import export bug fix\r\n\r\n* down log suffix format modify\r\n\r\n* import export process define contains crontab error bug fix\r\n\r\n* add Flink local mode\r\n\r\n* ProcessDao is null bug fix\r\n\r\n* loadAverage display problem bug fix\r\n\r\n* MasterServer rename Server\r\n\r\n* rollback .env\r\n\r\n* rollback .env\r\n\r\n* MasterServer rename Server\r\n\r\n* the task is abnormal and task is running bug fix",
    "date": "2019-11-01T09:52:41Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/2902c2e0d54fbe8733c53327a82f81003b245a7f",
    "details": {
      "sha": "3fdd60ee646deae53421c1ee7665b7cd36d14074",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskScheduleThread.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/2902c2e0d54fbe8733c53327a82f81003b245a7f/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Frunner%2FTaskScheduleThread.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/2902c2e0d54fbe8733c53327a82f81003b245a7f/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Frunner%2FTaskScheduleThread.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Frunner%2FTaskScheduleThread.java?ref=2902c2e0d54fbe8733c53327a82f81003b245a7f",
      "patch": "@@ -142,8 +142,11 @@ public void run() {\n \n         }catch (Exception e){\n             logger.error(\"task scheduler failure\", e);\n-            task.setExitStatusCode(Constants.EXIT_CODE_FAILURE);\n             kill();\n+            // update task instance state\n+            processDao.changeTaskState(ExecutionStatus.FAILURE,\n+                    new Date(),\n+                    taskInstance.getId());\n         }\n \n         logger.info(\"task instance id : {},task final status : {}\",",
      "parent_sha": "f787dcc5a503a3367634d68e288447e8082eb48f"
    }
  },
  {
    "oid": "9c92b4b240a30e54464509b2e696e3310894507a",
    "message": "fix: default datax plugin (#14204)",
    "date": "2023-06-25T08:18:38Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/9c92b4b240a30e54464509b2e696e3310894507a",
    "details": {
      "sha": "33b1f2779eaa9ccf84517d13d36977341224936e",
      "filename": "dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/9c92b4b240a30e54464509b2e696e3310894507a/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-datax%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fdatax%2FDataxUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/9c92b4b240a30e54464509b2e696e3310894507a/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-datax%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fdatax%2FDataxUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-task-plugin%2Fdolphinscheduler-task-datax%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Ftask%2Fdatax%2FDataxUtils.java?ref=9c92b4b240a30e54464509b2e696e3310894507a",
      "patch": "@@ -68,11 +68,9 @@ public static String getReaderPluginName(DbType dbType) {\n             case CLICKHOUSE:\n                 return DATAX_READER_PLUGIN_CLICKHOUSE;\n             case HIVE:\n-                return DATAX_READER_PLUGIN_RDBMS;\n             case PRESTO:\n-                return DATAX_READER_PLUGIN_RDBMS;\n             default:\n-                return null;\n+                return DATAX_READER_PLUGIN_RDBMS;\n         }\n     }\n \n@@ -91,11 +89,9 @@ public static String getWriterPluginName(DbType dbType) {\n             case DATABEND:\n                 return DATAX_WRITER_PLUGIN_DATABEND;\n             case HIVE:\n-                return DATAX_WRITER_PLUGIN_RDBMS;\n             case PRESTO:\n-                return DATAX_WRITER_PLUGIN_RDBMS;\n             default:\n-                return null;\n+                return DATAX_WRITER_PLUGIN_RDBMS;\n         }\n     }\n ",
      "parent_sha": "a7b8e071b5265ae84c2361f36d426daf5243b63c"
    }
  },
  {
    "oid": "14e80ab5fd3a6c068fe168fb76c5b9c836edf113",
    "message": "[fix-10207] When the registered alarm plugin is empty, the error message is not clear (#10224)\n\n* Improve the problem that the error message is not clear when the registered alarm plugin is empty\r\n\r\n* update error info\r\n\r\n* update error info\r\n\r\n* update error info\r\n\r\n* Update Status.java\r\n\r\nfix typo\r\n\r\nCo-authored-by: xiangzihao <460888207@qq.com>",
    "date": "2022-05-24T10:03:04Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/14e80ab5fd3a6c068fe168fb76c5b9c836edf113",
    "details": {
      "sha": "987b368cc1477a84554f0a9de85d5600d18f657a",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/14e80ab5fd3a6c068fe168fb76c5b9c836edf113/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/14e80ab5fd3a6c068fe168fb76c5b9c836edf113/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java?ref=14e80ab5fd3a6c068fe168fb76c5b9c836edf113",
      "patch": "@@ -330,7 +330,7 @@ public enum Status {\n \n     //plugin\n     PLUGIN_NOT_A_UI_COMPONENT(110001, \"query plugin error, this plugin has no UI component\", \"\u67e5\u8be2\u63d2\u4ef6\u9519\u8bef\uff0c\u6b64\u63d2\u4ef6\u65e0UI\u7ec4\u4ef6\"),\n-    QUERY_PLUGINS_RESULT_IS_NULL(110002, \"query plugins result is null\", \"\u67e5\u8be2\u63d2\u4ef6\u4e3a\u7a7a\"),\n+    QUERY_PLUGINS_RESULT_IS_NULL(110002, \"query alarm plugins result is empty, please check the startup status of the alarm component and confirm that the relevant alarm plugin is successfully registered\", \"\u67e5\u8be2\u544a\u8b66\u63d2\u4ef6\u4e3a\u7a7a, \u8bf7\u68c0\u67e5\u544a\u8b66\u7ec4\u4ef6\u542f\u52a8\u72b6\u6001\u5e76\u786e\u8ba4\u76f8\u5173\u544a\u8b66\u63d2\u4ef6\u5df2\u6ce8\u518c\u6210\u529f\"),\n     QUERY_PLUGINS_ERROR(110003, \"query plugins error\", \"\u67e5\u8be2\u63d2\u4ef6\u9519\u8bef\"),\n     QUERY_PLUGIN_DETAIL_RESULT_IS_NULL(110004, \"query plugin detail result is null\", \"\u67e5\u8be2\u63d2\u4ef6\u8be6\u60c5\u7ed3\u679c\u4e3a\u7a7a\"),\n ",
      "parent_sha": "5998c73aac2f2532fca90fb8fe8ba431c322ffe3"
    }
  },
  {
    "oid": "b85b59375e89e9aead05bc447b06ec922e82b75c",
    "message": "Update HadoopUtils.java\n\noptimize HadoopUtils",
    "date": "2020-04-16T10:38:24Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/b85b59375e89e9aead05bc447b06ec922e82b75c",
    "details": {
      "sha": "02f00ce330571056a360c6f9e151b442bdee27db",
      "filename": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java",
      "status": "modified",
      "additions": 158,
      "deletions": 124,
      "changes": 282,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/b85b59375e89e9aead05bc447b06ec922e82b75c/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FHadoopUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/b85b59375e89e9aead05bc447b06ec922e82b75c/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FHadoopUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FHadoopUtils.java?ref=b85b59375e89e9aead05bc447b06ec922e82b75c",
      "patch": "@@ -16,13 +16,17 @@\n  */\n package org.apache.dolphinscheduler.common.utils;\n \n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.ExecutionStatus;\n import org.apache.dolphinscheduler.common.enums.ResUploadType;\n import com.alibaba.fastjson.JSON;\n import com.alibaba.fastjson.JSONException;\n import com.alibaba.fastjson.JSONObject;\n import org.apache.commons.io.IOUtils;\n+import org.apache.dolphinscheduler.common.enums.ResourceType;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.*;\n import org.apache.hadoop.fs.FileSystem;\n@@ -32,9 +36,12 @@\n import org.slf4j.LoggerFactory;\n \n import java.io.*;\n+import java.nio.file.Files;\n import java.security.PrivilegedExceptionAction;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -52,37 +59,47 @@ public class HadoopUtils implements Closeable {\n     public static final String resourceUploadPath = PropertyUtils.getString(RESOURCE_UPLOAD_PATH, \"/dolphinscheduler\");\n     public static final String rmHaIds = PropertyUtils.getString(Constants.YARN_RESOURCEMANAGER_HA_RM_IDS);\n     public static final String appAddress = PropertyUtils.getString(Constants.YARN_APPLICATION_STATUS_ADDRESS);\n-    private static volatile HadoopUtils instance = new HadoopUtils();\n-    private static volatile Configuration configuration;\n+\n+    private static final String HADOOP_UTILS_KEY = \"HADOOP_UTILS_KEY\";\n+\n+    private static final LoadingCache<String, HadoopUtils> cache = CacheBuilder\n+            .newBuilder()\n+            .expireAfterWrite(PropertyUtils.getInt(Constants.KERBEROS_EXPIRE_TIME, 7), TimeUnit.DAYS)\n+            .build(new CacheLoader<String, HadoopUtils>() {\n+                @Override\n+                public HadoopUtils load(String key) throws Exception {\n+                    return new HadoopUtils();\n+                }\n+            });\n+\n     private static volatile boolean yarnEnabled = false;\n-    private static FileSystem fs;\n \n+    private Configuration configuration;\n+    private FileSystem fs;\n \n-    private HadoopUtils(){\n+    private HadoopUtils() {\n         init();\n         initHdfsPath();\n     }\n \n-    public static HadoopUtils getInstance(){\n-        // if kerberos startup , renew HadoopUtils\n-        if (CommonUtils.getKerberosStartupState()){\n-            return new HadoopUtils();\n-        }\n-        return instance;\n+    public static HadoopUtils getInstance() {\n+\n+        return cache.getUnchecked(HADOOP_UTILS_KEY);\n     }\n \n     /**\n      * init dolphinscheduler root path in hdfs\n      */\n-    private void initHdfsPath(){\n+\n+    private void initHdfsPath() {\n         Path path = new Path(resourceUploadPath);\n \n         try {\n             if (!fs.exists(path)) {\n                 fs.mkdirs(path);\n             }\n         } catch (Exception e) {\n-            logger.error(e.getMessage(),e);\n+            logger.error(e.getMessage(), e);\n         }\n     }\n \n@@ -91,76 +108,68 @@ private void initHdfsPath(){\n      * init hadoop configuration\n      */\n     private void init() {\n-        if (configuration == null) {\n-            synchronized (HadoopUtils.class) {\n-                if (configuration == null) {\n-                    try {\n-                        configuration = new Configuration();\n-\n-                        String resourceStorageType = PropertyUtils.getString(Constants.RESOURCE_STORAGE_TYPE);\n-                        ResUploadType resUploadType = ResUploadType.valueOf(resourceStorageType);\n-\n-                        if (resUploadType == ResUploadType.HDFS){\n-                            if (PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE,false)){\n-                                System.setProperty(Constants.JAVA_SECURITY_KRB5_CONF,\n-                                        PropertyUtils.getString(Constants.JAVA_SECURITY_KRB5_CONF_PATH));\n-                                configuration.set(Constants.HADOOP_SECURITY_AUTHENTICATION,\"kerberos\");\n-                                hdfsUser = \"\";\n-                                UserGroupInformation.setConfiguration(configuration);\n-                                UserGroupInformation.loginUserFromKeytab(PropertyUtils.getString(Constants.LOGIN_USER_KEY_TAB_USERNAME),\n-                                        PropertyUtils.getString(Constants.LOGIN_USER_KEY_TAB_PATH));\n-                            }\n+        try {\n+            configuration = new Configuration();\n+\n+            String resourceStorageType = PropertyUtils.getString(Constants.RESOURCE_STORAGE_TYPE);\n+            ResUploadType resUploadType = ResUploadType.valueOf(resourceStorageType);\n+\n+            if (resUploadType == ResUploadType.HDFS){\n+                if (PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE,false)){\n+                    System.setProperty(Constants.JAVA_SECURITY_KRB5_CONF,\n+                            PropertyUtils.getString(Constants.JAVA_SECURITY_KRB5_CONF_PATH));\n+                    configuration.set(Constants.HADOOP_SECURITY_AUTHENTICATION,\"kerberos\");\n+                    hdfsUser = \"\";\n+                    UserGroupInformation.setConfiguration(configuration);\n+                    UserGroupInformation.loginUserFromKeytab(PropertyUtils.getString(Constants.LOGIN_USER_KEY_TAB_USERNAME),\n+                            PropertyUtils.getString(Constants.LOGIN_USER_KEY_TAB_PATH));\n+                }\n \n-                            String defaultFS = configuration.get(Constants.FS_DEFAULTFS);\n-                            //first get key from core-site.xml hdfs-site.xml ,if null ,then try to get from properties file\n-                            // the default is the local file system\n-                            if(defaultFS.startsWith(\"file\")){\n-                                String defaultFSProp = PropertyUtils.getString(Constants.FS_DEFAULTFS);\n-                                if(StringUtils.isNotBlank(defaultFSProp)){\n-                                    Map<String, String> fsRelatedProps = PropertyUtils.getPrefixedProperties(\"fs.\");\n-                                    configuration.set(Constants.FS_DEFAULTFS,defaultFSProp);\n-                                    fsRelatedProps.forEach((key, value) -> configuration.set(key, value));\n-                                }else{\n-                                    logger.error(\"property:{} can not to be empty, please set!\", Constants.FS_DEFAULTFS );\n-                                    throw new RuntimeException(\n-                                        String.format(\"property: %s can not to be empty, please set!\", Constants.FS_DEFAULTFS)\n-                                        );\n-                                }\n-                            }else{\n-                                logger.info(\"get property:{} -> {}, from core-site.xml hdfs-site.xml \", Constants.FS_DEFAULTFS, defaultFS);\n-                            }\n+                String defaultFS = configuration.get(Constants.FS_DEFAULTFS);\n+                //first get key from core-site.xml hdfs-site.xml ,if null ,then try to get from properties file\n+                // the default is the local file system\n+                if (defaultFS.startsWith(\"file\")) {\n+                    String defaultFSProp = PropertyUtils.getString(Constants.FS_DEFAULTFS);\n+                    if (StringUtils.isNotBlank(defaultFSProp)) {\n+                        Map<String, String> fsRelatedProps = PropertyUtils.getPrefixedProperties(\"fs.\");\n+                        configuration.set(Constants.FS_DEFAULTFS, defaultFSProp);\n+                        fsRelatedProps.forEach((key, value) -> configuration.set(key, value));\n+                    } else {\n+                        logger.error(\"property:{} can not to be empty, please set!\", Constants.FS_DEFAULTFS);\n+                        throw new RuntimeException(\n+                                String.format(\"property: %s can not to be empty, please set!\", Constants.FS_DEFAULTFS)\n+                        );\n+                    }\n+                } else {\n+                    logger.info(\"get property:{} -> {}, from core-site.xml hdfs-site.xml \", Constants.FS_DEFAULTFS, defaultFS);\n+                }\n \n-                            if (fs == null) {\n-                                if(StringUtils.isNotEmpty(hdfsUser)){\n-                                    //UserGroupInformation ugi = UserGroupInformation.createProxyUser(hdfsUser,UserGroupInformation.getLoginUser());\n-                                    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(hdfsUser);\n-                                    ugi.doAs(new PrivilegedExceptionAction<Boolean>() {\n-                                        @Override\n-                                        public Boolean run() throws Exception {\n-                                            fs = FileSystem.get(configuration);\n-                                            return true;\n-                                        }\n-                                    });\n-                                }else{\n-                                    logger.warn(\"hdfs.root.user is not set value!\");\n-                                    fs = FileSystem.get(configuration);\n-                                }\n+                if (fs == null) {\n+                    if (StringUtils.isNotEmpty(hdfsUser)) {\n+                        UserGroupInformation ugi = UserGroupInformation.createRemoteUser(hdfsUser);\n+                        ugi.doAs(new PrivilegedExceptionAction<Boolean>() {\n+                            @Override\n+                            public Boolean run() throws Exception {\n+                                fs = FileSystem.get(configuration);\n+                                return true;\n                             }\n-                        }else if (resUploadType == ResUploadType.S3){\n-                            configuration.set(Constants.FS_DEFAULTFS, PropertyUtils.getString(Constants.FS_DEFAULTFS));\n-                            configuration.set(Constants.FS_S3A_ENDPOINT, PropertyUtils.getString(Constants.FS_S3A_ENDPOINT));\n-                            configuration.set(Constants.FS_S3A_ACCESS_KEY, PropertyUtils.getString(Constants.FS_S3A_ACCESS_KEY));\n-                            configuration.set(Constants.FS_S3A_SECRET_KEY, PropertyUtils.getString(Constants.FS_S3A_SECRET_KEY));\n-                            fs = FileSystem.get(configuration);\n-                        }\n-\n-\n-                    } catch (Exception e) {\n-                        logger.error(e.getMessage(), e);\n+                        });\n+                    } else {\n+                        logger.warn(\"hdfs.root.user is not set value!\");\n+                        fs = FileSystem.get(configuration);\n                     }\n-\n                 }\n+            } else if (resUploadType == ResUploadType.S3) {\n+                configuration.set(Constants.FS_DEFAULTFS, PropertyUtils.getString(Constants.FS_DEFAULTFS));\n+                configuration.set(Constants.FS_S3A_ENDPOINT, PropertyUtils.getString(Constants.FS_S3A_ENDPOINT));\n+                configuration.set(Constants.FS_S3A_ACCESS_KEY, PropertyUtils.getString(Constants.FS_S3A_ACCESS_KEY));\n+                configuration.set(Constants.FS_S3A_SECRET_KEY, PropertyUtils.getString(Constants.FS_S3A_SECRET_KEY));\n+                fs = FileSystem.get(configuration);\n             }\n+\n+\n+        } catch (Exception e) {\n+            logger.error(e.getMessage(), e);\n         }\n     }\n \n@@ -206,45 +215,44 @@ public String getApplicationUrl(String applicationId) {\n     /**\n      * cat file on hdfs\n      *\n-     * @param hdfsFilePath  hdfs file path\n+     * @param hdfsFilePath hdfs file path\n      * @return byte[] byte array\n      * @throws IOException errors\n      */\n     public byte[] catFile(String hdfsFilePath) throws IOException {\n \n-        if(StringUtils.isBlank(hdfsFilePath)){\n-            logger.error(\"hdfs file path:{} is blank\",hdfsFilePath);\n-            return null;\n+        if (StringUtils.isBlank(hdfsFilePath)) {\n+            logger.error(\"hdfs file path:{} is blank\", hdfsFilePath);\n+            return new byte[0];\n         }\n \n         FSDataInputStream fsDataInputStream = fs.open(new Path(hdfsFilePath));\n         return IOUtils.toByteArray(fsDataInputStream);\n     }\n \n \n-\n     /**\n      * cat file on hdfs\n      *\n-     * @param hdfsFilePath  hdfs file path\n-     * @param skipLineNums  skip line numbers\n-     * @param limit         read how many lines\n+     * @param hdfsFilePath hdfs file path\n+     * @param skipLineNums skip line numbers\n+     * @param limit        read how many lines\n      * @return content of file\n      * @throws IOException errors\n      */\n     public List<String> catFile(String hdfsFilePath, int skipLineNums, int limit) throws IOException {\n \n-        if (StringUtils.isBlank(hdfsFilePath)){\n-            logger.error(\"hdfs file path:{} is blank\",hdfsFilePath);\n-            return null;\n+        if (StringUtils.isBlank(hdfsFilePath)) {\n+            logger.error(\"hdfs file path:{} is blank\", hdfsFilePath);\n+            return Collections.emptyList();\n         }\n \n-        try (FSDataInputStream in = fs.open(new Path(hdfsFilePath))){\n+        try (FSDataInputStream in = fs.open(new Path(hdfsFilePath))) {\n             BufferedReader br = new BufferedReader(new InputStreamReader(in));\n             Stream<String> stream = br.lines().skip(skipLineNums).limit(limit);\n             return stream.collect(Collectors.toList());\n         }\n-        \n+\n     }\n \n     /**\n@@ -277,17 +285,17 @@ public boolean copy(String srcPath, String dstPath, boolean deleteSource, boolea\n     /**\n      * the src file is on the local disk.  Add it to FS at\n      * the given dst name.\n-\n-     * @param srcFile       local file\n-     * @param dstHdfsPath   destination hdfs path\n-     * @param deleteSource  whether to delete the src\n-     * @param overwrite     whether to overwrite an existing file\n+     *\n+     * @param srcFile      local file\n+     * @param dstHdfsPath  destination hdfs path\n+     * @param deleteSource whether to delete the src\n+     * @param overwrite    whether to overwrite an existing file\n      * @return if success or not\n      * @throws IOException errors\n      */\n     public boolean copyLocalToHdfs(String srcFile, String dstHdfsPath, boolean deleteSource, boolean overwrite) throws IOException {\n         Path srcPath = new Path(srcFile);\n-        Path dstPath= new Path(dstHdfsPath);\n+        Path dstPath = new Path(dstHdfsPath);\n \n         fs.copyFromLocalFile(deleteSource, overwrite, srcPath, dstPath);\n \n@@ -297,10 +305,10 @@ public boolean copyLocalToHdfs(String srcFile, String dstHdfsPath, boolean delet\n     /**\n      * copy hdfs file to local\n      *\n-     * @param srcHdfsFilePath   source hdfs file path\n-     * @param dstFile           destination file\n-     * @param deleteSource      delete source\n-     * @param overwrite         overwrite\n+     * @param srcHdfsFilePath source hdfs file path\n+     * @param dstFile         destination file\n+     * @param deleteSource    delete source\n+     * @param overwrite       overwrite\n      * @return result of copy hdfs file to local\n      * @throws IOException errors\n      */\n@@ -311,29 +319,28 @@ public boolean copyHdfsToLocal(String srcHdfsFilePath, String dstFile, boolean d\n         if (dstPath.exists()) {\n             if (dstPath.isFile()) {\n                 if (overwrite) {\n-                    dstPath.delete();\n+                    Files.delete(dstPath.toPath());\n                 }\n             } else {\n                 logger.error(\"destination file must be a file\");\n             }\n         }\n \n-        if(!dstPath.getParentFile().exists()){\n+        if (!dstPath.getParentFile().exists()) {\n             dstPath.getParentFile().mkdirs();\n         }\n \n         return FileUtil.copy(fs, srcPath, dstPath, deleteSource, fs.getConf());\n     }\n \n     /**\n-     *\n      * delete a file\n      *\n      * @param hdfsFilePath the path to delete.\n-     * @param recursive if path is a directory and set to\n-     * true, the directory is deleted else throws an exception. In\n-     * case of a file the recursive can be set to either true or false.\n-     * @return  true if delete is successful else false.\n+     * @param recursive    if path is a directory and set to\n+     *                     true, the directory is deleted else throws an exception. In\n+     *                     case of a file the recursive can be set to either true or false.\n+     * @return true if delete is successful else false.\n      * @throws IOException errors\n      */\n     public boolean delete(String hdfsFilePath, boolean recursive) throws IOException {\n@@ -358,7 +365,7 @@ public boolean exists(String hdfsFilePath) throws IOException {\n      * @return {@link FileStatus} file status\n      * @throws Exception errors\n      */\n-    public FileStatus[] listFileStatus(String filePath)throws Exception{\n+    public FileStatus[] listFileStatus(String filePath) throws Exception {\n         try {\n             return fs.listStatus(new Path(filePath));\n         } catch (IOException e) {\n@@ -370,10 +377,11 @@ public FileStatus[] listFileStatus(String filePath)throws Exception{\n     /**\n      * Renames Path src to Path dst.  Can take place on local fs\n      * or remote DFS.\n+     *\n      * @param src path to be renamed\n      * @param dst new path after rename\n-     * @throws IOException on failure\n      * @return true if rename is successful\n+     * @throws IOException on failure\n      */\n     public boolean rename(String src, String dst) throws IOException {\n         return fs.rename(new Path(src), new Path(dst));\n@@ -403,7 +411,7 @@ public ExecutionStatus getApplicationStatus(String applicationId) throws JSONExc\n \n         String responseContent = HttpUtils.get(applicationUrl);\n \n-        JSONObject jsonObject = JSONObject.parseObject(responseContent);\n+        JSONObject jsonObject = JSON.parseObject(responseContent);\n         String result = jsonObject.getJSONObject(\"app\").getString(\"finalStatus\");\n \n         switch (result) {\n@@ -438,6 +446,22 @@ public static String getHdfsDataBasePath() {\n         }\n     }\n \n+    /**\n+     * hdfs resource dir\n+     *\n+     * @param tenantCode tenant code\n+     * @return hdfs resource dir\n+     */\n+    public static String getHdfsDir(ResourceType resourceType,String tenantCode) {\n+        String hdfsDir = \"\";\n+        if (resourceType.equals(ResourceType.FILE)) {\n+            hdfsDir = getHdfsResDir(tenantCode);\n+        } else if (resourceType.equals(ResourceType.UDF)) {\n+            hdfsDir = getHdfsUdfDir(tenantCode);\n+        }\n+        return hdfsDir;\n+    }\n+\n     /**\n      * hdfs resource dir\n      *\n@@ -452,11 +476,11 @@ public static String getHdfsResDir(String tenantCode) {\n      * hdfs user dir\n      *\n      * @param tenantCode tenant code\n-     * @param userId user id\n+     * @param userId     user id\n      * @return hdfs resource dir\n      */\n-    public static String getHdfsUserDir(String tenantCode,int userId) {\n-        return String.format(\"%s/home/%d\", getHdfsTenantDir(tenantCode),userId);\n+    public static String getHdfsUserDir(String tenantCode, int userId) {\n+        return String.format(\"%s/home/%d\", getHdfsTenantDir(tenantCode), userId);\n     }\n \n     /**\n@@ -469,26 +493,39 @@ public static String getHdfsUdfDir(String tenantCode) {\n         return String.format(\"%s/udfs\", getHdfsTenantDir(tenantCode));\n     }\n \n+\n+    /**\n+     * get hdfs file name\n+     *\n+     * @param resourceType  resource type\n+     * @param tenantCode    tenant code\n+     * @param fileName      file name\n+     * @return hdfs file name\n+     */\n+    public static String getHdfsFileName(ResourceType resourceType, String tenantCode, String fileName) {\n+        return String.format(\"%s/%s\", getHdfsDir(resourceType,tenantCode), fileName);\n+    }\n+\n     /**\n-     * get absolute path and name for file on hdfs\n+     * get absolute path and name for resource file on hdfs\n      *\n      * @param tenantCode tenant code\n-     * @param filename   file name\n+     * @param fileName   file name\n      * @return get absolute path and name for file on hdfs\n      */\n-    public static String getHdfsFilename(String tenantCode, String filename) {\n-        return String.format(\"%s/%s\", getHdfsResDir(tenantCode), filename);\n+    public static String getHdfsResourceFileName(String tenantCode, String fileName) {\n+        return String.format(\"%s/%s\", getHdfsResDir(tenantCode), fileName);\n     }\n \n     /**\n      * get absolute path and name for udf file on hdfs\n      *\n      * @param tenantCode tenant code\n-     * @param filename   file name\n+     * @param fileName   file name\n      * @return get absolute path and name for udf file on hdfs\n      */\n-    public static String getHdfsUdfFilename(String tenantCode, String filename) {\n-        return String.format(\"%s/%s\", getHdfsUdfDir(tenantCode), filename);\n+    public static String getHdfsUdfFileName(String tenantCode, String fileName) {\n+        return String.format(\"%s/%s\", getHdfsUdfDir(tenantCode), fileName);\n     }\n \n     /**\n@@ -504,7 +541,7 @@ public static String getHdfsTenantDir(String tenantCode) {\n      * getAppAddress\n      *\n      * @param appAddress app address\n-     * @param rmHa resource manager ha\n+     * @param rmHa       resource manager ha\n      * @return app address\n      */\n     public static String getAppAddress(String appAddress, String rmHa) {\n@@ -549,8 +586,6 @@ public void close() throws IOException {\n      */\n     private static final class YarnHAAdminUtils extends RMAdminCLI {\n \n-        private static final Logger logger = LoggerFactory.getLogger(YarnHAAdminUtils.class);\n-\n         /**\n          * get active resourcemanager\n          *\n@@ -609,8 +644,7 @@ public static String getRMState(String url) {\n             JSONObject jsonObject = JSON.parseObject(retStr);\n \n             //get ResourceManager state\n-            String state = jsonObject.getJSONObject(\"clusterInfo\").getString(\"haState\");\n-            return state;\n+            return jsonObject.getJSONObject(\"clusterInfo\").getString(\"haState\");\n         }\n \n     }",
      "parent_sha": "b854d6b77af6168e6fe300180dc151185d667319"
    }
  },
  {
    "oid": "2a9e789f68d6aba2bdd8a8073ac0abb4b36cd51e",
    "message": "test",
    "date": "2020-11-25T06:47:00Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/2a9e789f68d6aba2bdd8a8073ac0abb4b36cd51e",
    "details": {
      "sha": "584371d3790893054d385a4473ee5f23d43825dc",
      "filename": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/2a9e789f68d6aba2bdd8a8073ac0abb4b36cd51e/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fprocessor%2Fqueue%2FTaskResponseServiceTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/2a9e789f68d6aba2bdd8a8073ac0abb4b36cd51e/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fprocessor%2Fqueue%2FTaskResponseServiceTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fprocessor%2Fqueue%2FTaskResponseServiceTest.java?ref=2a9e789f68d6aba2bdd8a8073ac0abb4b36cd51e",
      "patch": "@@ -93,10 +93,8 @@ public void after() {\n \n         long maxWaitTime = 3 * 60 * 1000;\n \n-        while (System.currentTimeMillis() - maxWaitTime - startTime < 0) {\n-            if (taskResponseService.getEventQueue().size() == 0) {\n-                return;\n-            }\n+        while (taskResponseService.getEventQueue().size() != 0) {\n+\n         }\n \n         Assert.assertEquals(0, taskResponseService.getEventQueue().size());",
      "parent_sha": "b3991d9dee307191f200a6b660d7264d874d3cb9"
    }
  },
  {
    "oid": "96041e38766d1eb391812150fa15adc806ba2d4c",
    "message": "fix invalid registry path ends with 'master' or 'worker' (#14328)\n\nCo-authored-by: Zinway Liu <zinway.liu@ucloud.cn>\r\nCo-authored-by: Aaron Wang <wangweirao16@gmail.com>",
    "date": "2023-09-01T07:11:49Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/96041e38766d1eb391812150fa15adc806ba2d4c",
    "details": {
      "sha": "f690b6800fea007b8697d337989584579b34c4c3",
      "filename": "dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/RegistryClient.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/96041e38766d1eb391812150fa15adc806ba2d4c/dolphinscheduler-registry%2Fdolphinscheduler-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fregistry%2Fapi%2FRegistryClient.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/96041e38766d1eb391812150fa15adc806ba2d4c/dolphinscheduler-registry%2Fdolphinscheduler-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fregistry%2Fapi%2FRegistryClient.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-registry%2Fdolphinscheduler-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fregistry%2Fapi%2FRegistryClient.java?ref=96041e38766d1eb391812150fa15adc806ba2d4c",
      "patch": "@@ -210,11 +210,11 @@ public IStoppable getStoppable() {\n     }\n \n     public boolean isMasterPath(String path) {\n-        return path != null && path.startsWith(RegistryNodeType.MASTER.getRegistryPath());\n+        return path != null && path.startsWith(RegistryNodeType.MASTER.getRegistryPath() + Constants.SINGLE_SLASH);\n     }\n \n     public boolean isWorkerPath(String path) {\n-        return path != null && path.startsWith(RegistryNodeType.WORKER.getRegistryPath());\n+        return path != null && path.startsWith(RegistryNodeType.WORKER.getRegistryPath() + Constants.SINGLE_SLASH);\n     }\n \n     public Collection<String> getChildrenKeys(final String key) {",
      "parent_sha": "7640c29495f694c7eb161dcff4a49dd8272622e5"
    }
  },
  {
    "oid": "56146998880ea4d4fda9a266a078c5b14a2dbaa4",
    "message": "[Fix-17050][Master] Fix workflow graph topology logical error (#17051)",
    "date": "2025-03-14T03:28:16Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/56146998880ea4d4fda9a266a078c5b14a2dbaa4",
    "details": {
      "sha": "7734e7e0dff6b0385b3a6d26c38093a4f983d3ed",
      "filename": "dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/graph/WorkflowGraphTopologyLogicalVisitor.java",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/56146998880ea4d4fda9a266a078c5b14a2dbaa4/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fengine%2Fgraph%2FWorkflowGraphTopologyLogicalVisitor.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/56146998880ea4d4fda9a266a078c5b14a2dbaa4/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fengine%2Fgraph%2FWorkflowGraphTopologyLogicalVisitor.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-master%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Fengine%2Fgraph%2FWorkflowGraphTopologyLogicalVisitor.java?ref=56146998880ea4d4fda9a266a078c5b14a2dbaa4",
      "patch": "@@ -131,20 +131,26 @@ private void doVisitationInSubGraph(Set<String> subGraphNodes) {\n                 .filter(entry -> entry.getValue() == 0)\n                 .map(Map.Entry::getKey)\n                 .collect(Collectors.toCollection(LinkedList::new));\n+        // Visited table, used to record the visited nodes\n+        Set<String> visitedTaskCodes = new HashSet<>();\n \n         while (!bootstrapTaskCodes.isEmpty()) {\n             String taskName = bootstrapTaskCodes.removeFirst();\n             if (inDegreeMap.get(taskName) > 0) {\n                 continue;\n             }\n-            final Set<String> successors = workflowGraph.getSuccessors(taskName);\n-            if (subGraphNodes.contains(taskName)) {\n-                visitFunction.accept(taskName, successors);\n+            // Visit only when the in-degree is 0\n+            if (!visitedTaskCodes.contains(taskName)) {\n+                visitedTaskCodes.add(taskName); // Record the nodes\n+                final Set<String> successors = workflowGraph.getSuccessors(taskName);\n+                if (subGraphNodes.contains(taskName)) {\n+                    visitFunction.accept(taskName, successors);\n+                }\n+                for (String successor : successors) {\n+                    inDegreeMap.put(successor, inDegreeMap.get(successor) - 1);\n+                }\n+                bootstrapTaskCodes.addAll(successors);\n             }\n-            for (String successor : successors) {\n-                inDegreeMap.put(successor, inDegreeMap.get(successor) - 1);\n-            }\n-            bootstrapTaskCodes.addAll(successors);\n         }\n     }\n ",
      "parent_sha": "1c361bbac4643f0510a34f492d6d684949a1b0c2"
    }
  },
  {
    "oid": "640774595dfdf111acdaf9bb69c007f9317ffde3",
    "message": "Update DataAnalysisServiceImpl.java",
    "date": "2020-08-23T02:59:04Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/640774595dfdf111acdaf9bb69c007f9317ffde3",
    "details": {
      "sha": "7527a1a5366bf58fd092df4999ed2e8db370df83",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataAnalysisServiceImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/640774595dfdf111acdaf9bb69c007f9317ffde3/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FDataAnalysisServiceImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/640774595dfdf111acdaf9bb69c007f9317ffde3/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FDataAnalysisServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FDataAnalysisServiceImpl.java?ref=640774595dfdf111acdaf9bb69c007f9317ffde3",
      "patch": "@@ -129,7 +129,7 @@ public Map<String, Object> countProcessInstanceStateByProject(User loginUser, in\n                 endDate,\n                 (start, end, projectIds) -> this.processInstanceMapper.countInstanceStateByUser(start, end, projectIds));\n         // process state count needs to remove state of forced success\n-        if (tmpResult.get(Constants.STATUS).equals(Status.SUCCESS)) {\n+        if (tmpResult.containsKey(Constants.STATUS) && tmpResult.get(Constants.STATUS).equals(Status.SUCCESS)) {\n             ((TaskCountDto)tmpResult.get(Constants.DATA_LIST)).removeStateFromCountList(ExecutionStatus.FORCED_SUCCESS);\n         }\n         return tmpResult;",
      "parent_sha": "1fc1218a34f2177bf92befd6c6338c955e65aa7e"
    }
  },
  {
    "oid": "19462dd13c428487f9326d7a05fbe4603f1c6e4a",
    "message": "Update CreateWorkflowLocator.java\n\nmodify CLICK_ADD_BUTTON",
    "date": "2020-07-13T05:27:24Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/19462dd13c428487f9326d7a05fbe4603f1c6e4a",
    "details": {
      "sha": "f869ab666c040d7ea143e3f1641458c66a90c94a",
      "filename": "e2e/src/test/java/org/apache/dolphinscheduler/locator/project/CreateWorkflowLocator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/19462dd13c428487f9326d7a05fbe4603f1c6e4a/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/19462dd13c428487f9326d7a05fbe4603f1c6e4a/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java?ref=19462dd13c428487f9326d7a05fbe4603f1c6e4a",
      "patch": "@@ -167,8 +167,9 @@ public class CreateWorkflowLocator {\n     public static final By CLICK_DELETE_WORKFLOW_GLOBAL_PARAMETERS = By.xpath(\"//div[2]/span/a/em\");\n \n     //click add button\n+    System.out.println(\"click submit workflow  button\");\n     public static final By CLICK_ADD_BUTTON = By.xpath(\"//div[2]/div/button[2]/span\");\n-\n+    \n     //scroll to element bottom\n     public static final By SCROLL_BOTTOM = By.xpath(\"//span/a/em\");\n ",
      "parent_sha": "290d22d631740f2c87713a7995b99ad0f45d42e1"
    }
  },
  {
    "oid": "a420644aa3232de564725ceaf7f6b194ac53feb0",
    "message": "sqoop task source type or target type is null throw exception",
    "date": "2020-06-10T14:20:01Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/a420644aa3232de564725ceaf7f6b194ac53feb0",
    "details": {
      "sha": "6bc94d0f356a6e0a0dd93507b122d4daa7457193",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/SqoopJobGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/a420644aa3232de564725ceaf7f6b194ac53feb0/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsqoop%2Fgenerator%2FSqoopJobGenerator.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/a420644aa3232de564725ceaf7f6b194ac53feb0/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsqoop%2Fgenerator%2FSqoopJobGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2Fsqoop%2Fgenerator%2FSqoopJobGenerator.java?ref=a420644aa3232de564725ceaf7f6b194ac53feb0",
      "patch": "@@ -69,7 +69,7 @@ public String generateSqoopJob(SqoopParameters sqoopParameters,TaskExecutionCont\n         if (SqoopJobType.TEMPLATE.getDescp().equals(sqoopParameters.getJobType())) {\n             createSqoopJobGenerator(sqoopParameters.getSourceType(),sqoopParameters.getTargetType());\n             if(sourceGenerator == null || targetGenerator == null){\n-                return null;\n+                throw new RuntimeException(\"sqoop task source type or target type is null\");\n             }\n \n             sqoopScripts =  commonGenerator.generate(sqoopParameters)",
      "parent_sha": "a64c2b383e4def27bd4eb90f1e1df3fe26ab54c8"
    }
  },
  {
    "oid": "8d00386d27c91fa8dc249c038268d6d5e5dcd118",
    "message": "[CodeStyle][QueueTest]import style",
    "date": "2021-02-22T05:25:57Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/8d00386d27c91fa8dc249c038268d6d5e5dcd118",
    "details": {
      "sha": "96d69d89409290380a3b6c3023ff6f52a6c5aa31",
      "filename": "dolphinscheduler-service/src/test/java/queue/TaskUpdateQueueTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/8d00386d27c91fa8dc249c038268d6d5e5dcd118/dolphinscheduler-service%2Fsrc%2Ftest%2Fjava%2Fqueue%2FTaskUpdateQueueTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/8d00386d27c91fa8dc249c038268d6d5e5dcd118/dolphinscheduler-service%2Fsrc%2Ftest%2Fjava%2Fqueue%2FTaskUpdateQueueTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-service%2Fsrc%2Ftest%2Fjava%2Fqueue%2FTaskUpdateQueueTest.java?ref=8d00386d27c91fa8dc249c038268d6d5e5dcd118",
      "patch": "@@ -17,20 +17,21 @@\n \n package queue;\n \n+import static org.junit.Assert.assertEquals;\n+\n import org.apache.dolphinscheduler.service.queue.TaskPriority;\n import org.apache.dolphinscheduler.service.queue.TaskPriorityQueue;\n import org.apache.dolphinscheduler.service.queue.TaskPriorityQueueImpl;\n-import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import org.junit.Test;\n \n public class TaskUpdateQueueTest {\n \n     /**\n      * test put\n      */\n     @Test\n-    public void testQueue() throws Exception{\n+    public void testQueue() throws Exception {\n \n         /**\n          * 1_1_2_1_default",
      "parent_sha": "450c84baf10a58cc4145974d5568a4f8798dfda5"
    }
  },
  {
    "oid": "e7c7cea4afe108df6411887c0d0a1d2c9e599b27",
    "message": "fix: NullPointException in the case of task queuing (#2175)",
    "date": "2020-06-29T09:36:28Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/e7c7cea4afe108df6411887c0d0a1d2c9e599b27",
    "details": {
      "sha": "0c44b7a77eefe3c6bfa643857284eb1243fd0a0b",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/e7c7cea4afe108df6411887c0d0a1d2c9e599b27/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/e7c7cea4afe108df6411887c0d0a1d2c9e599b27/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java?ref=e7c7cea4afe108df6411887c0d0a1d2c9e599b27",
      "patch": "@@ -1062,7 +1062,7 @@ private void killTheOtherTasks() {\n \n             TaskInstance taskInstance = taskExecThread.getTaskInstance();\n             taskInstance = processService.findTaskInstanceById(taskInstance.getId());\n-            if(taskInstance.getState().typeIsFinished()){\n+            if(taskInstance != null && taskInstance.getState().typeIsFinished()){\n                 continue;\n             }\n ",
      "parent_sha": "bdfb9d6a5097cb8ac9a4a66af6e2b3f917f5c7e2"
    }
  },
  {
    "oid": "e6bd0e3aab09639c6fe162a398be6336f6f316ca",
    "message": "updae CLICK_SAVE_WORKFLOW_BUTTON xpath",
    "date": "2020-07-13T03:46:56Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/e6bd0e3aab09639c6fe162a398be6336f6f316ca",
    "details": {
      "sha": "fec75161bb92aa78f2e2cd6d5007eb108cbf183d",
      "filename": "e2e/src/test/java/org/apache/dolphinscheduler/locator/project/CreateWorkflowLocator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/e6bd0e3aab09639c6fe162a398be6336f6f316ca/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/e6bd0e3aab09639c6fe162a398be6336f6f316ca/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java?ref=e6bd0e3aab09639c6fe162a398be6336f6f316ca",
      "patch": "@@ -126,7 +126,7 @@ public class CreateWorkflowLocator {\n      * save workflow\n      */\n     //click save workflow button\n-    public static final By CLICK_SAVE_WORKFLOW_BUTTON = By.xpath(\"/html/body/div[1]/div[2]/div/div[2]/div/div[2]/div[1]/div[2]/button[1]/span\");\n+    public static final By CLICK_SAVE_WORKFLOW_BUTTON = By.xpath(\"//button[2]/span\");\n \n     //input  workflow name\n     public static final By INPUT_WORKFLOW_NAME = By.xpath(\"//input\");",
      "parent_sha": "16a47357d09f4071bc85388e5e5b2cc3483b456b"
    }
  },
  {
    "oid": "9a6052b227bce37962411ae9345ad82552e891ff",
    "message": "[BUG][#896]Fixed duplicate name of import and export workflow and adapted Dependent component (#905)\n\n(\u4fee\u590d\u5bfc\u5165\u5bfc\u51fa\u5de5\u4f5c\u6d41\u91cd\u590d\u540d\u79f0\u548c\u9002\u914dDependent\u7ec4\u4ef6)",
    "date": "2019-09-27T02:23:53Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/9a6052b227bce37962411ae9345ad82552e891ff",
    "details": {
      "sha": "ed92ce5a02656dd9b631327eca2c6c0fc4a56e5c",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java",
      "status": "modified",
      "additions": 72,
      "deletions": 6,
      "changes": 78,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/9a6052b227bce37962411ae9345ad82552e891ff/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/9a6052b227bce37962411ae9345ad82552e891ff/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FProcessDefinitionService.java?ref=9a6052b227bce37962411ae9345ad82552e891ff",
      "patch": "@@ -547,8 +547,27 @@ public void exportProcessDefinitionById(User loginUser, String projectName, Inte\n                                 sqlParameters.put(\"datasourceName\", dataSource.getName());\n                             }\n                             taskNode.put(\"params\", sqlParameters);\n+                        }else if(taskType.equals(TaskType.DEPENDENT.name())){\n+                        JSONObject dependentParameters =  JSONUtils.parseObject(taskNode.getString(\"dependence\"));\n+                        if(dependentParameters != null){\n+                            JSONArray dependTaskList = (JSONArray) dependentParameters.get(\"dependTaskList\");\n+                            for (int j = 0; j < dependTaskList.size(); j++) {\n+                                JSONObject dependentTaskModel = dependTaskList.getJSONObject(j);\n+                                JSONArray dependItemList = (JSONArray) dependentTaskModel.get(\"dependItemList\");\n+                                for (int k = 0; k < dependItemList.size(); k++) {\n+                                    JSONObject dependentItem = dependItemList.getJSONObject(k);\n+                                    int definitionId = dependentItem.getInteger(\"definitionId\");\n+                                    ProcessDefinition definition = processDefineMapper.queryByDefineId(definitionId);\n+                                    if(definition != null){\n+                                        dependentItem.put(\"projectName\",definition.getProjectName());\n+                                        dependentItem.put(\"definitionName\",definition.getName());\n+                                    }\n+                                }\n+                            }\n+                            taskNode.put(\"dependence\", dependentParameters);\n                         }\n                     }\n+                    }\n                 }\n                 jsonObject.put(\"tasks\", jsonArray);\n                 processDefinition.setProcessDefinitionJson(jsonObject.toString());\n@@ -643,16 +662,19 @@ public Map<String, Object> importProcessDefinition(User loginUser, MultipartFile\n                     projectName = json.get(\"projectName\").toString();\n                 } else {\n                     putMsg(result, Status.DATA_IS_NULL, \"processDefinitionName\");\n+                    return result;\n                 }\n                 if (ObjectUtils.allNotNull(json.get(\"processDefinitionName\"))) {\n                     processDefinitionName = json.get(\"processDefinitionName\").toString();\n                 } else {\n                     putMsg(result, Status.DATA_IS_NULL, \"processDefinitionName\");\n+                    return result;\n                 }\n                 if (ObjectUtils.allNotNull(json.get(\"processDefinitionJson\"))) {\n                     processDefinitionJson = json.get(\"processDefinitionJson\").toString();\n                 } else {\n                     putMsg(result, Status.DATA_IS_NULL, \"processDefinitionJson\");\n+                    return result;\n                 }\n                 if (ObjectUtils.allNotNull(json.get(\"processDefinitionDesc\"))) {\n                     processDefinitionDesc = json.get(\"processDefinitionDesc\").toString();\n@@ -664,17 +686,46 @@ public Map<String, Object> importProcessDefinition(User loginUser, MultipartFile\n                     processDefinitionConnects = json.get(\"processDefinitionConnects\").toString();\n                 }\n \n+                Project project = projectMapper.queryByName(projectName);\n+                if(project != null){\n+                    processDefinitionName = recursionProcessDefinitionName(project.getId(), processDefinitionName,1);\n+                }\n+\n                 JSONObject jsonObject = JSONUtils.parseObject(processDefinitionJson);\n                 JSONArray jsonArray = (JSONArray) jsonObject.get(\"tasks\");\n                 for (int j = 0; j < jsonArray.size(); j++) {\n                     JSONObject taskNode = jsonArray.getJSONObject(j);\n-                    JSONObject sqlParameters = JSONUtils.parseObject(taskNode.getString(\"params\"));\n-                    List<DataSource> dataSources = dataSourceMapper.queryDataSourceByName(sqlParameters.getString(\"datasourceName\"));\n-                    if (dataSources.size() > 0) {\n-                        DataSource dataSource = dataSources.get(0);\n-                        sqlParameters.put(\"datasource\", dataSource.getId());\n+                    String taskType = taskNode.getString(\"type\");\n+                    if(taskType.equals(TaskType.SQL.name())  || taskType.equals(TaskType.PROCEDURE.name())) {\n+                        JSONObject sqlParameters = JSONUtils.parseObject(taskNode.getString(\"params\"));\n+                        List<DataSource> dataSources = dataSourceMapper.queryDataSourceByName(sqlParameters.getString(\"datasourceName\"));\n+                        if (dataSources.size() > 0) {\n+                            DataSource dataSource = dataSources.get(0);\n+                            sqlParameters.put(\"datasource\", dataSource.getId());\n+                        }\n+                        taskNode.put(\"params\", sqlParameters);\n+                    }else if(taskType.equals(TaskType.DEPENDENT.name())){\n+                        JSONObject dependentParameters =  JSONUtils.parseObject(taskNode.getString(\"dependence\"));\n+                        if(dependentParameters != null){\n+                            JSONArray dependTaskList = (JSONArray) dependentParameters.get(\"dependTaskList\");\n+                            for (int h = 0; h < dependTaskList.size(); h++) {\n+                                JSONObject dependentTaskModel = dependTaskList.getJSONObject(h);\n+                                JSONArray dependItemList = (JSONArray) dependentTaskModel.get(\"dependItemList\");\n+                                for (int k = 0; k < dependItemList.size(); k++) {\n+                                    JSONObject dependentItem = dependItemList.getJSONObject(k);\n+                                    Project dependentItemProject = projectMapper.queryByName(dependentItem.getString(\"projectName\"));\n+                                    if(dependentItemProject != null){\n+                                        ProcessDefinition definition = processDefineMapper.queryByDefineName(dependentItemProject.getId(),dependentItem.getString(\"definitionName\"));\n+                                        if(definition != null){\n+                                            dependentItem.put(\"projectId\",dependentItemProject.getId());\n+                                            dependentItem.put(\"definitionId\",definition.getId());\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            taskNode.put(\"dependence\", dependentParameters);\n+                        }\n                     }\n-                    taskNode.put(\"params\", sqlParameters);\n                 }\n                 jsonObject.put(\"tasks\", jsonArray);\n \n@@ -1112,5 +1163,20 @@ private boolean graphHasCycle(List<TaskNode> taskNodeResponseList) {\n         return graph.hasCycle();\n     }\n \n+    private String recursionProcessDefinitionName(Integer projectId,String processDefinitionName,int num){\n+        ProcessDefinition processDefinition = processDefineMapper.queryByDefineName(projectId, processDefinitionName);\n+        if (processDefinition != null) {\n+            if(num>1){\n+                String str = processDefinitionName.substring(0,processDefinitionName.length() - 3);\n+                processDefinitionName = str + \"(\"+num+\")\";\n+            }else{\n+                processDefinitionName = processDefinition.getName() + \"(\"+num+\")\";\n+            }\n+        }else{\n+            return processDefinitionName;\n+        }\n+        return recursionProcessDefinitionName(projectId,processDefinitionName,num + 1);\n+    }\n+\n }\n ",
      "parent_sha": "3e3ee3d20b591a1cddbd19009c5dd5e63dfddf66"
    }
  },
  {
    "oid": "e1fcd4e485531677fbbe203e107873e00b8c63c6",
    "message": "[Bug][Api] Fix NPE when deleting a workflow instance (#15485) (#15488)",
    "date": "2024-01-17T14:03:33Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/e1fcd4e485531677fbbe203e107873e00b8c63c6",
    "details": {
      "sha": "d3426dfa3e6c91d3228826333641a8514bf9f0b3",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/e1fcd4e485531677fbbe203e107873e00b8c63c6/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FTaskInstanceServiceImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/e1fcd4e485531677fbbe203e107873e00b8c63c6/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FTaskInstanceServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FTaskInstanceServiceImpl.java?ref=e1fcd4e485531677fbbe203e107873e00b8c63c6",
      "patch": "@@ -379,9 +379,12 @@ public void deleteByWorkflowInstanceId(Integer workflowInstanceId) {\n             return;\n         }\n         for (TaskInstance taskInstance : needToDeleteTaskInstances) {\n-            ILogService iLogService =\n-                    SingletonJdkDynamicRpcClientProxyFactory.getProxyClient(taskInstance.getHost(), ILogService.class);\n-            iLogService.removeTaskInstanceLog(taskInstance.getLogPath());\n+            if (StringUtils.isNotBlank(taskInstance.getLogPath())) {\n+                ILogService iLogService =\n+                        SingletonJdkDynamicRpcClientProxyFactory.getProxyClient(taskInstance.getHost(),\n+                                ILogService.class);\n+                iLogService.removeTaskInstanceLog(taskInstance.getLogPath());\n+            }\n         }\n \n         dqExecuteResultDao.deleteByWorkflowInstanceId(workflowInstanceId);",
      "parent_sha": "c7a11ce6ed8b606671b4f1fa06b522a72aed50d4"
    }
  },
  {
    "oid": "46443a6f3b4228556562606e29b2026c21f1d252",
    "message": "modify_Status (#4352)\n\nCo-authored-by: zt-1997 <\u201c18841012545@163.com\u201d>",
    "date": "2020-12-31T08:28:33Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/46443a6f3b4228556562606e29b2026c21f1d252",
    "details": {
      "sha": "e6935d658f0809e8b3efc5e05d0ed493d145b1b3",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/46443a6f3b4228556562606e29b2026c21f1d252/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/46443a6f3b4228556562606e29b2026c21f1d252/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fenums%2FStatus.java?ref=46443a6f3b4228556562606e29b2026c21f1d252",
      "patch": "@@ -233,7 +233,7 @@ public enum Status {\n     COUNT_PROCESS_DEFINITION_USER_ERROR(50013, \"count process definition user error\", \"\u67e5\u8be2\u5404\u7528\u6237\u6d41\u7a0b\u5b9a\u4e49\u6570\u9519\u8bef\"),\n     START_PROCESS_INSTANCE_ERROR(50014, \"start process instance error\", \"\u8fd0\u884c\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u9519\u8bef\"),\n     EXECUTE_PROCESS_INSTANCE_ERROR(50015, \"execute process instance error\", \"\u64cd\u4f5c\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u9519\u8bef\"),\n-    CHECK_PROCESS_DEFINITION_ERROR(50016, \"check process definition error\", \"\u68c0\u67e5\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u9519\u8bef\"),\n+    CHECK_PROCESS_DEFINITION_ERROR(50016, \"check process definition error\", \"\u5de5\u4f5c\u6d41\u5b9a\u4e49\u9519\u8bef\"),\n     QUERY_RECIPIENTS_AND_COPYERS_BY_PROCESS_DEFINITION_ERROR(50017, \"query recipients and copyers by process definition error\", \"\u67e5\u8be2\u6536\u4ef6\u4eba\u548c\u6284\u9001\u4eba\u9519\u8bef\"),\n     DATA_IS_NOT_VALID(50017, \"data {0} not valid\", \"\u6570\u636e[{0}]\u65e0\u6548\"),\n     DATA_IS_NULL(50018, \"data {0} is null\", \"\u6570\u636e[{0}]\u4e0d\u80fd\u4e3a\u7a7a\"),",
      "parent_sha": "45b097f37870d2a7b8e51fbba3e6d70b49ed2341"
    }
  },
  {
    "oid": "ba3adbd34b8b260f01e92b25612cfdb5c2370f6e",
    "message": " [FIXBUG][common]fix yarn applications status cause NPE(#3645) (#3648)\n\n* fix #3645\r\n\r\nfix get yarn applications status from yarn server,http code return 404, get yarn applications status cause NullPointerException\r\n\r\n* Update HadoopUtils.java\r\n\r\n* Update HadoopUtils.java",
    "date": "2020-09-07T02:36:43Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/ba3adbd34b8b260f01e92b25612cfdb5c2370f6e",
    "details": {
      "sha": "68d03506c6883a7191b84a0c266a7bf7c156acb2",
      "filename": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java",
      "status": "modified",
      "additions": 21,
      "deletions": 13,
      "changes": 34,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/ba3adbd34b8b260f01e92b25612cfdb5c2370f6e/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FHadoopUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/ba3adbd34b8b260f01e92b25612cfdb5c2370f6e/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FHadoopUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Futils%2FHadoopUtils.java?ref=ba3adbd34b8b260f01e92b25612cfdb5c2370f6e",
      "patch": "@@ -195,7 +195,7 @@ public String getApplicationUrl(String applicationId) throws Exception {\n          */\n         String appUrl = \"\";\n \n-        if (StringUtils.isEmpty(rmHaIds)){\n+        if (StringUtils.isEmpty(rmHaIds)) {\n             //single resourcemanager enabled\n             appUrl = appAddress;\n             yarnEnabled = true;\n@@ -206,7 +206,7 @@ public String getApplicationUrl(String applicationId) throws Exception {\n             logger.info(\"application url : {}\", appUrl);\n         }\n \n-        if(StringUtils.isBlank(appUrl)){\n+        if (StringUtils.isBlank(appUrl)) {\n             throw new Exception(\"application url is blank\");\n         }\n         return String.format(appUrl, applicationId);\n@@ -417,25 +417,33 @@ public ExecutionStatus getApplicationStatus(String applicationId) throws Excepti\n         String applicationUrl = getApplicationUrl(applicationId);\n         logger.info(\"applicationUrl={}\", applicationUrl);\n \n-        String responseContent ;\n-\t\tif (PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE, false)) {\n-\t\t\tresponseContent = KerberosHttpClient.get(applicationUrl);\n-\t\t} else {\n-\t\t\tresponseContent = HttpUtils.get(applicationUrl);\n-\t\t}\n+        String responseContent;\n+        if (PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE, false)) {\n+            responseContent = KerberosHttpClient.get(applicationUrl);\n+        } else {\n+            responseContent = HttpUtils.get(applicationUrl);\n+        }\n         if (responseContent != null) {\n             ObjectNode jsonObject = JSONUtils.parseObject(responseContent);\n+            if (!jsonObject.has(\"app\")) {\n+                return ExecutionStatus.FAILURE;\n+            }\n             result = jsonObject.path(\"app\").path(\"finalStatus\").asText();\n+\n         } else {\n             //may be in job history\n             String jobHistoryUrl = getJobHistoryUrl(applicationId);\n             logger.info(\"jobHistoryUrl={}\", jobHistoryUrl);\n             responseContent = HttpUtils.get(jobHistoryUrl);\n-            ObjectNode jsonObject = JSONUtils.parseObject(responseContent);\n-            if (!jsonObject.has(\"job\")){\n+            if (null != responseContent) {\n+                ObjectNode jsonObject = JSONUtils.parseObject(responseContent);\n+                if (!jsonObject.has(\"job\")) {\n+                    return ExecutionStatus.FAILURE;\n+                }\n+                result = jsonObject.path(\"job\").path(\"state\").asText();\n+            } else {\n                 return ExecutionStatus.FAILURE;\n             }\n-            result = jsonObject.path(\"job\").path(\"state\").asText();\n         }\n \n         switch (result) {\n@@ -474,7 +482,7 @@ public static String getHdfsDataBasePath() {\n     /**\n      * hdfs resource dir\n      *\n-     * @param tenantCode tenant code\n+     * @param tenantCode   tenant code\n      * @param resourceType resource type\n      * @return hdfs resource dir\n      */\n@@ -679,7 +687,7 @@ public static String getRMState(String url) {\n             ObjectNode jsonObject = JSONUtils.parseObject(retStr);\n \n             //get ResourceManager state\n-            if (!jsonObject.has(\"clusterInfo\")){\n+            if (!jsonObject.has(\"clusterInfo\")) {\n                 return null;\n             }\n             return jsonObject.get(\"clusterInfo\").path(\"haState\").asText();",
      "parent_sha": "7d49fbbaec1ffee60512313e18e1902e40fc4626"
    }
  },
  {
    "oid": "974d70098455fb43699958d49373420f7ef15b3c",
    "message": "Revert \"fix: Local resource error in some entrypoint (#14826)\" (#14838)\n\nThis reverts commit 9e60632201a031dffe7b21cefcc3bc550edbe608.",
    "date": "2023-09-05T04:41:04Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/974d70098455fb43699958d49373420f7ef15b3c",
    "details": {
      "sha": "b18bd685b69f0fd5fa072b4c37fd6c947fec9967",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java",
      "status": "modified",
      "additions": 8,
      "deletions": 33,
      "changes": 41,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/974d70098455fb43699958d49373420f7ef15b3c/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FResourcesServiceImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/974d70098455fb43699958d49373420f7ef15b3c/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FResourcesServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FResourcesServiceImpl.java?ref=974d70098455fb43699958d49373420f7ef15b3c",
      "patch": "@@ -24,7 +24,6 @@\n import static org.apache.dolphinscheduler.common.constants.Constants.FORMAT_S_S;\n import static org.apache.dolphinscheduler.common.constants.Constants.JAR;\n import static org.apache.dolphinscheduler.common.constants.Constants.PERIOD;\n-import static org.apache.dolphinscheduler.common.enums.ResUploadType.HDFS;\n \n import org.apache.dolphinscheduler.api.dto.resources.DeleteDataTransferResponse;\n import org.apache.dolphinscheduler.api.dto.resources.ResourceComponent;\n@@ -242,7 +241,7 @@ public Result<Object> createResource(User loginUser,\n         // check resource name exists\n         String userResRootPath = ResourceType.UDF.equals(type) ? storageOperate.getUdfDir(tenantCode)\n                 : storageOperate.getResDir(tenantCode);\n-        String currDirNFileName = getOnlineCreatePath(currentDir, userResRootPath) + name;\n+        String currDirNFileName = !currentDir.contains(userResRootPath) ? userResRootPath + name : currentDir + name;\n \n         try {\n             if (checkResourceExists(currDirNFileName)) {\n@@ -562,7 +561,7 @@ public Result<PageInfo<StorageEntity>> queryResourceListPaging(User loginUser, S\n         String baseDir = isAdmin(loginUser) ? storageOperate.getDir(ResourceType.ALL, tenantCode)\n                 : storageOperate.getDir(type, tenantCode);\n         if (!isUserTenantValid(isAdmin(loginUser), tenantCode, resTenantCode)\n-                || isMatchBaseDir(fullName, baseDir)) {\n+                || (StringUtils.isNotBlank(fullName) && !StringUtils.startsWith(fullName, baseDir))) {\n             log.error(\"current user does not have permission\");\n             putMsg(result, Status.NO_CURRENT_OPERATING_PERMISSION);\n             return result;\n@@ -1207,8 +1206,13 @@ public Result<Object> onlineCreateResource(User loginUser, ResourceType type, St\n \n         String name = fileName.trim() + \".\" + nameSuffix;\n \n+        String fullName = \"\";\n         String userResRootPath = storageOperate.getResDir(tenantCode);\n-        String fullName = getOnlineCreatePath(currentDir, userResRootPath) + name;\n+        if (!currentDir.contains(userResRootPath)) {\n+            fullName = userResRootPath + name;\n+        } else {\n+            fullName = currentDir + name;\n+        }\n \n         result = verifyResourceName(fullName, type, loginUser);\n         if (!result.getCode().equals(Status.SUCCESS.getCode())) {\n@@ -1818,35 +1822,6 @@ private boolean isUserTenantValid(boolean isAdmin, String userTenantCode,\n         return true;\n     }\n \n-    private boolean isLocal(String baseDir) {\n-        return storageOperate.returnStorageType() == HDFS && baseDir.startsWith(\"file:///\");\n-    }\n-\n-    /**\n-     * Check whether the full name is in the correct base directory. Local storage full path with value `file:/path/to/file`\n-     * instead of of `file:///path/to/file`\n-     */\n-    private boolean isMatchBaseDir(String fullName,\n-                                   String baseDir) {\n-        if (isLocal(baseDir)) {\n-            String midBaseDir = baseDir.replace(\"file:///\", \"file:/\");\n-            return (StringUtils.isNotBlank(fullName) && !StringUtils.startsWith(fullName, midBaseDir));\n-        }\n-        return (StringUtils.isNotBlank(fullName) && !StringUtils.startsWith(fullName, baseDir));\n-    }\n-\n-    /**\n-     * Get online create path. Local storage full path with value `file:/path/to/file` instead of `file:///path/to/file`\n-     */\n-    private String getOnlineCreatePath(String currentDir,\n-                                       String userResRootPath) {\n-        if (isLocal(userResRootPath)) {\n-            String midUserResRootPath = userResRootPath.replace(\"file:///\", \"file:/\");\n-            return currentDir.contains(midUserResRootPath) ? currentDir : userResRootPath;\n-        }\n-        return currentDir.contains(userResRootPath) ? currentDir : userResRootPath;\n-    }\n-\n     private String getTenantCode(User user) {\n         Tenant tenant = tenantMapper.queryById(user.getTenantId());\n         if (tenant == null) {",
      "parent_sha": "adf49fd23f6bcafa1ded60da7bc8bdf1a3575fd3"
    }
  },
  {
    "oid": "39d2713d0a3122f0bbc6b15fee959b14108cd980",
    "message": "Using Jackson instead of Fastjson",
    "date": "2020-06-02T10:19:21Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/39d2713d0a3122f0bbc6b15fee959b14108cd980",
    "details": {
      "sha": "fdd98b87c7c17edf4252913e71a901258a115ce3",
      "filename": "dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/utils/JSONUtilsTest.java",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/39d2713d0a3122f0bbc6b15fee959b14108cd980/dolphinscheduler-alert%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Falert%2Futils%2FJSONUtilsTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/39d2713d0a3122f0bbc6b15fee959b14108cd980/dolphinscheduler-alert%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Falert%2Futils%2FJSONUtilsTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-alert%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Falert%2Futils%2FJSONUtilsTest.java?ref=39d2713d0a3122f0bbc6b15fee959b14108cd980",
      "patch": "@@ -26,6 +26,7 @@\n import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n+\n import org.apache.dolphinscheduler.common.utils.*;\n \n import static org.junit.Assert.*;\n@@ -46,11 +47,11 @@ public void setUp() throws Exception {\n \n         //Initial map\n         LinkedHashMap<String, Object> map = new LinkedHashMap<>();\n-        map.put(\"mysql service name\",\"mysql200\");\n-        map.put(\"mysql address\",\"192.168.xx.xx\");\n-        map.put(\"port\",\"3306\");\n-        map.put(\"no index of number\",\"80\");\n-        map.put(\"database client connections\",\"190\");\n+        map.put(\"mysql service name\", \"mysql200\");\n+        map.put(\"mysql address\", \"192.168.xx.xx\");\n+        map.put(\"port\", \"3306\");\n+        map.put(\"no index of number\", \"80\");\n+        map.put(\"database client connections\", \"190\");\n \n         //Add map into list\n         list.add(map);\n@@ -68,7 +69,8 @@ public void testToJsonString() {\n         logger.info(result);\n \n         //Equal result with expected string\n-        assertEquals(result,\"[{\\\"database client connections\\\":\\\"190\\\",\\\"mysql address\\\":\\\"192.168.xx.xx\\\",\\\"mysql service name\\\":\\\"mysql200\\\",\\\"no index of number\\\":\\\"80\\\",\\\"port\\\":\\\"3306\\\"}]\");\n+        assertEquals(result, expected);\n+//        assertEquals(result, \"[{\\\"database client connections\\\":\\\"190\\\",\\\"mysql address\\\":\\\"192.168.xx.xx\\\",\\\"mysql service name\\\":\\\"mysql200\\\",\\\"no index of number\\\":\\\"80\\\",\\\"port\\\":\\\"3306\\\"}]\");\n \n         //If param is null, then return null string\n         result = JSONUtils.toJsonString(null);\n@@ -85,27 +87,27 @@ public void testToJsonString() {\n     public void testToList() {\n \n         //Invoke toList\n-        List<LinkedHashMap> result = JSONUtils.toList(expected ,LinkedHashMap.class);\n+        List<LinkedHashMap> result = JSONUtils.toList(expected, LinkedHashMap.class);\n         //Equal list size=1\n-        assertEquals(1,result.size());\n+        assertEquals(1, result.size());\n \n         //Transform entity to LinkedHashMap<String, Object>\n         LinkedHashMap<String, Object> entity = result.get(0);\n \n         //Equal expected values\n-        assertEquals(\"mysql200\",entity.get(\"mysql service name\"));\n+        assertEquals(\"mysql200\", entity.get(\"mysql service name\"));\n         assertEquals(\"192.168.xx.xx\", entity.get(\"mysql address\"));\n         assertEquals(\"3306\", entity.get(\"port\"));\n         assertEquals(\"80\", entity.get(\"no index of number\"));\n         assertEquals(\"190\", entity.get(\"database client connections\"));\n \n         //If param is null, then return empty list\n-        result = JSONUtils.toList(null ,LinkedHashMap.class);\n+        result = JSONUtils.toList(null, LinkedHashMap.class);\n         assertNotNull(result);\n         assertTrue(result.isEmpty());\n \n         //If param is incorrect, then return empty list and log error message\n-        result = JSONUtils.toList(\"}{\" ,LinkedHashMap.class);\n+        result = JSONUtils.toList(\"}{\", LinkedHashMap.class);\n         assertNotNull(result);\n         assertTrue(result.isEmpty());\n ",
      "parent_sha": "e386af700d4276882e7b272041d1014a2ce4ca36"
    }
  },
  {
    "oid": "4a1303b625f3425550636a522ad2e38bd8cae1b7",
    "message": "[Improvement][Worker] Kill task error(#5199) (#5212)",
    "date": "2021-04-06T02:47:53Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/4a1303b625f3425550636a522ad2e38bd8cae1b7",
    "details": {
      "sha": "f7a9991a081cd453b308539f68d1799c290aee26",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ProcessUtils.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/4a1303b625f3425550636a522ad2e38bd8cae1b7/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FProcessUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/4a1303b625f3425550636a522ad2e38bd8cae1b7/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FProcessUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FProcessUtils.java?ref=4a1303b625f3425550636a522ad2e38bd8cae1b7",
      "patch": "@@ -409,7 +409,7 @@ public static void kill(TaskExecutionContext taskExecutionContext) {\n      * @throws Exception exception\n      */\n     public static String getPidsStr(int processId) throws Exception {\n-        StringBuilder sb = new StringBuilder();\n+        List<String> pidList = new ArrayList<>();\n         Matcher mat = null;\n         // pstree pid get sub pids\n         if (OSUtils.isMacOS()) {\n@@ -424,11 +424,14 @@ public static String getPidsStr(int processId) throws Exception {\n \n         if (null != mat) {\n             while (mat.find()) {\n-                sb.append(mat.group(1)).append(\" \");\n+                pidList.add(mat.group(1));\n             }\n         }\n \n-        return sb.toString().trim();\n+        if (CommonUtils.isSudoEnable() && !pidList.isEmpty()) {\n+            pidList = pidList.subList(1, pidList.size());\n+        }\n+        return String.join(\" \", pidList).trim();\n     }\n \n     /**",
      "parent_sha": "97fb08f0ced20a4b9563725ed9e9600e5ea5722b"
    }
  },
  {
    "oid": "25ff540ff2bf2e1f3ea43f988ccff5613879759f",
    "message": "Modified SQL task custom variable replacement rules",
    "date": "2019-06-19T08:47:32Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/25ff540ff2bf2e1f3ea43f988ccff5613879759f",
    "details": {
      "sha": "4eb567d8c8e355c2b33d32f97ae07e57665ad92b",
      "filename": "escheduler-server/src/main/java/cn/escheduler/server/worker/task/sql/SqlTask.java",
      "status": "modified",
      "additions": 2,
      "deletions": 16,
      "changes": 18,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/25ff540ff2bf2e1f3ea43f988ccff5613879759f/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/25ff540ff2bf2e1f3ea43f988ccff5613879759f/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fworker%2Ftask%2Fsql%2FSqlTask.java?ref=25ff540ff2bf2e1f3ea43f988ccff5613879759f",
      "patch": "@@ -17,7 +17,6 @@\n package cn.escheduler.server.worker.task.sql;\n \n import cn.escheduler.alert.utils.MailUtils;\n-import cn.escheduler.api.enums.Status;\n import cn.escheduler.common.Constants;\n import cn.escheduler.common.enums.DbType;\n import cn.escheduler.common.enums.ShowType;\n@@ -197,7 +196,7 @@ private SqlBinds getSqlAndSqlParamsMap(String sql) {\n         }\n \n         // special characters need to be escaped, ${} needs to be escaped\n-        String rgex = \"'?\\\\$\\\\{(.*?)\\\\}'?\";\n+        String rgex = \"['\\\"]*\\\\$\\\\{(.*?)\\\\}['\\\"]*\";\n         setSqlParamsMap(sql,rgex,sqlParamsMap,paramsMap);\n \n         // replace the ${} of the SQL statement with the Placeholder\n@@ -328,6 +327,7 @@ private PreparedStatement prepareStatementAndBind(Connection connection, SqlBind\n                 ParameterUtils.setInParameter(key,stmt,prop.getType(),prop.getValue());\n             }\n         }\n+        logger.info(\"prepare statement replace sql:{}\",stmt.toString());\n         return stmt;\n     }\n \n@@ -417,19 +417,5 @@ public void printReplacedSql(String content, String formatSql,String rgex, Map<I\n             logPrint.append(sqlParamsMap.get(i).getValue()+\"(\"+sqlParamsMap.get(i).getType()+\")\");\n         }\n         logger.info(logPrint.toString());\n-\n-        //direct print style\n-        Pattern pattern = Pattern.compile(rgex);\n-        Matcher m = pattern.matcher(content);\n-        int index = 1;\n-        StringBuffer sb = new StringBuffer(\"replaced sql , direct:\");\n-        while (m.find()) {\n-\n-            m.appendReplacement(sb, sqlParamsMap.get(index).getValue());\n-\n-            index ++;\n-        }\n-        m.appendTail(sb);\n-        logger.info(sb.toString());\n     }\n }",
      "parent_sha": "7b058f55f4b418967c436eb416c6a15d3334d8d9"
    }
  },
  {
    "oid": "48389f1822d38ddb65e3a2bef51aa1676e745a01",
    "message": "add verifyResourceName test",
    "date": "2019-06-24T03:49:35Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/48389f1822d38ddb65e3a2bef51aa1676e745a01",
    "details": {
      "sha": "1dc78551867900ed23d85188b2cfd186e1d95153",
      "filename": "escheduler-api/src/test/java/cn/escheduler/api/controller/ResourcesControllerTest.java",
      "status": "modified",
      "additions": 23,
      "deletions": 1,
      "changes": 24,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/48389f1822d38ddb65e3a2bef51aa1676e745a01/escheduler-api%2Fsrc%2Ftest%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fcontroller%2FResourcesControllerTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/48389f1822d38ddb65e3a2bef51aa1676e745a01/escheduler-api%2Fsrc%2Ftest%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fcontroller%2FResourcesControllerTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Ftest%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fcontroller%2FResourcesControllerTest.java?ref=48389f1822d38ddb65e3a2bef51aa1676e745a01",
      "patch": "@@ -34,6 +34,8 @@\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.MvcResult;\n import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n import org.springframework.web.context.WebApplicationContext;\n \n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n@@ -43,7 +45,7 @@\n @RunWith(SpringRunner.class)\n @SpringBootTest\n public class ResourcesControllerTest {\n-    private static Logger logger = LoggerFactory.getLogger(QueueControllerTest.class);\n+    private static Logger logger = LoggerFactory.getLogger(ResourcesControllerTest.class);\n \n     private MockMvc mockMvc;\n \n@@ -71,4 +73,24 @@ public void querytResourceList() throws Exception {\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n         logger.info(mvcResult.getResponse().getContentAsString());\n     }\n+\n+    @Test\n+    public void verifyResourceName() throws Exception {\n+\n+        MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n+        paramsMap.add(\"name\",\"list_resources_1.sh\");\n+        paramsMap.add(\"type\",\"FILE\");\n+\n+        MvcResult mvcResult = mockMvc.perform(get(\"/resources/verify-name\")\n+                .header(\"sessionId\", \"c24ed9d9-1c20-48a0-bd9c-5cfca14a4dcb\")\n+                .params(paramsMap))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n+                .andReturn();\n+\n+        Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n+\n+        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n+        logger.info(mvcResult.getResponse().getContentAsString());\n+    }\n }\n\\ No newline at end of file",
      "parent_sha": "421d0219a28895a14c1e33673c618dba708277bc"
    }
  },
  {
    "oid": "8681036a499331966c90ee013b4f1f796907c170",
    "message": "Fix tasks not execute in sub-process when rerun scheduled process. #2903 (#2908)",
    "date": "2020-06-05T10:42:10Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/8681036a499331966c90ee013b4f1f796907c170",
    "details": {
      "sha": "617826cd328304b52323c2b893d7b056dcb142a4",
      "filename": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/8681036a499331966c90ee013b4f1f796907c170/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/8681036a499331966c90ee013b4f1f796907c170/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessService.java?ref=8681036a499331966c90ee013b4f1f796907c170",
      "patch": "@@ -921,7 +921,7 @@ private void createSubWorkProcessCommand(ProcessInstance parentProcessInstance,\n \n         CommandType fatherType = parentProcessInstance.getCommandType();\n         CommandType commandType = fatherType;\n-        if(childInstance == null || commandType == CommandType.REPEAT_RUNNING){\n+        if(childInstance == null){\n             String fatherHistoryCommand = parentProcessInstance.getHistoryCmd();\n             // sub process must begin with schedule/complement data\n             // if father begin with scheduler/complement data",
      "parent_sha": "3f731f71229645629edc0cab4f9bc312ce8ea8f5"
    }
  },
  {
    "oid": "12c1347749f9794169f70f43b6d3d14c87d67cd7",
    "message": "rpc",
    "date": "2021-02-09T04:01:30Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/12c1347749f9794169f70f43b6d3d14c87d67cd7",
    "details": {
      "sha": "2c0cf0cf8abac74898b9a276783ca09b69705f5b",
      "filename": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/client/RpcRequestCache.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/12c1347749f9794169f70f43b6d3d14c87d67cd7/dolphinscheduler-remote%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Frpc%2Fclient%2FRpcRequestCache.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/12c1347749f9794169f70f43b6d3d14c87d67cd7/dolphinscheduler-remote%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Frpc%2Fclient%2FRpcRequestCache.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-remote%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Frpc%2Fclient%2FRpcRequestCache.java?ref=12c1347749f9794169f70f43b6d3d14c87d67cd7",
      "patch": "@@ -20,7 +20,7 @@\n import org.apache.dolphinscheduler.rpc.future.RpcFuture;\n \n /**\n- * RpcRequestCache\n+ * Rpc Request Cache\n  */\n public class RpcRequestCache {\n ",
      "parent_sha": "dad943699202faa0da75ecd18a74f7627a3b39cc"
    }
  },
  {
    "oid": "b6ebb56777c424124d90fb0f8d772013b535cd88",
    "message": "fix bugs #516",
    "date": "2019-07-10T09:15:03Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/b6ebb56777c424124d90fb0f8d772013b535cd88",
    "details": {
      "sha": "1e0bd196ff25dbfe4196b5a54ce777e0081f4480",
      "filename": "escheduler-server/src/main/java/cn/escheduler/server/utils/LoggerUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/b6ebb56777c424124d90fb0f8d772013b535cd88/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Futils%2FLoggerUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/b6ebb56777c424124d90fb0f8d772013b535cd88/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Futils%2FLoggerUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Futils%2FLoggerUtils.java?ref=b6ebb56777c424124d90fb0f8d772013b535cd88",
      "patch": "@@ -16,6 +16,7 @@\n  */\n package cn.escheduler.server.utils;\n \n+import cn.escheduler.common.Constants;\n import org.slf4j.Logger;\n \n import java.util.ArrayList;\n@@ -31,7 +32,7 @@ public class LoggerUtils {\n     /**\n      * rules for extracting application ID\n      */\n-    private static final Pattern APPLICATION_REGEX = Pattern.compile(\"\\\\d+_\\\\d+\");\n+    private static final Pattern APPLICATION_REGEX = Pattern.compile(Constants.APPLICATION_REGEX);\n \n     /**\n      *  build job id",
      "parent_sha": "f880a76d7a3a95d4b425a16853456025292b8c03"
    }
  },
  {
    "oid": "dd35addfb6dd68841709ab3664f237cf239e4973",
    "message": "\u66f4\u65b0\u7528\u6237\u65f6\u586b\u5199\u5df2\u7ecf\u5b58\u7684\u7528\u6237\u540d\u62a5\u9519\n\n\u66f4\u65b0\u7528\u6237\u540d\u5982\u679c\u586b\u5199\u5df2\u7ecf\u5b58\u5728\u7684\u7528\u6237\u540d\u4f1a\u62a5\u9519\u3002",
    "date": "2019-04-23T08:27:51Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/dd35addfb6dd68841709ab3664f237cf239e4973",
    "details": {
      "sha": "fb9e4e99f3a9eb893923416db5ca2687fa77cced",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/service/UsersService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/dd35addfb6dd68841709ab3664f237cf239e4973/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FUsersService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/dd35addfb6dd68841709ab3664f237cf239e4973/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FUsersService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FUsersService.java?ref=dd35addfb6dd68841709ab3664f237cf239e4973",
      "patch": "@@ -218,7 +218,7 @@ public Map<String, Object> updateUser(int userId,\n         if (StringUtils.isNotEmpty(userName)) {\n             User tempUser = userMapper.queryByUserName(userName);\n             if (tempUser != null && tempUser.getId() != userId) {\n-                putMsg(result, Status.USER_NAME_EXIST, userId);\n+                putMsg(result, Status.USER_NAME_EXIST, userName);\n                 return result;\n             }\n             user.setUserName(userName);",
      "parent_sha": "ce7ececda69905ac34c54b6a4e9b072a48c99208"
    }
  },
  {
    "oid": "cbb27e93e9140415fa221b35d9e9974bc1f1a9f9",
    "message": "Fix tasks not execute in sub-process when rerun scheduled process. #2903 (#2908)",
    "date": "2020-06-29T09:39:49Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/cbb27e93e9140415fa221b35d9e9974bc1f1a9f9",
    "details": {
      "sha": "f9c8010698fb249abd036abb9929fe1a06ab9752",
      "filename": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/cbb27e93e9140415fa221b35d9e9974bc1f1a9f9/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/cbb27e93e9140415fa221b35d9e9974bc1f1a9f9/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-service%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fservice%2Fprocess%2FProcessService.java?ref=cbb27e93e9140415fa221b35d9e9974bc1f1a9f9",
      "patch": "@@ -894,7 +894,7 @@ private void createSubWorkProcessCommand(ProcessInstance parentProcessInstance,\n \n         CommandType fatherType = parentProcessInstance.getCommandType();\n         CommandType commandType = fatherType;\n-        if(childInstance == null || commandType == CommandType.REPEAT_RUNNING){\n+        if(childInstance == null){\n             String fatherHistoryCommand = parentProcessInstance.getHistoryCmd();\n             // sub process must begin with schedule/complement data\n             // if father begin with scheduler/complement data",
      "parent_sha": "31b593d0237c42a8cb25838c8c64d814d6da1a33"
    }
  },
  {
    "oid": "00ba3cd62824941f8f6796637ead8da0414aec18",
    "message": "\u4fee\u6539\u5982\u679c\u7528\u6237\u6ca1\u6709\u521b\u5efa\u8d44\u6e90\u65f6\u7ed9\u7528\u6237\u6388\u6743\u8d44\u6e90\u4f1a\u62a5\u7a7a\u6307\u9488",
    "date": "2019-04-29T08:49:08Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/00ba3cd62824941f8f6796637ead8da0414aec18",
    "details": {
      "sha": "291c59ea22348ef89c29f0ed2193e6feb4699f67",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/service/ResourcesService.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/00ba3cd62824941f8f6796637ead8da0414aec18/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FResourcesService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/00ba3cd62824941f8f6796637ead8da0414aec18/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FResourcesService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FResourcesService.java?ref=00ba3cd62824941f8f6796637ead8da0414aec18",
      "patch": "@@ -701,17 +701,19 @@ public Map<String, Object> unauthorizedFile(User loginUser, Integer userId) {\n         if (checkAdmin(loginUser, result)) {\n             return result;\n         }\n-\n         List<Resource> resourceList = resourcesMapper.queryResourceExceptUserId(userId);\n-        Set<Resource> resourceSet = null;\n+        List<Object> list ;\n         if (resourceList != null && resourceList.size() > 0) {\n-            resourceSet = new HashSet<>(resourceList);\n-\n+            Set<Resource> resourceSet = new HashSet<>(resourceList);\n             List<Resource> authedResourceList = resourcesMapper.queryAuthorizedResourceList(userId);\n \n             getAuthorizedResourceList(resourceSet, authedResourceList);\n+            list = new ArrayList<>(resourceSet);\n+        }else {\n+            list = new ArrayList<>(0);\n         }\n-        result.put(Constants.DATA_LIST, new ArrayList<>(resourceSet));\n+\n+        result.put(Constants.DATA_LIST, list);\n         putMsg(result,Status.SUCCESS);\n         return result;\n     }",
      "parent_sha": "2243d8f09e386c7bdf584db3b986577585496767"
    }
  },
  {
    "oid": "3b80760c42e4d3208349969a9ec9d5ee1ed86222",
    "message": "Improved shell task execution result log information, adding process.waitFor() and process.exitValue() information to the original log (#5691)\n\nCo-authored-by: shenglm <shenglm840722@126.com>",
    "date": "2021-06-25T01:13:26Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/3b80760c42e4d3208349969a9ec9d5ee1ed86222",
    "details": {
      "sha": "5241f5f151300c9a1abbb6dfb6d1c8657ba568ad",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/3b80760c42e4d3208349969a9ec9d5ee1ed86222/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2FAbstractCommandExecutor.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/3b80760c42e4d3208349969a9ec9d5ee1ed86222/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2FAbstractCommandExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2FAbstractCommandExecutor.java?ref=3b80760c42e4d3208349969a9ec9d5ee1ed86222",
      "patch": "@@ -207,8 +207,8 @@ public CommandExecuteResult run(String execCommand) throws Exception {\n         // waiting for the run to finish\n         boolean status = process.waitFor(remainTime, TimeUnit.SECONDS);\n \n-        logger.info(\"process has exited, execute path:{}, processId:{} ,exitStatusCode:{}\",\n-            taskExecutionContext.getExecutePath(), processId, result.getExitStatusCode());\n+        logger.info(\"process has exited, execute path:{}, processId:{} ,exitStatusCode:{} ,processWaitForStatus:{} ,processExitValue:{}\",\n+            taskExecutionContext.getExecutePath(), processId, result.getExitStatusCode(), status, process.exitValue());\n \n         // if SHELL task exit\n         if (status) {\n@@ -224,7 +224,8 @@ public CommandExecuteResult run(String execCommand) throws Exception {\n                 result.setExitStatusCode(isSuccessOfYarnState(appIds) ? EXIT_CODE_SUCCESS : EXIT_CODE_FAILURE);\n             }\n         } else {\n-            logger.error(\"process has failure , exitStatusCode : {} , ready to kill ...\", result.getExitStatusCode());\n+            logger.error(\"process has failure , exitStatusCode:{}, processExitValue:{}, ready to kill ...\",\n+                 result.getExitStatusCode(), process.exitValue());\n             ProcessUtils.kill(taskExecutionContext);\n             result.setExitStatusCode(EXIT_CODE_FAILURE);\n         }",
      "parent_sha": "bae047e4a38e4d0e985fad2fcc0d184cf9ca8b53"
    }
  },
  {
    "oid": "45aa9db58863661eac37532b719b46bfd3c28097",
    "message": "columns alias update",
    "date": "2019-05-13T11:07:21Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/45aa9db58863661eac37532b719b46bfd3c28097",
    "details": {
      "sha": "73228057c29259aa601ef20318836a2830b60e27",
      "filename": "escheduler-dao/src/main/java/cn/escheduler/dao/mapper/DataSourceMapperProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/45aa9db58863661eac37532b719b46bfd3c28097/escheduler-dao%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fdao%2Fmapper%2FDataSourceMapperProvider.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/45aa9db58863661eac37532b719b46bfd3c28097/escheduler-dao%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fdao%2Fmapper%2FDataSourceMapperProvider.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-dao%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fdao%2Fmapper%2FDataSourceMapperProvider.java?ref=45aa9db58863661eac37532b719b46bfd3c28097",
      "patch": "@@ -111,7 +111,7 @@ public String queryDataSourceByType(Map<String, Object> parameter) {\n    */\n   public String queryById(Map<String, Object> parameter) {\n     return new SQL() {{\n-      SELECT(\"r.*,u.user_name as userName\");\n+      SELECT(\"r.*,u.user_name\");\n \n       FROM(TABLE_NAME + \" r\");\n ",
      "parent_sha": "2a9f8d487e3ff7e82b1b64c41921029006deb143"
    }
  },
  {
    "oid": "5a3df2e7439fdac3c326f5d2d3c667b5a96b2fc1",
    "message": "Update CreateWorkflowLocator.java\n\nmodify submit workflow button",
    "date": "2020-07-13T05:03:15Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/5a3df2e7439fdac3c326f5d2d3c667b5a96b2fc1",
    "details": {
      "sha": "0d3e2b6de5d8f50dfe1fce74693a105096c19208",
      "filename": "e2e/src/test/java/org/apache/dolphinscheduler/locator/project/CreateWorkflowLocator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/5a3df2e7439fdac3c326f5d2d3c667b5a96b2fc1/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/5a3df2e7439fdac3c326f5d2d3c667b5a96b2fc1/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/e2e%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Flocator%2Fproject%2FCreateWorkflowLocator.java?ref=5a3df2e7439fdac3c326f5d2d3c667b5a96b2fc1",
      "patch": "@@ -119,14 +119,14 @@ public class CreateWorkflowLocator {\n     public static final By CLICK_DELETE_CUSTOM_PARAMETERS = By.xpath(\"//div[2]/span/a/em\");\n \n     //click submit button\n-    public static final By CLICK_SUBMIT_BUTTON = By.xpath(\"//button[2]/span\");\n+    public static final By CLICK_SUBMIT_BUTTON = By.xpath(\"//div[3]/div/button[2]/span\");\n \n \n     /**\n      * save workflow\n      */\n     //click save workflow button\n-    public static final By CLICK_SAVE_WORKFLOW_BUTTON = By.xpath(\"/html/body/div[1]/div[2]/div/div[2]/div/div[2]/div[1]/div[2]/button[2]/span\");\n+    public static final By CLICK_SAVE_WORKFLOW_BUTTON = By.xpath(\"//div[2]/div[1]/div[2]/button[2]\");\n \n     //input  workflow name\n     public static final By INPUT_WORKFLOW_NAME = By.xpath(\"//input\");",
      "parent_sha": "3c41fbe41d8a353e0155d0f64326dc98f5d08569"
    }
  },
  {
    "oid": "12d36760b8c0037289ef281f1ea8ab0faf3057f4",
    "message": "add checkExists in deleteJob",
    "date": "2019-05-21T07:37:31Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/12d36760b8c0037289ef281f1ea8ab0faf3057f4",
    "details": {
      "sha": "5cb3b338535461635f691351383fd9f97b0e6436",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/quartz/QuartzExecutors.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/12d36760b8c0037289ef281f1ea8ab0faf3057f4/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fquartz%2FQuartzExecutors.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/12d36760b8c0037289ef281f1ea8ab0faf3057f4/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fquartz%2FQuartzExecutors.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fquartz%2FQuartzExecutors.java?ref=12d36760b8c0037289ef281f1ea8ab0faf3057f4",
      "patch": "@@ -26,8 +26,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.Calendar;\n import java.util.*;\n+import java.util.Calendar;\n import java.util.concurrent.locks.ReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n@@ -226,8 +226,12 @@ public void addJob(Class<? extends Job> clazz,String jobName,String jobGroupName\n   public boolean deleteJob(String jobName, String jobGroupName) {\n     lock.writeLock().lock();\n     try {\n-      logger.info(\"try to delete job, job name: {}, job group name: {},\", jobName, jobGroupName);\n-      return scheduler.deleteJob(new JobKey(jobName, jobGroupName));\n+      JobKey jobKey = new JobKey(jobName,jobGroupName);\n+      if(scheduler.checkExists(jobKey)){\n+        logger.info(\"try to delete job, job name: {}, job group name: {},\", jobName, jobGroupName);\n+        return scheduler.deleteJob(jobKey);\n+      }\n+\n     } catch (SchedulerException e) {\n       logger.error(String.format(\"delete job : %s failed\",jobName), e);\n     } finally {",
      "parent_sha": "7dc7348c3cb9c716b7cddbd614d74d141044e479"
    }
  },
  {
    "oid": "3b653328ef7d441505a3a9d89e187f4d4d1bc1bd",
    "message": "'#1595'",
    "date": "2019-12-27T07:20:57Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/3b653328ef7d441505a3a9d89e187f4d4d1bc1bd",
    "details": {
      "sha": "f3441edd173a54df798cbf8de3d9a0cb01a1cde4",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/AlertManager.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/3b653328ef7d441505a3a9d89e187f4d4d1bc1bd/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FAlertManager.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/3b653328ef7d441505a3a9d89e187f4d4d1bc1bd/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FAlertManager.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Futils%2FAlertManager.java?ref=3b653328ef7d441505a3a9d89e187f4d4d1bc1bd",
      "patch": "@@ -90,15 +90,15 @@ private String getCommandCnName(CommandType commandType) {\n      * process instance format\n      */\n     private static final String PROCESS_INSTANCE_FORMAT =\n-            \"\\\"Id:%d\\\",\" +\n-            \"\\\"Name:%s\\\",\" +\n-            \"\\\"Job type: %s\\\",\" +\n-            \"\\\"State: %s\\\",\" +\n-            \"\\\"Recovery:%s\\\",\" +\n-            \"\\\"Run time: %d\\\",\" +\n-            \"\\\"Start time: %s\\\",\" +\n-            \"\\\"End time: %s\\\",\" +\n-            \"\\\"Host: %s\\\"\" ;\n+            \"\\\"id:%d\\\",\" +\n+            \"\\\"name:%s\\\",\" +\n+            \"\\\"job type: %s\\\",\" +\n+            \"\\\"state: %s\\\",\" +\n+            \"\\\"recovery:%s\\\",\" +\n+            \"\\\"run time: %d\\\",\" +\n+            \"\\\"start time: %s\\\",\" +\n+            \"\\\"end time: %s\\\",\" +\n+            \"\\\"host: %s\\\"\" ;\n \n     /**\n      * get process instance content\n@@ -234,7 +234,7 @@ public void sendAlertProcessInstance(ProcessInstance processInstance,\n \n         String cmdName = getCommandCnName(processInstance.getCommandType());\n         String success = processInstance.getState().typeIsSuccess() ? \"success\" :\"failed\";\n-        alert.setTitle(cmdName + success);\n+        alert.setTitle(cmdName + \" \" + success);\n         ShowType showType = processInstance.getState().typeIsSuccess() ? ShowType.TEXT : ShowType.TABLE;\n         alert.setShowType(showType);\n         String content = getContentProcessInstance(processInstance, taskInstances);",
      "parent_sha": "fe9344d4be3c6b4bcf5e280fca770da8a8f37cee"
    }
  },
  {
    "oid": "1acbc0dbfe508bd8895b638f29c04421720df318",
    "message": "fix\uff1aDepend check bug (#2229)\n\n* fix\uff1a#1787\n\n* fix\uff1a#1787",
    "date": "2020-06-29T09:36:29Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/1acbc0dbfe508bd8895b638f29c04421720df318",
    "details": {
      "sha": "3ef795938f49161491dace9d956bb6c015c0135f",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/1acbc0dbfe508bd8895b638f29c04421720df318/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/1acbc0dbfe508bd8895b638f29c04421720df318/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2FMasterExecThread.java?ref=1acbc0dbfe508bd8895b638f29c04421720df318",
      "patch": "@@ -674,9 +674,9 @@ private DependResult isTaskDepsComplete(String taskName) {\n         TaskNode taskNode = dag.getNode(taskName);\n         List<String> depNameList = taskNode.getDepList();\n         for(String depsNode : depNameList ){\n-\n-            if(forbiddenTaskList.containsKey(depsNode) ||\n-                    skipTaskNodeList.containsKey(depsNode)){\n+            if(!dag.containsNode(depsNode)\n+                    || forbiddenTaskList.containsKey(depsNode)\n+                    || skipTaskNodeList.containsKey(depsNode)){\n                 continue;\n             }\n             // dependencies must be fully completed",
      "parent_sha": "e1771de45a266053ab1240d8a0b7752dcd5d8eff"
    }
  },
  {
    "oid": "eac00ca008475b124ab35c5624454e1958a0833e",
    "message": "Remove invalid code",
    "date": "2020-03-31T08:52:49Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/eac00ca008475b124ab35c5624454e1958a0833e",
    "details": {
      "sha": "1d83fcea2bac105e58cce939ad315bfbb5d905f2",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/eac00ca008475b124ab35c5624454e1958a0833e/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fcontroller%2FResourcesController.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/eac00ca008475b124ab35c5624454e1958a0833e/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fcontroller%2FResourcesController.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fcontroller%2FResourcesController.java?ref=eac00ca008475b124ab35c5624454e1958a0833e",
      "patch": "@@ -154,8 +154,7 @@ public Result createResource(@ApiIgnore @RequestAttribute(value = Constants.SESS\n             @ApiImplicitParam(name = \"id\", value = \"RESOURCE_ID\", required = true, dataType =\"Int\", example = \"100\"),\n             @ApiImplicitParam(name = \"type\", value = \"RESOURCE_TYPE\", required = true, dataType =\"ResourceType\"),\n             @ApiImplicitParam(name = \"name\", value = \"RESOURCE_NAME\", required = true, dataType =\"String\"),\n-            @ApiImplicitParam(name = \"description\", value = \"RESOURCE_DESC\",  dataType =\"String\"),\n-            @ApiImplicitParam(name = \"file\", value = \"RESOURCE_FILE\", required = true,dataType = \"MultipartFile\")\n+            @ApiImplicitParam(name = \"description\", value = \"RESOURCE_DESC\",  dataType =\"String\")\n     })\n     @PostMapping(value = \"/update\")\n     public Result updateResource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,",
      "parent_sha": "6b16ec1fb8d1b15d491a8054af0b582139dc691d"
    }
  },
  {
    "oid": "b642e9ca546d8ea21bbd9f193ff6ff9729037f75",
    "message": "[DS-6582][Master] fix condition task state (#6583)\n\nCo-authored-by: caishunfeng <534328519@qq.com>",
    "date": "2021-10-21T11:27:13Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/b642e9ca546d8ea21bbd9f193ff6ff9729037f75",
    "details": {
      "sha": "82be3119b0ce0bb74eb75f32f62fad7a988b2ae0",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/ConditionTaskProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/b642e9ca546d8ea21bbd9f193ff6ff9729037f75/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2Ftask%2FConditionTaskProcessor.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/b642e9ca546d8ea21bbd9f193ff6ff9729037f75/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2Ftask%2FConditionTaskProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fmaster%2Frunner%2Ftask%2FConditionTaskProcessor.java?ref=b642e9ca546d8ea21bbd9f193ff6ff9729037f75",
      "patch": "@@ -90,7 +90,6 @@ public boolean submit(TaskInstance task, ProcessInstance processInstance, int ma\n         Thread.currentThread().setName(threadLoggerInfoName);\n         initTaskParameters();\n         logger.info(\"dependent task start\");\n-        endTask();\n         return true;\n     }\n \n@@ -103,6 +102,7 @@ public ExecutionStatus taskState() {\n     public void run() {\n         if (conditionResult.equals(DependResult.WAITING)) {\n             setConditionResult();\n+            endTask();\n         } else {\n             endTask();\n         }",
      "parent_sha": "9b1984c2449538e5f0e547297762fdafc5e0211c"
    }
  },
  {
    "oid": "69bb7c749e2690b6645b6b5338eefba0381f8c0f",
    "message": "update worker group",
    "date": "2019-04-23T06:56:11Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/69bb7c749e2690b6645b6b5338eefba0381f8c0f",
    "details": {
      "sha": "332e6c83e3b4d31b0191b0f7b41aafd292046e79",
      "filename": "escheduler-server/src/main/java/cn/escheduler/server/worker/runner/FetchTaskThread.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/69bb7c749e2690b6645b6b5338eefba0381f8c0f/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fworker%2Frunner%2FFetchTaskThread.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/69bb7c749e2690b6645b6b5338eefba0381f8c0f/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fworker%2Frunner%2FFetchTaskThread.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-server%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fserver%2Fworker%2Frunner%2FFetchTaskThread.java?ref=69bb7c749e2690b6645b6b5338eefba0381f8c0f",
      "patch": "@@ -111,7 +111,7 @@ private boolean checkWorkerGroup(TaskInstance taskInstance, String host){\n \n         taskWorkerGroupId = (taskWorkerGroupId <= 0 ? processWorkerGroupId : taskWorkerGroupId);\n \n-        if(taskWorkerGroupId == 0){\n+        if(taskWorkerGroupId <= 0){\n             return true;\n         }\n         WorkerGroup workerGroup = processDao.queryWorkerGroupById(taskInstance.getWorkerGroupId());",
      "parent_sha": "1ce97039bc9a6dae8058379f9e1ac1076efabac7"
    }
  },
  {
    "oid": "2714cb1e6d408fd7f108733507ccef3ffc16af22",
    "message": "before send mail, check whether no receivers && cc receivers.\n\nto avoid exception javax.mail.SendFailedException: No recipient\naddresses. Especially from SQL Task",
    "date": "2019-04-11T08:55:34Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/2714cb1e6d408fd7f108733507ccef3ffc16af22",
    "details": {
      "sha": "3675d4c91920bc40c2adfc9237a443dc9d0a0f15",
      "filename": "escheduler-alert/src/main/java/cn/escheduler/alert/utils/MailUtils.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/2714cb1e6d408fd7f108733507ccef3ffc16af22/escheduler-alert%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Falert%2Futils%2FMailUtils.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/2714cb1e6d408fd7f108733507ccef3ffc16af22/escheduler-alert%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Falert%2Futils%2FMailUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-alert%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Falert%2Futils%2FMailUtils.java?ref=2714cb1e6d408fd7f108733507ccef3ffc16af22",
      "patch": "@@ -102,11 +102,16 @@ public static Map<String,Object> sendMails(Collection<String> receivers, String\n      */\n     public static Map<String,Object> sendMails(Collection<String> receivers, Collection<String> receiversCc, String title, String content, ShowType showType) {\n         Map<String,Object> retMap = new HashMap<>();\n-        retMap.put(Constants.STATUS, false);\n-\n \n         receivers.removeIf((from) -> (StringUtils.isEmpty(from)));\n \n+        // if there is no receivers && no receiversCc, no need to process\n+        if (CollectionUtils.isEmpty(receivers) && CollectionUtils.isEmpty(receiversCc)) {\n+            retMap.put(Constants.STATUS, true);\n+            return retMap;\n+        }\n+\n+        retMap.put(Constants.STATUS, false);\n         if (showType == ShowType.TABLE || showType == ShowType.TEXT){\n             // send email\n             HtmlEmail email = new HtmlEmail();",
      "parent_sha": "9c79a0f9f683eb6e21feadfa3ce70219d0c361ec"
    }
  },
  {
    "oid": "13f0fcf5ff0480aa17874ae38b149235c19c22e0",
    "message": "Update AbstractCommandExecutor.java",
    "date": "2021-01-29T03:56:19Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/13f0fcf5ff0480aa17874ae38b149235c19c22e0",
    "details": {
      "sha": "023eacb69bf51ca761d3953f8746fd5f72935ddc",
      "filename": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/13f0fcf5ff0480aa17874ae38b149235c19c22e0/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2FAbstractCommandExecutor.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/13f0fcf5ff0480aa17874ae38b149235c19c22e0/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2FAbstractCommandExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fserver%2Fworker%2Ftask%2FAbstractCommandExecutor.java?ref=13f0fcf5ff0480aa17874ae38b149235c19c22e0",
      "patch": "@@ -347,7 +347,7 @@ public void run() {\n                     String line;\n \n                     long lastFlushTime = System.currentTimeMillis();\n-\n+                    logBuffer.add(\"welcome to use dolphinscheduler scheduling system...\");\n                     while ((line = inReader.readLine()) != null || logBuffer.size() > 0) {\n                         if (null != line) {\n                             if (line.startsWith(\"${setValue(\")) {",
      "parent_sha": "25305a53f12a3bca83cd1f93af4cdd4ca22b6720"
    }
  },
  {
    "oid": "219a232b86c28ce04e4f8bea68e3ca4b67a5fd13",
    "message": "[Fix-16492][alert] FeiShuSender Exception.getMessage is null (#16498)\n\n* Update FeiShuSender.java\r\n\r\nThe Exception.getMessage present here is null, and the problem has occurred\r\n\r\n* Update dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuSender.java\r\n\r\nCo-authored-by: xiangzihao <zihaoxiang@apache.org>\r\n\r\n---------\r\n\r\nCo-authored-by: xiangzihao <zihaoxiang@apache.org>",
    "date": "2024-08-22T02:41:13Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/219a232b86c28ce04e4f8bea68e3ca4b67a5fd13",
    "details": {
      "sha": "05a34ccecc172f47683993a4c40e91e4f1067ece",
      "filename": "dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuSender.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/219a232b86c28ce04e4f8bea68e3ca4b67a5fd13/dolphinscheduler-alert%2Fdolphinscheduler-alert-plugins%2Fdolphinscheduler-alert-feishu%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Falert%2Ffeishu%2FFeiShuSender.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/219a232b86c28ce04e4f8bea68e3ca4b67a5fd13/dolphinscheduler-alert%2Fdolphinscheduler-alert-plugins%2Fdolphinscheduler-alert-feishu%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Falert%2Ffeishu%2FFeiShuSender.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-alert%2Fdolphinscheduler-alert-plugins%2Fdolphinscheduler-alert-feishu%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fplugin%2Falert%2Ffeishu%2FFeiShuSender.java?ref=219a232b86c28ce04e4f8bea68e3ca4b67a5fd13",
      "patch": "@@ -134,7 +134,7 @@ public AlertResult sendFeiShuMsg(AlertData alertData) {\n             String resp = sendMsg(alertData);\n             return checkSendFeiShuSendMsgResult(resp);\n         } catch (Exception e) {\n-            log.info(\"send fei shu alert msg  exception : {}\", e.getMessage());\n+            log.error(\"send fei shu alert failed:\", e);\n             alertResult = new AlertResult();\n             alertResult.setSuccess(false);\n             alertResult.setMessage(\"send fei shu alert fail.\");",
      "parent_sha": "5ffa45293e91d47cc59090ec271a7b9710aba759"
    }
  },
  {
    "oid": "b69ba4a70c3a914ccc142b3cfdda1c293f6a1084",
    "message": "[Fix-16346] Fix a bug that prevents re-uploading resource files (#16356)\n\nCo-authored-by: JohnZp <johnzp1109@google.com>",
    "date": "2024-07-23T01:53:10Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/b69ba4a70c3a914ccc142b3cfdda1c293f6a1084",
    "details": {
      "sha": "43c16c639d1961beee1643a48f1af36fcab91ba3",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/validator/resource/UpdateFileDtoValidator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/b69ba4a70c3a914ccc142b3cfdda1c293f6a1084/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fvalidator%2Fresource%2FUpdateFileDtoValidator.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/b69ba4a70c3a914ccc142b3cfdda1c293f6a1084/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fvalidator%2Fresource%2FUpdateFileDtoValidator.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fvalidator%2Fresource%2FUpdateFileDtoValidator.java?ref=b69ba4a70c3a914ccc142b3cfdda1c293f6a1084",
      "patch": "@@ -43,7 +43,9 @@ public void validate(UpdateFileDto updateFileDto) {\n         User loginUser = updateFileDto.getLoginUser();\n         MultipartFile file = updateFileDto.getFile();\n \n-        if (!Objects.equals(Files.getFileExtension(file.getName()),\n+        if (!Objects.equals(\n+                Files.getFileExtension(\n+                        file.getOriginalFilename() == null ? file.getName() : file.getOriginalFilename()),\n                 Files.getFileExtension(updateFileDto.getFileAbsolutePath()))) {\n             throw new ServiceException(\"file extension cannot not change\");\n         }",
      "parent_sha": "0e8595cbbe025eb272b6c885b6a94a15628dc1e9"
    }
  },
  {
    "oid": "edcb7aad23f73fb166efc3863dfb58e137ca05b4",
    "message": "fix#10214 Delete online workflows in batches, prompt information is accurate (#10215)",
    "date": "2022-05-24T02:18:03Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/edcb7aad23f73fb166efc3863dfb58e137ca05b4",
    "details": {
      "sha": "ad05c456f50a802716a81e91d64df59806f0ea80",
      "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/edcb7aad23f73fb166efc3863dfb58e137ca05b4/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FProcessDefinitionServiceImpl.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/edcb7aad23f73fb166efc3863dfb58e137ca05b4/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FProcessDefinitionServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2Fimpl%2FProcessDefinitionServiceImpl.java?ref=edcb7aad23f73fb166efc3863dfb58e137ca05b4",
      "patch": "@@ -711,7 +711,7 @@ public Map<String, Object> deleteProcessDefinitionByCode(User loginUser, long pr\n \n         // check process definition is already online\n         if (processDefinition.getReleaseState() == ReleaseState.ONLINE) {\n-            putMsg(result, Status.PROCESS_DEFINE_STATE_ONLINE, String.valueOf(code));\n+            putMsg(result, Status.PROCESS_DEFINE_STATE_ONLINE, processDefinition.getName());\n             return result;\n         }\n         // check process instances is already running",
      "parent_sha": "4dbe27bb8f7e87fcf18582e970d08236f2dbf3d5"
    }
  },
  {
    "oid": "28ba72b1ebc7a4001ead6701e42a6dfaa572af68",
    "message": "\u4fee\u6539\u5982\u679c\u7528\u6237\u6ca1\u6709\u521b\u5efa\u8d44\u6e90\u65f6\u7ed9\u7528\u6237\u6388\u6743\u8d44\u6e90\u4f1a\u62a5\u7a7a\u6307\u9488",
    "date": "2019-05-20T06:10:22Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/28ba72b1ebc7a4001ead6701e42a6dfaa572af68",
    "details": {
      "sha": "291c59ea22348ef89c29f0ed2193e6feb4699f67",
      "filename": "escheduler-api/src/main/java/cn/escheduler/api/service/ResourcesService.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/28ba72b1ebc7a4001ead6701e42a6dfaa572af68/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FResourcesService.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/28ba72b1ebc7a4001ead6701e42a6dfaa572af68/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FResourcesService.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/escheduler-api%2Fsrc%2Fmain%2Fjava%2Fcn%2Fescheduler%2Fapi%2Fservice%2FResourcesService.java?ref=28ba72b1ebc7a4001ead6701e42a6dfaa572af68",
      "patch": "@@ -701,17 +701,19 @@ public Map<String, Object> unauthorizedFile(User loginUser, Integer userId) {\n         if (checkAdmin(loginUser, result)) {\n             return result;\n         }\n-\n         List<Resource> resourceList = resourcesMapper.queryResourceExceptUserId(userId);\n-        Set<Resource> resourceSet = null;\n+        List<Object> list ;\n         if (resourceList != null && resourceList.size() > 0) {\n-            resourceSet = new HashSet<>(resourceList);\n-\n+            Set<Resource> resourceSet = new HashSet<>(resourceList);\n             List<Resource> authedResourceList = resourcesMapper.queryAuthorizedResourceList(userId);\n \n             getAuthorizedResourceList(resourceSet, authedResourceList);\n+            list = new ArrayList<>(resourceSet);\n+        }else {\n+            list = new ArrayList<>(0);\n         }\n-        result.put(Constants.DATA_LIST, new ArrayList<>(resourceSet));\n+\n+        result.put(Constants.DATA_LIST, list);\n         putMsg(result,Status.SUCCESS);\n         return result;\n     }",
      "parent_sha": "f420d24187ae3d9bdcaa633480c1630afccaa942"
    }
  },
  {
    "oid": "8b879746cce7ea8984246d4b90a677992cd6a755",
    "message": "refactor code style",
    "date": "2020-11-09T07:49:20Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/8b879746cce7ea8984246d4b90a677992cd6a755",
    "details": {
      "sha": "ca672e0281ea7d2050d2b2c23bff433400165087",
      "filename": "dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java",
      "status": "modified",
      "additions": 27,
      "deletions": 21,
      "changes": 48,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/8b879746cce7ea8984246d4b90a677992cd6a755/dolphinscheduler-dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fdao%2Fmapper%2FUdfFuncMapperTest.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/8b879746cce7ea8984246d4b90a677992cd6a755/dolphinscheduler-dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fdao%2Fmapper%2FUdfFuncMapperTest.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-dao%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fdao%2Fmapper%2FUdfFuncMapperTest.java?ref=8b879746cce7ea8984246d4b90a677992cd6a755",
      "patch": "@@ -59,9 +59,10 @@ public class UdfFuncMapperTest {\n \n     /**\n      * insert one udf\n+     *\n      * @return UdfFunc\n      */\n-    private UdfFunc insertOne(){\n+    private UdfFunc insertOne() {\n         UdfFunc udfFunc = new UdfFunc();\n         udfFunc.setUserId(1);\n         udfFunc.setFuncName(\"dolphin_udf_func\");\n@@ -77,9 +78,10 @@ private UdfFunc insertOne(){\n \n     /**\n      * insert one udf\n+     *\n      * @return\n      */\n-    private UdfFunc insertOne(User user){\n+    private UdfFunc insertOne(User user) {\n         UdfFunc udfFunc = new UdfFunc();\n         udfFunc.setUserId(user.getId());\n         udfFunc.setFuncName(\"dolphin_udf_func\");\n@@ -95,9 +97,10 @@ private UdfFunc insertOne(User user){\n \n     /**\n      * insert one user\n+     *\n      * @return User\n      */\n-    private User insertOneUser(){\n+    private User insertOneUser() {\n         User user = new User();\n         user.setUserName(\"user1\");\n         user.setUserPassword(\"1\");\n@@ -112,9 +115,10 @@ private User insertOneUser(){\n \n     /**\n      * insert one user\n+     *\n      * @return User\n      */\n-    private User insertOneUser(String userName){\n+    private User insertOneUser(String userName) {\n         User user = new User();\n         user.setUserName(userName);\n         user.setUserPassword(\"1\");\n@@ -129,11 +133,12 @@ private User insertOneUser(String userName){\n \n     /**\n      * insert UDFUser\n-     * @param user user\n+     *\n+     * @param user    user\n      * @param udfFunc udf func\n      * @return UDFUser\n      */\n-    private UDFUser insertOneUDFUser(User user,UdfFunc udfFunc){\n+    private UDFUser insertOneUDFUser(User user, UdfFunc udfFunc) {\n         UDFUser udfUser = new UDFUser();\n         udfUser.setUdfId(udfFunc.getId());\n         udfUser.setUserId(user.getId());\n@@ -145,9 +150,10 @@ private UDFUser insertOneUDFUser(User user,UdfFunc udfFunc){\n \n     /**\n      * create general user\n+     *\n      * @return User\n      */\n-    private User createGeneralUser(String userName){\n+    private User createGeneralUser(String userName) {\n         User user = new User();\n         user.setUserName(userName);\n         user.setUserPassword(\"1\");\n@@ -164,7 +170,7 @@ private User createGeneralUser(String userName){\n      * test update\n      */\n     @Test\n-    public void testUpdate(){\n+    public void testUpdate() {\n         //insertOne\n         UdfFunc udfFunc = insertOne();\n         udfFunc.setResourceName(\"dolphin_resource_update\");\n@@ -181,7 +187,7 @@ public void testUpdate(){\n      * test delete\n      */\n     @Test\n-    public void testDelete(){\n+    public void testDelete() {\n         //insertOne\n         UdfFunc udfFunc = insertOne();\n         //delete\n@@ -193,7 +199,7 @@ public void testDelete(){\n      * test query\n      */\n     @Test\n-    public void testQuery(){\n+    public void testQuery() {\n         //insertOne\n         UdfFunc udfFunc = insertOne();\n         //query\n@@ -210,9 +216,9 @@ public void testQueryUdfByIdStr() {\n         UdfFunc udfFunc = insertOne();\n         //insertOne\n         UdfFunc udfFunc1 = insertOne();\n-        int[] idArray = new int[]{udfFunc.getId(),udfFunc1.getId()};\n+        int[] idArray = new int[]{udfFunc.getId(), udfFunc1.getId()};\n         //queryUdfByIdStr\n-        List<UdfFunc> udfFuncList = udfFuncMapper.queryUdfByIdStr(idArray,\"\");\n+        List<UdfFunc> udfFuncList = udfFuncMapper.queryUdfByIdStr(idArray, \"\");\n         Assert.assertNotEquals(udfFuncList.size(), 0);\n     }\n \n@@ -226,8 +232,8 @@ public void testQueryUdfFuncPaging() {\n         //insertOne\n         UdfFunc udfFunc = insertOne(user);\n         //queryUdfFuncPaging\n-        Page<UdfFunc> page = new Page(1,3);\n-        IPage<UdfFunc> udfFuncIPage = udfFuncMapper.queryUdfFuncPaging(page,user.getId(),\"\");\n+        Page<UdfFunc> page = new Page(1, 3);\n+        IPage<UdfFunc> udfFuncIPage = udfFuncMapper.queryUdfFuncPaging(page, user.getId(), \"\");\n         Assert.assertNotEquals(udfFuncIPage.getTotal(), 0);\n \n     }\n@@ -282,7 +288,7 @@ public void testQueryAuthedUdfFunc() {\n     }\n \n     @Test\n-    public void testListAuthorizedUdfFunc(){\n+    public void testListAuthorizedUdfFunc() {\n         //create general user\n         User generalUser1 = createGeneralUser(\"user1\");\n         User generalUser2 = createGeneralUser(\"user2\");\n@@ -292,30 +298,30 @@ public void testListAuthorizedUdfFunc(){\n         UdfFunc unauthorizdUdfFunc = insertOne(generalUser2);\n \n         //udf function ids\n-        Integer[] udfFuncIds = new Integer[]{udfFunc.getId(),unauthorizdUdfFunc.getId()};\n+        Integer[] udfFuncIds = new Integer[]{udfFunc.getId(), unauthorizdUdfFunc.getId()};\n \n         List<UdfFunc> authorizedUdfFunc = udfFuncMapper.listAuthorizedUdfFunc(generalUser1.getId(), udfFuncIds);\n \n-        Assert.assertEquals(generalUser1.getId(),udfFunc.getUserId());\n-        Assert.assertNotEquals(generalUser1.getId(),unauthorizdUdfFunc.getUserId());\n+        Assert.assertEquals(generalUser1.getId(), udfFunc.getUserId());\n+        Assert.assertNotEquals(generalUser1.getId(), unauthorizdUdfFunc.getUserId());\n         Assert.assertFalse(authorizedUdfFunc.stream().map(t -> t.getId()).collect(toList()).containsAll(Arrays.asList(udfFuncIds)));\n \n \n         //authorize object unauthorizdUdfFunc to generalUser1\n-        insertOneUDFUser(generalUser1,unauthorizdUdfFunc);\n+        insertOneUDFUser(generalUser1, unauthorizdUdfFunc);\n         authorizedUdfFunc = udfFuncMapper.listAuthorizedUdfFunc(generalUser1.getId(), udfFuncIds);\n         Assert.assertTrue(authorizedUdfFunc.stream().map(t -> t.getId()).collect(toList()).containsAll(Arrays.asList(udfFuncIds)));\n     }\n \n     @Test\n-    public void batchUpdateUdfFuncTest(){\n+    public void batchUpdateUdfFuncTest() {\n         //create general user\n         User generalUser1 = createGeneralUser(\"user1\");\n         UdfFunc udfFunc = insertOne(generalUser1);\n         udfFunc.setResourceName(\"/updateTest\");\n         List<UdfFunc> udfFuncList = new ArrayList<>();\n         udfFuncList.add(udfFunc);\n-        Assert.assertTrue(udfFuncMapper.batchUpdateUdfFunc(udfFuncList)>0);\n+        Assert.assertTrue(udfFuncMapper.batchUpdateUdfFunc(udfFuncList) > 0);\n \n     }\n }\n\\ No newline at end of file",
      "parent_sha": "ab7748d6a05228808d0975f62a906cf0f93e6957"
    }
  },
  {
    "oid": "95374c30b90b1f0a5daa07403ce6a6d6cc066a1f",
    "message": "[Fix][API] Condition task null pointer exception (#4056)",
    "date": "2020-11-12T03:36:34Z",
    "url": "https://github.com/apache/dolphinscheduler/commit/95374c30b90b1f0a5daa07403ce6a6d6cc066a1f",
    "details": {
      "sha": "094620aee55082104a0ad0241a5ff2a6bed6144e",
      "filename": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/conditions/ConditionsParameters.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dolphinscheduler/blob/95374c30b90b1f0a5daa07403ce6a6d6cc066a1f/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Ftask%2Fconditions%2FConditionsParameters.java",
      "raw_url": "https://github.com/apache/dolphinscheduler/raw/95374c30b90b1f0a5daa07403ce6a6d6cc066a1f/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Ftask%2Fconditions%2FConditionsParameters.java",
      "contents_url": "https://api.github.com/repos/apache/dolphinscheduler/contents/dolphinscheduler-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fcommon%2Ftask%2Fconditions%2FConditionsParameters.java?ref=95374c30b90b1f0a5daa07403ce6a6d6cc066a1f",
      "patch": "@@ -21,6 +21,7 @@\n import org.apache.dolphinscheduler.common.process.ResourceInfo;\n import org.apache.dolphinscheduler.common.task.AbstractParameters;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n public class ConditionsParameters extends AbstractParameters {\n@@ -43,7 +44,7 @@ public boolean checkParameters() {\n \n     @Override\n     public List<ResourceInfo> getResourceFilesList() {\n-        return null;\n+        return new ArrayList<>();\n     }\n \n     public List<DependentTaskModel> getDependTaskList() {",
      "parent_sha": "02dbd3ee06cf047f9e644322c5153232f72e7be4"
    }
  }
]