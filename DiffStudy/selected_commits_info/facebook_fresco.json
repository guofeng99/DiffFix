[
  {
    "oid": "8aad4b1013d9bbede3c30709eb7cae56f5cb93d0",
    "message": "Make DefaultImageDecoder nullsafe\n\nReviewed By: defHLT\n\nDifferential Revision: D27706356\n\nfbshipit-source-id: c40a1074433610f695848080b2849d0cf7c57b47",
    "date": "2021-04-12T17:49:15Z",
    "url": "https://github.com/facebook/fresco/commit/8aad4b1013d9bbede3c30709eb7cae56f5cb93d0",
    "details": {
      "sha": "e129342f3033fa5847032f5bcd984e12c009f6cd",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/DefaultImageDecoder.java",
      "status": "modified",
      "additions": 18,
      "deletions": 10,
      "changes": 28,
      "blob_url": "https://github.com/facebook/fresco/blob/8aad4b1013d9bbede3c30709eb7cae56f5cb93d0/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FDefaultImageDecoder.java",
      "raw_url": "https://github.com/facebook/fresco/raw/8aad4b1013d9bbede3c30709eb7cae56f5cb93d0/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FDefaultImageDecoder.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FDefaultImageDecoder.java?ref=8aad4b1013d9bbede3c30709eb7cae56f5cb93d0",
      "patch": "@@ -21,6 +21,8 @@\n import com.facebook.imagepipeline.image.QualityInfo;\n import com.facebook.imagepipeline.platform.PlatformDecoder;\n import com.facebook.imagepipeline.transformation.BitmapTransformation;\n+import com.facebook.infer.annotation.Nullsafe;\n+import java.io.InputStream;\n import java.util.Map;\n import javax.annotation.Nullable;\n \n@@ -39,10 +41,11 @@\n  * <p>For API 21 and higher, this class produces standard Bitmaps, as purgeability is not supported\n  * on the most recent versions of Android.\n  */\n+@Nullsafe(Nullsafe.Mode.LOCAL)\n public class DefaultImageDecoder implements ImageDecoder {\n \n-  private final ImageDecoder mAnimatedGifDecoder;\n-  private final ImageDecoder mAnimatedWebPDecoder;\n+  private final @Nullable ImageDecoder mAnimatedGifDecoder;\n+  private final @Nullable ImageDecoder mAnimatedWebPDecoder;\n   private final PlatformDecoder mPlatformDecoder;\n \n   private final ImageDecoder mDefaultDecoder =\n@@ -70,15 +73,15 @@ public CloseableImage decode(\n   @Nullable private final Map<ImageFormat, ImageDecoder> mCustomDecoders;\n \n   public DefaultImageDecoder(\n-      final ImageDecoder animatedGifDecoder,\n-      final ImageDecoder animatedWebPDecoder,\n+      @Nullable final ImageDecoder animatedGifDecoder,\n+      @Nullable final ImageDecoder animatedWebPDecoder,\n       final PlatformDecoder platformDecoder) {\n     this(animatedGifDecoder, animatedWebPDecoder, platformDecoder, null);\n   }\n \n   public DefaultImageDecoder(\n-      final ImageDecoder animatedGifDecoder,\n-      final ImageDecoder animatedWebPDecoder,\n+      @Nullable final ImageDecoder animatedGifDecoder,\n+      @Nullable final ImageDecoder animatedWebPDecoder,\n       final PlatformDecoder platformDecoder,\n       @Nullable Map<ImageFormat, ImageDecoder> customDecoders) {\n     mAnimatedGifDecoder = animatedGifDecoder;\n@@ -107,9 +110,11 @@ public CloseableImage decode(\n     }\n     ImageFormat imageFormat = encodedImage.getImageFormat();\n     if (imageFormat == null || imageFormat == ImageFormat.UNKNOWN) {\n-      imageFormat =\n-          ImageFormatChecker.getImageFormat_WrapIOException(encodedImage.getInputStream());\n-      encodedImage.setImageFormat(imageFormat);\n+      InputStream inputStream = encodedImage.getInputStream();\n+      if (inputStream != null) {\n+        imageFormat = ImageFormatChecker.getImageFormat_WrapIOException(inputStream);\n+        encodedImage.setImageFormat(imageFormat);\n+      }\n     }\n     if (mCustomDecoders != null) {\n       ImageDecoder decoder = mCustomDecoders.get(imageFormat);\n@@ -204,7 +209,10 @@ public CloseableImage decodeAnimatedWebp(\n       final int length,\n       final QualityInfo qualityInfo,\n       final ImageDecodeOptions options) {\n-    return mAnimatedWebPDecoder.decode(encodedImage, length, qualityInfo, options);\n+    if (mAnimatedWebPDecoder != null) {\n+      return mAnimatedWebPDecoder.decode(encodedImage, length, qualityInfo, options);\n+    }\n+    throw new DecodeException(\"Animated WebP support not set up!\", encodedImage);\n   }\n \n   private void maybeApplyTransformation(",
      "parent_sha": "5ea3877bfdd45a46dabfdfad4ec3f9d011730a74"
    }
  },
  {
    "oid": "0a558082bbbd4d57e2d1b98792032c538f5ebe45",
    "message": "Add some @Nullable's to MultiUri\n\nReviewed By: oprisnik\n\nDifferential Revision: D17861138\n\nfbshipit-source-id: 76581079e5d12a056e7041d8311901dc7046f0c9",
    "date": "2019-10-14T17:51:55Z",
    "url": "https://github.com/facebook/fresco/commit/0a558082bbbd4d57e2d1b98792032c538f5ebe45",
    "details": {
      "sha": "dbcb3cd9a34295519bf04b2d6dd5768deb709e3a",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/multiuri/MultiUri.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/facebook/fresco/blob/0a558082bbbd4d57e2d1b98792032c538f5ebe45/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmultiuri%2FMultiUri.java",
      "raw_url": "https://github.com/facebook/fresco/raw/0a558082bbbd4d57e2d1b98792032c538f5ebe45/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmultiuri%2FMultiUri.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmultiuri%2FMultiUri.java?ref=0a558082bbbd4d57e2d1b98792032c538f5ebe45",
      "patch": "@@ -78,10 +78,10 @@ public Builder setImageRequests(@Nullable ImageRequest... multiImageRequests) {\n       getMultiUriDatasourceSupplier(\n           final ImagePipeline imagePipeline,\n           final MultiUri multiUri,\n-          final ImageRequest imageRequest,\n+          final @Nullable ImageRequest imageRequest,\n           final Object callerContext,\n-          final RequestListener requestListener,\n-          final String id) {\n+          final @Nullable RequestListener requestListener,\n+          final @Nullable String id) {\n \n     Supplier<DataSource<CloseableReference<CloseableImage>>> supplier = null;\n \n@@ -137,7 +137,7 @@ public static DataSource<CloseableReference<CloseableImage>> getImageRequestData\n       getFirstAvailableDataSourceSupplier(\n           final ImagePipeline imagePipeline,\n           final Object callerContext,\n-          final RequestListener requestListener,\n+          final @Nullable RequestListener requestListener,\n           ImageRequest[] imageRequests,\n           boolean tryBitmapCacheOnlyFirst,\n           final @Nullable String uiComponentId) {",
      "parent_sha": "dffe69780a4f90138e0b95616379f95d67188e10"
    }
  },
  {
    "oid": "b5974c5535cbd80498310b381464b8291884b856",
    "message": "Added mounting type annotation for Vito image spec\n\nReviewed By: defHLT\n\nDifferential Revision: D21282032\n\nfbshipit-source-id: 3935128c47ce6dbd0b0221b22f825655338fbcb0",
    "date": "2020-04-29T18:20:11Z",
    "url": "https://github.com/facebook/fresco/commit/b5974c5535cbd80498310b381464b8291884b856",
    "details": {
      "sha": "9fa3eabb8a843f540ebca9520f00c48e3e9adcb5",
      "filename": "vito/litho/src/main/java/com/facebook/fresco/vito/litho/FrescoVitoImage2Spec.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/b5974c5535cbd80498310b381464b8291884b856/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImage2Spec.java",
      "raw_url": "https://github.com/facebook/fresco/raw/b5974c5535cbd80498310b381464b8291884b856/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImage2Spec.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImage2Spec.java?ref=b5974c5535cbd80498310b381464b8291884b856",
      "patch": "@@ -29,6 +29,7 @@\n import com.facebook.litho.annotations.CachedValue;\n import com.facebook.litho.annotations.FromPrepare;\n import com.facebook.litho.annotations.MountSpec;\n+import com.facebook.litho.annotations.MountingType;\n import com.facebook.litho.annotations.OnBind;\n import com.facebook.litho.annotations.OnCalculateCachedValue;\n import com.facebook.litho.annotations.OnCreateMountContent;\n@@ -51,7 +52,7 @@ public class FrescoVitoImage2Spec {\n \n   @PropDefault protected static final float imageAspectRatio = 1f;\n \n-  @OnCreateMountContent\n+  @OnCreateMountContent(mountingType = MountingType.DRAWABLE)\n   static FrescoDrawable2 onCreateMountContent(Context c) {\n     return FrescoVitoProvider.getController().createDrawable();\n   }",
      "parent_sha": "a0aed774b289b4e343c024557fc38376718cf7e7"
    }
  },
  {
    "oid": "f5eb85eb9f118d7835bd21dd995d14986af6d29f",
    "message": "Handle pin bitmap error in BitmapAnimationBackend\n\nReviewed By: zmroczek\n\nDifferential Revision: D6727088\n\nfbshipit-source-id: 76b6ca8a3eabb88cc4e6d31eeb360ccbc6169a22",
    "date": "2018-01-16T15:47:30Z",
    "url": "https://github.com/facebook/fresco/commit/f5eb85eb9f118d7835bd21dd995d14986af6d29f",
    "details": {
      "sha": "cf435780c53b24d947fab27715065ab3a34936a2",
      "filename": "animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/facebook/fresco/blob/f5eb85eb9f118d7835bd21dd995d14986af6d29f/animated-drawable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fanimation%2Fbitmap%2FBitmapAnimationBackend.java",
      "raw_url": "https://github.com/facebook/fresco/raw/f5eb85eb9f118d7835bd21dd995d14986af6d29f/animated-drawable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fanimation%2Fbitmap%2FBitmapAnimationBackend.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/animated-drawable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fanimation%2Fbitmap%2FBitmapAnimationBackend.java?ref=f5eb85eb9f118d7835bd21dd995d14986af6d29f",
      "patch": "@@ -18,6 +18,7 @@\n import android.graphics.drawable.Drawable;\n import android.support.annotation.IntDef;\n import android.support.annotation.IntRange;\n+import com.facebook.common.logging.FLog;\n import com.facebook.common.references.CloseableReference;\n import com.facebook.fresco.animation.backend.AnimationBackend;\n import com.facebook.fresco.animation.backend.AnimationBackendDelegateWithInactivityCheck;\n@@ -88,6 +89,8 @@ public interface FrameListener {\n   public static final int FRAME_TYPE_CREATED = 2;\n   public static final int FRAME_TYPE_FALLBACK = 3;\n \n+  private static final Class<?> TAG = BitmapAnimationBackend.class;\n+\n   private final PlatformBitmapFactory mPlatformBitmapFactory;\n   private final BitmapFrameCache mBitmapFrameCache;\n   private final AnimationInformation mAnimationInformation;\n@@ -203,8 +206,15 @@ private boolean drawFrameOrFallback(Canvas canvas, int frameNumber, @FrameType i\n           break;\n \n         case FRAME_TYPE_CREATED:\n-          bitmapReference =\n-              mPlatformBitmapFactory.createBitmap(mBitmapWidth, mBitmapHeight, mBitmapConfig);\n+          try {\n+            bitmapReference =\n+                mPlatformBitmapFactory.createBitmap(mBitmapWidth, mBitmapHeight, mBitmapConfig);\n+          } catch (RuntimeException e) {\n+            // Failed to create the bitmap for the frame, return and report that we could not\n+            // draw the frame.\n+            FLog.w(TAG, \"Failed to create frame bitmap\", e);\n+            return false;\n+          }\n           // Try to render the frame and draw on the canvas immediately after\n           drawn = renderFrameInBitmap(frameNumber, bitmapReference) &&\n               drawBitmapAndCache(frameNumber, bitmapReference, canvas, FRAME_TYPE_CREATED);",
      "parent_sha": "4a64df0099776be6bb1e229a274526e1d5c54df3"
    }
  },
  {
    "oid": "c24a72c2fc852fa1216363a3fefa4926825781c4",
    "message": "Clean up ImagePipelineFactory",
    "date": "2015-04-23T16:41:45Z",
    "url": "https://github.com/facebook/fresco/commit/c24a72c2fc852fa1216363a3fefa4926825781c4",
    "details": {
      "sha": "26e6ba3ccb7b2ec236dfb86b60ca27dc1121eeb8",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 15,
      "changes": 16,
      "blob_url": "https://github.com/facebook/fresco/blob/c24a72c2fc852fa1216363a3fefa4926825781c4/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/c24a72c2fc852fa1216363a3fefa4926825781c4/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java?ref=c24a72c2fc852fa1216363a3fefa4926825781c4",
      "patch": "@@ -105,8 +105,7 @@ public ImagePipelineFactory(ImagePipelineConfig config) {\n     mConfig = Preconditions.checkNotNull(config);\n   }\n \n-  // TODO(5959048): these methods should be taken private\n-  // We need them public for now so internal code can use them.\n+  // We need some of these methods public for now so internal code can use them.\n \n   public CountingMemoryCache<CacheKey, CloseableImage>\n       getBitmapCountingMemoryCache() {\n@@ -129,15 +128,6 @@ public MemoryCache<CacheKey, CloseableImage> getBitmapMemoryCache() {\n     return mBitmapMemoryCache;\n   }\n \n-  private EmptyJpegGenerator getEmptyJpegGenerator() {\n-    if (mEmptyJpegGenerator == null) {\n-      mEmptyJpegGenerator =\n-          new EmptyJpegGenerator(\n-              mConfig.getPoolFactory().getPooledByteBufferFactory());\n-    }\n-    return mEmptyJpegGenerator;\n-  }\n-\n   public CountingMemoryCache<CacheKey, PooledByteBuffer> getEncodedCountingMemoryCache() {\n     if (mEncodedCountingMemoryCache == null) {\n       mEncodedCountingMemoryCache =\n@@ -194,10 +184,6 @@ public ImagePipeline getImagePipeline() {\n     return mImagePipeline;\n   }\n \n-  public PlatformBitmapFactory getPlatformBitmapFactory() {\n-    return mConfig.getPlatformBitmapFactory();\n-  }\n-\n   private ProducerFactory getProducerFactory() {\n     if (mProducerFactory == null) {\n       mProducerFactory =",
      "parent_sha": "df3e01b3b30c0d8eb225eb5577e770e7ed2bba38"
    }
  },
  {
    "oid": "99a593f41b1c22eb08e1c92879a56ee00dbd4009",
    "message": "Rename some of the BufferedDiskCache tests\n\nReviewed By: aagnes\n\nDifferential Revision: D2933368\n\nfb-gh-sync-id: f78e1fedc9f711326b2141fc671db9107dd3d648\nfbshipit-source-id: f78e1fedc9f711326b2141fc671db9107dd3d648",
    "date": "2016-03-31T18:38:16Z",
    "url": "https://github.com/facebook/fresco/commit/99a593f41b1c22eb08e1c92879a56ee00dbd4009",
    "details": {
      "sha": "17b818d9a22b7cc09a0a29d7516e94252d32bd20",
      "filename": "imagepipeline/src/test/java/com/facebook/imagepipeline/cache/BufferedDiskCacheTest.java",
      "status": "modified",
      "additions": 32,
      "deletions": 17,
      "changes": 49,
      "blob_url": "https://github.com/facebook/fresco/blob/99a593f41b1c22eb08e1c92879a56ee00dbd4009/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCacheTest.java",
      "raw_url": "https://github.com/facebook/fresco/raw/99a593f41b1c22eb08e1c92879a56ee00dbd4009/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCacheTest.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCacheTest.java?ref=99a593f41b1c22eb08e1c92879a56ee00dbd4009",
      "patch": "@@ -30,20 +30,35 @@\n import com.facebook.imagepipeline.testing.TestExecutorService;\n \n import bolts.Task;\n-import org.junit.*;\n-import org.junit.runner.*;\n-import org.mockito.*;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.Mock;\n-import org.powermock.core.classloader.annotations.*;\n-import org.powermock.modules.junit4.rule.*;\n-import org.robolectric.*;\n-import org.robolectric.annotation.*;\n-\n-import static org.junit.Assert.*;\n-import static org.mockito.Mockito.*;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareOnlyThisForTest;\n+import org.powermock.modules.junit4.rule.PowerMockRule;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.same;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.*;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n @RunWith(RobolectricTestRunner.class)\n @PowerMockIgnore({ \"org.mockito.*\", \"org.robolectric.*\", \"android.*\" })\n@@ -213,7 +228,7 @@ public void testPins() {\n   }\n \n   @Test\n-  public void testServesPinned() throws Exception {\n+  public void testFromStagingArea() throws Exception {\n     when(mStagingArea.get(mCacheKey)).thenReturn(mEncodedImage);\n     assertEquals(2, mCloseableReference.getUnderlyingReferenceTestOnly().getRefCountTestOnly());\n     assertSame(\n@@ -223,7 +238,7 @@ public void testServesPinned() throws Exception {\n   }\n \n   @Test\n-  public void testServesPinned2() throws Exception {\n+  public void testFromStagingAreaLater() throws Exception {\n     Task<EncodedImage> readTask = mBufferedDiskCache.get(mCacheKey, mIsCancelled);\n     assertFalse(readTask.isCompleted());\n \n@@ -242,7 +257,7 @@ public void testServesPinned2() throws Exception {\n   }\n \n   @Test\n-  public void testServesPinnedList() throws Exception {\n+  public void testListFromStagingAreaLater() throws Exception {\n     Task<EncodedImage> readTask = mBufferedDiskCache.get(mCacheKeys, mIsCancelled);\n     assertFalse(readTask.isCompleted());\n \n@@ -273,7 +288,7 @@ public void testUnpins() {\n   }\n \n   @Test\n-  public void testPins2() {\n+  public void testContainsFromStagingAreaLater() {\n     Task<Boolean> readTask = mBufferedDiskCache.contains(mCacheKey);\n     assertFalse(readTask.isCompleted());\n     when(mStagingArea.get(mCacheKey)).thenReturn(mEncodedImage);\n@@ -282,13 +297,13 @@ public void testPins2() {\n   }\n \n   @Test\n-  public void testUnpins2() {\n+  public void testRemoveFromStagingArea() {\n     mBufferedDiskCache.remove(mCacheKey);\n     verify(mStagingArea).remove(mCacheKey);\n   }\n \n   @Test\n-  public void testUpins3() {\n+  public void testClearFromStagingArea() {\n     mBufferedDiskCache.clearAll();\n     verify(mStagingArea).clearAll();\n   }",
      "parent_sha": "f5aa8c6a1c6134736645355b52d4d8fa60f6cf33"
    }
  },
  {
    "oid": "6aa2f831a5d1fd0e3a507509a769972157a01b7e",
    "message": "Added support for different protocol redirection on Http Requests",
    "date": "2015-05-31T22:55:26Z",
    "url": "https://github.com/facebook/fresco/commit/6aa2f831a5d1fd0e3a507509a769972157a01b7e",
    "details": {
      "sha": "1686c835494bbe59fa9a205ff49dde051b34e271",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher.java",
      "status": "modified",
      "additions": 28,
      "deletions": 12,
      "changes": 40,
      "blob_url": "https://github.com/facebook/fresco/blob/6aa2f831a5d1fd0e3a507509a769972157a01b7e/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FHttpUrlConnectionNetworkFetcher.java",
      "raw_url": "https://github.com/facebook/fresco/raw/6aa2f831a5d1fd0e3a507509a769972157a01b7e/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FHttpUrlConnectionNetworkFetcher.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FHttpUrlConnectionNetworkFetcher.java?ref=6aa2f831a5d1fd0e3a507509a769972157a01b7e",
      "patch": "@@ -51,19 +51,35 @@ public void fetch(final FetchState fetchState, final Callback callback) {\n           @Override\n           public void run() {\n             HttpURLConnection connection = null;\n-            try {\n-              Uri uri = fetchState.getUri();\n-              URL url = new URL(uri.toString());\n-              connection = (HttpURLConnection) url.openConnection();\n-              InputStream is = connection.getInputStream();\n-              callback.onResponse(is, -1);\n-            } catch (Exception e) {\n-              callback.onFailure(e);\n-            } finally {\n-              if (connection != null) {\n-                connection.disconnect();\n+            Uri uri = fetchState.getUri();\n+            String scheme = uri.getScheme();\n+            String uriString = fetchState.getUri().toString();\n+            while (true) {\n+              String nextUriString;\n+              String nextScheme;\n+              InputStream is;\n+              try {\n+                URL url = new URL(uriString);\n+                connection = (HttpURLConnection) url.openConnection();\n+                nextUriString = connection.getHeaderField(\"Location\");\n+                nextScheme = (nextUriString == null) ? null : Uri.parse(nextUriString).getScheme();\n+                if (nextUriString == null || nextScheme.equals(scheme)) {\n+                  is = connection.getInputStream();\n+                  callback.onResponse(is, -1);\n+                  break;\n+                }\n+                uriString = nextUriString;\n+                scheme = nextScheme;\n+              } catch (Exception e) {\n+                callback.onFailure(e);\n+                break;\n+              } finally {\n+                if (connection != null) {\n+                  connection.disconnect();\n+                }\n               }\n-            }\n+          }\n+\n           }\n         });\n     fetchState.getContext().addCallbacks(",
      "parent_sha": "0dae246056eb332507a5b494914dda530e0e0c62"
    }
  },
  {
    "oid": "5fbe8699e1b88871f421945e2941eabd234fe5f7",
    "message": "Added additional tests for CountingMemoryCache\n\nSummary: This change adds additional tests for CountingMemoryCache to ensure the cache size is computed correctly when items are reused.\n\nReviewed By: lambdapioneer\n\nDifferential Revision: D4883268\n\nfbshipit-source-id: dc863dc571e3e0eec4f338b7bb5edf8243c9bc08",
    "date": "2017-04-18T16:18:31Z",
    "url": "https://github.com/facebook/fresco/commit/5fbe8699e1b88871f421945e2941eabd234fe5f7",
    "details": {
      "sha": "80e68dda87192b4929f26ab6ed2023ce428a79ca",
      "filename": "imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/CountingMemoryCacheTest.java",
      "status": "modified",
      "additions": 59,
      "deletions": 2,
      "changes": 61,
      "blob_url": "https://github.com/facebook/fresco/blob/5fbe8699e1b88871f421945e2941eabd234fe5f7/imagepipeline-base%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FCountingMemoryCacheTest.java",
      "raw_url": "https://github.com/facebook/fresco/raw/5fbe8699e1b88871f421945e2941eabd234fe5f7/imagepipeline-base%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FCountingMemoryCacheTest.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FCountingMemoryCacheTest.java?ref=5fbe8699e1b88871f421945e2941eabd234fe5f7",
      "patch": "@@ -213,9 +213,16 @@ public void testToggleExclusive() {\n \n   @Test\n   public void testCantReuseNonExclusive() {\n-    mCache.cache(KEY, newReference(100), mEntryStateObserver);\n-    assertNull(mCache.reuse(KEY));\n+    CloseableReference<Integer> cachedRef =\n+        mCache.cache(KEY, newReference(100), mEntryStateObserver);\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(0, 0);\n+    CloseableReference<Integer> reusedRef = mCache.reuse(KEY);\n+    assertNull(reusedRef);\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(0, 0);\n     verify(mEntryStateObserver, never()).onExclusivityChanged(anyString(), anyBoolean());\n+    cachedRef.close();\n   }\n \n   @Test\n@@ -224,11 +231,61 @@ public void testCanReuseExclusive() {\n         mCache.cache(KEY, newReference(100), mEntryStateObserver);\n     cachedRef.close();\n     verify(mEntryStateObserver).onExclusivityChanged(KEY, true);\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(1, 100);\n+    cachedRef = mCache.reuse(KEY);\n+    assertNotNull(cachedRef);\n+    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);\n+    assertTotalSize(0, 0);\n+    assertExclusivelyOwnedSize(0, 0);\n+    cachedRef.close();\n+    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);\n+  }\n+\n+  @Test\n+  public void testReuseExclusive_CacheSameItem() {\n+    CloseableReference<Integer> cachedRef =\n+        mCache.cache(KEY, newReference(100), mEntryStateObserver);\n+    cachedRef.close();\n+    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(1, 100);\n+    cachedRef = mCache.reuse(KEY);\n+    assertNotNull(cachedRef);\n+    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);\n+    assertTotalSize(0, 0);\n+    assertExclusivelyOwnedSize(0, 0);\n+    CloseableReference<Integer> newItem = mCache.cache(KEY, cachedRef);\n+    cachedRef.close();\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(0, 0);\n+    newItem.close();\n+    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(1, 100);\n+  }\n+\n+  @Test\n+  public void testReuseExclusive_CacheSameItemWithDifferentKey() {\n+    CloseableReference<Integer> cachedRef =\n+        mCache.cache(KEY, newReference(100), mEntryStateObserver);\n+    cachedRef.close();\n+    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(1, 100);\n     cachedRef = mCache.reuse(KEY);\n     assertNotNull(cachedRef);\n     verify(mEntryStateObserver).onExclusivityChanged(KEY, false);\n+    assertTotalSize(0, 0);\n+    assertExclusivelyOwnedSize(0, 0);\n+    CloseableReference<Integer> newItem = mCache.cache(KEYS[2], cachedRef);\n     cachedRef.close();\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(0, 0);\n+    newItem.close();\n     verify(mEntryStateObserver).onExclusivityChanged(KEY, true);\n+    assertTotalSize(1, 100);\n+    assertExclusivelyOwnedSize(1, 100);\n   }\n \n   @Test",
      "parent_sha": "96636983b195cb985db36a7dc2eb7ef13f59a44b"
    }
  },
  {
    "oid": "ceae4592ad67daccf40eaf314183db8e3d9c655e",
    "message": "Add ability to check if ImagePipelineFactory is already initialized and log a warning if it's initialized twice\n\nDifferential Revision: D8588415\n\nfbshipit-source-id: 7dd16dcff366e8bcec6285841914e6ff32422dbd",
    "date": "2018-06-22T14:48:11Z",
    "url": "https://github.com/facebook/fresco/commit/ceae4592ad67daccf40eaf314183db8e3d9c655e",
    "details": {
      "sha": "1251d22289edbe46bf198ae6b66cd6ec41a2d284",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java",
      "status": "modified",
      "additions": 20,
      "deletions": 12,
      "changes": 32,
      "blob_url": "https://github.com/facebook/fresco/blob/ceae4592ad67daccf40eaf314183db8e3d9c655e/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/ceae4592ad67daccf40eaf314183db8e3d9c655e/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java?ref=ceae4592ad67daccf40eaf314183db8e3d9c655e",
      "patch": "@@ -17,6 +17,7 @@\n import com.facebook.common.internal.AndroidPredicates;\n import com.facebook.common.internal.Preconditions;\n import com.facebook.common.internal.Suppliers;\n+import com.facebook.common.logging.FLog;\n import com.facebook.common.memory.PooledByteBuffer;\n import com.facebook.common.time.SystemClock;\n import com.facebook.imageformat.ImageFormatChecker;\n@@ -61,6 +62,8 @@\n @NotThreadSafe\n public class ImagePipelineFactory {\n \n+  private static final Class<?> TAG = ImagePipelineFactory.class;\n+\n   private static ImagePipelineFactory sInstance = null;\n   private final ThreadHandoffProducerQueue mThreadHandoffProducerQueue;\n \n@@ -71,24 +74,29 @@ public static ImagePipelineFactory getInstance() {\n     return Preconditions.checkNotNull(sInstance, \"ImagePipelineFactory was not initialized!\");\n   }\n \n-  /**\n-   * Initializes {@link ImagePipelineFactory} with default config.\n-   */\n-  public static void initialize(Context context) {\n+  /** Initializes {@link ImagePipelineFactory} with default config. */\n+  public static synchronized void initialize(Context context) {\n     initialize(ImagePipelineConfig.newBuilder(context).build());\n   }\n \n-  /**\n-   * Initializes {@link ImagePipelineFactory} with the specified config.\n-   */\n-  public static void initialize(ImagePipelineConfig imagePipelineConfig) {\n+  /** Initializes {@link ImagePipelineFactory} with the specified config. */\n+  public static synchronized void initialize(ImagePipelineConfig imagePipelineConfig) {\n+    if (sInstance != null) {\n+      FLog.w(\n+          TAG,\n+          \"ImagePipelineFactory has already been initialized! `ImagePipelineFactory.initialize(...)` should only be called once to avoid unexpected behavior.\");\n+    }\n+\n     sInstance = new ImagePipelineFactory(imagePipelineConfig);\n   }\n \n-  /**\n-   * Shuts {@link ImagePipelineFactory} down.\n-   */\n-  public static void shutDown() {\n+  /** Checks if {@link ImagePipelineFactory} has already been initialized */\n+  public static synchronized boolean hasBeenInitialized() {\n+    return sInstance != null;\n+  }\n+\n+  /** Shuts {@link ImagePipelineFactory} down. */\n+  public static synchronized void shutDown() {\n     if (sInstance != null) {\n       sInstance.getBitmapMemoryCache().removeAll(AndroidPredicates.<CacheKey>True());\n       sInstance.getEncodedMemoryCache().removeAll(AndroidPredicates.<CacheKey>True());",
      "parent_sha": "5357424115b6e3ef9966d141efb66cd72bb5f0e9"
    }
  },
  {
    "oid": "34551e93442a33f23d0eac70e708a3c7b9d2dd27",
    "message": "Improve code reuse in ResizeAndRotateProducerTest\n\nSummary:\nThis more clearly breaks up helper methods in ResizeAndRotateProducerTest and makes more use of them.\n\nThis is useful for the upcoming addition of tests to cover the situations where downsampling is enabled.\n\nReviewed By: lambdapioneer\n\nDifferential Revision: D3827966\n\nfbshipit-source-id: 53ee85fcb6d6c318302231906faec69272de37b6",
    "date": "2016-09-14T13:30:53Z",
    "url": "https://github.com/facebook/fresco/commit/34551e93442a33f23d0eac70e708a3c7b9d2dd27",
    "details": {
      "sha": "04236f634f26467379291a7669d4589c69b74097",
      "filename": "imagepipeline/src/test/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducerTest.java",
      "status": "modified",
      "additions": 106,
      "deletions": 58,
      "changes": 164,
      "blob_url": "https://github.com/facebook/fresco/blob/34551e93442a33f23d0eac70e708a3c7b9d2dd27/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FResizeAndRotateProducerTest.java",
      "raw_url": "https://github.com/facebook/fresco/raw/34551e93442a33f23d0eac70e708a3c7b9d2dd27/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FResizeAndRotateProducerTest.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FResizeAndRotateProducerTest.java?ref=34551e93442a33f23d0eac70e708a3c7b9d2dd27",
      "patch": "@@ -157,45 +157,44 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n   @Test\n   public void testUnknownDoesNotPassOnIntermediateResult() throws Exception {\n     whenRequestsRotationFromMetadata();\n-    EncodedImage intermediateEncodedImage = new EncodedImage(mIntermediateResult);\n-    mResizeAndRotateProducerConsumer.onNewResult(intermediateEncodedImage, false);\n-    verify(mConsumer, times(0)).onNewResult(intermediateEncodedImage, false);\n+\n+    provideIntermediateResult(\n+        ImageFormat.JPEG,\n+        EncodedImage.UNKNOWN_WIDTH,\n+        EncodedImage.UNKNOWN_HEIGHT,\n+        EncodedImage.UNKNOWN_ROTATION_ANGLE);\n+    verifyNoIntermediateResultPassedThrough();\n   }\n \n   @Test\n   public void testUnknownPassesOnResultIfIsLast() throws Exception {\n     whenRequestsRotationFromMetadata();\n-    EncodedImage finalEncodedImage = new EncodedImage(mIntermediateResult);\n-    mResizeAndRotateProducerConsumer.onNewResult(finalEncodedImage, true);\n-    verify(mConsumer).onNewResult(finalEncodedImage, true);\n+\n+    provideFinalResult(ImageFormat.JPEG);\n+    verifyFinalResultPassedThroughUnchanged();\n   }\n \n   @Test\n   public void testDoesNotTransformIfNotRequested() {\n-    whenRequestSpecificRotation(0);\n-    EncodedImage intermediateEncodedImage = new EncodedImage(mIntermediateResult);\n-    intermediateEncodedImage.setImageFormat(ImageFormat.JPEG);\n-    intermediateEncodedImage.setRotationAngle(0);\n-    intermediateEncodedImage.setWidth(-1);\n-    intermediateEncodedImage.setHeight(-1);\n-    mResizeAndRotateProducerConsumer.onNewResult(intermediateEncodedImage, false);\n-    verify(mConsumer).onNewResult(intermediateEncodedImage, false);\n-    EncodedImage finalEncodedImage = new EncodedImage(mFinalResult);\n-    mResizeAndRotateProducerConsumer.onNewResult(finalEncodedImage, true);\n-    verify(mConsumer).onNewResult(finalEncodedImage, true);\n+    whenRequestSpecificRotation(RotationOptions.NO_ROTATION);\n+\n+    provideIntermediateResult(ImageFormat.JPEG);\n+    verifyIntermediateResultPassedThroughUnchanged();\n+\n+    provideFinalResult(ImageFormat.JPEG);\n+    verifyFinalResultPassedThroughUnchanged();\n     verifyZeroJpegTranscoderInteractions();\n   }\n \n   @Test\n   public void testDoesNotTransformIfNotJpeg() throws Exception {\n     whenRequestsRotationFromMetadata();\n-    EncodedImage intermediateEncodedImage = new EncodedImage(mIntermediateResult);\n-    intermediateEncodedImage.setImageFormat(ImageFormat.WEBP_SIMPLE);\n-    mResizeAndRotateProducerConsumer.onNewResult(intermediateEncodedImage, false);\n-    verify(mConsumer).onNewResult(intermediateEncodedImage, false);\n-    EncodedImage finalEncodedImage = new EncodedImage(mFinalResult);\n-    mResizeAndRotateProducerConsumer.onNewResult(finalEncodedImage, true);\n-    verify(mConsumer).onNewResult(finalEncodedImage, true);\n+\n+    provideIntermediateResult(ImageFormat.WEBP_SIMPLE);\n+    verifyIntermediateResultPassedThroughUnchanged();\n+\n+    provideFinalResult(ImageFormat.WEBP_SIMPLE);\n+    verifyFinalResultPassedThroughUnchanged();\n     verifyZeroJpegTranscoderInteractions();\n   }\n \n@@ -207,9 +206,12 @@ public void testDoesRotateIfJpeg() throws Exception {\n     whenRequestWidthAndHeight(sourceWidth, sourceHeight);\n     whenRequestsRotationFromMetadata();\n \n-    provideIntermediateResultAndVerifyNoConsumerInteractions(\n-        sourceWidth, sourceHeight, rotationAngle);\n-    provideFinalResultAndVerifyConsumerInteractions(sourceWidth, sourceHeight, rotationAngle);\n+    provideIntermediateResult(ImageFormat.JPEG, sourceWidth, sourceHeight, rotationAngle);\n+    verifyNoIntermediateResultPassedThrough();\n+\n+    provideFinalResult(ImageFormat.JPEG, sourceWidth, sourceHeight, rotationAngle);\n+    verifyAFinalResultPassedThrough();\n+\n     assertEquals(2, mFinalResult.getUnderlyingReferenceTestOnly().getRefCountTestOnly());\n     assertTrue(mPooledByteBuffer.isClosed());\n \n@@ -223,14 +225,11 @@ public void testDoesResizeIfJpeg() throws Exception {\n     whenRequestWidthAndHeight(preferredWidth, preferredHeight);\n     whenRequestSpecificRotation(RotationOptions.NO_ROTATION);\n \n-    provideIntermediateResultAndVerifyNoConsumerInteractions(\n-        preferredWidth * 2,\n-        preferredHeight * 2,\n-        0);\n-    provideFinalResultAndVerifyConsumerInteractions(\n-        preferredWidth * 2,\n-        preferredHeight * 2,\n-        0);\n+    provideIntermediateResult(ImageFormat.JPEG, preferredWidth * 2, preferredHeight * 2, 0);\n+    verifyNoIntermediateResultPassedThrough();\n+\n+    provideFinalResult(ImageFormat.JPEG, preferredWidth * 2, preferredHeight * 2, 0);\n+    verifyAFinalResultPassedThrough();\n \n     assertEquals(2, mFinalResult.getUnderlyingReferenceTestOnly().getRefCountTestOnly());\n     assertTrue(mPooledByteBuffer.isClosed());\n@@ -242,71 +241,89 @@ public void testDoesResizeIfJpeg() throws Exception {\n   public void testDoesNotUpscale() {\n     whenRequestWidthAndHeight(150, 150);\n     whenRequestSpecificRotation(RotationOptions.NO_ROTATION);\n-    provideFinalResultAndVerifyConsumerInteractions(100, 100, 0);\n+\n+    provideFinalResult(ImageFormat.JPEG, 100, 100, 0);\n+    verifyFinalResultPassedThroughUnchanged();\n     verifyZeroJpegTranscoderInteractions();\n   }\n \n   @Test\n   public void testDoesNotUpscaleWhenRotating() {\n     whenRequestWidthAndHeight(150, 150);\n     whenRequestsRotationFromMetadata();\n-    provideFinalResultAndVerifyConsumerInteractions(100, 100, 90);\n+\n+    provideFinalResult(ImageFormat.JPEG, 100, 100, 90);\n+    verifyAFinalResultPassedThrough();\n     verifyJpegTranscoderInteractions(8, 90);\n   }\n \n   @Test\n   public void testDoesComputeRightNumeratorWhenRotating_0() {\n     whenRequestWidthAndHeight(50, 100);\n     whenRequestsRotationFromMetadata();\n-    provideFinalResultAndVerifyConsumerInteractions(400, 200, 0);\n+\n+    provideFinalResult(ImageFormat.JPEG, 400, 200, 0);\n+    verifyAFinalResultPassedThrough();\n     verifyJpegTranscoderInteractions(4, 0);\n   }\n \n   @Test\n   public void testDoesComputeRightNumeratorWhenRotating_90() {\n     whenRequestWidthAndHeight(50, 100);\n     whenRequestsRotationFromMetadata();\n-    provideFinalResultAndVerifyConsumerInteractions(400, 200, 90);\n+\n+    provideFinalResult(ImageFormat.JPEG, 400, 200, 90);\n+    verifyAFinalResultPassedThrough();\n     verifyJpegTranscoderInteractions(2, 90);\n   }\n \n   @Test\n   public void testDoesComputeRightNumeratorWhenRotating_180() {\n     whenRequestWidthAndHeight(50, 100);\n     whenRequestsRotationFromMetadata();\n-    provideFinalResultAndVerifyConsumerInteractions(400, 200, 180);\n+\n+    provideFinalResult(ImageFormat.JPEG, 400, 200, 180);\n+    verifyAFinalResultPassedThrough();\n     verifyJpegTranscoderInteractions(4, 180);\n   }\n \n   @Test\n   public void testDoesComputeRightNumeratorWhenRotating_270() {\n     whenRequestWidthAndHeight(50, 100);\n     whenRequestsRotationFromMetadata();\n-    provideFinalResultAndVerifyConsumerInteractions(400, 200, 270);\n+\n+    provideFinalResult(ImageFormat.JPEG, 400, 200, 270);\n+    verifyAFinalResultPassedThrough();\n     verifyJpegTranscoderInteractions(2, 270);\n   }\n \n   @Test\n   public void testDoesRotateWhenNoResizeOptions() {\n     whenRequestWidthAndHeight(0, 0);\n     whenRequestsRotationFromMetadata();\n-    provideFinalResultAndVerifyConsumerInteractions(400, 200, 90);\n+\n+    provideFinalResult(ImageFormat.JPEG, 400, 200, 90);\n+    verifyAFinalResultPassedThrough();\n     verifyJpegTranscoderInteractions(8, 90);\n   }\n \n   @Test\n   public void testDoesRotateWhenSpecificRotationRequested() {\n     whenRequestWidthAndHeight(200, 400);\n     whenRequestSpecificRotation(RotationOptions.ROTATE_270);\n-    provideFinalResultAndVerifyConsumerInteractions(400, 200, 0);\n+\n+    provideFinalResult(ImageFormat.JPEG, 400, 200, 0);\n+    verifyAFinalResultPassedThrough();\n     verifyJpegTranscoderInteractions(8, 270);\n   }\n \n   @Test\n   public void testDoesNothingWhenNotAskedToDoAnything() {\n     whenRequestWidthAndHeight(0, 0);\n     whenRequestSpecificRotation(RotationOptions.NO_ROTATION);\n-    provideFinalResultAndVerifyConsumerInteractions(400, 200, 90);\n+\n+    provideFinalResult(ImageFormat.JPEG, 400, 200, 90);\n+    verifyAFinalResultPassedThrough();\n     verifyZeroJpegTranscoderInteractions();\n   }\n \n@@ -338,7 +355,22 @@ public void testResizeRatio() {\n         ResizeAndRotateProducer.determineResizeRatio(\n             resizeOptions, 4096, 512),\n         0.01);\n+  }\n+\n+  private void verifyIntermediateResultPassedThroughUnchanged() {\n+    verify(mConsumer).onNewResult(mIntermediateEncodedImage, false);\n+  }\n+\n+  private void verifyNoIntermediateResultPassedThrough() {\n+    verify(mConsumer, never()).onNewResult(any(EncodedImage.class), eq(false));\n+  }\n \n+  private void verifyFinalResultPassedThroughUnchanged() {\n+    verify(mConsumer).onNewResult(mFinalEncodedImage, true);\n+  }\n+\n+  private void verifyAFinalResultPassedThrough() {\n+    verify(mConsumer).onNewResult(any(EncodedImage.class), eq(true));\n   }\n \n   private static void verifyJpegTranscoderInteractions(int numerator, int rotationAngle) {\n@@ -369,32 +401,48 @@ private static void verifyZeroJpegTranscoderInteractions() {\n     }\n   }\n \n-  private void provideIntermediateResultAndVerifyNoConsumerInteractions(\n+  private void provideIntermediateResult(ImageFormat imageFormat) {\n+    provideIntermediateResult(imageFormat, 800, 800, 0);\n+  }\n+\n+  private void provideIntermediateResult(\n+      ImageFormat imageFormat,\n       int width,\n       int height,\n       int rotationAngle) {\n-    mIntermediateEncodedImage = new EncodedImage(mIntermediateResult);\n-    mIntermediateEncodedImage.setImageFormat(ImageFormat.JPEG);\n-    mIntermediateEncodedImage.setRotationAngle(rotationAngle);\n-    mIntermediateEncodedImage.setWidth(width);\n-    mIntermediateEncodedImage.setHeight(height);\n+    mIntermediateEncodedImage =\n+        buildEncodedImage(mIntermediateResult, imageFormat, width, height, rotationAngle);\n     mResizeAndRotateProducerConsumer.onNewResult(mIntermediateEncodedImage, false);\n-    verify(mConsumer, times(0)).onNewResult(mIntermediateEncodedImage, false);\n   }\n \n-  private void provideFinalResultAndVerifyConsumerInteractions(\n+  private void provideFinalResult(ImageFormat imageFormat) {\n+    provideFinalResult(imageFormat, 800, 800, 0);\n+  }\n+\n+  private void provideFinalResult(\n+      ImageFormat imageFormat,\n       int width,\n       int height,\n       int rotationAngle) {\n-    mFinalEncodedImage = new EncodedImage(mFinalResult);\n-    mFinalEncodedImage.setImageFormat(ImageFormat.JPEG);\n-    mFinalEncodedImage.setRotationAngle(rotationAngle);\n-    mFinalEncodedImage.setWidth(width);\n-    mFinalEncodedImage.setHeight(height);\n+    mFinalEncodedImage =\n+        buildEncodedImage(mFinalResult, imageFormat, width, height, rotationAngle);\n     mResizeAndRotateProducerConsumer.onNewResult(mFinalEncodedImage, true);\n     mFakeClockForScheduled.incrementBy(MIN_TRANSFORM_INTERVAL_MS);\n     mFakeClockForWorker.incrementBy(MIN_TRANSFORM_INTERVAL_MS);\n-    verify(mConsumer).onNewResult(any(EncodedImage.class), eq(true));\n+  }\n+\n+  private static EncodedImage buildEncodedImage(\n+      CloseableReference<PooledByteBuffer> pooledByteBufferRef,\n+      ImageFormat imageFormat,\n+      int width,\n+      int height,\n+      int rotationAngle) {\n+    EncodedImage encodedImage = new EncodedImage(pooledByteBufferRef);\n+    encodedImage.setImageFormat(imageFormat);\n+    encodedImage.setRotationAngle(rotationAngle);\n+    encodedImage.setWidth(width);\n+    encodedImage.setHeight(height);\n+    return encodedImage;\n   }\n \n   private void whenRequestWidthAndHeight(int preferredWidth, int preferredHeight) {",
      "parent_sha": "36dd783deed7299ecf16b37a2d56cc66d07fb637"
    }
  },
  {
    "oid": "92f40076bf3e724f4ae18df8c23ec46812204127",
    "message": "Typeahead refactor part 2",
    "date": "2015-10-19T14:26:11Z",
    "url": "https://github.com/facebook/fresco/commit/92f40076bf3e724f4ae18df8c23ec46812204127",
    "details": {
      "sha": "b353140ed746f2fcbfd68d04d7d59a532e233503",
      "filename": "fbcore/src/main/java/com/facebook/common/memory/NoOpMemoryTrimmableRegistry.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/92f40076bf3e724f4ae18df8c23ec46812204127/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmemory%2FNoOpMemoryTrimmableRegistry.java",
      "raw_url": "https://github.com/facebook/fresco/raw/92f40076bf3e724f4ae18df8c23ec46812204127/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmemory%2FNoOpMemoryTrimmableRegistry.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmemory%2FNoOpMemoryTrimmableRegistry.java?ref=92f40076bf3e724f4ae18df8c23ec46812204127",
      "patch": "@@ -15,7 +15,7 @@\n public class NoOpMemoryTrimmableRegistry implements MemoryTrimmableRegistry {\n   private static NoOpMemoryTrimmableRegistry sInstance = null;\n \n-  private NoOpMemoryTrimmableRegistry() {\n+  public NoOpMemoryTrimmableRegistry() {\n   }\n \n   public static synchronized NoOpMemoryTrimmableRegistry getInstance() {",
      "parent_sha": "e4317dee49b277d2cf057d1c22ef194a06f776e4"
    }
  },
  {
    "oid": "5357424115b6e3ef9966d141efb66cd72bb5f0e9",
    "message": "fix webp add round draw out of bound (#2132)\n\nSummary:\nWhen I add a OVER_COLOR Round to webP Drawable,the overColor draw out of bound and start blinking.\n\n![before](https://user-images.githubusercontent.com/8406296/41187170-7dd1d748-6bd6-11e8-8871-1e5047d3eff4.png)\nA close look:\n![before1](https://user-images.githubusercontent.com/8406296/41187171-87acbc56-6bd6-11e8-8494-2e6d1b18dacd.png)\n\n![after](https://user-images.githubusercontent.com/8406296/41187173-8eaab9c2-6bd6-11e8-9184-c5870891e05d.png)\nA close look:\n![after1](https://user-images.githubusercontent.com/8406296/41187178-95b36214-6bd6-11e8-9f99-84539f557557.png)\n\nAdd roundedCornerRadius to SimpleDraweeView which plays webP.\nCloses https://github.com/facebook/fresco/pull/2132\n\nReviewed By: erikandre\n\nDifferential Revision: D8417671\n\nPulled By: oprisnik\n\nfbshipit-source-id: cd3112b6ed189fe6d1be424824f9bfee24b3fb85",
    "date": "2018-06-21T18:19:44Z",
    "url": "https://github.com/facebook/fresco/commit/5357424115b6e3ef9966d141efb66cd72bb5f0e9",
    "details": {
      "sha": "43f9fe8672243d2ed6785e7a3baf285ff55bfb6d",
      "filename": "drawee/src/main/java/com/facebook/drawee/drawable/RoundedCornersDrawable.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/5357424115b6e3ef9966d141efb66cd72bb5f0e9/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FRoundedCornersDrawable.java",
      "raw_url": "https://github.com/facebook/fresco/raw/5357424115b6e3ef9966d141efb66cd72bb5f0e9/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FRoundedCornersDrawable.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FRoundedCornersDrawable.java?ref=5357424115b6e3ef9966d141efb66cd72bb5f0e9",
      "patch": "@@ -214,6 +214,7 @@ private void updatePath() {\n     mTempRectangle.set(getBounds());\n \n     mTempRectangle.inset(mPadding, mPadding);\n+    mPath.addRect(mTempRectangle, Path.Direction.CW);\n     if (mIsCircle) {\n       mPath.addCircle(\n               mTempRectangle.centerX(),\n@@ -275,7 +276,7 @@ public void draw(Canvas canvas) {\n         mPaint.setStyle(Paint.Style.FILL);\n         mPaint.setColor(mOverlayColor);\n         mPaint.setStrokeWidth(0f);\n-        mPath.setFillType(Path.FillType.INVERSE_EVEN_ODD);\n+        mPath.setFillType(Path.FillType.EVEN_ODD);\n         canvas.drawPath(mPath, mPaint);\n \n         if (mIsCircle) {",
      "parent_sha": "d9ed8237d695306d66af2a8ba9a9dcfbff9f9a86"
    }
  },
  {
    "oid": "ab4be4dad7bfdad3563839e41e7d2e7a80167161",
    "message": "Fix ImagePerfState.reset()\n\nReviewed By: oprisnik\n\nDifferential Revision: D9217372\n\nfbshipit-source-id: cbb8c1da6faaf509510ac1e51c383aa8ebc7157b",
    "date": "2018-08-08T15:03:15Z",
    "url": "https://github.com/facebook/fresco/commit/ab4be4dad7bfdad3563839e41e7d2e7a80167161",
    "details": {
      "sha": "193be04efac0006fce64b0c738d968300f48a062",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/facebook/fresco/blob/ab4be4dad7bfdad3563839e41e7d2e7a80167161/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2FImagePerfState.java",
      "raw_url": "https://github.com/facebook/fresco/raw/ab4be4dad7bfdad3563839e41e7d2e7a80167161/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2FImagePerfState.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2FImagePerfState.java?ref=ab4be4dad7bfdad3563839e41e7d2e7a80167161",
      "patch": "@@ -44,8 +44,8 @@ public class ImagePerfState {\n   private @ImageLoadStatus int mImageLoadStatus = ImageLoadStatus.UNKNOWN;\n   // Visibility\n   private @VisibilityState int mVisibilityState = VisibilityState.UNKNOWN;\n-  private long mVisibilityEventTimeMs;\n-  private long mInvisibilityEventTimeMs;\n+  private long mVisibilityEventTimeMs = UNSET;\n+  private long mInvisibilityEventTimeMs = UNSET;\n \n   public void reset() {\n     mRequestId = null;\n@@ -68,6 +68,10 @@ public void reset() {\n     mOnScreenHeightPx = UNSET;\n \n     mImageLoadStatus = ImageLoadStatus.UNKNOWN;\n+\n+    mVisibilityState = VisibilityState.UNKNOWN;\n+    mVisibilityEventTimeMs = UNSET;\n+    mInvisibilityEventTimeMs = UNSET;\n   }\n \n   public void setImageLoadStatus(@ImageLoadStatus int imageLoadStatus) {",
      "parent_sha": "fb071a5e6e93c30d7f2d3b46ea6c13c576b93e27"
    }
  },
  {
    "oid": "449bdc7ac85aced84b420b208e6702f78cb541f0",
    "message": "Daily `arc lint --take GOOGLEJAVAFORMAT`\n\nReviewed By: zertosh\n\nDifferential Revision: D18851935\n\nfbshipit-source-id: 15268c00fcf5e56e93cf99d56dcfeade2c532c51",
    "date": "2019-12-06T19:47:13Z",
    "url": "https://github.com/facebook/fresco/commit/449bdc7ac85aced84b420b208e6702f78cb541f0",
    "details": {
      "sha": "bd26f1b55f6e8891b3d94c6d8a509e0a69b9c26b",
      "filename": "vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoState.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/449bdc7ac85aced84b420b208e6702f78cb541f0/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FFrescoState.java",
      "raw_url": "https://github.com/facebook/fresco/raw/449bdc7ac85aced84b420b208e6702f78cb541f0/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FFrescoState.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FFrescoState.java?ref=449bdc7ac85aced84b420b208e6702f78cb541f0",
      "patch": "@@ -457,8 +457,7 @@ public String toString() {\n         + '}';\n   }\n \n-  public void setPrefetchDatasource(\n-      @Nullable DataSource prefetchDatasource) {\n+  public void setPrefetchDatasource(@Nullable DataSource prefetchDatasource) {\n     if (mPrefetchDatasource != null) {\n       mPrefetchDatasource.close();\n     }",
      "parent_sha": "415fc7ef965db1f83ec5a1dad4883a0973e2fa49"
    }
  },
  {
    "oid": "67cafcee9e2c903ca42c665062790ddd8815d8fa",
    "message": "Fixed sample app build error\n\nSummary:\nThe summary app now has a variant to use the jCenter version of Fresco.\nThe sample app was changed in https://github.com/facebook/fresco/pull/1038, which breaks the jCenter build variant since the new API is not available yet.\n\nReviewed By: aagnes\n\nDifferential Revision: D3234955\n\nfb-gh-sync-id: 62929659d19fee9281c37de6bd75a38d1d0be8e3\nfbshipit-source-id: 62929659d19fee9281c37de6bd75a38d1d0be8e3",
    "date": "2016-04-28T10:55:21Z",
    "url": "https://github.com/facebook/fresco/commit/67cafcee9e2c903ca42c665062790ddd8815d8fa",
    "details": {
      "sha": "2a09650e7dd2edb27d8e95709325188dbd09e022",
      "filename": "samples/demo/src/main/java/com/facebook/samples/demo/MainActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/67cafcee9e2c903ca42c665062790ddd8815d8fa/samples%2Fdemo%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fdemo%2FMainActivity.java",
      "raw_url": "https://github.com/facebook/fresco/raw/67cafcee9e2c903ca42c665062790ddd8815d8fa/samples%2Fdemo%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fdemo%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/samples%2Fdemo%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fdemo%2FMainActivity.java?ref=67cafcee9e2c903ca42c665062790ddd8815d8fa",
      "patch": "@@ -76,7 +76,7 @@ protected void onCreate(Bundle savedInstanceState) {\n         .build();\n     mProgressiveJpegView.setController(controller);\n \n-    mStaticWebpView.setImageURI(\"https://www.gstatic.com/webp/gallery/2.sm.webp\");\n+    mStaticWebpView.setImageURI(Uri.parse(\"https://www.gstatic.com/webp/gallery/2.sm.webp\"));\n \n     mAlphaWebpView.setImageURI(Uri.parse(\"http://frescolib.org/static/translucent.webp\"));\n ",
      "parent_sha": "19fc8fc84b488d0e703ebc4be97b8e8c52ee466b"
    }
  },
  {
    "oid": "82897bbca8691a245975edb065bdc3e747d30668",
    "message": "fbandroid/libraries/fresco/imagepipeline-base-test/src/main/java/com/facebook/imagepipeline/testing/DeltaQueue.java\n\nReviewed By: jocelynluizzi13\n\nDifferential Revision: D61464415\n\nfbshipit-source-id: 8a5d330e7232c97c7a27ef3548d31569347f5ad3",
    "date": "2024-08-19T14:11:23Z",
    "url": "https://github.com/facebook/fresco/commit/82897bbca8691a245975edb065bdc3e747d30668",
    "details": {
      "sha": "a3f63c4d4477ed6bb26f2cf8c49347d77f95690e",
      "filename": "imagepipeline-base-test/src/main/java/com/facebook/imagepipeline/testing/DeltaQueue.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/facebook/fresco/blob/82897bbca8691a245975edb065bdc3e747d30668/imagepipeline-base-test%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Ftesting%2FDeltaQueue.java",
      "raw_url": "https://github.com/facebook/fresco/raw/82897bbca8691a245975edb065bdc3e747d30668/imagepipeline-base-test%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Ftesting%2FDeltaQueue.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base-test%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Ftesting%2FDeltaQueue.java?ref=82897bbca8691a245975edb065bdc3e747d30668",
      "patch": "@@ -7,6 +7,8 @@\n \n package com.facebook.imagepipeline.testing;\n \n+import javax.annotation.Nullable;\n+\n /**\n  * A queue of nodes sorted by timestamp for the purpose of implementing a scheduled executor. Used\n  * for {@link ScheduledQueue}.\n@@ -22,15 +24,15 @@ public class DeltaQueue<T> {\n   private static class Node<T> {\n     public final T value;\n     public long delay;\n-    public Node<T> next = null;\n+    @Nullable public Node<T> next = null;\n \n     public Node(T value, long nanos) {\n       this.value = value;\n       this.delay = nanos;\n     }\n   }\n \n-  private Node<T> head = null;\n+  @Nullable private Node<T> head = null;\n   private int size;\n \n   /**",
      "parent_sha": "5612d839b22e0d9eb4ea8ba463d3f9e186d9be24"
    }
  },
  {
    "oid": "051461f28594588a704ada99a57e95c65e31826a",
    "message": "Implement isValid for CloseableReferenceWithoutFinalizer\n\nSummary: Since the `close()` method doesn't call through super, `mIsClosed` is never set to true, so `isValid()` will always return true for `CloseableReferenceWithoutFinalizer`. Override `isValid()` so this works correctly.\n\nReviewed By: kirwan\n\nDifferential Revision: D4599196\n\nfbshipit-source-id: cc32f042a14e1df4008110d854607cbcac08ebb9",
    "date": "2017-02-22T22:47:44Z",
    "url": "https://github.com/facebook/fresco/commit/051461f28594588a704ada99a57e95c65e31826a",
    "details": {
      "sha": "2380638c730d3729e24284e570cba23811693db2",
      "filename": "fbcore/src/main/java/com/facebook/common/references/CloseableReference.java",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/facebook/fresco/blob/051461f28594588a704ada99a57e95c65e31826a/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Freferences%2FCloseableReference.java",
      "raw_url": "https://github.com/facebook/fresco/raw/051461f28594588a704ada99a57e95c65e31826a/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Freferences%2FCloseableReference.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Freferences%2FCloseableReference.java?ref=051461f28594588a704ada99a57e95c65e31826a",
      "patch": "@@ -344,7 +344,7 @@ private static class Destructor extends PhantomReference<CloseableReference> {\n       @GuardedBy(\"Destructor.class\")\n       private Destructor previous;\n       @GuardedBy(\"this\")\n-      private boolean closed;\n+      private boolean destroyed;\n \n       public Destructor(\n           CloseableReference referent,\n@@ -359,12 +359,16 @@ public Destructor(\n         sHead = this;\n       }\n \n+      public synchronized boolean isDestroyed() {\n+        return destroyed;\n+      }\n+\n       public void destroy(boolean correctly) {\n         synchronized (this) {\n-          if (closed) {\n+          if (destroyed) {\n             return;\n           }\n-          closed = true;\n+          destroyed = true;\n         }\n \n         synchronized (Destructor.class) {\n@@ -424,6 +428,11 @@ private CloseableReferenceWithoutFinalizer(T t, ResourceReleaser<T> resourceRele\n     public void close() {\n       mDestructor.destroy(true);\n     }\n+\n+    @Override\n+    public boolean isValid() {\n+      return !mDestructor.isDestroyed();\n+    }\n   }\n \n   private static class CloseableReferenceWithFinalizer<T> extends CloseableReference<T> {",
      "parent_sha": "ad09c3c1dd930a6a77fc109984072fcfbd107ba7"
    }
  },
  {
    "oid": "2c542919b57eab41a5d4dd5a9f69190f8167133b",
    "message": "Fix documentation for minBucketSize in PoolParams\n\nReviewed By: oprisnik\n\nDifferential Revision: D5516610\n\nfbshipit-source-id: f0bdfad37c3149f95c155c6ca8e36f2bd010a7ea",
    "date": "2017-07-31T08:10:14Z",
    "url": "https://github.com/facebook/fresco/commit/2c542919b57eab41a5d4dd5a9f69190f8167133b",
    "details": {
      "sha": "4dcf2608854753a28f70a44517ea4d22b176c918",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/memory/PoolParams.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/2c542919b57eab41a5d4dd5a9f69190f8167133b/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmemory%2FPoolParams.java",
      "raw_url": "https://github.com/facebook/fresco/raw/2c542919b57eab41a5d4dd5a9f69190f8167133b/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmemory%2FPoolParams.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmemory%2FPoolParams.java?ref=2c542919b57eab41a5d4dd5a9f69190f8167133b",
      "patch": "@@ -40,7 +40,7 @@\n  * <p>\n  * {@link #minBucketSize}\n  * This represents the minimum size of the buckets in the pool. This assures that all buckets can\n- * hold any element smaller or equal to this size.\n+ * hold any element larger or equal to this size.\n  * <p>\n  * {@link #maxBucketSize}\n  * This represents the maximum size of the buckets in the pool. This restricts all buckets to only",
      "parent_sha": "0116c3ec19a8b1b178223effb11b90086319ca86"
    }
  },
  {
    "oid": "9ccf32e8c9bdaf0a82450943a0aa5d50e15c379b",
    "message": "Added Nullable annotations to DefaultDrawableFactory\n\nSummary: The animated drawable factory is completely optional and we already have null checks in place.\n\nReviewed By: erikandre\n\nDifferential Revision: D9267754\n\nfbshipit-source-id: eaecf7cd247c747965e0397c0ec0836e2db4fef5",
    "date": "2018-08-10T16:18:18Z",
    "url": "https://github.com/facebook/fresco/commit/9ccf32e8c9bdaf0a82450943a0aa5d50e15c379b",
    "details": {
      "sha": "e32b6f584f8be620f77ec47aca532790fbd08c77",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/DefaultDrawableFactory.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/facebook/fresco/blob/9ccf32e8c9bdaf0a82450943a0aa5d50e15c379b/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FDefaultDrawableFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/9ccf32e8c9bdaf0a82450943a0aa5d50e15c379b/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FDefaultDrawableFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FDefaultDrawableFactory.java?ref=9ccf32e8c9bdaf0a82450943a0aa5d50e15c379b",
      "patch": "@@ -17,13 +17,15 @@\n import com.facebook.imagepipeline.image.CloseableStaticBitmap;\n import com.facebook.imagepipeline.image.EncodedImage;\n import com.facebook.imagepipeline.systrace.FrescoSystrace;\n+import javax.annotation.Nullable;\n \n public class DefaultDrawableFactory implements DrawableFactory {\n \n   private final Resources mResources;\n-  private final DrawableFactory mAnimatedDrawableFactory;\n+  private final @Nullable DrawableFactory mAnimatedDrawableFactory;\n \n-  public DefaultDrawableFactory(Resources resources, DrawableFactory animatedDrawableFactory) {\n+  public DefaultDrawableFactory(\n+      Resources resources, @Nullable DrawableFactory animatedDrawableFactory) {\n     mResources = resources;\n     mAnimatedDrawableFactory = animatedDrawableFactory;\n   }\n@@ -34,6 +36,7 @@ public boolean supportsImageType(CloseableImage image) {\n   }\n \n   @Override\n+  @Nullable\n   public Drawable createDrawable(CloseableImage closeableImage) {\n     try {\n       FrescoSystrace.beginSection(\"DefaultDrawableFactory#createDrawable\");",
      "parent_sha": "fef8fd750567c9a4ac8f049908b6b31d1817dbed"
    }
  },
  {
    "oid": "749dccf91a006bfcc1e3aa9c7cfae381088eaa7a",
    "message": "ProducerName is public for MediaVariationFallbackProducer\n\nSummary: For uniformity we put the name of the Producer as public\n\nReviewed By: kirwan\n\nDifferential Revision: D4558162\n\nfbshipit-source-id: 2ab68930d138bf8e402457d221dbdd9f8ca4dfdd",
    "date": "2017-02-14T17:47:32Z",
    "url": "https://github.com/facebook/fresco/commit/749dccf91a006bfcc1e3aa9c7cfae381088eaa7a",
    "details": {
      "sha": "c60093c804dea2c385a611b9b10fc3b900ec6c23",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MediaVariationsFallbackProducer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/749dccf91a006bfcc1e3aa9c7cfae381088eaa7a/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FMediaVariationsFallbackProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/749dccf91a006bfcc1e3aa9c7cfae381088eaa7a/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FMediaVariationsFallbackProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FMediaVariationsFallbackProducer.java?ref=749dccf91a006bfcc1e3aa9c7cfae381088eaa7a",
      "patch": "@@ -45,7 +45,7 @@\n  */\n public class MediaVariationsFallbackProducer implements Producer<EncodedImage> {\n \n-  @VisibleForTesting static final String PRODUCER_NAME = \"MediaVariationsFallbackProducer\";\n+  public static final String PRODUCER_NAME = \"MediaVariationsFallbackProducer\";\n   public static final String EXTRA_CACHED_VALUE_FOUND = ProducerConstants.EXTRA_CACHED_VALUE_FOUND;\n   public static final String EXTRA_CACHED_VALUE_USED_AS_LAST = \"cached_value_used_as_last\";\n ",
      "parent_sha": "7027142607430a9ab842150b576ab6486751063b"
    }
  },
  {
    "oid": "9f49a1ba4e1f0559a9f744690510e0246195e8de",
    "message": "Add nullable annotation to setLowResImageRequest parameter\n\nReviewed By: defHLT\n\nDifferential Revision: D36323463\n\nfbshipit-source-id: 4e4de5e0cde8da4f1a9f7ea1de66949ba5904c49",
    "date": "2022-05-11T21:16:45Z",
    "url": "https://github.com/facebook/fresco/commit/9f49a1ba4e1f0559a9f744690510e0246195e8de",
    "details": {
      "sha": "12942f905f4b237a5cc0b829e50f451fdb7bb616",
      "filename": "drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/9f49a1ba4e1f0559a9f744690510e0246195e8de/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java",
      "raw_url": "https://github.com/facebook/fresco/raw/9f49a1ba4e1f0559a9f744690510e0246195e8de/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java?ref=9f49a1ba4e1f0559a9f744690510e0246195e8de",
      "patch": "@@ -134,7 +134,7 @@ public REQUEST getImageRequest() {\n   }\n \n   /** Sets the low-res image request. */\n-  public BUILDER setLowResImageRequest(REQUEST lowResImageRequest) {\n+  public BUILDER setLowResImageRequest(@Nullable REQUEST lowResImageRequest) {\n     mLowResImageRequest = lowResImageRequest;\n     return getThis();\n   }",
      "parent_sha": "0edee57bebed290bde679f150e2ec7ddcfa92e51"
    }
  },
  {
    "oid": "cbd0b9ed2bdbbcebf652e4dce61f64748f78d215",
    "message": "Write the cache choice to the media variations index db\n\nSummary:\nAdds the cache choice column to the index database and sets the value when an item is saved.\n\nThis required increasing the database version and fixing a bug in the upgrade method that meant the database wasn't actually recreated.\n\nReviewed By: massimocarli\n\nDifferential Revision: D4598112\n\nfbshipit-source-id: ee9f93c85f0e39abed610455fa0c3c4d3f7a839c",
    "date": "2017-02-27T15:17:54Z",
    "url": "https://github.com/facebook/fresco/commit/cbd0b9ed2bdbbcebf652e4dce61f64748f78d215",
    "details": {
      "sha": "525290cb9b5f85399d5de0aff0f9d013a5fba08e",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MediaVariationsIndexDatabase.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/facebook/fresco/blob/cbd0b9ed2bdbbcebf652e4dce61f64748f78d215/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FMediaVariationsIndexDatabase.java",
      "raw_url": "https://github.com/facebook/fresco/raw/cbd0b9ed2bdbbcebf652e4dce61f64748f78d215/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FMediaVariationsIndexDatabase.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FMediaVariationsIndexDatabase.java?ref=cbd0b9ed2bdbbcebf652e4dce61f64748f78d215",
      "patch": "@@ -45,8 +45,7 @@ public class MediaVariationsIndexDatabase implements MediaVariationsIndex {\n       IndexEntry.COLUMN_NAME_HEIGHT\n   };\n \n-  private static final String SQL_DELETE_ENTRIES =\n-      \"DROP TABLE IF EXISTS \" + IndexEntry.TABLE_NAME;\n+  private static final String SQL_DELETE_ENTRIES = \"DROP TABLE IF EXISTS \" + IndexEntry.TABLE_NAME;\n \n   @GuardedBy(\"MediaVariationsIndexDatabase.class\")\n   private final LazyIndexDbOpenHelper mDbHelper;\n@@ -145,6 +144,7 @@ public void run() {\n             contentValues.put(IndexEntry.COLUMN_NAME_MEDIA_ID, mediaId);\n             contentValues.put(IndexEntry.COLUMN_NAME_WIDTH, encodedImage.getWidth());\n             contentValues.put(IndexEntry.COLUMN_NAME_HEIGHT, encodedImage.getHeight());\n+            contentValues.put(IndexEntry.COLUMN_NAME_CACHE_CHOICE, cacheChoice.name());\n             contentValues.put(IndexEntry.COLUMN_NAME_CACHE_KEY, cacheKey.getUriString());\n             contentValues\n                 .put(IndexEntry.COLUMN_NAME_RESOURCE_ID, CacheKeyUtil.getFirstResourceId(cacheKey));\n@@ -168,6 +168,7 @@ private static final class IndexEntry implements BaseColumns {\n     public static final String COLUMN_NAME_MEDIA_ID = \"media_id\";\n     public static final String COLUMN_NAME_WIDTH = \"width\";\n     public static final String COLUMN_NAME_HEIGHT = \"height\";\n+    public static final String COLUMN_NAME_CACHE_CHOICE = \"cache_choice\";\n     public static final String COLUMN_NAME_CACHE_KEY = \"cache_key\";\n     public static final String COLUMN_NAME_RESOURCE_ID = \"resource_id\";\n   }\n@@ -191,7 +192,7 @@ public synchronized SQLiteDatabase getWritableDatabase() {\n \n   private static class IndexDbOpenHelper extends SQLiteOpenHelper {\n \n-    public static final int DATABASE_VERSION = 1;\n+    public static final int DATABASE_VERSION = 2;\n     public static final String DATABASE_NAME = \"FrescoMediaVariationsIndex.db\";\n     private static final String TEXT_TYPE = \" TEXT\";\n     private static final String INTEGER_TYPE = \" INTEGER\";\n@@ -201,6 +202,7 @@ private static class IndexDbOpenHelper extends SQLiteOpenHelper {\n             IndexEntry.COLUMN_NAME_MEDIA_ID + TEXT_TYPE + \",\" +\n             IndexEntry.COLUMN_NAME_WIDTH + INTEGER_TYPE + \",\" +\n             IndexEntry.COLUMN_NAME_HEIGHT + INTEGER_TYPE + \",\" +\n+            IndexEntry.COLUMN_NAME_CACHE_CHOICE + TEXT_TYPE + \",\" +\n             IndexEntry.COLUMN_NAME_CACHE_KEY + TEXT_TYPE + \",\" +\n             IndexEntry.COLUMN_NAME_RESOURCE_ID + TEXT_TYPE + \" UNIQUE )\";\n     private static final String SQL_CREATE_INDEX =\n@@ -232,6 +234,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n       } finally {\n         db.endTransaction();\n       }\n+      onCreate(db);\n     }\n \n     @Override",
      "parent_sha": "b200537afc0adc6c630a53fbca8d990191ceace5"
    }
  },
  {
    "oid": "0de3d2c23ea39876016af7711bbe31515582f4a8",
    "message": "Update recover-from-OOM experiment setup\n\nReviewed By: wizh\n\nDifferential Revision: D22546950\n\nfbshipit-source-id: 4cc49c7c806f4f67f58ae2c5c2e0d03d9a2ba28b",
    "date": "2020-07-15T18:49:16Z",
    "url": "https://github.com/facebook/fresco/commit/0de3d2c23ea39876016af7711bbe31515582f4a8",
    "details": {
      "sha": "e3bcc40d5c78c463d9d683652736962723505364",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/0de3d2c23ea39876016af7711bbe31515582f4a8/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FDecodeProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/0de3d2c23ea39876016af7711bbe31515582f4a8/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FDecodeProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FDecodeProducer.java?ref=0de3d2c23ea39876016af7711bbe31515582f4a8",
      "patch": "@@ -377,10 +377,11 @@ private void doDecode(EncodedImage encodedImage, @Status int status) {\n     private CloseableImage internalDecode(\n         EncodedImage encodedImage, int length, QualityInfo quality) {\n       CloseableImage image;\n+      final boolean recover = mReclaimMemoryRunnable != null && mRecoverFromDecoderOOM.get();\n       try {\n         image = mImageDecoder.decode(encodedImage, length, quality, mImageDecodeOptions);\n       } catch (OutOfMemoryError e) {\n-        if (!mRecoverFromDecoderOOM.get() || mReclaimMemoryRunnable == null) {\n+        if (!recover) {\n           throw e;\n         }\n ",
      "parent_sha": "a9a2d71f2d9f28c63a2d5147e04db79b9bdd980f"
    }
  },
  {
    "oid": "bb76bfab0690e7cbe2013c1a915d010fff28a44f",
    "message": "Daily `arc lint --take GOOGLEJAVAFORMAT`\n\nReviewed By: zertosh\n\nDifferential Revision: D18269360\n\nfbshipit-source-id: 1ab43b0450c02f5e4cb017f0ae4b3f6e9873e99d",
    "date": "2019-11-01T15:06:02Z",
    "url": "https://github.com/facebook/fresco/commit/bb76bfab0690e7cbe2013c1a915d010fff28a44f",
    "details": {
      "sha": "f1741c3574b3714d6b39610a81137cbeb40c5fd1",
      "filename": "drawee/src/main/java/com/facebook/drawee/controller/BaseControllerListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/facebook/fresco/blob/bb76bfab0690e7cbe2013c1a915d010fff28a44f/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FBaseControllerListener.java",
      "raw_url": "https://github.com/facebook/fresco/raw/bb76bfab0690e7cbe2013c1a915d010fff28a44f/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FBaseControllerListener.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FBaseControllerListener.java?ref=bb76bfab0690e7cbe2013c1a915d010fff28a44f",
      "patch": "@@ -8,13 +8,10 @@\n package com.facebook.drawee.controller;\n \n import android.graphics.drawable.Animatable;\n-import com.facebook.fresco.ui.common.DimensionsInfo;\n-import com.facebook.fresco.ui.common.OnDrawControllerListener;\n import javax.annotation.Nullable;\n \n /** Convenience class that has empty implementation of {@link ControllerListener}. */\n-public class BaseControllerListener<INFO>\n-    implements ControllerListener<INFO> {\n+public class BaseControllerListener<INFO> implements ControllerListener<INFO> {\n \n   private static final ControllerListener<Object> NO_OP_LISTENER =\n       new BaseControllerListener<Object>();",
      "parent_sha": "c4689d6015cd64bced7fbee712f439c2df04e1e4"
    }
  },
  {
    "oid": "7dd69857400820e4714aa1858e86260b961181ff",
    "message": "Make EncodedCacheKeyMultiplexProducer nullsafe\n\nReviewed By: defHLT\n\nDifferential Revision: D27707985\n\nfbshipit-source-id: 1e991d92bb2c01ceeb13c5d86897ab1472dd7428",
    "date": "2021-04-12T17:56:14Z",
    "url": "https://github.com/facebook/fresco/commit/7dd69857400820e4714aa1858e86260b961181ff",
    "details": {
      "sha": "09ea736f8ab0a99d4436d00c0c1462e5d0b32046",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedCacheKeyMultiplexProducer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/facebook/fresco/blob/7dd69857400820e4714aa1858e86260b961181ff/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FEncodedCacheKeyMultiplexProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/7dd69857400820e4714aa1858e86260b961181ff/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FEncodedCacheKeyMultiplexProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FEncodedCacheKeyMultiplexProducer.java?ref=7dd69857400820e4714aa1858e86260b961181ff",
      "patch": "@@ -12,8 +12,11 @@\n import com.facebook.imagepipeline.cache.CacheKeyFactory;\n import com.facebook.imagepipeline.image.EncodedImage;\n import com.facebook.imagepipeline.request.ImageRequest;\n+import com.facebook.infer.annotation.Nullsafe;\n+import javax.annotation.Nullable;\n \n /** Multiplex producer that uses the encoded cache key to combine requests. */\n+@Nullsafe(Nullsafe.Mode.LOCAL)\n public class EncodedCacheKeyMultiplexProducer\n     extends MultiplexProducer<Pair<CacheKey, ImageRequest.RequestLevel>, EncodedImage> {\n \n@@ -38,7 +41,7 @@ protected Pair<CacheKey, ImageRequest.RequestLevel> getKey(ProducerContext produ\n         producerContext.getLowestPermittedRequestLevel());\n   }\n \n-  public EncodedImage cloneOrNull(EncodedImage encodedImage) {\n+  public @Nullable EncodedImage cloneOrNull(EncodedImage encodedImage) {\n     return EncodedImage.cloneOrNull(encodedImage);\n   }\n }",
      "parent_sha": "b8f4e79d7a0b5cea48365bf1d4d9d7ff5a9d8b81"
    }
  },
  {
    "oid": "029fe6be57e4117a4d18634d4d439c3de7661030",
    "message": "Fixed NPE in ImagePipelineFactories if animations disabled\n\nReviewed By: lambdapioneer\n\nDifferential Revision: D5271711\n\nfbshipit-source-id: ff6435d18927ae851aaab7d29b03fecd19f5e976",
    "date": "2017-06-17T10:52:45Z",
    "url": "https://github.com/facebook/fresco/commit/029fe6be57e4117a4d18634d4d439c3de7661030",
    "details": {
      "sha": "dee3c7d863b17466e5f3945bcdcae449f3c13c1a",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/facebook/fresco/blob/029fe6be57e4117a4d18634d4d439c3de7661030/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/029fe6be57e4117a4d18634d4d439c3de7661030/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java?ref=029fe6be57e4117a4d18634d4d439c3de7661030",
      "patch": "@@ -126,6 +126,7 @@ public ImagePipelineFactory(ImagePipelineConfig config) {\n         config.getExecutorSupplier().forLightweightBackgroundTasks());\n   }\n \n+  @Nullable\n   private AnimatedFactory getAnimatedFactory() {\n     if (mAnimatedFactory == null) {\n       mAnimatedFactory = AnimatedFactoryProvider.getAnimatedFactory(\n@@ -137,7 +138,8 @@ private AnimatedFactory getAnimatedFactory() {\n \n   @Nullable\n   public DrawableFactory getAnimatedDrawableFactory(Context context) {\n-    return getAnimatedFactory().getAnimatedDrawableFactory(context);\n+    AnimatedFactory animatedFactory = getAnimatedFactory();\n+    return animatedFactory == null ? null : animatedFactory.getAnimatedDrawableFactory(context);\n   }\n \n   public CountingMemoryCache<CacheKey, CloseableImage>",
      "parent_sha": "1fffe191af6b3bd45135aabe665edfdebbcc988a"
    }
  },
  {
    "oid": "d19956928a352b3d081c8b29c288c9da17b62eda",
    "message": "AnimatedDrawable2 implements DrawableWithCaches and forwards calls to the backend\n\nSummary: `AnimatedDrawable2` should implement `DrawableWithCaches` so that `PipelineDraweeController` can properly clear the caches when the drawable is released in `releaseDrawable`.\n\nReviewed By: kirwan\n\nDifferential Revision: D4226383\n\nfbshipit-source-id: 041eea998e455b5d1799e91ae741acfaf90a50ba",
    "date": "2016-11-23T15:15:01Z",
    "url": "https://github.com/facebook/fresco/commit/d19956928a352b3d081c8b29c288c9da17b62eda",
    "details": {
      "sha": "117c4bad7bf555c2ebbf726285e2019cfcb893f5",
      "filename": "animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/AnimatedDrawable2.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/facebook/fresco/blob/d19956928a352b3d081c8b29c288c9da17b62eda/animated-drawable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fanimation%2Fdrawable%2FAnimatedDrawable2.java",
      "raw_url": "https://github.com/facebook/fresco/raw/d19956928a352b3d081c8b29c288c9da17b62eda/animated-drawable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fanimation%2Fdrawable%2FAnimatedDrawable2.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/animated-drawable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fanimation%2Fdrawable%2FAnimatedDrawable2.java?ref=d19956928a352b3d081c8b29c288c9da17b62eda",
      "patch": "@@ -20,6 +20,7 @@\n \n import com.facebook.common.logging.FLog;\n import com.facebook.common.time.MonotonicClock;\n+import com.facebook.drawable.base.DrawableWithCaches;\n import com.facebook.drawee.drawable.DrawableProperties;\n import com.facebook.fresco.animation.backend.AnimationBackend;\n import com.facebook.fresco.animation.frame.DropFramesFrameScheduler;\n@@ -29,7 +30,7 @@\n  * Experimental new animated drawable that uses a supplied\n  * {@link AnimationBackend} for drawing frames.\n  */\n-public class AnimatedDrawable2 extends Drawable implements Animatable {\n+public class AnimatedDrawable2 extends Drawable implements Animatable, DrawableWithCaches {\n \n   private static final Class<?> TAG = AnimatedDrawable2.class;\n \n@@ -397,4 +398,11 @@ protected boolean onLevelChange(int level) {\n     }\n     return false;\n   }\n+\n+  @Override\n+  public void dropCaches() {\n+    if (mAnimationBackend != null) {\n+      mAnimationBackend.clear();\n+    }\n+  }\n }",
      "parent_sha": "2d82c6c185e84a98e29f498c5dfb27b3f3f10eba"
    }
  },
  {
    "oid": "1ee7aed2066842bc53603408870a0219ecfa4f10",
    "message": "ImageUriProvider: Update DraweeScaleTypeFragment\n\nReviewed By: oprisnik\n\nDifferential Revision: D5389121\n\nfbshipit-source-id: b73e2fe70f374794cc4ff4b5de7774c18845748e",
    "date": "2017-07-11T10:49:35Z",
    "url": "https://github.com/facebook/fresco/commit/1ee7aed2066842bc53603408870a0219ecfa4f10",
    "details": {
      "sha": "d458d08d0490e54f765fee8c531ba5526af17169",
      "filename": "samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeScaleTypeFragment.java",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/facebook/fresco/blob/1ee7aed2066842bc53603408870a0219ecfa4f10/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2Fdrawee%2FDraweeScaleTypeFragment.java",
      "raw_url": "https://github.com/facebook/fresco/raw/1ee7aed2066842bc53603408870a0219ecfa4f10/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2Fdrawee%2FDraweeScaleTypeFragment.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2Fdrawee%2FDraweeScaleTypeFragment.java?ref=1ee7aed2066842bc53603408870a0219ecfa4f10",
      "patch": "@@ -27,17 +27,13 @@\n import com.facebook.fresco.samples.showcase.BaseShowcaseFragment;\n import com.facebook.fresco.samples.showcase.R;\n import com.facebook.fresco.samples.showcase.common.SimpleScaleTypeAdapter;\n+import com.facebook.fresco.samples.showcase.misc.ImageUriProvider;\n \n /**\n  * Simple drawee fragment that illustrates different scale types\n  */\n public class DraweeScaleTypeFragment extends BaseShowcaseFragment {\n \n-  private static final Uri URI_1 =\n-      Uri.parse(\"http://frescolib.org/static/sample-images/animal_a_m.jpg\");\n-  private static final Uri URI_2 =\n-      Uri.parse(\"http://frescolib.org/static/sample-images/animal_d_m.jpg\");\n-\n   private SimpleDraweeView mDraweeTop1;\n   private SimpleDraweeView mDraweeTop2;\n   private SimpleDraweeView mDraweeMain;\n@@ -51,28 +47,36 @@ public View onCreateView(\n       @Nullable Bundle savedInstanceState) {\n     final View view = inflater.inflate(R.layout.fragment_drawee_scale_type, container, false);\n \n+    final ImageUriProvider imageUriProvider = ImageUriProvider.getInstance(getContext());\n+    final Uri uri1 = imageUriProvider.createSampleUri(\n+        ImageUriProvider.ImageSize.M,\n+        ImageUriProvider.Orientation.LANDSCAPE);\n+    final Uri uri2 = imageUriProvider.createSampleUri(\n+        ImageUriProvider.ImageSize.M,\n+        ImageUriProvider.Orientation.PORTRAIT);\n+\n     mDraweeTop1 = (SimpleDraweeView) view.findViewById(R.id.drawee_view_top_1);\n     mDraweeTop2 = (SimpleDraweeView) view.findViewById(R.id.drawee_view_top_2);\n     mDraweeMain = (SimpleDraweeView) view.findViewById(R.id.drawee_view);\n     mSpinner = (Spinner) view.findViewById(R.id.spinner);\n \n-    mDraweeTop1.setImageURI(URI_1);\n+    mDraweeTop1.setImageURI(uri1);\n     mDraweeTop1.setOnClickListener(new View.OnClickListener() {\n       @Override\n       public void onClick(View v) {\n-        changeMainDraweeUri(URI_1);\n+        changeMainDraweeUri(uri1);\n       }\n     });\n \n-    mDraweeTop2.setImageURI(URI_2);\n+    mDraweeTop2.setImageURI(uri2);\n     mDraweeTop2.setOnClickListener(new View.OnClickListener() {\n       @Override\n       public void onClick(View v) {\n-        changeMainDraweeUri(URI_2);\n+        changeMainDraweeUri(uri2);\n       }\n     });\n \n-    changeMainDraweeUri(URI_1);\n+    changeMainDraweeUri(uri1);\n \n     final SimpleScaleTypeAdapter adapter = SimpleScaleTypeAdapter.createForAllScaleTypes();\n     mSpinner.setAdapter(adapter);",
      "parent_sha": "38f37ceece1dce37a78a546c7fd923aab73f71e5"
    }
  },
  {
    "oid": "7b31d3c82abf1e49d242ce088da5530d385c12ad",
    "message": "Pipeline systrace - add markers to BitmapMemoryCacheProducer\n\nReviewed By: oprisnik\n\nDifferential Revision: D9216393\n\nfbshipit-source-id: 7ef9db8ebd1d836f723d7f87ad7463d7b4dae528",
    "date": "2018-08-08T15:48:05Z",
    "url": "https://github.com/facebook/fresco/commit/7b31d3c82abf1e49d242ce088da5530d385c12ad",
    "details": {
      "sha": "ba352606309d8cd2a3997ab0231ce33f4187648b",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/BitmapMemoryCacheProducer.java",
      "status": "modified",
      "additions": 82,
      "deletions": 70,
      "changes": 152,
      "blob_url": "https://github.com/facebook/fresco/blob/7b31d3c82abf1e49d242ce088da5530d385c12ad/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FBitmapMemoryCacheProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/7b31d3c82abf1e49d242ce088da5530d385c12ad/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FBitmapMemoryCacheProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FBitmapMemoryCacheProducer.java?ref=7b31d3c82abf1e49d242ce088da5530d385c12ad",
      "patch": "@@ -15,6 +15,7 @@\n import com.facebook.imagepipeline.image.CloseableImage;\n import com.facebook.imagepipeline.image.QualityInfo;\n import com.facebook.imagepipeline.request.ImageRequest;\n+import com.facebook.imagepipeline.systrace.FrescoSystrace;\n \n /**\n  * Memory cache producer for the bitmap memory cache.\n@@ -41,57 +42,62 @@ public BitmapMemoryCacheProducer(\n   public void produceResults(\n       final Consumer<CloseableReference<CloseableImage>> consumer,\n       final ProducerContext producerContext) {\n+    try {\n+      FrescoSystrace.beginSection(\"BitmapMemoryCacheProducer#produceResults\");\n+      final ProducerListener listener = producerContext.getListener();\n+      final String requestId = producerContext.getId();\n+      listener.onProducerStart(requestId, getProducerName());\n+      final ImageRequest imageRequest = producerContext.getImageRequest();\n+      final Object callerContext = producerContext.getCallerContext();\n+      final CacheKey cacheKey = mCacheKeyFactory.getBitmapCacheKey(imageRequest, callerContext);\n \n-    final ProducerListener listener = producerContext.getListener();\n-    final String requestId = producerContext.getId();\n-    listener.onProducerStart(requestId, getProducerName());\n-    final ImageRequest imageRequest = producerContext.getImageRequest();\n-    final Object callerContext = producerContext.getCallerContext();\n-    final CacheKey cacheKey = mCacheKeyFactory.getBitmapCacheKey(imageRequest, callerContext);\n+      CloseableReference<CloseableImage> cachedReference = mMemoryCache.get(cacheKey);\n \n-    CloseableReference<CloseableImage> cachedReference = mMemoryCache.get(cacheKey);\n+      if (cachedReference != null) {\n+        boolean isFinal = cachedReference.get().getQualityInfo().isOfFullQuality();\n+        if (isFinal) {\n+          listener.onProducerFinishWithSuccess(\n+              requestId,\n+              getProducerName(),\n+              listener.requiresExtraMap(requestId)\n+                  ? ImmutableMap.of(EXTRA_CACHED_VALUE_FOUND, \"true\")\n+                  : null);\n+          listener.onUltimateProducerReached(requestId, getProducerName(), true);\n+          consumer.onProgressUpdate(1f);\n+        }\n+        consumer.onNewResult(cachedReference, BaseConsumer.simpleStatusForIsLast(isFinal));\n+        cachedReference.close();\n+        if (isFinal) {\n+          return;\n+        }\n+      }\n \n-    if (cachedReference != null) {\n-      boolean isFinal = cachedReference.get().getQualityInfo().isOfFullQuality();\n-      if (isFinal) {\n+      if (producerContext.getLowestPermittedRequestLevel().getValue()\n+          >= ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE.getValue()) {\n         listener.onProducerFinishWithSuccess(\n             requestId,\n             getProducerName(),\n             listener.requiresExtraMap(requestId)\n-                ? ImmutableMap.of(EXTRA_CACHED_VALUE_FOUND, \"true\")\n+                ? ImmutableMap.of(EXTRA_CACHED_VALUE_FOUND, \"false\")\n                 : null);\n-        listener.onUltimateProducerReached(requestId, getProducerName(), true);\n-        consumer.onProgressUpdate(1f);\n-      }\n-      consumer.onNewResult(cachedReference, BaseConsumer.simpleStatusForIsLast(isFinal));\n-      cachedReference.close();\n-      if (isFinal) {\n+        listener.onUltimateProducerReached(requestId, getProducerName(), false);\n+        consumer.onNewResult(null, Consumer.IS_LAST);\n         return;\n       }\n-    }\n \n-    if (producerContext.getLowestPermittedRequestLevel().getValue() >=\n-        ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE.getValue()) {\n+      Consumer<CloseableReference<CloseableImage>> wrappedConsumer =\n+          wrapConsumer(\n+              consumer, cacheKey, producerContext.getImageRequest().isMemoryCacheEnabled());\n       listener.onProducerFinishWithSuccess(\n           requestId,\n           getProducerName(),\n           listener.requiresExtraMap(requestId)\n               ? ImmutableMap.of(EXTRA_CACHED_VALUE_FOUND, \"false\")\n               : null);\n-      listener.onUltimateProducerReached(requestId, getProducerName(), false);\n-      consumer.onNewResult(null, Consumer.IS_LAST);\n-      return;\n+      mInputProducer.produceResults(wrappedConsumer, producerContext);\n+    } finally {\n+      FrescoSystrace.endSection();\n     }\n-\n-    Consumer<CloseableReference<CloseableImage>> wrappedConsumer =\n-        wrapConsumer(consumer, cacheKey, producerContext.getImageRequest().isMemoryCacheEnabled());\n-    listener.onProducerFinishWithSuccess(\n-        requestId,\n-        getProducerName(),\n-        listener.requiresExtraMap(requestId)\n-            ? ImmutableMap.of(EXTRA_CACHED_VALUE_FOUND, \"false\")\n-            : null);\n-    mInputProducer.produceResults(wrappedConsumer, producerContext);\n   }\n \n   protected Consumer<CloseableReference<CloseableImage>> wrapConsumer(\n@@ -103,49 +109,55 @@ protected Consumer<CloseableReference<CloseableImage>> wrapConsumer(\n       @Override\n       public void onNewResultImpl(\n           CloseableReference<CloseableImage> newResult, @Status int status) {\n-        final boolean isLast = isLast(status);\n-        // ignore invalid intermediate results and forward the null result if last\n-        if (newResult == null) {\n-          if (isLast) {\n-            getConsumer().onNewResult(null, status);\n+        try {\n+          FrescoSystrace.beginSection(\"BitmapMemoryCacheProducer#onNewResultImpl\");\n+          final boolean isLast = isLast(status);\n+          // ignore invalid intermediate results and forward the null result if last\n+          if (newResult == null) {\n+            if (isLast) {\n+              getConsumer().onNewResult(null, status);\n+            }\n+            return;\n           }\n-          return;\n-        }\n-        // stateful and partial results cannot be cached and are just forwarded\n-        if (newResult.get().isStateful() || statusHasFlag(status, IS_PARTIAL_RESULT)) {\n-          getConsumer().onNewResult(newResult, status);\n-          return;\n-        }\n-        // if the intermediate result is not of a better quality than the cached result,\n-        // forward the already cached result and don't cache the new result.\n-        if (!isLast) {\n-          CloseableReference<CloseableImage> currentCachedResult = mMemoryCache.get(cacheKey);\n-          if (currentCachedResult != null) {\n-            try {\n-              QualityInfo newInfo = newResult.get().getQualityInfo();\n-              QualityInfo cachedInfo = currentCachedResult.get().getQualityInfo();\n-              if (cachedInfo.isOfFullQuality() || cachedInfo.getQuality() >= newInfo.getQuality()) {\n-                getConsumer().onNewResult(currentCachedResult, status);\n-                return;\n+          // stateful and partial results cannot be cached and are just forwarded\n+          if (newResult.get().isStateful() || statusHasFlag(status, IS_PARTIAL_RESULT)) {\n+            getConsumer().onNewResult(newResult, status);\n+            return;\n+          }\n+          // if the intermediate result is not of a better quality than the cached result,\n+          // forward the already cached result and don't cache the new result.\n+          if (!isLast) {\n+            CloseableReference<CloseableImage> currentCachedResult = mMemoryCache.get(cacheKey);\n+            if (currentCachedResult != null) {\n+              try {\n+                QualityInfo newInfo = newResult.get().getQualityInfo();\n+                QualityInfo cachedInfo = currentCachedResult.get().getQualityInfo();\n+                if (cachedInfo.isOfFullQuality()\n+                    || cachedInfo.getQuality() >= newInfo.getQuality()) {\n+                  getConsumer().onNewResult(currentCachedResult, status);\n+                  return;\n+                }\n+              } finally {\n+                CloseableReference.closeSafely(currentCachedResult);\n               }\n-            } finally {\n-              CloseableReference.closeSafely(currentCachedResult);\n             }\n           }\n-        }\n-        // cache, if needed, and forward the new result\n-        CloseableReference<CloseableImage> newCachedResult = null;\n-        if (isMemoryCacheEnabled) {\n-          newCachedResult = mMemoryCache.cache(cacheKey, newResult);\n-        }\n-        try {\n-          if (isLast) {\n-            getConsumer().onProgressUpdate(1f);\n+          // cache, if needed, and forward the new result\n+          CloseableReference<CloseableImage> newCachedResult = null;\n+          if (isMemoryCacheEnabled) {\n+            newCachedResult = mMemoryCache.cache(cacheKey, newResult);\n+          }\n+          try {\n+            if (isLast) {\n+              getConsumer().onProgressUpdate(1f);\n+            }\n+            getConsumer()\n+                .onNewResult((newCachedResult != null) ? newCachedResult : newResult, status);\n+          } finally {\n+            CloseableReference.closeSafely(newCachedResult);\n           }\n-          getConsumer()\n-              .onNewResult((newCachedResult != null) ? newCachedResult : newResult, status);\n         } finally {\n-          CloseableReference.closeSafely(newCachedResult);\n+          FrescoSystrace.endSection();\n         }\n       }\n     };",
      "parent_sha": "15d7328a69915d118c0be5ffabf9b54a63f2ffef"
    }
  },
  {
    "oid": "b16b1f19e6946a75b04c6edf3dd3d26bfb60091e",
    "message": "send trim events on red events\n\nDifferential Revision: D38659853\n\nfbshipit-source-id: d1466ac1f81004b6a4f312e532c1bdfa767dd202",
    "date": "2022-08-15T16:57:14Z",
    "url": "https://github.com/facebook/fresco/commit/b16b1f19e6946a75b04c6edf3dd3d26bfb60091e",
    "details": {
      "sha": "32c0c5240edee115233b4bc469519c5cd6e67a7e",
      "filename": "fbcore/src/main/java/com/facebook/common/memory/MemoryTrimType.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/facebook/fresco/blob/b16b1f19e6946a75b04c6edf3dd3d26bfb60091e/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmemory%2FMemoryTrimType.java",
      "raw_url": "https://github.com/facebook/fresco/raw/b16b1f19e6946a75b04c6edf3dd3d26bfb60091e/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmemory%2FMemoryTrimType.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmemory%2FMemoryTrimType.java?ref=b16b1f19e6946a75b04c6edf3dd3d26bfb60091e",
      "patch": "@@ -32,7 +32,19 @@ public enum MemoryTrimType {\n   OnSystemLowMemoryWhileAppInBackground(1),\n \n   /** This app is moving into the background, usually because the user navigated to another app. */\n-  OnAppBackgrounded(1);\n+  OnAppBackgrounded(1),\n+\n+  /** Generated by MemoryRedManager. */\n+  OnJavaMemoryRed(1),\n+\n+  /** Generated by MemoryRedManager. */\n+  OnJavaMemoryYellow(0.5),\n+\n+  /** Generated by MemoryRedManager. */\n+  OnSystemMemoryRed(1),\n+\n+  /** Generated by MemoryRedManager. */\n+  OnSystemMemoryYellow(0.5);\n \n   private double mSuggestedTrimRatio;\n ",
      "parent_sha": "36bad193dbe37e512129fd15408b3d1808256ddd"
    }
  },
  {
    "oid": "623d0955963f689d6471931e519de581f2814f27",
    "message": "ImagePerfMonitor doesn't need to extend listener interface\n\nSummary: ImagePerfMonitor extends the base listener interface but it doesn't implement any methods and is not used as a listener any more since it delegates to other listener members instead.\n\nReviewed By: defHLT\n\nDifferential Revision: D12975155\n\nfbshipit-source-id: 0ab43b614ddd82b17f59248a91c7e332a34fa65d",
    "date": "2018-11-09T13:34:47Z",
    "url": "https://github.com/facebook/fresco/commit/623d0955963f689d6471931e519de581f2814f27",
    "details": {
      "sha": "9bf06578f171dc82b16dfc24f2d166d473ad0bf8",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/623d0955963f689d6471931e519de581f2814f27/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2FImagePerfMonitor.java",
      "raw_url": "https://github.com/facebook/fresco/raw/623d0955963f689d6471931e519de581f2814f27/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2FImagePerfMonitor.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2FImagePerfMonitor.java?ref=623d0955963f689d6471931e519de581f2814f27",
      "patch": "@@ -13,13 +13,12 @@\n import com.facebook.drawee.backends.pipeline.info.internal.ImagePerfImageOriginListener;\n import com.facebook.drawee.backends.pipeline.info.internal.ImagePerfRequestListener;\n import com.facebook.drawee.interfaces.DraweeHierarchy;\n-import com.facebook.imagepipeline.listener.BaseRequestListener;\n import com.facebook.imagepipeline.listener.ForwardingRequestListener;\n import java.util.LinkedList;\n import java.util.List;\n import javax.annotation.Nullable;\n \n-public class ImagePerfMonitor extends BaseRequestListener {\n+public class ImagePerfMonitor {\n \n   private final PipelineDraweeController mPipelineDraweeController;\n   private final MonotonicClock mMonotonicClock;",
      "parent_sha": "8a76df53144a39d0687b90bfe4667b30331c4492"
    }
  },
  {
    "oid": "da5bb290b8b34e67c3ab855742a912635a99edc1",
    "message": "Removed ContextChain#sDeepEquals\n\nReviewed By: oprisnik\n\nDifferential Revision: D37758995\n\nfbshipit-source-id: b9684b47de4bbffadcde3d2e06ba0f906611938b",
    "date": "2022-07-18T19:10:00Z",
    "url": "https://github.com/facebook/fresco/commit/da5bb290b8b34e67c3ab855742a912635a99edc1",
    "details": {
      "sha": "68a604a8c13c3ceeef25bc9d647ba863189764c9",
      "filename": "fbcore/src/main/java/com/facebook/common/callercontext/ContextChain.java",
      "status": "modified",
      "additions": 18,
      "deletions": 25,
      "changes": 43,
      "blob_url": "https://github.com/facebook/fresco/blob/da5bb290b8b34e67c3ab855742a912635a99edc1/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fcallercontext%2FContextChain.java",
      "raw_url": "https://github.com/facebook/fresco/raw/da5bb290b8b34e67c3ab855742a912635a99edc1/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fcallercontext%2FContextChain.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fcallercontext%2FContextChain.java?ref=da5bb290b8b34e67c3ab855742a912635a99edc1",
      "patch": "@@ -35,8 +35,6 @@ public class ContextChain implements Parcelable {\n \n   private static final char PARENT_SEPARATOR = '/';\n \n-  private static boolean sUseDeepEquals = false;\n-\n   private final String mTag;\n   private final String mName;\n   private final int mLevel;\n@@ -47,8 +45,9 @@ public class ContextChain implements Parcelable {\n \n   private @Nullable String mSerializedString;\n \n+  @Deprecated\n   public static void setUseDeepEquals(boolean useDeepEquals) {\n-    sUseDeepEquals = useDeepEquals;\n+    // TODO remove\n   }\n \n   public ContextChain(\n@@ -150,33 +149,27 @@ public String[] toStringArray() {\n \n   @Override\n   public boolean equals(@Nullable Object obj) {\n-    if (sUseDeepEquals) {\n-      if (this == obj) {\n-        return true;\n-      }\n-      if (obj == null || getClass() != obj.getClass()) {\n-        return false;\n-      }\n-      ContextChain other = (ContextChain) obj;\n-      return Objects.equal(mTag, other.mTag)\n-          && Objects.equal(mName, other.mName)\n-          && mLevel == other.mLevel\n-          && (mParent == other.mParent || (mParent != null && mParent.equals(other.mParent)));\n+    if (this == obj) {\n+      return true;\n     }\n-    return super.equals(obj);\n+    if (obj == null || getClass() != obj.getClass()) {\n+      return false;\n+    }\n+    ContextChain other = (ContextChain) obj;\n+    return Objects.equal(mTag, other.mTag)\n+        && Objects.equal(mName, other.mName)\n+        && mLevel == other.mLevel\n+        && (mParent == other.mParent || (mParent != null && mParent.equals(other.mParent)));\n   }\n \n   @Override\n   public int hashCode() {\n-    if (sUseDeepEquals) {\n-      int result = super.hashCode();\n-      result = 31 * result + (mTag != null ? mTag.hashCode() : 0);\n-      result = 31 * result + (mName != null ? mName.hashCode() : 0);\n-      result = 31 * result + mLevel;\n-      result = 31 * result + (mParent != null ? mParent.hashCode() : 0);\n-      return result;\n-    }\n-    return super.hashCode();\n+    int result = super.hashCode();\n+    result = 31 * result + (mTag != null ? mTag.hashCode() : 0);\n+    result = 31 * result + (mName != null ? mName.hashCode() : 0);\n+    result = 31 * result + mLevel;\n+    result = 31 * result + (mParent != null ? mParent.hashCode() : 0);\n+    return result;\n   }\n \n   @Override",
      "parent_sha": "4394a7905e2ff92c1fe281887e87f82e40b1837d"
    }
  },
  {
    "oid": "496db94f9aeb01027adb2d57aaeb06b08a204a71",
    "message": "Fixes S248243: we know check for VitoConfig initialization before trying to use it\n\nDifferential Revision: D31847283\n\nfbshipit-source-id: f5c7d266148c248a55546547a8aaa41d4e634483",
    "date": "2021-10-22T01:03:11Z",
    "url": "https://github.com/facebook/fresco/commit/496db94f9aeb01027adb2d57aaeb06b08a204a71",
    "details": {
      "sha": "8d5d88a79a54fcb8c07b3dea16fd6497d2f65280",
      "filename": "vito/litho/src/main/java/com/facebook/fresco/vito/litho/FrescoVitoImage2Spec.java",
      "status": "modified",
      "additions": 14,
      "deletions": 12,
      "changes": 26,
      "blob_url": "https://github.com/facebook/fresco/blob/496db94f9aeb01027adb2d57aaeb06b08a204a71/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImage2Spec.java",
      "raw_url": "https://github.com/facebook/fresco/raw/496db94f9aeb01027adb2d57aaeb06b08a204a71/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImage2Spec.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImage2Spec.java?ref=496db94f9aeb01027adb2d57aaeb06b08a204a71",
      "patch": "@@ -373,19 +373,21 @@ static void onEnteredAboveWorkingRange(\n   @OnRegisterRanges\n   static void registerWorkingRanges(\n       ComponentContext c, @Prop(optional = true) final @Nullable Prefetch prefetch) {\n-    PrefetchConfig prefetchConfig = FrescoVitoProvider.getConfig().getPrefetchConfig();\n-    if (shouldPrefetchWithWorkingRange(prefetch)) {\n-      FrescoVitoImage2.registerImagePrefetchWorkingRange(\n-          c, new BoundaryWorkingRange(prefetchConfig.prefetchWorkingRangeSize()));\n-    }\n+    if (FrescoVitoProvider.hasBeenInitialized()) {\n+      PrefetchConfig prefetchConfig = FrescoVitoProvider.getConfig().getPrefetchConfig();\n+      if (shouldPrefetchWithWorkingRange(prefetch)) {\n+        FrescoVitoImage2.registerImagePrefetchWorkingRange(\n+            c, new BoundaryWorkingRange(prefetchConfig.prefetchWorkingRangeSize()));\n+      }\n \n-    if (prefetchConfig.prioritizeWithWorkingRange()) {\n-      FrescoVitoImage2.registerBelow3WorkingRange(\n-          c, new BelowViewportWorkingRange(3, Integer.MAX_VALUE));\n-      FrescoVitoImage2.registerBelow2WorkingRange(c, new BelowViewportWorkingRange(2, 2));\n-      FrescoVitoImage2.registerBelow1WorkingRange(c, new BelowViewportWorkingRange(1, 1));\n-      FrescoVitoImage2.registerVisibleWorkingRange(c, new InViewportWorkingRange());\n-      FrescoVitoImage2.registerAboveWorkingRange(c, new AboveViewportWorkingRange());\n+      if (prefetchConfig.prioritizeWithWorkingRange()) {\n+        FrescoVitoImage2.registerBelow3WorkingRange(\n+            c, new BelowViewportWorkingRange(3, Integer.MAX_VALUE));\n+        FrescoVitoImage2.registerBelow2WorkingRange(c, new BelowViewportWorkingRange(2, 2));\n+        FrescoVitoImage2.registerBelow1WorkingRange(c, new BelowViewportWorkingRange(1, 1));\n+        FrescoVitoImage2.registerVisibleWorkingRange(c, new InViewportWorkingRange());\n+        FrescoVitoImage2.registerAboveWorkingRange(c, new AboveViewportWorkingRange());\n+      }\n     }\n   }\n ",
      "parent_sha": "8b665ae814c34eec075564773fefb1db2d0408f9"
    }
  },
  {
    "oid": "056df7c0eab9591f85ce1da6875b52de0e470e50",
    "message": "//fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image:closeableBitmap\n\nDifferential Revision: D52245779\n\nfbshipit-source-id: 098d0ff91682df32b4bfb22607dd675c41904a69",
    "date": "2023-12-18T16:00:23Z",
    "url": "https://github.com/facebook/fresco/commit/056df7c0eab9591f85ce1da6875b52de0e470e50",
    "details": {
      "sha": "51ae65bbfffa2979451b9618dc722fbeae8f0222",
      "filename": "imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/BaseCloseableStaticBitmap.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/056df7c0eab9591f85ce1da6875b52de0e470e50/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fimage%2FBaseCloseableStaticBitmap.java",
      "raw_url": "https://github.com/facebook/fresco/raw/056df7c0eab9591f85ce1da6875b52de0e470e50/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fimage%2FBaseCloseableStaticBitmap.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fimage%2FBaseCloseableStaticBitmap.java?ref=056df7c0eab9591f85ce1da6875b52de0e470e50",
      "patch": "@@ -23,10 +23,11 @@ public class BaseCloseableStaticBitmap extends BaseCloseableImage implements Clo\n \n   private static boolean sUseSimpleCloseableStaticBitmap = false;\n \n+  @Nullable\n   @GuardedBy(\"this\")\n   private CloseableReference<Bitmap> mBitmapReference;\n \n-  private volatile Bitmap mBitmap;\n+  @Nullable private volatile Bitmap mBitmap;\n \n   // quality info\n   private final QualityInfo mQualityInfo;",
      "parent_sha": "34b2931e2dab41abd88d42bcc7e81c4d523485b2"
    }
  },
  {
    "oid": "1ae0f149a430ba4cacd7ed1e5af1353c017b087d",
    "message": "Daily `arc lint --take GOOGLEJAVAFORMAT`\n\nReviewed By: zertosh\n\nDifferential Revision: D18953993\n\nfbshipit-source-id: 5dca3d085c39c80a958ea37db1120065600201a1",
    "date": "2019-12-12T15:54:23Z",
    "url": "https://github.com/facebook/fresco/commit/1ae0f149a430ba4cacd7ed1e5af1353c017b087d",
    "details": {
      "sha": "53cc56091c60f30a77164459f17ee88c607faf65",
      "filename": "vito/core/src/main/java/com/facebook/fresco/vito/core/HierarcherImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/1ae0f149a430ba4cacd7ed1e5af1353c017b087d/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FHierarcherImpl.java",
      "raw_url": "https://github.com/facebook/fresco/raw/1ae0f149a430ba4cacd7ed1e5af1353c017b087d/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FHierarcherImpl.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FHierarcherImpl.java?ref=1ae0f149a430ba4cacd7ed1e5af1353c017b087d",
      "patch": "@@ -163,7 +163,8 @@ public Drawable setupActualImageDrawable(\n       actualImageWrapperDrawable.setCurrent(actualDrawable != null ? actualDrawable : NOP_DRAWABLE);\n \n       if (instrumentedListener != null) {\n-        actualImageWrapperDrawable = new InstrumentedDrawable(actualImageWrapperDrawable, instrumentedListener);\n+        actualImageWrapperDrawable =\n+            new InstrumentedDrawable(actualImageWrapperDrawable, instrumentedListener);\n       }\n \n       frescoDrawable.setImage(actualImageWrapperDrawable, closeableImage);",
      "parent_sha": "4a4456f7a5924d542dd56e8721b1e06a98f2b92b"
    }
  },
  {
    "oid": "7a1f0d22616dbd952be2cae3023f54c07526e479",
    "message": "Remove PowerMock from fbsource//fbandroid/libraries/fresco/imagepipeline/src/test/java/com/facebook/imagepipeline/core:core\n\nReviewed By: defHLT\n\nDifferential Revision: D71173303\n\nfbshipit-source-id: 7f13b15571a1b219acef9588b82d1b66d2991702",
    "date": "2025-03-14T15:16:48Z",
    "url": "https://github.com/facebook/fresco/commit/7a1f0d22616dbd952be2cae3023f54c07526e479",
    "details": {
      "sha": "c65e91bf8a59c3c93486e335a99d76546f158f35",
      "filename": "imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java",
      "status": "modified",
      "additions": 43,
      "deletions": 36,
      "changes": 79,
      "blob_url": "https://github.com/facebook/fresco/blob/7a1f0d22616dbd952be2cae3023f54c07526e479/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerSequenceFactoryTest.java",
      "raw_url": "https://github.com/facebook/fresco/raw/7a1f0d22616dbd952be2cae3023f54c07526e479/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerSequenceFactoryTest.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerSequenceFactoryTest.java?ref=7a1f0d22616dbd952be2cae3023f54c07526e479",
      "patch": "@@ -21,6 +21,7 @@\n import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.Mockito.RETURNS_MOCKS;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockStatic;\n import static org.mockito.Mockito.when;\n \n import android.net.Uri;\n@@ -41,25 +42,20 @@\n import com.facebook.imagepipeline.transcoder.ImageTranscoder;\n import com.facebook.imagepipeline.transcoder.ImageTranscoderFactory;\n import java.util.Collections;\n+import org.junit.After;\n import org.junit.Before;\n-import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n+import org.mockito.MockedStatic;\n import org.mockito.MockitoAnnotations;\n import org.mockito.stubbing.Answer;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.rule.PowerMockRule;\n import org.robolectric.RobolectricTestRunner;\n import org.robolectric.RuntimeEnvironment;\n import org.robolectric.annotation.Config;\n \n /** Tests {@link ProducerSequenceFactory}. */\n @RunWith(RobolectricTestRunner.class)\n-@PrepareForTest({UriUtil.class, MediaUtils.class})\n-@PowerMockIgnore({\"org.mockito.*\", \"org.robolectric.*\", \"androidx.*\", \"android.*\"})\n @Config(manifest = Config.NONE)\n public class ProducerSequenceFactoryTest {\n \n@@ -71,12 +67,14 @@ public class ProducerSequenceFactoryTest {\n   @Mock public NetworkFetcher mNetworkFetcher;\n   @Mock public ThreadHandoffProducerQueue mThreadHandoffProducerQueue;\n \n-  @Rule public PowerMockRule rule = new PowerMockRule();\n+  private MockedStatic<UriUtil> mockedUriUtil;\n+  private MockedStatic<MediaUtils> mockedMediaUtils;\n \n   @Before\n   public void setUp() {\n+    mockedMediaUtils = mockStatic(MediaUtils.class);\n+    mockedUriUtil = mockStatic(UriUtil.class);\n     MockitoAnnotations.initMocks(this);\n-    PowerMockito.mockStatic(UriUtil.class, MediaUtils.class);\n \n     ProducerFactory producerFactory = mock(ProducerFactory.class, RETURNS_MOCKS);\n     ImageTranscoder imageTranscoder = mock(ImageTranscoder.class);\n@@ -106,14 +104,23 @@ public void setUp() {\n         .thenReturn(ImageRequest.RequestLevel.FULL_FETCH);\n     mUri = Uri.parse(\"http://dummy\");\n     when(mImageRequest.getSourceUri()).thenReturn(mUri);\n-    when(MediaUtils.extractMime(mUri.getPath()))\n+    mockedMediaUtils\n+        .when(() -> MediaUtils.extractMime(mUri.getPath()))\n         .thenAnswer((Answer<String>) invocation -> mDummyMime);\n-    when(MediaUtils.isVideo(mDummyMime)).thenAnswer((Answer<Boolean>) invocation -> false);\n+    mockedMediaUtils\n+        .when(() -> MediaUtils.isVideo(mDummyMime))\n+        .thenAnswer((Answer<Boolean>) invocation -> false);\n+  }\n+\n+  @After\n+  public void tearDownStaticMocks() {\n+    mockedUriUtil.close();\n+    mockedMediaUtils.close();\n   }\n \n   @Test\n   public void testNetworkFullFetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n     Producer producer = mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getNetworkFetchSequence());\n   }\n@@ -123,7 +130,7 @@ public void testCustomSequenceFetchIsCalled() {\n     RecordingCustomProducerSequenceFactoryIsCalled producerSequenceFactory =\n         new RecordingCustomProducerSequenceFactoryIsCalled();\n     internalUseSequenceFactoryWithCustomSequence(producerSequenceFactory);\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_UNKNOWN);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_UNKNOWN);\n \n     Producer producer = mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(producerSequenceFactory.isCalled, true);\n@@ -134,15 +141,15 @@ public void testCustomSequenceFetchNotCalled() {\n     RecordingCustomProducerSequenceFactoryIsCalled producerSequenceFactory =\n         new RecordingCustomProducerSequenceFactoryIsCalled();\n     internalUseSequenceFactoryWithCustomSequence(producerSequenceFactory);\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n \n     Producer producer = mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(producerSequenceFactory.isCalled, false);\n   }\n \n   @Test\n   public void testNetworkFullPrefetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n     Producer<Void> producer =\n         mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(\n@@ -154,57 +161,57 @@ public void testNetworkFullPrefetch() {\n \n   @Test\n   public void testLocalFileFetchToEncodedMemory() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n     Producer<CloseableReference<PooledByteBuffer>> producer =\n         mProducerSequenceFactory.getEncodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getLocalFileFetchEncodedImageProducerSequence());\n     // Same for Video\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n     producer = mProducerSequenceFactory.getEncodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getLocalFileFetchEncodedImageProducerSequence());\n   }\n \n   @Test\n   public void testNetworkFetchToEncodedMemory() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n     Producer<CloseableReference<PooledByteBuffer>> producer =\n         mProducerSequenceFactory.getEncodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getNetworkFetchEncodedImageProducerSequence());\n   }\n \n   @Test\n   public void testLocalFileFetchToEncodedMemoryPrefetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_VIDEO_FILE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_VIDEO_FILE);\n     Producer<Void> producer =\n         mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(\n         producer, mProducerSequenceFactory.getLocalFileFetchToEncodedMemoryPrefetchSequence());\n     // Same for image\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n     producer = mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(\n         producer, mProducerSequenceFactory.getLocalFileFetchToEncodedMemoryPrefetchSequence());\n   }\n \n   @Test\n   public void testNetworkFetchToEncodedMemoryPrefetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n     Producer<Void> producer =\n         mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getNetworkFetchToEncodedMemoryPrefetchSequence());\n   }\n \n   @Test\n   public void testLocalImageFileFullFetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n     Producer<CloseableReference<CloseableImage>> producer =\n         mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getLocalImageFileFetchSequence());\n   }\n \n   @Test\n   public void testLocalImageFileFullPrefetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_IMAGE_FILE);\n     Producer<Void> producer =\n         mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(\n@@ -216,15 +223,15 @@ public void testLocalImageFileFullPrefetch() {\n \n   @Test\n   public void testLocalVideoFileFullFetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_VIDEO_FILE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_VIDEO_FILE);\n     Producer<CloseableReference<CloseableImage>> producer =\n         mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getLocalVideoFileFetchSequence());\n   }\n \n   @Test\n   public void testLocalVideoFileFullPrefetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_VIDEO_FILE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_VIDEO_FILE);\n     Producer<Void> producer =\n         mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(\n@@ -236,15 +243,15 @@ public void testLocalVideoFileFullPrefetch() {\n \n   @Test\n   public void testLocalContentUriFullFetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_CONTENT);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_CONTENT);\n     Producer<CloseableReference<CloseableImage>> producer =\n         mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getLocalContentUriFetchSequence());\n   }\n \n   @Test\n   public void testLocalContentUriFullPrefetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_CONTENT);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_CONTENT);\n     Producer<Void> producer =\n         mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(\n@@ -256,31 +263,31 @@ public void testLocalContentUriFullPrefetch() {\n \n   @Test\n   public void testLocalResourceFullFetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_RESOURCE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_RESOURCE);\n     Producer<CloseableReference<CloseableImage>> producer =\n         mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getLocalResourceFetchSequence());\n   }\n \n   @Test\n   public void testLocalAssetFullFetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_ASSET);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_ASSET);\n     Producer<CloseableReference<CloseableImage>> producer =\n         mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(producer, mProducerSequenceFactory.getLocalAssetFetchSequence());\n   }\n \n   @Test\n   public void testLocalAssetAndResourceFullPrefetch() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_RESOURCE);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_RESOURCE);\n     Producer<Void> localResourceSequence =\n         mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(\n         localResourceSequence,\n         mProducerSequenceFactory\n             .getCloseableImagePrefetchSequences()\n             .get(mProducerSequenceFactory.getLocalResourceFetchSequence()));\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_ASSET);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_ASSET);\n     Producer localAssetSequence =\n         mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(mImageRequest);\n     assertSame(\n@@ -293,7 +300,7 @@ public void testLocalAssetAndResourceFullPrefetch() {\n \n   @Test\n   public void testPostprocess() {\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n     when(mImageRequest.getPostprocessor()).thenReturn(mPostprocessor);\n     Producer<CloseableReference<CloseableImage>> networkSequence =\n         mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n@@ -304,7 +311,7 @@ public void testPostprocess() {\n             .get(mProducerSequenceFactory.getNetworkFetchSequence()));\n \n     // each source type should be different\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_CONTENT);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_LOCAL_CONTENT);\n \n     Producer<CloseableReference<CloseableImage>> localSequence =\n         mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n@@ -316,7 +323,7 @@ public void testPostprocess() {\n     assertNotSame(networkSequence, localSequence);\n \n     // encoded return types don't get postprocessed\n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n     Producer<CloseableReference<PooledByteBuffer>> encodedSequence =\n         mProducerSequenceFactory.getEncodedImageProducerSequence(mImageRequest);\n     assertSame(\n@@ -331,7 +338,7 @@ public void testPostprocess() {\n   public void testPrepareBitmapFactoryDefault() {\n     internalUseSequenceFactoryWithBitmapPrepare();\n \n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n \n     Producer producer = mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);\n     assertSame(\n@@ -345,7 +352,7 @@ public void testPrepareBitmapFactoryDefault() {\n   public void testPrepareBitmapFactoryWithPostprocessor() {\n     internalUseSequenceFactoryWithBitmapPrepare();\n \n-    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n+    when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);\n     when(mImageRequest.getPostprocessor()).thenReturn(mPostprocessor);\n \n     Producer producer = mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);",
      "parent_sha": "37df76f7f20aa13092f23cd6030562035b53191b"
    }
  },
  {
    "oid": "3ea6d5f927cede5d2218d0edbbd42b5b72568284",
    "message": "manually fix some runtime issues\n\nDifferential Revision: D64478974\n\nfbshipit-source-id: dafd241e992b65665a46de777538a5d5eb0342aa",
    "date": "2024-11-04T16:26:59Z",
    "url": "https://github.com/facebook/fresco/commit/3ea6d5f927cede5d2218d0edbbd42b5b72568284",
    "details": {
      "sha": "618dc2d1ca857bcf3a4b698d0492b2a698ae65db",
      "filename": "drawee/src/main/java/com/facebook/drawee/debug/DebugControllerOverlayDrawable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/3ea6d5f927cede5d2218d0edbbd42b5b72568284/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdebug%2FDebugControllerOverlayDrawable.java",
      "raw_url": "https://github.com/facebook/fresco/raw/3ea6d5f927cede5d2218d0edbbd42b5b72568284/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdebug%2FDebugControllerOverlayDrawable.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdebug%2FDebugControllerOverlayDrawable.java?ref=3ea6d5f927cede5d2218d0edbbd42b5b72568284",
      "patch": "@@ -164,7 +164,7 @@ public void setImageFormat(@Nullable String imageFormat) {\n     mImageFormat = imageFormat;\n   }\n \n-  public void setScaleType(ScaleType scaleType) {\n+  public void setScaleType(@Nullable ScaleType scaleType) {\n     mScaleType = scaleType;\n   }\n ",
      "parent_sha": "8e79c29fab817fe0cf789f46c7ca722416727482"
    }
  },
  {
    "oid": "325531aa483cf76344cd1c1d662ad620016ca4c2",
    "message": "Make reporting debug data synchronized in LruCountingMemoryCache\n\nReviewed By: oprisnik\n\nDifferential Revision: D24552555\n\nfbshipit-source-id: 93abce4a5776903a30a648e9e14a500fd78437be",
    "date": "2020-10-29T22:27:00Z",
    "url": "https://github.com/facebook/fresco/commit/325531aa483cf76344cd1c1d662ad620016ca4c2",
    "details": {
      "sha": "fb91bef63f00cc0173c99d55a2bba296e9ffb6f8",
      "filename": "imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/LruCountingMemoryCache.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/facebook/fresco/blob/325531aa483cf76344cd1c1d662ad620016ca4c2/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FLruCountingMemoryCache.java",
      "raw_url": "https://github.com/facebook/fresco/raw/325531aa483cf76344cd1c1d662ad620016ca4c2/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FLruCountingMemoryCache.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FLruCountingMemoryCache.java?ref=325531aa483cf76344cd1c1d662ad620016ca4c2",
      "patch": "@@ -526,9 +526,9 @@ public synchronized int getEvictionQueueSizeInBytes() {\n   }\n \n   @Override\n-  public @Nullable String getDebugData() {\n+  public synchronized @Nullable String getDebugData() {\n     return Objects.toStringHelper(\"CountingMemoryCache\")\n-        .add(\"cached_entries_count:\", mCachedEntries.getCount())\n+        .add(\"cached_entries_count\", mCachedEntries.getCount())\n         .add(\"cached_entries_size_bytes\", mCachedEntries.getSizeInBytes())\n         .add(\"exclusive_entries_count\", mExclusiveEntries.getCount())\n         .add(\"exclusive_entries_size_bytes\", mExclusiveEntries.getSizeInBytes())",
      "parent_sha": "dbac470a54f432c4a4cae3524ec28de17a83627b"
    }
  },
  {
    "oid": "99be168ce7661699daefd83a188d0cf6f0764163",
    "message": "@Nullsafe: internal/ImagePerfControllerListener2\n\nReviewed By: oprisnik\n\nDifferential Revision: D25557559\n\nfbshipit-source-id: 279df9fb7304a2daa327d9dcb26b65b22d44af3b",
    "date": "2020-12-17T12:19:38Z",
    "url": "https://github.com/facebook/fresco/commit/99be168ce7661699daefd83a188d0cf6f0764163",
    "details": {
      "sha": "b6d06ea24023fb0df9634c8f71993edcdc73c55a",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener2.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/facebook/fresco/blob/99be168ce7661699daefd83a188d0cf6f0764163/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2Finternal%2FImagePerfControllerListener2.java",
      "raw_url": "https://github.com/facebook/fresco/raw/99be168ce7661699daefd83a188d0cf6f0764163/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2Finternal%2FImagePerfControllerListener2.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2Finternal%2FImagePerfControllerListener2.java?ref=99be168ce7661699daefd83a188d0cf6f0764163",
      "patch": "@@ -13,6 +13,7 @@\n import android.os.Message;\n import androidx.annotation.NonNull;\n import androidx.annotation.VisibleForTesting;\n+import com.facebook.common.internal.Preconditions;\n import com.facebook.common.internal.Supplier;\n import com.facebook.common.time.MonotonicClock;\n import com.facebook.drawee.backends.pipeline.info.ImageLoadStatus;\n@@ -24,8 +25,10 @@\n import com.facebook.fresco.ui.common.DimensionsInfo;\n import com.facebook.fresco.ui.common.OnDrawControllerListener;\n import com.facebook.imagepipeline.image.ImageInfo;\n+import com.facebook.infer.annotation.Nullsafe;\n import javax.annotation.Nullable;\n \n+@Nullsafe(Nullsafe.Mode.LOCAL)\n public class ImagePerfControllerListener2 extends BaseControllerListener2<ImageInfo>\n     implements OnDrawControllerListener<ImageInfo> {\n \n@@ -53,12 +56,13 @@ public LogHandler(@NonNull Looper looper, @NonNull ImagePerfNotifier notifier) {\n \n     @Override\n     public void handleMessage(@NonNull Message msg) {\n+      ImagePerfState state = (ImagePerfState) Preconditions.checkNotNull(msg.obj);\n       switch (msg.what) {\n         case WHAT_STATUS:\n-          mNotifier.notifyStatusUpdated((ImagePerfState) msg.obj, msg.arg1);\n+          mNotifier.notifyStatusUpdated(state, msg.arg1);\n           break;\n         case WHAT_VISIBILITY:\n-          mNotifier.notifyListenersOfVisibilityStateUpdate((ImagePerfState) msg.obj, msg.arg1);\n+          mNotifier.notifyListenersOfVisibilityStateUpdate(state, msg.arg1);\n           break;\n       }\n     }\n@@ -197,7 +201,7 @@ private void reportViewInvisible(ImagePerfState state, long time) {\n \n   private void updateStatus(ImagePerfState state, @ImageLoadStatus int imageLoadStatus) {\n     if (shouldDispatchAsync()) {\n-      Message msg = mHandler.obtainMessage();\n+      Message msg = Preconditions.checkNotNull(mHandler).obtainMessage();\n       msg.what = WHAT_STATUS;\n       msg.arg1 = imageLoadStatus;\n       msg.obj = state;\n@@ -209,7 +213,7 @@ private void updateStatus(ImagePerfState state, @ImageLoadStatus int imageLoadSt\n \n   private void updateVisibility(ImagePerfState state, @VisibilityState int visibilityState) {\n     if (shouldDispatchAsync()) {\n-      Message msg = mHandler.obtainMessage();\n+      Message msg = Preconditions.checkNotNull(mHandler).obtainMessage();\n       msg.what = WHAT_VISIBILITY;\n       msg.arg1 = visibilityState;\n       msg.obj = state;\n@@ -226,7 +230,8 @@ private synchronized void initHandler() {\n     }\n     HandlerThread handlerThread = new HandlerThread(\"ImagePerfControllerListener2Thread\");\n     handlerThread.start();\n-    mHandler = new LogHandler(handlerThread.getLooper(), mImagePerfNotifier);\n+    Looper looper = Preconditions.checkNotNull(handlerThread.getLooper());\n+    mHandler = new LogHandler(looper, mImagePerfNotifier);\n   }\n \n   private boolean shouldDispatchAsync() {",
      "parent_sha": "bc63499b7a46b6528439eea9677744379a02d494"
    }
  },
  {
    "oid": "9bc4ed6a3a05170d3b70ba35c9fcec39f4a6c7d3",
    "message": "Make ListDataSource nullsafe\n\nReviewed By: wizh\n\nDifferential Revision: D27712315\n\nfbshipit-source-id: 0d7f90389f5b9e0538b64cc87e285fcdc56bf822",
    "date": "2021-04-12T18:20:11Z",
    "url": "https://github.com/facebook/fresco/commit/9bc4ed6a3a05170d3b70ba35c9fcec39f4a6c7d3",
    "details": {
      "sha": "1fd567b0fe0a632b954575e9f24eb40cac052499",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/ListDataSource.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/facebook/fresco/blob/9bc4ed6a3a05170d3b70ba35c9fcec39f4a6c7d3/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdatasource%2FListDataSource.java",
      "raw_url": "https://github.com/facebook/fresco/raw/9bc4ed6a3a05170d3b70ba35c9fcec39f4a6c7d3/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdatasource%2FListDataSource.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdatasource%2FListDataSource.java?ref=9bc4ed6a3a05170d3b70ba35c9fcec39f4a6c7d3",
      "patch": "@@ -13,6 +13,7 @@\n import com.facebook.datasource.AbstractDataSource;\n import com.facebook.datasource.DataSource;\n import com.facebook.datasource.DataSubscriber;\n+import com.facebook.infer.annotation.Nullsafe;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CancellationException;\n@@ -28,6 +29,7 @@\n  *\n  * @param <T>\n  */\n+@Nullsafe(Nullsafe.Mode.LOCAL)\n public class ListDataSource<T> extends AbstractDataSource<List<CloseableReference<T>>> {\n   private final DataSource<CloseableReference<T>>[] mDataSources;\n \n@@ -92,7 +94,8 @@ private synchronized boolean increaseAndCheckIfLast() {\n   }\n \n   private void onDataSourceFailed(DataSource<CloseableReference<T>> dataSource) {\n-    setFailure(dataSource.getFailureCause());\n+    final Throwable failureCause = dataSource.getFailureCause();\n+    setFailure(failureCause != null ? failureCause : new Throwable(\"Unknown failure cause\"));\n   }\n \n   private void onDataSourceCancelled() {",
      "parent_sha": "8377587b221c57c3ea9dabfaaf4398f9867a3777"
    }
  },
  {
    "oid": "480733b6227cb644fc844bcdd3902305e2dc5a69",
    "message": "fbandroid/libraries/fresco/drawee/src/test/java/com/facebook/drawee/drawable/AndroidGraphicsTestUtils.java\n\nReviewed By: jocelynluizzi13\n\nDifferential Revision: D60223251\n\nfbshipit-source-id: 3109bea94c17dffade584ee3318497c887355b16",
    "date": "2024-07-25T14:21:46Z",
    "url": "https://github.com/facebook/fresco/commit/480733b6227cb644fc844bcdd3902305e2dc5a69",
    "details": {
      "sha": "b199706b1584012e6087fc96146f630452bb471c",
      "filename": "drawee/src/test/java/com/facebook/drawee/drawable/AndroidGraphicsTestUtils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/facebook/fresco/blob/480733b6227cb644fc844bcdd3902305e2dc5a69/drawee%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FAndroidGraphicsTestUtils.java",
      "raw_url": "https://github.com/facebook/fresco/raw/480733b6227cb644fc844bcdd3902305e2dc5a69/drawee%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FAndroidGraphicsTestUtils.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FAndroidGraphicsTestUtils.java?ref=480733b6227cb644fc844bcdd3902305e2dc5a69",
      "patch": "@@ -9,12 +9,13 @@\n \n import android.graphics.Matrix;\n import android.graphics.PointF;\n+import javax.annotation.Nullable;\n import org.junit.Assert;\n \n /** Test utils for android.graphics classes. */\n public class AndroidGraphicsTestUtils {\n \n-  public static void assertEquals(Matrix expectedMatrix, Matrix actualMatrix) {\n+  public static void assertEquals(@Nullable Matrix expectedMatrix, Matrix actualMatrix) {\n     if (expectedMatrix == null) {\n       Assert.assertNull(actualMatrix);\n       return;\n@@ -27,7 +28,7 @@ public static void assertEquals(Matrix expectedMatrix, Matrix actualMatrix) {\n     }\n   }\n \n-  public static void assertEquals(PointF expected, PointF actual, float delta) {\n+  public static void assertEquals(@Nullable PointF expected, PointF actual, float delta) {\n     if (expected == null) {\n       Assert.assertNull(actual);\n       return;",
      "parent_sha": "8a2f8e76b7eab0a64e4e45a154aa45e35a8ee01e"
    }
  },
  {
    "oid": "5e4a1bad427d5264abd31801405005e63e957a84",
    "message": "Return null MediaVariations for empty ID\n\nSummary: This ensures that as well as a null media ID resulting in a null MediaVariations instance, an empty String gets the same.\n\nReviewed By: lambdapioneer\n\nDifferential Revision: D4231800\n\nfbshipit-source-id: 4f0ccddd0c123f472e12ca88a418dd0d17933aea",
    "date": "2016-11-24T18:44:57Z",
    "url": "https://github.com/facebook/fresco/commit/5e4a1bad427d5264abd31801405005e63e957a84",
    "details": {
      "sha": "329e000fd1805d1f54978378aac65af6ecf46617",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/request/MediaVariations.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/facebook/fresco/blob/5e4a1bad427d5264abd31801405005e63e957a84/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FMediaVariations.java",
      "raw_url": "https://github.com/facebook/fresco/raw/5e4a1bad427d5264abd31801405005e63e957a84/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FMediaVariations.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FMediaVariations.java?ref=5e4a1bad427d5264abd31801405005e63e957a84",
      "patch": "@@ -147,16 +147,16 @@ public String toString() {\n   }\n \n   /**\n-   * Creates an instance with a media ID and without specific variants. If a null ID is given, null\n-   * is returned.\n+   * Creates an instance with a media ID and without specific variants. If a null or empty ID is\n+   * given, null is returned.\n    *\n-   * @param mediaId the unique ID for this piece of media. This must be non-null and unique for\n-   *                this piece of media (i.e. another request for the same picture at a different\n-   *                size should share the ID but not an unrelated image and not the same media at\n-   *                a different orientation).\n+   * @param mediaId the unique ID for this piece of media. If this is neither null or empty, it must\n+   *                be unique for this piece of media (i.e. another request for the same picture at\n+   *                a different size should share the ID but not an unrelated image and not the same\n+   *                media at a different orientation).\n    */\n   public static @Nullable MediaVariations forMediaId(@Nullable String mediaId) {\n-    if (mediaId == null) {\n+    if (mediaId == null || mediaId.isEmpty()) {\n       return null;\n     }\n     return newBuilderForMediaId(mediaId).build();",
      "parent_sha": "f75379bf27f0545f917e2647540b69b6e35bdb63"
    }
  },
  {
    "oid": "661f9c540514a7d7be9dea2bb0cd482ad7a3ee69",
    "message": "Fixing SingleByteArrayPool usage",
    "date": "2015-04-01T16:52:29Z",
    "url": "https://github.com/facebook/fresco/commit/661f9c540514a7d7be9dea2bb0cd482ad7a3ee69",
    "details": {
      "sha": "f912d21f8339d22d962aa74a9e177609a6c5c765",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/bitmaps/DalvikBitmapFactory.java",
      "status": "modified",
      "additions": 37,
      "deletions": 32,
      "changes": 69,
      "blob_url": "https://github.com/facebook/fresco/blob/661f9c540514a7d7be9dea2bb0cd482ad7a3ee69/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbitmaps%2FDalvikBitmapFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/661f9c540514a7d7be9dea2bb0cd482ad7a3ee69/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbitmaps%2FDalvikBitmapFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbitmaps%2FDalvikBitmapFactory.java?ref=661f9c540514a7d7be9dea2bb0cd482ad7a3ee69",
      "patch": "@@ -43,7 +43,7 @@ public class DalvikBitmapFactory {\n   private final BitmapCounter mUnpooledBitmapsCounter;\n   private final ResourceReleaser<Bitmap> mUnpooledBitmapsReleaser;\n \n-  @GuardedBy(\"this\")\n+  @GuardedBy(\"mSingleByteArrayPool\")\n   private final SingleByteArrayPool mSingleByteArrayPool;\n \n   public DalvikBitmapFactory(\n@@ -90,21 +90,23 @@ CloseableReference<Bitmap> createBitmap(short width, short height) {\n    * @throws TooManyBitmapsException if the pool is full\n    * @throws java.lang.OutOfMemoryError if the Bitmap cannot be allocated\n    */\n-  synchronized CloseableReference<Bitmap> decodeFromPooledByteBuffer(\n+  CloseableReference<Bitmap> decodeFromPooledByteBuffer(\n       final CloseableReference<PooledByteBuffer> pooledByteBufferRef) {\n     final PooledByteBuffer pooledByteBuffer = pooledByteBufferRef.get();\n     final int length = pooledByteBuffer.size();\n \n-    final byte[] encodedBytesArray = mSingleByteArrayPool.get(length);\n-    try {\n-      ByteStreams.readFully(pooledByteBuffer.getStream(), encodedBytesArray, 0, length);\n-      return doDecodeBitmap(encodedBytesArray, length);\n-    } catch (IOException ioe) {\n-      // does not happen, inputStream returned from pooledByteBuffer.getStream does not throw\n-      // IOExceptions\n-      throw Throwables.propagate(ioe);\n-    } finally {\n-      mSingleByteArrayPool.release(encodedBytesArray);\n+    synchronized (mSingleByteArrayPool) {\n+      final byte[] encodedBytesArray = mSingleByteArrayPool.get(length);\n+      try {\n+        ByteStreams.readFully(pooledByteBuffer.getStream(), encodedBytesArray, 0, length);\n+        return doDecodeBitmap(encodedBytesArray, length);\n+      } catch (IOException ioe) {\n+        // does not happen, inputStream returned from pooledByteBuffer.getStream does not throw\n+        // IOExceptions\n+        throw Throwables.propagate(ioe);\n+      } finally {\n+        mSingleByteArrayPool.release(encodedBytesArray);\n+      }\n     }\n   }\n \n@@ -117,27 +119,29 @@ synchronized CloseableReference<Bitmap> decodeFromPooledByteBuffer(\n    * @throws TooManyBitmapsException if the pool is full\n    * @throws java.lang.OutOfMemoryError if the Bitmap cannot be allocated\n    */\n-  synchronized CloseableReference<Bitmap> decodeJPEGFromPooledByteBuffer(\n+  CloseableReference<Bitmap> decodeJPEGFromPooledByteBuffer(\n       final CloseableReference<PooledByteBuffer> pooledByteBufferRef,\n       int length) {\n     final PooledByteBuffer pooledByteBuffer = pooledByteBufferRef.get();\n     Preconditions.checkArgument(length <= pooledByteBuffer.size());\n     // allocate bigger array in case EOI needs to be added\n-    final byte[] encodedBytesArray = mSingleByteArrayPool.get(length + 2);\n-    try {\n-      ByteStreams.readFully(pooledByteBuffer.getStream(), encodedBytesArray, 0, length);\n-      if (!endsWithEOI(encodedBytesArray, length)) {\n-        putEOI(encodedBytesArray, length);\n-        length += 2;\n+    synchronized (mSingleByteArrayPool) {\n+      final byte[] encodedBytesArray = mSingleByteArrayPool.get(length + 2);\n+      try {\n+        ByteStreams.readFully(pooledByteBuffer.getStream(), encodedBytesArray, 0, length);\n+        if (!endsWithEOI(encodedBytesArray, length)) {\n+          putEOI(encodedBytesArray, length);\n+          length += 2;\n+        }\n+        return doDecodeBitmap(\n+            encodedBytesArray,\n+            length);\n+      } catch (IOException ioe) {\n+        // does not happen, streams returned by pooledByteBuffer do not throw IOExceptions\n+        throw Throwables.propagate(ioe);\n+      } finally {\n+        mSingleByteArrayPool.release(encodedBytesArray);\n       }\n-      return doDecodeBitmap(\n-          encodedBytesArray,\n-          length);\n-    } catch (IOException ioe) {\n-      // does not happen, streams returned by pooledByteBuffer do not throw IOExceptions\n-      throw Throwables.propagate(ioe);\n-    } finally {\n-      mSingleByteArrayPool.release(encodedBytesArray);\n     }\n   }\n \n@@ -172,7 +176,7 @@ private CloseableReference<Bitmap> doDecodeBitmap(\n    * @return a purgeable bitmap\n    */\n   @SuppressLint(\"NewApi\")\n-  private static synchronized Bitmap decodeAsPurgeableBitmap(byte[] encodedBytes, int size) {\n+  private static Bitmap decodeAsPurgeableBitmap(byte[] encodedBytes, int size) {\n     BitmapFactory.Options options = new BitmapFactory.Options();\n     options.inDither = true; // known to improve picture quality at low cost\n     options.inPreferredConfig = Bitmaps.BITMAP_CONFIG;\n@@ -203,15 +207,16 @@ private static boolean endsWithEOI(final byte[] imageBytes, int length) {\n   }\n \n   /**\n-   * Associates bitmaps with the current bitmap pool. If this method throws\n-   * BitmapPoolSizeExceededException, the code will have called {@link Bitmap#recycle} on the\n-   * bitmaps.\n+   * Associates bitmaps with the current bitmap pool.\n+   *\n+   * <p> If this method throws TooManyBitmapsException, the code will have called\n+   * {@link Bitmap#recycle} on the bitmaps.\n    *\n    * @param bitmaps the bitmaps to associate\n    * @return the references to the bitmaps that are now tied to the bitmap pool\n    * @throws TooManyBitmapsException if the pool is full\n    */\n-  synchronized List<CloseableReference<Bitmap>> associateBitmapsWithBitmapCounter(\n+  List<CloseableReference<Bitmap>> associateBitmapsWithBitmapCounter(\n       final List<Bitmap> bitmaps) {\n     int countedBitmaps = 0;\n     try {",
      "parent_sha": "af03105304b208ccb3b18510f149ac5ff5924d4e"
    }
  },
  {
    "oid": "188e8c343c9ebd61dc481a8c9ead12a79f8e2742",
    "message": "alphabetical order for attributes in imagepipeline",
    "date": "2015-10-19T14:26:56Z",
    "url": "https://github.com/facebook/fresco/commit/188e8c343c9ebd61dc481a8c9ead12a79f8e2742",
    "details": {
      "sha": "712ab48065ade6b972bdffd3eac4491e1443abb8",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineConfig.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/facebook/fresco/blob/188e8c343c9ebd61dc481a8c9ead12a79f8e2742/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineConfig.java",
      "raw_url": "https://github.com/facebook/fresco/raw/188e8c343c9ebd61dc481a8c9ead12a79f8e2742/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineConfig.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineConfig.java?ref=188e8c343c9ebd61dc481a8c9ead12a79f8e2742",
      "patch": "@@ -103,6 +103,8 @@ private ImagePipelineConfig(Builder builder) {\n             DefaultCacheKeyFactory.getInstance() :\n             builder.mCacheKeyFactory;\n     mContext = Preconditions.checkNotNull(builder.mContext);\n+    mDecodeFileDescriptorEnabled = builder.mDownsampleEnabled &&\n+        builder.mDecodeFileDescriptorEnabled;\n     mDownsampleEnabled = builder.mDownsampleEnabled;\n     mEncodedMemoryCacheParamsSupplier =\n         builder.mEncodedMemoryCacheParamsSupplier == null ?\n@@ -152,10 +154,8 @@ public Boolean get() {\n         builder.mSmallImageDiskCacheConfig == null ?\n             mMainDiskCacheConfig :\n             builder.mSmallImageDiskCacheConfig;\n-    mDecodeFileDescriptorEnabled = builder.mDownsampleEnabled &&\n-        builder.mDecodeFileDescriptorEnabled;\n-    // Below this comment can't be built in alphabetical order, because of dependencies\n \n+    // Below this comment can't be built in alphabetical order, because of dependencies\n     int numCpuBoundThreads = mPoolFactory.getFlexByteArrayPoolMaxNumThreads();\n     mExecutorSupplier =\n         builder.mExecutorSupplier == null ?\n@@ -232,14 +232,14 @@ public NetworkFetcher getNetworkFetcher() {\n     return mNetworkFetcher;\n   }\n \n-  public boolean isDownsampleEnabled() {\n-    return mDownsampleEnabled;\n-  }\n-\n   public boolean isDecodeFileDescriptorEnabled() {\n     return mDecodeFileDescriptorEnabled;\n   }\n \n+  public boolean isDownsampleEnabled() {\n+    return mDownsampleEnabled;\n+  }\n+\n   @Nullable\n   public PlatformBitmapFactory getPlatformBitmapFactory() {\n     return mPlatformBitmapFactory;\n@@ -277,6 +277,7 @@ public static class Builder {\n     private CacheKeyFactory mCacheKeyFactory;\n     private final Context mContext;\n     private boolean mDownsampleEnabled = false;\n+    private boolean mDecodeFileDescriptorEnabled = mDownsampleEnabled;\n     private Supplier<MemoryCacheParams> mEncodedMemoryCacheParamsSupplier;\n     private ExecutorSupplier mExecutorSupplier;\n     private ImageCacheStatsTracker mImageCacheStatsTracker;\n@@ -291,7 +292,6 @@ public static class Builder {\n     private Set<RequestListener> mRequestListeners;\n     private boolean mResizeAndRotateEnabledForNetwork = true;\n     private DiskCacheConfig mSmallImageDiskCacheConfig;\n-    private boolean mDecodeFileDescriptorEnabled = mDownsampleEnabled;\n \n     private Builder(Context context) {\n       // Doesn't use a setter as always required.",
      "parent_sha": "81b20b384600ffa5a3aac6ab15b4bdcf07a8c399"
    }
  },
  {
    "oid": "4b94f604e0a98a999dcc1357992f8cb34b1b83b6",
    "message": "Add onAttach/Detach to DraweeView\n\nReviewed By: plamenko\n\nDifferential Revision: D3372676\n\nfbshipit-source-id: 9992c00b714397e6a0523774ebd8a67f2fdf1f6b",
    "date": "2016-06-07T12:45:24Z",
    "url": "https://github.com/facebook/fresco/commit/4b94f604e0a98a999dcc1357992f8cb34b1b83b6",
    "details": {
      "sha": "27298038541f064f62150e219ec1be3e711f7df1",
      "filename": "drawee/src/main/java/com/facebook/drawee/view/DraweeView.java",
      "status": "modified",
      "additions": 26,
      "deletions": 6,
      "changes": 32,
      "blob_url": "https://github.com/facebook/fresco/blob/4b94f604e0a98a999dcc1357992f8cb34b1b83b6/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fview%2FDraweeView.java",
      "raw_url": "https://github.com/facebook/fresco/raw/4b94f604e0a98a999dcc1357992f8cb34b1b83b6/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fview%2FDraweeView.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fview%2FDraweeView.java?ref=4b94f604e0a98a999dcc1357992f8cb34b1b83b6",
      "patch": "@@ -125,32 +125,52 @@ public boolean hasController() {\n   @Override\n   protected void onAttachedToWindow() {\n     super.onAttachedToWindow();\n-    attach();\n+    onAttach();\n   }\n \n   @Override\n   protected void onDetachedFromWindow() {\n     super.onDetachedFromWindow();\n-    detach();\n+    onDetach();\n   }\n \n   @Override\n   public void onStartTemporaryDetach() {\n     super.onStartTemporaryDetach();\n-    detach();\n+    onDetach();\n   }\n \n   @Override\n   public void onFinishTemporaryDetach() {\n     super.onFinishTemporaryDetach();\n-    attach();\n+    onAttach();\n   }\n \n-  protected void attach() {\n+  /** Called by the system to attach. Subclasses may override. */\n+  protected void onAttach() {\n+    doAttach();\n+  }\n+\n+  /**  Called by the system to detach. Subclasses may override. */\n+  protected void onDetach() {\n+    doDetach();\n+  }\n+\n+  /**\n+   * Does the actual work of attaching.\n+   *\n+   * Non-test subclasses should NOT override. Use onAttach for custom code.\n+   */\n+  protected void doAttach() {\n     mDraweeHolder.onAttach();\n   }\n \n-  protected void detach() {\n+  /**\n+   * Does the actual work of detaching.\n+   *\n+   * Non-test subclasses should NOT override. Use onDetach for custom code.\n+   */\n+  protected void doDetach() {\n     mDraweeHolder.onDetach();\n   }\n ",
      "parent_sha": "09d600f51a8ae0da9f10945cb9ed77b10dcbabf2"
    }
  },
  {
    "oid": "87754fcbf262db3148021c60a38252ca2ca56a83",
    "message": "Set up showcase app to display image request in Fresco Flipper plugin\n\nReviewed By: oprisnik\n\nDifferential Revision: D14598272\n\nfbshipit-source-id: b223b78091b49ef49e21476712ce071452d248f7",
    "date": "2019-04-08T16:03:01Z",
    "url": "https://github.com/facebook/fresco/commit/87754fcbf262db3148021c60a38252ca2ca56a83",
    "details": {
      "sha": "f361c63223123672ce4e6c5ba45e877bf4646f40",
      "filename": "samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/ShowcaseApplication.java",
      "status": "modified",
      "additions": 58,
      "deletions": 8,
      "changes": 66,
      "blob_url": "https://github.com/facebook/fresco/blob/87754fcbf262db3148021c60a38252ca2ca56a83/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2FShowcaseApplication.java",
      "raw_url": "https://github.com/facebook/fresco/raw/87754fcbf262db3148021c60a38252ca2ca56a83/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2FShowcaseApplication.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2FShowcaseApplication.java?ref=87754fcbf262db3148021c60a38252ca2ca56a83",
      "patch": "@@ -14,18 +14,26 @@\n import android.app.Application;\n import android.content.Context;\n import com.facebook.common.logging.FLog;\n+import com.facebook.common.memory.manager.NoOpDebugMemoryManager;\n import com.facebook.drawee.backends.pipeline.DraweeConfig;\n import com.facebook.drawee.backends.pipeline.Fresco;\n+import com.facebook.drawee.backends.pipeline.info.ImagePerfData;\n+import com.facebook.drawee.backends.pipeline.info.ImagePerfDataListener;\n import com.facebook.flipper.android.AndroidFlipperClient;\n import com.facebook.flipper.android.utils.FlipperUtils;\n import com.facebook.flipper.core.FlipperClient;\n+import com.facebook.flipper.perflogger.NoOpFlipperPerfLogger;\n import com.facebook.flipper.plugins.fresco.FrescoFlipperPlugin;\n+import com.facebook.flipper.plugins.fresco.FrescoFlipperRequestListener;\n import com.facebook.flipper.plugins.inspector.DescriptorMapping;\n import com.facebook.flipper.plugins.inspector.InspectorFlipperPlugin;\n import com.facebook.fresco.samples.showcase.misc.DebugOverlaySupplierSingleton;\n import com.facebook.imagepipeline.backends.okhttp3.OkHttpImagePipelineConfigFactory;\n import com.facebook.imagepipeline.core.ImagePipelineConfig;\n+import com.facebook.imagepipeline.debug.FlipperCacheKeyFactory;\n+import com.facebook.imagepipeline.debug.FlipperImageTracker;\n import com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig;\n+import com.facebook.imagepipeline.listener.ForwardingRequestListener;\n import com.facebook.imagepipeline.listener.RequestListener;\n import com.facebook.imagepipeline.listener.RequestLoggingListener;\n import com.facebook.imagepipeline.memory.BitmapCounterConfig;\n@@ -44,26 +52,36 @@\n  */\n public class ShowcaseApplication extends Application {\n \n+  private FrescoFlipperPlugin frescoFlipperPlugin;\n+  private static final FlipperImageTracker sFlipperImageTracker = new FlipperImageTracker();\n+\n   @Override\n   public void onCreate() {\n     super.onCreate();\n     FLog.setMinimumLoggingLevel(FLog.VERBOSE);\n-    Set<RequestListener> listeners = new HashSet<>();\n-    listeners.add(new RequestLoggingListener());\n+    Set<RequestListener> requestListeners = new HashSet<>();\n+    final ForwardingRequestListener forwardingRequestListener = new ForwardingRequestListener();\n+    requestListeners.add(forwardingRequestListener);\n+    requestListeners.add(new RequestLoggingListener());\n \n     OkHttpClient okHttpClient = new OkHttpClient.Builder()\n         .addNetworkInterceptor(new StethoInterceptor())\n         .build();\n \n-    ImagePipelineConfig imagePipelineConfig =\n+    ImagePipelineConfig.Builder imagePipelineConfigBuilder =\n         OkHttpImagePipelineConfigFactory.newBuilder(this, okHttpClient)\n-            .setRequestListeners(listeners)\n+            .setRequestListeners(requestListeners)\n             .setProgressiveJpegConfig(new SimpleProgressiveJpegConfig())\n             .setImageDecoderConfig(CustomImageFormatConfigurator.createImageDecoderConfig(this))\n             .experiment()\n-            .setBitmapPrepareToDraw(true, 0, Integer.MAX_VALUE, true)\n-            .build();\n+            .setBitmapPrepareToDraw(true, 0, Integer.MAX_VALUE, true);\n+\n+    if (shouldEnableFlipper()) {\n+      imagePipelineConfigBuilder.setCacheKeyFactory(\n+          new FlipperCacheKeyFactory(sFlipperImageTracker));\n+    }\n \n+    ImagePipelineConfig imagePipelineConfig = imagePipelineConfigBuilder.build();\n     ImagePipelineConfig.getDefaultImageRequestConfig().setProgressiveRenderingEnabled(true);\n \n     DraweeConfig.Builder draweeConfigBuilder = DraweeConfig.newBuilder();\n@@ -72,6 +90,24 @@ public void onCreate() {\n     draweeConfigBuilder.setDebugOverlayEnabledSupplier(\n         DebugOverlaySupplierSingleton.getInstance(getApplicationContext()));\n \n+    if (shouldEnableFlipper()) {\n+      draweeConfigBuilder.setImagePerfDataListener(\n+          new ImagePerfDataListener() {\n+            @Override\n+            public void onImageLoadStatusUpdated(ImagePerfData imagePerfData, int imageLoadStatus) {\n+              frescoFlipperPlugin\n+                  .getFlipperImageTracker()\n+                  .onImageLoadStatusUpdated(imagePerfData, imageLoadStatus);\n+              frescoFlipperPlugin.onImageLoadStatusUpdated(imagePerfData, imageLoadStatus);\n+            }\n+\n+            @Override\n+            public void onImageVisibilityUpdated(ImagePerfData imagePerfData, int visibilityState) {\n+              // nop\n+            }\n+          });\n+    }\n+\n     BitmapCounterProvider.initialize(\n         BitmapCounterConfig.newBuilder()\n             .setMaxBitmapCount(BitmapCounterConfig.DEFAULT_MAX_BITMAP_COUNT)\n@@ -93,11 +129,25 @@ public Iterable<DumperPlugin> get() {\n             .enableWebKitInspector(Stetho.defaultInspectorModulesProvider(context))\n             .build());\n \n-    if (BuildConfig.DEBUG && FlipperUtils.shouldEnableFlipper(this)) {\n+    if (shouldEnableFlipper()) {\n+      frescoFlipperPlugin =\n+          new FrescoFlipperPlugin(\n+              sFlipperImageTracker,\n+              Fresco.getImagePipelineFactory().getPlatformBitmapFactory(),\n+              null,\n+              new NoOpDebugMemoryManager(),\n+              new NoOpFlipperPerfLogger(),\n+              null);\n+      forwardingRequestListener.addRequestListener(\n+          new FrescoFlipperRequestListener(frescoFlipperPlugin.getFlipperImageTracker()));\n       final FlipperClient client = AndroidFlipperClient.getInstance(this);\n       client.addPlugin(new InspectorFlipperPlugin(this, DescriptorMapping.withDefaults()));\n-      client.addPlugin(new FrescoFlipperPlugin());\n+      client.addPlugin(frescoFlipperPlugin);\n       client.start();\n     }\n   }\n+\n+  private boolean shouldEnableFlipper() {\n+    return BuildConfig.DEBUG && FlipperUtils.shouldEnableFlipper(this);\n+  }\n }",
      "parent_sha": "65dc65101dc044f1a1f5645287670cb8698cfaf4"
    }
  },
  {
    "oid": "811872b80e3f7b7d0f493aaff7a58266ce3d39c3",
    "message": "Change return type to more generic\n\nReviewed By: wizh\n\nDifferential Revision: D20510873\n\nfbshipit-source-id: 983a2469841c9545c6e66b639b952c1b10616a53",
    "date": "2020-03-23T02:23:33Z",
    "url": "https://github.com/facebook/fresco/commit/811872b80e3f7b7d0f493aaff7a58266ce3d39c3",
    "details": {
      "sha": "d82bf2e64e2ca89412d0a598b26491126d30057f",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/811872b80e3f7b7d0f493aaff7a58266ce3d39c3/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/811872b80e3f7b7d0f493aaff7a58266ce3d39c3/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerFactory.java?ref=811872b80e3f7b7d0f493aaff7a58266ce3d39c3",
      "patch": "@@ -276,7 +276,7 @@ public LocalVideoThumbnailProducer newLocalVideoThumbnailProducer() {\n         mExecutorSupplier.forLocalStorageRead(), mContentResolver);\n   }\n \n-  public NetworkFetchProducer newNetworkFetchProducer(NetworkFetcher networkFetcher) {\n+  public Producer<EncodedImage> newNetworkFetchProducer(NetworkFetcher networkFetcher) {\n     return new NetworkFetchProducer(mPooledByteBufferFactory, mByteArrayPool, networkFetcher);\n   }\n ",
      "parent_sha": "549f259ee3470449517837f63f7dfe4f3c029c58"
    }
  },
  {
    "oid": "7e29e1ad02d341995b4929e8a28aef98e6756748",
    "message": "Wrapping prefetching methods in the image pipeline inside tracing blocks\n\nReviewed By: dezfx\n\nDifferential Revision: D26344024\n\nfbshipit-source-id: fdcb12d684cb1da2ccd26741a66a032c63367ab5",
    "date": "2021-02-19T22:43:56Z",
    "url": "https://github.com/facebook/fresco/commit/7e29e1ad02d341995b4929e8a28aef98e6756748",
    "details": {
      "sha": "6c46833e38def63ca439b96fc3186f705d8b6434",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java",
      "status": "modified",
      "additions": 56,
      "deletions": 36,
      "changes": 92,
      "blob_url": "https://github.com/facebook/fresco/blob/7e29e1ad02d341995b4929e8a28aef98e6756748/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipeline.java",
      "raw_url": "https://github.com/facebook/fresco/raw/7e29e1ad02d341995b4929e8a28aef98e6756748/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipeline.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipeline.java?ref=7e29e1ad02d341995b4929e8a28aef98e6756748",
      "patch": "@@ -406,29 +406,39 @@ public DataSource<Void> prefetchToBitmapCache(ImageRequest imageRequest, Object\n \n   public DataSource<Void> prefetchToBitmapCache(\n       ImageRequest imageRequest, Object callerContext, @Nullable RequestListener requestListener) {\n-    if (!mIsPrefetchEnabledSupplier.get()) {\n-      return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);\n-    }\n     try {\n-      final Boolean shouldDecodePrefetches = imageRequest.shouldDecodePrefetches();\n-      final boolean skipBitmapCache =\n-          shouldDecodePrefetches != null\n-              ? !shouldDecodePrefetches // use imagerequest param if specified\n-              : mSuppressBitmapPrefetchingSupplier\n-                  .get(); // otherwise fall back to pipeline's default\n-      Producer<Void> producerSequence =\n-          skipBitmapCache\n-              ? mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest)\n-              : mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(imageRequest);\n-      return submitPrefetchRequest(\n-          producerSequence,\n-          imageRequest,\n-          ImageRequest.RequestLevel.FULL_FETCH,\n-          callerContext,\n-          Priority.MEDIUM,\n-          requestListener);\n-    } catch (Exception exception) {\n-      return DataSources.immediateFailedDataSource(exception);\n+      if (FrescoSystrace.isTracing()) {\n+        FrescoSystrace.beginSection(\"ImagePipeline#prefetchToBitmapCache\");\n+      }\n+\n+      if (!mIsPrefetchEnabledSupplier.get()) {\n+        return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);\n+      }\n+      try {\n+        final Boolean shouldDecodePrefetches = imageRequest.shouldDecodePrefetches();\n+        final boolean skipBitmapCache =\n+            shouldDecodePrefetches != null\n+                ? !shouldDecodePrefetches // use imagerequest param if specified\n+                : mSuppressBitmapPrefetchingSupplier\n+                    .get(); // otherwise fall back to pipeline's default\n+        Producer<Void> producerSequence =\n+            skipBitmapCache\n+                ? mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest)\n+                : mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(imageRequest);\n+        return submitPrefetchRequest(\n+            producerSequence,\n+            imageRequest,\n+            ImageRequest.RequestLevel.FULL_FETCH,\n+            callerContext,\n+            Priority.MEDIUM,\n+            requestListener);\n+      } catch (Exception exception) {\n+        return DataSources.immediateFailedDataSource(exception);\n+      }\n+    } finally {\n+      if (FrescoSystrace.isTracing()) {\n+        FrescoSystrace.endSection();\n+      }\n     }\n   }\n \n@@ -526,21 +536,31 @@ public DataSource<Void> prefetchToEncodedCache(\n       Object callerContext,\n       Priority priority,\n       @Nullable RequestListener requestListener) {\n-    if (!mIsPrefetchEnabledSupplier.get()) {\n-      return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);\n-    }\n     try {\n-      Producer<Void> producerSequence =\n-          mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest);\n-      return submitPrefetchRequest(\n-          producerSequence,\n-          imageRequest,\n-          ImageRequest.RequestLevel.FULL_FETCH,\n-          callerContext,\n-          priority,\n-          requestListener);\n-    } catch (Exception exception) {\n-      return DataSources.immediateFailedDataSource(exception);\n+      if (FrescoSystrace.isTracing()) {\n+        FrescoSystrace.beginSection(\"ImagePipeline#prefetchToEncodedCache\");\n+      }\n+\n+      if (!mIsPrefetchEnabledSupplier.get()) {\n+        return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);\n+      }\n+      try {\n+        Producer<Void> producerSequence =\n+            mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest);\n+        return submitPrefetchRequest(\n+            producerSequence,\n+            imageRequest,\n+            ImageRequest.RequestLevel.FULL_FETCH,\n+            callerContext,\n+            priority,\n+            requestListener);\n+      } catch (Exception exception) {\n+        return DataSources.immediateFailedDataSource(exception);\n+      }\n+    } finally {\n+      if (FrescoSystrace.isTracing()) {\n+        FrescoSystrace.endSection();\n+      }\n     }\n   }\n ",
      "parent_sha": "bc36c14abc96ac539e3358e81273ff20d12255ee"
    }
  },
  {
    "oid": "e72dc7ca75dc740d004dc63f63d2f3bae3a00f2e",
    "message": "Use the correct time when deciding when to evict from cache\n\nReviewed By: aagnes\n\nDifferential Revision: D2938931\n\nfb-gh-sync-id: 626c181951b07db757e9f2a404fbdc2371b2f621\nfbshipit-source-id: 626c181951b07db757e9f2a404fbdc2371b2f621",
    "date": "2016-03-31T18:38:18Z",
    "url": "https://github.com/facebook/fresco/commit/e72dc7ca75dc740d004dc63f63d2f3bae3a00f2e",
    "details": {
      "sha": "26934525f0e7be349d3ea7e491f3c2250bfb0129",
      "filename": "imagepipeline-base/src/main/java/com/facebook/cache/disk/DiskStorageCache.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/facebook/fresco/blob/e72dc7ca75dc740d004dc63f63d2f3bae3a00f2e/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorageCache.java",
      "raw_url": "https://github.com/facebook/fresco/raw/e72dc7ca75dc740d004dc63f63d2f3bae3a00f2e/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorageCache.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorageCache.java?ref=e72dc7ca75dc740d004dc63f63d2f3bae3a00f2e",
      "patch": "@@ -20,8 +20,6 @@\n import java.util.Collections;\n import java.util.concurrent.TimeUnit;\n \n-import android.os.SystemClock;\n-\n import com.facebook.binaryresource.BinaryResource;\n import com.facebook.cache.common.CacheErrorLogger;\n import com.facebook.cache.common.CacheEventListener;\n@@ -33,6 +31,7 @@\n import com.facebook.common.logging.FLog;\n import com.facebook.common.statfs.StatFsHelper;\n import com.facebook.common.time.Clock;\n+import com.facebook.common.time.SystemClock;\n import com.facebook.common.util.SecureHashUtil;\n \n /**\n@@ -163,7 +162,7 @@ public DiskStorageCache(\n     if (diskTrimmableRegistry != null) {\n       diskTrimmableRegistry.registerDiskTrimmable(this);\n     }\n-    this.mClock = com.facebook.common.time.SystemClock.get();\n+    this.mClock = SystemClock.get();\n   }\n \n   @Override\n@@ -533,7 +532,7 @@ private void trimBy(final double trimRatio) {\n   @GuardedBy(\"mLock\")\n   private boolean maybeUpdateFileCacheSize() {\n     boolean result = false;\n-    long now = SystemClock.uptimeMillis();\n+    long now = mClock.now();\n     if ((!mCacheStats.isInitialized()) ||\n         mCacheSizeLastUpdateTime == UNINITIALIZED ||\n         (now - mCacheSizeLastUpdateTime) > FILECACHE_SIZE_UPDATE_PERIOD_MS) {",
      "parent_sha": "b8f18c80e77cf19de70f4d070ed814b5bc96f0d9"
    }
  },
  {
    "oid": "ded83af5d1e53907f99228c4f763c8afafe77366",
    "message": "Make sure each bucket can hold an entry per thread",
    "date": "2015-08-10T12:04:48Z",
    "url": "https://github.com/facebook/fresco/commit/ded83af5d1e53907f99228c4f763c8afafe77366",
    "details": {
      "sha": "0ee49ff2730533b0949b6542654c7089099614ca",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/memory/DefaultFlexByteArrayPoolParams.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/facebook/fresco/blob/ded83af5d1e53907f99228c4f763c8afafe77366/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmemory%2FDefaultFlexByteArrayPoolParams.java",
      "raw_url": "https://github.com/facebook/fresco/raw/ded83af5d1e53907f99228c4f763c8afafe77366/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmemory%2FDefaultFlexByteArrayPoolParams.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fmemory%2FDefaultFlexByteArrayPoolParams.java?ref=ded83af5d1e53907f99228c4f763c8afafe77366",
      "patch": "@@ -27,10 +27,10 @@ public class DefaultFlexByteArrayPoolParams {\n   private DefaultFlexByteArrayPoolParams() {\n   }\n \n-  public static SparseIntArray generateBuckets(int min, int max) {\n+  public static SparseIntArray generateBuckets(int min, int max, int numThreads) {\n     SparseIntArray buckets = new SparseIntArray();\n     for (int i = min; i <= max; i*=2) {\n-      buckets.put(i, 1);\n+      buckets.put(i, numThreads);\n     }\n     return buckets;\n   }\n@@ -39,8 +39,10 @@ public static PoolParams get() {\n     return new PoolParams(\n         /* maxSizeSoftCap */ DEFAULT_MAX_BYTE_ARRAY_SIZE,\n         /* maxSizeHardCap */ DEFAULT_MAX_NUM_THREADS * DEFAULT_MAX_BYTE_ARRAY_SIZE,\n-        /* bucketSizes */\n-        generateBuckets(DEFAULT_MIN_BYTE_ARRAY_SIZE, DEFAULT_MAX_BYTE_ARRAY_SIZE),\n+        /* bucketSizes */ generateBuckets(\n+            DEFAULT_MIN_BYTE_ARRAY_SIZE,\n+            DEFAULT_MAX_BYTE_ARRAY_SIZE,\n+            DEFAULT_MAX_NUM_THREADS),\n         /* minBucketSize */  DEFAULT_MIN_BYTE_ARRAY_SIZE,\n         /* maxBucketSize */  DEFAULT_MAX_BYTE_ARRAY_SIZE,\n         /* maxNumThreads */  DEFAULT_MAX_NUM_THREADS);",
      "parent_sha": "454160e02a2239ed2b186bff6df0d57f5d9af283"
    }
  },
  {
    "oid": "36bc19d31757682f698b20feaf1aeca0536a2152",
    "message": "Remove unnecessary lock from DiskCache\n\nSummary:\n`maybeUpdateFileCacheSize()` is a quite expensive operation. Most of the disk read actually don't need lock on it. Will address in the following diff.\n\nThe purpose of this diff is to remove unnecessary lock from `maybeUpdateFileCacheSize` and `maybeDeleteSharedPreferencesFile`.\n\nReviewed By: kirwan\n\nDifferential Revision: D3841533\n\nfbshipit-source-id: ef0ca0406812537c54041e63da81df1801481114",
    "date": "2016-09-11T13:47:29Z",
    "url": "https://github.com/facebook/fresco/commit/36bc19d31757682f698b20feaf1aeca0536a2152",
    "details": {
      "sha": "b8e77b20e08b24dd9eeb296992899fae24b13551",
      "filename": "imagepipeline-base/src/main/java/com/facebook/cache/disk/DiskStorageCache.java",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/facebook/fresco/blob/36bc19d31757682f698b20feaf1aeca0536a2152/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorageCache.java",
      "raw_url": "https://github.com/facebook/fresco/raw/36bc19d31757682f698b20feaf1aeca0536a2152/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorageCache.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorageCache.java?ref=36bc19d31757682f698b20feaf1aeca0536a2152",
      "patch": "@@ -210,9 +210,7 @@ public void run() {\n \n       @Override\n       public void run() {\n-        synchronized (mLock) {\n-          maybeDeleteSharedPreferencesFile(context, mStorage.getStorageName());\n-        }\n+        maybeDeleteSharedPreferencesFile(context, mStorage.getStorageName());\n       }\n     });\n   }\n@@ -704,20 +702,17 @@ private void trimBy(final double trimRatio) {\n    */\n   @GuardedBy(\"mLock\")\n   private boolean maybeUpdateFileCacheSize() {\n-    boolean result = false;\n     long now = mClock.now();\n     if ((!mCacheStats.isInitialized()) ||\n         mCacheSizeLastUpdateTime == UNINITIALIZED ||\n         (now - mCacheSizeLastUpdateTime) > FILECACHE_SIZE_UPDATE_PERIOD_MS) {\n-      maybeUpdateFileCacheSizeAndIndex();\n-      mCacheSizeLastUpdateTime = now;\n-      result = true;\n+      return maybeUpdateFileCacheSizeAndIndex();\n     }\n-    return result;\n+    return false;\n   }\n \n   @GuardedBy(\"mLock\")\n-  private void maybeUpdateFileCacheSizeAndIndex() {\n+  private boolean maybeUpdateFileCacheSizeAndIndex() {\n     long size = 0;\n     int count = 0;\n     boolean foundFutureTimestamp = false;\n@@ -774,7 +769,10 @@ private void maybeUpdateFileCacheSizeAndIndex() {\n           TAG,\n           \"calcFileCacheSize: \" + ioe.getMessage(),\n           ioe);\n+      return false;\n     }\n+    mCacheSizeLastUpdateTime = now;\n+    return true;\n   }\n \n   //TODO(t12287315): Remove the temp method for deleting created Preference in next release",
      "parent_sha": "f45ea930a7131822285542127df2ae2265136bac"
    }
  },
  {
    "oid": "caaa0181834a35cec24030664284c8d8db22a2cd",
    "message": "Use Infer's OkToExtend for CustomProducerSequenceFactory\n\nDifferential Revision: D35363173\n\nfbshipit-source-id: 8367cf8804241997dfd4fda313d738388f642ed0",
    "date": "2022-04-05T09:19:37Z",
    "url": "https://github.com/facebook/fresco/commit/caaa0181834a35cec24030664284c8d8db22a2cd",
    "details": {
      "sha": "8201d3da41aa70b671fb5922b6167a34f56d7596",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/CustomProducerSequenceFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/caaa0181834a35cec24030664284c8d8db22a2cd/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FCustomProducerSequenceFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/caaa0181834a35cec24030664284c8d8db22a2cd/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FCustomProducerSequenceFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FCustomProducerSequenceFactory.java?ref=caaa0181834a35cec24030664284c8d8db22a2cd",
      "patch": "@@ -7,7 +7,7 @@\n \n package com.facebook.imagepipeline.producers;\n \n-import com.facebook.annotations.OkToExtend;\n+import com.facebook.infer.annotation.OkToExtend;\n import com.facebook.common.references.CloseableReference;\n import com.facebook.imagepipeline.core.ProducerSequenceFactory;\n import com.facebook.imagepipeline.image.CloseableImage;",
      "parent_sha": "8a0dfce6da19d0a9da3a298a9d438fe20e65d04a"
    }
  },
  {
    "oid": "43b216012a008e402b81b8db291fff3d1f1127e0",
    "message": "Fix IllegalArgumentException in RichDocumentImageView\n\nDifferential Revision: D67919648\n\nfbshipit-source-id: 27746f9a7b879b90168588fd0a3d742b17d758ed",
    "date": "2025-01-08T00:46:19Z",
    "url": "https://github.com/facebook/fresco/commit/43b216012a008e402b81b8db291fff3d1f1127e0",
    "details": {
      "sha": "e3e8b24c8de5a062952ec16a962e6734443331af",
      "filename": "drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/facebook/fresco/blob/43b216012a008e402b81b8db291fff3d1f1127e0/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java",
      "raw_url": "https://github.com/facebook/fresco/raw/43b216012a008e402b81b8db291fff3d1f1127e0/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java?ref=43b216012a008e402b81b8db291fff3d1f1127e0",
      "patch": "@@ -153,7 +153,7 @@ public REQUEST getLowResImageRequest() {\n    * <p>For performance reasons, the array is not deep-copied, but only stored by reference. Please\n    * don't modify once submitted.\n    */\n-  public BUILDER setFirstAvailableImageRequests(REQUEST[] firstAvailableImageRequests) {\n+  public BUILDER setFirstAvailableImageRequests(@Nullable REQUEST[] firstAvailableImageRequests) {\n     return setFirstAvailableImageRequests(firstAvailableImageRequests, true);\n   }\n \n@@ -167,7 +167,7 @@ public BUILDER setFirstAvailableImageRequests(REQUEST[] firstAvailableImageReque\n    *     supplied requests.\n    */\n   public BUILDER setFirstAvailableImageRequests(\n-      REQUEST[] firstAvailableImageRequests, boolean tryCacheOnlyFirst) {\n+      @Nullable REQUEST[] firstAvailableImageRequests, boolean tryCacheOnlyFirst) {\n     Preconditions.checkArgument(\n         firstAvailableImageRequests == null || firstAvailableImageRequests.length > 0,\n         \"No requests specified!\");",
      "parent_sha": "e6b052610aab461601cfabc00f7240758a415878"
    }
  },
  {
    "oid": "2d903353530d11525780012833197de0047a5e1e",
    "message": "Fixed problem on Contact photo Uri",
    "date": "2015-10-19T14:26:56Z",
    "url": "https://github.com/facebook/fresco/commit/2d903353530d11525780012833197de0047a5e1e",
    "details": {
      "sha": "13ee8d0a72158ff8b2220fa85ffd48c681ac40af",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalContentUriFetchProducer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/facebook/fresco/blob/2d903353530d11525780012833197de0047a5e1e/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/2d903353530d11525780012833197de0047a5e1e/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java?ref=2d903353530d11525780012833197de0047a5e1e",
      "patch": "@@ -28,6 +28,7 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.util.concurrent.Executor;\n \n import javax.annotation.Nullable;\n@@ -71,9 +72,15 @@ public LocalContentUriFetchProducer(\n   protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOException {\n     Uri uri = imageRequest.getSourceUri();\n     if (isContactUri(uri)) {\n+      final InputStream inputStream;\n+      if (uri.toString().endsWith(\"/photo\")) {\n+        inputStream =  mContentResolver.openInputStream(uri);\n+      } else {\n+        inputStream = ContactsContract.Contacts.openContactPhotoInputStream(mContentResolver, uri);\n+      }\n       // If a Contact URI is provided, use the special helper to open that contact's photo.\n       return getEncodedImage(\n-          ContactsContract.Contacts.openContactPhotoInputStream(mContentResolver, uri),\n+          inputStream,\n           EncodedImage.UNKNOWN_STREAM_SIZE);\n     }\n ",
      "parent_sha": "4e0a8dadc88eb8c8d3fe96b43d147f8d9a0fd59b"
    }
  },
  {
    "oid": "e5dfa753767a5f25c1eadbefe0509b2b183f1f5e",
    "message": "Fix drawee lint",
    "date": "2015-05-14T19:51:10Z",
    "url": "https://github.com/facebook/fresco/commit/e5dfa753767a5f25c1eadbefe0509b2b183f1f5e",
    "details": {
      "sha": "1026c732fd13ab1a3df13184894b9cac737d96a1",
      "filename": "drawee/src/main/java/com/facebook/drawee/controller/ForwardingControllerListener.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/e5dfa753767a5f25c1eadbefe0509b2b183f1f5e/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FForwardingControllerListener.java",
      "raw_url": "https://github.com/facebook/fresco/raw/e5dfa753767a5f25c1eadbefe0509b2b183f1f5e/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FForwardingControllerListener.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FForwardingControllerListener.java?ref=e5dfa753767a5f25c1eadbefe0509b2b183f1f5e",
      "patch": "@@ -23,7 +23,8 @@\n  */\n @ThreadSafe\n public class ForwardingControllerListener<INFO> implements ControllerListener<INFO> {\n-  private static final String TAG = \"ForwardingControllerListener\";\n+  // lint only allows 23 characters in a tag\n+  private static final String TAG = \"FdingControllerListener\";\n \n   private final List<ControllerListener<? super INFO>> mListeners = new ArrayList<>(2);\n ",
      "parent_sha": "8c280079afdbefd81cac3a87be691ae13a0413d1"
    }
  },
  {
    "oid": "b83e1c85ad65a470a12d41aa504295126cfc5743",
    "message": "Close local content file descriptor resource\n\nReviewed By: defHLT\n\nDifferential Revision: D33932796\n\nfbshipit-source-id: 1707d7c60e1cfe136d2e01144efa772e5f31d3d4",
    "date": "2022-02-02T19:30:37Z",
    "url": "https://github.com/facebook/fresco/commit/b83e1c85ad65a470a12d41aa504295126cfc5743",
    "details": {
      "sha": "716bdae55aeb6e3c1837a7201d35243ae0783e95",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalContentUriFetchProducer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/facebook/fresco/blob/b83e1c85ad65a470a12d41aa504295126cfc5743/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/b83e1c85ad65a470a12d41aa504295126cfc5743/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java?ref=b83e1c85ad65a470a12d41aa504295126cfc5743",
      "patch": "@@ -85,14 +85,18 @@ protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOExcep\n   }\n \n   private @Nullable EncodedImage getCameraImage(Uri uri) throws IOException {\n+    ParcelFileDescriptor parcelFileDescriptor;\n     try {\n-      ParcelFileDescriptor parcelFileDescriptor = mContentResolver.openFileDescriptor(uri, \"r\");\n-      Preconditions.checkNotNull(parcelFileDescriptor);\n-      FileDescriptor fd = parcelFileDescriptor.getFileDescriptor();\n-      return getEncodedImage(new FileInputStream(fd), (int) parcelFileDescriptor.getStatSize());\n+      parcelFileDescriptor = mContentResolver.openFileDescriptor(uri, \"r\");\n     } catch (FileNotFoundException e) {\n       return null;\n     }\n+    Preconditions.checkNotNull(parcelFileDescriptor);\n+    FileDescriptor fd = parcelFileDescriptor.getFileDescriptor();\n+    EncodedImage encodedImage =\n+        getEncodedImage(new FileInputStream(fd), (int) parcelFileDescriptor.getStatSize());\n+    parcelFileDescriptor.close();\n+    return encodedImage;\n   }\n \n   @Override",
      "parent_sha": "785287155f31aeadf2707f1ced7ab2e9d957a482"
    }
  },
  {
    "oid": "087344cf1a8638bc2682064aa803872696b6c981",
    "message": "add missing @Nullable in NoOpDiskTrimmableRegistry.java\n\nReviewed By: IanChilds\n\nDifferential Revision: D5855986\n\nfbshipit-source-id: 09a7f2a3be0a80fc7ff11383d8acc5da8ea07b62",
    "date": "2017-09-19T17:47:22Z",
    "url": "https://github.com/facebook/fresco/commit/087344cf1a8638bc2682064aa803872696b6c981",
    "details": {
      "sha": "b085d97144ad4b275eb85dcf033723a1cd080206",
      "filename": "fbcore/src/main/java/com/facebook/common/disk/NoOpDiskTrimmableRegistry.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/087344cf1a8638bc2682064aa803872696b6c981/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fdisk%2FNoOpDiskTrimmableRegistry.java",
      "raw_url": "https://github.com/facebook/fresco/raw/087344cf1a8638bc2682064aa803872696b6c981/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fdisk%2FNoOpDiskTrimmableRegistry.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fdisk%2FNoOpDiskTrimmableRegistry.java?ref=087344cf1a8638bc2682064aa803872696b6c981",
      "patch": "@@ -9,11 +9,12 @@\n \n package com.facebook.common.disk;\n \n+import javax.annotation.Nullable;\n /**\n  * Implementation of {@link DiskTrimmableRegistry} that does not do anything.\n  */\n public class NoOpDiskTrimmableRegistry implements DiskTrimmableRegistry {\n-  private static NoOpDiskTrimmableRegistry sInstance = null;\n+  private static @Nullable NoOpDiskTrimmableRegistry sInstance = null;\n \n   private NoOpDiskTrimmableRegistry() {\n   }",
      "parent_sha": "4692be0af849699fe64b4ccbe591e0771f4a47bd"
    }
  },
  {
    "oid": "a38389b865926b16377dcc3aab960c1bd4af25b0",
    "message": "Fix encoded memory cache producer test\n\nReviewed By: wizh\n\nDifferential Revision: D31526989\n\nfbshipit-source-id: 604eabb2e3cef38a62861c7c5a1cebf1ee7f27fc",
    "date": "2021-10-09T21:37:24Z",
    "url": "https://github.com/facebook/fresco/commit/a38389b865926b16377dcc3aab960c1bd4af25b0",
    "details": {
      "sha": "e35ea1689b85ca5292421ae538eb82a73184a4a7",
      "filename": "imagepipeline/src/test/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducerTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/facebook/fresco/blob/a38389b865926b16377dcc3aab960c1bd4af25b0/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FEncodedMemoryCacheProducerTest.java",
      "raw_url": "https://github.com/facebook/fresco/raw/a38389b865926b16377dcc3aab960c1bd4af25b0/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FEncodedMemoryCacheProducerTest.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Ftest%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FEncodedMemoryCacheProducerTest.java?ref=a38389b865926b16377dcc3aab960c1bd4af25b0",
      "patch": "@@ -107,14 +107,21 @@ public void setUp() {\n     when(mImagePipelineConfig.getExperiments()).thenReturn(mImagePipelineExperiments);\n     when(mImagePipelineExperiments.isEncodedCacheEnabled()).thenReturn(true);\n \n-    when(mImageRequest.isMemoryCacheEnabled()).thenReturn(true);\n+    setUpCacheEnabled(true);\n+  }\n+\n+  private void setUpCacheEnabled(boolean enabled) {\n+    when(mImageRequest.isCacheEnabled(ImageRequest.CachesLocationsMasks.ENCODED_READ))\n+        .thenReturn(enabled);\n+    when(mImageRequest.isCacheEnabled(ImageRequest.CachesLocationsMasks.ENCODED_WRITE))\n+        .thenReturn(enabled);\n   }\n \n   @Test\n   public void testDisableMemoryCache() {\n     setupEncodedMemoryCacheGetNotFound();\n     setupInputProducerStreamingSuccess();\n-    when(mImageRequest.isMemoryCacheEnabled()).thenReturn(false);\n+    setUpCacheEnabled(false);\n     mEncodedMemoryCacheProducer.produceResults(mConsumer, mProducerContext);\n     verify(mMemoryCache, never()).cache(any(CacheKey.class), any(CloseableReference.class));\n   }",
      "parent_sha": "ffd9018d9920a421f66b50ff86c09eaa3967b781"
    }
  },
  {
    "oid": "96d74f385b297f364db1f719dd6ee61fc380d0d4",
    "message": "Lazy Imagepipeline deps",
    "date": "2015-06-04T09:06:26Z",
    "url": "https://github.com/facebook/fresco/commit/96d74f385b297f364db1f719dd6ee61fc380d0d4",
    "details": {
      "sha": "76461c5f12b00a8e6134c8d6520dfb6d8c62e48d",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/SimpleProgressiveJpegConfig.java",
      "status": "modified",
      "additions": 30,
      "deletions": 14,
      "changes": 44,
      "blob_url": "https://github.com/facebook/fresco/blob/96d74f385b297f364db1f719dd6ee61fc380d0d4/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FSimpleProgressiveJpegConfig.java",
      "raw_url": "https://github.com/facebook/fresco/raw/96d74f385b297f364db1f719dd6ee61fc380d0d4/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FSimpleProgressiveJpegConfig.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FSimpleProgressiveJpegConfig.java?ref=96d74f385b297f364db1f719dd6ee61fc380d0d4",
      "patch": "@@ -9,9 +9,10 @@\n \n package com.facebook.imagepipeline.decoder;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n+import com.facebook.common.internal.Preconditions;\n import com.facebook.imagepipeline.image.ImmutableQualityInfo;\n import com.facebook.imagepipeline.image.QualityInfo;\n \n@@ -21,28 +22,43 @@\n  * <p/> If no specific scans to decode are provided, every scan is allowed to be decoded.\n  */\n public class SimpleProgressiveJpegConfig implements ProgressiveJpegConfig {\n-  private final List<Integer> mScansToDecode;\n-  private final int mGoodEnoughScanNumber;\n+  public interface DynamicValueConfig {\n+    List<Integer> getScansToDecode();\n+    int getGoodEnoughScanNumber();\n+  }\n+\n+  private static class DefaultDynamicValueConfig implements DynamicValueConfig {\n+    public List<Integer> getScansToDecode() {\n+      return Collections.EMPTY_LIST;\n+    }\n+\n+    public int getGoodEnoughScanNumber() {\n+      return 0;\n+    }\n+  }\n+\n+  private final DynamicValueConfig mDynamicValueConfig;\n \n   public SimpleProgressiveJpegConfig() {\n-    this(new ArrayList<Integer>(), 0);\n+    this (new DefaultDynamicValueConfig());\n   }\n \n-  public SimpleProgressiveJpegConfig(\n-      List<Integer> scansToDecode,\n-      int goodEnoughScanNumber) {\n-    mScansToDecode = scansToDecode;\n-    mGoodEnoughScanNumber = goodEnoughScanNumber;\n+\n+\n+  public SimpleProgressiveJpegConfig(DynamicValueConfig dynamicValueConfig) {\n+    mDynamicValueConfig = Preconditions.checkNotNull(dynamicValueConfig);\n   }\n \n   @Override\n   public int getNextScanNumberToDecode(int scanNumber) {\n-    if (mScansToDecode == null || mScansToDecode.isEmpty()) {\n+    final List<Integer> scansToDecode = mDynamicValueConfig.getScansToDecode();\n+    if (scansToDecode == null || scansToDecode.isEmpty()) {\n       return scanNumber + 1;\n     }\n-    for (int i = 0; i < mScansToDecode.size(); i++) {\n-      if (mScansToDecode.get(i) > scanNumber) {\n-        return mScansToDecode.get(i);\n+\n+    for (int i = 0; i < scansToDecode.size(); i++) {\n+      if (scansToDecode.get(i) > scanNumber) {\n+        return scansToDecode.get(i);\n       }\n     }\n     return Integer.MAX_VALUE;\n@@ -52,7 +68,7 @@ public int getNextScanNumberToDecode(int scanNumber) {\n   public QualityInfo getQualityInfo(int scanNumber) {\n     return ImmutableQualityInfo.of(\n         scanNumber,\n-        /* isOfGoodEnoughQuality */ scanNumber >= mGoodEnoughScanNumber,\n+        /* isOfGoodEnoughQuality */ scanNumber >= mDynamicValueConfig.getGoodEnoughScanNumber(),\n         /* isOfFullQuality */ false);\n   }\n }",
      "parent_sha": "d5f855bbff0ad01d3f2bd6b3fe3b8a7deb87a2c7"
    }
  },
  {
    "oid": "1f83af96128a699067d3d1ebb26db12b39cec398",
    "message": "fury][fresco] Add Support for work instrumentation - BufferedDiskCache\n\nReviewed By: oprisnik\n\nDifferential Revision: D18248553\n\nfbshipit-source-id: aeca472fa543088b52706567157f0ef1bfc5dd99",
    "date": "2019-11-15T15:34:25Z",
    "url": "https://github.com/facebook/fresco/commit/1f83af96128a699067d3d1ebb26db12b39cec398",
    "details": {
      "sha": "102821c0896f1b6328c1dc558a6dfb672efc9cf2",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java",
      "status": "modified",
      "additions": 26,
      "deletions": 23,
      "changes": 49,
      "blob_url": "https://github.com/facebook/fresco/blob/1f83af96128a699067d3d1ebb26db12b39cec398/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCache.java",
      "raw_url": "https://github.com/facebook/fresco/raw/1f83af96128a699067d3d1ebb26db12b39cec398/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCache.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCache.java?ref=1f83af96128a699067d3d1ebb26db12b39cec398",
      "patch": "@@ -19,6 +19,7 @@\n import com.facebook.common.memory.PooledByteStreams;\n import com.facebook.common.references.CloseableReference;\n import com.facebook.imagepipeline.image.EncodedImage;\n+import com.facebook.imagepipeline.instrumentation.FrescoInstrumenter;\n import com.facebook.imagepipeline.systrace.FrescoSystrace;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -89,11 +90,17 @@ public Task<Boolean> contains(final CacheKey key) {\n \n   private Task<Boolean> containsAsync(final CacheKey key) {\n     try {\n+      final Object token = FrescoInstrumenter.onBeforeSubmitWork(\"BufferedDiskCache_containsAsync\");\n       return Task.call(\n           new Callable<Boolean>() {\n             @Override\n             public Boolean call() throws Exception {\n-              return checkInStagingAreaAndFileCache(key);\n+              final Object currentToken = FrescoInstrumenter.onBeginWork(token, null);\n+              try {\n+                return checkInStagingAreaAndFileCache(key);\n+              } finally {\n+                FrescoInstrumenter.onEndWork(currentToken);\n+              }\n             }\n           },\n           mReadExecutor);\n@@ -171,14 +178,13 @@ private boolean checkInStagingAreaAndFileCache(final CacheKey key) {\n \n   private Task<EncodedImage> getAsync(final CacheKey key, final AtomicBoolean isCancelled) {\n     try {\n+      final Object token = FrescoInstrumenter.onBeforeSubmitWork(\"BufferedDiskCache_getAsync\");\n       return Task.call(\n           new Callable<EncodedImage>() {\n             @Override\n             public @Nullable EncodedImage call() throws Exception {\n+              final Object currentToken = FrescoInstrumenter.onBeginWork(token, null);\n               try {\n-                if (FrescoSystrace.isTracing()) {\n-                  FrescoSystrace.beginSection(\"BufferedDiskCache#getAsync\");\n-                }\n                 if (isCancelled.get()) {\n                   throw new CancellationException();\n                 }\n@@ -216,9 +222,7 @@ private Task<EncodedImage> getAsync(final CacheKey key, final AtomicBoolean isCa\n                   return result;\n                 }\n               } finally {\n-                if (FrescoSystrace.isTracing()) {\n-                  FrescoSystrace.endSection();\n-                }\n+                FrescoInstrumenter.onEndWork(currentToken);\n               }\n             }\n           },\n@@ -251,22 +255,18 @@ public void put(final CacheKey key, EncodedImage encodedImage) {\n       // ref count again.\n       final EncodedImage finalEncodedImage = EncodedImage.cloneOrNull(encodedImage);\n       try {\n-\n+        final Object token = FrescoInstrumenter.onBeforeSubmitWork(\"BufferedDiskCache_putAsync\");\n         mWriteExecutor.execute(\n             new Runnable() {\n               @Override\n               public void run() {\n+                final Object currentToken = FrescoInstrumenter.onBeginWork(token, null);\n                 try {\n-                  if (FrescoSystrace.isTracing()) {\n-                    FrescoSystrace.beginSection(\"BufferedDiskCache#putAsync\");\n-                  }\n                   writeToDiskCache(key, finalEncodedImage);\n                 } finally {\n                   mStagingArea.remove(key, finalEncodedImage);\n                   EncodedImage.closeSafely(finalEncodedImage);\n-                  if (FrescoSystrace.isTracing()) {\n-                    FrescoSystrace.endSection();\n-                  }\n+                  FrescoInstrumenter.onEndWork(currentToken);\n                 }\n               }\n             });\n@@ -289,20 +289,17 @@ public Task<Void> remove(final CacheKey key) {\n     Preconditions.checkNotNull(key);\n     mStagingArea.remove(key);\n     try {\n+      final Object token = FrescoInstrumenter.onBeforeSubmitWork(\"BufferedDiskCache_remove\");\n       return Task.call(\n           new Callable<Void>() {\n             @Override\n             public Void call() throws Exception {\n+              final Object currentToken = FrescoInstrumenter.onBeginWork(token, null);\n               try {\n-                if (FrescoSystrace.isTracing()) {\n-                  FrescoSystrace.beginSection(\"BufferedDiskCache#remove\");\n-                }\n                 mStagingArea.remove(key);\n                 mFileCache.remove(key);\n               } finally {\n-                if (FrescoSystrace.isTracing()) {\n-                  FrescoSystrace.endSection();\n-                }\n+                FrescoInstrumenter.onEndWork(currentToken);\n               }\n               return null;\n             }\n@@ -319,14 +316,20 @@ public Void call() throws Exception {\n   /** Clears the disk cache and the staging area. */\n   public Task<Void> clearAll() {\n     mStagingArea.clearAll();\n+    final Object token = FrescoInstrumenter.onBeforeSubmitWork(\"BufferedDiskCache_clearAll\");\n     try {\n       return Task.call(\n           new Callable<Void>() {\n             @Override\n             public Void call() throws Exception {\n-              mStagingArea.clearAll();\n-              mFileCache.clearAll();\n-              return null;\n+              final Object currentToken = FrescoInstrumenter.onBeginWork(token, null);\n+              try {\n+                mStagingArea.clearAll();\n+                mFileCache.clearAll();\n+                return null;\n+              } finally {\n+                FrescoInstrumenter.onEndWork(currentToken);\n+              }\n             }\n           },\n           mWriteExecutor);",
      "parent_sha": "ed661c6f85104eaff5aaa55a46227e8b8e5abb0d"
    }
  },
  {
    "oid": "d4bc78212e85c1a68009f205fde39b33e5d18f0b",
    "message": "Make handle static in ImagePerfControllerListener2\n\nReviewed By: oprisnik\n\nDifferential Revision: D31051846\n\nfbshipit-source-id: ad972178dbe2fc4da14c388634c947ad7d60b606",
    "date": "2021-09-29T09:51:42Z",
    "url": "https://github.com/facebook/fresco/commit/d4bc78212e85c1a68009f205fde39b33e5d18f0b",
    "details": {
      "sha": "b11654176abe4feafd15c3076c00ebea6b441bc5",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener2.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/facebook/fresco/blob/d4bc78212e85c1a68009f205fde39b33e5d18f0b/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2Finternal%2FImagePerfControllerListener2.java",
      "raw_url": "https://github.com/facebook/fresco/raw/d4bc78212e85c1a68009f205fde39b33e5d18f0b/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2Finternal%2FImagePerfControllerListener2.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2Finfo%2Finternal%2FImagePerfControllerListener2.java?ref=d4bc78212e85c1a68009f205fde39b33e5d18f0b",
      "patch": "@@ -42,7 +42,7 @@ public class ImagePerfControllerListener2 extends BaseControllerListener2<ImageI\n   private final Supplier<Boolean> mAsyncLogging;\n   private final Supplier<Boolean> mUseNewState;\n \n-  private @Nullable Handler mHandler;\n+  private static @Nullable Handler sHandler;\n \n   static class LogHandler extends Handler {\n \n@@ -205,42 +205,42 @@ private void reportViewInvisible(ImagePerfState state, long time) {\n \n   private void updateStatus(ImagePerfState state, @ImageLoadStatus int imageLoadStatus) {\n     if (shouldDispatchAsync()) {\n-      Message msg = Preconditions.checkNotNull(mHandler).obtainMessage();\n+      Message msg = Preconditions.checkNotNull(sHandler).obtainMessage();\n       msg.what = WHAT_STATUS;\n       msg.arg1 = imageLoadStatus;\n       msg.obj = state;\n-      mHandler.sendMessage(msg);\n+      sHandler.sendMessage(msg);\n     } else {\n       mImagePerfNotifier.notifyStatusUpdated(state, imageLoadStatus);\n     }\n   }\n \n   private void updateVisibility(ImagePerfState state, @VisibilityState int visibilityState) {\n     if (shouldDispatchAsync()) {\n-      Message msg = Preconditions.checkNotNull(mHandler).obtainMessage();\n+      Message msg = Preconditions.checkNotNull(sHandler).obtainMessage();\n       msg.what = WHAT_VISIBILITY;\n       msg.arg1 = visibilityState;\n       msg.obj = state;\n-      mHandler.sendMessage(msg);\n+      sHandler.sendMessage(msg);\n     } else {\n       // sync\n       mImagePerfNotifier.notifyListenersOfVisibilityStateUpdate(state, visibilityState);\n     }\n   }\n \n   private synchronized void initHandler() {\n-    if (mHandler != null) {\n+    if (sHandler != null) {\n       return;\n     }\n     HandlerThread handlerThread = new HandlerThread(\"ImagePerfControllerListener2Thread\");\n     handlerThread.start();\n     Looper looper = Preconditions.checkNotNull(handlerThread.getLooper());\n-    mHandler = new LogHandler(looper, mImagePerfNotifier);\n+    sHandler = new LogHandler(looper, mImagePerfNotifier);\n   }\n \n   private boolean shouldDispatchAsync() {\n     boolean enabled = mAsyncLogging.get();\n-    if (enabled && mHandler == null) {\n+    if (enabled && sHandler == null) {\n       initHandler();\n     }\n     return enabled;",
      "parent_sha": "45a85096a2b47e0bbdb8507c2b6af9ae83c42cab"
    }
  },
  {
    "oid": "876a337b1082131641965210140d2936bdd2f38c",
    "message": "Added experiment for new hash function\n\nReviewed By: andrewcox\n\nDifferential Revision: D52709910\n\nfbshipit-source-id: f5d8c3af936dba4652f16c1792e3bab0390c3890",
    "date": "2024-01-16T20:56:08Z",
    "url": "https://github.com/facebook/fresco/commit/876a337b1082131641965210140d2936bdd2f38c",
    "details": {
      "sha": "b2ead08ec795044c979ea1a925257c8f54200a16",
      "filename": "fbcore/src/main/java/com/facebook/common/callercontext/ContextChain.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/facebook/fresco/blob/876a337b1082131641965210140d2936bdd2f38c/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fcallercontext%2FContextChain.java",
      "raw_url": "https://github.com/facebook/fresco/raw/876a337b1082131641965210140d2936bdd2f38c/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fcallercontext%2FContextChain.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fcallercontext%2FContextChain.java?ref=876a337b1082131641965210140d2936bdd2f38c",
      "patch": "@@ -46,6 +46,7 @@ public class ContextChain implements Parcelable {\n   private String mSerializedNodeString;\n \n   private static boolean sUseConcurrentHashMap = false;\n+  private static boolean sUseNewHashFunction = false;\n \n   public ContextChain(\n       final String tag,\n@@ -101,6 +102,10 @@ public static void setUseConcurrentHashMap(boolean useConcurrentHashMap) {\n     sUseConcurrentHashMap = useConcurrentHashMap;\n   }\n \n+  public static void setUseNewHashFunction(boolean useNewHashFunction) {\n+    sUseNewHashFunction = useNewHashFunction;\n+  }\n+\n   public String getName() {\n     return mName;\n   }\n@@ -190,7 +195,13 @@ public boolean equals(@Nullable Object obj) {\n \n   @Override\n   public int hashCode() {\n-    return Objects.hash(mParent, getNodeString());\n+    if (sUseNewHashFunction) {\n+      return Objects.hash(mParent, getNodeString());\n+    } else {\n+      int result = super.hashCode();\n+      result = 31 * result + (getNodeString().hashCode());\n+      return result;\n+    }\n   }\n \n   @Override",
      "parent_sha": "72515a69ab0e84460bec727f0b86e67d093b5c67"
    }
  },
  {
    "oid": "e1ba79087bfef8cc0a02de30927be935b868950c",
    "message": "s/commiting/committing/g\n\nDifferential Revision: D13807148\n\nfbshipit-source-id: 8c86d3143049015e73aae3d1c890b54172585c94",
    "date": "2019-01-26T03:24:20Z",
    "url": "https://github.com/facebook/fresco/commit/e1ba79087bfef8cc0a02de30927be935b868950c",
    "details": {
      "sha": "3a39009c305cd0d754889c6ca6ac888b83abf138",
      "filename": "imagepipeline-base/src/main/java/com/facebook/cache/disk/DiskStorage.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/e1ba79087bfef8cc0a02de30927be935b868950c/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorage.java",
      "raw_url": "https://github.com/facebook/fresco/raw/e1ba79087bfef8cc0a02de30927be935b868950c/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorage.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcache%2Fdisk%2FDiskStorage.java?ref=e1ba79087bfef8cc0a02de30927be935b868950c",
      "patch": "@@ -151,7 +151,7 @@ interface Entry {\n    * This is a builder-like interface returned when calling insert.\n    * It holds all the operations carried through an {@link #insert} operation:\n    * - writing data\n-   * - commiting\n+   * - committing\n    * - clean up\n    */\n   interface Inserter {",
      "parent_sha": "2e2eeaebbde51b54498810b13bffb88e3ec56be5"
    }
  },
  {
    "oid": "3f7372ad9ae8dc644d153d24868efeb04ef6afac",
    "message": "Dynamically change bitmap-only rounded corners",
    "date": "2015-05-14T19:50:20Z",
    "url": "https://github.com/facebook/fresco/commit/3f7372ad9ae8dc644d153d24868efeb04ef6afac",
    "details": {
      "sha": "b698102fff17e64d14086e375602b890be481645",
      "filename": "drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/facebook/fresco/blob/3f7372ad9ae8dc644d153d24868efeb04ef6afac/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java",
      "raw_url": "https://github.com/facebook/fresco/raw/3f7372ad9ae8dc644d153d24868efeb04ef6afac/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java?ref=3f7372ad9ae8dc644d153d24868efeb04ef6afac",
      "patch": "@@ -629,10 +629,23 @@ public void setRoundingParams(RoundingParams roundingParams) {\n             roundingParams.getRoundingMethod() == mRoundingParams.getRoundingMethod(),\n         \"Rounding method cannot be changed and it has to be set during construction time.\");\n     mRoundingParams = roundingParams;\n-    if (roundingParams.getRoundingMethod() == RoundingParams.RoundingMethod.OVERLAY_COLOR) {\n-      RoundedCornersDrawable roundedCornersDrawable = (RoundedCornersDrawable) mTopLevelDrawable;\n-      applyRoundingParams(roundedCornersDrawable, roundingParams);\n-      roundedCornersDrawable.setOverlayColor(roundingParams.getOverlayColor());\n+    switch (roundingParams.getRoundingMethod()) {\n+      case OVERLAY_COLOR:\n+        RoundedCornersDrawable roundedCornersDrawable = (RoundedCornersDrawable) mTopLevelDrawable;\n+        applyRoundingParams(roundedCornersDrawable, roundingParams);\n+        roundedCornersDrawable.setOverlayColor(roundingParams.getOverlayColor());\n+        break;\n+      case BITMAP_ONLY:\n+        for (int i = 0; i < mFadeDrawable.getNumberOfLayers(); i++) {\n+          Drawable layer = mFadeDrawable.getDrawable(i);\n+          if (layer instanceof Rounded) {\n+            Rounded rounded = (Rounded) layer;\n+            applyRoundingParams(rounded, roundingParams);\n+          }\n+        }\n+        break;\n+      default:\n+        break;\n     }\n   }\n ",
      "parent_sha": "aed34899f0dab5d47bf45fa4731a054ef0b0ad30"
    }
  },
  {
    "oid": "c4731bc98203d88c0c4109f0d57619656a9d0cbc",
    "message": "Default Showcase app to the welcome screen if fragment ID invalid\n\nSummary:\nMaking changes to the Showcase app's resources can result in the generated IDs changing. This resulted in the app crashing for me due to an old ID being saved in shared preferences.\n\nThis diff ensures that the welcome screen will be shown in this case.\n\nReviewed By: oprisnik\n\nDifferential Revision: D4591557\n\nfbshipit-source-id: 9e041d8b728ba3b33c83d83f0280dc3b327c0f7c",
    "date": "2017-02-22T13:34:56Z",
    "url": "https://github.com/facebook/fresco/commit/c4731bc98203d88c0c4109f0d57619656a9d0cbc",
    "details": {
      "sha": "832ddd88f3eb2aeb17e07be7fefb6460f6f1a5e3",
      "filename": "samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/MainActivity.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/c4731bc98203d88c0c4109f0d57619656a9d0cbc/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2FMainActivity.java",
      "raw_url": "https://github.com/facebook/fresco/raw/c4731bc98203d88c0c4109f0d57619656a9d0cbc/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2FMainActivity.java?ref=c4731bc98203d88c0c4109f0d57619656a9d0cbc",
      "patch": "@@ -186,7 +186,8 @@ private void handleNavigationItemClick(int itemId) {\n         fragment = new SettingsFragment();\n         break;\n       default:\n-        throw new IllegalArgumentException(\"No example with this id!\");\n+        // Default to the welcome fragment\n+        fragment = new WelcomeFragment();\n     }\n     showFragment(fragment);\n ",
      "parent_sha": "5433378998c5518dce0b88aee86cf03bcec7c509"
    }
  },
  {
    "oid": "209c57dbfad55f52c533f5029f3c4bbb2fb503f4",
    "message": "Add support for BytesRange in network fetcher\n\nSummary:\nNetwork fetcher for OkHttp 3 now includes the bytes range if one is defined in the image request.\n\nThis has not been implemented for the basic HttoUrlConnectionFetcher or the deprecated OkHttp 2 fetcher.\n\nReviewed By: erikandre\n\nDifferential Revision: D5120584\n\nfbshipit-source-id: e68b40c53a294a0023a24380cdb4ab766689d3b3",
    "date": "2017-06-09T00:17:35Z",
    "url": "https://github.com/facebook/fresco/commit/209c57dbfad55f52c533f5029f3c4bbb2fb503f4",
    "details": {
      "sha": "ed67e5c6bc47dd200ed287552b0ea5ccd098ce0e",
      "filename": "imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/facebook/fresco/blob/209c57dbfad55f52c533f5029f3c4bbb2fb503f4/imagepipeline-backends%2Fimagepipeline-okhttp3%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbackends%2Fokhttp3%2FOkHttpNetworkFetcher.java",
      "raw_url": "https://github.com/facebook/fresco/raw/209c57dbfad55f52c533f5029f3c4bbb2fb503f4/imagepipeline-backends%2Fimagepipeline-okhttp3%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbackends%2Fokhttp3%2FOkHttpNetworkFetcher.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-backends%2Fimagepipeline-okhttp3%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbackends%2Fokhttp3%2FOkHttpNetworkFetcher.java?ref=209c57dbfad55f52c533f5029f3c4bbb2fb503f4",
      "patch": "@@ -13,6 +13,7 @@\n import android.os.Looper;\n import android.os.SystemClock;\n import com.facebook.common.logging.FLog;\n+import com.facebook.imagepipeline.common.BytesRange;\n import com.facebook.imagepipeline.image.EncodedImage;\n import com.facebook.imagepipeline.producers.BaseNetworkFetcher;\n import com.facebook.imagepipeline.producers.BaseProducerContextCallbacks;\n@@ -88,13 +89,17 @@ public void fetch(final OkHttpNetworkFetchState fetchState, final Callback callb\n     final Uri uri = fetchState.getUri();\n \n     try {\n-      Request request = new Request.Builder()\n-        .cacheControl(new CacheControl.Builder().noStore().build())\n-        .url(uri.toString())\n-        .get()\n-        .build();\n+      final Request.Builder requestBuilder = new Request.Builder()\n+          .cacheControl(new CacheControl.Builder().noStore().build())\n+          .url(uri.toString())\n+          .get();\n \n-      fetchWithRequest(fetchState, callback, request);\n+      final BytesRange bytesRange = fetchState.getContext().getImageRequest().getBytesRange();\n+      if (bytesRange != null) {\n+        requestBuilder.addHeader(\"Range\", bytesRange.toHttpRangeHeaderValue());\n+      }\n+\n+      fetchWithRequest(fetchState, callback, requestBuilder.build());\n     } catch (Exception e) {\n       // handle error while creating the request\n       callback.onFailure(e);",
      "parent_sha": "48881533b9a4b6c6ae55e5859eabecb583345b36"
    }
  },
  {
    "oid": "3c885d8056cb59f5077e17771fe0e16de57ad1df",
    "message": "Added rotation to thumbnails",
    "date": "2015-07-20T20:26:37Z",
    "url": "https://github.com/facebook/fresco/commit/3c885d8056cb59f5077e17771fe0e16de57ad1df",
    "details": {
      "sha": "c131d88ce4064005ce177c37fa20f76d24fbf8b9",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalContentUriFetchProducer.java",
      "status": "modified",
      "additions": 43,
      "deletions": 24,
      "changes": 67,
      "blob_url": "https://github.com/facebook/fresco/blob/3c885d8056cb59f5077e17771fe0e16de57ad1df/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/3c885d8056cb59f5077e17771fe0e16de57ad1df/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FLocalContentUriFetchProducer.java?ref=3c885d8056cb59f5077e17771fe0e16de57ad1df",
      "patch": "@@ -12,15 +12,18 @@\n import android.content.ContentResolver;\n import android.database.Cursor;\n import android.graphics.Rect;\n+import android.media.ExifInterface;\n import android.net.Uri;\n import android.provider.ContactsContract;\n import android.provider.MediaStore;\n \n import com.facebook.common.internal.VisibleForTesting;\n+import com.facebook.common.logging.FLog;\n import com.facebook.imagepipeline.common.ResizeOptions;\n import com.facebook.imagepipeline.image.EncodedImage;\n import com.facebook.imagepipeline.memory.PooledByteBufferFactory;\n import com.facebook.imagepipeline.request.ImageRequest;\n+import com.facebook.imageutils.JfifUtil;\n \n import java.io.File;\n import java.io.IOException;\n@@ -32,6 +35,9 @@\n  * Represents a local content Uri fetch producer.\n  */\n public class LocalContentUriFetchProducer extends LocalFetchProducer {\n+\n+  private static final Class<?> TAG = LocalContentUriFetchProducer.class;\n+\n   @VisibleForTesting static final String PRODUCER_NAME = \"LocalContentUriFetchProducer\";\n   private static final String DISPLAY_PHOTO_PATH =\n       Uri.withAppendedPath(ContactsContract.AUTHORITY_URI, \"display_photo\").getPath();\n@@ -67,19 +73,19 @@ protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOExcep\n       // If a Contact URI is provided, use the special helper to open that contact's photo.\n       return getByteBufferBackedEncodedImage(\n           ContactsContract.Contacts.openContactPhotoInputStream(mContentResolver, uri),\n-          getLength(imageRequest));\n+          EncodedImage.UNKNOWN_STREAM_SIZE);\n     }\n \n     if (isCameraUri(uri)) {\n-      final String pathname = getCameraPath(uri, imageRequest.getResizeOptions());\n-      if (pathname != null) {\n-        return getFileBackedEncodedImage(pathname, getLength(imageRequest));\n+      EncodedImage cameraImage = getCameraImage(uri, imageRequest.getResizeOptions());\n+      if (cameraImage != null) {\n+        return cameraImage;\n       }\n     }\n \n     return getByteBufferBackedEncodedImage(\n         mContentResolver.openInputStream(uri),\n-        getLength(imageRequest));\n+        EncodedImage.UNKNOWN_STREAM_SIZE);\n   }\n \n   /**\n@@ -98,7 +104,7 @@ private static boolean isCameraUri(Uri uri) {\n         uriString.startsWith(MediaStore.Images.Media.INTERNAL_CONTENT_URI.toString());\n   }\n \n-  private @Nullable String getCameraPath(Uri uri, ResizeOptions resizeOptions) {\n+  private @Nullable EncodedImage getCameraImage(Uri uri, ResizeOptions resizeOptions) {\n     Cursor cursor = mContentResolver.query(uri, PROJECTION, null, null, null);\n     if (cursor == null) {\n       return null;\n@@ -108,23 +114,29 @@ private static boolean isCameraUri(Uri uri) {\n         return null;\n       }\n       cursor.moveToFirst();\n+      final String pathname =\n+          cursor.getString(cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA));\n       if (resizeOptions != null) {\n         int imageIdColumnIndex = cursor.getColumnIndex(MediaStore.Images.Media._ID);\n-        String thumbnailUri = getThumbnailPath(resizeOptions, cursor.getInt(imageIdColumnIndex));\n-        if (thumbnailUri != null) {\n-          return thumbnailUri;\n+        EncodedImage thumbnail = getThumbnail(resizeOptions, cursor.getInt(imageIdColumnIndex));\n+        if (thumbnail != null) {\n+          thumbnail.setRotationAngle(getRotationAngle(pathname));\n+          return thumbnail;\n         }\n       }\n-      return cursor.getString(cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA));\n+      if (pathname != null) {\n+        return getFileBackedEncodedImage(pathname, getLength(pathname));\n+      }\n     } finally {\n       cursor.close();\n     }\n+    return null;\n   }\n \n-  // Gets the path of the smallest possible thumbnail that is bigger than the requested size in the\n-  // resize options or null if either the thumbnails are smaller than the requested size or there\n-  // are no stored thumbnails.\n-  private String getThumbnailPath(ResizeOptions resizeOptions, int imageId) {\n+  // Gets the smallest possible thumbnail that is bigger than the requested size in the resize\n+  // options or null if either the thumbnails are smaller than the requested size or there are no\n+  // stored thumbnails.\n+  private EncodedImage getThumbnail(ResizeOptions resizeOptions, int imageId) {\n     int thumbnailKind = getThumbnailKind(resizeOptions);\n     if (thumbnailKind == NO_THUMBNAIL) {\n       return null;\n@@ -141,10 +153,10 @@ private String getThumbnailPath(ResizeOptions resizeOptions, int imageId) {\n       }\n       thumbnailCursor.moveToFirst();\n       if (thumbnailCursor.getCount() > 0) {\n-        String thumbnailUri = thumbnailCursor.getString(\n+        final String thumbnailUri = thumbnailCursor.getString(\n             thumbnailCursor.getColumnIndex(MediaStore.Images.Thumbnails.DATA));\n         if (new File(thumbnailUri).exists()) {\n-          return thumbnailUri;\n+          return getFileBackedEncodedImage(thumbnailUri, getLength(thumbnailUri));\n         }\n       }\n     } finally {\n@@ -176,18 +188,25 @@ static boolean isThumbnailBigEnough(ResizeOptions resizeOptions, Rect thumbnailD\n         thumbnailDimensions.height() * ACCEPTABLE_REQUESTED_TO_ACTUAL_SIZE_RATIO;\n   }\n \n-  private int getLength(ImageRequest imageRequest) {\n-    Uri uri = imageRequest.getSourceUri();\n-    if (isCameraUri(uri)) {\n-      String pathname = getCameraPath(uri, imageRequest.getResizeOptions());\n-      return pathname == null ? -1 : (int) new File(pathname).length();\n-    } else {\n-      return -1;\n-    }\n+  private static int getLength(String pathname) {\n+    return pathname == null ? -1 : (int) new File(pathname).length();\n   }\n \n   @Override\n   protected String getProducerName() {\n     return PRODUCER_NAME;\n   }\n+\n+  private static int getRotationAngle(String pathname) {\n+    if (pathname != null) {\n+      try {\n+        ExifInterface exif = new ExifInterface(pathname);\n+        return JfifUtil.getAutoRotateAngleFromOrientation(exif.getAttributeInt(\n+            ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL));\n+      } catch (IOException ioe) {\n+        FLog.e(TAG, ioe, \"Unable to retrieve thumbnail rotation for %s\", pathname);\n+      }\n+    }\n+    return 0;\n+  }\n }",
      "parent_sha": "e0ece2a5b44c38cedb381eacf8c697615e464db8"
    }
  },
  {
    "oid": "374a874d6fd9e4244a2baa279bb5962dca7fa5f6",
    "message": "Fix OOM problem in JB and below",
    "date": "2015-10-19T14:26:49Z",
    "url": "https://github.com/facebook/fresco/commit/374a874d6fd9e4244a2baa279bb5962dca7fa5f6",
    "details": {
      "sha": "c79564162dceb1a2ad5554e819b1674e412b39f4",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/facebook/fresco/blob/374a874d6fd9e4244a2baa279bb5962dca7fa5f6/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/374a874d6fd9e4244a2baa279bb5962dca7fa5f6/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java?ref=374a874d6fd9e4244a2baa279bb5962dca7fa5f6",
      "patch": "@@ -362,10 +362,9 @@ public static PlatformDecoder buildPlatformDecoder(PoolFactory poolFactory) {\n       return new ArtDecoder(\n           poolFactory.getBitmapPool(),\n           poolFactory.getFlexByteArrayPoolMaxNumThreads());\n-    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n-      return new KitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());\n     } else {\n-      return new GingerbreadPurgeableDecoder();\n+      // Fix for purgeable failure in GingerbreadPurgeableDecoder\n+      return new KitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());\n     }\n   }\n ",
      "parent_sha": "2a7e863897435dc6667377f684f80ca4a325d5d9"
    }
  },
  {
    "oid": "33a800964d4b16504fde22b618d09d5043073e1c",
    "message": "Reset MAX_SIMULTANEOUS_REQUESTS to default value\n\nReviewed By: oprisnik\n\nDifferential Revision: D19283109\n\nfbshipit-source-id: d45e93584ed6aee6d40dd6dba54cac96e2003654",
    "date": "2020-01-05T00:22:15Z",
    "url": "https://github.com/facebook/fresco/commit/33a800964d4b16504fde22b618d09d5043073e1c",
    "details": {
      "sha": "834fa3041c5cf6d07921404d36d055de1231d79a",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/33a800964d4b16504fde22b618d09d5043073e1c/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/33a800964d4b16504fde22b618d09d5043073e1c/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FProducerFactory.java?ref=33a800964d4b16504fde22b618d09d5043073e1c",
      "patch": "@@ -63,7 +63,7 @@\n \n public class ProducerFactory {\n \n-  private static final int MAX_SIMULTANEOUS_REQUESTS = 900;\n+  private static final int MAX_SIMULTANEOUS_REQUESTS = 5;\n \n   // Local dependencies\n   private ContentResolver mContentResolver;",
      "parent_sha": "693410b4be7b69872d7f0b89a1559987b7e67fde"
    }
  },
  {
    "oid": "56ef62cab978a09d5c51f34a60f9fe3e3256ca40",
    "message": "Allow null URIs\n\nSummary: Fresco Vito 2 is crashing for null URIs, which we want to allow.\n\nReviewed By: defHLT\n\nDifferential Revision: D20249205\n\nfbshipit-source-id: 2f8e4a79d6aea60e3260cff3de9f6a88c7633d8e",
    "date": "2020-03-06T20:37:11Z",
    "url": "https://github.com/facebook/fresco/commit/56ef62cab978a09d5c51f34a60f9fe3e3256ca40",
    "details": {
      "sha": "dc7d1e6efe85b329359409e35d7d1c43449ebe47",
      "filename": "vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoController2Impl.java",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/facebook/fresco/blob/56ef62cab978a09d5c51f34a60f9fe3e3256ca40/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FFrescoController2Impl.java",
      "raw_url": "https://github.com/facebook/fresco/raw/56ef62cab978a09d5c51f34a60f9fe3e3256ca40/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FFrescoController2Impl.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/vito%2Fcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fcore%2FFrescoController2Impl.java?ref=56ef62cab978a09d5c51f34a60f9fe3e3256ca40",
      "patch": "@@ -10,6 +10,7 @@\n import android.graphics.drawable.Drawable;\n import com.facebook.common.references.CloseableReference;\n import com.facebook.datasource.DataSource;\n+import com.facebook.datasource.DataSources;\n import com.facebook.drawee.backends.pipeline.info.ImageOrigin;\n import com.facebook.fresco.vito.listener.ImageListener;\n import com.facebook.imagepipeline.image.CloseableImage;\n@@ -18,12 +19,16 @@\n \n public class FrescoController2Impl implements DrawableDataSubscriber, FrescoController2 {\n \n+  private static final NullPointerException NO_REQUEST_EXCEPTION =\n+      new NullPointerException(\"No image request was specified!\");\n+\n   private final Hierarcher mHierarcher;\n   private final Executor mLightweightBackgroundThreadExecutor;\n   private final Executor mUiThreadExecutor;\n   private final VitoImagePipeline mImagePipeline;\n   private final @Nullable VitoImageRequestListener mGlobalImageListener;\n \n+\n   public FrescoController2Impl(\n       Hierarcher hierarcher,\n       Executor lightweightBackgroundThreadExecutor,\n@@ -102,9 +107,17 @@ public void run() {\n             if (imageId != frescoDrawable.getImageId()) {\n               return; // We're trying to load a different image -> ignore\n             }\n-            DataSource<CloseableReference<CloseableImage>> dataSource =\n-                mImagePipeline.fetchDecodedImage(\n-                    imageRequest, callerContext, frescoDrawable.getImageOriginListener(), imageId);\n+            DataSource<CloseableReference<CloseableImage>> dataSource;\n+            if (imageRequest.imageRequest == null) {\n+              dataSource = DataSources.immediateFailedDataSource(NO_REQUEST_EXCEPTION);\n+            } else {\n+              dataSource =\n+                  mImagePipeline.fetchDecodedImage(\n+                      imageRequest,\n+                      callerContext,\n+                      frescoDrawable.getImageOriginListener(),\n+                      imageId);\n+            }\n             frescoDrawable.setDataSource(dataSource);\n             dataSource.subscribe(frescoDrawable, mUiThreadExecutor);\n           }",
      "parent_sha": "ed72f7f70d2122913ffa28f92a37d370a37685bc"
    }
  },
  {
    "oid": "efa6eae91200fe07723d40d456bb505c529e4994",
    "message": "Fix removeImageOriginListener method. (#2387)\n\nSummary:\nThanks for submitting a PR! Please read these instructions carefully:\n\n- [x] Explain the **motivation** for making this change.\n- [x] Provide a **test plan** demonstrating that the code is solid.\n- [x] Target the `master` branch\n- [x] Match the **code formatting** of the rest of the codebase.\n\n## Motivation (required)\n\nCan't remove ImageOriginListener correctly at PipelineDraweeController.\n\n## Test Plan (required)\n\nA good test plan has the exact commands you ran and their output, provides screenshots or videos if the pull request changes UI or updates the website. See [What is a Test Plan?][1] to learn more.\n\nIf you have added code that should be tested, add tests.\n\n## Next Steps\n\nSign the [CLA][2], if you haven't already.\n\nSmall pull requests are much easier to review and more likely to get merged. Make sure the PR does only one thing, otherwise please split it.\n\nMake sure all **tests pass** on [Circle CI][4]. PRs that break tests are unlikely to be merged.\n\nFor more info, see the [Contributing guide][4].\n\n[1]: https://medium.com/martinkonicek/what-is-a-test-plan-8bfc840ec171#.y9lcuqqi9\n[2]: https://code.facebook.com/cla\n[3]: http://circleci.com/gh/facebook/fresco\n[4]: https://github.com/facebook/fresco/blob/master/CONTRIBUTING.md\nPull Request resolved: https://github.com/facebook/fresco/pull/2387\n\nTest Plan:\nImported from GitHub, without a `Test Plan:` line.\n\n`abgs removeImageOriginListener` -- this method was not used in prod previously\n\nReviewed By: erikandre, AurelC2G\n\nDifferential Revision: D18744342\n\nPulled By: defHLT\n\nfbshipit-source-id: b0840f21f1ac3e44f2ddf1f9cad397c9eed7b03d",
    "date": "2019-11-30T13:14:41Z",
    "url": "https://github.com/facebook/fresco/commit/efa6eae91200fe07723d40d456bb505c529e4994",
    "details": {
      "sha": "46d86da7c1d6c4861c6e5d02360380c012cad7e1",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/facebook/fresco/blob/efa6eae91200fe07723d40d456bb505c529e4994/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java",
      "raw_url": "https://github.com/facebook/fresco/raw/efa6eae91200fe07723d40d456bb505c529e4994/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java?ref=efa6eae91200fe07723d40d456bb505c529e4994",
      "patch": "@@ -198,12 +198,11 @@ public synchronized void addImageOriginListener(ImageOriginListener imageOriginL\n   public synchronized void removeImageOriginListener(ImageOriginListener imageOriginListener) {\n     if (mImageOriginListener instanceof ForwardingImageOriginListener) {\n       ((ForwardingImageOriginListener) mImageOriginListener)\n-          .removeImageOriginListener(imageOriginListener);\n-    } else if (mImageOriginListener != null) {\n-      mImageOriginListener =\n-          new ForwardingImageOriginListener(mImageOriginListener, imageOriginListener);\n-    } else {\n-      mImageOriginListener = imageOriginListener;\n+              .removeImageOriginListener(imageOriginListener);\n+      return;\n+    }\n+    if (mImageOriginListener == imageOriginListener) {\n+      mImageOriginListener = null;\n     }\n   }\n ",
      "parent_sha": "64737bbe4cba8f05a8dae3d9a8f83b107275313b"
    }
  },
  {
    "oid": "52f68413c8a307e5390d8d0e82f149adeb59ca46",
    "message": "Fixed wrong Bitmap size (in bytes) computation for < Honeycomb\n\nSummary:\nWe used `getWidth()` instead of `getHeight()` for size calculations < Honeycomb.\n\nNow, we're doing the same calculations as AOSP for >= Honeycomb, see https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/graphics/java/android/graphics/Bitmap.java#1258\n\nReviewed By: lambdapioneer\n\nDifferential Revision: D4265201\n\nfbshipit-source-id: 93ab22e81acc8bbc3c4d023bc23d129a8ae276ab",
    "date": "2016-12-02T12:30:00Z",
    "url": "https://github.com/facebook/fresco/commit/52f68413c8a307e5390d8d0e82f149adeb59ca46",
    "details": {
      "sha": "7a3cb4e5e15ac4241d97b1e7aeca29d681534136",
      "filename": "imagepipeline-base/src/main/java/com/facebook/imageutils/BitmapUtil.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/facebook/fresco/blob/52f68413c8a307e5390d8d0e82f149adeb59ca46/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimageutils%2FBitmapUtil.java",
      "raw_url": "https://github.com/facebook/fresco/raw/52f68413c8a307e5390d8d0e82f149adeb59ca46/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimageutils%2FBitmapUtil.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimageutils%2FBitmapUtil.java?ref=52f68413c8a307e5390d8d0e82f149adeb59ca46",
      "patch": "@@ -67,8 +67,8 @@ public static int getSizeInBytes(@Nullable Bitmap bitmap) {\n       return bitmap.getByteCount();\n     }\n \n-    // Estimate for earlier platforms.\n-    return bitmap.getWidth() * bitmap.getRowBytes();\n+    // Estimate for earlier platforms. Same code as getByteCount() for Honeycomb.\n+    return bitmap.getRowBytes() * bitmap.getHeight();\n   }\n \n   /**",
      "parent_sha": "5975e28446c693ea460c94883c9c00a6bcd9c4c0"
    }
  },
  {
    "oid": "0c781d6689391d8e03ea2c063f11ed20d9af0283",
    "message": "BaseBitmapReferenceDataSubscriber: Clone reference instead of detaching\n\nSummary: For data source subscribers, Fresco passes down a `CloseableReference<CloseableImage>`. Detaching the reference for the closeable image in case it is a `CloseableStaticBitmap` will detach the bitmap from the cached image since the same `CloseableStaticBitmap` is returned every time instead of a cloned one. This means that we must clone the underlying bitmap reference instead of detach. Otherwise, subsequent calls will fail.\n\nReviewed By: defHLT\n\nDifferential Revision: D9786558\n\nfbshipit-source-id: 0c07bc0c413ba438113f10ad01bd0baa217f082e",
    "date": "2018-09-12T12:33:05Z",
    "url": "https://github.com/facebook/fresco/commit/0c781d6689391d8e03ea2c063f11ed20d9af0283",
    "details": {
      "sha": "f718ebfd97d62d11c79a552bd2869129404242eb",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/BaseBitmapReferenceDataSubscriber.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/0c781d6689391d8e03ea2c063f11ed20d9af0283/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdatasource%2FBaseBitmapReferenceDataSubscriber.java",
      "raw_url": "https://github.com/facebook/fresco/raw/0c781d6689391d8e03ea2c063f11ed20d9af0283/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdatasource%2FBaseBitmapReferenceDataSubscriber.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdatasource%2FBaseBitmapReferenceDataSubscriber.java?ref=0c781d6689391d8e03ea2c063f11ed20d9af0283",
      "patch": "@@ -55,7 +55,7 @@ public void onNewResultImpl(DataSource<CloseableReference<CloseableImage>> dataS\n     CloseableReference<Bitmap> bitmapReference = null;\n     if (closeableImageRef != null && closeableImageRef.get() instanceof CloseableStaticBitmap) {\n       bitmapReference =\n-          ((CloseableStaticBitmap) closeableImageRef.get()).convertToBitmapReference();\n+          ((CloseableStaticBitmap) closeableImageRef.get()).cloneUnderlyingBitmapReference();\n     }\n \n     try {",
      "parent_sha": "97daf1ec21f5c0fa690e2888e07647c639ef2287"
    }
  },
  {
    "oid": "742735e476593958e37ea0e95d72249369696201",
    "message": "Make controller listener protected in AbstractDraweeController\n\nReviewed By: oprisnik\n\nDifferential Revision: D13844937\n\nfbshipit-source-id: 4630ca7f74af8e203c000982f0920e19e19d366f",
    "date": "2019-01-31T19:26:29Z",
    "url": "https://github.com/facebook/fresco/commit/742735e476593958e37ea0e95d72249369696201",
    "details": {
      "sha": "f38519bfe84c02f48b37e5ca55b9625e68da3554",
      "filename": "drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/742735e476593958e37ea0e95d72249369696201/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeController.java",
      "raw_url": "https://github.com/facebook/fresco/raw/742735e476593958e37ea0e95d72249369696201/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeController.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeController.java?ref=742735e476593958e37ea0e95d72249369696201",
      "patch": "@@ -76,8 +76,8 @@ public static <INFO> InternalForwardingListener<INFO> createInternal(\n   // Optional components\n   private @Nullable RetryManager mRetryManager;\n   private @Nullable GestureDetector mGestureDetector;\n-  private @Nullable ControllerListener<INFO> mControllerListener;\n   private @Nullable ControllerViewportVisibilityListener mControllerViewportVisibilityListener;\n+  protected @Nullable ControllerListener<INFO> mControllerListener;\n \n   // Hierarchy\n   private @Nullable SettableDraweeHierarchy mSettableDraweeHierarchy;",
      "parent_sha": "9b070bee949828ed635fcf2f89a146efbbcdd781"
    }
  },
  {
    "oid": "a6a6c30be28320902071318d19c12949e91ed156",
    "message": "Add support for glb/gltf-binary file/mime type to MediaUtils\n\nDifferential Revision: D6514121\n\nfbshipit-source-id: 4c684d0a26ea0103b626e2afa9dd8e83f0f24412",
    "date": "2017-12-15T20:03:09Z",
    "url": "https://github.com/facebook/fresco/commit/a6a6c30be28320902071318d19c12949e91ed156",
    "details": {
      "sha": "64771784368295160b82b0dadfbf348691cec458",
      "filename": "fbcore/src/main/java/com/facebook/common/media/MediaUtils.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/facebook/fresco/blob/a6a6c30be28320902071318d19c12949e91ed156/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmedia%2FMediaUtils.java",
      "raw_url": "https://github.com/facebook/fresco/raw/a6a6c30be28320902071318d19c12949e91ed156/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmedia%2FMediaUtils.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Fmedia%2FMediaUtils.java?ref=a6a6c30be28320902071318d19c12949e91ed156",
      "patch": "@@ -22,7 +22,7 @@ public class MediaUtils {\n   // Additional mime types that we know to be a particular media type but which may not be\n   // supported natively on the device.\n   public static final Map<String, String> ADDITIONAL_ALLOWED_MIME_TYPES =\n-      ImmutableMap.of(\"mkv\", \"video/x-matroska\");\n+      ImmutableMap.of(\"mkv\", \"video/x-matroska\", \"glb\", \"model/gltf-binary\");\n \n   public static boolean isPhoto(@Nullable String mimeType) {\n     return mimeType != null && mimeType.startsWith(\"image/\");\n@@ -32,6 +32,10 @@ public static boolean isVideo(@Nullable String mimeType) {\n     return mimeType != null && mimeType.startsWith(\"video/\");\n   }\n \n+  public static boolean isThreeD(@Nullable String mimeType) {\n+    return mimeType != null && mimeType.equals(\"model/gltf-binary\");\n+  }\n+\n   public @Nullable static String extractMime(String path) {\n     String extension = extractExtension(path);\n     if (extension == null) {",
      "parent_sha": "eb728f4dba179975153a27317999af85a146bc2a"
    }
  },
  {
    "oid": "7abfc021b3bc45c38fb35dc6101cf8d53352b384",
    "message": "Break apart register method to allow access to found ListenableActivity\n\nReviewed By: denley\n\nDifferential Revision: D9952301\n\nfbshipit-source-id: 98aafe4d1b62de39acf127a7b86dbb15fa445418",
    "date": "2018-09-24T20:03:02Z",
    "url": "https://github.com/facebook/fresco/commit/7abfc021b3bc45c38fb35dc6101cf8d53352b384",
    "details": {
      "sha": "6d5a5d427b69bc6512a0d2d2f6dce30c769a9f7d",
      "filename": "fbcore/src/main/java/com/facebook/common/activitylistener/ActivityListenerManager.java",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/facebook/fresco/blob/7abfc021b3bc45c38fb35dc6101cf8d53352b384/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Factivitylistener%2FActivityListenerManager.java",
      "raw_url": "https://github.com/facebook/fresco/raw/7abfc021b3bc45c38fb35dc6101cf8d53352b384/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Factivitylistener%2FActivityListenerManager.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/fbcore%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fcommon%2Factivitylistener%2FActivityListenerManager.java?ref=7abfc021b3bc45c38fb35dc6101cf8d53352b384",
      "patch": "@@ -12,11 +12,12 @@\n import android.content.ContextWrapper;\n import com.facebook.common.internal.Preconditions;\n import java.lang.ref.WeakReference;\n+import javax.annotation.Nullable;\n \n /**\n  * Registers ActivityListener with ActivityListener.\n  *\n- * <p> A WeakReference is used to wrap an ActivityVisibilityListener. When it is nullified\n+ * <p>A WeakReference is used to wrap an ActivityVisibilityListener. When it is nullified\n  * ActivityListener is automatically removed from the listened ListenableActivity.\n  */\n public class ActivityListenerManager {\n@@ -25,17 +26,22 @@ public class ActivityListenerManager {\n    * If given context is an instance of ListenableActivity then creates new instance of\n    * WeakReferenceActivityListenerAdapter and adds it to activity's listeners\n    */\n-  public static void register(\n-      ActivityListener activityListener,\n-      Context context) {\n+  public static void register(ActivityListener activityListener, Context context) {\n+    ListenableActivity activity = getListenableActivity(context);\n+    if (activity != null) {\n+      Listener listener = new Listener(activityListener);\n+      activity.addActivityListener(listener);\n+    }\n+  }\n+\n+  public static @Nullable ListenableActivity getListenableActivity(Context context) {\n     if (!(context instanceof ListenableActivity) && context instanceof ContextWrapper) {\n       context = ((ContextWrapper) context).getBaseContext();\n     }\n     if (context instanceof ListenableActivity) {\n-      ListenableActivity listenableActivity = (ListenableActivity) context;\n-      Listener listener = new Listener(activityListener);\n-      listenableActivity.addActivityListener(listener);\n+      return (ListenableActivity) context;\n     }\n+    return null;\n   }\n \n   private static class Listener extends BaseActivityListener {",
      "parent_sha": "e9189e17981fe16c56b6fa51c2a931abcd6762f9"
    }
  },
  {
    "oid": "f8316d7333d0553d6242306baafc799120d43e5d",
    "message": "Zero out the pixels in a generated bitmap before returning.",
    "date": "2015-05-14T19:49:08Z",
    "url": "https://github.com/facebook/fresco/commit/f8316d7333d0553d6242306baafc799120d43e5d",
    "details": {
      "sha": "6cb5b1cbf22ee0870a3610e40195f96559de155c",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/bitmaps/DalvikBitmapFactory.java",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/facebook/fresco/blob/f8316d7333d0553d6242306baafc799120d43e5d/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbitmaps%2FDalvikBitmapFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/f8316d7333d0553d6242306baafc799120d43e5d/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbitmaps%2FDalvikBitmapFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fbitmaps%2FDalvikBitmapFactory.java?ref=f8316d7333d0553d6242306baafc799120d43e5d",
      "patch": "@@ -9,12 +9,11 @@\n \n package com.facebook.imagepipeline.bitmaps;\n \n-import java.util.List;\n-\n import android.annotation.SuppressLint;\n import android.annotation.TargetApi;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n+import android.graphics.Color;\n import android.os.Build;\n \n import com.facebook.common.internal.Lists;\n@@ -29,6 +28,8 @@\n import com.facebook.imagepipeline.nativecode.Bitmaps;\n import com.facebook.imageutils.JfifUtil;\n \n+import java.util.List;\n+\n /**\n  * Bitmap factory for Dalvik VM (Honeycomb to KitKat).\n  */\n@@ -70,7 +71,15 @@ public void release(Bitmap value) {\n   CloseableReference<Bitmap> createBitmap(short width, short height) {\n     CloseableReference<PooledByteBuffer> jpgRef = mJpegGenerator.generate(width, height);\n     try {\n-      return decodeJPEGFromPooledByteBuffer(jpgRef, jpgRef.get().size());\n+      CloseableReference<Bitmap> bitmapRef =\n+          decodeJPEGFromPooledByteBuffer(jpgRef, jpgRef.get().size());\n+      Bitmap underlying = bitmapRef.get();\n+      for (int x = 0; x < underlying.getWidth(); x++) {\n+        for (int y = 0; y < underlying.getHeight(); y++) {\n+          underlying.setPixel(x, y, Color.TRANSPARENT);\n+        }\n+      }\n+      return bitmapRef;\n     } finally {\n       jpgRef.close();\n     }",
      "parent_sha": "f0fa1e731035e3cd3852b75a087210f0ca35449b"
    }
  },
  {
    "oid": "ce7b83fb42127a38b1402e1d1e484167b1827300",
    "message": "Added option to reset the ImagePipeline when the ImagePipelineFactory changes\n\nDifferential Revision: D72724954\n\nfbshipit-source-id: 889e8c9bf7a4f847e50464e21e85e9cdb1a541d8",
    "date": "2025-04-09T22:32:50Z",
    "url": "https://github.com/facebook/fresco/commit/ce7b83fb42127a38b1402e1d1e484167b1827300",
    "details": {
      "sha": "7f7822e7046ac005951ceb9a76305065ad36add6",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/facebook/fresco/blob/ce7b83fb42127a38b1402e1d1e484167b1827300/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "raw_url": "https://github.com/facebook/fresco/raw/ce7b83fb42127a38b1402e1d1e484167b1827300/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineFactory.java?ref=ce7b83fb42127a38b1402e1d1e484167b1827300",
      "patch": "@@ -62,9 +62,10 @@ public class ImagePipelineFactory {\n   private static final Class<?> TAG = ImagePipelineFactory.class;\n \n   private static @Nullable ImagePipelineFactory sInstance = null;\n-  private static ImagePipeline sImagePipeline;\n+  private static @Nullable ImagePipeline sImagePipeline;\n   private final ThreadHandoffProducerQueue mThreadHandoffProducerQueue;\n   private static boolean sForceSingleInstance;\n+  private static boolean sResetImagePipelineWhenFactoryChanges;\n \n   /** Gets the instance of {@link ImagePipelineFactory}. */\n   public static ImagePipelineFactory getInstance() {\n@@ -106,6 +107,9 @@ public static synchronized void initialize(ImagePipelineConfigInterface imagePip\n     }\n \n     sInstance = new ImagePipelineFactory(imagePipelineConfig);\n+    if (sResetImagePipelineWhenFactoryChanges) {\n+      sImagePipeline = null;\n+    }\n   }\n \n   public static synchronized void forceSingleInstance() {\n@@ -116,6 +120,11 @@ public static synchronized void forceSingleInstance(boolean forceSingleInstance)\n     sForceSingleInstance = forceSingleInstance;\n   }\n \n+  public static synchronized void resetImagePipelineWhenFactoryChanges(\n+      boolean resetImagePipelineWhenFactoryChanges) {\n+    sResetImagePipelineWhenFactoryChanges = resetImagePipelineWhenFactoryChanges;\n+  }\n+\n   /** Checks if {@link ImagePipelineFactory} has already been initialized */\n   public static synchronized boolean hasBeenInitialized() {\n     return sInstance != null;",
      "parent_sha": "9269d9afb9b03240581433b56a24306d322a674f"
    }
  },
  {
    "oid": "60c53f3c6900c851ea8cee69de7ba8022085b43d",
    "message": "Daily `arc lint --take GOOGLEJAVAFORMAT`\n\nReviewed By: zertosh\n\nDifferential Revision: D32663918\n\nfbshipit-source-id: 53b40d8488ec12793803c82b5e5a307718c04ea7",
    "date": "2021-11-25T12:26:13Z",
    "url": "https://github.com/facebook/fresco/commit/60c53f3c6900c851ea8cee69de7ba8022085b43d",
    "details": {
      "sha": "a3b2b8a1fd3e72370612fb6b3b9d402d7d75793e",
      "filename": "vito/view/src/main/java/com/facebook/fresco/vito/view/impl/VitoViewImpl2.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/facebook/fresco/blob/60c53f3c6900c851ea8cee69de7ba8022085b43d/vito%2Fview%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fview%2Fimpl%2FVitoViewImpl2.java",
      "raw_url": "https://github.com/facebook/fresco/raw/60c53f3c6900c851ea8cee69de7ba8022085b43d/vito%2Fview%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fview%2Fimpl%2FVitoViewImpl2.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/vito%2Fview%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Fview%2Fimpl%2FVitoViewImpl2.java?ref=60c53f3c6900c851ea8cee69de7ba8022085b43d",
      "patch": "@@ -81,7 +81,7 @@ public static void show(\n     frescoDrawable.setCallerContext(callerContext);\n     frescoDrawable.setImageListener(imageListener);\n     if (sUseSimpleFetchLogic.get()) {\n-        frescoDrawable.getImagePerfListener().onImageMount(frescoDrawable);\n+      frescoDrawable.getImagePerfListener().onImageMount(frescoDrawable);\n       maybeFetchImage(frescoDrawable);\n     } else {\n       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {",
      "parent_sha": "7c43ac0761174459d3a340e5a9be598a3cbf38ce"
    }
  },
  {
    "oid": "c5863631a58efe79f7161629d051f5724329e4fa",
    "message": "Set default value of SuppressBitmapPrefetching\n\nReviewed By: oprisnik\n\nDifferential Revision: D16119686\n\nfbshipit-source-id: b813264c1910bb937f6d1addf20c7372217347ab",
    "date": "2019-07-24T18:13:38Z",
    "url": "https://github.com/facebook/fresco/commit/c5863631a58efe79f7161629d051f5724329e4fa",
    "details": {
      "sha": "584c886e9d6d3135e4279fd5abe74ed77725b0bb",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineExperiments.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/c5863631a58efe79f7161629d051f5724329e4fa/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineExperiments.java",
      "raw_url": "https://github.com/facebook/fresco/raw/c5863631a58efe79f7161629d051f5724329e4fa/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineExperiments.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcore%2FImagePipelineExperiments.java?ref=c5863631a58efe79f7161629d051f5724329e4fa",
      "patch": "@@ -10,6 +10,7 @@\n import android.graphics.Bitmap;\n import com.facebook.cache.common.CacheKey;\n import com.facebook.common.internal.Supplier;\n+import com.facebook.common.internal.Suppliers;\n import com.facebook.common.memory.ByteArrayPool;\n import com.facebook.common.memory.PooledByteBuffer;\n import com.facebook.common.memory.PooledByteBufferFactory;\n@@ -173,7 +174,7 @@ public static class Builder {\n     public boolean mGingerbreadDecoderEnabled;\n     public boolean mDownscaleFrameToDrawableDimensions;\n     public int mBitmapCloseableRefType;\n-    public Supplier<Boolean> mSuppressBitmapPrefetchingSupplier;\n+    public Supplier<Boolean> mSuppressBitmapPrefetchingSupplier = Suppliers.of(false);\n \n     public Builder(ImagePipelineConfig.Builder configBuilder) {\n       mConfigBuilder = configBuilder;",
      "parent_sha": "e521032c2abf510611f2edfa11972d77862f6234"
    }
  },
  {
    "oid": "b56af45ba39766622d96a847fe6e7f70f083a785",
    "message": "Switch used\n\nReviewed By: aagnes\n\nDifferential Revision: D3503299\n\nfbshipit-source-id: f7d1ae4ed9906381b03a9727e88d6df47da44357",
    "date": "2016-06-30T15:59:58Z",
    "url": "https://github.com/facebook/fresco/commit/b56af45ba39766622d96a847fe6e7f70f083a785",
    "details": {
      "sha": "b7984556be67d823fc1f81d35794391d88ec2d4a",
      "filename": "samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/SettingsFragment.java",
      "status": "modified",
      "additions": 31,
      "deletions": 20,
      "changes": 51,
      "blob_url": "https://github.com/facebook/fresco/blob/b56af45ba39766622d96a847fe6e7f70f083a785/samples%2Fscrollperf%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fscrollperf%2Ffragments%2FSettingsFragment.java",
      "raw_url": "https://github.com/facebook/fresco/raw/b56af45ba39766622d96a847fe6e7f70f083a785/samples%2Fscrollperf%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fscrollperf%2Ffragments%2FSettingsFragment.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/samples%2Fscrollperf%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fscrollperf%2Ffragments%2FSettingsFragment.java?ref=b56af45ba39766622d96a847fe6e7f70f083a785",
      "patch": "@@ -66,26 +66,37 @@ public void onDestroy() {\n   @Override\n   public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\n     Preference preference = findPreference(key);\n-    if (Const.DATA_SOURCE_KEY.equals(key)) {\n-      updateDataSourceSummary(preference);\n-    } else if (Const.RECYCLER_LAYOUT_KEY.equals(key)) {\n-      updateRecyclerLayoutSummary(preference);\n-    } else if (Const.INFINITE_DATA_SOURCE_KEY.equals(key)) {\n-      updateInfiniteDataSourceSummary(preference);\n-    } else if (Const.DISTINCT_DATA_SOURCE_KEY.equals(key)) {\n-      updateDistinctDataSourceSummary(preference);\n-    } else if (Const.REUSE_OLD_CONTROLLER_KEY.equals(key)) {\n-      updateReuseOldControllerSummary(preference);\n-    } else if (Const.ROUNDED_CORNERS_KEY.equals(key)) {\n-      updateRoundedCornersSummary(preference);\n-    } else if (Const.ROUNDED_AS_CIRCLE_KEY.equals(key)) {\n-      updateRoundedAsCircleSummary(preference);\n-    } else if (Const.USE_POSTPROCESSOR_KEY.equals(key)) {\n-      updateUsePostprocessorSummary(preference);\n-    } else if (Const.POSTPROCESSOR_TYPE_KEY.equals(key)) {\n-      updateWhatPostprocessorSummary(preference);\n-    } else if (Const.SCALE_TYPE_KEY.equals(key)) {\n-      updateWhatScaleTypeSummary(preference);\n+    switch (key) {\n+      case Const.DATA_SOURCE_KEY:\n+        updateDataSourceSummary(preference);\n+        break;\n+      case Const.RECYCLER_LAYOUT_KEY:\n+        updateRecyclerLayoutSummary(preference);\n+        break;\n+      case Const.INFINITE_DATA_SOURCE_KEY:\n+        updateInfiniteDataSourceSummary(preference);\n+        break;\n+      case Const.DISTINCT_DATA_SOURCE_KEY:\n+        updateDistinctDataSourceSummary(preference);\n+        break;\n+      case Const.REUSE_OLD_CONTROLLER_KEY:\n+        updateReuseOldControllerSummary(preference);\n+        break;\n+      case Const.ROUNDED_CORNERS_KEY:\n+        updateRoundedCornersSummary(preference);\n+        break;\n+      case Const.ROUNDED_AS_CIRCLE_KEY:\n+        updateRoundedAsCircleSummary(preference);\n+        break;\n+      case Const.USE_POSTPROCESSOR_KEY:\n+        updateUsePostprocessorSummary(preference);\n+        break;\n+      case Const.POSTPROCESSOR_TYPE_KEY:\n+        updateWhatPostprocessorSummary(preference);\n+        break;\n+      case Const.SCALE_TYPE_KEY:\n+        updateWhatScaleTypeSummary(preference);\n+        break;\n     }\n   }\n ",
      "parent_sha": "85da0cfb6fca562ba41eb37395e446210c740ca9"
    }
  },
  {
    "oid": "a0c9a46539144c1fb1b7f957c5d978b5b49ab396",
    "message": "Fix NPE in FlipperImageTracker\n\nReviewed By: oprisnik\n\nDifferential Revision: D21323423\n\nfbshipit-source-id: 31175d6bdb6d2b9c0c4fce63cb7d3d8cdff0cdc0",
    "date": "2020-07-27T13:40:58Z",
    "url": "https://github.com/facebook/fresco/commit/a0c9a46539144c1fb1b7f957c5d978b5b49ab396",
    "details": {
      "sha": "a93fae61b606121fbdc025871aaf9396a9f7873a",
      "filename": "tools/flipper/src/main/java/com/facebook/imagepipeline/debug/FlipperImageTracker.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/facebook/fresco/blob/a0c9a46539144c1fb1b7f957c5d978b5b49ab396/tools%2Fflipper%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdebug%2FFlipperImageTracker.java",
      "raw_url": "https://github.com/facebook/fresco/raw/a0c9a46539144c1fb1b7f957c5d978b5b49ab396/tools%2Fflipper%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdebug%2FFlipperImageTracker.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/tools%2Fflipper%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdebug%2FFlipperImageTracker.java?ref=a0c9a46539144c1fb1b7f957c5d978b5b49ab396",
      "patch": "@@ -129,11 +129,9 @@ public synchronized void onImageLoadStatusUpdated(\n     if (imagePerfData == null || imagePerfData.getImageRequest() == null) {\n       return;\n     }\n-\n-    if (mImageRequestDebugDataMap.containsKey(imagePerfData.getImageRequest())) {\n-      mImageRequestDebugDataMap\n-          .get(imagePerfData.getImageRequest())\n-          .setImagePerfData(imagePerfData);\n+    ImageDebugData debugData = mImageRequestDebugDataMap.get(imagePerfData.getImageRequest());\n+    if (debugData != null) {\n+      debugData.setImagePerfData(imagePerfData);\n     } else {\n       ImageDebugData imageDebugData = new ImageDebugData(imagePerfData.getImageRequest());\n       imageDebugData.setImagePerfData(imagePerfData);",
      "parent_sha": "c7498744fe19a8bb5050022d51bdae9d0e71abd2"
    }
  },
  {
    "oid": "3ac771762dfcd521a53dbf566a1968b4410c9af2",
    "message": "ImageRequestBuilder: Enable chaining for disableDiskCache()\n\nReviewed By: kirwan\n\nDifferential Revision: D3378811\n\nfbshipit-source-id: 51611bbd46b5664fc5055e1653404a7ac61b1ef1",
    "date": "2016-06-02T17:14:58Z",
    "url": "https://github.com/facebook/fresco/commit/3ac771762dfcd521a53dbf566a1968b4410c9af2",
    "details": {
      "sha": "8347083caf825a6126f6b7e75d94fb5a6c4e1ee1",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/3ac771762dfcd521a53dbf566a1968b4410c9af2/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FImageRequestBuilder.java",
      "raw_url": "https://github.com/facebook/fresco/raw/3ac771762dfcd521a53dbf566a1968b4410c9af2/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FImageRequestBuilder.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FImageRequestBuilder.java?ref=3ac771762dfcd521a53dbf566a1968b4410c9af2",
      "patch": "@@ -213,8 +213,9 @@ public boolean isLocalThumbnailPreviewsEnabled() {\n   }\n \n   /** Disables disk cache for this request, regardless where the image will come from. */\n-  public void disableDiskCache() {\n+  public ImageRequestBuilder disableDiskCache() {\n     mDiskCacheEnabled = false;\n+    return this;\n   }\n \n   /** Returns whether the use of the disk cache is enabled, which is partly dependent on the URI. */",
      "parent_sha": "d4c4d8848b256f91d0698ff9550e3610292d82d3"
    }
  },
  {
    "oid": "a0d78c9cb8cbb9b17ffc053c7d7313ff96ac7e9f",
    "message": "Fixed HEIF format detector\n\nSummary: The minimum header length (HEIF_HEADER_LENGTH) was 8 when in fact the HEIF header requires at least 12 bytes (4 for the size of the first box, 4 for the box type (\"ftyp\") and 4 for the major brand.\n\nReviewed By: erikandre, oprisnik\n\nDifferential Revision: D17626731\n\nfbshipit-source-id: 04237bba60d98784960b651d6db4d0d710ce6a65",
    "date": "2019-09-27T15:43:13Z",
    "url": "https://github.com/facebook/fresco/commit/a0d78c9cb8cbb9b17ffc053c7d7313ff96ac7e9f",
    "details": {
      "sha": "dfc4784b566c6ebbb8a1620d9b432d55e08ea15b",
      "filename": "imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormatChecker.java",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/facebook/fresco/blob/a0d78c9cb8cbb9b17ffc053c7d7313ff96ac7e9f/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimageformat%2FDefaultImageFormatChecker.java",
      "raw_url": "https://github.com/facebook/fresco/raw/a0d78c9cb8cbb9b17ffc053c7d7313ff96ac7e9f/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimageformat%2FDefaultImageFormatChecker.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline-base%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimageformat%2FDefaultImageFormatChecker.java?ref=a0d78c9cb8cbb9b17ffc053c7d7313ff96ac7e9f",
      "patch": "@@ -238,13 +238,17 @@ private static boolean isIcoHeader(final byte[] imageHeaderBytes, final int head\n    * byte of the header gives us the size of the box, then we have \"ftyp\" followed by the exact\n    * image format which can be one of: heic, heix, hevc, hevx.\n    */\n-  private static final String HEIF_HEADER_PREFIX = \"ftyp\";\n-\n-  private static final String[] HEIF_HEADER_SUFFIXES = {\n-    \"heic\", \"heix\", \"hevc\", \"hevx\", \"mif1\", \"msf1\"\n+  private static final byte[] HEIF_HEADER_PREFIX = ImageFormatCheckerUtils.asciiBytes(\"ftyp\");\n+\n+  private static final byte[][] HEIF_HEADER_SUFFIXES = {\n+    ImageFormatCheckerUtils.asciiBytes(\"heic\"),\n+    ImageFormatCheckerUtils.asciiBytes(\"heix\"),\n+    ImageFormatCheckerUtils.asciiBytes(\"hevc\"),\n+    ImageFormatCheckerUtils.asciiBytes(\"hevx\"),\n+    ImageFormatCheckerUtils.asciiBytes(\"mif1\"),\n+    ImageFormatCheckerUtils.asciiBytes(\"msf1\")\n   };\n-  private static final int HEIF_HEADER_LENGTH =\n-      ImageFormatCheckerUtils.asciiBytes(HEIF_HEADER_PREFIX + HEIF_HEADER_SUFFIXES[0]).length;\n+  private static final int HEIF_HEADER_LENGTH = 12;\n \n   /**\n    * Checks if first headerSize bytes of imageHeaderBytes constitute a valid header for a HEIF\n@@ -265,14 +269,12 @@ private static boolean isHeifHeader(final byte[] imageHeaderBytes, final int hea\n       return false;\n     }\n \n-    for (final String heifFtype : HEIF_HEADER_SUFFIXES) {\n-      final int indexOfHeaderPattern =\n-          ImageFormatCheckerUtils.indexOfPattern(\n-              imageHeaderBytes,\n-              imageHeaderBytes.length,\n-              ImageFormatCheckerUtils.asciiBytes(HEIF_HEADER_PREFIX + heifFtype),\n-              HEIF_HEADER_LENGTH);\n-      if (indexOfHeaderPattern > -1) {\n+    if (!ImageFormatCheckerUtils.hasPatternAt(imageHeaderBytes, HEIF_HEADER_PREFIX, 4)) {\n+      return false;\n+    }\n+\n+    for (final byte[] heifFtype : HEIF_HEADER_SUFFIXES) {\n+      if (ImageFormatCheckerUtils.hasPatternAt(imageHeaderBytes, heifFtype, 8)) {\n         return true;\n       }\n     }",
      "parent_sha": "cd33154691ca1f577bab6f39b132ce09669d1192"
    }
  },
  {
    "oid": "f5122f76d044b477b8ec5b4aed7b912ec66e1bd2",
    "message": "Allow multiple image origin listeners\n\nSummary: We should not limit image origin listeners to a single listener.\n\nReviewed By: foghina\n\nDifferential Revision: D7860927\n\nfbshipit-source-id: 7cf9d92983f61bbe778a75c84a80aebe0450803a",
    "date": "2018-05-08T11:13:38Z",
    "url": "https://github.com/facebook/fresco/commit/f5122f76d044b477b8ec5b4aed7b912ec66e1bd2",
    "details": {
      "sha": "55486e429155c064502ed0f03424e98e55720e50",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/facebook/fresco/blob/f5122f76d044b477b8ec5b4aed7b912ec66e1bd2/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java",
      "raw_url": "https://github.com/facebook/fresco/raw/f5122f76d044b477b8ec5b4aed7b912ec66e1bd2/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java?ref=f5122f76d044b477b8ec5b4aed7b912ec66e1bd2",
      "patch": "@@ -20,6 +20,7 @@\n import com.facebook.common.references.CloseableReference;\n import com.facebook.datasource.DataSource;\n import com.facebook.drawable.base.DrawableWithCaches;\n+import com.facebook.drawee.backends.pipeline.info.ForwardingImageOriginListener;\n import com.facebook.drawee.backends.pipeline.info.ImageOrigin;\n import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;\n import com.facebook.drawee.components.DeferredReleaser;\n@@ -156,7 +157,8 @@ public void initialize(\n     init(dataSourceSupplier);\n     mCacheKey = cacheKey;\n     setCustomDrawableFactories(customDrawableFactories);\n-    setImageOriginListener(imageOriginListener);\n+    clearImageOriginListeners();\n+    addImageOriginListener(imageOriginListener);\n   }\n \n   public void setDrawDebugOverlay(boolean drawDebugOverlay) {\n@@ -168,9 +170,20 @@ public void setCustomDrawableFactories(\n     mCustomDrawableFactories = customDrawableFactories;\n   }\n \n-  public void setImageOriginListener(@Nullable ImageOriginListener imageOriginListener) {\n+  public void addImageOriginListener(@Nullable ImageOriginListener imageOriginListener) {\n     synchronized (this) {\n-      mImageOriginListener = imageOriginListener;\n+      if (mImageOriginListener != null) {\n+        mImageOriginListener =\n+            new ForwardingImageOriginListener(mImageOriginListener, imageOriginListener);\n+      } else {\n+        mImageOriginListener = imageOriginListener;\n+      }\n+    }\n+  }\n+\n+  protected void clearImageOriginListeners() {\n+    synchronized (this) {\n+      mImageOriginListener = null;\n     }\n   }\n ",
      "parent_sha": "2fd41382782f27b076ec2442a568c5c48a06f174"
    }
  },
  {
    "oid": "c83c6c1b179c4d2628375a018837aa2c1dd6fbab",
    "message": "Stop using deprecated Resources.getDrawable call\n\nReviewed By: oprisnik\n\nDifferential Revision: D34807529\n\nfbshipit-source-id: eab7ac6305154c782875f859eda4d00ce23f012a",
    "date": "2022-03-11T20:17:57Z",
    "url": "https://github.com/facebook/fresco/commit/c83c6c1b179c4d2628375a018837aa2c1dd6fbab",
    "details": {
      "sha": "c9e071cdabdd4cd1bf91d77bcffb2082ae6e3eaa",
      "filename": "drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyInflater.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/facebook/fresco/blob/c83c6c1b179c4d2628375a018837aa2c1dd6fbab/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchyInflater.java",
      "raw_url": "https://github.com/facebook/fresco/raw/c83c6c1b179c4d2628375a018837aa2c1dd6fbab/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchyInflater.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchyInflater.java?ref=c83c6c1b179c4d2628375a018837aa2c1dd6fbab",
      "patch": "@@ -256,7 +256,14 @@ private static RoundingParams getRoundingParams(GenericDraweeHierarchyBuilder bu\n   @Nullable\n   private static Drawable getDrawable(Context context, TypedArray gdhAttrs, int attrId) {\n     int resourceId = gdhAttrs.getResourceId(attrId, 0);\n-    return (resourceId == 0) ? null : context.getResources().getDrawable(resourceId);\n+    if (resourceId == 0) {\n+      return null;\n+    }\n+    if (android.os.Build.VERSION.SDK_INT >= 21) {\n+      return context.getDrawable(resourceId);\n+    } else {\n+      return context.getResources().getDrawable(resourceId);\n+    }\n   }\n \n   /**",
      "parent_sha": "d3fdbb7213531e6d21884882639610ba3ca6e443"
    }
  },
  {
    "oid": "38f37ceece1dce37a78a546c7fd923aab73f71e5",
    "message": "ImageUriProvider: Update DraweeSimpleFragment\n\nReviewed By: oprisnik\n\nDifferential Revision: D5389139\n\nfbshipit-source-id: e72fcaa1568df022db50c410ac5b08d36e3c20e9",
    "date": "2017-07-11T10:49:35Z",
    "url": "https://github.com/facebook/fresco/commit/38f37ceece1dce37a78a546c7fd923aab73f71e5",
    "details": {
      "sha": "ba173fee637760b3d733f8c7ae5afc2a42226dd7",
      "filename": "samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeSimpleFragment.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/facebook/fresco/blob/38f37ceece1dce37a78a546c7fd923aab73f71e5/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2Fdrawee%2FDraweeSimpleFragment.java",
      "raw_url": "https://github.com/facebook/fresco/raw/38f37ceece1dce37a78a546c7fd923aab73f71e5/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2Fdrawee%2FDraweeSimpleFragment.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/samples%2Fshowcase%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fsamples%2Fshowcase%2Fdrawee%2FDraweeSimpleFragment.java?ref=38f37ceece1dce37a78a546c7fd923aab73f71e5",
      "patch": "@@ -22,15 +22,13 @@\n import com.facebook.drawee.view.SimpleDraweeView;\n import com.facebook.fresco.samples.showcase.BaseShowcaseFragment;\n import com.facebook.fresco.samples.showcase.R;\n+import com.facebook.fresco.samples.showcase.misc.ImageUriProvider;\n \n /**\n  * Simple drawee fragment that just displays an image.\n  */\n public class DraweeSimpleFragment extends BaseShowcaseFragment {\n \n-  private static final Uri URI =\n-      Uri.parse(\"http://frescolib.org/static/sample-images/animal_d.png\");\n-\n   @Nullable\n   @Override\n   public View onCreateView(\n@@ -40,8 +38,11 @@ public View onCreateView(\n \n   @Override\n   public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n+    final ImageUriProvider imageUriProvider = ImageUriProvider.getInstance(getContext());\n+    final Uri uri = imageUriProvider.createSampleUri(ImageUriProvider.ImageSize.M);\n+\n     SimpleDraweeView simpleDraweeView = (SimpleDraweeView) view.findViewById(R.id.drawee_view);\n-    simpleDraweeView.setImageURI(URI);\n+    simpleDraweeView.setImageURI(uri);\n   }\n \n   @Override",
      "parent_sha": "0b8eaebe45dda4739c1f389f7cd56dd67b391677"
    }
  },
  {
    "oid": "e0da47ea520b5bfb1431810dee6e5f433d684fdc",
    "message": "Rename some internal GDH methods\n\nReviewed By: balazsbalazs\n\nDifferential Revision: D2954750\n\nfb-gh-sync-id: 7afd6264f95791b2a78e45583c6626424c86089f\nfbshipit-source-id: 7afd6264f95791b2a78e45583c6626424c86089f",
    "date": "2016-03-31T18:38:24Z",
    "url": "https://github.com/facebook/fresco/commit/e0da47ea520b5bfb1431810dee6e5f433d684fdc",
    "details": {
      "sha": "3e2971123267df1f46af2e86a799a83e2856c3ac",
      "filename": "drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java",
      "status": "modified",
      "additions": 27,
      "deletions": 27,
      "changes": 54,
      "blob_url": "https://github.com/facebook/fresco/blob/e0da47ea520b5bfb1431810dee6e5f433d684fdc/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java",
      "raw_url": "https://github.com/facebook/fresco/raw/e0da47ea520b5bfb1431810dee6e5f433d684fdc/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java?ref=e0da47ea520b5bfb1431810dee6e5f433d684fdc",
      "patch": "@@ -235,7 +235,7 @@ private void fadeOutLayer(int index) {\n   }\n \n   private void setProgress(float progress) {\n-    Drawable progressBarDrawable = getLayerParentDrawable(mProgressBarImageIndex).getDrawable();\n+    Drawable progressBarDrawable = getParentDrawableAtIndex(mProgressBarImageIndex).getDrawable();\n     if (progressBarDrawable == null) {\n       return;\n     }\n@@ -333,7 +333,7 @@ public void setControllerOverlay(@Nullable Drawable drawable) {\n    * whereas their children are created externally by the client code. When we need to change the\n    * previously set drawable this is the parent whose child needs to be replaced.\n    */\n-  private DrawableParent getLayerParentDrawable(int index) {\n+  private DrawableParent getParentDrawableAtIndex(int index) {\n     DrawableParent parent = mFadeDrawable.getDrawableParentForIndex(index);\n     if (parent.getDrawable() instanceof MatrixDrawable) {\n       parent = (MatrixDrawable) parent.getDrawable();\n@@ -345,16 +345,16 @@ private DrawableParent getLayerParentDrawable(int index) {\n   }\n \n   /**\n-   * Sets the drawable at the specified index and keeps the old scale type.\n+   * Sets the drawable at the specified index while keeping the old scale type and rounding.\n    * In case the given drawable is null, scale type gets cleared too.\n    */\n-  private void setLayerChildDrawable(int index, @Nullable Drawable drawable) {\n+  private void setChildDrawableAtIndex(int index, @Nullable Drawable drawable) {\n     if (drawable == null) {\n       mFadeDrawable.setDrawable(index, null);\n       return;\n     }\n     drawable = WrappingUtils.maybeApplyLeafRounding(drawable, mRoundingParams, mResources);\n-    getLayerParentDrawable(index).setDrawable(drawable);\n+    getParentDrawableAtIndex(index).setDrawable(drawable);\n   }\n \n   /**\n@@ -363,8 +363,8 @@ private void setLayerChildDrawable(int index, @Nullable Drawable drawable) {\n    * In case there is a child, but the ScaleTypeDrawable does not exist,\n    * the child will be wrapped with a new ScaleTypeDrawable.\n    */\n-  private ScaleTypeDrawable getLayerScaleTypeDrawable(int index) {\n-    DrawableParent parent = getLayerParentDrawable(index);\n+  private ScaleTypeDrawable getScaleTypeDrawableAtIndex(int index) {\n+    DrawableParent parent = getParentDrawableAtIndex(index);\n     if (parent instanceof ScaleTypeDrawable) {\n       return (ScaleTypeDrawable) parent;\n     } else {\n@@ -375,8 +375,8 @@ private ScaleTypeDrawable getLayerScaleTypeDrawable(int index) {\n   /**\n    * Returns whether the given layer has a scale type drawable.\n    */\n-  private boolean hasLayerScaleTypeDrawable(int index) {\n-    DrawableParent parent = getLayerParentDrawable(index);\n+  private boolean hasScaleTypeDrawableAtIndex(int index) {\n+    DrawableParent parent = getParentDrawableAtIndex(index);\n     return (parent instanceof ScaleTypeDrawable);\n   }\n \n@@ -390,20 +390,20 @@ public void setFadeDuration(int durationMs) {\n   /** Sets the actual image focus point. */\n   public void setActualImageFocusPoint(PointF focusPoint) {\n     Preconditions.checkNotNull(focusPoint);\n-    getLayerScaleTypeDrawable(mActualImageIndex).setFocusPoint(focusPoint);\n+    getScaleTypeDrawableAtIndex(mActualImageIndex).setFocusPoint(focusPoint);\n   }\n \n   /** Sets the actual image scale type. */\n   public void setActualImageScaleType(ScaleType scaleType) {\n     Preconditions.checkNotNull(scaleType);\n-    getLayerScaleTypeDrawable(mActualImageIndex).setScaleType(scaleType);\n+    getScaleTypeDrawableAtIndex(mActualImageIndex).setScaleType(scaleType);\n   }\n \n   public @Nullable ScaleType getActualImageScaleType() {\n-    if (!hasLayerScaleTypeDrawable(mActualImageIndex)) {\n+    if (!hasScaleTypeDrawableAtIndex(mActualImageIndex)) {\n       return null;\n     }\n-    return getLayerScaleTypeDrawable(mActualImageIndex).getScaleType();\n+    return getScaleTypeDrawableAtIndex(mActualImageIndex).getScaleType();\n   }\n \n   /** Sets the color filter to be applied on the actual image. */\n@@ -418,20 +418,20 @@ public void getActualImageBounds(RectF outBounds) {\n \n   /** Sets a new placeholder drawable with old scale type. */\n   public void setPlaceholderImage(@Nullable Drawable drawable) {\n-    setLayerChildDrawable(mPlaceholderImageIndex, drawable);\n+    setChildDrawableAtIndex(mPlaceholderImageIndex, drawable);\n   }\n \n   /** Sets a new placeholder drawable with scale type. */\n   public void setPlaceholderImage(Drawable drawable, ScaleType scaleType) {\n-    setLayerChildDrawable(mPlaceholderImageIndex, drawable);\n-    getLayerScaleTypeDrawable(mPlaceholderImageIndex).setScaleType(scaleType);\n+    setChildDrawableAtIndex(mPlaceholderImageIndex, drawable);\n+    getScaleTypeDrawableAtIndex(mPlaceholderImageIndex).setScaleType(scaleType);\n \n   }\n \n   /** Sets the placeholder image focus point. */\n   public void setPlaceholderImageFocusPoint(PointF focusPoint) {\n     Preconditions.checkNotNull(focusPoint);\n-    getLayerScaleTypeDrawable(mPlaceholderImageIndex).setFocusPoint(focusPoint);\n+    getScaleTypeDrawableAtIndex(mPlaceholderImageIndex).setFocusPoint(focusPoint);\n   }\n \n   /**\n@@ -445,43 +445,43 @@ public void setPlaceholderImage(int resourceId) {\n \n   /** Sets a new failure drawable with old scale type. */\n   public void setFailureImage(@Nullable Drawable drawable) {\n-    setLayerChildDrawable(mFailureImageIndex, drawable);\n+    setChildDrawableAtIndex(mFailureImageIndex, drawable);\n   }\n \n   /** Sets a new failure drawable with scale type. */\n   public void setFailureImage(Drawable drawable, ScaleType scaleType) {\n-    setLayerChildDrawable(mFailureImageIndex, drawable);\n-    getLayerScaleTypeDrawable(mFailureImageIndex).setScaleType(scaleType);\n+    setChildDrawableAtIndex(mFailureImageIndex, drawable);\n+    getScaleTypeDrawableAtIndex(mFailureImageIndex).setScaleType(scaleType);\n   }\n \n   /** Sets a new retry drawable with old scale type. */\n   public void setRetryImage(@Nullable Drawable drawable) {\n-    setLayerChildDrawable(mRetryImageIndex, drawable);\n+    setChildDrawableAtIndex(mRetryImageIndex, drawable);\n   }\n \n   /** Sets a new retry drawable with scale type. */\n   public void setRetryImage(Drawable drawable, ScaleType scaleType) {\n-    setLayerChildDrawable(mRetryImageIndex, drawable);\n-    getLayerScaleTypeDrawable(mRetryImageIndex).setScaleType(scaleType);\n+    setChildDrawableAtIndex(mRetryImageIndex, drawable);\n+    getScaleTypeDrawableAtIndex(mRetryImageIndex).setScaleType(scaleType);\n   }\n \n   /** Sets a new progress bar drawable with old scale type. */\n   public void setProgressBarImage(@Nullable Drawable drawable) {\n-    setLayerChildDrawable(mProgressBarImageIndex, drawable);\n+    setChildDrawableAtIndex(mProgressBarImageIndex, drawable);\n   }\n \n   /** Sets a new progress bar drawable with scale type. */\n   public void setProgressBarImage(Drawable drawable, ScaleType scaleType) {\n-    setLayerChildDrawable(mProgressBarImageIndex, drawable);\n-    getLayerScaleTypeDrawable(mProgressBarImageIndex).setScaleType(scaleType);\n+    setChildDrawableAtIndex(mProgressBarImageIndex, drawable);\n+    getScaleTypeDrawableAtIndex(mProgressBarImageIndex).setScaleType(scaleType);\n   }\n \n   /** Sets the rounding params. */\n   public void setRoundingParams(RoundingParams roundingParams) {\n     mRoundingParams = roundingParams;\n     WrappingUtils.updateOverlayColorRounding(mTopLevelDrawable, mRoundingParams);\n     for (int i = 0; i < mFadeDrawable.getNumberOfLayers(); i++) {\n-      WrappingUtils.updateLeafRounding(getLayerParentDrawable(i), mRoundingParams, mResources);\n+      WrappingUtils.updateLeafRounding(getParentDrawableAtIndex(i), mRoundingParams, mResources);\n     }\n   }\n ",
      "parent_sha": "240ce6d2e65e87842fc9cb331f0a71991568c696"
    }
  },
  {
    "oid": "25d9a07b1923192e0c54d728caa48bcdfa79a5be",
    "message": "add a few @ReturnsOwnership annotations\n\nReviewed By: jaegs\n\nDifferential Revision: D4560877\n\nfbshipit-source-id: 1c6fc93e66ffffb5b3d0d92d9778e99e5567f52e",
    "date": "2017-02-15T23:34:12Z",
    "url": "https://github.com/facebook/fresco/commit/25d9a07b1923192e0c54d728caa48bcdfa79a5be",
    "details": {
      "sha": "de5bb50dfe514244e6d1e284c71fe3d02b151abc",
      "filename": "drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/facebook/fresco/blob/25d9a07b1923192e0c54d728caa48bcdfa79a5be/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java",
      "raw_url": "https://github.com/facebook/fresco/raw/25d9a07b1923192e0c54d728caa48bcdfa79a5be/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fcontroller%2FAbstractDraweeControllerBuilder.java?ref=25d9a07b1923192e0c54d728caa48bcdfa79a5be",
      "patch": "@@ -30,6 +30,7 @@\n import com.facebook.drawee.gestures.GestureDetector;\n import com.facebook.drawee.interfaces.DraweeController;\n import com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder;\n+import com.facebook.infer.annotation.ReturnsOwnership;\n \n /**\n  * Base implementation for Drawee controller builders.\n@@ -437,7 +438,7 @@ protected Context getContext() {\n   }\n \n   /** Concrete builder classes should override this method to return a new controller. */\n-  protected abstract AbstractDraweeController obtainController();\n+  @ReturnsOwnership protected abstract AbstractDraweeController obtainController();\n \n   /**\n    * Concrete builder classes should override this method to return a data source for the request.",
      "parent_sha": "749dccf91a006bfcc1e3aa9c7cfae381088eaa7a"
    }
  },
  {
    "oid": "4b0cd4b67dfc8552c6ff277f0fa1c5da9c70bf20",
    "message": "Optionally cache hashcode: ImageRequest\n\nReviewed By: oprisnik\n\nDifferential Revision: D24161969\n\nfbshipit-source-id: 7afc610636247430178ff810a41131191a5c6dd2",
    "date": "2020-10-09T17:40:32Z",
    "url": "https://github.com/facebook/fresco/commit/4b0cd4b67dfc8552c6ff277f0fa1c5da9c70bf20",
    "details": {
      "sha": "ad15bd625ff901b8c94c91e288d48cffdf377216",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java",
      "status": "modified",
      "additions": 48,
      "deletions": 17,
      "changes": 65,
      "blob_url": "https://github.com/facebook/fresco/blob/4b0cd4b67dfc8552c6ff277f0fa1c5da9c70bf20/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FImageRequest.java",
      "raw_url": "https://github.com/facebook/fresco/raw/4b0cd4b67dfc8552c6ff277f0fa1c5da9c70bf20/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FImageRequest.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Frequest%2FImageRequest.java?ref=4b0cd4b67dfc8552c6ff277f0fa1c5da9c70bf20",
      "patch": "@@ -41,6 +41,10 @@\n @Immutable\n public class ImageRequest {\n \n+  private static boolean sUseCachedHashcodeInEquals;\n+  private static boolean sCacheHashcode;\n+  private int mHashcode;\n+\n   /** Cache choice */\n   private final CacheChoice mCacheChoice;\n \n@@ -238,6 +242,13 @@ public boolean equals(Object o) {\n       return false;\n     }\n     ImageRequest request = (ImageRequest) o;\n+    if (sUseCachedHashcodeInEquals) {\n+      int a = mHashcode;\n+      int b = request.mHashcode;\n+      if (a != 0 && b != 0 && a != b) {\n+        return false;\n+      }\n+    }\n     if (mLocalThumbnailPreviewsEnabled != request.mLocalThumbnailPreviewsEnabled) return false;\n     if (mIsDiskCacheEnabled != request.mIsDiskCacheEnabled) return false;\n     if (mIsMemoryCacheEnabled != request.mIsMemoryCacheEnabled) return false;\n@@ -263,23 +274,35 @@ public boolean equals(Object o) {\n \n   @Override\n   public int hashCode() {\n-    final CacheKey postprocessorCacheKey =\n-        mPostprocessor != null ? mPostprocessor.getPostprocessorCacheKey() : null;\n-    return Objects.hashCode(\n-        mCacheChoice,\n-        mSourceUri,\n-        mLocalThumbnailPreviewsEnabled,\n-        mBytesRange,\n-        mRequestPriority,\n-        mLowestPermittedRequestLevel,\n-        mIsDiskCacheEnabled,\n-        mIsMemoryCacheEnabled,\n-        mImageDecodeOptions,\n-        mDecodePrefetches,\n-        mResizeOptions,\n-        mRotationOptions,\n-        postprocessorCacheKey,\n-        mResizingAllowedOverride);\n+    final boolean cacheHashcode = sCacheHashcode;\n+    int result = 0;\n+    if (cacheHashcode) {\n+      result = mHashcode;\n+    }\n+    if (result == 0) {\n+      final CacheKey postprocessorCacheKey =\n+          mPostprocessor != null ? mPostprocessor.getPostprocessorCacheKey() : null;\n+      result =\n+          Objects.hashCode(\n+              mCacheChoice,\n+              mSourceUri,\n+              mLocalThumbnailPreviewsEnabled,\n+              mBytesRange,\n+              mRequestPriority,\n+              mLowestPermittedRequestLevel,\n+              mIsDiskCacheEnabled,\n+              mIsMemoryCacheEnabled,\n+              mImageDecodeOptions,\n+              mDecodePrefetches,\n+              mResizeOptions,\n+              mRotationOptions,\n+              postprocessorCacheKey,\n+              mResizingAllowedOverride);\n+      if (cacheHashcode) {\n+        mHashcode = result;\n+      }\n+    }\n+    return result;\n   }\n \n   @Override\n@@ -385,4 +408,12 @@ public static RequestLevel getMax(RequestLevel requestLevel1, RequestLevel reque\n           return arg != null ? arg.getSourceUri() : null;\n         }\n       };\n+\n+  public static void setUseCachedHashcodeInEquals(boolean useCachedHashcodeInEquals) {\n+    sUseCachedHashcodeInEquals = useCachedHashcodeInEquals;\n+  }\n+\n+  public static void setCacheHashcode(boolean cacheHashcode) {\n+    sCacheHashcode = cacheHashcode;\n+  }\n }",
      "parent_sha": "eef2ff373beb2fb47e5c7281d5a01665dc802d82"
    }
  },
  {
    "oid": "96f24a16f988da4fd5d42d0e14b2b8f1d9361ea6",
    "message": "Added bind callback experiment\n\nReviewed By: defHLT\n\nDifferential Revision: D15879356\n\nfbshipit-source-id: ca8022ef45f4dfa3849d4a1545b331ba4d87691c",
    "date": "2019-07-24T18:13:36Z",
    "url": "https://github.com/facebook/fresco/commit/96f24a16f988da4fd5d42d0e14b2b8f1d9361ea6",
    "details": {
      "sha": "0bb04d22c6267ea3cc758d3f499772fdca04e80d",
      "filename": "vito/litho/src/main/java/com/facebook/fresco/vito/litho/FrescoVitoImageSpec.java",
      "status": "modified",
      "additions": 37,
      "deletions": 4,
      "changes": 41,
      "blob_url": "https://github.com/facebook/fresco/blob/96f24a16f988da4fd5d42d0e14b2b8f1d9361ea6/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImageSpec.java",
      "raw_url": "https://github.com/facebook/fresco/raw/96f24a16f988da4fd5d42d0e14b2b8f1d9361ea6/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImageSpec.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/vito%2Flitho%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Ffresco%2Fvito%2Flitho%2FFrescoVitoImageSpec.java?ref=96f24a16f988da4fd5d42d0e14b2b8f1d9361ea6",
      "patch": "@@ -27,13 +27,15 @@\n import com.facebook.litho.annotations.FromPrepare;\n import com.facebook.litho.annotations.MountSpec;\n import com.facebook.litho.annotations.MountingType;\n+import com.facebook.litho.annotations.OnBind;\n import com.facebook.litho.annotations.OnBoundsDefined;\n import com.facebook.litho.annotations.OnCreateInitialState;\n import com.facebook.litho.annotations.OnCreateMountContent;\n import com.facebook.litho.annotations.OnDetached;\n import com.facebook.litho.annotations.OnMeasure;\n import com.facebook.litho.annotations.OnMount;\n import com.facebook.litho.annotations.OnPrepare;\n+import com.facebook.litho.annotations.OnUnbind;\n import com.facebook.litho.annotations.OnUnmount;\n import com.facebook.litho.annotations.Prop;\n import com.facebook.litho.annotations.PropDefault;\n@@ -119,8 +121,11 @@ static void onMount(\n       @Prop(optional = true) final @Nullable FrescoContext frescoContext,\n       @Prop(optional = true) final @Nullable ImageListener imageListener,\n       @FromPrepare final FrescoState frescoState) {\n-    frescoState.setFrescoDrawable(frescoDrawable);\n-    getController(context, frescoContext).onAttach(frescoState, imageListener);\n+    FrescoContext actualFrescoContext = resolveContext(context, frescoContext);\n+    if (!actualFrescoContext.getExperiments().useBindCallbacks()) {\n+      frescoState.setFrescoDrawable(frescoDrawable);\n+      actualFrescoContext.getController().onAttach(frescoState, imageListener);\n+    }\n   }\n \n   @OnUnmount\n@@ -130,9 +135,37 @@ static void onUnmount(\n       @Prop(optional = true) final @Nullable FrescoContext frescoContext,\n       @FromPrepare final FrescoState frescoState) {\n     FrescoContext actualFrescoContext = resolveContext(context, frescoContext);\n-    if (actualFrescoContext.getExperiments().releaseInUnmount()) {\n+    if (!actualFrescoContext.getExperiments().useBindCallbacks()\n+        && actualFrescoContext.getExperiments().releaseInUnmount()) {\n+      frescoState.setFrescoDrawable(frescoDrawable);\n+      actualFrescoContext.getController().onDetach(frescoState);\n+    }\n+  }\n+\n+  @OnBind\n+  static void onBind(\n+      ComponentContext context,\n+      final FrescoDrawable frescoDrawable,\n+      @Prop(optional = true) final @Nullable FrescoContext frescoContext,\n+      @Prop(optional = true) final @Nullable ImageListener imageListener,\n+      @FromPrepare final FrescoState frescoState) {\n+    FrescoContext actualFrescoContext = resolveContext(context, frescoContext);\n+    if (actualFrescoContext.getExperiments().useBindCallbacks()) {\n+      frescoState.setFrescoDrawable(frescoDrawable);\n+      actualFrescoContext.getController().onAttach(frescoState, imageListener);\n+    }\n+  }\n+\n+  @OnUnbind\n+  static void onUnbind(\n+      ComponentContext context,\n+      FrescoDrawable frescoDrawable,\n+      @Prop(optional = true) final @Nullable FrescoContext frescoContext,\n+      @FromPrepare final FrescoState frescoState) {\n+    FrescoContext actualFrescoContext = resolveContext(context, frescoContext);\n+    if (actualFrescoContext.getExperiments().useBindCallbacks()) {\n       frescoState.setFrescoDrawable(frescoDrawable);\n-      getController(context, frescoContext).onDetach(frescoState);\n+      actualFrescoContext.getController().onDetach(frescoState);\n     }\n   }\n ",
      "parent_sha": "8e10b37f3672d0a32f560499c15e913fe25723eb"
    }
  },
  {
    "oid": "19f3b07c1eb07981f981ef67d9831d0f7d41a1fe",
    "message": "ZoomableDraweeView: Simplify touch logic\n\nSummary: This enables the experimental simple zooming code per default.\n\nReviewed By: kirwan\n\nDifferential Revision: D5227474\n\nfbshipit-source-id: ce88d4244b0ea1b34eacac4c22fd9715508deafe",
    "date": "2017-06-12T16:20:28Z",
    "url": "https://github.com/facebook/fresco/commit/19f3b07c1eb07981f981ef67d9831d0f7d41a1fe",
    "details": {
      "sha": "11b4facb1e29d8aba3081d13da9434ff3a547355",
      "filename": "samples/zoomable/src/main/java/com/facebook/samples/zoomable/ZoomableDraweeView.java",
      "status": "modified",
      "additions": 6,
      "deletions": 22,
      "changes": 28,
      "blob_url": "https://github.com/facebook/fresco/blob/19f3b07c1eb07981f981ef67d9831d0f7d41a1fe/samples%2Fzoomable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fzoomable%2FZoomableDraweeView.java",
      "raw_url": "https://github.com/facebook/fresco/raw/19f3b07c1eb07981f981ef67d9831d0f7d41a1fe/samples%2Fzoomable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fzoomable%2FZoomableDraweeView.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/samples%2Fzoomable%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fsamples%2Fzoomable%2FZoomableDraweeView.java?ref=19f3b07c1eb07981f981ef67d9831d0f7d41a1fe",
      "patch": "@@ -48,18 +48,14 @@ public class ZoomableDraweeView extends DraweeView<GenericDraweeHierarchy>\n   private static final Class<?> TAG = ZoomableDraweeView.class;\n \n   private static final float HUGE_IMAGE_SCALE_FACTOR_THRESHOLD = 1.1f;\n-  private static final boolean DEFAULT_ALLOW_TOUCH_INTERCEPTION_WHILE_ZOOMED = true;\n-\n-  private boolean mUseSimpleTouchHandling = false;\n \n   private final RectF mImageBounds = new RectF();\n   private final RectF mViewBounds = new RectF();\n \n   private DraweeController mHugeImageController;\n   private ZoomableController mZoomableController;\n   private GestureDetector mTapGestureDetector;\n-  private boolean mAllowTouchInterceptionWhileZoomed =\n-      DEFAULT_ALLOW_TOUCH_INTERCEPTION_WHILE_ZOOMED;\n+  private boolean mAllowTouchInterceptionWhileZoomed = true;\n \n   private final ControllerListener mControllerListener = new BaseControllerListener<Object>() {\n     @Override\n@@ -288,23 +284,15 @@ public boolean onTouchEvent(MotionEvent event) {\n       return true;\n     }\n \n-    if (mUseSimpleTouchHandling) {\n-      if (mZoomableController.onTouchEvent(event)) {\n-        return true;\n-      }\n-    } else if (mZoomableController.onTouchEvent(event)) {\n-      // Do not allow the parent to intercept touch events if:\n-      // - we do not allow swiping while zoomed and the image is zoomed\n-      // - we allow swiping while zoomed and the transform was corrected\n-      if ((!mAllowTouchInterceptionWhileZoomed && !mZoomableController.isIdentity()) ||\n-          (mAllowTouchInterceptionWhileZoomed && !mZoomableController.wasTransformCorrected())) {\n-        getParent().requestDisallowInterceptTouchEvent(true);\n-      }\n+    if (mZoomableController.onTouchEvent(event)) {\n       FLog.v(\n           getLogTag(),\n           \"onTouchEvent: %d, view %x, handled by zoomable controller\",\n           a,\n           this.hashCode());\n+      if (!mAllowTouchInterceptionWhileZoomed && !mZoomableController.isIdentity()) {\n+        getParent().requestDisallowInterceptTouchEvent(true);\n+      }\n       return true;\n     }\n     if (super.onTouchEvent(event)) {\n@@ -313,7 +301,7 @@ public boolean onTouchEvent(MotionEvent event) {\n     }\n     // None of our components reported that they handled the touch event. Upon returning false\n     // from this method, our parent won't send us any more events for this gesture. Unfortunately,\n-    // some componentes may have started a delayed action, such as a long-press timer, and since we\n+    // some components may have started a delayed action, such as a long-press timer, and since we\n     // won't receive an ACTION_UP that would cancel that timer, a false event may be triggered.\n     // To prevent that we explicitly send one last cancel event when returning false.\n     MotionEvent cancelEvent = MotionEvent.obtain(event);\n@@ -395,8 +383,4 @@ protected Class<?> getLogTag() {\n   protected ZoomableController createZoomableController() {\n     return AnimatedZoomableController.newInstance();\n   }\n-\n-  public void setExperimentalSimpleTouchHandlingEnabled(boolean enabled) {\n-    mUseSimpleTouchHandling = enabled;\n-  }\n }",
      "parent_sha": "8a758b01b85c7786e4a5daa3044768704990b3a2"
    }
  },
  {
    "oid": "67e52927fbcc6634ab18d93ef421beac2d2081ce",
    "message": "LightBitmapDrawable Experiment on AbstractDraweeController\n\nReviewed By: kirwan\n\nDifferential Revision: D3199283\n\nfb-gh-sync-id: 4762bf64217a1ceed395ce6086b647ccb56d7829\nfbshipit-source-id: 4762bf64217a1ceed395ce6086b647ccb56d7829",
    "date": "2016-04-29T16:05:45Z",
    "url": "https://github.com/facebook/fresco/commit/67e52927fbcc6634ab18d93ef421beac2d2081ce",
    "details": {
      "sha": "644ecbb8d829203d4c157400238137f5b11f58ae",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java",
      "status": "modified",
      "additions": 28,
      "deletions": 3,
      "changes": 31,
      "blob_url": "https://github.com/facebook/fresco/blob/67e52927fbcc6634ab18d93ef421beac2d2081ce/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java",
      "raw_url": "https://github.com/facebook/fresco/raw/67e52927fbcc6634ab18d93ef421beac2d2081ce/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FPipelineDraweeController.java?ref=67e52927fbcc6634ab18d93ef421beac2d2081ce",
      "patch": "@@ -22,6 +22,7 @@\n import com.facebook.drawable.base.DrawableWithCaches;\n import com.facebook.drawee.components.DeferredReleaser;\n import com.facebook.drawee.controller.AbstractDraweeController;\n+import com.facebook.drawee.drawable.LightBitmapDrawable;\n import com.facebook.drawee.drawable.OrientedDrawable;\n import com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory;\n import com.facebook.imagepipeline.image.CloseableImage;\n@@ -48,6 +49,11 @@ public class PipelineDraweeController\n   private final Resources mResources;\n   private final AnimatedDrawableFactory mAnimatedDrawableFactory;\n \n+  private static boolean sIsLightEnabled;\n+  private static boolean sIsReuseEnabled;\n+\n+  private LightBitmapDrawable mLightBitmapDrawable;\n+\n   // Constant state (non-final because controllers can be reused)\n   private Supplier<DataSource<CloseableReference<CloseableImage>>> mDataSourceSupplier;\n \n@@ -103,9 +109,21 @@ protected Drawable createDrawable(CloseableReference<CloseableImage> image) {\n     CloseableImage closeableImage = image.get();\n     if (closeableImage instanceof CloseableStaticBitmap) {\n       CloseableStaticBitmap closeableStaticBitmap = (CloseableStaticBitmap) closeableImage;\n-      BitmapDrawable bitmapDrawable = new BitmapDrawable(\n-          mResources,\n-          closeableStaticBitmap.getUnderlyingBitmap());\n+      Drawable bitmapDrawable;\n+      if (sIsLightEnabled) {\n+        if (sIsReuseEnabled && mLightBitmapDrawable != null) {\n+          mLightBitmapDrawable.setBitmap(closeableStaticBitmap.getUnderlyingBitmap());\n+        } else {\n+          mLightBitmapDrawable = new LightBitmapDrawable(\n+              mResources,\n+              closeableStaticBitmap.getUnderlyingBitmap());\n+        }\n+        bitmapDrawable = mLightBitmapDrawable;\n+      } else {\n+        bitmapDrawable = new BitmapDrawable(\n+            mResources,\n+            closeableStaticBitmap.getUnderlyingBitmap());\n+      }\n       if (closeableStaticBitmap.getRotationAngle() == 0 ||\n           closeableStaticBitmap.getRotationAngle() == EncodedImage.UNKNOWN_ROTATION_ANGLE) {\n         return bitmapDrawable;\n@@ -149,4 +167,11 @@ public String toString() {\n         .add(\"dataSourceSupplier\", mDataSourceSupplier)\n         .toString();\n   }\n+\n+  protected static void setLightBitmapDrawableExperiment(\n+      boolean lightEnabled,\n+      boolean reuseEnabled) {\n+    sIsLightEnabled = lightEnabled;\n+    sIsReuseEnabled = reuseEnabled;\n+  }\n }",
      "parent_sha": "153430ec9e43d0e470ded15973b2e65aa5ba5226"
    }
  },
  {
    "oid": "3ac5aa001147c6795faa92568ae01536a2c3707c",
    "message": "Fall back to static rendering for animated WebPs instead of throwing\n\nSummary:\nFor animated GIFs, we properly fall back to static decoding if no dedicated animated GIF decoder is added.\nHowever, for WebP, we simply throw an exception and no image shows up, even when Android can display the first frame (API30).\n\nWith this diff, we change the behavior to be the same for animated WebPs, where a static image will be displayed if supported by the system.\n\nDifferential Revision: D36512321\n\nfbshipit-source-id: 72db7bc0466a279d41c589eae450a56cc8ede357",
    "date": "2022-05-31T19:05:29Z",
    "url": "https://github.com/facebook/fresco/commit/3ac5aa001147c6795faa92568ae01536a2c3707c",
    "details": {
      "sha": "f6332c9e4d8d86f2f215769a7c0df688e7982865",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/DefaultImageDecoder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/facebook/fresco/blob/3ac5aa001147c6795faa92568ae01536a2c3707c/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FDefaultImageDecoder.java",
      "raw_url": "https://github.com/facebook/fresco/raw/3ac5aa001147c6795faa92568ae01536a2c3707c/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FDefaultImageDecoder.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fdecoder%2FDefaultImageDecoder.java?ref=3ac5aa001147c6795faa92568ae01536a2c3707c",
      "patch": "@@ -229,9 +229,9 @@ public CloseableImage decodeAnimatedWebp(\n       final int length,\n       final QualityInfo qualityInfo,\n       final ImageDecodeOptions options) {\n-    if (mAnimatedWebPDecoder != null) {\n+    if (!options.forceStaticImage && mAnimatedWebPDecoder != null) {\n       return mAnimatedWebPDecoder.decode(encodedImage, length, qualityInfo, options);\n     }\n-    throw new DecodeException(\"Animated WebP support not set up!\", encodedImage);\n+    return decodeStaticImage(encodedImage, options);\n   }\n }",
      "parent_sha": "201b863822664c2b0f56cb872904f7f91e986423"
    }
  },
  {
    "oid": "908310eb636b0543d7e7016f4c33dda13ceec19a",
    "message": "Add secondary constructor to ScaleTypeDrawable with focusPoint\n\nReviewed By: oprisnik\n\nDifferential Revision: D13194098\n\nfbshipit-source-id: 3cc54a5d96c494e7e9bd5b580da80b9454f230f9",
    "date": "2018-11-30T22:59:40Z",
    "url": "https://github.com/facebook/fresco/commit/908310eb636b0543d7e7016f4c33dda13ceec19a",
    "details": {
      "sha": "c61819c5d5bb64f13e37be769bb40c1be6918b09",
      "filename": "drawee/src/main/java/com/facebook/drawee/drawable/ScaleTypeDrawable.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/facebook/fresco/blob/908310eb636b0543d7e7016f4c33dda13ceec19a/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FScaleTypeDrawable.java",
      "raw_url": "https://github.com/facebook/fresco/raw/908310eb636b0543d7e7016f4c33dda13ceec19a/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FScaleTypeDrawable.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fdrawable%2FScaleTypeDrawable.java?ref=908310eb636b0543d7e7016f4c33dda13ceec19a",
      "patch": "@@ -14,6 +14,7 @@\n import android.graphics.PointF;\n import android.graphics.Rect;\n import android.graphics.drawable.Drawable;\n+import android.support.annotation.Nullable;\n import com.facebook.common.internal.Objects;\n import com.facebook.common.internal.Preconditions;\n import com.facebook.common.internal.VisibleForTesting;\n@@ -30,7 +31,7 @@ public class ScaleTypeDrawable extends ForwardingDrawable {\n   @VisibleForTesting Object mScaleTypeState;\n \n   // Specified focus point to use with FOCUS_CROP.\n-  @VisibleForTesting PointF mFocusPoint = null;\n+  @VisibleForTesting @Nullable PointF mFocusPoint = null;\n \n   // Last known dimensions of the underlying drawable. Used to avoid computing bounds every time\n   // if underlying size hasn't changed.\n@@ -53,6 +54,19 @@ public ScaleTypeDrawable(Drawable drawable, ScaleType scaleType) {\n     mScaleType = scaleType;\n   }\n \n+  /**\n+   * Creates a new ScaleType drawable with given underlying drawable, scale type, and focus point.\n+   *\n+   * @param drawable underlying drawable to apply scale type on\n+   * @param scaleType scale type to be applied\n+   * @param focusPoint focus point of the image\n+   */\n+  public ScaleTypeDrawable(Drawable drawable, ScaleType scaleType, @Nullable PointF focusPoint) {\n+    super(Preconditions.checkNotNull(drawable));\n+    mScaleType = scaleType;\n+    mFocusPoint = focusPoint;\n+  }\n+\n   @Override\n   public Drawable setCurrent(Drawable newDelegate) {\n     final Drawable previousDelegate = super.setCurrent(newDelegate);\n@@ -86,8 +100,10 @@ public void setScaleType(ScaleType scaleType) {\n \n   /**\n    * Gets the focus point.\n+   *\n    * @return focus point of the image\n    */\n+  @Nullable\n   public PointF getFocusPoint() {\n     return mFocusPoint;\n   }",
      "parent_sha": "440720690b7d072281cc8e60612f83540bda2e22"
    }
  },
  {
    "oid": "48c9e0849cefe5a0b9de9a11504eb54488806574",
    "message": "Pipeline systrace - add markers to DecodeProducer\n\nReviewed By: oprisnik\n\nDifferential Revision: D9216556\n\nfbshipit-source-id: 8d8fa84ccec809fbe12bbf47fe778da298371ad3",
    "date": "2018-08-08T15:48:05Z",
    "url": "https://github.com/facebook/fresco/commit/48c9e0849cefe5a0b9de9a11504eb54488806574",
    "details": {
      "sha": "728d6c522a1d8f67bc7f227aa2f2f28baa0ed58f",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java",
      "status": "modified",
      "additions": 39,
      "deletions": 28,
      "changes": 67,
      "blob_url": "https://github.com/facebook/fresco/blob/48c9e0849cefe5a0b9de9a11504eb54488806574/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FDecodeProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/48c9e0849cefe5a0b9de9a11504eb54488806574/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FDecodeProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FDecodeProducer.java?ref=48c9e0849cefe5a0b9de9a11504eb54488806574",
      "patch": "@@ -31,6 +31,7 @@\n import com.facebook.imagepipeline.image.ImmutableQualityInfo;\n import com.facebook.imagepipeline.image.QualityInfo;\n import com.facebook.imagepipeline.request.ImageRequest;\n+import com.facebook.imagepipeline.systrace.FrescoSystrace;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.Executor;\n@@ -90,24 +91,29 @@ public DecodeProducer(\n   public void produceResults(\n       final Consumer<CloseableReference<CloseableImage>> consumer,\n       final ProducerContext producerContext) {\n-    final ImageRequest imageRequest = producerContext.getImageRequest();\n-    ProgressiveDecoder progressiveDecoder;\n-    if (!UriUtil.isNetworkUri(imageRequest.getSourceUri())) {\n-      progressiveDecoder =\n-          new LocalImagesProgressiveDecoder(\n-              consumer, producerContext, mDecodeCancellationEnabled, mMaxBitmapSize);\n-    } else {\n-      ProgressiveJpegParser jpegParser = new ProgressiveJpegParser(mByteArrayPool);\n-      progressiveDecoder =\n-          new NetworkImagesProgressiveDecoder(\n-              consumer,\n-              producerContext,\n-              jpegParser,\n-              mProgressiveJpegConfig,\n-              mDecodeCancellationEnabled,\n-              mMaxBitmapSize);\n+    try {\n+      FrescoSystrace.beginSection(\"DecodeProducer#produceResults\");\n+      final ImageRequest imageRequest = producerContext.getImageRequest();\n+      ProgressiveDecoder progressiveDecoder;\n+      if (!UriUtil.isNetworkUri(imageRequest.getSourceUri())) {\n+        progressiveDecoder =\n+            new LocalImagesProgressiveDecoder(\n+                consumer, producerContext, mDecodeCancellationEnabled, mMaxBitmapSize);\n+      } else {\n+        ProgressiveJpegParser jpegParser = new ProgressiveJpegParser(mByteArrayPool);\n+        progressiveDecoder =\n+            new NetworkImagesProgressiveDecoder(\n+                consumer,\n+                producerContext,\n+                jpegParser,\n+                mProgressiveJpegConfig,\n+                mDecodeCancellationEnabled,\n+                mMaxBitmapSize);\n+      }\n+      mInputProducer.produceResults(progressiveDecoder, producerContext);\n+    } finally {\n+      FrescoSystrace.endSection();\n     }\n-    mInputProducer.produceResults(progressiveDecoder, producerContext);\n   }\n \n   private abstract class ProgressiveDecoder extends DelegatingConsumer<\n@@ -173,17 +179,22 @@ public void onCancellationRequested() {\n \n     @Override\n     public void onNewResultImpl(EncodedImage newResult, @Status int status) {\n-      final boolean isLast = isLast(status);\n-      if (isLast && !EncodedImage.isValid(newResult)) {\n-        handleError(new ExceptionWithNoStacktrace(\"Encoded image is not valid.\"));\n-        return;\n-      }\n-      if (!updateDecodeJob(newResult, status)) {\n-        return;\n-      }\n-      final boolean isPlaceholder = statusHasFlag(status, IS_PLACEHOLDER);\n-      if (isLast || isPlaceholder || mProducerContext.isIntermediateResultExpected()) {\n-        mJobScheduler.scheduleJob();\n+      try {\n+        FrescoSystrace.beginSection(\"DecodeProducer#onNewResultImpl\");\n+        final boolean isLast = isLast(status);\n+        if (isLast && !EncodedImage.isValid(newResult)) {\n+          handleError(new ExceptionWithNoStacktrace(\"Encoded image is not valid.\"));\n+          return;\n+        }\n+        if (!updateDecodeJob(newResult, status)) {\n+          return;\n+        }\n+        final boolean isPlaceholder = statusHasFlag(status, IS_PLACEHOLDER);\n+        if (isLast || isPlaceholder || mProducerContext.isIntermediateResultExpected()) {\n+          mJobScheduler.scheduleJob();\n+        }\n+      } finally {\n+        FrescoSystrace.endSection();\n       }\n     }\n ",
      "parent_sha": "7b31d3c82abf1e49d242ce088da5530d385c12ad"
    }
  },
  {
    "oid": "97490184e1ec61e54613b0c3dd712175cade6a30",
    "message": "Make EncodedCacheKeyMultiplexProducer nullsafe\n\nReviewed By: defHLT\n\nDifferential Revision: D27708223\n\nfbshipit-source-id: 94dc505723a24d79ddaca3c10f0ad4ac360044c8",
    "date": "2021-04-12T17:56:14Z",
    "url": "https://github.com/facebook/fresco/commit/97490184e1ec61e54613b0c3dd712175cade6a30",
    "details": {
      "sha": "6e3ee82be6d002072486219934cfa0cd1deff113",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/producers/BitmapMemoryCacheKeyMultiplexProducer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/facebook/fresco/blob/97490184e1ec61e54613b0c3dd712175cade6a30/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FBitmapMemoryCacheKeyMultiplexProducer.java",
      "raw_url": "https://github.com/facebook/fresco/raw/97490184e1ec61e54613b0c3dd712175cade6a30/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FBitmapMemoryCacheKeyMultiplexProducer.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fproducers%2FBitmapMemoryCacheKeyMultiplexProducer.java?ref=97490184e1ec61e54613b0c3dd712175cade6a30",
      "patch": "@@ -13,8 +13,11 @@\n import com.facebook.imagepipeline.cache.CacheKeyFactory;\n import com.facebook.imagepipeline.image.CloseableImage;\n import com.facebook.imagepipeline.request.ImageRequest;\n+import com.facebook.infer.annotation.Nullsafe;\n+import javax.annotation.Nullable;\n \n /** Multiplex producer that uses the bitmap memory cache key to combine requests. */\n+@Nullsafe(Nullsafe.Mode.LOCAL)\n public class BitmapMemoryCacheKeyMultiplexProducer\n     extends MultiplexProducer<\n         Pair<CacheKey, ImageRequest.RequestLevel>, CloseableReference<CloseableImage>> {\n@@ -37,7 +40,7 @@ protected Pair<CacheKey, ImageRequest.RequestLevel> getKey(ProducerContext produ\n         producerContext.getLowestPermittedRequestLevel());\n   }\n \n-  public CloseableReference<CloseableImage> cloneOrNull(\n+  public @Nullable CloseableReference<CloseableImage> cloneOrNull(\n       CloseableReference<CloseableImage> closeableImage) {\n     return CloseableReference.cloneOrNull(closeableImage);\n   }",
      "parent_sha": "71ed8033b39dadb6a3c75e121056f09e8e9b3082"
    }
  },
  {
    "oid": "cc11c21a4b6c1c480743d94549e4660943cd8474",
    "message": "Fix the re-apply of rounding",
    "date": "2015-05-14T19:51:11Z",
    "url": "https://github.com/facebook/fresco/commit/cc11c21a4b6c1c480743d94549e4660943cd8474",
    "details": {
      "sha": "1d5ce0c0b7a22631663198391d3a93a5465bf50c",
      "filename": "drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/facebook/fresco/blob/cc11c21a4b6c1c480743d94549e4660943cd8474/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java",
      "raw_url": "https://github.com/facebook/fresco/raw/cc11c21a4b6c1c480743d94549e4660943cd8474/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fgeneric%2FGenericDraweeHierarchy.java?ref=cc11c21a4b6c1c480743d94549e4660943cd8474",
      "patch": "@@ -9,11 +9,8 @@\n \n package com.facebook.drawee.generic;\n \n-import javax.annotation.Nullable;\n-\n import android.content.res.Resources;\n import android.graphics.Canvas;\n-import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.Matrix;\n import android.graphics.PointF;\n@@ -39,6 +36,8 @@\n import com.facebook.drawee.drawable.VisibilityCallback;\n import com.facebook.drawee.interfaces.SettableDraweeHierarchy;\n \n+import javax.annotation.Nullable;\n+\n import static com.facebook.drawee.drawable.ScalingUtils.ScaleType;\n \n /**\n@@ -637,7 +636,7 @@ public void setRoundingParams(RoundingParams roundingParams) {\n         break;\n       case BITMAP_ONLY:\n         for (int i = 0; i < mFadeDrawable.getNumberOfLayers(); i++) {\n-          Drawable layer = mFadeDrawable.getDrawable(i);\n+          Drawable layer = getLayerChildDrawable(i);\n           if (layer instanceof Rounded) {\n             Rounded rounded = (Rounded) layer;\n             applyRoundingParams(rounded, roundingParams);",
      "parent_sha": "848af2566cd595d17ac63162217ec1ce24d76946"
    }
  },
  {
    "oid": "f15584ff59e741ffacb93f11bc03efec65eb361f",
    "message": "Pipeline systrace - Add markers to BufferedDiskCache\n\nReviewed By: oprisnik\n\nDifferential Revision: D9194940\n\nfbshipit-source-id: 46f38d0ca92f89972375523f6535c49e9e858b6e",
    "date": "2018-08-07T16:33:00Z",
    "url": "https://github.com/facebook/fresco/commit/f15584ff59e741ffacb93f11bc03efec65eb361f",
    "details": {
      "sha": "dcd59a2ac63ab83feee7fbacbe590604a279ed58",
      "filename": "imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java",
      "status": "modified",
      "additions": 83,
      "deletions": 64,
      "changes": 147,
      "blob_url": "https://github.com/facebook/fresco/blob/f15584ff59e741ffacb93f11bc03efec65eb361f/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCache.java",
      "raw_url": "https://github.com/facebook/fresco/raw/f15584ff59e741ffacb93f11bc03efec65eb361f/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCache.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/imagepipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fimagepipeline%2Fcache%2FBufferedDiskCache.java?ref=f15584ff59e741ffacb93f11bc03efec65eb361f",
      "patch": "@@ -19,6 +19,7 @@\n import com.facebook.common.memory.PooledByteStreams;\n import com.facebook.common.references.CloseableReference;\n import com.facebook.imagepipeline.image.EncodedImage;\n+import com.facebook.imagepipeline.systrace.FrescoSystrace;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -127,11 +128,16 @@ public boolean diskCheckSync(final CacheKey key) {\n    *   returned task never rethrows any exception\n    */\n   public Task<EncodedImage> get(CacheKey key, AtomicBoolean isCancelled) {\n-    final EncodedImage pinnedImage = mStagingArea.get(key);\n-    if (pinnedImage != null) {\n-      return foundPinnedImage(key, pinnedImage);\n+    try {\n+      FrescoSystrace.beginSection(\"BufferedDiskCache#get\");\n+      final EncodedImage pinnedImage = mStagingArea.get(key);\n+      if (pinnedImage != null) {\n+        return foundPinnedImage(key, pinnedImage);\n+      }\n+      return getAsync(key, isCancelled);\n+    } finally {\n+      FrescoSystrace.endSection();\n     }\n-    return getAsync(key, isCancelled);\n   }\n \n   /**\n@@ -163,40 +169,44 @@ private Task<EncodedImage> getAsync(final CacheKey key, final AtomicBoolean isCa\n       return Task.call(\n           new Callable<EncodedImage>() {\n             @Override\n-            public EncodedImage call()\n-                throws Exception {\n-              if (isCancelled.get()) {\n-                throw new CancellationException();\n-              }\n-              EncodedImage result = mStagingArea.get(key);\n-              if (result != null) {\n-                FLog.v(TAG, \"Found image for %s in staging area\", key.getUriString());\n-                mImageCacheStatsTracker.onStagingAreaHit(key);\n-              } else {\n-                FLog.v(TAG, \"Did not find image for %s in staging area\", key.getUriString());\n-                mImageCacheStatsTracker.onStagingAreaMiss();\n+            public EncodedImage call() throws Exception {\n+              try {\n+                FrescoSystrace.beginSection(\"BufferedDiskCache#getAsync\");\n+                if (isCancelled.get()) {\n+                  throw new CancellationException();\n+                }\n+                EncodedImage result = mStagingArea.get(key);\n+                if (result != null) {\n+                  FLog.v(TAG, \"Found image for %s in staging area\", key.getUriString());\n+                  mImageCacheStatsTracker.onStagingAreaHit(key);\n+                } else {\n+                  FLog.v(TAG, \"Did not find image for %s in staging area\", key.getUriString());\n+                  mImageCacheStatsTracker.onStagingAreaMiss();\n \n-                try {\n-                  final PooledByteBuffer buffer = readFromDiskCache(key);\n-                  CloseableReference<PooledByteBuffer> ref = CloseableReference.of(buffer);\n                   try {\n-                    result = new EncodedImage(ref);\n-                  } finally {\n-                    CloseableReference.closeSafely(ref);\n+                    final PooledByteBuffer buffer = readFromDiskCache(key);\n+                    CloseableReference<PooledByteBuffer> ref = CloseableReference.of(buffer);\n+                    try {\n+                      result = new EncodedImage(ref);\n+                    } finally {\n+                      CloseableReference.closeSafely(ref);\n+                    }\n+                  } catch (Exception exception) {\n+                    return null;\n                   }\n-                } catch (Exception exception) {\n-                  return null;\n                 }\n-              }\n \n-              if (Thread.interrupted()) {\n-                FLog.v(TAG, \"Host thread was interrupted, decreasing reference count\");\n-                if (result != null) {\n-                  result.close();\n+                if (Thread.interrupted()) {\n+                  FLog.v(TAG, \"Host thread was interrupted, decreasing reference count\");\n+                  if (result != null) {\n+                    result.close();\n+                  }\n+                  throw new InterruptedException();\n+                } else {\n+                  return result;\n                 }\n-                throw new InterruptedException();\n-              } else {\n-                return result;\n+              } finally {\n+                FrescoSystrace.endSection();\n               }\n             }\n           },\n@@ -220,39 +230,43 @@ public EncodedImage call()\n   public void put(\n       final CacheKey key,\n       EncodedImage encodedImage) {\n-    Preconditions.checkNotNull(key);\n-    Preconditions.checkArgument(EncodedImage.isValid(encodedImage));\n+    try {\n+      FrescoSystrace.beginSection(\"BufferedDiskCache#put\");\n+      Preconditions.checkNotNull(key);\n+      Preconditions.checkArgument(EncodedImage.isValid(encodedImage));\n \n-    // Store encodedImage in staging area\n-    mStagingArea.put(key, encodedImage);\n+      // Store encodedImage in staging area\n+      mStagingArea.put(key, encodedImage);\n \n-    // Write to disk cache. This will be executed on background thread, so increment the ref count.\n-    // When this write completes (with success/failure), then we will bump down the ref count\n-    // again.\n-    final EncodedImage finalEncodedImage = EncodedImage.cloneOrNull(encodedImage);\n-    try {\n-      mWriteExecutor.execute(\n-          new Runnable() {\n-            @Override\n-            public void run() {\n-              try {\n-                writeToDiskCache(key, finalEncodedImage);\n-              } finally {\n-                mStagingArea.remove(key, finalEncodedImage);\n-                EncodedImage.closeSafely(finalEncodedImage);\n+      // Write to disk cache. This will be executed on background thread, so increment the ref\n+      // count. When this write completes (with success/failure), then we will bump down the\n+      // ref count again.\n+      final EncodedImage finalEncodedImage = EncodedImage.cloneOrNull(encodedImage);\n+      try {\n+\n+        mWriteExecutor.execute(\n+            new Runnable() {\n+              @Override\n+              public void run() {\n+                try {\n+                  FrescoSystrace.beginSection(\"BufferedDiskCache#putAsync\");\n+                  writeToDiskCache(key, finalEncodedImage);\n+                } finally {\n+                  mStagingArea.remove(key, finalEncodedImage);\n+                  EncodedImage.closeSafely(finalEncodedImage);\n+                  FrescoSystrace.endSection();\n+                }\n               }\n-            }\n-          });\n-    } catch (Exception exception) {\n-      // We failed to enqueue cache write. Log failure and decrement ref count\n-      // TODO: 3697790\n-      FLog.w(\n-          TAG,\n-          exception,\n-          \"Failed to schedule disk-cache write for %s\",\n-          key.getUriString());\n-      mStagingArea.remove(key, encodedImage);\n-      EncodedImage.closeSafely(finalEncodedImage);\n+            });\n+      } catch (Exception exception) {\n+        // We failed to enqueue cache write. Log failure and decrement ref count\n+        // TODO: 3697790\n+        FLog.w(TAG, exception, \"Failed to schedule disk-cache write for %s\", key.getUriString());\n+        mStagingArea.remove(key, encodedImage);\n+        EncodedImage.closeSafely(finalEncodedImage);\n+      }\n+    } finally {\n+      FrescoSystrace.endSection();\n     }\n   }\n \n@@ -267,8 +281,13 @@ public Task<Void> remove(final CacheKey key) {\n           new Callable<Void>() {\n             @Override\n             public Void call() throws Exception {\n-              mStagingArea.remove(key);\n-              mFileCache.remove(key);\n+              try {\n+                FrescoSystrace.beginSection(\"BufferedDiskCache#remove\");\n+                mStagingArea.remove(key);\n+                mFileCache.remove(key);\n+              } finally {\n+                FrescoSystrace.endSection();\n+              }\n               return null;\n             }\n           },",
      "parent_sha": "a7873dc6515853df257b3414d9cb1e0c7aa7d09d"
    }
  },
  {
    "oid": "554530468d218b6d9abd7f66a8821b08d7af4b03",
    "message": "Fixed potential NPE for DraweeConfig without custom drawable factories\n\nSummary: `ImmutableList.copyOf` does not support `null` as a parameter.\n\nReviewed By: massimocarli\n\nDifferential Revision: D3900303\n\nfbshipit-source-id: a6723583317f16bf16c41969f41a32bfb23546c7",
    "date": "2016-09-22T10:45:16Z",
    "url": "https://github.com/facebook/fresco/commit/554530468d218b6d9abd7f66a8821b08d7af4b03",
    "details": {
      "sha": "3c39b6bbfaa14be1566d46e93ec5fce716fa1940",
      "filename": "drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/DraweeConfig.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/facebook/fresco/blob/554530468d218b6d9abd7f66a8821b08d7af4b03/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FDraweeConfig.java",
      "raw_url": "https://github.com/facebook/fresco/raw/554530468d218b6d9abd7f66a8821b08d7af4b03/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FDraweeConfig.java",
      "contents_url": "https://api.github.com/repos/facebook/fresco/contents/drawee-backends%2Fdrawee-pipeline%2Fsrc%2Fmain%2Fjava%2Fcom%2Ffacebook%2Fdrawee%2Fbackends%2Fpipeline%2FDraweeConfig.java?ref=554530468d218b6d9abd7f66a8821b08d7af4b03",
      "patch": "@@ -8,6 +8,8 @@\n  */\n package com.facebook.drawee.backends.pipeline;\n \n+import javax.annotation.Nullable;\n+\n import com.facebook.common.internal.ImmutableList;\n \n import java.util.ArrayList;\n@@ -18,12 +20,16 @@\n  */\n public class DraweeConfig {\n \n+  @Nullable\n   private final ImmutableList<DrawableFactory> mCustomDrawableFactories;\n \n   private DraweeConfig(Builder builder) {\n-    mCustomDrawableFactories = ImmutableList.copyOf(builder.mCustomDrawableFactories);\n+    mCustomDrawableFactories = builder.mCustomDrawableFactories != null\n+        ? ImmutableList.copyOf(builder.mCustomDrawableFactories)\n+        : null;\n   }\n \n+  @Nullable\n   public ImmutableList<DrawableFactory> getCustomDrawableFactories() {\n     return mCustomDrawableFactories;\n   }",
      "parent_sha": "b74da9e78f47db5baaba419f2fea606607d6cb4b"
    }
  }
]