[
  {
    "oid": "7886016dd1022afd9717a4b30b7e149ef8f61dca",
    "message": "Test added to TsvCsvImporterTests for multiple blank lines in quoted CSV value, see issue #19.  Test does not pass, so is enabled=false and grouped as 'broken'.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@794 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-05-17T07:03:19Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/7886016dd1022afd9717a4b30b7e149ef8f61dca",
    "details": {
      "sha": "b8e50a71194952648dbd65e334709280558049ba",
      "filename": "tests/java/src/com/metaweb/gridworks/tests/importers/TsvCsvImporterTests.java",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/7886016dd1022afd9717a4b30b7e149ef8f61dca/tests%2Fjava%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Ftests%2Fimporters%2FTsvCsvImporterTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/7886016dd1022afd9717a4b30b7e149ef8f61dca/tests%2Fjava%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Ftests%2Fimporters%2FTsvCsvImporterTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/tests%2Fjava%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Ftests%2Fimporters%2FTsvCsvImporterTests.java?ref=7886016dd1022afd9717a4b30b7e149ef8f61dca",
      "patch": "@@ -345,7 +345,7 @@ public void readIgnore3_Header2_Skip2_limit2(){\n         Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data-row1-cell1\");\n         Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data-row1-cell2\");\n         Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data-row1-cell3\");\n-        Assert.assertEquals(project.rows.get(1).cells.size(), 3);\n+        Assert.assertEquals(project.rows.get(1).cells.size(), 2);\n         Assert.assertEquals(project.rows.get(1).cells.get(0).value, \"data-row2-cell1\");\n         Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"data-row2-cell2\");\n     }\n@@ -369,6 +369,26 @@ public void readWithMultiLinedQuotedData(){\n         Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"\\\"To\\n Be\\\" is often followed by \\\"or not To\\n Be\\\"\");\n         Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n     }\n+    \n+    @Test(enabled=false, groups={\"broken\"})\n+    public void readWithMultiLinedQuotedDataAndBlankLines(){\n+        String input = \"col1,col2,col3\\n\" +\n+            \"\\\"\\\"\\\"To\\n Be\\\"\\\" is often followed by \\\"\\\"or not To\\n\\n\\n\\n\\n Be\\\"\\\"\\\",data2\";\n+        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));\n+        try {\n+            SUT.read(lnReader, project, null, -1, 0, 0, 1, false, true);\n+        } catch (IOException e) {\n+            Assert.fail();\n+        }\n+        Assert.assertEquals(project.columnModel.columns.size(), 3);\n+        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n+        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n+        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n+        Assert.assertEquals(project.rows.size(), 1);\n+        Assert.assertEquals(project.rows.get(0).cells.size(), 2);\n+        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"\\\"To\\n Be\\\" is often followed by \\\"or not To\\n\\n\\n\\n\\n Be\\\"\");\n+        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n+    }\n \n     //---------------------read tests------------------------\n     @Test",
      "parent_sha": "075e98586526a31e098e167f0c82cb012043a21d"
    }
  },
  {
    "oid": "65c5aea079b45bcfbf29654ef7e9ea66dd912945",
    "message": "set the internal version by hand, this is done to avoid NPE after reloads but also because it's only used to version the data dumps so the granularity of svn revisions was too high anyway\n\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@380 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-04-03T17:01:04Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/65c5aea079b45bcfbf29654ef7e9ea66dd912945",
    "details": {
      "sha": "a9755240a00b41126230a4b33be76f69f3f8f8cb",
      "filename": "src/server/java/com/metaweb/gridworks/Gridworks.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/65c5aea079b45bcfbf29654ef7e9ea66dd912945/src%2Fserver%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FGridworks.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/65c5aea079b45bcfbf29654ef7e9ea66dd912945/src%2Fserver%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FGridworks.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fserver%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FGridworks.java?ref=65c5aea079b45bcfbf29654ef7e9ea66dd912945",
      "patch": "@@ -36,7 +36,7 @@\n \n public class Gridworks {\n     \n-    static private String version;\n+    static private final String version = \"1.0a\";\n     static private File tempDir;\n     \n     private static Logger root = Logger.getRootLogger();\n@@ -88,8 +88,6 @@ public static void main(String[] args) throws Exception  {\n         Logger jetty_logger = Logger.getLogger(\"org.mortbay.log\");\n         jetty_logger.setLevel(Level.WARN);\n \n-        version = Configurations.get(\"gridworks.version\",\"trunk\");\n-\n         tempDir = new File(Configurations.get(\"gridworks.temp\",\"temp\"));\n         if (!tempDir.exists()) tempDir.mkdirs();\n         ",
      "parent_sha": "7cf4f2e5e40d686bb32a6eeeb204846b2f0b4543"
    }
  },
  {
    "oid": "69a7cb2832b5b4e7b5aa2af36ced495942a23138",
    "message": "Change behaviour in case of network failure: finish operation without throwing an exception. Closes #2205",
    "date": "2019-11-06T19:28:39Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/69a7cb2832b5b4e7b5aa2af36ced495942a23138",
    "details": {
      "sha": "6f5ec06605a32d4970e7219c8bfca8fddde799cf",
      "filename": "extensions/wikidata/src/org/openrefine/wikidata/editing/EditBatchProcessor.java",
      "status": "modified",
      "additions": 16,
      "deletions": 8,
      "changes": 24,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/69a7cb2832b5b4e7b5aa2af36ced495942a23138/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fediting%2FEditBatchProcessor.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/69a7cb2832b5b4e7b5aa2af36ced495942a23138/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fediting%2FEditBatchProcessor.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fediting%2FEditBatchProcessor.java?ref=69a7cb2832b5b4e7b5aa2af36ced495942a23138",
      "patch": "@@ -163,9 +163,10 @@ public void performEdit()\n             }\n         } catch (MediaWikiApiErrorException e) {\n             // TODO find a way to report these errors to the user in a nice way\n-            e.printStackTrace();\n+            logger.warn(\"MediaWiki error while editing [\" + e.getErrorCode()\n+            + \"]: \" + e.getErrorMessage());\n         } catch (IOException e) {\n-            e.printStackTrace();\n+            logger.warn(\"IO error while editing: \" + e.getMessage());\n         }\n \n         batchCursor++;\n@@ -203,22 +204,29 @@ protected void prepareNewBatch()\n         // Get the current documents for this batch of updates\n         logger.info(\"Requesting documents\");\n         currentDocs = null;\n-        int retries = 3;\n+        int retries = 5;\n+        int backoff = 2;\n+        int sleepTime = 5000;\n         // TODO: remove currentDocs.isEmpty() once https://github.com/Wikidata/Wikidata-Toolkit/issues/402 is solved\n         while ((currentDocs == null || currentDocs.isEmpty()) && retries > 0) {\n             try {\n                 currentDocs = fetcher.getEntityDocuments(qidsToFetch);\n             } catch (MediaWikiApiErrorException e) {\n-                e.printStackTrace();\n-                Thread.sleep(5000);\n+                logger.warn(\"MediaWiki error while fetching documents to edit [\" + e.getErrorCode()\n+                                                + \"]: \" + e.getErrorMessage());\n             } catch (IOException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t\tThread.sleep(5000);\n+                logger.warn(\"IO error while fetching documents to edit: \" + e.getMessage());\n \t\t\t}\n             retries--;\n+            sleepTime *= backoff;\n+            if ((currentDocs == null || currentDocs.isEmpty()) && retries > 0) {\n+                logger.warn(\"Retrying in \" + sleepTime + \" ms\");\n+                Thread.sleep(sleepTime);\n+            }\n         }\n         if (currentDocs == null) {\n-            throw new InterruptedException(\"Fetching current documents failed.\");\n+            logger.warn(\"Giving up on fetching documents to edit. Skipping \"+remainingEdits()+\" remaining edits.\");\n+            globalCursor = scheduled.size();\n         }\n         batchCursor = 0;\n     }",
      "parent_sha": "11c778823943f327d865a639116f56e0cc6383fd"
    }
  },
  {
    "oid": "3e08aca4ec81fd036d12115c3f83dd39885fc818",
    "message": "Issue 304 - Apply patch to fix test.  Thanks to GabrielS\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2001 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-02-04T04:55:05Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/3e08aca4ec81fd036d12115c3f83dd39885fc818",
    "details": {
      "sha": "dc130ef789651ac1b56987f46989dc5841219bb7",
      "filename": "main/tests/server/src/com/google/refine/tests/exporters/CsvExporterTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/3e08aca4ec81fd036d12115c3f83dd39885fc818/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexporters%2FCsvExporterTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/3e08aca4ec81fd036d12115c3f83dd39885fc818/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexporters%2FCsvExporterTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexporters%2FCsvExporterTests.java?ref=3e08aca4ec81fd036d12115c3f83dd39885fc818",
      "patch": "@@ -198,7 +198,7 @@ public void exportCsvWithEmptyCells(){\n     \r\n     @Test\r\n     public void exportDateColumns(){\r\n-        CreateGrid(1,1);\r\n+        CreateGrid(1,2);\r\n         Calendar calendar = Calendar.getInstance();\r\n         Date date = new Date();\r\n \r",
      "parent_sha": "06e2487189d5c2e97cbe0cd54c9d6cccbde3bda6"
    }
  },
  {
    "oid": "44652a3ee2b3618153a3bda2c5e4a1a995051915",
    "message": "Make copy of Calendar object before modifying it. Also handle Date type.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1982 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-01-10T23:06:28Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/44652a3ee2b3618153a3bda2c5e4a1a995051915",
    "details": {
      "sha": "cbf178560a85101242ed4dcadf108ef503a2e5d2",
      "filename": "main/src/com/google/refine/expr/functions/date/Inc.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/44652a3ee2b3618153a3bda2c5e4a1a995051915/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fdate%2FInc.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/44652a3ee2b3618153a3bda2c5e4a1a995051915/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fdate%2FInc.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fdate%2FInc.java?ref=44652a3ee2b3618153a3bda2c5e4a1a995051915",
      "patch": "@@ -34,6 +34,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n package com.google.refine.expr.functions.date;\n \n import java.util.Calendar;\n+import java.util.Date;\n import java.util.Properties;\n \n import org.json.JSONException;\n@@ -47,10 +48,17 @@ public class Inc implements Function {\n \n     public Object call(Properties bindings, Object[] args) {\n         if (args.length == 3 && \n-                args[0] != null && args[0] instanceof Calendar && \n+                args[0] != null && (args[0] instanceof Calendar || args[0] instanceof Date) && \n                 args[1] != null && args[1] instanceof Number && \n                 args[2] != null && args[2] instanceof String) {\n-            Calendar date = (Calendar) args[0];\n+            Calendar date;\n+            if (args[0] instanceof Calendar) {\n+                date = (Calendar) ((Calendar) args[0]).clone(); // must copy so not to modify original\n+            } else {\n+                date = Calendar.getInstance();\n+                date.setTime((Date) args[0]);\n+            }\n+            \n             int amount = ((Number) args[1]).intValue();\n             String unit = (String) args[2];\n             ",
      "parent_sha": "4d84733b8e1162b55f9476d1a9b59d3111caa288"
    }
  },
  {
    "oid": "2c52a00f55773ecac68ff9fdb2e1c7641b320d9b",
    "message": "Fixed - issue 544,600,618: Clean up handling of compressed files & archives with multi-segment paths\nhttp://code.google.com/p/google-refine/issues/detail?id=600\n\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2569 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2012-09-22T18:08:56Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/2c52a00f55773ecac68ff9fdb2e1c7641b320d9b",
    "details": {
      "sha": "d908249b027a6772c2c478bd0db08e92d1f7d1f3",
      "filename": "main/src/com/google/refine/importing/ImportingUtilities.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/2c52a00f55773ecac68ff9fdb2e1c7641b320d9b/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/2c52a00f55773ecac68ff9fdb2e1c7641b320d9b/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java?ref=2c52a00f55773ecac68ff9fdb2e1c7641b320d9b",
      "patch": "@@ -313,7 +313,7 @@ public void update(long bytesRead, long contentLength, int itemCount) {\n                         progress.setProgress(\"Saving \" + urlString + \" locally\",\n                             calculateProgressPercent(update.totalExpectedSize, update.totalRetrievedSize));\n                         \n-                        if (postProcessRetrievedFile(file, fileRecord, fileRecords, progress)) {\n+                        if (postProcessRetrievedFile(rawDataDir, file, fileRecord, fileRecords, progress)) {\n                             archiveCount++;\n                         }\n \n@@ -348,7 +348,7 @@ public void update(long bytesRead, long contentLength, int itemCount) {\n                         calculateProgressPercent(update.totalExpectedSize, update.totalRetrievedSize));\n                     \n                     JSONUtilities.safePut(fileRecord, \"size\", saveStreamToFile(stream, file, null));\n-                    if (postProcessRetrievedFile(file, fileRecord, fileRecords, progress)) {\n+                    if (postProcessRetrievedFile(rawDataDir, file, fileRecord, fileRecords, progress)) {\n                         archiveCount++;\n                     }\n                     \n@@ -441,7 +441,7 @@ static public long saveStreamToFile(InputStream stream, File file, SavingUpdate\n         long length = 0;\n         FileOutputStream fos = new FileOutputStream(file);\n         try {\n-            byte[] bytes = new byte[4096];\n+            byte[] bytes = new byte[16*1024];\n             int c;\n             while ((update == null || !update.isCanceled()) && (c = stream.read(bytes)) > 0) {\n                 fos.write(bytes, 0, c);\n@@ -459,11 +459,10 @@ static public long saveStreamToFile(InputStream stream, File file, SavingUpdate\n     }\n     \n     static public boolean postProcessRetrievedFile(\n-            File file, JSONObject fileRecord, JSONArray fileRecords, final Progress progress) {\n+            File rawDataDir, File file, JSONObject fileRecord, JSONArray fileRecords, final Progress progress) {\n         \n         String mimeType = JSONUtilities.getString(fileRecord, \"declaredMimeType\", null);\n         String contentEncoding = JSONUtilities.getString(fileRecord, \"declaredEncoding\", null);\n-        File rawDataDir = file.getParentFile();\n         \n         InputStream archiveIS = tryOpenAsArchive(file, mimeType, contentEncoding);\n         if (archiveIS != null) {\n@@ -651,19 +650,22 @@ static public File uncompressFile(\n         JSONObject fileRecord,\n         final Progress progress\n     ) throws IOException {\n-        String fileName = JSONUtilities.getString(fileRecord, \"fileName\", \"unknown\");\n+        String fileName = JSONUtilities.getString(fileRecord, \"location\", \"unknown\");\n+        for (String ext : new String[] {\".gz\",\".bz2\"}) {\n+            if (fileName.endsWith(ext)) {\n+                fileName = fileName.substring(0, fileName.length()-ext.length());\n+                break;\n+            }\n+        }\n         File file2 = allocateFile(rawDataDir, fileName);\n         \n         progress.setProgress(\"Uncompressing \" + fileName, -1);\n         \n         saveStreamToFile(uncompressedIS, file2, null);\n         \n         JSONUtilities.safePut(fileRecord, \"declaredEncoding\", (String) null);\n-        // TODO: Why is MIME type cleared here?\n         JSONUtilities.safePut(fileRecord, \"declaredMimeType\", (String) null);\n-        String location = JSONUtilities.getString(fileRecord, \"location\", \"\");\n-        location = location.substring(0,location.lastIndexOf('/')) + \"/\" + file2;\n-        JSONUtilities.safePut(fileRecord, \"location\", location);\n+        JSONUtilities.safePut(fileRecord, \"location\", getRelativePath(file2, rawDataDir));\n         \n         return file2;\n     }",
      "parent_sha": "748e205ae8b5c5a3a8b6c461ec5bbf604900b985"
    }
  },
  {
    "oid": "17e54dce1e1b83f1e6cdcd366b0d2c96f0a209dd",
    "message": "fix issue #873",
    "date": "2015-09-23T14:29:30Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/17e54dce1e1b83f1e6cdcd366b0d2c96f0a209dd",
    "details": {
      "sha": "eaeb3a7a5f37f52a914986af24938b896e76e2b2",
      "filename": "server/src/com/google/refine/Refine.java",
      "status": "modified",
      "additions": 522,
      "deletions": 522,
      "changes": 1044,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/17e54dce1e1b83f1e6cdcd366b0d2c96f0a209dd/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/17e54dce1e1b83f1e6cdcd366b0d2c96f0a209dd/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java?ref=17e54dce1e1b83f1e6cdcd366b0d2c96f0a209dd",
      "patch": "@@ -1,522 +1,522 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine;\n-\n-import java.awt.Desktop;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-import java.io.File;\n-import java.io.FileFilter;\n-import java.io.IOException;\n-import java.lang.reflect.Method;\n-import java.net.BindException;\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.concurrent.LinkedBlockingQueue;\n-import java.util.concurrent.ThreadPoolExecutor;\n-import java.util.concurrent.TimeUnit;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-\n-import org.apache.log4j.Level;\n-import org.mortbay.jetty.Connector;\n-import org.mortbay.jetty.Server;\n-import org.mortbay.jetty.bio.SocketConnector;\n-import org.mortbay.jetty.servlet.ServletHolder;\n-import org.mortbay.jetty.webapp.WebAppContext;\n-import org.mortbay.util.Scanner;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.codeberry.jdatapath.DataPath;\n-import com.codeberry.jdatapath.JDataPathSystem;\n-\n-import com.google.util.threads.ThreadPoolExecutorAdapter;\n-\n-/**\n- * Main class for Refine server application.  Starts an instance of the\n- * Jetty HTTP server / servlet container (inner class Refine Server).\n- */\n-public class Refine {\n-    \n-    static private final String DEFAULT_HOST = \"127.0.0.1\";\n-    static private final int DEFAULT_PORT = 3333;\n-        \n-    static private int port;\n-    static private String host;\n-\n-    final static Logger logger = LoggerFactory.getLogger(\"refine\");\n-        \n-    public static void main(String[] args) throws Exception {\n-        \n-        // tell jetty to use SLF4J for logging instead of its own stuff\n-        System.setProperty(\"VERBOSE\",\"false\");\n-        System.setProperty(\"org.mortbay.log.class\",\"org.mortbay.log.Slf4jLog\");\n-        \n-        // tell macosx to keep the menu associated with the screen and what the app title is\n-        System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");  \n-        System.setProperty(\"com.apple.eawt.CocoaComponent.CompatibilityMode\", \"false\"); \n-        System.setProperty(\"com.apple.mrj.application.apple.menu.about.name\", \"OpenRefine\");\n-        \n-        // tell the signpost library to log\n-        //System.setProperty(\"debug\",\"true\");\n-        \n-        // set the log verbosity level\n-        org.apache.log4j.Logger.getRootLogger().setLevel(Level.toLevel(Configurations.get(\"refine.verbosity\",\"info\")));\n-\n-        port = Configurations.getInteger(\"refine.port\",DEFAULT_PORT);\n-        host = Configurations.get(\"refine.host\",DEFAULT_HOST);\n-\n-        Refine refine = new Refine();\n-        \n-        refine.init(args);\n-    }\n-\n-    public void init(String[] args) throws Exception {\n-\n-        RefineServer server = new RefineServer();\n-        server.init(host,port);\n-\n-        boolean headless = Configurations.getBoolean(\"refine.headless\",false);\n-        if (headless) {\n-            System.setProperty(\"java.awt.headless\", \"true\");\n-            logger.info(\"Running in headless mode\");\n-        } else {\n-            try {\n-                RefineClient client = new RefineClient();\n-                client.init(host,port);\n-            } catch (Exception e) {\n-                logger.warn(\"Sorry, some error prevented us from launching the browser for you.\\n\\n Point your browser to http://\" + host + \":\" + port + \"/ to start using Refine.\");\n-            }\n-        }\n-        \n-        // hook up the signal handlers\n-        Runtime.getRuntime().addShutdownHook(\n-            new Thread(new ShutdownSignalHandler(server))\n-        );\n- \n-        server.join();\n-    }\n-}\n-\n-/* -------------- Refine Server ----------------- */\n-\n-class RefineServer extends Server {\n-    \n-    final static Logger logger = LoggerFactory.getLogger(\"refine_server\");\n-        \n-    private ThreadPoolExecutor threadPool;\n-    \n-    public void init(String host, int port) throws Exception {\n-        logger.info(\"Starting Server bound to '\" + host + \":\" + port + \"'\");\n-\n-        String memory = Configurations.get(\"refine.memory\");\n-        if (memory != null) {\n-            logger.info(\"refine.memory size: \" + memory + \" JVM Max heap: \" + Runtime.getRuntime().maxMemory());\n-        }\n-        \n-        int maxThreads = Configurations.getInteger(\"refine.queue.size\", 30);\n-        int maxQueue = Configurations.getInteger(\"refine.queue.max_size\", 300);\n-        long keepAliveTime = Configurations.getInteger(\"refine.queue.idle_time\", 60);\n-\n-        LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<Runnable>(maxQueue);\n-        \n-        threadPool = new ThreadPoolExecutor(maxThreads, maxQueue, keepAliveTime, TimeUnit.SECONDS, queue);\n-\n-        this.setThreadPool(new ThreadPoolExecutorAdapter(threadPool));\n-        \n-        Connector connector = new SocketConnector();\n-        connector.setPort(port);\n-        connector.setHost(host);\n-        connector.setMaxIdleTime(Configurations.getInteger(\"refine.connection.max_idle_time\",60000));\n-        connector.setStatsOn(false);\n-        this.addConnector(connector);\n-\n-        File webapp = new File(Configurations.get(\"refine.webapp\",\"main/webapp\"));\n-\n-        if (!isWebapp(webapp)) {\n-            webapp = new File(\"main/webapp\");\n-            if (!isWebapp(webapp)) {\n-                webapp = new File(\"webapp\");\n-                if (!isWebapp(webapp)) {\n-                    logger.warn(\"Warning: Failed to find web application at '\" + webapp.getAbsolutePath() + \"'\");\n-                    System.exit(-1);\n-                }\n-            }\n-        }\n-\n-        final String contextPath = Configurations.get(\"refine.context_path\",\"/\");\n-        final int maxFormContentSize = Configurations.getInteger(\"refine.max_form_content_size\", 1048576);\n-        \n-        logger.info(\"Initializing context: '\" + contextPath + \"' from '\" + webapp.getAbsolutePath() + \"'\");\n-        WebAppContext context = new WebAppContext(webapp.getAbsolutePath(), contextPath);\n-        context.setMaxFormContentSize(maxFormContentSize);\n-\n-        this.setHandler(context);\n-        this.setStopAtShutdown(true);\n-        this.setSendServerVersion(true);\n-\n-        // Enable context autoreloading\n-        if (Configurations.getBoolean(\"refine.autoreload\",false)) {\n-            scanForUpdates(webapp, context);\n-        }\n-        \n-        // start the server\n-        try {\n-            this.start();\n-        } catch (BindException e) {\n-            logger.error(\"Failed to start server - is there another copy running already on this port/address?\");\n-            throw e;\n-        }\n-        \n-        configure(context);\n-    }\n-    \n-    @Override\n-    protected void doStop() throws Exception {    \n-        try {\n-            // shutdown our scheduled tasks first, if any\n-            if (threadPool != null) {\n-                threadPool.shutdown();\n-            }\n-            \n-            // then let the parent stop\n-            super.doStop();\n-        } catch (InterruptedException e) {\n-            // ignore\n-        }\n-    }\n-        \n-    static private boolean isWebapp(File dir) {\n-        if (dir == null) {\n-            return false;\n-        }\n-        if (!dir.exists() || !dir.canRead()) {\n-            return false;\n-        }\n-        File webXml = new File(dir, \"WEB-INF/web.xml\");\n-        return webXml.exists() && webXml.canRead();\n-    }\n-    \n-    static private void scanForUpdates(final File contextRoot, final WebAppContext context) {\n-        List<File> scanList = new ArrayList<File>();\n-\n-        scanList.add(new File(contextRoot, \"WEB-INF/web.xml\"));\n-        findFiles(\".class\", new File(contextRoot, \"WEB-INF/classes\"), scanList);\n-        findFiles(\".jar\", new File(contextRoot, \"WEB-INF/lib\"), scanList);\n-\n-        logger.info(\"Starting autoreloading scanner... \");\n-\n-        Scanner scanner = new Scanner();\n-        scanner.setScanInterval(Configurations.getInteger(\"refine.scanner.period\",1));\n-        scanner.setScanDirs(scanList);\n-        scanner.setReportExistingFilesOnStartup(false);\n-\n-        scanner.addListener(new Scanner.BulkListener() {\n-            @Override\n-            public void filesChanged(@SuppressWarnings(\"rawtypes\") List changedFiles) {\n-                try {\n-                    logger.info(\"Stopping context: \" + contextRoot.getAbsolutePath());\n-                    context.stop();\n-\n-                    logger.info(\"Starting context: \" + contextRoot.getAbsolutePath());\n-                    context.start();\n-                    \n-                    configure(context);\n-                } catch (Exception ex) {\n-                    throw new RuntimeException(ex);\n-                }\n-            }\n-        });\n-\n-        scanner.start();\n-    }\n-    \n-    static private void findFiles(final String extension, File baseDir, final Collection<File> found) {\n-        baseDir.listFiles(new FileFilter() {\n-            @Override\n-            public boolean accept(File pathname) {\n-                if (pathname.isDirectory()) {\n-                    findFiles(extension, pathname, found);\n-                } else if (pathname.getName().endsWith(extension)) {\n-                    found.add(pathname);\n-                }\n-                return false;\n-            }\n-        });\n-    }\n-\n-    // inject configuration parameters in the servlets\n-    // NOTE: this is done *after* starting the server because jetty might override the init\n-    // parameters if we set them in the webapp context upon reading the web.xml file    \n-    static private void configure(WebAppContext context) throws Exception {\n-        ServletHolder servlet = context.getServletHandler().getServlet(\"refine\");\n-        if (servlet != null) {\n-            servlet.setInitParameter(\"refine.data\", getDataDir());\n-            servlet.setInitParameter(\"butterfly.modules.path\", getDataDir() + \"/extensions\");\n-            servlet.setInitOrder(1);\n-            servlet.doStart();\n-        }\n-\n-        servlet = context.getServletHandler().getServlet(\"refine-broker\");\n-        if (servlet != null) {\n-            servlet.setInitParameter(\"refine.data\", getDataDir() + \"/broker\");\n-            servlet.setInitParameter(\"refine.development\", Configurations.get(\"refine.development\",\"false\"));\n-            servlet.setInitOrder(1);\n-            servlet.doStart();\n-        }\n-    }\n-\n-    static private String getDataDir() {\n-        String data_dir = Configurations.get(\"refine.data_dir\");\n-        if (data_dir != null) {\n-            return data_dir;\n-        }\n-        \n-        File dataDir = null;\n-        File grefineDir = null;\n-        File gridworksDir = null;\n-        \n-        String os = System.getProperty(\"os.name\").toLowerCase();\n-        if (os.contains(\"windows\")) {\n-            try {\n-                // NOTE(SM): finding the \"local data app\" in windows from java is actually a PITA\n-                // see http://stackoverflow.com/questions/1198911/how-to-get-local-application-data-folder-in-java\n-                // so we're using a library that uses JNI to ask directly the win32 APIs, \n-                // it's not elegant but it's the safest bet.\n-                \n-                dataDir = new File(fixWindowsUnicodePath(JDataPathSystem.getLocalSystem()\n-                        .getLocalDataPath(\"OpenRefine\").getPath()));\n-\n-                DataPath localDataPath = JDataPathSystem.getLocalSystem().getLocalDataPath(\"Google\");\n-\n-                // new: ./Google/Refine old: ./Gridworks\n-                grefineDir = new File(new File(fixWindowsUnicodePath(localDataPath.getPath())), \"Refine\");\n-                gridworksDir = new File(fixWindowsUnicodePath(JDataPathSystem.getLocalSystem()\n-                        .getLocalDataPath(\"Gridworks\").getPath()));\n-            } catch (Error e) {\n-                /*\n-                 *  The above trick can fail, particularly on a 64-bit OS as the jdatapath.dll\n-                 *  we include is compiled for 32-bit. In this case, we just have to dig up\n-                 *  environment variables and try our best to find a user-specific path.\n-                 */\n-                \n-                logger.warn(\"Failed to use jdatapath to detect user data path: resorting to environment variables\");\n-                \n-                File parentDir = null;\n-                String appData = System.getenv(\"APPDATA\"); \n-                if (appData != null && appData.length() > 0) {\n-                    // e.g., C:\\Users\\[userid]\\AppData\\Roaming\n-                    parentDir = new File(appData);\n-                } else {\n-                    String userProfile = System.getenv(\"USERPROFILE\");\n-                    if (userProfile != null && userProfile.length() > 0) {\n-                        // e.g., C:\\Users\\[userid]\n-                        parentDir = new File(userProfile);\n-                    }\n-                }\n-\n-                if (parentDir == null) {\n-                    parentDir = new File(\".\");\n-                }\n-                \n-                dataDir = new File(parentDir, \"OpenRefine\");\n-                grefineDir = new File(new File(parentDir, \"Google\"), \"Refine\");\n-                gridworksDir = new File(parentDir, \"Gridworks\");\n-            }\n-        } else if (os.contains(\"mac os x\")) {\n-            // on macosx, use \"~/Library/Application Support\"\n-            String home = System.getProperty(\"user.home\");\n-            \n-            String data_home = (home != null) ? home + \"/Library/Application Support/OpenRefine\" : \".openrefine\";\n-            dataDir = new File(data_home);\n-            \n-            String grefine_home = (home != null) ? home + \"/Library/Application Support/Google/Refine\" : \".google-refine\";\n-            grefineDir = new File(grefine_home);\n-            \n-            String gridworks_home = (home != null) ? home + \"/Library/Application Support/Gridworks\" : \".gridworks\"; \n-            gridworksDir = new File(gridworks_home);\n-        } else { // most likely a UNIX flavor\n-            // start with the XDG environment\n-            // see http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\n-            String data_home = System.getenv(\"XDG_DATA_HOME\");\n-            if (data_home == null) { // if not found, default back to ~/.local/share\n-                String home = System.getProperty(\"user.home\");\n-                if (home == null) {\n-                    home = \".\";\n-                }\n-                data_home = home + \"/.local/share\";\n-            }\n-            \n-            dataDir = new File(data_home + \"/openrefine\");\n-            grefineDir = new File(data_home + \"/google/refine\");\n-            gridworksDir = new File(data_home + \"/gridworks\");\n-        }\n-        \n-        // If refine data dir doesn't exist, try to find and move Google Refine or Gridworks data dir over\n-        if (!dataDir.exists()) {\n-            if (grefineDir.exists()) {\n-                if (gridworksDir.exists()) {\n-                    logger.warn(\"Found both Gridworks: \" + gridworksDir\n-                            + \" & Googld Refine dirs \" + grefineDir) ;\n-                }\n-                if (grefineDir.renameTo(dataDir)) {\n-                    logger.info(\"Renamed Google Refine directory \" + grefineDir \n-                            + \" to \" + dataDir);\n-                } else {\n-                    logger.error(\"FAILED to rename Google Refine directory \" \n-                            + grefineDir \n-                            + \" to \" + dataDir);\n-                } \n-            } else if (gridworksDir.exists()) {\n-                if (gridworksDir.renameTo(dataDir)) {\n-                    logger.info(\"Renamed Gridworks directory \" + gridworksDir \n-                            + \" to \" + dataDir);\n-                } else {\n-                    logger.error(\"FAILED to rename Gridworks directory \" \n-                            + gridworksDir \n-                            + \" to \" + dataDir);\n-                }\n-            }\n-        }\n-        \n-        // Either rename failed or nothing to rename - create a new one\n-        if (!dataDir.exists()) {\n-            logger.info(\"Creating new workspace directory \" + dataDir);\n-            if (!dataDir.mkdirs()) {\n-                logger.error(\"FAILED to create new workspace directory \" + dataDir);\n-            }\n-        }\n-        \n-        return dataDir.getAbsolutePath();\n-    }\n-    \n-    /**\n-     * For Windows file paths that contain user IDs with non ASCII characters,\n-     * those characters might get replaced with ?. We need to use the environment\n-     * APPDATA value to substitute back the original user ID.\n-     */\n-    static private String fixWindowsUnicodePath(String path) {\n-        int q = path.indexOf('?');\n-        if (q < 0) {\n-            return path;\n-        }\n-        int pathSep = path.indexOf(File.separatorChar, q);\n-        \n-        String goodPath = System.getenv(\"APPDATA\");\n-        if (goodPath == null || goodPath.length() == 0) {\n-            goodPath = System.getenv(\"USERPROFILE\");\n-            if (!goodPath.endsWith(File.separator)) {\n-                goodPath = goodPath + File.separator;\n-            }\n-        }\n-        \n-        int goodPathSep = goodPath.indexOf(File.separatorChar, q);\n-        \n-        return path.substring(0, q) + goodPath.substring(q, goodPathSep) + path.substring(pathSep);\n-    }\n-    \n-}\n-\n-/* -------------- Refine Client ----------------- */\n-\n-class RefineClient extends JFrame implements ActionListener {\n-    \n-    private static final long serialVersionUID = 7886547342175227132L;\n-\n-    final static Logger logger = LoggerFactory.getLogger(\"refine-client\");\n-\n-    private URI uri;\n-    \n-    public void init(String host, int port) throws Exception {\n-\n-        uri = new URI(\"http://\" + host + \":\" + port + \"/\");\n-\n-        openBrowser();\n-    }\n-    \n-    @Override\n-    public void actionPerformed(ActionEvent e) { \n-        String item = e.getActionCommand(); \n-        if (item.startsWith(\"Open\")) {\n-            openBrowser();\n-        }\n-    } \n-    \n-    private void openBrowser() {\n-        if (!Desktop.isDesktopSupported()) {\n-            logger.warn(\"Java Desktop class not supported on this platform.  Please open %s in your browser\",uri.toString());\n-        }\n-        try {\n-            Desktop.getDesktop().browse(uri);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n-\n-class ShutdownSignalHandler implements Runnable {\n-    \n-    private Server _server;\n-\n-    public ShutdownSignalHandler(Server server) {\n-        this._server = server;\n-    }\n-\n-    @Override\n-    public void run() {\n-\n-        // Tell the server we want to try and shutdown gracefully\n-        // this means that the server will stop accepting new connections\n-        // right away but it will continue to process the ones that\n-        // are in execution for the given timeout before attempting to stop\n-        // NOTE: this is *not* a blocking method, it just sets a parameter\n-        //       that _server.stop() will rely on\n-        _server.setGracefulShutdown(3000);\n-\n-        try {\n-            _server.stop();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            System.exit(1);\n-        }\n-    }\n-\n-}\n-    \n+/*\r\n+\r\n+Copyright 2010, Google Inc.\r\n+All rights reserved.\r\n+\r\n+Redistribution and use in source and binary forms, with or without\r\n+modification, are permitted provided that the following conditions are\r\n+met:\r\n+\r\n+    * Redistributions of source code must retain the above copyright\r\n+notice, this list of conditions and the following disclaimer.\r\n+    * Redistributions in binary form must reproduce the above\r\n+copyright notice, this list of conditions and the following disclaimer\r\n+in the documentation and/or other materials provided with the\r\n+distribution.\r\n+    * Neither the name of Google Inc. nor the names of its\r\n+contributors may be used to endorse or promote products derived from\r\n+this software without specific prior written permission.\r\n+\r\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \r\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \r\n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+\r\n+*/\r\n+\r\n+package com.google.refine;\r\n+\r\n+import java.awt.Desktop;\r\n+import java.awt.event.ActionEvent;\r\n+import java.awt.event.ActionListener;\r\n+import java.io.File;\r\n+import java.io.FileFilter;\r\n+import java.io.IOException;\r\n+import java.lang.reflect.Method;\r\n+import java.net.BindException;\r\n+import java.net.URI;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+import java.util.concurrent.LinkedBlockingQueue;\r\n+import java.util.concurrent.ThreadPoolExecutor;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import javax.swing.JFrame;\r\n+import javax.swing.JMenu;\r\n+import javax.swing.JMenuBar;\r\n+import javax.swing.JMenuItem;\r\n+\r\n+import org.apache.log4j.Level;\r\n+import org.mortbay.jetty.Connector;\r\n+import org.mortbay.jetty.Server;\r\n+import org.mortbay.jetty.bio.SocketConnector;\r\n+import org.mortbay.jetty.servlet.ServletHolder;\r\n+import org.mortbay.jetty.webapp.WebAppContext;\r\n+import org.mortbay.util.Scanner;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.codeberry.jdatapath.DataPath;\r\n+import com.codeberry.jdatapath.JDataPathSystem;\r\n+\r\n+import com.google.util.threads.ThreadPoolExecutorAdapter;\r\n+\r\n+/**\r\n+ * Main class for Refine server application.  Starts an instance of the\r\n+ * Jetty HTTP server / servlet container (inner class Refine Server).\r\n+ */\r\n+public class Refine {\r\n+    \r\n+    static private final String DEFAULT_HOST = \"127.0.0.1\";\r\n+    static private final int DEFAULT_PORT = 3333;\r\n+        \r\n+    static private int port;\r\n+    static private String host;\r\n+\r\n+    final static Logger logger = LoggerFactory.getLogger(\"refine\");\r\n+        \r\n+    public static void main(String[] args) throws Exception {\r\n+        \r\n+        // tell jetty to use SLF4J for logging instead of its own stuff\r\n+        System.setProperty(\"VERBOSE\",\"false\");\r\n+        System.setProperty(\"org.mortbay.log.class\",\"org.mortbay.log.Slf4jLog\");\r\n+        \r\n+        // tell macosx to keep the menu associated with the screen and what the app title is\r\n+        System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");  \r\n+        System.setProperty(\"com.apple.eawt.CocoaComponent.CompatibilityMode\", \"false\"); \r\n+        System.setProperty(\"com.apple.mrj.application.apple.menu.about.name\", \"OpenRefine\");\r\n+        \r\n+        // tell the signpost library to log\r\n+        //System.setProperty(\"debug\",\"true\");\r\n+        \r\n+        // set the log verbosity level\r\n+        org.apache.log4j.Logger.getRootLogger().setLevel(Level.toLevel(Configurations.get(\"refine.verbosity\",\"info\")));\r\n+\r\n+        port = Configurations.getInteger(\"refine.port\",DEFAULT_PORT);\r\n+        host = Configurations.get(\"refine.host\",DEFAULT_HOST);\r\n+\r\n+        Refine refine = new Refine();\r\n+        \r\n+        refine.init(args);\r\n+    }\r\n+\r\n+    public void init(String[] args) throws Exception {\r\n+\r\n+        RefineServer server = new RefineServer();\r\n+        server.init(host,port);\r\n+\r\n+        boolean headless = Configurations.getBoolean(\"refine.headless\",false);\r\n+        if (headless) {\r\n+            System.setProperty(\"java.awt.headless\", \"true\");\r\n+            logger.info(\"Running in headless mode\");\r\n+        } else {\r\n+            try {\r\n+                RefineClient client = new RefineClient();\r\n+                client.init(host,port);\r\n+            } catch (Exception e) {\r\n+                logger.warn(\"Sorry, some error prevented us from launching the browser for you.\\n\\n Point your browser to http://\" + host + \":\" + port + \"/ to start using Refine.\");\r\n+            }\r\n+        }\r\n+        \r\n+        // hook up the signal handlers\r\n+        Runtime.getRuntime().addShutdownHook(\r\n+            new Thread(new ShutdownSignalHandler(server))\r\n+        );\r\n+ \r\n+        server.join();\r\n+    }\r\n+}\r\n+\r\n+/* -------------- Refine Server ----------------- */\r\n+\r\n+class RefineServer extends Server {\r\n+    \r\n+    final static Logger logger = LoggerFactory.getLogger(\"refine_server\");\r\n+        \r\n+    private ThreadPoolExecutor threadPool;\r\n+    \r\n+    public void init(String host, int port) throws Exception {\r\n+        logger.info(\"Starting Server bound to '\" + host + \":\" + port + \"'\");\r\n+\r\n+        String memory = Configurations.get(\"refine.memory\");\r\n+        if (memory != null) {\r\n+            logger.info(\"refine.memory size: \" + memory + \" JVM Max heap: \" + Runtime.getRuntime().maxMemory());\r\n+        }\r\n+        \r\n+        int maxThreads = Configurations.getInteger(\"refine.queue.size\", 30);\r\n+        int maxQueue = Configurations.getInteger(\"refine.queue.max_size\", 300);\r\n+        long keepAliveTime = Configurations.getInteger(\"refine.queue.idle_time\", 60);\r\n+\r\n+        LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<Runnable>(maxQueue);\r\n+        \r\n+        threadPool = new ThreadPoolExecutor(maxThreads, maxQueue, keepAliveTime, TimeUnit.SECONDS, queue);\r\n+\r\n+        this.setThreadPool(new ThreadPoolExecutorAdapter(threadPool));\r\n+        \r\n+        Connector connector = new SocketConnector();\r\n+        connector.setPort(port);\r\n+        connector.setHost(host);\r\n+        connector.setMaxIdleTime(Configurations.getInteger(\"refine.connection.max_idle_time\",60000));\r\n+        connector.setStatsOn(false);\r\n+        this.addConnector(connector);\r\n+\r\n+        File webapp = new File(Configurations.get(\"refine.webapp\",\"main/webapp\"));\r\n+\r\n+        if (!isWebapp(webapp)) {\r\n+            webapp = new File(\"main/webapp\");\r\n+            if (!isWebapp(webapp)) {\r\n+                webapp = new File(\"webapp\");\r\n+                if (!isWebapp(webapp)) {\r\n+                    logger.warn(\"Warning: Failed to find web application at '\" + webapp.getAbsolutePath() + \"'\");\r\n+                    System.exit(-1);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        final String contextPath = Configurations.get(\"refine.context_path\",\"/\");\r\n+        final int maxFormContentSize = Configurations.getInteger(\"refine.max_form_content_size\", 1048576);\r\n+        \r\n+        logger.info(\"Initializing context: '\" + contextPath + \"' from '\" + webapp.getAbsolutePath() + \"'\");\r\n+        WebAppContext context = new WebAppContext(webapp.getAbsolutePath(), contextPath);\r\n+        context.setMaxFormContentSize(maxFormContentSize);\r\n+\r\n+        this.setHandler(context);\r\n+        this.setStopAtShutdown(true);\r\n+        this.setSendServerVersion(true);\r\n+\r\n+        // Enable context autoreloading\r\n+        if (Configurations.getBoolean(\"refine.autoreload\",false)) {\r\n+            scanForUpdates(webapp, context);\r\n+        }\r\n+        \r\n+        // start the server\r\n+        try {\r\n+            this.start();\r\n+        } catch (BindException e) {\r\n+            logger.error(\"Failed to start server - is there another copy running already on this port/address?\");\r\n+            throw e;\r\n+        }\r\n+        \r\n+        configure(context);\r\n+    }\r\n+    \r\n+    @Override\r\n+    protected void doStop() throws Exception {    \r\n+        try {\r\n+            // shutdown our scheduled tasks first, if any\r\n+            if (threadPool != null) {\r\n+                threadPool.shutdown();\r\n+            }\r\n+            \r\n+            // then let the parent stop\r\n+            super.doStop();\r\n+        } catch (InterruptedException e) {\r\n+            // ignore\r\n+        }\r\n+    }\r\n+        \r\n+    static private boolean isWebapp(File dir) {\r\n+        if (dir == null) {\r\n+            return false;\r\n+        }\r\n+        if (!dir.exists() || !dir.canRead()) {\r\n+            return false;\r\n+        }\r\n+        File webXml = new File(dir, \"WEB-INF/web.xml\");\r\n+        return webXml.exists() && webXml.canRead();\r\n+    }\r\n+    \r\n+    static private void scanForUpdates(final File contextRoot, final WebAppContext context) {\r\n+        List<File> scanList = new ArrayList<File>();\r\n+\r\n+        scanList.add(new File(contextRoot, \"WEB-INF/web.xml\"));\r\n+        findFiles(\".class\", new File(contextRoot, \"WEB-INF/classes\"), scanList);\r\n+        findFiles(\".jar\", new File(contextRoot, \"WEB-INF/lib\"), scanList);\r\n+\r\n+        logger.info(\"Starting autoreloading scanner... \");\r\n+\r\n+        Scanner scanner = new Scanner();\r\n+        scanner.setScanInterval(Configurations.getInteger(\"refine.scanner.period\",1));\r\n+        scanner.setScanDirs(scanList);\r\n+        scanner.setReportExistingFilesOnStartup(false);\r\n+\r\n+        scanner.addListener(new Scanner.BulkListener() {\r\n+            @Override\r\n+            public void filesChanged(@SuppressWarnings(\"rawtypes\") List changedFiles) {\r\n+                try {\r\n+                    logger.info(\"Stopping context: \" + contextRoot.getAbsolutePath());\r\n+                    context.stop();\r\n+\r\n+                    logger.info(\"Starting context: \" + contextRoot.getAbsolutePath());\r\n+                    context.start();\r\n+                    \r\n+                    configure(context);\r\n+                } catch (Exception ex) {\r\n+                    throw new RuntimeException(ex);\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        scanner.start();\r\n+    }\r\n+    \r\n+    static private void findFiles(final String extension, File baseDir, final Collection<File> found) {\r\n+        baseDir.listFiles(new FileFilter() {\r\n+            @Override\r\n+            public boolean accept(File pathname) {\r\n+                if (pathname.isDirectory()) {\r\n+                    findFiles(extension, pathname, found);\r\n+                } else if (pathname.getName().endsWith(extension)) {\r\n+                    found.add(pathname);\r\n+                }\r\n+                return false;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // inject configuration parameters in the servlets\r\n+    // NOTE: this is done *after* starting the server because jetty might override the init\r\n+    // parameters if we set them in the webapp context upon reading the web.xml file    \r\n+    static private void configure(WebAppContext context) throws Exception {\r\n+        ServletHolder servlet = context.getServletHandler().getServlet(\"refine\");\r\n+        if (servlet != null) {\r\n+            servlet.setInitParameter(\"refine.data\", getDataDir());\r\n+            servlet.setInitParameter(\"butterfly.modules.path\", getDataDir() + \"/extensions\");\r\n+            servlet.setInitOrder(1);\r\n+            servlet.doStart();\r\n+        }\r\n+\r\n+        servlet = context.getServletHandler().getServlet(\"refine-broker\");\r\n+        if (servlet != null) {\r\n+            servlet.setInitParameter(\"refine.data\", getDataDir() + \"/broker\");\r\n+            servlet.setInitParameter(\"refine.development\", Configurations.get(\"refine.development\",\"false\"));\r\n+            servlet.setInitOrder(1);\r\n+            servlet.doStart();\r\n+        }\r\n+    }\r\n+\r\n+    static private String getDataDir() {\r\n+        String data_dir = Configurations.get(\"refine.data_dir\");\r\n+        if (data_dir != null) {\r\n+            return data_dir;\r\n+        }\r\n+        \r\n+        File dataDir = null;\r\n+        File grefineDir = null;\r\n+        File gridworksDir = null;\r\n+        \r\n+        String os = System.getProperty(\"os.name\").toLowerCase();\r\n+        if (os.contains(\"windows\")) {\r\n+            try {\r\n+                // NOTE(SM): finding the \"local data app\" in windows from java is actually a PITA\r\n+                // see http://stackoverflow.com/questions/1198911/how-to-get-local-application-data-folder-in-java\r\n+                // so we're using a library that uses JNI to ask directly the win32 APIs, \r\n+                // it's not elegant but it's the safest bet.\r\n+                \r\n+                dataDir = new File(fixWindowsUnicodePath(JDataPathSystem.getLocalSystem()\r\n+                        .getLocalDataPath(\"OpenRefine\").getPath()));\r\n+\r\n+                DataPath localDataPath = JDataPathSystem.getLocalSystem().getLocalDataPath(\"Google\");\r\n+\r\n+                // new: ./Google/Refine old: ./Gridworks\r\n+                grefineDir = new File(new File(fixWindowsUnicodePath(localDataPath.getPath())), \"Refine\");\r\n+                gridworksDir = new File(fixWindowsUnicodePath(JDataPathSystem.getLocalSystem()\r\n+                        .getLocalDataPath(\"Gridworks\").getPath()));\r\n+            } catch (Error e) {\r\n+                /*\r\n+                 *  The above trick can fail, particularly on a 64-bit OS as the jdatapath.dll\r\n+                 *  we include is compiled for 32-bit. In this case, we just have to dig up\r\n+                 *  environment variables and try our best to find a user-specific path.\r\n+                 */\r\n+                \r\n+                logger.warn(\"Failed to use jdatapath to detect user data path: resorting to environment variables\");\r\n+                \r\n+                File parentDir = null;\r\n+                String appData = System.getenv(\"APPDATA\"); \r\n+                if (appData != null && appData.length() > 0) {\r\n+                    // e.g., C:\\Users\\[userid]\\AppData\\Roaming\r\n+                    parentDir = new File(appData);\r\n+                } else {\r\n+                    String userProfile = System.getenv(\"USERPROFILE\");\r\n+                    if (userProfile != null && userProfile.length() > 0) {\r\n+                        // e.g., C:\\Users\\[userid]\r\n+                        parentDir = new File(userProfile);\r\n+                    }\r\n+                }\r\n+\r\n+                if (parentDir == null) {\r\n+                    parentDir = new File(\".\");\r\n+                }\r\n+                \r\n+                dataDir = new File(parentDir, \"OpenRefine\");\r\n+                grefineDir = new File(new File(parentDir, \"Google\"), \"Refine\");\r\n+                gridworksDir = new File(parentDir, \"Gridworks\");\r\n+            }\r\n+        } else if (os.contains(\"os x\")) {\r\n+            // on macosx, use \"~/Library/Application Support\"\r\n+            String home = System.getProperty(\"user.home\");\r\n+            \r\n+            String data_home = (home != null) ? home + \"/Library/Application Support/OpenRefine\" : \".openrefine\";\r\n+            dataDir = new File(data_home);\r\n+            \r\n+            String grefine_home = (home != null) ? home + \"/Library/Application Support/Google/Refine\" : \".google-refine\";\r\n+            grefineDir = new File(grefine_home);\r\n+            \r\n+            String gridworks_home = (home != null) ? home + \"/Library/Application Support/Gridworks\" : \".gridworks\"; \r\n+            gridworksDir = new File(gridworks_home);\r\n+        } else { // most likely a UNIX flavor\r\n+            // start with the XDG environment\r\n+            // see http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\r\n+            String data_home = System.getenv(\"XDG_DATA_HOME\");\r\n+            if (data_home == null) { // if not found, default back to ~/.local/share\r\n+                String home = System.getProperty(\"user.home\");\r\n+                if (home == null) {\r\n+                    home = \".\";\r\n+                }\r\n+                data_home = home + \"/.local/share\";\r\n+            }\r\n+            \r\n+            dataDir = new File(data_home + \"/openrefine\");\r\n+            grefineDir = new File(data_home + \"/google/refine\");\r\n+            gridworksDir = new File(data_home + \"/gridworks\");\r\n+        }\r\n+        \r\n+        // If refine data dir doesn't exist, try to find and move Google Refine or Gridworks data dir over\r\n+        if (!dataDir.exists()) {\r\n+            if (grefineDir.exists()) {\r\n+                if (gridworksDir.exists()) {\r\n+                    logger.warn(\"Found both Gridworks: \" + gridworksDir\r\n+                            + \" & Googld Refine dirs \" + grefineDir) ;\r\n+                }\r\n+                if (grefineDir.renameTo(dataDir)) {\r\n+                    logger.info(\"Renamed Google Refine directory \" + grefineDir \r\n+                            + \" to \" + dataDir);\r\n+                } else {\r\n+                    logger.error(\"FAILED to rename Google Refine directory \" \r\n+                            + grefineDir \r\n+                            + \" to \" + dataDir);\r\n+                } \r\n+            } else if (gridworksDir.exists()) {\r\n+                if (gridworksDir.renameTo(dataDir)) {\r\n+                    logger.info(\"Renamed Gridworks directory \" + gridworksDir \r\n+                            + \" to \" + dataDir);\r\n+                } else {\r\n+                    logger.error(\"FAILED to rename Gridworks directory \" \r\n+                            + gridworksDir \r\n+                            + \" to \" + dataDir);\r\n+                }\r\n+            }\r\n+        }\r\n+        \r\n+        // Either rename failed or nothing to rename - create a new one\r\n+        if (!dataDir.exists()) {\r\n+            logger.info(\"Creating new workspace directory \" + dataDir);\r\n+            if (!dataDir.mkdirs()) {\r\n+                logger.error(\"FAILED to create new workspace directory \" + dataDir);\r\n+            }\r\n+        }\r\n+        \r\n+        return dataDir.getAbsolutePath();\r\n+    }\r\n+    \r\n+    /**\r\n+     * For Windows file paths that contain user IDs with non ASCII characters,\r\n+     * those characters might get replaced with ?. We need to use the environment\r\n+     * APPDATA value to substitute back the original user ID.\r\n+     */\r\n+    static private String fixWindowsUnicodePath(String path) {\r\n+        int q = path.indexOf('?');\r\n+        if (q < 0) {\r\n+            return path;\r\n+        }\r\n+        int pathSep = path.indexOf(File.separatorChar, q);\r\n+        \r\n+        String goodPath = System.getenv(\"APPDATA\");\r\n+        if (goodPath == null || goodPath.length() == 0) {\r\n+            goodPath = System.getenv(\"USERPROFILE\");\r\n+            if (!goodPath.endsWith(File.separator)) {\r\n+                goodPath = goodPath + File.separator;\r\n+            }\r\n+        }\r\n+        \r\n+        int goodPathSep = goodPath.indexOf(File.separatorChar, q);\r\n+        \r\n+        return path.substring(0, q) + goodPath.substring(q, goodPathSep) + path.substring(pathSep);\r\n+    }\r\n+    \r\n+}\r\n+\r\n+/* -------------- Refine Client ----------------- */\r\n+\r\n+class RefineClient extends JFrame implements ActionListener {\r\n+    \r\n+    private static final long serialVersionUID = 7886547342175227132L;\r\n+\r\n+    final static Logger logger = LoggerFactory.getLogger(\"refine-client\");\r\n+\r\n+    private URI uri;\r\n+    \r\n+    public void init(String host, int port) throws Exception {\r\n+\r\n+        uri = new URI(\"http://\" + host + \":\" + port + \"/\");\r\n+\r\n+        openBrowser();\r\n+    }\r\n+    \r\n+    @Override\r\n+    public void actionPerformed(ActionEvent e) { \r\n+        String item = e.getActionCommand(); \r\n+        if (item.startsWith(\"Open\")) {\r\n+            openBrowser();\r\n+        }\r\n+    } \r\n+    \r\n+    private void openBrowser() {\r\n+        if (!Desktop.isDesktopSupported()) {\r\n+            logger.warn(\"Java Desktop class not supported on this platform.  Please open %s in your browser\",uri.toString());\r\n+        }\r\n+        try {\r\n+            Desktop.getDesktop().browse(uri);\r\n+        } catch (IOException e) {\r\n+            throw new RuntimeException(e);\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+class ShutdownSignalHandler implements Runnable {\r\n+    \r\n+    private Server _server;\r\n+\r\n+    public ShutdownSignalHandler(Server server) {\r\n+        this._server = server;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void run() {\r\n+\r\n+        // Tell the server we want to try and shutdown gracefully\r\n+        // this means that the server will stop accepting new connections\r\n+        // right away but it will continue to process the ones that\r\n+        // are in execution for the given timeout before attempting to stop\r\n+        // NOTE: this is *not* a blocking method, it just sets a parameter\r\n+        //       that _server.stop() will rely on\r\n+        _server.setGracefulShutdown(3000);\r\n+\r\n+        try {\r\n+            _server.stop();\r\n+        } catch (Exception e) {\r\n+            e.printStackTrace();\r\n+            System.exit(1);\r\n+        }\r\n+    }\r\n+\r\n+}\r\n+    \r",
      "parent_sha": "3dc31257d98c7a1dcc5ed9215b897d72ffd1a196"
    }
  },
  {
    "oid": "0217595275a9f2531c43f5ec75b3f2fb72f3182c",
    "message": "FileMagic requires a stream that supports mark",
    "date": "2019-04-09T12:47:08Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/0217595275a9f2531c43f5ec75b3f2fb72f3182c",
    "details": {
      "sha": "b513ff0ebf14f034127b5dfebe121a018112c7e5",
      "filename": "main/src/com/google/refine/importers/ExcelImporter.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/0217595275a9f2531c43f5ec75b3f2fb72f3182c/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/0217595275a9f2531c43f5ec75b3f2fb72f3182c/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java?ref=0217595275a9f2531c43f5ec75b3f2fb72f3182c",
      "patch": "@@ -35,6 +35,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.BufferedInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PushbackInputStream;\n@@ -44,7 +45,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import java.util.List;\n import java.util.Map;\n \n-import org.apache.poi.ooxml.POIXMLDocument;\n import org.apache.poi.ooxml.POIXMLException;\n import org.apache.poi.common.usermodel.Hyperlink;\n import org.apache.poi.hssf.usermodel.HSSFDateUtil;\n@@ -54,6 +54,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.apache.poi.ss.usermodel.Sheet;\n import org.apache.poi.ss.usermodel.Workbook;\n import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.apache.poi.poifs.filesystem.FileMagic;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -91,7 +93,7 @@ public ObjectNode createParserUIInitializationData(\n                 InputStream is = new FileInputStream(file);\n \n                 if (!is.markSupported()) {\n-                  is = new PushbackInputStream(is, 8);\n+                  is = new BufferedInputStream(is);\n                 }\n \n                 try {\n@@ -143,11 +145,12 @@ public void parseOneFile(\n     ) {\n         Workbook wb = null;\n         if (!inputStream.markSupported()) {\n-          inputStream = new PushbackInputStream(inputStream, 8);\n+          inputStream = new BufferedInputStream(inputStream);\n+;\n         }\n         \n         try {\n-            wb = FileMagic.valueOf(InputStream) == FileMagic.OOXML ?\n+            wb = FileMagic.valueOf(inputStream) == FileMagic.OOXML ?\n                 new XSSFWorkbook(inputStream) :\n                 new HSSFWorkbook(new POIFSFileSystem(inputStream));\n         } catch (IOException e) {",
      "parent_sha": "6e261626190e7c59fcd1b415c20c908c5b6f8744"
    }
  },
  {
    "oid": "ccc6587cdd4d34336f32f673d9dc0f4b8dbecfee",
    "message": "Fixed minor bug introduced by recent check-in for asserting types in triple loader payload.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1968 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-12-28T19:48:08Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/ccc6587cdd4d34336f32f673d9dc0f4b8dbecfee",
    "details": {
      "sha": "21e5b890ae78fc3dfdedeac23bdd1ba5ffe5a1f6",
      "filename": "extensions/freebase/src/com/google/refine/freebase/protograph/transpose/TripleLoaderTransposedNodeFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/ccc6587cdd4d34336f32f673d9dc0f4b8dbecfee/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/ccc6587cdd4d34336f32f673d9dc0f4b8dbecfee/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java?ref=ccc6587cdd4d34336f32f673d9dc0f4b8dbecfee",
      "patch": "@@ -326,7 +326,7 @@ protected void writeChildren(\n             String subject, Project project,\n             int subjectRowIndex, int subjectCellIndex, Cell subjectCell) {\n             \n-            Recon recon = subjectCell.recon != null && \n+            Recon recon = subjectCell != null && subjectCell.recon != null && \n                     (subjectCell.recon.judgment == Judgment.Matched || subjectCell.recon.judgment == Judgment.New)\n                 ? subjectCell.recon : null;\n             ",
      "parent_sha": "6fb2b05739dfe5d228bf2cc54db4cee4eccf1e36"
    }
  },
  {
    "oid": "114be582e804d796119598ada772a81fee0b9f4e",
    "message": "Fixed issue 5: Localized Windows cause save problems for Gridworks. jdatapath library returns a path in which each unicode character (in the user ID) has been replaced by ?. So we need to grab the actual user ID from environment variables such as APPDATA or USERPROFILE.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@707 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-05-11T04:16:26Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/114be582e804d796119598ada772a81fee0b9f4e",
    "details": {
      "sha": "50e1e53087b35d76c433e27bd18442715da4db2f",
      "filename": "src/main/java/com/metaweb/gridworks/ProjectManager.java",
      "status": "modified",
      "additions": 26,
      "deletions": 1,
      "changes": 27,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/114be582e804d796119598ada772a81fee0b9f4e/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FProjectManager.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/114be582e804d796119598ada772a81fee0b9f4e/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FProjectManager.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FProjectManager.java?ref=114be582e804d796119598ada772a81fee0b9f4e",
      "patch": "@@ -82,7 +82,7 @@ static protected File getProjectLocation() {\n                 // it's not elegant but it's the safest bet.\n                 \n                 DataPath localDataPath = JDataPathSystem.getLocalSystem().getLocalDataPath(\"Gridworks\");\n-                File data = new File(localDataPath.getPath());\n+                File data = new File(fixWindowsUnicodePath(localDataPath.getPath()));\n                 data.mkdirs();\n                 return data;\n             } catch (Error e) {\n@@ -139,6 +139,31 @@ static protected File getProjectLocation() {\n         }\n     }\n     \n+    /**\n+     * For Windows file paths that contain user IDs with non ASCII characters,\n+     * those characters might get replaced with ?. We need to use the environment\n+     * APPDATA value to substitute back the original user ID.\n+     */\n+    static protected String fixWindowsUnicodePath(String path) {\n+    \tint q = path.indexOf('?');\n+    \tif (q < 0) {\n+    \t\treturn path;\n+    \t}\n+    \tint pathSep = path.indexOf(File.separatorChar, q);\n+    \t\n+    \tString goodPath = System.getenv(\"APPDATA\");\n+    \tif (goodPath == null || goodPath.length() == 0) {\n+            goodPath = System.getenv(\"USERPROFILE\");\n+            if (!goodPath.endsWith(File.separator)) {\n+            \tgoodPath = goodPath + File.separator;\n+            }\n+    \t}\n+    \t\n+    \tint goodPathSep = goodPath.indexOf(File.separatorChar, q);\n+    \t\n+    \treturn path.substring(0, q) + goodPath.substring(q, goodPathSep) + path.substring(pathSep);\n+    }\n+    \n     private ProjectManager(File dir) {\n         _workspaceDir = dir;\n         _workspaceDir.mkdirs();",
      "parent_sha": "3d59ba713eff5fc3f827b143d951c3d3ad3a9c96"
    }
  },
  {
    "oid": "fe7fcce94b808b8fa840190fc8316d8d7d17329e",
    "message": "small improvement to xls tests (#2599)",
    "date": "2020-04-26T14:02:20Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/fe7fcce94b808b8fa840190fc8316d8d7d17329e",
    "details": {
      "sha": "c5fbe666095fdc723e49de6ca3932e9f3c3633dc",
      "filename": "main/tests/server/src/com/google/refine/exporters/XlsExporterTests.java",
      "status": "modified",
      "additions": 18,
      "deletions": 5,
      "changes": 23,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/fe7fcce94b808b8fa840190fc8316d8d7d17329e/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporterTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/fe7fcce94b808b8fa840190fc8316d8d7d17329e/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporterTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporterTests.java?ref=fe7fcce94b808b8fa840190fc8316d8d7d17329e",
      "patch": "@@ -38,11 +38,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n+import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.time.OffsetDateTime;\n import java.util.Properties;\n \n+import org.apache.poi.hssf.usermodel.HSSFWorkbook;\n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n import org.testng.annotations.AfterMethod;\n@@ -112,7 +114,7 @@ public void getContentType(){\n     }\n \n     @Test\n-    public void exportSimpleXls(){\n+    public void exportSimpleXls() throws IOException {\n         CreateGrid(2, 2);\n \n         try {\n@@ -121,24 +123,35 @@ public void exportSimpleXls(){\n             Assert.fail();\n         }\n \n-        // TODO: Not a very effective test! \n-        // (it didn't crash though, and it created output)\n         Assert.assertEquals(stream.size(),4096);\n \n+        try (HSSFWorkbook wb = new HSSFWorkbook(new ByteArrayInputStream(stream.toByteArray()))) {\n+            org.apache.poi.ss.usermodel.Sheet ws = wb.getSheetAt(0);\n+            org.apache.poi.ss.usermodel.Row row1 = ws.getRow(1);\n+            org.apache.poi.ss.usermodel.Cell cell0 = row1.getCell(0);\n+            Assert.assertEquals(cell0.toString(),\"row0cell0\");\n+        }\n     }\n     \n     @Test\n     public void exportDateType() throws IOException{\n-        OffsetDateTime odt = OffsetDateTime.now();\n+        OffsetDateTime odt =  OffsetDateTime.parse(\"2019-04-09T12:00+00:00\");\n         createDateGrid(2, 2, odt);\n \n         try {\n             SUT.export(project, options, engine, stream);\n         } catch (IOException e) {\n             Assert.fail();\n         }\n-        \n+\n         Assert.assertEquals(stream.size(),4096);\n+\n+        try (HSSFWorkbook wb = new HSSFWorkbook(new ByteArrayInputStream(stream.toByteArray()))) {\n+            org.apache.poi.ss.usermodel.Sheet ws = wb.getSheetAt(0);\n+            org.apache.poi.ss.usermodel.Row row1 = ws.getRow(1);\n+            org.apache.poi.ss.usermodel.Cell cell0 = row1.getCell(0);\n+            Assert.assertTrue(cell0.toString().contains(\"2019\"));\n+        }\n     }\n \n     @Test(enabled=false)",
      "parent_sha": "6441a2a1f63e426547326e60d5aca9b94bd8a07f"
    }
  },
  {
    "oid": "879b704cdf84c3ff61a1e248bc7393c895918075",
    "message": "Fix launch in snap mode (#6065)",
    "date": "2023-09-25T13:13:37Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/879b704cdf84c3ff61a1e248bc7393c895918075",
    "details": {
      "sha": "96f52cc8fe85926d81dd73c9ba6c58c63d7c7305",
      "filename": "server/src/com/google/refine/Refine.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/879b704cdf84c3ff61a1e248bc7393c895918075/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/879b704cdf84c3ff61a1e248bc7393c895918075/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java?ref=879b704cdf84c3ff61a1e248bc7393c895918075",
      "patch": "@@ -487,7 +487,7 @@ public void actionPerformed(ActionEvent e) {\n     }\n \n     private void openBrowser() {\n-        if (!Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {\n+        if (!Desktop.getDesktop().isSupported(Desktop.Action.BROWSE) || System.getenv(\"SNAP\") != null) {\n             try {\n                 openBrowserFallback();\n             } catch (IOException e) {",
      "parent_sha": "9c958bdef97de2956f253ffb69bbc9404960eb53"
    }
  },
  {
    "oid": "1ec7cb9f7b8ecd7647f21c5fd749ab868697e226",
    "message": "PI constant added to GREL\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1904 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-11-18T23:53:07Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/1ec7cb9f7b8ecd7647f21c5fd749ab868697e226",
    "details": {
      "sha": "65dd75416484d6ec265e95f8d9dca3c5856c4178",
      "filename": "main/src/com/google/refine/expr/ExpressionUtils.java",
      "status": "modified",
      "additions": 29,
      "deletions": 28,
      "changes": 57,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/1ec7cb9f7b8ecd7647f21c5fd749ab868697e226/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2FExpressionUtils.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/1ec7cb9f7b8ecd7647f21c5fd749ab868697e226/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2FExpressionUtils.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2FExpressionUtils.java?ref=1ec7cb9f7b8ecd7647f21c5fd749ab868697e226",
      "patch": "@@ -23,8 +23,8 @@\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n@@ -51,37 +51,38 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n public class ExpressionUtils {\n     static protected Set<Binder> s_binders = new HashSet<Binder>();\n-    \n+\n     static public void registerBinder(Binder binder) {\n         s_binders.add(binder);\n     }\n-    \n+\n     static public Properties createBindings(Project project) {\n         Properties bindings = new Properties();\n-        \n+\n         bindings.put(\"true\", true);\n         bindings.put(\"false\", false);\n-        \n+        bindings.put(\"PI\", Math.PI);\n+\n         bindings.put(\"project\", project);\n-        \n+\n         for (Binder binder : s_binders) {\n             binder.initializeBindings(bindings, project);\n         }\n \n         return bindings;\n     }\n-    \n+\n     static public void bind(Properties bindings, Row row, int rowIndex, String columnName, Cell cell) {\n         Project project = (Project) bindings.get(\"project\");\n-        \n+\n         bindings.put(\"rowIndex\", rowIndex);\n         bindings.put(\"row\", new WrappedRow(project, rowIndex, row));\n         bindings.put(\"cells\", new CellTuple(project, row));\n-        \n+\n         if (columnName != null) {\n             bindings.put(\"columnName\", columnName);\n         }\n-        \n+\n         if (cell == null) {\n             bindings.remove(\"cell\");\n             bindings.remove(\"value\");\n@@ -93,12 +94,12 @@ static public void bind(Properties bindings, Row row, int rowIndex, String colum\n                 bindings.put(\"value\", cell.value);\n             }\n         }\n-        \n+\n         for (Binder binder : s_binders) {\n             binder.bind(bindings, row, rowIndex, columnName, cell);\n         }\n     }\n-    \n+\n     static public boolean isError(Object o) {\n         return o != null && o instanceof EvalError;\n     }\n@@ -108,19 +109,19 @@ static public boolean isBlank(Object o) {\n     }\n     */\n     static public boolean isNonBlankData(Object o) {\n-        return \n-            o != null && \n+        return\n+            o != null &&\n             !(o instanceof EvalError) &&\n             (!(o instanceof String) || ((String) o).length() > 0);\n     }\n \n     static public boolean isTrue(Object o) {\n-        return o != null && \n-            (o instanceof Boolean ? \n-                ((Boolean) o).booleanValue() : \n+        return o != null &&\n+            (o instanceof Boolean ?\n+                ((Boolean) o).booleanValue() :\n                 Boolean.parseBoolean(o.toString()));\n     }\n-    \n+\n     static public boolean sameValue(Object v1, Object v2) {\n         if (v1 == null) {\n             return (v2 == null)\n@@ -132,7 +133,7 @@ static public boolean sameValue(Object v1, Object v2) {\n             return v1.equals(v2);\n         }\n     }\n-    \n+\n     static public boolean isStorable(Object v) {\n         return v == null ||\n             v instanceof Number ||\n@@ -142,36 +143,36 @@ static public boolean isStorable(Object v) {\n             v instanceof Calendar ||\n             v instanceof EvalError;\n     }\n-    \n+\n     static public Serializable wrapStorable(Object v) {\n         if (v instanceof JSONArray) {\n             return ((JSONArray) v).toString();\n         } else if (v instanceof JSONObject) {\n             return ((JSONObject) v).toString();\n         } else {\n-            return isStorable(v) ? \n-                (Serializable) v : \n+            return isStorable(v) ?\n+                (Serializable) v :\n                 new EvalError(v.getClass().getSimpleName() + \" value not storable\");\n         }\n     }\n-    \n+\n     static public boolean isArray(Object v) {\n         return v != null && v.getClass().isArray();\n     }\n-    \n+\n     static public boolean isArrayOrCollection(Object v) {\n         return v != null && (v.getClass().isArray() || v instanceof Collection<?>);\n     }\n-    \n+\n     static public boolean isArrayOrList(Object v) {\n         return v != null && (v.getClass().isArray() || v instanceof List<?>);\n     }\n-    \n+\n     @SuppressWarnings(\"unchecked\")\n     static public List<Object> toObjectList(Object v) {\n         return (List<Object>) v;\n     }\n-    \n+\n     @SuppressWarnings(\"unchecked\")\n     static public Collection<Object> toObjectCollection(Object v) {\n         return (Collection<Object>) v;",
      "parent_sha": "ed724fd19172b3af84beb31802514c12b55a1cd2"
    }
  },
  {
    "oid": "890cbffb67a84f67e09ce9664e26ba436922f7fd",
    "message": "Added recon metadata to tripleloader payload.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@564 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-04-28T22:04:39Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/890cbffb67a84f67e09ce9664e26ba436922f7fd",
    "details": {
      "sha": "d6cf574d48be6a4afc823eb9ad2ac6dc1a618dea",
      "filename": "src/main/java/com/metaweb/gridworks/protograph/transpose/TripleLoaderTransposedNodeFactory.java",
      "status": "modified",
      "additions": 94,
      "deletions": 31,
      "changes": 125,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/890cbffb67a84f67e09ce9664e26ba436922f7fd/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/890cbffb67a84f67e09ce9664e26ba436922f7fd/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java?ref=890cbffb67a84f67e09ce9664e26ba436922f7fd",
      "patch": "@@ -3,9 +3,11 @@\n import java.io.IOException;\r\n import java.io.Writer;\r\n import java.util.HashMap;\r\n+import java.util.HashSet;\r\n import java.util.LinkedList;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.Set;\r\n \r\n import org.json.JSONObject;\r\n \r\n@@ -27,14 +29,15 @@ public class TripleLoaderTransposedNodeFactory implements TransposedNodeFactory\n     protected WritingTransposedNode lastRootNode;\r\n     protected Map<String, Long> varPool = new HashMap<String, Long>();\r\n     protected Map<Long, String> newTopicVars = new HashMap<Long, String>();\r\n+    protected Set<Long> serializedRecons = new HashSet<Long>();\r\n     \r\n     public TripleLoaderTransposedNodeFactory(Writer writer) {\r\n         this.writer = writer;\r\n     }\r\n     \r\n     public void flush() {\r\n         if (lastRootNode != null) {\r\n-            lastRootNode.write(null, null);\r\n+            lastRootNode.write(null, null, null);\r\n             lastRootNode = null;\r\n         }\r\n     }\r\n@@ -51,40 +54,97 @@ protected void writeLine(String line) {\n             // ignore\r\n         }\r\n     }\r\n-    protected void writeLine(String subject, String predicate, Object object) {\r\n+    \r\n+    protected void writeRecon(StringBuffer sb, Cell cell) {\r\n+        Recon recon = cell.recon;\r\n+        if (serializedRecons.contains(recon.id)) {\r\n+            sb.append(Long.toString(recon.id));\r\n+        } else {\r\n+            serializedRecons.add(recon.id);\r\n+            \r\n+            String s = cell.value instanceof String ? (String) cell.value : cell.value.toString();\r\n+                    \r\n+            sb.append(\"{ \");\r\n+            sb.append(\"\\\"id\\\" : \"); sb.append(Long.toString(recon.id));\r\n+            sb.append(\", \\\"history_entry\\\" : \"); sb.append(Long.toString(recon.judgmentHistoryEntry));\r\n+            sb.append(\", \\\"text\\\" : \"); sb.append(JSONObject.quote(s));\r\n+            sb.append(\", \\\"service\\\" : \"); sb.append(JSONObject.quote(recon.service));\r\n+            sb.append(\", \\\"action\\\" : \"); sb.append(JSONObject.quote(recon.judgmentAction));\r\n+            sb.append(\", \\\"batch\\\" : \"); sb.append(Integer.toString(recon.judgmentBatchSize));\r\n+            sb.append(\", \\\"matchRank\\\" : \"); sb.append(Integer.toString(recon.matchRank));\r\n+            sb.append(\" }\");\r\n+        }\r\n+    }\r\n+    \r\n+    protected void writeLine(String subject, String predicate, Object object, Cell subjectCell, Cell objectCell) {\r\n         if (subject != null && object != null) {\r\n             String s = object instanceof String ? \r\n                     JSONObject.quote((String) object) : object.toString();\r\n                     \r\n-            writeLine(\"{ \\\"s\\\" : \\\"\" + subject + \"\\\", \\\"p\\\" : \\\"\" + predicate + \"\\\", \\\"o\\\" : \" + s + \" }\");\r\n+            StringBuffer sb = new StringBuffer();\r\n+            sb.append(\"{ \\\"s\\\" : \\\"\"); sb.append(subject); sb.append(\"\\\"\");\r\n+            sb.append(\", \\\"p\\\" : \\\"\"); sb.append(predicate); sb.append(\"\\\"\");\r\n+            sb.append(\", \\\"o\\\" : \"); sb.append(s);\r\n+            if (subjectCell != null || objectCell != null) {\r\n+                sb.append(\", \\\"meta\\\" : { \");\r\n+                \r\n+                if (subjectCell != null) {\r\n+                    sb.append(\"\\\"srecon\\\" : \");\r\n+                    writeRecon(sb, subjectCell);\r\n+                }\r\n+                if (objectCell != null) {\r\n+                    if (subjectCell != null) {\r\n+                        sb.append(\", \");\r\n+                    }\r\n+                    sb.append(\"\\\"orecon\\\" : \");\r\n+                    writeRecon(sb, objectCell);\r\n+                }\r\n+                \r\n+                sb.append(\" }\");\r\n+            }\r\n+            sb.append(\" }\");\r\n+                    \r\n+            writeLine(sb.toString());\r\n         }\r\n     }\r\n-    protected void writeLine(String subject, String predicate, Object object, String lang) {\r\n+    \r\n+    protected void writeLine(String subject, String predicate, Object object, String lang, Cell subjectCell) {\r\n         if (subject != null && object != null) {\r\n             String s = object instanceof String ? \r\n                     JSONObject.quote((String) object) : object.toString();\r\n                     \r\n-            writeLine(\"{ \\\"s\\\" : \\\"\" + \r\n-                    subject + \"\\\", \\\"p\\\" : \\\"\" + \r\n-                    predicate + \"\\\", \\\"o\\\" : \" + \r\n-                    s + \", \\\"lang\\\" : \\\"\" + lang + \"\\\" }\");\r\n+            StringBuffer sb = new StringBuffer();\r\n+            sb.append(\"{ \\\"s\\\" : \\\"\"); sb.append(subject); sb.append(\"\\\"\");\r\n+            sb.append(\", \\\"p\\\" : \\\"\"); sb.append(predicate); sb.append(\"\\\"\");\r\n+            sb.append(\", \\\"o\\\" : \"); sb.append(s);\r\n+            sb.append(\", \\\"lang\\\" : \"); sb.append(lang);\r\n+                    \r\n+            if (subjectCell != null) {\r\n+                sb.append(\", \\\"meta\\\" : { \");\r\n+                sb.append(\"\\\"srecon\\\" : \");\r\n+                writeRecon(sb, subjectCell);\r\n+                sb.append(\" }\");\r\n+            }\r\n+            sb.append(\" }\");\r\n+                    \r\n+            writeLine(sb.toString());\r\n         }\r\n     }\r\n     \r\n     protected interface WritingTransposedNode extends TransposedNode {\r\n-        public String write(String subject, String predicate);\r\n+        public String write(String subject, String predicate, Cell subjectCell);\r\n     }\r\n     \r\n     abstract protected class TransposedNodeWithChildren implements WritingTransposedNode {\r\n         public List<FreebaseProperty> properties = new LinkedList<FreebaseProperty>();\r\n         public List<WritingTransposedNode> children = new LinkedList<WritingTransposedNode>();\r\n         \r\n-        protected void writeChildren(String subject) {\r\n+        protected void writeChildren(String subject, Cell subjectCell) {\r\n             for (int i = 0; i < children.size(); i++) {\r\n                 WritingTransposedNode child = children.get(i);\r\n                 String predicate = properties.get(i).id;\r\n                 \r\n-                child.write(subject, predicate);\r\n+                child.write(subject, predicate, subjectCell);\r\n             }\r\n         }\r\n     }\r\n@@ -93,7 +153,7 @@ protected class AnonymousTransposedNode extends TransposedNodeWithChildren {\n         \r\n         //protected AnonymousTransposedNode(AnonymousNode node) { }\r\n         \r\n-        public String write(String subject, String predicate) {\r\n+        public String write(String subject, String predicate, Cell subjectCell) {\r\n             if (children.size() == 0 || subject == null) {\r\n                 return null;\r\n             }\r\n@@ -103,7 +163,7 @@ public String write(String subject, String predicate) {\n             \r\n             boolean first = true;\r\n             for (int i = 0; i < children.size(); i++) {\r\n-                String s = children.get(i).write(null, null);\r\n+                String s = children.get(i).write(null, null, null);\r\n                 if (s != null) {\r\n                     if (first) {\r\n                         first = false;\r\n@@ -116,7 +176,7 @@ public String write(String subject, String predicate) {\n             }\r\n             sb.append(\" }\");\r\n             \r\n-            writeLine(subject, predicate, sb);\r\n+            writeLine(subject, predicate, sb, subjectCell, null);\r\n             \r\n             return null;\r\n         }\r\n@@ -131,12 +191,15 @@ public CellTopicTransposedNode(CellTopicNode node, Cell cell) {\n             this.cell = cell;\r\n         }\r\n         \r\n-        public String write(String subject, String predicate) {\r\n+        public String write(String subject, String predicate, Cell subjectCell) {\r\n             String id = null;\r\n+            Cell objectCell = null;\r\n+            \r\n             if (cell.recon != null &&\r\n                 cell.recon.judgment == Recon.Judgment.Matched &&\r\n                 cell.recon.match != null) {\r\n                 \r\n+                objectCell = cell;\r\n                 id = cell.recon.match.topicID;\r\n             } else if (node.createForNoReconMatch || \r\n                     (cell.recon != null && cell.recon.judgment == Judgment.New)) {\r\n@@ -151,8 +214,8 @@ public String write(String subject, String predicate) {\n                     \r\n                     id = \"$\" + node.columnName.replaceAll(\"\\\\W+\", \"_\") + \"_\" + var;\r\n                     \r\n-                    writeLine(id, \"type\", node.type.id);\r\n-                    writeLine(id, \"name\", cell.value);\r\n+                    writeLine(id, \"type\", node.type.id, (Cell) null, (Cell) null);\r\n+                    writeLine(id, \"name\", cell.value, (Cell) null, (Cell) null);\r\n                     \r\n                     if (cell.recon != null) {\r\n                         newTopicVars.put(cell.recon.id, id);\r\n@@ -163,10 +226,10 @@ public String write(String subject, String predicate) {\n             }\r\n             \r\n             if (subject != null) {\r\n-                writeLine(subject, predicate, id);\r\n+                writeLine(subject, predicate, id, subjectCell, objectCell);\r\n             }\r\n             \r\n-            writeChildren(id);\r\n+            writeChildren(id, objectCell);\r\n             \r\n             return id;\r\n         }\r\n@@ -182,12 +245,12 @@ public CellValueTransposedNode(CellValueNode node, Cell cell) {\n             this.cell = cell;\r\n         }\r\n         \r\n-        public String write(String subject, String predicate) {\r\n+        public String write(String subject, String predicate, Cell subjectCell) {\r\n             if (subject != null) {\r\n                 if (\"/type/text\".equals(node.lang)) {\r\n-                    writeLine(subject, predicate, cell.value, node.lang);\r\n+                    writeLine(subject, predicate, cell.value, node.lang, subjectCell);\r\n                 } else {\r\n-                    writeLine(subject, predicate, cell.value);\r\n+                    writeLine(subject, predicate, cell.value, subjectCell, null);\r\n                 }\r\n             }\r\n             \r\n@@ -204,8 +267,8 @@ public CellKeyTransposedNode(CellKeyNode node, Cell cell) {\n             this.cell = cell;\r\n         }\r\n         \r\n-        public String write(String subject, String predicate) {\r\n-            writeLine(subject, \"key\", node.namespace.id + \"/\" + cell.value);\r\n+        public String write(String subject, String predicate, Cell subjectCell) {\r\n+            writeLine(subject, \"key\", node.namespace.id + \"/\" + cell.value, subjectCell, null);\r\n             \r\n             return null;\r\n         }\r\n@@ -218,9 +281,9 @@ public TopicTransposedNode(FreebaseTopicNode node) {\n             this.node = node;\r\n         }\r\n \r\n-        public String write(String subject, String predicate) {\r\n-            writeLine(subject, predicate, node.topic.id);\r\n-            writeChildren(node.topic.id);\r\n+        public String write(String subject, String predicate, Cell subjectCell) {\r\n+            writeLine(subject, predicate, node.topic.id, subjectCell, null);\r\n+            writeChildren(node.topic.id, null);\r\n             \r\n             return node.topic.id;\r\n         }\r\n@@ -233,11 +296,11 @@ public ValueTransposedNode(ValueNode node) {\n             this.node = node;\r\n         }\r\n \r\n-        public String write(String subject, String predicate) {\r\n+        public String write(String subject, String predicate, Cell subjectCell) {\r\n             if (\"/type/text\".equals(node.lang)) {\r\n-                writeLine(subject, predicate, node.value, node.lang);\r\n+                writeLine(subject, predicate, node.value, node.lang, subjectCell);\r\n             } else {\r\n-                writeLine(subject, predicate, node.value);\r\n+                writeLine(subject, predicate, node.value, subjectCell, null);\r\n             }\r\n             \r\n             return node.value.toString();\r\n@@ -319,7 +382,7 @@ protected void processTransposedNode(\n     \r\n     protected void addRootNode(WritingTransposedNode tnode) {\r\n         if (lastRootNode != null) {\r\n-            lastRootNode.write(null, null);\r\n+            lastRootNode.write(null, null, null);\r\n         }\r\n         lastRootNode = tnode;\r\n     }\r",
      "parent_sha": "66c671fa5ef5c8ab2c0b085ad048b0ed960cc83b"
    }
  },
  {
    "oid": "eba03fc69e20c743fc7d587a4ca1387004bd12c5",
    "message": "Protect joins map with mutex - fixes issue #652",
    "date": "2013-03-03T14:36:43Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/eba03fc69e20c743fc7d587a4ca1387004bd12c5",
    "details": {
      "sha": "7a2da820b8606048cd46a74796696a166ab911e9",
      "filename": "main/src/com/google/refine/InterProjectModel.java",
      "status": "modified",
      "additions": 16,
      "deletions": 10,
      "changes": 26,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/eba03fc69e20c743fc7d587a4ca1387004bd12c5/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FInterProjectModel.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/eba03fc69e20c743fc7d587a4ca1387004bd12c5/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FInterProjectModel.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FInterProjectModel.java?ref=eba03fc69e20c743fc7d587a4ca1387004bd12c5",
      "patch": "@@ -99,27 +99,33 @@ public ProjectJoin getJoin(String fromProject, String fromColumn, String toProje\n             \n             computeJoin(join);\n             \n-            _joins.put(key, join);\n+            synchronized (_joins) {\n+                _joins.put(key, join);\n+            }\n         }\n         \n         return _joins.get(key);\n     }\n     \n     public void flushJoinsInvolvingProject(long projectID) {\n-        for (Entry<String, ProjectJoin> entry : _joins.entrySet()) {\n-            ProjectJoin join = entry.getValue();\n-            if (join.fromProjectID == projectID || join.toProjectID == projectID) {\n-                _joins.remove(entry.getKey());\n+        synchronized (_joins) {\n+            for (Entry<String, ProjectJoin> entry : _joins.entrySet()) {\n+                ProjectJoin join = entry.getValue();\n+                if (join.fromProjectID == projectID || join.toProjectID == projectID) {\n+                    _joins.remove(entry.getKey());\n+                }\n             }\n         }\n     }\n \n     public void flushJoinsInvolvingProjectColumn(long projectID, String columnName) {\n-        for (Entry<String, ProjectJoin> entry : _joins.entrySet()) {\n-            ProjectJoin join = entry.getValue();\n-            if (join.fromProjectID == projectID && join.fromProjectColumnName.equals(columnName) || \n-                join.toProjectID == projectID && join.toProjectColumnName.equals(columnName)) {\n-                _joins.remove(entry.getKey());\n+        synchronized (_joins) {\n+            for (Entry<String, ProjectJoin> entry : _joins.entrySet()) {\n+                ProjectJoin join = entry.getValue();\n+                if (join.fromProjectID == projectID && join.fromProjectColumnName.equals(columnName) || \n+                        join.toProjectID == projectID && join.toProjectColumnName.equals(columnName)) {\n+                    _joins.remove(entry.getKey());\n+                }\n             }\n         }\n     }",
      "parent_sha": "0dfd7d7112ff48209c4371eb810a4a5a7cb5cb3c"
    }
  },
  {
    "oid": "5264c829ae0010d5a3f9bfaa6e5be29caa5333f1",
    "message": "A bit more careful error handling during recon.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@105 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-02-19T01:17:35Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/5264c829ae0010d5a3f9bfaa6e5be29caa5333f1",
    "details": {
      "sha": "50a4031c28751faff70085b2c15fc483fdf1d441",
      "filename": "src/main/java/com/metaweb/gridworks/model/operations/ReconOperation.java",
      "status": "modified",
      "additions": 91,
      "deletions": 75,
      "changes": 166,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/5264c829ae0010d5a3f9bfaa6e5be29caa5333f1/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2Foperations%2FReconOperation.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/5264c829ae0010d5a3f9bfaa6e5be29caa5333f1/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2Foperations%2FReconOperation.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2Foperations%2FReconOperation.java?ref=5264c829ae0010d5a3f9bfaa6e5be29caa5333f1",
      "patch": "@@ -1,9 +1,7 @@\n package com.metaweb.gridworks.model.operations;\r\n \r\n-import java.io.IOException;\r\n import java.io.InputStream;\r\n import java.io.StringWriter;\r\n-import java.io.UnsupportedEncodingException;\r\n import java.net.URL;\r\n import java.net.URLConnection;\r\n import java.util.ArrayList;\r\n@@ -203,11 +201,8 @@ public void run() {\n \t\t\tList<CellChange> cellChanges = new ArrayList<CellChange>(_entries.size());\r\n \t\t\tList<String> values = new ArrayList<String>(valueToEntries.keySet());\r\n \t\t\tfor (int i = 0; i < values.size(); i += 10) {\r\n-\t\t\t\ttry {\r\n-\t\t\t\t\trecon(valueToEntries, values, i, Math.min(i + 10, values.size()), cellChanges);\r\n-\t\t\t\t} catch (JSONException e1) {\r\n-\t\t\t\t\te1.printStackTrace();\r\n-\t\t\t\t}\r\n+\t\t\t\trecon(valueToEntries, values, i, Math.min(i + 10, values.size()), cellChanges);\r\n+\t\t\t\t\r\n \t\t\t\t_progress = i * 100 / values.size();\r\n \t\t\t\t\r\n \t\t\t\ttry {\r\n@@ -240,34 +235,33 @@ protected void recon(\n \t\t\tint from, \r\n \t\t\tint to,\r\n \t\t\tList<CellChange> cellChanges\r\n-\t\t) throws JSONException {\r\n-\t\t\t\r\n-\t\t\tStringWriter stringWriter = new StringWriter();\r\n-\t\t\tJSONWriter jsonWriter = new JSONWriter(stringWriter);\r\n-\t\t\t\r\n-\t\t\tjsonWriter.object();\r\n-\t\t\tfor (int i = 0; from + i < to; i++) {\r\n-\t\t\t\tjsonWriter.key(\"q\" + i + \":search\");\r\n+\t\t) {\r\n+\t\t\ttry {\r\n+\t\t\t\tStringWriter stringWriter = new StringWriter();\r\n+\t\t\t\tJSONWriter jsonWriter = new JSONWriter(stringWriter);\r\n \t\t\t\t\r\n \t\t\t\tjsonWriter.object();\r\n+\t\t\t\tfor (int i = 0; from + i < to; i++) {\r\n+\t\t\t\t\tjsonWriter.key(\"q\" + i + \":search\");\r\n+\t\t\t\t\t\r\n+\t\t\t\t\tjsonWriter.object();\r\n+\t\t\t\t\t\r\n+\t\t\t\t\tjsonWriter.key(\"query\"); jsonWriter.value(values.get(from + i));\r\n+\t\t\t\t\tjsonWriter.key(\"limit\"); jsonWriter.value(5);\r\n+\t\t\t\t\tjsonWriter.key(\"type\"); jsonWriter.value(_typeID);\r\n+\t\t\t\t\tjsonWriter.key(\"type_strict\"); jsonWriter.value(\"should\");\r\n+\t\t\t\t\tjsonWriter.key(\"indent\"); jsonWriter.value(1);\r\n+\t\t\t\t\tjsonWriter.key(\"type_exclude\"); jsonWriter.value(\"/common/image\");\r\n+\t\t\t\t\tjsonWriter.key(\"domain_exclude\"); jsonWriter.value(\"/freebase\");\r\n+\t\t\t\t\t\r\n+\t\t\t\t\tjsonWriter.endObject();\r\n+\t\t\t\t}\r\n+\t\t\t\tjsonWriter.endObject();\r\n \t\t\t\t\r\n-\t\t\t\tjsonWriter.key(\"query\"); jsonWriter.value(values.get(from + i));\r\n-\t\t\t\tjsonWriter.key(\"limit\"); jsonWriter.value(5);\r\n-\t\t\t\tjsonWriter.key(\"type\"); jsonWriter.value(_typeID);\r\n-\t\t\t\tjsonWriter.key(\"type_strict\"); jsonWriter.value(\"should\");\r\n-\t\t\t\tjsonWriter.key(\"indent\"); jsonWriter.value(1);\r\n-\t\t\t\tjsonWriter.key(\"type_exclude\"); jsonWriter.value(\"/common/image\");\r\n-\t\t\t\tjsonWriter.key(\"domain_exclude\"); jsonWriter.value(\"/freebase\");\r\n+\t\t\t\tStringBuffer sb = new StringBuffer();\r\n+\t\t\t\tsb.append(\"http://api.freebase.com/api/service/search?indent=1&queries=\");\r\n+\t\t\t\tsb.append(ParsingUtilities.encode(stringWriter.toString()));\r\n \t\t\t\t\r\n-\t\t\t\tjsonWriter.endObject();\r\n-\t\t\t}\r\n-\t\t\tjsonWriter.endObject();\r\n-\t\t\t\r\n-\t\t\tStringBuffer sb = new StringBuffer();\r\n-\t\t\tsb.append(\"http://api.freebase.com/api/service/search?indent=1&queries=\");\r\n-\t\t\tsb.append(ParsingUtilities.encode(stringWriter.toString()));\r\n-\t\t\t\r\n-\t\t\ttry {\r\n \t\t\t\tURL url = new URL(sb.toString());\r\n \t\t\t\tURLConnection connection = url.openConnection();\r\n \t\t\t\tconnection.setConnectTimeout(5000);\r\n@@ -285,14 +279,17 @@ protected void recon(\n \t\t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t\t\r\n+\t\t\t\t\t\tRecon recon;\r\n+\t\t\t\t\t\t\r\n \t\t\t\t\t\tJSONObject o2 = o.getJSONObject(key);\r\n-\t\t\t\t\t\tif (!(o2.has(\"result\"))) {\r\n-\t\t\t\t\t\t\tcontinue;\r\n+\t\t\t\t\t\tif (o2.has(\"result\")) {\r\n+\t\t\t\t\t\t\tJSONArray results = o2.getJSONArray(\"result\");\r\n+\t\t\t\t\t\t\t\r\n+\t\t\t\t\t\t\trecon = createRecon(value, results);\r\n+\t\t\t\t\t\t} else {\r\n+\t\t\t\t\t\t\trecon = new Recon();\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t\t\r\n-\t\t\t\t\t\tJSONArray results = o2.getJSONArray(\"result\");\r\n-\t\t\t\t\t\t\r\n-\t\t\t\t\t\tRecon recon = createRecon(value, results);\r\n \t\t\t\t\t\tfor (ReconEntry entry : valueToEntries.get(value)) {\r\n \t\t\t\t\t\t\tCell oldCell = entry.cell;\r\n \t\t\t\t\t\t\t\r\n@@ -306,59 +303,78 @@ protected void recon(\n \t\t\t\t\t\t\t);\r\n \t\t\t\t\t\t\tcellChanges.add(cellChange);\r\n \t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\tvalueToEntries.remove(value);\r\n \t\t\t\t\t}\r\n \t\t\t\t} finally {\r\n \t\t\t\t\tis.close();\r\n \t\t\t\t}\r\n-\t\t\t} catch (UnsupportedEncodingException e) {\r\n-\t\t\t\te.printStackTrace();\r\n-\t\t\t} catch (IOException e) {\r\n+\t\t\t} catch (Exception e) {\r\n \t\t\t\te.printStackTrace();\r\n \t\t\t}\r\n-\t\t}\r\n-\t\r\n-\t\tprotected Recon createRecon(String text, JSONArray results) throws JSONException {\r\n-\t\t\tRecon recon = new Recon();\r\n \t\t\t\r\n-\t\t\tint length = results.length();\r\n-\t\t\tfor (int i = 0; i < length && recon.candidates.size() < 3; i++) {\r\n-\t\t\t\tJSONObject result = results.getJSONObject(i);\r\n-\t\t\t\tif (!result.has(\"name\")) {\r\n-\t\t\t\t\tcontinue;\r\n-\t\t\t\t}\r\n+\t\t\tfor (List<ReconEntry> entries : valueToEntries.values()) {\r\n+\t\t\t\tRecon recon = new Recon();\r\n \t\t\t\t\r\n-\t\t\t\tJSONArray types = result.getJSONArray(\"type\");\r\n-\t\t\t\tString[] typeIDs = new String[types.length()];\r\n-\t\t\t\tfor (int j = 0; j < typeIDs.length; j++) {\r\n-\t\t\t\t\ttypeIDs[j] = types.getJSONObject(j).getString(\"id\");\r\n+\t\t\t\tfor (ReconEntry entry : entries) {\r\n+\t\t\t\t\tCell oldCell = entry.cell;\r\n+\t\t\t\t\tCell newCell = new Cell(oldCell.value, recon);\r\n+\t\t\t\t\t\r\n+\t\t\t\t\tCellChange cellChange = new CellChange(\r\n+\t\t\t\t\t\tentry.rowIndex, \r\n+\t\t\t\t\t\t_cellIndex, \r\n+\t\t\t\t\t\toldCell, \r\n+\t\t\t\t\t\tnewCell\r\n+\t\t\t\t\t);\r\n+\t\t\t\t\tcellChanges.add(cellChange);\r\n \t\t\t\t}\r\n-\t\t\t\t\r\n-\t\t\t\tReconCandidate candidate = new ReconCandidate(\r\n-\t\t\t\t\tresult.getString(\"id\"),\r\n-\t\t\t\t\tresult.getString(\"guid\"),\r\n-\t\t\t\t\tresult.getString(\"name\"),\r\n-\t\t\t\t\ttypeIDs,\r\n-\t\t\t\t\tresult.getDouble(\"relevance:score\")\r\n-\t\t\t\t);\r\n-\t\t\t\t\r\n-\t\t\t\t// best match\r\n-\t\t\t\tif (i == 0) {\r\n-\t\t\t\t\trecon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.topicName));\r\n-\t\t\t\t\trecon.setFeature(Recon.Feature_nameLevenshtein, StringUtils.getLevenshteinDistance(text, candidate.topicName));\r\n-\t\t\t\t\trecon.setFeature(Recon.Feature_nameWordDistance, wordDistance(text, candidate.topicName));\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\r\n+\t\tprotected Recon createRecon(String text, JSONArray results) {\r\n+\t\t\tRecon recon = new Recon();\r\n+\t\t\ttry {\r\n+\t\t\t\tint length = results.length();\r\n+\t\t\t\tfor (int i = 0; i < length && recon.candidates.size() < 3; i++) {\r\n+\t\t\t\t\tJSONObject result = results.getJSONObject(i);\r\n+\t\t\t\t\tif (!result.has(\"name\")) {\r\n+\t\t\t\t\t\tcontinue;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\t\r\n+\t\t\t\t\tJSONArray types = result.getJSONArray(\"type\");\r\n+\t\t\t\t\tString[] typeIDs = new String[types.length()];\r\n+\t\t\t\t\tfor (int j = 0; j < typeIDs.length; j++) {\r\n+\t\t\t\t\t\ttypeIDs[j] = types.getJSONObject(j).getString(\"id\");\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\t\r\n+\t\t\t\t\tReconCandidate candidate = new ReconCandidate(\r\n+\t\t\t\t\t\tresult.getString(\"id\"),\r\n+\t\t\t\t\t\tresult.getString(\"guid\"),\r\n+\t\t\t\t\t\tresult.getString(\"name\"),\r\n+\t\t\t\t\t\ttypeIDs,\r\n+\t\t\t\t\t\tresult.getDouble(\"relevance:score\")\r\n+\t\t\t\t\t);\r\n \t\t\t\t\t\r\n-\t\t\t\t\trecon.setFeature(Recon.Feature_typeMatch, false);\r\n-\t\t\t\t\tfor (String typeID : candidate.typeIDs) {\r\n-\t\t\t\t\t\tif (_typeID.equals(typeID)) {\r\n-\t\t\t\t\t\t\trecon.setFeature(Recon.Feature_typeMatch, true);\r\n-\t\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t// best match\r\n+\t\t\t\t\tif (i == 0) {\r\n+\t\t\t\t\t\trecon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.topicName));\r\n+\t\t\t\t\t\trecon.setFeature(Recon.Feature_nameLevenshtein, StringUtils.getLevenshteinDistance(text, candidate.topicName));\r\n+\t\t\t\t\t\trecon.setFeature(Recon.Feature_nameWordDistance, wordDistance(text, candidate.topicName));\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\trecon.setFeature(Recon.Feature_typeMatch, false);\r\n+\t\t\t\t\t\tfor (String typeID : candidate.typeIDs) {\r\n+\t\t\t\t\t\t\tif (_typeID.equals(typeID)) {\r\n+\t\t\t\t\t\t\t\trecon.setFeature(Recon.Feature_typeMatch, true);\r\n+\t\t\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n+\t\t\t\t\t\r\n+\t\t\t\t\trecon.candidates.add(candidate);\r\n \t\t\t\t}\r\n-\t\t\t\t\r\n-\t\t\t\trecon.candidates.add(candidate);\r\n+\t\t\t} catch (JSONException e) {\r\n+\t\t\t\te.printStackTrace();\r\n \t\t\t}\r\n-\t\t\t\r\n \t\t\treturn recon;\r\n \t\t}\r\n \t}\r",
      "parent_sha": "28a86dfe0f82298ccca031d92fce4fa4e52172fd"
    }
  },
  {
    "oid": "db3bbb5c867110b4f6c623fff9dd2b0d74112ef1",
    "message": "Fixed xml parsing error due to whitespaces in front of <?xml>.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2246 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-09-19T09:06:36Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/db3bbb5c867110b4f6c623fff9dd2b0d74112ef1",
    "details": {
      "sha": "292bf46b379f56b2e8ed7ee388bd37d610e8a2e4",
      "filename": "main/src/com/google/refine/importers/XmlImporter.java",
      "status": "modified",
      "additions": 18,
      "deletions": 3,
      "changes": 21,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/db3bbb5c867110b4f6c623fff9dd2b0d74112ef1/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FXmlImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/db3bbb5c867110b4f6c623fff9dd2b0d74112ef1/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FXmlImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FXmlImporter.java?ref=db3bbb5c867110b4f6c623fff9dd2b0d74112ef1",
      "patch": "@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.PushbackInputStream;\n import java.util.List;\n \n import javax.servlet.ServletException;\n@@ -81,6 +82,7 @@ public JSONObject createParserUIInitializationData(\n                 JSONObject firstFileRecord = fileRecords.get(0);\n                 File file = ImportingUtilities.getFile(job, firstFileRecord);\n                 InputStream is = new FileInputStream(file);\n+                \n                 try {\n                     XMLStreamReader parser = createXMLStreamReader(is);\n                     PreviewParsingState state = new PreviewParsingState();\n@@ -200,13 +202,15 @@ public void parseOneFile(Project project, ProjectMetadata metadata,\n                 new XmlParser(inputStream), rootColumnGroup, limit, options, exceptions);\n         } catch (XMLStreamException e) {\n             exceptions.add(e);\n+        } catch (IOException e) {\n+            exceptions.add(e);\n         }\n     }\n     \n     static public class XmlParser implements TreeReader {\n         final protected XMLStreamReader parser;\n         \n-        public XmlParser(InputStream inputStream) throws XMLStreamException {\n+        public XmlParser(InputStream inputStream) throws XMLStreamException, IOException {\n             parser = createXMLStreamReader(inputStream);\n         }\n         \n@@ -305,12 +309,23 @@ public String getAttributeLocalName(int index){\n         }\n     }\n     \n-    final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException {\n+    final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException, IOException {\n         XMLInputFactory factory = XMLInputFactory.newInstance();\n         factory.setProperty(XMLInputFactory.IS_COALESCING, true);\n         factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\n         \n-        return factory.createXMLStreamReader(inputStream);\n+        return factory.createXMLStreamReader(wrapPrefixSpaceRemovingInputStream(inputStream));\n     }\n     \n+    final static private InputStream wrapPrefixSpaceRemovingInputStream(InputStream inputStream) throws IOException {\n+        PushbackInputStream pis = new PushbackInputStream(inputStream);\n+        int b;\n+        while ((b = pis.read()) >= 0) {\n+            if (!Character.isWhitespace(b)) {\n+                pis.unread(b);\n+                break;\n+            }\n+        }\n+        return pis;\n+    }\n }",
      "parent_sha": "66cf0b65962f40ca0e053b9a0a603eaf156c8567"
    }
  },
  {
    "oid": "4ea0f440e91a8f20d693d29a456b25fb08b6a599",
    "message": "remove 3 param error test for 'and' and 'or'",
    "date": "2017-04-27T10:07:04Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/4ea0f440e91a8f20d693d29a456b25fb08b6a599",
    "details": {
      "sha": "65f4a6740d6dbc743c9e0b016f7ef1546de1de65",
      "filename": "main/tests/server/src/com/google/refine/tests/expr/functions/booleans/BooleanTests.java",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/4ea0f440e91a8f20d693d29a456b25fb08b6a599/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fbooleans%2FBooleanTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/4ea0f440e91a8f20d693d29a456b25fb08b6a599/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fbooleans%2FBooleanTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fbooleans%2FBooleanTests.java?ref=4ea0f440e91a8f20d693d29a456b25fb08b6a599",
      "patch": "@@ -23,14 +23,14 @@\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n  */\n- \n+\n package com.google.refine.tests.expr.functions.booleans;\n \n import static org.mockito.Mockito.mock;\n@@ -70,36 +70,36 @@ public class BooleanTests extends RefineTest {\n         {\"and\",\"false\",\"false\",\"false\"},\n         {\"and\",\"true\",\"false\",\"false\"},\n         {\"and\",\"false\",\"true\",\"false\"},\n-        \n+\n         {\"or\",\"true\",\"true\",\"true\"},\n         {\"or\",\"false\",\"false\",\"false\"},\n         {\"or\",\"true\",\"false\",\"true\"},\n         {\"or\",\"false\",\"true\",\"true\"},\n-        \n+\n         {\"xor\",\"true\",\"true\",\"false\"},\n         {\"xor\",\"false\",\"false\",\"false\"},\n         {\"xor\",\"true\",\"false\",\"true\"},\n         {\"xor\",\"false\",\"true\",\"true\"},\n     };\n \n-    \n+\n     static Properties bindings;\n     Project project;\n     Properties options;\n     JSONObject engine_config;\n     Engine engine;\n \n-    \n+\n     @Override\n     @BeforeTest\n     public void init() {\n         logger = LoggerFactory.getLogger(this.getClass());\n     }\n-    \n+\n     @BeforeMethod\n     public void SetUp() throws IOException, ModelException {\n         bindings = new Properties();\n-        \n+\n         File dir = TestUtils.createTempDirectory(\"openrefine-test-workspace-dir\");\n         FileProjectManager.initialize(dir);\n         project = new Project();\n@@ -110,11 +110,11 @@ public void SetUp() throws IOException, ModelException {\n         int index = project.columnModel.allocateNewCellIndex();\n         Column column = new Column(index,\"Column A\");\n         project.columnModel.addColumn(index, column, true);\n-        \n+\n         options = mock(Properties.class);\n-      \n+\n         bindings.put(\"project\", project);\n-        \n+\n         // Five rows of a's and five of 1s\n         for (int i = 0; i < 10; i++) {\n             Row row = new Row(1);\n@@ -128,7 +128,7 @@ public void SetUp() throws IOException, ModelException {\n     public void TearDown() {\n         bindings = null;\n     }\n-    \n+\n     /**\n      * Lookup a control function by name and invoke it with a variable number of args\n      */\n@@ -144,25 +144,25 @@ private static Object invoke(String name,Object... args) {\n             return function.call(bindings,args);\n         }\n     }\n-    \n+\n     @Test\n     public void testInvalidParams() {\n         for (String op : new String[] {\"and\",\"or\",\"xor\"}) {\n         Assert.assertTrue(invoke(op) instanceof EvalError);\n-        Assert.assertTrue(invoke(op, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE) instanceof EvalError);\n         Assert.assertTrue(invoke(op, Boolean.TRUE, Integer.valueOf(1)) instanceof EvalError);\n         Assert.assertTrue(invoke(op, Integer.valueOf(1), Boolean.TRUE) instanceof EvalError);\n         Assert.assertTrue(invoke(op, Boolean.TRUE,\"foo\") instanceof EvalError);\n         Assert.assertTrue(invoke(op, \"foo\", Boolean.TRUE) instanceof EvalError);\n         Assert.assertTrue(invoke(op, Boolean.TRUE) instanceof EvalError);\n         }\n+        Assert.assertTrue(invoke(\"xor\", Boolean.TRUE, Boolean.TRUE, Boolean.TRUE) instanceof EvalError);\n         String op = \"not\";\n         Assert.assertTrue(invoke(op) instanceof EvalError);\n-        Assert.assertTrue(invoke(op, Boolean.TRUE,Boolean.TRUE) instanceof EvalError);\n+        Assert.assertTrue(invoke(op, Boolean.TRUE, Boolean.TRUE) instanceof EvalError);\n         Assert.assertTrue(invoke(op, Integer.valueOf(1)) instanceof EvalError);\n         Assert.assertTrue(invoke(op, \"foo\") instanceof EvalError);\n      }\n-    \n+\n     @Test\n     public void testBinary() {\n         for (String[] test : TRUTH_TABLE) {",
      "parent_sha": "ef4e0399988da7c0c9e8bad9cd6209ceaccd0f95"
    }
  },
  {
    "oid": "b9028ed7808f0d2b493930e2109f76671b9ca697",
    "message": "Add stack trace support and modernize. Fixes #6059 (#6376)\n\n- Adds support for logging Throwable if it's present in the event\r\n- Modernize & streamline time handling and formatting\r\n\r\nThis is a candidate for being removed entirely since we don't use\r\nthe indenting functionality which is pretty much all it offers.",
    "date": "2024-02-21T06:06:22Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/b9028ed7808f0d2b493930e2109f76671b9ca697",
    "details": {
      "sha": "3f2f44bd7fe01183af25852a1c5de77d07da731a",
      "filename": "server/src/com/google/util/logging/IndentingLayout.java",
      "status": "modified",
      "additions": 28,
      "deletions": 49,
      "changes": 77,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/b9028ed7808f0d2b493930e2109f76671b9ca697/server%2Fsrc%2Fcom%2Fgoogle%2Futil%2Flogging%2FIndentingLayout.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/b9028ed7808f0d2b493930e2109f76671b9ca697/server%2Fsrc%2Fcom%2Fgoogle%2Futil%2Flogging%2FIndentingLayout.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/server%2Fsrc%2Fcom%2Fgoogle%2Futil%2Flogging%2FIndentingLayout.java?ref=b9028ed7808f0d2b493930e2109f76671b9ca697",
      "patch": "@@ -32,9 +32,12 @@\n package com.google.util.logging;\n \n import java.nio.charset.Charset;\n-import java.util.Calendar;\n-import java.util.Date;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n \n+import org.apache.commons.lang.exception.ExceptionUtils;\n import org.apache.logging.log4j.core.Layout;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.config.Node;\n@@ -61,10 +64,12 @@ public static IndentingLayout createLayout(@PluginAttribute(value = \"charset\", d\n     }\n \n     protected static final int CONTEXT_SIZE = 25;\n-    protected static final long MAX_DELTA = 10000;\n+    protected static final long MAX_DELTA_MILLIS = 10000;\n \n-    protected Calendar calendar = Calendar.getInstance();\n-    protected long previousTime = 0;\n+    private static final String TIME_FORMAT = \"hh:mm:ss.SSS\";\n+    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern(TIME_FORMAT)\n+            .withZone(ZoneId.systemDefault());\n+    protected Instant previousTime = null;\n     protected int indentation = 0;\n \n     @Override\n@@ -84,58 +89,28 @@ public String toSerializable(LogEvent event) {\n         }\n \n         // Reset buf\n-        StringBuffer buf = new StringBuffer(256);\n-\n-        Date date = new Date();\n-        long now = date.getTime();\n-        calendar.setTime(date);\n-\n-        long delta = 0;\n-        if (previousTime > 0) {\n-            delta = now - previousTime;\n+        StringBuilder buf = new StringBuilder(256);\n+\n+        // Event time is a log4j Instant, not Java instant, so convert it\n+        org.apache.logging.log4j.core.time.Instant then = event.getInstant();\n+        Instant now = Instant.ofEpochSecond(then.getEpochSecond(), then.getNanoOfSecond());\n+        Duration delta = Duration.ZERO;\n+        if (previousTime != null) {\n+            delta = Duration.between(previousTime, now);\n         }\n         previousTime = now;\n \n-//        if ((previousTime == 0) || (delta > MAX_DELTA)) {\n+//        if ((previousTime == null) || (delta.toMillis() > MAX_DELTA_MILLIS)) {\n //            buf.append('\\n');\n-//            indentation = 0; // reset indentation after a while, as we might\n-//            // have runaway/unmatched log entries\n+//            indentation = 0; // reset indentation after a while, as we might have runaway/unmatched log entries\n //        }\n \n-        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n-        if (hour < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(hour);\n-        buf.append(':');\n-\n-        int mins = calendar.get(Calendar.MINUTE);\n-        if (mins < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(mins);\n-        buf.append(':');\n-\n-        int secs = calendar.get(Calendar.SECOND);\n-        if (secs < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(secs);\n-        buf.append('.');\n-\n-        int millis = (int) (now % 1000);\n-        if (millis < 100) {\n-            buf.append('0');\n-        }\n-        if (millis < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(millis);\n+        buf.append(TIME_FORMATTER.format(now));\n \n         buf.append(\" [\");\n         String context = event.getLoggerName();\n         if (context == null) {\n-            context = event.getLoggerName();\n+            context = \"<unknown logger>\";\n         }\n         if (context.length() < CONTEXT_SIZE) {\n             pad(buf, CONTEXT_SIZE - context.length(), ' ');\n@@ -151,17 +126,21 @@ public String toSerializable(LogEvent event) {\n         buf.append(message);\n \n         buf.append(\" (\");\n-        buf.append(delta);\n+        buf.append(delta.toMillis());\n         buf.append(\"ms)\\n\");\n \n         if ((leader == '>') && (secondLeader == ' ')) {\n             indentation++;\n         }\n \n+        if (event.getThrown() != null) {\n+            buf.append(ExceptionUtils.getStackTrace(event.getThrown()));\n+        }\n+\n         return buf.toString();\n     }\n \n-    private void pad(StringBuffer buffer, int pads, char padchar) {\n+    private void pad(StringBuilder buffer, int pads, char padchar) {\n         for (int i = 0; i < pads; i++) {\n             buffer.append(padchar);\n         }",
      "parent_sha": "10cd91c13299b4ee7a61014ddc59a8e1bc1680ad"
    }
  },
  {
    "oid": "29abf730e94c5d872f49fae0c65d6255b6bb208a",
    "message": "check the host readability before test",
    "date": "2017-12-20T19:39:16Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/29abf730e94c5d872f49fae0c65d6255b6bb208a",
    "details": {
      "sha": "5e08014af3c90455fcbf28633bc64d66cd868fbd",
      "filename": "main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java",
      "status": "modified",
      "additions": 61,
      "deletions": 46,
      "changes": 107,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/29abf730e94c5d872f49fae0c65d6255b6bb208a/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FUrlFetchingTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/29abf730e94c5d872f49fae0c65d6255b6bb208a/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FUrlFetchingTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FUrlFetchingTests.java?ref=29abf730e94c5d872f49fae0c65d6255b6bb208a",
      "patch": "@@ -37,6 +37,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n import java.io.File;\n import java.io.IOException;\n+import java.net.InetAddress;\n import java.util.Properties;\n \n import org.json.JSONException;\n@@ -51,16 +52,13 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import com.google.refine.ProjectManager;\n import com.google.refine.ProjectMetadata;\n import com.google.refine.browsing.Engine;\n-import com.google.refine.browsing.RowVisitor;\n-import com.google.refine.grel.Function;\n import com.google.refine.io.FileProjectManager;\n import com.google.refine.expr.ExpressionUtils;\n import com.google.refine.model.Cell;\n import com.google.refine.model.Column;\n import com.google.refine.model.ModelException;\n import com.google.refine.model.Project;\n import com.google.refine.model.Row;\n-import com.google.refine.process.LongRunningProcess;\n import com.google.refine.process.Process;\n import com.google.refine.process.ProcessManager;\n import com.google.refine.operations.OnError;\n@@ -118,49 +116,66 @@ public void TearDown() {\n         engine = null;\n         bindings = null;\n     }\n+    \n+    private boolean isHostReachable(String host, int timeout){\n+        boolean state = false;\n \n+        try {\n+            state = InetAddress.getByName(host).isReachable(timeout);\n+        } catch (IOException e) {\n+//            e.printStackTrace();\n+        }\n+\n+        return state;\n+    }\n+    \n     /**\n      * Test for caching\n      */\n \n     @Test\n     public void testUrlCaching() throws Exception {\n+        if (!isHostReachable(\"www.random.org\", 5000))\n+            return;\n+        \n         for (int i = 0; i < 100; i++) {\n             Row row = new Row(2);\n             row.setCell(0, new Cell(i < 5 ? \"apple\":\"orange\", null));\n             project.rows.add(row);\n         }\n-\tEngineDependentOperation op = new ColumnAdditionByFetchingURLsOperation(engine_config,\n-\t\t\"fruits\",\n-\t\t\"\\\"https://www.random.org/integers/?num=1&min=1&max=100&col=1&base=10&format=plain&rnd=new&city=\\\"+value\",\n-\t\tOnError.SetToBlank,\n-\t\t\"rand\",\n-\t\t1,\n-\t\t500,\n-\t\ttrue);\n-\tProcessManager pm = project.getProcessManager();\n-\tLongRunningProcess process = (LongRunningProcess) op.createProcess(project, options);\n-\tprocess.startPerforming(pm);\n-\tAssert.assertTrue(process.isRunning());\n+        EngineDependentOperation op = new ColumnAdditionByFetchingURLsOperation(engine_config,\n+                \"fruits\",\n+                \"\\\"https://www.random.org/integers/?num=1&min=1&max=100&col=1&base=10&format=plain&rnd=new&city=\\\"+value\",\n+                OnError.StoreError,\n+                \"rand\",\n+                1,\n+                500,\n+                true);\n+        ProcessManager pm = project.getProcessManager();\n+        Process process = op.createProcess(project, options);\n+        process.startPerforming(pm);\n+        Assert.assertTrue(process.isRunning());\n         try {\n             // We have 100 rows and 500 ms per row but only two distinct\n             // values so we should not wait more than ~2000 ms to get the\n             // results. Just to make sure the test passes with plenty of\n-            // net latency we wait for longer (but still less than\n+            // net latency we sleep for longer (but still less than\n             // 50,000ms).\n-            process.join(5000 * 1200);\n+            Thread.sleep(5000);\n         } catch (InterruptedException e) {\n             Assert.fail(\"Test interrupted\");\n         }\n-\tAssert.assertFalse(process.isRunning());\n-\n-\t// Inspect rows\n-\tString ref_val = (String)project.rows.get(0).getCellValue(1);\n-\tAssert.assertTrue(ref_val != \"apple\"); // just to make sure I picked the right column\n-\tfor (int i = 1; i < 4; i++) {\n-\t    // all random values should be equal due to caching\n-\t    Assert.assertEquals(project.rows.get(i).getCellValue(1), ref_val);\n-\t}\n+\n+\n+        // Inspect rows\n+        String ref_val = (String)project.rows.get(0).getCellValue(1).toString();\n+        Assert.assertTrue(ref_val != \"apple\"); // just to make sure I picked the right column\n+        for (int i = 1; i < 4; i++) {\n+            System.out.println(\"value:\" + project.rows.get(i).getCellValue(1));\n+            // all random values should be equal due to caching\n+            Assert.assertEquals(project.rows.get(i).getCellValue(1), ref_val);\n+        }\n+               Assert.assertFalse(process.isRunning());\n     }\n \n     /**\n@@ -178,30 +193,30 @@ public void testInvalidUrl() throws Exception {\n         Row row2 = new Row(2);\n         row2.setCell(0, new Cell(\"http://anursiebcuiesldcresturce.detur/anusclbc\", null)); // well-formed but invalid\n         project.rows.add(row2);\n-\tEngineDependentOperation op = new ColumnAdditionByFetchingURLsOperation(engine_config,\n-\t\t\"fruits\",\n-\t\t\"value\",\n-\t\tOnError.StoreError,\n-\t\t\"junk\",\n-\t\t1,\n-\t\t50,\n-\t\ttrue);\n-\tProcessManager pm = project.getProcessManager();\n+        EngineDependentOperation op = new ColumnAdditionByFetchingURLsOperation(engine_config,\n+                \"fruits\",\n+                \"value\",\n+                OnError.StoreError,\n+                \"junk\",\n+                1,\n+                50,\n+                true);\n+        ProcessManager pm = project.getProcessManager();\n         Process process = op.createProcess(project, options);\n-\tprocess.startPerforming(pm);\n-\tAssert.assertTrue(process.isRunning());\n-\ttry {\n-\t    Thread.sleep(5000);\n+        process.startPerforming(pm);\n+        Assert.assertTrue(process.isRunning());\n+        try {\n+            Thread.sleep(5000);\n         } catch (InterruptedException e) {\n-\t    Assert.fail(\"Test interrupted\");\n+            Assert.fail(\"Test interrupted\");\n         }\n-\tAssert.assertFalse(process.isRunning());\n+        Assert.assertFalse(process.isRunning());\n \n-\tint newCol = project.columnModel.getColumnByName(\"junk\").getCellIndex();\n-\t// Inspect rows\n-\tAssert.assertEquals(project.rows.get(0).getCellValue(newCol), null);\n-\tAssert.assertTrue(project.rows.get(1).getCellValue(newCol) != null);\n-\tAssert.assertTrue(ExpressionUtils.isError(project.rows.get(2).getCellValue(newCol)));\n+        int newCol = project.columnModel.getColumnByName(\"junk\").getCellIndex();\n+        // Inspect rows\n+        Assert.assertEquals(project.rows.get(0).getCellValue(newCol), null);\n+        Assert.assertTrue(project.rows.get(1).getCellValue(newCol) != null);\n+        Assert.assertTrue(ExpressionUtils.isError(project.rows.get(2).getCellValue(newCol)));\n     }\n \n }",
      "parent_sha": "2f050322b5bfdf44742e4cb9473252030726025d"
    }
  },
  {
    "oid": "ec02fa61318256e0d8c9360d3a680383fba22943",
    "message": "Fixes #4485 DB Extension autoclose stream with try with resources (#4486)\n\n* Fixes #4485 autoclose stream with try with resources\r\n- uses newer try with resources to autoclose stream regardless\r\n\r\n* simplify stream variable assignment\r\n\r\nCo-authored-by: Antonin Delpeuch <antonin@delpeuch.eu>",
    "date": "2022-02-03T17:15:56Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/ec02fa61318256e0d8c9360d3a680383fba22943",
    "details": {
      "sha": "a8003184e0566918e1ae589a95db5eac5b531a3e",
      "filename": "extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/ec02fa61318256e0d8c9360d3a680383fba22943/extensions%2Fdatabase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fdatabase%2FDatabaseModuleImpl.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/ec02fa61318256e0d8c9360d3a680383fba22943/extensions%2Fdatabase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fdatabase%2FDatabaseModuleImpl.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fdatabase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fdatabase%2FDatabaseModuleImpl.java?ref=ec02fa61318256e0d8c9360d3a680383fba22943",
      "patch": "@@ -111,20 +111,18 @@ private Properties loadProperties(File propFile) {\n                 if(logger.isDebugEnabled()) {\n                     logger.debug(\"Loading Extension properties ({})\", propFile);\n                 }\n-                BufferedInputStream stream = null;\n-                try {\n-                     ps = new Properties();\n-                    stream = new BufferedInputStream(new FileInputStream(propFile));\n+                \n+                try (final BufferedInputStream stream = new BufferedInputStream(new FileInputStream(propFile))) {\n+                    ps = new Properties();\n                     ps.load(stream);\n-\n-                } finally {\n-                    // Close the stream.\n-                    if (stream != null) stream.close();\n                 }\n \n             }\n         } catch (Exception e) {\n             logger.error(\"Error loading Database properties\", e);\n+            /* During an exception reading 'dbextension.properties' (security or no permissions for example)\n+             * the try with resources will autoclose the stream for us. And then we log the exception.\n+             */\n         }\n         return ps;\n     }",
      "parent_sha": "1e7ca54628daa02635ae8c78814b21ec0ba4e990"
    }
  },
  {
    "oid": "2deae9d78583e79d2a65ffca5332004789556508",
    "message": "Issue 450 - Double escape our double escape so that single quotes in data don't cause uploads to fail\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2265 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-09-29T21:26:53Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/2deae9d78583e79d2a65ffca5332004789556508",
    "details": {
      "sha": "874b30e0b67ed6536ecc9ea7aa4eeefdd6ada11a",
      "filename": "extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/2deae9d78583e79d2a65ffca5332004789556508/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FUploadCommand.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/2deae9d78583e79d2a65ffca5332004789556508/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FUploadCommand.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FUploadCommand.java?ref=2deae9d78583e79d2a65ffca5332004789556508",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2010, Thomas F. Morris\n+ * Copyright (c) 2010,2011 Thomas F. Morris\n  *        All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without \n@@ -416,7 +416,7 @@ void formulateInsert(List<CellData> cells, StringBuffer sb) {\n                 \n                 sbValues.append(\"'\");\n                 if (cellData != null && cellData.text != null) {\n-                    sbValues.append(cellData.text.replaceAll(\"'\", \"\\\\'\"));\n+                    sbValues.append(cellData.text.replaceAll(\"'\", \"\\\\\\\\'\"));\n                 }\n                 sbValues.append(\"'\");\n             }",
      "parent_sha": "0210329e8ffcd7cd2d3de9eda26a8cb886fa4645"
    }
  },
  {
    "oid": "99852a193ce536049070c7d5187c07c1e0349277",
    "message": "Jackson deserialization for ColumnAdditionOperation",
    "date": "2018-11-30T10:22:21Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/99852a193ce536049070c7d5187c07c1e0349277",
    "details": {
      "sha": "e32034361a44538a61f12ee2db63729f77b334b2",
      "filename": "main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/99852a193ce536049070c7d5187c07c1e0349277/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcolumn%2FColumnAdditionOperation.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/99852a193ce536049070c7d5187c07c1e0349277/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcolumn%2FColumnAdditionOperation.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcolumn%2FColumnAdditionOperation.java?ref=99852a193ce536049070c7d5187c07c1e0349277",
      "patch": "@@ -33,13 +33,15 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.operations.column;\n \n+import java.io.IOException;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n \n import org.json.JSONObject;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import com.google.refine.browsing.Engine;\n@@ -61,7 +63,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import com.google.refine.model.changes.ColumnAdditionChange;\n import com.google.refine.operations.EngineDependentOperation;\n import com.google.refine.operations.OnError;\n-import com.google.refine.operations.cell.TextTransformOperation;\n+import com.google.refine.util.ParsingUtilities;\n \n public class ColumnAdditionOperation extends EngineDependentOperation {\n     final protected String     _baseColumnName;\n@@ -71,25 +73,23 @@ public class ColumnAdditionOperation extends EngineDependentOperation {\n     final protected String     _newColumnName;\n     final protected int        _columnInsertIndex;\n \n-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {\n-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");\n-        \n-        return new ColumnAdditionOperation(\n-            EngineConfig.reconstruct(engineConfig),\n-            obj.getString(\"baseColumnName\"),\n-            obj.getString(\"expression\"),\n-            TextTransformOperation.stringToOnError(obj.getString(\"onError\")),\n-            obj.getString(\"newColumnName\"),\n-            obj.getInt(\"columnInsertIndex\")\n-        );\n+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {\n+        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnAdditionOperation.class);\n     }\n     \n+    @JsonCreator\n     public ColumnAdditionOperation(\n+        @JsonProperty(\"engineConfig\")\n         EngineConfig   engineConfig,\n+        @JsonProperty(\"baseColumnName\")\n         String         baseColumnName,\n+        @JsonProperty(\"expression\")\n         String         expression,\n+        @JsonProperty(\"onError\")\n         OnError        onError,\n-        String         newColumnName, \n+        @JsonProperty(\"newColumnName\")\n+        String         newColumnName,\n+        @JsonProperty(\"columnInsertIndex\")\n         int            columnInsertIndex \n     ) {\n         super(engineConfig);",
      "parent_sha": "a07f825aad6f9b451d754814e413377831bede39"
    }
  },
  {
    "oid": "9ff138c65d1e0d541aa76581011b63e599b9aee1",
    "message": "Apply tags directly through the Wikibase API, fixes #2196",
    "date": "2020-02-03T10:21:03Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/9ff138c65d1e0d541aa76581011b63e599b9aee1",
    "details": {
      "sha": "864b4e6c4694dfba9e9dcb4e025cd7352c2f6129",
      "filename": "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/9ff138c65d1e0d541aa76581011b63e599b9aee1/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Foperations%2FPerformWikibaseEditsOperation.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/9ff138c65d1e0d541aa76581011b63e599b9aee1/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Foperations%2FPerformWikibaseEditsOperation.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Foperations%2FPerformWikibaseEditsOperation.java?ref=9ff138c65d1e0d541aa76581011b63e599b9aee1",
      "patch": "@@ -158,15 +158,13 @@ protected PerformEditsProcess(Project project, Engine engine, String description\n             this._engine = engine;\n             this._schema = (WikibaseSchema) project.overlayModels.get(\"wikibaseSchema\");\n             this._summary = summary;\n-            // TODO this is one of the attributes that should be configured on a per-wiki basis\n-            // TODO enable this tag once 3.3 final is released and create 3.4 tag without AbuseFilter\n             String tag = \"openrefine\";\n             Pattern pattern = Pattern.compile(\"^(\\\\d+\\\\.\\\\d+).*$\");\n             Matcher matcher = pattern.matcher(RefineServlet.VERSION);\n             if (matcher.matches()) {\n                 tag += \"-\"+matcher.group(1);\n             }\n-            this._tags = Collections.emptyList(); // TODO Arrays.asList(tag);\n+            this._tags = Arrays.asList(tag);\n             this._historyEntryID = HistoryEntry.allocateID();\n         }\n \n@@ -191,7 +189,7 @@ public void run() {\n             // make sure they can be told apart.\n             String summaryWithoutCommas = _summary.replaceAll(\", \",\"\ua4f9 \").replaceAll(\": \",\"\u0589 \");\n             String summary = summaryWithoutCommas + String.format(\" ([[:toollabs:editgroups/b/OR/%s|details]])\",\n-                    (Long.toHexString(token).substring(0, 10)));\n+                    (Long.toHexString(token).substring(0, 11)));\n \n             // Evaluate the schema\n             List<ItemUpdate> itemDocuments = _schema.evaluate(_project, _engine);",
      "parent_sha": "429f26c2ae534c889fd0ec5c059f0bc8e35cae14"
    }
  },
  {
    "oid": "bfc275de5ff26c925c460354083cda2045d7ca23",
    "message": "Issue 226 - Format dates as ISO 8601 for compatibility with Freebase graph\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2451 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2012-03-03T21:39:55Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/bfc275de5ff26c925c460354083cda2045d7ca23",
    "details": {
      "sha": "f2a88074ae80d361787ff8971351bfb9a2006215",
      "filename": "extensions/freebase/src/com/google/refine/freebase/protograph/transpose/TripleLoaderTransposedNodeFactory.java",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/bfc275de5ff26c925c460354083cda2045d7ca23/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/bfc275de5ff26c925c460354083cda2045d7ca23/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTripleLoaderTransposedNodeFactory.java?ref=bfc275de5ff26c925c460354083cda2045d7ca23",
      "patch": "@@ -1,6 +1,6 @@\n /*\n \n-Copyright 2010, Google Inc.\n+Copyright 2010,2012. Google Inc.\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n@@ -35,6 +35,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n import java.io.IOException;\n import java.io.Writer;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedList;\n@@ -365,7 +369,7 @@ public Object internalWrite(String subject, String predicate, Project project, i\n             boolean first = true;\n             boolean firstRecon = true;\n             \n-            if (subjectCell.recon != null) {\n+            if (subjectCell != null && subjectCell.recon != null) {\n                 sbRecon.append(\"\\\"s\\\" : \");\n                 writeRecon(sbRecon, project, subjectRowIndex, subjectCellIndex, subjectCell);\n                 \n@@ -847,7 +851,11 @@ protected void writeContextTreeNode() {\n     \n     static protected Object validateValue(Object value, String valueType) {\n         if (\"/type/datetime\".equals(valueType)) {\n-            if (!(value instanceof String)) {\n+            if (value instanceof Calendar || value instanceof Date) {\n+                DateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n+                value = formatter.format(value instanceof Date ? ((Date) value) \n+                        : ((Calendar) value).getTime());\n+            } else if (!(value instanceof String)) {\n                 value = value.toString();\n             }\n         } else if (\"/type/boolean\".equals(valueType)) {",
      "parent_sha": "4a99abf25d0d318efbf22444a7a8360ced6f4676"
    }
  },
  {
    "oid": "45ccd0e1c0c81bccea24c8ace25c1dfcf9ae6781",
    "message": "Change HTTP error detection in URL fetching test",
    "date": "2018-01-03T21:44:32Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/45ccd0e1c0c81bccea24c8ace25c1dfcf9ae6781",
    "details": {
      "sha": "66c4564e81ccb79b6162a5e3d112f64cc6f8700f",
      "filename": "main/tests/server/src/com/google/refine/tests/model/UrlFetchingTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/45ccd0e1c0c81bccea24c8ace25c1dfcf9ae6781/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FUrlFetchingTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/45ccd0e1c0c81bccea24c8ace25c1dfcf9ae6781/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FUrlFetchingTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FUrlFetchingTests.java?ref=45ccd0e1c0c81bccea24c8ace25c1dfcf9ae6781",
      "patch": "@@ -169,7 +169,7 @@ public void testUrlCaching() throws Exception {\n \n         // Inspect rows\n         String ref_val = (String)project.rows.get(0).getCellValue(1).toString();\n-\tif (ref_val.contains(\"HTTP error 403\"))\n+\tif (ref_val.startsWith(\"HTTP error\"))\n             return;\n         Assert.assertTrue(ref_val != \"apple\"); // just to make sure I picked the right column\n         for (int i = 1; i < 4; i++) {",
      "parent_sha": "dae4ac1ce44fe7719e1ed8c0299089f6e51199c8"
    }
  },
  {
    "oid": "4ad31ffcdeed6195f367f5bf6340270b375836ae",
    "message": "Excel importer now supports \"header lines\" parameter.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1125 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-08-01T04:22:45Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/4ad31ffcdeed6195f367f5bf6340270b375836ae",
    "details": {
      "sha": "04e1ceab48edb2ddf8331a17045fa984e0a6690a",
      "filename": "main/src/com/metaweb/gridworks/importers/ExcelImporter.java",
      "status": "modified",
      "additions": 179,
      "deletions": 150,
      "changes": 329,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/4ad31ffcdeed6195f367f5bf6340270b375836ae/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fimporters%2FExcelImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/4ad31ffcdeed6195f367f5bf6340270b375836ae/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fimporters%2FExcelImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fimporters%2FExcelImporter.java?ref=4ad31ffcdeed6195f367f5bf6340270b375836ae",
      "patch": "@@ -6,9 +6,11 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Set;\n \n import org.apache.poi.common.usermodel.Hyperlink;\n import org.apache.poi.hssf.usermodel.HSSFDateUtil;\n@@ -28,19 +30,20 @@\n \n public class ExcelImporter implements Importer {\n     protected boolean _xmlBased;\n-\n+    \n     public boolean takesReader() {\n         return false;\n     }\n-\n+    \n     public void read(Reader reader, Project project, Properties options) throws Exception {\n         throw new UnsupportedOperationException();\n     }\n-\n+    \n     public void read(InputStream inputStream, Project project, Properties options) throws Exception {\n         int ignoreLines = ImporterUtilities.getIntegerOption(\"ignore\", options, -1);\n-        int limit = ImporterUtilities.getIntegerOption(\"limit\",options,-1);\n-        int skip = ImporterUtilities.getIntegerOption(\"skip\",options,0);\n+        int headerLines = ImporterUtilities.getIntegerOption(\"header-lines\", options, 1);\n+        int limit = ImporterUtilities.getIntegerOption(\"limit\", options, -1);\n+        int skip = ImporterUtilities.getIntegerOption(\"skip\", options, 0);\n \n         Workbook wb = null;\n         try {\n@@ -54,196 +57,222 @@ public void read(InputStream inputStream, Project project, Properties options) t\n                 e\n             );\n         }\n-\n+        \n         Sheet sheet = wb.getSheetAt(0);\n-\n+        \n         int firstRow = sheet.getFirstRowNum();\n         int lastRow = sheet.getLastRowNum();\n-        int r = firstRow;\n-\n-        List<Integer>    nonBlankIndices = null;\n-        List<String>     nonBlankHeaderStrings = null;\n-\n-        /*\n-         *  Find the header row\n-         */\n-        for (; r <= lastRow; r++) {\n+        \n+        List<String>         columnNames = new ArrayList<String>();\n+        Set<String>          columnNameSet = new HashSet<String>();\n+        Map<String, Integer> columnRootNameToIndex = new HashMap<String, Integer>();\n+        \n+        int                  rowsWithData = 0;\n+        Map<String, Recon>   reconMap = new HashMap<String, Recon>();\n+        \n+        for (int r = firstRow; r <= lastRow; r++) {\n             org.apache.poi.ss.usermodel.Row row = sheet.getRow(r);\n             if (row == null) {\n                 continue;\n             } else if (ignoreLines > 0) {\n                 ignoreLines--;\n                 continue;\n             }\n-\n+            \n             short firstCell = row.getFirstCellNum();\n             short lastCell = row.getLastCellNum();\n-            if (firstCell >= 0 && firstCell <= lastCell) {\n-                nonBlankIndices = new ArrayList<Integer>(lastCell - firstCell + 1);\n-                nonBlankHeaderStrings = new ArrayList<String>(lastCell - firstCell + 1);\n-\n+            if (firstCell < 0 || firstCell > lastCell) {\n+                continue;\n+            }\n+            \n+            /*\n+             *  Still processing header lines\n+             */\n+            if (headerLines > 0) {\n+                headerLines--;\n+                \n                 for (int c = firstCell; c <= lastCell; c++) {\n                     org.apache.poi.ss.usermodel.Cell cell = row.getCell(c);\n                     if (cell != null) {\n                         String text = cell.getStringCellValue().trim();\n                         if (text.length() > 0) {\n-                            nonBlankIndices.add((int) c);\n-                            nonBlankHeaderStrings.add(text);\n+                            while (columnNames.size() < c + 1) {\n+                                columnNames.add(null);\n+                            }\n+                            \n+                            String existingName = columnNames.get(c);\n+                            String name = (existingName == null) ? text : (existingName + \" \" + text);\n+                            \n+                            columnNames.set(c, name);\n                         }\n                     }\n                 }\n-\n-                if (nonBlankIndices.size() > 0) {\n-                    r++;\n-                    break;\n+                \n+                if (headerLines == 0) {\n+                    for (int i = 0; i < columnNames.size(); i++) {\n+                        String rootName = columnNames.get(i);\n+                        if (rootName == null) {\n+                            continue;\n+                        }\n+                        setUnduplicatedColumnName(rootName, columnNames, i, columnNameSet, columnRootNameToIndex);\n+                    }\n                 }\n-            }\n-        }\n-\n-        if (nonBlankIndices == null || nonBlankIndices.size() == 0) {\n-            return;\n-        }\n-\n-        /*\n-         *  Create columns\n-         */\n-        Map<String, Integer> nameToIndex = new HashMap<String, Integer>();\n-        for (int c = 0; c < nonBlankIndices.size(); c++) {\n-            String cell = nonBlankHeaderStrings.get(c);\n-            if (nameToIndex.containsKey(cell)) {\n-                int index = nameToIndex.get(cell);\n-                nameToIndex.put(cell, index + 1);\n-\n-                cell = cell.contains(\" \") ? (cell + \" \" + index) : (cell + index);\n+                \n+            /*\n+             *  Processing data rows\n+             */\n             } else {\n-                nameToIndex.put(cell, 2);\n-            }\n-\n-            Column column = new Column(c, cell);\n-            project.columnModel.columns.add(column);\n-        }\n-\n-        /*\n-         *  Now process the data rows\n-         */\n-        int rowsWithData = 0;\n-        Map<String, Recon> reconMap = new HashMap<String, Recon>();\n-\n-        for (; r <= lastRow; r++) {\n-            org.apache.poi.ss.usermodel.Row row = sheet.getRow(r);\n-            if (row == null) {\n-                continue;\n-            }\n-\n-            short firstCell = row.getFirstCellNum();\n-            short lastCell = row.getLastCellNum();\n-            if (firstCell >= 0 && firstCell <= lastCell) {\n-                Row newRow = new Row(nonBlankIndices.size());\n+                Row newRow = new Row(columnNames.size());\n                 boolean hasData = false;\n-\n-                for (int c = 0; c < nonBlankIndices.size(); c++) {\n-                    if (c < firstCell || c > lastCell) {\n-                        continue;\n-                    }\n-\n+                \n+                for (int c = firstCell; c <= lastCell; c++) {\n                     org.apache.poi.ss.usermodel.Cell cell = row.getCell(c);\n                     if (cell == null) {\n                         continue;\n                     }\n-\n-                    int cellType = cell.getCellType();\n-                    if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_ERROR ||\n-                        cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK) {\n-                        continue;\n-                    }\n-                    if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA) {\n-                        cellType = cell.getCachedFormulaResultType();\n-                    }\n-\n-                    Serializable value = null;\n-                    if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN) {\n-                        value = cell.getBooleanCellValue();\n-                    } else if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC) {\n-                        double d = cell.getNumericCellValue();\n-\n-                        if (HSSFDateUtil.isCellDateFormatted(cell)) {\n-                            value = HSSFDateUtil.getJavaDate(d);\n-                        } else {\n-                            value = d;\n-                        }\n-                    } else {\n-                        String text = cell.getStringCellValue().trim();\n-                        if (text.length() > 0) {\n-                            value = text;\n+                    \n+                    Cell ourCell = extractCell(cell, reconMap);\n+                    if (ourCell != null) {\n+                        while (columnNames.size() < c + 1) {\n+                            columnNames.add(null);\n                         }\n-                    }\n-\n-                    if (value != null) {\n-                        Recon recon = null;\n-\n-                        Hyperlink hyperlink = cell.getHyperlink();\n-                        if (hyperlink != null) {\n-                            String url = hyperlink.getAddress();\n-\n-                            if (url.startsWith(\"http://\") ||\n-                                url.startsWith(\"https://\")) {\n-\n-                                final String sig = \"freebase.com/view\";\n-\n-                                int i = url.indexOf(sig);\n-                                if (i > 0) {\n-                                    String id = url.substring(i + sig.length());\n-\n-                                    int q = id.indexOf('?');\n-                                    if (q > 0) {\n-                                        id = id.substring(0, q);\n-                                    }\n-                                    int h = id.indexOf('#');\n-                                    if (h > 0) {\n-                                        id = id.substring(0, h);\n-                                    }\n-\n-                                    if (reconMap.containsKey(id)) {\n-                                        recon = reconMap.get(id);\n-                                        recon.judgmentBatchSize++;\n-                                    } else {\n-                                        recon = new Recon(0, null, null);\n-                                        recon.service = \"import\";\n-                                        recon.match = new ReconCandidate(id, value.toString(), new String[0], 100);\n-                                        recon.matchRank = 0;\n-                                        recon.judgment = Judgment.Matched;\n-                                        recon.judgmentAction = \"auto\";\n-                                        recon.judgmentBatchSize = 1;\n-                                        recon.addCandidate(recon.match);\n-\n-                                        reconMap.put(id, recon);\n-                                    }\n-\n-                                }\n-                            }\n+                        if (columnNames.get(c) == null) {\n+                            setUnduplicatedColumnName(\"Column\", columnNames, c, columnNameSet, columnRootNameToIndex);\n                         }\n-\n-                        newRow.setCell(c, new Cell(value, recon));\n+                        \n+                        newRow.setCell(c, ourCell);\n                         hasData = true;\n                     }\n                 }\n-\n+                \n                 if (hasData) {\n                     rowsWithData++;\n-\n+                    \n                     if (skip <= 0 || rowsWithData > skip) {\n                         project.rows.add(newRow);\n                         project.columnModel.setMaxCellIndex(newRow.cells.size());\n-\n+                        \n                         if (limit > 0 && project.rows.size() >= limit) {\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n+        \n+        /*\n+         *  Create columns\n+         */\n+        for (int c = 0; c < columnNames.size(); c++) {\n+            String name = columnNames.get(c);\n+            if (name != null) {\n+                Column column = new Column(c, name);\n+                project.columnModel.columns.add(column);\n+            }\n+        }\n+    }\n+    \n+    protected void setUnduplicatedColumnName(\n+        String rootName, List<String> columnNames, int index, Set<String> columnNameSet, Map<String, Integer> columnRootNameToIndex) {\n+        if (columnNameSet.contains(rootName)) {\n+            int startIndex = columnRootNameToIndex.containsKey(rootName) ? columnRootNameToIndex.get(rootName) : 2;\n+            while (true) {\n+                String name = rootName + \" \" + startIndex;\n+                if (columnNameSet.contains(name)) {\n+                    startIndex++;\n+                } else {\n+                    columnNames.set(index, name);\n+                    columnNameSet.add(name);\n+                    break;\n+                }\n+            }\n+            \n+            columnRootNameToIndex.put(rootName, startIndex + 1);\n+        } else {\n+            columnNames.set(index, rootName);\n+            columnNameSet.add(rootName);\n+        }\n+    }\n+    \n+    protected Cell extractCell(org.apache.poi.ss.usermodel.Cell cell, Map<String, Recon> reconMap) {\n+        int cellType = cell.getCellType();\n+        if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_ERROR ||\n+            cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK) {\n+            return null;\n+        }\n+        if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA) {\n+            cellType = cell.getCachedFormulaResultType();\n+        }\n+        \n+        Serializable value = null;\n+        if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN) {\n+            value = cell.getBooleanCellValue();\n+        } else if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC) {\n+            double d = cell.getNumericCellValue();\n+            \n+            if (HSSFDateUtil.isCellDateFormatted(cell)) {\n+                value = HSSFDateUtil.getJavaDate(d);\n+            } else {\n+                value = d;\n+            }\n+        } else {\n+            String text = cell.getStringCellValue().trim();\n+            if (text.length() > 0) {\n+                value = text;\n+            }\n+        }\n+        \n+        if (value != null) {\n+            Recon recon = null;\n+            \n+            Hyperlink hyperlink = cell.getHyperlink();\n+            if (hyperlink != null) {\n+                String url = hyperlink.getAddress();\n+                \n+                if (url.startsWith(\"http://\") ||\n+                    url.startsWith(\"https://\")) {\n+                    \n+                    final String sig = \"freebase.com/view\";\n+                    \n+                    int i = url.indexOf(sig);\n+                    if (i > 0) {\n+                        String id = url.substring(i + sig.length());\n+                        \n+                        int q = id.indexOf('?');\n+                        if (q > 0) {\n+                            id = id.substring(0, q);\n+                        }\n+                        int h = id.indexOf('#');\n+                        if (h > 0) {\n+                            id = id.substring(0, h);\n+                        }\n+                        \n+                        if (reconMap.containsKey(id)) {\n+                            recon = reconMap.get(id);\n+                            recon.judgmentBatchSize++;\n+                        } else {\n+                            recon = new Recon(0, null, null);\n+                            recon.service = \"import\";\n+                            recon.match = new ReconCandidate(id, value.toString(), new String[0], 100);\n+                            recon.matchRank = 0;\n+                            recon.judgment = Judgment.Matched;\n+                            recon.judgmentAction = \"auto\";\n+                            recon.judgmentBatchSize = 1;\n+                            recon.addCandidate(recon.match);\n+                            \n+                            reconMap.put(id, recon);\n+                        }\n+                        \n+                    }\n+                }\n+            }\n+            \n+            return new Cell(value, recon);\n+        } else {\n+            return null;\n+        }\n     }\n-\n+    \n     public boolean canImportData(String contentType, String fileName) {\n         if (contentType != null) {\n             contentType = contentType.toLowerCase().trim();",
      "parent_sha": "7bb6674e5b09f64a1c6edaf9b3937f9beeb8a491"
    }
  },
  {
    "oid": "b9fa100d316ca411fdf337954c648ebbe23d9e4d",
    "message": "Don't try to save a null encoding\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1936 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-11-27T17:54:01Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/b9fa100d316ca411fdf337954c648ebbe23d9e4d",
    "details": {
      "sha": "5b664de254040647e25146dbc34bdde272dfcfad",
      "filename": "main/src/com/google/refine/commands/project/CreateProjectCommand.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/b9fa100d316ca411fdf337954c648ebbe23d9e4d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/b9fa100d316ca411fdf337954c648ebbe23d9e4d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java?ref=b9fa100d316ca411fdf337954c648ebbe23d9e4d",
      "patch": "@@ -484,7 +484,9 @@ protected void internalInvokeImporter(\n         } else {\n             // TODO: How do we set character encoding here?\n             // Things won't work right if it's not set, so pick some arbitrary values\n-            options.setProperty(\"encoding\", encoding);\n+            if (encoding != null) {\n+                options.setProperty(\"encoding\", encoding);\n+            }\n             options.setProperty(\"encoding_confidence\", \"0\");\n             ((StreamImporter) importer).read(rawInputStream, project, metadata, options);\n         }",
      "parent_sha": "850c43d6f32b4198cdf26b2d2a267febe45a28e4"
    }
  },
  {
    "oid": "194fb5e70699bab8515ca79cc71f37c5261e00b8",
    "message": "Fixed Issue 122: Exporting to Excel on attached project raises server exception\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1370 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-09-28T03:44:30Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/194fb5e70699bab8515ca79cc71f37c5261e00b8",
    "details": {
      "sha": "f8a40780c02eefd1b994ccb83125a7ce29cb029c",
      "filename": "main/src/com/google/refine/exporters/XlsExporter.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/194fb5e70699bab8515ca79cc71f37c5261e00b8/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/194fb5e70699bab8515ca79cc71f37c5261e00b8/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporter.java?ref=194fb5e70699bab8515ca79cc71f37c5261e00b8",
      "patch": "@@ -105,7 +105,12 @@ public boolean visit(Project project, int rowIndex, Row row) {\n                                     } else if (v instanceof Calendar) {\n                                         c.setCellValue((Calendar) v);\n                                     } else if (v instanceof String) {\n-                                        c.setCellValue((String) v);\n+                                        String s = (String) v;\n+                                        if (s.length() > 32767) {\n+                                            // The maximum length of cell contents (text) is 32,767 characters\n+                                            s = s.substring(0, 32767);\n+                                        }\n+                                        c.setCellValue(s);\n                                     }\n                                 }\n                             }",
      "parent_sha": "f2ce1b716196c1cf555f0f0987b25168b73fac2c"
    }
  },
  {
    "oid": "4e79c0d4101994a0ca7f2e32fa4cf46992b4caec",
    "message": "fix typo",
    "date": "2017-11-18T03:55:16Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/4e79c0d4101994a0ca7f2e32fa4cf46992b4caec",
    "details": {
      "sha": "46cc3f9f1abca9c306bd7ec938a4c4646148e435",
      "filename": "main/src/com/google/refine/ProjectManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/4e79c0d4101994a0ca7f2e32fa4cf46992b4caec/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FProjectManager.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/4e79c0d4101994a0ca7f2e32fa4cf46992b4caec/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FProjectManager.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FProjectManager.java?ref=4e79c0d4101994a0ca7f2e32fa4cf46992b4caec",
      "patch": "@@ -395,7 +395,7 @@ public void mergeEmptyUserMetadata(ProjectMetadata metadata) {\n         // actual metadata for project\n         JSONArray jsonObjArray = metadata.getUserMetadata();\n         \n-        initDispaly(jsonObjArray);\n+        initDisplay(jsonObjArray);\n         \n         try {\n             String userMeta = (String)_preferenceStore.get(PreferenceStore.USER_METADATA_KEY);\n@@ -443,7 +443,7 @@ public void mergeEmptyUserMetadata(ProjectMetadata metadata) {\n      * honor the meta data preference\n      * @param jsonObjArray\n      */\n-    private void initDispaly(JSONArray jsonObjArray) {\n+    private void initDisplay(JSONArray jsonObjArray) {\n         for (int index = 0; index < jsonObjArray.length(); index++) {\n             try {\n                 JSONObject projectMetaJsonObj = jsonObjArray.getJSONObject(index);",
      "parent_sha": "b83961d2c6a793c8f09ac7aa9777ee885fcde530"
    }
  },
  {
    "oid": "fad3c21e4f177ef22088c0c7aa9a391a2e2d6627",
    "message": "fixes #3133 modify default return of call() for ToString to state for Number format (#4642)",
    "date": "2022-03-28T05:17:21Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/fad3c21e4f177ef22088c0c7aa9a391a2e2d6627",
    "details": {
      "sha": "b692e9ed1980e7c9a9b5fa934d534c67f6500fee",
      "filename": "main/src/com/google/refine/expr/functions/ToString.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/fad3c21e4f177ef22088c0c7aa9a391a2e2d6627/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToString.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/fad3c21e4f177ef22088c0c7aa9a391a2e2d6627/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToString.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToString.java?ref=fad3c21e4f177ef22088c0c7aa9a391a2e2d6627",
      "patch": "@@ -64,7 +64,7 @@ public Object call(Properties bindings, Object[] args) {\n                 } \n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" accepts an object and an optional second argument containing a date format string\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" accepts an object and an optional second argument containing a Date or Number format string\");\n     }\n \n     ",
      "parent_sha": "342f5c3fe249681f243bcbe7b5e667ed8830b94c"
    }
  },
  {
    "oid": "41e8c0beee9256e061f4d9cbfed6be1d18cc6c9b",
    "message": "Update range function to return Integer arrays",
    "date": "2018-02-16T15:13:37Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/41e8c0beee9256e061f4d9cbfed6be1d18cc6c9b",
    "details": {
      "sha": "c26d45e5a01f0cd77f4b04357390d701ba5c3f7e",
      "filename": "main/src/com/google/refine/expr/functions/strings/Range.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/41e8c0beee9256e061f4d9cbfed6be1d18cc6c9b/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FRange.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/41e8c0beee9256e061f4d9cbfed6be1d18cc6c9b/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FRange.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FRange.java?ref=41e8c0beee9256e061f4d9cbfed6be1d18cc6c9b",
      "patch": "@@ -30,7 +30,7 @@ public class Range implements Function {\n     private static final int DEFAULT_START = 0;\n     private static final int DEFAULT_STEP = 1;\n \n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    private static final Integer[] EMPTY_ARRAY = new Integer[0];\n \n     @Override\n     public Object call(Properties bindings, Object[] args) {\n@@ -280,15 +280,15 @@ private Object createRangeWithThreeGivenArguments(Object[] args) {\n      */\n     private static Object createRange(int start, int stop, int step) {        \n         if ((start > stop && step > 0) || (start < stop && step < 0) || step == 0) {\n-            return EMPTY_STRING_ARRAY;\n+            return EMPTY_ARRAY;\n         }\n \n         int rangeSize = (int) (Math.ceil(((double) Math.abs(start - stop))/ Math.abs(step)));\n \n-        String[] generatedRange = new String[rangeSize];\n+        Integer[] generatedRange = new Integer[rangeSize];\n \n         for (int i = 0; i < rangeSize; i++) {\n-           generatedRange[i] = Integer.toString(start + step * i);\n+           generatedRange[i] = start + step * i;\n         }\n \n         return generatedRange;   ",
      "parent_sha": "01d8e458f45a06727ea954f658ed121f33dc9ec5"
    }
  },
  {
    "oid": "9aa168633f4ddc410bdd5c646ab4581f49e28257",
    "message": "Allow comma separated multi-value source in cross() function\n\nImplements support for comma separated multiple-value keys for joining\nanother project using the cross() function.\n\nSee https://github.com/OpenRefine/OpenRefine/issues/1204#issuecomment-326320954",
    "date": "2017-10-26T17:50:02Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/9aa168633f4ddc410bdd5c646ab4581f49e28257",
    "details": {
      "sha": "1d5e143821c6f306fcb0e708d6b967d8dc96633a",
      "filename": "main/src/com/google/refine/InterProjectModel.java",
      "status": "modified",
      "additions": 43,
      "deletions": 16,
      "changes": 59,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/9aa168633f4ddc410bdd5c646ab4581f49e28257/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FInterProjectModel.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/9aa168633f4ddc410bdd5c646ab4581f49e28257/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FInterProjectModel.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FInterProjectModel.java?ref=9aa168633f4ddc410bdd5c646ab4581f49e28257",
      "patch": "@@ -68,22 +68,38 @@ static public class ProjectJoin {\n             this.toProjectID = toProjectID;\n             this.toProjectColumnName = toProjectColumnName;\n         }\n-        \n-        public HasFieldsListImpl getRows(Object value) {\n-            if (ExpressionUtils.isNonBlankData(value) && valueToRowIndices.containsKey(value)) {\n-                Project toProject = ProjectManager.singleton.getProject(toProjectID);\n-                if (toProject != null) {\n-                    HasFieldsListImpl rows = new HasFieldsListImpl();\n-                    for (Integer r : valueToRowIndices.get(value)) {\n-                        Row row = toProject.rows.get(r);\n-                        rows.add(new WrappedRow(toProject, r, row));\n+\n+        public HasFieldsListImpl getRows(final Object rowKey) {\n+            Project toProject = ProjectManager.singleton.getProject(toProjectID);\n+            if (toProject == null) {\n+                return null;\n+            }\n+\n+            HasFieldsListImpl resultFieldList = null;\n+\n+            if (ExpressionUtils.isNonBlankData(rowKey)) {\n+                Object[] rowKeys;\n+                if (rowKey instanceof String) {\n+                    rowKeys = ((String) rowKey).split(\",\");\n+                } else {\n+                    rowKeys = new Object[]{rowKey};\n+                }\n+\n+                resultFieldList = new HasFieldsListImpl();\n+                for (Object k : rowKeys) {\n+                    if (valueToRowIndices.containsKey(k)) {\n+                        for (Integer rowIndex : valueToRowIndices.get(k)) {\n+                            Row row = toProject.rows.get(rowIndex);\n+                            resultFieldList.add(new WrappedRow(toProject, rowIndex, row));\n+                        }\n                     }\n-                    \n-                    return rows;\n                 }\n             }\n-            return null;\n+\n+            // Returning null instead of an empty list is expected\n+            return resultFieldList.isEmpty() ? null : resultFieldList;\n         }\n+\n     }\n     \n     protected Map<String, ProjectJoin> _joins = new HashMap<String, ProjectJoin>();\n@@ -158,11 +174,21 @@ protected void computeJoin(ProjectJoin join) {\n         if (fromColumn == null || toColumn == null) {\n             return;\n         }\n-        \n+\n         for (Row fromRow : fromProject.rows) {\n-            Object value = fromRow.getCellValue(fromColumn.getCellIndex());\n-            if (ExpressionUtils.isNonBlankData(value) && !join.valueToRowIndices.containsKey(value)) {\n-                join.valueToRowIndices.put(value, new ArrayList<Integer>());\n+            Object fromRowKey = fromRow.getCellValue(fromColumn.getCellIndex());\n+            if (ExpressionUtils.isNonBlankData(fromRowKey)) {\n+                Object[] fromRowKeys;\n+                if (fromRowKey instanceof String) {\n+                    fromRowKeys = ((String) fromRowKey).split(\",\");\n+                } else {\n+                    fromRowKeys = new Object[]{fromRowKey};\n+                }\n+                for (Object k : fromRowKeys) {\n+                    if (!join.valueToRowIndices.containsKey(k)) {\n+                        join.valueToRowIndices.put(k, new ArrayList<Integer>());\n+                    }\n+                }\n             }\n         }\n         \n@@ -176,4 +202,5 @@ protected void computeJoin(ProjectJoin join) {\n             }\n         }\n     }\n+\n }",
      "parent_sha": "e5fdf48680a6f810c84706671344dc93d9a4fb75"
    }
  },
  {
    "oid": "080ec5332e4f69a83e0bce0524d222001932a80d",
    "message": "Issue 237 - Make sure project's character encoding is always set.  Lower minimum confidence threshold for guesser.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1931 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-11-26T22:23:31Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/080ec5332e4f69a83e0bce0524d222001932a80d",
    "details": {
      "sha": "1ea010a51a07d052fde679b3a318282246d5a10f",
      "filename": "main/src/com/google/refine/commands/project/CreateProjectCommand.java",
      "status": "modified",
      "additions": 26,
      "deletions": 17,
      "changes": 43,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/080ec5332e4f69a83e0bce0524d222001932a80d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/080ec5332e4f69a83e0bce0524d222001932a80d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java?ref=080ec5332e4f69a83e0bce0524d222001932a80d",
      "patch": "@@ -448,35 +448,44 @@ protected void internalInvokeImporter(\n \n             CharsetDetector detector = new CharsetDetector();\n             detector.setDeclaredEncoding(\"utf8\"); // most of the content on the web is encoded in UTF-8 so start with that\n+            options.setProperty(\"encoding_confidence\", \"0\"); // in case we don't find anything suitable\n \n-            Reader reader = null;\n+            InputStreamReader reader = null;\n             CharsetMatch[] charsetMatches = detector.setText(bytes).detectAll();\n-            for (CharsetMatch charsetMatch : charsetMatches) {\n-                try {\n-                    int confidence = charsetMatch.getConfidence();\n-                    if (confidence >= 50) {\n+            if (charsetMatches.length > 0) {\n+                CharsetMatch charsetMatch = charsetMatches[0]; // matches are ordered - first is best match\n+                int confidence = charsetMatch.getConfidence();\n+                // Threshold was 50.  Do we ever want to not use our best guess even if it's low confidence? - tfmorris\n+                if (confidence >= 20) {\n+                    try {\n                         reader = new InputStreamReader(inputStream, charsetMatch.getName());\n-    \n-                        options.setProperty(\"encoding\", charsetMatch.getName());\n-                        options.setProperty(\"encoding_confidence\", Integer.toString(confidence));\n-    \n-                        logger.info(\"Best encoding guess: {} [confidence: {}]\", charsetMatch.getName(), charsetMatch.getConfidence());\n+                    } catch (UnsupportedEncodingException e) {\n+                        // ignored - we'll fall back to a different reader later\n                     }\n-                    \n-                    break;\n-                } catch (UnsupportedEncodingException e) {\n-                    // silent\n+                    // Encoding will be set later at common exit point\n+                    options.setProperty(\"encoding_confidence\", Integer.toString(confidence));    \n+                    logger.info(\"Best encoding guess: {} [confidence: {}]\", charsetMatch.getName(), charsetMatch.getConfidence());\n+                } else {\n+                    logger.debug(\"Poor encoding guess: {} [confidence: {}]\", charsetMatch.getName(), charsetMatch.getConfidence());\n                 }\n             }\n \n             if (reader == null) { // when all else fails\n-                reader = encoding != null ?\n-                        new InputStreamReader(inputStream, encoding) :\n-                        new InputStreamReader(inputStream);\n+                if (encoding != null) {\n+                    reader = new InputStreamReader(inputStream, encoding);\n+                } else {\n+                    reader = new InputStreamReader(inputStream);\n+                }\n             }\n+            // Get the actual encoding which will be used and save it for project metadata\n+            options.setProperty(\"encoding\", reader.getEncoding());\n \n             ((ReaderImporter) importer).read(reader, project, metadata, options);\n         } else {\n+            // TODO: How do we set character encoding here?\n+            // Things won't work right if it's not set, so pick some arbitrary values\n+            options.setProperty(\"encoding\", encoding);\n+            options.setProperty(\"encoding_confidence\", \"0\");\n             ((StreamImporter) importer).read(rawInputStream, project, metadata, options);\n         }\n     }",
      "parent_sha": "d5a742944e3cbaa471051e50bc918698461f4996"
    }
  },
  {
    "oid": "db658024d6aa20e8585aae99673a78e0873710ae",
    "message": "Change behaviour of converting OffsetDateTime to string in StringUtils",
    "date": "2018-06-22T23:18:00Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/db658024d6aa20e8585aae99673a78e0873710ae",
    "details": {
      "sha": "96b4255bdf22f960b9f463c1d31bae99c5d1a0ba",
      "filename": "main/src/com/google/refine/util/StringUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/db658024d6aa20e8585aae99673a78e0873710ae/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FStringUtils.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/db658024d6aa20e8585aae99673a78e0873710ae/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FStringUtils.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Futil%2FStringUtils.java?ref=db658024d6aa20e8585aae99673a78e0873710ae",
      "patch": "@@ -4,8 +4,6 @@\n import java.time.format.DateTimeFormatter;\n \n public class StringUtils {\n-    private static String DEFAULT_PATTERN = \"dd-MMM-yyyy\";\n-    \n     /**\n      * String formatting method that knows how to format dates (using the default locale's date formatter)\n      * @param o object to be converted to a string\n@@ -15,12 +13,11 @@ public static String toString(Object o) {\n         // to replace the DateFormat with java.time.format.DateTimeFormatter \n         if (o instanceof OffsetDateTime) {\n             OffsetDateTime odt = (OffsetDateTime)o;\n-            return odt.format(DateTimeFormatter.ofPattern(DEFAULT_PATTERN));\n+            return ParsingUtilities.dateToString((OffsetDateTime) odt);\n         } else if (o == null) {\n             return \"\";\n         } else {\n             return o.toString();\n         }\n     }\n }\n-",
      "parent_sha": "a159e76a628cdbb29e4249f656aa7a0a8136c4e6"
    }
  },
  {
    "oid": "31c70be20a1910e3e14237585ca10dda8be87d22",
    "message": "Fixed importing test",
    "date": "2018-09-13T13:12:52Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/31c70be20a1910e3e14237585ca10dda8be87d22",
    "details": {
      "sha": "21d29db684b22465bccab6996f91bd03dc40ba9b",
      "filename": "main/tests/server/src/com/google/refine/tests/importers/TsvCsvImporterTests.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/31c70be20a1910e3e14237585ca10dda8be87d22/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/31c70be20a1910e3e14237585ca10dda8be87d22/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java?ref=31c70be20a1910e3e14237585ca10dda8be87d22",
      "patch": "@@ -38,6 +38,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n import java.io.StringReader;\n \n+import org.json.JSONArray;\n import org.json.JSONException;\n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n@@ -521,7 +522,7 @@ public void readCustomColumnNames(String sep){\n         String input = \"data1\" + inputSeparator + \"data2\" + inputSeparator + \"data3\\n\";\n         \n         try {\n-            prepareOptions(sep, -1, 0, 0, 0, false, false,\"\\\"\",\"col1,col2,col3\");\n+            prepareOptions(sep, -1, 0, 0, 1, false, false,\"\\\"\",\"[col1,col2,col3]\");\n             parseOneFile(SUT, new StringReader(input));\n         } catch (Exception e) {\n             Assert.fail(\"Exception during file parse\",e);\n@@ -600,7 +601,8 @@ protected void prepareOptions(\n     protected void prepareOptions(\n         String sep, int limit, int skip, int ignoreLines,\n         int headerLines, boolean guessValueType, boolean ignoreQuotes, String quoteCharacter) {\n-        prepareOptions(sep, limit, skip, ignoreLines, headerLines, guessValueType, ignoreQuotes, \"\\\"\",\"\");\n+        \n+        prepareOptions(sep, limit, skip, ignoreLines, headerLines, guessValueType, ignoreQuotes, quoteCharacter,\"[]\");      \n     }\n     \n     protected void prepareOptions(\n@@ -616,7 +618,7 @@ protected void prepareOptions(\n             whenGetBooleanOption(\"guessCellValueTypes\", options, guessValueType);\n             whenGetBooleanOption(\"processQuotes\", options, !ignoreQuotes);\n             whenGetBooleanOption(\"storeBlankCellsAsNulls\", options, true);\n-            whenGetStringOption(\"columnNames\", options, columnNames);\n+            whenGetArrayOption(\"columnNames\", options, new JSONArray(columnNames));\n         }\n \n     private void verifyOptions() {\n@@ -629,7 +631,7 @@ private void verifyOptions() {\n             verify(options, times(1)).getBoolean(\"guessCellValueTypes\");\n             verify(options, times(1)).getBoolean(\"processQuotes\");\n             verify(options, times(1)).getBoolean(\"storeBlankCellsAsNulls\");\n-            verify(options, times(1)).getBoolean(\"columnNames\");\n+            verify(options, times(1)).getJSONArray(\"columnNames\");\n         } catch (JSONException e) {\n             Assert.fail(\"JSON exception\",e);\n         }",
      "parent_sha": "f288bc653e420e2d7f4b3cd443a65dc6dcce439e"
    }
  },
  {
    "oid": "e72d590a31133a364739a95d47889170916b648c",
    "message": "Issue 334 - tighten up URL pattern matching for Google Spreadsheets & Fusion Tables\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2006 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-02-14T22:23:48Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/e72d590a31133a364739a95d47889170916b648c",
    "details": {
      "sha": "3dcf33a7dec0d31b9219fa5a63512a4df7537fa5",
      "filename": "extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/e72d590a31133a364739a95d47889170916b648c/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/e72d590a31133a364739a95d47889170916b648c/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java?ref=e72d590a31133a364739a95d47889170916b648c",
      "patch": "@@ -415,14 +415,23 @@ public boolean canImportData(URL url) {\n \n     private boolean isSpreadsheetURL(URL url) {\n         String host = url.getHost();\n+        String query = url.getQuery();\n+        if (query == null) {\n+            query = \"\";\n+        }\n         // http://spreadsheets.google.com/ccc?key=tI36b9Fxk1lFBS83iR_3XQA&hl=en\n-        return host.endsWith(\".google.com\") && host.contains(\"spreadsheet\");\n+        return host.endsWith(\".google.com\") && host.contains(\"spreadsheet\") && query.contains(\"key=\");\n     }\n     \n     private boolean isFusionTableURL(URL url) {\n         // http://www.google.com/fusiontables/DataSource?dsrcid=1219\n+        String query = url.getQuery();\n+        if (query == null) {\n+            query = \"\";\n+        }\n         return url.getHost().endsWith(\".google.com\") \n-                && url.getPath().startsWith(\"/fusiontables/\");\n+                && url.getPath().startsWith(\"/fusiontables/DataSource\")\n+                && query.contains(\"dsrcid=\");\n     }\n     \n     // Modified version of FeedURLFactor.getSpreadsheetKeyFromUrl()",
      "parent_sha": "9384d22d85f2759db1093a4c522b57e42d431c6d"
    }
  },
  {
    "oid": "b8ce339137ae5a2ed0e483b0c59a9f0d21c0b328",
    "message": "tests: Remove dependency to Jena in FileProjectManagerTests (#6557)",
    "date": "2024-04-25T05:09:34Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/b8ce339137ae5a2ed0e483b0c59a9f0d21c0b328",
    "details": {
      "sha": "a3a99aa259822511b4032230e1f6ab1c4f24d2d7",
      "filename": "main/tests/server/src/com/google/refine/io/FileProjectManagerTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/b8ce339137ae5a2ed0e483b0c59a9f0d21c0b328/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fio%2FFileProjectManagerTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/b8ce339137ae5a2ed0e483b0c59a9f0d21c0b328/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fio%2FFileProjectManagerTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fio%2FFileProjectManagerTests.java?ref=b8ce339137ae5a2ed0e483b0c59a9f0d21c0b328",
      "patch": "@@ -41,15 +41,15 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n-import org.apache.jena.atlas.json.JSON;\n-import org.apache.jena.atlas.json.JsonObject;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import com.google.refine.ProjectMetadata;\n import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n+import com.google.refine.util.ParsingUtilities;\n import com.google.refine.util.TestUtils;\n \n public class FileProjectManagerTests {\n@@ -121,8 +121,8 @@ public void deleteProjectAndSaveWorkspace() throws IOException {\n         manager.saveWorkspace();\n \n         InputStream inputStream = new FileInputStream(workspaceFile);\n-        JsonObject json = JSON.parse(inputStream);\n-        assertTrue(json.get(\"projectIDs\").getAsArray().isEmpty(), \"deleted project still in workspace.json\");\n+        JsonNode json = ParsingUtilities.mapper.readTree(inputStream);\n+        assertTrue(json.get(\"projectIDs\").isEmpty(), \"deleted project still in workspace.json\");\n     }\n \n     /**",
      "parent_sha": "7fd42eed8af282747931e4e2256b474ceb0d3520"
    }
  },
  {
    "oid": "5a766a6103c0ce896dae25a51d9d68eb837f078a",
    "message": "Constraints refactor (#4514)",
    "date": "2022-02-15T17:25:28Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/5a766a6103c0ce896dae25a51d9d68eb837f078a",
    "details": {
      "sha": "16ca7aa551781b54e805a975798fc96819c68302",
      "filename": "extensions/wikidata/src/org/openrefine/wikidata/qa/SchemaPropertyExtractor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/5a766a6103c0ce896dae25a51d9d68eb837f078a/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fqa%2FSchemaPropertyExtractor.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/5a766a6103c0ce896dae25a51d9d68eb837f078a/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fqa%2FSchemaPropertyExtractor.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fqa%2FSchemaPropertyExtractor.java?ref=5a766a6103c0ce896dae25a51d9d68eb837f078a",
      "patch": "@@ -20,9 +20,9 @@ public class SchemaPropertyExtractor {\n \n     public Set<PropertyIdValue> getAllProperties(WikibaseSchema schema) {\n         Set<PropertyIdValue> properties = new HashSet<>();\n-        List<WbEntityDocumentExpr> itemDocumentExprs = schema.getEntityDocumentExpressions();\n-        for (WbEntityDocumentExpr itemDocumentExpr : itemDocumentExprs) {\n-            List<WbStatementGroupExpr> statementGroups = itemDocumentExpr.getStatementGroups();\n+        List<WbEntityDocumentExpr> entityDocumentExprs = schema.getEntityDocumentExpressions();\n+        for (WbEntityDocumentExpr entityDocumentExpr : entityDocumentExprs) {\n+            List<WbStatementGroupExpr> statementGroups = entityDocumentExpr.getStatementGroups();\n             for(WbStatementGroupExpr statementGroup : statementGroups) {\n                 WbExpression<? extends PropertyIdValue> statementGroupProperty = statementGroup.getProperty();\n                 if (statementGroupProperty instanceof WbPropConstant) {",
      "parent_sha": "bc67ed52912d713bd7a6db9926c7a4b186d4f65d"
    }
  },
  {
    "oid": "522641e84f640bde200b8287c19756061b57241d",
    "message": "Update SetProjectTagsCommand.java",
    "date": "2019-10-25T14:03:41Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/522641e84f640bde200b8287c19756061b57241d",
    "details": {
      "sha": "6afba879f1b747713bcd8dccad4aee031c1e8dff",
      "filename": "main/src/com/google/refine/commands/project/SetProjectTagsCommand.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/522641e84f640bde200b8287c19756061b57241d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FSetProjectTagsCommand.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/522641e84f640bde200b8287c19756061b57241d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FSetProjectTagsCommand.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FSetProjectTagsCommand.java?ref=522641e84f640bde200b8287c19756061b57241d",
      "patch": "@@ -81,7 +81,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n \t    tag = tag.trim();\n \t\n \t    if (!tag.isEmpty()) {\n-\t      if (allProjectTags!= null) {\n+\t      if (allProjectTags != null) {\n \t        if (allProjectTags.containsKey(tag)) {\n \t          allProjectTags.put(tag, allProjectTags.get(tag) + 1);\n \t        } else {\n@@ -98,4 +98,4 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n \t\n \t  respond(response, \"{ \\\"code\\\" : \\\"ok\\\" }\");\n   }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "790fc2ffaa11c6615bb2b619975eede02a7d144f"
    }
  },
  {
    "oid": "680580a928210f30c002cca9718c0527025af1e7",
    "message": "database: Re-enable test that fails in the CI (#6936)\n\n* Revert \"database: Temporarily disable test which fails in CI but not locally\"\r\n\r\nThis reverts commit bf47ddf070ee7b14f810ab60ba520df3eb1cc9b9.\r\n\r\n* Print JSON response to find out what is going on\r\n\r\n* Revert \"Print JSON response to find out what is going on\"\r\n\r\nThis reverts commit c8913bfcd7df28eea0be9fb5eb22625ab241a2c9.",
    "date": "2024-12-16T10:48:30Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/680580a928210f30c002cca9718c0527025af1e7",
    "details": {
      "sha": "d3e365bd9e61d2e2240ff2bf378490cfe2a3bc0a",
      "filename": "extensions/database/tests/src/com/google/refine/extension/database/DatabaseImportControllerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/680580a928210f30c002cca9718c0527025af1e7/extensions%2Fdatabase%2Ftests%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fdatabase%2FDatabaseImportControllerTest.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/680580a928210f30c002cca9718c0527025af1e7/extensions%2Fdatabase%2Ftests%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fdatabase%2FDatabaseImportControllerTest.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fdatabase%2Ftests%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fdatabase%2FDatabaseImportControllerTest.java?ref=680580a928210f30c002cca9718c0527025af1e7",
      "patch": "@@ -161,8 +161,7 @@ public void testDoPostInitializeParser() throws ServletException, IOException {\n         Assert.assertEquals(status, \"ok\");\n     }\n \n-    // 2024-10-24 disabled for now as it fails in the CI (but not locally)\n-    @Test(enabled = false)\n+    @Test\n     public void testDoPostParsePreview() throws IOException, ServletException {\n \n         StringWriter sw = new StringWriter();",
      "parent_sha": "811368737b1c78061f97bfb05bd56c0a3062ec11"
    }
  },
  {
    "oid": "af2015753218af77d331fa5398711d308f09b95a",
    "message": "Fix indentation so indent levels match logical block levels.  No code changes.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1940 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-11-28T17:46:57Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/af2015753218af77d331fa5398711d308f09b95a",
    "details": {
      "sha": "0c149711b6c7b7788ef370ef443c81661e511b20",
      "filename": "main/src/com/google/refine/importers/TreeImportUtilities.java",
      "status": "modified",
      "additions": 89,
      "deletions": 93,
      "changes": 182,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/af2015753218af77d331fa5398711d308f09b95a/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTreeImportUtilities.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/af2015753218af77d331fa5398711d308f09b95a/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTreeImportUtilities.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FTreeImportUtilities.java?ref=af2015753218af77d331fa5398711d308f09b95a",
      "patch": "@@ -61,11 +61,7 @@ static protected class RecordElementCandidate {\n         int count;\r\n     }\r\n \r\n-    /**\r\n-     *\r\n-     *\r\n-     *\r\n-     */\r\n+\r\n     static protected abstract class ImportVertical {\r\n         public String name = \"\";\r\n         public int nonBlankCount;\r\n@@ -134,142 +130,142 @@ public int compare(RecordElementCandidate o1, RecordElementCandidate o2) {\n     static public void createColumnsFromImport(\r\n             Project project,\r\n             ImportColumnGroup columnGroup\r\n-        ) {\r\n-            int startColumnIndex = project.columnModel.columns.size();\r\n-\r\n-            List<ImportColumn> columns = new ArrayList<ImportColumn>(columnGroup.columns.values());\r\n-            Collections.sort(columns, new Comparator<ImportColumn>() {\r\n-                public int compare(ImportColumn o1, ImportColumn o2) {\r\n-                    if (o1.blankOnFirstRow != o2.blankOnFirstRow) {\r\n-                        return o1.blankOnFirstRow ? 1 : -1;\r\n-                    }\r\n-\r\n-                    int c = o2.nonBlankCount - o1.nonBlankCount;\r\n-                    return c != 0 ? c : (o1.name.length() - o2.name.length());\r\n+    ) {\r\n+        int startColumnIndex = project.columnModel.columns.size();\r\n+\r\n+        List<ImportColumn> columns = new ArrayList<ImportColumn>(columnGroup.columns.values());\r\n+        Collections.sort(columns, new Comparator<ImportColumn>() {\r\n+            public int compare(ImportColumn o1, ImportColumn o2) {\r\n+                if (o1.blankOnFirstRow != o2.blankOnFirstRow) {\r\n+                    return o1.blankOnFirstRow ? 1 : -1;\r\n                 }\r\n-            });\r\n-\r\n-            for (int i = 0; i < columns.size(); i++) {\r\n-                ImportColumn c = columns.get(i);\r\n \r\n-                Column column = new com.google.refine.model.Column(c.cellIndex, c.name);\r\n-                project.columnModel.columns.add(column);\r\n+                int c = o2.nonBlankCount - o1.nonBlankCount;\r\n+                return c != 0 ? c : (o1.name.length() - o2.name.length());\r\n             }\r\n+        });\r\n \r\n-            List<ImportColumnGroup> subgroups = new ArrayList<ImportColumnGroup>(columnGroup.subgroups.values());\r\n-            Collections.sort(subgroups, new Comparator<ImportColumnGroup>() {\r\n-                public int compare(ImportColumnGroup o1, ImportColumnGroup o2) {\r\n-                    int c = o2.nonBlankCount - o1.nonBlankCount;\r\n-                    return c != 0 ? c : (o1.name.length() - o2.name.length());\r\n-                }\r\n-            });\r\n+        for (int i = 0; i < columns.size(); i++) {\r\n+            ImportColumn c = columns.get(i);\r\n \r\n-            for (ImportColumnGroup g : subgroups) {\r\n-                createColumnsFromImport(project, g);\r\n-            }\r\n+            Column column = new com.google.refine.model.Column(c.cellIndex, c.name);\r\n+            project.columnModel.columns.add(column);\r\n+        }\r\n \r\n-            int endColumnIndex = project.columnModel.columns.size();\r\n-            int span = endColumnIndex - startColumnIndex;\r\n-            if (span > 1 && span < project.columnModel.columns.size()) {\r\n-                project.columnModel.addColumnGroup(startColumnIndex, span, startColumnIndex);\r\n+        List<ImportColumnGroup> subgroups = new ArrayList<ImportColumnGroup>(columnGroup.subgroups.values());\r\n+        Collections.sort(subgroups, new Comparator<ImportColumnGroup>() {\r\n+            public int compare(ImportColumnGroup o1, ImportColumnGroup o2) {\r\n+                int c = o2.nonBlankCount - o1.nonBlankCount;\r\n+                return c != 0 ? c : (o1.name.length() - o2.name.length());\r\n             }\r\n+        });\r\n+\r\n+        for (ImportColumnGroup g : subgroups) {\r\n+            createColumnsFromImport(project, g);\r\n         }\r\n \r\n+        int endColumnIndex = project.columnModel.columns.size();\r\n+        int span = endColumnIndex - startColumnIndex;\r\n+        if (span > 1 && span < project.columnModel.columns.size()) {\r\n+            project.columnModel.addColumnGroup(startColumnIndex, span, startColumnIndex);\r\n+        }\r\n+    }\r\n+\r\n     static protected void addCell(\r\n             Project project,\r\n             ImportColumnGroup columnGroup,\r\n             ImportRecord record,\r\n             String columnLocalName,\r\n             String text\r\n-        ) {\r\n-            if (text == null || ((String) text).isEmpty()) {\r\n-                return;\r\n-            }\r\n+    ) {\r\n+        if (text == null || ((String) text).isEmpty()) {\r\n+            return;\r\n+        }\r\n \r\n-            Serializable value = ImporterUtilities.parseCellValue(text);\r\n+        Serializable value = ImporterUtilities.parseCellValue(text);\r\n \r\n-            ImportColumn column = getColumn(project, columnGroup, columnLocalName);\r\n-            int cellIndex = column.cellIndex;\r\n+        ImportColumn column = getColumn(project, columnGroup, columnLocalName);\r\n+        int cellIndex = column.cellIndex;\r\n \r\n-            int rowIndex = Math.max(columnGroup.nextRowIndex, column.nextRowIndex);\r\n-            while (rowIndex >= record.rows.size()) {\r\n-                record.rows.add(new ArrayList<Cell>());\r\n-            }\r\n+        int rowIndex = Math.max(columnGroup.nextRowIndex, column.nextRowIndex);\r\n+        while (rowIndex >= record.rows.size()) {\r\n+            record.rows.add(new ArrayList<Cell>());\r\n+        }\r\n \r\n-            List<Cell> row = record.rows.get(rowIndex);\r\n-            while (cellIndex >= row.size()) {\r\n-                row.add(null);\r\n-            }\r\n+        List<Cell> row = record.rows.get(rowIndex);\r\n+        while (cellIndex >= row.size()) {\r\n+            row.add(null);\r\n+        }\r\n \r\n-            row.set(cellIndex, new Cell(value, null));\r\n+        row.set(cellIndex, new Cell(value, null));\r\n \r\n-            column.nextRowIndex = rowIndex + 1;\r\n-            column.nonBlankCount++;\r\n-        }\r\n+        column.nextRowIndex = rowIndex + 1;\r\n+        column.nonBlankCount++;\r\n+    }\r\n \r\n \r\n     static protected ImportColumn getColumn(\r\n             Project project,\r\n             ImportColumnGroup columnGroup,\r\n             String localName\r\n-        ) {\r\n-            if (columnGroup.columns.containsKey(localName)) {\r\n-                return columnGroup.columns.get(localName);\r\n-            }\r\n+    ) {\r\n+        if (columnGroup.columns.containsKey(localName)) {\r\n+            return columnGroup.columns.get(localName);\r\n+        }\r\n \r\n-            ImportColumn column = createColumn(project, columnGroup, localName);\r\n-            columnGroup.columns.put(localName, column);\r\n+        ImportColumn column = createColumn(project, columnGroup, localName);\r\n+        columnGroup.columns.put(localName, column);\r\n \r\n-            return column;\r\n-        }\r\n+        return column;\r\n+    }\r\n \r\n-        static protected ImportColumn createColumn(\r\n+    static protected ImportColumn createColumn(\r\n             Project project,\r\n             ImportColumnGroup columnGroup,\r\n             String localName\r\n-        ) {\r\n-            ImportColumn newColumn = new ImportColumn();\r\n+    ) {\r\n+        ImportColumn newColumn = new ImportColumn();\r\n \r\n-            newColumn.name =\r\n-                columnGroup.name.length() == 0 ?\r\n+        newColumn.name = columnGroup.name.length() == 0 ?\r\n                 (localName == null ? \"Text\" : localName) :\r\n-                (localName == null ? columnGroup.name : (columnGroup.name + \" - \" + localName));\r\n+                    (localName == null ? columnGroup.name : (columnGroup.name + \" - \" + localName));\r\n \r\n-            newColumn.cellIndex = project.columnModel.allocateNewCellIndex();\r\n-            newColumn.nextRowIndex = columnGroup.nextRowIndex;\r\n+        newColumn.cellIndex = project.columnModel.allocateNewCellIndex();\r\n+        newColumn.nextRowIndex = columnGroup.nextRowIndex;\r\n \r\n-            return newColumn;\r\n-        }\r\n+        return newColumn;\r\n+    }\r\n \r\n-        static protected ImportColumnGroup getColumnGroup(\r\n+    static protected ImportColumnGroup getColumnGroup(\r\n             Project project,\r\n             ImportColumnGroup columnGroup,\r\n             String localName\r\n-        ) {\r\n-            if (columnGroup.subgroups.containsKey(localName)) {\r\n-                return columnGroup.subgroups.get(localName);\r\n-            }\r\n+    ) {\r\n+        if (columnGroup.subgroups.containsKey(localName)) {\r\n+            return columnGroup.subgroups.get(localName);\r\n+        }\r\n \r\n-            ImportColumnGroup subgroup = createColumnGroup(project, columnGroup, localName);\r\n-            columnGroup.subgroups.put(localName, subgroup);\r\n+        ImportColumnGroup subgroup = createColumnGroup(project, columnGroup, localName);\r\n+        columnGroup.subgroups.put(localName, subgroup);\r\n \r\n-            return subgroup;\r\n-        }\r\n+        return subgroup;\r\n+    }\r\n \r\n-        static protected ImportColumnGroup createColumnGroup(\r\n+    static protected ImportColumnGroup createColumnGroup(\r\n             Project project,\r\n             ImportColumnGroup columnGroup,\r\n             String localName\r\n-        ) {\r\n-            ImportColumnGroup newGroup = new ImportColumnGroup();\r\n+    ) {\r\n+        ImportColumnGroup newGroup = new ImportColumnGroup();\r\n \r\n-            newGroup.name =\r\n-                columnGroup.name.length() == 0 ?\r\n-                (localName == null ? \"Text\" : localName) :\r\n-                (localName == null ? columnGroup.name : (columnGroup.name + \" - \" + localName));\r\n+        newGroup.name =\r\n+            columnGroup.name.length() == 0 ?\r\n+                    (localName == null ? \"Text\" : localName) :\r\n+                        (localName == null ? columnGroup.name : (columnGroup.name + \" - \" + localName));\r\n \r\n-            newGroup.nextRowIndex = columnGroup.nextRowIndex;\r\n+        newGroup.nextRowIndex = columnGroup.nextRowIndex;\r\n \r\n-            return newGroup;\r\n-        }\r\n+        return newGroup;\r\n+    }\r\n+        \r\n }\r",
      "parent_sha": "748b5699b9413a788f675676c19d9aeaca3483d8"
    }
  },
  {
    "oid": "b409ef5670e961e793694c664f1d85943c776c47",
    "message": "Issue 491 - fix off-by-one error in column counts\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2405 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-12-09T23:50:40Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/b409ef5670e961e793694c664f1d85943c776c47",
    "details": {
      "sha": "9d1bf9c77e75ace24a8d3259eac5231fcad51e42",
      "filename": "main/src/com/google/refine/importers/ExcelImporter.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/b409ef5670e961e793694c664f1d85943c776c47/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/b409ef5670e961e793694c664f1d85943c776c47/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporter.java?ref=b409ef5670e961e793694c664f1d85943c776c47",
      "patch": "@@ -174,7 +174,7 @@ public List<Object> getNextRowOfCells() throws IOException {\n                     org.apache.poi.ss.usermodel.Row row = sheet.getRow(nextRow++);\n                     if (row != null) {\n                         short lastCell = row.getLastCellNum();\n-                        for (short cellIndex = 0; cellIndex <= lastCell; cellIndex++) {\n+                        for (short cellIndex = 0; cellIndex < lastCell; cellIndex++) {\n                             Cell cell = null;\n                             \n                             org.apache.poi.ss.usermodel.Cell sourceCell = row.getCell(cellIndex);\n@@ -219,6 +219,13 @@ static protected Serializable extractCell(org.apache.poi.ss.usermodel.Cell cell)\n             \n             if (HSSFDateUtil.isCellDateFormatted(cell)) {\n                 value = HSSFDateUtil.getJavaDate(d);\n+                // TODO: If we had a time datatype, we could use something like the following\n+                // to distinguish times from dates (although Excel doesn't really make the distinction)\n+                // Another alternative would be to look for values < 0.60\n+//                String format = cell.getCellStyle().getDataFormatString();\n+//                if (!format.contains(\"d\") && !format.contains(\"m\") && !format.contains(\"y\") ) {\n+//                    // It's just a time\n+//                }\n             } else {\n                 value = d;\n             }",
      "parent_sha": "b3bcb3361b64862898ea5a685a1ba0d32978b983"
    }
  },
  {
    "oid": "6ccd8ea9eeb420301083ece44cad6166fa8db377",
    "message": "Deserialization test for Denormalize operation",
    "date": "2018-09-01T10:40:23Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/6ccd8ea9eeb420301083ece44cad6166fa8db377",
    "details": {
      "sha": "d5a344fe26a15f0fdafcd8a2fa15da4c05d9a357",
      "filename": "main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/6ccd8ea9eeb420301083ece44cad6166fa8db377/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Foperations%2Frow%2FDenormalizeOperationTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/6ccd8ea9eeb420301083ece44cad6166fa8db377/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Foperations%2Frow%2FDenormalizeOperationTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Foperations%2Frow%2FDenormalizeOperationTests.java?ref=6ccd8ea9eeb420301083ece44cad6166fa8db377",
      "patch": "@@ -2,12 +2,13 @@\n \n import static org.mockito.Mockito.mock;\n \n+import org.json.JSONException;\n+import org.json.JSONObject;\n import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n-import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Project;\n import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.operations.cell.MultiValuedCellSplitOperation;\n import com.google.refine.operations.row.DenormalizeOperation;\n import com.google.refine.tests.RefineTest;\n import com.google.refine.tests.util.TestUtils;\n@@ -20,10 +21,11 @@ public void registerOperation() {\n     }\n     \n     @Test\n-    public void serializeDenormalizeOperation() {\n-        AbstractOperation op = new DenormalizeOperation();\n-        TestUtils.isSerializedTo(op, \"{\"\n+    public void serializeDenormalizeOperation() throws JSONException, Exception {\n+        Project project = mock(Project.class);\n+        String json = \"{\"\n                 + \"\\\"op\\\":\\\"core/denormalize\\\",\"\n-                + \"\\\"description\\\":\\\"Denormalize\\\"}\");\n+                + \"\\\"description\\\":\\\"Denormalize\\\"}\";\n+        TestUtils.isSerializedTo(DenormalizeOperation.reconstruct(project, new JSONObject(json)), json);\n     }\n }",
      "parent_sha": "73171755f36d33eecfbbe7c6209d97a68d4d97f7"
    }
  },
  {
    "oid": "20bd98fb45b94a110c3517f44b47f1e8cd1d1e27",
    "message": "Remove deprecated reflective access to Sun date internals. Refs #5909 (#6492)\n\nWhen JVMs enforce the deprecation, it causes variability in the\r\ntest coverage.",
    "date": "2024-03-28T20:18:52Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/20bd98fb45b94a110c3517f44b47f1e8cd1d1e27",
    "details": {
      "sha": "c06f05eb73136b83957d9dbf5f752278fd04eb25",
      "filename": "main/src/com/google/refine/expr/util/CalendarParser.java",
      "status": "modified",
      "additions": 4,
      "deletions": 27,
      "changes": 31,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/20bd98fb45b94a110c3517f44b47f1e8cd1d1e27/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Futil%2FCalendarParser.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/20bd98fb45b94a110c3517f44b47f1e8cd1d1e27/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Futil%2FCalendarParser.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Futil%2FCalendarParser.java?ref=20bd98fb45b94a110c3517f44b47f1e8cd1d1e27",
      "patch": "@@ -33,8 +33,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.expr.util;\n \n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n import java.time.OffsetDateTime;\n import java.util.Calendar;\n import java.util.GregorianCalendar;\n@@ -759,30 +757,7 @@ private static final boolean isWeekdayName(String str) {\n      * @return <code>null</code> if time zone list cannot be loaded.\n      */\n     private static final String[] loadTimeZoneNames() {\n-        Class<?> zoneInfo;\n-        try {\n-            zoneInfo = Class.forName(\"sun.util.calendar.ZoneInfo\");\n-        } catch (ClassNotFoundException cnfe) {\n-            return null;\n-        }\n-\n-        Method method;\n-        try {\n-            method = zoneInfo.getDeclaredMethod(\"getAvailableIDs\", new Class[0]);\n-        } catch (NoSuchMethodException nsme) {\n-            return null;\n-        }\n-\n-        Object result;\n-        try {\n-            result = method.invoke((Object) null);\n-        } catch (IllegalAccessException iae) {\n-            return null;\n-        } catch (InvocationTargetException ite) {\n-            return null;\n-        }\n-\n-        String[] tmpList = (String[]) result;\n+        String[] tmpList = TimeZone.getAvailableIDs();\n \n         int numSaved = 0;\n         String[] finalList = null;\n@@ -865,6 +840,7 @@ public static final Calendar parse(String dateStr)\n         return parse(dateStr, YY_MM_DD);\n     }\n \n+    // TODO: Only used by test code - move to tests?\n     public static final OffsetDateTime parseAsOffsetDateTime(String dateStr) throws CalendarParserException {\n         return ParsingUtilities.calendarToOffsetDateTime(parse(dateStr));\n     }\n@@ -1052,6 +1028,7 @@ private static final void parseNonNumericToken(String dateStr,\n                 // maybe it's a time zone name\n                 for (String zoneName : zoneNames) {\n                     if (token.equalsIgnoreCase(zoneName)) {\n+                        // FIXME: Just try it as a timezone name without any prechecking\n                         TimeZone tz = TimeZone.getTimeZone(token);\n                         if (tz.getRawOffset() != 0 || lToken.equals(\"gmt\")) {\n                             state.setTimeZone(tz);\n@@ -1633,6 +1610,7 @@ private static final Calendar parseString(String dateStr, int order,\n             state.setYear(tmpYear + (CENTURY_OFFSET - 100));\n         }\n \n+        // FIXME: This was local time before OpenRefine 3.0 when it changed to UTC for no apparent reason\n         GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"Z\"));\n \n         state.setCalendar(cal, ignoreChanges);\n@@ -1644,7 +1622,6 @@ private static final Calendar parseString(String dateStr, int order,\n                     + state.getMillisecond() + \" => \" + toString(cal));\n         }\n \n-//        return cal.toInstant().atOffset(ZoneOffset.of(\"Z\"));\n         return cal;\n     }\n ",
      "parent_sha": "f116fffe73000c37d8a87cd2a798bcd2cbdbe3a1"
    }
  },
  {
    "oid": "36d2c4ac4469277083e07f884d05a5df19bf81b2",
    "message": "Added full text of BSD 2-clause",
    "date": "2013-02-02T04:44:35Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/36d2c4ac4469277083e07f884d05a5df19bf81b2",
    "details": {
      "sha": "fa664f00b04e714ed8e5a792a48d66a46833fee5",
      "filename": "main/src/com/google/refine/expr/functions/booleans/Xor.java",
      "status": "modified",
      "additions": 23,
      "deletions": 4,
      "changes": 27,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/36d2c4ac4469277083e07f884d05a5df19bf81b2/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fbooleans%2FXor.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/36d2c4ac4469277083e07f884d05a5df19bf81b2/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fbooleans%2FXor.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fbooleans%2FXor.java?ref=36d2c4ac4469277083e07f884d05a5df19bf81b2",
      "patch": "@@ -1,8 +1,27 @@\n /*\n-  Implementing a naive XOR operation\n-  Copyright 2013, Jesus M. Castagnetto\n-  License: BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)\n- */\n+Copyright (c) 2013, Jesus M. Castagnetto\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+- Redistributions of source code must retain the above copyright notice, this\n+  list of conditions and the following disclaimer.\n+- Redistributions in binary form must reproduce the above copyright notice,\n+  this list of conditions and the following disclaimer in the documentation\n+  and/or other materials provided with the distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+*/\n \n package com.google.refine.expr.functions.booleans;\n ",
      "parent_sha": "df450b20f7a4af847b74aee8110cf92df3e0bda9"
    }
  },
  {
    "oid": "224210625d600475ffda2b5d4d79cb391ad56c98",
    "message": "Remove automatic trim of split values",
    "date": "2017-10-24T07:28:37Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/224210625d600475ffda2b5d4d79cb391ad56c98",
    "details": {
      "sha": "9b614f60e581afa2015c6d1ce0be9bb2c4a69dfa",
      "filename": "main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/224210625d600475ffda2b5d4d79cb391ad56c98/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcell%2FMultiValuedCellSplitOperation.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/224210625d600475ffda2b5d4d79cb391ad56c98/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcell%2FMultiValuedCellSplitOperation.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcell%2FMultiValuedCellSplitOperation.java?ref=224210625d600475ffda2b5d4d79cb391ad56c98",
      "patch": "@@ -200,14 +200,14 @@ else if (_regex) {\n             // First value goes into the same row\n             {\n                 Row firstNewRow = oldRow.dup();\n-                firstNewRow.setCell(cellIndex, new Cell(values[0].trim(), null));\n+                firstNewRow.setCell(cellIndex, new Cell(values[0], null));\n                 \n                 newRows.add(firstNewRow);\n             }\n             \n             int r2 = r + 1;\n             for (int v = 1; v < values.length; v++) {\n-                Cell newCell = new Cell(values[v].trim(), null);\n+                Cell newCell = new Cell(values[v], null);\n                 \n                 if (r2 < project.rows.size()) {\n                     Row oldRow2 = project.rows.get(r2);",
      "parent_sha": "bb6b3d6c296af8aeb81ff1ddf33bd9392390b9ee"
    }
  },
  {
    "oid": "74f351f2656a2d5324d346e5a2e2b027bf23e645",
    "message": "Temporarily disable test as bug is not critical.",
    "date": "2019-07-03T08:22:11Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/74f351f2656a2d5324d346e5a2e2b027bf23e645",
    "details": {
      "sha": "2aef6295ce765995505ebbe21db27da549905a70",
      "filename": "extensions/wikidata/tests/src/org/openrefine/wikidata/updates/ItemUpdateTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/74f351f2656a2d5324d346e5a2e2b027bf23e645/extensions%2Fwikidata%2Ftests%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fupdates%2FItemUpdateTest.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/74f351f2656a2d5324d346e5a2e2b027bf23e645/extensions%2Fwikidata%2Ftests%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fupdates%2FItemUpdateTest.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fwikidata%2Ftests%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fupdates%2FItemUpdateTest.java?ref=74f351f2656a2d5324d346e5a2e2b027bf23e645",
      "patch": "@@ -114,7 +114,17 @@ public void testAddStatements() {\n         assertEquals(statementGroups, update.getAddedStatementGroups().stream().collect(Collectors.toSet()));\n     }\n     \n-    @Test\n+    /**\n+     * Test disabled because it fails due to\n+     * https://github.com/Wikidata/Wikidata-Toolkit/issues/417\n+     * (not fixed as of WDTK 0.10.0).\n+     * \n+     * This bug is not critical as the extraneous serialized data\n+     * is ignored by Wikibase.\n+     * \n+     * @todo reenable once a later version is released\n+     */\n+    @Test(enabled=false)\n     public void testSerializeStatements() throws IOException {\n     \tItemUpdate update = new ItemUpdateBuilder(existingSubject).addStatement(statement1).addStatement(statement2)\n                 .build();",
      "parent_sha": "b8905f5190f775462d0311a0cd249053544cee3c"
    }
  },
  {
    "oid": "cd062cf028d2158014316c4129880ad1d378aabf",
    "message": "Minor bug: recon candidate's \"id\" field should return id, not name.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@312 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-03-17T19:54:27Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/cd062cf028d2158014316c4129880ad1d378aabf",
    "details": {
      "sha": "e59eeff1dd02ffd7e517556ec3dd1a186476f6b0",
      "filename": "src/main/java/com/metaweb/gridworks/model/ReconCandidate.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/cd062cf028d2158014316c4129880ad1d378aabf/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2FReconCandidate.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/cd062cf028d2158014316c4129880ad1d378aabf/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2FReconCandidate.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2FReconCandidate.java?ref=cd062cf028d2158014316c4129880ad1d378aabf",
      "patch": "@@ -27,7 +27,7 @@ public ReconCandidate(String topicID, String topicGUID, String topicName, String\n     \r\n     public Object getField(String name, Properties bindings) {\r\n         if (\"id\".equals(name)) {\r\n-            return topicName;\r\n+            return topicID;\r\n         } else if (\"guid\".equals(name)) {\r\n             return topicGUID;\r\n         } else if (\"name\".equals(name)) {\r",
      "parent_sha": "b26160dc2b255fffb4c9858c5159738dfaa70a2b"
    }
  },
  {
    "oid": "70776e13592bbcae0adf0f5b15f58208f5aa0e1f",
    "message": "Fix race. Improve tests. Fixes #5497 (#5504)\n\nRemoves the race condition in the date test and\r\nadds tests for actual date value instead of just type.",
    "date": "2022-12-07T07:36:29Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/70776e13592bbcae0adf0f5b15f58208f5aa0e1f",
    "details": {
      "sha": "a8790f88510c1365e81772b62bc2c1190eb544ba",
      "filename": "main/tests/server/src/com/google/refine/importers/ExcelImporterTests.java",
      "status": "modified",
      "additions": 29,
      "deletions": 31,
      "changes": 60,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/70776e13592bbcae0adf0f5b15f58208f5aa0e1f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporterTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/70776e13592bbcae0adf0f5b15f58208f5aa0e1f/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporterTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FExcelImporterTests.java?ref=70776e13592bbcae0adf0f5b15f58208f5aa0e1f",
      "patch": "@@ -46,10 +46,10 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import java.io.OutputStream;\n import java.text.DecimalFormat;\n import java.text.NumberFormat;\n+import java.time.Duration;\n import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n import java.time.format.DateTimeFormatter;\n-import java.util.Calendar;\n-import java.util.Date;\n \n import org.apache.poi.hssf.usermodel.HSSFWorkbook;\n import org.apache.poi.ss.usermodel.*;\n@@ -81,14 +81,11 @@ public class ExcelImporterTests extends ImporterTest {\n     // special implementations. The string below matches the special phone number formatter which they've implemented\n     private static final String OTHER_FORMAT = \"###\\\\-####;\\\\(###\\\\)\\\\ ###\\\\-####\";\n \n-    // Record our date/time as close as possible to the creation of the spreadsheets.\n-    // There's still a race window, but it's small and will only affect test runs within\n-    // a fraction of a second of a minute boundary.\n-    // (we could truncate the least significant minute digit to mitigate this further)\n-    private static final String NOW = LocalDateTime.now().format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT));\n-    // private static final File xlsxFile = createSpreadsheet(true);\n-    private static final File xlsFile = createSpreadsheet(false);\n-    private static final File xlsxFile = createSpreadsheet(true);\n+    private static final LocalDateTime NOW = LocalDateTime.now();\n+    private static final String NOW_STRING = NOW.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT));\n+\n+    private static final File xlsFile = createSpreadsheet(false, NOW);\n+    private static final File xlsxFile = createSpreadsheet(true, NOW);\n \n     private static final File xlsFileWithMultiSheets = createSheetsWithDifferentColumns(false);\n     private static final File xlsxFileWithMultiSheets = createSheetsWithDifferentColumns(true);\n@@ -148,8 +145,8 @@ public void readXls() throws IOException {\n         Assert.assertFalse((Boolean) project.rows.get(1).getCellValue(1));\n         Assert.assertTrue((Boolean) project.rows.get(2).getCellValue(1));\n \n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(2)), \"Cell value is not a date\"); // Calendar\n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3)), \"Cell value is not a date\"); // Date\n+        // Skip col 2 where old Calendar test was\n+        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3)), \"Cell value is not a date\");\n \n         Assert.assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n         Assert.assertNull((String) project.rows.get(1).getCellValue(5));\n@@ -168,7 +165,7 @@ public void readXls() throws IOException {\n \n         assertEquals(project.rows.get(2).getCellValue(10), \"(617) 235-1322\");\n \n-        assertEquals(project.rows.get(2).getCellValue(11), NOW.substring(0, 10));\n+        assertEquals(project.rows.get(2).getCellValue(11), NOW_STRING.substring(0, 10));\n \n         assertEquals(project.rows.get(2).getCellValue(12), 1234.56);\n \n@@ -209,8 +206,9 @@ public void readXlsx() throws IOException {\n         Assert.assertFalse((Boolean) project.rows.get(1).getCellValue(1));\n         Assert.assertTrue((Boolean) project.rows.get(2).getCellValue(1));\n \n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(2))); // Calendar\n+        // Skip col 2 where old Calendar test was\n         assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3))); // Date\n+        assertTrue(Duration.between(NOW, (OffsetDateTime) project.rows.get(1).getCellValue(3)).toMillis() < 1);\n \n         Assert.assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n         Assert.assertNull(project.rows.get(1).getCellValue(5));\n@@ -229,7 +227,7 @@ public void readXlsx() throws IOException {\n \n         assertEquals(project.rows.get(2).getCellValue(10), \"(617) 235-1322\");\n \n-        assertEquals(project.rows.get(2).getCellValue(11), NOW.substring(0, 10));\n+        assertEquals(project.rows.get(2).getCellValue(11), NOW_STRING.substring(0, 10)); // date only\n \n         assertEquals(project.rows.get(2).getCellValue(12), 1234.56);\n \n@@ -271,8 +269,8 @@ public void readXlsxAsText() throws IOException {\n         assertEquals((String) project.rows.get(1).getCellValue(1), \"FALSE\");\n         assertEquals((String) project.rows.get(2).getCellValue(1), \"TRUE\");\n \n-        assertEquals((String) project.rows.get(1).getCellValue(2), NOW); // Calendar\n-        assertEquals((String) project.rows.get(1).getCellValue(3), NOW); // Date\n+        // Skip col 2 where old Calendar test was\n+        assertEquals((String) project.rows.get(1).getCellValue(3), NOW_STRING); // Date\n \n         assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n         assertEquals((String) project.rows.get(1).getCellValue(5), \"\");\n@@ -291,7 +289,7 @@ public void readXlsxAsText() throws IOException {\n \n         assertEquals(project.rows.get(ROWS - 1).getCellValue(10), \"(617) 235-1322\");\n \n-        assertEquals(project.rows.get(ROWS - 1).getCellValue(11), NOW.substring(0, 10));\n+        assertEquals(project.rows.get(ROWS - 1).getCellValue(11), NOW_STRING.substring(0, 10)); // date only\n \n         assertEquals(project.rows.get(ROWS - 1).getCellValue(12), \"$1,234.56\");\n \n@@ -379,8 +377,9 @@ public void readMultiSheetXls() throws IOException {\n         Assert.assertFalse((Boolean) project.rows.get(1).getCellValue(1));\n         Assert.assertTrue((Boolean) project.rows.get(2).getCellValue(1));\n \n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(2)), \"Cell value is not a date\"); // Calendar\n+        // Skip col 2 where old Calendar test was\n         assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3)), \"Cell value is not a date\"); // Date\n+        assertTrue(Duration.between(NOW, (OffsetDateTime) project.rows.get(1).getCellValue(3)).toMillis() < 1);\n \n         Assert.assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n         Assert.assertNull((String) project.rows.get(1).getCellValue(5));\n@@ -432,8 +431,9 @@ public void readMultiSheetXlsx() throws IOException {\n         Assert.assertFalse((Boolean) project.rows.get(1).getCellValue(1));\n         Assert.assertTrue((Boolean) project.rows.get(2).getCellValue(1));\n \n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(2)), \"Cell value is not a date\"); // Calendar\n+        // Skip col 2 where old Calendar test was\n         assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3)), \"Cell value is not a date\"); // Date\n+        assertTrue(Duration.between(NOW, (OffsetDateTime) project.rows.get(1).getCellValue(3)).toMillis() < 1);\n \n         Assert.assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n         Assert.assertNull((String) project.rows.get(1).getCellValue(5));\n@@ -446,7 +446,7 @@ public void readMultiSheetXlsx() throws IOException {\n         verify(options, times(SHEETS)).get(\"storeBlankCellsAsNulls\");\n     }\n \n-    private static File createSpreadsheet(boolean xml) {\n+    private static File createSpreadsheet(boolean xml, LocalDateTime date) {\n \n         final Workbook wb = xml ? new XSSFWorkbook() : new HSSFWorkbook();\n         DataFormat dataFormat = wb.createDataFormat();\n@@ -475,7 +475,7 @@ private static File createSpreadsheet(boolean xml) {\n         for (int s = 0; s < SHEETS; s++) {\n             Sheet sheet = wb.createSheet(\"Test Sheet \" + s);\n             for (int row = 0; row < ROWS; row++) {\n-                createDataRow(sheet, row, dateTimeStyle, dateStyle, intStyle, floatStyle, zeroStyle, otherStyle, currencyStyle, 0);\n+                createDataRow(sheet, row, date, dateTimeStyle, dateStyle, intStyle, floatStyle, zeroStyle, otherStyle, currencyStyle, 0);\n             }\n         }\n \n@@ -523,7 +523,7 @@ private static File createSheetsWithDifferentColumns(boolean xml) {\n         for (int s = 0; s < SHEETS; s++) {\n             Sheet sheet = wb.createSheet(\"Test Sheet \" + s);\n             for (int row = 0; row < ROWS; row++) {\n-                createDataRow(sheet, row, dateTimeStyle, dateStyle, intStyle, floatStyle, zeroStyle, otherStyle, currencyStyle, s);\n+                createDataRow(sheet, row, NOW, dateTimeStyle, dateStyle, intStyle, floatStyle, zeroStyle, otherStyle, currencyStyle, s);\n             }\n         }\n \n@@ -542,7 +542,8 @@ private static File createSheetsWithDifferentColumns(boolean xml) {\n         return file;\n     }\n \n-    private static void createDataRow(Sheet sheet, int row, CellStyle dateTimeStyle, CellStyle dateStyle, CellStyle intStyle,\n+    private static void createDataRow(Sheet sheet, int row, LocalDateTime date, CellStyle dateTimeStyle, CellStyle dateStyle,\n+            CellStyle intStyle,\n             CellStyle floatStyle, CellStyle zeroStyle, CellStyle otherStyle, CellStyle currencyStyle, int extra_columns) {\n         int col = 0;\n         Row r = sheet.createRow(row);\n@@ -554,14 +555,11 @@ private static void createDataRow(Sheet sheet, int row, CellStyle dateTimeStyle,\n         c = r.createCell(col++);\n         c.setCellValue(row % 2 == 0); // boolean\n \n-        c = r.createCell(col++);\n-        c.setCellValue(Calendar.getInstance()); // calendar\n-        c.setCellStyle(dateTimeStyle);\n+        col++; // Placeholder for old Calendar test, so we don't have to redo column numbers. Available for reuse\n \n         c = r.createCell(col++);\n-        Date now = new Date();\n-        c.setCellValue(now); // date\n-        c.setCellStyle(dateTimeStyle); // datetime\n+        c.setCellValue(date); // LocalDateTime\n+        c.setCellStyle(dateTimeStyle);\n \n         c = r.createCell(col++);\n         c.setCellValue(\" Row \" + row + \" Col \" + col); // string\n@@ -589,7 +587,7 @@ private static void createDataRow(Sheet sheet, int row, CellStyle dateTimeStyle,\n         c.setCellStyle(otherStyle); // phone number format should import as string\n \n         c = r.createCell(col++);\n-        c.setCellValue(now); // date\n+        c.setCellValue(date); // date\n         c.setCellStyle(dateStyle); // dates alone should import as strings\n \n         c = r.createCell(col++);",
      "parent_sha": "2ec45092c3990d632ef2fa29b1dfe746194e8ef4"
    }
  },
  {
    "oid": "4e761556522a54c6da5540f621c30c8902ba8e64",
    "message": "Use application/x-unknown when exporting TSV so that the browser just saves the result. This is good for large exports, which overload the browser if the browser tries to display them.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@353 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-03-24T17:51:27Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/4e761556522a54c6da5540f621c30c8902ba8e64",
    "details": {
      "sha": "5c6149cdff358872436d480a9395e4c01516e58e",
      "filename": "src/main/java/com/metaweb/gridworks/exporters/TsvExporter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/4e761556522a54c6da5540f621c30c8902ba8e64/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fexporters%2FTsvExporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/4e761556522a54c6da5540f621c30c8902ba8e64/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fexporters%2FTsvExporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fexporters%2FTsvExporter.java?ref=4e761556522a54c6da5540f621c30c8902ba8e64",
      "patch": "@@ -17,7 +17,7 @@\n \n public class TsvExporter implements Exporter {\n     public String getContentType() {\n-        return \"text/plain\";\n+        return \"application/x-unknown\";\n     }\n     \n     public boolean takeWriter() {",
      "parent_sha": "47cad64a3f9a66398cfa88012f085b8d3c4f5d6f"
    }
  },
  {
    "oid": "3742b6a092cb7a00136de595643d67aa519d9ce9",
    "message": "improve log descriptions for stale import job removals (#1705)\n\n* improve log descriptions for stale import job removals\r\n\r\n* Removed unnecessary log line and instead changed primary log line",
    "date": "2018-08-12T07:53:57Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/3742b6a092cb7a00136de595643d67aa519d9ce9",
    "details": {
      "sha": "ea0540e244f40984165bcf4fc7633d5bfe3ecbce",
      "filename": "main/src/com/google/refine/importing/ImportingManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/3742b6a092cb7a00136de595643d67aa519d9ce9/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/3742b6a092cb7a00136de595643d67aa519d9ce9/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java?ref=3742b6a092cb7a00136de595643d67aa519d9ce9",
      "patch": "@@ -312,7 +312,7 @@ static private void cleanUpStaleJobs() {\n             if (job != null && !job.updating && now - job.lastTouched > STALE_PERIOD) {\n                 job.dispose();\n                 jobs.remove(id);\n-                logger.info(\"Disposed \" + id);\n+                logger.info(\"Removed Stale Import Job ID \" + id);\n             }\n         }\n     }",
      "parent_sha": "4844e579e03ad7985db4b04962a5f108c97ba1f0"
    }
  },
  {
    "oid": "00a81c5fc4ba195ead0239eb4501721f9b80b9a5",
    "message": "make the kNN clustering report the right counts for the facet values (and order them in the clusters by counts)\n\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@286 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-03-12T19:10:22Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/00a81c5fc4ba195ead0239eb4501721f9b80b9a5",
    "details": {
      "sha": "3a0f0b7135242bc32964063effbb78813f52717c",
      "filename": "src/main/java/com/metaweb/gridworks/clustering/knn/kNNClusterer.java",
      "status": "modified",
      "additions": 30,
      "deletions": 5,
      "changes": 35,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/00a81c5fc4ba195ead0239eb4501721f9b80b9a5/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fclustering%2Fknn%2FkNNClusterer.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/00a81c5fc4ba195ead0239eb4501721f9b80b9a5/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fclustering%2Fknn%2FkNNClusterer.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fclustering%2Fknn%2FkNNClusterer.java?ref=00a81c5fc4ba195ead0239eb4501721f9b80b9a5",
      "patch": "@@ -11,6 +11,7 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.TreeSet;\n+import java.util.Map.Entry;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n@@ -44,8 +45,10 @@ public class kNNClusterer extends Clusterer {\n     \n     static protected Map<String, Distance> _distances = new HashMap<String, Distance>();\n \n-    ArrayList<Set<Serializable>> _clusters;\n-    \n+    List<Set<Serializable>> _clusters;\n+\n+    Map<Serializable, Integer> _counts = new HashMap<Serializable, Integer>();\n+\n     static {\n         _distances.put(\"levenshtein\", new LevenshteinDistance());\n         _distances.put(\"jaccard\", new JaccardDistance());\n@@ -82,6 +85,7 @@ public boolean visit(Project project, int rowIndex, Row row, boolean includeCont\n                 Object v = cell.value;\n                 String s = (v instanceof String) ? ((String) v) : v.toString();\n                 _treeBuilder.populate(s);\n+                count(s);\n             }\n             return false;\n         }\n@@ -120,6 +124,7 @@ public boolean visit(Project project, int rowIndex, Row row, boolean includeCont\n                 Object v = cell.value;\n                 String s = (v instanceof String) ? ((String) v) : v.toString().intern();\n                 _data.add(s);\n+                count(s);\n             }\n             return false;\n         }\n@@ -183,6 +188,12 @@ public int compare(Set<Serializable> o1, Set<Serializable> o2) {\n             return o2.size() - o1.size();\n         }\n     }\n+\n+    public class ValuesComparator implements Comparator<Entry<Serializable,Integer>> {\n+        public int compare(Entry<Serializable,Integer> o1, Entry<Serializable,Integer> o2) {\n+            return o2.getValue() - o1.getValue();\n+        }\n+    }\n     \n     public void initializeFromJSON(Project project, JSONObject o) throws Exception {\n         super.initializeFromJSON(project, o);\n@@ -204,16 +215,30 @@ public void write(JSONWriter writer, Properties options) throws JSONException {\n         writer.array();        \n         for (Set<Serializable> m : _clusters) {\n             if (m.size() > 1) {\n-                writer.array();        \n+                Map<Serializable,Integer> internal_counts = new HashMap<Serializable,Integer>();\n                 for (Serializable s : m) {\n+                    internal_counts.put(s,_counts.get(s));\n+                }\n+                List<Entry<Serializable,Integer>> values = new ArrayList<Entry<Serializable,Integer>>(internal_counts.entrySet());\n+                Collections.sort(values, new ValuesComparator());\n+                writer.array();        \n+                for (Entry<Serializable,Integer> e : values) {\n                     writer.object();\n-                    writer.key(\"v\"); writer.value(s);\n-                    writer.key(\"c\"); writer.value(1);\n+                    writer.key(\"v\"); writer.value(e.getKey());\n+                    writer.key(\"c\"); writer.value(e.getValue());\n                     writer.endObject();\n                 }\n                 writer.endArray();\n             }\n         }\n         writer.endArray();\n     }\n+    \n+    private void count(Serializable s) {\n+        if (_counts.containsKey(s)) {\n+            _counts.put(s, _counts.get(s) + 1);\n+        } else {\n+            _counts.put(s, 1);\n+        }\n+    }\n }",
      "parent_sha": "d72c07b715f17b215df9894410d52ffc595687cb"
    }
  },
  {
    "oid": "d908635c1f90ceebf49f1bbdfd0609342c673437",
    "message": "Jackson deserialization for ReconMarkNewTopicsOperation",
    "date": "2018-11-30T10:22:21Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/d908635c1f90ceebf49f1bbdfd0609342c673437",
    "details": {
      "sha": "549f5cee290dc074191a4e39e190ac5c626476b9",
      "filename": "main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/d908635c1f90ceebf49f1bbdfd0609342c673437/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Frecon%2FReconMarkNewTopicsOperation.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/d908635c1f90ceebf49f1bbdfd0609342c673437/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Frecon%2FReconMarkNewTopicsOperation.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Frecon%2FReconMarkNewTopicsOperation.java?ref=d908635c1f90ceebf49f1bbdfd0609342c673437",
      "patch": "@@ -33,12 +33,14 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n package com.google.refine.operations.recon;\n \n+import java.io.IOException;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import org.json.JSONObject;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import com.google.refine.browsing.EngineConfig;\n@@ -55,21 +57,23 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import com.google.refine.model.changes.ReconChange;\n import com.google.refine.model.recon.ReconConfig;\n import com.google.refine.operations.EngineDependentMassCellOperation;\n+import com.google.refine.util.ParsingUtilities;\n \n public class ReconMarkNewTopicsOperation extends EngineDependentMassCellOperation {\n     final protected boolean    _shareNewTopics;\n     \n-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {\n-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");\n-        \n-        return new ReconMarkNewTopicsOperation(\n-            EngineConfig.reconstruct(engineConfig), \n-            obj.getString(\"columnName\"),\n-            obj.has(\"shareNewTopics\") ? obj.getBoolean(\"shareNewTopics\") : false\n-        );\n+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {\n+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconMarkNewTopicsOperation.class);\n     }\n \n-    public ReconMarkNewTopicsOperation(EngineConfig engineConfig, String columnName, boolean shareNewTopics) {\n+    @JsonCreator\n+    public ReconMarkNewTopicsOperation(\n+            @JsonProperty(\"engineConfig\")\n+            EngineConfig engineConfig,\n+            @JsonProperty(\"columnName\")\n+            String columnName,\n+            @JsonProperty(\"shareNewTopics\")\n+            boolean shareNewTopics) {\n         super(engineConfig, columnName, false);\n         _shareNewTopics = shareNewTopics;\n     }",
      "parent_sha": "3271e53ecf5fb19e4b417f5b16bcf200e0e52b2b"
    }
  },
  {
    "oid": "8dc8e294f71fd4d2216726a93b8f52341508a9fd",
    "message": "bump the version",
    "date": "2018-05-27T06:02:16Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/8dc8e294f71fd4d2216726a93b8f52341508a9fd",
    "details": {
      "sha": "929fdfa735a120f9d583c2e2cb45a087a9248aaf",
      "filename": "main/src/com/google/refine/RefineServlet.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/8dc8e294f71fd4d2216726a93b8f52341508a9fd/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/8dc8e294f71fd4d2216726a93b8f52341508a9fd/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java?ref=8dc8e294f71fd4d2216726a93b8f52341508a9fd",
      "patch": "@@ -60,7 +60,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import edu.mit.simile.butterfly.ButterflyModule;\n \n public class RefineServlet extends Butterfly {\n-    static private String ASSIGNED_VERSION = \"2.8\";\n+    static private String ASSIGNED_VERSION = \"3.0 beta\";\n     \n     static public String VERSION = \"\";\n     static public String REVISION = \"\";",
      "parent_sha": "046248f1b52f91e5e6571b6940bec81db90ceb09"
    }
  },
  {
    "oid": "a76d88122a41c5b71cdf322bb277214d06026f1a",
    "message": "Migrate ApplyOperationsCommand",
    "date": "2018-11-30T10:38:52Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/a76d88122a41c5b71cdf322bb277214d06026f1a",
    "details": {
      "sha": "2ed9298be7c01ebab1d1d78420c237f3f0475712",
      "filename": "main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/a76d88122a41c5b71cdf322bb277214d06026f1a/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fhistory%2FApplyOperationsCommand.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/a76d88122a41c5b71cdf322bb277214d06026f1a/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fhistory%2FApplyOperationsCommand.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fhistory%2FApplyOperationsCommand.java?ref=a76d88122a41c5b71cdf322bb277214d06026f1a",
      "patch": "@@ -40,10 +40,8 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n-import org.json.JSONArray;\n-import org.json.JSONException;\n-import org.json.JSONObject;\n-\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.google.refine.commands.Command;\n import com.google.refine.model.AbstractOperation;\n import com.google.refine.model.Project;\n@@ -59,26 +57,28 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n         Project project = getProject(request);\n         String jsonString = request.getParameter(\"operations\");\n         try {\n-            JSONArray a = ParsingUtilities.evaluateJsonStringToArray(jsonString);\n-            int count = a.length();\n+            ArrayNode a = ParsingUtilities.evaluateJsonStringToArrayNode(jsonString);\n+            int count = a.size();\n             for (int i = 0; i < count; i++) {\n-                JSONObject obj = a.getJSONObject(i);\n-                \n-                reconstructOperation(project, obj);\n+            \tif (a.get(i) instanceof ObjectNode) {\n+\t                ObjectNode obj = (ObjectNode) a.get(i);\n+\t                \n+\t                reconstructOperation(project, obj);\n+            \t}\n             }\n \n             if (project.processManager.hasPending()) {\n                 respond(response, \"{ \\\"code\\\" : \\\"pending\\\" }\");\n             } else {\n                 respond(response, \"{ \\\"code\\\" : \\\"ok\\\" }\");\n             }\n-        } catch (JSONException e) {\n+        } catch (IOException e) {\n             respondException(response, e);\n         }\n     }\n     \n-    protected void reconstructOperation(Project project, JSONObject obj) throws IOException {\n-        AbstractOperation operation = ParsingUtilities.mapper.readValue(obj.toString(), AbstractOperation.class);\n+    protected void reconstructOperation(Project project, ObjectNode obj) throws IOException {\n+        AbstractOperation operation = ParsingUtilities.mapper.convertValue(obj, AbstractOperation.class);\n         if (operation != null) {\n             try {\n                 Process process = operation.createProcess(project, new Properties());",
      "parent_sha": "377b051bac295b55434818c8e3bfebe6e078487a"
    }
  },
  {
    "oid": "5d89978000ab088dcd7f74d6a1bfbcf382bee9c7",
    "message": "Dealing with a possible null pointer dereference",
    "date": "2019-10-18T02:59:16Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/5d89978000ab088dcd7f74d6a1bfbcf382bee9c7",
    "details": {
      "sha": "2204f37f22ba6b744674c39f186ff3ef20ce3b2c",
      "filename": "main/src/com/google/refine/io/FileProjectManager.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/5d89978000ab088dcd7f74d6a1bfbcf382bee9c7/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fio%2FFileProjectManager.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/5d89978000ab088dcd7f74d6a1bfbcf382bee9c7/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fio%2FFileProjectManager.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fio%2FFileProjectManager.java?ref=5d89978000ab088dcd7f74d6a1bfbcf382bee9c7",
      "patch": "@@ -194,7 +194,9 @@ public void exportProject(long projectId, TarOutputStream tos) throws IOExceptio\n \n     protected void tarDir(String relative, File dir, TarOutputStream tos) throws IOException{\n         File[] files = dir.listFiles();\n+        if (files == null) return;\n         for (File file : files) {\n+        \tif (file == null) continue;\n             if (!file.isHidden()) {\n                 String path = relative + file.getName();\n \n@@ -333,7 +335,10 @@ public void deleteProject(long projectID) {\n     }\n \n     static protected void deleteDir(File dir) {\n-        for (File file : dir.listFiles()) {\n+    \tFile[] files = dir.listFiles();\n+    \tif (files == null) return;\n+        for (File file : files) {\n+        \tif (file == null) continue;\n             if (file.isDirectory()) {\n                 deleteDir(file);\n             } else {\n@@ -377,7 +382,10 @@ protected boolean loadFromFile(File file) {\n \n     protected void recover() {\n         boolean recovered = false;\n-        for (File file : _workspaceDir.listFiles()) {\n+        File[] files = _workspaceDir.listFiles();\n+    \tif (files == null) return;\n+        for (File file : files) {\n+        \tif (file == null) continue;\n             if (file.isDirectory() && !file.isHidden()) {\n                 String dirName = file.getName();\n                 if (file.getName().endsWith(PROJECT_DIR_SUFFIX)) {",
      "parent_sha": "0e5834c9a57e3ef8b5cd5c49257b10cea9c2609f"
    }
  },
  {
    "oid": "55c3fdebab9ebd5b38ffbd377722ad6c6c7a2b6d",
    "message": "Bumped up version to 2.5.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2314 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-10-10T21:58:42Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/55c3fdebab9ebd5b38ffbd377722ad6c6c7a2b6d",
    "details": {
      "sha": "2e87ba9e3664e377eade0b20360d3c63db9a7450",
      "filename": "main/src/com/google/refine/RefineServlet.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/55c3fdebab9ebd5b38ffbd377722ad6c6c7a2b6d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/55c3fdebab9ebd5b38ffbd377722ad6c6c7a2b6d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java?ref=55c3fdebab9ebd5b38ffbd377722ad6c6c7a2b6d",
      "patch": "@@ -59,7 +59,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import edu.mit.simile.butterfly.ButterflyModule;\n \n public class RefineServlet extends Butterfly {\n-    static private String ASSIGNED_VERSION = \"2.1\";\n+    static private String ASSIGNED_VERSION = \"2.5\";\n     \n     static public String VERSION = \"\";\n     static public String REVISION = \"\";",
      "parent_sha": "1a14d823930b1d5c729fdb7e67b0d06ab9f3567e"
    }
  },
  {
    "oid": "e3f1fab4e8537fede53b9f907c790eb3f06d6195",
    "message": "Issue 453 - Add test for importing top level JSON array - from Thad \n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2287 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-10-07T16:52:31Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/e3f1fab4e8537fede53b9f907c790eb3f06d6195",
    "details": {
      "sha": "6cff9f14e66efbe6109cadc81645b4903d4d736e",
      "filename": "main/tests/server/src/com/google/refine/tests/importers/JsonImporterTests.java",
      "status": "modified",
      "additions": 35,
      "deletions": 2,
      "changes": 37,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/e3f1fab4e8537fede53b9f907c790eb3f06d6195/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FJsonImporterTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/e3f1fab4e8537fede53b9f907c790eb3f06d6195/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FJsonImporterTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FJsonImporterTests.java?ref=e3f1fab4e8537fede53b9f907c790eb3f06d6195",
      "patch": "@@ -1,6 +1,6 @@\n /*\r\n \r\n-Copyright 2010, Google Inc.\r\n+Copyright 2010,2011 Google Inc.\r\n All rights reserved.\r\n \r\n Redistribution and use in source and binary forms, with or without\r\n@@ -184,7 +184,40 @@ public void testElementWithMqlReadOutput(){\n         assertProjectCreated(project,3,16);\r\n     }\r\n     \r\n-    \r\n+    @Test\r\n+    public void testJSONMinimumArray(){\r\n+        String ScraperwikiOutput = \r\n+            \"[\\n\" +\r\n+            \"{\\n\" +\r\n+            \"        \\\"school\\\": \\\"University of Cambridge\\\\n\" +\r\n+            \"                            United Kingdom\\\",\\n\" +\r\n+            \"        \\\"student-faculty-score\\\": \\\"100\\\",\\n\" +\r\n+            \"        \\\"intl-student-score\\\": \\\"95\\\",\\n\" +\r\n+            \"        \\\"intl-faculty-score\\\": \\\"96\\\",\\n\" +\r\n+            \"        \\\"rank\\\": \\\"#1\\\",\\n\" +\r\n+            \"        \\\"peer-review-score\\\": \\\"100\\\",\\n\" +\r\n+            \"        \\\"emp-review-score\\\": \\\"100\\\",\\n\" +\r\n+            \"        \\\"score\\\": \\\"100.0\\\",\\n\" +\r\n+            \"        \\\"citations-score\\\": \\\"93\\\"\\n\" +\r\n+            \"    },\\n\" +\r\n+            \"    {\\n\" +\r\n+            \"        \\\"school\\\": \\\"Harvard University\\\\n\" +\r\n+            \"                            United States\\\",\\n\" +\r\n+            \"        \\\"student-faculty-score\\\": \\\"97\\\",\\n\" +\r\n+            \"        \\\"intl-student-score\\\": \\\"87\\\",\\n\" +\r\n+            \"        \\\"intl-faculty-score\\\": \\\"71\\\",\\n\" +\r\n+            \"        \\\"rank\\\": \\\"#2\\\",\\n\" +\r\n+            \"        \\\"peer-review-score\\\": \\\"100\\\",\\n\" +\r\n+            \"        \\\"emp-review-score\\\": \\\"100\\\",\\n\" +\r\n+            \"        \\\"score\\\": \\\"99.2\\\",\\n\" +\r\n+            \"        \\\"citations-score\\\": \\\"100\\\"\\n\" +\r\n+            \"    }\\n\" +\r\n+            \"]\\n\";\r\n+        RunTest(ScraperwikiOutput);\r\n+        log(project);\r\n+        assertProjectCreated(project,9,2);\r\n+    }\r\n+        \r\n     /**\r\n      * org.codehaus.Jackson.JsonParser has an inconsistency when returning getLocalName\r\n      * of an Entity_Start token which occurs after a Field_Name token\r",
      "parent_sha": "79c795138c38164a71f0d147d22efc05ac8f9600"
    }
  },
  {
    "oid": "828acfc6940260074ff078ad622af3613858288e",
    "message": "better way to ignore tests\n\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@780 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-05-15T03:12:23Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/828acfc6940260074ff078ad622af3613858288e",
    "details": {
      "sha": "32ab5b1f9f05bfe3e863ce2600a352f17ee92459",
      "filename": "tests/java/src/com/metaweb/gridworks/tests/importers/parsers/CSVRowParserTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/828acfc6940260074ff078ad622af3613858288e/tests%2Fjava%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Ftests%2Fimporters%2Fparsers%2FCSVRowParserTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/828acfc6940260074ff078ad622af3613858288e/tests%2Fjava%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Ftests%2Fimporters%2Fparsers%2FCSVRowParserTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/tests%2Fjava%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Ftests%2Fimporters%2Fparsers%2FCSVRowParserTests.java?ref=828acfc6940260074ff078ad622af3613858288e",
      "patch": "@@ -12,6 +12,7 @@\n import org.junit.After;\r\n import org.junit.Assert;\r\n import org.junit.Before;\r\n+import org.junit.Ignore;\r\n import org.junit.Test;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n@@ -67,7 +68,7 @@ public void splitWithQuotedComma(){\n         Assert.assertEquals(\"15.87\", splitLine.get(2));\r\n     }\r\n     \r\n-    //@Test\r\n+    @Ignore(\"CSV parser not doing the right thing yet\") @Test\r\n     public void splitWithUnclosedQuote(){\r\n         try {\r\n             when(lineReader.readLine()).thenReturn(\"\");\r\n@@ -85,7 +86,7 @@ public void splitWithUnclosedQuote(){\n         }\r\n     }\r\n     \r\n-    //@Test\r\n+    @Ignore(\"CSV parser not doing the right thing yet\") @Test\r\n     public void splitWithLeadingQuoteWithComma(){\r\n         List<String> splitLine = SUT.split(LEADING_QUOTE_WITH_COMMA, lineReader);\r\n         Assert.assertEquals(3, splitLine.size());\r\n@@ -94,7 +95,7 @@ public void splitWithLeadingQuoteWithComma(){\n         Assert.assertEquals(\"value3\", splitLine.get(2));\r\n     }\r\n     \r\n-    //@Test\r\n+    @Ignore(\"CSV parser not doing the right thing yet\") @Test\r\n     public void splitWithQuoteInsideValue(){\r\n         List<String> splitLine = SUT.split(QUOTED, lineReader);\r\n         Assert.assertEquals(3, splitLine.size());\r",
      "parent_sha": "2afe01414d90dbb399963758204b07d6bf4f56ec"
    }
  },
  {
    "oid": "f5786afa350c68abf0f001caa961a6b0e9afb52a",
    "message": "Increase test timeout - fixes #2875 (#2876)",
    "date": "2020-07-03T19:20:01Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/f5786afa350c68abf0f001caa961a6b0e9afb52a",
    "details": {
      "sha": "0c94f1c53ae085078390d6f493b09062bc636c25",
      "filename": "main/tests/server/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/f5786afa350c68abf0f001caa961a6b0e9afb52a/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcolumn%2FColumnAdditionByFetchingURLsOperationTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/f5786afa350c68abf0f001caa961a6b0e9afb52a/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcolumn%2FColumnAdditionByFetchingURLsOperationTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Foperations%2Fcolumn%2FColumnAdditionByFetchingURLsOperationTests.java?ref=f5786afa350c68abf0f001caa961a6b0e9afb52a",
      "patch": "@@ -263,7 +263,7 @@ public void testHttpHeaders() throws Exception {\n                 true,\n                 headers);\n \n-            runAndWait(op, 1000);\n+            runAndWait(op, 3000);\n \n             RecordedRequest request = server.takeRequest();\n             Assert.assertEquals(request.getHeader(\"user-agent\"), userAgentValue);",
      "parent_sha": "49fd21759c81cfccd08fce8b6ddf20a427bbf2a0"
    }
  },
  {
    "oid": "2e9708c16db925ae9b09a61081bebf126f8e832e",
    "message": "Tidying up test file",
    "date": "2018-06-08T19:03:38Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/2e9708c16db925ae9b09a61081bebf126f8e832e",
    "details": {
      "sha": "743e2f5c9787e687a54dda33102a7a94dc470f98",
      "filename": "main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 10,
      "changes": 12,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/2e9708c16db925ae9b09a61081bebf126f8e832e/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Foperations%2Fcell%2FMassOperationTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/2e9708c16db925ae9b09a61081bebf126f8e832e/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Foperations%2Fcell%2FMassOperationTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Foperations%2Fcell%2FMassOperationTests.java?ref=2e9708c16db925ae9b09a61081bebf126f8e832e",
      "patch": "@@ -14,16 +14,8 @@\n \n public class MassOperationTests extends RefineTest {\n \n-    List<Edit> editList;\n-    String editsString = null;\n-\n-    @BeforeMethod\n-    public void setUp() {\n-    }\n-\n-    @AfterMethod\n-    public void tearDown() {\n-    }\n+    private List<Edit> editList;\n+    private String editsString = null;\n \n     @Test\n     public void testReconstructEditString() throws Exception {",
      "parent_sha": "97ea151134466f1309af612b26dd52666be00585"
    }
  },
  {
    "oid": "c18a362b7a4098a9a7fb0de32c6c93d1667d13e7",
    "message": "fixes #4640 added example of Regex usage to desc of replace() (#4641)\n\n* fixes #4640 added example of Regex usage to desc of replace()\r\n\r\n* match grel function description with example from docs",
    "date": "2022-03-30T07:19:41Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/c18a362b7a4098a9a7fb0de32c6c93d1667d13e7",
    "details": {
      "sha": "8897c3e026a546d66c1a1ec46de9204e95425d68",
      "filename": "main/src/com/google/refine/expr/functions/strings/Replace.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/c18a362b7a4098a9a7fb0de32c6c93d1667d13e7/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FReplace.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/c18a362b7a4098a9a7fb0de32c6c93d1667d13e7/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FReplace.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FReplace.java?ref=c18a362b7a4098a9a7fb0de32c6c93d1667d13e7",
      "patch": "@@ -65,7 +65,10 @@ public Object call(Properties bindings, Object[] args) {\n     \n     @Override\n     public String getDescription() {\n-        return \"Returns the string obtained by replacing the find string with the replace string in the inputted string. For example, 'The cow jumps over the moon and moos'.replace('oo', 'ee') returns the string 'The cow jumps over the meen and mees'. Find can be a regex pattern.\";\n+        return \"Returns the string obtained by replacing the find string with the replace string in the inputted string. \" +\n+                \"For example, 'The cow jumps over the moon and moos'.replace('oo', 'ee') returns the string 'The cow jumps over the meen and mees'.\" +\n+                \" Find can be a regex pattern. \" +\n+                \"For example, 'The cow jumps over the moon and moos'.replace(/\\\\s+/, \\\"_\\\") will return 'The_cow_jumps_over_the_moon_and_moos'\";\n     }\n     \n     @Override",
      "parent_sha": "5bfae756836cb95d8ff75964cf5625ba1872b94b"
    }
  },
  {
    "oid": "ae9e0af8b9503f3c2c818f8676e0202189b357c6",
    "message": "bump to version 2.8",
    "date": "2017-11-18T19:15:10Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/ae9e0af8b9503f3c2c818f8676e0202189b357c6",
    "details": {
      "sha": "cb6922235c94b065fce06aee15afda5da446a0f0",
      "filename": "main/src/com/google/refine/RefineServlet.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/ae9e0af8b9503f3c2c818f8676e0202189b357c6/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/ae9e0af8b9503f3c2c818f8676e0202189b357c6/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefineServlet.java?ref=ae9e0af8b9503f3c2c818f8676e0202189b357c6",
      "patch": "@@ -60,7 +60,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import edu.mit.simile.butterfly.ButterflyModule;\n \n public class RefineServlet extends Butterfly {\n-    static private String ASSIGNED_VERSION = \"2.7\";\n+    static private String ASSIGNED_VERSION = \"2.8\";\n     \n     static public String VERSION = \"\";\n     static public String REVISION = \"\";",
      "parent_sha": "daca1836e9fb0ab620c88d15f0a19f6b0c99765e"
    }
  },
  {
    "oid": "22c1d5dd9b1a4d40f7b4dcd8b801d2df56eea098",
    "message": "Edit as bot by default",
    "date": "2018-04-27T07:17:32Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/22c1d5dd9b1a4d40f7b4dcd8b801d2df56eea098",
    "details": {
      "sha": "f9234704bd43b2e3e9a0760a0412c899e062cc80",
      "filename": "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/22c1d5dd9b1a4d40f7b4dcd8b801d2df56eea098/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Foperations%2FPerformWikibaseEditsOperation.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/22c1d5dd9b1a4d40f7b4dcd8b801d2df56eea098/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Foperations%2FPerformWikibaseEditsOperation.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Foperations%2FPerformWikibaseEditsOperation.java?ref=22c1d5dd9b1a4d40f7b4dcd8b801d2df56eea098",
      "patch": "@@ -26,6 +26,7 @@\n import org.wikidata.wdtk.util.WebResourceFetcherImpl;\n import org.wikidata.wdtk.wikibaseapi.ApiConnection;\n import org.wikidata.wdtk.wikibaseapi.WikibaseDataEditor;\n+import org.wikidata.wdtk.wikibaseapi.WikibaseDataFetcher;\n import org.wikidata.wdtk.wikibaseapi.apierrors.MediaWikiApiErrorException;\n import org.wikidata.wdtk.datamodel.interfaces.SiteLink;\n \n@@ -200,8 +201,9 @@ public void run() {\n             }\n             ApiConnection connection = manager.getConnection();\n \n-            //WikibaseDataFetcher wbdf = new WikibaseDataFetcher(connection, schema.getBaseUri());\n+            WikibaseDataFetcher wbdf = new WikibaseDataFetcher(connection, _schema.getBaseUri());\n             WikibaseDataEditor wbde = new WikibaseDataEditor(connection, _schema.getBaseUri());\n+            wbde.setEditAsBot(true);\n             //wbde.disableEditing();\n             \n             // Evaluate the schema\n@@ -242,13 +244,14 @@ public void run() {\n                         newItemLibrary.setQid(newCell.getReconInternalId(), createdDoc.getItemId().getId());\n                     } else {\n                         // Existing item\n-                        wbde.updateTermsStatements(update.getItemId(),\n+                        ItemDocument currentDocument = (ItemDocument) wbdf.getEntityDocument(update.getItemId().getId());\n+                        wbde.updateTermsStatements(currentDocument,\n                                 update.getLabels(),\n                                 update.getDescriptions(),\n                                 update.getAliases(),\n                                 new ArrayList<MonolingualTextValue>(),\n                                 update.getAddedStatements(),\n-                                update.getDeletedStatements(), _summary);   \n+                                update.getDeletedStatements(), _summary);\n                     }\n                 } catch (MediaWikiApiErrorException e) {\n                     // TODO Auto-generated catch block",
      "parent_sha": "8cc282a502d6f360cd0955f5e14427935fa0b52e"
    }
  },
  {
    "oid": "6dbab84ba66ce6822c3e2747448d3b895a8b0a35",
    "message": "make sure that servlet configurations are injected even upon reloading the servlet context\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@929 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-06-01T08:02:16Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/6dbab84ba66ce6822c3e2747448d3b895a8b0a35",
    "details": {
      "sha": "f02d05153cf25385112e559b71b4473700718ccf",
      "filename": "server/src/com/metaweb/gridworks/Gridworks.java",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/6dbab84ba66ce6822c3e2747448d3b895a8b0a35/server%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2FGridworks.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/6dbab84ba66ce6822c3e2747448d3b895a8b0a35/server%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2FGridworks.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/server%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2FGridworks.java?ref=6dbab84ba66ce6822c3e2747448d3b895a8b0a35",
      "patch": "@@ -150,8 +150,6 @@ public void init(String host, int port) throws Exception {\n         logger.info(\"Initializing context: '\" + contextPath + \"' from '\" + webapp.getAbsolutePath() + \"'\");\n         WebAppContext context = new WebAppContext(webapp.getAbsolutePath(), contextPath);\n         context.setMaxFormContentSize(1048576);\n-        //context.setCopyWebDir(false);\n-        //context.setDefaultsDescriptor(null);\n \n         this.setHandler(context);\n         this.setStopAtShutdown(true);\n@@ -165,12 +163,7 @@ public void init(String host, int port) throws Exception {\n         // start the server\n         this.start();\n         \n-        // inject configuration parameters in the servlets\n-        // NOTE: this is done *after* starting the server because jetty might override the init\n-        // parameters if we set them in the webapp context upon reading the web.xml file\n-        ServletHolder servlet = context.getServletHandler().getServlet(\"gridworks\");\n-        servlet.setInitParameter(\"gridworks.data\", getDataDir());\n-        servlet.doStart();\n+        configure(context);\n     }\n     \n     @Override\n@@ -215,6 +208,8 @@ public void filesChanged(List changedFiles) {\n \n                     logger.info(\"Starting context: \" + contextRoot.getAbsolutePath());\n                     context.start();\n+                    \n+                    configure(context);\n                 } catch (Exception ex) {\n                     throw new RuntimeException(ex);\n                 }\n@@ -236,7 +231,16 @@ public boolean accept(File pathname) {\n             }\n         });\n     }\n-    \n+\n+    // inject configuration parameters in the servlets\n+    // NOTE: this is done *after* starting the server because jetty might override the init\n+    // parameters if we set them in the webapp context upon reading the web.xml file    \n+    static private void configure(WebAppContext context) throws Exception {\n+        ServletHolder servlet = context.getServletHandler().getServlet(\"gridworks\");\n+        servlet.setInitParameter(\"gridworks.data\", getDataDir());\n+        servlet.doStart();\n+    }\n+\n     static private String getDataDir() {\n         \n         String data_dir = Configurations.get(\"gridworks.data_dir\");",
      "parent_sha": "ba2d94cc63ffc1239aa538bfb47a82bfcc876cf0"
    }
  },
  {
    "oid": "5c845f06bf015c89e02e76ef321b5220f2b6db03",
    "message": "Now we can delete a project even if it hasn't been saved to file yet.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@214 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-03-05T19:43:08Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/5c845f06bf015c89e02e76ef321b5220f2b6db03",
    "details": {
      "sha": "2116f368fff385b3f314d970c7f109f4719c7f4c",
      "filename": "src/main/java/com/metaweb/gridworks/ProjectManager.java",
      "status": "modified",
      "additions": 15,
      "deletions": 9,
      "changes": 24,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/5c845f06bf015c89e02e76ef321b5220f2b6db03/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FProjectManager.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/5c845f06bf015c89e02e76ef321b5220f2b6db03/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FProjectManager.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2FProjectManager.java?ref=5c845f06bf015c89e02e76ef321b5220f2b6db03",
      "patch": "@@ -309,14 +309,20 @@ protected void saveProject(Project project) {\n     }\r\n \r\n     public boolean deleteProject(Project project) {\r\n-        File file = new File(_dir, project.id + \".project\");\r\n-        if (file.exists()) {\r\n-            _projects.remove(project.id);\r\n-            _projectsMetadata.remove(project.id);\r\n-            boolean result = file.delete();\r\n-            save();\r\n-            return result;\r\n-        }\r\n-        return false;\r\n+    \tif (_projectsMetadata.containsKey(project.id)) {\r\n+\t        _projects.remove(project.id);\r\n+\t        _projectsMetadata.remove(project.id);\r\n+\t        \r\n+\t        File file = new File(_dir, project.id + \".project\");\r\n+\t        if (file.exists()) {\r\n+\t            file.delete();\r\n+\t        }\r\n+\t        \r\n+\t        save();\r\n+\t        \r\n+\t        return true;\r\n+    \t} else {\r\n+    \t\treturn false;\r\n+    \t}\r\n     }\r\n }\r",
      "parent_sha": "676a189968ce2b6d8b356f5a0d118d5f62271fd8"
    }
  },
  {
    "oid": "a9f77d0f51f844875b4e25e3fcfd8dd565821569",
    "message": "Minor bug.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1020 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-06-22T21:29:15Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/a9f77d0f51f844875b4e25e3fcfd8dd565821569",
    "details": {
      "sha": "8a829c4dd9f0f6cae496296b3e72dd668cbe407b",
      "filename": "main/src/com/metaweb/gridworks/expr/functions/math/Mod.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/a9f77d0f51f844875b4e25e3fcfd8dd565821569/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fexpr%2Ffunctions%2Fmath%2FMod.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/a9f77d0f51f844875b4e25e3fcfd8dd565821569/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fexpr%2Ffunctions%2Fmath%2FMod.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fexpr%2Ffunctions%2Fmath%2FMod.java?ref=a9f77d0f51f844875b4e25e3fcfd8dd565821569",
      "patch": "@@ -16,7 +16,7 @@ public Object call(Properties bindings, Object[] args) {\n                 args[0] != null && args[0] instanceof Number && \n                 args[1] != null && args[1] instanceof Number) {\n             int a = ((Number) args[0]).intValue();\n-            int b = ((Number) args[0]).intValue();\n+            int b = ((Number) args[1]).intValue();\n             \n             return a % b;\n         }",
      "parent_sha": "8046c63a8aec497fe1e2f507d1912ded0759b2b5"
    }
  },
  {
    "oid": "9aba9c2d4893329dc38802d1813447cf5bc123fd",
    "message": "Using the parsed form parameter 'options' instead of looking for an URL parameter.",
    "date": "2018-10-16T13:13:34Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/9aba9c2d4893329dc38802d1813447cf5bc123fd",
    "details": {
      "sha": "ece7ef28f07a337ed752fcc7998c1a7981bac24d",
      "filename": "main/src/com/google/refine/commands/project/CreateProjectCommand.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/9aba9c2d4893329dc38802d1813447cf5bc123fd/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/9aba9c2d4893329dc38802d1813447cf5bc123fd/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fcommands%2Fproject%2FCreateProjectCommand.java?ref=9aba9c2d4893329dc38802d1813447cf5bc123fd",
      "patch": "@@ -106,7 +106,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n             }\n             \n             JSONObject optionObj = null;\n-            String optionsString = request.getParameter(\"options\");\n+            String optionsString = parameters.getProperty(\"options\");\n             if (optionsString != null && !optionsString.isEmpty()) {\n                 optionObj = ParsingUtilities.evaluateJsonStringToObject(optionsString);\n             } else {",
      "parent_sha": "89ed5365ea3a7486b744caa560e1f9f32a0923fe"
    }
  },
  {
    "oid": "057b64fcc2fe568f2fe7ab5237dbab75bf625567",
    "message": "Increasing to 10 second sleep because of Travis\n\nIn Travis these tests are occasionally failing https://travis-ci.org/OpenRefine/OpenRefine/jobs/3896227 which is probably due to the CPU demand spike placed with createProcess.",
    "date": "2018-06-08T11:26:08Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/057b64fcc2fe568f2fe7ab5237dbab75bf625567",
    "details": {
      "sha": "119c8abcc4bfa42e34debc020c6e408f8c47d4d2",
      "filename": "main/tests/server/src/com/google/refine/tests/recon/DataExtensionTests.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/057b64fcc2fe568f2fe7ab5237dbab75bf625567/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Frecon%2FDataExtensionTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/057b64fcc2fe568f2fe7ab5237dbab75bf625567/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Frecon%2FDataExtensionTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Frecon%2FDataExtensionTests.java?ref=057b64fcc2fe568f2fe7ab5237dbab75bf625567",
      "patch": "@@ -144,8 +144,8 @@ public void testFetchStrings() throws Exception {\n         process.startPerforming(pm);\n         Assert.assertTrue(process.isRunning());\n         try {\n-            // We have 4 rows so 4000 ms should be largely enough.\n-            Thread.sleep(5000);\n+            // This is 10 seconds because for some reason running this test on Travis takes longer.\n+            Thread.sleep(10000);\n         } catch (InterruptedException e) {\n             Assert.fail(\"Test interrupted\");\n         }\n@@ -181,7 +181,8 @@ public void testFetchCounts() throws Exception {\n         process.startPerforming(pm);\n         Assert.assertTrue(process.isRunning());\n         try {\n-            Thread.sleep(5000);\n+            // This is 10 seconds because for some reason running this test on Travis takes longer.\n+            Thread.sleep(10000);\n         } catch (InterruptedException e) {\n             Assert.fail(\"Test interrupted\");\n         }\n@@ -214,7 +215,8 @@ public void testFetchCurrent() throws Exception {\n         process.startPerforming(pm);\n         Assert.assertTrue(process.isRunning());\n         try {\n-            Thread.sleep(5000);\n+            // This is 10 seconds because for some reason running this test on Travis takes longer.\n+            Thread.sleep(10000);\n         } catch (InterruptedException e) {\n             Assert.fail(\"Test interrupted\");\n         }\n@@ -253,7 +255,8 @@ public void testFetchRecord() throws Exception {\n         process.startPerforming(pm);\n         Assert.assertTrue(process.isRunning());\n         try {\n-            Thread.sleep(5000);\n+            // This is 10 seconds because for some reason running this test on Travis takes longer.\n+            Thread.sleep(10000);\n         } catch (InterruptedException e) {\n             Assert.fail(\"Test interrupted\");\n         }",
      "parent_sha": "34cddb61a27a5f5fcef57ed4b1cfcb95a54bd457"
    }
  },
  {
    "oid": "884d0ea8d496598cf886436795b2478a59310a14",
    "message": "Look up functions by name to make tests more directly analogous to user view\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2252 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-09-20T05:00:48Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/884d0ea8d496598cf886436795b2478a59310a14",
    "details": {
      "sha": "17c05f4b2163a117438ace06d18af1feea6c54ff",
      "filename": "main/tests/server/src/com/google/refine/tests/expr/functions/strings/StringCaseTests.java",
      "status": "modified",
      "additions": 32,
      "deletions": 12,
      "changes": 44,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/884d0ea8d496598cf886436795b2478a59310a14/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fstrings%2FStringCaseTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/884d0ea8d496598cf886436795b2478a59310a14/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fstrings%2FStringCaseTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fstrings%2FStringCaseTests.java?ref=884d0ea8d496598cf886436795b2478a59310a14",
      "patch": "@@ -43,11 +43,17 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import org.testng.annotations.Test;\n \n import com.google.refine.expr.EvalError;\n-import com.google.refine.expr.functions.strings.ToTitlecase;\n+import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n import com.google.refine.tests.RefineTest;\n \n \n+/**\n+ * Tests for string up/low/title case functions.  \n+ * (A very brief start so far)\n+ * \n+ * @author Tom Morris <tfmorris@gmail.com>\n+ */\n public class StringCaseTests extends RefineTest {\n \n     static Properties bindings;\n@@ -68,23 +74,37 @@ public void TearDown() {\n         bindings = null;\n     }\n     \n+    /**\n+     * Lookup a control function by name and invoke it with a variable number of args\n+     */\n+    private static Object invoke(String name,Object... args) {\n+        // registry uses static initializer, so no need to set it up\n+        Function function = ControlFunctionRegistry.getFunction(name);\n+        if (function == null) {\n+            throw new IllegalArgumentException(\"Unknown function \"+name);\n+        }\n+        if (args == null) {\n+            return function.call(bindings,new Object[0]);\n+        } else {\n+            return function.call(bindings,args);\n+        }\n+    }\n+    \n     @Test\n     public void testToTitlecaseInvalidParams() {        \n-        Function fut = new ToTitlecase();\n-        Assert.assertTrue(fut.call(bindings, new Object[]{}) instanceof EvalError);\n-        Assert.assertTrue(fut.call(bindings, new Object[]{\"one\",\"two\"}) instanceof EvalError);\n-        Assert.assertTrue(fut.call(bindings, new Object[]{\"one\",\"two\",\"three\"}) instanceof EvalError);\n+        Assert.assertTrue(invoke(\"toTitlecase\") instanceof EvalError);\n+        Assert.assertTrue(invoke(\"toTitlecase\", \"one\",\"two\") instanceof EvalError);\n+        Assert.assertTrue(invoke(\"toTitlecase\", \"one\",\"two\",\"three\") instanceof EvalError);\n     }\n     \n     @Test\n     public void testToTitlecase() {        \n-        Function fut = new ToTitlecase();\n-        Assert.assertEquals((String)(fut.call(bindings, new Object[]{\"one\"})),\"One\");\n-        Assert.assertEquals((String)(fut.call(bindings, new Object[]{\"ONE\"})),\"One\");\n-        Assert.assertEquals((String)(fut.call(bindings, new Object[]{\"one two three\"})),\"One Two Three\");\n-        Assert.assertEquals((String)(fut.call(bindings, new Object[]{\"C.R. SANDIDGE WINES, INC.\"})),\"C.R. Sandidge Wines, Inc.\");\n-//        Assert.assertEquals((String)(fut.call(bindings, new Object[]{\"C.R. SANDIDGE WINES, INC.\",\",. \"})),\"C.R. Sandidge Wines, Inc.\");\n-//        Assert.assertEquals((String)(fut.call(bindings, new Object[]{\"one-two-three\",\"-\"})),\"One-Two-Three\");\n+        Assert.assertEquals((String)(invoke(\"toTitlecase\", \"one\")),\"One\");\n+        Assert.assertEquals((String)(invoke(\"toTitlecase\", \"ONE\")),\"One\");\n+        Assert.assertEquals((String)(invoke(\"toTitlecase\", \"one two three\")),\"One Two Three\");\n+        Assert.assertEquals((String)(invoke(\"toTitlecase\", \"C.R. SANDIDGE WINES, INC.\")),\"C.R. Sandidge Wines, Inc.\");\n+//        Assert.assertEquals((String)(invoke(\"toTitlecase\", \"C.R. SANDIDGE WINES, INC.\",\",. \")),\"C.R. Sandidge Wines, Inc.\");\n+//        Assert.assertEquals((String)(invoke(\"toTitlecase\", \"one-two-three\",\"-\")),\"One-Two-Three\");\n     }\n     \n }",
      "parent_sha": "e1184003df0ab945a82b49efd52e6367ff19798e"
    }
  },
  {
    "oid": "4950d2907444990bd5584dea91179c5a7ff3c8f3",
    "message": "add backward compatility for cross function",
    "date": "2017-07-23T23:19:58Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/4950d2907444990bd5584dea91179c5a7ff3c8f3",
    "details": {
      "sha": "a5213b371565276823c13e47a2459df7658ed905",
      "filename": "main/src/com/google/refine/expr/functions/Cross.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/4950d2907444990bd5584dea91179c5a7ff3c8f3/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FCross.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/4950d2907444990bd5584dea91179c5a7ff3c8f3/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FCross.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FCross.java?ref=4950d2907444990bd5584dea91179c5a7ff3c8f3",
      "patch": "@@ -51,13 +51,13 @@ public class Cross implements Function {\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n         if (args.length == 3) {\n-            // from project is implied\n-            \n-            Object v = args[0]; // from cell\n+            // 1st argument can take either value or cell(for backward compatibility)\n+            Object v = args[0];\n             Object toProjectName = args[1];\n             Object toColumnName = args[2];\n             \n-            if (v != null && v instanceof String &&\n+            if (v != null && \n+                ( v instanceof String || v instanceof WrappedCell ) &&\n                 toProjectName != null && toProjectName instanceof String &&\n                 toColumnName != null && toColumnName instanceof String) {\n                 \n@@ -68,10 +68,12 @@ public Object call(Properties bindings, Object[] args) {\n                         (String) toColumnName\n                         );\n                 \n-                return join.getRows((String)v);\n+                String srcValue = v instanceof String ? (String)v : (String)((WrappedCell) v).cell.value;\n+                        \n+                return join.getRows(srcValue);\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a string, a project name to join with, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a string or cell, a project name to join with, and a column name in that project\");\n     }\n     \n     @Override",
      "parent_sha": "ef8b5ffce37e9005012c2967e5066e01a23bd103"
    }
  },
  {
    "oid": "a560cb56df403ba9e2cc6e5a27947b0a73f75d8d",
    "message": "Replace tabs with spaces.  No functional changes.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1942 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-11-29T06:27:06Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/a560cb56df403ba9e2cc6e5a27947b0a73f75d8d",
    "details": {
      "sha": "79fa1a3676cbe7ae04c440df3c89e17ec05cf2f2",
      "filename": "main/src/com/google/refine/model/RecordModel.java",
      "status": "modified",
      "additions": 137,
      "deletions": 137,
      "changes": 274,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/a560cb56df403ba9e2cc6e5a27947b0a73f75d8d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2FRecordModel.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/a560cb56df403ba9e2cc6e5a27947b0a73f75d8d/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2FRecordModel.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2FRecordModel.java?ref=a560cb56df403ba9e2cc6e5a27947b0a73f75d8d",
      "patch": "@@ -46,146 +46,146 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import com.google.refine.expr.ExpressionUtils;\n \n public class RecordModel implements Jsonizable {\n-\tfinal static public class CellDependency {\n-\t\tfinal public int rowIndex;\n-\t\tfinal public int cellIndex;\n-\t\t\n-\t\tpublic CellDependency(int rowIndex, int cellIndex) {\n-\t\t\tthis.rowIndex = rowIndex;\n-\t\t\tthis.cellIndex = cellIndex;\n-\t\t}\n-\t}\n-\t\n-\tfinal static public class RowDependency {\n-\t\tpublic int recordIndex;\n-\t\tpublic CellDependency[] cellDependencies;\n-\t\tpublic List<Integer> contextRows;\n-\t}\n-\t\n-\tprotected List<RowDependency> _rowDependencies;\n-\tprotected List<Record> _records;\n-\t\n-\tpublic RowDependency getRowDependency(int rowIndex) {\n-\t\treturn _rowDependencies != null && rowIndex >= 0 && rowIndex < _rowDependencies.size() ?\n-\t\t\t\t_rowDependencies.get(rowIndex) : null;\n-\t}\n-\t\n-\tpublic int getRecordCount() {\n-\t\treturn _records.size();\n-\t}\n-\t\n-\tpublic Record getRecord(int recordIndex) {\n-\t\treturn _records != null && recordIndex >= 0 && recordIndex < _records.size() ?\n-\t\t\t\t_records.get(recordIndex) : null;\n-\t}\n-\t\n-\tpublic Record getRecordOfRow(int rowIndex) {\n-\t\tRowDependency rd = getRowDependency(rowIndex);\n-\t\tif (rd != null) {\n-\t\t\tif (rd.recordIndex < 0) {\n-\t\t\t\trd = getRowDependency(rd.contextRows.get(0));\n-\t\t\t}\n-\t\t\treturn getRecord(rd.recordIndex);\n-\t\t}\n-\t\treturn null;\n-\t}\n+    final static public class CellDependency {\n+        final public int rowIndex;\n+        final public int cellIndex;\n+\n+        public CellDependency(int rowIndex, int cellIndex) {\n+            this.rowIndex = rowIndex;\n+            this.cellIndex = cellIndex;\n+        }\n+    }\n \t\n+    final static public class RowDependency {\n+        public int recordIndex;\n+        public CellDependency[] cellDependencies;\n+        public List<Integer> contextRows;\n+    }\n+\n+    protected List<RowDependency> _rowDependencies;\n+    protected List<Record> _records;\n+\n+    public RowDependency getRowDependency(int rowIndex) {\n+        return _rowDependencies != null && rowIndex >= 0 && rowIndex < _rowDependencies.size() ?\n+                _rowDependencies.get(rowIndex) : null;\n+    }\n+\n+    public int getRecordCount() {\n+        return _records.size();\n+    }\n+\n+    public Record getRecord(int recordIndex) {\n+        return _records != null && recordIndex >= 0 && recordIndex < _records.size() ?\n+                _records.get(recordIndex) : null;\n+    }\n+\n+    public Record getRecordOfRow(int rowIndex) {\n+        RowDependency rd = getRowDependency(rowIndex);\n+        if (rd != null) {\n+            if (rd.recordIndex < 0) {\n+                rd = getRowDependency(rd.contextRows.get(0));\n+            }\n+            return getRecord(rd.recordIndex);\n+        }\n+        return null;\n+    }\n+\n     synchronized public void write(JSONWriter writer, Properties options)\n-    \tthrows JSONException {\n+    throws JSONException {\n \n-    \twriter.object();\n-    \twriter.key(\"hasRecords\"); writer.value(_records.size() < _rowDependencies.size());\n-    \twriter.endObject();\n+        writer.object();\n+        writer.key(\"hasRecords\"); writer.value(_records.size() < _rowDependencies.size());\n+        writer.endObject();\n     }\n-    \n+\n     static protected class KeyedGroup {\n         int[]   cellIndices;\n         int     keyCellIndex;\n     }\n \n     synchronized public void update(Project project) {\n-    \tsynchronized (project) {\n-\t    \tList<Row> rows = project.rows;\n-\t        int rowCount = rows.size();\n-\t    \t\n-\t    \tColumnModel columnModel = project.columnModel;\n-\t    \tList<KeyedGroup> keyedGroups = computeKeyedGroups(columnModel);\n-\t        int groupCount = keyedGroups.size();\n-\t    \t\n-\t        int[] lastNonBlankRowsByGroup = new int[keyedGroups.size()];\n-\t        for (int i = 0; i < lastNonBlankRowsByGroup.length; i++) {\n-\t            lastNonBlankRowsByGroup[i] = -1;\n-\t        }\n-\t\n-\t    \t_rowDependencies = new ArrayList<RowDependency>(rowCount);\n-\t    \t\n-\t        int recordIndex = 0;\n-\t        for (int r = 0; r < rowCount; r++) {\n-\t            Row row = rows.get(r);\n-\t            RowDependency rowDependency = new RowDependency();\n-\t\n-\t            for (int g = 0; g < groupCount; g++) {\n-\t                KeyedGroup group = keyedGroups.get(g);\n-\t\n-\t                if (!ExpressionUtils.isNonBlankData(row.getCellValue(group.keyCellIndex))) {\n-\t                    int contextRowIndex = lastNonBlankRowsByGroup[g];\n-\t                    if (contextRowIndex >= 0) {\n-\t                        for (int dependentCellIndex : group.cellIndices) {\n-\t                            if (ExpressionUtils.isNonBlankData(row.getCellValue(dependentCellIndex))) {\n-\t                                setRowDependency(\n-\t                                    project,\n-\t                                    rowDependency,\n-\t                                    dependentCellIndex,\n-\t                                    contextRowIndex,\n-\t                                    group.keyCellIndex\n-\t                                );\n-\t                            }\n-\t                        }\n-\t                    }\n-\t                } else {\n-\t                    lastNonBlankRowsByGroup[g] = r;\n-\t                }\n-\t            }\n-\t\n-\t            if (rowDependency.cellDependencies != null && rowDependency.cellDependencies.length > 0) {\n-\t            \trowDependency.recordIndex = -1;\n-\t            \trowDependency.contextRows = new ArrayList<Integer>();\n-\t                for (CellDependency cd : rowDependency.cellDependencies) {\n-\t                    if (cd != null) {\n-\t                    \trowDependency.contextRows.add(cd.rowIndex);\n-\t                    }\n-\t                }\n-\t                Collections.sort(rowDependency.contextRows);\n-\t            } else {\n-\t            \trowDependency.recordIndex = recordIndex++;\n-\t            }\n-\t            \n-\t            _rowDependencies.add(rowDependency);\n-\t        }\n-\t        \n-\t    \t_records = new ArrayList<Record>(recordIndex);\n-\t    \tif (recordIndex > 0) {\n-\t\t    \trecordIndex = 0;\n-\t\t    \t\n-\t\t    \tint recordRowIndex = 0;\n-\t\t        for (int r = 1; r < rowCount; r++) {\n-\t\t            RowDependency rd = _rowDependencies.get(r);\n-\t\t            if (rd.recordIndex >= 0) {\n-\t\t            \t_records.add(new Record(recordRowIndex, r, recordIndex++));\n-\t\t            \t\n-\t\t            \trecordIndex = rd.recordIndex;\n-\t\t            \trecordRowIndex = r;\n-\t\t            }\n-\t\t        }\n-\t\t        \n-            \t_records.add(new Record(recordRowIndex, rowCount, recordIndex++));\n-\t    \t}\n-    \t}\n+        synchronized (project) {\n+            List<Row> rows = project.rows;\n+            int rowCount = rows.size();\n+\n+            ColumnModel columnModel = project.columnModel;\n+            List<KeyedGroup> keyedGroups = computeKeyedGroups(columnModel);\n+            int groupCount = keyedGroups.size();\n+\n+            int[] lastNonBlankRowsByGroup = new int[keyedGroups.size()];\n+            for (int i = 0; i < lastNonBlankRowsByGroup.length; i++) {\n+                lastNonBlankRowsByGroup[i] = -1;\n+            }\n+\n+            _rowDependencies = new ArrayList<RowDependency>(rowCount);\n+\n+            int recordIndex = 0;\n+            for (int r = 0; r < rowCount; r++) {\n+                Row row = rows.get(r);\n+                RowDependency rowDependency = new RowDependency();\n+\n+                for (int g = 0; g < groupCount; g++) {\n+                    KeyedGroup group = keyedGroups.get(g);\n+\n+                    if (!ExpressionUtils.isNonBlankData(row.getCellValue(group.keyCellIndex))) {\n+                        int contextRowIndex = lastNonBlankRowsByGroup[g];\n+                        if (contextRowIndex >= 0) {\n+                            for (int dependentCellIndex : group.cellIndices) {\n+                                if (ExpressionUtils.isNonBlankData(row.getCellValue(dependentCellIndex))) {\n+                                    setRowDependency(\n+                                            project,\n+                                            rowDependency,\n+                                            dependentCellIndex,\n+                                            contextRowIndex,\n+                                            group.keyCellIndex\n+                                    );\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                        lastNonBlankRowsByGroup[g] = r;\n+                    }\n+                }\n+\n+                if (rowDependency.cellDependencies != null && rowDependency.cellDependencies.length > 0) {\n+                    rowDependency.recordIndex = -1;\n+                    rowDependency.contextRows = new ArrayList<Integer>();\n+                    for (CellDependency cd : rowDependency.cellDependencies) {\n+                        if (cd != null) {\n+                            rowDependency.contextRows.add(cd.rowIndex);\n+                        }\n+                    }\n+                    Collections.sort(rowDependency.contextRows);\n+                } else {\n+                    rowDependency.recordIndex = recordIndex++;\n+                }\n+\n+                _rowDependencies.add(rowDependency);\n+            }\n+\n+            _records = new ArrayList<Record>(recordIndex);\n+            if (recordIndex > 0) {\n+                recordIndex = 0;\n+\n+                int recordRowIndex = 0;\n+                for (int r = 1; r < rowCount; r++) {\n+                    RowDependency rd = _rowDependencies.get(r);\n+                    if (rd.recordIndex >= 0) {\n+                        _records.add(new Record(recordRowIndex, r, recordIndex++));\n+\n+                        recordIndex = rd.recordIndex;\n+                        recordRowIndex = r;\n+                    }\n+                }\n+\n+                _records.add(new Record(recordRowIndex, rowCount, recordIndex++));\n+            }\n+        }\n     }\n-    \n+\n     protected List<KeyedGroup> computeKeyedGroups(ColumnModel columnModel) {\n         List<KeyedGroup> keyedGroups = new ArrayList<KeyedGroup>();\n-    \t\n+\n         addRootKeyedGroup(columnModel, keyedGroups);\n \n         for (ColumnGroup group : columnModel.columnGroups) {\n@@ -212,7 +212,7 @@ public int compare(KeyedGroup o1, KeyedGroup o2) {\n                 return o2.cellIndices.length - o1.cellIndices.length; // larger groups first\n             }\n         });\n-        \n+\n         return keyedGroups;\n     }\n \n@@ -236,20 +236,20 @@ protected void addRootKeyedGroup(ColumnModel columnModel, List<KeyedGroup> keyed\n     }\n \n     protected void setRowDependency(\n-\t\tProject project, \n-\t\tRowDependency rowDependency, \n-\t\tint cellIndex, \n-\t\tint contextRowIndex, \n-\t\tint contextCellIndex\n-\t) {\n+            Project project, \n+            RowDependency rowDependency, \n+            int cellIndex, \n+            int contextRowIndex, \n+            int contextCellIndex\n+    ) {\n         if (rowDependency.cellDependencies == null) {\n             int count = project.columnModel.getMaxCellIndex() + 1;\n-            \n-        \trowDependency.cellDependencies = new CellDependency[count];\n+\n+            rowDependency.cellDependencies = new CellDependency[count];\n         }\n \n         rowDependency.cellDependencies[cellIndex] = \n-        \tnew CellDependency(contextRowIndex, contextCellIndex);\n+            new CellDependency(contextRowIndex, contextCellIndex);\n     }\n \n }",
      "parent_sha": "3a8f9306bdc10823da2802165904c5e894a03c10"
    }
  },
  {
    "oid": "dce42400d49a743d523ae45d88fc1395164a105a",
    "message": "Fixed bug introduced while trying to delay constructing the candidates arrays in Recon objects.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@130 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-02-23T17:47:34Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/dce42400d49a743d523ae45d88fc1395164a105a",
    "details": {
      "sha": "ab6138079fb1f637a9dcdccc77f4a7d0468dab7c",
      "filename": "src/main/java/com/metaweb/gridworks/model/Recon.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/dce42400d49a743d523ae45d88fc1395164a105a/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2FRecon.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/dce42400d49a743d523ae45d88fc1395164a105a/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2FRecon.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fmodel%2FRecon.java?ref=dce42400d49a743d523ae45d88fc1395164a105a",
      "patch": "@@ -73,7 +73,9 @@ public Recon dup() {\n \t\t\r\n \t\tSystem.arraycopy(features, 0, r.features, 0, features.length);\r\n \t\t\r\n-\t\tr.candidates.addAll(candidates);\r\n+\t\tif (candidates != null) {\r\n+\t\t\tr.candidates = new ArrayList<ReconCandidate>(candidates);\r\n+\t\t}\r\n \t\tr.judgment = judgment;\r\n \t\tr.match = match;\r\n \t\treturn r;\r",
      "parent_sha": "ec1604e815e22200331fe3e6cddfdad5a149ee9f"
    }
  },
  {
    "oid": "800798ff5e4d9301c9382c5008f9b0d30f1baaa7",
    "message": "Ignore deprecated constraints. Closes #1772.",
    "date": "2018-10-27T19:47:35Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/800798ff5e4d9301c9382c5008f9b0d30f1baaa7",
    "details": {
      "sha": "cbe2aebc70035b01156dfe6e9fa9b92f14b30d1a",
      "filename": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/800798ff5e4d9301c9382c5008f9b0d30f1baaa7/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fqa%2FWikidataConstraintFetcher.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/800798ff5e4d9301c9382c5008f9b0d30f1baaa7/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fqa%2FWikidataConstraintFetcher.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fwikidata%2Fsrc%2Forg%2Fopenrefine%2Fwikidata%2Fqa%2FWikidataConstraintFetcher.java?ref=800798ff5e4d9301c9382c5008f9b0d30f1baaa7",
      "patch": "@@ -39,6 +39,7 @@\n import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n import org.wikidata.wdtk.datamodel.interfaces.Statement;\n import org.wikidata.wdtk.datamodel.interfaces.StatementGroup;\n+import org.wikidata.wdtk.datamodel.interfaces.StatementRank;\n import org.wikidata.wdtk.datamodel.interfaces.StringValue;\n import org.wikidata.wdtk.datamodel.interfaces.Value;\n \n@@ -290,7 +291,8 @@ protected List<SnakGroup> getSingleConstraint(PropertyIdValue pid, String qid) {\n      */\n     protected Stream<Statement> getConstraintsByType(PropertyIdValue pid, String qid) {\n         Stream<Statement> allConstraints = getConstraintStatements(pid).stream()\n-                .filter(s -> ((EntityIdValue) s.getValue()).getId().equals(qid));\n+                .filter(s -> s.getValue() != null && ((EntityIdValue) s.getValue()).getId().equals(qid))\n+                .filter(s -> !StatementRank.DEPRECATED.equals(s.getRank()));\n         return allConstraints;\n     }\n ",
      "parent_sha": "3fb282852d863aba4108f7e853f8adbab561f9af"
    }
  },
  {
    "oid": "ed724fd19172b3af84beb31802514c12b55a1cd2",
    "message": "Fix bug causing Fusion Table rows to get imported multiple times.  Initial implementation complete.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1895 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-11-18T08:19:57Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/ed724fd19172b3af84beb31802514c12b55a1cd2",
    "details": {
      "sha": "bc95a6eaeea8bdfca0d3a76c200b3b4f2633d7d2",
      "filename": "extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/ed724fd19172b3af84beb31802514c12b55a1cd2/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/ed724fd19172b3af84beb31802514c12b55a1cd2/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FGDataImporter.java?ref=ed724fd19172b3af84beb31802514c12b55a1cd2",
      "patch": "@@ -271,9 +271,9 @@ private void importFusionTable(URL url, Project project, int ignoreLines,\n                 } else {\n                     row.cells.add(null);\n                 }\n-                project.rows.add(row);\n-                values = getTableRow(scanner);\n             }\n+            project.rows.add(row);\n+            values = getTableRow(scanner);\n         }\n     }\n ",
      "parent_sha": "675714d03d9496a262c4be775dd2ebeec0ac762a"
    }
  },
  {
    "oid": "14ef45efb23cbbe2713aa662abf5b980b179d5ba",
    "message": "mock reconciliation service (#2410)",
    "date": "2020-03-14T09:40:15Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/14ef45efb23cbbe2713aa662abf5b980b179d5ba",
    "details": {
      "sha": "078d2648dadbffa514120cb31cec572737d6621f",
      "filename": "main/tests/server/src/com/google/refine/importers/WikitextImporterTests.java",
      "status": "modified",
      "additions": 82,
      "deletions": 1,
      "changes": 83,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/14ef45efb23cbbe2713aa662abf5b980b179d5ba/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FWikitextImporterTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/14ef45efb23cbbe2713aa662abf5b980b179d5ba/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FWikitextImporterTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FWikitextImporterTests.java?ref=14ef45efb23cbbe2713aa662abf5b980b179d5ba",
      "patch": "@@ -34,8 +34,16 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n package com.google.refine.importers;\n \n \n+import java.io.ByteArrayInputStream;\n+import java.io.OutputStream;\n import java.io.StringReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n \n+import com.google.refine.model.recon.StandardReconConfig;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n import org.slf4j.LoggerFactory;\n import org.testng.Assert;\n import org.testng.annotations.AfterMethod;\n@@ -45,6 +53,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n \n import com.google.refine.importers.WikitextImporter;\n \n+@PrepareForTest(StandardReconConfig.class)\n public class WikitextImporterTests extends ImporterTest {\n \n     private WikitextImporter importer = null;\n@@ -123,7 +132,79 @@ public void readTableWithMisplacedHeaders() {\n     }\n     \n     @Test\n-    public void readTableWithLinks() {\n+    public void readTableWithLinks() throws Exception {\n+        String result = \"{\\n\" +\n+                \"    \\\"q0\\\": {\\n\" +\n+                \"        \\\"result\\\": [\\n\" +\n+                \"            {\\n\" +\n+                \"                \\\"all_labels\\\": {\\n\" +\n+                \"                    \\\"score\\\": 100,\\n\" +\n+                \"                    \\\"weighted\\\": 100\\n\" +\n+                \"                },\\n\" +\n+                \"                \\\"score\\\": 100,\\n\" +\n+                \"                \\\"id\\\": \\\"Q116214\\\",\\n\" +\n+                \"                \\\"name\\\": \\\"European Centre for the Development of Vocational Training\\\",\\n\" +\n+                \"                \\\"type\\\": [\\n\" +\n+                \"                    {\\n\" +\n+                \"                        \\\"id\\\": \\\"Q392918\\\",\\n\" +\n+                \"                        \\\"name\\\": \\\"agency of the European Union\\\"\\n\" +\n+                \"                    }\\n\" +\n+                \"                ],\\n\" +\n+                \"                \\\"match\\\": true\\n\" +\n+                \"            }\\n\" +\n+                \"        ]\\n\" +\n+                \"    },\\n\" +\n+                \"    \\\"q1\\\": {\\n\" +\n+                \"        \\\"result\\\": [\\n\" +\n+                \"            {\\n\" +\n+                \"                \\\"all_labels\\\": {\\n\" +\n+                \"                    \\\"score\\\": 100,\\n\" +\n+                \"                    \\\"weighted\\\": 100\\n\" +\n+                \"                },\\n\" +\n+                \"                \\\"score\\\": 100,\\n\" +\n+                \"                \\\"id\\\": \\\"Q1377549\\\",\\n\" +\n+                \"                \\\"name\\\": \\\"European Foundation for the Improvement of Living and Working Conditions\\\",\\n\" +\n+                \"                \\\"type\\\": [\\n\" +\n+                \"                    {\\n\" +\n+                \"                        \\\"id\\\": \\\"Q392918\\\",\\n\" +\n+                \"                        \\\"name\\\": \\\"agency of the European Union\\\"\\n\" +\n+                \"                    }\\n\" +\n+                \"                ],\\n\" +\n+                \"                \\\"match\\\": true\\n\" +\n+                \"            }\\n\" +\n+                \"        ]\\n\" +\n+                \"    },\\n\" +\n+                \"    \\\"q2\\\": {\\n\" +\n+                \"        \\\"result\\\": [\\n\" +\n+                \"            {\\n\" +\n+                \"                \\\"all_labels\\\": {\\n\" +\n+                \"                    \\\"score\\\": 100,\\n\" +\n+                \"                    \\\"weighted\\\": 100\\n\" +\n+                \"                },\\n\" +\n+                \"                \\\"score\\\": 100,\\n\" +\n+                \"                \\\"id\\\": \\\"Q1377256\\\",\\n\" +\n+                \"                \\\"name\\\": \\\"European Monitoring Centre for Drugs and Drug Addiction\\\",\\n\" +\n+                \"                \\\"type\\\": [\\n\" +\n+                \"                    {\\n\" +\n+                \"                        \\\"id\\\": \\\"Q392918\\\",\\n\" +\n+                \"                        \\\"name\\\": \\\"agency of the European Union\\\"\\n\" +\n+                \"                    }\\n\" +\n+                \"                ],\\n\" +\n+                \"                \\\"match\\\": true\\n\" +\n+                \"            }\\n\" +\n+                \"        ]\\n\" +\n+                \"    }\\n\" +\n+                \"}\";\n+\n+        // This mock is used to avoid real network connection during test\n+        URL url = PowerMockito.mock(URL.class);\n+        HttpURLConnection connection = Mockito.mock(HttpURLConnection.class);\n+        Mockito.when(url.openConnection()).thenReturn(connection);\n+        OutputStream out = Mockito.mock(OutputStream.class);\n+        Mockito.when(connection.getOutputStream()).thenReturn(out); // avoid NullPointerException\n+        Mockito.when(connection.getInputStream()).thenReturn(new ByteArrayInputStream(result.getBytes()));\n+        PowerMockito.whenNew(URL.class).withAnyArguments().thenReturn(url);\n+\n         // Data credits: Wikipedia contributors, https://de.wikipedia.org/w/index.php?title=Agenturen_der_Europ\u00e4ischen_Union&action=edit\n         String input = \"\\n\"\n             +\"{|\\n\"",
      "parent_sha": "83d175be1bafa2b44875c6d8e940c4d5a2e39ef2"
    }
  },
  {
    "oid": "49564e8905bc48aa699cf2579267097f312c54f1",
    "message": "Fix bug when an extra column starts in the middle of the table",
    "date": "2017-09-19T12:54:27Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/49564e8905bc48aa699cf2579267097f312c54f1",
    "details": {
      "sha": "f1f202a70d03a2b682a9b21323d21b9df1582924",
      "filename": "main/src/com/google/refine/importers/WikitextImporter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/49564e8905bc48aa699cf2579267097f312c54f1/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FWikitextImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/49564e8905bc48aa699cf2579267097f312c54f1/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FWikitextImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FWikitextImporter.java?ref=49564e8905bc48aa699cf2579267097f312c54f1",
      "patch": "@@ -504,7 +504,7 @@ private void reconcileToQids(String wikiBaseUrl, StandardReconConfig cfg) {\n                 List<Recon> recons = new ArrayList<Recon>(rowSize);\n                 for (int j = 0; j < rowSize; j++) {\n                     recons.add(null);\n-                    if (i == 0)\n+                    if (j >= columnReconciled.size())\n                         columnReconciled.add(false);\n                 }\n                 reconList.add(recons);",
      "parent_sha": "94857660a8aa55d20f1eeed816494f5f5e663a27"
    }
  },
  {
    "oid": "37a6f938c339152e9214758154d71b86b923d178",
    "message": "The TestNG DataProvider for the Tsv/Csv importer tests was previously providing just one test case with two parameters, rather than the two test cases of one parameter each which is required.  This is now fixed, and the tests pass.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1855 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-11-11T10:52:18Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/37a6f938c339152e9214758154d71b86b923d178",
    "details": {
      "sha": "3942f0b416be77379b94ddbba642c0a85321440b",
      "filename": "main/tests/server/src/com/google/refine/tests/importers/TsvCsvImporterTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/37a6f938c339152e9214758154d71b86b923d178/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/37a6f938c339152e9214758154d71b86b923d178/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fimporters%2FTsvCsvImporterTests.java?ref=37a6f938c339152e9214758154d71b86b923d178",
      "patch": "@@ -558,10 +558,9 @@ public void readCsvWithPropertiesIgnoreQuotes(){\n      */\n     @DataProvider(name = \"CSV-or-null\")\n     public Object[][] CSV_or_null(){\n-        return new Object[][]{{\n-                \",\",\n-                null\n-        }};\n+        return new Object[][]{\n+                {\",\"},{null}\n+        };\n     }\n \n     public void whenGetBooleanOption(String name, Properties properties, Boolean def){",
      "parent_sha": "703d2dbd198046ccac95509143b75a187f9089f8"
    }
  },
  {
    "oid": "e5c6dda178da19b33dd856477a4d1ee68d470ce7",
    "message": "Fixed Issue-116\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1243 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-08-31T19:33:05Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/e5c6dda178da19b33dd856477a4d1ee68d470ce7",
    "details": {
      "sha": "9fb1d0846235b2a139ee8decab37c2fd1a293160",
      "filename": "main/src/com/google/gridworks/exporters/CsvExporter.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/e5c6dda178da19b33dd856477a4d1ee68d470ce7/main%2Fsrc%2Fcom%2Fgoogle%2Fgridworks%2Fexporters%2FCsvExporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/e5c6dda178da19b33dd856477a4d1ee68d470ce7/main%2Fsrc%2Fcom%2Fgoogle%2Fgridworks%2Fexporters%2FCsvExporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Fgridworks%2Fexporters%2FCsvExporter.java?ref=e5c6dda178da19b33dd856477a4d1ee68d470ce7",
      "patch": "@@ -56,8 +56,10 @@ public RowVisitor init(CSVWriter writer, boolean printColumnHeader) {\n             }\r\n \r\n             public boolean visit(Project project, int rowIndex, Row row) {\r\n-                String[] cols = new String[project.columnModel.columns.size()];\r\n-                String[] vals = new String[row.cells.size()];\r\n+                int size = project.columnModel.columns.size();\r\n+\r\n+                String[] cols = new String[size];\r\n+                String[] vals = new String[size];\r\n \r\n                 int i = 0;\r\n                 for (Column col : project.columnModel.columns) {\r",
      "parent_sha": "7df259008bb7639a5a5e38f63f200548ece95cef"
    }
  },
  {
    "oid": "d85ae8c28c947f48db3d5014ab2f12e7f014e911",
    "message": "Fixed bug in protograph transposer in which cells in subsequent rows of a tree-shaped record (with blank context cells) are not processed. This bug was introduced when we started to allow a protograph node to correspond to more than one column.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1621 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-10-22T21:05:06Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/d85ae8c28c947f48db3d5014ab2f12e7f014e911",
    "details": {
      "sha": "21da72c1ae9aea9900982d663d1ee26fa2c5e0e4",
      "filename": "extensions/freebase/src/com/google/refine/freebase/protograph/transpose/Transposer.java",
      "status": "modified",
      "additions": 97,
      "deletions": 48,
      "changes": 145,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/d85ae8c28c947f48db3d5014ab2f12e7f014e911/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTransposer.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/d85ae8c28c947f48db3d5014ab2f12e7f014e911/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTransposer.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Ffreebase%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ffreebase%2Fprotograph%2Ftranspose%2FTransposer.java?ref=d85ae8c28c947f48db3d5014ab2f12e7f014e911",
      "patch": "@@ -132,7 +132,6 @@ static protected void descend(\n     ) {\n         List<TransposedNode> tnodes = new LinkedList<TransposedNode>();\n         \n-        TransposedNode parentNode = context.parent == null ? null : context.parent.transposedNode;\n         Link link = context.parent == null ? null : context.link;\n         \n         if (node instanceof CellNode) {\n@@ -144,6 +143,7 @@ static protected void descend(\n                     \n                     Cell cell = row.getCell(cellIndex);\n                     if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {\n+                        System.err.println(\"row \" + rowIndex + \" non-blank column \" + columnName);\n                         if (node2 instanceof CellTopicNode &&\n                             (cell.recon == null || cell.recon.judgment == Judgment.None)) {\n                                 return;\n@@ -154,75 +154,124 @@ static protected void descend(\n                             return;\n                         }\n                         \n-                        tnodes.add(nodeFactory.transposeCellNode(\n-                            parentNode,\n-                            link,\n-                            node2, \n-                            rowIndex,\n-                            cellIndex,\n-                            cell\n-                        ));\n+                        if (context.parent == null) {\n+                            tnodes.add(nodeFactory.transposeCellNode(\n+                                null,\n+                                link,\n+                                node2, \n+                                rowIndex,\n+                                cellIndex,\n+                                cell\n+                            ));\n+                        } else {\n+                            for (TransposedNode parentNode : context.parent.transposedNodes) {\n+                                tnodes.add(nodeFactory.transposeCellNode(\n+                                    parentNode,\n+                                    link,\n+                                    node2, \n+                                    rowIndex,\n+                                    cellIndex,\n+                                    cell\n+                                ));\n+                            }\n+                        }\n+                    } else {\n+                        System.err.println(\"row \" + rowIndex + \" blank column \" + columnName);\n                     }\n                 }\n             }\n         } else {\n             if (node instanceof AnonymousNode) {\n-                tnodes.add(nodeFactory.transposeAnonymousNode(\n-                    parentNode,\n-                    link,\n-                    (AnonymousNode) node,\n-                    rowIndex\n-                ));\n+                if (context.parent == null) {\n+                    tnodes.add(nodeFactory.transposeAnonymousNode(\n+                        null,\n+                        link,\n+                        (AnonymousNode) node,\n+                        rowIndex\n+                    ));\n+                } else {\n+                    for (TransposedNode parentNode : context.parent.transposedNodes) {\n+                        tnodes.add(nodeFactory.transposeAnonymousNode(\n+                            parentNode,\n+                            link,\n+                            (AnonymousNode) node,\n+                            rowIndex\n+                        ));\n+                    }\n+                }\n             } else if (node instanceof FreebaseTopicNode) {\n-                tnodes.add(nodeFactory.transposeTopicNode(\n-                    parentNode,\n-                    link,\n-                    (FreebaseTopicNode) node,\n-                    rowIndex\n-                ));\n+                if (context.parent == null) {\n+                    tnodes.add(nodeFactory.transposeTopicNode(\n+                        null,\n+                        link,\n+                        (FreebaseTopicNode) node,\n+                        rowIndex\n+                    ));\n+                } else {\n+                    for (TransposedNode parentNode : context.parent.transposedNodes) {\n+                        tnodes.add(nodeFactory.transposeTopicNode(\n+                            parentNode,\n+                            link,\n+                            (FreebaseTopicNode) node,\n+                            rowIndex\n+                        ));\n+                    }\n+                }\n             } else if (node instanceof ValueNode) {\n-                tnodes.add(nodeFactory.transposeValueNode(\n-                    parentNode,\n-                    link,\n-                    (ValueNode) node,\n-                    rowIndex\n-                ));\n+                if (context.parent == null) {\n+                    tnodes.add(nodeFactory.transposeValueNode(\n+                        null,\n+                        link,\n+                        (ValueNode) node,\n+                        rowIndex\n+                    ));\n+                } else {\n+                    for (TransposedNode parentNode : context.parent.transposedNodes) {\n+                        tnodes.add(nodeFactory.transposeValueNode(\n+                            parentNode,\n+                            link,\n+                            (ValueNode) node,\n+                            rowIndex\n+                        ));\n+                    }\n+                }\n             }\n         }\n         \n+        if (tnodes.size() > 0) {\n+            context.transposedNodes.clear();\n+            context.transposedNodes.addAll(tnodes);\n+        }\n+        \n         if (node instanceof NodeWithLinks) {\n             NodeWithLinks node2 = (NodeWithLinks) node;\n             int linkCount = node2.getLinkCount();\n             \n             for (int i = 0; i < linkCount; i++) {\n                 Link link2 = node2.getLink(i);\n                 if (link2.condition == null || link2.condition.test(project, rowIndex, row)) {\n-                    for (TransposedNode tnode : tnodes) {\n-                        context.transposedNode = tnode;\n-                        context.nullifySubContextNodes();\n-\n-                        descend(\n-                            project, \n-                            protograph, \n-                            nodeFactory,\n-                            rowIndex,\n-                            row, \n-                            link2.getTarget(), \n-                            context.subContexts.get(i)\n-                        );\n-                    }\n+                    System.err.println(\"  row \" + rowIndex + \" descend \" + link2.property.id);\n+                    descend(\n+                        project, \n+                        protograph, \n+                        nodeFactory,\n+                        rowIndex,\n+                        row, \n+                        link2.getTarget(), \n+                        context.subContexts.get(i)\n+                    );\n                 }\n             }\n         }\n     }\n     \n     static class Context {\n-        TransposedNode    transposedNode;\n-        List<Context>     subContexts;\n-        Context           parent;\n-        Link              link;\n-        int               count;\n-        int               limit;\n+        List<TransposedNode>    transposedNodes = new LinkedList<TransposedNode>();\n+        List<Context>           subContexts;\n+        Context                 parent;\n+        Link                    link;\n+        int                     count;\n+        int                     limit;\n         \n         Context(Node node, Context parent, Link link, int limit) {\n             this.parent = parent;\n@@ -246,7 +295,7 @@ static class Context {\n         public void nullifySubContextNodes() {\n             if (subContexts != null) {\n                 for (Context context : subContexts) {\n-                    context.transposedNode = null;\n+                    context.transposedNodes.clear();\n                     context.nullifySubContextNodes();\n                 }\n             }",
      "parent_sha": "460d01230be8219bf3c6317d7b70c63eaa5c73b2"
    }
  },
  {
    "oid": "7578d3375fb51fd80518bf207d155b0137e95be6",
    "message": "Add logger and logging\n- fix exception printing that goes nowhere\n- make logger available for subclasses to use",
    "date": "2013-03-11T17:14:20Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/7578d3375fb51fd80518bf207d155b0137e95be6",
    "details": {
      "sha": "9ce95a66ad3a2453b4aa373f204cf889ff570ab0",
      "filename": "main/src/com/google/refine/model/recon/ReconConfig.java",
      "status": "modified",
      "additions": 132,
      "deletions": 128,
      "changes": 260,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/7578d3375fb51fd80518bf207d155b0137e95be6/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Frecon%2FReconConfig.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/7578d3375fb51fd80518bf207d155b0137e95be6/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Frecon%2FReconConfig.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fmodel%2Frecon%2FReconConfig.java?ref=7578d3375fb51fd80518bf207d155b0137e95be6",
      "patch": "@@ -1,128 +1,132 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.model.recon;\n-\n-import java.io.Writer;\n-import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n-import org.json.JSONException;\n-import org.json.JSONObject;\n-import org.json.JSONWriter;\n-\n-import com.google.refine.Jsonizable;\n-import com.google.refine.model.Cell;\n-import com.google.refine.model.Project;\n-import com.google.refine.model.Recon;\n-import com.google.refine.model.Row;\n-\n-import edu.mit.simile.butterfly.ButterflyModule;\n-\n-abstract public class ReconConfig implements Jsonizable {\n-    static final public Map<String, List<Class<? extends ReconConfig>>> s_opNameToClass =\n-        new HashMap<String, List<Class<? extends ReconConfig>>>();\n-    \n-    static final public Map<Class<? extends ReconConfig>, String> s_opClassToName =\n-        new HashMap<Class<? extends ReconConfig>, String>();\n-    \n-    static public void registerReconConfig(ButterflyModule module, String name, Class<? extends ReconConfig> klass) {\n-        String key = module.getName() + \"/\" + name;\n-        \n-        s_opClassToName.put(klass, key);\n-        \n-        List<Class<? extends ReconConfig>> classes = s_opNameToClass.get(key);\n-        if (classes == null) {\n-            classes = new LinkedList<Class<? extends ReconConfig>>();\n-            s_opNameToClass.put(key, classes);\n-        }\n-        classes.add(klass);\n-    }\n-    \n-    static public ReconConfig reconstruct(JSONObject obj) throws Exception {\n-        try {\n-            String mode = obj.getString(\"mode\");\n-            \n-            // Backward compatibility\n-            if (\"extend\".equals(mode) || \"strict\".equals(mode)) {\n-                mode = \"freebase/\" + mode;\n-            } else if (\"heuristic\".equals(mode)) {\n-                mode = \"core/standard-service\"; // legacy\n-            } else if (!mode.contains(\"/\")) {\n-                mode = \"core/\" + mode;\n-            }\n-            \n-            List<Class<? extends ReconConfig>> classes = s_opNameToClass.get(mode);\n-            if (classes != null && classes.size() > 0) {\n-                Class<? extends ReconConfig> klass = classes.get(classes.size() - 1);\n-                \n-                Method reconstruct = klass.getMethod(\"reconstruct\", JSONObject.class);\n-                if (reconstruct != null) {\n-                    return (ReconConfig) reconstruct.invoke(null, obj);\n-                }\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        return null;\n-    }\n-    \n-    abstract public int getBatchSize();\n-    \n-    abstract public String getBriefDescription(Project project, String columnName);\n-    \n-    abstract public ReconJob createJob(\n-        Project     project, \n-        int         rowIndex, \n-        Row         row,\n-        String      columnName,\n-        Cell        cell\n-    );\n-    \n-    abstract public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID);\n-    \n-    abstract public Recon createNewRecon(long historyEntryID);\n-    \n-    public void save(Writer writer) {\n-        JSONWriter jsonWriter = new JSONWriter(writer);\n-        try {\n-            write(jsonWriter, new Properties());\n-        } catch (JSONException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-}\n+/*\r\n+\r\n+Copyright 2010, Google Inc.\r\n+All rights reserved.\r\n+\r\n+Redistribution and use in source and binary forms, with or without\r\n+modification, are permitted provided that the following conditions are\r\n+met:\r\n+\r\n+    * Redistributions of source code must retain the above copyright\r\n+notice, this list of conditions and the following disclaimer.\r\n+    * Redistributions in binary form must reproduce the above\r\n+copyright notice, this list of conditions and the following disclaimer\r\n+in the documentation and/or other materials provided with the\r\n+distribution.\r\n+    * Neither the name of Google Inc. nor the names of its\r\n+contributors may be used to endorse or promote products derived from\r\n+this software without specific prior written permission.\r\n+\r\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \r\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \r\n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+\r\n+*/\r\n+\r\n+package com.google.refine.model.recon;\r\n+\r\n+import java.io.Writer;\r\n+import java.lang.reflect.Method;\r\n+import java.util.HashMap;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Properties;\r\n+\r\n+import org.json.JSONException;\r\n+import org.json.JSONObject;\r\n+import org.json.JSONWriter;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.refine.Jsonizable;\r\n+import com.google.refine.model.Cell;\r\n+import com.google.refine.model.Project;\r\n+import com.google.refine.model.Recon;\r\n+import com.google.refine.model.Row;\r\n+\r\n+import edu.mit.simile.butterfly.ButterflyModule;\r\n+\r\n+abstract public class ReconConfig implements Jsonizable {\r\n+    final static protected Logger LOGGER = LoggerFactory.getLogger(\"recon-config\");\r\n+\r\n+    static final public Map<String, List<Class<? extends ReconConfig>>> s_opNameToClass =\r\n+        new HashMap<String, List<Class<? extends ReconConfig>>>();\r\n+    \r\n+    static final public Map<Class<? extends ReconConfig>, String> s_opClassToName =\r\n+        new HashMap<Class<? extends ReconConfig>, String>();\r\n+    \r\n+    static public void registerReconConfig(ButterflyModule module, String name, Class<? extends ReconConfig> klass) {\r\n+        String key = module.getName() + \"/\" + name;\r\n+        \r\n+        s_opClassToName.put(klass, key);\r\n+        \r\n+        List<Class<? extends ReconConfig>> classes = s_opNameToClass.get(key);\r\n+        if (classes == null) {\r\n+            classes = new LinkedList<Class<? extends ReconConfig>>();\r\n+            s_opNameToClass.put(key, classes);\r\n+        }\r\n+        classes.add(klass);\r\n+    }\r\n+    \r\n+    static public ReconConfig reconstruct(JSONObject obj) throws Exception {\r\n+        try {\r\n+            String mode = obj.getString(\"mode\");\r\n+            \r\n+            // Backward compatibility\r\n+            if (\"extend\".equals(mode) || \"strict\".equals(mode)) {\r\n+                mode = \"freebase/\" + mode;\r\n+            } else if (\"heuristic\".equals(mode)) {\r\n+                mode = \"core/standard-service\"; // legacy\r\n+            } else if (!mode.contains(\"/\")) {\r\n+                mode = \"core/\" + mode;\r\n+            }\r\n+            \r\n+            List<Class<? extends ReconConfig>> classes = s_opNameToClass.get(mode);\r\n+            if (classes != null && classes.size() > 0) {\r\n+                Class<? extends ReconConfig> klass = classes.get(classes.size() - 1);\r\n+                \r\n+                Method reconstruct = klass.getMethod(\"reconstruct\", JSONObject.class);\r\n+                if (reconstruct != null) {\r\n+                    return (ReconConfig) reconstruct.invoke(null, obj);\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            LOGGER.error(\"Reconstruct failed\",e);\r\n+        }\r\n+        return null;\r\n+    }\r\n+    \r\n+    abstract public int getBatchSize();\r\n+    \r\n+    abstract public String getBriefDescription(Project project, String columnName);\r\n+    \r\n+    abstract public ReconJob createJob(\r\n+        Project     project, \r\n+        int         rowIndex, \r\n+        Row         row,\r\n+        String      columnName,\r\n+        Cell        cell\r\n+    );\r\n+    \r\n+    abstract public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID);\r\n+    \r\n+    abstract public Recon createNewRecon(long historyEntryID);\r\n+    \r\n+    public void save(Writer writer) {\r\n+        JSONWriter jsonWriter = new JSONWriter(writer);\r\n+        try {\r\n+            write(jsonWriter, new Properties());\r\n+        } catch (JSONException e) {\r\n+           LOGGER.error(\"Save failed\",e);\r\n+        }\r\n+    }\r\n+}\r",
      "parent_sha": "a2a8f4af2e3ce8b543274f1ac99d10494557c5c1"
    }
  },
  {
    "oid": "c94957b6a01d3a9346616c4bbd55e952312c6ab2",
    "message": "CreateProjectCommand no longer contains references to project.html, a file previously removed from the project.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@971 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-06-15T20:28:18Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/c94957b6a01d3a9346616c4bbd55e952312c6ab2",
    "details": {
      "sha": "80c3e13da723caf237c0742460047b8d91161b0c",
      "filename": "main/src/com/metaweb/gridworks/commands/project/CreateProjectCommand.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/c94957b6a01d3a9346616c4bbd55e952312c6ab2/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/c94957b6a01d3a9346616c4bbd55e952312c6ab2/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2Fcommands%2Fproject%2FCreateProjectCommand.java?ref=c94957b6a01d3a9346616c4bbd55e952312c6ab2",
      "patch": "@@ -152,7 +152,7 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n \n             project.update();\n \n-            redirect(response, \"/project.html?project=\" + project.id);\n+            redirect(response, \"/project?project=\" + project.id);\n         } catch (Exception e) {\n             redirect(response, \"/error.html?redirect=index.html&msg=\" +\n                 ParsingUtilities.encode(\"Failed to import file: \" + e.getLocalizedMessage())",
      "parent_sha": "dc7060d39035b9e691071858023e19dbcd9ca755"
    }
  },
  {
    "oid": "a42925f3c8759df9a4b842072e3071c97f57fe10",
    "message": "Remove unused code",
    "date": "2013-06-23T15:21:48Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/a42925f3c8759df9a4b842072e3071c97f57fe10",
    "details": {
      "sha": "639b471acac670e54723afca1a862755dc5eeeb8",
      "filename": "main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/a42925f3c8759df9a4b842072e3071c97f57fe10/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FCacheTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/a42925f3c8759df9a4b842072e3071c97f57fe10/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FCacheTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fmodel%2FCacheTests.java?ref=a42925f3c8759df9a4b842072e3071c97f57fe10",
      "patch": "@@ -36,7 +36,6 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import static org.mockito.Mockito.mock;\n \n import java.io.IOException;\n-import java.io.StringWriter;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Properties;\n@@ -85,7 +84,6 @@ public void init() {\n     }\n \n     // dependencies\n-    StringWriter writer;\n     Project project;\n     Properties options;\n     JSONObject engine_config;\n@@ -94,8 +92,6 @@ public void init() {\n \n     @BeforeMethod\n     public void SetUp() throws JSONException, IOException, ModelException {\n-        writer = new StringWriter();\n-        \n         Path dir = Files.createTempDirectory(\"openrefine-test-workspace-dir\");\n         FileProjectManager.initialize(dir.toFile());\n         project = new Project();\n@@ -121,9 +117,10 @@ public void SetUp() throws JSONException, IOException, ModelException {\n \n     @AfterMethod\n     public void TearDown() {\n-        writer = null;\n         project = null;\n         options = null;\n+        engine = null;\n+        bindings = null;\n     }\n \n     /**",
      "parent_sha": "c961bb64de34079c36b91fefb411b9ea3d2f2cdf"
    }
  },
  {
    "oid": "7593d5484d1f7d69dc65385b9d6b91c9b0f39a22",
    "message": "Add Hyperlink to cell in Excel importer, with fallback to String, for #2213",
    "date": "2019-12-25T21:24:58Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/7593d5484d1f7d69dc65385b9d6b91c9b0f39a22",
    "details": {
      "sha": "461cc9f289c4f28a6370826b268a97126fabd34a",
      "filename": "main/src/com/google/refine/exporters/XlsExporter.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/7593d5484d1f7d69dc65385b9d6b91c9b0f39a22/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/7593d5484d1f7d69dc65385b9d6b91c9b0f39a22/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexporters%2FXlsExporter.java?ref=7593d5484d1f7d69dc65385b9d6b91c9b0f39a22",
      "patch": "@@ -39,7 +39,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import java.util.List;\n import java.util.Properties;\n \n-import org.apache.poi.common.usermodel.Hyperlink;\n+import org.apache.poi.ss.usermodel.Hyperlink;\n import org.apache.poi.common.usermodel.HyperlinkType;\n import org.apache.poi.hssf.usermodel.HSSFWorkbook;\n import org.apache.poi.ss.usermodel.Cell;\n@@ -127,9 +127,15 @@ public void addRow(List<CellData> cells, boolean isHeader) {\n                             }\n                             \n                             if (cellData.link != null) {\n-                                Hyperlink hl = wb.getCreationHelper().createHyperlink(HyperlinkType.URL);\n-                                hl.setLabel(cellData.text);\n-                                hl.setAddress(cellData.link);\n+                            \ttry {\n+                            \t\tHyperlink hl = wb.getCreationHelper().createHyperlink(HyperlinkType.URL);\n+                            \t\thl.setLabel(cellData.text);\n+                            \t\thl.setAddress(cellData.link);\n+                            \t\tc.setHyperlink(hl);\n+                            \t} catch(IllegalArgumentException e) {\n+                            \t\t// If we failed to create the hyperlink and add it to the cell,\n+                            \t\t// we just use the string value as fallback\n+                            \t}\n                             }\n                         }\n                     }",
      "parent_sha": "78853f8fb22b4ae31de7f7c606de87c03ee2e901"
    }
  },
  {
    "oid": "16b0453b74648bf3e7705a994860f75d2a0a891a",
    "message": "Update ToDate.java\n\nUpdating SimpleDateFormat api doc url for ToDate function.",
    "date": "2015-11-13T19:27:16Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/16b0453b74648bf3e7705a994860f75d2a0a891a",
    "details": {
      "sha": "7b2abb88c3640b6e713b622764f97a810e057a5d",
      "filename": "main/src/com/google/refine/expr/functions/ToDate.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/16b0453b74648bf3e7705a994860f75d2a0a891a/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToDate.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/16b0453b74648bf3e7705a994860f75d2a0a891a/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToDate.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToDate.java?ref=16b0453b74648bf3e7705a994860f75d2a0a891a",
      "patch": "@@ -178,7 +178,7 @@ public void write(JSONWriter writer, Properties options)\n     throws JSONException {\n \n         writer.object();\n-        writer.key(\"description\"); writer.value(\"Returns o converted to a date object, you can hint if the day or the month is listed first, or give an ordered list of possible formats using this syntax: http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html\");\n+        writer.key(\"description\"); writer.value(\"Returns o converted to a date object, you can hint if the day or the month is listed first, or give an ordered list of possible formats using this syntax: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\");\n         writer.key(\"params\"); writer.value(\"o, boolean month_first / format1, format2, ... (all optional)\");\n         writer.key(\"returns\"); writer.value(\"date\");\n         writer.endObject();",
      "parent_sha": "9c5377e820d017c835fd69a13b3d762a0837ec73"
    }
  },
  {
    "oid": "ce79221f12d33196d0d35a6150d9e29aa76a1e6f",
    "message": "InterruptedException Ignored When Stopping the Servlet (#4734)\n\nFixes #4694.\r\n\r\nCo-authored-by: Antonin Delpeuch <antonin@delpeuch.eu>",
    "date": "2022-04-12T16:29:32Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/ce79221f12d33196d0d35a6150d9e29aa76a1e6f",
    "details": {
      "sha": "6b1927bbf4e81a6de18742b8c8a8940964a1b84b",
      "filename": "server/src/com/google/refine/Refine.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/ce79221f12d33196d0d35a6150d9e29aa76a1e6f/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/ce79221f12d33196d0d35a6150d9e29aa76a1e6f/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java?ref=ce79221f12d33196d0d35a6150d9e29aa76a1e6f",
      "patch": "@@ -249,11 +249,12 @@ protected void doStop() throws Exception {\n                 threadPool.shutdown();\n             }\n             Thread.sleep(3000);\n-            // then let the parent stop\n-            super.doStop();\n         } catch (InterruptedException e) {\n-            // ignore\n+            // stop current thread\n+            Thread.currentThread().interrupt();\n         }\n+        // then let the parent stop\n+        super.doStop();\n     }\n         \n     static private boolean isWebapp(File dir) {",
      "parent_sha": "386e1d90428e83cfbaef921753cfbc1c5d46435b"
    }
  },
  {
    "oid": "a8ccdd07392d7d239b8bb64c0989a02ebda70fe3",
    "message": "Added system property refine.max_form_content_size\n\nTo allow configuring the maximum allowed form content size in Jetty.",
    "date": "2014-05-16T12:37:24Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/a8ccdd07392d7d239b8bb64c0989a02ebda70fe3",
    "details": {
      "sha": "a5aa349b9b13c68cb5797757713c02e08fa37dff",
      "filename": "server/src/com/google/refine/Refine.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/a8ccdd07392d7d239b8bb64c0989a02ebda70fe3/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/a8ccdd07392d7d239b8bb64c0989a02ebda70fe3/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/server%2Fsrc%2Fcom%2Fgoogle%2Frefine%2FRefine.java?ref=a8ccdd07392d7d239b8bb64c0989a02ebda70fe3",
      "patch": "@@ -182,10 +182,11 @@ public void init(String host, int port) throws Exception {\n         }\n \n         final String contextPath = Configurations.get(\"refine.context_path\",\"/\");\n+        final int maxFormContentSize = Configurations.getInteger(\"refine.max_form_content_size\", 1048576);\n         \n         logger.info(\"Initializing context: '\" + contextPath + \"' from '\" + webapp.getAbsolutePath() + \"'\");\n         WebAppContext context = new WebAppContext(webapp.getAbsolutePath(), contextPath);\n-        context.setMaxFormContentSize(1048576);\n+        context.setMaxFormContentSize(maxFormContentSize);\n \n         this.setHandler(context);\n         this.setStopAtShutdown(true);",
      "parent_sha": "8330e9c474d03e24bff5e54e479fbf67b4e8015d"
    }
  },
  {
    "oid": "57c11d023829e6f77b5d60de6b957cc49205fa35",
    "message": "Fixed issue 442: Two column transforms to date on the same column turns the cells blank\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2230 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2011-09-01T22:11:45Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/57c11d023829e6f77b5d60de6b957cc49205fa35",
    "details": {
      "sha": "1058441d14d7f42373364a14246631406aec1904",
      "filename": "main/src/com/google/refine/expr/functions/ToDate.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/57c11d023829e6f77b5d60de6b957cc49205fa35/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToDate.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/57c11d023829e6f77b5d60de6b957cc49205fa35/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToDate.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2FToDate.java?ref=57c11d023829e6f77b5d60de6b957cc49205fa35",
      "patch": "@@ -34,6 +34,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n package com.google.refine.expr.functions;\n \n import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.Properties;\n@@ -53,11 +54,16 @@ public Object call(Properties bindings, Object[] args) {\n             // missing value, can this happen?\n             return null;\n         }\n-        if (!(args[0] instanceof String)) {\n+        Object arg0 = args[0];\n+        if (arg0 instanceof Date) {\n+            return arg0;\n+        } else if (arg0 instanceof Calendar) {\n+            return ((Calendar) arg0).getTime();\n+        } else if (!(arg0 instanceof String)) {\n             // ignore cell values that aren't strings\n             return null;\n         }\n-        String o1 = (String) args[0];\n+        String o1 = (String) arg0;\n \n         // \"o, boolean month_first (optional)\"\n         if (args.length == 1 || (args.length == 2 && args[1] instanceof Boolean)) {",
      "parent_sha": "98c268d9f7863aef2380d4243403a74446c5407f"
    }
  },
  {
    "oid": "513283d4d128a67d2c78d3e6e85afbe2c6559d5f",
    "message": "Support creation of cache directories, so the rdf importer can store its lucene indexes.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1090 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-07-08T23:22:29Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/513283d4d128a67d2c78d3e6e85afbe2c6559d5f",
    "details": {
      "sha": "82bc51089576877eeba0935c6100375d23d6cca9",
      "filename": "main/src/com/metaweb/gridworks/GridworksServlet.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/513283d4d128a67d2c78d3e6e85afbe2c6559d5f/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2FGridworksServlet.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/513283d4d128a67d2c78d3e6e85afbe2c6559d5f/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2FGridworksServlet.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fmetaweb%2Fgridworks%2FGridworksServlet.java?ref=513283d4d128a67d2c78d3e6e85afbe2c6559d5f",
      "patch": "@@ -29,6 +29,7 @@ public class GridworksServlet extends Butterfly {\n     private static final String JAVAX_SERVLET_CONTEXT_TEMPDIR = \"javax.servlet.context.tempdir\";\n \n     static private GridworksServlet s_singleton;\n+    static private File             s_dataDir;\n     \n     static final private Map<String, Command> commands = new HashMap<String, Command>();\n \n@@ -153,7 +154,8 @@ public void init() throws ServletException {\n \n         registerCommands(commandNames);\n \n-        FileProjectManager.initialize(new File(data));\n+        s_dataDir = new File(data);\n+        FileProjectManager.initialize(s_dataDir);\n \n         if (_timer == null) {\n             _timer = new Timer(\"autosave\");\n@@ -233,6 +235,13 @@ public File getTempDir() {\n     public File getTempFile(String name) {\n         return new File(getTempDir(), name);\n     }\n+    \n+    public File getCacheDir(String name) {\n+        File dir = new File(new File(s_dataDir, \"cache\"), name);\n+        dir.mkdirs();\n+        \n+        return dir;\n+    }\n \n     public String getConfiguration(String name, String def) {\n         return null;",
      "parent_sha": "89d3a2a16519f517101aa9fc40021955d66e80d0"
    }
  },
  {
    "oid": "7ba110e31a61a874529051b60f75d3a2290ca70b",
    "message": "More succinct return statements",
    "date": "2017-11-14T17:40:07Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/7ba110e31a61a874529051b60f75d3a2290ca70b",
    "details": {
      "sha": "498534ec417302fc7ed9a8baed3a964f51091a74",
      "filename": "main/src/com/google/refine/browsing/filters/ExpressionStringComparisonRowFilter.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/7ba110e31a61a874529051b60f75d3a2290ca70b/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fbrowsing%2Ffilters%2FExpressionStringComparisonRowFilter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/7ba110e31a61a874529051b60f75d3a2290ca70b/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fbrowsing%2Ffilters%2FExpressionStringComparisonRowFilter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fbrowsing%2Ffilters%2FExpressionStringComparisonRowFilter.java?ref=7ba110e31a61a874529051b60f75d3a2290ca70b",
      "patch": "@@ -76,37 +76,37 @@ public boolean filterRow(Project project, int rowIndex, Row row) {\n                 Object[] a = (Object[]) value;\n                 for (Object v : a) {\n                     if (checkValue(v instanceof String ? ((String) v) : v.toString())) {\n-                        return (invert) ? false : true;\n+                        return !invert;\n                     }\n                 }\n             } else if (value instanceof Collection<?>) {\n                 for (Object v : ExpressionUtils.toObjectCollection(value)) {\n                     if (checkValue(v.toString())) {\n-                        return (invert) ? false : true;\n+                        return !invert;\n                     }\n                 }\n-                return (invert) ? true : false;\n+                return invert;\n             } else if (value instanceof JSONArray) {\n                 JSONArray a = (JSONArray) value;\n                 int l = a.length();\n                 \n                 for (int i = 0; i < l; i++) {\n                     try {\n                         if (checkValue(a.get(i).toString())) {\n-                            return (invert) ? false : true;\n+                            return !invert;\n                         }\n                     } catch (JSONException e) {\n                         // ignore\n                     }\n                 }\n-                return (invert) ? true : false;\n+                return invert;\n             } else {\n                 if (checkValue(value instanceof String ? ((String) value) : value.toString())) {\n-                    return (invert) ? false : true;\n+                    return !invert;\n                 }\n             }\n         }\n-        return (invert) ? true : false;\n+        return invert;\n     }\n     \n     abstract protected boolean checkValue(String s);",
      "parent_sha": "25dd347123e346cd75a5139e42b9c843aea2a4f1"
    }
  },
  {
    "oid": "28ff2295fd290089b9cb31f1dd84a3435b2230dd",
    "message": "Issue 490 - Handle separator guessing for CSVs with quoted fields containing commas\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@2458 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2012-03-08T15:53:55Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/28ff2295fd290089b9cb31f1dd84a3435b2230dd",
    "details": {
      "sha": "cd28d92bfdb58bc1ca3bccb8a0114ce452291d4c",
      "filename": "main/src/com/google/refine/importers/SeparatorBasedImporter.java",
      "status": "modified",
      "additions": 21,
      "deletions": 10,
      "changes": 31,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/28ff2295fd290089b9cb31f1dd84a3435b2230dd/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FSeparatorBasedImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/28ff2295fd290089b9cb31f1dd84a3435b2230dd/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FSeparatorBasedImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2FSeparatorBasedImporter.java?ref=28ff2295fd290089b9cb31f1dd84a3435b2230dd",
      "patch": "@@ -146,7 +146,8 @@ static public String guessSeparator(ImportingJob job, List<JSONObject> fileRecor\n             \n             if (location != null) {\n                 File file = new File(job.getRawDataDir(), location);\n-                Separator separator = guessSeparator(file, encoding);\n+                // Quotes are turned on by default, so use that for guessing\n+                Separator separator = guessSeparator(file, encoding, true);\n                 if (separator != null) {\n                     return StringEscapeUtils.escapeJava(Character.toString(separator.separator));\n                 }\n@@ -164,8 +165,12 @@ static public class Separator {\n         double averagePerLine;\n         double stddev;\n     }\n-    \n+\n     static public Separator guessSeparator(File file, String encoding) {\n+        return guessSeparator(file, encoding, false); // quotes off for backward compatibility\n+    }\n+\n+    static public Separator guessSeparator(File file, String encoding, boolean handleQuotes) {\n         try {\n             InputStream is = new FileInputStream(file);\n             Reader reader = encoding != null ? new InputStreamReader(is, encoding) : new InputStreamReader(is);\n@@ -175,23 +180,28 @@ static public Separator guessSeparator(File file, String encoding) {\n                 List<Separator> separators = new ArrayList<SeparatorBasedImporter.Separator>();\n                 Map<Character, Separator> separatorMap = new HashMap<Character, SeparatorBasedImporter.Separator>();\n                 \n-                int totalBytes = 0;\n+                int totalChars = 0;\n                 int lineCount = 0;\n+                boolean inQuote = false;\n                 String s;\n-                while (totalBytes < 64 * 1024 &&\n+                while (totalChars < 64 * 1024 &&\n                        lineCount < 100 &&\n                        (s = lineNumberReader.readLine()) != null) {\n                     \n-                    totalBytes += s.length() + 1; // count the new line character\n+                    totalChars += s.length() + 1; // count the new line character\n                     if (s.length() == 0) {\n                         continue;\n                     }\n                     lineCount++;\n                     \n                     for (int i = 0; i < s.length(); i++) {\n                         char c = s.charAt(i);\n-                        if (!Character.isLetterOrDigit(c) &&\n-                            !\"\\\"' .-\".contains(s.subSequence(i, i + 1))) {\n+                        if ('\"' == c) {\n+                            inQuote = !inQuote;\n+                        }\n+                        if (!Character.isLetterOrDigit(c) \n+                                && !\"\\\"' .-\".contains(s.subSequence(i, i + 1)) \n+                                && (!handleQuotes || !inQuote)) {\n                             Separator separator = separatorMap.get(c);\n                             if (separator == null) {\n                                 separator = new Separator();\n@@ -214,9 +224,10 @@ static public Separator guessSeparator(File file, String encoding) {\n                 if (separators.size() > 0) {\n                     for (Separator separator : separators) {\n                         separator.averagePerLine = separator.totalCount / (double) lineCount;\n-                        separator.stddev = Math.sqrt(\n-                            separator.totalOfSquaredCount / (double) lineCount -\n-                            separator.averagePerLine * separator.averagePerLine);\n+                         separator.stddev = Math.sqrt(\n+                                 (((double)lineCount * separator.totalOfSquaredCount) - (separator.totalCount * separator.totalCount))\n+                                        / ((double)lineCount*(lineCount-1))\n+                            );\n                     }\n                     \n                     Collections.sort(separators, new Comparator<Separator>() {",
      "parent_sha": "9a680e83078239ca1761dbd814d453aa04e53478"
    }
  },
  {
    "oid": "c4b6f824f0676e51ae73dc3fb7fed8a16f5ce375",
    "message": "Fix ClassCastException via @annolangen from PR #853",
    "date": "2014-12-21T18:04:56Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/c4b6f824f0676e51ae73dc3fb7fed8a16f5ce375",
    "details": {
      "sha": "8e4dbfbb717b3b591d34c892cc094ef34542faea",
      "filename": "extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/c4b6f824f0676e51ae73dc3fb7fed8a16f5ce375/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FFusionTableImporter.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/c4b6f824f0676e51ae73dc3fb7fed8a16f5ce375/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FFusionTableImporter.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/extensions%2Fgdata%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fextension%2Fgdata%2FFusionTableImporter.java?ref=c4b6f824f0676e51ae73dc3fb7fed8a16f5ce375",
      "patch": "@@ -165,7 +165,7 @@ private List<List<Object>> getRowsOfCells(int startRow) throws IOException {\n                         List<Object> row = rows.get(i);\n                         List<Object> rowOfCells = new ArrayList<Object>(row.size());\n                         for (int j = 0; j < row.size() && j < columns.size(); j++) {\n-                            String text = (String)row.get(j);\n+                            String text = String.valueOf(row.get(j));\n                             if (text.isEmpty()) {\n                                 rowOfCells.add(null);\n                             } else {",
      "parent_sha": "0155a9bbee7bb12341303c8aec8d3be553dd8b47"
    }
  },
  {
    "oid": "32c5838a8d81bf0e39a0333cebe28ec19308d6a7",
    "message": "Fix issue #1509",
    "date": "2018-02-23T16:15:56Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/32c5838a8d81bf0e39a0333cebe28ec19308d6a7",
    "details": {
      "sha": "dc638aaf918b9320b4450563ecd6ebcb42dcf28f",
      "filename": "main/src/com/google/refine/importing/ImportingUtilities.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/32c5838a8d81bf0e39a0333cebe28ec19308d6a7/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/32c5838a8d81bf0e39a0333cebe28ec19308d6a7/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingUtilities.java?ref=32c5838a8d81bf0e39a0333cebe28ec19308d6a7",
      "patch": "@@ -92,6 +92,7 @@ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n import com.google.refine.RefineServlet;\n import com.google.refine.importing.ImportingManager.Format;\n import com.google.refine.importing.UrlRewriter.Result;\n+import com.google.refine.model.Cell;\n import com.google.refine.model.Column;\n import com.google.refine.model.ColumnModel;\n import com.google.refine.model.Project;\n@@ -1131,8 +1132,19 @@ static private void createProjectSynchronously(\n                     List<Row> rows = project.rows\n                              .stream()\n                              .limit(INFER_ROW_LIMIT)\n+                             .map(Row::dup)\n                              .collect(Collectors.toList());\n-                    rows.forEach(r->listCells.add(r.cells.toArray()));\n+                    // convert the null object to prevent the NPE\n+                    for (Row row : rows) {\n+                        for (int i = 0; i < row.cells.size(); i++) {\n+                            Cell cell = row.cells.get(i);\n+                            if (cell == null) {\n+                                row.cells.set(i, new Cell(StringUtils.EMPTY, null));\n+                            }\n+                        }\n+                        listCells.add(row.cells.toArray());\n+                    }\n+                   \n                     try {\n                         JSONObject fieldsJSON = TypeInferrer.getInstance().infer(listCells, \n                                 project.columnModel.getColumnNames().toArray(new String[0]),",
      "parent_sha": "b51dbdcbf22365b596df7ebce50fdf50bec884f1"
    }
  },
  {
    "oid": "12c5839600b6eef40f31c5461e0ea27f0fd8ef1f",
    "message": "use the explicit scoping",
    "date": "2017-11-03T21:47:18Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/12c5839600b6eef40f31c5461e0ea27f0fd8ef1f",
    "details": {
      "sha": "92f3ef6565313bb8d82080f5793c301522c1623f",
      "filename": "main/src/com/google/refine/importers/tree/ImportParameters.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/12c5839600b6eef40f31c5461e0ea27f0fd8ef1f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportParameters.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/12c5839600b6eef40f31c5461e0ea27f0fd8ef1f/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportParameters.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporters%2Ftree%2FImportParameters.java?ref=12c5839600b6eef40f31c5461e0ea27f0fd8ef1f",
      "patch": "@@ -2,11 +2,11 @@\n \n \n public class ImportParameters {\n-    boolean trimStrings;\n-    boolean storeEmptyStrings;\n-    boolean guessDataType;\n-    boolean includeFileSources;\n-    String fileSource;\n+    protected boolean trimStrings;\n+    protected boolean storeEmptyStrings;\n+    protected boolean guessDataType;\n+    protected boolean includeFileSources;\n+    protected String fileSource;\n     \n     public ImportParameters(boolean trimStrings, boolean storeEmptyStrings, boolean guessCellValueTypes,\n             boolean includeFileSources, String fileSource) {",
      "parent_sha": "986881b10f6ac35a055adbe6eb4baad1b15d740c"
    }
  },
  {
    "oid": "147616f41cb527707f3f3acdc7e560d5c338c432",
    "message": "add more UT for tostring",
    "date": "2018-05-15T02:01:06Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/147616f41cb527707f3f3acdc7e560d5c338c432",
    "details": {
      "sha": "8abcd7abc9cef9db3004197c60c45f8eb6bf6bed",
      "filename": "main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java",
      "status": "modified",
      "additions": 19,
      "deletions": 10,
      "changes": 29,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/147616f41cb527707f3f3acdc7e560d5c338c432/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fstrings%2FToFromConversionTests.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/147616f41cb527707f3f3acdc7e560d5c338c432/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fstrings%2FToFromConversionTests.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Ftests%2Fserver%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Ftests%2Fexpr%2Ffunctions%2Fstrings%2FToFromConversionTests.java?ref=147616f41cb527707f3f3acdc7e560d5c338c432",
      "patch": "@@ -111,17 +111,26 @@ public void testToNumber() {\n \n     @Test\n     public void testToString() throws CalendarParserException {\n-//      Assert.assertTrue(invoke(\"toString\") instanceof EvalError);\n-//      Assert.assertEquals(invoke(\"toString\", (Object) null), \"null\");\n-//      Assert.assertEquals(invoke(\"toString\", Long.valueOf(100)),\"100\");\n-//      Assert.assertEquals(invoke(\"toString\", Double.valueOf(100.0)),\"100.0\");\n-//      Assert.assertEquals(invoke(\"toString\", Double.valueOf(100.0),\"%.0f\"),\"100\");\n-//      \n-      String intputDate = \"2013-06-01\";\n-//      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(intputDate)), \n-//              \"01-Jun-2013\");\n-      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(intputDate), \"yyyy-MM-dd\"),\n+      Assert.assertTrue(invoke(\"toString\") instanceof EvalError);\n+      Assert.assertEquals(invoke(\"toString\", (Object) null), \"null\");\n+      Assert.assertEquals(invoke(\"toString\", Long.valueOf(100)),\"100\");\n+      Assert.assertEquals(invoke(\"toString\", Double.valueOf(100.0)),\"100.0\");\n+      Assert.assertEquals(invoke(\"toString\", Double.valueOf(100.0),\"%.0f\"),\"100\");\n+      \n+      String inputDate = \"2013-06-01\";\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDate)), \n+              \"01-Jun-2013\");\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDate), \"yyyy-MM-dd\"),\n               \"2013-06-01\");\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDate), \"yyyy/dd/MM\"), \"2013/01/06\");\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDate), \"yyyy-MMM\"), \"2013-Jun\");\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDate), \"yyyy-MM-dd hh:mm:ss\"), \"2013-06-01 12:00:00\");\n+      \n+      String inputDateTime = \"2013-06-01 13:12:11\";\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDateTime)), \"01-Jun-2013\");\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDateTime), \"yyyy-MM-dd\"), \"2013-06-01\");\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDateTime), \"yyyy-MM-dd hh:mm:ss\"),\"2013-06-01 01:12:11\");\n+      Assert.assertEquals(invoke(\"toString\", CalenderParser.parseAsOffsetDateTime(inputDateTime), \"yyyy-MM-dd HH:mm:ss\"),\"2013-06-01 13:12:11\");\n     }\n     \n     @Test",
      "parent_sha": "5adb3e455cf861de78979a26ab732f48cc6a2838"
    }
  },
  {
    "oid": "e23fef8b66f4078a9afc4a3aebfd39ad5d838808",
    "message": "Fix: Allow smartSplit() to handle String of chars not just a single char",
    "date": "2018-10-14T16:20:29Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/e23fef8b66f4078a9afc4a3aebfd39ad5d838808",
    "details": {
      "sha": "937852e1bf87de04d853cd7530adb4aa4ec5ea9a",
      "filename": "main/src/com/google/refine/expr/functions/strings/SmartSplit.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/e23fef8b66f4078a9afc4a3aebfd39ad5d838808/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FSmartSplit.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/e23fef8b66f4078a9afc4a3aebfd39ad5d838808/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FSmartSplit.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fexpr%2Ffunctions%2Fstrings%2FSmartSplit.java?ref=e23fef8b66f4078a9afc4a3aebfd39ad5d838808",
      "patch": "@@ -76,7 +76,7 @@ public Object call(Properties bindings, Object[] args) {\n             if (args.length > 1) {\n                 String sep = args[1].toString();\n                 parser = new CSVParser(\n-                    sep.charAt(0),\n+                    sep,\n                     CSVParser.DEFAULT_QUOTE_CHARACTER,\n                     CSVParser.DEFAULT_ESCAPE_CHARACTER,\n                     CSVParser.DEFAULT_STRICT_QUOTES,",
      "parent_sha": "d2edffcef47f1cd79944796825591d877aa411ee"
    }
  },
  {
    "oid": "4a4ae6bf272fbe4e55f8eb006a9cd0b6691c56b9",
    "message": "Fixed toTitlecase to handle parentheses and other delimiters.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@240 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-03-08T19:40:51Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/4a4ae6bf272fbe4e55f8eb006a9cd0b6691c56b9",
    "details": {
      "sha": "9c3954ddfecf83f36f582cdb07f16906cb0b6719",
      "filename": "src/main/java/com/metaweb/gridworks/expr/functions/strings/ToTitlecase.java",
      "status": "modified",
      "additions": 19,
      "deletions": 8,
      "changes": 27,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/4a4ae6bf272fbe4e55f8eb006a9cd0b6691c56b9/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fexpr%2Ffunctions%2Fstrings%2FToTitlecase.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/4a4ae6bf272fbe4e55f8eb006a9cd0b6691c56b9/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fexpr%2Ffunctions%2Fstrings%2FToTitlecase.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/src%2Fmain%2Fjava%2Fcom%2Fmetaweb%2Fgridworks%2Fexpr%2Ffunctions%2Fstrings%2FToTitlecase.java?ref=4a4ae6bf272fbe4e55f8eb006a9cd0b6691c56b9",
      "patch": "@@ -2,6 +2,7 @@\n \r\n import java.util.Properties;\r\n \r\n+import org.apache.commons.lang.StringUtils;\r\n import org.json.JSONException;\r\n import org.json.JSONWriter;\r\n \r\n@@ -15,17 +16,27 @@ public Object call(Properties bindings, Object[] args) {\n         if (args.length == 1 && args[0] != null) {\r\n             Object o = args[0];\r\n             String s = o instanceof String ? (String) o : o.toString();\r\n-            String[] words = s.split(\"\\\\s+\");\r\n+            String[] segments = StringUtils.splitByCharacterType(s);\r\n             \r\n             StringBuffer sb = new StringBuffer();\r\n-            for (int i = 0; i < words.length; i++) {\r\n-                String word = words[i];\r\n-                if (word.length() > 0) {\r\n-                    if (sb.length() > 0) {\r\n-                        sb.append(' ');\r\n-                    }\r\n-                    sb.append(word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase());\r\n+            boolean startOfWord = true;\r\n+            for (int i = 0; i < segments.length; i++) {\r\n+                String segment = segments[i];\r\n+                char c = segment.charAt(0);\r\n+                \r\n+                if (Character.isWhitespace(c)) {\r\n+                \tstartOfWord = true;\r\n+                } else if (c == '(' || c == '[' || c == '{' || c == '\"' || c == '\\'') {\r\n+                \tstartOfWord = true;\r\n+                } else if (Character.isLetter(c)) {\r\n+                \tif (startOfWord) {\r\n+                \t\tsegment = StringUtils.capitalize(segment);\r\n+                \t}\r\n+                \tstartOfWord = false;\r\n+                } else {\r\n+                \tstartOfWord = false;\r\n                 }\r\n+                sb.append(segment);\r\n             }\r\n             \r\n             return sb.toString();\r",
      "parent_sha": "c147837a3ee56d68710e910c2c90361480bf7113"
    }
  },
  {
    "oid": "a0d4eb0058e8c3929d4224e848dd4b2f0db9e8d5",
    "message": "Job id duplicate fix\n\nChanged how job id's are created to avoid the same id to be assigned to\ntwo concurrent jobs.",
    "date": "2014-02-05T11:21:50Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/a0d4eb0058e8c3929d4224e848dd4b2f0db9e8d5",
    "details": {
      "sha": "a14018ae8351724384cf001c04f606e3194120fd",
      "filename": "main/src/com/google/refine/importing/ImportingManager.java",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/a0d4eb0058e8c3929d4224e848dd4b2f0db9e8d5/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/a0d4eb0058e8c3929d4224e848dd4b2f0db9e8d5/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Frefine%2Fimporting%2FImportingManager.java?ref=a0d4eb0058e8c3929d4224e848dd4b2f0db9e8d5",
      "patch": "@@ -86,7 +86,10 @@ private Format(\n     \n     static private RefineServlet servlet;\n     static private File importDir;\n+    \n     final static private Map<Long, ImportingJob> jobs = Collections.synchronizedMap(new HashMap<Long, ImportingJob>());\n+    static private long jobIdCounter = 0;\n+    final static private Object jobIdLock = new Object();\n     \n     // Mapping from format to label, e.g., \"text\" to \"Text files\", \"text/xml\" to \"XML files\"\n     final static public Map<String, Format> formatToRecord = new HashMap<String, Format>();\n@@ -187,7 +190,18 @@ static synchronized public File getImportDir() {\n     }\n     \n     static public ImportingJob createJob() {\n-        long id = System.currentTimeMillis() + (long) (Math.random() * 1000000);\n+        long id;\n+        \n+        synchronized(jobIdLock) {\n+            ++jobIdCounter;\n+            \n+            // Avoid negative job id's when the counter wraps around.\n+            if (jobIdCounter < 0)\n+                jobIdCounter = 1;\n+            \n+            id = jobIdCounter;\n+        }\n+        \n         File jobDir = new File(getImportDir(), Long.toString(id));\n         \n         ImportingJob job = new ImportingJob(id, jobDir);",
      "parent_sha": "ae56e98522d20ffe295ea58eb15c285578e77584"
    }
  },
  {
    "oid": "bd7453adbac27db9d4b9501e5292832ce0473521",
    "message": "Made sure to strip off charset from content-type when importing from URLs before looking up for the right importer.\n\ngit-svn-id: http://google-refine.googlecode.com/svn/trunk@1229 7d457c2a-affb-35e4-300a-418c747d4874",
    "date": "2010-08-25T17:35:16Z",
    "url": "https://github.com/OpenRefine/OpenRefine/commit/bd7453adbac27db9d4b9501e5292832ce0473521",
    "details": {
      "sha": "07cf885454e23d6aef23e21070560de09597196d",
      "filename": "main/src/com/google/gridworks/commands/project/CreateProjectCommand.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/OpenRefine/OpenRefine/blob/bd7453adbac27db9d4b9501e5292832ce0473521/main%2Fsrc%2Fcom%2Fgoogle%2Fgridworks%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "raw_url": "https://github.com/OpenRefine/OpenRefine/raw/bd7453adbac27db9d4b9501e5292832ce0473521/main%2Fsrc%2Fcom%2Fgoogle%2Fgridworks%2Fcommands%2Fproject%2FCreateProjectCommand.java",
      "contents_url": "https://api.github.com/repos/OpenRefine/OpenRefine/contents/main%2Fsrc%2Fcom%2Fgoogle%2Fgridworks%2Fcommands%2Fproject%2FCreateProjectCommand.java?ref=bd7453adbac27db9d4b9501e5292832ce0473521",
      "patch": "@@ -372,7 +372,13 @@ protected void internalImportURL(HttpServletRequest request,\n             }\n \n             try {\n-                importer = ImporterRegistry.guessImporter(connection.getContentType(), url.getPath());\n+                String contentType = connection.getContentType();\n+                int semicolon = contentType.indexOf(';');\n+                if (semicolon >= 0) {\n+                    contentType = contentType.substring(0, semicolon);\n+                }\n+                \n+                importer = ImporterRegistry.guessImporter(contentType, url.getPath());\n                 \n                 internalInvokeImporter(project, importer, options, inputStream, connection.getContentEncoding());\n             } finally {",
      "parent_sha": "996eb4d310e2ee67de58dff561d7b9a3d72ab1c7"
    }
  }
]