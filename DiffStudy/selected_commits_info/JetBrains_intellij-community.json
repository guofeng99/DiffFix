[
  {
    "oid": "85696d7125e0539a31a0e9ede8857677be64f1c4",
    "message": "document document commit threading requirements",
    "date": "2017-02-27T11:25:37Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/85696d7125e0539a31a0e9ede8857677be64f1c4",
    "details": {
      "sha": "d6dc310a93ee3b27e61e7dc7faa62f2237f87e27",
      "filename": "platform/core-api/src/com/intellij/psi/PsiDocumentManager.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/85696d7125e0539a31a0e9ede8857677be64f1c4/platform%2Fcore-api%2Fsrc%2Fcom%2Fintellij%2Fpsi%2FPsiDocumentManager.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/85696d7125e0539a31a0e9ede8857677be64f1c4/platform%2Fcore-api%2Fsrc%2Fcom%2Fintellij%2Fpsi%2FPsiDocumentManager.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fcore-api%2Fsrc%2Fcom%2Fintellij%2Fpsi%2FPsiDocumentManager.java?ref=85696d7125e0539a31a0e9ede8857677be64f1c4",
      "patch": "@@ -88,7 +88,9 @@ public static PsiDocumentManager getInstance(@NotNull Project project) {\n   /**\n    * Commits (updates the PSI tree for) all modified but not committed documents.\n    * Before a modified document is committed, accessing its PSI may return elements\n-   * corresponding to original (unmodified) state of the document.\n+   * corresponding to original (unmodified) state of the document.<p/>\n+   *\n+   * Should be called in UI thread in a write-safe context (see {@link com.intellij.openapi.application.TransactionGuard})\n    */\n   public abstract void commitAllDocuments();\n \n@@ -100,7 +102,11 @@ public static PsiDocumentManager getInstance(@NotNull Project project) {\n   /**\n    * Updates the PSI tree for the specified document.\n    * Before a modified document is committed, accessing its PSI may return elements\n-   * corresponding to original (unmodified) state of the document.\n+   * corresponding to original (unmodified) state of the document.<p/>\n+   *\n+   * For documents corresponding to PSI with events enabled (see {@link FileViewProvider#isEventSystemEnabled()}, this should be called\n+   * in UI thread in a write-safe context (see {@link com.intellij.openapi.application.TransactionGuard}). For non-physical files, this can be\n+   * called in any thread. In the latter case, clients hold themselves all responsibility for synchronizing that PSI.\n    *\n    * @param document the document to commit.\n    */",
      "parent_sha": "36f87d0438fd523ffcda0aa0d1326d87fc311810"
    }
  },
  {
    "oid": "a7d564fd957580f0d90937aee40a8246ecf9a0dc",
    "message": "IDEA-250187 - remarks after CR\n\nGitOrigin-RevId: 60c4955cd9795293417991320e661ec11c76bdd9",
    "date": "2020-10-15T14:53:02Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/a7d564fd957580f0d90937aee40a8246ecf9a0dc",
    "details": {
      "sha": "afacc083e38420695490fca7a1e15ad0b9405853",
      "filename": "java/java-impl/src/com/intellij/refactoring/move/moveClassesOrPackages/JavaMoveDirectoryWithClassesHelper.java",
      "status": "modified",
      "additions": 11,
      "deletions": 14,
      "changes": 25,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/a7d564fd957580f0d90937aee40a8246ecf9a0dc/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Frefactoring%2Fmove%2FmoveClassesOrPackages%2FJavaMoveDirectoryWithClassesHelper.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/a7d564fd957580f0d90937aee40a8246ecf9a0dc/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Frefactoring%2Fmove%2FmoveClassesOrPackages%2FJavaMoveDirectoryWithClassesHelper.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Frefactoring%2Fmove%2FmoveClassesOrPackages%2FJavaMoveDirectoryWithClassesHelper.java?ref=a7d564fd957580f0d90937aee40a8246ecf9a0dc",
      "patch": "@@ -3,7 +3,6 @@\n import com.intellij.codeInsight.ChangeContextUtil;\n import com.intellij.codeInsight.daemon.impl.analysis.JavaModuleGraphUtil;\n import com.intellij.openapi.project.Project;\n-import com.intellij.openapi.roots.ProjectFileIndex;\n import com.intellij.psi.*;\n import com.intellij.psi.search.GlobalSearchScope;\n import com.intellij.psi.search.searches.ReferencesSearch;\n@@ -114,28 +113,26 @@ public void postProcessUsages(UsageInfo[] usages, Function<PsiDirectory, PsiDire\n         PsiJavaModule moduleDescriptor = JavaModuleGraphUtil.findDescriptorByElement(moveDirUsage.getSourceDirectory());\n         if (moduleDescriptor == null) continue;\n \n-        ProjectFileIndex fileIndex = ProjectFileIndex.getInstance(moveDirUsage.getSourceDirectory().getProject());\n-        String oldPackageName = fileIndex.getPackageNameByDirectory(moveDirUsage.getSourceDirectory().getVirtualFile());\n-        if (oldPackageName == null) continue;\n-        String newPackageName = fileIndex.getPackageNameByDirectory(moveDirUsage.getTargetDirectory().getVirtualFile());\n-        if (newPackageName == null) continue;\n+        JavaDirectoryService directoryService = JavaDirectoryService.getInstance();\n+        PsiPackage oldPackage = directoryService.getPackage(moveDirUsage.getSourceDirectory());\n+        if (oldPackage == null) continue;\n+        PsiPackage newPackage = directoryService.getPackage(moveDirUsage.getTargetDirectory());\n+        if (newPackage == null) continue;\n \n-        renamePackageStatements(moduleDescriptor.getExports(), moveDirUsage.getTargetDirectory().getProject(), oldPackageName, newPackageName);\n-        renamePackageStatements(moduleDescriptor.getOpens(), moveDirUsage.getTargetDirectory().getProject(), oldPackageName, newPackageName);\n+        renamePackageStatements(moduleDescriptor.getExports(), oldPackage, newPackage);\n+        renamePackageStatements(moduleDescriptor.getOpens(), oldPackage, newPackage);\n       }\n     }\n   }\n \n   private static void renamePackageStatements(@NotNull Iterable<PsiPackageAccessibilityStatement> packageStatements,\n-                                              @NotNull Project project,\n-                                              @NotNull String oldPackageName,\n-                                              @NotNull String newPackageName) {\n-    PsiJavaParserFacade parserFacade = JavaPsiFacade.getInstance(project).getParserFacade();\n+                                              @NotNull PsiPackage oldPackage,\n+                                              @NotNull PsiPackage newPackage) {\n     for (PsiPackageAccessibilityStatement exportStatement : packageStatements) {\n-      if (!oldPackageName.equals(exportStatement.getPackageName())) continue;\n       PsiJavaCodeReferenceElement packageReference = exportStatement.getPackageReference();\n       if (packageReference == null) continue;\n-      packageReference.replace(parserFacade.createReferenceFromText(newPackageName, exportStatement));\n+      if (!oldPackage.equals(packageReference.resolve())) continue;\n+      packageReference.bindToElement(newPackage);\n       break;\n     }\n   }",
      "parent_sha": "12b6cfb00e05ceb8fe7cac58f50cdab2e982f589"
    }
  },
  {
    "oid": "e827cdcbeaa0de98b80559e1f24409dc27ce4640",
    "message": "[groovy-mvc] inc counter on any file removal (IDEA-174783, EA-102256)\n\nFileIndex#isInContent returns `false` for any removed file since that\nfile becomes invalid.",
    "date": "2017-12-12T13:33:18Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/e827cdcbeaa0de98b80559e1f24409dc27ce4640",
    "details": {
      "sha": "e26eced8918d8b3552a3d6a47434ebbb914c5b4c",
      "filename": "plugins/groovy/src/org/jetbrains/plugins/groovy/mvc/MvcModuleStructureSynchronizer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 14,
      "changes": 15,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/e827cdcbeaa0de98b80559e1f24409dc27ce4640/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Fmvc%2FMvcModuleStructureSynchronizer.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/e827cdcbeaa0de98b80559e1f24409dc27ce4640/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Fmvc%2FMvcModuleStructureSynchronizer.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Fmvc%2FMvcModuleStructureSynchronizer.java?ref=e827cdcbeaa0de98b80559e1f24409dc27ce4640",
      "patch": "@@ -1,17 +1,5 @@\n /*\n- * Copyright 2000-2017 JetBrains s.r.o.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Copyright 2000-2017 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  */\n package org.jetbrains.plugins.groovy.mvc;\n \n@@ -183,7 +171,6 @@ else if (isLibDirectory(file) || isLibDirectory(event.getParent())) {\n       @Override\n       public void fileDeleted(@NotNull VirtualFileEvent event) {\n         final VirtualFile file = event.getFile();\n-        if (!myFileIndex.isInContent(file)) return;\n \n         myModificationTracker.incModificationCount();\n ",
      "parent_sha": "55ad72243cd55fe9bf19c211fbf9d35bd534c9fd"
    }
  },
  {
    "oid": "28493864094e1dda4e790828e23e5147a60e10b9",
    "message": "Revert change making UnknownRunConfiguration final because Rider has inheritors of this class",
    "date": "2018-09-11T07:51:54Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/28493864094e1dda4e790828e23e5147a60e10b9",
    "details": {
      "sha": "dd7db6060f45214373adc9f996517c4dd68093ef",
      "filename": "platform/lang-api/src/com/intellij/execution/configurations/UnknownRunConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/28493864094e1dda4e790828e23e5147a60e10b9/platform%2Flang-api%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fconfigurations%2FUnknownRunConfiguration.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/28493864094e1dda4e790828e23e5147a60e10b9/platform%2Flang-api%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fconfigurations%2FUnknownRunConfiguration.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-api%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fconfigurations%2FUnknownRunConfiguration.java?ref=28493864094e1dda4e790828e23e5147a60e10b9",
      "patch": "@@ -20,7 +20,7 @@\n /**\n  * @author spleaner\n  */\n-public final class UnknownRunConfiguration implements RunConfiguration, WithoutOwnBeforeRunSteps {\n+public /*not final for Rider*/ class UnknownRunConfiguration implements RunConfiguration, WithoutOwnBeforeRunSteps {\n   private final ConfigurationFactory myFactory;\n   private Element myStoredElement;\n   private String myName;",
      "parent_sha": "117e363f21ae27fd504223fa4578944f37a14616"
    }
  },
  {
    "oid": "00424c3921896cabe0cc36822e3538942ffcfdf3",
    "message": "EA-208871 - IAE: StringUtil.$$$reportNull$$$\n\nGitOrigin-RevId: 89d8a6969d8356f22dcd0272f476828e27a1a2f9",
    "date": "2019-08-14T23:19:03Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/00424c3921896cabe0cc36822e3538942ffcfdf3",
    "details": {
      "sha": "2270268aee6d44511614b68e6a931d4b5fa3c9e6",
      "filename": "platform/lang-impl/src/com/intellij/ide/util/gotoByName/GotoActionModel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/00424c3921896cabe0cc36822e3538942ffcfdf3/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Futil%2FgotoByName%2FGotoActionModel.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/00424c3921896cabe0cc36822e3538942ffcfdf3/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Futil%2FgotoByName%2FGotoActionModel.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Futil%2FgotoByName%2FGotoActionModel.java?ref=00424c3921896cabe0cc36822e3538942ffcfdf3",
      "patch": "@@ -823,7 +823,7 @@ private static String calcHit(@NotNull OptionDescription value) {\n         return value.getHit() + \" = \" + value.getValue();\n       }\n       String hit = StringUtil.defaultIfEmpty(value.getHit(), value.getOption());\n-      return StringUtil.unescapeXmlEntities(hit)\n+      return StringUtil.unescapeXmlEntities(StringUtil.notNullize(hit))\n         .replace(BundleBase.MNEMONIC_STRING, \"\")\n         .replace(\"  \", \" \"); // avoid extra spaces from mnemonics and xml conversion\n     }",
      "parent_sha": "72a28fa0cfc37cf4fa8a2b10bea3398427220034"
    }
  },
  {
    "oid": "d7706c9f904c67dbd72f4f508bff6c818b4e2b76",
    "message": "[search] IDEA-307671 EOL ($) produces no matches if there is no empty line at the end of the file\n\nIt's quite possible that newOffset is bigger than offset, and nevertheless the match is exactly at the end of the file and it's zero-width. For example: regexp = $, and file has no line-break at the end.\n\nGitOrigin-RevId: 9b50f3ac8bd84b4d2b328db41f9488a23c0ce3f3",
    "date": "2022-12-05T19:14:12Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/d7706c9f904c67dbd72f4f508bff6c818b4e2b76",
    "details": {
      "sha": "975a73985c8c8549515505f245f3ea79dfb2a58d",
      "filename": "platform/lang-impl/src/com/intellij/find/impl/livePreview/SearchResults.java",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/d7706c9f904c67dbd72f4f508bff6c818b4e2b76/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Ffind%2Fimpl%2FlivePreview%2FSearchResults.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/d7706c9f904c67dbd72f4f508bff6c818b4e2b76/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Ffind%2Fimpl%2FlivePreview%2FSearchResults.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Ffind%2Fimpl%2FlivePreview%2FSearchResults.java?ref=d7706c9f904c67dbd72f4f508bff6c818b4e2b76",
      "patch": "@@ -311,18 +311,13 @@ private void findInRange(@NotNull TextRange range, @NotNull Editor editor, @NotN\n       if (result == null || !result.isStringFound()) break;\n       final int newOffset = result.getEndOffset();\n       if (result.getEndOffset() > maxOffset) break;\n-      if (offset == newOffset) {\n-        if (offset < maxOffset - 1) {\n-          offset++;\n-        }\n-        else {\n-          results.add(result);\n-          break;\n-        }\n+      offset = newOffset;\n+      if (offset < maxOffset - 1) {\n+        offset++; // skip zero width result\n       }\n       else {\n-        offset = newOffset;\n-        if (offset == result.getStartOffset()) ++offset; // skip zero width result\n+        results.add(result);\n+        break;\n       }\n       results.add(result);\n     }",
      "parent_sha": "b656d6c588331d3a1423e5bd450636f457c4d8ca"
    }
  },
  {
    "oid": "b1ecfea559e011a7a686228f8801718534b2e8bd",
    "message": "do not do async processing of vfs events in powersave mode",
    "date": "2017-01-25T16:15:24Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/b1ecfea559e011a7a686228f8801718534b2e8bd",
    "details": {
      "sha": "2b0557484fd8a726c014625b8c12d735ab083660",
      "filename": "platform/lang-impl/src/com/intellij/util/indexing/FileBasedIndexImpl.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/b1ecfea559e011a7a686228f8801718534b2e8bd/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Futil%2Findexing%2FFileBasedIndexImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/b1ecfea559e011a7a686228f8801718534b2e8bd/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Futil%2Findexing%2FFileBasedIndexImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Futil%2Findexing%2FFileBasedIndexImpl.java?ref=b1ecfea559e011a7a686228f8801718534b2e8bd",
      "patch": "@@ -18,6 +18,7 @@\n \n import com.intellij.AppTopics;\n import com.intellij.history.LocalHistory;\n+import com.intellij.ide.PowerSaveMode;\n import com.intellij.ide.plugins.PluginManager;\n import com.intellij.lang.ASTNode;\n import com.intellij.notification.NotificationDisplayType;\n@@ -1906,7 +1907,9 @@ public void ensureUpToDate() {\n     }\n \n     void ensureUpToDateAsync() {\n-      if (myVfsEventsMerger.getApproximateChangesCount() >= 20 && myScheduledVfsEventsWorkers.get() == 0) {\n+      if (myVfsEventsMerger.getApproximateChangesCount() >= 20 &&\n+          myScheduledVfsEventsWorkers.get() == 0 &&\n+          !PowerSaveMode.isEnabled()) {\n         myScheduledVfsEventsWorkers.incrementAndGet();\n         myVfsEventsExecutor.submit(this::processFilesInReadActionWithYieldingToWriteAction);\n       }",
      "parent_sha": "201ce7d2e5384fbef65b76d7c25dbcc493fdd89b"
    }
  },
  {
    "oid": "99eba343075c965575f7bbab4b9d4dbb75d6ef10",
    "message": "restore \"Fix StringBuilder append\" quickfix",
    "date": "2013-09-15T22:09:05Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/99eba343075c965575f7bbab4b9d4dbb75d6ef10",
    "details": {
      "sha": "a1da848a1dba18126df95f6863826389202954cd",
      "filename": "java/java-analysis-impl/src/com/intellij/codeInsight/daemon/impl/analysis/HighlightUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/99eba343075c965575f7bbab4b9d4dbb75d6ef10/java%2Fjava-analysis-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdaemon%2Fimpl%2Fanalysis%2FHighlightUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/99eba343075c965575f7bbab4b9d4dbb75d6ef10/java%2Fjava-analysis-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdaemon%2Fimpl%2Fanalysis%2FHighlightUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fjava-analysis-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdaemon%2Fimpl%2Fanalysis%2FHighlightUtil.java?ref=99eba343075c965575f7bbab4b9d4dbb75d6ef10",
      "patch": "@@ -353,7 +353,6 @@ static HighlightInfo checkAssignmentOperatorApplicable(@NotNull PsiAssignmentExp\n                                                  JavaHighlightUtil.formatType(rType));\n \n       errorResult = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(assignment).descriptionAndTooltip(message).create();\n-      QuickFixAction.registerQuickFixAction(errorResult, QUICK_FIX_FACTORY.createChangeToAppendFix(eqOpSign, lType, assignment));\n     }\n     return errorResult;\n   }\n@@ -381,6 +380,7 @@ static HighlightInfo checkAssignmentCompatibleTypes(@NotNull PsiAssignmentExpres\n         return null;\n       }\n       highlightInfo = createIncompatibleTypeHighlightInfo(lType, type, assignment.getTextRange(), 0);\n+      QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createChangeToAppendFix(sign, lType, assignment));\n     }\n     if (highlightInfo == null) {\n       return null;",
      "parent_sha": "a5d17029793268f6e93f8a7ce3b641dd92c27005"
    }
  },
  {
    "oid": "1e8a061e004f280c6590cd46397d6ea2e33fe398",
    "message": "[vcs] Fix patch reader so that lines outside context are not parsed",
    "date": "2018-08-29T11:56:44Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/1e8a061e004f280c6590cd46397d6ea2e33fe398",
    "details": {
      "sha": "ccb555ce346c71511c3f399e28564e9b1f86d044",
      "filename": "platform/vcs-impl/src/com/intellij/openapi/diff/impl/patch/PatchReader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/1e8a061e004f280c6590cd46397d6ea2e33fe398/platform%2Fvcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fdiff%2Fimpl%2Fpatch%2FPatchReader.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/1e8a061e004f280c6590cd46397d6ea2e33fe398/platform%2Fvcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fdiff%2Fimpl%2Fpatch%2FPatchReader.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fvcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fdiff%2Fimpl%2Fpatch%2FPatchReader.java?ref=1e8a061e004f280c6590cd46397d6ea2e33fe398",
      "patch": "@@ -432,7 +432,7 @@ private static PatchLine parsePatchLine(final String line, final int prefixLengt\n       else if (line.startsWith(\"-\") && expectMeaningfulLines) {\n         type = PatchLine.Type.REMOVE;\n       }\n-      else if (line.startsWith(\" \") || line.length() == 0) {\n+      else if (line.startsWith(\" \") && expectMeaningfulLines) {\n         type = PatchLine.Type.CONTEXT;\n       }\n       else {",
      "parent_sha": "188aab96e1491ebac2df831c3e472343f090cf57"
    }
  },
  {
    "oid": "dcbad154a9cdb3d867a05b6194feb5e7494b7a61",
    "message": "IDEA-129688 Android Studio/IntelliJ - Quick Doc shown on Menu Click",
    "date": "2014-09-30T10:40:49Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/dcbad154a9cdb3d867a05b6194feb5e7494b7a61",
    "details": {
      "sha": "6156dd99be0cc3ccb9aa0aafb536940f30d9fbf1",
      "filename": "platform/lang-impl/src/com/intellij/codeInsight/documentation/QuickDocOnMouseOverManager.java",
      "status": "modified",
      "additions": 15,
      "deletions": 2,
      "changes": 17,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/dcbad154a9cdb3d867a05b6194feb5e7494b7a61/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdocumentation%2FQuickDocOnMouseOverManager.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/dcbad154a9cdb3d867a05b6194feb5e7494b7a61/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdocumentation%2FQuickDocOnMouseOverManager.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdocumentation%2FQuickDocOnMouseOverManager.java?ref=dcbad154a9cdb3d867a05b6194feb5e7494b7a61",
      "patch": "@@ -50,7 +50,7 @@\n  */\n public class QuickDocOnMouseOverManager {\n \n-  @NotNull private final EditorMouseMotionListener myMouseListener       = new MyEditorMouseListener();\n+  @NotNull private final MyEditorMouseListener     myMouseListener       = new MyEditorMouseListener();\n   @NotNull private final VisibleAreaListener       myVisibleAreaListener = new MyVisibleAreaListener();\n   @NotNull private final CaretListener             myCaretListener       = new MyCaretListener();\n   @NotNull private final DocumentListener          myDocumentListener    = new MyDocumentListener();\n@@ -117,6 +117,7 @@ public void setEnabled(boolean enabled) {\n   }\n \n   private void registerListeners(@NotNull Editor editor) {\n+    editor.addEditorMouseListener(myMouseListener);\n     editor.addEditorMouseMotionListener(myMouseListener);\n     editor.getScrollingModel().addVisibleAreaListener(myVisibleAreaListener);\n     editor.getCaretModel().addCaretListener(myCaretListener);\n@@ -128,6 +129,7 @@ private void registerListeners(@NotNull Editor editor) {\n   }\n \n   private void unRegisterListeners(@NotNull Editor editor) {\n+    editor.removeEditorMouseListener(myMouseListener);\n     editor.removeEditorMouseMotionListener(myMouseListener);\n     editor.getScrollingModel().removeVisibleAreaListener(myVisibleAreaListener);\n     editor.getCaretModel().removeCaretListener(myCaretListener);\n@@ -137,6 +139,10 @@ private void unRegisterListeners(@NotNull Editor editor) {\n       document.removeDocumentListener(myDocumentListener);\n     }\n   }\n+\n+  private void processMouseExited() {\n+    myDelayedQuickDocInfo = null;\n+  }\n   \n   private void processMouseMove(@NotNull EditorMouseEvent e) {\n     if (!myApplicationActive || e.getArea() != EditorMouseEventArea.EDITING_AREA) {\n@@ -335,12 +341,19 @@ public void editorReleased(@NotNull EditorFactoryEvent event) {\n     }\n   }\n \n-  private class MyEditorMouseListener extends EditorMouseMotionAdapter {\n+  private class MyEditorMouseListener extends EditorMouseAdapter implements EditorMouseMotionListener {\n+    @Override\n+    public void mouseExited(EditorMouseEvent e) {\n+      processMouseExited();\n+    }\n \n     @Override\n     public void mouseMoved(EditorMouseEvent e) {\n       processMouseMove(e);\n     }\n+\n+    @Override\n+    public void mouseDragged(EditorMouseEvent e) {}\n   }\n   \n   private class MyVisibleAreaListener implements VisibleAreaListener {",
      "parent_sha": "b14bcbbddb89e8bcb1d12a4fde5de69ac2495982"
    }
  },
  {
    "oid": "9f6b2734393678d90b055a1d35c774ad2939f83b",
    "message": "set a time limit to UI thread prioritization",
    "date": "2016-02-26T13:39:43Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/9f6b2734393678d90b055a1d35c774ad2939f83b",
    "details": {
      "sha": "cd82fd547cbc352984dbe03289de34394e705f9f",
      "filename": "platform/util/src/com/intellij/util/io/storage/HeavyProcessLatch.java",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/9f6b2734393678d90b055a1d35c774ad2939f83b/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2Fio%2Fstorage%2FHeavyProcessLatch.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/9f6b2734393678d90b055a1d35c774ad2939f83b/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2Fio%2Fstorage%2FHeavyProcessLatch.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2Fio%2Fstorage%2FHeavyProcessLatch.java?ref=9f6b2734393678d90b055a1d35c774ad2939f83b",
      "patch": "@@ -32,10 +32,12 @@\n public class HeavyProcessLatch {\n   public static final HeavyProcessLatch INSTANCE = new HeavyProcessLatch();\n   private static final String UI_ACTIVITY = \"UI Activity\";\n+  private static final int MAX_PRIORITIZING_TIME_MILLISECONDS = 12 * 1000;\n \n   private final Set<String> myHeavyProcesses = new THashSet<String>();\n   private final EventDispatcher<HeavyProcessListener> myEventDispatcher = EventDispatcher.create(HeavyProcessListener.class);\n   private volatile Thread myUiActivityThread;\n+  private volatile long myPrioritizingDeadLine;\n \n   private HeavyProcessLatch() {\n   }\n@@ -104,6 +106,10 @@ public void addListener(@NotNull Disposable parentDisposable, @NotNull HeavyProc\n    * @see #stopThreadPrioritizing()\n    */\n   public void prioritizeUiActivity() {\n+    // don't wait forever in case someone forgot to stop prioritizing before waiting for other threads to complete\n+    // wait just for 12 seconds; this will be noticeable (and we'll get 2 thread dumps) but not fatal\n+    myPrioritizingDeadLine = System.currentTimeMillis() + 12 * 1000;\n+\n     myUiActivityThread = Thread.currentThread();\n     processStarted(UI_ACTIVITY);\n     //noinspection SSBasedInspection\n@@ -130,7 +136,14 @@ public void stopThreadPrioritizing() {\n    */\n   public boolean isInsideLowPriorityThread() {\n     Thread thread = myUiActivityThread;\n-    return thread != null && thread != Thread.currentThread();\n+    if (thread != null && thread != Thread.currentThread()) {\n+      if (System.currentTimeMillis() > myPrioritizingDeadLine) {\n+        stopThreadPrioritizing();\n+        return false;\n+      }\n+      return true;\n+    }\n+    return false;\n   }\n \n   /**",
      "parent_sha": "67a8ed4f48fd853ff538e80fa37f69a9289fa526"
    }
  },
  {
    "oid": "d43ab4362386369981144b6e32bd5eb97042e0db",
    "message": "remove bogus InspectionColorSettingsPage declarations",
    "date": "2010-12-15T18:01:18Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/d43ab4362386369981144b6e32bd5eb97042e0db",
    "details": {
      "sha": "6648208104158d5ea29ca69b03fab3715c727b05",
      "filename": "python/src/com/jetbrains/python/buildout/config/BuildoutCfgColorsPage.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/d43ab4362386369981144b6e32bd5eb97042e0db/python%2Fsrc%2Fcom%2Fjetbrains%2Fpython%2Fbuildout%2Fconfig%2FBuildoutCfgColorsPage.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/d43ab4362386369981144b6e32bd5eb97042e0db/python%2Fsrc%2Fcom%2Fjetbrains%2Fpython%2Fbuildout%2Fconfig%2FBuildoutCfgColorsPage.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/python%2Fsrc%2Fcom%2Fjetbrains%2Fpython%2Fbuildout%2Fconfig%2FBuildoutCfgColorsPage.java?ref=d43ab4362386369981144b6e32bd5eb97042e0db",
      "patch": "@@ -1,6 +1,5 @@\n package com.jetbrains.python.buildout.config;\n \n-import com.intellij.application.options.colors.InspectionColorSettingsPage;\n import com.intellij.openapi.editor.colors.TextAttributesKey;\n import com.intellij.openapi.fileTypes.SyntaxHighlighter;\n import com.intellij.openapi.options.colors.AttributesDescriptor;\n@@ -16,7 +15,7 @@\n /**\n  * @author traff\n  */\n-public class BuildoutCfgColorsPage implements ColorSettingsPage, InspectionColorSettingsPage {\n+public class BuildoutCfgColorsPage implements ColorSettingsPage {\n   private static final AttributesDescriptor[] ATTRS = new AttributesDescriptor[]{\n     new AttributesDescriptor(\"Section name\", BuildoutCfgSyntaxHighlighter.BUILDOUT_SECTION_NAME),\n     new AttributesDescriptor(\"Key\", BuildoutCfgSyntaxHighlighter.BUILDOUT_KEY),",
      "parent_sha": "9a576d87bb3bc9f14c82354d5c3a24565322feee"
    }
  },
  {
    "oid": "f29c781b6a0cd0df7b3dcaab417fcb55e7495749",
    "message": "perf prodolb fix",
    "date": "2008-03-26T11:58:49Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/f29c781b6a0cd0df7b3dcaab417fcb55e7495749",
    "details": {
      "sha": "1c8156c6d13a17a5b3834ca887e6ba24391727c7",
      "filename": "vcs-impl/src/com/intellij/openapi/vcs/changes/VcsDirtyScopeImpl.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/f29c781b6a0cd0df7b3dcaab417fcb55e7495749/vcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvcs%2Fchanges%2FVcsDirtyScopeImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/f29c781b6a0cd0df7b3dcaab417fcb55e7495749/vcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvcs%2Fchanges%2FVcsDirtyScopeImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/vcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvcs%2Fchanges%2FVcsDirtyScopeImpl.java?ref=f29c781b6a0cd0df7b3dcaab417fcb55e7495749",
      "patch": "@@ -137,11 +137,10 @@ public void run() {\n               }\n             }\n           }\n-          else {\n-            for (FilePath oldBoy : myDirtyFiles) {\n-              if (oldBoy.isDirectory() && newcomer.getVirtualFileParent() == oldBoy.getVirtualFile()) {\n-                return;\n-              }\n+          else if (myDirtyFiles.size() > 0) {\n+            VirtualFile parent = newcomer.getVirtualFileParent();\n+            if (parent != null && myDirtyFiles.contains(new FilePathImpl(parent))) {\n+              return;\n             }\n           }\n ",
      "parent_sha": "d4eeefd27e7213701760e9ba617956ad6ecbebed"
    }
  },
  {
    "oid": "dbf09b5d0aeddb7bceb02dc700426f2453fdb89d",
    "message": "IDEA-199265 tasks: fix \"Switch Task\" action presentation in \"Main menu\"\n\nfix regression after 73c1f2555c8e5f8f7563c7cb7fa312754b401083",
    "date": "2018-09-24T13:50:56Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/dbf09b5d0aeddb7bceb02dc700426f2453fdb89d",
    "details": {
      "sha": "1400277e091b876f1cc459bebf54ea6ffc33770d",
      "filename": "plugins/tasks/tasks-core/src/com/intellij/tasks/actions/SwitchTaskAction.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/dbf09b5d0aeddb7bceb02dc700426f2453fdb89d/plugins%2Ftasks%2Ftasks-core%2Fsrc%2Fcom%2Fintellij%2Ftasks%2Factions%2FSwitchTaskAction.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/dbf09b5d0aeddb7bceb02dc700426f2453fdb89d/plugins%2Ftasks%2Ftasks-core%2Fsrc%2Fcom%2Fintellij%2Ftasks%2Factions%2FSwitchTaskAction.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Ftasks%2Ftasks-core%2Fsrc%2Fcom%2Fintellij%2Ftasks%2Factions%2FSwitchTaskAction.java?ref=dbf09b5d0aeddb7bceb02dc700426f2453fdb89d",
      "patch": "@@ -69,24 +69,27 @@ public void update(@NotNull AnActionEvent e) {\n       presentation.setText(\"\");\n       presentation.setIcon(null);\n     }\n-    else {\n+    else if (e.isFromActionToolbar()) {\n       TaskManager taskManager = TaskManager.getManager(project);\n       LocalTask activeTask = taskManager.getActiveTask();\n-      presentation.setVisible(true);\n-      presentation.setEnabled(true);\n \n       if (isImplicit(activeTask) &&\n           taskManager.getAllRepositories().length == 0 &&\n           !TaskSettings.getInstance().ALWAYS_DISPLAY_COMBO) {\n-        presentation.setVisible(false);\n+        presentation.setEnabledAndVisible(false);\n       }\n       else {\n         String s = getText(activeTask);\n+        presentation.setEnabledAndVisible(true);\n         presentation.setText(s);\n         presentation.setIcon(activeTask.getIcon());\n         presentation.setDescription(activeTask.getSummary());\n       }\n     }\n+    else {\n+      presentation.setEnabledAndVisible(true);\n+      presentation.copyFrom(getTemplatePresentation());\n+    }\n   }\n \n   private static boolean isImplicit(LocalTask activeTask) {",
      "parent_sha": "d28aac1be539e82d7ce2039f07385392fdc1ec1f"
    }
  },
  {
    "oid": "2441755253fb0deb50d0a1e637fd7627e12bf982",
    "message": "secret command-line property do.not.watch.threads=true",
    "date": "2009-03-10T17:21:51Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/2441755253fb0deb50d0a1e637fd7627e12bf982",
    "details": {
      "sha": "b0b4b20f7fc43a6bb61cc1563786052e02eaf6e8",
      "filename": "platform-impl/src/com/intellij/diagnostic/PerformanceWatcher.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/2441755253fb0deb50d0a1e637fd7627e12bf982/platform-impl%2Fsrc%2Fcom%2Fintellij%2Fdiagnostic%2FPerformanceWatcher.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/2441755253fb0deb50d0a1e637fd7627e12bf982/platform-impl%2Fsrc%2Fcom%2Fintellij%2Fdiagnostic%2FPerformanceWatcher.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform-impl%2Fsrc%2Fcom%2Fintellij%2Fdiagnostic%2FPerformanceWatcher.java?ref=2441755253fb0deb50d0a1e637fd7627e12bf982",
      "patch": "@@ -106,7 +106,7 @@ public void disposeComponent() {\n   }\n \n   private static boolean shallNotWatch() {\n-    return ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().isHeadlessEnvironment();\n+    return ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().isHeadlessEnvironment() || Boolean.getBoolean(\"do.not.watch.threads\");\n   }\n \n   private void checkEDTResponsiveness() {",
      "parent_sha": "524f4530acd42182e62a7c7852fdc90e310b0529"
    }
  },
  {
    "oid": "d206064747de981c398cbfd4105a58b419676bc2",
    "message": " renderer for dirs",
    "date": "2013-10-23T15:28:15Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/d206064747de981c398cbfd4105a58b419676bc2",
    "details": {
      "sha": "68f5c6536b0676257bf2b07d7d5f34944b826f28",
      "filename": "platform/lang-impl/src/com/intellij/ide/actions/SearchEverywhereAction.java",
      "status": "modified",
      "additions": 13,
      "deletions": 10,
      "changes": 23,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/d206064747de981c398cbfd4105a58b419676bc2/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FSearchEverywhereAction.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/d206064747de981c398cbfd4105a58b419676bc2/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FSearchEverywhereAction.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FSearchEverywhereAction.java?ref=d206064747de981c398cbfd4105a58b419676bc2",
      "patch": "@@ -632,12 +632,15 @@ public void setLocationString(String locationString) {\n     @Override\n     public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n       Component cmp;\n-      PsiFile file;\n+      PsiFile file = null;\n       myLocationString = null;\n       if (isMoreItem(index)) {\n         cmp = More.get(isSelected);\n-      } else if (value instanceof VirtualFile && myProject != null && (file = PsiManager.getInstance(myProject).findFile((VirtualFile)value)) != null) {\n-        cmp = new GotoFileCellRenderer(list.getWidth()).getListCellRendererComponent(list, file, index, isSelected, cellHasFocus);\n+      } else if (value instanceof VirtualFile\n+                 && myProject != null\n+                 && (((VirtualFile)value).isDirectory()\n+                     || (file = PsiManager.getInstance(myProject).findFile((VirtualFile)value)) != null)) {\n+        cmp = new GotoFileCellRenderer(list.getWidth()).getListCellRendererComponent(list, file == null ? value : file, index, isSelected, cellHasFocus);\n       } else if (value instanceof PsiElement) {\n         cmp = myPsiRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);\n       } else {\n@@ -952,7 +955,7 @@ private void buildFiles(String pattern) {\n         myFiles = myFileModel.getNames(false);\n       }\n       List<MatchResult> matches = collectResults(pattern, myFiles, myFileModel);\n-      final List<VirtualFile> files = new ArrayList<VirtualFile>();\n+      final List<Object> files = new ArrayList<Object>();\n       FindSymbolParameters parameters = FindSymbolParameters.wrap(pattern, project, false);\n       final int maxFiles = 8;\n       for (MatchResult o : matches) {\n@@ -963,14 +966,14 @@ private void buildFiles(String pattern) {\n           if (!myListModel.contains(object)) {\n             if (object instanceof PsiFile) {\n               object = ((PsiFile)object).getVirtualFile();\n-            } else if (object instanceof PsiDirectory) {\n-              object = ((PsiDirectory)object).getVirtualFile();\n             }\n-            if (object instanceof VirtualFile\n-                && !myAlreadyAddedFiles.contains((VirtualFile)object)\n+            if ((object instanceof VirtualFile || object instanceof PsiDirectory)\n+                && !myAlreadyAddedFiles.contains(object)\n                 /*&& !((VirtualFile)object).isDirectory()*/) {\n-              files.add((VirtualFile)object);\n-              myAlreadyAddedFiles.add((VirtualFile)object);\n+              files.add(object);\n+              if (object instanceof VirtualFile) {\n+                myAlreadyAddedFiles.add((VirtualFile)object);\n+              }\n               filesCounter++;\n               if (filesCounter > maxFiles) break;\n             }",
      "parent_sha": "aa310e767a6a1c8e7f32928fdd9fe53b00537a50"
    }
  },
  {
    "oid": "3d1dbd5ff4ce14bdde5affc38a3a7acff4d3351e",
    "message": "IDEA-87639 Add a possibility to specify a dependent LF spacing if a checked range does NOT have line feeds.\n\nFix teamcity compilation (type parameters of T cannot be determined; no unique maximal instance exists for type variable T with upper bounds int,java.lang.Object return myRule.getData(DependentSpacingRule.Anchor.MIN_LINE_FEEDS);)",
    "date": "2012-06-28T11:47:09Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/3d1dbd5ff4ce14bdde5affc38a3a7acff4d3351e",
    "details": {
      "sha": "643e08ed1049ccadc981dccaa6c679a82baf7405",
      "filename": "platform/lang-api/src/com/intellij/formatting/DependentSpacingRule.java",
      "status": "modified",
      "additions": 9,
      "deletions": 11,
      "changes": 20,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/3d1dbd5ff4ce14bdde5affc38a3a7acff4d3351e/platform%2Flang-api%2Fsrc%2Fcom%2Fintellij%2Fformatting%2FDependentSpacingRule.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/3d1dbd5ff4ce14bdde5affc38a3a7acff4d3351e/platform%2Flang-api%2Fsrc%2Fcom%2Fintellij%2Fformatting%2FDependentSpacingRule.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-api%2Fsrc%2Fcom%2Fintellij%2Fformatting%2FDependentSpacingRule.java?ref=3d1dbd5ff4ce14bdde5affc38a3a7acff4d3351e",
      "patch": "@@ -16,11 +16,9 @@\n package com.intellij.formatting;\n \n import com.intellij.openapi.util.TextRange;\n+import gnu.trove.TObjectIntHashMap;\n import org.jetbrains.annotations.NotNull;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n /**\n  * Holds settings that should be used if\n  * {@link Spacing#createDependentLFSpacing(int, int, TextRange, boolean, int, DependentSpacingRule) dependent spacing}\n@@ -38,13 +36,14 @@ enum Anchor {\n   enum Trigger {\n     HAS_LINE_FEEDS, DOES_NOT_HAVE_LINE_FEEDS\n   }\n-  \n-  public static final DependentSpacingRule DEFAULT = new DependentSpacingRule(Trigger.HAS_LINE_FEEDS).registerData(Anchor.MIN_LINE_FEEDS, 1);\n \n-  private final Map<Anchor, Object> myData = new HashMap<Anchor, Object>();\n+  public static final DependentSpacingRule DEFAULT =\n+    new DependentSpacingRule(Trigger.HAS_LINE_FEEDS).registerData(Anchor.MIN_LINE_FEEDS, 1);\n+\n+  private final TObjectIntHashMap<Anchor> myData = new TObjectIntHashMap<Anchor>();\n \n   @NotNull private final Trigger myTrigger;\n-  \n+\n   public DependentSpacingRule(@NotNull Trigger trigger) {\n     myTrigger = trigger;\n   }\n@@ -62,7 +61,7 @@ public Trigger getTrigger() {\n    * @param <T>     data's type\n    * @see #getData(Anchor)\n    */\n-  public <T> DependentSpacingRule registerData(@NotNull Anchor anchor, @NotNull T data) {\n+  public DependentSpacingRule registerData(@NotNull Anchor anchor, int data) {\n     myData.put(anchor, data);\n     return this;\n   }\n@@ -85,13 +84,12 @@ public boolean hasData(@NotNull Anchor anchor) {\n    * @throws IllegalArgumentException   if no data is registered for the given anchor\n    *                                    (use {@link #hasData(Anchor)} for the preliminary examination)\n    */\n-  @SuppressWarnings(\"unchecked\")\n-  public <T> T getData(@NotNull Anchor anchor) throws IllegalArgumentException {\n+  public int getData(@NotNull Anchor anchor) throws IllegalArgumentException {\n     if (!myData.containsKey(anchor)) {\n       throw new IllegalArgumentException(String.format(\n         \"No data is registered for the dependent spacing rule %s. Registered: %s\", anchor, myData\n       ));\n     }\n-    return (T)myData.get(anchor);\n+    return myData.get(anchor);\n   }\n }",
      "parent_sha": "657c523636b4fa46b8895c98abafc162cf6909cf"
    }
  },
  {
    "oid": "e85973230b64a74d3b2accaae45da1ccea96de2c",
    "message": "cleanup \u2014 rename",
    "date": "2018-05-02T13:24:27Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/e85973230b64a74d3b2accaae45da1ccea96de2c",
    "details": {
      "sha": "40ef5aab3a40b5e454ace225637676d78988f465",
      "filename": "platform/platform-impl/src/com/intellij/openapi/wm/impl/DesktopLayout.java",
      "status": "modified",
      "additions": 23,
      "deletions": 34,
      "changes": 57,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/e85973230b64a74d3b2accaae45da1ccea96de2c/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2FDesktopLayout.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/e85973230b64a74d3b2accaae45da1ccea96de2c/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2FDesktopLayout.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2FDesktopLayout.java?ref=e85973230b64a74d3b2accaae45da1ccea96de2c",
      "patch": "@@ -11,7 +11,6 @@\n import com.intellij.util.containers.ContainerUtil;\n import gnu.trove.THashMap;\n import org.jdom.Element;\n-import org.jetbrains.annotations.NonNls;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n@@ -24,40 +23,38 @@\n  */\n public final class DesktopLayout {\n   private static final Logger LOG = Logger.getInstance(DesktopLayout.class);\n+  private static final Comparator<WindowInfoImpl> ourWindowInfoComparator = Comparator.comparingInt(WindowInfoImpl::getOrder);\n+  static final String TAG = \"layout\";\n \n-  @NonNls static final String TAG = \"layout\";\n   /**\n    * Map between {@code id}s and registered {@code WindowInfo}s.\n    */\n-  private final Map<String, WindowInfoImpl> myRegisteredId2Info = new HashMap<>();\n+  private final Map<String, WindowInfoImpl> myRegisteredIdToInfo = new THashMap<>();\n+\n   /**\n    * Map between {@code id}s and unregistered {@code WindowInfo}s.\n    */\n-  private final Map<String, WindowInfoImpl> myUnregisteredId2Info = new THashMap<>();\n-  /**\n-   *\n-   */\n-  private static final MyWindowInfoComparator ourWindowInfoComparator = new MyWindowInfoComparator();\n+  private final Map<String, WindowInfoImpl> myUnregisteredIdToInfo = new THashMap<>();\n \n   private final ClearableLazyValue<List<WindowInfoImpl>> myRegisteredInfos = new ClearableLazyValue<List<WindowInfoImpl>>() {\n     @NotNull\n     @Override\n     protected List<WindowInfoImpl> compute() {\n-      if (myRegisteredId2Info.isEmpty()) {\n+      if (myRegisteredIdToInfo.isEmpty()) {\n         return Collections.emptyList();\n       }\n-      return new ArrayList<>(myRegisteredId2Info.values());\n+      return new ArrayList<>(myRegisteredIdToInfo.values());\n     }\n   };\n \n   private final ClearableLazyValue<List<WindowInfoImpl>> myUnregisteredInfos = new ClearableLazyValue<List<WindowInfoImpl>>() {\n     @NotNull\n     @Override\n     protected List<WindowInfoImpl> compute() {\n-      if (myUnregisteredId2Info.isEmpty()) {\n+      if (myUnregisteredIdToInfo.isEmpty()) {\n         return Collections.emptyList();\n       }\n-      return new ArrayList<>(myUnregisteredId2Info.values());\n+      return new ArrayList<>(myUnregisteredIdToInfo.values());\n     }\n   };\n \n@@ -76,14 +73,14 @@ protected List<WindowInfoImpl> compute() {\n    */\n   public final void copyFrom(@NotNull DesktopLayout layout) {\n     for (WindowInfoImpl info1 : layout.getAllInfos()) {\n-      WindowInfoImpl info = myRegisteredId2Info.get(info1.getId());\n+      WindowInfoImpl info = myRegisteredIdToInfo.get(info1.getId());\n       if (info != null) {\n         info.copyFrom(info1);\n         continue;\n       }\n-      info = myUnregisteredId2Info.get(info1.getId());\n+      info = myUnregisteredIdToInfo.get(info1.getId());\n       if (info == null) {\n-        myUnregisteredId2Info.put(info1.getId(), info1.copy());\n+        myUnregisteredIdToInfo.put(info1.getId(), info1.copy());\n       }\n       else {\n         info.copyFrom(info1);\n@@ -111,7 +108,7 @@ private void invalidateCaches() {\n    * @param anchor the default tool window anchor.\n    */\n   final WindowInfoImpl register(@NotNull String id, @NotNull ToolWindowAnchor anchor, final boolean splitMode) {\n-    WindowInfoImpl info = myUnregisteredId2Info.get(id);\n+    WindowInfoImpl info = myUnregisteredIdToInfo.get(id);\n     if (info == null) {\n       // tool window is being registered first time\n       info = new WindowInfoImpl();\n@@ -121,16 +118,16 @@ final WindowInfoImpl register(@NotNull String id, @NotNull ToolWindowAnchor anch\n     }\n     else {\n       // tool window has been already registered some time\n-      myUnregisteredId2Info.remove(id);\n+      myUnregisteredIdToInfo.remove(id);\n     }\n-    myRegisteredId2Info.put(id, info);\n+    myRegisteredIdToInfo.put(id, info);\n     invalidateCaches();\n     return info;\n   }\n \n   final void unregister(@NotNull String id) {\n-    final WindowInfoImpl info = myRegisteredId2Info.remove(id).copy();\n-    myUnregisteredId2Info.put(id, info);\n+    final WindowInfoImpl info = myRegisteredIdToInfo.remove(id).copy();\n+    myUnregisteredIdToInfo.put(id, info);\n     invalidateCaches();\n   }\n \n@@ -140,11 +137,11 @@ final void unregister(@NotNull String id) {\n    *         value if and only if window with {@code id} is registered one.\n    */\n   final WindowInfoImpl getInfo(@NotNull String id, final boolean onlyRegistered) {\n-    final WindowInfoImpl info = myRegisteredId2Info.get(id);\n+    final WindowInfoImpl info = myRegisteredIdToInfo.get(id);\n     if (onlyRegistered || info != null) {\n       return info;\n     }\n-    return myUnregisteredId2Info.get(id);\n+    return myUnregisteredIdToInfo.get(id);\n   }\n \n   @Nullable\n@@ -209,16 +206,15 @@ private static void normalizeOrder(@NotNull List<WindowInfoImpl> infos) {\n   }\n \n   final boolean isToolWindowRegistered(@NotNull String id) {\n-    return myRegisteredId2Info.containsKey(id);\n+    return myRegisteredIdToInfo.containsKey(id);\n   }\n \n   final boolean isToolWindowUnregistered(@NotNull String id) {\n-    return myUnregisteredId2Info.containsKey(id);\n+    return myUnregisteredIdToInfo.containsKey(id);\n   }\n \n   /**\n-   * @return comparator which compares {@code StripeButtons} in the stripe with\n-   *         specified {@code anchor}.\n+   * @return comparator which compares {@code StripeButtons} in the stripe with specified {@code anchor}.\n    */\n   @NotNull\n   final Comparator<StripeButton> comparator(@NotNull ToolWindowAnchor anchor) {\n@@ -288,7 +284,7 @@ public final void readExternal(@NotNull Element layoutElement) {\n         // if order isn't defined then window's button will be the last one in the stripe\n         info.setOrder(getMaxOrder(info.getAnchor()) + 1);\n       }\n-      myUnregisteredId2Info.put(info.getId(), info);\n+      myUnregisteredIdToInfo.put(info.getId(), info);\n     }\n   }\n \n@@ -329,13 +325,6 @@ List<String> getVisibleIdsOn(@NotNull ToolWindowAnchor anchor, @NotNull ToolWind\n     return ids;\n   }\n \n-  private static final class MyWindowInfoComparator implements Comparator<WindowInfoImpl> {\n-    @Override\n-    public int compare(final WindowInfoImpl info1, final WindowInfoImpl info2) {\n-      return info1.getOrder() - info2.getOrder();\n-    }\n-  }\n-\n   private final class MyStripeButtonComparator implements Comparator<StripeButton> {\n     private final HashMap<String, WindowInfoImpl> myId2Info = new HashMap<>();\n ",
      "parent_sha": "87c1341fe968238dfc705ed352e0d3fcc72133aa"
    }
  },
  {
    "oid": "af4548d755b24ddbf38f521ab4bbaeda65f8d0d9",
    "message": "Fix for IDEADEV-949",
    "date": "2005-07-01T18:55:32Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/af4548d755b24ddbf38f521ab4bbaeda65f8d0d9",
    "details": {
      "sha": "945d2a03859719ac6094d6a2c4b91affbcf96138",
      "filename": "plugins/InspectionGadgets/src/com/siyeh/ig/naming/ConventionInspection.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/af4548d755b24ddbf38f521ab4bbaeda65f8d0d9/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fnaming%2FConventionInspection.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/af4548d755b24ddbf38f521ab4bbaeda65f8d0d9/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fnaming%2FConventionInspection.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fnaming%2FConventionInspection.java?ref=af4548d755b24ddbf38f521ab4bbaeda65f8d0d9",
      "patch": "@@ -4,6 +4,7 @@\n import com.siyeh.ig.BaseInspection;\n import com.siyeh.ig.RegExFormatter;\n import com.siyeh.ig.RegExInputVerifier;\n+import com.siyeh.ig.ui.FormattedTextFieldMacFix;\n import org.jdom.Element;\n \n import javax.swing.*;\n@@ -89,19 +90,21 @@ public JComponent createOptionsPanel() {\n         minLengthField.setFont(panelFont);\n         minLengthField.setValue(m_minLength);\n         minLengthField.setColumns(2);\n+        FormattedTextFieldMacFix.apply(minLengthField);\n \n         final JFormattedTextField maxLengthField = new JFormattedTextField(formatter);\n         maxLengthField.setFont(panelFont);\n         maxLengthField.setValue(m_maxLength);\n         maxLengthField.setColumns(2);\n+        FormattedTextFieldMacFix.apply(maxLengthField);\n \n         final JFormattedTextField regexField = new JFormattedTextField(new RegExFormatter());\n         regexField.setFont(panelFont);\n         regexField.setValue(m_regexPattern);\n         regexField.setColumns(REGEX_COLUMN_COUNT);\n         regexField.setInputVerifier(new RegExInputVerifier());\n         regexField.setFocusLostBehavior(JFormattedTextField.COMMIT);\n-\n+        FormattedTextFieldMacFix.apply(regexField);\n         final DocumentListener listener = new DocumentListener() {\n             public void changedUpdate(DocumentEvent e) {\n                 textChanged();",
      "parent_sha": "d33ce53e28a83512c6b2da13c8b41eb70b394e67"
    }
  },
  {
    "oid": "53c21ffdb3b67bedae23835431ae90d9d1060581",
    "message": "cleanup",
    "date": "2006-12-15T11:21:03Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/53c21ffdb3b67bedae23835431ae90d9d1060581",
    "details": {
      "sha": "53b4fd283e0b2598fa91073d620c2d3f1972957f",
      "filename": "source/com/intellij/psi/impl/source/html/HtmlTagImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/53c21ffdb3b67bedae23835431ae90d9d1060581/source%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Fsource%2Fhtml%2FHtmlTagImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/53c21ffdb3b67bedae23835431ae90d9d1060581/source%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Fsource%2Fhtml%2FHtmlTagImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/source%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Fsource%2Fhtml%2FHtmlTagImpl.java?ref=53c21ffdb3b67bedae23835431ae90d9d1060581",
      "patch": "@@ -14,11 +14,7 @@\n import java.util.Map;\n \n /**\n- * Created by IntelliJ IDEA.\n- * User: Maxim.Mossienko\n- * Date: Nov 2, 2004\n- * Time: 3:52:51 PM\n- * To change this template use File | Settings | File Templates.\n+ * @author Maxim.Mossienko\n  */\n public class HtmlTagImpl extends XmlTagImpl implements HtmlTag {\n   public HtmlTagImpl() {\n@@ -32,7 +28,6 @@ public XmlTag[] findSubTags(String name, String namespace) {\n     for (final XmlTag subTag : subTags) {\n       if (namespace == null) {\n         String tagName = subTag.getName();\n-        if (tagName == null) continue;\n         tagName = tagName.toLowerCase();\n \n         if (name == null || name.equals(tagName)) {",
      "parent_sha": "d3b3eeb3ff96ea8d79bd090ed71129f7044a9016"
    }
  },
  {
    "oid": "c3184d73fa1c65a9484e2ebe23070f197087892c",
    "message": "cosmetics",
    "date": "2012-11-20T18:43:38Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/c3184d73fa1c65a9484e2ebe23070f197087892c",
    "details": {
      "sha": "cf190d3a4d5416fef8224f352afe800b2e5abfe5",
      "filename": "jps/jps-builders/src/org/jetbrains/jps/incremental/java/JavaBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/c3184d73fa1c65a9484e2ebe23070f197087892c/jps%2Fjps-builders%2Fsrc%2Forg%2Fjetbrains%2Fjps%2Fincremental%2Fjava%2FJavaBuilder.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/c3184d73fa1c65a9484e2ebe23070f197087892c/jps%2Fjps-builders%2Fsrc%2Forg%2Fjetbrains%2Fjps%2Fincremental%2Fjava%2FJavaBuilder.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/jps%2Fjps-builders%2Fsrc%2Forg%2Fjetbrains%2Fjps%2Fincremental%2Fjava%2FJavaBuilder.java?ref=c3184d73fa1c65a9484e2ebe23070f197087892c",
      "patch": "@@ -170,8 +170,6 @@ public ExitCode build(final CompileContext context,\n     if (!IS_ENABLED.get(context, Boolean.TRUE)) {\n       return ExitCode.NOTHING_DONE;\n     }\n-    final JpsProject project = context.getProjectDescriptor().getProject();\n-    final JpsJavaCompilerConfiguration configuration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project);\n     try {\n       final Map<File, ModuleBuildTarget> filesToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY);\n       final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY);\n@@ -190,7 +188,8 @@ else if (FORM_SOURCES_FILTER.accept(file)) {\n \n       if (OPTION_ENABLE_FORMS_INSTRUMENTATION) {\n         // todo: track changes source-generation <-> bytecode-instrumentation in UIDesigner's config. Full forms rebuild required on switching configuration\n-\n+        final JpsProject project = context.getProjectDescriptor().getProject();\n+        final JpsJavaCompilerConfiguration configuration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project);\n         // force compilation of bound source file if the form is dirty\n         final JpsCompilerExcludes excludes = configuration.getCompilerExcludes();\n         if (!context.isProjectRebuild()) {",
      "parent_sha": "96458f22631f7710ffe1c6cb1c9ad823edad8c22"
    }
  },
  {
    "oid": "7cc212d11a46c2c1a79b68fc22ffbb1991596320",
    "message": "cleanup",
    "date": "2009-07-02T14:09:01Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/7cc212d11a46c2c1a79b68fc22ffbb1991596320",
    "details": {
      "sha": "7c4d1f500977e3644e7e799cb5a5f51048576886",
      "filename": "inspections/impl/com/intellij/codeInspection/SuppressManagerImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/7cc212d11a46c2c1a79b68fc22ffbb1991596320/inspections%2Fimpl%2Fcom%2Fintellij%2FcodeInspection%2FSuppressManagerImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/7cc212d11a46c2c1a79b68fc22ffbb1991596320/inspections%2Fimpl%2Fcom%2Fintellij%2FcodeInspection%2FSuppressManagerImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/inspections%2Fimpl%2Fcom%2Fintellij%2FcodeInspection%2FSuppressManagerImpl.java?ref=7cc212d11a46c2c1a79b68fc22ffbb1991596320",
      "patch": "@@ -156,14 +156,14 @@ public PsiElement compute() {\n           return modifierList != null ? modifierList.findAnnotation(SUPPRESS_INSPECTIONS_ANNOTATION_NAME) : null;\n         }\n \n-        PsiElement container = PsiTreeUtil.getNonStrictParentOfType(place, PsiDocCommentOwner.class);\n+        PsiDocCommentOwner container = PsiTreeUtil.getNonStrictParentOfType(place, PsiDocCommentOwner.class);\n         while (true) {\n           if (!(container instanceof PsiTypeParameter)) break;\n           container = PsiTreeUtil.getParentOfType(container, PsiDocCommentOwner.class);\n         }\n \n         if (container != null) {\n-          PsiElement element = getElementMemberSuppressedIn((PsiDocCommentOwner)container, toolId);\n+          PsiElement element = getElementMemberSuppressedIn(container, toolId);\n           if (element != null) return element;\n         }\n         PsiDocCommentOwner classContainer = PsiTreeUtil.getParentOfType(container, PsiDocCommentOwner.class, true);",
      "parent_sha": "a8eea918906e6739f56c40a8c9c033013c7713f3"
    }
  },
  {
    "oid": "aee2167566c710e58ae3a314801ac1e7f4be0a57",
    "message": "recover from PersistentHashMap storage format change",
    "date": "2013-10-22T15:07:57Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/aee2167566c710e58ae3a314801ac1e7f4be0a57",
    "details": {
      "sha": "f8cdc56ad79a6464299c898e249ab5127245a0e6",
      "filename": "java/java-impl/src/com/intellij/compilerOutputIndex/api/indexer/CompilerOutputBaseIndex.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/aee2167566c710e58ae3a314801ac1e7f4be0a57/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2FcompilerOutputIndex%2Fapi%2Findexer%2FCompilerOutputBaseIndex.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/aee2167566c710e58ae3a314801ac1e7f4be0a57/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2FcompilerOutputIndex%2Fapi%2Findexer%2FCompilerOutputBaseIndex.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2FcompilerOutputIndex%2Fapi%2Findexer%2FCompilerOutputBaseIndex.java?ref=aee2167566c710e58ae3a314801ac1e7f4be0a57",
      "patch": "@@ -9,6 +9,7 @@\n import com.intellij.openapi.util.text.StringUtil;\n import com.intellij.util.indexing.*;\n import com.intellij.util.io.DataExternalizer;\n+import com.intellij.util.io.IOUtil;\n import com.intellij.util.io.KeyDescriptor;\n import com.intellij.util.io.PersistentHashMap;\n import org.jetbrains.asm4.ClassReader;\n@@ -49,15 +50,26 @@ public final boolean init(final Project project) {\n         rewriteIndex.set(true);\n       }\n       final File storageFile = getStorageFile(indexId);\n-      final MapIndexStorage<K, V> indexStorage = new MapIndexStorage<K, V>(storageFile, myKeyDescriptor, myValueExternalizer, 1024);\n+      MapIndexStorage<K, V> indexStorage = null;\n+      for(int i = 0; i < 2; ++i) {\n+        try {\n+          indexStorage = new MapIndexStorage<K, V>(storageFile, myKeyDescriptor, myValueExternalizer, 1024);\n+        } catch (IOException ex) {\n+          if (i == 1) throw ex;\n+          IOUtil.deleteAllFilesStartingWith(storageFile);\n+        }\n+      }\n+\n+      assert indexStorage != null;\n       index = new MapReduceIndex<K, V, ClassReader>(indexId, getIndexer(), indexStorage);\n+      final MapIndexStorage<K, V> finalIndexStorage = indexStorage;\n       index.setInputIdToDataKeysIndex(new Factory<PersistentHashMap<Integer, Collection<K>>>() {\n         @Override\n         public PersistentHashMap<Integer, Collection<K>> create() {\n           Exception failCause = null;\n           for (int attempts = 0; attempts < 2; attempts++) {\n             try {\n-              return FileBasedIndexImpl.createIdToDataKeysIndex(indexId, myKeyDescriptor, new MemoryIndexStorage<K, V>(indexStorage));\n+              return FileBasedIndexImpl.createIdToDataKeysIndex(indexId, myKeyDescriptor, new MemoryIndexStorage<K, V>(finalIndexStorage));\n             }\n             catch (IOException e) {\n               failCause = e;",
      "parent_sha": "6e76b396966a03bf87cd59f6829cdc638435e0f1"
    }
  },
  {
    "oid": "b57119ebb25f06436c858da9403dcaaa8e6cf3e6",
    "message": "fixes",
    "date": "2008-04-08T14:00:48Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/b57119ebb25f06436c858da9403dcaaa8e6cf3e6",
    "details": {
      "sha": "4bf2e44123d9350aed86d3f99a9734692ff485f8",
      "filename": "source/com/intellij/slicer/SliceUtil.java",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/b57119ebb25f06436c858da9403dcaaa8e6cf3e6/source%2Fcom%2Fintellij%2Fslicer%2FSliceUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/b57119ebb25f06436c858da9403dcaaa8e6cf3e6/source%2Fcom%2Fintellij%2Fslicer%2FSliceUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/source%2Fcom%2Fintellij%2Fslicer%2FSliceUtil.java?ref=b57119ebb25f06436c858da9403dcaaa8e6cf3e6",
      "patch": "@@ -22,6 +22,7 @@ public static boolean processUsagesFlownDownToTheExpression(PsiExpression expres\n                                                               final Map<SliceUsage, List<SliceUsage>> targetEqualUsages) {\n     PsiMethod method = PsiTreeUtil.getParentOfType(expression, PsiMethod.class);\n     if (method == null) return true;\n+    expression = simplify(expression);\n     if (expression instanceof PsiReferenceExpression) {\n       PsiReferenceExpression ref = (PsiReferenceExpression)expression;\n       PsiElement resolved = ref.resolve();\n@@ -37,6 +38,16 @@ else if (expression instanceof PsiMethodCallExpression) {\n     return true;\n   }\n \n+  private static PsiExpression simplify(final PsiExpression expression) {\n+    if (expression instanceof PsiParenthesizedExpression) {\n+      return simplify(((PsiParenthesizedExpression)expression).getExpression());\n+    }\n+    if (expression instanceof PsiTypeCastExpression) {\n+      return simplify(((PsiTypeCastExpression)expression).getOperand());\n+    }\n+    return expression;\n+  }\n+\n   private static Collection<PsiExpression> getExpressionsFlownTo(final PsiExpression expression, final PsiMethod containingMethod, final PsiVariable variable) {\n     ValuableDataFlowRunner runner = new ValuableDataFlowRunner(expression);\n     assert PsiTreeUtil.isAncestor(containingMethod, expression, true);\n@@ -55,10 +66,6 @@ private static boolean processFlownFromExpressions(final Collection<PsiExpressio\n                                                      final SliceUsage parent,\n                                                      final Map<SliceUsage, List<SliceUsage>> targetEqualUsages, final PsiReferenceExpression ref) {\n     for (PsiExpression flowFromExpression : expressions) {\n-      while (flowFromExpression instanceof PsiParenthesizedExpression) {\n-        flowFromExpression = ((PsiParenthesizedExpression)flowFromExpression).getExpression();\n-      }\n-\n       if (flowFromExpression instanceof PsiReferenceExpression) {\n         PsiElement element = ((PsiReferenceExpression)flowFromExpression).resolve();\n         if (element instanceof PsiParameter) {\n@@ -71,7 +78,7 @@ private static boolean processFlownFromExpressions(final Collection<PsiExpressio\n         }\n       }\n       //generic usage\n-      SliceUsage usage = new SliceUsage(new UsageInfo(ref), targetEqualUsages, parent);\n+      SliceUsage usage = new SliceUsage(new UsageInfo(flowFromExpression), targetEqualUsages, parent);\n       if (!processor.process(usage)) return false;\n     }\n \n@@ -128,9 +135,11 @@ private static boolean processParameterUsages(final PsiParameter parameter, fina\n \n     Collection<PsiMethod> superMethods = new THashSet<PsiMethod>(Arrays.asList(method.findDeepestSuperMethods()));\n     superMethods.add(method);\n+    final Set<PsiReference> processed = new THashSet<PsiReference>(); //usages of super method and overridden method can overlap\n     for (final PsiMethod containingMethod : superMethods) {\n       if (!MethodReferencesSearch.search(containingMethod).forEach(new Processor<PsiReference>() {\n         public boolean process(final PsiReference reference) {\n+          if (!processed.add(reference)) return true;\n           PsiElement element = reference.getElement().getParent();\n           if (!(element instanceof PsiCall)) return true;\n           final PsiCall call = (PsiCall)element;",
      "parent_sha": "411320d03cdb4629044cb6cdcce3b2d98a29f0f4"
    }
  },
  {
    "oid": "8603fa23aee52a70638c74fac747e14be303535d",
    "message": "[git] initialize GitRepositoryManager in initComponent to avoid dependency conflicts",
    "date": "2013-01-22T13:16:21Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/8603fa23aee52a70638c74fac747e14be303535d",
    "details": {
      "sha": "b3aec771aa04b811c768104385cb95a901f42347",
      "filename": "plugins/git4idea/src/git4idea/repo/GitRepositoryManagerImpl.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/8603fa23aee52a70638c74fac747e14be303535d/plugins%2Fgit4idea%2Fsrc%2Fgit4idea%2Frepo%2FGitRepositoryManagerImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/8603fa23aee52a70638c74fac747e14be303535d/plugins%2Fgit4idea%2Fsrc%2Fgit4idea%2Frepo%2FGitRepositoryManagerImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fgit4idea%2Fsrc%2Fgit4idea%2Frepo%2FGitRepositoryManagerImpl.java?ref=8603fa23aee52a70638c74fac747e14be303535d",
      "patch": "@@ -39,23 +39,24 @@ public class GitRepositoryManagerImpl extends AbstractProjectComponent implement\n \n   private static final Logger LOG = Logger.getInstance(GitRepositoryManager.class);\n \n-  @NotNull private final AbstractVcs myVcs;\n   @NotNull private final ProjectLevelVcsManager myVcsManager;\n+  @NotNull private AbstractVcs myVcs;\n \n   @NotNull private final Map<VirtualFile, GitRepository> myRepositories = new HashMap<VirtualFile, GitRepository>();\n \n   @NotNull private final ReentrantReadWriteLock REPO_LOCK = new ReentrantReadWriteLock();\n   @NotNull private final GitPlatformFacade myPlatformFacade;\n \n-  public GitRepositoryManagerImpl(@NotNull Project project, @NotNull GitPlatformFacade platformFacade) {\n+  public GitRepositoryManagerImpl(@NotNull Project project, @NotNull GitPlatformFacade platformFacade,\n+                                  @NotNull ProjectLevelVcsManager vcsManager) {\n     super(project);\n     myPlatformFacade = platformFacade;\n-    myVcsManager = ProjectLevelVcsManager.getInstance(myProject);\n-    myVcs = platformFacade.getVcs(myProject);\n+    myVcsManager = vcsManager;\n   }\n \n   @Override\n   public void initComponent() {\n+    myVcs = myPlatformFacade.getVcs(myProject);\n     Disposer.register(myProject, this);\n     myProject.getMessageBus().connect().subscribe(ProjectLevelVcsManager.VCS_CONFIGURATION_CHANGED, this);\n     GitRootScanner rootScanner = new GitRootScanner(myProject);",
      "parent_sha": "23af4fb4c32970c21ab6f32b583395c9cc2fded5"
    }
  },
  {
    "oid": "454cfe2d9e8613636ebe85fa28fc29e4245df130",
    "message": "ui: do not load VirtualFile content on EDT to create deferred Icon\n\nEA-352886 F: ChangesBrowserChangeNode.render\n\nGitOrigin-RevId: d25e23cb8f0d5a67271c35cd34a6021eb4111d38",
    "date": "2022-09-23T12:39:09Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/454cfe2d9e8613636ebe85fa28fc29e4245df130",
    "details": {
      "sha": "c0b7ca4d264f8523bc8b5d07c09a831986a75f02",
      "filename": "platform/core-ui/src/util/IconUtil.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/454cfe2d9e8613636ebe85fa28fc29e4245df130/platform%2Fcore-ui%2Fsrc%2Futil%2FIconUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/454cfe2d9e8613636ebe85fa28fc29e4245df130/platform%2Fcore-ui%2Fsrc%2Futil%2FIconUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fcore-ui%2Fsrc%2Futil%2FIconUtil.java?ref=454cfe2d9e8613636ebe85fa28fc29e4245df130",
      "patch": "@@ -7,6 +7,7 @@\n import com.intellij.ide.TypePresentationService;\n import com.intellij.openapi.fileTypes.DirectoryFileType;\n import com.intellij.openapi.fileTypes.FileType;\n+import com.intellij.openapi.fileTypes.FileTypeRegistry;\n import com.intellij.openapi.project.DumbService;\n import com.intellij.openapi.project.Project;\n import com.intellij.openapi.util.*;\n@@ -153,7 +154,7 @@ public int getIconHeight() {\n     flags = filterFileIconFlags(file, flags);\n \n     Icon providersIcon = getProvidersIcon(file, flags, project);\n-    Icon icon = providersIcon != null ? providersIcon : computeBaseFileIcon(file);\n+    Icon icon = providersIcon != null ? providersIcon : computeFileTypeIcon(file, false);\n \n     boolean dumb = project != null && DumbService.getInstance(project).isDumb();\n     for (FileIconPatcher patcher : FileIconPatcher.EP_NAME.getExtensionList()) {\n@@ -204,11 +205,16 @@ private static int filterFileIconFlags(@NotNull VirtualFile file, @Iconable.Icon\n    * @see FileType#getIcon()\n    */\n   public static @NotNull Icon computeBaseFileIcon(@NotNull VirtualFile vFile) {\n+    return computeFileTypeIcon(vFile, true);\n+  }\n+\n+  private static @NotNull Icon computeFileTypeIcon(@NotNull VirtualFile vFile, boolean onlyFastChecks) {\n     Icon icon = TypePresentationService.getService().getIcon(vFile);\n     if (icon != null) {\n       return icon;\n     }\n-    FileType fileType = vFile.getFileType();\n+    FileType fileType = onlyFastChecks ? FileTypeRegistry.getInstance().getFileTypeByFileName(vFile.getName())\n+                                       : vFile.getFileType();\n     if (vFile.isDirectory() && !(fileType instanceof DirectoryFileType)) {\n       return IconManager.getInstance().tooltipOnlyIfComposite(PlatformIcons.FOLDER_ICON);\n     }",
      "parent_sha": "e6057704197fa4a4e9acfaa4b16e59c94d6f80aa"
    }
  },
  {
    "oid": "6dc596fabd0bc1cf5501fade1ba396be4f0a692f",
    "message": "more specific locators for non-text editors",
    "date": "2013-10-21T17:39:41Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/6dc596fabd0bc1cf5501fade1ba396be4f0a692f",
    "details": {
      "sha": "3f0565326216af2af024e2296207a3cc63365ffc",
      "filename": "platform/lang-impl/src/com/intellij/ide/actions/SelectInContextImpl.java",
      "status": "modified",
      "additions": 19,
      "deletions": 11,
      "changes": 30,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/6dc596fabd0bc1cf5501fade1ba396be4f0a692f/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FSelectInContextImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/6dc596fabd0bc1cf5501fade1ba396be4f0a692f/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FSelectInContextImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FSelectInContextImpl.java?ref=6dc596fabd0bc1cf5501fade1ba396be4f0a692f",
      "patch": "@@ -18,15 +18,17 @@\n \n import com.intellij.ide.FileEditorProvider;\n import com.intellij.ide.SelectInContext;\n+import com.intellij.ide.structureView.StructureView;\n+import com.intellij.ide.structureView.StructureViewBuilder;\n import com.intellij.openapi.actionSystem.AnActionEvent;\n import com.intellij.openapi.actionSystem.CommonDataKeys;\n import com.intellij.openapi.actionSystem.DataContext;\n-import com.intellij.openapi.actionSystem.LangDataKeys;\n import com.intellij.openapi.actionSystem.PlatformDataKeys;\n import com.intellij.openapi.editor.Document;\n import com.intellij.openapi.fileEditor.*;\n import com.intellij.openapi.fileEditor.ex.FileEditorManagerEx;\n import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Disposer;\n import com.intellij.openapi.vfs.VirtualFile;\n import com.intellij.pom.Navigatable;\n import com.intellij.psi.PsiDocumentManager;\n@@ -35,6 +37,7 @@\n import com.intellij.psi.PsiManager;\n import com.intellij.psi.templateLanguages.TemplateLanguageFileViewProvider;\n import com.intellij.util.ArrayUtil;\n+import com.intellij.util.ObjectUtils;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n@@ -139,7 +142,11 @@ private static SelectInContext doCreateEditorContext(Project project, FileEditor\n       return new TextEditorContext((TextEditor)editor, psiFile);\n     }\n     else {\n-      return new SimpleSelectInContext(psiFile);\n+      StructureViewBuilder builder = editor.getStructureViewBuilder();\n+      StructureView structureView = builder != null ? builder.createStructureView(editor, project) : null;\n+      Object selectorInFile = structureView != null ? structureView.getTreeModel().getCurrentEditorElement() : null;\n+      if (structureView != null) Disposer.dispose(structureView);\n+      return new SimpleSelectInContext(psiFile, ObjectUtils.chooseNotNull(selectorInFile, psiFile));\n     }\n   }\n \n@@ -235,30 +242,31 @@ public static SelectInContext create(Project project, VirtualFile file) {\n   }\n \n   private static class SimpleSelectInContext extends SelectInContextImpl {\n-    private final PsiElement myElementToSelect;\n+    private final Object mySelector;\n \n-    public SimpleSelectInContext(PsiFile psiFile) {\n-      this(psiFile, psiFile);\n+    public SimpleSelectInContext(PsiFile psiFile, Object selector) {\n+      super(psiFile);\n+      mySelector = selector;\n+    }\n+\n+    @Override\n+    public Object getSelectorInFile() {\n+      return mySelector;\n     }\n \n     @Override\n     public FileEditorProvider getFileEditorProvider() {\n       return new FileEditorProvider() {\n         @Override\n         public FileEditor openFileEditor() {\n-          final VirtualFile file = myElementToSelect.getContainingFile().getVirtualFile();\n+          final VirtualFile file = myPsiFile.getVirtualFile();\n           if (file == null) {\n             return null;\n           }\n           return ArrayUtil.getFirstElement(FileEditorManager.getInstance(getProject()).openFile(file, false));\n         }\n       };\n     }\n-\n-    public SimpleSelectInContext(PsiFile psiFile, PsiElement elementToSelect) {\n-      super(psiFile);\n-      myElementToSelect = elementToSelect;\n-    }\n    }\n \n   private static class VirtualFileSelectInContext implements SelectInContext {",
      "parent_sha": "42004a0af307cceab8e90009f770ad17c22d7c79"
    }
  },
  {
    "oid": "76dd2aaa7fe2efc966dfde457d91c682aa1a13a6",
    "message": "Change to non-dumb-aware activity so that plugin enabling interferes less with startup activities\n\nGitOrigin-RevId: e85b823d8dd3eff825124f7d6c0e1bf9b5d3df41",
    "date": "2020-05-12T13:45:56Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/76dd2aaa7fe2efc966dfde457d91c682aa1a13a6",
    "details": {
      "sha": "dde091fa64b504fccbe085ed79ccf9ad839ef5ae",
      "filename": "platform/platform-impl/src/com/intellij/externalDependencies/impl/CheckRequiredPluginsActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/76dd2aaa7fe2efc966dfde457d91c682aa1a13a6/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2FexternalDependencies%2Fimpl%2FCheckRequiredPluginsActivity.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/76dd2aaa7fe2efc966dfde457d91c682aa1a13a6/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2FexternalDependencies%2Fimpl%2FCheckRequiredPluginsActivity.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2FexternalDependencies%2Fimpl%2FCheckRequiredPluginsActivity.java?ref=76dd2aaa7fe2efc966dfde457d91c682aa1a13a6",
      "patch": "@@ -26,7 +26,7 @@\n import java.util.List;\n import java.util.Set;\n \n-final class CheckRequiredPluginsActivity implements StartupActivity.DumbAware {\n+final class CheckRequiredPluginsActivity implements StartupActivity {\n   private static final Logger LOG = Logger.getInstance(CheckRequiredPluginsActivity.class);\n   private static final NotificationGroup NOTIFICATION_GROUP = new NotificationGroup(\"Required Plugins\", NotificationDisplayType.BALLOON, true);\n ",
      "parent_sha": "cf129ab9ffe9b26c1ed2e4e6787507aed7bacfdd"
    }
  },
  {
    "oid": "3ebbdd67940a1a7f45aeafe4f3e87fbeae82780a",
    "message": "fix artifacts when tabs hidden",
    "date": "2012-01-27T09:59:41Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/3ebbdd67940a1a7f45aeafe4f3e87fbeae82780a",
    "details": {
      "sha": "944876b1cca37f05a950faafa69d334a65b097e1",
      "filename": "platform/lang-impl/src/com/intellij/execution/ui/layout/impl/JBRunnerTabs.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/3ebbdd67940a1a7f45aeafe4f3e87fbeae82780a/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fui%2Flayout%2Fimpl%2FJBRunnerTabs.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/3ebbdd67940a1a7f45aeafe4f3e87fbeae82780a/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fui%2Flayout%2Fimpl%2FJBRunnerTabs.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fui%2Flayout%2Fimpl%2FJBRunnerTabs.java?ref=3ebbdd67940a1a7f45aeafe4f3e87fbeae82780a",
      "patch": "@@ -137,18 +137,21 @@ protected void paintSelectionAndBorder(Graphics2D g2d) {\n     int _y = r.y;\n     int _height = r.height;\n \n-    g2d.setPaint(new GradientPaint(_x, _y, new SameColor(255), _x, _y + _height, UIUtil.getPanelBackground()));\n+    if (!isHideTabs()) {\n+      g2d.setPaint(new GradientPaint(_x, _y, new SameColor(255), _x, _y + _height, UIUtil.getPanelBackground()));\n \n-    g2d.fill(selectedShape.fillPath.getShape());\n-\n-    g2d.setColor(new Color(255, 255, 255, 180));\n-    g2d.draw(selectedShape.fillPath.getShape());\n+      g2d.fill(selectedShape.fillPath.getShape());\n \n+      g2d.setColor(new Color(255, 255, 255, 180));\n+      g2d.draw(selectedShape.fillPath.getShape());\n+    }\n     g2d.setColor(UIUtil.getPanelBackground());\n     g2d.fillRect(2, selectedShape.labelPath.getMaxY() - 3, selectedShape.path.getMaxX() - 3, 4);\n     g2d.drawLine(1, selectedShape.labelPath.getMaxY(), 1, getHeight() - 1);\n     g2d.drawLine(selectedShape.path.getMaxX() - 1, selectedShape.labelPath.getMaxY() - 4,\n                  selectedShape.path.getMaxX() - 1, getHeight() - 1);\n+\n+    if (isHideTabs()) return;\n     g2d.setColor(new Color(0, 0, 0, 50));\n     g2d.drawLine(1, selectedShape.labelPath.getMaxY(), 1, getHeight() - 1);\n     g2d.drawLine(selectedShape.path.getMaxX() - 1, selectedShape.labelPath.getMaxY() - 4,",
      "parent_sha": "3418cf19788dec9150f0016041c66958d0a28c6b"
    }
  },
  {
    "oid": "e4f8d3dc74272ff72ef96bf0fcf930733c22a04e",
    "message": "IJPL-162726 IJent: implement forgotten methods, protect from NPE\n\nGitOrigin-RevId: db932a499a925944f75ea10cdfb0e6cbcb070b7f",
    "date": "2024-10-31T10:42:33Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/e4f8d3dc74272ff72ef96bf0fcf930733c22a04e",
    "details": {
      "sha": "fa1e425a7e85a5a157fda3496c3e6008eff74784",
      "filename": "platform/core-nio-fs/src/com/intellij/platform/core/nio/fs/MultiRoutingWatchServiceDelegate.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/e4f8d3dc74272ff72ef96bf0fcf930733c22a04e/platform%2Fcore-nio-fs%2Fsrc%2Fcom%2Fintellij%2Fplatform%2Fcore%2Fnio%2Ffs%2FMultiRoutingWatchServiceDelegate.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/e4f8d3dc74272ff72ef96bf0fcf930733c22a04e/platform%2Fcore-nio-fs%2Fsrc%2Fcom%2Fintellij%2Fplatform%2Fcore%2Fnio%2Ffs%2FMultiRoutingWatchServiceDelegate.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fcore-nio-fs%2Fsrc%2Fcom%2Fintellij%2Fplatform%2Fcore%2Fnio%2Ffs%2FMultiRoutingWatchServiceDelegate.java?ref=e4f8d3dc74272ff72ef96bf0fcf930733c22a04e",
      "patch": "@@ -25,16 +25,21 @@ public void close() throws IOException {\n   @Override\n   public WatchKey poll() {\n     WatchKey watchKey = myDelegate.poll();\n+    if (watchKey == null) return null;\n     return new MultiRoutingWatchKeyDelegate(watchKey, myProvider);\n   }\n \n   @Override\n   public WatchKey poll(long timeout, TimeUnit unit) throws InterruptedException {\n-    return null;\n+    WatchKey watchKey = myDelegate.poll(timeout, unit);\n+    if (watchKey == null) return null;\n+    return new MultiRoutingWatchKeyDelegate(watchKey, myProvider);\n   }\n \n   @Override\n   public WatchKey take() throws InterruptedException {\n-    return null;\n+    WatchKey watchKey = myDelegate.take();\n+    if (watchKey == null) return null;\n+    return new MultiRoutingWatchKeyDelegate(watchKey, myProvider);\n   }\n }",
      "parent_sha": "98c06ab17a2a16ac88696e9b78ef4201b4747c70"
    }
  },
  {
    "oid": "cb30225546a0dc4b4ae443f1d5d52168efb1f64c",
    "message": "remove \"...\" from welcome screen",
    "date": "2014-10-23T09:58:40Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/cb30225546a0dc4b4ae443f1d5d52168efb1f64c",
    "details": {
      "sha": "5a3800cff537b90227dee499410c1d8db6cf294e",
      "filename": "platform/platform-impl/src/com/intellij/openapi/wm/impl/welcomeScreen/FlatWelcomeFrame.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/cb30225546a0dc4b4ae443f1d5d52168efb1f64c/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2FwelcomeScreen%2FFlatWelcomeFrame.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/cb30225546a0dc4b4ae443f1d5d52168efb1f64c/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2FwelcomeScreen%2FFlatWelcomeFrame.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2FwelcomeScreen%2FFlatWelcomeFrame.java?ref=cb30225546a0dc4b4ae443f1d5d52168efb1f64c",
      "patch": "@@ -46,6 +46,7 @@\n import com.intellij.ui.border.CustomLineBorder;\n import com.intellij.ui.components.labels.ActionLink;\n import com.intellij.ui.components.panels.NonOpaquePanel;\n+import com.intellij.util.ui.EmptyIcon;\n import com.intellij.util.ui.UIUtil;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n@@ -326,7 +327,15 @@ private JComponent createActionPanel() {\n         action.update(new AnActionEvent(null, DataManager.getInstance().getDataContext(this),\n                                         ActionPlaces.WELCOME_SCREEN, presentation, ActionManager.getInstance(), 0));\n         if (presentation.isVisible()) {\n-          ActionLink link = new ActionLink(presentation.getText(), presentation.getIcon(), action);\n+          String text = presentation.getText();\n+          if (text.endsWith(\"...\")) {\n+            text = text.substring(0, text.length() - 3);\n+          }\n+          Icon icon = presentation.getIcon();\n+          if (icon.getIconHeight() != 16 || icon.getIconWidth() != 16) {\n+            icon = EmptyIcon.ICON_16;\n+          }\n+          ActionLink link = new ActionLink(text, icon, action);\n           link.setPaintUnderline(false);\n           link.setNormalColor(getLinkNormalColor());\n           installFocusable(button, action, KeyEvent.VK_UP, KeyEvent.VK_DOWN, true);",
      "parent_sha": "371db8c42b809963767158520d56d005bc55a506"
    }
  },
  {
    "oid": "18530b2b120729c72d8e85617c96157288c27216",
    "message": "check method signature in lambdas and bridge methods",
    "date": "2016-11-08T13:02:42Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/18530b2b120729c72d8e85617c96157288c27216",
    "details": {
      "sha": "965695595e8198822d29fc41fca3a7a6e19842f9",
      "filename": "java/debugger/impl/src/com/intellij/debugger/jdi/MethodBytecodeUtil.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/18530b2b120729c72d8e85617c96157288c27216/java%2Fdebugger%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fdebugger%2Fjdi%2FMethodBytecodeUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/18530b2b120729c72d8e85617c96157288c27216/java%2Fdebugger%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fdebugger%2Fjdi%2FMethodBytecodeUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fdebugger%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fdebugger%2Fjdi%2FMethodBytecodeUtil.java?ref=18530b2b120729c72d8e85617c96157288c27216",
      "patch": "@@ -242,7 +242,7 @@ public static Method getLambdaMethod(ReferenceType clsType) {\n           public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n             ReferenceType cls = ContainerUtil.getFirstItem(clsType.virtualMachine().classesByName(owner));\n             if (cls != null) {\n-              cls.methodsByName(name).stream().findFirst().ifPresent(methodRef::set);\n+              cls.methodsByName(name, desc).stream().findFirst().ifPresent(methodRef::set);\n             }\n           }\n         });\n@@ -258,9 +258,16 @@ public static Method getBridgeTargetMethod(Method method) {\n       visit(method, new MethodVisitor(Opcodes.API_VERSION) {\n         @Override\n         public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n-          ReferenceType cls = ContainerUtil.getFirstItem(method.virtualMachine().classesByName(owner));\n+          ReferenceType declaringType = method.declaringType();\n+          ReferenceType cls = null;\n+          if (declaringType.name().equals(owner.replace(\"/\", \".\"))) {\n+            cls = declaringType;\n+          }\n+          else if (!\"java/lang/AbstractMethodError\".equals(owner)) {\n+            cls = ContainerUtil.getFirstItem(method.virtualMachine().classesByName(owner));\n+          }\n           if (cls != null) {\n-            StreamEx.of(cls.methodsByName(name)).without(method).findFirst().ifPresent(methodRef::set);\n+            StreamEx.of(cls.methodsByName(name, desc)).findFirst().ifPresent(methodRef::set);\n           }\n         }\n       });",
      "parent_sha": "5a2b3110f5baffa1f18eed3f1e9f7a57aa4bb476"
    }
  },
  {
    "oid": "b0fb4e9bbe7fae5c209d6bbb578b447c140b2031",
    "message": "EA-49640 - IAE: ActionManagerImpl.getId",
    "date": "2013-09-11T13:38:16Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/b0fb4e9bbe7fae5c209d6bbb578b447c140b2031",
    "details": {
      "sha": "4077dffb9c83b2bc0628269d541c7d322975dff1",
      "filename": "platform/platform-api/src/com/intellij/openapi/actionSystem/DefaultActionGroup.java",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/b0fb4e9bbe7fae5c209d6bbb578b447c140b2031/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FactionSystem%2FDefaultActionGroup.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/b0fb4e9bbe7fae5c209d6bbb578b447c140b2031/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FactionSystem%2FDefaultActionGroup.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FactionSystem%2FDefaultActionGroup.java?ref=b0fb4e9bbe7fae5c209d6bbb578b447c140b2031",
      "patch": "@@ -257,7 +257,12 @@ public final AnAction[] getChildren(@Nullable AnActionEvent e) {\n       }\n       if (action instanceof ActionStub) {\n         action = unStub(e, (ActionStub)action);\n-        mySortedChildren.set(i, action);\n+        if (action == null) {\n+          LOG.error(\"Can't unstub \" + mySortedChildren.get(i));\n+        }\n+        else {\n+          mySortedChildren.set(i, action);\n+        }\n       }\n \n       hasNulls |= action == null;\n@@ -269,9 +274,14 @@ public final AnAction[] getChildren(@Nullable AnActionEvent e) {\n       if (action == null) {\n         LOG.error(\"Empty pair child: \" + this + \", \" + getClass() + \"; index=\" + i);\n       }\n-      if (action instanceof ActionStub) {\n+      else if (action instanceof ActionStub) {\n         action = unStub(e, (ActionStub)action);\n-        myPairs.set(i, Pair.create(action, pair.second));\n+        if (action == null) {\n+          LOG.error(\"Can't unstub \" + pair);\n+        }\n+        else {\n+          myPairs.set(i, Pair.create(action, pair.second));\n+        }\n       }\n \n       hasNulls |= action == null;",
      "parent_sha": "a48e1e6185f58acbd7139102933a48104934384b"
    }
  },
  {
    "oid": "5ed839b5d12ebccad4805253af00b11a9c7dfa0a",
    "message": "IDEA-93535 In Console Colors settings some options are inverted",
    "date": "2012-10-25T16:32:06Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/5ed839b5d12ebccad4805253af00b11a9c7dfa0a",
    "details": {
      "sha": "0606ffd44da9c478fe6a1e91994062cf88fe6b72",
      "filename": "platform/lang-impl/src/com/intellij/openapi/options/colors/pages/ANSIColoredConsoleColorsPage.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/5ed839b5d12ebccad4805253af00b11a9c7dfa0a/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Foptions%2Fcolors%2Fpages%2FANSIColoredConsoleColorsPage.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/5ed839b5d12ebccad4805253af00b11a9c7dfa0a/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Foptions%2Fcolors%2Fpages%2FANSIColoredConsoleColorsPage.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Foptions%2Fcolors%2Fpages%2FANSIColoredConsoleColorsPage.java?ref=5ed839b5d12ebccad4805253af00b11a9c7dfa0a",
      "patch": "@@ -70,8 +70,8 @@ public class ANSIColoredConsoleColorsPage implements ColorSettingsPage, DisplayP\n     ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"stdout\", ConsoleViewContentType.NORMAL_OUTPUT_KEY);\n     ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"stdin\", ConsoleViewContentType.USER_INPUT_KEY);\n     ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"stderr\", ConsoleViewContentType.ERROR_OUTPUT_KEY);\n-    ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"logError\", ConsoleViewContentType.LOG_WARNING_OUTPUT_KEY);\n-    ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"logWarning\", ConsoleViewContentType.LOG_ERROR_OUTPUT_KEY);\n+    ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"logError\", ConsoleViewContentType.LOG_ERROR_OUTPUT_KEY);\n+    ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"logWarning\", ConsoleViewContentType.LOG_WARNING_OUTPUT_KEY);\n     ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"logExpired\", ConsoleViewContentType.LOG_EXPIRED_ENTRY);\n \n     ADDITIONAL_HIGHLIGHT_DESCRIPTORS.put(\"red\", ConsoleHighlighter.RED);",
      "parent_sha": "77d464b7550332a2d91bd9c3837ed5ccee8138b8"
    }
  },
  {
    "oid": "02b70de55bffeafb293b4b35eec15df55f840bae",
    "message": "Avoid double component registration in ParsingTestCase",
    "date": "2011-09-21T09:56:01Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/02b70de55bffeafb293b4b35eec15df55f840bae",
    "details": {
      "sha": "671720afa6b5abb2122b37d9258288f7d80ece6d",
      "filename": "platform/testFramework/src/com/intellij/testFramework/ParsingTestCase.java",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/02b70de55bffeafb293b4b35eec15df55f840bae/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2FtestFramework%2FParsingTestCase.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/02b70de55bffeafb293b4b35eec15df55f840bae/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2FtestFramework%2FParsingTestCase.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2FtestFramework%2FParsingTestCase.java?ref=02b70de55bffeafb293b4b35eec15df55f840bae",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2000-2009 JetBrains s.r.o.\n+ * Copyright 2000-2011 JetBrains s.r.o.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -31,6 +31,7 @@\n import com.intellij.openapi.fileTypes.FileTypeFactory;\n import com.intellij.openapi.fileTypes.FileTypeManager;\n import com.intellij.openapi.options.SchemesManagerFactory;\n+import com.intellij.openapi.progress.ProgressManager;\n import com.intellij.openapi.progress.impl.ProgressManagerImpl;\n import com.intellij.openapi.startup.StartupManager;\n import com.intellij.openapi.util.Disposer;\n@@ -49,10 +50,7 @@\n import com.intellij.util.messages.MessageBus;\n import com.intellij.util.messages.MessageBusFactory;\n import org.jetbrains.annotations.NonNls;\n-import org.picocontainer.MutablePicoContainer;\n-import org.picocontainer.PicoContainer;\n-import org.picocontainer.PicoInitializationException;\n-import org.picocontainer.PicoIntrospectionException;\n+import org.picocontainer.*;\n import org.picocontainer.defaults.AbstractComponentAdapter;\n \n import java.io.File;\n@@ -80,16 +78,19 @@ public ParsingTestCase(@NonNls String dataPath, String fileExt, ParserDefinition\n   protected void setUp() throws Exception {\n     super.setUp();\n     initApplication();\n-    getApplication().getPicoContainer().registerComponent(new AbstractComponentAdapter(\"com.intellij.openapi.progress.ProgressManager\", Object.class) {\n-      @Override\n-      public Object getComponentInstance(PicoContainer container) throws PicoInitializationException, PicoIntrospectionException {\n-        return new ProgressManagerImpl(getApplication());\n-      }\n+    ComponentAdapter component = getApplication().getPicoContainer().getComponentAdapter(ProgressManager.class.getName());\n+    if (component == null) {\n+      getApplication().getPicoContainer().registerComponent(new AbstractComponentAdapter(ProgressManager.class.getName(), Object.class) {\n+        @Override\n+        public Object getComponentInstance(PicoContainer container) throws PicoInitializationException, PicoIntrospectionException {\n+          return new ProgressManagerImpl(getApplication());\n+        }\n \n-      @Override\n-      public void verify(PicoContainer container) throws PicoIntrospectionException {\n-      }\n-    });\n+        @Override\n+        public void verify(PicoContainer container) throws PicoIntrospectionException {\n+        }\n+      });\n+    }\n     myProject = disposeOnTearDown(new MockProjectEx());\n     myPsiManager = new MockPsiManager(myProject);\n     myFileFactory = new PsiFileFactoryImpl(myPsiManager);",
      "parent_sha": "e576044931a07d7918d36b830a2eb533ce9005b0"
    }
  },
  {
    "oid": "1e92973d24014be3c222bbf5d1f599b24a451507",
    "message": "PromiseManager.load always reports errors to log despite the presence of error handlers\n\nGitOrigin-RevId: 3108ae617eaaea3315c9b79ae793350c75f4d8a3",
    "date": "2020-10-14T17:59:00Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/1e92973d24014be3c222bbf5d1f599b24a451507",
    "details": {
      "sha": "4a84dad503b85008fdab83eeab7875c76020871f",
      "filename": "platform/util/concurrency/org/jetbrains/concurrency/PromiseManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/1e92973d24014be3c222bbf5d1f599b24a451507/platform%2Futil%2Fconcurrency%2Forg%2Fjetbrains%2Fconcurrency%2FPromiseManager.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/1e92973d24014be3c222bbf5d1f599b24a451507/platform%2Futil%2Fconcurrency%2Forg%2Fjetbrains%2Fconcurrency%2FPromiseManager.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Futil%2Fconcurrency%2Forg%2Fjetbrains%2Fconcurrency%2FPromiseManager.java?ref=1e92973d24014be3c222bbf5d1f599b24a451507",
      "patch": "@@ -66,7 +66,9 @@ public final Promise<VALUE> get(HOST host, boolean checkFreshness) {\n   private Promise<VALUE> getOrCreateAsyncResult(HOST host, boolean checkFreshness, boolean load) {\n     Promise<VALUE> promise = fieldUpdater.get(host);\n     if (promise == null) {\n-      if (!fieldUpdater.compareAndSet(host, null, promise = new AsyncPromise<>())) {\n+      promise = new AsyncPromise<>();\n+      promise.onError((ignored) -> {});\n+      if (!fieldUpdater.compareAndSet(host, null, promise)) {\n         return fieldUpdater.get(host);\n       }\n     }",
      "parent_sha": "afa169fd94fb4ede9fb30c442088ed16a9097151"
    }
  },
  {
    "oid": "3160e8f13d3b2d71e8fc8d6eddba97a45962e068",
    "message": "[java-analysis] NullityInferrer#isNotNull: accept null\n\nFixes EA-469784 - IAE: NullableNotNullManager.$$$reportNull$$$0\n\nGitOrigin-RevId: 7db007657016af7c5d8af160fabbf5d6839b0bd6",
    "date": "2022-03-14T11:13:51Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/3160e8f13d3b2d71e8fc8d6eddba97a45962e068",
    "details": {
      "sha": "510558c2550aa537e38061d35f17892e6dbb6da4",
      "filename": "java/java-impl/src/com/intellij/codeInspection/inferNullity/NullityInferrer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/3160e8f13d3b2d71e8fc8d6eddba97a45962e068/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInspection%2FinferNullity%2FNullityInferrer.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/3160e8f13d3b2d71e8fc8d6eddba97a45962e068/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInspection%2FinferNullity%2FNullityInferrer.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInspection%2FinferNullity%2FNullityInferrer.java?ref=3160e8f13d3b2d71e8fc8d6eddba97a45962e068",
      "patch": "@@ -245,7 +245,8 @@ private void collect(List<? super UsageInfo> usages, boolean nullable) {\n     }\n   }\n \n-  private boolean isNotNull(PsiModifierListOwner owner) {\n+  private boolean isNotNull(@Nullable PsiModifierListOwner owner) {\n+    if (owner == null) return false;\n     if (NullableNotNullManager.isNotNull(owner)) {\n       return true;\n     }",
      "parent_sha": "d6f4d661689a5cabb5047dd2590c239576bde5ba"
    }
  },
  {
    "oid": "2811cc0f5d4ef2307d2a791c738e8f2034d8038e",
    "message": "cosmetics",
    "date": "2012-02-07T18:44:49Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/2811cc0f5d4ef2307d2a791c738e8f2034d8038e",
    "details": {
      "sha": "7ffde13a2e95c4c5481af95a5ebc0a66553fe650",
      "filename": "java/debugger/impl/src/com/intellij/debugger/ui/ExpressionEvaluationDialog.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/2811cc0f5d4ef2307d2a791c738e8f2034d8038e/java%2Fdebugger%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fdebugger%2Fui%2FExpressionEvaluationDialog.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/2811cc0f5d4ef2307d2a791c738e8f2034d8038e/java%2Fdebugger%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fdebugger%2Fui%2FExpressionEvaluationDialog.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fdebugger%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fdebugger%2Fui%2FExpressionEvaluationDialog.java?ref=2811cc0f5d4ef2307d2a791c738e8f2034d8038e",
      "patch": "@@ -87,7 +87,7 @@ protected JComponent createCenterPanel() {\n     exprPanel.add(new JLabel(DebuggerBundle.message(\"label.evaluate.dialog.expression\")), BorderLayout.WEST);\n     exprPanel.add(getExpressionCombo(), BorderLayout.CENTER);\n     final JLabel help = new JLabel(\n-      String.format(\"Press Enter to Evaluate or %s+Enter to evaluate and add to the Watches\", SystemInfo.isMac ? \"Meta\" : \"Control\"), SwingConstants.RIGHT);\n+      String.format(\"Press Enter to Evaluate or %s+Enter to evaluate and add to the Watches\", SystemInfo.isMac ? \"Command\" : \"Control\"), SwingConstants.RIGHT);\n     help.setBorder(IdeBorderFactory.createEmptyBorder(2,0,6,0));\n     UIUtil.applyStyle(UIUtil.ComponentStyle.MINI, help);\n     help.setForeground(UIUtil.getInactiveTextColor());",
      "parent_sha": "859d80f3e26acb2950197409fa059d83a95bc0db"
    }
  },
  {
    "oid": "2213da5018fe45ea4838af09538b084b4afe0d52",
    "message": "[java-inspections] PublicStaticCollectionFieldInspection: use OptTable\n\nGitOrigin-RevId: 992cb62bc07f4d7465ef1c4d01ad8a12453c41e7",
    "date": "2023-02-07T19:01:41Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/2213da5018fe45ea4838af09538b084b4afe0d52",
    "details": {
      "sha": "bdc73d6fcced739bbaa31b632c3e5264624bd612",
      "filename": "plugins/InspectionGadgets/src/com/siyeh/ig/security/PublicStaticCollectionFieldInspection.java",
      "status": "modified",
      "additions": 9,
      "deletions": 16,
      "changes": 25,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/2213da5018fe45ea4838af09538b084b4afe0d52/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fsecurity%2FPublicStaticCollectionFieldInspection.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/2213da5018fe45ea4838af09538b084b4afe0d52/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fsecurity%2FPublicStaticCollectionFieldInspection.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fsecurity%2FPublicStaticCollectionFieldInspection.java?ref=2213da5018fe45ea4838af09538b084b4afe0d52",
      "patch": "@@ -2,10 +2,8 @@\n package com.siyeh.ig.security;\n \n import com.intellij.codeInspection.concurrencyAnnotations.JCiPUtil;\n-import com.intellij.codeInspection.ui.InspectionOptionsPanel;\n-import com.intellij.codeInspection.ui.ListTable;\n-import com.intellij.codeInspection.ui.ListWrappingTableModel;\n-import com.intellij.java.JavaBundle;\n+import com.intellij.codeInspection.options.OptPane;\n+import com.intellij.codeInspection.options.OptionController;\n import com.intellij.openapi.util.InvalidDataException;\n import com.intellij.openapi.util.WriteExternalException;\n import com.intellij.psi.*;\n@@ -16,13 +14,9 @@\n import com.siyeh.ig.psiutils.CollectionUtils;\n import com.siyeh.ig.psiutils.ExpressionUtils;\n import com.siyeh.ig.psiutils.MethodMatcher;\n-import com.siyeh.ig.ui.UiUtils;\n import org.jdom.Element;\n import org.jetbrains.annotations.NotNull;\n \n-import javax.swing.*;\n-import java.util.Arrays;\n-\n /**\n  * @author Bas Leijdekkers\n  */\n@@ -40,14 +34,13 @@ public class PublicStaticCollectionFieldInspection extends BaseInspection {\n     .finishDefault();\n \n   @Override\n-  public JComponent createOptionsPanel() {\n-    final ListTable table = new ListTable(new ListWrappingTableModel(\n-      Arrays.asList(myMethodMatcher.getClassNames(), myMethodMatcher.getMethodNamePatterns()),\n-      InspectionGadgetsBundle.message(\"result.of.method.call.ignored.class.column.title\"),\n-      InspectionGadgetsBundle.message(\"result.of.method.call.ignored.method.column.title\")));\n-    final var panel = new InspectionOptionsPanel();\n-    panel.addGrowing(UiUtils.createAddRemoveTreeClassChooserPanel(table, JavaBundle.message(\"dialog.title.choose.class\")));\n-    return panel;\n+  public @NotNull OptPane getOptionsPane() {\n+    return OptPane.pane(myMethodMatcher.getTable(\"\"));\n+  }\n+\n+  @Override\n+  public @NotNull OptionController getOptionController() {\n+    return myMethodMatcher.getOptionController();\n   }\n \n   @Override",
      "parent_sha": "649b056472ee5aaf9ce5f939bb1dd0f9d5479ef7"
    }
  },
  {
    "oid": "661016e09de47b35e4b74d00d41cffd2935f9d14",
    "message": "[java-inspections] UnnecessaryModifierInspection: fix quick-fix message\n\nGitOrigin-RevId: 34fec668aad9b6d074b903eeeed0ab1c10899270",
    "date": "2022-02-16T09:35:24Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/661016e09de47b35e4b74d00d41cffd2935f9d14",
    "details": {
      "sha": "f89966cd2fd7e92a6f266e6b4071458379bca870",
      "filename": "plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/style/UnnecessaryModifierInspection.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/661016e09de47b35e4b74d00d41cffd2935f9d14/plugins%2FInspectionGadgets%2FInspectionGadgetsAnalysis%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fstyle%2FUnnecessaryModifierInspection.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/661016e09de47b35e4b74d00d41cffd2935f9d14/plugins%2FInspectionGadgets%2FInspectionGadgetsAnalysis%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fstyle%2FUnnecessaryModifierInspection.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2FInspectionGadgets%2FInspectionGadgetsAnalysis%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Fstyle%2FUnnecessaryModifierInspection.java?ref=661016e09de47b35e4b74d00d41cffd2935f9d14",
      "patch": "@@ -30,7 +30,7 @@ public class UnnecessaryModifierInspection extends BaseInspection implements Cle\n \n   @Override\n   protected @Nullable InspectionGadgetsFix buildFix(Object... infos) {\n-    return new RemoveModifierFix((String)infos[0]);\n+    return new RemoveModifierFix((String)infos[1]);\n   }\n \n   @Override\n@@ -176,7 +176,7 @@ else if (JavaTokenType.STATIC_KEYWORD == tokenType || JavaTokenType.FINAL_KEYWOR\n \n     private void registerError(@NotNull PsiKeyword modifier,\n                                @NotNull @PropertyKey(resourceBundle = InspectionGadgetsBundle.BUNDLE) String key) {\n-      registerError(modifier, ProblemHighlightType.LIKE_UNUSED_SYMBOL, InspectionGadgetsBundle.message(key));\n+      registerError(modifier, ProblemHighlightType.LIKE_UNUSED_SYMBOL, InspectionGadgetsBundle.message(key), modifier.getText());\n     }\n   }\n }",
      "parent_sha": "38bfebaa232b9a03c7ca59ba6c38245ddda42cbc"
    }
  },
  {
    "oid": "b1142a5755d6368fb6e1e7e00f52172304315088",
    "message": "save some memory",
    "date": "2012-06-18T10:31:17Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/b1142a5755d6368fb6e1e7e00f52172304315088",
    "details": {
      "sha": "a979fe46c19ddb059f12e658fd142e800516cf1f",
      "filename": "plugins/groovy/src/org/jetbrains/plugins/groovy/lang/psi/controlFlow/impl/InstructionImpl.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/b1142a5755d6368fb6e1e7e00f52172304315088/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Flang%2Fpsi%2FcontrolFlow%2Fimpl%2FInstructionImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/b1142a5755d6368fb6e1e7e00f52172304315088/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Flang%2Fpsi%2FcontrolFlow%2Fimpl%2FInstructionImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Flang%2Fpsi%2FcontrolFlow%2Fimpl%2FInstructionImpl.java?ref=b1142a5755d6368fb6e1e7e00f52172304315088",
      "patch": "@@ -23,16 +23,17 @@\n import org.jetbrains.plugins.groovy.lang.psi.controlFlow.Instruction;\n import org.jetbrains.plugins.groovy.lang.psi.controlFlow.NegatingGotoInstruction;\n \n+import java.util.Collections;\n import java.util.Deque;\n import java.util.LinkedHashSet;\n \n /**\n  * @author ven\n  */\n public class InstructionImpl implements Instruction {\n-  private final LinkedHashSet<InstructionImpl> myPredecessors = new LinkedHashSet<InstructionImpl>();\n-  private final LinkedHashSet<InstructionImpl> mySuccessors = new LinkedHashSet<InstructionImpl>();\n-  private final LinkedHashSet<NegatingGotoInstruction> myNegations = new LinkedHashSet<NegatingGotoInstruction>();\n+  private final LinkedHashSet<InstructionImpl> myPredecessors = new LinkedHashSet<InstructionImpl>(1);\n+  private final LinkedHashSet<InstructionImpl> mySuccessors = new LinkedHashSet<InstructionImpl>(1);\n+  private LinkedHashSet<NegatingGotoInstruction> myNegations;\n \n   PsiElement myPsiElement;\n   private int myNumber = -1;\n@@ -97,6 +98,9 @@ public int num() {\n   @NotNull\n   @Override\n   public Iterable<? extends NegatingGotoInstruction> getNegatingGotoInstruction() {\n+    if (myNegations == null) {\n+      return Collections.emptyList();\n+    }\n     return myNegations;\n   }\n \n@@ -109,6 +113,9 @@ public void addPredecessor(InstructionImpl instruction) {\n   }\n \n   void addNegationsFrom(Instruction instruction) {\n+    if (myNegations == null) {\n+      myNegations = new LinkedHashSet<NegatingGotoInstruction>(1);\n+    }\n     for (NegatingGotoInstruction negation : instruction.getNegatingGotoInstruction()) {\n       myNegations.add(negation);\n     }",
      "parent_sha": "b7edeb92b5a2db7175d7a6cc18354a1555cc6410"
    }
  },
  {
    "oid": "1d42e3c42bccc2e9ba67383d3efd195a4ba8e0be",
    "message": "psi viewer: fix exception in stubs",
    "date": "2017-09-05T17:16:20Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/1d42e3c42bccc2e9ba67383d3efd195a4ba8e0be",
    "details": {
      "sha": "a8ec4122a8e4ed61c9de92112254afd694a9a0f5",
      "filename": "platform/lang-impl/src/com/intellij/internal/psiView/stubtree/StubViewerPsiBasedTree.java",
      "status": "modified",
      "additions": 28,
      "deletions": 6,
      "changes": 34,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/1d42e3c42bccc2e9ba67383d3efd195a4ba8e0be/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Finternal%2FpsiView%2Fstubtree%2FStubViewerPsiBasedTree.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/1d42e3c42bccc2e9ba67383d3efd195a4ba8e0be/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Finternal%2FpsiView%2Fstubtree%2FStubViewerPsiBasedTree.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Finternal%2FpsiView%2Fstubtree%2FStubViewerPsiBasedTree.java?ref=1d42e3c42bccc2e9ba67383d3efd195a4ba8e0be",
      "patch": "@@ -18,13 +18,15 @@\n import com.intellij.ide.util.treeView.TreeVisitor;\n import com.intellij.internal.psiView.ViewerPsiBasedTree;\n import com.intellij.lang.ASTNode;\n+import com.intellij.openapi.diagnostic.Logger;\n import com.intellij.openapi.project.Project;\n import com.intellij.openapi.util.Disposer;\n import com.intellij.openapi.util.Key;\n import com.intellij.openapi.util.Ref;\n import com.intellij.openapi.wm.IdeFocusManager;\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiFile;\n+import com.intellij.psi.StubBuilder;\n import com.intellij.psi.impl.source.PsiFileImpl;\n import com.intellij.psi.impl.source.PsiFileWithStubSupport;\n import com.intellij.psi.stubs.*;\n@@ -53,11 +55,12 @@\n import java.util.Map;\n import java.util.Set;\n \n-import static com.intellij.internal.psiView.PsiViewerDialog.LOG;\n import static com.intellij.internal.psiView.PsiViewerDialog.initTree;\n \n public class StubViewerPsiBasedTree implements ViewerPsiBasedTree {\n \n+  public static final Logger LOG = Logger.getInstance(\"#com.intellij.internal.psiView.PsiViewerDialog\");\n+\n   private static final Key<Object> PSI_ELEMENT_SELECTION_REQUESTOR = Key.create(\"SelectionRequester\");\n \n   @Nullable\n@@ -167,8 +170,8 @@ private static Stub buildStubForElement(Project project, PsiElement rootElement,\n       stub = tree.getRoot();\n     }\n     else if (rootElement instanceof PsiFileImpl) {\n-      IStubFileElementType builder = ((PsiFileImpl)rootElement).getElementTypeForStubBuilder();\n-      stub = builder == null ? null : builder.getBuilder().buildStubTree((PsiFile)rootElement);\n+      StubBuilder stubBuilder = getStubBuilder((PsiFileImpl)rootElement);\n+      stub = stubBuilder == null ? null : stubBuilder.buildStubTree((PsiFile)rootElement);\n     }\n     if (stub == null) {\n       LightVirtualFile file = new LightVirtualFile(\"stub\", rootElement.getLanguage(), textToParse);\n@@ -185,6 +188,12 @@ else if (rootElement instanceof PsiFileImpl) {\n     return stub;\n   }\n \n+  @Nullable\n+  private static StubBuilder getStubBuilder(@NotNull PsiFileImpl rootElement) {\n+    IStubFileElementType builder = rootElement.getElementTypeForStubBuilder();\n+    return builder == null ? null : builder.getBuilder();\n+  }\n+\n   public void selectNodeFromPsi(@Nullable PsiElement element) {\n     if (myStubTreeBuilder == null || element == null) return;\n     final PsiFile file = element.getContainingFile();\n@@ -268,24 +277,37 @@ private void fillPsiToStubCache(@NotNull PsiFileWithStubSupport rootElement, @No\n \n \n   public void fillTreeForStub(@NotNull PsiFileWithStubSupport file, @NotNull StubTree tree) {\n+    StubBuilder builder = file instanceof PsiFileImpl ? getStubBuilder(((PsiFileImpl)file)) : null;\n+    if (builder == null) return;\n+\n     final Iterator<StubElement<?>> stubs = tree.getPlainList().iterator();\n     final StubElement<?> root = stubs.next();\n     final ASTNode ast = file.getNode();\n     myNodeToStubs.put(ast, root);\n \n-    findTreeForStub(ast, stubs);\n+    findTreeForStub(builder, ast, stubs);\n+    \n+    if (stubs.hasNext()) {\n+      LOG.error(\"Stub mismatch, unprocessed stubs \" + stubs.next());\n+    }\n   }\n \n-  private void findTreeForStub(ASTNode tree, final Iterator<StubElement<?>> stubs) {\n+  private void findTreeForStub(StubBuilder builder, ASTNode tree, final Iterator<StubElement<?>> stubs) {\n     final IElementType type = tree.getElementType();\n \n     if (type instanceof IStubElementType && ((IStubElementType)type).shouldCreateStub(tree)) {\n+      if (!stubs.hasNext()) {\n+        LOG.error(\"Stub mismatch, \" + type);\n+      }\n       final StubElement curStub = stubs.next();\n       myNodeToStubs.put(tree, curStub);\n     }\n \n+\n     for (ASTNode node : tree.getChildren(null)) {\n-      findTreeForStub(node, stubs);\n+      if (!builder.skipChildProcessingWhenBuildingStubs(tree, node)) {\n+        findTreeForStub(builder, node, stubs);\n+      }\n     }\n   }\n }",
      "parent_sha": "eb588d25951accfe1eeb9de55207d9015db997ce"
    }
  },
  {
    "oid": "658bbcf652d419870e9880e680ceb3e882ecdf93",
    "message": "MyPluginModel: redundant cast removed\n\nGitOrigin-RevId: c8e06c35a04ebd203db31de9ccc609da31ea1610",
    "date": "2020-07-31T02:37:51Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/658bbcf652d419870e9880e680ceb3e882ecdf93",
    "details": {
      "sha": "8991961ec53fe9cf5f4412100f7cfb8afc28d344",
      "filename": "platform/platform-impl/src/com/intellij/ide/plugins/newui/MyPluginModel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/658bbcf652d419870e9880e680ceb3e882ecdf93/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Fplugins%2Fnewui%2FMyPluginModel.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/658bbcf652d419870e9880e680ceb3e882ecdf93/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Fplugins%2Fnewui%2FMyPluginModel.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Fplugins%2Fnewui%2FMyPluginModel.java?ref=658bbcf652d419870e9880e680ceb3e882ecdf93",
      "patch": "@@ -33,7 +33,6 @@\n import java.awt.*;\n import java.io.IOException;\n import java.nio.file.FileVisitResult;\n-import java.nio.file.Path;\n import java.util.List;\n import java.util.*;\n import java.util.Map.Entry;\n@@ -182,7 +181,7 @@ public boolean apply(JComponent parent) throws ConfigurationException {\n       }\n       else {\n         try {\n-          PluginInstaller.installAfterRestart(pendingPluginInstall.getFile(), true, (Path)null, pendingPluginInstall.getPluginDescriptor());\n+          PluginInstaller.installAfterRestart(pendingPluginInstall.getFile(), true, null, pendingPluginInstall.getPluginDescriptor());\n           installsRequiringRestart = true;\n         }\n         catch (IOException e) {",
      "parent_sha": "dd8fbbaf614416975a7b2b06ce512c92a6043686"
    }
  },
  {
    "oid": "87956a0cc3138934c4eb324b5af11896a7ade74a",
    "message": "use inverted index to implement PsiSearchHelper#hasIdentifier() since shared id index doesn't have forward index IDEA-244308\n\nGitOrigin-RevId: 64c72e6d7b747c4179ddeec30dbdfd91f2274364",
    "date": "2020-06-23T11:44:10Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/87956a0cc3138934c4eb324b5af11896a7ade74a",
    "details": {
      "sha": "55d75b812cedce10f9b60e2d063903e320ae9c51",
      "filename": "platform/indexing-impl/src/com/intellij/psi/impl/search/PsiSearchHelperImpl.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/87956a0cc3138934c4eb324b5af11896a7ade74a/platform%2Findexing-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Fsearch%2FPsiSearchHelperImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/87956a0cc3138934c4eb324b5af11896a7ade74a/platform%2Findexing-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Fsearch%2FPsiSearchHelperImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Findexing-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Fsearch%2FPsiSearchHelperImpl.java?ref=87956a0cc3138934c4eb324b5af11896a7ade74a",
      "patch": "@@ -147,8 +147,10 @@ public boolean hasIdentifierInFile(@NotNull PsiFile file, @NotNull String name)\n       return StringUtil.contains(file.getViewProvider().getContents(), name);\n     }\n \n-    Map<IdIndexEntry, Integer> entries = FileBasedIndex.getInstance().getFileData(IdIndex.NAME, file.getVirtualFile(), file.getProject());\n-    return entries.containsKey(new IdIndexEntry(name, true));\n+    // TODO: direct forward index access is not used right now since IdIndex shared index doesn't have forward index\n+    GlobalSearchScope fileScope = GlobalSearchScope.fileScope(file);\n+    IdIndexEntry key = new IdIndexEntry(name, true);\n+    return !FileBasedIndex.getInstance().getContainingFiles(IdIndex.NAME, key, fileScope).isEmpty();\n   }\n \n   @NotNull",
      "parent_sha": "6c409d8429fd85760be28a649758e4d09eb63a9a"
    }
  },
  {
    "oid": "405c72fe2cf5171ee0feac24dc27bdec720ecb36",
    "message": "do not register palette toolwindow in headless mode",
    "date": "2011-02-21T14:03:32Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/405c72fe2cf5171ee0feac24dc27bdec720ecb36",
    "details": {
      "sha": "b6f2063a70438a27366dca452e96b4e05a8dcd37",
      "filename": "java/idea-ui/src/com/intellij/ide/palette/impl/PaletteManager.java",
      "status": "modified",
      "additions": 17,
      "deletions": 14,
      "changes": 31,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/405c72fe2cf5171ee0feac24dc27bdec720ecb36/java%2Fidea-ui%2Fsrc%2Fcom%2Fintellij%2Fide%2Fpalette%2Fimpl%2FPaletteManager.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/405c72fe2cf5171ee0feac24dc27bdec720ecb36/java%2Fidea-ui%2Fsrc%2Fcom%2Fintellij%2Fide%2Fpalette%2Fimpl%2FPaletteManager.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fidea-ui%2Fsrc%2Fcom%2Fintellij%2Fide%2Fpalette%2Fimpl%2FPaletteManager.java?ref=405c72fe2cf5171ee0feac24dc27bdec720ecb36",
      "patch": "@@ -19,6 +19,7 @@\n import com.intellij.ide.IdeBundle;\n import com.intellij.ide.palette.PaletteDragEventListener;\n import com.intellij.ide.palette.PaletteItem;\n+import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.components.ProjectComponent;\n import com.intellij.openapi.fileEditor.FileEditorManager;\n import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n@@ -60,20 +61,22 @@ public PaletteManager(Project project, FileEditorManager fileEditorManager) {\n   }\n \n   public void projectOpened() {\n-    StartupManager.getInstance(myProject).registerPostStartupActivity(new Runnable() {\n-      public void run() {\n-        myPaletteWindow = new PaletteWindow(myProject);\n-        myPaletteToolWindow = ToolWindowManager.getInstance(myProject).registerToolWindow(IdeBundle.message(\"toolwindow.palette\"),\n-                                                                                          myPaletteWindow,\n-                                                                                          ToolWindowAnchor.RIGHT,\n-                                                                                          myProject,\n-                                                                                          true);\n-        myPaletteToolWindow.setIcon(IconLoader.getIcon(\"/general/toolWindowPalette.png\"));\n-        myPaletteToolWindow.setAvailable(false, null);\n-        final MyFileEditorManagerListener myListener = new MyFileEditorManagerListener();\n-        myFileEditorManager.addFileEditorManagerListener(myListener, myProject);\n-      }\n-    });\n+    if (!ApplicationManager.getApplication().isHeadlessEnvironment()) {\n+      StartupManager.getInstance(myProject).registerPostStartupActivity(new Runnable() {\n+        public void run() {\n+          myPaletteWindow = new PaletteWindow(myProject);\n+          myPaletteToolWindow = ToolWindowManager.getInstance(myProject).registerToolWindow(IdeBundle.message(\"toolwindow.palette\"),\n+                                                                                            myPaletteWindow,\n+                                                                                            ToolWindowAnchor.RIGHT,\n+                                                                                            myProject,\n+                                                                                            true);\n+          myPaletteToolWindow.setIcon(IconLoader.getIcon(\"/general/toolWindowPalette.png\"));\n+          myPaletteToolWindow.setAvailable(false, null);\n+          final MyFileEditorManagerListener myListener = new MyFileEditorManagerListener();\n+          myFileEditorManager.addFileEditorManagerListener(myListener, myProject);\n+        }\n+      });\n+    }\n   }\n \n   public void projectClosed() {",
      "parent_sha": "e29bf9f509f79a6e8b397627ec0499e66f829e35"
    }
  },
  {
    "oid": "fba277ba42dc4912a9cc2300f97bfcc7e9b8adf1",
    "message": "ImageLoader.java: raise log level",
    "date": "2015-12-15T10:15:27Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/fba277ba42dc4912a9cc2300f97bfcc7e9b8adf1",
    "details": {
      "sha": "36dbce28de3479e991ebec2ef82dd2277f375968",
      "filename": "platform/util/src/com/intellij/util/ImageLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/fba277ba42dc4912a9cc2300f97bfcc7e9b8adf1/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2FImageLoader.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/fba277ba42dc4912a9cc2300f97bfcc7e9b8adf1/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2FImageLoader.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2FImageLoader.java?ref=fba277ba42dc4912a9cc2300f97bfcc7e9b8adf1",
      "patch": "@@ -109,7 +109,7 @@ public Image load(@NotNull ImageConverterChain converters) {\n         try {\n           Image image = desc.load();\n           if (image == null) continue;\n-          LOG.info(\"Loaded image: \" + desc);\n+          LOG.debug(\"Loaded image: \" + desc);\n           return converters.convert(image, desc);\n         }\n         catch (IOException ignore) {",
      "parent_sha": "4b05148b5d9323e58b1848399d0ed893a092a527"
    }
  },
  {
    "oid": "fd724d295e3b91b18e656a1ba7b71bbf384d52c0",
    "message": "IDEA-121082 Enter License dialog: cannot enter data if JetBrains Account fails or returns several licenses",
    "date": "2014-03-01T19:06:31Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/fd724d295e3b91b18e656a1ba7b71bbf384d52c0",
    "details": {
      "sha": "9b0256012fd33f1d9ff28489e7461bd8ca19289f",
      "filename": "platform/platform-api/src/com/intellij/util/ui/Animator.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/fd724d295e3b91b18e656a1ba7b71bbf384d52c0/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Futil%2Fui%2FAnimator.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/fd724d295e3b91b18e656a1ba7b71bbf384d52c0/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Futil%2Fui%2FAnimator.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Futil%2Fui%2FAnimator.java?ref=fd724d295e3b91b18e656a1ba7b71bbf384d52c0",
      "patch": "@@ -131,7 +131,10 @@ public void suspend() {\n \n   public void resume() {\n     final Application app = ApplicationManager.getApplication();\n-    if (app == null || app.isUnitTestMode()) return;\n+    if (app == null || app.isUnitTestMode()) {\n+      animationDone();\n+      return;\n+    }\n \n     if (myCycleDuration == 0) {\n       myCurrentFrame = myTotalFrames - 1;",
      "parent_sha": "1e5e7530fef4423b46a99d53a98a4fb904f7015d"
    }
  },
  {
    "oid": "68445504b0c432b1208ced065a3587e1693ca6ea",
    "message": "revert hiding INFORMATION tooltips",
    "date": "2017-02-17T13:13:36Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/68445504b0c432b1208ced065a3587e1693ca6ea",
    "details": {
      "sha": "f693233e86df69d4c4615cf1df6cc2f8f6a485f5",
      "filename": "platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/LocalInspectionsPass.java",
      "status": "modified",
      "additions": 17,
      "deletions": 41,
      "changes": 58,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/68445504b0c432b1208ced065a3587e1693ca6ea/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdaemon%2Fimpl%2FLocalInspectionsPass.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/68445504b0c432b1208ced065a3587e1693ca6ea/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdaemon%2Fimpl%2FLocalInspectionsPass.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fdaemon%2Fimpl%2FLocalInspectionsPass.java?ref=68445504b0c432b1208ced065a3587e1693ca6ea",
      "patch": "@@ -56,7 +56,6 @@\n import com.intellij.util.CommonProcessors;\n import com.intellij.util.ConcurrencyUtil;\n import com.intellij.util.Processor;\n-import com.intellij.util.SmartList;\n import com.intellij.util.containers.ContainerUtil;\n import com.intellij.util.containers.SmartHashSet;\n import com.intellij.util.containers.TransferToEDTQueue;\n@@ -340,20 +339,12 @@ void inspectInjectedPsi(@NotNull final List<PsiElement> elements,\n     }\n   }\n \n-  private static final TextAttributes NONEMPTY_TEXT_ATTRIBUTES = new TextAttributes() {\n-    @Override\n-    public boolean isEmpty() {\n-      return false;\n-    }\n-  };\n-\n   @Nullable\n   private HighlightInfo highlightInfoFromDescriptor(@NotNull ProblemDescriptor problemDescriptor,\n                                                     @NotNull HighlightInfoType highlightInfoType,\n                                                     @NotNull String message,\n                                                     String toolTip,\n-                                                    PsiElement psiElement,\n-                                                    @NotNull List<IntentionAction> quickFixes) {\n+                                                    PsiElement psiElement) {\n     TextRange textRange = ((ProblemDescriptorBase)problemDescriptor).getTextRange();\n     if (textRange == null || psiElement == null) return null;\n     boolean isFileLevel = psiElement instanceof PsiFile && textRange.equals(psiElement.getTextRange());\n@@ -365,11 +356,6 @@ private HighlightInfo highlightInfoFromDescriptor(@NotNull ProblemDescriptor pro\n                               .description(message)\n                               .severity(severity);\n     if (toolTip != null) b.escapedToolTip(toolTip);\n-    if (HighlightSeverity.INFORMATION.equals(severity) && attributes == null && toolTip == null && !quickFixes.isEmpty()) {\n-      // Hack to avoid filtering this info out in HighlightInfoFilterImpl even though its attributes are empty.\n-      // But it has quick fixes so it needs to be created.\n-      attributes = NONEMPTY_TEXT_ATTRIBUTES;\n-    }\n     if (attributes != null) b.textAttributes(attributes);\n     if (problemDescriptor.isAfterEndOfLine()) b.endOfLine();\n     if (isFileLevel) b.fileLevelAnnotation();\n@@ -509,6 +495,7 @@ private void createHighlightsForDescriptor(@NotNull List<HighlightInfo> outInfos\n     }\n     boolean isInjected = file != getFile();\n     if (!isInjected) {\n+\n       outInfos.add(info);\n       return;\n     }\n@@ -531,7 +518,7 @@ private void createHighlightsForDescriptor(@NotNull List<HighlightInfo> outInfos\n       HighlightInfo patched = builder.createUnconditionally();\n       if (patched.startOffset != patched.endOffset || info.startOffset == info.endOffset) {\n         patched.setFromInjection(true);\n-        registerQuickFixes(toolWrapper, patched, getQuickFixes(toolWrapper, descriptor, emptyActionRegistered));\n+        registerQuickFixes(toolWrapper, descriptor, patched, emptyActionRegistered);\n         outInfos.add(patched);\n       }\n     }\n@@ -567,51 +554,40 @@ private HighlightInfo createHighlightInfo(@NotNull ProblemDescriptor descriptor,\n     if (descriptor.showTooltip()) {\n       tooltip = XmlStringUtil.wrapInHtml((message.startsWith(\"<html>\") ? XmlStringUtil.stripHtml(message): XmlStringUtil.escapeString(message)) + link);\n     }\n-    List<IntentionAction> quickFixes = getQuickFixes(tool, descriptor, emptyActionRegistered);\n-    HighlightInfo info = highlightInfoFromDescriptor(descriptor, type, plainMessage, tooltip, element, quickFixes);\n-    if (info != null) {\n-      registerQuickFixes(tool, info, quickFixes);\n+    HighlightInfo highlightInfo = highlightInfoFromDescriptor(descriptor, type, plainMessage, tooltip,element);\n+    if (highlightInfo != null) {\n+      registerQuickFixes(tool, descriptor, highlightInfo, emptyActionRegistered);\n     }\n-    return info;\n+    return highlightInfo;\n   }\n \n   private static void registerQuickFixes(@NotNull LocalInspectionToolWrapper tool,\n+                                         @NotNull ProblemDescriptor descriptor,\n                                          @NotNull HighlightInfo highlightInfo,\n-                                         @NotNull List<IntentionAction> quickFixes) {\n+                                         @NotNull Set<Pair<TextRange,String>> emptyActionRegistered) {\n     final HighlightDisplayKey key = HighlightDisplayKey.find(tool.getShortName());\n-    for (IntentionAction quickFix : quickFixes) {\n-      QuickFixAction.registerQuickFixAction(highlightInfo, quickFix, key);\n-    }\n-  }\n-\n-  private static List<IntentionAction> getQuickFixes(@NotNull LocalInspectionToolWrapper tool,\n-                                                     @NotNull ProblemDescriptor descriptor,\n-                                                     @NotNull Set<Pair<TextRange, String>> emptyActionRegistered) {\n-    List<IntentionAction> result = new SmartList<>();\n     boolean needEmptyAction = true;\n     final QuickFix[] fixes = descriptor.getFixes();\n-    if (fixes != null && fixes.length != 0) {\n+    if (fixes != null && fixes.length > 0) {\n       for (int k = 0; k < fixes.length; k++) {\n-        QuickFix fix = fixes[k];\n-        if (fix == null) throw new IllegalStateException(\"Inspection \" + tool + \" returns null quick fix in its descriptor: \" + descriptor + \"; array: \" +\n-                                                         Arrays.toString(fixes));\n-        result.add(QuickFixWrapper.wrap(descriptor, k));\n-        needEmptyAction = false;\n+        if (fixes[k] != null) { // prevent null fixes from var args\n+          QuickFixAction.registerQuickFixAction(highlightInfo, QuickFixWrapper.wrap(descriptor, k), key);\n+          needEmptyAction = false;\n+        }\n       }\n     }\n     HintAction hintAction = descriptor instanceof ProblemDescriptorImpl ? ((ProblemDescriptorImpl)descriptor).getHintAction() : null;\n     if (hintAction != null) {\n-      result.add(hintAction);\n+      QuickFixAction.registerQuickFixAction(highlightInfo, hintAction, key);\n       needEmptyAction = false;\n     }\n     if (((ProblemDescriptorBase)descriptor).getEnforcedTextAttributes() != null) {\n       needEmptyAction = false;\n     }\n-    if (needEmptyAction && emptyActionRegistered.add(Pair.create(((ProblemDescriptorBase)descriptor).getTextRange(), tool.getShortName()))) {\n+    if (needEmptyAction && emptyActionRegistered.add(Pair.create(highlightInfo.getFixTextRange(), tool.getShortName()))) {\n       IntentionAction emptyIntentionAction = new EmptyIntentionAction(tool.getDisplayName());\n-      result.add(emptyIntentionAction);\n+      QuickFixAction.registerQuickFixAction(highlightInfo, emptyIntentionAction, key);\n     }\n-    return result;\n   }\n \n   private static void getElementsAndDialectsFrom(@NotNull PsiFile file,",
      "parent_sha": "1402bc2ff15cf3af800fc89a219843b7408f17dc"
    }
  },
  {
    "oid": "391a1d3575663729a42df600621275d8b7325950",
    "message": "Tests: execute breakpoint adding command in the same thread to be sure it's done before resume",
    "date": "2017-12-19T12:24:36Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/391a1d3575663729a42df600621275d8b7325950",
    "details": {
      "sha": "38c74f0284584edd9da862de51efce54fa69bc89",
      "filename": "python/pydevSrc/com/jetbrains/python/debugger/pydev/RemoteDebugger.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/391a1d3575663729a42df600621275d8b7325950/python%2FpydevSrc%2Fcom%2Fjetbrains%2Fpython%2Fdebugger%2Fpydev%2FRemoteDebugger.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/391a1d3575663729a42df600621275d8b7325950/python%2FpydevSrc%2Fcom%2Fjetbrains%2Fpython%2Fdebugger%2Fpydev%2FRemoteDebugger.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/python%2FpydevSrc%2Fcom%2Fjetbrains%2Fpython%2Fdebugger%2Fpydev%2FRemoteDebugger.java?ref=391a1d3575663729a42df600621275d8b7325950",
      "patch": "@@ -428,7 +428,14 @@ public void setNextStatement(@NotNull String threadId,\n   public void setTempBreakpoint(@NotNull String type, @NotNull String file, int line) {\n     final SetBreakpointCommand command =\n       new SetBreakpointCommand(this, type, file, line);\n-    execute(command);  // set temp. breakpoint\n+    try {\n+      command.execute();\n+    }\n+    catch (PyDebuggerException e) {\n+      if (isConnected()) {\n+        LOG.error(e);\n+      }\n+    }\n     myTempBreakpoints.put(Pair.create(file, line), type);\n   }\n \n@@ -440,7 +447,7 @@ public void removeTempBreakpoint(@NotNull String file, int line) {\n       execute(command);  // remove temp. breakpoint\n     }\n     else {\n-      LOG.error(\"Temp breakpoint not found for \" + file + \":\" + line);\n+      LOG.warn(\"Temp breakpoint not found for \" + file + \":\" + line);\n     }\n   }\n ",
      "parent_sha": "459659dc4f867150b7b69c719c0b70834f89bebd"
    }
  },
  {
    "oid": "06b5ff1b30e53c74fad40b0794978ba0ee841ed1",
    "message": "a piece of cake",
    "date": "2006-07-25T20:27:00Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/06b5ff1b30e53c74fad40b0794978ba0ee841ed1",
    "details": {
      "sha": "b7b5786f52c07c1d3635e1f76636f035f773afd5",
      "filename": "plugins/ant/src/com/intellij/lang/ant/psi/impl/AntProjectImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/06b5ff1b30e53c74fad40b0794978ba0ee841ed1/plugins%2Fant%2Fsrc%2Fcom%2Fintellij%2Flang%2Fant%2Fpsi%2Fimpl%2FAntProjectImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/06b5ff1b30e53c74fad40b0794978ba0ee841ed1/plugins%2Fant%2Fsrc%2Fcom%2Fintellij%2Flang%2Fant%2Fpsi%2Fimpl%2FAntProjectImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fant%2Fsrc%2Fcom%2Fintellij%2Flang%2Fant%2Fpsi%2Fimpl%2FAntProjectImpl.java?ref=06b5ff1b30e53c74fad40b0794978ba0ee841ed1",
      "patch": "@@ -218,9 +218,8 @@ void loadPredefinedProperties(final Hashtable properties, final Map<String, Stri\n         builder.append(\"\\\"/>\");\n       }\n       // TODO: remove this fake:\n-      builder.append(\"<property name=\\\"ant.home\\\" value=\\\"\\\">\");\n-      builder.append(\"<property name=\\\"ant.version\\\" value=\\\"1.6\");\n-      builder.append(\"\\\"/>\");\n+      builder.append(\"<property name=\\\"ant.home\\\" value=\\\"\\\"/>\");\n+      builder.append(\"<property name=\\\"ant.version\\\" value=\\\"1.6.5\\\"/>\");\n       builder.append(\"<property name=\\\"ant.project.name\\\" value=\\\"\");\n       final String name = getName();\n       builder.append((name == null) ? \"\" : name);",
      "parent_sha": "88ca48b4295f16bac002d9230cd818b80e55a7b3"
    }
  },
  {
    "oid": "a4e817a8223ab9f0c625e52640b7d3f64d23c5e1",
    "message": "don't show powered by section for bundled plugins (IDEA-212776)\n\nGitOrigin-RevId: 14d83cf12e38eaa9a7ee03b407cf450c6dcec376",
    "date": "2019-05-16T15:11:00Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/a4e817a8223ab9f0c625e52640b7d3f64d23c5e1",
    "details": {
      "sha": "867cbe56f52146d3b2940cc6aa42644b42bb644e",
      "filename": "platform/lang-impl/src/com/intellij/codeInsight/intention/impl/config/IntentionDescriptionPanel.java",
      "status": "modified",
      "additions": 7,
      "deletions": 15,
      "changes": 22,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/a4e817a8223ab9f0c625e52640b7d3f64d23c5e1/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fintention%2Fimpl%2Fconfig%2FIntentionDescriptionPanel.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/a4e817a8223ab9f0c625e52640b7d3f64d23c5e1/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fintention%2Fimpl%2Fconfig%2FIntentionDescriptionPanel.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInsight%2Fintention%2Fimpl%2Fconfig%2FIntentionDescriptionPanel.java?ref=a4e817a8223ab9f0c625e52640b7d3f64d23c5e1",
      "patch": "@@ -5,11 +5,10 @@\n import com.intellij.codeInsight.CodeInsightBundle;\n import com.intellij.codeInsight.hint.HintUtil;\n import com.intellij.ide.BrowserUtil;\n-import com.intellij.ide.plugins.IdeaPluginDescriptor;\n+import com.intellij.ide.plugins.IdeaPluginDescriptorImpl;\n import com.intellij.ide.plugins.PluginManager;\n import com.intellij.ide.plugins.PluginManagerConfigurableProxy;\n import com.intellij.ide.ui.search.SearchUtil;\n-import com.intellij.openapi.application.ApplicationInfo;\n import com.intellij.openapi.diagnostic.Logger;\n import com.intellij.openapi.extensions.PluginId;\n import com.intellij.openapi.fileTypes.FileType;\n@@ -22,7 +21,6 @@\n import com.intellij.ui.HyperlinkLabel;\n import com.intellij.ui.TitledSeparator;\n import com.intellij.util.ui.UIUtil;\n-import com.intellij.xml.util.XmlStringUtil;\n import org.jetbrains.annotations.NonNls;\n import org.jetbrains.annotations.Nullable;\n \n@@ -105,14 +103,10 @@ public void reset(IntentionActionMetaData actionMetaData, String filter)  {\n \n   private void setupPoweredByPanel(final IntentionActionMetaData actionMetaData) {\n     PluginId pluginId = actionMetaData == null ? null : actionMetaData.getPluginId();\n-    JComponent owner;\n-    if (pluginId == null) {\n-      ApplicationInfo info = ApplicationInfo.getInstance();\n-      String label = XmlStringUtil.wrapInHtml(info.getVersionName());\n-      owner = new JLabel(label);\n-    }\n-    else {\n-      IdeaPluginDescriptor pluginDescriptor = PluginManager.getPlugin(pluginId);\n+    myPoweredByPanel.removeAll();\n+    IdeaPluginDescriptorImpl pluginDescriptor  = (IdeaPluginDescriptorImpl)PluginManager.getPlugin(pluginId);\n+    boolean isCustomPlugin = pluginDescriptor != null && pluginDescriptor.isBundled();\n+    if (isCustomPlugin) {\n       HyperlinkLabel label = new HyperlinkLabel(CodeInsightBundle.message(\"powered.by.plugin\", pluginDescriptor.getName()));\n       label.addHyperlinkListener(new HyperlinkListener() {\n         @Override\n@@ -121,11 +115,9 @@ public void hyperlinkUpdate(HyperlinkEvent e) {\n           PluginManagerConfigurableProxy.showPluginConfigurable(null, project, pluginDescriptor);\n         }\n       });\n-      owner = label;\n+      myPoweredByPanel.add(label, BorderLayout.CENTER);\n     }\n-    //myPoweredByContainer.setVisible(true);\n-    myPoweredByPanel.removeAll();\n-    myPoweredByPanel.add(owner, BorderLayout.CENTER);\n+    myPoweredByPanel.setVisible(isCustomPlugin);\n   }\n \n ",
      "parent_sha": "bd09b3dece5c53490d3859609db3170ae6c0d5a1"
    }
  },
  {
    "oid": "c907c7c8c0195ed66e26a49b96c698bafb44b066",
    "message": "[RUBY-3124] LOG.error replaced with warning",
    "date": "2009-04-06T14:32:55Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/c907c7c8c0195ed66e26a49b96c698bafb44b066",
    "details": {
      "sha": "2bd1a3556c6a4edc37202ec064801aeebbf21d30",
      "filename": "smRunner/src/com/intellij/execution/testframework/sm/runner/GeneralToSMTRunnerEventsConvertor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/c907c7c8c0195ed66e26a49b96c698bafb44b066/smRunner%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Ftestframework%2Fsm%2Frunner%2FGeneralToSMTRunnerEventsConvertor.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/c907c7c8c0195ed66e26a49b96c698bafb44b066/smRunner%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Ftestframework%2Fsm%2Frunner%2FGeneralToSMTRunnerEventsConvertor.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/smRunner%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Ftestframework%2Fsm%2Frunner%2FGeneralToSMTRunnerEventsConvertor.java?ref=c907c7c8c0195ed66e26a49b96c698bafb44b066",
      "patch": "@@ -373,7 +373,7 @@ public void run() {\n         if (!myRunningTestsFullNameToProxy.isEmpty()) {\n           final Application application = ApplicationManager.getApplication();\n           if (!application.isHeadlessEnvironment() && !application.isUnitTestMode()) {\n-            LOG.error(\"Not all events were processed! \" + dumpRunningTestsNames());\n+            LOG.warn(\"Not all events were processed! \" + dumpRunningTestsNames());\n           }\n         }\n         myRunningTestsFullNameToProxy.clear();",
      "parent_sha": "444d8d39f471c00f5ad0e83c9fec1223c00a0ee5"
    }
  },
  {
    "oid": "128208729c68138d3a9603ba8addf45588fb6d74",
    "message": " Label changed for: IDEA-58380 Attach classes from repository: IDEA fails to find",
    "date": "2010-10-04T14:20:04Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/128208729c68138d3a9603ba8addf45588fb6d74",
    "details": {
      "sha": "8f9e142c1294ae449ce9dc29adc01bf5e798afd6",
      "filename": "plugins/maven/src/main/java/org/jetbrains/idea/maven/utils/RepositoryAttachDialog.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/128208729c68138d3a9603ba8addf45588fb6d74/plugins%2Fmaven%2Fsrc%2Fmain%2Fjava%2Forg%2Fjetbrains%2Fidea%2Fmaven%2Futils%2FRepositoryAttachDialog.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/128208729c68138d3a9603ba8addf45588fb6d74/plugins%2Fmaven%2Fsrc%2Fmain%2Fjava%2Forg%2Fjetbrains%2Fidea%2Fmaven%2Futils%2FRepositoryAttachDialog.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fmaven%2Fsrc%2Fmain%2Fjava%2Forg%2Fjetbrains%2Fidea%2Fmaven%2Futils%2FRepositoryAttachDialog.java?ref=128208729c68138d3a9603ba8addf45588fb6d74",
      "patch": "@@ -86,7 +86,7 @@ public RepositoryAttachDialog(Project project, boolean managed) {\n     myProject = project;\n     myManaged = managed;\n     myProgressIcon.suspend();\n-    myCaptionLabel.setText(\"Enter keywords to search by, class name or Maven coordinates,\\n\" +\n+    myCaptionLabel.setText(\"Enter keyword, pattern or class name to search by or Maven coordinates,\\n\" +\n                            \"i.e. 'springframework', 'Logger' or 'org.hibernate:hibernate-core:3.5.0.GA':\");\n     myCaptionLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));\n     myCaptionLabel.setUI(new MultiLineLabelUI());",
      "parent_sha": "15ef69816b233c7832d95d336bdf45be097a19b8"
    }
  },
  {
    "oid": "5d26132ba2f484951450ee0e37681ebf4ee3ede3",
    "message": "freeze reporting prototype - freeze threshold",
    "date": "2019-04-17T13:41:42Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/5d26132ba2f484951450ee0e37681ebf4ee3ede3",
    "details": {
      "sha": "1f5edded41eb45fc5209d0d1a588fd2e311fd183",
      "filename": "platform/platform-impl/src/com/intellij/diagnostic/IdeaFreezeReporter.java",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/5d26132ba2f484951450ee0e37681ebf4ee3ede3/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fdiagnostic%2FIdeaFreezeReporter.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/5d26132ba2f484951450ee0e37681ebf4ee3ede3/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fdiagnostic%2FIdeaFreezeReporter.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fdiagnostic%2FIdeaFreezeReporter.java?ref=5d26132ba2f484951450ee0e37681ebf4ee3ede3",
      "patch": "@@ -1,19 +1,32 @@\n // Copyright 2000-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n package com.intellij.diagnostic;\n \n+import com.intellij.ide.plugins.PluginManagerCore;\n+import com.intellij.openapi.application.Application;\n import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.diagnostic.Attachment;\n import com.intellij.openapi.util.registry.Registry;\n import com.intellij.util.containers.ContainerUtil;\n import org.jetbrains.annotations.NotNull;\n \n import java.io.File;\n+import java.lang.management.ManagementFactory;\n import java.util.ArrayList;\n import java.util.List;\n \n public class IdeaFreezeReporter {\n+  private static final int FREEZE_THRESHOLD = 15; // seconds\n+\n   public IdeaFreezeReporter() {\n-    ApplicationManager.getApplication().getMessageBus().connect().subscribe(IdePerformanceListener.TOPIC, new IdePerformanceListener() {\n+    Application app = ApplicationManager.getApplication();\n+    if (!app.isEAP() ||\n+        app.isUnitTestMode() ||\n+        PluginManagerCore.isRunningFromSources() ||\n+        ManagementFactory.getRuntimeMXBean().getInputArguments().stream().anyMatch(s -> s.contains(\"-agentlib:jdwp\"))) {\n+      return;\n+    }\n+\n+    app.getMessageBus().connect().subscribe(IdePerformanceListener.TOPIC, new IdePerformanceListener() {\n       final List<ThreadDump> myCurrentDumps = new ArrayList<>();\n       List<StackTraceElement> myStacktraceCommonPart = null;\n \n@@ -34,6 +47,7 @@ public void dumpedThreads(@NotNull File toFile, @NotNull ThreadDump dump) {\n       @Override\n       public void uiFreezeFinished(int lengthInSeconds) {\n         if (Registry.is(\"performance.watcher.freeze.report\") &&\n+            lengthInSeconds > FREEZE_THRESHOLD &&\n             !ContainerUtil.isEmpty(myCurrentDumps) &&\n             !ContainerUtil.isEmpty(myStacktraceCommonPart)) {\n           int size = Math.min(myCurrentDumps.size(), 20); // report up to 20 dumps",
      "parent_sha": "e6e6020f371f33b384ca937c577dc462a7ef289c"
    }
  },
  {
    "oid": "8d5403f9831a971d54785f3e543d196ab1cb352f",
    "message": "Deprecated api usage removed",
    "date": "2017-11-30T15:20:53Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/8d5403f9831a971d54785f3e543d196ab1cb352f",
    "details": {
      "sha": "822a1d2132e9f078a78106df4c1f4b8aec6a5bb2",
      "filename": "platform/external-system-impl/src/com/intellij/openapi/externalSystem/service/ui/ExternalSystemJdkComboBox.java",
      "status": "modified",
      "additions": 10,
      "deletions": 11,
      "changes": 21,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/8d5403f9831a971d54785f3e543d196ab1cb352f/platform%2Fexternal-system-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FexternalSystem%2Fservice%2Fui%2FExternalSystemJdkComboBox.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/8d5403f9831a971d54785f3e543d196ab1cb352f/platform%2Fexternal-system-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FexternalSystem%2Fservice%2Fui%2FExternalSystemJdkComboBox.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fexternal-system-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FexternalSystem%2Fservice%2Fui%2FExternalSystemJdkComboBox.java?ref=8d5403f9831a971d54785f3e543d196ab1cb352f",
      "patch": "@@ -32,7 +32,7 @@\n import com.intellij.openapi.util.Condition;\n import com.intellij.openapi.util.SystemInfo;\n import com.intellij.openapi.util.text.StringUtil;\n-import com.intellij.ui.ColoredListCellRendererWrapper;\n+import com.intellij.ui.ColoredListCellRenderer;\n import com.intellij.ui.JBColor;\n import com.intellij.ui.SimpleTextAttributes;\n import org.jetbrains.annotations.NotNull;\n@@ -46,7 +46,7 @@\n /**\n  * @author Sergey Evdokimov\n  */\n-public class ExternalSystemJdkComboBox extends ComboBoxWithWidePopup {\n+public class ExternalSystemJdkComboBox extends ComboBoxWithWidePopup<ExternalSystemJdkComboBox.JdkComboBoxItem> {\n \n   private static final int MAX_PATH_LENGTH = 50;\n \n@@ -60,21 +60,20 @@ public ExternalSystemJdkComboBox() {\n \n   public ExternalSystemJdkComboBox(@Nullable Project project) {\n     myProject = project;\n-    setRenderer(new ColoredListCellRendererWrapper() {\n+    setRenderer(new ColoredListCellRenderer<JdkComboBoxItem>() {\n \n       @Override\n-      protected void doCustomize(JList list, Object value, int index, boolean selected, boolean hasFocus) {\n-        JdkComboBoxItem item = (JdkComboBoxItem)value;\n+      protected void customizeCellRenderer(@NotNull JList list, JdkComboBoxItem value, int index, boolean selected, boolean hasFocus) {\n         CompositeAppearance appearance = new CompositeAppearance();\n         SdkType sdkType = JavaSdk.getInstance();\n         appearance.setIcon(sdkType.getIcon());\n-        SimpleTextAttributes attributes = getTextAttributes(item.valid, selected);\n+        SimpleTextAttributes attributes = getTextAttributes(value.valid, selected);\n         CompositeAppearance.DequeEnd ending = appearance.getEnding();\n \n-        ending.addText(item.label, attributes);\n-        if (item.comment != null && !item.comment.equals(item.jdkName)) {\n+        ending.addText(value.label, attributes);\n+        if (value.comment != null && !value.comment.equals(value.jdkName)) {\n           final SimpleTextAttributes textAttributes;\n-          if (!item.valid) {\n+          if (!value.valid) {\n             textAttributes = SimpleTextAttributes.ERROR_ATTRIBUTES;\n           }\n           else {\n@@ -83,7 +82,7 @@ protected void doCustomize(JList list, Object value, int index, boolean selected\n                              : SimpleTextAttributes.GRAY_ATTRIBUTES;\n           }\n \n-          ending.addComment(item.comment, textAttributes);\n+          ending.addComment(value.comment, textAttributes);\n         }\n \n         final CompositeAppearance compositeAppearance = ending.getAppearance();\n@@ -271,7 +270,7 @@ else if (selected && !(SystemInfo.isWinVistaOrNewer && UIManager.getLookAndFeel(\n     }\n   }\n \n-  private static class JdkComboBoxItem {\n+  static class JdkComboBoxItem {\n     private String jdkName;\n     private String label;\n     private String comment;",
      "parent_sha": "fd1e241f5b6b422c0cb8a124df2ce5c056739573"
    }
  },
  {
    "oid": "60eb69f45e8216921607ec0f3cbc63e2aac52644",
    "message": "[textmate] fix deleting textmate bundles (IDEA-287930)\n\nGitOrigin-RevId: e421e4e22b036925ab5daf2d71337c0f502673c6",
    "date": "2022-02-07T12:42:01Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/60eb69f45e8216921607ec0f3cbc63e2aac52644",
    "details": {
      "sha": "696384af76590f1e1ffcd349849a13e60cde5301",
      "filename": "plugins/textmate/src/org/jetbrains/plugins/textmate/configuration/TextMateBundlesListPanel.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/60eb69f45e8216921607ec0f3cbc63e2aac52644/plugins%2Ftextmate%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Ftextmate%2Fconfiguration%2FTextMateBundlesListPanel.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/60eb69f45e8216921607ec0f3cbc63e2aac52644/plugins%2Ftextmate%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Ftextmate%2Fconfiguration%2FTextMateBundlesListPanel.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Ftextmate%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Ftextmate%2Fconfiguration%2FTextMateBundlesListPanel.java?ref=60eb69f45e8216921607ec0f3cbc63e2aac52644",
      "patch": "@@ -91,10 +91,9 @@ public void run(AnActionButton button) {\n             .noText(CommonBundle.getCancelButtonText())\n             .icon(null)\n             .ask(myBundlesList)) {\n-            return;\n+            ListUtil.removeSelectedItems(myBundlesList);\n+            fireStateChanged();\n           }\n-          ListUtil.removeSelectedItems(myBundlesList);\n-          fireStateChanged();\n         }\n       })\n       .setAddAction(new AnActionButtonRunnable() {",
      "parent_sha": "1d08e065d8b0f24f96f5e8384cc2eed12418a164"
    }
  },
  {
    "oid": "c3acf0f606dc5e5b5f77f940c43c026486a0b084",
    "message": "removed notnull",
    "date": "2017-05-04T10:26:19Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/c3acf0f606dc5e5b5f77f940c43c026486a0b084",
    "details": {
      "sha": "b705c2d0acc68fc8ee8b448c79df976689b6180a",
      "filename": "platform/lang-impl/src/com/intellij/util/indexing/FileBasedIndexImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/c3acf0f606dc5e5b5f77f940c43c026486a0b084/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Futil%2Findexing%2FFileBasedIndexImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/c3acf0f606dc5e5b5f77f940c43c026486a0b084/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Futil%2Findexing%2FFileBasedIndexImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Futil%2Findexing%2FFileBasedIndexImpl.java?ref=c3acf0f606dc5e5b5f77f940c43c026486a0b084",
      "patch": "@@ -1573,7 +1573,7 @@ private static void initFileContent(@NotNull FileContentImpl fc, Project project\n \n   static final Key<Boolean> ourPhysicalContentKey = Key.create(\"physical.content.flag\");\n \n-  private void updateSingleIndex(@NotNull ID<?, ?> indexId, @NotNull VirtualFile file, final int inputId, @Nullable FileContent currentFC) {\n+  private void updateSingleIndex(@NotNull ID<?, ?> indexId, VirtualFile file, final int inputId, @Nullable FileContent currentFC) {\n     if (!RebuildStatus.isOk(indexId) && !myIsUnitTestMode) {\n       return; // the index is scheduled for rebuild, no need to update\n     }\n@@ -1640,7 +1640,7 @@ private void forceUpdate(@Nullable Project project, @Nullable final GlobalSearch\n     myReadLock = lock.readLock();\n     myWriteLock = lock.writeLock();\n   }\n-  private void scheduleUpdate(@NotNull final ID<?, ?> indexId, @NotNull Computable<Boolean> update, @NotNull VirtualFile file, final int inputId, final boolean hasContent) {\n+  private void scheduleUpdate(@NotNull final ID<?, ?> indexId, @NotNull Computable<Boolean> update, VirtualFile file, final int inputId, final boolean hasContent) {\n     if (updateWithBufferingEnabled(update)) {\n       myReadLock.lock();\n       try {",
      "parent_sha": "0c088f0395b2b94ee8b3aa1ab2293f4e5eceb83c"
    }
  },
  {
    "oid": "50669ac4110a8ab07897edbd00bef33a5f77684b",
    "message": "inc year",
    "date": "2013-02-21T11:54:14Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/50669ac4110a8ab07897edbd00bef33a5f77684b",
    "details": {
      "sha": "733b54d3ec5ad04eebf0bf7d28354699678d16fd",
      "filename": "platform/testFramework/src/com/intellij/idea/Bombed.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/50669ac4110a8ab07897edbd00bef33a5f77684b/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2Fidea%2FBombed.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/50669ac4110a8ab07897edbd00bef33a5f77684b/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2Fidea%2FBombed.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2Fidea%2FBombed.java?ref=50669ac4110a8ab07897edbd00bef33a5f77684b",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2000-2009 JetBrains s.r.o.\n+ * Copyright 2000-2013 JetBrains s.r.o.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,7 +25,7 @@\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.TYPE, ElementType.METHOD})\n public @interface Bombed {\n-  int year() default 2012;\n+  int year() default 2013;\n   @JdkConstants.CalendarMonth int month();\n   int day();\n   int time() default 0;",
      "parent_sha": "5a50c6b1278fa8825259611d1fe2390dffcba40b"
    }
  },
  {
    "oid": "ef3df3a1e3448f93c70b251b3474e11a154613dd",
    "message": "(no message)",
    "date": "2005-01-17T12:28:37Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/ef3df3a1e3448f93c70b251b3474e11a154613dd",
    "details": {
      "sha": "69a3902ba35d036733d5ec927fb4acf789f5c887",
      "filename": "source/com/intellij/codeFormatting/general/FormatterUtil.java",
      "status": "modified",
      "additions": 32,
      "deletions": 20,
      "changes": 52,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/ef3df3a1e3448f93c70b251b3474e11a154613dd/source%2Fcom%2Fintellij%2FcodeFormatting%2Fgeneral%2FFormatterUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/ef3df3a1e3448f93c70b251b3474e11a154613dd/source%2Fcom%2Fintellij%2FcodeFormatting%2Fgeneral%2FFormatterUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/source%2Fcom%2Fintellij%2FcodeFormatting%2Fgeneral%2FFormatterUtil.java?ref=ef3df3a1e3448f93c70b251b3474e11a154613dd",
      "patch": "@@ -31,44 +31,46 @@\n  */\n package com.intellij.codeFormatting.general;\n \n-import com.intellij.psi.impl.source.tree.*;\n-import com.intellij.psi.impl.source.parsing.ChameleonTransforming;\n-import com.intellij.psi.impl.source.codeStyle.Helper;\n-import com.intellij.psi.tree.IElementType;\n-import com.intellij.openapi.project.Project;\n import com.intellij.openapi.fileTypes.FileType;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.psi.impl.source.codeStyle.Helper;\n+import com.intellij.psi.impl.source.parsing.ChameleonTransforming;\n+import com.intellij.psi.impl.source.tree.*;\n \n public class FormatterUtil {\n \n-  public static String getWhiteSpaceBefore(TreeElement element, final IElementType fileElementType) {\n-    final TreeElement wsCandidate = getWsCandidate(element, fileElementType);\n-    if (wsCandidate == null || !isSpace(wsCandidate)) {\n-      return \"\";\n-    } else {\n-      return wsCandidate.getText();\n+  public static String getWhiteSpaceBefore(TreeElement element) {\n+    TreeElement wsCandidate = getWsCandidate(element);\n+    final StringBuffer result = new StringBuffer();\n+    while (wsCandidate != null && isSpaceTextElement(wsCandidate)) {\n+      result.append(wsCandidate.getText());\n+      final TreeElement newValue = getWsCandidate(wsCandidate);\n+      if (wsCandidate == newValue) break;\n+      wsCandidate = newValue;\n     }\n+    return result.toString();\n   }\n-  private static TreeElement getWsCandidate(TreeElement element, IElementType fileElementType) {\n+  private static TreeElement getWsCandidate(TreeElement element) {\n     if (element == null) return null;\n     TreeElement treePrev = element.getTreePrev();\n     if (treePrev != null) {\n       TreeElement candidate = getLastChildOf(treePrev);\n-      if (candidate != null && isSpace(candidate)) {\n+      if (candidate != null && isSpaceTextElement(candidate)) {\n         return candidate;\n       }\n       else if (candidate != null && candidate.getTextLength() == 0) {\n-        return getWsCandidate(candidate, fileElementType);\n+        return getWsCandidate(candidate);\n       }\n       else {\n         return element;\n       }\n     }\n     final CompositeElement treeParent = element.getTreeParent();\n \n-    if (treeParent == null || treeParent.getTreeParent() == null || treeParent.getElementType() == fileElementType) {\n+    if (treeParent == null || treeParent.getTreeParent() == null) {\n       return element;\n     } else {\n-      return getWsCandidate(treeParent, fileElementType);\n+      return getWsCandidate(treeParent);\n     }\n   }\n \n@@ -92,25 +94,35 @@ private static TreeElement getLastChildOf(TreeElement element) {\n     }\n   }\n \n-  private static boolean isSpace(TreeElement treePrev) {\n+  private static boolean isWhiteSpaceElement(TreeElement treePrev) {\n     return treePrev.getElementType() == ElementType.WHITE_SPACE;\n   }\n \n-  public static void replaceWhiteSpace(final String whiteSpace, final TreeElement leafElement, IElementType fileElementType) {\n+  private static boolean isSpaceTextElement(TreeElement treePrev) {\n+    if (isWhiteSpaceElement(treePrev)) return true;\n+    final String text = treePrev.getText();\n+    return text.length() > 0 && text.trim().length() == 0;\n+  }\n+\n+  public static String replaceWhiteSpace(final String whiteSpace, final TreeElement leafElement) {\n     LeafElement whiteSpaceElement = Factory.createSingleLeafElement(ElementType.WHITE_SPACE,\n                                                                     whiteSpace.toCharArray(), 0, whiteSpace.length(),\n                                                                     SharedImplUtil.findCharTableByTree(leafElement), null);\n \n-    TreeElement treePrev = getWsCandidate(leafElement, fileElementType);\n+    TreeElement treePrev = getWsCandidate(leafElement);\n     if (treePrev == null) {\n       if (whiteSpace.length() > 0) {\n         ChangeUtil.addChild(leafElement.getTreeParent(), whiteSpaceElement, leafElement);\n       }\n-    } else if (!isSpace(treePrev)) {\n+    } else if (!isSpaceTextElement(treePrev)) {\n       ChangeUtil.addChild(treePrev.getTreeParent(), whiteSpaceElement, treePrev);\n+    } else if (!isWhiteSpaceElement(treePrev)){\n+      return getWhiteSpaceBefore(leafElement);\n     } else {\n       ChangeUtil.replaceChild(treePrev.getTreeParent(), treePrev, whiteSpaceElement);\n     }\n+\n+    return getWhiteSpaceBefore(leafElement);\n   }\n \n   public static TreeElement shiftTokenIndent(final Project project,",
      "parent_sha": "ef1e3e1c9adabb2f0a29c6476394635b75726914"
    }
  },
  {
    "oid": "0123c4cdfc87afee25691748f734b814c11c4b76",
    "message": "reliably run delayed tasks on dumb mode completion",
    "date": "2012-07-15T13:46:04Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/0123c4cdfc87afee25691748f734b814c11c4b76",
    "details": {
      "sha": "6a7de884565272495a5e620c5cf140411c1d5a55",
      "filename": "platform/platform-impl/src/com/intellij/openapi/project/DumbServiceImpl.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/0123c4cdfc87afee25691748f734b814c11c4b76/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fproject%2FDumbServiceImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/0123c4cdfc87afee25691748f734b814c11c4b76/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fproject%2FDumbServiceImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fproject%2FDumbServiceImpl.java?ref=0123c4cdfc87afee25691748f734b814c11c4b76",
      "patch": "@@ -209,13 +209,11 @@ private void updateFinished() {\n         }\n         runnable = myRunWhenSmartQueue.pullFirst();\n       }\n-      if (!myProject.isDisposed()) {\n-        try {\n-          runnable.run();\n-        }\n-        catch (Throwable e) {\n-          LOG.error(e);\n-        }\n+      try {\n+        runnable.run();\n+      }\n+      catch (Throwable e) {\n+        LOG.error(e);\n       }\n     }\n   }",
      "parent_sha": "28eaaf025af164c497f7f6825c1205dd9c535425"
    }
  },
  {
    "oid": "7303a247a750a9b4cf3630b2558a4e54093570d0",
    "message": "Test changed to pass for IPython 0.13",
    "date": "2012-08-17T15:48:34Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/7303a247a750a9b4cf3630b2558a4e54093570d0",
    "details": {
      "sha": "a9c8a1327a48f8fcf5493f794e58b876f370b4db",
      "filename": "python/testSrc/com/jetbrains/env/python/IPythonConsoleTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/7303a247a750a9b4cf3630b2558a4e54093570d0/python%2FtestSrc%2Fcom%2Fjetbrains%2Fenv%2Fpython%2FIPythonConsoleTest.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/7303a247a750a9b4cf3630b2558a4e54093570d0/python%2FtestSrc%2Fcom%2Fjetbrains%2Fenv%2Fpython%2FIPythonConsoleTest.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/python%2FtestSrc%2Fcom%2Fjetbrains%2Fenv%2Fpython%2FIPythonConsoleTest.java?ref=7303a247a750a9b4cf3630b2558a4e54093570d0",
      "patch": "@@ -19,7 +19,7 @@ public void testQuestion() throws Exception {\n       public void testing() throws Exception {\n         exec(\"import multiprocessing\");\n         exec(\"multiprocessing?\");\n-        waitForOutput(\"Base Class:\", \"<type 'module'>\");\n+        waitForOutput(\"Type:\", \"module\");\n       }\n     });\n   }",
      "parent_sha": "286621afbef2ccc099280a2c72e873b1f0fb58fe"
    }
  },
  {
    "oid": "1451475e1af8fc94adf40a87a6fadb72ce19391a",
    "message": "[kubernetes] 1) inspection for duplicated ConfigMap/Secret entries; 2) enum for CustomResourceDefinition scope; 3) plugin description updated\n\nGitOrigin-RevId: 24e68427ffb29c3fa9682f6b8a508170c750887c",
    "date": "2020-06-16T16:09:47Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/1451475e1af8fc94adf40a87a6fadb72ce19391a",
    "details": {
      "sha": "5b16552899c487734c4a8d3a8874a9fe718f36b0",
      "filename": "plugins/yaml/src/org/jetbrains/yaml/meta/model/Field.java",
      "status": "modified",
      "additions": 40,
      "deletions": 8,
      "changes": 48,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/1451475e1af8fc94adf40a87a6fadb72ce19391a/plugins%2Fyaml%2Fsrc%2Forg%2Fjetbrains%2Fyaml%2Fmeta%2Fmodel%2FField.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/1451475e1af8fc94adf40a87a6fadb72ce19391a/plugins%2Fyaml%2Fsrc%2Forg%2Fjetbrains%2Fyaml%2Fmeta%2Fmodel%2FField.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fyaml%2Fsrc%2Forg%2Fjetbrains%2Fyaml%2Fmeta%2Fmodel%2FField.java?ref=1451475e1af8fc94adf40a87a6fadb72ce19391a",
      "patch": "@@ -28,7 +28,10 @@ public enum Relation {\n   }\n \n   private final String myName;\n-  private final YamlMetaType myMainType;\n+  private final MetaTypeProvider myMetaTypeProvider;\n+  // must be accessed with getMainType()\n+  @SuppressWarnings(\"FieldAccessedSynchronizedAndUnsynchronized\")\n+  private YamlMetaType myMainType;\n   private boolean myIsRequired;\n   private boolean myEditable = true;\n   private boolean myDeprecated = false;\n@@ -39,9 +42,25 @@ public enum Relation {\n \n   private final Map<Relation, YamlMetaType> myPerRelationTypes = new HashMap<>();\n \n+  /**\n+   * Used in {@link Field#Field(String, MetaTypeProvider)}.\n+   * Invoked only once\n+   */\n+  public interface MetaTypeProvider {\n+    @NotNull YamlMetaType getMainType();\n+  }\n+\n   public Field(@NonNls @NotNull String name, @NotNull YamlMetaType mainType) {\n+    this(name, () -> mainType);\n+  }\n+\n+  /**\n+   * Used for late initialization of the field metatype.\n+   * Useful when the type isn't fully constructed at the moment of the field initialization (e.g. for cyclic dependencies)\n+   */\n+  public Field(@NonNls @NotNull String name, @NotNull MetaTypeProvider provider) {\n     myName = name;\n-    myMainType = mainType;\n+    myMetaTypeProvider = provider;\n   }\n \n   @NotNull\n@@ -128,7 +147,7 @@ public final String getName() {\n   @Contract(pure = true)\n   @NotNull\n   public YamlMetaType getType(@NotNull Relation relation) {\n-    return myPerRelationTypes.getOrDefault(relation, myMainType);\n+    return myPerRelationTypes.getOrDefault(relation, getMainType());\n   }\n \n   @Contract(pure = true)\n@@ -149,7 +168,7 @@ public Relation getDefaultRelation() {\n     if (myIsMany) {\n       return Relation.SEQUENCE_ITEM;\n     }\n-    return myMainType instanceof YamlScalarType ? Relation.SCALAR_VALUE : Relation.OBJECT_CONTENTS;\n+    return getMainType() instanceof YamlScalarType ? Relation.SCALAR_VALUE : Relation.OBJECT_CONTENTS;\n   }\n \n   @NotNull\n@@ -183,10 +202,10 @@ public String toString() {\n     result.append(\"[\").append(getName()).append(\"]@\");\n     result.append(Integer.toHexString(hashCode()));\n     result.append(\" : \");\n-    result.append(myMainType.getTypeName());\n+    result.append(getMainType().getTypeName());\n \n     List<String> nonDefaultTypes = myPerRelationTypes.entrySet().stream()\n-      .filter(e -> e.getValue() == myMainType)\n+      .filter(e -> e.getValue() == getMainType())\n       .map(e -> e.getKey() + \":\" + e.getValue())\n       .collect(Collectors.toList());\n \n@@ -205,7 +224,7 @@ public List<LookupElementBuilder> getKeyLookups(@NotNull YamlMetaType ownerClass\n \n     LookupElementBuilder lookup = LookupElementBuilder\n       .create(new TypeFieldPair(ownerClass, this), getName())\n-      .withTypeText(myMainType.getDisplayName(), true)\n+      .withTypeText(getMainType().getDisplayName(), true)\n       .withIcon(getLookupIcon())\n       .withStrikeoutness(isDeprecated());\n \n@@ -226,6 +245,19 @@ public boolean hasRelationSpecificType(@NotNull Relation relation) {\n \n   @Nullable\n   public Icon getLookupIcon() {\n-    return myIsMany ? AllIcons.Json.Array : myMainType.getIcon();\n+    return myIsMany ? AllIcons.Json.Array : getMainType().getIcon();\n+  }\n+  \n+  @NotNull\n+  private YamlMetaType getMainType() {\n+    if(myMainType != null)\n+      return myMainType;\n+    \n+    synchronized (myMetaTypeProvider) {\n+      if(myMainType == null) {\n+        myMainType = myMetaTypeProvider.getMainType();\n+      }\n+      return myMainType;\n+    }\n   }\n }",
      "parent_sha": "2e5f00192fc016e55f5e97ffd27df19e3c0a9ff8"
    }
  },
  {
    "oid": "7be23bb7bc5732731aef363a8c26767c1e876c2b",
    "message": "EA-31302 (assert: ProblemDescriptorImpl.<init>)",
    "date": "2011-11-08T16:04:08Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/7be23bb7bc5732731aef363a8c26767c1e876c2b",
    "details": {
      "sha": "c8a5aa89e85c30d4b2b81795e78092b59b938e55",
      "filename": "plugins/InspectionGadgets/src/com/siyeh/ig/errorhandling/TooBroadThrowsInspection.java",
      "status": "modified",
      "additions": 20,
      "deletions": 34,
      "changes": 54,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/7be23bb7bc5732731aef363a8c26767c1e876c2b/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Ferrorhandling%2FTooBroadThrowsInspection.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/7be23bb7bc5732731aef363a8c26767c1e876c2b/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Ferrorhandling%2FTooBroadThrowsInspection.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2FInspectionGadgets%2Fsrc%2Fcom%2Fsiyeh%2Fig%2Ferrorhandling%2FTooBroadThrowsInspection.java?ref=7be23bb7bc5732731aef363a8c26767c1e876c2b",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Bas Leijdekkers\n+ * Copyright 2010-2011 Bas Leijdekkers\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -77,28 +77,23 @@ protected String buildErrorString(Object... infos) {\n \n   @Override\n   public JComponent createOptionsPanel() {\n-    return new SingleCheckboxOptionsPanel(\n-      InspectionGadgetsBundle.message(\"too.broad.catch.option\"),\n-      this, \"onlyWarnOnRootExceptions\");\n+    return new SingleCheckboxOptionsPanel(InspectionGadgetsBundle.message(\"too.broad.catch.option\"), this, \"onlyWarnOnRootExceptions\");\n   }\n \n   @NotNull\n   @Override\n   protected InspectionGadgetsFix buildFix(Object... infos) {\n-    final Collection<SmartTypePointer> maskedExceptions =\n-      (Collection<SmartTypePointer>)infos[0];\n+    final Collection<SmartTypePointer> maskedExceptions = (Collection<SmartTypePointer>)infos[0];\n     final Boolean originalNeeded = (Boolean)infos[1];\n-    return new AddThrowsClauseFix(maskedExceptions,\n-                                  originalNeeded.booleanValue());\n+    return new AddThrowsClauseFix(maskedExceptions, originalNeeded.booleanValue());\n   }\n \n   private static class AddThrowsClauseFix extends InspectionGadgetsFix {\n \n     private final Collection<SmartTypePointer> types;\n     private final boolean originalNeeded;\n \n-    AddThrowsClauseFix(Collection<SmartTypePointer> types,\n-                       boolean originalNeeded) {\n+    AddThrowsClauseFix(Collection<SmartTypePointer> types, boolean originalNeeded) {\n       this.types = types;\n       this.originalNeeded = originalNeeded;\n     }\n@@ -116,24 +111,21 @@ public String getName() {\n     }\n \n     @Override\n-    protected void doFix(Project project, ProblemDescriptor descriptor)\n-      throws IncorrectOperationException {\n+    protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException {\n       final PsiElement element = descriptor.getPsiElement();\n       final PsiElement parent = element.getParent();\n       if (!(parent instanceof PsiReferenceList)) {\n         return;\n       }\n       final PsiReferenceList referenceList = (PsiReferenceList)parent;\n-      final PsiElementFactory factory =\n-        JavaPsiFacade.getElementFactory(project);\n+      final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project);\n       if (!originalNeeded) {\n         element.delete();\n       }\n       for (SmartTypePointer type : types) {\n         final PsiType psiType = type.getType();\n         if (psiType instanceof PsiClassType) {\n-          final PsiJavaCodeReferenceElement referenceElement =\n-            factory.createReferenceElementByType((PsiClassType)psiType);\n+          final PsiJavaCodeReferenceElement referenceElement = factory.createReferenceElementByType((PsiClassType)psiType);\n           referenceList.add(referenceElement);\n         }\n       }\n@@ -152,26 +144,24 @@ private class TooBroadThrowsVisitor\n     public void visitMethod(PsiMethod method) {\n       super.visitMethod(method);\n       final PsiReferenceList throwsList = method.getThrowsList();\n-      final PsiJavaCodeReferenceElement[] throwsReferences =\n-        throwsList.getReferenceElements();\n+      if (!throwsList.isPhysical()) {\n+        return;\n+      }\n+      final PsiJavaCodeReferenceElement[] throwsReferences = throwsList.getReferenceElements();\n       if (throwsReferences.length == 0) {\n         return;\n       }\n       final PsiCodeBlock body = method.getBody();\n       if (body == null) {\n         return;\n       }\n-      final Set<PsiClassType> exceptionsThrown =\n-        ExceptionUtils.calculateExceptionsThrown(body);\n-      final PsiClassType[] referencedExceptions =\n-        throwsList.getReferencedTypes();\n-      final Set<PsiClassType> exceptionsDeclared =\n-        new HashSet(referencedExceptions.length);\n+      final Set<PsiClassType> exceptionsThrown = ExceptionUtils.calculateExceptionsThrown(body);\n+      final PsiClassType[] referencedExceptions = throwsList.getReferencedTypes();\n+      final Set<PsiClassType> exceptionsDeclared = new HashSet(referencedExceptions.length);\n       ContainerUtil.addAll(exceptionsDeclared, referencedExceptions);\n       final int referencedExceptionsLength = referencedExceptions.length;\n       for (int i = 0; i < referencedExceptionsLength; i++) {\n-        final PsiClassType referencedException =\n-          referencedExceptions[i];\n+        final PsiClassType referencedException = referencedExceptions[i];\n         if (onlyWarnOnRootExceptions) {\n           if (!ExceptionUtils.isGenericExceptionClass(\n             referencedException)) {\n@@ -181,18 +171,14 @@ public void visitMethod(PsiMethod method) {\n         final List<SmartTypePointer> exceptionsMasked = new ArrayList();\n         final SmartTypePointerManager pointerManager = SmartTypePointerManager.getInstance(body.getProject());\n         for (PsiClassType exceptionThrown : exceptionsThrown) {\n-          if (referencedException.isAssignableFrom(exceptionThrown) &&\n-              !exceptionsDeclared.contains(exceptionThrown)) {\n+          if (referencedException.isAssignableFrom(exceptionThrown) && !exceptionsDeclared.contains(exceptionThrown)) {\n             exceptionsMasked.add(pointerManager.createSmartTypePointer(exceptionThrown));\n           }\n         }\n         if (!exceptionsMasked.isEmpty()) {\n-          final PsiJavaCodeReferenceElement throwsReference =\n-            throwsReferences[i];\n-          final boolean originalNeeded =\n-            exceptionsThrown.contains(referencedException);\n-          registerError(throwsReference, exceptionsMasked,\n-                        Boolean.valueOf(originalNeeded));\n+          final PsiJavaCodeReferenceElement throwsReference = throwsReferences[i];\n+          final boolean originalNeeded = exceptionsThrown.contains(referencedException);\n+          registerError(throwsReference, exceptionsMasked, Boolean.valueOf(originalNeeded));\n         }\n       }\n     }",
      "parent_sha": "c7df2d10ab539416887977fb46a0ca915478f4a6"
    }
  },
  {
    "oid": "4bf3e22f50eaaf4637f203724718f26fa786d7fc",
    "message": "Delete unnecessary extension caches\n\nGitOrigin-RevId: f28a102434a45d8572c91e48cbc3870c98265761",
    "date": "2019-11-07T02:40:58Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/4bf3e22f50eaaf4637f203724718f26fa786d7fc",
    "details": {
      "sha": "994e14f40891be34755d06591ea5e5b34ea45de4",
      "filename": "platform/core-ui/src/util/IconUtil.java",
      "status": "modified",
      "additions": 2,
      "deletions": 21,
      "changes": 23,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/4bf3e22f50eaaf4637f203724718f26fa786d7fc/platform%2Fcore-ui%2Fsrc%2Futil%2FIconUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/4bf3e22f50eaaf4637f203724718f26fa786d7fc/platform%2Fcore-ui%2Fsrc%2Futil%2FIconUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fcore-ui%2Fsrc%2Futil%2FIconUtil.java?ref=4bf3e22f50eaaf4637f203724718f26fa786d7fc",
      "patch": "@@ -29,7 +29,6 @@\n import java.awt.image.BufferedImage;\n import java.awt.image.RGBImageFilter;\n import java.lang.ref.WeakReference;\n-import java.util.List;\n import java.util.Objects;\n import java.util.function.Supplier;\n \n@@ -145,7 +144,7 @@ public int getIconHeight() {\n     Icon icon = providersIcon != null ? providersIcon : getBaseIcon(file);\n \n     boolean dumb = project != null && DumbService.getInstance(project).isDumb();\n-    for (FileIconPatcher patcher : getPatchers()) {\n+    for (FileIconPatcher patcher : FileIconPatcher.EP_NAME.getExtensionList()) {\n       if (dumb && !DumbService.isDumbAware(patcher)) {\n         continue;\n       }\n@@ -196,7 +195,7 @@ private static Icon getBaseIcon(VirtualFile vFile) {\n \n   @Nullable\n   private static Icon getProvidersIcon(@NotNull VirtualFile file, @Iconable.IconFlags int flags, Project project) {\n-    for (FileIconProvider provider : getProviders()) {\n+    for (FileIconProvider provider : FileIconProvider.EP_NAME.getExtensionList()) {\n       final Icon icon = provider.getIcon(file, flags, project);\n       if (icon != null) return icon;\n     }\n@@ -213,24 +212,6 @@ public static Icon getEmptyIcon(boolean showVisibility) {\n     return baseIcon;\n   }\n \n-  private static class FileIconProviderHolder {\n-    private static final List<FileIconProvider> myProviders = FileIconProvider.EP_NAME.getExtensionList();\n-  }\n-\n-  @NotNull\n-  private static List<FileIconProvider> getProviders() {\n-    return FileIconProviderHolder.myProviders;\n-  }\n-\n-  private static class FileIconPatcherHolder {\n-    private static final List<FileIconPatcher> ourPatchers = FileIconPatcher.EP_NAME.getExtensionList();\n-  }\n-\n-  @NotNull\n-  private static List<FileIconPatcher> getPatchers() {\n-    return FileIconPatcherHolder.ourPatchers;\n-  }\n-\n   public static Image toImage(@NotNull Icon icon) {\n     return toImage(icon, null);\n   }",
      "parent_sha": "d4fef1966b050fcd3c00c3fdce5c08a9165a09e3"
    }
  },
  {
    "oid": "3a6b9cc03a6d8b6bf1fd3b68503d23e2c381723d",
    "message": "IDEA-76817 Run configurations combobox pressed state is absent(cherry picked from commit 91a5c96)",
    "date": "2011-12-06T10:16:16Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/3a6b9cc03a6d8b6bf1fd3b68503d23e2c381723d",
    "details": {
      "sha": "a8843a37dfdf8a382325e03912f4324e441586c7",
      "filename": "platform/platform-api/src/com/intellij/openapi/actionSystem/ex/ComboBoxAction.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/3a6b9cc03a6d8b6bf1fd3b68503d23e2c381723d/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FactionSystem%2Fex%2FComboBoxAction.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/3a6b9cc03a6d8b6bf1fd3b68503d23e2c381723d/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FactionSystem%2Fex%2FComboBoxAction.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2FactionSystem%2Fex%2FComboBoxAction.java?ref=3a6b9cc03a6d8b6bf1fd3b68503d23e2c381723d",
      "patch": "@@ -299,7 +299,11 @@ protected void paintComponent(Graphics g) {\n         g2.setColor(UIUtil.getControlColor());\n         final int w = getWidth();\n         final int h = getHeight();\n-        g2.setPaint(new GradientPaint(0,0, new Gray(250, 180), 0, h, new Gray(220, 180)));\n+        if (getModel().isArmed() && getModel().isPressed()) {\n+          g2.setPaint(new GradientPaint(0,0, new Gray(220, 180), 0, h, new Gray(180, 180)));\n+        } else {\n+          g2.setPaint(new GradientPaint(0,0, new Gray(250, 180), 0, h, new Gray(220, 180)));\n+        }\n         g2.fillRect(2, 0, w-2, h);\n         if (!myMouseInside) {\n           g2.setPaint(new GradientPaint(0,0, Gray._180, 0, h, Gray._150));",
      "parent_sha": "57b59718d3d088959913cf68b05c6753005ec396"
    }
  },
  {
    "oid": "e6e95de561194f2994ec95b434ea5c5f1596a5c7",
    "message": "[UI] IDEA-306881 Factor in current monitor for Background Tasks popup bounds\n\nThe per-app WindowStateService needs some hint to determine the current\nmonitor: a window, a device configuration or a project. Otherwise, it falls back\nto global coordinates which is bad for multi-monitor configuration.\n\nFixed by providing the top-level IDE frame to it.\n\nGitOrigin-RevId: a57770b80bce5bdaa69ac81616cb1f3dbfac9689",
    "date": "2022-11-28T13:32:39Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/e6e95de561194f2994ec95b434ea5c5f1596a5c7",
    "details": {
      "sha": "a208938b54766d9d63f4cef63cc664c240a25d9a",
      "filename": "platform/platform-impl/src/com/intellij/openapi/wm/impl/status/ProcessPopup.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/e6e95de561194f2994ec95b434ea5c5f1596a5c7/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2Fstatus%2FProcessPopup.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/e6e95de561194f2994ec95b434ea5c5f1596a5c7/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2Fstatus%2FProcessPopup.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fwm%2Fimpl%2Fstatus%2FProcessPopup.java?ref=e6e95de561194f2994ec95b434ea5c5f1596a5c7",
      "patch": "@@ -81,13 +81,13 @@ public void removeIndicator(@NotNull InlineProgressIndicator indicator) {\n   }\n \n   private @NotNull Rectangle calculateBounds() {\n-    Rectangle savedBounds = WindowStateService.getInstance().getBounds(DIMENSION_SERVICE_KEY);\n+    JFrame frame = (JFrame)UIUtil.findUltimateParent(myProgressPanel);\n+\n+    Rectangle savedBounds = WindowStateService.getInstance().getBoundsFor(frame, DIMENSION_SERVICE_KEY);\n     if (savedBounds != null) {\n       return savedBounds;\n     }\n \n-    JFrame frame = (JFrame)UIUtil.findUltimateParent(myProgressPanel);\n-\n     Dimension contentSize = myContentPanel.getPreferredSize();\n     int contentWidth = Math.max(contentSize.width, JBUI.scale(300));\n     int contentHeight = Math.max(contentSize.height, JBUI.scale(100));\n@@ -195,7 +195,7 @@ public void onClosed(@NotNull LightweightWindowEvent event) {\n         newBounds.height -= ((AbstractPopup)myPopup).getHeaderPreferredSize().height;\n       }\n       if (!myPopupBounds.equals(newBounds)) {\n-        WindowStateService.getInstance().putBounds(DIMENSION_SERVICE_KEY, newBounds);\n+        WindowStateService.getInstance().putBoundsFor(UIUtil.findUltimateParent(myProgressPanel), DIMENSION_SERVICE_KEY, newBounds);\n       }\n       myPopupBounds = null;\n ",
      "parent_sha": "911b7231aa01b246f7c6dc1c527ab63da392801c"
    }
  },
  {
    "oid": "3884f216b7e5b699fe0940ed6f5392266b0327fa",
    "message": "EA-22387 - NPE: SmartTypePointerManagerImpl.createSmartTypePointer",
    "date": "2010-11-20T18:32:44Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/3884f216b7e5b699fe0940ed6f5392266b0327fa",
    "details": {
      "sha": "4dcf5caeefcb136fe98ef42c223aead9bf8f078e",
      "filename": "plugins/groovy/src/org/jetbrains/plugins/groovy/annotator/intentions/CreateFieldFromConstructorLabelFix.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/3884f216b7e5b699fe0940ed6f5392266b0327fa/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Fannotator%2Fintentions%2FCreateFieldFromConstructorLabelFix.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/3884f216b7e5b699fe0940ed6f5392266b0327fa/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Fannotator%2Fintentions%2FCreateFieldFromConstructorLabelFix.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fgroovy%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Fannotator%2Fintentions%2FCreateFieldFromConstructorLabelFix.java?ref=3884f216b7e5b699fe0940ed6f5392266b0327fa",
      "patch": "@@ -55,7 +55,12 @@ protected TypeConstraint[] calculateTypeConstrains() {\n     if (expression != null) {\n       type = expression.getType();\n     }\n-    return new TypeConstraint[]{SupertypeConstraint.create(type, type)};\n+    if (type != null) {\n+      return new TypeConstraint[]{SupertypeConstraint.create(type, type)};\n+    }\n+    else {\n+      return TypeConstraint.EMPTY_ARRAY;\n+    }\n   }\n \n   @Override",
      "parent_sha": "5510d1eca0e5d0c0203206f92091c7094474c657"
    }
  },
  {
    "oid": "3522971f6f02cf1831b8d97d4aed227f17004127",
    "message": "fix Calling on EDT PreviewUsageAction#update@ToolwindowPopup assertion\n\nGitOrigin-RevId: 605316324dd540e52507be18ccbbcbe556660f56",
    "date": "2022-07-07T01:20:30Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/3522971f6f02cf1831b8d97d4aed227f17004127",
    "details": {
      "sha": "35677cfb60bffe3a739b0bc37e1f5e6e9a40356c",
      "filename": "platform/platform-impl/src/com/intellij/ide/actions/ToggleToolbarAction.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/3522971f6f02cf1831b8d97d4aed227f17004127/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FToggleToolbarAction.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/3522971f6f02cf1831b8d97d4aed227f17004127/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FToggleToolbarAction.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FToggleToolbarAction.java?ref=3522971f6f02cf1831b8d97d4aed227f17004127",
      "patch": "@@ -209,11 +209,6 @@ private static class OptionsGroup extends NonTrivialActionGroup implements DumbA\n       myToolWindow = toolWindow;\n     }\n \n-    @Override\n-    public @NotNull ActionUpdateThread getActionUpdateThread() {\n-      return ActionUpdateThread.EDT;\n-    }\n-\n     @Override\n     public void update(@NotNull AnActionEvent e) {\n       super.update(e);\n@@ -226,11 +221,15 @@ public void update(@NotNull AnActionEvent e) {\n     @Override\n     public AnAction @NotNull [] getChildren(@Nullable AnActionEvent e) {\n       if (e == null) return EMPTY_ARRAY;\n+      return Utils.getOrCreateUpdateSession(e)\n+        .compute(\"OptionsGroup#getChildren\", ActionUpdateThread.EDT, this::getChildrenImpl);\n+    }\n+\n+    private AnAction @NotNull [] getChildrenImpl() {\n       ContentManager contentManager = myToolWindow.getContentManagerIfCreated();\n       Content selectedContent = contentManager == null ? null : contentManager.getSelectedContent();\n       JComponent contentComponent = selectedContent == null ? null : selectedContent.getComponent();\n       if (contentComponent == null) return EMPTY_ARRAY;\n-      UpdateSession session = Utils.getOrCreateUpdateSession(e);\n       List<AnAction> result = new SmartList<>();\n       for (final ActionToolbar toolbar : iterateToolbars(Collections.singletonList(contentComponent))) {\n         JComponent c = toolbar.getComponent();\n@@ -241,7 +240,7 @@ public void update(@NotNull AnActionEvent e) {\n \n         List<AnAction> actions = toolbar.getActions();\n         for (AnAction action : actions) {\n-          if (action instanceof ToggleAction && !result.contains(action) && session.presentation(action).isVisible()) {\n+          if (action instanceof ToggleAction && !result.contains(action)) {\n             result.add(action);\n           }\n           else if (action instanceof Separator) {",
      "parent_sha": "70b94fc739615fffb9af85be74c8878d213eddf6"
    }
  },
  {
    "oid": "4072ccc17e89bedb79c72e6f91b75e9885f16b0a",
    "message": "IDEA-289449: search options not support when only input one char\n\nallow search by a single character and use delayed search to avoid freezes\n\nGitOrigin-RevId: 9be9b87cd40c0e191ca4087e8364d8f30a8f0442",
    "date": "2022-03-01T23:22:03Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/4072ccc17e89bedb79c72e6f91b75e9885f16b0a",
    "details": {
      "sha": "68101ba071c57eadc916dd163fe23ea5cd3e7cd1",
      "filename": "platform/platform-impl/src/com/intellij/openapi/options/newEditor/SettingsFilter.java",
      "status": "modified",
      "additions": 15,
      "deletions": 17,
      "changes": 32,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/4072ccc17e89bedb79c72e6f91b75e9885f16b0a/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Foptions%2FnewEditor%2FSettingsFilter.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/4072ccc17e89bedb79c72e6f91b75e9885f16b0a/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Foptions%2FnewEditor%2FSettingsFilter.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Foptions%2FnewEditor%2FSettingsFilter.java?ref=4072ccc17e89bedb79c72e6f91b75e9885f16b0a",
      "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2000-2021 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n package com.intellij.openapi.options.newEditor;\n \n import com.intellij.ide.ui.search.ConfigurableHit;\n@@ -19,6 +19,7 @@\n import com.intellij.ui.SearchTextField;\n import com.intellij.ui.speedSearch.ElementFilter;\n import com.intellij.ui.treeStructure.SimpleNode;\n+import com.intellij.util.Alarm;\n import com.intellij.util.concurrency.AppExecutorUtil;\n import com.intellij.util.ui.UIUtil;\n import org.jetbrains.annotations.NotNull;\n@@ -44,8 +45,10 @@ public abstract class SettingsFilter extends ElementFilter.Active.Impl<SimpleNod\n   private Configurable myLastSelected;\n \n   private volatile SearchableOptionsRegistrar searchableOptionRegistrar;\n+  private final Alarm myUpdatingAlarm;\n \n   SettingsFilter(@Nullable Project project, @NotNull List<? extends ConfigurableGroup> groups, SearchTextField search) {\n+    myUpdatingAlarm = new Alarm(project != null ? project : ApplicationManager.getApplication());\n     SearchableOptionsRegistrarImpl optionRegistrar =\n       (SearchableOptionsRegistrarImpl)ApplicationManager.getApplication().getServiceIfCreated(SearchableOptionsRegistrar.class);\n     if (optionRegistrar == null || !optionRegistrar.isInitialized()) {\n@@ -56,7 +59,7 @@ public abstract class SettingsFilter extends ElementFilter.Active.Impl<SimpleNod\n         // must be set only after initializing (to avoid concurrent modifications)\n         searchableOptionRegistrar = r;\n         ApplicationManager.getApplication().invokeLater(() -> {\n-           update(r, DocumentEvent.EventType.CHANGE, false, true);\n+           update(DocumentEvent.EventType.CHANGE, false, true);\n         }, ModalityState.any(), project == null ? ApplicationManager.getApplication().getDisposed() : project.getDisposed());\n       });\n     }\n@@ -70,10 +73,7 @@ public abstract class SettingsFilter extends ElementFilter.Active.Impl<SimpleNod\n     mySearch.addDocumentListener(new DocumentAdapter() {\n       @Override\n       protected void textChanged(@NotNull DocumentEvent event) {\n-        SearchableOptionsRegistrar registrar = searchableOptionRegistrar;\n-        if (registrar != null) {\n-          update(registrar, event.getType(), true, false);\n-        }\n+        update(event.getType(), true, false);\n         // request focus if needed on changing the filter text\n         IdeFocusManager manager = IdeFocusManager.findInstanceByComponent(mySearch);\n         if (manager.getFocusedDescendantFor(mySearch) == null) {\n@@ -129,13 +129,7 @@ public boolean shouldBeShowing(SimpleNode node) {\n \n   String getFilterText() {\n     String text = mySearch.getText();\n-    if (text != null) {\n-      text = text.trim();\n-      if (1 < text.length()) {\n-        return text;\n-      }\n-    }\n-    return \"\";\n+    return text == null ? \"\" : text.trim();\n   }\n \n   private void setHoldingFilter(boolean holding) {\n@@ -155,11 +149,15 @@ void update(@Nullable String text) {\n     finally {\n       myUpdateRejected = false;\n     }\n+    update(DocumentEvent.EventType.CHANGE, false, true);\n+  }\n \n-    SearchableOptionsRegistrar registrar = searchableOptionRegistrar;\n-    if (registrar != null) {\n-      update(registrar, DocumentEvent.EventType.CHANGE, false, true);\n-    }\n+  private void update(@NotNull DocumentEvent.EventType type, boolean adjustSelection, boolean now) {\n+    myUpdatingAlarm.cancelAllRequests();\n+    myUpdatingAlarm.addRequest(() -> {\n+      SearchableOptionsRegistrar registrar = searchableOptionRegistrar;\n+      if (registrar != null) update(registrar, type, adjustSelection, now);\n+    }, 100, ModalityState.any());\n   }\n \n   private void update(@NotNull SearchableOptionsRegistrar optionRegistrar, @NotNull DocumentEvent.EventType type, boolean adjustSelection, boolean now) {",
      "parent_sha": "f6a202ce55e0d658dd6d72145ae0cc53139d0678"
    }
  },
  {
    "oid": "3b0c881bacf8c77c5d3baee86f8c52509b4a847f",
    "message": "assertion for IDEADEV-15380",
    "date": "2007-03-19T13:50:29Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/3b0c881bacf8c77c5d3baee86f8c52509b4a847f",
    "details": {
      "sha": "62cf6eefae8f7b862e9cb559aed62b81a9714a89",
      "filename": "refactoring/impl/com/intellij/refactoring/introduceParameter/IntroduceParameterProcessor.java",
      "status": "modified",
      "additions": 30,
      "deletions": 39,
      "changes": 69,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/3b0c881bacf8c77c5d3baee86f8c52509b4a847f/refactoring%2Fimpl%2Fcom%2Fintellij%2Frefactoring%2FintroduceParameter%2FIntroduceParameterProcessor.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/3b0c881bacf8c77c5d3baee86f8c52509b4a847f/refactoring%2Fimpl%2Fcom%2Fintellij%2Frefactoring%2FintroduceParameter%2FIntroduceParameterProcessor.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/refactoring%2Fimpl%2Fcom%2Fintellij%2Frefactoring%2FintroduceParameter%2FIntroduceParameterProcessor.java?ref=3b0c881bacf8c77c5d3baee86f8c52509b4a847f",
      "patch": "@@ -44,19 +44,19 @@\n public class IntroduceParameterProcessor extends BaseRefactoringProcessor {\n   private static final Logger LOG = Logger.getInstance(\"#com.intellij.refactoring.introduceParameter.IntroduceParameterProcessor\");\n \n-  private PsiMethod myMethodToReplaceIn;\n-  private PsiMethod myMethodToSearchFor;\n+  private final PsiMethod myMethodToReplaceIn;\n+  private final PsiMethod myMethodToSearchFor;\n   private PsiExpression myParameterInitializer;\n   private final PsiExpression myExpressionToSearch;\n   private final PsiLocalVariable myLocalVariable;\n   private final boolean myRemoveLocalVariable;\n-  private String myParameterName;\n-  private boolean myReplaceAllOccurences;\n+  private final String myParameterName;\n+  private final boolean myReplaceAllOccurences;\n \n   private int myReplaceFieldsWithGetters;\n   private final boolean myDeclareFinal;\n   private PsiType myForcedType;\n-  private PsiManager myManager;\n+  private final PsiManager myManager;\n \n   /**\n    * if expressionToSearch is null, search for localVariable\n@@ -120,20 +120,14 @@ protected UsageInfo[] findUsages() {\n       result.add(new UsageInfo(overridingMethod));\n     }\n \n-    //if(myMethodToSearchFor.isConstructor()) {\n-    //  final PsiParameter[] parameters = myMethodToSearchFor.getParameterList().getParameters();\n-    //  if(parameters.length == 0) {\n-    //    addImplicitDefaultConstructorUsages(result, myMethodToSearchFor.getContainingClass());\n-    //  }\n-    //}\n-\n     PsiReference[] refs = helper.findReferencesIncludingOverriding(myMethodToSearchFor, GlobalSearchScope.projectScope(myProject), true);\n \n-    int i;\n-    for (i = 0; i < refs.length; i++) {\n-      PsiElement ref = refs[i].getElement();\n+\n+    for (PsiReference ref1 : refs) {\n+      PsiElement ref = ref1.getElement();\n       if (ref instanceof PsiMethod && ((PsiMethod)ref).isConstructor()) {\n-        DefaultConstructorImplicitUsageInfo implicitUsageInfo = new DefaultConstructorImplicitUsageInfo((PsiMethod)ref, myMethodToSearchFor);\n+        DefaultConstructorImplicitUsageInfo implicitUsageInfo =\n+          new DefaultConstructorImplicitUsageInfo((PsiMethod)ref, myMethodToSearchFor);\n         result.add(implicitUsageInfo);\n       }\n       else if (ref instanceof PsiClass) {\n@@ -149,15 +143,14 @@ else if (!insideMethodToBeReplaced(ref)) {\n \n     if (myReplaceAllOccurences) {\n       final OccurenceManager occurenceManager;\n-      if(myLocalVariable == null) {\n+      if (myLocalVariable == null) {\n         occurenceManager = new ExpressionOccurenceManager(myExpressionToSearch, myMethodToReplaceIn, null);\n-      } else {\n+      }\n+      else {\n         occurenceManager = new LocalVariableOccurenceManager(myLocalVariable, null);\n       }\n       PsiElement[] exprs = occurenceManager.getOccurences();\n-      for (i = 0; i < exprs.length; i++) {\n-        PsiElement expr = exprs[i];\n-\n+      for (PsiElement expr : exprs) {\n         result.add(new InternalUsageInfo(expr));\n       }\n     }\n@@ -307,7 +300,6 @@ protected void performRefactoring(UsageInfo[] usages) {\n \n       PsiType initializerType = getInitializerType(myForcedType, myParameterInitializer, myLocalVariable);\n \n-\n       // Converting myParameterInitializer\n       if (myParameterInitializer == null) {\n         LOG.assertTrue(myLocalVariable != null);\n@@ -465,8 +457,7 @@ private void changeExternalUsage(UsageInfo usage) throws IncorrectOperationExcep\n       return;\n     }\n \n-    PsiCallExpression callExpression =\n-            RefactoringUtil.getCallExpressionByMethodReference((PsiJavaCodeReferenceElement) usage.getElement());\n+    PsiCallExpression callExpression = RefactoringUtil.getCallExpressionByMethodReference((PsiJavaCodeReferenceElement) usage.getElement());\n     PsiExpressionList argList = callExpression.getArgumentList();\n     PsiExpression[] oldArgs = argList.getExpressions();\n \n@@ -518,41 +509,41 @@ private static PsiElement getClassContainingResolve (final JavaResolveResult res\n \n \n   private class OldReferencesResolver {\n-    private PsiCallExpression myContext;\n-    private PsiExpression myExpr;\n-    private HashMap<PsiExpression,String> myTempVars;\n-    private PsiExpression myInstanceRef;\n-    private PsiExpression[] myActualArgs;\n+    private final PsiCallExpression myContext;\n+    private final PsiExpression myExpr;\n+    private final HashMap<PsiExpression,String> myTempVars;\n+    private final PsiExpression myInstanceRef;\n+    private final PsiExpression[] myActualArgs;\n     private final int myReplaceFieldsWithGetters;\n \n-    public OldReferencesResolver(PsiCallExpression context, PsiExpression expr, int replaceFieldsWithGetters) {\n+    public OldReferencesResolver(PsiCallExpression context, PsiExpression expr, int replaceFieldsWithGetters) throws IncorrectOperationException {\n       myContext = context;\n       myExpr = expr;\n       myTempVars = new HashMap<PsiExpression, String>();\n       myActualArgs = myContext.getArgumentList().getExpressions();\n+      if(myActualArgs.length < myMethodToReplaceIn.getParameterList().getParametersCount()) {\n+        LOG.error(myContext.getText() + \"\\n-----\\n\" + myMethodToReplaceIn.getText());\n+      }\n       PsiElementFactory factory = myManager.getElementFactory();\n+      PsiExpression instanceRef;\n       if(myContext instanceof PsiMethodCallExpression) {\n         final PsiMethodCallExpression methodCall = (PsiMethodCallExpression)myContext;\n         final PsiReferenceExpression methodExpression = methodCall.getMethodExpression();\n-        myInstanceRef = methodExpression.getQualifierExpression();\n-        if (myInstanceRef == null) {\n+        instanceRef = methodExpression.getQualifierExpression();\n+        if (instanceRef == null) {\n           final PsiClass thisResolveClass = RefactoringUtil.getThisResolveClass(methodExpression);\n           if (thisResolveClass != null &&\n               !(thisResolveClass instanceof PsiAnonymousClass) &&\n               !thisResolveClass.equals(PsiTreeUtil.getParentOfType(methodExpression, PsiClass.class))) {\n             //Qualified this needed\n-            try {\n-              myInstanceRef = factory.createExpressionFromText(thisResolveClass.getName() + \".this\", null);\n-            }\n-            catch (IncorrectOperationException e) {\n-              LOG.error(e);\n-            }\n+            instanceRef = factory.createExpressionFromText(thisResolveClass.getName() + \".this\", null);\n           }\n         }\n       }\n       else {\n-        myInstanceRef = null;\n+        instanceRef = null;\n       }\n+      myInstanceRef = instanceRef;\n       myReplaceFieldsWithGetters = replaceFieldsWithGetters;\n     }\n ",
      "parent_sha": "c095337d691fd4569e796b24e553f5d8c6bc5641"
    }
  },
  {
    "oid": "5f4d36a58fe38732eac52275f5b4f93d787cd0bb",
    "message": "IDEA-61437 GitHub functionality should also work on projects I collaborate on, but do not own myself",
    "date": "2010-11-19T11:58:36Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/5f4d36a58fe38732eac52275f5b4f93d787cd0bb",
    "details": {
      "sha": "11b213d5bfa1c4386a9c61f26958a30f14749bf7",
      "filename": "plugins/github/src/org/jetbrains/plugins/github/GithubUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/5f4d36a58fe38732eac52275f5b4f93d787cd0bb/plugins%2Fgithub%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgithub%2FGithubUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/5f4d36a58fe38732eac52275f5b4f93d787cd0bb/plugins%2Fgithub%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgithub%2FGithubUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fgithub%2Fsrc%2Forg%2Fjetbrains%2Fplugins%2Fgithub%2FGithubUtil.java?ref=5f4d36a58fe38732eac52275f5b4f93d787cd0bb",
      "patch": "@@ -61,7 +61,7 @@ private static String getUrl() {\n \n   public static List<RepositoryInfo> getAvailableRepos(final String login, final String password) {\n     try {\n-      final HttpMethod method = doREST(login, password, \"/repos/show/\" + login, false);\n+      final HttpMethod method = doREST(login, password, \"/repos/watched/\" + login, false);\n       final InputStream stream = method.getResponseBodyAsStream();\n       final Element element = new SAXBuilder(false).build(stream).getRootElement();\n       final List repositories = element.getChildren();",
      "parent_sha": "0c737f6227cf1eef205eee90d9414d57f982c493"
    }
  },
  {
    "oid": "78534e2fb1500dab918a6cf58be0e1c44105c873",
    "message": "retry performance test",
    "date": "2010-03-25T13:38:13Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/78534e2fb1500dab918a6cf58be0e1c44105c873",
    "details": {
      "sha": "ff7be9f4f218de0f747331738980f51915b99d2a",
      "filename": "platform/testFramework/src/com/intellij/testFramework/PlatformTestUtil.java",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/78534e2fb1500dab918a6cf58be0e1c44105c873/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2FtestFramework%2FPlatformTestUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/78534e2fb1500dab918a6cf58be0e1c44105c873/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2FtestFramework%2FPlatformTestUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2FtestFramework%2Fsrc%2Fcom%2Fintellij%2FtestFramework%2FPlatformTestUtil.java?ref=78534e2fb1500dab918a6cf58be0e1c44105c873",
      "patch": "@@ -343,18 +343,19 @@ public static void assertTiming(String message, long expected, long actual) {\n     // Allow 10% more in case of test machine is busy.\n     // For faster machines (expectedOnMyMachine < expected) allow nonlinear performance rating:\n     // just perform better than acceptable expected\n+    int percentage = (int)(100.0 * (actual - expectedOnMyMachine) / expectedOnMyMachine);\n+    String failMessage = message + \".\" +\n+                         \" Operation took \" + percentage + \"% longer than expected.\" +\n+                         \" Expected on my machine: \" + expectedOnMyMachine + \".\" +\n+                         \" Actual: \" + actual + \".\" +\n+                         \" Expected on Etalon machine: \" + expected + \";\" +\n+                         \" Actual on Etalon: \" + actual * ETALON_TIMING / Timings.MACHINE_TIMING;\n     if (actual > expectedOnMyMachine * acceptableChangeFactor &&\n         (expectedOnMyMachine > expected || actual > expected * acceptableChangeFactor)) {\n-      int percentage = (int)(((float)100 * (actual - expectedOnMyMachine)) / expectedOnMyMachine);\n-      Assert.fail(message + \". Operation took \" + percentage + \"% longer than expected. Expected on my machine: \" + expectedOnMyMachine +\n-                  \". Actual: \" + actual + \". Expected on Etalon machine: \" + expected + \"; Actual on Etalon: \" +\n-                  (actual * ETALON_TIMING / Timings.MACHINE_TIMING));\n+      Assert.fail(failMessage);\n     }\n     else {\n-      int percentage = (int)(((float)100 * (actual - expectedOnMyMachine)) / expectedOnMyMachine);\n-      System.out.println(message + \". Operation took \" + percentage + \"% longer than expected. Expected on my machine: \" +\n-                         expectedOnMyMachine + \". Actual: \" + actual + \". Expected on Etalon machine: \" + expected +\n-                         \"; Actual on Etalon: \" + (actual * ETALON_TIMING / Timings.MACHINE_TIMING));\n+      System.out.println(failMessage);\n     }\n   }\n \n@@ -382,6 +383,7 @@ public static void assertTiming(String message, long expected, int attempts, @No\n         System.gc();\n         System.gc();\n         System.gc();\n+        System.out.println(\"Another epic fail: \"+e.getMessage() +\"; Attempts remained: \"+attempts);\n       }\n     }\n   }",
      "parent_sha": "a6398738db3ee8288f05d90a6fc7638e29a9df02"
    }
  },
  {
    "oid": "49d799039142339ab6160e6eadada96a41174526",
    "message": "fix for potential reverter bug",
    "date": "2007-08-02T10:43:06Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/49d799039142339ab6160e6eadada96a41174526",
    "details": {
      "sha": "70f32a1e8d7908f2fee3c27ff8e90d43c8522302",
      "filename": "lvcs/impl/src/com/intellij/history/integration/revertion/ChangeRevertionVisitor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/49d799039142339ab6160e6eadada96a41174526/lvcs%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fhistory%2Fintegration%2Frevertion%2FChangeRevertionVisitor.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/49d799039142339ab6160e6eadada96a41174526/lvcs%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fhistory%2Fintegration%2Frevertion%2FChangeRevertionVisitor.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/lvcs%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fhistory%2Fintegration%2Frevertion%2FChangeRevertionVisitor.java?ref=49d799039142339ab6160e6eadada96a41174526",
      "patch": "@@ -50,7 +50,7 @@ public void visit(RenameChange c) throws IOException, StopVisitingException {\n \n     c.revertOn(myRoot);\n \n-    f.rename(this, e.getName());\n+    f.rename(this, getName(e));\n   }\n \n   @Override",
      "parent_sha": "7c4be5c3b8ccf8a4891345ef36f4ab7cce0011fd"
    }
  },
  {
    "oid": "cb2a92757932c96a630a5417183a60dd4bff4c4f",
    "message": "generate final if code style (IDEA-61173)",
    "date": "2010-11-12T16:43:54Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/cb2a92757932c96a630a5417183a60dd4bff4c4f",
    "details": {
      "sha": "fdb2e6363fcac40fde0bb06eacc6e6fd6629f58a",
      "filename": "java/java-impl/src/com/intellij/refactoring/introduceVariable/IntroduceVariableBase.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/cb2a92757932c96a630a5417183a60dd4bff4c4f/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Frefactoring%2FintroduceVariable%2FIntroduceVariableBase.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/cb2a92757932c96a630a5417183a60dd4bff4c4f/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Frefactoring%2FintroduceVariable%2FIntroduceVariableBase.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Frefactoring%2FintroduceVariable%2FIntroduceVariableBase.java?ref=cb2a92757932c96a630a5417183a60dd4bff4c4f",
      "patch": "@@ -799,14 +799,12 @@ public IntroduceVariableSettings getSettings(Project project, Editor editor,\n                                                final OccurrencesChooser.ReplaceChoice replaceChoice) {\n     final SuggestedNameInfo suggestedName = getSuggestedName(typeSelectorManager.getDefaultType(), expr);\n     final String variableName = suggestedName.names[0];\n-    final Boolean generateFinals = JavaRefactoringSettings.getInstance().INTRODUCE_LOCAL_CREATE_FINALS;\n     final boolean replaceAll =\n       replaceChoice == OccurrencesChooser.ReplaceChoice.ALL || replaceChoice == OccurrencesChooser.ReplaceChoice.NO_WRITE;\n     final boolean declareFinal =\n       !anyAssignmentLHS && (replaceAll &&\n-                            declareFinalIfAll || generateFinals == null ?\n-                            CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_LOCALS :\n-                            generateFinals.booleanValue());\n+                            declareFinalIfAll ||\n+                            CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_LOCALS);\n     final boolean replaceWrite = anyAssignmentLHS && replaceChoice == OccurrencesChooser.ReplaceChoice.ALL;\n     return new IntroduceVariableSettings() {\n       @Override",
      "parent_sha": "edc0799f698003f2f76206697c4bc2130d045a8b"
    }
  },
  {
    "oid": "ebb336860927804e6ad232007e62864374d846b5",
    "message": "NPE fix",
    "date": "2014-11-26T12:58:36Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/ebb336860927804e6ad232007e62864374d846b5",
    "details": {
      "sha": "7f9b96dc28b0a1b5d2adf34c3f678dec0993ffab",
      "filename": "platform/platform-api/src/com/intellij/ui/treeStructure/Tree.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/ebb336860927804e6ad232007e62864374d846b5/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fui%2FtreeStructure%2FTree.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/ebb336860927804e6ad232007e62864374d846b5/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fui%2FtreeStructure%2FTree.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fui%2FtreeStructure%2FTree.java?ref=ebb336860927804e6ad232007e62864374d846b5",
      "patch": "@@ -217,7 +217,7 @@ public void paint(Graphics g) {\n       for (TreePath each : paths) {\n         final Rectangle selection = getPathBounds(each);\n         if (selection != null && (g.getClipBounds().intersects(selection) || g.getClipBounds().contains(selection))) {\n-          if (myBusy) {\n+          if (myBusy && myBusyIcon != null) {\n             Rectangle busyIconBounds = myBusyIcon.getBounds();\n             if (selection.contains(busyIconBounds) || selection.intersects(busyIconBounds)) {\n               canHoldSelection = false;",
      "parent_sha": "600f81d358c1decbdfda501e8ce1d43d417fc423"
    }
  },
  {
    "oid": "c54a4aba180317608be82adad3c4de72deeab220",
    "message": "RegExp: remove a little duplication and cleanup",
    "date": "2018-09-19T18:58:22Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/c54a4aba180317608be82adad3c4de72deeab220",
    "details": {
      "sha": "b4f89095b75c984b07c5e4698d43655441678bb4",
      "filename": "RegExpSupport/src/org/intellij/lang/regexp/inspection/RegExpEquivalenceChecker.java",
      "status": "modified",
      "additions": 18,
      "deletions": 58,
      "changes": 76,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/c54a4aba180317608be82adad3c4de72deeab220/RegExpSupport%2Fsrc%2Forg%2Fintellij%2Flang%2Fregexp%2Finspection%2FRegExpEquivalenceChecker.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/c54a4aba180317608be82adad3c4de72deeab220/RegExpSupport%2Fsrc%2Forg%2Fintellij%2Flang%2Fregexp%2Finspection%2FRegExpEquivalenceChecker.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/RegExpSupport%2Fsrc%2Forg%2Fintellij%2Flang%2Fregexp%2Finspection%2FRegExpEquivalenceChecker.java?ref=c54a4aba180317608be82adad3c4de72deeab220",
      "patch": "@@ -69,13 +69,7 @@ private static boolean areSetOptionsEquivalent(RegExpSetOptions setOptions1, Reg\n   }\n \n   private static boolean areOptionsEquivalent(RegExpOptions options1, RegExpOptions options2) {\n-    if (options1 == null) {\n-      return options2 == null;\n-    }\n-    else if (options2 == null) {\n-      return false;\n-    }\n-    return StringUtil.containsAnyChar(options1.getText(), options2.getText());\n+    return options1 == null ? options2 == null : options2 != null && StringUtil.containsAnyChar(options1.getText(), options2.getText());\n   }\n \n   private static boolean areNamedGroupRefsEquivalent(RegExpNamedGroupRef namedGroupRef1, RegExpNamedGroupRef namedGroupRef2) {\n@@ -84,41 +78,17 @@ private static boolean areNamedGroupRefsEquivalent(RegExpNamedGroupRef namedGrou\n   }\n \n   private static boolean areIntersectionsEquivalent(RegExpIntersection intersection1, RegExpIntersection intersection2) {\n-    final RegExpClassElement[] operands1 = intersection1.getOperands();\n-    final RegExpClassElement[] operands2 = intersection2.getOperands();\n-    if (operands1.length != operands2.length) {\n-      return false;\n-    }\n-    Arrays.sort(operands1, TEXT_COMPARATOR);\n-    Arrays.sort(operands2, TEXT_COMPARATOR);\n-    for (int i = 0; i < operands1.length; i++) {\n-      if (!areElementsEquivalent(operands1[i], operands2[i])) {\n-        return false;\n-      }\n-    }\n-    return true;\n+    return areElementArraysEquivalent(intersection1.getOperands(), intersection2.getOperands(), true);\n   }\n \n   private static boolean areGroupsEquivalent(RegExpGroup group1, RegExpGroup group2) {\n     return group1.getType() == group2.getType() && arePatternsEquivalent(group1.getPattern(), group2.getPattern());\n   }\n \n   private static boolean arePatternsEquivalent(RegExpPattern pattern1, RegExpPattern pattern2) {\n-    if (pattern1 == null) return pattern2 == null;\n-    if (pattern2 == null) return false;\n-    final RegExpBranch[] branches1 = pattern1.getBranches();\n-    final RegExpBranch[] branches2 = pattern2.getBranches();\n-    if (branches1.length != branches2.length) {\n-      return false;\n-    }\n-    Arrays.sort(branches1, TEXT_COMPARATOR);\n-    Arrays.sort(branches2, TEXT_COMPARATOR);\n-    for (int i = 0; i < branches1.length; i++) {\n-      if (!areBranchesEquivalent(branches1[i], branches2[i])) {\n-        return false;\n-      }\n-    }\n-    return true;\n+    return pattern1 == null ?\n+           pattern2 == null :\n+           pattern2 != null && areElementArraysEquivalent(pattern1.getBranches(), pattern2.getBranches(), true);\n   }\n \n   private static boolean areClosuresEquivalent(RegExpClosure element1, RegExpClosure element2) {\n@@ -148,37 +118,27 @@ else if (number2 == null) {\n   }\n \n   private static boolean areCharRangesEquivalent(RegExpCharRange charRange1, RegExpCharRange charRange2) {\n-    return areCharsEquivalent(charRange1.getFrom(), charRange2.getFrom()) &&\n-           areCharsEquivalent(charRange1.getTo(), charRange2.getTo());\n+    return areCharsEquivalent(charRange1.getFrom(), charRange2.getFrom()) && areCharsEquivalent(charRange1.getTo(), charRange2.getTo());\n   }\n \n   private static boolean areClassesEquivalent(RegExpClass aClass1, RegExpClass aClass2) {\n-    if (aClass1.isNegated() != aClass2.isNegated()) {\n-      return false;\n-    }\n-    final RegExpClassElement[] elements1 = aClass1.getElements();\n-    final RegExpClassElement[] elements2 = aClass2.getElements();\n-    if (elements1.length != elements2.length) {\n-      return false;\n-    }\n-    Arrays.sort(elements1, TEXT_COMPARATOR);\n-    Arrays.sort(elements2, TEXT_COMPARATOR);\n-    for (int i = 0; i < elements1.length; i++){\n-      if (!areElementsEquivalent(elements1[i], elements2[i])) {\n-        return false;\n-      }\n-    }\n-    return true;\n+    return aClass1.isNegated() == aClass2.isNegated() && areElementArraysEquivalent(aClass1.getElements(), aClass2.getElements(), true);\n   }\n \n   private static boolean areBranchesEquivalent(RegExpBranch branch1, RegExpBranch branch2) {\n-    final RegExpAtom[] atoms1 = branch1.getAtoms();\n-    final RegExpAtom[] atoms2 = branch2.getAtoms();\n-    if (atoms1.length != atoms2.length) {\n+    return areElementArraysEquivalent(branch1.getAtoms(), branch2.getAtoms(), false);\n+  }\n+\n+  private static boolean areElementArraysEquivalent(RegExpElement[] elements1, RegExpElement[] elements2, boolean inAnyOrder) {\n+    if (elements1.length != elements2.length) {\n       return false;\n     }\n-    for (int i = 0; i < atoms1.length; i++) {\n-      if (!areElementsEquivalent(atoms1[i], atoms2[i])) {\n+    if (inAnyOrder) {\n+      Arrays.sort(elements1, TEXT_COMPARATOR);\n+      Arrays.sort(elements2, TEXT_COMPARATOR);\n+    }\n+    for (int i = 0; i < elements1.length; i++) {\n+      if (!areElementsEquivalent(elements1[i], elements2[i])) {\n         return false;\n       }\n     }",
      "parent_sha": "97f4b4efa30f8116fb06ac0a724a16a54a3a12cb"
    }
  },
  {
    "oid": "a468b776b31ec919a21edb30346296f121842a20",
    "message": "comments",
    "date": "2017-04-18T11:51:07Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/a468b776b31ec919a21edb30346296f121842a20",
    "details": {
      "sha": "192f71cf10f55019cf1af3c32b1c859fdf63de9c",
      "filename": "platform/platform-impl/src/com/intellij/openapi/vfs/encoding/EncodingUtil.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/a468b776b31ec919a21edb30346296f121842a20/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvfs%2Fencoding%2FEncodingUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/a468b776b31ec919a21edb30346296f121842a20/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvfs%2Fencoding%2FEncodingUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvfs%2Fencoding%2FEncodingUtil.java?ref=a468b776b31ec919a21edb30346296f121842a20",
      "patch": "@@ -50,14 +50,18 @@ public class EncodingUtil {\n   private static final String REASON_HARDCODED_IN_TEXT = \"hard-coded\";\n   private static final String REASON_HARDCODED_FOR_FILE = \"%s\";\n \n+  // the result of wild guess\n   enum Magic8 {\n     ABSOLUTELY,\n     WELL_IF_YOU_INSIST,\n     NO_WAY\n   }\n \n   // check if file can be loaded in the encoding correctly:\n-  // returns true if bytes on disk, converted to text with the charset, converted back to bytes matched\n+  // returns ABSOLUTELY if bytes on disk, converted to text with the charset, converted back to bytes matched\n+  // returns NO_WAY if the new encoding is incompatible (bytes on disk will differ)\n+  // returns WELL_IF_YOU_INSIST if the bytes on disk remain the same but the text will change\n+  @NotNull\n   static Magic8 isSafeToReloadIn(@NotNull VirtualFile virtualFile, @NotNull String text, @NotNull byte[] bytes, @NotNull Charset charset) {\n     // file has BOM but the charset hasn't\n     byte[] bom = virtualFile.getBOM();\n@@ -91,6 +95,7 @@ static Magic8 isSafeToReloadIn(@NotNull VirtualFile virtualFile, @NotNull String\n     return !Arrays.equals(bytesToSave, bytes) ? Magic8.NO_WAY : loaded.equals(text) ? Magic8.ABSOLUTELY : Magic8.WELL_IF_YOU_INSIST;\n   }\n \n+  @NotNull\n   static Magic8 isSafeToConvertTo(@NotNull VirtualFile virtualFile, @NotNull String text, @NotNull byte[] bytesOnDisk, @NotNull Charset charset) {\n     try {\n       String lineSeparator = FileDocumentManager.getInstance().getLineSeparator(virtualFile, null);",
      "parent_sha": "2bf7394f813e27c835050ef244d914ddb5caac4b"
    }
  },
  {
    "oid": "128223c1eea2718646ecfb477f88c4cfcd27b419",
    "message": "[Groovy] convert GroovyImplicitNullArgumentCallInspectionTest to Java (IDEA-327339)\n\nGitOrigin-RevId: 226eee51659ac436b40794f9dfd8728995e37ea6",
    "date": "2024-10-16T12:28:32Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/128223c1eea2718646ecfb477f88c4cfcd27b419",
    "details": {
      "sha": "2703001471efe730cef22fd3dece4df529c74ff6",
      "filename": "plugins/groovy/test/org/jetbrains/plugins/groovy/inspections/GroovyImplicitNullArgumentCallInspectionTest.java",
      "status": "modified",
      "additions": 18,
      "deletions": 23,
      "changes": 41,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/128223c1eea2718646ecfb477f88c4cfcd27b419/plugins%2Fgroovy%2Ftest%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Finspections%2FGroovyImplicitNullArgumentCallInspectionTest.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/128223c1eea2718646ecfb477f88c4cfcd27b419/plugins%2Fgroovy%2Ftest%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Finspections%2FGroovyImplicitNullArgumentCallInspectionTest.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fgroovy%2Ftest%2Forg%2Fjetbrains%2Fplugins%2Fgroovy%2Finspections%2FGroovyImplicitNullArgumentCallInspectionTest.java?ref=128223c1eea2718646ecfb477f88c4cfcd27b419",
      "patch": "@@ -1,33 +1,28 @@\n-// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n-package org.jetbrains.plugins.groovy.inspections\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+package org.jetbrains.plugins.groovy.inspections;\n \n-import groovy.transform.CompileStatic\n-import org.jetbrains.plugins.groovy.codeInspection.confusing.GroovyImplicitNullArgumentCallInspection\n-import org.jetbrains.plugins.groovy.lang.highlighting.GrHighlightingTestBase\n-\n-@CompileStatic\n-class GroovyImplicitNullArgumentCallInspectionTest extends GrHighlightingTestBase {\n+import org.jetbrains.plugins.groovy.codeInspection.confusing.GroovyImplicitNullArgumentCallInspection;\n+import org.jetbrains.plugins.groovy.lang.highlighting.GrHighlightingTestBase;\n \n+public class GroovyImplicitNullArgumentCallInspectionTest extends GrHighlightingTestBase {\n   private void doTest(String text) {\n-    myFixture.configureByText('_.groovy', text)\n+    myFixture.configureByText(\"_.groovy\", text);\n \n-    myFixture.enableInspections(GroovyImplicitNullArgumentCallInspection)\n-    myFixture.checkHighlighting(true, false, true)\n+    myFixture.enableInspections(GroovyImplicitNullArgumentCallInspection.class);\n+    myFixture.checkHighlighting(true, false, true);\n   }\n \n-  void testShowWeakWarning() {\n-    doTest '''\n-  def foo(x) {}\n-  \n-  foo<weak_warning>()</weak_warning>\n-'''\n+  public void testShowWeakWarning() {\n+    doTest(\"\"\"\n+             def foo(x) {}\n+             foo<weak_warning>()</weak_warning>\n+             \"\"\");\n   }\n \n-  void testNoWarningIfNullWasPassedExplicitly() {\n-    doTest '''\n-  def foo(x) {}\n-  \n-  foo(null)\n-'''\n+  public void testNoWarningIfNullWasPassedExplicitly() {\n+    doTest(\"\"\"\n+             def foo(x) {}\n+             foo(null)\n+             \"\"\");\n   }\n }",
      "parent_sha": "25aea724d7bc08bb1a4788d0728ac48f9ff08aa3"
    }
  },
  {
    "oid": "02bb4f17ab2c772cf8de4149aaea15f40c4028ff",
    "message": "let ModelBranch-copied files be non-physical\n\nLAB-51 Make long non-blocking write operations backgroundable\n\nGitOrigin-RevId: 3ab2c4637cd15ec185a3a1c083ad4fa675efff39",
    "date": "2020-05-20T20:17:41Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/02bb4f17ab2c772cf8de4149aaea15f40c4028ff",
    "details": {
      "sha": "d90b03f92c5570d616530e32b70da6189d295817",
      "filename": "platform/core-impl/src/com/intellij/psi/impl/file/impl/FileManagerImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/02bb4f17ab2c772cf8de4149aaea15f40c4028ff/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Ffile%2Fimpl%2FFileManagerImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/02bb4f17ab2c772cf8de4149aaea15f40c4028ff/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Ffile%2Fimpl%2FFileManagerImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Ffile%2Fimpl%2FFileManagerImpl.java?ref=02bb4f17ab2c772cf8de4149aaea15f40c4028ff",
      "patch": "@@ -5,6 +5,7 @@\n import com.intellij.injected.editor.VirtualFileWindow;\n import com.intellij.lang.Language;\n import com.intellij.lang.LanguageUtil;\n+import com.intellij.model.ModelBranch;\n import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.diagnostic.Logger;\n import com.intellij.openapi.editor.Document;\n@@ -189,7 +190,7 @@ public FileViewProvider findViewProvider(@NotNull final VirtualFile file) {\n       return Objects.requireNonNull(tempMap.get(file), \"Recursive file view provider creation\");\n     }\n \n-    viewProvider = createFileViewProvider(file, true);\n+    viewProvider = createFileViewProvider(file, ModelBranch.getFileBranch(file) == null);\n     if (file instanceof LightVirtualFile) {\n       return file.putUserDataIfAbsent(myPsiHardRefKey, viewProvider);\n     }",
      "parent_sha": "4f5895f17b1b5ac9fbe82e83dffb7b06117a8c9d"
    }
  },
  {
    "oid": "48b90c2f22f2de501e70541bcda5c7a15c730c0f",
    "message": "Evaluate metaclass type using TypeEvalContext\n\nIt will try custom type providers for evaluating the metaclass type.",
    "date": "2014-01-20T19:58:55Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/48b90c2f22f2de501e70541bcda5c7a15c730c0f",
    "details": {
      "sha": "16623a233a5c9b9e56d0782ce7e96840c984cdff",
      "filename": "python/src/com/jetbrains/python/psi/impl/PyClassImpl.java",
      "status": "modified",
      "additions": 19,
      "deletions": 23,
      "changes": 42,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/48b90c2f22f2de501e70541bcda5c7a15c730c0f/python%2Fsrc%2Fcom%2Fjetbrains%2Fpython%2Fpsi%2Fimpl%2FPyClassImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/48b90c2f22f2de501e70541bcda5c7a15c730c0f/python%2Fsrc%2Fcom%2Fjetbrains%2Fpython%2Fpsi%2Fimpl%2FPyClassImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/python%2Fsrc%2Fcom%2Fjetbrains%2Fpython%2Fpsi%2Fimpl%2FPyClassImpl.java?ref=48b90c2f22f2de501e70541bcda5c7a15c730c0f",
      "patch": "@@ -40,10 +40,8 @@\n import com.jetbrains.python.codeInsight.dataflow.scope.ScopeUtil;\n import com.jetbrains.python.documentation.DocStringUtil;\n import com.jetbrains.python.psi.*;\n-import com.jetbrains.python.psi.resolve.PyResolveContext;\n import com.jetbrains.python.psi.resolve.PyResolveUtil;\n import com.jetbrains.python.psi.resolve.QualifiedNameFinder;\n-import com.jetbrains.python.psi.resolve.QualifiedResolveResult;\n import com.jetbrains.python.psi.stubs.PropertyStubStorage;\n import com.jetbrains.python.psi.stubs.PyClassStub;\n import com.jetbrains.python.psi.stubs.PyFunctionStub;\n@@ -1174,35 +1172,35 @@ public List<PyClassLikeType> getAncestorTypes(@NotNull TypeEvalContext context)\n   public PyClassLikeType getMetaClassType(@NotNull TypeEvalContext context) {\n     final LanguageLevel level = LanguageLevel.forElement(this);\n     if (level.isAtLeast(LanguageLevel.PYTHON30)) {\n+      // TODO: This requires switching from stubs to AST\n       final PyExpression[] superClassExpressions = getSuperClassExpressions();\n       for (PyExpression superClassExpression : superClassExpressions) {\n-        if (superClassExpression instanceof PyKeywordArgument &&\n-            PyNames.METACLASS.equals(((PyKeywordArgument)superClassExpression).getKeyword())) {\n-          final PyExpression expression = ((PyKeywordArgument)superClassExpression).getValueExpression();\n-          final PyClass metaclass = getMetaFromExpression(expression);\n-          if (metaclass != null) {\n-            return new PyClassTypeImpl(metaclass, false);\n+        if (superClassExpression instanceof PyKeywordArgument) {\n+          final PyKeywordArgument argument = (PyKeywordArgument)superClassExpression;\n+          if (PyNames.METACLASS.equals(argument.getKeyword())) {\n+            final PyClassLikeType type = getClassLikeType(argument, context);\n+            if (type != null) {\n+              return type;\n+            }\n           }\n         }\n       }\n     }\n     else {\n       final PyTargetExpression metaClassAttribute = findClassAttribute(PyNames.DUNDER_METACLASS, false);\n       if (metaClassAttribute != null) {\n-        final PyExpression expression = metaClassAttribute.findAssignedValue();\n-        final PyClass metaclass = getMetaFromExpression(expression);\n-        if (metaclass != null) {\n-          return new PyClassTypeImpl(metaclass, false);\n+        final PyClassLikeType type = getClassLikeType(metaClassAttribute, context);\n+        if (type != null) {\n+          return type;\n         }\n       }\n       final PsiFile containingFile = getContainingFile();\n       if (containingFile instanceof PyFile) {\n         final PsiElement element = ((PyFile)containingFile).getElementNamed(PyNames.DUNDER_METACLASS);\n-        if (element instanceof PyTargetExpression) {\n-          final PyExpression expression = ((PyTargetExpression)element).findAssignedValue();\n-          final PyClass metaclass = getMetaFromExpression(expression);\n-          if (metaclass != null) {\n-            return new PyClassTypeImpl(metaclass, false);\n+        if (element instanceof PyTypedElement) {\n+          final PyClassLikeType type = getClassLikeType((PyTypedElement)element, context);\n+          if (type != null) {\n+            return type;\n           }\n         }\n       }\n@@ -1211,12 +1209,10 @@ public PyClassLikeType getMetaClassType(@NotNull TypeEvalContext context) {\n   }\n \n   @Nullable\n-  private static PyClass getMetaFromExpression(final PyExpression metaclass) {\n-    if (metaclass instanceof PyReferenceExpression) {\n-      final QualifiedResolveResult result = ((PyReferenceExpression)metaclass).followAssignmentsChain(PyResolveContext.noImplicits());\n-      if (result.getElement() instanceof PyClass) {\n-        return (PyClass)result.getElement();\n-      }\n+  private static PyClassLikeType getClassLikeType(@NotNull PyTypedElement element, @NotNull TypeEvalContext context) {\n+    final PyType type = context.getType(element);\n+    if (type instanceof PyClassLikeType) {\n+      return (PyClassLikeType)type;\n     }\n     return null;\n   }",
      "parent_sha": "92107d2468dc106ed5112d3af4a6657f0ff9612e"
    }
  },
  {
    "oid": "0323c5ba4dc190f5f5fa4205158b92b6bdf31e16",
    "message": "do not call project.dispose() because it has recently become incorrect, and ProjectUtil is unavailable there; to workaround IDEA-284243 Exception when generating shared indexes with IDEA 2021.3\n\nGitOrigin-RevId: 09a6e69515e799a22650ae08f1267335cedc879b",
    "date": "2022-02-08T11:54:49Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/0323c5ba4dc190f5f5fa4205158b92b6bdf31e16",
    "details": {
      "sha": "6d600954f132b84e7b874d39c5a285213232db2e",
      "filename": "platform/core-impl/src/com/intellij/psi/impl/DocumentCommitThread.java",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/0323c5ba4dc190f5f5fa4205158b92b6bdf31e16/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2FDocumentCommitThread.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/0323c5ba4dc190f5f5fa4205158b92b6bdf31e16/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2FDocumentCommitThread.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2FDocumentCommitThread.java?ref=0323c5ba4dc190f5f5fa4205158b92b6bdf31e16",
      "patch": "@@ -18,7 +18,6 @@\n import com.intellij.openapi.progress.util.StandardProgressIndicatorBase;\n import com.intellij.openapi.project.Project;\n import com.intellij.openapi.util.Comparing;\n-import com.intellij.openapi.util.Disposer;\n import com.intellij.openapi.util.ProperTextRange;\n import com.intellij.openapi.util.TextRange;\n import com.intellij.openapi.util.text.StringUtil;\n@@ -88,14 +87,7 @@ public void commitSynchronously(@NotNull Document document, @NotNull Project pro\n     assert !isDisposed;\n \n     if (!project.isInitialized() && !project.isDefault()) {\n-      @NonNls String s = project + \"; Disposed: \"+project.isDisposed()+\"; Open: \"+project.isOpen();\n-      try {\n-        Disposer.dispose(project);\n-      }\n-      catch (Throwable ignored) {\n-        // do not fill log with endless exceptions\n-      }\n-      throw new RuntimeException(s);\n+      throw new IllegalArgumentException(\"Must not call sync commit with unopened project: \"+ project + \"; Disposed: \" + project.isDisposed() + \"; Open: \" + project.isOpen());\n     }\n \n     PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase)PsiDocumentManager.getInstance(project);",
      "parent_sha": "371eb80869d0c52a1a04f8c7ceaa3d3676e8b2c1"
    }
  },
  {
    "oid": "4b17217c72c50d9f774920c5671163cb62e58279",
    "message": "set toolbar target component\n\nGitOrigin-RevId: af040278c2e204c2628ba8b498ec9c306ecb38e7",
    "date": "2021-04-21T15:37:00Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/4b17217c72c50d9f774920c5671163cb62e58279",
    "details": {
      "sha": "05b9d5988d1148ee38bd13ee5c4621210e51fc45",
      "filename": "platform/platform-impl/src/com/intellij/application/options/schemes/AbstractSchemesPanel.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/4b17217c72c50d9f774920c5671163cb62e58279/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fapplication%2Foptions%2Fschemes%2FAbstractSchemesPanel.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/4b17217c72c50d9f774920c5671163cb62e58279/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fapplication%2Foptions%2Fschemes%2FAbstractSchemesPanel.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Fapplication%2Foptions%2Fschemes%2FAbstractSchemesPanel.java?ref=4b17217c72c50d9f774920c5671163cb62e58279",
      "patch": "@@ -111,7 +111,9 @@ private JPanel createControlsPanel() {\n     myActions = createSchemeActions();\n     mySchemesCombo = new EditableSchemesCombo<>(this);\n     controlsPanel.add(mySchemesCombo.getComponent());\n-    myToolbar = createToolbar();\n+    ActionToolbar toolbar = createToolbar();\n+    toolbar.setTargetComponent(mySchemesCombo.getComponent());\n+    myToolbar = toolbar.getComponent();\n     controlsPanel.add(Box.createRigidArea(new JBDimension(4, 0)));\n     controlsPanel.add(myToolbar);\n     controlsPanel.add(Box.createRigidArea(new JBDimension(9, 0)));\n@@ -127,17 +129,17 @@ private JPanel createControlsPanel() {\n   }\n \n   @NotNull\n-  private JComponent createToolbar() {\n+  private ActionToolbar createToolbar() {\n     DefaultActionGroup group = new DefaultActionGroup();\n     group.add(new ShowSchemesActionsListAction(myActions));\n-    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.NAVIGATION_BAR_TOOLBAR, group, true);\n+    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(\"SchemesPanelToolbar\", group, true);\n     toolbar.setReservePlaceAutoPopupIcon(false);\n     toolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);\n     JComponent toolbarComponent = toolbar.getComponent();\n     Dimension maxSize = toolbarComponent.getMaximumSize();\n     toolbarComponent.setMaximumSize(JBUI.size(22, maxSize.height));\n     toolbarComponent.setBorder(JBUI.Borders.empty(3));\n-    return toolbarComponent;\n+    return toolbar;\n   }\n \n   public final JComponent getToolbar() {",
      "parent_sha": "90d58380aeb93927a3448758307f6fa5f5d644c6"
    }
  },
  {
    "oid": "56f7da9359c3293911e2514503353e1ab5c9cf59",
    "message": "make notnull to document purpose clearer\n\nGitOrigin-RevId: 13f453d7abdb496b2de25ff0f952fadb98605505",
    "date": "2021-02-23T12:55:48Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/56f7da9359c3293911e2514503353e1ab5c9cf59",
    "details": {
      "sha": "28ce56f093c999208fc16c97757ca841cdc122e0",
      "filename": "platform/core-impl/src/com/intellij/psi/impl/PsiDocumentManagerBase.java",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/56f7da9359c3293911e2514503353e1ab5c9cf59/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2FPsiDocumentManagerBase.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/56f7da9359c3293911e2514503353e1ab5c9cf59/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2FPsiDocumentManagerBase.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fcore-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2FPsiDocumentManagerBase.java?ref=56f7da9359c3293911e2514503353e1ab5c9cf59",
      "patch": "@@ -104,16 +104,14 @@ protected PsiDocumentManagerBase(@NotNull Project project) {\n     return psiFile;\n   }\n \n-  public void associatePsi(@NotNull Document document, @Nullable PsiFile file) {\n-    if (file != null) {\n-      VirtualFile vFile = file.getViewProvider().getVirtualFile();\n-      Document cachedDocument = FileDocumentManager.getInstance().getCachedDocument(vFile);\n-      if (cachedDocument != null && cachedDocument != document) {\n-        throw new IllegalStateException(\"Can't replace existing document\");\n-      }\n-\n-      FileDocumentManagerBase.registerDocument(document, vFile);\n+  public void associatePsi(@NotNull Document document, @NotNull PsiFile file) {\n+    VirtualFile vFile = file.getViewProvider().getVirtualFile();\n+    Document cachedDocument = FileDocumentManager.getInstance().getCachedDocument(vFile);\n+    if (cachedDocument != null && cachedDocument != document) {\n+      throw new IllegalStateException(\"Can't replace existing document\");\n     }\n+\n+    FileDocumentManagerBase.registerDocument(document, vFile);\n   }\n \n   @Override",
      "parent_sha": "afdb45729337f4656d5c1b70e2b6e5ec08461c16"
    }
  },
  {
    "oid": "f43519482e7e01615007165c776b992a48cfcaa6",
    "message": "UX-1 new SearchEverywhere popup\n\n* save location/size settings",
    "date": "2018-06-04T15:51:28Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/f43519482e7e01615007165c776b992a48cfcaa6",
    "details": {
      "sha": "752dbb0ab7610ecbc9a1c860b4f38a844d60d311",
      "filename": "platform/lang-impl/src/com/intellij/ide/actions/searcheverywhere/SearchEverywhereManagerImpl.java",
      "status": "modified",
      "additions": 16,
      "deletions": 29,
      "changes": 45,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/f43519482e7e01615007165c776b992a48cfcaa6/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2Fsearcheverywhere%2FSearchEverywhereManagerImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/f43519482e7e01615007165c776b992a48cfcaa6/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2Fsearcheverywhere%2FSearchEverywhereManagerImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2Fsearcheverywhere%2FSearchEverywhereManagerImpl.java?ref=f43519482e7e01615007165c776b992a48cfcaa6",
      "patch": "@@ -2,7 +2,6 @@\n package com.intellij.ide.actions.searcheverywhere;\n \n import com.google.common.collect.Lists;\n-import com.intellij.ide.ui.UISettings;\n import com.intellij.openapi.actionSystem.AnActionEvent;\n import com.intellij.openapi.actionSystem.PlatformDataKeys;\n import com.intellij.openapi.project.DumbAwareAction;\n@@ -12,7 +11,6 @@\n import com.intellij.openapi.util.DimensionService;\n import com.intellij.openapi.util.Disposer;\n import com.intellij.openapi.wm.WindowManager;\n-import com.intellij.openapi.wm.impl.IdeFrameImpl;\n import com.intellij.ui.SearchTextField;\n import com.intellij.ui.awt.RelativePoint;\n import com.intellij.util.ui.UIUtil;\n@@ -102,23 +100,31 @@ public void show(@NotNull String selectedContributorID, @Nullable String searchT\n                               .setMovable(true)\n                               .createPopup();\n     Disposer.register(myBalloon, mySearchEverywhereUI);\n+    myBalloon.pack(true, true);\n \n     myProject.putUserData(SEARCH_EVERYWHERE_POPUP, myBalloon);\n     Disposer.register(myBalloon, () -> myProject.putUserData(SEARCH_EVERYWHERE_POPUP, null));\n \n-    RelativePoint showingPoint = calculateShowingPoint();\n     DimensionService service = DimensionService.getInstance();\n     Dimension savedSize = service.getSize(LOCATION_SETTINGS_KEY);\n     if (savedSize != null) {\n       myBalloon.setSize(savedSize);\n     }\n \n-    if (showingPoint != null) {\n-      myBalloon.show(showingPoint);\n-    }\n-    else {\n+    Component topLevelParent = getTopLevelParent();\n+    if (topLevelParent == null) {\n       myBalloon.showInFocusCenter();\n+      return;\n+    }\n+\n+    Point savedLocation = DimensionService.getInstance().getLocation(LOCATION_SETTINGS_KEY);\n+    if (savedLocation != null) {\n+      SwingUtilities.convertPointFromScreen(savedLocation, topLevelParent);\n+      myBalloon.show(new RelativePoint(topLevelParent, savedLocation));\n+      return;\n     }\n+\n+    myBalloon.showInCenterOf(topLevelParent);\n   }\n \n   @Override\n@@ -152,38 +158,19 @@ public void setShowNonProjectItems(boolean show) {\n     mySearchEverywhereUI.setUseNonProjectItems(show);\n   }\n \n-  private RelativePoint calculateShowingPoint() {\n+  @Nullable\n+  private Component getTopLevelParent() {\n     final Window window = myProject != null\n                           ? WindowManager.getInstance().suggestParentWindow(myProject)\n                           : KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow();\n-    Component parent = UIUtil.findUltimateParent(window);\n-    if (parent == null) {\n-      return null;\n-    }\n-\n-    Point savedLocation = DimensionService.getInstance().getLocation(LOCATION_SETTINGS_KEY);\n-    if (savedLocation != null) {\n-      SwingUtilities.convertPointFromScreen(savedLocation, parent);\n-      return new RelativePoint(parent, savedLocation);\n-    }\n-\n-    int height = UISettings.getInstance().getShowMainToolbar() ? 135 : 115;\n-    if (parent instanceof IdeFrameImpl && ((IdeFrameImpl)parent).isInFullScreen()) {\n-      height -= 20;\n-    }\n-    return new RelativePoint(parent, new Point((parent.getSize().width - mySearchEverywhereUI.getPreferredSize().width) / 2, height));\n+    return UIUtil.findUltimateParent(window);\n   }\n \n   private SearchEverywhereUI createView(Project project,\n                                         List<SearchEverywhereContributor> serviceContributors,\n                                         List<SearchEverywhereContributor> allContributors,\n                                         Map<String, SearchEverywhereContributorFilter<?>> contributorFilters) {\n     SearchEverywhereUI view = new SearchEverywhereUI(project, serviceContributors, allContributors, contributorFilters);\n-    view.addPropertyChangeListener(\"preferredSize\", evt -> {\n-      if (isShown()) {\n-        myBalloon.pack(true, true);\n-      }\n-    });\n \n     view.setSearchFinishedHandler(() -> {\n       if (isShown()) {",
      "parent_sha": "d689eeb3199bec19d95aa82ecb27f7b57bd93220"
    }
  },
  {
    "oid": "45655f203843c9c1f5b8b7462451c14805418c1a",
    "message": "NPE (IDEADEV-23789)",
    "date": "2008-04-03T14:41:04Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/45655f203843c9c1f5b8b7462451c14805418c1a",
    "details": {
      "sha": "08967938eb355f63caa257b70a1a6c2035dc0380",
      "filename": "lang-api/src/com/intellij/lang/LanguageStructureViewBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/45655f203843c9c1f5b8b7462451c14805418c1a/lang-api%2Fsrc%2Fcom%2Fintellij%2Flang%2FLanguageStructureViewBuilder.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/45655f203843c9c1f5b8b7462451c14805418c1a/lang-api%2Fsrc%2Fcom%2Fintellij%2Flang%2FLanguageStructureViewBuilder.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/lang-api%2Fsrc%2Fcom%2Fintellij%2Flang%2FLanguageStructureViewBuilder.java?ref=45655f203843c9c1f5b8b7462451c14805418c1a",
      "patch": "@@ -16,6 +16,10 @@ private LanguageStructureViewBuilder() {\n \n   @Nullable\n   public StructureViewBuilder getStructureViewBuilder(PsiFile file) {\n-    return forLanguage(file.getLanguage()).getStructureViewBuilder(file);\n+    PsiStructureViewFactory factory = forLanguage(file.getLanguage());\n+    if (factory != null) {\n+      return factory.getStructureViewBuilder(file);\n+    }\n+    return null;\n   }\n }\n\\ No newline at end of file",
      "parent_sha": "45d3b0abf2fe7b06baeca23c664bd9ef10998b31"
    }
  },
  {
    "oid": "a72594a87a9fbd57f5d26572fc9c1ea258992cba",
    "message": "indexing uncommitted documents reviewed.",
    "date": "2008-09-28T13:41:29Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/a72594a87a9fbd57f5d26572fc9c1ea258992cba",
    "details": {
      "sha": "09f4c52799bc5182f6bab41e4b2a4d51e37c5044",
      "filename": "python/testSrc/com/jetbrains/python/PyStubsTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/a72594a87a9fbd57f5d26572fc9c1ea258992cba/python%2FtestSrc%2Fcom%2Fjetbrains%2Fpython%2FPyStubsTest.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/a72594a87a9fbd57f5d26572fc9c1ea258992cba/python%2FtestSrc%2Fcom%2Fjetbrains%2Fpython%2FPyStubsTest.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/python%2FtestSrc%2Fcom%2Fjetbrains%2Fpython%2FPyStubsTest.java?ref=a72594a87a9fbd57f5d26572fc9c1ea258992cba",
      "patch": "@@ -13,7 +13,9 @@\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiFile;\n import com.intellij.psi.stubs.StubElement;\n+import com.intellij.psi.stubs.StubUpdatingIndex;\n import com.intellij.testFramework.PsiTestUtil;\n+import com.intellij.util.indexing.FileBasedIndex;\n import com.jetbrains.python.psi.*;\n import com.jetbrains.python.psi.impl.PyFileImpl;\n import com.jetbrains.python.psi.stubs.PyClassStub;\n@@ -140,8 +142,10 @@ protected void run(final Result result) throws Throwable {\n \n     StubElement fileStub = fileImpl.getStub();\n     assertNull(\"There should be no stub if file holds tree element\", fileStub);\n-\n+    \n+    FileBasedIndex.getInstance().ensureUpToDate(StubUpdatingIndex.INDEX_ID);\n     fileImpl.unloadContent();\n+    assertNull(fileImpl.getTreeElement()); // Test unload successed.\n \n     fileStub = fileImpl.getStub();\n     assertNotNull(\"After tree element have been unloaded we must be able to create updated stub\", fileStub);",
      "parent_sha": "ad957aaa1c310ebfb95c2285c659401d3faf6b4e"
    }
  },
  {
    "oid": "839989d71fe899c17a30b49a1448aebf1619e86e",
    "message": "git: fix the link to the preferred method in the deprecation message",
    "date": "2019-03-09T16:44:12Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/839989d71fe899c17a30b49a1448aebf1619e86e",
    "details": {
      "sha": "ea41e18ed69163c577701048a6de1c7ecac4293b",
      "filename": "plugins/git4idea/src/git4idea/branch/GitBranchUtil.java",
      "status": "modified",
      "additions": 2,
      "deletions": 17,
      "changes": 19,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/839989d71fe899c17a30b49a1448aebf1619e86e/plugins%2Fgit4idea%2Fsrc%2Fgit4idea%2Fbranch%2FGitBranchUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/839989d71fe899c17a30b49a1448aebf1619e86e/plugins%2Fgit4idea%2Fsrc%2Fgit4idea%2Fbranch%2FGitBranchUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/plugins%2Fgit4idea%2Fsrc%2Fgit4idea%2Fbranch%2FGitBranchUtil.java?ref=839989d71fe899c17a30b49a1448aebf1619e86e",
      "patch": "@@ -1,18 +1,4 @@\n-/*\n- * Copyright 2000-2014 JetBrains s.r.o.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2000-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n package git4idea.branch;\n \n import com.intellij.dvcs.DvcsUtil;\n@@ -32,7 +18,6 @@\n import git4idea.config.GitConfigUtil;\n import git4idea.config.GitVcsSettings;\n import git4idea.repo.GitBranchTrackInfo;\n-import git4idea.repo.GitConfig;\n import git4idea.repo.GitRemote;\n import git4idea.repo.GitRepository;\n import git4idea.ui.branch.GitMultiRootBranchConfig;\n@@ -165,7 +150,7 @@ private static String trackedRemoteKey(String branchName) {\n \n   /**\n    * Get the tracking branch for the given branch, or null if the given branch doesn't track anything.\n-   * @deprecated Use {@link GitConfig#getBranchTrackInfos()}\n+   * @deprecated Use {@link GitRepository#getBranchTrackInfo(String)}\n    */\n   @Deprecated\n   @Nullable",
      "parent_sha": "6c4a8c27682ecf0414f4ef0e4f2edb3d547139ab"
    }
  },
  {
    "oid": "22b304a65b541604b811b0ce698eaf6aeacb5738",
    "message": "pretty-printing",
    "date": "2011-09-05T17:31:05Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/22b304a65b541604b811b0ce698eaf6aeacb5738",
    "details": {
      "sha": "ae60e05fa38c5e231859192b140c2232cdf16a63",
      "filename": "platform/util/src/com/intellij/util/io/PersistentHashMap.java",
      "status": "modified",
      "additions": 15,
      "deletions": 5,
      "changes": 20,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/22b304a65b541604b811b0ce698eaf6aeacb5738/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2Fio%2FPersistentHashMap.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/22b304a65b541604b811b0ce698eaf6aeacb5738/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2Fio%2FPersistentHashMap.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Futil%2Fsrc%2Fcom%2Fintellij%2Futil%2Fio%2FPersistentHashMap.java?ref=22b304a65b541604b811b0ce698eaf6aeacb5738",
      "patch": "@@ -119,7 +119,9 @@ protected void onDropFromCache(final Key key, final AppendStream value) {\n           );\n \n           updateValueId(id, headerRecord, oldHeaderRecord, key, 0);\n-          if (oldHeaderRecord == HeaderRecord.EMPTY) myLiveAndGarbageKeysCounter += LIVE_KEY_MASK;\n+          if (oldHeaderRecord == HeaderRecord.EMPTY) {\n+            myLiveAndGarbageKeysCounter += LIVE_KEY_MASK;\n+          }\n \n           myStreamPool.recycle(value);\n         }\n@@ -262,8 +264,12 @@ public synchronized void put(Key key, Value value) throws IOException {\n       final int id = enumerate(key);\n \n       HeaderRecord oldheader = readValueId(id);\n-      if (oldheader != HeaderRecord.EMPTY) myLiveAndGarbageKeysCounter++;\n-      else myLiveAndGarbageKeysCounter += LIVE_KEY_MASK;\n+      if (oldheader != HeaderRecord.EMPTY) {\n+        myLiveAndGarbageKeysCounter++;\n+      }\n+      else {\n+        myLiveAndGarbageKeysCounter += LIVE_KEY_MASK;\n+      }\n \n       HeaderRecord header = new HeaderRecord(myValueStorage.appendBytes(bytes, 0));\n \n@@ -330,7 +336,9 @@ public synchronized Value get(Key key) throws IOException {\n         myEnumerator.markDirty(true);\n \n         updateValueId(id, new HeaderRecord(readResult.first), oldHeader, key, 0);\n-        if (oldHeader != HeaderRecord.EMPTY) myLiveAndGarbageKeysCounter++;\n+        if (oldHeader != HeaderRecord.EMPTY) {\n+          myLiveAndGarbageKeysCounter++;\n+        }\n       }\n \n       final DataInputStream input = new DataInputStream(new ByteArrayInputStream(readResult.second));\n@@ -364,7 +372,9 @@ public synchronized void remove(Key key) throws IOException {\n       myEnumerator.markDirty(true);\n \n       final HeaderRecord record = readValueId(id);\n-      if (record != HeaderRecord.EMPTY) myLiveAndGarbageKeysCounter++;\n+      if (record != HeaderRecord.EMPTY) {\n+        myLiveAndGarbageKeysCounter++;\n+      }\n \n       updateValueId(id, HeaderRecord.EMPTY, record, key, 0);\n     }",
      "parent_sha": "e428fb20130dc2d0ca00ce1c5aaf710fc480d393"
    }
  },
  {
    "oid": "4d2e5371768eab0e37b12f1463b930dd76038f05",
    "message": "FUS-960 Increment `platform.registry` group\n\nGitOrigin-RevId: de54492d73237f03f1278276f8d37738c01274bf",
    "date": "2021-01-18T15:25:31Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/4d2e5371768eab0e37b12f1463b930dd76038f05",
    "details": {
      "sha": "178b2d2ae07855a6564f2168c2a08b418014ebcf",
      "filename": "platform/platform-impl/src/com/intellij/internal/statistic/collectors/fus/RegistryApplicationUsagesCollector.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/4d2e5371768eab0e37b12f1463b930dd76038f05/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Finternal%2Fstatistic%2Fcollectors%2Ffus%2FRegistryApplicationUsagesCollector.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/4d2e5371768eab0e37b12f1463b930dd76038f05/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Finternal%2Fstatistic%2Fcollectors%2Ffus%2FRegistryApplicationUsagesCollector.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-impl%2Fsrc%2Fcom%2Fintellij%2Finternal%2Fstatistic%2Fcollectors%2Ffus%2FRegistryApplicationUsagesCollector.java?ref=4d2e5371768eab0e37b12f1463b930dd76038f05",
      "patch": "@@ -27,7 +27,7 @@\n import static com.intellij.internal.statistic.utils.PluginInfoDetectorKt.*;\n \n public class RegistryApplicationUsagesCollector extends ApplicationUsagesCollector {\n-  private static final EventLogGroup GROUP = new EventLogGroup(\"platform.registry\", 2);\n+  private static final EventLogGroup GROUP = new EventLogGroup(\"platform.registry\", 3);\n   private static final StringEventField REGISTRY_KEY = EventFields.StringValidatedByCustomRule(\"id\", \"registry_key\");\n \n   private static final VarargEventId REGISTRY = GROUP.registerVarargEvent(\"registry\", REGISTRY_KEY, EventFields.PluginInfo);",
      "parent_sha": "7b1387ded5ff83834a14af0022ff1a1bfd9ade83"
    }
  },
  {
    "oid": "1b38be3b2c8b7203137d6ea090b0ba1c1820904f",
    "message": "IDEA-219697 Navigate to File should honor the Sources directories first\n\nGitOrigin-RevId: a3d74f455a91a4ad768f3ba3e3f08da194b9d68a",
    "date": "2020-04-10T15:09:11Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/1b38be3b2c8b7203137d6ea090b0ba1c1820904f",
    "details": {
      "sha": "8a2e2ba31835256638982cffa72b461a61ac398f",
      "filename": "platform/lang-impl/src/com/intellij/ide/actions/GotoFileItemProvider.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/1b38be3b2c8b7203137d6ea090b0ba1c1820904f/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FGotoFileItemProvider.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/1b38be3b2c8b7203137d6ea090b0ba1c1820904f/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FGotoFileItemProvider.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Flang-impl%2Fsrc%2Fcom%2Fintellij%2Fide%2Factions%2FGotoFileItemProvider.java?ref=1b38be3b2c8b7203137d6ea090b0ba1c1820904f",
      "patch": "@@ -249,8 +249,8 @@ private Iterable<FoundItemDescriptor<PsiFileSystemItem>> getItemsForNames(@NotNu\n     }\n \n     if (group.size() > 1) {\n-      group.sort(Comparator.<PsiFileSystemItem, Integer>comparing(nesting::get).\n-        thenComparing(getPathProximityComparator()).\n+      group.sort(getPathProximityComparator().\n+        thenComparing(nesting::get).\n         thenComparing(myModel::getFullName));\n     }\n     return ContainerUtil.map(group, item -> new FoundItemDescriptor<>(item, matchDegrees.get(item)));",
      "parent_sha": "393ede54580f5fd367711cc82bc71ab2011913dd"
    }
  },
  {
    "oid": "a03acbd92fc8fdf31a886877267fa6d489c92a81",
    "message": "EA-49729 - assert: MarkupModelImpl.dispose",
    "date": "2013-09-27T13:04:11Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/a03acbd92fc8fdf31a886877267fa6d489c92a81",
    "details": {
      "sha": "311a7c84952f57ef4484040b2785f52c7f4ddaae",
      "filename": "platform/editor-ui-ex/src/com/intellij/openapi/editor/impl/MarkupModelImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/a03acbd92fc8fdf31a886877267fa6d489c92a81/platform%2Feditor-ui-ex%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Feditor%2Fimpl%2FMarkupModelImpl.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/a03acbd92fc8fdf31a886877267fa6d489c92a81/platform%2Feditor-ui-ex%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Feditor%2Fimpl%2FMarkupModelImpl.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Feditor-ui-ex%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Feditor%2Fimpl%2FMarkupModelImpl.java?ref=a03acbd92fc8fdf31a886877267fa6d489c92a81",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2000-2009 JetBrains s.r.o.\n+ * Copyright 2000-2013 JetBrains s.r.o.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -60,7 +60,6 @@ public class MarkupModelImpl extends UserDataHolderBase implements MarkupModelEx\n \n   @Override\n   public void dispose() {\n-    ApplicationManager.getApplication().assertIsDispatchThread();\n     myHighlighterTree.dispose();\n   }\n ",
      "parent_sha": "2383e90605b99ab17c3042fa839f62f689ab379e"
    }
  },
  {
    "oid": "ccb1eed6ae40227d8bd160f9cdaf168aff71beb5",
    "message": "cleanup spaghetti incident",
    "date": "2012-07-27T13:29:35Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/ccb1eed6ae40227d8bd160f9cdaf168aff71beb5",
    "details": {
      "sha": "58a076afec67b574bf51e2b1f219d3f8c856c3e2",
      "filename": "platform/platform-api/src/com/intellij/execution/process/ColoredProcessHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 12,
      "changes": 13,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/ccb1eed6ae40227d8bd160f9cdaf168aff71beb5/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fprocess%2FColoredProcessHandler.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/ccb1eed6ae40227d8bd160f9cdaf168aff71beb5/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fprocess%2FColoredProcessHandler.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fplatform-api%2Fsrc%2Fcom%2Fintellij%2Fexecution%2Fprocess%2FColoredProcessHandler.java?ref=ccb1eed6ae40227d8bd160f9cdaf168aff71beb5",
      "patch": "@@ -35,7 +35,6 @@ public class ColoredProcessHandler extends OSProcessHandler {\n   private static final String TEXT_ATTRS_PATTERN = \"m\" + TEXT_ATTRS_PREFIX_CH + \"\\\\[\";\n \n   private Key myCurrentColor;\n-  @Nullable private final Charset myCharset;\n \n   public static TextAttributes getByKey(final TextAttributesKey key){\n     return EditorColorsManager.getInstance().getGlobalScheme().getAttributes(key);\n@@ -56,17 +55,7 @@ public ColoredProcessHandler(Process process, String commandLine) {\n   public ColoredProcessHandler(final Process process,\n                                final String commandLine,\n                                @Nullable final Charset charset) {\n-    super(process, commandLine);\n-    myCharset = charset;\n-  }\n-\n-  @Override\n-  public Charset getCharset() {\n-    if (myCharset != null) {\n-      return myCharset;\n-    }\n-    // Charset wasn't specified - use default one\n-    return super.getCharset();\n+    super(process, commandLine, charset);\n   }\n \n   public final void notifyTextAvailable(final String text, final Key outputType) {",
      "parent_sha": "6d34a5f2e9a7bf1def4330a9f5cc3738356180c5"
    }
  },
  {
    "oid": "693c37c7de83ec015bbf966a33957010038d0985",
    "message": "Inline Debugger: unreadable color combination when hovering over inline value in current line (IDEA-252062)\n\nGitOrigin-RevId: 05e09e3434664ae635581938996c2f53e86c0ea7",
    "date": "2020-11-10T17:23:02Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/693c37c7de83ec015bbf966a33957010038d0985",
    "details": {
      "sha": "70276e85310af3579f9fa3364ea36e8fee9cc85f",
      "filename": "platform/xdebugger-impl/src/com/intellij/xdebugger/impl/inline/InlineDebugRenderer.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/693c37c7de83ec015bbf966a33957010038d0985/platform%2Fxdebugger-impl%2Fsrc%2Fcom%2Fintellij%2Fxdebugger%2Fimpl%2Finline%2FInlineDebugRenderer.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/693c37c7de83ec015bbf966a33957010038d0985/platform%2Fxdebugger-impl%2Fsrc%2Fcom%2Fintellij%2Fxdebugger%2Fimpl%2Finline%2FInlineDebugRenderer.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fxdebugger-impl%2Fsrc%2Fcom%2Fintellij%2Fxdebugger%2Fimpl%2Finline%2FInlineDebugRenderer.java?ref=693c37c7de83ec015bbf966a33957010038d0985",
      "patch": "@@ -23,6 +23,7 @@\n import com.intellij.util.Producer;\n import com.intellij.util.ui.GraphicsUtil;\n import com.intellij.util.ui.JBUI;\n+import com.intellij.util.ui.UIUtil;\n import com.intellij.xdebugger.impl.frame.XWatchesView;\n import com.intellij.xdebugger.impl.ui.XDebuggerUIConstants;\n import com.intellij.xdebugger.impl.ui.tree.nodes.XValueNodeImpl;\n@@ -247,8 +248,15 @@ private TextAttributes getAttributes(Editor editor) {\n     if (isHovered) {\n       TextAttributes attr = new TextAttributes();\n       attr.copyFrom(attributes);\n-      attr.setForegroundColor(JBUI.CurrentTheme.Link.linkColor());\n-      attr.setAdditionalEffects(Collections.singletonMap(EffectType.LINE_UNDERSCORE, JBUI.CurrentTheme.Link.linkColor()));\n+\n+      Color hoveredAndSelectedColor = UIUtil.isUnderDarcula()\n+                                         ? editor.getColorsScheme().getDefaultForeground()\n+                                         : DebuggerColors.EXECUTIONPOINT_ATTRIBUTES.getDefaultAttributes().getForegroundColor();\n+      Color foregroundColor = myIsOnExecutionLine.produce()\n+                              ? hoveredAndSelectedColor\n+                              : JBUI.CurrentTheme.Link.linkColor();\n+      attr.setForegroundColor(foregroundColor);\n+\n       return attr;\n     }\n     return attributes;",
      "parent_sha": "aee24136b7c80ce485ba3e80603393327d8be187"
    }
  },
  {
    "oid": "4ce18d0da6f6d289e9405c9ec5a4e6fdba6885e4",
    "message": "javac ast indices: do not unmark dirty module after single file compilation 2",
    "date": "2017-01-15T19:55:44Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/4ce18d0da6f6d289e9405c9ec5a4e6fdba6885e4",
    "details": {
      "sha": "93cb5893dc8f0a6528436766ab630e9dc9db1894",
      "filename": "java/compiler/impl/src/com/intellij/compiler/backwardRefs/DirtyScopeHolder.java",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/4ce18d0da6f6d289e9405c9ec5a4e6fdba6885e4/java%2Fcompiler%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fcompiler%2FbackwardRefs%2FDirtyScopeHolder.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/4ce18d0da6f6d289e9405c9ec5a4e6fdba6885e4/java%2Fcompiler%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fcompiler%2FbackwardRefs%2FDirtyScopeHolder.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fcompiler%2Fimpl%2Fsrc%2Fcom%2Fintellij%2Fcompiler%2FbackwardRefs%2FDirtyScopeHolder.java?ref=4ce18d0da6f6d289e9405c9ec5a4e6fdba6885e4",
      "patch": "@@ -119,14 +119,19 @@ void upToDateChecked(boolean isUpToDate) {\n \n   void compilerActivityFinished(Module[] affectedModules) {\n     compilationFinished(() -> {\n-      final ModuleManager moduleManager = ModuleManager.getInstance(myService.getProject());\n-      final List<Module> compiledModules = myCompilationAffectedModules.stream().map(moduleManager::findModuleByName).collect(Collectors.toList());\n-\n-      myVFSChangedModules.removeAll(compiledModules);\n+      final List<Module> compiledModules = ReadAction.compute(() -> {\n+        final Project project = myService.getProject();\n+        if (project.isDisposed()) {\n+          return null;\n+        }\n+        final ModuleManager moduleManager = ModuleManager.getInstance(myService.getProject());\n+        return myCompilationAffectedModules.stream().map(moduleManager::findModuleByName).collect(Collectors.toList());\n+      });\n+      if (compiledModules == null) return;\n \n-      final Set<Module> unCompiledModules = ContainerUtil.newHashSet(affectedModules);\n-      unCompiledModules.removeAll(compiledModules);\n-      myVFSChangedModules.removeAll(unCompiledModules);\n+      Set<Module> dirtyModulesAfterCompilation = ContainerUtil.set(affectedModules);\n+      dirtyModulesAfterCompilation.removeAll(compiledModules);\n+      ContainerUtil.addAll(myVFSChangedModules, dirtyModulesAfterCompilation);\n     });\n   }\n ",
      "parent_sha": "b484dc4e645fdfdf41e8b7938b306e7edc191646"
    }
  },
  {
    "oid": "a3e47463ef6e57d267757565fa196c682436970b",
    "message": "[java-slices] Move new tree creation into background\n\nFixes EA-261202 - T: FileBasedIndexImpl.ensureUpToDate\n\nGitOrigin-RevId: 50c9cfdbb157ba500bed53b2178c63c80d3eafeb",
    "date": "2021-04-15T09:25:54Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/a3e47463ef6e57d267757565fa196c682436970b",
    "details": {
      "sha": "d0ed884cdeb06fb79d8338b169589791e175f8c9",
      "filename": "java/java-impl/src/com/intellij/slicer/SliceNullnessAnalyzerBase.java",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/a3e47463ef6e57d267757565fa196c682436970b/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Fslicer%2FSliceNullnessAnalyzerBase.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/a3e47463ef6e57d267757565fa196c682436970b/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Fslicer%2FSliceNullnessAnalyzerBase.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fjava-impl%2Fsrc%2Fcom%2Fintellij%2Fslicer%2FSliceNullnessAnalyzerBase.java?ref=a3e47463ef6e57d267757565fa196c682436970b",
      "patch": "@@ -34,13 +34,12 @@ public SliceNullnessAnalyzerBase(@NotNull SliceLeafEquality leafEquality,\n     myProvider = provider;\n   }\n \n-  private void groupByNullness(NullAnalysisResult result, SliceRootNode oldRoot, final Map<SliceNode, NullAnalysisResult> map) {\n-    SliceRootNode root = createNewTree(result, oldRoot, map);\n-\n+  private static void groupByNullness(SliceRootNode oldRoot, SliceRootNode root) {\n     SliceUsage rootUsage = oldRoot.getCachedChildren().get(0).getValue();\n     SliceManager.getInstance(Objects.requireNonNull(root.getProject()))\n-      .createToolWindow(true, root, true, SliceManager.getElementDescription(null, Objects.requireNonNull(rootUsage).getElement(),\n-                                                                             JavaBundle.message(\"tab.title.slices.grouped.by.nullness\")) );\n+      .createToolWindow(true, root, true,\n+                        SliceManager.getElementDescription(null, Objects.requireNonNull(rootUsage).getElement(),\n+                                                           JavaBundle.message(\"tab.title.slices.grouped.by.nullness\")));\n   }\n \n   public @NotNull SliceRootNode createNewTree(NullAnalysisResult result, SliceRootNode oldRoot, final Map<SliceNode, NullAnalysisResult> map) {\n@@ -102,16 +101,17 @@ private SliceLeafValueClassNode createValueRootNode(NullAnalysisResult result,\n \n   public void startAnalyzeNullness(@NotNull AbstractTreeStructure treeStructure, @NotNull Runnable finish) {\n     final SliceRootNode root = (SliceRootNode)treeStructure.getRootElement();\n-    final Ref<NullAnalysisResult> leafExpressions = Ref.create(null);\n+    final Ref<SliceRootNode> newRootRef = Ref.create(null);\n     final Map<SliceNode, NullAnalysisResult> map = createMap();\n \n     String encouragementPiece = \" (may very well take the whole day)\";\n     ProgressManager.getInstance().run(new Task.Backgroundable(\n       root.getProject(), JavaRefactoringBundle.message(\"dataflow.to.here.expand.progress\", encouragementPiece), true) {\n       @Override\n       public void run(final @NotNull ProgressIndicator indicator) {\n-        NullAnalysisResult l = calcNullableLeaves(root, treeStructure, map);\n-        leafExpressions.set(l);\n+        NullAnalysisResult leaves = calcNullableLeaves(root, treeStructure, map);\n+        SliceRootNode newRoot = createNewTree(leaves, root, map);\n+        newRootRef.set(newRoot);\n       }\n \n       @Override\n@@ -122,10 +122,10 @@ public void onCancel() {\n       @Override\n       public void onSuccess() {\n         try {\n-          NullAnalysisResult leaves = leafExpressions.get();\n-          if (leaves == null) return;  //cancelled\n+          SliceRootNode newRoot = newRootRef.get();\n+          if (newRoot == null) return;  //cancelled\n \n-          groupByNullness(leaves, root, map);\n+          groupByNullness(root, newRoot);\n         }\n         finally {\n           finish.run();",
      "parent_sha": "9a9baa47b8237a86b05225ca880ad4b16059c8c6"
    }
  },
  {
    "oid": "5c2b0796da31b6273db9c24b91506ee56e2f542a",
    "message": "IDEA-81276 Show the current program execution point does not bring hidden windows to front",
    "date": "2014-02-27T12:15:00Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/5c2b0796da31b6273db9c24b91506ee56e2f542a",
    "details": {
      "sha": "db7aef7d61cbef95aa1d0fd7c492d94c33f56e98",
      "filename": "platform/xdebugger-impl/src/com/intellij/xdebugger/impl/ui/ExecutionPointHighlighter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/5c2b0796da31b6273db9c24b91506ee56e2f542a/platform%2Fxdebugger-impl%2Fsrc%2Fcom%2Fintellij%2Fxdebugger%2Fimpl%2Fui%2FExecutionPointHighlighter.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/5c2b0796da31b6273db9c24b91506ee56e2f542a/platform%2Fxdebugger-impl%2Fsrc%2Fcom%2Fintellij%2Fxdebugger%2Fimpl%2Fui%2FExecutionPointHighlighter.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fxdebugger-impl%2Fsrc%2Fcom%2Fintellij%2Fxdebugger%2Fimpl%2Fui%2FExecutionPointHighlighter.java?ref=5c2b0796da31b6273db9c24b91506ee56e2f542a",
      "patch": "@@ -72,7 +72,7 @@ public void run() {\n \n   public void navigateTo() {\n     if (myOpenFileDescriptor != null) {\n-      FileEditorManager.getInstance(myProject).openTextEditor(myOpenFileDescriptor, false);\n+      FileEditorManager.getInstance(myProject).openTextEditor(myOpenFileDescriptor, true);\n     }\n   }\n ",
      "parent_sha": "9df88a0b6171c30f4d19c59532914b012bf72e6d"
    }
  },
  {
    "oid": "428e15d82fab191929bef017bb702dd64309e642",
    "message": "[java] corrupted manifest exception diagnostics (IDEA-216904)\n\nGitOrigin-RevId: 5894ebd460eed74b298c6dbc9e9dc7134ab62cd1",
    "date": "2019-07-10T13:01:47Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/428e15d82fab191929bef017bb702dd64309e642",
    "details": {
      "sha": "c1258121fdaa608e1dbd7285389e527eec143926",
      "filename": "java/java-psi-impl/src/com/intellij/psi/impl/light/LightJavaModule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/428e15d82fab191929bef017bb702dd64309e642/java%2Fjava-psi-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Flight%2FLightJavaModule.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/428e15d82fab191929bef017bb702dd64309e642/java%2Fjava-psi-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Flight%2FLightJavaModule.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/java%2Fjava-psi-impl%2Fsrc%2Fcom%2Fintellij%2Fpsi%2Fimpl%2Flight%2FLightJavaModule.java?ref=428e15d82fab191929bef017bb702dd64309e642",
      "patch": "@@ -252,7 +252,7 @@ public static String moduleName(@NotNull VirtualFile jarRoot) {\n         if (claimed != null) return claimed;\n       }\n       catch (IOException e) {\n-        Logger.getInstance(LightJavaModule.class).warn(e);\n+        Logger.getInstance(LightJavaModule.class).warn(manifest.getPath(), e);\n       }\n     }\n ",
      "parent_sha": "9e35be2325ddc78d4f3dae5b2f43d37dee46503c"
    }
  },
  {
    "oid": "d69fe50e36b3cd27c7661eba93e46111d78f2ae2",
    "message": "enable bg dumb mode in revert (EA-71368 - Throwable: DumbServiceImpl.scheduleCacheUpdate)",
    "date": "2015-08-01T08:04:53Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/d69fe50e36b3cd27c7661eba93e46111d78f2ae2",
    "details": {
      "sha": "f971cf45b1ba60375eae50b4d92d061a434efe6c",
      "filename": "platform/vcs-impl/src/com/intellij/openapi/vcs/changes/ui/RollbackWorker.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/d69fe50e36b3cd27c7661eba93e46111d78f2ae2/platform%2Fvcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvcs%2Fchanges%2Fui%2FRollbackWorker.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/d69fe50e36b3cd27c7661eba93e46111d78f2ae2/platform%2Fvcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvcs%2Fchanges%2Fui%2FRollbackWorker.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fvcs-impl%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Fvcs%2Fchanges%2Fui%2FRollbackWorker.java?ref=d69fe50e36b3cd27c7661eba93e46111d78f2ae2",
      "patch": "@@ -21,6 +21,8 @@\n import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.application.ModalityState;\n import com.intellij.openapi.progress.*;\n+import com.intellij.openapi.project.DumbModePermission;\n+import com.intellij.openapi.project.DumbService;\n import com.intellij.openapi.project.Project;\n import com.intellij.openapi.util.Comparing;\n import com.intellij.openapi.util.io.FileUtil;\n@@ -100,7 +102,7 @@ else if (myInvokedFromModalContext) {\n       ProgressManager.getInstance().run(new Task.Modal(myProject, myOperationName, true) {\n           @Override\n           public void run(@NotNull ProgressIndicator indicator) {\n-            rollbackAction.run();\n+            DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND, rollbackAction);\n           }\n         });\n     }",
      "parent_sha": "eb114a86b7fc6e4057a7e98601d552265c021a2f"
    }
  },
  {
    "oid": "90836b3b1d4f9552b7153acba1616880023594f1",
    "message": "Cleanup (formatting)",
    "date": "2016-09-08T13:59:10Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/90836b3b1d4f9552b7153acba1616880023594f1",
    "details": {
      "sha": "d406a43811371fc3fcc63b01e3375cad2331bf85",
      "filename": "platform/projectModel-api/src/com/intellij/openapi/roots/ModuleRootModificationUtil.java",
      "status": "modified",
      "additions": 37,
      "deletions": 41,
      "changes": 78,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/90836b3b1d4f9552b7153acba1616880023594f1/platform%2FprojectModel-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Froots%2FModuleRootModificationUtil.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/90836b3b1d4f9552b7153acba1616880023594f1/platform%2FprojectModel-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Froots%2FModuleRootModificationUtil.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2FprojectModel-api%2Fsrc%2Fcom%2Fintellij%2Fopenapi%2Froots%2FModuleRootModificationUtil.java?ref=90836b3b1d4f9552b7153acba1616880023594f1",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2000-2015 JetBrains s.r.o.\n+ * Copyright 2000-2016 JetBrains s.r.o.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,13 +15,12 @@\n  */\n package com.intellij.openapi.roots;\n \n-import com.intellij.openapi.application.Application;\n-import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.application.ReadAction;\n+import com.intellij.openapi.application.WriteAction;\n import com.intellij.openapi.module.Module;\n import com.intellij.openapi.projectRoots.Sdk;\n import com.intellij.openapi.roots.impl.libraries.LibraryEx;\n import com.intellij.openapi.roots.libraries.Library;\n-import com.intellij.openapi.util.Computable;\n import com.intellij.openapi.vfs.VfsUtilCore;\n import com.intellij.openapi.vfs.VirtualFile;\n import com.intellij.util.Consumer;\n@@ -36,37 +35,44 @@\n  * @author nik\n  */\n public class ModuleRootModificationUtil {\n-  public static void addContentRoot(@NotNull Module module, final @NotNull String path) {\n+  public static void addContentRoot(@NotNull Module module, @NotNull String path) {\n     updateModel(module, model -> model.addContentEntry(VfsUtilCore.pathToUrl(path)));\n   }\n \n-  public static void addModuleLibrary(@NotNull Module module, @Nullable String libName, @NotNull List<String> classesRoots, @NotNull List<String> sourceRoots) {\n+  public static void addModuleLibrary(@NotNull Module module,\n+                                      @Nullable String libName,\n+                                      @NotNull List<String> classesRoots,\n+                                      @NotNull List<String> sourceRoots) {\n     addModuleLibrary(module, libName, classesRoots, sourceRoots, DependencyScope.COMPILE);\n   }\n \n-  public static void addModuleLibrary(@NotNull Module module, @Nullable String libName,\n+  public static void addModuleLibrary(@NotNull Module module,\n+                                      @Nullable String libName,\n                                       @NotNull List<String> classesRoots,\n                                       @NotNull List<String> sourceRoots,\n                                       @NotNull DependencyScope scope) {\n-    addModuleLibrary(module, libName, classesRoots, sourceRoots, Collections.<String>emptyList(), scope);\n+    addModuleLibrary(module, libName, classesRoots, sourceRoots, Collections.emptyList(), scope);\n   }\n \n-  public static void addModuleLibrary(@NotNull Module module, @Nullable String libName,\n+  public static void addModuleLibrary(@NotNull Module module,\n+                                      @Nullable String libName,\n                                       @NotNull List<String> classesRoots,\n                                       @NotNull List<String> sourceRoots,\n                                       @NotNull List<String> excludedRoots,\n                                       @NotNull DependencyScope scope) {\n     addModuleLibrary(module, libName, classesRoots, sourceRoots, excludedRoots, scope, false);\n   }\n-  public static void addModuleLibrary(final @NotNull Module module, final @Nullable String libName,\n-                                      final @NotNull List<String> classesRoots,\n-                                      final @NotNull List<String> sourceRoots,\n-                                      final @NotNull List<String> excludedRoots,\n-                                      final @NotNull DependencyScope scope,\n-                                      final boolean exported) {\n+\n+  public static void addModuleLibrary(@NotNull Module module,\n+                                      @Nullable String libName,\n+                                      @NotNull List<String> classesRoots,\n+                                      @NotNull List<String> sourceRoots,\n+                                      @NotNull List<String> excludedRoots,\n+                                      @NotNull DependencyScope scope,\n+                                      boolean exported) {\n     updateModel(module, model -> {\n-      final LibraryEx library = (LibraryEx)model.getModuleLibraryTable().createLibrary(libName);\n-      final LibraryEx.ModifiableModelEx libraryModel = library.getModifiableModel();\n+      LibraryEx library = (LibraryEx)model.getModuleLibraryTable().createLibrary(libName);\n+      LibraryEx.ModifiableModelEx libraryModel = library.getModifiableModel();\n \n       for (String root : classesRoots) {\n         libraryModel.addRoot(root, OrderRootType.CLASSES);\n@@ -83,56 +89,51 @@ public static void addModuleLibrary(final @NotNull Module module, final @Nullabl\n       entry.setScope(scope);\n       entry.setExported(exported);\n \n-      doWriteAction(() -> libraryModel.commit());\n+      WriteAction.run(libraryModel::commit);\n     });\n   }\n \n   public static void addModuleLibrary(@NotNull Module module, @NotNull String classesRootUrl) {\n-    addModuleLibrary(module, null, Collections.singletonList(classesRootUrl), Collections.<String>emptyList());\n+    addModuleLibrary(module, null, Collections.singletonList(classesRootUrl), Collections.emptyList());\n   }\n \n   public static void addDependency(@NotNull Module module, @NotNull Library library) {\n     addDependency(module, library, DependencyScope.COMPILE, false);\n   }\n \n-  public static void addDependency(@NotNull Module module, final @NotNull Library library, final @NotNull DependencyScope scope, final boolean exported) {\n+  public static void addDependency(@NotNull Module module, @NotNull Library library, @NotNull DependencyScope scope, boolean exported) {\n     updateModel(module, model -> {\n       LibraryOrderEntry entry = model.addLibraryEntry(library);\n       entry.setExported(exported);\n       entry.setScope(scope);\n     });\n   }\n \n-  public static void setModuleSdk(@NotNull Module module, @Nullable final Sdk sdk) {\n+  public static void setModuleSdk(@NotNull Module module, @Nullable Sdk sdk) {\n     updateModel(module, model -> model.setSdk(sdk));\n   }\n \n   public static void setSdkInherited(@NotNull Module module) {\n     updateModel(module, model -> model.inheritSdk());\n   }\n \n-  public static void addDependency(final @NotNull Module from, final @NotNull Module to) {\n+  public static void addDependency(@NotNull Module from, @NotNull Module to) {\n     addDependency(from, to, DependencyScope.COMPILE, false);\n   }\n \n-  public static void addDependency(@NotNull Module from, @NotNull final Module to, @NotNull final DependencyScope scope, final boolean exported) {\n+  public static void addDependency(@NotNull Module from, @NotNull Module to, @NotNull DependencyScope scope, boolean exported) {\n     updateModel(from, model -> {\n       ModuleOrderEntry entry = model.addModuleOrderEntry(to);\n       entry.setScope(scope);\n       entry.setExported(exported);\n     });\n   }\n \n-  public static void updateModel(@NotNull final Module module, @NotNull Consumer<ModifiableRootModel> task) {\n-    final ModifiableRootModel model = ApplicationManager.getApplication().runReadAction(new Computable<ModifiableRootModel>() {\n-      @Override\n-      public ModifiableRootModel compute() {\n-        return ModuleRootManager.getInstance(module).getModifiableModel();\n-      }\n-    });\n+  public static void updateModel(@NotNull Module module, @NotNull Consumer<ModifiableRootModel> task) {\n+    ModifiableRootModel model = ReadAction.compute(() -> ModuleRootManager.getInstance(module).getModifiableModel());\n     try {\n       task.consume(model);\n-      doWriteAction(model::commit);\n+      WriteAction.run(model::commit);\n     }\n     catch (RuntimeException | Error e) {\n       model.dispose();\n@@ -141,11 +142,11 @@ public ModifiableRootModel compute() {\n   }\n \n   public static void updateExcludedFolders(@NotNull Module module,\n-                                           @NotNull final VirtualFile contentRoot,\n-                                           @NotNull final Collection<String> urlsToUnExclude,\n-                                           @NotNull final Collection<String> urlsToExclude) {\n+                                           @NotNull VirtualFile contentRoot,\n+                                           @NotNull Collection<String> urlsToUnExclude,\n+                                           @NotNull Collection<String> urlsToExclude) {\n     updateModel(module, modifiableModel -> {\n-      for (final ContentEntry contentEntry : modifiableModel.getContentEntries()) {\n+      for (ContentEntry contentEntry : modifiableModel.getContentEntries()) {\n         if (contentRoot.equals(contentEntry.getFile())) {\n           for (String url : urlsToUnExclude) {\n             contentEntry.removeExcludeFolder(url);\n@@ -158,9 +159,4 @@ public static void updateExcludedFolders(@NotNull Module module,\n       }\n     });\n   }\n-\n-  private static void doWriteAction(final Runnable action) {\n-    final Application application = ApplicationManager.getApplication();\n-    application.invokeAndWait(() -> application.runWriteAction(action));\n-  }\n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "95fa08195593b5d7ac7dba225acf9b08e2221464"
    }
  },
  {
    "oid": "a1983108c7a830e74a9b0b5de708beeaa0d04034",
    "message": "blame the plugin causing the problem",
    "date": "2017-09-22T11:44:36Z",
    "url": "https://github.com/JetBrains/intellij-community/commit/a1983108c7a830e74a9b0b5de708beeaa0d04034",
    "details": {
      "sha": "b853dcaefca6276fa2f74fc424e9bee417e9a1d8",
      "filename": "platform/analysis-impl/src/com/intellij/codeInspection/ex/InspectionToolRegistrar.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/JetBrains/intellij-community/blob/a1983108c7a830e74a9b0b5de708beeaa0d04034/platform%2Fanalysis-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInspection%2Fex%2FInspectionToolRegistrar.java",
      "raw_url": "https://github.com/JetBrains/intellij-community/raw/a1983108c7a830e74a9b0b5de708beeaa0d04034/platform%2Fanalysis-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInspection%2Fex%2FInspectionToolRegistrar.java",
      "contents_url": "https://api.github.com/repos/JetBrains/intellij-community/contents/platform%2Fanalysis-impl%2Fsrc%2Fcom%2Fintellij%2FcodeInspection%2Fex%2FInspectionToolRegistrar.java?ref=a1983108c7a830e74a9b0b5de708beeaa0d04034",
      "patch": "@@ -17,10 +17,12 @@\n package com.intellij.codeInspection.ex;\n \n import com.intellij.codeInspection.*;\n+import com.intellij.diagnostic.PluginException;\n import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.components.ServiceManager;\n import com.intellij.openapi.components.impl.ComponentManagerImpl;\n import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.extensions.PluginDescriptor;\n import com.intellij.openapi.progress.ProgressManager;\n import com.intellij.util.containers.ContainerUtil;\n import gnu.trove.THashMap;\n@@ -77,9 +79,11 @@ private static void checkForDuplicateShortName(InspectionEP ep, Map<String, Insp\n     final String shortName = ep.getShortName();\n     final InspectionEP duplicate = shortNames.put(shortName, ep);\n     if (duplicate != null) {\n-      LOG.error(\"Short name '\" + shortName + \"' is not unique\\n\" +\n-                \"class '\" + ep.instantiateTool().getClass().getCanonicalName() + \"' in \" + ep.getPluginDescriptor() +\n-                \"\\nand\\nclass'\" + duplicate.instantiateTool().getClass().getCanonicalName() + \"' in \" + duplicate.getPluginDescriptor() + \"\\nconflict\");\n+      final PluginDescriptor descriptor = ep.getPluginDescriptor();\n+      LOG.error(new PluginException(\n+        \"Short name '\" + shortName + \"' is not unique\\nclass '\" + ep.instantiateTool().getClass().getCanonicalName() + \"' in \" + descriptor +\n+        \"\\nand\\nclass'\" + duplicate.instantiateTool().getClass().getCanonicalName() + \"' in \" + duplicate.getPluginDescriptor() + \"\\nconflict\",\n+        descriptor.getPluginId()));\n     }\n   }\n ",
      "parent_sha": "e7b18faba4cc58107c947403b4909d4199278267"
    }
  }
]